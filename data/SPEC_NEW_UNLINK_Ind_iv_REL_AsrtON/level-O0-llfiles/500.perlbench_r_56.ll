; ModuleID = 'op.c'
source_filename = "op.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.cv = type { %struct.xpvcv*, i32, i32, %union.anon.10 }
%struct.xpvcv = type { %struct.hv*, %union._xmgu, i64, %union.anon.5, %struct.hv*, %union.anon.6, %union.anon.7, %union.anon.8, i8*, %union.anon.9, %struct.cv*, i32, i32, i32 }
%union._xmgu = type { %struct.magic* }
%struct.magic = type { %struct.magic*, %struct.mgvtbl*, i16, i8, i8, i64, %struct.sv*, i8* }
%struct.mgvtbl = type { i32 (%struct.sv*, %struct.magic*)*, i32 (%struct.sv*, %struct.magic*)*, i32 (%struct.sv*, %struct.magic*)*, i32 (%struct.sv*, %struct.magic*)*, i32 (%struct.sv*, %struct.magic*)*, i32 (%struct.sv*, %struct.magic*, %struct.sv*, i8*, i32)*, i32 (%struct.magic*, %struct.clone_params*)*, i32 (%struct.sv*, %struct.magic*)* }
%struct.clone_params = type { %struct.av*, i64, %struct.interpreter*, %struct.interpreter*, %struct.av* }
%struct.interpreter = type { i8 }
%struct.av = type { %struct.xpvav*, i32, i32, %union.anon.2 }
%struct.xpvav = type { %struct.hv*, %union._xmgu, i64, i64, %struct.sv** }
%union.anon.2 = type { i8* }
%struct.sv = type { i8*, i32, i32, %union.anon }
%union.anon = type { i8* }
%union.anon.5 = type { i64 }
%struct.hv = type { %struct.xpvhv*, i32, i32, %union.anon.4 }
%struct.xpvhv = type { %struct.hv*, %union._xmgu, i64, i64 }
%union.anon.4 = type { i8* }
%union.anon.6 = type { %struct.op* }
%struct.op = type { %struct.op*, %struct.op*, %struct.op* ()*, i64, i16, i8, i8 }
%union.anon.7 = type { %struct.op* }
%union.anon.8 = type { %struct.gv* }
%struct.gv = type { %struct.xpvgv*, i32, i32, %union.anon.3 }
%struct.xpvgv = type { %struct.hv*, %union._xmgu, i64, %union.anon.11, %union._xivu, %union._xnvu }
%union.anon.11 = type { i64 }
%union._xivu = type { i64 }
%union._xnvu = type { double }
%union.anon.3 = type { i8* }
%union.anon.9 = type { %struct.padlist* }
%struct.padlist = type { i64, %struct.av**, i32, i32 }
%union.anon.10 = type { i8* }
%struct.yy_parser = type { %struct.yy_parser*, %union.YYSTYPE, i32, i32, i32, i32, %struct.yy_stack_frame*, %struct.yy_stack_frame*, i32, i32, i8*, i8*, i8, i8, i8, i8, i32, %struct.op*, %struct.op*, %struct.sv*, i16, i16, i32, %struct.sv*, i32, i32, i8, i8, i8, i8, i32, %struct._sublex_info, %struct.yy_lexshared*, %struct.sv*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i32, i16, i8, i8, %struct.hv*, %struct._PerlIO**, %struct.av*, i8, [5 x %union.YYSTYPE], [5 x i32], i32, %struct.cop*, [256 x i8], i32, i32, i8, i8, i8 }
%union.YYSTYPE = type { i8* }
%struct.yy_stack_frame = type { %union.YYSTYPE, i16, i32, %struct.cv* }
%struct._sublex_info = type { i8, i16, %struct.op*, %struct.sv* }
%struct.yy_lexshared = type { %struct.yy_lexshared*, %struct.sv*, i8*, i8*, %struct.sv* }
%struct._PerlIO = type opaque
%struct.cop = type { %struct.op*, %struct.op*, %struct.op* ()*, i64, i16, i8, i8, i32, %struct.hv*, %struct.gv*, i32, i32, i64*, %struct.refcounted_he* }
%struct.refcounted_he = type { %struct.refcounted_he*, %struct.hek*, %union.anon.16, i32, [1 x i8] }
%struct.hek = type { i32, i32, [1 x i8] }
%union.anon.16 = type { i64 }
%struct.padnamelist = type { i64, %struct.padname**, i64, i64, i32 }
%struct.padname = type { i8*, %struct.hv*, %union.anon.23, i32, i32, i32, i32, i8, i8 }
%union.anon.23 = type { %struct.hv* }
%struct.stackinfo = type { %struct.av*, %struct.context*, %struct.stackinfo*, %struct.stackinfo*, i32, i32, i32, i32 }
%struct.context = type { %union.anon.25 }
%union.anon.25 = type { %struct.subst }
%struct.subst = type { i8, i8, i16, i32, i64, i64, i8*, %struct.sv*, %struct.sv*, i8*, i8*, i8*, i8*, %struct.p5rx* }
%struct.p5rx = type { %struct.regexp*, i32, i32, %union.anon.15 }
%struct.regexp = type { %struct.hv*, %union._xmgu, i64, %union.anon.14, %struct.regexp_engine*, %struct.p5rx*, %struct.hv*, i32, i64, i64, i64, %struct.reg_substr_data*, i32, i32, i8*, i32, i32, %struct.regexp_paren_pair*, i8*, %struct.sv*, i64, i64, i64, i64, i16, %struct.cv* }
%union.anon.14 = type { i64 }
%struct.regexp_engine = type { %struct.p5rx* (%struct.sv*, i32)*, i32 (%struct.p5rx*, i8*, i8*, i8*, i64, %struct.sv*, i8*, i32)*, i8* (%struct.p5rx*, %struct.sv*, i8*, i8*, i8*, i32, %struct.re_scream_pos_data_s*)*, %struct.sv* (%struct.p5rx*)*, void (%struct.p5rx*)*, void (%struct.p5rx*, i32, %struct.sv*)*, void (%struct.p5rx*, i32, %struct.sv*)*, i32 (%struct.p5rx*, %struct.sv*, i32)*, %struct.sv* (%struct.p5rx*, %struct.sv*, %struct.sv*, i32)*, %struct.sv* (%struct.p5rx*, %struct.sv*, i32)*, %struct.sv* (%struct.p5rx*)*, %struct.p5rx* (%struct.sv**, i32, %struct.op*, %struct.regexp_engine*, %struct.p5rx*, i8*, i32, i32)* }
%struct.re_scream_pos_data_s = type { i8**, i64* }
%struct.reg_substr_data = type { i8, [3 x %struct.reg_substr_datum] }
%struct.reg_substr_datum = type { i64, i64, %struct.sv*, %struct.sv*, i64 }
%struct.regexp_paren_pair = type { i64, i64, i64 }
%union.anon.15 = type { i8* }
%struct.custom_op = type { i32, i8*, i8*, i32, void (%struct.op*, %struct.op*)* }
%struct.pmop = type { %struct.op*, %struct.op*, %struct.op* ()*, i64, i16, i8, i8, %struct.op*, %struct.op*, %struct.p5rx*, i32, %union.anon.18, %union.anon.19, %struct.op* }
%union.anon.18 = type { %struct.op* }
%union.anon.19 = type { %struct.op* }
%struct.jmpenv = type { [1 x %struct.__jmp_buf_tag], %struct.jmpenv*, i32, i8 }
%struct.__jmp_buf_tag = type { [8 x i64], i32, %struct.__sigset_t }
%struct.__sigset_t = type { [16 x i64] }
%struct.opslab = type { %struct.opslot*, %struct.opslab*, %struct.op*, i64, %struct.opslot }
%struct.opslot = type { %struct.opslot*, %struct.opslab*, %struct.op }
%struct.unop = type { %struct.op*, %struct.op*, %struct.op* ()*, i64, i16, i8, i8, %struct.op* }
%union.UNOP_AUX_item = type { i64 }
%struct.svop = type { %struct.op*, %struct.op*, %struct.op* ()*, i64, i16, i8, i8, %struct.sv* }
%struct.methop = type { %struct.op*, %struct.op*, %struct.op* ()*, i64, i16, i8, i8, %union.anon.17, %struct.sv* }
%union.anon.17 = type { %struct.op* }
%struct.pvop = type { %struct.op*, %struct.op*, %struct.op* ()*, i64, i16, i8, i8, i8* }
%struct.unop_aux = type { %struct.op*, %struct.op*, %struct.op* ()*, i64, i16, i8, i8, %struct.op*, %union.UNOP_AUX_item* }
%union.XOPRETANY = type { i8* }
%struct.listop = type { %struct.op*, %struct.op*, %struct.op* ()*, i64, i16, i8, i8, %struct.op*, %struct.op* }
%struct.he = type { %struct.he*, %struct.hek*, %union.anon.0 }
%union.anon.0 = type { %struct.sv* }
%struct.xpv = type { %struct.hv*, %union._xmgu, i64, %union.anon.21 }
%union.anon.21 = type { i64 }
%struct.xpviv = type { %struct.hv*, %union._xmgu, i64, %union.anon.22, %union._xivu }
%union.anon.22 = type { i64 }
%struct.logop = type { %struct.op*, %struct.op*, %struct.op* ()*, i64, i16, i8, i8, %struct.op*, %struct.op* }
%struct.binop = type { %struct.op*, %struct.op*, %struct.op* ()*, i64, i16, i8, i8, %struct.op*, %struct.op* }
%struct.xpvnv = type { %struct.hv*, %union._xmgu, i64, %union.anon.20, %union._xivu, %union._xnvu }
%union.anon.20 = type { i64 }
%struct.gp = type { %struct.sv*, %struct.io*, %struct.cv*, i32, i32, %struct.hv*, %struct.av*, %struct.cv*, %struct.gv*, i32, %struct.hek* }
%struct.io = type { %struct.xpvio*, i32, i32, %union.anon.1 }
%struct.xpvio = type { %struct.hv*, %union._xmgu, i64, %union.anon.12, %union._xivu, %struct._PerlIO**, %union.anon.13, i64, i64, i64, i8*, %struct.gv*, i8*, %struct.gv*, i8*, %struct.gv*, i8, i8 }
%union.anon.12 = type { i64 }
%union.anon.13 = type { %struct.__dirstream* }
%struct.__dirstream = type opaque
%union.anon.1 = type { i8* }
%struct.xpvhv_aux = type { %union._xhvnameu, %struct.av*, %struct.he*, i32, i32, %struct.mro_meta*, i32, i32, i32, i32 }
%union._xhvnameu = type { %struct.hek* }
%struct.mro_meta = type { %struct.hv*, %struct.sv*, %struct.hv*, i32, i32, %struct.mro_alg*, %struct.hv*, %struct.hv*, i32 }
%struct.mro_alg = type { %struct.av* (%struct.hv*, i32)*, i8*, i16, i16, i32 }
%struct.__va_list_tag = type { i32, i32, i8*, i8* }
%struct.block_hooks = type { i32, void (i32)*, void (%struct.op**)*, void (%struct.op**)*, void (%struct.op*)* }
%struct.xpvuv = type { %struct.hv*, %union._xmgu, i64, %union.anon.24, %union._xivu }
%union.anon.24 = type { i64 }
%struct.block = type { i8, i8, i16, i32, %struct.cop*, i32, i32, %struct.pmop*, %union.anon.26 }
%union.anon.26 = type { %struct.block_sub }
%struct.block_sub = type { %struct.op*, %struct.cv*, %struct.av*, %struct.av*, i32, %struct.av* }
%union.any = type { i8* }
%struct.loop = type { %struct.op*, %struct.op*, %struct.op* ()*, i64, i16, i8, i8, %struct.op*, %struct.op*, %struct.op*, %struct.op*, %struct.op* }
%struct.shared_he = type { %struct.he, %struct.hek }

@PL_compcv = external dso_local global %struct.cv*, align 8
@PL_comppad = external dso_local global %struct.av*, align 8
@PL_curpad = external dso_local global %struct.sv**, align 8
@PL_parser = external dso_local global %struct.yy_parser*, align 8
@.str = private unnamed_addr constant [39 x i8] c"panic: allocmy illegal flag bits 0x%lx\00", align 1
@PL_charclass = external dso_local constant [0 x i32], align 4
@.str.1 = private unnamed_addr constant [5 x i8] c"\09\0A\0D\0C\00", align 1
@.str.2 = private unnamed_addr constant [35 x i8] c"Can't use global %c^%c%.*s in \22%s\22\00", align 1
@.str.3 = private unnamed_addr constant [6 x i8] c"state\00", align 1
@.str.4 = private unnamed_addr constant [3 x i8] c"my\00", align 1
@.str.5 = private unnamed_addr constant [30 x i8] c"Can't use global %.*s in \22%s\22\00", align 1
@.str.6 = private unnamed_addr constant [29 x i8] c"Use of %s $_ is experimental\00", align 1
@PL_curstash = external dso_local global %struct.hv*, align 8
@.str.7 = private unnamed_addr constant [3 x i8] c"$_\00", align 1
@PL_defstash = external dso_local global %struct.hv*, align 8
@PL_ppaddr = external dso_local global [0 x %struct.op* ()*], align 8
@PL_opfreehook = external dso_local global void (%struct.op*)*, align 8
@PL_check = external dso_local global [0 x %struct.op* (%struct.op*)*], align 8
@PL_opargs = external dso_local constant [0 x i32], align 4
@.str.8 = private unnamed_addr constant [40 x i8] c"panic: op_sibling_splice(): NULL parent\00", align 1
@.str.9 = private unnamed_addr constant [40 x i8] c"panic: op_contextualize bad context %ld\00", align 1
@PL_compiling = external dso_local global %struct.cop, align 8
@PL_curcop = external dso_local global %struct.cop*, align 8
@.str.10 = private unnamed_addr constant [38 x i8] c"Useless use of sort in scalar context\00", align 1
@.str.11 = private unnamed_addr constant [59 x i8] c"%%%-p%c%s%c in scalar context better written as $%-p%c%s%c\00", align 1
@.str.12 = private unnamed_addr constant [61 x i8] c"%%%-p%c%-p%c in scalar context better written as $%-p%c%-p%c\00", align 1
@PL_op_desc = external dso_local constant [0 x i8*], align 8
@.str.13 = private unnamed_addr constant [30 x i8] c"negative pattern binding (!~)\00", align 1
@.str.14 = private unnamed_addr constant [37 x i8] c"non-destructive substitution (s///r)\00", align 1
@.str.15 = private unnamed_addr constant [41 x i8] c"non-destructive transliteration (tr///r)\00", align 1
@.str.16 = private unnamed_addr constant [11 x i8] c"a variable\00", align 1
@.str.17 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.18 = private unnamed_addr constant [16 x i8] c"a constant (%s)\00", align 1
@.str.19 = private unnamed_addr constant [17 x i8] c"a constant (%-p)\00", align 1
@.str.20 = private unnamed_addr constant [19 x i8] c"a constant (undef)\00", align 1
@.str.21 = private unnamed_addr constant [35 x i8] c"Useless use of %-p in void context\00", align 1
@.str.22 = private unnamed_addr constant [34 x i8] c"Useless use of %s in void context\00", align 1
@PL_comppad_name = external dso_local global %struct.padnamelist*, align 8
@.str.23 = private unnamed_addr constant [7 x i8] c"FIELDS\00", align 1
@.str.24 = private unnamed_addr constant [59 x i8] c"No such class field \22%-p\22 in variable %d%lu%4p of type %2p\00", align 1
@PL_modcount = external dso_local global i32, align 4
@.str.25 = private unnamed_addr constant [58 x i8] c"panic: unexpected lvalue entersub args: type/targ %ld:%lu\00", align 1
@.str.26 = private unnamed_addr constant [64 x i8] c"Unexpected constant lvalue entersub entry via type/targ %ld:%lu\00", align 1
@.str.27 = private unnamed_addr constant [22 x i8] c"Can't modify %s in %s\00", align 1
@.str.28 = private unnamed_addr constant [9 x i8] c"do block\00", align 1
@.str.29 = private unnamed_addr constant [27 x i8] c"non-lvalue subroutine call\00", align 1
@.str.30 = private unnamed_addr constant [6 x i8] c"local\00", align 1
@.str.31 = private unnamed_addr constant [41 x i8] c"Can't localize lexical variable %d%lu%4p\00", align 1
@.str.32 = private unnamed_addr constant [12 x i8] c"refaliasing\00", align 1
@.str.33 = private unnamed_addr constant [48 x i8] c"Experimental aliasing via reference not enabled\00", align 1
@.str.34 = private unnamed_addr constant [39 x i8] c"Aliasing via reference is experimental\00", align 1
@.str.35 = private unnamed_addr constant [27 x i8] c"Useless localization of %s\00", align 1
@.str.36 = private unnamed_addr constant [11 x i8] c"attributes\00", align 1
@.str.37 = private unnamed_addr constant [43 x i8] c"Applying %s to %-p will act on scalar(%-p)\00", align 1
@.str.38 = private unnamed_addr constant [7 x i8] c"@array\00", align 1
@.str.39 = private unnamed_addr constant [6 x i8] c"%hash\00", align 1
@.str.40 = private unnamed_addr constant [41 x i8] c"Applying %s to %s will act on scalar(%s)\00", align 1
@.str.41 = private unnamed_addr constant [39 x i8] c"Using !~ with s///r doesn't make sense\00", align 1
@.str.42 = private unnamed_addr constant [40 x i8] c"Using !~ with tr///r doesn't make sense\00", align 1
@PL_perldb = external dso_local global i32, align 4
@PL_tainting = external dso_local global i8, align 1
@PL_savestack_ix = external dso_local global i32, align 4
@PL_cop_seqmax = external dso_local global i32, align 4
@PL_blockhooks = external dso_local global %struct.av*, align 8
@PL_in_eval = external dso_local global i8, align 1
@PL_eval_root = external dso_local global %struct.op*, align 8
@PL_curstackinfo = external dso_local global %struct.stackinfo*, align 8
@PL_eval_start = external dso_local global %struct.op*, align 8
@PL_peepp = external dso_local global void (%struct.op*)*, align 8
@PL_main_root = external dso_local global %struct.op*, align 8
@PL_main_start = external dso_local global %struct.op*, align 8
@.str.43 = private unnamed_addr constant [14 x i8] c"DB::postponed\00", align 1
@PL_stack_sp = external dso_local global %struct.sv**, align 8
@PL_markstack_ptr = external dso_local global i32*, align 8
@PL_markstack_max = external dso_local global i32*, align 8
@PL_stack_base = external dso_local global %struct.sv**, align 8
@PL_stack_max = external dso_local global %struct.sv**, align 8
@.str.44 = private unnamed_addr constant [5 x i8] c", \09\0A\00", align 1
@.str.45 = private unnamed_addr constant [5 x i8] c"@$%*\00", align 1
@.str.46 = private unnamed_addr constant [37 x i8] c"Parentheses missing around \22%s\22 list\00", align 1
@.str.47 = private unnamed_addr constant [4 x i8] c"our\00", align 1
@.str.48 = private unnamed_addr constant [2 x i8] c";\00", align 1
@PL_op_mask = external dso_local global i8*, align 8
@.str.49 = private unnamed_addr constant [31 x i8] c"'%s' trapped by operation mask\00", align 1
@.str.50 = private unnamed_addr constant [8 x i8] c"reflags\00", align 1
@.str.51 = private unnamed_addr constant [16 x i8] c"reflags_charset\00", align 1
@PL_sv_no = external dso_local global %struct.sv, align 8
@PL_defgv = external dso_local global %struct.gv*, align 8
@PL_curstname = external dso_local global %struct.sv*, align 8
@.str.52 = private unnamed_addr constant [8 x i8] c"VERSION\00", align 1
@.str.53 = private unnamed_addr constant [29 x i8] c"Module name must be constant\00", align 1
@.str.54 = private unnamed_addr constant [41 x i8] c"Version number must be a constant number\00", align 1
@.str.55 = private unnamed_addr constant [7 x i8] c"import\00", align 1
@.str.56 = private unnamed_addr constant [9 x i8] c"unimport\00", align 1
@.str.57 = private unnamed_addr constant [6 x i8] c"BEGIN\00", align 1
@.str.58 = private unnamed_addr constant [3 x i8] c"do\00", align 1
@Perl_newASSIGNOP.no_list_state = internal constant [70 x i8] c"Initialization of state variables in list context currently forbidden\00", align 16
@PL_debstash = external dso_local global %struct.hv*, align 8
@PL_sv_undef = external dso_local global %struct.sv, align 8
@.str.59 = private unnamed_addr constant [2 x i8] c"$\00", align 1
@.str.60 = private unnamed_addr constant [31 x i8] c"Can't use %s for loop variable\00", align 1
@.str.61 = private unnamed_addr constant [3 x i8] c"::\00", align 1
@.str.62 = private unnamed_addr constant [20 x i8] c"Prototype mismatch:\00", align 1
@.str.63 = private unnamed_addr constant [9 x i8] c" sub %-p\00", align 1
@.str.64 = private unnamed_addr constant [12 x i8] c" (%d%lu%4p)\00", align 1
@.str.65 = private unnamed_addr constant [7 x i8] c": none\00", align 1
@.str.66 = private unnamed_addr constant [5 x i8] c" vs \00", align 1
@.str.67 = private unnamed_addr constant [11 x i8] c"(%d%lu%4p)\00", align 1
@.str.68 = private unnamed_addr constant [5 x i8] c"none\00", align 1
@.str.69 = private unnamed_addr constant [4 x i8] c"%-p\00", align 1
@.str.70 = private unnamed_addr constant [17 x i8] c"Too Hot To Hoot!\00", align 1
@PL_sub_generation = external dso_local global i32, align 4
@PL_breakable_sub_gen = external dso_local global i32, align 4
@.str.71 = private unnamed_addr constant [11 x i8] c"%s:%ld-%ld\00", align 1
@PL_subline = external dso_local global i32, align 4
@.str.72 = private unnamed_addr constant [11 x i8] c"__ANON__::\00", align 1
@PL_DBsub = external dso_local global %struct.gv*, align 8
@.str.73 = private unnamed_addr constant [11 x i8] c"%s[%s:%ld]\00", align 1
@.str.74 = private unnamed_addr constant [9 x i8] c"__ANON__\00", align 1
@.str.75 = private unnamed_addr constant [19 x i8] c"__ANON__::__ANON__\00", align 1
@.str.76 = private unnamed_addr constant [49 x i8] c"BEGIN not safe after errors--compilation aborted\00", align 1
@PL_errgv = external dso_local global %struct.gv*, align 8
@.str.77 = private unnamed_addr constant [34 x i8] c"Constant subroutine %-p redefined\00", align 1
@PL_xsubfilename = external dso_local global i8*, align 8
@.str.78 = private unnamed_addr constant [7 x i8] c"STDOUT\00", align 1
@.str.79 = private unnamed_addr constant [21 x i8] c"Format %-p redefined\00", align 1
@.str.80 = private unnamed_addr constant [24 x i8] c"Format STDOUT redefined\00", align 1
@.str.81 = private unnamed_addr constant [13 x i8] c"oops: oopsAV\00", align 1
@.str.82 = private unnamed_addr constant [13 x i8] c"oops: oopsHV\00", align 1
@.str.83 = private unnamed_addr constant [34 x i8] c"Can't use an array as a reference\00", align 1
@.str.84 = private unnamed_addr constant [32 x i8] c"Can't use a hash as a reference\00", align 1
@.str.85 = private unnamed_addr constant [9 x i8] c"readpipe\00", align 1
@.str.86 = private unnamed_addr constant [36 x i8] c"The bitwise feature is experimental\00", align 1
@.str.87 = private unnamed_addr constant [51 x i8] c"Possible precedence problem on bitwise %s operator\00", align 1
@.str.88 = private unnamed_addr constant [2 x i8] c"|\00", align 1
@.str.89 = private unnamed_addr constant [2 x i8] c"&\00", align 1
@.str.90 = private unnamed_addr constant [2 x i8] c"^\00", align 1
@.str.91 = private unnamed_addr constant [3 x i8] c"|.\00", align 1
@.str.92 = private unnamed_addr constant [3 x i8] c"&.\00", align 1
@.str.93 = private unnamed_addr constant [3 x i8] c"^.\00", align 1
@.str.94 = private unnamed_addr constant [34 x i8] c"$[ used in %s (did you mean $] ?)\00", align 1
@.str.95 = private unnamed_addr constant [60 x i8] c"delete argument is index/value array slice, use array slice\00", align 1
@.str.96 = private unnamed_addr constant [56 x i8] c"delete argument is key/value hash slice, use hash slice\00", align 1
@.str.97 = private unnamed_addr constant [56 x i8] c"delete argument is not a HASH or ARRAY element or slice\00", align 1
@PL_argvgv = external dso_local global %struct.gv*, align 8
@PL_hintgv = external dso_local global %struct.gv*, align 8
@.str.98 = private unnamed_addr constant [8 x i8] c"unieval\00", align 1
@.str.99 = private unnamed_addr constant [41 x i8] c"exists argument is not a subroutine name\00", align 1
@.str.100 = private unnamed_addr constant [63 x i8] c"exists argument is not a HASH or ARRAY element or a subroutine\00", align 1
@.str.101 = private unnamed_addr constant [9 x i8] c"a SCALAR\00", align 1
@.str.102 = private unnamed_addr constant [9 x i8] c"an ARRAY\00", align 1
@.str.103 = private unnamed_addr constant [7 x i8] c"a HASH\00", align 1
@.str.104 = private unnamed_addr constant [64 x i8] c"Can't use bareword (\22%-p\22) as %s ref while \22strict refs\22 in use\00", align 1
@PL_stdingv = external dso_local global %struct.gv*, align 8
@.str.105 = private unnamed_addr constant [33 x i8] c"Useless use of %s with no values\00", align 1
@.str.106 = private unnamed_addr constant [6 x i8] c"array\00", align 1
@.str.107 = private unnamed_addr constant [32 x i8] c"%s on reference is experimental\00", align 1
@.str.108 = private unnamed_addr constant [5 x i8] c"hash\00", align 1
@.str.109 = private unnamed_addr constant [7 x i8] c"HANDLE\00", align 1
@.str.110 = private unnamed_addr constant [3 x i8] c"[]\00", align 1
@.str.111 = private unnamed_addr constant [3 x i8] c"{}\00", align 1
@.str.112 = private unnamed_addr constant [10 x i8] c"%s%c...%c\00", align 1
@.str.113 = private unnamed_addr constant [11 x i8] c"__ANONIO__\00", align 1
@.str.114 = private unnamed_addr constant [5 x i8] c"glob\00", align 1
@PL_globhook = external dso_local global void ()*, align 8
@.str.115 = private unnamed_addr constant [11 x i8] c"File::Glob\00", align 1
@.str.116 = private unnamed_addr constant [24 x i8] c"panic: ck_grep, type=%u\00", align 1
@PL_tainted = external dso_local global i8, align 1
@.str.117 = private unnamed_addr constant [72 x i8] c"Can't use 'defined(@array)' (Maybe you should just omit the defined()?)\00", align 1
@.str.118 = private unnamed_addr constant [72 x i8] c"Can't use 'defined(%%hash)' (Maybe you should just omit the defined()?)\00", align 1
@.str.119 = private unnamed_addr constant [2 x i8] c":\00", align 1
@.str.120 = private unnamed_addr constant [8 x i8] c"SUPER::\00", align 1
@.str.121 = private unnamed_addr constant [10 x i8] c"::SUPER::\00", align 1
@.str.122 = private unnamed_addr constant [50 x i8] c"Can't modify reference to %s in scalar assignment\00", align 1
@.str.123 = private unnamed_addr constant [4 x i8] c".pm\00", align 1
@.str.124 = private unnamed_addr constant [8 x i8] c"require\00", align 1
@.str.125 = private unnamed_addr constant [5 x i8] c"sort\00", align 1
@.str.126 = private unnamed_addr constant [25 x i8] c"panic: ck_split, type=%u\00", align 1
@.str.127 = private unnamed_addr constant [2 x i8] c" \00", align 1
@.str.128 = private unnamed_addr constant [43 x i8] c"Use of /g modifier is meaningless in split\00", align 1
@.str.129 = private unnamed_addr constant [7 x i8] c"STRING\00", align 1
@.str.130 = private unnamed_addr constant [42 x i8] c"/%-p/ should probably be written as \22%-p\22\00", align 1
@.str.131 = private unnamed_addr constant [32 x i8] c"panic: rv2cv_op_cv bad flags %x\00", align 1
@.str.132 = private unnamed_addr constant [58 x i8] c"panic: ck_entersub_args_proto CV with no proto, flags=%lx\00", align 1
@.str.133 = private unnamed_addr constant [27 x i8] c"Too many arguments for %-p\00", align 1
@.str.134 = private unnamed_addr constant [4 x i8] c";@%\00", align 1
@.str.135 = private unnamed_addr constant [16 x i8] c"block or sub {}\00", align 1
@.str.136 = private unnamed_addr constant [7 x i8] c"sub {}\00", align 1
@.str.137 = private unnamed_addr constant [12 x i8] c"one of %.*s\00", align 1
@.str.138 = private unnamed_addr constant [7 x i8] c"symbol\00", align 1
@.str.139 = private unnamed_addr constant [11 x i8] c"subroutine\00", align 1
@.str.140 = private unnamed_addr constant [7 x i8] c"scalar\00", align 1
@.str.141 = private unnamed_addr constant [33 x i8] c"Malformed prototype for %-p: %-p\00", align 1
@.str.142 = private unnamed_addr constant [29 x i8] c"Not enough arguments for %-p\00", align 1
@.str.143 = private unnamed_addr constant [4 x i8] c"%ld\00", align 1
@.str.144 = private unnamed_addr constant [10 x i8] c"evalbytes\00", align 1
@.str.145 = private unnamed_addr constant [19 x i8] c"%s is experimental\00", align 1
@.str.146 = private unnamed_addr constant [53 x i8] c"length() used on %-p (did you mean \22scalar(%s%-p)\22?)\00", align 1
@.str.147 = private unnamed_addr constant [6 x i8] c"keys \00", align 1
@.str.148 = private unnamed_addr constant [62 x i8] c"length() used on %%hash (did you mean \22scalar(keys %%hash)\22?)\00", align 1
@.str.149 = private unnamed_addr constant [57 x i8] c"length() used on @array (did you mean \22scalar(@array)\22?)\00", align 1
@PL_op = external dso_local global %struct.op*, align 8
@PL_rpeepp = external dso_local global void (%struct.op*)*, align 8
@PL_cv_has_eval = external dso_local global i8, align 1
@PL_generation = external dso_local global i32, align 4
@Perl_custom_op_get_field.xop_null = internal constant %struct.custom_op zeroinitializer, align 8
@PL_custom_ops = external dso_local global %struct.hv*, align 8
@PL_custom_op_names = external dso_local global %struct.hv*, align 8
@PL_custom_op_descs = external dso_local global %struct.hv*, align 8
@PL_op_name = external dso_local constant [0 x i8*], align 8
@.str.150 = private unnamed_addr constant [35 x i8] c"panic: can't register custom OP %s\00", align 1
@.str.151 = private unnamed_addr constant [3 x i8] c"_;\00", align 1
@.str.152 = private unnamed_addr constant [2 x i8] c"+\00", align 1
@.str.153 = private unnamed_addr constant [3 x i8] c"+@\00", align 1
@.str.154 = private unnamed_addr constant [3 x i8] c";+\00", align 1
@.str.155 = private unnamed_addr constant [7 x i8] c";\\[$*]\00", align 1
@.str.156 = private unnamed_addr constant [6 x i8] c"+;$$@\00", align 1
@.str.157 = private unnamed_addr constant [10 x i8] c"entereval\00", align 1
@.str.158 = private unnamed_addr constant [9 x i8] c"backtick\00", align 1
@.str.159 = private unnamed_addr constant [9 x i8] c"?$@@%&*$\00", align 1
@.str.160 = private unnamed_addr constant [8 x i8] c"autouse\00", align 1
@.str.161 = private unnamed_addr constant [25 x i8] c"Subroutine %-p redefined\00", align 1
@PL_curpm = external dso_local global %struct.pmop*, align 8
@.str.162 = private unnamed_addr constant [6 x i8] c"undef\00", align 1
@.str.163 = private unnamed_addr constant [4 x i8] c"...\00", align 1
@.str.164 = private unnamed_addr constant [54 x i8] c"Bareword \22%-p\22 not allowed while \22strict subs\22 in use\00", align 1
@.str.165 = private unnamed_addr constant [33 x i8] c"Statement unlikely to be reached\00", align 1
@.str.166 = private unnamed_addr constant [51 x i8] c"\09(Maybe you meant system() when you said exec()?)\0A\00", align 1
@.str.167 = private unnamed_addr constant [42 x i8] c"%-p() called too early to check prototype\00", align 1
@.str.168 = private unnamed_addr constant [53 x i8] c"Scalar value @%-p%c%s%c better written as $%-p%c%s%c\00", align 1
@.str.169 = private unnamed_addr constant [55 x i8] c"Scalar value @%-p%c%-p%c better written as $%-p%c%-p%c\00", align 1
@.str.170 = private unnamed_addr constant [75 x i8] c"Can't modify reference to localized parenthesized array in list assignment\00", align 1
@.str.171 = private unnamed_addr constant [64 x i8] c"Can't modify reference to parenthesized hash in list assignment\00", align 1
@.str.172 = private unnamed_addr constant [35 x i8] c"Can't modify reference to %s in %s\00", align 1
@.str.173 = private unnamed_addr constant [25 x i8] c"Can't declare %s in \22%s\22\00", align 1
@PL_incgv = external dso_local global %struct.gv*, align 8
@.str.174 = private unnamed_addr constant [14 x i8] c"attributes.pm\00", align 1
@PL_tmps_floor = external dso_local global i64, align 8
@PL_runops = external dso_local global i32 ()*, align 8
@PL_warnhook = external dso_local global %struct.sv*, align 8
@PL_diehook = external dso_local global %struct.sv*, align 8
@PL_dowarn = external dso_local global i8, align 1
@PL_scopestack_ix = external dso_local global i32, align 4
@PL_sv_placeholder = external dso_local global %struct.sv, align 8
@PL_top_env = external dso_local global %struct.jmpenv*, align 8
@.str.175 = private unnamed_addr constant [46 x i8] c"panic: fold_constants JMPENV_PUSH returned %d\00", align 1
@PL_sv_yes = external dso_local global %struct.sv, align 8
@.str.176 = private unnamed_addr constant [11 x i8] c"# comment\0A\00", align 1
@.str.177 = private unnamed_addr constant [18 x i8] c"%04lx\09%04lx\09XXXX\0A\00", align 1
@.str.178 = private unnamed_addr constant [13 x i8] c"%04lx\09\09XXXX\0A\00", align 1
@.str.179 = private unnamed_addr constant [19 x i8] c"%04lx\09%04lx\09%04lx\0A\00", align 1
@.str.180 = private unnamed_addr constant [14 x i8] c"%04lx\09\09%04lx\0A\00", align 1
@.str.181 = private unnamed_addr constant [5 x i8] c"utf8\00", align 1
@.str.182 = private unnamed_addr constant [6 x i8] c"FINAL\00", align 1
@.str.183 = private unnamed_addr constant [55 x i8] c"Useless use of /d modifier in transliteration operator\00", align 1
@.str.184 = private unnamed_addr constant [44 x i8] c"Replacement list is longer than search list\00", align 1
@.str.185 = private unnamed_addr constant [8 x i8] c"unicode\00", align 1
@.str.186 = private unnamed_addr constant [39 x i8] c"Assignment to both a list and a scalar\00", align 1
@.str.187 = private unnamed_addr constant [53 x i8] c"Possible precedence issue with control flow operator\00", align 1
@.str.188 = private unnamed_addr constant [30 x i8] c"Bareword found in conditional\00", align 1
@.str.189 = private unnamed_addr constant [44 x i8] c"Deprecated use of my() in false conditional\00", align 1
@.str.190 = private unnamed_addr constant [46 x i8] c"Value of %s%s can be \220\22; test with defined()\00", align 1
@.str.191 = private unnamed_addr constant [11 x i8] c" construct\00", align 1
@.str.192 = private unnamed_addr constant [12 x i8] c"() operator\00", align 1
@.str.193 = private unnamed_addr constant [37 x i8] c"Found = in conditional, should be ==\00", align 1
@.str.194 = private unnamed_addr constant [11 x i8] c"prototype(\00", align 1
@.str.195 = private unnamed_addr constant [79 x i8] c"Attribute prototype(%d%lu%4p) discards earlier prototype attribute in same sub\00", align 1
@.str.196 = private unnamed_addr constant [74 x i8] c"Prototype '%d%lu%4p' overridden by attribute 'prototype(%d%lu%4p)' in %-p\00", align 1
@.str.197 = private unnamed_addr constant [63 x i8] c"lvalue attribute ignored after the subroutine has been defined\00", align 1
@.str.198 = private unnamed_addr constant [4 x i8] c"END\00", align 1
@.str.199 = private unnamed_addr constant [10 x i8] c"UNITCHECK\00", align 1
@.str.200 = private unnamed_addr constant [6 x i8] c"CHECK\00", align 1
@.str.201 = private unnamed_addr constant [5 x i8] c"INIT\00", align 1
@PL_curstack = external dso_local global %struct.av*, align 8
@PL_beginav = external dso_local global %struct.av*, align 8
@PL_savebegin = external dso_local global i8, align 1
@PL_endav = external dso_local global %struct.av*, align 8
@PL_unitcheckav = external dso_local global %struct.av*, align 8
@.str.202 = private unnamed_addr constant [28 x i8] c"Too late to run CHECK block\00", align 1
@PL_checkav = external dso_local global %struct.av*, align 8
@.str.203 = private unnamed_addr constant [27 x i8] c"Too late to run INIT block\00", align 1
@PL_initav = external dso_local global %struct.av*, align 8
@.str.204 = private unnamed_addr constant [2 x i8] c"[\00", align 1
@.str.205 = private unnamed_addr constant [50 x i8] c"Missing comma after first argument to %s function\00", align 1
@.str.206 = private unnamed_addr constant [26 x i8] c"Too many arguments for %s\00", align 1
@.str.207 = private unnamed_addr constant [41 x i8] c"Type of arg %d to %s must be %s (not %s)\00", align 1
@.str.208 = private unnamed_addr constant [28 x i8] c"Not enough arguments for %s\00", align 1
@.str.209 = private unnamed_addr constant [32 x i8] c"\22%s %s\22 used in sort comparison\00", align 1
@.str.210 = private unnamed_addr constant [42 x i8] c"Type of arg %d to %-p must be %s (not %s)\00", align 1
@.str.211 = private unnamed_addr constant [41 x i8] c"Magical list constants are not supported\00", align 1

; Function Attrs: noinline nounwind uwtable
define dso_local i8* @Perl_Slab_Alloc(i64 %sz) #0 {
entry:
  %sz.addr = alloca i64, align 8
  %slab = alloca %struct.opslab*, align 8
  %slab2 = alloca %struct.opslab*, align 8
  %slot = alloca %struct.opslot*, align 8
  %o = alloca %struct.op*, align 8
  %opsz = alloca i64, align 8
  %space = alloca i64, align 8
  %too = alloca %struct.op**, align 8
  store i64 %sz, i64* %sz.addr, align 8
  %0 = load %struct.cv*, %struct.cv** @PL_compcv, align 8
  %tobool = icmp ne %struct.cv* %0, null
  br i1 %tobool, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %entry
  %1 = load %struct.cv*, %struct.cv** @PL_compcv, align 8
  %sv_any = getelementptr inbounds %struct.cv, %struct.cv* %1, i32 0, i32 0
  %2 = load %struct.xpvcv*, %struct.xpvcv** %sv_any, align 8
  %3 = bitcast %struct.xpvcv* %2 to i8*
  %4 = bitcast i8* %3 to %struct.xpvcv*
  %xcv_root_u = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %4, i32 0, i32 6
  %xcv_root = bitcast %union.anon.7* %xcv_root_u to %struct.op**
  %5 = load %struct.op*, %struct.op** %xcv_root, align 8
  %tobool1 = icmp ne %struct.op* %5, null
  br i1 %tobool1, label %if.then, label %lor.lhs.false2

lor.lhs.false2:                                   ; preds = %lor.lhs.false
  %6 = load %struct.cv*, %struct.cv** @PL_compcv, align 8
  %sv_any3 = getelementptr inbounds %struct.cv, %struct.cv* %6, i32 0, i32 0
  %7 = load %struct.xpvcv*, %struct.xpvcv** %sv_any3, align 8
  %8 = bitcast %struct.xpvcv* %7 to i8*
  %9 = bitcast i8* %8 to %struct.xpvcv*
  %xcv_start_u = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %9, i32 0, i32 5
  %xcv_start = bitcast %union.anon.6* %xcv_start_u to %struct.op**
  %10 = load %struct.op*, %struct.op** %xcv_start, align 8
  %tobool4 = icmp ne %struct.op* %10, null
  br i1 %tobool4, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %lor.lhs.false2
  %11 = load %struct.cv*, %struct.cv** @PL_compcv, align 8
  %sv_any5 = getelementptr inbounds %struct.cv, %struct.cv* %11, i32 0, i32 0
  %12 = load %struct.xpvcv*, %struct.xpvcv** %sv_any5, align 8
  %13 = bitcast %struct.xpvcv* %12 to i8*
  %14 = bitcast i8* %13 to %struct.xpvcv*
  %xcv_flags = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %14, i32 0, i32 12
  %15 = load i32, i32* %xcv_flags, align 4
  %and = and i32 %15, 2048
  %tobool6 = icmp ne i32 %and, 0
  br i1 %tobool6, label %if.end, label %if.then

if.then:                                          ; preds = %land.lhs.true, %lor.lhs.false, %entry
  %16 = load i64, i64* %sz.addr, align 8
  %call = call noalias i8* @calloc(i64 1, i64 %16) #5
  %17 = bitcast i8* %call to %struct.op*
  store %struct.op* %17, %struct.op** %o, align 8
  br label %gotit

if.end:                                           ; preds = %land.lhs.true, %lor.lhs.false2
  %18 = load %struct.cv*, %struct.cv** @PL_compcv, align 8
  %sv_any7 = getelementptr inbounds %struct.cv, %struct.cv* %18, i32 0, i32 0
  %19 = load %struct.xpvcv*, %struct.xpvcv** %sv_any7, align 8
  %20 = bitcast %struct.xpvcv* %19 to i8*
  %21 = bitcast i8* %20 to %struct.xpvcv*
  %xcv_start_u8 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %21, i32 0, i32 5
  %xcv_start9 = bitcast %union.anon.6* %xcv_start_u8 to %struct.op**
  %22 = load %struct.op*, %struct.op** %xcv_start9, align 8
  %tobool10 = icmp ne %struct.op* %22, null
  br i1 %tobool10, label %if.else, label %if.then11

if.then11:                                        ; preds = %if.end
  %call12 = call %struct.opslab* @S_new_slab(i64 64)
  store %struct.opslab* %call12, %struct.opslab** %slab, align 8
  %23 = bitcast %struct.opslab* %call12 to %struct.op*
  %24 = load %struct.cv*, %struct.cv** @PL_compcv, align 8
  %sv_any13 = getelementptr inbounds %struct.cv, %struct.cv* %24, i32 0, i32 0
  %25 = load %struct.xpvcv*, %struct.xpvcv** %sv_any13, align 8
  %26 = bitcast %struct.xpvcv* %25 to i8*
  %27 = bitcast i8* %26 to %struct.xpvcv*
  %xcv_start_u14 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %27, i32 0, i32 5
  %xcv_start15 = bitcast %union.anon.6* %xcv_start_u14 to %struct.op**
  store %struct.op* %23, %struct.op** %xcv_start15, align 8
  %28 = load %struct.cv*, %struct.cv** @PL_compcv, align 8
  %sv_any16 = getelementptr inbounds %struct.cv, %struct.cv* %28, i32 0, i32 0
  %29 = load %struct.xpvcv*, %struct.xpvcv** %sv_any16, align 8
  %30 = bitcast %struct.xpvcv* %29 to i8*
  %31 = bitcast i8* %30 to %struct.xpvcv*
  %xcv_flags17 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %31, i32 0, i32 12
  %32 = load i32, i32* %xcv_flags17, align 4
  %or = or i32 %32, 2048
  store i32 %or, i32* %xcv_flags17, align 4
  %33 = load %struct.opslab*, %struct.opslab** %slab, align 8
  %opslab_refcnt = getelementptr inbounds %struct.opslab, %struct.opslab* %33, i32 0, i32 3
  store i64 2, i64* %opslab_refcnt, align 8
  br label %if.end22

if.else:                                          ; preds = %if.end
  %34 = load %struct.cv*, %struct.cv** @PL_compcv, align 8
  %sv_any18 = getelementptr inbounds %struct.cv, %struct.cv* %34, i32 0, i32 0
  %35 = load %struct.xpvcv*, %struct.xpvcv** %sv_any18, align 8
  %36 = bitcast %struct.xpvcv* %35 to i8*
  %37 = bitcast i8* %36 to %struct.xpvcv*
  %xcv_start_u19 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %37, i32 0, i32 5
  %xcv_start20 = bitcast %union.anon.6* %xcv_start_u19 to %struct.op**
  %38 = load %struct.op*, %struct.op** %xcv_start20, align 8
  %39 = bitcast %struct.op* %38 to %struct.opslab*
  store %struct.opslab* %39, %struct.opslab** %slab, align 8
  %opslab_refcnt21 = getelementptr inbounds %struct.opslab, %struct.opslab* %39, i32 0, i32 3
  %40 = load i64, i64* %opslab_refcnt21, align 8
  %inc = add i64 %40, 1
  store i64 %inc, i64* %opslab_refcnt21, align 8
  br label %if.end22

if.end22:                                         ; preds = %if.else, %if.then11
  %41 = load i64, i64* %sz.addr, align 8
  %add = add i64 %41, 8
  %sub = sub i64 %add, 1
  %div = udiv i64 %sub, 8
  store i64 %div, i64* %opsz, align 8
  %42 = load i64, i64* %opsz, align 8
  %add23 = add i64 %42, udiv (i64 ptrtoint (%struct.op* getelementptr inbounds (%struct.opslot, %struct.opslot* null, i32 0, i32 2) to i64), i64 8)
  store i64 %add23, i64* %sz.addr, align 8
  %43 = load %struct.opslab*, %struct.opslab** %slab, align 8
  %opslab_freed = getelementptr inbounds %struct.opslab, %struct.opslab* %43, i32 0, i32 2
  %44 = load %struct.op*, %struct.op** %opslab_freed, align 8
  %tobool24 = icmp ne %struct.op* %44, null
  br i1 %tobool24, label %if.then25, label %if.end36

if.then25:                                        ; preds = %if.end22
  %45 = load %struct.opslab*, %struct.opslab** %slab, align 8
  %opslab_freed26 = getelementptr inbounds %struct.opslab, %struct.opslab* %45, i32 0, i32 2
  store %struct.op** %opslab_freed26, %struct.op*** %too, align 8
  %46 = load %struct.op**, %struct.op*** %too, align 8
  %47 = load %struct.op*, %struct.op** %46, align 8
  store %struct.op* %47, %struct.op** %o, align 8
  br label %while.cond

while.cond:                                       ; preds = %if.end31, %if.then25
  %48 = load %struct.op*, %struct.op** %o, align 8
  %tobool27 = icmp ne %struct.op* %48, null
  br i1 %tobool27, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %49 = load %struct.op*, %struct.op** %o, align 8
  %50 = bitcast %struct.op* %49 to i8*
  %add.ptr = getelementptr inbounds i8, i8* %50, i64 sub (i64 0, i64 ptrtoint (%struct.op* getelementptr inbounds (%struct.opslot, %struct.opslot* null, i32 0, i32 2) to i64))
  %51 = bitcast i8* %add.ptr to %struct.opslot*
  %opslot_next = getelementptr inbounds %struct.opslot, %struct.opslot* %51, i32 0, i32 0
  %52 = load %struct.opslot*, %struct.opslot** %opslot_next, align 8
  %53 = bitcast %struct.opslot* %52 to i32**
  %54 = load %struct.op*, %struct.op** %o, align 8
  %55 = bitcast %struct.op* %54 to i8*
  %add.ptr28 = getelementptr inbounds i8, i8* %55, i64 sub (i64 0, i64 ptrtoint (%struct.op* getelementptr inbounds (%struct.opslot, %struct.opslot* null, i32 0, i32 2) to i64))
  %56 = bitcast i8* %add.ptr28 to %struct.opslot*
  %57 = bitcast %struct.opslot* %56 to i32**
  %sub.ptr.lhs.cast = ptrtoint i32** %53 to i64
  %sub.ptr.rhs.cast = ptrtoint i32** %57 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 8
  %58 = load i64, i64* %sz.addr, align 8
  %cmp = icmp ult i64 %sub.ptr.div, %58
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %59 = phi i1 [ false, %while.cond ], [ %cmp, %land.rhs ]
  br i1 %59, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %60 = load %struct.op*, %struct.op** %o, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %60, i32 0, i32 0
  store %struct.op** %op_next, %struct.op*** %too, align 8
  %61 = load %struct.op*, %struct.op** %op_next, align 8
  store %struct.op* %61, %struct.op** %o, align 8
  %62 = load %struct.op*, %struct.op** %o, align 8
  %tobool29 = icmp ne %struct.op* %62, null
  br i1 %tobool29, label %if.then30, label %if.end31

if.then30:                                        ; preds = %while.body
  br label %if.end31

if.end31:                                         ; preds = %if.then30, %while.body
  br label %while.cond

while.end:                                        ; preds = %land.end
  %63 = load %struct.op*, %struct.op** %o, align 8
  %tobool32 = icmp ne %struct.op* %63, null
  br i1 %tobool32, label %if.then33, label %if.end35

if.then33:                                        ; preds = %while.end
  %64 = load %struct.op*, %struct.op** %o, align 8
  %op_next34 = getelementptr inbounds %struct.op, %struct.op* %64, i32 0, i32 0
  %65 = load %struct.op*, %struct.op** %op_next34, align 8
  %66 = load %struct.op**, %struct.op*** %too, align 8
  store %struct.op* %65, %struct.op** %66, align 8
  %67 = load %struct.op*, %struct.op** %o, align 8
  %68 = bitcast %struct.op* %67 to i8*
  %69 = load i64, i64* %opsz, align 8
  %mul = mul i64 %69, 8
  call void @llvm.memset.p0i8.i64(i8* align 1 %68, i8 0, i64 %mul, i1 false)
  %70 = load %struct.op*, %struct.op** %o, align 8
  %op_slabbed = getelementptr inbounds %struct.op, %struct.op* %70, i32 0, i32 4
  %bf.load = load i16, i16* %op_slabbed, align 8
  %bf.clear = and i16 %bf.load, -1025
  %bf.set = or i16 %bf.clear, 1024
  store i16 %bf.set, i16* %op_slabbed, align 8
  br label %gotit

if.end35:                                         ; preds = %while.end
  br label %if.end36

if.end36:                                         ; preds = %if.end35, %if.end22
  %71 = load %struct.opslab*, %struct.opslab** %slab, align 8
  %opslab_next = getelementptr inbounds %struct.opslab, %struct.opslab* %71, i32 0, i32 1
  %72 = load %struct.opslab*, %struct.opslab** %opslab_next, align 8
  %tobool37 = icmp ne %struct.opslab* %72, null
  br i1 %tobool37, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end36
  %73 = load %struct.opslab*, %struct.opslab** %slab, align 8
  %opslab_next38 = getelementptr inbounds %struct.opslab, %struct.opslab* %73, i32 0, i32 1
  %74 = load %struct.opslab*, %struct.opslab** %opslab_next38, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.end36
  %75 = load %struct.opslab*, %struct.opslab** %slab, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.opslab* [ %74, %cond.true ], [ %75, %cond.false ]
  store %struct.opslab* %cond, %struct.opslab** %slab2, align 8
  %76 = load %struct.opslab*, %struct.opslab** %slab2, align 8
  %opslab_first = getelementptr inbounds %struct.opslab, %struct.opslab* %76, i32 0, i32 0
  %77 = load %struct.opslot*, %struct.opslot** %opslab_first, align 8
  %78 = bitcast %struct.opslot* %77 to i32**
  %79 = load %struct.opslab*, %struct.opslab** %slab2, align 8
  %opslab_slots = getelementptr inbounds %struct.opslab, %struct.opslab* %79, i32 0, i32 4
  %80 = bitcast %struct.opslot* %opslab_slots to i32**
  %sub.ptr.lhs.cast39 = ptrtoint i32** %78 to i64
  %sub.ptr.rhs.cast40 = ptrtoint i32** %80 to i64
  %sub.ptr.sub41 = sub i64 %sub.ptr.lhs.cast39, %sub.ptr.rhs.cast40
  %sub.ptr.div42 = sdiv exact i64 %sub.ptr.sub41, 8
  store i64 %sub.ptr.div42, i64* %space, align 8
  %81 = load i64, i64* %sz.addr, align 8
  %cmp43 = icmp ult i64 %sub.ptr.div42, %81
  br i1 %cmp43, label %if.then44, label %if.end90

if.then44:                                        ; preds = %cond.end
  %82 = load i64, i64* %space, align 8
  %cmp45 = icmp uge i64 %82, add (i64 udiv (i64 ptrtoint (%struct.op* getelementptr inbounds (%struct.opslot, %struct.opslot* null, i32 0, i32 2) to i64), i64 8), i64 5)
  br i1 %cmp45, label %if.then46, label %if.end61

if.then46:                                        ; preds = %if.then44
  %83 = load %struct.opslab*, %struct.opslab** %slab2, align 8
  %opslab_slots47 = getelementptr inbounds %struct.opslab, %struct.opslab* %83, i32 0, i32 4
  store %struct.opslot* %opslab_slots47, %struct.opslot** %slot, align 8
  %84 = load %struct.opslab*, %struct.opslab** %slab, align 8
  %85 = load %struct.opslot*, %struct.opslot** %slot, align 8
  %opslot_slab = getelementptr inbounds %struct.opslot, %struct.opslot* %85, i32 0, i32 1
  store %struct.opslab* %84, %struct.opslab** %opslot_slab, align 8
  %86 = load %struct.opslab*, %struct.opslab** %slab2, align 8
  %opslab_first48 = getelementptr inbounds %struct.opslab, %struct.opslab* %86, i32 0, i32 0
  %87 = load %struct.opslot*, %struct.opslot** %opslab_first48, align 8
  %88 = load %struct.opslot*, %struct.opslot** %slot, align 8
  %opslot_next49 = getelementptr inbounds %struct.opslot, %struct.opslot* %88, i32 0, i32 0
  store %struct.opslot* %87, %struct.opslot** %opslot_next49, align 8
  %89 = load %struct.opslot*, %struct.opslot** %slot, align 8
  %90 = load %struct.opslab*, %struct.opslab** %slab2, align 8
  %opslab_first50 = getelementptr inbounds %struct.opslab, %struct.opslab* %90, i32 0, i32 0
  store %struct.opslot* %89, %struct.opslot** %opslab_first50, align 8
  %91 = load %struct.opslot*, %struct.opslot** %slot, align 8
  %opslot_op = getelementptr inbounds %struct.opslot, %struct.opslot* %91, i32 0, i32 2
  store %struct.op* %opslot_op, %struct.op** %o, align 8
  %92 = load %struct.op*, %struct.op** %o, align 8
  %op_slabbed51 = getelementptr inbounds %struct.op, %struct.op* %92, i32 0, i32 4
  %bf.load52 = load i16, i16* %op_slabbed51, align 8
  %bf.clear53 = and i16 %bf.load52, -1025
  %bf.set54 = or i16 %bf.clear53, 1024
  store i16 %bf.set54, i16* %op_slabbed51, align 8
  %93 = load %struct.op*, %struct.op** %o, align 8
  %op_type = getelementptr inbounds %struct.op, %struct.op* %93, i32 0, i32 4
  %bf.load55 = load i16, i16* %op_type, align 8
  %bf.clear56 = and i16 %bf.load55, -512
  %bf.set57 = or i16 %bf.clear56, 396
  store i16 %bf.set57, i16* %op_type, align 8
  %94 = load %struct.opslab*, %struct.opslab** %slab, align 8
  %opslab_freed58 = getelementptr inbounds %struct.opslab, %struct.opslab* %94, i32 0, i32 2
  %95 = load %struct.op*, %struct.op** %opslab_freed58, align 8
  %96 = load %struct.op*, %struct.op** %o, align 8
  %op_next59 = getelementptr inbounds %struct.op, %struct.op* %96, i32 0, i32 0
  store %struct.op* %95, %struct.op** %op_next59, align 8
  %97 = load %struct.op*, %struct.op** %o, align 8
  %98 = load %struct.opslab*, %struct.opslab** %slab, align 8
  %opslab_freed60 = getelementptr inbounds %struct.opslab, %struct.opslab* %98, i32 0, i32 2
  store %struct.op* %97, %struct.op** %opslab_freed60, align 8
  br label %if.end61

if.end61:                                         ; preds = %if.then46, %if.then44
  %99 = load %struct.opslab*, %struct.opslab** %slab2, align 8
  %opslab_first62 = getelementptr inbounds %struct.opslab, %struct.opslab* %99, i32 0, i32 0
  %100 = load %struct.opslot*, %struct.opslot** %opslab_first62, align 8
  store %struct.opslot* %100, %struct.opslot** %slot, align 8
  br label %while.cond63

while.cond63:                                     ; preds = %while.body66, %if.end61
  %101 = load %struct.opslot*, %struct.opslot** %slot, align 8
  %opslot_next64 = getelementptr inbounds %struct.opslot, %struct.opslot* %101, i32 0, i32 0
  %102 = load %struct.opslot*, %struct.opslot** %opslot_next64, align 8
  %tobool65 = icmp ne %struct.opslot* %102, null
  br i1 %tobool65, label %while.body66, label %while.end68

while.body66:                                     ; preds = %while.cond63
  %103 = load %struct.opslot*, %struct.opslot** %slot, align 8
  %opslot_next67 = getelementptr inbounds %struct.opslot, %struct.opslot* %103, i32 0, i32 0
  %104 = load %struct.opslot*, %struct.opslot** %opslot_next67, align 8
  store %struct.opslot* %104, %struct.opslot** %slot, align 8
  br label %while.cond63

while.end68:                                      ; preds = %while.cond63
  %105 = load %struct.opslot*, %struct.opslot** %slot, align 8
  %106 = bitcast %struct.opslot* %105 to i32**
  %107 = load %struct.opslab*, %struct.opslab** %slab2, align 8
  %108 = bitcast %struct.opslab* %107 to i32**
  %sub.ptr.lhs.cast69 = ptrtoint i32** %106 to i64
  %sub.ptr.rhs.cast70 = ptrtoint i32** %108 to i64
  %sub.ptr.sub71 = sub i64 %sub.ptr.lhs.cast69, %sub.ptr.rhs.cast70
  %sub.ptr.div72 = sdiv exact i64 %sub.ptr.sub71, 8
  %add73 = add i64 %sub.ptr.div72, 1
  %mul74 = mul i64 %add73, 2
  %cmp75 = icmp ugt i64 %mul74, 2048
  br i1 %cmp75, label %cond.true76, label %cond.false77

cond.true76:                                      ; preds = %while.end68
  br label %cond.end84

cond.false77:                                     ; preds = %while.end68
  %109 = load %struct.opslot*, %struct.opslot** %slot, align 8
  %110 = bitcast %struct.opslot* %109 to i32**
  %111 = load %struct.opslab*, %struct.opslab** %slab2, align 8
  %112 = bitcast %struct.opslab* %111 to i32**
  %sub.ptr.lhs.cast78 = ptrtoint i32** %110 to i64
  %sub.ptr.rhs.cast79 = ptrtoint i32** %112 to i64
  %sub.ptr.sub80 = sub i64 %sub.ptr.lhs.cast78, %sub.ptr.rhs.cast79
  %sub.ptr.div81 = sdiv exact i64 %sub.ptr.sub80, 8
  %add82 = add i64 %sub.ptr.div81, 1
  %mul83 = mul i64 %add82, 2
  br label %cond.end84

cond.end84:                                       ; preds = %cond.false77, %cond.true76
  %cond85 = phi i64 [ 2048, %cond.true76 ], [ %mul83, %cond.false77 ]
  %call86 = call %struct.opslab* @S_new_slab(i64 %cond85)
  store %struct.opslab* %call86, %struct.opslab** %slab2, align 8
  %113 = load %struct.opslab*, %struct.opslab** %slab, align 8
  %opslab_next87 = getelementptr inbounds %struct.opslab, %struct.opslab* %113, i32 0, i32 1
  %114 = load %struct.opslab*, %struct.opslab** %opslab_next87, align 8
  %115 = load %struct.opslab*, %struct.opslab** %slab2, align 8
  %opslab_next88 = getelementptr inbounds %struct.opslab, %struct.opslab* %115, i32 0, i32 1
  store %struct.opslab* %114, %struct.opslab** %opslab_next88, align 8
  %116 = load %struct.opslab*, %struct.opslab** %slab2, align 8
  %117 = load %struct.opslab*, %struct.opslab** %slab, align 8
  %opslab_next89 = getelementptr inbounds %struct.opslab, %struct.opslab* %117, i32 0, i32 1
  store %struct.opslab* %116, %struct.opslab** %opslab_next89, align 8
  br label %if.end90

if.end90:                                         ; preds = %cond.end84, %cond.end
  %118 = load %struct.opslab*, %struct.opslab** %slab2, align 8
  %opslab_first91 = getelementptr inbounds %struct.opslab, %struct.opslab* %118, i32 0, i32 0
  %119 = load %struct.opslot*, %struct.opslot** %opslab_first91, align 8
  %120 = bitcast %struct.opslot* %119 to i32**
  %121 = load i64, i64* %sz.addr, align 8
  %idx.neg = sub i64 0, %121
  %add.ptr92 = getelementptr inbounds i32*, i32** %120, i64 %idx.neg
  %122 = bitcast i32** %add.ptr92 to %struct.opslot*
  store %struct.opslot* %122, %struct.opslot** %slot, align 8
  %123 = load %struct.opslot*, %struct.opslot** %slot, align 8
  %124 = bitcast %struct.opslot* %123 to i32**
  %125 = load %struct.opslab*, %struct.opslab** %slab2, align 8
  %opslab_slots93 = getelementptr inbounds %struct.opslab, %struct.opslab* %125, i32 0, i32 4
  %126 = bitcast %struct.opslot* %opslab_slots93 to i32**
  %sub.ptr.lhs.cast94 = ptrtoint i32** %124 to i64
  %sub.ptr.rhs.cast95 = ptrtoint i32** %126 to i64
  %sub.ptr.sub96 = sub i64 %sub.ptr.lhs.cast94, %sub.ptr.rhs.cast95
  %sub.ptr.div97 = sdiv exact i64 %sub.ptr.sub96, 8
  %cmp98 = icmp ult i64 %sub.ptr.div97, add (i64 udiv (i64 ptrtoint (%struct.op* getelementptr inbounds (%struct.opslot, %struct.opslot* null, i32 0, i32 2) to i64), i64 8), i64 5)
  br i1 %cmp98, label %if.then99, label %if.end101

if.then99:                                        ; preds = %if.end90
  %127 = load %struct.opslab*, %struct.opslab** %slab2, align 8
  %opslab_slots100 = getelementptr inbounds %struct.opslab, %struct.opslab* %127, i32 0, i32 4
  store %struct.opslot* %opslab_slots100, %struct.opslot** %slot, align 8
  br label %if.end101

if.end101:                                        ; preds = %if.then99, %if.end90
  %128 = load %struct.opslab*, %struct.opslab** %slab, align 8
  %129 = load %struct.opslot*, %struct.opslot** %slot, align 8
  %opslot_slab102 = getelementptr inbounds %struct.opslot, %struct.opslot* %129, i32 0, i32 1
  store %struct.opslab* %128, %struct.opslab** %opslot_slab102, align 8
  %130 = load %struct.opslab*, %struct.opslab** %slab2, align 8
  %opslab_first103 = getelementptr inbounds %struct.opslab, %struct.opslab* %130, i32 0, i32 0
  %131 = load %struct.opslot*, %struct.opslot** %opslab_first103, align 8
  %132 = load %struct.opslot*, %struct.opslot** %slot, align 8
  %opslot_next104 = getelementptr inbounds %struct.opslot, %struct.opslot* %132, i32 0, i32 0
  store %struct.opslot* %131, %struct.opslot** %opslot_next104, align 8
  %133 = load %struct.opslot*, %struct.opslot** %slot, align 8
  %134 = load %struct.opslab*, %struct.opslab** %slab2, align 8
  %opslab_first105 = getelementptr inbounds %struct.opslab, %struct.opslab* %134, i32 0, i32 0
  store %struct.opslot* %133, %struct.opslot** %opslab_first105, align 8
  %135 = load %struct.opslot*, %struct.opslot** %slot, align 8
  %opslot_op106 = getelementptr inbounds %struct.opslot, %struct.opslot* %135, i32 0, i32 2
  store %struct.op* %opslot_op106, %struct.op** %o, align 8
  %136 = load %struct.op*, %struct.op** %o, align 8
  %op_slabbed107 = getelementptr inbounds %struct.op, %struct.op* %136, i32 0, i32 4
  %bf.load108 = load i16, i16* %op_slabbed107, align 8
  %bf.clear109 = and i16 %bf.load108, -1025
  %bf.set110 = or i16 %bf.clear109, 1024
  store i16 %bf.set110, i16* %op_slabbed107, align 8
  br label %gotit

gotit:                                            ; preds = %if.end101, %if.then33, %if.then
  %137 = load %struct.op*, %struct.op** %o, align 8
  %138 = bitcast %struct.op* %137 to i8*
  ret i8* %138
}

; Function Attrs: nounwind
declare dso_local noalias i8* @calloc(i64, i64) #1

; Function Attrs: noinline nounwind uwtable
define internal %struct.opslab* @S_new_slab(i64 %sz) #0 {
entry:
  %sz.addr = alloca i64, align 8
  %slab = alloca %struct.opslab*, align 8
  store i64 %sz, i64* %sz.addr, align 8
  %0 = load i64, i64* %sz.addr, align 8
  %call = call noalias i8* @calloc(i64 %0, i64 8) #5
  %1 = bitcast i8* %call to %struct.opslab*
  store %struct.opslab* %1, %struct.opslab** %slab, align 8
  %2 = load %struct.opslab*, %struct.opslab** %slab, align 8
  %3 = bitcast %struct.opslab* %2 to i32**
  %4 = load i64, i64* %sz.addr, align 8
  %add.ptr = getelementptr inbounds i32*, i32** %3, i64 %4
  %add.ptr1 = getelementptr inbounds i32*, i32** %add.ptr, i64 -1
  %5 = bitcast i32** %add.ptr1 to %struct.opslot*
  %6 = load %struct.opslab*, %struct.opslab** %slab, align 8
  %opslab_first = getelementptr inbounds %struct.opslab, %struct.opslab* %6, i32 0, i32 0
  store %struct.opslot* %5, %struct.opslot** %opslab_first, align 8
  %7 = load %struct.opslab*, %struct.opslab** %slab, align 8
  ret %struct.opslab* %7
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @Perl_Slab_Free(i8* %op) #0 {
entry:
  %op.addr = alloca i8*, align 8
  %o = alloca %struct.op*, align 8
  %slab = alloca %struct.opslab*, align 8
  store i8* %op, i8** %op.addr, align 8
  %0 = load i8*, i8** %op.addr, align 8
  %1 = bitcast i8* %0 to %struct.op*
  store %struct.op* %1, %struct.op** %o, align 8
  %2 = load %struct.op*, %struct.op** %o, align 8
  %op_slabbed = getelementptr inbounds %struct.op, %struct.op* %2, i32 0, i32 4
  %bf.load = load i16, i16* %op_slabbed, align 8
  %bf.lshr = lshr i16 %bf.load, 10
  %bf.clear = and i16 %bf.lshr, 1
  %bf.cast = zext i16 %bf.clear to i32
  %tobool = icmp ne i32 %bf.cast, 0
  br i1 %tobool, label %if.end7, label %if.then

if.then:                                          ; preds = %entry
  %3 = load %struct.op*, %struct.op** %o, align 8
  %op_static = getelementptr inbounds %struct.op, %struct.op* %3, i32 0, i32 4
  %bf.load1 = load i16, i16* %op_static, align 8
  %bf.lshr2 = lshr i16 %bf.load1, 12
  %bf.clear3 = and i16 %bf.lshr2, 1
  %bf.cast4 = zext i16 %bf.clear3 to i32
  %tobool5 = icmp ne i32 %bf.cast4, 0
  br i1 %tobool5, label %if.end, label %if.then6

if.then6:                                         ; preds = %if.then
  %4 = load i8*, i8** %op.addr, align 8
  call void @free(i8* %4) #5
  br label %if.end

if.end:                                           ; preds = %if.then6, %if.then
  br label %cond.end

if.end7:                                          ; preds = %entry
  %5 = load %struct.op*, %struct.op** %o, align 8
  %6 = bitcast %struct.op* %5 to i8*
  %add.ptr = getelementptr inbounds i8, i8* %6, i64 sub (i64 0, i64 ptrtoint (%struct.op* getelementptr inbounds (%struct.opslot, %struct.opslot* null, i32 0, i32 2) to i64))
  %7 = bitcast i8* %add.ptr to %struct.opslot*
  %opslot_slab = getelementptr inbounds %struct.opslot, %struct.opslot* %7, i32 0, i32 1
  %8 = load %struct.opslab*, %struct.opslab** %opslot_slab, align 8
  store %struct.opslab* %8, %struct.opslab** %slab, align 8
  %9 = load %struct.op*, %struct.op** %o, align 8
  %op_type = getelementptr inbounds %struct.op, %struct.op* %9, i32 0, i32 4
  %bf.load8 = load i16, i16* %op_type, align 8
  %bf.clear9 = and i16 %bf.load8, -512
  %bf.set = or i16 %bf.clear9, 396
  store i16 %bf.set, i16* %op_type, align 8
  %10 = load %struct.opslab*, %struct.opslab** %slab, align 8
  %opslab_freed = getelementptr inbounds %struct.opslab, %struct.opslab* %10, i32 0, i32 2
  %11 = load %struct.op*, %struct.op** %opslab_freed, align 8
  %12 = load %struct.op*, %struct.op** %o, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %12, i32 0, i32 0
  store %struct.op* %11, %struct.op** %op_next, align 8
  %13 = load %struct.op*, %struct.op** %o, align 8
  %14 = load %struct.opslab*, %struct.opslab** %slab, align 8
  %opslab_freed10 = getelementptr inbounds %struct.opslab, %struct.opslab* %14, i32 0, i32 2
  store %struct.op* %13, %struct.op** %opslab_freed10, align 8
  %15 = load %struct.opslab*, %struct.opslab** %slab, align 8
  %opslab_refcnt = getelementptr inbounds %struct.opslab, %struct.opslab* %15, i32 0, i32 3
  %16 = load i64, i64* %opslab_refcnt, align 8
  %cmp = icmp eq i64 %16, 1
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end7
  %17 = load %struct.opslab*, %struct.opslab** %slab, align 8
  call void @Perl_opslab_free(%struct.opslab* %17)
  br label %cond.end

cond.false:                                       ; preds = %if.end7
  %18 = load %struct.opslab*, %struct.opslab** %slab, align 8
  %opslab_refcnt11 = getelementptr inbounds %struct.opslab, %struct.opslab* %18, i32 0, i32 3
  %19 = load i64, i64* %opslab_refcnt11, align 8
  %dec = add i64 %19, -1
  store i64 %dec, i64* %opslab_refcnt11, align 8
  br label %cond.end

cond.end:                                         ; preds = %if.end, %cond.false, %cond.true
  ret void
}

; Function Attrs: nounwind
declare dso_local void @free(i8*) #1

; Function Attrs: noinline nounwind uwtable
define dso_local void @Perl_opslab_free(%struct.opslab* %slab) #0 {
entry:
  %slab.addr = alloca %struct.opslab*, align 8
  %slab2 = alloca %struct.opslab*, align 8
  store %struct.opslab* %slab, %struct.opslab** %slab.addr, align 8
  br label %do.body

do.body:                                          ; preds = %do.cond, %entry
  %0 = load %struct.opslab*, %struct.opslab** %slab.addr, align 8
  %opslab_next = getelementptr inbounds %struct.opslab, %struct.opslab* %0, i32 0, i32 1
  %1 = load %struct.opslab*, %struct.opslab** %opslab_next, align 8
  store %struct.opslab* %1, %struct.opslab** %slab2, align 8
  %2 = load %struct.opslab*, %struct.opslab** %slab.addr, align 8
  %3 = bitcast %struct.opslab* %2 to i8*
  call void @free(i8* %3) #5
  %4 = load %struct.opslab*, %struct.opslab** %slab2, align 8
  store %struct.opslab* %4, %struct.opslab** %slab.addr, align 8
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %5 = load %struct.opslab*, %struct.opslab** %slab.addr, align 8
  %tobool = icmp ne %struct.opslab* %5, null
  br i1 %tobool, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @Perl_opslab_free_nopad(%struct.opslab* %slab) #0 {
entry:
  %slab.addr = alloca %struct.opslab*, align 8
  %havepad = alloca i8, align 1
  store %struct.opslab* %slab, %struct.opslab** %slab.addr, align 8
  %0 = load %struct.av*, %struct.av** @PL_comppad, align 8
  %tobool = icmp ne %struct.av* %0, null
  %lnot = xor i1 %tobool, true
  %lnot1 = xor i1 %lnot, true
  %frombool = zext i1 %lnot1 to i8
  store i8 %frombool, i8* %havepad, align 1
  %1 = load i8, i8* %havepad, align 1
  %tobool2 = trunc i8 %1 to i1
  br i1 %tobool2, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  call void @Perl_push_scope()
  %2 = load %struct.av*, %struct.av** @PL_comppad, align 8
  %3 = bitcast %struct.av* %2 to i8*
  %4 = bitcast i8* %3 to %struct.sv*
  %5 = bitcast %struct.sv* %4 to i8*
  call void @Perl_save_pushptr(i8* %5, i32 7)
  store %struct.av* null, %struct.av** @PL_comppad, align 8
  store %struct.sv** null, %struct.sv*** @PL_curpad, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %6 = load %struct.opslab*, %struct.opslab** %slab.addr, align 8
  call void @Perl_opslab_free(%struct.opslab* %6)
  %7 = load i8, i8* %havepad, align 1
  %tobool3 = trunc i8 %7 to i1
  br i1 %tobool3, label %if.then4, label %if.end5

if.then4:                                         ; preds = %if.end
  call void @Perl_pop_scope()
  br label %if.end5

if.end5:                                          ; preds = %if.then4, %if.end
  ret void
}

declare dso_local void @Perl_push_scope() #3

declare dso_local void @Perl_save_pushptr(i8*, i32) #3

declare dso_local void @Perl_pop_scope() #3

; Function Attrs: noinline nounwind uwtable
define dso_local void @Perl_opslab_force_free(%struct.opslab* %slab) #0 {
entry:
  %slab.addr = alloca %struct.opslab*, align 8
  %slab2 = alloca %struct.opslab*, align 8
  %slot = alloca %struct.opslot*, align 8
  store %struct.opslab* %slab, %struct.opslab** %slab.addr, align 8
  %0 = load %struct.opslab*, %struct.opslab** %slab.addr, align 8
  store %struct.opslab* %0, %struct.opslab** %slab2, align 8
  br label %do.body

do.body:                                          ; preds = %do.cond, %entry
  %1 = load %struct.opslab*, %struct.opslab** %slab2, align 8
  %opslab_first = getelementptr inbounds %struct.opslab, %struct.opslab* %1, i32 0, i32 0
  %2 = load %struct.opslot*, %struct.opslot** %opslab_first, align 8
  store %struct.opslot* %2, %struct.opslot** %slot, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %do.body
  %3 = load %struct.opslot*, %struct.opslot** %slot, align 8
  %opslot_next = getelementptr inbounds %struct.opslot, %struct.opslot* %3, i32 0, i32 0
  %4 = load %struct.opslot*, %struct.opslot** %opslot_next, align 8
  %tobool = icmp ne %struct.opslot* %4, null
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %5 = load %struct.opslot*, %struct.opslot** %slot, align 8
  %opslot_op = getelementptr inbounds %struct.opslot, %struct.opslot* %5, i32 0, i32 2
  %op_type = getelementptr inbounds %struct.op, %struct.op* %opslot_op, i32 0, i32 4
  %bf.load = load i16, i16* %op_type, align 8
  %bf.clear = and i16 %bf.load, 511
  %bf.cast = zext i16 %bf.clear to i32
  %cmp = icmp ne i32 %bf.cast, 396
  br i1 %cmp, label %land.lhs.true, label %if.end9

land.lhs.true:                                    ; preds = %for.body
  %6 = load %struct.opslot*, %struct.opslot** %slot, align 8
  %opslot_op1 = getelementptr inbounds %struct.opslot, %struct.opslot* %6, i32 0, i32 2
  %op_savefree = getelementptr inbounds %struct.op, %struct.op* %opslot_op1, i32 0, i32 4
  %bf.load2 = load i16, i16* %op_savefree, align 8
  %bf.lshr = lshr i16 %bf.load2, 11
  %bf.clear3 = and i16 %bf.lshr, 1
  %bf.cast4 = zext i16 %bf.clear3 to i32
  %tobool5 = icmp ne i32 %bf.cast4, 0
  br i1 %tobool5, label %if.end9, label %if.then

if.then:                                          ; preds = %land.lhs.true
  %7 = load %struct.opslot*, %struct.opslot** %slot, align 8
  %opslot_op6 = getelementptr inbounds %struct.opslot, %struct.opslot* %7, i32 0, i32 2
  call void @Perl_op_free(%struct.op* %opslot_op6)
  %8 = load %struct.opslab*, %struct.opslab** %slab.addr, align 8
  %opslab_refcnt = getelementptr inbounds %struct.opslab, %struct.opslab* %8, i32 0, i32 3
  %9 = load i64, i64* %opslab_refcnt, align 8
  %cmp7 = icmp eq i64 %9, 1
  br i1 %cmp7, label %if.then8, label %if.end

if.then8:                                         ; preds = %if.then
  br label %free

if.end:                                           ; preds = %if.then
  br label %if.end9

if.end9:                                          ; preds = %if.end, %land.lhs.true, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end9
  %10 = load %struct.opslot*, %struct.opslot** %slot, align 8
  %opslot_next10 = getelementptr inbounds %struct.opslot, %struct.opslot* %10, i32 0, i32 0
  %11 = load %struct.opslot*, %struct.opslot** %opslot_next10, align 8
  store %struct.opslot* %11, %struct.opslot** %slot, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %do.cond

do.cond:                                          ; preds = %for.end
  %12 = load %struct.opslab*, %struct.opslab** %slab2, align 8
  %opslab_next = getelementptr inbounds %struct.opslab, %struct.opslab* %12, i32 0, i32 1
  %13 = load %struct.opslab*, %struct.opslab** %opslab_next, align 8
  store %struct.opslab* %13, %struct.opslab** %slab2, align 8
  %tobool11 = icmp ne %struct.opslab* %13, null
  br i1 %tobool11, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %14 = load %struct.opslab*, %struct.opslab** %slab.addr, align 8
  %opslab_refcnt12 = getelementptr inbounds %struct.opslab, %struct.opslab* %14, i32 0, i32 3
  %15 = load i64, i64* %opslab_refcnt12, align 8
  %cmp13 = icmp ugt i64 %15, 1
  br i1 %cmp13, label %if.then14, label %if.end16

if.then14:                                        ; preds = %do.end
  %16 = load %struct.opslab*, %struct.opslab** %slab.addr, align 8
  %opslab_refcnt15 = getelementptr inbounds %struct.opslab, %struct.opslab* %16, i32 0, i32 3
  %17 = load i64, i64* %opslab_refcnt15, align 8
  %dec = add i64 %17, -1
  store i64 %dec, i64* %opslab_refcnt15, align 8
  br label %return

if.end16:                                         ; preds = %do.end
  br label %free

free:                                             ; preds = %if.end16, %if.then8
  %18 = load %struct.opslab*, %struct.opslab** %slab.addr, align 8
  call void @Perl_opslab_free(%struct.opslab* %18)
  br label %return

return:                                           ; preds = %free, %if.then14
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @Perl_op_free(%struct.op* %o) #0 {
entry:
  %o.addr = alloca %struct.op*, align 8
  %type = alloca i16, align 2
  %defer_ix = alloca i64, align 8
  %defer_stack_alloc = alloca i64, align 8
  %defer_stack = alloca %struct.op**, align 8
  %refcnt = alloca i64, align 8
  %kid = alloca %struct.op*, align 8
  %nextkid = alloca %struct.op*, align 8
  store %struct.op* %o, %struct.op** %o.addr, align 8
  store i64 -1, i64* %defer_ix, align 8
  store i64 0, i64* %defer_stack_alloc, align 8
  store %struct.op** null, %struct.op*** %defer_stack, align 8
  br label %do.body

do.body:                                          ; preds = %cond.end, %entry
  %0 = load %struct.op*, %struct.op** %o.addr, align 8
  %tobool = icmp ne %struct.op* %0, null
  br i1 %tobool, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %do.body
  %1 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type = getelementptr inbounds %struct.op, %struct.op* %1, i32 0, i32 4
  %bf.load = load i16, i16* %op_type, align 8
  %bf.clear = and i16 %bf.load, 511
  %bf.cast = zext i16 %bf.clear to i32
  %cmp = icmp eq i32 %bf.cast, 396
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %do.body
  br label %do.cond

if.end:                                           ; preds = %lor.lhs.false
  %2 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type1 = getelementptr inbounds %struct.op, %struct.op* %2, i32 0, i32 4
  %bf.load2 = load i16, i16* %op_type1, align 8
  %bf.clear3 = and i16 %bf.load2, 511
  %bf.cast4 = zext i16 %bf.clear3 to i32
  %conv = trunc i32 %bf.cast4 to i16
  store i16 %conv, i16* %type, align 2
  %3 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_ppaddr = getelementptr inbounds %struct.op, %struct.op* %3, i32 0, i32 2
  %4 = load %struct.op* ()*, %struct.op* ()** %op_ppaddr, align 8
  %5 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type5 = getelementptr inbounds %struct.op, %struct.op* %5, i32 0, i32 4
  %bf.load6 = load i16, i16* %op_type5, align 8
  %bf.clear7 = and i16 %bf.load6, 511
  %bf.cast8 = zext i16 %bf.clear7 to i32
  %idxprom = zext i32 %bf.cast8 to i64
  %arrayidx = getelementptr inbounds [0 x %struct.op* ()*], [0 x %struct.op* ()*]* @PL_ppaddr, i64 0, i64 %idxprom
  %6 = load %struct.op* ()*, %struct.op* ()** %arrayidx, align 8
  %cmp9 = icmp eq %struct.op* ()* %4, %6
  br i1 %cmp9, label %if.then11, label %if.end12

if.then11:                                        ; preds = %if.end
  br label %if.end12

if.end12:                                         ; preds = %if.then11, %if.end
  %7 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_private = getelementptr inbounds %struct.op, %struct.op* %7, i32 0, i32 6
  %8 = load i8, i8* %op_private, align 1
  %conv13 = zext i8 %8 to i32
  %and = and i32 %conv13, 64
  %tobool14 = icmp ne i32 %and, 0
  br i1 %tobool14, label %if.then15, label %if.end20

if.then15:                                        ; preds = %if.end12
  %9 = load i16, i16* %type, align 2
  %conv16 = zext i16 %9 to i32
  switch i32 %conv16, label %sw.default [
    i32 186, label %sw.bb
    i32 187, label %sw.bb
    i32 343, label %sw.bb
    i32 197, label %sw.bb
    i32 198, label %sw.bb
    i32 236, label %sw.bb
  ]

sw.bb:                                            ; preds = %if.then15, %if.then15, %if.then15, %if.then15, %if.then15, %if.then15
  %10 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_targ = getelementptr inbounds %struct.op, %struct.op* %10, i32 0, i32 3
  %11 = load i64, i64* %op_targ, align 8
  %dec = add i64 %11, -1
  store i64 %dec, i64* %op_targ, align 8
  store i64 %dec, i64* %refcnt, align 8
  %12 = load i64, i64* %refcnt, align 8
  %tobool17 = icmp ne i64 %12, 0
  br i1 %tobool17, label %if.then18, label %if.end19

if.then18:                                        ; preds = %sw.bb
  %13 = load %struct.op*, %struct.op** %o.addr, align 8
  call void @S_find_and_forget_pmops(%struct.op* %13)
  br label %do.cond

if.end19:                                         ; preds = %sw.bb
  br label %sw.epilog

sw.default:                                       ; preds = %if.then15
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %if.end19
  br label %if.end20

if.end20:                                         ; preds = %sw.epilog, %if.end12
  %14 = load void (%struct.op*)*, void (%struct.op*)** @PL_opfreehook, align 8
  %tobool21 = icmp ne void (%struct.op*)* %14, null
  br i1 %tobool21, label %if.then22, label %if.end23

if.then22:                                        ; preds = %if.end20
  %15 = load void (%struct.op*)*, void (%struct.op*)** @PL_opfreehook, align 8
  %16 = load %struct.op*, %struct.op** %o.addr, align 8
  call void %15(%struct.op* %16)
  br label %if.end23

if.end23:                                         ; preds = %if.then22, %if.end20
  %17 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %17, i32 0, i32 5
  %18 = load i8, i8* %op_flags, align 2
  %conv24 = zext i8 %18 to i32
  %and25 = and i32 %conv24, 4
  %tobool26 = icmp ne i32 %and25, 0
  br i1 %tobool26, label %if.then27, label %if.end51

if.then27:                                        ; preds = %if.end23
  %19 = load %struct.op*, %struct.op** %o.addr, align 8
  %20 = bitcast %struct.op* %19 to %struct.unop*
  %op_first = getelementptr inbounds %struct.unop, %struct.unop* %20, i32 0, i32 7
  %21 = load %struct.op*, %struct.op** %op_first, align 8
  store %struct.op* %21, %struct.op** %kid, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then27
  %22 = load %struct.op*, %struct.op** %kid, align 8
  %tobool28 = icmp ne %struct.op* %22, null
  br i1 %tobool28, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %23 = load %struct.op*, %struct.op** %kid, align 8
  %op_sibling = getelementptr inbounds %struct.op, %struct.op* %23, i32 0, i32 1
  %24 = load %struct.op*, %struct.op** %op_sibling, align 8
  %add.ptr = getelementptr inbounds %struct.op, %struct.op* %24, i64 0
  store %struct.op* %add.ptr, %struct.op** %nextkid, align 8
  %25 = load %struct.op*, %struct.op** %kid, align 8
  %tobool29 = icmp ne %struct.op* %25, null
  br i1 %tobool29, label %lor.lhs.false30, label %if.then37

lor.lhs.false30:                                  ; preds = %for.body
  %26 = load %struct.op*, %struct.op** %kid, align 8
  %op_type31 = getelementptr inbounds %struct.op, %struct.op* %26, i32 0, i32 4
  %bf.load32 = load i16, i16* %op_type31, align 8
  %bf.clear33 = and i16 %bf.load32, 511
  %bf.cast34 = zext i16 %bf.clear33 to i32
  %cmp35 = icmp eq i32 %bf.cast34, 396
  br i1 %cmp35, label %if.then37, label %if.end38

if.then37:                                        ; preds = %lor.lhs.false30, %for.body
  br label %for.inc

if.end38:                                         ; preds = %lor.lhs.false30
  %27 = load %struct.op*, %struct.op** %kid, align 8
  %op_flags39 = getelementptr inbounds %struct.op, %struct.op* %27, i32 0, i32 5
  %28 = load i8, i8* %op_flags39, align 2
  %conv40 = zext i8 %28 to i32
  %and41 = and i32 %conv40, 4
  %tobool42 = icmp ne i32 %and41, 0
  br i1 %tobool42, label %if.else, label %if.then43

if.then43:                                        ; preds = %if.end38
  %29 = load %struct.op*, %struct.op** %kid, align 8
  call void @Perl_op_free(%struct.op* %29)
  br label %if.end50

if.else:                                          ; preds = %if.end38
  br label %do.body44

do.body44:                                        ; preds = %if.else
  %30 = load i64, i64* %defer_ix, align 8
  %31 = load i64, i64* %defer_stack_alloc, align 8
  %sub = sub nsw i64 %31, 1
  %cmp45 = icmp eq i64 %30, %sub
  br i1 %cmp45, label %cond.true, label %cond.false

cond.true:                                        ; preds = %do.body44
  br i1 true, label %if.then47, label %if.end48

cond.false:                                       ; preds = %do.body44
  br i1 false, label %if.then47, label %if.end48

if.then47:                                        ; preds = %cond.false, %cond.true
  %32 = load i64, i64* %defer_stack_alloc, align 8
  %add = add nsw i64 %32, 100
  store i64 %add, i64* %defer_stack_alloc, align 8
  %33 = load %struct.op**, %struct.op*** %defer_stack, align 8
  %34 = bitcast %struct.op** %33 to i8*
  %35 = load i64, i64* %defer_stack_alloc, align 8
  %mul = mul i64 %35, 8
  %call = call i8* @Perl_safesysrealloc(i8* %34, i64 %mul)
  %36 = bitcast i8* %call to %struct.op**
  store %struct.op** %36, %struct.op*** %defer_stack, align 8
  br label %if.end48

if.end48:                                         ; preds = %if.then47, %cond.false, %cond.true
  %37 = load %struct.op*, %struct.op** %kid, align 8
  %38 = load %struct.op**, %struct.op*** %defer_stack, align 8
  %39 = load i64, i64* %defer_ix, align 8
  %inc = add nsw i64 %39, 1
  store i64 %inc, i64* %defer_ix, align 8
  %arrayidx49 = getelementptr inbounds %struct.op*, %struct.op** %38, i64 %inc
  store %struct.op* %37, %struct.op** %arrayidx49, align 8
  br label %do.end

do.end:                                           ; preds = %if.end48
  br label %if.end50

if.end50:                                         ; preds = %do.end, %if.then43
  br label %for.inc

for.inc:                                          ; preds = %if.end50, %if.then37
  %40 = load %struct.op*, %struct.op** %nextkid, align 8
  store %struct.op* %40, %struct.op** %kid, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end51

if.end51:                                         ; preds = %for.end, %if.end23
  %41 = load i16, i16* %type, align 2
  %conv52 = zext i16 %41 to i32
  %cmp53 = icmp eq i32 %conv52, 0
  br i1 %cmp53, label %if.then55, label %if.end58

if.then55:                                        ; preds = %if.end51
  %42 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_targ56 = getelementptr inbounds %struct.op, %struct.op* %42, i32 0, i32 3
  %43 = load i64, i64* %op_targ56, align 8
  %conv57 = trunc i64 %43 to i16
  store i16 %conv57, i16* %type, align 2
  br label %if.end58

if.end58:                                         ; preds = %if.then55, %if.end51
  %44 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_slabbed = getelementptr inbounds %struct.op, %struct.op* %44, i32 0, i32 4
  %bf.load59 = load i16, i16* %op_slabbed, align 8
  %bf.lshr = lshr i16 %bf.load59, 10
  %bf.clear60 = and i16 %bf.lshr, 1
  %bf.cast61 = zext i16 %bf.clear60 to i32
  %tobool62 = icmp ne i32 %bf.cast61, 0
  br i1 %tobool62, label %if.then63, label %if.end64

if.then63:                                        ; preds = %if.end58
  br label %if.end64

if.end64:                                         ; preds = %if.then63, %if.end58
  %45 = load i16, i16* %type, align 2
  %conv65 = zext i16 %45 to i32
  %cmp66 = icmp eq i32 %conv65, 193
  br i1 %cmp66, label %if.then72, label %lor.lhs.false68

lor.lhs.false68:                                  ; preds = %if.end64
  %46 = load i16, i16* %type, align 2
  %conv69 = zext i16 %46 to i32
  %cmp70 = icmp eq i32 %conv69, 194
  br i1 %cmp70, label %if.then72, label %if.end73

if.then72:                                        ; preds = %lor.lhs.false68, %if.end64
  %47 = load %struct.op*, %struct.op** %o.addr, align 8
  %48 = bitcast %struct.op* %47 to %struct.cop*
  call void @S_cop_free(%struct.cop* %48)
  br label %if.end73

if.end73:                                         ; preds = %if.then72, %lor.lhs.false68
  %49 = load %struct.op*, %struct.op** %o.addr, align 8
  call void @Perl_op_clear(%struct.op* %49)
  %50 = load %struct.op*, %struct.op** %o.addr, align 8
  %51 = bitcast %struct.op* %50 to i8*
  call void @Perl_Slab_Free(i8* %51)
  br label %do.cond

do.cond:                                          ; preds = %if.end73, %if.then18, %if.then
  %52 = load i64, i64* %defer_ix, align 8
  %cmp74 = icmp sge i64 %52, 0
  br i1 %cmp74, label %cond.true76, label %cond.false79

cond.true76:                                      ; preds = %do.cond
  %53 = load %struct.op**, %struct.op*** %defer_stack, align 8
  %54 = load i64, i64* %defer_ix, align 8
  %dec77 = add nsw i64 %54, -1
  store i64 %dec77, i64* %defer_ix, align 8
  %arrayidx78 = getelementptr inbounds %struct.op*, %struct.op** %53, i64 %54
  %55 = load %struct.op*, %struct.op** %arrayidx78, align 8
  br label %cond.end

cond.false79:                                     ; preds = %do.cond
  br label %cond.end

cond.end:                                         ; preds = %cond.false79, %cond.true76
  %cond = phi %struct.op* [ %55, %cond.true76 ], [ null, %cond.false79 ]
  store %struct.op* %cond, %struct.op** %o.addr, align 8
  %tobool80 = icmp ne %struct.op* %cond, null
  br i1 %tobool80, label %do.body, label %do.end81

do.end81:                                         ; preds = %cond.end
  %56 = load %struct.op**, %struct.op*** %defer_stack, align 8
  %57 = bitcast %struct.op** %56 to i8*
  call void @Perl_safesysfree(i8* %57)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local i64 @Perl_allocmy(i8* %name, i64 %len, i32 %flags) #0 {
entry:
  %name.addr = alloca i8*, align 8
  %len.addr = alloca i64, align 8
  %flags.addr = alloca i32, align 4
  %off = alloca i64, align 8
  %is_our = alloca i8, align 1
  store i8* %name, i8** %name.addr, align 8
  store i64 %len, i64* %len.addr, align 8
  store i32 %flags, i32* %flags.addr, align 4
  %0 = load %struct.yy_parser*, %struct.yy_parser** @PL_parser, align 8
  %in_my = getelementptr inbounds %struct.yy_parser, %struct.yy_parser* %0, i32 0, i32 42
  %1 = load i16, i16* %in_my, align 4
  %conv = zext i16 %1 to i32
  %cmp = icmp eq i32 %conv, 143
  %frombool = zext i1 %cmp to i8
  store i8 %frombool, i8* %is_our, align 1
  %2 = load i32, i32* %flags.addr, align 4
  %and = and i32 %2, -536870913
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %3 = load i32, i32* %flags.addr, align 4
  %conv2 = zext i32 %3 to i64
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str, i64 0, i64 0), i64 %conv2)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %4 = load i64, i64* %len.addr, align 8
  %tobool3 = icmp ne i64 %4, 0
  br i1 %tobool3, label %land.lhs.true, label %if.else134

land.lhs.true:                                    ; preds = %if.end
  %5 = load i8, i8* %is_our, align 1
  %tobool4 = trunc i8 %5 to i1
  br i1 %tobool4, label %if.else134, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true
  %6 = load i8*, i8** %name.addr, align 8
  %arrayidx = getelementptr inbounds i8, i8* %6, i64 1
  %7 = load i8, i8* %arrayidx, align 1
  %idxprom = zext i8 %7 to i64
  %arrayidx6 = getelementptr inbounds [0 x i32], [0 x i32]* @PL_charclass, i64 0, i64 %idxprom
  %8 = load i32, i32* %arrayidx6, align 4
  %and7 = and i32 %8, 16388
  %cmp8 = icmp eq i32 %and7, 16388
  br i1 %cmp8, label %if.else134, label %lor.lhs.false10

lor.lhs.false10:                                  ; preds = %lor.lhs.false
  %9 = load i32, i32* %flags.addr, align 4
  %and11 = and i32 %9, 536870912
  %tobool12 = icmp ne i32 %and11, 0
  br i1 %tobool12, label %land.lhs.true13, label %lor.lhs.false60

land.lhs.true13:                                  ; preds = %lor.lhs.false10
  %10 = load i8*, i8** %name.addr, align 8
  %add.ptr = getelementptr inbounds i8, i8* %10, i64 1
  %11 = load i8, i8* %add.ptr, align 1
  %conv14 = zext i8 %11 to i64
  %cmp15 = icmp ult i64 %conv14, 128
  br i1 %cmp15, label %cond.true, label %cond.false23

cond.true:                                        ; preds = %land.lhs.true13
  %12 = load i8*, i8** %name.addr, align 8
  %add.ptr17 = getelementptr inbounds i8, i8* %12, i64 1
  %13 = load i8, i8* %add.ptr17, align 1
  %idxprom18 = zext i8 %13 to i64
  %arrayidx19 = getelementptr inbounds [0 x i32], [0 x i32]* @PL_charclass, i64 0, i64 %idxprom18
  %14 = load i32, i32* %arrayidx19, align 4
  %and20 = and i32 %14, 65536
  %tobool21 = icmp ne i32 %and20, 0
  br i1 %tobool21, label %cond.true22, label %cond.false

cond.true22:                                      ; preds = %cond.true
  br i1 true, label %if.else134, label %lor.lhs.false60

cond.false:                                       ; preds = %cond.true
  br i1 false, label %if.else134, label %lor.lhs.false60

cond.false23:                                     ; preds = %land.lhs.true13
  %15 = load i8*, i8** %name.addr, align 8
  %add.ptr24 = getelementptr inbounds i8, i8* %15, i64 1
  %16 = load i8, i8* %add.ptr24, align 1
  %conv25 = zext i8 %16 to i32
  %and26 = and i32 %conv25, 254
  %cmp27 = icmp eq i32 %and26, 194
  br i1 %cmp27, label %cond.true29, label %cond.false57

cond.true29:                                      ; preds = %cond.false23
  %17 = load i8*, i8** %name.addr, align 8
  %add.ptr30 = getelementptr inbounds i8, i8* %17, i64 1
  %18 = load i8, i8* %add.ptr30, align 1
  %conv31 = zext i8 %18 to i32
  %and32 = and i32 %conv31, 31
  %shl = shl i32 %and32, 6
  %19 = load i8*, i8** %name.addr, align 8
  %add.ptr33 = getelementptr inbounds i8, i8* %19, i64 1
  %add.ptr34 = getelementptr inbounds i8, i8* %add.ptr33, i64 1
  %20 = load i8, i8* %add.ptr34, align 1
  %conv35 = zext i8 %20 to i32
  %and36 = and i32 %conv35, 63
  %or = or i32 %shl, %and36
  %conv37 = sext i32 %or to i64
  %and38 = and i64 %conv37, -256
  %tobool39 = icmp ne i64 %and38, 0
  br i1 %tobool39, label %cond.false56, label %land.lhs.true40

land.lhs.true40:                                  ; preds = %cond.true29
  %21 = load i8*, i8** %name.addr, align 8
  %add.ptr41 = getelementptr inbounds i8, i8* %21, i64 1
  %22 = load i8, i8* %add.ptr41, align 1
  %conv42 = zext i8 %22 to i32
  %and43 = and i32 %conv42, 31
  %shl44 = shl i32 %and43, 6
  %23 = load i8*, i8** %name.addr, align 8
  %add.ptr45 = getelementptr inbounds i8, i8* %23, i64 1
  %add.ptr46 = getelementptr inbounds i8, i8* %add.ptr45, i64 1
  %24 = load i8, i8* %add.ptr46, align 1
  %conv47 = zext i8 %24 to i32
  %and48 = and i32 %conv47, 63
  %or49 = or i32 %shl44, %and48
  %conv50 = trunc i32 %or49 to i8
  %idxprom51 = zext i8 %conv50 to i64
  %arrayidx52 = getelementptr inbounds [0 x i32], [0 x i32]* @PL_charclass, i64 0, i64 %idxprom51
  %25 = load i32, i32* %arrayidx52, align 4
  %and53 = and i32 %25, 65536
  %tobool54 = icmp ne i32 %and53, 0
  br i1 %tobool54, label %cond.true55, label %cond.false56

cond.true55:                                      ; preds = %land.lhs.true40
  br i1 true, label %if.else134, label %lor.lhs.false60

cond.false56:                                     ; preds = %land.lhs.true40, %cond.true29
  br i1 false, label %if.else134, label %lor.lhs.false60

cond.false57:                                     ; preds = %cond.false23
  %26 = load i8*, i8** %name.addr, align 8
  %add.ptr58 = getelementptr inbounds i8, i8* %26, i64 1
  %call = call zeroext i1 @Perl__is_utf8_perl_idstart(i8* %add.ptr58)
  br i1 %call, label %if.else134, label %lor.lhs.false60

lor.lhs.false60:                                  ; preds = %cond.false57, %cond.false56, %cond.true55, %cond.false, %cond.true22, %lor.lhs.false10
  %27 = load i8*, i8** %name.addr, align 8
  %arrayidx61 = getelementptr inbounds i8, i8* %27, i64 1
  %28 = load i8, i8* %arrayidx61, align 1
  %conv62 = sext i8 %28 to i32
  %cmp63 = icmp eq i32 %conv62, 95
  br i1 %cmp63, label %land.lhs.true65, label %if.then72

land.lhs.true65:                                  ; preds = %lor.lhs.false60
  %29 = load i8*, i8** %name.addr, align 8
  %30 = load i8, i8* %29, align 1
  %conv66 = sext i8 %30 to i32
  %cmp67 = icmp eq i32 %conv66, 36
  br i1 %cmp67, label %if.else134, label %lor.lhs.false69

lor.lhs.false69:                                  ; preds = %land.lhs.true65
  %31 = load i64, i64* %len.addr, align 8
  %cmp70 = icmp ugt i64 %31, 2
  br i1 %cmp70, label %if.else134, label %if.then72

if.then72:                                        ; preds = %lor.lhs.false69, %lor.lhs.false60
  %32 = load i32, i32* %flags.addr, align 4
  %and73 = and i32 %32, 536870912
  %tobool74 = icmp ne i32 %and73, 0
  br i1 %tobool74, label %land.lhs.true75, label %land.lhs.true80

land.lhs.true75:                                  ; preds = %if.then72
  %33 = load i8*, i8** %name.addr, align 8
  %arrayidx76 = getelementptr inbounds i8, i8* %33, i64 1
  %34 = load i8, i8* %arrayidx76, align 1
  %conv77 = zext i8 %34 to i32
  %cmp78 = icmp sge i32 %conv77, 194
  br i1 %cmp78, label %if.else, label %land.lhs.true80

land.lhs.true80:                                  ; preds = %land.lhs.true75, %if.then72
  %35 = load i8*, i8** %name.addr, align 8
  %arrayidx81 = getelementptr inbounds i8, i8* %35, i64 1
  %36 = load i8, i8* %arrayidx81, align 1
  %conv82 = sext i8 %36 to i64
  %cmp83 = icmp ult i64 %conv82, 128
  br i1 %cmp83, label %land.lhs.true85, label %if.else

land.lhs.true85:                                  ; preds = %land.lhs.true80
  %37 = load i8*, i8** %name.addr, align 8
  %arrayidx86 = getelementptr inbounds i8, i8* %37, i64 1
  %38 = load i8, i8* %arrayidx86, align 1
  %idxprom87 = zext i8 %38 to i64
  %arrayidx88 = getelementptr inbounds [0 x i32], [0 x i32]* @PL_charclass, i64 0, i64 %idxprom87
  %39 = load i32, i32* %arrayidx88, align 4
  %and89 = and i32 %39, 16448
  %cmp90 = icmp eq i32 %and89, 16448
  br i1 %cmp90, label %lor.lhs.false92, label %if.then97

lor.lhs.false92:                                  ; preds = %land.lhs.true85
  %40 = load i8*, i8** %name.addr, align 8
  %arrayidx93 = getelementptr inbounds i8, i8* %40, i64 1
  %41 = load i8, i8* %arrayidx93, align 1
  %conv94 = sext i8 %41 to i32
  %call95 = call i8* @strchr(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0), i32 %conv94) #7
  %tobool96 = icmp ne i8* %call95, null
  br i1 %tobool96, label %if.then97, label %if.else

if.then97:                                        ; preds = %lor.lhs.false92, %land.lhs.true85
  %42 = load i8*, i8** %name.addr, align 8
  %arrayidx98 = getelementptr inbounds i8, i8* %42, i64 0
  %43 = load i8, i8* %arrayidx98, align 1
  %conv99 = sext i8 %43 to i32
  %44 = load i8*, i8** %name.addr, align 8
  %arrayidx100 = getelementptr inbounds i8, i8* %44, i64 1
  %45 = load i8, i8* %arrayidx100, align 1
  %idxprom101 = zext i8 %45 to i64
  %arrayidx102 = getelementptr inbounds [0 x i32], [0 x i32]* @PL_charclass, i64 0, i64 %idxprom101
  %46 = load i32, i32* %arrayidx102, align 4
  %and103 = and i32 %46, 16392
  %cmp104 = icmp eq i32 %and103, 16392
  br i1 %cmp104, label %cond.true106, label %cond.false111

cond.true106:                                     ; preds = %if.then97
  %47 = load i8*, i8** %name.addr, align 8
  %arrayidx107 = getelementptr inbounds i8, i8* %47, i64 1
  %48 = load i8, i8* %arrayidx107, align 1
  %conv108 = zext i8 %48 to i32
  %sub = sub nsw i32 %conv108, 32
  %conv109 = trunc i32 %sub to i8
  %conv110 = zext i8 %conv109 to i32
  br label %cond.end

cond.false111:                                    ; preds = %if.then97
  %49 = load i8*, i8** %name.addr, align 8
  %arrayidx112 = getelementptr inbounds i8, i8* %49, i64 1
  %50 = load i8, i8* %arrayidx112, align 1
  %conv113 = zext i8 %50 to i32
  br label %cond.end

cond.end:                                         ; preds = %cond.false111, %cond.true106
  %cond = phi i32 [ %conv110, %cond.true106 ], [ %conv113, %cond.false111 ]
  %xor = xor i32 %cond, 64
  %51 = load i64, i64* %len.addr, align 8
  %sub114 = sub i64 %51, 2
  %conv115 = trunc i64 %sub114 to i32
  %52 = load i8*, i8** %name.addr, align 8
  %add.ptr116 = getelementptr inbounds i8, i8* %52, i64 2
  %53 = load %struct.yy_parser*, %struct.yy_parser** @PL_parser, align 8
  %in_my117 = getelementptr inbounds %struct.yy_parser, %struct.yy_parser* %53, i32 0, i32 42
  %54 = load i16, i16* %in_my117, align 4
  %conv118 = zext i16 %54 to i32
  %cmp119 = icmp eq i32 %conv118, 212
  %55 = zext i1 %cmp119 to i64
  %cond121 = select i1 %cmp119, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i64 0, i64 0)
  %call122 = call i8* (i8*, ...) @Perl_form(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.2, i64 0, i64 0), i32 %conv99, i32 %xor, i32 %conv115, i8* %add.ptr116, i8* %cond121)
  %call123 = call i32 @Perl_yyerror(i8* %call122)
  br label %if.end133

if.else:                                          ; preds = %lor.lhs.false92, %land.lhs.true80, %land.lhs.true75
  %56 = load i64, i64* %len.addr, align 8
  %conv124 = trunc i64 %56 to i32
  %57 = load i8*, i8** %name.addr, align 8
  %58 = load %struct.yy_parser*, %struct.yy_parser** @PL_parser, align 8
  %in_my125 = getelementptr inbounds %struct.yy_parser, %struct.yy_parser* %58, i32 0, i32 42
  %59 = load i16, i16* %in_my125, align 4
  %conv126 = zext i16 %59 to i32
  %cmp127 = icmp eq i32 %conv126, 212
  %60 = zext i1 %cmp127 to i64
  %cond129 = select i1 %cmp127, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i64 0, i64 0)
  %call130 = call i8* (i8*, ...) @Perl_form(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.5, i64 0, i64 0), i32 %conv124, i8* %57, i8* %cond129)
  %61 = load i32, i32* %flags.addr, align 4
  %and131 = and i32 %61, 536870912
  %call132 = call i32 @Perl_yyerror_pv(i8* %call130, i32 %and131)
  br label %if.end133

if.end133:                                        ; preds = %if.else, %cond.end
  br label %if.end151

if.else134:                                       ; preds = %lor.lhs.false69, %land.lhs.true65, %cond.false57, %cond.false56, %cond.true55, %cond.false, %cond.true22, %lor.lhs.false, %land.lhs.true, %if.end
  %62 = load i64, i64* %len.addr, align 8
  %cmp135 = icmp eq i64 %62, 2
  br i1 %cmp135, label %land.lhs.true137, label %if.end150

land.lhs.true137:                                 ; preds = %if.else134
  %63 = load i8*, i8** %name.addr, align 8
  %arrayidx138 = getelementptr inbounds i8, i8* %63, i64 1
  %64 = load i8, i8* %arrayidx138, align 1
  %conv139 = sext i8 %64 to i32
  %cmp140 = icmp eq i32 %conv139, 95
  br i1 %cmp140, label %land.lhs.true142, label %if.end150

land.lhs.true142:                                 ; preds = %land.lhs.true137
  %65 = load i8, i8* %is_our, align 1
  %tobool143 = trunc i8 %65 to i1
  br i1 %tobool143, label %if.end150, label %if.then144

if.then144:                                       ; preds = %land.lhs.true142
  %66 = load %struct.yy_parser*, %struct.yy_parser** @PL_parser, align 8
  %in_my145 = getelementptr inbounds %struct.yy_parser, %struct.yy_parser* %66, i32 0, i32 42
  %67 = load i16, i16* %in_my145, align 4
  %conv146 = zext i16 %67 to i32
  %cmp147 = icmp eq i32 %conv146, 212
  %68 = zext i1 %cmp147 to i64
  %cond149 = select i1 %cmp147, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i64 0, i64 0)
  call void (i32, i8*, ...) @Perl_ck_warner_d(i32 53, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.6, i64 0, i64 0), i8* %cond149)
  br label %if.end150

if.end150:                                        ; preds = %if.then144, %land.lhs.true142, %land.lhs.true137, %if.else134
  br label %if.end151

if.end151:                                        ; preds = %if.end150, %if.end133
  %69 = load i8*, i8** %name.addr, align 8
  %70 = load i64, i64* %len.addr, align 8
  %71 = load i8, i8* %is_our, align 1
  %tobool152 = trunc i8 %71 to i1
  br i1 %tobool152, label %cond.true154, label %cond.false155

cond.true154:                                     ; preds = %if.end151
  br label %cond.end161

cond.false155:                                    ; preds = %if.end151
  %72 = load %struct.yy_parser*, %struct.yy_parser** @PL_parser, align 8
  %in_my156 = getelementptr inbounds %struct.yy_parser, %struct.yy_parser* %72, i32 0, i32 42
  %73 = load i16, i16* %in_my156, align 4
  %conv157 = zext i16 %73 to i32
  %cmp158 = icmp eq i32 %conv157, 212
  %74 = zext i1 %cmp158 to i64
  %cond160 = select i1 %cmp158, i32 2, i32 0
  br label %cond.end161

cond.end161:                                      ; preds = %cond.false155, %cond.true154
  %cond162 = phi i32 [ 1, %cond.true154 ], [ %cond160, %cond.false155 ]
  %75 = load %struct.yy_parser*, %struct.yy_parser** @PL_parser, align 8
  %in_my_stash = getelementptr inbounds %struct.yy_parser, %struct.yy_parser* %75, i32 0, i32 45
  %76 = load %struct.hv*, %struct.hv** %in_my_stash, align 8
  %77 = load i8, i8* %is_our, align 1
  %tobool163 = trunc i8 %77 to i1
  br i1 %tobool163, label %cond.true165, label %cond.false177

cond.true165:                                     ; preds = %cond.end161
  %78 = load %struct.hv*, %struct.hv** @PL_curstash, align 8
  %tobool166 = icmp ne %struct.hv* %78, null
  br i1 %tobool166, label %land.lhs.true167, label %cond.false174

land.lhs.true167:                                 ; preds = %cond.true165
  %79 = load i64, i64* %len.addr, align 8
  %cmp168 = icmp eq i64 2, %79
  br i1 %cmp168, label %land.lhs.true170, label %cond.true173

land.lhs.true170:                                 ; preds = %land.lhs.true167
  %80 = load i8*, i8** %name.addr, align 8
  %call171 = call i32 @memcmp(i8* %80, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.7, i64 0, i64 0), i64 2) #7
  %tobool172 = icmp ne i32 %call171, 0
  br i1 %tobool172, label %cond.true173, label %cond.false174

cond.true173:                                     ; preds = %land.lhs.true170, %land.lhs.true167
  %81 = load %struct.hv*, %struct.hv** @PL_curstash, align 8
  br label %cond.end175

cond.false174:                                    ; preds = %land.lhs.true170, %cond.true165
  %82 = load %struct.hv*, %struct.hv** @PL_defstash, align 8
  br label %cond.end175

cond.end175:                                      ; preds = %cond.false174, %cond.true173
  %cond176 = phi %struct.hv* [ %81, %cond.true173 ], [ %82, %cond.false174 ]
  br label %cond.end178

cond.false177:                                    ; preds = %cond.end161
  br label %cond.end178

cond.end178:                                      ; preds = %cond.false177, %cond.end175
  %cond179 = phi %struct.hv* [ %cond176, %cond.end175 ], [ null, %cond.false177 ]
  %call180 = call i64 @Perl_pad_add_name_pvn(i8* %69, i64 %70, i32 %cond162, %struct.hv* %76, %struct.hv* %cond179)
  store i64 %call180, i64* %off, align 8
  %83 = load %struct.yy_parser*, %struct.yy_parser** @PL_parser, align 8
  %in_my181 = getelementptr inbounds %struct.yy_parser, %struct.yy_parser* %83, i32 0, i32 42
  %84 = load i16, i16* %in_my181, align 4
  %conv182 = zext i16 %84 to i32
  %cmp183 = icmp eq i32 %conv182, 212
  br i1 %cmp183, label %land.lhs.true185, label %if.end192

land.lhs.true185:                                 ; preds = %cond.end178
  %85 = load %struct.cv*, %struct.cv** @PL_compcv, align 8
  %sv_any = getelementptr inbounds %struct.cv, %struct.cv* %85, i32 0, i32 0
  %86 = load %struct.xpvcv*, %struct.xpvcv** %sv_any, align 8
  %87 = bitcast %struct.xpvcv* %86 to i8*
  %88 = bitcast i8* %87 to %struct.xpvcv*
  %xcv_flags = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %88, i32 0, i32 12
  %89 = load i32, i32* %xcv_flags, align 4
  %and186 = and i32 %89, 128
  %tobool187 = icmp ne i32 %and186, 0
  br i1 %tobool187, label %if.then188, label %if.end192

if.then188:                                       ; preds = %land.lhs.true185
  %90 = load %struct.cv*, %struct.cv** @PL_compcv, align 8
  %sv_any189 = getelementptr inbounds %struct.cv, %struct.cv* %90, i32 0, i32 0
  %91 = load %struct.xpvcv*, %struct.xpvcv** %sv_any189, align 8
  %92 = bitcast %struct.xpvcv* %91 to i8*
  %93 = bitcast i8* %92 to %struct.xpvcv*
  %xcv_flags190 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %93, i32 0, i32 12
  %94 = load i32, i32* %xcv_flags190, align 4
  %or191 = or i32 %94, 32
  store i32 %or191, i32* %xcv_flags190, align 4
  br label %if.end192

if.end192:                                        ; preds = %if.then188, %land.lhs.true185, %cond.end178
  %95 = load i64, i64* %off, align 8
  ret i64 %95
}

declare dso_local void @Perl_croak(i8*, ...) #3

declare dso_local zeroext i1 @Perl__is_utf8_perl_idstart(i8*) #3

; Function Attrs: nounwind readonly
declare dso_local i8* @strchr(i8*, i32) #4

declare dso_local i32 @Perl_yyerror(i8*) #3

declare dso_local i8* @Perl_form(i8*, ...) #3

declare dso_local i32 @Perl_yyerror_pv(i8*, i32) #3

declare dso_local void @Perl_ck_warner_d(i32, i8*, ...) #3

declare dso_local i64 @Perl_pad_add_name_pvn(i8*, i64, i32, %struct.hv*, %struct.hv*) #3

; Function Attrs: nounwind readonly
declare dso_local i32 @memcmp(i8*, i8*, i64) #4

; Function Attrs: noinline nounwind uwtable
define internal void @S_find_and_forget_pmops(%struct.op* %o) #0 {
entry:
  %o.addr = alloca %struct.op*, align 8
  %kid = alloca %struct.op*, align 8
  store %struct.op* %o, %struct.op** %o.addr, align 8
  %0 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %0, i32 0, i32 5
  %1 = load i8, i8* %op_flags, align 2
  %conv = zext i8 %1 to i32
  %and = and i32 %conv, 4
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.op*, %struct.op** %o.addr, align 8
  %3 = bitcast %struct.op* %2 to %struct.unop*
  %op_first = getelementptr inbounds %struct.unop, %struct.unop* %3, i32 0, i32 7
  %4 = load %struct.op*, %struct.op** %op_first, align 8
  store %struct.op* %4, %struct.op** %kid, align 8
  br label %while.cond

while.cond:                                       ; preds = %sw.epilog, %if.then
  %5 = load %struct.op*, %struct.op** %kid, align 8
  %tobool1 = icmp ne %struct.op* %5, null
  br i1 %tobool1, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %6 = load %struct.op*, %struct.op** %kid, align 8
  %op_type = getelementptr inbounds %struct.op, %struct.op* %6, i32 0, i32 4
  %bf.load = load i16, i16* %op_type, align 8
  %bf.clear = and i16 %bf.load, 511
  %bf.cast = zext i16 %bf.clear to i32
  switch i32 %bf.cast, label %sw.epilog [
    i32 33, label %sw.bb
    i32 13, label %sw.bb
    i32 31, label %sw.bb
    i32 32, label %sw.bb
  ]

sw.bb:                                            ; preds = %while.body, %while.body, %while.body, %while.body
  %7 = load %struct.op*, %struct.op** %kid, align 8
  %8 = bitcast %struct.op* %7 to %struct.pmop*
  call void @S_forget_pmop(%struct.pmop* %8)
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.bb, %while.body
  %9 = load %struct.op*, %struct.op** %kid, align 8
  call void @S_find_and_forget_pmops(%struct.op* %9)
  %10 = load %struct.op*, %struct.op** %kid, align 8
  %op_sibling = getelementptr inbounds %struct.op, %struct.op* %10, i32 0, i32 1
  %11 = load %struct.op*, %struct.op** %op_sibling, align 8
  %add.ptr = getelementptr inbounds %struct.op, %struct.op* %11, i64 0
  store %struct.op* %add.ptr, %struct.op** %kid, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %if.end

if.end:                                           ; preds = %while.end, %entry
  ret void
}

declare dso_local i8* @Perl_safesysrealloc(i8*, i64) #3

; Function Attrs: noinline nounwind uwtable
define internal void @S_cop_free(%struct.cop* %cop) #0 {
entry:
  %cop.addr = alloca %struct.cop*, align 8
  store %struct.cop* %cop, %struct.cop** %cop.addr, align 8
  %0 = load %struct.cop*, %struct.cop** %cop.addr, align 8
  %cop_filegv = getelementptr inbounds %struct.cop, %struct.cop* %0, i32 0, i32 9
  %1 = load %struct.gv*, %struct.gv** %cop_filegv, align 8
  %2 = bitcast %struct.gv* %1 to i8*
  %3 = bitcast i8* %2 to %struct.sv*
  call void @S_SvREFCNT_dec(%struct.sv* %3)
  %4 = load %struct.cop*, %struct.cop** %cop.addr, align 8
  %cop_filegv1 = getelementptr inbounds %struct.cop, %struct.cop* %4, i32 0, i32 9
  store %struct.gv* null, %struct.gv** %cop_filegv1, align 8
  %5 = load %struct.cop*, %struct.cop** %cop.addr, align 8
  %cop_warnings = getelementptr inbounds %struct.cop, %struct.cop* %5, i32 0, i32 12
  %6 = load i64*, i64** %cop_warnings, align 8
  %cmp = icmp eq i64* %6, null
  br i1 %cmp, label %if.end, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %7 = load %struct.cop*, %struct.cop** %cop.addr, align 8
  %cop_warnings2 = getelementptr inbounds %struct.cop, %struct.cop* %7, i32 0, i32 12
  %8 = load i64*, i64** %cop_warnings2, align 8
  %cmp3 = icmp eq i64* %8, getelementptr inbounds (i64, i64* null, i64 1)
  br i1 %cmp3, label %if.end, label %lor.lhs.false4

lor.lhs.false4:                                   ; preds = %lor.lhs.false
  %9 = load %struct.cop*, %struct.cop** %cop.addr, align 8
  %cop_warnings5 = getelementptr inbounds %struct.cop, %struct.cop* %9, i32 0, i32 12
  %10 = load i64*, i64** %cop_warnings5, align 8
  %cmp6 = icmp eq i64* %10, getelementptr inbounds (i64, i64* null, i64 2)
  br i1 %cmp6, label %if.end, label %if.then

if.then:                                          ; preds = %lor.lhs.false4
  %11 = load %struct.cop*, %struct.cop** %cop.addr, align 8
  %cop_warnings7 = getelementptr inbounds %struct.cop, %struct.cop* %11, i32 0, i32 12
  %12 = load i64*, i64** %cop_warnings7, align 8
  %13 = bitcast i64* %12 to i8*
  call void @free(i8* %13) #5
  br label %if.end

if.end:                                           ; preds = %if.then, %lor.lhs.false4, %lor.lhs.false, %entry
  %14 = load %struct.cop*, %struct.cop** %cop.addr, align 8
  %cop_hints_hash = getelementptr inbounds %struct.cop, %struct.cop* %14, i32 0, i32 13
  %15 = load %struct.refcounted_he*, %struct.refcounted_he** %cop_hints_hash, align 8
  call void @Perl_refcounted_he_free(%struct.refcounted_he* %15)
  %16 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %17 = load %struct.cop*, %struct.cop** %cop.addr, align 8
  %cmp8 = icmp eq %struct.cop* %16, %17
  br i1 %cmp8, label %if.then9, label %if.end10

if.then9:                                         ; preds = %if.end
  store %struct.cop* null, %struct.cop** @PL_curcop, align 8
  br label %if.end10

if.end10:                                         ; preds = %if.then9, %if.end
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @Perl_op_clear(%struct.op* %o) #0 {
entry:
  %o.addr = alloca %struct.op*, align 8
  %items = alloca %union.UNOP_AUX_item*, align 8
  %actions = alloca i64, align 8
  %last = alloca i8, align 1
  %is_hash = alloca i8, align 1
  store %struct.op* %o, %struct.op** %o.addr, align 8
  %0 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type = getelementptr inbounds %struct.op, %struct.op* %0, i32 0, i32 4
  %bf.load = load i16, i16* %op_type, align 8
  %bf.clear = and i16 %bf.load, 511
  %bf.cast = zext i16 %bf.clear to i32
  switch i32 %bf.cast, label %sw.default [
    i32 0, label %sw.bb
    i32 344, label %sw.bb
    i32 342, label %sw.bb
    i32 6, label %sw.bb6
    i32 7, label %sw.bb6
    i32 136, label %sw.bb6
    i32 212, label %sw.bb7
    i32 213, label %sw.bb7
    i32 210, label %sw.bb9
    i32 211, label %sw.bb9
    i32 5, label %sw.bb12
    i32 341, label %sw.bb12
    i32 207, label %sw.bb15
    i32 208, label %sw.bb15
    i32 205, label %sw.bb15
    i32 204, label %sw.bb15
    i32 206, label %sw.bb15
    i32 35, label %sw.bb22
    i32 36, label %sw.bb22
    i32 33, label %sw.bb31
    i32 13, label %sw.bb32
    i32 31, label %sw.bb34
    i32 32, label %sw.bb34
    i32 153, label %sw.bb43
  ]

sw.bb:                                            ; preds = %entry, %entry, %entry
  %1 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_targ = getelementptr inbounds %struct.op, %struct.op* %1, i32 0, i32 3
  store i64 0, i64* %op_targ, align 8
  br label %sw.epilog87

sw.default:                                       ; preds = %entry
  %2 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %2, i32 0, i32 5
  %3 = load i8, i8* %op_flags, align 2
  %conv = zext i8 %3 to i32
  %and = and i32 %conv, 16
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %sw.default
  %4 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type1 = getelementptr inbounds %struct.op, %struct.op* %4, i32 0, i32 4
  %bf.load2 = load i16, i16* %op_type1, align 8
  %bf.clear3 = and i16 %bf.load2, 511
  %bf.cast4 = zext i16 %bf.clear3 to i32
  %idxprom = zext i32 %bf.cast4 to i64
  %arrayidx = getelementptr inbounds [0 x %struct.op* (%struct.op*)*], [0 x %struct.op* (%struct.op*)*]* @PL_check, i64 0, i64 %idxprom
  %5 = load %struct.op* (%struct.op*)*, %struct.op* (%struct.op*)** %arrayidx, align 8
  %cmp = icmp ne %struct.op* (%struct.op*)* %5, @Perl_ck_ftst
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %sw.default
  br label %sw.epilog87

if.end:                                           ; preds = %lor.lhs.false
  br label %sw.bb6

sw.bb6:                                           ; preds = %entry, %entry, %entry, %if.end
  %6 = load %struct.op*, %struct.op** %o.addr, align 8
  %7 = load %struct.op*, %struct.op** %o.addr, align 8
  %8 = bitcast %struct.op* %7 to %struct.svop*
  %op_sv = getelementptr inbounds %struct.svop, %struct.svop* %8, i32 0, i32 7
  call void @S_op_clear_gv(%struct.op* %6, %struct.sv** %op_sv)
  br label %sw.epilog87

sw.bb7:                                           ; preds = %entry, %entry
  %9 = load %struct.op*, %struct.op** %o.addr, align 8
  %10 = bitcast %struct.op* %9 to %struct.methop*
  %op_rclass_sv = getelementptr inbounds %struct.methop, %struct.methop* %10, i32 0, i32 8
  %11 = load %struct.sv*, %struct.sv** %op_rclass_sv, align 8
  %12 = bitcast %struct.sv* %11 to i8*
  %13 = bitcast i8* %12 to %struct.sv*
  call void @S_SvREFCNT_dec(%struct.sv* %13)
  %14 = load %struct.op*, %struct.op** %o.addr, align 8
  %15 = bitcast %struct.op* %14 to %struct.methop*
  %op_rclass_sv8 = getelementptr inbounds %struct.methop, %struct.methop* %15, i32 0, i32 8
  store %struct.sv* null, %struct.sv** %op_rclass_sv8, align 8
  br label %sw.bb9

sw.bb9:                                           ; preds = %entry, %entry, %sw.bb7
  %16 = load %struct.op*, %struct.op** %o.addr, align 8
  %17 = bitcast %struct.op* %16 to %struct.methop*
  %op_u = getelementptr inbounds %struct.methop, %struct.methop* %17, i32 0, i32 7
  %op_meth_sv = bitcast %union.anon.17* %op_u to %struct.sv**
  %18 = load %struct.sv*, %struct.sv** %op_meth_sv, align 8
  %19 = bitcast %struct.sv* %18 to i8*
  %20 = bitcast i8* %19 to %struct.sv*
  call void @S_SvREFCNT_dec(%struct.sv* %20)
  %21 = load %struct.op*, %struct.op** %o.addr, align 8
  %22 = bitcast %struct.op* %21 to %struct.methop*
  %op_u10 = getelementptr inbounds %struct.methop, %struct.methop* %22, i32 0, i32 7
  %op_meth_sv11 = bitcast %union.anon.17* %op_u10 to %struct.sv**
  store %struct.sv* null, %struct.sv** %op_meth_sv11, align 8
  br label %sw.epilog87

sw.bb12:                                          ; preds = %entry, %entry
  %23 = load %struct.op*, %struct.op** %o.addr, align 8
  %24 = bitcast %struct.op* %23 to %struct.svop*
  %op_sv13 = getelementptr inbounds %struct.svop, %struct.svop* %24, i32 0, i32 7
  %25 = load %struct.sv*, %struct.sv** %op_sv13, align 8
  %26 = bitcast %struct.sv* %25 to i8*
  %27 = bitcast i8* %26 to %struct.sv*
  call void @S_SvREFCNT_dec(%struct.sv* %27)
  %28 = load %struct.op*, %struct.op** %o.addr, align 8
  %29 = bitcast %struct.op* %28 to %struct.svop*
  %op_sv14 = getelementptr inbounds %struct.svop, %struct.svop* %29, i32 0, i32 7
  store %struct.sv* null, %struct.sv** %op_sv14, align 8
  br label %sw.epilog87

sw.bb15:                                          ; preds = %entry, %entry, %entry, %entry, %entry
  %30 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_flags16 = getelementptr inbounds %struct.op, %struct.op* %30, i32 0, i32 5
  %31 = load i8, i8* %op_flags16, align 2
  %conv17 = zext i8 %31 to i32
  %and18 = and i32 %conv17, 196
  %tobool19 = icmp ne i32 %and18, 0
  br i1 %tobool19, label %if.then20, label %if.end21

if.then20:                                        ; preds = %sw.bb15
  br label %sw.epilog87

if.end21:                                         ; preds = %sw.bb15
  br label %sw.bb22

sw.bb22:                                          ; preds = %entry, %entry, %if.end21
  %32 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_private = getelementptr inbounds %struct.op, %struct.op* %32, i32 0, i32 6
  %33 = load i8, i8* %op_private, align 1
  %conv23 = zext i8 %33 to i32
  %and24 = and i32 %conv23, 3
  %tobool25 = icmp ne i32 %and24, 0
  br i1 %tobool25, label %if.then26, label %if.else

if.then26:                                        ; preds = %sw.bb22
  %34 = load %struct.op*, %struct.op** %o.addr, align 8
  %35 = bitcast %struct.op* %34 to %struct.svop*
  %op_sv27 = getelementptr inbounds %struct.svop, %struct.svop* %35, i32 0, i32 7
  %36 = load %struct.sv*, %struct.sv** %op_sv27, align 8
  %37 = bitcast %struct.sv* %36 to i8*
  %38 = bitcast i8* %37 to %struct.sv*
  call void @S_SvREFCNT_dec(%struct.sv* %38)
  %39 = load %struct.op*, %struct.op** %o.addr, align 8
  %40 = bitcast %struct.op* %39 to %struct.svop*
  %op_sv28 = getelementptr inbounds %struct.svop, %struct.svop* %40, i32 0, i32 7
  store %struct.sv* null, %struct.sv** %op_sv28, align 8
  br label %if.end30

if.else:                                          ; preds = %sw.bb22
  %41 = load %struct.op*, %struct.op** %o.addr, align 8
  %42 = bitcast %struct.op* %41 to %struct.pvop*
  %op_pv = getelementptr inbounds %struct.pvop, %struct.pvop* %42, i32 0, i32 7
  %43 = load i8*, i8** %op_pv, align 8
  call void @free(i8* %43) #5
  %44 = load %struct.op*, %struct.op** %o.addr, align 8
  %45 = bitcast %struct.op* %44 to %struct.pvop*
  %op_pv29 = getelementptr inbounds %struct.pvop, %struct.pvop* %45, i32 0, i32 7
  store i8* null, i8** %op_pv29, align 8
  br label %if.end30

if.end30:                                         ; preds = %if.else, %if.then26
  br label %sw.epilog87

sw.bb31:                                          ; preds = %entry
  %46 = load %struct.op*, %struct.op** %o.addr, align 8
  %47 = bitcast %struct.op* %46 to %struct.pmop*
  %op_pmreplrootu = getelementptr inbounds %struct.pmop, %struct.pmop* %47, i32 0, i32 11
  %op_pmreplroot = bitcast %union.anon.18* %op_pmreplrootu to %struct.op**
  %48 = load %struct.op*, %struct.op** %op_pmreplroot, align 8
  call void @Perl_op_free(%struct.op* %48)
  br label %clear_pmop

sw.bb32:                                          ; preds = %entry
  %49 = load %struct.op*, %struct.op** %o.addr, align 8
  %50 = bitcast %struct.op* %49 to %struct.pmop*
  %op_pmreplrootu33 = getelementptr inbounds %struct.pmop, %struct.pmop* %50, i32 0, i32 11
  %op_pmtargetgv = bitcast %union.anon.18* %op_pmreplrootu33 to %struct.gv**
  %51 = load %struct.gv*, %struct.gv** %op_pmtargetgv, align 8
  %52 = bitcast %struct.gv* %51 to i8*
  %53 = bitcast i8* %52 to %struct.sv*
  %54 = bitcast %struct.sv* %53 to i8*
  %55 = bitcast i8* %54 to %struct.sv*
  call void @S_SvREFCNT_dec(%struct.sv* %55)
  br label %sw.bb34

sw.bb34:                                          ; preds = %entry, %entry, %sw.bb32
  br label %clear_pmop

clear_pmop:                                       ; preds = %sw.bb34, %sw.bb31
  %56 = load %struct.op*, %struct.op** %o.addr, align 8
  %57 = bitcast %struct.op* %56 to %struct.pmop*
  %op_pmflags = getelementptr inbounds %struct.pmop, %struct.pmop* %57, i32 0, i32 10
  %58 = load i32, i32* %op_pmflags, align 8
  %and35 = and i32 %58, 536870912
  %tobool36 = icmp ne i32 %and35, 0
  br i1 %tobool36, label %if.end38, label %if.then37

if.then37:                                        ; preds = %clear_pmop
  %59 = load %struct.op*, %struct.op** %o.addr, align 8
  %60 = bitcast %struct.op* %59 to %struct.pmop*
  %op_code_list = getelementptr inbounds %struct.pmop, %struct.pmop* %60, i32 0, i32 13
  %61 = load %struct.op*, %struct.op** %op_code_list, align 8
  call void @Perl_op_free(%struct.op* %61)
  br label %if.end38

if.end38:                                         ; preds = %if.then37, %clear_pmop
  %62 = load %struct.op*, %struct.op** %o.addr, align 8
  %63 = bitcast %struct.op* %62 to %struct.pmop*
  %op_code_list39 = getelementptr inbounds %struct.pmop, %struct.pmop* %63, i32 0, i32 13
  store %struct.op* null, %struct.op** %op_code_list39, align 8
  %64 = load %struct.op*, %struct.op** %o.addr, align 8
  %65 = bitcast %struct.op* %64 to %struct.pmop*
  call void @S_forget_pmop(%struct.pmop* %65)
  %66 = load %struct.op*, %struct.op** %o.addr, align 8
  %67 = bitcast %struct.op* %66 to %struct.pmop*
  %op_pmreplrootu40 = getelementptr inbounds %struct.pmop, %struct.pmop* %67, i32 0, i32 11
  %op_pmreplroot41 = bitcast %union.anon.18* %op_pmreplrootu40 to %struct.op**
  store %struct.op* null, %struct.op** %op_pmreplroot41, align 8
  %68 = load %struct.op*, %struct.op** %o.addr, align 8
  %69 = bitcast %struct.op* %68 to %struct.pmop*
  %op_pmregexp = getelementptr inbounds %struct.pmop, %struct.pmop* %69, i32 0, i32 9
  %70 = load %struct.p5rx*, %struct.p5rx** %op_pmregexp, align 8
  %71 = bitcast %struct.p5rx* %70 to i8*
  %72 = bitcast i8* %71 to %struct.sv*
  call void @S_SvREFCNT_dec(%struct.sv* %72)
  %73 = load %struct.op*, %struct.op** %o.addr, align 8
  %74 = bitcast %struct.op* %73 to %struct.pmop*
  %op_pmregexp42 = getelementptr inbounds %struct.pmop, %struct.pmop* %74, i32 0, i32 9
  store %struct.p5rx* null, %struct.p5rx** %op_pmregexp42, align 8
  br label %sw.epilog87

sw.bb43:                                          ; preds = %entry
  %75 = load %struct.op*, %struct.op** %o.addr, align 8
  %76 = bitcast %struct.op* %75 to %struct.unop_aux*
  %op_aux = getelementptr inbounds %struct.unop_aux, %struct.unop_aux* %76, i32 0, i32 8
  %77 = load %union.UNOP_AUX_item*, %union.UNOP_AUX_item** %op_aux, align 8
  store %union.UNOP_AUX_item* %77, %union.UNOP_AUX_item** %items, align 8
  %78 = load %union.UNOP_AUX_item*, %union.UNOP_AUX_item** %items, align 8
  %uv = bitcast %union.UNOP_AUX_item* %78 to i64*
  %79 = load i64, i64* %uv, align 8
  store i64 %79, i64* %actions, align 8
  store i8 0, i8* %last, align 1
  store i8 0, i8* %is_hash, align 1
  br label %while.cond

while.cond:                                       ; preds = %sw.epilog85, %sw.bb46, %sw.bb43
  %80 = load i8, i8* %last, align 1
  %tobool44 = trunc i8 %80 to i1
  %lnot = xor i1 %tobool44, true
  br i1 %lnot, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %81 = load i64, i64* %actions, align 8
  %and45 = and i64 %81, 15
  switch i64 %and45, label %sw.default84 [
    i64 0, label %sw.bb46
    i64 12, label %sw.bb48
    i64 5, label %sw.bb49
    i64 13, label %sw.bb51
    i64 6, label %sw.bb52
    i64 9, label %sw.bb54
    i64 2, label %sw.bb55
    i64 10, label %sw.bb58
    i64 3, label %sw.bb59
    i64 8, label %sw.bb62
    i64 11, label %sw.bb62
    i64 1, label %sw.bb63
    i64 4, label %sw.bb63
  ]

sw.bb46:                                          ; preds = %while.body
  %82 = load %union.UNOP_AUX_item*, %union.UNOP_AUX_item** %items, align 8
  %incdec.ptr = getelementptr inbounds %union.UNOP_AUX_item, %union.UNOP_AUX_item* %82, i32 1
  store %union.UNOP_AUX_item* %incdec.ptr, %union.UNOP_AUX_item** %items, align 8
  %uv47 = bitcast %union.UNOP_AUX_item* %incdec.ptr to i64*
  %83 = load i64, i64* %uv47, align 8
  store i64 %83, i64* %actions, align 8
  br label %while.cond

sw.bb48:                                          ; preds = %while.body
  store i8 1, i8* %is_hash, align 1
  br label %sw.bb49

sw.bb49:                                          ; preds = %while.body, %sw.bb48
  %84 = load %union.UNOP_AUX_item*, %union.UNOP_AUX_item** %items, align 8
  %incdec.ptr50 = getelementptr inbounds %union.UNOP_AUX_item, %union.UNOP_AUX_item* %84, i32 1
  store %union.UNOP_AUX_item* %incdec.ptr50, %union.UNOP_AUX_item** %items, align 8
  %pad_offset = bitcast %union.UNOP_AUX_item* %incdec.ptr50 to i64*
  %85 = load i64, i64* %pad_offset, align 8
  call void @Perl_pad_free(i64 %85)
  br label %do_elem

sw.bb51:                                          ; preds = %while.body
  store i8 1, i8* %is_hash, align 1
  br label %sw.bb52

sw.bb52:                                          ; preds = %while.body, %sw.bb51
  %86 = load %struct.op*, %struct.op** %o.addr, align 8
  %87 = load %union.UNOP_AUX_item*, %union.UNOP_AUX_item** %items, align 8
  %incdec.ptr53 = getelementptr inbounds %union.UNOP_AUX_item, %union.UNOP_AUX_item* %87, i32 1
  store %union.UNOP_AUX_item* %incdec.ptr53, %union.UNOP_AUX_item** %items, align 8
  %sv = bitcast %union.UNOP_AUX_item* %incdec.ptr53 to %struct.sv**
  call void @S_op_clear_gv(%struct.op* %86, %struct.sv** %sv)
  br label %do_elem

sw.bb54:                                          ; preds = %while.body
  store i8 1, i8* %is_hash, align 1
  br label %sw.bb55

sw.bb55:                                          ; preds = %while.body, %sw.bb54
  %88 = load %struct.op*, %struct.op** %o.addr, align 8
  %89 = load %union.UNOP_AUX_item*, %union.UNOP_AUX_item** %items, align 8
  %incdec.ptr56 = getelementptr inbounds %union.UNOP_AUX_item, %union.UNOP_AUX_item* %89, i32 1
  store %union.UNOP_AUX_item* %incdec.ptr56, %union.UNOP_AUX_item** %items, align 8
  %sv57 = bitcast %union.UNOP_AUX_item* %incdec.ptr56 to %struct.sv**
  call void @S_op_clear_gv(%struct.op* %88, %struct.sv** %sv57)
  br label %do_vivify_rv2xv_elem

sw.bb58:                                          ; preds = %while.body
  store i8 1, i8* %is_hash, align 1
  br label %sw.bb59

sw.bb59:                                          ; preds = %while.body, %sw.bb58
  %90 = load %union.UNOP_AUX_item*, %union.UNOP_AUX_item** %items, align 8
  %incdec.ptr60 = getelementptr inbounds %union.UNOP_AUX_item, %union.UNOP_AUX_item* %90, i32 1
  store %union.UNOP_AUX_item* %incdec.ptr60, %union.UNOP_AUX_item** %items, align 8
  %pad_offset61 = bitcast %union.UNOP_AUX_item* %incdec.ptr60 to i64*
  %91 = load i64, i64* %pad_offset61, align 8
  call void @Perl_pad_free(i64 %91)
  br label %do_vivify_rv2xv_elem

sw.bb62:                                          ; preds = %while.body, %while.body
  store i8 1, i8* %is_hash, align 1
  br label %do_vivify_rv2xv_elem

do_vivify_rv2xv_elem:                             ; preds = %sw.bb62, %sw.bb59, %sw.bb55
  br label %sw.bb63

sw.bb63:                                          ; preds = %while.body, %while.body, %do_vivify_rv2xv_elem
  br label %do_elem

do_elem:                                          ; preds = %sw.bb63, %sw.bb52, %sw.bb49
  %92 = load i64, i64* %actions, align 8
  %and64 = and i64 %92, 48
  switch i64 %and64, label %sw.epilog [
    i64 0, label %sw.bb65
    i64 16, label %sw.bb66
    i64 32, label %sw.bb74
    i64 48, label %sw.bb77
  ]

sw.bb65:                                          ; preds = %do_elem
  store i8 1, i8* %last, align 1
  br label %sw.epilog

sw.bb66:                                          ; preds = %do_elem
  %93 = load i8, i8* %is_hash, align 1
  %tobool67 = trunc i8 %93 to i1
  br i1 %tobool67, label %if.then68, label %if.else71

if.then68:                                        ; preds = %sw.bb66
  %94 = load %union.UNOP_AUX_item*, %union.UNOP_AUX_item** %items, align 8
  %incdec.ptr69 = getelementptr inbounds %union.UNOP_AUX_item, %union.UNOP_AUX_item* %94, i32 1
  store %union.UNOP_AUX_item* %incdec.ptr69, %union.UNOP_AUX_item** %items, align 8
  %sv70 = bitcast %union.UNOP_AUX_item* %incdec.ptr69 to %struct.sv**
  %95 = load %struct.sv*, %struct.sv** %sv70, align 8
  %96 = bitcast %struct.sv* %95 to i8*
  %97 = bitcast i8* %96 to %struct.sv*
  call void @S_SvREFCNT_dec(%struct.sv* %97)
  br label %if.end73

if.else71:                                        ; preds = %sw.bb66
  %98 = load %union.UNOP_AUX_item*, %union.UNOP_AUX_item** %items, align 8
  %incdec.ptr72 = getelementptr inbounds %union.UNOP_AUX_item, %union.UNOP_AUX_item* %98, i32 1
  store %union.UNOP_AUX_item* %incdec.ptr72, %union.UNOP_AUX_item** %items, align 8
  br label %if.end73

if.end73:                                         ; preds = %if.else71, %if.then68
  br label %sw.epilog

sw.bb74:                                          ; preds = %do_elem
  %99 = load %union.UNOP_AUX_item*, %union.UNOP_AUX_item** %items, align 8
  %incdec.ptr75 = getelementptr inbounds %union.UNOP_AUX_item, %union.UNOP_AUX_item* %99, i32 1
  store %union.UNOP_AUX_item* %incdec.ptr75, %union.UNOP_AUX_item** %items, align 8
  %pad_offset76 = bitcast %union.UNOP_AUX_item* %incdec.ptr75 to i64*
  %100 = load i64, i64* %pad_offset76, align 8
  call void @Perl_pad_free(i64 %100)
  br label %sw.epilog

sw.bb77:                                          ; preds = %do_elem
  %101 = load %struct.op*, %struct.op** %o.addr, align 8
  %102 = load %union.UNOP_AUX_item*, %union.UNOP_AUX_item** %items, align 8
  %incdec.ptr78 = getelementptr inbounds %union.UNOP_AUX_item, %union.UNOP_AUX_item* %102, i32 1
  store %union.UNOP_AUX_item* %incdec.ptr78, %union.UNOP_AUX_item** %items, align 8
  %sv79 = bitcast %union.UNOP_AUX_item* %incdec.ptr78 to %struct.sv**
  call void @S_op_clear_gv(%struct.op* %101, %struct.sv** %sv79)
  br label %sw.epilog

sw.epilog:                                        ; preds = %do_elem, %sw.bb77, %sw.bb74, %if.end73, %sw.bb65
  %103 = load i64, i64* %actions, align 8
  %and80 = and i64 %103, 64
  %tobool81 = icmp ne i64 %and80, 0
  br i1 %tobool81, label %if.then82, label %if.end83

if.then82:                                        ; preds = %sw.epilog
  store i8 1, i8* %last, align 1
  br label %if.end83

if.end83:                                         ; preds = %if.then82, %sw.epilog
  store i8 0, i8* %is_hash, align 1
  br label %sw.epilog85

sw.default84:                                     ; preds = %while.body
  store i8 1, i8* %last, align 1
  br label %sw.epilog85

sw.epilog85:                                      ; preds = %sw.default84, %if.end83
  %104 = load i64, i64* %actions, align 8
  %shr = lshr i64 %104, 7
  store i64 %shr, i64* %actions, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %105 = load %struct.op*, %struct.op** %o.addr, align 8
  %106 = bitcast %struct.op* %105 to %struct.unop_aux*
  %op_aux86 = getelementptr inbounds %struct.unop_aux, %struct.unop_aux* %106, i32 0, i32 8
  %107 = load %union.UNOP_AUX_item*, %union.UNOP_AUX_item** %op_aux86, align 8
  %add.ptr = getelementptr inbounds %union.UNOP_AUX_item, %union.UNOP_AUX_item* %107, i64 -1
  %108 = bitcast %union.UNOP_AUX_item* %add.ptr to i8*
  call void @free(i8* %108) #5
  br label %sw.epilog87

sw.epilog87:                                      ; preds = %while.end, %if.end38, %if.end30, %if.then20, %sw.bb12, %sw.bb9, %sw.bb6, %if.then, %sw.bb
  %109 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_targ88 = getelementptr inbounds %struct.op, %struct.op* %109, i32 0, i32 3
  %110 = load i64, i64* %op_targ88, align 8
  %cmp89 = icmp ugt i64 %110, 0
  br i1 %cmp89, label %if.then91, label %if.end94

if.then91:                                        ; preds = %sw.epilog87
  %111 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_targ92 = getelementptr inbounds %struct.op, %struct.op* %111, i32 0, i32 3
  %112 = load i64, i64* %op_targ92, align 8
  call void @Perl_pad_free(i64 %112)
  %113 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_targ93 = getelementptr inbounds %struct.op, %struct.op* %113, i32 0, i32 3
  store i64 0, i64* %op_targ93, align 8
  br label %if.end94

if.end94:                                         ; preds = %if.then91, %sw.epilog87
  ret void
}

declare dso_local void @Perl_safesysfree(i8*) #3

; Function Attrs: noinline nounwind uwtable
define dso_local void @S_op_clear_gv(%struct.op* %o, %struct.sv** %svp) #0 {
entry:
  %o.addr = alloca %struct.op*, align 8
  %svp.addr = alloca %struct.sv**, align 8
  %gv = alloca %struct.gv*, align 8
  %still_valid = alloca i8, align 1
  %try_downgrade = alloca i32, align 4
  store %struct.op* %o, %struct.op** %o.addr, align 8
  store %struct.sv** %svp, %struct.sv*** %svp.addr, align 8
  %0 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type = getelementptr inbounds %struct.op, %struct.op* %0, i32 0, i32 4
  %bf.load = load i16, i16* %op_type, align 8
  %bf.clear = and i16 %bf.load, 511
  %bf.cast = zext i16 %bf.clear to i32
  %cmp = icmp eq i32 %bf.cast, 7
  br i1 %cmp, label %cond.true, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type1 = getelementptr inbounds %struct.op, %struct.op* %1, i32 0, i32 4
  %bf.load2 = load i16, i16* %op_type1, align 8
  %bf.clear3 = and i16 %bf.load2, 511
  %bf.cast4 = zext i16 %bf.clear3 to i32
  %cmp5 = icmp eq i32 %bf.cast4, 6
  br i1 %cmp5, label %cond.true, label %lor.lhs.false6

lor.lhs.false6:                                   ; preds = %lor.lhs.false
  %2 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type7 = getelementptr inbounds %struct.op, %struct.op* %2, i32 0, i32 4
  %bf.load8 = load i16, i16* %op_type7, align 8
  %bf.clear9 = and i16 %bf.load8, 511
  %bf.cast10 = zext i16 %bf.clear9 to i32
  %cmp11 = icmp eq i32 %bf.cast10, 153
  br i1 %cmp11, label %cond.true, label %cond.false

cond.true:                                        ; preds = %lor.lhs.false6, %lor.lhs.false, %entry
  %3 = load %struct.sv**, %struct.sv*** %svp.addr, align 8
  %4 = load %struct.sv*, %struct.sv** %3, align 8
  %5 = bitcast %struct.sv* %4 to %struct.gv*
  br label %cond.end

cond.false:                                       ; preds = %lor.lhs.false6
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.gv* [ %5, %cond.true ], [ null, %cond.false ]
  store %struct.gv* %cond, %struct.gv** %gv, align 8
  %6 = load %struct.gv*, %struct.gv** %gv, align 8
  %tobool = icmp ne %struct.gv* %6, null
  br i1 %tobool, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %cond.end
  %7 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_refcnt = getelementptr inbounds %struct.gv, %struct.gv* %7, i32 0, i32 1
  %8 = load i32, i32* %sv_refcnt, align 8
  %tobool12 = icmp ne i32 %8, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %cond.end
  %9 = phi i1 [ false, %cond.end ], [ %tobool12, %land.rhs ]
  %frombool = zext i1 %9 to i8
  store i8 %frombool, i8* %still_valid, align 1
  %10 = load i8, i8* %still_valid, align 1
  %tobool13 = trunc i8 %10 to i1
  br i1 %tobool13, label %if.then, label %if.end17

if.then:                                          ; preds = %land.end
  br label %do.body

do.body:                                          ; preds = %if.then
  %11 = load %struct.gv*, %struct.gv** %gv, align 8
  %tobool14 = icmp ne %struct.gv* %11, null
  br i1 %tobool14, label %if.then15, label %if.end

if.then15:                                        ; preds = %do.body
  %12 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_refcnt16 = getelementptr inbounds %struct.gv, %struct.gv* %12, i32 0, i32 1
  %13 = load i32, i32* %sv_refcnt16, align 8
  %inc = add i32 %13, 1
  store i32 %inc, i32* %sv_refcnt16, align 8
  br label %if.end

if.end:                                           ; preds = %if.then15, %do.body
  br label %do.end

do.end:                                           ; preds = %if.end
  br label %if.end17

if.end17:                                         ; preds = %do.end, %land.end
  %14 = load %struct.sv**, %struct.sv*** %svp.addr, align 8
  %15 = load %struct.sv*, %struct.sv** %14, align 8
  %16 = bitcast %struct.sv* %15 to i8*
  %17 = bitcast i8* %16 to %struct.sv*
  call void @S_SvREFCNT_dec(%struct.sv* %17)
  %18 = load %struct.sv**, %struct.sv*** %svp.addr, align 8
  store %struct.sv* null, %struct.sv** %18, align 8
  %19 = load i8, i8* %still_valid, align 1
  %tobool18 = trunc i8 %19 to i1
  br i1 %tobool18, label %if.then19, label %if.end25

if.then19:                                        ; preds = %if.end17
  %20 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_refcnt20 = getelementptr inbounds %struct.gv, %struct.gv* %20, i32 0, i32 1
  %21 = load i32, i32* %sv_refcnt20, align 8
  %cmp21 = icmp eq i32 %21, 2
  %conv = zext i1 %cmp21 to i32
  store i32 %conv, i32* %try_downgrade, align 4
  %22 = load %struct.gv*, %struct.gv** %gv, align 8
  %23 = bitcast %struct.gv* %22 to i8*
  %24 = bitcast i8* %23 to %struct.sv*
  call void @S_SvREFCNT_dec_NN(%struct.sv* %24)
  %25 = load i32, i32* %try_downgrade, align 4
  %tobool22 = icmp ne i32 %25, 0
  br i1 %tobool22, label %if.then23, label %if.end24

if.then23:                                        ; preds = %if.then19
  %26 = load %struct.gv*, %struct.gv** %gv, align 8
  call void @Perl_gv_try_downgrade(%struct.gv* %26)
  br label %if.end24

if.end24:                                         ; preds = %if.then23, %if.then19
  br label %if.end25

if.end25:                                         ; preds = %if.end24, %if.end17
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @S_SvREFCNT_dec(%struct.sv* %sv) #0 {
entry:
  %sv.addr = alloca %struct.sv*, align 8
  %rc = alloca i32, align 4
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %cmp = icmp ne %struct.sv* %0, null
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  br i1 true, label %if.then, label %if.end6

cond.false:                                       ; preds = %entry
  br i1 false, label %if.then, label %if.end6

if.then:                                          ; preds = %cond.false, %cond.true
  %1 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_refcnt = getelementptr inbounds %struct.sv, %struct.sv* %1, i32 0, i32 1
  %2 = load i32, i32* %sv_refcnt, align 8
  store i32 %2, i32* %rc, align 4
  %3 = load i32, i32* %rc, align 4
  %cmp1 = icmp ugt i32 %3, 1
  br i1 %cmp1, label %cond.true2, label %cond.false3

cond.true2:                                       ; preds = %if.then
  br i1 true, label %if.then4, label %if.else

cond.false3:                                      ; preds = %if.then
  br i1 false, label %if.then4, label %if.else

if.then4:                                         ; preds = %cond.false3, %cond.true2
  %4 = load i32, i32* %rc, align 4
  %sub = sub i32 %4, 1
  %5 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_refcnt5 = getelementptr inbounds %struct.sv, %struct.sv* %5, i32 0, i32 1
  store i32 %sub, i32* %sv_refcnt5, align 8
  br label %if.end

if.else:                                          ; preds = %cond.false3, %cond.true2
  %6 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %7 = load i32, i32* %rc, align 4
  call void @Perl_sv_free2(%struct.sv* %6, i32 %7)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then4
  br label %if.end6

if.end6:                                          ; preds = %if.end, %cond.false, %cond.true
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @S_SvREFCNT_dec_NN(%struct.sv* %sv) #0 {
entry:
  %sv.addr = alloca %struct.sv*, align 8
  %rc = alloca i32, align 4
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_refcnt = getelementptr inbounds %struct.sv, %struct.sv* %0, i32 0, i32 1
  %1 = load i32, i32* %sv_refcnt, align 8
  store i32 %1, i32* %rc, align 4
  %2 = load i32, i32* %rc, align 4
  %cmp = icmp ugt i32 %2, 1
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  br i1 true, label %if.then, label %if.else

cond.false:                                       ; preds = %entry
  br i1 false, label %if.then, label %if.else

if.then:                                          ; preds = %cond.false, %cond.true
  %3 = load i32, i32* %rc, align 4
  %sub = sub i32 %3, 1
  %4 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_refcnt1 = getelementptr inbounds %struct.sv, %struct.sv* %4, i32 0, i32 1
  store i32 %sub, i32* %sv_refcnt1, align 8
  br label %if.end

if.else:                                          ; preds = %cond.false, %cond.true
  %5 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %6 = load i32, i32* %rc, align 4
  call void @Perl_sv_free2(%struct.sv* %5, i32 %6)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void
}

declare dso_local void @Perl_gv_try_downgrade(%struct.gv*) #3

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_ck_ftst(%struct.op* %o) #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %o.addr = alloca %struct.op*, align 8
  %type = alloca i32, align 4
  %kid = alloca %struct.svop*, align 8
  %kidtype = alloca i16, align 2
  %newop = alloca %struct.op*, align 8
  store %struct.op* %o, %struct.op** %o.addr, align 8
  %0 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type = getelementptr inbounds %struct.op, %struct.op* %0, i32 0, i32 4
  %bf.load = load i16, i16* %op_type, align 8
  %bf.clear = and i16 %bf.load, 511
  %bf.cast = zext i16 %bf.clear to i32
  store i32 %bf.cast, i32* %type, align 4
  %1 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %1, i32 0, i32 5
  %2 = load i8, i8* %op_flags, align 2
  %conv = zext i8 %2 to i32
  %and = and i32 %conv, 16
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  br label %if.end106

if.else:                                          ; preds = %entry
  %3 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_flags1 = getelementptr inbounds %struct.op, %struct.op* %3, i32 0, i32 5
  %4 = load i8, i8* %op_flags1, align 2
  %conv2 = zext i8 %4 to i32
  %and3 = and i32 %conv2, 4
  %tobool4 = icmp ne i32 %and3, 0
  br i1 %tobool4, label %land.lhs.true, label %if.else96

land.lhs.true:                                    ; preds = %if.else
  %5 = load %struct.op*, %struct.op** %o.addr, align 8
  %6 = bitcast %struct.op* %5 to %struct.unop*
  %op_first = getelementptr inbounds %struct.unop, %struct.unop* %6, i32 0, i32 7
  %7 = load %struct.op*, %struct.op** %op_first, align 8
  %op_type5 = getelementptr inbounds %struct.op, %struct.op* %7, i32 0, i32 4
  %bf.load6 = load i16, i16* %op_type5, align 8
  %bf.clear7 = and i16 %bf.load6, 511
  %bf.cast8 = zext i16 %bf.clear7 to i32
  %cmp = icmp ne i32 %bf.cast8, 1
  br i1 %cmp, label %if.then10, label %if.else96

if.then10:                                        ; preds = %land.lhs.true
  %8 = load %struct.op*, %struct.op** %o.addr, align 8
  %9 = bitcast %struct.op* %8 to %struct.unop*
  %op_first11 = getelementptr inbounds %struct.unop, %struct.unop* %9, i32 0, i32 7
  %10 = load %struct.op*, %struct.op** %op_first11, align 8
  %11 = bitcast %struct.op* %10 to %struct.svop*
  store %struct.svop* %11, %struct.svop** %kid, align 8
  %12 = load %struct.svop*, %struct.svop** %kid, align 8
  %op_type12 = getelementptr inbounds %struct.svop, %struct.svop* %12, i32 0, i32 4
  %bf.load13 = load i16, i16* %op_type12, align 8
  %bf.clear14 = and i16 %bf.load13, 511
  %bf.cast15 = zext i16 %bf.clear14 to i32
  %conv16 = trunc i32 %bf.cast15 to i16
  store i16 %conv16, i16* %kidtype, align 2
  %13 = load i16, i16* %kidtype, align 2
  %conv17 = zext i16 %13 to i32
  %cmp18 = icmp eq i32 %conv17, 5
  br i1 %cmp18, label %land.lhs.true20, label %if.end

land.lhs.true20:                                  ; preds = %if.then10
  %14 = load %struct.svop*, %struct.svop** %kid, align 8
  %op_private = getelementptr inbounds %struct.svop, %struct.svop* %14, i32 0, i32 6
  %15 = load i8, i8* %op_private, align 1
  %conv21 = zext i8 %15 to i32
  %and22 = and i32 %conv21, 64
  %tobool23 = icmp ne i32 %and22, 0
  br i1 %tobool23, label %land.lhs.true24, label %if.end

land.lhs.true24:                                  ; preds = %land.lhs.true20
  %16 = load %struct.svop*, %struct.svop** %kid, align 8
  %op_folded = getelementptr inbounds %struct.svop, %struct.svop* %16, i32 0, i32 4
  %bf.load25 = load i16, i16* %op_folded, align 8
  %bf.lshr = lshr i16 %bf.load25, 13
  %bf.clear26 = and i16 %bf.lshr, 1
  %bf.cast27 = zext i16 %bf.clear26 to i32
  %tobool28 = icmp ne i32 %bf.cast27, 0
  br i1 %tobool28, label %if.end, label %if.then29

if.then29:                                        ; preds = %land.lhs.true24
  %17 = load i32, i32* %type, align 4
  %18 = load %struct.svop*, %struct.svop** %kid, align 8
  %op_sv = getelementptr inbounds %struct.svop, %struct.svop* %18, i32 0, i32 7
  %19 = load %struct.sv*, %struct.sv** %op_sv, align 8
  %call = call %struct.gv* @Perl_gv_fetchsv(%struct.sv* %19, i32 1, i32 15)
  %call30 = call %struct.op* @Perl_newGVOP(i32 %17, i32 16, %struct.gv* %call)
  store %struct.op* %call30, %struct.op** %newop, align 8
  %20 = load %struct.op*, %struct.op** %o.addr, align 8
  call void @Perl_op_free(%struct.op* %20)
  %21 = load %struct.op*, %struct.op** %newop, align 8
  store %struct.op* %21, %struct.op** %retval, align 8
  br label %return

if.end:                                           ; preds = %land.lhs.true24, %land.lhs.true20, %if.then10
  %22 = load i32, i32* getelementptr inbounds (%struct.cop, %struct.cop* @PL_compiling, i32 0, i32 10), align 8
  %and31 = and i32 %22, 4194304
  %tobool32 = icmp ne i32 %and31, 0
  br i1 %tobool32, label %land.lhs.true33, label %if.end51

land.lhs.true33:                                  ; preds = %if.end
  %23 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type34 = getelementptr inbounds %struct.op, %struct.op* %23, i32 0, i32 4
  %bf.load35 = load i16, i16* %op_type34, align 8
  %bf.clear36 = and i16 %bf.load35, 511
  %bf.cast37 = zext i16 %bf.clear36 to i32
  %cmp38 = icmp sge i32 %bf.cast37, 266
  br i1 %cmp38, label %land.lhs.true40, label %if.end51

land.lhs.true40:                                  ; preds = %land.lhs.true33
  %24 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type41 = getelementptr inbounds %struct.op, %struct.op* %24, i32 0, i32 4
  %bf.load42 = load i16, i16* %op_type41, align 8
  %bf.clear43 = and i16 %bf.load42, 511
  %bf.cast44 = zext i16 %bf.clear43 to i32
  %cmp45 = icmp sle i32 %bf.cast44, 271
  br i1 %cmp45, label %if.then47, label %if.end51

if.then47:                                        ; preds = %land.lhs.true40
  %25 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_private48 = getelementptr inbounds %struct.op, %struct.op* %25, i32 0, i32 6
  %26 = load i8, i8* %op_private48, align 1
  %conv49 = zext i8 %26 to i32
  %or = or i32 %conv49, 2
  %conv50 = trunc i32 %or to i8
  store i8 %conv50, i8* %op_private48, align 1
  br label %if.end51

if.end51:                                         ; preds = %if.then47, %land.lhs.true40, %land.lhs.true33, %if.end
  %27 = load i32, i32* %type, align 4
  %cmp52 = icmp ne i32 %27, 265
  br i1 %cmp52, label %land.lhs.true54, label %if.end95

land.lhs.true54:                                  ; preds = %if.end51
  %28 = load i32, i32* %type, align 4
  %cmp55 = icmp ne i32 %28, 264
  br i1 %cmp55, label %land.lhs.true57, label %if.end95

land.lhs.true57:                                  ; preds = %land.lhs.true54
  %29 = load i16, i16* %kidtype, align 2
  %idxprom = zext i16 %29 to i64
  %arrayidx = getelementptr inbounds [0 x %struct.op* (%struct.op*)*], [0 x %struct.op* (%struct.op*)*]* @PL_check, i64 0, i64 %idxprom
  %30 = load %struct.op* (%struct.op*)*, %struct.op* (%struct.op*)** %arrayidx, align 8
  %cmp58 = icmp eq %struct.op* (%struct.op*)* %30, @Perl_ck_ftst
  br i1 %cmp58, label %land.lhs.true60, label %if.end95

land.lhs.true60:                                  ; preds = %land.lhs.true57
  %31 = load i16, i16* %kidtype, align 2
  %conv61 = zext i16 %31 to i32
  %cmp62 = icmp ne i32 %conv61, 265
  br i1 %cmp62, label %land.lhs.true64, label %if.end95

land.lhs.true64:                                  ; preds = %land.lhs.true60
  %32 = load i16, i16* %kidtype, align 2
  %conv65 = zext i16 %32 to i32
  %cmp66 = icmp ne i32 %conv65, 264
  br i1 %cmp66, label %if.then68, label %if.end95

if.then68:                                        ; preds = %land.lhs.true64
  %33 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_private69 = getelementptr inbounds %struct.op, %struct.op* %33, i32 0, i32 6
  %34 = load i8, i8* %op_private69, align 1
  %conv70 = zext i8 %34 to i32
  %or71 = or i32 %conv70, 4
  %conv72 = trunc i32 %or71 to i8
  store i8 %conv72, i8* %op_private69, align 1
  %35 = load %struct.svop*, %struct.svop** %kid, align 8
  %op_private73 = getelementptr inbounds %struct.svop, %struct.svop* %35, i32 0, i32 6
  %36 = load i8, i8* %op_private73, align 1
  %conv74 = zext i8 %36 to i32
  %or75 = or i32 %conv74, 8
  %conv76 = trunc i32 %or75 to i8
  store i8 %conv76, i8* %op_private73, align 1
  %37 = load i16, i16* %kidtype, align 2
  %conv77 = zext i16 %37 to i32
  %cmp78 = icmp eq i32 %conv77, 290
  br i1 %cmp78, label %land.lhs.true80, label %if.end94

land.lhs.true80:                                  ; preds = %if.then68
  %38 = load %struct.svop*, %struct.svop** %kid, align 8
  %op_private81 = getelementptr inbounds %struct.svop, %struct.svop* %38, i32 0, i32 6
  %39 = load i8, i8* %op_private81, align 1
  %conv82 = zext i8 %39 to i32
  %and83 = and i32 %conv82, 4
  %tobool84 = icmp ne i32 %and83, 0
  br i1 %tobool84, label %lor.lhs.false, label %if.then89

lor.lhs.false:                                    ; preds = %land.lhs.true80
  %40 = load %struct.svop*, %struct.svop** %kid, align 8
  %op_private85 = getelementptr inbounds %struct.svop, %struct.svop* %40, i32 0, i32 6
  %41 = load i8, i8* %op_private85, align 1
  %conv86 = zext i8 %41 to i32
  %and87 = and i32 %conv86, 16
  %tobool88 = icmp ne i32 %and87, 0
  br i1 %tobool88, label %if.then89, label %if.end94

if.then89:                                        ; preds = %lor.lhs.false, %land.lhs.true80
  %42 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_private90 = getelementptr inbounds %struct.op, %struct.op* %42, i32 0, i32 6
  %43 = load i8, i8* %op_private90, align 1
  %conv91 = zext i8 %43 to i32
  %or92 = or i32 %conv91, 16
  %conv93 = trunc i32 %or92 to i8
  store i8 %conv93, i8* %op_private90, align 1
  br label %if.end94

if.end94:                                         ; preds = %if.then89, %lor.lhs.false, %if.then68
  br label %if.end95

if.end95:                                         ; preds = %if.end94, %land.lhs.true64, %land.lhs.true60, %land.lhs.true57, %land.lhs.true54, %if.end51
  br label %if.end105

if.else96:                                        ; preds = %land.lhs.true, %if.else
  %44 = load %struct.op*, %struct.op** %o.addr, align 8
  call void @Perl_op_free(%struct.op* %44)
  %45 = load i32, i32* %type, align 4
  %cmp97 = icmp eq i32 %45, 290
  br i1 %cmp97, label %if.then99, label %if.else101

if.then99:                                        ; preds = %if.else96
  %46 = load i32, i32* %type, align 4
  %47 = load %struct.gv*, %struct.gv** @PL_stdingv, align 8
  %call100 = call %struct.op* @Perl_newGVOP(i32 %46, i32 16, %struct.gv* %47)
  store %struct.op* %call100, %struct.op** %o.addr, align 8
  br label %if.end104

if.else101:                                       ; preds = %if.else96
  %48 = load i32, i32* %type, align 4
  %call102 = call %struct.op* @Perl_newDEFSVOP()
  %call103 = call %struct.op* @Perl_newUNOP(i32 %48, i32 0, %struct.op* %call102)
  store %struct.op* %call103, %struct.op** %o.addr, align 8
  br label %if.end104

if.end104:                                        ; preds = %if.else101, %if.then99
  br label %if.end105

if.end105:                                        ; preds = %if.end104, %if.end95
  br label %if.end106

if.end106:                                        ; preds = %if.end105, %if.then
  %49 = load %struct.op*, %struct.op** %o.addr, align 8
  store %struct.op* %49, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %if.end106, %if.then29
  %50 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %50
}

; Function Attrs: noinline nounwind uwtable
define internal void @S_forget_pmop(%struct.pmop* %o) #0 {
entry:
  %o.addr = alloca %struct.pmop*, align 8
  %pmstash = alloca %struct.hv*, align 8
  %mg = alloca %struct.magic*, align 8
  %array = alloca %struct.pmop**, align 8
  %count = alloca i32, align 4
  %i = alloca i32, align 4
  store %struct.pmop* %o, %struct.pmop** %o.addr, align 8
  %0 = load %struct.pmop*, %struct.pmop** %o.addr, align 8
  %op_pmflags = getelementptr inbounds %struct.pmop, %struct.pmop* %0, i32 0, i32 10
  %1 = load i32, i32* %op_pmflags, align 8
  %and = and i32 %1, 1048576
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %2 = load %struct.pmop*, %struct.pmop** %o.addr, align 8
  %op_pmstashstartu = getelementptr inbounds %struct.pmop, %struct.pmop* %2, i32 0, i32 12
  %op_pmstash = bitcast %union.anon.19* %op_pmstashstartu to %struct.hv**
  %3 = load %struct.hv*, %struct.hv** %op_pmstash, align 8
  br label %cond.end

cond.false:                                       ; preds = %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.hv* [ %3, %cond.true ], [ null, %cond.false ]
  store %struct.hv* %cond, %struct.hv** %pmstash, align 8
  %4 = load %struct.hv*, %struct.hv** %pmstash, align 8
  %tobool1 = icmp ne %struct.hv* %4, null
  br i1 %tobool1, label %land.lhs.true, label %if.end27

land.lhs.true:                                    ; preds = %cond.end
  %5 = load %struct.hv*, %struct.hv** %pmstash, align 8
  %sv_flags = getelementptr inbounds %struct.hv, %struct.hv* %5, i32 0, i32 2
  %6 = load i32, i32* %sv_flags, align 4
  %cmp = icmp eq i32 %6, 255
  br i1 %cmp, label %cond.true2, label %cond.false3

cond.true2:                                       ; preds = %land.lhs.true
  br i1 true, label %if.end27, label %land.lhs.true4

cond.false3:                                      ; preds = %land.lhs.true
  br i1 false, label %if.end27, label %land.lhs.true4

land.lhs.true4:                                   ; preds = %cond.false3, %cond.true2
  %7 = load %struct.hv*, %struct.hv** %pmstash, align 8
  %sv_flags5 = getelementptr inbounds %struct.hv, %struct.hv* %7, i32 0, i32 2
  %8 = load i32, i32* %sv_flags5, align 4
  %and6 = and i32 %8, 14680064
  %tobool7 = icmp ne i32 %and6, 0
  br i1 %tobool7, label %if.then, label %if.end27

if.then:                                          ; preds = %land.lhs.true4
  %9 = load %struct.hv*, %struct.hv** %pmstash, align 8
  %10 = bitcast %struct.hv* %9 to %struct.sv*
  %call = call %struct.magic* @Perl_mg_find(%struct.sv* %10, i32 58)
  store %struct.magic* %call, %struct.magic** %mg, align 8
  %11 = load %struct.magic*, %struct.magic** %mg, align 8
  %tobool8 = icmp ne %struct.magic* %11, null
  br i1 %tobool8, label %if.then9, label %if.end26

if.then9:                                         ; preds = %if.then
  %12 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_ptr = getelementptr inbounds %struct.magic, %struct.magic* %12, i32 0, i32 7
  %13 = load i8*, i8** %mg_ptr, align 8
  %14 = bitcast i8* %13 to %struct.pmop**
  store %struct.pmop** %14, %struct.pmop*** %array, align 8
  %15 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_len = getelementptr inbounds %struct.magic, %struct.magic* %15, i32 0, i32 5
  %16 = load i64, i64* %mg_len, align 8
  %div = udiv i64 %16, 8
  %conv = trunc i64 %div to i32
  store i32 %conv, i32* %count, align 4
  %17 = load i32, i32* %count, align 4
  store i32 %17, i32* %i, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end25, %if.then9
  %18 = load i32, i32* %i, align 4
  %dec = add i32 %18, -1
  store i32 %dec, i32* %i, align 4
  %tobool10 = icmp ne i32 %18, 0
  br i1 %tobool10, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %19 = load %struct.pmop**, %struct.pmop*** %array, align 8
  %20 = load i32, i32* %i, align 4
  %idxprom = zext i32 %20 to i64
  %arrayidx = getelementptr inbounds %struct.pmop*, %struct.pmop** %19, i64 %idxprom
  %21 = load %struct.pmop*, %struct.pmop** %arrayidx, align 8
  %22 = load %struct.pmop*, %struct.pmop** %o.addr, align 8
  %cmp11 = icmp eq %struct.pmop* %21, %22
  br i1 %cmp11, label %if.then13, label %if.end25

if.then13:                                        ; preds = %while.body
  %23 = load %struct.pmop**, %struct.pmop*** %array, align 8
  %24 = load i32, i32* %count, align 4
  %dec14 = add i32 %24, -1
  store i32 %dec14, i32* %count, align 4
  %idxprom15 = zext i32 %dec14 to i64
  %arrayidx16 = getelementptr inbounds %struct.pmop*, %struct.pmop** %23, i64 %idxprom15
  %25 = load %struct.pmop*, %struct.pmop** %arrayidx16, align 8
  %26 = load %struct.pmop**, %struct.pmop*** %array, align 8
  %27 = load i32, i32* %i, align 4
  %idxprom17 = zext i32 %27 to i64
  %arrayidx18 = getelementptr inbounds %struct.pmop*, %struct.pmop** %26, i64 %idxprom17
  store %struct.pmop* %25, %struct.pmop** %arrayidx18, align 8
  %28 = load i32, i32* %count, align 4
  %conv19 = zext i32 %28 to i64
  %mul = mul i64 %conv19, 8
  %29 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_len20 = getelementptr inbounds %struct.magic, %struct.magic* %29, i32 0, i32 5
  store i64 %mul, i64* %mg_len20, align 8
  %30 = load i32, i32* %count, align 4
  %tobool21 = icmp ne i32 %30, 0
  br i1 %tobool21, label %if.end, label %if.then22

if.then22:                                        ; preds = %if.then13
  %31 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_ptr23 = getelementptr inbounds %struct.magic, %struct.magic* %31, i32 0, i32 7
  %32 = load i8*, i8** %mg_ptr23, align 8
  call void @Perl_safesysfree(i8* %32)
  %33 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_ptr24 = getelementptr inbounds %struct.magic, %struct.magic* %33, i32 0, i32 7
  store i8* null, i8** %mg_ptr24, align 8
  br label %if.end

if.end:                                           ; preds = %if.then22, %if.then13
  br label %while.end

if.end25:                                         ; preds = %while.body
  br label %while.cond

while.end:                                        ; preds = %if.end, %while.cond
  br label %if.end26

if.end26:                                         ; preds = %while.end, %if.then
  br label %if.end27

if.end27:                                         ; preds = %if.end26, %land.lhs.true4, %cond.false3, %cond.true2, %cond.end
  %34 = load %struct.pmop*, %struct.pmop** @PL_curpm, align 8
  %35 = load %struct.pmop*, %struct.pmop** %o.addr, align 8
  %cmp28 = icmp eq %struct.pmop* %34, %35
  br i1 %cmp28, label %if.then30, label %if.end31

if.then30:                                        ; preds = %if.end27
  store %struct.pmop* null, %struct.pmop** @PL_curpm, align 8
  br label %if.end31

if.end31:                                         ; preds = %if.then30, %if.end27
  ret void
}

declare dso_local void @Perl_pad_free(i64) #3

; Function Attrs: noinline nounwind uwtable
define dso_local void @Perl_op_null(%struct.op* %o) #0 {
entry:
  %o.addr = alloca %struct.op*, align 8
  store %struct.op* %o, %struct.op** %o.addr, align 8
  %0 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type = getelementptr inbounds %struct.op, %struct.op* %0, i32 0, i32 4
  %bf.load = load i16, i16* %op_type, align 8
  %bf.clear = and i16 %bf.load, 511
  %bf.cast = zext i16 %bf.clear to i32
  %cmp = icmp eq i32 %bf.cast, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %do.end

if.end:                                           ; preds = %entry
  %1 = load %struct.op*, %struct.op** %o.addr, align 8
  call void @Perl_op_clear(%struct.op* %1)
  %2 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type1 = getelementptr inbounds %struct.op, %struct.op* %2, i32 0, i32 4
  %bf.load2 = load i16, i16* %op_type1, align 8
  %bf.clear3 = and i16 %bf.load2, 511
  %bf.cast4 = zext i16 %bf.clear3 to i32
  %conv = zext i32 %bf.cast4 to i64
  %3 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_targ = getelementptr inbounds %struct.op, %struct.op* %3, i32 0, i32 3
  store i64 %conv, i64* %op_targ, align 8
  br label %do.body

do.body:                                          ; preds = %if.end
  %4 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type5 = getelementptr inbounds %struct.op, %struct.op* %4, i32 0, i32 4
  %bf.load6 = load i16, i16* %op_type5, align 8
  %bf.clear7 = and i16 %bf.load6, -512
  store i16 %bf.clear7, i16* %op_type5, align 8
  %5 = load %struct.op* ()*, %struct.op* ()** getelementptr inbounds ([0 x %struct.op* ()*], [0 x %struct.op* ()*]* @PL_ppaddr, i64 0, i64 0), align 8
  %6 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_ppaddr = getelementptr inbounds %struct.op, %struct.op* %6, i32 0, i32 2
  store %struct.op* ()* %5, %struct.op* ()** %op_ppaddr, align 8
  br label %do.end

do.end:                                           ; preds = %if.then, %do.body
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @Perl_op_refcnt_lock() #0 {
entry:
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @Perl_op_refcnt_unlock() #0 {
entry:
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_op_sibling_splice(%struct.op* %parent, %struct.op* %start, i32 %del_count, %struct.op* %insert) #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %parent.addr = alloca %struct.op*, align 8
  %start.addr = alloca %struct.op*, align 8
  %del_count.addr = alloca i32, align 4
  %insert.addr = alloca %struct.op*, align 8
  %first = alloca %struct.op*, align 8
  %rest = alloca %struct.op*, align 8
  %last_del = alloca %struct.op*, align 8
  %last_ins = alloca %struct.op*, align 8
  %type = alloca i32, align 4
  %lastop = alloca %struct.op*, align 8
  %coerce = alloca %union.XOPRETANY, align 8
  store %struct.op* %parent, %struct.op** %parent.addr, align 8
  store %struct.op* %start, %struct.op** %start.addr, align 8
  store i32 %del_count, i32* %del_count.addr, align 4
  store %struct.op* %insert, %struct.op** %insert.addr, align 8
  store %struct.op* null, %struct.op** %last_del, align 8
  store %struct.op* null, %struct.op** %last_ins, align 8
  %0 = load %struct.op*, %struct.op** %start.addr, align 8
  %tobool = icmp ne %struct.op* %0, null
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = load %struct.op*, %struct.op** %start.addr, align 8
  %op_sibling = getelementptr inbounds %struct.op, %struct.op* %1, i32 0, i32 1
  %2 = load %struct.op*, %struct.op** %op_sibling, align 8
  %add.ptr = getelementptr inbounds %struct.op, %struct.op* %2, i64 0
  store %struct.op* %add.ptr, %struct.op** %first, align 8
  br label %if.end4

if.else:                                          ; preds = %entry
  %3 = load %struct.op*, %struct.op** %parent.addr, align 8
  %tobool1 = icmp ne %struct.op* %3, null
  br i1 %tobool1, label %if.else3, label %if.then2

if.then2:                                         ; preds = %if.else
  br label %no_parent

if.else3:                                         ; preds = %if.else
  %4 = load %struct.op*, %struct.op** %parent.addr, align 8
  %5 = bitcast %struct.op* %4 to %struct.listop*
  %op_first = getelementptr inbounds %struct.listop, %struct.listop* %5, i32 0, i32 7
  %6 = load %struct.op*, %struct.op** %op_first, align 8
  store %struct.op* %6, %struct.op** %first, align 8
  br label %if.end

if.end:                                           ; preds = %if.else3
  br label %if.end4

if.end4:                                          ; preds = %if.end, %if.then
  %7 = load i32, i32* %del_count.addr, align 4
  %tobool5 = icmp ne i32 %7, 0
  br i1 %tobool5, label %land.lhs.true, label %if.else17

land.lhs.true:                                    ; preds = %if.end4
  %8 = load %struct.op*, %struct.op** %first, align 8
  %tobool6 = icmp ne %struct.op* %8, null
  br i1 %tobool6, label %if.then7, label %if.else17

if.then7:                                         ; preds = %land.lhs.true
  %9 = load %struct.op*, %struct.op** %first, align 8
  store %struct.op* %9, %struct.op** %last_del, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.then7
  %10 = load i32, i32* %del_count.addr, align 4
  %dec = add nsw i32 %10, -1
  store i32 %dec, i32* %del_count.addr, align 4
  %tobool8 = icmp ne i32 %dec, 0
  br i1 %tobool8, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %11 = load %struct.op*, %struct.op** %last_del, align 8
  %op_sibling9 = getelementptr inbounds %struct.op, %struct.op* %11, i32 0, i32 1
  %12 = load %struct.op*, %struct.op** %op_sibling9, align 8
  %tobool10 = icmp ne %struct.op* %12, null
  %13 = zext i1 %tobool10 to i64
  %cond = select i1 %tobool10, i32 1, i32 0
  %tobool11 = icmp ne i32 %cond, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %14 = phi i1 [ false, %while.cond ], [ %tobool11, %land.rhs ]
  br i1 %14, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %15 = load %struct.op*, %struct.op** %last_del, align 8
  %op_sibling12 = getelementptr inbounds %struct.op, %struct.op* %15, i32 0, i32 1
  %16 = load %struct.op*, %struct.op** %op_sibling12, align 8
  %add.ptr13 = getelementptr inbounds %struct.op, %struct.op* %16, i64 0
  store %struct.op* %add.ptr13, %struct.op** %last_del, align 8
  br label %while.cond

while.end:                                        ; preds = %land.end
  %17 = load %struct.op*, %struct.op** %last_del, align 8
  %op_sibling14 = getelementptr inbounds %struct.op, %struct.op* %17, i32 0, i32 1
  %18 = load %struct.op*, %struct.op** %op_sibling14, align 8
  %add.ptr15 = getelementptr inbounds %struct.op, %struct.op* %18, i64 0
  store %struct.op* %add.ptr15, %struct.op** %rest, align 8
  %19 = load %struct.op*, %struct.op** %last_del, align 8
  %op_moresib = getelementptr inbounds %struct.op, %struct.op* %19, i32 0, i32 4
  %bf.load = load i16, i16* %op_moresib, align 8
  %bf.clear = and i16 %bf.load, -16385
  store i16 %bf.clear, i16* %op_moresib, align 8
  %20 = load %struct.op*, %struct.op** %last_del, align 8
  %op_sibling16 = getelementptr inbounds %struct.op, %struct.op* %20, i32 0, i32 1
  store %struct.op* null, %struct.op** %op_sibling16, align 8
  br label %if.end18

if.else17:                                        ; preds = %land.lhs.true, %if.end4
  %21 = load %struct.op*, %struct.op** %first, align 8
  store %struct.op* %21, %struct.op** %rest, align 8
  br label %if.end18

if.end18:                                         ; preds = %if.else17, %while.end
  %22 = load %struct.op*, %struct.op** %insert.addr, align 8
  %tobool19 = icmp ne %struct.op* %22, null
  br i1 %tobool19, label %if.then20, label %if.else36

if.then20:                                        ; preds = %if.end18
  %23 = load %struct.op*, %struct.op** %insert.addr, align 8
  store %struct.op* %23, %struct.op** %last_ins, align 8
  br label %while.cond21

while.cond21:                                     ; preds = %while.body26, %if.then20
  %24 = load %struct.op*, %struct.op** %last_ins, align 8
  %op_sibling22 = getelementptr inbounds %struct.op, %struct.op* %24, i32 0, i32 1
  %25 = load %struct.op*, %struct.op** %op_sibling22, align 8
  %tobool23 = icmp ne %struct.op* %25, null
  %26 = zext i1 %tobool23 to i64
  %cond24 = select i1 %tobool23, i32 1, i32 0
  %tobool25 = icmp ne i32 %cond24, 0
  br i1 %tobool25, label %while.body26, label %while.end29

while.body26:                                     ; preds = %while.cond21
  %27 = load %struct.op*, %struct.op** %last_ins, align 8
  %op_sibling27 = getelementptr inbounds %struct.op, %struct.op* %27, i32 0, i32 1
  %28 = load %struct.op*, %struct.op** %op_sibling27, align 8
  %add.ptr28 = getelementptr inbounds %struct.op, %struct.op* %28, i64 0
  store %struct.op* %add.ptr28, %struct.op** %last_ins, align 8
  br label %while.cond21

while.end29:                                      ; preds = %while.cond21
  %29 = load %struct.op*, %struct.op** %rest, align 8
  %tobool30 = icmp ne %struct.op* %29, null
  %30 = zext i1 %tobool30 to i64
  %cond31 = select i1 %tobool30, i32 1, i32 0
  %31 = load %struct.op*, %struct.op** %last_ins, align 8
  %op_moresib32 = getelementptr inbounds %struct.op, %struct.op* %31, i32 0, i32 4
  %32 = trunc i32 %cond31 to i16
  %bf.load33 = load i16, i16* %op_moresib32, align 8
  %bf.value = and i16 %32, 1
  %bf.shl = shl i16 %bf.value, 14
  %bf.clear34 = and i16 %bf.load33, -16385
  %bf.set = or i16 %bf.clear34, %bf.shl
  store i16 %bf.set, i16* %op_moresib32, align 8
  %bf.result.cast = zext i16 %bf.value to i32
  %33 = load %struct.op*, %struct.op** %rest, align 8
  %34 = load %struct.op*, %struct.op** %last_ins, align 8
  %op_sibling35 = getelementptr inbounds %struct.op, %struct.op* %34, i32 0, i32 1
  store %struct.op* %33, %struct.op** %op_sibling35, align 8
  br label %if.end37

if.else36:                                        ; preds = %if.end18
  %35 = load %struct.op*, %struct.op** %rest, align 8
  store %struct.op* %35, %struct.op** %insert.addr, align 8
  br label %if.end37

if.end37:                                         ; preds = %if.else36, %while.end29
  %36 = load %struct.op*, %struct.op** %start.addr, align 8
  %tobool38 = icmp ne %struct.op* %36, null
  br i1 %tobool38, label %if.then39, label %if.else50

if.then39:                                        ; preds = %if.end37
  %37 = load %struct.op*, %struct.op** %insert.addr, align 8
  %tobool40 = icmp ne %struct.op* %37, null
  %38 = zext i1 %tobool40 to i64
  %cond41 = select i1 %tobool40, i32 1, i32 0
  %39 = load %struct.op*, %struct.op** %start.addr, align 8
  %op_moresib42 = getelementptr inbounds %struct.op, %struct.op* %39, i32 0, i32 4
  %40 = trunc i32 %cond41 to i16
  %bf.load43 = load i16, i16* %op_moresib42, align 8
  %bf.value44 = and i16 %40, 1
  %bf.shl45 = shl i16 %bf.value44, 14
  %bf.clear46 = and i16 %bf.load43, -16385
  %bf.set47 = or i16 %bf.clear46, %bf.shl45
  store i16 %bf.set47, i16* %op_moresib42, align 8
  %bf.result.cast48 = zext i16 %bf.value44 to i32
  %41 = load %struct.op*, %struct.op** %insert.addr, align 8
  %42 = load %struct.op*, %struct.op** %start.addr, align 8
  %op_sibling49 = getelementptr inbounds %struct.op, %struct.op* %42, i32 0, i32 1
  store %struct.op* %41, %struct.op** %op_sibling49, align 8
  br label %if.end63

if.else50:                                        ; preds = %if.end37
  %43 = load %struct.op*, %struct.op** %parent.addr, align 8
  %tobool51 = icmp ne %struct.op* %43, null
  br i1 %tobool51, label %if.end53, label %if.then52

if.then52:                                        ; preds = %if.else50
  br label %no_parent

if.end53:                                         ; preds = %if.else50
  %44 = load %struct.op*, %struct.op** %insert.addr, align 8
  %45 = load %struct.op*, %struct.op** %parent.addr, align 8
  %46 = bitcast %struct.op* %45 to %struct.listop*
  %op_first54 = getelementptr inbounds %struct.listop, %struct.listop* %46, i32 0, i32 7
  store %struct.op* %44, %struct.op** %op_first54, align 8
  %47 = load %struct.op*, %struct.op** %insert.addr, align 8
  %tobool55 = icmp ne %struct.op* %47, null
  br i1 %tobool55, label %if.then56, label %if.else58

if.then56:                                        ; preds = %if.end53
  %48 = load %struct.op*, %struct.op** %parent.addr, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %48, i32 0, i32 5
  %49 = load i8, i8* %op_flags, align 2
  %conv = zext i8 %49 to i32
  %or = or i32 %conv, 4
  %conv57 = trunc i32 %or to i8
  store i8 %conv57, i8* %op_flags, align 2
  br label %if.end62

if.else58:                                        ; preds = %if.end53
  %50 = load %struct.op*, %struct.op** %parent.addr, align 8
  %op_flags59 = getelementptr inbounds %struct.op, %struct.op* %50, i32 0, i32 5
  %51 = load i8, i8* %op_flags59, align 2
  %conv60 = zext i8 %51 to i32
  %and = and i32 %conv60, -5
  %conv61 = trunc i32 %and to i8
  store i8 %conv61, i8* %op_flags59, align 2
  br label %if.end62

if.end62:                                         ; preds = %if.else58, %if.then56
  br label %if.end63

if.end63:                                         ; preds = %if.end62, %if.then39
  %52 = load %struct.op*, %struct.op** %rest, align 8
  %tobool64 = icmp ne %struct.op* %52, null
  br i1 %tobool64, label %if.end107, label %if.then65

if.then65:                                        ; preds = %if.end63
  %53 = load %struct.op*, %struct.op** %parent.addr, align 8
  %tobool66 = icmp ne %struct.op* %53, null
  br i1 %tobool66, label %if.end68, label %if.then67

if.then67:                                        ; preds = %if.then65
  br label %no_parent

if.end68:                                         ; preds = %if.then65
  %54 = load %struct.op*, %struct.op** %parent.addr, align 8
  %op_type = getelementptr inbounds %struct.op, %struct.op* %54, i32 0, i32 4
  %bf.load69 = load i16, i16* %op_type, align 8
  %bf.clear70 = and i16 %bf.load69, 511
  %bf.cast = zext i16 %bf.clear70 to i32
  store i32 %bf.cast, i32* %type, align 4
  %55 = load i32, i32* %type, align 4
  %cmp = icmp eq i32 %55, 380
  br i1 %cmp, label %if.then72, label %if.else73

if.then72:                                        ; preds = %if.end68
  %56 = load %struct.op*, %struct.op** %parent.addr, align 8
  %call = call i8* @Perl_custom_op_get_field(%struct.op* %56, i32 4)
  %coerce.dive = getelementptr inbounds %union.XOPRETANY, %union.XOPRETANY* %coerce, i32 0, i32 0
  store i8* %call, i8** %coerce.dive, align 8
  %xop_class = bitcast %union.XOPRETANY* %coerce to i32*
  %57 = load i32, i32* %xop_class, align 8
  store i32 %57, i32* %type, align 4
  br label %if.end80

if.else73:                                        ; preds = %if.end68
  %58 = load i32, i32* %type, align 4
  %cmp74 = icmp eq i32 %58, 0
  br i1 %cmp74, label %if.then76, label %if.end78

if.then76:                                        ; preds = %if.else73
  %59 = load %struct.op*, %struct.op** %parent.addr, align 8
  %op_targ = getelementptr inbounds %struct.op, %struct.op* %59, i32 0, i32 3
  %60 = load i64, i64* %op_targ, align 8
  %conv77 = trunc i64 %60 to i32
  store i32 %conv77, i32* %type, align 4
  br label %if.end78

if.end78:                                         ; preds = %if.then76, %if.else73
  %61 = load i32, i32* %type, align 4
  %idxprom = zext i32 %61 to i64
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @PL_opargs, i64 0, i64 %idxprom
  %62 = load i32, i32* %arrayidx, align 4
  %and79 = and i32 %62, 3840
  store i32 %and79, i32* %type, align 4
  br label %if.end80

if.end80:                                         ; preds = %if.end78, %if.then72
  %63 = load %struct.op*, %struct.op** %last_ins, align 8
  %tobool81 = icmp ne %struct.op* %63, null
  br i1 %tobool81, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end80
  %64 = load %struct.op*, %struct.op** %last_ins, align 8
  br label %cond.end86

cond.false:                                       ; preds = %if.end80
  %65 = load %struct.op*, %struct.op** %start.addr, align 8
  %tobool82 = icmp ne %struct.op* %65, null
  br i1 %tobool82, label %cond.true83, label %cond.false84

cond.true83:                                      ; preds = %cond.false
  %66 = load %struct.op*, %struct.op** %start.addr, align 8
  br label %cond.end

cond.false84:                                     ; preds = %cond.false
  br label %cond.end

cond.end:                                         ; preds = %cond.false84, %cond.true83
  %cond85 = phi %struct.op* [ %66, %cond.true83 ], [ null, %cond.false84 ]
  br label %cond.end86

cond.end86:                                       ; preds = %cond.end, %cond.true
  %cond87 = phi %struct.op* [ %64, %cond.true ], [ %cond85, %cond.end ]
  store %struct.op* %cond87, %struct.op** %lastop, align 8
  %67 = load i32, i32* %type, align 4
  %cmp88 = icmp eq i32 %67, 512
  br i1 %cmp88, label %if.then98, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %cond.end86
  %68 = load i32, i32* %type, align 4
  %cmp90 = icmp eq i32 %68, 1024
  br i1 %cmp90, label %if.then98, label %lor.lhs.false92

lor.lhs.false92:                                  ; preds = %lor.lhs.false
  %69 = load i32, i32* %type, align 4
  %cmp93 = icmp eq i32 %69, 1280
  br i1 %cmp93, label %if.then98, label %lor.lhs.false95

lor.lhs.false95:                                  ; preds = %lor.lhs.false92
  %70 = load i32, i32* %type, align 4
  %cmp96 = icmp eq i32 %70, 2304
  br i1 %cmp96, label %if.then98, label %if.end99

if.then98:                                        ; preds = %lor.lhs.false95, %lor.lhs.false92, %lor.lhs.false, %cond.end86
  %71 = load %struct.op*, %struct.op** %lastop, align 8
  %72 = load %struct.op*, %struct.op** %parent.addr, align 8
  %73 = bitcast %struct.op* %72 to %struct.listop*
  %op_last = getelementptr inbounds %struct.listop, %struct.listop* %73, i32 0, i32 8
  store %struct.op* %71, %struct.op** %op_last, align 8
  br label %if.end99

if.end99:                                         ; preds = %if.then98, %lor.lhs.false95
  %74 = load %struct.op*, %struct.op** %lastop, align 8
  %tobool100 = icmp ne %struct.op* %74, null
  br i1 %tobool100, label %if.then101, label %if.end106

if.then101:                                       ; preds = %if.end99
  %75 = load %struct.op*, %struct.op** %lastop, align 8
  %op_moresib102 = getelementptr inbounds %struct.op, %struct.op* %75, i32 0, i32 4
  %bf.load103 = load i16, i16* %op_moresib102, align 8
  %bf.clear104 = and i16 %bf.load103, -16385
  store i16 %bf.clear104, i16* %op_moresib102, align 8
  %76 = load %struct.op*, %struct.op** %lastop, align 8
  %op_sibling105 = getelementptr inbounds %struct.op, %struct.op* %76, i32 0, i32 1
  store %struct.op* null, %struct.op** %op_sibling105, align 8
  br label %if.end106

if.end106:                                        ; preds = %if.then101, %if.end99
  br label %if.end107

if.end107:                                        ; preds = %if.end106, %if.end63
  %77 = load %struct.op*, %struct.op** %last_del, align 8
  %tobool108 = icmp ne %struct.op* %77, null
  br i1 %tobool108, label %cond.true109, label %cond.false110

cond.true109:                                     ; preds = %if.end107
  %78 = load %struct.op*, %struct.op** %first, align 8
  br label %cond.end111

cond.false110:                                    ; preds = %if.end107
  br label %cond.end111

cond.end111:                                      ; preds = %cond.false110, %cond.true109
  %cond112 = phi %struct.op* [ %78, %cond.true109 ], [ null, %cond.false110 ]
  store %struct.op* %cond112, %struct.op** %retval, align 8
  br label %return

no_parent:                                        ; preds = %if.then67, %if.then52, %if.then2
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.8, i64 0, i64 0))
  store %struct.op* null, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %no_parent, %cond.end111
  %79 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %79
}

; Function Attrs: noinline nounwind uwtable
define dso_local i8* @Perl_custom_op_get_field(%struct.op* %o, i32 %field) #0 {
entry:
  %retval = alloca %union.XOPRETANY, align 8
  %o.addr = alloca %struct.op*, align 8
  %field.addr = alloca i32, align 4
  %keysv = alloca %struct.sv*, align 8
  %he = alloca %struct.he*, align 8
  %xop = alloca %struct.custom_op*, align 8
  %pv = alloca i8*, align 8
  %l = alloca i64, align 8
  %flags = alloca i32, align 4
  store %struct.op* %o, %struct.op** %o.addr, align 8
  store i32 %field, i32* %field.addr, align 4
  store %struct.he* null, %struct.he** %he, align 8
  %0 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_ppaddr = getelementptr inbounds %struct.op, %struct.op* %0, i32 0, i32 2
  %1 = load %struct.op* ()*, %struct.op* ()** %op_ppaddr, align 8
  %2 = ptrtoint %struct.op* ()* %1 to i64
  %call = call %struct.sv* @Perl_newSViv(i64 %2)
  %call1 = call %struct.sv* @Perl_sv_2mortal(%struct.sv* %call)
  store %struct.sv* %call1, %struct.sv** %keysv, align 8
  %3 = load %struct.hv*, %struct.hv** @PL_custom_ops, align 8
  %tobool = icmp ne %struct.hv* %3, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %4 = load %struct.hv*, %struct.hv** @PL_custom_ops, align 8
  %5 = load %struct.sv*, %struct.sv** %keysv, align 8
  %call2 = call i8* @Perl_hv_common(%struct.hv* %4, %struct.sv* %5, i8* null, i64 0, i32 0, i32 0, %struct.sv* null, i32 0)
  %6 = bitcast i8* %call2 to %struct.he*
  store %struct.he* %6, %struct.he** %he, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %7 = load %struct.he*, %struct.he** %he, align 8
  %tobool3 = icmp ne %struct.he* %7, null
  br i1 %tobool3, label %if.else, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.end
  %8 = load %struct.hv*, %struct.hv** @PL_custom_op_names, align 8
  %tobool4 = icmp ne %struct.hv* %8, null
  br i1 %tobool4, label %land.lhs.true5, label %if.else

land.lhs.true5:                                   ; preds = %land.lhs.true
  %9 = load %struct.hv*, %struct.hv** @PL_custom_op_names, align 8
  %10 = load %struct.sv*, %struct.sv** %keysv, align 8
  %call6 = call i8* @Perl_hv_common(%struct.hv* %9, %struct.sv* %10, i8* null, i64 0, i32 0, i32 0, %struct.sv* null, i32 0)
  %11 = bitcast i8* %call6 to %struct.he*
  store %struct.he* %11, %struct.he** %he, align 8
  %tobool7 = icmp ne %struct.he* %11, null
  br i1 %tobool7, label %if.then8, label %if.else

if.then8:                                         ; preds = %land.lhs.true5
  %call9 = call i8* @Perl_safesyscalloc(i64 1, i64 40)
  %12 = bitcast i8* %call9 to %struct.custom_op*
  store %struct.custom_op* %12, %struct.custom_op** %xop, align 8
  %13 = load %struct.he*, %struct.he** %he, align 8
  %he_valu = getelementptr inbounds %struct.he, %struct.he* %13, i32 0, i32 2
  %hent_val = bitcast %union.anon.0* %he_valu to %struct.sv**
  %14 = load %struct.sv*, %struct.sv** %hent_val, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %14, i32 0, i32 2
  %15 = load i32, i32* %sv_flags, align 4
  %and = and i32 %15, 2098176
  %cmp = icmp eq i32 %and, 1024
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then8
  %16 = load %struct.he*, %struct.he** %he, align 8
  %he_valu10 = getelementptr inbounds %struct.he, %struct.he* %16, i32 0, i32 2
  %hent_val11 = bitcast %union.anon.0* %he_valu10 to %struct.sv**
  %17 = load %struct.sv*, %struct.sv** %hent_val11, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %17, i32 0, i32 0
  %18 = load i8*, i8** %sv_any, align 8
  %19 = bitcast i8* %18 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %19, i32 0, i32 2
  %20 = load i64, i64* %xpv_cur, align 8
  store i64 %20, i64* %l, align 8
  %21 = load %struct.he*, %struct.he** %he, align 8
  %he_valu12 = getelementptr inbounds %struct.he, %struct.he* %21, i32 0, i32 2
  %hent_val13 = bitcast %union.anon.0* %he_valu12 to %struct.sv**
  %22 = load %struct.sv*, %struct.sv** %hent_val13, align 8
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %22, i32 0, i32 3
  %svu_pv = bitcast %union.anon* %sv_u to i8**
  %23 = load i8*, i8** %svu_pv, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.then8
  %24 = load %struct.he*, %struct.he** %he, align 8
  %he_valu14 = getelementptr inbounds %struct.he, %struct.he* %24, i32 0, i32 2
  %hent_val15 = bitcast %union.anon.0* %he_valu14 to %struct.sv**
  %25 = load %struct.sv*, %struct.sv** %hent_val15, align 8
  %call16 = call i8* @Perl_sv_2pv_flags(%struct.sv* %25, i64* %l, i32 2)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %23, %cond.true ], [ %call16, %cond.false ]
  store i8* %cond, i8** %pv, align 8
  br label %do.body

do.body:                                          ; preds = %cond.end
  %26 = load i8*, i8** %pv, align 8
  %27 = load i64, i64* %l, align 8
  %conv = trunc i64 %27 to i32
  %call17 = call i8* @Perl_savepvn(i8* %26, i32 %conv)
  %28 = load %struct.custom_op*, %struct.custom_op** %xop, align 8
  %xop_name = getelementptr inbounds %struct.custom_op, %struct.custom_op* %28, i32 0, i32 1
  store i8* %call17, i8** %xop_name, align 8
  %29 = load %struct.custom_op*, %struct.custom_op** %xop, align 8
  %xop_flags = getelementptr inbounds %struct.custom_op, %struct.custom_op* %29, i32 0, i32 0
  %30 = load i32, i32* %xop_flags, align 8
  %or = or i32 %30, 1
  store i32 %or, i32* %xop_flags, align 8
  br label %do.end

do.end:                                           ; preds = %do.body
  %31 = load %struct.hv*, %struct.hv** @PL_custom_op_descs, align 8
  %tobool18 = icmp ne %struct.hv* %31, null
  br i1 %tobool18, label %land.lhs.true19, label %if.end50

land.lhs.true19:                                  ; preds = %do.end
  %32 = load %struct.hv*, %struct.hv** @PL_custom_op_descs, align 8
  %33 = load %struct.sv*, %struct.sv** %keysv, align 8
  %call20 = call i8* @Perl_hv_common(%struct.hv* %32, %struct.sv* %33, i8* null, i64 0, i32 0, i32 0, %struct.sv* null, i32 0)
  %34 = bitcast i8* %call20 to %struct.he*
  store %struct.he* %34, %struct.he** %he, align 8
  %tobool21 = icmp ne %struct.he* %34, null
  br i1 %tobool21, label %if.then22, label %if.end50

if.then22:                                        ; preds = %land.lhs.true19
  %35 = load %struct.he*, %struct.he** %he, align 8
  %he_valu23 = getelementptr inbounds %struct.he, %struct.he* %35, i32 0, i32 2
  %hent_val24 = bitcast %union.anon.0* %he_valu23 to %struct.sv**
  %36 = load %struct.sv*, %struct.sv** %hent_val24, align 8
  %sv_flags25 = getelementptr inbounds %struct.sv, %struct.sv* %36, i32 0, i32 2
  %37 = load i32, i32* %sv_flags25, align 4
  %and26 = and i32 %37, 2098176
  %cmp27 = icmp eq i32 %and26, 1024
  br i1 %cmp27, label %cond.true29, label %cond.false38

cond.true29:                                      ; preds = %if.then22
  %38 = load %struct.he*, %struct.he** %he, align 8
  %he_valu30 = getelementptr inbounds %struct.he, %struct.he* %38, i32 0, i32 2
  %hent_val31 = bitcast %union.anon.0* %he_valu30 to %struct.sv**
  %39 = load %struct.sv*, %struct.sv** %hent_val31, align 8
  %sv_any32 = getelementptr inbounds %struct.sv, %struct.sv* %39, i32 0, i32 0
  %40 = load i8*, i8** %sv_any32, align 8
  %41 = bitcast i8* %40 to %struct.xpv*
  %xpv_cur33 = getelementptr inbounds %struct.xpv, %struct.xpv* %41, i32 0, i32 2
  %42 = load i64, i64* %xpv_cur33, align 8
  store i64 %42, i64* %l, align 8
  %43 = load %struct.he*, %struct.he** %he, align 8
  %he_valu34 = getelementptr inbounds %struct.he, %struct.he* %43, i32 0, i32 2
  %hent_val35 = bitcast %union.anon.0* %he_valu34 to %struct.sv**
  %44 = load %struct.sv*, %struct.sv** %hent_val35, align 8
  %sv_u36 = getelementptr inbounds %struct.sv, %struct.sv* %44, i32 0, i32 3
  %svu_pv37 = bitcast %union.anon* %sv_u36 to i8**
  %45 = load i8*, i8** %svu_pv37, align 8
  br label %cond.end42

cond.false38:                                     ; preds = %if.then22
  %46 = load %struct.he*, %struct.he** %he, align 8
  %he_valu39 = getelementptr inbounds %struct.he, %struct.he* %46, i32 0, i32 2
  %hent_val40 = bitcast %union.anon.0* %he_valu39 to %struct.sv**
  %47 = load %struct.sv*, %struct.sv** %hent_val40, align 8
  %call41 = call i8* @Perl_sv_2pv_flags(%struct.sv* %47, i64* %l, i32 2)
  br label %cond.end42

cond.end42:                                       ; preds = %cond.false38, %cond.true29
  %cond43 = phi i8* [ %45, %cond.true29 ], [ %call41, %cond.false38 ]
  store i8* %cond43, i8** %pv, align 8
  br label %do.body44

do.body44:                                        ; preds = %cond.end42
  %48 = load i8*, i8** %pv, align 8
  %49 = load i64, i64* %l, align 8
  %conv45 = trunc i64 %49 to i32
  %call46 = call i8* @Perl_savepvn(i8* %48, i32 %conv45)
  %50 = load %struct.custom_op*, %struct.custom_op** %xop, align 8
  %xop_desc = getelementptr inbounds %struct.custom_op, %struct.custom_op* %50, i32 0, i32 2
  store i8* %call46, i8** %xop_desc, align 8
  %51 = load %struct.custom_op*, %struct.custom_op** %xop, align 8
  %xop_flags47 = getelementptr inbounds %struct.custom_op, %struct.custom_op* %51, i32 0, i32 0
  %52 = load i32, i32* %xop_flags47, align 8
  %or48 = or i32 %52, 2
  store i32 %or48, i32* %xop_flags47, align 8
  br label %do.end49

do.end49:                                         ; preds = %do.body44
  br label %if.end50

if.end50:                                         ; preds = %do.end49, %land.lhs.true19, %do.end
  %53 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_ppaddr51 = getelementptr inbounds %struct.op, %struct.op* %53, i32 0, i32 2
  %54 = load %struct.op* ()*, %struct.op* ()** %op_ppaddr51, align 8
  %55 = load %struct.custom_op*, %struct.custom_op** %xop, align 8
  call void @Perl_custom_op_register(%struct.op* ()* %54, %struct.custom_op* %55)
  br label %if.end72

if.else:                                          ; preds = %land.lhs.true5, %land.lhs.true, %if.end
  %56 = load %struct.he*, %struct.he** %he, align 8
  %tobool52 = icmp ne %struct.he* %56, null
  br i1 %tobool52, label %if.else54, label %if.then53

if.then53:                                        ; preds = %if.else
  store %struct.custom_op* @Perl_custom_op_get_field.xop_null, %struct.custom_op** %xop, align 8
  br label %if.end71

if.else54:                                        ; preds = %if.else
  %57 = load %struct.he*, %struct.he** %he, align 8
  %he_valu55 = getelementptr inbounds %struct.he, %struct.he* %57, i32 0, i32 2
  %hent_val56 = bitcast %union.anon.0* %he_valu55 to %struct.sv**
  %58 = load %struct.sv*, %struct.sv** %hent_val56, align 8
  %sv_flags57 = getelementptr inbounds %struct.sv, %struct.sv* %58, i32 0, i32 2
  %59 = load i32, i32* %sv_flags57, align 4
  %and58 = and i32 %59, 2097408
  %cmp59 = icmp eq i32 %and58, 256
  br i1 %cmp59, label %cond.true61, label %cond.false65

cond.true61:                                      ; preds = %if.else54
  %60 = load %struct.he*, %struct.he** %he, align 8
  %he_valu62 = getelementptr inbounds %struct.he, %struct.he* %60, i32 0, i32 2
  %hent_val63 = bitcast %union.anon.0* %he_valu62 to %struct.sv**
  %61 = load %struct.sv*, %struct.sv** %hent_val63, align 8
  %sv_any64 = getelementptr inbounds %struct.sv, %struct.sv* %61, i32 0, i32 0
  %62 = load i8*, i8** %sv_any64, align 8
  %63 = bitcast i8* %62 to %struct.xpviv*
  %xiv_u = getelementptr inbounds %struct.xpviv, %struct.xpviv* %63, i32 0, i32 4
  %xivu_iv = bitcast %union._xivu* %xiv_u to i64*
  %64 = load i64, i64* %xivu_iv, align 8
  br label %cond.end69

cond.false65:                                     ; preds = %if.else54
  %65 = load %struct.he*, %struct.he** %he, align 8
  %he_valu66 = getelementptr inbounds %struct.he, %struct.he* %65, i32 0, i32 2
  %hent_val67 = bitcast %union.anon.0* %he_valu66 to %struct.sv**
  %66 = load %struct.sv*, %struct.sv** %hent_val67, align 8
  %call68 = call i64 @Perl_sv_2iv_flags(%struct.sv* %66, i32 2)
  br label %cond.end69

cond.end69:                                       ; preds = %cond.false65, %cond.true61
  %cond70 = phi i64 [ %64, %cond.true61 ], [ %call68, %cond.false65 ]
  %67 = inttoptr i64 %cond70 to %struct.custom_op*
  store %struct.custom_op* %67, %struct.custom_op** %xop, align 8
  br label %if.end71

if.end71:                                         ; preds = %cond.end69, %if.then53
  br label %if.end72

if.end72:                                         ; preds = %if.end71, %if.end50
  %68 = load i32, i32* %field.addr, align 4
  %cmp73 = icmp eq i32 %68, 0
  br i1 %cmp73, label %if.then75, label %if.else76

if.then75:                                        ; preds = %if.end72
  %69 = load %struct.custom_op*, %struct.custom_op** %xop, align 8
  %xop_ptr = bitcast %union.XOPRETANY* %retval to %struct.custom_op**
  store %struct.custom_op* %69, %struct.custom_op** %xop_ptr, align 8
  br label %if.end102

if.else76:                                        ; preds = %if.end72
  %70 = load %struct.custom_op*, %struct.custom_op** %xop, align 8
  %xop_flags77 = getelementptr inbounds %struct.custom_op, %struct.custom_op* %70, i32 0, i32 0
  %71 = load i32, i32* %xop_flags77, align 8
  store i32 %71, i32* %flags, align 4
  %72 = load i32, i32* %flags, align 4
  %73 = load i32, i32* %field.addr, align 4
  %and78 = and i32 %72, %73
  %tobool79 = icmp ne i32 %and78, 0
  br i1 %tobool79, label %if.then80, label %if.else90

if.then80:                                        ; preds = %if.else76
  %74 = load i32, i32* %field.addr, align 4
  switch i32 %74, label %sw.default [
    i32 1, label %sw.bb
    i32 2, label %sw.bb83
    i32 4, label %sw.bb86
    i32 8, label %sw.bb88
  ]

sw.bb:                                            ; preds = %if.then80
  %75 = load %struct.custom_op*, %struct.custom_op** %xop, align 8
  %xop_name81 = getelementptr inbounds %struct.custom_op, %struct.custom_op* %75, i32 0, i32 1
  %76 = load i8*, i8** %xop_name81, align 8
  %xop_name82 = bitcast %union.XOPRETANY* %retval to i8**
  store i8* %76, i8** %xop_name82, align 8
  br label %sw.epilog

sw.bb83:                                          ; preds = %if.then80
  %77 = load %struct.custom_op*, %struct.custom_op** %xop, align 8
  %xop_desc84 = getelementptr inbounds %struct.custom_op, %struct.custom_op* %77, i32 0, i32 2
  %78 = load i8*, i8** %xop_desc84, align 8
  %xop_desc85 = bitcast %union.XOPRETANY* %retval to i8**
  store i8* %78, i8** %xop_desc85, align 8
  br label %sw.epilog

sw.bb86:                                          ; preds = %if.then80
  %79 = load %struct.custom_op*, %struct.custom_op** %xop, align 8
  %xop_class = getelementptr inbounds %struct.custom_op, %struct.custom_op* %79, i32 0, i32 3
  %80 = load i32, i32* %xop_class, align 8
  %xop_class87 = bitcast %union.XOPRETANY* %retval to i32*
  store i32 %80, i32* %xop_class87, align 8
  br label %sw.epilog

sw.bb88:                                          ; preds = %if.then80
  %81 = load %struct.custom_op*, %struct.custom_op** %xop, align 8
  %xop_peep = getelementptr inbounds %struct.custom_op, %struct.custom_op* %81, i32 0, i32 4
  %82 = load void (%struct.op*, %struct.op*)*, void (%struct.op*, %struct.op*)** %xop_peep, align 8
  %xop_peep89 = bitcast %union.XOPRETANY* %retval to void (%struct.op*, %struct.op*)**
  store void (%struct.op*, %struct.op*)* %82, void (%struct.op*, %struct.op*)** %xop_peep89, align 8
  br label %sw.epilog

sw.default:                                       ; preds = %if.then80
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %sw.bb88, %sw.bb86, %sw.bb83, %sw.bb
  br label %if.end101

if.else90:                                        ; preds = %if.else76
  %83 = load i32, i32* %field.addr, align 4
  switch i32 %83, label %sw.default99 [
    i32 1, label %sw.bb91
    i32 2, label %sw.bb93
    i32 4, label %sw.bb95
    i32 8, label %sw.bb97
  ]

sw.bb91:                                          ; preds = %if.else90
  %84 = load i8*, i8** getelementptr inbounds ([0 x i8*], [0 x i8*]* @PL_op_name, i64 0, i64 380), align 8
  %xop_name92 = bitcast %union.XOPRETANY* %retval to i8**
  store i8* %84, i8** %xop_name92, align 8
  br label %sw.epilog100

sw.bb93:                                          ; preds = %if.else90
  %85 = load i8*, i8** getelementptr inbounds ([0 x i8*], [0 x i8*]* @PL_op_desc, i64 0, i64 380), align 8
  %xop_desc94 = bitcast %union.XOPRETANY* %retval to i8**
  store i8* %85, i8** %xop_desc94, align 8
  br label %sw.epilog100

sw.bb95:                                          ; preds = %if.else90
  %xop_class96 = bitcast %union.XOPRETANY* %retval to i32*
  store i32 0, i32* %xop_class96, align 8
  br label %sw.epilog100

sw.bb97:                                          ; preds = %if.else90
  %xop_peep98 = bitcast %union.XOPRETANY* %retval to void (%struct.op*, %struct.op*)**
  store void (%struct.op*, %struct.op*)* null, void (%struct.op*, %struct.op*)** %xop_peep98, align 8
  br label %sw.epilog100

sw.default99:                                     ; preds = %if.else90
  br label %sw.epilog100

sw.epilog100:                                     ; preds = %sw.default99, %sw.bb97, %sw.bb95, %sw.bb93, %sw.bb91
  br label %if.end101

if.end101:                                        ; preds = %sw.epilog100, %sw.epilog
  br label %if.end102

if.end102:                                        ; preds = %if.end101, %if.then75
  %coerce.dive = getelementptr inbounds %union.XOPRETANY, %union.XOPRETANY* %retval, i32 0, i32 0
  %86 = load i8*, i8** %coerce.dive, align 8
  ret i8* %86
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @S_op_sibling_newUNOP(%struct.op* %parent, %struct.op* %start, i32 %type, i32 %flags) #0 {
entry:
  %parent.addr = alloca %struct.op*, align 8
  %start.addr = alloca %struct.op*, align 8
  %type.addr = alloca i32, align 4
  %flags.addr = alloca i32, align 4
  %kid = alloca %struct.op*, align 8
  %newop = alloca %struct.op*, align 8
  store %struct.op* %parent, %struct.op** %parent.addr, align 8
  store %struct.op* %start, %struct.op** %start.addr, align 8
  store i32 %type, i32* %type.addr, align 4
  store i32 %flags, i32* %flags.addr, align 4
  %0 = load %struct.op*, %struct.op** %parent.addr, align 8
  %1 = load %struct.op*, %struct.op** %start.addr, align 8
  %call = call %struct.op* @Perl_op_sibling_splice(%struct.op* %0, %struct.op* %1, i32 1, %struct.op* null)
  store %struct.op* %call, %struct.op** %kid, align 8
  %2 = load i32, i32* %type.addr, align 4
  %3 = load i32, i32* %flags.addr, align 4
  %4 = load %struct.op*, %struct.op** %kid, align 8
  %call1 = call %struct.op* @Perl_newUNOP(i32 %2, i32 %3, %struct.op* %4)
  store %struct.op* %call1, %struct.op** %newop, align 8
  %5 = load %struct.op*, %struct.op** %parent.addr, align 8
  %6 = load %struct.op*, %struct.op** %start.addr, align 8
  %7 = load %struct.op*, %struct.op** %newop, align 8
  %call2 = call %struct.op* @Perl_op_sibling_splice(%struct.op* %5, %struct.op* %6, i32 0, %struct.op* %7)
  %8 = load %struct.op*, %struct.op** %newop, align 8
  ret %struct.op* %8
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_newUNOP(i32 %type, i32 %flags, %struct.op* %first) #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %type.addr = alloca i32, align 4
  %flags.addr = alloca i32, align 4
  %first.addr = alloca %struct.op*, align 8
  %unop = alloca %struct.unop*, align 8
  store i32 %type, i32* %type.addr, align 4
  store i32 %flags, i32* %flags.addr, align 4
  store %struct.op* %first, %struct.op** %first.addr, align 8
  %0 = load i32, i32* %type.addr, align 4
  %cmp = icmp eq i32 %0, -342
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 342, i32* %type.addr, align 4
  %1 = load i32, i32* %flags.addr, align 4
  %or = or i32 %1, 2048
  store i32 %or, i32* %flags.addr, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %2 = load %struct.op*, %struct.op** %first.addr, align 8
  %tobool = icmp ne %struct.op* %2, null
  br i1 %tobool, label %if.end2, label %if.then1

if.then1:                                         ; preds = %if.end
  %call = call %struct.op* @Perl_newOP(i32 1, i32 0)
  store %struct.op* %call, %struct.op** %first.addr, align 8
  br label %if.end2

if.end2:                                          ; preds = %if.then1, %if.end
  %3 = load i32, i32* %type.addr, align 4
  %idxprom = sext i32 %3 to i64
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @PL_opargs, i64 0, i64 %idxprom
  %4 = load i32, i32* %arrayidx, align 4
  %and = and i32 %4, 1
  %tobool3 = icmp ne i32 %and, 0
  br i1 %tobool3, label %if.then4, label %if.end6

if.then4:                                         ; preds = %if.end2
  %5 = load %struct.op*, %struct.op** %first.addr, align 8
  %call5 = call %struct.op* @S_force_list(%struct.op* %5, i1 zeroext true)
  store %struct.op* %call5, %struct.op** %first.addr, align 8
  br label %if.end6

if.end6:                                          ; preds = %if.then4, %if.end2
  %call7 = call i8* @Perl_Slab_Alloc(i64 48)
  %6 = bitcast i8* %call7 to %struct.unop*
  store %struct.unop* %6, %struct.unop** %unop, align 8
  br label %do.body

do.body:                                          ; preds = %if.end6
  %7 = load i32, i32* %type.addr, align 4
  %conv = trunc i32 %7 to i16
  %conv8 = zext i16 %conv to i32
  %8 = load %struct.unop*, %struct.unop** %unop, align 8
  %op_type = getelementptr inbounds %struct.unop, %struct.unop* %8, i32 0, i32 4
  %9 = trunc i32 %conv8 to i16
  %bf.load = load i16, i16* %op_type, align 8
  %bf.value = and i16 %9, 511
  %bf.clear = and i16 %bf.load, -512
  %bf.set = or i16 %bf.clear, %bf.value
  store i16 %bf.set, i16* %op_type, align 8
  %bf.result.cast = zext i16 %bf.value to i32
  %10 = load i32, i32* %type.addr, align 4
  %idxprom9 = sext i32 %10 to i64
  %arrayidx10 = getelementptr inbounds [0 x %struct.op* ()*], [0 x %struct.op* ()*]* @PL_ppaddr, i64 0, i64 %idxprom9
  %11 = load %struct.op* ()*, %struct.op* ()** %arrayidx10, align 8
  %12 = load %struct.unop*, %struct.unop** %unop, align 8
  %op_ppaddr = getelementptr inbounds %struct.unop, %struct.unop* %12, i32 0, i32 2
  store %struct.op* ()* %11, %struct.op* ()** %op_ppaddr, align 8
  br label %do.end

do.end:                                           ; preds = %do.body
  %13 = load %struct.op*, %struct.op** %first.addr, align 8
  %14 = load %struct.unop*, %struct.unop** %unop, align 8
  %op_first = getelementptr inbounds %struct.unop, %struct.unop* %14, i32 0, i32 7
  store %struct.op* %13, %struct.op** %op_first, align 8
  %15 = load i32, i32* %flags.addr, align 4
  %or11 = or i32 %15, 4
  %conv12 = trunc i32 %or11 to i8
  %16 = load %struct.unop*, %struct.unop** %unop, align 8
  %op_flags = getelementptr inbounds %struct.unop, %struct.unop* %16, i32 0, i32 5
  store i8 %conv12, i8* %op_flags, align 2
  %17 = load i32, i32* %flags.addr, align 4
  %shr = ashr i32 %17, 8
  %or13 = or i32 1, %shr
  %conv14 = trunc i32 %or13 to i8
  %18 = load %struct.unop*, %struct.unop** %unop, align 8
  %op_private = getelementptr inbounds %struct.unop, %struct.unop* %18, i32 0, i32 6
  store i8 %conv14, i8* %op_private, align 1
  %19 = load %struct.op*, %struct.op** %first.addr, align 8
  %op_sibling = getelementptr inbounds %struct.op, %struct.op* %19, i32 0, i32 1
  %20 = load %struct.op*, %struct.op** %op_sibling, align 8
  %tobool15 = icmp ne %struct.op* %20, null
  br i1 %tobool15, label %cond.true, label %cond.false

cond.true:                                        ; preds = %do.end
  br i1 true, label %if.end20, label %if.then16

cond.false:                                       ; preds = %do.end
  br i1 false, label %if.end20, label %if.then16

if.then16:                                        ; preds = %cond.false, %cond.true
  %21 = load %struct.op*, %struct.op** %first.addr, align 8
  %op_moresib = getelementptr inbounds %struct.op, %struct.op* %21, i32 0, i32 4
  %bf.load17 = load i16, i16* %op_moresib, align 8
  %bf.clear18 = and i16 %bf.load17, -16385
  store i16 %bf.clear18, i16* %op_moresib, align 8
  %22 = load %struct.op*, %struct.op** %first.addr, align 8
  %op_sibling19 = getelementptr inbounds %struct.op, %struct.op* %22, i32 0, i32 1
  store %struct.op* null, %struct.op** %op_sibling19, align 8
  br label %if.end20

if.end20:                                         ; preds = %if.then16, %cond.false, %cond.true
  %23 = load i8*, i8** @PL_op_mask, align 8
  %tobool21 = icmp ne i8* %23, null
  br i1 %tobool21, label %land.lhs.true, label %cond.false29

land.lhs.true:                                    ; preds = %if.end20
  %24 = load i8*, i8** @PL_op_mask, align 8
  %25 = load i32, i32* %type.addr, align 4
  %idxprom22 = sext i32 %25 to i64
  %arrayidx23 = getelementptr inbounds i8, i8* %24, i64 %idxprom22
  %26 = load i8, i8* %arrayidx23, align 1
  %conv24 = sext i8 %26 to i32
  %tobool25 = icmp ne i32 %conv24, 0
  br i1 %tobool25, label %cond.true26, label %cond.false29

cond.true26:                                      ; preds = %land.lhs.true
  %27 = load %struct.unop*, %struct.unop** %unop, align 8
  %28 = bitcast %struct.unop* %27 to %struct.op*
  call void @Perl_op_free(%struct.op* %28)
  %29 = load i32, i32* %type.addr, align 4
  %idxprom27 = sext i32 %29 to i64
  %arrayidx28 = getelementptr inbounds [0 x i8*], [0 x i8*]* @PL_op_desc, i64 0, i64 %idxprom27
  %30 = load i8*, i8** %arrayidx28, align 8
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.49, i64 0, i64 0), i8* %30)
  br label %cond.end

cond.false29:                                     ; preds = %land.lhs.true, %if.end20
  %31 = load i32, i32* %type.addr, align 4
  %idxprom30 = sext i32 %31 to i64
  %arrayidx31 = getelementptr inbounds [0 x %struct.op* (%struct.op*)*], [0 x %struct.op* (%struct.op*)*]* @PL_check, i64 0, i64 %idxprom30
  %32 = load %struct.op* (%struct.op*)*, %struct.op* (%struct.op*)** %arrayidx31, align 8
  %33 = load %struct.unop*, %struct.unop** %unop, align 8
  %34 = bitcast %struct.unop* %33 to %struct.op*
  %call32 = call %struct.op* %32(%struct.op* %34)
  br label %cond.end

cond.end:                                         ; preds = %cond.false29, %cond.true26
  %cond = phi %struct.op* [ null, %cond.true26 ], [ %call32, %cond.false29 ]
  %35 = bitcast %struct.op* %cond to %struct.unop*
  store %struct.unop* %35, %struct.unop** %unop, align 8
  %36 = load %struct.unop*, %struct.unop** %unop, align 8
  %op_next = getelementptr inbounds %struct.unop, %struct.unop* %36, i32 0, i32 0
  %37 = load %struct.op*, %struct.op** %op_next, align 8
  %tobool33 = icmp ne %struct.op* %37, null
  br i1 %tobool33, label %if.then34, label %if.end35

if.then34:                                        ; preds = %cond.end
  %38 = load %struct.unop*, %struct.unop** %unop, align 8
  %39 = bitcast %struct.unop* %38 to %struct.op*
  store %struct.op* %39, %struct.op** %retval, align 8
  br label %return

if.end35:                                         ; preds = %cond.end
  %40 = load %struct.unop*, %struct.unop** %unop, align 8
  %41 = bitcast %struct.unop* %40 to %struct.op*
  %call36 = call %struct.op* @S_op_std_init(%struct.op* %41)
  %call37 = call %struct.op* @S_op_integerize(%struct.op* %call36)
  %call38 = call %struct.op* @S_fold_constants(%struct.op* %call37)
  store %struct.op* %call38, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %if.end35, %if.then34
  %42 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %42
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.logop* @S_alloc_LOGOP(i32 %type, %struct.op* %first, %struct.op* %other) #0 {
entry:
  %type.addr = alloca i32, align 4
  %first.addr = alloca %struct.op*, align 8
  %other.addr = alloca %struct.op*, align 8
  %logop = alloca %struct.logop*, align 8
  %kid = alloca %struct.op*, align 8
  store i32 %type, i32* %type.addr, align 4
  store %struct.op* %first, %struct.op** %first.addr, align 8
  store %struct.op* %other, %struct.op** %other.addr, align 8
  %0 = load %struct.op*, %struct.op** %first.addr, align 8
  store %struct.op* %0, %struct.op** %kid, align 8
  %call = call i8* @Perl_Slab_Alloc(i64 56)
  %1 = bitcast i8* %call to %struct.logop*
  store %struct.logop* %1, %struct.logop** %logop, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %2 = load i32, i32* %type.addr, align 4
  %conv = trunc i32 %2 to i16
  %conv1 = zext i16 %conv to i32
  %3 = load %struct.logop*, %struct.logop** %logop, align 8
  %op_type = getelementptr inbounds %struct.logop, %struct.logop* %3, i32 0, i32 4
  %4 = trunc i32 %conv1 to i16
  %bf.load = load i16, i16* %op_type, align 8
  %bf.value = and i16 %4, 511
  %bf.clear = and i16 %bf.load, -512
  %bf.set = or i16 %bf.clear, %bf.value
  store i16 %bf.set, i16* %op_type, align 8
  %bf.result.cast = zext i16 %bf.value to i32
  %5 = load i32, i32* %type.addr, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds [0 x %struct.op* ()*], [0 x %struct.op* ()*]* @PL_ppaddr, i64 0, i64 %idxprom
  %6 = load %struct.op* ()*, %struct.op* ()** %arrayidx, align 8
  %7 = load %struct.logop*, %struct.logop** %logop, align 8
  %op_ppaddr = getelementptr inbounds %struct.logop, %struct.logop* %7, i32 0, i32 2
  store %struct.op* ()* %6, %struct.op* ()** %op_ppaddr, align 8
  br label %do.end

do.end:                                           ; preds = %do.body
  %8 = load %struct.op*, %struct.op** %first.addr, align 8
  %9 = load %struct.logop*, %struct.logop** %logop, align 8
  %op_first = getelementptr inbounds %struct.logop, %struct.logop* %9, i32 0, i32 7
  store %struct.op* %8, %struct.op** %op_first, align 8
  %10 = load %struct.op*, %struct.op** %other.addr, align 8
  %11 = load %struct.logop*, %struct.logop** %logop, align 8
  %op_other = getelementptr inbounds %struct.logop, %struct.logop* %11, i32 0, i32 8
  store %struct.op* %10, %struct.op** %op_other, align 8
  %12 = load %struct.logop*, %struct.logop** %logop, align 8
  %op_flags = getelementptr inbounds %struct.logop, %struct.logop* %12, i32 0, i32 5
  store i8 4, i8* %op_flags, align 2
  br label %while.cond

while.cond:                                       ; preds = %while.body, %do.end
  %13 = load %struct.op*, %struct.op** %kid, align 8
  %tobool = icmp ne %struct.op* %13, null
  br i1 %tobool, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %14 = load %struct.op*, %struct.op** %kid, align 8
  %op_sibling = getelementptr inbounds %struct.op, %struct.op* %14, i32 0, i32 1
  %15 = load %struct.op*, %struct.op** %op_sibling, align 8
  %tobool2 = icmp ne %struct.op* %15, null
  %16 = zext i1 %tobool2 to i64
  %cond = select i1 %tobool2, i32 1, i32 0
  %tobool3 = icmp ne i32 %cond, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %17 = phi i1 [ false, %while.cond ], [ %tobool3, %land.rhs ]
  br i1 %17, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %18 = load %struct.op*, %struct.op** %kid, align 8
  %op_sibling4 = getelementptr inbounds %struct.op, %struct.op* %18, i32 0, i32 1
  %19 = load %struct.op*, %struct.op** %op_sibling4, align 8
  %add.ptr = getelementptr inbounds %struct.op, %struct.op* %19, i64 0
  store %struct.op* %add.ptr, %struct.op** %kid, align 8
  br label %while.cond

while.end:                                        ; preds = %land.end
  %20 = load %struct.op*, %struct.op** %kid, align 8
  %tobool5 = icmp ne %struct.op* %20, null
  br i1 %tobool5, label %if.then, label %if.end

if.then:                                          ; preds = %while.end
  %21 = load %struct.op*, %struct.op** %kid, align 8
  %op_moresib = getelementptr inbounds %struct.op, %struct.op* %21, i32 0, i32 4
  %bf.load6 = load i16, i16* %op_moresib, align 8
  %bf.clear7 = and i16 %bf.load6, -16385
  store i16 %bf.clear7, i16* %op_moresib, align 8
  %22 = load %struct.op*, %struct.op** %kid, align 8
  %op_sibling8 = getelementptr inbounds %struct.op, %struct.op* %22, i32 0, i32 1
  store %struct.op* null, %struct.op** %op_sibling8, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %while.end
  %23 = load %struct.logop*, %struct.logop** %logop, align 8
  ret %struct.logop* %23
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_op_contextualize(%struct.op* %o, i32 %context) #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %o.addr = alloca %struct.op*, align 8
  %context.addr = alloca i32, align 4
  store %struct.op* %o, %struct.op** %o.addr, align 8
  store i32 %context, i32* %context.addr, align 4
  %0 = load i32, i32* %context.addr, align 4
  switch i32 %0, label %sw.default [
    i32 2, label %sw.bb
    i32 3, label %sw.bb1
    i32 1, label %sw.bb3
  ]

sw.bb:                                            ; preds = %entry
  %1 = load %struct.op*, %struct.op** %o.addr, align 8
  %call = call %struct.op* @Perl_scalar(%struct.op* %1)
  store %struct.op* %call, %struct.op** %retval, align 8
  br label %return

sw.bb1:                                           ; preds = %entry
  %2 = load %struct.op*, %struct.op** %o.addr, align 8
  %call2 = call %struct.op* @Perl_list(%struct.op* %2)
  store %struct.op* %call2, %struct.op** %retval, align 8
  br label %return

sw.bb3:                                           ; preds = %entry
  %3 = load %struct.op*, %struct.op** %o.addr, align 8
  %call4 = call %struct.op* @Perl_scalarvoid(%struct.op* %3)
  store %struct.op* %call4, %struct.op** %retval, align 8
  br label %return

sw.default:                                       ; preds = %entry
  %4 = load i32, i32* %context.addr, align 4
  %conv = sext i32 %4 to i64
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.9, i64 0, i64 0), i64 %conv)
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default
  store %struct.op* null, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %sw.epilog, %sw.bb3, %sw.bb1, %sw.bb
  %5 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %5
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_scalar(%struct.op* %o) #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %o.addr = alloca %struct.op*, align 8
  %kid = alloca %struct.op*, align 8
  %sib = alloca %struct.op*, align 8
  %lbrack = alloca i8, align 1
  %rbrack = alloca i8, align 1
  %name = alloca %struct.sv*, align 8
  %keysv = alloca %struct.sv*, align 8
  %key = alloca i8*, align 8
  store %struct.op* %o, %struct.op** %o.addr, align 8
  %0 = load %struct.op*, %struct.op** %o.addr, align 8
  %tobool = icmp ne %struct.op* %0, null
  br i1 %tobool, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %entry
  %1 = load %struct.yy_parser*, %struct.yy_parser** @PL_parser, align 8
  %tobool1 = icmp ne %struct.yy_parser* %1, null
  br i1 %tobool1, label %land.lhs.true, label %lor.lhs.false3

land.lhs.true:                                    ; preds = %lor.lhs.false
  %2 = load %struct.yy_parser*, %struct.yy_parser** @PL_parser, align 8
  %error_count = getelementptr inbounds %struct.yy_parser, %struct.yy_parser* %2, i32 0, i32 44
  %3 = load i8, i8* %error_count, align 1
  %conv = zext i8 %3 to i32
  %tobool2 = icmp ne i32 %conv, 0
  br i1 %tobool2, label %if.then, label %lor.lhs.false3

lor.lhs.false3:                                   ; preds = %land.lhs.true, %lor.lhs.false
  %4 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %4, i32 0, i32 5
  %5 = load i8, i8* %op_flags, align 2
  %conv4 = zext i8 %5 to i32
  %and = and i32 %conv4, 3
  %tobool5 = icmp ne i32 %and, 0
  br i1 %tobool5, label %if.then, label %lor.lhs.false6

lor.lhs.false6:                                   ; preds = %lor.lhs.false3
  %6 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type = getelementptr inbounds %struct.op, %struct.op* %6, i32 0, i32 4
  %bf.load = load i16, i16* %op_type, align 8
  %bf.clear = and i16 %bf.load, 511
  %bf.cast = zext i16 %bf.clear to i32
  %cmp = icmp eq i32 %bf.cast, 203
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false6, %lor.lhs.false3, %land.lhs.true, %entry
  %7 = load %struct.op*, %struct.op** %o.addr, align 8
  store %struct.op* %7, %struct.op** %retval, align 8
  br label %return

if.end:                                           ; preds = %lor.lhs.false6
  %8 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_flags8 = getelementptr inbounds %struct.op, %struct.op* %8, i32 0, i32 5
  %9 = load i8, i8* %op_flags8, align 2
  %conv9 = zext i8 %9 to i32
  %and10 = and i32 %conv9, -4
  %or = or i32 %and10, 2
  %conv11 = trunc i32 %or to i8
  %10 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_flags12 = getelementptr inbounds %struct.op, %struct.op* %10, i32 0, i32 5
  store i8 %conv11, i8* %op_flags12, align 2
  %11 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type13 = getelementptr inbounds %struct.op, %struct.op* %11, i32 0, i32 4
  %bf.load14 = load i16, i16* %op_type13, align 8
  %bf.clear15 = and i16 %bf.load14, 511
  %bf.cast16 = zext i16 %bf.clear15 to i32
  switch i32 %bf.cast16, label %sw.default [
    i32 62, label %sw.bb
    i32 177, label %sw.bb39
    i32 176, label %sw.bb39
    i32 180, label %sw.bb39
    i32 156, label %sw.bb47
    i32 31, label %sw.bb47
    i32 32, label %sw.bb47
    i32 33, label %sw.bb47
    i32 0, label %sw.bb47
    i32 197, label %sw.bb63
    i32 345, label %sw.bb63
    i32 198, label %sw.bb102
    i32 192, label %sw.bb102
    i32 158, label %sw.bb102
    i32 167, label %sw.bb104
    i32 152, label %sw.bb105
    i32 140, label %sw.bb105
  ]

sw.bb:                                            ; preds = %if.end
  %12 = load %struct.op*, %struct.op** %o.addr, align 8
  %13 = bitcast %struct.op* %12 to %struct.binop*
  %op_first = getelementptr inbounds %struct.binop, %struct.binop* %13, i32 0, i32 7
  %14 = load %struct.op*, %struct.op** %op_first, align 8
  %call = call %struct.op* @Perl_scalar(%struct.op* %14)
  %15 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_private = getelementptr inbounds %struct.op, %struct.op* %15, i32 0, i32 6
  %16 = load i8, i8* %op_private, align 1
  %conv17 = zext i8 %16 to i32
  %and18 = and i32 %conv17, 64
  %tobool19 = icmp ne i32 %and18, 0
  br i1 %tobool19, label %if.then20, label %if.end38

if.then20:                                        ; preds = %sw.bb
  %17 = load %struct.op*, %struct.op** %o.addr, align 8
  %18 = bitcast %struct.op* %17 to %struct.unop*
  %op_first21 = getelementptr inbounds %struct.unop, %struct.unop* %18, i32 0, i32 7
  %19 = load %struct.op*, %struct.op** %op_first21, align 8
  %20 = bitcast %struct.op* %19 to %struct.listop*
  %op_first22 = getelementptr inbounds %struct.listop, %struct.listop* %20, i32 0, i32 7
  %21 = load %struct.op*, %struct.op** %op_first22, align 8
  store %struct.op* %21, %struct.op** %kid, align 8
  %22 = load %struct.op*, %struct.op** %kid, align 8
  %op_sibling = getelementptr inbounds %struct.op, %struct.op* %22, i32 0, i32 1
  %23 = load %struct.op*, %struct.op** %op_sibling, align 8
  %tobool23 = icmp ne %struct.op* %23, null
  br i1 %tobool23, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then20
  br i1 true, label %land.lhs.true24, label %if.end37

cond.false:                                       ; preds = %if.then20
  br i1 false, label %land.lhs.true24, label %if.end37

land.lhs.true24:                                  ; preds = %cond.false, %cond.true
  %24 = load %struct.op*, %struct.op** %kid, align 8
  %op_sibling25 = getelementptr inbounds %struct.op, %struct.op* %24, i32 0, i32 1
  %25 = load %struct.op*, %struct.op** %op_sibling25, align 8
  %add.ptr = getelementptr inbounds %struct.op, %struct.op* %25, i64 0
  %op_sibling26 = getelementptr inbounds %struct.op, %struct.op* %add.ptr, i32 0, i32 1
  %26 = load %struct.op*, %struct.op** %op_sibling26, align 8
  %tobool27 = icmp ne %struct.op* %26, null
  br i1 %tobool27, label %cond.true28, label %cond.false29

cond.true28:                                      ; preds = %land.lhs.true24
  br i1 true, label %if.end37, label %if.then30

cond.false29:                                     ; preds = %land.lhs.true24
  br i1 false, label %if.end37, label %if.then30

if.then30:                                        ; preds = %cond.false29, %cond.true28
  %27 = load %struct.op*, %struct.op** %o.addr, align 8
  %28 = bitcast %struct.op* %27 to %struct.unop*
  %op_first31 = getelementptr inbounds %struct.unop, %struct.unop* %28, i32 0, i32 7
  %29 = load %struct.op*, %struct.op** %op_first31, align 8
  %30 = bitcast %struct.op* %29 to %struct.listop*
  %op_first32 = getelementptr inbounds %struct.listop, %struct.listop* %30, i32 0, i32 7
  %31 = load %struct.op*, %struct.op** %op_first32, align 8
  call void @Perl_op_null(%struct.op* %31)
  %32 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_private33 = getelementptr inbounds %struct.op, %struct.op* %32, i32 0, i32 6
  %33 = load i8, i8* %op_private33, align 1
  %conv34 = zext i8 %33 to i32
  %and35 = and i32 %conv34, -65
  %conv36 = trunc i32 %and35 to i8
  store i8 %conv36, i8* %op_private33, align 1
  br label %if.end37

if.end37:                                         ; preds = %if.then30, %cond.false29, %cond.true28, %cond.false, %cond.true
  br label %if.end38

if.end38:                                         ; preds = %if.end37, %sw.bb
  br label %sw.epilog

sw.bb39:                                          ; preds = %if.end, %if.end, %if.end
  %34 = load %struct.op*, %struct.op** %o.addr, align 8
  %35 = bitcast %struct.op* %34 to %struct.unop*
  %op_first40 = getelementptr inbounds %struct.unop, %struct.unop* %35, i32 0, i32 7
  %36 = load %struct.op*, %struct.op** %op_first40, align 8
  %op_sibling41 = getelementptr inbounds %struct.op, %struct.op* %36, i32 0, i32 1
  %37 = load %struct.op*, %struct.op** %op_sibling41, align 8
  %add.ptr42 = getelementptr inbounds %struct.op, %struct.op* %37, i64 0
  store %struct.op* %add.ptr42, %struct.op** %kid, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %sw.bb39
  %38 = load %struct.op*, %struct.op** %kid, align 8
  %tobool43 = icmp ne %struct.op* %38, null
  br i1 %tobool43, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %39 = load %struct.op*, %struct.op** %kid, align 8
  %call44 = call %struct.op* @Perl_scalar(%struct.op* %39)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %40 = load %struct.op*, %struct.op** %kid, align 8
  %op_sibling45 = getelementptr inbounds %struct.op, %struct.op* %40, i32 0, i32 1
  %41 = load %struct.op*, %struct.op** %op_sibling45, align 8
  %add.ptr46 = getelementptr inbounds %struct.op, %struct.op* %41, i64 0
  store %struct.op* %add.ptr46, %struct.op** %kid, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %sw.epilog

sw.bb47:                                          ; preds = %if.end, %if.end, %if.end, %if.end, %if.end
  br label %sw.default

sw.default:                                       ; preds = %if.end, %sw.bb47
  %42 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_flags48 = getelementptr inbounds %struct.op, %struct.op* %42, i32 0, i32 5
  %43 = load i8, i8* %op_flags48, align 2
  %conv49 = zext i8 %43 to i32
  %and50 = and i32 %conv49, 4
  %tobool51 = icmp ne i32 %and50, 0
  br i1 %tobool51, label %if.then52, label %if.end62

if.then52:                                        ; preds = %sw.default
  %44 = load %struct.op*, %struct.op** %o.addr, align 8
  %45 = bitcast %struct.op* %44 to %struct.unop*
  %op_first53 = getelementptr inbounds %struct.unop, %struct.unop* %45, i32 0, i32 7
  %46 = load %struct.op*, %struct.op** %op_first53, align 8
  store %struct.op* %46, %struct.op** %kid, align 8
  br label %for.cond54

for.cond54:                                       ; preds = %for.inc58, %if.then52
  %47 = load %struct.op*, %struct.op** %kid, align 8
  %tobool55 = icmp ne %struct.op* %47, null
  br i1 %tobool55, label %for.body56, label %for.end61

for.body56:                                       ; preds = %for.cond54
  %48 = load %struct.op*, %struct.op** %kid, align 8
  %call57 = call %struct.op* @Perl_scalar(%struct.op* %48)
  br label %for.inc58

for.inc58:                                        ; preds = %for.body56
  %49 = load %struct.op*, %struct.op** %kid, align 8
  %op_sibling59 = getelementptr inbounds %struct.op, %struct.op* %49, i32 0, i32 1
  %50 = load %struct.op*, %struct.op** %op_sibling59, align 8
  %add.ptr60 = getelementptr inbounds %struct.op, %struct.op* %50, i64 0
  store %struct.op* %add.ptr60, %struct.op** %kid, align 8
  br label %for.cond54

for.end61:                                        ; preds = %for.cond54
  br label %if.end62

if.end62:                                         ; preds = %for.end61, %sw.default
  br label %sw.epilog

sw.bb63:                                          ; preds = %if.end, %if.end
  %51 = load %struct.op*, %struct.op** %o.addr, align 8
  %52 = bitcast %struct.op* %51 to %struct.listop*
  %op_first64 = getelementptr inbounds %struct.listop, %struct.listop* %52, i32 0, i32 7
  %53 = load %struct.op*, %struct.op** %op_first64, align 8
  store %struct.op* %53, %struct.op** %kid, align 8
  %54 = load %struct.op*, %struct.op** %kid, align 8
  %call65 = call %struct.op* @Perl_scalar(%struct.op* %54)
  %55 = load %struct.op*, %struct.op** %kid, align 8
  %op_sibling66 = getelementptr inbounds %struct.op, %struct.op* %55, i32 0, i32 1
  %56 = load %struct.op*, %struct.op** %op_sibling66, align 8
  %add.ptr67 = getelementptr inbounds %struct.op, %struct.op* %56, i64 0
  store %struct.op* %add.ptr67, %struct.op** %kid, align 8
  br label %do_kids

do_kids:                                          ; preds = %sw.bb102, %sw.bb63
  br label %while.cond

while.cond:                                       ; preds = %if.end101, %do_kids
  %57 = load %struct.op*, %struct.op** %kid, align 8
  %tobool68 = icmp ne %struct.op* %57, null
  br i1 %tobool68, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %58 = load %struct.op*, %struct.op** %kid, align 8
  %op_sibling69 = getelementptr inbounds %struct.op, %struct.op* %58, i32 0, i32 1
  %59 = load %struct.op*, %struct.op** %op_sibling69, align 8
  %add.ptr70 = getelementptr inbounds %struct.op, %struct.op* %59, i64 0
  store %struct.op* %add.ptr70, %struct.op** %sib, align 8
  %60 = load %struct.op*, %struct.op** %sib, align 8
  %tobool71 = icmp ne %struct.op* %60, null
  br i1 %tobool71, label %land.lhs.true72, label %if.else

land.lhs.true72:                                  ; preds = %while.body
  %61 = load %struct.op*, %struct.op** %kid, align 8
  %op_type73 = getelementptr inbounds %struct.op, %struct.op* %61, i32 0, i32 4
  %bf.load74 = load i16, i16* %op_type73, align 8
  %bf.clear75 = and i16 %bf.load74, 511
  %bf.cast76 = zext i16 %bf.clear75 to i32
  %cmp77 = icmp ne i32 %bf.cast76, 217
  br i1 %cmp77, label %land.lhs.true79, label %if.else

land.lhs.true79:                                  ; preds = %land.lhs.true72
  %62 = load %struct.op*, %struct.op** %sib, align 8
  %op_sibling80 = getelementptr inbounds %struct.op, %struct.op* %62, i32 0, i32 1
  %63 = load %struct.op*, %struct.op** %op_sibling80, align 8
  %tobool81 = icmp ne %struct.op* %63, null
  br i1 %tobool81, label %cond.true82, label %cond.false83

cond.true82:                                      ; preds = %land.lhs.true79
  br i1 true, label %if.then98, label %lor.lhs.false84

cond.false83:                                     ; preds = %land.lhs.true79
  br i1 false, label %if.then98, label %lor.lhs.false84

lor.lhs.false84:                                  ; preds = %cond.false83, %cond.true82
  %64 = load %struct.op*, %struct.op** %sib, align 8
  %op_type85 = getelementptr inbounds %struct.op, %struct.op* %64, i32 0, i32 4
  %bf.load86 = load i16, i16* %op_type85, align 8
  %bf.clear87 = and i16 %bf.load86, 511
  %bf.cast88 = zext i16 %bf.clear87 to i32
  %cmp89 = icmp ne i32 %bf.cast88, 0
  br i1 %cmp89, label %if.then98, label %lor.lhs.false91

lor.lhs.false91:                                  ; preds = %lor.lhs.false84
  %65 = load %struct.op*, %struct.op** %sib, align 8
  %op_targ = getelementptr inbounds %struct.op, %struct.op* %65, i32 0, i32 3
  %66 = load i64, i64* %op_targ, align 8
  %cmp92 = icmp ne i64 %66, 193
  br i1 %cmp92, label %land.lhs.true94, label %if.else

land.lhs.true94:                                  ; preds = %lor.lhs.false91
  %67 = load %struct.op*, %struct.op** %sib, align 8
  %op_targ95 = getelementptr inbounds %struct.op, %struct.op* %67, i32 0, i32 3
  %68 = load i64, i64* %op_targ95, align 8
  %cmp96 = icmp ne i64 %68, 194
  br i1 %cmp96, label %if.then98, label %if.else

if.then98:                                        ; preds = %land.lhs.true94, %lor.lhs.false84, %cond.false83, %cond.true82
  %69 = load %struct.op*, %struct.op** %kid, align 8
  %call99 = call %struct.op* @Perl_scalarvoid(%struct.op* %69)
  br label %if.end101

if.else:                                          ; preds = %land.lhs.true94, %lor.lhs.false91, %land.lhs.true72, %while.body
  %70 = load %struct.op*, %struct.op** %kid, align 8
  %call100 = call %struct.op* @Perl_scalar(%struct.op* %70)
  br label %if.end101

if.end101:                                        ; preds = %if.else, %if.then98
  %71 = load %struct.op*, %struct.op** %sib, align 8
  store %struct.op* %71, %struct.op** %kid, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  store %struct.cop* @PL_compiling, %struct.cop** @PL_curcop, align 8
  br label %sw.epilog

sw.bb102:                                         ; preds = %if.end, %if.end, %if.end
  %72 = load %struct.op*, %struct.op** %o.addr, align 8
  %73 = bitcast %struct.op* %72 to %struct.listop*
  %op_first103 = getelementptr inbounds %struct.listop, %struct.listop* %73, i32 0, i32 7
  %74 = load %struct.op*, %struct.op** %op_first103, align 8
  store %struct.op* %74, %struct.op** %kid, align 8
  br label %do_kids

sw.bb104:                                         ; preds = %if.end
  call void (i32, i8*, ...) @Perl_ck_warner(i32 45, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.10, i64 0, i64 0))
  br label %sw.epilog

sw.bb105:                                         ; preds = %if.end, %if.end
  %75 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type106 = getelementptr inbounds %struct.op, %struct.op* %75, i32 0, i32 4
  %bf.load107 = load i16, i16* %op_type106, align 8
  %bf.clear108 = and i16 %bf.load107, 511
  %bf.cast109 = zext i16 %bf.clear108 to i32
  %cmp110 = icmp eq i32 %bf.cast109, 152
  %76 = zext i1 %cmp110 to i64
  %cond = select i1 %cmp110, i32 123, i32 91
  %conv112 = trunc i32 %cond to i8
  store i8 %conv112, i8* %lbrack, align 1
  %77 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type113 = getelementptr inbounds %struct.op, %struct.op* %77, i32 0, i32 4
  %bf.load114 = load i16, i16* %op_type113, align 8
  %bf.clear115 = and i16 %bf.load114, 511
  %bf.cast116 = zext i16 %bf.clear115 to i32
  %cmp117 = icmp eq i32 %bf.cast116, 152
  %78 = zext i1 %cmp117 to i64
  %cond119 = select i1 %cmp117, i32 125, i32 93
  %conv120 = trunc i32 %cond119 to i8
  store i8 %conv120, i8* %rbrack, align 1
  store i8* null, i8** %key, align 8
  %79 = load %struct.yy_parser*, %struct.yy_parser** @PL_parser, align 8
  %tobool121 = icmp ne %struct.yy_parser* %79, null
  br i1 %tobool121, label %land.lhs.true122, label %if.end127

land.lhs.true122:                                 ; preds = %sw.bb105
  %80 = load %struct.yy_parser*, %struct.yy_parser** @PL_parser, align 8
  %error_count123 = getelementptr inbounds %struct.yy_parser, %struct.yy_parser* %80, i32 0, i32 44
  %81 = load i8, i8* %error_count123, align 1
  %conv124 = zext i8 %81 to i32
  %tobool125 = icmp ne i32 %conv124, 0
  br i1 %tobool125, label %if.then126, label %if.end127

if.then126:                                       ; preds = %land.lhs.true122
  br label %sw.epilog

if.end127:                                        ; preds = %land.lhs.true122, %sw.bb105
  %call128 = call zeroext i1 @Perl_ckwarn(i32 28)
  br i1 %call128, label %if.end130, label %if.then129

if.then129:                                       ; preds = %if.end127
  br label %sw.epilog

if.end130:                                        ; preds = %if.end127
  %82 = load %struct.op*, %struct.op** %o.addr, align 8
  %83 = bitcast %struct.op* %82 to %struct.listop*
  %op_first131 = getelementptr inbounds %struct.listop, %struct.listop* %83, i32 0, i32 7
  %84 = load %struct.op*, %struct.op** %op_first131, align 8
  store %struct.op* %84, %struct.op** %kid, align 8
  %85 = load %struct.op*, %struct.op** %kid, align 8
  %op_sibling132 = getelementptr inbounds %struct.op, %struct.op* %85, i32 0, i32 1
  %86 = load %struct.op*, %struct.op** %op_sibling132, align 8
  %add.ptr133 = getelementptr inbounds %struct.op, %struct.op* %86, i64 0
  store %struct.op* %add.ptr133, %struct.op** %kid, align 8
  %87 = load %struct.op*, %struct.op** %kid, align 8
  %op_sibling134 = getelementptr inbounds %struct.op, %struct.op* %87, i32 0, i32 1
  %88 = load %struct.op*, %struct.op** %op_sibling134, align 8
  %add.ptr135 = getelementptr inbounds %struct.op, %struct.op* %88, i64 0
  %call136 = call %struct.sv* @S_op_varname(%struct.op* %add.ptr135)
  store %struct.sv* %call136, %struct.sv** %name, align 8
  %89 = load %struct.sv*, %struct.sv** %name, align 8
  %tobool137 = icmp ne %struct.sv* %89, null
  br i1 %tobool137, label %if.end139, label %if.then138

if.then138:                                       ; preds = %if.end130
  br label %sw.epilog

if.end139:                                        ; preds = %if.end130
  %90 = load %struct.op*, %struct.op** %kid, align 8
  call void @S_op_pretty(%struct.op* %90, %struct.sv** %keysv, i8** %key)
  %91 = load %struct.sv*, %struct.sv** %name, align 8
  %92 = load %struct.sv*, %struct.sv** %name, align 8
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %92, i32 0, i32 3
  %svu_pv = bitcast %union.anon* %sv_u to i8**
  %93 = load i8*, i8** %svu_pv, align 8
  %add.ptr140 = getelementptr inbounds i8, i8* %93, i64 1
  call void @Perl_sv_chop(%struct.sv* %91, i8* %add.ptr140)
  %94 = load i8*, i8** %key, align 8
  %tobool141 = icmp ne i8* %94, null
  br i1 %tobool141, label %if.then142, label %if.else147

if.then142:                                       ; preds = %if.end139
  %95 = load %struct.sv*, %struct.sv** %name, align 8
  %96 = bitcast %struct.sv* %95 to i8*
  %97 = load i8, i8* %lbrack, align 1
  %conv143 = sext i8 %97 to i32
  %98 = load i8*, i8** %key, align 8
  %99 = load i8, i8* %rbrack, align 1
  %conv144 = sext i8 %99 to i32
  %100 = load %struct.sv*, %struct.sv** %name, align 8
  %101 = bitcast %struct.sv* %100 to i8*
  %102 = load i8, i8* %lbrack, align 1
  %conv145 = sext i8 %102 to i32
  %103 = load i8*, i8** %key, align 8
  %104 = load i8, i8* %rbrack, align 1
  %conv146 = sext i8 %104 to i32
  call void (i32, i8*, ...) @Perl_warner(i32 28, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.11, i64 0, i64 0), i8* %96, i32 %conv143, i8* %98, i32 %conv144, i8* %101, i32 %conv145, i8* %103, i32 %conv146)
  br label %if.end152

if.else147:                                       ; preds = %if.end139
  %105 = load %struct.sv*, %struct.sv** %name, align 8
  %106 = bitcast %struct.sv* %105 to i8*
  %107 = load i8, i8* %lbrack, align 1
  %conv148 = sext i8 %107 to i32
  %108 = load %struct.sv*, %struct.sv** %keysv, align 8
  %109 = bitcast %struct.sv* %108 to i8*
  %110 = load i8, i8* %rbrack, align 1
  %conv149 = sext i8 %110 to i32
  %111 = load %struct.sv*, %struct.sv** %name, align 8
  %112 = bitcast %struct.sv* %111 to i8*
  %113 = load i8, i8* %lbrack, align 1
  %conv150 = sext i8 %113 to i32
  %114 = load %struct.sv*, %struct.sv** %keysv, align 8
  %115 = bitcast %struct.sv* %114 to i8*
  %116 = load i8, i8* %rbrack, align 1
  %conv151 = sext i8 %116 to i32
  call void (i32, i8*, ...) @Perl_warner(i32 28, i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.12, i64 0, i64 0), i8* %106, i32 %conv148, i8* %109, i32 %conv149, i8* %112, i32 %conv150, i8* %115, i32 %conv151)
  br label %if.end152

if.end152:                                        ; preds = %if.else147, %if.then142
  br label %sw.epilog

sw.epilog:                                        ; preds = %if.end152, %if.then138, %if.then129, %if.then126, %sw.bb104, %while.end, %if.end62, %for.end, %if.end38
  %117 = load %struct.op*, %struct.op** %o.addr, align 8
  store %struct.op* %117, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %sw.epilog, %if.then
  %118 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %118
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_list(%struct.op* %o) #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %o.addr = alloca %struct.op*, align 8
  %kid = alloca %struct.op*, align 8
  %sib = alloca %struct.op*, align 8
  store %struct.op* %o, %struct.op** %o.addr, align 8
  %0 = load %struct.op*, %struct.op** %o.addr, align 8
  %tobool = icmp ne %struct.op* %0, null
  br i1 %tobool, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %entry
  %1 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %1, i32 0, i32 5
  %2 = load i8, i8* %op_flags, align 2
  %conv = zext i8 %2 to i32
  %and = and i32 %conv, 3
  %tobool1 = icmp ne i32 %and, 0
  br i1 %tobool1, label %if.then, label %lor.lhs.false2

lor.lhs.false2:                                   ; preds = %lor.lhs.false
  %3 = load %struct.yy_parser*, %struct.yy_parser** @PL_parser, align 8
  %tobool3 = icmp ne %struct.yy_parser* %3, null
  br i1 %tobool3, label %land.lhs.true, label %lor.lhs.false6

land.lhs.true:                                    ; preds = %lor.lhs.false2
  %4 = load %struct.yy_parser*, %struct.yy_parser** @PL_parser, align 8
  %error_count = getelementptr inbounds %struct.yy_parser, %struct.yy_parser* %4, i32 0, i32 44
  %5 = load i8, i8* %error_count, align 1
  %conv4 = zext i8 %5 to i32
  %tobool5 = icmp ne i32 %conv4, 0
  br i1 %tobool5, label %if.then, label %lor.lhs.false6

lor.lhs.false6:                                   ; preds = %land.lhs.true, %lor.lhs.false2
  %6 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type = getelementptr inbounds %struct.op, %struct.op* %6, i32 0, i32 4
  %bf.load = load i16, i16* %op_type, align 8
  %bf.clear = and i16 %bf.load, 511
  %bf.cast = zext i16 %bf.clear to i32
  %cmp = icmp eq i32 %bf.cast, 203
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false6, %land.lhs.true, %lor.lhs.false, %entry
  %7 = load %struct.op*, %struct.op** %o.addr, align 8
  store %struct.op* %7, %struct.op** %retval, align 8
  br label %return

if.end:                                           ; preds = %lor.lhs.false6
  %8 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_private = getelementptr inbounds %struct.op, %struct.op* %8, i32 0, i32 6
  %9 = load i8, i8* %op_private, align 1
  %conv8 = zext i8 %9 to i32
  %and9 = and i32 %conv8, 16
  %tobool10 = icmp ne i32 %and9, 0
  br i1 %tobool10, label %land.lhs.true11, label %if.end19

land.lhs.true11:                                  ; preds = %if.end
  %10 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type12 = getelementptr inbounds %struct.op, %struct.op* %10, i32 0, i32 4
  %bf.load13 = load i16, i16* %op_type12, align 8
  %bf.clear14 = and i16 %bf.load13, 511
  %bf.cast15 = zext i16 %bf.clear14 to i32
  %idxprom = zext i32 %bf.cast15 to i64
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @PL_opargs, i64 0, i64 %idxprom
  %11 = load i32, i32* %arrayidx, align 4
  %and16 = and i32 %11, 16
  %tobool17 = icmp ne i32 %and16, 0
  br i1 %tobool17, label %if.then18, label %if.end19

if.then18:                                        ; preds = %land.lhs.true11
  %12 = load %struct.op*, %struct.op** %o.addr, align 8
  store %struct.op* %12, %struct.op** %retval, align 8
  br label %return

if.end19:                                         ; preds = %land.lhs.true11, %if.end
  %13 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_flags20 = getelementptr inbounds %struct.op, %struct.op* %13, i32 0, i32 5
  %14 = load i8, i8* %op_flags20, align 2
  %conv21 = zext i8 %14 to i32
  %and22 = and i32 %conv21, -4
  %or = or i32 %and22, 3
  %conv23 = trunc i32 %or to i8
  %15 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_flags24 = getelementptr inbounds %struct.op, %struct.op* %15, i32 0, i32 5
  store i8 %conv23, i8* %op_flags24, align 2
  %16 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type25 = getelementptr inbounds %struct.op, %struct.op* %16, i32 0, i32 4
  %bf.load26 = load i16, i16* %op_type25, align 8
  %bf.clear27 = and i16 %bf.load26, 511
  %bf.cast28 = zext i16 %bf.clear27 to i32
  switch i32 %bf.cast28, label %sw.default [
    i32 175, label %sw.bb
    i32 62, label %sw.bb29
    i32 177, label %sw.bb62
    i32 176, label %sw.bb62
    i32 180, label %sw.bb62
    i32 31, label %sw.bb68
    i32 32, label %sw.bb68
    i32 33, label %sw.bb68
    i32 0, label %sw.bb68
    i32 158, label %sw.bb90
    i32 197, label %sw.bb102
    i32 345, label %sw.bb102
    i32 198, label %sw.bb122
    i32 192, label %sw.bb122
  ]

sw.bb:                                            ; preds = %if.end19
  %17 = load %struct.op*, %struct.op** %o.addr, align 8
  %18 = bitcast %struct.op* %17 to %struct.binop*
  %op_first = getelementptr inbounds %struct.binop, %struct.binop* %18, i32 0, i32 7
  %19 = load %struct.op*, %struct.op** %op_first, align 8
  %call = call %struct.op* @Perl_list(%struct.op* %19)
  br label %sw.epilog

sw.bb29:                                          ; preds = %if.end19
  %20 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_private30 = getelementptr inbounds %struct.op, %struct.op* %20, i32 0, i32 6
  %21 = load i8, i8* %op_private30, align 1
  %conv31 = zext i8 %21 to i32
  %and32 = and i32 %conv31, 64
  %tobool33 = icmp ne i32 %and32, 0
  br i1 %tobool33, label %land.lhs.true34, label %if.end61

land.lhs.true34:                                  ; preds = %sw.bb29
  %22 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_flags35 = getelementptr inbounds %struct.op, %struct.op* %22, i32 0, i32 5
  %23 = load i8, i8* %op_flags35, align 2
  %conv36 = zext i8 %23 to i32
  %and37 = and i32 %conv36, 64
  %tobool38 = icmp ne i32 %and37, 0
  br i1 %tobool38, label %if.end61, label %if.then39

if.then39:                                        ; preds = %land.lhs.true34
  %24 = load %struct.op*, %struct.op** %o.addr, align 8
  %25 = bitcast %struct.op* %24 to %struct.binop*
  %op_first40 = getelementptr inbounds %struct.binop, %struct.binop* %25, i32 0, i32 7
  %26 = load %struct.op*, %struct.op** %op_first40, align 8
  %call41 = call %struct.op* @Perl_list(%struct.op* %26)
  %27 = load %struct.op*, %struct.op** %o.addr, align 8
  %28 = bitcast %struct.op* %27 to %struct.binop*
  %op_last = getelementptr inbounds %struct.binop, %struct.binop* %28, i32 0, i32 8
  %29 = load %struct.op*, %struct.op** %op_last, align 8
  store %struct.op* %29, %struct.op** %kid, align 8
  %30 = load %struct.op*, %struct.op** %kid, align 8
  %op_type42 = getelementptr inbounds %struct.op, %struct.op* %30, i32 0, i32 4
  %bf.load43 = load i16, i16* %op_type42, align 8
  %bf.clear44 = and i16 %bf.load43, 511
  %bf.cast45 = zext i16 %bf.clear44 to i32
  %cmp46 = icmp eq i32 %bf.cast45, 5
  br i1 %cmp46, label %land.lhs.true48, label %if.end60

land.lhs.true48:                                  ; preds = %if.then39
  %31 = load %struct.op*, %struct.op** %kid, align 8
  %32 = bitcast %struct.op* %31 to %struct.svop*
  %op_sv = getelementptr inbounds %struct.svop, %struct.svop* %32, i32 0, i32 7
  %33 = load %struct.sv*, %struct.sv** %op_sv, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %33, i32 0, i32 2
  %34 = load i32, i32* %sv_flags, align 4
  %and49 = and i32 %34, 256
  %tobool50 = icmp ne i32 %and49, 0
  br i1 %tobool50, label %land.lhs.true51, label %if.end60

land.lhs.true51:                                  ; preds = %land.lhs.true48
  %35 = load %struct.op*, %struct.op** %kid, align 8
  %36 = bitcast %struct.op* %35 to %struct.svop*
  %op_sv52 = getelementptr inbounds %struct.svop, %struct.svop* %36, i32 0, i32 7
  %37 = load %struct.sv*, %struct.sv** %op_sv52, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %37, i32 0, i32 0
  %38 = load i8*, i8** %sv_any, align 8
  %39 = bitcast i8* %38 to %struct.xpviv*
  %xiv_u = getelementptr inbounds %struct.xpviv, %struct.xpviv* %39, i32 0, i32 4
  %xivu_iv = bitcast %union._xivu* %xiv_u to i64*
  %40 = load i64, i64* %xivu_iv, align 8
  %cmp53 = icmp eq i64 %40, 1
  br i1 %cmp53, label %if.then55, label %if.end60

if.then55:                                        ; preds = %land.lhs.true51
  %41 = load %struct.op*, %struct.op** %o.addr, align 8
  call void @Perl_op_null(%struct.op* %41)
  %42 = load %struct.op*, %struct.op** %o.addr, align 8
  %43 = bitcast %struct.op* %42 to %struct.binop*
  %op_first56 = getelementptr inbounds %struct.binop, %struct.binop* %43, i32 0, i32 7
  %44 = load %struct.op*, %struct.op** %op_first56, align 8
  %45 = bitcast %struct.op* %44 to %struct.unop*
  %op_first57 = getelementptr inbounds %struct.unop, %struct.unop* %45, i32 0, i32 7
  %46 = load %struct.op*, %struct.op** %op_first57, align 8
  call void @Perl_op_null(%struct.op* %46)
  %47 = load %struct.op*, %struct.op** %o.addr, align 8
  %48 = load %struct.op*, %struct.op** %o.addr, align 8
  %49 = bitcast %struct.op* %48 to %struct.binop*
  %op_first58 = getelementptr inbounds %struct.binop, %struct.binop* %49, i32 0, i32 7
  %50 = load %struct.op*, %struct.op** %op_first58, align 8
  %call59 = call %struct.op* @Perl_op_sibling_splice(%struct.op* %47, %struct.op* %50, i32 1, %struct.op* null)
  call void @Perl_op_free(%struct.op* %call59)
  br label %if.end60

if.end60:                                         ; preds = %if.then55, %land.lhs.true51, %land.lhs.true48, %if.then39
  br label %if.end61

if.end61:                                         ; preds = %if.end60, %land.lhs.true34, %sw.bb29
  br label %sw.epilog

sw.bb62:                                          ; preds = %if.end19, %if.end19, %if.end19
  %51 = load %struct.op*, %struct.op** %o.addr, align 8
  %52 = bitcast %struct.op* %51 to %struct.unop*
  %op_first63 = getelementptr inbounds %struct.unop, %struct.unop* %52, i32 0, i32 7
  %53 = load %struct.op*, %struct.op** %op_first63, align 8
  %op_sibling = getelementptr inbounds %struct.op, %struct.op* %53, i32 0, i32 1
  %54 = load %struct.op*, %struct.op** %op_sibling, align 8
  %add.ptr = getelementptr inbounds %struct.op, %struct.op* %54, i64 0
  store %struct.op* %add.ptr, %struct.op** %kid, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %sw.bb62
  %55 = load %struct.op*, %struct.op** %kid, align 8
  %tobool64 = icmp ne %struct.op* %55, null
  br i1 %tobool64, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %56 = load %struct.op*, %struct.op** %kid, align 8
  %call65 = call %struct.op* @Perl_list(%struct.op* %56)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %57 = load %struct.op*, %struct.op** %kid, align 8
  %op_sibling66 = getelementptr inbounds %struct.op, %struct.op* %57, i32 0, i32 1
  %58 = load %struct.op*, %struct.op** %op_sibling66, align 8
  %add.ptr67 = getelementptr inbounds %struct.op, %struct.op* %58, i64 0
  store %struct.op* %add.ptr67, %struct.op** %kid, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %sw.epilog

sw.default:                                       ; preds = %if.end19
  br label %sw.bb68

sw.bb68:                                          ; preds = %if.end19, %if.end19, %if.end19, %if.end19, %sw.default
  %59 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_flags69 = getelementptr inbounds %struct.op, %struct.op* %59, i32 0, i32 5
  %60 = load i8, i8* %op_flags69, align 2
  %conv70 = zext i8 %60 to i32
  %and71 = and i32 %conv70, 4
  %tobool72 = icmp ne i32 %and71, 0
  br i1 %tobool72, label %if.end74, label %if.then73

if.then73:                                        ; preds = %sw.bb68
  br label %sw.epilog

if.end74:                                         ; preds = %sw.bb68
  %61 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %61, i32 0, i32 0
  %62 = load %struct.op*, %struct.op** %op_next, align 8
  %tobool75 = icmp ne %struct.op* %62, null
  br i1 %tobool75, label %if.end88, label %land.lhs.true76

land.lhs.true76:                                  ; preds = %if.end74
  %63 = load %struct.op*, %struct.op** %o.addr, align 8
  %64 = bitcast %struct.op* %63 to %struct.unop*
  %op_first77 = getelementptr inbounds %struct.unop, %struct.unop* %64, i32 0, i32 7
  %65 = load %struct.op*, %struct.op** %op_first77, align 8
  %op_type78 = getelementptr inbounds %struct.op, %struct.op* %65, i32 0, i32 4
  %bf.load79 = load i16, i16* %op_type78, align 8
  %bf.clear80 = and i16 %bf.load79, 511
  %bf.cast81 = zext i16 %bf.clear80 to i32
  %cmp82 = icmp eq i32 %bf.cast81, 175
  br i1 %cmp82, label %if.then84, label %if.end88

if.then84:                                        ; preds = %land.lhs.true76
  %66 = load %struct.op*, %struct.op** %o.addr, align 8
  %67 = bitcast %struct.op* %66 to %struct.binop*
  %op_first85 = getelementptr inbounds %struct.binop, %struct.binop* %67, i32 0, i32 7
  %68 = load %struct.op*, %struct.op** %op_first85, align 8
  %call86 = call %struct.op* @Perl_list(%struct.op* %68)
  %69 = load %struct.op*, %struct.op** %o.addr, align 8
  %call87 = call %struct.op* @S_gen_constant_list(%struct.op* %69)
  store %struct.op* %call87, %struct.op** %retval, align 8
  br label %return

if.end88:                                         ; preds = %land.lhs.true76, %if.end74
  %70 = load %struct.op*, %struct.op** %o.addr, align 8
  %call89 = call %struct.op* @S_listkids(%struct.op* %70)
  br label %sw.epilog

sw.bb90:                                          ; preds = %if.end19
  %71 = load %struct.op*, %struct.op** %o.addr, align 8
  %call91 = call %struct.op* @S_listkids(%struct.op* %71)
  %72 = load %struct.op*, %struct.op** %o.addr, align 8
  %73 = bitcast %struct.op* %72 to %struct.listop*
  %op_first92 = getelementptr inbounds %struct.listop, %struct.listop* %73, i32 0, i32 7
  %74 = load %struct.op*, %struct.op** %op_first92, align 8
  %op_type93 = getelementptr inbounds %struct.op, %struct.op* %74, i32 0, i32 4
  %bf.load94 = load i16, i16* %op_type93, align 8
  %bf.clear95 = and i16 %bf.load94, 511
  %bf.cast96 = zext i16 %bf.clear95 to i32
  %cmp97 = icmp eq i32 %bf.cast96, 3
  br i1 %cmp97, label %if.then99, label %if.end101

if.then99:                                        ; preds = %sw.bb90
  %75 = load %struct.op*, %struct.op** %o.addr, align 8
  %76 = bitcast %struct.op* %75 to %struct.unop*
  %op_first100 = getelementptr inbounds %struct.unop, %struct.unop* %76, i32 0, i32 7
  %77 = load %struct.op*, %struct.op** %op_first100, align 8
  call void @Perl_op_null(%struct.op* %77)
  %78 = load %struct.op*, %struct.op** %o.addr, align 8
  call void @Perl_op_null(%struct.op* %78)
  br label %if.end101

if.end101:                                        ; preds = %if.then99, %sw.bb90
  br label %sw.epilog

sw.bb102:                                         ; preds = %if.end19, %if.end19
  %79 = load %struct.op*, %struct.op** %o.addr, align 8
  %80 = bitcast %struct.op* %79 to %struct.listop*
  %op_first103 = getelementptr inbounds %struct.listop, %struct.listop* %80, i32 0, i32 7
  %81 = load %struct.op*, %struct.op** %op_first103, align 8
  store %struct.op* %81, %struct.op** %kid, align 8
  %82 = load %struct.op*, %struct.op** %kid, align 8
  %call104 = call %struct.op* @Perl_list(%struct.op* %82)
  %83 = load %struct.op*, %struct.op** %kid, align 8
  %op_sibling105 = getelementptr inbounds %struct.op, %struct.op* %83, i32 0, i32 1
  %84 = load %struct.op*, %struct.op** %op_sibling105, align 8
  %add.ptr106 = getelementptr inbounds %struct.op, %struct.op* %84, i64 0
  store %struct.op* %add.ptr106, %struct.op** %kid, align 8
  br label %do_kids

do_kids:                                          ; preds = %sw.bb122, %sw.bb102
  br label %while.cond

while.cond:                                       ; preds = %if.end121, %do_kids
  %85 = load %struct.op*, %struct.op** %kid, align 8
  %tobool107 = icmp ne %struct.op* %85, null
  br i1 %tobool107, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %86 = load %struct.op*, %struct.op** %kid, align 8
  %op_sibling108 = getelementptr inbounds %struct.op, %struct.op* %86, i32 0, i32 1
  %87 = load %struct.op*, %struct.op** %op_sibling108, align 8
  %add.ptr109 = getelementptr inbounds %struct.op, %struct.op* %87, i64 0
  store %struct.op* %add.ptr109, %struct.op** %sib, align 8
  %88 = load %struct.op*, %struct.op** %sib, align 8
  %tobool110 = icmp ne %struct.op* %88, null
  br i1 %tobool110, label %land.lhs.true111, label %if.else

land.lhs.true111:                                 ; preds = %while.body
  %89 = load %struct.op*, %struct.op** %kid, align 8
  %op_type112 = getelementptr inbounds %struct.op, %struct.op* %89, i32 0, i32 4
  %bf.load113 = load i16, i16* %op_type112, align 8
  %bf.clear114 = and i16 %bf.load113, 511
  %bf.cast115 = zext i16 %bf.clear114 to i32
  %cmp116 = icmp ne i32 %bf.cast115, 217
  br i1 %cmp116, label %if.then118, label %if.else

if.then118:                                       ; preds = %land.lhs.true111
  %90 = load %struct.op*, %struct.op** %kid, align 8
  %call119 = call %struct.op* @Perl_scalarvoid(%struct.op* %90)
  br label %if.end121

if.else:                                          ; preds = %land.lhs.true111, %while.body
  %91 = load %struct.op*, %struct.op** %kid, align 8
  %call120 = call %struct.op* @Perl_list(%struct.op* %91)
  br label %if.end121

if.end121:                                        ; preds = %if.else, %if.then118
  %92 = load %struct.op*, %struct.op** %sib, align 8
  store %struct.op* %92, %struct.op** %kid, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  store %struct.cop* @PL_compiling, %struct.cop** @PL_curcop, align 8
  br label %sw.epilog

sw.bb122:                                         ; preds = %if.end19, %if.end19
  %93 = load %struct.op*, %struct.op** %o.addr, align 8
  %94 = bitcast %struct.op* %93 to %struct.listop*
  %op_first123 = getelementptr inbounds %struct.listop, %struct.listop* %94, i32 0, i32 7
  %95 = load %struct.op*, %struct.op** %op_first123, align 8
  store %struct.op* %95, %struct.op** %kid, align 8
  br label %do_kids

sw.epilog:                                        ; preds = %while.end, %if.end101, %if.end88, %if.then73, %for.end, %if.end61, %sw.bb
  %96 = load %struct.op*, %struct.op** %o.addr, align 8
  store %struct.op* %96, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %sw.epilog, %if.then84, %if.then18, %if.then
  %97 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %97
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_scalarvoid(%struct.op* %arg) #0 {
entry:
  %arg.addr = alloca %struct.op*, align 8
  %kid = alloca %struct.op*, align 8
  %sv = alloca %struct.sv*, align 8
  %want = alloca i8, align 1
  %defer_stack_alloc = alloca i64, align 8
  %defer_ix = alloca i64, align 8
  %defer_stack = alloca %struct.op**, align 8
  %o = alloca %struct.op*, align 8
  %useless_sv = alloca %struct.sv*, align 8
  %useless = alloca i8*, align 8
  %coerce = alloca %union.XOPRETANY, align 8
  %coerce130 = alloca %union.XOPRETANY, align 8
  %coerce172 = alloca %union.XOPRETANY, align 8
  %nv = alloca double, align 8
  %dsv = alloca %struct.sv*, align 8
  %rv2gv = alloca %struct.op*, align 8
  %refgen = alloca %struct.unop*, align 8
  %rv2cv = alloca %struct.unop*, align 8
  %exlist = alloca %struct.listop*, align 8
  store %struct.op* %arg, %struct.op** %arg.addr, align 8
  store i64 0, i64* %defer_stack_alloc, align 8
  store i64 -1, i64* %defer_ix, align 8
  store %struct.op** null, %struct.op*** %defer_stack, align 8
  %0 = load %struct.op*, %struct.op** %arg.addr, align 8
  store %struct.op* %0, %struct.op** %o, align 8
  br label %do.body

do.body:                                          ; preds = %cond.end618, %entry
  store %struct.sv* null, %struct.sv** %useless_sv, align 8
  store i8* null, i8** %useless, align 8
  %1 = load %struct.op*, %struct.op** %o, align 8
  %op_type = getelementptr inbounds %struct.op, %struct.op* %1, i32 0, i32 4
  %bf.load = load i16, i16* %op_type, align 8
  %bf.clear = and i16 %bf.load, 511
  %bf.cast = zext i16 %bf.clear to i32
  %cmp = icmp eq i32 %bf.cast, 193
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %do.body
  %2 = load %struct.op*, %struct.op** %o, align 8
  %op_type1 = getelementptr inbounds %struct.op, %struct.op* %2, i32 0, i32 4
  %bf.load2 = load i16, i16* %op_type1, align 8
  %bf.clear3 = and i16 %bf.load2, 511
  %bf.cast4 = zext i16 %bf.clear3 to i32
  %cmp5 = icmp eq i32 %bf.cast4, 194
  br i1 %cmp5, label %if.then, label %lor.lhs.false6

lor.lhs.false6:                                   ; preds = %lor.lhs.false
  %3 = load %struct.op*, %struct.op** %o, align 8
  %op_type7 = getelementptr inbounds %struct.op, %struct.op* %3, i32 0, i32 4
  %bf.load8 = load i16, i16* %op_type7, align 8
  %bf.clear9 = and i16 %bf.load8, 511
  %bf.cast10 = zext i16 %bf.clear9 to i32
  %cmp11 = icmp eq i32 %bf.cast10, 0
  br i1 %cmp11, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %lor.lhs.false6
  %4 = load %struct.op*, %struct.op** %o, align 8
  %op_targ = getelementptr inbounds %struct.op, %struct.op* %4, i32 0, i32 3
  %5 = load i64, i64* %op_targ, align 8
  %cmp12 = icmp eq i64 %5, 193
  br i1 %cmp12, label %if.then, label %lor.lhs.false13

lor.lhs.false13:                                  ; preds = %land.lhs.true
  %6 = load %struct.op*, %struct.op** %o, align 8
  %op_targ14 = getelementptr inbounds %struct.op, %struct.op* %6, i32 0, i32 3
  %7 = load i64, i64* %op_targ14, align 8
  %cmp15 = icmp eq i64 %7, 194
  br i1 %cmp15, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false13, %land.lhs.true, %lor.lhs.false, %do.body
  %8 = load %struct.op*, %struct.op** %o, align 8
  %9 = bitcast %struct.op* %8 to %struct.cop*
  store %struct.cop* %9, %struct.cop** @PL_curcop, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %lor.lhs.false13, %lor.lhs.false6
  %10 = load %struct.op*, %struct.op** %o, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %10, i32 0, i32 5
  %11 = load i8, i8* %op_flags, align 2
  %conv = zext i8 %11 to i32
  %and = and i32 %conv, 3
  %conv16 = trunc i32 %and to i8
  store i8 %conv16, i8* %want, align 1
  %12 = load i8, i8* %want, align 1
  %conv17 = zext i8 %12 to i32
  %tobool = icmp ne i32 %conv17, 0
  br i1 %tobool, label %land.lhs.true18, label %lor.lhs.false22

land.lhs.true18:                                  ; preds = %if.end
  %13 = load i8, i8* %want, align 1
  %conv19 = zext i8 %13 to i32
  %cmp20 = icmp ne i32 %conv19, 2
  br i1 %cmp20, label %if.then48, label %lor.lhs.false22

lor.lhs.false22:                                  ; preds = %land.lhs.true18, %if.end
  %14 = load %struct.yy_parser*, %struct.yy_parser** @PL_parser, align 8
  %tobool23 = icmp ne %struct.yy_parser* %14, null
  br i1 %tobool23, label %land.lhs.true24, label %lor.lhs.false27

land.lhs.true24:                                  ; preds = %lor.lhs.false22
  %15 = load %struct.yy_parser*, %struct.yy_parser** @PL_parser, align 8
  %error_count = getelementptr inbounds %struct.yy_parser, %struct.yy_parser* %15, i32 0, i32 44
  %16 = load i8, i8* %error_count, align 1
  %conv25 = zext i8 %16 to i32
  %tobool26 = icmp ne i32 %conv25, 0
  br i1 %tobool26, label %if.then48, label %lor.lhs.false27

lor.lhs.false27:                                  ; preds = %land.lhs.true24, %lor.lhs.false22
  %17 = load %struct.op*, %struct.op** %o, align 8
  %op_type28 = getelementptr inbounds %struct.op, %struct.op* %17, i32 0, i32 4
  %bf.load29 = load i16, i16* %op_type28, align 8
  %bf.clear30 = and i16 %bf.load29, 511
  %bf.cast31 = zext i16 %bf.clear30 to i32
  %cmp32 = icmp eq i32 %bf.cast31, 203
  br i1 %cmp32, label %if.then48, label %lor.lhs.false34

lor.lhs.false34:                                  ; preds = %lor.lhs.false27
  %18 = load %struct.op*, %struct.op** %o, align 8
  %op_type35 = getelementptr inbounds %struct.op, %struct.op* %18, i32 0, i32 4
  %bf.load36 = load i16, i16* %op_type35, align 8
  %bf.clear37 = and i16 %bf.load36, 511
  %bf.cast38 = zext i16 %bf.clear37 to i32
  %cmp39 = icmp eq i32 %bf.cast38, 339
  br i1 %cmp39, label %if.then48, label %lor.lhs.false41

lor.lhs.false41:                                  ; preds = %lor.lhs.false34
  %19 = load %struct.op*, %struct.op** %o, align 8
  %op_type42 = getelementptr inbounds %struct.op, %struct.op* %19, i32 0, i32 4
  %bf.load43 = load i16, i16* %op_type42, align 8
  %bf.clear44 = and i16 %bf.load43, 511
  %bf.cast45 = zext i16 %bf.clear44 to i32
  %cmp46 = icmp eq i32 %bf.cast45, 217
  br i1 %cmp46, label %if.then48, label %if.end49

if.then48:                                        ; preds = %lor.lhs.false41, %lor.lhs.false34, %lor.lhs.false27, %land.lhs.true24, %land.lhs.true18
  br label %do.cond

if.end49:                                         ; preds = %lor.lhs.false41
  %20 = load %struct.op*, %struct.op** %o, align 8
  %op_private = getelementptr inbounds %struct.op, %struct.op* %20, i32 0, i32 6
  %21 = load i8, i8* %op_private, align 1
  %conv50 = zext i8 %21 to i32
  %and51 = and i32 %conv50, 16
  %tobool52 = icmp ne i32 %and51, 0
  br i1 %tobool52, label %land.lhs.true53, label %if.end61

land.lhs.true53:                                  ; preds = %if.end49
  %22 = load %struct.op*, %struct.op** %o, align 8
  %op_type54 = getelementptr inbounds %struct.op, %struct.op* %22, i32 0, i32 4
  %bf.load55 = load i16, i16* %op_type54, align 8
  %bf.clear56 = and i16 %bf.load55, 511
  %bf.cast57 = zext i16 %bf.clear56 to i32
  %idxprom = zext i32 %bf.cast57 to i64
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @PL_opargs, i64 0, i64 %idxprom
  %23 = load i32, i32* %arrayidx, align 4
  %and58 = and i32 %23, 16
  %tobool59 = icmp ne i32 %and58, 0
  br i1 %tobool59, label %if.then60, label %if.end61

if.then60:                                        ; preds = %land.lhs.true53
  br label %do.cond

if.end61:                                         ; preds = %land.lhs.true53, %if.end49
  %24 = load %struct.op*, %struct.op** %o, align 8
  %op_flags62 = getelementptr inbounds %struct.op, %struct.op* %24, i32 0, i32 5
  %25 = load i8, i8* %op_flags62, align 2
  %conv63 = zext i8 %25 to i32
  %and64 = and i32 %conv63, -4
  %or = or i32 %and64, 1
  %conv65 = trunc i32 %or to i8
  %26 = load %struct.op*, %struct.op** %o, align 8
  %op_flags66 = getelementptr inbounds %struct.op, %struct.op* %26, i32 0, i32 5
  store i8 %conv65, i8* %op_flags66, align 2
  %27 = load %struct.op*, %struct.op** %o, align 8
  %op_type67 = getelementptr inbounds %struct.op, %struct.op* %27, i32 0, i32 4
  %bf.load68 = load i16, i16* %op_type67, align 8
  %bf.clear69 = and i16 %bf.load68, 511
  %bf.cast70 = zext i16 %bf.clear69 to i32
  switch i32 %bf.cast70, label %sw.default [
    i32 62, label %sw.bb
    i32 121, label %sw.bb95
    i32 4, label %sw.bb102
    i32 7, label %sw.bb102
    i32 107, label %sw.bb102
    i32 16, label %sw.bb102
    i32 22, label %sw.bb102
    i32 20, label %sw.bb102
    i32 21, label %sw.bb102
    i32 43, label %sw.bb102
    i32 117, label %sw.bb102
    i32 118, label %sw.bb102
    i32 120, label %sw.bb102
    i32 122, label %sw.bb102
    i32 123, label %sw.bb102
    i32 124, label %sw.bb102
    i32 125, label %sw.bb102
    i32 140, label %sw.bb102
    i32 152, label %sw.bb102
    i32 154, label %sw.bb102
    i32 155, label %sw.bb102
    i32 157, label %sw.bb102
    i32 159, label %sw.bb102
    i32 160, label %sw.bb102
    i32 161, label %sw.bb102
    i32 167, label %sw.bb102
    i32 168, label %sw.bb102
    i32 173, label %sw.bb102
    i32 174, label %sw.bb102
    i32 175, label %sw.bb102
    i32 188, label %sw.bb102
    i32 223, label %sw.bb102
    i32 244, label %sw.bb102
    i32 245, label %sw.bb102
    i32 262, label %sw.bb102
    i32 263, label %sw.bb102
    i32 302, label %sw.bb102
    i32 307, label %sw.bb102
    i32 317, label %sw.bb102
    i32 318, label %sw.bb102
    i32 320, label %sw.bb102
    i32 322, label %sw.bb102
    i32 323, label %sw.bb102
    i32 324, label %sw.bb102
    i32 325, label %sw.bb102
    i32 346, label %sw.bb102
    i32 347, label %sw.bb102
    i32 348, label %sw.bb102
    i32 349, label %sw.bb102
    i32 350, label %sw.bb102
    i32 351, label %sw.bb102
    i32 352, label %sw.bb102
    i32 353, label %sw.bb102
    i32 354, label %sw.bb102
    i32 355, label %sw.bb102
    i32 356, label %sw.bb102
    i32 357, label %sw.bb102
    i32 366, label %sw.bb102
    i32 367, label %sw.bb102
    i32 371, label %sw.bb102
    i32 372, label %sw.bb102
    i32 376, label %sw.bb102
    i32 19, label %sw.bb102
    i32 385, label %sw.bb102
    i32 6, label %sw.bb116
    i32 9, label %sw.bb116
    i32 10, label %sw.bb116
    i32 11, label %sw.bb116
    i32 12, label %sw.bb116
    i32 138, label %sw.bb116
    i32 136, label %sw.bb116
    i32 137, label %sw.bb116
    i32 139, label %sw.bb116
    i32 150, label %sw.bb116
    i32 151, label %sw.bb116
    i32 156, label %sw.bb143
    i32 103, label %sw.bb185
    i32 33, label %sw.bb216
    i32 36, label %sw.bb221
    i32 14, label %sw.bb222
    i32 15, label %sw.bb222
    i32 135, label %sw.bb222
    i32 149, label %sw.bb222
    i32 5, label %sw.bb241
    i32 51, label %sw.bb306
    i32 53, label %sw.bb311
    i32 52, label %sw.bb319
    i32 54, label %sw.bb327
    i32 37, label %sw.bb335
    i32 38, label %sw.bb421
    i32 177, label %sw.bb422
    i32 176, label %sw.bb422
    i32 179, label %sw.bb460
    i32 180, label %sw.bb460
    i32 214, label %sw.bb460
    i32 216, label %sw.bb460
    i32 0, label %sw.bb485
    i32 193, label %sw.bb492
    i32 194, label %sw.bb492
    i32 344, label %sw.bb492
    i32 196, label %sw.bb492
    i32 198, label %sw.bb499
    i32 197, label %sw.bb499
    i32 345, label %sw.bb499
    i32 202, label %sw.bb499
    i32 192, label %sw.bb499
    i32 215, label %sw.bb499
    i32 217, label %sw.bb499
    i32 158, label %sw.bb530
    i32 342, label %sw.bb601
    i32 2, label %sw.bb603
  ]

sw.default:                                       ; preds = %if.end61
  %28 = load %struct.op*, %struct.op** %o, align 8
  %op_type71 = getelementptr inbounds %struct.op, %struct.op* %28, i32 0, i32 4
  %bf.load72 = load i16, i16* %op_type71, align 8
  %bf.clear73 = and i16 %bf.load72, 511
  %bf.cast74 = zext i16 %bf.clear73 to i32
  %idxprom75 = zext i32 %bf.cast74 to i64
  %arrayidx76 = getelementptr inbounds [0 x i32], [0 x i32]* @PL_opargs, i64 0, i64 %idxprom75
  %29 = load i32, i32* %arrayidx76, align 4
  %and77 = and i32 %29, 2
  %tobool78 = icmp ne i32 %and77, 0
  br i1 %tobool78, label %if.end80, label %if.then79

if.then79:                                        ; preds = %sw.default
  br label %sw.epilog

if.end80:                                         ; preds = %sw.default
  br label %sw.bb

sw.bb:                                            ; preds = %if.end61, %if.end80
  %30 = load %struct.op*, %struct.op** %o, align 8
  %op_flags81 = getelementptr inbounds %struct.op, %struct.op* %30, i32 0, i32 5
  %31 = load i8, i8* %op_flags81, align 2
  %conv82 = zext i8 %31 to i32
  %and83 = and i32 %conv82, 64
  %tobool84 = icmp ne i32 %and83, 0
  br i1 %tobool84, label %if.then85, label %if.end86

if.then85:                                        ; preds = %sw.bb
  br label %sw.epilog

if.end86:                                         ; preds = %sw.bb
  %32 = load %struct.op*, %struct.op** %o, align 8
  %op_type87 = getelementptr inbounds %struct.op, %struct.op* %32, i32 0, i32 4
  %bf.load88 = load i16, i16* %op_type87, align 8
  %bf.clear89 = and i16 %bf.load88, 511
  %bf.cast90 = zext i16 %bf.clear89 to i32
  %cmp91 = icmp eq i32 %bf.cast90, 62
  br i1 %cmp91, label %if.then93, label %if.end94

if.then93:                                        ; preds = %if.end86
  %33 = load %struct.op*, %struct.op** %o, align 8
  %34 = bitcast %struct.op* %33 to %struct.binop*
  %op_first = getelementptr inbounds %struct.binop, %struct.binop* %34, i32 0, i32 7
  %35 = load %struct.op*, %struct.op** %op_first, align 8
  %call = call %struct.op* @Perl_scalar(%struct.op* %35)
  br label %if.end94

if.end94:                                         ; preds = %if.then93, %if.end86
  br label %func_ops

sw.bb95:                                          ; preds = %if.end61
  %36 = load %struct.op*, %struct.op** %o, align 8
  %op_private96 = getelementptr inbounds %struct.op, %struct.op* %36, i32 0, i32 6
  %37 = load i8, i8* %op_private96, align 1
  %conv97 = zext i8 %37 to i32
  %cmp98 = icmp eq i32 %conv97, 4
  br i1 %cmp98, label %if.then100, label %if.end101

if.then100:                                       ; preds = %sw.bb95
  br label %sw.epilog

if.end101:                                        ; preds = %sw.bb95
  br label %sw.bb102

sw.bb102:                                         ; preds = %if.end61, %if.end61, %if.end61, %if.end61, %if.end61, %if.end61, %if.end61, %if.end61, %if.end61, %if.end61, %if.end61, %if.end61, %if.end61, %if.end61, %if.end61, %if.end61, %if.end61, %if.end61, %if.end61, %if.end61, %if.end61, %if.end61, %if.end61, %if.end61, %if.end61, %if.end61, %if.end61, %if.end61, %if.end61, %if.end61, %if.end61, %if.end61, %if.end61, %if.end61, %if.end61, %if.end61, %if.end61, %if.end61, %if.end61, %if.end61, %if.end61, %if.end61, %if.end61, %if.end61, %if.end61, %if.end61, %if.end61, %if.end61, %if.end61, %if.end61, %if.end61, %if.end61, %if.end61, %if.end61, %if.end61, %if.end61, %if.end61, %if.end61, %if.end61, %if.end61, %if.end61, %if.end61, %if.end101
  br label %func_ops

func_ops:                                         ; preds = %if.then214, %sw.bb102, %if.end94
  %38 = load %struct.op*, %struct.op** %o, align 8
  %op_type103 = getelementptr inbounds %struct.op, %struct.op* %38, i32 0, i32 4
  %bf.load104 = load i16, i16* %op_type103, align 8
  %bf.clear105 = and i16 %bf.load104, 511
  %bf.cast106 = zext i16 %bf.clear105 to i32
  %cmp107 = icmp eq i32 %bf.cast106, 380
  br i1 %cmp107, label %cond.true, label %cond.false

cond.true:                                        ; preds = %func_ops
  %39 = load %struct.op*, %struct.op** %o, align 8
  %call109 = call i8* @Perl_custom_op_get_field(%struct.op* %39, i32 2)
  %coerce.dive = getelementptr inbounds %union.XOPRETANY, %union.XOPRETANY* %coerce, i32 0, i32 0
  store i8* %call109, i8** %coerce.dive, align 8
  %xop_desc = bitcast %union.XOPRETANY* %coerce to i8**
  %40 = load i8*, i8** %xop_desc, align 8
  br label %cond.end

cond.false:                                       ; preds = %func_ops
  %41 = load %struct.op*, %struct.op** %o, align 8
  %op_type110 = getelementptr inbounds %struct.op, %struct.op* %41, i32 0, i32 4
  %bf.load111 = load i16, i16* %op_type110, align 8
  %bf.clear112 = and i16 %bf.load111, 511
  %bf.cast113 = zext i16 %bf.clear112 to i32
  %idxprom114 = zext i32 %bf.cast113 to i64
  %arrayidx115 = getelementptr inbounds [0 x i8*], [0 x i8*]* @PL_op_desc, i64 0, i64 %idxprom114
  %42 = load i8*, i8** %arrayidx115, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %40, %cond.true ], [ %42, %cond.false ]
  store i8* %cond, i8** %useless, align 8
  br label %sw.epilog

sw.bb116:                                         ; preds = %if.end61, %if.end61, %if.end61, %if.end61, %if.end61, %if.end61, %if.end61, %if.end61, %if.end61, %if.end61, %if.end61
  %43 = load %struct.op*, %struct.op** %o, align 8
  %op_private117 = getelementptr inbounds %struct.op, %struct.op* %43, i32 0, i32 6
  %44 = load i8, i8* %op_private117, align 1
  %conv118 = zext i8 %44 to i32
  %and119 = and i32 %conv118, 192
  %tobool120 = icmp ne i32 %and119, 0
  br i1 %tobool120, label %if.end142, label %if.then121

if.then121:                                       ; preds = %sw.bb116
  %45 = load %struct.op*, %struct.op** %o, align 8
  %op_type122 = getelementptr inbounds %struct.op, %struct.op* %45, i32 0, i32 4
  %bf.load123 = load i16, i16* %op_type122, align 8
  %bf.clear124 = and i16 %bf.load123, 511
  %bf.cast125 = zext i16 %bf.clear124 to i32
  %cmp126 = icmp eq i32 %bf.cast125, 380
  br i1 %cmp126, label %cond.true128, label %cond.false133

cond.true128:                                     ; preds = %if.then121
  %46 = load %struct.op*, %struct.op** %o, align 8
  %call129 = call i8* @Perl_custom_op_get_field(%struct.op* %46, i32 2)
  %coerce.dive131 = getelementptr inbounds %union.XOPRETANY, %union.XOPRETANY* %coerce130, i32 0, i32 0
  store i8* %call129, i8** %coerce.dive131, align 8
  %xop_desc132 = bitcast %union.XOPRETANY* %coerce130 to i8**
  %47 = load i8*, i8** %xop_desc132, align 8
  br label %cond.end140

cond.false133:                                    ; preds = %if.then121
  %48 = load %struct.op*, %struct.op** %o, align 8
  %op_type134 = getelementptr inbounds %struct.op, %struct.op* %48, i32 0, i32 4
  %bf.load135 = load i16, i16* %op_type134, align 8
  %bf.clear136 = and i16 %bf.load135, 511
  %bf.cast137 = zext i16 %bf.clear136 to i32
  %idxprom138 = zext i32 %bf.cast137 to i64
  %arrayidx139 = getelementptr inbounds [0 x i8*], [0 x i8*]* @PL_op_desc, i64 0, i64 %idxprom138
  %49 = load i8*, i8** %arrayidx139, align 8
  br label %cond.end140

cond.end140:                                      ; preds = %cond.false133, %cond.true128
  %cond141 = phi i8* [ %47, %cond.true128 ], [ %49, %cond.false133 ]
  store i8* %cond141, i8** %useless, align 8
  br label %if.end142

if.end142:                                        ; preds = %cond.end140, %sw.bb116
  br label %sw.epilog

sw.bb143:                                         ; preds = %if.end61
  %50 = load %struct.op*, %struct.op** %o, align 8
  %51 = bitcast %struct.op* %50 to %struct.listop*
  %op_first144 = getelementptr inbounds %struct.listop, %struct.listop* %51, i32 0, i32 7
  %52 = load %struct.op*, %struct.op** %op_first144, align 8
  store %struct.op* %52, %struct.op** %kid, align 8
  %53 = load %struct.op*, %struct.op** %kid, align 8
  %tobool145 = icmp ne %struct.op* %53, null
  br i1 %tobool145, label %land.lhs.true146, label %if.end184

land.lhs.true146:                                 ; preds = %sw.bb143
  %54 = load %struct.op*, %struct.op** %kid, align 8
  %op_type147 = getelementptr inbounds %struct.op, %struct.op* %54, i32 0, i32 4
  %bf.load148 = load i16, i16* %op_type147, align 8
  %bf.clear149 = and i16 %bf.load148, 511
  %bf.cast150 = zext i16 %bf.clear149 to i32
  %cmp151 = icmp eq i32 %bf.cast150, 13
  br i1 %cmp151, label %land.lhs.true153, label %if.end184

land.lhs.true153:                                 ; preds = %land.lhs.true146
  %55 = load %struct.op*, %struct.op** %kid, align 8
  %op_targ154 = getelementptr inbounds %struct.op, %struct.op* %55, i32 0, i32 3
  %56 = load i64, i64* %op_targ154, align 8
  %tobool155 = icmp ne i64 %56, 0
  br i1 %tobool155, label %if.end184, label %land.lhs.true156

land.lhs.true156:                                 ; preds = %land.lhs.true153
  %57 = load %struct.op*, %struct.op** %o, align 8
  %op_flags157 = getelementptr inbounds %struct.op, %struct.op* %57, i32 0, i32 5
  %58 = load i8, i8* %op_flags157, align 2
  %conv158 = zext i8 %58 to i32
  %and159 = and i32 %conv158, 64
  %tobool160 = icmp ne i32 %and159, 0
  br i1 %tobool160, label %if.end184, label %land.lhs.true161

land.lhs.true161:                                 ; preds = %land.lhs.true156
  %59 = load %struct.op*, %struct.op** %kid, align 8
  %60 = bitcast %struct.op* %59 to %struct.pmop*
  %op_pmreplrootu = getelementptr inbounds %struct.pmop, %struct.pmop* %60, i32 0, i32 11
  %op_pmtargetgv = bitcast %union.anon.18* %op_pmreplrootu to %struct.gv**
  %61 = load %struct.gv*, %struct.gv** %op_pmtargetgv, align 8
  %tobool162 = icmp ne %struct.gv* %61, null
  br i1 %tobool162, label %if.end184, label %if.then163

if.then163:                                       ; preds = %land.lhs.true161
  %62 = load %struct.op*, %struct.op** %o, align 8
  %op_type164 = getelementptr inbounds %struct.op, %struct.op* %62, i32 0, i32 4
  %bf.load165 = load i16, i16* %op_type164, align 8
  %bf.clear166 = and i16 %bf.load165, 511
  %bf.cast167 = zext i16 %bf.clear166 to i32
  %cmp168 = icmp eq i32 %bf.cast167, 380
  br i1 %cmp168, label %cond.true170, label %cond.false175

cond.true170:                                     ; preds = %if.then163
  %63 = load %struct.op*, %struct.op** %o, align 8
  %call171 = call i8* @Perl_custom_op_get_field(%struct.op* %63, i32 2)
  %coerce.dive173 = getelementptr inbounds %union.XOPRETANY, %union.XOPRETANY* %coerce172, i32 0, i32 0
  store i8* %call171, i8** %coerce.dive173, align 8
  %xop_desc174 = bitcast %union.XOPRETANY* %coerce172 to i8**
  %64 = load i8*, i8** %xop_desc174, align 8
  br label %cond.end182

cond.false175:                                    ; preds = %if.then163
  %65 = load %struct.op*, %struct.op** %o, align 8
  %op_type176 = getelementptr inbounds %struct.op, %struct.op* %65, i32 0, i32 4
  %bf.load177 = load i16, i16* %op_type176, align 8
  %bf.clear178 = and i16 %bf.load177, 511
  %bf.cast179 = zext i16 %bf.clear178 to i32
  %idxprom180 = zext i32 %bf.cast179 to i64
  %arrayidx181 = getelementptr inbounds [0 x i8*], [0 x i8*]* @PL_op_desc, i64 0, i64 %idxprom180
  %66 = load i8*, i8** %arrayidx181, align 8
  br label %cond.end182

cond.end182:                                      ; preds = %cond.false175, %cond.true170
  %cond183 = phi i8* [ %64, %cond.true170 ], [ %66, %cond.false175 ]
  store i8* %cond183, i8** %useless, align 8
  br label %if.end184

if.end184:                                        ; preds = %cond.end182, %land.lhs.true161, %land.lhs.true156, %land.lhs.true153, %land.lhs.true146, %sw.bb143
  br label %sw.epilog

sw.bb185:                                         ; preds = %if.end61
  %67 = load %struct.op*, %struct.op** %o, align 8
  %68 = bitcast %struct.op* %67 to %struct.unop*
  %op_first186 = getelementptr inbounds %struct.unop, %struct.unop* %68, i32 0, i32 7
  %69 = load %struct.op*, %struct.op** %op_first186, align 8
  store %struct.op* %69, %struct.op** %kid, align 8
  %70 = load %struct.op*, %struct.op** %kid, align 8
  %op_type187 = getelementptr inbounds %struct.op, %struct.op* %70, i32 0, i32 4
  %bf.load188 = load i16, i16* %op_type187, align 8
  %bf.clear189 = and i16 %bf.load188, 511
  %bf.cast190 = zext i16 %bf.clear189 to i32
  %cmp191 = icmp ne i32 %bf.cast190, 31
  br i1 %cmp191, label %land.lhs.true193, label %if.end215

land.lhs.true193:                                 ; preds = %sw.bb185
  %71 = load %struct.op*, %struct.op** %kid, align 8
  %op_type194 = getelementptr inbounds %struct.op, %struct.op* %71, i32 0, i32 4
  %bf.load195 = load i16, i16* %op_type194, align 8
  %bf.clear196 = and i16 %bf.load195, 511
  %bf.cast197 = zext i16 %bf.clear196 to i32
  %cmp198 = icmp ne i32 %bf.cast197, 33
  br i1 %cmp198, label %land.lhs.true200, label %if.end215

land.lhs.true200:                                 ; preds = %land.lhs.true193
  %72 = load %struct.op*, %struct.op** %kid, align 8
  %op_type201 = getelementptr inbounds %struct.op, %struct.op* %72, i32 0, i32 4
  %bf.load202 = load i16, i16* %op_type201, align 8
  %bf.clear203 = and i16 %bf.load202, 511
  %bf.cast204 = zext i16 %bf.clear203 to i32
  %cmp205 = icmp ne i32 %bf.cast204, 35
  br i1 %cmp205, label %land.lhs.true207, label %if.end215

land.lhs.true207:                                 ; preds = %land.lhs.true200
  %73 = load %struct.op*, %struct.op** %kid, align 8
  %op_type208 = getelementptr inbounds %struct.op, %struct.op* %73, i32 0, i32 4
  %bf.load209 = load i16, i16* %op_type208, align 8
  %bf.clear210 = and i16 %bf.load209, 511
  %bf.cast211 = zext i16 %bf.clear210 to i32
  %cmp212 = icmp ne i32 %bf.cast211, 36
  br i1 %cmp212, label %if.then214, label %if.end215

if.then214:                                       ; preds = %land.lhs.true207
  br label %func_ops

if.end215:                                        ; preds = %land.lhs.true207, %land.lhs.true200, %land.lhs.true193, %sw.bb185
  store i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.13, i64 0, i64 0), i8** %useless, align 8
  br label %sw.epilog

sw.bb216:                                         ; preds = %if.end61
  %74 = load %struct.op*, %struct.op** %o, align 8
  %75 = bitcast %struct.op* %74 to %struct.pmop*
  %op_pmflags = getelementptr inbounds %struct.pmop, %struct.pmop* %75, i32 0, i32 10
  %76 = load i32, i32* %op_pmflags, align 8
  %and217 = and i32 %76, 134217728
  %tobool218 = icmp ne i32 %and217, 0
  br i1 %tobool218, label %if.then219, label %if.end220

if.then219:                                       ; preds = %sw.bb216
  store i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.14, i64 0, i64 0), i8** %useless, align 8
  br label %if.end220

if.end220:                                        ; preds = %if.then219, %sw.bb216
  br label %sw.epilog

sw.bb221:                                         ; preds = %if.end61
  store i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.15, i64 0, i64 0), i8** %useless, align 8
  br label %sw.epilog

sw.bb222:                                         ; preds = %if.end61, %if.end61, %if.end61, %if.end61
  %77 = load %struct.op*, %struct.op** %o, align 8
  %op_private223 = getelementptr inbounds %struct.op, %struct.op* %77, i32 0, i32 6
  %78 = load i8, i8* %op_private223, align 1
  %conv224 = zext i8 %78 to i32
  %and225 = and i32 %conv224, 192
  %tobool226 = icmp ne i32 %and225, 0
  br i1 %tobool226, label %if.end240, label %land.lhs.true227

land.lhs.true227:                                 ; preds = %sw.bb222
  %79 = load %struct.op*, %struct.op** %o, align 8
  %op_sibling = getelementptr inbounds %struct.op, %struct.op* %79, i32 0, i32 1
  %80 = load %struct.op*, %struct.op** %op_sibling, align 8
  %tobool228 = icmp ne %struct.op* %80, null
  br i1 %tobool228, label %cond.true229, label %cond.false230

cond.true229:                                     ; preds = %land.lhs.true227
  br i1 true, label %lor.lhs.false231, label %if.then239

cond.false230:                                    ; preds = %land.lhs.true227
  br i1 false, label %lor.lhs.false231, label %if.then239

lor.lhs.false231:                                 ; preds = %cond.false230, %cond.true229
  %81 = load %struct.op*, %struct.op** %o, align 8
  %op_sibling232 = getelementptr inbounds %struct.op, %struct.op* %81, i32 0, i32 1
  %82 = load %struct.op*, %struct.op** %op_sibling232, align 8
  %add.ptr = getelementptr inbounds %struct.op, %struct.op* %82, i64 0
  %op_type233 = getelementptr inbounds %struct.op, %struct.op* %add.ptr, i32 0, i32 4
  %bf.load234 = load i16, i16* %op_type233, align 8
  %bf.clear235 = and i16 %bf.load234, 511
  %bf.cast236 = zext i16 %bf.clear235 to i32
  %cmp237 = icmp ne i32 %bf.cast236, 26
  br i1 %cmp237, label %if.then239, label %if.end240

if.then239:                                       ; preds = %lor.lhs.false231, %cond.false230, %cond.true229
  store i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.16, i64 0, i64 0), i8** %useless, align 8
  br label %if.end240

if.end240:                                        ; preds = %if.then239, %lor.lhs.false231, %sw.bb222
  br label %sw.epilog

sw.bb241:                                         ; preds = %if.end61
  %83 = load %struct.op*, %struct.op** %o, align 8
  %84 = bitcast %struct.op* %83 to %struct.svop*
  %op_sv = getelementptr inbounds %struct.svop, %struct.svop* %84, i32 0, i32 7
  %85 = load %struct.sv*, %struct.sv** %op_sv, align 8
  store %struct.sv* %85, %struct.sv** %sv, align 8
  %86 = load %struct.op*, %struct.op** %o, align 8
  %87 = bitcast %struct.op* %86 to %struct.svop*
  %op_private242 = getelementptr inbounds %struct.svop, %struct.svop* %87, i32 0, i32 6
  %88 = load i8, i8* %op_private242, align 1
  %conv243 = zext i8 %88 to i32
  %and244 = and i32 %conv243, 8
  %tobool245 = icmp ne i32 %and244, 0
  br i1 %tobool245, label %if.then246, label %if.else

if.then246:                                       ; preds = %sw.bb241
  %89 = load %struct.op*, %struct.op** %o, align 8
  call void @S_no_bareword_allowed(%struct.op* %89)
  br label %if.end305

if.else:                                          ; preds = %sw.bb241
  %call247 = call zeroext i1 @Perl_ckwarn(i32 45)
  br i1 %call247, label %if.then248, label %if.end304

if.then248:                                       ; preds = %if.else
  %90 = load %struct.op*, %struct.op** %o, align 8
  %91 = bitcast %struct.op* %90 to %struct.svop*
  %op_private249 = getelementptr inbounds %struct.svop, %struct.svop* %91, i32 0, i32 6
  %92 = load i8, i8* %op_private249, align 1
  %conv250 = zext i8 %92 to i32
  %and251 = and i32 %conv250, 4
  %tobool252 = icmp ne i32 %and251, 0
  br i1 %tobool252, label %if.then253, label %if.else254

if.then253:                                       ; preds = %if.then248
  store i8* null, i8** %useless, align 8
  br label %if.end303

if.else254:                                       ; preds = %if.then248
  %93 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %93, i32 0, i32 2
  %94 = load i32, i32* %sv_flags, align 4
  %and255 = and i32 %94, 768
  %tobool256 = icmp ne i32 %and255, 0
  br i1 %tobool256, label %land.lhs.true257, label %if.else273

land.lhs.true257:                                 ; preds = %if.else254
  %95 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags258 = getelementptr inbounds %struct.sv, %struct.sv* %95, i32 0, i32 2
  %96 = load i32, i32* %sv_flags258, align 4
  %and259 = and i32 %96, 2097664
  %cmp260 = icmp eq i32 %and259, 512
  br i1 %cmp260, label %cond.true262, label %cond.false263

cond.true262:                                     ; preds = %land.lhs.true257
  %97 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %97, i32 0, i32 0
  %98 = load i8*, i8** %sv_any, align 8
  %99 = bitcast i8* %98 to %struct.xpvnv*
  %xnv_u = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %99, i32 0, i32 5
  %xnv_nv = bitcast %union._xnvu* %xnv_u to double*
  %100 = load double, double* %xnv_nv, align 8
  br label %cond.end265

cond.false263:                                    ; preds = %land.lhs.true257
  %101 = load %struct.sv*, %struct.sv** %sv, align 8
  %call264 = call double @Perl_sv_2nv_flags(%struct.sv* %101, i32 2)
  br label %cond.end265

cond.end265:                                      ; preds = %cond.false263, %cond.true262
  %cond266 = phi double [ %100, %cond.true262 ], [ %call264, %cond.false263 ]
  store double %cond266, double* %nv, align 8
  %cmp267 = fcmp oeq double %cond266, 0.000000e+00
  br i1 %cmp267, label %if.then272, label %lor.lhs.false269

lor.lhs.false269:                                 ; preds = %cond.end265
  %102 = load double, double* %nv, align 8
  %cmp270 = fcmp oeq double %102, 1.000000e+00
  br i1 %cmp270, label %if.then272, label %if.else273

if.then272:                                       ; preds = %lor.lhs.false269, %cond.end265
  store i8* null, i8** %useless, align 8
  br label %if.end302

if.else273:                                       ; preds = %lor.lhs.false269, %if.else254
  %103 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags274 = getelementptr inbounds %struct.sv, %struct.sv* %103, i32 0, i32 2
  %104 = load i32, i32* %sv_flags274, align 4
  %and275 = and i32 %104, 1024
  %tobool276 = icmp ne i32 %and275, 0
  br i1 %tobool276, label %if.then277, label %if.else283

if.then277:                                       ; preds = %if.else273
  %call278 = call %struct.sv* @Perl_newSVpvn(i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.17, i64 0, i64 0), i64 0)
  store %struct.sv* %call278, %struct.sv** %dsv, align 8
  %105 = load %struct.sv*, %struct.sv** %dsv, align 8
  %106 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %106, i32 0, i32 3
  %svu_pv = bitcast %union.anon* %sv_u to i8**
  %107 = load i8*, i8** %svu_pv, align 8
  %add.ptr279 = getelementptr inbounds i8, i8* %107, i64 0
  %108 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any280 = getelementptr inbounds %struct.sv, %struct.sv* %108, i32 0, i32 0
  %109 = load i8*, i8** %sv_any280, align 8
  %110 = bitcast i8* %109 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %110, i32 0, i32 2
  %111 = load i64, i64* %xpv_cur, align 8
  %call281 = call i8* @Perl_pv_pretty(%struct.sv* %105, i8* %add.ptr279, i64 %111, i64 32, i8* null, i8* null, i32 16899)
  %call282 = call %struct.sv* (i8*, ...) @Perl_newSVpvf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.18, i64 0, i64 0), i8* %call281)
  store %struct.sv* %call282, %struct.sv** %useless_sv, align 8
  %112 = load %struct.sv*, %struct.sv** %dsv, align 8
  %113 = bitcast %struct.sv* %112 to i8*
  %114 = bitcast i8* %113 to %struct.sv*
  call void @S_SvREFCNT_dec_NN(%struct.sv* %114)
  br label %if.end301

if.else283:                                       ; preds = %if.else273
  %115 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags284 = getelementptr inbounds %struct.sv, %struct.sv* %115, i32 0, i32 2
  %116 = load i32, i32* %sv_flags284, align 4
  %and285 = and i32 %116, 65280
  %tobool286 = icmp ne i32 %and285, 0
  br i1 %tobool286, label %if.then297, label %lor.lhs.false287

lor.lhs.false287:                                 ; preds = %if.else283
  %117 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags288 = getelementptr inbounds %struct.sv, %struct.sv* %117, i32 0, i32 2
  %118 = load i32, i32* %sv_flags288, align 4
  %and289 = and i32 %118, 255
  %cmp290 = icmp eq i32 %and289, 8
  br i1 %cmp290, label %if.then297, label %lor.lhs.false292

lor.lhs.false292:                                 ; preds = %lor.lhs.false287
  %119 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags293 = getelementptr inbounds %struct.sv, %struct.sv* %119, i32 0, i32 2
  %120 = load i32, i32* %sv_flags293, align 4
  %and294 = and i32 %120, 16826623
  %cmp295 = icmp eq i32 %and294, 16777226
  br i1 %cmp295, label %if.then297, label %if.else299

if.then297:                                       ; preds = %lor.lhs.false292, %lor.lhs.false287, %if.else283
  %121 = load %struct.sv*, %struct.sv** %sv, align 8
  %122 = bitcast %struct.sv* %121 to i8*
  %call298 = call %struct.sv* (i8*, ...) @Perl_newSVpvf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.19, i64 0, i64 0), i8* %122)
  store %struct.sv* %call298, %struct.sv** %useless_sv, align 8
  br label %if.end300

if.else299:                                       ; preds = %lor.lhs.false292
  store i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.20, i64 0, i64 0), i8** %useless, align 8
  br label %if.end300

if.end300:                                        ; preds = %if.else299, %if.then297
  br label %if.end301

if.end301:                                        ; preds = %if.end300, %if.then277
  br label %if.end302

if.end302:                                        ; preds = %if.end301, %if.then272
  br label %if.end303

if.end303:                                        ; preds = %if.end302, %if.then253
  br label %if.end304

if.end304:                                        ; preds = %if.end303, %if.else
  br label %if.end305

if.end305:                                        ; preds = %if.end304, %if.then246
  %123 = load %struct.op*, %struct.op** %o, align 8
  call void @Perl_op_null(%struct.op* %123)
  br label %sw.epilog

sw.bb306:                                         ; preds = %if.end61
  br label %do.body307

do.body307:                                       ; preds = %sw.bb306
  %124 = load %struct.op*, %struct.op** %o, align 8
  %op_type308 = getelementptr inbounds %struct.op, %struct.op* %124, i32 0, i32 4
  %bf.load309 = load i16, i16* %op_type308, align 8
  %bf.clear310 = and i16 %bf.load309, -512
  %bf.set = or i16 %bf.clear310, 47
  store i16 %bf.set, i16* %op_type308, align 8
  %125 = load %struct.op* ()*, %struct.op* ()** getelementptr inbounds ([0 x %struct.op* ()*], [0 x %struct.op* ()*]* @PL_ppaddr, i64 0, i64 47), align 8
  %126 = load %struct.op*, %struct.op** %o, align 8
  %op_ppaddr = getelementptr inbounds %struct.op, %struct.op* %126, i32 0, i32 2
  store %struct.op* ()* %125, %struct.op* ()** %op_ppaddr, align 8
  br label %do.end

do.end:                                           ; preds = %do.body307
  br label %sw.epilog

sw.bb311:                                         ; preds = %if.end61
  br label %do.body312

do.body312:                                       ; preds = %sw.bb311
  %127 = load %struct.op*, %struct.op** %o, align 8
  %op_type313 = getelementptr inbounds %struct.op, %struct.op* %127, i32 0, i32 4
  %bf.load314 = load i16, i16* %op_type313, align 8
  %bf.clear315 = and i16 %bf.load314, -512
  %bf.set316 = or i16 %bf.clear315, 49
  store i16 %bf.set316, i16* %op_type313, align 8
  %128 = load %struct.op* ()*, %struct.op* ()** getelementptr inbounds ([0 x %struct.op* ()*], [0 x %struct.op* ()*]* @PL_ppaddr, i64 0, i64 49), align 8
  %129 = load %struct.op*, %struct.op** %o, align 8
  %op_ppaddr317 = getelementptr inbounds %struct.op, %struct.op* %129, i32 0, i32 2
  store %struct.op* ()* %128, %struct.op* ()** %op_ppaddr317, align 8
  br label %do.end318

do.end318:                                        ; preds = %do.body312
  br label %sw.epilog

sw.bb319:                                         ; preds = %if.end61
  br label %do.body320

do.body320:                                       ; preds = %sw.bb319
  %130 = load %struct.op*, %struct.op** %o, align 8
  %op_type321 = getelementptr inbounds %struct.op, %struct.op* %130, i32 0, i32 4
  %bf.load322 = load i16, i16* %op_type321, align 8
  %bf.clear323 = and i16 %bf.load322, -512
  %bf.set324 = or i16 %bf.clear323, 48
  store i16 %bf.set324, i16* %op_type321, align 8
  %131 = load %struct.op* ()*, %struct.op* ()** getelementptr inbounds ([0 x %struct.op* ()*], [0 x %struct.op* ()*]* @PL_ppaddr, i64 0, i64 48), align 8
  %132 = load %struct.op*, %struct.op** %o, align 8
  %op_ppaddr325 = getelementptr inbounds %struct.op, %struct.op* %132, i32 0, i32 2
  store %struct.op* ()* %131, %struct.op* ()** %op_ppaddr325, align 8
  br label %do.end326

do.end326:                                        ; preds = %do.body320
  br label %sw.epilog

sw.bb327:                                         ; preds = %if.end61
  br label %do.body328

do.body328:                                       ; preds = %sw.bb327
  %133 = load %struct.op*, %struct.op** %o, align 8
  %op_type329 = getelementptr inbounds %struct.op, %struct.op* %133, i32 0, i32 4
  %bf.load330 = load i16, i16* %op_type329, align 8
  %bf.clear331 = and i16 %bf.load330, -512
  %bf.set332 = or i16 %bf.clear331, 50
  store i16 %bf.set332, i16* %op_type329, align 8
  %134 = load %struct.op* ()*, %struct.op* ()** getelementptr inbounds ([0 x %struct.op* ()*], [0 x %struct.op* ()*]* @PL_ppaddr, i64 0, i64 50), align 8
  %135 = load %struct.op*, %struct.op** %o, align 8
  %op_ppaddr333 = getelementptr inbounds %struct.op, %struct.op* %135, i32 0, i32 2
  store %struct.op* ()* %134, %struct.op* ()** %op_ppaddr333, align 8
  br label %do.end334

do.end334:                                        ; preds = %do.body328
  br label %sw.epilog

sw.bb335:                                         ; preds = %if.end61
  %136 = load %struct.op*, %struct.op** %o, align 8
  %op_private336 = getelementptr inbounds %struct.op, %struct.op* %136, i32 0, i32 6
  %137 = load i8, i8* %op_private336, align 1
  %conv337 = zext i8 %137 to i32
  %and338 = and i32 %conv337, -65
  %cmp339 = icmp ne i32 %and338, 2
  br i1 %cmp339, label %if.then341, label %if.end342

if.then341:                                       ; preds = %sw.bb335
  br label %sw.epilog

if.end342:                                        ; preds = %sw.bb335
  %138 = load %struct.op*, %struct.op** %o, align 8
  %139 = bitcast %struct.op* %138 to %struct.binop*
  %op_last = getelementptr inbounds %struct.binop, %struct.binop* %139, i32 0, i32 8
  %140 = load %struct.op*, %struct.op** %op_last, align 8
  store %struct.op* %140, %struct.op** %rv2gv, align 8
  %141 = load %struct.op*, %struct.op** %rv2gv, align 8
  %tobool343 = icmp ne %struct.op* %141, null
  br i1 %tobool343, label %lor.lhs.false344, label %if.then351

lor.lhs.false344:                                 ; preds = %if.end342
  %142 = load %struct.op*, %struct.op** %rv2gv, align 8
  %op_type345 = getelementptr inbounds %struct.op, %struct.op* %142, i32 0, i32 4
  %bf.load346 = load i16, i16* %op_type345, align 8
  %bf.clear347 = and i16 %bf.load346, 511
  %bf.cast348 = zext i16 %bf.clear347 to i32
  %cmp349 = icmp ne i32 %bf.cast348, 14
  br i1 %cmp349, label %if.then351, label %if.end352

if.then351:                                       ; preds = %lor.lhs.false344, %if.end342
  br label %sw.epilog

if.end352:                                        ; preds = %lor.lhs.false344
  %143 = load %struct.op*, %struct.op** %o, align 8
  %144 = bitcast %struct.op* %143 to %struct.binop*
  %op_first353 = getelementptr inbounds %struct.binop, %struct.binop* %144, i32 0, i32 7
  %145 = load %struct.op*, %struct.op** %op_first353, align 8
  %146 = bitcast %struct.op* %145 to %struct.unop*
  store %struct.unop* %146, %struct.unop** %refgen, align 8
  %147 = load %struct.unop*, %struct.unop** %refgen, align 8
  %tobool354 = icmp ne %struct.unop* %147, null
  br i1 %tobool354, label %lor.lhs.false355, label %if.then369

lor.lhs.false355:                                 ; preds = %if.end352
  %148 = load %struct.unop*, %struct.unop** %refgen, align 8
  %op_type356 = getelementptr inbounds %struct.unop, %struct.unop* %148, i32 0, i32 4
  %bf.load357 = load i16, i16* %op_type356, align 8
  %bf.clear358 = and i16 %bf.load357, 511
  %bf.cast359 = zext i16 %bf.clear358 to i32
  %cmp360 = icmp ne i32 %bf.cast359, 20
  br i1 %cmp360, label %land.lhs.true362, label %if.end370

land.lhs.true362:                                 ; preds = %lor.lhs.false355
  %149 = load %struct.unop*, %struct.unop** %refgen, align 8
  %op_type363 = getelementptr inbounds %struct.unop, %struct.unop* %149, i32 0, i32 4
  %bf.load364 = load i16, i16* %op_type363, align 8
  %bf.clear365 = and i16 %bf.load364, 511
  %bf.cast366 = zext i16 %bf.clear365 to i32
  %cmp367 = icmp ne i32 %bf.cast366, 21
  br i1 %cmp367, label %if.then369, label %if.end370

if.then369:                                       ; preds = %land.lhs.true362, %if.end352
  br label %sw.epilog

if.end370:                                        ; preds = %land.lhs.true362, %lor.lhs.false355
  %150 = load %struct.unop*, %struct.unop** %refgen, align 8
  %op_first371 = getelementptr inbounds %struct.unop, %struct.unop* %150, i32 0, i32 7
  %151 = load %struct.op*, %struct.op** %op_first371, align 8
  %152 = bitcast %struct.op* %151 to %struct.listop*
  store %struct.listop* %152, %struct.listop** %exlist, align 8
  %153 = load %struct.listop*, %struct.listop** %exlist, align 8
  %tobool372 = icmp ne %struct.listop* %153, null
  br i1 %tobool372, label %lor.lhs.false373, label %if.then384

lor.lhs.false373:                                 ; preds = %if.end370
  %154 = load %struct.listop*, %struct.listop** %exlist, align 8
  %op_type374 = getelementptr inbounds %struct.listop, %struct.listop* %154, i32 0, i32 4
  %bf.load375 = load i16, i16* %op_type374, align 8
  %bf.clear376 = and i16 %bf.load375, 511
  %bf.cast377 = zext i16 %bf.clear376 to i32
  %cmp378 = icmp ne i32 %bf.cast377, 0
  br i1 %cmp378, label %if.then384, label %lor.lhs.false380

lor.lhs.false380:                                 ; preds = %lor.lhs.false373
  %155 = load %struct.listop*, %struct.listop** %exlist, align 8
  %op_targ381 = getelementptr inbounds %struct.listop, %struct.listop* %155, i32 0, i32 3
  %156 = load i64, i64* %op_targ381, align 8
  %cmp382 = icmp ne i64 %156, 158
  br i1 %cmp382, label %if.then384, label %if.end385

if.then384:                                       ; preds = %lor.lhs.false380, %lor.lhs.false373, %if.end370
  br label %sw.epilog

if.end385:                                        ; preds = %lor.lhs.false380
  %157 = load %struct.listop*, %struct.listop** %exlist, align 8
  %op_first386 = getelementptr inbounds %struct.listop, %struct.listop* %157, i32 0, i32 7
  %158 = load %struct.op*, %struct.op** %op_first386, align 8
  %op_type387 = getelementptr inbounds %struct.op, %struct.op* %158, i32 0, i32 4
  %bf.load388 = load i16, i16* %op_type387, align 8
  %bf.clear389 = and i16 %bf.load388, 511
  %bf.cast390 = zext i16 %bf.clear389 to i32
  %cmp391 = icmp ne i32 %bf.cast390, 3
  br i1 %cmp391, label %land.lhs.true393, label %if.end399

land.lhs.true393:                                 ; preds = %if.end385
  %159 = load %struct.listop*, %struct.listop** %exlist, align 8
  %op_first394 = getelementptr inbounds %struct.listop, %struct.listop* %159, i32 0, i32 7
  %160 = load %struct.op*, %struct.op** %op_first394, align 8
  %161 = load %struct.listop*, %struct.listop** %exlist, align 8
  %op_last395 = getelementptr inbounds %struct.listop, %struct.listop* %161, i32 0, i32 8
  %162 = load %struct.op*, %struct.op** %op_last395, align 8
  %cmp396 = icmp ne %struct.op* %160, %162
  br i1 %cmp396, label %if.then398, label %if.end399

if.then398:                                       ; preds = %land.lhs.true393
  br label %sw.epilog

if.end399:                                        ; preds = %land.lhs.true393, %if.end385
  %163 = load %struct.listop*, %struct.listop** %exlist, align 8
  %op_last400 = getelementptr inbounds %struct.listop, %struct.listop* %163, i32 0, i32 8
  %164 = load %struct.op*, %struct.op** %op_last400, align 8
  %165 = bitcast %struct.op* %164 to %struct.unop*
  store %struct.unop* %165, %struct.unop** %rv2cv, align 8
  %166 = load %struct.unop*, %struct.unop** %rv2cv, align 8
  %op_type401 = getelementptr inbounds %struct.unop, %struct.unop* %166, i32 0, i32 4
  %bf.load402 = load i16, i16* %op_type401, align 8
  %bf.clear403 = and i16 %bf.load402, 511
  %bf.cast404 = zext i16 %bf.clear403 to i32
  %cmp405 = icmp ne i32 %bf.cast404, 17
  br i1 %cmp405, label %if.then407, label %if.end408

if.then407:                                       ; preds = %if.end399
  br label %sw.epilog

if.end408:                                        ; preds = %if.end399
  %167 = load %struct.op*, %struct.op** %o, align 8
  %op_private409 = getelementptr inbounds %struct.op, %struct.op* %167, i32 0, i32 6
  %168 = load i8, i8* %op_private409, align 1
  %conv410 = zext i8 %168 to i32
  %or411 = or i32 %conv410, 128
  %conv412 = trunc i32 %or411 to i8
  store i8 %conv412, i8* %op_private409, align 1
  %169 = load %struct.op*, %struct.op** %rv2gv, align 8
  %op_private413 = getelementptr inbounds %struct.op, %struct.op* %169, i32 0, i32 6
  %170 = load i8, i8* %op_private413, align 1
  %conv414 = zext i8 %170 to i32
  %or415 = or i32 %conv414, 4
  %conv416 = trunc i32 %or415 to i8
  store i8 %conv416, i8* %op_private413, align 1
  %171 = load %struct.unop*, %struct.unop** %rv2cv, align 8
  %op_private417 = getelementptr inbounds %struct.unop, %struct.unop* %171, i32 0, i32 6
  %172 = load i8, i8* %op_private417, align 1
  %conv418 = zext i8 %172 to i32
  %or419 = or i32 %conv418, 32
  %conv420 = trunc i32 %or419 to i8
  store i8 %conv420, i8* %op_private417, align 1
  br label %sw.epilog

sw.bb421:                                         ; preds = %if.end61
  %173 = load %struct.op*, %struct.op** %o, align 8
  call void @S_inplace_aassign(%struct.op* %173)
  br label %sw.epilog

sw.bb422:                                         ; preds = %if.end61, %if.end61
  %174 = load %struct.op*, %struct.op** %o, align 8
  %175 = bitcast %struct.op* %174 to %struct.logop*
  %op_first423 = getelementptr inbounds %struct.logop, %struct.logop* %175, i32 0, i32 7
  %176 = load %struct.op*, %struct.op** %op_first423, align 8
  store %struct.op* %176, %struct.op** %kid, align 8
  %177 = load %struct.op*, %struct.op** %kid, align 8
  %op_type424 = getelementptr inbounds %struct.op, %struct.op* %177, i32 0, i32 4
  %bf.load425 = load i16, i16* %op_type424, align 8
  %bf.clear426 = and i16 %bf.load425, 511
  %bf.cast427 = zext i16 %bf.clear426 to i32
  %cmp428 = icmp eq i32 %bf.cast427, 103
  br i1 %cmp428, label %land.lhs.true430, label %if.end459

land.lhs.true430:                                 ; preds = %sw.bb422
  %178 = load %struct.op*, %struct.op** %kid, align 8
  %op_flags431 = getelementptr inbounds %struct.op, %struct.op* %178, i32 0, i32 5
  %179 = load i8, i8* %op_flags431, align 2
  %conv432 = zext i8 %179 to i32
  %and433 = and i32 %conv432, 4
  %tobool434 = icmp ne i32 %and433, 0
  br i1 %tobool434, label %if.then435, label %if.end459

if.then435:                                       ; preds = %land.lhs.true430
  %180 = load %struct.op*, %struct.op** %o, align 8
  %op_type436 = getelementptr inbounds %struct.op, %struct.op* %180, i32 0, i32 4
  %bf.load437 = load i16, i16* %op_type436, align 8
  %bf.clear438 = and i16 %bf.load437, 511
  %bf.cast439 = zext i16 %bf.clear438 to i32
  %cmp440 = icmp eq i32 %bf.cast439, 176
  br i1 %cmp440, label %if.then442, label %if.else450

if.then442:                                       ; preds = %if.then435
  br label %do.body443

do.body443:                                       ; preds = %if.then442
  %181 = load %struct.op*, %struct.op** %o, align 8
  %op_type444 = getelementptr inbounds %struct.op, %struct.op* %181, i32 0, i32 4
  %bf.load445 = load i16, i16* %op_type444, align 8
  %bf.clear446 = and i16 %bf.load445, -512
  %bf.set447 = or i16 %bf.clear446, 177
  store i16 %bf.set447, i16* %op_type444, align 8
  %182 = load %struct.op* ()*, %struct.op* ()** getelementptr inbounds ([0 x %struct.op* ()*], [0 x %struct.op* ()*]* @PL_ppaddr, i64 0, i64 177), align 8
  %183 = load %struct.op*, %struct.op** %o, align 8
  %op_ppaddr448 = getelementptr inbounds %struct.op, %struct.op* %183, i32 0, i32 2
  store %struct.op* ()* %182, %struct.op* ()** %op_ppaddr448, align 8
  br label %do.end449

do.end449:                                        ; preds = %do.body443
  br label %if.end458

if.else450:                                       ; preds = %if.then435
  br label %do.body451

do.body451:                                       ; preds = %if.else450
  %184 = load %struct.op*, %struct.op** %o, align 8
  %op_type452 = getelementptr inbounds %struct.op, %struct.op* %184, i32 0, i32 4
  %bf.load453 = load i16, i16* %op_type452, align 8
  %bf.clear454 = and i16 %bf.load453, -512
  %bf.set455 = or i16 %bf.clear454, 176
  store i16 %bf.set455, i16* %op_type452, align 8
  %185 = load %struct.op* ()*, %struct.op* ()** getelementptr inbounds ([0 x %struct.op* ()*], [0 x %struct.op* ()*]* @PL_ppaddr, i64 0, i64 176), align 8
  %186 = load %struct.op*, %struct.op** %o, align 8
  %op_ppaddr456 = getelementptr inbounds %struct.op, %struct.op* %186, i32 0, i32 2
  store %struct.op* ()* %185, %struct.op* ()** %op_ppaddr456, align 8
  br label %do.end457

do.end457:                                        ; preds = %do.body451
  br label %if.end458

if.end458:                                        ; preds = %do.end457, %do.end449
  %187 = load %struct.op*, %struct.op** %kid, align 8
  call void @Perl_op_null(%struct.op* %187)
  br label %if.end459

if.end459:                                        ; preds = %if.end458, %land.lhs.true430, %sw.bb422
  br label %sw.bb460

sw.bb460:                                         ; preds = %if.end61, %if.end61, %if.end61, %if.end61, %if.end459
  %188 = load %struct.op*, %struct.op** %o, align 8
  %189 = bitcast %struct.op* %188 to %struct.unop*
  %op_first461 = getelementptr inbounds %struct.unop, %struct.unop* %189, i32 0, i32 7
  %190 = load %struct.op*, %struct.op** %op_first461, align 8
  %op_sibling462 = getelementptr inbounds %struct.op, %struct.op* %190, i32 0, i32 1
  %191 = load %struct.op*, %struct.op** %op_sibling462, align 8
  %add.ptr463 = getelementptr inbounds %struct.op, %struct.op* %191, i64 0
  store %struct.op* %add.ptr463, %struct.op** %kid, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %sw.bb460
  %192 = load %struct.op*, %struct.op** %kid, align 8
  %tobool464 = icmp ne %struct.op* %192, null
  br i1 %tobool464, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %193 = load %struct.op*, %struct.op** %kid, align 8
  %op_flags465 = getelementptr inbounds %struct.op, %struct.op* %193, i32 0, i32 5
  %194 = load i8, i8* %op_flags465, align 2
  %conv466 = zext i8 %194 to i32
  %and467 = and i32 %conv466, 4
  %tobool468 = icmp ne i32 %and467, 0
  br i1 %tobool468, label %if.else471, label %if.then469

if.then469:                                       ; preds = %for.body
  %195 = load %struct.op*, %struct.op** %kid, align 8
  %call470 = call %struct.op* @Perl_scalarvoid(%struct.op* %195)
  br label %if.end482

if.else471:                                       ; preds = %for.body
  br label %do.body472

do.body472:                                       ; preds = %if.else471
  %196 = load i64, i64* %defer_ix, align 8
  %197 = load i64, i64* %defer_stack_alloc, align 8
  %sub = sub nsw i64 %197, 1
  %cmp473 = icmp eq i64 %196, %sub
  br i1 %cmp473, label %cond.true475, label %cond.false476

cond.true475:                                     ; preds = %do.body472
  br i1 true, label %if.then477, label %if.end479

cond.false476:                                    ; preds = %do.body472
  br i1 false, label %if.then477, label %if.end479

if.then477:                                       ; preds = %cond.false476, %cond.true475
  %198 = load i64, i64* %defer_stack_alloc, align 8
  %add = add nsw i64 %198, 100
  store i64 %add, i64* %defer_stack_alloc, align 8
  %199 = load %struct.op**, %struct.op*** %defer_stack, align 8
  %200 = bitcast %struct.op** %199 to i8*
  %201 = load i64, i64* %defer_stack_alloc, align 8
  %mul = mul i64 %201, 8
  %call478 = call i8* @Perl_safesysrealloc(i8* %200, i64 %mul)
  %202 = bitcast i8* %call478 to %struct.op**
  store %struct.op** %202, %struct.op*** %defer_stack, align 8
  br label %if.end479

if.end479:                                        ; preds = %if.then477, %cond.false476, %cond.true475
  %203 = load %struct.op*, %struct.op** %kid, align 8
  %204 = load %struct.op**, %struct.op*** %defer_stack, align 8
  %205 = load i64, i64* %defer_ix, align 8
  %inc = add nsw i64 %205, 1
  store i64 %inc, i64* %defer_ix, align 8
  %arrayidx480 = getelementptr inbounds %struct.op*, %struct.op** %204, i64 %inc
  store %struct.op* %203, %struct.op** %arrayidx480, align 8
  br label %do.end481

do.end481:                                        ; preds = %if.end479
  br label %if.end482

if.end482:                                        ; preds = %do.end481, %if.then469
  br label %for.inc

for.inc:                                          ; preds = %if.end482
  %206 = load %struct.op*, %struct.op** %kid, align 8
  %op_sibling483 = getelementptr inbounds %struct.op, %struct.op* %206, i32 0, i32 1
  %207 = load %struct.op*, %struct.op** %op_sibling483, align 8
  %add.ptr484 = getelementptr inbounds %struct.op, %struct.op* %207, i64 0
  store %struct.op* %add.ptr484, %struct.op** %kid, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %sw.epilog

sw.bb485:                                         ; preds = %if.end61
  %208 = load %struct.op*, %struct.op** %o, align 8
  %op_flags486 = getelementptr inbounds %struct.op, %struct.op* %208, i32 0, i32 5
  %209 = load i8, i8* %op_flags486, align 2
  %conv487 = zext i8 %209 to i32
  %and488 = and i32 %conv487, 64
  %tobool489 = icmp ne i32 %and488, 0
  br i1 %tobool489, label %if.then490, label %if.end491

if.then490:                                       ; preds = %sw.bb485
  br label %sw.epilog

if.end491:                                        ; preds = %sw.bb485
  br label %sw.bb492

sw.bb492:                                         ; preds = %if.end61, %if.end61, %if.end61, %if.end61, %if.end491
  %210 = load %struct.op*, %struct.op** %o, align 8
  %op_flags493 = getelementptr inbounds %struct.op, %struct.op* %210, i32 0, i32 5
  %211 = load i8, i8* %op_flags493, align 2
  %conv494 = zext i8 %211 to i32
  %and495 = and i32 %conv494, 4
  %tobool496 = icmp ne i32 %and495, 0
  br i1 %tobool496, label %if.end498, label %if.then497

if.then497:                                       ; preds = %sw.bb492
  br label %sw.epilog

if.end498:                                        ; preds = %sw.bb492
  br label %sw.bb499

sw.bb499:                                         ; preds = %if.end61, %if.end61, %if.end61, %if.end61, %if.end61, %if.end61, %if.end61, %if.end498
  br label %kids

kids:                                             ; preds = %if.end600, %sw.bb499
  %212 = load %struct.op*, %struct.op** %o, align 8
  %213 = bitcast %struct.op* %212 to %struct.listop*
  %op_first500 = getelementptr inbounds %struct.listop, %struct.listop* %213, i32 0, i32 7
  %214 = load %struct.op*, %struct.op** %op_first500, align 8
  store %struct.op* %214, %struct.op** %kid, align 8
  br label %for.cond501

for.cond501:                                      ; preds = %for.inc526, %kids
  %215 = load %struct.op*, %struct.op** %kid, align 8
  %tobool502 = icmp ne %struct.op* %215, null
  br i1 %tobool502, label %for.body503, label %for.end529

for.body503:                                      ; preds = %for.cond501
  %216 = load %struct.op*, %struct.op** %kid, align 8
  %op_flags504 = getelementptr inbounds %struct.op, %struct.op* %216, i32 0, i32 5
  %217 = load i8, i8* %op_flags504, align 2
  %conv505 = zext i8 %217 to i32
  %and506 = and i32 %conv505, 4
  %tobool507 = icmp ne i32 %and506, 0
  br i1 %tobool507, label %if.else510, label %if.then508

if.then508:                                       ; preds = %for.body503
  %218 = load %struct.op*, %struct.op** %kid, align 8
  %call509 = call %struct.op* @Perl_scalarvoid(%struct.op* %218)
  br label %if.end525

if.else510:                                       ; preds = %for.body503
  br label %do.body511

do.body511:                                       ; preds = %if.else510
  %219 = load i64, i64* %defer_ix, align 8
  %220 = load i64, i64* %defer_stack_alloc, align 8
  %sub512 = sub nsw i64 %220, 1
  %cmp513 = icmp eq i64 %219, %sub512
  br i1 %cmp513, label %cond.true515, label %cond.false516

cond.true515:                                     ; preds = %do.body511
  br i1 true, label %if.then517, label %if.end521

cond.false516:                                    ; preds = %do.body511
  br i1 false, label %if.then517, label %if.end521

if.then517:                                       ; preds = %cond.false516, %cond.true515
  %221 = load i64, i64* %defer_stack_alloc, align 8
  %add518 = add nsw i64 %221, 100
  store i64 %add518, i64* %defer_stack_alloc, align 8
  %222 = load %struct.op**, %struct.op*** %defer_stack, align 8
  %223 = bitcast %struct.op** %222 to i8*
  %224 = load i64, i64* %defer_stack_alloc, align 8
  %mul519 = mul i64 %224, 8
  %call520 = call i8* @Perl_safesysrealloc(i8* %223, i64 %mul519)
  %225 = bitcast i8* %call520 to %struct.op**
  store %struct.op** %225, %struct.op*** %defer_stack, align 8
  br label %if.end521

if.end521:                                        ; preds = %if.then517, %cond.false516, %cond.true515
  %226 = load %struct.op*, %struct.op** %kid, align 8
  %227 = load %struct.op**, %struct.op*** %defer_stack, align 8
  %228 = load i64, i64* %defer_ix, align 8
  %inc522 = add nsw i64 %228, 1
  store i64 %inc522, i64* %defer_ix, align 8
  %arrayidx523 = getelementptr inbounds %struct.op*, %struct.op** %227, i64 %inc522
  store %struct.op* %226, %struct.op** %arrayidx523, align 8
  br label %do.end524

do.end524:                                        ; preds = %if.end521
  br label %if.end525

if.end525:                                        ; preds = %do.end524, %if.then508
  br label %for.inc526

for.inc526:                                       ; preds = %if.end525
  %229 = load %struct.op*, %struct.op** %kid, align 8
  %op_sibling527 = getelementptr inbounds %struct.op, %struct.op* %229, i32 0, i32 1
  %230 = load %struct.op*, %struct.op** %op_sibling527, align 8
  %add.ptr528 = getelementptr inbounds %struct.op, %struct.op* %230, i64 0
  store %struct.op* %add.ptr528, %struct.op** %kid, align 8
  br label %for.cond501

for.end529:                                       ; preds = %for.cond501
  br label %sw.epilog

sw.bb530:                                         ; preds = %if.end61
  %231 = load %struct.op*, %struct.op** %o, align 8
  %232 = bitcast %struct.op* %231 to %struct.listop*
  %op_first531 = getelementptr inbounds %struct.listop, %struct.listop* %232, i32 0, i32 7
  %233 = load %struct.op*, %struct.op** %op_first531, align 8
  store %struct.op* %233, %struct.op** %kid, align 8
  %op_type532 = getelementptr inbounds %struct.op, %struct.op* %233, i32 0, i32 4
  %bf.load533 = load i16, i16* %op_type532, align 8
  %bf.clear534 = and i16 %bf.load533, 511
  %bf.cast535 = zext i16 %bf.clear534 to i32
  %cmp536 = icmp eq i32 %bf.cast535, 3
  br i1 %cmp536, label %land.lhs.true538, label %if.end600

land.lhs.true538:                                 ; preds = %sw.bb530
  %234 = load %struct.op*, %struct.op** %kid, align 8
  %op_sibling539 = getelementptr inbounds %struct.op, %struct.op* %234, i32 0, i32 1
  %235 = load %struct.op*, %struct.op** %op_sibling539, align 8
  %add.ptr540 = getelementptr inbounds %struct.op, %struct.op* %235, i64 0
  store %struct.op* %add.ptr540, %struct.op** %kid, align 8
  %tobool541 = icmp ne %struct.op* %add.ptr540, null
  br i1 %tobool541, label %lor.lhs.false542, label %if.then598

lor.lhs.false542:                                 ; preds = %land.lhs.true538
  %236 = load %struct.op*, %struct.op** %kid, align 8
  %op_type543 = getelementptr inbounds %struct.op, %struct.op* %236, i32 0, i32 4
  %bf.load544 = load i16, i16* %op_type543, align 8
  %bf.clear545 = and i16 %bf.load544, 511
  %bf.cast546 = zext i16 %bf.clear545 to i32
  %cmp547 = icmp ne i32 %bf.cast546, 9
  br i1 %cmp547, label %land.lhs.true549, label %lor.lhs.false563

land.lhs.true549:                                 ; preds = %lor.lhs.false542
  %237 = load %struct.op*, %struct.op** %kid, align 8
  %op_type550 = getelementptr inbounds %struct.op, %struct.op* %237, i32 0, i32 4
  %bf.load551 = load i16, i16* %op_type550, align 8
  %bf.clear552 = and i16 %bf.load551, 511
  %bf.cast553 = zext i16 %bf.clear552 to i32
  %cmp554 = icmp ne i32 %bf.cast553, 10
  br i1 %cmp554, label %land.lhs.true556, label %lor.lhs.false563

land.lhs.true556:                                 ; preds = %land.lhs.true549
  %238 = load %struct.op*, %struct.op** %kid, align 8
  %op_type557 = getelementptr inbounds %struct.op, %struct.op* %238, i32 0, i32 4
  %bf.load558 = load i16, i16* %op_type557, align 8
  %bf.clear559 = and i16 %bf.load558, 511
  %bf.cast560 = zext i16 %bf.clear559 to i32
  %cmp561 = icmp ne i32 %bf.cast560, 11
  br i1 %cmp561, label %if.then598, label %lor.lhs.false563

lor.lhs.false563:                                 ; preds = %land.lhs.true556, %land.lhs.true549, %lor.lhs.false542
  %239 = load %struct.op*, %struct.op** %kid, align 8
  %op_private564 = getelementptr inbounds %struct.op, %struct.op* %239, i32 0, i32 6
  %240 = load i8, i8* %op_private564, align 1
  %conv565 = zext i8 %240 to i32
  %and566 = and i32 %conv565, -129
  %tobool567 = icmp ne i32 %and566, 0
  br i1 %tobool567, label %if.then598, label %lor.lhs.false568

lor.lhs.false568:                                 ; preds = %lor.lhs.false563
  %241 = load %struct.op*, %struct.op** %kid, align 8
  %op_sibling569 = getelementptr inbounds %struct.op, %struct.op* %241, i32 0, i32 1
  %242 = load %struct.op*, %struct.op** %op_sibling569, align 8
  %add.ptr570 = getelementptr inbounds %struct.op, %struct.op* %242, i64 0
  store %struct.op* %add.ptr570, %struct.op** %kid, align 8
  %tobool571 = icmp ne %struct.op* %add.ptr570, null
  br i1 %tobool571, label %lor.lhs.false572, label %if.then598

lor.lhs.false572:                                 ; preds = %lor.lhs.false568
  %243 = load %struct.op*, %struct.op** %kid, align 8
  %op_type573 = getelementptr inbounds %struct.op, %struct.op* %243, i32 0, i32 4
  %bf.load574 = load i16, i16* %op_type573, align 8
  %bf.clear575 = and i16 %bf.load574, 511
  %bf.cast576 = zext i16 %bf.clear575 to i32
  %cmp577 = icmp ne i32 %bf.cast576, 9
  br i1 %cmp577, label %land.lhs.true579, label %lor.lhs.false593

land.lhs.true579:                                 ; preds = %lor.lhs.false572
  %244 = load %struct.op*, %struct.op** %kid, align 8
  %op_type580 = getelementptr inbounds %struct.op, %struct.op* %244, i32 0, i32 4
  %bf.load581 = load i16, i16* %op_type580, align 8
  %bf.clear582 = and i16 %bf.load581, 511
  %bf.cast583 = zext i16 %bf.clear582 to i32
  %cmp584 = icmp ne i32 %bf.cast583, 10
  br i1 %cmp584, label %land.lhs.true586, label %lor.lhs.false593

land.lhs.true586:                                 ; preds = %land.lhs.true579
  %245 = load %struct.op*, %struct.op** %kid, align 8
  %op_type587 = getelementptr inbounds %struct.op, %struct.op* %245, i32 0, i32 4
  %bf.load588 = load i16, i16* %op_type587, align 8
  %bf.clear589 = and i16 %bf.load588, 511
  %bf.cast590 = zext i16 %bf.clear589 to i32
  %cmp591 = icmp ne i32 %bf.cast590, 11
  br i1 %cmp591, label %if.then598, label %lor.lhs.false593

lor.lhs.false593:                                 ; preds = %land.lhs.true586, %land.lhs.true579, %lor.lhs.false572
  %246 = load %struct.op*, %struct.op** %kid, align 8
  %op_private594 = getelementptr inbounds %struct.op, %struct.op* %246, i32 0, i32 6
  %247 = load i8, i8* %op_private594, align 1
  %conv595 = zext i8 %247 to i32
  %and596 = and i32 %conv595, -129
  %tobool597 = icmp ne i32 %and596, 0
  br i1 %tobool597, label %if.then598, label %if.end600

if.then598:                                       ; preds = %lor.lhs.false593, %land.lhs.true586, %lor.lhs.false568, %lor.lhs.false563, %land.lhs.true556, %land.lhs.true538
  %248 = load %struct.op*, %struct.op** %o, align 8
  %249 = bitcast %struct.op* %248 to %struct.unop*
  %op_first599 = getelementptr inbounds %struct.unop, %struct.unop* %249, i32 0, i32 7
  %250 = load %struct.op*, %struct.op** %op_first599, align 8
  call void @Perl_op_null(%struct.op* %250)
  %251 = load %struct.op*, %struct.op** %o, align 8
  call void @Perl_op_null(%struct.op* %251)
  br label %if.end600

if.end600:                                        ; preds = %if.then598, %lor.lhs.false593, %sw.bb530
  br label %kids

sw.bb601:                                         ; preds = %if.end61
  %252 = load %struct.op*, %struct.op** %o, align 8
  %call602 = call %struct.op* @S_scalarkids(%struct.op* %252)
  br label %sw.epilog

sw.bb603:                                         ; preds = %if.end61
  %253 = load %struct.op*, %struct.op** %o, align 8
  %call604 = call %struct.op* @Perl_scalar(%struct.op* %253)
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.bb603, %sw.bb601, %for.end529, %if.then497, %if.then490, %for.end, %sw.bb421, %if.end408, %if.then407, %if.then398, %if.then384, %if.then369, %if.then351, %if.then341, %do.end334, %do.end326, %do.end318, %do.end, %if.end305, %if.end240, %sw.bb221, %if.end220, %if.end215, %if.end184, %if.end142, %cond.end, %if.then100, %if.then85, %if.then79
  %254 = load %struct.sv*, %struct.sv** %useless_sv, align 8
  %tobool605 = icmp ne %struct.sv* %254, null
  br i1 %tobool605, label %if.then606, label %if.else608

if.then606:                                       ; preds = %sw.epilog
  %255 = load %struct.sv*, %struct.sv** %useless_sv, align 8
  %call607 = call %struct.sv* @Perl_sv_2mortal(%struct.sv* %255)
  %256 = bitcast %struct.sv* %call607 to i8*
  call void (i32, i8*, ...) @Perl_ck_warner(i32 45, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.21, i64 0, i64 0), i8* %256)
  br label %if.end612

if.else608:                                       ; preds = %sw.epilog
  %257 = load i8*, i8** %useless, align 8
  %tobool609 = icmp ne i8* %257, null
  br i1 %tobool609, label %if.then610, label %if.end611

if.then610:                                       ; preds = %if.else608
  %258 = load i8*, i8** %useless, align 8
  call void (i32, i8*, ...) @Perl_ck_warner(i32 45, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.22, i64 0, i64 0), i8* %258)
  br label %if.end611

if.end611:                                        ; preds = %if.then610, %if.else608
  br label %if.end612

if.end612:                                        ; preds = %if.end611, %if.then606
  br label %do.cond

do.cond:                                          ; preds = %if.end612, %if.then60, %if.then48
  %259 = load i64, i64* %defer_ix, align 8
  %cmp613 = icmp sge i64 %259, 0
  br i1 %cmp613, label %cond.true615, label %cond.false617

cond.true615:                                     ; preds = %do.cond
  %260 = load %struct.op**, %struct.op*** %defer_stack, align 8
  %261 = load i64, i64* %defer_ix, align 8
  %dec = add nsw i64 %261, -1
  store i64 %dec, i64* %defer_ix, align 8
  %arrayidx616 = getelementptr inbounds %struct.op*, %struct.op** %260, i64 %261
  %262 = load %struct.op*, %struct.op** %arrayidx616, align 8
  br label %cond.end618

cond.false617:                                    ; preds = %do.cond
  br label %cond.end618

cond.end618:                                      ; preds = %cond.false617, %cond.true615
  %cond619 = phi %struct.op* [ %262, %cond.true615 ], [ null, %cond.false617 ]
  store %struct.op* %cond619, %struct.op** %o, align 8
  %tobool620 = icmp ne %struct.op* %cond619, null
  br i1 %tobool620, label %do.body, label %do.end621

do.end621:                                        ; preds = %cond.end618
  %263 = load %struct.op**, %struct.op*** %defer_stack, align 8
  %264 = bitcast %struct.op** %263 to i8*
  call void @Perl_safesysfree(i8* %264)
  %265 = load %struct.op*, %struct.op** %arg.addr, align 8
  ret %struct.op* %265
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_op_linklist(%struct.op* %o) #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %o.addr = alloca %struct.op*, align 8
  %first = alloca %struct.op*, align 8
  %kid = alloca %struct.op*, align 8
  %sibl = alloca %struct.op*, align 8
  store %struct.op* %o, %struct.op** %o.addr, align 8
  %0 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %0, i32 0, i32 0
  %1 = load %struct.op*, %struct.op** %op_next, align 8
  %tobool = icmp ne %struct.op* %1, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_next1 = getelementptr inbounds %struct.op, %struct.op* %2, i32 0, i32 0
  %3 = load %struct.op*, %struct.op** %op_next1, align 8
  store %struct.op* %3, %struct.op** %retval, align 8
  br label %return

if.end:                                           ; preds = %entry
  %4 = load %struct.op*, %struct.op** %o.addr, align 8
  %5 = bitcast %struct.op* %4 to %struct.unop*
  %op_first = getelementptr inbounds %struct.unop, %struct.unop* %5, i32 0, i32 7
  %6 = load %struct.op*, %struct.op** %op_first, align 8
  store %struct.op* %6, %struct.op** %first, align 8
  %7 = load %struct.op*, %struct.op** %first, align 8
  %tobool2 = icmp ne %struct.op* %7, null
  br i1 %tobool2, label %if.then3, label %if.else21

if.then3:                                         ; preds = %if.end
  %8 = load %struct.op*, %struct.op** %first, align 8
  %op_next4 = getelementptr inbounds %struct.op, %struct.op* %8, i32 0, i32 0
  %9 = load %struct.op*, %struct.op** %op_next4, align 8
  %tobool5 = icmp ne %struct.op* %9, null
  br i1 %tobool5, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then3
  %10 = load %struct.op*, %struct.op** %first, align 8
  %op_next6 = getelementptr inbounds %struct.op, %struct.op* %10, i32 0, i32 0
  %11 = load %struct.op*, %struct.op** %op_next6, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.then3
  %12 = load %struct.op*, %struct.op** %first, align 8
  %call = call %struct.op* @Perl_op_linklist(%struct.op* %12)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.op* [ %11, %cond.true ], [ %call, %cond.false ]
  %13 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_next7 = getelementptr inbounds %struct.op, %struct.op* %13, i32 0, i32 0
  store %struct.op* %cond, %struct.op** %op_next7, align 8
  %14 = load %struct.op*, %struct.op** %first, align 8
  store %struct.op* %14, %struct.op** %kid, align 8
  br label %for.cond

for.cond:                                         ; preds = %if.end20, %cond.end
  %15 = load %struct.op*, %struct.op** %kid, align 8
  %op_sibling = getelementptr inbounds %struct.op, %struct.op* %15, i32 0, i32 1
  %16 = load %struct.op*, %struct.op** %op_sibling, align 8
  %add.ptr = getelementptr inbounds %struct.op, %struct.op* %16, i64 0
  store %struct.op* %add.ptr, %struct.op** %sibl, align 8
  %17 = load %struct.op*, %struct.op** %sibl, align 8
  %tobool8 = icmp ne %struct.op* %17, null
  br i1 %tobool8, label %if.then9, label %if.else

if.then9:                                         ; preds = %for.cond
  %18 = load %struct.op*, %struct.op** %sibl, align 8
  %op_next10 = getelementptr inbounds %struct.op, %struct.op* %18, i32 0, i32 0
  %19 = load %struct.op*, %struct.op** %op_next10, align 8
  %tobool11 = icmp ne %struct.op* %19, null
  br i1 %tobool11, label %cond.true12, label %cond.false14

cond.true12:                                      ; preds = %if.then9
  %20 = load %struct.op*, %struct.op** %sibl, align 8
  %op_next13 = getelementptr inbounds %struct.op, %struct.op* %20, i32 0, i32 0
  %21 = load %struct.op*, %struct.op** %op_next13, align 8
  br label %cond.end16

cond.false14:                                     ; preds = %if.then9
  %22 = load %struct.op*, %struct.op** %sibl, align 8
  %call15 = call %struct.op* @Perl_op_linklist(%struct.op* %22)
  br label %cond.end16

cond.end16:                                       ; preds = %cond.false14, %cond.true12
  %cond17 = phi %struct.op* [ %21, %cond.true12 ], [ %call15, %cond.false14 ]
  %23 = load %struct.op*, %struct.op** %kid, align 8
  %op_next18 = getelementptr inbounds %struct.op, %struct.op* %23, i32 0, i32 0
  store %struct.op* %cond17, %struct.op** %op_next18, align 8
  %24 = load %struct.op*, %struct.op** %sibl, align 8
  store %struct.op* %24, %struct.op** %kid, align 8
  br label %if.end20

if.else:                                          ; preds = %for.cond
  %25 = load %struct.op*, %struct.op** %o.addr, align 8
  %26 = load %struct.op*, %struct.op** %kid, align 8
  %op_next19 = getelementptr inbounds %struct.op, %struct.op* %26, i32 0, i32 0
  store %struct.op* %25, %struct.op** %op_next19, align 8
  br label %for.end

if.end20:                                         ; preds = %cond.end16
  br label %for.cond

for.end:                                          ; preds = %if.else
  br label %if.end23

if.else21:                                        ; preds = %if.end
  %27 = load %struct.op*, %struct.op** %o.addr, align 8
  %28 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_next22 = getelementptr inbounds %struct.op, %struct.op* %28, i32 0, i32 0
  store %struct.op* %27, %struct.op** %op_next22, align 8
  br label %if.end23

if.end23:                                         ; preds = %if.else21, %for.end
  %29 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_next24 = getelementptr inbounds %struct.op, %struct.op* %29, i32 0, i32 0
  %30 = load %struct.op*, %struct.op** %op_next24, align 8
  store %struct.op* %30, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %if.end23, %if.then
  %31 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %31
}

declare dso_local void @Perl_ck_warner(i32, i8*, ...) #3

declare dso_local zeroext i1 @Perl_ckwarn(i32) #3

; Function Attrs: noinline nounwind uwtable
define internal %struct.sv* @S_op_varname(%struct.op* %o) #0 {
entry:
  %retval = alloca %struct.sv*, align 8
  %o.addr = alloca %struct.op*, align 8
  %funny = alloca i8, align 1
  %gv = alloca %struct.gv*, align 8
  store %struct.op* %o, %struct.op** %o.addr, align 8
  %0 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type = getelementptr inbounds %struct.op, %struct.op* %0, i32 0, i32 4
  %bf.load = load i16, i16* %op_type, align 8
  %bf.clear = and i16 %bf.load, 511
  %bf.cast = zext i16 %bf.clear to i32
  %cmp = icmp eq i32 %bf.cast, 10
  br i1 %cmp, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %entry
  %1 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type1 = getelementptr inbounds %struct.op, %struct.op* %1, i32 0, i32 4
  %bf.load2 = load i16, i16* %op_type1, align 8
  %bf.clear3 = and i16 %bf.load2, 511
  %bf.cast4 = zext i16 %bf.clear3 to i32
  %cmp5 = icmp eq i32 %bf.cast4, 135
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %entry
  %2 = phi i1 [ true, %entry ], [ %cmp5, %lor.rhs ]
  %3 = zext i1 %2 to i64
  %cond = select i1 %2, i32 64, i32 37
  %conv = trunc i32 %cond to i8
  store i8 %conv, i8* %funny, align 1
  %4 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type6 = getelementptr inbounds %struct.op, %struct.op* %4, i32 0, i32 4
  %bf.load7 = load i16, i16* %op_type6, align 8
  %bf.clear8 = and i16 %bf.load7, 511
  %bf.cast9 = zext i16 %bf.clear8 to i32
  %cmp10 = icmp eq i32 %bf.cast9, 135
  br i1 %cmp10, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %lor.end
  %5 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type12 = getelementptr inbounds %struct.op, %struct.op* %5, i32 0, i32 4
  %bf.load13 = load i16, i16* %op_type12, align 8
  %bf.clear14 = and i16 %bf.load13, 511
  %bf.cast15 = zext i16 %bf.clear14 to i32
  %cmp16 = icmp eq i32 %bf.cast15, 149
  br i1 %cmp16, label %if.then, label %if.end27

if.then:                                          ; preds = %lor.lhs.false, %lor.end
  %6 = load %struct.op*, %struct.op** %o.addr, align 8
  %7 = bitcast %struct.op* %6 to %struct.unop*
  %op_first = getelementptr inbounds %struct.unop, %struct.unop* %7, i32 0, i32 7
  %8 = load %struct.op*, %struct.op** %op_first, align 8
  %op_type18 = getelementptr inbounds %struct.op, %struct.op* %8, i32 0, i32 4
  %bf.load19 = load i16, i16* %op_type18, align 8
  %bf.clear20 = and i16 %bf.load19, 511
  %bf.cast21 = zext i16 %bf.clear20 to i32
  %cmp22 = icmp ne i32 %bf.cast21, 7
  br i1 %cmp22, label %if.then26, label %lor.lhs.false24

lor.lhs.false24:                                  ; preds = %if.then
  %9 = load %struct.op*, %struct.op** %o.addr, align 8
  %10 = bitcast %struct.op* %9 to %struct.unop*
  %op_first25 = getelementptr inbounds %struct.unop, %struct.unop* %10, i32 0, i32 7
  %11 = load %struct.op*, %struct.op** %op_first25, align 8
  %12 = bitcast %struct.op* %11 to %struct.svop*
  %op_sv = getelementptr inbounds %struct.svop, %struct.svop* %12, i32 0, i32 7
  %13 = load %struct.sv*, %struct.sv** %op_sv, align 8
  %14 = bitcast %struct.sv* %13 to %struct.gv*
  store %struct.gv* %14, %struct.gv** %gv, align 8
  %tobool = icmp ne %struct.gv* %14, null
  br i1 %tobool, label %if.end, label %if.then26

if.then26:                                        ; preds = %lor.lhs.false24, %if.then
  store %struct.sv* null, %struct.sv** %retval, align 8
  br label %return

if.end:                                           ; preds = %lor.lhs.false24
  %15 = load %struct.gv*, %struct.gv** %gv, align 8
  %16 = load i8, i8* %funny, align 1
  %call = call %struct.sv* @Perl_varname(%struct.gv* %15, i8 signext %16, i64 0, %struct.sv* null, i32 0, i32 1)
  store %struct.sv* %call, %struct.sv** %retval, align 8
  br label %return

if.end27:                                         ; preds = %lor.lhs.false
  %17 = load %struct.cv*, %struct.cv** @PL_compcv, align 8
  %18 = bitcast %struct.cv* %17 to i8*
  %19 = bitcast i8* %18 to %struct.gv*
  %20 = load i8, i8* %funny, align 1
  %21 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_targ = getelementptr inbounds %struct.op, %struct.op* %21, i32 0, i32 3
  %22 = load i64, i64* %op_targ, align 8
  %call28 = call %struct.sv* @Perl_varname(%struct.gv* %19, i8 signext %20, i64 %22, %struct.sv* null, i32 0, i32 1)
  store %struct.sv* %call28, %struct.sv** %retval, align 8
  br label %return

return:                                           ; preds = %if.end27, %if.end, %if.then26
  %23 = load %struct.sv*, %struct.sv** %retval, align 8
  ret %struct.sv* %23
}

; Function Attrs: noinline nounwind uwtable
define internal void @S_op_pretty(%struct.op* %o, %struct.sv** %retsv, i8** %retpv) #0 {
entry:
  %o.addr = alloca %struct.op*, align 8
  %retsv.addr = alloca %struct.sv**, align 8
  %retpv.addr = alloca i8**, align 8
  %sv = alloca %struct.sv*, align 8
  store %struct.op* %o, %struct.op** %o.addr, align 8
  store %struct.sv** %retsv, %struct.sv*** %retsv.addr, align 8
  store i8** %retpv, i8*** %retpv.addr, align 8
  %0 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type = getelementptr inbounds %struct.op, %struct.op* %0, i32 0, i32 4
  %bf.load = load i16, i16* %op_type, align 8
  %bf.clear = and i16 %bf.load, 511
  %bf.cast = zext i16 %bf.clear to i32
  %cmp = icmp eq i32 %bf.cast, 5
  br i1 %cmp, label %if.then, label %if.else15

if.then:                                          ; preds = %entry
  %1 = load %struct.op*, %struct.op** %o.addr, align 8
  %2 = bitcast %struct.op* %1 to %struct.svop*
  %op_sv = getelementptr inbounds %struct.svop, %struct.svop* %2, i32 0, i32 7
  %3 = load %struct.sv*, %struct.sv** %op_sv, align 8
  %4 = load %struct.sv**, %struct.sv*** %retsv.addr, align 8
  store %struct.sv* %3, %struct.sv** %4, align 8
  %5 = load %struct.sv**, %struct.sv*** %retsv.addr, align 8
  %6 = load %struct.sv*, %struct.sv** %5, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %6, i32 0, i32 2
  %7 = load i32, i32* %sv_flags, align 4
  %and = and i32 %7, 1024
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then1, label %if.else

if.then1:                                         ; preds = %if.then
  %8 = load %struct.sv**, %struct.sv*** %retsv.addr, align 8
  %9 = load %struct.sv*, %struct.sv** %8, align 8
  store %struct.sv* %9, %struct.sv** %sv, align 8
  %call = call %struct.sv* @Perl_sv_newmortal()
  %10 = load %struct.sv**, %struct.sv*** %retsv.addr, align 8
  store %struct.sv* %call, %struct.sv** %10, align 8
  %11 = load %struct.sv**, %struct.sv*** %retsv.addr, align 8
  %12 = load %struct.sv*, %struct.sv** %11, align 8
  %13 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %13, i32 0, i32 3
  %svu_pv = bitcast %union.anon* %sv_u to i8**
  %14 = load i8*, i8** %svu_pv, align 8
  %add.ptr = getelementptr inbounds i8, i8* %14, i64 0
  %15 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %15, i32 0, i32 0
  %16 = load i8*, i8** %sv_any, align 8
  %17 = bitcast i8* %16 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %17, i32 0, i32 2
  %18 = load i64, i64* %xpv_cur, align 8
  %call2 = call i8* @Perl_pv_pretty(%struct.sv* %12, i8* %add.ptr, i64 %18, i64 32, i8* null, i8* null, i32 515)
  br label %if.end14

if.else:                                          ; preds = %if.then
  %19 = load %struct.sv**, %struct.sv*** %retsv.addr, align 8
  %20 = load %struct.sv*, %struct.sv** %19, align 8
  %sv_flags3 = getelementptr inbounds %struct.sv, %struct.sv* %20, i32 0, i32 2
  %21 = load i32, i32* %sv_flags3, align 4
  %and4 = and i32 %21, 65280
  %tobool5 = icmp ne i32 %and4, 0
  br i1 %tobool5, label %if.end, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.else
  %22 = load %struct.sv**, %struct.sv*** %retsv.addr, align 8
  %23 = load %struct.sv*, %struct.sv** %22, align 8
  %sv_flags6 = getelementptr inbounds %struct.sv, %struct.sv* %23, i32 0, i32 2
  %24 = load i32, i32* %sv_flags6, align 4
  %and7 = and i32 %24, 255
  %cmp8 = icmp eq i32 %and7, 8
  br i1 %cmp8, label %if.end, label %lor.lhs.false9

lor.lhs.false9:                                   ; preds = %lor.lhs.false
  %25 = load %struct.sv**, %struct.sv*** %retsv.addr, align 8
  %26 = load %struct.sv*, %struct.sv** %25, align 8
  %sv_flags10 = getelementptr inbounds %struct.sv, %struct.sv* %26, i32 0, i32 2
  %27 = load i32, i32* %sv_flags10, align 4
  %and11 = and i32 %27, 16826623
  %cmp12 = icmp eq i32 %and11, 16777226
  br i1 %cmp12, label %if.end, label %if.then13

if.then13:                                        ; preds = %lor.lhs.false9
  %28 = load i8**, i8*** %retpv.addr, align 8
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.162, i64 0, i64 0), i8** %28, align 8
  br label %if.end

if.end:                                           ; preds = %if.then13, %lor.lhs.false9, %lor.lhs.false, %if.else
  br label %if.end14

if.end14:                                         ; preds = %if.end, %if.then1
  br label %if.end16

if.else15:                                        ; preds = %entry
  %29 = load i8**, i8*** %retpv.addr, align 8
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.163, i64 0, i64 0), i8** %29, align 8
  br label %if.end16

if.end16:                                         ; preds = %if.else15, %if.end14
  ret void
}

declare dso_local void @Perl_sv_chop(%struct.sv*, i8*) #3

declare dso_local void @Perl_warner(i32, i8*, ...) #3

; Function Attrs: noinline nounwind uwtable
define internal void @S_no_bareword_allowed(%struct.op* %o) #0 {
entry:
  %o.addr = alloca %struct.op*, align 8
  store %struct.op* %o, %struct.op** %o.addr, align 8
  %0 = load %struct.op*, %struct.op** %o.addr, align 8
  %1 = bitcast %struct.op* %0 to %struct.svop*
  %op_sv = getelementptr inbounds %struct.svop, %struct.svop* %1, i32 0, i32 7
  %2 = load %struct.sv*, %struct.sv** %op_sv, align 8
  %3 = bitcast %struct.sv* %2 to i8*
  %call = call %struct.sv* (i8*, ...) @Perl_mess(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.164, i64 0, i64 0), i8* %3)
  call void @Perl_qerror(%struct.sv* %call)
  %4 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_private = getelementptr inbounds %struct.op, %struct.op* %4, i32 0, i32 6
  %5 = load i8, i8* %op_private, align 1
  %conv = zext i8 %5 to i32
  %and = and i32 %conv, -9
  %conv1 = trunc i32 %and to i8
  store i8 %conv1, i8* %op_private, align 1
  ret void
}

declare dso_local double @Perl_sv_2nv_flags(%struct.sv*, i32) #3

declare dso_local %struct.sv* @Perl_newSVpvn(i8*, i64) #3

declare dso_local %struct.sv* @Perl_newSVpvf(i8*, ...) #3

declare dso_local i8* @Perl_pv_pretty(%struct.sv*, i8*, i64, i64, i8*, i8*, i32) #3

; Function Attrs: noinline nounwind uwtable
define internal void @S_inplace_aassign(%struct.op* %o) #0 {
entry:
  %o.addr = alloca %struct.op*, align 8
  %modop = alloca %struct.op*, align 8
  %modop_pushmark = alloca %struct.op*, align 8
  %oright = alloca %struct.op*, align 8
  %oleft = alloca %struct.op*, align 8
  %oleft_pushmark = alloca %struct.op*, align 8
  store %struct.op* %o, %struct.op** %o.addr, align 8
  %0 = load %struct.op*, %struct.op** %o.addr, align 8
  %1 = bitcast %struct.op* %0 to %struct.unop*
  %op_first = getelementptr inbounds %struct.unop, %struct.unop* %1, i32 0, i32 7
  %2 = load %struct.op*, %struct.op** %op_first, align 8
  %3 = bitcast %struct.op* %2 to %struct.unop*
  %op_first1 = getelementptr inbounds %struct.unop, %struct.unop* %3, i32 0, i32 7
  %4 = load %struct.op*, %struct.op** %op_first1, align 8
  store %struct.op* %4, %struct.op** %modop_pushmark, align 8
  %5 = load %struct.op*, %struct.op** %modop_pushmark, align 8
  %op_sibling = getelementptr inbounds %struct.op, %struct.op* %5, i32 0, i32 1
  %6 = load %struct.op*, %struct.op** %op_sibling, align 8
  %add.ptr = getelementptr inbounds %struct.op, %struct.op* %6, i64 0
  store %struct.op* %add.ptr, %struct.op** %modop, align 8
  %7 = load %struct.op*, %struct.op** %modop, align 8
  %op_type = getelementptr inbounds %struct.op, %struct.op* %7, i32 0, i32 4
  %bf.load = load i16, i16* %op_type, align 8
  %bf.clear = and i16 %bf.load, 511
  %bf.cast = zext i16 %bf.clear to i32
  %cmp = icmp ne i32 %bf.cast, 167
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %8 = load %struct.op*, %struct.op** %modop, align 8
  %op_type2 = getelementptr inbounds %struct.op, %struct.op* %8, i32 0, i32 4
  %bf.load3 = load i16, i16* %op_type2, align 8
  %bf.clear4 = and i16 %bf.load3, 511
  %bf.cast5 = zext i16 %bf.clear4 to i32
  %cmp6 = icmp ne i32 %bf.cast5, 168
  br i1 %cmp6, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  br label %return

if.end:                                           ; preds = %land.lhs.true, %entry
  %9 = load %struct.op*, %struct.op** %modop, align 8
  %op_sibling7 = getelementptr inbounds %struct.op, %struct.op* %9, i32 0, i32 1
  %10 = load %struct.op*, %struct.op** %op_sibling7, align 8
  %tobool = icmp ne %struct.op* %10, null
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end
  br i1 true, label %if.then8, label %if.end9

cond.false:                                       ; preds = %if.end
  br i1 false, label %if.then8, label %if.end9

if.then8:                                         ; preds = %cond.false, %cond.true
  br label %return

if.end9:                                          ; preds = %cond.false, %cond.true
  %11 = load %struct.op*, %struct.op** %modop, align 8
  %12 = bitcast %struct.op* %11 to %struct.unop*
  %op_first10 = getelementptr inbounds %struct.unop, %struct.unop* %12, i32 0, i32 7
  %13 = load %struct.op*, %struct.op** %op_first10, align 8
  %op_sibling11 = getelementptr inbounds %struct.op, %struct.op* %13, i32 0, i32 1
  %14 = load %struct.op*, %struct.op** %op_sibling11, align 8
  %add.ptr12 = getelementptr inbounds %struct.op, %struct.op* %14, i64 0
  store %struct.op* %add.ptr12, %struct.op** %oright, align 8
  %tobool13 = icmp ne %struct.op* %add.ptr12, null
  br i1 %tobool13, label %if.end15, label %if.then14

if.then14:                                        ; preds = %if.end9
  br label %return

if.end15:                                         ; preds = %if.end9
  %15 = load %struct.op*, %struct.op** %modop, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %15, i32 0, i32 5
  %16 = load i8, i8* %op_flags, align 2
  %conv = zext i8 %16 to i32
  %and = and i32 %conv, 64
  %tobool16 = icmp ne i32 %and, 0
  br i1 %tobool16, label %if.then17, label %if.end20

if.then17:                                        ; preds = %if.end15
  %17 = load %struct.op*, %struct.op** %oright, align 8
  %op_sibling18 = getelementptr inbounds %struct.op, %struct.op* %17, i32 0, i32 1
  %18 = load %struct.op*, %struct.op** %op_sibling18, align 8
  %add.ptr19 = getelementptr inbounds %struct.op, %struct.op* %18, i64 0
  store %struct.op* %add.ptr19, %struct.op** %oright, align 8
  br label %if.end20

if.end20:                                         ; preds = %if.then17, %if.end15
  %19 = load %struct.op*, %struct.op** %o.addr, align 8
  %20 = bitcast %struct.op* %19 to %struct.unop*
  %op_first21 = getelementptr inbounds %struct.unop, %struct.unop* %20, i32 0, i32 7
  %21 = load %struct.op*, %struct.op** %op_first21, align 8
  %op_sibling22 = getelementptr inbounds %struct.op, %struct.op* %21, i32 0, i32 1
  %22 = load %struct.op*, %struct.op** %op_sibling22, align 8
  %add.ptr23 = getelementptr inbounds %struct.op, %struct.op* %22, i64 0
  %23 = bitcast %struct.op* %add.ptr23 to %struct.unop*
  %op_first24 = getelementptr inbounds %struct.unop, %struct.unop* %23, i32 0, i32 7
  %24 = load %struct.op*, %struct.op** %op_first24, align 8
  store %struct.op* %24, %struct.op** %oleft_pushmark, align 8
  %25 = load %struct.op*, %struct.op** %oleft_pushmark, align 8
  %op_sibling25 = getelementptr inbounds %struct.op, %struct.op* %25, i32 0, i32 1
  %26 = load %struct.op*, %struct.op** %op_sibling25, align 8
  %add.ptr26 = getelementptr inbounds %struct.op, %struct.op* %26, i64 0
  store %struct.op* %add.ptr26, %struct.op** %oleft, align 8
  %27 = load %struct.op*, %struct.op** %oleft, align 8
  %tobool27 = icmp ne %struct.op* %27, null
  br i1 %tobool27, label %lor.lhs.false, label %if.then50

lor.lhs.false:                                    ; preds = %if.end20
  %28 = load %struct.op*, %struct.op** %oleft, align 8
  %op_type28 = getelementptr inbounds %struct.op, %struct.op* %28, i32 0, i32 4
  %bf.load29 = load i16, i16* %op_type28, align 8
  %bf.clear30 = and i16 %bf.load29, 511
  %bf.cast31 = zext i16 %bf.clear30 to i32
  %cmp32 = icmp ne i32 %bf.cast31, 135
  br i1 %cmp32, label %land.lhs.true34, label %lor.lhs.false41

land.lhs.true34:                                  ; preds = %lor.lhs.false
  %29 = load %struct.op*, %struct.op** %oleft, align 8
  %op_type35 = getelementptr inbounds %struct.op, %struct.op* %29, i32 0, i32 4
  %bf.load36 = load i16, i16* %op_type35, align 8
  %bf.clear37 = and i16 %bf.load36, 511
  %bf.cast38 = zext i16 %bf.clear37 to i32
  %cmp39 = icmp ne i32 %bf.cast38, 10
  br i1 %cmp39, label %if.then50, label %lor.lhs.false41

lor.lhs.false41:                                  ; preds = %land.lhs.true34, %lor.lhs.false
  %30 = load %struct.op*, %struct.op** %oleft, align 8
  %op_sibling42 = getelementptr inbounds %struct.op, %struct.op* %30, i32 0, i32 1
  %31 = load %struct.op*, %struct.op** %op_sibling42, align 8
  %tobool43 = icmp ne %struct.op* %31, null
  br i1 %tobool43, label %cond.true44, label %cond.false45

cond.true44:                                      ; preds = %lor.lhs.false41
  br i1 true, label %if.then50, label %lor.lhs.false46

cond.false45:                                     ; preds = %lor.lhs.false41
  br i1 false, label %if.then50, label %lor.lhs.false46

lor.lhs.false46:                                  ; preds = %cond.false45, %cond.true44
  %32 = load %struct.op*, %struct.op** %oleft, align 8
  %op_private = getelementptr inbounds %struct.op, %struct.op* %32, i32 0, i32 6
  %33 = load i8, i8* %op_private, align 1
  %conv47 = zext i8 %33 to i32
  %and48 = and i32 %conv47, 128
  %tobool49 = icmp ne i32 %and48, 0
  br i1 %tobool49, label %if.then50, label %if.end51

if.then50:                                        ; preds = %lor.lhs.false46, %cond.false45, %cond.true44, %land.lhs.true34, %if.end20
  br label %return

if.end51:                                         ; preds = %lor.lhs.false46
  %34 = load %struct.op*, %struct.op** %oright, align 8
  %op_sibling52 = getelementptr inbounds %struct.op, %struct.op* %34, i32 0, i32 1
  %35 = load %struct.op*, %struct.op** %op_sibling52, align 8
  %tobool53 = icmp ne %struct.op* %35, null
  br i1 %tobool53, label %cond.true54, label %cond.false55

cond.true54:                                      ; preds = %if.end51
  br i1 true, label %if.then56, label %if.end57

cond.false55:                                     ; preds = %if.end51
  br i1 false, label %if.then56, label %if.end57

if.then56:                                        ; preds = %cond.false55, %cond.true54
  br label %return

if.end57:                                         ; preds = %cond.false55, %cond.true54
  %36 = load %struct.op*, %struct.op** %oleft, align 8
  %op_type58 = getelementptr inbounds %struct.op, %struct.op* %36, i32 0, i32 4
  %bf.load59 = load i16, i16* %op_type58, align 8
  %bf.clear60 = and i16 %bf.load59, 511
  %bf.cast61 = zext i16 %bf.clear60 to i32
  %cmp62 = icmp eq i32 %bf.cast61, 135
  br i1 %cmp62, label %if.then64, label %if.else

if.then64:                                        ; preds = %if.end57
  %37 = load %struct.op*, %struct.op** %oright, align 8
  %op_type65 = getelementptr inbounds %struct.op, %struct.op* %37, i32 0, i32 4
  %bf.load66 = load i16, i16* %op_type65, align 8
  %bf.clear67 = and i16 %bf.load66, 511
  %bf.cast68 = zext i16 %bf.clear67 to i32
  %cmp69 = icmp ne i32 %bf.cast68, 135
  br i1 %cmp69, label %if.then96, label %lor.lhs.false71

lor.lhs.false71:                                  ; preds = %if.then64
  %38 = load %struct.op*, %struct.op** %oright, align 8
  %39 = bitcast %struct.op* %38 to %struct.unop*
  %op_first72 = getelementptr inbounds %struct.unop, %struct.unop* %39, i32 0, i32 7
  %40 = load %struct.op*, %struct.op** %op_first72, align 8
  %tobool73 = icmp ne %struct.op* %40, null
  br i1 %tobool73, label %lor.lhs.false74, label %if.then96

lor.lhs.false74:                                  ; preds = %lor.lhs.false71
  %41 = load %struct.op*, %struct.op** %oright, align 8
  %42 = bitcast %struct.op* %41 to %struct.unop*
  %op_first75 = getelementptr inbounds %struct.unop, %struct.unop* %42, i32 0, i32 7
  %43 = load %struct.op*, %struct.op** %op_first75, align 8
  %op_type76 = getelementptr inbounds %struct.op, %struct.op* %43, i32 0, i32 4
  %bf.load77 = load i16, i16* %op_type76, align 8
  %bf.clear78 = and i16 %bf.load77, 511
  %bf.cast79 = zext i16 %bf.clear78 to i32
  %cmp80 = icmp ne i32 %bf.cast79, 7
  br i1 %cmp80, label %if.then96, label %lor.lhs.false82

lor.lhs.false82:                                  ; preds = %lor.lhs.false74
  %44 = load %struct.op*, %struct.op** %oleft, align 8
  %45 = bitcast %struct.op* %44 to %struct.unop*
  %op_first83 = getelementptr inbounds %struct.unop, %struct.unop* %45, i32 0, i32 7
  %46 = load %struct.op*, %struct.op** %op_first83, align 8
  %op_type84 = getelementptr inbounds %struct.op, %struct.op* %46, i32 0, i32 4
  %bf.load85 = load i16, i16* %op_type84, align 8
  %bf.clear86 = and i16 %bf.load85, 511
  %bf.cast87 = zext i16 %bf.clear86 to i32
  %cmp88 = icmp ne i32 %bf.cast87, 7
  br i1 %cmp88, label %if.then96, label %lor.lhs.false90

lor.lhs.false90:                                  ; preds = %lor.lhs.false82
  %47 = load %struct.op*, %struct.op** %oleft, align 8
  %48 = bitcast %struct.op* %47 to %struct.unop*
  %op_first91 = getelementptr inbounds %struct.unop, %struct.unop* %48, i32 0, i32 7
  %49 = load %struct.op*, %struct.op** %op_first91, align 8
  %50 = bitcast %struct.op* %49 to %struct.svop*
  %op_sv = getelementptr inbounds %struct.svop, %struct.svop* %50, i32 0, i32 7
  %51 = load %struct.sv*, %struct.sv** %op_sv, align 8
  %52 = bitcast %struct.sv* %51 to %struct.gv*
  %53 = load %struct.op*, %struct.op** %oright, align 8
  %54 = bitcast %struct.op* %53 to %struct.unop*
  %op_first92 = getelementptr inbounds %struct.unop, %struct.unop* %54, i32 0, i32 7
  %55 = load %struct.op*, %struct.op** %op_first92, align 8
  %56 = bitcast %struct.op* %55 to %struct.svop*
  %op_sv93 = getelementptr inbounds %struct.svop, %struct.svop* %56, i32 0, i32 7
  %57 = load %struct.sv*, %struct.sv** %op_sv93, align 8
  %58 = bitcast %struct.sv* %57 to %struct.gv*
  %cmp94 = icmp ne %struct.gv* %52, %58
  br i1 %cmp94, label %if.then96, label %if.end97

if.then96:                                        ; preds = %lor.lhs.false90, %lor.lhs.false82, %lor.lhs.false74, %lor.lhs.false71, %if.then64
  br label %return

if.end97:                                         ; preds = %lor.lhs.false90
  br label %if.end110

if.else:                                          ; preds = %if.end57
  %59 = load %struct.op*, %struct.op** %oright, align 8
  %op_type98 = getelementptr inbounds %struct.op, %struct.op* %59, i32 0, i32 4
  %bf.load99 = load i16, i16* %op_type98, align 8
  %bf.clear100 = and i16 %bf.load99, 511
  %bf.cast101 = zext i16 %bf.clear100 to i32
  %cmp102 = icmp ne i32 %bf.cast101, 10
  br i1 %cmp102, label %if.then108, label %lor.lhs.false104

lor.lhs.false104:                                 ; preds = %if.else
  %60 = load %struct.op*, %struct.op** %oright, align 8
  %op_targ = getelementptr inbounds %struct.op, %struct.op* %60, i32 0, i32 3
  %61 = load i64, i64* %op_targ, align 8
  %62 = load %struct.op*, %struct.op** %oleft, align 8
  %op_targ105 = getelementptr inbounds %struct.op, %struct.op* %62, i32 0, i32 3
  %63 = load i64, i64* %op_targ105, align 8
  %cmp106 = icmp ne i64 %61, %63
  br i1 %cmp106, label %if.then108, label %if.end109

if.then108:                                       ; preds = %lor.lhs.false104, %if.else
  br label %return

if.end109:                                        ; preds = %lor.lhs.false104
  br label %if.end110

if.end110:                                        ; preds = %if.end109, %if.end97
  %64 = load %struct.op*, %struct.op** %modop, align 8
  %op_private111 = getelementptr inbounds %struct.op, %struct.op* %64, i32 0, i32 6
  %65 = load i8, i8* %op_private111, align 1
  %conv112 = zext i8 %65 to i32
  %or = or i32 %conv112, 8
  %conv113 = trunc i32 %or to i8
  store i8 %conv113, i8* %op_private111, align 1
  %66 = load %struct.op*, %struct.op** %oleft, align 8
  %op_flags114 = getelementptr inbounds %struct.op, %struct.op* %66, i32 0, i32 5
  %67 = load i8, i8* %op_flags114, align 2
  %68 = load %struct.op*, %struct.op** %oright, align 8
  %op_flags115 = getelementptr inbounds %struct.op, %struct.op* %68, i32 0, i32 5
  store i8 %67, i8* %op_flags115, align 2
  %69 = load %struct.op*, %struct.op** %o.addr, align 8
  call void @Perl_op_null(%struct.op* %69)
  %70 = load %struct.op*, %struct.op** %oleft_pushmark, align 8
  call void @Perl_op_null(%struct.op* %70)
  %71 = load %struct.op*, %struct.op** %oleft, align 8
  %op_type116 = getelementptr inbounds %struct.op, %struct.op* %71, i32 0, i32 4
  %bf.load117 = load i16, i16* %op_type116, align 8
  %bf.clear118 = and i16 %bf.load117, 511
  %bf.cast119 = zext i16 %bf.clear118 to i32
  %cmp120 = icmp eq i32 %bf.cast119, 135
  br i1 %cmp120, label %land.lhs.true122, label %if.end127

land.lhs.true122:                                 ; preds = %if.end110
  %72 = load %struct.op*, %struct.op** %oleft, align 8
  %73 = bitcast %struct.op* %72 to %struct.unop*
  %op_first123 = getelementptr inbounds %struct.unop, %struct.unop* %73, i32 0, i32 7
  %74 = load %struct.op*, %struct.op** %op_first123, align 8
  %tobool124 = icmp ne %struct.op* %74, null
  br i1 %tobool124, label %if.then125, label %if.end127

if.then125:                                       ; preds = %land.lhs.true122
  %75 = load %struct.op*, %struct.op** %oleft, align 8
  %76 = bitcast %struct.op* %75 to %struct.unop*
  %op_first126 = getelementptr inbounds %struct.unop, %struct.unop* %76, i32 0, i32 7
  %77 = load %struct.op*, %struct.op** %op_first126, align 8
  call void @Perl_op_null(%struct.op* %77)
  br label %if.end127

if.end127:                                        ; preds = %if.then125, %land.lhs.true122, %if.end110
  %78 = load %struct.op*, %struct.op** %oleft, align 8
  call void @Perl_op_null(%struct.op* %78)
  br label %return

return:                                           ; preds = %if.end127, %if.then108, %if.then96, %if.then56, %if.then50, %if.then14, %if.then8, %if.then
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.op* @S_scalarkids(%struct.op* %o) #0 {
entry:
  %o.addr = alloca %struct.op*, align 8
  %kid = alloca %struct.op*, align 8
  store %struct.op* %o, %struct.op** %o.addr, align 8
  %0 = load %struct.op*, %struct.op** %o.addr, align 8
  %tobool = icmp ne %struct.op* %0, null
  br i1 %tobool, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %1 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %1, i32 0, i32 5
  %2 = load i8, i8* %op_flags, align 2
  %conv = zext i8 %2 to i32
  %and = and i32 %conv, 4
  %tobool1 = icmp ne i32 %and, 0
  br i1 %tobool1, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %3 = load %struct.op*, %struct.op** %o.addr, align 8
  %4 = bitcast %struct.op* %3 to %struct.listop*
  %op_first = getelementptr inbounds %struct.listop, %struct.listop* %4, i32 0, i32 7
  %5 = load %struct.op*, %struct.op** %op_first, align 8
  store %struct.op* %5, %struct.op** %kid, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then
  %6 = load %struct.op*, %struct.op** %kid, align 8
  %tobool2 = icmp ne %struct.op* %6, null
  br i1 %tobool2, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %7 = load %struct.op*, %struct.op** %kid, align 8
  %call = call %struct.op* @Perl_scalar(%struct.op* %7)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %8 = load %struct.op*, %struct.op** %kid, align 8
  %op_sibling = getelementptr inbounds %struct.op, %struct.op* %8, i32 0, i32 1
  %9 = load %struct.op*, %struct.op** %op_sibling, align 8
  %add.ptr = getelementptr inbounds %struct.op, %struct.op* %9, i64 0
  store %struct.op* %add.ptr, %struct.op** %kid, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end

if.end:                                           ; preds = %for.end, %land.lhs.true, %entry
  %10 = load %struct.op*, %struct.op** %o.addr, align 8
  ret %struct.op* %10
}

declare dso_local %struct.sv* @Perl_sv_2mortal(%struct.sv*) #3

; Function Attrs: noinline nounwind uwtable
define internal %struct.op* @S_gen_constant_list(%struct.op* %o) #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %o.addr = alloca %struct.op*, align 8
  %curop = alloca %struct.op*, align 8
  %oldtmps_floor = alloca i64, align 8
  %svp = alloca %struct.sv**, align 8
  %av = alloca %struct.av*, align 8
  store %struct.op* %o, %struct.op** %o.addr, align 8
  %0 = load i64, i64* @PL_tmps_floor, align 8
  store i64 %0, i64* %oldtmps_floor, align 8
  %1 = load %struct.op*, %struct.op** %o.addr, align 8
  %call = call %struct.op* @Perl_list(%struct.op* %1)
  %2 = load %struct.yy_parser*, %struct.yy_parser** @PL_parser, align 8
  %tobool = icmp ne %struct.yy_parser* %2, null
  br i1 %tobool, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %3 = load %struct.yy_parser*, %struct.yy_parser** @PL_parser, align 8
  %error_count = getelementptr inbounds %struct.yy_parser, %struct.yy_parser* %3, i32 0, i32 44
  %4 = load i8, i8* %error_count, align 1
  %conv = zext i8 %4 to i32
  %tobool1 = icmp ne i32 %conv, 0
  br i1 %tobool1, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %5 = load %struct.op*, %struct.op** %o.addr, align 8
  store %struct.op* %5, %struct.op** %retval, align 8
  br label %return

if.end:                                           ; preds = %land.lhs.true, %entry
  %6 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %6, i32 0, i32 0
  %7 = load %struct.op*, %struct.op** %op_next, align 8
  %tobool2 = icmp ne %struct.op* %7, null
  br i1 %tobool2, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end
  %8 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_next3 = getelementptr inbounds %struct.op, %struct.op* %8, i32 0, i32 0
  %9 = load %struct.op*, %struct.op** %op_next3, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.end
  %10 = load %struct.op*, %struct.op** %o.addr, align 8
  %call4 = call %struct.op* @Perl_op_linklist(%struct.op* %10)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.op* [ %9, %cond.true ], [ %call4, %cond.false ]
  store %struct.op* %cond, %struct.op** %curop, align 8
  %11 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_next5 = getelementptr inbounds %struct.op, %struct.op* %11, i32 0, i32 0
  store %struct.op* null, %struct.op** %op_next5, align 8
  %12 = load void (%struct.op*)*, void (%struct.op*)** @PL_peepp, align 8
  %13 = load %struct.op*, %struct.op** %curop, align 8
  call void %12(%struct.op* %13)
  call void @S_prune_chain_head(%struct.op** %curop)
  %14 = load %struct.op*, %struct.op** %curop, align 8
  store %struct.op* %14, %struct.op** @PL_op, align 8
  %call6 = call %struct.op* @Perl_pp_pushmark()
  %15 = load i32 ()*, i32 ()** @PL_runops, align 8
  %call7 = call i32 %15()
  %16 = load %struct.op*, %struct.op** %curop, align 8
  store %struct.op* %16, %struct.op** @PL_op, align 8
  %call8 = call %struct.op* @Perl_pp_anonlist()
  %17 = load i64, i64* %oldtmps_floor, align 8
  store i64 %17, i64* @PL_tmps_floor, align 8
  br label %do.body

do.body:                                          ; preds = %cond.end
  %18 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type = getelementptr inbounds %struct.op, %struct.op* %18, i32 0, i32 4
  %bf.load = load i16, i16* %op_type, align 8
  %bf.clear = and i16 %bf.load, -512
  %bf.set = or i16 %bf.clear, 135
  store i16 %bf.set, i16* %op_type, align 8
  %19 = load %struct.op* ()*, %struct.op* ()** getelementptr inbounds ([0 x %struct.op* ()*], [0 x %struct.op* ()*]* @PL_ppaddr, i64 0, i64 135), align 8
  %20 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_ppaddr = getelementptr inbounds %struct.op, %struct.op* %20, i32 0, i32 2
  store %struct.op* ()* %19, %struct.op* ()** %op_ppaddr, align 8
  br label %do.end

do.end:                                           ; preds = %do.body
  %21 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %21, i32 0, i32 5
  %22 = load i8, i8* %op_flags, align 2
  %conv9 = zext i8 %22 to i32
  %and = and i32 %conv9, -17
  %conv10 = trunc i32 %and to i8
  store i8 %conv10, i8* %op_flags, align 2
  %23 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_flags11 = getelementptr inbounds %struct.op, %struct.op* %23, i32 0, i32 5
  %24 = load i8, i8* %op_flags11, align 2
  %conv12 = zext i8 %24 to i32
  %or = or i32 %conv12, 8
  %conv13 = trunc i32 %or to i8
  store i8 %conv13, i8* %op_flags11, align 2
  %25 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_opt = getelementptr inbounds %struct.op, %struct.op* %25, i32 0, i32 4
  %bf.load14 = load i16, i16* %op_opt, align 8
  %bf.clear15 = and i16 %bf.load14, -513
  store i16 %bf.clear15, i16* %op_opt, align 8
  %26 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  %incdec.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %26, i32 -1
  store %struct.sv** %incdec.ptr, %struct.sv*** @PL_stack_sp, align 8
  %27 = load %struct.sv*, %struct.sv** %26, align 8
  %28 = bitcast %struct.sv* %27 to i8*
  %29 = bitcast i8* %28 to %struct.sv*
  %call16 = call %struct.sv* @S_SvREFCNT_inc_NN(%struct.sv* %29)
  %30 = bitcast %struct.sv* %call16 to %struct.av*
  store %struct.av* %30, %struct.av** %av, align 8
  %31 = load %struct.op*, %struct.op** %o.addr, align 8
  %32 = bitcast %struct.op* %31 to %struct.unop*
  %op_first = getelementptr inbounds %struct.unop, %struct.unop* %32, i32 0, i32 7
  %33 = load %struct.op*, %struct.op** %op_first, align 8
  store %struct.op* %33, %struct.op** %curop, align 8
  %34 = load %struct.op*, %struct.op** %o.addr, align 8
  %35 = load %struct.av*, %struct.av** %av, align 8
  %36 = bitcast %struct.av* %35 to %struct.sv*
  %call17 = call %struct.op* @Perl_newSVOP(i32 5, i32 0, %struct.sv* %36)
  %call18 = call %struct.op* @Perl_op_sibling_splice(%struct.op* %34, %struct.op* null, i32 -1, %struct.op* %call17)
  %37 = load %struct.op*, %struct.op** %curop, align 8
  call void @Perl_op_free(%struct.op* %37)
  %38 = load %struct.av*, %struct.av** %av, align 8
  %sv_any = getelementptr inbounds %struct.av, %struct.av* %38, i32 0, i32 0
  %39 = load %struct.xpvav*, %struct.xpvav** %sv_any, align 8
  %xav_fill = getelementptr inbounds %struct.xpvav, %struct.xpvav* %39, i32 0, i32 2
  %40 = load i64, i64* %xav_fill, align 8
  %cmp = icmp ne i64 %40, -1
  br i1 %cmp, label %if.then20, label %if.end31

if.then20:                                        ; preds = %do.end
  %41 = load %struct.av*, %struct.av** %av, align 8
  %sv_u = getelementptr inbounds %struct.av, %struct.av* %41, i32 0, i32 3
  %svu_array = bitcast %union.anon.2* %sv_u to %struct.sv***
  %42 = load %struct.sv**, %struct.sv*** %svu_array, align 8
  %43 = load %struct.av*, %struct.av** %av, align 8
  %sv_any21 = getelementptr inbounds %struct.av, %struct.av* %43, i32 0, i32 0
  %44 = load %struct.xpvav*, %struct.xpvav** %sv_any21, align 8
  %xav_fill22 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %44, i32 0, i32 2
  %45 = load i64, i64* %xav_fill22, align 8
  %add.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %42, i64 %45
  store %struct.sv** %add.ptr, %struct.sv*** %svp, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then20
  %46 = load %struct.sv**, %struct.sv*** %svp, align 8
  %47 = load %struct.av*, %struct.av** %av, align 8
  %sv_u23 = getelementptr inbounds %struct.av, %struct.av* %47, i32 0, i32 3
  %svu_array24 = bitcast %union.anon.2* %sv_u23 to %struct.sv***
  %48 = load %struct.sv**, %struct.sv*** %svu_array24, align 8
  %cmp25 = icmp uge %struct.sv** %46, %48
  br i1 %cmp25, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %49 = load %struct.sv**, %struct.sv*** %svp, align 8
  %50 = load %struct.sv*, %struct.sv** %49, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %50, i32 0, i32 2
  %51 = load i32, i32* %sv_flags, align 4
  %or27 = or i32 %51, 131072
  store i32 %or27, i32* %sv_flags, align 4
  %52 = load %struct.sv**, %struct.sv*** %svp, align 8
  %53 = load %struct.sv*, %struct.sv** %52, align 8
  %sv_flags28 = getelementptr inbounds %struct.sv, %struct.sv* %53, i32 0, i32 2
  %54 = load i32, i32* %sv_flags28, align 4
  %or29 = or i32 %54, 134283264
  store i32 %or29, i32* %sv_flags28, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %55 = load %struct.sv**, %struct.sv*** %svp, align 8
  %incdec.ptr30 = getelementptr inbounds %struct.sv*, %struct.sv** %55, i32 -1
  store %struct.sv** %incdec.ptr30, %struct.sv*** %svp, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end31

if.end31:                                         ; preds = %for.end, %do.end
  %56 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_next32 = getelementptr inbounds %struct.op, %struct.op* %56, i32 0, i32 0
  %57 = load %struct.op*, %struct.op** %op_next32, align 8
  %tobool33 = icmp ne %struct.op* %57, null
  br i1 %tobool33, label %cond.true34, label %cond.false36

cond.true34:                                      ; preds = %if.end31
  %58 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_next35 = getelementptr inbounds %struct.op, %struct.op* %58, i32 0, i32 0
  %59 = load %struct.op*, %struct.op** %op_next35, align 8
  br label %cond.end38

cond.false36:                                     ; preds = %if.end31
  %60 = load %struct.op*, %struct.op** %o.addr, align 8
  %call37 = call %struct.op* @Perl_op_linklist(%struct.op* %60)
  br label %cond.end38

cond.end38:                                       ; preds = %cond.false36, %cond.true34
  %cond39 = phi %struct.op* [ %59, %cond.true34 ], [ %call37, %cond.false36 ]
  %61 = load %struct.op*, %struct.op** %o.addr, align 8
  %call40 = call %struct.op* @Perl_list(%struct.op* %61)
  store %struct.op* %call40, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %cond.end38, %if.then
  %62 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %62
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.op* @S_listkids(%struct.op* %o) #0 {
entry:
  %o.addr = alloca %struct.op*, align 8
  %kid = alloca %struct.op*, align 8
  store %struct.op* %o, %struct.op** %o.addr, align 8
  %0 = load %struct.op*, %struct.op** %o.addr, align 8
  %tobool = icmp ne %struct.op* %0, null
  br i1 %tobool, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %1 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %1, i32 0, i32 5
  %2 = load i8, i8* %op_flags, align 2
  %conv = zext i8 %2 to i32
  %and = and i32 %conv, 4
  %tobool1 = icmp ne i32 %and, 0
  br i1 %tobool1, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %3 = load %struct.op*, %struct.op** %o.addr, align 8
  %4 = bitcast %struct.op* %3 to %struct.listop*
  %op_first = getelementptr inbounds %struct.listop, %struct.listop* %4, i32 0, i32 7
  %5 = load %struct.op*, %struct.op** %op_first, align 8
  store %struct.op* %5, %struct.op** %kid, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then
  %6 = load %struct.op*, %struct.op** %kid, align 8
  %tobool2 = icmp ne %struct.op* %6, null
  br i1 %tobool2, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %7 = load %struct.op*, %struct.op** %kid, align 8
  %call = call %struct.op* @Perl_list(%struct.op* %7)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %8 = load %struct.op*, %struct.op** %kid, align 8
  %op_sibling = getelementptr inbounds %struct.op, %struct.op* %8, i32 0, i32 1
  %9 = load %struct.op*, %struct.op** %op_sibling, align 8
  %add.ptr = getelementptr inbounds %struct.op, %struct.op* %9, i64 0
  store %struct.op* %add.ptr, %struct.op** %kid, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end

if.end:                                           ; preds = %for.end, %land.lhs.true, %entry
  %10 = load %struct.op*, %struct.op** %o.addr, align 8
  ret %struct.op* %10
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @S_check_hash_fields_and_hekify(%struct.unop* %rop, %struct.svop* %key_op) #0 {
entry:
  %rop.addr = alloca %struct.unop*, align 8
  %key_op.addr = alloca %struct.svop*, align 8
  %lexname = alloca %struct.padname*, align 8
  %fields = alloca %struct.gv**, align 8
  %check_fields = alloca i8, align 1
  %svp = alloca %struct.sv**, align 8
  %sv = alloca %struct.sv*, align 8
  %keylen = alloca i64, align 8
  %key = alloca i8*, align 8
  %nsv = alloca %struct.sv*, align 8
  store %struct.unop* %rop, %struct.unop** %rop.addr, align 8
  store %struct.svop* %key_op, %struct.svop** %key_op.addr, align 8
  %0 = load %struct.unop*, %struct.unop** %rop.addr, align 8
  %tobool = icmp ne %struct.unop* %0, null
  br i1 %tobool, label %if.then, label %if.end20

if.then:                                          ; preds = %entry
  %1 = load %struct.unop*, %struct.unop** %rop.addr, align 8
  %op_first = getelementptr inbounds %struct.unop, %struct.unop* %1, i32 0, i32 7
  %2 = load %struct.op*, %struct.op** %op_first, align 8
  %op_type = getelementptr inbounds %struct.op, %struct.op* %2, i32 0, i32 4
  %bf.load = load i16, i16* %op_type, align 8
  %bf.clear = and i16 %bf.load, 511
  %bf.cast = zext i16 %bf.clear to i32
  %cmp = icmp eq i32 %bf.cast, 9
  br i1 %cmp, label %if.then1, label %if.else

if.then1:                                         ; preds = %if.then
  %3 = load %struct.unop*, %struct.unop** %rop.addr, align 8
  %op_first2 = getelementptr inbounds %struct.unop, %struct.unop* %3, i32 0, i32 7
  %4 = load %struct.op*, %struct.op** %op_first2, align 8
  %5 = bitcast %struct.op* %4 to %struct.unop*
  store %struct.unop* %5, %struct.unop** %rop.addr, align 8
  br label %if.end19

if.else:                                          ; preds = %if.then
  %6 = load %struct.unop*, %struct.unop** %rop.addr, align 8
  %op_first3 = getelementptr inbounds %struct.unop, %struct.unop* %6, i32 0, i32 7
  %7 = load %struct.op*, %struct.op** %op_first3, align 8
  %op_type4 = getelementptr inbounds %struct.op, %struct.op* %7, i32 0, i32 4
  %bf.load5 = load i16, i16* %op_type4, align 8
  %bf.clear6 = and i16 %bf.load5, 511
  %bf.cast7 = zext i16 %bf.clear6 to i32
  %cmp8 = icmp eq i32 %bf.cast7, 198
  br i1 %cmp8, label %land.lhs.true, label %if.else18

land.lhs.true:                                    ; preds = %if.else
  %8 = load %struct.unop*, %struct.unop** %rop.addr, align 8
  %op_first9 = getelementptr inbounds %struct.unop, %struct.unop* %8, i32 0, i32 7
  %9 = load %struct.op*, %struct.op** %op_first9, align 8
  %10 = bitcast %struct.op* %9 to %struct.listop*
  %op_last = getelementptr inbounds %struct.listop, %struct.listop* %10, i32 0, i32 8
  %11 = load %struct.op*, %struct.op** %op_last, align 8
  %op_type10 = getelementptr inbounds %struct.op, %struct.op* %11, i32 0, i32 4
  %bf.load11 = load i16, i16* %op_type10, align 8
  %bf.clear12 = and i16 %bf.load11, 511
  %bf.cast13 = zext i16 %bf.clear12 to i32
  %cmp14 = icmp eq i32 %bf.cast13, 9
  br i1 %cmp14, label %if.then15, label %if.else18

if.then15:                                        ; preds = %land.lhs.true
  %12 = load %struct.unop*, %struct.unop** %rop.addr, align 8
  %op_first16 = getelementptr inbounds %struct.unop, %struct.unop* %12, i32 0, i32 7
  %13 = load %struct.op*, %struct.op** %op_first16, align 8
  %14 = bitcast %struct.op* %13 to %struct.listop*
  %op_last17 = getelementptr inbounds %struct.listop, %struct.listop* %14, i32 0, i32 8
  %15 = load %struct.op*, %struct.op** %op_last17, align 8
  %16 = bitcast %struct.op* %15 to %struct.unop*
  store %struct.unop* %16, %struct.unop** %rop.addr, align 8
  br label %if.end

if.else18:                                        ; preds = %land.lhs.true, %if.else
  store %struct.unop* null, %struct.unop** %rop.addr, align 8
  br label %if.end

if.end:                                           ; preds = %if.else18, %if.then15
  br label %if.end19

if.end19:                                         ; preds = %if.end, %if.then1
  br label %if.end20

if.end20:                                         ; preds = %if.end19, %entry
  store %struct.padname* null, %struct.padname** %lexname, align 8
  store %struct.gv** null, %struct.gv*** %fields, align 8
  %17 = load %struct.unop*, %struct.unop** %rop.addr, align 8
  %tobool21 = icmp ne %struct.unop* %17, null
  br i1 %tobool21, label %land.lhs.true22, label %land.end

land.lhs.true22:                                  ; preds = %if.end20
  %18 = load %struct.padnamelist*, %struct.padnamelist** @PL_comppad_name, align 8
  %19 = load %struct.unop*, %struct.unop** %rop.addr, align 8
  %op_targ = getelementptr inbounds %struct.unop, %struct.unop* %19, i32 0, i32 3
  %20 = load i64, i64* %op_targ, align 8
  %call = call %struct.padname* @Perl_padnamelist_fetch(%struct.padnamelist* %18, i64 %20)
  store %struct.padname* %call, %struct.padname** %lexname, align 8
  %21 = load %struct.padname*, %struct.padname** %lexname, align 8
  %xpadn_type_u = getelementptr inbounds %struct.padname, %struct.padname* %21, i32 0, i32 2
  %xpadn_typestash = bitcast %union.anon.23* %xpadn_type_u to %struct.hv**
  %22 = load %struct.hv*, %struct.hv** %xpadn_typestash, align 8
  %tobool23 = icmp ne %struct.hv* %22, null
  %lnot = xor i1 %tobool23, true
  %lnot24 = xor i1 %lnot, true
  br i1 %lnot24, label %land.lhs.true25, label %land.end

land.lhs.true25:                                  ; preds = %land.lhs.true22
  %23 = load %struct.padname*, %struct.padname** %lexname, align 8
  %xpadn_type_u26 = getelementptr inbounds %struct.padname, %struct.padname* %23, i32 0, i32 2
  %xpadn_typestash27 = bitcast %union.anon.23* %xpadn_type_u26 to %struct.hv**
  %24 = load %struct.hv*, %struct.hv** %xpadn_typestash27, align 8
  %call28 = call i8* @Perl_hv_common(%struct.hv* %24, %struct.sv* null, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.23, i64 0, i64 0), i64 6, i32 0, i32 32, %struct.sv* null, i32 0)
  %25 = bitcast i8* %call28 to %struct.sv**
  %26 = bitcast %struct.sv** %25 to %struct.gv**
  store %struct.gv** %26, %struct.gv*** %fields, align 8
  %tobool29 = icmp ne %struct.gv** %26, null
  br i1 %tobool29, label %land.lhs.true30, label %land.end

land.lhs.true30:                                  ; preds = %land.lhs.true25
  %27 = load %struct.gv**, %struct.gv*** %fields, align 8
  %28 = load %struct.gv*, %struct.gv** %27, align 8
  %sv_flags = getelementptr inbounds %struct.gv, %struct.gv* %28, i32 0, i32 2
  %29 = load i32, i32* %sv_flags, align 4
  %and = and i32 %29, 255
  %cmp31 = icmp eq i32 %and, 9
  br i1 %cmp31, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %land.lhs.true30
  %30 = load %struct.gv**, %struct.gv*** %fields, align 8
  %31 = load %struct.gv*, %struct.gv** %30, align 8
  %sv_u = getelementptr inbounds %struct.gv, %struct.gv* %31, i32 0, i32 3
  %svu_gp = bitcast %union.anon.3* %sv_u to %struct.gp**
  %32 = load %struct.gp*, %struct.gp** %svu_gp, align 8
  %add.ptr = getelementptr inbounds %struct.gp, %struct.gp* %32, i64 0
  %gp_hv = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr, i32 0, i32 5
  %33 = load %struct.hv*, %struct.hv** %gp_hv, align 8
  %tobool32 = icmp ne %struct.hv* %33, null
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true30, %land.lhs.true25, %land.lhs.true22, %if.end20
  %34 = phi i1 [ false, %land.lhs.true30 ], [ false, %land.lhs.true25 ], [ false, %land.lhs.true22 ], [ false, %if.end20 ], [ %tobool32, %land.rhs ]
  %frombool = zext i1 %34 to i8
  store i8 %frombool, i8* %check_fields, align 1
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %land.end
  %35 = load %struct.svop*, %struct.svop** %key_op.addr, align 8
  %tobool33 = icmp ne %struct.svop* %35, null
  br i1 %tobool33, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %36 = load %struct.svop*, %struct.svop** %key_op.addr, align 8
  %op_type34 = getelementptr inbounds %struct.svop, %struct.svop* %36, i32 0, i32 4
  %bf.load35 = load i16, i16* %op_type34, align 8
  %bf.clear36 = and i16 %bf.load35, 511
  %bf.cast37 = zext i16 %bf.clear36 to i32
  %cmp38 = icmp ne i32 %bf.cast37, 5
  br i1 %cmp38, label %if.then39, label %if.end40

if.then39:                                        ; preds = %for.body
  br label %for.inc

if.end40:                                         ; preds = %for.body
  %37 = load %struct.svop*, %struct.svop** %key_op.addr, align 8
  %op_sv = getelementptr inbounds %struct.svop, %struct.svop* %37, i32 0, i32 7
  store %struct.sv** %op_sv, %struct.sv*** %svp, align 8
  %38 = load %struct.sv**, %struct.sv*** %svp, align 8
  %39 = load %struct.sv*, %struct.sv** %38, align 8
  store %struct.sv* %39, %struct.sv** %sv, align 8
  %sv_flags41 = getelementptr inbounds %struct.sv, %struct.sv* %39, i32 0, i32 2
  %40 = load i32, i32* %sv_flags41, align 4
  %and42 = and i32 %40, 268435456
  %tobool43 = icmp ne i32 %and42, 0
  br i1 %tobool43, label %land.lhs.true44, label %land.lhs.true46

land.lhs.true44:                                  ; preds = %if.end40
  %41 = load %struct.sv**, %struct.sv*** %svp, align 8
  %42 = load %struct.sv*, %struct.sv** %41, align 8
  store %struct.sv* %42, %struct.sv** %sv, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %42, i32 0, i32 0
  %43 = load i8*, i8** %sv_any, align 8
  %44 = bitcast i8* %43 to %struct.xpv*
  %xpv_len_u = getelementptr inbounds %struct.xpv, %struct.xpv* %44, i32 0, i32 3
  %xpvlenu_len = bitcast %union.anon.21* %xpv_len_u to i64*
  %45 = load i64, i64* %xpvlenu_len, align 8
  %cmp45 = icmp eq i64 %45, 0
  br i1 %cmp45, label %if.end81, label %land.lhs.true46

land.lhs.true46:                                  ; preds = %land.lhs.true44, %if.end40
  %46 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags47 = getelementptr inbounds %struct.sv, %struct.sv* %46, i32 0, i32 2
  %47 = load i32, i32* %sv_flags47, align 4
  %and48 = and i32 %47, 255
  %cmp49 = icmp ult i32 %and48, 7
  br i1 %cmp49, label %land.lhs.true50, label %if.end81

land.lhs.true50:                                  ; preds = %land.lhs.true46
  %48 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags51 = getelementptr inbounds %struct.sv, %struct.sv* %48, i32 0, i32 2
  %49 = load i32, i32* %sv_flags51, align 4
  %and52 = and i32 %49, 65280
  %tobool53 = icmp ne i32 %and52, 0
  br i1 %tobool53, label %land.lhs.true61, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true50
  %50 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags54 = getelementptr inbounds %struct.sv, %struct.sv* %50, i32 0, i32 2
  %51 = load i32, i32* %sv_flags54, align 4
  %and55 = and i32 %51, 255
  %cmp56 = icmp eq i32 %and55, 8
  br i1 %cmp56, label %land.lhs.true61, label %lor.lhs.false57

lor.lhs.false57:                                  ; preds = %lor.lhs.false
  %52 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags58 = getelementptr inbounds %struct.sv, %struct.sv* %52, i32 0, i32 2
  %53 = load i32, i32* %sv_flags58, align 4
  %and59 = and i32 %53, 16826623
  %cmp60 = icmp eq i32 %and59, 16777226
  br i1 %cmp60, label %land.lhs.true61, label %if.end81

land.lhs.true61:                                  ; preds = %lor.lhs.false57, %lor.lhs.false, %land.lhs.true50
  %54 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags62 = getelementptr inbounds %struct.sv, %struct.sv* %54, i32 0, i32 2
  %55 = load i32, i32* %sv_flags62, align 4
  %and63 = and i32 %55, 2048
  %tobool64 = icmp ne i32 %and63, 0
  br i1 %tobool64, label %if.end81, label %if.then65

if.then65:                                        ; preds = %land.lhs.true61
  %56 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags66 = getelementptr inbounds %struct.sv, %struct.sv* %56, i32 0, i32 2
  %57 = load i32, i32* %sv_flags66, align 4
  %and67 = and i32 %57, 2098176
  %cmp68 = icmp eq i32 %and67, 1024
  br i1 %cmp68, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then65
  %58 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any69 = getelementptr inbounds %struct.sv, %struct.sv* %58, i32 0, i32 0
  %59 = load i8*, i8** %sv_any69, align 8
  %60 = bitcast i8* %59 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %60, i32 0, i32 2
  %61 = load i64, i64* %xpv_cur, align 8
  store i64 %61, i64* %keylen, align 8
  %62 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_u70 = getelementptr inbounds %struct.sv, %struct.sv* %62, i32 0, i32 3
  %svu_pv = bitcast %union.anon* %sv_u70 to i8**
  %63 = load i8*, i8** %svu_pv, align 8
  %add.ptr71 = getelementptr inbounds i8, i8* %63, i64 0
  br label %cond.end

cond.false:                                       ; preds = %if.then65
  %64 = load %struct.sv*, %struct.sv** %sv, align 8
  %call72 = call i8* @Perl_sv_2pv_flags(%struct.sv* %64, i64* %keylen, i32 34)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %add.ptr71, %cond.true ], [ %call72, %cond.false ]
  store i8* %cond, i8** %key, align 8
  %65 = load i8*, i8** %key, align 8
  %66 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags73 = getelementptr inbounds %struct.sv, %struct.sv* %66, i32 0, i32 2
  %67 = load i32, i32* %sv_flags73, align 4
  %and74 = and i32 %67, 536870912
  %tobool75 = icmp ne i32 %and74, 0
  br i1 %tobool75, label %cond.true76, label %cond.false77

cond.true76:                                      ; preds = %cond.end
  %68 = load i64, i64* %keylen, align 8
  %sub = sub nsw i64 0, %68
  br label %cond.end78

cond.false77:                                     ; preds = %cond.end
  %69 = load i64, i64* %keylen, align 8
  br label %cond.end78

cond.end78:                                       ; preds = %cond.false77, %cond.true76
  %cond79 = phi i64 [ %sub, %cond.true76 ], [ %69, %cond.false77 ]
  %conv = trunc i64 %cond79 to i32
  %call80 = call %struct.sv* @Perl_newSVpvn_share(i8* %65, i32 %conv, i32 0)
  store %struct.sv* %call80, %struct.sv** %nsv, align 8
  %70 = load %struct.sv*, %struct.sv** %sv, align 8
  %71 = bitcast %struct.sv* %70 to i8*
  %72 = bitcast i8* %71 to %struct.sv*
  call void @S_SvREFCNT_dec_NN(%struct.sv* %72)
  %73 = load %struct.sv*, %struct.sv** %nsv, align 8
  %74 = load %struct.sv**, %struct.sv*** %svp, align 8
  store %struct.sv* %73, %struct.sv** %74, align 8
  br label %if.end81

if.end81:                                         ; preds = %cond.end78, %land.lhs.true61, %lor.lhs.false57, %land.lhs.true46, %land.lhs.true44
  %75 = load i8, i8* %check_fields, align 1
  %tobool82 = trunc i8 %75 to i1
  br i1 %tobool82, label %land.lhs.true84, label %if.end148

land.lhs.true84:                                  ; preds = %if.end81
  %76 = load %struct.gv**, %struct.gv*** %fields, align 8
  %77 = load %struct.gv*, %struct.gv** %76, align 8
  %sv_u85 = getelementptr inbounds %struct.gv, %struct.gv* %77, i32 0, i32 3
  %svu_gp86 = bitcast %union.anon.3* %sv_u85 to %struct.gp**
  %78 = load %struct.gp*, %struct.gp** %svu_gp86, align 8
  %add.ptr87 = getelementptr inbounds %struct.gp, %struct.gp* %78, i64 0
  %gp_hv88 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr87, i32 0, i32 5
  %79 = load %struct.hv*, %struct.hv** %gp_hv88, align 8
  %80 = load %struct.sv**, %struct.sv*** %svp, align 8
  %81 = load %struct.sv*, %struct.sv** %80, align 8
  %call89 = call i8* @Perl_hv_common(%struct.hv* %79, %struct.sv* %81, i8* null, i64 0, i32 0, i32 0, %struct.sv* null, i32 0)
  %82 = bitcast i8* %call89 to %struct.he*
  %tobool90 = icmp ne %struct.he* %82, null
  br i1 %tobool90, label %if.end148, label %if.then91

if.then91:                                        ; preds = %land.lhs.true84
  %83 = load %struct.sv**, %struct.sv*** %svp, align 8
  %84 = load %struct.sv*, %struct.sv** %83, align 8
  %85 = bitcast %struct.sv* %84 to i8*
  %86 = load %struct.padname*, %struct.padname** %lexname, align 8
  %xpadn_len = getelementptr inbounds %struct.padname, %struct.padname* %86, i32 0, i32 7
  %87 = load i8, i8* %xpadn_len, align 8
  %conv92 = zext i8 %87 to i64
  %88 = load %struct.padname*, %struct.padname** %lexname, align 8
  %xpadn_pv = getelementptr inbounds %struct.padname, %struct.padname* %88, i32 0, i32 0
  %89 = load i8*, i8** %xpadn_pv, align 8
  %90 = load %struct.padname*, %struct.padname** %lexname, align 8
  %xpadn_type_u93 = getelementptr inbounds %struct.padname, %struct.padname* %90, i32 0, i32 2
  %xpadn_typestash94 = bitcast %union.anon.23* %xpadn_type_u93 to %struct.hv**
  %91 = load %struct.hv*, %struct.hv** %xpadn_typestash94, align 8
  %sv_flags95 = getelementptr inbounds %struct.hv, %struct.hv* %91, i32 0, i32 2
  %92 = load i32, i32* %sv_flags95, align 4
  %and96 = and i32 %92, 33554432
  %tobool97 = icmp ne i32 %and96, 0
  br i1 %tobool97, label %land.lhs.true98, label %cond.false145

land.lhs.true98:                                  ; preds = %if.then91
  %93 = load %struct.padname*, %struct.padname** %lexname, align 8
  %xpadn_type_u99 = getelementptr inbounds %struct.padname, %struct.padname* %93, i32 0, i32 2
  %xpadn_typestash100 = bitcast %union.anon.23* %xpadn_type_u99 to %struct.hv**
  %94 = load %struct.hv*, %struct.hv** %xpadn_typestash100, align 8
  %sv_u101 = getelementptr inbounds %struct.hv, %struct.hv* %94, i32 0, i32 3
  %svu_hash = bitcast %union.anon.4* %sv_u101 to %struct.he***
  %95 = load %struct.he**, %struct.he*** %svu_hash, align 8
  %96 = load %struct.padname*, %struct.padname** %lexname, align 8
  %xpadn_type_u102 = getelementptr inbounds %struct.padname, %struct.padname* %96, i32 0, i32 2
  %xpadn_typestash103 = bitcast %union.anon.23* %xpadn_type_u102 to %struct.hv**
  %97 = load %struct.hv*, %struct.hv** %xpadn_typestash103, align 8
  %sv_any104 = getelementptr inbounds %struct.hv, %struct.hv* %97, i32 0, i32 0
  %98 = load %struct.xpvhv*, %struct.xpvhv** %sv_any104, align 8
  %xhv_max = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %98, i32 0, i32 3
  %99 = load i64, i64* %xhv_max, align 8
  %add = add i64 %99, 1
  %arrayidx = getelementptr inbounds %struct.he*, %struct.he** %95, i64 %add
  %100 = bitcast %struct.he** %arrayidx to %struct.xpvhv_aux*
  %xhv_name_u = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %100, i32 0, i32 0
  %xhvnameu_name = bitcast %union._xhvnameu* %xhv_name_u to %struct.hek**
  %101 = load %struct.hek*, %struct.hek** %xhvnameu_name, align 8
  %tobool105 = icmp ne %struct.hek* %101, null
  br i1 %tobool105, label %cond.true106, label %cond.false145

cond.true106:                                     ; preds = %land.lhs.true98
  %102 = load %struct.padname*, %struct.padname** %lexname, align 8
  %xpadn_type_u107 = getelementptr inbounds %struct.padname, %struct.padname* %102, i32 0, i32 2
  %xpadn_typestash108 = bitcast %union.anon.23* %xpadn_type_u107 to %struct.hv**
  %103 = load %struct.hv*, %struct.hv** %xpadn_typestash108, align 8
  %sv_u109 = getelementptr inbounds %struct.hv, %struct.hv* %103, i32 0, i32 3
  %svu_hash110 = bitcast %union.anon.4* %sv_u109 to %struct.he***
  %104 = load %struct.he**, %struct.he*** %svu_hash110, align 8
  %105 = load %struct.padname*, %struct.padname** %lexname, align 8
  %xpadn_type_u111 = getelementptr inbounds %struct.padname, %struct.padname* %105, i32 0, i32 2
  %xpadn_typestash112 = bitcast %union.anon.23* %xpadn_type_u111 to %struct.hv**
  %106 = load %struct.hv*, %struct.hv** %xpadn_typestash112, align 8
  %sv_any113 = getelementptr inbounds %struct.hv, %struct.hv* %106, i32 0, i32 0
  %107 = load %struct.xpvhv*, %struct.xpvhv** %sv_any113, align 8
  %xhv_max114 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %107, i32 0, i32 3
  %108 = load i64, i64* %xhv_max114, align 8
  %add115 = add i64 %108, 1
  %arrayidx116 = getelementptr inbounds %struct.he*, %struct.he** %104, i64 %add115
  %109 = bitcast %struct.he** %arrayidx116 to %struct.xpvhv_aux*
  %xhv_name_count = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %109, i32 0, i32 4
  %110 = load i32, i32* %xhv_name_count, align 4
  %tobool117 = icmp ne i32 %110, 0
  br i1 %tobool117, label %cond.true118, label %cond.false130

cond.true118:                                     ; preds = %cond.true106
  %111 = load %struct.padname*, %struct.padname** %lexname, align 8
  %xpadn_type_u119 = getelementptr inbounds %struct.padname, %struct.padname* %111, i32 0, i32 2
  %xpadn_typestash120 = bitcast %union.anon.23* %xpadn_type_u119 to %struct.hv**
  %112 = load %struct.hv*, %struct.hv** %xpadn_typestash120, align 8
  %sv_u121 = getelementptr inbounds %struct.hv, %struct.hv* %112, i32 0, i32 3
  %svu_hash122 = bitcast %union.anon.4* %sv_u121 to %struct.he***
  %113 = load %struct.he**, %struct.he*** %svu_hash122, align 8
  %114 = load %struct.padname*, %struct.padname** %lexname, align 8
  %xpadn_type_u123 = getelementptr inbounds %struct.padname, %struct.padname* %114, i32 0, i32 2
  %xpadn_typestash124 = bitcast %union.anon.23* %xpadn_type_u123 to %struct.hv**
  %115 = load %struct.hv*, %struct.hv** %xpadn_typestash124, align 8
  %sv_any125 = getelementptr inbounds %struct.hv, %struct.hv* %115, i32 0, i32 0
  %116 = load %struct.xpvhv*, %struct.xpvhv** %sv_any125, align 8
  %xhv_max126 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %116, i32 0, i32 3
  %117 = load i64, i64* %xhv_max126, align 8
  %add127 = add i64 %117, 1
  %arrayidx128 = getelementptr inbounds %struct.he*, %struct.he** %113, i64 %add127
  %118 = bitcast %struct.he** %arrayidx128 to %struct.xpvhv_aux*
  %xhv_name_u129 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %118, i32 0, i32 0
  %xhvnameu_names = bitcast %union._xhvnameu* %xhv_name_u129 to %struct.hek***
  %119 = load %struct.hek**, %struct.hek*** %xhvnameu_names, align 8
  %120 = load %struct.hek*, %struct.hek** %119, align 8
  br label %cond.end143

cond.false130:                                    ; preds = %cond.true106
  %121 = load %struct.padname*, %struct.padname** %lexname, align 8
  %xpadn_type_u131 = getelementptr inbounds %struct.padname, %struct.padname* %121, i32 0, i32 2
  %xpadn_typestash132 = bitcast %union.anon.23* %xpadn_type_u131 to %struct.hv**
  %122 = load %struct.hv*, %struct.hv** %xpadn_typestash132, align 8
  %sv_u133 = getelementptr inbounds %struct.hv, %struct.hv* %122, i32 0, i32 3
  %svu_hash134 = bitcast %union.anon.4* %sv_u133 to %struct.he***
  %123 = load %struct.he**, %struct.he*** %svu_hash134, align 8
  %124 = load %struct.padname*, %struct.padname** %lexname, align 8
  %xpadn_type_u135 = getelementptr inbounds %struct.padname, %struct.padname* %124, i32 0, i32 2
  %xpadn_typestash136 = bitcast %union.anon.23* %xpadn_type_u135 to %struct.hv**
  %125 = load %struct.hv*, %struct.hv** %xpadn_typestash136, align 8
  %sv_any137 = getelementptr inbounds %struct.hv, %struct.hv* %125, i32 0, i32 0
  %126 = load %struct.xpvhv*, %struct.xpvhv** %sv_any137, align 8
  %xhv_max138 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %126, i32 0, i32 3
  %127 = load i64, i64* %xhv_max138, align 8
  %add139 = add i64 %127, 1
  %arrayidx140 = getelementptr inbounds %struct.he*, %struct.he** %123, i64 %add139
  %128 = bitcast %struct.he** %arrayidx140 to %struct.xpvhv_aux*
  %xhv_name_u141 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %128, i32 0, i32 0
  %xhvnameu_name142 = bitcast %union._xhvnameu* %xhv_name_u141 to %struct.hek**
  %129 = load %struct.hek*, %struct.hek** %xhvnameu_name142, align 8
  br label %cond.end143

cond.end143:                                      ; preds = %cond.false130, %cond.true118
  %cond144 = phi %struct.hek* [ %120, %cond.true118 ], [ %129, %cond.false130 ]
  br label %cond.end146

cond.false145:                                    ; preds = %land.lhs.true98, %if.then91
  br label %cond.end146

cond.end146:                                      ; preds = %cond.false145, %cond.end143
  %cond147 = phi %struct.hek* [ %cond144, %cond.end143 ], [ null, %cond.false145 ]
  %130 = bitcast %struct.hek* %cond147 to i8*
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.24, i64 0, i64 0), i8* %85, i32 1, i64 %conv92, i8* %89, i8* %130)
  br label %if.end148

if.end148:                                        ; preds = %cond.end146, %land.lhs.true84, %if.end81
  br label %for.inc

for.inc:                                          ; preds = %if.end148, %if.then39
  %131 = load %struct.svop*, %struct.svop** %key_op.addr, align 8
  %op_sibling = getelementptr inbounds %struct.svop, %struct.svop* %131, i32 0, i32 1
  %132 = load %struct.op*, %struct.op** %op_sibling, align 8
  %add.ptr149 = getelementptr inbounds %struct.op, %struct.op* %132, i64 0
  %133 = bitcast %struct.op* %add.ptr149 to %struct.svop*
  store %struct.svop* %133, %struct.svop** %key_op.addr, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

declare dso_local %struct.padname* @Perl_padnamelist_fetch(%struct.padnamelist*, i64) #3

declare dso_local i8* @Perl_hv_common(%struct.hv*, %struct.sv*, i8*, i64, i32, i32, %struct.sv*, i32) #3

declare dso_local i8* @Perl_sv_2pv_flags(%struct.sv*, i64*, i32) #3

declare dso_local %struct.sv* @Perl_newSVpvn_share(i8*, i32, i32) #3

; Function Attrs: noinline nounwind uwtable
define dso_local void @Perl_finalize_optree(%struct.op* %o) #0 {
entry:
  %o.addr = alloca %struct.op*, align 8
  store %struct.op* %o, %struct.op** %o.addr, align 8
  call void @Perl_push_scope()
  call void @Perl_save_vptr(i8* bitcast (%struct.cop** @PL_curcop to i8*))
  %0 = load %struct.op*, %struct.op** %o.addr, align 8
  call void @S_finalize_op(%struct.op* %0)
  call void @Perl_pop_scope()
  ret void
}

declare dso_local void @Perl_save_vptr(i8*) #3

; Function Attrs: noinline nounwind uwtable
define internal void @S_finalize_op(%struct.op* %o) #0 {
entry:
  %o.addr = alloca %struct.op*, align 8
  %sib = alloca %struct.op*, align 8
  %type = alloca i16, align 2
  %oldline = alloca i32, align 4
  %gv = alloca %struct.gv*, align 8
  %sv = alloca %struct.sv*, align 8
  %rop = alloca %struct.unop*, align 8
  %key_op = alloca %struct.svop*, align 8
  %kid = alloca %struct.op*, align 8
  %kid151 = alloca %struct.op*, align 8
  store %struct.op* %o, %struct.op** %o.addr, align 8
  %0 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type = getelementptr inbounds %struct.op, %struct.op* %0, i32 0, i32 4
  %bf.load = load i16, i16* %op_type, align 8
  %bf.clear = and i16 %bf.load, 511
  %bf.cast = zext i16 %bf.clear to i32
  switch i32 %bf.cast, label %sw.default [
    i32 193, label %sw.bb
    i32 194, label %sw.bb
    i32 315, label %sw.bb1
    i32 7, label %sw.bb41
    i32 5, label %sw.bb68
    i32 150, label %sw.bb75
    i32 151, label %sw.bb84
    i32 152, label %sw.bb85
    i32 139, label %sw.bb140
    i32 33, label %sw.bb141
  ]

sw.bb:                                            ; preds = %entry, %entry
  %1 = load %struct.op*, %struct.op** %o.addr, align 8
  %2 = bitcast %struct.op* %1 to %struct.cop*
  store %struct.cop* %2, %struct.cop** @PL_curcop, align 8
  br label %sw.epilog

sw.bb1:                                           ; preds = %entry
  %3 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_sibling = getelementptr inbounds %struct.op, %struct.op* %3, i32 0, i32 1
  %4 = load %struct.op*, %struct.op** %op_sibling, align 8
  %tobool = icmp ne %struct.op* %4, null
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %sw.bb1
  br i1 true, label %if.then, label %if.end40

cond.false:                                       ; preds = %sw.bb1
  br i1 false, label %if.then, label %if.end40

if.then:                                          ; preds = %cond.false, %cond.true
  %5 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_sibling2 = getelementptr inbounds %struct.op, %struct.op* %5, i32 0, i32 1
  %6 = load %struct.op*, %struct.op** %op_sibling2, align 8
  %add.ptr = getelementptr inbounds %struct.op, %struct.op* %6, i64 0
  store %struct.op* %add.ptr, %struct.op** %sib, align 8
  %7 = load %struct.op*, %struct.op** %sib, align 8
  %op_type3 = getelementptr inbounds %struct.op, %struct.op* %7, i32 0, i32 4
  %bf.load4 = load i16, i16* %op_type3, align 8
  %bf.clear5 = and i16 %bf.load4, 511
  %bf.cast6 = zext i16 %bf.clear5 to i32
  %cmp = icmp eq i32 %bf.cast6, 193
  br i1 %cmp, label %land.lhs.true, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.then
  %8 = load %struct.op*, %struct.op** %sib, align 8
  %op_type7 = getelementptr inbounds %struct.op, %struct.op* %8, i32 0, i32 4
  %bf.load8 = load i16, i16* %op_type7, align 8
  %bf.clear9 = and i16 %bf.load8, 511
  %bf.cast10 = zext i16 %bf.clear9 to i32
  %cmp11 = icmp eq i32 %bf.cast10, 194
  br i1 %cmp11, label %land.lhs.true, label %if.end39

land.lhs.true:                                    ; preds = %lor.lhs.false, %if.then
  %call = call zeroext i1 @Perl_ckwarn(i32 7)
  br i1 %call, label %land.lhs.true12, label %if.end39

land.lhs.true12:                                  ; preds = %land.lhs.true
  %9 = load %struct.op*, %struct.op** %sib, align 8
  %op_sibling13 = getelementptr inbounds %struct.op, %struct.op* %9, i32 0, i32 1
  %10 = load %struct.op*, %struct.op** %op_sibling13, align 8
  %tobool14 = icmp ne %struct.op* %10, null
  br i1 %tobool14, label %cond.true15, label %cond.false16

cond.true15:                                      ; preds = %land.lhs.true12
  br i1 true, label %if.then17, label %if.end39

cond.false16:                                     ; preds = %land.lhs.true12
  br i1 false, label %if.then17, label %if.end39

if.then17:                                        ; preds = %cond.false16, %cond.true15
  %11 = load %struct.op*, %struct.op** %sib, align 8
  %op_sibling18 = getelementptr inbounds %struct.op, %struct.op* %11, i32 0, i32 1
  %12 = load %struct.op*, %struct.op** %op_sibling18, align 8
  %add.ptr19 = getelementptr inbounds %struct.op, %struct.op* %12, i64 0
  %op_type20 = getelementptr inbounds %struct.op, %struct.op* %add.ptr19, i32 0, i32 4
  %bf.load21 = load i16, i16* %op_type20, align 8
  %bf.clear22 = and i16 %bf.load21, 511
  %bf.cast23 = zext i16 %bf.clear22 to i32
  %conv = trunc i32 %bf.cast23 to i16
  store i16 %conv, i16* %type, align 2
  %13 = load i16, i16* %type, align 2
  %conv24 = zext i16 %13 to i32
  %cmp25 = icmp ne i32 %conv24, 209
  br i1 %cmp25, label %land.lhs.true27, label %if.end

land.lhs.true27:                                  ; preds = %if.then17
  %14 = load i16, i16* %type, align 2
  %conv28 = zext i16 %14 to i32
  %cmp29 = icmp ne i32 %conv28, 189
  br i1 %cmp29, label %land.lhs.true31, label %if.end

land.lhs.true31:                                  ; preds = %land.lhs.true27
  %15 = load i16, i16* %type, align 2
  %conv32 = zext i16 %15 to i32
  %cmp33 = icmp ne i32 %conv32, 190
  br i1 %cmp33, label %if.then35, label %if.end

if.then35:                                        ; preds = %land.lhs.true31
  %16 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_line = getelementptr inbounds %struct.cop, %struct.cop* %16, i32 0, i32 7
  %17 = load i32, i32* %cop_line, align 4
  store i32 %17, i32* %oldline, align 4
  %18 = load %struct.op*, %struct.op** %sib, align 8
  %19 = bitcast %struct.op* %18 to %struct.cop*
  %cop_line36 = getelementptr inbounds %struct.cop, %struct.cop* %19, i32 0, i32 7
  %20 = load i32, i32* %cop_line36, align 4
  %21 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_line37 = getelementptr inbounds %struct.cop, %struct.cop* %21, i32 0, i32 7
  store i32 %20, i32* %cop_line37, align 4
  call void (i32, i8*, ...) @Perl_warner(i32 7, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.165, i64 0, i64 0))
  call void (i32, i8*, ...) @Perl_warner(i32 7, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.166, i64 0, i64 0))
  %22 = load i32, i32* %oldline, align 4
  %23 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_line38 = getelementptr inbounds %struct.cop, %struct.cop* %23, i32 0, i32 7
  store i32 %22, i32* %cop_line38, align 4
  br label %if.end

if.end:                                           ; preds = %if.then35, %land.lhs.true31, %land.lhs.true27, %if.then17
  br label %if.end39

if.end39:                                         ; preds = %if.end, %cond.false16, %cond.true15, %land.lhs.true, %lor.lhs.false
  br label %if.end40

if.end40:                                         ; preds = %if.end39, %cond.false, %cond.true
  br label %sw.epilog

sw.bb41:                                          ; preds = %entry
  %24 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_private = getelementptr inbounds %struct.op, %struct.op* %24, i32 0, i32 6
  %25 = load i8, i8* %op_private, align 1
  %conv42 = zext i8 %25 to i32
  %and = and i32 %conv42, 32
  %tobool43 = icmp ne i32 %and, 0
  br i1 %tobool43, label %land.lhs.true44, label %if.end67

land.lhs.true44:                                  ; preds = %sw.bb41
  %call45 = call zeroext i1 @Perl_ckwarn(i32 35)
  br i1 %call45, label %if.then47, label %if.end67

if.then47:                                        ; preds = %land.lhs.true44
  %26 = load %struct.op*, %struct.op** %o.addr, align 8
  %27 = bitcast %struct.op* %26 to %struct.svop*
  %op_sv = getelementptr inbounds %struct.svop, %struct.svop* %27, i32 0, i32 7
  %28 = load %struct.sv*, %struct.sv** %op_sv, align 8
  %29 = bitcast %struct.sv* %28 to %struct.gv*
  store %struct.gv* %29, %struct.gv** %gv, align 8
  %30 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_flags = getelementptr inbounds %struct.gv, %struct.gv* %30, i32 0, i32 2
  %31 = load i32, i32* %sv_flags, align 4
  %and48 = and i32 %31, 255
  %cmp49 = icmp eq i32 %and48, 9
  br i1 %cmp49, label %land.lhs.true51, label %if.end66

land.lhs.true51:                                  ; preds = %if.then47
  %32 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u = getelementptr inbounds %struct.gv, %struct.gv* %32, i32 0, i32 3
  %svu_gp = bitcast %union.anon.3* %sv_u to %struct.gp**
  %33 = load %struct.gp*, %struct.gp** %svu_gp, align 8
  %add.ptr52 = getelementptr inbounds %struct.gp, %struct.gp* %33, i64 0
  %gp_cv = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr52, i32 0, i32 2
  %34 = load %struct.cv*, %struct.cv** %gp_cv, align 8
  %add.ptr53 = getelementptr inbounds %struct.cv, %struct.cv* %34, i64 0
  %tobool54 = icmp ne %struct.cv* %add.ptr53, null
  br i1 %tobool54, label %land.lhs.true55, label %if.end66

land.lhs.true55:                                  ; preds = %land.lhs.true51
  %35 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u56 = getelementptr inbounds %struct.gv, %struct.gv* %35, i32 0, i32 3
  %svu_gp57 = bitcast %union.anon.3* %sv_u56 to %struct.gp**
  %36 = load %struct.gp*, %struct.gp** %svu_gp57, align 8
  %add.ptr58 = getelementptr inbounds %struct.gp, %struct.gp* %36, i64 0
  %gp_cv59 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr58, i32 0, i32 2
  %37 = load %struct.cv*, %struct.cv** %gp_cv59, align 8
  %add.ptr60 = getelementptr inbounds %struct.cv, %struct.cv* %37, i64 0
  %sv_u61 = getelementptr inbounds %struct.cv, %struct.cv* %add.ptr60, i32 0, i32 3
  %svu_pv = bitcast %union.anon.10* %sv_u61 to i8**
  %38 = load i8*, i8** %svu_pv, align 8
  %add.ptr62 = getelementptr inbounds i8, i8* %38, i64 0
  %tobool63 = icmp ne i8* %add.ptr62, null
  br i1 %tobool63, label %if.then64, label %if.end66

if.then64:                                        ; preds = %land.lhs.true55
  %call65 = call %struct.sv* @Perl_sv_newmortal()
  store %struct.sv* %call65, %struct.sv** %sv, align 8
  %39 = load %struct.sv*, %struct.sv** %sv, align 8
  %40 = load %struct.gv*, %struct.gv** %gv, align 8
  call void @Perl_gv_efullname4(%struct.sv* %39, %struct.gv* %40, i8* null, i1 zeroext true)
  %41 = load %struct.sv*, %struct.sv** %sv, align 8
  %42 = bitcast %struct.sv* %41 to i8*
  call void (i32, i8*, ...) @Perl_warner(i32 35, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.167, i64 0, i64 0), i8* %42)
  br label %if.end66

if.end66:                                         ; preds = %if.then64, %land.lhs.true55, %land.lhs.true51, %if.then47
  br label %if.end67

if.end67:                                         ; preds = %if.end66, %land.lhs.true44, %sw.bb41
  br label %sw.epilog

sw.bb68:                                          ; preds = %entry
  %43 = load %struct.op*, %struct.op** %o.addr, align 8
  %44 = bitcast %struct.op* %43 to %struct.svop*
  %op_private69 = getelementptr inbounds %struct.svop, %struct.svop* %44, i32 0, i32 6
  %45 = load i8, i8* %op_private69, align 1
  %conv70 = zext i8 %45 to i32
  %and71 = and i32 %conv70, 8
  %tobool72 = icmp ne i32 %and71, 0
  br i1 %tobool72, label %if.then73, label %if.end74

if.then73:                                        ; preds = %sw.bb68
  %46 = load %struct.op*, %struct.op** %o.addr, align 8
  call void @S_no_bareword_allowed(%struct.op* %46)
  br label %if.end74

if.end74:                                         ; preds = %if.then73, %sw.bb68
  br label %sw.epilog

sw.bb75:                                          ; preds = %entry
  %47 = load %struct.op*, %struct.op** %o.addr, align 8
  %48 = bitcast %struct.op* %47 to %struct.binop*
  %op_last = getelementptr inbounds %struct.binop, %struct.binop* %48, i32 0, i32 8
  %49 = load %struct.op*, %struct.op** %op_last, align 8
  %50 = bitcast %struct.op* %49 to %struct.svop*
  store %struct.svop* %50, %struct.svop** %key_op, align 8
  %op_type76 = getelementptr inbounds %struct.svop, %struct.svop* %50, i32 0, i32 4
  %bf.load77 = load i16, i16* %op_type76, align 8
  %bf.clear78 = and i16 %bf.load77, 511
  %bf.cast79 = zext i16 %bf.clear78 to i32
  %cmp80 = icmp ne i32 %bf.cast79, 5
  br i1 %cmp80, label %if.then82, label %if.end83

if.then82:                                        ; preds = %sw.bb75
  br label %sw.epilog

if.end83:                                         ; preds = %sw.bb75
  %51 = load %struct.op*, %struct.op** %o.addr, align 8
  %52 = bitcast %struct.op* %51 to %struct.binop*
  %op_first = getelementptr inbounds %struct.binop, %struct.binop* %52, i32 0, i32 7
  %53 = load %struct.op*, %struct.op** %op_first, align 8
  %54 = bitcast %struct.op* %53 to %struct.unop*
  store %struct.unop* %54, %struct.unop** %rop, align 8
  br label %check_keys

sw.bb84:                                          ; preds = %entry
  %55 = load %struct.op*, %struct.op** %o.addr, align 8
  call void @S_scalar_slice_warning(%struct.op* %55)
  br label %sw.bb85

sw.bb85:                                          ; preds = %entry, %sw.bb84
  %56 = load %struct.op*, %struct.op** %o.addr, align 8
  %57 = bitcast %struct.op* %56 to %struct.listop*
  %op_first86 = getelementptr inbounds %struct.listop, %struct.listop* %57, i32 0, i32 7
  %58 = load %struct.op*, %struct.op** %op_first86, align 8
  %op_sibling87 = getelementptr inbounds %struct.op, %struct.op* %58, i32 0, i32 1
  %59 = load %struct.op*, %struct.op** %op_sibling87, align 8
  %add.ptr88 = getelementptr inbounds %struct.op, %struct.op* %59, i64 0
  store %struct.op* %add.ptr88, %struct.op** %kid, align 8
  %60 = load %struct.op*, %struct.op** %kid, align 8
  %op_type89 = getelementptr inbounds %struct.op, %struct.op* %60, i32 0, i32 4
  %bf.load90 = load i16, i16* %op_type89, align 8
  %bf.clear91 = and i16 %bf.load90, 511
  %bf.cast92 = zext i16 %bf.clear91 to i32
  %cmp93 = icmp eq i32 %bf.cast92, 0
  br i1 %cmp93, label %cond.true95, label %cond.false96

cond.true95:                                      ; preds = %sw.bb85
  %61 = load %struct.op*, %struct.op** %kid, align 8
  %op_targ = getelementptr inbounds %struct.op, %struct.op* %61, i32 0, i32 3
  %62 = load i64, i64* %op_targ, align 8
  br label %cond.end

cond.false96:                                     ; preds = %sw.bb85
  %63 = load %struct.op*, %struct.op** %kid, align 8
  %op_type97 = getelementptr inbounds %struct.op, %struct.op* %63, i32 0, i32 4
  %bf.load98 = load i16, i16* %op_type97, align 8
  %bf.clear99 = and i16 %bf.load98, 511
  %bf.cast100 = zext i16 %bf.clear99 to i32
  %conv101 = zext i32 %bf.cast100 to i64
  br label %cond.end

cond.end:                                         ; preds = %cond.false96, %cond.true95
  %cond = phi i64 [ %62, %cond.true95 ], [ %conv101, %cond.false96 ]
  %cmp102 = icmp ne i64 %cond, 158
  br i1 %cmp102, label %land.lhs.true104, label %if.end112

land.lhs.true104:                                 ; preds = %cond.end
  %64 = load %struct.op*, %struct.op** %kid, align 8
  %op_type105 = getelementptr inbounds %struct.op, %struct.op* %64, i32 0, i32 4
  %bf.load106 = load i16, i16* %op_type105, align 8
  %bf.clear107 = and i16 %bf.load106, 511
  %bf.cast108 = zext i16 %bf.clear107 to i32
  %cmp109 = icmp ne i32 %bf.cast108, 5
  br i1 %cmp109, label %if.then111, label %if.end112

if.then111:                                       ; preds = %land.lhs.true104
  br label %sw.epilog

if.end112:                                        ; preds = %land.lhs.true104, %cond.end
  %65 = load %struct.op*, %struct.op** %kid, align 8
  %op_type113 = getelementptr inbounds %struct.op, %struct.op* %65, i32 0, i32 4
  %bf.load114 = load i16, i16* %op_type113, align 8
  %bf.clear115 = and i16 %bf.load114, 511
  %bf.cast116 = zext i16 %bf.clear115 to i32
  %cmp117 = icmp eq i32 %bf.cast116, 5
  br i1 %cmp117, label %cond.true119, label %cond.false120

cond.true119:                                     ; preds = %if.end112
  %66 = load %struct.op*, %struct.op** %kid, align 8
  br label %cond.end124

cond.false120:                                    ; preds = %if.end112
  %67 = load %struct.op*, %struct.op** %kid, align 8
  %68 = bitcast %struct.op* %67 to %struct.listop*
  %op_first121 = getelementptr inbounds %struct.listop, %struct.listop* %68, i32 0, i32 7
  %69 = load %struct.op*, %struct.op** %op_first121, align 8
  %op_sibling122 = getelementptr inbounds %struct.op, %struct.op* %69, i32 0, i32 1
  %70 = load %struct.op*, %struct.op** %op_sibling122, align 8
  %add.ptr123 = getelementptr inbounds %struct.op, %struct.op* %70, i64 0
  br label %cond.end124

cond.end124:                                      ; preds = %cond.false120, %cond.true119
  %cond125 = phi %struct.op* [ %66, %cond.true119 ], [ %add.ptr123, %cond.false120 ]
  %71 = bitcast %struct.op* %cond125 to %struct.svop*
  store %struct.svop* %71, %struct.svop** %key_op, align 8
  %72 = load %struct.op*, %struct.op** %o.addr, align 8
  %73 = bitcast %struct.op* %72 to %struct.listop*
  %op_last126 = getelementptr inbounds %struct.listop, %struct.listop* %73, i32 0, i32 8
  %74 = load %struct.op*, %struct.op** %op_last126, align 8
  %75 = bitcast %struct.op* %74 to %struct.unop*
  store %struct.unop* %75, %struct.unop** %rop, align 8
  br label %check_keys

check_keys:                                       ; preds = %cond.end124, %if.end83
  %76 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_private127 = getelementptr inbounds %struct.op, %struct.op* %76, i32 0, i32 6
  %77 = load i8, i8* %op_private127, align 1
  %conv128 = zext i8 %77 to i32
  %and129 = and i32 %conv128, 128
  %tobool130 = icmp ne i32 %and129, 0
  br i1 %tobool130, label %if.then138, label %lor.lhs.false131

lor.lhs.false131:                                 ; preds = %check_keys
  %78 = load %struct.unop*, %struct.unop** %rop, align 8
  %op_type132 = getelementptr inbounds %struct.unop, %struct.unop* %78, i32 0, i32 4
  %bf.load133 = load i16, i16* %op_type132, align 8
  %bf.clear134 = and i16 %bf.load133, 511
  %bf.cast135 = zext i16 %bf.clear134 to i32
  %cmp136 = icmp ne i32 %bf.cast135, 149
  br i1 %cmp136, label %if.then138, label %if.end139

if.then138:                                       ; preds = %lor.lhs.false131, %check_keys
  store %struct.unop* null, %struct.unop** %rop, align 8
  br label %if.end139

if.end139:                                        ; preds = %if.then138, %lor.lhs.false131
  %79 = load %struct.unop*, %struct.unop** %rop, align 8
  %80 = load %struct.svop*, %struct.svop** %key_op, align 8
  call void @S_check_hash_fields_and_hekify(%struct.unop* %79, %struct.svop* %80)
  br label %sw.epilog

sw.bb140:                                         ; preds = %entry
  %81 = load %struct.op*, %struct.op** %o.addr, align 8
  call void @S_scalar_slice_warning(%struct.op* %81)
  br label %sw.epilog

sw.bb141:                                         ; preds = %entry
  %82 = load %struct.op*, %struct.op** %o.addr, align 8
  %83 = bitcast %struct.op* %82 to %struct.pmop*
  %op_pmreplrootu = getelementptr inbounds %struct.pmop, %struct.pmop* %83, i32 0, i32 11
  %op_pmreplroot = bitcast %union.anon.18* %op_pmreplrootu to %struct.op**
  %84 = load %struct.op*, %struct.op** %op_pmreplroot, align 8
  %tobool142 = icmp ne %struct.op* %84, null
  br i1 %tobool142, label %if.then143, label %if.end146

if.then143:                                       ; preds = %sw.bb141
  %85 = load %struct.op*, %struct.op** %o.addr, align 8
  %86 = bitcast %struct.op* %85 to %struct.pmop*
  %op_pmreplrootu144 = getelementptr inbounds %struct.pmop, %struct.pmop* %86, i32 0, i32 11
  %op_pmreplroot145 = bitcast %union.anon.18* %op_pmreplrootu144 to %struct.op**
  %87 = load %struct.op*, %struct.op** %op_pmreplroot145, align 8
  call void @S_finalize_op(%struct.op* %87)
  br label %if.end146

if.end146:                                        ; preds = %if.then143, %sw.bb141
  br label %sw.epilog

sw.default:                                       ; preds = %entry
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %if.end146, %sw.bb140, %if.end139, %if.then111, %if.then82, %if.end74, %if.end67, %if.end40, %sw.bb
  %88 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %88, i32 0, i32 5
  %89 = load i8, i8* %op_flags, align 2
  %conv147 = zext i8 %89 to i32
  %and148 = and i32 %conv147, 4
  %tobool149 = icmp ne i32 %and148, 0
  br i1 %tobool149, label %if.then150, label %if.end156

if.then150:                                       ; preds = %sw.epilog
  %90 = load %struct.op*, %struct.op** %o.addr, align 8
  %91 = bitcast %struct.op* %90 to %struct.unop*
  %op_first152 = getelementptr inbounds %struct.unop, %struct.unop* %91, i32 0, i32 7
  %92 = load %struct.op*, %struct.op** %op_first152, align 8
  store %struct.op* %92, %struct.op** %kid151, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then150
  %93 = load %struct.op*, %struct.op** %kid151, align 8
  %tobool153 = icmp ne %struct.op* %93, null
  br i1 %tobool153, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %94 = load %struct.op*, %struct.op** %kid151, align 8
  call void @S_finalize_op(%struct.op* %94)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %95 = load %struct.op*, %struct.op** %kid151, align 8
  %op_sibling154 = getelementptr inbounds %struct.op, %struct.op* %95, i32 0, i32 1
  %96 = load %struct.op*, %struct.op** %op_sibling154, align 8
  %add.ptr155 = getelementptr inbounds %struct.op, %struct.op* %96, i64 0
  store %struct.op* %add.ptr155, %struct.op** %kid151, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end156

if.end156:                                        ; preds = %for.end, %sw.epilog
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_op_lvalue_flags(%struct.op* %o, i32 %type, i32 %flags) #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %o.addr = alloca %struct.op*, align 8
  %type.addr = alloca i32, align 4
  %flags.addr = alloca i32, align 4
  %kid = alloca %struct.op*, align 8
  %localize = alloca i32, align 4
  %kid65 = alloca %struct.op*, align 8
  %cv = alloca %struct.cv*, align 8
  %gv = alloca %struct.gv*, align 8
  %coerce = alloca %union.XOPRETANY, align 8
  %mods = alloca i32, align 4
  %iv = alloca i64, align 8
  %ec = alloca i8, align 1
  %coerce762 = alloca %union.XOPRETANY, align 8
  store %struct.op* %o, %struct.op** %o.addr, align 8
  store i32 %type, i32* %type.addr, align 4
  store i32 %flags, i32* %flags.addr, align 4
  store i32 -1, i32* %localize, align 4
  %0 = load %struct.op*, %struct.op** %o.addr, align 8
  %tobool = icmp ne %struct.op* %0, null
  br i1 %tobool, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %entry
  %1 = load %struct.yy_parser*, %struct.yy_parser** @PL_parser, align 8
  %tobool1 = icmp ne %struct.yy_parser* %1, null
  br i1 %tobool1, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %lor.lhs.false
  %2 = load %struct.yy_parser*, %struct.yy_parser** @PL_parser, align 8
  %error_count = getelementptr inbounds %struct.yy_parser, %struct.yy_parser* %2, i32 0, i32 44
  %3 = load i8, i8* %error_count, align 1
  %conv = zext i8 %3 to i32
  %tobool2 = icmp ne i32 %conv, 0
  br i1 %tobool2, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true, %entry
  %4 = load %struct.op*, %struct.op** %o.addr, align 8
  store %struct.op* %4, %struct.op** %retval, align 8
  br label %return

if.end:                                           ; preds = %land.lhs.true, %lor.lhs.false
  %5 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_private = getelementptr inbounds %struct.op, %struct.op* %5, i32 0, i32 6
  %6 = load i8, i8* %op_private, align 1
  %conv3 = zext i8 %6 to i32
  %and = and i32 %conv3, 16
  %tobool4 = icmp ne i32 %and, 0
  br i1 %tobool4, label %land.lhs.true5, label %if.end9

land.lhs.true5:                                   ; preds = %if.end
  %7 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type = getelementptr inbounds %struct.op, %struct.op* %7, i32 0, i32 4
  %bf.load = load i16, i16* %op_type, align 8
  %bf.clear = and i16 %bf.load, 511
  %bf.cast = zext i16 %bf.clear to i32
  %idxprom = zext i32 %bf.cast to i64
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @PL_opargs, i64 0, i64 %idxprom
  %8 = load i32, i32* %arrayidx, align 4
  %and6 = and i32 %8, 16
  %tobool7 = icmp ne i32 %and6, 0
  br i1 %tobool7, label %if.then8, label %if.end9

if.then8:                                         ; preds = %land.lhs.true5
  %9 = load %struct.op*, %struct.op** %o.addr, align 8
  store %struct.op* %9, %struct.op** %retval, align 8
  br label %return

if.end9:                                          ; preds = %land.lhs.true5, %if.end
  %10 = load i32, i32* %type.addr, align 4
  %cmp = icmp eq i32 %10, 237
  br i1 %cmp, label %if.then14, label %lor.lhs.false11

lor.lhs.false11:                                  ; preds = %if.end9
  %11 = load i32, i32* %type.addr, align 4
  %cmp12 = icmp eq i32 %11, 125
  br i1 %cmp12, label %if.then14, label %if.end15

if.then14:                                        ; preds = %lor.lhs.false11, %if.end9
  store i32 185, i32* %type.addr, align 4
  br label %if.end15

if.end15:                                         ; preds = %if.then14, %lor.lhs.false11
  %12 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type16 = getelementptr inbounds %struct.op, %struct.op* %12, i32 0, i32 4
  %bf.load17 = load i16, i16* %op_type16, align 8
  %bf.clear18 = and i16 %bf.load17, 511
  %bf.cast19 = zext i16 %bf.clear18 to i32
  switch i32 %bf.cast19, label %sw.default [
    i32 44, label %sw.bb
    i32 1, label %sw.bb20
    i32 185, label %sw.bb26
    i32 47, label %sw.bb241
    i32 49, label %sw.bb241
    i32 55, label %sw.bb241
    i32 56, label %sw.bb241
    i32 58, label %sw.bb241
    i32 60, label %sw.bb241
    i32 63, label %sw.bb241
    i32 65, label %sw.bb241
    i32 67, label %sw.bb241
    i32 69, label %sw.bb241
    i32 70, label %sw.bb241
    i32 92, label %sw.bb241
    i32 93, label %sw.bb241
    i32 94, label %sw.bb241
    i32 57, label %sw.bb241
    i32 59, label %sw.bb241
    i32 61, label %sw.bb241
    i32 64, label %sw.bb241
    i32 66, label %sw.bb241
    i32 62, label %sw.bb249
    i32 180, label %sw.bb310
    i32 135, label %sw.bb318
    i32 149, label %sw.bb318
    i32 14, label %sw.bb328
    i32 139, label %sw.bb338
    i32 151, label %sw.bb338
    i32 38, label %sw.bb339
    i32 193, label %sw.bb368
    i32 194, label %sw.bb368
    i32 152, label %sw.bb369
    i32 140, label %sw.bb369
    i32 16, label %sw.bb378
    i32 15, label %sw.bb389
    i32 7, label %sw.bb396
    i32 37, label %sw.bb398
    i32 181, label %sw.bb398
    i32 182, label %sw.bb398
    i32 183, label %sw.bb398
    i32 136, label %sw.bb400
    i32 137, label %sw.bb400
    i32 10, label %sw.bb402
    i32 11, label %sw.bb402
    i32 9, label %sw.bb429
    i32 3, label %sw.bb462
    i32 146, label %sw.bb463
    i32 382, label %sw.bb463
    i32 121, label %sw.bb471
    i32 46, label %sw.bb478
    i32 122, label %sw.bb478
    i32 138, label %sw.bb497
    i32 150, label %sw.bb497
    i32 197, label %sw.bb526
    i32 202, label %sw.bb526
    i32 198, label %sw.bb531
    i32 196, label %sw.bb531
    i32 192, label %sw.bb531
    i32 0, label %sw.bb540
    i32 158, label %sw.bb561
    i32 384, label %sw.bb578
    i32 176, label %sw.bb579
    i32 177, label %sw.bb579
    i32 21, label %sw.bb612
    i32 20, label %sw.bb625
    i32 156, label %sw.bb683
    i32 2, label %sw.bb705
  ]

sw.bb:                                            ; preds = %if.end15
  %13 = load i32, i32* @PL_modcount, align 4
  %inc = add nsw i32 %13, 1
  store i32 %inc, i32* @PL_modcount, align 4
  %14 = load %struct.op*, %struct.op** %o.addr, align 8
  store %struct.op* %14, %struct.op** %retval, align 8
  br label %return

sw.bb20:                                          ; preds = %if.end15
  %15 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %15, i32 0, i32 5
  %16 = load i8, i8* %op_flags, align 2
  %conv21 = zext i8 %16 to i32
  %and22 = and i32 %conv21, 8
  %tobool23 = icmp ne i32 %and22, 0
  br i1 %tobool23, label %if.then24, label %if.end25

if.then24:                                        ; preds = %sw.bb20
  br label %sw.epilog

if.end25:                                         ; preds = %sw.bb20
  br label %nomod

sw.bb26:                                          ; preds = %if.end15
  %17 = load i32, i32* %type.addr, align 4
  %cmp27 = icmp eq i32 %17, 44
  br i1 %cmp27, label %land.lhs.true35, label %lor.lhs.false29

lor.lhs.false29:                                  ; preds = %sw.bb26
  %18 = load i32, i32* %type.addr, align 4
  %cmp30 = icmp eq i32 %18, 20
  br i1 %cmp30, label %land.lhs.true35, label %lor.lhs.false32

lor.lhs.false32:                                  ; preds = %lor.lhs.false29
  %19 = load i32, i32* %type.addr, align 4
  %cmp33 = icmp eq i32 %19, 378
  br i1 %cmp33, label %land.lhs.true35, label %if.else

land.lhs.true35:                                  ; preds = %lor.lhs.false32, %lor.lhs.false29, %sw.bb26
  %20 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_flags36 = getelementptr inbounds %struct.op, %struct.op* %20, i32 0, i32 5
  %21 = load i8, i8* %op_flags36, align 2
  %conv37 = zext i8 %21 to i32
  %and38 = and i32 %conv37, 64
  %tobool39 = icmp ne i32 %and38, 0
  br i1 %tobool39, label %if.else, label %if.then40

if.then40:                                        ; preds = %land.lhs.true35
  br label %do.body

do.body:                                          ; preds = %if.then40
  %22 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type41 = getelementptr inbounds %struct.op, %struct.op* %22, i32 0, i32 4
  %bf.load42 = load i16, i16* %op_type41, align 8
  %bf.clear43 = and i16 %bf.load42, -512
  %bf.set = or i16 %bf.clear43, 17
  store i16 %bf.set, i16* %op_type41, align 8
  %23 = load %struct.op* ()*, %struct.op* ()** getelementptr inbounds ([0 x %struct.op* ()*], [0 x %struct.op* ()*]* @PL_ppaddr, i64 0, i64 17), align 8
  %24 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_ppaddr = getelementptr inbounds %struct.op, %struct.op* %24, i32 0, i32 2
  store %struct.op* ()* %23, %struct.op* ()** %op_ppaddr, align 8
  br label %do.end

do.end:                                           ; preds = %do.body
  %25 = load %struct.op*, %struct.op** %o.addr, align 8
  %26 = bitcast %struct.op* %25 to %struct.unop*
  %op_first = getelementptr inbounds %struct.unop, %struct.unop* %26, i32 0, i32 7
  %27 = load %struct.op*, %struct.op** %op_first, align 8
  %28 = bitcast %struct.op* %27 to %struct.listop*
  %op_first44 = getelementptr inbounds %struct.listop, %struct.listop* %28, i32 0, i32 7
  %29 = load %struct.op*, %struct.op** %op_first44, align 8
  call void @Perl_op_null(%struct.op* %29)
  br label %sw.epilog

if.else:                                          ; preds = %land.lhs.true35, %lor.lhs.false32
  %30 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_private45 = getelementptr inbounds %struct.op, %struct.op* %30, i32 0, i32 6
  %31 = load i8, i8* %op_private45, align 1
  %conv46 = zext i8 %31 to i32
  %or = or i32 %conv46, 128
  %conv47 = trunc i32 %or to i8
  store i8 %conv47, i8* %op_private45, align 1
  store i32 1073741823, i32* @PL_modcount, align 4
  %32 = load i32, i32* %type.addr, align 4
  %cmp48 = icmp eq i32 %32, 169
  br i1 %cmp48, label %if.then59, label %lor.lhs.false50

lor.lhs.false50:                                  ; preds = %if.else
  %33 = load i32, i32* %type.addr, align 4
  %cmp51 = icmp eq i32 %33, 185
  br i1 %cmp51, label %if.then59, label %lor.lhs.false53

lor.lhs.false53:                                  ; preds = %lor.lhs.false50
  %34 = load i32, i32* %type.addr, align 4
  %cmp54 = icmp eq i32 %34, 20
  br i1 %cmp54, label %if.then59, label %lor.lhs.false56

lor.lhs.false56:                                  ; preds = %lor.lhs.false53
  %35 = load i32, i32* %type.addr, align 4
  %cmp57 = icmp eq i32 %35, 187
  br i1 %cmp57, label %if.then59, label %if.else64

if.then59:                                        ; preds = %lor.lhs.false56, %lor.lhs.false53, %lor.lhs.false50, %if.else
  %36 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_private60 = getelementptr inbounds %struct.op, %struct.op* %36, i32 0, i32 6
  %37 = load i8, i8* %op_private60, align 1
  %conv61 = zext i8 %37 to i32
  %or62 = or i32 %conv61, 1
  %conv63 = trunc i32 %or62 to i8
  store i8 %conv63, i8* %op_private60, align 1
  br label %sw.epilog

if.else64:                                        ; preds = %lor.lhs.false56
  %38 = load %struct.op*, %struct.op** %o.addr, align 8
  %39 = bitcast %struct.op* %38 to %struct.unop*
  %op_first66 = getelementptr inbounds %struct.unop, %struct.unop* %39, i32 0, i32 7
  %40 = load %struct.op*, %struct.op** %op_first66, align 8
  store %struct.op* %40, %struct.op** %kid65, align 8
  %41 = load %struct.op*, %struct.op** %kid65, align 8
  %op_type67 = getelementptr inbounds %struct.op, %struct.op* %41, i32 0, i32 4
  %bf.load68 = load i16, i16* %op_type67, align 8
  %bf.clear69 = and i16 %bf.load68, 511
  %bf.cast70 = zext i16 %bf.clear69 to i32
  %cmp71 = icmp ne i32 %bf.cast70, 3
  br i1 %cmp71, label %if.then73, label %if.end92

if.then73:                                        ; preds = %if.else64
  %42 = load %struct.op*, %struct.op** %kid65, align 8
  %op_type74 = getelementptr inbounds %struct.op, %struct.op* %42, i32 0, i32 4
  %bf.load75 = load i16, i16* %op_type74, align 8
  %bf.clear76 = and i16 %bf.load75, 511
  %bf.cast77 = zext i16 %bf.clear76 to i32
  %cmp78 = icmp ne i32 %bf.cast77, 0
  br i1 %cmp78, label %if.then83, label %lor.lhs.false80

lor.lhs.false80:                                  ; preds = %if.then73
  %43 = load %struct.op*, %struct.op** %kid65, align 8
  %op_targ = getelementptr inbounds %struct.op, %struct.op* %43, i32 0, i32 3
  %44 = load i64, i64* %op_targ, align 8
  %cmp81 = icmp ne i64 %44, 158
  br i1 %cmp81, label %if.then83, label %if.end90

if.then83:                                        ; preds = %lor.lhs.false80, %if.then73
  %45 = load %struct.op*, %struct.op** %kid65, align 8
  %op_type84 = getelementptr inbounds %struct.op, %struct.op* %45, i32 0, i32 4
  %bf.load85 = load i16, i16* %op_type84, align 8
  %bf.clear86 = and i16 %bf.load85, 511
  %bf.cast87 = zext i16 %bf.clear86 to i32
  %conv88 = zext i32 %bf.cast87 to i64
  %46 = load %struct.op*, %struct.op** %kid65, align 8
  %op_targ89 = getelementptr inbounds %struct.op, %struct.op* %46, i32 0, i32 3
  %47 = load i64, i64* %op_targ89, align 8
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.25, i64 0, i64 0), i64 %conv88, i64 %47)
  br label %if.end90

if.end90:                                         ; preds = %if.then83, %lor.lhs.false80
  %48 = load %struct.op*, %struct.op** %kid65, align 8
  %49 = bitcast %struct.op* %48 to %struct.listop*
  %op_first91 = getelementptr inbounds %struct.listop, %struct.listop* %49, i32 0, i32 7
  %50 = load %struct.op*, %struct.op** %op_first91, align 8
  store %struct.op* %50, %struct.op** %kid65, align 8
  br label %if.end92

if.end92:                                         ; preds = %if.end90, %if.else64
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end92
  %51 = load %struct.op*, %struct.op** %kid65, align 8
  %op_sibling = getelementptr inbounds %struct.op, %struct.op* %51, i32 0, i32 1
  %52 = load %struct.op*, %struct.op** %op_sibling, align 8
  %tobool93 = icmp ne %struct.op* %52, null
  %53 = zext i1 %tobool93 to i64
  %cond = select i1 %tobool93, i32 1, i32 0
  %tobool94 = icmp ne i32 %cond, 0
  br i1 %tobool94, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %54 = load %struct.op*, %struct.op** %kid65, align 8
  %op_sibling95 = getelementptr inbounds %struct.op, %struct.op* %54, i32 0, i32 1
  %55 = load %struct.op*, %struct.op** %op_sibling95, align 8
  %add.ptr = getelementptr inbounds %struct.op, %struct.op* %55, i64 0
  store %struct.op* %add.ptr, %struct.op** %kid65, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %56 = load %struct.op*, %struct.op** %kid65, align 8
  %op_type96 = getelementptr inbounds %struct.op, %struct.op* %56, i32 0, i32 4
  %bf.load97 = load i16, i16* %op_type96, align 8
  %bf.clear98 = and i16 %bf.load97, 511
  %bf.cast99 = zext i16 %bf.clear98 to i32
  %cmp100 = icmp eq i32 %bf.cast99, 0
  br i1 %cmp100, label %land.lhs.true102, label %if.then106

land.lhs.true102:                                 ; preds = %while.end
  %57 = load %struct.op*, %struct.op** %kid65, align 8
  %op_targ103 = getelementptr inbounds %struct.op, %struct.op* %57, i32 0, i32 3
  %58 = load i64, i64* %op_targ103, align 8
  %cmp104 = icmp eq i64 %58, 17
  br i1 %cmp104, label %if.end107, label %if.then106

if.then106:                                       ; preds = %land.lhs.true102, %while.end
  br label %sw.epilog

if.end107:                                        ; preds = %land.lhs.true102
  %59 = load %struct.op*, %struct.op** %kid65, align 8
  %60 = bitcast %struct.op* %59 to %struct.unop*
  %op_first108 = getelementptr inbounds %struct.unop, %struct.unop* %60, i32 0, i32 7
  %61 = load %struct.op*, %struct.op** %op_first108, align 8
  store %struct.op* %61, %struct.op** %kid65, align 8
  %62 = load %struct.op*, %struct.op** %kid65, align 8
  %op_type109 = getelementptr inbounds %struct.op, %struct.op* %62, i32 0, i32 4
  %bf.load110 = load i16, i16* %op_type109, align 8
  %bf.clear111 = and i16 %bf.load110, 511
  %bf.cast112 = zext i16 %bf.clear111 to i32
  %cmp113 = icmp eq i32 %bf.cast112, 0
  br i1 %cmp113, label %land.lhs.true115, label %if.end121

land.lhs.true115:                                 ; preds = %if.end107
  %63 = load %struct.op*, %struct.op** %kid65, align 8
  %op_targ116 = getelementptr inbounds %struct.op, %struct.op* %63, i32 0, i32 3
  %64 = load i64, i64* %op_targ116, align 8
  %cmp117 = icmp eq i64 %64, 15
  br i1 %cmp117, label %if.then119, label %if.end121

if.then119:                                       ; preds = %land.lhs.true115
  %65 = load %struct.op*, %struct.op** %kid65, align 8
  %66 = bitcast %struct.op* %65 to %struct.unop*
  %op_first120 = getelementptr inbounds %struct.unop, %struct.unop* %66, i32 0, i32 7
  %67 = load %struct.op*, %struct.op** %op_first120, align 8
  store %struct.op* %67, %struct.op** %kid65, align 8
  br label %if.end121

if.end121:                                        ; preds = %if.then119, %land.lhs.true115, %if.end107
  %68 = load %struct.op*, %struct.op** %kid65, align 8
  %op_type122 = getelementptr inbounds %struct.op, %struct.op* %68, i32 0, i32 4
  %bf.load123 = load i16, i16* %op_type122, align 8
  %bf.clear124 = and i16 %bf.load123, 511
  %bf.cast125 = zext i16 %bf.clear124 to i32
  %cmp126 = icmp eq i32 %bf.cast125, 0
  br i1 %cmp126, label %if.then128, label %if.end135

if.then128:                                       ; preds = %if.end121
  %69 = load %struct.op*, %struct.op** %kid65, align 8
  %op_type129 = getelementptr inbounds %struct.op, %struct.op* %69, i32 0, i32 4
  %bf.load130 = load i16, i16* %op_type129, align 8
  %bf.clear131 = and i16 %bf.load130, 511
  %bf.cast132 = zext i16 %bf.clear131 to i32
  %conv133 = zext i32 %bf.cast132 to i64
  %70 = load %struct.op*, %struct.op** %kid65, align 8
  %op_targ134 = getelementptr inbounds %struct.op, %struct.op* %70, i32 0, i32 3
  %71 = load i64, i64* %op_targ134, align 8
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.26, i64 0, i64 0), i64 %conv133, i64 %71)
  br label %if.end135

if.end135:                                        ; preds = %if.then128, %if.end121
  %72 = load %struct.op*, %struct.op** %kid65, align 8
  %op_type136 = getelementptr inbounds %struct.op, %struct.op* %72, i32 0, i32 4
  %bf.load137 = load i16, i16* %op_type136, align 8
  %bf.clear138 = and i16 %bf.load137, 511
  %bf.cast139 = zext i16 %bf.clear138 to i32
  %cmp140 = icmp ne i32 %bf.cast139, 7
  br i1 %cmp140, label %if.then142, label %if.end143

if.then142:                                       ; preds = %if.end135
  br label %sw.epilog

if.end143:                                        ; preds = %if.end135
  %73 = load %struct.op*, %struct.op** %kid65, align 8
  %74 = bitcast %struct.op* %73 to %struct.svop*
  %op_sv = getelementptr inbounds %struct.svop, %struct.svop* %74, i32 0, i32 7
  %75 = load %struct.sv*, %struct.sv** %op_sv, align 8
  %76 = bitcast %struct.sv* %75 to %struct.gv*
  store %struct.gv* %76, %struct.gv** %gv, align 8
  %77 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_flags = getelementptr inbounds %struct.gv, %struct.gv* %77, i32 0, i32 2
  %78 = load i32, i32* %sv_flags, align 4
  %and144 = and i32 %78, 255
  %cmp145 = icmp eq i32 %and144, 9
  br i1 %cmp145, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end143
  %79 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u = getelementptr inbounds %struct.gv, %struct.gv* %79, i32 0, i32 3
  %svu_gp = bitcast %union.anon.3* %sv_u to %struct.gp**
  %80 = load %struct.gp*, %struct.gp** %svu_gp, align 8
  %add.ptr147 = getelementptr inbounds %struct.gp, %struct.gp* %80, i64 0
  %gp_cv = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr147, i32 0, i32 2
  %81 = load %struct.cv*, %struct.cv** %gp_cv, align 8
  %add.ptr148 = getelementptr inbounds %struct.cv, %struct.cv* %81, i64 0
  br label %cond.end163

cond.false:                                       ; preds = %if.end143
  %82 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_flags149 = getelementptr inbounds %struct.gv, %struct.gv* %82, i32 0, i32 2
  %83 = load i32, i32* %sv_flags149, align 4
  %and150 = and i32 %83, 2048
  %tobool151 = icmp ne i32 %and150, 0
  br i1 %tobool151, label %land.lhs.true152, label %cond.false161

land.lhs.true152:                                 ; preds = %cond.false
  %84 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u153 = getelementptr inbounds %struct.gv, %struct.gv* %84, i32 0, i32 3
  %svu_rv = bitcast %union.anon.3* %sv_u153 to %struct.sv**
  %85 = load %struct.sv*, %struct.sv** %svu_rv, align 8
  %sv_flags154 = getelementptr inbounds %struct.sv, %struct.sv* %85, i32 0, i32 2
  %86 = load i32, i32* %sv_flags154, align 4
  %and155 = and i32 %86, 255
  %cmp156 = icmp eq i32 %and155, 13
  br i1 %cmp156, label %cond.true158, label %cond.false161

cond.true158:                                     ; preds = %land.lhs.true152
  %87 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u159 = getelementptr inbounds %struct.gv, %struct.gv* %87, i32 0, i32 3
  %svu_rv160 = bitcast %union.anon.3* %sv_u159 to %struct.sv**
  %88 = load %struct.sv*, %struct.sv** %svu_rv160, align 8
  %89 = bitcast %struct.sv* %88 to i8*
  %90 = bitcast i8* %89 to %struct.cv*
  br label %cond.end

cond.false161:                                    ; preds = %land.lhs.true152, %cond.false
  br label %cond.end

cond.end:                                         ; preds = %cond.false161, %cond.true158
  %cond162 = phi %struct.cv* [ %90, %cond.true158 ], [ null, %cond.false161 ]
  br label %cond.end163

cond.end163:                                      ; preds = %cond.end, %cond.true
  %cond164 = phi %struct.cv* [ %add.ptr148, %cond.true ], [ %cond162, %cond.end ]
  store %struct.cv* %cond164, %struct.cv** %cv, align 8
  %91 = load %struct.cv*, %struct.cv** %cv, align 8
  %tobool165 = icmp ne %struct.cv* %91, null
  br i1 %tobool165, label %if.end167, label %if.then166

if.then166:                                       ; preds = %cond.end163
  br label %sw.epilog

if.end167:                                        ; preds = %cond.end163
  %92 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any = getelementptr inbounds %struct.cv, %struct.cv* %92, i32 0, i32 0
  %93 = load %struct.xpvcv*, %struct.xpvcv** %sv_any, align 8
  %94 = bitcast %struct.xpvcv* %93 to i8*
  %95 = bitcast i8* %94 to %struct.xpvcv*
  %xcv_flags = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %95, i32 0, i32 12
  %96 = load i32, i32* %xcv_flags, align 4
  %and168 = and i32 %96, 2
  %tobool169 = icmp ne i32 %and168, 0
  br i1 %tobool169, label %if.then170, label %if.end171

if.then170:                                       ; preds = %if.end167
  br label %sw.epilog

if.end171:                                        ; preds = %if.end167
  br label %if.end172

if.end172:                                        ; preds = %if.end171
  br label %if.end173

if.end173:                                        ; preds = %if.end172
  br label %sw.default

sw.default:                                       ; preds = %if.end15, %if.end173
  br label %nomod

nomod:                                            ; preds = %sw.bb705, %if.end704, %if.then628, %if.then621, %if.end611, %if.then545, %if.then476, %if.then469, %if.then413, %if.end377, %if.then330, %if.then267, %if.then261, %if.then246, %sw.default, %if.end25
  %97 = load i32, i32* %flags.addr, align 4
  %and174 = and i32 %97, 1
  %tobool175 = icmp ne i32 %and174, 0
  br i1 %tobool175, label %if.then176, label %if.end177

if.then176:                                       ; preds = %nomod
  store %struct.op* null, %struct.op** %retval, align 8
  br label %return

if.end177:                                        ; preds = %nomod
  %98 = load i32, i32* %type.addr, align 4
  %cmp178 = icmp eq i32 %98, 169
  br i1 %cmp178, label %if.then189, label %lor.lhs.false180

lor.lhs.false180:                                 ; preds = %if.end177
  %99 = load i32, i32* %type.addr, align 4
  %cmp181 = icmp eq i32 %99, 185
  br i1 %cmp181, label %if.then189, label %lor.lhs.false183

lor.lhs.false183:                                 ; preds = %lor.lhs.false180
  %100 = load i32, i32* %type.addr, align 4
  %cmp184 = icmp eq i32 %100, 20
  br i1 %cmp184, label %if.then189, label %lor.lhs.false186

lor.lhs.false186:                                 ; preds = %lor.lhs.false183
  %101 = load i32, i32* %type.addr, align 4
  %cmp187 = icmp eq i32 %101, 187
  br i1 %cmp187, label %if.then189, label %if.end190

if.then189:                                       ; preds = %lor.lhs.false186, %lor.lhs.false183, %lor.lhs.false180, %if.end177
  br label %sw.epilog

if.end190:                                        ; preds = %lor.lhs.false186
  %102 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type191 = getelementptr inbounds %struct.op, %struct.op* %102, i32 0, i32 4
  %bf.load192 = load i16, i16* %op_type191, align 8
  %bf.clear193 = and i16 %bf.load192, 511
  %bf.cast194 = zext i16 %bf.clear193 to i32
  %cmp195 = icmp eq i32 %bf.cast194, 0
  br i1 %cmp195, label %land.lhs.true197, label %cond.false203

land.lhs.true197:                                 ; preds = %if.end190
  %103 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_flags198 = getelementptr inbounds %struct.op, %struct.op* %103, i32 0, i32 5
  %104 = load i8, i8* %op_flags198, align 2
  %conv199 = zext i8 %104 to i32
  %and200 = and i32 %conv199, 128
  %tobool201 = icmp ne i32 %and200, 0
  br i1 %tobool201, label %cond.true202, label %cond.false203

cond.true202:                                     ; preds = %land.lhs.true197
  br label %cond.end230

cond.false203:                                    ; preds = %land.lhs.true197, %if.end190
  %105 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type204 = getelementptr inbounds %struct.op, %struct.op* %105, i32 0, i32 4
  %bf.load205 = load i16, i16* %op_type204, align 8
  %bf.clear206 = and i16 %bf.load205, 511
  %bf.cast207 = zext i16 %bf.clear206 to i32
  %cmp208 = icmp eq i32 %bf.cast207, 185
  br i1 %cmp208, label %cond.true210, label %cond.false211

cond.true210:                                     ; preds = %cond.false203
  br label %cond.end228

cond.false211:                                    ; preds = %cond.false203
  %106 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type212 = getelementptr inbounds %struct.op, %struct.op* %106, i32 0, i32 4
  %bf.load213 = load i16, i16* %op_type212, align 8
  %bf.clear214 = and i16 %bf.load213, 511
  %bf.cast215 = zext i16 %bf.clear214 to i32
  %cmp216 = icmp eq i32 %bf.cast215, 380
  br i1 %cmp216, label %cond.true218, label %cond.false219

cond.true218:                                     ; preds = %cond.false211
  %107 = load %struct.op*, %struct.op** %o.addr, align 8
  %call = call i8* @Perl_custom_op_get_field(%struct.op* %107, i32 2)
  %coerce.dive = getelementptr inbounds %union.XOPRETANY, %union.XOPRETANY* %coerce, i32 0, i32 0
  store i8* %call, i8** %coerce.dive, align 8
  %xop_desc = bitcast %union.XOPRETANY* %coerce to i8**
  %108 = load i8*, i8** %xop_desc, align 8
  br label %cond.end226

cond.false219:                                    ; preds = %cond.false211
  %109 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type220 = getelementptr inbounds %struct.op, %struct.op* %109, i32 0, i32 4
  %bf.load221 = load i16, i16* %op_type220, align 8
  %bf.clear222 = and i16 %bf.load221, 511
  %bf.cast223 = zext i16 %bf.clear222 to i32
  %idxprom224 = zext i32 %bf.cast223 to i64
  %arrayidx225 = getelementptr inbounds [0 x i8*], [0 x i8*]* @PL_op_desc, i64 0, i64 %idxprom224
  %110 = load i8*, i8** %arrayidx225, align 8
  br label %cond.end226

cond.end226:                                      ; preds = %cond.false219, %cond.true218
  %cond227 = phi i8* [ %108, %cond.true218 ], [ %110, %cond.false219 ]
  br label %cond.end228

cond.end228:                                      ; preds = %cond.end226, %cond.true210
  %cond229 = phi i8* [ getelementptr inbounds ([27 x i8], [27 x i8]* @.str.29, i64 0, i64 0), %cond.true210 ], [ %cond227, %cond.end226 ]
  br label %cond.end230

cond.end230:                                      ; preds = %cond.end228, %cond.true202
  %cond231 = phi i8* [ getelementptr inbounds ([9 x i8], [9 x i8]* @.str.28, i64 0, i64 0), %cond.true202 ], [ %cond229, %cond.end228 ]
  %111 = load i32, i32* %type.addr, align 4
  %tobool232 = icmp ne i32 %111, 0
  br i1 %tobool232, label %cond.true233, label %cond.false236

cond.true233:                                     ; preds = %cond.end230
  %112 = load i32, i32* %type.addr, align 4
  %idxprom234 = sext i32 %112 to i64
  %arrayidx235 = getelementptr inbounds [0 x i8*], [0 x i8*]* @PL_op_desc, i64 0, i64 %idxprom234
  %113 = load i8*, i8** %arrayidx235, align 8
  br label %cond.end237

cond.false236:                                    ; preds = %cond.end230
  br label %cond.end237

cond.end237:                                      ; preds = %cond.false236, %cond.true233
  %cond238 = phi i8* [ %113, %cond.true233 ], [ getelementptr inbounds ([6 x i8], [6 x i8]* @.str.30, i64 0, i64 0), %cond.false236 ]
  %call239 = call i8* (i8*, ...) @Perl_form(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.27, i64 0, i64 0), i8* %cond231, i8* %cond238)
  %call240 = call i32 @Perl_yyerror(i8* %call239)
  %114 = load %struct.op*, %struct.op** %o.addr, align 8
  store %struct.op* %114, %struct.op** %retval, align 8
  br label %return

sw.bb241:                                         ; preds = %if.end15, %if.end15, %if.end15, %if.end15, %if.end15, %if.end15, %if.end15, %if.end15, %if.end15, %if.end15, %if.end15, %if.end15, %if.end15, %if.end15, %if.end15, %if.end15, %if.end15, %if.end15, %if.end15
  %115 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_flags242 = getelementptr inbounds %struct.op, %struct.op* %115, i32 0, i32 5
  %116 = load i8, i8* %op_flags242, align 2
  %conv243 = zext i8 %116 to i32
  %and244 = and i32 %conv243, 64
  %tobool245 = icmp ne i32 %and244, 0
  br i1 %tobool245, label %if.end247, label %if.then246

if.then246:                                       ; preds = %sw.bb241
  br label %nomod

if.end247:                                        ; preds = %sw.bb241
  %117 = load i32, i32* @PL_modcount, align 4
  %inc248 = add nsw i32 %117, 1
  store i32 %inc248, i32* @PL_modcount, align 4
  br label %sw.epilog

sw.bb249:                                         ; preds = %if.end15
  %118 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_flags250 = getelementptr inbounds %struct.op, %struct.op* %118, i32 0, i32 5
  %119 = load i8, i8* %op_flags250, align 2
  %conv251 = zext i8 %119 to i32
  %and252 = and i32 %conv251, 64
  %tobool253 = icmp ne i32 %and252, 0
  br i1 %tobool253, label %if.then254, label %if.end256

if.then254:                                       ; preds = %sw.bb249
  %120 = load i32, i32* @PL_modcount, align 4
  %inc255 = add nsw i32 %120, 1
  store i32 %inc255, i32* @PL_modcount, align 4
  br label %sw.epilog

if.end256:                                        ; preds = %sw.bb249
  %121 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_private257 = getelementptr inbounds %struct.op, %struct.op* %121, i32 0, i32 6
  %122 = load i8, i8* %op_private257, align 1
  %conv258 = zext i8 %122 to i32
  %and259 = and i32 %conv258, 64
  %tobool260 = icmp ne i32 %and259, 0
  br i1 %tobool260, label %if.else262, label %if.then261

if.then261:                                       ; preds = %if.end256
  br label %nomod

if.else262:                                       ; preds = %if.end256
  %123 = load i32, i32* @PL_modcount, align 4
  store i32 %123, i32* %mods, align 4
  %124 = load %struct.op*, %struct.op** %o.addr, align 8
  %125 = bitcast %struct.op* %124 to %struct.binop*
  %op_first263 = getelementptr inbounds %struct.binop, %struct.binop* %125, i32 0, i32 7
  %126 = load %struct.op*, %struct.op** %op_first263, align 8
  %127 = load i32, i32* %type.addr, align 4
  %call264 = call %struct.op* @S_modkids(%struct.op* %126, i32 %127)
  %128 = load i32, i32* %type.addr, align 4
  %cmp265 = icmp ne i32 %128, 38
  br i1 %cmp265, label %if.then267, label %if.end268

if.then267:                                       ; preds = %if.else262
  br label %nomod

if.end268:                                        ; preds = %if.else262
  %129 = load %struct.op*, %struct.op** %o.addr, align 8
  %130 = bitcast %struct.op* %129 to %struct.binop*
  %op_last = getelementptr inbounds %struct.binop, %struct.binop* %130, i32 0, i32 8
  %131 = load %struct.op*, %struct.op** %op_last, align 8
  store %struct.op* %131, %struct.op** %kid, align 8
  %132 = load %struct.op*, %struct.op** %kid, align 8
  %op_type269 = getelementptr inbounds %struct.op, %struct.op* %132, i32 0, i32 4
  %bf.load270 = load i16, i16* %op_type269, align 8
  %bf.clear271 = and i16 %bf.load270, 511
  %bf.cast272 = zext i16 %bf.clear271 to i32
  %cmp273 = icmp eq i32 %bf.cast272, 5
  br i1 %cmp273, label %land.lhs.true275, label %if.else307

land.lhs.true275:                                 ; preds = %if.end268
  %133 = load %struct.op*, %struct.op** %kid, align 8
  %134 = bitcast %struct.op* %133 to %struct.svop*
  %op_sv276 = getelementptr inbounds %struct.svop, %struct.svop* %134, i32 0, i32 7
  %135 = load %struct.sv*, %struct.sv** %op_sv276, align 8
  %sv_flags277 = getelementptr inbounds %struct.sv, %struct.sv* %135, i32 0, i32 2
  %136 = load i32, i32* %sv_flags277, align 4
  %and278 = and i32 %136, 256
  %tobool279 = icmp ne i32 %and278, 0
  br i1 %tobool279, label %if.then280, label %if.else307

if.then280:                                       ; preds = %land.lhs.true275
  %137 = load %struct.op*, %struct.op** %kid, align 8
  %138 = bitcast %struct.op* %137 to %struct.svop*
  %op_sv281 = getelementptr inbounds %struct.svop, %struct.svop* %138, i32 0, i32 7
  %139 = load %struct.sv*, %struct.sv** %op_sv281, align 8
  %sv_flags282 = getelementptr inbounds %struct.sv, %struct.sv* %139, i32 0, i32 2
  %140 = load i32, i32* %sv_flags282, align 4
  %and283 = and i32 %140, 2097408
  %cmp284 = icmp eq i32 %and283, 256
  br i1 %cmp284, label %cond.true286, label %cond.false289

cond.true286:                                     ; preds = %if.then280
  %141 = load %struct.op*, %struct.op** %kid, align 8
  %142 = bitcast %struct.op* %141 to %struct.svop*
  %op_sv287 = getelementptr inbounds %struct.svop, %struct.svop* %142, i32 0, i32 7
  %143 = load %struct.sv*, %struct.sv** %op_sv287, align 8
  %sv_any288 = getelementptr inbounds %struct.sv, %struct.sv* %143, i32 0, i32 0
  %144 = load i8*, i8** %sv_any288, align 8
  %145 = bitcast i8* %144 to %struct.xpviv*
  %xiv_u = getelementptr inbounds %struct.xpviv, %struct.xpviv* %145, i32 0, i32 4
  %xivu_iv = bitcast %union._xivu* %xiv_u to i64*
  %146 = load i64, i64* %xivu_iv, align 8
  br label %cond.end292

cond.false289:                                    ; preds = %if.then280
  %147 = load %struct.op*, %struct.op** %kid, align 8
  %148 = bitcast %struct.op* %147 to %struct.svop*
  %op_sv290 = getelementptr inbounds %struct.svop, %struct.svop* %148, i32 0, i32 7
  %149 = load %struct.sv*, %struct.sv** %op_sv290, align 8
  %call291 = call i64 @Perl_sv_2iv_flags(%struct.sv* %149, i32 2)
  br label %cond.end292

cond.end292:                                      ; preds = %cond.false289, %cond.true286
  %cond293 = phi i64 [ %146, %cond.true286 ], [ %call291, %cond.false289 ]
  store i64 %cond293, i64* %iv, align 8
  %150 = load i32, i32* @PL_modcount, align 4
  %cmp294 = icmp ne i32 %150, 1073741823
  br i1 %cmp294, label %if.then296, label %if.end306

if.then296:                                       ; preds = %cond.end292
  %151 = load i32, i32* %mods, align 4
  %conv297 = sext i32 %151 to i64
  %152 = load i32, i32* @PL_modcount, align 4
  %153 = load i32, i32* %mods, align 4
  %sub = sub nsw i32 %152, %153
  %conv298 = sext i32 %sub to i64
  %154 = load i64, i64* %iv, align 8
  %cmp299 = icmp slt i64 %154, 0
  br i1 %cmp299, label %cond.true301, label %cond.false302

cond.true301:                                     ; preds = %if.then296
  br label %cond.end303

cond.false302:                                    ; preds = %if.then296
  %155 = load i64, i64* %iv, align 8
  br label %cond.end303

cond.end303:                                      ; preds = %cond.false302, %cond.true301
  %cond304 = phi i64 [ 0, %cond.true301 ], [ %155, %cond.false302 ]
  %mul = mul nsw i64 %conv298, %cond304
  %add = add nsw i64 %conv297, %mul
  %conv305 = trunc i64 %add to i32
  store i32 %conv305, i32* @PL_modcount, align 4
  br label %if.end306

if.end306:                                        ; preds = %cond.end303, %cond.end292
  br label %if.end308

if.else307:                                       ; preds = %land.lhs.true275, %if.end268
  store i32 1073741823, i32* @PL_modcount, align 4
  br label %if.end308

if.end308:                                        ; preds = %if.else307, %if.end306
  br label %if.end309

if.end309:                                        ; preds = %if.end308
  br label %sw.epilog

sw.bb310:                                         ; preds = %if.end15
  store i32 1, i32* %localize, align 4
  %156 = load %struct.op*, %struct.op** %o.addr, align 8
  %157 = bitcast %struct.op* %156 to %struct.unop*
  %op_first311 = getelementptr inbounds %struct.unop, %struct.unop* %157, i32 0, i32 7
  %158 = load %struct.op*, %struct.op** %op_first311, align 8
  %op_sibling312 = getelementptr inbounds %struct.op, %struct.op* %158, i32 0, i32 1
  %159 = load %struct.op*, %struct.op** %op_sibling312, align 8
  %add.ptr313 = getelementptr inbounds %struct.op, %struct.op* %159, i64 0
  store %struct.op* %add.ptr313, %struct.op** %kid, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %sw.bb310
  %160 = load %struct.op*, %struct.op** %kid, align 8
  %tobool314 = icmp ne %struct.op* %160, null
  br i1 %tobool314, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %161 = load %struct.op*, %struct.op** %kid, align 8
  %162 = load i32, i32* %type.addr, align 4
  %call315 = call %struct.op* @Perl_op_lvalue_flags(%struct.op* %161, i32 %162, i32 0)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %163 = load %struct.op*, %struct.op** %kid, align 8
  %op_sibling316 = getelementptr inbounds %struct.op, %struct.op* %163, i32 0, i32 1
  %164 = load %struct.op*, %struct.op** %op_sibling316, align 8
  %add.ptr317 = getelementptr inbounds %struct.op, %struct.op* %164, i64 0
  store %struct.op* %add.ptr317, %struct.op** %kid, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %sw.epilog

sw.bb318:                                         ; preds = %if.end15, %if.end15
  %165 = load i32, i32* %type.addr, align 4
  %cmp319 = icmp eq i32 %165, 20
  br i1 %cmp319, label %land.lhs.true321, label %if.end327

land.lhs.true321:                                 ; preds = %sw.bb318
  %166 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_flags322 = getelementptr inbounds %struct.op, %struct.op* %166, i32 0, i32 5
  %167 = load i8, i8* %op_flags322, align 2
  %conv323 = zext i8 %167 to i32
  %and324 = and i32 %conv323, 8
  %tobool325 = icmp ne i32 %and324, 0
  br i1 %tobool325, label %if.then326, label %if.end327

if.then326:                                       ; preds = %land.lhs.true321
  store i32 1073741823, i32* @PL_modcount, align 4
  %168 = load %struct.op*, %struct.op** %o.addr, align 8
  store %struct.op* %168, %struct.op** %retval, align 8
  br label %return

if.end327:                                        ; preds = %land.lhs.true321, %sw.bb318
  br label %sw.bb328

sw.bb328:                                         ; preds = %if.end15, %if.end327
  %169 = load %struct.op*, %struct.op** %o.addr, align 8
  %170 = load i32, i32* %type.addr, align 4
  %call329 = call zeroext i1 @S_scalar_mod_type(%struct.op* %169, i32 %170)
  br i1 %call329, label %if.then330, label %if.end331

if.then330:                                       ; preds = %sw.bb328
  br label %nomod

if.end331:                                        ; preds = %sw.bb328
  %171 = load %struct.op*, %struct.op** %o.addr, align 8
  %172 = bitcast %struct.op* %171 to %struct.unop*
  %op_first332 = getelementptr inbounds %struct.unop, %struct.unop* %172, i32 0, i32 7
  %173 = load %struct.op*, %struct.op** %op_first332, align 8
  %174 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type333 = getelementptr inbounds %struct.op, %struct.op* %174, i32 0, i32 4
  %bf.load334 = load i16, i16* %op_type333, align 8
  %bf.clear335 = and i16 %bf.load334, 511
  %bf.cast336 = zext i16 %bf.clear335 to i32
  %call337 = call %struct.op* @Perl_doref(%struct.op* %173, i32 %bf.cast336, i1 zeroext true)
  br label %sw.bb338

sw.bb338:                                         ; preds = %if.end15, %if.end15, %if.end331
  store i32 1, i32* %localize, align 4
  br label %sw.bb339

sw.bb339:                                         ; preds = %if.end15, %sw.bb338
  %175 = load i32, i32* %type.addr, align 4
  %cmp340 = icmp eq i32 %175, 187
  br i1 %cmp340, label %land.lhs.true342, label %if.end367

land.lhs.true342:                                 ; preds = %sw.bb339
  %176 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type343 = getelementptr inbounds %struct.op, %struct.op* %176, i32 0, i32 4
  %bf.load344 = load i16, i16* %op_type343, align 8
  %bf.clear345 = and i16 %bf.load344, 511
  %bf.cast346 = zext i16 %bf.clear345 to i32
  %cmp347 = icmp ne i32 %bf.cast346, 135
  br i1 %cmp347, label %land.lhs.true349, label %lor.lhs.false356

land.lhs.true349:                                 ; preds = %land.lhs.true342
  %177 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type350 = getelementptr inbounds %struct.op, %struct.op* %177, i32 0, i32 4
  %bf.load351 = load i16, i16* %op_type350, align 8
  %bf.clear352 = and i16 %bf.load351, 511
  %bf.cast353 = zext i16 %bf.clear352 to i32
  %cmp354 = icmp ne i32 %bf.cast353, 149
  br i1 %cmp354, label %if.then362, label %lor.lhs.false356

lor.lhs.false356:                                 ; preds = %land.lhs.true349, %land.lhs.true342
  %178 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_flags357 = getelementptr inbounds %struct.op, %struct.op* %178, i32 0, i32 5
  %179 = load i8, i8* %op_flags357, align 2
  %conv358 = zext i8 %179 to i32
  %and359 = and i32 %conv358, 3
  %cmp360 = icmp ne i32 %and359, 2
  br i1 %cmp360, label %if.then362, label %if.end367

if.then362:                                       ; preds = %lor.lhs.false356, %land.lhs.true349
  %180 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_private363 = getelementptr inbounds %struct.op, %struct.op* %180, i32 0, i32 6
  %181 = load i8, i8* %op_private363, align 1
  %conv364 = zext i8 %181 to i32
  %or365 = or i32 %conv364, 8
  %conv366 = trunc i32 %or365 to i8
  store i8 %conv366, i8* %op_private363, align 1
  br label %if.end367

if.end367:                                        ; preds = %if.then362, %lor.lhs.false356, %sw.bb339
  br label %sw.bb368

sw.bb368:                                         ; preds = %if.end15, %if.end15, %if.end367
  store i32 1073741823, i32* @PL_modcount, align 4
  br label %sw.epilog

sw.bb369:                                         ; preds = %if.end15, %if.end15
  %182 = load i32, i32* %type.addr, align 4
  %cmp370 = icmp eq i32 %182, 187
  br i1 %cmp370, label %if.then372, label %if.end377

if.then372:                                       ; preds = %sw.bb369
  %183 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_private373 = getelementptr inbounds %struct.op, %struct.op* %183, i32 0, i32 6
  %184 = load i8, i8* %op_private373, align 1
  %conv374 = zext i8 %184 to i32
  %or375 = or i32 %conv374, 8
  %conv376 = trunc i32 %or375 to i8
  store i8 %conv376, i8* %op_private373, align 1
  br label %if.end377

if.end377:                                        ; preds = %if.then372, %sw.bb369
  br label %nomod

sw.bb378:                                         ; preds = %if.end15
  %185 = load i32, i32* getelementptr inbounds (%struct.cop, %struct.cop* @PL_compiling, i32 0, i32 10), align 8
  %or379 = or i32 %185, 256
  store i32 %or379, i32* getelementptr inbounds (%struct.cop, %struct.cop* @PL_compiling, i32 0, i32 10), align 8
  %186 = load i32, i32* %type.addr, align 4
  %cmp380 = icmp eq i32 %186, 187
  br i1 %cmp380, label %if.then382, label %if.end387

if.then382:                                       ; preds = %sw.bb378
  %187 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_private383 = getelementptr inbounds %struct.op, %struct.op* %187, i32 0, i32 6
  %188 = load i8, i8* %op_private383, align 1
  %conv384 = zext i8 %188 to i32
  %or385 = or i32 %conv384, 8
  %conv386 = trunc i32 %or385 to i8
  store i8 %conv386, i8* %op_private383, align 1
  br label %if.end387

if.end387:                                        ; preds = %if.then382, %sw.bb378
  %189 = load i32, i32* @PL_modcount, align 4
  %inc388 = add nsw i32 %189, 1
  store i32 %inc388, i32* @PL_modcount, align 4
  br label %sw.epilog

sw.bb389:                                         ; preds = %if.end15
  %190 = load %struct.op*, %struct.op** %o.addr, align 8
  %191 = bitcast %struct.op* %190 to %struct.unop*
  %op_first390 = getelementptr inbounds %struct.unop, %struct.unop* %191, i32 0, i32 7
  %192 = load %struct.op*, %struct.op** %op_first390, align 8
  %193 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type391 = getelementptr inbounds %struct.op, %struct.op* %193, i32 0, i32 4
  %bf.load392 = load i16, i16* %op_type391, align 8
  %bf.clear393 = and i16 %bf.load392, 511
  %bf.cast394 = zext i16 %bf.clear393 to i32
  %call395 = call %struct.op* @Perl_doref(%struct.op* %192, i32 %bf.cast394, i1 zeroext true)
  store i32 1, i32* %localize, align 4
  br label %sw.bb396

sw.bb396:                                         ; preds = %if.end15, %sw.bb389
  %194 = load i32, i32* getelementptr inbounds (%struct.cop, %struct.cop* @PL_compiling, i32 0, i32 10), align 8
  %or397 = or i32 %194, 256
  store i32 %or397, i32* getelementptr inbounds (%struct.cop, %struct.cop* @PL_compiling, i32 0, i32 10), align 8
  br label %sw.bb398

sw.bb398:                                         ; preds = %if.end15, %if.end15, %if.end15, %if.end15, %sw.bb396
  %195 = load i32, i32* @PL_modcount, align 4
  %inc399 = add nsw i32 %195, 1
  store i32 %inc399, i32* @PL_modcount, align 4
  br label %sw.epilog

sw.bb400:                                         ; preds = %if.end15, %if.end15
  store i32 -1, i32* %localize, align 4
  %196 = load i32, i32* @PL_modcount, align 4
  %inc401 = add nsw i32 %196, 1
  store i32 %inc401, i32* @PL_modcount, align 4
  br label %sw.epilog

sw.bb402:                                         ; preds = %if.end15, %if.end15
  store i32 1073741823, i32* @PL_modcount, align 4
  %197 = load i32, i32* %type.addr, align 4
  %cmp403 = icmp eq i32 %197, 20
  br i1 %cmp403, label %land.lhs.true405, label %if.end411

land.lhs.true405:                                 ; preds = %sw.bb402
  %198 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_flags406 = getelementptr inbounds %struct.op, %struct.op* %198, i32 0, i32 5
  %199 = load i8, i8* %op_flags406, align 2
  %conv407 = zext i8 %199 to i32
  %and408 = and i32 %conv407, 8
  %tobool409 = icmp ne i32 %and408, 0
  br i1 %tobool409, label %if.then410, label %if.end411

if.then410:                                       ; preds = %land.lhs.true405
  %200 = load %struct.op*, %struct.op** %o.addr, align 8
  store %struct.op* %200, %struct.op** %retval, align 8
  br label %return

if.end411:                                        ; preds = %land.lhs.true405, %sw.bb402
  %201 = load %struct.op*, %struct.op** %o.addr, align 8
  %202 = load i32, i32* %type.addr, align 4
  %call412 = call zeroext i1 @S_scalar_mod_type(%struct.op* %201, i32 %202)
  br i1 %call412, label %if.then413, label %if.end414

if.then413:                                       ; preds = %if.end411
  br label %nomod

if.end414:                                        ; preds = %if.end411
  %203 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_flags415 = getelementptr inbounds %struct.op, %struct.op* %203, i32 0, i32 5
  %204 = load i8, i8* %op_flags415, align 2
  %conv416 = zext i8 %204 to i32
  %and417 = and i32 %conv416, 3
  %cmp418 = icmp ne i32 %and417, 2
  br i1 %cmp418, label %land.lhs.true420, label %if.end428

land.lhs.true420:                                 ; preds = %if.end414
  %205 = load i32, i32* %type.addr, align 4
  %cmp421 = icmp eq i32 %205, 187
  br i1 %cmp421, label %if.then423, label %if.end428

if.then423:                                       ; preds = %land.lhs.true420
  %206 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_private424 = getelementptr inbounds %struct.op, %struct.op* %206, i32 0, i32 6
  %207 = load i8, i8* %op_private424, align 1
  %conv425 = zext i8 %207 to i32
  %or426 = or i32 %conv425, 8
  %conv427 = trunc i32 %or426 to i8
  store i8 %conv427, i8* %op_private424, align 1
  br label %if.end428

if.end428:                                        ; preds = %if.then423, %land.lhs.true420, %if.end414
  br label %sw.bb429

sw.bb429:                                         ; preds = %if.end15, %if.end428
  %208 = load i32, i32* @PL_modcount, align 4
  %inc430 = add nsw i32 %208, 1
  store i32 %inc430, i32* @PL_modcount, align 4
  %209 = load i32, i32* %type.addr, align 4
  %tobool431 = icmp ne i32 %209, 0
  br i1 %tobool431, label %if.end439, label %if.then432

if.then432:                                       ; preds = %sw.bb429
  %210 = load %struct.padnamelist*, %struct.padnamelist** @PL_comppad_name, align 8
  %xpadnl_alloc = getelementptr inbounds %struct.padnamelist, %struct.padnamelist* %210, i32 0, i32 1
  %211 = load %struct.padname**, %struct.padname*** %xpadnl_alloc, align 8
  %212 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_targ433 = getelementptr inbounds %struct.op, %struct.op* %212, i32 0, i32 3
  %213 = load i64, i64* %op_targ433, align 8
  %arrayidx434 = getelementptr inbounds %struct.padname*, %struct.padname** %211, i64 %213
  %214 = load %struct.padname*, %struct.padname** %arrayidx434, align 8
  %xpadn_len = getelementptr inbounds %struct.padname, %struct.padname* %214, i32 0, i32 7
  %215 = load i8, i8* %xpadn_len, align 8
  %conv435 = zext i8 %215 to i64
  %216 = load %struct.padnamelist*, %struct.padnamelist** @PL_comppad_name, align 8
  %xpadnl_alloc436 = getelementptr inbounds %struct.padnamelist, %struct.padnamelist* %216, i32 0, i32 1
  %217 = load %struct.padname**, %struct.padname*** %xpadnl_alloc436, align 8
  %218 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_targ437 = getelementptr inbounds %struct.op, %struct.op* %218, i32 0, i32 3
  %219 = load i64, i64* %op_targ437, align 8
  %arrayidx438 = getelementptr inbounds %struct.padname*, %struct.padname** %217, i64 %219
  %220 = load %struct.padname*, %struct.padname** %arrayidx438, align 8
  %xpadn_pv = getelementptr inbounds %struct.padname, %struct.padname* %220, i32 0, i32 0
  %221 = load i8*, i8** %xpadn_pv, align 8
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.31, i64 0, i64 0), i32 1, i64 %conv435, i8* %221)
  br label %if.end439

if.end439:                                        ; preds = %if.then432, %sw.bb429
  %222 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_private440 = getelementptr inbounds %struct.op, %struct.op* %222, i32 0, i32 6
  %223 = load i8, i8* %op_private440, align 1
  %conv441 = zext i8 %223 to i32
  %and442 = and i32 %conv441, 128
  %tobool443 = icmp ne i32 %and442, 0
  br i1 %tobool443, label %lor.lhs.false444, label %if.then457

lor.lhs.false444:                                 ; preds = %if.end439
  %224 = load i32, i32* %type.addr, align 4
  %cmp445 = icmp ne i32 %224, 37
  br i1 %cmp445, label %land.lhs.true447, label %if.end461

land.lhs.true447:                                 ; preds = %lor.lhs.false444
  %225 = load i32, i32* %type.addr, align 4
  %cmp448 = icmp ne i32 %225, 38
  br i1 %cmp448, label %land.lhs.true450, label %if.end461

land.lhs.true450:                                 ; preds = %land.lhs.true447
  %226 = load %struct.padnamelist*, %struct.padnamelist** @PL_comppad_name, align 8
  %xpadnl_alloc451 = getelementptr inbounds %struct.padnamelist, %struct.padnamelist* %226, i32 0, i32 1
  %227 = load %struct.padname**, %struct.padname*** %xpadnl_alloc451, align 8
  %228 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_targ452 = getelementptr inbounds %struct.op, %struct.op* %228, i32 0, i32 3
  %229 = load i64, i64* %op_targ452, align 8
  %arrayidx453 = getelementptr inbounds %struct.padname*, %struct.padname** %227, i64 %229
  %230 = load %struct.padname*, %struct.padname** %arrayidx453, align 8
  %xpadn_flags = getelementptr inbounds %struct.padname, %struct.padname* %230, i32 0, i32 8
  %231 = load i8, i8* %xpadn_flags, align 1
  %conv454 = zext i8 %231 to i32
  %and455 = and i32 %conv454, 2
  %tobool456 = icmp ne i32 %and455, 0
  br i1 %tobool456, label %if.then457, label %if.end461

if.then457:                                       ; preds = %land.lhs.true450, %if.end439
  %232 = load %struct.padnamelist*, %struct.padnamelist** @PL_comppad_name, align 8
  %xpadnl_alloc458 = getelementptr inbounds %struct.padnamelist, %struct.padnamelist* %232, i32 0, i32 1
  %233 = load %struct.padname**, %struct.padname*** %xpadnl_alloc458, align 8
  %234 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_targ459 = getelementptr inbounds %struct.op, %struct.op* %234, i32 0, i32 3
  %235 = load i64, i64* %op_targ459, align 8
  %arrayidx460 = getelementptr inbounds %struct.padname*, %struct.padname** %233, i64 %235
  %236 = load %struct.padname*, %struct.padname** %arrayidx460, align 8
  call void @S_mark_padname_lvalue(%struct.padname* %236)
  br label %if.end461

if.end461:                                        ; preds = %if.then457, %land.lhs.true450, %land.lhs.true447, %lor.lhs.false444
  br label %sw.epilog

sw.bb462:                                         ; preds = %if.end15
  store i32 0, i32* %localize, align 4
  br label %sw.epilog

sw.bb463:                                         ; preds = %if.end15, %if.end15
  %237 = load i32, i32* %type.addr, align 4
  %cmp464 = icmp ne i32 %237, 37
  br i1 %cmp464, label %land.lhs.true466, label %if.end470

land.lhs.true466:                                 ; preds = %sw.bb463
  %238 = load i32, i32* %type.addr, align 4
  %cmp467 = icmp ne i32 %238, 187
  br i1 %cmp467, label %if.then469, label %if.end470

if.then469:                                       ; preds = %land.lhs.true466
  br label %nomod

if.end470:                                        ; preds = %land.lhs.true466, %sw.bb463
  br label %lvalue_func

sw.bb471:                                         ; preds = %if.end15
  %239 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_private472 = getelementptr inbounds %struct.op, %struct.op* %239, i32 0, i32 6
  %240 = load i8, i8* %op_private472, align 1
  %conv473 = zext i8 %240 to i32
  %cmp474 = icmp eq i32 %conv473, 4
  br i1 %cmp474, label %if.then476, label %if.end477

if.then476:                                       ; preds = %sw.bb471
  br label %nomod

if.end477:                                        ; preds = %sw.bb471
  br label %sw.bb478

sw.bb478:                                         ; preds = %if.end15, %if.end15, %if.end477
  br label %lvalue_func

lvalue_func:                                      ; preds = %sw.bb478, %if.end470
  %241 = load i32, i32* %type.addr, align 4
  %cmp479 = icmp eq i32 %241, 187
  br i1 %cmp479, label %if.then481, label %if.end486

if.then481:                                       ; preds = %lvalue_func
  %242 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_private482 = getelementptr inbounds %struct.op, %struct.op* %242, i32 0, i32 6
  %243 = load i8, i8* %op_private482, align 1
  %conv483 = zext i8 %243 to i32
  %or484 = or i32 %conv483, 8
  %conv485 = trunc i32 %or484 to i8
  store i8 %conv485, i8* %op_private482, align 1
  br label %if.end486

if.end486:                                        ; preds = %if.then481, %lvalue_func
  %244 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_flags487 = getelementptr inbounds %struct.op, %struct.op* %244, i32 0, i32 5
  %245 = load i8, i8* %op_flags487, align 2
  %conv488 = zext i8 %245 to i32
  %and489 = and i32 %conv488, 4
  %tobool490 = icmp ne i32 %and489, 0
  br i1 %tobool490, label %if.then491, label %if.end496

if.then491:                                       ; preds = %if.end486
  %246 = load %struct.op*, %struct.op** %o.addr, align 8
  %247 = bitcast %struct.op* %246 to %struct.binop*
  %op_first492 = getelementptr inbounds %struct.binop, %struct.binop* %247, i32 0, i32 7
  %248 = load %struct.op*, %struct.op** %op_first492, align 8
  %op_sibling493 = getelementptr inbounds %struct.op, %struct.op* %248, i32 0, i32 1
  %249 = load %struct.op*, %struct.op** %op_sibling493, align 8
  %add.ptr494 = getelementptr inbounds %struct.op, %struct.op* %249, i64 0
  %250 = load i32, i32* %type.addr, align 4
  %call495 = call %struct.op* @Perl_op_lvalue_flags(%struct.op* %add.ptr494, i32 %250, i32 0)
  br label %if.end496

if.end496:                                        ; preds = %if.then491, %if.end486
  br label %sw.epilog

sw.bb497:                                         ; preds = %if.end15, %if.end15
  %251 = load %struct.op*, %struct.op** %o.addr, align 8
  %252 = bitcast %struct.op* %251 to %struct.binop*
  %op_first498 = getelementptr inbounds %struct.binop, %struct.binop* %252, i32 0, i32 7
  %253 = load %struct.op*, %struct.op** %op_first498, align 8
  %254 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type499 = getelementptr inbounds %struct.op, %struct.op* %254, i32 0, i32 4
  %bf.load500 = load i16, i16* %op_type499, align 8
  %bf.clear501 = and i16 %bf.load500, 511
  %bf.cast502 = zext i16 %bf.clear501 to i32
  %call503 = call %struct.op* @Perl_doref(%struct.op* %253, i32 %bf.cast502, i1 zeroext true)
  %255 = load i32, i32* %type.addr, align 4
  %cmp504 = icmp eq i32 %255, 185
  br i1 %cmp504, label %land.lhs.true506, label %if.end516

land.lhs.true506:                                 ; preds = %sw.bb497
  %256 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_private507 = getelementptr inbounds %struct.op, %struct.op* %256, i32 0, i32 6
  %257 = load i8, i8* %op_private507, align 1
  %conv508 = zext i8 %257 to i32
  %and509 = and i32 %conv508, 176
  %tobool510 = icmp ne i32 %and509, 0
  br i1 %tobool510, label %if.end516, label %if.then511

if.then511:                                       ; preds = %land.lhs.true506
  %258 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_private512 = getelementptr inbounds %struct.op, %struct.op* %258, i32 0, i32 6
  %259 = load i8, i8* %op_private512, align 1
  %conv513 = zext i8 %259 to i32
  %or514 = or i32 %conv513, 64
  %conv515 = trunc i32 %or514 to i8
  store i8 %conv515, i8* %op_private512, align 1
  br label %if.end516

if.end516:                                        ; preds = %if.then511, %land.lhs.true506, %sw.bb497
  %260 = load i32, i32* %type.addr, align 4
  %cmp517 = icmp eq i32 %260, 187
  br i1 %cmp517, label %if.then519, label %if.end524

if.then519:                                       ; preds = %if.end516
  %261 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_private520 = getelementptr inbounds %struct.op, %struct.op* %261, i32 0, i32 6
  %262 = load i8, i8* %op_private520, align 1
  %conv521 = zext i8 %262 to i32
  %or522 = or i32 %conv521, 8
  %conv523 = trunc i32 %or522 to i8
  store i8 %conv523, i8* %op_private520, align 1
  br label %if.end524

if.end524:                                        ; preds = %if.then519, %if.end516
  store i32 1, i32* %localize, align 4
  %263 = load i32, i32* @PL_modcount, align 4
  %inc525 = add nsw i32 %263, 1
  store i32 %inc525, i32* @PL_modcount, align 4
  br label %sw.epilog

sw.bb526:                                         ; preds = %if.end15, %if.end15
  %264 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_private527 = getelementptr inbounds %struct.op, %struct.op* %264, i32 0, i32 6
  %265 = load i8, i8* %op_private527, align 1
  %conv528 = zext i8 %265 to i32
  %or529 = or i32 %conv528, 128
  %conv530 = trunc i32 %or529 to i8
  store i8 %conv530, i8* %op_private527, align 1
  br label %sw.bb531

sw.bb531:                                         ; preds = %if.end15, %if.end15, %if.end15, %sw.bb526
  store i32 0, i32* %localize, align 4
  %266 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_flags532 = getelementptr inbounds %struct.op, %struct.op* %266, i32 0, i32 5
  %267 = load i8, i8* %op_flags532, align 2
  %conv533 = zext i8 %267 to i32
  %and534 = and i32 %conv533, 4
  %tobool535 = icmp ne i32 %and534, 0
  br i1 %tobool535, label %if.then536, label %if.end539

if.then536:                                       ; preds = %sw.bb531
  %268 = load %struct.op*, %struct.op** %o.addr, align 8
  %269 = bitcast %struct.op* %268 to %struct.listop*
  %op_last537 = getelementptr inbounds %struct.listop, %struct.listop* %269, i32 0, i32 8
  %270 = load %struct.op*, %struct.op** %op_last537, align 8
  %271 = load i32, i32* %type.addr, align 4
  %call538 = call %struct.op* @Perl_op_lvalue_flags(%struct.op* %270, i32 %271, i32 0)
  br label %if.end539

if.end539:                                        ; preds = %if.then536, %sw.bb531
  br label %sw.epilog

sw.bb540:                                         ; preds = %if.end15
  store i32 0, i32* %localize, align 4
  %272 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_flags541 = getelementptr inbounds %struct.op, %struct.op* %272, i32 0, i32 5
  %273 = load i8, i8* %op_flags541, align 2
  %conv542 = zext i8 %273 to i32
  %and543 = and i32 %conv542, 128
  %tobool544 = icmp ne i32 %and543, 0
  br i1 %tobool544, label %if.then545, label %if.else546

if.then545:                                       ; preds = %sw.bb540
  br label %nomod

if.else546:                                       ; preds = %sw.bb540
  %274 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_flags547 = getelementptr inbounds %struct.op, %struct.op* %274, i32 0, i32 5
  %275 = load i8, i8* %op_flags547, align 2
  %conv548 = zext i8 %275 to i32
  %and549 = and i32 %conv548, 4
  %tobool550 = icmp ne i32 %and549, 0
  br i1 %tobool550, label %if.end552, label %if.then551

if.then551:                                       ; preds = %if.else546
  br label %sw.epilog

if.end552:                                        ; preds = %if.else546
  br label %if.end553

if.end553:                                        ; preds = %if.end552
  %276 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_targ554 = getelementptr inbounds %struct.op, %struct.op* %276, i32 0, i32 3
  %277 = load i64, i64* %op_targ554, align 8
  %cmp555 = icmp ne i64 %277, 158
  br i1 %cmp555, label %if.then557, label %if.end560

if.then557:                                       ; preds = %if.end553
  %278 = load %struct.op*, %struct.op** %o.addr, align 8
  %279 = bitcast %struct.op* %278 to %struct.binop*
  %op_first558 = getelementptr inbounds %struct.binop, %struct.binop* %279, i32 0, i32 7
  %280 = load %struct.op*, %struct.op** %op_first558, align 8
  %281 = load i32, i32* %type.addr, align 4
  %call559 = call %struct.op* @Perl_op_lvalue_flags(%struct.op* %280, i32 %281, i32 0)
  br label %sw.epilog

if.end560:                                        ; preds = %if.end553
  br label %sw.bb561

sw.bb561:                                         ; preds = %if.end15, %if.end560
  store i32 0, i32* %localize, align 4
  %282 = load %struct.op*, %struct.op** %o.addr, align 8
  %283 = bitcast %struct.op* %282 to %struct.listop*
  %op_first562 = getelementptr inbounds %struct.listop, %struct.listop* %283, i32 0, i32 7
  %284 = load %struct.op*, %struct.op** %op_first562, align 8
  store %struct.op* %284, %struct.op** %kid, align 8
  br label %for.cond563

for.cond563:                                      ; preds = %for.inc574, %sw.bb561
  %285 = load %struct.op*, %struct.op** %kid, align 8
  %tobool564 = icmp ne %struct.op* %285, null
  br i1 %tobool564, label %for.body565, label %for.end577

for.body565:                                      ; preds = %for.cond563
  %286 = load %struct.op*, %struct.op** %kid, align 8
  %op_flags566 = getelementptr inbounds %struct.op, %struct.op* %286, i32 0, i32 5
  %287 = load i8, i8* %op_flags566, align 2
  %conv567 = zext i8 %287 to i32
  %and568 = and i32 %conv567, 3
  %cmp569 = icmp ne i32 %and568, 1
  br i1 %cmp569, label %if.then571, label %if.end573

if.then571:                                       ; preds = %for.body565
  %288 = load %struct.op*, %struct.op** %kid, align 8
  %289 = load i32, i32* %type.addr, align 4
  %call572 = call %struct.op* @Perl_op_lvalue_flags(%struct.op* %288, i32 %289, i32 0)
  br label %if.end573

if.end573:                                        ; preds = %if.then571, %for.body565
  br label %for.inc574

for.inc574:                                       ; preds = %if.end573
  %290 = load %struct.op*, %struct.op** %kid, align 8
  %op_sibling575 = getelementptr inbounds %struct.op, %struct.op* %290, i32 0, i32 1
  %291 = load %struct.op*, %struct.op** %op_sibling575, align 8
  %add.ptr576 = getelementptr inbounds %struct.op, %struct.op* %291, i64 0
  store %struct.op* %add.ptr576, %struct.op** %kid, align 8
  br label %for.cond563

for.end577:                                       ; preds = %for.cond563
  br label %sw.epilog

sw.bb578:                                         ; preds = %if.end15
  %292 = load %struct.op*, %struct.op** %o.addr, align 8
  store %struct.op* %292, %struct.op** %retval, align 8
  br label %return

sw.bb579:                                         ; preds = %if.end15, %if.end15
  %293 = load i32, i32* %type.addr, align 4
  %cmp580 = icmp eq i32 %293, 187
  br i1 %cmp580, label %if.then590, label %lor.lhs.false582

lor.lhs.false582:                                 ; preds = %sw.bb579
  %294 = load %struct.op*, %struct.op** %o.addr, align 8
  %295 = bitcast %struct.op* %294 to %struct.logop*
  %op_first583 = getelementptr inbounds %struct.logop, %struct.logop* %295, i32 0, i32 7
  %296 = load %struct.op*, %struct.op** %op_first583, align 8
  %op_type584 = getelementptr inbounds %struct.op, %struct.op* %296, i32 0, i32 4
  %bf.load585 = load i16, i16* %op_type584, align 8
  %bf.clear586 = and i16 %bf.load585, 511
  %bf.cast587 = zext i16 %bf.clear586 to i32
  %conv588 = trunc i32 %bf.cast587 to i16
  %call589 = call zeroext i1 @S_vivifies(i16 zeroext %conv588)
  br i1 %call589, label %if.end593, label %if.then590

if.then590:                                       ; preds = %lor.lhs.false582, %sw.bb579
  %297 = load %struct.op*, %struct.op** %o.addr, align 8
  %298 = bitcast %struct.op* %297 to %struct.logop*
  %op_first591 = getelementptr inbounds %struct.logop, %struct.logop* %298, i32 0, i32 7
  %299 = load %struct.op*, %struct.op** %op_first591, align 8
  %300 = load i32, i32* %type.addr, align 4
  %call592 = call %struct.op* @Perl_op_lvalue_flags(%struct.op* %299, i32 %300, i32 0)
  br label %if.end593

if.end593:                                        ; preds = %if.then590, %lor.lhs.false582
  %301 = load i32, i32* %type.addr, align 4
  %cmp594 = icmp eq i32 %301, 187
  br i1 %cmp594, label %if.then606, label %lor.lhs.false596

lor.lhs.false596:                                 ; preds = %if.end593
  %302 = load %struct.op*, %struct.op** %o.addr, align 8
  %303 = bitcast %struct.op* %302 to %struct.logop*
  %op_first597 = getelementptr inbounds %struct.logop, %struct.logop* %303, i32 0, i32 7
  %304 = load %struct.op*, %struct.op** %op_first597, align 8
  %op_sibling598 = getelementptr inbounds %struct.op, %struct.op* %304, i32 0, i32 1
  %305 = load %struct.op*, %struct.op** %op_sibling598, align 8
  %add.ptr599 = getelementptr inbounds %struct.op, %struct.op* %305, i64 0
  %op_type600 = getelementptr inbounds %struct.op, %struct.op* %add.ptr599, i32 0, i32 4
  %bf.load601 = load i16, i16* %op_type600, align 8
  %bf.clear602 = and i16 %bf.load601, 511
  %bf.cast603 = zext i16 %bf.clear602 to i32
  %conv604 = trunc i32 %bf.cast603 to i16
  %call605 = call zeroext i1 @S_vivifies(i16 zeroext %conv604)
  br i1 %call605, label %if.end611, label %if.then606

if.then606:                                       ; preds = %lor.lhs.false596, %if.end593
  %306 = load %struct.op*, %struct.op** %o.addr, align 8
  %307 = bitcast %struct.op* %306 to %struct.logop*
  %op_first607 = getelementptr inbounds %struct.logop, %struct.logop* %307, i32 0, i32 7
  %308 = load %struct.op*, %struct.op** %op_first607, align 8
  %op_sibling608 = getelementptr inbounds %struct.op, %struct.op* %308, i32 0, i32 1
  %309 = load %struct.op*, %struct.op** %op_sibling608, align 8
  %add.ptr609 = getelementptr inbounds %struct.op, %struct.op* %309, i64 0
  %310 = load i32, i32* %type.addr, align 4
  %call610 = call %struct.op* @Perl_op_lvalue_flags(%struct.op* %add.ptr609, i32 %310, i32 0)
  br label %if.end611

if.end611:                                        ; preds = %if.then606, %lor.lhs.false596
  br label %nomod

sw.bb612:                                         ; preds = %if.end15
  %311 = load i32, i32* %type.addr, align 4
  %cmp613 = icmp ne i32 %311, 38
  br i1 %cmp613, label %land.lhs.true615, label %if.end622

land.lhs.true615:                                 ; preds = %sw.bb612
  %312 = load i32, i32* %type.addr, align 4
  %cmp616 = icmp ne i32 %312, 37
  br i1 %cmp616, label %land.lhs.true618, label %if.end622

land.lhs.true618:                                 ; preds = %land.lhs.true615
  %313 = load i32, i32* %type.addr, align 4
  %cmp619 = icmp ne i32 %313, 201
  br i1 %cmp619, label %if.then621, label %if.end622

if.then621:                                       ; preds = %land.lhs.true618
  br label %nomod

if.end622:                                        ; preds = %land.lhs.true618, %land.lhs.true615, %sw.bb612
  %314 = load %struct.op*, %struct.op** %o.addr, align 8
  %315 = bitcast %struct.op* %314 to %struct.unop*
  %op_first623 = getelementptr inbounds %struct.unop, %struct.unop* %315, i32 0, i32 7
  %316 = load %struct.op*, %struct.op** %op_first623, align 8
  %317 = bitcast %struct.op* %316 to %struct.unop*
  %op_first624 = getelementptr inbounds %struct.unop, %struct.unop* %317, i32 0, i32 7
  %318 = load %struct.op*, %struct.op** %op_first624, align 8
  store %struct.op* %318, %struct.op** %kid, align 8
  br label %kid_2lvref

sw.bb625:                                         ; preds = %if.end15
  %319 = load i32, i32* %type.addr, align 4
  %cmp626 = icmp ne i32 %319, 38
  br i1 %cmp626, label %if.then628, label %if.end629

if.then628:                                       ; preds = %sw.bb625
  br label %nomod

if.end629:                                        ; preds = %sw.bb625
  %320 = load %struct.op*, %struct.op** %o.addr, align 8
  %321 = bitcast %struct.op* %320 to %struct.unop*
  %op_first630 = getelementptr inbounds %struct.unop, %struct.unop* %321, i32 0, i32 7
  %322 = load %struct.op*, %struct.op** %op_first630, align 8
  store %struct.op* %322, %struct.op** %kid, align 8
  br label %kid_2lvref

kid_2lvref:                                       ; preds = %if.end629, %if.end622
  %323 = load %struct.yy_parser*, %struct.yy_parser** @PL_parser, align 8
  %tobool631 = icmp ne %struct.yy_parser* %323, null
  br i1 %tobool631, label %cond.true632, label %cond.false635

cond.true632:                                     ; preds = %kid_2lvref
  %324 = load %struct.yy_parser*, %struct.yy_parser** @PL_parser, align 8
  %error_count633 = getelementptr inbounds %struct.yy_parser, %struct.yy_parser* %324, i32 0, i32 44
  %325 = load i8, i8* %error_count633, align 1
  %conv634 = zext i8 %325 to i32
  br label %cond.end636

cond.false635:                                    ; preds = %kid_2lvref
  br label %cond.end636

cond.end636:                                      ; preds = %cond.false635, %cond.true632
  %cond637 = phi i32 [ %conv634, %cond.true632 ], [ 0, %cond.false635 ]
  %conv638 = trunc i32 %cond637 to i8
  store i8 %conv638, i8* %ec, align 1
  %326 = load %struct.op*, %struct.op** %kid, align 8
  %327 = load i32, i32* %type.addr, align 4
  call void @S_lvref(%struct.op* %326, i32 %327)
  %328 = load %struct.yy_parser*, %struct.yy_parser** @PL_parser, align 8
  %tobool639 = icmp ne %struct.yy_parser* %328, null
  br i1 %tobool639, label %lor.lhs.false640, label %if.then646

lor.lhs.false640:                                 ; preds = %cond.end636
  %329 = load %struct.yy_parser*, %struct.yy_parser** @PL_parser, align 8
  %error_count641 = getelementptr inbounds %struct.yy_parser, %struct.yy_parser* %329, i32 0, i32 44
  %330 = load i8, i8* %error_count641, align 1
  %conv642 = zext i8 %330 to i32
  %331 = load i8, i8* %ec, align 1
  %conv643 = zext i8 %331 to i32
  %cmp644 = icmp eq i32 %conv642, %conv643
  br i1 %cmp644, label %if.then646, label %if.end672

if.then646:                                       ; preds = %lor.lhs.false640, %cond.end636
  %332 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cmp647 = icmp eq %struct.cop* %332, @PL_compiling
  br i1 %cmp647, label %cond.true649, label %cond.false650

cond.true649:                                     ; preds = %if.then646
  %333 = load i32, i32* getelementptr inbounds (%struct.cop, %struct.cop* @PL_compiling, i32 0, i32 10), align 8
  br label %cond.end651

cond.false650:                                    ; preds = %if.then646
  %334 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_hints = getelementptr inbounds %struct.cop, %struct.cop* %334, i32 0, i32 10
  %335 = load i32, i32* %cop_hints, align 8
  br label %cond.end651

cond.end651:                                      ; preds = %cond.false650, %cond.true649
  %cond652 = phi i32 [ %333, %cond.true649 ], [ %335, %cond.false650 ]
  %and653 = and i32 %cond652, 469762048
  %shr = lshr i32 %and653, 26
  %cmp654 = icmp eq i32 %shr, 7
  br i1 %cmp654, label %land.lhs.true656, label %if.then670

land.lhs.true656:                                 ; preds = %cond.end651
  %336 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cmp657 = icmp eq %struct.cop* %336, @PL_compiling
  br i1 %cmp657, label %cond.true659, label %cond.false660

cond.true659:                                     ; preds = %land.lhs.true656
  %337 = load i32, i32* getelementptr inbounds (%struct.cop, %struct.cop* @PL_compiling, i32 0, i32 10), align 8
  br label %cond.end662

cond.false660:                                    ; preds = %land.lhs.true656
  %338 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_hints661 = getelementptr inbounds %struct.cop, %struct.cop* %338, i32 0, i32 10
  %339 = load i32, i32* %cop_hints661, align 8
  br label %cond.end662

cond.end662:                                      ; preds = %cond.false660, %cond.true659
  %cond663 = phi i32 [ %337, %cond.true659 ], [ %339, %cond.false660 ]
  %and664 = and i32 %cond663, 131072
  %tobool665 = icmp ne i32 %and664, 0
  br i1 %tobool665, label %cond.true666, label %cond.false669

cond.true666:                                     ; preds = %cond.end662
  %call667 = call zeroext i1 @Perl_feature_is_enabled(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.32, i64 0, i64 0), i64 11)
  br i1 %call667, label %if.end671, label %if.then670

cond.false669:                                    ; preds = %cond.end662
  br i1 false, label %if.end671, label %if.then670

if.then670:                                       ; preds = %cond.false669, %cond.true666, %cond.end651
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.33, i64 0, i64 0))
  br label %if.end671

if.end671:                                        ; preds = %if.then670, %cond.false669, %cond.true666
  call void (i32, i8*, ...) @Perl_ck_warner_d(i32 63, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.34, i64 0, i64 0))
  br label %if.end672

if.end672:                                        ; preds = %if.end671, %lor.lhs.false640
  %340 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type673 = getelementptr inbounds %struct.op, %struct.op* %340, i32 0, i32 4
  %bf.load674 = load i16, i16* %op_type673, align 8
  %bf.clear675 = and i16 %bf.load674, 511
  %bf.cast676 = zext i16 %bf.clear675 to i32
  %cmp677 = icmp eq i32 %bf.cast676, 20
  br i1 %cmp677, label %if.then679, label %if.end682

if.then679:                                       ; preds = %if.end672
  %341 = load %struct.op*, %struct.op** %o.addr, align 8
  %342 = bitcast %struct.op* %341 to %struct.unop*
  %op_first680 = getelementptr inbounds %struct.unop, %struct.unop* %342, i32 0, i32 7
  %343 = load %struct.op*, %struct.op** %op_first680, align 8
  %344 = bitcast %struct.op* %343 to %struct.unop*
  %op_first681 = getelementptr inbounds %struct.unop, %struct.unop* %344, i32 0, i32 7
  %345 = load %struct.op*, %struct.op** %op_first681, align 8
  call void @Perl_op_null(%struct.op* %345)
  br label %if.end682

if.end682:                                        ; preds = %if.then679, %if.end672
  %346 = load %struct.op*, %struct.op** %o.addr, align 8
  call void @Perl_op_null(%struct.op* %346)
  %347 = load %struct.op*, %struct.op** %o.addr, align 8
  store %struct.op* %347, %struct.op** %retval, align 8
  br label %return

sw.bb683:                                         ; preds = %if.end15
  %348 = load %struct.op*, %struct.op** %o.addr, align 8
  %349 = bitcast %struct.op* %348 to %struct.listop*
  %op_first684 = getelementptr inbounds %struct.listop, %struct.listop* %349, i32 0, i32 7
  %350 = load %struct.op*, %struct.op** %op_first684, align 8
  store %struct.op* %350, %struct.op** %kid, align 8
  %351 = load %struct.op*, %struct.op** %kid, align 8
  %tobool685 = icmp ne %struct.op* %351, null
  br i1 %tobool685, label %land.lhs.true686, label %if.end704

land.lhs.true686:                                 ; preds = %sw.bb683
  %352 = load %struct.op*, %struct.op** %kid, align 8
  %op_type687 = getelementptr inbounds %struct.op, %struct.op* %352, i32 0, i32 4
  %bf.load688 = load i16, i16* %op_type687, align 8
  %bf.clear689 = and i16 %bf.load688, 511
  %bf.cast690 = zext i16 %bf.clear689 to i32
  %cmp691 = icmp eq i32 %bf.cast690, 13
  br i1 %cmp691, label %land.lhs.true693, label %if.end704

land.lhs.true693:                                 ; preds = %land.lhs.true686
  %353 = load %struct.op*, %struct.op** %kid, align 8
  %op_targ694 = getelementptr inbounds %struct.op, %struct.op* %353, i32 0, i32 3
  %354 = load i64, i64* %op_targ694, align 8
  %tobool695 = icmp ne i64 %354, 0
  br i1 %tobool695, label %if.then703, label %lor.lhs.false696

lor.lhs.false696:                                 ; preds = %land.lhs.true693
  %355 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_flags697 = getelementptr inbounds %struct.op, %struct.op* %355, i32 0, i32 5
  %356 = load i8, i8* %op_flags697, align 2
  %conv698 = zext i8 %356 to i32
  %and699 = and i32 %conv698, 64
  %tobool700 = icmp ne i32 %and699, 0
  br i1 %tobool700, label %if.then703, label %lor.lhs.false701

lor.lhs.false701:                                 ; preds = %lor.lhs.false696
  %357 = load %struct.op*, %struct.op** %kid, align 8
  %358 = bitcast %struct.op* %357 to %struct.pmop*
  %op_pmreplrootu = getelementptr inbounds %struct.pmop, %struct.pmop* %358, i32 0, i32 11
  %op_pmtargetgv = bitcast %union.anon.18* %op_pmreplrootu to %struct.gv**
  %359 = load %struct.gv*, %struct.gv** %op_pmtargetgv, align 8
  %tobool702 = icmp ne %struct.gv* %359, null
  br i1 %tobool702, label %if.then703, label %if.end704

if.then703:                                       ; preds = %lor.lhs.false701, %lor.lhs.false696, %land.lhs.true693
  store i32 1073741823, i32* @PL_modcount, align 4
  br label %sw.epilog

if.end704:                                        ; preds = %lor.lhs.false701, %land.lhs.true686, %sw.bb683
  br label %nomod

sw.bb705:                                         ; preds = %if.end15
  %360 = load %struct.op*, %struct.op** %o.addr, align 8
  %361 = bitcast %struct.op* %360 to %struct.unop*
  %op_first706 = getelementptr inbounds %struct.unop, %struct.unop* %361, i32 0, i32 7
  %362 = load %struct.op*, %struct.op** %op_first706, align 8
  %call707 = call %struct.op* @Perl_op_lvalue_flags(%struct.op* %362, i32 185, i32 0)
  br label %nomod

sw.epilog:                                        ; preds = %if.then703, %for.end577, %if.then557, %if.then551, %if.end539, %if.end524, %if.end496, %sw.bb462, %if.end461, %sw.bb400, %sw.bb398, %if.end387, %sw.bb368, %for.end, %if.end309, %if.then254, %if.end247, %if.then189, %if.then170, %if.then166, %if.then142, %if.then106, %if.then59, %do.end, %if.then24
  %363 = load i32, i32* %type.addr, align 4
  %cmp708 = icmp eq i32 %363, 20
  br i1 %cmp708, label %land.lhs.true710, label %if.end720

land.lhs.true710:                                 ; preds = %sw.epilog
  %364 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type711 = getelementptr inbounds %struct.op, %struct.op* %364, i32 0, i32 4
  %bf.load712 = load i16, i16* %op_type711, align 8
  %bf.clear713 = and i16 %bf.load712, 511
  %bf.cast714 = zext i16 %bf.clear713 to i32
  %idxprom715 = zext i32 %bf.cast714 to i64
  %arrayidx716 = getelementptr inbounds [0 x %struct.op* (%struct.op*)*], [0 x %struct.op* (%struct.op*)*]* @PL_check, i64 0, i64 %idxprom715
  %365 = load %struct.op* (%struct.op*)*, %struct.op* (%struct.op*)** %arrayidx716, align 8
  %cmp717 = icmp eq %struct.op* (%struct.op*)* %365, @Perl_ck_ftst
  br i1 %cmp717, label %if.then719, label %if.end720

if.then719:                                       ; preds = %land.lhs.true710
  %366 = load %struct.op*, %struct.op** %o.addr, align 8
  store %struct.op* %366, %struct.op** %retval, align 8
  br label %return

if.end720:                                        ; preds = %land.lhs.true710, %sw.epilog
  %367 = load i32, i32* %type.addr, align 4
  %cmp721 = icmp ne i32 %367, 187
  br i1 %cmp721, label %if.then723, label %if.end728

if.then723:                                       ; preds = %if.end720
  %368 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_flags724 = getelementptr inbounds %struct.op, %struct.op* %368, i32 0, i32 5
  %369 = load i8, i8* %op_flags724, align 2
  %conv725 = zext i8 %369 to i32
  %or726 = or i32 %conv725, 32
  %conv727 = trunc i32 %or726 to i8
  store i8 %conv727, i8* %op_flags724, align 2
  br label %if.end728

if.end728:                                        ; preds = %if.then723, %if.end720
  %370 = load i32, i32* %type.addr, align 4
  %cmp729 = icmp eq i32 %370, 38
  br i1 %cmp729, label %if.then734, label %lor.lhs.false731

lor.lhs.false731:                                 ; preds = %if.end728
  %371 = load i32, i32* %type.addr, align 4
  %cmp732 = icmp eq i32 %371, 37
  br i1 %cmp732, label %if.then734, label %if.else739

if.then734:                                       ; preds = %lor.lhs.false731, %if.end728
  %372 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_flags735 = getelementptr inbounds %struct.op, %struct.op* %372, i32 0, i32 5
  %373 = load i8, i8* %op_flags735, align 2
  %conv736 = zext i8 %373 to i32
  %or737 = or i32 %conv736, 144
  %conv738 = trunc i32 %or737 to i8
  store i8 %conv738, i8* %op_flags735, align 2
  br label %if.end791

if.else739:                                       ; preds = %lor.lhs.false731
  %374 = load i32, i32* %type.addr, align 4
  %tobool740 = icmp ne i32 %374, 0
  br i1 %tobool740, label %if.else775, label %if.then741

if.then741:                                       ; preds = %if.else739
  %375 = load i32, i32* %localize, align 4
  switch i32 %375, label %sw.epilog774 [
    i32 1, label %sw.bb742
    i32 0, label %sw.bb752
    i32 -1, label %sw.bb753
  ]

sw.bb742:                                         ; preds = %if.then741
  %376 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_private743 = getelementptr inbounds %struct.op, %struct.op* %376, i32 0, i32 6
  %377 = load i8, i8* %op_private743, align 1
  %conv744 = zext i8 %377 to i32
  %or745 = or i32 %conv744, 128
  %conv746 = trunc i32 %or745 to i8
  store i8 %conv746, i8* %op_private743, align 1
  %378 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_flags747 = getelementptr inbounds %struct.op, %struct.op* %378, i32 0, i32 5
  %379 = load i8, i8* %op_flags747, align 2
  %conv748 = zext i8 %379 to i32
  %and749 = and i32 %conv748, -129
  %conv750 = trunc i32 %and749 to i8
  store i8 %conv750, i8* %op_flags747, align 2
  %380 = load i32, i32* getelementptr inbounds (%struct.cop, %struct.cop* @PL_compiling, i32 0, i32 10), align 8
  %or751 = or i32 %380, 256
  store i32 %or751, i32* getelementptr inbounds (%struct.cop, %struct.cop* @PL_compiling, i32 0, i32 10), align 8
  br label %sw.epilog774

sw.bb752:                                         ; preds = %if.then741
  br label %sw.epilog774

sw.bb753:                                         ; preds = %if.then741
  %381 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type754 = getelementptr inbounds %struct.op, %struct.op* %381, i32 0, i32 4
  %bf.load755 = load i16, i16* %op_type754, align 8
  %bf.clear756 = and i16 %bf.load755, 511
  %bf.cast757 = zext i16 %bf.clear756 to i32
  %cmp758 = icmp eq i32 %bf.cast757, 380
  br i1 %cmp758, label %cond.true760, label %cond.false765

cond.true760:                                     ; preds = %sw.bb753
  %382 = load %struct.op*, %struct.op** %o.addr, align 8
  %call761 = call i8* @Perl_custom_op_get_field(%struct.op* %382, i32 2)
  %coerce.dive763 = getelementptr inbounds %union.XOPRETANY, %union.XOPRETANY* %coerce762, i32 0, i32 0
  store i8* %call761, i8** %coerce.dive763, align 8
  %xop_desc764 = bitcast %union.XOPRETANY* %coerce762 to i8**
  %383 = load i8*, i8** %xop_desc764, align 8
  br label %cond.end772

cond.false765:                                    ; preds = %sw.bb753
  %384 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type766 = getelementptr inbounds %struct.op, %struct.op* %384, i32 0, i32 4
  %bf.load767 = load i16, i16* %op_type766, align 8
  %bf.clear768 = and i16 %bf.load767, 511
  %bf.cast769 = zext i16 %bf.clear768 to i32
  %idxprom770 = zext i32 %bf.cast769 to i64
  %arrayidx771 = getelementptr inbounds [0 x i8*], [0 x i8*]* @PL_op_desc, i64 0, i64 %idxprom770
  %385 = load i8*, i8** %arrayidx771, align 8
  br label %cond.end772

cond.end772:                                      ; preds = %cond.false765, %cond.true760
  %cond773 = phi i8* [ %383, %cond.true760 ], [ %385, %cond.false765 ]
  call void (i32, i8*, ...) @Perl_ck_warner(i32 28, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.35, i64 0, i64 0), i8* %cond773)
  br label %sw.epilog774

sw.epilog774:                                     ; preds = %cond.end772, %if.then741, %sw.bb752, %sw.bb742
  br label %if.end790

if.else775:                                       ; preds = %if.else739
  %386 = load i32, i32* %type.addr, align 4
  %cmp776 = icmp ne i32 %386, 169
  br i1 %cmp776, label %land.lhs.true778, label %if.end789

land.lhs.true778:                                 ; preds = %if.else775
  %387 = load i32, i32* %type.addr, align 4
  %cmp779 = icmp ne i32 %387, 185
  br i1 %cmp779, label %land.lhs.true781, label %if.end789

land.lhs.true781:                                 ; preds = %land.lhs.true778
  %388 = load i32, i32* %type.addr, align 4
  %cmp782 = icmp ne i32 %388, 187
  br i1 %cmp782, label %if.then784, label %if.end789

if.then784:                                       ; preds = %land.lhs.true781
  %389 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_flags785 = getelementptr inbounds %struct.op, %struct.op* %389, i32 0, i32 5
  %390 = load i8, i8* %op_flags785, align 2
  %conv786 = zext i8 %390 to i32
  %or787 = or i32 %conv786, 16
  %conv788 = trunc i32 %or787 to i8
  store i8 %conv788, i8* %op_flags785, align 2
  br label %if.end789

if.end789:                                        ; preds = %if.then784, %land.lhs.true781, %land.lhs.true778, %if.else775
  br label %if.end790

if.end790:                                        ; preds = %if.end789, %sw.epilog774
  br label %if.end791

if.end791:                                        ; preds = %if.end790, %if.then734
  %391 = load %struct.op*, %struct.op** %o.addr, align 8
  store %struct.op* %391, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %if.end791, %if.then719, %if.end682, %sw.bb578, %if.then410, %if.then326, %cond.end237, %if.then176, %sw.bb, %if.then8, %if.then
  %392 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %392
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.op* @S_modkids(%struct.op* %o, i32 %type) #0 {
entry:
  %o.addr = alloca %struct.op*, align 8
  %type.addr = alloca i32, align 4
  %kid = alloca %struct.op*, align 8
  store %struct.op* %o, %struct.op** %o.addr, align 8
  store i32 %type, i32* %type.addr, align 4
  %0 = load %struct.op*, %struct.op** %o.addr, align 8
  %tobool = icmp ne %struct.op* %0, null
  br i1 %tobool, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %1 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %1, i32 0, i32 5
  %2 = load i8, i8* %op_flags, align 2
  %conv = zext i8 %2 to i32
  %and = and i32 %conv, 4
  %tobool1 = icmp ne i32 %and, 0
  br i1 %tobool1, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %3 = load %struct.op*, %struct.op** %o.addr, align 8
  %4 = bitcast %struct.op* %3 to %struct.listop*
  %op_first = getelementptr inbounds %struct.listop, %struct.listop* %4, i32 0, i32 7
  %5 = load %struct.op*, %struct.op** %op_first, align 8
  store %struct.op* %5, %struct.op** %kid, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then
  %6 = load %struct.op*, %struct.op** %kid, align 8
  %tobool2 = icmp ne %struct.op* %6, null
  br i1 %tobool2, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %7 = load %struct.op*, %struct.op** %kid, align 8
  %8 = load i32, i32* %type.addr, align 4
  %call = call %struct.op* @Perl_op_lvalue_flags(%struct.op* %7, i32 %8, i32 0)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %9 = load %struct.op*, %struct.op** %kid, align 8
  %op_sibling = getelementptr inbounds %struct.op, %struct.op* %9, i32 0, i32 1
  %10 = load %struct.op*, %struct.op** %op_sibling, align 8
  %add.ptr = getelementptr inbounds %struct.op, %struct.op* %10, i64 0
  store %struct.op* %add.ptr, %struct.op** %kid, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end

if.end:                                           ; preds = %for.end, %land.lhs.true, %entry
  %11 = load %struct.op*, %struct.op** %o.addr, align 8
  ret %struct.op* %11
}

declare dso_local i64 @Perl_sv_2iv_flags(%struct.sv*, i32) #3

; Function Attrs: noinline nounwind uwtable
define internal zeroext i1 @S_scalar_mod_type(%struct.op* %o, i32 %type) #0 {
entry:
  %retval = alloca i1, align 1
  %o.addr = alloca %struct.op*, align 8
  %type.addr = alloca i32, align 4
  store %struct.op* %o, %struct.op** %o.addr, align 8
  store i32 %type, i32* %type.addr, align 4
  %0 = load i32, i32* %type.addr, align 4
  switch i32 %0, label %sw.default [
    i32 46, label %sw.bb
    i32 37, label %sw.bb
    i32 47, label %sw.bb1
    i32 49, label %sw.bb1
    i32 51, label %sw.bb1
    i32 53, label %sw.bb1
    i32 48, label %sw.bb1
    i32 50, label %sw.bb1
    i32 52, label %sw.bb1
    i32 54, label %sw.bb1
    i32 55, label %sw.bb1
    i32 56, label %sw.bb1
    i32 58, label %sw.bb1
    i32 60, label %sw.bb1
    i32 62, label %sw.bb1
    i32 63, label %sw.bb1
    i32 65, label %sw.bb1
    i32 57, label %sw.bb1
    i32 59, label %sw.bb1
    i32 61, label %sw.bb1
    i32 64, label %sw.bb1
    i32 66, label %sw.bb1
    i32 69, label %sw.bb1
    i32 70, label %sw.bb1
    i32 92, label %sw.bb1
    i32 93, label %sw.bb1
    i32 94, label %sw.bb1
    i32 67, label %sw.bb1
    i32 33, label %sw.bb1
    i32 35, label %sw.bb1
    i32 36, label %sw.bb1
    i32 234, label %sw.bb1
    i32 242, label %sw.bb1
    i32 252, label %sw.bb1
    i32 181, label %sw.bb1
    i32 182, label %sw.bb1
    i32 183, label %sw.bb1
  ]

sw.bb:                                            ; preds = %entry, %entry
  %1 = load %struct.op*, %struct.op** %o.addr, align 8
  %tobool = icmp ne %struct.op* %1, null
  br i1 %tobool, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %sw.bb
  %2 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type = getelementptr inbounds %struct.op, %struct.op* %2, i32 0, i32 4
  %bf.load = load i16, i16* %op_type, align 8
  %bf.clear = and i16 %bf.load, 511
  %bf.cast = zext i16 %bf.clear to i32
  %cmp = icmp eq i32 %bf.cast, 14
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  store i1 false, i1* %retval, align 1
  br label %return

if.end:                                           ; preds = %land.lhs.true, %sw.bb
  br label %sw.bb1

sw.bb1:                                           ; preds = %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %if.end
  store i1 true, i1* %retval, align 1
  br label %return

sw.default:                                       ; preds = %entry
  store i1 false, i1* %retval, align 1
  br label %return

return:                                           ; preds = %sw.default, %sw.bb1, %if.then
  %3 = load i1, i1* %retval, align 1
  ret i1 %3
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_doref(%struct.op* %o, i32 %type, i1 zeroext %set_op_ref) #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %o.addr = alloca %struct.op*, align 8
  %type.addr = alloca i32, align 4
  %set_op_ref.addr = alloca i8, align 1
  %kid = alloca %struct.op*, align 8
  store %struct.op* %o, %struct.op** %o.addr, align 8
  store i32 %type, i32* %type.addr, align 4
  %frombool = zext i1 %set_op_ref to i8
  store i8 %frombool, i8* %set_op_ref.addr, align 1
  %0 = load %struct.yy_parser*, %struct.yy_parser** @PL_parser, align 8
  %tobool = icmp ne %struct.yy_parser* %0, null
  br i1 %tobool, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %1 = load %struct.yy_parser*, %struct.yy_parser** @PL_parser, align 8
  %error_count = getelementptr inbounds %struct.yy_parser, %struct.yy_parser* %1, i32 0, i32 44
  %2 = load i8, i8* %error_count, align 1
  %conv = zext i8 %2 to i32
  %tobool1 = icmp ne i32 %conv, 0
  br i1 %tobool1, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %3 = load %struct.op*, %struct.op** %o.addr, align 8
  store %struct.op* %3, %struct.op** %retval, align 8
  br label %return

if.end:                                           ; preds = %land.lhs.true, %entry
  %4 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type = getelementptr inbounds %struct.op, %struct.op* %4, i32 0, i32 4
  %bf.load = load i16, i16* %op_type, align 8
  %bf.clear = and i16 %bf.load, 511
  %bf.cast = zext i16 %bf.clear to i32
  switch i32 %bf.cast, label %sw.default [
    i32 185, label %sw.bb
    i32 180, label %sw.bb39
    i32 15, label %sw.bb45
    i32 9, label %sw.bb61
    i32 135, label %sw.bb89
    i32 149, label %sw.bb89
    i32 14, label %sw.bb97
    i32 10, label %sw.bb113
    i32 11, label %sw.bb113
    i32 2, label %sw.bb121
    i32 0, label %sw.bb121
    i32 138, label %sw.bb134
    i32 150, label %sw.bb134
    i32 198, label %sw.bb169
    i32 197, label %sw.bb169
    i32 196, label %sw.bb170
    i32 158, label %sw.bb170
  ]

sw.bb:                                            ; preds = %if.end
  %5 = load i32, i32* %type.addr, align 4
  %cmp = icmp eq i32 %5, 148
  br i1 %cmp, label %land.lhs.true5, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %sw.bb
  %6 = load i32, i32* %type.addr, align 4
  %cmp3 = icmp eq i32 %6, 43
  br i1 %cmp3, label %land.lhs.true5, label %if.else

land.lhs.true5:                                   ; preds = %lor.lhs.false, %sw.bb
  %7 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %7, i32 0, i32 5
  %8 = load i8, i8* %op_flags, align 2
  %conv6 = zext i8 %8 to i32
  %and = and i32 %conv6, 64
  %tobool7 = icmp ne i32 %and, 0
  br i1 %tobool7, label %if.else, label %if.then8

if.then8:                                         ; preds = %land.lhs.true5
  br label %do.body

do.body:                                          ; preds = %if.then8
  %9 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type9 = getelementptr inbounds %struct.op, %struct.op* %9, i32 0, i32 4
  %bf.load10 = load i16, i16* %op_type9, align 8
  %bf.clear11 = and i16 %bf.load10, -512
  %bf.set = or i16 %bf.clear11, 17
  store i16 %bf.set, i16* %op_type9, align 8
  %10 = load %struct.op* ()*, %struct.op* ()** getelementptr inbounds ([0 x %struct.op* ()*], [0 x %struct.op* ()*]* @PL_ppaddr, i64 0, i64 17), align 8
  %11 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_ppaddr = getelementptr inbounds %struct.op, %struct.op* %11, i32 0, i32 2
  store %struct.op* ()* %10, %struct.op* ()** %op_ppaddr, align 8
  br label %do.end

do.end:                                           ; preds = %do.body
  %12 = load %struct.op*, %struct.op** %o.addr, align 8
  %13 = bitcast %struct.op* %12 to %struct.unop*
  %op_first = getelementptr inbounds %struct.unop, %struct.unop* %13, i32 0, i32 7
  %14 = load %struct.op*, %struct.op** %op_first, align 8
  %15 = bitcast %struct.op* %14 to %struct.listop*
  %op_first12 = getelementptr inbounds %struct.listop, %struct.listop* %15, i32 0, i32 7
  %16 = load %struct.op*, %struct.op** %op_first12, align 8
  call void @Perl_op_null(%struct.op* %16)
  %17 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_flags13 = getelementptr inbounds %struct.op, %struct.op* %17, i32 0, i32 5
  %18 = load i8, i8* %op_flags13, align 2
  %conv14 = zext i8 %18 to i32
  %or = or i32 %conv14, 128
  %conv15 = trunc i32 %or to i8
  store i8 %conv15, i8* %op_flags13, align 2
  br label %if.end38

if.else:                                          ; preds = %land.lhs.true5, %lor.lhs.false
  %19 = load i32, i32* %type.addr, align 4
  %cmp16 = icmp eq i32 %19, 15
  br i1 %cmp16, label %if.then24, label %lor.lhs.false18

lor.lhs.false18:                                  ; preds = %if.else
  %20 = load i32, i32* %type.addr, align 4
  %cmp19 = icmp eq i32 %20, 135
  br i1 %cmp19, label %if.then24, label %lor.lhs.false21

lor.lhs.false21:                                  ; preds = %lor.lhs.false18
  %21 = load i32, i32* %type.addr, align 4
  %cmp22 = icmp eq i32 %21, 149
  br i1 %cmp22, label %if.then24, label %if.end37

if.then24:                                        ; preds = %lor.lhs.false21, %lor.lhs.false18, %if.else
  %22 = load i32, i32* %type.addr, align 4
  %cmp25 = icmp eq i32 %22, 135
  br i1 %cmp25, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then24
  br label %cond.end

cond.false:                                       ; preds = %if.then24
  %23 = load i32, i32* %type.addr, align 4
  %cmp27 = icmp eq i32 %23, 149
  %24 = zext i1 %cmp27 to i64
  %cond = select i1 %cmp27, i32 32, i32 48
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond29 = phi i32 [ 16, %cond.true ], [ %cond, %cond.false ]
  %25 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_private = getelementptr inbounds %struct.op, %struct.op* %25, i32 0, i32 6
  %26 = load i8, i8* %op_private, align 1
  %conv30 = zext i8 %26 to i32
  %or31 = or i32 %conv30, %cond29
  %conv32 = trunc i32 %or31 to i8
  store i8 %conv32, i8* %op_private, align 1
  %27 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_flags33 = getelementptr inbounds %struct.op, %struct.op* %27, i32 0, i32 5
  %28 = load i8, i8* %op_flags33, align 2
  %conv34 = zext i8 %28 to i32
  %or35 = or i32 %conv34, 32
  %conv36 = trunc i32 %or35 to i8
  store i8 %conv36, i8* %op_flags33, align 2
  br label %if.end37

if.end37:                                         ; preds = %cond.end, %lor.lhs.false21
  br label %if.end38

if.end38:                                         ; preds = %if.end37, %do.end
  br label %sw.epilog

sw.bb39:                                          ; preds = %if.end
  %29 = load %struct.op*, %struct.op** %o.addr, align 8
  %30 = bitcast %struct.op* %29 to %struct.unop*
  %op_first40 = getelementptr inbounds %struct.unop, %struct.unop* %30, i32 0, i32 7
  %31 = load %struct.op*, %struct.op** %op_first40, align 8
  %op_sibling = getelementptr inbounds %struct.op, %struct.op* %31, i32 0, i32 1
  %32 = load %struct.op*, %struct.op** %op_sibling, align 8
  %add.ptr = getelementptr inbounds %struct.op, %struct.op* %32, i64 0
  store %struct.op* %add.ptr, %struct.op** %kid, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %sw.bb39
  %33 = load %struct.op*, %struct.op** %kid, align 8
  %tobool41 = icmp ne %struct.op* %33, null
  br i1 %tobool41, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %34 = load %struct.op*, %struct.op** %kid, align 8
  %35 = load i32, i32* %type.addr, align 4
  %36 = load i8, i8* %set_op_ref.addr, align 1
  %tobool42 = trunc i8 %36 to i1
  %call = call %struct.op* @Perl_doref(%struct.op* %34, i32 %35, i1 zeroext %tobool42)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %37 = load %struct.op*, %struct.op** %kid, align 8
  %op_sibling43 = getelementptr inbounds %struct.op, %struct.op* %37, i32 0, i32 1
  %38 = load %struct.op*, %struct.op** %op_sibling43, align 8
  %add.ptr44 = getelementptr inbounds %struct.op, %struct.op* %38, i64 0
  store %struct.op* %add.ptr44, %struct.op** %kid, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %sw.epilog

sw.bb45:                                          ; preds = %if.end
  %39 = load i32, i32* %type.addr, align 4
  %cmp46 = icmp eq i32 %39, 43
  br i1 %cmp46, label %if.then48, label %if.end53

if.then48:                                        ; preds = %sw.bb45
  %40 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_flags49 = getelementptr inbounds %struct.op, %struct.op* %40, i32 0, i32 5
  %41 = load i8, i8* %op_flags49, align 2
  %conv50 = zext i8 %41 to i32
  %or51 = or i32 %conv50, 128
  %conv52 = trunc i32 %or51 to i8
  store i8 %conv52, i8* %op_flags49, align 2
  br label %if.end53

if.end53:                                         ; preds = %if.then48, %sw.bb45
  %42 = load %struct.op*, %struct.op** %o.addr, align 8
  %43 = bitcast %struct.op* %42 to %struct.unop*
  %op_first54 = getelementptr inbounds %struct.unop, %struct.unop* %43, i32 0, i32 7
  %44 = load %struct.op*, %struct.op** %op_first54, align 8
  %45 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type55 = getelementptr inbounds %struct.op, %struct.op* %45, i32 0, i32 4
  %bf.load56 = load i16, i16* %op_type55, align 8
  %bf.clear57 = and i16 %bf.load56, 511
  %bf.cast58 = zext i16 %bf.clear57 to i32
  %46 = load i8, i8* %set_op_ref.addr, align 1
  %tobool59 = trunc i8 %46 to i1
  %call60 = call %struct.op* @Perl_doref(%struct.op* %44, i32 %bf.cast58, i1 zeroext %tobool59)
  br label %sw.bb61

sw.bb61:                                          ; preds = %if.end, %if.end53
  %47 = load i32, i32* %type.addr, align 4
  %cmp62 = icmp eq i32 %47, 15
  br i1 %cmp62, label %if.then70, label %lor.lhs.false64

lor.lhs.false64:                                  ; preds = %sw.bb61
  %48 = load i32, i32* %type.addr, align 4
  %cmp65 = icmp eq i32 %48, 135
  br i1 %cmp65, label %if.then70, label %lor.lhs.false67

lor.lhs.false67:                                  ; preds = %lor.lhs.false64
  %49 = load i32, i32* %type.addr, align 4
  %cmp68 = icmp eq i32 %49, 149
  br i1 %cmp68, label %if.then70, label %if.end88

if.then70:                                        ; preds = %lor.lhs.false67, %lor.lhs.false64, %sw.bb61
  %50 = load i32, i32* %type.addr, align 4
  %cmp71 = icmp eq i32 %50, 135
  br i1 %cmp71, label %cond.true73, label %cond.false74

cond.true73:                                      ; preds = %if.then70
  br label %cond.end78

cond.false74:                                     ; preds = %if.then70
  %51 = load i32, i32* %type.addr, align 4
  %cmp75 = icmp eq i32 %51, 149
  %52 = zext i1 %cmp75 to i64
  %cond77 = select i1 %cmp75, i32 32, i32 48
  br label %cond.end78

cond.end78:                                       ; preds = %cond.false74, %cond.true73
  %cond79 = phi i32 [ 16, %cond.true73 ], [ %cond77, %cond.false74 ]
  %53 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_private80 = getelementptr inbounds %struct.op, %struct.op* %53, i32 0, i32 6
  %54 = load i8, i8* %op_private80, align 1
  %conv81 = zext i8 %54 to i32
  %or82 = or i32 %conv81, %cond79
  %conv83 = trunc i32 %or82 to i8
  store i8 %conv83, i8* %op_private80, align 1
  %55 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_flags84 = getelementptr inbounds %struct.op, %struct.op* %55, i32 0, i32 5
  %56 = load i8, i8* %op_flags84, align 2
  %conv85 = zext i8 %56 to i32
  %or86 = or i32 %conv85, 32
  %conv87 = trunc i32 %or86 to i8
  store i8 %conv87, i8* %op_flags84, align 2
  br label %if.end88

if.end88:                                         ; preds = %cond.end78, %lor.lhs.false67
  br label %sw.epilog

sw.bb89:                                          ; preds = %if.end, %if.end
  %57 = load i8, i8* %set_op_ref.addr, align 1
  %tobool90 = trunc i8 %57 to i1
  br i1 %tobool90, label %if.then91, label %if.end96

if.then91:                                        ; preds = %sw.bb89
  %58 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_flags92 = getelementptr inbounds %struct.op, %struct.op* %58, i32 0, i32 5
  %59 = load i8, i8* %op_flags92, align 2
  %conv93 = zext i8 %59 to i32
  %or94 = or i32 %conv93, 16
  %conv95 = trunc i32 %or94 to i8
  store i8 %conv95, i8* %op_flags92, align 2
  br label %if.end96

if.end96:                                         ; preds = %if.then91, %sw.bb89
  br label %sw.bb97

sw.bb97:                                          ; preds = %if.end, %if.end96
  %60 = load i32, i32* %type.addr, align 4
  %cmp98 = icmp eq i32 %60, 43
  br i1 %cmp98, label %if.then100, label %if.end105

if.then100:                                       ; preds = %sw.bb97
  %61 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_flags101 = getelementptr inbounds %struct.op, %struct.op* %61, i32 0, i32 5
  %62 = load i8, i8* %op_flags101, align 2
  %conv102 = zext i8 %62 to i32
  %or103 = or i32 %conv102, 128
  %conv104 = trunc i32 %or103 to i8
  store i8 %conv104, i8* %op_flags101, align 2
  br label %if.end105

if.end105:                                        ; preds = %if.then100, %sw.bb97
  %63 = load %struct.op*, %struct.op** %o.addr, align 8
  %64 = bitcast %struct.op* %63 to %struct.unop*
  %op_first106 = getelementptr inbounds %struct.unop, %struct.unop* %64, i32 0, i32 7
  %65 = load %struct.op*, %struct.op** %op_first106, align 8
  %66 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type107 = getelementptr inbounds %struct.op, %struct.op* %66, i32 0, i32 4
  %bf.load108 = load i16, i16* %op_type107, align 8
  %bf.clear109 = and i16 %bf.load108, 511
  %bf.cast110 = zext i16 %bf.clear109 to i32
  %67 = load i8, i8* %set_op_ref.addr, align 1
  %tobool111 = trunc i8 %67 to i1
  %call112 = call %struct.op* @Perl_doref(%struct.op* %65, i32 %bf.cast110, i1 zeroext %tobool111)
  br label %sw.epilog

sw.bb113:                                         ; preds = %if.end, %if.end
  %68 = load i8, i8* %set_op_ref.addr, align 1
  %tobool114 = trunc i8 %68 to i1
  br i1 %tobool114, label %if.then115, label %if.end120

if.then115:                                       ; preds = %sw.bb113
  %69 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_flags116 = getelementptr inbounds %struct.op, %struct.op* %69, i32 0, i32 5
  %70 = load i8, i8* %op_flags116, align 2
  %conv117 = zext i8 %70 to i32
  %or118 = or i32 %conv117, 16
  %conv119 = trunc i32 %or118 to i8
  store i8 %conv119, i8* %op_flags116, align 2
  br label %if.end120

if.end120:                                        ; preds = %if.then115, %sw.bb113
  br label %sw.epilog

sw.bb121:                                         ; preds = %if.end, %if.end
  %71 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_flags122 = getelementptr inbounds %struct.op, %struct.op* %71, i32 0, i32 5
  %72 = load i8, i8* %op_flags122, align 2
  %conv123 = zext i8 %72 to i32
  %and124 = and i32 %conv123, 4
  %tobool125 = icmp ne i32 %and124, 0
  br i1 %tobool125, label %lor.lhs.false126, label %if.then129

lor.lhs.false126:                                 ; preds = %sw.bb121
  %73 = load i32, i32* %type.addr, align 4
  %cmp127 = icmp eq i32 %73, 43
  br i1 %cmp127, label %if.then129, label %if.end130

if.then129:                                       ; preds = %lor.lhs.false126, %sw.bb121
  br label %sw.epilog

if.end130:                                        ; preds = %lor.lhs.false126
  %74 = load %struct.op*, %struct.op** %o.addr, align 8
  %75 = bitcast %struct.op* %74 to %struct.binop*
  %op_first131 = getelementptr inbounds %struct.binop, %struct.binop* %75, i32 0, i32 7
  %76 = load %struct.op*, %struct.op** %op_first131, align 8
  %77 = load i32, i32* %type.addr, align 4
  %78 = load i8, i8* %set_op_ref.addr, align 1
  %tobool132 = trunc i8 %78 to i1
  %call133 = call %struct.op* @Perl_doref(%struct.op* %76, i32 %77, i1 zeroext %tobool132)
  br label %sw.epilog

sw.bb134:                                         ; preds = %if.end, %if.end
  %79 = load %struct.op*, %struct.op** %o.addr, align 8
  %80 = bitcast %struct.op* %79 to %struct.binop*
  %op_first135 = getelementptr inbounds %struct.binop, %struct.binop* %80, i32 0, i32 7
  %81 = load %struct.op*, %struct.op** %op_first135, align 8
  %82 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type136 = getelementptr inbounds %struct.op, %struct.op* %82, i32 0, i32 4
  %bf.load137 = load i16, i16* %op_type136, align 8
  %bf.clear138 = and i16 %bf.load137, 511
  %bf.cast139 = zext i16 %bf.clear138 to i32
  %83 = load i8, i8* %set_op_ref.addr, align 1
  %tobool140 = trunc i8 %83 to i1
  %call141 = call %struct.op* @Perl_doref(%struct.op* %81, i32 %bf.cast139, i1 zeroext %tobool140)
  %84 = load i32, i32* %type.addr, align 4
  %cmp142 = icmp eq i32 %84, 15
  br i1 %cmp142, label %if.then150, label %lor.lhs.false144

lor.lhs.false144:                                 ; preds = %sw.bb134
  %85 = load i32, i32* %type.addr, align 4
  %cmp145 = icmp eq i32 %85, 135
  br i1 %cmp145, label %if.then150, label %lor.lhs.false147

lor.lhs.false147:                                 ; preds = %lor.lhs.false144
  %86 = load i32, i32* %type.addr, align 4
  %cmp148 = icmp eq i32 %86, 149
  br i1 %cmp148, label %if.then150, label %if.end168

if.then150:                                       ; preds = %lor.lhs.false147, %lor.lhs.false144, %sw.bb134
  %87 = load i32, i32* %type.addr, align 4
  %cmp151 = icmp eq i32 %87, 135
  br i1 %cmp151, label %cond.true153, label %cond.false154

cond.true153:                                     ; preds = %if.then150
  br label %cond.end158

cond.false154:                                    ; preds = %if.then150
  %88 = load i32, i32* %type.addr, align 4
  %cmp155 = icmp eq i32 %88, 149
  %89 = zext i1 %cmp155 to i64
  %cond157 = select i1 %cmp155, i32 32, i32 48
  br label %cond.end158

cond.end158:                                      ; preds = %cond.false154, %cond.true153
  %cond159 = phi i32 [ 16, %cond.true153 ], [ %cond157, %cond.false154 ]
  %90 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_private160 = getelementptr inbounds %struct.op, %struct.op* %90, i32 0, i32 6
  %91 = load i8, i8* %op_private160, align 1
  %conv161 = zext i8 %91 to i32
  %or162 = or i32 %conv161, %cond159
  %conv163 = trunc i32 %or162 to i8
  store i8 %conv163, i8* %op_private160, align 1
  %92 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_flags164 = getelementptr inbounds %struct.op, %struct.op* %92, i32 0, i32 5
  %93 = load i8, i8* %op_flags164, align 2
  %conv165 = zext i8 %93 to i32
  %or166 = or i32 %conv165, 32
  %conv167 = trunc i32 %or166 to i8
  store i8 %conv167, i8* %op_flags164, align 2
  br label %if.end168

if.end168:                                        ; preds = %cond.end158, %lor.lhs.false147
  br label %sw.epilog

sw.bb169:                                         ; preds = %if.end, %if.end
  store i8 0, i8* %set_op_ref.addr, align 1
  br label %sw.bb170

sw.bb170:                                         ; preds = %if.end, %if.end, %sw.bb169
  %94 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_flags171 = getelementptr inbounds %struct.op, %struct.op* %94, i32 0, i32 5
  %95 = load i8, i8* %op_flags171, align 2
  %conv172 = zext i8 %95 to i32
  %and173 = and i32 %conv172, 4
  %tobool174 = icmp ne i32 %and173, 0
  br i1 %tobool174, label %if.end176, label %if.then175

if.then175:                                       ; preds = %sw.bb170
  br label %sw.epilog

if.end176:                                        ; preds = %sw.bb170
  %96 = load %struct.op*, %struct.op** %o.addr, align 8
  %97 = bitcast %struct.op* %96 to %struct.listop*
  %op_last = getelementptr inbounds %struct.listop, %struct.listop* %97, i32 0, i32 8
  %98 = load %struct.op*, %struct.op** %op_last, align 8
  %99 = load i32, i32* %type.addr, align 4
  %100 = load i8, i8* %set_op_ref.addr, align 1
  %tobool177 = trunc i8 %100 to i1
  %call178 = call %struct.op* @Perl_doref(%struct.op* %98, i32 %99, i1 zeroext %tobool177)
  br label %sw.epilog

sw.default:                                       ; preds = %if.end
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %if.end176, %if.then175, %if.end168, %if.end130, %if.then129, %if.end120, %if.end105, %if.end88, %for.end, %if.end38
  %101 = load %struct.op*, %struct.op** %o.addr, align 8
  %call179 = call %struct.op* @Perl_scalar(%struct.op* %101)
  store %struct.op* %call179, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %sw.epilog, %if.then
  %102 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %102
}

; Function Attrs: noinline nounwind uwtable
define internal void @S_mark_padname_lvalue(%struct.padname* %pn) #0 {
entry:
  %pn.addr = alloca %struct.padname*, align 8
  %cv = alloca %struct.cv*, align 8
  store %struct.padname* %pn, %struct.padname** %pn.addr, align 8
  %0 = load %struct.cv*, %struct.cv** @PL_compcv, align 8
  store %struct.cv* %0, %struct.cv** %cv, align 8
  %1 = load %struct.padname*, %struct.padname** %pn.addr, align 8
  %xpadn_flags = getelementptr inbounds %struct.padname, %struct.padname* %1, i32 0, i32 8
  %2 = load i8, i8* %xpadn_flags, align 1
  %conv = zext i8 %2 to i32
  %or = or i32 %conv, 4
  %conv1 = trunc i32 %or to i8
  store i8 %conv1, i8* %xpadn_flags, align 1
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %3 = load %struct.padname*, %struct.padname** %pn.addr, align 8
  %xpadn_flags2 = getelementptr inbounds %struct.padname, %struct.padname* %3, i32 0, i32 8
  %4 = load i8, i8* %xpadn_flags2, align 1
  %conv3 = zext i8 %4 to i32
  %and = and i32 %conv3, 1
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %5 = load %struct.padname*, %struct.padname** %pn.addr, align 8
  %xpadn_low = getelementptr inbounds %struct.padname, %struct.padname* %5, i32 0, i32 3
  %6 = load i32, i32* %xpadn_low, align 8
  %tobool4 = icmp ne i32 %6, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %7 = phi i1 [ false, %while.cond ], [ %tobool4, %land.rhs ]
  br i1 %7, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %8 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any = getelementptr inbounds %struct.cv, %struct.cv* %8, i32 0, i32 0
  %9 = load %struct.xpvcv*, %struct.xpvcv** %sv_any, align 8
  %10 = bitcast %struct.xpvcv* %9 to i8*
  %11 = bitcast i8* %10 to %struct.xpvcv*
  %xcv_outside = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %11, i32 0, i32 10
  %12 = load %struct.cv*, %struct.cv** %xcv_outside, align 8
  store %struct.cv* %12, %struct.cv** %cv, align 8
  %13 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any5 = getelementptr inbounds %struct.cv, %struct.cv* %13, i32 0, i32 0
  %14 = load %struct.xpvcv*, %struct.xpvcv** %sv_any5, align 8
  %15 = bitcast %struct.xpvcv* %14 to i8*
  %16 = bitcast i8* %15 to %struct.xpvcv*
  %xcv_padlist_u = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %16, i32 0, i32 9
  %xcv_padlist = bitcast %union.anon.9* %xcv_padlist_u to %struct.padlist**
  %17 = load %struct.padlist*, %struct.padlist** %xcv_padlist, align 8
  %xpadl_alloc = getelementptr inbounds %struct.padlist, %struct.padlist* %17, i32 0, i32 1
  %18 = load %struct.av**, %struct.av*** %xpadl_alloc, align 8
  %19 = load %struct.av*, %struct.av** %18, align 8
  %20 = bitcast %struct.av* %19 to %struct.padnamelist*
  %xpadnl_alloc = getelementptr inbounds %struct.padnamelist, %struct.padnamelist* %20, i32 0, i32 1
  %21 = load %struct.padname**, %struct.padname*** %xpadnl_alloc, align 8
  %22 = load %struct.padname*, %struct.padname** %pn.addr, align 8
  %xpadn_low6 = getelementptr inbounds %struct.padname, %struct.padname* %22, i32 0, i32 3
  %23 = load i32, i32* %xpadn_low6, align 8
  %idxprom = zext i32 %23 to i64
  %arrayidx = getelementptr inbounds %struct.padname*, %struct.padname** %21, i64 %idxprom
  %24 = load %struct.padname*, %struct.padname** %arrayidx, align 8
  store %struct.padname* %24, %struct.padname** %pn.addr, align 8
  %25 = load %struct.padname*, %struct.padname** %pn.addr, align 8
  %xpadn_flags7 = getelementptr inbounds %struct.padname, %struct.padname* %25, i32 0, i32 8
  %26 = load i8, i8* %xpadn_flags7, align 1
  %conv8 = zext i8 %26 to i32
  %or9 = or i32 %conv8, 4
  %conv10 = trunc i32 %or9 to i8
  store i8 %conv10, i8* %xpadn_flags7, align 1
  br label %while.cond

while.end:                                        ; preds = %land.end
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i1 @S_vivifies(i16 zeroext %type) #0 {
entry:
  %retval = alloca i1, align 1
  %type.addr = alloca i16, align 2
  store i16 %type, i16* %type.addr, align 2
  %0 = load i16, i16* %type.addr, align 2
  %conv = zext i16 %0 to i32
  switch i32 %conv, label %sw.epilog [
    i32 135, label %sw.bb
    i32 139, label %sw.bb
    i32 149, label %sw.bb
    i32 140, label %sw.bb
    i32 15, label %sw.bb
    i32 151, label %sw.bb
    i32 136, label %sw.bb
    i32 152, label %sw.bb
    i32 150, label %sw.bb
    i32 138, label %sw.bb
  ]

sw.bb:                                            ; preds = %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry
  store i1 true, i1* %retval, align 1
  br label %return

sw.epilog:                                        ; preds = %entry
  store i1 false, i1* %retval, align 1
  br label %return

return:                                           ; preds = %sw.epilog, %sw.bb
  %1 = load i1, i1* %retval, align 1
  ret i1 %1
}

; Function Attrs: noinline nounwind uwtable
define internal void @S_lvref(%struct.op* %o, i32 %type) #0 {
entry:
  %o.addr = alloca %struct.op*, align 8
  %type.addr = alloca i32, align 4
  %kid = alloca %struct.op*, align 8
  %coerce = alloca %union.XOPRETANY, align 8
  store %struct.op* %o, %struct.op** %o.addr, align 8
  store i32 %type, i32* %type.addr, align 4
  %0 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type = getelementptr inbounds %struct.op, %struct.op* %0, i32 0, i32 4
  %bf.load = load i16, i16* %op_type, align 8
  %bf.clear = and i16 %bf.load, 511
  %bf.cast = zext i16 %bf.clear to i32
  switch i32 %bf.cast, label %sw.default [
    i32 180, label %sw.bb
    i32 3, label %sw.bb3
    i32 135, label %sw.bb4
    i32 17, label %sw.bb37
    i32 149, label %sw.bb81
    i32 15, label %sw.bb94
    i32 11, label %sw.bb108
    i32 9, label %sw.bb119
    i32 10, label %sw.bb121
    i32 138, label %sw.bb136
    i32 150, label %sw.bb136
    i32 139, label %sw.bb145
    i32 151, label %sw.bb145
    i32 0, label %sw.bb157
    i32 158, label %sw.bb177
    i32 1, label %sw.bb186
  ]

sw.bb:                                            ; preds = %entry
  %1 = load %struct.op*, %struct.op** %o.addr, align 8
  %2 = bitcast %struct.op* %1 to %struct.unop*
  %op_first = getelementptr inbounds %struct.unop, %struct.unop* %2, i32 0, i32 7
  %3 = load %struct.op*, %struct.op** %op_first, align 8
  %op_sibling = getelementptr inbounds %struct.op, %struct.op* %3, i32 0, i32 1
  %4 = load %struct.op*, %struct.op** %op_sibling, align 8
  %add.ptr = getelementptr inbounds %struct.op, %struct.op* %4, i64 0
  store %struct.op* %add.ptr, %struct.op** %kid, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %sw.bb
  %5 = load %struct.op*, %struct.op** %kid, align 8
  %tobool = icmp ne %struct.op* %5, null
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %6 = load %struct.op*, %struct.op** %kid, align 8
  %7 = load i32, i32* %type.addr, align 4
  call void @S_lvref(%struct.op* %6, i32 %7)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %8 = load %struct.op*, %struct.op** %kid, align 8
  %op_sibling1 = getelementptr inbounds %struct.op, %struct.op* %8, i32 0, i32 1
  %9 = load %struct.op*, %struct.op** %op_sibling1, align 8
  %add.ptr2 = getelementptr inbounds %struct.op, %struct.op* %9, i64 0
  store %struct.op* %add.ptr2, %struct.op** %kid, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %sw.bb3

sw.bb3:                                           ; preds = %entry, %for.end
  br label %if.end241

sw.bb4:                                           ; preds = %entry
  %10 = load %struct.op*, %struct.op** %o.addr, align 8
  %11 = bitcast %struct.op* %10 to %struct.unop*
  %op_first5 = getelementptr inbounds %struct.unop, %struct.unop* %11, i32 0, i32 7
  %12 = load %struct.op*, %struct.op** %op_first5, align 8
  %op_type6 = getelementptr inbounds %struct.op, %struct.op* %12, i32 0, i32 4
  %bf.load7 = load i16, i16* %op_type6, align 8
  %bf.clear8 = and i16 %bf.load7, 511
  %bf.cast9 = zext i16 %bf.clear8 to i32
  %cmp = icmp ne i32 %bf.cast9, 7
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %sw.bb4
  br label %badref

if.end:                                           ; preds = %sw.bb4
  %13 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %13, i32 0, i32 5
  %14 = load i8, i8* %op_flags, align 2
  %conv = zext i8 %14 to i32
  %or = or i32 %conv, 64
  %conv10 = trunc i32 %or to i8
  store i8 %conv10, i8* %op_flags, align 2
  %15 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_flags11 = getelementptr inbounds %struct.op, %struct.op* %15, i32 0, i32 5
  %16 = load i8, i8* %op_flags11, align 2
  %conv12 = zext i8 %16 to i32
  %and = and i32 %conv12, 8
  %tobool13 = icmp ne i32 %and, 0
  br i1 %tobool13, label %if.then14, label %if.end32

if.then14:                                        ; preds = %if.end
  %17 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_private = getelementptr inbounds %struct.op, %struct.op* %17, i32 0, i32 6
  %18 = load i8, i8* %op_private, align 1
  %conv15 = zext i8 %18 to i32
  %and16 = and i32 %conv15, 128
  %tobool17 = icmp ne i32 %and16, 0
  br i1 %tobool17, label %if.then18, label %if.end20

if.then18:                                        ; preds = %if.then14
  %call = call i8* (i8*, ...) @Perl_form(i8* getelementptr inbounds ([75 x i8], [75 x i8]* @.str.170, i64 0, i64 0))
  %call19 = call i32 @Perl_yyerror(i8* %call)
  br label %if.end241

if.end20:                                         ; preds = %if.then14
  br label %slurpy

slurpy:                                           ; preds = %if.then130, %if.end20
  br label %do.body

do.body:                                          ; preds = %slurpy
  %19 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type21 = getelementptr inbounds %struct.op, %struct.op* %19, i32 0, i32 4
  %bf.load22 = load i16, i16* %op_type21, align 8
  %bf.clear23 = and i16 %bf.load22, -512
  %bf.set = or i16 %bf.clear23, 394
  store i16 %bf.set, i16* %op_type21, align 8
  %20 = load %struct.op* ()*, %struct.op* ()** getelementptr inbounds ([0 x %struct.op* ()*], [0 x %struct.op* ()*]* @PL_ppaddr, i64 0, i64 394), align 8
  %21 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_ppaddr = getelementptr inbounds %struct.op, %struct.op* %21, i32 0, i32 2
  store %struct.op* ()* %20, %struct.op* ()** %op_ppaddr, align 8
  br label %do.end

do.end:                                           ; preds = %do.body
  %22 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_private24 = getelementptr inbounds %struct.op, %struct.op* %22, i32 0, i32 6
  %23 = load i8, i8* %op_private24, align 1
  %conv25 = zext i8 %23 to i32
  %and26 = and i32 %conv25, 192
  %conv27 = trunc i32 %and26 to i8
  store i8 %conv27, i8* %op_private24, align 1
  %24 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_flags28 = getelementptr inbounds %struct.op, %struct.op* %24, i32 0, i32 5
  %25 = load i8, i8* %op_flags28, align 2
  %conv29 = zext i8 %25 to i32
  %or30 = or i32 %conv29, 48
  %conv31 = trunc i32 %or30 to i8
  store i8 %conv31, i8* %op_flags28, align 2
  br label %if.end241

if.end32:                                         ; preds = %if.end
  %26 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_private33 = getelementptr inbounds %struct.op, %struct.op* %26, i32 0, i32 6
  %27 = load i8, i8* %op_private33, align 1
  %conv34 = zext i8 %27 to i32
  %or35 = or i32 %conv34, 16
  %conv36 = trunc i32 %or35 to i8
  store i8 %conv36, i8* %op_private33, align 1
  br label %checkgv

sw.bb37:                                          ; preds = %entry
  %28 = load %struct.op*, %struct.op** %o.addr, align 8
  %29 = bitcast %struct.op* %28 to %struct.unop*
  %op_first38 = getelementptr inbounds %struct.unop, %struct.unop* %29, i32 0, i32 7
  %30 = load %struct.op*, %struct.op** %op_first38, align 8
  store %struct.op* %30, %struct.op** %kid, align 8
  %31 = load %struct.op*, %struct.op** %kid, align 8
  %op_type39 = getelementptr inbounds %struct.op, %struct.op* %31, i32 0, i32 4
  %bf.load40 = load i16, i16* %op_type39, align 8
  %bf.clear41 = and i16 %bf.load40, 511
  %bf.cast42 = zext i16 %bf.clear41 to i32
  %cmp43 = icmp eq i32 %bf.cast42, 0
  br i1 %cmp43, label %if.then45, label %if.end50

if.then45:                                        ; preds = %sw.bb37
  %32 = load %struct.op*, %struct.op** %kid, align 8
  %33 = bitcast %struct.op* %32 to %struct.unop*
  %op_first46 = getelementptr inbounds %struct.unop, %struct.unop* %33, i32 0, i32 7
  %34 = load %struct.op*, %struct.op** %op_first46, align 8
  %op_sibling47 = getelementptr inbounds %struct.op, %struct.op* %34, i32 0, i32 1
  %35 = load %struct.op*, %struct.op** %op_sibling47, align 8
  %add.ptr48 = getelementptr inbounds %struct.op, %struct.op* %35, i64 0
  %36 = bitcast %struct.op* %add.ptr48 to %struct.unop*
  %op_first49 = getelementptr inbounds %struct.unop, %struct.unop* %36, i32 0, i32 7
  %37 = load %struct.op*, %struct.op** %op_first49, align 8
  store %struct.op* %37, %struct.op** %kid, align 8
  br label %if.end50

if.end50:                                         ; preds = %if.then45, %sw.bb37
  %38 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_private51 = getelementptr inbounds %struct.op, %struct.op* %38, i32 0, i32 6
  store i8 48, i8* %op_private51, align 1
  %39 = load %struct.op*, %struct.op** %kid, align 8
  %op_type52 = getelementptr inbounds %struct.op, %struct.op* %39, i32 0, i32 4
  %bf.load53 = load i16, i16* %op_type52, align 8
  %bf.clear54 = and i16 %bf.load53, 511
  %bf.cast55 = zext i16 %bf.clear54 to i32
  %cmp56 = icmp eq i32 %bf.cast55, 7
  br i1 %cmp56, label %if.then58, label %if.else

if.then58:                                        ; preds = %if.end50
  %40 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_flags59 = getelementptr inbounds %struct.op, %struct.op* %40, i32 0, i32 5
  %41 = load i8, i8* %op_flags59, align 2
  %conv60 = zext i8 %41 to i32
  %or61 = or i32 %conv60, 64
  %conv62 = trunc i32 %or61 to i8
  store i8 %conv62, i8* %op_flags59, align 2
  br label %if.end80

if.else:                                          ; preds = %if.end50
  %42 = load %struct.op*, %struct.op** %kid, align 8
  %op_type63 = getelementptr inbounds %struct.op, %struct.op* %42, i32 0, i32 4
  %bf.load64 = load i16, i16* %op_type63, align 8
  %bf.clear65 = and i16 %bf.load64, 511
  %bf.cast66 = zext i16 %bf.clear65 to i32
  %cmp67 = icmp eq i32 %bf.cast66, 387
  br i1 %cmp67, label %if.then69, label %if.else78

if.then69:                                        ; preds = %if.else
  %43 = load %struct.op*, %struct.op** %kid, align 8
  %op_targ = getelementptr inbounds %struct.op, %struct.op* %43, i32 0, i32 3
  %44 = load i64, i64* %op_targ, align 8
  %45 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_targ70 = getelementptr inbounds %struct.op, %struct.op* %45, i32 0, i32 3
  store i64 %44, i64* %op_targ70, align 8
  %46 = load %struct.op*, %struct.op** %kid, align 8
  %op_targ71 = getelementptr inbounds %struct.op, %struct.op* %46, i32 0, i32 3
  store i64 0, i64* %op_targ71, align 8
  %47 = load %struct.op*, %struct.op** %o.addr, align 8
  %48 = bitcast %struct.op* %47 to %struct.unop*
  %op_first72 = getelementptr inbounds %struct.unop, %struct.unop* %48, i32 0, i32 7
  %49 = load %struct.op*, %struct.op** %op_first72, align 8
  call void @Perl_op_free(%struct.op* %49)
  %50 = load %struct.op*, %struct.op** %o.addr, align 8
  %51 = bitcast %struct.op* %50 to %struct.unop*
  %op_first73 = getelementptr inbounds %struct.unop, %struct.unop* %51, i32 0, i32 7
  store %struct.op* null, %struct.op** %op_first73, align 8
  %52 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_flags74 = getelementptr inbounds %struct.op, %struct.op* %52, i32 0, i32 5
  %53 = load i8, i8* %op_flags74, align 2
  %conv75 = zext i8 %53 to i32
  %and76 = and i32 %conv75, -5
  %conv77 = trunc i32 %and76 to i8
  store i8 %conv77, i8* %op_flags74, align 2
  br label %if.end79

if.else78:                                        ; preds = %if.else
  br label %badref

if.end79:                                         ; preds = %if.then69
  br label %if.end80

if.end80:                                         ; preds = %if.end79, %if.then58
  br label %sw.epilog

sw.bb81:                                          ; preds = %entry
  %54 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_flags82 = getelementptr inbounds %struct.op, %struct.op* %54, i32 0, i32 5
  %55 = load i8, i8* %op_flags82, align 2
  %conv83 = zext i8 %55 to i32
  %and84 = and i32 %conv83, 8
  %tobool85 = icmp ne i32 %and84, 0
  br i1 %tobool85, label %if.then86, label %if.end89

if.then86:                                        ; preds = %sw.bb81
  br label %parenhash

parenhash:                                        ; preds = %if.then113, %if.then86
  %call87 = call i8* (i8*, ...) @Perl_form(i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.171, i64 0, i64 0))
  %call88 = call i32 @Perl_yyerror(i8* %call87)
  br label %if.end241

if.end89:                                         ; preds = %sw.bb81
  %56 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_private90 = getelementptr inbounds %struct.op, %struct.op* %56, i32 0, i32 6
  %57 = load i8, i8* %op_private90, align 1
  %conv91 = zext i8 %57 to i32
  %or92 = or i32 %conv91, 32
  %conv93 = trunc i32 %or92 to i8
  store i8 %conv93, i8* %op_private90, align 1
  br label %sw.bb94

sw.bb94:                                          ; preds = %entry, %if.end89
  br label %checkgv

checkgv:                                          ; preds = %sw.bb94, %if.end32
  %58 = load %struct.op*, %struct.op** %o.addr, align 8
  %59 = bitcast %struct.op* %58 to %struct.unop*
  %op_first95 = getelementptr inbounds %struct.unop, %struct.unop* %59, i32 0, i32 7
  %60 = load %struct.op*, %struct.op** %op_first95, align 8
  %op_type96 = getelementptr inbounds %struct.op, %struct.op* %60, i32 0, i32 4
  %bf.load97 = load i16, i16* %op_type96, align 8
  %bf.clear98 = and i16 %bf.load97, 511
  %bf.cast99 = zext i16 %bf.clear98 to i32
  %cmp100 = icmp ne i32 %bf.cast99, 7
  br i1 %cmp100, label %if.then102, label %if.end103

if.then102:                                       ; preds = %checkgv
  br label %badref

if.end103:                                        ; preds = %checkgv
  %61 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_flags104 = getelementptr inbounds %struct.op, %struct.op* %61, i32 0, i32 5
  %62 = load i8, i8* %op_flags104, align 2
  %conv105 = zext i8 %62 to i32
  %or106 = or i32 %conv105, 64
  %conv107 = trunc i32 %or106 to i8
  store i8 %conv107, i8* %op_flags104, align 2
  br label %sw.epilog

sw.bb108:                                         ; preds = %entry
  %63 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_flags109 = getelementptr inbounds %struct.op, %struct.op* %63, i32 0, i32 5
  %64 = load i8, i8* %op_flags109, align 2
  %conv110 = zext i8 %64 to i32
  %and111 = and i32 %conv110, 8
  %tobool112 = icmp ne i32 %and111, 0
  br i1 %tobool112, label %if.then113, label %if.end114

if.then113:                                       ; preds = %sw.bb108
  br label %parenhash

if.end114:                                        ; preds = %sw.bb108
  %65 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_private115 = getelementptr inbounds %struct.op, %struct.op* %65, i32 0, i32 6
  %66 = load i8, i8* %op_private115, align 1
  %conv116 = zext i8 %66 to i32
  %or117 = or i32 %conv116, 32
  %conv118 = trunc i32 %or117 to i8
  store i8 %conv118, i8* %op_private115, align 1
  br label %sw.bb119

sw.bb119:                                         ; preds = %entry, %if.end114
  %67 = load %struct.padnamelist*, %struct.padnamelist** @PL_comppad_name, align 8
  %xpadnl_alloc = getelementptr inbounds %struct.padnamelist, %struct.padnamelist* %67, i32 0, i32 1
  %68 = load %struct.padname**, %struct.padname*** %xpadnl_alloc, align 8
  %69 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_targ120 = getelementptr inbounds %struct.op, %struct.op* %69, i32 0, i32 3
  %70 = load i64, i64* %op_targ120, align 8
  %arrayidx = getelementptr inbounds %struct.padname*, %struct.padname** %68, i64 %70
  %71 = load %struct.padname*, %struct.padname** %arrayidx, align 8
  %xpadn_gen = getelementptr inbounds %struct.padname, %struct.padname* %71, i32 0, i32 6
  store i32 2147483647, i32* %xpadn_gen, align 4
  br label %sw.epilog

sw.bb121:                                         ; preds = %entry
  %72 = load %struct.padnamelist*, %struct.padnamelist** @PL_comppad_name, align 8
  %xpadnl_alloc122 = getelementptr inbounds %struct.padnamelist, %struct.padnamelist* %72, i32 0, i32 1
  %73 = load %struct.padname**, %struct.padname*** %xpadnl_alloc122, align 8
  %74 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_targ123 = getelementptr inbounds %struct.op, %struct.op* %74, i32 0, i32 3
  %75 = load i64, i64* %op_targ123, align 8
  %arrayidx124 = getelementptr inbounds %struct.padname*, %struct.padname** %73, i64 %75
  %76 = load %struct.padname*, %struct.padname** %arrayidx124, align 8
  %xpadn_gen125 = getelementptr inbounds %struct.padname, %struct.padname* %76, i32 0, i32 6
  store i32 2147483647, i32* %xpadn_gen125, align 4
  %77 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_flags126 = getelementptr inbounds %struct.op, %struct.op* %77, i32 0, i32 5
  %78 = load i8, i8* %op_flags126, align 2
  %conv127 = zext i8 %78 to i32
  %and128 = and i32 %conv127, 8
  %tobool129 = icmp ne i32 %and128, 0
  br i1 %tobool129, label %if.then130, label %if.end131

if.then130:                                       ; preds = %sw.bb121
  br label %slurpy

if.end131:                                        ; preds = %sw.bb121
  %79 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_private132 = getelementptr inbounds %struct.op, %struct.op* %79, i32 0, i32 6
  %80 = load i8, i8* %op_private132, align 1
  %conv133 = zext i8 %80 to i32
  %or134 = or i32 %conv133, 16
  %conv135 = trunc i32 %or134 to i8
  store i8 %conv135, i8* %op_private132, align 1
  br label %sw.epilog

sw.bb136:                                         ; preds = %entry, %entry
  %81 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_private137 = getelementptr inbounds %struct.op, %struct.op* %81, i32 0, i32 6
  %82 = load i8, i8* %op_private137, align 1
  %conv138 = zext i8 %82 to i32
  %or139 = or i32 %conv138, 4
  %conv140 = trunc i32 %or139 to i8
  store i8 %conv140, i8* %op_private137, align 1
  %83 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_flags141 = getelementptr inbounds %struct.op, %struct.op* %83, i32 0, i32 5
  %84 = load i8, i8* %op_flags141, align 2
  %conv142 = zext i8 %84 to i32
  %or143 = or i32 %conv142, 64
  %conv144 = trunc i32 %or143 to i8
  store i8 %conv144, i8* %op_flags141, align 2
  br label %sw.epilog

sw.bb145:                                         ; preds = %entry, %entry
  br label %do.body146

do.body146:                                       ; preds = %sw.bb145
  %85 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type147 = getelementptr inbounds %struct.op, %struct.op* %85, i32 0, i32 4
  %bf.load148 = load i16, i16* %op_type147, align 8
  %bf.clear149 = and i16 %bf.load148, -512
  %bf.set150 = or i16 %bf.clear149, 393
  store i16 %bf.set150, i16* %op_type147, align 8
  %86 = load %struct.op* ()*, %struct.op* ()** getelementptr inbounds ([0 x %struct.op* ()*], [0 x %struct.op* ()*]* @PL_ppaddr, i64 0, i64 393), align 8
  %87 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_ppaddr151 = getelementptr inbounds %struct.op, %struct.op* %87, i32 0, i32 2
  store %struct.op* ()* %86, %struct.op* ()** %op_ppaddr151, align 8
  br label %do.end152

do.end152:                                        ; preds = %do.body146
  %88 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_private153 = getelementptr inbounds %struct.op, %struct.op* %88, i32 0, i32 6
  %89 = load i8, i8* %op_private153, align 1
  %conv154 = zext i8 %89 to i32
  %and155 = and i32 %conv154, 132
  %conv156 = trunc i32 %and155 to i8
  store i8 %conv156, i8* %op_private153, align 1
  br label %if.end241

sw.bb157:                                         ; preds = %entry
  %90 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_flags158 = getelementptr inbounds %struct.op, %struct.op* %90, i32 0, i32 5
  %91 = load i8, i8* %op_flags158, align 2
  %conv159 = zext i8 %91 to i32
  %and160 = and i32 %conv159, 128
  %tobool161 = icmp ne i32 %and160, 0
  br i1 %tobool161, label %if.then162, label %if.else163

if.then162:                                       ; preds = %sw.bb157
  br label %badref

if.else163:                                       ; preds = %sw.bb157
  %92 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_flags164 = getelementptr inbounds %struct.op, %struct.op* %92, i32 0, i32 5
  %93 = load i8, i8* %op_flags164, align 2
  %conv165 = zext i8 %93 to i32
  %and166 = and i32 %conv165, 4
  %tobool167 = icmp ne i32 %and166, 0
  br i1 %tobool167, label %if.end169, label %if.then168

if.then168:                                       ; preds = %if.else163
  br label %if.end241

if.end169:                                        ; preds = %if.else163
  br label %if.end170

if.end170:                                        ; preds = %if.end169
  %94 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_targ171 = getelementptr inbounds %struct.op, %struct.op* %94, i32 0, i32 3
  %95 = load i64, i64* %op_targ171, align 8
  %cmp172 = icmp ne i64 %95, 158
  br i1 %cmp172, label %if.then174, label %if.end176

if.then174:                                       ; preds = %if.end170
  %96 = load %struct.op*, %struct.op** %o.addr, align 8
  %97 = bitcast %struct.op* %96 to %struct.binop*
  %op_first175 = getelementptr inbounds %struct.binop, %struct.binop* %97, i32 0, i32 7
  %98 = load %struct.op*, %struct.op** %op_first175, align 8
  %99 = load i32, i32* %type.addr, align 4
  call void @S_lvref(%struct.op* %98, i32 %99)
  br label %if.end241

if.end176:                                        ; preds = %if.end170
  br label %sw.bb177

sw.bb177:                                         ; preds = %entry, %if.end176
  %100 = load %struct.op*, %struct.op** %o.addr, align 8
  %101 = bitcast %struct.op* %100 to %struct.listop*
  %op_first178 = getelementptr inbounds %struct.listop, %struct.listop* %101, i32 0, i32 7
  %102 = load %struct.op*, %struct.op** %op_first178, align 8
  store %struct.op* %102, %struct.op** %kid, align 8
  br label %for.cond179

for.cond179:                                      ; preds = %for.inc182, %sw.bb177
  %103 = load %struct.op*, %struct.op** %kid, align 8
  %tobool180 = icmp ne %struct.op* %103, null
  br i1 %tobool180, label %for.body181, label %for.end185

for.body181:                                      ; preds = %for.cond179
  %104 = load %struct.op*, %struct.op** %kid, align 8
  %105 = load i32, i32* %type.addr, align 4
  call void @S_lvref(%struct.op* %104, i32 %105)
  br label %for.inc182

for.inc182:                                       ; preds = %for.body181
  %106 = load %struct.op*, %struct.op** %kid, align 8
  %op_sibling183 = getelementptr inbounds %struct.op, %struct.op* %106, i32 0, i32 1
  %107 = load %struct.op*, %struct.op** %op_sibling183, align 8
  %add.ptr184 = getelementptr inbounds %struct.op, %struct.op* %107, i64 0
  store %struct.op* %add.ptr184, %struct.op** %kid, align 8
  br label %for.cond179

for.end185:                                       ; preds = %for.cond179
  br label %if.end241

sw.bb186:                                         ; preds = %entry
  %108 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_flags187 = getelementptr inbounds %struct.op, %struct.op* %108, i32 0, i32 5
  %109 = load i8, i8* %op_flags187, align 2
  %conv188 = zext i8 %109 to i32
  %and189 = and i32 %conv188, 8
  %tobool190 = icmp ne i32 %and189, 0
  br i1 %tobool190, label %if.then191, label %if.end192

if.then191:                                       ; preds = %sw.bb186
  br label %if.end241

if.end192:                                        ; preds = %sw.bb186
  br label %sw.default

sw.default:                                       ; preds = %entry, %if.end192
  br label %badref

badref:                                           ; preds = %sw.default, %if.then162, %if.then102, %if.else78, %if.then
  %110 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type193 = getelementptr inbounds %struct.op, %struct.op* %110, i32 0, i32 4
  %bf.load194 = load i16, i16* %op_type193, align 8
  %bf.clear195 = and i16 %bf.load194, 511
  %bf.cast196 = zext i16 %bf.clear195 to i32
  %cmp197 = icmp eq i32 %bf.cast196, 0
  br i1 %cmp197, label %land.lhs.true, label %cond.false

land.lhs.true:                                    ; preds = %badref
  %111 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_flags199 = getelementptr inbounds %struct.op, %struct.op* %111, i32 0, i32 5
  %112 = load i8, i8* %op_flags199, align 2
  %conv200 = zext i8 %112 to i32
  %and201 = and i32 %conv200, 128
  %tobool202 = icmp ne i32 %and201, 0
  br i1 %tobool202, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true
  br label %cond.end217

cond.false:                                       ; preds = %land.lhs.true, %badref
  %113 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type203 = getelementptr inbounds %struct.op, %struct.op* %113, i32 0, i32 4
  %bf.load204 = load i16, i16* %op_type203, align 8
  %bf.clear205 = and i16 %bf.load204, 511
  %bf.cast206 = zext i16 %bf.clear205 to i32
  %cmp207 = icmp eq i32 %bf.cast206, 380
  br i1 %cmp207, label %cond.true209, label %cond.false211

cond.true209:                                     ; preds = %cond.false
  %114 = load %struct.op*, %struct.op** %o.addr, align 8
  %call210 = call i8* @Perl_custom_op_get_field(%struct.op* %114, i32 2)
  %coerce.dive = getelementptr inbounds %union.XOPRETANY, %union.XOPRETANY* %coerce, i32 0, i32 0
  store i8* %call210, i8** %coerce.dive, align 8
  %xop_desc = bitcast %union.XOPRETANY* %coerce to i8**
  %115 = load i8*, i8** %xop_desc, align 8
  br label %cond.end

cond.false211:                                    ; preds = %cond.false
  %116 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type212 = getelementptr inbounds %struct.op, %struct.op* %116, i32 0, i32 4
  %bf.load213 = load i16, i16* %op_type212, align 8
  %bf.clear214 = and i16 %bf.load213, 511
  %bf.cast215 = zext i16 %bf.clear214 to i32
  %idxprom = zext i32 %bf.cast215 to i64
  %arrayidx216 = getelementptr inbounds [0 x i8*], [0 x i8*]* @PL_op_desc, i64 0, i64 %idxprom
  %117 = load i8*, i8** %arrayidx216, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false211, %cond.true209
  %cond = phi i8* [ %115, %cond.true209 ], [ %117, %cond.false211 ]
  br label %cond.end217

cond.end217:                                      ; preds = %cond.end, %cond.true
  %cond218 = phi i8* [ getelementptr inbounds ([9 x i8], [9 x i8]* @.str.28, i64 0, i64 0), %cond.true ], [ %cond, %cond.end ]
  %118 = load i32, i32* %type.addr, align 4
  %idxprom219 = sext i32 %118 to i64
  %arrayidx220 = getelementptr inbounds [0 x i8*], [0 x i8*]* @PL_op_desc, i64 0, i64 %idxprom219
  %119 = load i8*, i8** %arrayidx220, align 8
  %call221 = call i8* (i8*, ...) @Perl_form(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.172, i64 0, i64 0), i8* %cond218, i8* %119)
  %call222 = call i32 @Perl_yyerror(i8* %call221)
  br label %sw.epilog

sw.epilog:                                        ; preds = %cond.end217, %sw.bb136, %if.end131, %sw.bb119, %if.end103, %if.end80
  br label %do.body223

do.body223:                                       ; preds = %sw.epilog
  %120 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type224 = getelementptr inbounds %struct.op, %struct.op* %120, i32 0, i32 4
  %bf.load225 = load i16, i16* %op_type224, align 8
  %bf.clear226 = and i16 %bf.load225, -512
  %bf.set227 = or i16 %bf.clear226, 392
  store i16 %bf.set227, i16* %op_type224, align 8
  %121 = load %struct.op* ()*, %struct.op* ()** getelementptr inbounds ([0 x %struct.op* ()*], [0 x %struct.op* ()*]* @PL_ppaddr, i64 0, i64 392), align 8
  %122 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_ppaddr228 = getelementptr inbounds %struct.op, %struct.op* %122, i32 0, i32 2
  store %struct.op* ()* %121, %struct.op* ()** %op_ppaddr228, align 8
  br label %do.end229

do.end229:                                        ; preds = %do.body223
  %123 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_private230 = getelementptr inbounds %struct.op, %struct.op* %123, i32 0, i32 6
  %124 = load i8, i8* %op_private230, align 1
  %conv231 = zext i8 %124 to i32
  %and232 = and i32 %conv231, 244
  %conv233 = trunc i32 %and232 to i8
  store i8 %conv233, i8* %op_private230, align 1
  %125 = load i32, i32* %type.addr, align 4
  %cmp234 = icmp eq i32 %125, 201
  br i1 %cmp234, label %if.then236, label %if.end241

if.then236:                                       ; preds = %do.end229
  %126 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_private237 = getelementptr inbounds %struct.op, %struct.op* %126, i32 0, i32 6
  %127 = load i8, i8* %op_private237, align 1
  %conv238 = zext i8 %127 to i32
  %or239 = or i32 %conv238, 8
  %conv240 = trunc i32 %or239 to i8
  store i8 %conv240, i8* %op_private237, align 1
  br label %if.end241

if.end241:                                        ; preds = %sw.bb3, %if.then18, %do.end, %parenhash, %do.end152, %if.then168, %if.then174, %for.end185, %if.then191, %if.then236, %do.end229
  ret void
}

declare dso_local zeroext i1 @Perl_feature_is_enabled(i8*, i64) #3

; Function Attrs: noinline nounwind uwtable
define dso_local void @Perl_apply_attrs_string(i8* %stashpv, %struct.cv* %cv, i8* %attrstr, i64 %len) #0 {
entry:
  %stashpv.addr = alloca i8*, align 8
  %cv.addr = alloca %struct.cv*, align 8
  %attrstr.addr = alloca i8*, align 8
  %len.addr = alloca i64, align 8
  %attrs = alloca %struct.op*, align 8
  %sstr = alloca i8*, align 8
  store i8* %stashpv, i8** %stashpv.addr, align 8
  store %struct.cv* %cv, %struct.cv** %cv.addr, align 8
  store i8* %attrstr, i8** %attrstr.addr, align 8
  store i64 %len, i64* %len.addr, align 8
  store %struct.op* null, %struct.op** %attrs, align 8
  %0 = load i64, i64* %len.addr, align 8
  %tobool = icmp ne i64 %0, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i8*, i8** %attrstr.addr, align 8
  %call = call i64 @strlen(i8* %1) #7
  store i64 %call, i64* %len.addr, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  br label %while.cond

while.cond:                                       ; preds = %if.end21, %if.end
  %2 = load i64, i64* %len.addr, align 8
  %tobool1 = icmp ne i64 %2, 0
  br i1 %tobool1, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %while.body
  %3 = load i8*, i8** %attrstr.addr, align 8
  %4 = load i8, i8* %3, align 1
  %idxprom = zext i8 %4 to i64
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @PL_charclass, i64 0, i64 %idxprom
  %5 = load i32, i32* %arrayidx, align 4
  %and = and i32 %5, 17408
  %cmp = icmp eq i32 %and, 17408
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %6 = load i64, i64* %len.addr, align 8
  %tobool2 = icmp ne i64 %6, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %7 = phi i1 [ false, %for.cond ], [ %tobool2, %land.rhs ]
  br i1 %7, label %for.body, label %for.end

for.body:                                         ; preds = %land.end
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %8 = load i64, i64* %len.addr, align 8
  %dec = add i64 %8, -1
  store i64 %dec, i64* %len.addr, align 8
  %9 = load i8*, i8** %attrstr.addr, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %9, i32 1
  store i8* %incdec.ptr, i8** %attrstr.addr, align 8
  br label %for.cond

for.end:                                          ; preds = %land.end
  %10 = load i64, i64* %len.addr, align 8
  %tobool3 = icmp ne i64 %10, 0
  br i1 %tobool3, label %if.then4, label %if.end21

if.then4:                                         ; preds = %for.end
  %11 = load i8*, i8** %attrstr.addr, align 8
  store i8* %11, i8** %sstr, align 8
  br label %for.cond5

for.cond5:                                        ; preds = %for.inc14, %if.then4
  %12 = load i8*, i8** %attrstr.addr, align 8
  %13 = load i8, i8* %12, align 1
  %idxprom6 = zext i8 %13 to i64
  %arrayidx7 = getelementptr inbounds [0 x i32], [0 x i32]* @PL_charclass, i64 0, i64 %idxprom6
  %14 = load i32, i32* %arrayidx7, align 4
  %and8 = and i32 %14, 17408
  %cmp9 = icmp eq i32 %and8, 17408
  br i1 %cmp9, label %land.end12, label %land.rhs10

land.rhs10:                                       ; preds = %for.cond5
  %15 = load i64, i64* %len.addr, align 8
  %tobool11 = icmp ne i64 %15, 0
  br label %land.end12

land.end12:                                       ; preds = %land.rhs10, %for.cond5
  %16 = phi i1 [ false, %for.cond5 ], [ %tobool11, %land.rhs10 ]
  br i1 %16, label %for.body13, label %for.end17

for.body13:                                       ; preds = %land.end12
  br label %for.inc14

for.inc14:                                        ; preds = %for.body13
  %17 = load i64, i64* %len.addr, align 8
  %dec15 = add i64 %17, -1
  store i64 %dec15, i64* %len.addr, align 8
  %18 = load i8*, i8** %attrstr.addr, align 8
  %incdec.ptr16 = getelementptr inbounds i8, i8* %18, i32 1
  store i8* %incdec.ptr16, i8** %attrstr.addr, align 8
  br label %for.cond5

for.end17:                                        ; preds = %land.end12
  %19 = load %struct.op*, %struct.op** %attrs, align 8
  %20 = load i8*, i8** %sstr, align 8
  %21 = load i8*, i8** %attrstr.addr, align 8
  %22 = load i8*, i8** %sstr, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %21 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %22 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %call18 = call %struct.sv* @Perl_newSVpvn(i8* %20, i64 %sub.ptr.sub)
  %call19 = call %struct.op* @Perl_newSVOP(i32 5, i32 0, %struct.sv* %call18)
  %call20 = call %struct.op* @Perl_op_append_elem(i32 158, %struct.op* %19, %struct.op* %call19)
  store %struct.op* %call20, %struct.op** %attrs, align 8
  br label %if.end21

if.end21:                                         ; preds = %for.end17, %for.end
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %call22 = call %struct.sv* @Perl_newSVpvn(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.36, i64 0, i64 0), i64 10)
  %23 = load i8*, i8** %stashpv.addr, align 8
  %call23 = call %struct.sv* @Perl_newSVpv(i8* %23, i64 0)
  %call24 = call %struct.op* @Perl_newSVOP(i32 5, i32 0, %struct.sv* %call23)
  %24 = load %struct.cv*, %struct.cv** %cv.addr, align 8
  %25 = bitcast %struct.cv* %24 to i8*
  %26 = bitcast i8* %25 to %struct.sv*
  %call25 = call %struct.sv* @Perl_newRV(%struct.sv* %26)
  %call26 = call %struct.op* @Perl_newSVOP(i32 5, i32 0, %struct.sv* %call25)
  %27 = load %struct.op*, %struct.op** %attrs, align 8
  %call27 = call %struct.op* @Perl_op_prepend_elem(i32 158, %struct.op* %call26, %struct.op* %27)
  %call28 = call %struct.op* @Perl_op_prepend_elem(i32 158, %struct.op* %call24, %struct.op* %call27)
  call void (i32, %struct.sv*, %struct.sv*, ...) @Perl_load_module(i32 4, %struct.sv* %call22, %struct.sv* null, %struct.op* %call28)
  ret void
}

; Function Attrs: nounwind readonly
declare dso_local i64 @strlen(i8*) #4

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_op_append_elem(i32 %type, %struct.op* %first, %struct.op* %last) #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %type.addr = alloca i32, align 4
  %first.addr = alloca %struct.op*, align 8
  %last.addr = alloca %struct.op*, align 8
  store i32 %type, i32* %type.addr, align 4
  store %struct.op* %first, %struct.op** %first.addr, align 8
  store %struct.op* %last, %struct.op** %last.addr, align 8
  %0 = load %struct.op*, %struct.op** %first.addr, align 8
  %tobool = icmp ne %struct.op* %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load %struct.op*, %struct.op** %last.addr, align 8
  store %struct.op* %1, %struct.op** %retval, align 8
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct.op*, %struct.op** %last.addr, align 8
  %tobool1 = icmp ne %struct.op* %2, null
  br i1 %tobool1, label %if.end3, label %if.then2

if.then2:                                         ; preds = %if.end
  %3 = load %struct.op*, %struct.op** %first.addr, align 8
  store %struct.op* %3, %struct.op** %retval, align 8
  br label %return

if.end3:                                          ; preds = %if.end
  %4 = load %struct.op*, %struct.op** %first.addr, align 8
  %op_type = getelementptr inbounds %struct.op, %struct.op* %4, i32 0, i32 4
  %bf.load = load i16, i16* %op_type, align 8
  %bf.clear = and i16 %bf.load, 511
  %bf.cast = zext i16 %bf.clear to i32
  %5 = load i32, i32* %type.addr, align 4
  %cmp = icmp ne i32 %bf.cast, %5
  br i1 %cmp, label %if.then6, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end3
  %6 = load i32, i32* %type.addr, align 4
  %cmp4 = icmp eq i32 %6, 158
  br i1 %cmp4, label %land.lhs.true, label %if.end7

land.lhs.true:                                    ; preds = %lor.lhs.false
  %7 = load %struct.op*, %struct.op** %first.addr, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %7, i32 0, i32 5
  %8 = load i8, i8* %op_flags, align 2
  %conv = zext i8 %8 to i32
  %and = and i32 %conv, 8
  %tobool5 = icmp ne i32 %and, 0
  br i1 %tobool5, label %if.then6, label %if.end7

if.then6:                                         ; preds = %land.lhs.true, %if.end3
  %9 = load i32, i32* %type.addr, align 4
  %10 = load %struct.op*, %struct.op** %first.addr, align 8
  %11 = load %struct.op*, %struct.op** %last.addr, align 8
  %call = call %struct.op* @Perl_newLISTOP(i32 %9, i32 0, %struct.op* %10, %struct.op* %11)
  store %struct.op* %call, %struct.op** %retval, align 8
  br label %return

if.end7:                                          ; preds = %land.lhs.true, %lor.lhs.false
  %12 = load %struct.op*, %struct.op** %first.addr, align 8
  %13 = load %struct.op*, %struct.op** %first.addr, align 8
  %14 = bitcast %struct.op* %13 to %struct.listop*
  %op_last = getelementptr inbounds %struct.listop, %struct.listop* %14, i32 0, i32 8
  %15 = load %struct.op*, %struct.op** %op_last, align 8
  %16 = load %struct.op*, %struct.op** %last.addr, align 8
  %call8 = call %struct.op* @Perl_op_sibling_splice(%struct.op* %12, %struct.op* %15, i32 0, %struct.op* %16)
  %17 = load %struct.op*, %struct.op** %first.addr, align 8
  %op_flags9 = getelementptr inbounds %struct.op, %struct.op* %17, i32 0, i32 5
  %18 = load i8, i8* %op_flags9, align 2
  %conv10 = zext i8 %18 to i32
  %or = or i32 %conv10, 4
  %conv11 = trunc i32 %or to i8
  store i8 %conv11, i8* %op_flags9, align 2
  %19 = load %struct.op*, %struct.op** %first.addr, align 8
  store %struct.op* %19, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %if.end7, %if.then6, %if.then2, %if.then
  %20 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %20
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_newSVOP(i32 %type, i32 %flags, %struct.sv* %sv) #0 {
entry:
  %type.addr = alloca i32, align 4
  %flags.addr = alloca i32, align 4
  %sv.addr = alloca %struct.sv*, align 8
  %svop = alloca %struct.svop*, align 8
  store i32 %type, i32* %type.addr, align 4
  store i32 %flags, i32* %flags.addr, align 4
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  %call = call i8* @Perl_Slab_Alloc(i64 48)
  %0 = bitcast i8* %call to %struct.svop*
  store %struct.svop* %0, %struct.svop** %svop, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %1 = load i32, i32* %type.addr, align 4
  %conv = trunc i32 %1 to i16
  %conv1 = zext i16 %conv to i32
  %2 = load %struct.svop*, %struct.svop** %svop, align 8
  %op_type = getelementptr inbounds %struct.svop, %struct.svop* %2, i32 0, i32 4
  %3 = trunc i32 %conv1 to i16
  %bf.load = load i16, i16* %op_type, align 8
  %bf.value = and i16 %3, 511
  %bf.clear = and i16 %bf.load, -512
  %bf.set = or i16 %bf.clear, %bf.value
  store i16 %bf.set, i16* %op_type, align 8
  %bf.result.cast = zext i16 %bf.value to i32
  %4 = load i32, i32* %type.addr, align 4
  %idxprom = sext i32 %4 to i64
  %arrayidx = getelementptr inbounds [0 x %struct.op* ()*], [0 x %struct.op* ()*]* @PL_ppaddr, i64 0, i64 %idxprom
  %5 = load %struct.op* ()*, %struct.op* ()** %arrayidx, align 8
  %6 = load %struct.svop*, %struct.svop** %svop, align 8
  %op_ppaddr = getelementptr inbounds %struct.svop, %struct.svop* %6, i32 0, i32 2
  store %struct.op* ()* %5, %struct.op* ()** %op_ppaddr, align 8
  br label %do.end

do.end:                                           ; preds = %do.body
  %7 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %8 = load %struct.svop*, %struct.svop** %svop, align 8
  %op_sv = getelementptr inbounds %struct.svop, %struct.svop* %8, i32 0, i32 7
  store %struct.sv* %7, %struct.sv** %op_sv, align 8
  %9 = load %struct.svop*, %struct.svop** %svop, align 8
  %10 = bitcast %struct.svop* %9 to %struct.op*
  %11 = load %struct.svop*, %struct.svop** %svop, align 8
  %op_next = getelementptr inbounds %struct.svop, %struct.svop* %11, i32 0, i32 0
  store %struct.op* %10, %struct.op** %op_next, align 8
  %12 = load i32, i32* %flags.addr, align 4
  %conv2 = trunc i32 %12 to i8
  %13 = load %struct.svop*, %struct.svop** %svop, align 8
  %op_flags = getelementptr inbounds %struct.svop, %struct.svop* %13, i32 0, i32 5
  store i8 %conv2, i8* %op_flags, align 2
  %14 = load i32, i32* %flags.addr, align 4
  %shr = ashr i32 %14, 8
  %or = or i32 0, %shr
  %conv3 = trunc i32 %or to i8
  %15 = load %struct.svop*, %struct.svop** %svop, align 8
  %op_private = getelementptr inbounds %struct.svop, %struct.svop* %15, i32 0, i32 6
  store i8 %conv3, i8* %op_private, align 1
  %16 = load i32, i32* %type.addr, align 4
  %idxprom4 = sext i32 %16 to i64
  %arrayidx5 = getelementptr inbounds [0 x i32], [0 x i32]* @PL_opargs, i64 0, i64 %idxprom4
  %17 = load i32, i32* %arrayidx5, align 4
  %and = and i32 %17, 4
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %do.end
  %18 = load %struct.svop*, %struct.svop** %svop, align 8
  %19 = bitcast %struct.svop* %18 to %struct.op*
  %call6 = call %struct.op* @Perl_scalar(%struct.op* %19)
  br label %if.end

if.end:                                           ; preds = %if.then, %do.end
  %20 = load i32, i32* %type.addr, align 4
  %idxprom7 = sext i32 %20 to i64
  %arrayidx8 = getelementptr inbounds [0 x i32], [0 x i32]* @PL_opargs, i64 0, i64 %idxprom7
  %21 = load i32, i32* %arrayidx8, align 4
  %and9 = and i32 %21, 8
  %tobool10 = icmp ne i32 %and9, 0
  br i1 %tobool10, label %if.then11, label %if.end13

if.then11:                                        ; preds = %if.end
  %22 = load i32, i32* %type.addr, align 4
  %call12 = call i64 @Perl_pad_alloc(i32 %22, i32 131072)
  %23 = load %struct.svop*, %struct.svop** %svop, align 8
  %op_targ = getelementptr inbounds %struct.svop, %struct.svop* %23, i32 0, i32 3
  store i64 %call12, i64* %op_targ, align 8
  br label %if.end13

if.end13:                                         ; preds = %if.then11, %if.end
  %24 = load i8*, i8** @PL_op_mask, align 8
  %tobool14 = icmp ne i8* %24, null
  br i1 %tobool14, label %land.lhs.true, label %cond.false

land.lhs.true:                                    ; preds = %if.end13
  %25 = load i8*, i8** @PL_op_mask, align 8
  %26 = load i32, i32* %type.addr, align 4
  %idxprom15 = sext i32 %26 to i64
  %arrayidx16 = getelementptr inbounds i8, i8* %25, i64 %idxprom15
  %27 = load i8, i8* %arrayidx16, align 1
  %conv17 = sext i8 %27 to i32
  %tobool18 = icmp ne i32 %conv17, 0
  br i1 %tobool18, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true
  %28 = load %struct.svop*, %struct.svop** %svop, align 8
  %29 = bitcast %struct.svop* %28 to %struct.op*
  call void @Perl_op_free(%struct.op* %29)
  %30 = load i32, i32* %type.addr, align 4
  %idxprom19 = sext i32 %30 to i64
  %arrayidx20 = getelementptr inbounds [0 x i8*], [0 x i8*]* @PL_op_desc, i64 0, i64 %idxprom19
  %31 = load i8*, i8** %arrayidx20, align 8
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.49, i64 0, i64 0), i8* %31)
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true, %if.end13
  %32 = load i32, i32* %type.addr, align 4
  %idxprom21 = sext i32 %32 to i64
  %arrayidx22 = getelementptr inbounds [0 x %struct.op* (%struct.op*)*], [0 x %struct.op* (%struct.op*)*]* @PL_check, i64 0, i64 %idxprom21
  %33 = load %struct.op* (%struct.op*)*, %struct.op* (%struct.op*)** %arrayidx22, align 8
  %34 = load %struct.svop*, %struct.svop** %svop, align 8
  %35 = bitcast %struct.svop* %34 to %struct.op*
  %call23 = call %struct.op* %33(%struct.op* %35)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.op* [ null, %cond.true ], [ %call23, %cond.false ]
  ret %struct.op* %cond
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @Perl_load_module(i32 %flags, %struct.sv* %name, %struct.sv* %ver, ...) #0 {
entry:
  %flags.addr = alloca i32, align 4
  %name.addr = alloca %struct.sv*, align 8
  %ver.addr = alloca %struct.sv*, align 8
  %args = alloca [1 x %struct.__va_list_tag], align 16
  store i32 %flags, i32* %flags.addr, align 4
  store %struct.sv* %name, %struct.sv** %name.addr, align 8
  store %struct.sv* %ver, %struct.sv** %ver.addr, align 8
  %arraydecay = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %args, i64 0, i64 0
  %arraydecay1 = bitcast %struct.__va_list_tag* %arraydecay to i8*
  call void @llvm.va_start(i8* %arraydecay1)
  %0 = load i32, i32* %flags.addr, align 4
  %1 = load %struct.sv*, %struct.sv** %name.addr, align 8
  %2 = load %struct.sv*, %struct.sv** %ver.addr, align 8
  call void @Perl_vload_module(i32 %0, %struct.sv* %1, %struct.sv* %2, [1 x %struct.__va_list_tag]* %args)
  %arraydecay2 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %args, i64 0, i64 0
  %arraydecay23 = bitcast %struct.__va_list_tag* %arraydecay2 to i8*
  call void @llvm.va_end(i8* %arraydecay23)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_op_prepend_elem(i32 %type, %struct.op* %first, %struct.op* %last) #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %type.addr = alloca i32, align 4
  %first.addr = alloca %struct.op*, align 8
  %last.addr = alloca %struct.op*, align 8
  store i32 %type, i32* %type.addr, align 4
  store %struct.op* %first, %struct.op** %first.addr, align 8
  store %struct.op* %last, %struct.op** %last.addr, align 8
  %0 = load %struct.op*, %struct.op** %first.addr, align 8
  %tobool = icmp ne %struct.op* %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load %struct.op*, %struct.op** %last.addr, align 8
  store %struct.op* %1, %struct.op** %retval, align 8
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct.op*, %struct.op** %last.addr, align 8
  %tobool1 = icmp ne %struct.op* %2, null
  br i1 %tobool1, label %if.end3, label %if.then2

if.then2:                                         ; preds = %if.end
  %3 = load %struct.op*, %struct.op** %first.addr, align 8
  store %struct.op* %3, %struct.op** %retval, align 8
  br label %return

if.end3:                                          ; preds = %if.end
  %4 = load %struct.op*, %struct.op** %last.addr, align 8
  %op_type = getelementptr inbounds %struct.op, %struct.op* %4, i32 0, i32 4
  %bf.load = load i16, i16* %op_type, align 8
  %bf.clear = and i16 %bf.load, 511
  %bf.cast = zext i16 %bf.clear to i32
  %5 = load i32, i32* %type.addr, align 4
  %cmp = icmp eq i32 %bf.cast, %5
  br i1 %cmp, label %if.then4, label %if.end19

if.then4:                                         ; preds = %if.end3
  %6 = load i32, i32* %type.addr, align 4
  %cmp5 = icmp eq i32 %6, 158
  br i1 %cmp5, label %if.then6, label %if.else

if.then6:                                         ; preds = %if.then4
  %7 = load %struct.op*, %struct.op** %last.addr, align 8
  %8 = load %struct.op*, %struct.op** %last.addr, align 8
  %9 = bitcast %struct.op* %8 to %struct.listop*
  %op_first = getelementptr inbounds %struct.listop, %struct.listop* %9, i32 0, i32 7
  %10 = load %struct.op*, %struct.op** %op_first, align 8
  %11 = load %struct.op*, %struct.op** %first.addr, align 8
  %call = call %struct.op* @Perl_op_sibling_splice(%struct.op* %7, %struct.op* %10, i32 0, %struct.op* %11)
  %12 = load %struct.op*, %struct.op** %first.addr, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %12, i32 0, i32 5
  %13 = load i8, i8* %op_flags, align 2
  %conv = zext i8 %13 to i32
  %and = and i32 %conv, 8
  %tobool7 = icmp ne i32 %and, 0
  br i1 %tobool7, label %if.end13, label %if.then8

if.then8:                                         ; preds = %if.then6
  %14 = load %struct.op*, %struct.op** %last.addr, align 8
  %op_flags9 = getelementptr inbounds %struct.op, %struct.op* %14, i32 0, i32 5
  %15 = load i8, i8* %op_flags9, align 2
  %conv10 = zext i8 %15 to i32
  %and11 = and i32 %conv10, -9
  %conv12 = trunc i32 %and11 to i8
  store i8 %conv12, i8* %op_flags9, align 2
  br label %if.end13

if.end13:                                         ; preds = %if.then8, %if.then6
  br label %if.end15

if.else:                                          ; preds = %if.then4
  %16 = load %struct.op*, %struct.op** %last.addr, align 8
  %17 = load %struct.op*, %struct.op** %first.addr, align 8
  %call14 = call %struct.op* @Perl_op_sibling_splice(%struct.op* %16, %struct.op* null, i32 0, %struct.op* %17)
  br label %if.end15

if.end15:                                         ; preds = %if.else, %if.end13
  %18 = load %struct.op*, %struct.op** %last.addr, align 8
  %op_flags16 = getelementptr inbounds %struct.op, %struct.op* %18, i32 0, i32 5
  %19 = load i8, i8* %op_flags16, align 2
  %conv17 = zext i8 %19 to i32
  %or = or i32 %conv17, 4
  %conv18 = trunc i32 %or to i8
  store i8 %conv18, i8* %op_flags16, align 2
  %20 = load %struct.op*, %struct.op** %last.addr, align 8
  store %struct.op* %20, %struct.op** %retval, align 8
  br label %return

if.end19:                                         ; preds = %if.end3
  %21 = load i32, i32* %type.addr, align 4
  %22 = load %struct.op*, %struct.op** %first.addr, align 8
  %23 = load %struct.op*, %struct.op** %last.addr, align 8
  %call20 = call %struct.op* @Perl_newLISTOP(i32 %21, i32 0, %struct.op* %22, %struct.op* %23)
  store %struct.op* %call20, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %if.end19, %if.end15, %if.then2, %if.then
  %24 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %24
}

declare dso_local %struct.sv* @Perl_newSVpv(i8*, i64) #3

declare dso_local %struct.sv* @Perl_newRV(%struct.sv*) #3

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_my_attrs(%struct.op* %o, %struct.op* %attrs) #0 {
entry:
  %o.addr = alloca %struct.op*, align 8
  %attrs.addr = alloca %struct.op*, align 8
  %rops = alloca %struct.op*, align 8
  %maybe_scalar = alloca i32, align 4
  %_o = alloca %struct.op*, align 8
  %lrops = alloca %struct.listop*, align 8
  %pushmark = alloca %struct.op*, align 8
  store %struct.op* %o, %struct.op** %o.addr, align 8
  store %struct.op* %attrs, %struct.op** %attrs.addr, align 8
  store i32 0, i32* %maybe_scalar, align 4
  store i32 1, i32* %maybe_scalar, align 4
  %0 = load %struct.op*, %struct.op** %attrs.addr, align 8
  %tobool = icmp ne %struct.op* %0, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %do.body

do.body:                                          ; preds = %if.then
  %1 = load %struct.op*, %struct.op** %attrs.addr, align 8
  store %struct.op* %1, %struct.op** %_o, align 8
  %2 = load %struct.op*, %struct.op** %_o, align 8
  %op_savefree = getelementptr inbounds %struct.op, %struct.op* %2, i32 0, i32 4
  %bf.load = load i16, i16* %op_savefree, align 8
  %bf.clear = and i16 %bf.load, -2049
  %bf.set = or i16 %bf.clear, 2048
  store i16 %bf.set, i16* %op_savefree, align 8
  %3 = load %struct.op*, %struct.op** %_o, align 8
  %4 = bitcast %struct.op* %3 to i8*
  call void @Perl_save_pushptr(i8* %4, i32 9)
  br label %do.end

do.end:                                           ; preds = %do.body
  br label %if.end

if.end:                                           ; preds = %do.end, %entry
  store %struct.op* null, %struct.op** %rops, align 8
  %5 = load %struct.op*, %struct.op** %o.addr, align 8
  %6 = load %struct.op*, %struct.op** %attrs.addr, align 8
  %call = call %struct.op* @S_my_kid(%struct.op* %5, %struct.op* %6, %struct.op** %rops)
  store %struct.op* %call, %struct.op** %o.addr, align 8
  %7 = load %struct.op*, %struct.op** %rops, align 8
  %tobool1 = icmp ne %struct.op* %7, null
  br i1 %tobool1, label %if.then2, label %if.end32

if.then2:                                         ; preds = %if.end
  %8 = load i32, i32* %maybe_scalar, align 4
  %tobool3 = icmp ne i32 %8, 0
  br i1 %tobool3, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %if.then2
  %9 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type = getelementptr inbounds %struct.op, %struct.op* %9, i32 0, i32 4
  %bf.load4 = load i16, i16* %op_type, align 8
  %bf.clear5 = and i16 %bf.load4, 511
  %bf.cast = zext i16 %bf.clear5 to i32
  %cmp = icmp eq i32 %bf.cast, 9
  br i1 %cmp, label %if.then6, label %if.else

if.then6:                                         ; preds = %land.lhs.true
  %10 = load %struct.op*, %struct.op** %rops, align 8
  %11 = load %struct.op*, %struct.op** %o.addr, align 8
  %call7 = call %struct.op* @Perl_op_append_list(i32 158, %struct.op* %10, %struct.op* %11)
  %call8 = call %struct.op* @Perl_scalar(%struct.op* %call7)
  store %struct.op* %call8, %struct.op** %o.addr, align 8
  %12 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_private = getelementptr inbounds %struct.op, %struct.op* %12, i32 0, i32 6
  %13 = load i8, i8* %op_private, align 1
  %conv = zext i8 %13 to i32
  %or = or i32 %conv, 128
  %conv9 = trunc i32 %or to i8
  store i8 %conv9, i8* %op_private, align 1
  br label %if.end31

if.else:                                          ; preds = %land.lhs.true, %if.then2
  %14 = load %struct.op*, %struct.op** %rops, align 8
  %15 = bitcast %struct.op* %14 to %struct.listop*
  store %struct.listop* %15, %struct.listop** %lrops, align 8
  %16 = load %struct.op*, %struct.op** %rops, align 8
  %op_type10 = getelementptr inbounds %struct.op, %struct.op* %16, i32 0, i32 4
  %bf.load11 = load i16, i16* %op_type10, align 8
  %bf.clear12 = and i16 %bf.load11, 511
  %bf.cast13 = zext i16 %bf.clear12 to i32
  %cmp14 = icmp eq i32 %bf.cast13, 158
  br i1 %cmp14, label %land.lhs.true16, label %if.end29

land.lhs.true16:                                  ; preds = %if.else
  %17 = load %struct.listop*, %struct.listop** %lrops, align 8
  %op_first = getelementptr inbounds %struct.listop, %struct.listop* %17, i32 0, i32 7
  %18 = load %struct.op*, %struct.op** %op_first, align 8
  %tobool17 = icmp ne %struct.op* %18, null
  br i1 %tobool17, label %land.lhs.true18, label %if.end29

land.lhs.true18:                                  ; preds = %land.lhs.true16
  %19 = load %struct.listop*, %struct.listop** %lrops, align 8
  %op_first19 = getelementptr inbounds %struct.listop, %struct.listop* %19, i32 0, i32 7
  %20 = load %struct.op*, %struct.op** %op_first19, align 8
  %op_type20 = getelementptr inbounds %struct.op, %struct.op* %20, i32 0, i32 4
  %bf.load21 = load i16, i16* %op_type20, align 8
  %bf.clear22 = and i16 %bf.load21, 511
  %bf.cast23 = zext i16 %bf.clear22 to i32
  %cmp24 = icmp eq i32 %bf.cast23, 3
  br i1 %cmp24, label %if.then26, label %if.end29

if.then26:                                        ; preds = %land.lhs.true18
  %21 = load %struct.listop*, %struct.listop** %lrops, align 8
  %op_first27 = getelementptr inbounds %struct.listop, %struct.listop* %21, i32 0, i32 7
  %22 = load %struct.op*, %struct.op** %op_first27, align 8
  store %struct.op* %22, %struct.op** %pushmark, align 8
  %23 = load %struct.op*, %struct.op** %rops, align 8
  %call28 = call %struct.op* @Perl_op_sibling_splice(%struct.op* %23, %struct.op* null, i32 1, %struct.op* null)
  %24 = load %struct.op*, %struct.op** %pushmark, align 8
  call void @Perl_op_free(%struct.op* %24)
  br label %if.end29

if.end29:                                         ; preds = %if.then26, %land.lhs.true18, %land.lhs.true16, %if.else
  %25 = load %struct.op*, %struct.op** %o.addr, align 8
  %26 = load %struct.op*, %struct.op** %rops, align 8
  %call30 = call %struct.op* @Perl_op_append_list(i32 158, %struct.op* %25, %struct.op* %26)
  store %struct.op* %call30, %struct.op** %o.addr, align 8
  br label %if.end31

if.end31:                                         ; preds = %if.end29, %if.then6
  br label %if.end32

if.end32:                                         ; preds = %if.end31, %if.end
  %27 = load %struct.yy_parser*, %struct.yy_parser** @PL_parser, align 8
  %in_my = getelementptr inbounds %struct.yy_parser, %struct.yy_parser* %27, i32 0, i32 42
  store i16 0, i16* %in_my, align 4
  %28 = load %struct.yy_parser*, %struct.yy_parser** @PL_parser, align 8
  %in_my_stash = getelementptr inbounds %struct.yy_parser, %struct.yy_parser* %28, i32 0, i32 45
  store %struct.hv* null, %struct.hv** %in_my_stash, align 8
  %29 = load %struct.op*, %struct.op** %o.addr, align 8
  ret %struct.op* %29
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.op* @S_my_kid(%struct.op* %o, %struct.op* %attrs, %struct.op** %imopsp) #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %o.addr = alloca %struct.op*, align 8
  %attrs.addr = alloca %struct.op*, align 8
  %imopsp.addr = alloca %struct.op**, align 8
  %type = alloca i32, align 4
  %stately = alloca i8, align 1
  %kid = alloca %struct.op*, align 8
  %gv = alloca %struct.gv*, align 8
  %stash = alloca %struct.hv*, align 8
  store %struct.op* %o, %struct.op** %o.addr, align 8
  store %struct.op* %attrs, %struct.op** %attrs.addr, align 8
  store %struct.op** %imopsp, %struct.op*** %imopsp.addr, align 8
  %0 = load %struct.yy_parser*, %struct.yy_parser** @PL_parser, align 8
  %tobool = icmp ne %struct.yy_parser* %0, null
  br i1 %tobool, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %entry
  %1 = load %struct.yy_parser*, %struct.yy_parser** @PL_parser, align 8
  %in_my = getelementptr inbounds %struct.yy_parser, %struct.yy_parser* %1, i32 0, i32 42
  %2 = load i16, i16* %in_my, align 4
  %conv = zext i16 %2 to i32
  %cmp = icmp eq i32 %conv, 212
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %3 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ]
  %frombool = zext i1 %3 to i8
  store i8 %frombool, i8* %stately, align 1
  %4 = load %struct.op*, %struct.op** %o.addr, align 8
  %tobool2 = icmp ne %struct.op* %4, null
  br i1 %tobool2, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %land.end
  %5 = load %struct.yy_parser*, %struct.yy_parser** @PL_parser, align 8
  %tobool3 = icmp ne %struct.yy_parser* %5, null
  br i1 %tobool3, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %lor.lhs.false
  %6 = load %struct.yy_parser*, %struct.yy_parser** @PL_parser, align 8
  %error_count = getelementptr inbounds %struct.yy_parser, %struct.yy_parser* %6, i32 0, i32 44
  %7 = load i8, i8* %error_count, align 1
  %conv4 = zext i8 %7 to i32
  %tobool5 = icmp ne i32 %conv4, 0
  br i1 %tobool5, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true, %land.end
  %8 = load %struct.op*, %struct.op** %o.addr, align 8
  store %struct.op* %8, %struct.op** %retval, align 8
  br label %return

if.end:                                           ; preds = %land.lhs.true, %lor.lhs.false
  %9 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type = getelementptr inbounds %struct.op, %struct.op* %9, i32 0, i32 4
  %bf.load = load i16, i16* %op_type, align 8
  %bf.clear = and i16 %bf.load, 511
  %bf.cast = zext i16 %bf.clear to i32
  store i32 %bf.cast, i32* %type, align 4
  %10 = load i32, i32* %type, align 4
  %cmp6 = icmp eq i32 %10, 158
  br i1 %cmp6, label %if.then8, label %if.else

if.then8:                                         ; preds = %if.end
  %11 = load %struct.op*, %struct.op** %o.addr, align 8
  %12 = bitcast %struct.op* %11 to %struct.listop*
  %op_first = getelementptr inbounds %struct.listop, %struct.listop* %12, i32 0, i32 7
  %13 = load %struct.op*, %struct.op** %op_first, align 8
  store %struct.op* %13, %struct.op** %kid, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then8
  %14 = load %struct.op*, %struct.op** %kid, align 8
  %tobool9 = icmp ne %struct.op* %14, null
  br i1 %tobool9, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %15 = load %struct.op*, %struct.op** %kid, align 8
  %16 = load %struct.op*, %struct.op** %attrs.addr, align 8
  %17 = load %struct.op**, %struct.op*** %imopsp.addr, align 8
  %call = call %struct.op* @S_my_kid(%struct.op* %15, %struct.op* %16, %struct.op** %17)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %18 = load %struct.op*, %struct.op** %kid, align 8
  %op_sibling = getelementptr inbounds %struct.op, %struct.op* %18, i32 0, i32 1
  %19 = load %struct.op*, %struct.op** %op_sibling, align 8
  %add.ptr = getelementptr inbounds %struct.op, %struct.op* %19, i64 0
  store %struct.op* %add.ptr, %struct.op** %kid, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %20 = load %struct.op*, %struct.op** %o.addr, align 8
  store %struct.op* %20, %struct.op** %retval, align 8
  br label %return

if.else:                                          ; preds = %if.end
  %21 = load i32, i32* %type, align 4
  %cmp10 = icmp eq i32 %21, 44
  br i1 %cmp10, label %if.then15, label %lor.lhs.false12

lor.lhs.false12:                                  ; preds = %if.else
  %22 = load i32, i32* %type, align 4
  %cmp13 = icmp eq i32 %22, 1
  br i1 %cmp13, label %if.then15, label %if.else16

if.then15:                                        ; preds = %lor.lhs.false12, %if.else
  %23 = load %struct.op*, %struct.op** %o.addr, align 8
  store %struct.op* %23, %struct.op** %retval, align 8
  br label %return

if.else16:                                        ; preds = %lor.lhs.false12
  %24 = load i32, i32* %type, align 4
  %cmp17 = icmp eq i32 %24, 15
  br i1 %cmp17, label %if.then25, label %lor.lhs.false19

lor.lhs.false19:                                  ; preds = %if.else16
  %25 = load i32, i32* %type, align 4
  %cmp20 = icmp eq i32 %25, 135
  br i1 %cmp20, label %if.then25, label %lor.lhs.false22

lor.lhs.false22:                                  ; preds = %lor.lhs.false19
  %26 = load i32, i32* %type, align 4
  %cmp23 = icmp eq i32 %26, 149
  br i1 %cmp23, label %if.then25, label %if.else64

if.then25:                                        ; preds = %lor.lhs.false22, %lor.lhs.false19, %if.else16
  %27 = load %struct.op*, %struct.op** %o.addr, align 8
  %28 = bitcast %struct.op* %27 to %struct.unop*
  %op_first26 = getelementptr inbounds %struct.unop, %struct.unop* %28, i32 0, i32 7
  %29 = load %struct.op*, %struct.op** %op_first26, align 8
  %op_type27 = getelementptr inbounds %struct.op, %struct.op* %29, i32 0, i32 4
  %bf.load28 = load i16, i16* %op_type27, align 8
  %bf.clear29 = and i16 %bf.load28, 511
  %bf.cast30 = zext i16 %bf.clear29 to i32
  %cmp31 = icmp ne i32 %bf.cast30, 7
  br i1 %cmp31, label %if.then33, label %if.else34

if.then33:                                        ; preds = %if.then25
  %30 = load %struct.op*, %struct.op** %o.addr, align 8
  call void @S_cant_declare(%struct.op* %30)
  br label %if.end61

if.else34:                                        ; preds = %if.then25
  %31 = load %struct.op*, %struct.op** %attrs.addr, align 8
  %tobool35 = icmp ne %struct.op* %31, null
  br i1 %tobool35, label %if.then36, label %if.end60

if.then36:                                        ; preds = %if.else34
  %32 = load %struct.op*, %struct.op** %o.addr, align 8
  %33 = bitcast %struct.op* %32 to %struct.unop*
  %op_first37 = getelementptr inbounds %struct.unop, %struct.unop* %33, i32 0, i32 7
  %34 = load %struct.op*, %struct.op** %op_first37, align 8
  %35 = bitcast %struct.op* %34 to %struct.svop*
  %op_sv = getelementptr inbounds %struct.svop, %struct.svop* %35, i32 0, i32 7
  %36 = load %struct.sv*, %struct.sv** %op_sv, align 8
  %37 = bitcast %struct.sv* %36 to %struct.gv*
  store %struct.gv* %37, %struct.gv** %gv, align 8
  %38 = load %struct.yy_parser*, %struct.yy_parser** @PL_parser, align 8
  %in_my38 = getelementptr inbounds %struct.yy_parser, %struct.yy_parser* %38, i32 0, i32 42
  store i16 0, i16* %in_my38, align 4
  %39 = load %struct.yy_parser*, %struct.yy_parser** @PL_parser, align 8
  %in_my_stash = getelementptr inbounds %struct.yy_parser, %struct.yy_parser* %39, i32 0, i32 45
  store %struct.hv* null, %struct.hv** %in_my_stash, align 8
  %40 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_any = getelementptr inbounds %struct.gv, %struct.gv* %40, i32 0, i32 0
  %41 = load %struct.xpvgv*, %struct.xpvgv** %sv_any, align 8
  %xnv_u = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %41, i32 0, i32 5
  %xgv_stash = bitcast %union._xnvu* %xnv_u to %struct.hv**
  %42 = load %struct.hv*, %struct.hv** %xgv_stash, align 8
  %43 = load i32, i32* %type, align 4
  %cmp39 = icmp eq i32 %43, 15
  br i1 %cmp39, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then36
  %44 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u = getelementptr inbounds %struct.gv, %struct.gv* %44, i32 0, i32 3
  %svu_gp = bitcast %union.anon.3* %sv_u to %struct.gp**
  %45 = load %struct.gp*, %struct.gp** %svu_gp, align 8
  %add.ptr41 = getelementptr inbounds %struct.gp, %struct.gp* %45, i64 0
  %gp_sv = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr41, i32 0, i32 0
  %46 = load %struct.sv*, %struct.sv** %gp_sv, align 8
  br label %cond.end58

cond.false:                                       ; preds = %if.then36
  %47 = load i32, i32* %type, align 4
  %cmp42 = icmp eq i32 %47, 135
  br i1 %cmp42, label %cond.true44, label %cond.false48

cond.true44:                                      ; preds = %cond.false
  %48 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u45 = getelementptr inbounds %struct.gv, %struct.gv* %48, i32 0, i32 3
  %svu_gp46 = bitcast %union.anon.3* %sv_u45 to %struct.gp**
  %49 = load %struct.gp*, %struct.gp** %svu_gp46, align 8
  %add.ptr47 = getelementptr inbounds %struct.gp, %struct.gp* %49, i64 0
  %gp_av = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr47, i32 0, i32 6
  %50 = load %struct.av*, %struct.av** %gp_av, align 8
  %51 = bitcast %struct.av* %50 to i8*
  %52 = bitcast i8* %51 to %struct.sv*
  br label %cond.end56

cond.false48:                                     ; preds = %cond.false
  %53 = load i32, i32* %type, align 4
  %cmp49 = icmp eq i32 %53, 149
  br i1 %cmp49, label %cond.true51, label %cond.false55

cond.true51:                                      ; preds = %cond.false48
  %54 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u52 = getelementptr inbounds %struct.gv, %struct.gv* %54, i32 0, i32 3
  %svu_gp53 = bitcast %union.anon.3* %sv_u52 to %struct.gp**
  %55 = load %struct.gp*, %struct.gp** %svu_gp53, align 8
  %add.ptr54 = getelementptr inbounds %struct.gp, %struct.gp* %55, i64 0
  %gp_hv = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr54, i32 0, i32 5
  %56 = load %struct.hv*, %struct.hv** %gp_hv, align 8
  %57 = bitcast %struct.hv* %56 to i8*
  %58 = bitcast i8* %57 to %struct.sv*
  br label %cond.end

cond.false55:                                     ; preds = %cond.false48
  %59 = load %struct.gv*, %struct.gv** %gv, align 8
  %60 = bitcast %struct.gv* %59 to i8*
  %61 = bitcast i8* %60 to %struct.sv*
  br label %cond.end

cond.end:                                         ; preds = %cond.false55, %cond.true51
  %cond = phi %struct.sv* [ %58, %cond.true51 ], [ %61, %cond.false55 ]
  br label %cond.end56

cond.end56:                                       ; preds = %cond.end, %cond.true44
  %cond57 = phi %struct.sv* [ %52, %cond.true44 ], [ %cond, %cond.end ]
  br label %cond.end58

cond.end58:                                       ; preds = %cond.end56, %cond.true
  %cond59 = phi %struct.sv* [ %46, %cond.true ], [ %cond57, %cond.end56 ]
  %62 = load %struct.op*, %struct.op** %attrs.addr, align 8
  call void @S_apply_attrs(%struct.hv* %42, %struct.sv* %cond59, %struct.op* %62)
  br label %if.end60

if.end60:                                         ; preds = %cond.end58, %if.else34
  br label %if.end61

if.end61:                                         ; preds = %if.end60, %if.then33
  %63 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_private = getelementptr inbounds %struct.op, %struct.op* %63, i32 0, i32 6
  %64 = load i8, i8* %op_private, align 1
  %conv62 = zext i8 %64 to i32
  %or = or i32 %conv62, 64
  %conv63 = trunc i32 %or to i8
  store i8 %conv63, i8* %op_private, align 1
  %65 = load %struct.op*, %struct.op** %o.addr, align 8
  store %struct.op* %65, %struct.op** %retval, align 8
  br label %return

if.else64:                                        ; preds = %lor.lhs.false22
  %66 = load i32, i32* %type, align 4
  %cmp65 = icmp ne i32 %66, 9
  br i1 %cmp65, label %land.lhs.true67, label %if.else77

land.lhs.true67:                                  ; preds = %if.else64
  %67 = load i32, i32* %type, align 4
  %cmp68 = icmp ne i32 %67, 10
  br i1 %cmp68, label %land.lhs.true70, label %if.else77

land.lhs.true70:                                  ; preds = %land.lhs.true67
  %68 = load i32, i32* %type, align 4
  %cmp71 = icmp ne i32 %68, 11
  br i1 %cmp71, label %land.lhs.true73, label %if.else77

land.lhs.true73:                                  ; preds = %land.lhs.true70
  %69 = load i32, i32* %type, align 4
  %cmp74 = icmp ne i32 %69, 3
  br i1 %cmp74, label %if.then76, label %if.else77

if.then76:                                        ; preds = %land.lhs.true73
  %70 = load %struct.op*, %struct.op** %o.addr, align 8
  call void @S_cant_declare(%struct.op* %70)
  %71 = load %struct.op*, %struct.op** %o.addr, align 8
  store %struct.op* %71, %struct.op** %retval, align 8
  br label %return

if.else77:                                        ; preds = %land.lhs.true73, %land.lhs.true70, %land.lhs.true67, %if.else64
  %72 = load %struct.op*, %struct.op** %attrs.addr, align 8
  %tobool78 = icmp ne %struct.op* %72, null
  br i1 %tobool78, label %land.lhs.true79, label %if.end88

land.lhs.true79:                                  ; preds = %if.else77
  %73 = load i32, i32* %type, align 4
  %cmp80 = icmp ne i32 %73, 3
  br i1 %cmp80, label %if.then82, label %if.end88

if.then82:                                        ; preds = %land.lhs.true79
  %74 = load %struct.yy_parser*, %struct.yy_parser** @PL_parser, align 8
  %in_my83 = getelementptr inbounds %struct.yy_parser, %struct.yy_parser* %74, i32 0, i32 42
  store i16 0, i16* %in_my83, align 4
  %75 = load %struct.yy_parser*, %struct.yy_parser** @PL_parser, align 8
  %in_my_stash84 = getelementptr inbounds %struct.yy_parser, %struct.yy_parser* %75, i32 0, i32 45
  store %struct.hv* null, %struct.hv** %in_my_stash84, align 8
  %76 = load %struct.padnamelist*, %struct.padnamelist** @PL_comppad_name, align 8
  %xpadnl_alloc = getelementptr inbounds %struct.padnamelist, %struct.padnamelist* %76, i32 0, i32 1
  %77 = load %struct.padname**, %struct.padname*** %xpadnl_alloc, align 8
  %78 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_targ = getelementptr inbounds %struct.op, %struct.op* %78, i32 0, i32 3
  %79 = load i64, i64* %op_targ, align 8
  %arrayidx = getelementptr inbounds %struct.padname*, %struct.padname** %77, i64 %79
  %80 = load %struct.padname*, %struct.padname** %arrayidx, align 8
  %xpadn_type_u = getelementptr inbounds %struct.padname, %struct.padname* %80, i32 0, i32 2
  %xpadn_typestash = bitcast %union.anon.23* %xpadn_type_u to %struct.hv**
  %81 = load %struct.hv*, %struct.hv** %xpadn_typestash, align 8
  store %struct.hv* %81, %struct.hv** %stash, align 8
  %82 = load %struct.hv*, %struct.hv** %stash, align 8
  %tobool85 = icmp ne %struct.hv* %82, null
  br i1 %tobool85, label %if.end87, label %if.then86

if.then86:                                        ; preds = %if.then82
  %83 = load %struct.hv*, %struct.hv** @PL_curstash, align 8
  store %struct.hv* %83, %struct.hv** %stash, align 8
  br label %if.end87

if.end87:                                         ; preds = %if.then86, %if.then82
  %84 = load %struct.hv*, %struct.hv** %stash, align 8
  %85 = load %struct.op*, %struct.op** %o.addr, align 8
  %86 = load %struct.op*, %struct.op** %attrs.addr, align 8
  %87 = load %struct.op**, %struct.op*** %imopsp.addr, align 8
  call void @S_apply_attrs_my(%struct.hv* %84, %struct.op* %85, %struct.op* %86, %struct.op** %87)
  br label %if.end88

if.end88:                                         ; preds = %if.end87, %land.lhs.true79, %if.else77
  br label %if.end89

if.end89:                                         ; preds = %if.end88
  br label %if.end90

if.end90:                                         ; preds = %if.end89
  br label %if.end91

if.end91:                                         ; preds = %if.end90
  br label %if.end92

if.end92:                                         ; preds = %if.end91
  %88 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %88, i32 0, i32 5
  %89 = load i8, i8* %op_flags, align 2
  %conv93 = zext i8 %89 to i32
  %or94 = or i32 %conv93, 32
  %conv95 = trunc i32 %or94 to i8
  store i8 %conv95, i8* %op_flags, align 2
  %90 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_private96 = getelementptr inbounds %struct.op, %struct.op* %90, i32 0, i32 6
  %91 = load i8, i8* %op_private96, align 1
  %conv97 = zext i8 %91 to i32
  %or98 = or i32 %conv97, 128
  %conv99 = trunc i32 %or98 to i8
  store i8 %conv99, i8* %op_private96, align 1
  %92 = load i8, i8* %stately, align 1
  %tobool100 = trunc i8 %92 to i1
  br i1 %tobool100, label %if.then101, label %if.end106

if.then101:                                       ; preds = %if.end92
  %93 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_private102 = getelementptr inbounds %struct.op, %struct.op* %93, i32 0, i32 6
  %94 = load i8, i8* %op_private102, align 1
  %conv103 = zext i8 %94 to i32
  %or104 = or i32 %conv103, 64
  %conv105 = trunc i32 %or104 to i8
  store i8 %conv105, i8* %op_private102, align 1
  br label %if.end106

if.end106:                                        ; preds = %if.then101, %if.end92
  %95 = load %struct.op*, %struct.op** %o.addr, align 8
  store %struct.op* %95, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %if.end106, %if.then76, %if.end61, %if.then15, %for.end, %if.then
  %96 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %96
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_op_append_list(i32 %type, %struct.op* %first, %struct.op* %last) #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %type.addr = alloca i32, align 4
  %first.addr = alloca %struct.op*, align 8
  %last.addr = alloca %struct.op*, align 8
  store i32 %type, i32* %type.addr, align 4
  store %struct.op* %first, %struct.op** %first.addr, align 8
  store %struct.op* %last, %struct.op** %last.addr, align 8
  %0 = load %struct.op*, %struct.op** %first.addr, align 8
  %tobool = icmp ne %struct.op* %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load %struct.op*, %struct.op** %last.addr, align 8
  store %struct.op* %1, %struct.op** %retval, align 8
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct.op*, %struct.op** %last.addr, align 8
  %tobool1 = icmp ne %struct.op* %2, null
  br i1 %tobool1, label %if.end3, label %if.then2

if.then2:                                         ; preds = %if.end
  %3 = load %struct.op*, %struct.op** %first.addr, align 8
  store %struct.op* %3, %struct.op** %retval, align 8
  br label %return

if.end3:                                          ; preds = %if.end
  %4 = load %struct.op*, %struct.op** %first.addr, align 8
  %op_type = getelementptr inbounds %struct.op, %struct.op* %4, i32 0, i32 4
  %bf.load = load i16, i16* %op_type, align 8
  %bf.clear = and i16 %bf.load, 511
  %bf.cast = zext i16 %bf.clear to i32
  %5 = load i32, i32* %type.addr, align 4
  %cmp = icmp ne i32 %bf.cast, %5
  br i1 %cmp, label %if.then4, label %if.end5

if.then4:                                         ; preds = %if.end3
  %6 = load i32, i32* %type.addr, align 4
  %7 = load %struct.op*, %struct.op** %first.addr, align 8
  %8 = load %struct.op*, %struct.op** %last.addr, align 8
  %call = call %struct.op* @Perl_op_prepend_elem(i32 %6, %struct.op* %7, %struct.op* %8)
  store %struct.op* %call, %struct.op** %retval, align 8
  br label %return

if.end5:                                          ; preds = %if.end3
  %9 = load %struct.op*, %struct.op** %last.addr, align 8
  %op_type6 = getelementptr inbounds %struct.op, %struct.op* %9, i32 0, i32 4
  %bf.load7 = load i16, i16* %op_type6, align 8
  %bf.clear8 = and i16 %bf.load7, 511
  %bf.cast9 = zext i16 %bf.clear8 to i32
  %10 = load i32, i32* %type.addr, align 4
  %cmp10 = icmp ne i32 %bf.cast9, %10
  br i1 %cmp10, label %if.then11, label %if.end13

if.then11:                                        ; preds = %if.end5
  %11 = load i32, i32* %type.addr, align 4
  %12 = load %struct.op*, %struct.op** %first.addr, align 8
  %13 = load %struct.op*, %struct.op** %last.addr, align 8
  %call12 = call %struct.op* @Perl_op_append_elem(i32 %11, %struct.op* %12, %struct.op* %13)
  store %struct.op* %call12, %struct.op** %retval, align 8
  br label %return

if.end13:                                         ; preds = %if.end5
  %14 = load %struct.op*, %struct.op** %first.addr, align 8
  %15 = bitcast %struct.op* %14 to %struct.listop*
  %op_last = getelementptr inbounds %struct.listop, %struct.listop* %15, i32 0, i32 8
  %16 = load %struct.op*, %struct.op** %op_last, align 8
  %op_moresib = getelementptr inbounds %struct.op, %struct.op* %16, i32 0, i32 4
  %bf.load14 = load i16, i16* %op_moresib, align 8
  %bf.clear15 = and i16 %bf.load14, -16385
  %bf.set = or i16 %bf.clear15, 16384
  store i16 %bf.set, i16* %op_moresib, align 8
  %17 = load %struct.op*, %struct.op** %last.addr, align 8
  %18 = bitcast %struct.op* %17 to %struct.listop*
  %op_first = getelementptr inbounds %struct.listop, %struct.listop* %18, i32 0, i32 7
  %19 = load %struct.op*, %struct.op** %op_first, align 8
  %20 = load %struct.op*, %struct.op** %first.addr, align 8
  %21 = bitcast %struct.op* %20 to %struct.listop*
  %op_last16 = getelementptr inbounds %struct.listop, %struct.listop* %21, i32 0, i32 8
  %22 = load %struct.op*, %struct.op** %op_last16, align 8
  %op_sibling = getelementptr inbounds %struct.op, %struct.op* %22, i32 0, i32 1
  store %struct.op* %19, %struct.op** %op_sibling, align 8
  %23 = load %struct.op*, %struct.op** %last.addr, align 8
  %24 = bitcast %struct.op* %23 to %struct.listop*
  %op_last17 = getelementptr inbounds %struct.listop, %struct.listop* %24, i32 0, i32 8
  %25 = load %struct.op*, %struct.op** %op_last17, align 8
  %26 = load %struct.op*, %struct.op** %first.addr, align 8
  %27 = bitcast %struct.op* %26 to %struct.listop*
  %op_last18 = getelementptr inbounds %struct.listop, %struct.listop* %27, i32 0, i32 8
  store %struct.op* %25, %struct.op** %op_last18, align 8
  %28 = load %struct.op*, %struct.op** %first.addr, align 8
  %29 = bitcast %struct.op* %28 to %struct.listop*
  %op_last19 = getelementptr inbounds %struct.listop, %struct.listop* %29, i32 0, i32 8
  %30 = load %struct.op*, %struct.op** %op_last19, align 8
  %op_moresib20 = getelementptr inbounds %struct.op, %struct.op* %30, i32 0, i32 4
  %bf.load21 = load i16, i16* %op_moresib20, align 8
  %bf.clear22 = and i16 %bf.load21, -16385
  store i16 %bf.clear22, i16* %op_moresib20, align 8
  %31 = load %struct.op*, %struct.op** %first.addr, align 8
  %32 = bitcast %struct.op* %31 to %struct.listop*
  %op_last23 = getelementptr inbounds %struct.listop, %struct.listop* %32, i32 0, i32 8
  %33 = load %struct.op*, %struct.op** %op_last23, align 8
  %op_sibling24 = getelementptr inbounds %struct.op, %struct.op* %33, i32 0, i32 1
  store %struct.op* null, %struct.op** %op_sibling24, align 8
  %34 = load %struct.op*, %struct.op** %last.addr, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %34, i32 0, i32 5
  %35 = load i8, i8* %op_flags, align 2
  %conv = zext i8 %35 to i32
  %and = and i32 %conv, 4
  %36 = load %struct.op*, %struct.op** %first.addr, align 8
  %op_flags25 = getelementptr inbounds %struct.op, %struct.op* %36, i32 0, i32 5
  %37 = load i8, i8* %op_flags25, align 2
  %conv26 = zext i8 %37 to i32
  %or = or i32 %conv26, %and
  %conv27 = trunc i32 %or to i8
  store i8 %conv27, i8* %op_flags25, align 2
  %38 = load %struct.op*, %struct.op** %last.addr, align 8
  call void @S_op_destroy(%struct.op* %38)
  %39 = load %struct.op*, %struct.op** %first.addr, align 8
  store %struct.op* %39, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %if.end13, %if.then11, %if.then4, %if.then2, %if.then
  %40 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %40
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_sawparens(%struct.op* %o) #0 {
entry:
  %o.addr = alloca %struct.op*, align 8
  store %struct.op* %o, %struct.op** %o.addr, align 8
  %0 = load %struct.op*, %struct.op** %o.addr, align 8
  %tobool = icmp ne %struct.op* %0, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %1, i32 0, i32 5
  %2 = load i8, i8* %op_flags, align 2
  %conv = zext i8 %2 to i32
  %or = or i32 %conv, 8
  %conv1 = trunc i32 %or to i8
  store i8 %conv1, i8* %op_flags, align 2
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %3 = load %struct.op*, %struct.op** %o.addr, align 8
  ret %struct.op* %3
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_bind_match(i32 %type, %struct.op* %left, %struct.op* %right) #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %type.addr = alloca i32, align 4
  %left.addr = alloca %struct.op*, align 8
  %right.addr = alloca %struct.op*, align 8
  %o = alloca %struct.op*, align 8
  %ismatchop = alloca i8, align 1
  %ltype = alloca i16, align 2
  %rtype = alloca i16, align 2
  %desc = alloca i8*, align 8
  %isary = alloca i8, align 1
  %name = alloca %struct.sv*, align 8
  %sample = alloca i8*, align 8
  store i32 %type, i32* %type.addr, align 4
  store %struct.op* %left, %struct.op** %left.addr, align 8
  store %struct.op* %right, %struct.op** %right.addr, align 8
  store i8 0, i8* %ismatchop, align 1
  %0 = load %struct.op*, %struct.op** %left.addr, align 8
  %op_type = getelementptr inbounds %struct.op, %struct.op* %0, i32 0, i32 4
  %bf.load = load i16, i16* %op_type, align 8
  %bf.clear = and i16 %bf.load, 511
  %bf.cast = zext i16 %bf.clear to i32
  %conv = trunc i32 %bf.cast to i16
  store i16 %conv, i16* %ltype, align 2
  %1 = load %struct.op*, %struct.op** %right.addr, align 8
  %op_type1 = getelementptr inbounds %struct.op, %struct.op* %1, i32 0, i32 4
  %bf.load2 = load i16, i16* %op_type1, align 8
  %bf.clear3 = and i16 %bf.load2, 511
  %bf.cast4 = zext i16 %bf.clear3 to i32
  %conv5 = trunc i32 %bf.cast4 to i16
  store i16 %conv5, i16* %rtype, align 2
  %2 = load i16, i16* %ltype, align 2
  %conv6 = zext i16 %2 to i32
  %cmp = icmp eq i32 %conv6, 135
  br i1 %cmp, label %land.lhs.true, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %3 = load i16, i16* %ltype, align 2
  %conv8 = zext i16 %3 to i32
  %cmp9 = icmp eq i32 %conv8, 149
  br i1 %cmp9, label %land.lhs.true, label %lor.lhs.false11

lor.lhs.false11:                                  ; preds = %lor.lhs.false
  %4 = load i16, i16* %ltype, align 2
  %conv12 = zext i16 %4 to i32
  %cmp13 = icmp eq i32 %conv12, 10
  br i1 %cmp13, label %land.lhs.true, label %lor.lhs.false15

lor.lhs.false15:                                  ; preds = %lor.lhs.false11
  %5 = load i16, i16* %ltype, align 2
  %conv16 = zext i16 %5 to i32
  %cmp17 = icmp eq i32 %conv16, 11
  br i1 %cmp17, label %land.lhs.true, label %if.end43

land.lhs.true:                                    ; preds = %lor.lhs.false15, %lor.lhs.false11, %lor.lhs.false, %entry
  %call = call zeroext i1 @Perl_ckwarn(i32 12)
  br i1 %call, label %if.then, label %if.end43

if.then:                                          ; preds = %land.lhs.true
  %6 = load i16, i16* %rtype, align 2
  %conv20 = zext i16 %6 to i32
  %cmp21 = icmp eq i32 %conv20, 33
  br i1 %cmp21, label %cond.true, label %lor.lhs.false23

lor.lhs.false23:                                  ; preds = %if.then
  %7 = load i16, i16* %rtype, align 2
  %conv24 = zext i16 %7 to i32
  %cmp25 = icmp eq i32 %conv24, 35
  br i1 %cmp25, label %cond.true, label %lor.lhs.false27

lor.lhs.false27:                                  ; preds = %lor.lhs.false23
  %8 = load i16, i16* %rtype, align 2
  %conv28 = zext i16 %8 to i32
  %cmp29 = icmp eq i32 %conv28, 36
  br i1 %cmp29, label %cond.true, label %cond.false

cond.true:                                        ; preds = %lor.lhs.false27, %lor.lhs.false23, %if.then
  %9 = load i16, i16* %rtype, align 2
  %conv31 = zext i16 %9 to i32
  br label %cond.end

cond.false:                                       ; preds = %lor.lhs.false27
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv31, %cond.true ], [ 31, %cond.false ]
  %idxprom = sext i32 %cond to i64
  %arrayidx = getelementptr inbounds [0 x i8*], [0 x i8*]* @PL_op_desc, i64 0, i64 %idxprom
  %10 = load i8*, i8** %arrayidx, align 8
  store i8* %10, i8** %desc, align 8
  %11 = load i16, i16* %ltype, align 2
  %conv32 = zext i16 %11 to i32
  %cmp33 = icmp eq i32 %conv32, 135
  br i1 %cmp33, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %cond.end
  %12 = load i16, i16* %ltype, align 2
  %conv35 = zext i16 %12 to i32
  %cmp36 = icmp eq i32 %conv35, 10
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %cond.end
  %13 = phi i1 [ true, %cond.end ], [ %cmp36, %lor.rhs ]
  %frombool = zext i1 %13 to i8
  store i8 %frombool, i8* %isary, align 1
  %14 = load %struct.op*, %struct.op** %left.addr, align 8
  %call38 = call %struct.sv* @S_op_varname(%struct.op* %14)
  store %struct.sv* %call38, %struct.sv** %name, align 8
  %15 = load %struct.sv*, %struct.sv** %name, align 8
  %tobool = icmp ne %struct.sv* %15, null
  br i1 %tobool, label %if.then39, label %if.else

if.then39:                                        ; preds = %lor.end
  %16 = load i8*, i8** %desc, align 8
  %17 = load %struct.sv*, %struct.sv** %name, align 8
  %18 = bitcast %struct.sv* %17 to i8*
  %19 = load %struct.sv*, %struct.sv** %name, align 8
  %20 = bitcast %struct.sv* %19 to i8*
  call void (i32, i8*, ...) @Perl_warner(i32 12, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.37, i64 0, i64 0), i8* %16, i8* %18, i8* %20)
  br label %if.end

if.else:                                          ; preds = %lor.end
  %21 = load i8, i8* %isary, align 1
  %tobool40 = trunc i8 %21 to i1
  %22 = zext i1 %tobool40 to i64
  %cond42 = select i1 %tobool40, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.38, i64 0, i64 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.39, i64 0, i64 0)
  store i8* %cond42, i8** %sample, align 8
  %23 = load i8*, i8** %desc, align 8
  %24 = load i8*, i8** %sample, align 8
  %25 = load i8*, i8** %sample, align 8
  call void (i32, i8*, ...) @Perl_warner(i32 12, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.40, i64 0, i64 0), i8* %23, i8* %24, i8* %25)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then39
  br label %if.end43

if.end43:                                         ; preds = %if.end, %land.lhs.true, %lor.lhs.false15
  %26 = load i16, i16* %rtype, align 2
  %conv44 = zext i16 %26 to i32
  %cmp45 = icmp eq i32 %conv44, 5
  br i1 %cmp45, label %land.lhs.true47, label %if.end56

land.lhs.true47:                                  ; preds = %if.end43
  %27 = load %struct.op*, %struct.op** %right.addr, align 8
  %28 = bitcast %struct.op* %27 to %struct.svop*
  %op_private = getelementptr inbounds %struct.svop, %struct.svop* %28, i32 0, i32 6
  %29 = load i8, i8* %op_private, align 1
  %conv48 = zext i8 %29 to i32
  %and = and i32 %conv48, 64
  %tobool49 = icmp ne i32 %and, 0
  br i1 %tobool49, label %land.lhs.true50, label %if.end56

land.lhs.true50:                                  ; preds = %land.lhs.true47
  %30 = load %struct.op*, %struct.op** %right.addr, align 8
  %31 = bitcast %struct.op* %30 to %struct.svop*
  %op_private51 = getelementptr inbounds %struct.svop, %struct.svop* %31, i32 0, i32 6
  %32 = load i8, i8* %op_private51, align 1
  %conv52 = zext i8 %32 to i32
  %and53 = and i32 %conv52, 8
  %tobool54 = icmp ne i32 %and53, 0
  br i1 %tobool54, label %if.then55, label %if.end56

if.then55:                                        ; preds = %land.lhs.true50
  %33 = load %struct.op*, %struct.op** %right.addr, align 8
  call void @S_no_bareword_allowed(%struct.op* %33)
  br label %if.end56

if.end56:                                         ; preds = %if.then55, %land.lhs.true50, %land.lhs.true47, %if.end43
  %34 = load i16, i16* %rtype, align 2
  %conv57 = zext i16 %34 to i32
  %cmp58 = icmp eq i32 %conv57, 33
  br i1 %cmp58, label %land.lhs.true60, label %if.end68

land.lhs.true60:                                  ; preds = %if.end56
  %35 = load %struct.op*, %struct.op** %right.addr, align 8
  %36 = bitcast %struct.op* %35 to %struct.pmop*
  %op_pmflags = getelementptr inbounds %struct.pmop, %struct.pmop* %36, i32 0, i32 10
  %37 = load i32, i32* %op_pmflags, align 8
  %and61 = and i32 %37, 134217728
  %tobool62 = icmp ne i32 %and61, 0
  br i1 %tobool62, label %land.lhs.true63, label %if.end68

land.lhs.true63:                                  ; preds = %land.lhs.true60
  %38 = load i32, i32* %type.addr, align 4
  %cmp64 = icmp eq i32 %38, 103
  br i1 %cmp64, label %if.then66, label %if.end68

if.then66:                                        ; preds = %land.lhs.true63
  %call67 = call i32 @Perl_yyerror(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.41, i64 0, i64 0))
  br label %if.end68

if.end68:                                         ; preds = %if.then66, %land.lhs.true63, %land.lhs.true60, %if.end56
  %39 = load i16, i16* %rtype, align 2
  %conv69 = zext i16 %39 to i32
  %cmp70 = icmp eq i32 %conv69, 36
  br i1 %cmp70, label %land.lhs.true72, label %if.end77

land.lhs.true72:                                  ; preds = %if.end68
  %40 = load i32, i32* %type.addr, align 4
  %cmp73 = icmp eq i32 %40, 103
  br i1 %cmp73, label %if.then75, label %if.end77

if.then75:                                        ; preds = %land.lhs.true72
  %call76 = call i32 @Perl_yyerror(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.42, i64 0, i64 0))
  br label %if.end77

if.end77:                                         ; preds = %if.then75, %land.lhs.true72, %if.end68
  %41 = load i16, i16* %rtype, align 2
  %conv78 = zext i16 %41 to i32
  %cmp79 = icmp eq i32 %conv78, 31
  br i1 %cmp79, label %land.rhs, label %lor.lhs.false81

lor.lhs.false81:                                  ; preds = %if.end77
  %42 = load i16, i16* %rtype, align 2
  %conv82 = zext i16 %42 to i32
  %cmp83 = icmp eq i32 %conv82, 33
  br i1 %cmp83, label %land.rhs, label %lor.lhs.false85

lor.lhs.false85:                                  ; preds = %lor.lhs.false81
  %43 = load i16, i16* %rtype, align 2
  %conv86 = zext i16 %43 to i32
  %cmp87 = icmp eq i32 %conv86, 35
  br i1 %cmp87, label %land.rhs, label %lor.lhs.false89

lor.lhs.false89:                                  ; preds = %lor.lhs.false85
  %44 = load i16, i16* %rtype, align 2
  %conv90 = zext i16 %44 to i32
  %cmp91 = icmp eq i32 %conv90, 36
  br i1 %cmp91, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %lor.lhs.false89, %lor.lhs.false85, %lor.lhs.false81, %if.end77
  %45 = load %struct.op*, %struct.op** %right.addr, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %45, i32 0, i32 5
  %46 = load i8, i8* %op_flags, align 2
  %conv93 = zext i8 %46 to i32
  %and94 = and i32 %conv93, 128
  %tobool95 = icmp ne i32 %and94, 0
  %lnot = xor i1 %tobool95, true
  br label %land.end

land.end:                                         ; preds = %land.rhs, %lor.lhs.false89
  %47 = phi i1 [ false, %lor.lhs.false89 ], [ %lnot, %land.rhs ]
  %frombool96 = zext i1 %47 to i8
  store i8 %frombool96, i8* %ismatchop, align 1
  %48 = load i8, i8* %ismatchop, align 1
  %tobool97 = trunc i8 %48 to i1
  br i1 %tobool97, label %land.lhs.true99, label %if.end109

land.lhs.true99:                                  ; preds = %land.end
  %49 = load %struct.op*, %struct.op** %right.addr, align 8
  %op_private100 = getelementptr inbounds %struct.op, %struct.op* %49, i32 0, i32 6
  %50 = load i8, i8* %op_private100, align 1
  %conv101 = zext i8 %50 to i32
  %and102 = and i32 %conv101, 16
  %tobool103 = icmp ne i32 %and102, 0
  br i1 %tobool103, label %if.then104, label %if.end109

if.then104:                                       ; preds = %land.lhs.true99
  %51 = load %struct.op*, %struct.op** %right.addr, align 8
  %op_targ = getelementptr inbounds %struct.op, %struct.op* %51, i32 0, i32 3
  store i64 0, i64* %op_targ, align 8
  %52 = load %struct.op*, %struct.op** %right.addr, align 8
  %op_private105 = getelementptr inbounds %struct.op, %struct.op* %52, i32 0, i32 6
  %53 = load i8, i8* %op_private105, align 1
  %conv106 = zext i8 %53 to i32
  %and107 = and i32 %conv106, -17
  %conv108 = trunc i32 %and107 to i8
  store i8 %conv108, i8* %op_private105, align 1
  br label %if.end109

if.end109:                                        ; preds = %if.then104, %land.lhs.true99, %land.end
  %54 = load %struct.op*, %struct.op** %right.addr, align 8
  %op_flags110 = getelementptr inbounds %struct.op, %struct.op* %54, i32 0, i32 5
  %55 = load i8, i8* %op_flags110, align 2
  %conv111 = zext i8 %55 to i32
  %and112 = and i32 %conv111, 64
  %tobool113 = icmp ne i32 %and112, 0
  br i1 %tobool113, label %if.else195, label %land.lhs.true114

land.lhs.true114:                                 ; preds = %if.end109
  %56 = load %struct.op*, %struct.op** %right.addr, align 8
  %op_targ115 = getelementptr inbounds %struct.op, %struct.op* %56, i32 0, i32 3
  %57 = load i64, i64* %op_targ115, align 8
  %tobool116 = icmp ne i64 %57, 0
  br i1 %tobool116, label %if.else195, label %land.lhs.true117

land.lhs.true117:                                 ; preds = %land.lhs.true114
  %58 = load i8, i8* %ismatchop, align 1
  %tobool118 = trunc i8 %58 to i1
  br i1 %tobool118, label %if.then120, label %if.else195

if.then120:                                       ; preds = %land.lhs.true117
  %59 = load %struct.op*, %struct.op** %left.addr, align 8
  %op_type121 = getelementptr inbounds %struct.op, %struct.op* %59, i32 0, i32 4
  %bf.load122 = load i16, i16* %op_type121, align 8
  %bf.clear123 = and i16 %bf.load122, 511
  %bf.cast124 = zext i16 %bf.clear123 to i32
  %cmp125 = icmp eq i32 %bf.cast124, 9
  br i1 %cmp125, label %land.lhs.true127, label %if.else135

land.lhs.true127:                                 ; preds = %if.then120
  %60 = load %struct.op*, %struct.op** %left.addr, align 8
  %op_private128 = getelementptr inbounds %struct.op, %struct.op* %60, i32 0, i32 6
  %61 = load i8, i8* %op_private128, align 1
  %conv129 = zext i8 %61 to i32
  %and130 = and i32 %conv129, 128
  %tobool131 = icmp ne i32 %and130, 0
  br i1 %tobool131, label %if.else135, label %if.then132

if.then132:                                       ; preds = %land.lhs.true127
  %62 = load %struct.op*, %struct.op** %left.addr, align 8
  %op_targ133 = getelementptr inbounds %struct.op, %struct.op* %62, i32 0, i32 3
  %63 = load i64, i64* %op_targ133, align 8
  %64 = load %struct.op*, %struct.op** %right.addr, align 8
  %op_targ134 = getelementptr inbounds %struct.op, %struct.op* %64, i32 0, i32 3
  store i64 %63, i64* %op_targ134, align 8
  %65 = load %struct.op*, %struct.op** %left.addr, align 8
  call void @Perl_op_free(%struct.op* %65)
  %66 = load %struct.op*, %struct.op** %right.addr, align 8
  store %struct.op* %66, %struct.op** %o, align 8
  br label %if.end188

if.else135:                                       ; preds = %land.lhs.true127, %if.then120
  %67 = load %struct.op*, %struct.op** %right.addr, align 8
  %op_flags136 = getelementptr inbounds %struct.op, %struct.op* %67, i32 0, i32 5
  %68 = load i8, i8* %op_flags136, align 2
  %conv137 = zext i8 %68 to i32
  %or = or i32 %conv137, 64
  %conv138 = trunc i32 %or to i8
  store i8 %conv138, i8* %op_flags136, align 2
  %69 = load i16, i16* %rtype, align 2
  %conv139 = zext i16 %69 to i32
  %cmp140 = icmp ne i32 %conv139, 31
  br i1 %cmp140, label %land.lhs.true142, label %if.end166

land.lhs.true142:                                 ; preds = %if.else135
  %70 = load i16, i16* %rtype, align 2
  %conv143 = zext i16 %70 to i32
  %cmp144 = icmp ne i32 %conv143, 36
  br i1 %cmp144, label %land.lhs.true146, label %if.end166

land.lhs.true146:                                 ; preds = %land.lhs.true142
  %71 = load i16, i16* %rtype, align 2
  %conv147 = zext i16 %71 to i32
  %cmp148 = icmp eq i32 %conv147, 35
  br i1 %cmp148, label %land.lhs.true150, label %land.lhs.true155

land.lhs.true150:                                 ; preds = %land.lhs.true146
  %72 = load %struct.op*, %struct.op** %right.addr, align 8
  %op_private151 = getelementptr inbounds %struct.op, %struct.op* %72, i32 0, i32 6
  %73 = load i8, i8* %op_private151, align 1
  %conv152 = zext i8 %73 to i32
  %and153 = and i32 %conv152, 4
  %tobool154 = icmp ne i32 %and153, 0
  br i1 %tobool154, label %if.end166, label %land.lhs.true155

land.lhs.true155:                                 ; preds = %land.lhs.true150, %land.lhs.true146
  %74 = load i16, i16* %rtype, align 2
  %conv156 = zext i16 %74 to i32
  %cmp157 = icmp eq i32 %conv156, 33
  br i1 %cmp157, label %land.lhs.true159, label %if.then163

land.lhs.true159:                                 ; preds = %land.lhs.true155
  %75 = load %struct.op*, %struct.op** %right.addr, align 8
  %76 = bitcast %struct.op* %75 to %struct.pmop*
  %op_pmflags160 = getelementptr inbounds %struct.pmop, %struct.pmop* %76, i32 0, i32 10
  %77 = load i32, i32* %op_pmflags160, align 8
  %and161 = and i32 %77, 134217728
  %tobool162 = icmp ne i32 %and161, 0
  br i1 %tobool162, label %if.end166, label %if.then163

if.then163:                                       ; preds = %land.lhs.true159, %land.lhs.true155
  %78 = load %struct.op*, %struct.op** %left.addr, align 8
  %79 = load i16, i16* %rtype, align 2
  %conv164 = zext i16 %79 to i32
  %call165 = call %struct.op* @Perl_op_lvalue_flags(%struct.op* %78, i32 %conv164, i32 0)
  store %struct.op* %call165, %struct.op** %left.addr, align 8
  br label %if.end166

if.end166:                                        ; preds = %if.then163, %land.lhs.true159, %land.lhs.true150, %land.lhs.true142, %if.else135
  %80 = load %struct.op*, %struct.op** %right.addr, align 8
  %op_type167 = getelementptr inbounds %struct.op, %struct.op* %80, i32 0, i32 4
  %bf.load168 = load i16, i16* %op_type167, align 8
  %bf.clear169 = and i16 %bf.load168, 511
  %bf.cast170 = zext i16 %bf.clear169 to i32
  %cmp171 = icmp eq i32 %bf.cast170, 35
  br i1 %cmp171, label %if.then180, label %lor.lhs.false173

lor.lhs.false173:                                 ; preds = %if.end166
  %81 = load %struct.op*, %struct.op** %right.addr, align 8
  %op_type174 = getelementptr inbounds %struct.op, %struct.op* %81, i32 0, i32 4
  %bf.load175 = load i16, i16* %op_type174, align 8
  %bf.clear176 = and i16 %bf.load175, 511
  %bf.cast177 = zext i16 %bf.clear176 to i32
  %cmp178 = icmp eq i32 %bf.cast177, 36
  br i1 %cmp178, label %if.then180, label %if.else183

if.then180:                                       ; preds = %lor.lhs.false173, %if.end166
  %82 = load %struct.op*, %struct.op** %left.addr, align 8
  %call181 = call %struct.op* @Perl_scalar(%struct.op* %82)
  %83 = load %struct.op*, %struct.op** %right.addr, align 8
  %call182 = call %struct.op* @Perl_newBINOP(i32 0, i32 64, %struct.op* %call181, %struct.op* %83)
  store %struct.op* %call182, %struct.op** %o, align 8
  br label %if.end187

if.else183:                                       ; preds = %lor.lhs.false173
  %84 = load i16, i16* %rtype, align 2
  %conv184 = zext i16 %84 to i32
  %85 = load %struct.op*, %struct.op** %left.addr, align 8
  %call185 = call %struct.op* @Perl_scalar(%struct.op* %85)
  %86 = load %struct.op*, %struct.op** %right.addr, align 8
  %call186 = call %struct.op* @Perl_op_prepend_elem(i32 %conv184, %struct.op* %call185, %struct.op* %86)
  store %struct.op* %call186, %struct.op** %o, align 8
  br label %if.end187

if.end187:                                        ; preds = %if.else183, %if.then180
  br label %if.end188

if.end188:                                        ; preds = %if.end187, %if.then132
  %87 = load i32, i32* %type.addr, align 4
  %cmp189 = icmp eq i32 %87, 103
  br i1 %cmp189, label %if.then191, label %if.end194

if.then191:                                       ; preds = %if.end188
  %88 = load %struct.op*, %struct.op** %o, align 8
  %call192 = call %struct.op* @Perl_scalar(%struct.op* %88)
  %call193 = call %struct.op* @Perl_newUNOP(i32 103, i32 0, %struct.op* %call192)
  store %struct.op* %call193, %struct.op** %retval, align 8
  br label %return

if.end194:                                        ; preds = %if.end188
  %89 = load %struct.op*, %struct.op** %o, align 8
  store %struct.op* %89, %struct.op** %retval, align 8
  br label %return

if.else195:                                       ; preds = %land.lhs.true117, %land.lhs.true114, %if.end109
  %90 = load i32, i32* %type.addr, align 4
  %91 = load %struct.op*, %struct.op** %left.addr, align 8
  %call196 = call %struct.op* @Perl_newPMOP(i32 31, i32 0)
  %92 = load %struct.op*, %struct.op** %right.addr, align 8
  %call197 = call %struct.op* @Perl_pmruntime(%struct.op* %call196, %struct.op* %92, %struct.op* null, i1 zeroext false, i32 0)
  %call198 = call %struct.op* @Perl_bind_match(i32 %90, %struct.op* %91, %struct.op* %call197)
  store %struct.op* %call198, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %if.else195, %if.end194, %if.then191
  %93 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %93
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_newBINOP(i32 %type, i32 %flags, %struct.op* %first, %struct.op* %last) #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %type.addr = alloca i32, align 4
  %flags.addr = alloca i32, align 4
  %first.addr = alloca %struct.op*, align 8
  %last.addr = alloca %struct.op*, align 8
  %binop = alloca %struct.binop*, align 8
  store i32 %type, i32* %type.addr, align 4
  store i32 %flags, i32* %flags.addr, align 4
  store %struct.op* %first, %struct.op** %first.addr, align 8
  store %struct.op* %last, %struct.op** %last.addr, align 8
  %call = call i8* @Perl_Slab_Alloc(i64 56)
  %0 = bitcast i8* %call to %struct.binop*
  store %struct.binop* %0, %struct.binop** %binop, align 8
  %1 = load %struct.op*, %struct.op** %first.addr, align 8
  %tobool = icmp ne %struct.op* %1, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %call1 = call %struct.op* @Perl_newOP(i32 0, i32 0)
  store %struct.op* %call1, %struct.op** %first.addr, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  br label %do.body

do.body:                                          ; preds = %if.end
  %2 = load i32, i32* %type.addr, align 4
  %conv = trunc i32 %2 to i16
  %conv2 = zext i16 %conv to i32
  %3 = load %struct.binop*, %struct.binop** %binop, align 8
  %op_type = getelementptr inbounds %struct.binop, %struct.binop* %3, i32 0, i32 4
  %4 = trunc i32 %conv2 to i16
  %bf.load = load i16, i16* %op_type, align 8
  %bf.value = and i16 %4, 511
  %bf.clear = and i16 %bf.load, -512
  %bf.set = or i16 %bf.clear, %bf.value
  store i16 %bf.set, i16* %op_type, align 8
  %bf.result.cast = zext i16 %bf.value to i32
  %5 = load i32, i32* %type.addr, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds [0 x %struct.op* ()*], [0 x %struct.op* ()*]* @PL_ppaddr, i64 0, i64 %idxprom
  %6 = load %struct.op* ()*, %struct.op* ()** %arrayidx, align 8
  %7 = load %struct.binop*, %struct.binop** %binop, align 8
  %op_ppaddr = getelementptr inbounds %struct.binop, %struct.binop* %7, i32 0, i32 2
  store %struct.op* ()* %6, %struct.op* ()** %op_ppaddr, align 8
  br label %do.end

do.end:                                           ; preds = %do.body
  %8 = load %struct.op*, %struct.op** %first.addr, align 8
  %9 = load %struct.binop*, %struct.binop** %binop, align 8
  %op_first = getelementptr inbounds %struct.binop, %struct.binop* %9, i32 0, i32 7
  store %struct.op* %8, %struct.op** %op_first, align 8
  %10 = load i32, i32* %flags.addr, align 4
  %or = or i32 %10, 4
  %conv3 = trunc i32 %or to i8
  %11 = load %struct.binop*, %struct.binop** %binop, align 8
  %op_flags = getelementptr inbounds %struct.binop, %struct.binop* %11, i32 0, i32 5
  store i8 %conv3, i8* %op_flags, align 2
  %12 = load %struct.op*, %struct.op** %last.addr, align 8
  %tobool4 = icmp ne %struct.op* %12, null
  br i1 %tobool4, label %if.else, label %if.then5

if.then5:                                         ; preds = %do.end
  %13 = load %struct.op*, %struct.op** %first.addr, align 8
  store %struct.op* %13, %struct.op** %last.addr, align 8
  %14 = load i32, i32* %flags.addr, align 4
  %shr = ashr i32 %14, 8
  %or6 = or i32 1, %shr
  %conv7 = trunc i32 %or6 to i8
  %15 = load %struct.binop*, %struct.binop** %binop, align 8
  %op_private = getelementptr inbounds %struct.binop, %struct.binop* %15, i32 0, i32 6
  store i8 %conv7, i8* %op_private, align 1
  br label %if.end15

if.else:                                          ; preds = %do.end
  %16 = load i32, i32* %flags.addr, align 4
  %shr8 = ashr i32 %16, 8
  %or9 = or i32 2, %shr8
  %conv10 = trunc i32 %or9 to i8
  %17 = load %struct.binop*, %struct.binop** %binop, align 8
  %op_private11 = getelementptr inbounds %struct.binop, %struct.binop* %17, i32 0, i32 6
  store i8 %conv10, i8* %op_private11, align 1
  %18 = load %struct.op*, %struct.op** %first.addr, align 8
  %op_moresib = getelementptr inbounds %struct.op, %struct.op* %18, i32 0, i32 4
  %bf.load12 = load i16, i16* %op_moresib, align 8
  %bf.clear13 = and i16 %bf.load12, -16385
  %bf.set14 = or i16 %bf.clear13, 16384
  store i16 %bf.set14, i16* %op_moresib, align 8
  %19 = load %struct.op*, %struct.op** %last.addr, align 8
  %20 = load %struct.op*, %struct.op** %first.addr, align 8
  %op_sibling = getelementptr inbounds %struct.op, %struct.op* %20, i32 0, i32 1
  store %struct.op* %19, %struct.op** %op_sibling, align 8
  br label %if.end15

if.end15:                                         ; preds = %if.else, %if.then5
  %21 = load %struct.op*, %struct.op** %last.addr, align 8
  %op_sibling16 = getelementptr inbounds %struct.op, %struct.op* %21, i32 0, i32 1
  %22 = load %struct.op*, %struct.op** %op_sibling16, align 8
  %tobool17 = icmp ne %struct.op* %22, null
  br i1 %tobool17, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end15
  br i1 true, label %if.end23, label %if.then18

cond.false:                                       ; preds = %if.end15
  br i1 false, label %if.end23, label %if.then18

if.then18:                                        ; preds = %cond.false, %cond.true
  %23 = load %struct.op*, %struct.op** %last.addr, align 8
  %op_moresib19 = getelementptr inbounds %struct.op, %struct.op* %23, i32 0, i32 4
  %bf.load20 = load i16, i16* %op_moresib19, align 8
  %bf.clear21 = and i16 %bf.load20, -16385
  store i16 %bf.clear21, i16* %op_moresib19, align 8
  %24 = load %struct.op*, %struct.op** %last.addr, align 8
  %op_sibling22 = getelementptr inbounds %struct.op, %struct.op* %24, i32 0, i32 1
  store %struct.op* null, %struct.op** %op_sibling22, align 8
  br label %if.end23

if.end23:                                         ; preds = %if.then18, %cond.false, %cond.true
  %25 = load %struct.binop*, %struct.binop** %binop, align 8
  %op_first24 = getelementptr inbounds %struct.binop, %struct.binop* %25, i32 0, i32 7
  %26 = load %struct.op*, %struct.op** %op_first24, align 8
  %op_sibling25 = getelementptr inbounds %struct.op, %struct.op* %26, i32 0, i32 1
  %27 = load %struct.op*, %struct.op** %op_sibling25, align 8
  %add.ptr = getelementptr inbounds %struct.op, %struct.op* %27, i64 0
  %28 = load %struct.binop*, %struct.binop** %binop, align 8
  %op_last = getelementptr inbounds %struct.binop, %struct.binop* %28, i32 0, i32 8
  store %struct.op* %add.ptr, %struct.op** %op_last, align 8
  %29 = load %struct.binop*, %struct.binop** %binop, align 8
  %op_last26 = getelementptr inbounds %struct.binop, %struct.binop* %29, i32 0, i32 8
  %30 = load %struct.op*, %struct.op** %op_last26, align 8
  %tobool27 = icmp ne %struct.op* %30, null
  br i1 %tobool27, label %if.then28, label %if.end35

if.then28:                                        ; preds = %if.end23
  %31 = load %struct.binop*, %struct.binop** %binop, align 8
  %op_last29 = getelementptr inbounds %struct.binop, %struct.binop* %31, i32 0, i32 8
  %32 = load %struct.op*, %struct.op** %op_last29, align 8
  %op_moresib30 = getelementptr inbounds %struct.op, %struct.op* %32, i32 0, i32 4
  %bf.load31 = load i16, i16* %op_moresib30, align 8
  %bf.clear32 = and i16 %bf.load31, -16385
  store i16 %bf.clear32, i16* %op_moresib30, align 8
  %33 = load %struct.binop*, %struct.binop** %binop, align 8
  %op_last33 = getelementptr inbounds %struct.binop, %struct.binop* %33, i32 0, i32 8
  %34 = load %struct.op*, %struct.op** %op_last33, align 8
  %op_sibling34 = getelementptr inbounds %struct.op, %struct.op* %34, i32 0, i32 1
  store %struct.op* null, %struct.op** %op_sibling34, align 8
  br label %if.end35

if.end35:                                         ; preds = %if.then28, %if.end23
  %35 = load i8*, i8** @PL_op_mask, align 8
  %tobool36 = icmp ne i8* %35, null
  br i1 %tobool36, label %land.lhs.true, label %cond.false44

land.lhs.true:                                    ; preds = %if.end35
  %36 = load i8*, i8** @PL_op_mask, align 8
  %37 = load i32, i32* %type.addr, align 4
  %idxprom37 = sext i32 %37 to i64
  %arrayidx38 = getelementptr inbounds i8, i8* %36, i64 %idxprom37
  %38 = load i8, i8* %arrayidx38, align 1
  %conv39 = sext i8 %38 to i32
  %tobool40 = icmp ne i32 %conv39, 0
  br i1 %tobool40, label %cond.true41, label %cond.false44

cond.true41:                                      ; preds = %land.lhs.true
  %39 = load %struct.binop*, %struct.binop** %binop, align 8
  %40 = bitcast %struct.binop* %39 to %struct.op*
  call void @Perl_op_free(%struct.op* %40)
  %41 = load i32, i32* %type.addr, align 4
  %idxprom42 = sext i32 %41 to i64
  %arrayidx43 = getelementptr inbounds [0 x i8*], [0 x i8*]* @PL_op_desc, i64 0, i64 %idxprom42
  %42 = load i8*, i8** %arrayidx43, align 8
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.49, i64 0, i64 0), i8* %42)
  br label %cond.end

cond.false44:                                     ; preds = %land.lhs.true, %if.end35
  %43 = load i32, i32* %type.addr, align 4
  %idxprom45 = sext i32 %43 to i64
  %arrayidx46 = getelementptr inbounds [0 x %struct.op* (%struct.op*)*], [0 x %struct.op* (%struct.op*)*]* @PL_check, i64 0, i64 %idxprom45
  %44 = load %struct.op* (%struct.op*)*, %struct.op* (%struct.op*)** %arrayidx46, align 8
  %45 = load %struct.binop*, %struct.binop** %binop, align 8
  %46 = bitcast %struct.binop* %45 to %struct.op*
  %call47 = call %struct.op* %44(%struct.op* %46)
  br label %cond.end

cond.end:                                         ; preds = %cond.false44, %cond.true41
  %cond = phi %struct.op* [ null, %cond.true41 ], [ %call47, %cond.false44 ]
  %47 = bitcast %struct.op* %cond to %struct.binop*
  store %struct.binop* %47, %struct.binop** %binop, align 8
  %48 = load %struct.binop*, %struct.binop** %binop, align 8
  %op_next = getelementptr inbounds %struct.binop, %struct.binop* %48, i32 0, i32 0
  %49 = load %struct.op*, %struct.op** %op_next, align 8
  %tobool48 = icmp ne %struct.op* %49, null
  br i1 %tobool48, label %if.then55, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %cond.end
  %50 = load %struct.binop*, %struct.binop** %binop, align 8
  %op_type49 = getelementptr inbounds %struct.binop, %struct.binop* %50, i32 0, i32 4
  %bf.load50 = load i16, i16* %op_type49, align 8
  %bf.clear51 = and i16 %bf.load50, 511
  %bf.cast = zext i16 %bf.clear51 to i32
  %51 = load i32, i32* %type.addr, align 4
  %conv52 = trunc i32 %51 to i16
  %conv53 = zext i16 %conv52 to i32
  %cmp = icmp ne i32 %bf.cast, %conv53
  br i1 %cmp, label %if.then55, label %if.end56

if.then55:                                        ; preds = %lor.lhs.false, %cond.end
  %52 = load %struct.binop*, %struct.binop** %binop, align 8
  %53 = bitcast %struct.binop* %52 to %struct.op*
  store %struct.op* %53, %struct.op** %retval, align 8
  br label %return

if.end56:                                         ; preds = %lor.lhs.false
  %54 = load %struct.binop*, %struct.binop** %binop, align 8
  %55 = bitcast %struct.binop* %54 to %struct.op*
  %call57 = call %struct.op* @S_op_std_init(%struct.op* %55)
  %call58 = call %struct.op* @S_op_integerize(%struct.op* %call57)
  %call59 = call %struct.op* @S_fold_constants(%struct.op* %call58)
  store %struct.op* %call59, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %if.end56, %if.then55
  %56 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %56
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pmruntime(%struct.op* %o, %struct.op* %expr, %struct.op* %repl, i1 zeroext %isreg, i32 %floor) #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %o.addr = alloca %struct.op*, align 8
  %expr.addr = alloca %struct.op*, align 8
  %repl.addr = alloca %struct.op*, align 8
  %isreg.addr = alloca i8, align 1
  %floor.addr = alloca i32, align 4
  %pm = alloca %struct.pmop*, align 8
  %rcop = alloca %struct.logop*, align 8
  %repl_has_vars = alloca i32, align 4
  %is_trans = alloca i8, align 1
  %is_compiletime = alloca i8, align 1
  %has_code = alloca i8, align 1
  %o13 = alloca %struct.op*, align 8
  %o71 = alloca %struct.op*, align 8
  %leaveop = alloca %struct.listop*, align 8
  %scope = alloca %struct.op*, align 8
  %rx_flags = alloca i32, align 4
  %eng = alloca %struct.regexp_engine*, align 8
  %re = alloca %struct.p5rx*, align 8
  %cv = alloca %struct.cv*, align 8
  %qr = alloca %struct.op*, align 8
  %reglist = alloca i8, align 1
  %cv_targ = alloca i64, align 8
  %curop = alloca %struct.op*, align 8
  %konst = alloca i8, align 1
  %sib = alloca %struct.op*, align 8
  %kid = alloca %struct.op*, align 8
  store %struct.op* %o, %struct.op** %o.addr, align 8
  store %struct.op* %expr, %struct.op** %expr.addr, align 8
  store %struct.op* %repl, %struct.op** %repl.addr, align 8
  %frombool = zext i1 %isreg to i8
  store i8 %frombool, i8* %isreg.addr, align 1
  store i32 %floor, i32* %floor.addr, align 4
  store i32 0, i32* %repl_has_vars, align 4
  %0 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type = getelementptr inbounds %struct.op, %struct.op* %0, i32 0, i32 4
  %bf.load = load i16, i16* %op_type, align 8
  %bf.clear = and i16 %bf.load, 511
  %bf.cast = zext i16 %bf.clear to i32
  %cmp = icmp eq i32 %bf.cast, 35
  br i1 %cmp, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %entry
  %1 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type1 = getelementptr inbounds %struct.op, %struct.op* %1, i32 0, i32 4
  %bf.load2 = load i16, i16* %op_type1, align 8
  %bf.clear3 = and i16 %bf.load2, 511
  %bf.cast4 = zext i16 %bf.clear3 to i32
  %cmp5 = icmp eq i32 %bf.cast4, 36
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %entry
  %2 = phi i1 [ true, %entry ], [ %cmp5, %lor.rhs ]
  %frombool6 = zext i1 %2 to i8
  store i8 %frombool6, i8* %is_trans, align 1
  %3 = load i8, i8* %is_trans, align 1
  %tobool = trunc i8 %3 to i1
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %lor.end
  %4 = load %struct.op*, %struct.op** %o.addr, align 8
  %5 = load %struct.op*, %struct.op** %expr.addr, align 8
  %6 = load %struct.op*, %struct.op** %repl.addr, align 8
  %call = call %struct.op* @S_pmtrans(%struct.op* %4, %struct.op* %5, %struct.op* %6)
  store %struct.op* %call, %struct.op** %retval, align 8
  br label %return

if.end:                                           ; preds = %lor.end
  store i8 1, i8* %is_compiletime, align 1
  store i8 0, i8* %has_code, align 1
  %7 = load %struct.op*, %struct.op** %expr.addr, align 8
  %op_type7 = getelementptr inbounds %struct.op, %struct.op* %7, i32 0, i32 4
  %bf.load8 = load i16, i16* %op_type7, align 8
  %bf.clear9 = and i16 %bf.load8, 511
  %bf.cast10 = zext i16 %bf.clear9 to i32
  %cmp11 = icmp eq i32 %bf.cast10, 158
  br i1 %cmp11, label %if.then12, label %if.else48

if.then12:                                        ; preds = %if.end
  %8 = load %struct.op*, %struct.op** %expr.addr, align 8
  %9 = bitcast %struct.op* %8 to %struct.listop*
  %op_first = getelementptr inbounds %struct.listop, %struct.listop* %9, i32 0, i32 7
  %10 = load %struct.op*, %struct.op** %op_first, align 8
  store %struct.op* %10, %struct.op** %o13, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then12
  %11 = load %struct.op*, %struct.op** %o13, align 8
  %tobool14 = icmp ne %struct.op* %11, null
  br i1 %tobool14, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %12 = load %struct.op*, %struct.op** %o13, align 8
  %op_type15 = getelementptr inbounds %struct.op, %struct.op* %12, i32 0, i32 4
  %bf.load16 = load i16, i16* %op_type15, align 8
  %bf.clear17 = and i16 %bf.load16, 511
  %bf.cast18 = zext i16 %bf.clear17 to i32
  %cmp19 = icmp eq i32 %bf.cast18, 0
  br i1 %cmp19, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %for.body
  %13 = load %struct.op*, %struct.op** %o13, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %13, i32 0, i32 5
  %14 = load i8, i8* %op_flags, align 2
  %conv = zext i8 %14 to i32
  %and = and i32 %conv, 128
  %tobool20 = icmp ne i32 %and, 0
  br i1 %tobool20, label %if.then21, label %if.else

if.then21:                                        ; preds = %land.lhs.true
  store i8 1, i8* %has_code, align 1
  %15 = load %struct.op*, %struct.op** %o13, align 8
  %op_sibling = getelementptr inbounds %struct.op, %struct.op* %15, i32 0, i32 1
  %16 = load %struct.op*, %struct.op** %op_sibling, align 8
  %tobool22 = icmp ne %struct.op* %16, null
  br i1 %tobool22, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then21
  br i1 true, label %cond.false24, label %cond.true23

cond.false:                                       ; preds = %if.then21
  br i1 false, label %cond.false24, label %cond.true23

cond.true23:                                      ; preds = %cond.false, %cond.true
  br i1 true, label %if.then25, label %if.end28

cond.false24:                                     ; preds = %cond.false, %cond.true
  br i1 false, label %if.then25, label %if.end28

if.then25:                                        ; preds = %cond.false24, %cond.true23
  %17 = load %struct.op*, %struct.op** %expr.addr, align 8
  %18 = load %struct.op*, %struct.op** %o13, align 8
  %call26 = call %struct.op* @Perl_newSVOP(i32 5, i32 0, %struct.sv* @PL_sv_no)
  %call27 = call %struct.op* @Perl_op_sibling_splice(%struct.op* %17, %struct.op* %18, i32 0, %struct.op* %call26)
  br label %if.end28

if.end28:                                         ; preds = %if.then25, %cond.false24, %cond.true23
  %19 = load %struct.op*, %struct.op** %o13, align 8
  %op_sibling29 = getelementptr inbounds %struct.op, %struct.op* %19, i32 0, i32 1
  %20 = load %struct.op*, %struct.op** %op_sibling29, align 8
  %add.ptr = getelementptr inbounds %struct.op, %struct.op* %20, i64 0
  %21 = load %struct.op*, %struct.op** %o13, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %21, i32 0, i32 0
  store %struct.op* %add.ptr, %struct.op** %op_next, align 8
  br label %if.end45

if.else:                                          ; preds = %land.lhs.true, %for.body
  %22 = load %struct.op*, %struct.op** %o13, align 8
  %op_type30 = getelementptr inbounds %struct.op, %struct.op* %22, i32 0, i32 4
  %bf.load31 = load i16, i16* %op_type30, align 8
  %bf.clear32 = and i16 %bf.load31, 511
  %bf.cast33 = zext i16 %bf.clear32 to i32
  %cmp34 = icmp ne i32 %bf.cast33, 5
  br i1 %cmp34, label %land.lhs.true36, label %if.end44

land.lhs.true36:                                  ; preds = %if.else
  %23 = load %struct.op*, %struct.op** %o13, align 8
  %op_type37 = getelementptr inbounds %struct.op, %struct.op* %23, i32 0, i32 4
  %bf.load38 = load i16, i16* %op_type37, align 8
  %bf.clear39 = and i16 %bf.load38, 511
  %bf.cast40 = zext i16 %bf.clear39 to i32
  %cmp41 = icmp ne i32 %bf.cast40, 3
  br i1 %cmp41, label %if.then43, label %if.end44

if.then43:                                        ; preds = %land.lhs.true36
  store i8 0, i8* %is_compiletime, align 1
  br label %if.end44

if.end44:                                         ; preds = %if.then43, %land.lhs.true36, %if.else
  br label %if.end45

if.end45:                                         ; preds = %if.end44, %if.end28
  br label %for.inc

for.inc:                                          ; preds = %if.end45
  %24 = load %struct.op*, %struct.op** %o13, align 8
  %op_sibling46 = getelementptr inbounds %struct.op, %struct.op* %24, i32 0, i32 1
  %25 = load %struct.op*, %struct.op** %op_sibling46, align 8
  %add.ptr47 = getelementptr inbounds %struct.op, %struct.op* %25, i64 0
  store %struct.op* %add.ptr47, %struct.op** %o13, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end57

if.else48:                                        ; preds = %if.end
  %26 = load %struct.op*, %struct.op** %expr.addr, align 8
  %op_type49 = getelementptr inbounds %struct.op, %struct.op* %26, i32 0, i32 4
  %bf.load50 = load i16, i16* %op_type49, align 8
  %bf.clear51 = and i16 %bf.load50, 511
  %bf.cast52 = zext i16 %bf.clear51 to i32
  %cmp53 = icmp ne i32 %bf.cast52, 5
  br i1 %cmp53, label %if.then55, label %if.end56

if.then55:                                        ; preds = %if.else48
  store i8 0, i8* %is_compiletime, align 1
  br label %if.end56

if.end56:                                         ; preds = %if.then55, %if.else48
  br label %if.end57

if.end57:                                         ; preds = %if.end56, %for.end
  %27 = load %struct.op*, %struct.op** %expr.addr, align 8
  %op_next58 = getelementptr inbounds %struct.op, %struct.op* %27, i32 0, i32 0
  %28 = load %struct.op*, %struct.op** %op_next58, align 8
  %tobool59 = icmp ne %struct.op* %28, null
  br i1 %tobool59, label %cond.true60, label %cond.false62

cond.true60:                                      ; preds = %if.end57
  %29 = load %struct.op*, %struct.op** %expr.addr, align 8
  %op_next61 = getelementptr inbounds %struct.op, %struct.op* %29, i32 0, i32 0
  %30 = load %struct.op*, %struct.op** %op_next61, align 8
  br label %cond.end

cond.false62:                                     ; preds = %if.end57
  %31 = load %struct.op*, %struct.op** %expr.addr, align 8
  %call63 = call %struct.op* @Perl_op_linklist(%struct.op* %31)
  br label %cond.end

cond.end:                                         ; preds = %cond.false62, %cond.true60
  %cond = phi %struct.op* [ %30, %cond.true60 ], [ %call63, %cond.false62 ]
  %32 = load %struct.op*, %struct.op** %expr.addr, align 8
  %op_type64 = getelementptr inbounds %struct.op, %struct.op* %32, i32 0, i32 4
  %bf.load65 = load i16, i16* %op_type64, align 8
  %bf.clear66 = and i16 %bf.load65, 511
  %bf.cast67 = zext i16 %bf.clear66 to i32
  %cmp68 = icmp eq i32 %bf.cast67, 158
  br i1 %cmp68, label %if.then70, label %if.else142

if.then70:                                        ; preds = %cond.end
  %33 = load %struct.op*, %struct.op** %expr.addr, align 8
  %34 = bitcast %struct.op* %33 to %struct.listop*
  %op_first72 = getelementptr inbounds %struct.listop, %struct.listop* %34, i32 0, i32 7
  %35 = load %struct.op*, %struct.op** %op_first72, align 8
  store %struct.op* %35, %struct.op** %o71, align 8
  br label %for.cond73

for.cond73:                                       ; preds = %for.inc138, %if.then70
  %36 = load %struct.op*, %struct.op** %o71, align 8
  %tobool74 = icmp ne %struct.op* %36, null
  br i1 %tobool74, label %for.body75, label %for.end141

for.body75:                                       ; preds = %for.cond73
  %37 = load %struct.op*, %struct.op** %o71, align 8
  %op_type76 = getelementptr inbounds %struct.op, %struct.op* %37, i32 0, i32 4
  %bf.load77 = load i16, i16* %op_type76, align 8
  %bf.clear78 = and i16 %bf.load77, 511
  %bf.cast79 = zext i16 %bf.clear78 to i32
  %cmp80 = icmp eq i32 %bf.cast79, 10
  br i1 %cmp80, label %if.then88, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %for.body75
  %38 = load %struct.op*, %struct.op** %o71, align 8
  %op_type82 = getelementptr inbounds %struct.op, %struct.op* %38, i32 0, i32 4
  %bf.load83 = load i16, i16* %op_type82, align 8
  %bf.clear84 = and i16 %bf.load83, 511
  %bf.cast85 = zext i16 %bf.clear84 to i32
  %cmp86 = icmp eq i32 %bf.cast85, 135
  br i1 %cmp86, label %if.then88, label %if.end92

if.then88:                                        ; preds = %lor.lhs.false, %for.body75
  %39 = load %struct.op*, %struct.op** %o71, align 8
  %op_flags89 = getelementptr inbounds %struct.op, %struct.op* %39, i32 0, i32 5
  %40 = load i8, i8* %op_flags89, align 2
  %conv90 = zext i8 %40 to i32
  %or = or i32 %conv90, 19
  %conv91 = trunc i32 %or to i8
  store i8 %conv91, i8* %op_flags89, align 2
  br label %for.inc138

if.end92:                                         ; preds = %lor.lhs.false
  %41 = load %struct.op*, %struct.op** %o71, align 8
  %op_type93 = getelementptr inbounds %struct.op, %struct.op* %41, i32 0, i32 4
  %bf.load94 = load i16, i16* %op_type93, align 8
  %bf.clear95 = and i16 %bf.load94, 511
  %bf.cast96 = zext i16 %bf.clear95 to i32
  %cmp97 = icmp eq i32 %bf.cast96, 0
  br i1 %cmp97, label %land.lhs.true99, label %if.then104

land.lhs.true99:                                  ; preds = %if.end92
  %42 = load %struct.op*, %struct.op** %o71, align 8
  %op_flags100 = getelementptr inbounds %struct.op, %struct.op* %42, i32 0, i32 5
  %43 = load i8, i8* %op_flags100, align 2
  %conv101 = zext i8 %43 to i32
  %and102 = and i32 %conv101, 128
  %tobool103 = icmp ne i32 %and102, 0
  br i1 %tobool103, label %if.end105, label %if.then104

if.then104:                                       ; preds = %land.lhs.true99, %if.end92
  br label %for.inc138

if.end105:                                        ; preds = %land.lhs.true99
  %44 = load %struct.op*, %struct.op** %o71, align 8
  %op_next106 = getelementptr inbounds %struct.op, %struct.op* %44, i32 0, i32 0
  store %struct.op* null, %struct.op** %op_next106, align 8
  %45 = load %struct.op*, %struct.op** %o71, align 8
  %call107 = call %struct.op* @Perl_scalar(%struct.op* %45)
  %46 = load %struct.op*, %struct.op** %o71, align 8
  %op_next108 = getelementptr inbounds %struct.op, %struct.op* %46, i32 0, i32 0
  %47 = load %struct.op*, %struct.op** %op_next108, align 8
  %tobool109 = icmp ne %struct.op* %47, null
  br i1 %tobool109, label %cond.true110, label %cond.false112

cond.true110:                                     ; preds = %if.end105
  %48 = load %struct.op*, %struct.op** %o71, align 8
  %op_next111 = getelementptr inbounds %struct.op, %struct.op* %48, i32 0, i32 0
  %49 = load %struct.op*, %struct.op** %op_next111, align 8
  br label %cond.end114

cond.false112:                                    ; preds = %if.end105
  %50 = load %struct.op*, %struct.op** %o71, align 8
  %call113 = call %struct.op* @Perl_op_linklist(%struct.op* %50)
  br label %cond.end114

cond.end114:                                      ; preds = %cond.false112, %cond.true110
  %cond115 = phi %struct.op* [ %49, %cond.true110 ], [ %call113, %cond.false112 ]
  %51 = load %struct.op*, %struct.op** %o71, align 8
  %52 = bitcast %struct.op* %51 to %struct.listop*
  %op_first116 = getelementptr inbounds %struct.listop, %struct.listop* %52, i32 0, i32 7
  %53 = load %struct.op*, %struct.op** %op_first116, align 8
  %op_type117 = getelementptr inbounds %struct.op, %struct.op* %53, i32 0, i32 4
  %bf.load118 = load i16, i16* %op_type117, align 8
  %bf.clear119 = and i16 %bf.load118, 511
  %bf.cast120 = zext i16 %bf.clear119 to i32
  %cmp121 = icmp eq i32 %bf.cast120, 197
  br i1 %cmp121, label %if.then123, label %if.else130

if.then123:                                       ; preds = %cond.end114
  %54 = load %struct.op*, %struct.op** %o71, align 8
  %55 = bitcast %struct.op* %54 to %struct.listop*
  %op_first124 = getelementptr inbounds %struct.listop, %struct.listop* %55, i32 0, i32 7
  %56 = load %struct.op*, %struct.op** %op_first124, align 8
  %57 = bitcast %struct.op* %56 to %struct.listop*
  store %struct.listop* %57, %struct.listop** %leaveop, align 8
  %58 = load %struct.listop*, %struct.listop** %leaveop, align 8
  %op_first125 = getelementptr inbounds %struct.listop, %struct.listop* %58, i32 0, i32 7
  %59 = load %struct.op*, %struct.op** %op_first125, align 8
  %op_sibling126 = getelementptr inbounds %struct.op, %struct.op* %59, i32 0, i32 1
  %60 = load %struct.op*, %struct.op** %op_sibling126, align 8
  %add.ptr127 = getelementptr inbounds %struct.op, %struct.op* %60, i64 0
  %61 = load %struct.op*, %struct.op** %o71, align 8
  %op_next128 = getelementptr inbounds %struct.op, %struct.op* %61, i32 0, i32 0
  store %struct.op* %add.ptr127, %struct.op** %op_next128, align 8
  %62 = load %struct.listop*, %struct.listop** %leaveop, align 8
  %op_next129 = getelementptr inbounds %struct.listop, %struct.listop* %62, i32 0, i32 0
  store %struct.op* null, %struct.op** %op_next129, align 8
  %63 = load %struct.listop*, %struct.listop** %leaveop, align 8
  %64 = bitcast %struct.listop* %63 to %struct.op*
  call void @Perl_op_null(%struct.op* %64)
  br label %if.end133

if.else130:                                       ; preds = %cond.end114
  %65 = load %struct.op*, %struct.op** %o71, align 8
  %66 = bitcast %struct.op* %65 to %struct.listop*
  %op_first131 = getelementptr inbounds %struct.listop, %struct.listop* %66, i32 0, i32 7
  %67 = load %struct.op*, %struct.op** %op_first131, align 8
  store %struct.op* %67, %struct.op** %scope, align 8
  %68 = load %struct.op*, %struct.op** %scope, align 8
  %op_next132 = getelementptr inbounds %struct.op, %struct.op* %68, i32 0, i32 0
  store %struct.op* null, %struct.op** %op_next132, align 8
  %69 = load %struct.op*, %struct.op** %scope, align 8
  call void @Perl_op_null(%struct.op* %69)
  br label %if.end133

if.end133:                                        ; preds = %if.else130, %if.then123
  %70 = load void (%struct.op*)*, void (%struct.op*)** @PL_peepp, align 8
  %71 = load %struct.op*, %struct.op** %o71, align 8
  call void %70(%struct.op* %71)
  %72 = load %struct.op*, %struct.op** %o71, align 8
  %op_next134 = getelementptr inbounds %struct.op, %struct.op* %72, i32 0, i32 0
  call void @S_prune_chain_head(%struct.op** %op_next134)
  %73 = load i8, i8* %is_compiletime, align 1
  %tobool135 = trunc i8 %73 to i1
  br i1 %tobool135, label %if.then136, label %if.end137

if.then136:                                       ; preds = %if.end133
  %74 = load %struct.op*, %struct.op** %o71, align 8
  call void @Perl_finalize_optree(%struct.op* %74)
  br label %if.end137

if.end137:                                        ; preds = %if.then136, %if.end133
  br label %for.inc138

for.inc138:                                       ; preds = %if.end137, %if.then104, %if.then88
  %75 = load %struct.op*, %struct.op** %o71, align 8
  %op_sibling139 = getelementptr inbounds %struct.op, %struct.op* %75, i32 0, i32 1
  %76 = load %struct.op*, %struct.op** %op_sibling139, align 8
  %add.ptr140 = getelementptr inbounds %struct.op, %struct.op* %76, i64 0
  store %struct.op* %add.ptr140, %struct.op** %o71, align 8
  br label %for.cond73

for.end141:                                       ; preds = %for.cond73
  br label %if.end162

if.else142:                                       ; preds = %cond.end
  %77 = load %struct.op*, %struct.op** %expr.addr, align 8
  %op_type143 = getelementptr inbounds %struct.op, %struct.op* %77, i32 0, i32 4
  %bf.load144 = load i16, i16* %op_type143, align 8
  %bf.clear145 = and i16 %bf.load144, 511
  %bf.cast146 = zext i16 %bf.clear145 to i32
  %cmp147 = icmp eq i32 %bf.cast146, 10
  br i1 %cmp147, label %if.then156, label %lor.lhs.false149

lor.lhs.false149:                                 ; preds = %if.else142
  %78 = load %struct.op*, %struct.op** %expr.addr, align 8
  %op_type150 = getelementptr inbounds %struct.op, %struct.op* %78, i32 0, i32 4
  %bf.load151 = load i16, i16* %op_type150, align 8
  %bf.clear152 = and i16 %bf.load151, 511
  %bf.cast153 = zext i16 %bf.clear152 to i32
  %cmp154 = icmp eq i32 %bf.cast153, 135
  br i1 %cmp154, label %if.then156, label %if.end161

if.then156:                                       ; preds = %lor.lhs.false149, %if.else142
  %79 = load %struct.op*, %struct.op** %expr.addr, align 8
  %op_flags157 = getelementptr inbounds %struct.op, %struct.op* %79, i32 0, i32 5
  %80 = load i8, i8* %op_flags157, align 2
  %conv158 = zext i8 %80 to i32
  %or159 = or i32 %conv158, 19
  %conv160 = trunc i32 %or159 to i8
  store i8 %conv160, i8* %op_flags157, align 2
  br label %if.end161

if.end161:                                        ; preds = %if.then156, %lor.lhs.false149
  br label %if.end162

if.end162:                                        ; preds = %if.end161, %for.end141
  %81 = load i32, i32* getelementptr inbounds (%struct.cop, %struct.cop* @PL_compiling, i32 0, i32 10), align 8
  %or163 = or i32 %81, 256
  store i32 %or163, i32* getelementptr inbounds (%struct.cop, %struct.cop* @PL_compiling, i32 0, i32 10), align 8
  %82 = load %struct.op*, %struct.op** %o.addr, align 8
  %83 = bitcast %struct.op* %82 to %struct.pmop*
  store %struct.pmop* %83, %struct.pmop** %pm, align 8
  %84 = load i8, i8* %is_compiletime, align 1
  %tobool164 = trunc i8 %84 to i1
  br i1 %tobool164, label %if.then165, label %if.else240

if.then165:                                       ; preds = %if.end162
  %85 = load %struct.pmop*, %struct.pmop** %pm, align 8
  %op_pmflags = getelementptr inbounds %struct.pmop, %struct.pmop* %85, i32 0, i32 10
  %86 = load i32, i32* %op_pmflags, align 8
  %and166 = and i32 %86, 2047
  store i32 %and166, i32* %rx_flags, align 4
  %call167 = call %struct.regexp_engine* @Perl_current_re_engine()
  store %struct.regexp_engine* %call167, %struct.regexp_engine** %eng, align 8
  %87 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_flags168 = getelementptr inbounds %struct.op, %struct.op* %87, i32 0, i32 5
  %88 = load i8, i8* %op_flags168, align 2
  %conv169 = zext i8 %88 to i32
  %and170 = and i32 %conv169, 128
  %tobool171 = icmp ne i32 %and170, 0
  br i1 %tobool171, label %if.then172, label %if.end174

if.then172:                                       ; preds = %if.then165
  %89 = load i32, i32* %rx_flags, align 4
  %or173 = or i32 %89, 2048
  store i32 %or173, i32* %rx_flags, align 4
  br label %if.end174

if.end174:                                        ; preds = %if.then172, %if.then165
  %90 = load i8, i8* %has_code, align 1
  %tobool175 = trunc i8 %90 to i1
  br i1 %tobool175, label %lor.lhs.false176, label %if.then178

lor.lhs.false176:                                 ; preds = %if.end174
  %91 = load %struct.regexp_engine*, %struct.regexp_engine** %eng, align 8
  %op_comp = getelementptr inbounds %struct.regexp_engine, %struct.regexp_engine* %91, i32 0, i32 11
  %92 = load %struct.p5rx* (%struct.sv**, i32, %struct.op*, %struct.regexp_engine*, %struct.p5rx*, i8*, i32, i32)*, %struct.p5rx* (%struct.sv**, i32, %struct.op*, %struct.regexp_engine*, %struct.p5rx*, i8*, i32, i32)** %op_comp, align 8
  %tobool177 = icmp ne %struct.p5rx* (%struct.sv**, i32, %struct.op*, %struct.regexp_engine*, %struct.p5rx*, i8*, i32, i32)* %92, null
  br i1 %tobool177, label %if.else203, label %if.then178

if.then178:                                       ; preds = %lor.lhs.false176, %if.end174
  %93 = load %struct.pmop*, %struct.pmop** %pm, align 8
  %op_pmflags179 = getelementptr inbounds %struct.pmop, %struct.pmop* %93, i32 0, i32 10
  %94 = load i32, i32* %op_pmflags179, align 8
  %and180 = and i32 %94, 268435456
  %tobool181 = icmp ne i32 %and180, 0
  br i1 %tobool181, label %land.lhs.true182, label %if.end191

land.lhs.true182:                                 ; preds = %if.then178
  %95 = load i8, i8* %has_code, align 1
  %tobool183 = trunc i8 %95 to i1
  br i1 %tobool183, label %if.end191, label %if.then184

if.then184:                                       ; preds = %land.lhs.true182
  %96 = load %struct.cv*, %struct.cv** @PL_compcv, align 8
  call void @Perl_cv_forget_slab(%struct.cv* %96)
  br label %do.body

do.body:                                          ; preds = %if.then184
  %97 = load i32, i32* @PL_savestack_ix, align 4
  %98 = load i32, i32* %floor.addr, align 4
  %cmp185 = icmp sgt i32 %97, %98
  br i1 %cmp185, label %if.then187, label %if.end188

if.then187:                                       ; preds = %do.body
  %99 = load i32, i32* %floor.addr, align 4
  call void @Perl_leave_scope(i32 %99)
  br label %if.end188

if.end188:                                        ; preds = %if.then187, %do.body
  br label %do.end

do.end:                                           ; preds = %if.end188
  %100 = load %struct.pmop*, %struct.pmop** %pm, align 8
  %op_pmflags189 = getelementptr inbounds %struct.pmop, %struct.pmop* %100, i32 0, i32 10
  %101 = load i32, i32* %op_pmflags189, align 8
  %and190 = and i32 %101, -268435457
  store i32 %and190, i32* %op_pmflags189, align 8
  br label %if.end191

if.end191:                                        ; preds = %do.end, %land.lhs.true182, %if.then178
  %102 = load %struct.regexp_engine*, %struct.regexp_engine** %eng, align 8
  %op_comp192 = getelementptr inbounds %struct.regexp_engine, %struct.regexp_engine* %102, i32 0, i32 11
  %103 = load %struct.p5rx* (%struct.sv**, i32, %struct.op*, %struct.regexp_engine*, %struct.p5rx*, i8*, i32, i32)*, %struct.p5rx* (%struct.sv**, i32, %struct.op*, %struct.regexp_engine*, %struct.p5rx*, i8*, i32, i32)** %op_comp192, align 8
  %tobool193 = icmp ne %struct.p5rx* (%struct.sv**, i32, %struct.op*, %struct.regexp_engine*, %struct.p5rx*, i8*, i32, i32)* %103, null
  br i1 %tobool193, label %cond.true194, label %cond.false198

cond.true194:                                     ; preds = %if.end191
  %104 = load %struct.regexp_engine*, %struct.regexp_engine** %eng, align 8
  %op_comp195 = getelementptr inbounds %struct.regexp_engine, %struct.regexp_engine* %104, i32 0, i32 11
  %105 = load %struct.p5rx* (%struct.sv**, i32, %struct.op*, %struct.regexp_engine*, %struct.p5rx*, i8*, i32, i32)*, %struct.p5rx* (%struct.sv**, i32, %struct.op*, %struct.regexp_engine*, %struct.p5rx*, i8*, i32, i32)** %op_comp195, align 8
  %106 = load %struct.op*, %struct.op** %expr.addr, align 8
  %107 = load %struct.regexp_engine*, %struct.regexp_engine** %eng, align 8
  %108 = load i32, i32* %rx_flags, align 4
  %109 = load %struct.pmop*, %struct.pmop** %pm, align 8
  %op_pmflags196 = getelementptr inbounds %struct.pmop, %struct.pmop* %109, i32 0, i32 10
  %110 = load i32, i32* %op_pmflags196, align 8
  %call197 = call %struct.p5rx* %105(%struct.sv** null, i32 0, %struct.op* %106, %struct.regexp_engine* %107, %struct.p5rx* null, i8* null, i32 %108, i32 %110)
  br label %cond.end201

cond.false198:                                    ; preds = %if.end191
  %111 = load %struct.op*, %struct.op** %expr.addr, align 8
  %112 = load %struct.regexp_engine*, %struct.regexp_engine** %eng, align 8
  %113 = load i32, i32* %rx_flags, align 4
  %114 = load %struct.pmop*, %struct.pmop** %pm, align 8
  %op_pmflags199 = getelementptr inbounds %struct.pmop, %struct.pmop* %114, i32 0, i32 10
  %115 = load i32, i32* %op_pmflags199, align 8
  %call200 = call %struct.p5rx* @Perl_re_op_compile(%struct.sv** null, i32 0, %struct.op* %111, %struct.regexp_engine* %112, %struct.p5rx* null, i8* null, i32 %113, i32 %115)
  br label %cond.end201

cond.end201:                                      ; preds = %cond.false198, %cond.true194
  %cond202 = phi %struct.p5rx* [ %call197, %cond.true194 ], [ %call200, %cond.false198 ]
  %116 = load %struct.pmop*, %struct.pmop** %pm, align 8
  %op_pmregexp = getelementptr inbounds %struct.pmop, %struct.pmop* %116, i32 0, i32 9
  store %struct.p5rx* %cond202, %struct.p5rx** %op_pmregexp, align 8
  %117 = load %struct.op*, %struct.op** %expr.addr, align 8
  call void @Perl_op_free(%struct.op* %117)
  br label %if.end239

if.else203:                                       ; preds = %lor.lhs.false176
  %118 = load %struct.regexp_engine*, %struct.regexp_engine** %eng, align 8
  %op_comp204 = getelementptr inbounds %struct.regexp_engine, %struct.regexp_engine* %118, i32 0, i32 11
  %119 = load %struct.p5rx* (%struct.sv**, i32, %struct.op*, %struct.regexp_engine*, %struct.p5rx*, i8*, i32, i32)*, %struct.p5rx* (%struct.sv**, i32, %struct.op*, %struct.regexp_engine*, %struct.p5rx*, i8*, i32, i32)** %op_comp204, align 8
  %120 = load %struct.op*, %struct.op** %expr.addr, align 8
  %121 = load %struct.regexp_engine*, %struct.regexp_engine** %eng, align 8
  %122 = load i32, i32* %rx_flags, align 4
  %123 = load %struct.pmop*, %struct.pmop** %pm, align 8
  %op_pmflags205 = getelementptr inbounds %struct.pmop, %struct.pmop* %123, i32 0, i32 10
  %124 = load i32, i32* %op_pmflags205, align 8
  %125 = load i32, i32* getelementptr inbounds (%struct.cop, %struct.cop* @PL_compiling, i32 0, i32 10), align 8
  %and206 = and i32 %125, 2097152
  %tobool207 = icmp ne i32 %and206, 0
  %126 = zext i1 %tobool207 to i64
  %cond208 = select i1 %tobool207, i32 -2147483648, i32 0
  %or209 = or i32 %124, %cond208
  %call210 = call %struct.p5rx* %119(%struct.sv** null, i32 0, %struct.op* %120, %struct.regexp_engine* %121, %struct.p5rx* null, i8* null, i32 %122, i32 %or209)
  store %struct.p5rx* %call210, %struct.p5rx** %re, align 8
  %127 = load %struct.p5rx*, %struct.p5rx** %re, align 8
  %128 = load %struct.pmop*, %struct.pmop** %pm, align 8
  %op_pmregexp211 = getelementptr inbounds %struct.pmop, %struct.pmop* %128, i32 0, i32 9
  store %struct.p5rx* %127, %struct.p5rx** %op_pmregexp211, align 8
  %129 = load %struct.pmop*, %struct.pmop** %pm, align 8
  %op_pmflags212 = getelementptr inbounds %struct.pmop, %struct.pmop* %129, i32 0, i32 10
  %130 = load i32, i32* %op_pmflags212, align 8
  %and213 = and i32 %130, 268435456
  %tobool214 = icmp ne i32 %and213, 0
  br i1 %tobool214, label %if.then215, label %if.else236

if.then215:                                       ; preds = %if.else203
  %call216 = call %struct.op* @Perl_newPMOP(i32 32, i32 0)
  store %struct.op* %call216, %struct.op** %qr, align 8
  %131 = load %struct.op*, %struct.op** %expr.addr, align 8
  %132 = load %struct.op*, %struct.op** %qr, align 8
  %133 = bitcast %struct.op* %132 to %struct.pmop*
  %op_code_list = getelementptr inbounds %struct.pmop, %struct.pmop* %133, i32 0, i32 13
  store %struct.op* %131, %struct.op** %op_code_list, align 8
  br label %do.body217

do.body217:                                       ; preds = %if.then215
  %134 = load %struct.cv*, %struct.cv** @PL_compcv, align 8
  %tobool218 = icmp ne %struct.cv* %134, null
  br i1 %tobool218, label %if.then219, label %if.end220

if.then219:                                       ; preds = %do.body217
  %135 = load %struct.cv*, %struct.cv** @PL_compcv, align 8
  %sv_refcnt = getelementptr inbounds %struct.cv, %struct.cv* %135, i32 0, i32 1
  %136 = load i32, i32* %sv_refcnt, align 8
  %inc = add i32 %136, 1
  store i32 %inc, i32* %sv_refcnt, align 8
  br label %if.end220

if.end220:                                        ; preds = %if.then219, %do.body217
  br label %do.end221

do.end221:                                        ; preds = %if.end220
  %137 = load i32, i32* %floor.addr, align 4
  %138 = load %struct.op*, %struct.op** %qr, align 8
  %call222 = call %struct.cv* @Perl_newATTRSUB_x(i32 %137, %struct.op* null, %struct.op* null, %struct.op* null, %struct.op* %138, i1 zeroext false)
  store %struct.cv* %call222, %struct.cv** %cv, align 8
  %139 = load %struct.cv*, %struct.cv** %cv, align 8
  %140 = load %struct.p5rx*, %struct.p5rx** %re, align 8
  %call223 = call %struct.regexp* @S_ReANY(%struct.p5rx* %140)
  %qr_anoncv = getelementptr inbounds %struct.regexp, %struct.regexp* %call223, i32 0, i32 25
  store %struct.cv* %139, %struct.cv** %qr_anoncv, align 8
  %141 = load %struct.cv*, %struct.cv** %cv, align 8
  %142 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type224 = getelementptr inbounds %struct.op, %struct.op* %142, i32 0, i32 4
  %bf.load225 = load i16, i16* %op_type224, align 8
  %bf.clear226 = and i16 %bf.load225, 511
  %bf.cast227 = zext i16 %bf.clear226 to i32
  %call228 = call i64 @Perl_pad_add_anon(%struct.cv* %141, i32 %bf.cast227)
  br label %do.body229

do.body229:                                       ; preds = %do.end221
  %143 = load %struct.cv*, %struct.cv** %cv, align 8
  %tobool230 = icmp ne %struct.cv* %143, null
  br i1 %tobool230, label %if.then231, label %if.end234

if.then231:                                       ; preds = %do.body229
  %144 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_refcnt232 = getelementptr inbounds %struct.cv, %struct.cv* %144, i32 0, i32 1
  %145 = load i32, i32* %sv_refcnt232, align 8
  %inc233 = add i32 %145, 1
  store i32 %inc233, i32* %sv_refcnt232, align 8
  br label %if.end234

if.end234:                                        ; preds = %if.then231, %do.body229
  br label %do.end235

do.end235:                                        ; preds = %if.end234
  br label %if.end238

if.else236:                                       ; preds = %if.else203
  %146 = load %struct.op*, %struct.op** %expr.addr, align 8
  %147 = load %struct.pmop*, %struct.pmop** %pm, align 8
  %op_code_list237 = getelementptr inbounds %struct.pmop, %struct.pmop* %147, i32 0, i32 13
  store %struct.op* %146, %struct.op** %op_code_list237, align 8
  br label %if.end238

if.end238:                                        ; preds = %if.else236, %do.end235
  br label %if.end239

if.end239:                                        ; preds = %if.end238, %cond.end201
  br label %if.end360

if.else240:                                       ; preds = %if.end162
  store i64 0, i64* %cv_targ, align 8
  %148 = load i8, i8* %isreg.addr, align 1
  %tobool241 = trunc i8 %148 to i1
  br i1 %tobool241, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %if.else240
  %149 = load %struct.op*, %struct.op** %expr.addr, align 8
  %op_type243 = getelementptr inbounds %struct.op, %struct.op* %149, i32 0, i32 4
  %bf.load244 = load i16, i16* %op_type243, align 8
  %bf.clear245 = and i16 %bf.load244, 511
  %bf.cast246 = zext i16 %bf.clear245 to i32
  %cmp247 = icmp eq i32 %bf.cast246, 158
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.else240
  %150 = phi i1 [ false, %if.else240 ], [ %cmp247, %land.rhs ]
  %frombool249 = zext i1 %150 to i8
  store i8 %frombool249, i8* %reglist, align 1
  %151 = load i8, i8* %reglist, align 1
  %tobool250 = trunc i8 %151 to i1
  br i1 %tobool250, label %if.then251, label %if.end252

if.then251:                                       ; preds = %land.end
  %152 = load %struct.op*, %struct.op** %expr.addr, align 8
  call void @Perl_op_null(%struct.op* %152)
  br label %if.end252

if.end252:                                        ; preds = %if.then251, %land.end
  %153 = load i8, i8* %has_code, align 1
  %tobool253 = trunc i8 %153 to i1
  br i1 %tobool253, label %if.then254, label %if.end258

if.then254:                                       ; preds = %if.end252
  %154 = load %struct.op*, %struct.op** %expr.addr, align 8
  %155 = load %struct.pmop*, %struct.pmop** %pm, align 8
  %op_code_list255 = getelementptr inbounds %struct.pmop, %struct.pmop* %155, i32 0, i32 13
  store %struct.op* %154, %struct.op** %op_code_list255, align 8
  %156 = load %struct.pmop*, %struct.pmop** %pm, align 8
  %op_pmflags256 = getelementptr inbounds %struct.pmop, %struct.pmop* %156, i32 0, i32 10
  %157 = load i32, i32* %op_pmflags256, align 8
  %or257 = or i32 %157, 536870912
  store i32 %or257, i32* %op_pmflags256, align 8
  br label %if.end258

if.end258:                                        ; preds = %if.then254, %if.end252
  %158 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_flags259 = getelementptr inbounds %struct.op, %struct.op* %158, i32 0, i32 5
  %159 = load i8, i8* %op_flags259, align 2
  %conv260 = zext i8 %159 to i32
  %and261 = and i32 %conv260, 128
  %tobool262 = icmp ne i32 %and261, 0
  br i1 %tobool262, label %if.then263, label %if.end266

if.then263:                                       ; preds = %if.end258
  %160 = load %struct.pmop*, %struct.pmop** %pm, align 8
  %op_pmflags264 = getelementptr inbounds %struct.pmop, %struct.pmop* %160, i32 0, i32 10
  %161 = load i32, i32* %op_pmflags264, align 8
  %or265 = or i32 %161, 2048
  store i32 %or265, i32* %op_pmflags264, align 8
  br label %if.end266

if.end266:                                        ; preds = %if.then263, %if.end258
  %162 = load %struct.pmop*, %struct.pmop** %pm, align 8
  %op_pmflags267 = getelementptr inbounds %struct.pmop, %struct.pmop* %162, i32 0, i32 10
  %163 = load i32, i32* %op_pmflags267, align 8
  %and268 = and i32 %163, 8388608
  %tobool269 = icmp ne i32 %and268, 0
  br i1 %tobool269, label %if.then273, label %lor.lhs.false270

lor.lhs.false270:                                 ; preds = %if.end266
  %164 = load i8, i8* @PL_tainting, align 1
  %tobool271 = trunc i8 %164 to i1
  br i1 %tobool271, label %if.then273, label %if.end278

if.then273:                                       ; preds = %lor.lhs.false270, %if.end266
  %165 = load i8, i8* @PL_tainting, align 1
  %tobool274 = trunc i8 %165 to i1
  %166 = zext i1 %tobool274 to i64
  %cond276 = select i1 %tobool274, i32 29, i32 28
  %167 = load %struct.op*, %struct.op** %expr.addr, align 8
  %call277 = call %struct.op* @Perl_newUNOP(i32 %cond276, i32 0, %struct.op* %167)
  store %struct.op* %call277, %struct.op** %expr.addr, align 8
  br label %if.end278

if.end278:                                        ; preds = %if.then273, %lor.lhs.false270
  %168 = load %struct.pmop*, %struct.pmop** %pm, align 8
  %op_pmflags279 = getelementptr inbounds %struct.pmop, %struct.pmop* %168, i32 0, i32 10
  %169 = load i32, i32* %op_pmflags279, align 8
  %and280 = and i32 %169, 268435456
  %tobool281 = icmp ne i32 %and280, 0
  br i1 %tobool281, label %if.then282, label %if.end298

if.then282:                                       ; preds = %if.end278
  br label %do.body283

do.body283:                                       ; preds = %if.then282
  %170 = load %struct.cv*, %struct.cv** @PL_compcv, align 8
  %tobool284 = icmp ne %struct.cv* %170, null
  br i1 %tobool284, label %if.then285, label %if.end288

if.then285:                                       ; preds = %do.body283
  %171 = load %struct.cv*, %struct.cv** @PL_compcv, align 8
  %sv_refcnt286 = getelementptr inbounds %struct.cv, %struct.cv* %171, i32 0, i32 1
  %172 = load i32, i32* %sv_refcnt286, align 8
  %inc287 = add i32 %172, 1
  store i32 %inc287, i32* %sv_refcnt286, align 8
  br label %if.end288

if.end288:                                        ; preds = %if.then285, %do.body283
  br label %do.end289

do.end289:                                        ; preds = %if.end288
  %173 = load %struct.cv*, %struct.cv** @PL_compcv, align 8
  %sv_any = getelementptr inbounds %struct.cv, %struct.cv* %173, i32 0, i32 0
  %174 = load %struct.xpvcv*, %struct.xpvcv** %sv_any, align 8
  %175 = bitcast %struct.xpvcv* %174 to i8*
  %176 = bitcast i8* %175 to %struct.xpvcv*
  %xcv_flags = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %176, i32 0, i32 12
  %177 = load i32, i32* %xcv_flags, align 4
  %or290 = or i32 %177, 2
  store i32 %or290, i32* %xcv_flags, align 4
  %178 = load i32, i32* %floor.addr, align 4
  %179 = load %struct.op*, %struct.op** %expr.addr, align 8
  %call291 = call %struct.cv* @Perl_newATTRSUB_x(i32 %178, %struct.op* null, %struct.op* null, %struct.op* null, %struct.op* %179, i1 zeroext false)
  %180 = bitcast %struct.cv* %call291 to i8*
  %181 = bitcast i8* %180 to %struct.sv*
  %call292 = call %struct.op* @Perl_newSVOP(i32 18, i32 0, %struct.sv* %181)
  store %struct.op* %call292, %struct.op** %expr.addr, align 8
  %182 = load %struct.op*, %struct.op** %expr.addr, align 8
  %op_targ = getelementptr inbounds %struct.op, %struct.op* %182, i32 0, i32 3
  %183 = load i64, i64* %op_targ, align 8
  store i64 %183, i64* %cv_targ, align 8
  %184 = load %struct.op*, %struct.op** %expr.addr, align 8
  %call293 = call %struct.op* @Perl_newUNOP(i32 20, i32 0, %struct.op* %184)
  store %struct.op* %call293, %struct.op** %expr.addr, align 8
  %185 = load %struct.op*, %struct.op** %expr.addr, align 8
  %call294 = call %struct.op* @Perl_scalar(%struct.op* %185)
  %call295 = call %struct.op* @Perl_newUNOP(i32 185, i32 0, %struct.op* %call294)
  %call296 = call %struct.op* @S_force_list(%struct.op* %call295, i1 zeroext true)
  %call297 = call %struct.op* @Perl_list(%struct.op* %call296)
  store %struct.op* %call297, %struct.op** %expr.addr, align 8
  br label %if.end298

if.end298:                                        ; preds = %do.end289, %if.end278
  %186 = load %struct.op*, %struct.op** %expr.addr, align 8
  %call299 = call %struct.op* @Perl_scalar(%struct.op* %186)
  %187 = load %struct.op*, %struct.op** %o.addr, align 8
  %call300 = call %struct.logop* @S_alloc_LOGOP(i32 30, %struct.op* %call299, %struct.op* %187)
  store %struct.logop* %call300, %struct.logop** %rcop, align 8
  %188 = load i32, i32* getelementptr inbounds (%struct.cop, %struct.cop* @PL_compiling, i32 0, i32 10), align 8
  %and301 = and i32 %188, 2097152
  %tobool302 = icmp ne i32 %and301, 0
  %189 = zext i1 %tobool302 to i64
  %cond303 = select i1 %tobool302, i32 128, i32 0
  %190 = load i8, i8* %reglist, align 1
  %tobool304 = trunc i8 %190 to i1
  %191 = zext i1 %tobool304 to i64
  %cond306 = select i1 %tobool304, i32 64, i32 0
  %or307 = or i32 %cond303, %cond306
  %192 = load %struct.logop*, %struct.logop** %rcop, align 8
  %op_flags308 = getelementptr inbounds %struct.logop, %struct.logop* %192, i32 0, i32 5
  %193 = load i8, i8* %op_flags308, align 2
  %conv309 = zext i8 %193 to i32
  %or310 = or i32 %conv309, %or307
  %conv311 = trunc i32 %or310 to i8
  store i8 %conv311, i8* %op_flags308, align 2
  %194 = load i64, i64* %cv_targ, align 8
  %195 = load %struct.logop*, %struct.logop** %rcop, align 8
  %op_targ312 = getelementptr inbounds %struct.logop, %struct.logop* %195, i32 0, i32 3
  store i64 %194, i64* %op_targ312, align 8
  %196 = load i32, i32* getelementptr inbounds (%struct.cop, %struct.cop* @PL_compiling, i32 0, i32 10), align 8
  %and313 = and i32 %196, 2097152
  %tobool314 = icmp ne i32 %and313, 0
  br i1 %tobool314, label %if.then315, label %if.end316

if.then315:                                       ; preds = %if.end298
  call void @S_set_haseval()
  br label %if.end316

if.end316:                                        ; preds = %if.then315, %if.end298
  %197 = load %struct.op*, %struct.op** %expr.addr, align 8
  %op_type317 = getelementptr inbounds %struct.op, %struct.op* %197, i32 0, i32 4
  %bf.load318 = load i16, i16* %op_type317, align 8
  %bf.clear319 = and i16 %bf.load318, 511
  %bf.cast320 = zext i16 %bf.clear319 to i32
  %cmp321 = icmp eq i32 %bf.cast320, 29
  br i1 %cmp321, label %if.then330, label %lor.lhs.false323

lor.lhs.false323:                                 ; preds = %if.end316
  %198 = load %struct.op*, %struct.op** %expr.addr, align 8
  %op_type324 = getelementptr inbounds %struct.op, %struct.op* %198, i32 0, i32 4
  %bf.load325 = load i16, i16* %op_type324, align 8
  %bf.clear326 = and i16 %bf.load325, 511
  %bf.cast327 = zext i16 %bf.clear326 to i32
  %cmp328 = icmp eq i32 %bf.cast327, 28
  br i1 %cmp328, label %if.then330, label %if.else342

if.then330:                                       ; preds = %lor.lhs.false323, %if.end316
  %199 = load %struct.op*, %struct.op** %expr.addr, align 8
  %op_next331 = getelementptr inbounds %struct.op, %struct.op* %199, i32 0, i32 0
  %200 = load %struct.op*, %struct.op** %op_next331, align 8
  %tobool332 = icmp ne %struct.op* %200, null
  br i1 %tobool332, label %cond.true333, label %cond.false335

cond.true333:                                     ; preds = %if.then330
  %201 = load %struct.op*, %struct.op** %expr.addr, align 8
  %op_next334 = getelementptr inbounds %struct.op, %struct.op* %201, i32 0, i32 0
  %202 = load %struct.op*, %struct.op** %op_next334, align 8
  br label %cond.end337

cond.false335:                                    ; preds = %if.then330
  %203 = load %struct.op*, %struct.op** %expr.addr, align 8
  %call336 = call %struct.op* @Perl_op_linklist(%struct.op* %203)
  br label %cond.end337

cond.end337:                                      ; preds = %cond.false335, %cond.true333
  %cond338 = phi %struct.op* [ %202, %cond.true333 ], [ %call336, %cond.false335 ]
  %204 = load %struct.op*, %struct.op** %expr.addr, align 8
  %205 = load %struct.logop*, %struct.logop** %rcop, align 8
  %op_next339 = getelementptr inbounds %struct.logop, %struct.logop* %205, i32 0, i32 0
  store %struct.op* %204, %struct.op** %op_next339, align 8
  %206 = load %struct.logop*, %struct.logop** %rcop, align 8
  %207 = bitcast %struct.logop* %206 to %struct.op*
  %208 = load %struct.op*, %struct.op** %expr.addr, align 8
  %209 = bitcast %struct.op* %208 to %struct.unop*
  %op_first340 = getelementptr inbounds %struct.unop, %struct.unop* %209, i32 0, i32 7
  %210 = load %struct.op*, %struct.op** %op_first340, align 8
  %op_next341 = getelementptr inbounds %struct.op, %struct.op* %210, i32 0, i32 0
  store %struct.op* %207, %struct.op** %op_next341, align 8
  br label %if.end353

if.else342:                                       ; preds = %lor.lhs.false323
  %211 = load %struct.op*, %struct.op** %expr.addr, align 8
  %op_next343 = getelementptr inbounds %struct.op, %struct.op* %211, i32 0, i32 0
  %212 = load %struct.op*, %struct.op** %op_next343, align 8
  %tobool344 = icmp ne %struct.op* %212, null
  br i1 %tobool344, label %cond.true345, label %cond.false347

cond.true345:                                     ; preds = %if.else342
  %213 = load %struct.op*, %struct.op** %expr.addr, align 8
  %op_next346 = getelementptr inbounds %struct.op, %struct.op* %213, i32 0, i32 0
  %214 = load %struct.op*, %struct.op** %op_next346, align 8
  br label %cond.end349

cond.false347:                                    ; preds = %if.else342
  %215 = load %struct.op*, %struct.op** %expr.addr, align 8
  %call348 = call %struct.op* @Perl_op_linklist(%struct.op* %215)
  br label %cond.end349

cond.end349:                                      ; preds = %cond.false347, %cond.true345
  %cond350 = phi %struct.op* [ %214, %cond.true345 ], [ %call348, %cond.false347 ]
  %216 = load %struct.logop*, %struct.logop** %rcop, align 8
  %op_next351 = getelementptr inbounds %struct.logop, %struct.logop* %216, i32 0, i32 0
  store %struct.op* %cond350, %struct.op** %op_next351, align 8
  %217 = load %struct.logop*, %struct.logop** %rcop, align 8
  %218 = bitcast %struct.logop* %217 to %struct.op*
  %219 = load %struct.op*, %struct.op** %expr.addr, align 8
  %op_next352 = getelementptr inbounds %struct.op, %struct.op* %219, i32 0, i32 0
  store %struct.op* %218, %struct.op** %op_next352, align 8
  br label %if.end353

if.end353:                                        ; preds = %cond.end349, %cond.end337
  %220 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type354 = getelementptr inbounds %struct.op, %struct.op* %220, i32 0, i32 4
  %bf.load355 = load i16, i16* %op_type354, align 8
  %bf.clear356 = and i16 %bf.load355, 511
  %bf.cast357 = zext i16 %bf.clear356 to i32
  %221 = load %struct.logop*, %struct.logop** %rcop, align 8
  %222 = bitcast %struct.logop* %221 to %struct.op*
  %call358 = call %struct.op* @Perl_scalar(%struct.op* %222)
  %223 = load %struct.op*, %struct.op** %o.addr, align 8
  %call359 = call %struct.op* @Perl_op_prepend_elem(i32 %bf.cast357, %struct.op* %call358, %struct.op* %223)
  br label %if.end360

if.end360:                                        ; preds = %if.end353, %if.end239
  %224 = load %struct.op*, %struct.op** %repl.addr, align 8
  %tobool361 = icmp ne %struct.op* %224, null
  br i1 %tobool361, label %if.then362, label %if.end543

if.then362:                                       ; preds = %if.end360
  %225 = load %struct.op*, %struct.op** %repl.addr, align 8
  store %struct.op* %225, %struct.op** %curop, align 8
  %226 = load %struct.op*, %struct.op** %curop, align 8
  %op_type363 = getelementptr inbounds %struct.op, %struct.op* %226, i32 0, i32 4
  %bf.load364 = load i16, i16* %op_type363, align 8
  %bf.clear365 = and i16 %bf.load364, 511
  %bf.cast366 = zext i16 %bf.clear365 to i32
  %cmp367 = icmp eq i32 %bf.cast366, 0
  br i1 %cmp367, label %land.lhs.true369, label %if.end408

land.lhs.true369:                                 ; preds = %if.then362
  %227 = load %struct.op*, %struct.op** %curop, align 8
  %op_flags370 = getelementptr inbounds %struct.op, %struct.op* %227, i32 0, i32 5
  %228 = load i8, i8* %op_flags370, align 2
  %conv371 = zext i8 %228 to i32
  %and372 = and i32 %conv371, 4
  %tobool373 = icmp ne i32 %and372, 0
  br i1 %tobool373, label %land.lhs.true374, label %if.end408

land.lhs.true374:                                 ; preds = %land.lhs.true369
  %229 = load %struct.op*, %struct.op** %curop, align 8
  %230 = bitcast %struct.op* %229 to %struct.unop*
  %op_first375 = getelementptr inbounds %struct.unop, %struct.unop* %230, i32 0, i32 7
  %231 = load %struct.op*, %struct.op** %op_first375, align 8
  %op_type376 = getelementptr inbounds %struct.op, %struct.op* %231, i32 0, i32 4
  %bf.load377 = load i16, i16* %op_type376, align 8
  %bf.clear378 = and i16 %bf.load377, 511
  %bf.cast379 = zext i16 %bf.clear378 to i32
  %cmp380 = icmp eq i32 %bf.cast379, 198
  br i1 %cmp380, label %land.lhs.true382, label %if.end408

land.lhs.true382:                                 ; preds = %land.lhs.true374
  %232 = load %struct.op*, %struct.op** %curop, align 8
  %233 = bitcast %struct.op* %232 to %struct.unop*
  %op_first383 = getelementptr inbounds %struct.unop, %struct.unop* %233, i32 0, i32 7
  %234 = load %struct.op*, %struct.op** %op_first383, align 8
  %op_flags384 = getelementptr inbounds %struct.op, %struct.op* %234, i32 0, i32 5
  %235 = load i8, i8* %op_flags384, align 2
  %conv385 = zext i8 %235 to i32
  %and386 = and i32 %conv385, 4
  %tobool387 = icmp ne i32 %and386, 0
  br i1 %tobool387, label %if.then388, label %if.end408

if.then388:                                       ; preds = %land.lhs.true382
  %236 = load %struct.op*, %struct.op** %curop, align 8
  %237 = bitcast %struct.op* %236 to %struct.unop*
  %op_first389 = getelementptr inbounds %struct.unop, %struct.unop* %237, i32 0, i32 7
  %238 = load %struct.op*, %struct.op** %op_first389, align 8
  %239 = bitcast %struct.op* %238 to %struct.unop*
  %op_first390 = getelementptr inbounds %struct.unop, %struct.unop* %239, i32 0, i32 7
  %240 = load %struct.op*, %struct.op** %op_first390, align 8
  store %struct.op* %240, %struct.op** %kid, align 8
  %241 = load %struct.op*, %struct.op** %kid, align 8
  %op_type391 = getelementptr inbounds %struct.op, %struct.op* %241, i32 0, i32 4
  %bf.load392 = load i16, i16* %op_type391, align 8
  %bf.clear393 = and i16 %bf.load392, 511
  %bf.cast394 = zext i16 %bf.clear393 to i32
  %cmp395 = icmp eq i32 %bf.cast394, 0
  br i1 %cmp395, label %land.lhs.true397, label %if.end407

land.lhs.true397:                                 ; preds = %if.then388
  %242 = load %struct.op*, %struct.op** %kid, align 8
  %op_sibling398 = getelementptr inbounds %struct.op, %struct.op* %242, i32 0, i32 1
  %243 = load %struct.op*, %struct.op** %op_sibling398, align 8
  %add.ptr399 = getelementptr inbounds %struct.op, %struct.op* %243, i64 0
  store %struct.op* %add.ptr399, %struct.op** %sib, align 8
  %tobool400 = icmp ne %struct.op* %add.ptr399, null
  br i1 %tobool400, label %land.lhs.true401, label %if.end407

land.lhs.true401:                                 ; preds = %land.lhs.true397
  %244 = load %struct.op*, %struct.op** %sib, align 8
  %op_sibling402 = getelementptr inbounds %struct.op, %struct.op* %244, i32 0, i32 1
  %245 = load %struct.op*, %struct.op** %op_sibling402, align 8
  %tobool403 = icmp ne %struct.op* %245, null
  br i1 %tobool403, label %cond.true404, label %cond.false405

cond.true404:                                     ; preds = %land.lhs.true401
  br i1 true, label %if.end407, label %if.then406

cond.false405:                                    ; preds = %land.lhs.true401
  br i1 false, label %if.end407, label %if.then406

if.then406:                                       ; preds = %cond.false405, %cond.true404
  %246 = load %struct.op*, %struct.op** %sib, align 8
  store %struct.op* %246, %struct.op** %curop, align 8
  br label %if.end407

if.end407:                                        ; preds = %if.then406, %cond.false405, %cond.true404, %land.lhs.true397, %if.then388
  br label %if.end408

if.end408:                                        ; preds = %if.end407, %land.lhs.true382, %land.lhs.true374, %land.lhs.true369, %if.then362
  %247 = load %struct.op*, %struct.op** %curop, align 8
  %op_type409 = getelementptr inbounds %struct.op, %struct.op* %247, i32 0, i32 4
  %bf.load410 = load i16, i16* %op_type409, align 8
  %bf.clear411 = and i16 %bf.load410, 511
  %bf.cast412 = zext i16 %bf.clear411 to i32
  %cmp413 = icmp eq i32 %bf.cast412, 5
  br i1 %cmp413, label %if.then415, label %if.else416

if.then415:                                       ; preds = %if.end408
  store i8 1, i8* %konst, align 1
  br label %if.end486

if.else416:                                       ; preds = %if.end408
  %248 = load %struct.op*, %struct.op** %curop, align 8
  %op_type417 = getelementptr inbounds %struct.op, %struct.op* %248, i32 0, i32 4
  %bf.load418 = load i16, i16* %op_type417, align 8
  %bf.clear419 = and i16 %bf.load418, 511
  %bf.cast420 = zext i16 %bf.clear419 to i32
  %cmp421 = icmp eq i32 %bf.cast420, 15
  br i1 %cmp421, label %land.lhs.true444, label %lor.lhs.false423

lor.lhs.false423:                                 ; preds = %if.else416
  %249 = load %struct.op*, %struct.op** %curop, align 8
  %op_type424 = getelementptr inbounds %struct.op, %struct.op* %249, i32 0, i32 4
  %bf.load425 = load i16, i16* %op_type424, align 8
  %bf.clear426 = and i16 %bf.load425, 511
  %bf.cast427 = zext i16 %bf.clear426 to i32
  %cmp428 = icmp eq i32 %bf.cast427, 135
  br i1 %cmp428, label %land.lhs.true444, label %lor.lhs.false430

lor.lhs.false430:                                 ; preds = %lor.lhs.false423
  %250 = load %struct.op*, %struct.op** %curop, align 8
  %op_type431 = getelementptr inbounds %struct.op, %struct.op* %250, i32 0, i32 4
  %bf.load432 = load i16, i16* %op_type431, align 8
  %bf.clear433 = and i16 %bf.load432, 511
  %bf.cast434 = zext i16 %bf.clear433 to i32
  %cmp435 = icmp eq i32 %bf.cast434, 149
  br i1 %cmp435, label %land.lhs.true444, label %lor.lhs.false437

lor.lhs.false437:                                 ; preds = %lor.lhs.false430
  %251 = load %struct.op*, %struct.op** %curop, align 8
  %op_type438 = getelementptr inbounds %struct.op, %struct.op* %251, i32 0, i32 4
  %bf.load439 = load i16, i16* %op_type438, align 8
  %bf.clear440 = and i16 %bf.load439, 511
  %bf.cast441 = zext i16 %bf.clear440 to i32
  %cmp442 = icmp eq i32 %bf.cast441, 14
  br i1 %cmp442, label %land.lhs.true444, label %lor.lhs.false455

land.lhs.true444:                                 ; preds = %lor.lhs.false437, %lor.lhs.false430, %lor.lhs.false423, %if.else416
  %252 = load %struct.op*, %struct.op** %curop, align 8
  %253 = bitcast %struct.op* %252 to %struct.unop*
  %op_first445 = getelementptr inbounds %struct.unop, %struct.unop* %253, i32 0, i32 7
  %254 = load %struct.op*, %struct.op** %op_first445, align 8
  %tobool446 = icmp ne %struct.op* %254, null
  br i1 %tobool446, label %land.lhs.true447, label %lor.lhs.false455

land.lhs.true447:                                 ; preds = %land.lhs.true444
  %255 = load %struct.op*, %struct.op** %curop, align 8
  %256 = bitcast %struct.op* %255 to %struct.unop*
  %op_first448 = getelementptr inbounds %struct.unop, %struct.unop* %256, i32 0, i32 7
  %257 = load %struct.op*, %struct.op** %op_first448, align 8
  %op_type449 = getelementptr inbounds %struct.op, %struct.op* %257, i32 0, i32 4
  %bf.load450 = load i16, i16* %op_type449, align 8
  %bf.clear451 = and i16 %bf.load450, 511
  %bf.cast452 = zext i16 %bf.clear451 to i32
  %cmp453 = icmp eq i32 %bf.cast452, 7
  br i1 %cmp453, label %if.then483, label %lor.lhs.false455

lor.lhs.false455:                                 ; preds = %land.lhs.true447, %land.lhs.true444, %lor.lhs.false437
  %258 = load %struct.op*, %struct.op** %curop, align 8
  %op_type456 = getelementptr inbounds %struct.op, %struct.op* %258, i32 0, i32 4
  %bf.load457 = load i16, i16* %op_type456, align 8
  %bf.clear458 = and i16 %bf.load457, 511
  %bf.cast459 = zext i16 %bf.clear458 to i32
  %cmp460 = icmp eq i32 %bf.cast459, 9
  br i1 %cmp460, label %if.then483, label %lor.lhs.false462

lor.lhs.false462:                                 ; preds = %lor.lhs.false455
  %259 = load %struct.op*, %struct.op** %curop, align 8
  %op_type463 = getelementptr inbounds %struct.op, %struct.op* %259, i32 0, i32 4
  %bf.load464 = load i16, i16* %op_type463, align 8
  %bf.clear465 = and i16 %bf.load464, 511
  %bf.cast466 = zext i16 %bf.clear465 to i32
  %cmp467 = icmp eq i32 %bf.cast466, 10
  br i1 %cmp467, label %if.then483, label %lor.lhs.false469

lor.lhs.false469:                                 ; preds = %lor.lhs.false462
  %260 = load %struct.op*, %struct.op** %curop, align 8
  %op_type470 = getelementptr inbounds %struct.op, %struct.op* %260, i32 0, i32 4
  %bf.load471 = load i16, i16* %op_type470, align 8
  %bf.clear472 = and i16 %bf.load471, 511
  %bf.cast473 = zext i16 %bf.clear472 to i32
  %cmp474 = icmp eq i32 %bf.cast473, 11
  br i1 %cmp474, label %if.then483, label %lor.lhs.false476

lor.lhs.false476:                                 ; preds = %lor.lhs.false469
  %261 = load %struct.op*, %struct.op** %curop, align 8
  %op_type477 = getelementptr inbounds %struct.op, %struct.op* %261, i32 0, i32 4
  %bf.load478 = load i16, i16* %op_type477, align 8
  %bf.clear479 = and i16 %bf.load478, 511
  %bf.cast480 = zext i16 %bf.clear479 to i32
  %cmp481 = icmp eq i32 %bf.cast480, 12
  br i1 %cmp481, label %if.then483, label %if.else484

if.then483:                                       ; preds = %lor.lhs.false476, %lor.lhs.false469, %lor.lhs.false462, %lor.lhs.false455, %land.lhs.true447
  store i32 1, i32* %repl_has_vars, align 4
  store i8 1, i8* %konst, align 1
  br label %if.end485

if.else484:                                       ; preds = %lor.lhs.false476
  store i8 0, i8* %konst, align 1
  br label %if.end485

if.end485:                                        ; preds = %if.else484, %if.then483
  br label %if.end486

if.end486:                                        ; preds = %if.end485, %if.then415
  %262 = load i8, i8* %konst, align 1
  %tobool487 = trunc i8 %262 to i1
  br i1 %tobool487, label %land.lhs.true489, label %if.else519

land.lhs.true489:                                 ; preds = %if.end486
  %263 = load i32, i32* %repl_has_vars, align 4
  %tobool490 = icmp ne i32 %263, 0
  br i1 %tobool490, label %land.lhs.true491, label %if.then510

land.lhs.true491:                                 ; preds = %land.lhs.true489
  %264 = load %struct.pmop*, %struct.pmop** %pm, align 8
  %op_pmregexp492 = getelementptr inbounds %struct.pmop, %struct.pmop* %264, i32 0, i32 9
  %265 = load %struct.p5rx*, %struct.p5rx** %op_pmregexp492, align 8
  %tobool493 = icmp ne %struct.p5rx* %265, null
  br i1 %tobool493, label %lor.lhs.false494, label %if.else519

lor.lhs.false494:                                 ; preds = %land.lhs.true491
  %266 = load %struct.pmop*, %struct.pmop** %pm, align 8
  %op_pmregexp495 = getelementptr inbounds %struct.pmop, %struct.pmop* %266, i32 0, i32 9
  %267 = load %struct.p5rx*, %struct.p5rx** %op_pmregexp495, align 8
  %sv_any496 = getelementptr inbounds %struct.p5rx, %struct.p5rx* %267, i32 0, i32 0
  %268 = load %struct.regexp*, %struct.regexp** %sv_any496, align 8
  %269 = bitcast %struct.regexp* %268 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %269, i32 0, i32 2
  %270 = load i64, i64* %xpv_cur, align 8
  %271 = load %struct.pmop*, %struct.pmop** %pm, align 8
  %op_pmregexp497 = getelementptr inbounds %struct.pmop, %struct.pmop* %271, i32 0, i32 9
  %272 = load %struct.p5rx*, %struct.p5rx** %op_pmregexp497, align 8
  %call498 = call %struct.regexp* @S_ReANY(%struct.p5rx* %272)
  %pre_prefix = getelementptr inbounds %struct.regexp, %struct.regexp* %call498, i32 0, i32 24
  %bf.load499 = load i16, i16* %pre_prefix, align 8
  %bf.clear500 = and i16 %bf.load499, 15
  %bf.cast501 = zext i16 %bf.clear500 to i32
  %conv502 = zext i32 %bf.cast501 to i64
  %sub = sub i64 %270, %conv502
  %sub503 = sub i64 %sub, 1
  %tobool504 = icmp ne i64 %sub503, 0
  br i1 %tobool504, label %lor.lhs.false505, label %if.else519

lor.lhs.false505:                                 ; preds = %lor.lhs.false494
  %273 = load %struct.pmop*, %struct.pmop** %pm, align 8
  %op_pmregexp506 = getelementptr inbounds %struct.pmop, %struct.pmop* %273, i32 0, i32 9
  %274 = load %struct.p5rx*, %struct.p5rx** %op_pmregexp506, align 8
  %call507 = call %struct.regexp* @S_ReANY(%struct.p5rx* %274)
  %extflags = getelementptr inbounds %struct.regexp, %struct.regexp* %call507, i32 0, i32 7
  %275 = load i32, i32* %extflags, align 8
  %and508 = and i32 %275, 131072
  %tobool509 = icmp ne i32 %and508, 0
  br i1 %tobool509, label %if.else519, label %if.then510

if.then510:                                       ; preds = %lor.lhs.false505, %land.lhs.true489
  %276 = load %struct.pmop*, %struct.pmop** %pm, align 8
  %op_pmflags511 = getelementptr inbounds %struct.pmop, %struct.pmop* %276, i32 0, i32 10
  %277 = load i32, i32* %op_pmflags511, align 8
  %or512 = or i32 %277, 4194304
  store i32 %or512, i32* %op_pmflags511, align 8
  %278 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type513 = getelementptr inbounds %struct.op, %struct.op* %278, i32 0, i32 4
  %bf.load514 = load i16, i16* %op_type513, align 8
  %bf.clear515 = and i16 %bf.load514, 511
  %bf.cast516 = zext i16 %bf.clear515 to i32
  %279 = load %struct.op*, %struct.op** %repl.addr, align 8
  %call517 = call %struct.op* @Perl_scalar(%struct.op* %279)
  %280 = load %struct.op*, %struct.op** %o.addr, align 8
  %call518 = call %struct.op* @Perl_op_prepend_elem(i32 %bf.cast516, %struct.op* %call517, %struct.op* %280)
  br label %if.end542

if.else519:                                       ; preds = %lor.lhs.false505, %lor.lhs.false494, %land.lhs.true491, %if.end486
  %281 = load %struct.op*, %struct.op** %repl.addr, align 8
  %call520 = call %struct.op* @Perl_scalar(%struct.op* %281)
  %282 = load %struct.op*, %struct.op** %o.addr, align 8
  %call521 = call %struct.logop* @S_alloc_LOGOP(i32 34, %struct.op* %call520, %struct.op* %282)
  store %struct.logop* %call521, %struct.logop** %rcop, align 8
  %283 = load %struct.logop*, %struct.logop** %rcop, align 8
  %op_private = getelementptr inbounds %struct.logop, %struct.logop* %283, i32 0, i32 6
  store i8 1, i8* %op_private, align 1
  %284 = load %struct.op*, %struct.op** %repl.addr, align 8
  %op_next522 = getelementptr inbounds %struct.op, %struct.op* %284, i32 0, i32 0
  %285 = load %struct.op*, %struct.op** %op_next522, align 8
  %tobool523 = icmp ne %struct.op* %285, null
  br i1 %tobool523, label %cond.true524, label %cond.false526

cond.true524:                                     ; preds = %if.else519
  %286 = load %struct.op*, %struct.op** %repl.addr, align 8
  %op_next525 = getelementptr inbounds %struct.op, %struct.op* %286, i32 0, i32 0
  %287 = load %struct.op*, %struct.op** %op_next525, align 8
  br label %cond.end528

cond.false526:                                    ; preds = %if.else519
  %288 = load %struct.op*, %struct.op** %repl.addr, align 8
  %call527 = call %struct.op* @Perl_op_linklist(%struct.op* %288)
  br label %cond.end528

cond.end528:                                      ; preds = %cond.false526, %cond.true524
  %cond529 = phi %struct.op* [ %287, %cond.true524 ], [ %call527, %cond.false526 ]
  %289 = load %struct.logop*, %struct.logop** %rcop, align 8
  %op_next530 = getelementptr inbounds %struct.logop, %struct.logop* %289, i32 0, i32 0
  store %struct.op* %cond529, %struct.op** %op_next530, align 8
  %290 = load %struct.logop*, %struct.logop** %rcop, align 8
  %291 = bitcast %struct.logop* %290 to %struct.op*
  %292 = load %struct.op*, %struct.op** %repl.addr, align 8
  %op_next531 = getelementptr inbounds %struct.op, %struct.op* %292, i32 0, i32 0
  store %struct.op* %291, %struct.op** %op_next531, align 8
  %293 = load %struct.logop*, %struct.logop** %rcop, align 8
  %294 = bitcast %struct.logop* %293 to %struct.op*
  %call532 = call %struct.op* @Perl_scalar(%struct.op* %294)
  %295 = load %struct.pmop*, %struct.pmop** %pm, align 8
  %op_pmreplrootu = getelementptr inbounds %struct.pmop, %struct.pmop* %295, i32 0, i32 11
  %op_pmreplroot = bitcast %union.anon.18* %op_pmreplrootu to %struct.op**
  store %struct.op* %call532, %struct.op** %op_pmreplroot, align 8
  %296 = load %struct.logop*, %struct.logop** %rcop, align 8
  %op_next533 = getelementptr inbounds %struct.logop, %struct.logop* %296, i32 0, i32 0
  %297 = load %struct.op*, %struct.op** %op_next533, align 8
  %tobool534 = icmp ne %struct.op* %297, null
  br i1 %tobool534, label %cond.true535, label %cond.false537

cond.true535:                                     ; preds = %cond.end528
  %298 = load %struct.logop*, %struct.logop** %rcop, align 8
  %op_next536 = getelementptr inbounds %struct.logop, %struct.logop* %298, i32 0, i32 0
  %299 = load %struct.op*, %struct.op** %op_next536, align 8
  br label %cond.end539

cond.false537:                                    ; preds = %cond.end528
  %300 = load %struct.logop*, %struct.logop** %rcop, align 8
  %301 = bitcast %struct.logop* %300 to %struct.op*
  %call538 = call %struct.op* @Perl_op_linklist(%struct.op* %301)
  br label %cond.end539

cond.end539:                                      ; preds = %cond.false537, %cond.true535
  %cond540 = phi %struct.op* [ %299, %cond.true535 ], [ %call538, %cond.false537 ]
  %302 = load %struct.pmop*, %struct.pmop** %pm, align 8
  %op_pmstashstartu = getelementptr inbounds %struct.pmop, %struct.pmop* %302, i32 0, i32 12
  %op_pmreplstart = bitcast %union.anon.19* %op_pmstashstartu to %struct.op**
  store %struct.op* %cond540, %struct.op** %op_pmreplstart, align 8
  %303 = load %struct.logop*, %struct.logop** %rcop, align 8
  %op_next541 = getelementptr inbounds %struct.logop, %struct.logop* %303, i32 0, i32 0
  store %struct.op* null, %struct.op** %op_next541, align 8
  br label %if.end542

if.end542:                                        ; preds = %cond.end539, %if.then510
  br label %if.end543

if.end543:                                        ; preds = %if.end542, %if.end360
  %304 = load %struct.pmop*, %struct.pmop** %pm, align 8
  %305 = bitcast %struct.pmop* %304 to %struct.op*
  store %struct.op* %305, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %if.end543, %if.then
  %306 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %306
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_newPMOP(i32 %type, i32 %flags) #0 {
entry:
  %type.addr = alloca i32, align 4
  %flags.addr = alloca i32, align 4
  %pmop = alloca %struct.pmop*, align 8
  %reflags = alloca %struct.sv*, align 8
  store i32 %type, i32* %type.addr, align 4
  store i32 %flags, i32* %flags.addr, align 4
  %call = call i8* @Perl_Slab_Alloc(i64 96)
  %0 = bitcast i8* %call to %struct.pmop*
  store %struct.pmop* %0, %struct.pmop** %pmop, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %1 = load i32, i32* %type.addr, align 4
  %conv = trunc i32 %1 to i16
  %conv1 = zext i16 %conv to i32
  %2 = load %struct.pmop*, %struct.pmop** %pmop, align 8
  %op_type = getelementptr inbounds %struct.pmop, %struct.pmop* %2, i32 0, i32 4
  %3 = trunc i32 %conv1 to i16
  %bf.load = load i16, i16* %op_type, align 8
  %bf.value = and i16 %3, 511
  %bf.clear = and i16 %bf.load, -512
  %bf.set = or i16 %bf.clear, %bf.value
  store i16 %bf.set, i16* %op_type, align 8
  %bf.result.cast = zext i16 %bf.value to i32
  %4 = load i32, i32* %type.addr, align 4
  %idxprom = sext i32 %4 to i64
  %arrayidx = getelementptr inbounds [0 x %struct.op* ()*], [0 x %struct.op* ()*]* @PL_ppaddr, i64 0, i64 %idxprom
  %5 = load %struct.op* ()*, %struct.op* ()** %arrayidx, align 8
  %6 = load %struct.pmop*, %struct.pmop** %pmop, align 8
  %op_ppaddr = getelementptr inbounds %struct.pmop, %struct.pmop* %6, i32 0, i32 2
  store %struct.op* ()* %5, %struct.op* ()** %op_ppaddr, align 8
  br label %do.end

do.end:                                           ; preds = %do.body
  %7 = load i32, i32* %flags.addr, align 4
  %conv2 = trunc i32 %7 to i8
  %8 = load %struct.pmop*, %struct.pmop** %pmop, align 8
  %op_flags = getelementptr inbounds %struct.pmop, %struct.pmop* %8, i32 0, i32 5
  store i8 %conv2, i8* %op_flags, align 2
  %9 = load i32, i32* %flags.addr, align 4
  %shr = ashr i32 %9, 8
  %or = or i32 0, %shr
  %conv3 = trunc i32 %or to i8
  %10 = load %struct.pmop*, %struct.pmop** %pmop, align 8
  %op_private = getelementptr inbounds %struct.pmop, %struct.pmop* %10, i32 0, i32 6
  store i8 %conv3, i8* %op_private, align 1
  %11 = load i32, i32* %type.addr, align 4
  %idxprom4 = sext i32 %11 to i64
  %arrayidx5 = getelementptr inbounds [0 x i32], [0 x i32]* @PL_opargs, i64 0, i64 %idxprom4
  %12 = load i32, i32* %arrayidx5, align 4
  %and = and i32 %12, 4
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %do.end
  %13 = load %struct.pmop*, %struct.pmop** %pmop, align 8
  %14 = bitcast %struct.pmop* %13 to %struct.op*
  %call6 = call %struct.op* @Perl_scalar(%struct.op* %14)
  br label %if.end

if.end:                                           ; preds = %if.then, %do.end
  %15 = load i32, i32* getelementptr inbounds (%struct.cop, %struct.cop* @PL_compiling, i32 0, i32 10), align 8
  %and7 = and i32 %15, 1048576
  %tobool8 = icmp ne i32 %and7, 0
  br i1 %tobool8, label %if.then9, label %if.end11

if.then9:                                         ; preds = %if.end
  %16 = load %struct.pmop*, %struct.pmop** %pmop, align 8
  %op_pmflags = getelementptr inbounds %struct.pmop, %struct.pmop* %16, i32 0, i32 10
  %17 = load i32, i32* %op_pmflags, align 8
  %or10 = or i32 %17, 524288
  store i32 %or10, i32* %op_pmflags, align 8
  br label %if.end11

if.end11:                                         ; preds = %if.then9, %if.end
  %18 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_hints = getelementptr inbounds %struct.cop, %struct.cop* %18, i32 0, i32 10
  %19 = load i32, i32* %cop_hints, align 8
  %add = add i32 %19, 0
  %and12 = and i32 %add, 2048
  %tobool13 = icmp ne i32 %and12, 0
  br i1 %tobool13, label %land.lhs.true20, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end11
  %20 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_hints14 = getelementptr inbounds %struct.cop, %struct.cop* %20, i32 0, i32 10
  %21 = load i32, i32* %cop_hints14, align 8
  %add15 = add i32 %21, 0
  %and16 = and i32 %add15, 16
  %tobool17 = icmp ne i32 %and16, 0
  br i1 %tobool17, label %land.lhs.true, label %if.end27

land.lhs.true:                                    ; preds = %lor.lhs.false
  %call18 = call zeroext i1 @Perl__is_in_locale_category(i1 zeroext false, i32 -1)
  br i1 %call18, label %land.lhs.true20, label %if.end27

land.lhs.true20:                                  ; preds = %land.lhs.true, %if.end11
  %22 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_hints21 = getelementptr inbounds %struct.cop, %struct.cop* %22, i32 0, i32 10
  %23 = load i32, i32* %cop_hints21, align 8
  %add22 = add i32 %23, 0
  %and23 = and i32 %add22, 8
  %tobool24 = icmp ne i32 %and23, 0
  br i1 %tobool24, label %if.end27, label %if.then25

if.then25:                                        ; preds = %land.lhs.true20
  %24 = load %struct.pmop*, %struct.pmop** %pmop, align 8
  %op_pmflags26 = getelementptr inbounds %struct.pmop, %struct.pmop* %24, i32 0, i32 10
  call void @set_regex_charset(i32* %op_pmflags26, i32 2)
  br label %if.end27

if.end27:                                         ; preds = %if.then25, %land.lhs.true20, %land.lhs.true, %lor.lhs.false
  %25 = load i32, i32* getelementptr inbounds (%struct.cop, %struct.cop* @PL_compiling, i32 0, i32 10), align 8
  %and28 = and i32 %25, 33554432
  %tobool29 = icmp ne i32 %and28, 0
  br i1 %tobool29, label %if.then30, label %if.end88

if.then30:                                        ; preds = %if.end27
  %26 = load %struct.refcounted_he*, %struct.refcounted_he** getelementptr inbounds (%struct.cop, %struct.cop* @PL_compiling, i32 0, i32 13), align 8
  %call31 = call %struct.sv* @Perl_refcounted_he_fetch_pvn(%struct.refcounted_he* %26, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.50, i64 0, i64 0), i64 7, i32 0, i32 0)
  store %struct.sv* %call31, %struct.sv** %reflags, align 8
  %27 = load %struct.sv*, %struct.sv** %reflags, align 8
  %tobool32 = icmp ne %struct.sv* %27, null
  br i1 %tobool32, label %land.lhs.true33, label %if.end55

land.lhs.true33:                                  ; preds = %if.then30
  %28 = load %struct.sv*, %struct.sv** %reflags, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %28, i32 0, i32 2
  %29 = load i32, i32* %sv_flags, align 4
  %and34 = and i32 %29, 65280
  %tobool35 = icmp ne i32 %and34, 0
  br i1 %tobool35, label %if.then45, label %lor.lhs.false36

lor.lhs.false36:                                  ; preds = %land.lhs.true33
  %30 = load %struct.sv*, %struct.sv** %reflags, align 8
  %sv_flags37 = getelementptr inbounds %struct.sv, %struct.sv* %30, i32 0, i32 2
  %31 = load i32, i32* %sv_flags37, align 4
  %and38 = and i32 %31, 255
  %cmp = icmp eq i32 %and38, 8
  br i1 %cmp, label %if.then45, label %lor.lhs.false40

lor.lhs.false40:                                  ; preds = %lor.lhs.false36
  %32 = load %struct.sv*, %struct.sv** %reflags, align 8
  %sv_flags41 = getelementptr inbounds %struct.sv, %struct.sv* %32, i32 0, i32 2
  %33 = load i32, i32* %sv_flags41, align 4
  %and42 = and i32 %33, 16826623
  %cmp43 = icmp eq i32 %and42, 16777226
  br i1 %cmp43, label %if.then45, label %if.end55

if.then45:                                        ; preds = %lor.lhs.false40, %lor.lhs.false36, %land.lhs.true33
  %34 = load %struct.sv*, %struct.sv** %reflags, align 8
  %sv_flags46 = getelementptr inbounds %struct.sv, %struct.sv* %34, i32 0, i32 2
  %35 = load i32, i32* %sv_flags46, align 4
  %and47 = and i32 %35, 2097408
  %cmp48 = icmp eq i32 %and47, 256
  br i1 %cmp48, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then45
  %36 = load %struct.sv*, %struct.sv** %reflags, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %36, i32 0, i32 0
  %37 = load i8*, i8** %sv_any, align 8
  %38 = bitcast i8* %37 to %struct.xpviv*
  %xiv_u = getelementptr inbounds %struct.xpviv, %struct.xpviv* %38, i32 0, i32 4
  %xivu_iv = bitcast %union._xivu* %xiv_u to i64*
  %39 = load i64, i64* %xivu_iv, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.then45
  %40 = load %struct.sv*, %struct.sv** %reflags, align 8
  %call50 = call i64 @Perl_sv_2iv_flags(%struct.sv* %40, i32 2)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %39, %cond.true ], [ %call50, %cond.false ]
  %41 = load %struct.pmop*, %struct.pmop** %pmop, align 8
  %op_pmflags51 = getelementptr inbounds %struct.pmop, %struct.pmop* %41, i32 0, i32 10
  %42 = load i32, i32* %op_pmflags51, align 8
  %conv52 = zext i32 %42 to i64
  %or53 = or i64 %conv52, %cond
  %conv54 = trunc i64 %or53 to i32
  store i32 %conv54, i32* %op_pmflags51, align 8
  br label %if.end55

if.end55:                                         ; preds = %cond.end, %lor.lhs.false40, %if.then30
  %43 = load %struct.refcounted_he*, %struct.refcounted_he** getelementptr inbounds (%struct.cop, %struct.cop* @PL_compiling, i32 0, i32 13), align 8
  %call56 = call %struct.sv* @Perl_refcounted_he_fetch_pvn(%struct.refcounted_he* %43, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.51, i64 0, i64 0), i64 15, i32 0, i32 0)
  store %struct.sv* %call56, %struct.sv** %reflags, align 8
  %44 = load %struct.sv*, %struct.sv** %reflags, align 8
  %tobool57 = icmp ne %struct.sv* %44, null
  br i1 %tobool57, label %land.lhs.true58, label %if.end87

land.lhs.true58:                                  ; preds = %if.end55
  %45 = load %struct.sv*, %struct.sv** %reflags, align 8
  %sv_flags59 = getelementptr inbounds %struct.sv, %struct.sv* %45, i32 0, i32 2
  %46 = load i32, i32* %sv_flags59, align 4
  %and60 = and i32 %46, 65280
  %tobool61 = icmp ne i32 %and60, 0
  br i1 %tobool61, label %if.then72, label %lor.lhs.false62

lor.lhs.false62:                                  ; preds = %land.lhs.true58
  %47 = load %struct.sv*, %struct.sv** %reflags, align 8
  %sv_flags63 = getelementptr inbounds %struct.sv, %struct.sv* %47, i32 0, i32 2
  %48 = load i32, i32* %sv_flags63, align 4
  %and64 = and i32 %48, 255
  %cmp65 = icmp eq i32 %and64, 8
  br i1 %cmp65, label %if.then72, label %lor.lhs.false67

lor.lhs.false67:                                  ; preds = %lor.lhs.false62
  %49 = load %struct.sv*, %struct.sv** %reflags, align 8
  %sv_flags68 = getelementptr inbounds %struct.sv, %struct.sv* %49, i32 0, i32 2
  %50 = load i32, i32* %sv_flags68, align 4
  %and69 = and i32 %50, 16826623
  %cmp70 = icmp eq i32 %and69, 16777226
  br i1 %cmp70, label %if.then72, label %if.end87

if.then72:                                        ; preds = %lor.lhs.false67, %lor.lhs.false62, %land.lhs.true58
  %51 = load %struct.pmop*, %struct.pmop** %pmop, align 8
  %op_pmflags73 = getelementptr inbounds %struct.pmop, %struct.pmop* %51, i32 0, i32 10
  %52 = load %struct.sv*, %struct.sv** %reflags, align 8
  %sv_flags74 = getelementptr inbounds %struct.sv, %struct.sv* %52, i32 0, i32 2
  %53 = load i32, i32* %sv_flags74, align 4
  %and75 = and i32 %53, 2097408
  %cmp76 = icmp eq i32 %and75, 256
  br i1 %cmp76, label %cond.true78, label %cond.false82

cond.true78:                                      ; preds = %if.then72
  %54 = load %struct.sv*, %struct.sv** %reflags, align 8
  %sv_any79 = getelementptr inbounds %struct.sv, %struct.sv* %54, i32 0, i32 0
  %55 = load i8*, i8** %sv_any79, align 8
  %56 = bitcast i8* %55 to %struct.xpviv*
  %xiv_u80 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %56, i32 0, i32 4
  %xivu_iv81 = bitcast %union._xivu* %xiv_u80 to i64*
  %57 = load i64, i64* %xivu_iv81, align 8
  br label %cond.end84

cond.false82:                                     ; preds = %if.then72
  %58 = load %struct.sv*, %struct.sv** %reflags, align 8
  %call83 = call i64 @Perl_sv_2iv_flags(%struct.sv* %58, i32 2)
  br label %cond.end84

cond.end84:                                       ; preds = %cond.false82, %cond.true78
  %cond85 = phi i64 [ %57, %cond.true78 ], [ %call83, %cond.false82 ]
  %conv86 = trunc i64 %cond85 to i32
  call void @set_regex_charset(i32* %op_pmflags73, i32 %conv86)
  br label %if.end87

if.end87:                                         ; preds = %cond.end84, %lor.lhs.false67, %if.end55
  br label %if.end88

if.end88:                                         ; preds = %if.end87, %if.end27
  %59 = load i8*, i8** @PL_op_mask, align 8
  %tobool89 = icmp ne i8* %59, null
  br i1 %tobool89, label %land.lhs.true90, label %cond.false98

land.lhs.true90:                                  ; preds = %if.end88
  %60 = load i8*, i8** @PL_op_mask, align 8
  %61 = load i32, i32* %type.addr, align 4
  %idxprom91 = sext i32 %61 to i64
  %arrayidx92 = getelementptr inbounds i8, i8* %60, i64 %idxprom91
  %62 = load i8, i8* %arrayidx92, align 1
  %conv93 = sext i8 %62 to i32
  %tobool94 = icmp ne i32 %conv93, 0
  br i1 %tobool94, label %cond.true95, label %cond.false98

cond.true95:                                      ; preds = %land.lhs.true90
  %63 = load %struct.pmop*, %struct.pmop** %pmop, align 8
  %64 = bitcast %struct.pmop* %63 to %struct.op*
  call void @Perl_op_free(%struct.op* %64)
  %65 = load i32, i32* %type.addr, align 4
  %idxprom96 = sext i32 %65 to i64
  %arrayidx97 = getelementptr inbounds [0 x i8*], [0 x i8*]* @PL_op_desc, i64 0, i64 %idxprom96
  %66 = load i8*, i8** %arrayidx97, align 8
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.49, i64 0, i64 0), i8* %66)
  br label %cond.end102

cond.false98:                                     ; preds = %land.lhs.true90, %if.end88
  %67 = load i32, i32* %type.addr, align 4
  %idxprom99 = sext i32 %67 to i64
  %arrayidx100 = getelementptr inbounds [0 x %struct.op* (%struct.op*)*], [0 x %struct.op* (%struct.op*)*]* @PL_check, i64 0, i64 %idxprom99
  %68 = load %struct.op* (%struct.op*)*, %struct.op* (%struct.op*)** %arrayidx100, align 8
  %69 = load %struct.pmop*, %struct.pmop** %pmop, align 8
  %70 = bitcast %struct.pmop* %69 to %struct.op*
  %call101 = call %struct.op* %68(%struct.op* %70)
  br label %cond.end102

cond.end102:                                      ; preds = %cond.false98, %cond.true95
  %cond103 = phi %struct.op* [ null, %cond.true95 ], [ %call101, %cond.false98 ]
  ret %struct.op* %cond103
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_invert(%struct.op* %o) #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %o.addr = alloca %struct.op*, align 8
  store %struct.op* %o, %struct.op** %o.addr, align 8
  %0 = load %struct.op*, %struct.op** %o.addr, align 8
  %tobool = icmp ne %struct.op* %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store %struct.op* null, %struct.op** %retval, align 8
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct.op*, %struct.op** %o.addr, align 8
  %call = call %struct.op* @Perl_scalar(%struct.op* %1)
  %call1 = call %struct.op* @Perl_newUNOP(i32 103, i32 128, %struct.op* %call)
  store %struct.op* %call1, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %if.end, %if.then
  %2 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %2
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_op_scope(%struct.op* %o) #0 {
entry:
  %o.addr = alloca %struct.op*, align 8
  %kid = alloca %struct.op*, align 8
  store %struct.op* %o, %struct.op** %o.addr, align 8
  %0 = load %struct.op*, %struct.op** %o.addr, align 8
  %tobool = icmp ne %struct.op* %0, null
  br i1 %tobool, label %if.then, label %if.end55

if.then:                                          ; preds = %entry
  %1 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %1, i32 0, i32 5
  %2 = load i8, i8* %op_flags, align 2
  %conv = zext i8 %2 to i32
  %and = and i32 %conv, 8
  %tobool1 = icmp ne i32 %and, 0
  br i1 %tobool1, label %if.then7, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.then
  %3 = load i32, i32* @PL_perldb, align 4
  %and2 = and i32 %3, 4
  %tobool3 = icmp ne i32 %and2, 0
  br i1 %tobool3, label %if.then7, label %lor.lhs.false4

lor.lhs.false4:                                   ; preds = %lor.lhs.false
  %4 = load i8, i8* @PL_tainting, align 1
  %tobool5 = trunc i8 %4 to i1
  br i1 %tobool5, label %if.then7, label %if.else

if.then7:                                         ; preds = %lor.lhs.false4, %lor.lhs.false, %if.then
  %call = call %struct.op* @Perl_newOP(i32 196, i32 0)
  %5 = load %struct.op*, %struct.op** %o.addr, align 8
  %call8 = call %struct.op* @Perl_op_prepend_elem(i32 192, %struct.op* %call, %struct.op* %5)
  store %struct.op* %call8, %struct.op** %o.addr, align 8
  br label %do.body

do.body:                                          ; preds = %if.then7
  %6 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type = getelementptr inbounds %struct.op, %struct.op* %6, i32 0, i32 4
  %bf.load = load i16, i16* %op_type, align 8
  %bf.clear = and i16 %bf.load, -512
  %bf.set = or i16 %bf.clear, 197
  store i16 %bf.set, i16* %op_type, align 8
  %7 = load %struct.op* ()*, %struct.op* ()** getelementptr inbounds ([0 x %struct.op* ()*], [0 x %struct.op* ()*]* @PL_ppaddr, i64 0, i64 197), align 8
  %8 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_ppaddr = getelementptr inbounds %struct.op, %struct.op* %8, i32 0, i32 2
  store %struct.op* ()* %7, %struct.op* ()** %op_ppaddr, align 8
  br label %do.end

do.end:                                           ; preds = %do.body
  br label %if.end54

if.else:                                          ; preds = %lor.lhs.false4
  %9 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type9 = getelementptr inbounds %struct.op, %struct.op* %9, i32 0, i32 4
  %bf.load10 = load i16, i16* %op_type9, align 8
  %bf.clear11 = and i16 %bf.load10, 511
  %bf.cast = zext i16 %bf.clear11 to i32
  %cmp = icmp eq i32 %bf.cast, 192
  br i1 %cmp, label %if.then13, label %if.else51

if.then13:                                        ; preds = %if.else
  br label %do.body14

do.body14:                                        ; preds = %if.then13
  %10 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type15 = getelementptr inbounds %struct.op, %struct.op* %10, i32 0, i32 4
  %bf.load16 = load i16, i16* %op_type15, align 8
  %bf.clear17 = and i16 %bf.load16, -512
  %bf.set18 = or i16 %bf.clear17, 198
  store i16 %bf.set18, i16* %op_type15, align 8
  %11 = load %struct.op* ()*, %struct.op* ()** getelementptr inbounds ([0 x %struct.op* ()*], [0 x %struct.op* ()*]* @PL_ppaddr, i64 0, i64 198), align 8
  %12 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_ppaddr19 = getelementptr inbounds %struct.op, %struct.op* %12, i32 0, i32 2
  store %struct.op* ()* %11, %struct.op* ()** %op_ppaddr19, align 8
  br label %do.end20

do.end20:                                         ; preds = %do.body14
  %13 = load %struct.op*, %struct.op** %o.addr, align 8
  %14 = bitcast %struct.op* %13 to %struct.listop*
  %op_first = getelementptr inbounds %struct.listop, %struct.listop* %14, i32 0, i32 7
  %15 = load %struct.op*, %struct.op** %op_first, align 8
  store %struct.op* %15, %struct.op** %kid, align 8
  %16 = load %struct.op*, %struct.op** %kid, align 8
  %op_type21 = getelementptr inbounds %struct.op, %struct.op* %16, i32 0, i32 4
  %bf.load22 = load i16, i16* %op_type21, align 8
  %bf.clear23 = and i16 %bf.load22, 511
  %bf.cast24 = zext i16 %bf.clear23 to i32
  %cmp25 = icmp eq i32 %bf.cast24, 193
  br i1 %cmp25, label %if.then34, label %lor.lhs.false27

lor.lhs.false27:                                  ; preds = %do.end20
  %17 = load %struct.op*, %struct.op** %kid, align 8
  %op_type28 = getelementptr inbounds %struct.op, %struct.op* %17, i32 0, i32 4
  %bf.load29 = load i16, i16* %op_type28, align 8
  %bf.clear30 = and i16 %bf.load29, 511
  %bf.cast31 = zext i16 %bf.clear30 to i32
  %cmp32 = icmp eq i32 %bf.cast31, 194
  br i1 %cmp32, label %if.then34, label %if.end50

if.then34:                                        ; preds = %lor.lhs.false27, %do.end20
  %18 = load %struct.op*, %struct.op** %kid, align 8
  call void @Perl_op_null(%struct.op* %18)
  %19 = load %struct.op*, %struct.op** %kid, align 8
  %op_sibling = getelementptr inbounds %struct.op, %struct.op* %19, i32 0, i32 1
  %20 = load %struct.op*, %struct.op** %op_sibling, align 8
  %add.ptr = getelementptr inbounds %struct.op, %struct.op* %20, i64 0
  store %struct.op* %add.ptr, %struct.op** %kid, align 8
  %21 = load %struct.op*, %struct.op** %kid, align 8
  %tobool35 = icmp ne %struct.op* %21, null
  br i1 %tobool35, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %if.then34
  %22 = load %struct.op*, %struct.op** %kid, align 8
  %op_type36 = getelementptr inbounds %struct.op, %struct.op* %22, i32 0, i32 4
  %bf.load37 = load i16, i16* %op_type36, align 8
  %bf.clear38 = and i16 %bf.load37, 511
  %bf.cast39 = zext i16 %bf.clear38 to i32
  %cmp40 = icmp eq i32 %bf.cast39, 193
  br i1 %cmp40, label %if.then49, label %lor.lhs.false42

lor.lhs.false42:                                  ; preds = %land.lhs.true
  %23 = load %struct.op*, %struct.op** %kid, align 8
  %op_type43 = getelementptr inbounds %struct.op, %struct.op* %23, i32 0, i32 4
  %bf.load44 = load i16, i16* %op_type43, align 8
  %bf.clear45 = and i16 %bf.load44, 511
  %bf.cast46 = zext i16 %bf.clear45 to i32
  %cmp47 = icmp eq i32 %bf.cast46, 194
  br i1 %cmp47, label %if.then49, label %if.end

if.then49:                                        ; preds = %lor.lhs.false42, %land.lhs.true
  %24 = load %struct.op*, %struct.op** %kid, align 8
  call void @Perl_op_null(%struct.op* %24)
  br label %if.end

if.end:                                           ; preds = %if.then49, %lor.lhs.false42, %if.then34
  br label %if.end50

if.end50:                                         ; preds = %if.end, %lor.lhs.false27
  br label %if.end53

if.else51:                                        ; preds = %if.else
  %25 = load %struct.op*, %struct.op** %o.addr, align 8
  %call52 = call %struct.op* @Perl_newLISTOP(i32 198, i32 0, %struct.op* %25, %struct.op* null)
  store %struct.op* %call52, %struct.op** %o.addr, align 8
  br label %if.end53

if.end53:                                         ; preds = %if.else51, %if.end50
  br label %if.end54

if.end54:                                         ; preds = %if.end53, %do.end
  br label %if.end55

if.end55:                                         ; preds = %if.end54, %entry
  %26 = load %struct.op*, %struct.op** %o.addr, align 8
  ret %struct.op* %26
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_newOP(i32 %type, i32 %flags) #0 {
entry:
  %type.addr = alloca i32, align 4
  %flags.addr = alloca i32, align 4
  %o = alloca %struct.op*, align 8
  store i32 %type, i32* %type.addr, align 4
  store i32 %flags, i32* %flags.addr, align 4
  %0 = load i32, i32* %type.addr, align 4
  %cmp = icmp eq i32 %0, -342
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 342, i32* %type.addr, align 4
  %1 = load i32, i32* %flags.addr, align 4
  %or = or i32 %1, 2048
  store i32 %or, i32* %flags.addr, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %call = call i8* @Perl_Slab_Alloc(i64 40)
  %2 = bitcast i8* %call to %struct.op*
  store %struct.op* %2, %struct.op** %o, align 8
  br label %do.body

do.body:                                          ; preds = %if.end
  %3 = load i32, i32* %type.addr, align 4
  %conv = trunc i32 %3 to i16
  %conv1 = zext i16 %conv to i32
  %4 = load %struct.op*, %struct.op** %o, align 8
  %op_type = getelementptr inbounds %struct.op, %struct.op* %4, i32 0, i32 4
  %5 = trunc i32 %conv1 to i16
  %bf.load = load i16, i16* %op_type, align 8
  %bf.value = and i16 %5, 511
  %bf.clear = and i16 %bf.load, -512
  %bf.set = or i16 %bf.clear, %bf.value
  store i16 %bf.set, i16* %op_type, align 8
  %bf.result.cast = zext i16 %bf.value to i32
  %6 = load i32, i32* %type.addr, align 4
  %idxprom = sext i32 %6 to i64
  %arrayidx = getelementptr inbounds [0 x %struct.op* ()*], [0 x %struct.op* ()*]* @PL_ppaddr, i64 0, i64 %idxprom
  %7 = load %struct.op* ()*, %struct.op* ()** %arrayidx, align 8
  %8 = load %struct.op*, %struct.op** %o, align 8
  %op_ppaddr = getelementptr inbounds %struct.op, %struct.op* %8, i32 0, i32 2
  store %struct.op* ()* %7, %struct.op* ()** %op_ppaddr, align 8
  br label %do.end

do.end:                                           ; preds = %do.body
  %9 = load i32, i32* %flags.addr, align 4
  %conv2 = trunc i32 %9 to i8
  %10 = load %struct.op*, %struct.op** %o, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %10, i32 0, i32 5
  store i8 %conv2, i8* %op_flags, align 2
  %11 = load %struct.op*, %struct.op** %o, align 8
  %12 = load %struct.op*, %struct.op** %o, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %12, i32 0, i32 0
  store %struct.op* %11, %struct.op** %op_next, align 8
  %13 = load i32, i32* %flags.addr, align 4
  %shr = ashr i32 %13, 8
  %or3 = or i32 0, %shr
  %conv4 = trunc i32 %or3 to i8
  %14 = load %struct.op*, %struct.op** %o, align 8
  %op_private = getelementptr inbounds %struct.op, %struct.op* %14, i32 0, i32 6
  store i8 %conv4, i8* %op_private, align 1
  %15 = load i32, i32* %type.addr, align 4
  %idxprom5 = sext i32 %15 to i64
  %arrayidx6 = getelementptr inbounds [0 x i32], [0 x i32]* @PL_opargs, i64 0, i64 %idxprom5
  %16 = load i32, i32* %arrayidx6, align 4
  %and = and i32 %16, 4
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then7, label %if.end9

if.then7:                                         ; preds = %do.end
  %17 = load %struct.op*, %struct.op** %o, align 8
  %call8 = call %struct.op* @Perl_scalar(%struct.op* %17)
  br label %if.end9

if.end9:                                          ; preds = %if.then7, %do.end
  %18 = load i32, i32* %type.addr, align 4
  %idxprom10 = sext i32 %18 to i64
  %arrayidx11 = getelementptr inbounds [0 x i32], [0 x i32]* @PL_opargs, i64 0, i64 %idxprom10
  %19 = load i32, i32* %arrayidx11, align 4
  %and12 = and i32 %19, 8
  %tobool13 = icmp ne i32 %and12, 0
  br i1 %tobool13, label %if.then14, label %if.end16

if.then14:                                        ; preds = %if.end9
  %20 = load i32, i32* %type.addr, align 4
  %call15 = call i64 @Perl_pad_alloc(i32 %20, i32 131072)
  %21 = load %struct.op*, %struct.op** %o, align 8
  %op_targ = getelementptr inbounds %struct.op, %struct.op* %21, i32 0, i32 3
  store i64 %call15, i64* %op_targ, align 8
  br label %if.end16

if.end16:                                         ; preds = %if.then14, %if.end9
  %22 = load i8*, i8** @PL_op_mask, align 8
  %tobool17 = icmp ne i8* %22, null
  br i1 %tobool17, label %land.lhs.true, label %cond.false

land.lhs.true:                                    ; preds = %if.end16
  %23 = load i8*, i8** @PL_op_mask, align 8
  %24 = load i32, i32* %type.addr, align 4
  %idxprom18 = sext i32 %24 to i64
  %arrayidx19 = getelementptr inbounds i8, i8* %23, i64 %idxprom18
  %25 = load i8, i8* %arrayidx19, align 1
  %conv20 = sext i8 %25 to i32
  %tobool21 = icmp ne i32 %conv20, 0
  br i1 %tobool21, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true
  %26 = load %struct.op*, %struct.op** %o, align 8
  call void @Perl_op_free(%struct.op* %26)
  %27 = load i32, i32* %type.addr, align 4
  %idxprom22 = sext i32 %27 to i64
  %arrayidx23 = getelementptr inbounds [0 x i8*], [0 x i8*]* @PL_op_desc, i64 0, i64 %idxprom22
  %28 = load i8*, i8** %arrayidx23, align 8
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.49, i64 0, i64 0), i8* %28)
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true, %if.end16
  %29 = load i32, i32* %type.addr, align 4
  %idxprom24 = sext i32 %29 to i64
  %arrayidx25 = getelementptr inbounds [0 x %struct.op* (%struct.op*)*], [0 x %struct.op* (%struct.op*)*]* @PL_check, i64 0, i64 %idxprom24
  %30 = load %struct.op* (%struct.op*)*, %struct.op* (%struct.op*)** %arrayidx25, align 8
  %31 = load %struct.op*, %struct.op** %o, align 8
  %call26 = call %struct.op* %30(%struct.op* %31)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.op* [ null, %cond.true ], [ %call26, %cond.false ]
  ret %struct.op* %cond
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_newLISTOP(i32 %type, i32 %flags, %struct.op* %first, %struct.op* %last) #0 {
entry:
  %type.addr = alloca i32, align 4
  %flags.addr = alloca i32, align 4
  %first.addr = alloca %struct.op*, align 8
  %last.addr = alloca %struct.op*, align 8
  %listop = alloca %struct.listop*, align 8
  %pushop = alloca %struct.op*, align 8
  store i32 %type, i32* %type.addr, align 4
  store i32 %flags, i32* %flags.addr, align 4
  store %struct.op* %first, %struct.op** %first.addr, align 8
  store %struct.op* %last, %struct.op** %last.addr, align 8
  %call = call i8* @Perl_Slab_Alloc(i64 56)
  %0 = bitcast i8* %call to %struct.listop*
  store %struct.listop* %0, %struct.listop** %listop, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %1 = load i32, i32* %type.addr, align 4
  %conv = trunc i32 %1 to i16
  %conv1 = zext i16 %conv to i32
  %2 = load %struct.listop*, %struct.listop** %listop, align 8
  %op_type = getelementptr inbounds %struct.listop, %struct.listop* %2, i32 0, i32 4
  %3 = trunc i32 %conv1 to i16
  %bf.load = load i16, i16* %op_type, align 8
  %bf.value = and i16 %3, 511
  %bf.clear = and i16 %bf.load, -512
  %bf.set = or i16 %bf.clear, %bf.value
  store i16 %bf.set, i16* %op_type, align 8
  %bf.result.cast = zext i16 %bf.value to i32
  %4 = load i32, i32* %type.addr, align 4
  %idxprom = sext i32 %4 to i64
  %arrayidx = getelementptr inbounds [0 x %struct.op* ()*], [0 x %struct.op* ()*]* @PL_ppaddr, i64 0, i64 %idxprom
  %5 = load %struct.op* ()*, %struct.op* ()** %arrayidx, align 8
  %6 = load %struct.listop*, %struct.listop** %listop, align 8
  %op_ppaddr = getelementptr inbounds %struct.listop, %struct.listop* %6, i32 0, i32 2
  store %struct.op* ()* %5, %struct.op* ()** %op_ppaddr, align 8
  br label %do.end

do.end:                                           ; preds = %do.body
  %7 = load %struct.op*, %struct.op** %first.addr, align 8
  %tobool = icmp ne %struct.op* %7, null
  br i1 %tobool, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %do.end
  %8 = load %struct.op*, %struct.op** %last.addr, align 8
  %tobool2 = icmp ne %struct.op* %8, null
  br i1 %tobool2, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %do.end
  %9 = load i32, i32* %flags.addr, align 4
  %or = or i32 %9, 4
  store i32 %or, i32* %flags.addr, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %lor.lhs.false
  %10 = load i32, i32* %flags.addr, align 4
  %conv3 = trunc i32 %10 to i8
  %11 = load %struct.listop*, %struct.listop** %listop, align 8
  %op_flags = getelementptr inbounds %struct.listop, %struct.listop* %11, i32 0, i32 5
  store i8 %conv3, i8* %op_flags, align 2
  %12 = load %struct.op*, %struct.op** %last.addr, align 8
  %tobool4 = icmp ne %struct.op* %12, null
  br i1 %tobool4, label %if.else, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.end
  %13 = load %struct.op*, %struct.op** %first.addr, align 8
  %tobool5 = icmp ne %struct.op* %13, null
  br i1 %tobool5, label %if.then6, label %if.else

if.then6:                                         ; preds = %land.lhs.true
  %14 = load %struct.op*, %struct.op** %first.addr, align 8
  store %struct.op* %14, %struct.op** %last.addr, align 8
  br label %if.end19

if.else:                                          ; preds = %land.lhs.true, %if.end
  %15 = load %struct.op*, %struct.op** %first.addr, align 8
  %tobool7 = icmp ne %struct.op* %15, null
  br i1 %tobool7, label %if.else11, label %land.lhs.true8

land.lhs.true8:                                   ; preds = %if.else
  %16 = load %struct.op*, %struct.op** %last.addr, align 8
  %tobool9 = icmp ne %struct.op* %16, null
  br i1 %tobool9, label %if.then10, label %if.else11

if.then10:                                        ; preds = %land.lhs.true8
  %17 = load %struct.op*, %struct.op** %last.addr, align 8
  store %struct.op* %17, %struct.op** %first.addr, align 8
  br label %if.end18

if.else11:                                        ; preds = %land.lhs.true8, %if.else
  %18 = load %struct.op*, %struct.op** %first.addr, align 8
  %tobool12 = icmp ne %struct.op* %18, null
  br i1 %tobool12, label %if.then13, label %if.end17

if.then13:                                        ; preds = %if.else11
  %19 = load %struct.op*, %struct.op** %first.addr, align 8
  %op_moresib = getelementptr inbounds %struct.op, %struct.op* %19, i32 0, i32 4
  %bf.load14 = load i16, i16* %op_moresib, align 8
  %bf.clear15 = and i16 %bf.load14, -16385
  %bf.set16 = or i16 %bf.clear15, 16384
  store i16 %bf.set16, i16* %op_moresib, align 8
  %20 = load %struct.op*, %struct.op** %last.addr, align 8
  %21 = load %struct.op*, %struct.op** %first.addr, align 8
  %op_sibling = getelementptr inbounds %struct.op, %struct.op* %21, i32 0, i32 1
  store %struct.op* %20, %struct.op** %op_sibling, align 8
  br label %if.end17

if.end17:                                         ; preds = %if.then13, %if.else11
  br label %if.end18

if.end18:                                         ; preds = %if.end17, %if.then10
  br label %if.end19

if.end19:                                         ; preds = %if.end18, %if.then6
  %22 = load %struct.op*, %struct.op** %first.addr, align 8
  %23 = load %struct.listop*, %struct.listop** %listop, align 8
  %op_first = getelementptr inbounds %struct.listop, %struct.listop* %23, i32 0, i32 7
  store %struct.op* %22, %struct.op** %op_first, align 8
  %24 = load %struct.op*, %struct.op** %last.addr, align 8
  %25 = load %struct.listop*, %struct.listop** %listop, align 8
  %op_last = getelementptr inbounds %struct.listop, %struct.listop* %25, i32 0, i32 8
  store %struct.op* %24, %struct.op** %op_last, align 8
  %26 = load i32, i32* %type.addr, align 4
  %cmp = icmp eq i32 %26, 158
  br i1 %cmp, label %if.then21, label %if.end37

if.then21:                                        ; preds = %if.end19
  %call22 = call %struct.op* @Perl_newOP(i32 3, i32 0)
  store %struct.op* %call22, %struct.op** %pushop, align 8
  %27 = load %struct.op*, %struct.op** %pushop, align 8
  %op_moresib23 = getelementptr inbounds %struct.op, %struct.op* %27, i32 0, i32 4
  %bf.load24 = load i16, i16* %op_moresib23, align 8
  %bf.clear25 = and i16 %bf.load24, -16385
  %bf.set26 = or i16 %bf.clear25, 16384
  store i16 %bf.set26, i16* %op_moresib23, align 8
  %28 = load %struct.op*, %struct.op** %first.addr, align 8
  %29 = load %struct.op*, %struct.op** %pushop, align 8
  %op_sibling27 = getelementptr inbounds %struct.op, %struct.op* %29, i32 0, i32 1
  store %struct.op* %28, %struct.op** %op_sibling27, align 8
  %30 = load %struct.op*, %struct.op** %pushop, align 8
  %31 = load %struct.listop*, %struct.listop** %listop, align 8
  %op_first28 = getelementptr inbounds %struct.listop, %struct.listop* %31, i32 0, i32 7
  store %struct.op* %30, %struct.op** %op_first28, align 8
  %32 = load %struct.listop*, %struct.listop** %listop, align 8
  %op_flags29 = getelementptr inbounds %struct.listop, %struct.listop* %32, i32 0, i32 5
  %33 = load i8, i8* %op_flags29, align 2
  %conv30 = zext i8 %33 to i32
  %or31 = or i32 %conv30, 4
  %conv32 = trunc i32 %or31 to i8
  store i8 %conv32, i8* %op_flags29, align 2
  %34 = load %struct.op*, %struct.op** %last.addr, align 8
  %tobool33 = icmp ne %struct.op* %34, null
  br i1 %tobool33, label %if.end36, label %if.then34

if.then34:                                        ; preds = %if.then21
  %35 = load %struct.op*, %struct.op** %pushop, align 8
  %36 = load %struct.listop*, %struct.listop** %listop, align 8
  %op_last35 = getelementptr inbounds %struct.listop, %struct.listop* %36, i32 0, i32 8
  store %struct.op* %35, %struct.op** %op_last35, align 8
  br label %if.end36

if.end36:                                         ; preds = %if.then34, %if.then21
  br label %if.end37

if.end37:                                         ; preds = %if.end36, %if.end19
  %37 = load %struct.listop*, %struct.listop** %listop, align 8
  %op_last38 = getelementptr inbounds %struct.listop, %struct.listop* %37, i32 0, i32 8
  %38 = load %struct.op*, %struct.op** %op_last38, align 8
  %tobool39 = icmp ne %struct.op* %38, null
  br i1 %tobool39, label %if.then40, label %if.end47

if.then40:                                        ; preds = %if.end37
  %39 = load %struct.listop*, %struct.listop** %listop, align 8
  %op_last41 = getelementptr inbounds %struct.listop, %struct.listop* %39, i32 0, i32 8
  %40 = load %struct.op*, %struct.op** %op_last41, align 8
  %op_moresib42 = getelementptr inbounds %struct.op, %struct.op* %40, i32 0, i32 4
  %bf.load43 = load i16, i16* %op_moresib42, align 8
  %bf.clear44 = and i16 %bf.load43, -16385
  store i16 %bf.clear44, i16* %op_moresib42, align 8
  %41 = load %struct.listop*, %struct.listop** %listop, align 8
  %op_last45 = getelementptr inbounds %struct.listop, %struct.listop* %41, i32 0, i32 8
  %42 = load %struct.op*, %struct.op** %op_last45, align 8
  %op_sibling46 = getelementptr inbounds %struct.op, %struct.op* %42, i32 0, i32 1
  store %struct.op* null, %struct.op** %op_sibling46, align 8
  br label %if.end47

if.end47:                                         ; preds = %if.then40, %if.end37
  %43 = load i8*, i8** @PL_op_mask, align 8
  %tobool48 = icmp ne i8* %43, null
  br i1 %tobool48, label %land.lhs.true49, label %cond.false

land.lhs.true49:                                  ; preds = %if.end47
  %44 = load i8*, i8** @PL_op_mask, align 8
  %45 = load i32, i32* %type.addr, align 4
  %idxprom50 = sext i32 %45 to i64
  %arrayidx51 = getelementptr inbounds i8, i8* %44, i64 %idxprom50
  %46 = load i8, i8* %arrayidx51, align 1
  %conv52 = sext i8 %46 to i32
  %tobool53 = icmp ne i32 %conv52, 0
  br i1 %tobool53, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true49
  %47 = load %struct.listop*, %struct.listop** %listop, align 8
  %48 = bitcast %struct.listop* %47 to %struct.op*
  call void @Perl_op_free(%struct.op* %48)
  %49 = load i32, i32* %type.addr, align 4
  %idxprom54 = sext i32 %49 to i64
  %arrayidx55 = getelementptr inbounds [0 x i8*], [0 x i8*]* @PL_op_desc, i64 0, i64 %idxprom54
  %50 = load i8*, i8** %arrayidx55, align 8
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.49, i64 0, i64 0), i8* %50)
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true49, %if.end47
  %51 = load i32, i32* %type.addr, align 4
  %idxprom56 = sext i32 %51 to i64
  %arrayidx57 = getelementptr inbounds [0 x %struct.op* (%struct.op*)*], [0 x %struct.op* (%struct.op*)*]* @PL_check, i64 0, i64 %idxprom56
  %52 = load %struct.op* (%struct.op*)*, %struct.op* (%struct.op*)** %arrayidx57, align 8
  %53 = load %struct.listop*, %struct.listop** %listop, align 8
  %54 = bitcast %struct.listop* %53 to %struct.op*
  %call58 = call %struct.op* %52(%struct.op* %54)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.op* [ null, %cond.true ], [ %call58, %cond.false ]
  ret %struct.op* %cond
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_op_unscope(%struct.op* %o) #0 {
entry:
  %o.addr = alloca %struct.op*, align 8
  %kid = alloca %struct.op*, align 8
  store %struct.op* %o, %struct.op** %o.addr, align 8
  %0 = load %struct.op*, %struct.op** %o.addr, align 8
  %tobool = icmp ne %struct.op* %0, null
  br i1 %tobool, label %land.lhs.true, label %if.end13

land.lhs.true:                                    ; preds = %entry
  %1 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type = getelementptr inbounds %struct.op, %struct.op* %1, i32 0, i32 4
  %bf.load = load i16, i16* %op_type, align 8
  %bf.clear = and i16 %bf.load, 511
  %bf.cast = zext i16 %bf.clear to i32
  %cmp = icmp eq i32 %bf.cast, 192
  br i1 %cmp, label %if.then, label %if.end13

if.then:                                          ; preds = %land.lhs.true
  %2 = load %struct.op*, %struct.op** %o.addr, align 8
  %3 = bitcast %struct.op* %2 to %struct.listop*
  %op_first = getelementptr inbounds %struct.listop, %struct.listop* %3, i32 0, i32 7
  %4 = load %struct.op*, %struct.op** %op_first, align 8
  store %struct.op* %4, %struct.op** %kid, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then
  %5 = load %struct.op*, %struct.op** %kid, align 8
  %tobool1 = icmp ne %struct.op* %5, null
  br i1 %tobool1, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %6 = load %struct.op*, %struct.op** %kid, align 8
  %op_type2 = getelementptr inbounds %struct.op, %struct.op* %6, i32 0, i32 4
  %bf.load3 = load i16, i16* %op_type2, align 8
  %bf.clear4 = and i16 %bf.load3, 511
  %bf.cast5 = zext i16 %bf.clear4 to i32
  %cmp6 = icmp eq i32 %bf.cast5, 193
  br i1 %cmp6, label %if.then12, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %for.body
  %7 = load %struct.op*, %struct.op** %kid, align 8
  %op_type7 = getelementptr inbounds %struct.op, %struct.op* %7, i32 0, i32 4
  %bf.load8 = load i16, i16* %op_type7, align 8
  %bf.clear9 = and i16 %bf.load8, 511
  %bf.cast10 = zext i16 %bf.clear9 to i32
  %cmp11 = icmp eq i32 %bf.cast10, 194
  br i1 %cmp11, label %if.then12, label %if.end

if.then12:                                        ; preds = %lor.lhs.false, %for.body
  %8 = load %struct.op*, %struct.op** %kid, align 8
  call void @Perl_op_null(%struct.op* %8)
  br label %if.end

if.end:                                           ; preds = %if.then12, %lor.lhs.false
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %9 = load %struct.op*, %struct.op** %kid, align 8
  %op_sibling = getelementptr inbounds %struct.op, %struct.op* %9, i32 0, i32 1
  %10 = load %struct.op*, %struct.op** %op_sibling, align 8
  %add.ptr = getelementptr inbounds %struct.op, %struct.op* %10, i64 0
  store %struct.op* %add.ptr, %struct.op** %kid, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end13

if.end13:                                         ; preds = %for.end, %land.lhs.true, %entry
  %11 = load %struct.op*, %struct.op** %o.addr, align 8
  ret %struct.op* %11
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @Perl_block_start(i32 %full) #0 {
entry:
  %full.addr = alloca i32, align 4
  %retval1 = alloca i32, align 4
  %i = alloca i64, align 8
  %sv = alloca %struct.sv*, align 8
  %hk = alloca %struct.block_hooks*, align 8
  store i32 %full, i32* %full.addr, align 4
  %0 = load i32, i32* @PL_savestack_ix, align 4
  store i32 %0, i32* %retval1, align 4
  %1 = load i32, i32* @PL_cop_seqmax, align 4
  store i32 %1, i32* getelementptr inbounds (%struct.cop, %struct.cop* @PL_compiling, i32 0, i32 11), align 4
  %2 = load i32, i32* @PL_cop_seqmax, align 4
  %inc = add i32 %2, 1
  store i32 %inc, i32* @PL_cop_seqmax, align 4
  %3 = load i32, i32* @PL_cop_seqmax, align 4
  %cmp = icmp eq i32 %3, -1
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %entry
  %4 = load i32, i32* @PL_cop_seqmax, align 4
  %inc2 = add i32 %4, 1
  store i32 %inc2, i32* @PL_cop_seqmax, align 4
  %tobool = icmp ne i32 %4, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %5 = phi i1 [ false, %entry ], [ %tobool, %land.rhs ]
  %land.ext = zext i1 %5 to i32
  %6 = load i32, i32* %full.addr, align 4
  call void @Perl_pad_block_start(i32 %6)
  call void @Perl_save_hints()
  %7 = load i32, i32* getelementptr inbounds (%struct.cop, %struct.cop* @PL_compiling, i32 0, i32 10), align 8
  %and = and i32 %7, -257
  store i32 %and, i32* getelementptr inbounds (%struct.cop, %struct.cop* @PL_compiling, i32 0, i32 10), align 8
  %8 = load i64*, i64** getelementptr inbounds (%struct.cop, %struct.cop* @PL_compiling, i32 0, i32 12), align 8
  %9 = bitcast i64* %8 to i8*
  call void @Perl_save_pushptr(i8* %9, i32 6)
  %10 = load i64*, i64** getelementptr inbounds (%struct.cop, %struct.cop* @PL_compiling, i32 0, i32 12), align 8
  %cmp3 = icmp eq i64* %10, null
  br i1 %cmp3, label %cond.true, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.end
  %11 = load i64*, i64** getelementptr inbounds (%struct.cop, %struct.cop* @PL_compiling, i32 0, i32 12), align 8
  %cmp4 = icmp eq i64* %11, getelementptr inbounds (i64, i64* null, i64 1)
  br i1 %cmp4, label %cond.true, label %lor.lhs.false5

lor.lhs.false5:                                   ; preds = %lor.lhs.false
  %12 = load i64*, i64** getelementptr inbounds (%struct.cop, %struct.cop* @PL_compiling, i32 0, i32 12), align 8
  %cmp6 = icmp eq i64* %12, getelementptr inbounds (i64, i64* null, i64 2)
  br i1 %cmp6, label %cond.true, label %cond.false

cond.true:                                        ; preds = %lor.lhs.false5, %lor.lhs.false, %land.end
  %13 = load i64*, i64** getelementptr inbounds (%struct.cop, %struct.cop* @PL_compiling, i32 0, i32 12), align 8
  br label %cond.end

cond.false:                                       ; preds = %lor.lhs.false5
  %14 = load i64*, i64** getelementptr inbounds (%struct.cop, %struct.cop* @PL_compiling, i32 0, i32 12), align 8
  %15 = load i64, i64* %14, align 8
  %add = add i64 8, %15
  %call = call noalias i8* @malloc(i64 %add) #5
  %16 = load i64*, i64** getelementptr inbounds (%struct.cop, %struct.cop* @PL_compiling, i32 0, i32 12), align 8
  %17 = bitcast i64* %16 to i8*
  %18 = load i64*, i64** getelementptr inbounds (%struct.cop, %struct.cop* @PL_compiling, i32 0, i32 12), align 8
  %19 = load i64, i64* %18, align 8
  %add7 = add i64 8, %19
  %mul = mul i64 %add7, 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %call, i8* align 1 %17, i64 %mul, i1 false)
  %20 = bitcast i8* %call to i64*
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64* [ %13, %cond.true ], [ %20, %cond.false ]
  store i64* %cond, i64** getelementptr inbounds (%struct.cop, %struct.cop* @PL_compiling, i32 0, i32 12), align 8
  call void @Perl_save_I32(i32* getelementptr inbounds (%struct.cop, %struct.cop* @PL_compiling, i32 0, i32 11))
  store i32 0, i32* getelementptr inbounds (%struct.cop, %struct.cop* @PL_compiling, i32 0, i32 11), align 4
  br label %do.body

do.body:                                          ; preds = %cond.end
  %21 = load %struct.av*, %struct.av** @PL_blockhooks, align 8
  %tobool8 = icmp ne %struct.av* %21, null
  br i1 %tobool8, label %if.then, label %if.end30

if.then:                                          ; preds = %do.body
  %22 = load %struct.av*, %struct.av** @PL_blockhooks, align 8
  %call9 = call i64 @S_av_top_index(%struct.av* %22)
  store i64 %call9, i64* %i, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then
  %23 = load i64, i64* %i, align 8
  %cmp10 = icmp sge i64 %23, 0
  br i1 %cmp10, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %24 = load %struct.av*, %struct.av** @PL_blockhooks, align 8
  %sv_u = getelementptr inbounds %struct.av, %struct.av* %24, i32 0, i32 3
  %svu_array = bitcast %union.anon.2* %sv_u to %struct.sv***
  %25 = load %struct.sv**, %struct.sv*** %svu_array, align 8
  %26 = load i64, i64* %i, align 8
  %arrayidx = getelementptr inbounds %struct.sv*, %struct.sv** %25, i64 %26
  %27 = load %struct.sv*, %struct.sv** %arrayidx, align 8
  store %struct.sv* %27, %struct.sv** %sv, align 8
  %28 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %28, i32 0, i32 2
  %29 = load i32, i32* %sv_flags, align 4
  %and11 = and i32 %29, -2147483392
  %cmp12 = icmp eq i32 %and11, -2147483392
  br i1 %cmp12, label %if.then13, label %if.else

if.then13:                                        ; preds = %for.body
  %30 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %30, i32 0, i32 0
  %31 = load i8*, i8** %sv_any, align 8
  %32 = bitcast i8* %31 to %struct.xpvuv*
  %xuv_u = getelementptr inbounds %struct.xpvuv, %struct.xpvuv* %32, i32 0, i32 4
  %xivu_uv = bitcast %union._xivu* %xuv_u to i64*
  %33 = load i64, i64* %xivu_uv, align 8
  %34 = inttoptr i64 %33 to %struct.block_hooks*
  store %struct.block_hooks* %34, %struct.block_hooks** %hk, align 8
  br label %if.end

if.else:                                          ; preds = %for.body
  %35 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any14 = getelementptr inbounds %struct.sv, %struct.sv* %35, i32 0, i32 0
  %36 = load i8*, i8** %sv_any14, align 8
  %37 = bitcast i8* %36 to %struct.xpviv*
  %xiv_u = getelementptr inbounds %struct.xpviv, %struct.xpviv* %37, i32 0, i32 4
  %xivu_iv = bitcast %union._xivu* %xiv_u to i64*
  %38 = load i64, i64* %xivu_iv, align 8
  %39 = inttoptr i64 %38 to %struct.block_hooks*
  store %struct.block_hooks* %39, %struct.block_hooks** %hk, align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then13
  %40 = load %struct.block_hooks*, %struct.block_hooks** %hk, align 8
  %bhk_flags = getelementptr inbounds %struct.block_hooks, %struct.block_hooks* %40, i32 0, i32 0
  %41 = load i32, i32* %bhk_flags, align 8
  %and15 = and i32 %41, 1
  %tobool16 = icmp ne i32 %and15, 0
  br i1 %tobool16, label %cond.true17, label %cond.false19

cond.true17:                                      ; preds = %if.end
  %42 = load %struct.block_hooks*, %struct.block_hooks** %hk, align 8
  %bhk_start = getelementptr inbounds %struct.block_hooks, %struct.block_hooks* %42, i32 0, i32 1
  %43 = load void (i32)*, void (i32)** %bhk_start, align 8
  %tobool18 = icmp ne void (i32)* %43, null
  br i1 %tobool18, label %if.then20, label %if.end29

cond.false19:                                     ; preds = %if.end
  br i1 false, label %if.then20, label %if.end29

if.then20:                                        ; preds = %cond.false19, %cond.true17
  %44 = load %struct.block_hooks*, %struct.block_hooks** %hk, align 8
  %bhk_flags21 = getelementptr inbounds %struct.block_hooks, %struct.block_hooks* %44, i32 0, i32 0
  %45 = load i32, i32* %bhk_flags21, align 8
  %and22 = and i32 %45, 1
  %tobool23 = icmp ne i32 %and22, 0
  br i1 %tobool23, label %cond.true24, label %cond.false26

cond.true24:                                      ; preds = %if.then20
  %46 = load %struct.block_hooks*, %struct.block_hooks** %hk, align 8
  %bhk_start25 = getelementptr inbounds %struct.block_hooks, %struct.block_hooks* %46, i32 0, i32 1
  %47 = load void (i32)*, void (i32)** %bhk_start25, align 8
  br label %cond.end27

cond.false26:                                     ; preds = %if.then20
  br label %cond.end27

cond.end27:                                       ; preds = %cond.false26, %cond.true24
  %cond28 = phi void (i32)* [ %47, %cond.true24 ], [ null, %cond.false26 ]
  %48 = load i32, i32* %full.addr, align 4
  call void %cond28(i32 %48)
  br label %if.end29

if.end29:                                         ; preds = %cond.end27, %cond.false19, %cond.true17
  br label %for.inc

for.inc:                                          ; preds = %if.end29
  %49 = load i64, i64* %i, align 8
  %dec = add nsw i64 %49, -1
  store i64 %dec, i64* %i, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end30

if.end30:                                         ; preds = %for.end, %do.body
  br label %do.end

do.end:                                           ; preds = %if.end30
  %50 = load i32, i32* %retval1, align 4
  ret i32 %50
}

declare dso_local void @Perl_pad_block_start(i32) #3

declare dso_local void @Perl_save_hints() #3

; Function Attrs: nounwind
declare dso_local noalias i8* @malloc(i64) #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #2

declare dso_local void @Perl_save_I32(i32*) #3

; Function Attrs: noinline nounwind uwtable
define internal i64 @S_av_top_index(%struct.av* %av) #0 {
entry:
  %av.addr = alloca %struct.av*, align 8
  store %struct.av* %av, %struct.av** %av.addr, align 8
  %0 = load %struct.av*, %struct.av** %av.addr, align 8
  %1 = bitcast %struct.av* %0 to %struct.sv*
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %1, i32 0, i32 2
  %2 = load i32, i32* %sv_flags, align 4
  %and = and i32 %2, 8388608
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %3 = load %struct.av*, %struct.av** %av.addr, align 8
  %4 = bitcast %struct.av* %3 to i8*
  %5 = bitcast i8* %4 to %struct.sv*
  %call = call i32 @Perl_mg_size(%struct.sv* %5)
  %conv = sext i32 %call to i64
  br label %cond.end

cond.false:                                       ; preds = %entry
  %6 = load %struct.av*, %struct.av** %av.addr, align 8
  %sv_any = getelementptr inbounds %struct.av, %struct.av* %6, i32 0, i32 0
  %7 = load %struct.xpvav*, %struct.xpvav** %sv_any, align 8
  %xav_fill = getelementptr inbounds %struct.xpvav, %struct.xpvav* %7, i32 0, i32 2
  %8 = load i64, i64* %xav_fill, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %conv, %cond.true ], [ %8, %cond.false ]
  ret i64 %cond
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_block_end(i32 %floor, %struct.op* %seq) #0 {
entry:
  %floor.addr = alloca i32, align 4
  %seq.addr = alloca %struct.op*, align 8
  %needblockscope = alloca i32, align 4
  %retval1 = alloca %struct.op*, align 8
  %o = alloca %struct.op*, align 8
  %i = alloca i64, align 8
  %sv = alloca %struct.sv*, align 8
  %hk = alloca %struct.block_hooks*, align 8
  %kid = alloca %struct.op*, align 8
  %last = alloca %struct.op*, align 8
  %newkid = alloca %struct.op*, align 8
  %i65 = alloca i64, align 8
  %sv71 = alloca %struct.sv*, align 8
  %hk75 = alloca %struct.block_hooks*, align 8
  store i32 %floor, i32* %floor.addr, align 4
  store %struct.op* %seq, %struct.op** %seq.addr, align 8
  %0 = load i32, i32* getelementptr inbounds (%struct.cop, %struct.cop* @PL_compiling, i32 0, i32 10), align 8
  %and = and i32 %0, 256
  store i32 %and, i32* %needblockscope, align 4
  %1 = load %struct.op*, %struct.op** %seq.addr, align 8
  %call = call %struct.op* @S_scalarseq(%struct.op* %1)
  store %struct.op* %call, %struct.op** %retval1, align 8
  %2 = load %struct.yy_parser*, %struct.yy_parser** @PL_parser, align 8
  %tobool = icmp ne %struct.yy_parser* %2, null
  br i1 %tobool, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %3 = load %struct.yy_parser*, %struct.yy_parser** @PL_parser, align 8
  %parsed_sub = getelementptr inbounds %struct.yy_parser, %struct.yy_parser* %3, i32 0, i32 58
  %bf.load = load i8, i8* %parsed_sub, align 2
  %bf.lshr = lshr i8 %bf.load, 3
  %bf.clear = and i8 %bf.lshr, 1
  %bf.cast = zext i8 %bf.clear to i32
  %tobool2 = icmp ne i32 %bf.cast, 0
  br i1 %tobool2, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %call3 = call %struct.op* @Perl_newSTATEOP(i32 0, i8* null, %struct.op* null)
  store %struct.op* %call3, %struct.op** %o, align 8
  %4 = load %struct.op*, %struct.op** %o, align 8
  call void @Perl_op_null(%struct.op* %4)
  %5 = load %struct.op*, %struct.op** %retval1, align 8
  %6 = load %struct.op*, %struct.op** %o, align 8
  %call4 = call %struct.op* @Perl_op_append_elem(i32 192, %struct.op* %5, %struct.op* %6)
  store %struct.op* %call4, %struct.op** %retval1, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  br label %do.body

do.body:                                          ; preds = %if.end
  %7 = load %struct.av*, %struct.av** @PL_blockhooks, align 8
  %tobool5 = icmp ne %struct.av* %7, null
  br i1 %tobool5, label %if.then6, label %if.end24

if.then6:                                         ; preds = %do.body
  %8 = load %struct.av*, %struct.av** @PL_blockhooks, align 8
  %call7 = call i64 @S_av_top_index(%struct.av* %8)
  store i64 %call7, i64* %i, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then6
  %9 = load i64, i64* %i, align 8
  %cmp = icmp sge i64 %9, 0
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %10 = load %struct.av*, %struct.av** @PL_blockhooks, align 8
  %sv_u = getelementptr inbounds %struct.av, %struct.av* %10, i32 0, i32 3
  %svu_array = bitcast %union.anon.2* %sv_u to %struct.sv***
  %11 = load %struct.sv**, %struct.sv*** %svu_array, align 8
  %12 = load i64, i64* %i, align 8
  %arrayidx = getelementptr inbounds %struct.sv*, %struct.sv** %11, i64 %12
  %13 = load %struct.sv*, %struct.sv** %arrayidx, align 8
  store %struct.sv* %13, %struct.sv** %sv, align 8
  %14 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %14, i32 0, i32 2
  %15 = load i32, i32* %sv_flags, align 4
  %and8 = and i32 %15, -2147483392
  %cmp9 = icmp eq i32 %and8, -2147483392
  br i1 %cmp9, label %if.then10, label %if.else

if.then10:                                        ; preds = %for.body
  %16 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %16, i32 0, i32 0
  %17 = load i8*, i8** %sv_any, align 8
  %18 = bitcast i8* %17 to %struct.xpvuv*
  %xuv_u = getelementptr inbounds %struct.xpvuv, %struct.xpvuv* %18, i32 0, i32 4
  %xivu_uv = bitcast %union._xivu* %xuv_u to i64*
  %19 = load i64, i64* %xivu_uv, align 8
  %20 = inttoptr i64 %19 to %struct.block_hooks*
  store %struct.block_hooks* %20, %struct.block_hooks** %hk, align 8
  br label %if.end12

if.else:                                          ; preds = %for.body
  %21 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any11 = getelementptr inbounds %struct.sv, %struct.sv* %21, i32 0, i32 0
  %22 = load i8*, i8** %sv_any11, align 8
  %23 = bitcast i8* %22 to %struct.xpviv*
  %xiv_u = getelementptr inbounds %struct.xpviv, %struct.xpviv* %23, i32 0, i32 4
  %xivu_iv = bitcast %union._xivu* %xiv_u to i64*
  %24 = load i64, i64* %xivu_iv, align 8
  %25 = inttoptr i64 %24 to %struct.block_hooks*
  store %struct.block_hooks* %25, %struct.block_hooks** %hk, align 8
  br label %if.end12

if.end12:                                         ; preds = %if.else, %if.then10
  %26 = load %struct.block_hooks*, %struct.block_hooks** %hk, align 8
  %bhk_flags = getelementptr inbounds %struct.block_hooks, %struct.block_hooks* %26, i32 0, i32 0
  %27 = load i32, i32* %bhk_flags, align 8
  %and13 = and i32 %27, 2
  %tobool14 = icmp ne i32 %and13, 0
  br i1 %tobool14, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end12
  %28 = load %struct.block_hooks*, %struct.block_hooks** %hk, align 8
  %bhk_pre_end = getelementptr inbounds %struct.block_hooks, %struct.block_hooks* %28, i32 0, i32 2
  %29 = load void (%struct.op**)*, void (%struct.op**)** %bhk_pre_end, align 8
  %tobool15 = icmp ne void (%struct.op**)* %29, null
  br i1 %tobool15, label %if.then16, label %if.end23

cond.false:                                       ; preds = %if.end12
  br i1 false, label %if.then16, label %if.end23

if.then16:                                        ; preds = %cond.false, %cond.true
  %30 = load %struct.block_hooks*, %struct.block_hooks** %hk, align 8
  %bhk_flags17 = getelementptr inbounds %struct.block_hooks, %struct.block_hooks* %30, i32 0, i32 0
  %31 = load i32, i32* %bhk_flags17, align 8
  %and18 = and i32 %31, 2
  %tobool19 = icmp ne i32 %and18, 0
  br i1 %tobool19, label %cond.true20, label %cond.false22

cond.true20:                                      ; preds = %if.then16
  %32 = load %struct.block_hooks*, %struct.block_hooks** %hk, align 8
  %bhk_pre_end21 = getelementptr inbounds %struct.block_hooks, %struct.block_hooks* %32, i32 0, i32 2
  %33 = load void (%struct.op**)*, void (%struct.op**)** %bhk_pre_end21, align 8
  br label %cond.end

cond.false22:                                     ; preds = %if.then16
  br label %cond.end

cond.end:                                         ; preds = %cond.false22, %cond.true20
  %cond = phi void (%struct.op**)* [ %33, %cond.true20 ], [ null, %cond.false22 ]
  call void %cond(%struct.op** %retval1)
  br label %if.end23

if.end23:                                         ; preds = %cond.end, %cond.false, %cond.true
  br label %for.inc

for.inc:                                          ; preds = %if.end23
  %34 = load i64, i64* %i, align 8
  %dec = add nsw i64 %34, -1
  store i64 %dec, i64* %i, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end24

if.end24:                                         ; preds = %for.end, %do.body
  br label %do.end

do.end:                                           ; preds = %if.end24
  br label %do.body25

do.body25:                                        ; preds = %do.end
  %35 = load i32, i32* @PL_savestack_ix, align 4
  %36 = load i32, i32* %floor.addr, align 4
  %cmp26 = icmp sgt i32 %35, %36
  br i1 %cmp26, label %if.then27, label %if.end28

if.then27:                                        ; preds = %do.body25
  %37 = load i32, i32* %floor.addr, align 4
  call void @Perl_leave_scope(i32 %37)
  br label %if.end28

if.end28:                                         ; preds = %if.then27, %do.body25
  br label %do.end29

do.end29:                                         ; preds = %if.end28
  %38 = load i32, i32* %needblockscope, align 4
  %tobool30 = icmp ne i32 %38, 0
  br i1 %tobool30, label %if.then31, label %if.end32

if.then31:                                        ; preds = %do.end29
  %39 = load i32, i32* getelementptr inbounds (%struct.cop, %struct.cop* @PL_compiling, i32 0, i32 10), align 8
  %or = or i32 %39, 256
  store i32 %or, i32* getelementptr inbounds (%struct.cop, %struct.cop* @PL_compiling, i32 0, i32 10), align 8
  br label %if.end32

if.end32:                                         ; preds = %if.then31, %do.end29
  %call33 = call %struct.op* @Perl_pad_leavemy()
  store %struct.op* %call33, %struct.op** %o, align 8
  %40 = load %struct.op*, %struct.op** %o, align 8
  %tobool34 = icmp ne %struct.op* %40, null
  br i1 %tobool34, label %if.then35, label %if.end61

if.then35:                                        ; preds = %if.end32
  %41 = load %struct.op*, %struct.op** %o, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %41, i32 0, i32 5
  %42 = load i8, i8* %op_flags, align 2
  %conv = zext i8 %42 to i32
  %and36 = and i32 %conv, 4
  %tobool37 = icmp ne i32 %and36, 0
  br i1 %tobool37, label %cond.true38, label %cond.false39

cond.true38:                                      ; preds = %if.then35
  %43 = load %struct.op*, %struct.op** %o, align 8
  %44 = bitcast %struct.op* %43 to %struct.listop*
  %op_first = getelementptr inbounds %struct.listop, %struct.listop* %44, i32 0, i32 7
  %45 = load %struct.op*, %struct.op** %op_first, align 8
  br label %cond.end40

cond.false39:                                     ; preds = %if.then35
  %46 = load %struct.op*, %struct.op** %o, align 8
  br label %cond.end40

cond.end40:                                       ; preds = %cond.false39, %cond.true38
  %cond41 = phi %struct.op* [ %45, %cond.true38 ], [ %46, %cond.false39 ]
  store %struct.op* %cond41, %struct.op** %kid, align 8
  %47 = load %struct.op*, %struct.op** %o, align 8
  %op_flags42 = getelementptr inbounds %struct.op, %struct.op* %47, i32 0, i32 5
  %48 = load i8, i8* %op_flags42, align 2
  %conv43 = zext i8 %48 to i32
  %and44 = and i32 %conv43, 4
  %tobool45 = icmp ne i32 %and44, 0
  br i1 %tobool45, label %cond.true46, label %cond.false47

cond.true46:                                      ; preds = %cond.end40
  %49 = load %struct.op*, %struct.op** %o, align 8
  %50 = bitcast %struct.op* %49 to %struct.listop*
  %op_last = getelementptr inbounds %struct.listop, %struct.listop* %50, i32 0, i32 8
  %51 = load %struct.op*, %struct.op** %op_last, align 8
  br label %cond.end48

cond.false47:                                     ; preds = %cond.end40
  %52 = load %struct.op*, %struct.op** %o, align 8
  br label %cond.end48

cond.end48:                                       ; preds = %cond.false47, %cond.true46
  %cond49 = phi %struct.op* [ %51, %cond.true46 ], [ %52, %cond.false47 ]
  store %struct.op* %cond49, %struct.op** %last, align 8
  br label %for.cond50

for.cond50:                                       ; preds = %for.inc58, %cond.end48
  %call51 = call %struct.op* @Perl_newOP(i32 389, i32 0)
  store %struct.op* %call51, %struct.op** %newkid, align 8
  %53 = load %struct.op*, %struct.op** %kid, align 8
  %op_targ = getelementptr inbounds %struct.op, %struct.op* %53, i32 0, i32 3
  %54 = load i64, i64* %op_targ, align 8
  %55 = load %struct.op*, %struct.op** %newkid, align 8
  %op_targ52 = getelementptr inbounds %struct.op, %struct.op* %55, i32 0, i32 3
  store i64 %54, i64* %op_targ52, align 8
  %56 = load %struct.op*, %struct.op** %o, align 8
  %57 = load %struct.op*, %struct.op** %newkid, align 8
  %call53 = call %struct.op* @Perl_op_append_elem(i32 192, %struct.op* %56, %struct.op* %57)
  store %struct.op* %call53, %struct.op** %o, align 8
  %58 = load %struct.op*, %struct.op** %kid, align 8
  %59 = load %struct.op*, %struct.op** %last, align 8
  %cmp54 = icmp eq %struct.op* %58, %59
  br i1 %cmp54, label %if.then56, label %if.end57

if.then56:                                        ; preds = %for.cond50
  br label %for.end59

if.end57:                                         ; preds = %for.cond50
  br label %for.inc58

for.inc58:                                        ; preds = %if.end57
  %60 = load %struct.op*, %struct.op** %kid, align 8
  %op_sibling = getelementptr inbounds %struct.op, %struct.op* %60, i32 0, i32 1
  %61 = load %struct.op*, %struct.op** %op_sibling, align 8
  %add.ptr = getelementptr inbounds %struct.op, %struct.op* %61, i64 0
  store %struct.op* %add.ptr, %struct.op** %kid, align 8
  br label %for.cond50

for.end59:                                        ; preds = %if.then56
  %62 = load %struct.op*, %struct.op** %o, align 8
  %63 = load %struct.op*, %struct.op** %retval1, align 8
  %call60 = call %struct.op* @Perl_op_prepend_elem(i32 192, %struct.op* %62, %struct.op* %63)
  store %struct.op* %call60, %struct.op** %retval1, align 8
  br label %if.end61

if.end61:                                         ; preds = %for.end59, %if.end32
  br label %do.body62

do.body62:                                        ; preds = %if.end61
  %64 = load %struct.av*, %struct.av** @PL_blockhooks, align 8
  %tobool63 = icmp ne %struct.av* %64, null
  br i1 %tobool63, label %if.then64, label %if.end108

if.then64:                                        ; preds = %do.body62
  %65 = load %struct.av*, %struct.av** @PL_blockhooks, align 8
  %call66 = call i64 @S_av_top_index(%struct.av* %65)
  store i64 %call66, i64* %i65, align 8
  br label %for.cond67

for.cond67:                                       ; preds = %for.inc105, %if.then64
  %66 = load i64, i64* %i65, align 8
  %cmp68 = icmp sge i64 %66, 0
  br i1 %cmp68, label %for.body70, label %for.end107

for.body70:                                       ; preds = %for.cond67
  %67 = load %struct.av*, %struct.av** @PL_blockhooks, align 8
  %sv_u72 = getelementptr inbounds %struct.av, %struct.av* %67, i32 0, i32 3
  %svu_array73 = bitcast %union.anon.2* %sv_u72 to %struct.sv***
  %68 = load %struct.sv**, %struct.sv*** %svu_array73, align 8
  %69 = load i64, i64* %i65, align 8
  %arrayidx74 = getelementptr inbounds %struct.sv*, %struct.sv** %68, i64 %69
  %70 = load %struct.sv*, %struct.sv** %arrayidx74, align 8
  store %struct.sv* %70, %struct.sv** %sv71, align 8
  %71 = load %struct.sv*, %struct.sv** %sv71, align 8
  %sv_flags76 = getelementptr inbounds %struct.sv, %struct.sv* %71, i32 0, i32 2
  %72 = load i32, i32* %sv_flags76, align 4
  %and77 = and i32 %72, -2147483392
  %cmp78 = icmp eq i32 %and77, -2147483392
  br i1 %cmp78, label %if.then80, label %if.else84

if.then80:                                        ; preds = %for.body70
  %73 = load %struct.sv*, %struct.sv** %sv71, align 8
  %sv_any81 = getelementptr inbounds %struct.sv, %struct.sv* %73, i32 0, i32 0
  %74 = load i8*, i8** %sv_any81, align 8
  %75 = bitcast i8* %74 to %struct.xpvuv*
  %xuv_u82 = getelementptr inbounds %struct.xpvuv, %struct.xpvuv* %75, i32 0, i32 4
  %xivu_uv83 = bitcast %union._xivu* %xuv_u82 to i64*
  %76 = load i64, i64* %xivu_uv83, align 8
  %77 = inttoptr i64 %76 to %struct.block_hooks*
  store %struct.block_hooks* %77, %struct.block_hooks** %hk75, align 8
  br label %if.end88

if.else84:                                        ; preds = %for.body70
  %78 = load %struct.sv*, %struct.sv** %sv71, align 8
  %sv_any85 = getelementptr inbounds %struct.sv, %struct.sv* %78, i32 0, i32 0
  %79 = load i8*, i8** %sv_any85, align 8
  %80 = bitcast i8* %79 to %struct.xpviv*
  %xiv_u86 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %80, i32 0, i32 4
  %xivu_iv87 = bitcast %union._xivu* %xiv_u86 to i64*
  %81 = load i64, i64* %xivu_iv87, align 8
  %82 = inttoptr i64 %81 to %struct.block_hooks*
  store %struct.block_hooks* %82, %struct.block_hooks** %hk75, align 8
  br label %if.end88

if.end88:                                         ; preds = %if.else84, %if.then80
  %83 = load %struct.block_hooks*, %struct.block_hooks** %hk75, align 8
  %bhk_flags89 = getelementptr inbounds %struct.block_hooks, %struct.block_hooks* %83, i32 0, i32 0
  %84 = load i32, i32* %bhk_flags89, align 8
  %and90 = and i32 %84, 4
  %tobool91 = icmp ne i32 %and90, 0
  br i1 %tobool91, label %cond.true92, label %cond.false94

cond.true92:                                      ; preds = %if.end88
  %85 = load %struct.block_hooks*, %struct.block_hooks** %hk75, align 8
  %bhk_post_end = getelementptr inbounds %struct.block_hooks, %struct.block_hooks* %85, i32 0, i32 3
  %86 = load void (%struct.op**)*, void (%struct.op**)** %bhk_post_end, align 8
  %tobool93 = icmp ne void (%struct.op**)* %86, null
  br i1 %tobool93, label %if.then95, label %if.end104

cond.false94:                                     ; preds = %if.end88
  br i1 false, label %if.then95, label %if.end104

if.then95:                                        ; preds = %cond.false94, %cond.true92
  %87 = load %struct.block_hooks*, %struct.block_hooks** %hk75, align 8
  %bhk_flags96 = getelementptr inbounds %struct.block_hooks, %struct.block_hooks* %87, i32 0, i32 0
  %88 = load i32, i32* %bhk_flags96, align 8
  %and97 = and i32 %88, 4
  %tobool98 = icmp ne i32 %and97, 0
  br i1 %tobool98, label %cond.true99, label %cond.false101

cond.true99:                                      ; preds = %if.then95
  %89 = load %struct.block_hooks*, %struct.block_hooks** %hk75, align 8
  %bhk_post_end100 = getelementptr inbounds %struct.block_hooks, %struct.block_hooks* %89, i32 0, i32 3
  %90 = load void (%struct.op**)*, void (%struct.op**)** %bhk_post_end100, align 8
  br label %cond.end102

cond.false101:                                    ; preds = %if.then95
  br label %cond.end102

cond.end102:                                      ; preds = %cond.false101, %cond.true99
  %cond103 = phi void (%struct.op**)* [ %90, %cond.true99 ], [ null, %cond.false101 ]
  call void %cond103(%struct.op** %retval1)
  br label %if.end104

if.end104:                                        ; preds = %cond.end102, %cond.false94, %cond.true92
  br label %for.inc105

for.inc105:                                       ; preds = %if.end104
  %91 = load i64, i64* %i65, align 8
  %dec106 = add nsw i64 %91, -1
  store i64 %dec106, i64* %i65, align 8
  br label %for.cond67

for.end107:                                       ; preds = %for.cond67
  br label %if.end108

if.end108:                                        ; preds = %for.end107, %do.body62
  br label %do.end109

do.end109:                                        ; preds = %if.end108
  %92 = load %struct.op*, %struct.op** %retval1, align 8
  ret %struct.op* %92
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.op* @S_scalarseq(%struct.op* %o) #0 {
entry:
  %o.addr = alloca %struct.op*, align 8
  %type = alloca i16, align 2
  %kid = alloca %struct.op*, align 8
  %sib = alloca %struct.op*, align 8
  store %struct.op* %o, %struct.op** %o.addr, align 8
  %0 = load %struct.op*, %struct.op** %o.addr, align 8
  %tobool = icmp ne %struct.op* %0, null
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type = getelementptr inbounds %struct.op, %struct.op* %1, i32 0, i32 4
  %bf.load = load i16, i16* %op_type, align 8
  %bf.clear = and i16 %bf.load, 511
  %bf.cast = zext i16 %bf.clear to i32
  %conv = trunc i32 %bf.cast to i16
  store i16 %conv, i16* %type, align 2
  %2 = load i16, i16* %type, align 2
  %conv1 = zext i16 %2 to i32
  %cmp = icmp eq i32 %conv1, 192
  br i1 %cmp, label %if.then14, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.then
  %3 = load i16, i16* %type, align 2
  %conv3 = zext i16 %3 to i32
  %cmp4 = icmp eq i32 %conv3, 198
  br i1 %cmp4, label %if.then14, label %lor.lhs.false6

lor.lhs.false6:                                   ; preds = %lor.lhs.false
  %4 = load i16, i16* %type, align 2
  %conv7 = zext i16 %4 to i32
  %cmp8 = icmp eq i32 %conv7, 197
  br i1 %cmp8, label %if.then14, label %lor.lhs.false10

lor.lhs.false10:                                  ; preds = %lor.lhs.false6
  %5 = load i16, i16* %type, align 2
  %conv11 = zext i16 %5 to i32
  %cmp12 = icmp eq i32 %conv11, 345
  br i1 %cmp12, label %if.then14, label %if.end34

if.then14:                                        ; preds = %lor.lhs.false10, %lor.lhs.false6, %lor.lhs.false, %if.then
  %6 = load %struct.op*, %struct.op** %o.addr, align 8
  %7 = bitcast %struct.op* %6 to %struct.listop*
  %op_first = getelementptr inbounds %struct.listop, %struct.listop* %7, i32 0, i32 7
  %8 = load %struct.op*, %struct.op** %op_first, align 8
  store %struct.op* %8, %struct.op** %kid, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then14
  %9 = load %struct.op*, %struct.op** %kid, align 8
  %tobool15 = icmp ne %struct.op* %9, null
  br i1 %tobool15, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %10 = load %struct.op*, %struct.op** %kid, align 8
  %op_sibling = getelementptr inbounds %struct.op, %struct.op* %10, i32 0, i32 1
  %11 = load %struct.op*, %struct.op** %op_sibling, align 8
  %add.ptr = getelementptr inbounds %struct.op, %struct.op* %11, i64 0
  store %struct.op* %add.ptr, %struct.op** %sib, align 8
  %tobool16 = icmp ne %struct.op* %add.ptr, null
  br i1 %tobool16, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %for.body
  %12 = load %struct.op*, %struct.op** %sib, align 8
  %op_sibling17 = getelementptr inbounds %struct.op, %struct.op* %12, i32 0, i32 1
  %13 = load %struct.op*, %struct.op** %op_sibling17, align 8
  %tobool18 = icmp ne %struct.op* %13, null
  br i1 %tobool18, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true
  br i1 true, label %if.then33, label %lor.lhs.false19

cond.false:                                       ; preds = %land.lhs.true
  br i1 false, label %if.then33, label %lor.lhs.false19

lor.lhs.false19:                                  ; preds = %cond.false, %cond.true
  %14 = load %struct.op*, %struct.op** %sib, align 8
  %op_type20 = getelementptr inbounds %struct.op, %struct.op* %14, i32 0, i32 4
  %bf.load21 = load i16, i16* %op_type20, align 8
  %bf.clear22 = and i16 %bf.load21, 511
  %bf.cast23 = zext i16 %bf.clear22 to i32
  %cmp24 = icmp ne i32 %bf.cast23, 0
  br i1 %cmp24, label %if.then33, label %lor.lhs.false26

lor.lhs.false26:                                  ; preds = %lor.lhs.false19
  %15 = load %struct.op*, %struct.op** %sib, align 8
  %op_targ = getelementptr inbounds %struct.op, %struct.op* %15, i32 0, i32 3
  %16 = load i64, i64* %op_targ, align 8
  %cmp27 = icmp ne i64 %16, 193
  br i1 %cmp27, label %land.lhs.true29, label %if.end

land.lhs.true29:                                  ; preds = %lor.lhs.false26
  %17 = load %struct.op*, %struct.op** %sib, align 8
  %op_targ30 = getelementptr inbounds %struct.op, %struct.op* %17, i32 0, i32 3
  %18 = load i64, i64* %op_targ30, align 8
  %cmp31 = icmp ne i64 %18, 194
  br i1 %cmp31, label %if.then33, label %if.end

if.then33:                                        ; preds = %land.lhs.true29, %lor.lhs.false19, %cond.false, %cond.true
  %19 = load %struct.op*, %struct.op** %kid, align 8
  %call = call %struct.op* @Perl_scalarvoid(%struct.op* %19)
  br label %if.end

if.end:                                           ; preds = %if.then33, %land.lhs.true29, %lor.lhs.false26, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %20 = load %struct.op*, %struct.op** %sib, align 8
  store %struct.op* %20, %struct.op** %kid, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store %struct.cop* @PL_compiling, %struct.cop** @PL_curcop, align 8
  br label %if.end34

if.end34:                                         ; preds = %for.end, %lor.lhs.false10
  %21 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %21, i32 0, i32 5
  %22 = load i8, i8* %op_flags, align 2
  %conv35 = zext i8 %22 to i32
  %and = and i32 %conv35, -9
  %conv36 = trunc i32 %and to i8
  store i8 %conv36, i8* %op_flags, align 2
  %23 = load i32, i32* getelementptr inbounds (%struct.cop, %struct.cop* @PL_compiling, i32 0, i32 10), align 8
  %and37 = and i32 %23, 256
  %tobool38 = icmp ne i32 %and37, 0
  br i1 %tobool38, label %if.then39, label %if.end43

if.then39:                                        ; preds = %if.end34
  %24 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_flags40 = getelementptr inbounds %struct.op, %struct.op* %24, i32 0, i32 5
  %25 = load i8, i8* %op_flags40, align 2
  %conv41 = zext i8 %25 to i32
  %or = or i32 %conv41, 8
  %conv42 = trunc i32 %or to i8
  store i8 %conv42, i8* %op_flags40, align 2
  br label %if.end43

if.end43:                                         ; preds = %if.then39, %if.end34
  br label %if.end45

if.else:                                          ; preds = %entry
  %call44 = call %struct.op* @Perl_newOP(i32 1, i32 0)
  store %struct.op* %call44, %struct.op** %o.addr, align 8
  br label %if.end45

if.end45:                                         ; preds = %if.else, %if.end43
  %26 = load %struct.op*, %struct.op** %o.addr, align 8
  ret %struct.op* %26
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_newSTATEOP(i32 %flags, i8* %label, %struct.op* %o) #0 {
entry:
  %flags.addr = alloca i32, align 4
  %label.addr = alloca i8*, align 8
  %o.addr = alloca %struct.op*, align 8
  %seq = alloca i32, align 4
  %utf8 = alloca i32, align 4
  %cop = alloca %struct.cop*, align 8
  %av = alloca %struct.av*, align 8
  %svp = alloca %struct.sv**, align 8
  store i32 %flags, i32* %flags.addr, align 4
  store i8* %label, i8** %label.addr, align 8
  store %struct.op* %o, %struct.op** %o.addr, align 8
  %call = call i32 @Perl_intro_my()
  store i32 %call, i32* %seq, align 4
  %0 = load i32, i32* %flags.addr, align 4
  %and = and i32 %0, 536870912
  store i32 %and, i32* %utf8, align 4
  %1 = load %struct.yy_parser*, %struct.yy_parser** @PL_parser, align 8
  %parsed_sub = getelementptr inbounds %struct.yy_parser, %struct.yy_parser* %1, i32 0, i32 58
  %bf.load = load i8, i8* %parsed_sub, align 2
  %bf.clear = and i8 %bf.load, -9
  store i8 %bf.clear, i8* %parsed_sub, align 2
  %2 = load i32, i32* %flags.addr, align 4
  %and1 = and i32 %2, -536870913
  store i32 %and1, i32* %flags.addr, align 4
  %call2 = call i8* @Perl_Slab_Alloc(i64 80)
  %3 = bitcast i8* %call2 to %struct.cop*
  store %struct.cop* %3, %struct.cop** %cop, align 8
  %4 = load i32, i32* @PL_perldb, align 4
  %and3 = and i32 %4, 2
  %tobool = icmp ne i32 %and3, 0
  br i1 %tobool, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %entry
  %5 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_line = getelementptr inbounds %struct.cop, %struct.cop* %5, i32 0, i32 7
  %6 = load i32, i32* %cop_line, align 4
  %tobool4 = icmp ne i32 %6, 0
  br i1 %tobool4, label %land.lhs.true5, label %if.else

land.lhs.true5:                                   ; preds = %land.lhs.true
  %7 = load %struct.hv*, %struct.hv** @PL_curstash, align 8
  %8 = load %struct.hv*, %struct.hv** @PL_debstash, align 8
  %cmp = icmp ne %struct.hv* %7, %8
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %land.lhs.true5
  br label %do.body

do.body:                                          ; preds = %if.then
  %9 = load %struct.cop*, %struct.cop** %cop, align 8
  %op_type = getelementptr inbounds %struct.cop, %struct.cop* %9, i32 0, i32 4
  %bf.load6 = load i16, i16* %op_type, align 8
  %bf.clear7 = and i16 %bf.load6, -512
  %bf.set = or i16 %bf.clear7, 194
  store i16 %bf.set, i16* %op_type, align 8
  %10 = load %struct.op* ()*, %struct.op* ()** getelementptr inbounds ([0 x %struct.op* ()*], [0 x %struct.op* ()*]* @PL_ppaddr, i64 0, i64 194), align 8
  %11 = load %struct.cop*, %struct.cop** %cop, align 8
  %op_ppaddr = getelementptr inbounds %struct.cop, %struct.cop* %11, i32 0, i32 2
  store %struct.op* ()* %10, %struct.op* ()** %op_ppaddr, align 8
  br label %do.end

do.end:                                           ; preds = %do.body
  br label %if.end

if.else:                                          ; preds = %land.lhs.true5, %land.lhs.true, %entry
  br label %do.body8

do.body8:                                         ; preds = %if.else
  %12 = load %struct.cop*, %struct.cop** %cop, align 8
  %op_type9 = getelementptr inbounds %struct.cop, %struct.cop* %12, i32 0, i32 4
  %bf.load10 = load i16, i16* %op_type9, align 8
  %bf.clear11 = and i16 %bf.load10, -512
  %bf.set12 = or i16 %bf.clear11, 193
  store i16 %bf.set12, i16* %op_type9, align 8
  %13 = load %struct.op* ()*, %struct.op* ()** getelementptr inbounds ([0 x %struct.op* ()*], [0 x %struct.op* ()*]* @PL_ppaddr, i64 0, i64 193), align 8
  %14 = load %struct.cop*, %struct.cop** %cop, align 8
  %op_ppaddr13 = getelementptr inbounds %struct.cop, %struct.cop* %14, i32 0, i32 2
  store %struct.op* ()* %13, %struct.op* ()** %op_ppaddr13, align 8
  br label %do.end14

do.end14:                                         ; preds = %do.body8
  br label %if.end

if.end:                                           ; preds = %do.end14, %do.end
  %15 = load i32, i32* %flags.addr, align 4
  %conv = trunc i32 %15 to i8
  %16 = load %struct.cop*, %struct.cop** %cop, align 8
  %op_flags = getelementptr inbounds %struct.cop, %struct.cop* %16, i32 0, i32 5
  store i8 %conv, i8* %op_flags, align 2
  br label %do.body15

do.body15:                                        ; preds = %if.end
  %17 = load i32, i32* getelementptr inbounds (%struct.cop, %struct.cop* @PL_compiling, i32 0, i32 10), align 8
  %18 = load %struct.cop*, %struct.cop** %cop, align 8
  %cop_hints = getelementptr inbounds %struct.cop, %struct.cop* %18, i32 0, i32 10
  store i32 %17, i32* %cop_hints, align 8
  br label %do.end16

do.end16:                                         ; preds = %do.body15
  %19 = load %struct.cop*, %struct.cop** %cop, align 8
  %20 = bitcast %struct.cop* %19 to %struct.op*
  %21 = load %struct.cop*, %struct.cop** %cop, align 8
  %op_next = getelementptr inbounds %struct.cop, %struct.cop* %21, i32 0, i32 0
  store %struct.op* %20, %struct.op** %op_next, align 8
  %22 = load i32, i32* %seq, align 4
  %23 = load %struct.cop*, %struct.cop** %cop, align 8
  %cop_seq = getelementptr inbounds %struct.cop, %struct.cop* %23, i32 0, i32 11
  store i32 %22, i32* %cop_seq, align 4
  %24 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings = getelementptr inbounds %struct.cop, %struct.cop* %24, i32 0, i32 12
  %25 = load i64*, i64** %cop_warnings, align 8
  %cmp17 = icmp eq i64* %25, null
  br i1 %cmp17, label %cond.true, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %do.end16
  %26 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings19 = getelementptr inbounds %struct.cop, %struct.cop* %26, i32 0, i32 12
  %27 = load i64*, i64** %cop_warnings19, align 8
  %cmp20 = icmp eq i64* %27, getelementptr inbounds (i64, i64* null, i64 1)
  br i1 %cmp20, label %cond.true, label %lor.lhs.false22

lor.lhs.false22:                                  ; preds = %lor.lhs.false
  %28 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings23 = getelementptr inbounds %struct.cop, %struct.cop* %28, i32 0, i32 12
  %29 = load i64*, i64** %cop_warnings23, align 8
  %cmp24 = icmp eq i64* %29, getelementptr inbounds (i64, i64* null, i64 2)
  br i1 %cmp24, label %cond.true, label %cond.false

cond.true:                                        ; preds = %lor.lhs.false22, %lor.lhs.false, %do.end16
  %30 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings26 = getelementptr inbounds %struct.cop, %struct.cop* %30, i32 0, i32 12
  %31 = load i64*, i64** %cop_warnings26, align 8
  br label %cond.end

cond.false:                                       ; preds = %lor.lhs.false22
  %32 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings27 = getelementptr inbounds %struct.cop, %struct.cop* %32, i32 0, i32 12
  %33 = load i64*, i64** %cop_warnings27, align 8
  %34 = load i64, i64* %33, align 8
  %add = add i64 8, %34
  %call28 = call noalias i8* @malloc(i64 %add) #5
  %35 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings29 = getelementptr inbounds %struct.cop, %struct.cop* %35, i32 0, i32 12
  %36 = load i64*, i64** %cop_warnings29, align 8
  %37 = bitcast i64* %36 to i8*
  %38 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings30 = getelementptr inbounds %struct.cop, %struct.cop* %38, i32 0, i32 12
  %39 = load i64*, i64** %cop_warnings30, align 8
  %40 = load i64, i64* %39, align 8
  %add31 = add i64 8, %40
  %mul = mul i64 %add31, 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %call28, i8* align 1 %37, i64 %mul, i1 false)
  %41 = bitcast i8* %call28 to i64*
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64* [ %31, %cond.true ], [ %41, %cond.false ]
  %42 = load %struct.cop*, %struct.cop** %cop, align 8
  %cop_warnings32 = getelementptr inbounds %struct.cop, %struct.cop* %42, i32 0, i32 12
  store i64* %cond, i64** %cop_warnings32, align 8
  %43 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_hints_hash = getelementptr inbounds %struct.cop, %struct.cop* %43, i32 0, i32 13
  %44 = load %struct.refcounted_he*, %struct.refcounted_he** %cop_hints_hash, align 8
  %call33 = call %struct.refcounted_he* @Perl_refcounted_he_inc(%struct.refcounted_he* %44)
  %45 = load %struct.cop*, %struct.cop** %cop, align 8
  %cop_hints_hash34 = getelementptr inbounds %struct.cop, %struct.cop* %45, i32 0, i32 13
  store %struct.refcounted_he* %call33, %struct.refcounted_he** %cop_hints_hash34, align 8
  %46 = load i8*, i8** %label.addr, align 8
  %tobool35 = icmp ne i8* %46, null
  br i1 %tobool35, label %if.then36, label %if.end38

if.then36:                                        ; preds = %cond.end
  %47 = load %struct.cop*, %struct.cop** %cop, align 8
  %48 = load i8*, i8** %label.addr, align 8
  %49 = load i8*, i8** %label.addr, align 8
  %call37 = call i64 @strlen(i8* %49) #7
  %50 = load i32, i32* %utf8, align 4
  call void @Perl_cop_store_label(%struct.cop* %47, i8* %48, i64 %call37, i32 %50)
  %51 = load i32, i32* getelementptr inbounds (%struct.cop, %struct.cop* @PL_compiling, i32 0, i32 10), align 8
  %or = or i32 %51, 256
  store i32 %or, i32* getelementptr inbounds (%struct.cop, %struct.cop* @PL_compiling, i32 0, i32 10), align 8
  %52 = load i8*, i8** %label.addr, align 8
  call void @Perl_save_pushptr(i8* %52, i32 10)
  br label %if.end38

if.end38:                                         ; preds = %if.then36, %cond.end
  %53 = load %struct.yy_parser*, %struct.yy_parser** @PL_parser, align 8
  %preambling = getelementptr inbounds %struct.yy_parser, %struct.yy_parser* %53, i32 0, i32 55
  %54 = load i32, i32* %preambling, align 4
  %cmp39 = icmp ne i32 %54, -1
  br i1 %cmp39, label %if.then41, label %if.else44

if.then41:                                        ; preds = %if.end38
  %55 = load %struct.yy_parser*, %struct.yy_parser** @PL_parser, align 8
  %preambling42 = getelementptr inbounds %struct.yy_parser, %struct.yy_parser* %55, i32 0, i32 55
  %56 = load i32, i32* %preambling42, align 4
  %57 = load %struct.cop*, %struct.cop** %cop, align 8
  %cop_line43 = getelementptr inbounds %struct.cop, %struct.cop* %57, i32 0, i32 7
  store i32 %56, i32* %cop_line43, align 4
  %58 = load %struct.yy_parser*, %struct.yy_parser** @PL_parser, align 8
  %copline = getelementptr inbounds %struct.yy_parser, %struct.yy_parser* %58, i32 0, i32 41
  store i32 -1, i32* %copline, align 8
  br label %if.end56

if.else44:                                        ; preds = %if.end38
  %59 = load %struct.yy_parser*, %struct.yy_parser** @PL_parser, align 8
  %copline45 = getelementptr inbounds %struct.yy_parser, %struct.yy_parser* %59, i32 0, i32 41
  %60 = load i32, i32* %copline45, align 8
  %cmp46 = icmp eq i32 %60, -1
  br i1 %cmp46, label %if.then48, label %if.else51

if.then48:                                        ; preds = %if.else44
  %61 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_line49 = getelementptr inbounds %struct.cop, %struct.cop* %61, i32 0, i32 7
  %62 = load i32, i32* %cop_line49, align 4
  %63 = load %struct.cop*, %struct.cop** %cop, align 8
  %cop_line50 = getelementptr inbounds %struct.cop, %struct.cop* %63, i32 0, i32 7
  store i32 %62, i32* %cop_line50, align 4
  br label %if.end55

if.else51:                                        ; preds = %if.else44
  %64 = load %struct.yy_parser*, %struct.yy_parser** @PL_parser, align 8
  %copline52 = getelementptr inbounds %struct.yy_parser, %struct.yy_parser* %64, i32 0, i32 41
  %65 = load i32, i32* %copline52, align 8
  %66 = load %struct.cop*, %struct.cop** %cop, align 8
  %cop_line53 = getelementptr inbounds %struct.cop, %struct.cop* %66, i32 0, i32 7
  store i32 %65, i32* %cop_line53, align 4
  %67 = load %struct.yy_parser*, %struct.yy_parser** @PL_parser, align 8
  %copline54 = getelementptr inbounds %struct.yy_parser, %struct.yy_parser* %67, i32 0, i32 41
  store i32 -1, i32* %copline54, align 8
  br label %if.end55

if.end55:                                         ; preds = %if.else51, %if.then48
  br label %if.end56

if.end56:                                         ; preds = %if.end55, %if.then41
  %68 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_filegv = getelementptr inbounds %struct.cop, %struct.cop* %68, i32 0, i32 9
  %69 = load %struct.gv*, %struct.gv** %cop_filegv, align 8
  %70 = bitcast %struct.gv* %69 to i8*
  %71 = bitcast i8* %70 to %struct.sv*
  %call57 = call %struct.sv* @S_SvREFCNT_inc(%struct.sv* %71)
  %72 = bitcast %struct.sv* %call57 to %struct.gv*
  %73 = load %struct.cop*, %struct.cop** %cop, align 8
  %cop_filegv58 = getelementptr inbounds %struct.cop, %struct.cop* %73, i32 0, i32 9
  store %struct.gv* %72, %struct.gv** %cop_filegv58, align 8
  %74 = load %struct.hv*, %struct.hv** @PL_curstash, align 8
  %75 = load %struct.cop*, %struct.cop** %cop, align 8
  %cop_stash = getelementptr inbounds %struct.cop, %struct.cop* %75, i32 0, i32 8
  store %struct.hv* %74, %struct.hv** %cop_stash, align 8
  %76 = load %struct.cop*, %struct.cop** %cop, align 8
  %op_type59 = getelementptr inbounds %struct.cop, %struct.cop* %76, i32 0, i32 4
  %bf.load60 = load i16, i16* %op_type59, align 8
  %bf.clear61 = and i16 %bf.load60, 511
  %bf.cast = zext i16 %bf.clear61 to i32
  %cmp62 = icmp eq i32 %bf.cast, 194
  br i1 %cmp62, label %if.then64, label %if.end81

if.then64:                                        ; preds = %if.end56
  %77 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_filegv65 = getelementptr inbounds %struct.cop, %struct.cop* %77, i32 0, i32 9
  %78 = load %struct.gv*, %struct.gv** %cop_filegv65, align 8
  %sv_u = getelementptr inbounds %struct.gv, %struct.gv* %78, i32 0, i32 3
  %svu_gp = bitcast %union.anon.3* %sv_u to %struct.gp**
  %79 = load %struct.gp*, %struct.gp** %svu_gp, align 8
  %add.ptr = getelementptr inbounds %struct.gp, %struct.gp* %79, i64 0
  %gp_av = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr, i32 0, i32 6
  %80 = load %struct.av*, %struct.av** %gp_av, align 8
  store %struct.av* %80, %struct.av** %av, align 8
  %81 = load %struct.av*, %struct.av** %av, align 8
  %tobool66 = icmp ne %struct.av* %81, null
  br i1 %tobool66, label %if.then67, label %if.end80

if.then67:                                        ; preds = %if.then64
  %82 = load %struct.av*, %struct.av** %av, align 8
  %83 = load %struct.cop*, %struct.cop** %cop, align 8
  %cop_line68 = getelementptr inbounds %struct.cop, %struct.cop* %83, i32 0, i32 7
  %84 = load i32, i32* %cop_line68, align 4
  %conv69 = zext i32 %84 to i64
  %call70 = call %struct.sv** @Perl_av_fetch(%struct.av* %82, i64 %conv69, i32 0)
  store %struct.sv** %call70, %struct.sv*** %svp, align 8
  %85 = load %struct.sv**, %struct.sv*** %svp, align 8
  %tobool71 = icmp ne %struct.sv** %85, null
  br i1 %tobool71, label %land.lhs.true72, label %if.end79

land.lhs.true72:                                  ; preds = %if.then67
  %86 = load %struct.sv**, %struct.sv*** %svp, align 8
  %87 = load %struct.sv*, %struct.sv** %86, align 8
  %cmp73 = icmp ne %struct.sv* %87, @PL_sv_undef
  br i1 %cmp73, label %if.then75, label %if.end79

if.then75:                                        ; preds = %land.lhs.true72
  %88 = load %struct.sv**, %struct.sv*** %svp, align 8
  %89 = load %struct.sv*, %struct.sv** %88, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %89, i32 0, i32 2
  %90 = load i32, i32* %sv_flags, align 4
  %or76 = or i32 %90, 4352
  store i32 %or76, i32* %sv_flags, align 4
  br label %do.body77

do.body77:                                        ; preds = %if.then75
  %91 = load %struct.cop*, %struct.cop** %cop, align 8
  %92 = ptrtoint %struct.cop* %91 to i64
  %93 = load %struct.sv**, %struct.sv*** %svp, align 8
  %94 = load %struct.sv*, %struct.sv** %93, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %94, i32 0, i32 0
  %95 = load i8*, i8** %sv_any, align 8
  %96 = bitcast i8* %95 to %struct.xpviv*
  %xiv_u = getelementptr inbounds %struct.xpviv, %struct.xpviv* %96, i32 0, i32 4
  %xivu_iv = bitcast %union._xivu* %xiv_u to i64*
  store i64 %92, i64* %xivu_iv, align 8
  br label %do.end78

do.end78:                                         ; preds = %do.body77
  br label %if.end79

if.end79:                                         ; preds = %do.end78, %land.lhs.true72, %if.then67
  br label %if.end80

if.end80:                                         ; preds = %if.end79, %if.then64
  br label %if.end81

if.end81:                                         ; preds = %if.end80, %if.end56
  %97 = load i32, i32* %flags.addr, align 4
  %and82 = and i32 %97, 128
  %tobool83 = icmp ne i32 %and82, 0
  br i1 %tobool83, label %if.then84, label %if.end85

if.then84:                                        ; preds = %if.end81
  %98 = load %struct.cop*, %struct.cop** %cop, align 8
  %99 = bitcast %struct.cop* %98 to %struct.op*
  call void @Perl_op_null(%struct.op* %99)
  br label %if.end85

if.end85:                                         ; preds = %if.then84, %if.end81
  %100 = load %struct.cop*, %struct.cop** %cop, align 8
  %101 = bitcast %struct.cop* %100 to %struct.op*
  %102 = load %struct.op*, %struct.op** %o.addr, align 8
  %call86 = call %struct.op* @Perl_op_prepend_elem(i32 192, %struct.op* %101, %struct.op* %102)
  ret %struct.op* %call86
}

declare dso_local void @Perl_leave_scope(i32) #3

declare dso_local %struct.op* @Perl_pad_leavemy() #3

; Function Attrs: noinline nounwind uwtable
define dso_local void @Perl_blockhook_register(%struct.block_hooks* %hk) #0 {
entry:
  %hk.addr = alloca %struct.block_hooks*, align 8
  store %struct.block_hooks* %hk, %struct.block_hooks** %hk.addr, align 8
  %0 = load %struct.block_hooks*, %struct.block_hooks** %hk.addr, align 8
  %1 = ptrtoint %struct.block_hooks* %0 to i64
  %call = call %struct.sv* @Perl_newSViv(i64 %1)
  call void @Perl_av_create_and_push(%struct.av** @PL_blockhooks, %struct.sv* %call)
  ret void
}

declare dso_local void @Perl_av_create_and_push(%struct.av**, %struct.sv*) #3

declare dso_local %struct.sv* @Perl_newSViv(i64) #3

; Function Attrs: noinline nounwind uwtable
define dso_local void @Perl_newPROG(%struct.op* %o) #0 {
entry:
  %o.addr = alloca %struct.op*, align 8
  %cx = alloca %struct.context*, align 8
  %i = alloca i32, align 4
  %_o = alloca %struct.op*, align 8
  %cv = alloca %struct.cv*, align 8
  %sp = alloca %struct.sv**, align 8
  %mark_stack_entry = alloca i32*, align 8
  store %struct.op* %o, %struct.op** %o.addr, align 8
  %0 = load i8, i8* @PL_in_eval, align 1
  %tobool = icmp ne i8 %0, 0
  br i1 %tobool, label %if.then, label %if.else25

if.then:                                          ; preds = %entry
  %1 = load %struct.op*, %struct.op** @PL_eval_root, align 8
  %tobool1 = icmp ne %struct.op* %1, null
  br i1 %tobool1, label %if.then2, label %if.end

if.then2:                                         ; preds = %if.then
  br label %if.end81

if.end:                                           ; preds = %if.then
  %2 = load i8, i8* @PL_in_eval, align 1
  %conv = zext i8 %2 to i32
  %and = and i32 %conv, 4
  %tobool3 = icmp ne i32 %and, 0
  %3 = zext i1 %tobool3 to i64
  %cond = select i1 %tobool3, i32 128, i32 0
  %4 = load %struct.op*, %struct.op** %o.addr, align 8
  %call = call %struct.op* @Perl_newUNOP(i32 343, i32 %cond, %struct.op* %4)
  store %struct.op* %call, %struct.op** @PL_eval_root, align 8
  %5 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxstack = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %5, i32 0, i32 1
  %6 = load %struct.context*, %struct.context** %si_cxstack, align 8
  %7 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxix = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %7, i32 0, i32 4
  %8 = load i32, i32* %si_cxix, align 8
  %idxprom = sext i32 %8 to i64
  %arrayidx = getelementptr inbounds %struct.context, %struct.context* %6, i64 %idxprom
  store %struct.context* %arrayidx, %struct.context** %cx, align 8
  %9 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u = getelementptr inbounds %struct.context, %struct.context* %9, i32 0, i32 0
  %cx_blk = bitcast %union.anon.25* %cx_u to %struct.block*
  %blku_gimme = getelementptr inbounds %struct.block, %struct.block* %cx_blk, i32 0, i32 1
  %10 = load i8, i8* %blku_gimme, align 1
  %conv4 = zext i8 %10 to i32
  %and5 = and i32 %conv4, 3
  %cmp = icmp eq i32 %and5, 1
  br i1 %cmp, label %if.then7, label %if.else

if.then7:                                         ; preds = %if.end
  %11 = load %struct.op*, %struct.op** @PL_eval_root, align 8
  %call8 = call %struct.op* @Perl_scalarvoid(%struct.op* %11)
  br label %if.end21

if.else:                                          ; preds = %if.end
  %12 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u9 = getelementptr inbounds %struct.context, %struct.context* %12, i32 0, i32 0
  %cx_blk10 = bitcast %union.anon.25* %cx_u9 to %struct.block*
  %blku_gimme11 = getelementptr inbounds %struct.block, %struct.block* %cx_blk10, i32 0, i32 1
  %13 = load i8, i8* %blku_gimme11, align 1
  %conv12 = zext i8 %13 to i32
  %and13 = and i32 %conv12, 3
  %cmp14 = icmp eq i32 %and13, 3
  br i1 %cmp14, label %if.then16, label %if.else18

if.then16:                                        ; preds = %if.else
  %14 = load %struct.op*, %struct.op** @PL_eval_root, align 8
  %call17 = call %struct.op* @Perl_list(%struct.op* %14)
  br label %if.end20

if.else18:                                        ; preds = %if.else
  %15 = load %struct.op*, %struct.op** @PL_eval_root, align 8
  %call19 = call %struct.op* @Perl_scalar(%struct.op* %15)
  br label %if.end20

if.end20:                                         ; preds = %if.else18, %if.then16
  br label %if.end21

if.end21:                                         ; preds = %if.end20, %if.then7
  %16 = load %struct.op*, %struct.op** @PL_eval_root, align 8
  %call22 = call %struct.op* @Perl_op_linklist(%struct.op* %16)
  store %struct.op* %call22, %struct.op** @PL_eval_start, align 8
  %17 = load %struct.op*, %struct.op** @PL_eval_root, align 8
  %op_private = getelementptr inbounds %struct.op, %struct.op* %17, i32 0, i32 6
  %18 = load i8, i8* %op_private, align 1
  %conv23 = zext i8 %18 to i32
  %or = or i32 %conv23, 64
  %conv24 = trunc i32 %or to i8
  store i8 %conv24, i8* %op_private, align 1
  %19 = load %struct.op*, %struct.op** @PL_eval_root, align 8
  %op_targ = getelementptr inbounds %struct.op, %struct.op* %19, i32 0, i32 3
  store i64 1, i64* %op_targ, align 8
  %20 = load %struct.op*, %struct.op** @PL_eval_root, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %20, i32 0, i32 0
  store %struct.op* null, %struct.op** %op_next, align 8
  %21 = load i32, i32* @PL_savestack_ix, align 4
  store i32 %21, i32* %i, align 4
  br label %do.body

do.body:                                          ; preds = %if.end21
  %22 = load %struct.op*, %struct.op** %o.addr, align 8
  store %struct.op* %22, %struct.op** %_o, align 8
  %23 = load %struct.op*, %struct.op** %_o, align 8
  %op_savefree = getelementptr inbounds %struct.op, %struct.op* %23, i32 0, i32 4
  %bf.load = load i16, i16* %op_savefree, align 8
  %bf.clear = and i16 %bf.load, -2049
  %bf.set = or i16 %bf.clear, 2048
  store i16 %bf.set, i16* %op_savefree, align 8
  %24 = load %struct.op*, %struct.op** %_o, align 8
  %25 = bitcast %struct.op* %24 to i8*
  call void @Perl_save_pushptr(i8* %25, i32 9)
  br label %do.end

do.end:                                           ; preds = %do.body
  call void @Perl_push_scope()
  %26 = load void (%struct.op*)*, void (%struct.op*)** @PL_peepp, align 8
  %27 = load %struct.op*, %struct.op** @PL_eval_start, align 8
  call void %26(%struct.op* %27)
  %28 = load %struct.op*, %struct.op** @PL_eval_root, align 8
  call void @Perl_finalize_optree(%struct.op* %28)
  call void @S_prune_chain_head(%struct.op** @PL_eval_start)
  call void @Perl_pop_scope()
  %29 = load i32, i32* %i, align 4
  store i32 %29, i32* @PL_savestack_ix, align 4
  br label %if.end81

if.else25:                                        ; preds = %entry
  %30 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type = getelementptr inbounds %struct.op, %struct.op* %30, i32 0, i32 4
  %bf.load26 = load i16, i16* %op_type, align 8
  %bf.clear27 = and i16 %bf.load26, 511
  %bf.cast = zext i16 %bf.clear27 to i32
  %cmp28 = icmp eq i32 %bf.cast, 1
  br i1 %cmp28, label %if.then30, label %if.end31

if.then30:                                        ; preds = %if.else25
  store %struct.padnamelist* null, %struct.padnamelist** @PL_comppad_name, align 8
  store %struct.cv* null, %struct.cv** @PL_compcv, align 8
  %31 = load %struct.op*, %struct.op** %o.addr, align 8
  call void @S_op_destroy(%struct.op* %31)
  br label %if.end81

if.end31:                                         ; preds = %if.else25
  %32 = load %struct.op*, %struct.op** %o.addr, align 8
  %call32 = call %struct.op* @Perl_scalarvoid(%struct.op* %32)
  %call33 = call %struct.op* @Perl_sawparens(%struct.op* %call32)
  %call34 = call %struct.op* @Perl_op_scope(%struct.op* %call33)
  store %struct.op* %call34, %struct.op** @PL_main_root, align 8
  store %struct.cop* @PL_compiling, %struct.cop** @PL_curcop, align 8
  %33 = load %struct.op*, %struct.op** @PL_main_root, align 8
  %op_next35 = getelementptr inbounds %struct.op, %struct.op* %33, i32 0, i32 0
  %34 = load %struct.op*, %struct.op** %op_next35, align 8
  %tobool36 = icmp ne %struct.op* %34, null
  br i1 %tobool36, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end31
  %35 = load %struct.op*, %struct.op** @PL_main_root, align 8
  %op_next37 = getelementptr inbounds %struct.op, %struct.op* %35, i32 0, i32 0
  %36 = load %struct.op*, %struct.op** %op_next37, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.end31
  %37 = load %struct.op*, %struct.op** @PL_main_root, align 8
  %call38 = call %struct.op* @Perl_op_linklist(%struct.op* %37)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond39 = phi %struct.op* [ %36, %cond.true ], [ %call38, %cond.false ]
  store %struct.op* %cond39, %struct.op** @PL_main_start, align 8
  %38 = load %struct.op*, %struct.op** @PL_main_root, align 8
  %op_private40 = getelementptr inbounds %struct.op, %struct.op* %38, i32 0, i32 6
  %39 = load i8, i8* %op_private40, align 1
  %conv41 = zext i8 %39 to i32
  %or42 = or i32 %conv41, 64
  %conv43 = trunc i32 %or42 to i8
  store i8 %conv43, i8* %op_private40, align 1
  %40 = load %struct.op*, %struct.op** @PL_main_root, align 8
  %op_targ44 = getelementptr inbounds %struct.op, %struct.op* %40, i32 0, i32 3
  store i64 1, i64* %op_targ44, align 8
  %41 = load %struct.op*, %struct.op** @PL_main_root, align 8
  %op_next45 = getelementptr inbounds %struct.op, %struct.op* %41, i32 0, i32 0
  store %struct.op* null, %struct.op** %op_next45, align 8
  %42 = load void (%struct.op*)*, void (%struct.op*)** @PL_peepp, align 8
  %43 = load %struct.op*, %struct.op** @PL_main_start, align 8
  call void %42(%struct.op* %43)
  %44 = load %struct.op*, %struct.op** @PL_main_root, align 8
  call void @Perl_finalize_optree(%struct.op* %44)
  call void @S_prune_chain_head(%struct.op** @PL_main_start)
  %45 = load %struct.cv*, %struct.cv** @PL_compcv, align 8
  call void @Perl_cv_forget_slab(%struct.cv* %45)
  store %struct.cv* null, %struct.cv** @PL_compcv, align 8
  %46 = load i32, i32* @PL_perldb, align 4
  %and46 = and i32 %46, 8
  %tobool47 = icmp ne i32 %and46, 0
  br i1 %tobool47, label %if.then48, label %if.end80

if.then48:                                        ; preds = %cond.end
  %call49 = call %struct.cv* @Perl_get_cvn_flags(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.43, i64 0, i64 0), i64 13, i32 0)
  store %struct.cv* %call49, %struct.cv** %cv, align 8
  %47 = load %struct.cv*, %struct.cv** %cv, align 8
  %tobool50 = icmp ne %struct.cv* %47, null
  br i1 %tobool50, label %if.then51, label %if.end79

if.then51:                                        ; preds = %if.then48
  %48 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %48, %struct.sv*** %sp, align 8
  br label %do.body52

do.body52:                                        ; preds = %if.then51
  %49 = load i32*, i32** @PL_markstack_ptr, align 8
  %incdec.ptr = getelementptr inbounds i32, i32* %49, i32 1
  store i32* %incdec.ptr, i32** @PL_markstack_ptr, align 8
  store i32* %incdec.ptr, i32** %mark_stack_entry, align 8
  %50 = load i32*, i32** @PL_markstack_max, align 8
  %cmp53 = icmp eq i32* %incdec.ptr, %50
  br i1 %cmp53, label %cond.true55, label %cond.false56

cond.true55:                                      ; preds = %do.body52
  br i1 true, label %if.then57, label %if.end59

cond.false56:                                     ; preds = %do.body52
  br i1 false, label %if.then57, label %if.end59

if.then57:                                        ; preds = %cond.false56, %cond.true55
  %call58 = call i32* @Perl_markstack_grow()
  store i32* %call58, i32** %mark_stack_entry, align 8
  br label %if.end59

if.end59:                                         ; preds = %if.then57, %cond.false56, %cond.true55
  %51 = load %struct.sv**, %struct.sv*** %sp, align 8
  %52 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %sub.ptr.lhs.cast = ptrtoint %struct.sv** %51 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.sv** %52 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 8
  %conv60 = trunc i64 %sub.ptr.div to i32
  %53 = load i32*, i32** %mark_stack_entry, align 8
  store i32 %conv60, i32* %53, align 4
  br label %do.end61

do.end61:                                         ; preds = %if.end59
  br label %do.body62

do.body62:                                        ; preds = %do.end61
  br label %do.body63

do.body63:                                        ; preds = %do.body62
  %54 = load %struct.sv**, %struct.sv*** @PL_stack_max, align 8
  %55 = load %struct.sv**, %struct.sv*** %sp, align 8
  %sub.ptr.lhs.cast64 = ptrtoint %struct.sv** %54 to i64
  %sub.ptr.rhs.cast65 = ptrtoint %struct.sv** %55 to i64
  %sub.ptr.sub66 = sub i64 %sub.ptr.lhs.cast64, %sub.ptr.rhs.cast65
  %sub.ptr.div67 = sdiv exact i64 %sub.ptr.sub66, 8
  %cmp68 = icmp slt i64 %sub.ptr.div67, 1
  br i1 %cmp68, label %cond.true70, label %cond.false71

cond.true70:                                      ; preds = %do.body63
  br i1 true, label %if.then72, label %if.end74

cond.false71:                                     ; preds = %do.body63
  br i1 false, label %if.then72, label %if.end74

if.then72:                                        ; preds = %cond.false71, %cond.true70
  %56 = load %struct.sv**, %struct.sv*** %sp, align 8
  %57 = load %struct.sv**, %struct.sv*** %sp, align 8
  %call73 = call %struct.sv** @Perl_stack_grow(%struct.sv** %56, %struct.sv** %57, i64 1)
  store %struct.sv** %call73, %struct.sv*** %sp, align 8
  %58 = load %struct.sv**, %struct.sv*** %sp, align 8
  br label %if.end74

if.end74:                                         ; preds = %if.then72, %cond.false71, %cond.true70
  br label %do.end75

do.end75:                                         ; preds = %if.end74
  %59 = load %struct.gv*, %struct.gv** getelementptr inbounds (%struct.cop, %struct.cop* @PL_compiling, i32 0, i32 9), align 8
  %60 = bitcast %struct.gv* %59 to i8*
  %61 = bitcast i8* %60 to %struct.sv*
  %62 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr76 = getelementptr inbounds %struct.sv*, %struct.sv** %62, i32 1
  store %struct.sv** %incdec.ptr76, %struct.sv*** %sp, align 8
  store %struct.sv* %61, %struct.sv** %incdec.ptr76, align 8
  br label %do.end77

do.end77:                                         ; preds = %do.end75
  %63 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %63, %struct.sv*** @PL_stack_sp, align 8
  %64 = load %struct.cv*, %struct.cv** %cv, align 8
  %65 = bitcast %struct.cv* %64 to i8*
  %66 = bitcast i8* %65 to %struct.sv*
  %call78 = call i32 @Perl_call_sv(%struct.sv* %66, i32 4)
  br label %if.end79

if.end79:                                         ; preds = %do.end77, %if.then48
  br label %if.end80

if.end80:                                         ; preds = %if.end79, %cond.end
  br label %if.end81

if.end81:                                         ; preds = %if.then2, %if.then30, %if.end80, %do.end
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @S_prune_chain_head(%struct.op** %op_p) #0 {
entry:
  %op_p.addr = alloca %struct.op**, align 8
  store %struct.op** %op_p, %struct.op*** %op_p.addr, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load %struct.op**, %struct.op*** %op_p.addr, align 8
  %1 = load %struct.op*, %struct.op** %0, align 8
  %tobool = icmp ne %struct.op* %1, null
  br i1 %tobool, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %2 = load %struct.op**, %struct.op*** %op_p.addr, align 8
  %3 = load %struct.op*, %struct.op** %2, align 8
  %op_type = getelementptr inbounds %struct.op, %struct.op* %3, i32 0, i32 4
  %bf.load = load i16, i16* %op_type, align 8
  %bf.clear = and i16 %bf.load, 511
  %bf.cast = zext i16 %bf.clear to i32
  %cmp = icmp eq i32 %bf.cast, 0
  br i1 %cmp, label %lor.end, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.rhs
  %4 = load %struct.op**, %struct.op*** %op_p.addr, align 8
  %5 = load %struct.op*, %struct.op** %4, align 8
  %op_type1 = getelementptr inbounds %struct.op, %struct.op* %5, i32 0, i32 4
  %bf.load2 = load i16, i16* %op_type1, align 8
  %bf.clear3 = and i16 %bf.load2, 511
  %bf.cast4 = zext i16 %bf.clear3 to i32
  %cmp5 = icmp eq i32 %bf.cast4, 198
  br i1 %cmp5, label %lor.end, label %lor.lhs.false6

lor.lhs.false6:                                   ; preds = %lor.lhs.false
  %6 = load %struct.op**, %struct.op*** %op_p.addr, align 8
  %7 = load %struct.op*, %struct.op** %6, align 8
  %op_type7 = getelementptr inbounds %struct.op, %struct.op* %7, i32 0, i32 4
  %bf.load8 = load i16, i16* %op_type7, align 8
  %bf.clear9 = and i16 %bf.load8, 511
  %bf.cast10 = zext i16 %bf.clear9 to i32
  %cmp11 = icmp eq i32 %bf.cast10, 2
  br i1 %cmp11, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %lor.lhs.false6
  %8 = load %struct.op**, %struct.op*** %op_p.addr, align 8
  %9 = load %struct.op*, %struct.op** %8, align 8
  %op_type12 = getelementptr inbounds %struct.op, %struct.op* %9, i32 0, i32 4
  %bf.load13 = load i16, i16* %op_type12, align 8
  %bf.clear14 = and i16 %bf.load13, 511
  %bf.cast15 = zext i16 %bf.clear14 to i32
  %cmp16 = icmp eq i32 %bf.cast15, 192
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %lor.lhs.false6, %lor.lhs.false, %land.rhs
  %10 = phi i1 [ true, %lor.lhs.false6 ], [ true, %lor.lhs.false ], [ true, %land.rhs ], [ %cmp16, %lor.rhs ]
  br label %land.end

land.end:                                         ; preds = %lor.end, %while.cond
  %11 = phi i1 [ false, %while.cond ], [ %10, %lor.end ]
  br i1 %11, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %12 = load %struct.op**, %struct.op*** %op_p.addr, align 8
  %13 = load %struct.op*, %struct.op** %12, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %13, i32 0, i32 0
  %14 = load %struct.op*, %struct.op** %op_next, align 8
  %15 = load %struct.op**, %struct.op*** %op_p.addr, align 8
  store %struct.op* %14, %struct.op** %15, align 8
  br label %while.cond

while.end:                                        ; preds = %land.end
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @S_op_destroy(%struct.op* %o) #0 {
entry:
  %o.addr = alloca %struct.op*, align 8
  store %struct.op* %o, %struct.op** %o.addr, align 8
  %0 = load %struct.op*, %struct.op** %o.addr, align 8
  %1 = bitcast %struct.op* %0 to i8*
  call void @Perl_Slab_Free(i8* %1)
  ret void
}

declare dso_local void @Perl_cv_forget_slab(%struct.cv*) #3

declare dso_local %struct.cv* @Perl_get_cvn_flags(i8*, i64, i32) #3

declare dso_local i32* @Perl_markstack_grow() #3

declare dso_local %struct.sv** @Perl_stack_grow(%struct.sv**, %struct.sv**, i64) #3

declare dso_local i32 @Perl_call_sv(%struct.sv*, i32) #3

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_localize(%struct.op* %o, i32 %lex) #0 {
entry:
  %o.addr = alloca %struct.op*, align 8
  %lex.addr = alloca i32, align 4
  %s = alloca i8*, align 8
  %sigil = alloca i8, align 1
  store %struct.op* %o, %struct.op** %o.addr, align 8
  store i32 %lex, i32* %lex.addr, align 4
  %0 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %0, i32 0, i32 5
  %1 = load i8, i8* %op_flags, align 2
  %conv = zext i8 %1 to i32
  %and = and i32 %conv, 8
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  br label %if.end92

if.else:                                          ; preds = %entry
  %2 = load %struct.yy_parser*, %struct.yy_parser** @PL_parser, align 8
  %bufptr = getelementptr inbounds %struct.yy_parser, %struct.yy_parser* %2, i32 0, i32 34
  %3 = load i8*, i8** %bufptr, align 8
  %4 = load %struct.yy_parser*, %struct.yy_parser** @PL_parser, align 8
  %oldbufptr = getelementptr inbounds %struct.yy_parser, %struct.yy_parser* %4, i32 0, i32 35
  %5 = load i8*, i8** %oldbufptr, align 8
  %cmp = icmp ugt i8* %3, %5
  br i1 %cmp, label %land.lhs.true, label %if.end91

land.lhs.true:                                    ; preds = %if.else
  %6 = load %struct.yy_parser*, %struct.yy_parser** @PL_parser, align 8
  %bufptr2 = getelementptr inbounds %struct.yy_parser, %struct.yy_parser* %6, i32 0, i32 34
  %7 = load i8*, i8** %bufptr2, align 8
  %arrayidx = getelementptr inbounds i8, i8* %7, i64 -1
  %8 = load i8, i8* %arrayidx, align 1
  %conv3 = sext i8 %8 to i32
  %cmp4 = icmp eq i32 %conv3, 44
  br i1 %cmp4, label %land.lhs.true6, label %if.end91

land.lhs.true6:                                   ; preds = %land.lhs.true
  %call = call zeroext i1 @Perl_ckwarn(i32 32)
  br i1 %call, label %if.then8, label %if.end91

if.then8:                                         ; preds = %land.lhs.true6
  %9 = load %struct.yy_parser*, %struct.yy_parser** @PL_parser, align 8
  %bufptr9 = getelementptr inbounds %struct.yy_parser, %struct.yy_parser* %9, i32 0, i32 34
  %10 = load i8*, i8** %bufptr9, align 8
  store i8* %10, i8** %s, align 8
  store i8 0, i8* %sigil, align 1
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.then8
  %11 = load i8*, i8** %s, align 8
  %12 = load i8, i8* %11, align 1
  %conv10 = sext i8 %12 to i32
  %tobool11 = icmp ne i32 %conv10, 0
  br i1 %tobool11, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %13 = load i8*, i8** %s, align 8
  %14 = load i8, i8* %13, align 1
  %conv12 = sext i8 %14 to i32
  %call13 = call i8* @strchr(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.44, i64 0, i64 0), i32 %conv12) #7
  %tobool14 = icmp ne i8* %call13, null
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %15 = phi i1 [ false, %while.cond ], [ %tobool14, %land.rhs ]
  br i1 %15, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %16 = load i8*, i8** %s, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %16, i32 1
  store i8* %incdec.ptr, i8** %s, align 8
  br label %while.cond

while.end:                                        ; preds = %land.end
  br label %while.body16

while.body16:                                     ; preds = %while.end, %if.end
  %17 = load i8*, i8** %s, align 8
  %18 = load i8, i8* %17, align 1
  %conv17 = sext i8 %18 to i32
  %tobool18 = icmp ne i32 %conv17, 0
  br i1 %tobool18, label %land.lhs.true19, label %if.else64

land.lhs.true19:                                  ; preds = %while.body16
  %19 = load i8*, i8** %s, align 8
  %20 = load i8, i8* %19, align 1
  %conv20 = sext i8 %20 to i32
  %call21 = call i8* @strchr(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.45, i64 0, i64 0), i32 %conv20) #7
  %tobool22 = icmp ne i8* %call21, null
  br i1 %tobool22, label %land.lhs.true23, label %if.else64

land.lhs.true23:                                  ; preds = %land.lhs.true19
  %21 = load i8*, i8** %s, align 8
  %incdec.ptr24 = getelementptr inbounds i8, i8* %21, i32 1
  store i8* %incdec.ptr24, i8** %s, align 8
  %22 = load i8, i8* %incdec.ptr24, align 1
  %conv25 = sext i8 %22 to i32
  %tobool26 = icmp ne i32 %conv25, 0
  br i1 %tobool26, label %land.lhs.true27, label %if.else64

land.lhs.true27:                                  ; preds = %land.lhs.true23
  %23 = load i8*, i8** %s, align 8
  %24 = load i8, i8* %23, align 1
  %idxprom = zext i8 %24 to i64
  %arrayidx28 = getelementptr inbounds [0 x i32], [0 x i32]* @PL_charclass, i64 0, i64 %idxprom
  %25 = load i32, i32* %arrayidx28, align 4
  %and29 = and i32 %25, 16385
  %cmp30 = icmp eq i32 %and29, 16385
  br i1 %cmp30, label %if.then35, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true27
  %26 = load i8*, i8** %s, align 8
  %27 = load i8, i8* %26, align 1
  %conv32 = zext i8 %27 to i32
  %and33 = and i32 %conv32, 128
  %tobool34 = icmp ne i32 %and33, 0
  br i1 %tobool34, label %if.then35, label %if.else64

if.then35:                                        ; preds = %lor.lhs.false, %land.lhs.true27
  %28 = load i8*, i8** %s, align 8
  %incdec.ptr36 = getelementptr inbounds i8, i8* %28, i32 1
  store i8* %incdec.ptr36, i8** %s, align 8
  store i8 1, i8* %sigil, align 1
  br label %while.cond37

while.cond37:                                     ; preds = %while.body50, %if.then35
  %29 = load i8*, i8** %s, align 8
  %30 = load i8, i8* %29, align 1
  %conv38 = sext i8 %30 to i32
  %tobool39 = icmp ne i32 %conv38, 0
  br i1 %tobool39, label %land.rhs40, label %land.end49

land.rhs40:                                       ; preds = %while.cond37
  %31 = load i8*, i8** %s, align 8
  %32 = load i8, i8* %31, align 1
  %idxprom41 = zext i8 %32 to i64
  %arrayidx42 = getelementptr inbounds [0 x i32], [0 x i32]* @PL_charclass, i64 0, i64 %idxprom41
  %33 = load i32, i32* %arrayidx42, align 4
  %and43 = and i32 %33, 16385
  %cmp44 = icmp eq i32 %and43, 16385
  br i1 %cmp44, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %land.rhs40
  %34 = load i8*, i8** %s, align 8
  %35 = load i8, i8* %34, align 1
  %conv46 = zext i8 %35 to i32
  %and47 = and i32 %conv46, 128
  %tobool48 = icmp ne i32 %and47, 0
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %land.rhs40
  %36 = phi i1 [ true, %land.rhs40 ], [ %tobool48, %lor.rhs ]
  br label %land.end49

land.end49:                                       ; preds = %lor.end, %while.cond37
  %37 = phi i1 [ false, %while.cond37 ], [ %36, %lor.end ]
  br i1 %37, label %while.body50, label %while.end52

while.body50:                                     ; preds = %land.end49
  %38 = load i8*, i8** %s, align 8
  %incdec.ptr51 = getelementptr inbounds i8, i8* %38, i32 1
  store i8* %incdec.ptr51, i8** %s, align 8
  br label %while.cond37

while.end52:                                      ; preds = %land.end49
  br label %while.cond53

while.cond53:                                     ; preds = %while.body61, %while.end52
  %39 = load i8*, i8** %s, align 8
  %40 = load i8, i8* %39, align 1
  %conv54 = sext i8 %40 to i32
  %tobool55 = icmp ne i32 %conv54, 0
  br i1 %tobool55, label %land.rhs56, label %land.end60

land.rhs56:                                       ; preds = %while.cond53
  %41 = load i8*, i8** %s, align 8
  %42 = load i8, i8* %41, align 1
  %conv57 = sext i8 %42 to i32
  %call58 = call i8* @strchr(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.44, i64 0, i64 0), i32 %conv57) #7
  %tobool59 = icmp ne i8* %call58, null
  br label %land.end60

land.end60:                                       ; preds = %land.rhs56, %while.cond53
  %43 = phi i1 [ false, %while.cond53 ], [ %tobool59, %land.rhs56 ]
  br i1 %43, label %while.body61, label %while.end63

while.body61:                                     ; preds = %land.end60
  %44 = load i8*, i8** %s, align 8
  %incdec.ptr62 = getelementptr inbounds i8, i8* %44, i32 1
  store i8* %incdec.ptr62, i8** %s, align 8
  br label %while.cond53

while.end63:                                      ; preds = %land.end60
  br label %if.end

if.else64:                                        ; preds = %lor.lhs.false, %land.lhs.true23, %land.lhs.true19, %while.body16
  br label %while.end65

if.end:                                           ; preds = %while.end63
  br label %while.body16

while.end65:                                      ; preds = %if.else64
  %45 = load i8, i8* %sigil, align 1
  %tobool66 = trunc i8 %45 to i1
  br i1 %tobool66, label %land.lhs.true68, label %if.end90

land.lhs.true68:                                  ; preds = %while.end65
  %46 = load i8*, i8** %s, align 8
  %47 = load i8, i8* %46, align 1
  %conv69 = sext i8 %47 to i32
  %cmp70 = icmp eq i32 %conv69, 59
  br i1 %cmp70, label %if.then76, label %lor.lhs.false72

lor.lhs.false72:                                  ; preds = %land.lhs.true68
  %48 = load i8*, i8** %s, align 8
  %49 = load i8, i8* %48, align 1
  %conv73 = sext i8 %49 to i32
  %cmp74 = icmp eq i32 %conv73, 61
  br i1 %cmp74, label %if.then76, label %if.end90

if.then76:                                        ; preds = %lor.lhs.false72, %land.lhs.true68
  %50 = load i32, i32* %lex.addr, align 4
  %tobool77 = icmp ne i32 %50, 0
  br i1 %tobool77, label %cond.true, label %cond.false87

cond.true:                                        ; preds = %if.then76
  %51 = load %struct.yy_parser*, %struct.yy_parser** @PL_parser, align 8
  %in_my = getelementptr inbounds %struct.yy_parser, %struct.yy_parser* %51, i32 0, i32 42
  %52 = load i16, i16* %in_my, align 4
  %conv78 = zext i16 %52 to i32
  %cmp79 = icmp eq i32 %conv78, 143
  br i1 %cmp79, label %cond.true81, label %cond.false

cond.true81:                                      ; preds = %cond.true
  br label %cond.end

cond.false:                                       ; preds = %cond.true
  %53 = load %struct.yy_parser*, %struct.yy_parser** @PL_parser, align 8
  %in_my82 = getelementptr inbounds %struct.yy_parser, %struct.yy_parser* %53, i32 0, i32 42
  %54 = load i16, i16* %in_my82, align 4
  %conv83 = zext i16 %54 to i32
  %cmp84 = icmp eq i32 %conv83, 212
  %55 = zext i1 %cmp84 to i64
  %cond = select i1 %cmp84, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i64 0, i64 0)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true81
  %cond86 = phi i8* [ getelementptr inbounds ([4 x i8], [4 x i8]* @.str.47, i64 0, i64 0), %cond.true81 ], [ %cond, %cond.false ]
  br label %cond.end88

cond.false87:                                     ; preds = %if.then76
  br label %cond.end88

cond.end88:                                       ; preds = %cond.false87, %cond.end
  %cond89 = phi i8* [ %cond86, %cond.end ], [ getelementptr inbounds ([6 x i8], [6 x i8]* @.str.30, i64 0, i64 0), %cond.false87 ]
  call void (i32, i8*, ...) @Perl_warner(i32 32, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.46, i64 0, i64 0), i8* %cond89)
  br label %if.end90

if.end90:                                         ; preds = %cond.end88, %lor.lhs.false72, %while.end65
  br label %if.end91

if.end91:                                         ; preds = %if.end90, %land.lhs.true6, %land.lhs.true, %if.else
  br label %if.end92

if.end92:                                         ; preds = %if.end91, %if.then
  %56 = load i32, i32* %lex.addr, align 4
  %tobool93 = icmp ne i32 %56, 0
  br i1 %tobool93, label %if.then94, label %if.else96

if.then94:                                        ; preds = %if.end92
  %57 = load %struct.op*, %struct.op** %o.addr, align 8
  %call95 = call %struct.op* @Perl_my_attrs(%struct.op* %57, %struct.op* null)
  store %struct.op* %call95, %struct.op** %o.addr, align 8
  br label %if.end98

if.else96:                                        ; preds = %if.end92
  %58 = load %struct.op*, %struct.op** %o.addr, align 8
  %call97 = call %struct.op* @Perl_op_lvalue_flags(%struct.op* %58, i32 0, i32 0)
  store %struct.op* %call97, %struct.op** %o.addr, align 8
  br label %if.end98

if.end98:                                         ; preds = %if.else96, %if.then94
  %59 = load %struct.yy_parser*, %struct.yy_parser** @PL_parser, align 8
  %in_my99 = getelementptr inbounds %struct.yy_parser, %struct.yy_parser* %59, i32 0, i32 42
  store i16 0, i16* %in_my99, align 4
  %60 = load %struct.yy_parser*, %struct.yy_parser** @PL_parser, align 8
  %in_my_stash = getelementptr inbounds %struct.yy_parser, %struct.yy_parser* %60, i32 0, i32 45
  store %struct.hv* null, %struct.hv** %in_my_stash, align 8
  %61 = load %struct.op*, %struct.op** %o.addr, align 8
  ret %struct.op* %61
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_jmaybe(%struct.op* %o) #0 {
entry:
  %o.addr = alloca %struct.op*, align 8
  %o2 = alloca %struct.op*, align 8
  store %struct.op* %o, %struct.op** %o.addr, align 8
  %0 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type = getelementptr inbounds %struct.op, %struct.op* %0, i32 0, i32 4
  %bf.load = load i16, i16* %op_type, align 8
  %bf.clear = and i16 %bf.load, 511
  %bf.cast = zext i16 %bf.clear to i32
  %cmp = icmp eq i32 %bf.cast, 158
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call = call %struct.gv* @Perl_gv_fetchpvn_flags(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.48, i64 0, i64 0), i64 1, i32 129, i32 3)
  %call1 = call %struct.op* @Perl_newGVOP(i32 7, i32 0, %struct.gv* %call)
  %call2 = call %struct.op* @Perl_newSVREF(%struct.op* %call1)
  store %struct.op* %call2, %struct.op** %o2, align 8
  %1 = load %struct.op*, %struct.op** %o2, align 8
  %2 = load %struct.op*, %struct.op** %o.addr, align 8
  %call3 = call %struct.op* @Perl_op_prepend_elem(i32 158, %struct.op* %1, %struct.op* %2)
  %call4 = call %struct.op* @Perl_op_convert_list(i32 157, i32 0, %struct.op* %call3)
  store %struct.op* %call4, %struct.op** %o.addr, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %3 = load %struct.op*, %struct.op** %o.addr, align 8
  ret %struct.op* %3
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_newSVREF(%struct.op* %o) #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %o.addr = alloca %struct.op*, align 8
  store %struct.op* %o, %struct.op** %o.addr, align 8
  %0 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type = getelementptr inbounds %struct.op, %struct.op* %0, i32 0, i32 4
  %bf.load = load i16, i16* %op_type, align 8
  %bf.clear = and i16 %bf.load, 511
  %bf.cast = zext i16 %bf.clear to i32
  %cmp = icmp eq i32 %bf.cast, 12
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %do.body

do.body:                                          ; preds = %if.then
  %1 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type1 = getelementptr inbounds %struct.op, %struct.op* %1, i32 0, i32 4
  %bf.load2 = load i16, i16* %op_type1, align 8
  %bf.clear3 = and i16 %bf.load2, -512
  %bf.set = or i16 %bf.clear3, 9
  store i16 %bf.set, i16* %op_type1, align 8
  %2 = load %struct.op* ()*, %struct.op* ()** getelementptr inbounds ([0 x %struct.op* ()*], [0 x %struct.op* ()*]* @PL_ppaddr, i64 0, i64 9), align 8
  %3 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_ppaddr = getelementptr inbounds %struct.op, %struct.op* %3, i32 0, i32 2
  store %struct.op* ()* %2, %struct.op* ()** %op_ppaddr, align 8
  br label %do.end

do.end:                                           ; preds = %do.body
  %4 = load %struct.op*, %struct.op** %o.addr, align 8
  %call = call %struct.op* @Perl_scalar(%struct.op* %4)
  %5 = load %struct.op*, %struct.op** %o.addr, align 8
  store %struct.op* %5, %struct.op** %retval, align 8
  br label %return

if.end:                                           ; preds = %entry
  %6 = load %struct.op*, %struct.op** %o.addr, align 8
  %call4 = call %struct.op* @Perl_scalar(%struct.op* %6)
  %call5 = call %struct.op* @Perl_newUNOP(i32 15, i32 0, %struct.op* %call4)
  store %struct.op* %call5, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %if.end, %do.end
  %7 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %7
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_newGVOP(i32 %type, i32 %flags, %struct.gv* %gv) #0 {
entry:
  %type.addr = alloca i32, align 4
  %flags.addr = alloca i32, align 4
  %gv.addr = alloca %struct.gv*, align 8
  store i32 %type, i32* %type.addr, align 4
  store i32 %flags, i32* %flags.addr, align 4
  store %struct.gv* %gv, %struct.gv** %gv.addr, align 8
  %0 = load i32, i32* %type.addr, align 4
  %1 = load i32, i32* %flags.addr, align 4
  %2 = load %struct.gv*, %struct.gv** %gv.addr, align 8
  %sv_refcnt = getelementptr inbounds %struct.gv, %struct.gv* %2, i32 0, i32 1
  %3 = load i32, i32* %sv_refcnt, align 8
  %inc = add i32 %3, 1
  store i32 %inc, i32* %sv_refcnt, align 8
  %4 = load %struct.gv*, %struct.gv** %gv.addr, align 8
  %5 = bitcast %struct.gv* %4 to i8*
  %6 = bitcast i8* %5 to %struct.sv*
  %call = call %struct.op* @Perl_newSVOP(i32 %0, i32 %1, %struct.sv* %6)
  ret %struct.op* %call
}

declare dso_local %struct.gv* @Perl_gv_fetchpvn_flags(i8*, i64, i32, i32) #3

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_op_convert_list(i32 %type, i32 %flags, %struct.op* %o) #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %type.addr = alloca i32, align 4
  %flags.addr = alloca i32, align 4
  %o.addr = alloca %struct.op*, align 8
  %kid2 = alloca %struct.op*, align 8
  store i32 %type, i32* %type.addr, align 4
  store i32 %flags, i32* %flags.addr, align 4
  store %struct.op* %o, %struct.op** %o.addr, align 8
  %0 = load i32, i32* %type.addr, align 4
  %cmp = icmp slt i32 %0, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load i32, i32* %type.addr, align 4
  %sub = sub nsw i32 0, %1
  store i32 %sub, i32* %type.addr, align 4
  %2 = load i32, i32* %flags.addr, align 4
  %or = or i32 %2, 128
  store i32 %or, i32* %flags.addr, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %3 = load %struct.op*, %struct.op** %o.addr, align 8
  %tobool = icmp ne %struct.op* %3, null
  br i1 %tobool, label %lor.lhs.false, label %if.then2

lor.lhs.false:                                    ; preds = %if.end
  %4 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type = getelementptr inbounds %struct.op, %struct.op* %4, i32 0, i32 4
  %bf.load = load i16, i16* %op_type, align 8
  %bf.clear = and i16 %bf.load, 511
  %bf.cast = zext i16 %bf.clear to i32
  %cmp1 = icmp ne i32 %bf.cast, 158
  br i1 %cmp1, label %if.then2, label %if.else

if.then2:                                         ; preds = %lor.lhs.false, %if.end
  %5 = load %struct.op*, %struct.op** %o.addr, align 8
  %call = call %struct.op* @S_force_list(%struct.op* %5, i1 zeroext false)
  store %struct.op* %call, %struct.op** %o.addr, align 8
  br label %if.end7

if.else:                                          ; preds = %lor.lhs.false
  %6 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %6, i32 0, i32 5
  %7 = load i8, i8* %op_flags, align 2
  %conv = zext i8 %7 to i32
  %and = and i32 %conv, -4
  %conv3 = trunc i32 %and to i8
  store i8 %conv3, i8* %op_flags, align 2
  %8 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_private = getelementptr inbounds %struct.op, %struct.op* %8, i32 0, i32 6
  %9 = load i8, i8* %op_private, align 1
  %conv4 = zext i8 %9 to i32
  %and5 = and i32 %conv4, -129
  %conv6 = trunc i32 %and5 to i8
  store i8 %conv6, i8* %op_private, align 1
  br label %if.end7

if.end7:                                          ; preds = %if.else, %if.then2
  %10 = load i32, i32* %type.addr, align 4
  %idxprom = sext i32 %10 to i64
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @PL_opargs, i64 0, i64 %idxprom
  %11 = load i32, i32* %arrayidx, align 4
  %and8 = and i32 %11, 1
  %tobool9 = icmp ne i32 %and8, 0
  br i1 %tobool9, label %if.else11, label %if.then10

if.then10:                                        ; preds = %if.end7
  %12 = load %struct.op*, %struct.op** %o.addr, align 8
  %13 = bitcast %struct.op* %12 to %struct.listop*
  %op_first = getelementptr inbounds %struct.listop, %struct.listop* %13, i32 0, i32 7
  %14 = load %struct.op*, %struct.op** %op_first, align 8
  call void @Perl_op_null(%struct.op* %14)
  br label %if.end27

if.else11:                                        ; preds = %if.end7
  %15 = load %struct.op*, %struct.op** %o.addr, align 8
  %16 = bitcast %struct.op* %15 to %struct.listop*
  %op_first12 = getelementptr inbounds %struct.listop, %struct.listop* %16, i32 0, i32 7
  %17 = load %struct.op*, %struct.op** %op_first12, align 8
  %op_sibling = getelementptr inbounds %struct.op, %struct.op* %17, i32 0, i32 1
  %18 = load %struct.op*, %struct.op** %op_sibling, align 8
  %add.ptr = getelementptr inbounds %struct.op, %struct.op* %18, i64 0
  store %struct.op* %add.ptr, %struct.op** %kid2, align 8
  %19 = load %struct.op*, %struct.op** %kid2, align 8
  %tobool13 = icmp ne %struct.op* %19, null
  br i1 %tobool13, label %land.lhs.true, label %if.end26

land.lhs.true:                                    ; preds = %if.else11
  %20 = load %struct.op*, %struct.op** %kid2, align 8
  %op_type14 = getelementptr inbounds %struct.op, %struct.op* %20, i32 0, i32 4
  %bf.load15 = load i16, i16* %op_type14, align 8
  %bf.clear16 = and i16 %bf.load15, 511
  %bf.cast17 = zext i16 %bf.clear16 to i32
  %cmp18 = icmp eq i32 %bf.cast17, 384
  br i1 %cmp18, label %if.then20, label %if.end26

if.then20:                                        ; preds = %land.lhs.true
  %21 = load %struct.op*, %struct.op** %o.addr, align 8
  %22 = bitcast %struct.op* %21 to %struct.listop*
  %op_first21 = getelementptr inbounds %struct.listop, %struct.listop* %22, i32 0, i32 7
  %23 = load %struct.op*, %struct.op** %op_first21, align 8
  call void @Perl_op_null(%struct.op* %23)
  %24 = load %struct.op*, %struct.op** %kid2, align 8
  %op_private22 = getelementptr inbounds %struct.op, %struct.op* %24, i32 0, i32 6
  %25 = load i8, i8* %op_private22, align 1
  %conv23 = zext i8 %25 to i32
  %or24 = or i32 %conv23, 128
  %conv25 = trunc i32 %or24 to i8
  store i8 %conv25, i8* %op_private22, align 1
  br label %if.end26

if.end26:                                         ; preds = %if.then20, %land.lhs.true, %if.else11
  br label %if.end27

if.end27:                                         ; preds = %if.end26, %if.then10
  br label %do.body

do.body:                                          ; preds = %if.end27
  %26 = load i32, i32* %type.addr, align 4
  %conv28 = trunc i32 %26 to i16
  %conv29 = zext i16 %conv28 to i32
  %27 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type30 = getelementptr inbounds %struct.op, %struct.op* %27, i32 0, i32 4
  %28 = trunc i32 %conv29 to i16
  %bf.load31 = load i16, i16* %op_type30, align 8
  %bf.value = and i16 %28, 511
  %bf.clear32 = and i16 %bf.load31, -512
  %bf.set = or i16 %bf.clear32, %bf.value
  store i16 %bf.set, i16* %op_type30, align 8
  %bf.result.cast = zext i16 %bf.value to i32
  %29 = load i32, i32* %type.addr, align 4
  %idxprom33 = sext i32 %29 to i64
  %arrayidx34 = getelementptr inbounds [0 x %struct.op* ()*], [0 x %struct.op* ()*]* @PL_ppaddr, i64 0, i64 %idxprom33
  %30 = load %struct.op* ()*, %struct.op* ()** %arrayidx34, align 8
  %31 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_ppaddr = getelementptr inbounds %struct.op, %struct.op* %31, i32 0, i32 2
  store %struct.op* ()* %30, %struct.op* ()** %op_ppaddr, align 8
  br label %do.end

do.end:                                           ; preds = %do.body
  %32 = load i32, i32* %flags.addr, align 4
  %33 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_flags35 = getelementptr inbounds %struct.op, %struct.op* %33, i32 0, i32 5
  %34 = load i8, i8* %op_flags35, align 2
  %conv36 = zext i8 %34 to i32
  %or37 = or i32 %conv36, %32
  %conv38 = trunc i32 %or37 to i8
  store i8 %conv38, i8* %op_flags35, align 2
  %35 = load i32, i32* %flags.addr, align 4
  %and39 = and i32 %35, 65536
  %tobool40 = icmp ne i32 %and39, 0
  br i1 %tobool40, label %if.then41, label %if.end45

if.then41:                                        ; preds = %do.end
  %36 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_folded = getelementptr inbounds %struct.op, %struct.op* %36, i32 0, i32 4
  %bf.load42 = load i16, i16* %op_folded, align 8
  %bf.clear43 = and i16 %bf.load42, -8193
  %bf.set44 = or i16 %bf.clear43, 8192
  store i16 %bf.set44, i16* %op_folded, align 8
  br label %if.end45

if.end45:                                         ; preds = %if.then41, %do.end
  %37 = load i8*, i8** @PL_op_mask, align 8
  %tobool46 = icmp ne i8* %37, null
  br i1 %tobool46, label %land.lhs.true47, label %cond.false

land.lhs.true47:                                  ; preds = %if.end45
  %38 = load i8*, i8** @PL_op_mask, align 8
  %39 = load i32, i32* %type.addr, align 4
  %idxprom48 = sext i32 %39 to i64
  %arrayidx49 = getelementptr inbounds i8, i8* %38, i64 %idxprom48
  %40 = load i8, i8* %arrayidx49, align 1
  %conv50 = sext i8 %40 to i32
  %tobool51 = icmp ne i32 %conv50, 0
  br i1 %tobool51, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true47
  %41 = load %struct.op*, %struct.op** %o.addr, align 8
  call void @Perl_op_free(%struct.op* %41)
  %42 = load i32, i32* %type.addr, align 4
  %idxprom52 = sext i32 %42 to i64
  %arrayidx53 = getelementptr inbounds [0 x i8*], [0 x i8*]* @PL_op_desc, i64 0, i64 %idxprom52
  %43 = load i8*, i8** %arrayidx53, align 8
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.49, i64 0, i64 0), i8* %43)
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true47, %if.end45
  %44 = load i32, i32* %type.addr, align 4
  %idxprom54 = sext i32 %44 to i64
  %arrayidx55 = getelementptr inbounds [0 x %struct.op* (%struct.op*)*], [0 x %struct.op* (%struct.op*)*]* @PL_check, i64 0, i64 %idxprom54
  %45 = load %struct.op* (%struct.op*)*, %struct.op* (%struct.op*)** %arrayidx55, align 8
  %46 = load %struct.op*, %struct.op** %o.addr, align 8
  %call56 = call %struct.op* %45(%struct.op* %46)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.op* [ null, %cond.true ], [ %call56, %cond.false ]
  store %struct.op* %cond, %struct.op** %o.addr, align 8
  %47 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type57 = getelementptr inbounds %struct.op, %struct.op* %47, i32 0, i32 4
  %bf.load58 = load i16, i16* %op_type57, align 8
  %bf.clear59 = and i16 %bf.load58, 511
  %bf.cast60 = zext i16 %bf.clear59 to i32
  %48 = load i32, i32* %type.addr, align 4
  %cmp61 = icmp ne i32 %bf.cast60, %48
  br i1 %cmp61, label %if.then63, label %if.end64

if.then63:                                        ; preds = %cond.end
  %49 = load %struct.op*, %struct.op** %o.addr, align 8
  store %struct.op* %49, %struct.op** %retval, align 8
  br label %return

if.end64:                                         ; preds = %cond.end
  %50 = load %struct.op*, %struct.op** %o.addr, align 8
  %call65 = call %struct.op* @S_op_std_init(%struct.op* %50)
  %call66 = call %struct.op* @S_op_integerize(%struct.op* %call65)
  %call67 = call %struct.op* @S_fold_constants(%struct.op* %call66)
  store %struct.op* %call67, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %if.end64, %if.then63
  %51 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %51
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.op* @S_force_list(%struct.op* %o, i1 zeroext %nullit) #0 {
entry:
  %o.addr = alloca %struct.op*, align 8
  %nullit.addr = alloca i8, align 1
  %rest = alloca %struct.op*, align 8
  store %struct.op* %o, %struct.op** %o.addr, align 8
  %frombool = zext i1 %nullit to i8
  store i8 %frombool, i8* %nullit.addr, align 1
  %0 = load %struct.op*, %struct.op** %o.addr, align 8
  %tobool = icmp ne %struct.op* %0, null
  br i1 %tobool, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %entry
  %1 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type = getelementptr inbounds %struct.op, %struct.op* %1, i32 0, i32 4
  %bf.load = load i16, i16* %op_type, align 8
  %bf.clear = and i16 %bf.load, 511
  %bf.cast = zext i16 %bf.clear to i32
  %cmp = icmp ne i32 %bf.cast, 158
  br i1 %cmp, label %if.then, label %if.end10

if.then:                                          ; preds = %lor.lhs.false, %entry
  store %struct.op* null, %struct.op** %rest, align 8
  %2 = load %struct.op*, %struct.op** %o.addr, align 8
  %tobool1 = icmp ne %struct.op* %2, null
  br i1 %tobool1, label %if.then2, label %if.end

if.then2:                                         ; preds = %if.then
  %3 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_sibling = getelementptr inbounds %struct.op, %struct.op* %3, i32 0, i32 1
  %4 = load %struct.op*, %struct.op** %op_sibling, align 8
  %add.ptr = getelementptr inbounds %struct.op, %struct.op* %4, i64 0
  store %struct.op* %add.ptr, %struct.op** %rest, align 8
  %5 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_moresib = getelementptr inbounds %struct.op, %struct.op* %5, i32 0, i32 4
  %bf.load3 = load i16, i16* %op_moresib, align 8
  %bf.clear4 = and i16 %bf.load3, -16385
  store i16 %bf.clear4, i16* %op_moresib, align 8
  %6 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_sibling5 = getelementptr inbounds %struct.op, %struct.op* %6, i32 0, i32 1
  store %struct.op* null, %struct.op** %op_sibling5, align 8
  br label %if.end

if.end:                                           ; preds = %if.then2, %if.then
  %7 = load %struct.op*, %struct.op** %o.addr, align 8
  %call = call %struct.op* @Perl_newLISTOP(i32 158, i32 0, %struct.op* %7, %struct.op* null)
  store %struct.op* %call, %struct.op** %o.addr, align 8
  %8 = load %struct.op*, %struct.op** %rest, align 8
  %tobool6 = icmp ne %struct.op* %8, null
  br i1 %tobool6, label %if.then7, label %if.end9

if.then7:                                         ; preds = %if.end
  %9 = load %struct.op*, %struct.op** %o.addr, align 8
  %10 = load %struct.op*, %struct.op** %o.addr, align 8
  %11 = bitcast %struct.op* %10 to %struct.listop*
  %op_last = getelementptr inbounds %struct.listop, %struct.listop* %11, i32 0, i32 8
  %12 = load %struct.op*, %struct.op** %op_last, align 8
  %13 = load %struct.op*, %struct.op** %rest, align 8
  %call8 = call %struct.op* @Perl_op_sibling_splice(%struct.op* %9, %struct.op* %12, i32 0, %struct.op* %13)
  br label %if.end9

if.end9:                                          ; preds = %if.then7, %if.end
  br label %if.end10

if.end10:                                         ; preds = %if.end9, %lor.lhs.false
  %14 = load i8, i8* %nullit.addr, align 1
  %tobool11 = trunc i8 %14 to i1
  br i1 %tobool11, label %if.then12, label %if.end13

if.then12:                                        ; preds = %if.end10
  %15 = load %struct.op*, %struct.op** %o.addr, align 8
  call void @Perl_op_null(%struct.op* %15)
  br label %if.end13

if.end13:                                         ; preds = %if.then12, %if.end10
  %16 = load %struct.op*, %struct.op** %o.addr, align 8
  ret %struct.op* %16
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.op* @S_fold_constants(%struct.op* %o) #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %o.addr = alloca %struct.op*, align 8
  %curop = alloca %struct.op*, align 8
  %newop = alloca %struct.op*, align 8
  %type = alloca i32, align 4
  %is_stringify = alloca i8, align 1
  %sv = alloca %struct.sv*, align 8
  %ret = alloca i32, align 4
  %oldscope = alloca i32, align 4
  %old_next = alloca %struct.op*, align 8
  %oldwarnhook = alloca %struct.sv*, align 8
  %olddiehook = alloca %struct.sv*, align 8
  %not_compiling = alloca %struct.cop, align 8
  %oldwarn = alloca i8, align 1
  %cur_env = alloca %struct.jmpenv, align 8
  %sv13 = alloca %struct.sv*, align 8
  %s = alloca i8*, align 8
  %type70 = alloca i16, align 2
  %svp = alloca %struct.sv**, align 8
  %errsv = alloca %struct.sv*, align 8
  store %struct.op* %o, %struct.op** %o.addr, align 8
  %0 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type = getelementptr inbounds %struct.op, %struct.op* %0, i32 0, i32 4
  %bf.load = load i16, i16* %op_type, align 8
  %bf.clear = and i16 %bf.load, 511
  %bf.cast = zext i16 %bf.clear to i32
  store volatile i32 %bf.cast, i32* %type, align 4
  store volatile %struct.sv* null, %struct.sv** %sv, align 8
  store i32 0, i32* %ret, align 4
  %1 = load %struct.sv*, %struct.sv** @PL_warnhook, align 8
  store %struct.sv* %1, %struct.sv** %oldwarnhook, align 8
  %2 = load %struct.sv*, %struct.sv** @PL_diehook, align 8
  store %struct.sv* %2, %struct.sv** %olddiehook, align 8
  %3 = load i8, i8* @PL_dowarn, align 1
  store i8 %3, i8* %oldwarn, align 1
  %4 = load volatile i32, i32* %type, align 4
  %idxprom = sext i32 %4 to i64
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @PL_opargs, i64 0, i64 %idxprom
  %5 = load i32, i32* %arrayidx, align 4
  %and = and i32 %5, 2
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  br label %nope

if.end:                                           ; preds = %entry
  %6 = load volatile i32, i32* %type, align 4
  switch i32 %6, label %sw.epilog [
    i32 130, label %sw.bb
    i32 131, label %sw.bb
    i32 132, label %sw.bb
    i32 133, label %sw.bb
    i32 386, label %sw.bb
    i32 85, label %sw.bb1
    i32 86, label %sw.bb1
    i32 87, label %sw.bb1
    i32 88, label %sw.bb1
    i32 91, label %sw.bb1
    i32 125, label %sw.bb2
    i32 155, label %sw.bb3
    i32 62, label %sw.bb35
    i32 21, label %sw.bb41
  ]

sw.bb:                                            ; preds = %if.end, %if.end, %if.end, %if.end, %if.end
  br label %sw.epilog

sw.bb1:                                           ; preds = %if.end, %if.end, %if.end, %if.end, %if.end
  br label %sw.epilog

sw.bb2:                                           ; preds = %if.end
  br label %sw.epilog

sw.bb3:                                           ; preds = %if.end
  %7 = load %struct.op*, %struct.op** %o.addr, align 8
  %8 = bitcast %struct.op* %7 to %struct.listop*
  %op_first = getelementptr inbounds %struct.listop, %struct.listop* %8, i32 0, i32 7
  %9 = load %struct.op*, %struct.op** %op_first, align 8
  %op_sibling = getelementptr inbounds %struct.op, %struct.op* %9, i32 0, i32 1
  %10 = load %struct.op*, %struct.op** %op_sibling, align 8
  %tobool4 = icmp ne %struct.op* %10, null
  br i1 %tobool4, label %cond.true, label %cond.false

cond.true:                                        ; preds = %sw.bb3
  br i1 true, label %lor.lhs.false, label %if.then11

cond.false:                                       ; preds = %sw.bb3
  br i1 false, label %lor.lhs.false, label %if.then11

lor.lhs.false:                                    ; preds = %cond.false, %cond.true
  %11 = load %struct.op*, %struct.op** %o.addr, align 8
  %12 = bitcast %struct.op* %11 to %struct.listop*
  %op_first5 = getelementptr inbounds %struct.listop, %struct.listop* %12, i32 0, i32 7
  %13 = load %struct.op*, %struct.op** %op_first5, align 8
  %op_sibling6 = getelementptr inbounds %struct.op, %struct.op* %13, i32 0, i32 1
  %14 = load %struct.op*, %struct.op** %op_sibling6, align 8
  %add.ptr = getelementptr inbounds %struct.op, %struct.op* %14, i64 0
  %op_type7 = getelementptr inbounds %struct.op, %struct.op* %add.ptr, i32 0, i32 4
  %bf.load8 = load i16, i16* %op_type7, align 8
  %bf.clear9 = and i16 %bf.load8, 511
  %bf.cast10 = zext i16 %bf.clear9 to i32
  %cmp = icmp ne i32 %bf.cast10, 5
  br i1 %cmp, label %if.then11, label %if.end12

if.then11:                                        ; preds = %lor.lhs.false, %cond.false, %cond.true
  br label %nope

if.end12:                                         ; preds = %lor.lhs.false
  %15 = load %struct.op*, %struct.op** %o.addr, align 8
  %16 = bitcast %struct.op* %15 to %struct.listop*
  %op_first14 = getelementptr inbounds %struct.listop, %struct.listop* %16, i32 0, i32 7
  %17 = load %struct.op*, %struct.op** %op_first14, align 8
  %op_sibling15 = getelementptr inbounds %struct.op, %struct.op* %17, i32 0, i32 1
  %18 = load %struct.op*, %struct.op** %op_sibling15, align 8
  %add.ptr16 = getelementptr inbounds %struct.op, %struct.op* %18, i64 0
  %19 = bitcast %struct.op* %add.ptr16 to %struct.svop*
  %op_sv = getelementptr inbounds %struct.svop, %struct.svop* %19, i32 0, i32 7
  %20 = load %struct.sv*, %struct.sv** %op_sv, align 8
  store %struct.sv* %20, %struct.sv** %sv13, align 8
  %21 = load %struct.sv*, %struct.sv** %sv13, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %21, i32 0, i32 2
  %22 = load i32, i32* %sv_flags, align 4
  %and17 = and i32 %22, 1024
  %tobool18 = icmp ne i32 %and17, 0
  br i1 %tobool18, label %lor.lhs.false19, label %if.then23

lor.lhs.false19:                                  ; preds = %if.end12
  %23 = load %struct.sv*, %struct.sv** %sv13, align 8
  %sv_flags20 = getelementptr inbounds %struct.sv, %struct.sv* %23, i32 0, i32 2
  %24 = load i32, i32* %sv_flags20, align 4
  %and21 = and i32 %24, 2097152
  %tobool22 = icmp ne i32 %and21, 0
  br i1 %tobool22, label %if.then23, label %if.end24

if.then23:                                        ; preds = %lor.lhs.false19, %if.end12
  br label %nope

if.end24:                                         ; preds = %lor.lhs.false19
  %25 = load %struct.sv*, %struct.sv** %sv13, align 8
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %25, i32 0, i32 3
  %svu_pv = bitcast %union.anon* %sv_u to i8**
  %26 = load i8*, i8** %svu_pv, align 8
  %add.ptr25 = getelementptr inbounds i8, i8* %26, i64 0
  store i8* %add.ptr25, i8** %s, align 8
  br label %while.cond

while.cond:                                       ; preds = %if.end34, %if.end24
  %27 = load i8*, i8** %s, align 8
  %28 = load %struct.sv*, %struct.sv** %sv13, align 8
  %sv_u26 = getelementptr inbounds %struct.sv, %struct.sv* %28, i32 0, i32 3
  %svu_pv27 = bitcast %union.anon* %sv_u26 to i8**
  %29 = load i8*, i8** %svu_pv27, align 8
  %30 = load %struct.sv*, %struct.sv** %sv13, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %30, i32 0, i32 0
  %31 = load i8*, i8** %sv_any, align 8
  %32 = bitcast i8* %31 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %32, i32 0, i32 2
  %33 = load i64, i64* %xpv_cur, align 8
  %add.ptr28 = getelementptr inbounds i8, i8* %29, i64 %33
  %cmp29 = icmp ult i8* %27, %add.ptr28
  br i1 %cmp29, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %34 = load i8*, i8** %s, align 8
  %35 = load i8, i8* %34, align 1
  %conv = sext i8 %35 to i32
  %and30 = and i32 %conv, -33
  %cmp31 = icmp eq i32 %and30, 80
  br i1 %cmp31, label %if.then33, label %if.end34

if.then33:                                        ; preds = %while.body
  br label %nope

if.end34:                                         ; preds = %while.body
  %36 = load i8*, i8** %s, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %36, i32 1
  store i8* %incdec.ptr, i8** %s, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %sw.epilog

sw.bb35:                                          ; preds = %if.end
  %37 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_private = getelementptr inbounds %struct.op, %struct.op* %37, i32 0, i32 6
  %38 = load i8, i8* %op_private, align 1
  %conv36 = zext i8 %38 to i32
  %and37 = and i32 %conv36, 64
  %tobool38 = icmp ne i32 %and37, 0
  br i1 %tobool38, label %if.then39, label %if.end40

if.then39:                                        ; preds = %sw.bb35
  br label %nope

if.end40:                                         ; preds = %sw.bb35
  br label %sw.epilog

sw.bb41:                                          ; preds = %if.end
  %39 = load %struct.op*, %struct.op** %o.addr, align 8
  %40 = bitcast %struct.op* %39 to %struct.unop*
  %op_first42 = getelementptr inbounds %struct.unop, %struct.unop* %40, i32 0, i32 7
  %41 = load %struct.op*, %struct.op** %op_first42, align 8
  %42 = bitcast %struct.op* %41 to %struct.unop*
  %op_first43 = getelementptr inbounds %struct.unop, %struct.unop* %42, i32 0, i32 7
  %43 = load %struct.op*, %struct.op** %op_first43, align 8
  %op_type44 = getelementptr inbounds %struct.op, %struct.op* %43, i32 0, i32 4
  %bf.load45 = load i16, i16* %op_type44, align 8
  %bf.clear46 = and i16 %bf.load45, 511
  %bf.cast47 = zext i16 %bf.clear46 to i32
  %cmp48 = icmp ne i32 %bf.cast47, 5
  br i1 %cmp48, label %if.then57, label %lor.lhs.false50

lor.lhs.false50:                                  ; preds = %sw.bb41
  %44 = load %struct.op*, %struct.op** %o.addr, align 8
  %45 = bitcast %struct.op* %44 to %struct.unop*
  %op_first51 = getelementptr inbounds %struct.unop, %struct.unop* %45, i32 0, i32 7
  %46 = load %struct.op*, %struct.op** %op_first51, align 8
  %47 = bitcast %struct.op* %46 to %struct.unop*
  %op_first52 = getelementptr inbounds %struct.unop, %struct.unop* %47, i32 0, i32 7
  %48 = load %struct.op*, %struct.op** %op_first52, align 8
  %49 = bitcast %struct.op* %48 to %struct.svop*
  %op_sv53 = getelementptr inbounds %struct.svop, %struct.svop* %49, i32 0, i32 7
  %50 = load %struct.sv*, %struct.sv** %op_sv53, align 8
  %sv_flags54 = getelementptr inbounds %struct.sv, %struct.sv* %50, i32 0, i32 2
  %51 = load i32, i32* %sv_flags54, align 4
  %and55 = and i32 %51, 131072
  %tobool56 = icmp ne i32 %and55, 0
  br i1 %tobool56, label %if.then57, label %if.end58

if.then57:                                        ; preds = %lor.lhs.false50, %sw.bb41
  br label %nope

if.end58:                                         ; preds = %lor.lhs.false50
  br label %sw.epilog

sw.epilog:                                        ; preds = %if.end58, %if.end, %if.end40, %while.end, %sw.bb2, %sw.bb1, %sw.bb
  %52 = load %struct.yy_parser*, %struct.yy_parser** @PL_parser, align 8
  %tobool59 = icmp ne %struct.yy_parser* %52, null
  br i1 %tobool59, label %land.lhs.true, label %if.end63

land.lhs.true:                                    ; preds = %sw.epilog
  %53 = load %struct.yy_parser*, %struct.yy_parser** @PL_parser, align 8
  %error_count = getelementptr inbounds %struct.yy_parser, %struct.yy_parser* %53, i32 0, i32 44
  %54 = load i8, i8* %error_count, align 1
  %conv60 = zext i8 %54 to i32
  %tobool61 = icmp ne i32 %conv60, 0
  br i1 %tobool61, label %if.then62, label %if.end63

if.then62:                                        ; preds = %land.lhs.true
  br label %nope

if.end63:                                         ; preds = %land.lhs.true, %sw.epilog
  %55 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %55, i32 0, i32 0
  %56 = load %struct.op*, %struct.op** %op_next, align 8
  %tobool64 = icmp ne %struct.op* %56, null
  br i1 %tobool64, label %cond.true65, label %cond.false67

cond.true65:                                      ; preds = %if.end63
  %57 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_next66 = getelementptr inbounds %struct.op, %struct.op* %57, i32 0, i32 0
  %58 = load %struct.op*, %struct.op** %op_next66, align 8
  br label %cond.end

cond.false67:                                     ; preds = %if.end63
  %59 = load %struct.op*, %struct.op** %o.addr, align 8
  %call = call %struct.op* @Perl_op_linklist(%struct.op* %59)
  br label %cond.end

cond.end:                                         ; preds = %cond.false67, %cond.true65
  %cond = phi %struct.op* [ %58, %cond.true65 ], [ %call, %cond.false67 ]
  store volatile %struct.op* %cond, %struct.op** %curop, align 8
  br label %for.cond

for.cond:                                         ; preds = %cond.end108, %cond.end
  %60 = load volatile %struct.op*, %struct.op** %curop, align 8
  %61 = load %struct.op*, %struct.op** %o.addr, align 8
  %cmp68 = icmp ne %struct.op* %60, %61
  br i1 %cmp68, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %62 = load volatile %struct.op*, %struct.op** %curop, align 8
  %op_type71 = getelementptr inbounds %struct.op, %struct.op* %62, i32 0, i32 4
  %bf.load72 = load i16, i16* %op_type71, align 8
  %bf.clear73 = and i16 %bf.load72, 511
  %bf.cast74 = zext i16 %bf.clear73 to i32
  %conv75 = trunc i32 %bf.cast74 to i16
  store i16 %conv75, i16* %type70, align 2
  %63 = load i16, i16* %type70, align 2
  %conv76 = zext i16 %63 to i32
  %cmp77 = icmp ne i32 %conv76, 5
  br i1 %cmp77, label %land.lhs.true84, label %lor.lhs.false79

lor.lhs.false79:                                  ; preds = %for.body
  %64 = load volatile %struct.op*, %struct.op** %curop, align 8
  %op_private80 = getelementptr inbounds %struct.op, %struct.op* %64, i32 0, i32 6
  %65 = load i8, i8* %op_private80, align 1
  %conv81 = zext i8 %65 to i32
  %and82 = and i32 %conv81, 64
  %tobool83 = icmp ne i32 %and82, 0
  br i1 %tobool83, label %land.lhs.true84, label %if.end101

land.lhs.true84:                                  ; preds = %lor.lhs.false79, %for.body
  %66 = load i16, i16* %type70, align 2
  %conv85 = zext i16 %66 to i32
  %cmp86 = icmp ne i32 %conv85, 158
  br i1 %cmp86, label %land.lhs.true88, label %if.end101

land.lhs.true88:                                  ; preds = %land.lhs.true84
  %67 = load i16, i16* %type70, align 2
  %conv89 = zext i16 %67 to i32
  %cmp90 = icmp ne i32 %conv89, 2
  br i1 %cmp90, label %land.lhs.true92, label %if.end101

land.lhs.true92:                                  ; preds = %land.lhs.true88
  %68 = load i16, i16* %type70, align 2
  %conv93 = zext i16 %68 to i32
  %cmp94 = icmp ne i32 %conv93, 0
  br i1 %cmp94, label %land.lhs.true96, label %if.end101

land.lhs.true96:                                  ; preds = %land.lhs.true92
  %69 = load i16, i16* %type70, align 2
  %conv97 = zext i16 %69 to i32
  %cmp98 = icmp ne i32 %conv97, 3
  br i1 %cmp98, label %if.then100, label %if.end101

if.then100:                                       ; preds = %land.lhs.true96
  br label %nope

if.end101:                                        ; preds = %land.lhs.true96, %land.lhs.true92, %land.lhs.true88, %land.lhs.true84, %lor.lhs.false79
  br label %for.inc

for.inc:                                          ; preds = %if.end101
  %70 = load volatile %struct.op*, %struct.op** %curop, align 8
  %op_next102 = getelementptr inbounds %struct.op, %struct.op* %70, i32 0, i32 0
  %71 = load %struct.op*, %struct.op** %op_next102, align 8
  %tobool103 = icmp ne %struct.op* %71, null
  br i1 %tobool103, label %cond.true104, label %cond.false106

cond.true104:                                     ; preds = %for.inc
  %72 = load volatile %struct.op*, %struct.op** %curop, align 8
  %op_next105 = getelementptr inbounds %struct.op, %struct.op* %72, i32 0, i32 0
  %73 = load %struct.op*, %struct.op** %op_next105, align 8
  br label %cond.end108

cond.false106:                                    ; preds = %for.inc
  %74 = load volatile %struct.op*, %struct.op** %curop, align 8
  %call107 = call %struct.op* @Perl_op_linklist(%struct.op* %74)
  br label %cond.end108

cond.end108:                                      ; preds = %cond.false106, %cond.true104
  %cond109 = phi %struct.op* [ %73, %cond.true104 ], [ %call107, %cond.false106 ]
  store volatile %struct.op* %cond109, %struct.op** %curop, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %75 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_next110 = getelementptr inbounds %struct.op, %struct.op* %75, i32 0, i32 0
  %76 = load %struct.op*, %struct.op** %op_next110, align 8
  %tobool111 = icmp ne %struct.op* %76, null
  br i1 %tobool111, label %cond.true112, label %cond.false114

cond.true112:                                     ; preds = %for.end
  %77 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_next113 = getelementptr inbounds %struct.op, %struct.op* %77, i32 0, i32 0
  %78 = load %struct.op*, %struct.op** %op_next113, align 8
  br label %cond.end116

cond.false114:                                    ; preds = %for.end
  %79 = load %struct.op*, %struct.op** %o.addr, align 8
  %call115 = call %struct.op* @Perl_op_linklist(%struct.op* %79)
  br label %cond.end116

cond.end116:                                      ; preds = %cond.false114, %cond.true112
  %cond117 = phi %struct.op* [ %78, %cond.true112 ], [ %call115, %cond.false114 ]
  store volatile %struct.op* %cond117, %struct.op** %curop, align 8
  %80 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_next118 = getelementptr inbounds %struct.op, %struct.op* %80, i32 0, i32 0
  %81 = load %struct.op*, %struct.op** %op_next118, align 8
  store %struct.op* %81, %struct.op** %old_next, align 8
  %82 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_next119 = getelementptr inbounds %struct.op, %struct.op* %82, i32 0, i32 0
  store %struct.op* null, %struct.op** %op_next119, align 8
  %83 = load volatile %struct.op*, %struct.op** %curop, align 8
  store %struct.op* %83, %struct.op** @PL_op, align 8
  %84 = load i32, i32* @PL_scopestack_ix, align 4
  store i32 %84, i32* %oldscope, align 4
  %call120 = call %struct.context* @Perl_create_eval_scope(i32 256)
  %85 = bitcast %struct.cop* %not_compiling to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %85, i8* align 8 bitcast (%struct.cop* @PL_compiling to i8*), i64 80, i1 false)
  store %struct.cop* %not_compiling, %struct.cop** @PL_curcop, align 8
  store %struct.sv* @PL_sv_placeholder, %struct.sv** @PL_warnhook, align 8
  store %struct.sv* null, %struct.sv** @PL_diehook, align 8
  br label %do.body

do.body:                                          ; preds = %cond.end116
  %86 = load %struct.jmpenv*, %struct.jmpenv** @PL_top_env, align 8
  %je_prev = getelementptr inbounds %struct.jmpenv, %struct.jmpenv* %cur_env, i32 0, i32 1
  store %struct.jmpenv* %86, %struct.jmpenv** %je_prev, align 8
  %je_buf = getelementptr inbounds %struct.jmpenv, %struct.jmpenv* %cur_env, i32 0, i32 0
  %arraydecay = getelementptr inbounds [1 x %struct.__jmp_buf_tag], [1 x %struct.__jmp_buf_tag]* %je_buf, i64 0, i64 0
  %call121 = call i32 @__sigsetjmp(%struct.__jmp_buf_tag* %arraydecay, i32 0) #8
  %je_ret = getelementptr inbounds %struct.jmpenv, %struct.jmpenv* %cur_env, i32 0, i32 2
  store i32 %call121, i32* %je_ret, align 8
  store %struct.jmpenv* %cur_env, %struct.jmpenv** @PL_top_env, align 8
  %je_mustcatch = getelementptr inbounds %struct.jmpenv, %struct.jmpenv* %cur_env, i32 0, i32 3
  store i8 0, i8* %je_mustcatch, align 4
  %je_ret122 = getelementptr inbounds %struct.jmpenv, %struct.jmpenv* %cur_env, i32 0, i32 2
  %87 = load i32, i32* %je_ret122, align 8
  store i32 %87, i32* %ret, align 4
  br label %do.end

do.end:                                           ; preds = %do.body
  %88 = load i8, i8* @PL_dowarn, align 1
  %conv123 = zext i8 %88 to i32
  %and124 = and i32 %conv123, 6
  %tobool125 = icmp ne i32 %and124, 0
  br i1 %tobool125, label %if.end129, label %if.then126

if.then126:                                       ; preds = %do.end
  %89 = load i8, i8* @PL_dowarn, align 1
  %conv127 = zext i8 %89 to i32
  %or = or i32 %conv127, 1
  %conv128 = trunc i32 %or to i8
  store i8 %conv128, i8* @PL_dowarn, align 1
  br label %if.end129

if.end129:                                        ; preds = %if.then126, %do.end
  %90 = load i32, i32* %ret, align 4
  switch i32 %90, label %sw.default [
    i32 0, label %sw.bb130
    i32 3, label %sw.bb155
  ]

sw.bb130:                                         ; preds = %if.end129
  %91 = load i32 ()*, i32 ()** @PL_runops, align 8
  %call131 = call i32 %91()
  %92 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  %incdec.ptr132 = getelementptr inbounds %struct.sv*, %struct.sv** %92, i32 -1
  store %struct.sv** %incdec.ptr132, %struct.sv*** @PL_stack_sp, align 8
  %93 = load %struct.sv*, %struct.sv** %92, align 8
  store volatile %struct.sv* %93, %struct.sv** %sv, align 8
  %94 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_targ = getelementptr inbounds %struct.op, %struct.op* %94, i32 0, i32 3
  %95 = load i64, i64* %op_targ, align 8
  %tobool133 = icmp ne i64 %95, 0
  br i1 %tobool133, label %land.lhs.true134, label %if.else

land.lhs.true134:                                 ; preds = %sw.bb130
  %96 = load volatile %struct.sv*, %struct.sv** %sv, align 8
  %97 = load %struct.sv**, %struct.sv*** @PL_curpad, align 8
  %98 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_targ135 = getelementptr inbounds %struct.op, %struct.op* %98, i32 0, i32 3
  %99 = load i64, i64* %op_targ135, align 8
  %arrayidx136 = getelementptr inbounds %struct.sv*, %struct.sv** %97, i64 %99
  %100 = load %struct.sv*, %struct.sv** %arrayidx136, align 8
  %cmp137 = icmp eq %struct.sv* %96, %100
  br i1 %cmp137, label %if.then139, label %if.else

if.then139:                                       ; preds = %land.lhs.true134
  %101 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_targ140 = getelementptr inbounds %struct.op, %struct.op* %101, i32 0, i32 3
  %102 = load i64, i64* %op_targ140, align 8
  call void @Perl_pad_swipe(i64 %102, i1 zeroext false)
  br label %if.end154

if.else:                                          ; preds = %land.lhs.true134, %sw.bb130
  %103 = load volatile %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags141 = getelementptr inbounds %struct.sv, %struct.sv* %103, i32 0, i32 2
  %104 = load i32, i32* %sv_flags141, align 4
  %and142 = and i32 %104, 524288
  %tobool143 = icmp ne i32 %and142, 0
  br i1 %tobool143, label %if.then144, label %if.else152

if.then144:                                       ; preds = %if.else
  br label %do.body145

do.body145:                                       ; preds = %if.then144
  %105 = load volatile %struct.sv*, %struct.sv** %sv, align 8
  %tobool146 = icmp ne %struct.sv* %105, null
  br i1 %tobool146, label %if.then147, label %if.end148

if.then147:                                       ; preds = %do.body145
  %106 = load volatile %struct.sv*, %struct.sv** %sv, align 8
  %sv_refcnt = getelementptr inbounds %struct.sv, %struct.sv* %106, i32 0, i32 1
  %107 = load i32, i32* %sv_refcnt, align 8
  %inc = add i32 %107, 1
  store i32 %inc, i32* %sv_refcnt, align 8
  br label %if.end148

if.end148:                                        ; preds = %if.then147, %do.body145
  br label %do.end149

do.end149:                                        ; preds = %if.end148
  %108 = load volatile %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags150 = getelementptr inbounds %struct.sv, %struct.sv* %108, i32 0, i32 2
  %109 = load i32, i32* %sv_flags150, align 4
  %and151 = and i32 %109, -524289
  store i32 %and151, i32* %sv_flags150, align 4
  br label %if.end153

if.else152:                                       ; preds = %if.else
  br label %if.end153

if.end153:                                        ; preds = %if.else152, %do.end149
  br label %if.end154

if.end154:                                        ; preds = %if.end153, %if.then139
  br label %sw.epilog185

sw.bb155:                                         ; preds = %if.end129
  br label %do.body156

do.body156:                                       ; preds = %sw.bb155
  %110 = load %struct.gv*, %struct.gv** @PL_errgv, align 8
  %sv_u157 = getelementptr inbounds %struct.gv, %struct.gv* %110, i32 0, i32 3
  %svu_gp = bitcast %union.anon.3* %sv_u157 to %struct.gp**
  %111 = load %struct.gp*, %struct.gp** %svu_gp, align 8
  %add.ptr158 = getelementptr inbounds %struct.gp, %struct.gp* %111, i64 0
  %gp_sv = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr158, i32 0, i32 0
  store %struct.sv** %gp_sv, %struct.sv*** %svp, align 8
  %112 = load %struct.sv**, %struct.sv*** %svp, align 8
  %113 = load %struct.sv*, %struct.sv** %112, align 8
  %tobool159 = icmp ne %struct.sv* %113, null
  br i1 %tobool159, label %if.else161, label %if.then160

if.then160:                                       ; preds = %do.body156
  br label %clresv_newemptypv

if.else161:                                       ; preds = %do.body156
  %114 = load %struct.sv**, %struct.sv*** %svp, align 8
  %115 = load %struct.sv*, %struct.sv** %114, align 8
  %sv_flags162 = getelementptr inbounds %struct.sv, %struct.sv* %115, i32 0, i32 2
  %116 = load i32, i32* %sv_flags162, align 4
  %and163 = and i32 %116, 134283264
  %tobool164 = icmp ne i32 %and163, 0
  br i1 %tobool164, label %if.then165, label %if.else167

if.then165:                                       ; preds = %if.else161
  %117 = load %struct.sv**, %struct.sv*** %svp, align 8
  %118 = load %struct.sv*, %struct.sv** %117, align 8
  %119 = bitcast %struct.sv* %118 to i8*
  %120 = bitcast i8* %119 to %struct.sv*
  call void @S_SvREFCNT_dec_NN(%struct.sv* %120)
  br label %clresv_newemptypv

clresv_newemptypv:                                ; preds = %if.then165, %if.then160
  %call166 = call %struct.sv* @Perl_newSVpvn(i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.17, i64 0, i64 0), i64 0)
  %121 = load %struct.sv**, %struct.sv*** %svp, align 8
  store %struct.sv* %call166, %struct.sv** %121, align 8
  br label %if.end178

if.else167:                                       ; preds = %if.else161
  %122 = load %struct.sv**, %struct.sv*** %svp, align 8
  %123 = load %struct.sv*, %struct.sv** %122, align 8
  store %struct.sv* %123, %struct.sv** %errsv, align 8
  %124 = load %struct.sv*, %struct.sv** %errsv, align 8
  call void @Perl_sv_setpvn(%struct.sv* %124, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.17, i64 0, i64 0), i64 0)
  %125 = load %struct.sv*, %struct.sv** %errsv, align 8
  %sv_flags168 = getelementptr inbounds %struct.sv, %struct.sv* %125, i32 0, i32 2
  %126 = load i32, i32* %sv_flags168, align 4
  %and169 = and i32 %126, 1610547455
  store i32 %and169, i32* %sv_flags168, align 4
  %127 = load %struct.sv*, %struct.sv** %errsv, align 8
  %sv_flags170 = getelementptr inbounds %struct.sv, %struct.sv* %127, i32 0, i32 2
  %128 = load i32, i32* %sv_flags170, align 4
  %or171 = or i32 %128, 17408
  store i32 %or171, i32* %sv_flags170, align 4
  %129 = load %struct.sv*, %struct.sv** %errsv, align 8
  %sv_flags172 = getelementptr inbounds %struct.sv, %struct.sv* %129, i32 0, i32 2
  %130 = load i32, i32* %sv_flags172, align 4
  %and173 = and i32 %130, 14680064
  %tobool174 = icmp ne i32 %and173, 0
  br i1 %tobool174, label %if.then175, label %if.end177

if.then175:                                       ; preds = %if.else167
  %131 = load %struct.sv*, %struct.sv** %errsv, align 8
  %call176 = call i32 @Perl_mg_free(%struct.sv* %131)
  br label %if.end177

if.end177:                                        ; preds = %if.then175, %if.else167
  br label %if.end178

if.end178:                                        ; preds = %if.end177, %clresv_newemptypv
  br label %if.end179

if.end179:                                        ; preds = %if.end178
  br label %do.end180

do.end180:                                        ; preds = %if.end179
  %132 = load %struct.op*, %struct.op** %old_next, align 8
  %133 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_next181 = getelementptr inbounds %struct.op, %struct.op* %133, i32 0, i32 0
  store %struct.op* %132, %struct.op** %op_next181, align 8
  br label %sw.epilog185

sw.default:                                       ; preds = %if.end129
  br label %do.body182

do.body182:                                       ; preds = %sw.default
  %je_prev183 = getelementptr inbounds %struct.jmpenv, %struct.jmpenv* %cur_env, i32 0, i32 1
  %134 = load %struct.jmpenv*, %struct.jmpenv** %je_prev183, align 8
  store %struct.jmpenv* %134, %struct.jmpenv** @PL_top_env, align 8
  br label %do.end184

do.end184:                                        ; preds = %do.body182
  %135 = load %struct.sv*, %struct.sv** %oldwarnhook, align 8
  store %struct.sv* %135, %struct.sv** @PL_warnhook, align 8
  %136 = load %struct.sv*, %struct.sv** %olddiehook, align 8
  store %struct.sv* %136, %struct.sv** @PL_diehook, align 8
  %137 = load i32, i32* %ret, align 4
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.175, i64 0, i64 0), i32 %137)
  br label %sw.epilog185

sw.epilog185:                                     ; preds = %do.end184, %do.end180, %if.end154
  br label %do.body186

do.body186:                                       ; preds = %sw.epilog185
  %je_prev187 = getelementptr inbounds %struct.jmpenv, %struct.jmpenv* %cur_env, i32 0, i32 1
  %138 = load %struct.jmpenv*, %struct.jmpenv** %je_prev187, align 8
  store %struct.jmpenv* %138, %struct.jmpenv** @PL_top_env, align 8
  br label %do.end188

do.end188:                                        ; preds = %do.body186
  %139 = load i8, i8* %oldwarn, align 1
  store i8 %139, i8* @PL_dowarn, align 1
  %140 = load %struct.sv*, %struct.sv** %oldwarnhook, align 8
  store %struct.sv* %140, %struct.sv** @PL_warnhook, align 8
  %141 = load %struct.sv*, %struct.sv** %olddiehook, align 8
  store %struct.sv* %141, %struct.sv** @PL_diehook, align 8
  store %struct.cop* @PL_compiling, %struct.cop** @PL_curcop, align 8
  %142 = load i32, i32* @PL_scopestack_ix, align 4
  %143 = load i32, i32* %oldscope, align 4
  %cmp189 = icmp sgt i32 %142, %143
  br i1 %cmp189, label %if.then191, label %if.end192

if.then191:                                       ; preds = %do.end188
  call void @Perl_delete_eval_scope()
  br label %if.end192

if.end192:                                        ; preds = %if.then191, %do.end188
  %144 = load i32, i32* %ret, align 4
  %tobool193 = icmp ne i32 %144, 0
  br i1 %tobool193, label %if.then194, label %if.end195

if.then194:                                       ; preds = %if.end192
  br label %nope

if.end195:                                        ; preds = %if.end192
  %145 = load volatile i32, i32* %type, align 4
  %cmp196 = icmp eq i32 %145, 68
  br i1 %cmp196, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %if.end195
  %146 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_folded = getelementptr inbounds %struct.op, %struct.op* %146, i32 0, i32 4
  %bf.load198 = load i16, i16* %op_folded, align 8
  %bf.lshr = lshr i16 %bf.load198, 13
  %bf.clear199 = and i16 %bf.lshr, 1
  %bf.cast200 = zext i16 %bf.clear199 to i32
  %tobool201 = icmp ne i32 %bf.cast200, 0
  %lnot = xor i1 %tobool201, true
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.end195
  %147 = phi i1 [ false, %if.end195 ], [ %lnot, %land.rhs ]
  %frombool = zext i1 %147 to i8
  store i8 %frombool, i8* %is_stringify, align 1
  %148 = load %struct.op*, %struct.op** %o.addr, align 8
  call void @Perl_op_free(%struct.op* %148)
  %149 = load i8, i8* %is_stringify, align 1
  %tobool202 = trunc i8 %149 to i1
  br i1 %tobool202, label %if.then203, label %if.else206

if.then203:                                       ; preds = %land.end
  %150 = load volatile %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags204 = getelementptr inbounds %struct.sv, %struct.sv* %150, i32 0, i32 2
  %151 = load i32, i32* %sv_flags204, align 4
  %and205 = and i32 %151, -131073
  store i32 %and205, i32* %sv_flags204, align 4
  br label %if.end228

if.else206:                                       ; preds = %land.end
  %152 = load volatile %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags207 = getelementptr inbounds %struct.sv, %struct.sv* %152, i32 0, i32 2
  %153 = load i32, i32* %sv_flags207, align 4
  %and208 = and i32 %153, 134283264
  %tobool209 = icmp ne i32 %and208, 0
  br i1 %tobool209, label %land.lhs.true210, label %if.then222

land.lhs.true210:                                 ; preds = %if.else206
  %154 = load volatile %struct.sv*, %struct.sv** %sv, align 8
  %cmp211 = icmp eq %struct.sv* %154, @PL_sv_undef
  br i1 %cmp211, label %if.end227, label %lor.lhs.false213

lor.lhs.false213:                                 ; preds = %land.lhs.true210
  %155 = load volatile %struct.sv*, %struct.sv** %sv, align 8
  %cmp214 = icmp eq %struct.sv* %155, @PL_sv_yes
  br i1 %cmp214, label %if.end227, label %lor.lhs.false216

lor.lhs.false216:                                 ; preds = %lor.lhs.false213
  %156 = load volatile %struct.sv*, %struct.sv** %sv, align 8
  %cmp217 = icmp eq %struct.sv* %156, @PL_sv_no
  br i1 %cmp217, label %if.end227, label %lor.lhs.false219

lor.lhs.false219:                                 ; preds = %lor.lhs.false216
  %157 = load volatile %struct.sv*, %struct.sv** %sv, align 8
  %cmp220 = icmp eq %struct.sv* %157, @PL_sv_placeholder
  br i1 %cmp220, label %if.end227, label %if.then222

if.then222:                                       ; preds = %lor.lhs.false219, %if.else206
  %158 = load volatile %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags223 = getelementptr inbounds %struct.sv, %struct.sv* %158, i32 0, i32 2
  %159 = load i32, i32* %sv_flags223, align 4
  %or224 = or i32 %159, 131072
  store i32 %or224, i32* %sv_flags223, align 4
  %160 = load volatile %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags225 = getelementptr inbounds %struct.sv, %struct.sv* %160, i32 0, i32 2
  %161 = load i32, i32* %sv_flags225, align 4
  %or226 = or i32 %161, 134283264
  store i32 %or226, i32* %sv_flags225, align 4
  br label %if.end227

if.end227:                                        ; preds = %if.then222, %lor.lhs.false219, %lor.lhs.false216, %lor.lhs.false213, %land.lhs.true210
  br label %if.end228

if.end228:                                        ; preds = %if.end227, %if.then203
  %162 = load volatile %struct.sv*, %struct.sv** %sv, align 8
  %163 = bitcast %struct.sv* %162 to i8*
  %164 = bitcast i8* %163 to %struct.sv*
  %call229 = call %struct.op* @Perl_newSVOP(i32 5, i32 0, %struct.sv* %164)
  store %struct.op* %call229, %struct.op** %newop, align 8
  %165 = load i8, i8* %is_stringify, align 1
  %tobool230 = trunc i8 %165 to i1
  br i1 %tobool230, label %if.end235, label %if.then231

if.then231:                                       ; preds = %if.end228
  %166 = load %struct.op*, %struct.op** %newop, align 8
  %op_folded232 = getelementptr inbounds %struct.op, %struct.op* %166, i32 0, i32 4
  %bf.load233 = load i16, i16* %op_folded232, align 8
  %bf.clear234 = and i16 %bf.load233, -8193
  %bf.set = or i16 %bf.clear234, 8192
  store i16 %bf.set, i16* %op_folded232, align 8
  br label %if.end235

if.end235:                                        ; preds = %if.then231, %if.end228
  %167 = load %struct.op*, %struct.op** %newop, align 8
  store %struct.op* %167, %struct.op** %retval, align 8
  br label %return

nope:                                             ; preds = %if.then194, %if.then100, %if.then62, %if.then57, %if.then39, %if.then33, %if.then23, %if.then11, %if.then
  %168 = load %struct.op*, %struct.op** %o.addr, align 8
  store %struct.op* %168, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %nope, %if.end235
  %169 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %169
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.op* @S_op_integerize(%struct.op* %o) #0 {
entry:
  %o.addr = alloca %struct.op*, align 8
  %type = alloca i32, align 4
  store %struct.op* %o, %struct.op** %o.addr, align 8
  %0 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type = getelementptr inbounds %struct.op, %struct.op* %0, i32 0, i32 4
  %bf.load = load i16, i16* %op_type, align 8
  %bf.clear = and i16 %bf.load, 511
  %bf.cast = zext i16 %bf.clear to i32
  store i32 %bf.cast, i32* %type, align 4
  %1 = load i32, i32* %type, align 4
  %idxprom = sext i32 %1 to i64
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @PL_opargs, i64 0, i64 %idxprom
  %2 = load i32, i32* %arrayidx, align 4
  %and = and i32 %2, 32
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %3 = load i32, i32* getelementptr inbounds (%struct.cop, %struct.cop* @PL_compiling, i32 0, i32 10), align 8
  %and1 = and i32 %3, 1
  %tobool2 = icmp ne i32 %and1, 0
  br i1 %tobool2, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type3 = getelementptr inbounds %struct.op, %struct.op* %4, i32 0, i32 4
  %bf.load4 = load i16, i16* %op_type3, align 8
  %bf.clear5 = and i16 %bf.load4, 511
  %bf.cast6 = zext i16 %bf.clear5 to i32
  %inc = add i32 %bf.cast6, 1
  %5 = trunc i32 %inc to i16
  %bf.load7 = load i16, i16* %op_type3, align 8
  %bf.value = and i16 %5, 511
  %bf.clear8 = and i16 %bf.load7, -512
  %bf.set = or i16 %bf.clear8, %bf.value
  store i16 %bf.set, i16* %op_type3, align 8
  %bf.result.cast = zext i16 %bf.value to i32
  %idxprom9 = zext i32 %bf.result.cast to i64
  %arrayidx10 = getelementptr inbounds [0 x %struct.op* ()*], [0 x %struct.op* ()*]* @PL_ppaddr, i64 0, i64 %idxprom9
  %6 = load %struct.op* ()*, %struct.op* ()** %arrayidx10, align 8
  %7 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_ppaddr = getelementptr inbounds %struct.op, %struct.op* %7, i32 0, i32 2
  store %struct.op* ()* %6, %struct.op* ()** %op_ppaddr, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %8 = load i32, i32* %type, align 4
  %cmp = icmp eq i32 %8, 101
  br i1 %cmp, label %if.then11, label %if.end14

if.then11:                                        ; preds = %if.end
  %9 = load %struct.op*, %struct.op** %o.addr, align 8
  %10 = bitcast %struct.op* %9 to %struct.unop*
  %op_first = getelementptr inbounds %struct.unop, %struct.unop* %10, i32 0, i32 7
  %11 = load %struct.op*, %struct.op** %op_first, align 8
  %op_private = getelementptr inbounds %struct.op, %struct.op* %11, i32 0, i32 6
  %12 = load i8, i8* %op_private, align 1
  %conv = zext i8 %12 to i32
  %and12 = and i32 %conv, -9
  %conv13 = trunc i32 %and12 to i8
  store i8 %conv13, i8* %op_private, align 1
  br label %if.end14

if.end14:                                         ; preds = %if.then11, %if.end
  %13 = load %struct.op*, %struct.op** %o.addr, align 8
  ret %struct.op* %13
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.op* @S_op_std_init(%struct.op* %o) #0 {
entry:
  %o.addr = alloca %struct.op*, align 8
  %type = alloca i32, align 4
  store %struct.op* %o, %struct.op** %o.addr, align 8
  %0 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type = getelementptr inbounds %struct.op, %struct.op* %0, i32 0, i32 4
  %bf.load = load i16, i16* %op_type, align 8
  %bf.clear = and i16 %bf.load, 511
  %bf.cast = zext i16 %bf.clear to i32
  store i32 %bf.cast, i32* %type, align 4
  %1 = load i32, i32* %type, align 4
  %idxprom = sext i32 %1 to i64
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @PL_opargs, i64 0, i64 %idxprom
  %2 = load i32, i32* %arrayidx, align 4
  %and = and i32 %2, 4
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %3 = load %struct.op*, %struct.op** %o.addr, align 8
  %call = call %struct.op* @Perl_scalar(%struct.op* %3)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %4 = load i32, i32* %type, align 4
  %idxprom1 = sext i32 %4 to i64
  %arrayidx2 = getelementptr inbounds [0 x i32], [0 x i32]* @PL_opargs, i64 0, i64 %idxprom1
  %5 = load i32, i32* %arrayidx2, align 4
  %and3 = and i32 %5, 8
  %tobool4 = icmp ne i32 %and3, 0
  br i1 %tobool4, label %land.lhs.true, label %if.end9

land.lhs.true:                                    ; preds = %if.end
  %6 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_targ = getelementptr inbounds %struct.op, %struct.op* %6, i32 0, i32 3
  %7 = load i64, i64* %op_targ, align 8
  %tobool5 = icmp ne i64 %7, 0
  br i1 %tobool5, label %if.end9, label %if.then6

if.then6:                                         ; preds = %land.lhs.true
  %8 = load i32, i32* %type, align 4
  %call7 = call i64 @Perl_pad_alloc(i32 %8, i32 131072)
  %9 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_targ8 = getelementptr inbounds %struct.op, %struct.op* %9, i32 0, i32 3
  store i64 %call7, i64* %op_targ8, align 8
  br label %if.end9

if.end9:                                          ; preds = %if.then6, %land.lhs.true, %if.end
  %10 = load %struct.op*, %struct.op** %o.addr, align 8
  ret %struct.op* %10
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_newNULLLIST() #0 {
entry:
  %call = call %struct.op* @Perl_newOP(i32 1, i32 0)
  ret %struct.op* %call
}

declare dso_local i64 @Perl_pad_alloc(i32, i32) #3

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_newUNOP_AUX(i32 %type, i32 %flags, %struct.op* %first, %union.UNOP_AUX_item* %aux) #0 {
entry:
  %type.addr = alloca i32, align 4
  %flags.addr = alloca i32, align 4
  %first.addr = alloca %struct.op*, align 8
  %aux.addr = alloca %union.UNOP_AUX_item*, align 8
  %unop = alloca %struct.unop_aux*, align 8
  store i32 %type, i32* %type.addr, align 4
  store i32 %flags, i32* %flags.addr, align 4
  store %struct.op* %first, %struct.op** %first.addr, align 8
  store %union.UNOP_AUX_item* %aux, %union.UNOP_AUX_item** %aux.addr, align 8
  %call = call i8* @Perl_Slab_Alloc(i64 56)
  %0 = bitcast i8* %call to %struct.unop_aux*
  store %struct.unop_aux* %0, %struct.unop_aux** %unop, align 8
  %1 = load i32, i32* %type.addr, align 4
  %conv = trunc i32 %1 to i16
  %conv1 = zext i16 %conv to i32
  %2 = load %struct.unop_aux*, %struct.unop_aux** %unop, align 8
  %op_type = getelementptr inbounds %struct.unop_aux, %struct.unop_aux* %2, i32 0, i32 4
  %3 = trunc i32 %conv1 to i16
  %bf.load = load i16, i16* %op_type, align 8
  %bf.value = and i16 %3, 511
  %bf.clear = and i16 %bf.load, -512
  %bf.set = or i16 %bf.clear, %bf.value
  store i16 %bf.set, i16* %op_type, align 8
  %bf.result.cast = zext i16 %bf.value to i32
  %4 = load i32, i32* %type.addr, align 4
  %idxprom = sext i32 %4 to i64
  %arrayidx = getelementptr inbounds [0 x %struct.op* ()*], [0 x %struct.op* ()*]* @PL_ppaddr, i64 0, i64 %idxprom
  %5 = load %struct.op* ()*, %struct.op* ()** %arrayidx, align 8
  %6 = load %struct.unop_aux*, %struct.unop_aux** %unop, align 8
  %op_ppaddr = getelementptr inbounds %struct.unop_aux, %struct.unop_aux* %6, i32 0, i32 2
  store %struct.op* ()* %5, %struct.op* ()** %op_ppaddr, align 8
  %7 = load %struct.op*, %struct.op** %first.addr, align 8
  %8 = load %struct.unop_aux*, %struct.unop_aux** %unop, align 8
  %op_first = getelementptr inbounds %struct.unop_aux, %struct.unop_aux* %8, i32 0, i32 7
  store %struct.op* %7, %struct.op** %op_first, align 8
  %9 = load i32, i32* %flags.addr, align 4
  %10 = load %struct.op*, %struct.op** %first.addr, align 8
  %tobool = icmp ne %struct.op* %10, null
  %11 = zext i1 %tobool to i64
  %cond = select i1 %tobool, i32 4, i32 0
  %or = or i32 %9, %cond
  %conv2 = trunc i32 %or to i8
  %12 = load %struct.unop_aux*, %struct.unop_aux** %unop, align 8
  %op_flags = getelementptr inbounds %struct.unop_aux, %struct.unop_aux* %12, i32 0, i32 5
  store i8 %conv2, i8* %op_flags, align 2
  %13 = load %struct.op*, %struct.op** %first.addr, align 8
  %tobool3 = icmp ne %struct.op* %13, null
  %14 = zext i1 %tobool3 to i64
  %cond4 = select i1 %tobool3, i32 1, i32 0
  %15 = load i32, i32* %flags.addr, align 4
  %shr = ashr i32 %15, 8
  %or5 = or i32 %cond4, %shr
  %conv6 = trunc i32 %or5 to i8
  %16 = load %struct.unop_aux*, %struct.unop_aux** %unop, align 8
  %op_private = getelementptr inbounds %struct.unop_aux, %struct.unop_aux* %16, i32 0, i32 6
  store i8 %conv6, i8* %op_private, align 1
  %17 = load %union.UNOP_AUX_item*, %union.UNOP_AUX_item** %aux.addr, align 8
  %18 = load %struct.unop_aux*, %struct.unop_aux** %unop, align 8
  %op_aux = getelementptr inbounds %struct.unop_aux, %struct.unop_aux* %18, i32 0, i32 8
  store %union.UNOP_AUX_item* %17, %union.UNOP_AUX_item** %op_aux, align 8
  %19 = load %struct.op*, %struct.op** %first.addr, align 8
  %tobool7 = icmp ne %struct.op* %19, null
  br i1 %tobool7, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %20 = load %struct.op*, %struct.op** %first.addr, align 8
  %op_sibling = getelementptr inbounds %struct.op, %struct.op* %20, i32 0, i32 1
  %21 = load %struct.op*, %struct.op** %op_sibling, align 8
  %tobool8 = icmp ne %struct.op* %21, null
  br i1 %tobool8, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true
  br i1 true, label %if.end, label %if.then

cond.false:                                       ; preds = %land.lhs.true
  br i1 false, label %if.end, label %if.then

if.then:                                          ; preds = %cond.false, %cond.true
  %22 = load %struct.op*, %struct.op** %first.addr, align 8
  %op_moresib = getelementptr inbounds %struct.op, %struct.op* %22, i32 0, i32 4
  %bf.load9 = load i16, i16* %op_moresib, align 8
  %bf.clear10 = and i16 %bf.load9, -16385
  store i16 %bf.clear10, i16* %op_moresib, align 8
  %23 = load %struct.op*, %struct.op** %first.addr, align 8
  %op_sibling11 = getelementptr inbounds %struct.op, %struct.op* %23, i32 0, i32 1
  store %struct.op* null, %struct.op** %op_sibling11, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %cond.false, %cond.true, %entry
  %24 = load i8*, i8** @PL_op_mask, align 8
  %tobool12 = icmp ne i8* %24, null
  br i1 %tobool12, label %land.lhs.true13, label %cond.false21

land.lhs.true13:                                  ; preds = %if.end
  %25 = load i8*, i8** @PL_op_mask, align 8
  %26 = load i32, i32* %type.addr, align 4
  %idxprom14 = sext i32 %26 to i64
  %arrayidx15 = getelementptr inbounds i8, i8* %25, i64 %idxprom14
  %27 = load i8, i8* %arrayidx15, align 1
  %conv16 = sext i8 %27 to i32
  %tobool17 = icmp ne i32 %conv16, 0
  br i1 %tobool17, label %cond.true18, label %cond.false21

cond.true18:                                      ; preds = %land.lhs.true13
  %28 = load %struct.unop_aux*, %struct.unop_aux** %unop, align 8
  %29 = bitcast %struct.unop_aux* %28 to %struct.op*
  call void @Perl_op_free(%struct.op* %29)
  %30 = load i32, i32* %type.addr, align 4
  %idxprom19 = sext i32 %30 to i64
  %arrayidx20 = getelementptr inbounds [0 x i8*], [0 x i8*]* @PL_op_desc, i64 0, i64 %idxprom19
  %31 = load i8*, i8** %arrayidx20, align 8
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.49, i64 0, i64 0), i8* %31)
  br label %cond.end

cond.false21:                                     ; preds = %land.lhs.true13, %if.end
  %32 = load i32, i32* %type.addr, align 4
  %idxprom22 = sext i32 %32 to i64
  %arrayidx23 = getelementptr inbounds [0 x %struct.op* (%struct.op*)*], [0 x %struct.op* (%struct.op*)*]* @PL_check, i64 0, i64 %idxprom22
  %33 = load %struct.op* (%struct.op*)*, %struct.op* (%struct.op*)** %arrayidx23, align 8
  %34 = load %struct.unop_aux*, %struct.unop_aux** %unop, align 8
  %35 = bitcast %struct.unop_aux* %34 to %struct.op*
  %call24 = call %struct.op* %33(%struct.op* %35)
  br label %cond.end

cond.end:                                         ; preds = %cond.false21, %cond.true18
  %cond25 = phi %struct.op* [ null, %cond.true18 ], [ %call24, %cond.false21 ]
  %36 = bitcast %struct.op* %cond25 to %struct.unop_aux*
  store %struct.unop_aux* %36, %struct.unop_aux** %unop, align 8
  %37 = load %struct.unop_aux*, %struct.unop_aux** %unop, align 8
  %38 = bitcast %struct.unop_aux* %37 to %struct.op*
  %call26 = call %struct.op* @S_op_std_init(%struct.op* %38)
  ret %struct.op* %call26
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_newMETHOP(i32 %type, i32 %flags, %struct.op* %dynamic_meth) #0 {
entry:
  %type.addr = alloca i32, align 4
  %flags.addr = alloca i32, align 4
  %dynamic_meth.addr = alloca %struct.op*, align 8
  store i32 %type, i32* %type.addr, align 4
  store i32 %flags, i32* %flags.addr, align 4
  store %struct.op* %dynamic_meth, %struct.op** %dynamic_meth.addr, align 8
  %0 = load i32, i32* %type.addr, align 4
  %1 = load i32, i32* %flags.addr, align 4
  %2 = load %struct.op*, %struct.op** %dynamic_meth.addr, align 8
  %call = call %struct.op* @S_newMETHOP_internal(i32 %0, i32 %1, %struct.op* %2, %struct.sv* null)
  ret %struct.op* %call
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.op* @S_newMETHOP_internal(i32 %type, i32 %flags, %struct.op* %dynamic_meth, %struct.sv* %const_meth) #0 {
entry:
  %type.addr = alloca i32, align 4
  %flags.addr = alloca i32, align 4
  %dynamic_meth.addr = alloca %struct.op*, align 8
  %const_meth.addr = alloca %struct.sv*, align 8
  %methop = alloca %struct.methop*, align 8
  store i32 %type, i32* %type.addr, align 4
  store i32 %flags, i32* %flags.addr, align 4
  store %struct.op* %dynamic_meth, %struct.op** %dynamic_meth.addr, align 8
  store %struct.sv* %const_meth, %struct.sv** %const_meth.addr, align 8
  %call = call i8* @Perl_Slab_Alloc(i64 56)
  %0 = bitcast i8* %call to %struct.methop*
  store %struct.methop* %0, %struct.methop** %methop, align 8
  %1 = load %struct.op*, %struct.op** %dynamic_meth.addr, align 8
  %tobool = icmp ne %struct.op* %1, null
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %2 = load i32, i32* %type.addr, align 4
  %idxprom = sext i32 %2 to i64
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @PL_opargs, i64 0, i64 %idxprom
  %3 = load i32, i32* %arrayidx, align 4
  %and = and i32 %3, 1
  %tobool1 = icmp ne i32 %and, 0
  br i1 %tobool1, label %if.then2, label %if.end

if.then2:                                         ; preds = %if.then
  %4 = load %struct.op*, %struct.op** %dynamic_meth.addr, align 8
  %call3 = call %struct.op* @S_force_list(%struct.op* %4, i1 zeroext true)
  store %struct.op* %call3, %struct.op** %dynamic_meth.addr, align 8
  br label %if.end

if.end:                                           ; preds = %if.then2, %if.then
  %5 = load i32, i32* %flags.addr, align 4
  %or = or i32 %5, 4
  %conv = trunc i32 %or to i8
  %6 = load %struct.methop*, %struct.methop** %methop, align 8
  %op_flags = getelementptr inbounds %struct.methop, %struct.methop* %6, i32 0, i32 5
  store i8 %conv, i8* %op_flags, align 2
  %7 = load %struct.op*, %struct.op** %dynamic_meth.addr, align 8
  %8 = load %struct.methop*, %struct.methop** %methop, align 8
  %op_u = getelementptr inbounds %struct.methop, %struct.methop* %8, i32 0, i32 7
  %op_first = bitcast %union.anon.17* %op_u to %struct.op**
  store %struct.op* %7, %struct.op** %op_first, align 8
  %9 = load i32, i32* %flags.addr, align 4
  %shr = ashr i32 %9, 8
  %or4 = or i32 1, %shr
  %conv5 = trunc i32 %or4 to i8
  %10 = load %struct.methop*, %struct.methop** %methop, align 8
  %op_private = getelementptr inbounds %struct.methop, %struct.methop* %10, i32 0, i32 6
  store i8 %conv5, i8* %op_private, align 1
  %11 = load %struct.op*, %struct.op** %dynamic_meth.addr, align 8
  %op_sibling = getelementptr inbounds %struct.op, %struct.op* %11, i32 0, i32 1
  %12 = load %struct.op*, %struct.op** %op_sibling, align 8
  %tobool6 = icmp ne %struct.op* %12, null
  br i1 %tobool6, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end
  br i1 true, label %if.end9, label %if.then7

cond.false:                                       ; preds = %if.end
  br i1 false, label %if.end9, label %if.then7

if.then7:                                         ; preds = %cond.false, %cond.true
  %13 = load %struct.op*, %struct.op** %dynamic_meth.addr, align 8
  %op_moresib = getelementptr inbounds %struct.op, %struct.op* %13, i32 0, i32 4
  %bf.load = load i16, i16* %op_moresib, align 8
  %bf.clear = and i16 %bf.load, -16385
  store i16 %bf.clear, i16* %op_moresib, align 8
  %14 = load %struct.op*, %struct.op** %dynamic_meth.addr, align 8
  %op_sibling8 = getelementptr inbounds %struct.op, %struct.op* %14, i32 0, i32 1
  store %struct.op* null, %struct.op** %op_sibling8, align 8
  br label %if.end9

if.end9:                                          ; preds = %if.then7, %cond.false, %cond.true
  br label %if.end18

if.else:                                          ; preds = %entry
  %15 = load i32, i32* %flags.addr, align 4
  %and10 = and i32 %15, -5
  %conv11 = trunc i32 %and10 to i8
  %16 = load %struct.methop*, %struct.methop** %methop, align 8
  %op_flags12 = getelementptr inbounds %struct.methop, %struct.methop* %16, i32 0, i32 5
  store i8 %conv11, i8* %op_flags12, align 2
  %17 = load %struct.sv*, %struct.sv** %const_meth.addr, align 8
  %18 = load %struct.methop*, %struct.methop** %methop, align 8
  %op_u13 = getelementptr inbounds %struct.methop, %struct.methop* %18, i32 0, i32 7
  %op_meth_sv = bitcast %union.anon.17* %op_u13 to %struct.sv**
  store %struct.sv* %17, %struct.sv** %op_meth_sv, align 8
  %19 = load i32, i32* %flags.addr, align 4
  %shr14 = ashr i32 %19, 8
  %or15 = or i32 0, %shr14
  %conv16 = trunc i32 %or15 to i8
  %20 = load %struct.methop*, %struct.methop** %methop, align 8
  %op_private17 = getelementptr inbounds %struct.methop, %struct.methop* %20, i32 0, i32 6
  store i8 %conv16, i8* %op_private17, align 1
  %21 = load %struct.methop*, %struct.methop** %methop, align 8
  %22 = bitcast %struct.methop* %21 to %struct.op*
  %23 = load %struct.methop*, %struct.methop** %methop, align 8
  %op_next = getelementptr inbounds %struct.methop, %struct.methop* %23, i32 0, i32 0
  store %struct.op* %22, %struct.op** %op_next, align 8
  br label %if.end18

if.end18:                                         ; preds = %if.else, %if.end9
  %24 = load %struct.methop*, %struct.methop** %methop, align 8
  %op_rclass_sv = getelementptr inbounds %struct.methop, %struct.methop* %24, i32 0, i32 8
  store %struct.sv* null, %struct.sv** %op_rclass_sv, align 8
  br label %do.body

do.body:                                          ; preds = %if.end18
  %25 = load i32, i32* %type.addr, align 4
  %conv19 = trunc i32 %25 to i16
  %conv20 = zext i16 %conv19 to i32
  %26 = load %struct.methop*, %struct.methop** %methop, align 8
  %op_type = getelementptr inbounds %struct.methop, %struct.methop* %26, i32 0, i32 4
  %27 = trunc i32 %conv20 to i16
  %bf.load21 = load i16, i16* %op_type, align 8
  %bf.value = and i16 %27, 511
  %bf.clear22 = and i16 %bf.load21, -512
  %bf.set = or i16 %bf.clear22, %bf.value
  store i16 %bf.set, i16* %op_type, align 8
  %bf.result.cast = zext i16 %bf.value to i32
  %28 = load i32, i32* %type.addr, align 4
  %idxprom23 = sext i32 %28 to i64
  %arrayidx24 = getelementptr inbounds [0 x %struct.op* ()*], [0 x %struct.op* ()*]* @PL_ppaddr, i64 0, i64 %idxprom23
  %29 = load %struct.op* ()*, %struct.op* ()** %arrayidx24, align 8
  %30 = load %struct.methop*, %struct.methop** %methop, align 8
  %op_ppaddr = getelementptr inbounds %struct.methop, %struct.methop* %30, i32 0, i32 2
  store %struct.op* ()* %29, %struct.op* ()** %op_ppaddr, align 8
  br label %do.end

do.end:                                           ; preds = %do.body
  %31 = load i8*, i8** @PL_op_mask, align 8
  %tobool25 = icmp ne i8* %31, null
  br i1 %tobool25, label %land.lhs.true, label %cond.false33

land.lhs.true:                                    ; preds = %do.end
  %32 = load i8*, i8** @PL_op_mask, align 8
  %33 = load i32, i32* %type.addr, align 4
  %idxprom26 = sext i32 %33 to i64
  %arrayidx27 = getelementptr inbounds i8, i8* %32, i64 %idxprom26
  %34 = load i8, i8* %arrayidx27, align 1
  %conv28 = sext i8 %34 to i32
  %tobool29 = icmp ne i32 %conv28, 0
  br i1 %tobool29, label %cond.true30, label %cond.false33

cond.true30:                                      ; preds = %land.lhs.true
  %35 = load %struct.methop*, %struct.methop** %methop, align 8
  %36 = bitcast %struct.methop* %35 to %struct.op*
  call void @Perl_op_free(%struct.op* %36)
  %37 = load i32, i32* %type.addr, align 4
  %idxprom31 = sext i32 %37 to i64
  %arrayidx32 = getelementptr inbounds [0 x i8*], [0 x i8*]* @PL_op_desc, i64 0, i64 %idxprom31
  %38 = load i8*, i8** %arrayidx32, align 8
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.49, i64 0, i64 0), i8* %38)
  br label %cond.end

cond.false33:                                     ; preds = %land.lhs.true, %do.end
  %39 = load i32, i32* %type.addr, align 4
  %idxprom34 = sext i32 %39 to i64
  %arrayidx35 = getelementptr inbounds [0 x %struct.op* (%struct.op*)*], [0 x %struct.op* (%struct.op*)*]* @PL_check, i64 0, i64 %idxprom34
  %40 = load %struct.op* (%struct.op*)*, %struct.op* (%struct.op*)** %arrayidx35, align 8
  %41 = load %struct.methop*, %struct.methop** %methop, align 8
  %42 = bitcast %struct.methop* %41 to %struct.op*
  %call36 = call %struct.op* %40(%struct.op* %42)
  br label %cond.end

cond.end:                                         ; preds = %cond.false33, %cond.true30
  %cond = phi %struct.op* [ null, %cond.true30 ], [ %call36, %cond.false33 ]
  ret %struct.op* %cond
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_newMETHOP_named(i32 %type, i32 %flags, %struct.sv* %const_meth) #0 {
entry:
  %type.addr = alloca i32, align 4
  %flags.addr = alloca i32, align 4
  %const_meth.addr = alloca %struct.sv*, align 8
  store i32 %type, i32* %type.addr, align 4
  store i32 %flags, i32* %flags.addr, align 4
  store %struct.sv* %const_meth, %struct.sv** %const_meth.addr, align 8
  %0 = load i32, i32* %type.addr, align 4
  %1 = load i32, i32* %flags.addr, align 4
  %2 = load %struct.sv*, %struct.sv** %const_meth.addr, align 8
  %call = call %struct.op* @S_newMETHOP_internal(i32 %0, i32 %1, %struct.op* null, %struct.sv* %2)
  ret %struct.op* %call
}

declare dso_local zeroext i1 @Perl__is_in_locale_category(i1 zeroext, i32) #3

; Function Attrs: noinline nounwind uwtable
define internal void @set_regex_charset(i32* %flags, i32 %cs) #0 {
entry:
  %flags.addr = alloca i32*, align 8
  %cs.addr = alloca i32, align 4
  store i32* %flags, i32** %flags.addr, align 8
  store i32 %cs, i32* %cs.addr, align 4
  %0 = load i32*, i32** %flags.addr, align 8
  %1 = load i32, i32* %0, align 4
  %and = and i32 %1, -897
  store i32 %and, i32* %0, align 4
  %2 = load i32, i32* %cs.addr, align 4
  %shl = shl i32 %2, 7
  %3 = load i32*, i32** %flags.addr, align 8
  %4 = load i32, i32* %3, align 4
  %or = or i32 %4, %shl
  store i32 %or, i32* %3, align 4
  ret void
}

declare dso_local %struct.sv* @Perl_refcounted_he_fetch_pvn(%struct.refcounted_he*, i8*, i64, i32, i32) #3

; Function Attrs: noinline nounwind uwtable
define internal %struct.op* @S_pmtrans(%struct.op* %o, %struct.op* %expr, %struct.op* %repl) #0 {
entry:
  %o.addr = alloca %struct.op*, align 8
  %expr.addr = alloca %struct.op*, align 8
  %repl.addr = alloca %struct.op*, align 8
  %tstr = alloca %struct.sv*, align 8
  %rstr = alloca %struct.sv*, align 8
  %tlen = alloca i64, align 8
  %rlen = alloca i64, align 8
  %t = alloca i8*, align 8
  %r = alloca i8*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %grows = alloca i32, align 4
  %tbl = alloca i16*, align 8
  %complement = alloca i32, align 4
  %squash = alloca i32, align 4
  %del = alloca i32, align 4
  %swash = alloca %struct.sv*, align 8
  %listsv = alloca %struct.sv*, align 8
  %transv = alloca %struct.sv*, align 8
  %tend = alloca i8*, align 8
  %rend = alloca i8*, align 8
  %ulen = alloca i64, align 8
  %tfirst = alloca i64, align 8
  %tlast = alloca i64, align 8
  %tdiff = alloca i64, align 8
  %tcount = alloca i64, align 8
  %rfirst = alloca i64, align 8
  %rlast = alloca i64, align 8
  %rdiff = alloca i64, align 8
  %rcount = alloca i64, align 8
  %diff = alloca i64, align 8
  %none = alloca i32, align 4
  %max = alloca i32, align 4
  %bits = alloca i32, align 4
  %havefinal = alloca i32, align 4
  %final = alloca i32, align 4
  %from_utf = alloca i32, align 4
  %to_utf = alloca i32, align 4
  %tsave = alloca i8*, align 8
  %rsave = alloca i8*, align 8
  %flags = alloca i32, align 4
  %len = alloca i64, align 8
  %len62 = alloca i64, align 8
  %tmpbuf = alloca [14 x i8], align 1
  %cp = alloca i64*, align 8
  %nextmin = alloca i64, align 8
  %val = alloca i64, align 8
  %range_mark = alloca i8, align 1
  %range_mark144 = alloca i8, align 1
  store %struct.op* %o, %struct.op** %o.addr, align 8
  store %struct.op* %expr, %struct.op** %expr.addr, align 8
  store %struct.op* %repl, %struct.op** %repl.addr, align 8
  %0 = load %struct.op*, %struct.op** %expr.addr, align 8
  %1 = bitcast %struct.op* %0 to %struct.svop*
  %op_sv = getelementptr inbounds %struct.svop, %struct.svop* %1, i32 0, i32 7
  %2 = load %struct.sv*, %struct.sv** %op_sv, align 8
  store %struct.sv* %2, %struct.sv** %tstr, align 8
  %3 = load %struct.op*, %struct.op** %repl.addr, align 8
  %4 = bitcast %struct.op* %3 to %struct.svop*
  %op_sv1 = getelementptr inbounds %struct.svop, %struct.svop* %4, i32 0, i32 7
  %5 = load %struct.sv*, %struct.sv** %op_sv1, align 8
  store %struct.sv* %5, %struct.sv** %rstr, align 8
  %6 = load %struct.sv*, %struct.sv** %tstr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %6, i32 0, i32 2
  %7 = load i32, i32* %sv_flags, align 4
  %and = and i32 %7, 2098176
  %cmp = icmp eq i32 %and, 1024
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %8 = load %struct.sv*, %struct.sv** %tstr, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %8, i32 0, i32 0
  %9 = load i8*, i8** %sv_any, align 8
  %10 = bitcast i8* %9 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %10, i32 0, i32 2
  %11 = load i64, i64* %xpv_cur, align 8
  store i64 %11, i64* %tlen, align 8
  %12 = load %struct.sv*, %struct.sv** %tstr, align 8
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %12, i32 0, i32 3
  %svu_pv = bitcast %union.anon* %sv_u to i8**
  %13 = load i8*, i8** %svu_pv, align 8
  %add.ptr = getelementptr inbounds i8, i8* %13, i64 0
  br label %cond.end

cond.false:                                       ; preds = %entry
  %14 = load %struct.sv*, %struct.sv** %tstr, align 8
  %call = call i8* @Perl_sv_2pv_flags(%struct.sv* %14, i64* %tlen, i32 34)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %add.ptr, %cond.true ], [ %call, %cond.false ]
  store i8* %cond, i8** %t, align 8
  %15 = load %struct.sv*, %struct.sv** %rstr, align 8
  %sv_flags2 = getelementptr inbounds %struct.sv, %struct.sv* %15, i32 0, i32 2
  %16 = load i32, i32* %sv_flags2, align 4
  %and3 = and i32 %16, 2098176
  %cmp4 = icmp eq i32 %and3, 1024
  br i1 %cmp4, label %cond.true5, label %cond.false11

cond.true5:                                       ; preds = %cond.end
  %17 = load %struct.sv*, %struct.sv** %rstr, align 8
  %sv_any6 = getelementptr inbounds %struct.sv, %struct.sv* %17, i32 0, i32 0
  %18 = load i8*, i8** %sv_any6, align 8
  %19 = bitcast i8* %18 to %struct.xpv*
  %xpv_cur7 = getelementptr inbounds %struct.xpv, %struct.xpv* %19, i32 0, i32 2
  %20 = load i64, i64* %xpv_cur7, align 8
  store i64 %20, i64* %rlen, align 8
  %21 = load %struct.sv*, %struct.sv** %rstr, align 8
  %sv_u8 = getelementptr inbounds %struct.sv, %struct.sv* %21, i32 0, i32 3
  %svu_pv9 = bitcast %union.anon* %sv_u8 to i8**
  %22 = load i8*, i8** %svu_pv9, align 8
  %add.ptr10 = getelementptr inbounds i8, i8* %22, i64 0
  br label %cond.end13

cond.false11:                                     ; preds = %cond.end
  %23 = load %struct.sv*, %struct.sv** %rstr, align 8
  %call12 = call i8* @Perl_sv_2pv_flags(%struct.sv* %23, i64* %rlen, i32 34)
  br label %cond.end13

cond.end13:                                       ; preds = %cond.false11, %cond.true5
  %cond14 = phi i8* [ %add.ptr10, %cond.true5 ], [ %call12, %cond.false11 ]
  store i8* %cond14, i8** %r, align 8
  store i32 0, i32* %grows, align 4
  %24 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_private = getelementptr inbounds %struct.op, %struct.op* %24, i32 0, i32 6
  %25 = load i8, i8* %op_private, align 1
  %conv = zext i8 %25 to i32
  %and15 = and i32 %conv, 32
  store i32 %and15, i32* %complement, align 4
  %26 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_private16 = getelementptr inbounds %struct.op, %struct.op* %26, i32 0, i32 6
  %27 = load i8, i8* %op_private16, align 1
  %conv17 = zext i8 %27 to i32
  %and18 = and i32 %conv17, 8
  store i32 %and18, i32* %squash, align 4
  %28 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_private19 = getelementptr inbounds %struct.op, %struct.op* %28, i32 0, i32 6
  %29 = load i8, i8* %op_private19, align 1
  %conv20 = zext i8 %29 to i32
  %and21 = and i32 %conv20, 128
  store i32 %and21, i32* %del, align 4
  %30 = load i32, i32* getelementptr inbounds (%struct.cop, %struct.cop* @PL_compiling, i32 0, i32 10), align 8
  %or = or i32 %30, 256
  store i32 %or, i32* getelementptr inbounds (%struct.cop, %struct.cop* @PL_compiling, i32 0, i32 10), align 8
  %31 = load %struct.sv*, %struct.sv** %tstr, align 8
  %sv_flags22 = getelementptr inbounds %struct.sv, %struct.sv* %31, i32 0, i32 2
  %32 = load i32, i32* %sv_flags22, align 4
  %and23 = and i32 %32, 536870912
  %tobool = icmp ne i32 %and23, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %cond.end13
  %33 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_private24 = getelementptr inbounds %struct.op, %struct.op* %33, i32 0, i32 6
  %34 = load i8, i8* %op_private24, align 1
  %conv25 = zext i8 %34 to i32
  %or26 = or i32 %conv25, 1
  %conv27 = trunc i32 %or26 to i8
  store i8 %conv27, i8* %op_private24, align 1
  br label %if.end

if.end:                                           ; preds = %if.then, %cond.end13
  %35 = load %struct.sv*, %struct.sv** %rstr, align 8
  %sv_flags28 = getelementptr inbounds %struct.sv, %struct.sv* %35, i32 0, i32 2
  %36 = load i32, i32* %sv_flags28, align 4
  %and29 = and i32 %36, 536870912
  %tobool30 = icmp ne i32 %and29, 0
  br i1 %tobool30, label %if.then31, label %if.end36

if.then31:                                        ; preds = %if.end
  %37 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_private32 = getelementptr inbounds %struct.op, %struct.op* %37, i32 0, i32 6
  %38 = load i8, i8* %op_private32, align 1
  %conv33 = zext i8 %38 to i32
  %or34 = or i32 %conv33, 2
  %conv35 = trunc i32 %or34 to i8
  store i8 %conv35, i8* %op_private32, align 1
  br label %if.end36

if.end36:                                         ; preds = %if.then31, %if.end
  %39 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_private37 = getelementptr inbounds %struct.op, %struct.op* %39, i32 0, i32 6
  %40 = load i8, i8* %op_private37, align 1
  %conv38 = zext i8 %40 to i32
  %and39 = and i32 %conv38, 3
  %tobool40 = icmp ne i32 %and39, 0
  br i1 %tobool40, label %if.then41, label %if.end427

if.then41:                                        ; preds = %if.end36
  %call42 = call %struct.sv* @Perl_newSVpvn(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.176, i64 0, i64 0), i64 10)
  store %struct.sv* %call42, %struct.sv** %listsv, align 8
  store %struct.sv* null, %struct.sv** %transv, align 8
  %41 = load i8*, i8** %t, align 8
  %42 = load i64, i64* %tlen, align 8
  %add.ptr43 = getelementptr inbounds i8, i8* %41, i64 %42
  store i8* %add.ptr43, i8** %tend, align 8
  %43 = load i8*, i8** %r, align 8
  %44 = load i64, i64* %rlen, align 8
  %add.ptr44 = getelementptr inbounds i8, i8* %43, i64 %44
  store i8* %add.ptr44, i8** %rend, align 8
  store i64 1, i64* %tfirst, align 8
  store i64 0, i64* %tlast, align 8
  store i64 0, i64* %tcount, align 8
  store i64 1, i64* %rfirst, align 8
  store i64 0, i64* %rlast, align 8
  store i64 0, i64* %rcount, align 8
  store i32 0, i32* %none, align 4
  store i32 0, i32* %max, align 4
  store i32 0, i32* %havefinal, align 4
  store i32 0, i32* %final, align 4
  %45 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_private45 = getelementptr inbounds %struct.op, %struct.op* %45, i32 0, i32 6
  %46 = load i8, i8* %op_private45, align 1
  %conv46 = zext i8 %46 to i32
  %and47 = and i32 %conv46, 1
  store i32 %and47, i32* %from_utf, align 4
  %47 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_private48 = getelementptr inbounds %struct.op, %struct.op* %47, i32 0, i32 6
  %48 = load i8, i8* %op_private48, align 1
  %conv49 = zext i8 %48 to i32
  %and50 = and i32 %conv49, 2
  store i32 %and50, i32* %to_utf, align 4
  store i8* null, i8** %tsave, align 8
  store i8* null, i8** %rsave, align 8
  %call51 = call zeroext i1 @Perl_ckwarn(i32 44)
  %49 = zext i1 %call51 to i64
  %cond53 = select i1 %call51, i32 0, i32 1
  store i32 %cond53, i32* %flags, align 4
  %50 = load i32, i32* %from_utf, align 4
  %tobool54 = icmp ne i32 %50, 0
  br i1 %tobool54, label %if.end58, label %if.then55

if.then55:                                        ; preds = %if.then41
  %51 = load i64, i64* %tlen, align 8
  store i64 %51, i64* %len, align 8
  %52 = load i8*, i8** %t, align 8
  %call56 = call i8* @Perl_bytes_to_utf8(i8* %52, i64* %len)
  store i8* %call56, i8** %tsave, align 8
  store i8* %call56, i8** %t, align 8
  %53 = load i8*, i8** %t, align 8
  %54 = load i64, i64* %len, align 8
  %add.ptr57 = getelementptr inbounds i8, i8* %53, i64 %54
  store i8* %add.ptr57, i8** %tend, align 8
  br label %if.end58

if.end58:                                         ; preds = %if.then55, %if.then41
  %55 = load i32, i32* %to_utf, align 4
  %tobool59 = icmp ne i32 %55, 0
  br i1 %tobool59, label %if.end65, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.end58
  %56 = load i64, i64* %rlen, align 8
  %tobool60 = icmp ne i64 %56, 0
  br i1 %tobool60, label %if.then61, label %if.end65

if.then61:                                        ; preds = %land.lhs.true
  %57 = load i64, i64* %rlen, align 8
  store i64 %57, i64* %len62, align 8
  %58 = load i8*, i8** %r, align 8
  %call63 = call i8* @Perl_bytes_to_utf8(i8* %58, i64* %len62)
  store i8* %call63, i8** %rsave, align 8
  store i8* %call63, i8** %r, align 8
  %59 = load i8*, i8** %r, align 8
  %60 = load i64, i64* %len62, align 8
  %add.ptr64 = getelementptr inbounds i8, i8* %59, i64 %60
  store i8* %add.ptr64, i8** %rend, align 8
  br label %if.end65

if.end65:                                         ; preds = %if.then61, %land.lhs.true, %if.end58
  %61 = load i32, i32* %complement, align 4
  %tobool66 = icmp ne i32 %61, 0
  br i1 %tobool66, label %if.then67, label %if.else158

if.then67:                                        ; preds = %if.end65
  store i64 0, i64* %nextmin, align 8
  %62 = load i64, i64* %tlen, align 8
  %mul = mul i64 2, %62
  %mul68 = mul i64 %mul, 8
  %call69 = call i8* @Perl_safesysmalloc(i64 %mul68)
  %63 = bitcast i8* %call69 to i64*
  store i64* %63, i64** %cp, align 8
  store i32 0, i32* %i, align 4
  %call70 = call %struct.sv* @Perl_newSVpvn(i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.17, i64 0, i64 0), i64 0)
  store %struct.sv* %call70, %struct.sv** %transv, align 8
  br label %while.cond

while.cond:                                       ; preds = %if.end98, %if.then67
  %64 = load i8*, i8** %t, align 8
  %65 = load i8*, i8** %tend, align 8
  %cmp71 = icmp ult i8* %64, %65
  br i1 %cmp71, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %66 = load i8*, i8** %t, align 8
  %67 = load i8*, i8** %tend, align 8
  %68 = load i8*, i8** %t, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %67 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %68 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %69 = load i32, i32* %flags, align 4
  %call73 = call i64 @Perl_utf8n_to_uvchr(i8* %66, i64 %sub.ptr.sub, i64* %ulen, i32 %69)
  %70 = load i64*, i64** %cp, align 8
  %71 = load i32, i32* %i, align 4
  %mul74 = mul nsw i32 2, %71
  %idxprom = sext i32 %mul74 to i64
  %arrayidx = getelementptr inbounds i64, i64* %70, i64 %idxprom
  store i64 %call73, i64* %arrayidx, align 8
  %72 = load i64, i64* %ulen, align 8
  %73 = load i8*, i8** %t, align 8
  %add.ptr75 = getelementptr inbounds i8, i8* %73, i64 %72
  store i8* %add.ptr75, i8** %t, align 8
  %74 = load i8*, i8** %t, align 8
  %75 = load i8*, i8** %tend, align 8
  %cmp76 = icmp ult i8* %74, %75
  br i1 %cmp76, label %land.lhs.true78, label %if.else

land.lhs.true78:                                  ; preds = %while.body
  %76 = load i8*, i8** %t, align 8
  %77 = load i8, i8* %76, align 1
  %conv79 = zext i8 %77 to i32
  %cmp80 = icmp eq i32 %conv79, 193
  br i1 %cmp80, label %if.then82, label %if.else

if.then82:                                        ; preds = %land.lhs.true78
  %78 = load i8*, i8** %t, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %78, i32 1
  store i8* %incdec.ptr, i8** %t, align 8
  %79 = load i8*, i8** %t, align 8
  %80 = load i8*, i8** %tend, align 8
  %81 = load i8*, i8** %t, align 8
  %sub.ptr.lhs.cast83 = ptrtoint i8* %80 to i64
  %sub.ptr.rhs.cast84 = ptrtoint i8* %81 to i64
  %sub.ptr.sub85 = sub i64 %sub.ptr.lhs.cast83, %sub.ptr.rhs.cast84
  %82 = load i32, i32* %flags, align 4
  %call86 = call i64 @Perl_utf8n_to_uvchr(i8* %79, i64 %sub.ptr.sub85, i64* %ulen, i32 %82)
  %83 = load i64*, i64** %cp, align 8
  %84 = load i32, i32* %i, align 4
  %mul87 = mul nsw i32 2, %84
  %add = add nsw i32 %mul87, 1
  %idxprom88 = sext i32 %add to i64
  %arrayidx89 = getelementptr inbounds i64, i64* %83, i64 %idxprom88
  store i64 %call86, i64* %arrayidx89, align 8
  %85 = load i64, i64* %ulen, align 8
  %86 = load i8*, i8** %t, align 8
  %add.ptr90 = getelementptr inbounds i8, i8* %86, i64 %85
  store i8* %add.ptr90, i8** %t, align 8
  br label %if.end98

if.else:                                          ; preds = %land.lhs.true78, %while.body
  %87 = load i64*, i64** %cp, align 8
  %88 = load i32, i32* %i, align 4
  %mul91 = mul nsw i32 2, %88
  %idxprom92 = sext i32 %mul91 to i64
  %arrayidx93 = getelementptr inbounds i64, i64* %87, i64 %idxprom92
  %89 = load i64, i64* %arrayidx93, align 8
  %90 = load i64*, i64** %cp, align 8
  %91 = load i32, i32* %i, align 4
  %mul94 = mul nsw i32 2, %91
  %add95 = add nsw i32 %mul94, 1
  %idxprom96 = sext i32 %add95 to i64
  %arrayidx97 = getelementptr inbounds i64, i64* %90, i64 %idxprom96
  store i64 %89, i64* %arrayidx97, align 8
  br label %if.end98

if.end98:                                         ; preds = %if.else, %if.then82
  %92 = load i32, i32* %i, align 4
  %inc = add nsw i32 %92, 1
  store i32 %inc, i32* %i, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %93 = load i64*, i64** %cp, align 8
  %94 = bitcast i64* %93 to i8*
  %95 = load i32, i32* %i, align 4
  %conv99 = sext i32 %95 to i64
  call void @qsort(i8* %94, i64 %conv99, i64 16, i32 (i8*, i8*)* @uvcompare)
  store i32 0, i32* %j, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %while.end
  %96 = load i32, i32* %j, align 4
  %97 = load i32, i32* %i, align 4
  %cmp100 = icmp slt i32 %96, %97
  br i1 %cmp100, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %98 = load i64*, i64** %cp, align 8
  %99 = load i32, i32* %j, align 4
  %mul102 = mul nsw i32 2, %99
  %idxprom103 = sext i32 %mul102 to i64
  %arrayidx104 = getelementptr inbounds i64, i64* %98, i64 %idxprom103
  %100 = load i64, i64* %arrayidx104, align 8
  store i64 %100, i64* %val, align 8
  %101 = load i64, i64* %val, align 8
  %102 = load i64, i64* %nextmin, align 8
  %sub = sub i64 %101, %102
  store i64 %sub, i64* %diff, align 8
  %103 = load i64, i64* %diff, align 8
  %cmp105 = icmp sgt i64 %103, 0
  br i1 %cmp105, label %if.then107, label %if.end126

if.then107:                                       ; preds = %for.body
  %arraydecay = getelementptr inbounds [14 x i8], [14 x i8]* %tmpbuf, i64 0, i64 0
  %104 = load i64, i64* %nextmin, align 8
  %call108 = call i8* @Perl_uvoffuni_to_utf8_flags(i8* %arraydecay, i64 %104, i64 0)
  store i8* %call108, i8** %t, align 8
  %105 = load %struct.sv*, %struct.sv** %transv, align 8
  %arraydecay109 = getelementptr inbounds [14 x i8], [14 x i8]* %tmpbuf, i64 0, i64 0
  %106 = load i8*, i8** %t, align 8
  %arraydecay110 = getelementptr inbounds [14 x i8], [14 x i8]* %tmpbuf, i64 0, i64 0
  %sub.ptr.lhs.cast111 = ptrtoint i8* %106 to i64
  %sub.ptr.rhs.cast112 = ptrtoint i8* %arraydecay110 to i64
  %sub.ptr.sub113 = sub i64 %sub.ptr.lhs.cast111, %sub.ptr.rhs.cast112
  call void @Perl_sv_catpvn_flags(%struct.sv* %105, i8* %arraydecay109, i64 %sub.ptr.sub113, i32 2)
  %107 = load i64, i64* %diff, align 8
  %cmp114 = icmp sgt i64 %107, 1
  br i1 %cmp114, label %if.then116, label %if.end125

if.then116:                                       ; preds = %if.then107
  store i8 -63, i8* %range_mark, align 1
  %arraydecay117 = getelementptr inbounds [14 x i8], [14 x i8]* %tmpbuf, i64 0, i64 0
  %108 = load i64, i64* %val, align 8
  %sub118 = sub i64 %108, 1
  %call119 = call i8* @Perl_uvoffuni_to_utf8_flags(i8* %arraydecay117, i64 %sub118, i64 0)
  store i8* %call119, i8** %t, align 8
  %109 = load %struct.sv*, %struct.sv** %transv, align 8
  call void @Perl_sv_catpvn_flags(%struct.sv* %109, i8* %range_mark, i64 1, i32 2)
  %110 = load %struct.sv*, %struct.sv** %transv, align 8
  %arraydecay120 = getelementptr inbounds [14 x i8], [14 x i8]* %tmpbuf, i64 0, i64 0
  %111 = load i8*, i8** %t, align 8
  %arraydecay121 = getelementptr inbounds [14 x i8], [14 x i8]* %tmpbuf, i64 0, i64 0
  %sub.ptr.lhs.cast122 = ptrtoint i8* %111 to i64
  %sub.ptr.rhs.cast123 = ptrtoint i8* %arraydecay121 to i64
  %sub.ptr.sub124 = sub i64 %sub.ptr.lhs.cast122, %sub.ptr.rhs.cast123
  call void @Perl_sv_catpvn_flags(%struct.sv* %110, i8* %arraydecay120, i64 %sub.ptr.sub124, i32 2)
  br label %if.end125

if.end125:                                        ; preds = %if.then116, %if.then107
  br label %if.end126

if.end126:                                        ; preds = %if.end125, %for.body
  %112 = load i64*, i64** %cp, align 8
  %113 = load i32, i32* %j, align 4
  %mul127 = mul nsw i32 2, %113
  %add128 = add nsw i32 %mul127, 1
  %idxprom129 = sext i32 %add128 to i64
  %arrayidx130 = getelementptr inbounds i64, i64* %112, i64 %idxprom129
  %114 = load i64, i64* %arrayidx130, align 8
  store i64 %114, i64* %val, align 8
  %115 = load i64, i64* %val, align 8
  %116 = load i64, i64* %nextmin, align 8
  %cmp131 = icmp uge i64 %115, %116
  br i1 %cmp131, label %if.then133, label %if.end135

if.then133:                                       ; preds = %if.end126
  %117 = load i64, i64* %val, align 8
  %add134 = add i64 %117, 1
  store i64 %add134, i64* %nextmin, align 8
  br label %if.end135

if.end135:                                        ; preds = %if.then133, %if.end126
  br label %for.inc

for.inc:                                          ; preds = %if.end135
  %118 = load i32, i32* %j, align 4
  %inc136 = add nsw i32 %118, 1
  store i32 %inc136, i32* %j, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %arraydecay137 = getelementptr inbounds [14 x i8], [14 x i8]* %tmpbuf, i64 0, i64 0
  %119 = load i64, i64* %nextmin, align 8
  %call138 = call i8* @Perl_uvoffuni_to_utf8_flags(i8* %arraydecay137, i64 %119, i64 0)
  store i8* %call138, i8** %t, align 8
  %120 = load %struct.sv*, %struct.sv** %transv, align 8
  %arraydecay139 = getelementptr inbounds [14 x i8], [14 x i8]* %tmpbuf, i64 0, i64 0
  %121 = load i8*, i8** %t, align 8
  %arraydecay140 = getelementptr inbounds [14 x i8], [14 x i8]* %tmpbuf, i64 0, i64 0
  %sub.ptr.lhs.cast141 = ptrtoint i8* %121 to i64
  %sub.ptr.rhs.cast142 = ptrtoint i8* %arraydecay140 to i64
  %sub.ptr.sub143 = sub i64 %sub.ptr.lhs.cast141, %sub.ptr.rhs.cast142
  call void @Perl_sv_catpvn_flags(%struct.sv* %120, i8* %arraydecay139, i64 %sub.ptr.sub143, i32 2)
  store i8 -63, i8* %range_mark144, align 1
  %122 = load %struct.sv*, %struct.sv** %transv, align 8
  call void @Perl_sv_catpvn_flags(%struct.sv* %122, i8* %range_mark144, i64 1, i32 2)
  %arraydecay145 = getelementptr inbounds [14 x i8], [14 x i8]* %tmpbuf, i64 0, i64 0
  %call146 = call i8* @Perl_uvoffuni_to_utf8_flags(i8* %arraydecay145, i64 2147483647, i64 0)
  store i8* %call146, i8** %t, align 8
  %123 = load %struct.sv*, %struct.sv** %transv, align 8
  %arraydecay147 = getelementptr inbounds [14 x i8], [14 x i8]* %tmpbuf, i64 0, i64 0
  %124 = load i8*, i8** %t, align 8
  %arraydecay148 = getelementptr inbounds [14 x i8], [14 x i8]* %tmpbuf, i64 0, i64 0
  %sub.ptr.lhs.cast149 = ptrtoint i8* %124 to i64
  %sub.ptr.rhs.cast150 = ptrtoint i8* %arraydecay148 to i64
  %sub.ptr.sub151 = sub i64 %sub.ptr.lhs.cast149, %sub.ptr.rhs.cast150
  call void @Perl_sv_catpvn_flags(%struct.sv* %123, i8* %arraydecay147, i64 %sub.ptr.sub151, i32 2)
  %125 = load %struct.sv*, %struct.sv** %transv, align 8
  %sv_u152 = getelementptr inbounds %struct.sv, %struct.sv* %125, i32 0, i32 3
  %svu_pv153 = bitcast %union.anon* %sv_u152 to i8**
  %126 = load i8*, i8** %svu_pv153, align 8
  %add.ptr154 = getelementptr inbounds i8, i8* %126, i64 0
  store i8* %add.ptr154, i8** %t, align 8
  %127 = load %struct.sv*, %struct.sv** %transv, align 8
  %sv_any155 = getelementptr inbounds %struct.sv, %struct.sv* %127, i32 0, i32 0
  %128 = load i8*, i8** %sv_any155, align 8
  %129 = bitcast i8* %128 to %struct.xpv*
  %xpv_cur156 = getelementptr inbounds %struct.xpv, %struct.xpv* %129, i32 0, i32 2
  %130 = load i64, i64* %xpv_cur156, align 8
  store i64 %130, i64* %tlen, align 8
  %131 = load i8*, i8** %t, align 8
  %132 = load i64, i64* %tlen, align 8
  %add.ptr157 = getelementptr inbounds i8, i8* %131, i64 %132
  store i8* %add.ptr157, i8** %tend, align 8
  %133 = load i64*, i64** %cp, align 8
  %134 = bitcast i64* %133 to i8*
  call void @Perl_safesysfree(i8* %134)
  br label %if.end164

if.else158:                                       ; preds = %if.end65
  %135 = load i64, i64* %rlen, align 8
  %tobool159 = icmp ne i64 %135, 0
  br i1 %tobool159, label %if.end163, label %land.lhs.true160

land.lhs.true160:                                 ; preds = %if.else158
  %136 = load i32, i32* %del, align 4
  %tobool161 = icmp ne i32 %136, 0
  br i1 %tobool161, label %if.end163, label %if.then162

if.then162:                                       ; preds = %land.lhs.true160
  %137 = load i8*, i8** %t, align 8
  store i8* %137, i8** %r, align 8
  %138 = load i64, i64* %tlen, align 8
  store i64 %138, i64* %rlen, align 8
  %139 = load i8*, i8** %tend, align 8
  store i8* %139, i8** %rend, align 8
  br label %if.end163

if.end163:                                        ; preds = %if.then162, %land.lhs.true160, %if.else158
  br label %if.end164

if.end164:                                        ; preds = %if.end163, %for.end
  %140 = load i32, i32* %squash, align 4
  %tobool165 = icmp ne i32 %140, 0
  br i1 %tobool165, label %if.end184, label %if.then166

if.then166:                                       ; preds = %if.end164
  %141 = load i64, i64* %rlen, align 8
  %tobool167 = icmp ne i64 %141, 0
  br i1 %tobool167, label %lor.lhs.false, label %land.lhs.true168

land.lhs.true168:                                 ; preds = %if.then166
  %142 = load i32, i32* %del, align 4
  %tobool169 = icmp ne i32 %142, 0
  br i1 %tobool169, label %lor.lhs.false, label %if.then178

lor.lhs.false:                                    ; preds = %land.lhs.true168, %if.then166
  %143 = load i8*, i8** %t, align 8
  %144 = load i8*, i8** %r, align 8
  %cmp170 = icmp eq i8* %143, %144
  br i1 %cmp170, label %if.then178, label %lor.lhs.false172

lor.lhs.false172:                                 ; preds = %lor.lhs.false
  %145 = load i64, i64* %tlen, align 8
  %146 = load i64, i64* %rlen, align 8
  %cmp173 = icmp eq i64 %145, %146
  br i1 %cmp173, label %land.lhs.true175, label %if.end183

land.lhs.true175:                                 ; preds = %lor.lhs.false172
  %147 = load i8*, i8** %t, align 8
  %148 = load i8*, i8** %r, align 8
  %149 = load i64, i64* %tlen, align 8
  %call176 = call i32 @memcmp(i8* %147, i8* %148, i64 %149) #7
  %tobool177 = icmp ne i32 %call176, 0
  br i1 %tobool177, label %if.end183, label %if.then178

if.then178:                                       ; preds = %land.lhs.true175, %lor.lhs.false, %land.lhs.true168
  %150 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_private179 = getelementptr inbounds %struct.op, %struct.op* %150, i32 0, i32 6
  %151 = load i8, i8* %op_private179, align 1
  %conv180 = zext i8 %151 to i32
  %or181 = or i32 %conv180, 4
  %conv182 = trunc i32 %or181 to i8
  store i8 %conv182, i8* %op_private179, align 1
  br label %if.end183

if.end183:                                        ; preds = %if.then178, %land.lhs.true175, %lor.lhs.false172
  br label %if.end184

if.end184:                                        ; preds = %if.end183, %if.end164
  br label %while.cond185

while.cond185:                                    ; preds = %if.end385, %if.end184
  %152 = load i8*, i8** %t, align 8
  %153 = load i8*, i8** %tend, align 8
  %cmp186 = icmp ult i8* %152, %153
  br i1 %cmp186, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %while.cond185
  %154 = load i64, i64* %tfirst, align 8
  %155 = load i64, i64* %tlast, align 8
  %cmp188 = icmp ule i64 %154, %155
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %while.cond185
  %156 = phi i1 [ true, %while.cond185 ], [ %cmp188, %lor.rhs ]
  br i1 %156, label %while.body190, label %while.end388

while.body190:                                    ; preds = %lor.end
  %157 = load i64, i64* %tfirst, align 8
  %158 = load i64, i64* %tlast, align 8
  %cmp191 = icmp ugt i64 %157, %158
  br i1 %cmp191, label %if.then193, label %if.end218

if.then193:                                       ; preds = %while.body190
  %159 = load i8*, i8** %t, align 8
  %160 = load i8*, i8** %tend, align 8
  %161 = load i8*, i8** %t, align 8
  %sub.ptr.lhs.cast194 = ptrtoint i8* %160 to i64
  %sub.ptr.rhs.cast195 = ptrtoint i8* %161 to i64
  %sub.ptr.sub196 = sub i64 %sub.ptr.lhs.cast194, %sub.ptr.rhs.cast195
  %162 = load i32, i32* %flags, align 4
  %call197 = call i64 @Perl_utf8n_to_uvchr(i8* %159, i64 %sub.ptr.sub196, i64* %ulen, i32 %162)
  %conv198 = trunc i64 %call197 to i32
  %conv199 = sext i32 %conv198 to i64
  store i64 %conv199, i64* %tfirst, align 8
  %163 = load i64, i64* %ulen, align 8
  %164 = load i8*, i8** %t, align 8
  %add.ptr200 = getelementptr inbounds i8, i8* %164, i64 %163
  store i8* %add.ptr200, i8** %t, align 8
  %165 = load i8*, i8** %t, align 8
  %166 = load i8*, i8** %tend, align 8
  %cmp201 = icmp ult i8* %165, %166
  br i1 %cmp201, label %land.lhs.true203, label %if.else216

land.lhs.true203:                                 ; preds = %if.then193
  %167 = load i8*, i8** %t, align 8
  %168 = load i8, i8* %167, align 1
  %conv204 = zext i8 %168 to i32
  %cmp205 = icmp eq i32 %conv204, 193
  br i1 %cmp205, label %if.then207, label %if.else216

if.then207:                                       ; preds = %land.lhs.true203
  %169 = load i8*, i8** %t, align 8
  %incdec.ptr208 = getelementptr inbounds i8, i8* %169, i32 1
  store i8* %incdec.ptr208, i8** %t, align 8
  %170 = load i8*, i8** %t, align 8
  %171 = load i8*, i8** %tend, align 8
  %172 = load i8*, i8** %t, align 8
  %sub.ptr.lhs.cast209 = ptrtoint i8* %171 to i64
  %sub.ptr.rhs.cast210 = ptrtoint i8* %172 to i64
  %sub.ptr.sub211 = sub i64 %sub.ptr.lhs.cast209, %sub.ptr.rhs.cast210
  %173 = load i32, i32* %flags, align 4
  %call212 = call i64 @Perl_utf8n_to_uvchr(i8* %170, i64 %sub.ptr.sub211, i64* %ulen, i32 %173)
  %conv213 = trunc i64 %call212 to i32
  %conv214 = sext i32 %conv213 to i64
  store i64 %conv214, i64* %tlast, align 8
  %174 = load i64, i64* %ulen, align 8
  %175 = load i8*, i8** %t, align 8
  %add.ptr215 = getelementptr inbounds i8, i8* %175, i64 %174
  store i8* %add.ptr215, i8** %t, align 8
  br label %if.end217

if.else216:                                       ; preds = %land.lhs.true203, %if.then193
  %176 = load i64, i64* %tfirst, align 8
  store i64 %176, i64* %tlast, align 8
  br label %if.end217

if.end217:                                        ; preds = %if.else216, %if.then207
  br label %if.end218

if.end218:                                        ; preds = %if.end217, %while.body190
  %177 = load i64, i64* %rfirst, align 8
  %178 = load i64, i64* %rlast, align 8
  %cmp219 = icmp ugt i64 %177, %178
  br i1 %cmp219, label %if.then221, label %if.end256

if.then221:                                       ; preds = %if.end218
  %179 = load i8*, i8** %r, align 8
  %180 = load i8*, i8** %rend, align 8
  %cmp222 = icmp ult i8* %179, %180
  br i1 %cmp222, label %if.then224, label %if.else249

if.then224:                                       ; preds = %if.then221
  %181 = load i8*, i8** %r, align 8
  %182 = load i8*, i8** %rend, align 8
  %183 = load i8*, i8** %r, align 8
  %sub.ptr.lhs.cast225 = ptrtoint i8* %182 to i64
  %sub.ptr.rhs.cast226 = ptrtoint i8* %183 to i64
  %sub.ptr.sub227 = sub i64 %sub.ptr.lhs.cast225, %sub.ptr.rhs.cast226
  %184 = load i32, i32* %flags, align 4
  %call228 = call i64 @Perl_utf8n_to_uvchr(i8* %181, i64 %sub.ptr.sub227, i64* %ulen, i32 %184)
  %conv229 = trunc i64 %call228 to i32
  %conv230 = sext i32 %conv229 to i64
  store i64 %conv230, i64* %rfirst, align 8
  %185 = load i64, i64* %ulen, align 8
  %186 = load i8*, i8** %r, align 8
  %add.ptr231 = getelementptr inbounds i8, i8* %186, i64 %185
  store i8* %add.ptr231, i8** %r, align 8
  %187 = load i8*, i8** %r, align 8
  %188 = load i8*, i8** %rend, align 8
  %cmp232 = icmp ult i8* %187, %188
  br i1 %cmp232, label %land.lhs.true234, label %if.else247

land.lhs.true234:                                 ; preds = %if.then224
  %189 = load i8*, i8** %r, align 8
  %190 = load i8, i8* %189, align 1
  %conv235 = zext i8 %190 to i32
  %cmp236 = icmp eq i32 %conv235, 193
  br i1 %cmp236, label %if.then238, label %if.else247

if.then238:                                       ; preds = %land.lhs.true234
  %191 = load i8*, i8** %r, align 8
  %incdec.ptr239 = getelementptr inbounds i8, i8* %191, i32 1
  store i8* %incdec.ptr239, i8** %r, align 8
  %192 = load i8*, i8** %r, align 8
  %193 = load i8*, i8** %rend, align 8
  %194 = load i8*, i8** %r, align 8
  %sub.ptr.lhs.cast240 = ptrtoint i8* %193 to i64
  %sub.ptr.rhs.cast241 = ptrtoint i8* %194 to i64
  %sub.ptr.sub242 = sub i64 %sub.ptr.lhs.cast240, %sub.ptr.rhs.cast241
  %195 = load i32, i32* %flags, align 4
  %call243 = call i64 @Perl_utf8n_to_uvchr(i8* %192, i64 %sub.ptr.sub242, i64* %ulen, i32 %195)
  %conv244 = trunc i64 %call243 to i32
  %conv245 = sext i32 %conv244 to i64
  store i64 %conv245, i64* %rlast, align 8
  %196 = load i64, i64* %ulen, align 8
  %197 = load i8*, i8** %r, align 8
  %add.ptr246 = getelementptr inbounds i8, i8* %197, i64 %196
  store i8* %add.ptr246, i8** %r, align 8
  br label %if.end248

if.else247:                                       ; preds = %land.lhs.true234, %if.then224
  %198 = load i64, i64* %rfirst, align 8
  store i64 %198, i64* %rlast, align 8
  br label %if.end248

if.end248:                                        ; preds = %if.else247, %if.then238
  br label %if.end255

if.else249:                                       ; preds = %if.then221
  %199 = load i32, i32* %havefinal, align 4
  %inc250 = add nsw i32 %199, 1
  store i32 %inc250, i32* %havefinal, align 4
  %tobool251 = icmp ne i32 %199, 0
  br i1 %tobool251, label %if.end254, label %if.then252

if.then252:                                       ; preds = %if.else249
  %200 = load i64, i64* %rlast, align 8
  %conv253 = trunc i64 %200 to i32
  store i32 %conv253, i32* %final, align 4
  br label %if.end254

if.end254:                                        ; preds = %if.then252, %if.else249
  store i64 4294967295, i64* %rlast, align 8
  store i64 4294967295, i64* %rfirst, align 8
  br label %if.end255

if.end255:                                        ; preds = %if.end254, %if.end248
  br label %if.end256

if.end256:                                        ; preds = %if.end255, %if.end218
  %201 = load i64, i64* %tlast, align 8
  %202 = load i64, i64* %tfirst, align 8
  %sub257 = sub i64 %201, %202
  store i64 %sub257, i64* %tdiff, align 8
  %203 = load i64, i64* %rlast, align 8
  %204 = load i64, i64* %rfirst, align 8
  %sub258 = sub i64 %203, %204
  store i64 %sub258, i64* %rdiff, align 8
  %205 = load i64, i64* %tdiff, align 8
  %add259 = add nsw i64 %205, 1
  %206 = load i64, i64* %tcount, align 8
  %add260 = add i64 %206, %add259
  store i64 %add260, i64* %tcount, align 8
  %207 = load i64, i64* %rdiff, align 8
  %add261 = add nsw i64 %207, 1
  %208 = load i64, i64* %rcount, align 8
  %add262 = add i64 %208, %add261
  store i64 %add262, i64* %rcount, align 8
  %209 = load i64, i64* %tdiff, align 8
  %210 = load i64, i64* %rdiff, align 8
  %cmp263 = icmp sle i64 %209, %210
  br i1 %cmp263, label %if.then265, label %if.else266

if.then265:                                       ; preds = %if.end256
  %211 = load i64, i64* %tdiff, align 8
  store i64 %211, i64* %diff, align 8
  br label %if.end267

if.else266:                                       ; preds = %if.end256
  %212 = load i64, i64* %rdiff, align 8
  store i64 %212, i64* %diff, align 8
  br label %if.end267

if.end267:                                        ; preds = %if.else266, %if.then265
  %213 = load i64, i64* %rfirst, align 8
  %cmp268 = icmp eq i64 %213, 4294967295
  br i1 %cmp268, label %if.then270, label %if.else276

if.then270:                                       ; preds = %if.end267
  %214 = load i64, i64* %tdiff, align 8
  store i64 %214, i64* %diff, align 8
  %215 = load i64, i64* %diff, align 8
  %cmp271 = icmp sgt i64 %215, 0
  br i1 %cmp271, label %if.then273, label %if.else274

if.then273:                                       ; preds = %if.then270
  %216 = load %struct.sv*, %struct.sv** %listsv, align 8
  %217 = load i64, i64* %tfirst, align 8
  %218 = load i64, i64* %tlast, align 8
  call void (%struct.sv*, i8*, ...) @Perl_sv_catpvf(%struct.sv* %216, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.177, i64 0, i64 0), i64 %217, i64 %218)
  br label %if.end275

if.else274:                                       ; preds = %if.then270
  %219 = load %struct.sv*, %struct.sv** %listsv, align 8
  %220 = load i64, i64* %tfirst, align 8
  call void (%struct.sv*, i8*, ...) @Perl_sv_catpvf(%struct.sv* %219, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.178, i64 0, i64 0), i64 %220)
  br label %if.end275

if.end275:                                        ; preds = %if.else274, %if.then273
  br label %if.end385

if.else276:                                       ; preds = %if.end267
  %221 = load i64, i64* %diff, align 8
  %cmp277 = icmp sgt i64 %221, 0
  br i1 %cmp277, label %if.then279, label %if.else281

if.then279:                                       ; preds = %if.else276
  %222 = load %struct.sv*, %struct.sv** %listsv, align 8
  %223 = load i64, i64* %tfirst, align 8
  %224 = load i64, i64* %tfirst, align 8
  %225 = load i64, i64* %diff, align 8
  %add280 = add i64 %224, %225
  %226 = load i64, i64* %rfirst, align 8
  call void (%struct.sv*, i8*, ...) @Perl_sv_catpvf(%struct.sv* %222, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.179, i64 0, i64 0), i64 %223, i64 %add280, i64 %226)
  br label %if.end282

if.else281:                                       ; preds = %if.else276
  %227 = load %struct.sv*, %struct.sv** %listsv, align 8
  %228 = load i64, i64* %tfirst, align 8
  %229 = load i64, i64* %rfirst, align 8
  call void (%struct.sv*, i8*, ...) @Perl_sv_catpvf(%struct.sv* %227, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.180, i64 0, i64 0), i64 %228, i64 %229)
  br label %if.end282

if.end282:                                        ; preds = %if.else281, %if.then279
  %230 = load i64, i64* %rfirst, align 8
  %231 = load i64, i64* %diff, align 8
  %add283 = add i64 %230, %231
  %232 = load i32, i32* %max, align 4
  %conv284 = zext i32 %232 to i64
  %cmp285 = icmp ugt i64 %add283, %conv284
  br i1 %cmp285, label %if.then287, label %if.end290

if.then287:                                       ; preds = %if.end282
  %233 = load i64, i64* %rfirst, align 8
  %234 = load i64, i64* %diff, align 8
  %add288 = add i64 %233, %234
  %conv289 = trunc i64 %add288 to i32
  store i32 %conv289, i32* %max, align 4
  br label %if.end290

if.end290:                                        ; preds = %if.then287, %if.end282
  %235 = load i32, i32* %grows, align 4
  %tobool291 = icmp ne i32 %235, 0
  br i1 %tobool291, label %if.end382, label %if.then292

if.then292:                                       ; preds = %if.end290
  %236 = load i64, i64* %tfirst, align 8
  %237 = load i64, i64* %rfirst, align 8
  %cmp293 = icmp ult i64 %236, %237
  br i1 %cmp293, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %if.then292
  %238 = load i64, i64* %tfirst, align 8
  %cmp295 = icmp ult i64 %238, 128
  br i1 %cmp295, label %cond.true297, label %cond.false298

cond.true297:                                     ; preds = %land.rhs
  br label %cond.end332

cond.false298:                                    ; preds = %land.rhs
  %239 = load i64, i64* %tfirst, align 8
  %cmp299 = icmp ult i64 %239, 2048
  br i1 %cmp299, label %cond.true301, label %cond.false302

cond.true301:                                     ; preds = %cond.false298
  br label %cond.end330

cond.false302:                                    ; preds = %cond.false298
  %240 = load i64, i64* %tfirst, align 8
  %cmp303 = icmp ult i64 %240, 65536
  br i1 %cmp303, label %cond.true305, label %cond.false306

cond.true305:                                     ; preds = %cond.false302
  br label %cond.end328

cond.false306:                                    ; preds = %cond.false302
  %241 = load i64, i64* %tfirst, align 8
  %cmp307 = icmp ult i64 %241, 2097152
  br i1 %cmp307, label %cond.true309, label %cond.false310

cond.true309:                                     ; preds = %cond.false306
  br label %cond.end326

cond.false310:                                    ; preds = %cond.false306
  %242 = load i64, i64* %tfirst, align 8
  %cmp311 = icmp ult i64 %242, 67108864
  br i1 %cmp311, label %cond.true313, label %cond.false314

cond.true313:                                     ; preds = %cond.false310
  br label %cond.end324

cond.false314:                                    ; preds = %cond.false310
  %243 = load i64, i64* %tfirst, align 8
  %cmp315 = icmp ult i64 %243, 2147483648
  br i1 %cmp315, label %cond.true317, label %cond.false318

cond.true317:                                     ; preds = %cond.false314
  br label %cond.end322

cond.false318:                                    ; preds = %cond.false314
  %244 = load i64, i64* %tfirst, align 8
  %cmp319 = icmp ult i64 %244, 68719476736
  %245 = zext i1 %cmp319 to i64
  %cond321 = select i1 %cmp319, i32 7, i32 13
  br label %cond.end322

cond.end322:                                      ; preds = %cond.false318, %cond.true317
  %cond323 = phi i32 [ 6, %cond.true317 ], [ %cond321, %cond.false318 ]
  br label %cond.end324

cond.end324:                                      ; preds = %cond.end322, %cond.true313
  %cond325 = phi i32 [ 5, %cond.true313 ], [ %cond323, %cond.end322 ]
  br label %cond.end326

cond.end326:                                      ; preds = %cond.end324, %cond.true309
  %cond327 = phi i32 [ 4, %cond.true309 ], [ %cond325, %cond.end324 ]
  br label %cond.end328

cond.end328:                                      ; preds = %cond.end326, %cond.true305
  %cond329 = phi i32 [ 3, %cond.true305 ], [ %cond327, %cond.end326 ]
  br label %cond.end330

cond.end330:                                      ; preds = %cond.end328, %cond.true301
  %cond331 = phi i32 [ 2, %cond.true301 ], [ %cond329, %cond.end328 ]
  br label %cond.end332

cond.end332:                                      ; preds = %cond.end330, %cond.true297
  %cond333 = phi i32 [ 1, %cond.true297 ], [ %cond331, %cond.end330 ]
  %246 = load i64, i64* %rfirst, align 8
  %247 = load i64, i64* %diff, align 8
  %add334 = add i64 %246, %247
  %cmp335 = icmp ult i64 %add334, 128
  br i1 %cmp335, label %cond.true337, label %cond.false338

cond.true337:                                     ; preds = %cond.end332
  br label %cond.end378

cond.false338:                                    ; preds = %cond.end332
  %248 = load i64, i64* %rfirst, align 8
  %249 = load i64, i64* %diff, align 8
  %add339 = add i64 %248, %249
  %cmp340 = icmp ult i64 %add339, 2048
  br i1 %cmp340, label %cond.true342, label %cond.false343

cond.true342:                                     ; preds = %cond.false338
  br label %cond.end376

cond.false343:                                    ; preds = %cond.false338
  %250 = load i64, i64* %rfirst, align 8
  %251 = load i64, i64* %diff, align 8
  %add344 = add i64 %250, %251
  %cmp345 = icmp ult i64 %add344, 65536
  br i1 %cmp345, label %cond.true347, label %cond.false348

cond.true347:                                     ; preds = %cond.false343
  br label %cond.end374

cond.false348:                                    ; preds = %cond.false343
  %252 = load i64, i64* %rfirst, align 8
  %253 = load i64, i64* %diff, align 8
  %add349 = add i64 %252, %253
  %cmp350 = icmp ult i64 %add349, 2097152
  br i1 %cmp350, label %cond.true352, label %cond.false353

cond.true352:                                     ; preds = %cond.false348
  br label %cond.end372

cond.false353:                                    ; preds = %cond.false348
  %254 = load i64, i64* %rfirst, align 8
  %255 = load i64, i64* %diff, align 8
  %add354 = add i64 %254, %255
  %cmp355 = icmp ult i64 %add354, 67108864
  br i1 %cmp355, label %cond.true357, label %cond.false358

cond.true357:                                     ; preds = %cond.false353
  br label %cond.end370

cond.false358:                                    ; preds = %cond.false353
  %256 = load i64, i64* %rfirst, align 8
  %257 = load i64, i64* %diff, align 8
  %add359 = add i64 %256, %257
  %cmp360 = icmp ult i64 %add359, 2147483648
  br i1 %cmp360, label %cond.true362, label %cond.false363

cond.true362:                                     ; preds = %cond.false358
  br label %cond.end368

cond.false363:                                    ; preds = %cond.false358
  %258 = load i64, i64* %rfirst, align 8
  %259 = load i64, i64* %diff, align 8
  %add364 = add i64 %258, %259
  %cmp365 = icmp ult i64 %add364, 68719476736
  %260 = zext i1 %cmp365 to i64
  %cond367 = select i1 %cmp365, i32 7, i32 13
  br label %cond.end368

cond.end368:                                      ; preds = %cond.false363, %cond.true362
  %cond369 = phi i32 [ 6, %cond.true362 ], [ %cond367, %cond.false363 ]
  br label %cond.end370

cond.end370:                                      ; preds = %cond.end368, %cond.true357
  %cond371 = phi i32 [ 5, %cond.true357 ], [ %cond369, %cond.end368 ]
  br label %cond.end372

cond.end372:                                      ; preds = %cond.end370, %cond.true352
  %cond373 = phi i32 [ 4, %cond.true352 ], [ %cond371, %cond.end370 ]
  br label %cond.end374

cond.end374:                                      ; preds = %cond.end372, %cond.true347
  %cond375 = phi i32 [ 3, %cond.true347 ], [ %cond373, %cond.end372 ]
  br label %cond.end376

cond.end376:                                      ; preds = %cond.end374, %cond.true342
  %cond377 = phi i32 [ 2, %cond.true342 ], [ %cond375, %cond.end374 ]
  br label %cond.end378

cond.end378:                                      ; preds = %cond.end376, %cond.true337
  %cond379 = phi i32 [ 1, %cond.true337 ], [ %cond377, %cond.end376 ]
  %cmp380 = icmp slt i32 %cond333, %cond379
  br label %land.end

land.end:                                         ; preds = %cond.end378, %if.then292
  %261 = phi i1 [ false, %if.then292 ], [ %cmp380, %cond.end378 ]
  %land.ext = zext i1 %261 to i32
  store i32 %land.ext, i32* %grows, align 4
  br label %if.end382

if.end382:                                        ; preds = %land.end, %if.end290
  %262 = load i64, i64* %diff, align 8
  %add383 = add nsw i64 %262, 1
  %263 = load i64, i64* %rfirst, align 8
  %add384 = add i64 %263, %add383
  store i64 %add384, i64* %rfirst, align 8
  br label %if.end385

if.end385:                                        ; preds = %if.end382, %if.end275
  %264 = load i64, i64* %diff, align 8
  %add386 = add nsw i64 %264, 1
  %265 = load i64, i64* %tfirst, align 8
  %add387 = add i64 %265, %add386
  store i64 %add387, i64* %tfirst, align 8
  br label %while.cond185

while.end388:                                     ; preds = %lor.end
  %266 = load i32, i32* %max, align 4
  %inc389 = add i32 %266, 1
  store i32 %inc389, i32* %max, align 4
  store i32 %inc389, i32* %none, align 4
  %267 = load i32, i32* %del, align 4
  %tobool390 = icmp ne i32 %267, 0
  br i1 %tobool390, label %if.then391, label %if.end393

if.then391:                                       ; preds = %while.end388
  %268 = load i32, i32* %max, align 4
  %inc392 = add i32 %268, 1
  store i32 %inc392, i32* %max, align 4
  store i32 %inc392, i32* %del, align 4
  br label %if.end393

if.end393:                                        ; preds = %if.then391, %while.end388
  %269 = load i32, i32* %max, align 4
  %cmp394 = icmp ugt i32 %269, 65535
  br i1 %cmp394, label %if.then396, label %if.else397

if.then396:                                       ; preds = %if.end393
  store i32 32, i32* %bits, align 4
  br label %if.end403

if.else397:                                       ; preds = %if.end393
  %270 = load i32, i32* %max, align 4
  %cmp398 = icmp ugt i32 %270, 255
  br i1 %cmp398, label %if.then400, label %if.else401

if.then400:                                       ; preds = %if.else397
  store i32 16, i32* %bits, align 4
  br label %if.end402

if.else401:                                       ; preds = %if.else397
  store i32 8, i32* %bits, align 4
  br label %if.end402

if.end402:                                        ; preds = %if.else401, %if.then400
  br label %if.end403

if.end403:                                        ; preds = %if.end402, %if.then396
  %271 = load %struct.sv*, %struct.sv** %listsv, align 8
  %272 = load i32, i32* %bits, align 4
  %273 = load i32, i32* %none, align 4
  %call404 = call %struct.sv* @Perl_swash_init(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.181, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.17, i64 0, i64 0), %struct.sv* %271, i32 %272, i32 %273)
  %274 = bitcast %struct.sv* %call404 to i8*
  %275 = bitcast i8* %274 to %struct.sv*
  store %struct.sv* %275, %struct.sv** %swash, align 8
  %276 = load %struct.sv*, %struct.sv** %swash, align 8
  %277 = load %struct.op*, %struct.op** %o.addr, align 8
  %278 = bitcast %struct.op* %277 to %struct.svop*
  %op_sv405 = getelementptr inbounds %struct.svop, %struct.svop* %278, i32 0, i32 7
  store %struct.sv* %276, %struct.sv** %op_sv405, align 8
  %279 = load %struct.sv*, %struct.sv** %listsv, align 8
  %280 = bitcast %struct.sv* %279 to i8*
  %281 = bitcast i8* %280 to %struct.sv*
  call void @S_SvREFCNT_dec(%struct.sv* %281)
  %282 = load %struct.sv*, %struct.sv** %transv, align 8
  %283 = bitcast %struct.sv* %282 to i8*
  %284 = bitcast i8* %283 to %struct.sv*
  call void @S_SvREFCNT_dec(%struct.sv* %284)
  %285 = load i32, i32* %del, align 4
  %tobool406 = icmp ne i32 %285, 0
  br i1 %tobool406, label %if.end416, label %land.lhs.true407

land.lhs.true407:                                 ; preds = %if.end403
  %286 = load i32, i32* %havefinal, align 4
  %tobool408 = icmp ne i32 %286, 0
  br i1 %tobool408, label %land.lhs.true409, label %if.end416

land.lhs.true409:                                 ; preds = %land.lhs.true407
  %287 = load i64, i64* %rlen, align 8
  %tobool410 = icmp ne i64 %287, 0
  br i1 %tobool410, label %if.then411, label %if.end416

if.then411:                                       ; preds = %land.lhs.true409
  %288 = load %struct.sv*, %struct.sv** %swash, align 8
  %sv_u412 = getelementptr inbounds %struct.sv, %struct.sv* %288, i32 0, i32 3
  %svu_rv = bitcast %union.anon* %sv_u412 to %struct.sv**
  %289 = load %struct.sv*, %struct.sv** %svu_rv, align 8
  %290 = bitcast %struct.sv* %289 to i8*
  %291 = bitcast i8* %290 to %struct.hv*
  %292 = load i32, i32* %final, align 4
  %conv413 = zext i32 %292 to i64
  %call414 = call %struct.sv* @Perl_newSVuv(i64 %conv413)
  %call415 = call i8* @Perl_hv_common_key_len(%struct.hv* %291, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.182, i64 0, i64 0), i32 5, i32 36, %struct.sv* %call414, i32 0)
  %293 = bitcast i8* %call415 to %struct.sv**
  br label %if.end416

if.end416:                                        ; preds = %if.then411, %land.lhs.true409, %land.lhs.true407, %if.end403
  %294 = load i8*, i8** %tsave, align 8
  call void @Perl_safesysfree(i8* %294)
  %295 = load i8*, i8** %rsave, align 8
  call void @Perl_safesysfree(i8* %295)
  %296 = load i64, i64* %tcount, align 8
  store i64 %296, i64* %tlen, align 8
  %297 = load i64, i64* %rcount, align 8
  store i64 %297, i64* %rlen, align 8
  %298 = load i8*, i8** %r, align 8
  %299 = load i8*, i8** %rend, align 8
  %cmp417 = icmp ult i8* %298, %299
  br i1 %cmp417, label %if.then419, label %if.else421

if.then419:                                       ; preds = %if.end416
  %300 = load i64, i64* %rlen, align 8
  %inc420 = add i64 %300, 1
  store i64 %inc420, i64* %rlen, align 8
  br label %if.end426

if.else421:                                       ; preds = %if.end416
  %301 = load i64, i64* %rlast, align 8
  %cmp422 = icmp eq i64 %301, 4294967295
  br i1 %cmp422, label %if.then424, label %if.end425

if.then424:                                       ; preds = %if.else421
  store i64 0, i64* %rlen, align 8
  br label %if.end425

if.end425:                                        ; preds = %if.then424, %if.else421
  br label %if.end426

if.end426:                                        ; preds = %if.end425, %if.then419
  br label %warnins

if.end427:                                        ; preds = %if.end36
  %302 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_private428 = getelementptr inbounds %struct.op, %struct.op* %302, i32 0, i32 6
  %303 = load i8, i8* %op_private428, align 1
  %conv429 = zext i8 %303 to i32
  %and430 = and i32 %conv429, 32
  %tobool431 = icmp ne i32 %and430, 0
  br i1 %tobool431, label %land.rhs432, label %land.end437

land.rhs432:                                      ; preds = %if.end427
  %304 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_private433 = getelementptr inbounds %struct.op, %struct.op* %304, i32 0, i32 6
  %305 = load i8, i8* %op_private433, align 1
  %conv434 = zext i8 %305 to i32
  %and435 = and i32 %conv434, 128
  %tobool436 = icmp ne i32 %and435, 0
  %lnot = xor i1 %tobool436, true
  br label %land.end437

land.end437:                                      ; preds = %land.rhs432, %if.end427
  %306 = phi i1 [ false, %if.end427 ], [ %lnot, %land.rhs432 ]
  %307 = zext i1 %306 to i64
  %cond439 = select i1 %306, i32 258, i32 256
  %conv440 = sext i32 %cond439 to i64
  %call441 = call noalias i8* @calloc(i64 %conv440, i64 2) #5
  %308 = bitcast i8* %call441 to i16*
  store i16* %308, i16** %tbl, align 8
  %309 = load i16*, i16** %tbl, align 8
  %310 = bitcast i16* %309 to i8*
  %311 = load %struct.op*, %struct.op** %o.addr, align 8
  %312 = bitcast %struct.op* %311 to %struct.pvop*
  %op_pv = getelementptr inbounds %struct.pvop, %struct.pvop* %312, i32 0, i32 7
  store i8* %310, i8** %op_pv, align 8
  %313 = load i32, i32* %complement, align 4
  %tobool442 = icmp ne i32 %313, 0
  br i1 %tobool442, label %if.then443, label %if.else558

if.then443:                                       ; preds = %land.end437
  store i32 0, i32* %i, align 4
  br label %for.cond444

for.cond444:                                      ; preds = %for.inc453, %if.then443
  %314 = load i32, i32* %i, align 4
  %315 = load i64, i64* %tlen, align 8
  %conv445 = trunc i64 %315 to i32
  %cmp446 = icmp slt i32 %314, %conv445
  br i1 %cmp446, label %for.body448, label %for.end455

for.body448:                                      ; preds = %for.cond444
  %316 = load i16*, i16** %tbl, align 8
  %317 = load i8*, i8** %t, align 8
  %318 = load i32, i32* %i, align 4
  %idxprom449 = sext i32 %318 to i64
  %arrayidx450 = getelementptr inbounds i8, i8* %317, i64 %idxprom449
  %319 = load i8, i8* %arrayidx450, align 1
  %idxprom451 = zext i8 %319 to i64
  %arrayidx452 = getelementptr inbounds i16, i16* %316, i64 %idxprom451
  store i16 -1, i16* %arrayidx452, align 2
  br label %for.inc453

for.inc453:                                       ; preds = %for.body448
  %320 = load i32, i32* %i, align 4
  %inc454 = add nsw i32 %320, 1
  store i32 %inc454, i32* %i, align 4
  br label %for.cond444

for.end455:                                       ; preds = %for.cond444
  store i32 0, i32* %i, align 4
  store i32 0, i32* %j, align 4
  br label %for.cond456

for.cond456:                                      ; preds = %for.inc506, %for.end455
  %321 = load i32, i32* %i, align 4
  %cmp457 = icmp slt i32 %321, 256
  br i1 %cmp457, label %for.body459, label %for.end508

for.body459:                                      ; preds = %for.cond456
  %322 = load i16*, i16** %tbl, align 8
  %323 = load i32, i32* %i, align 4
  %idxprom460 = sext i32 %323 to i64
  %arrayidx461 = getelementptr inbounds i16, i16* %322, i64 %idxprom460
  %324 = load i16, i16* %arrayidx461, align 2
  %tobool462 = icmp ne i16 %324, 0
  br i1 %tobool462, label %if.end505, label %if.then463

if.then463:                                       ; preds = %for.body459
  %325 = load i32, i32* %j, align 4
  %326 = load i64, i64* %rlen, align 8
  %conv464 = trunc i64 %326 to i32
  %cmp465 = icmp sge i32 %325, %conv464
  br i1 %cmp465, label %if.then467, label %if.else487

if.then467:                                       ; preds = %if.then463
  %327 = load i32, i32* %del, align 4
  %tobool468 = icmp ne i32 %327, 0
  br i1 %tobool468, label %if.then469, label %if.else472

if.then469:                                       ; preds = %if.then467
  %328 = load i16*, i16** %tbl, align 8
  %329 = load i32, i32* %i, align 4
  %idxprom470 = sext i32 %329 to i64
  %arrayidx471 = getelementptr inbounds i16, i16* %328, i64 %idxprom470
  store i16 -2, i16* %arrayidx471, align 2
  br label %if.end486

if.else472:                                       ; preds = %if.then467
  %330 = load i64, i64* %rlen, align 8
  %tobool473 = icmp ne i64 %330, 0
  br i1 %tobool473, label %if.then474, label %if.else481

if.then474:                                       ; preds = %if.else472
  %331 = load i8*, i8** %r, align 8
  %332 = load i32, i32* %j, align 4
  %sub475 = sub nsw i32 %332, 1
  %idxprom476 = sext i32 %sub475 to i64
  %arrayidx477 = getelementptr inbounds i8, i8* %331, i64 %idxprom476
  %333 = load i8, i8* %arrayidx477, align 1
  %conv478 = zext i8 %333 to i16
  %334 = load i16*, i16** %tbl, align 8
  %335 = load i32, i32* %i, align 4
  %idxprom479 = sext i32 %335 to i64
  %arrayidx480 = getelementptr inbounds i16, i16* %334, i64 %idxprom479
  store i16 %conv478, i16* %arrayidx480, align 2
  br label %if.end485

if.else481:                                       ; preds = %if.else472
  %336 = load i32, i32* %i, align 4
  %conv482 = trunc i32 %336 to i16
  %337 = load i16*, i16** %tbl, align 8
  %338 = load i32, i32* %i, align 4
  %idxprom483 = sext i32 %338 to i64
  %arrayidx484 = getelementptr inbounds i16, i16* %337, i64 %idxprom483
  store i16 %conv482, i16* %arrayidx484, align 2
  br label %if.end485

if.end485:                                        ; preds = %if.else481, %if.then474
  br label %if.end486

if.end486:                                        ; preds = %if.end485, %if.then469
  br label %if.end504

if.else487:                                       ; preds = %if.then463
  %339 = load i32, i32* %i, align 4
  %cmp488 = icmp slt i32 %339, 128
  br i1 %cmp488, label %land.lhs.true490, label %if.end497

land.lhs.true490:                                 ; preds = %if.else487
  %340 = load i8*, i8** %r, align 8
  %341 = load i32, i32* %j, align 4
  %idxprom491 = sext i32 %341 to i64
  %arrayidx492 = getelementptr inbounds i8, i8* %340, i64 %idxprom491
  %342 = load i8, i8* %arrayidx492, align 1
  %conv493 = zext i8 %342 to i32
  %cmp494 = icmp sge i32 %conv493, 128
  br i1 %cmp494, label %if.then496, label %if.end497

if.then496:                                       ; preds = %land.lhs.true490
  store i32 1, i32* %grows, align 4
  br label %if.end497

if.end497:                                        ; preds = %if.then496, %land.lhs.true490, %if.else487
  %343 = load i8*, i8** %r, align 8
  %344 = load i32, i32* %j, align 4
  %inc498 = add nsw i32 %344, 1
  store i32 %inc498, i32* %j, align 4
  %idxprom499 = sext i32 %344 to i64
  %arrayidx500 = getelementptr inbounds i8, i8* %343, i64 %idxprom499
  %345 = load i8, i8* %arrayidx500, align 1
  %conv501 = zext i8 %345 to i16
  %346 = load i16*, i16** %tbl, align 8
  %347 = load i32, i32* %i, align 4
  %idxprom502 = sext i32 %347 to i64
  %arrayidx503 = getelementptr inbounds i16, i16* %346, i64 %idxprom502
  store i16 %conv501, i16* %arrayidx503, align 2
  br label %if.end504

if.end504:                                        ; preds = %if.end497, %if.end486
  br label %if.end505

if.end505:                                        ; preds = %if.end504, %for.body459
  br label %for.inc506

for.inc506:                                       ; preds = %if.end505
  %348 = load i32, i32* %i, align 4
  %inc507 = add nsw i32 %348, 1
  store i32 %inc507, i32* %i, align 4
  br label %for.cond456

for.end508:                                       ; preds = %for.cond456
  %349 = load i32, i32* %del, align 4
  %tobool509 = icmp ne i32 %349, 0
  br i1 %tobool509, label %if.end557, label %if.then510

if.then510:                                       ; preds = %for.end508
  %350 = load i64, i64* %rlen, align 8
  %tobool511 = icmp ne i64 %350, 0
  br i1 %tobool511, label %if.else521, label %if.then512

if.then512:                                       ; preds = %if.then510
  %351 = load i64, i64* %rlen, align 8
  %conv513 = trunc i64 %351 to i32
  store i32 %conv513, i32* %j, align 4
  %352 = load i32, i32* %squash, align 4
  %tobool514 = icmp ne i32 %352, 0
  br i1 %tobool514, label %if.end520, label %if.then515

if.then515:                                       ; preds = %if.then512
  %353 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_private516 = getelementptr inbounds %struct.op, %struct.op* %353, i32 0, i32 6
  %354 = load i8, i8* %op_private516, align 1
  %conv517 = zext i8 %354 to i32
  %or518 = or i32 %conv517, 4
  %conv519 = trunc i32 %or518 to i8
  store i8 %conv519, i8* %op_private516, align 1
  br label %if.end520

if.end520:                                        ; preds = %if.then515, %if.then512
  br label %if.end536

if.else521:                                       ; preds = %if.then510
  %355 = load i32, i32* %j, align 4
  %356 = load i64, i64* %rlen, align 8
  %conv522 = trunc i64 %356 to i32
  %cmp523 = icmp sge i32 %355, %conv522
  br i1 %cmp523, label %if.then525, label %if.else528

if.then525:                                       ; preds = %if.else521
  %357 = load i64, i64* %rlen, align 8
  %sub526 = sub i64 %357, 1
  %conv527 = trunc i64 %sub526 to i32
  store i32 %conv527, i32* %j, align 4
  br label %if.end535

if.else528:                                       ; preds = %if.else521
  %358 = load i16*, i16** %tbl, align 8
  %359 = bitcast i16* %358 to i8*
  %360 = load i64, i64* %rlen, align 8
  %add529 = add i64 257, %360
  %361 = load i32, i32* %j, align 4
  %conv530 = sext i32 %361 to i64
  %sub531 = sub i64 %add529, %conv530
  %mul532 = mul i64 %sub531, 2
  %call533 = call i8* @realloc(i8* %359, i64 %mul532) #5
  %362 = bitcast i8* %call533 to i16*
  store i16* %362, i16** %tbl, align 8
  %363 = load i16*, i16** %tbl, align 8
  %364 = bitcast i16* %363 to i8*
  %365 = load %struct.op*, %struct.op** %o.addr, align 8
  %366 = bitcast %struct.op* %365 to %struct.pvop*
  %op_pv534 = getelementptr inbounds %struct.pvop, %struct.pvop* %366, i32 0, i32 7
  store i8* %364, i8** %op_pv534, align 8
  br label %if.end535

if.end535:                                        ; preds = %if.else528, %if.then525
  br label %if.end536

if.end536:                                        ; preds = %if.end535, %if.end520
  %367 = load i64, i64* %rlen, align 8
  %368 = load i32, i32* %j, align 4
  %conv537 = sext i32 %368 to i64
  %sub538 = sub i64 %367, %conv537
  %conv539 = trunc i64 %sub538 to i16
  %369 = load i16*, i16** %tbl, align 8
  %arrayidx540 = getelementptr inbounds i16, i16* %369, i64 256
  store i16 %conv539, i16* %arrayidx540, align 2
  store i32 0, i32* %i, align 4
  br label %for.cond541

for.cond541:                                      ; preds = %for.inc554, %if.end536
  %370 = load i32, i32* %i, align 4
  %371 = load i64, i64* %rlen, align 8
  %conv542 = trunc i64 %371 to i32
  %372 = load i32, i32* %j, align 4
  %sub543 = sub nsw i32 %conv542, %372
  %cmp544 = icmp slt i32 %370, %sub543
  br i1 %cmp544, label %for.body546, label %for.end556

for.body546:                                      ; preds = %for.cond541
  %373 = load i8*, i8** %r, align 8
  %374 = load i32, i32* %j, align 4
  %375 = load i32, i32* %i, align 4
  %add547 = add nsw i32 %374, %375
  %idxprom548 = sext i32 %add547 to i64
  %arrayidx549 = getelementptr inbounds i8, i8* %373, i64 %idxprom548
  %376 = load i8, i8* %arrayidx549, align 1
  %conv550 = zext i8 %376 to i16
  %377 = load i16*, i16** %tbl, align 8
  %378 = load i32, i32* %i, align 4
  %add551 = add nsw i32 257, %378
  %idxprom552 = sext i32 %add551 to i64
  %arrayidx553 = getelementptr inbounds i16, i16* %377, i64 %idxprom552
  store i16 %conv550, i16* %arrayidx553, align 2
  br label %for.inc554

for.inc554:                                       ; preds = %for.body546
  %379 = load i32, i32* %i, align 4
  %inc555 = add nsw i32 %379, 1
  store i32 %inc555, i32* %i, align 4
  br label %for.cond541

for.end556:                                       ; preds = %for.cond541
  br label %if.end557

if.end557:                                        ; preds = %for.end556, %for.end508
  br label %if.end653

if.else558:                                       ; preds = %land.end437
  %380 = load i64, i64* %rlen, align 8
  %tobool559 = icmp ne i64 %380, 0
  br i1 %tobool559, label %if.else570, label %land.lhs.true560

land.lhs.true560:                                 ; preds = %if.else558
  %381 = load i32, i32* %del, align 4
  %tobool561 = icmp ne i32 %381, 0
  br i1 %tobool561, label %if.else570, label %if.then562

if.then562:                                       ; preds = %land.lhs.true560
  %382 = load i8*, i8** %t, align 8
  store i8* %382, i8** %r, align 8
  %383 = load i64, i64* %tlen, align 8
  store i64 %383, i64* %rlen, align 8
  %384 = load i32, i32* %squash, align 4
  %tobool563 = icmp ne i32 %384, 0
  br i1 %tobool563, label %if.end569, label %if.then564

if.then564:                                       ; preds = %if.then562
  %385 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_private565 = getelementptr inbounds %struct.op, %struct.op* %385, i32 0, i32 6
  %386 = load i8, i8* %op_private565, align 1
  %conv566 = zext i8 %386 to i32
  %or567 = or i32 %conv566, 4
  %conv568 = trunc i32 %or567 to i8
  store i8 %conv568, i8* %op_private565, align 1
  br label %if.end569

if.end569:                                        ; preds = %if.then564, %if.then562
  br label %if.end584

if.else570:                                       ; preds = %land.lhs.true560, %if.else558
  %387 = load i32, i32* %squash, align 4
  %tobool571 = icmp ne i32 %387, 0
  br i1 %tobool571, label %if.end583, label %land.lhs.true572

land.lhs.true572:                                 ; preds = %if.else570
  %388 = load i64, i64* %rlen, align 8
  %389 = load i64, i64* %tlen, align 8
  %cmp573 = icmp eq i64 %388, %389
  br i1 %cmp573, label %land.lhs.true575, label %if.end583

land.lhs.true575:                                 ; preds = %land.lhs.true572
  %390 = load i8*, i8** %t, align 8
  %391 = load i8*, i8** %r, align 8
  %392 = load i64, i64* %tlen, align 8
  %call576 = call i32 @memcmp(i8* %390, i8* %391, i64 %392) #7
  %tobool577 = icmp ne i32 %call576, 0
  br i1 %tobool577, label %if.end583, label %if.then578

if.then578:                                       ; preds = %land.lhs.true575
  %393 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_private579 = getelementptr inbounds %struct.op, %struct.op* %393, i32 0, i32 6
  %394 = load i8, i8* %op_private579, align 1
  %conv580 = zext i8 %394 to i32
  %or581 = or i32 %conv580, 4
  %conv582 = trunc i32 %or581 to i8
  store i8 %conv582, i8* %op_private579, align 1
  br label %if.end583

if.end583:                                        ; preds = %if.then578, %land.lhs.true575, %land.lhs.true572, %if.else570
  br label %if.end584

if.end584:                                        ; preds = %if.end583, %if.end569
  store i32 0, i32* %i, align 4
  br label %for.cond585

for.cond585:                                      ; preds = %for.inc591, %if.end584
  %395 = load i32, i32* %i, align 4
  %cmp586 = icmp slt i32 %395, 256
  br i1 %cmp586, label %for.body588, label %for.end593

for.body588:                                      ; preds = %for.cond585
  %396 = load i16*, i16** %tbl, align 8
  %397 = load i32, i32* %i, align 4
  %idxprom589 = sext i32 %397 to i64
  %arrayidx590 = getelementptr inbounds i16, i16* %396, i64 %idxprom589
  store i16 -1, i16* %arrayidx590, align 2
  br label %for.inc591

for.inc591:                                       ; preds = %for.body588
  %398 = load i32, i32* %i, align 4
  %inc592 = add nsw i32 %398, 1
  store i32 %inc592, i32* %i, align 4
  br label %for.cond585

for.end593:                                       ; preds = %for.cond585
  store i32 0, i32* %i, align 4
  store i32 0, i32* %j, align 4
  br label %for.cond594

for.cond594:                                      ; preds = %for.inc649, %for.end593
  %399 = load i32, i32* %i, align 4
  %400 = load i64, i64* %tlen, align 8
  %conv595 = trunc i64 %400 to i32
  %cmp596 = icmp slt i32 %399, %conv595
  br i1 %cmp596, label %for.body598, label %for.end652

for.body598:                                      ; preds = %for.cond594
  %401 = load i32, i32* %j, align 4
  %402 = load i64, i64* %rlen, align 8
  %conv599 = trunc i64 %402 to i32
  %cmp600 = icmp sge i32 %401, %conv599
  br i1 %cmp600, label %if.then602, label %if.end619

if.then602:                                       ; preds = %for.body598
  %403 = load i32, i32* %del, align 4
  %tobool603 = icmp ne i32 %403, 0
  br i1 %tobool603, label %if.then604, label %if.end618

if.then604:                                       ; preds = %if.then602
  %404 = load i16*, i16** %tbl, align 8
  %405 = load i8*, i8** %t, align 8
  %406 = load i32, i32* %i, align 4
  %idxprom605 = sext i32 %406 to i64
  %arrayidx606 = getelementptr inbounds i8, i8* %405, i64 %idxprom605
  %407 = load i8, i8* %arrayidx606, align 1
  %idxprom607 = zext i8 %407 to i64
  %arrayidx608 = getelementptr inbounds i16, i16* %404, i64 %idxprom607
  %408 = load i16, i16* %arrayidx608, align 2
  %conv609 = sext i16 %408 to i32
  %cmp610 = icmp eq i32 %conv609, -1
  br i1 %cmp610, label %if.then612, label %if.end617

if.then612:                                       ; preds = %if.then604
  %409 = load i16*, i16** %tbl, align 8
  %410 = load i8*, i8** %t, align 8
  %411 = load i32, i32* %i, align 4
  %idxprom613 = sext i32 %411 to i64
  %arrayidx614 = getelementptr inbounds i8, i8* %410, i64 %idxprom613
  %412 = load i8, i8* %arrayidx614, align 1
  %idxprom615 = zext i8 %412 to i64
  %arrayidx616 = getelementptr inbounds i16, i16* %409, i64 %idxprom615
  store i16 -2, i16* %arrayidx616, align 2
  br label %if.end617

if.end617:                                        ; preds = %if.then612, %if.then604
  br label %for.inc649

if.end618:                                        ; preds = %if.then602
  %413 = load i32, i32* %j, align 4
  %dec = add nsw i32 %413, -1
  store i32 %dec, i32* %j, align 4
  br label %if.end619

if.end619:                                        ; preds = %if.end618, %for.body598
  %414 = load i16*, i16** %tbl, align 8
  %415 = load i8*, i8** %t, align 8
  %416 = load i32, i32* %i, align 4
  %idxprom620 = sext i32 %416 to i64
  %arrayidx621 = getelementptr inbounds i8, i8* %415, i64 %idxprom620
  %417 = load i8, i8* %arrayidx621, align 1
  %idxprom622 = zext i8 %417 to i64
  %arrayidx623 = getelementptr inbounds i16, i16* %414, i64 %idxprom622
  %418 = load i16, i16* %arrayidx623, align 2
  %conv624 = sext i16 %418 to i32
  %cmp625 = icmp eq i32 %conv624, -1
  br i1 %cmp625, label %if.then627, label %if.end648

if.then627:                                       ; preds = %if.end619
  %419 = load i8*, i8** %t, align 8
  %420 = load i32, i32* %i, align 4
  %idxprom628 = sext i32 %420 to i64
  %arrayidx629 = getelementptr inbounds i8, i8* %419, i64 %idxprom628
  %421 = load i8, i8* %arrayidx629, align 1
  %conv630 = zext i8 %421 to i32
  %cmp631 = icmp slt i32 %conv630, 128
  br i1 %cmp631, label %land.lhs.true633, label %if.end640

land.lhs.true633:                                 ; preds = %if.then627
  %422 = load i8*, i8** %r, align 8
  %423 = load i32, i32* %j, align 4
  %idxprom634 = sext i32 %423 to i64
  %arrayidx635 = getelementptr inbounds i8, i8* %422, i64 %idxprom634
  %424 = load i8, i8* %arrayidx635, align 1
  %conv636 = zext i8 %424 to i32
  %cmp637 = icmp sge i32 %conv636, 128
  br i1 %cmp637, label %if.then639, label %if.end640

if.then639:                                       ; preds = %land.lhs.true633
  store i32 1, i32* %grows, align 4
  br label %if.end640

if.end640:                                        ; preds = %if.then639, %land.lhs.true633, %if.then627
  %425 = load i8*, i8** %r, align 8
  %426 = load i32, i32* %j, align 4
  %idxprom641 = sext i32 %426 to i64
  %arrayidx642 = getelementptr inbounds i8, i8* %425, i64 %idxprom641
  %427 = load i8, i8* %arrayidx642, align 1
  %conv643 = zext i8 %427 to i16
  %428 = load i16*, i16** %tbl, align 8
  %429 = load i8*, i8** %t, align 8
  %430 = load i32, i32* %i, align 4
  %idxprom644 = sext i32 %430 to i64
  %arrayidx645 = getelementptr inbounds i8, i8* %429, i64 %idxprom644
  %431 = load i8, i8* %arrayidx645, align 1
  %idxprom646 = zext i8 %431 to i64
  %arrayidx647 = getelementptr inbounds i16, i16* %428, i64 %idxprom646
  store i16 %conv643, i16* %arrayidx647, align 2
  br label %if.end648

if.end648:                                        ; preds = %if.end640, %if.end619
  br label %for.inc649

for.inc649:                                       ; preds = %if.end648, %if.end617
  %432 = load i32, i32* %i, align 4
  %inc650 = add nsw i32 %432, 1
  store i32 %inc650, i32* %i, align 4
  %433 = load i32, i32* %j, align 4
  %inc651 = add nsw i32 %433, 1
  store i32 %inc651, i32* %j, align 4
  br label %for.cond594

for.end652:                                       ; preds = %for.cond594
  br label %if.end653

if.end653:                                        ; preds = %for.end652, %if.end557
  br label %warnins

warnins:                                          ; preds = %if.end653, %if.end426
  %434 = load i32, i32* %del, align 4
  %tobool654 = icmp ne i32 %434, 0
  br i1 %tobool654, label %land.lhs.true655, label %if.else659

land.lhs.true655:                                 ; preds = %warnins
  %435 = load i64, i64* %rlen, align 8
  %436 = load i64, i64* %tlen, align 8
  %cmp656 = icmp eq i64 %435, %436
  br i1 %cmp656, label %if.then658, label %if.else659

if.then658:                                       ; preds = %land.lhs.true655
  call void (i32, i8*, ...) @Perl_ck_warner(i32 12, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.183, i64 0, i64 0))
  br label %if.end666

if.else659:                                       ; preds = %land.lhs.true655, %warnins
  %437 = load i64, i64* %rlen, align 8
  %438 = load i64, i64* %tlen, align 8
  %cmp660 = icmp ugt i64 %437, %438
  br i1 %cmp660, label %land.lhs.true662, label %if.end665

land.lhs.true662:                                 ; preds = %if.else659
  %439 = load i32, i32* %complement, align 4
  %tobool663 = icmp ne i32 %439, 0
  br i1 %tobool663, label %if.end665, label %if.then664

if.then664:                                       ; preds = %land.lhs.true662
  call void (i32, i8*, ...) @Perl_ck_warner(i32 12, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.184, i64 0, i64 0))
  br label %if.end665

if.end665:                                        ; preds = %if.then664, %land.lhs.true662, %if.else659
  br label %if.end666

if.end666:                                        ; preds = %if.end665, %if.then658
  %440 = load i32, i32* %grows, align 4
  %tobool667 = icmp ne i32 %440, 0
  br i1 %tobool667, label %if.then668, label %if.end673

if.then668:                                       ; preds = %if.end666
  %441 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_private669 = getelementptr inbounds %struct.op, %struct.op* %441, i32 0, i32 6
  %442 = load i8, i8* %op_private669, align 1
  %conv670 = zext i8 %442 to i32
  %or671 = or i32 %conv670, 64
  %conv672 = trunc i32 %or671 to i8
  store i8 %conv672, i8* %op_private669, align 1
  br label %if.end673

if.end673:                                        ; preds = %if.then668, %if.end666
  %443 = load %struct.op*, %struct.op** %expr.addr, align 8
  call void @Perl_op_free(%struct.op* %443)
  %444 = load %struct.op*, %struct.op** %repl.addr, align 8
  call void @Perl_op_free(%struct.op* %444)
  %445 = load %struct.op*, %struct.op** %o.addr, align 8
  ret %struct.op* %445
}

declare dso_local %struct.regexp_engine* @Perl_current_re_engine() #3

declare dso_local %struct.p5rx* @Perl_re_op_compile(%struct.sv**, i32, %struct.op*, %struct.regexp_engine*, %struct.p5rx*, i8*, i32, i32) #3

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.cv* @Perl_newATTRSUB_x(i32 %floor, %struct.op* %o, %struct.op* %proto, %struct.op* %attrs, %struct.op* %block, i1 zeroext %o_is_gv) #0 {
entry:
  %floor.addr = alloca i32, align 4
  %o.addr = alloca %struct.op*, align 8
  %proto.addr = alloca %struct.op*, align 8
  %attrs.addr = alloca %struct.op*, align 8
  %block.addr = alloca %struct.op*, align 8
  %o_is_gv.addr = alloca i8, align 1
  %gv = alloca %struct.gv*, align 8
  %ps = alloca i8*, align 8
  %ps_len = alloca i64, align 8
  %ps_utf8 = alloca i32, align 4
  %cv = alloca %struct.cv*, align 8
  %const_sv = alloca %struct.sv*, align 8
  %ec = alloca i8, align 1
  %gv_fetch_flags = alloca i32, align 4
  %namlen = alloca i64, align 8
  %name = alloca i8*, align 8
  %has_name = alloca i8, align 1
  %name_is_utf8 = alloca i8, align 1
  %evanescent = alloca i8, align 1
  %start = alloca %struct.op*, align 8
  %flags = alloca i32, align 4
  %sv = alloca %struct.sv*, align 8
  %_o = alloca %struct.op*, align 8
  %_o152 = alloca %struct.op*, align 8
  %_o162 = alloca %struct.op*, align 8
  %s = alloca i8*, align 8
  %errsv = alloca %struct.sv*, align 8
  %l = alloca i32, align 4
  %oldline = alloca i32, align 4
  %exists = alloca i8, align 1
  %zok = alloca i64, align 8
  %existing_builtin_attrs = alloca i32, align 4
  %temp_av = alloca %struct.padlist*, align 8
  %temp_cv = alloca %struct.cv*, align 8
  %other_flags = alloca i32, align 4
  %cvstart = alloca %struct.op*, align 8
  %hash = alloca i32, align 4
  %zok970 = alloca i64, align 8
  %hash1052 = alloca i32, align 4
  %stash = alloca %struct.hv*, align 8
  %tmpstr = alloca %struct.sv*, align 8
  %db_postponed = alloca %struct.gv*, align 8
  %hv = alloca %struct.hv*, align 8
  %sv1198 = alloca %struct.sv*, align 8
  %pcv = alloca %struct.cv*, align 8
  %sp = alloca %struct.sv**, align 8
  %mark_stack_entry = alloca i32*, align 8
  store i32 %floor, i32* %floor.addr, align 4
  store %struct.op* %o, %struct.op** %o.addr, align 8
  store %struct.op* %proto, %struct.op** %proto.addr, align 8
  store %struct.op* %attrs, %struct.op** %attrs.addr, align 8
  store %struct.op* %block, %struct.op** %block.addr, align 8
  %frombool = zext i1 %o_is_gv to i8
  store i8 %frombool, i8* %o_is_gv.addr, align 1
  store i64 0, i64* %ps_len, align 8
  store i32 0, i32* %ps_utf8, align 4
  store %struct.cv* null, %struct.cv** %cv, align 8
  %0 = load %struct.yy_parser*, %struct.yy_parser** @PL_parser, align 8
  %tobool = icmp ne %struct.yy_parser* %0, null
  br i1 %tobool, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %entry
  %1 = load %struct.yy_parser*, %struct.yy_parser** @PL_parser, align 8
  %error_count = getelementptr inbounds %struct.yy_parser, %struct.yy_parser* %1, i32 0, i32 44
  %2 = load i8, i8* %error_count, align 1
  %conv = zext i8 %2 to i32
  %tobool1 = icmp ne i32 %conv, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %3 = phi i1 [ false, %entry ], [ %tobool1, %land.rhs ]
  %frombool2 = zext i1 %3 to i8
  store i8 %frombool2, i8* %ec, align 1
  %4 = load i8, i8* %ec, align 1
  %tobool3 = trunc i8 %4 to i1
  br i1 %tobool3, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.end
  br label %cond.end

cond.false:                                       ; preds = %land.end
  %5 = load %struct.op*, %struct.op** %block.addr, align 8
  %tobool5 = icmp ne %struct.op* %5, null
  br i1 %tobool5, label %lor.end, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %cond.false
  %6 = load %struct.op*, %struct.op** %attrs.addr, align 8
  %tobool6 = icmp ne %struct.op* %6, null
  br i1 %tobool6, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %lor.lhs.false
  %7 = load %struct.cv*, %struct.cv** @PL_compcv, align 8
  %sv_any = getelementptr inbounds %struct.cv, %struct.cv* %7, i32 0, i32 0
  %8 = load %struct.xpvcv*, %struct.xpvcv** %sv_any, align 8
  %9 = bitcast %struct.xpvcv* %8 to i8*
  %10 = bitcast i8* %9 to %struct.xpvcv*
  %xcv_flags = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %10, i32 0, i32 12
  %11 = load i32, i32* %xcv_flags, align 4
  %and = and i32 %11, 131075
  %tobool7 = icmp ne i32 %and, 0
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %lor.lhs.false, %cond.false
  %12 = phi i1 [ true, %lor.lhs.false ], [ true, %cond.false ], [ %tobool7, %lor.rhs ]
  %13 = zext i1 %12 to i64
  %cond = select i1 %12, i32 2, i32 18
  br label %cond.end

cond.end:                                         ; preds = %lor.end, %cond.true
  %cond8 = phi i32 [ 32, %cond.true ], [ %cond, %lor.end ]
  store i32 %cond8, i32* %gv_fetch_flags, align 4
  store i64 0, i64* %namlen, align 8
  %14 = load %struct.op*, %struct.op** %o.addr, align 8
  %tobool9 = icmp ne %struct.op* %14, null
  br i1 %tobool9, label %cond.true10, label %cond.false45

cond.true10:                                      ; preds = %cond.end
  %15 = load i8, i8* %o_is_gv.addr, align 1
  %tobool11 = trunc i8 %15 to i1
  br i1 %tobool11, label %cond.true13, label %cond.false14

cond.true13:                                      ; preds = %cond.true10
  %16 = load %struct.op*, %struct.op** %o.addr, align 8
  %17 = bitcast %struct.op* %16 to %struct.sv*
  br label %cond.end15

cond.false14:                                     ; preds = %cond.true10
  %18 = load %struct.op*, %struct.op** %o.addr, align 8
  %19 = bitcast %struct.op* %18 to %struct.svop*
  %op_sv = getelementptr inbounds %struct.svop, %struct.svop* %19, i32 0, i32 7
  %20 = load %struct.sv*, %struct.sv** %op_sv, align 8
  br label %cond.end15

cond.end15:                                       ; preds = %cond.false14, %cond.true13
  %cond16 = phi %struct.sv* [ %17, %cond.true13 ], [ %20, %cond.false14 ]
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %cond16, i32 0, i32 2
  %21 = load i32, i32* %sv_flags, align 4
  %and17 = and i32 %21, 2098176
  %cmp = icmp eq i32 %and17, 1024
  br i1 %cmp, label %cond.true19, label %cond.false35

cond.true19:                                      ; preds = %cond.end15
  %22 = load i8, i8* %o_is_gv.addr, align 1
  %tobool20 = trunc i8 %22 to i1
  br i1 %tobool20, label %cond.true22, label %cond.false23

cond.true22:                                      ; preds = %cond.true19
  %23 = load %struct.op*, %struct.op** %o.addr, align 8
  %24 = bitcast %struct.op* %23 to %struct.sv*
  br label %cond.end25

cond.false23:                                     ; preds = %cond.true19
  %25 = load %struct.op*, %struct.op** %o.addr, align 8
  %26 = bitcast %struct.op* %25 to %struct.svop*
  %op_sv24 = getelementptr inbounds %struct.svop, %struct.svop* %26, i32 0, i32 7
  %27 = load %struct.sv*, %struct.sv** %op_sv24, align 8
  br label %cond.end25

cond.end25:                                       ; preds = %cond.false23, %cond.true22
  %cond26 = phi %struct.sv* [ %24, %cond.true22 ], [ %27, %cond.false23 ]
  %sv_any27 = getelementptr inbounds %struct.sv, %struct.sv* %cond26, i32 0, i32 0
  %28 = load i8*, i8** %sv_any27, align 8
  %29 = bitcast i8* %28 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %29, i32 0, i32 2
  %30 = load i64, i64* %xpv_cur, align 8
  store i64 %30, i64* %namlen, align 8
  %31 = load i8, i8* %o_is_gv.addr, align 1
  %tobool28 = trunc i8 %31 to i1
  br i1 %tobool28, label %cond.true30, label %cond.false31

cond.true30:                                      ; preds = %cond.end25
  %32 = load %struct.op*, %struct.op** %o.addr, align 8
  %33 = bitcast %struct.op* %32 to %struct.sv*
  br label %cond.end33

cond.false31:                                     ; preds = %cond.end25
  %34 = load %struct.op*, %struct.op** %o.addr, align 8
  %35 = bitcast %struct.op* %34 to %struct.svop*
  %op_sv32 = getelementptr inbounds %struct.svop, %struct.svop* %35, i32 0, i32 7
  %36 = load %struct.sv*, %struct.sv** %op_sv32, align 8
  br label %cond.end33

cond.end33:                                       ; preds = %cond.false31, %cond.true30
  %cond34 = phi %struct.sv* [ %33, %cond.true30 ], [ %36, %cond.false31 ]
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %cond34, i32 0, i32 3
  %svu_pv = bitcast %union.anon* %sv_u to i8**
  %37 = load i8*, i8** %svu_pv, align 8
  %add.ptr = getelementptr inbounds i8, i8* %37, i64 0
  br label %cond.end43

cond.false35:                                     ; preds = %cond.end15
  %38 = load i8, i8* %o_is_gv.addr, align 1
  %tobool36 = trunc i8 %38 to i1
  br i1 %tobool36, label %cond.true38, label %cond.false39

cond.true38:                                      ; preds = %cond.false35
  %39 = load %struct.op*, %struct.op** %o.addr, align 8
  %40 = bitcast %struct.op* %39 to %struct.sv*
  br label %cond.end41

cond.false39:                                     ; preds = %cond.false35
  %41 = load %struct.op*, %struct.op** %o.addr, align 8
  %42 = bitcast %struct.op* %41 to %struct.svop*
  %op_sv40 = getelementptr inbounds %struct.svop, %struct.svop* %42, i32 0, i32 7
  %43 = load %struct.sv*, %struct.sv** %op_sv40, align 8
  br label %cond.end41

cond.end41:                                       ; preds = %cond.false39, %cond.true38
  %cond42 = phi %struct.sv* [ %40, %cond.true38 ], [ %43, %cond.false39 ]
  %call = call i8* @Perl_sv_2pv_flags(%struct.sv* %cond42, i64* %namlen, i32 34)
  br label %cond.end43

cond.end43:                                       ; preds = %cond.end41, %cond.end33
  %cond44 = phi i8* [ %add.ptr, %cond.end33 ], [ %call, %cond.end41 ]
  br label %cond.end46

cond.false45:                                     ; preds = %cond.end
  br label %cond.end46

cond.end46:                                       ; preds = %cond.false45, %cond.end43
  %cond47 = phi i8* [ %cond44, %cond.end43 ], [ null, %cond.false45 ]
  store i8* %cond47, i8** %name, align 8
  %44 = load %struct.op*, %struct.op** %o.addr, align 8
  %tobool48 = icmp ne %struct.op* %44, null
  br i1 %tobool48, label %land.lhs.true, label %land.end55

land.lhs.true:                                    ; preds = %cond.end46
  %45 = load i8, i8* %o_is_gv.addr, align 1
  %tobool49 = trunc i8 %45 to i1
  br i1 %tobool49, label %land.end55, label %land.rhs50

land.rhs50:                                       ; preds = %land.lhs.true
  %46 = load %struct.op*, %struct.op** %o.addr, align 8
  %47 = bitcast %struct.op* %46 to %struct.svop*
  %op_sv51 = getelementptr inbounds %struct.svop, %struct.svop* %47, i32 0, i32 7
  %48 = load %struct.sv*, %struct.sv** %op_sv51, align 8
  %sv_flags52 = getelementptr inbounds %struct.sv, %struct.sv* %48, i32 0, i32 2
  %49 = load i32, i32* %sv_flags52, align 4
  %and53 = and i32 %49, 536870912
  %tobool54 = icmp ne i32 %and53, 0
  br label %land.end55

land.end55:                                       ; preds = %land.rhs50, %land.lhs.true, %cond.end46
  %50 = phi i1 [ false, %land.lhs.true ], [ false, %cond.end46 ], [ %tobool54, %land.rhs50 ]
  %frombool56 = zext i1 %50 to i8
  store i8 %frombool56, i8* %name_is_utf8, align 1
  store i8 0, i8* %evanescent, align 1
  store %struct.op* null, %struct.op** %start, align 8
  %51 = load i8, i8* %o_is_gv.addr, align 1
  %tobool57 = trunc i8 %51 to i1
  br i1 %tobool57, label %if.then, label %if.else

if.then:                                          ; preds = %land.end55
  %52 = load %struct.op*, %struct.op** %o.addr, align 8
  %53 = bitcast %struct.op* %52 to %struct.gv*
  store %struct.gv* %53, %struct.gv** %gv, align 8
  store %struct.op* null, %struct.op** %o.addr, align 8
  store i8 1, i8* %has_name, align 1
  br label %if.end108

if.else:                                          ; preds = %land.end55
  %54 = load i8*, i8** %name, align 8
  %tobool58 = icmp ne i8* %54, null
  br i1 %tobool58, label %if.then59, label %if.else80

if.then59:                                        ; preds = %if.else
  %55 = load i8, i8* %ec, align 1
  %tobool60 = trunc i8 %55 to i1
  br i1 %tobool60, label %cond.true62, label %cond.false63

cond.true62:                                      ; preds = %if.then59
  br label %cond.end76

cond.false63:                                     ; preds = %if.then59
  %56 = load %struct.hv*, %struct.hv** @PL_curstash, align 8
  %57 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_stash = getelementptr inbounds %struct.cop, %struct.cop* %57, i32 0, i32 8
  %58 = load %struct.hv*, %struct.hv** %cop_stash, align 8
  %cmp64 = icmp ne %struct.hv* %56, %58
  br i1 %cmp64, label %cond.true72, label %lor.lhs.false66

lor.lhs.false66:                                  ; preds = %cond.false63
  %59 = load i8*, i8** %name, align 8
  %60 = load i64, i64* %namlen, align 8
  %call67 = call i8* @memchr(i8* %59, i32 58, i64 %60) #7
  %tobool68 = icmp ne i8* %call67, null
  br i1 %tobool68, label %cond.true72, label %lor.lhs.false69

lor.lhs.false69:                                  ; preds = %lor.lhs.false66
  %61 = load i8*, i8** %name, align 8
  %62 = load i64, i64* %namlen, align 8
  %call70 = call i8* @memchr(i8* %61, i32 39, i64 %62) #7
  %tobool71 = icmp ne i8* %call70, null
  br i1 %tobool71, label %cond.true72, label %cond.false73

cond.true72:                                      ; preds = %lor.lhs.false69, %lor.lhs.false66, %cond.false63
  %63 = load i32, i32* %gv_fetch_flags, align 4
  br label %cond.end74

cond.false73:                                     ; preds = %lor.lhs.false69
  br label %cond.end74

cond.end74:                                       ; preds = %cond.false73, %cond.true72
  %cond75 = phi i32 [ %63, %cond.true72 ], [ 146, %cond.false73 ]
  br label %cond.end76

cond.end76:                                       ; preds = %cond.end74, %cond.true62
  %cond77 = phi i32 [ 32, %cond.true62 ], [ %cond75, %cond.end74 ]
  store i32 %cond77, i32* %flags, align 4
  %64 = load %struct.op*, %struct.op** %o.addr, align 8
  %65 = bitcast %struct.op* %64 to %struct.svop*
  %op_sv78 = getelementptr inbounds %struct.svop, %struct.svop* %65, i32 0, i32 7
  %66 = load %struct.sv*, %struct.sv** %op_sv78, align 8
  %67 = load i32, i32* %flags, align 4
  %call79 = call %struct.gv* @Perl_gv_fetchsv(%struct.sv* %66, i32 %67, i32 13)
  store %struct.gv* %call79, %struct.gv** %gv, align 8
  store i8 1, i8* %has_name, align 1
  br label %if.end107

if.else80:                                        ; preds = %if.else
  %68 = load i32, i32* @PL_perldb, align 4
  %and81 = and i32 %68, 512
  %tobool82 = icmp ne i32 %and81, 0
  br i1 %tobool82, label %land.lhs.true83, label %if.else100

land.lhs.true83:                                  ; preds = %if.else80
  %69 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_line = getelementptr inbounds %struct.cop, %struct.cop* %69, i32 0, i32 7
  %70 = load i32, i32* %cop_line, align 4
  %tobool84 = icmp ne i32 %70, 0
  br i1 %tobool84, label %if.then85, label %if.else100

if.then85:                                        ; preds = %land.lhs.true83
  %call86 = call %struct.sv* @Perl_sv_newmortal()
  store %struct.sv* %call86, %struct.sv** %sv, align 8
  %71 = load %struct.sv*, %struct.sv** %sv, align 8
  %72 = load %struct.hv*, %struct.hv** @PL_curstash, align 8
  %tobool87 = icmp ne %struct.hv* %72, null
  %73 = zext i1 %tobool87 to i64
  %cond88 = select i1 %tobool87, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.74, i64 0, i64 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.75, i64 0, i64 0)
  %74 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_filegv = getelementptr inbounds %struct.cop, %struct.cop* %74, i32 0, i32 9
  %75 = load %struct.gv*, %struct.gv** %cop_filegv, align 8
  %tobool89 = icmp ne %struct.gv* %75, null
  br i1 %tobool89, label %cond.true90, label %cond.false94

cond.true90:                                      ; preds = %if.then85
  %76 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_filegv91 = getelementptr inbounds %struct.cop, %struct.cop* %76, i32 0, i32 9
  %77 = load %struct.gv*, %struct.gv** %cop_filegv91, align 8
  %sv_any92 = getelementptr inbounds %struct.gv, %struct.gv* %77, i32 0, i32 0
  %78 = load %struct.xpvgv*, %struct.xpvgv** %sv_any92, align 8
  %xiv_u = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %78, i32 0, i32 4
  %xivu_namehek = bitcast %union._xivu* %xiv_u to %struct.hek**
  %79 = load %struct.hek*, %struct.hek** %xivu_namehek, align 8
  %hek_key = getelementptr inbounds %struct.hek, %struct.hek* %79, i32 0, i32 2
  %arraydecay = getelementptr inbounds [1 x i8], [1 x i8]* %hek_key, i64 0, i64 0
  %add.ptr93 = getelementptr inbounds i8, i8* %arraydecay, i64 2
  br label %cond.end95

cond.false94:                                     ; preds = %if.then85
  br label %cond.end95

cond.end95:                                       ; preds = %cond.false94, %cond.true90
  %cond96 = phi i8* [ %add.ptr93, %cond.true90 ], [ null, %cond.false94 ]
  %80 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_line97 = getelementptr inbounds %struct.cop, %struct.cop* %80, i32 0, i32 7
  %81 = load i32, i32* %cop_line97, align 4
  %conv98 = zext i32 %81 to i64
  call void (%struct.sv*, i8*, ...) @Perl_sv_setpvf(%struct.sv* %71, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.73, i64 0, i64 0), i8* %cond88, i8* %cond96, i64 %conv98)
  %82 = load %struct.sv*, %struct.sv** %sv, align 8
  %83 = load i32, i32* %gv_fetch_flags, align 4
  %call99 = call %struct.gv* @Perl_gv_fetchsv(%struct.sv* %82, i32 %83, i32 13)
  store %struct.gv* %call99, %struct.gv** %gv, align 8
  store i8 1, i8* %has_name, align 1
  br label %if.end106

if.else100:                                       ; preds = %land.lhs.true83, %if.else80
  %84 = load %struct.hv*, %struct.hv** @PL_curstash, align 8
  %tobool101 = icmp ne %struct.hv* %84, null
  br i1 %tobool101, label %if.then102, label %if.else104

if.then102:                                       ; preds = %if.else100
  %85 = load i32, i32* %gv_fetch_flags, align 4
  %call103 = call %struct.gv* @Perl_gv_fetchpvn_flags(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.74, i64 0, i64 0), i64 8, i32 %85, i32 13)
  store %struct.gv* %call103, %struct.gv** %gv, align 8
  store i8 0, i8* %has_name, align 1
  br label %if.end

if.else104:                                       ; preds = %if.else100
  %86 = load i32, i32* %gv_fetch_flags, align 4
  %call105 = call %struct.gv* @Perl_gv_fetchpvn_flags(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.75, i64 0, i64 0), i64 18, i32 %86, i32 13)
  store %struct.gv* %call105, %struct.gv** %gv, align 8
  store i8 0, i8* %has_name, align 1
  br label %if.end

if.end:                                           ; preds = %if.else104, %if.then102
  br label %if.end106

if.end106:                                        ; preds = %if.end, %cond.end95
  br label %if.end107

if.end107:                                        ; preds = %if.end106, %cond.end76
  br label %if.end108

if.end108:                                        ; preds = %if.end107, %if.then
  %87 = load i8, i8* %ec, align 1
  %tobool109 = trunc i8 %87 to i1
  br i1 %tobool109, label %if.end120, label %if.then110

if.then110:                                       ; preds = %if.end108
  %88 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_flags111 = getelementptr inbounds %struct.gv, %struct.gv* %88, i32 0, i32 2
  %89 = load i32, i32* %sv_flags111, align 4
  %and112 = and i32 %89, 255
  %cmp113 = icmp eq i32 %and112, 9
  br i1 %cmp113, label %cond.true115, label %cond.false116

cond.true115:                                     ; preds = %if.then110
  %90 = load %struct.gv*, %struct.gv** %gv, align 8
  br label %cond.end118

cond.false116:                                    ; preds = %if.then110
  %91 = load %struct.op*, %struct.op** %o.addr, align 8
  %92 = bitcast %struct.op* %91 to %struct.svop*
  %op_sv117 = getelementptr inbounds %struct.svop, %struct.svop* %92, i32 0, i32 7
  %93 = load %struct.sv*, %struct.sv** %op_sv117, align 8
  %94 = bitcast %struct.sv* %93 to %struct.gv*
  br label %cond.end118

cond.end118:                                      ; preds = %cond.false116, %cond.true115
  %cond119 = phi %struct.gv* [ %90, %cond.true115 ], [ %94, %cond.false116 ]
  call void @S_move_proto_attr(%struct.op** %proto.addr, %struct.op** %attrs.addr, %struct.gv* %cond119)
  br label %if.end120

if.end120:                                        ; preds = %cond.end118, %if.end108
  %95 = load %struct.op*, %struct.op** %proto.addr, align 8
  %tobool121 = icmp ne %struct.op* %95, null
  br i1 %tobool121, label %if.then122, label %if.else144

if.then122:                                       ; preds = %if.end120
  %96 = load %struct.op*, %struct.op** %proto.addr, align 8
  %97 = bitcast %struct.op* %96 to %struct.svop*
  %op_sv123 = getelementptr inbounds %struct.svop, %struct.svop* %97, i32 0, i32 7
  %98 = load %struct.sv*, %struct.sv** %op_sv123, align 8
  %sv_flags124 = getelementptr inbounds %struct.sv, %struct.sv* %98, i32 0, i32 2
  %99 = load i32, i32* %sv_flags124, align 4
  %and125 = and i32 %99, 2098176
  %cmp126 = icmp eq i32 %and125, 1024
  br i1 %cmp126, label %cond.true128, label %cond.false136

cond.true128:                                     ; preds = %if.then122
  %100 = load %struct.op*, %struct.op** %proto.addr, align 8
  %101 = bitcast %struct.op* %100 to %struct.svop*
  %op_sv129 = getelementptr inbounds %struct.svop, %struct.svop* %101, i32 0, i32 7
  %102 = load %struct.sv*, %struct.sv** %op_sv129, align 8
  %sv_any130 = getelementptr inbounds %struct.sv, %struct.sv* %102, i32 0, i32 0
  %103 = load i8*, i8** %sv_any130, align 8
  %104 = bitcast i8* %103 to %struct.xpv*
  %xpv_cur131 = getelementptr inbounds %struct.xpv, %struct.xpv* %104, i32 0, i32 2
  %105 = load i64, i64* %xpv_cur131, align 8
  store i64 %105, i64* %ps_len, align 8
  %106 = load %struct.op*, %struct.op** %proto.addr, align 8
  %107 = bitcast %struct.op* %106 to %struct.svop*
  %op_sv132 = getelementptr inbounds %struct.svop, %struct.svop* %107, i32 0, i32 7
  %108 = load %struct.sv*, %struct.sv** %op_sv132, align 8
  %sv_u133 = getelementptr inbounds %struct.sv, %struct.sv* %108, i32 0, i32 3
  %svu_pv134 = bitcast %union.anon* %sv_u133 to i8**
  %109 = load i8*, i8** %svu_pv134, align 8
  %add.ptr135 = getelementptr inbounds i8, i8* %109, i64 0
  br label %cond.end139

cond.false136:                                    ; preds = %if.then122
  %110 = load %struct.op*, %struct.op** %proto.addr, align 8
  %111 = bitcast %struct.op* %110 to %struct.svop*
  %op_sv137 = getelementptr inbounds %struct.svop, %struct.svop* %111, i32 0, i32 7
  %112 = load %struct.sv*, %struct.sv** %op_sv137, align 8
  %call138 = call i8* @Perl_sv_2pv_flags(%struct.sv* %112, i64* %ps_len, i32 34)
  br label %cond.end139

cond.end139:                                      ; preds = %cond.false136, %cond.true128
  %cond140 = phi i8* [ %add.ptr135, %cond.true128 ], [ %call138, %cond.false136 ]
  store i8* %cond140, i8** %ps, align 8
  %113 = load %struct.op*, %struct.op** %proto.addr, align 8
  %114 = bitcast %struct.op* %113 to %struct.svop*
  %op_sv141 = getelementptr inbounds %struct.svop, %struct.svop* %114, i32 0, i32 7
  %115 = load %struct.sv*, %struct.sv** %op_sv141, align 8
  %sv_flags142 = getelementptr inbounds %struct.sv, %struct.sv* %115, i32 0, i32 2
  %116 = load i32, i32* %sv_flags142, align 4
  %and143 = and i32 %116, 536870912
  store i32 %and143, i32* %ps_utf8, align 4
  br label %if.end145

if.else144:                                       ; preds = %if.end120
  store i8* null, i8** %ps, align 8
  br label %if.end145

if.end145:                                        ; preds = %if.else144, %cond.end139
  %117 = load %struct.op*, %struct.op** %o.addr, align 8
  %tobool146 = icmp ne %struct.op* %117, null
  br i1 %tobool146, label %if.then147, label %if.end148

if.then147:                                       ; preds = %if.end145
  br label %do.body

do.body:                                          ; preds = %if.then147
  %118 = load %struct.op*, %struct.op** %o.addr, align 8
  store %struct.op* %118, %struct.op** %_o, align 8
  %119 = load %struct.op*, %struct.op** %_o, align 8
  %op_savefree = getelementptr inbounds %struct.op, %struct.op* %119, i32 0, i32 4
  %bf.load = load i16, i16* %op_savefree, align 8
  %bf.clear = and i16 %bf.load, -2049
  %bf.set = or i16 %bf.clear, 2048
  store i16 %bf.set, i16* %op_savefree, align 8
  %120 = load %struct.op*, %struct.op** %_o, align 8
  %121 = bitcast %struct.op* %120 to i8*
  call void @Perl_save_pushptr(i8* %121, i32 9)
  br label %do.end

do.end:                                           ; preds = %do.body
  br label %if.end148

if.end148:                                        ; preds = %do.end, %if.end145
  %122 = load %struct.op*, %struct.op** %proto.addr, align 8
  %tobool149 = icmp ne %struct.op* %122, null
  br i1 %tobool149, label %if.then150, label %if.end158

if.then150:                                       ; preds = %if.end148
  br label %do.body151

do.body151:                                       ; preds = %if.then150
  %123 = load %struct.op*, %struct.op** %proto.addr, align 8
  store %struct.op* %123, %struct.op** %_o152, align 8
  %124 = load %struct.op*, %struct.op** %_o152, align 8
  %op_savefree153 = getelementptr inbounds %struct.op, %struct.op* %124, i32 0, i32 4
  %bf.load154 = load i16, i16* %op_savefree153, align 8
  %bf.clear155 = and i16 %bf.load154, -2049
  %bf.set156 = or i16 %bf.clear155, 2048
  store i16 %bf.set156, i16* %op_savefree153, align 8
  %125 = load %struct.op*, %struct.op** %_o152, align 8
  %126 = bitcast %struct.op* %125 to i8*
  call void @Perl_save_pushptr(i8* %126, i32 9)
  br label %do.end157

do.end157:                                        ; preds = %do.body151
  br label %if.end158

if.end158:                                        ; preds = %do.end157, %if.end148
  %127 = load %struct.op*, %struct.op** %attrs.addr, align 8
  %tobool159 = icmp ne %struct.op* %127, null
  br i1 %tobool159, label %if.then160, label %if.end168

if.then160:                                       ; preds = %if.end158
  br label %do.body161

do.body161:                                       ; preds = %if.then160
  %128 = load %struct.op*, %struct.op** %attrs.addr, align 8
  store %struct.op* %128, %struct.op** %_o162, align 8
  %129 = load %struct.op*, %struct.op** %_o162, align 8
  %op_savefree163 = getelementptr inbounds %struct.op, %struct.op* %129, i32 0, i32 4
  %bf.load164 = load i16, i16* %op_savefree163, align 8
  %bf.clear165 = and i16 %bf.load164, -2049
  %bf.set166 = or i16 %bf.clear165, 2048
  store i16 %bf.set166, i16* %op_savefree163, align 8
  %130 = load %struct.op*, %struct.op** %_o162, align 8
  %131 = bitcast %struct.op* %130 to i8*
  call void @Perl_save_pushptr(i8* %131, i32 9)
  br label %do.end167

do.end167:                                        ; preds = %do.body161
  br label %if.end168

if.end168:                                        ; preds = %do.end167, %if.end158
  %132 = load i8, i8* %ec, align 1
  %tobool169 = trunc i8 %132 to i1
  br i1 %tobool169, label %if.then170, label %if.end213

if.then170:                                       ; preds = %if.end168
  %133 = load %struct.op*, %struct.op** %block.addr, align 8
  call void @Perl_op_free(%struct.op* %133)
  %134 = load i8*, i8** %name, align 8
  %tobool171 = icmp ne i8* %134, null
  br i1 %tobool171, label %if.then172, label %if.else173

if.then172:                                       ; preds = %if.then170
  %135 = load %struct.cv*, %struct.cv** @PL_compcv, align 8
  %136 = bitcast %struct.cv* %135 to i8*
  %137 = bitcast i8* %136 to %struct.sv*
  call void @S_SvREFCNT_dec(%struct.sv* %137)
  br label %if.end174

if.else173:                                       ; preds = %if.then170
  %138 = load %struct.cv*, %struct.cv** @PL_compcv, align 8
  store %struct.cv* %138, %struct.cv** %cv, align 8
  br label %if.end174

if.end174:                                        ; preds = %if.else173, %if.then172
  store %struct.cv* null, %struct.cv** @PL_compcv, align 8
  %139 = load i8*, i8** %name, align 8
  %tobool175 = icmp ne i8* %139, null
  br i1 %tobool175, label %land.lhs.true176, label %if.end212

land.lhs.true176:                                 ; preds = %if.end174
  %140 = load %struct.op*, %struct.op** %block.addr, align 8
  %tobool177 = icmp ne %struct.op* %140, null
  br i1 %tobool177, label %if.then178, label %if.end212

if.then178:                                       ; preds = %land.lhs.true176
  %141 = load i8*, i8** %name, align 8
  %call179 = call i8* @strrchr(i8* %141, i32 58) #7
  store i8* %call179, i8** %s, align 8
  %142 = load i8*, i8** %s, align 8
  %tobool180 = icmp ne i8* %142, null
  br i1 %tobool180, label %cond.true181, label %cond.false183

cond.true181:                                     ; preds = %if.then178
  %143 = load i8*, i8** %s, align 8
  %add.ptr182 = getelementptr inbounds i8, i8* %143, i64 1
  br label %cond.end184

cond.false183:                                    ; preds = %if.then178
  %144 = load i8*, i8** %name, align 8
  br label %cond.end184

cond.end184:                                      ; preds = %cond.false183, %cond.true181
  %cond185 = phi i8* [ %add.ptr182, %cond.true181 ], [ %144, %cond.false183 ]
  store i8* %cond185, i8** %s, align 8
  %145 = load i8*, i8** %s, align 8
  %call186 = call i32 @strcmp(i8* %145, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.57, i64 0, i64 0)) #7
  %tobool187 = icmp ne i32 %call186, 0
  br i1 %tobool187, label %if.end211, label %if.then188

if.then188:                                       ; preds = %cond.end184
  %146 = load i8, i8* @PL_in_eval, align 1
  %conv189 = zext i8 %146 to i32
  %and190 = and i32 %conv189, 4
  %tobool191 = icmp ne i32 %and190, 0
  br i1 %tobool191, label %if.then192, label %if.else193

if.then192:                                       ; preds = %if.then188
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.76, i64 0, i64 0))
  br label %if.end210

if.else193:                                       ; preds = %if.then188
  %147 = load %struct.gv*, %struct.gv** @PL_errgv, align 8
  %sv_u194 = getelementptr inbounds %struct.gv, %struct.gv* %147, i32 0, i32 3
  %svu_gp = bitcast %union.anon.3* %sv_u194 to %struct.gp**
  %148 = load %struct.gp*, %struct.gp** %svu_gp, align 8
  %add.ptr195 = getelementptr inbounds %struct.gp, %struct.gp* %148, i64 0
  %gp_sv = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr195, i32 0, i32 0
  %149 = load %struct.sv*, %struct.sv** %gp_sv, align 8
  %tobool196 = icmp ne %struct.sv* %149, null
  br i1 %tobool196, label %cond.true197, label %cond.false202

cond.true197:                                     ; preds = %if.else193
  %150 = load %struct.gv*, %struct.gv** @PL_errgv, align 8
  %sv_u198 = getelementptr inbounds %struct.gv, %struct.gv* %150, i32 0, i32 3
  %svu_gp199 = bitcast %union.anon.3* %sv_u198 to %struct.gp**
  %151 = load %struct.gp*, %struct.gp** %svu_gp199, align 8
  %add.ptr200 = getelementptr inbounds %struct.gp, %struct.gp* %151, i64 0
  %gp_sv201 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr200, i32 0, i32 0
  br label %cond.end208

cond.false202:                                    ; preds = %if.else193
  %152 = load %struct.gv*, %struct.gv** @PL_errgv, align 8
  %call203 = call %struct.gv* @Perl_gv_add_by_type(%struct.gv* %152, i32 0)
  %sv_u204 = getelementptr inbounds %struct.gv, %struct.gv* %call203, i32 0, i32 3
  %svu_gp205 = bitcast %union.anon.3* %sv_u204 to %struct.gp**
  %153 = load %struct.gp*, %struct.gp** %svu_gp205, align 8
  %add.ptr206 = getelementptr inbounds %struct.gp, %struct.gp* %153, i64 0
  %gp_sv207 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr206, i32 0, i32 0
  br label %cond.end208

cond.end208:                                      ; preds = %cond.false202, %cond.true197
  %cond209 = phi %struct.sv** [ %gp_sv201, %cond.true197 ], [ %gp_sv207, %cond.false202 ]
  %154 = load %struct.sv*, %struct.sv** %cond209, align 8
  store %struct.sv* %154, %struct.sv** %errsv, align 8
  %155 = load %struct.sv*, %struct.sv** %errsv, align 8
  call void @Perl_sv_catpvn_flags(%struct.sv* %155, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.76, i64 0, i64 0), i64 48, i32 2)
  %156 = load %struct.sv*, %struct.sv** %errsv, align 8
  %157 = bitcast %struct.sv* %156 to i8*
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.69, i64 0, i64 0), i8* %157)
  br label %if.end210

if.end210:                                        ; preds = %cond.end208, %if.then192
  br label %if.end211

if.end211:                                        ; preds = %if.end210, %cond.end184
  br label %if.end212

if.end212:                                        ; preds = %if.end211, %land.lhs.true176, %if.end174
  br label %done

if.end213:                                        ; preds = %if.end168
  %158 = load %struct.op*, %struct.op** %block.addr, align 8
  %tobool214 = icmp ne %struct.op* %158, null
  br i1 %tobool214, label %if.end268, label %land.lhs.true215

land.lhs.true215:                                 ; preds = %if.end213
  %159 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_flags216 = getelementptr inbounds %struct.gv, %struct.gv* %159, i32 0, i32 2
  %160 = load i32, i32* %sv_flags216, align 4
  %and217 = and i32 %160, 255
  %cmp218 = icmp ne i32 %and217, 9
  br i1 %cmp218, label %if.then220, label %if.end268

if.then220:                                       ; preds = %land.lhs.true215
  %161 = load %struct.op*, %struct.op** %attrs.addr, align 8
  %tobool221 = icmp ne %struct.op* %161, null
  br i1 %tobool221, label %if.then227, label %lor.lhs.false222

lor.lhs.false222:                                 ; preds = %if.then220
  %162 = load %struct.cv*, %struct.cv** @PL_compcv, align 8
  %sv_any223 = getelementptr inbounds %struct.cv, %struct.cv* %162, i32 0, i32 0
  %163 = load %struct.xpvcv*, %struct.xpvcv** %sv_any223, align 8
  %164 = bitcast %struct.xpvcv* %163 to i8*
  %165 = bitcast i8* %164 to %struct.xpvcv*
  %xcv_flags224 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %165, i32 0, i32 12
  %166 = load i32, i32* %xcv_flags224, align 4
  %and225 = and i32 %166, 131075
  %tobool226 = icmp ne i32 %and225, 0
  br i1 %tobool226, label %if.then227, label %if.else241

if.then227:                                       ; preds = %lor.lhs.false222, %if.then220
  %167 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_flags228 = getelementptr inbounds %struct.gv, %struct.gv* %167, i32 0, i32 2
  %168 = load i32, i32* %sv_flags228, align 4
  %and229 = and i32 %168, 2048
  %tobool230 = icmp ne i32 %and229, 0
  br i1 %tobool230, label %land.lhs.true231, label %if.end240

land.lhs.true231:                                 ; preds = %if.then227
  %169 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u232 = getelementptr inbounds %struct.gv, %struct.gv* %169, i32 0, i32 3
  %svu_rv = bitcast %union.anon.3* %sv_u232 to %struct.sv**
  %170 = load %struct.sv*, %struct.sv** %svu_rv, align 8
  %sv_flags233 = getelementptr inbounds %struct.sv, %struct.sv* %170, i32 0, i32 2
  %171 = load i32, i32* %sv_flags233, align 4
  %and234 = and i32 %171, 255
  %cmp235 = icmp ne i32 %and234, 13
  br i1 %cmp235, label %if.then237, label %if.end240

if.then237:                                       ; preds = %land.lhs.true231
  %172 = load %struct.gv*, %struct.gv** %gv, align 8
  %173 = load %struct.hv*, %struct.hv** @PL_curstash, align 8
  %174 = load i8*, i8** %name, align 8
  %175 = load i64, i64* %namlen, align 8
  %176 = load i8, i8* %name_is_utf8, align 1
  %tobool238 = trunc i8 %176 to i1
  %conv239 = zext i1 %tobool238 to i32
  %mul = mul nsw i32 536870912, %conv239
  call void @Perl_gv_init_pvn(%struct.gv* %172, %struct.hv* %173, i8* %174, i64 %175, i32 %mul)
  br label %if.end240

if.end240:                                        ; preds = %if.then237, %land.lhs.true231, %if.then227
  br label %if.end267

if.else241:                                       ; preds = %lor.lhs.false222
  %177 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_flags242 = getelementptr inbounds %struct.gv, %struct.gv* %177, i32 0, i32 2
  %178 = load i32, i32* %sv_flags242, align 4
  %and243 = and i32 %178, 255
  %cmp244 = icmp ugt i32 %and243, 0
  br i1 %cmp244, label %if.then246, label %if.end253

if.then246:                                       ; preds = %if.else241
  %179 = load %struct.gv*, %struct.gv** %gv, align 8
  %180 = bitcast %struct.gv* %179 to %struct.cv*
  %181 = load %struct.op*, %struct.op** %o.addr, align 8
  %tobool247 = icmp ne %struct.op* %181, null
  br i1 %tobool247, label %cond.true248, label %cond.false250

cond.true248:                                     ; preds = %if.then246
  %182 = load %struct.op*, %struct.op** %o.addr, align 8
  %183 = bitcast %struct.op* %182 to %struct.svop*
  %op_sv249 = getelementptr inbounds %struct.svop, %struct.svop* %183, i32 0, i32 7
  %184 = load %struct.sv*, %struct.sv** %op_sv249, align 8
  %185 = bitcast %struct.sv* %184 to %struct.gv*
  br label %cond.end251

cond.false250:                                    ; preds = %if.then246
  br label %cond.end251

cond.end251:                                      ; preds = %cond.false250, %cond.true248
  %cond252 = phi %struct.gv* [ %185, %cond.true248 ], [ null, %cond.false250 ]
  %186 = load i8*, i8** %ps, align 8
  %187 = load i64, i64* %ps_len, align 8
  %188 = load i32, i32* %ps_utf8, align 4
  call void @Perl_cv_ckproto_len_flags(%struct.cv* %180, %struct.gv* %cond252, i8* %186, i64 %187, i32 %188)
  br label %if.end253

if.end253:                                        ; preds = %cond.end251, %if.else241
  %189 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_flags254 = getelementptr inbounds %struct.gv, %struct.gv* %189, i32 0, i32 2
  %190 = load i32, i32* %sv_flags254, align 4
  %and255 = and i32 %190, 2048
  %tobool256 = icmp ne i32 %and255, 0
  br i1 %tobool256, label %if.end266, label %if.then257

if.then257:                                       ; preds = %if.end253
  %191 = load i8*, i8** %ps, align 8
  %tobool258 = icmp ne i8* %191, null
  br i1 %tobool258, label %if.then259, label %if.else264

if.then259:                                       ; preds = %if.then257
  %192 = load %struct.gv*, %struct.gv** %gv, align 8
  %193 = bitcast %struct.gv* %192 to i8*
  %194 = bitcast i8* %193 to %struct.sv*
  %195 = load i8*, i8** %ps, align 8
  %196 = load i64, i64* %ps_len, align 8
  call void @Perl_sv_setpvn(%struct.sv* %194, i8* %195, i64 %196)
  %197 = load i32, i32* %ps_utf8, align 4
  %tobool260 = icmp ne i32 %197, 0
  br i1 %tobool260, label %if.then261, label %if.end263

if.then261:                                       ; preds = %if.then259
  %198 = load %struct.gv*, %struct.gv** %gv, align 8
  %199 = bitcast %struct.gv* %198 to i8*
  %200 = bitcast i8* %199 to %struct.sv*
  %sv_flags262 = getelementptr inbounds %struct.sv, %struct.sv* %200, i32 0, i32 2
  %201 = load i32, i32* %sv_flags262, align 4
  %or = or i32 %201, 536870912
  store i32 %or, i32* %sv_flags262, align 4
  br label %if.end263

if.end263:                                        ; preds = %if.then261, %if.then259
  br label %if.end265

if.else264:                                       ; preds = %if.then257
  %202 = load %struct.gv*, %struct.gv** %gv, align 8
  %203 = bitcast %struct.gv* %202 to i8*
  %204 = bitcast i8* %203 to %struct.sv*
  call void @Perl_sv_setiv(%struct.sv* %204, i64 -1)
  br label %if.end265

if.end265:                                        ; preds = %if.else264, %if.end263
  br label %if.end266

if.end266:                                        ; preds = %if.end265, %if.end253
  %205 = load %struct.cv*, %struct.cv** @PL_compcv, align 8
  %206 = bitcast %struct.cv* %205 to i8*
  %207 = bitcast i8* %206 to %struct.sv*
  call void @S_SvREFCNT_dec(%struct.sv* %207)
  store %struct.cv* null, %struct.cv** @PL_compcv, align 8
  store %struct.cv* null, %struct.cv** %cv, align 8
  br label %done

if.end267:                                        ; preds = %if.end240
  br label %if.end268

if.end268:                                        ; preds = %if.end267, %land.lhs.true215, %if.end213
  %208 = load i8*, i8** %name, align 8
  %tobool269 = icmp ne i8* %208, null
  br i1 %tobool269, label %lor.lhs.false270, label %cond.true280

lor.lhs.false270:                                 ; preds = %if.end268
  %209 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_flags271 = getelementptr inbounds %struct.gv, %struct.gv* %209, i32 0, i32 2
  %210 = load i32, i32* %sv_flags271, align 4
  %and272 = and i32 %210, 255
  %cmp273 = icmp eq i32 %and272, 9
  br i1 %cmp273, label %land.lhs.true275, label %cond.false281

land.lhs.true275:                                 ; preds = %lor.lhs.false270
  %211 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u276 = getelementptr inbounds %struct.gv, %struct.gv* %211, i32 0, i32 3
  %svu_gp277 = bitcast %union.anon.3* %sv_u276 to %struct.gp**
  %212 = load %struct.gp*, %struct.gp** %svu_gp277, align 8
  %add.ptr278 = getelementptr inbounds %struct.gp, %struct.gp* %212, i64 0
  %gp_cvgen = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr278, i32 0, i32 3
  %213 = load i32, i32* %gp_cvgen, align 8
  %tobool279 = icmp ne i32 %213, 0
  br i1 %tobool279, label %cond.true280, label %cond.false281

cond.true280:                                     ; preds = %land.lhs.true275, %if.end268
  br label %cond.end310

cond.false281:                                    ; preds = %land.lhs.true275, %lor.lhs.false270
  %214 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_flags282 = getelementptr inbounds %struct.gv, %struct.gv* %214, i32 0, i32 2
  %215 = load i32, i32* %sv_flags282, align 4
  %and283 = and i32 %215, 255
  %cmp284 = icmp eq i32 %and283, 9
  br i1 %cmp284, label %cond.true286, label %cond.false291

cond.true286:                                     ; preds = %cond.false281
  %216 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u287 = getelementptr inbounds %struct.gv, %struct.gv* %216, i32 0, i32 3
  %svu_gp288 = bitcast %union.anon.3* %sv_u287 to %struct.gp**
  %217 = load %struct.gp*, %struct.gp** %svu_gp288, align 8
  %add.ptr289 = getelementptr inbounds %struct.gp, %struct.gp* %217, i64 0
  %gp_cv = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr289, i32 0, i32 2
  %218 = load %struct.cv*, %struct.cv** %gp_cv, align 8
  %add.ptr290 = getelementptr inbounds %struct.cv, %struct.cv* %218, i64 0
  br label %cond.end308

cond.false291:                                    ; preds = %cond.false281
  %219 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_flags292 = getelementptr inbounds %struct.gv, %struct.gv* %219, i32 0, i32 2
  %220 = load i32, i32* %sv_flags292, align 4
  %and293 = and i32 %220, 2048
  %tobool294 = icmp ne i32 %and293, 0
  br i1 %tobool294, label %land.lhs.true295, label %cond.false305

land.lhs.true295:                                 ; preds = %cond.false291
  %221 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u296 = getelementptr inbounds %struct.gv, %struct.gv* %221, i32 0, i32 3
  %svu_rv297 = bitcast %union.anon.3* %sv_u296 to %struct.sv**
  %222 = load %struct.sv*, %struct.sv** %svu_rv297, align 8
  %sv_flags298 = getelementptr inbounds %struct.sv, %struct.sv* %222, i32 0, i32 2
  %223 = load i32, i32* %sv_flags298, align 4
  %and299 = and i32 %223, 255
  %cmp300 = icmp eq i32 %and299, 13
  br i1 %cmp300, label %cond.true302, label %cond.false305

cond.true302:                                     ; preds = %land.lhs.true295
  %224 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u303 = getelementptr inbounds %struct.gv, %struct.gv* %224, i32 0, i32 3
  %svu_rv304 = bitcast %union.anon.3* %sv_u303 to %struct.sv**
  %225 = load %struct.sv*, %struct.sv** %svu_rv304, align 8
  %226 = bitcast %struct.sv* %225 to %struct.cv*
  br label %cond.end306

cond.false305:                                    ; preds = %land.lhs.true295, %cond.false291
  br label %cond.end306

cond.end306:                                      ; preds = %cond.false305, %cond.true302
  %cond307 = phi %struct.cv* [ %226, %cond.true302 ], [ null, %cond.false305 ]
  br label %cond.end308

cond.end308:                                      ; preds = %cond.end306, %cond.true286
  %cond309 = phi %struct.cv* [ %add.ptr290, %cond.true286 ], [ %cond307, %cond.end306 ]
  br label %cond.end310

cond.end310:                                      ; preds = %cond.end308, %cond.true280
  %cond311 = phi %struct.cv* [ null, %cond.true280 ], [ %cond309, %cond.end308 ]
  store %struct.cv* %cond311, %struct.cv** %cv, align 8
  %227 = load %struct.op*, %struct.op** %block.addr, align 8
  %tobool312 = icmp ne %struct.op* %227, null
  br i1 %tobool312, label %if.then313, label %if.end367

if.then313:                                       ; preds = %cond.end310
  %228 = load %struct.op*, %struct.op** %block.addr, align 8
  %op_type = getelementptr inbounds %struct.op, %struct.op* %228, i32 0, i32 4
  %bf.load314 = load i16, i16* %op_type, align 8
  %bf.clear315 = and i16 %bf.load314, 511
  %bf.cast = zext i16 %bf.clear315 to i32
  %cmp316 = icmp eq i32 %bf.cast, 1
  br i1 %cmp316, label %if.then318, label %if.end321

if.then318:                                       ; preds = %if.then313
  %229 = load %struct.yy_parser*, %struct.yy_parser** @PL_parser, align 8
  %copline = getelementptr inbounds %struct.yy_parser, %struct.yy_parser* %229, i32 0, i32 41
  %230 = load i32, i32* %copline, align 8
  store i32 %230, i32* %l, align 4
  %231 = load %struct.op*, %struct.op** %block.addr, align 8
  call void @Perl_op_free(%struct.op* %231)
  %call319 = call %struct.op* @Perl_newSTATEOP(i32 0, i8* null, %struct.op* null)
  store %struct.op* %call319, %struct.op** %block.addr, align 8
  %232 = load i32, i32* %l, align 4
  %233 = load %struct.yy_parser*, %struct.yy_parser** @PL_parser, align 8
  %copline320 = getelementptr inbounds %struct.yy_parser, %struct.yy_parser* %233, i32 0, i32 41
  store i32 %232, i32* %copline320, align 8
  br label %if.end321

if.end321:                                        ; preds = %if.then318, %if.then313
  %234 = load %struct.cv*, %struct.cv** @PL_compcv, align 8
  %sv_any322 = getelementptr inbounds %struct.cv, %struct.cv* %234, i32 0, i32 0
  %235 = load %struct.xpvcv*, %struct.xpvcv** %sv_any322, align 8
  %236 = bitcast %struct.xpvcv* %235 to i8*
  %237 = bitcast i8* %236 to %struct.xpvcv*
  %xcv_flags323 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %237, i32 0, i32 12
  %238 = load i32, i32* %xcv_flags323, align 4
  %and324 = and i32 %238, 2
  %tobool325 = icmp ne i32 %and324, 0
  br i1 %tobool325, label %cond.true350, label %lor.lhs.false326

lor.lhs.false326:                                 ; preds = %if.end321
  %239 = load %struct.cv*, %struct.cv** %cv, align 8
  %tobool327 = icmp ne %struct.cv* %239, null
  br i1 %tobool327, label %land.lhs.true328, label %cond.false354

land.lhs.true328:                                 ; preds = %lor.lhs.false326
  %240 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any329 = getelementptr inbounds %struct.cv, %struct.cv* %240, i32 0, i32 0
  %241 = load %struct.xpvcv*, %struct.xpvcv** %sv_any329, align 8
  %242 = bitcast %struct.xpvcv* %241 to i8*
  %243 = bitcast i8* %242 to %struct.xpvcv*
  %xcv_flags330 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %243, i32 0, i32 12
  %244 = load i32, i32* %xcv_flags330, align 4
  %and331 = and i32 %244, 2
  %tobool332 = icmp ne i32 %and331, 0
  br i1 %tobool332, label %land.lhs.true333, label %cond.false354

land.lhs.true333:                                 ; preds = %land.lhs.true328
  %245 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any334 = getelementptr inbounds %struct.cv, %struct.cv* %245, i32 0, i32 0
  %246 = load %struct.xpvcv*, %struct.xpvcv** %sv_any334, align 8
  %247 = bitcast %struct.xpvcv* %246 to i8*
  %248 = bitcast i8* %247 to %struct.xpvcv*
  %xcv_root_u = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %248, i32 0, i32 6
  %xcv_root = bitcast %union.anon.7* %xcv_root_u to %struct.op**
  %249 = load %struct.op*, %struct.op** %xcv_root, align 8
  %tobool335 = icmp ne %struct.op* %249, null
  br i1 %tobool335, label %cond.false354, label %land.lhs.true336

land.lhs.true336:                                 ; preds = %land.lhs.true333
  %250 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any337 = getelementptr inbounds %struct.cv, %struct.cv* %250, i32 0, i32 0
  %251 = load %struct.xpvcv*, %struct.xpvcv** %sv_any337, align 8
  %252 = bitcast %struct.xpvcv* %251 to i8*
  %253 = bitcast i8* %252 to %struct.xpvcv*
  %xcv_root_u338 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %253, i32 0, i32 6
  %xcv_xsub = bitcast %union.anon.7* %xcv_root_u338 to void (%struct.cv*)**
  %254 = load void (%struct.cv*)*, void (%struct.cv*)** %xcv_xsub, align 8
  %tobool339 = icmp ne void (%struct.cv*)* %254, null
  br i1 %tobool339, label %cond.false354, label %land.lhs.true340

land.lhs.true340:                                 ; preds = %land.lhs.true336
  %255 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_flags341 = getelementptr inbounds %struct.gv, %struct.gv* %255, i32 0, i32 2
  %256 = load i32, i32* %sv_flags341, align 4
  %and342 = and i32 %256, 255
  %cmp343 = icmp eq i32 %and342, 9
  br i1 %cmp343, label %lor.lhs.false345, label %cond.true350

lor.lhs.false345:                                 ; preds = %land.lhs.true340
  %257 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_any346 = getelementptr inbounds %struct.gv, %struct.gv* %257, i32 0, i32 0
  %258 = load %struct.xpvgv*, %struct.xpvgv** %sv_any346, align 8
  %xpv_cur347 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %258, i32 0, i32 2
  %259 = load i64, i64* %xpv_cur347, align 8
  %and348 = and i64 %259, 4
  %tobool349 = icmp ne i64 %and348, 0
  br i1 %tobool349, label %cond.false354, label %cond.true350

cond.true350:                                     ; preds = %lor.lhs.false345, %land.lhs.true340, %if.end321
  %260 = load %struct.op*, %struct.op** %block.addr, align 8
  %call351 = call %struct.op* @S_scalarseq(%struct.op* %260)
  %call352 = call %struct.op* @Perl_op_lvalue_flags(%struct.op* %call351, i32 187, i32 0)
  %call353 = call %struct.op* @Perl_newUNOP(i32 187, i32 0, %struct.op* %call352)
  br label %cond.end357

cond.false354:                                    ; preds = %lor.lhs.false345, %land.lhs.true336, %land.lhs.true333, %land.lhs.true328, %lor.lhs.false326
  %261 = load %struct.op*, %struct.op** %block.addr, align 8
  %call355 = call %struct.op* @S_scalarseq(%struct.op* %261)
  %call356 = call %struct.op* @Perl_newUNOP(i32 186, i32 0, %struct.op* %call355)
  br label %cond.end357

cond.end357:                                      ; preds = %cond.false354, %cond.true350
  %cond358 = phi %struct.op* [ %call353, %cond.true350 ], [ %call356, %cond.false354 ]
  store %struct.op* %cond358, %struct.op** %block.addr, align 8
  %262 = load %struct.op*, %struct.op** %block.addr, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %262, i32 0, i32 0
  %263 = load %struct.op*, %struct.op** %op_next, align 8
  %tobool359 = icmp ne %struct.op* %263, null
  br i1 %tobool359, label %cond.true360, label %cond.false362

cond.true360:                                     ; preds = %cond.end357
  %264 = load %struct.op*, %struct.op** %block.addr, align 8
  %op_next361 = getelementptr inbounds %struct.op, %struct.op* %264, i32 0, i32 0
  %265 = load %struct.op*, %struct.op** %op_next361, align 8
  br label %cond.end364

cond.false362:                                    ; preds = %cond.end357
  %266 = load %struct.op*, %struct.op** %block.addr, align 8
  %call363 = call %struct.op* @Perl_op_linklist(%struct.op* %266)
  br label %cond.end364

cond.end364:                                      ; preds = %cond.false362, %cond.true360
  %cond365 = phi %struct.op* [ %265, %cond.true360 ], [ %call363, %cond.false362 ]
  store %struct.op* %cond365, %struct.op** %start, align 8
  %267 = load %struct.op*, %struct.op** %block.addr, align 8
  %op_next366 = getelementptr inbounds %struct.op, %struct.op* %267, i32 0, i32 0
  store %struct.op* null, %struct.op** %op_next366, align 8
  br label %if.end367

if.end367:                                        ; preds = %cond.end364, %cond.end310
  %268 = load %struct.op*, %struct.op** %block.addr, align 8
  %tobool368 = icmp ne %struct.op* %268, null
  br i1 %tobool368, label %lor.lhs.false369, label %if.then381

lor.lhs.false369:                                 ; preds = %if.end367
  %269 = load i8*, i8** %ps, align 8
  %tobool370 = icmp ne i8* %269, null
  br i1 %tobool370, label %lor.lhs.false371, label %if.then381

lor.lhs.false371:                                 ; preds = %lor.lhs.false369
  %270 = load i8*, i8** %ps, align 8
  %271 = load i8, i8* %270, align 1
  %conv372 = sext i8 %271 to i32
  %tobool373 = icmp ne i32 %conv372, 0
  br i1 %tobool373, label %if.then381, label %lor.lhs.false374

lor.lhs.false374:                                 ; preds = %lor.lhs.false371
  %272 = load %struct.op*, %struct.op** %attrs.addr, align 8
  %tobool375 = icmp ne %struct.op* %272, null
  br i1 %tobool375, label %if.then381, label %lor.lhs.false376

lor.lhs.false376:                                 ; preds = %lor.lhs.false374
  %273 = load %struct.cv*, %struct.cv** @PL_compcv, align 8
  %sv_any377 = getelementptr inbounds %struct.cv, %struct.cv* %273, i32 0, i32 0
  %274 = load %struct.xpvcv*, %struct.xpvcv** %sv_any377, align 8
  %275 = bitcast %struct.xpvcv* %274 to i8*
  %276 = bitcast i8* %275 to %struct.xpvcv*
  %xcv_flags378 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %276, i32 0, i32 12
  %277 = load i32, i32* %xcv_flags378, align 4
  %and379 = and i32 %277, 2
  %tobool380 = icmp ne i32 %and379, 0
  br i1 %tobool380, label %if.then381, label %if.else382

if.then381:                                       ; preds = %lor.lhs.false376, %lor.lhs.false374, %lor.lhs.false371, %lor.lhs.false369, %if.end367
  store %struct.sv* null, %struct.sv** %const_sv, align 8
  br label %if.end390

if.else382:                                       ; preds = %lor.lhs.false376
  %278 = load %struct.op*, %struct.op** %start, align 8
  %279 = load %struct.cv*, %struct.cv** @PL_compcv, align 8
  %280 = load %struct.cv*, %struct.cv** @PL_compcv, align 8
  %sv_any383 = getelementptr inbounds %struct.cv, %struct.cv* %280, i32 0, i32 0
  %281 = load %struct.xpvcv*, %struct.xpvcv** %sv_any383, align 8
  %282 = bitcast %struct.xpvcv* %281 to i8*
  %283 = bitcast i8* %282 to %struct.xpvcv*
  %xcv_flags384 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %283, i32 0, i32 12
  %284 = load i32, i32* %xcv_flags384, align 4
  %and385 = and i32 %284, 32
  %tobool386 = icmp ne i32 %and385, 0
  %285 = zext i1 %tobool386 to i64
  %cond387 = select i1 %tobool386, i32 1, i32 0
  %tobool388 = icmp ne i32 %cond387, 0
  %call389 = call %struct.sv* @S_op_const_sv(%struct.op* %278, %struct.cv* %279, i1 zeroext %tobool388)
  store %struct.sv* %call389, %struct.sv** %const_sv, align 8
  br label %if.end390

if.end390:                                        ; preds = %if.else382, %if.then381
  %286 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_flags391 = getelementptr inbounds %struct.gv, %struct.gv* %286, i32 0, i32 2
  %287 = load i32, i32* %sv_flags391, align 4
  %and392 = and i32 %287, 1024
  %tobool393 = icmp ne i32 %and392, 0
  br i1 %tobool393, label %if.then405, label %lor.lhs.false394

lor.lhs.false394:                                 ; preds = %if.end390
  %288 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_flags395 = getelementptr inbounds %struct.gv, %struct.gv* %288, i32 0, i32 2
  %289 = load i32, i32* %sv_flags395, align 4
  %and396 = and i32 %289, 2048
  %tobool397 = icmp ne i32 %and396, 0
  br i1 %tobool397, label %land.lhs.true398, label %if.end451

land.lhs.true398:                                 ; preds = %lor.lhs.false394
  %290 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u399 = getelementptr inbounds %struct.gv, %struct.gv* %290, i32 0, i32 3
  %svu_rv400 = bitcast %union.anon.3* %sv_u399 to %struct.sv**
  %291 = load %struct.sv*, %struct.sv** %svu_rv400, align 8
  %sv_flags401 = getelementptr inbounds %struct.sv, %struct.sv* %291, i32 0, i32 2
  %292 = load i32, i32* %sv_flags401, align 4
  %and402 = and i32 %292, 255
  %cmp403 = icmp ne i32 %and402, 13
  br i1 %cmp403, label %if.then405, label %if.end451

if.then405:                                       ; preds = %land.lhs.true398, %if.end390
  %293 = load %struct.gv*, %struct.gv** %gv, align 8
  %294 = bitcast %struct.gv* %293 to %struct.cv*
  %295 = load %struct.op*, %struct.op** %o.addr, align 8
  %tobool406 = icmp ne %struct.op* %295, null
  br i1 %tobool406, label %cond.true407, label %cond.false409

cond.true407:                                     ; preds = %if.then405
  %296 = load %struct.op*, %struct.op** %o.addr, align 8
  %297 = bitcast %struct.op* %296 to %struct.svop*
  %op_sv408 = getelementptr inbounds %struct.svop, %struct.svop* %297, i32 0, i32 7
  %298 = load %struct.sv*, %struct.sv** %op_sv408, align 8
  %299 = bitcast %struct.sv* %298 to %struct.gv*
  br label %cond.end410

cond.false409:                                    ; preds = %if.then405
  br label %cond.end410

cond.end410:                                      ; preds = %cond.false409, %cond.true407
  %cond411 = phi %struct.gv* [ %299, %cond.true407 ], [ null, %cond.false409 ]
  %300 = load i8*, i8** %ps, align 8
  %301 = load i64, i64* %ps_len, align 8
  %302 = load i32, i32* %ps_utf8, align 4
  %or412 = or i32 %302, 1
  call void @Perl_cv_ckproto_len_flags(%struct.cv* %294, %struct.gv* %cond411, i8* %300, i64 %301, i32 %or412)
  %303 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_flags413 = getelementptr inbounds %struct.gv, %struct.gv* %303, i32 0, i32 2
  %304 = load i32, i32* %sv_flags413, align 4
  %and414 = and i32 %304, 2048
  %tobool415 = icmp ne i32 %and414, 0
  br i1 %tobool415, label %if.then416, label %if.end450

if.then416:                                       ; preds = %cond.end410
  %305 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_line417 = getelementptr inbounds %struct.cop, %struct.cop* %305, i32 0, i32 7
  %306 = load i32, i32* %cop_line417, align 4
  store i32 %306, i32* %oldline, align 4
  %307 = load %struct.yy_parser*, %struct.yy_parser** @PL_parser, align 8
  %tobool418 = icmp ne %struct.yy_parser* %307, null
  br i1 %tobool418, label %land.lhs.true419, label %if.end426

land.lhs.true419:                                 ; preds = %if.then416
  %308 = load %struct.yy_parser*, %struct.yy_parser** @PL_parser, align 8
  %copline420 = getelementptr inbounds %struct.yy_parser, %struct.yy_parser* %308, i32 0, i32 41
  %309 = load i32, i32* %copline420, align 8
  %cmp421 = icmp ne i32 %309, -1
  br i1 %cmp421, label %if.then423, label %if.end426

if.then423:                                       ; preds = %land.lhs.true419
  %310 = load %struct.yy_parser*, %struct.yy_parser** @PL_parser, align 8
  %copline424 = getelementptr inbounds %struct.yy_parser, %struct.yy_parser* %310, i32 0, i32 41
  %311 = load i32, i32* %copline424, align 8
  %312 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_line425 = getelementptr inbounds %struct.cop, %struct.cop* %312, i32 0, i32 7
  store i32 %311, i32* %cop_line425, align 4
  br label %if.end426

if.end426:                                        ; preds = %if.then423, %land.lhs.true419, %if.then416
  %313 = load %struct.cv*, %struct.cv** @PL_compcv, align 8
  %314 = bitcast %struct.cv* %313 to i8*
  %315 = bitcast i8* %314 to %struct.sv*
  %316 = bitcast %struct.sv* %315 to i8*
  call void @Perl_save_pushptr(i8* %316, i32 11)
  %call427 = call zeroext i1 @Perl_ckwarn(i32 19)
  br i1 %call427, label %if.then444, label %lor.lhs.false429

lor.lhs.false429:                                 ; preds = %if.end426
  %call430 = call zeroext i1 @Perl_ckwarn_d(i32 19)
  br i1 %call430, label %land.lhs.true432, label %if.end446

land.lhs.true432:                                 ; preds = %lor.lhs.false429
  %317 = load %struct.sv*, %struct.sv** %const_sv, align 8
  %tobool433 = icmp ne %struct.sv* %317, null
  br i1 %tobool433, label %lor.lhs.false434, label %if.then444

lor.lhs.false434:                                 ; preds = %land.lhs.true432
  %318 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u435 = getelementptr inbounds %struct.gv, %struct.gv* %318, i32 0, i32 3
  %svu_rv436 = bitcast %union.anon.3* %sv_u435 to %struct.sv**
  %319 = load %struct.sv*, %struct.sv** %svu_rv436, align 8
  %320 = load %struct.sv*, %struct.sv** %const_sv, align 8
  %cmp437 = icmp eq %struct.sv* %319, %320
  br i1 %cmp437, label %if.then444, label %lor.lhs.false439

lor.lhs.false439:                                 ; preds = %lor.lhs.false434
  %321 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u440 = getelementptr inbounds %struct.gv, %struct.gv* %321, i32 0, i32 3
  %svu_rv441 = bitcast %union.anon.3* %sv_u440 to %struct.sv**
  %322 = load %struct.sv*, %struct.sv** %svu_rv441, align 8
  %323 = load %struct.sv*, %struct.sv** %const_sv, align 8
  %call442 = call i32 @Perl_sv_cmp_flags(%struct.sv* %322, %struct.sv* %323, i32 2)
  %tobool443 = icmp ne i32 %call442, 0
  br i1 %tobool443, label %if.then444, label %if.end446

if.then444:                                       ; preds = %lor.lhs.false439, %lor.lhs.false434, %land.lhs.true432, %if.end426
  %324 = load %struct.op*, %struct.op** %o.addr, align 8
  %325 = bitcast %struct.op* %324 to %struct.svop*
  %op_sv445 = getelementptr inbounds %struct.svop, %struct.svop* %325, i32 0, i32 7
  %326 = load %struct.sv*, %struct.sv** %op_sv445, align 8
  %327 = bitcast %struct.sv* %326 to i8*
  call void (i32, i8*, ...) @Perl_warner(i32 19, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.77, i64 0, i64 0), i8* %327)
  br label %if.end446

if.end446:                                        ; preds = %if.then444, %lor.lhs.false439, %lor.lhs.false429
  %328 = load %struct.cv*, %struct.cv** @PL_compcv, align 8
  %329 = bitcast %struct.cv* %328 to i8*
  %330 = bitcast i8* %329 to %struct.sv*
  %sv_refcnt = getelementptr inbounds %struct.sv, %struct.sv* %330, i32 0, i32 1
  %331 = load i32, i32* %sv_refcnt, align 8
  %inc = add i32 %331, 1
  store i32 %inc, i32* %sv_refcnt, align 8
  %332 = load i32, i32* %oldline, align 4
  %333 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_line447 = getelementptr inbounds %struct.cop, %struct.cop* %333, i32 0, i32 7
  store i32 %332, i32* %cop_line447, align 4
  %334 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u448 = getelementptr inbounds %struct.gv, %struct.gv* %334, i32 0, i32 3
  %svu_rv449 = bitcast %union.anon.3* %sv_u448 to %struct.sv**
  %335 = load %struct.sv*, %struct.sv** %svu_rv449, align 8
  %336 = bitcast %struct.sv* %335 to i8*
  %337 = bitcast i8* %336 to %struct.sv*
  call void @S_SvREFCNT_dec(%struct.sv* %337)
  br label %if.end450

if.end450:                                        ; preds = %if.end446, %cond.end410
  br label %if.end451

if.end451:                                        ; preds = %if.end450, %land.lhs.true398, %lor.lhs.false394
  %338 = load %struct.cv*, %struct.cv** %cv, align 8
  %tobool452 = icmp ne %struct.cv* %338, null
  br i1 %tobool452, label %if.then453, label %if.end494

if.then453:                                       ; preds = %if.end451
  %339 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any454 = getelementptr inbounds %struct.cv, %struct.cv* %339, i32 0, i32 0
  %340 = load %struct.xpvcv*, %struct.xpvcv** %sv_any454, align 8
  %341 = bitcast %struct.xpvcv* %340 to i8*
  %342 = bitcast i8* %341 to %struct.xpvcv*
  %xcv_root_u455 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %342, i32 0, i32 6
  %xcv_root456 = bitcast %union.anon.7* %xcv_root_u455 to %struct.op**
  %343 = load %struct.op*, %struct.op** %xcv_root456, align 8
  %tobool457 = icmp ne %struct.op* %343, null
  br i1 %tobool457, label %lor.end463, label %lor.rhs458

lor.rhs458:                                       ; preds = %if.then453
  %344 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any459 = getelementptr inbounds %struct.cv, %struct.cv* %344, i32 0, i32 0
  %345 = load %struct.xpvcv*, %struct.xpvcv** %sv_any459, align 8
  %346 = bitcast %struct.xpvcv* %345 to i8*
  %347 = bitcast i8* %346 to %struct.xpvcv*
  %xcv_root_u460 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %347, i32 0, i32 6
  %xcv_xsub461 = bitcast %union.anon.7* %xcv_root_u460 to void (%struct.cv*)**
  %348 = load void (%struct.cv*)*, void (%struct.cv*)** %xcv_xsub461, align 8
  %tobool462 = icmp ne void (%struct.cv*)* %348, null
  br label %lor.end463

lor.end463:                                       ; preds = %lor.rhs458, %if.then453
  %349 = phi i1 [ true, %if.then453 ], [ %tobool462, %lor.rhs458 ]
  %frombool464 = zext i1 %349 to i8
  store i8 %frombool464, i8* %exists, align 1
  %350 = load i8, i8* %exists, align 1
  %tobool465 = trunc i8 %350 to i1
  br i1 %tobool465, label %if.then471, label %lor.lhs.false467

lor.lhs.false467:                                 ; preds = %lor.end463
  %351 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_flags468 = getelementptr inbounds %struct.cv, %struct.cv* %351, i32 0, i32 2
  %352 = load i32, i32* %sv_flags468, align 4
  %and469 = and i32 %352, 1024
  %tobool470 = icmp ne i32 %and469, 0
  br i1 %tobool470, label %if.then471, label %if.end472

if.then471:                                       ; preds = %lor.lhs.false467, %lor.end463
  %353 = load %struct.cv*, %struct.cv** %cv, align 8
  %354 = load %struct.gv*, %struct.gv** %gv, align 8
  %355 = load i8*, i8** %ps, align 8
  %356 = load i64, i64* %ps_len, align 8
  %357 = load i32, i32* %ps_utf8, align 4
  call void @Perl_cv_ckproto_len_flags(%struct.cv* %353, %struct.gv* %354, i8* %355, i64 %356, i32 %357)
  br label %if.end472

if.end472:                                        ; preds = %if.then471, %lor.lhs.false467
  %358 = load i8, i8* %exists, align 1
  %tobool473 = trunc i8 %358 to i1
  br i1 %tobool473, label %if.then485, label %lor.lhs.false475

lor.lhs.false475:                                 ; preds = %if.end472
  %359 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_flags476 = getelementptr inbounds %struct.gv, %struct.gv* %359, i32 0, i32 2
  %360 = load i32, i32* %sv_flags476, align 4
  %and477 = and i32 %360, 255
  %cmp478 = icmp eq i32 %and477, 9
  br i1 %cmp478, label %land.lhs.true480, label %if.end493

land.lhs.true480:                                 ; preds = %lor.lhs.false475
  %361 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_any481 = getelementptr inbounds %struct.gv, %struct.gv* %361, i32 0, i32 0
  %362 = load %struct.xpvgv*, %struct.xpvgv** %sv_any481, align 8
  %xpv_cur482 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %362, i32 0, i32 2
  %363 = load i64, i64* %xpv_cur482, align 8
  %and483 = and i64 %363, 4
  %tobool484 = icmp ne i64 %and483, 0
  br i1 %tobool484, label %if.then485, label %if.end493

if.then485:                                       ; preds = %land.lhs.true480, %if.end472
  %364 = load %struct.cv*, %struct.cv** %cv, align 8
  %365 = load %struct.op*, %struct.op** %block.addr, align 8
  %366 = load %struct.op*, %struct.op** %o.addr, align 8
  %call486 = call zeroext i1 @S_already_defined(%struct.cv* %364, %struct.op* %365, %struct.op* %366, %struct.padname* null, %struct.sv** %const_sv)
  br i1 %call486, label %if.then487, label %if.else488

if.then487:                                       ; preds = %if.then485
  store %struct.cv* null, %struct.cv** %cv, align 8
  br label %if.end492

if.else488:                                       ; preds = %if.then485
  %367 = load %struct.op*, %struct.op** %attrs.addr, align 8
  %tobool489 = icmp ne %struct.op* %367, null
  br i1 %tobool489, label %if.then490, label %if.end491

if.then490:                                       ; preds = %if.else488
  br label %attrs1153

if.end491:                                        ; preds = %if.else488
  %368 = load %struct.cv*, %struct.cv** @PL_compcv, align 8
  %369 = bitcast %struct.cv* %368 to i8*
  %370 = bitcast i8* %369 to %struct.sv*
  %371 = bitcast %struct.sv* %370 to i8*
  call void @Perl_save_pushptr(i8* %371, i32 11)
  br label %done

if.end492:                                        ; preds = %if.then487
  br label %if.end493

if.end493:                                        ; preds = %if.end492, %land.lhs.true480, %lor.lhs.false475
  br label %if.end494

if.end494:                                        ; preds = %if.end493, %if.end451
  %372 = load %struct.sv*, %struct.sv** %const_sv, align 8
  %tobool495 = icmp ne %struct.sv* %372, null
  br i1 %tobool495, label %if.then496, label %if.end654

if.then496:                                       ; preds = %if.end494
  %373 = load %struct.sv*, %struct.sv** %const_sv, align 8
  %374 = bitcast %struct.sv* %373 to i8*
  %375 = bitcast i8* %374 to %struct.sv*
  %sv_refcnt497 = getelementptr inbounds %struct.sv, %struct.sv* %375, i32 0, i32 1
  %376 = load i32, i32* %sv_refcnt497, align 8
  %inc498 = add i32 %376, 1
  store i32 %inc498, i32* %sv_refcnt497, align 8
  %377 = load %struct.sv*, %struct.sv** %const_sv, align 8
  %sv_flags499 = getelementptr inbounds %struct.sv, %struct.sv* %377, i32 0, i32 2
  %378 = load i32, i32* %sv_flags499, align 4
  %or500 = or i32 %378, 131072
  store i32 %or500, i32* %sv_flags499, align 4
  %379 = load %struct.cv*, %struct.cv** %cv, align 8
  %tobool501 = icmp ne %struct.cv* %379, null
  br i1 %tobool501, label %if.then502, label %if.else519

if.then502:                                       ; preds = %if.then496
  %380 = load %struct.cv*, %struct.cv** %cv, align 8
  call void @Perl_cv_forget_slab(%struct.cv* %380)
  %381 = load %struct.cv*, %struct.cv** %cv, align 8
  %382 = bitcast %struct.cv* %381 to i8*
  %383 = bitcast i8* %382 to %struct.sv*
  call void @Perl_sv_setpvn(%struct.sv* %383, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.17, i64 0, i64 0), i64 0)
  %384 = load %struct.sv*, %struct.sv** %const_sv, align 8
  %385 = bitcast %struct.sv* %384 to i8*
  %386 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any503 = getelementptr inbounds %struct.cv, %struct.cv* %386, i32 0, i32 0
  %387 = load %struct.xpvcv*, %struct.xpvcv** %sv_any503, align 8
  %388 = bitcast %struct.xpvcv* %387 to i8*
  %389 = bitcast i8* %388 to %struct.xpvcv*
  %xcv_start_u = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %389, i32 0, i32 5
  %xcv_xsubany = bitcast %union.anon.6* %xcv_start_u to %union.any*
  %any_ptr = bitcast %union.any* %xcv_xsubany to i8**
  store i8* %385, i8** %any_ptr, align 8
  %390 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any504 = getelementptr inbounds %struct.cv, %struct.cv* %390, i32 0, i32 0
  %391 = load %struct.xpvcv*, %struct.xpvcv** %sv_any504, align 8
  %392 = bitcast %struct.xpvcv* %391 to i8*
  %393 = bitcast i8* %392 to %struct.xpvcv*
  %xcv_root_u505 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %393, i32 0, i32 6
  %xcv_xsub506 = bitcast %union.anon.7* %xcv_root_u505 to void (%struct.cv*)**
  store void (%struct.cv*)* @const_sv_xsub, void (%struct.cv*)** %xcv_xsub506, align 8
  %394 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any507 = getelementptr inbounds %struct.cv, %struct.cv* %394, i32 0, i32 0
  %395 = load %struct.xpvcv*, %struct.xpvcv** %sv_any507, align 8
  %396 = bitcast %struct.xpvcv* %395 to i8*
  %397 = bitcast i8* %396 to %struct.xpvcv*
  %xcv_flags508 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %397, i32 0, i32 12
  %398 = load i32, i32* %xcv_flags508, align 4
  %or509 = or i32 %398, 4
  store i32 %or509, i32* %xcv_flags508, align 4
  %399 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any510 = getelementptr inbounds %struct.cv, %struct.cv* %399, i32 0, i32 0
  %400 = load %struct.xpvcv*, %struct.xpvcv** %sv_any510, align 8
  %401 = bitcast %struct.xpvcv* %400 to i8*
  %402 = bitcast i8* %401 to %struct.xpvcv*
  %xcv_flags511 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %402, i32 0, i32 12
  %403 = load i32, i32* %xcv_flags511, align 4
  %or512 = or i32 %403, 8
  store i32 %or512, i32* %xcv_flags511, align 4
  %404 = load %struct.cv*, %struct.cv** @PL_compcv, align 8
  %sv_any513 = getelementptr inbounds %struct.cv, %struct.cv* %404, i32 0, i32 0
  %405 = load %struct.xpvcv*, %struct.xpvcv** %sv_any513, align 8
  %406 = bitcast %struct.xpvcv* %405 to i8*
  %407 = bitcast i8* %406 to %struct.xpvcv*
  %xcv_flags514 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %407, i32 0, i32 12
  %408 = load i32, i32* %xcv_flags514, align 4
  %and515 = and i32 %408, 1
  %409 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any516 = getelementptr inbounds %struct.cv, %struct.cv* %409, i32 0, i32 0
  %410 = load %struct.xpvcv*, %struct.xpvcv** %sv_any516, align 8
  %411 = bitcast %struct.xpvcv* %410 to i8*
  %412 = bitcast i8* %411 to %struct.xpvcv*
  %xcv_flags517 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %412, i32 0, i32 12
  %413 = load i32, i32* %xcv_flags517, align 4
  %or518 = or i32 %413, %and515
  store i32 %or518, i32* %xcv_flags517, align 4
  br label %if.end653

if.else519:                                       ; preds = %if.then496
  %414 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_flags520 = getelementptr inbounds %struct.gv, %struct.gv* %414, i32 0, i32 2
  %415 = load i32, i32* %sv_flags520, align 4
  %and521 = and i32 %415, 255
  %cmp522 = icmp eq i32 %and521, 9
  br i1 %cmp522, label %if.then529, label %lor.lhs.false524

lor.lhs.false524:                                 ; preds = %if.else519
  %416 = load %struct.cv*, %struct.cv** @PL_compcv, align 8
  %sv_any525 = getelementptr inbounds %struct.cv, %struct.cv* %416, i32 0, i32 0
  %417 = load %struct.xpvcv*, %struct.xpvcv** %sv_any525, align 8
  %418 = bitcast %struct.xpvcv* %417 to i8*
  %419 = bitcast i8* %418 to %struct.xpvcv*
  %xcv_flags526 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %419, i32 0, i32 12
  %420 = load i32, i32* %xcv_flags526, align 4
  %and527 = and i32 %420, 1
  %tobool528 = icmp ne i32 %and527, 0
  br i1 %tobool528, label %if.then529, label %if.else552

if.then529:                                       ; preds = %lor.lhs.false524, %if.else519
  %421 = load i8*, i8** %name, align 8
  %tobool530 = icmp ne i8* %421, null
  br i1 %tobool530, label %land.lhs.true531, label %if.end541

land.lhs.true531:                                 ; preds = %if.then529
  %422 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_flags532 = getelementptr inbounds %struct.gv, %struct.gv* %422, i32 0, i32 2
  %423 = load i32, i32* %sv_flags532, align 4
  %and533 = and i32 %423, 255
  %cmp534 = icmp eq i32 %and533, 9
  br i1 %cmp534, label %if.then536, label %if.end541

if.then536:                                       ; preds = %land.lhs.true531
  %424 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u537 = getelementptr inbounds %struct.gv, %struct.gv* %424, i32 0, i32 3
  %svu_gp538 = bitcast %union.anon.3* %sv_u537 to %struct.gp**
  %425 = load %struct.gp*, %struct.gp** %svu_gp538, align 8
  %add.ptr539 = getelementptr inbounds %struct.gp, %struct.gp* %425, i64 0
  %gp_cv540 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr539, i32 0, i32 2
  store %struct.cv* null, %struct.cv** %gp_cv540, align 8
  br label %if.end541

if.end541:                                        ; preds = %if.then536, %land.lhs.true531, %if.then529
  %426 = load i8*, i8** %name, align 8
  %427 = load i64, i64* %namlen, align 8
  %428 = load i8, i8* %name_is_utf8, align 1
  %tobool542 = trunc i8 %428 to i1
  %429 = zext i1 %tobool542 to i64
  %cond544 = select i1 %tobool542, i32 536870912, i32 0
  %430 = load %struct.sv*, %struct.sv** %const_sv, align 8
  %call545 = call %struct.cv* @Perl_newCONSTSUB_flags(%struct.hv* null, i8* %426, i64 %427, i32 %cond544, %struct.sv* %430)
  store %struct.cv* %call545, %struct.cv** %cv, align 8
  %431 = load %struct.cv*, %struct.cv** @PL_compcv, align 8
  %sv_any546 = getelementptr inbounds %struct.cv, %struct.cv* %431, i32 0, i32 0
  %432 = load %struct.xpvcv*, %struct.xpvcv** %sv_any546, align 8
  %433 = bitcast %struct.xpvcv* %432 to i8*
  %434 = bitcast i8* %433 to %struct.xpvcv*
  %xcv_flags547 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %434, i32 0, i32 12
  %435 = load i32, i32* %xcv_flags547, align 4
  %and548 = and i32 %435, 1
  %436 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any549 = getelementptr inbounds %struct.cv, %struct.cv* %436, i32 0, i32 0
  %437 = load %struct.xpvcv*, %struct.xpvcv** %sv_any549, align 8
  %438 = bitcast %struct.xpvcv* %437 to i8*
  %439 = bitcast i8* %438 to %struct.xpvcv*
  %xcv_flags550 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %439, i32 0, i32 12
  %440 = load i32, i32* %xcv_flags550, align 4
  %or551 = or i32 %440, %and548
  store i32 %or551, i32* %xcv_flags550, align 4
  br label %if.end652

if.else552:                                       ; preds = %lor.lhs.false524
  %441 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_flags553 = getelementptr inbounds %struct.gv, %struct.gv* %441, i32 0, i32 2
  %442 = load i32, i32* %sv_flags553, align 4
  %and554 = and i32 %442, 2048
  %tobool555 = icmp ne i32 %and554, 0
  br i1 %tobool555, label %if.end647, label %if.then556

if.then556:                                       ; preds = %if.else552
  %443 = load %struct.gv*, %struct.gv** %gv, align 8
  %444 = bitcast %struct.gv* %443 to %struct.sv*
  %sv_flags557 = getelementptr inbounds %struct.sv, %struct.sv* %444, i32 0, i32 2
  %445 = load i32, i32* %sv_flags557, align 4
  %and558 = and i32 %445, 427886592
  %tobool559 = icmp ne i32 %and558, 0
  br i1 %tobool559, label %if.then560, label %if.end561

if.then560:                                       ; preds = %if.then556
  %446 = load %struct.gv*, %struct.gv** %gv, align 8
  %447 = bitcast %struct.gv* %446 to %struct.sv*
  call void @Perl_sv_force_normal_flags(%struct.sv* %447, i32 4)
  br label %if.end561

if.end561:                                        ; preds = %if.then560, %if.then556
  br label %do.body562

do.body562:                                       ; preds = %if.end561
  %448 = load %struct.gv*, %struct.gv** %gv, align 8
  %449 = bitcast %struct.gv* %448 to %struct.sv*
  %sv_flags563 = getelementptr inbounds %struct.sv, %struct.sv* %449, i32 0, i32 2
  %450 = load i32, i32* %sv_flags563, align 4
  %and564 = and i32 %450, 255
  %cmp565 = icmp ult i32 %and564, 3
  br i1 %cmp565, label %land.lhs.true567, label %if.else573

land.lhs.true567:                                 ; preds = %do.body562
  %451 = load %struct.gv*, %struct.gv** %gv, align 8
  %452 = bitcast %struct.gv* %451 to %struct.sv*
  %sv_flags568 = getelementptr inbounds %struct.sv, %struct.sv* %452, i32 0, i32 2
  %453 = load i32, i32* %sv_flags568, align 4
  %and569 = and i32 %453, 255
  %cmp570 = icmp ne i32 %and569, 1
  br i1 %cmp570, label %if.then572, label %if.else573

if.then572:                                       ; preds = %land.lhs.true567
  %454 = load %struct.gv*, %struct.gv** %gv, align 8
  %455 = bitcast %struct.gv* %454 to %struct.sv*
  call void @Perl_sv_upgrade(%struct.sv* %455, i32 1)
  br label %if.end634

if.else573:                                       ; preds = %land.lhs.true567, %do.body562
  %456 = load %struct.gv*, %struct.gv** %gv, align 8
  %457 = bitcast %struct.gv* %456 to %struct.sv*
  %sv_flags574 = getelementptr inbounds %struct.sv, %struct.sv* %457, i32 0, i32 2
  %458 = load i32, i32* %sv_flags574, align 4
  %and575 = and i32 %458, 255
  %cmp576 = icmp uge i32 %and575, 3
  br i1 %cmp576, label %if.then578, label %if.end633

if.then578:                                       ; preds = %if.else573
  br label %do.body579

do.body579:                                       ; preds = %if.then578
  %459 = load %struct.gv*, %struct.gv** %gv, align 8
  %460 = bitcast %struct.gv* %459 to %struct.sv*
  %sv_any580 = getelementptr inbounds %struct.sv, %struct.sv* %460, i32 0, i32 0
  %461 = load i8*, i8** %sv_any580, align 8
  %462 = bitcast i8* %461 to %struct.xpv*
  %xpv_len_u = getelementptr inbounds %struct.xpv, %struct.xpv* %462, i32 0, i32 3
  %xpvlenu_len = bitcast %union.anon.21* %xpv_len_u to i64*
  %463 = load i64, i64* %xpvlenu_len, align 8
  %tobool581 = icmp ne i64 %463, 0
  br i1 %tobool581, label %if.then582, label %if.end622

if.then582:                                       ; preds = %do.body579
  %464 = load %struct.gv*, %struct.gv** %gv, align 8
  %465 = bitcast %struct.gv* %464 to %struct.sv*
  %sv_flags583 = getelementptr inbounds %struct.sv, %struct.sv* %465, i32 0, i32 2
  %466 = load i32, i32* %sv_flags583, align 4
  %and584 = and i32 %466, 33554432
  %tobool585 = icmp ne i32 %and584, 0
  br i1 %tobool585, label %cond.true586, label %cond.false587

cond.true586:                                     ; preds = %if.then582
  br i1 true, label %if.then588, label %if.end619

cond.false587:                                    ; preds = %if.then582
  br i1 false, label %if.then588, label %if.end619

if.then588:                                       ; preds = %cond.false587, %cond.true586
  br label %do.body589

do.body589:                                       ; preds = %if.then588
  %467 = load %struct.gv*, %struct.gv** %gv, align 8
  %468 = bitcast %struct.gv* %467 to %struct.sv*
  %sv_flags590 = getelementptr inbounds %struct.sv, %struct.sv* %468, i32 0, i32 2
  %469 = load i32, i32* %sv_flags590, align 4
  %and591 = and i32 %469, 33554432
  %tobool592 = icmp ne i32 %and591, 0
  br i1 %tobool592, label %if.then593, label %if.else606

if.then593:                                       ; preds = %do.body589
  %470 = load %struct.gv*, %struct.gv** %gv, align 8
  %471 = bitcast %struct.gv* %470 to %struct.sv*
  %sv_u594 = getelementptr inbounds %struct.sv, %struct.sv* %471, i32 0, i32 3
  %svu_pv595 = bitcast %union.anon* %sv_u594 to i8**
  %472 = load i8*, i8** %svu_pv595, align 8
  %add.ptr596 = getelementptr inbounds i8, i8* %472, i64 0
  %arrayidx = getelementptr inbounds i8, i8* %add.ptr596, i64 -1
  %473 = load i8, i8* %arrayidx, align 1
  %conv597 = zext i8 %473 to i64
  store i64 %conv597, i64* %zok, align 8
  %474 = load i64, i64* %zok, align 8
  %tobool598 = icmp ne i64 %474, 0
  br i1 %tobool598, label %if.end605, label %if.then599

if.then599:                                       ; preds = %if.then593
  %475 = bitcast i64* %zok to i8*
  %476 = load %struct.gv*, %struct.gv** %gv, align 8
  %477 = bitcast %struct.gv* %476 to %struct.sv*
  %sv_u600 = getelementptr inbounds %struct.sv, %struct.sv* %477, i32 0, i32 3
  %svu_pv601 = bitcast %union.anon* %sv_u600 to i8**
  %478 = load i8*, i8** %svu_pv601, align 8
  %add.ptr602 = getelementptr inbounds i8, i8* %478, i64 0
  %add.ptr603 = getelementptr inbounds i8, i8* %add.ptr602, i64 -1
  %add.ptr604 = getelementptr inbounds i8, i8* %add.ptr603, i64 -8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %475, i8* align 1 %add.ptr604, i64 8, i1 false)
  br label %if.end605

if.end605:                                        ; preds = %if.then599, %if.then593
  br label %if.end607

if.else606:                                       ; preds = %do.body589
  store i64 0, i64* %zok, align 8
  br label %if.end607

if.end607:                                        ; preds = %if.else606, %if.end605
  br label %do.end608

do.end608:                                        ; preds = %if.end607
  br label %do.body609

do.body609:                                       ; preds = %do.end608
  %479 = load %struct.gv*, %struct.gv** %gv, align 8
  %480 = bitcast %struct.gv* %479 to %struct.sv*
  %sv_u610 = getelementptr inbounds %struct.sv, %struct.sv* %480, i32 0, i32 3
  %svu_pv611 = bitcast %union.anon* %sv_u610 to i8**
  %481 = load i8*, i8** %svu_pv611, align 8
  %add.ptr612 = getelementptr inbounds i8, i8* %481, i64 0
  %482 = load i64, i64* %zok, align 8
  %idx.neg = sub i64 0, %482
  %add.ptr613 = getelementptr inbounds i8, i8* %add.ptr612, i64 %idx.neg
  %483 = load %struct.gv*, %struct.gv** %gv, align 8
  %484 = bitcast %struct.gv* %483 to %struct.sv*
  %sv_u614 = getelementptr inbounds %struct.sv, %struct.sv* %484, i32 0, i32 3
  %svu_pv615 = bitcast %union.anon* %sv_u614 to i8**
  store i8* %add.ptr613, i8** %svu_pv615, align 8
  br label %do.end616

do.end616:                                        ; preds = %do.body609
  %485 = load %struct.gv*, %struct.gv** %gv, align 8
  %486 = bitcast %struct.gv* %485 to %struct.sv*
  %sv_flags617 = getelementptr inbounds %struct.sv, %struct.sv* %486, i32 0, i32 2
  %487 = load i32, i32* %sv_flags617, align 4
  %and618 = and i32 %487, -33554433
  store i32 %and618, i32* %sv_flags617, align 4
  br label %if.end619

if.end619:                                        ; preds = %do.end616, %cond.false587, %cond.true586
  %488 = load %struct.gv*, %struct.gv** %gv, align 8
  %489 = bitcast %struct.gv* %488 to %struct.sv*
  %sv_u620 = getelementptr inbounds %struct.sv, %struct.sv* %489, i32 0, i32 3
  %svu_pv621 = bitcast %union.anon* %sv_u620 to i8**
  %490 = load i8*, i8** %svu_pv621, align 8
  call void @Perl_safesysfree(i8* %490)
  br label %if.end622

if.end622:                                        ; preds = %if.end619, %do.body579
  br label %do.end623

do.end623:                                        ; preds = %if.end622
  br label %do.body624

do.body624:                                       ; preds = %do.end623
  %491 = load %struct.gv*, %struct.gv** %gv, align 8
  %492 = bitcast %struct.gv* %491 to %struct.sv*
  %sv_any625 = getelementptr inbounds %struct.sv, %struct.sv* %492, i32 0, i32 0
  %493 = load i8*, i8** %sv_any625, align 8
  %494 = bitcast i8* %493 to %struct.xpv*
  %xpv_len_u626 = getelementptr inbounds %struct.xpv, %struct.xpv* %494, i32 0, i32 3
  %xpvlenu_len627 = bitcast %union.anon.21* %xpv_len_u626 to i64*
  store i64 0, i64* %xpvlenu_len627, align 8
  br label %do.end628

do.end628:                                        ; preds = %do.body624
  br label %do.body629

do.body629:                                       ; preds = %do.end628
  %495 = load %struct.gv*, %struct.gv** %gv, align 8
  %496 = bitcast %struct.gv* %495 to %struct.sv*
  %sv_any630 = getelementptr inbounds %struct.sv, %struct.sv* %496, i32 0, i32 0
  %497 = load i8*, i8** %sv_any630, align 8
  %498 = bitcast i8* %497 to %struct.xpv*
  %xpv_cur631 = getelementptr inbounds %struct.xpv, %struct.xpv* %498, i32 0, i32 2
  store i64 0, i64* %xpv_cur631, align 8
  br label %do.end632

do.end632:                                        ; preds = %do.body629
  br label %if.end633

if.end633:                                        ; preds = %do.end632, %if.else573
  br label %if.end634

if.end634:                                        ; preds = %if.end633, %if.then572
  br label %do.end635

do.end635:                                        ; preds = %if.end634
  %499 = load %struct.gv*, %struct.gv** %gv, align 8
  %500 = bitcast %struct.gv* %499 to %struct.sv*
  %sv_flags636 = getelementptr inbounds %struct.sv, %struct.sv* %500, i32 0, i32 2
  %501 = load i32, i32* %sv_flags636, align 4
  %and637 = and i32 %501, 1610547455
  store i32 %and637, i32* %sv_flags636, align 4
  %502 = load %struct.gv*, %struct.gv** %gv, align 8
  %503 = bitcast %struct.gv* %502 to %struct.sv*
  %sv_flags638 = getelementptr inbounds %struct.sv, %struct.sv* %503, i32 0, i32 2
  %504 = load i32, i32* %sv_flags638, align 4
  %and639 = and i32 %504, 33554432
  %tobool640 = icmp ne i32 %and639, 0
  br i1 %tobool640, label %land.rhs641, label %land.end644

land.rhs641:                                      ; preds = %do.end635
  %505 = load %struct.gv*, %struct.gv** %gv, align 8
  %506 = bitcast %struct.gv* %505 to %struct.sv*
  %call642 = call i32 @Perl_sv_backoff(%struct.sv* %506)
  %tobool643 = icmp ne i32 %call642, 0
  br label %land.end644

land.end644:                                      ; preds = %land.rhs641, %do.end635
  %507 = phi i1 [ false, %do.end635 ], [ %tobool643, %land.rhs641 ]
  %land.ext = zext i1 %507 to i32
  %508 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_flags645 = getelementptr inbounds %struct.gv, %struct.gv* %508, i32 0, i32 2
  %509 = load i32, i32* %sv_flags645, align 4
  %or646 = or i32 %509, 2048
  store i32 %or646, i32* %sv_flags645, align 4
  br label %if.end647

if.end647:                                        ; preds = %land.end644, %if.else552
  br label %do.body648

do.body648:                                       ; preds = %if.end647
  %510 = load %struct.sv*, %struct.sv** %const_sv, align 8
  %511 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u649 = getelementptr inbounds %struct.gv, %struct.gv* %511, i32 0, i32 3
  %svu_rv650 = bitcast %union.anon.3* %sv_u649 to %struct.sv**
  store %struct.sv* %510, %struct.sv** %svu_rv650, align 8
  br label %do.end651

do.end651:                                        ; preds = %do.body648
  br label %if.end652

if.end652:                                        ; preds = %do.end651, %if.end541
  br label %if.end653

if.end653:                                        ; preds = %if.end652, %if.then502
  %512 = load %struct.op*, %struct.op** %block.addr, align 8
  call void @Perl_op_free(%struct.op* %512)
  %513 = load %struct.cv*, %struct.cv** @PL_compcv, align 8
  %514 = bitcast %struct.cv* %513 to i8*
  %515 = bitcast i8* %514 to %struct.sv*
  call void @S_SvREFCNT_dec(%struct.sv* %515)
  store %struct.cv* null, %struct.cv** @PL_compcv, align 8
  br label %done

if.end654:                                        ; preds = %if.end494
  %516 = load %struct.cv*, %struct.cv** %cv, align 8
  %tobool655 = icmp ne %struct.cv* %516, null
  br i1 %tobool655, label %if.then656, label %if.else786

if.then656:                                       ; preds = %if.end654
  %517 = load %struct.op*, %struct.op** %block.addr, align 8
  %tobool657 = icmp ne %struct.op* %517, null
  br i1 %tobool657, label %if.then658, label %if.else778

if.then658:                                       ; preds = %if.then656
  %518 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any659 = getelementptr inbounds %struct.cv, %struct.cv* %518, i32 0, i32 0
  %519 = load %struct.xpvcv*, %struct.xpvcv** %sv_any659, align 8
  %520 = bitcast %struct.xpvcv* %519 to i8*
  %521 = bitcast i8* %520 to %struct.xpvcv*
  %xcv_flags660 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %521, i32 0, i32 12
  %522 = load i32, i32* %xcv_flags660, align 4
  %and661 = and i32 %522, 131075
  store i32 %and661, i32* %existing_builtin_attrs, align 4
  %523 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any662 = getelementptr inbounds %struct.cv, %struct.cv* %523, i32 0, i32 0
  %524 = load %struct.xpvcv*, %struct.xpvcv** %sv_any662, align 8
  %525 = bitcast %struct.xpvcv* %524 to i8*
  %526 = bitcast i8* %525 to %struct.xpvcv*
  %xcv_padlist_u = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %526, i32 0, i32 9
  %xcv_padlist = bitcast %union.anon.9* %xcv_padlist_u to %struct.padlist**
  %527 = load %struct.padlist*, %struct.padlist** %xcv_padlist, align 8
  store %struct.padlist* %527, %struct.padlist** %temp_av, align 8
  %528 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any663 = getelementptr inbounds %struct.cv, %struct.cv* %528, i32 0, i32 0
  %529 = load %struct.xpvcv*, %struct.xpvcv** %sv_any663, align 8
  %530 = bitcast %struct.xpvcv* %529 to i8*
  %531 = bitcast i8* %530 to %struct.xpvcv*
  %xcv_outside = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %531, i32 0, i32 10
  %532 = load %struct.cv*, %struct.cv** %xcv_outside, align 8
  store %struct.cv* %532, %struct.cv** %temp_cv, align 8
  %533 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any664 = getelementptr inbounds %struct.cv, %struct.cv* %533, i32 0, i32 0
  %534 = load %struct.xpvcv*, %struct.xpvcv** %sv_any664, align 8
  %535 = bitcast %struct.xpvcv* %534 to i8*
  %536 = bitcast i8* %535 to %struct.xpvcv*
  %xcv_flags665 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %536, i32 0, i32 12
  %537 = load i32, i32* %xcv_flags665, align 4
  %and666 = and i32 %537, 2064
  store i32 %and666, i32* %other_flags, align 4
  %538 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any667 = getelementptr inbounds %struct.cv, %struct.cv* %538, i32 0, i32 0
  %539 = load %struct.xpvcv*, %struct.xpvcv** %sv_any667, align 8
  %540 = bitcast %struct.xpvcv* %539 to i8*
  %541 = bitcast i8* %540 to %struct.xpvcv*
  %xcv_start_u668 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %541, i32 0, i32 5
  %xcv_start = bitcast %union.anon.6* %xcv_start_u668 to %struct.op**
  %542 = load %struct.op*, %struct.op** %xcv_start, align 8
  store %struct.op* %542, %struct.op** %cvstart, align 8
  %543 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_flags669 = getelementptr inbounds %struct.gv, %struct.gv* %543, i32 0, i32 2
  %544 = load i32, i32* %sv_flags669, align 4
  %and670 = and i32 %544, 255
  %cmp671 = icmp eq i32 %and670, 9
  br i1 %cmp671, label %if.then673, label %if.else674

if.then673:                                       ; preds = %if.then658
  %545 = load %struct.cv*, %struct.cv** %cv, align 8
  %546 = load %struct.gv*, %struct.gv** %gv, align 8
  call void @Perl_cvgv_set(%struct.cv* %545, %struct.gv* %546)
  br label %if.end696

if.else674:                                       ; preds = %if.then658
  %547 = load i8*, i8** %name, align 8
  %548 = load i64, i64* %namlen, align 8
  %call675 = call i32 @S_perl_hash_one_at_a_time_hard(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.70, i64 0, i64 0), i8* %547, i64 %548)
  store i32 %call675, i32* %hash, align 4
  %549 = load %struct.cv*, %struct.cv** %cv, align 8
  %call676 = call %struct.hek* @CvNAME_HEK(%struct.cv* %549)
  %tobool677 = icmp ne %struct.hek* %call676, null
  br i1 %tobool677, label %cond.true678, label %cond.false680

cond.true678:                                     ; preds = %if.else674
  %550 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any679 = getelementptr inbounds %struct.cv, %struct.cv* %550, i32 0, i32 0
  %551 = load %struct.xpvcv*, %struct.xpvcv** %sv_any679, align 8
  %xcv_gv_u = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %551, i32 0, i32 7
  %xcv_hek = bitcast %union.anon.8* %xcv_gv_u to %struct.hek**
  %552 = load %struct.hek*, %struct.hek** %xcv_hek, align 8
  call void @Perl_unshare_hek(%struct.hek* %552)
  br label %cond.end681

cond.false680:                                    ; preds = %if.else674
  br label %cond.end681

cond.end681:                                      ; preds = %cond.false680, %cond.true678
  %553 = load i8*, i8** %name, align 8
  %554 = load i8, i8* %name_is_utf8, align 1
  %tobool682 = trunc i8 %554 to i1
  br i1 %tobool682, label %cond.true684, label %cond.false685

cond.true684:                                     ; preds = %cond.end681
  %555 = load i64, i64* %namlen, align 8
  %sub = sub nsw i64 0, %555
  br label %cond.end686

cond.false685:                                    ; preds = %cond.end681
  %556 = load i64, i64* %namlen, align 8
  br label %cond.end686

cond.end686:                                      ; preds = %cond.false685, %cond.true684
  %cond687 = phi i64 [ %sub, %cond.true684 ], [ %556, %cond.false685 ]
  %conv688 = trunc i64 %cond687 to i32
  %557 = load i32, i32* %hash, align 4
  %call689 = call %struct.hek* @Perl_share_hek(i8* %553, i32 %conv688, i32 %557)
  %558 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any690 = getelementptr inbounds %struct.cv, %struct.cv* %558, i32 0, i32 0
  %559 = load %struct.xpvcv*, %struct.xpvcv** %sv_any690, align 8
  %560 = bitcast %struct.xpvcv* %559 to i8*
  %561 = bitcast i8* %560 to %struct.xpvcv*
  %xcv_gv_u691 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %561, i32 0, i32 7
  %xcv_hek692 = bitcast %union.anon.8* %xcv_gv_u691 to %struct.hek**
  store %struct.hek* %call689, %struct.hek** %xcv_hek692, align 8
  %562 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any693 = getelementptr inbounds %struct.cv, %struct.cv* %562, i32 0, i32 0
  %563 = load %struct.xpvcv*, %struct.xpvcv** %sv_any693, align 8
  %564 = bitcast %struct.xpvcv* %563 to i8*
  %565 = bitcast i8* %564 to %struct.xpvcv*
  %xcv_flags694 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %565, i32 0, i32 12
  %566 = load i32, i32* %xcv_flags694, align 4
  %or695 = or i32 %566, 32768
  store i32 %or695, i32* %xcv_flags694, align 4
  br label %if.end696

if.end696:                                        ; preds = %cond.end686, %if.then673
  %567 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_flags697 = getelementptr inbounds %struct.cv, %struct.cv* %567, i32 0, i32 2
  %568 = load i32, i32* %sv_flags697, align 4
  %and698 = and i32 %568, -17409
  store i32 %and698, i32* %sv_flags697, align 4
  %569 = load %struct.cv*, %struct.cv** @PL_compcv, align 8
  %sv_any699 = getelementptr inbounds %struct.cv, %struct.cv* %569, i32 0, i32 0
  %570 = load %struct.xpvcv*, %struct.xpvcv** %sv_any699, align 8
  %571 = bitcast %struct.xpvcv* %570 to i8*
  %572 = bitcast i8* %571 to %struct.xpvcv*
  %xcv_flags700 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %572, i32 0, i32 12
  %573 = load i32, i32* %xcv_flags700, align 4
  %574 = load i32, i32* %existing_builtin_attrs, align 4
  %or701 = or i32 %573, %574
  %575 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any702 = getelementptr inbounds %struct.cv, %struct.cv* %575, i32 0, i32 0
  %576 = load %struct.xpvcv*, %struct.xpvcv** %sv_any702, align 8
  %577 = bitcast %struct.xpvcv* %576 to i8*
  %578 = bitcast i8* %577 to %struct.xpvcv*
  %xcv_flags703 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %578, i32 0, i32 12
  %579 = load i32, i32* %xcv_flags703, align 4
  %and704 = and i32 %579, 32768
  %or705 = or i32 %or701, %and704
  %580 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any706 = getelementptr inbounds %struct.cv, %struct.cv* %580, i32 0, i32 0
  %581 = load %struct.xpvcv*, %struct.xpvcv** %sv_any706, align 8
  %582 = bitcast %struct.xpvcv* %581 to i8*
  %583 = bitcast i8* %582 to %struct.xpvcv*
  %xcv_flags707 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %583, i32 0, i32 12
  store i32 %or705, i32* %xcv_flags707, align 4
  %584 = load %struct.cv*, %struct.cv** @PL_compcv, align 8
  %sv_any708 = getelementptr inbounds %struct.cv, %struct.cv* %584, i32 0, i32 0
  %585 = load %struct.xpvcv*, %struct.xpvcv** %sv_any708, align 8
  %586 = bitcast %struct.xpvcv* %585 to i8*
  %587 = bitcast i8* %586 to %struct.xpvcv*
  %xcv_outside709 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %587, i32 0, i32 10
  %588 = load %struct.cv*, %struct.cv** %xcv_outside709, align 8
  %589 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any710 = getelementptr inbounds %struct.cv, %struct.cv* %589, i32 0, i32 0
  %590 = load %struct.xpvcv*, %struct.xpvcv** %sv_any710, align 8
  %591 = bitcast %struct.xpvcv* %590 to i8*
  %592 = bitcast i8* %591 to %struct.xpvcv*
  %xcv_outside711 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %592, i32 0, i32 10
  store %struct.cv* %588, %struct.cv** %xcv_outside711, align 8
  %593 = load %struct.cv*, %struct.cv** @PL_compcv, align 8
  %sv_any712 = getelementptr inbounds %struct.cv, %struct.cv* %593, i32 0, i32 0
  %594 = load %struct.xpvcv*, %struct.xpvcv** %sv_any712, align 8
  %595 = bitcast %struct.xpvcv* %594 to i8*
  %596 = bitcast i8* %595 to %struct.xpvcv*
  %xcv_outside_seq = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %596, i32 0, i32 11
  %597 = load i32, i32* %xcv_outside_seq, align 8
  %598 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any713 = getelementptr inbounds %struct.cv, %struct.cv* %598, i32 0, i32 0
  %599 = load %struct.xpvcv*, %struct.xpvcv** %sv_any713, align 8
  %600 = bitcast %struct.xpvcv* %599 to i8*
  %601 = bitcast i8* %600 to %struct.xpvcv*
  %xcv_outside_seq714 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %601, i32 0, i32 11
  store i32 %597, i32* %xcv_outside_seq714, align 8
  %602 = load %struct.cv*, %struct.cv** @PL_compcv, align 8
  %sv_any715 = getelementptr inbounds %struct.cv, %struct.cv* %602, i32 0, i32 0
  %603 = load %struct.xpvcv*, %struct.xpvcv** %sv_any715, align 8
  %604 = bitcast %struct.xpvcv* %603 to i8*
  %605 = bitcast i8* %604 to %struct.xpvcv*
  %xcv_padlist_u716 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %605, i32 0, i32 9
  %xcv_padlist717 = bitcast %union.anon.9* %xcv_padlist_u716 to %struct.padlist**
  %606 = load %struct.padlist*, %struct.padlist** %xcv_padlist717, align 8
  %607 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any718 = getelementptr inbounds %struct.cv, %struct.cv* %607, i32 0, i32 0
  %608 = load %struct.xpvcv*, %struct.xpvcv** %sv_any718, align 8
  %609 = bitcast %struct.xpvcv* %608 to i8*
  %610 = bitcast i8* %609 to %struct.xpvcv*
  %xcv_padlist_u719 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %610, i32 0, i32 9
  %xcv_padlist720 = bitcast %union.anon.9* %xcv_padlist_u719 to %struct.padlist**
  store %struct.padlist* %606, %struct.padlist** %xcv_padlist720, align 8
  %611 = load %struct.cv*, %struct.cv** %temp_cv, align 8
  %612 = load %struct.cv*, %struct.cv** @PL_compcv, align 8
  %sv_any721 = getelementptr inbounds %struct.cv, %struct.cv* %612, i32 0, i32 0
  %613 = load %struct.xpvcv*, %struct.xpvcv** %sv_any721, align 8
  %614 = bitcast %struct.xpvcv* %613 to i8*
  %615 = bitcast i8* %614 to %struct.xpvcv*
  %xcv_outside722 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %615, i32 0, i32 10
  store %struct.cv* %611, %struct.cv** %xcv_outside722, align 8
  %616 = load %struct.padlist*, %struct.padlist** %temp_av, align 8
  %617 = load %struct.cv*, %struct.cv** @PL_compcv, align 8
  %sv_any723 = getelementptr inbounds %struct.cv, %struct.cv* %617, i32 0, i32 0
  %618 = load %struct.xpvcv*, %struct.xpvcv** %sv_any723, align 8
  %619 = bitcast %struct.xpvcv* %618 to i8*
  %620 = bitcast i8* %619 to %struct.xpvcv*
  %xcv_padlist_u724 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %620, i32 0, i32 9
  %xcv_padlist725 = bitcast %union.anon.9* %xcv_padlist_u724 to %struct.padlist**
  store %struct.padlist* %616, %struct.padlist** %xcv_padlist725, align 8
  %621 = load %struct.cv*, %struct.cv** @PL_compcv, align 8
  %sv_any726 = getelementptr inbounds %struct.cv, %struct.cv* %621, i32 0, i32 0
  %622 = load %struct.xpvcv*, %struct.xpvcv** %sv_any726, align 8
  %623 = bitcast %struct.xpvcv* %622 to i8*
  %624 = bitcast i8* %623 to %struct.xpvcv*
  %xcv_start_u727 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %624, i32 0, i32 5
  %xcv_start728 = bitcast %union.anon.6* %xcv_start_u727 to %struct.op**
  %625 = load %struct.op*, %struct.op** %xcv_start728, align 8
  %626 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any729 = getelementptr inbounds %struct.cv, %struct.cv* %626, i32 0, i32 0
  %627 = load %struct.xpvcv*, %struct.xpvcv** %sv_any729, align 8
  %628 = bitcast %struct.xpvcv* %627 to i8*
  %629 = bitcast i8* %628 to %struct.xpvcv*
  %xcv_start_u730 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %629, i32 0, i32 5
  %xcv_start731 = bitcast %union.anon.6* %xcv_start_u730 to %struct.op**
  store %struct.op* %625, %struct.op** %xcv_start731, align 8
  %630 = load %struct.op*, %struct.op** %cvstart, align 8
  %631 = load %struct.cv*, %struct.cv** @PL_compcv, align 8
  %sv_any732 = getelementptr inbounds %struct.cv, %struct.cv* %631, i32 0, i32 0
  %632 = load %struct.xpvcv*, %struct.xpvcv** %sv_any732, align 8
  %633 = bitcast %struct.xpvcv* %632 to i8*
  %634 = bitcast i8* %633 to %struct.xpvcv*
  %xcv_start_u733 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %634, i32 0, i32 5
  %xcv_start734 = bitcast %union.anon.6* %xcv_start_u733 to %struct.op**
  store %struct.op* %630, %struct.op** %xcv_start734, align 8
  %635 = load %struct.cv*, %struct.cv** @PL_compcv, align 8
  %sv_any735 = getelementptr inbounds %struct.cv, %struct.cv* %635, i32 0, i32 0
  %636 = load %struct.xpvcv*, %struct.xpvcv** %sv_any735, align 8
  %637 = bitcast %struct.xpvcv* %636 to i8*
  %638 = bitcast i8* %637 to %struct.xpvcv*
  %xcv_flags736 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %638, i32 0, i32 12
  %639 = load i32, i32* %xcv_flags736, align 4
  %and737 = and i32 %639, -2065
  store i32 %and737, i32* %xcv_flags736, align 4
  %640 = load i32, i32* %other_flags, align 4
  %641 = load %struct.cv*, %struct.cv** @PL_compcv, align 8
  %sv_any738 = getelementptr inbounds %struct.cv, %struct.cv* %641, i32 0, i32 0
  %642 = load %struct.xpvcv*, %struct.xpvcv** %sv_any738, align 8
  %643 = bitcast %struct.xpvcv* %642 to i8*
  %644 = bitcast i8* %643 to %struct.xpvcv*
  %xcv_flags739 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %644, i32 0, i32 12
  %645 = load i32, i32* %xcv_flags739, align 4
  %or740 = or i32 %645, %640
  store i32 %or740, i32* %xcv_flags739, align 4
  %646 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any741 = getelementptr inbounds %struct.cv, %struct.cv* %646, i32 0, i32 0
  %647 = load %struct.xpvcv*, %struct.xpvcv** %sv_any741, align 8
  %648 = bitcast %struct.xpvcv* %647 to i8*
  %649 = bitcast i8* %648 to %struct.xpvcv*
  %xcv_file = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %649, i32 0, i32 8
  %650 = load i8*, i8** %xcv_file, align 8
  %tobool742 = icmp ne i8* %650, null
  br i1 %tobool742, label %land.lhs.true743, label %if.end751

land.lhs.true743:                                 ; preds = %if.end696
  %651 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any744 = getelementptr inbounds %struct.cv, %struct.cv* %651, i32 0, i32 0
  %652 = load %struct.xpvcv*, %struct.xpvcv** %sv_any744, align 8
  %653 = bitcast %struct.xpvcv* %652 to i8*
  %654 = bitcast i8* %653 to %struct.xpvcv*
  %xcv_flags745 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %654, i32 0, i32 12
  %655 = load i32, i32* %xcv_flags745, align 4
  %and746 = and i32 %655, 4096
  %tobool747 = icmp ne i32 %and746, 0
  br i1 %tobool747, label %if.then748, label %if.end751

if.then748:                                       ; preds = %land.lhs.true743
  %656 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any749 = getelementptr inbounds %struct.cv, %struct.cv* %656, i32 0, i32 0
  %657 = load %struct.xpvcv*, %struct.xpvcv** %sv_any749, align 8
  %658 = bitcast %struct.xpvcv* %657 to i8*
  %659 = bitcast i8* %658 to %struct.xpvcv*
  %xcv_file750 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %659, i32 0, i32 8
  %660 = load i8*, i8** %xcv_file750, align 8
  call void @Perl_safesysfree(i8* %660)
  br label %if.end751

if.end751:                                        ; preds = %if.then748, %land.lhs.true743, %if.end696
  %661 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_filegv752 = getelementptr inbounds %struct.cop, %struct.cop* %661, i32 0, i32 9
  %662 = load %struct.gv*, %struct.gv** %cop_filegv752, align 8
  %tobool753 = icmp ne %struct.gv* %662, null
  br i1 %tobool753, label %cond.true754, label %cond.false762

cond.true754:                                     ; preds = %if.end751
  %663 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_filegv755 = getelementptr inbounds %struct.cop, %struct.cop* %663, i32 0, i32 9
  %664 = load %struct.gv*, %struct.gv** %cop_filegv755, align 8
  %sv_any756 = getelementptr inbounds %struct.gv, %struct.gv* %664, i32 0, i32 0
  %665 = load %struct.xpvgv*, %struct.xpvgv** %sv_any756, align 8
  %xiv_u757 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %665, i32 0, i32 4
  %xivu_namehek758 = bitcast %union._xivu* %xiv_u757 to %struct.hek**
  %666 = load %struct.hek*, %struct.hek** %xivu_namehek758, align 8
  %hek_key759 = getelementptr inbounds %struct.hek, %struct.hek* %666, i32 0, i32 2
  %arraydecay760 = getelementptr inbounds [1 x i8], [1 x i8]* %hek_key759, i64 0, i64 0
  %add.ptr761 = getelementptr inbounds i8, i8* %arraydecay760, i64 2
  br label %cond.end763

cond.false762:                                    ; preds = %if.end751
  br label %cond.end763

cond.end763:                                      ; preds = %cond.false762, %cond.true754
  %cond764 = phi i8* [ %add.ptr761, %cond.true754 ], [ null, %cond.false762 ]
  %667 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any765 = getelementptr inbounds %struct.cv, %struct.cv* %667, i32 0, i32 0
  %668 = load %struct.xpvcv*, %struct.xpvcv** %sv_any765, align 8
  %669 = bitcast %struct.xpvcv* %668 to i8*
  %670 = bitcast i8* %669 to %struct.xpvcv*
  %xcv_file766 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %670, i32 0, i32 8
  store i8* %cond764, i8** %xcv_file766, align 8
  %671 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any767 = getelementptr inbounds %struct.cv, %struct.cv* %671, i32 0, i32 0
  %672 = load %struct.xpvcv*, %struct.xpvcv** %sv_any767, align 8
  %673 = bitcast %struct.xpvcv* %672 to i8*
  %674 = bitcast i8* %673 to %struct.xpvcv*
  %xcv_flags768 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %674, i32 0, i32 12
  %675 = load i32, i32* %xcv_flags768, align 4
  %and769 = and i32 %675, -4097
  store i32 %and769, i32* %xcv_flags768, align 4
  %676 = load %struct.cv*, %struct.cv** %cv, align 8
  %677 = load %struct.hv*, %struct.hv** @PL_curstash, align 8
  call void @Perl_cvstash_set(%struct.cv* %676, %struct.hv* %677)
  %678 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any770 = getelementptr inbounds %struct.cv, %struct.cv* %678, i32 0, i32 0
  %679 = load %struct.xpvcv*, %struct.xpvcv** %sv_any770, align 8
  %680 = bitcast %struct.xpvcv* %679 to i8*
  %681 = bitcast i8* %680 to %struct.xpvcv*
  %xcv_padlist_u771 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %681, i32 0, i32 9
  %xcv_padlist772 = bitcast %union.anon.9* %xcv_padlist_u771 to %struct.padlist**
  %682 = load %struct.padlist*, %struct.padlist** %xcv_padlist772, align 8
  %683 = load %struct.cv*, %struct.cv** @PL_compcv, align 8
  %684 = load %struct.cv*, %struct.cv** %cv, align 8
  call void @Perl_pad_fixup_inner_anons(%struct.padlist* %682, %struct.cv* %683, %struct.cv* %684)
  %685 = load i32, i32* @PL_perldb, align 4
  %and773 = and i32 %685, 8
  %tobool774 = icmp ne i32 %and773, 0
  br i1 %tobool774, label %if.then775, label %if.end777

if.then775:                                       ; preds = %cond.end763
  %686 = load i32, i32* @PL_sub_generation, align 4
  %inc776 = add i32 %686, 1
  store i32 %inc776, i32* @PL_sub_generation, align 4
  br label %if.end777

if.end777:                                        ; preds = %if.then775, %cond.end763
  br label %if.end785

if.else778:                                       ; preds = %if.then656
  %687 = load %struct.cv*, %struct.cv** @PL_compcv, align 8
  %sv_any779 = getelementptr inbounds %struct.cv, %struct.cv* %687, i32 0, i32 0
  %688 = load %struct.xpvcv*, %struct.xpvcv** %sv_any779, align 8
  %689 = bitcast %struct.xpvcv* %688 to i8*
  %690 = bitcast i8* %689 to %struct.xpvcv*
  %xcv_flags780 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %690, i32 0, i32 12
  %691 = load i32, i32* %xcv_flags780, align 4
  %and781 = and i32 %691, 131075
  %692 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any782 = getelementptr inbounds %struct.cv, %struct.cv* %692, i32 0, i32 0
  %693 = load %struct.xpvcv*, %struct.xpvcv** %sv_any782, align 8
  %694 = bitcast %struct.xpvcv* %693 to i8*
  %695 = bitcast i8* %694 to %struct.xpvcv*
  %xcv_flags783 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %695, i32 0, i32 12
  %696 = load i32, i32* %xcv_flags783, align 4
  %or784 = or i32 %696, %and781
  store i32 %or784, i32* %xcv_flags783, align 4
  br label %if.end785

if.end785:                                        ; preds = %if.else778, %if.end777
  %697 = load %struct.cv*, %struct.cv** @PL_compcv, align 8
  %698 = bitcast %struct.cv* %697 to i8*
  %699 = bitcast i8* %698 to %struct.sv*
  call void @S_SvREFCNT_dec(%struct.sv* %699)
  %700 = load %struct.cv*, %struct.cv** %cv, align 8
  store %struct.cv* %700, %struct.cv** @PL_compcv, align 8
  br label %if.end1039

if.else786:                                       ; preds = %if.end654
  %701 = load %struct.cv*, %struct.cv** @PL_compcv, align 8
  store %struct.cv* %701, %struct.cv** %cv, align 8
  %702 = load i8*, i8** %name, align 8
  %tobool787 = icmp ne i8* %702, null
  br i1 %tobool787, label %land.lhs.true788, label %if.else929

land.lhs.true788:                                 ; preds = %if.else786
  %703 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_flags789 = getelementptr inbounds %struct.gv, %struct.gv* %703, i32 0, i32 2
  %704 = load i32, i32* %sv_flags789, align 4
  %and790 = and i32 %704, 255
  %cmp791 = icmp eq i32 %and790, 9
  br i1 %cmp791, label %if.then793, label %if.else929

if.then793:                                       ; preds = %land.lhs.true788
  %705 = load %struct.cv*, %struct.cv** %cv, align 8
  %706 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u794 = getelementptr inbounds %struct.gv, %struct.gv* %706, i32 0, i32 3
  %svu_gp795 = bitcast %union.anon.3* %sv_u794 to %struct.gp**
  %707 = load %struct.gp*, %struct.gp** %svu_gp795, align 8
  %add.ptr796 = getelementptr inbounds %struct.gp, %struct.gp* %707, i64 0
  %gp_cv797 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr796, i32 0, i32 2
  store %struct.cv* %705, %struct.cv** %gp_cv797, align 8
  %708 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u798 = getelementptr inbounds %struct.gv, %struct.gv* %708, i32 0, i32 3
  %svu_gp799 = bitcast %union.anon.3* %sv_u798 to %struct.gp**
  %709 = load %struct.gp*, %struct.gp** %svu_gp799, align 8
  %add.ptr800 = getelementptr inbounds %struct.gp, %struct.gp* %709, i64 0
  %gp_cvgen801 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr800, i32 0, i32 3
  store i32 0, i32* %gp_cvgen801, align 8
  %710 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_any802 = getelementptr inbounds %struct.gv, %struct.gv* %710, i32 0, i32 0
  %711 = load %struct.xpvgv*, %struct.xpvgv** %sv_any802, align 8
  %xnv_u = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %711, i32 0, i32 5
  %xgv_stash = bitcast %union._xnvu* %xnv_u to %struct.hv**
  %712 = load %struct.hv*, %struct.hv** %xgv_stash, align 8
  %sv_flags803 = getelementptr inbounds %struct.hv, %struct.hv* %712, i32 0, i32 2
  %713 = load i32, i32* %sv_flags803, align 4
  %and804 = and i32 %713, 33554432
  %tobool805 = icmp ne i32 %and804, 0
  br i1 %tobool805, label %land.lhs.true806, label %cond.false914

land.lhs.true806:                                 ; preds = %if.then793
  %714 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_any807 = getelementptr inbounds %struct.gv, %struct.gv* %714, i32 0, i32 0
  %715 = load %struct.xpvgv*, %struct.xpvgv** %sv_any807, align 8
  %xnv_u808 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %715, i32 0, i32 5
  %xgv_stash809 = bitcast %union._xnvu* %xnv_u808 to %struct.hv**
  %716 = load %struct.hv*, %struct.hv** %xgv_stash809, align 8
  %sv_u810 = getelementptr inbounds %struct.hv, %struct.hv* %716, i32 0, i32 3
  %svu_hash = bitcast %union.anon.4* %sv_u810 to %struct.he***
  %717 = load %struct.he**, %struct.he*** %svu_hash, align 8
  %718 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_any811 = getelementptr inbounds %struct.gv, %struct.gv* %718, i32 0, i32 0
  %719 = load %struct.xpvgv*, %struct.xpvgv** %sv_any811, align 8
  %xnv_u812 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %719, i32 0, i32 5
  %xgv_stash813 = bitcast %union._xnvu* %xnv_u812 to %struct.hv**
  %720 = load %struct.hv*, %struct.hv** %xgv_stash813, align 8
  %sv_any814 = getelementptr inbounds %struct.hv, %struct.hv* %720, i32 0, i32 0
  %721 = load %struct.xpvhv*, %struct.xpvhv** %sv_any814, align 8
  %xhv_max = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %721, i32 0, i32 3
  %722 = load i64, i64* %xhv_max, align 8
  %add = add i64 %722, 1
  %arrayidx815 = getelementptr inbounds %struct.he*, %struct.he** %717, i64 %add
  %723 = bitcast %struct.he** %arrayidx815 to %struct.xpvhv_aux*
  %xhv_name_u = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %723, i32 0, i32 0
  %xhvnameu_name = bitcast %union._xhvnameu* %xhv_name_u to %struct.hek**
  %724 = load %struct.hek*, %struct.hek** %xhvnameu_name, align 8
  %tobool816 = icmp ne %struct.hek* %724, null
  br i1 %tobool816, label %cond.true817, label %cond.false914

cond.true817:                                     ; preds = %land.lhs.true806
  %725 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_any818 = getelementptr inbounds %struct.gv, %struct.gv* %725, i32 0, i32 0
  %726 = load %struct.xpvgv*, %struct.xpvgv** %sv_any818, align 8
  %xnv_u819 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %726, i32 0, i32 5
  %xgv_stash820 = bitcast %union._xnvu* %xnv_u819 to %struct.hv**
  %727 = load %struct.hv*, %struct.hv** %xgv_stash820, align 8
  %sv_u821 = getelementptr inbounds %struct.hv, %struct.hv* %727, i32 0, i32 3
  %svu_hash822 = bitcast %union.anon.4* %sv_u821 to %struct.he***
  %728 = load %struct.he**, %struct.he*** %svu_hash822, align 8
  %729 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_any823 = getelementptr inbounds %struct.gv, %struct.gv* %729, i32 0, i32 0
  %730 = load %struct.xpvgv*, %struct.xpvgv** %sv_any823, align 8
  %xnv_u824 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %730, i32 0, i32 5
  %xgv_stash825 = bitcast %union._xnvu* %xnv_u824 to %struct.hv**
  %731 = load %struct.hv*, %struct.hv** %xgv_stash825, align 8
  %sv_any826 = getelementptr inbounds %struct.hv, %struct.hv* %731, i32 0, i32 0
  %732 = load %struct.xpvhv*, %struct.xpvhv** %sv_any826, align 8
  %xhv_max827 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %732, i32 0, i32 3
  %733 = load i64, i64* %xhv_max827, align 8
  %add828 = add i64 %733, 1
  %arrayidx829 = getelementptr inbounds %struct.he*, %struct.he** %728, i64 %add828
  %734 = bitcast %struct.he** %arrayidx829 to %struct.xpvhv_aux*
  %xhv_name_count = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %734, i32 0, i32 4
  %735 = load i32, i32* %xhv_name_count, align 4
  %cmp830 = icmp sgt i32 %735, 0
  br i1 %cmp830, label %cond.true832, label %cond.false848

cond.true832:                                     ; preds = %cond.true817
  %736 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_any833 = getelementptr inbounds %struct.gv, %struct.gv* %736, i32 0, i32 0
  %737 = load %struct.xpvgv*, %struct.xpvgv** %sv_any833, align 8
  %xnv_u834 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %737, i32 0, i32 5
  %xgv_stash835 = bitcast %union._xnvu* %xnv_u834 to %struct.hv**
  %738 = load %struct.hv*, %struct.hv** %xgv_stash835, align 8
  %sv_u836 = getelementptr inbounds %struct.hv, %struct.hv* %738, i32 0, i32 3
  %svu_hash837 = bitcast %union.anon.4* %sv_u836 to %struct.he***
  %739 = load %struct.he**, %struct.he*** %svu_hash837, align 8
  %740 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_any838 = getelementptr inbounds %struct.gv, %struct.gv* %740, i32 0, i32 0
  %741 = load %struct.xpvgv*, %struct.xpvgv** %sv_any838, align 8
  %xnv_u839 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %741, i32 0, i32 5
  %xgv_stash840 = bitcast %union._xnvu* %xnv_u839 to %struct.hv**
  %742 = load %struct.hv*, %struct.hv** %xgv_stash840, align 8
  %sv_any841 = getelementptr inbounds %struct.hv, %struct.hv* %742, i32 0, i32 0
  %743 = load %struct.xpvhv*, %struct.xpvhv** %sv_any841, align 8
  %xhv_max842 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %743, i32 0, i32 3
  %744 = load i64, i64* %xhv_max842, align 8
  %add843 = add i64 %744, 1
  %arrayidx844 = getelementptr inbounds %struct.he*, %struct.he** %739, i64 %add843
  %745 = bitcast %struct.he** %arrayidx844 to %struct.xpvhv_aux*
  %xhv_name_u845 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %745, i32 0, i32 0
  %xhvnameu_names = bitcast %union._xhvnameu* %xhv_name_u845 to %struct.hek***
  %746 = load %struct.hek**, %struct.hek*** %xhvnameu_names, align 8
  %arrayidx846 = getelementptr inbounds %struct.hek*, %struct.hek** %746, i64 0
  %747 = load %struct.hek*, %struct.hek** %arrayidx846, align 8
  %tobool847 = icmp ne %struct.hek* %747, null
  br i1 %tobool847, label %if.then915, label %if.end928

cond.false848:                                    ; preds = %cond.true817
  %748 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_any849 = getelementptr inbounds %struct.gv, %struct.gv* %748, i32 0, i32 0
  %749 = load %struct.xpvgv*, %struct.xpvgv** %sv_any849, align 8
  %xnv_u850 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %749, i32 0, i32 5
  %xgv_stash851 = bitcast %union._xnvu* %xnv_u850 to %struct.hv**
  %750 = load %struct.hv*, %struct.hv** %xgv_stash851, align 8
  %sv_u852 = getelementptr inbounds %struct.hv, %struct.hv* %750, i32 0, i32 3
  %svu_hash853 = bitcast %union.anon.4* %sv_u852 to %struct.he***
  %751 = load %struct.he**, %struct.he*** %svu_hash853, align 8
  %752 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_any854 = getelementptr inbounds %struct.gv, %struct.gv* %752, i32 0, i32 0
  %753 = load %struct.xpvgv*, %struct.xpvgv** %sv_any854, align 8
  %xnv_u855 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %753, i32 0, i32 5
  %xgv_stash856 = bitcast %union._xnvu* %xnv_u855 to %struct.hv**
  %754 = load %struct.hv*, %struct.hv** %xgv_stash856, align 8
  %sv_any857 = getelementptr inbounds %struct.hv, %struct.hv* %754, i32 0, i32 0
  %755 = load %struct.xpvhv*, %struct.xpvhv** %sv_any857, align 8
  %xhv_max858 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %755, i32 0, i32 3
  %756 = load i64, i64* %xhv_max858, align 8
  %add859 = add i64 %756, 1
  %arrayidx860 = getelementptr inbounds %struct.he*, %struct.he** %751, i64 %add859
  %757 = bitcast %struct.he** %arrayidx860 to %struct.xpvhv_aux*
  %xhv_name_count861 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %757, i32 0, i32 4
  %758 = load i32, i32* %xhv_name_count861, align 4
  %cmp862 = icmp slt i32 %758, -1
  br i1 %cmp862, label %cond.true864, label %cond.false881

cond.true864:                                     ; preds = %cond.false848
  %759 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_any865 = getelementptr inbounds %struct.gv, %struct.gv* %759, i32 0, i32 0
  %760 = load %struct.xpvgv*, %struct.xpvgv** %sv_any865, align 8
  %xnv_u866 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %760, i32 0, i32 5
  %xgv_stash867 = bitcast %union._xnvu* %xnv_u866 to %struct.hv**
  %761 = load %struct.hv*, %struct.hv** %xgv_stash867, align 8
  %sv_u868 = getelementptr inbounds %struct.hv, %struct.hv* %761, i32 0, i32 3
  %svu_hash869 = bitcast %union.anon.4* %sv_u868 to %struct.he***
  %762 = load %struct.he**, %struct.he*** %svu_hash869, align 8
  %763 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_any870 = getelementptr inbounds %struct.gv, %struct.gv* %763, i32 0, i32 0
  %764 = load %struct.xpvgv*, %struct.xpvgv** %sv_any870, align 8
  %xnv_u871 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %764, i32 0, i32 5
  %xgv_stash872 = bitcast %union._xnvu* %xnv_u871 to %struct.hv**
  %765 = load %struct.hv*, %struct.hv** %xgv_stash872, align 8
  %sv_any873 = getelementptr inbounds %struct.hv, %struct.hv* %765, i32 0, i32 0
  %766 = load %struct.xpvhv*, %struct.xpvhv** %sv_any873, align 8
  %xhv_max874 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %766, i32 0, i32 3
  %767 = load i64, i64* %xhv_max874, align 8
  %add875 = add i64 %767, 1
  %arrayidx876 = getelementptr inbounds %struct.he*, %struct.he** %762, i64 %add875
  %768 = bitcast %struct.he** %arrayidx876 to %struct.xpvhv_aux*
  %xhv_name_u877 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %768, i32 0, i32 0
  %xhvnameu_names878 = bitcast %union._xhvnameu* %xhv_name_u877 to %struct.hek***
  %769 = load %struct.hek**, %struct.hek*** %xhvnameu_names878, align 8
  %arrayidx879 = getelementptr inbounds %struct.hek*, %struct.hek** %769, i64 1
  %770 = load %struct.hek*, %struct.hek** %arrayidx879, align 8
  %tobool880 = icmp ne %struct.hek* %770, null
  br i1 %tobool880, label %if.then915, label %if.end928

cond.false881:                                    ; preds = %cond.false848
  %771 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_any882 = getelementptr inbounds %struct.gv, %struct.gv* %771, i32 0, i32 0
  %772 = load %struct.xpvgv*, %struct.xpvgv** %sv_any882, align 8
  %xnv_u883 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %772, i32 0, i32 5
  %xgv_stash884 = bitcast %union._xnvu* %xnv_u883 to %struct.hv**
  %773 = load %struct.hv*, %struct.hv** %xgv_stash884, align 8
  %sv_u885 = getelementptr inbounds %struct.hv, %struct.hv* %773, i32 0, i32 3
  %svu_hash886 = bitcast %union.anon.4* %sv_u885 to %struct.he***
  %774 = load %struct.he**, %struct.he*** %svu_hash886, align 8
  %775 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_any887 = getelementptr inbounds %struct.gv, %struct.gv* %775, i32 0, i32 0
  %776 = load %struct.xpvgv*, %struct.xpvgv** %sv_any887, align 8
  %xnv_u888 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %776, i32 0, i32 5
  %xgv_stash889 = bitcast %union._xnvu* %xnv_u888 to %struct.hv**
  %777 = load %struct.hv*, %struct.hv** %xgv_stash889, align 8
  %sv_any890 = getelementptr inbounds %struct.hv, %struct.hv* %777, i32 0, i32 0
  %778 = load %struct.xpvhv*, %struct.xpvhv** %sv_any890, align 8
  %xhv_max891 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %778, i32 0, i32 3
  %779 = load i64, i64* %xhv_max891, align 8
  %add892 = add i64 %779, 1
  %arrayidx893 = getelementptr inbounds %struct.he*, %struct.he** %774, i64 %add892
  %780 = bitcast %struct.he** %arrayidx893 to %struct.xpvhv_aux*
  %xhv_name_count894 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %780, i32 0, i32 4
  %781 = load i32, i32* %xhv_name_count894, align 4
  %cmp895 = icmp eq i32 %781, -1
  br i1 %cmp895, label %cond.true897, label %cond.false898

cond.true897:                                     ; preds = %cond.false881
  br i1 false, label %if.then915, label %if.end928

cond.false898:                                    ; preds = %cond.false881
  %782 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_any899 = getelementptr inbounds %struct.gv, %struct.gv* %782, i32 0, i32 0
  %783 = load %struct.xpvgv*, %struct.xpvgv** %sv_any899, align 8
  %xnv_u900 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %783, i32 0, i32 5
  %xgv_stash901 = bitcast %union._xnvu* %xnv_u900 to %struct.hv**
  %784 = load %struct.hv*, %struct.hv** %xgv_stash901, align 8
  %sv_u902 = getelementptr inbounds %struct.hv, %struct.hv* %784, i32 0, i32 3
  %svu_hash903 = bitcast %union.anon.4* %sv_u902 to %struct.he***
  %785 = load %struct.he**, %struct.he*** %svu_hash903, align 8
  %786 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_any904 = getelementptr inbounds %struct.gv, %struct.gv* %786, i32 0, i32 0
  %787 = load %struct.xpvgv*, %struct.xpvgv** %sv_any904, align 8
  %xnv_u905 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %787, i32 0, i32 5
  %xgv_stash906 = bitcast %union._xnvu* %xnv_u905 to %struct.hv**
  %788 = load %struct.hv*, %struct.hv** %xgv_stash906, align 8
  %sv_any907 = getelementptr inbounds %struct.hv, %struct.hv* %788, i32 0, i32 0
  %789 = load %struct.xpvhv*, %struct.xpvhv** %sv_any907, align 8
  %xhv_max908 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %789, i32 0, i32 3
  %790 = load i64, i64* %xhv_max908, align 8
  %add909 = add i64 %790, 1
  %arrayidx910 = getelementptr inbounds %struct.he*, %struct.he** %785, i64 %add909
  %791 = bitcast %struct.he** %arrayidx910 to %struct.xpvhv_aux*
  %xhv_name_u911 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %791, i32 0, i32 0
  %xhvnameu_name912 = bitcast %union._xhvnameu* %xhv_name_u911 to %struct.hek**
  %792 = load %struct.hek*, %struct.hek** %xhvnameu_name912, align 8
  %tobool913 = icmp ne %struct.hek* %792, null
  br i1 %tobool913, label %if.then915, label %if.end928

cond.false914:                                    ; preds = %land.lhs.true806, %if.then793
  br i1 false, label %if.then915, label %if.end928

if.then915:                                       ; preds = %cond.false914, %cond.false898, %cond.true897, %cond.true864, %cond.true832
  %793 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u916 = getelementptr inbounds %struct.gv, %struct.gv* %793, i32 0, i32 3
  %svu_gp917 = bitcast %union.anon.3* %sv_u916 to %struct.gp**
  %794 = load %struct.gp*, %struct.gp** %svu_gp917, align 8
  %add.ptr918 = getelementptr inbounds %struct.gp, %struct.gp* %794, i64 0
  %gp_refcnt = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr918, i32 0, i32 4
  %795 = load i32, i32* %gp_refcnt, align 4
  %cmp919 = icmp ugt i32 %795, 1
  br i1 %cmp919, label %cond.true921, label %cond.false923

cond.true921:                                     ; preds = %if.then915
  %796 = load i32, i32* @PL_sub_generation, align 4
  %inc922 = add i32 %796, 1
  store i32 %inc922, i32* @PL_sub_generation, align 4
  br label %cond.end927

cond.false923:                                    ; preds = %if.then915
  %797 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_any924 = getelementptr inbounds %struct.gv, %struct.gv* %797, i32 0, i32 0
  %798 = load %struct.xpvgv*, %struct.xpvgv** %sv_any924, align 8
  %xnv_u925 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %798, i32 0, i32 5
  %xgv_stash926 = bitcast %union._xnvu* %xnv_u925 to %struct.hv**
  %799 = load %struct.hv*, %struct.hv** %xgv_stash926, align 8
  call void @Perl_mro_method_changed_in(%struct.hv* %799)
  br label %cond.end927

cond.end927:                                      ; preds = %cond.false923, %cond.true921
  br label %if.end928

if.end928:                                        ; preds = %cond.end927, %cond.false914, %cond.false898, %cond.true897, %cond.true864, %cond.true832
  br label %if.end1038

if.else929:                                       ; preds = %land.lhs.true788, %if.else786
  %800 = load i8*, i8** %name, align 8
  %tobool930 = icmp ne i8* %800, null
  br i1 %tobool930, label %if.then931, label %if.end1037

if.then931:                                       ; preds = %if.else929
  %801 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_flags932 = getelementptr inbounds %struct.gv, %struct.gv* %801, i32 0, i32 2
  %802 = load i32, i32* %sv_flags932, align 4
  %and933 = and i32 %802, 2048
  %tobool934 = icmp ne i32 %and933, 0
  br i1 %tobool934, label %if.end1032, label %if.then935

if.then935:                                       ; preds = %if.then931
  %803 = load %struct.gv*, %struct.gv** %gv, align 8
  %804 = bitcast %struct.gv* %803 to %struct.sv*
  %sv_flags936 = getelementptr inbounds %struct.sv, %struct.sv* %804, i32 0, i32 2
  %805 = load i32, i32* %sv_flags936, align 4
  %and937 = and i32 %805, 427886592
  %tobool938 = icmp ne i32 %and937, 0
  br i1 %tobool938, label %if.then939, label %if.end940

if.then939:                                       ; preds = %if.then935
  %806 = load %struct.gv*, %struct.gv** %gv, align 8
  %807 = bitcast %struct.gv* %806 to %struct.sv*
  call void @Perl_sv_force_normal_flags(%struct.sv* %807, i32 4)
  br label %if.end940

if.end940:                                        ; preds = %if.then939, %if.then935
  br label %do.body941

do.body941:                                       ; preds = %if.end940
  %808 = load %struct.gv*, %struct.gv** %gv, align 8
  %809 = bitcast %struct.gv* %808 to %struct.sv*
  %sv_flags942 = getelementptr inbounds %struct.sv, %struct.sv* %809, i32 0, i32 2
  %810 = load i32, i32* %sv_flags942, align 4
  %and943 = and i32 %810, 255
  %cmp944 = icmp ult i32 %and943, 3
  br i1 %cmp944, label %land.lhs.true946, label %if.else952

land.lhs.true946:                                 ; preds = %do.body941
  %811 = load %struct.gv*, %struct.gv** %gv, align 8
  %812 = bitcast %struct.gv* %811 to %struct.sv*
  %sv_flags947 = getelementptr inbounds %struct.sv, %struct.sv* %812, i32 0, i32 2
  %813 = load i32, i32* %sv_flags947, align 4
  %and948 = and i32 %813, 255
  %cmp949 = icmp ne i32 %and948, 1
  br i1 %cmp949, label %if.then951, label %if.else952

if.then951:                                       ; preds = %land.lhs.true946
  %814 = load %struct.gv*, %struct.gv** %gv, align 8
  %815 = bitcast %struct.gv* %814 to %struct.sv*
  call void @Perl_sv_upgrade(%struct.sv* %815, i32 1)
  br label %if.end1018

if.else952:                                       ; preds = %land.lhs.true946, %do.body941
  %816 = load %struct.gv*, %struct.gv** %gv, align 8
  %817 = bitcast %struct.gv* %816 to %struct.sv*
  %sv_flags953 = getelementptr inbounds %struct.sv, %struct.sv* %817, i32 0, i32 2
  %818 = load i32, i32* %sv_flags953, align 4
  %and954 = and i32 %818, 255
  %cmp955 = icmp uge i32 %and954, 3
  br i1 %cmp955, label %if.then957, label %if.end1017

if.then957:                                       ; preds = %if.else952
  br label %do.body958

do.body958:                                       ; preds = %if.then957
  %819 = load %struct.gv*, %struct.gv** %gv, align 8
  %820 = bitcast %struct.gv* %819 to %struct.sv*
  %sv_any959 = getelementptr inbounds %struct.sv, %struct.sv* %820, i32 0, i32 0
  %821 = load i8*, i8** %sv_any959, align 8
  %822 = bitcast i8* %821 to %struct.xpv*
  %xpv_len_u960 = getelementptr inbounds %struct.xpv, %struct.xpv* %822, i32 0, i32 3
  %xpvlenu_len961 = bitcast %union.anon.21* %xpv_len_u960 to i64*
  %823 = load i64, i64* %xpvlenu_len961, align 8
  %tobool962 = icmp ne i64 %823, 0
  br i1 %tobool962, label %if.then963, label %if.end1006

if.then963:                                       ; preds = %do.body958
  %824 = load %struct.gv*, %struct.gv** %gv, align 8
  %825 = bitcast %struct.gv* %824 to %struct.sv*
  %sv_flags964 = getelementptr inbounds %struct.sv, %struct.sv* %825, i32 0, i32 2
  %826 = load i32, i32* %sv_flags964, align 4
  %and965 = and i32 %826, 33554432
  %tobool966 = icmp ne i32 %and965, 0
  br i1 %tobool966, label %cond.true967, label %cond.false968

cond.true967:                                     ; preds = %if.then963
  br i1 true, label %if.then969, label %if.end1003

cond.false968:                                    ; preds = %if.then963
  br i1 false, label %if.then969, label %if.end1003

if.then969:                                       ; preds = %cond.false968, %cond.true967
  br label %do.body971

do.body971:                                       ; preds = %if.then969
  %827 = load %struct.gv*, %struct.gv** %gv, align 8
  %828 = bitcast %struct.gv* %827 to %struct.sv*
  %sv_flags972 = getelementptr inbounds %struct.sv, %struct.sv* %828, i32 0, i32 2
  %829 = load i32, i32* %sv_flags972, align 4
  %and973 = and i32 %829, 33554432
  %tobool974 = icmp ne i32 %and973, 0
  br i1 %tobool974, label %if.then975, label %if.else989

if.then975:                                       ; preds = %do.body971
  %830 = load %struct.gv*, %struct.gv** %gv, align 8
  %831 = bitcast %struct.gv* %830 to %struct.sv*
  %sv_u976 = getelementptr inbounds %struct.sv, %struct.sv* %831, i32 0, i32 3
  %svu_pv977 = bitcast %union.anon* %sv_u976 to i8**
  %832 = load i8*, i8** %svu_pv977, align 8
  %add.ptr978 = getelementptr inbounds i8, i8* %832, i64 0
  %arrayidx979 = getelementptr inbounds i8, i8* %add.ptr978, i64 -1
  %833 = load i8, i8* %arrayidx979, align 1
  %conv980 = zext i8 %833 to i64
  store i64 %conv980, i64* %zok970, align 8
  %834 = load i64, i64* %zok970, align 8
  %tobool981 = icmp ne i64 %834, 0
  br i1 %tobool981, label %if.end988, label %if.then982

if.then982:                                       ; preds = %if.then975
  %835 = bitcast i64* %zok970 to i8*
  %836 = load %struct.gv*, %struct.gv** %gv, align 8
  %837 = bitcast %struct.gv* %836 to %struct.sv*
  %sv_u983 = getelementptr inbounds %struct.sv, %struct.sv* %837, i32 0, i32 3
  %svu_pv984 = bitcast %union.anon* %sv_u983 to i8**
  %838 = load i8*, i8** %svu_pv984, align 8
  %add.ptr985 = getelementptr inbounds i8, i8* %838, i64 0
  %add.ptr986 = getelementptr inbounds i8, i8* %add.ptr985, i64 -1
  %add.ptr987 = getelementptr inbounds i8, i8* %add.ptr986, i64 -8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %835, i8* align 1 %add.ptr987, i64 8, i1 false)
  br label %if.end988

if.end988:                                        ; preds = %if.then982, %if.then975
  br label %if.end990

if.else989:                                       ; preds = %do.body971
  store i64 0, i64* %zok970, align 8
  br label %if.end990

if.end990:                                        ; preds = %if.else989, %if.end988
  br label %do.end991

do.end991:                                        ; preds = %if.end990
  br label %do.body992

do.body992:                                       ; preds = %do.end991
  %839 = load %struct.gv*, %struct.gv** %gv, align 8
  %840 = bitcast %struct.gv* %839 to %struct.sv*
  %sv_u993 = getelementptr inbounds %struct.sv, %struct.sv* %840, i32 0, i32 3
  %svu_pv994 = bitcast %union.anon* %sv_u993 to i8**
  %841 = load i8*, i8** %svu_pv994, align 8
  %add.ptr995 = getelementptr inbounds i8, i8* %841, i64 0
  %842 = load i64, i64* %zok970, align 8
  %idx.neg996 = sub i64 0, %842
  %add.ptr997 = getelementptr inbounds i8, i8* %add.ptr995, i64 %idx.neg996
  %843 = load %struct.gv*, %struct.gv** %gv, align 8
  %844 = bitcast %struct.gv* %843 to %struct.sv*
  %sv_u998 = getelementptr inbounds %struct.sv, %struct.sv* %844, i32 0, i32 3
  %svu_pv999 = bitcast %union.anon* %sv_u998 to i8**
  store i8* %add.ptr997, i8** %svu_pv999, align 8
  br label %do.end1000

do.end1000:                                       ; preds = %do.body992
  %845 = load %struct.gv*, %struct.gv** %gv, align 8
  %846 = bitcast %struct.gv* %845 to %struct.sv*
  %sv_flags1001 = getelementptr inbounds %struct.sv, %struct.sv* %846, i32 0, i32 2
  %847 = load i32, i32* %sv_flags1001, align 4
  %and1002 = and i32 %847, -33554433
  store i32 %and1002, i32* %sv_flags1001, align 4
  br label %if.end1003

if.end1003:                                       ; preds = %do.end1000, %cond.false968, %cond.true967
  %848 = load %struct.gv*, %struct.gv** %gv, align 8
  %849 = bitcast %struct.gv* %848 to %struct.sv*
  %sv_u1004 = getelementptr inbounds %struct.sv, %struct.sv* %849, i32 0, i32 3
  %svu_pv1005 = bitcast %union.anon* %sv_u1004 to i8**
  %850 = load i8*, i8** %svu_pv1005, align 8
  call void @Perl_safesysfree(i8* %850)
  br label %if.end1006

if.end1006:                                       ; preds = %if.end1003, %do.body958
  br label %do.end1007

do.end1007:                                       ; preds = %if.end1006
  br label %do.body1008

do.body1008:                                      ; preds = %do.end1007
  %851 = load %struct.gv*, %struct.gv** %gv, align 8
  %852 = bitcast %struct.gv* %851 to %struct.sv*
  %sv_any1009 = getelementptr inbounds %struct.sv, %struct.sv* %852, i32 0, i32 0
  %853 = load i8*, i8** %sv_any1009, align 8
  %854 = bitcast i8* %853 to %struct.xpv*
  %xpv_len_u1010 = getelementptr inbounds %struct.xpv, %struct.xpv* %854, i32 0, i32 3
  %xpvlenu_len1011 = bitcast %union.anon.21* %xpv_len_u1010 to i64*
  store i64 0, i64* %xpvlenu_len1011, align 8
  br label %do.end1012

do.end1012:                                       ; preds = %do.body1008
  br label %do.body1013

do.body1013:                                      ; preds = %do.end1012
  %855 = load %struct.gv*, %struct.gv** %gv, align 8
  %856 = bitcast %struct.gv* %855 to %struct.sv*
  %sv_any1014 = getelementptr inbounds %struct.sv, %struct.sv* %856, i32 0, i32 0
  %857 = load i8*, i8** %sv_any1014, align 8
  %858 = bitcast i8* %857 to %struct.xpv*
  %xpv_cur1015 = getelementptr inbounds %struct.xpv, %struct.xpv* %858, i32 0, i32 2
  store i64 0, i64* %xpv_cur1015, align 8
  br label %do.end1016

do.end1016:                                       ; preds = %do.body1013
  br label %if.end1017

if.end1017:                                       ; preds = %do.end1016, %if.else952
  br label %if.end1018

if.end1018:                                       ; preds = %if.end1017, %if.then951
  br label %do.end1019

do.end1019:                                       ; preds = %if.end1018
  %859 = load %struct.gv*, %struct.gv** %gv, align 8
  %860 = bitcast %struct.gv* %859 to %struct.sv*
  %sv_flags1020 = getelementptr inbounds %struct.sv, %struct.sv* %860, i32 0, i32 2
  %861 = load i32, i32* %sv_flags1020, align 4
  %and1021 = and i32 %861, 1610547455
  store i32 %and1021, i32* %sv_flags1020, align 4
  %862 = load %struct.gv*, %struct.gv** %gv, align 8
  %863 = bitcast %struct.gv* %862 to %struct.sv*
  %sv_flags1022 = getelementptr inbounds %struct.sv, %struct.sv* %863, i32 0, i32 2
  %864 = load i32, i32* %sv_flags1022, align 4
  %and1023 = and i32 %864, 33554432
  %tobool1024 = icmp ne i32 %and1023, 0
  br i1 %tobool1024, label %land.rhs1025, label %land.end1028

land.rhs1025:                                     ; preds = %do.end1019
  %865 = load %struct.gv*, %struct.gv** %gv, align 8
  %866 = bitcast %struct.gv* %865 to %struct.sv*
  %call1026 = call i32 @Perl_sv_backoff(%struct.sv* %866)
  %tobool1027 = icmp ne i32 %call1026, 0
  br label %land.end1028

land.end1028:                                     ; preds = %land.rhs1025, %do.end1019
  %867 = phi i1 [ false, %do.end1019 ], [ %tobool1027, %land.rhs1025 ]
  %land.ext1029 = zext i1 %867 to i32
  %868 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_flags1030 = getelementptr inbounds %struct.gv, %struct.gv* %868, i32 0, i32 2
  %869 = load i32, i32* %sv_flags1030, align 4
  %or1031 = or i32 %869, 2048
  store i32 %or1031, i32* %sv_flags1030, align 4
  br label %if.end1032

if.end1032:                                       ; preds = %land.end1028, %if.then931
  br label %do.body1033

do.body1033:                                      ; preds = %if.end1032
  %870 = load %struct.cv*, %struct.cv** %cv, align 8
  %871 = bitcast %struct.cv* %870 to %struct.sv*
  %872 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u1034 = getelementptr inbounds %struct.gv, %struct.gv* %872, i32 0, i32 3
  %svu_rv1035 = bitcast %union.anon.3* %sv_u1034 to %struct.sv**
  store %struct.sv* %871, %struct.sv** %svu_rv1035, align 8
  br label %do.end1036

do.end1036:                                       ; preds = %do.body1033
  br label %if.end1037

if.end1037:                                       ; preds = %do.end1036, %if.else929
  br label %if.end1038

if.end1038:                                       ; preds = %if.end1037, %if.end928
  br label %if.end1039

if.end1039:                                       ; preds = %if.end1038, %if.end785
  %873 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any1040 = getelementptr inbounds %struct.cv, %struct.cv* %873, i32 0, i32 0
  %874 = load %struct.xpvcv*, %struct.xpvcv** %sv_any1040, align 8
  %xcv_gv_u1041 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %874, i32 0, i32 7
  %xcv_gv = bitcast %union.anon.8* %xcv_gv_u1041 to %struct.gv**
  %875 = load %struct.gv*, %struct.gv** %xcv_gv, align 8
  %tobool1042 = icmp ne %struct.gv* %875, null
  br i1 %tobool1042, label %cond.true1043, label %cond.false1044

cond.true1043:                                    ; preds = %if.end1039
  br i1 true, label %if.end1096, label %if.then1045

cond.false1044:                                   ; preds = %if.end1039
  br i1 false, label %if.end1096, label %if.then1045

if.then1045:                                      ; preds = %cond.false1044, %cond.true1043
  %876 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_flags1046 = getelementptr inbounds %struct.gv, %struct.gv* %876, i32 0, i32 2
  %877 = load i32, i32* %sv_flags1046, align 4
  %and1047 = and i32 %877, 255
  %cmp1048 = icmp eq i32 %and1047, 9
  br i1 %cmp1048, label %if.then1050, label %if.else1051

if.then1050:                                      ; preds = %if.then1045
  %878 = load %struct.cv*, %struct.cv** %cv, align 8
  %879 = load %struct.gv*, %struct.gv** %gv, align 8
  call void @Perl_cvgv_set(%struct.cv* %878, %struct.gv* %879)
  br label %if.end1077

if.else1051:                                      ; preds = %if.then1045
  %880 = load i8*, i8** %name, align 8
  %881 = load i64, i64* %namlen, align 8
  %call1053 = call i32 @S_perl_hash_one_at_a_time_hard(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.70, i64 0, i64 0), i8* %880, i64 %881)
  store i32 %call1053, i32* %hash1052, align 4
  %882 = load %struct.cv*, %struct.cv** %cv, align 8
  %call1054 = call %struct.hek* @CvNAME_HEK(%struct.cv* %882)
  %tobool1055 = icmp ne %struct.hek* %call1054, null
  br i1 %tobool1055, label %cond.true1056, label %cond.false1060

cond.true1056:                                    ; preds = %if.else1051
  %883 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any1057 = getelementptr inbounds %struct.cv, %struct.cv* %883, i32 0, i32 0
  %884 = load %struct.xpvcv*, %struct.xpvcv** %sv_any1057, align 8
  %xcv_gv_u1058 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %884, i32 0, i32 7
  %xcv_hek1059 = bitcast %union.anon.8* %xcv_gv_u1058 to %struct.hek**
  %885 = load %struct.hek*, %struct.hek** %xcv_hek1059, align 8
  call void @Perl_unshare_hek(%struct.hek* %885)
  br label %cond.end1061

cond.false1060:                                   ; preds = %if.else1051
  br label %cond.end1061

cond.end1061:                                     ; preds = %cond.false1060, %cond.true1056
  %886 = load i8*, i8** %name, align 8
  %887 = load i8, i8* %name_is_utf8, align 1
  %tobool1062 = trunc i8 %887 to i1
  br i1 %tobool1062, label %cond.true1064, label %cond.false1066

cond.true1064:                                    ; preds = %cond.end1061
  %888 = load i64, i64* %namlen, align 8
  %sub1065 = sub nsw i64 0, %888
  br label %cond.end1067

cond.false1066:                                   ; preds = %cond.end1061
  %889 = load i64, i64* %namlen, align 8
  br label %cond.end1067

cond.end1067:                                     ; preds = %cond.false1066, %cond.true1064
  %cond1068 = phi i64 [ %sub1065, %cond.true1064 ], [ %889, %cond.false1066 ]
  %conv1069 = trunc i64 %cond1068 to i32
  %890 = load i32, i32* %hash1052, align 4
  %call1070 = call %struct.hek* @Perl_share_hek(i8* %886, i32 %conv1069, i32 %890)
  %891 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any1071 = getelementptr inbounds %struct.cv, %struct.cv* %891, i32 0, i32 0
  %892 = load %struct.xpvcv*, %struct.xpvcv** %sv_any1071, align 8
  %893 = bitcast %struct.xpvcv* %892 to i8*
  %894 = bitcast i8* %893 to %struct.xpvcv*
  %xcv_gv_u1072 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %894, i32 0, i32 7
  %xcv_hek1073 = bitcast %union.anon.8* %xcv_gv_u1072 to %struct.hek**
  store %struct.hek* %call1070, %struct.hek** %xcv_hek1073, align 8
  %895 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any1074 = getelementptr inbounds %struct.cv, %struct.cv* %895, i32 0, i32 0
  %896 = load %struct.xpvcv*, %struct.xpvcv** %sv_any1074, align 8
  %897 = bitcast %struct.xpvcv* %896 to i8*
  %898 = bitcast i8* %897 to %struct.xpvcv*
  %xcv_flags1075 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %898, i32 0, i32 12
  %899 = load i32, i32* %xcv_flags1075, align 4
  %or1076 = or i32 %899, 32768
  store i32 %or1076, i32* %xcv_flags1075, align 4
  br label %if.end1077

if.end1077:                                       ; preds = %cond.end1067, %if.then1050
  %900 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_filegv1078 = getelementptr inbounds %struct.cop, %struct.cop* %900, i32 0, i32 9
  %901 = load %struct.gv*, %struct.gv** %cop_filegv1078, align 8
  %tobool1079 = icmp ne %struct.gv* %901, null
  br i1 %tobool1079, label %cond.true1080, label %cond.false1088

cond.true1080:                                    ; preds = %if.end1077
  %902 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_filegv1081 = getelementptr inbounds %struct.cop, %struct.cop* %902, i32 0, i32 9
  %903 = load %struct.gv*, %struct.gv** %cop_filegv1081, align 8
  %sv_any1082 = getelementptr inbounds %struct.gv, %struct.gv* %903, i32 0, i32 0
  %904 = load %struct.xpvgv*, %struct.xpvgv** %sv_any1082, align 8
  %xiv_u1083 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %904, i32 0, i32 4
  %xivu_namehek1084 = bitcast %union._xivu* %xiv_u1083 to %struct.hek**
  %905 = load %struct.hek*, %struct.hek** %xivu_namehek1084, align 8
  %hek_key1085 = getelementptr inbounds %struct.hek, %struct.hek* %905, i32 0, i32 2
  %arraydecay1086 = getelementptr inbounds [1 x i8], [1 x i8]* %hek_key1085, i64 0, i64 0
  %add.ptr1087 = getelementptr inbounds i8, i8* %arraydecay1086, i64 2
  br label %cond.end1089

cond.false1088:                                   ; preds = %if.end1077
  br label %cond.end1089

cond.end1089:                                     ; preds = %cond.false1088, %cond.true1080
  %cond1090 = phi i8* [ %add.ptr1087, %cond.true1080 ], [ null, %cond.false1088 ]
  %906 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any1091 = getelementptr inbounds %struct.cv, %struct.cv* %906, i32 0, i32 0
  %907 = load %struct.xpvcv*, %struct.xpvcv** %sv_any1091, align 8
  %908 = bitcast %struct.xpvcv* %907 to i8*
  %909 = bitcast i8* %908 to %struct.xpvcv*
  %xcv_file1092 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %909, i32 0, i32 8
  store i8* %cond1090, i8** %xcv_file1092, align 8
  %910 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any1093 = getelementptr inbounds %struct.cv, %struct.cv* %910, i32 0, i32 0
  %911 = load %struct.xpvcv*, %struct.xpvcv** %sv_any1093, align 8
  %912 = bitcast %struct.xpvcv* %911 to i8*
  %913 = bitcast i8* %912 to %struct.xpvcv*
  %xcv_flags1094 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %913, i32 0, i32 12
  %914 = load i32, i32* %xcv_flags1094, align 4
  %and1095 = and i32 %914, -4097
  store i32 %and1095, i32* %xcv_flags1094, align 4
  %915 = load %struct.cv*, %struct.cv** %cv, align 8
  %916 = load %struct.hv*, %struct.hv** @PL_curstash, align 8
  call void @Perl_cvstash_set(%struct.cv* %915, %struct.hv* %916)
  br label %if.end1096

if.end1096:                                       ; preds = %cond.end1089, %cond.false1044, %cond.true1043
  %917 = load i8*, i8** %ps, align 8
  %tobool1097 = icmp ne i8* %917, null
  br i1 %tobool1097, label %if.then1098, label %if.end1104

if.then1098:                                      ; preds = %if.end1096
  %918 = load %struct.cv*, %struct.cv** %cv, align 8
  %919 = bitcast %struct.cv* %918 to i8*
  %920 = bitcast i8* %919 to %struct.sv*
  %921 = load i8*, i8** %ps, align 8
  %922 = load i64, i64* %ps_len, align 8
  call void @Perl_sv_setpvn(%struct.sv* %920, i8* %921, i64 %922)
  %923 = load i32, i32* %ps_utf8, align 4
  %tobool1099 = icmp ne i32 %923, 0
  br i1 %tobool1099, label %if.then1100, label %if.end1103

if.then1100:                                      ; preds = %if.then1098
  %924 = load %struct.cv*, %struct.cv** %cv, align 8
  %925 = bitcast %struct.cv* %924 to i8*
  %926 = bitcast i8* %925 to %struct.sv*
  %sv_flags1101 = getelementptr inbounds %struct.sv, %struct.sv* %926, i32 0, i32 2
  %927 = load i32, i32* %sv_flags1101, align 4
  %or1102 = or i32 %927, 536870912
  store i32 %or1102, i32* %sv_flags1101, align 4
  br label %if.end1103

if.end1103:                                       ; preds = %if.then1100, %if.then1098
  br label %if.end1104

if.end1104:                                       ; preds = %if.end1103, %if.end1096
  %928 = load %struct.op*, %struct.op** %block.addr, align 8
  %tobool1105 = icmp ne %struct.op* %928, null
  br i1 %tobool1105, label %if.end1107, label %if.then1106

if.then1106:                                      ; preds = %if.end1104
  br label %attrs1153

if.end1107:                                       ; preds = %if.end1104
  %929 = load i32, i32* @PL_breakable_sub_gen, align 4
  %inc1108 = add i32 %929, 1
  store i32 %inc1108, i32* @PL_breakable_sub_gen, align 4
  %930 = load %struct.op*, %struct.op** %block.addr, align 8
  %931 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any1109 = getelementptr inbounds %struct.cv, %struct.cv* %931, i32 0, i32 0
  %932 = load %struct.xpvcv*, %struct.xpvcv** %sv_any1109, align 8
  %933 = bitcast %struct.xpvcv* %932 to i8*
  %934 = bitcast i8* %933 to %struct.xpvcv*
  %xcv_root_u1110 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %934, i32 0, i32 6
  %xcv_root1111 = bitcast %union.anon.7* %xcv_root_u1110 to %struct.op**
  store %struct.op* %930, %struct.op** %xcv_root1111, align 8
  %935 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any1112 = getelementptr inbounds %struct.cv, %struct.cv* %935, i32 0, i32 0
  %936 = load %struct.xpvcv*, %struct.xpvcv** %sv_any1112, align 8
  %937 = bitcast %struct.xpvcv* %936 to i8*
  %938 = bitcast i8* %937 to %struct.xpvcv*
  %xcv_root_u1113 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %938, i32 0, i32 6
  %xcv_root1114 = bitcast %union.anon.7* %xcv_root_u1113 to %struct.op**
  %939 = load %struct.op*, %struct.op** %xcv_root1114, align 8
  %op_private = getelementptr inbounds %struct.op, %struct.op* %939, i32 0, i32 6
  %940 = load i8, i8* %op_private, align 1
  %conv1115 = zext i8 %940 to i32
  %or1116 = or i32 %conv1115, 64
  %conv1117 = trunc i32 %or1116 to i8
  store i8 %conv1117, i8* %op_private, align 1
  %941 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any1118 = getelementptr inbounds %struct.cv, %struct.cv* %941, i32 0, i32 0
  %942 = load %struct.xpvcv*, %struct.xpvcv** %sv_any1118, align 8
  %943 = bitcast %struct.xpvcv* %942 to i8*
  %944 = bitcast i8* %943 to %struct.xpvcv*
  %xcv_root_u1119 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %944, i32 0, i32 6
  %xcv_root1120 = bitcast %union.anon.7* %xcv_root_u1119 to %struct.op**
  %945 = load %struct.op*, %struct.op** %xcv_root1120, align 8
  %op_targ = getelementptr inbounds %struct.op, %struct.op* %945, i32 0, i32 3
  store i64 1, i64* %op_targ, align 8
  %946 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any1121 = getelementptr inbounds %struct.cv, %struct.cv* %946, i32 0, i32 0
  %947 = load %struct.xpvcv*, %struct.xpvcv** %sv_any1121, align 8
  %948 = bitcast %struct.xpvcv* %947 to i8*
  %949 = bitcast i8* %948 to %struct.xpvcv*
  %xcv_flags1122 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %949, i32 0, i32 12
  %950 = load i32, i32* %xcv_flags1122, align 4
  %and1123 = and i32 %950, -2049
  store i32 %and1123, i32* %xcv_flags1122, align 4
  %951 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any1124 = getelementptr inbounds %struct.cv, %struct.cv* %951, i32 0, i32 0
  %952 = load %struct.xpvcv*, %struct.xpvcv** %sv_any1124, align 8
  %953 = bitcast %struct.xpvcv* %952 to i8*
  %954 = bitcast i8* %953 to %struct.xpvcv*
  %xcv_start_u1125 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %954, i32 0, i32 5
  %xcv_start1126 = bitcast %union.anon.6* %xcv_start_u1125 to %struct.op**
  %955 = load %struct.op*, %struct.op** %xcv_start1126, align 8
  %956 = bitcast %struct.op* %955 to %struct.opslab*
  %opslab_refcnt = getelementptr inbounds %struct.opslab, %struct.opslab* %956, i32 0, i32 3
  %957 = load i64, i64* %opslab_refcnt, align 8
  %cmp1127 = icmp eq i64 %957, 1
  br i1 %cmp1127, label %cond.true1129, label %cond.false1133

cond.true1129:                                    ; preds = %if.end1107
  %958 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any1130 = getelementptr inbounds %struct.cv, %struct.cv* %958, i32 0, i32 0
  %959 = load %struct.xpvcv*, %struct.xpvcv** %sv_any1130, align 8
  %960 = bitcast %struct.xpvcv* %959 to i8*
  %961 = bitcast i8* %960 to %struct.xpvcv*
  %xcv_start_u1131 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %961, i32 0, i32 5
  %xcv_start1132 = bitcast %union.anon.6* %xcv_start_u1131 to %struct.op**
  %962 = load %struct.op*, %struct.op** %xcv_start1132, align 8
  %963 = bitcast %struct.op* %962 to %struct.opslab*
  call void @Perl_opslab_free(%struct.opslab* %963)
  br label %cond.end1138

cond.false1133:                                   ; preds = %if.end1107
  %964 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any1134 = getelementptr inbounds %struct.cv, %struct.cv* %964, i32 0, i32 0
  %965 = load %struct.xpvcv*, %struct.xpvcv** %sv_any1134, align 8
  %966 = bitcast %struct.xpvcv* %965 to i8*
  %967 = bitcast i8* %966 to %struct.xpvcv*
  %xcv_start_u1135 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %967, i32 0, i32 5
  %xcv_start1136 = bitcast %union.anon.6* %xcv_start_u1135 to %struct.op**
  %968 = load %struct.op*, %struct.op** %xcv_start1136, align 8
  %969 = bitcast %struct.op* %968 to %struct.opslab*
  %opslab_refcnt1137 = getelementptr inbounds %struct.opslab, %struct.opslab* %969, i32 0, i32 3
  %970 = load i64, i64* %opslab_refcnt1137, align 8
  %dec = add i64 %970, -1
  store i64 %dec, i64* %opslab_refcnt1137, align 8
  br label %cond.end1138

cond.end1138:                                     ; preds = %cond.false1133, %cond.true1129
  %971 = load %struct.op*, %struct.op** %start, align 8
  %972 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any1139 = getelementptr inbounds %struct.cv, %struct.cv* %972, i32 0, i32 0
  %973 = load %struct.xpvcv*, %struct.xpvcv** %sv_any1139, align 8
  %974 = bitcast %struct.xpvcv* %973 to i8*
  %975 = bitcast i8* %974 to %struct.xpvcv*
  %xcv_start_u1140 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %975, i32 0, i32 5
  %xcv_start1141 = bitcast %union.anon.6* %xcv_start_u1140 to %struct.op**
  store %struct.op* %971, %struct.op** %xcv_start1141, align 8
  %976 = load void (%struct.op*)*, void (%struct.op*)** @PL_peepp, align 8
  %977 = load %struct.op*, %struct.op** %start, align 8
  call void %976(%struct.op* %977)
  %978 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any1142 = getelementptr inbounds %struct.cv, %struct.cv* %978, i32 0, i32 0
  %979 = load %struct.xpvcv*, %struct.xpvcv** %sv_any1142, align 8
  %980 = bitcast %struct.xpvcv* %979 to i8*
  %981 = bitcast i8* %980 to %struct.xpvcv*
  %xcv_root_u1143 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %981, i32 0, i32 6
  %xcv_root1144 = bitcast %union.anon.7* %xcv_root_u1143 to %struct.op**
  %982 = load %struct.op*, %struct.op** %xcv_root1144, align 8
  call void @Perl_finalize_optree(%struct.op* %982)
  %983 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any1145 = getelementptr inbounds %struct.cv, %struct.cv* %983, i32 0, i32 0
  %984 = load %struct.xpvcv*, %struct.xpvcv** %sv_any1145, align 8
  %985 = bitcast %struct.xpvcv* %984 to i8*
  %986 = bitcast i8* %985 to %struct.xpvcv*
  %xcv_start_u1146 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %986, i32 0, i32 5
  %xcv_start1147 = bitcast %union.anon.6* %xcv_start_u1146 to %struct.op**
  call void @S_prune_chain_head(%struct.op** %xcv_start1147)
  %987 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any1148 = getelementptr inbounds %struct.cv, %struct.cv* %987, i32 0, i32 0
  %988 = load %struct.xpvcv*, %struct.xpvcv** %sv_any1148, align 8
  %989 = bitcast %struct.xpvcv* %988 to i8*
  %990 = bitcast i8* %989 to %struct.xpvcv*
  %xcv_flags1149 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %990, i32 0, i32 12
  %991 = load i32, i32* %xcv_flags1149, align 4
  %and1150 = and i32 %991, 32
  %tobool1151 = icmp ne i32 %and1150, 0
  %992 = zext i1 %tobool1151 to i64
  %cond1152 = select i1 %tobool1151, i32 1, i32 0
  call void @Perl_pad_tidy(i32 %cond1152)
  br label %attrs1153

attrs1153:                                        ; preds = %cond.end1138, %if.then1106, %if.then490
  %993 = load %struct.op*, %struct.op** %attrs.addr, align 8
  %tobool1154 = icmp ne %struct.op* %993, null
  br i1 %tobool1154, label %if.then1155, label %if.end1184

if.then1155:                                      ; preds = %attrs1153
  %994 = load i8*, i8** %name, align 8
  %tobool1156 = icmp ne i8* %994, null
  br i1 %tobool1156, label %land.lhs.true1157, label %cond.false1173

land.lhs.true1157:                                ; preds = %if.then1155
  %995 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any1158 = getelementptr inbounds %struct.cv, %struct.cv* %995, i32 0, i32 0
  %996 = load %struct.xpvcv*, %struct.xpvcv** %sv_any1158, align 8
  %997 = bitcast %struct.xpvcv* %996 to i8*
  %998 = bitcast i8* %997 to %struct.xpvcv*
  %xcv_flags1159 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %998, i32 0, i32 12
  %999 = load i32, i32* %xcv_flags1159, align 4
  %and1160 = and i32 %999, 32768
  %tobool1161 = icmp ne i32 %and1160, 0
  br i1 %tobool1161, label %cond.false1173, label %land.lhs.true1162

land.lhs.true1162:                                ; preds = %land.lhs.true1157
  %1000 = load %struct.cv*, %struct.cv** %cv, align 8
  %call1163 = call %struct.gv* @S_CvGV(%struct.cv* %1000)
  %sv_any1164 = getelementptr inbounds %struct.gv, %struct.gv* %call1163, i32 0, i32 0
  %1001 = load %struct.xpvgv*, %struct.xpvgv** %sv_any1164, align 8
  %xnv_u1165 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %1001, i32 0, i32 5
  %xgv_stash1166 = bitcast %union._xnvu* %xnv_u1165 to %struct.hv**
  %1002 = load %struct.hv*, %struct.hv** %xgv_stash1166, align 8
  %tobool1167 = icmp ne %struct.hv* %1002, null
  br i1 %tobool1167, label %cond.true1168, label %cond.false1173

cond.true1168:                                    ; preds = %land.lhs.true1162
  %1003 = load %struct.cv*, %struct.cv** %cv, align 8
  %call1169 = call %struct.gv* @S_CvGV(%struct.cv* %1003)
  %sv_any1170 = getelementptr inbounds %struct.gv, %struct.gv* %call1169, i32 0, i32 0
  %1004 = load %struct.xpvgv*, %struct.xpvgv** %sv_any1170, align 8
  %xnv_u1171 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %1004, i32 0, i32 5
  %xgv_stash1172 = bitcast %union._xnvu* %xnv_u1171 to %struct.hv**
  %1005 = load %struct.hv*, %struct.hv** %xgv_stash1172, align 8
  br label %cond.end1174

cond.false1173:                                   ; preds = %land.lhs.true1162, %land.lhs.true1157, %if.then1155
  %1006 = load %struct.hv*, %struct.hv** @PL_curstash, align 8
  br label %cond.end1174

cond.end1174:                                     ; preds = %cond.false1173, %cond.true1168
  %cond1175 = phi %struct.hv* [ %1005, %cond.true1168 ], [ %1006, %cond.false1173 ]
  store %struct.hv* %cond1175, %struct.hv** %stash, align 8
  %1007 = load i8*, i8** %name, align 8
  %tobool1176 = icmp ne i8* %1007, null
  br i1 %tobool1176, label %if.end1178, label %if.then1177

if.then1177:                                      ; preds = %cond.end1174
  %1008 = load %struct.cv*, %struct.cv** %cv, align 8
  %1009 = bitcast %struct.cv* %1008 to i8*
  %1010 = bitcast i8* %1009 to %struct.sv*
  %1011 = bitcast %struct.sv* %1010 to i8*
  call void @Perl_save_pushptr(i8* %1011, i32 11)
  br label %if.end1178

if.end1178:                                       ; preds = %if.then1177, %cond.end1174
  %1012 = load %struct.hv*, %struct.hv** %stash, align 8
  %1013 = load %struct.cv*, %struct.cv** %cv, align 8
  %1014 = bitcast %struct.cv* %1013 to i8*
  %1015 = bitcast i8* %1014 to %struct.sv*
  %1016 = load %struct.op*, %struct.op** %attrs.addr, align 8
  call void @S_apply_attrs(%struct.hv* %1012, %struct.sv* %1015, %struct.op* %1016)
  %1017 = load i8*, i8** %name, align 8
  %tobool1179 = icmp ne i8* %1017, null
  br i1 %tobool1179, label %if.end1183, label %if.then1180

if.then1180:                                      ; preds = %if.end1178
  %1018 = load %struct.cv*, %struct.cv** %cv, align 8
  %1019 = bitcast %struct.cv* %1018 to i8*
  %1020 = bitcast i8* %1019 to %struct.sv*
  %sv_refcnt1181 = getelementptr inbounds %struct.sv, %struct.sv* %1020, i32 0, i32 1
  %1021 = load i32, i32* %sv_refcnt1181, align 8
  %inc1182 = add i32 %1021, 1
  store i32 %inc1182, i32* %sv_refcnt1181, align 8
  br label %if.end1183

if.end1183:                                       ; preds = %if.then1180, %if.end1178
  br label %if.end1184

if.end1184:                                       ; preds = %if.end1183, %attrs1153
  %1022 = load %struct.op*, %struct.op** %block.addr, align 8
  %tobool1185 = icmp ne %struct.op* %1022, null
  br i1 %tobool1185, label %land.lhs.true1186, label %if.end1331

land.lhs.true1186:                                ; preds = %if.end1184
  %1023 = load i8, i8* %has_name, align 1
  %tobool1187 = trunc i8 %1023 to i1
  br i1 %tobool1187, label %if.then1189, label %if.end1331

if.then1189:                                      ; preds = %land.lhs.true1186
  %1024 = load i32, i32* @PL_perldb, align 4
  %and1190 = and i32 %1024, 16
  %tobool1191 = icmp ne i32 %and1190, 0
  br i1 %tobool1191, label %land.lhs.true1192, label %if.end1317

land.lhs.true1192:                                ; preds = %if.then1189
  %1025 = load %struct.hv*, %struct.hv** @PL_curstash, align 8
  %1026 = load %struct.hv*, %struct.hv** @PL_debstash, align 8
  %cmp1193 = icmp ne %struct.hv* %1025, %1026
  br i1 %cmp1193, label %if.then1195, label %if.end1317

if.then1195:                                      ; preds = %land.lhs.true1192
  %1027 = load %struct.cv*, %struct.cv** %cv, align 8
  %call1196 = call %struct.sv* @Perl_cv_name(%struct.cv* %1027, %struct.sv* null, i32 0)
  store %struct.sv* %call1196, %struct.sv** %tmpstr, align 8
  %call1197 = call %struct.gv* @Perl_gv_fetchpvn_flags(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.43, i64 0, i64 0), i64 13, i32 2, i32 12)
  store %struct.gv* %call1197, %struct.gv** %db_postponed, align 8
  %1028 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_filegv1199 = getelementptr inbounds %struct.cop, %struct.cop* %1028, i32 0, i32 9
  %1029 = load %struct.gv*, %struct.gv** %cop_filegv1199, align 8
  %tobool1200 = icmp ne %struct.gv* %1029, null
  br i1 %tobool1200, label %cond.true1201, label %cond.false1209

cond.true1201:                                    ; preds = %if.then1195
  %1030 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_filegv1202 = getelementptr inbounds %struct.cop, %struct.cop* %1030, i32 0, i32 9
  %1031 = load %struct.gv*, %struct.gv** %cop_filegv1202, align 8
  %sv_any1203 = getelementptr inbounds %struct.gv, %struct.gv* %1031, i32 0, i32 0
  %1032 = load %struct.xpvgv*, %struct.xpvgv** %sv_any1203, align 8
  %xiv_u1204 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %1032, i32 0, i32 4
  %xivu_namehek1205 = bitcast %union._xivu* %xiv_u1204 to %struct.hek**
  %1033 = load %struct.hek*, %struct.hek** %xivu_namehek1205, align 8
  %hek_key1206 = getelementptr inbounds %struct.hek, %struct.hek* %1033, i32 0, i32 2
  %arraydecay1207 = getelementptr inbounds [1 x i8], [1 x i8]* %hek_key1206, i64 0, i64 0
  %add.ptr1208 = getelementptr inbounds i8, i8* %arraydecay1207, i64 2
  br label %cond.end1210

cond.false1209:                                   ; preds = %if.then1195
  br label %cond.end1210

cond.end1210:                                     ; preds = %cond.false1209, %cond.true1201
  %cond1211 = phi i8* [ %add.ptr1208, %cond.true1201 ], [ null, %cond.false1209 ]
  %1034 = load i32, i32* @PL_subline, align 4
  %conv1212 = sext i32 %1034 to i64
  %1035 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_line1213 = getelementptr inbounds %struct.cop, %struct.cop* %1035, i32 0, i32 7
  %1036 = load i32, i32* %cop_line1213, align 4
  %conv1214 = zext i32 %1036 to i64
  %call1215 = call %struct.sv* (i8*, ...) @Perl_newSVpvf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.71, i64 0, i64 0), i8* %cond1211, i64 %conv1212, i64 %conv1214)
  store %struct.sv* %call1215, %struct.sv** %sv1198, align 8
  %1037 = load %struct.gv*, %struct.gv** @PL_DBsub, align 8
  %sv_u1216 = getelementptr inbounds %struct.gv, %struct.gv* %1037, i32 0, i32 3
  %svu_gp1217 = bitcast %union.anon.3* %sv_u1216 to %struct.gp**
  %1038 = load %struct.gp*, %struct.gp** %svu_gp1217, align 8
  %add.ptr1218 = getelementptr inbounds %struct.gp, %struct.gp* %1038, i64 0
  %gp_hv = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr1218, i32 0, i32 5
  %1039 = load %struct.hv*, %struct.hv** %gp_hv, align 8
  %1040 = load %struct.sv*, %struct.sv** %tmpstr, align 8
  %sv_u1219 = getelementptr inbounds %struct.sv, %struct.sv* %1040, i32 0, i32 3
  %svu_pv1220 = bitcast %union.anon* %sv_u1219 to i8**
  %1041 = load i8*, i8** %svu_pv1220, align 8
  %add.ptr1221 = getelementptr inbounds i8, i8* %1041, i64 0
  %1042 = load %struct.sv*, %struct.sv** %tmpstr, align 8
  %sv_flags1222 = getelementptr inbounds %struct.sv, %struct.sv* %1042, i32 0, i32 2
  %1043 = load i32, i32* %sv_flags1222, align 4
  %and1223 = and i32 %1043, 536870912
  %tobool1224 = icmp ne i32 %and1223, 0
  br i1 %tobool1224, label %cond.true1225, label %cond.false1230

cond.true1225:                                    ; preds = %cond.end1210
  %1044 = load %struct.sv*, %struct.sv** %tmpstr, align 8
  %sv_any1226 = getelementptr inbounds %struct.sv, %struct.sv* %1044, i32 0, i32 0
  %1045 = load i8*, i8** %sv_any1226, align 8
  %1046 = bitcast i8* %1045 to %struct.xpv*
  %xpv_cur1227 = getelementptr inbounds %struct.xpv, %struct.xpv* %1046, i32 0, i32 2
  %1047 = load i64, i64* %xpv_cur1227, align 8
  %conv1228 = trunc i64 %1047 to i32
  %sub1229 = sub nsw i32 0, %conv1228
  br label %cond.end1234

cond.false1230:                                   ; preds = %cond.end1210
  %1048 = load %struct.sv*, %struct.sv** %tmpstr, align 8
  %sv_any1231 = getelementptr inbounds %struct.sv, %struct.sv* %1048, i32 0, i32 0
  %1049 = load i8*, i8** %sv_any1231, align 8
  %1050 = bitcast i8* %1049 to %struct.xpv*
  %xpv_cur1232 = getelementptr inbounds %struct.xpv, %struct.xpv* %1050, i32 0, i32 2
  %1051 = load i64, i64* %xpv_cur1232, align 8
  %conv1233 = trunc i64 %1051 to i32
  br label %cond.end1234

cond.end1234:                                     ; preds = %cond.false1230, %cond.true1225
  %cond1235 = phi i32 [ %sub1229, %cond.true1225 ], [ %conv1233, %cond.false1230 ]
  %1052 = load %struct.sv*, %struct.sv** %sv1198, align 8
  %call1236 = call i8* @Perl_hv_common_key_len(%struct.hv* %1039, i8* %add.ptr1221, i32 %cond1235, i32 36, %struct.sv* %1052, i32 0)
  %1053 = bitcast i8* %call1236 to %struct.sv**
  %1054 = load %struct.gv*, %struct.gv** %db_postponed, align 8
  %sv_u1237 = getelementptr inbounds %struct.gv, %struct.gv* %1054, i32 0, i32 3
  %svu_gp1238 = bitcast %union.anon.3* %sv_u1237 to %struct.gp**
  %1055 = load %struct.gp*, %struct.gp** %svu_gp1238, align 8
  %add.ptr1239 = getelementptr inbounds %struct.gp, %struct.gp* %1055, i64 0
  %gp_hv1240 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr1239, i32 0, i32 5
  %1056 = load %struct.hv*, %struct.hv** %gp_hv1240, align 8
  %tobool1241 = icmp ne %struct.hv* %1056, null
  br i1 %tobool1241, label %cond.true1242, label %cond.false1247

cond.true1242:                                    ; preds = %cond.end1234
  %1057 = load %struct.gv*, %struct.gv** %db_postponed, align 8
  %sv_u1243 = getelementptr inbounds %struct.gv, %struct.gv* %1057, i32 0, i32 3
  %svu_gp1244 = bitcast %union.anon.3* %sv_u1243 to %struct.gp**
  %1058 = load %struct.gp*, %struct.gp** %svu_gp1244, align 8
  %add.ptr1245 = getelementptr inbounds %struct.gp, %struct.gp* %1058, i64 0
  %gp_hv1246 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr1245, i32 0, i32 5
  %1059 = load %struct.hv*, %struct.hv** %gp_hv1246, align 8
  br label %cond.end1253

cond.false1247:                                   ; preds = %cond.end1234
  %1060 = load %struct.gv*, %struct.gv** %db_postponed, align 8
  %call1248 = call %struct.gv* @Perl_gv_add_by_type(%struct.gv* %1060, i32 12)
  %sv_u1249 = getelementptr inbounds %struct.gv, %struct.gv* %call1248, i32 0, i32 3
  %svu_gp1250 = bitcast %union.anon.3* %sv_u1249 to %struct.gp**
  %1061 = load %struct.gp*, %struct.gp** %svu_gp1250, align 8
  %add.ptr1251 = getelementptr inbounds %struct.gp, %struct.gp* %1061, i64 0
  %gp_hv1252 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr1251, i32 0, i32 5
  %1062 = load %struct.hv*, %struct.hv** %gp_hv1252, align 8
  br label %cond.end1253

cond.end1253:                                     ; preds = %cond.false1247, %cond.true1242
  %cond1254 = phi %struct.hv* [ %1059, %cond.true1242 ], [ %1062, %cond.false1247 ]
  store %struct.hv* %cond1254, %struct.hv** %hv, align 8
  %1063 = load %struct.hv*, %struct.hv** %hv, align 8
  %sv_any1255 = getelementptr inbounds %struct.hv, %struct.hv* %1063, i32 0, i32 0
  %1064 = load %struct.xpvhv*, %struct.xpvhv** %sv_any1255, align 8
  %xhv_keys = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %1064, i32 0, i32 2
  %1065 = load i64, i64* %xhv_keys, align 8
  %cmp1256 = icmp ugt i64 %1065, 0
  br i1 %cmp1256, label %land.lhs.true1258, label %if.end1316

land.lhs.true1258:                                ; preds = %cond.end1253
  %1066 = load %struct.hv*, %struct.hv** %hv, align 8
  %1067 = load %struct.sv*, %struct.sv** %tmpstr, align 8
  %sv_u1259 = getelementptr inbounds %struct.sv, %struct.sv* %1067, i32 0, i32 3
  %svu_pv1260 = bitcast %union.anon* %sv_u1259 to i8**
  %1068 = load i8*, i8** %svu_pv1260, align 8
  %add.ptr1261 = getelementptr inbounds i8, i8* %1068, i64 0
  %1069 = load %struct.sv*, %struct.sv** %tmpstr, align 8
  %sv_flags1262 = getelementptr inbounds %struct.sv, %struct.sv* %1069, i32 0, i32 2
  %1070 = load i32, i32* %sv_flags1262, align 4
  %and1263 = and i32 %1070, 536870912
  %tobool1264 = icmp ne i32 %and1263, 0
  br i1 %tobool1264, label %cond.true1265, label %cond.false1270

cond.true1265:                                    ; preds = %land.lhs.true1258
  %1071 = load %struct.sv*, %struct.sv** %tmpstr, align 8
  %sv_any1266 = getelementptr inbounds %struct.sv, %struct.sv* %1071, i32 0, i32 0
  %1072 = load i8*, i8** %sv_any1266, align 8
  %1073 = bitcast i8* %1072 to %struct.xpv*
  %xpv_cur1267 = getelementptr inbounds %struct.xpv, %struct.xpv* %1073, i32 0, i32 2
  %1074 = load i64, i64* %xpv_cur1267, align 8
  %conv1268 = trunc i64 %1074 to i32
  %sub1269 = sub nsw i32 0, %conv1268
  br label %cond.end1274

cond.false1270:                                   ; preds = %land.lhs.true1258
  %1075 = load %struct.sv*, %struct.sv** %tmpstr, align 8
  %sv_any1271 = getelementptr inbounds %struct.sv, %struct.sv* %1075, i32 0, i32 0
  %1076 = load i8*, i8** %sv_any1271, align 8
  %1077 = bitcast i8* %1076 to %struct.xpv*
  %xpv_cur1272 = getelementptr inbounds %struct.xpv, %struct.xpv* %1077, i32 0, i32 2
  %1078 = load i64, i64* %xpv_cur1272, align 8
  %conv1273 = trunc i64 %1078 to i32
  br label %cond.end1274

cond.end1274:                                     ; preds = %cond.false1270, %cond.true1265
  %cond1275 = phi i32 [ %sub1269, %cond.true1265 ], [ %conv1273, %cond.false1270 ]
  %call1276 = call i8* @Perl_hv_common_key_len(%struct.hv* %1066, i8* %add.ptr1261, i32 %cond1275, i32 8, %struct.sv* null, i32 0)
  %tobool1277 = icmp ne i8* %call1276, null
  br i1 %tobool1277, label %cond.true1278, label %cond.false1279

cond.true1278:                                    ; preds = %cond.end1274
  br i1 true, label %if.then1280, label %if.end1316

cond.false1279:                                   ; preds = %cond.end1274
  br i1 false, label %if.then1280, label %if.end1316

if.then1280:                                      ; preds = %cond.false1279, %cond.true1278
  %1079 = load %struct.gv*, %struct.gv** %db_postponed, align 8
  %sv_u1281 = getelementptr inbounds %struct.gv, %struct.gv* %1079, i32 0, i32 3
  %svu_gp1282 = bitcast %union.anon.3* %sv_u1281 to %struct.gp**
  %1080 = load %struct.gp*, %struct.gp** %svu_gp1282, align 8
  %add.ptr1283 = getelementptr inbounds %struct.gp, %struct.gp* %1080, i64 0
  %gp_cv1284 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr1283, i32 0, i32 2
  %1081 = load %struct.cv*, %struct.cv** %gp_cv1284, align 8
  %add.ptr1285 = getelementptr inbounds %struct.cv, %struct.cv* %1081, i64 0
  store %struct.cv* %add.ptr1285, %struct.cv** %pcv, align 8
  %1082 = load %struct.cv*, %struct.cv** %pcv, align 8
  %tobool1286 = icmp ne %struct.cv* %1082, null
  br i1 %tobool1286, label %if.then1287, label %if.end1315

if.then1287:                                      ; preds = %if.then1280
  %1083 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %1083, %struct.sv*** %sp, align 8
  br label %do.body1288

do.body1288:                                      ; preds = %if.then1287
  %1084 = load i32*, i32** @PL_markstack_ptr, align 8
  %incdec.ptr = getelementptr inbounds i32, i32* %1084, i32 1
  store i32* %incdec.ptr, i32** @PL_markstack_ptr, align 8
  store i32* %incdec.ptr, i32** %mark_stack_entry, align 8
  %1085 = load i32*, i32** @PL_markstack_max, align 8
  %cmp1289 = icmp eq i32* %incdec.ptr, %1085
  br i1 %cmp1289, label %cond.true1291, label %cond.false1292

cond.true1291:                                    ; preds = %do.body1288
  br i1 true, label %if.then1293, label %if.end1295

cond.false1292:                                   ; preds = %do.body1288
  br i1 false, label %if.then1293, label %if.end1295

if.then1293:                                      ; preds = %cond.false1292, %cond.true1291
  %call1294 = call i32* @Perl_markstack_grow()
  store i32* %call1294, i32** %mark_stack_entry, align 8
  br label %if.end1295

if.end1295:                                       ; preds = %if.then1293, %cond.false1292, %cond.true1291
  %1086 = load %struct.sv**, %struct.sv*** %sp, align 8
  %1087 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %sub.ptr.lhs.cast = ptrtoint %struct.sv** %1086 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.sv** %1087 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 8
  %conv1296 = trunc i64 %sub.ptr.div to i32
  %1088 = load i32*, i32** %mark_stack_entry, align 8
  store i32 %conv1296, i32* %1088, align 4
  br label %do.end1297

do.end1297:                                       ; preds = %if.end1295
  br label %do.body1298

do.body1298:                                      ; preds = %do.end1297
  br label %do.body1299

do.body1299:                                      ; preds = %do.body1298
  %1089 = load %struct.sv**, %struct.sv*** @PL_stack_max, align 8
  %1090 = load %struct.sv**, %struct.sv*** %sp, align 8
  %sub.ptr.lhs.cast1300 = ptrtoint %struct.sv** %1089 to i64
  %sub.ptr.rhs.cast1301 = ptrtoint %struct.sv** %1090 to i64
  %sub.ptr.sub1302 = sub i64 %sub.ptr.lhs.cast1300, %sub.ptr.rhs.cast1301
  %sub.ptr.div1303 = sdiv exact i64 %sub.ptr.sub1302, 8
  %cmp1304 = icmp slt i64 %sub.ptr.div1303, 1
  br i1 %cmp1304, label %cond.true1306, label %cond.false1307

cond.true1306:                                    ; preds = %do.body1299
  br i1 true, label %if.then1308, label %if.end1310

cond.false1307:                                   ; preds = %do.body1299
  br i1 false, label %if.then1308, label %if.end1310

if.then1308:                                      ; preds = %cond.false1307, %cond.true1306
  %1091 = load %struct.sv**, %struct.sv*** %sp, align 8
  %1092 = load %struct.sv**, %struct.sv*** %sp, align 8
  %call1309 = call %struct.sv** @Perl_stack_grow(%struct.sv** %1091, %struct.sv** %1092, i64 1)
  store %struct.sv** %call1309, %struct.sv*** %sp, align 8
  %1093 = load %struct.sv**, %struct.sv*** %sp, align 8
  br label %if.end1310

if.end1310:                                       ; preds = %if.then1308, %cond.false1307, %cond.true1306
  br label %do.end1311

do.end1311:                                       ; preds = %if.end1310
  %1094 = load %struct.sv*, %struct.sv** %tmpstr, align 8
  %1095 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr1312 = getelementptr inbounds %struct.sv*, %struct.sv** %1095, i32 1
  store %struct.sv** %incdec.ptr1312, %struct.sv*** %sp, align 8
  store %struct.sv* %1094, %struct.sv** %incdec.ptr1312, align 8
  br label %do.end1313

do.end1313:                                       ; preds = %do.end1311
  %1096 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %1096, %struct.sv*** @PL_stack_sp, align 8
  %1097 = load %struct.cv*, %struct.cv** %pcv, align 8
  %1098 = bitcast %struct.cv* %1097 to i8*
  %1099 = bitcast i8* %1098 to %struct.sv*
  %call1314 = call i32 @Perl_call_sv(%struct.sv* %1099, i32 4)
  br label %if.end1315

if.end1315:                                       ; preds = %do.end1313, %if.then1280
  br label %if.end1316

if.end1316:                                       ; preds = %if.end1315, %cond.false1279, %cond.true1278, %cond.end1253
  br label %if.end1317

if.end1317:                                       ; preds = %if.end1316, %land.lhs.true1192, %if.then1189
  %1100 = load i8*, i8** %name, align 8
  %tobool1318 = icmp ne i8* %1100, null
  br i1 %tobool1318, label %if.then1319, label %if.end1330

if.then1319:                                      ; preds = %if.end1317
  %1101 = load %struct.yy_parser*, %struct.yy_parser** @PL_parser, align 8
  %tobool1320 = icmp ne %struct.yy_parser* %1101, null
  br i1 %tobool1320, label %land.lhs.true1321, label %if.else1326

land.lhs.true1321:                                ; preds = %if.then1319
  %1102 = load %struct.yy_parser*, %struct.yy_parser** @PL_parser, align 8
  %error_count1322 = getelementptr inbounds %struct.yy_parser, %struct.yy_parser* %1102, i32 0, i32 44
  %1103 = load i8, i8* %error_count1322, align 1
  %conv1323 = zext i8 %1103 to i32
  %tobool1324 = icmp ne i32 %conv1323, 0
  br i1 %tobool1324, label %if.then1325, label %if.else1326

if.then1325:                                      ; preds = %land.lhs.true1321
  %1104 = load i8*, i8** %name, align 8
  %1105 = load %struct.gv*, %struct.gv** %gv, align 8
  %1106 = load %struct.cv*, %struct.cv** %cv, align 8
  call void @S_clear_special_blocks(i8* %1104, %struct.gv* %1105, %struct.cv* %1106)
  br label %if.end1329

if.else1326:                                      ; preds = %land.lhs.true1321, %if.then1319
  %1107 = load i32, i32* %floor.addr, align 4
  %1108 = load i8*, i8** %name, align 8
  %1109 = load %struct.gv*, %struct.gv** %gv, align 8
  %1110 = load %struct.cv*, %struct.cv** %cv, align 8
  %call1327 = call zeroext i1 @S_process_special_blocks(i32 %1107, i8* %1108, %struct.gv* %1109, %struct.cv* %1110)
  %frombool1328 = zext i1 %call1327 to i8
  store i8 %frombool1328, i8* %evanescent, align 1
  br label %if.end1329

if.end1329:                                       ; preds = %if.else1326, %if.then1325
  br label %if.end1330

if.end1330:                                       ; preds = %if.end1329, %if.end1317
  br label %if.end1331

if.end1331:                                       ; preds = %if.end1330, %land.lhs.true1186, %if.end1184
  br label %done

done:                                             ; preds = %if.end1331, %if.end653, %if.end491, %if.end266, %if.end212
  %1111 = load %struct.yy_parser*, %struct.yy_parser** @PL_parser, align 8
  %tobool1332 = icmp ne %struct.yy_parser* %1111, null
  br i1 %tobool1332, label %if.then1333, label %if.end1335

if.then1333:                                      ; preds = %done
  %1112 = load %struct.yy_parser*, %struct.yy_parser** @PL_parser, align 8
  %copline1334 = getelementptr inbounds %struct.yy_parser, %struct.yy_parser* %1112, i32 0, i32 41
  store i32 -1, i32* %copline1334, align 8
  br label %if.end1335

if.end1335:                                       ; preds = %if.then1333, %done
  br label %do.body1336

do.body1336:                                      ; preds = %if.end1335
  %1113 = load i32, i32* @PL_savestack_ix, align 4
  %1114 = load i32, i32* %floor.addr, align 4
  %cmp1337 = icmp sgt i32 %1113, %1114
  br i1 %cmp1337, label %if.then1339, label %if.end1340

if.then1339:                                      ; preds = %do.body1336
  %1115 = load i32, i32* %floor.addr, align 4
  call void @Perl_leave_scope(i32 %1115)
  br label %if.end1340

if.end1340:                                       ; preds = %if.then1339, %do.body1336
  br label %do.end1341

do.end1341:                                       ; preds = %if.end1340
  %1116 = load i8, i8* %evanescent, align 1
  %tobool1342 = trunc i8 %1116 to i1
  br i1 %tobool1342, label %if.end1366, label %if.then1343

if.then1343:                                      ; preds = %do.end1341
  %1117 = load %struct.cv*, %struct.cv** %cv, align 8
  %tobool1344 = icmp ne %struct.cv* %1117, null
  br i1 %tobool1344, label %land.lhs.true1345, label %if.end1365

land.lhs.true1345:                                ; preds = %if.then1343
  %1118 = load i8*, i8** %name, align 8
  %tobool1346 = icmp ne i8* %1118, null
  br i1 %tobool1346, label %land.lhs.true1347, label %if.end1365

land.lhs.true1347:                                ; preds = %land.lhs.true1345
  %1119 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any1348 = getelementptr inbounds %struct.cv, %struct.cv* %1119, i32 0, i32 0
  %1120 = load %struct.xpvcv*, %struct.xpvcv** %sv_any1348, align 8
  %1121 = bitcast %struct.xpvcv* %1120 to i8*
  %1122 = bitcast i8* %1121 to %struct.xpvcv*
  %xcv_outside1349 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %1122, i32 0, i32 10
  %1123 = load %struct.cv*, %struct.cv** %xcv_outside1349, align 8
  %tobool1350 = icmp ne %struct.cv* %1123, null
  br i1 %tobool1350, label %land.lhs.true1351, label %if.end1365

land.lhs.true1351:                                ; preds = %land.lhs.true1347
  %1124 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any1352 = getelementptr inbounds %struct.cv, %struct.cv* %1124, i32 0, i32 0
  %1125 = load %struct.xpvcv*, %struct.xpvcv** %sv_any1352, align 8
  %1126 = bitcast %struct.xpvcv* %1125 to i8*
  %1127 = bitcast i8* %1126 to %struct.xpvcv*
  %xcv_outside1353 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %1127, i32 0, i32 10
  %1128 = load %struct.cv*, %struct.cv** %xcv_outside1353, align 8
  %sv_any1354 = getelementptr inbounds %struct.cv, %struct.cv* %1128, i32 0, i32 0
  %1129 = load %struct.xpvcv*, %struct.xpvcv** %sv_any1354, align 8
  %1130 = bitcast %struct.xpvcv* %1129 to i8*
  %1131 = bitcast i8* %1130 to %struct.xpvcv*
  %xcv_flags1355 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %1131, i32 0, i32 12
  %1132 = load i32, i32* %xcv_flags1355, align 4
  %and1356 = and i32 %1132, 256
  %tobool1357 = icmp ne i32 %and1356, 0
  br i1 %tobool1357, label %land.lhs.true1358, label %if.then1364

land.lhs.true1358:                                ; preds = %land.lhs.true1351
  %1133 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any1359 = getelementptr inbounds %struct.cv, %struct.cv* %1133, i32 0, i32 0
  %1134 = load %struct.xpvcv*, %struct.xpvcv** %sv_any1359, align 8
  %1135 = bitcast %struct.xpvcv* %1134 to i8*
  %1136 = bitcast i8* %1135 to %struct.xpvcv*
  %xcv_outside1360 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %1136, i32 0, i32 10
  %1137 = load %struct.cv*, %struct.cv** %xcv_outside1360, align 8
  %sv_flags1361 = getelementptr inbounds %struct.cv, %struct.cv* %1137, i32 0, i32 2
  %1138 = load i32, i32* %sv_flags1361, align 4
  %and1362 = and i32 %1138, 16777216
  %tobool1363 = icmp ne i32 %and1362, 0
  br i1 %tobool1363, label %if.then1364, label %if.end1365

if.then1364:                                      ; preds = %land.lhs.true1358, %land.lhs.true1351
  %1139 = load %struct.cv*, %struct.cv** %cv, align 8
  call void @Perl_pad_add_weakref(%struct.cv* %1139)
  br label %if.end1365

if.end1365:                                       ; preds = %if.then1364, %land.lhs.true1358, %land.lhs.true1347, %land.lhs.true1345, %if.then1343
  br label %if.end1366

if.end1366:                                       ; preds = %if.end1365, %do.end1341
  %1140 = load %struct.cv*, %struct.cv** %cv, align 8
  ret %struct.cv* %1140
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.regexp* @S_ReANY(%struct.p5rx* %re) #0 {
entry:
  %re.addr = alloca %struct.p5rx*, align 8
  store %struct.p5rx* %re, %struct.p5rx** %re.addr, align 8
  %0 = load %struct.p5rx*, %struct.p5rx** %re.addr, align 8
  %sv_u = getelementptr inbounds %struct.p5rx, %struct.p5rx* %0, i32 0, i32 3
  %svu_rx = bitcast %union.anon.15* %sv_u to %struct.regexp**
  %1 = load %struct.regexp*, %struct.regexp** %svu_rx, align 8
  ret %struct.regexp* %1
}

declare dso_local i64 @Perl_pad_add_anon(%struct.cv*, i32) #3

; Function Attrs: noinline nounwind uwtable
define internal void @S_set_haseval() #0 {
entry:
  %i = alloca i64, align 8
  %pn = alloca %struct.padname*, align 8
  store i64 1, i64* %i, align 8
  store i8 1, i8* @PL_cv_has_eval, align 1
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i64, i64* %i, align 8
  %1 = load %struct.padnamelist*, %struct.padnamelist** @PL_comppad_name, align 8
  %xpadnl_max_named = getelementptr inbounds %struct.padnamelist, %struct.padnamelist* %1, i32 0, i32 3
  %2 = load i64, i64* %xpadnl_max_named, align 8
  %cmp = icmp ult i64 %0, %2
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load %struct.padnamelist*, %struct.padnamelist** @PL_comppad_name, align 8
  %xpadnl_alloc = getelementptr inbounds %struct.padnamelist, %struct.padnamelist* %3, i32 0, i32 1
  %4 = load %struct.padname**, %struct.padname*** %xpadnl_alloc, align 8
  %5 = load i64, i64* %i, align 8
  %arrayidx = getelementptr inbounds %struct.padname*, %struct.padname** %4, i64 %5
  %6 = load %struct.padname*, %struct.padname** %arrayidx, align 8
  store %struct.padname* %6, %struct.padname** %pn, align 8
  %7 = load %struct.padname*, %struct.padname** %pn, align 8
  %tobool = icmp ne %struct.padname* %7, null
  br i1 %tobool, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %for.body
  %8 = load %struct.padname*, %struct.padname** %pn, align 8
  %xpadn_len = getelementptr inbounds %struct.padname, %struct.padname* %8, i32 0, i32 7
  %9 = load i8, i8* %xpadn_len, align 8
  %tobool1 = icmp ne i8 %9, 0
  br i1 %tobool1, label %if.end, label %if.then

if.then:                                          ; preds = %lor.lhs.false, %for.body
  br label %for.inc

if.end:                                           ; preds = %lor.lhs.false
  %10 = load %struct.padname*, %struct.padname** %pn, align 8
  %xpadn_flags = getelementptr inbounds %struct.padname, %struct.padname* %10, i32 0, i32 8
  %11 = load i8, i8* %xpadn_flags, align 1
  %conv = zext i8 %11 to i32
  %and = and i32 %conv, 1
  %tobool2 = icmp ne i32 %and, 0
  br i1 %tobool2, label %if.then5, label %lor.lhs.false3

lor.lhs.false3:                                   ; preds = %if.end
  %12 = load %struct.padname*, %struct.padname** %pn, align 8
  %13 = load i32, i32* @PL_cop_seqmax, align 4
  %call = call zeroext i1 @PadnameIN_SCOPE(%struct.padname* %12, i32 %13)
  br i1 %call, label %if.then5, label %if.end6

if.then5:                                         ; preds = %lor.lhs.false3, %if.end
  %14 = load %struct.padname*, %struct.padname** %pn, align 8
  call void @S_mark_padname_lvalue(%struct.padname* %14)
  br label %if.end6

if.end6:                                          ; preds = %if.then5, %lor.lhs.false3
  br label %for.inc

for.inc:                                          ; preds = %if.end6, %if.then
  %15 = load i64, i64* %i, align 8
  %inc = add i64 %15, 1
  store i64 %inc, i64* %i, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_newDEFSVOP() #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %offset = alloca i64, align 8
  %o = alloca %struct.op*, align 8
  %call = call i64 @Perl_pad_findmy_pvn(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.7, i64 0, i64 0), i64 2, i32 0)
  store i64 %call, i64* %offset, align 8
  %0 = load i64, i64* %offset, align 8
  %cmp = icmp eq i64 %0, -1
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load %struct.padnamelist*, %struct.padnamelist** @PL_comppad_name, align 8
  %xpadnl_alloc = getelementptr inbounds %struct.padnamelist, %struct.padnamelist* %1, i32 0, i32 1
  %2 = load %struct.padname**, %struct.padname*** %xpadnl_alloc, align 8
  %3 = load i64, i64* %offset, align 8
  %arrayidx = getelementptr inbounds %struct.padname*, %struct.padname** %2, i64 %3
  %4 = load %struct.padname*, %struct.padname** %arrayidx, align 8
  %xpadn_ourstash = getelementptr inbounds %struct.padname, %struct.padname* %4, i32 0, i32 1
  %5 = load %struct.hv*, %struct.hv** %xpadn_ourstash, align 8
  %tobool = icmp ne %struct.hv* %5, null
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %lor.lhs.false, %entry
  %6 = load %struct.gv*, %struct.gv** @PL_defgv, align 8
  %call1 = call %struct.op* @Perl_newGVOP(i32 7, i32 0, %struct.gv* %6)
  %call2 = call %struct.op* @Perl_newSVREF(%struct.op* %call1)
  store %struct.op* %call2, %struct.op** %retval, align 8
  br label %return

if.else:                                          ; preds = %lor.lhs.false
  %call3 = call %struct.op* @Perl_newOP(i32 9, i32 0)
  store %struct.op* %call3, %struct.op** %o, align 8
  %7 = load i64, i64* %offset, align 8
  %8 = load %struct.op*, %struct.op** %o, align 8
  %op_targ = getelementptr inbounds %struct.op, %struct.op* %8, i32 0, i32 3
  store i64 %7, i64* %op_targ, align 8
  %9 = load %struct.op*, %struct.op** %o, align 8
  store %struct.op* %9, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %if.else, %if.then
  %10 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %10
}

declare dso_local i64 @Perl_pad_findmy_pvn(i8*, i64, i32) #3

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_newPVOP(i32 %type, i32 %flags, i8* %pv) #0 {
entry:
  %type.addr = alloca i32, align 4
  %flags.addr = alloca i32, align 4
  %pv.addr = alloca i8*, align 8
  %utf8 = alloca i8, align 1
  %pvop = alloca %struct.pvop*, align 8
  store i32 %type, i32* %type.addr, align 4
  store i32 %flags, i32* %flags.addr, align 4
  store i8* %pv, i8** %pv.addr, align 8
  %0 = load i32, i32* %flags.addr, align 4
  %and = and i32 %0, 536870912
  %tobool = icmp ne i32 %and, 0
  %1 = zext i1 %tobool to i64
  %cond = select i1 %tobool, i32 1, i32 0
  %tobool1 = icmp ne i32 %cond, 0
  %frombool = zext i1 %tobool1 to i8
  store i8 %frombool, i8* %utf8, align 1
  %2 = load i32, i32* %flags.addr, align 4
  %and2 = and i32 %2, -536870913
  store i32 %and2, i32* %flags.addr, align 4
  %call = call i8* @Perl_Slab_Alloc(i64 48)
  %3 = bitcast i8* %call to %struct.pvop*
  store %struct.pvop* %3, %struct.pvop** %pvop, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %4 = load i32, i32* %type.addr, align 4
  %conv = trunc i32 %4 to i16
  %conv3 = zext i16 %conv to i32
  %5 = load %struct.pvop*, %struct.pvop** %pvop, align 8
  %op_type = getelementptr inbounds %struct.pvop, %struct.pvop* %5, i32 0, i32 4
  %6 = trunc i32 %conv3 to i16
  %bf.load = load i16, i16* %op_type, align 8
  %bf.value = and i16 %6, 511
  %bf.clear = and i16 %bf.load, -512
  %bf.set = or i16 %bf.clear, %bf.value
  store i16 %bf.set, i16* %op_type, align 8
  %bf.result.cast = zext i16 %bf.value to i32
  %7 = load i32, i32* %type.addr, align 4
  %idxprom = sext i32 %7 to i64
  %arrayidx = getelementptr inbounds [0 x %struct.op* ()*], [0 x %struct.op* ()*]* @PL_ppaddr, i64 0, i64 %idxprom
  %8 = load %struct.op* ()*, %struct.op* ()** %arrayidx, align 8
  %9 = load %struct.pvop*, %struct.pvop** %pvop, align 8
  %op_ppaddr = getelementptr inbounds %struct.pvop, %struct.pvop* %9, i32 0, i32 2
  store %struct.op* ()* %8, %struct.op* ()** %op_ppaddr, align 8
  br label %do.end

do.end:                                           ; preds = %do.body
  %10 = load i8*, i8** %pv.addr, align 8
  %11 = load %struct.pvop*, %struct.pvop** %pvop, align 8
  %op_pv = getelementptr inbounds %struct.pvop, %struct.pvop* %11, i32 0, i32 7
  store i8* %10, i8** %op_pv, align 8
  %12 = load %struct.pvop*, %struct.pvop** %pvop, align 8
  %13 = bitcast %struct.pvop* %12 to %struct.op*
  %14 = load %struct.pvop*, %struct.pvop** %pvop, align 8
  %op_next = getelementptr inbounds %struct.pvop, %struct.pvop* %14, i32 0, i32 0
  store %struct.op* %13, %struct.op** %op_next, align 8
  %15 = load i32, i32* %flags.addr, align 4
  %conv4 = trunc i32 %15 to i8
  %16 = load %struct.pvop*, %struct.pvop** %pvop, align 8
  %op_flags = getelementptr inbounds %struct.pvop, %struct.pvop* %16, i32 0, i32 5
  store i8 %conv4, i8* %op_flags, align 2
  %17 = load i8, i8* %utf8, align 1
  %tobool5 = trunc i8 %17 to i1
  %18 = zext i1 %tobool5 to i64
  %cond7 = select i1 %tobool5, i32 128, i32 0
  %conv8 = trunc i32 %cond7 to i8
  %19 = load %struct.pvop*, %struct.pvop** %pvop, align 8
  %op_private = getelementptr inbounds %struct.pvop, %struct.pvop* %19, i32 0, i32 6
  store i8 %conv8, i8* %op_private, align 1
  %20 = load i32, i32* %type.addr, align 4
  %idxprom9 = sext i32 %20 to i64
  %arrayidx10 = getelementptr inbounds [0 x i32], [0 x i32]* @PL_opargs, i64 0, i64 %idxprom9
  %21 = load i32, i32* %arrayidx10, align 4
  %and11 = and i32 %21, 4
  %tobool12 = icmp ne i32 %and11, 0
  br i1 %tobool12, label %if.then, label %if.end

if.then:                                          ; preds = %do.end
  %22 = load %struct.pvop*, %struct.pvop** %pvop, align 8
  %23 = bitcast %struct.pvop* %22 to %struct.op*
  %call13 = call %struct.op* @Perl_scalar(%struct.op* %23)
  br label %if.end

if.end:                                           ; preds = %if.then, %do.end
  %24 = load i32, i32* %type.addr, align 4
  %idxprom14 = sext i32 %24 to i64
  %arrayidx15 = getelementptr inbounds [0 x i32], [0 x i32]* @PL_opargs, i64 0, i64 %idxprom14
  %25 = load i32, i32* %arrayidx15, align 4
  %and16 = and i32 %25, 8
  %tobool17 = icmp ne i32 %and16, 0
  br i1 %tobool17, label %if.then18, label %if.end20

if.then18:                                        ; preds = %if.end
  %26 = load i32, i32* %type.addr, align 4
  %call19 = call i64 @Perl_pad_alloc(i32 %26, i32 131072)
  %27 = load %struct.pvop*, %struct.pvop** %pvop, align 8
  %op_targ = getelementptr inbounds %struct.pvop, %struct.pvop* %27, i32 0, i32 3
  store i64 %call19, i64* %op_targ, align 8
  br label %if.end20

if.end20:                                         ; preds = %if.then18, %if.end
  %28 = load i8*, i8** @PL_op_mask, align 8
  %tobool21 = icmp ne i8* %28, null
  br i1 %tobool21, label %land.lhs.true, label %cond.false

land.lhs.true:                                    ; preds = %if.end20
  %29 = load i8*, i8** @PL_op_mask, align 8
  %30 = load i32, i32* %type.addr, align 4
  %idxprom22 = sext i32 %30 to i64
  %arrayidx23 = getelementptr inbounds i8, i8* %29, i64 %idxprom22
  %31 = load i8, i8* %arrayidx23, align 1
  %conv24 = sext i8 %31 to i32
  %tobool25 = icmp ne i32 %conv24, 0
  br i1 %tobool25, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true
  %32 = load %struct.pvop*, %struct.pvop** %pvop, align 8
  %33 = bitcast %struct.pvop* %32 to %struct.op*
  call void @Perl_op_free(%struct.op* %33)
  %34 = load i32, i32* %type.addr, align 4
  %idxprom26 = sext i32 %34 to i64
  %arrayidx27 = getelementptr inbounds [0 x i8*], [0 x i8*]* @PL_op_desc, i64 0, i64 %idxprom26
  %35 = load i8*, i8** %arrayidx27, align 8
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.49, i64 0, i64 0), i8* %35)
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true, %if.end20
  %36 = load i32, i32* %type.addr, align 4
  %idxprom28 = sext i32 %36 to i64
  %arrayidx29 = getelementptr inbounds [0 x %struct.op* (%struct.op*)*], [0 x %struct.op* (%struct.op*)*]* @PL_check, i64 0, i64 %idxprom28
  %37 = load %struct.op* (%struct.op*)*, %struct.op* (%struct.op*)** %arrayidx29, align 8
  %38 = load %struct.pvop*, %struct.pvop** %pvop, align 8
  %39 = bitcast %struct.pvop* %38 to %struct.op*
  %call30 = call %struct.op* %37(%struct.op* %39)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond31 = phi %struct.op* [ null, %cond.true ], [ %call30, %cond.false ]
  ret %struct.op* %cond31
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @Perl_package(%struct.op* %o) #0 {
entry:
  %o.addr = alloca %struct.op*, align 8
  %sv = alloca %struct.sv*, align 8
  store %struct.op* %o, %struct.op** %o.addr, align 8
  %0 = load %struct.op*, %struct.op** %o.addr, align 8
  %1 = bitcast %struct.op* %0 to %struct.svop*
  %op_sv = getelementptr inbounds %struct.svop, %struct.svop* %1, i32 0, i32 7
  %2 = load %struct.sv*, %struct.sv** %op_sv, align 8
  store %struct.sv* %2, %struct.sv** %sv, align 8
  call void @Perl_save_generic_svref(%struct.sv** bitcast (%struct.hv** @PL_curstash to %struct.sv**))
  %3 = load %struct.sv*, %struct.sv** @PL_curstname, align 8
  call void @Perl_save_item(%struct.sv* %3)
  %4 = load %struct.sv*, %struct.sv** %sv, align 8
  %call = call %struct.hv* @Perl_gv_stashsv(%struct.sv* %4, i32 1)
  %5 = bitcast %struct.hv* %call to i8*
  %6 = bitcast i8* %5 to %struct.sv*
  %call1 = call %struct.sv* @S_SvREFCNT_inc(%struct.sv* %6)
  %7 = bitcast %struct.sv* %call1 to %struct.hv*
  store %struct.hv* %7, %struct.hv** @PL_curstash, align 8
  %8 = load %struct.sv*, %struct.sv** @PL_curstname, align 8
  %9 = load %struct.sv*, %struct.sv** %sv, align 8
  call void @Perl_sv_setsv_flags(%struct.sv* %8, %struct.sv* %9, i32 1538)
  %10 = load i32, i32* getelementptr inbounds (%struct.cop, %struct.cop* @PL_compiling, i32 0, i32 10), align 8
  %or = or i32 %10, 256
  store i32 %or, i32* getelementptr inbounds (%struct.cop, %struct.cop* @PL_compiling, i32 0, i32 10), align 8
  %11 = load %struct.yy_parser*, %struct.yy_parser** @PL_parser, align 8
  %copline = getelementptr inbounds %struct.yy_parser, %struct.yy_parser* %11, i32 0, i32 41
  store i32 -1, i32* %copline, align 8
  %12 = load %struct.op*, %struct.op** %o.addr, align 8
  call void @Perl_op_free(%struct.op* %12)
  ret void
}

declare dso_local void @Perl_save_generic_svref(%struct.sv**) #3

declare dso_local void @Perl_save_item(%struct.sv*) #3

; Function Attrs: noinline nounwind uwtable
define internal %struct.sv* @S_SvREFCNT_inc(%struct.sv* %sv) #0 {
entry:
  %sv.addr = alloca %struct.sv*, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %cmp = icmp ne %struct.sv* %0, null
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  br i1 true, label %if.then, label %if.end

cond.false:                                       ; preds = %entry
  br i1 false, label %if.then, label %if.end

if.then:                                          ; preds = %cond.false, %cond.true
  %1 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_refcnt = getelementptr inbounds %struct.sv, %struct.sv* %1, i32 0, i32 1
  %2 = load i32, i32* %sv_refcnt, align 8
  %inc = add i32 %2, 1
  store i32 %inc, i32* %sv_refcnt, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %cond.false, %cond.true
  %3 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  ret %struct.sv* %3
}

declare dso_local %struct.hv* @Perl_gv_stashsv(%struct.sv*, i32) #3

declare dso_local void @Perl_sv_setsv_flags(%struct.sv*, %struct.sv*, i32) #3

; Function Attrs: noinline nounwind uwtable
define dso_local void @Perl_package_version(%struct.op* %v) #0 {
entry:
  %v.addr = alloca %struct.op*, align 8
  %savehints = alloca i32, align 4
  store %struct.op* %v, %struct.op** %v.addr, align 8
  %0 = load i32, i32* getelementptr inbounds (%struct.cop, %struct.cop* @PL_compiling, i32 0, i32 10), align 8
  store i32 %0, i32* %savehints, align 4
  %1 = load i32, i32* getelementptr inbounds (%struct.cop, %struct.cop* @PL_compiling, i32 0, i32 10), align 8
  %and = and i32 %1, -1025
  store i32 %and, i32* getelementptr inbounds (%struct.cop, %struct.cop* @PL_compiling, i32 0, i32 10), align 8
  %call = call %struct.gv* @Perl_gv_fetchpvn_flags(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.52, i64 0, i64 0), i64 7, i32 2, i32 3)
  %sv_u = getelementptr inbounds %struct.gv, %struct.gv* %call, i32 0, i32 3
  %svu_gp = bitcast %union.anon.3* %sv_u to %struct.gp**
  %2 = load %struct.gp*, %struct.gp** %svu_gp, align 8
  %add.ptr = getelementptr inbounds %struct.gp, %struct.gp* %2, i64 0
  %gp_sv = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr, i32 0, i32 0
  %3 = load %struct.sv*, %struct.sv** %gp_sv, align 8
  %4 = load %struct.op*, %struct.op** %v.addr, align 8
  %5 = bitcast %struct.op* %4 to %struct.svop*
  %op_sv = getelementptr inbounds %struct.svop, %struct.svop* %5, i32 0, i32 7
  %6 = load %struct.sv*, %struct.sv** %op_sv, align 8
  call void @Perl_sv_setsv_flags(%struct.sv* %3, %struct.sv* %6, i32 1538)
  %7 = load i32, i32* %savehints, align 4
  store i32 %7, i32* getelementptr inbounds (%struct.cop, %struct.cop* @PL_compiling, i32 0, i32 10), align 8
  %8 = load %struct.op*, %struct.op** %v.addr, align 8
  call void @Perl_op_free(%struct.op* %8)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @Perl_utilize(i32 %aver, i32 %floor, %struct.op* %version, %struct.op* %idop, %struct.op* %arg) #0 {
entry:
  %aver.addr = alloca i32, align 4
  %floor.addr = alloca i32, align 4
  %version.addr = alloca %struct.op*, align 8
  %idop.addr = alloca %struct.op*, align 8
  %arg.addr = alloca %struct.op*, align 8
  %pack = alloca %struct.op*, align 8
  %imop = alloca %struct.op*, align 8
  %veop = alloca %struct.op*, align 8
  %use_version = alloca %struct.sv*, align 8
  %vesv = alloca %struct.sv*, align 8
  %pack5 = alloca %struct.op*, align 8
  %meth = alloca %struct.sv*, align 8
  %meth46 = alloca %struct.sv*, align 8
  store i32 %aver, i32* %aver.addr, align 4
  store i32 %floor, i32* %floor.addr, align 4
  store %struct.op* %version, %struct.op** %version.addr, align 8
  store %struct.op* %idop, %struct.op** %idop.addr, align 8
  store %struct.op* %arg, %struct.op** %arg.addr, align 8
  store %struct.sv* null, %struct.sv** %use_version, align 8
  %0 = load %struct.op*, %struct.op** %idop.addr, align 8
  %op_type = getelementptr inbounds %struct.op, %struct.op* %0, i32 0, i32 4
  %bf.load = load i16, i16* %op_type, align 8
  %bf.clear = and i16 %bf.load, 511
  %bf.cast = zext i16 %bf.clear to i32
  %cmp = icmp ne i32 %bf.cast, 5
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.53, i64 0, i64 0))
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  store %struct.op* null, %struct.op** %veop, align 8
  %1 = load %struct.op*, %struct.op** %version.addr, align 8
  %tobool = icmp ne %struct.op* %1, null
  br i1 %tobool, label %if.then1, label %if.end24

if.then1:                                         ; preds = %if.end
  %2 = load %struct.op*, %struct.op** %version.addr, align 8
  %3 = bitcast %struct.op* %2 to %struct.svop*
  %op_sv = getelementptr inbounds %struct.svop, %struct.svop* %3, i32 0, i32 7
  %4 = load %struct.sv*, %struct.sv** %op_sv, align 8
  store %struct.sv* %4, %struct.sv** %vesv, align 8
  %5 = load %struct.op*, %struct.op** %arg.addr, align 8
  %tobool2 = icmp ne %struct.op* %5, null
  br i1 %tobool2, label %if.else, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.then1
  %6 = load %struct.sv*, %struct.sv** %vesv, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %6, i32 0, i32 2
  %7 = load i32, i32* %sv_flags, align 4
  %and = and i32 %7, 12288
  %tobool3 = icmp ne i32 %and, 0
  br i1 %tobool3, label %if.else, label %if.then4

if.then4:                                         ; preds = %land.lhs.true
  %8 = load %struct.op*, %struct.op** %version.addr, align 8
  store %struct.op* %8, %struct.op** %arg.addr, align 8
  br label %if.end23

if.else:                                          ; preds = %land.lhs.true, %if.then1
  %9 = load %struct.op*, %struct.op** %version.addr, align 8
  %op_type6 = getelementptr inbounds %struct.op, %struct.op* %9, i32 0, i32 4
  %bf.load7 = load i16, i16* %op_type6, align 8
  %bf.clear8 = and i16 %bf.load7, 511
  %bf.cast9 = zext i16 %bf.clear8 to i32
  %cmp10 = icmp ne i32 %bf.cast9, 5
  br i1 %cmp10, label %if.then14, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.else
  %10 = load %struct.sv*, %struct.sv** %vesv, align 8
  %sv_flags11 = getelementptr inbounds %struct.sv, %struct.sv* %10, i32 0, i32 2
  %11 = load i32, i32* %sv_flags11, align 4
  %and12 = and i32 %11, 12288
  %tobool13 = icmp ne i32 %and12, 0
  br i1 %tobool13, label %if.end15, label %if.then14

if.then14:                                        ; preds = %lor.lhs.false, %if.else
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.54, i64 0, i64 0))
  br label %if.end15

if.end15:                                         ; preds = %if.then14, %lor.lhs.false
  %12 = load %struct.op*, %struct.op** %idop.addr, align 8
  %13 = bitcast %struct.op* %12 to %struct.svop*
  %op_sv16 = getelementptr inbounds %struct.svop, %struct.svop* %13, i32 0, i32 7
  %14 = load %struct.sv*, %struct.sv** %op_sv16, align 8
  %call = call %struct.sv* @Perl_newSVsv(%struct.sv* %14)
  %call17 = call %struct.op* @Perl_newSVOP(i32 5, i32 0, %struct.sv* %call)
  store %struct.op* %call17, %struct.op** %pack5, align 8
  %call18 = call %struct.sv* @Perl_newSVpvn_share(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.52, i64 0, i64 0), i32 7, i32 0)
  store %struct.sv* %call18, %struct.sv** %meth, align 8
  %15 = load %struct.op*, %struct.op** %pack5, align 8
  %16 = load %struct.op*, %struct.op** %version.addr, align 8
  %call19 = call %struct.op* @Perl_op_prepend_elem(i32 158, %struct.op* %15, %struct.op* %16)
  %17 = load %struct.sv*, %struct.sv** %meth, align 8
  %call20 = call %struct.op* @Perl_newMETHOP_named(i32 210, i32 0, %struct.sv* %17)
  %call21 = call %struct.op* @Perl_op_append_elem(i32 158, %struct.op* %call19, %struct.op* %call20)
  %call22 = call %struct.op* @Perl_op_convert_list(i32 185, i32 192, %struct.op* %call21)
  store %struct.op* %call22, %struct.op** %veop, align 8
  br label %if.end23

if.end23:                                         ; preds = %if.end15, %if.then4
  br label %if.end24

if.end24:                                         ; preds = %if.end23, %if.end
  %18 = load %struct.op*, %struct.op** %arg.addr, align 8
  %tobool25 = icmp ne %struct.op* %18, null
  br i1 %tobool25, label %land.lhs.true26, label %if.else33

land.lhs.true26:                                  ; preds = %if.end24
  %19 = load %struct.op*, %struct.op** %arg.addr, align 8
  %op_type27 = getelementptr inbounds %struct.op, %struct.op* %19, i32 0, i32 4
  %bf.load28 = load i16, i16* %op_type27, align 8
  %bf.clear29 = and i16 %bf.load28, 511
  %bf.cast30 = zext i16 %bf.clear29 to i32
  %cmp31 = icmp eq i32 %bf.cast30, 1
  br i1 %cmp31, label %if.then32, label %if.else33

if.then32:                                        ; preds = %land.lhs.true26
  %20 = load %struct.op*, %struct.op** %arg.addr, align 8
  store %struct.op* %20, %struct.op** %imop, align 8
  br label %if.end58

if.else33:                                        ; preds = %land.lhs.true26, %if.end24
  %21 = load %struct.op*, %struct.op** %idop.addr, align 8
  %22 = bitcast %struct.op* %21 to %struct.svop*
  %op_sv34 = getelementptr inbounds %struct.svop, %struct.svop* %22, i32 0, i32 7
  %23 = load %struct.sv*, %struct.sv** %op_sv34, align 8
  %sv_flags35 = getelementptr inbounds %struct.sv, %struct.sv* %23, i32 0, i32 2
  %24 = load i32, i32* %sv_flags35, align 4
  %and36 = and i32 %24, 12288
  %tobool37 = icmp ne i32 %and36, 0
  br i1 %tobool37, label %if.then38, label %if.else45

if.then38:                                        ; preds = %if.else33
  store %struct.op* null, %struct.op** %imop, align 8
  %25 = load i32, i32* %aver.addr, align 4
  %tobool39 = icmp ne i32 %25, 0
  br i1 %tobool39, label %if.then40, label %if.else42

if.then40:                                        ; preds = %if.then38
  %26 = load %struct.op*, %struct.op** %idop.addr, align 8
  %27 = bitcast %struct.op* %26 to %struct.svop*
  %op_sv41 = getelementptr inbounds %struct.svop, %struct.svop* %27, i32 0, i32 7
  %28 = load %struct.sv*, %struct.sv** %op_sv41, align 8
  store %struct.sv* %28, %struct.sv** %use_version, align 8
  br label %if.end44

if.else42:                                        ; preds = %if.then38
  %29 = load %struct.op*, %struct.op** %idop.addr, align 8
  %op_private = getelementptr inbounds %struct.op, %struct.op* %29, i32 0, i32 6
  %30 = load i8, i8* %op_private, align 1
  %conv = zext i8 %30 to i32
  %or = or i32 %conv, 2
  %conv43 = trunc i32 %or to i8
  store i8 %conv43, i8* %op_private, align 1
  br label %if.end44

if.end44:                                         ; preds = %if.else42, %if.then40
  br label %if.end57

if.else45:                                        ; preds = %if.else33
  %31 = load %struct.op*, %struct.op** %idop.addr, align 8
  %32 = bitcast %struct.op* %31 to %struct.svop*
  %op_sv47 = getelementptr inbounds %struct.svop, %struct.svop* %32, i32 0, i32 7
  %33 = load %struct.sv*, %struct.sv** %op_sv47, align 8
  %call48 = call %struct.sv* @Perl_newSVsv(%struct.sv* %33)
  %call49 = call %struct.op* @Perl_newSVOP(i32 5, i32 0, %struct.sv* %call48)
  store %struct.op* %call49, %struct.op** %pack, align 8
  %34 = load i32, i32* %aver.addr, align 4
  %tobool50 = icmp ne i32 %34, 0
  br i1 %tobool50, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.else45
  %call51 = call %struct.sv* @Perl_newSVpvn_share(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.55, i64 0, i64 0), i32 6, i32 0)
  br label %cond.end

cond.false:                                       ; preds = %if.else45
  %call52 = call %struct.sv* @Perl_newSVpvn_share(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.56, i64 0, i64 0), i32 8, i32 0)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.sv* [ %call51, %cond.true ], [ %call52, %cond.false ]
  store %struct.sv* %cond, %struct.sv** %meth46, align 8
  %35 = load %struct.op*, %struct.op** %pack, align 8
  %36 = load %struct.op*, %struct.op** %arg.addr, align 8
  %call53 = call %struct.op* @Perl_op_prepend_elem(i32 158, %struct.op* %35, %struct.op* %36)
  %37 = load %struct.sv*, %struct.sv** %meth46, align 8
  %call54 = call %struct.op* @Perl_newMETHOP_named(i32 210, i32 0, %struct.sv* %37)
  %call55 = call %struct.op* @Perl_op_append_elem(i32 158, %struct.op* %call53, %struct.op* %call54)
  %call56 = call %struct.op* @Perl_op_convert_list(i32 185, i32 192, %struct.op* %call55)
  store %struct.op* %call56, %struct.op** %imop, align 8
  br label %if.end57

if.end57:                                         ; preds = %cond.end, %if.end44
  br label %if.end58

if.end58:                                         ; preds = %if.end57, %if.then32
  %38 = load i32, i32* %floor.addr, align 4
  %call59 = call %struct.sv* @Perl_newSVpvn_share(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.57, i64 0, i64 0), i32 5, i32 0)
  %call60 = call %struct.op* @Perl_newSVOP(i32 5, i32 0, %struct.sv* %call59)
  %39 = load %struct.op*, %struct.op** %idop.addr, align 8
  %call61 = call %struct.op* @Perl_newUNOP(i32 339, i32 0, %struct.op* %39)
  %call62 = call %struct.op* @Perl_newSTATEOP(i32 0, i8* null, %struct.op* %call61)
  %40 = load %struct.op*, %struct.op** %veop, align 8
  %call63 = call %struct.op* @Perl_newSTATEOP(i32 0, i8* null, %struct.op* %40)
  %call64 = call %struct.op* @Perl_op_append_elem(i32 192, %struct.op* %call62, %struct.op* %call63)
  %41 = load %struct.op*, %struct.op** %imop, align 8
  %call65 = call %struct.op* @Perl_newSTATEOP(i32 0, i8* null, %struct.op* %41)
  %call66 = call %struct.op* @Perl_op_append_elem(i32 192, %struct.op* %call64, %struct.op* %call65)
  %call67 = call %struct.cv* @Perl_newATTRSUB_x(i32 %38, %struct.op* %call60, %struct.op* null, %struct.op* null, %struct.op* %call66, i1 zeroext false)
  %42 = load %struct.sv*, %struct.sv** %use_version, align 8
  %tobool68 = icmp ne %struct.sv* %42, null
  br i1 %tobool68, label %if.then69, label %if.end111

if.then69:                                        ; preds = %if.end58
  %43 = load %struct.sv*, %struct.sv** %use_version, align 8
  %call70 = call %struct.sv* @Perl_new_version(%struct.sv* %43)
  %call71 = call %struct.sv* @Perl_sv_2mortal(%struct.sv* %call70)
  store %struct.sv* %call71, %struct.sv** %use_version, align 8
  %44 = load %struct.sv*, %struct.sv** %use_version, align 8
  call void @S_enable_feature_bundle(%struct.sv* %44)
  %45 = load %struct.sv*, %struct.sv** %use_version, align 8
  %call72 = call %struct.sv* @Perl_newSVnv(double 5.011000e+00)
  %call73 = call %struct.sv* @Perl_upg_version(%struct.sv* %call72, i1 zeroext false)
  %call74 = call %struct.sv* @Perl_sv_2mortal(%struct.sv* %call73)
  %call75 = call i32 @Perl_vcmp(%struct.sv* %45, %struct.sv* %call74)
  %cmp76 = icmp sge i32 %call75, 0
  br i1 %cmp76, label %if.then78, label %if.else94

if.then78:                                        ; preds = %if.then69
  %46 = load i32, i32* getelementptr inbounds (%struct.cop, %struct.cop* @PL_compiling, i32 0, i32 10), align 8
  %and79 = and i32 %46, 32
  %tobool80 = icmp ne i32 %and79, 0
  br i1 %tobool80, label %if.end83, label %if.then81

if.then81:                                        ; preds = %if.then78
  %47 = load i32, i32* getelementptr inbounds (%struct.cop, %struct.cop* @PL_compiling, i32 0, i32 10), align 8
  %or82 = or i32 %47, 2
  store i32 %or82, i32* getelementptr inbounds (%struct.cop, %struct.cop* @PL_compiling, i32 0, i32 10), align 8
  br label %if.end83

if.end83:                                         ; preds = %if.then81, %if.then78
  %48 = load i32, i32* getelementptr inbounds (%struct.cop, %struct.cop* @PL_compiling, i32 0, i32 10), align 8
  %and84 = and i32 %48, 64
  %tobool85 = icmp ne i32 %and84, 0
  br i1 %tobool85, label %if.end88, label %if.then86

if.then86:                                        ; preds = %if.end83
  %49 = load i32, i32* getelementptr inbounds (%struct.cop, %struct.cop* @PL_compiling, i32 0, i32 10), align 8
  %or87 = or i32 %49, 512
  store i32 %or87, i32* getelementptr inbounds (%struct.cop, %struct.cop* @PL_compiling, i32 0, i32 10), align 8
  br label %if.end88

if.end88:                                         ; preds = %if.then86, %if.end83
  %50 = load i32, i32* getelementptr inbounds (%struct.cop, %struct.cop* @PL_compiling, i32 0, i32 10), align 8
  %and89 = and i32 %50, 128
  %tobool90 = icmp ne i32 %and89, 0
  br i1 %tobool90, label %if.end93, label %if.then91

if.then91:                                        ; preds = %if.end88
  %51 = load i32, i32* getelementptr inbounds (%struct.cop, %struct.cop* @PL_compiling, i32 0, i32 10), align 8
  %or92 = or i32 %51, 1024
  store i32 %or92, i32* getelementptr inbounds (%struct.cop, %struct.cop* @PL_compiling, i32 0, i32 10), align 8
  br label %if.end93

if.end93:                                         ; preds = %if.then91, %if.end88
  br label %if.end110

if.else94:                                        ; preds = %if.then69
  %52 = load i32, i32* getelementptr inbounds (%struct.cop, %struct.cop* @PL_compiling, i32 0, i32 10), align 8
  %and95 = and i32 %52, 32
  %tobool96 = icmp ne i32 %and95, 0
  br i1 %tobool96, label %if.end99, label %if.then97

if.then97:                                        ; preds = %if.else94
  %53 = load i32, i32* getelementptr inbounds (%struct.cop, %struct.cop* @PL_compiling, i32 0, i32 10), align 8
  %and98 = and i32 %53, -3
  store i32 %and98, i32* getelementptr inbounds (%struct.cop, %struct.cop* @PL_compiling, i32 0, i32 10), align 8
  br label %if.end99

if.end99:                                         ; preds = %if.then97, %if.else94
  %54 = load i32, i32* getelementptr inbounds (%struct.cop, %struct.cop* @PL_compiling, i32 0, i32 10), align 8
  %and100 = and i32 %54, 64
  %tobool101 = icmp ne i32 %and100, 0
  br i1 %tobool101, label %if.end104, label %if.then102

if.then102:                                       ; preds = %if.end99
  %55 = load i32, i32* getelementptr inbounds (%struct.cop, %struct.cop* @PL_compiling, i32 0, i32 10), align 8
  %and103 = and i32 %55, -513
  store i32 %and103, i32* getelementptr inbounds (%struct.cop, %struct.cop* @PL_compiling, i32 0, i32 10), align 8
  br label %if.end104

if.end104:                                        ; preds = %if.then102, %if.end99
  %56 = load i32, i32* getelementptr inbounds (%struct.cop, %struct.cop* @PL_compiling, i32 0, i32 10), align 8
  %and105 = and i32 %56, 128
  %tobool106 = icmp ne i32 %and105, 0
  br i1 %tobool106, label %if.end109, label %if.then107

if.then107:                                       ; preds = %if.end104
  %57 = load i32, i32* getelementptr inbounds (%struct.cop, %struct.cop* @PL_compiling, i32 0, i32 10), align 8
  %and108 = and i32 %57, -1025
  store i32 %and108, i32* getelementptr inbounds (%struct.cop, %struct.cop* @PL_compiling, i32 0, i32 10), align 8
  br label %if.end109

if.end109:                                        ; preds = %if.then107, %if.end104
  br label %if.end110

if.end110:                                        ; preds = %if.end109, %if.end93
  br label %if.end111

if.end111:                                        ; preds = %if.end110, %if.end58
  %58 = load i32, i32* getelementptr inbounds (%struct.cop, %struct.cop* @PL_compiling, i32 0, i32 10), align 8
  %or112 = or i32 %58, 256
  store i32 %or112, i32* getelementptr inbounds (%struct.cop, %struct.cop* @PL_compiling, i32 0, i32 10), align 8
  %59 = load %struct.yy_parser*, %struct.yy_parser** @PL_parser, align 8
  %copline = getelementptr inbounds %struct.yy_parser, %struct.yy_parser* %59, i32 0, i32 41
  store i32 -1, i32* %copline, align 8
  %60 = load i32, i32* @PL_cop_seqmax, align 4
  %inc = add i32 %60, 1
  store i32 %inc, i32* @PL_cop_seqmax, align 4
  %61 = load i32, i32* @PL_cop_seqmax, align 4
  %cmp113 = icmp eq i32 %61, -1
  br i1 %cmp113, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %if.end111
  %62 = load i32, i32* @PL_cop_seqmax, align 4
  %inc115 = add i32 %62, 1
  store i32 %inc115, i32* @PL_cop_seqmax, align 4
  %tobool116 = icmp ne i32 %62, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.end111
  %63 = phi i1 [ false, %if.end111 ], [ %tobool116, %land.rhs ]
  %land.ext = zext i1 %63 to i32
  ret void
}

declare dso_local %struct.sv* @Perl_newSVsv(%struct.sv*) #3

declare dso_local %struct.sv* @Perl_new_version(%struct.sv*) #3

; Function Attrs: noinline nounwind uwtable
define internal void @S_enable_feature_bundle(%struct.sv* %ver) #0 {
entry:
  %ver.addr = alloca %struct.sv*, align 8
  %comp_ver = alloca %struct.sv*, align 8
  store %struct.sv* %ver, %struct.sv** %ver.addr, align 8
  %call = call %struct.sv* @Perl_sv_newmortal()
  store %struct.sv* %call, %struct.sv** %comp_ver, align 8
  %0 = load i32, i32* getelementptr inbounds (%struct.cop, %struct.cop* @PL_compiling, i32 0, i32 10), align 8
  %and = and i32 %0, -469762049
  %1 = load %struct.sv*, %struct.sv** %comp_ver, align 8
  call void @Perl_sv_setnv(%struct.sv* %1, double 5.015000e+00)
  %2 = load %struct.sv*, %struct.sv** %ver.addr, align 8
  %3 = load %struct.sv*, %struct.sv** %comp_ver, align 8
  %call1 = call %struct.sv* @Perl_upg_version(%struct.sv* %3, i1 zeroext false)
  %call2 = call i32 @Perl_vcmp(%struct.sv* %2, %struct.sv* %call1)
  %cmp = icmp sge i32 %call2, 0
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  br label %cond.end12

cond.false:                                       ; preds = %entry
  %4 = load %struct.sv*, %struct.sv** %comp_ver, align 8
  call void @Perl_sv_setnv(%struct.sv* %4, double 5.011000e+00)
  %5 = load %struct.sv*, %struct.sv** %ver.addr, align 8
  %6 = load %struct.sv*, %struct.sv** %comp_ver, align 8
  %call3 = call %struct.sv* @Perl_upg_version(%struct.sv* %6, i1 zeroext false)
  %call4 = call i32 @Perl_vcmp(%struct.sv* %5, %struct.sv* %call3)
  %cmp5 = icmp sge i32 %call4, 0
  br i1 %cmp5, label %cond.true6, label %cond.false7

cond.true6:                                       ; preds = %cond.false
  br label %cond.end

cond.false7:                                      ; preds = %cond.false
  %7 = load %struct.sv*, %struct.sv** %comp_ver, align 8
  call void @Perl_sv_setnv(%struct.sv* %7, double 0x401409389B52007E)
  %8 = load %struct.sv*, %struct.sv** %ver.addr, align 8
  %9 = load %struct.sv*, %struct.sv** %comp_ver, align 8
  %call8 = call %struct.sv* @Perl_upg_version(%struct.sv* %9, i1 zeroext false)
  %call9 = call i32 @Perl_vcmp(%struct.sv* %8, %struct.sv* %call8)
  %cmp10 = icmp sge i32 %call9, 0
  %10 = zext i1 %cmp10 to i64
  %cond = select i1 %cmp10, i32 1, i32 0
  br label %cond.end

cond.end:                                         ; preds = %cond.false7, %cond.true6
  %cond11 = phi i32 [ 2, %cond.true6 ], [ %cond, %cond.false7 ]
  br label %cond.end12

cond.end12:                                       ; preds = %cond.end, %cond.true
  %cond13 = phi i32 [ 3, %cond.true ], [ %cond11, %cond.end ]
  %shl = shl i32 %cond13, 26
  %or = or i32 %and, %shl
  store i32 %or, i32* getelementptr inbounds (%struct.cop, %struct.cop* @PL_compiling, i32 0, i32 10), align 8
  %11 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cmp14 = icmp eq %struct.cop* %11, @PL_compiling
  br i1 %cmp14, label %cond.true15, label %cond.false16

cond.true15:                                      ; preds = %cond.end12
  %12 = load i32, i32* getelementptr inbounds (%struct.cop, %struct.cop* @PL_compiling, i32 0, i32 10), align 8
  br label %cond.end17

cond.false16:                                     ; preds = %cond.end12
  %13 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_hints = getelementptr inbounds %struct.cop, %struct.cop* %13, i32 0, i32 10
  %14 = load i32, i32* %cop_hints, align 8
  br label %cond.end17

cond.end17:                                       ; preds = %cond.false16, %cond.true15
  %cond18 = phi i32 [ %12, %cond.true15 ], [ %14, %cond.false16 ]
  %and19 = and i32 %cond18, 469762048
  %shr = lshr i32 %and19, 26
  %cmp20 = icmp uge i32 %shr, 2
  br i1 %cmp20, label %land.lhs.true, label %lor.lhs.false

land.lhs.true:                                    ; preds = %cond.end17
  %15 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cmp21 = icmp eq %struct.cop* %15, @PL_compiling
  br i1 %cmp21, label %cond.true22, label %cond.false23

cond.true22:                                      ; preds = %land.lhs.true
  %16 = load i32, i32* getelementptr inbounds (%struct.cop, %struct.cop* @PL_compiling, i32 0, i32 10), align 8
  br label %cond.end25

cond.false23:                                     ; preds = %land.lhs.true
  %17 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_hints24 = getelementptr inbounds %struct.cop, %struct.cop* %17, i32 0, i32 10
  %18 = load i32, i32* %cop_hints24, align 8
  br label %cond.end25

cond.end25:                                       ; preds = %cond.false23, %cond.true22
  %cond26 = phi i32 [ %16, %cond.true22 ], [ %18, %cond.false23 ]
  %and27 = and i32 %cond26, 469762048
  %shr28 = lshr i32 %and27, 26
  %cmp29 = icmp ule i32 %shr28, 3
  br i1 %cmp29, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %cond.end25, %cond.end17
  %19 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cmp30 = icmp eq %struct.cop* %19, @PL_compiling
  br i1 %cmp30, label %cond.true31, label %cond.false32

cond.true31:                                      ; preds = %lor.lhs.false
  %20 = load i32, i32* getelementptr inbounds (%struct.cop, %struct.cop* @PL_compiling, i32 0, i32 10), align 8
  br label %cond.end34

cond.false32:                                     ; preds = %lor.lhs.false
  %21 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_hints33 = getelementptr inbounds %struct.cop, %struct.cop* %21, i32 0, i32 10
  %22 = load i32, i32* %cop_hints33, align 8
  br label %cond.end34

cond.end34:                                       ; preds = %cond.false32, %cond.true31
  %cond35 = phi i32 [ %20, %cond.true31 ], [ %22, %cond.false32 ]
  %and36 = and i32 %cond35, 469762048
  %shr37 = lshr i32 %and36, 26
  %cmp38 = icmp eq i32 %shr37, 7
  br i1 %cmp38, label %land.lhs.true39, label %if.else

land.lhs.true39:                                  ; preds = %cond.end34
  %23 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cmp40 = icmp eq %struct.cop* %23, @PL_compiling
  br i1 %cmp40, label %cond.true41, label %cond.false42

cond.true41:                                      ; preds = %land.lhs.true39
  %24 = load i32, i32* getelementptr inbounds (%struct.cop, %struct.cop* @PL_compiling, i32 0, i32 10), align 8
  br label %cond.end44

cond.false42:                                     ; preds = %land.lhs.true39
  %25 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_hints43 = getelementptr inbounds %struct.cop, %struct.cop* %25, i32 0, i32 10
  %26 = load i32, i32* %cop_hints43, align 8
  br label %cond.end44

cond.end44:                                       ; preds = %cond.false42, %cond.true41
  %cond45 = phi i32 [ %24, %cond.true41 ], [ %26, %cond.false42 ]
  %and46 = and i32 %cond45, 131072
  %tobool = icmp ne i32 %and46, 0
  br i1 %tobool, label %cond.true47, label %cond.false49

cond.true47:                                      ; preds = %cond.end44
  %call48 = call zeroext i1 @Perl_feature_is_enabled(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.185, i64 0, i64 0), i64 7)
  br i1 %call48, label %if.then, label %if.else

cond.false49:                                     ; preds = %cond.end44
  br i1 false, label %if.then, label %if.else

if.then:                                          ; preds = %cond.false49, %cond.true47, %cond.end25
  %27 = load i32, i32* getelementptr inbounds (%struct.cop, %struct.cop* @PL_compiling, i32 0, i32 10), align 8
  %or50 = or i32 %27, 2048
  store i32 %or50, i32* getelementptr inbounds (%struct.cop, %struct.cop* @PL_compiling, i32 0, i32 10), align 8
  br label %if.end

if.else:                                          ; preds = %cond.false49, %cond.true47, %cond.end34
  %28 = load i32, i32* getelementptr inbounds (%struct.cop, %struct.cop* @PL_compiling, i32 0, i32 10), align 8
  %and51 = and i32 %28, -2049
  store i32 %and51, i32* getelementptr inbounds (%struct.cop, %struct.cop* @PL_compiling, i32 0, i32 10), align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void
}

declare dso_local i32 @Perl_vcmp(%struct.sv*, %struct.sv*) #3

declare dso_local %struct.sv* @Perl_upg_version(%struct.sv*, i1 zeroext) #3

declare dso_local %struct.sv* @Perl_newSVnv(double) #3

; Function Attrs: nounwind
declare void @llvm.va_start(i8*) #5

; Function Attrs: noinline nounwind uwtable
define dso_local void @Perl_vload_module(i32 %flags, %struct.sv* %name, %struct.sv* %ver, [1 x %struct.__va_list_tag]* %args) #0 {
entry:
  %flags.addr = alloca i32, align 4
  %name.addr = alloca %struct.sv*, align 8
  %ver.addr = alloca %struct.sv*, align 8
  %args.addr = alloca [1 x %struct.__va_list_tag]*, align 8
  %veop = alloca %struct.op*, align 8
  %imop = alloca %struct.op*, align 8
  %modname = alloca %struct.op*, align 8
  %sv = alloca %struct.sv*, align 8
  store i32 %flags, i32* %flags.addr, align 4
  store %struct.sv* %name, %struct.sv** %name.addr, align 8
  store %struct.sv* %ver, %struct.sv** %ver.addr, align 8
  store [1 x %struct.__va_list_tag]* %args, [1 x %struct.__va_list_tag]** %args.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %name.addr, align 8
  %call = call %struct.op* @Perl_newSVOP(i32 5, i32 0, %struct.sv* %0)
  store %struct.op* %call, %struct.op** %modname, align 8
  %1 = load %struct.op*, %struct.op** %modname, align 8
  %op_private = getelementptr inbounds %struct.op, %struct.op* %1, i32 0, i32 6
  %2 = load i8, i8* %op_private, align 1
  %conv = zext i8 %2 to i32
  %or = or i32 %conv, 64
  %conv1 = trunc i32 %or to i8
  store i8 %conv1, i8* %op_private, align 1
  %3 = load %struct.sv*, %struct.sv** %ver.addr, align 8
  %tobool = icmp ne %struct.sv* %3, null
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %4 = load %struct.sv*, %struct.sv** %ver.addr, align 8
  %call2 = call %struct.op* @Perl_newSVOP(i32 5, i32 0, %struct.sv* %4)
  store %struct.op* %call2, %struct.op** %veop, align 8
  br label %if.end

if.else:                                          ; preds = %entry
  store %struct.op* null, %struct.op** %veop, align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %5 = load i32, i32* %flags.addr, align 4
  %and = and i32 %5, 2
  %tobool3 = icmp ne i32 %and, 0
  br i1 %tobool3, label %if.then4, label %if.else7

if.then4:                                         ; preds = %if.end
  %call5 = call %struct.op* @Perl_newNULLLIST()
  %call6 = call %struct.op* @Perl_sawparens(%struct.op* %call5)
  store %struct.op* %call6, %struct.op** %imop, align 8
  br label %if.end40

if.else7:                                         ; preds = %if.end
  %6 = load i32, i32* %flags.addr, align 4
  %and8 = and i32 %6, 4
  %tobool9 = icmp ne i32 %and8, 0
  br i1 %tobool9, label %if.then10, label %if.else11

if.then10:                                        ; preds = %if.else7
  %7 = load [1 x %struct.__va_list_tag]*, [1 x %struct.__va_list_tag]** %args.addr, align 8
  %arraydecay = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %7, i64 0, i64 0
  %gp_offset_p = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay, i32 0, i32 0
  %gp_offset = load i32, i32* %gp_offset_p, align 8
  %fits_in_gp = icmp ule i32 %gp_offset, 40
  br i1 %fits_in_gp, label %vaarg.in_reg, label %vaarg.in_mem

vaarg.in_reg:                                     ; preds = %if.then10
  %8 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay, i32 0, i32 3
  %reg_save_area = load i8*, i8** %8, align 8
  %9 = getelementptr i8, i8* %reg_save_area, i32 %gp_offset
  %10 = bitcast i8* %9 to %struct.op**
  %11 = add i32 %gp_offset, 8
  store i32 %11, i32* %gp_offset_p, align 8
  br label %vaarg.end

vaarg.in_mem:                                     ; preds = %if.then10
  %overflow_arg_area_p = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay, i32 0, i32 2
  %overflow_arg_area = load i8*, i8** %overflow_arg_area_p, align 8
  %12 = bitcast i8* %overflow_arg_area to %struct.op**
  %overflow_arg_area.next = getelementptr i8, i8* %overflow_arg_area, i32 8
  store i8* %overflow_arg_area.next, i8** %overflow_arg_area_p, align 8
  br label %vaarg.end

vaarg.end:                                        ; preds = %vaarg.in_mem, %vaarg.in_reg
  %vaarg.addr = phi %struct.op** [ %10, %vaarg.in_reg ], [ %12, %vaarg.in_mem ]
  %13 = load %struct.op*, %struct.op** %vaarg.addr, align 8
  store %struct.op* %13, %struct.op** %imop, align 8
  br label %if.end39

if.else11:                                        ; preds = %if.else7
  store %struct.op* null, %struct.op** %imop, align 8
  %14 = load [1 x %struct.__va_list_tag]*, [1 x %struct.__va_list_tag]** %args.addr, align 8
  %arraydecay12 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %14, i64 0, i64 0
  %gp_offset_p13 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay12, i32 0, i32 0
  %gp_offset14 = load i32, i32* %gp_offset_p13, align 8
  %fits_in_gp15 = icmp ule i32 %gp_offset14, 40
  br i1 %fits_in_gp15, label %vaarg.in_reg16, label %vaarg.in_mem18

vaarg.in_reg16:                                   ; preds = %if.else11
  %15 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay12, i32 0, i32 3
  %reg_save_area17 = load i8*, i8** %15, align 8
  %16 = getelementptr i8, i8* %reg_save_area17, i32 %gp_offset14
  %17 = bitcast i8* %16 to %struct.sv**
  %18 = add i32 %gp_offset14, 8
  store i32 %18, i32* %gp_offset_p13, align 8
  br label %vaarg.end22

vaarg.in_mem18:                                   ; preds = %if.else11
  %overflow_arg_area_p19 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay12, i32 0, i32 2
  %overflow_arg_area20 = load i8*, i8** %overflow_arg_area_p19, align 8
  %19 = bitcast i8* %overflow_arg_area20 to %struct.sv**
  %overflow_arg_area.next21 = getelementptr i8, i8* %overflow_arg_area20, i32 8
  store i8* %overflow_arg_area.next21, i8** %overflow_arg_area_p19, align 8
  br label %vaarg.end22

vaarg.end22:                                      ; preds = %vaarg.in_mem18, %vaarg.in_reg16
  %vaarg.addr23 = phi %struct.sv** [ %17, %vaarg.in_reg16 ], [ %19, %vaarg.in_mem18 ]
  %20 = load %struct.sv*, %struct.sv** %vaarg.addr23, align 8
  store %struct.sv* %20, %struct.sv** %sv, align 8
  br label %while.cond

while.cond:                                       ; preds = %vaarg.end37, %vaarg.end22
  %21 = load %struct.sv*, %struct.sv** %sv, align 8
  %tobool24 = icmp ne %struct.sv* %21, null
  br i1 %tobool24, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %22 = load %struct.op*, %struct.op** %imop, align 8
  %23 = load %struct.sv*, %struct.sv** %sv, align 8
  %call25 = call %struct.op* @Perl_newSVOP(i32 5, i32 0, %struct.sv* %23)
  %call26 = call %struct.op* @Perl_op_append_elem(i32 158, %struct.op* %22, %struct.op* %call25)
  store %struct.op* %call26, %struct.op** %imop, align 8
  %24 = load [1 x %struct.__va_list_tag]*, [1 x %struct.__va_list_tag]** %args.addr, align 8
  %arraydecay27 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %24, i64 0, i64 0
  %gp_offset_p28 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay27, i32 0, i32 0
  %gp_offset29 = load i32, i32* %gp_offset_p28, align 8
  %fits_in_gp30 = icmp ule i32 %gp_offset29, 40
  br i1 %fits_in_gp30, label %vaarg.in_reg31, label %vaarg.in_mem33

vaarg.in_reg31:                                   ; preds = %while.body
  %25 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay27, i32 0, i32 3
  %reg_save_area32 = load i8*, i8** %25, align 8
  %26 = getelementptr i8, i8* %reg_save_area32, i32 %gp_offset29
  %27 = bitcast i8* %26 to %struct.sv**
  %28 = add i32 %gp_offset29, 8
  store i32 %28, i32* %gp_offset_p28, align 8
  br label %vaarg.end37

vaarg.in_mem33:                                   ; preds = %while.body
  %overflow_arg_area_p34 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay27, i32 0, i32 2
  %overflow_arg_area35 = load i8*, i8** %overflow_arg_area_p34, align 8
  %29 = bitcast i8* %overflow_arg_area35 to %struct.sv**
  %overflow_arg_area.next36 = getelementptr i8, i8* %overflow_arg_area35, i32 8
  store i8* %overflow_arg_area.next36, i8** %overflow_arg_area_p34, align 8
  br label %vaarg.end37

vaarg.end37:                                      ; preds = %vaarg.in_mem33, %vaarg.in_reg31
  %vaarg.addr38 = phi %struct.sv** [ %27, %vaarg.in_reg31 ], [ %29, %vaarg.in_mem33 ]
  %30 = load %struct.sv*, %struct.sv** %vaarg.addr38, align 8
  store %struct.sv* %30, %struct.sv** %sv, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %if.end39

if.end39:                                         ; preds = %while.end, %vaarg.end
  br label %if.end40

if.end40:                                         ; preds = %if.end39, %if.then4
  call void @Perl_push_scope()
  call void @Perl_save_vptr(i8* bitcast (%struct.cop** @PL_curcop to i8*))
  call void @Perl_lex_start(%struct.sv* null, %struct._PerlIO** null, i32 1)
  %31 = load i32, i32* %flags.addr, align 4
  %and41 = and i32 %31, 1
  %tobool42 = icmp ne i32 %and41, 0
  %lnot = xor i1 %tobool42, true
  %lnot.ext = zext i1 %lnot to i32
  %call43 = call i32 @Perl_start_subparse(i32 0, i32 0)
  %32 = load %struct.op*, %struct.op** %veop, align 8
  %33 = load %struct.op*, %struct.op** %modname, align 8
  %34 = load %struct.op*, %struct.op** %imop, align 8
  call void @Perl_utilize(i32 %lnot.ext, i32 %call43, %struct.op* %32, %struct.op* %33, %struct.op* %34)
  call void @Perl_pop_scope()
  ret void
}

; Function Attrs: nounwind
declare void @llvm.va_end(i8*) #5

declare dso_local void @Perl_lex_start(%struct.sv*, %struct._PerlIO**, i32) #3

declare dso_local i32 @Perl_start_subparse(i32, i32) #3

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_dofile(%struct.op* %term, i32 %force_builtin) #0 {
entry:
  %term.addr = alloca %struct.op*, align 8
  %force_builtin.addr = alloca i32, align 4
  %doop = alloca %struct.op*, align 8
  %gv = alloca %struct.gv*, align 8
  store %struct.op* %term, %struct.op** %term.addr, align 8
  store i32 %force_builtin, i32* %force_builtin.addr, align 4
  %0 = load i32, i32* %force_builtin.addr, align 4
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %if.else, label %land.lhs.true

land.lhs.true:                                    ; preds = %entry
  %call = call %struct.gv* @Perl_gv_override(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.58, i64 0, i64 0), i64 2)
  store %struct.gv* %call, %struct.gv** %gv, align 8
  %tobool1 = icmp ne %struct.gv* %call, null
  br i1 %tobool1, label %if.then, label %if.else

if.then:                                          ; preds = %land.lhs.true
  %1 = load %struct.gv*, %struct.gv** %gv, align 8
  %2 = load %struct.op*, %struct.op** %term.addr, align 8
  %call2 = call %struct.op* @S_new_entersubop(%struct.gv* %1, %struct.op* %2)
  store %struct.op* %call2, %struct.op** %doop, align 8
  br label %if.end

if.else:                                          ; preds = %land.lhs.true, %entry
  %3 = load %struct.op*, %struct.op** %term.addr, align 8
  %call3 = call %struct.op* @Perl_scalar(%struct.op* %3)
  %call4 = call %struct.op* @Perl_newUNOP(i32 340, i32 0, %struct.op* %call3)
  store %struct.op* %call4, %struct.op** %doop, align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %4 = load %struct.op*, %struct.op** %doop, align 8
  ret %struct.op* %4
}

declare dso_local %struct.gv* @Perl_gv_override(i8*, i64) #3

; Function Attrs: noinline nounwind uwtable
define internal %struct.op* @S_new_entersubop(%struct.gv* %gv, %struct.op* %arg) #0 {
entry:
  %gv.addr = alloca %struct.gv*, align 8
  %arg.addr = alloca %struct.op*, align 8
  store %struct.gv* %gv, %struct.gv** %gv.addr, align 8
  store %struct.op* %arg, %struct.op** %arg.addr, align 8
  %0 = load %struct.op*, %struct.op** %arg.addr, align 8
  %1 = load %struct.gv*, %struct.gv** %gv.addr, align 8
  %call = call %struct.op* @Perl_newGVOP(i32 7, i32 0, %struct.gv* %1)
  %call1 = call %struct.op* @Perl_newUNOP(i32 17, i32 0, %struct.op* %call)
  %call2 = call %struct.op* @Perl_newLISTOP(i32 158, i32 0, %struct.op* %0, %struct.op* %call1)
  %call3 = call %struct.op* @Perl_newUNOP(i32 185, i32 64, %struct.op* %call2)
  ret %struct.op* %call3
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_newSLICEOP(i32 %flags, %struct.op* %subscript, %struct.op* %listval) #0 {
entry:
  %flags.addr = alloca i32, align 4
  %subscript.addr = alloca %struct.op*, align 8
  %listval.addr = alloca %struct.op*, align 8
  store i32 %flags, i32* %flags.addr, align 4
  store %struct.op* %subscript, %struct.op** %subscript.addr, align 8
  store %struct.op* %listval, %struct.op** %listval.addr, align 8
  %0 = load i32, i32* %flags.addr, align 4
  %1 = load %struct.op*, %struct.op** %subscript.addr, align 8
  %call = call %struct.op* @S_force_list(%struct.op* %1, i1 zeroext true)
  %call1 = call %struct.op* @Perl_list(%struct.op* %call)
  %2 = load %struct.op*, %struct.op** %listval.addr, align 8
  %call2 = call %struct.op* @S_force_list(%struct.op* %2, i1 zeroext true)
  %call3 = call %struct.op* @Perl_list(%struct.op* %call2)
  %call4 = call %struct.op* @Perl_newBINOP(i32 159, i32 %0, %struct.op* %call1, %struct.op* %call3)
  ret %struct.op* %call4
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_newASSIGNOP(i32 %flags, %struct.op* %left, i32 %optype, %struct.op* %right) #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %flags.addr = alloca i32, align 4
  %left.addr = alloca %struct.op*, align 8
  %optype.addr = alloca i32, align 4
  %right.addr = alloca %struct.op*, align 8
  %o = alloca %struct.op*, align 8
  %assign_type = alloca i32, align 4
  %curop = alloca %struct.op*, align 8
  %maybe_common_vars = alloca i8, align 1
  %lop = alloca %struct.op*, align 8
  %tmpop = alloca %struct.op*, align 8
  %pm = alloca %struct.pmop*, align 8
  %svp = alloca %struct.sv**, align 8
  %sv = alloca %struct.sv*, align 8
  store i32 %flags, i32* %flags.addr, align 4
  store %struct.op* %left, %struct.op** %left.addr, align 8
  store i32 %optype, i32* %optype.addr, align 4
  store %struct.op* %right, %struct.op** %right.addr, align 8
  %0 = load i32, i32* %optype.addr, align 4
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load i32, i32* %optype.addr, align 4
  %cmp = icmp eq i32 %1, 181
  br i1 %cmp, label %if.then4, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.then
  %2 = load i32, i32* %optype.addr, align 4
  %cmp1 = icmp eq i32 %2, 182
  br i1 %cmp1, label %if.then4, label %lor.lhs.false2

lor.lhs.false2:                                   ; preds = %lor.lhs.false
  %3 = load i32, i32* %optype.addr, align 4
  %cmp3 = icmp eq i32 %3, 183
  br i1 %cmp3, label %if.then4, label %if.else

if.then4:                                         ; preds = %lor.lhs.false2, %lor.lhs.false, %if.then
  %4 = load i32, i32* %optype.addr, align 4
  %5 = load %struct.op*, %struct.op** %left.addr, align 8
  %call = call %struct.op* @Perl_scalar(%struct.op* %5)
  %6 = load i32, i32* %optype.addr, align 4
  %call5 = call %struct.op* @Perl_op_lvalue_flags(%struct.op* %call, i32 %6, i32 0)
  %7 = load %struct.op*, %struct.op** %right.addr, align 8
  %call6 = call %struct.op* @Perl_scalar(%struct.op* %7)
  %call7 = call %struct.op* @Perl_newUNOP(i32 37, i32 0, %struct.op* %call6)
  %call8 = call %struct.op* @Perl_newLOGOP(i32 %4, i32 0, %struct.op* %call5, %struct.op* %call7)
  store %struct.op* %call8, %struct.op** %retval, align 8
  br label %return

if.else:                                          ; preds = %lor.lhs.false2
  %8 = load i32, i32* %optype.addr, align 4
  %9 = load %struct.op*, %struct.op** %left.addr, align 8
  %call9 = call %struct.op* @Perl_scalar(%struct.op* %9)
  %10 = load i32, i32* %optype.addr, align 4
  %call10 = call %struct.op* @Perl_op_lvalue_flags(%struct.op* %call9, i32 %10, i32 0)
  %11 = load %struct.op*, %struct.op** %right.addr, align 8
  %call11 = call %struct.op* @Perl_scalar(%struct.op* %11)
  %call12 = call %struct.op* @Perl_newBINOP(i32 %8, i32 64, %struct.op* %call10, %struct.op* %call11)
  store %struct.op* %call12, %struct.op** %retval, align 8
  br label %return

if.end:                                           ; preds = %entry
  %12 = load %struct.op*, %struct.op** %left.addr, align 8
  %call13 = call i32 @S_assignment_type(%struct.op* %12)
  store i32 %call13, i32* %assign_type, align 4
  %cmp14 = icmp eq i32 %call13, 1
  br i1 %cmp14, label %if.then15, label %if.end324

if.then15:                                        ; preds = %if.end
  store i8 1, i8* %maybe_common_vars, align 1
  %13 = load %struct.op*, %struct.op** %left.addr, align 8
  %op_type = getelementptr inbounds %struct.op, %struct.op* %13, i32 0, i32 4
  %bf.load = load i16, i16* %op_type, align 8
  %bf.clear = and i16 %bf.load, 511
  %bf.cast = zext i16 %bf.clear to i32
  %cmp16 = icmp eq i32 %bf.cast, 139
  br i1 %cmp16, label %if.then23, label %lor.lhs.false17

lor.lhs.false17:                                  ; preds = %if.then15
  %14 = load %struct.op*, %struct.op** %left.addr, align 8
  %op_type18 = getelementptr inbounds %struct.op, %struct.op* %14, i32 0, i32 4
  %bf.load19 = load i16, i16* %op_type18, align 8
  %bf.clear20 = and i16 %bf.load19, 511
  %bf.cast21 = zext i16 %bf.clear20 to i32
  %cmp22 = icmp eq i32 %bf.cast21, 151
  br i1 %cmp22, label %if.then23, label %if.end25

if.then23:                                        ; preds = %lor.lhs.false17, %if.then15
  %15 = load %struct.op*, %struct.op** %left.addr, align 8
  %op_private = getelementptr inbounds %struct.op, %struct.op* %15, i32 0, i32 6
  %16 = load i8, i8* %op_private, align 1
  %conv = zext i8 %16 to i32
  %and = and i32 %conv, -5
  %conv24 = trunc i32 %and to i8
  store i8 %conv24, i8* %op_private, align 1
  br label %if.end25

if.end25:                                         ; preds = %if.then23, %lor.lhs.false17
  store i32 0, i32* @PL_modcount, align 4
  %17 = load %struct.op*, %struct.op** %left.addr, align 8
  %call26 = call %struct.op* @Perl_op_lvalue_flags(%struct.op* %17, i32 38, i32 0)
  store %struct.op* %call26, %struct.op** %left.addr, align 8
  %18 = load %struct.op*, %struct.op** %left.addr, align 8
  %call27 = call %struct.op* @S_force_list(%struct.op* %18, i1 zeroext true)
  %call28 = call %struct.op* @Perl_list(%struct.op* %call27)
  store %struct.op* %call28, %struct.op** %curop, align 8
  %19 = load i32, i32* %flags.addr, align 4
  %20 = load %struct.op*, %struct.op** %right.addr, align 8
  %call29 = call %struct.op* @S_force_list(%struct.op* %20, i1 zeroext true)
  %call30 = call %struct.op* @Perl_list(%struct.op* %call29)
  %21 = load %struct.op*, %struct.op** %curop, align 8
  %call31 = call %struct.op* @Perl_newBINOP(i32 38, i32 %19, %struct.op* %call30, %struct.op* %21)
  store %struct.op* %call31, %struct.op** %o, align 8
  %22 = load i32, i32* %flags.addr, align 4
  %shr = ashr i32 %22, 8
  %or = or i32 0, %shr
  %conv32 = trunc i32 %or to i8
  %23 = load %struct.op*, %struct.op** %o, align 8
  %op_private33 = getelementptr inbounds %struct.op, %struct.op* %23, i32 0, i32 6
  store i8 %conv32, i8* %op_private33, align 1
  %24 = load %struct.op*, %struct.op** %left.addr, align 8
  %tobool34 = icmp ne %struct.op* %24, null
  br i1 %tobool34, label %land.lhs.true, label %if.else131

land.lhs.true:                                    ; preds = %if.end25
  %25 = load %struct.op*, %struct.op** %left.addr, align 8
  %op_type35 = getelementptr inbounds %struct.op, %struct.op* %25, i32 0, i32 4
  %bf.load36 = load i16, i16* %op_type35, align 8
  %bf.clear37 = and i16 %bf.load36, 511
  %bf.cast38 = zext i16 %bf.clear37 to i32
  %cmp39 = icmp eq i32 %bf.cast38, 0
  br i1 %cmp39, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true
  %26 = load %struct.op*, %struct.op** %left.addr, align 8
  %op_targ = getelementptr inbounds %struct.op, %struct.op* %26, i32 0, i32 3
  %27 = load i64, i64* %op_targ, align 8
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true
  %28 = load %struct.op*, %struct.op** %left.addr, align 8
  %op_type41 = getelementptr inbounds %struct.op, %struct.op* %28, i32 0, i32 4
  %bf.load42 = load i16, i16* %op_type41, align 8
  %bf.clear43 = and i16 %bf.load42, 511
  %bf.cast44 = zext i16 %bf.clear43 to i32
  %conv45 = zext i32 %bf.cast44 to i64
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %27, %cond.true ], [ %conv45, %cond.false ]
  %cmp46 = icmp eq i64 %cond, 158
  br i1 %cmp46, label %if.then48, label %if.else131

if.then48:                                        ; preds = %cond.end
  %29 = load %struct.op*, %struct.op** %left.addr, align 8
  %30 = bitcast %struct.op* %29 to %struct.listop*
  %op_first = getelementptr inbounds %struct.listop, %struct.listop* %30, i32 0, i32 7
  %31 = load %struct.op*, %struct.op** %op_first, align 8
  store %struct.op* %31, %struct.op** %lop, align 8
  store i8 0, i8* %maybe_common_vars, align 1
  br label %while.cond

while.cond:                                       ; preds = %if.end130, %if.then48
  %32 = load %struct.op*, %struct.op** %lop, align 8
  %tobool49 = icmp ne %struct.op* %32, null
  br i1 %tobool49, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %33 = load %struct.op*, %struct.op** %lop, align 8
  %op_type50 = getelementptr inbounds %struct.op, %struct.op* %33, i32 0, i32 4
  %bf.load51 = load i16, i16* %op_type50, align 8
  %bf.clear52 = and i16 %bf.load51, 511
  %bf.cast53 = zext i16 %bf.clear52 to i32
  %cmp54 = icmp eq i32 %bf.cast53, 9
  br i1 %cmp54, label %if.then77, label %lor.lhs.false56

lor.lhs.false56:                                  ; preds = %while.body
  %34 = load %struct.op*, %struct.op** %lop, align 8
  %op_type57 = getelementptr inbounds %struct.op, %struct.op* %34, i32 0, i32 4
  %bf.load58 = load i16, i16* %op_type57, align 8
  %bf.clear59 = and i16 %bf.load58, 511
  %bf.cast60 = zext i16 %bf.clear59 to i32
  %cmp61 = icmp eq i32 %bf.cast60, 10
  br i1 %cmp61, label %if.then77, label %lor.lhs.false63

lor.lhs.false63:                                  ; preds = %lor.lhs.false56
  %35 = load %struct.op*, %struct.op** %lop, align 8
  %op_type64 = getelementptr inbounds %struct.op, %struct.op* %35, i32 0, i32 4
  %bf.load65 = load i16, i16* %op_type64, align 8
  %bf.clear66 = and i16 %bf.load65, 511
  %bf.cast67 = zext i16 %bf.clear66 to i32
  %cmp68 = icmp eq i32 %bf.cast67, 11
  br i1 %cmp68, label %if.then77, label %lor.lhs.false70

lor.lhs.false70:                                  ; preds = %lor.lhs.false63
  %36 = load %struct.op*, %struct.op** %lop, align 8
  %op_type71 = getelementptr inbounds %struct.op, %struct.op* %36, i32 0, i32 4
  %bf.load72 = load i16, i16* %op_type71, align 8
  %bf.clear73 = and i16 %bf.load72, 511
  %bf.cast74 = zext i16 %bf.clear73 to i32
  %cmp75 = icmp eq i32 %bf.cast74, 12
  br i1 %cmp75, label %if.then77, label %if.else99

if.then77:                                        ; preds = %lor.lhs.false70, %lor.lhs.false63, %lor.lhs.false56, %while.body
  %37 = load %struct.op*, %struct.op** %lop, align 8
  %op_private78 = getelementptr inbounds %struct.op, %struct.op* %37, i32 0, i32 6
  %38 = load i8, i8* %op_private78, align 1
  %conv79 = zext i8 %38 to i32
  %and80 = and i32 %conv79, 128
  %tobool81 = icmp ne i32 %and80, 0
  br i1 %tobool81, label %if.end83, label %if.then82

if.then82:                                        ; preds = %if.then77
  store i8 1, i8* %maybe_common_vars, align 1
  br label %if.end83

if.end83:                                         ; preds = %if.then82, %if.then77
  %39 = load %struct.op*, %struct.op** %lop, align 8
  %op_private84 = getelementptr inbounds %struct.op, %struct.op* %39, i32 0, i32 6
  %40 = load i8, i8* %op_private84, align 1
  %conv85 = zext i8 %40 to i32
  %and86 = and i32 %conv85, 64
  %tobool87 = icmp ne i32 %and86, 0
  br i1 %tobool87, label %if.then88, label %if.else97

if.then88:                                        ; preds = %if.end83
  %41 = load %struct.op*, %struct.op** %left.addr, align 8
  %op_private89 = getelementptr inbounds %struct.op, %struct.op* %41, i32 0, i32 6
  %42 = load i8, i8* %op_private89, align 1
  %conv90 = zext i8 %42 to i32
  %and91 = and i32 %conv90, 128
  %tobool92 = icmp ne i32 %and91, 0
  br i1 %tobool92, label %if.then93, label %if.else94

if.then93:                                        ; preds = %if.then88
  br label %if.end95

if.else94:                                        ; preds = %if.then88
  br label %if.end95

if.end95:                                         ; preds = %if.else94, %if.then93
  %call96 = call i32 @Perl_yyerror(i8* getelementptr inbounds ([70 x i8], [70 x i8]* @Perl_newASSIGNOP.no_list_state, i64 0, i64 0))
  br label %if.end98

if.else97:                                        ; preds = %if.end83
  br label %if.end98

if.end98:                                         ; preds = %if.else97, %if.end95
  br label %if.end130

if.else99:                                        ; preds = %lor.lhs.false70
  %43 = load %struct.op*, %struct.op** %lop, align 8
  %op_type100 = getelementptr inbounds %struct.op, %struct.op* %43, i32 0, i32 4
  %bf.load101 = load i16, i16* %op_type100, align 8
  %bf.clear102 = and i16 %bf.load101, 511
  %bf.cast103 = zext i16 %bf.clear102 to i32
  %cmp104 = icmp eq i32 %bf.cast103, 44
  br i1 %cmp104, label %if.then127, label %lor.lhs.false106

lor.lhs.false106:                                 ; preds = %if.else99
  %44 = load %struct.op*, %struct.op** %lop, align 8
  %tobool107 = icmp ne %struct.op* %44, null
  br i1 %tobool107, label %land.lhs.true108, label %if.else128

land.lhs.true108:                                 ; preds = %lor.lhs.false106
  %45 = load %struct.op*, %struct.op** %lop, align 8
  %op_type109 = getelementptr inbounds %struct.op, %struct.op* %45, i32 0, i32 4
  %bf.load110 = load i16, i16* %op_type109, align 8
  %bf.clear111 = and i16 %bf.load110, 511
  %bf.cast112 = zext i16 %bf.clear111 to i32
  %cmp113 = icmp eq i32 %bf.cast112, 0
  br i1 %cmp113, label %cond.true115, label %cond.false117

cond.true115:                                     ; preds = %land.lhs.true108
  %46 = load %struct.op*, %struct.op** %lop, align 8
  %op_targ116 = getelementptr inbounds %struct.op, %struct.op* %46, i32 0, i32 3
  %47 = load i64, i64* %op_targ116, align 8
  br label %cond.end123

cond.false117:                                    ; preds = %land.lhs.true108
  %48 = load %struct.op*, %struct.op** %lop, align 8
  %op_type118 = getelementptr inbounds %struct.op, %struct.op* %48, i32 0, i32 4
  %bf.load119 = load i16, i16* %op_type118, align 8
  %bf.clear120 = and i16 %bf.load119, 511
  %bf.cast121 = zext i16 %bf.clear120 to i32
  %conv122 = zext i32 %bf.cast121 to i64
  br label %cond.end123

cond.end123:                                      ; preds = %cond.false117, %cond.true115
  %cond124 = phi i64 [ %47, %cond.true115 ], [ %conv122, %cond.false117 ]
  %cmp125 = icmp eq i64 %cond124, 3
  br i1 %cmp125, label %if.then127, label %if.else128

if.then127:                                       ; preds = %cond.end123, %if.else99
  br label %if.end129

if.else128:                                       ; preds = %cond.end123, %lor.lhs.false106
  store i8 1, i8* %maybe_common_vars, align 1
  br label %if.end129

if.end129:                                        ; preds = %if.else128, %if.then127
  br label %if.end130

if.end130:                                        ; preds = %if.end129, %if.end98
  %49 = load %struct.op*, %struct.op** %lop, align 8
  %op_sibling = getelementptr inbounds %struct.op, %struct.op* %49, i32 0, i32 1
  %50 = load %struct.op*, %struct.op** %op_sibling, align 8
  %add.ptr = getelementptr inbounds %struct.op, %struct.op* %50, i64 0
  store %struct.op* %add.ptr, %struct.op** %lop, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %if.end181

if.else131:                                       ; preds = %cond.end, %if.end25
  %51 = load %struct.op*, %struct.op** %left.addr, align 8
  %op_private132 = getelementptr inbounds %struct.op, %struct.op* %51, i32 0, i32 6
  %52 = load i8, i8* %op_private132, align 1
  %conv133 = zext i8 %52 to i32
  %and134 = and i32 %conv133, 128
  %tobool135 = icmp ne i32 %and134, 0
  br i1 %tobool135, label %land.lhs.true136, label %if.end180

land.lhs.true136:                                 ; preds = %if.else131
  %53 = load %struct.op*, %struct.op** %left.addr, align 8
  %op_type137 = getelementptr inbounds %struct.op, %struct.op* %53, i32 0, i32 4
  %bf.load138 = load i16, i16* %op_type137, align 8
  %bf.clear139 = and i16 %bf.load138, 511
  %bf.cast140 = zext i16 %bf.clear139 to i32
  %cmp141 = icmp eq i32 %bf.cast140, 9
  br i1 %cmp141, label %if.then164, label %lor.lhs.false143

lor.lhs.false143:                                 ; preds = %land.lhs.true136
  %54 = load %struct.op*, %struct.op** %left.addr, align 8
  %op_type144 = getelementptr inbounds %struct.op, %struct.op* %54, i32 0, i32 4
  %bf.load145 = load i16, i16* %op_type144, align 8
  %bf.clear146 = and i16 %bf.load145, 511
  %bf.cast147 = zext i16 %bf.clear146 to i32
  %cmp148 = icmp eq i32 %bf.cast147, 10
  br i1 %cmp148, label %if.then164, label %lor.lhs.false150

lor.lhs.false150:                                 ; preds = %lor.lhs.false143
  %55 = load %struct.op*, %struct.op** %left.addr, align 8
  %op_type151 = getelementptr inbounds %struct.op, %struct.op* %55, i32 0, i32 4
  %bf.load152 = load i16, i16* %op_type151, align 8
  %bf.clear153 = and i16 %bf.load152, 511
  %bf.cast154 = zext i16 %bf.clear153 to i32
  %cmp155 = icmp eq i32 %bf.cast154, 11
  br i1 %cmp155, label %if.then164, label %lor.lhs.false157

lor.lhs.false157:                                 ; preds = %lor.lhs.false150
  %56 = load %struct.op*, %struct.op** %left.addr, align 8
  %op_type158 = getelementptr inbounds %struct.op, %struct.op* %56, i32 0, i32 4
  %bf.load159 = load i16, i16* %op_type158, align 8
  %bf.clear160 = and i16 %bf.load159, 511
  %bf.cast161 = zext i16 %bf.clear160 to i32
  %cmp162 = icmp eq i32 %bf.cast161, 12
  br i1 %cmp162, label %if.then164, label %if.end180

if.then164:                                       ; preds = %lor.lhs.false157, %lor.lhs.false150, %lor.lhs.false143, %land.lhs.true136
  %57 = load %struct.op*, %struct.op** %left.addr, align 8
  %op_type165 = getelementptr inbounds %struct.op, %struct.op* %57, i32 0, i32 4
  %bf.load166 = load i16, i16* %op_type165, align 8
  %bf.clear167 = and i16 %bf.load166, 511
  %bf.cast168 = zext i16 %bf.clear167 to i32
  %cmp169 = icmp eq i32 %bf.cast168, 9
  br i1 %cmp169, label %if.then171, label %if.end172

if.then171:                                       ; preds = %if.then164
  store i8 0, i8* %maybe_common_vars, align 1
  br label %if.end172

if.end172:                                        ; preds = %if.then171, %if.then164
  %58 = load %struct.op*, %struct.op** %left.addr, align 8
  %op_private173 = getelementptr inbounds %struct.op, %struct.op* %58, i32 0, i32 6
  %59 = load i8, i8* %op_private173, align 1
  %conv174 = zext i8 %59 to i32
  %and175 = and i32 %conv174, 64
  %tobool176 = icmp ne i32 %and175, 0
  br i1 %tobool176, label %if.then177, label %if.end179

if.then177:                                       ; preds = %if.end172
  %call178 = call i32 @Perl_yyerror(i8* getelementptr inbounds ([70 x i8], [70 x i8]* @Perl_newASSIGNOP.no_list_state, i64 0, i64 0))
  br label %if.end179

if.end179:                                        ; preds = %if.then177, %if.end172
  br label %if.end180

if.end180:                                        ; preds = %if.end179, %lor.lhs.false157, %if.else131
  br label %if.end181

if.end181:                                        ; preds = %if.end180, %while.end
  %60 = load i8, i8* %maybe_common_vars, align 1
  %tobool182 = trunc i8 %60 to i1
  br i1 %tobool182, label %if.then183, label %if.end188

if.then183:                                       ; preds = %if.end181
  %61 = load %struct.op*, %struct.op** %o, align 8
  %op_private184 = getelementptr inbounds %struct.op, %struct.op* %61, i32 0, i32 6
  %62 = load i8, i8* %op_private184, align 1
  %conv185 = zext i8 %62 to i32
  %or186 = or i32 %conv185, 64
  %conv187 = trunc i32 %or186 to i8
  store i8 %conv187, i8* %op_private184, align 1
  br label %if.end188

if.end188:                                        ; preds = %if.then183, %if.end181
  %63 = load %struct.op*, %struct.op** %right.addr, align 8
  %tobool189 = icmp ne %struct.op* %63, null
  br i1 %tobool189, label %land.lhs.true190, label %if.end323

land.lhs.true190:                                 ; preds = %if.end188
  %64 = load %struct.op*, %struct.op** %right.addr, align 8
  %op_type191 = getelementptr inbounds %struct.op, %struct.op* %64, i32 0, i32 4
  %bf.load192 = load i16, i16* %op_type191, align 8
  %bf.clear193 = and i16 %bf.load192, 511
  %bf.cast194 = zext i16 %bf.clear193 to i32
  %cmp195 = icmp eq i32 %bf.cast194, 156
  br i1 %cmp195, label %land.lhs.true197, label %if.end323

land.lhs.true197:                                 ; preds = %land.lhs.true190
  %65 = load %struct.op*, %struct.op** %right.addr, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %65, i32 0, i32 5
  %66 = load i8, i8* %op_flags, align 2
  %conv198 = zext i8 %66 to i32
  %and199 = and i32 %conv198, 64
  %tobool200 = icmp ne i32 %and199, 0
  br i1 %tobool200, label %if.end323, label %if.then201

if.then201:                                       ; preds = %land.lhs.true197
  %67 = load %struct.op*, %struct.op** %right.addr, align 8
  %68 = bitcast %struct.op* %67 to %struct.listop*
  %op_first202 = getelementptr inbounds %struct.listop, %struct.listop* %68, i32 0, i32 7
  %69 = load %struct.op*, %struct.op** %op_first202, align 8
  store %struct.op* %69, %struct.op** %tmpop, align 8
  %70 = load %struct.op*, %struct.op** %tmpop, align 8
  %71 = bitcast %struct.op* %70 to %struct.pmop*
  store %struct.pmop* %71, %struct.pmop** %pm, align 8
  %72 = load %struct.pmop*, %struct.pmop** %pm, align 8
  %op_pmreplrootu = getelementptr inbounds %struct.pmop, %struct.pmop* %72, i32 0, i32 11
  %op_pmtargetgv = bitcast %union.anon.18* %op_pmreplrootu to %struct.gv**
  %73 = load %struct.gv*, %struct.gv** %op_pmtargetgv, align 8
  %tobool203 = icmp ne %struct.gv* %73, null
  br i1 %tobool203, label %if.end322, label %land.lhs.true204

land.lhs.true204:                                 ; preds = %if.then201
  %74 = load %struct.pmop*, %struct.pmop** %pm, align 8
  %op_targ205 = getelementptr inbounds %struct.pmop, %struct.pmop* %74, i32 0, i32 3
  %75 = load i64, i64* %op_targ205, align 8
  %tobool206 = icmp ne i64 %75, 0
  br i1 %tobool206, label %if.end322, label %if.then207

if.then207:                                       ; preds = %land.lhs.true204
  %76 = load %struct.op*, %struct.op** %left.addr, align 8
  %op_private208 = getelementptr inbounds %struct.op, %struct.op* %76, i32 0, i32 6
  %77 = load i8, i8* %op_private208, align 1
  %conv209 = zext i8 %77 to i32
  %and210 = and i32 %conv209, 128
  %tobool211 = icmp ne i32 %and210, 0
  br i1 %tobool211, label %if.else261, label %land.lhs.true212

land.lhs.true212:                                 ; preds = %if.then207
  %78 = load %struct.op*, %struct.op** %left.addr, align 8
  %op_type213 = getelementptr inbounds %struct.op, %struct.op* %78, i32 0, i32 4
  %bf.load214 = load i16, i16* %op_type213, align 8
  %bf.clear215 = and i16 %bf.load214, 511
  %bf.cast216 = zext i16 %bf.clear215 to i32
  %cmp217 = icmp eq i32 %bf.cast216, 135
  br i1 %cmp217, label %land.lhs.true219, label %lor.lhs.false227

land.lhs.true219:                                 ; preds = %land.lhs.true212
  %79 = load %struct.op*, %struct.op** %left.addr, align 8
  %80 = bitcast %struct.op* %79 to %struct.unop*
  %op_first220 = getelementptr inbounds %struct.unop, %struct.unop* %80, i32 0, i32 7
  %81 = load %struct.op*, %struct.op** %op_first220, align 8
  store %struct.op* %81, %struct.op** %tmpop, align 8
  %op_type221 = getelementptr inbounds %struct.op, %struct.op* %81, i32 0, i32 4
  %bf.load222 = load i16, i16* %op_type221, align 8
  %bf.clear223 = and i16 %bf.load222, 511
  %bf.cast224 = zext i16 %bf.clear223 to i32
  %cmp225 = icmp eq i32 %bf.cast224, 7
  br i1 %cmp225, label %if.then234, label %lor.lhs.false227

lor.lhs.false227:                                 ; preds = %land.lhs.true219, %land.lhs.true212
  %82 = load %struct.op*, %struct.op** %left.addr, align 8
  %op_type228 = getelementptr inbounds %struct.op, %struct.op* %82, i32 0, i32 4
  %bf.load229 = load i16, i16* %op_type228, align 8
  %bf.clear230 = and i16 %bf.load229, 511
  %bf.cast231 = zext i16 %bf.clear230 to i32
  %cmp232 = icmp eq i32 %bf.cast231, 10
  br i1 %cmp232, label %if.then234, label %if.else261

if.then234:                                       ; preds = %lor.lhs.false227, %land.lhs.true219
  %83 = load %struct.op*, %struct.op** %tmpop, align 8
  %84 = load %struct.pmop*, %struct.pmop** %pm, align 8
  %85 = bitcast %struct.pmop* %84 to %struct.op*
  %cmp235 = icmp ne %struct.op* %83, %85
  br i1 %cmp235, label %if.then237, label %if.else248

if.then237:                                       ; preds = %if.then234
  %86 = load %struct.op*, %struct.op** %tmpop, align 8
  %87 = bitcast %struct.op* %86 to %struct.svop*
  %op_sv = getelementptr inbounds %struct.svop, %struct.svop* %87, i32 0, i32 7
  %88 = load %struct.sv*, %struct.sv** %op_sv, align 8
  %89 = bitcast %struct.sv* %88 to i8*
  %90 = bitcast i8* %89 to %struct.gv*
  %91 = load %struct.pmop*, %struct.pmop** %pm, align 8
  %op_pmreplrootu238 = getelementptr inbounds %struct.pmop, %struct.pmop* %91, i32 0, i32 11
  %op_pmtargetgv239 = bitcast %union.anon.18* %op_pmreplrootu238 to %struct.gv**
  store %struct.gv* %90, %struct.gv** %op_pmtargetgv239, align 8
  %92 = load %struct.op*, %struct.op** %tmpop, align 8
  %93 = bitcast %struct.op* %92 to %struct.svop*
  %op_sv240 = getelementptr inbounds %struct.svop, %struct.svop* %93, i32 0, i32 7
  store %struct.sv* null, %struct.sv** %op_sv240, align 8
  %94 = load %struct.op*, %struct.op** %left.addr, align 8
  %op_private241 = getelementptr inbounds %struct.op, %struct.op* %94, i32 0, i32 6
  %95 = load i8, i8* %op_private241, align 1
  %conv242 = zext i8 %95 to i32
  %and243 = and i32 %conv242, 64
  %96 = load %struct.op*, %struct.op** %right.addr, align 8
  %op_private244 = getelementptr inbounds %struct.op, %struct.op* %96, i32 0, i32 6
  %97 = load i8, i8* %op_private244, align 1
  %conv245 = zext i8 %97 to i32
  %or246 = or i32 %conv245, %and243
  %conv247 = trunc i32 %or246 to i8
  store i8 %conv247, i8* %op_private244, align 1
  br label %if.end252

if.else248:                                       ; preds = %if.then234
  %98 = load %struct.op*, %struct.op** %left.addr, align 8
  %op_targ249 = getelementptr inbounds %struct.op, %struct.op* %98, i32 0, i32 3
  %99 = load i64, i64* %op_targ249, align 8
  %100 = load %struct.pmop*, %struct.pmop** %pm, align 8
  %op_targ250 = getelementptr inbounds %struct.pmop, %struct.pmop* %100, i32 0, i32 3
  store i64 %99, i64* %op_targ250, align 8
  %101 = load %struct.op*, %struct.op** %left.addr, align 8
  %op_targ251 = getelementptr inbounds %struct.op, %struct.op* %101, i32 0, i32 3
  store i64 0, i64* %op_targ251, align 8
  br label %if.end252

if.end252:                                        ; preds = %if.else248, %if.then237
  br label %detach_split

detach_split:                                     ; preds = %if.then275, %if.end252
  %102 = load %struct.op*, %struct.op** %o, align 8
  %103 = bitcast %struct.op* %102 to %struct.unop*
  %op_first253 = getelementptr inbounds %struct.unop, %struct.unop* %103, i32 0, i32 7
  %104 = load %struct.op*, %struct.op** %op_first253, align 8
  store %struct.op* %104, %struct.op** %tmpop, align 8
  %105 = load %struct.op*, %struct.op** %tmpop, align 8
  %106 = bitcast %struct.op* %105 to %struct.unop*
  %op_first254 = getelementptr inbounds %struct.unop, %struct.unop* %106, i32 0, i32 7
  %107 = load %struct.op*, %struct.op** %op_first254, align 8
  store %struct.op* %107, %struct.op** %tmpop, align 8
  %108 = load %struct.op*, %struct.op** %o, align 8
  %109 = bitcast %struct.op* %108 to %struct.unop*
  %op_first255 = getelementptr inbounds %struct.unop, %struct.unop* %109, i32 0, i32 7
  %110 = load %struct.op*, %struct.op** %op_first255, align 8
  %111 = load %struct.op*, %struct.op** %tmpop, align 8
  %call256 = call %struct.op* @Perl_op_sibling_splice(%struct.op* %110, %struct.op* %111, i32 -1, %struct.op* null)
  %112 = load %struct.op*, %struct.op** %o, align 8
  call void @Perl_op_free(%struct.op* %112)
  %113 = load %struct.op*, %struct.op** %right.addr, align 8
  %op_flags257 = getelementptr inbounds %struct.op, %struct.op* %113, i32 0, i32 5
  %114 = load i8, i8* %op_flags257, align 2
  %conv258 = zext i8 %114 to i32
  %and259 = and i32 %conv258, -4
  %conv260 = trunc i32 %and259 to i8
  store i8 %conv260, i8* %op_flags257, align 2
  %115 = load %struct.op*, %struct.op** %right.addr, align 8
  store %struct.op* %115, %struct.op** %retval, align 8
  br label %return

if.else261:                                       ; preds = %lor.lhs.false227, %if.then207
  %116 = load %struct.op*, %struct.op** %left.addr, align 8
  %op_type262 = getelementptr inbounds %struct.op, %struct.op* %116, i32 0, i32 4
  %bf.load263 = load i16, i16* %op_type262, align 8
  %bf.clear264 = and i16 %bf.load263, 511
  %bf.cast265 = zext i16 %bf.clear264 to i32
  %cmp266 = icmp eq i32 %bf.cast265, 135
  br i1 %cmp266, label %if.then275, label %lor.lhs.false268

lor.lhs.false268:                                 ; preds = %if.else261
  %117 = load %struct.op*, %struct.op** %left.addr, align 8
  %op_type269 = getelementptr inbounds %struct.op, %struct.op* %117, i32 0, i32 4
  %bf.load270 = load i16, i16* %op_type269, align 8
  %bf.clear271 = and i16 %bf.load270, 511
  %bf.cast272 = zext i16 %bf.clear271 to i32
  %cmp273 = icmp eq i32 %bf.cast272, 10
  br i1 %cmp273, label %if.then275, label %if.else285

if.then275:                                       ; preds = %lor.lhs.false268, %if.else261
  %118 = load %struct.op*, %struct.op** %o, align 8
  %119 = bitcast %struct.op* %118 to %struct.binop*
  %op_last = getelementptr inbounds %struct.binop, %struct.binop* %119, i32 0, i32 8
  %120 = load %struct.op*, %struct.op** %op_last, align 8
  %121 = load %struct.op*, %struct.op** %o, align 8
  %122 = bitcast %struct.op* %121 to %struct.binop*
  %op_last276 = getelementptr inbounds %struct.binop, %struct.binop* %122, i32 0, i32 8
  %123 = load %struct.op*, %struct.op** %op_last276, align 8
  %124 = bitcast %struct.op* %123 to %struct.unop*
  %op_first277 = getelementptr inbounds %struct.unop, %struct.unop* %124, i32 0, i32 7
  %125 = load %struct.op*, %struct.op** %op_first277, align 8
  %call278 = call %struct.op* @Perl_op_sibling_splice(%struct.op* %120, %struct.op* %125, i32 1, %struct.op* null)
  %126 = load %struct.op*, %struct.op** %right.addr, align 8
  %127 = load %struct.op*, %struct.op** %right.addr, align 8
  %128 = bitcast %struct.op* %127 to %struct.listop*
  %op_last279 = getelementptr inbounds %struct.listop, %struct.listop* %128, i32 0, i32 8
  %129 = load %struct.op*, %struct.op** %op_last279, align 8
  %130 = load %struct.op*, %struct.op** %left.addr, align 8
  %call280 = call %struct.op* @Perl_op_sibling_splice(%struct.op* %126, %struct.op* %129, i32 0, %struct.op* %130)
  %131 = load %struct.op*, %struct.op** %right.addr, align 8
  %op_flags281 = getelementptr inbounds %struct.op, %struct.op* %131, i32 0, i32 5
  %132 = load i8, i8* %op_flags281, align 2
  %conv282 = zext i8 %132 to i32
  %or283 = or i32 %conv282, 64
  %conv284 = trunc i32 %or283 to i8
  store i8 %conv284, i8* %op_flags281, align 2
  br label %detach_split

if.else285:                                       ; preds = %lor.lhs.false268
  %133 = load i32, i32* @PL_modcount, align 4
  %cmp286 = icmp slt i32 %133, 1073741823
  br i1 %cmp286, label %land.lhs.true288, label %if.end319

land.lhs.true288:                                 ; preds = %if.else285
  %134 = load %struct.op*, %struct.op** %right.addr, align 8
  %135 = bitcast %struct.op* %134 to %struct.listop*
  %op_last289 = getelementptr inbounds %struct.listop, %struct.listop* %135, i32 0, i32 8
  %136 = load %struct.op*, %struct.op** %op_last289, align 8
  %op_type290 = getelementptr inbounds %struct.op, %struct.op* %136, i32 0, i32 4
  %bf.load291 = load i16, i16* %op_type290, align 8
  %bf.clear292 = and i16 %bf.load291, 511
  %bf.cast293 = zext i16 %bf.clear292 to i32
  %cmp294 = icmp eq i32 %bf.cast293, 5
  br i1 %cmp294, label %if.then296, label %if.end319

if.then296:                                       ; preds = %land.lhs.true288
  %137 = load %struct.op*, %struct.op** %right.addr, align 8
  %138 = bitcast %struct.op* %137 to %struct.listop*
  %op_last297 = getelementptr inbounds %struct.listop, %struct.listop* %138, i32 0, i32 8
  %139 = load %struct.op*, %struct.op** %op_last297, align 8
  %140 = bitcast %struct.op* %139 to %struct.svop*
  %op_sv298 = getelementptr inbounds %struct.svop, %struct.svop* %140, i32 0, i32 7
  store %struct.sv** %op_sv298, %struct.sv*** %svp, align 8
  %141 = load %struct.sv**, %struct.sv*** %svp, align 8
  %142 = load %struct.sv*, %struct.sv** %141, align 8
  store %struct.sv* %142, %struct.sv** %sv, align 8
  %143 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %143, i32 0, i32 2
  %144 = load i32, i32* %sv_flags, align 4
  %and299 = and i32 %144, 256
  %tobool300 = icmp ne i32 %and299, 0
  br i1 %tobool300, label %land.lhs.true301, label %if.end318

land.lhs.true301:                                 ; preds = %if.then296
  %145 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %145, i32 0, i32 0
  %146 = load i8*, i8** %sv_any, align 8
  %147 = bitcast i8* %146 to %struct.xpviv*
  %xiv_u = getelementptr inbounds %struct.xpviv, %struct.xpviv* %147, i32 0, i32 4
  %xivu_iv = bitcast %union._xivu* %xiv_u to i64*
  %148 = load i64, i64* %xivu_iv, align 8
  %cmp302 = icmp eq i64 %148, 0
  br i1 %cmp302, label %if.then304, label %if.end318

if.then304:                                       ; preds = %land.lhs.true301
  %149 = load %struct.op*, %struct.op** %right.addr, align 8
  %op_private305 = getelementptr inbounds %struct.op, %struct.op* %149, i32 0, i32 6
  %150 = load i8, i8* %op_private305, align 1
  %conv306 = zext i8 %150 to i32
  %and307 = and i32 %conv306, 128
  %tobool308 = icmp ne i32 %and307, 0
  br i1 %tobool308, label %if.then309, label %if.else313

if.then309:                                       ; preds = %if.then304
  %151 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags310 = getelementptr inbounds %struct.sv, %struct.sv* %151, i32 0, i32 2
  %152 = load i32, i32* %sv_flags310, align 4
  %and311 = and i32 %152, -134283265
  store i32 %and311, i32* %sv_flags310, align 4
  %153 = load %struct.sv*, %struct.sv** %sv, align 8
  %154 = load i32, i32* @PL_modcount, align 4
  %add = add nsw i32 %154, 1
  %conv312 = sext i32 %add to i64
  call void @Perl_sv_setiv(%struct.sv* %153, i64 %conv312)
  br label %if.end317

if.else313:                                       ; preds = %if.then304
  %155 = load %struct.sv*, %struct.sv** %sv, align 8
  %156 = bitcast %struct.sv* %155 to i8*
  %157 = bitcast i8* %156 to %struct.sv*
  call void @S_SvREFCNT_dec(%struct.sv* %157)
  %158 = load i32, i32* @PL_modcount, align 4
  %add314 = add nsw i32 %158, 1
  %conv315 = sext i32 %add314 to i64
  %call316 = call %struct.sv* @Perl_newSViv(i64 %conv315)
  %159 = load %struct.sv**, %struct.sv*** %svp, align 8
  store %struct.sv* %call316, %struct.sv** %159, align 8
  br label %if.end317

if.end317:                                        ; preds = %if.else313, %if.then309
  br label %if.end318

if.end318:                                        ; preds = %if.end317, %land.lhs.true301, %if.then296
  br label %if.end319

if.end319:                                        ; preds = %if.end318, %land.lhs.true288, %if.else285
  br label %if.end320

if.end320:                                        ; preds = %if.end319
  br label %if.end321

if.end321:                                        ; preds = %if.end320
  br label %if.end322

if.end322:                                        ; preds = %if.end321, %land.lhs.true204, %if.then201
  br label %if.end323

if.end323:                                        ; preds = %if.end322, %land.lhs.true197, %land.lhs.true190, %if.end188
  %160 = load %struct.op*, %struct.op** %o, align 8
  store %struct.op* %160, %struct.op** %retval, align 8
  br label %return

if.end324:                                        ; preds = %if.end
  %161 = load i32, i32* %assign_type, align 4
  %cmp325 = icmp eq i32 %161, 2
  br i1 %cmp325, label %if.then327, label %if.end330

if.then327:                                       ; preds = %if.end324
  %162 = load i32, i32* %flags.addr, align 4
  %163 = load %struct.op*, %struct.op** %right.addr, align 8
  %call328 = call %struct.op* @Perl_scalar(%struct.op* %163)
  %164 = load %struct.op*, %struct.op** %left.addr, align 8
  %call329 = call %struct.op* @Perl_newBINOP(i32 391, i32 %162, %struct.op* %call328, %struct.op* %164)
  store %struct.op* %call329, %struct.op** %retval, align 8
  br label %return

if.end330:                                        ; preds = %if.end324
  %165 = load %struct.op*, %struct.op** %right.addr, align 8
  %tobool331 = icmp ne %struct.op* %165, null
  br i1 %tobool331, label %if.end334, label %if.then332

if.then332:                                       ; preds = %if.end330
  %call333 = call %struct.op* @Perl_newOP(i32 44, i32 0)
  store %struct.op* %call333, %struct.op** %right.addr, align 8
  br label %if.end334

if.end334:                                        ; preds = %if.then332, %if.end330
  %166 = load %struct.op*, %struct.op** %right.addr, align 8
  %op_type335 = getelementptr inbounds %struct.op, %struct.op* %166, i32 0, i32 4
  %bf.load336 = load i16, i16* %op_type335, align 8
  %bf.clear337 = and i16 %bf.load336, 511
  %bf.cast338 = zext i16 %bf.clear337 to i32
  %cmp339 = icmp eq i32 %bf.cast338, 26
  br i1 %cmp339, label %if.then341, label %if.else350

if.then341:                                       ; preds = %if.end334
  %167 = load %struct.op*, %struct.op** %right.addr, align 8
  %op_flags342 = getelementptr inbounds %struct.op, %struct.op* %167, i32 0, i32 5
  %168 = load i8, i8* %op_flags342, align 2
  %conv343 = zext i8 %168 to i32
  %or344 = or i32 %conv343, 64
  %conv345 = trunc i32 %or344 to i8
  store i8 %conv345, i8* %op_flags342, align 2
  %169 = load i32, i32* %flags.addr, align 4
  %170 = load %struct.op*, %struct.op** %left.addr, align 8
  %call346 = call %struct.op* @Perl_scalar(%struct.op* %170)
  %call347 = call %struct.op* @Perl_op_lvalue_flags(%struct.op* %call346, i32 37, i32 0)
  %171 = load %struct.op*, %struct.op** %right.addr, align 8
  %call348 = call %struct.op* @Perl_scalar(%struct.op* %171)
  %call349 = call %struct.op* @Perl_newBINOP(i32 0, i32 %169, %struct.op* %call347, %struct.op* %call348)
  store %struct.op* %call349, %struct.op** %retval, align 8
  br label %return

if.else350:                                       ; preds = %if.end334
  %172 = load i32, i32* %flags.addr, align 4
  %173 = load %struct.op*, %struct.op** %right.addr, align 8
  %call351 = call %struct.op* @Perl_scalar(%struct.op* %173)
  %174 = load %struct.op*, %struct.op** %left.addr, align 8
  %call352 = call %struct.op* @Perl_scalar(%struct.op* %174)
  %call353 = call %struct.op* @Perl_op_lvalue_flags(%struct.op* %call352, i32 37, i32 0)
  %call354 = call %struct.op* @Perl_newBINOP(i32 37, i32 %172, %struct.op* %call351, %struct.op* %call353)
  store %struct.op* %call354, %struct.op** %o, align 8
  br label %if.end355

if.end355:                                        ; preds = %if.else350
  %175 = load %struct.op*, %struct.op** %o, align 8
  store %struct.op* %175, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %if.end355, %if.then341, %if.then327, %if.end323, %detach_split, %if.else, %if.then4
  %176 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %176
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_newLOGOP(i32 %type, i32 %flags, %struct.op* %first, %struct.op* %other) #0 {
entry:
  %type.addr = alloca i32, align 4
  %flags.addr = alloca i32, align 4
  %first.addr = alloca %struct.op*, align 8
  %other.addr = alloca %struct.op*, align 8
  store i32 %type, i32* %type.addr, align 4
  store i32 %flags, i32* %flags.addr, align 4
  store %struct.op* %first, %struct.op** %first.addr, align 8
  store %struct.op* %other, %struct.op** %other.addr, align 8
  %0 = load i32, i32* %type.addr, align 4
  %1 = load i32, i32* %flags.addr, align 4
  %call = call %struct.op* @S_new_logop(i32 %0, i32 %1, %struct.op** %first.addr, %struct.op** %other.addr)
  ret %struct.op* %call
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @S_assignment_type(%struct.op* %o) #0 {
entry:
  %retval = alloca i32, align 4
  %o.addr = alloca %struct.op*, align 8
  %type = alloca i32, align 4
  %flags = alloca i8, align 1
  %ret = alloca i8, align 1
  %sib = alloca %struct.op*, align 8
  %t = alloca i32, align 4
  %f = alloca i32, align 4
  %kid = alloca %struct.op*, align 8
  store %struct.op* %o, %struct.op** %o.addr, align 8
  %0 = load %struct.op*, %struct.op** %o.addr, align 8
  %tobool = icmp ne %struct.op* %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i32 1, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type = getelementptr inbounds %struct.op, %struct.op* %1, i32 0, i32 4
  %bf.load = load i16, i16* %op_type, align 8
  %bf.clear = and i16 %bf.load, 511
  %bf.cast = zext i16 %bf.clear to i32
  %cmp = icmp eq i32 %bf.cast, 0
  br i1 %cmp, label %land.lhs.true, label %if.end3

land.lhs.true:                                    ; preds = %if.end
  %2 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %2, i32 0, i32 5
  %3 = load i8, i8* %op_flags, align 2
  %conv = zext i8 %3 to i32
  %and = and i32 %conv, 4
  %tobool1 = icmp ne i32 %and, 0
  br i1 %tobool1, label %if.then2, label %if.end3

if.then2:                                         ; preds = %land.lhs.true
  %4 = load %struct.op*, %struct.op** %o.addr, align 8
  %5 = bitcast %struct.op* %4 to %struct.unop*
  %op_first = getelementptr inbounds %struct.unop, %struct.unop* %5, i32 0, i32 7
  %6 = load %struct.op*, %struct.op** %op_first, align 8
  store %struct.op* %6, %struct.op** %o.addr, align 8
  br label %if.end3

if.end3:                                          ; preds = %if.then2, %land.lhs.true, %if.end
  %7 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_flags4 = getelementptr inbounds %struct.op, %struct.op* %7, i32 0, i32 5
  %8 = load i8, i8* %op_flags4, align 2
  store i8 %8, i8* %flags, align 1
  %9 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type5 = getelementptr inbounds %struct.op, %struct.op* %9, i32 0, i32 4
  %bf.load6 = load i16, i16* %op_type5, align 8
  %bf.clear7 = and i16 %bf.load6, 511
  %bf.cast8 = zext i16 %bf.clear7 to i32
  store i32 %bf.cast8, i32* %type, align 4
  %10 = load i32, i32* %type, align 4
  %cmp9 = icmp eq i32 %10, 180
  br i1 %cmp9, label %if.then11, label %if.end31

if.then11:                                        ; preds = %if.end3
  %11 = load %struct.op*, %struct.op** %o.addr, align 8
  %12 = bitcast %struct.op* %11 to %struct.logop*
  %op_first12 = getelementptr inbounds %struct.logop, %struct.logop* %12, i32 0, i32 7
  %13 = load %struct.op*, %struct.op** %op_first12, align 8
  %op_sibling = getelementptr inbounds %struct.op, %struct.op* %13, i32 0, i32 1
  %14 = load %struct.op*, %struct.op** %op_sibling, align 8
  %add.ptr = getelementptr inbounds %struct.op, %struct.op* %14, i64 0
  store %struct.op* %add.ptr, %struct.op** %sib, align 8
  %15 = load %struct.op*, %struct.op** %sib, align 8
  %call = call i32 @S_assignment_type(%struct.op* %15)
  store i32 %call, i32* %t, align 4
  %16 = load %struct.op*, %struct.op** %sib, align 8
  %op_sibling13 = getelementptr inbounds %struct.op, %struct.op* %16, i32 0, i32 1
  %17 = load %struct.op*, %struct.op** %op_sibling13, align 8
  %add.ptr14 = getelementptr inbounds %struct.op, %struct.op* %17, i64 0
  %call15 = call i32 @S_assignment_type(%struct.op* %add.ptr14)
  store i32 %call15, i32* %f, align 4
  %18 = load i32, i32* %t, align 4
  %cmp16 = icmp eq i32 %18, 1
  br i1 %cmp16, label %land.lhs.true18, label %if.end22

land.lhs.true18:                                  ; preds = %if.then11
  %19 = load i32, i32* %f, align 4
  %cmp19 = icmp eq i32 %19, 1
  br i1 %cmp19, label %if.then21, label %if.end22

if.then21:                                        ; preds = %land.lhs.true18
  store i32 1, i32* %retval, align 4
  br label %return

if.end22:                                         ; preds = %land.lhs.true18, %if.then11
  %20 = load i32, i32* %t, align 4
  %cmp23 = icmp eq i32 %20, 1
  %conv24 = zext i1 %cmp23 to i32
  %21 = load i32, i32* %f, align 4
  %cmp25 = icmp eq i32 %21, 1
  %conv26 = zext i1 %cmp25 to i32
  %xor = xor i32 %conv24, %conv26
  %tobool27 = icmp ne i32 %xor, 0
  br i1 %tobool27, label %if.then28, label %if.end30

if.then28:                                        ; preds = %if.end22
  %call29 = call i32 @Perl_yyerror(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.186, i64 0, i64 0))
  br label %if.end30

if.end30:                                         ; preds = %if.then28, %if.end22
  store i32 0, i32* %retval, align 4
  br label %return

if.end31:                                         ; preds = %if.end3
  %22 = load i32, i32* %type, align 4
  %cmp32 = icmp eq i32 %22, 21
  br i1 %cmp32, label %if.then34, label %if.else

if.then34:                                        ; preds = %if.end31
  %23 = load %struct.op*, %struct.op** %o.addr, align 8
  %24 = bitcast %struct.op* %23 to %struct.unop*
  %op_first35 = getelementptr inbounds %struct.unop, %struct.unop* %24, i32 0, i32 7
  %25 = load %struct.op*, %struct.op** %op_first35, align 8
  %26 = bitcast %struct.op* %25 to %struct.unop*
  %op_first36 = getelementptr inbounds %struct.unop, %struct.unop* %26, i32 0, i32 7
  %27 = load %struct.op*, %struct.op** %op_first36, align 8
  store %struct.op* %27, %struct.op** %kid, align 8
  %28 = load %struct.op*, %struct.op** %kid, align 8
  %op_type37 = getelementptr inbounds %struct.op, %struct.op* %28, i32 0, i32 4
  %bf.load38 = load i16, i16* %op_type37, align 8
  %bf.clear39 = and i16 %bf.load38, 511
  %bf.cast40 = zext i16 %bf.clear39 to i32
  store i32 %bf.cast40, i32* %type, align 4
  %29 = load %struct.op*, %struct.op** %kid, align 8
  %op_flags41 = getelementptr inbounds %struct.op, %struct.op* %29, i32 0, i32 5
  %30 = load i8, i8* %op_flags41, align 2
  %conv42 = zext i8 %30 to i32
  %31 = load i8, i8* %flags, align 1
  %conv43 = zext i8 %31 to i32
  %or = or i32 %conv43, %conv42
  %conv44 = trunc i32 %or to i8
  store i8 %conv44, i8* %flags, align 1
  %32 = load i8, i8* %flags, align 1
  %conv45 = zext i8 %32 to i32
  %and46 = and i32 %conv45, 8
  %tobool47 = icmp ne i32 %and46, 0
  br i1 %tobool47, label %if.end76, label %land.lhs.true48

land.lhs.true48:                                  ; preds = %if.then34
  %33 = load %struct.op*, %struct.op** %kid, align 8
  %op_type49 = getelementptr inbounds %struct.op, %struct.op* %33, i32 0, i32 4
  %bf.load50 = load i16, i16* %op_type49, align 8
  %bf.clear51 = and i16 %bf.load50, 511
  %bf.cast52 = zext i16 %bf.clear51 to i32
  %cmp53 = icmp eq i32 %bf.cast52, 135
  br i1 %cmp53, label %if.then75, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true48
  %34 = load %struct.op*, %struct.op** %kid, align 8
  %op_type55 = getelementptr inbounds %struct.op, %struct.op* %34, i32 0, i32 4
  %bf.load56 = load i16, i16* %op_type55, align 8
  %bf.clear57 = and i16 %bf.load56, 511
  %bf.cast58 = zext i16 %bf.clear57 to i32
  %cmp59 = icmp eq i32 %bf.cast58, 10
  br i1 %cmp59, label %if.then75, label %lor.lhs.false61

lor.lhs.false61:                                  ; preds = %lor.lhs.false
  %35 = load %struct.op*, %struct.op** %kid, align 8
  %op_type62 = getelementptr inbounds %struct.op, %struct.op* %35, i32 0, i32 4
  %bf.load63 = load i16, i16* %op_type62, align 8
  %bf.clear64 = and i16 %bf.load63, 511
  %bf.cast65 = zext i16 %bf.clear64 to i32
  %cmp66 = icmp eq i32 %bf.cast65, 149
  br i1 %cmp66, label %if.then75, label %lor.lhs.false68

lor.lhs.false68:                                  ; preds = %lor.lhs.false61
  %36 = load %struct.op*, %struct.op** %kid, align 8
  %op_type69 = getelementptr inbounds %struct.op, %struct.op* %36, i32 0, i32 4
  %bf.load70 = load i16, i16* %op_type69, align 8
  %bf.clear71 = and i16 %bf.load70, 511
  %bf.cast72 = zext i16 %bf.clear71 to i32
  %cmp73 = icmp eq i32 %bf.cast72, 11
  br i1 %cmp73, label %if.then75, label %if.end76

if.then75:                                        ; preds = %lor.lhs.false68, %lor.lhs.false61, %lor.lhs.false, %land.lhs.true48
  store i32 2, i32* %retval, align 4
  br label %return

if.end76:                                         ; preds = %lor.lhs.false68, %if.then34
  store i8 2, i8* %ret, align 1
  br label %if.end77

if.else:                                          ; preds = %if.end31
  store i8 0, i8* %ret, align 1
  br label %if.end77

if.end77:                                         ; preds = %if.else, %if.end76
  %37 = load i32, i32* %type, align 4
  %cmp78 = icmp eq i32 %37, 158
  br i1 %cmp78, label %land.lhs.true80, label %if.end91

land.lhs.true80:                                  ; preds = %if.end77
  %38 = load i8, i8* %flags, align 1
  %conv81 = zext i8 %38 to i32
  %and82 = and i32 %conv81, 3
  %cmp83 = icmp eq i32 %and82, 2
  br i1 %cmp83, label %land.lhs.true85, label %if.end91

land.lhs.true85:                                  ; preds = %land.lhs.true80
  %39 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_private = getelementptr inbounds %struct.op, %struct.op* %39, i32 0, i32 6
  %40 = load i8, i8* %op_private, align 1
  %conv86 = zext i8 %40 to i32
  %and87 = and i32 %conv86, 128
  %tobool88 = icmp ne i32 %and87, 0
  br i1 %tobool88, label %if.then89, label %if.end91

if.then89:                                        ; preds = %land.lhs.true85
  %41 = load i8, i8* %ret, align 1
  %conv90 = zext i8 %41 to i32
  store i32 %conv90, i32* %retval, align 4
  br label %return

if.end91:                                         ; preds = %land.lhs.true85, %land.lhs.true80, %if.end77
  %42 = load i32, i32* %type, align 4
  %cmp92 = icmp eq i32 %42, 158
  br i1 %cmp92, label %if.then119, label %lor.lhs.false94

lor.lhs.false94:                                  ; preds = %if.end91
  %43 = load i8, i8* %flags, align 1
  %conv95 = zext i8 %43 to i32
  %and96 = and i32 %conv95, 8
  %tobool97 = icmp ne i32 %and96, 0
  br i1 %tobool97, label %if.then119, label %lor.lhs.false98

lor.lhs.false98:                                  ; preds = %lor.lhs.false94
  %44 = load i32, i32* %type, align 4
  %cmp99 = icmp eq i32 %44, 135
  br i1 %cmp99, label %if.then119, label %lor.lhs.false101

lor.lhs.false101:                                 ; preds = %lor.lhs.false98
  %45 = load i32, i32* %type, align 4
  %cmp102 = icmp eq i32 %45, 149
  br i1 %cmp102, label %if.then119, label %lor.lhs.false104

lor.lhs.false104:                                 ; preds = %lor.lhs.false101
  %46 = load i32, i32* %type, align 4
  %cmp105 = icmp eq i32 %46, 139
  br i1 %cmp105, label %if.then119, label %lor.lhs.false107

lor.lhs.false107:                                 ; preds = %lor.lhs.false104
  %47 = load i32, i32* %type, align 4
  %cmp108 = icmp eq i32 %47, 151
  br i1 %cmp108, label %if.then119, label %lor.lhs.false110

lor.lhs.false110:                                 ; preds = %lor.lhs.false107
  %48 = load i32, i32* %type, align 4
  %cmp111 = icmp eq i32 %48, 140
  br i1 %cmp111, label %if.then119, label %lor.lhs.false113

lor.lhs.false113:                                 ; preds = %lor.lhs.false110
  %49 = load i32, i32* %type, align 4
  %cmp114 = icmp eq i32 %49, 152
  br i1 %cmp114, label %if.then119, label %lor.lhs.false116

lor.lhs.false116:                                 ; preds = %lor.lhs.false113
  %50 = load i32, i32* %type, align 4
  %cmp117 = icmp eq i32 %50, 20
  br i1 %cmp117, label %if.then119, label %if.end120

if.then119:                                       ; preds = %lor.lhs.false116, %lor.lhs.false113, %lor.lhs.false110, %lor.lhs.false107, %lor.lhs.false104, %lor.lhs.false101, %lor.lhs.false98, %lor.lhs.false94, %if.end91
  store i32 1, i32* %retval, align 4
  br label %return

if.end120:                                        ; preds = %lor.lhs.false116
  %51 = load i32, i32* %type, align 4
  %cmp121 = icmp eq i32 %51, 10
  br i1 %cmp121, label %if.then126, label %lor.lhs.false123

lor.lhs.false123:                                 ; preds = %if.end120
  %52 = load i32, i32* %type, align 4
  %cmp124 = icmp eq i32 %52, 11
  br i1 %cmp124, label %if.then126, label %if.end127

if.then126:                                       ; preds = %lor.lhs.false123, %if.end120
  store i32 1, i32* %retval, align 4
  br label %return

if.end127:                                        ; preds = %lor.lhs.false123
  %53 = load i32, i32* %type, align 4
  %cmp128 = icmp eq i32 %53, 15
  br i1 %cmp128, label %if.then130, label %if.end132

if.then130:                                       ; preds = %if.end127
  %54 = load i8, i8* %ret, align 1
  %conv131 = zext i8 %54 to i32
  store i32 %conv131, i32* %retval, align 4
  br label %return

if.end132:                                        ; preds = %if.end127
  %55 = load i8, i8* %ret, align 1
  %conv133 = zext i8 %55 to i32
  store i32 %conv133, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end132, %if.then130, %if.then126, %if.then119, %if.then89, %if.then75, %if.end30, %if.then21, %if.then
  %56 = load i32, i32* %retval, align 4
  ret i32 %56
}

declare dso_local void @Perl_sv_setiv(%struct.sv*, i64) #3

declare dso_local i32 @Perl_intro_my() #3

declare dso_local %struct.refcounted_he* @Perl_refcounted_he_inc(%struct.refcounted_he*) #3

declare dso_local void @Perl_cop_store_label(%struct.cop*, i8*, i64, i32) #3

declare dso_local %struct.sv** @Perl_av_fetch(%struct.av*, i64, i32) #3

; Function Attrs: noinline nounwind uwtable
define internal %struct.op* @S_new_logop(i32 %type, i32 %flags, %struct.op** %firstp, %struct.op** %otherp) #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %type.addr = alloca i32, align 4
  %flags.addr = alloca i32, align 4
  %firstp.addr = alloca %struct.op**, align 8
  %otherp.addr = alloca %struct.op**, align 8
  %logop = alloca %struct.logop*, align 8
  %o = alloca %struct.op*, align 8
  %first = alloca %struct.op*, align 8
  %other = alloca %struct.op*, align 8
  %cstop = alloca %struct.op*, align 8
  %prepend_not = alloca i32, align 4
  %o2 = alloca %struct.op*, align 8
  %k1 = alloca %struct.op*, align 8
  %k2 = alloca %struct.op*, align 8
  %warnop = alloca i16, align 2
  %oldline = alloca i32, align 4
  store i32 %type, i32* %type.addr, align 4
  store i32 %flags, i32* %flags.addr, align 4
  store %struct.op** %firstp, %struct.op*** %firstp.addr, align 8
  store %struct.op** %otherp, %struct.op*** %otherp.addr, align 8
  store %struct.op* null, %struct.op** %cstop, align 8
  store i32 0, i32* %prepend_not, align 4
  %0 = load %struct.op**, %struct.op*** %firstp.addr, align 8
  %1 = load %struct.op*, %struct.op** %0, align 8
  store %struct.op* %1, %struct.op** %first, align 8
  %2 = load %struct.op**, %struct.op*** %otherp.addr, align 8
  %3 = load %struct.op*, %struct.op** %2, align 8
  store %struct.op* %3, %struct.op** %other, align 8
  %4 = load %struct.op*, %struct.op** %first, align 8
  %op_type = getelementptr inbounds %struct.op, %struct.op* %4, i32 0, i32 4
  %bf.load = load i16, i16* %op_type, align 8
  %bf.clear = and i16 %bf.load, 511
  %bf.cast = zext i16 %bf.clear to i32
  switch i32 %bf.cast, label %sw.epilog [
    i32 205, label %sw.bb
    i32 204, label %sw.bb
    i32 206, label %sw.bb
    i32 203, label %sw.bb
    i32 209, label %sw.bb
    i32 190, label %sw.bb
    i32 208, label %sw.bb
  ]

sw.bb:                                            ; preds = %entry, %entry, %entry, %entry, %entry, %entry, %entry
  %5 = load %struct.op*, %struct.op** %first, align 8
  %op_folded = getelementptr inbounds %struct.op, %struct.op* %5, i32 0, i32 4
  %bf.load1 = load i16, i16* %op_folded, align 8
  %bf.lshr = lshr i16 %bf.load1, 13
  %bf.clear2 = and i16 %bf.lshr, 1
  %bf.cast3 = zext i16 %bf.clear2 to i32
  %tobool = icmp ne i32 %bf.cast3, 0
  br i1 %tobool, label %if.end, label %land.lhs.true

land.lhs.true:                                    ; preds = %sw.bb
  %6 = load %struct.op*, %struct.op** %first, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %6, i32 0, i32 5
  %7 = load i8, i8* %op_flags, align 2
  %conv = zext i8 %7 to i32
  %and = and i32 %conv, 8
  %tobool4 = icmp ne i32 %and, 0
  br i1 %tobool4, label %if.end, label %if.then

if.then:                                          ; preds = %land.lhs.true
  call void (i32, i8*, ...) @Perl_ck_warner(i32 28, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.187, i64 0, i64 0))
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %sw.bb
  br label %sw.epilog

sw.epilog:                                        ; preds = %entry, %if.end
  %8 = load i32, i32* %type.addr, align 4
  %cmp = icmp eq i32 %8, 178
  br i1 %cmp, label %if.then6, label %if.end9

if.then6:                                         ; preds = %sw.epilog
  %9 = load i32, i32* %type.addr, align 4
  %10 = load i32, i32* %flags.addr, align 4
  %11 = load %struct.op*, %struct.op** %first, align 8
  %call = call %struct.op* @Perl_scalar(%struct.op* %11)
  %12 = load %struct.op*, %struct.op** %other, align 8
  %call7 = call %struct.op* @Perl_scalar(%struct.op* %12)
  %call8 = call %struct.op* @Perl_newBINOP(i32 %9, i32 %10, %struct.op* %call, %struct.op* %call7)
  store %struct.op* %call8, %struct.op** %retval, align 8
  br label %return

if.end9:                                          ; preds = %sw.epilog
  %13 = load %struct.op*, %struct.op** %first, align 8
  %call10 = call %struct.op* @S_scalarboolean(%struct.op* %13)
  %14 = load %struct.op*, %struct.op** %first, align 8
  %op_type11 = getelementptr inbounds %struct.op, %struct.op* %14, i32 0, i32 4
  %bf.load12 = load i16, i16* %op_type11, align 8
  %bf.clear13 = and i16 %bf.load12, 511
  %bf.cast14 = zext i16 %bf.clear13 to i32
  %cmp15 = icmp eq i32 %bf.cast14, 103
  br i1 %cmp15, label %land.lhs.true17, label %if.end53

land.lhs.true17:                                  ; preds = %if.end9
  %15 = load %struct.op*, %struct.op** %first, align 8
  %op_flags18 = getelementptr inbounds %struct.op, %struct.op* %15, i32 0, i32 5
  %16 = load i8, i8* %op_flags18, align 2
  %conv19 = zext i8 %16 to i32
  %and20 = and i32 %conv19, 4
  %tobool21 = icmp ne i32 %and20, 0
  br i1 %tobool21, label %land.lhs.true22, label %if.end53

land.lhs.true22:                                  ; preds = %land.lhs.true17
  %17 = load %struct.op*, %struct.op** %first, align 8
  %op_flags23 = getelementptr inbounds %struct.op, %struct.op* %17, i32 0, i32 5
  %18 = load i8, i8* %op_flags23, align 2
  %conv24 = zext i8 %18 to i32
  %and25 = and i32 %conv24, 128
  %tobool26 = icmp ne i32 %and25, 0
  br i1 %tobool26, label %if.then33, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true22
  %19 = load %struct.op*, %struct.op** %other, align 8
  %op_type27 = getelementptr inbounds %struct.op, %struct.op* %19, i32 0, i32 4
  %bf.load28 = load i16, i16* %op_type27, align 8
  %bf.clear29 = and i16 %bf.load28, 511
  %bf.cast30 = zext i16 %bf.clear29 to i32
  %cmp31 = icmp eq i32 %bf.cast30, 103
  br i1 %cmp31, label %if.then33, label %if.end53

if.then33:                                        ; preds = %lor.lhs.false, %land.lhs.true22
  %20 = load i32, i32* %type.addr, align 4
  %cmp34 = icmp eq i32 %20, 176
  br i1 %cmp34, label %if.then39, label %lor.lhs.false36

lor.lhs.false36:                                  ; preds = %if.then33
  %21 = load i32, i32* %type.addr, align 4
  %cmp37 = icmp eq i32 %21, 177
  br i1 %cmp37, label %if.then39, label %if.end52

if.then39:                                        ; preds = %lor.lhs.false36, %if.then33
  %22 = load i32, i32* %type.addr, align 4
  %cmp40 = icmp eq i32 %22, 176
  br i1 %cmp40, label %if.then42, label %if.else

if.then42:                                        ; preds = %if.then39
  store i32 177, i32* %type.addr, align 4
  br label %if.end43

if.else:                                          ; preds = %if.then39
  store i32 176, i32* %type.addr, align 4
  br label %if.end43

if.end43:                                         ; preds = %if.else, %if.then42
  %23 = load %struct.op*, %struct.op** %first, align 8
  call void @Perl_op_null(%struct.op* %23)
  %24 = load %struct.op*, %struct.op** %other, align 8
  %op_type44 = getelementptr inbounds %struct.op, %struct.op* %24, i32 0, i32 4
  %bf.load45 = load i16, i16* %op_type44, align 8
  %bf.clear46 = and i16 %bf.load45, 511
  %bf.cast47 = zext i16 %bf.clear46 to i32
  %cmp48 = icmp eq i32 %bf.cast47, 103
  br i1 %cmp48, label %if.then50, label %if.end51

if.then50:                                        ; preds = %if.end43
  %25 = load %struct.op*, %struct.op** %other, align 8
  call void @Perl_op_null(%struct.op* %25)
  store i32 1, i32* %prepend_not, align 4
  br label %if.end51

if.end51:                                         ; preds = %if.then50, %if.end43
  br label %if.end52

if.end52:                                         ; preds = %if.end51, %lor.lhs.false36
  br label %if.end53

if.end53:                                         ; preds = %if.end52, %lor.lhs.false, %land.lhs.true17, %if.end9
  %26 = load %struct.op*, %struct.op** %first, align 8
  %call54 = call %struct.op* @S_search_const(%struct.op* %26)
  store %struct.op* %call54, %struct.op** %cstop, align 8
  %tobool55 = icmp ne %struct.op* %call54, null
  br i1 %tobool55, label %if.then56, label %if.else404

if.then56:                                        ; preds = %if.end53
  %27 = load %struct.op*, %struct.op** %cstop, align 8
  %op_private = getelementptr inbounds %struct.op, %struct.op* %27, i32 0, i32 6
  %28 = load i8, i8* %op_private, align 1
  %conv57 = zext i8 %28 to i32
  %and58 = and i32 %conv57, 8
  %tobool59 = icmp ne i32 %and58, 0
  br i1 %tobool59, label %if.then60, label %if.else61

if.then60:                                        ; preds = %if.then56
  %29 = load %struct.op*, %struct.op** %cstop, align 8
  call void @S_no_bareword_allowed(%struct.op* %29)
  br label %if.end68

if.else61:                                        ; preds = %if.then56
  %30 = load %struct.op*, %struct.op** %cstop, align 8
  %op_private62 = getelementptr inbounds %struct.op, %struct.op* %30, i32 0, i32 6
  %31 = load i8, i8* %op_private62, align 1
  %conv63 = zext i8 %31 to i32
  %and64 = and i32 %conv63, 64
  %tobool65 = icmp ne i32 %and64, 0
  br i1 %tobool65, label %if.then66, label %if.end67

if.then66:                                        ; preds = %if.else61
  call void (i32, i8*, ...) @Perl_ck_warner(i32 30, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.188, i64 0, i64 0))
  br label %if.end67

if.end67:                                         ; preds = %if.then66, %if.else61
  br label %if.end68

if.end68:                                         ; preds = %if.end67, %if.then60
  %32 = load i32, i32* %type.addr, align 4
  %cmp69 = icmp eq i32 %32, 176
  br i1 %cmp69, label %land.lhs.true71, label %lor.lhs.false159

land.lhs.true71:                                  ; preds = %if.end68
  %33 = load %struct.op*, %struct.op** %cstop, align 8
  %34 = bitcast %struct.op* %33 to %struct.svop*
  %op_sv = getelementptr inbounds %struct.svop, %struct.svop* %34, i32 0, i32 7
  %35 = load %struct.sv*, %struct.sv** %op_sv, align 8
  %tobool72 = icmp ne %struct.sv* %35, null
  br i1 %tobool72, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true71
  br i1 true, label %land.lhs.true73, label %lor.lhs.false159

cond.false:                                       ; preds = %land.lhs.true71
  br i1 false, label %land.lhs.true73, label %lor.lhs.false159

land.lhs.true73:                                  ; preds = %cond.false, %cond.true
  %36 = load %struct.op*, %struct.op** %cstop, align 8
  %37 = bitcast %struct.op* %36 to %struct.svop*
  %op_sv74 = getelementptr inbounds %struct.svop, %struct.svop* %37, i32 0, i32 7
  %38 = load %struct.sv*, %struct.sv** %op_sv74, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %38, i32 0, i32 2
  %39 = load i32, i32* %sv_flags, align 4
  %and75 = and i32 %39, 2097152
  %tobool76 = icmp ne i32 %and75, 0
  br i1 %tobool76, label %cond.true77, label %cond.false78

cond.true77:                                      ; preds = %land.lhs.true73
  br i1 true, label %cond.true79, label %cond.false83

cond.false78:                                     ; preds = %land.lhs.true73
  br i1 false, label %cond.true79, label %cond.false83

cond.true79:                                      ; preds = %cond.false78, %cond.true77
  %40 = load %struct.op*, %struct.op** %cstop, align 8
  %41 = bitcast %struct.op* %40 to %struct.svop*
  %op_sv80 = getelementptr inbounds %struct.svop, %struct.svop* %41, i32 0, i32 7
  %42 = load %struct.sv*, %struct.sv** %op_sv80, align 8
  %call81 = call zeroext i1 @Perl_sv_2bool_flags(%struct.sv* %42, i32 2)
  br i1 %call81, label %if.then282, label %lor.lhs.false159

cond.false83:                                     ; preds = %cond.false78, %cond.true77
  %43 = load %struct.op*, %struct.op** %cstop, align 8
  %44 = bitcast %struct.op* %43 to %struct.svop*
  %op_sv84 = getelementptr inbounds %struct.svop, %struct.svop* %44, i32 0, i32 7
  %45 = load %struct.sv*, %struct.sv** %op_sv84, align 8
  %sv_flags85 = getelementptr inbounds %struct.sv, %struct.sv* %45, i32 0, i32 2
  %46 = load i32, i32* %sv_flags85, align 4
  %and86 = and i32 %46, 65280
  %tobool87 = icmp ne i32 %and86, 0
  br i1 %tobool87, label %cond.false101, label %lor.lhs.false88

lor.lhs.false88:                                  ; preds = %cond.false83
  %47 = load %struct.op*, %struct.op** %cstop, align 8
  %48 = bitcast %struct.op* %47 to %struct.svop*
  %op_sv89 = getelementptr inbounds %struct.svop, %struct.svop* %48, i32 0, i32 7
  %49 = load %struct.sv*, %struct.sv** %op_sv89, align 8
  %sv_flags90 = getelementptr inbounds %struct.sv, %struct.sv* %49, i32 0, i32 2
  %50 = load i32, i32* %sv_flags90, align 4
  %and91 = and i32 %50, 255
  %cmp92 = icmp eq i32 %and91, 8
  br i1 %cmp92, label %cond.false101, label %lor.lhs.false94

lor.lhs.false94:                                  ; preds = %lor.lhs.false88
  %51 = load %struct.op*, %struct.op** %cstop, align 8
  %52 = bitcast %struct.op* %51 to %struct.svop*
  %op_sv95 = getelementptr inbounds %struct.svop, %struct.svop* %52, i32 0, i32 7
  %53 = load %struct.sv*, %struct.sv** %op_sv95, align 8
  %sv_flags96 = getelementptr inbounds %struct.sv, %struct.sv* %53, i32 0, i32 2
  %54 = load i32, i32* %sv_flags96, align 4
  %and97 = and i32 %54, 16826623
  %cmp98 = icmp eq i32 %and97, 16777226
  br i1 %cmp98, label %cond.false101, label %cond.true100

cond.true100:                                     ; preds = %lor.lhs.false94
  br i1 false, label %if.then282, label %lor.lhs.false159

cond.false101:                                    ; preds = %lor.lhs.false94, %lor.lhs.false88, %cond.false83
  %55 = load %struct.op*, %struct.op** %cstop, align 8
  %56 = bitcast %struct.op* %55 to %struct.svop*
  %op_sv102 = getelementptr inbounds %struct.svop, %struct.svop* %56, i32 0, i32 7
  %57 = load %struct.sv*, %struct.sv** %op_sv102, align 8
  %sv_flags103 = getelementptr inbounds %struct.sv, %struct.sv* %57, i32 0, i32 2
  %58 = load i32, i32* %sv_flags103, align 4
  %and104 = and i32 %58, 1024
  %tobool105 = icmp ne i32 %and104, 0
  br i1 %tobool105, label %cond.true106, label %cond.false124

cond.true106:                                     ; preds = %cond.false101
  %59 = load %struct.op*, %struct.op** %cstop, align 8
  %60 = bitcast %struct.op* %59 to %struct.svop*
  %op_sv107 = getelementptr inbounds %struct.svop, %struct.svop* %60, i32 0, i32 7
  %61 = load %struct.sv*, %struct.sv** %op_sv107, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %61, i32 0, i32 0
  %62 = load i8*, i8** %sv_any, align 8
  %63 = bitcast i8* %62 to %struct.xpv*
  %tobool108 = icmp ne %struct.xpv* %63, null
  br i1 %tobool108, label %land.lhs.true109, label %lor.lhs.false159

land.lhs.true109:                                 ; preds = %cond.true106
  %64 = load %struct.op*, %struct.op** %cstop, align 8
  %65 = bitcast %struct.op* %64 to %struct.svop*
  %op_sv110 = getelementptr inbounds %struct.svop, %struct.svop* %65, i32 0, i32 7
  %66 = load %struct.sv*, %struct.sv** %op_sv110, align 8
  %sv_any111 = getelementptr inbounds %struct.sv, %struct.sv* %66, i32 0, i32 0
  %67 = load i8*, i8** %sv_any111, align 8
  %68 = bitcast i8* %67 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %68, i32 0, i32 2
  %69 = load i64, i64* %xpv_cur, align 8
  %cmp112 = icmp ugt i64 %69, 1
  br i1 %cmp112, label %if.then282, label %lor.lhs.false114

lor.lhs.false114:                                 ; preds = %land.lhs.true109
  %70 = load %struct.op*, %struct.op** %cstop, align 8
  %71 = bitcast %struct.op* %70 to %struct.svop*
  %op_sv115 = getelementptr inbounds %struct.svop, %struct.svop* %71, i32 0, i32 7
  %72 = load %struct.sv*, %struct.sv** %op_sv115, align 8
  %sv_any116 = getelementptr inbounds %struct.sv, %struct.sv* %72, i32 0, i32 0
  %73 = load i8*, i8** %sv_any116, align 8
  %74 = bitcast i8* %73 to %struct.xpv*
  %xpv_cur117 = getelementptr inbounds %struct.xpv, %struct.xpv* %74, i32 0, i32 2
  %75 = load i64, i64* %xpv_cur117, align 8
  %tobool118 = icmp ne i64 %75, 0
  br i1 %tobool118, label %land.lhs.true119, label %lor.lhs.false159

land.lhs.true119:                                 ; preds = %lor.lhs.false114
  %76 = load %struct.op*, %struct.op** %cstop, align 8
  %77 = bitcast %struct.op* %76 to %struct.svop*
  %op_sv120 = getelementptr inbounds %struct.svop, %struct.svop* %77, i32 0, i32 7
  %78 = load %struct.sv*, %struct.sv** %op_sv120, align 8
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %78, i32 0, i32 3
  %svu_pv = bitcast %union.anon* %sv_u to i8**
  %79 = load i8*, i8** %svu_pv, align 8
  %80 = load i8, i8* %79, align 1
  %conv121 = sext i8 %80 to i32
  %cmp122 = icmp ne i32 %conv121, 48
  br i1 %cmp122, label %if.then282, label %lor.lhs.false159

cond.false124:                                    ; preds = %cond.false101
  %81 = load %struct.op*, %struct.op** %cstop, align 8
  %82 = bitcast %struct.op* %81 to %struct.svop*
  %op_sv125 = getelementptr inbounds %struct.svop, %struct.svop* %82, i32 0, i32 7
  %83 = load %struct.sv*, %struct.sv** %op_sv125, align 8
  %sv_flags126 = getelementptr inbounds %struct.sv, %struct.sv* %83, i32 0, i32 2
  %84 = load i32, i32* %sv_flags126, align 4
  %and127 = and i32 %84, 768
  %tobool128 = icmp ne i32 %and127, 0
  br i1 %tobool128, label %cond.true129, label %cond.false155

cond.true129:                                     ; preds = %cond.false124
  %85 = load %struct.op*, %struct.op** %cstop, align 8
  %86 = bitcast %struct.op* %85 to %struct.svop*
  %op_sv130 = getelementptr inbounds %struct.svop, %struct.svop* %86, i32 0, i32 7
  %87 = load %struct.sv*, %struct.sv** %op_sv130, align 8
  %sv_flags131 = getelementptr inbounds %struct.sv, %struct.sv* %87, i32 0, i32 2
  %88 = load i32, i32* %sv_flags131, align 4
  %and132 = and i32 %88, 256
  %tobool133 = icmp ne i32 %and132, 0
  br i1 %tobool133, label %land.lhs.true134, label %lor.lhs.false139

land.lhs.true134:                                 ; preds = %cond.true129
  %89 = load %struct.op*, %struct.op** %cstop, align 8
  %90 = bitcast %struct.op* %89 to %struct.svop*
  %op_sv135 = getelementptr inbounds %struct.svop, %struct.svop* %90, i32 0, i32 7
  %91 = load %struct.sv*, %struct.sv** %op_sv135, align 8
  %sv_any136 = getelementptr inbounds %struct.sv, %struct.sv* %91, i32 0, i32 0
  %92 = load i8*, i8** %sv_any136, align 8
  %93 = bitcast i8* %92 to %struct.xpviv*
  %xiv_u = getelementptr inbounds %struct.xpviv, %struct.xpviv* %93, i32 0, i32 4
  %xivu_iv = bitcast %union._xivu* %xiv_u to i64*
  %94 = load i64, i64* %xivu_iv, align 8
  %cmp137 = icmp ne i64 %94, 0
  br i1 %cmp137, label %if.then282, label %lor.lhs.false139

lor.lhs.false139:                                 ; preds = %land.lhs.true134, %cond.true129
  %95 = load %struct.op*, %struct.op** %cstop, align 8
  %96 = bitcast %struct.op* %95 to %struct.svop*
  %op_sv140 = getelementptr inbounds %struct.svop, %struct.svop* %96, i32 0, i32 7
  %97 = load %struct.sv*, %struct.sv** %op_sv140, align 8
  %sv_flags141 = getelementptr inbounds %struct.sv, %struct.sv* %97, i32 0, i32 2
  %98 = load i32, i32* %sv_flags141, align 4
  %and142 = and i32 %98, 512
  %tobool143 = icmp ne i32 %and142, 0
  br i1 %tobool143, label %land.lhs.true144, label %lor.lhs.false159

land.lhs.true144:                                 ; preds = %lor.lhs.false139
  %99 = load %struct.op*, %struct.op** %cstop, align 8
  %100 = bitcast %struct.op* %99 to %struct.svop*
  %op_sv145 = getelementptr inbounds %struct.svop, %struct.svop* %100, i32 0, i32 7
  %101 = load %struct.sv*, %struct.sv** %op_sv145, align 8
  %sv_any146 = getelementptr inbounds %struct.sv, %struct.sv* %101, i32 0, i32 0
  %102 = load i8*, i8** %sv_any146, align 8
  %103 = bitcast i8* %102 to %struct.xpvnv*
  %xnv_u = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %103, i32 0, i32 5
  %xnv_nv = bitcast %union._xnvu* %xnv_u to double*
  %104 = load double, double* %xnv_nv, align 8
  %cmp147 = fcmp uno double %104, %104
  br i1 %cmp147, label %if.then282, label %lor.lhs.false148

lor.lhs.false148:                                 ; preds = %land.lhs.true144
  %105 = load %struct.op*, %struct.op** %cstop, align 8
  %106 = bitcast %struct.op* %105 to %struct.svop*
  %op_sv149 = getelementptr inbounds %struct.svop, %struct.svop* %106, i32 0, i32 7
  %107 = load %struct.sv*, %struct.sv** %op_sv149, align 8
  %sv_any150 = getelementptr inbounds %struct.sv, %struct.sv* %107, i32 0, i32 0
  %108 = load i8*, i8** %sv_any150, align 8
  %109 = bitcast i8* %108 to %struct.xpvnv*
  %xnv_u151 = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %109, i32 0, i32 5
  %xnv_nv152 = bitcast %union._xnvu* %xnv_u151 to double*
  %110 = load double, double* %xnv_nv152, align 8
  %cmp153 = fcmp une double %110, 0.000000e+00
  br i1 %cmp153, label %if.then282, label %lor.lhs.false159

cond.false155:                                    ; preds = %cond.false124
  %111 = load %struct.op*, %struct.op** %cstop, align 8
  %112 = bitcast %struct.op* %111 to %struct.svop*
  %op_sv156 = getelementptr inbounds %struct.svop, %struct.svop* %112, i32 0, i32 7
  %113 = load %struct.sv*, %struct.sv** %op_sv156, align 8
  %call157 = call zeroext i1 @Perl_sv_2bool_flags(%struct.sv* %113, i32 0)
  br i1 %call157, label %if.then282, label %lor.lhs.false159

lor.lhs.false159:                                 ; preds = %cond.false155, %lor.lhs.false148, %lor.lhs.false139, %land.lhs.true119, %lor.lhs.false114, %cond.true106, %cond.true100, %cond.true79, %cond.false, %cond.true, %if.end68
  %114 = load i32, i32* %type.addr, align 4
  %cmp160 = icmp eq i32 %114, 177
  br i1 %cmp160, label %land.lhs.true162, label %lor.lhs.false262

land.lhs.true162:                                 ; preds = %lor.lhs.false159
  %115 = load %struct.op*, %struct.op** %cstop, align 8
  %116 = bitcast %struct.op* %115 to %struct.svop*
  %op_sv163 = getelementptr inbounds %struct.svop, %struct.svop* %116, i32 0, i32 7
  %117 = load %struct.sv*, %struct.sv** %op_sv163, align 8
  %tobool164 = icmp ne %struct.sv* %117, null
  br i1 %tobool164, label %cond.true165, label %cond.false166

cond.true165:                                     ; preds = %land.lhs.true162
  br i1 true, label %land.lhs.true167, label %if.then282

cond.false166:                                    ; preds = %land.lhs.true162
  br i1 false, label %land.lhs.true167, label %if.then282

land.lhs.true167:                                 ; preds = %cond.false166, %cond.true165
  %118 = load %struct.op*, %struct.op** %cstop, align 8
  %119 = bitcast %struct.op* %118 to %struct.svop*
  %op_sv168 = getelementptr inbounds %struct.svop, %struct.svop* %119, i32 0, i32 7
  %120 = load %struct.sv*, %struct.sv** %op_sv168, align 8
  %sv_flags169 = getelementptr inbounds %struct.sv, %struct.sv* %120, i32 0, i32 2
  %121 = load i32, i32* %sv_flags169, align 4
  %and170 = and i32 %121, 2097152
  %tobool171 = icmp ne i32 %and170, 0
  br i1 %tobool171, label %cond.true172, label %cond.false173

cond.true172:                                     ; preds = %land.lhs.true167
  br i1 true, label %cond.true174, label %cond.false178

cond.false173:                                    ; preds = %land.lhs.true167
  br i1 false, label %cond.true174, label %cond.false178

cond.true174:                                     ; preds = %cond.false173, %cond.true172
  %122 = load %struct.op*, %struct.op** %cstop, align 8
  %123 = bitcast %struct.op* %122 to %struct.svop*
  %op_sv175 = getelementptr inbounds %struct.svop, %struct.svop* %123, i32 0, i32 7
  %124 = load %struct.sv*, %struct.sv** %op_sv175, align 8
  %call176 = call zeroext i1 @Perl_sv_2bool_flags(%struct.sv* %124, i32 2)
  br i1 %call176, label %lor.lhs.false262, label %if.then282

cond.false178:                                    ; preds = %cond.false173, %cond.true172
  %125 = load %struct.op*, %struct.op** %cstop, align 8
  %126 = bitcast %struct.op* %125 to %struct.svop*
  %op_sv179 = getelementptr inbounds %struct.svop, %struct.svop* %126, i32 0, i32 7
  %127 = load %struct.sv*, %struct.sv** %op_sv179, align 8
  %sv_flags180 = getelementptr inbounds %struct.sv, %struct.sv* %127, i32 0, i32 2
  %128 = load i32, i32* %sv_flags180, align 4
  %and181 = and i32 %128, 65280
  %tobool182 = icmp ne i32 %and181, 0
  br i1 %tobool182, label %cond.false196, label %lor.lhs.false183

lor.lhs.false183:                                 ; preds = %cond.false178
  %129 = load %struct.op*, %struct.op** %cstop, align 8
  %130 = bitcast %struct.op* %129 to %struct.svop*
  %op_sv184 = getelementptr inbounds %struct.svop, %struct.svop* %130, i32 0, i32 7
  %131 = load %struct.sv*, %struct.sv** %op_sv184, align 8
  %sv_flags185 = getelementptr inbounds %struct.sv, %struct.sv* %131, i32 0, i32 2
  %132 = load i32, i32* %sv_flags185, align 4
  %and186 = and i32 %132, 255
  %cmp187 = icmp eq i32 %and186, 8
  br i1 %cmp187, label %cond.false196, label %lor.lhs.false189

lor.lhs.false189:                                 ; preds = %lor.lhs.false183
  %133 = load %struct.op*, %struct.op** %cstop, align 8
  %134 = bitcast %struct.op* %133 to %struct.svop*
  %op_sv190 = getelementptr inbounds %struct.svop, %struct.svop* %134, i32 0, i32 7
  %135 = load %struct.sv*, %struct.sv** %op_sv190, align 8
  %sv_flags191 = getelementptr inbounds %struct.sv, %struct.sv* %135, i32 0, i32 2
  %136 = load i32, i32* %sv_flags191, align 4
  %and192 = and i32 %136, 16826623
  %cmp193 = icmp eq i32 %and192, 16777226
  br i1 %cmp193, label %cond.false196, label %cond.true195

cond.true195:                                     ; preds = %lor.lhs.false189
  br i1 false, label %lor.lhs.false262, label %if.then282

cond.false196:                                    ; preds = %lor.lhs.false189, %lor.lhs.false183, %cond.false178
  %137 = load %struct.op*, %struct.op** %cstop, align 8
  %138 = bitcast %struct.op* %137 to %struct.svop*
  %op_sv197 = getelementptr inbounds %struct.svop, %struct.svop* %138, i32 0, i32 7
  %139 = load %struct.sv*, %struct.sv** %op_sv197, align 8
  %sv_flags198 = getelementptr inbounds %struct.sv, %struct.sv* %139, i32 0, i32 2
  %140 = load i32, i32* %sv_flags198, align 4
  %and199 = and i32 %140, 1024
  %tobool200 = icmp ne i32 %and199, 0
  br i1 %tobool200, label %cond.true201, label %cond.false223

cond.true201:                                     ; preds = %cond.false196
  %141 = load %struct.op*, %struct.op** %cstop, align 8
  %142 = bitcast %struct.op* %141 to %struct.svop*
  %op_sv202 = getelementptr inbounds %struct.svop, %struct.svop* %142, i32 0, i32 7
  %143 = load %struct.sv*, %struct.sv** %op_sv202, align 8
  %sv_any203 = getelementptr inbounds %struct.sv, %struct.sv* %143, i32 0, i32 0
  %144 = load i8*, i8** %sv_any203, align 8
  %145 = bitcast i8* %144 to %struct.xpv*
  %tobool204 = icmp ne %struct.xpv* %145, null
  br i1 %tobool204, label %land.lhs.true205, label %if.then282

land.lhs.true205:                                 ; preds = %cond.true201
  %146 = load %struct.op*, %struct.op** %cstop, align 8
  %147 = bitcast %struct.op* %146 to %struct.svop*
  %op_sv206 = getelementptr inbounds %struct.svop, %struct.svop* %147, i32 0, i32 7
  %148 = load %struct.sv*, %struct.sv** %op_sv206, align 8
  %sv_any207 = getelementptr inbounds %struct.sv, %struct.sv* %148, i32 0, i32 0
  %149 = load i8*, i8** %sv_any207, align 8
  %150 = bitcast i8* %149 to %struct.xpv*
  %xpv_cur208 = getelementptr inbounds %struct.xpv, %struct.xpv* %150, i32 0, i32 2
  %151 = load i64, i64* %xpv_cur208, align 8
  %cmp209 = icmp ugt i64 %151, 1
  br i1 %cmp209, label %lor.lhs.false262, label %lor.lhs.false211

lor.lhs.false211:                                 ; preds = %land.lhs.true205
  %152 = load %struct.op*, %struct.op** %cstop, align 8
  %153 = bitcast %struct.op* %152 to %struct.svop*
  %op_sv212 = getelementptr inbounds %struct.svop, %struct.svop* %153, i32 0, i32 7
  %154 = load %struct.sv*, %struct.sv** %op_sv212, align 8
  %sv_any213 = getelementptr inbounds %struct.sv, %struct.sv* %154, i32 0, i32 0
  %155 = load i8*, i8** %sv_any213, align 8
  %156 = bitcast i8* %155 to %struct.xpv*
  %xpv_cur214 = getelementptr inbounds %struct.xpv, %struct.xpv* %156, i32 0, i32 2
  %157 = load i64, i64* %xpv_cur214, align 8
  %tobool215 = icmp ne i64 %157, 0
  br i1 %tobool215, label %land.lhs.true216, label %if.then282

land.lhs.true216:                                 ; preds = %lor.lhs.false211
  %158 = load %struct.op*, %struct.op** %cstop, align 8
  %159 = bitcast %struct.op* %158 to %struct.svop*
  %op_sv217 = getelementptr inbounds %struct.svop, %struct.svop* %159, i32 0, i32 7
  %160 = load %struct.sv*, %struct.sv** %op_sv217, align 8
  %sv_u218 = getelementptr inbounds %struct.sv, %struct.sv* %160, i32 0, i32 3
  %svu_pv219 = bitcast %union.anon* %sv_u218 to i8**
  %161 = load i8*, i8** %svu_pv219, align 8
  %162 = load i8, i8* %161, align 1
  %conv220 = sext i8 %162 to i32
  %cmp221 = icmp ne i32 %conv220, 48
  br i1 %cmp221, label %lor.lhs.false262, label %if.then282

cond.false223:                                    ; preds = %cond.false196
  %163 = load %struct.op*, %struct.op** %cstop, align 8
  %164 = bitcast %struct.op* %163 to %struct.svop*
  %op_sv224 = getelementptr inbounds %struct.svop, %struct.svop* %164, i32 0, i32 7
  %165 = load %struct.sv*, %struct.sv** %op_sv224, align 8
  %sv_flags225 = getelementptr inbounds %struct.sv, %struct.sv* %165, i32 0, i32 2
  %166 = load i32, i32* %sv_flags225, align 4
  %and226 = and i32 %166, 768
  %tobool227 = icmp ne i32 %and226, 0
  br i1 %tobool227, label %cond.true228, label %cond.false258

cond.true228:                                     ; preds = %cond.false223
  %167 = load %struct.op*, %struct.op** %cstop, align 8
  %168 = bitcast %struct.op* %167 to %struct.svop*
  %op_sv229 = getelementptr inbounds %struct.svop, %struct.svop* %168, i32 0, i32 7
  %169 = load %struct.sv*, %struct.sv** %op_sv229, align 8
  %sv_flags230 = getelementptr inbounds %struct.sv, %struct.sv* %169, i32 0, i32 2
  %170 = load i32, i32* %sv_flags230, align 4
  %and231 = and i32 %170, 256
  %tobool232 = icmp ne i32 %and231, 0
  br i1 %tobool232, label %land.lhs.true233, label %lor.lhs.false240

land.lhs.true233:                                 ; preds = %cond.true228
  %171 = load %struct.op*, %struct.op** %cstop, align 8
  %172 = bitcast %struct.op* %171 to %struct.svop*
  %op_sv234 = getelementptr inbounds %struct.svop, %struct.svop* %172, i32 0, i32 7
  %173 = load %struct.sv*, %struct.sv** %op_sv234, align 8
  %sv_any235 = getelementptr inbounds %struct.sv, %struct.sv* %173, i32 0, i32 0
  %174 = load i8*, i8** %sv_any235, align 8
  %175 = bitcast i8* %174 to %struct.xpviv*
  %xiv_u236 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %175, i32 0, i32 4
  %xivu_iv237 = bitcast %union._xivu* %xiv_u236 to i64*
  %176 = load i64, i64* %xivu_iv237, align 8
  %cmp238 = icmp ne i64 %176, 0
  br i1 %cmp238, label %lor.lhs.false262, label %lor.lhs.false240

lor.lhs.false240:                                 ; preds = %land.lhs.true233, %cond.true228
  %177 = load %struct.op*, %struct.op** %cstop, align 8
  %178 = bitcast %struct.op* %177 to %struct.svop*
  %op_sv241 = getelementptr inbounds %struct.svop, %struct.svop* %178, i32 0, i32 7
  %179 = load %struct.sv*, %struct.sv** %op_sv241, align 8
  %sv_flags242 = getelementptr inbounds %struct.sv, %struct.sv* %179, i32 0, i32 2
  %180 = load i32, i32* %sv_flags242, align 4
  %and243 = and i32 %180, 512
  %tobool244 = icmp ne i32 %and243, 0
  br i1 %tobool244, label %land.lhs.true245, label %if.then282

land.lhs.true245:                                 ; preds = %lor.lhs.false240
  %181 = load %struct.op*, %struct.op** %cstop, align 8
  %182 = bitcast %struct.op* %181 to %struct.svop*
  %op_sv246 = getelementptr inbounds %struct.svop, %struct.svop* %182, i32 0, i32 7
  %183 = load %struct.sv*, %struct.sv** %op_sv246, align 8
  %sv_any247 = getelementptr inbounds %struct.sv, %struct.sv* %183, i32 0, i32 0
  %184 = load i8*, i8** %sv_any247, align 8
  %185 = bitcast i8* %184 to %struct.xpvnv*
  %xnv_u248 = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %185, i32 0, i32 5
  %xnv_nv249 = bitcast %union._xnvu* %xnv_u248 to double*
  %186 = load double, double* %xnv_nv249, align 8
  %cmp250 = fcmp uno double %186, %186
  br i1 %cmp250, label %lor.lhs.false262, label %lor.lhs.false251

lor.lhs.false251:                                 ; preds = %land.lhs.true245
  %187 = load %struct.op*, %struct.op** %cstop, align 8
  %188 = bitcast %struct.op* %187 to %struct.svop*
  %op_sv252 = getelementptr inbounds %struct.svop, %struct.svop* %188, i32 0, i32 7
  %189 = load %struct.sv*, %struct.sv** %op_sv252, align 8
  %sv_any253 = getelementptr inbounds %struct.sv, %struct.sv* %189, i32 0, i32 0
  %190 = load i8*, i8** %sv_any253, align 8
  %191 = bitcast i8* %190 to %struct.xpvnv*
  %xnv_u254 = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %191, i32 0, i32 5
  %xnv_nv255 = bitcast %union._xnvu* %xnv_u254 to double*
  %192 = load double, double* %xnv_nv255, align 8
  %cmp256 = fcmp une double %192, 0.000000e+00
  br i1 %cmp256, label %lor.lhs.false262, label %if.then282

cond.false258:                                    ; preds = %cond.false223
  %193 = load %struct.op*, %struct.op** %cstop, align 8
  %194 = bitcast %struct.op* %193 to %struct.svop*
  %op_sv259 = getelementptr inbounds %struct.svop, %struct.svop* %194, i32 0, i32 7
  %195 = load %struct.sv*, %struct.sv** %op_sv259, align 8
  %call260 = call zeroext i1 @Perl_sv_2bool_flags(%struct.sv* %195, i32 0)
  br i1 %call260, label %lor.lhs.false262, label %if.then282

lor.lhs.false262:                                 ; preds = %cond.false258, %lor.lhs.false251, %land.lhs.true245, %land.lhs.true233, %land.lhs.true216, %land.lhs.true205, %cond.true195, %cond.true174, %lor.lhs.false159
  %196 = load i32, i32* %type.addr, align 4
  %cmp263 = icmp eq i32 %196, 179
  br i1 %cmp263, label %land.lhs.true265, label %if.else340

land.lhs.true265:                                 ; preds = %lor.lhs.false262
  %197 = load %struct.op*, %struct.op** %cstop, align 8
  %198 = bitcast %struct.op* %197 to %struct.svop*
  %op_sv266 = getelementptr inbounds %struct.svop, %struct.svop* %198, i32 0, i32 7
  %199 = load %struct.sv*, %struct.sv** %op_sv266, align 8
  %sv_flags267 = getelementptr inbounds %struct.sv, %struct.sv* %199, i32 0, i32 2
  %200 = load i32, i32* %sv_flags267, align 4
  %and268 = and i32 %200, 65280
  %tobool269 = icmp ne i32 %and268, 0
  br i1 %tobool269, label %if.else340, label %lor.lhs.false270

lor.lhs.false270:                                 ; preds = %land.lhs.true265
  %201 = load %struct.op*, %struct.op** %cstop, align 8
  %202 = bitcast %struct.op* %201 to %struct.svop*
  %op_sv271 = getelementptr inbounds %struct.svop, %struct.svop* %202, i32 0, i32 7
  %203 = load %struct.sv*, %struct.sv** %op_sv271, align 8
  %sv_flags272 = getelementptr inbounds %struct.sv, %struct.sv* %203, i32 0, i32 2
  %204 = load i32, i32* %sv_flags272, align 4
  %and273 = and i32 %204, 255
  %cmp274 = icmp eq i32 %and273, 8
  br i1 %cmp274, label %if.else340, label %lor.lhs.false276

lor.lhs.false276:                                 ; preds = %lor.lhs.false270
  %205 = load %struct.op*, %struct.op** %cstop, align 8
  %206 = bitcast %struct.op* %205 to %struct.svop*
  %op_sv277 = getelementptr inbounds %struct.svop, %struct.svop* %206, i32 0, i32 7
  %207 = load %struct.sv*, %struct.sv** %op_sv277, align 8
  %sv_flags278 = getelementptr inbounds %struct.sv, %struct.sv* %207, i32 0, i32 2
  %208 = load i32, i32* %sv_flags278, align 4
  %and279 = and i32 %208, 16826623
  %cmp280 = icmp eq i32 %and279, 16777226
  br i1 %cmp280, label %if.else340, label %if.then282

if.then282:                                       ; preds = %lor.lhs.false276, %cond.false258, %lor.lhs.false251, %lor.lhs.false240, %land.lhs.true216, %lor.lhs.false211, %cond.true201, %cond.true195, %cond.true174, %cond.false166, %cond.true165, %cond.false155, %lor.lhs.false148, %land.lhs.true144, %land.lhs.true134, %land.lhs.true119, %land.lhs.true109, %cond.true100, %cond.true79
  %209 = load %struct.op**, %struct.op*** %firstp.addr, align 8
  store %struct.op* null, %struct.op** %209, align 8
  %210 = load %struct.op*, %struct.op** %other, align 8
  %op_type283 = getelementptr inbounds %struct.op, %struct.op* %210, i32 0, i32 4
  %bf.load284 = load i16, i16* %op_type283, align 8
  %bf.clear285 = and i16 %bf.load284, 511
  %bf.cast286 = zext i16 %bf.clear285 to i32
  %cmp287 = icmp eq i32 %bf.cast286, 5
  br i1 %cmp287, label %if.then289, label %if.end293

if.then289:                                       ; preds = %if.then282
  %211 = load %struct.op*, %struct.op** %other, align 8
  %op_private290 = getelementptr inbounds %struct.op, %struct.op* %211, i32 0, i32 6
  %212 = load i8, i8* %op_private290, align 1
  %conv291 = zext i8 %212 to i32
  %or = or i32 %conv291, 4
  %conv292 = trunc i32 %or to i8
  store i8 %conv292, i8* %op_private290, align 1
  br label %if.end293

if.end293:                                        ; preds = %if.then289, %if.then282
  %213 = load %struct.op*, %struct.op** %first, align 8
  call void @Perl_op_free(%struct.op* %213)
  %214 = load %struct.op*, %struct.op** %other, align 8
  %op_type294 = getelementptr inbounds %struct.op, %struct.op* %214, i32 0, i32 4
  %bf.load295 = load i16, i16* %op_type294, align 8
  %bf.clear296 = and i16 %bf.load295, 511
  %bf.cast297 = zext i16 %bf.clear296 to i32
  %cmp298 = icmp eq i32 %bf.cast297, 197
  br i1 %cmp298, label %if.then300, label %if.else302

if.then300:                                       ; preds = %if.end293
  %215 = load %struct.op*, %struct.op** %other, align 8
  %call301 = call %struct.op* @Perl_newUNOP(i32 0, i32 128, %struct.op* %215)
  store %struct.op* %call301, %struct.op** %other, align 8
  br label %if.end336

if.else302:                                       ; preds = %if.end293
  %216 = load %struct.op*, %struct.op** %other, align 8
  %op_type303 = getelementptr inbounds %struct.op, %struct.op* %216, i32 0, i32 4
  %bf.load304 = load i16, i16* %op_type303, align 8
  %bf.clear305 = and i16 %bf.load304, 511
  %bf.cast306 = zext i16 %bf.clear305 to i32
  %cmp307 = icmp eq i32 %bf.cast306, 31
  br i1 %cmp307, label %if.then330, label %lor.lhs.false309

lor.lhs.false309:                                 ; preds = %if.else302
  %217 = load %struct.op*, %struct.op** %other, align 8
  %op_type310 = getelementptr inbounds %struct.op, %struct.op* %217, i32 0, i32 4
  %bf.load311 = load i16, i16* %op_type310, align 8
  %bf.clear312 = and i16 %bf.load311, 511
  %bf.cast313 = zext i16 %bf.clear312 to i32
  %cmp314 = icmp eq i32 %bf.cast313, 33
  br i1 %cmp314, label %if.then330, label %lor.lhs.false316

lor.lhs.false316:                                 ; preds = %lor.lhs.false309
  %218 = load %struct.op*, %struct.op** %other, align 8
  %op_type317 = getelementptr inbounds %struct.op, %struct.op* %218, i32 0, i32 4
  %bf.load318 = load i16, i16* %op_type317, align 8
  %bf.clear319 = and i16 %bf.load318, 511
  %bf.cast320 = zext i16 %bf.clear319 to i32
  %cmp321 = icmp eq i32 %bf.cast320, 36
  br i1 %cmp321, label %if.then330, label %lor.lhs.false323

lor.lhs.false323:                                 ; preds = %lor.lhs.false316
  %219 = load %struct.op*, %struct.op** %other, align 8
  %op_type324 = getelementptr inbounds %struct.op, %struct.op* %219, i32 0, i32 4
  %bf.load325 = load i16, i16* %op_type324, align 8
  %bf.clear326 = and i16 %bf.load325, 511
  %bf.cast327 = zext i16 %bf.clear326 to i32
  %cmp328 = icmp eq i32 %bf.cast327, 35
  br i1 %cmp328, label %if.then330, label %if.end335

if.then330:                                       ; preds = %lor.lhs.false323, %lor.lhs.false316, %lor.lhs.false309, %if.else302
  %220 = load %struct.op*, %struct.op** %other, align 8
  %op_flags331 = getelementptr inbounds %struct.op, %struct.op* %220, i32 0, i32 5
  %221 = load i8, i8* %op_flags331, align 2
  %conv332 = zext i8 %221 to i32
  %or333 = or i32 %conv332, 128
  %conv334 = trunc i32 %or333 to i8
  store i8 %conv334, i8* %op_flags331, align 2
  br label %if.end335

if.end335:                                        ; preds = %if.then330, %lor.lhs.false323
  br label %if.end336

if.end336:                                        ; preds = %if.end335, %if.then300
  %222 = load %struct.op*, %struct.op** %other, align 8
  %op_folded337 = getelementptr inbounds %struct.op, %struct.op* %222, i32 0, i32 4
  %bf.load338 = load i16, i16* %op_folded337, align 8
  %bf.clear339 = and i16 %bf.load338, -8193
  %bf.set = or i16 %bf.clear339, 8192
  store i16 %bf.set, i16* %op_folded337, align 8
  %223 = load %struct.op*, %struct.op** %other, align 8
  store %struct.op* %223, %struct.op** %retval, align 8
  br label %return

if.else340:                                       ; preds = %lor.lhs.false276, %lor.lhs.false270, %land.lhs.true265, %lor.lhs.false262
  %224 = load %struct.op*, %struct.op** %other, align 8
  store %struct.op* %224, %struct.op** %o2, align 8
  %225 = load %struct.op*, %struct.op** %o2, align 8
  %op_type341 = getelementptr inbounds %struct.op, %struct.op* %225, i32 0, i32 4
  %bf.load342 = load i16, i16* %op_type341, align 8
  %bf.clear343 = and i16 %bf.load342, 511
  %bf.cast344 = zext i16 %bf.clear343 to i32
  %cmp345 = icmp eq i32 %bf.cast344, 158
  br i1 %cmp345, label %land.lhs.true347, label %if.then358

land.lhs.true347:                                 ; preds = %if.else340
  %226 = load %struct.op*, %struct.op** %o2, align 8
  %227 = bitcast %struct.op* %226 to %struct.unop*
  %op_first = getelementptr inbounds %struct.unop, %struct.unop* %227, i32 0, i32 7
  %228 = load %struct.op*, %struct.op** %op_first, align 8
  store %struct.op* %228, %struct.op** %o2, align 8
  %tobool348 = icmp ne %struct.op* %228, null
  br i1 %tobool348, label %land.lhs.true349, label %if.then358

land.lhs.true349:                                 ; preds = %land.lhs.true347
  %229 = load %struct.op*, %struct.op** %o2, align 8
  %op_type350 = getelementptr inbounds %struct.op, %struct.op* %229, i32 0, i32 4
  %bf.load351 = load i16, i16* %op_type350, align 8
  %bf.clear352 = and i16 %bf.load351, 511
  %bf.cast353 = zext i16 %bf.clear352 to i32
  %cmp354 = icmp eq i32 %bf.cast353, 3
  br i1 %cmp354, label %land.lhs.true356, label %if.then358

land.lhs.true356:                                 ; preds = %land.lhs.true349
  %230 = load %struct.op*, %struct.op** %o2, align 8
  %op_sibling = getelementptr inbounds %struct.op, %struct.op* %230, i32 0, i32 1
  %231 = load %struct.op*, %struct.op** %op_sibling, align 8
  %add.ptr = getelementptr inbounds %struct.op, %struct.op* %231, i64 0
  store %struct.op* %add.ptr, %struct.op** %o2, align 8
  %tobool357 = icmp ne %struct.op* %add.ptr, null
  br i1 %tobool357, label %if.end359, label %if.then358

if.then358:                                       ; preds = %land.lhs.true356, %land.lhs.true349, %land.lhs.true347, %if.else340
  %232 = load %struct.op*, %struct.op** %other, align 8
  store %struct.op* %232, %struct.op** %o2, align 8
  br label %if.end359

if.end359:                                        ; preds = %if.then358, %land.lhs.true356
  %233 = load %struct.op*, %struct.op** %o2, align 8
  %op_type360 = getelementptr inbounds %struct.op, %struct.op* %233, i32 0, i32 4
  %bf.load361 = load i16, i16* %op_type360, align 8
  %bf.clear362 = and i16 %bf.load361, 511
  %bf.cast363 = zext i16 %bf.clear362 to i32
  %cmp364 = icmp eq i32 %bf.cast363, 9
  br i1 %cmp364, label %land.lhs.true380, label %lor.lhs.false366

lor.lhs.false366:                                 ; preds = %if.end359
  %234 = load %struct.op*, %struct.op** %o2, align 8
  %op_type367 = getelementptr inbounds %struct.op, %struct.op* %234, i32 0, i32 4
  %bf.load368 = load i16, i16* %op_type367, align 8
  %bf.clear369 = and i16 %bf.load368, 511
  %bf.cast370 = zext i16 %bf.clear369 to i32
  %cmp371 = icmp eq i32 %bf.cast370, 10
  br i1 %cmp371, label %land.lhs.true380, label %lor.lhs.false373

lor.lhs.false373:                                 ; preds = %lor.lhs.false366
  %235 = load %struct.op*, %struct.op** %o2, align 8
  %op_type374 = getelementptr inbounds %struct.op, %struct.op* %235, i32 0, i32 4
  %bf.load375 = load i16, i16* %op_type374, align 8
  %bf.clear376 = and i16 %bf.load375, 511
  %bf.cast377 = zext i16 %bf.clear376 to i32
  %cmp378 = icmp eq i32 %bf.cast377, 11
  br i1 %cmp378, label %land.lhs.true380, label %if.end391

land.lhs.true380:                                 ; preds = %lor.lhs.false373, %lor.lhs.false366, %if.end359
  %236 = load %struct.op*, %struct.op** %o2, align 8
  %op_private381 = getelementptr inbounds %struct.op, %struct.op* %236, i32 0, i32 6
  %237 = load i8, i8* %op_private381, align 1
  %conv382 = zext i8 %237 to i32
  %and383 = and i32 %conv382, 128
  %tobool384 = icmp ne i32 %and383, 0
  br i1 %tobool384, label %land.lhs.true385, label %if.end391

land.lhs.true385:                                 ; preds = %land.lhs.true380
  %238 = load %struct.op*, %struct.op** %o2, align 8
  %op_private386 = getelementptr inbounds %struct.op, %struct.op* %238, i32 0, i32 6
  %239 = load i8, i8* %op_private386, align 1
  %conv387 = zext i8 %239 to i32
  %and388 = and i32 %conv387, 64
  %tobool389 = icmp ne i32 %and388, 0
  br i1 %tobool389, label %if.end391, label %if.then390

if.then390:                                       ; preds = %land.lhs.true385
  call void (i32, i8*, ...) @Perl_ck_warner_d(i32 2, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.189, i64 0, i64 0))
  br label %if.end391

if.end391:                                        ; preds = %if.then390, %land.lhs.true385, %land.lhs.true380, %lor.lhs.false373
  %240 = load %struct.op**, %struct.op*** %otherp.addr, align 8
  store %struct.op* null, %struct.op** %240, align 8
  %241 = load %struct.op*, %struct.op** %cstop, align 8
  %op_type392 = getelementptr inbounds %struct.op, %struct.op* %241, i32 0, i32 4
  %bf.load393 = load i16, i16* %op_type392, align 8
  %bf.clear394 = and i16 %bf.load393, 511
  %bf.cast395 = zext i16 %bf.clear394 to i32
  %cmp396 = icmp eq i32 %bf.cast395, 5
  br i1 %cmp396, label %if.then398, label %if.end403

if.then398:                                       ; preds = %if.end391
  %242 = load %struct.op*, %struct.op** %cstop, align 8
  %op_private399 = getelementptr inbounds %struct.op, %struct.op* %242, i32 0, i32 6
  %243 = load i8, i8* %op_private399, align 1
  %conv400 = zext i8 %243 to i32
  %or401 = or i32 %conv400, 4
  %conv402 = trunc i32 %or401 to i8
  store i8 %conv402, i8* %op_private399, align 1
  br label %if.end403

if.end403:                                        ; preds = %if.then398, %if.end391
  %244 = load %struct.op*, %struct.op** %other, align 8
  call void @Perl_op_free(%struct.op* %244)
  %245 = load %struct.op*, %struct.op** %first, align 8
  store %struct.op* %245, %struct.op** %retval, align 8
  br label %return

if.else404:                                       ; preds = %if.end53
  %246 = load %struct.op*, %struct.op** %first, align 8
  %op_flags405 = getelementptr inbounds %struct.op, %struct.op* %246, i32 0, i32 5
  %247 = load i8, i8* %op_flags405, align 2
  %conv406 = zext i8 %247 to i32
  %and407 = and i32 %conv406, 4
  %tobool408 = icmp ne i32 %and407, 0
  br i1 %tobool408, label %land.lhs.true409, label %if.end519

land.lhs.true409:                                 ; preds = %if.else404
  %248 = load i32, i32* %type.addr, align 4
  %cmp410 = icmp ne i32 %248, 179
  br i1 %cmp410, label %land.lhs.true412, label %if.end519

land.lhs.true412:                                 ; preds = %land.lhs.true409
  %call413 = call zeroext i1 @Perl_ckwarn(i32 12)
  br i1 %call413, label %if.then415, label %if.end519

if.then415:                                       ; preds = %land.lhs.true412
  %249 = load %struct.op*, %struct.op** %first, align 8
  %250 = bitcast %struct.op* %249 to %struct.unop*
  %op_first416 = getelementptr inbounds %struct.unop, %struct.unop* %250, i32 0, i32 7
  %251 = load %struct.op*, %struct.op** %op_first416, align 8
  store %struct.op* %251, %struct.op** %k1, align 8
  %252 = load %struct.op*, %struct.op** %k1, align 8
  %op_sibling417 = getelementptr inbounds %struct.op, %struct.op* %252, i32 0, i32 1
  %253 = load %struct.op*, %struct.op** %op_sibling417, align 8
  %add.ptr418 = getelementptr inbounds %struct.op, %struct.op* %253, i64 0
  store %struct.op* %add.ptr418, %struct.op** %k2, align 8
  store i16 0, i16* %warnop, align 2
  %254 = load %struct.op*, %struct.op** %first, align 8
  %op_type419 = getelementptr inbounds %struct.op, %struct.op* %254, i32 0, i32 4
  %bf.load420 = load i16, i16* %op_type419, align 8
  %bf.clear421 = and i16 %bf.load420, 511
  %bf.cast422 = zext i16 %bf.clear421 to i32
  switch i32 %bf.cast422, label %sw.epilog506 [
    i32 0, label %sw.bb423
    i32 37, label %sw.bb450
  ]

sw.bb423:                                         ; preds = %if.then415
  %255 = load %struct.op*, %struct.op** %k2, align 8
  %tobool424 = icmp ne %struct.op* %255, null
  br i1 %tobool424, label %land.lhs.true425, label %if.end449

land.lhs.true425:                                 ; preds = %sw.bb423
  %256 = load %struct.op*, %struct.op** %k2, align 8
  %op_type426 = getelementptr inbounds %struct.op, %struct.op* %256, i32 0, i32 4
  %bf.load427 = load i16, i16* %op_type426, align 8
  %bf.clear428 = and i16 %bf.load427, 511
  %bf.cast429 = zext i16 %bf.clear428 to i32
  %cmp430 = icmp eq i32 %bf.cast429, 26
  br i1 %cmp430, label %land.lhs.true432, label %if.end449

land.lhs.true432:                                 ; preds = %land.lhs.true425
  %257 = load %struct.op*, %struct.op** %k2, align 8
  %op_flags433 = getelementptr inbounds %struct.op, %struct.op* %257, i32 0, i32 5
  %258 = load i8, i8* %op_flags433, align 2
  %conv434 = zext i8 %258 to i32
  %and435 = and i32 %conv434, 64
  %tobool436 = icmp ne i32 %and435, 0
  br i1 %tobool436, label %land.lhs.true437, label %if.end449

land.lhs.true437:                                 ; preds = %land.lhs.true432
  %259 = load %struct.op*, %struct.op** %k1, align 8
  %op_flags438 = getelementptr inbounds %struct.op, %struct.op* %259, i32 0, i32 5
  %260 = load i8, i8* %op_flags438, align 2
  %conv439 = zext i8 %260 to i32
  %and440 = and i32 %conv439, 3
  %cmp441 = icmp eq i32 %and440, 2
  br i1 %cmp441, label %if.then443, label %if.end449

if.then443:                                       ; preds = %land.lhs.true437
  %261 = load %struct.op*, %struct.op** %k2, align 8
  %op_type444 = getelementptr inbounds %struct.op, %struct.op* %261, i32 0, i32 4
  %bf.load445 = load i16, i16* %op_type444, align 8
  %bf.clear446 = and i16 %bf.load445, 511
  %bf.cast447 = zext i16 %bf.clear446 to i32
  %conv448 = trunc i32 %bf.cast447 to i16
  store i16 %conv448, i16* %warnop, align 2
  br label %if.end449

if.end449:                                        ; preds = %if.then443, %land.lhs.true437, %land.lhs.true432, %land.lhs.true425, %sw.bb423
  br label %sw.epilog506

sw.bb450:                                         ; preds = %if.then415
  %262 = load %struct.op*, %struct.op** %k1, align 8
  %op_type451 = getelementptr inbounds %struct.op, %struct.op* %262, i32 0, i32 4
  %bf.load452 = load i16, i16* %op_type451, align 8
  %bf.clear453 = and i16 %bf.load452, 511
  %bf.cast454 = zext i16 %bf.clear453 to i32
  %cmp455 = icmp eq i32 %bf.cast454, 306
  br i1 %cmp455, label %if.then488, label %lor.lhs.false457

lor.lhs.false457:                                 ; preds = %sw.bb450
  %263 = load %struct.op*, %struct.op** %k1, align 8
  %op_type458 = getelementptr inbounds %struct.op, %struct.op* %263, i32 0, i32 4
  %bf.load459 = load i16, i16* %op_type458, align 8
  %bf.clear460 = and i16 %bf.load459, 511
  %bf.cast461 = zext i16 %bf.clear460 to i32
  %cmp462 = icmp eq i32 %bf.cast461, 25
  br i1 %cmp462, label %if.then488, label %lor.lhs.false464

lor.lhs.false464:                                 ; preds = %lor.lhs.false457
  %264 = load %struct.op*, %struct.op** %k1, align 8
  %op_type465 = getelementptr inbounds %struct.op, %struct.op* %264, i32 0, i32 4
  %bf.load466 = load i16, i16* %op_type465, align 8
  %bf.clear467 = and i16 %bf.load466, 511
  %bf.cast468 = zext i16 %bf.clear467 to i32
  %cmp469 = icmp eq i32 %bf.cast468, 0
  br i1 %cmp469, label %land.lhs.true471, label %lor.lhs.false474

land.lhs.true471:                                 ; preds = %lor.lhs.false464
  %265 = load %struct.op*, %struct.op** %k1, align 8
  %op_targ = getelementptr inbounds %struct.op, %struct.op* %265, i32 0, i32 3
  %266 = load i64, i64* %op_targ, align 8
  %cmp472 = icmp eq i64 %266, 25
  br i1 %cmp472, label %if.then488, label %lor.lhs.false474

lor.lhs.false474:                                 ; preds = %land.lhs.true471, %lor.lhs.false464
  %267 = load %struct.op*, %struct.op** %k1, align 8
  %op_type475 = getelementptr inbounds %struct.op, %struct.op* %267, i32 0, i32 4
  %bf.load476 = load i16, i16* %op_type475, align 8
  %bf.clear477 = and i16 %bf.load476, 511
  %bf.cast478 = zext i16 %bf.clear477 to i32
  %cmp479 = icmp eq i32 %bf.cast478, 144
  br i1 %cmp479, label %if.then488, label %lor.lhs.false481

lor.lhs.false481:                                 ; preds = %lor.lhs.false474
  %268 = load %struct.op*, %struct.op** %k1, align 8
  %op_type482 = getelementptr inbounds %struct.op, %struct.op* %268, i32 0, i32 4
  %bf.load483 = load i16, i16* %op_type482, align 8
  %bf.clear484 = and i16 %bf.load483, 511
  %bf.cast485 = zext i16 %bf.clear484 to i32
  %cmp486 = icmp eq i32 %bf.cast485, 141
  br i1 %cmp486, label %if.then488, label %if.end505

if.then488:                                       ; preds = %lor.lhs.false481, %lor.lhs.false474, %land.lhs.true471, %lor.lhs.false457, %sw.bb450
  %269 = load %struct.op*, %struct.op** %k1, align 8
  %op_type489 = getelementptr inbounds %struct.op, %struct.op* %269, i32 0, i32 4
  %bf.load490 = load i16, i16* %op_type489, align 8
  %bf.clear491 = and i16 %bf.load490, 511
  %bf.cast492 = zext i16 %bf.clear491 to i32
  %cmp493 = icmp eq i32 %bf.cast492, 0
  br i1 %cmp493, label %cond.true495, label %cond.false499

cond.true495:                                     ; preds = %if.then488
  %270 = load %struct.op*, %struct.op** %k1, align 8
  %op_targ496 = getelementptr inbounds %struct.op, %struct.op* %270, i32 0, i32 3
  %271 = load i64, i64* %op_targ496, align 8
  %conv497 = trunc i64 %271 to i16
  %conv498 = zext i16 %conv497 to i32
  br label %cond.end

cond.false499:                                    ; preds = %if.then488
  %272 = load %struct.op*, %struct.op** %k1, align 8
  %op_type500 = getelementptr inbounds %struct.op, %struct.op* %272, i32 0, i32 4
  %bf.load501 = load i16, i16* %op_type500, align 8
  %bf.clear502 = and i16 %bf.load501, 511
  %bf.cast503 = zext i16 %bf.clear502 to i32
  br label %cond.end

cond.end:                                         ; preds = %cond.false499, %cond.true495
  %cond = phi i32 [ %conv498, %cond.true495 ], [ %bf.cast503, %cond.false499 ]
  %conv504 = trunc i32 %cond to i16
  store i16 %conv504, i16* %warnop, align 2
  br label %if.end505

if.end505:                                        ; preds = %cond.end, %lor.lhs.false481
  br label %sw.epilog506

sw.epilog506:                                     ; preds = %if.then415, %if.end505, %if.end449
  %273 = load i16, i16* %warnop, align 2
  %tobool507 = icmp ne i16 %273, 0
  br i1 %tobool507, label %if.then508, label %if.end518

if.then508:                                       ; preds = %sw.epilog506
  %274 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_line = getelementptr inbounds %struct.cop, %struct.cop* %274, i32 0, i32 7
  %275 = load i32, i32* %cop_line, align 4
  store i32 %275, i32* %oldline, align 4
  %276 = load %struct.yy_parser*, %struct.yy_parser** @PL_parser, align 8
  %copline = getelementptr inbounds %struct.yy_parser, %struct.yy_parser* %276, i32 0, i32 41
  %277 = load i32, i32* %copline, align 8
  %278 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_line509 = getelementptr inbounds %struct.cop, %struct.cop* %278, i32 0, i32 7
  store i32 %277, i32* %cop_line509, align 4
  %279 = load i16, i16* %warnop, align 2
  %idxprom = zext i16 %279 to i64
  %arrayidx = getelementptr inbounds [0 x i8*], [0 x i8*]* @PL_op_desc, i64 0, i64 %idxprom
  %280 = load i8*, i8** %arrayidx, align 8
  %281 = load i16, i16* %warnop, align 2
  %conv510 = zext i16 %281 to i32
  %cmp511 = icmp eq i32 %conv510, 26
  br i1 %cmp511, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %if.then508
  %282 = load i16, i16* %warnop, align 2
  %conv513 = zext i16 %282 to i32
  %cmp514 = icmp eq i32 %conv513, 25
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %if.then508
  %283 = phi i1 [ true, %if.then508 ], [ %cmp514, %lor.rhs ]
  %284 = zext i1 %283 to i64
  %cond516 = select i1 %283, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.191, i64 0, i64 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.192, i64 0, i64 0)
  call void (i32, i8*, ...) @Perl_warner(i32 12, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.190, i64 0, i64 0), i8* %280, i8* %cond516)
  %285 = load i32, i32* %oldline, align 4
  %286 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_line517 = getelementptr inbounds %struct.cop, %struct.cop* %286, i32 0, i32 7
  store i32 %285, i32* %cop_line517, align 4
  br label %if.end518

if.end518:                                        ; preds = %lor.end, %sw.epilog506
  br label %if.end519

if.end519:                                        ; preds = %if.end518, %land.lhs.true412, %land.lhs.true409, %if.else404
  br label %if.end520

if.end520:                                        ; preds = %if.end519
  %287 = load %struct.op*, %struct.op** %other, align 8
  %tobool521 = icmp ne %struct.op* %287, null
  br i1 %tobool521, label %if.end523, label %if.then522

if.then522:                                       ; preds = %if.end520
  %288 = load %struct.op*, %struct.op** %first, align 8
  store %struct.op* %288, %struct.op** %retval, align 8
  br label %return

if.end523:                                        ; preds = %if.end520
  %289 = load i32, i32* %type.addr, align 4
  %cmp524 = icmp eq i32 %289, 181
  br i1 %cmp524, label %if.then532, label %lor.lhs.false526

lor.lhs.false526:                                 ; preds = %if.end523
  %290 = load i32, i32* %type.addr, align 4
  %cmp527 = icmp eq i32 %290, 182
  br i1 %cmp527, label %if.then532, label %lor.lhs.false529

lor.lhs.false529:                                 ; preds = %lor.lhs.false526
  %291 = load i32, i32* %type.addr, align 4
  %cmp530 = icmp eq i32 %291, 183
  br i1 %cmp530, label %if.then532, label %if.end537

if.then532:                                       ; preds = %lor.lhs.false529, %lor.lhs.false526, %if.end523
  %292 = load %struct.op*, %struct.op** %other, align 8
  %op_private533 = getelementptr inbounds %struct.op, %struct.op* %292, i32 0, i32 6
  %293 = load i8, i8* %op_private533, align 1
  %conv534 = zext i8 %293 to i32
  %or535 = or i32 %conv534, 64
  %conv536 = trunc i32 %or535 to i8
  store i8 %conv536, i8* %op_private533, align 1
  br label %if.end537

if.end537:                                        ; preds = %if.then532, %lor.lhs.false529
  %294 = load i32, i32* %type.addr, align 4
  %295 = load %struct.op*, %struct.op** %first, align 8
  %296 = load %struct.op*, %struct.op** %other, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %296, i32 0, i32 0
  %297 = load %struct.op*, %struct.op** %op_next, align 8
  %tobool538 = icmp ne %struct.op* %297, null
  br i1 %tobool538, label %cond.true539, label %cond.false541

cond.true539:                                     ; preds = %if.end537
  %298 = load %struct.op*, %struct.op** %other, align 8
  %op_next540 = getelementptr inbounds %struct.op, %struct.op* %298, i32 0, i32 0
  %299 = load %struct.op*, %struct.op** %op_next540, align 8
  br label %cond.end543

cond.false541:                                    ; preds = %if.end537
  %300 = load %struct.op*, %struct.op** %other, align 8
  %call542 = call %struct.op* @Perl_op_linklist(%struct.op* %300)
  br label %cond.end543

cond.end543:                                      ; preds = %cond.false541, %cond.true539
  %cond544 = phi %struct.op* [ %299, %cond.true539 ], [ %call542, %cond.false541 ]
  %call545 = call %struct.logop* @S_alloc_LOGOP(i32 %294, %struct.op* %295, %struct.op* %cond544)
  store %struct.logop* %call545, %struct.logop** %logop, align 8
  %301 = load i32, i32* %flags.addr, align 4
  %conv546 = trunc i32 %301 to i8
  %conv547 = zext i8 %conv546 to i32
  %302 = load %struct.logop*, %struct.logop** %logop, align 8
  %op_flags548 = getelementptr inbounds %struct.logop, %struct.logop* %302, i32 0, i32 5
  %303 = load i8, i8* %op_flags548, align 2
  %conv549 = zext i8 %303 to i32
  %or550 = or i32 %conv549, %conv547
  %conv551 = trunc i32 %or550 to i8
  store i8 %conv551, i8* %op_flags548, align 2
  %304 = load i32, i32* %flags.addr, align 4
  %shr = ashr i32 %304, 8
  %or552 = or i32 1, %shr
  %conv553 = trunc i32 %or552 to i8
  %305 = load %struct.logop*, %struct.logop** %logop, align 8
  %op_private554 = getelementptr inbounds %struct.logop, %struct.logop* %305, i32 0, i32 6
  store i8 %conv553, i8* %op_private554, align 1
  %306 = load %struct.op*, %struct.op** %first, align 8
  %op_next555 = getelementptr inbounds %struct.op, %struct.op* %306, i32 0, i32 0
  %307 = load %struct.op*, %struct.op** %op_next555, align 8
  %tobool556 = icmp ne %struct.op* %307, null
  br i1 %tobool556, label %cond.true557, label %cond.false559

cond.true557:                                     ; preds = %cond.end543
  %308 = load %struct.op*, %struct.op** %first, align 8
  %op_next558 = getelementptr inbounds %struct.op, %struct.op* %308, i32 0, i32 0
  %309 = load %struct.op*, %struct.op** %op_next558, align 8
  br label %cond.end561

cond.false559:                                    ; preds = %cond.end543
  %310 = load %struct.op*, %struct.op** %first, align 8
  %call560 = call %struct.op* @Perl_op_linklist(%struct.op* %310)
  br label %cond.end561

cond.end561:                                      ; preds = %cond.false559, %cond.true557
  %cond562 = phi %struct.op* [ %309, %cond.true557 ], [ %call560, %cond.false559 ]
  %311 = load %struct.logop*, %struct.logop** %logop, align 8
  %op_next563 = getelementptr inbounds %struct.logop, %struct.logop* %311, i32 0, i32 0
  store %struct.op* %cond562, %struct.op** %op_next563, align 8
  %312 = load %struct.logop*, %struct.logop** %logop, align 8
  %313 = bitcast %struct.logop* %312 to %struct.op*
  %314 = load %struct.op*, %struct.op** %first, align 8
  %op_next564 = getelementptr inbounds %struct.op, %struct.op* %314, i32 0, i32 0
  store %struct.op* %313, %struct.op** %op_next564, align 8
  %315 = load %struct.logop*, %struct.logop** %logop, align 8
  %316 = bitcast %struct.logop* %315 to %struct.op*
  %317 = load %struct.op*, %struct.op** %first, align 8
  %318 = load %struct.op*, %struct.op** %other, align 8
  %call565 = call %struct.op* @Perl_op_sibling_splice(%struct.op* %316, %struct.op* %317, i32 0, %struct.op* %318)
  %319 = load i8*, i8** @PL_op_mask, align 8
  %tobool566 = icmp ne i8* %319, null
  br i1 %tobool566, label %land.lhs.true567, label %cond.false575

land.lhs.true567:                                 ; preds = %cond.end561
  %320 = load i8*, i8** @PL_op_mask, align 8
  %321 = load i32, i32* %type.addr, align 4
  %idxprom568 = sext i32 %321 to i64
  %arrayidx569 = getelementptr inbounds i8, i8* %320, i64 %idxprom568
  %322 = load i8, i8* %arrayidx569, align 1
  %conv570 = sext i8 %322 to i32
  %tobool571 = icmp ne i32 %conv570, 0
  br i1 %tobool571, label %cond.true572, label %cond.false575

cond.true572:                                     ; preds = %land.lhs.true567
  %323 = load %struct.logop*, %struct.logop** %logop, align 8
  %324 = bitcast %struct.logop* %323 to %struct.op*
  call void @Perl_op_free(%struct.op* %324)
  %325 = load i32, i32* %type.addr, align 4
  %idxprom573 = sext i32 %325 to i64
  %arrayidx574 = getelementptr inbounds [0 x i8*], [0 x i8*]* @PL_op_desc, i64 0, i64 %idxprom573
  %326 = load i8*, i8** %arrayidx574, align 8
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.49, i64 0, i64 0), i8* %326)
  br label %cond.end579

cond.false575:                                    ; preds = %land.lhs.true567, %cond.end561
  %327 = load i32, i32* %type.addr, align 4
  %idxprom576 = sext i32 %327 to i64
  %arrayidx577 = getelementptr inbounds [0 x %struct.op* (%struct.op*)*], [0 x %struct.op* (%struct.op*)*]* @PL_check, i64 0, i64 %idxprom576
  %328 = load %struct.op* (%struct.op*)*, %struct.op* (%struct.op*)** %arrayidx577, align 8
  %329 = load %struct.logop*, %struct.logop** %logop, align 8
  %330 = bitcast %struct.logop* %329 to %struct.op*
  %call578 = call %struct.op* %328(%struct.op* %330)
  br label %cond.end579

cond.end579:                                      ; preds = %cond.false575, %cond.true572
  %cond580 = phi %struct.op* [ null, %cond.true572 ], [ %call578, %cond.false575 ]
  %331 = load i32, i32* %prepend_not, align 4
  %tobool581 = icmp ne i32 %331, 0
  %332 = zext i1 %tobool581 to i64
  %cond582 = select i1 %tobool581, i32 103, i32 0
  %333 = load i32, i32* %type.addr, align 4
  %idxprom583 = sext i32 %333 to i64
  %arrayidx584 = getelementptr inbounds [0 x i32], [0 x i32]* @PL_opargs, i64 0, i64 %idxprom583
  %334 = load i32, i32* %arrayidx584, align 4
  %and585 = and i32 %334, 4
  %tobool586 = icmp ne i32 %and585, 0
  %335 = zext i1 %tobool586 to i64
  %cond587 = select i1 %tobool586, i32 2, i32 0
  %336 = load %struct.logop*, %struct.logop** %logop, align 8
  %337 = bitcast %struct.logop* %336 to %struct.op*
  %call588 = call %struct.op* @Perl_newUNOP(i32 %cond582, i32 %cond587, %struct.op* %337)
  store %struct.op* %call588, %struct.op** %o, align 8
  %338 = load %struct.op*, %struct.op** %o, align 8
  %339 = load %struct.op*, %struct.op** %other, align 8
  %op_next589 = getelementptr inbounds %struct.op, %struct.op* %339, i32 0, i32 0
  store %struct.op* %338, %struct.op** %op_next589, align 8
  %340 = load %struct.op*, %struct.op** %o, align 8
  store %struct.op* %340, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %cond.end579, %if.then522, %if.end403, %if.end336, %if.then6
  %341 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %341
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_newCONDOP(i32 %flags, %struct.op* %first, %struct.op* %trueop, %struct.op* %falseop) #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %flags.addr = alloca i32, align 4
  %first.addr = alloca %struct.op*, align 8
  %trueop.addr = alloca %struct.op*, align 8
  %falseop.addr = alloca %struct.op*, align 8
  %logop = alloca %struct.logop*, align 8
  %start = alloca %struct.op*, align 8
  %o = alloca %struct.op*, align 8
  %cstop = alloca %struct.op*, align 8
  %left = alloca i8, align 1
  %live = alloca %struct.op*, align 8
  %dead = alloca %struct.op*, align 8
  store i32 %flags, i32* %flags.addr, align 4
  store %struct.op* %first, %struct.op** %first.addr, align 8
  store %struct.op* %trueop, %struct.op** %trueop.addr, align 8
  store %struct.op* %falseop, %struct.op** %falseop.addr, align 8
  %0 = load %struct.op*, %struct.op** %falseop.addr, align 8
  %tobool = icmp ne %struct.op* %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load %struct.op*, %struct.op** %first.addr, align 8
  %2 = load %struct.op*, %struct.op** %trueop.addr, align 8
  %call = call %struct.op* @Perl_newLOGOP(i32 176, i32 0, %struct.op* %1, %struct.op* %2)
  store %struct.op* %call, %struct.op** %retval, align 8
  br label %return

if.end:                                           ; preds = %entry
  %3 = load %struct.op*, %struct.op** %trueop.addr, align 8
  %tobool1 = icmp ne %struct.op* %3, null
  br i1 %tobool1, label %if.end4, label %if.then2

if.then2:                                         ; preds = %if.end
  %4 = load %struct.op*, %struct.op** %first.addr, align 8
  %5 = load %struct.op*, %struct.op** %falseop.addr, align 8
  %call3 = call %struct.op* @Perl_newLOGOP(i32 177, i32 0, %struct.op* %4, %struct.op* %5)
  store %struct.op* %call3, %struct.op** %retval, align 8
  br label %return

if.end4:                                          ; preds = %if.end
  %6 = load %struct.op*, %struct.op** %first.addr, align 8
  %call5 = call %struct.op* @S_scalarboolean(%struct.op* %6)
  %7 = load %struct.op*, %struct.op** %first.addr, align 8
  %call6 = call %struct.op* @S_search_const(%struct.op* %7)
  store %struct.op* %call6, %struct.op** %cstop, align 8
  %tobool7 = icmp ne %struct.op* %call6, null
  br i1 %tobool7, label %if.then8, label %if.end163

if.then8:                                         ; preds = %if.end4
  %8 = load %struct.op*, %struct.op** %cstop, align 8
  %9 = bitcast %struct.op* %8 to %struct.svop*
  %op_sv = getelementptr inbounds %struct.svop, %struct.svop* %9, i32 0, i32 7
  %10 = load %struct.sv*, %struct.sv** %op_sv, align 8
  %tobool9 = icmp ne %struct.sv* %10, null
  br i1 %tobool9, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then8
  br i1 true, label %land.rhs, label %land.end101

cond.false:                                       ; preds = %if.then8
  br i1 false, label %land.rhs, label %land.end101

land.rhs:                                         ; preds = %cond.false, %cond.true
  %11 = load %struct.op*, %struct.op** %cstop, align 8
  %12 = bitcast %struct.op* %11 to %struct.svop*
  %op_sv10 = getelementptr inbounds %struct.svop, %struct.svop* %12, i32 0, i32 7
  %13 = load %struct.sv*, %struct.sv** %op_sv10, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %13, i32 0, i32 2
  %14 = load i32, i32* %sv_flags, align 4
  %and = and i32 %14, 2097152
  %tobool11 = icmp ne i32 %and, 0
  br i1 %tobool11, label %cond.true12, label %cond.false13

cond.true12:                                      ; preds = %land.rhs
  br i1 true, label %cond.true14, label %cond.false17

cond.false13:                                     ; preds = %land.rhs
  br i1 false, label %cond.true14, label %cond.false17

cond.true14:                                      ; preds = %cond.false13, %cond.true12
  %15 = load %struct.op*, %struct.op** %cstop, align 8
  %16 = bitcast %struct.op* %15 to %struct.svop*
  %op_sv15 = getelementptr inbounds %struct.svop, %struct.svop* %16, i32 0, i32 7
  %17 = load %struct.sv*, %struct.sv** %op_sv15, align 8
  %call16 = call zeroext i1 @Perl_sv_2bool_flags(%struct.sv* %17, i32 2)
  %conv = zext i1 %call16 to i32
  br label %cond.end98

cond.false17:                                     ; preds = %cond.false13, %cond.true12
  %18 = load %struct.op*, %struct.op** %cstop, align 8
  %19 = bitcast %struct.op* %18 to %struct.svop*
  %op_sv18 = getelementptr inbounds %struct.svop, %struct.svop* %19, i32 0, i32 7
  %20 = load %struct.sv*, %struct.sv** %op_sv18, align 8
  %sv_flags19 = getelementptr inbounds %struct.sv, %struct.sv* %20, i32 0, i32 2
  %21 = load i32, i32* %sv_flags19, align 4
  %and20 = and i32 %21, 65280
  %tobool21 = icmp ne i32 %and20, 0
  br i1 %tobool21, label %cond.false33, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %cond.false17
  %22 = load %struct.op*, %struct.op** %cstop, align 8
  %23 = bitcast %struct.op* %22 to %struct.svop*
  %op_sv22 = getelementptr inbounds %struct.svop, %struct.svop* %23, i32 0, i32 7
  %24 = load %struct.sv*, %struct.sv** %op_sv22, align 8
  %sv_flags23 = getelementptr inbounds %struct.sv, %struct.sv* %24, i32 0, i32 2
  %25 = load i32, i32* %sv_flags23, align 4
  %and24 = and i32 %25, 255
  %cmp = icmp eq i32 %and24, 8
  br i1 %cmp, label %cond.false33, label %lor.lhs.false26

lor.lhs.false26:                                  ; preds = %lor.lhs.false
  %26 = load %struct.op*, %struct.op** %cstop, align 8
  %27 = bitcast %struct.op* %26 to %struct.svop*
  %op_sv27 = getelementptr inbounds %struct.svop, %struct.svop* %27, i32 0, i32 7
  %28 = load %struct.sv*, %struct.sv** %op_sv27, align 8
  %sv_flags28 = getelementptr inbounds %struct.sv, %struct.sv* %28, i32 0, i32 2
  %29 = load i32, i32* %sv_flags28, align 4
  %and29 = and i32 %29, 16826623
  %cmp30 = icmp eq i32 %and29, 16777226
  br i1 %cmp30, label %cond.false33, label %cond.true32

cond.true32:                                      ; preds = %lor.lhs.false26
  br label %cond.end96

cond.false33:                                     ; preds = %lor.lhs.false26, %lor.lhs.false, %cond.false17
  %30 = load %struct.op*, %struct.op** %cstop, align 8
  %31 = bitcast %struct.op* %30 to %struct.svop*
  %op_sv34 = getelementptr inbounds %struct.svop, %struct.svop* %31, i32 0, i32 7
  %32 = load %struct.sv*, %struct.sv** %op_sv34, align 8
  %sv_flags35 = getelementptr inbounds %struct.sv, %struct.sv* %32, i32 0, i32 2
  %33 = load i32, i32* %sv_flags35, align 4
  %and36 = and i32 %33, 1024
  %tobool37 = icmp ne i32 %and36, 0
  br i1 %tobool37, label %cond.true38, label %cond.false56

cond.true38:                                      ; preds = %cond.false33
  %34 = load %struct.op*, %struct.op** %cstop, align 8
  %35 = bitcast %struct.op* %34 to %struct.svop*
  %op_sv39 = getelementptr inbounds %struct.svop, %struct.svop* %35, i32 0, i32 7
  %36 = load %struct.sv*, %struct.sv** %op_sv39, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %36, i32 0, i32 0
  %37 = load i8*, i8** %sv_any, align 8
  %38 = bitcast i8* %37 to %struct.xpv*
  %tobool40 = icmp ne %struct.xpv* %38, null
  br i1 %tobool40, label %land.rhs41, label %land.end55

land.rhs41:                                       ; preds = %cond.true38
  %39 = load %struct.op*, %struct.op** %cstop, align 8
  %40 = bitcast %struct.op* %39 to %struct.svop*
  %op_sv42 = getelementptr inbounds %struct.svop, %struct.svop* %40, i32 0, i32 7
  %41 = load %struct.sv*, %struct.sv** %op_sv42, align 8
  %sv_any43 = getelementptr inbounds %struct.sv, %struct.sv* %41, i32 0, i32 0
  %42 = load i8*, i8** %sv_any43, align 8
  %43 = bitcast i8* %42 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %43, i32 0, i32 2
  %44 = load i64, i64* %xpv_cur, align 8
  %cmp44 = icmp ugt i64 %44, 1
  br i1 %cmp44, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %land.rhs41
  %45 = load %struct.op*, %struct.op** %cstop, align 8
  %46 = bitcast %struct.op* %45 to %struct.svop*
  %op_sv46 = getelementptr inbounds %struct.svop, %struct.svop* %46, i32 0, i32 7
  %47 = load %struct.sv*, %struct.sv** %op_sv46, align 8
  %sv_any47 = getelementptr inbounds %struct.sv, %struct.sv* %47, i32 0, i32 0
  %48 = load i8*, i8** %sv_any47, align 8
  %49 = bitcast i8* %48 to %struct.xpv*
  %xpv_cur48 = getelementptr inbounds %struct.xpv, %struct.xpv* %49, i32 0, i32 2
  %50 = load i64, i64* %xpv_cur48, align 8
  %tobool49 = icmp ne i64 %50, 0
  br i1 %tobool49, label %land.rhs50, label %land.end

land.rhs50:                                       ; preds = %lor.rhs
  %51 = load %struct.op*, %struct.op** %cstop, align 8
  %52 = bitcast %struct.op* %51 to %struct.svop*
  %op_sv51 = getelementptr inbounds %struct.svop, %struct.svop* %52, i32 0, i32 7
  %53 = load %struct.sv*, %struct.sv** %op_sv51, align 8
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %53, i32 0, i32 3
  %svu_pv = bitcast %union.anon* %sv_u to i8**
  %54 = load i8*, i8** %svu_pv, align 8
  %55 = load i8, i8* %54, align 1
  %conv52 = sext i8 %55 to i32
  %cmp53 = icmp ne i32 %conv52, 48
  br label %land.end

land.end:                                         ; preds = %land.rhs50, %lor.rhs
  %56 = phi i1 [ false, %lor.rhs ], [ %cmp53, %land.rhs50 ]
  br label %lor.end

lor.end:                                          ; preds = %land.end, %land.rhs41
  %57 = phi i1 [ true, %land.rhs41 ], [ %56, %land.end ]
  br label %land.end55

land.end55:                                       ; preds = %lor.end, %cond.true38
  %58 = phi i1 [ false, %cond.true38 ], [ %57, %lor.end ]
  %land.ext = zext i1 %58 to i32
  br label %cond.end94

cond.false56:                                     ; preds = %cond.false33
  %59 = load %struct.op*, %struct.op** %cstop, align 8
  %60 = bitcast %struct.op* %59 to %struct.svop*
  %op_sv57 = getelementptr inbounds %struct.svop, %struct.svop* %60, i32 0, i32 7
  %61 = load %struct.sv*, %struct.sv** %op_sv57, align 8
  %sv_flags58 = getelementptr inbounds %struct.sv, %struct.sv* %61, i32 0, i32 2
  %62 = load i32, i32* %sv_flags58, align 4
  %and59 = and i32 %62, 768
  %tobool60 = icmp ne i32 %and59, 0
  br i1 %tobool60, label %cond.true61, label %cond.false90

cond.true61:                                      ; preds = %cond.false56
  %63 = load %struct.op*, %struct.op** %cstop, align 8
  %64 = bitcast %struct.op* %63 to %struct.svop*
  %op_sv62 = getelementptr inbounds %struct.svop, %struct.svop* %64, i32 0, i32 7
  %65 = load %struct.sv*, %struct.sv** %op_sv62, align 8
  %sv_flags63 = getelementptr inbounds %struct.sv, %struct.sv* %65, i32 0, i32 2
  %66 = load i32, i32* %sv_flags63, align 4
  %and64 = and i32 %66, 256
  %tobool65 = icmp ne i32 %and64, 0
  br i1 %tobool65, label %land.lhs.true, label %lor.rhs70

land.lhs.true:                                    ; preds = %cond.true61
  %67 = load %struct.op*, %struct.op** %cstop, align 8
  %68 = bitcast %struct.op* %67 to %struct.svop*
  %op_sv66 = getelementptr inbounds %struct.svop, %struct.svop* %68, i32 0, i32 7
  %69 = load %struct.sv*, %struct.sv** %op_sv66, align 8
  %sv_any67 = getelementptr inbounds %struct.sv, %struct.sv* %69, i32 0, i32 0
  %70 = load i8*, i8** %sv_any67, align 8
  %71 = bitcast i8* %70 to %struct.xpviv*
  %xiv_u = getelementptr inbounds %struct.xpviv, %struct.xpviv* %71, i32 0, i32 4
  %xivu_iv = bitcast %union._xivu* %xiv_u to i64*
  %72 = load i64, i64* %xivu_iv, align 8
  %cmp68 = icmp ne i64 %72, 0
  br i1 %cmp68, label %lor.end89, label %lor.rhs70

lor.rhs70:                                        ; preds = %land.lhs.true, %cond.true61
  %73 = load %struct.op*, %struct.op** %cstop, align 8
  %74 = bitcast %struct.op* %73 to %struct.svop*
  %op_sv71 = getelementptr inbounds %struct.svop, %struct.svop* %74, i32 0, i32 7
  %75 = load %struct.sv*, %struct.sv** %op_sv71, align 8
  %sv_flags72 = getelementptr inbounds %struct.sv, %struct.sv* %75, i32 0, i32 2
  %76 = load i32, i32* %sv_flags72, align 4
  %and73 = and i32 %76, 512
  %tobool74 = icmp ne i32 %and73, 0
  br i1 %tobool74, label %land.rhs75, label %land.end87

land.rhs75:                                       ; preds = %lor.rhs70
  %77 = load %struct.op*, %struct.op** %cstop, align 8
  %78 = bitcast %struct.op* %77 to %struct.svop*
  %op_sv76 = getelementptr inbounds %struct.svop, %struct.svop* %78, i32 0, i32 7
  %79 = load %struct.sv*, %struct.sv** %op_sv76, align 8
  %sv_any77 = getelementptr inbounds %struct.sv, %struct.sv* %79, i32 0, i32 0
  %80 = load i8*, i8** %sv_any77, align 8
  %81 = bitcast i8* %80 to %struct.xpvnv*
  %xnv_u = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %81, i32 0, i32 5
  %xnv_nv = bitcast %union._xnvu* %xnv_u to double*
  %82 = load double, double* %xnv_nv, align 8
  %cmp78 = fcmp uno double %82, %82
  br i1 %cmp78, label %lor.end86, label %lor.rhs79

lor.rhs79:                                        ; preds = %land.rhs75
  %83 = load %struct.op*, %struct.op** %cstop, align 8
  %84 = bitcast %struct.op* %83 to %struct.svop*
  %op_sv80 = getelementptr inbounds %struct.svop, %struct.svop* %84, i32 0, i32 7
  %85 = load %struct.sv*, %struct.sv** %op_sv80, align 8
  %sv_any81 = getelementptr inbounds %struct.sv, %struct.sv* %85, i32 0, i32 0
  %86 = load i8*, i8** %sv_any81, align 8
  %87 = bitcast i8* %86 to %struct.xpvnv*
  %xnv_u82 = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %87, i32 0, i32 5
  %xnv_nv83 = bitcast %union._xnvu* %xnv_u82 to double*
  %88 = load double, double* %xnv_nv83, align 8
  %cmp84 = fcmp une double %88, 0.000000e+00
  br label %lor.end86

lor.end86:                                        ; preds = %lor.rhs79, %land.rhs75
  %89 = phi i1 [ true, %land.rhs75 ], [ %cmp84, %lor.rhs79 ]
  br label %land.end87

land.end87:                                       ; preds = %lor.end86, %lor.rhs70
  %90 = phi i1 [ false, %lor.rhs70 ], [ %89, %lor.end86 ]
  br label %lor.end89

lor.end89:                                        ; preds = %land.end87, %land.lhs.true
  %91 = phi i1 [ true, %land.lhs.true ], [ %90, %land.end87 ]
  %lor.ext = zext i1 %91 to i32
  br label %cond.end

cond.false90:                                     ; preds = %cond.false56
  %92 = load %struct.op*, %struct.op** %cstop, align 8
  %93 = bitcast %struct.op* %92 to %struct.svop*
  %op_sv91 = getelementptr inbounds %struct.svop, %struct.svop* %93, i32 0, i32 7
  %94 = load %struct.sv*, %struct.sv** %op_sv91, align 8
  %call92 = call zeroext i1 @Perl_sv_2bool_flags(%struct.sv* %94, i32 0)
  %conv93 = zext i1 %call92 to i32
  br label %cond.end

cond.end:                                         ; preds = %cond.false90, %lor.end89
  %cond = phi i32 [ %lor.ext, %lor.end89 ], [ %conv93, %cond.false90 ]
  br label %cond.end94

cond.end94:                                       ; preds = %cond.end, %land.end55
  %cond95 = phi i32 [ %land.ext, %land.end55 ], [ %cond, %cond.end ]
  br label %cond.end96

cond.end96:                                       ; preds = %cond.end94, %cond.true32
  %cond97 = phi i32 [ 0, %cond.true32 ], [ %cond95, %cond.end94 ]
  br label %cond.end98

cond.end98:                                       ; preds = %cond.end96, %cond.true14
  %cond99 = phi i32 [ %conv, %cond.true14 ], [ %cond97, %cond.end96 ]
  %tobool100 = icmp ne i32 %cond99, 0
  br label %land.end101

land.end101:                                      ; preds = %cond.end98, %cond.false, %cond.true
  %95 = phi i1 [ false, %cond.false ], [ false, %cond.true ], [ %tobool100, %cond.end98 ]
  %frombool = zext i1 %95 to i8
  store i8 %frombool, i8* %left, align 1
  %96 = load i8, i8* %left, align 1
  %tobool103 = trunc i8 %96 to i1
  br i1 %tobool103, label %cond.true105, label %cond.false106

cond.true105:                                     ; preds = %land.end101
  %97 = load %struct.op*, %struct.op** %trueop.addr, align 8
  br label %cond.end107

cond.false106:                                    ; preds = %land.end101
  %98 = load %struct.op*, %struct.op** %falseop.addr, align 8
  br label %cond.end107

cond.end107:                                      ; preds = %cond.false106, %cond.true105
  %cond108 = phi %struct.op* [ %97, %cond.true105 ], [ %98, %cond.false106 ]
  store %struct.op* %cond108, %struct.op** %live, align 8
  %99 = load i8, i8* %left, align 1
  %tobool109 = trunc i8 %99 to i1
  br i1 %tobool109, label %cond.true111, label %cond.false112

cond.true111:                                     ; preds = %cond.end107
  %100 = load %struct.op*, %struct.op** %falseop.addr, align 8
  br label %cond.end113

cond.false112:                                    ; preds = %cond.end107
  %101 = load %struct.op*, %struct.op** %trueop.addr, align 8
  br label %cond.end113

cond.end113:                                      ; preds = %cond.false112, %cond.true111
  %cond114 = phi %struct.op* [ %100, %cond.true111 ], [ %101, %cond.false112 ]
  store %struct.op* %cond114, %struct.op** %dead, align 8
  %102 = load %struct.op*, %struct.op** %cstop, align 8
  %op_private = getelementptr inbounds %struct.op, %struct.op* %102, i32 0, i32 6
  %103 = load i8, i8* %op_private, align 1
  %conv115 = zext i8 %103 to i32
  %and116 = and i32 %conv115, 64
  %tobool117 = icmp ne i32 %and116, 0
  br i1 %tobool117, label %land.lhs.true118, label %if.end124

land.lhs.true118:                                 ; preds = %cond.end113
  %104 = load %struct.op*, %struct.op** %cstop, align 8
  %op_private119 = getelementptr inbounds %struct.op, %struct.op* %104, i32 0, i32 6
  %105 = load i8, i8* %op_private119, align 1
  %conv120 = zext i8 %105 to i32
  %and121 = and i32 %conv120, 8
  %tobool122 = icmp ne i32 %and121, 0
  br i1 %tobool122, label %if.then123, label %if.end124

if.then123:                                       ; preds = %land.lhs.true118
  %106 = load %struct.op*, %struct.op** %cstop, align 8
  call void @S_no_bareword_allowed(%struct.op* %106)
  br label %if.end124

if.end124:                                        ; preds = %if.then123, %land.lhs.true118, %cond.end113
  %107 = load %struct.op*, %struct.op** %first.addr, align 8
  call void @Perl_op_free(%struct.op* %107)
  %108 = load %struct.op*, %struct.op** %dead, align 8
  call void @Perl_op_free(%struct.op* %108)
  %109 = load %struct.op*, %struct.op** %live, align 8
  %op_type = getelementptr inbounds %struct.op, %struct.op* %109, i32 0, i32 4
  %bf.load = load i16, i16* %op_type, align 8
  %bf.clear = and i16 %bf.load, 511
  %bf.cast = zext i16 %bf.clear to i32
  %cmp125 = icmp eq i32 %bf.cast, 197
  br i1 %cmp125, label %if.then127, label %if.else

if.then127:                                       ; preds = %if.end124
  %110 = load %struct.op*, %struct.op** %live, align 8
  %call128 = call %struct.op* @Perl_newUNOP(i32 0, i32 128, %struct.op* %110)
  store %struct.op* %call128, %struct.op** %live, align 8
  br label %if.end160

if.else:                                          ; preds = %if.end124
  %111 = load %struct.op*, %struct.op** %live, align 8
  %op_type129 = getelementptr inbounds %struct.op, %struct.op* %111, i32 0, i32 4
  %bf.load130 = load i16, i16* %op_type129, align 8
  %bf.clear131 = and i16 %bf.load130, 511
  %bf.cast132 = zext i16 %bf.clear131 to i32
  %cmp133 = icmp eq i32 %bf.cast132, 31
  br i1 %cmp133, label %if.then156, label %lor.lhs.false135

lor.lhs.false135:                                 ; preds = %if.else
  %112 = load %struct.op*, %struct.op** %live, align 8
  %op_type136 = getelementptr inbounds %struct.op, %struct.op* %112, i32 0, i32 4
  %bf.load137 = load i16, i16* %op_type136, align 8
  %bf.clear138 = and i16 %bf.load137, 511
  %bf.cast139 = zext i16 %bf.clear138 to i32
  %cmp140 = icmp eq i32 %bf.cast139, 33
  br i1 %cmp140, label %if.then156, label %lor.lhs.false142

lor.lhs.false142:                                 ; preds = %lor.lhs.false135
  %113 = load %struct.op*, %struct.op** %live, align 8
  %op_type143 = getelementptr inbounds %struct.op, %struct.op* %113, i32 0, i32 4
  %bf.load144 = load i16, i16* %op_type143, align 8
  %bf.clear145 = and i16 %bf.load144, 511
  %bf.cast146 = zext i16 %bf.clear145 to i32
  %cmp147 = icmp eq i32 %bf.cast146, 35
  br i1 %cmp147, label %if.then156, label %lor.lhs.false149

lor.lhs.false149:                                 ; preds = %lor.lhs.false142
  %114 = load %struct.op*, %struct.op** %live, align 8
  %op_type150 = getelementptr inbounds %struct.op, %struct.op* %114, i32 0, i32 4
  %bf.load151 = load i16, i16* %op_type150, align 8
  %bf.clear152 = and i16 %bf.load151, 511
  %bf.cast153 = zext i16 %bf.clear152 to i32
  %cmp154 = icmp eq i32 %bf.cast153, 36
  br i1 %cmp154, label %if.then156, label %if.end159

if.then156:                                       ; preds = %lor.lhs.false149, %lor.lhs.false142, %lor.lhs.false135, %if.else
  %115 = load %struct.op*, %struct.op** %live, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %115, i32 0, i32 5
  %116 = load i8, i8* %op_flags, align 2
  %conv157 = zext i8 %116 to i32
  %or = or i32 %conv157, 128
  %conv158 = trunc i32 %or to i8
  store i8 %conv158, i8* %op_flags, align 2
  br label %if.end159

if.end159:                                        ; preds = %if.then156, %lor.lhs.false149
  br label %if.end160

if.end160:                                        ; preds = %if.end159, %if.then127
  %117 = load %struct.op*, %struct.op** %live, align 8
  %op_folded = getelementptr inbounds %struct.op, %struct.op* %117, i32 0, i32 4
  %bf.load161 = load i16, i16* %op_folded, align 8
  %bf.clear162 = and i16 %bf.load161, -8193
  %bf.set = or i16 %bf.clear162, 8192
  store i16 %bf.set, i16* %op_folded, align 8
  %118 = load %struct.op*, %struct.op** %live, align 8
  store %struct.op* %118, %struct.op** %retval, align 8
  br label %return

if.end163:                                        ; preds = %if.end4
  %119 = load %struct.op*, %struct.op** %first.addr, align 8
  %120 = load %struct.op*, %struct.op** %trueop.addr, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %120, i32 0, i32 0
  %121 = load %struct.op*, %struct.op** %op_next, align 8
  %tobool164 = icmp ne %struct.op* %121, null
  br i1 %tobool164, label %cond.true165, label %cond.false167

cond.true165:                                     ; preds = %if.end163
  %122 = load %struct.op*, %struct.op** %trueop.addr, align 8
  %op_next166 = getelementptr inbounds %struct.op, %struct.op* %122, i32 0, i32 0
  %123 = load %struct.op*, %struct.op** %op_next166, align 8
  br label %cond.end169

cond.false167:                                    ; preds = %if.end163
  %124 = load %struct.op*, %struct.op** %trueop.addr, align 8
  %call168 = call %struct.op* @Perl_op_linklist(%struct.op* %124)
  br label %cond.end169

cond.end169:                                      ; preds = %cond.false167, %cond.true165
  %cond170 = phi %struct.op* [ %123, %cond.true165 ], [ %call168, %cond.false167 ]
  %call171 = call %struct.logop* @S_alloc_LOGOP(i32 180, %struct.op* %119, %struct.op* %cond170)
  store %struct.logop* %call171, %struct.logop** %logop, align 8
  %125 = load i32, i32* %flags.addr, align 4
  %conv172 = trunc i32 %125 to i8
  %conv173 = zext i8 %conv172 to i32
  %126 = load %struct.logop*, %struct.logop** %logop, align 8
  %op_flags174 = getelementptr inbounds %struct.logop, %struct.logop* %126, i32 0, i32 5
  %127 = load i8, i8* %op_flags174, align 2
  %conv175 = zext i8 %127 to i32
  %or176 = or i32 %conv175, %conv173
  %conv177 = trunc i32 %or176 to i8
  store i8 %conv177, i8* %op_flags174, align 2
  %128 = load i32, i32* %flags.addr, align 4
  %shr = ashr i32 %128, 8
  %or178 = or i32 1, %shr
  %conv179 = trunc i32 %or178 to i8
  %129 = load %struct.logop*, %struct.logop** %logop, align 8
  %op_private180 = getelementptr inbounds %struct.logop, %struct.logop* %129, i32 0, i32 6
  store i8 %conv179, i8* %op_private180, align 1
  %130 = load %struct.op*, %struct.op** %falseop.addr, align 8
  %op_next181 = getelementptr inbounds %struct.op, %struct.op* %130, i32 0, i32 0
  %131 = load %struct.op*, %struct.op** %op_next181, align 8
  %tobool182 = icmp ne %struct.op* %131, null
  br i1 %tobool182, label %cond.true183, label %cond.false185

cond.true183:                                     ; preds = %cond.end169
  %132 = load %struct.op*, %struct.op** %falseop.addr, align 8
  %op_next184 = getelementptr inbounds %struct.op, %struct.op* %132, i32 0, i32 0
  %133 = load %struct.op*, %struct.op** %op_next184, align 8
  br label %cond.end187

cond.false185:                                    ; preds = %cond.end169
  %134 = load %struct.op*, %struct.op** %falseop.addr, align 8
  %call186 = call %struct.op* @Perl_op_linklist(%struct.op* %134)
  br label %cond.end187

cond.end187:                                      ; preds = %cond.false185, %cond.true183
  %cond188 = phi %struct.op* [ %133, %cond.true183 ], [ %call186, %cond.false185 ]
  %135 = load %struct.logop*, %struct.logop** %logop, align 8
  %op_next189 = getelementptr inbounds %struct.logop, %struct.logop* %135, i32 0, i32 0
  store %struct.op* %cond188, %struct.op** %op_next189, align 8
  %136 = load i8*, i8** @PL_op_mask, align 8
  %tobool190 = icmp ne i8* %136, null
  br i1 %tobool190, label %land.lhs.true191, label %cond.false195

land.lhs.true191:                                 ; preds = %cond.end187
  %137 = load i8*, i8** @PL_op_mask, align 8
  %arrayidx = getelementptr inbounds i8, i8* %137, i64 180
  %138 = load i8, i8* %arrayidx, align 1
  %conv192 = sext i8 %138 to i32
  %tobool193 = icmp ne i32 %conv192, 0
  br i1 %tobool193, label %cond.true194, label %cond.false195

cond.true194:                                     ; preds = %land.lhs.true191
  %139 = load %struct.logop*, %struct.logop** %logop, align 8
  %140 = bitcast %struct.logop* %139 to %struct.op*
  call void @Perl_op_free(%struct.op* %140)
  %141 = load i8*, i8** getelementptr inbounds ([0 x i8*], [0 x i8*]* @PL_op_desc, i64 0, i64 180), align 8
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.49, i64 0, i64 0), i8* %141)
  br label %cond.end197

cond.false195:                                    ; preds = %land.lhs.true191, %cond.end187
  %142 = load %struct.op* (%struct.op*)*, %struct.op* (%struct.op*)** getelementptr inbounds ([0 x %struct.op* (%struct.op*)*], [0 x %struct.op* (%struct.op*)*]* @PL_check, i64 0, i64 180), align 8
  %143 = load %struct.logop*, %struct.logop** %logop, align 8
  %144 = bitcast %struct.logop* %143 to %struct.op*
  %call196 = call %struct.op* %142(%struct.op* %144)
  br label %cond.end197

cond.end197:                                      ; preds = %cond.false195, %cond.true194
  %cond198 = phi %struct.op* [ null, %cond.true194 ], [ %call196, %cond.false195 ]
  %145 = load %struct.op*, %struct.op** %first.addr, align 8
  %op_next199 = getelementptr inbounds %struct.op, %struct.op* %145, i32 0, i32 0
  %146 = load %struct.op*, %struct.op** %op_next199, align 8
  %tobool200 = icmp ne %struct.op* %146, null
  br i1 %tobool200, label %cond.true201, label %cond.false203

cond.true201:                                     ; preds = %cond.end197
  %147 = load %struct.op*, %struct.op** %first.addr, align 8
  %op_next202 = getelementptr inbounds %struct.op, %struct.op* %147, i32 0, i32 0
  %148 = load %struct.op*, %struct.op** %op_next202, align 8
  br label %cond.end205

cond.false203:                                    ; preds = %cond.end197
  %149 = load %struct.op*, %struct.op** %first.addr, align 8
  %call204 = call %struct.op* @Perl_op_linklist(%struct.op* %149)
  br label %cond.end205

cond.end205:                                      ; preds = %cond.false203, %cond.true201
  %cond206 = phi %struct.op* [ %148, %cond.true201 ], [ %call204, %cond.false203 ]
  store %struct.op* %cond206, %struct.op** %start, align 8
  %150 = load %struct.logop*, %struct.logop** %logop, align 8
  %151 = bitcast %struct.logop* %150 to %struct.op*
  %152 = load %struct.op*, %struct.op** %first.addr, align 8
  %op_next207 = getelementptr inbounds %struct.op, %struct.op* %152, i32 0, i32 0
  store %struct.op* %151, %struct.op** %op_next207, align 8
  %153 = load %struct.logop*, %struct.logop** %logop, align 8
  %154 = bitcast %struct.logop* %153 to %struct.op*
  %155 = load %struct.op*, %struct.op** %first.addr, align 8
  %156 = load %struct.op*, %struct.op** %trueop.addr, align 8
  %call208 = call %struct.op* @Perl_op_sibling_splice(%struct.op* %154, %struct.op* %155, i32 0, %struct.op* %156)
  %157 = load %struct.logop*, %struct.logop** %logop, align 8
  %158 = bitcast %struct.logop* %157 to %struct.op*
  %159 = load %struct.op*, %struct.op** %trueop.addr, align 8
  %160 = load %struct.op*, %struct.op** %falseop.addr, align 8
  %call209 = call %struct.op* @Perl_op_sibling_splice(%struct.op* %158, %struct.op* %159, i32 0, %struct.op* %160)
  %161 = load %struct.logop*, %struct.logop** %logop, align 8
  %162 = bitcast %struct.logop* %161 to %struct.op*
  %call210 = call %struct.op* @Perl_newUNOP(i32 0, i32 0, %struct.op* %162)
  store %struct.op* %call210, %struct.op** %o, align 8
  %163 = load %struct.op*, %struct.op** %o, align 8
  %164 = load %struct.op*, %struct.op** %falseop.addr, align 8
  %op_next211 = getelementptr inbounds %struct.op, %struct.op* %164, i32 0, i32 0
  store %struct.op* %163, %struct.op** %op_next211, align 8
  %165 = load %struct.op*, %struct.op** %trueop.addr, align 8
  %op_next212 = getelementptr inbounds %struct.op, %struct.op* %165, i32 0, i32 0
  store %struct.op* %163, %struct.op** %op_next212, align 8
  %166 = load %struct.op*, %struct.op** %start, align 8
  %167 = load %struct.op*, %struct.op** %o, align 8
  %op_next213 = getelementptr inbounds %struct.op, %struct.op* %167, i32 0, i32 0
  store %struct.op* %166, %struct.op** %op_next213, align 8
  %168 = load %struct.op*, %struct.op** %o, align 8
  store %struct.op* %168, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %cond.end205, %if.end160, %if.then2, %if.then
  %169 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %169
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.op* @S_scalarboolean(%struct.op* %o) #0 {
entry:
  %o.addr = alloca %struct.op*, align 8
  %oldline = alloca i32, align 4
  store %struct.op* %o, %struct.op** %o.addr, align 8
  %0 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type = getelementptr inbounds %struct.op, %struct.op* %0, i32 0, i32 4
  %bf.load = load i16, i16* %op_type, align 8
  %bf.clear = and i16 %bf.load, 511
  %bf.cast = zext i16 %bf.clear to i32
  %cmp = icmp eq i32 %bf.cast, 37
  br i1 %cmp, label %land.lhs.true, label %if.end18

land.lhs.true:                                    ; preds = %entry
  %1 = load %struct.op*, %struct.op** %o.addr, align 8
  %2 = bitcast %struct.op* %1 to %struct.binop*
  %op_first = getelementptr inbounds %struct.binop, %struct.binop* %2, i32 0, i32 7
  %3 = load %struct.op*, %struct.op** %op_first, align 8
  %op_type1 = getelementptr inbounds %struct.op, %struct.op* %3, i32 0, i32 4
  %bf.load2 = load i16, i16* %op_type1, align 8
  %bf.clear3 = and i16 %bf.load2, 511
  %bf.cast4 = zext i16 %bf.clear3 to i32
  %cmp5 = icmp eq i32 %bf.cast4, 5
  br i1 %cmp5, label %land.lhs.true6, label %if.end18

land.lhs.true6:                                   ; preds = %land.lhs.true
  %4 = load %struct.op*, %struct.op** %o.addr, align 8
  %5 = bitcast %struct.op* %4 to %struct.binop*
  %op_first7 = getelementptr inbounds %struct.binop, %struct.binop* %5, i32 0, i32 7
  %6 = load %struct.op*, %struct.op** %op_first7, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %6, i32 0, i32 5
  %7 = load i8, i8* %op_flags, align 2
  %conv = zext i8 %7 to i32
  %and = and i32 %conv, 128
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.end18, label %if.then

if.then:                                          ; preds = %land.lhs.true6
  %call = call zeroext i1 @Perl_ckwarn(i32 28)
  br i1 %call, label %if.then8, label %if.end17

if.then8:                                         ; preds = %if.then
  %8 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_line = getelementptr inbounds %struct.cop, %struct.cop* %8, i32 0, i32 7
  %9 = load i32, i32* %cop_line, align 4
  store i32 %9, i32* %oldline, align 4
  %10 = load %struct.yy_parser*, %struct.yy_parser** @PL_parser, align 8
  %tobool9 = icmp ne %struct.yy_parser* %10, null
  br i1 %tobool9, label %land.lhs.true10, label %if.end

land.lhs.true10:                                  ; preds = %if.then8
  %11 = load %struct.yy_parser*, %struct.yy_parser** @PL_parser, align 8
  %copline = getelementptr inbounds %struct.yy_parser, %struct.yy_parser* %11, i32 0, i32 41
  %12 = load i32, i32* %copline, align 8
  %cmp11 = icmp ne i32 %12, -1
  br i1 %cmp11, label %if.then13, label %if.end

if.then13:                                        ; preds = %land.lhs.true10
  %13 = load %struct.yy_parser*, %struct.yy_parser** @PL_parser, align 8
  %copline14 = getelementptr inbounds %struct.yy_parser, %struct.yy_parser* %13, i32 0, i32 41
  %14 = load i32, i32* %copline14, align 8
  %15 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_line15 = getelementptr inbounds %struct.cop, %struct.cop* %15, i32 0, i32 7
  store i32 %14, i32* %cop_line15, align 4
  br label %if.end

if.end:                                           ; preds = %if.then13, %land.lhs.true10, %if.then8
  call void (i32, i8*, ...) @Perl_warner(i32 28, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.193, i64 0, i64 0))
  %16 = load i32, i32* %oldline, align 4
  %17 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_line16 = getelementptr inbounds %struct.cop, %struct.cop* %17, i32 0, i32 7
  store i32 %16, i32* %cop_line16, align 4
  br label %if.end17

if.end17:                                         ; preds = %if.end, %if.then
  br label %if.end18

if.end18:                                         ; preds = %if.end17, %land.lhs.true6, %land.lhs.true, %entry
  %18 = load %struct.op*, %struct.op** %o.addr, align 8
  %call19 = call %struct.op* @Perl_scalar(%struct.op* %18)
  ret %struct.op* %call19
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.op* @S_search_const(%struct.op* %o) #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %o.addr = alloca %struct.op*, align 8
  %kid = alloca %struct.op*, align 8
  store %struct.op* %o, %struct.op** %o.addr, align 8
  %0 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type = getelementptr inbounds %struct.op, %struct.op* %0, i32 0, i32 4
  %bf.load = load i16, i16* %op_type, align 8
  %bf.clear = and i16 %bf.load, 511
  %bf.cast = zext i16 %bf.clear to i32
  switch i32 %bf.cast, label %sw.epilog24 [
    i32 5, label %sw.bb
    i32 0, label %sw.bb1
    i32 197, label %sw.bb2
    i32 198, label %sw.bb2
    i32 192, label %sw.bb2
  ]

sw.bb:                                            ; preds = %entry
  %1 = load %struct.op*, %struct.op** %o.addr, align 8
  store %struct.op* %1, %struct.op** %retval, align 8
  br label %return

sw.bb1:                                           ; preds = %entry
  %2 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %2, i32 0, i32 5
  %3 = load i8, i8* %op_flags, align 2
  %conv = zext i8 %3 to i32
  %and = and i32 %conv, 4
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %sw.bb1
  %4 = load %struct.op*, %struct.op** %o.addr, align 8
  %5 = bitcast %struct.op* %4 to %struct.unop*
  %op_first = getelementptr inbounds %struct.unop, %struct.unop* %5, i32 0, i32 7
  %6 = load %struct.op*, %struct.op** %op_first, align 8
  %call = call %struct.op* @S_search_const(%struct.op* %6)
  store %struct.op* %call, %struct.op** %retval, align 8
  br label %return

if.end:                                           ; preds = %sw.bb1
  br label %sw.epilog24

sw.bb2:                                           ; preds = %entry, %entry, %entry
  %7 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_flags3 = getelementptr inbounds %struct.op, %struct.op* %7, i32 0, i32 5
  %8 = load i8, i8* %op_flags3, align 2
  %conv4 = zext i8 %8 to i32
  %and5 = and i32 %conv4, 4
  %tobool6 = icmp ne i32 %and5, 0
  br i1 %tobool6, label %if.end8, label %if.then7

if.then7:                                         ; preds = %sw.bb2
  store %struct.op* null, %struct.op** %retval, align 8
  br label %return

if.end8:                                          ; preds = %sw.bb2
  %9 = load %struct.op*, %struct.op** %o.addr, align 8
  %10 = bitcast %struct.op* %9 to %struct.listop*
  %op_first9 = getelementptr inbounds %struct.listop, %struct.listop* %10, i32 0, i32 7
  %11 = load %struct.op*, %struct.op** %op_first9, align 8
  store %struct.op* %11, %struct.op** %kid, align 8
  br label %do.body

do.body:                                          ; preds = %do.cond, %if.end8
  %12 = load %struct.op*, %struct.op** %kid, align 8
  %op_type10 = getelementptr inbounds %struct.op, %struct.op* %12, i32 0, i32 4
  %bf.load11 = load i16, i16* %op_type10, align 8
  %bf.clear12 = and i16 %bf.load11, 511
  %bf.cast13 = zext i16 %bf.clear12 to i32
  switch i32 %bf.cast13, label %sw.default [
    i32 196, label %sw.bb14
    i32 0, label %sw.bb14
    i32 193, label %sw.bb14
  ]

sw.bb14:                                          ; preds = %do.body, %do.body, %do.body
  %13 = load %struct.op*, %struct.op** %kid, align 8
  %op_sibling = getelementptr inbounds %struct.op, %struct.op* %13, i32 0, i32 1
  %14 = load %struct.op*, %struct.op** %op_sibling, align 8
  %add.ptr = getelementptr inbounds %struct.op, %struct.op* %14, i64 0
  store %struct.op* %add.ptr, %struct.op** %kid, align 8
  br label %sw.epilog

sw.default:                                       ; preds = %do.body
  %15 = load %struct.op*, %struct.op** %kid, align 8
  %16 = load %struct.op*, %struct.op** %o.addr, align 8
  %17 = bitcast %struct.op* %16 to %struct.listop*
  %op_last = getelementptr inbounds %struct.listop, %struct.listop* %17, i32 0, i32 8
  %18 = load %struct.op*, %struct.op** %op_last, align 8
  %cmp = icmp ne %struct.op* %15, %18
  br i1 %cmp, label %if.then16, label %if.end17

if.then16:                                        ; preds = %sw.default
  store %struct.op* null, %struct.op** %retval, align 8
  br label %return

if.end17:                                         ; preds = %sw.default
  br label %last

sw.epilog:                                        ; preds = %sw.bb14
  br label %do.cond

do.cond:                                          ; preds = %sw.epilog
  %19 = load %struct.op*, %struct.op** %kid, align 8
  %tobool18 = icmp ne %struct.op* %19, null
  br i1 %tobool18, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %20 = load %struct.op*, %struct.op** %kid, align 8
  %tobool19 = icmp ne %struct.op* %20, null
  br i1 %tobool19, label %if.end22, label %if.then20

if.then20:                                        ; preds = %do.end
  %21 = load %struct.op*, %struct.op** %o.addr, align 8
  %22 = bitcast %struct.op* %21 to %struct.listop*
  %op_last21 = getelementptr inbounds %struct.listop, %struct.listop* %22, i32 0, i32 8
  %23 = load %struct.op*, %struct.op** %op_last21, align 8
  store %struct.op* %23, %struct.op** %kid, align 8
  br label %if.end22

if.end22:                                         ; preds = %if.then20, %do.end
  br label %last

last:                                             ; preds = %if.end22, %if.end17
  %24 = load %struct.op*, %struct.op** %kid, align 8
  %call23 = call %struct.op* @S_search_const(%struct.op* %24)
  store %struct.op* %call23, %struct.op** %retval, align 8
  br label %return

sw.epilog24:                                      ; preds = %entry, %if.end
  store %struct.op* null, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %sw.epilog24, %last, %if.then16, %if.then7, %if.then, %sw.bb
  %25 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %25
}

declare dso_local zeroext i1 @Perl_sv_2bool_flags(%struct.sv*, i32) #3

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_newRANGE(i32 %flags, %struct.op* %left, %struct.op* %right) #0 {
entry:
  %flags.addr = alloca i32, align 4
  %left.addr = alloca %struct.op*, align 8
  %right.addr = alloca %struct.op*, align 8
  %range = alloca %struct.logop*, align 8
  %flip = alloca %struct.op*, align 8
  %flop = alloca %struct.op*, align 8
  %leftstart = alloca %struct.op*, align 8
  %o = alloca %struct.op*, align 8
  store i32 %flags, i32* %flags.addr, align 4
  store %struct.op* %left, %struct.op** %left.addr, align 8
  store %struct.op* %right, %struct.op** %right.addr, align 8
  %0 = load %struct.op*, %struct.op** %left.addr, align 8
  %1 = load %struct.op*, %struct.op** %right.addr, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %1, i32 0, i32 0
  %2 = load %struct.op*, %struct.op** %op_next, align 8
  %tobool = icmp ne %struct.op* %2, null
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %3 = load %struct.op*, %struct.op** %right.addr, align 8
  %op_next1 = getelementptr inbounds %struct.op, %struct.op* %3, i32 0, i32 0
  %4 = load %struct.op*, %struct.op** %op_next1, align 8
  br label %cond.end

cond.false:                                       ; preds = %entry
  %5 = load %struct.op*, %struct.op** %right.addr, align 8
  %call = call %struct.op* @Perl_op_linklist(%struct.op* %5)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.op* [ %4, %cond.true ], [ %call, %cond.false ]
  %call2 = call %struct.logop* @S_alloc_LOGOP(i32 173, %struct.op* %0, %struct.op* %cond)
  store %struct.logop* %call2, %struct.logop** %range, align 8
  %6 = load %struct.logop*, %struct.logop** %range, align 8
  %op_flags = getelementptr inbounds %struct.logop, %struct.logop* %6, i32 0, i32 5
  store i8 4, i8* %op_flags, align 2
  %7 = load %struct.op*, %struct.op** %left.addr, align 8
  %op_next3 = getelementptr inbounds %struct.op, %struct.op* %7, i32 0, i32 0
  %8 = load %struct.op*, %struct.op** %op_next3, align 8
  %tobool4 = icmp ne %struct.op* %8, null
  br i1 %tobool4, label %cond.true5, label %cond.false7

cond.true5:                                       ; preds = %cond.end
  %9 = load %struct.op*, %struct.op** %left.addr, align 8
  %op_next6 = getelementptr inbounds %struct.op, %struct.op* %9, i32 0, i32 0
  %10 = load %struct.op*, %struct.op** %op_next6, align 8
  br label %cond.end9

cond.false7:                                      ; preds = %cond.end
  %11 = load %struct.op*, %struct.op** %left.addr, align 8
  %call8 = call %struct.op* @Perl_op_linklist(%struct.op* %11)
  br label %cond.end9

cond.end9:                                        ; preds = %cond.false7, %cond.true5
  %cond10 = phi %struct.op* [ %10, %cond.true5 ], [ %call8, %cond.false7 ]
  store %struct.op* %cond10, %struct.op** %leftstart, align 8
  %12 = load i32, i32* %flags.addr, align 4
  %shr = ashr i32 %12, 8
  %or = or i32 1, %shr
  %conv = trunc i32 %or to i8
  %13 = load %struct.logop*, %struct.logop** %range, align 8
  %op_private = getelementptr inbounds %struct.logop, %struct.logop* %13, i32 0, i32 6
  store i8 %conv, i8* %op_private, align 1
  %14 = load %struct.logop*, %struct.logop** %range, align 8
  %15 = bitcast %struct.logop* %14 to %struct.op*
  %16 = load %struct.op*, %struct.op** %left.addr, align 8
  %17 = load %struct.op*, %struct.op** %right.addr, align 8
  %call11 = call %struct.op* @Perl_op_sibling_splice(%struct.op* %15, %struct.op* %16, i32 0, %struct.op* %17)
  %18 = load %struct.logop*, %struct.logop** %range, align 8
  %19 = bitcast %struct.logop* %18 to %struct.op*
  %20 = load %struct.logop*, %struct.logop** %range, align 8
  %op_next12 = getelementptr inbounds %struct.logop, %struct.logop* %20, i32 0, i32 0
  store %struct.op* %19, %struct.op** %op_next12, align 8
  %21 = load i32, i32* %flags.addr, align 4
  %22 = load %struct.logop*, %struct.logop** %range, align 8
  %23 = bitcast %struct.logop* %22 to %struct.op*
  %call13 = call %struct.op* @Perl_newUNOP(i32 174, i32 %21, %struct.op* %23)
  store %struct.op* %call13, %struct.op** %flip, align 8
  %24 = load %struct.op*, %struct.op** %flip, align 8
  %call14 = call %struct.op* @Perl_newUNOP(i32 175, i32 0, %struct.op* %24)
  store %struct.op* %call14, %struct.op** %flop, align 8
  %25 = load %struct.op*, %struct.op** %flop, align 8
  %call15 = call %struct.op* @Perl_newUNOP(i32 0, i32 0, %struct.op* %25)
  store %struct.op* %call15, %struct.op** %o, align 8
  %26 = load %struct.op*, %struct.op** %flop, align 8
  %op_next16 = getelementptr inbounds %struct.op, %struct.op* %26, i32 0, i32 0
  %27 = load %struct.op*, %struct.op** %op_next16, align 8
  %tobool17 = icmp ne %struct.op* %27, null
  br i1 %tobool17, label %cond.true18, label %cond.false20

cond.true18:                                      ; preds = %cond.end9
  %28 = load %struct.op*, %struct.op** %flop, align 8
  %op_next19 = getelementptr inbounds %struct.op, %struct.op* %28, i32 0, i32 0
  %29 = load %struct.op*, %struct.op** %op_next19, align 8
  br label %cond.end22

cond.false20:                                     ; preds = %cond.end9
  %30 = load %struct.op*, %struct.op** %flop, align 8
  %call21 = call %struct.op* @Perl_op_linklist(%struct.op* %30)
  br label %cond.end22

cond.end22:                                       ; preds = %cond.false20, %cond.true18
  %cond23 = phi %struct.op* [ %29, %cond.true18 ], [ %call21, %cond.false20 ]
  %31 = load %struct.op*, %struct.op** %leftstart, align 8
  %32 = load %struct.logop*, %struct.logop** %range, align 8
  %op_next24 = getelementptr inbounds %struct.logop, %struct.logop* %32, i32 0, i32 0
  store %struct.op* %31, %struct.op** %op_next24, align 8
  %33 = load %struct.op*, %struct.op** %flip, align 8
  %34 = load %struct.op*, %struct.op** %left.addr, align 8
  %op_next25 = getelementptr inbounds %struct.op, %struct.op* %34, i32 0, i32 0
  store %struct.op* %33, %struct.op** %op_next25, align 8
  %35 = load %struct.op*, %struct.op** %flop, align 8
  %36 = load %struct.op*, %struct.op** %right.addr, align 8
  %op_next26 = getelementptr inbounds %struct.op, %struct.op* %36, i32 0, i32 0
  store %struct.op* %35, %struct.op** %op_next26, align 8
  %call27 = call i64 @Perl_pad_add_name_pvn(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.59, i64 0, i64 0), i64 1, i32 6, %struct.hv* null, %struct.hv* null)
  %37 = load %struct.logop*, %struct.logop** %range, align 8
  %op_targ = getelementptr inbounds %struct.logop, %struct.logop* %37, i32 0, i32 3
  store i64 %call27, i64* %op_targ, align 8
  %38 = load %struct.sv**, %struct.sv*** @PL_curpad, align 8
  %39 = load %struct.logop*, %struct.logop** %range, align 8
  %op_targ28 = getelementptr inbounds %struct.logop, %struct.logop* %39, i32 0, i32 3
  %40 = load i64, i64* %op_targ28, align 8
  %arrayidx = getelementptr inbounds %struct.sv*, %struct.sv** %38, i64 %40
  %41 = load %struct.sv*, %struct.sv** %arrayidx, align 8
  call void @Perl_sv_upgrade(%struct.sv* %41, i32 6)
  %call29 = call i64 @Perl_pad_add_name_pvn(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.59, i64 0, i64 0), i64 1, i32 6, %struct.hv* null, %struct.hv* null)
  %42 = load %struct.op*, %struct.op** %flip, align 8
  %op_targ30 = getelementptr inbounds %struct.op, %struct.op* %42, i32 0, i32 3
  store i64 %call29, i64* %op_targ30, align 8
  %43 = load %struct.sv**, %struct.sv*** @PL_curpad, align 8
  %44 = load %struct.op*, %struct.op** %flip, align 8
  %op_targ31 = getelementptr inbounds %struct.op, %struct.op* %44, i32 0, i32 3
  %45 = load i64, i64* %op_targ31, align 8
  %arrayidx32 = getelementptr inbounds %struct.sv*, %struct.sv** %43, i64 %45
  %46 = load %struct.sv*, %struct.sv** %arrayidx32, align 8
  call void @Perl_sv_upgrade(%struct.sv* %46, i32 6)
  %47 = load %struct.sv**, %struct.sv*** @PL_curpad, align 8
  %48 = load %struct.op*, %struct.op** %flip, align 8
  %op_targ33 = getelementptr inbounds %struct.op, %struct.op* %48, i32 0, i32 3
  %49 = load i64, i64* %op_targ33, align 8
  %arrayidx34 = getelementptr inbounds %struct.sv*, %struct.sv** %47, i64 %49
  %50 = load %struct.sv*, %struct.sv** %arrayidx34, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %50, i32 0, i32 2
  %51 = load i32, i32* %sv_flags, align 4
  %or35 = or i32 %51, 131072
  store i32 %or35, i32* %sv_flags, align 4
  %52 = load %struct.op*, %struct.op** %left.addr, align 8
  %op_type = getelementptr inbounds %struct.op, %struct.op* %52, i32 0, i32 4
  %bf.load = load i16, i16* %op_type, align 8
  %bf.clear = and i16 %bf.load, 511
  %bf.cast = zext i16 %bf.clear to i32
  %cmp = icmp eq i32 %bf.cast, 5
  %53 = zext i1 %cmp to i64
  %cond37 = select i1 %cmp, i32 64, i32 0
  %conv38 = trunc i32 %cond37 to i8
  %54 = load %struct.op*, %struct.op** %flip, align 8
  %op_private39 = getelementptr inbounds %struct.op, %struct.op* %54, i32 0, i32 6
  store i8 %conv38, i8* %op_private39, align 1
  %55 = load %struct.op*, %struct.op** %right.addr, align 8
  %op_type40 = getelementptr inbounds %struct.op, %struct.op* %55, i32 0, i32 4
  %bf.load41 = load i16, i16* %op_type40, align 8
  %bf.clear42 = and i16 %bf.load41, 511
  %bf.cast43 = zext i16 %bf.clear42 to i32
  %cmp44 = icmp eq i32 %bf.cast43, 5
  %56 = zext i1 %cmp44 to i64
  %cond46 = select i1 %cmp44, i32 64, i32 0
  %conv47 = trunc i32 %cond46 to i8
  %57 = load %struct.op*, %struct.op** %flop, align 8
  %op_private48 = getelementptr inbounds %struct.op, %struct.op* %57, i32 0, i32 6
  store i8 %conv47, i8* %op_private48, align 1
  %58 = load %struct.op*, %struct.op** %flip, align 8
  %op_private49 = getelementptr inbounds %struct.op, %struct.op* %58, i32 0, i32 6
  %59 = load i8, i8* %op_private49, align 1
  %conv50 = zext i8 %59 to i32
  %tobool51 = icmp ne i32 %conv50, 0
  br i1 %tobool51, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %cond.end22
  %60 = load %struct.op*, %struct.op** %left.addr, align 8
  %61 = bitcast %struct.op* %60 to %struct.svop*
  %op_private52 = getelementptr inbounds %struct.svop, %struct.svop* %61, i32 0, i32 6
  %62 = load i8, i8* %op_private52, align 1
  %conv53 = zext i8 %62 to i32
  %and = and i32 %conv53, 8
  %tobool54 = icmp ne i32 %and, 0
  br i1 %tobool54, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %63 = load %struct.op*, %struct.op** %left.addr, align 8
  call void @S_no_bareword_allowed(%struct.op* %63)
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %cond.end22
  %64 = load %struct.op*, %struct.op** %flop, align 8
  %op_private55 = getelementptr inbounds %struct.op, %struct.op* %64, i32 0, i32 6
  %65 = load i8, i8* %op_private55, align 1
  %conv56 = zext i8 %65 to i32
  %tobool57 = icmp ne i32 %conv56, 0
  br i1 %tobool57, label %land.lhs.true58, label %if.end64

land.lhs.true58:                                  ; preds = %if.end
  %66 = load %struct.op*, %struct.op** %right.addr, align 8
  %67 = bitcast %struct.op* %66 to %struct.svop*
  %op_private59 = getelementptr inbounds %struct.svop, %struct.svop* %67, i32 0, i32 6
  %68 = load i8, i8* %op_private59, align 1
  %conv60 = zext i8 %68 to i32
  %and61 = and i32 %conv60, 8
  %tobool62 = icmp ne i32 %and61, 0
  br i1 %tobool62, label %if.then63, label %if.end64

if.then63:                                        ; preds = %land.lhs.true58
  %69 = load %struct.op*, %struct.op** %right.addr, align 8
  call void @S_no_bareword_allowed(%struct.op* %69)
  br label %if.end64

if.end64:                                         ; preds = %if.then63, %land.lhs.true58, %if.end
  %70 = load %struct.op*, %struct.op** %o, align 8
  %71 = load %struct.op*, %struct.op** %flip, align 8
  %op_next65 = getelementptr inbounds %struct.op, %struct.op* %71, i32 0, i32 0
  store %struct.op* %70, %struct.op** %op_next65, align 8
  %72 = load %struct.op*, %struct.op** %flip, align 8
  %op_private66 = getelementptr inbounds %struct.op, %struct.op* %72, i32 0, i32 6
  %73 = load i8, i8* %op_private66, align 1
  %tobool67 = icmp ne i8 %73, 0
  br i1 %tobool67, label %lor.lhs.false, label %if.then70

lor.lhs.false:                                    ; preds = %if.end64
  %74 = load %struct.op*, %struct.op** %flop, align 8
  %op_private68 = getelementptr inbounds %struct.op, %struct.op* %74, i32 0, i32 6
  %75 = load i8, i8* %op_private68, align 1
  %tobool69 = icmp ne i8 %75, 0
  br i1 %tobool69, label %if.end79, label %if.then70

if.then70:                                        ; preds = %lor.lhs.false, %if.end64
  %76 = load %struct.op*, %struct.op** %o, align 8
  %op_next71 = getelementptr inbounds %struct.op, %struct.op* %76, i32 0, i32 0
  %77 = load %struct.op*, %struct.op** %op_next71, align 8
  %tobool72 = icmp ne %struct.op* %77, null
  br i1 %tobool72, label %cond.true73, label %cond.false75

cond.true73:                                      ; preds = %if.then70
  %78 = load %struct.op*, %struct.op** %o, align 8
  %op_next74 = getelementptr inbounds %struct.op, %struct.op* %78, i32 0, i32 0
  %79 = load %struct.op*, %struct.op** %op_next74, align 8
  br label %cond.end77

cond.false75:                                     ; preds = %if.then70
  %80 = load %struct.op*, %struct.op** %o, align 8
  %call76 = call %struct.op* @Perl_op_linklist(%struct.op* %80)
  br label %cond.end77

cond.end77:                                       ; preds = %cond.false75, %cond.true73
  %cond78 = phi %struct.op* [ %79, %cond.true73 ], [ %call76, %cond.false75 ]
  br label %if.end79

if.end79:                                         ; preds = %cond.end77, %lor.lhs.false
  %81 = load %struct.op*, %struct.op** %o, align 8
  ret %struct.op* %81
}

declare dso_local void @Perl_sv_upgrade(%struct.sv*, i32) #3

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_newLOOPOP(i32 %flags, i32 %debuggable, %struct.op* %expr, %struct.op* %block) #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %flags.addr = alloca i32, align 4
  %debuggable.addr = alloca i32, align 4
  %expr.addr = alloca %struct.op*, align 8
  %block.addr = alloca %struct.op*, align 8
  %listop = alloca %struct.op*, align 8
  %o = alloca %struct.op*, align 8
  %once = alloca i8, align 1
  %k1 = alloca %struct.op*, align 8
  %k2 = alloca %struct.op*, align 8
  store i32 %flags, i32* %flags.addr, align 4
  store i32 %debuggable, i32* %debuggable.addr, align 4
  store %struct.op* %expr, %struct.op** %expr.addr, align 8
  store %struct.op* %block, %struct.op** %block.addr, align 8
  %0 = load %struct.op*, %struct.op** %block.addr, align 8
  %tobool = icmp ne %struct.op* %0, null
  br i1 %tobool, label %land.lhs.true, label %land.end

land.lhs.true:                                    ; preds = %entry
  %1 = load %struct.op*, %struct.op** %block.addr, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %1, i32 0, i32 5
  %2 = load i8, i8* %op_flags, align 2
  %conv = zext i8 %2 to i32
  %and = and i32 %conv, 128
  %tobool1 = icmp ne i32 %and, 0
  br i1 %tobool1, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %land.lhs.true
  %3 = load %struct.op*, %struct.op** %block.addr, align 8
  %op_type = getelementptr inbounds %struct.op, %struct.op* %3, i32 0, i32 4
  %bf.load = load i16, i16* %op_type, align 8
  %bf.clear = and i16 %bf.load, 511
  %bf.cast = zext i16 %bf.clear to i32
  %cmp = icmp eq i32 %bf.cast, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true, %entry
  %4 = phi i1 [ false, %land.lhs.true ], [ false, %entry ], [ %cmp, %land.rhs ]
  %frombool = zext i1 %4 to i8
  store i8 %frombool, i8* %once, align 1
  %5 = load i32, i32* %debuggable.addr, align 4
  %6 = load %struct.op*, %struct.op** %expr.addr, align 8
  %tobool3 = icmp ne %struct.op* %6, null
  br i1 %tobool3, label %if.then, label %if.end368

if.then:                                          ; preds = %land.end
  %7 = load i8, i8* %once, align 1
  %tobool4 = trunc i8 %7 to i1
  br i1 %tobool4, label %land.lhs.true6, label %if.end

land.lhs.true6:                                   ; preds = %if.then
  %8 = load %struct.op*, %struct.op** %expr.addr, align 8
  %op_type7 = getelementptr inbounds %struct.op, %struct.op* %8, i32 0, i32 4
  %bf.load8 = load i16, i16* %op_type7, align 8
  %bf.clear9 = and i16 %bf.load8, 511
  %bf.cast10 = zext i16 %bf.clear9 to i32
  %cmp11 = icmp eq i32 %bf.cast10, 5
  br i1 %cmp11, label %land.lhs.true13, label %lor.lhs.false99

land.lhs.true13:                                  ; preds = %land.lhs.true6
  %9 = load %struct.op*, %struct.op** %expr.addr, align 8
  %10 = bitcast %struct.op* %9 to %struct.svop*
  %op_sv = getelementptr inbounds %struct.svop, %struct.svop* %10, i32 0, i32 7
  %11 = load %struct.sv*, %struct.sv** %op_sv, align 8
  %tobool14 = icmp ne %struct.sv* %11, null
  br i1 %tobool14, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true13
  br i1 true, label %land.lhs.true15, label %if.then231

cond.false:                                       ; preds = %land.lhs.true13
  br i1 false, label %land.lhs.true15, label %if.then231

land.lhs.true15:                                  ; preds = %cond.false, %cond.true
  %12 = load %struct.op*, %struct.op** %expr.addr, align 8
  %13 = bitcast %struct.op* %12 to %struct.svop*
  %op_sv16 = getelementptr inbounds %struct.svop, %struct.svop* %13, i32 0, i32 7
  %14 = load %struct.sv*, %struct.sv** %op_sv16, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %14, i32 0, i32 2
  %15 = load i32, i32* %sv_flags, align 4
  %and17 = and i32 %15, 2097152
  %tobool18 = icmp ne i32 %and17, 0
  br i1 %tobool18, label %cond.true19, label %cond.false20

cond.true19:                                      ; preds = %land.lhs.true15
  br i1 true, label %cond.true21, label %cond.false24

cond.false20:                                     ; preds = %land.lhs.true15
  br i1 false, label %cond.true21, label %cond.false24

cond.true21:                                      ; preds = %cond.false20, %cond.true19
  %16 = load %struct.op*, %struct.op** %expr.addr, align 8
  %17 = bitcast %struct.op* %16 to %struct.svop*
  %op_sv22 = getelementptr inbounds %struct.svop, %struct.svop* %17, i32 0, i32 7
  %18 = load %struct.sv*, %struct.sv** %op_sv22, align 8
  %call = call zeroext i1 @Perl_sv_2bool_flags(%struct.sv* %18, i32 2)
  br i1 %call, label %lor.lhs.false99, label %if.then231

cond.false24:                                     ; preds = %cond.false20, %cond.true19
  %19 = load %struct.op*, %struct.op** %expr.addr, align 8
  %20 = bitcast %struct.op* %19 to %struct.svop*
  %op_sv25 = getelementptr inbounds %struct.svop, %struct.svop* %20, i32 0, i32 7
  %21 = load %struct.sv*, %struct.sv** %op_sv25, align 8
  %sv_flags26 = getelementptr inbounds %struct.sv, %struct.sv* %21, i32 0, i32 2
  %22 = load i32, i32* %sv_flags26, align 4
  %and27 = and i32 %22, 65280
  %tobool28 = icmp ne i32 %and27, 0
  br i1 %tobool28, label %cond.false41, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %cond.false24
  %23 = load %struct.op*, %struct.op** %expr.addr, align 8
  %24 = bitcast %struct.op* %23 to %struct.svop*
  %op_sv29 = getelementptr inbounds %struct.svop, %struct.svop* %24, i32 0, i32 7
  %25 = load %struct.sv*, %struct.sv** %op_sv29, align 8
  %sv_flags30 = getelementptr inbounds %struct.sv, %struct.sv* %25, i32 0, i32 2
  %26 = load i32, i32* %sv_flags30, align 4
  %and31 = and i32 %26, 255
  %cmp32 = icmp eq i32 %and31, 8
  br i1 %cmp32, label %cond.false41, label %lor.lhs.false34

lor.lhs.false34:                                  ; preds = %lor.lhs.false
  %27 = load %struct.op*, %struct.op** %expr.addr, align 8
  %28 = bitcast %struct.op* %27 to %struct.svop*
  %op_sv35 = getelementptr inbounds %struct.svop, %struct.svop* %28, i32 0, i32 7
  %29 = load %struct.sv*, %struct.sv** %op_sv35, align 8
  %sv_flags36 = getelementptr inbounds %struct.sv, %struct.sv* %29, i32 0, i32 2
  %30 = load i32, i32* %sv_flags36, align 4
  %and37 = and i32 %30, 16826623
  %cmp38 = icmp eq i32 %and37, 16777226
  br i1 %cmp38, label %cond.false41, label %cond.true40

cond.true40:                                      ; preds = %lor.lhs.false34
  br i1 false, label %lor.lhs.false99, label %if.then231

cond.false41:                                     ; preds = %lor.lhs.false34, %lor.lhs.false, %cond.false24
  %31 = load %struct.op*, %struct.op** %expr.addr, align 8
  %32 = bitcast %struct.op* %31 to %struct.svop*
  %op_sv42 = getelementptr inbounds %struct.svop, %struct.svop* %32, i32 0, i32 7
  %33 = load %struct.sv*, %struct.sv** %op_sv42, align 8
  %sv_flags43 = getelementptr inbounds %struct.sv, %struct.sv* %33, i32 0, i32 2
  %34 = load i32, i32* %sv_flags43, align 4
  %and44 = and i32 %34, 1024
  %tobool45 = icmp ne i32 %and44, 0
  br i1 %tobool45, label %cond.true46, label %cond.false64

cond.true46:                                      ; preds = %cond.false41
  %35 = load %struct.op*, %struct.op** %expr.addr, align 8
  %36 = bitcast %struct.op* %35 to %struct.svop*
  %op_sv47 = getelementptr inbounds %struct.svop, %struct.svop* %36, i32 0, i32 7
  %37 = load %struct.sv*, %struct.sv** %op_sv47, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %37, i32 0, i32 0
  %38 = load i8*, i8** %sv_any, align 8
  %39 = bitcast i8* %38 to %struct.xpv*
  %tobool48 = icmp ne %struct.xpv* %39, null
  br i1 %tobool48, label %land.lhs.true49, label %if.then231

land.lhs.true49:                                  ; preds = %cond.true46
  %40 = load %struct.op*, %struct.op** %expr.addr, align 8
  %41 = bitcast %struct.op* %40 to %struct.svop*
  %op_sv50 = getelementptr inbounds %struct.svop, %struct.svop* %41, i32 0, i32 7
  %42 = load %struct.sv*, %struct.sv** %op_sv50, align 8
  %sv_any51 = getelementptr inbounds %struct.sv, %struct.sv* %42, i32 0, i32 0
  %43 = load i8*, i8** %sv_any51, align 8
  %44 = bitcast i8* %43 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %44, i32 0, i32 2
  %45 = load i64, i64* %xpv_cur, align 8
  %cmp52 = icmp ugt i64 %45, 1
  br i1 %cmp52, label %lor.lhs.false99, label %lor.lhs.false54

lor.lhs.false54:                                  ; preds = %land.lhs.true49
  %46 = load %struct.op*, %struct.op** %expr.addr, align 8
  %47 = bitcast %struct.op* %46 to %struct.svop*
  %op_sv55 = getelementptr inbounds %struct.svop, %struct.svop* %47, i32 0, i32 7
  %48 = load %struct.sv*, %struct.sv** %op_sv55, align 8
  %sv_any56 = getelementptr inbounds %struct.sv, %struct.sv* %48, i32 0, i32 0
  %49 = load i8*, i8** %sv_any56, align 8
  %50 = bitcast i8* %49 to %struct.xpv*
  %xpv_cur57 = getelementptr inbounds %struct.xpv, %struct.xpv* %50, i32 0, i32 2
  %51 = load i64, i64* %xpv_cur57, align 8
  %tobool58 = icmp ne i64 %51, 0
  br i1 %tobool58, label %land.lhs.true59, label %if.then231

land.lhs.true59:                                  ; preds = %lor.lhs.false54
  %52 = load %struct.op*, %struct.op** %expr.addr, align 8
  %53 = bitcast %struct.op* %52 to %struct.svop*
  %op_sv60 = getelementptr inbounds %struct.svop, %struct.svop* %53, i32 0, i32 7
  %54 = load %struct.sv*, %struct.sv** %op_sv60, align 8
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %54, i32 0, i32 3
  %svu_pv = bitcast %union.anon* %sv_u to i8**
  %55 = load i8*, i8** %svu_pv, align 8
  %56 = load i8, i8* %55, align 1
  %conv61 = sext i8 %56 to i32
  %cmp62 = icmp ne i32 %conv61, 48
  br i1 %cmp62, label %lor.lhs.false99, label %if.then231

cond.false64:                                     ; preds = %cond.false41
  %57 = load %struct.op*, %struct.op** %expr.addr, align 8
  %58 = bitcast %struct.op* %57 to %struct.svop*
  %op_sv65 = getelementptr inbounds %struct.svop, %struct.svop* %58, i32 0, i32 7
  %59 = load %struct.sv*, %struct.sv** %op_sv65, align 8
  %sv_flags66 = getelementptr inbounds %struct.sv, %struct.sv* %59, i32 0, i32 2
  %60 = load i32, i32* %sv_flags66, align 4
  %and67 = and i32 %60, 768
  %tobool68 = icmp ne i32 %and67, 0
  br i1 %tobool68, label %cond.true69, label %cond.false95

cond.true69:                                      ; preds = %cond.false64
  %61 = load %struct.op*, %struct.op** %expr.addr, align 8
  %62 = bitcast %struct.op* %61 to %struct.svop*
  %op_sv70 = getelementptr inbounds %struct.svop, %struct.svop* %62, i32 0, i32 7
  %63 = load %struct.sv*, %struct.sv** %op_sv70, align 8
  %sv_flags71 = getelementptr inbounds %struct.sv, %struct.sv* %63, i32 0, i32 2
  %64 = load i32, i32* %sv_flags71, align 4
  %and72 = and i32 %64, 256
  %tobool73 = icmp ne i32 %and72, 0
  br i1 %tobool73, label %land.lhs.true74, label %lor.lhs.false79

land.lhs.true74:                                  ; preds = %cond.true69
  %65 = load %struct.op*, %struct.op** %expr.addr, align 8
  %66 = bitcast %struct.op* %65 to %struct.svop*
  %op_sv75 = getelementptr inbounds %struct.svop, %struct.svop* %66, i32 0, i32 7
  %67 = load %struct.sv*, %struct.sv** %op_sv75, align 8
  %sv_any76 = getelementptr inbounds %struct.sv, %struct.sv* %67, i32 0, i32 0
  %68 = load i8*, i8** %sv_any76, align 8
  %69 = bitcast i8* %68 to %struct.xpviv*
  %xiv_u = getelementptr inbounds %struct.xpviv, %struct.xpviv* %69, i32 0, i32 4
  %xivu_iv = bitcast %union._xivu* %xiv_u to i64*
  %70 = load i64, i64* %xivu_iv, align 8
  %cmp77 = icmp ne i64 %70, 0
  br i1 %cmp77, label %lor.lhs.false99, label %lor.lhs.false79

lor.lhs.false79:                                  ; preds = %land.lhs.true74, %cond.true69
  %71 = load %struct.op*, %struct.op** %expr.addr, align 8
  %72 = bitcast %struct.op* %71 to %struct.svop*
  %op_sv80 = getelementptr inbounds %struct.svop, %struct.svop* %72, i32 0, i32 7
  %73 = load %struct.sv*, %struct.sv** %op_sv80, align 8
  %sv_flags81 = getelementptr inbounds %struct.sv, %struct.sv* %73, i32 0, i32 2
  %74 = load i32, i32* %sv_flags81, align 4
  %and82 = and i32 %74, 512
  %tobool83 = icmp ne i32 %and82, 0
  br i1 %tobool83, label %land.lhs.true84, label %if.then231

land.lhs.true84:                                  ; preds = %lor.lhs.false79
  %75 = load %struct.op*, %struct.op** %expr.addr, align 8
  %76 = bitcast %struct.op* %75 to %struct.svop*
  %op_sv85 = getelementptr inbounds %struct.svop, %struct.svop* %76, i32 0, i32 7
  %77 = load %struct.sv*, %struct.sv** %op_sv85, align 8
  %sv_any86 = getelementptr inbounds %struct.sv, %struct.sv* %77, i32 0, i32 0
  %78 = load i8*, i8** %sv_any86, align 8
  %79 = bitcast i8* %78 to %struct.xpvnv*
  %xnv_u = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %79, i32 0, i32 5
  %xnv_nv = bitcast %union._xnvu* %xnv_u to double*
  %80 = load double, double* %xnv_nv, align 8
  %cmp87 = fcmp uno double %80, %80
  br i1 %cmp87, label %lor.lhs.false99, label %lor.lhs.false88

lor.lhs.false88:                                  ; preds = %land.lhs.true84
  %81 = load %struct.op*, %struct.op** %expr.addr, align 8
  %82 = bitcast %struct.op* %81 to %struct.svop*
  %op_sv89 = getelementptr inbounds %struct.svop, %struct.svop* %82, i32 0, i32 7
  %83 = load %struct.sv*, %struct.sv** %op_sv89, align 8
  %sv_any90 = getelementptr inbounds %struct.sv, %struct.sv* %83, i32 0, i32 0
  %84 = load i8*, i8** %sv_any90, align 8
  %85 = bitcast i8* %84 to %struct.xpvnv*
  %xnv_u91 = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %85, i32 0, i32 5
  %xnv_nv92 = bitcast %union._xnvu* %xnv_u91 to double*
  %86 = load double, double* %xnv_nv92, align 8
  %cmp93 = fcmp une double %86, 0.000000e+00
  br i1 %cmp93, label %lor.lhs.false99, label %if.then231

cond.false95:                                     ; preds = %cond.false64
  %87 = load %struct.op*, %struct.op** %expr.addr, align 8
  %88 = bitcast %struct.op* %87 to %struct.svop*
  %op_sv96 = getelementptr inbounds %struct.svop, %struct.svop* %88, i32 0, i32 7
  %89 = load %struct.sv*, %struct.sv** %op_sv96, align 8
  %call97 = call zeroext i1 @Perl_sv_2bool_flags(%struct.sv* %89, i32 0)
  br i1 %call97, label %lor.lhs.false99, label %if.then231

lor.lhs.false99:                                  ; preds = %cond.false95, %lor.lhs.false88, %land.lhs.true84, %land.lhs.true74, %land.lhs.true59, %land.lhs.true49, %cond.true40, %cond.true21, %land.lhs.true6
  %90 = load %struct.op*, %struct.op** %expr.addr, align 8
  %op_type100 = getelementptr inbounds %struct.op, %struct.op* %90, i32 0, i32 4
  %bf.load101 = load i16, i16* %op_type100, align 8
  %bf.clear102 = and i16 %bf.load101, 511
  %bf.cast103 = zext i16 %bf.clear102 to i32
  %cmp104 = icmp eq i32 %bf.cast103, 103
  br i1 %cmp104, label %land.lhs.true106, label %if.end

land.lhs.true106:                                 ; preds = %lor.lhs.false99
  %91 = load %struct.op*, %struct.op** %expr.addr, align 8
  %92 = bitcast %struct.op* %91 to %struct.unop*
  %op_first = getelementptr inbounds %struct.unop, %struct.unop* %92, i32 0, i32 7
  %93 = load %struct.op*, %struct.op** %op_first, align 8
  %op_type107 = getelementptr inbounds %struct.op, %struct.op* %93, i32 0, i32 4
  %bf.load108 = load i16, i16* %op_type107, align 8
  %bf.clear109 = and i16 %bf.load108, 511
  %bf.cast110 = zext i16 %bf.clear109 to i32
  %cmp111 = icmp eq i32 %bf.cast110, 5
  br i1 %cmp111, label %land.lhs.true113, label %if.end

land.lhs.true113:                                 ; preds = %land.lhs.true106
  %94 = load %struct.op*, %struct.op** %expr.addr, align 8
  %95 = bitcast %struct.op* %94 to %struct.unop*
  %op_first114 = getelementptr inbounds %struct.unop, %struct.unop* %95, i32 0, i32 7
  %96 = load %struct.op*, %struct.op** %op_first114, align 8
  %97 = bitcast %struct.op* %96 to %struct.svop*
  %op_sv115 = getelementptr inbounds %struct.svop, %struct.svop* %97, i32 0, i32 7
  %98 = load %struct.sv*, %struct.sv** %op_sv115, align 8
  %tobool116 = icmp ne %struct.sv* %98, null
  br i1 %tobool116, label %cond.true117, label %cond.false118

cond.true117:                                     ; preds = %land.lhs.true113
  br i1 true, label %land.lhs.true119, label %if.end

cond.false118:                                    ; preds = %land.lhs.true113
  br i1 false, label %land.lhs.true119, label %if.end

land.lhs.true119:                                 ; preds = %cond.false118, %cond.true117
  %99 = load %struct.op*, %struct.op** %expr.addr, align 8
  %100 = bitcast %struct.op* %99 to %struct.unop*
  %op_first120 = getelementptr inbounds %struct.unop, %struct.unop* %100, i32 0, i32 7
  %101 = load %struct.op*, %struct.op** %op_first120, align 8
  %102 = bitcast %struct.op* %101 to %struct.svop*
  %op_sv121 = getelementptr inbounds %struct.svop, %struct.svop* %102, i32 0, i32 7
  %103 = load %struct.sv*, %struct.sv** %op_sv121, align 8
  %sv_flags122 = getelementptr inbounds %struct.sv, %struct.sv* %103, i32 0, i32 2
  %104 = load i32, i32* %sv_flags122, align 4
  %and123 = and i32 %104, 2097152
  %tobool124 = icmp ne i32 %and123, 0
  br i1 %tobool124, label %cond.true125, label %cond.false126

cond.true125:                                     ; preds = %land.lhs.true119
  br i1 true, label %cond.true127, label %cond.false132

cond.false126:                                    ; preds = %land.lhs.true119
  br i1 false, label %cond.true127, label %cond.false132

cond.true127:                                     ; preds = %cond.false126, %cond.true125
  %105 = load %struct.op*, %struct.op** %expr.addr, align 8
  %106 = bitcast %struct.op* %105 to %struct.unop*
  %op_first128 = getelementptr inbounds %struct.unop, %struct.unop* %106, i32 0, i32 7
  %107 = load %struct.op*, %struct.op** %op_first128, align 8
  %108 = bitcast %struct.op* %107 to %struct.svop*
  %op_sv129 = getelementptr inbounds %struct.svop, %struct.svop* %108, i32 0, i32 7
  %109 = load %struct.sv*, %struct.sv** %op_sv129, align 8
  %call130 = call zeroext i1 @Perl_sv_2bool_flags(%struct.sv* %109, i32 2)
  br i1 %call130, label %if.then231, label %if.end

cond.false132:                                    ; preds = %cond.false126, %cond.true125
  %110 = load %struct.op*, %struct.op** %expr.addr, align 8
  %111 = bitcast %struct.op* %110 to %struct.unop*
  %op_first133 = getelementptr inbounds %struct.unop, %struct.unop* %111, i32 0, i32 7
  %112 = load %struct.op*, %struct.op** %op_first133, align 8
  %113 = bitcast %struct.op* %112 to %struct.svop*
  %op_sv134 = getelementptr inbounds %struct.svop, %struct.svop* %113, i32 0, i32 7
  %114 = load %struct.sv*, %struct.sv** %op_sv134, align 8
  %sv_flags135 = getelementptr inbounds %struct.sv, %struct.sv* %114, i32 0, i32 2
  %115 = load i32, i32* %sv_flags135, align 4
  %and136 = and i32 %115, 65280
  %tobool137 = icmp ne i32 %and136, 0
  br i1 %tobool137, label %cond.false153, label %lor.lhs.false138

lor.lhs.false138:                                 ; preds = %cond.false132
  %116 = load %struct.op*, %struct.op** %expr.addr, align 8
  %117 = bitcast %struct.op* %116 to %struct.unop*
  %op_first139 = getelementptr inbounds %struct.unop, %struct.unop* %117, i32 0, i32 7
  %118 = load %struct.op*, %struct.op** %op_first139, align 8
  %119 = bitcast %struct.op* %118 to %struct.svop*
  %op_sv140 = getelementptr inbounds %struct.svop, %struct.svop* %119, i32 0, i32 7
  %120 = load %struct.sv*, %struct.sv** %op_sv140, align 8
  %sv_flags141 = getelementptr inbounds %struct.sv, %struct.sv* %120, i32 0, i32 2
  %121 = load i32, i32* %sv_flags141, align 4
  %and142 = and i32 %121, 255
  %cmp143 = icmp eq i32 %and142, 8
  br i1 %cmp143, label %cond.false153, label %lor.lhs.false145

lor.lhs.false145:                                 ; preds = %lor.lhs.false138
  %122 = load %struct.op*, %struct.op** %expr.addr, align 8
  %123 = bitcast %struct.op* %122 to %struct.unop*
  %op_first146 = getelementptr inbounds %struct.unop, %struct.unop* %123, i32 0, i32 7
  %124 = load %struct.op*, %struct.op** %op_first146, align 8
  %125 = bitcast %struct.op* %124 to %struct.svop*
  %op_sv147 = getelementptr inbounds %struct.svop, %struct.svop* %125, i32 0, i32 7
  %126 = load %struct.sv*, %struct.sv** %op_sv147, align 8
  %sv_flags148 = getelementptr inbounds %struct.sv, %struct.sv* %126, i32 0, i32 2
  %127 = load i32, i32* %sv_flags148, align 4
  %and149 = and i32 %127, 16826623
  %cmp150 = icmp eq i32 %and149, 16777226
  br i1 %cmp150, label %cond.false153, label %cond.true152

cond.true152:                                     ; preds = %lor.lhs.false145
  br i1 false, label %if.then231, label %if.end

cond.false153:                                    ; preds = %lor.lhs.false145, %lor.lhs.false138, %cond.false132
  %128 = load %struct.op*, %struct.op** %expr.addr, align 8
  %129 = bitcast %struct.op* %128 to %struct.unop*
  %op_first154 = getelementptr inbounds %struct.unop, %struct.unop* %129, i32 0, i32 7
  %130 = load %struct.op*, %struct.op** %op_first154, align 8
  %131 = bitcast %struct.op* %130 to %struct.svop*
  %op_sv155 = getelementptr inbounds %struct.svop, %struct.svop* %131, i32 0, i32 7
  %132 = load %struct.sv*, %struct.sv** %op_sv155, align 8
  %sv_flags156 = getelementptr inbounds %struct.sv, %struct.sv* %132, i32 0, i32 2
  %133 = load i32, i32* %sv_flags156, align 4
  %and157 = and i32 %133, 1024
  %tobool158 = icmp ne i32 %and157, 0
  br i1 %tobool158, label %cond.true159, label %cond.false185

cond.true159:                                     ; preds = %cond.false153
  %134 = load %struct.op*, %struct.op** %expr.addr, align 8
  %135 = bitcast %struct.op* %134 to %struct.unop*
  %op_first160 = getelementptr inbounds %struct.unop, %struct.unop* %135, i32 0, i32 7
  %136 = load %struct.op*, %struct.op** %op_first160, align 8
  %137 = bitcast %struct.op* %136 to %struct.svop*
  %op_sv161 = getelementptr inbounds %struct.svop, %struct.svop* %137, i32 0, i32 7
  %138 = load %struct.sv*, %struct.sv** %op_sv161, align 8
  %sv_any162 = getelementptr inbounds %struct.sv, %struct.sv* %138, i32 0, i32 0
  %139 = load i8*, i8** %sv_any162, align 8
  %140 = bitcast i8* %139 to %struct.xpv*
  %tobool163 = icmp ne %struct.xpv* %140, null
  br i1 %tobool163, label %land.lhs.true164, label %if.end

land.lhs.true164:                                 ; preds = %cond.true159
  %141 = load %struct.op*, %struct.op** %expr.addr, align 8
  %142 = bitcast %struct.op* %141 to %struct.unop*
  %op_first165 = getelementptr inbounds %struct.unop, %struct.unop* %142, i32 0, i32 7
  %143 = load %struct.op*, %struct.op** %op_first165, align 8
  %144 = bitcast %struct.op* %143 to %struct.svop*
  %op_sv166 = getelementptr inbounds %struct.svop, %struct.svop* %144, i32 0, i32 7
  %145 = load %struct.sv*, %struct.sv** %op_sv166, align 8
  %sv_any167 = getelementptr inbounds %struct.sv, %struct.sv* %145, i32 0, i32 0
  %146 = load i8*, i8** %sv_any167, align 8
  %147 = bitcast i8* %146 to %struct.xpv*
  %xpv_cur168 = getelementptr inbounds %struct.xpv, %struct.xpv* %147, i32 0, i32 2
  %148 = load i64, i64* %xpv_cur168, align 8
  %cmp169 = icmp ugt i64 %148, 1
  br i1 %cmp169, label %if.then231, label %lor.lhs.false171

lor.lhs.false171:                                 ; preds = %land.lhs.true164
  %149 = load %struct.op*, %struct.op** %expr.addr, align 8
  %150 = bitcast %struct.op* %149 to %struct.unop*
  %op_first172 = getelementptr inbounds %struct.unop, %struct.unop* %150, i32 0, i32 7
  %151 = load %struct.op*, %struct.op** %op_first172, align 8
  %152 = bitcast %struct.op* %151 to %struct.svop*
  %op_sv173 = getelementptr inbounds %struct.svop, %struct.svop* %152, i32 0, i32 7
  %153 = load %struct.sv*, %struct.sv** %op_sv173, align 8
  %sv_any174 = getelementptr inbounds %struct.sv, %struct.sv* %153, i32 0, i32 0
  %154 = load i8*, i8** %sv_any174, align 8
  %155 = bitcast i8* %154 to %struct.xpv*
  %xpv_cur175 = getelementptr inbounds %struct.xpv, %struct.xpv* %155, i32 0, i32 2
  %156 = load i64, i64* %xpv_cur175, align 8
  %tobool176 = icmp ne i64 %156, 0
  br i1 %tobool176, label %land.lhs.true177, label %if.end

land.lhs.true177:                                 ; preds = %lor.lhs.false171
  %157 = load %struct.op*, %struct.op** %expr.addr, align 8
  %158 = bitcast %struct.op* %157 to %struct.unop*
  %op_first178 = getelementptr inbounds %struct.unop, %struct.unop* %158, i32 0, i32 7
  %159 = load %struct.op*, %struct.op** %op_first178, align 8
  %160 = bitcast %struct.op* %159 to %struct.svop*
  %op_sv179 = getelementptr inbounds %struct.svop, %struct.svop* %160, i32 0, i32 7
  %161 = load %struct.sv*, %struct.sv** %op_sv179, align 8
  %sv_u180 = getelementptr inbounds %struct.sv, %struct.sv* %161, i32 0, i32 3
  %svu_pv181 = bitcast %union.anon* %sv_u180 to i8**
  %162 = load i8*, i8** %svu_pv181, align 8
  %163 = load i8, i8* %162, align 1
  %conv182 = sext i8 %163 to i32
  %cmp183 = icmp ne i32 %conv182, 48
  br i1 %cmp183, label %if.then231, label %if.end

cond.false185:                                    ; preds = %cond.false153
  %164 = load %struct.op*, %struct.op** %expr.addr, align 8
  %165 = bitcast %struct.op* %164 to %struct.unop*
  %op_first186 = getelementptr inbounds %struct.unop, %struct.unop* %165, i32 0, i32 7
  %166 = load %struct.op*, %struct.op** %op_first186, align 8
  %167 = bitcast %struct.op* %166 to %struct.svop*
  %op_sv187 = getelementptr inbounds %struct.svop, %struct.svop* %167, i32 0, i32 7
  %168 = load %struct.sv*, %struct.sv** %op_sv187, align 8
  %sv_flags188 = getelementptr inbounds %struct.sv, %struct.sv* %168, i32 0, i32 2
  %169 = load i32, i32* %sv_flags188, align 4
  %and189 = and i32 %169, 768
  %tobool190 = icmp ne i32 %and189, 0
  br i1 %tobool190, label %cond.true191, label %cond.false226

cond.true191:                                     ; preds = %cond.false185
  %170 = load %struct.op*, %struct.op** %expr.addr, align 8
  %171 = bitcast %struct.op* %170 to %struct.unop*
  %op_first192 = getelementptr inbounds %struct.unop, %struct.unop* %171, i32 0, i32 7
  %172 = load %struct.op*, %struct.op** %op_first192, align 8
  %173 = bitcast %struct.op* %172 to %struct.svop*
  %op_sv193 = getelementptr inbounds %struct.svop, %struct.svop* %173, i32 0, i32 7
  %174 = load %struct.sv*, %struct.sv** %op_sv193, align 8
  %sv_flags194 = getelementptr inbounds %struct.sv, %struct.sv* %174, i32 0, i32 2
  %175 = load i32, i32* %sv_flags194, align 4
  %and195 = and i32 %175, 256
  %tobool196 = icmp ne i32 %and195, 0
  br i1 %tobool196, label %land.lhs.true197, label %lor.lhs.false205

land.lhs.true197:                                 ; preds = %cond.true191
  %176 = load %struct.op*, %struct.op** %expr.addr, align 8
  %177 = bitcast %struct.op* %176 to %struct.unop*
  %op_first198 = getelementptr inbounds %struct.unop, %struct.unop* %177, i32 0, i32 7
  %178 = load %struct.op*, %struct.op** %op_first198, align 8
  %179 = bitcast %struct.op* %178 to %struct.svop*
  %op_sv199 = getelementptr inbounds %struct.svop, %struct.svop* %179, i32 0, i32 7
  %180 = load %struct.sv*, %struct.sv** %op_sv199, align 8
  %sv_any200 = getelementptr inbounds %struct.sv, %struct.sv* %180, i32 0, i32 0
  %181 = load i8*, i8** %sv_any200, align 8
  %182 = bitcast i8* %181 to %struct.xpviv*
  %xiv_u201 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %182, i32 0, i32 4
  %xivu_iv202 = bitcast %union._xivu* %xiv_u201 to i64*
  %183 = load i64, i64* %xivu_iv202, align 8
  %cmp203 = icmp ne i64 %183, 0
  br i1 %cmp203, label %if.then231, label %lor.lhs.false205

lor.lhs.false205:                                 ; preds = %land.lhs.true197, %cond.true191
  %184 = load %struct.op*, %struct.op** %expr.addr, align 8
  %185 = bitcast %struct.op* %184 to %struct.unop*
  %op_first206 = getelementptr inbounds %struct.unop, %struct.unop* %185, i32 0, i32 7
  %186 = load %struct.op*, %struct.op** %op_first206, align 8
  %187 = bitcast %struct.op* %186 to %struct.svop*
  %op_sv207 = getelementptr inbounds %struct.svop, %struct.svop* %187, i32 0, i32 7
  %188 = load %struct.sv*, %struct.sv** %op_sv207, align 8
  %sv_flags208 = getelementptr inbounds %struct.sv, %struct.sv* %188, i32 0, i32 2
  %189 = load i32, i32* %sv_flags208, align 4
  %and209 = and i32 %189, 512
  %tobool210 = icmp ne i32 %and209, 0
  br i1 %tobool210, label %land.lhs.true211, label %if.end

land.lhs.true211:                                 ; preds = %lor.lhs.false205
  %190 = load %struct.op*, %struct.op** %expr.addr, align 8
  %191 = bitcast %struct.op* %190 to %struct.unop*
  %op_first212 = getelementptr inbounds %struct.unop, %struct.unop* %191, i32 0, i32 7
  %192 = load %struct.op*, %struct.op** %op_first212, align 8
  %193 = bitcast %struct.op* %192 to %struct.svop*
  %op_sv213 = getelementptr inbounds %struct.svop, %struct.svop* %193, i32 0, i32 7
  %194 = load %struct.sv*, %struct.sv** %op_sv213, align 8
  %sv_any214 = getelementptr inbounds %struct.sv, %struct.sv* %194, i32 0, i32 0
  %195 = load i8*, i8** %sv_any214, align 8
  %196 = bitcast i8* %195 to %struct.xpvnv*
  %xnv_u215 = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %196, i32 0, i32 5
  %xnv_nv216 = bitcast %union._xnvu* %xnv_u215 to double*
  %197 = load double, double* %xnv_nv216, align 8
  %cmp217 = fcmp uno double %197, %197
  br i1 %cmp217, label %if.then231, label %lor.lhs.false218

lor.lhs.false218:                                 ; preds = %land.lhs.true211
  %198 = load %struct.op*, %struct.op** %expr.addr, align 8
  %199 = bitcast %struct.op* %198 to %struct.unop*
  %op_first219 = getelementptr inbounds %struct.unop, %struct.unop* %199, i32 0, i32 7
  %200 = load %struct.op*, %struct.op** %op_first219, align 8
  %201 = bitcast %struct.op* %200 to %struct.svop*
  %op_sv220 = getelementptr inbounds %struct.svop, %struct.svop* %201, i32 0, i32 7
  %202 = load %struct.sv*, %struct.sv** %op_sv220, align 8
  %sv_any221 = getelementptr inbounds %struct.sv, %struct.sv* %202, i32 0, i32 0
  %203 = load i8*, i8** %sv_any221, align 8
  %204 = bitcast i8* %203 to %struct.xpvnv*
  %xnv_u222 = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %204, i32 0, i32 5
  %xnv_nv223 = bitcast %union._xnvu* %xnv_u222 to double*
  %205 = load double, double* %xnv_nv223, align 8
  %cmp224 = fcmp une double %205, 0.000000e+00
  br i1 %cmp224, label %if.then231, label %if.end

cond.false226:                                    ; preds = %cond.false185
  %206 = load %struct.op*, %struct.op** %expr.addr, align 8
  %207 = bitcast %struct.op* %206 to %struct.unop*
  %op_first227 = getelementptr inbounds %struct.unop, %struct.unop* %207, i32 0, i32 7
  %208 = load %struct.op*, %struct.op** %op_first227, align 8
  %209 = bitcast %struct.op* %208 to %struct.svop*
  %op_sv228 = getelementptr inbounds %struct.svop, %struct.svop* %209, i32 0, i32 7
  %210 = load %struct.sv*, %struct.sv** %op_sv228, align 8
  %call229 = call zeroext i1 @Perl_sv_2bool_flags(%struct.sv* %210, i32 0)
  br i1 %call229, label %if.then231, label %if.end

if.then231:                                       ; preds = %cond.false226, %lor.lhs.false218, %land.lhs.true211, %land.lhs.true197, %land.lhs.true177, %land.lhs.true164, %cond.true152, %cond.true127, %cond.false95, %lor.lhs.false88, %lor.lhs.false79, %land.lhs.true59, %lor.lhs.false54, %cond.true46, %cond.true40, %cond.true21, %cond.false, %cond.true
  %211 = load %struct.op*, %struct.op** %block.addr, align 8
  store %struct.op* %211, %struct.op** %retval, align 8
  br label %return

if.end:                                           ; preds = %cond.false226, %lor.lhs.false218, %lor.lhs.false205, %land.lhs.true177, %lor.lhs.false171, %cond.true159, %cond.true152, %cond.true127, %cond.false118, %cond.true117, %land.lhs.true106, %lor.lhs.false99, %if.then
  %212 = load %struct.op*, %struct.op** %expr.addr, align 8
  %op_type232 = getelementptr inbounds %struct.op, %struct.op* %212, i32 0, i32 4
  %bf.load233 = load i16, i16* %op_type232, align 8
  %bf.clear234 = and i16 %bf.load233, 511
  %bf.cast235 = zext i16 %bf.clear234 to i32
  %cmp236 = icmp eq i32 %bf.cast235, 26
  br i1 %cmp236, label %if.then276, label %lor.lhs.false238

lor.lhs.false238:                                 ; preds = %if.end
  %213 = load %struct.op*, %struct.op** %expr.addr, align 8
  %op_type239 = getelementptr inbounds %struct.op, %struct.op* %213, i32 0, i32 4
  %bf.load240 = load i16, i16* %op_type239, align 8
  %bf.clear241 = and i16 %bf.load240, 511
  %bf.cast242 = zext i16 %bf.clear241 to i32
  %cmp243 = icmp eq i32 %bf.cast242, 306
  br i1 %cmp243, label %if.then276, label %lor.lhs.false245

lor.lhs.false245:                                 ; preds = %lor.lhs.false238
  %214 = load %struct.op*, %struct.op** %expr.addr, align 8
  %op_type246 = getelementptr inbounds %struct.op, %struct.op* %214, i32 0, i32 4
  %bf.load247 = load i16, i16* %op_type246, align 8
  %bf.clear248 = and i16 %bf.load247, 511
  %bf.cast249 = zext i16 %bf.clear248 to i32
  %cmp250 = icmp eq i32 %bf.cast249, 25
  br i1 %cmp250, label %if.then276, label %lor.lhs.false252

lor.lhs.false252:                                 ; preds = %lor.lhs.false245
  %215 = load %struct.op*, %struct.op** %expr.addr, align 8
  %op_type253 = getelementptr inbounds %struct.op, %struct.op* %215, i32 0, i32 4
  %bf.load254 = load i16, i16* %op_type253, align 8
  %bf.clear255 = and i16 %bf.load254, 511
  %bf.cast256 = zext i16 %bf.clear255 to i32
  %cmp257 = icmp eq i32 %bf.cast256, 144
  br i1 %cmp257, label %if.then276, label %lor.lhs.false259

lor.lhs.false259:                                 ; preds = %lor.lhs.false252
  %216 = load %struct.op*, %struct.op** %expr.addr, align 8
  %op_type260 = getelementptr inbounds %struct.op, %struct.op* %216, i32 0, i32 4
  %bf.load261 = load i16, i16* %op_type260, align 8
  %bf.clear262 = and i16 %bf.load261, 511
  %bf.cast263 = zext i16 %bf.clear262 to i32
  %cmp264 = icmp eq i32 %bf.cast263, 141
  br i1 %cmp264, label %if.then276, label %lor.lhs.false266

lor.lhs.false266:                                 ; preds = %lor.lhs.false259
  %217 = load %struct.op*, %struct.op** %expr.addr, align 8
  %op_type267 = getelementptr inbounds %struct.op, %struct.op* %217, i32 0, i32 4
  %bf.load268 = load i16, i16* %op_type267, align 8
  %bf.clear269 = and i16 %bf.load268, 511
  %bf.cast270 = zext i16 %bf.clear269 to i32
  %cmp271 = icmp eq i32 %bf.cast270, 0
  br i1 %cmp271, label %land.lhs.true273, label %if.else

land.lhs.true273:                                 ; preds = %lor.lhs.false266
  %218 = load %struct.op*, %struct.op** %expr.addr, align 8
  %op_targ = getelementptr inbounds %struct.op, %struct.op* %218, i32 0, i32 3
  %219 = load i64, i64* %op_targ, align 8
  %cmp274 = icmp eq i64 %219, 25
  br i1 %cmp274, label %if.then276, label %if.else

if.then276:                                       ; preds = %land.lhs.true273, %lor.lhs.false259, %lor.lhs.false252, %lor.lhs.false245, %lor.lhs.false238, %if.end
  %call277 = call %struct.op* @Perl_newDEFSVOP()
  %220 = load %struct.op*, %struct.op** %expr.addr, align 8
  %call278 = call %struct.op* @Perl_newASSIGNOP(i32 0, %struct.op* %call277, i32 0, %struct.op* %220)
  %call279 = call %struct.op* @Perl_newUNOP(i32 43, i32 0, %struct.op* %call278)
  store %struct.op* %call279, %struct.op** %expr.addr, align 8
  br label %if.end367

if.else:                                          ; preds = %land.lhs.true273, %lor.lhs.false266
  %221 = load %struct.op*, %struct.op** %expr.addr, align 8
  %op_flags280 = getelementptr inbounds %struct.op, %struct.op* %221, i32 0, i32 5
  %222 = load i8, i8* %op_flags280, align 2
  %conv281 = zext i8 %222 to i32
  %and282 = and i32 %conv281, 4
  %tobool283 = icmp ne i32 %and282, 0
  br i1 %tobool283, label %if.then284, label %if.end366

if.then284:                                       ; preds = %if.else
  %223 = load %struct.op*, %struct.op** %expr.addr, align 8
  %224 = bitcast %struct.op* %223 to %struct.unop*
  %op_first285 = getelementptr inbounds %struct.unop, %struct.unop* %224, i32 0, i32 7
  %225 = load %struct.op*, %struct.op** %op_first285, align 8
  store %struct.op* %225, %struct.op** %k1, align 8
  %226 = load %struct.op*, %struct.op** %k1, align 8
  %tobool286 = icmp ne %struct.op* %226, null
  br i1 %tobool286, label %cond.true287, label %cond.false288

cond.true287:                                     ; preds = %if.then284
  %227 = load %struct.op*, %struct.op** %k1, align 8
  %op_sibling = getelementptr inbounds %struct.op, %struct.op* %227, i32 0, i32 1
  %228 = load %struct.op*, %struct.op** %op_sibling, align 8
  %add.ptr = getelementptr inbounds %struct.op, %struct.op* %228, i64 0
  br label %cond.end

cond.false288:                                    ; preds = %if.then284
  br label %cond.end

cond.end:                                         ; preds = %cond.false288, %cond.true287
  %cond = phi %struct.op* [ %add.ptr, %cond.true287 ], [ null, %cond.false288 ]
  store %struct.op* %cond, %struct.op** %k2, align 8
  %229 = load %struct.op*, %struct.op** %expr.addr, align 8
  %op_type289 = getelementptr inbounds %struct.op, %struct.op* %229, i32 0, i32 4
  %bf.load290 = load i16, i16* %op_type289, align 8
  %bf.clear291 = and i16 %bf.load290, 511
  %bf.cast292 = zext i16 %bf.clear291 to i32
  switch i32 %bf.cast292, label %sw.epilog [
    i32 0, label %sw.bb
    i32 37, label %sw.bb322
  ]

sw.bb:                                            ; preds = %cond.end
  %230 = load %struct.op*, %struct.op** %k2, align 8
  %tobool293 = icmp ne %struct.op* %230, null
  br i1 %tobool293, label %land.lhs.true294, label %if.end321

land.lhs.true294:                                 ; preds = %sw.bb
  %231 = load %struct.op*, %struct.op** %k2, align 8
  %op_type295 = getelementptr inbounds %struct.op, %struct.op* %231, i32 0, i32 4
  %bf.load296 = load i16, i16* %op_type295, align 8
  %bf.clear297 = and i16 %bf.load296, 511
  %bf.cast298 = zext i16 %bf.clear297 to i32
  %cmp299 = icmp eq i32 %bf.cast298, 26
  br i1 %cmp299, label %land.lhs.true308, label %lor.lhs.false301

lor.lhs.false301:                                 ; preds = %land.lhs.true294
  %232 = load %struct.op*, %struct.op** %k2, align 8
  %op_type302 = getelementptr inbounds %struct.op, %struct.op* %232, i32 0, i32 4
  %bf.load303 = load i16, i16* %op_type302, align 8
  %bf.clear304 = and i16 %bf.load303, 511
  %bf.cast305 = zext i16 %bf.clear304 to i32
  %cmp306 = icmp eq i32 %bf.cast305, 306
  br i1 %cmp306, label %land.lhs.true308, label %if.end321

land.lhs.true308:                                 ; preds = %lor.lhs.false301, %land.lhs.true294
  %233 = load %struct.op*, %struct.op** %k2, align 8
  %op_flags309 = getelementptr inbounds %struct.op, %struct.op* %233, i32 0, i32 5
  %234 = load i8, i8* %op_flags309, align 2
  %conv310 = zext i8 %234 to i32
  %and311 = and i32 %conv310, 64
  %tobool312 = icmp ne i32 %and311, 0
  br i1 %tobool312, label %land.lhs.true313, label %if.end321

land.lhs.true313:                                 ; preds = %land.lhs.true308
  %235 = load %struct.op*, %struct.op** %k1, align 8
  %op_flags314 = getelementptr inbounds %struct.op, %struct.op* %235, i32 0, i32 5
  %236 = load i8, i8* %op_flags314, align 2
  %conv315 = zext i8 %236 to i32
  %and316 = and i32 %conv315, 3
  %cmp317 = icmp eq i32 %and316, 2
  br i1 %cmp317, label %if.then319, label %if.end321

if.then319:                                       ; preds = %land.lhs.true313
  %237 = load %struct.op*, %struct.op** %expr.addr, align 8
  %call320 = call %struct.op* @Perl_newUNOP(i32 43, i32 0, %struct.op* %237)
  store %struct.op* %call320, %struct.op** %expr.addr, align 8
  br label %if.end321

if.end321:                                        ; preds = %if.then319, %land.lhs.true313, %land.lhs.true308, %lor.lhs.false301, %sw.bb
  br label %sw.epilog

sw.bb322:                                         ; preds = %cond.end
  %238 = load %struct.op*, %struct.op** %k1, align 8
  %tobool323 = icmp ne %struct.op* %238, null
  br i1 %tobool323, label %land.lhs.true324, label %if.end365

land.lhs.true324:                                 ; preds = %sw.bb322
  %239 = load %struct.op*, %struct.op** %k1, align 8
  %op_type325 = getelementptr inbounds %struct.op, %struct.op* %239, i32 0, i32 4
  %bf.load326 = load i16, i16* %op_type325, align 8
  %bf.clear327 = and i16 %bf.load326, 511
  %bf.cast328 = zext i16 %bf.clear327 to i32
  %cmp329 = icmp eq i32 %bf.cast328, 306
  br i1 %cmp329, label %if.then363, label %lor.lhs.false331

lor.lhs.false331:                                 ; preds = %land.lhs.true324
  %240 = load %struct.op*, %struct.op** %k1, align 8
  %op_type332 = getelementptr inbounds %struct.op, %struct.op* %240, i32 0, i32 4
  %bf.load333 = load i16, i16* %op_type332, align 8
  %bf.clear334 = and i16 %bf.load333, 511
  %bf.cast335 = zext i16 %bf.clear334 to i32
  %cmp336 = icmp eq i32 %bf.cast335, 25
  br i1 %cmp336, label %if.then363, label %lor.lhs.false338

lor.lhs.false338:                                 ; preds = %lor.lhs.false331
  %241 = load %struct.op*, %struct.op** %k1, align 8
  %op_type339 = getelementptr inbounds %struct.op, %struct.op* %241, i32 0, i32 4
  %bf.load340 = load i16, i16* %op_type339, align 8
  %bf.clear341 = and i16 %bf.load340, 511
  %bf.cast342 = zext i16 %bf.clear341 to i32
  %cmp343 = icmp eq i32 %bf.cast342, 0
  br i1 %cmp343, label %land.lhs.true345, label %lor.lhs.false349

land.lhs.true345:                                 ; preds = %lor.lhs.false338
  %242 = load %struct.op*, %struct.op** %k1, align 8
  %op_targ346 = getelementptr inbounds %struct.op, %struct.op* %242, i32 0, i32 3
  %243 = load i64, i64* %op_targ346, align 8
  %cmp347 = icmp eq i64 %243, 25
  br i1 %cmp347, label %if.then363, label %lor.lhs.false349

lor.lhs.false349:                                 ; preds = %land.lhs.true345, %lor.lhs.false338
  %244 = load %struct.op*, %struct.op** %k1, align 8
  %op_type350 = getelementptr inbounds %struct.op, %struct.op* %244, i32 0, i32 4
  %bf.load351 = load i16, i16* %op_type350, align 8
  %bf.clear352 = and i16 %bf.load351, 511
  %bf.cast353 = zext i16 %bf.clear352 to i32
  %cmp354 = icmp eq i32 %bf.cast353, 144
  br i1 %cmp354, label %if.then363, label %lor.lhs.false356

lor.lhs.false356:                                 ; preds = %lor.lhs.false349
  %245 = load %struct.op*, %struct.op** %k1, align 8
  %op_type357 = getelementptr inbounds %struct.op, %struct.op* %245, i32 0, i32 4
  %bf.load358 = load i16, i16* %op_type357, align 8
  %bf.clear359 = and i16 %bf.load358, 511
  %bf.cast360 = zext i16 %bf.clear359 to i32
  %cmp361 = icmp eq i32 %bf.cast360, 141
  br i1 %cmp361, label %if.then363, label %if.end365

if.then363:                                       ; preds = %lor.lhs.false356, %lor.lhs.false349, %land.lhs.true345, %lor.lhs.false331, %land.lhs.true324
  %246 = load %struct.op*, %struct.op** %expr.addr, align 8
  %call364 = call %struct.op* @Perl_newUNOP(i32 43, i32 0, %struct.op* %246)
  store %struct.op* %call364, %struct.op** %expr.addr, align 8
  br label %if.end365

if.end365:                                        ; preds = %if.then363, %lor.lhs.false356, %sw.bb322
  br label %sw.epilog

sw.epilog:                                        ; preds = %cond.end, %if.end365, %if.end321
  br label %if.end366

if.end366:                                        ; preds = %sw.epilog, %if.else
  br label %if.end367

if.end367:                                        ; preds = %if.end366, %if.then276
  br label %if.end368

if.end368:                                        ; preds = %if.end367, %land.end
  %247 = load %struct.op*, %struct.op** %block.addr, align 8
  %tobool369 = icmp ne %struct.op* %247, null
  br i1 %tobool369, label %if.end372, label %if.then370

if.then370:                                       ; preds = %if.end368
  %call371 = call %struct.op* @Perl_newOP(i32 0, i32 0)
  store %struct.op* %call371, %struct.op** %block.addr, align 8
  br label %if.end372

if.end372:                                        ; preds = %if.then370, %if.end368
  %248 = load %struct.op*, %struct.op** %block.addr, align 8
  %call373 = call %struct.op* @Perl_newOP(i32 195, i32 0)
  %call374 = call %struct.op* @Perl_op_append_elem(i32 192, %struct.op* %248, %struct.op* %call373)
  store %struct.op* %call374, %struct.op** %listop, align 8
  %call375 = call %struct.op* @S_new_logop(i32 176, i32 0, %struct.op** %expr.addr, %struct.op** %listop)
  store %struct.op* %call375, %struct.op** %o, align 8
  %249 = load i8, i8* %once, align 1
  %tobool376 = trunc i8 %249 to i1
  br i1 %tobool376, label %if.then377, label %if.end378

if.then377:                                       ; preds = %if.end372
  br label %if.end378

if.end378:                                        ; preds = %if.then377, %if.end372
  %250 = load %struct.op*, %struct.op** %listop, align 8
  %tobool379 = icmp ne %struct.op* %250, null
  br i1 %tobool379, label %if.then380, label %if.end389

if.then380:                                       ; preds = %if.end378
  %251 = load %struct.op*, %struct.op** %o, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %251, i32 0, i32 0
  %252 = load %struct.op*, %struct.op** %op_next, align 8
  %tobool381 = icmp ne %struct.op* %252, null
  br i1 %tobool381, label %cond.true382, label %cond.false384

cond.true382:                                     ; preds = %if.then380
  %253 = load %struct.op*, %struct.op** %o, align 8
  %op_next383 = getelementptr inbounds %struct.op, %struct.op* %253, i32 0, i32 0
  %254 = load %struct.op*, %struct.op** %op_next383, align 8
  br label %cond.end386

cond.false384:                                    ; preds = %if.then380
  %255 = load %struct.op*, %struct.op** %o, align 8
  %call385 = call %struct.op* @Perl_op_linklist(%struct.op* %255)
  br label %cond.end386

cond.end386:                                      ; preds = %cond.false384, %cond.true382
  %cond387 = phi %struct.op* [ %254, %cond.true382 ], [ %call385, %cond.false384 ]
  %256 = load %struct.op*, %struct.op** %listop, align 8
  %257 = bitcast %struct.op* %256 to %struct.listop*
  %op_last = getelementptr inbounds %struct.listop, %struct.listop* %257, i32 0, i32 8
  %258 = load %struct.op*, %struct.op** %op_last, align 8
  %op_next388 = getelementptr inbounds %struct.op, %struct.op* %258, i32 0, i32 0
  store %struct.op* %cond387, %struct.op** %op_next388, align 8
  br label %if.end389

if.end389:                                        ; preds = %cond.end386, %if.end378
  %259 = load i8, i8* %once, align 1
  %tobool390 = trunc i8 %259 to i1
  br i1 %tobool390, label %land.lhs.true392, label %if.end398

land.lhs.true392:                                 ; preds = %if.end389
  %260 = load %struct.op*, %struct.op** %o, align 8
  %261 = load %struct.op*, %struct.op** %listop, align 8
  %cmp393 = icmp ne %struct.op* %260, %261
  br i1 %cmp393, label %if.then395, label %if.end398

if.then395:                                       ; preds = %land.lhs.true392
  %262 = load %struct.op*, %struct.op** %o, align 8
  %263 = bitcast %struct.op* %262 to %struct.unop*
  %op_first396 = getelementptr inbounds %struct.unop, %struct.unop* %263, i32 0, i32 7
  %264 = load %struct.op*, %struct.op** %op_first396, align 8
  %265 = bitcast %struct.op* %264 to %struct.logop*
  %op_other = getelementptr inbounds %struct.logop, %struct.logop* %265, i32 0, i32 8
  %266 = load %struct.op*, %struct.op** %op_other, align 8
  %267 = load %struct.op*, %struct.op** %o, align 8
  %op_next397 = getelementptr inbounds %struct.op, %struct.op* %267, i32 0, i32 0
  store %struct.op* %266, %struct.op** %op_next397, align 8
  br label %if.end398

if.end398:                                        ; preds = %if.then395, %land.lhs.true392, %if.end389
  %268 = load %struct.op*, %struct.op** %o, align 8
  %269 = load %struct.op*, %struct.op** %listop, align 8
  %cmp399 = icmp eq %struct.op* %268, %269
  br i1 %cmp399, label %if.then401, label %if.end403

if.then401:                                       ; preds = %if.end398
  %270 = load %struct.op*, %struct.op** %o, align 8
  %call402 = call %struct.op* @Perl_newUNOP(i32 0, i32 0, %struct.op* %270)
  store %struct.op* %call402, %struct.op** %o, align 8
  br label %if.end403

if.end403:                                        ; preds = %if.then401, %if.end398
  %271 = load i32, i32* %flags.addr, align 4
  %272 = load %struct.op*, %struct.op** %o, align 8
  %op_flags404 = getelementptr inbounds %struct.op, %struct.op* %272, i32 0, i32 5
  %273 = load i8, i8* %op_flags404, align 2
  %conv405 = zext i8 %273 to i32
  %or = or i32 %conv405, %271
  %conv406 = trunc i32 %or to i8
  store i8 %conv406, i8* %op_flags404, align 2
  %274 = load %struct.op*, %struct.op** %o, align 8
  %call407 = call %struct.op* @Perl_op_scope(%struct.op* %274)
  store %struct.op* %call407, %struct.op** %o, align 8
  %275 = load %struct.op*, %struct.op** %o, align 8
  %op_flags408 = getelementptr inbounds %struct.op, %struct.op* %275, i32 0, i32 5
  %276 = load i8, i8* %op_flags408, align 2
  %conv409 = zext i8 %276 to i32
  %or410 = or i32 %conv409, 128
  %conv411 = trunc i32 %or410 to i8
  store i8 %conv411, i8* %op_flags408, align 2
  %277 = load %struct.op*, %struct.op** %o, align 8
  store %struct.op* %277, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %if.end403, %if.then231
  %278 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %278
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_newWHILEOP(i32 %flags, i32 %debuggable, %struct.loop* %loop, %struct.op* %expr, %struct.op* %block, %struct.op* %cont, i32 %has_my) #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %flags.addr = alloca i32, align 4
  %debuggable.addr = alloca i32, align 4
  %loop.addr = alloca %struct.loop*, align 8
  %expr.addr = alloca %struct.op*, align 8
  %block.addr = alloca %struct.op*, align 8
  %cont.addr = alloca %struct.op*, align 8
  %has_my.addr = alloca i32, align 4
  %redo = alloca %struct.op*, align 8
  %next = alloca %struct.op*, align 8
  %listop = alloca %struct.op*, align 8
  %o = alloca %struct.op*, align 8
  %loopflags = alloca i8, align 1
  %k1 = alloca %struct.op*, align 8
  %k2 = alloca %struct.op*, align 8
  %unstack = alloca %struct.op*, align 8
  store i32 %flags, i32* %flags.addr, align 4
  store i32 %debuggable, i32* %debuggable.addr, align 4
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  store %struct.op* %expr, %struct.op** %expr.addr, align 8
  store %struct.op* %block, %struct.op** %block.addr, align 8
  store %struct.op* %cont, %struct.op** %cont.addr, align 8
  store i32 %has_my, i32* %has_my.addr, align 4
  store %struct.op* null, %struct.op** %next, align 8
  store i8 0, i8* %loopflags, align 1
  %0 = load i32, i32* %debuggable.addr, align 4
  %1 = load %struct.op*, %struct.op** %expr.addr, align 8
  %tobool = icmp ne %struct.op* %1, null
  br i1 %tobool, label %if.then, label %if.end115

if.then:                                          ; preds = %entry
  %2 = load %struct.op*, %struct.op** %expr.addr, align 8
  %op_type = getelementptr inbounds %struct.op, %struct.op* %2, i32 0, i32 4
  %bf.load = load i16, i16* %op_type, align 8
  %bf.clear = and i16 %bf.load, 511
  %bf.cast = zext i16 %bf.clear to i32
  %cmp = icmp eq i32 %bf.cast, 26
  br i1 %cmp, label %if.then31, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.then
  %3 = load %struct.op*, %struct.op** %expr.addr, align 8
  %op_type1 = getelementptr inbounds %struct.op, %struct.op* %3, i32 0, i32 4
  %bf.load2 = load i16, i16* %op_type1, align 8
  %bf.clear3 = and i16 %bf.load2, 511
  %bf.cast4 = zext i16 %bf.clear3 to i32
  %cmp5 = icmp eq i32 %bf.cast4, 306
  br i1 %cmp5, label %if.then31, label %lor.lhs.false6

lor.lhs.false6:                                   ; preds = %lor.lhs.false
  %4 = load %struct.op*, %struct.op** %expr.addr, align 8
  %op_type7 = getelementptr inbounds %struct.op, %struct.op* %4, i32 0, i32 4
  %bf.load8 = load i16, i16* %op_type7, align 8
  %bf.clear9 = and i16 %bf.load8, 511
  %bf.cast10 = zext i16 %bf.clear9 to i32
  %cmp11 = icmp eq i32 %bf.cast10, 25
  br i1 %cmp11, label %if.then31, label %lor.lhs.false12

lor.lhs.false12:                                  ; preds = %lor.lhs.false6
  %5 = load %struct.op*, %struct.op** %expr.addr, align 8
  %op_type13 = getelementptr inbounds %struct.op, %struct.op* %5, i32 0, i32 4
  %bf.load14 = load i16, i16* %op_type13, align 8
  %bf.clear15 = and i16 %bf.load14, 511
  %bf.cast16 = zext i16 %bf.clear15 to i32
  %cmp17 = icmp eq i32 %bf.cast16, 144
  br i1 %cmp17, label %if.then31, label %lor.lhs.false18

lor.lhs.false18:                                  ; preds = %lor.lhs.false12
  %6 = load %struct.op*, %struct.op** %expr.addr, align 8
  %op_type19 = getelementptr inbounds %struct.op, %struct.op* %6, i32 0, i32 4
  %bf.load20 = load i16, i16* %op_type19, align 8
  %bf.clear21 = and i16 %bf.load20, 511
  %bf.cast22 = zext i16 %bf.clear21 to i32
  %cmp23 = icmp eq i32 %bf.cast22, 141
  br i1 %cmp23, label %if.then31, label %lor.lhs.false24

lor.lhs.false24:                                  ; preds = %lor.lhs.false18
  %7 = load %struct.op*, %struct.op** %expr.addr, align 8
  %op_type25 = getelementptr inbounds %struct.op, %struct.op* %7, i32 0, i32 4
  %bf.load26 = load i16, i16* %op_type25, align 8
  %bf.clear27 = and i16 %bf.load26, 511
  %bf.cast28 = zext i16 %bf.clear27 to i32
  %cmp29 = icmp eq i32 %bf.cast28, 0
  br i1 %cmp29, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %lor.lhs.false24
  %8 = load %struct.op*, %struct.op** %expr.addr, align 8
  %op_targ = getelementptr inbounds %struct.op, %struct.op* %8, i32 0, i32 3
  %9 = load i64, i64* %op_targ, align 8
  %cmp30 = icmp eq i64 %9, 25
  br i1 %cmp30, label %if.then31, label %if.else

if.then31:                                        ; preds = %land.lhs.true, %lor.lhs.false18, %lor.lhs.false12, %lor.lhs.false6, %lor.lhs.false, %if.then
  %call = call %struct.op* @Perl_newDEFSVOP()
  %10 = load %struct.op*, %struct.op** %expr.addr, align 8
  %call32 = call %struct.op* @Perl_newASSIGNOP(i32 0, %struct.op* %call, i32 0, %struct.op* %10)
  %call33 = call %struct.op* @Perl_newUNOP(i32 43, i32 0, %struct.op* %call32)
  store %struct.op* %call33, %struct.op** %expr.addr, align 8
  br label %if.end114

if.else:                                          ; preds = %land.lhs.true, %lor.lhs.false24
  %11 = load %struct.op*, %struct.op** %expr.addr, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %11, i32 0, i32 5
  %12 = load i8, i8* %op_flags, align 2
  %conv = zext i8 %12 to i32
  %and = and i32 %conv, 4
  %tobool34 = icmp ne i32 %and, 0
  br i1 %tobool34, label %if.then35, label %if.end113

if.then35:                                        ; preds = %if.else
  %13 = load %struct.op*, %struct.op** %expr.addr, align 8
  %14 = bitcast %struct.op* %13 to %struct.unop*
  %op_first = getelementptr inbounds %struct.unop, %struct.unop* %14, i32 0, i32 7
  %15 = load %struct.op*, %struct.op** %op_first, align 8
  store %struct.op* %15, %struct.op** %k1, align 8
  %16 = load %struct.op*, %struct.op** %k1, align 8
  %tobool36 = icmp ne %struct.op* %16, null
  br i1 %tobool36, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then35
  %17 = load %struct.op*, %struct.op** %k1, align 8
  %op_sibling = getelementptr inbounds %struct.op, %struct.op* %17, i32 0, i32 1
  %18 = load %struct.op*, %struct.op** %op_sibling, align 8
  %add.ptr = getelementptr inbounds %struct.op, %struct.op* %18, i64 0
  br label %cond.end

cond.false:                                       ; preds = %if.then35
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.op* [ %add.ptr, %cond.true ], [ null, %cond.false ]
  store %struct.op* %cond, %struct.op** %k2, align 8
  %19 = load %struct.op*, %struct.op** %expr.addr, align 8
  %op_type37 = getelementptr inbounds %struct.op, %struct.op* %19, i32 0, i32 4
  %bf.load38 = load i16, i16* %op_type37, align 8
  %bf.clear39 = and i16 %bf.load38, 511
  %bf.cast40 = zext i16 %bf.clear39 to i32
  switch i32 %bf.cast40, label %sw.epilog [
    i32 0, label %sw.bb
    i32 37, label %sw.bb69
  ]

sw.bb:                                            ; preds = %cond.end
  %20 = load %struct.op*, %struct.op** %k2, align 8
  %tobool41 = icmp ne %struct.op* %20, null
  br i1 %tobool41, label %land.lhs.true42, label %if.end

land.lhs.true42:                                  ; preds = %sw.bb
  %21 = load %struct.op*, %struct.op** %k2, align 8
  %op_type43 = getelementptr inbounds %struct.op, %struct.op* %21, i32 0, i32 4
  %bf.load44 = load i16, i16* %op_type43, align 8
  %bf.clear45 = and i16 %bf.load44, 511
  %bf.cast46 = zext i16 %bf.clear45 to i32
  %cmp47 = icmp eq i32 %bf.cast46, 26
  br i1 %cmp47, label %land.lhs.true56, label %lor.lhs.false49

lor.lhs.false49:                                  ; preds = %land.lhs.true42
  %22 = load %struct.op*, %struct.op** %k2, align 8
  %op_type50 = getelementptr inbounds %struct.op, %struct.op* %22, i32 0, i32 4
  %bf.load51 = load i16, i16* %op_type50, align 8
  %bf.clear52 = and i16 %bf.load51, 511
  %bf.cast53 = zext i16 %bf.clear52 to i32
  %cmp54 = icmp eq i32 %bf.cast53, 306
  br i1 %cmp54, label %land.lhs.true56, label %if.end

land.lhs.true56:                                  ; preds = %lor.lhs.false49, %land.lhs.true42
  %23 = load %struct.op*, %struct.op** %k2, align 8
  %op_flags57 = getelementptr inbounds %struct.op, %struct.op* %23, i32 0, i32 5
  %24 = load i8, i8* %op_flags57, align 2
  %conv58 = zext i8 %24 to i32
  %and59 = and i32 %conv58, 64
  %tobool60 = icmp ne i32 %and59, 0
  br i1 %tobool60, label %land.lhs.true61, label %if.end

land.lhs.true61:                                  ; preds = %land.lhs.true56
  %25 = load %struct.op*, %struct.op** %k1, align 8
  %op_flags62 = getelementptr inbounds %struct.op, %struct.op* %25, i32 0, i32 5
  %26 = load i8, i8* %op_flags62, align 2
  %conv63 = zext i8 %26 to i32
  %and64 = and i32 %conv63, 3
  %cmp65 = icmp eq i32 %and64, 2
  br i1 %cmp65, label %if.then67, label %if.end

if.then67:                                        ; preds = %land.lhs.true61
  %27 = load %struct.op*, %struct.op** %expr.addr, align 8
  %call68 = call %struct.op* @Perl_newUNOP(i32 43, i32 0, %struct.op* %27)
  store %struct.op* %call68, %struct.op** %expr.addr, align 8
  br label %if.end

if.end:                                           ; preds = %if.then67, %land.lhs.true61, %land.lhs.true56, %lor.lhs.false49, %sw.bb
  br label %sw.epilog

sw.bb69:                                          ; preds = %cond.end
  %28 = load %struct.op*, %struct.op** %k1, align 8
  %tobool70 = icmp ne %struct.op* %28, null
  br i1 %tobool70, label %land.lhs.true71, label %if.end112

land.lhs.true71:                                  ; preds = %sw.bb69
  %29 = load %struct.op*, %struct.op** %k1, align 8
  %op_type72 = getelementptr inbounds %struct.op, %struct.op* %29, i32 0, i32 4
  %bf.load73 = load i16, i16* %op_type72, align 8
  %bf.clear74 = and i16 %bf.load73, 511
  %bf.cast75 = zext i16 %bf.clear74 to i32
  %cmp76 = icmp eq i32 %bf.cast75, 306
  br i1 %cmp76, label %if.then110, label %lor.lhs.false78

lor.lhs.false78:                                  ; preds = %land.lhs.true71
  %30 = load %struct.op*, %struct.op** %k1, align 8
  %op_type79 = getelementptr inbounds %struct.op, %struct.op* %30, i32 0, i32 4
  %bf.load80 = load i16, i16* %op_type79, align 8
  %bf.clear81 = and i16 %bf.load80, 511
  %bf.cast82 = zext i16 %bf.clear81 to i32
  %cmp83 = icmp eq i32 %bf.cast82, 25
  br i1 %cmp83, label %if.then110, label %lor.lhs.false85

lor.lhs.false85:                                  ; preds = %lor.lhs.false78
  %31 = load %struct.op*, %struct.op** %k1, align 8
  %op_type86 = getelementptr inbounds %struct.op, %struct.op* %31, i32 0, i32 4
  %bf.load87 = load i16, i16* %op_type86, align 8
  %bf.clear88 = and i16 %bf.load87, 511
  %bf.cast89 = zext i16 %bf.clear88 to i32
  %cmp90 = icmp eq i32 %bf.cast89, 0
  br i1 %cmp90, label %land.lhs.true92, label %lor.lhs.false96

land.lhs.true92:                                  ; preds = %lor.lhs.false85
  %32 = load %struct.op*, %struct.op** %k1, align 8
  %op_targ93 = getelementptr inbounds %struct.op, %struct.op* %32, i32 0, i32 3
  %33 = load i64, i64* %op_targ93, align 8
  %cmp94 = icmp eq i64 %33, 25
  br i1 %cmp94, label %if.then110, label %lor.lhs.false96

lor.lhs.false96:                                  ; preds = %land.lhs.true92, %lor.lhs.false85
  %34 = load %struct.op*, %struct.op** %k1, align 8
  %op_type97 = getelementptr inbounds %struct.op, %struct.op* %34, i32 0, i32 4
  %bf.load98 = load i16, i16* %op_type97, align 8
  %bf.clear99 = and i16 %bf.load98, 511
  %bf.cast100 = zext i16 %bf.clear99 to i32
  %cmp101 = icmp eq i32 %bf.cast100, 144
  br i1 %cmp101, label %if.then110, label %lor.lhs.false103

lor.lhs.false103:                                 ; preds = %lor.lhs.false96
  %35 = load %struct.op*, %struct.op** %k1, align 8
  %op_type104 = getelementptr inbounds %struct.op, %struct.op* %35, i32 0, i32 4
  %bf.load105 = load i16, i16* %op_type104, align 8
  %bf.clear106 = and i16 %bf.load105, 511
  %bf.cast107 = zext i16 %bf.clear106 to i32
  %cmp108 = icmp eq i32 %bf.cast107, 141
  br i1 %cmp108, label %if.then110, label %if.end112

if.then110:                                       ; preds = %lor.lhs.false103, %lor.lhs.false96, %land.lhs.true92, %lor.lhs.false78, %land.lhs.true71
  %36 = load %struct.op*, %struct.op** %expr.addr, align 8
  %call111 = call %struct.op* @Perl_newUNOP(i32 43, i32 0, %struct.op* %36)
  store %struct.op* %call111, %struct.op** %expr.addr, align 8
  br label %if.end112

if.end112:                                        ; preds = %if.then110, %lor.lhs.false103, %sw.bb69
  br label %sw.epilog

sw.epilog:                                        ; preds = %cond.end, %if.end112, %if.end
  br label %if.end113

if.end113:                                        ; preds = %sw.epilog, %if.else
  br label %if.end114

if.end114:                                        ; preds = %if.end113, %if.then31
  br label %if.end115

if.end115:                                        ; preds = %if.end114, %entry
  %37 = load %struct.op*, %struct.op** %block.addr, align 8
  %tobool116 = icmp ne %struct.op* %37, null
  br i1 %tobool116, label %if.else119, label %if.then117

if.then117:                                       ; preds = %if.end115
  %call118 = call %struct.op* @Perl_newOP(i32 0, i32 0)
  store %struct.op* %call118, %struct.op** %block.addr, align 8
  br label %if.end126

if.else119:                                       ; preds = %if.end115
  %38 = load %struct.op*, %struct.op** %cont.addr, align 8
  %tobool120 = icmp ne %struct.op* %38, null
  br i1 %tobool120, label %if.then123, label %lor.lhs.false121

lor.lhs.false121:                                 ; preds = %if.else119
  %39 = load i32, i32* %has_my.addr, align 4
  %tobool122 = icmp ne i32 %39, 0
  br i1 %tobool122, label %if.then123, label %if.end125

if.then123:                                       ; preds = %lor.lhs.false121, %if.else119
  %40 = load %struct.op*, %struct.op** %block.addr, align 8
  %call124 = call %struct.op* @Perl_op_scope(%struct.op* %40)
  store %struct.op* %call124, %struct.op** %block.addr, align 8
  br label %if.end125

if.end125:                                        ; preds = %if.then123, %lor.lhs.false121
  br label %if.end126

if.end126:                                        ; preds = %if.end125, %if.then117
  %41 = load %struct.op*, %struct.op** %cont.addr, align 8
  %tobool127 = icmp ne %struct.op* %41, null
  br i1 %tobool127, label %if.then128, label %if.end136

if.then128:                                       ; preds = %if.end126
  %42 = load %struct.op*, %struct.op** %cont.addr, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %42, i32 0, i32 0
  %43 = load %struct.op*, %struct.op** %op_next, align 8
  %tobool129 = icmp ne %struct.op* %43, null
  br i1 %tobool129, label %cond.true130, label %cond.false132

cond.true130:                                     ; preds = %if.then128
  %44 = load %struct.op*, %struct.op** %cont.addr, align 8
  %op_next131 = getelementptr inbounds %struct.op, %struct.op* %44, i32 0, i32 0
  %45 = load %struct.op*, %struct.op** %op_next131, align 8
  br label %cond.end134

cond.false132:                                    ; preds = %if.then128
  %46 = load %struct.op*, %struct.op** %cont.addr, align 8
  %call133 = call %struct.op* @Perl_op_linklist(%struct.op* %46)
  br label %cond.end134

cond.end134:                                      ; preds = %cond.false132, %cond.true130
  %cond135 = phi %struct.op* [ %45, %cond.true130 ], [ %call133, %cond.false132 ]
  store %struct.op* %cond135, %struct.op** %next, align 8
  br label %if.end136

if.end136:                                        ; preds = %cond.end134, %if.end126
  %47 = load %struct.op*, %struct.op** %expr.addr, align 8
  %tobool137 = icmp ne %struct.op* %47, null
  br i1 %tobool137, label %if.then138, label %if.end144

if.then138:                                       ; preds = %if.end136
  %call139 = call %struct.op* @Perl_newOP(i32 195, i32 0)
  store %struct.op* %call139, %struct.op** %unstack, align 8
  %48 = load %struct.op*, %struct.op** %next, align 8
  %tobool140 = icmp ne %struct.op* %48, null
  br i1 %tobool140, label %if.end142, label %if.then141

if.then141:                                       ; preds = %if.then138
  %49 = load %struct.op*, %struct.op** %unstack, align 8
  store %struct.op* %49, %struct.op** %next, align 8
  br label %if.end142

if.end142:                                        ; preds = %if.then141, %if.then138
  %50 = load %struct.op*, %struct.op** %cont.addr, align 8
  %51 = load %struct.op*, %struct.op** %unstack, align 8
  %call143 = call %struct.op* @Perl_op_append_elem(i32 192, %struct.op* %50, %struct.op* %51)
  store %struct.op* %call143, %struct.op** %cont.addr, align 8
  br label %if.end144

if.end144:                                        ; preds = %if.end142, %if.end136
  %52 = load %struct.op*, %struct.op** %block.addr, align 8
  %53 = load %struct.op*, %struct.op** %cont.addr, align 8
  %call145 = call %struct.op* @Perl_op_append_list(i32 192, %struct.op* %52, %struct.op* %53)
  store %struct.op* %call145, %struct.op** %listop, align 8
  %54 = load %struct.op*, %struct.op** %listop, align 8
  %op_next146 = getelementptr inbounds %struct.op, %struct.op* %54, i32 0, i32 0
  %55 = load %struct.op*, %struct.op** %op_next146, align 8
  %tobool147 = icmp ne %struct.op* %55, null
  br i1 %tobool147, label %cond.true148, label %cond.false150

cond.true148:                                     ; preds = %if.end144
  %56 = load %struct.op*, %struct.op** %listop, align 8
  %op_next149 = getelementptr inbounds %struct.op, %struct.op* %56, i32 0, i32 0
  %57 = load %struct.op*, %struct.op** %op_next149, align 8
  br label %cond.end152

cond.false150:                                    ; preds = %if.end144
  %58 = load %struct.op*, %struct.op** %listop, align 8
  %call151 = call %struct.op* @Perl_op_linklist(%struct.op* %58)
  br label %cond.end152

cond.end152:                                      ; preds = %cond.false150, %cond.true148
  %cond153 = phi %struct.op* [ %57, %cond.true148 ], [ %call151, %cond.false150 ]
  store %struct.op* %cond153, %struct.op** %redo, align 8
  %59 = load %struct.op*, %struct.op** %expr.addr, align 8
  %tobool154 = icmp ne %struct.op* %59, null
  br i1 %tobool154, label %if.then155, label %if.else277

if.then155:                                       ; preds = %cond.end152
  %60 = load %struct.op*, %struct.op** %listop, align 8
  %call156 = call %struct.op* @Perl_scalar(%struct.op* %60)
  %call157 = call %struct.op* @S_new_logop(i32 176, i32 0, %struct.op** %expr.addr, %struct.op** %listop)
  store %struct.op* %call157, %struct.op** %o, align 8
  %61 = load %struct.op*, %struct.op** %o, align 8
  %62 = load %struct.op*, %struct.op** %expr.addr, align 8
  %cmp158 = icmp eq %struct.op* %61, %62
  br i1 %cmp158, label %land.lhs.true160, label %if.end258

land.lhs.true160:                                 ; preds = %if.then155
  %63 = load %struct.op*, %struct.op** %o, align 8
  %op_type161 = getelementptr inbounds %struct.op, %struct.op* %63, i32 0, i32 4
  %bf.load162 = load i16, i16* %op_type161, align 8
  %bf.clear163 = and i16 %bf.load162, 511
  %bf.cast164 = zext i16 %bf.clear163 to i32
  %cmp165 = icmp eq i32 %bf.cast164, 5
  br i1 %cmp165, label %land.lhs.true167, label %if.end258

land.lhs.true167:                                 ; preds = %land.lhs.true160
  %64 = load %struct.op*, %struct.op** %o, align 8
  %65 = bitcast %struct.op* %64 to %struct.svop*
  %op_sv = getelementptr inbounds %struct.svop, %struct.svop* %65, i32 0, i32 7
  %66 = load %struct.sv*, %struct.sv** %op_sv, align 8
  %tobool168 = icmp ne %struct.sv* %66, null
  br i1 %tobool168, label %cond.true169, label %cond.false170

cond.true169:                                     ; preds = %land.lhs.true167
  br i1 true, label %land.lhs.true171, label %if.then257

cond.false170:                                    ; preds = %land.lhs.true167
  br i1 false, label %land.lhs.true171, label %if.then257

land.lhs.true171:                                 ; preds = %cond.false170, %cond.true169
  %67 = load %struct.op*, %struct.op** %o, align 8
  %68 = bitcast %struct.op* %67 to %struct.svop*
  %op_sv172 = getelementptr inbounds %struct.svop, %struct.svop* %68, i32 0, i32 7
  %69 = load %struct.sv*, %struct.sv** %op_sv172, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %69, i32 0, i32 2
  %70 = load i32, i32* %sv_flags, align 4
  %and173 = and i32 %70, 2097152
  %tobool174 = icmp ne i32 %and173, 0
  br i1 %tobool174, label %cond.true175, label %cond.false176

cond.true175:                                     ; preds = %land.lhs.true171
  br i1 true, label %cond.true177, label %cond.false181

cond.false176:                                    ; preds = %land.lhs.true171
  br i1 false, label %cond.true177, label %cond.false181

cond.true177:                                     ; preds = %cond.false176, %cond.true175
  %71 = load %struct.op*, %struct.op** %o, align 8
  %72 = bitcast %struct.op* %71 to %struct.svop*
  %op_sv178 = getelementptr inbounds %struct.svop, %struct.svop* %72, i32 0, i32 7
  %73 = load %struct.sv*, %struct.sv** %op_sv178, align 8
  %call179 = call zeroext i1 @Perl_sv_2bool_flags(%struct.sv* %73, i32 2)
  br i1 %call179, label %if.end258, label %if.then257

cond.false181:                                    ; preds = %cond.false176, %cond.true175
  %74 = load %struct.op*, %struct.op** %o, align 8
  %75 = bitcast %struct.op* %74 to %struct.svop*
  %op_sv182 = getelementptr inbounds %struct.svop, %struct.svop* %75, i32 0, i32 7
  %76 = load %struct.sv*, %struct.sv** %op_sv182, align 8
  %sv_flags183 = getelementptr inbounds %struct.sv, %struct.sv* %76, i32 0, i32 2
  %77 = load i32, i32* %sv_flags183, align 4
  %and184 = and i32 %77, 65280
  %tobool185 = icmp ne i32 %and184, 0
  br i1 %tobool185, label %cond.false199, label %lor.lhs.false186

lor.lhs.false186:                                 ; preds = %cond.false181
  %78 = load %struct.op*, %struct.op** %o, align 8
  %79 = bitcast %struct.op* %78 to %struct.svop*
  %op_sv187 = getelementptr inbounds %struct.svop, %struct.svop* %79, i32 0, i32 7
  %80 = load %struct.sv*, %struct.sv** %op_sv187, align 8
  %sv_flags188 = getelementptr inbounds %struct.sv, %struct.sv* %80, i32 0, i32 2
  %81 = load i32, i32* %sv_flags188, align 4
  %and189 = and i32 %81, 255
  %cmp190 = icmp eq i32 %and189, 8
  br i1 %cmp190, label %cond.false199, label %lor.lhs.false192

lor.lhs.false192:                                 ; preds = %lor.lhs.false186
  %82 = load %struct.op*, %struct.op** %o, align 8
  %83 = bitcast %struct.op* %82 to %struct.svop*
  %op_sv193 = getelementptr inbounds %struct.svop, %struct.svop* %83, i32 0, i32 7
  %84 = load %struct.sv*, %struct.sv** %op_sv193, align 8
  %sv_flags194 = getelementptr inbounds %struct.sv, %struct.sv* %84, i32 0, i32 2
  %85 = load i32, i32* %sv_flags194, align 4
  %and195 = and i32 %85, 16826623
  %cmp196 = icmp eq i32 %and195, 16777226
  br i1 %cmp196, label %cond.false199, label %cond.true198

cond.true198:                                     ; preds = %lor.lhs.false192
  br i1 false, label %if.end258, label %if.then257

cond.false199:                                    ; preds = %lor.lhs.false192, %lor.lhs.false186, %cond.false181
  %86 = load %struct.op*, %struct.op** %o, align 8
  %87 = bitcast %struct.op* %86 to %struct.svop*
  %op_sv200 = getelementptr inbounds %struct.svop, %struct.svop* %87, i32 0, i32 7
  %88 = load %struct.sv*, %struct.sv** %op_sv200, align 8
  %sv_flags201 = getelementptr inbounds %struct.sv, %struct.sv* %88, i32 0, i32 2
  %89 = load i32, i32* %sv_flags201, align 4
  %and202 = and i32 %89, 1024
  %tobool203 = icmp ne i32 %and202, 0
  br i1 %tobool203, label %cond.true204, label %cond.false222

cond.true204:                                     ; preds = %cond.false199
  %90 = load %struct.op*, %struct.op** %o, align 8
  %91 = bitcast %struct.op* %90 to %struct.svop*
  %op_sv205 = getelementptr inbounds %struct.svop, %struct.svop* %91, i32 0, i32 7
  %92 = load %struct.sv*, %struct.sv** %op_sv205, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %92, i32 0, i32 0
  %93 = load i8*, i8** %sv_any, align 8
  %94 = bitcast i8* %93 to %struct.xpv*
  %tobool206 = icmp ne %struct.xpv* %94, null
  br i1 %tobool206, label %land.lhs.true207, label %if.then257

land.lhs.true207:                                 ; preds = %cond.true204
  %95 = load %struct.op*, %struct.op** %o, align 8
  %96 = bitcast %struct.op* %95 to %struct.svop*
  %op_sv208 = getelementptr inbounds %struct.svop, %struct.svop* %96, i32 0, i32 7
  %97 = load %struct.sv*, %struct.sv** %op_sv208, align 8
  %sv_any209 = getelementptr inbounds %struct.sv, %struct.sv* %97, i32 0, i32 0
  %98 = load i8*, i8** %sv_any209, align 8
  %99 = bitcast i8* %98 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %99, i32 0, i32 2
  %100 = load i64, i64* %xpv_cur, align 8
  %cmp210 = icmp ugt i64 %100, 1
  br i1 %cmp210, label %if.end258, label %lor.lhs.false212

lor.lhs.false212:                                 ; preds = %land.lhs.true207
  %101 = load %struct.op*, %struct.op** %o, align 8
  %102 = bitcast %struct.op* %101 to %struct.svop*
  %op_sv213 = getelementptr inbounds %struct.svop, %struct.svop* %102, i32 0, i32 7
  %103 = load %struct.sv*, %struct.sv** %op_sv213, align 8
  %sv_any214 = getelementptr inbounds %struct.sv, %struct.sv* %103, i32 0, i32 0
  %104 = load i8*, i8** %sv_any214, align 8
  %105 = bitcast i8* %104 to %struct.xpv*
  %xpv_cur215 = getelementptr inbounds %struct.xpv, %struct.xpv* %105, i32 0, i32 2
  %106 = load i64, i64* %xpv_cur215, align 8
  %tobool216 = icmp ne i64 %106, 0
  br i1 %tobool216, label %land.lhs.true217, label %if.then257

land.lhs.true217:                                 ; preds = %lor.lhs.false212
  %107 = load %struct.op*, %struct.op** %o, align 8
  %108 = bitcast %struct.op* %107 to %struct.svop*
  %op_sv218 = getelementptr inbounds %struct.svop, %struct.svop* %108, i32 0, i32 7
  %109 = load %struct.sv*, %struct.sv** %op_sv218, align 8
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %109, i32 0, i32 3
  %svu_pv = bitcast %union.anon* %sv_u to i8**
  %110 = load i8*, i8** %svu_pv, align 8
  %111 = load i8, i8* %110, align 1
  %conv219 = sext i8 %111 to i32
  %cmp220 = icmp ne i32 %conv219, 48
  br i1 %cmp220, label %if.end258, label %if.then257

cond.false222:                                    ; preds = %cond.false199
  %112 = load %struct.op*, %struct.op** %o, align 8
  %113 = bitcast %struct.op* %112 to %struct.svop*
  %op_sv223 = getelementptr inbounds %struct.svop, %struct.svop* %113, i32 0, i32 7
  %114 = load %struct.sv*, %struct.sv** %op_sv223, align 8
  %sv_flags224 = getelementptr inbounds %struct.sv, %struct.sv* %114, i32 0, i32 2
  %115 = load i32, i32* %sv_flags224, align 4
  %and225 = and i32 %115, 768
  %tobool226 = icmp ne i32 %and225, 0
  br i1 %tobool226, label %cond.true227, label %cond.false253

cond.true227:                                     ; preds = %cond.false222
  %116 = load %struct.op*, %struct.op** %o, align 8
  %117 = bitcast %struct.op* %116 to %struct.svop*
  %op_sv228 = getelementptr inbounds %struct.svop, %struct.svop* %117, i32 0, i32 7
  %118 = load %struct.sv*, %struct.sv** %op_sv228, align 8
  %sv_flags229 = getelementptr inbounds %struct.sv, %struct.sv* %118, i32 0, i32 2
  %119 = load i32, i32* %sv_flags229, align 4
  %and230 = and i32 %119, 256
  %tobool231 = icmp ne i32 %and230, 0
  br i1 %tobool231, label %land.lhs.true232, label %lor.lhs.false237

land.lhs.true232:                                 ; preds = %cond.true227
  %120 = load %struct.op*, %struct.op** %o, align 8
  %121 = bitcast %struct.op* %120 to %struct.svop*
  %op_sv233 = getelementptr inbounds %struct.svop, %struct.svop* %121, i32 0, i32 7
  %122 = load %struct.sv*, %struct.sv** %op_sv233, align 8
  %sv_any234 = getelementptr inbounds %struct.sv, %struct.sv* %122, i32 0, i32 0
  %123 = load i8*, i8** %sv_any234, align 8
  %124 = bitcast i8* %123 to %struct.xpviv*
  %xiv_u = getelementptr inbounds %struct.xpviv, %struct.xpviv* %124, i32 0, i32 4
  %xivu_iv = bitcast %union._xivu* %xiv_u to i64*
  %125 = load i64, i64* %xivu_iv, align 8
  %cmp235 = icmp ne i64 %125, 0
  br i1 %cmp235, label %if.end258, label %lor.lhs.false237

lor.lhs.false237:                                 ; preds = %land.lhs.true232, %cond.true227
  %126 = load %struct.op*, %struct.op** %o, align 8
  %127 = bitcast %struct.op* %126 to %struct.svop*
  %op_sv238 = getelementptr inbounds %struct.svop, %struct.svop* %127, i32 0, i32 7
  %128 = load %struct.sv*, %struct.sv** %op_sv238, align 8
  %sv_flags239 = getelementptr inbounds %struct.sv, %struct.sv* %128, i32 0, i32 2
  %129 = load i32, i32* %sv_flags239, align 4
  %and240 = and i32 %129, 512
  %tobool241 = icmp ne i32 %and240, 0
  br i1 %tobool241, label %land.lhs.true242, label %if.then257

land.lhs.true242:                                 ; preds = %lor.lhs.false237
  %130 = load %struct.op*, %struct.op** %o, align 8
  %131 = bitcast %struct.op* %130 to %struct.svop*
  %op_sv243 = getelementptr inbounds %struct.svop, %struct.svop* %131, i32 0, i32 7
  %132 = load %struct.sv*, %struct.sv** %op_sv243, align 8
  %sv_any244 = getelementptr inbounds %struct.sv, %struct.sv* %132, i32 0, i32 0
  %133 = load i8*, i8** %sv_any244, align 8
  %134 = bitcast i8* %133 to %struct.xpvnv*
  %xnv_u = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %134, i32 0, i32 5
  %xnv_nv = bitcast %union._xnvu* %xnv_u to double*
  %135 = load double, double* %xnv_nv, align 8
  %cmp245 = fcmp uno double %135, %135
  br i1 %cmp245, label %if.end258, label %lor.lhs.false246

lor.lhs.false246:                                 ; preds = %land.lhs.true242
  %136 = load %struct.op*, %struct.op** %o, align 8
  %137 = bitcast %struct.op* %136 to %struct.svop*
  %op_sv247 = getelementptr inbounds %struct.svop, %struct.svop* %137, i32 0, i32 7
  %138 = load %struct.sv*, %struct.sv** %op_sv247, align 8
  %sv_any248 = getelementptr inbounds %struct.sv, %struct.sv* %138, i32 0, i32 0
  %139 = load i8*, i8** %sv_any248, align 8
  %140 = bitcast i8* %139 to %struct.xpvnv*
  %xnv_u249 = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %140, i32 0, i32 5
  %xnv_nv250 = bitcast %union._xnvu* %xnv_u249 to double*
  %141 = load double, double* %xnv_nv250, align 8
  %cmp251 = fcmp une double %141, 0.000000e+00
  br i1 %cmp251, label %if.end258, label %if.then257

cond.false253:                                    ; preds = %cond.false222
  %142 = load %struct.op*, %struct.op** %o, align 8
  %143 = bitcast %struct.op* %142 to %struct.svop*
  %op_sv254 = getelementptr inbounds %struct.svop, %struct.svop* %143, i32 0, i32 7
  %144 = load %struct.sv*, %struct.sv** %op_sv254, align 8
  %call255 = call zeroext i1 @Perl_sv_2bool_flags(%struct.sv* %144, i32 0)
  br i1 %call255, label %if.end258, label %if.then257

if.then257:                                       ; preds = %cond.false253, %lor.lhs.false246, %lor.lhs.false237, %land.lhs.true217, %lor.lhs.false212, %cond.true204, %cond.true198, %cond.true177, %cond.false170, %cond.true169
  %145 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %146 = bitcast %struct.loop* %145 to %struct.op*
  call void @Perl_op_free(%struct.op* %146)
  %147 = load %struct.op*, %struct.op** %expr.addr, align 8
  store %struct.op* %147, %struct.op** %retval, align 8
  br label %return

if.end258:                                        ; preds = %cond.false253, %lor.lhs.false246, %land.lhs.true242, %land.lhs.true232, %land.lhs.true217, %land.lhs.true207, %cond.true198, %cond.true177, %land.lhs.true160, %if.then155
  %148 = load %struct.op*, %struct.op** %listop, align 8
  %tobool259 = icmp ne %struct.op* %148, null
  br i1 %tobool259, label %if.then260, label %if.end276

if.then260:                                       ; preds = %if.end258
  %149 = load %struct.op*, %struct.op** %o, align 8
  %150 = load %struct.op*, %struct.op** %listop, align 8
  %cmp261 = icmp eq %struct.op* %149, %150
  br i1 %cmp261, label %cond.true263, label %cond.false264

cond.true263:                                     ; preds = %if.then260
  %151 = load %struct.op*, %struct.op** %redo, align 8
  br label %cond.end273

cond.false264:                                    ; preds = %if.then260
  %152 = load %struct.op*, %struct.op** %o, align 8
  %op_next265 = getelementptr inbounds %struct.op, %struct.op* %152, i32 0, i32 0
  %153 = load %struct.op*, %struct.op** %op_next265, align 8
  %tobool266 = icmp ne %struct.op* %153, null
  br i1 %tobool266, label %cond.true267, label %cond.false269

cond.true267:                                     ; preds = %cond.false264
  %154 = load %struct.op*, %struct.op** %o, align 8
  %op_next268 = getelementptr inbounds %struct.op, %struct.op* %154, i32 0, i32 0
  %155 = load %struct.op*, %struct.op** %op_next268, align 8
  br label %cond.end271

cond.false269:                                    ; preds = %cond.false264
  %156 = load %struct.op*, %struct.op** %o, align 8
  %call270 = call %struct.op* @Perl_op_linklist(%struct.op* %156)
  br label %cond.end271

cond.end271:                                      ; preds = %cond.false269, %cond.true267
  %cond272 = phi %struct.op* [ %155, %cond.true267 ], [ %call270, %cond.false269 ]
  br label %cond.end273

cond.end273:                                      ; preds = %cond.end271, %cond.true263
  %cond274 = phi %struct.op* [ %151, %cond.true263 ], [ %cond272, %cond.end271 ]
  %157 = load %struct.op*, %struct.op** %listop, align 8
  %158 = bitcast %struct.op* %157 to %struct.listop*
  %op_last = getelementptr inbounds %struct.listop, %struct.listop* %158, i32 0, i32 8
  %159 = load %struct.op*, %struct.op** %op_last, align 8
  %op_next275 = getelementptr inbounds %struct.op, %struct.op* %159, i32 0, i32 0
  store %struct.op* %cond274, %struct.op** %op_next275, align 8
  br label %if.end276

if.end276:                                        ; preds = %cond.end273, %if.end258
  br label %if.end278

if.else277:                                       ; preds = %cond.end152
  %160 = load %struct.op*, %struct.op** %listop, align 8
  store %struct.op* %160, %struct.op** %o, align 8
  br label %if.end278

if.end278:                                        ; preds = %if.else277, %if.end276
  %161 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %tobool279 = icmp ne %struct.loop* %161, null
  br i1 %tobool279, label %if.end286, label %if.then280

if.then280:                                       ; preds = %if.end278
  %call281 = call i8* @Perl_Slab_Alloc(i64 80)
  %162 = bitcast i8* %call281 to %struct.loop*
  store %struct.loop* %162, %struct.loop** %loop.addr, align 8
  br label %do.body

do.body:                                          ; preds = %if.then280
  %163 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %op_type282 = getelementptr inbounds %struct.loop, %struct.loop* %163, i32 0, i32 4
  %bf.load283 = load i16, i16* %op_type282, align 8
  %bf.clear284 = and i16 %bf.load283, -512
  %bf.set = or i16 %bf.clear284, 201
  store i16 %bf.set, i16* %op_type282, align 8
  %164 = load %struct.op* ()*, %struct.op* ()** getelementptr inbounds ([0 x %struct.op* ()*], [0 x %struct.op* ()*]* @PL_ppaddr, i64 0, i64 201), align 8
  %165 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %op_ppaddr = getelementptr inbounds %struct.loop, %struct.loop* %165, i32 0, i32 2
  store %struct.op* ()* %164, %struct.op* ()** %op_ppaddr, align 8
  br label %do.end

do.end:                                           ; preds = %do.body
  %166 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %op_private = getelementptr inbounds %struct.loop, %struct.loop* %166, i32 0, i32 6
  store i8 0, i8* %op_private, align 1
  %167 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %168 = bitcast %struct.loop* %167 to %struct.op*
  %169 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %op_next285 = getelementptr inbounds %struct.loop, %struct.loop* %169, i32 0, i32 0
  store %struct.op* %168, %struct.op** %op_next285, align 8
  br label %if.end286

if.end286:                                        ; preds = %do.end, %if.end278
  %170 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %171 = bitcast %struct.loop* %170 to %struct.op*
  %172 = load %struct.op*, %struct.op** %o, align 8
  %call287 = call %struct.op* @Perl_newBINOP(i32 202, i32 0, %struct.op* %171, %struct.op* %172)
  store %struct.op* %call287, %struct.op** %o, align 8
  %173 = load %struct.op*, %struct.op** %redo, align 8
  %174 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %op_redoop = getelementptr inbounds %struct.loop, %struct.loop* %174, i32 0, i32 9
  store %struct.op* %173, %struct.op** %op_redoop, align 8
  %175 = load %struct.op*, %struct.op** %o, align 8
  %176 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %op_lastop = getelementptr inbounds %struct.loop, %struct.loop* %176, i32 0, i32 11
  store %struct.op* %175, %struct.op** %op_lastop, align 8
  %177 = load i8, i8* %loopflags, align 1
  %conv288 = zext i8 %177 to i32
  %178 = load %struct.op*, %struct.op** %o, align 8
  %op_private289 = getelementptr inbounds %struct.op, %struct.op* %178, i32 0, i32 6
  %179 = load i8, i8* %op_private289, align 1
  %conv290 = zext i8 %179 to i32
  %or = or i32 %conv290, %conv288
  %conv291 = trunc i32 %or to i8
  store i8 %conv291, i8* %op_private289, align 1
  %180 = load %struct.op*, %struct.op** %next, align 8
  %tobool292 = icmp ne %struct.op* %180, null
  br i1 %tobool292, label %if.then293, label %if.else294

if.then293:                                       ; preds = %if.end286
  %181 = load %struct.op*, %struct.op** %next, align 8
  %182 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %op_nextop = getelementptr inbounds %struct.loop, %struct.loop* %182, i32 0, i32 10
  store %struct.op* %181, %struct.op** %op_nextop, align 8
  br label %if.end296

if.else294:                                       ; preds = %if.end286
  %183 = load %struct.op*, %struct.op** %o, align 8
  %184 = load %struct.loop*, %struct.loop** %loop.addr, align 8
  %op_nextop295 = getelementptr inbounds %struct.loop, %struct.loop* %184, i32 0, i32 10
  store %struct.op* %183, %struct.op** %op_nextop295, align 8
  br label %if.end296

if.end296:                                        ; preds = %if.else294, %if.then293
  %185 = load i32, i32* %flags.addr, align 4
  %186 = load %struct.op*, %struct.op** %o, align 8
  %op_flags297 = getelementptr inbounds %struct.op, %struct.op* %186, i32 0, i32 5
  %187 = load i8, i8* %op_flags297, align 2
  %conv298 = zext i8 %187 to i32
  %or299 = or i32 %conv298, %185
  %conv300 = trunc i32 %or299 to i8
  store i8 %conv300, i8* %op_flags297, align 2
  %188 = load i32, i32* %flags.addr, align 4
  %shr = ashr i32 %188, 8
  %189 = load %struct.op*, %struct.op** %o, align 8
  %op_private301 = getelementptr inbounds %struct.op, %struct.op* %189, i32 0, i32 6
  %190 = load i8, i8* %op_private301, align 1
  %conv302 = zext i8 %190 to i32
  %or303 = or i32 %conv302, %shr
  %conv304 = trunc i32 %or303 to i8
  store i8 %conv304, i8* %op_private301, align 1
  %191 = load %struct.op*, %struct.op** %o, align 8
  store %struct.op* %191, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %if.end296, %if.then257
  %192 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %192
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_newFOROP(i32 %flags, %struct.op* %sv, %struct.op* %expr, %struct.op* %block, %struct.op* %cont) #0 {
entry:
  %flags.addr = alloca i32, align 4
  %sv.addr = alloca %struct.op*, align 8
  %expr.addr = alloca %struct.op*, align 8
  %block.addr = alloca %struct.op*, align 8
  %cont.addr = alloca %struct.op*, align 8
  %loop = alloca %struct.loop*, align 8
  %wop = alloca %struct.op*, align 8
  %padoff = alloca i64, align 8
  %iterflags = alloca i32, align 4
  %iterpflags = alloca i32, align 4
  %pn = alloca %struct.padname*, align 8
  %name = alloca i8*, align 8
  %offset = alloca i64, align 8
  %flip = alloca %struct.unop*, align 8
  %range = alloca %struct.logop*, align 8
  %left = alloca %struct.op*, align 8
  %right = alloca %struct.op*, align 8
  %listop = alloca %struct.listop*, align 8
  %tmp = alloca %struct.loop*, align 8
  store i32 %flags, i32* %flags.addr, align 4
  store %struct.op* %sv, %struct.op** %sv.addr, align 8
  store %struct.op* %expr, %struct.op** %expr.addr, align 8
  store %struct.op* %block, %struct.op** %block.addr, align 8
  store %struct.op* %cont, %struct.op** %cont.addr, align 8
  store i64 0, i64* %padoff, align 8
  store i32 0, i32* %iterflags, align 4
  store i32 0, i32* %iterpflags, align 4
  %0 = load %struct.op*, %struct.op** %sv.addr, align 8
  %tobool = icmp ne %struct.op* %0, null
  br i1 %tobool, label %if.then, label %if.else68

if.then:                                          ; preds = %entry
  %1 = load %struct.op*, %struct.op** %sv.addr, align 8
  %op_type = getelementptr inbounds %struct.op, %struct.op* %1, i32 0, i32 4
  %bf.load = load i16, i16* %op_type, align 8
  %bf.clear = and i16 %bf.load, 511
  %bf.cast = zext i16 %bf.clear to i32
  %cmp = icmp eq i32 %bf.cast, 15
  br i1 %cmp, label %if.then1, label %if.else

if.then1:                                         ; preds = %if.then
  %2 = load %struct.op*, %struct.op** %sv.addr, align 8
  %op_private = getelementptr inbounds %struct.op, %struct.op* %2, i32 0, i32 6
  %3 = load i8, i8* %op_private, align 1
  %conv = zext i8 %3 to i32
  %and = and i32 %conv, 64
  store i32 %and, i32* %iterpflags, align 4
  br label %do.body

do.body:                                          ; preds = %if.then1
  %4 = load %struct.op*, %struct.op** %sv.addr, align 8
  %op_type2 = getelementptr inbounds %struct.op, %struct.op* %4, i32 0, i32 4
  %bf.load3 = load i16, i16* %op_type2, align 8
  %bf.clear4 = and i16 %bf.load3, -512
  %bf.set = or i16 %bf.clear4, 14
  store i16 %bf.set, i16* %op_type2, align 8
  %5 = load %struct.op* ()*, %struct.op* ()** getelementptr inbounds ([0 x %struct.op* ()*], [0 x %struct.op* ()*]* @PL_ppaddr, i64 0, i64 14), align 8
  %6 = load %struct.op*, %struct.op** %sv.addr, align 8
  %op_ppaddr = getelementptr inbounds %struct.op, %struct.op* %6, i32 0, i32 2
  store %struct.op* ()* %5, %struct.op* ()** %op_ppaddr, align 8
  br label %do.end

do.end:                                           ; preds = %do.body
  %7 = load %struct.op*, %struct.op** %sv.addr, align 8
  %8 = bitcast %struct.op* %7 to %struct.unop*
  %op_first = getelementptr inbounds %struct.unop, %struct.unop* %8, i32 0, i32 7
  %9 = load %struct.op*, %struct.op** %op_first, align 8
  %op_type5 = getelementptr inbounds %struct.op, %struct.op* %9, i32 0, i32 4
  %bf.load6 = load i16, i16* %op_type5, align 8
  %bf.clear7 = and i16 %bf.load6, 511
  %bf.cast8 = zext i16 %bf.clear7 to i32
  %cmp9 = icmp eq i32 %bf.cast8, 7
  br i1 %cmp9, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %do.end
  %10 = load %struct.op*, %struct.op** %sv.addr, align 8
  %11 = bitcast %struct.op* %10 to %struct.unop*
  %op_first11 = getelementptr inbounds %struct.unop, %struct.unop* %11, i32 0, i32 7
  %12 = load %struct.op*, %struct.op** %op_first11, align 8
  %13 = bitcast %struct.op* %12 to %struct.svop*
  %op_sv = getelementptr inbounds %struct.svop, %struct.svop* %13, i32 0, i32 7
  %14 = load %struct.sv*, %struct.sv** %op_sv, align 8
  %15 = bitcast %struct.sv* %14 to %struct.gv*
  %16 = load %struct.gv*, %struct.gv** @PL_defgv, align 8
  %cmp12 = icmp eq %struct.gv* %15, %16
  br i1 %cmp12, label %if.then14, label %if.end

if.then14:                                        ; preds = %land.lhs.true
  %17 = load i32, i32* %iterpflags, align 4
  %or = or i32 %17, 8
  store i32 %or, i32* %iterpflags, align 4
  br label %if.end

if.end:                                           ; preds = %if.then14, %land.lhs.true, %do.end
  br label %if.end46

if.else:                                          ; preds = %if.then
  %18 = load %struct.op*, %struct.op** %sv.addr, align 8
  %op_type15 = getelementptr inbounds %struct.op, %struct.op* %18, i32 0, i32 4
  %bf.load16 = load i16, i16* %op_type15, align 8
  %bf.clear17 = and i16 %bf.load16, 511
  %bf.cast18 = zext i16 %bf.clear17 to i32
  %cmp19 = icmp eq i32 %bf.cast18, 9
  br i1 %cmp19, label %if.then21, label %if.else26

if.then21:                                        ; preds = %if.else
  %19 = load %struct.op*, %struct.op** %sv.addr, align 8
  %op_private22 = getelementptr inbounds %struct.op, %struct.op* %19, i32 0, i32 6
  %20 = load i8, i8* %op_private22, align 1
  %conv23 = zext i8 %20 to i32
  %and24 = and i32 %conv23, 128
  store i32 %and24, i32* %iterpflags, align 4
  %21 = load %struct.op*, %struct.op** %sv.addr, align 8
  %op_targ = getelementptr inbounds %struct.op, %struct.op* %21, i32 0, i32 3
  %22 = load i64, i64* %op_targ, align 8
  store i64 %22, i64* %padoff, align 8
  %23 = load %struct.op*, %struct.op** %sv.addr, align 8
  %op_targ25 = getelementptr inbounds %struct.op, %struct.op* %23, i32 0, i32 3
  store i64 0, i64* %op_targ25, align 8
  %24 = load %struct.op*, %struct.op** %sv.addr, align 8
  call void @Perl_op_free(%struct.op* %24)
  store %struct.op* null, %struct.op** %sv.addr, align 8
  %25 = load %struct.padnamelist*, %struct.padnamelist** @PL_comppad_name, align 8
  %xpadnl_alloc = getelementptr inbounds %struct.padnamelist, %struct.padnamelist* %25, i32 0, i32 1
  %26 = load %struct.padname**, %struct.padname*** %xpadnl_alloc, align 8
  %27 = load i64, i64* %padoff, align 8
  %arrayidx = getelementptr inbounds %struct.padname*, %struct.padname** %26, i64 %27
  %28 = load %struct.padname*, %struct.padname** %arrayidx, align 8
  %xpadn_gen = getelementptr inbounds %struct.padname, %struct.padname* %28, i32 0, i32 6
  store i32 2147483647, i32* %xpadn_gen, align 4
  br label %if.end45

if.else26:                                        ; preds = %if.else
  %29 = load %struct.op*, %struct.op** %sv.addr, align 8
  %op_type27 = getelementptr inbounds %struct.op, %struct.op* %29, i32 0, i32 4
  %bf.load28 = load i16, i16* %op_type27, align 8
  %bf.clear29 = and i16 %bf.load28, 511
  %bf.cast30 = zext i16 %bf.clear29 to i32
  %cmp31 = icmp eq i32 %bf.cast30, 0
  br i1 %cmp31, label %land.lhs.true33, label %if.else38

land.lhs.true33:                                  ; preds = %if.else26
  %30 = load %struct.op*, %struct.op** %sv.addr, align 8
  %op_targ34 = getelementptr inbounds %struct.op, %struct.op* %30, i32 0, i32 3
  %31 = load i64, i64* %op_targ34, align 8
  %cmp35 = icmp eq i64 %31, 21
  br i1 %cmp35, label %if.then37, label %if.else38

if.then37:                                        ; preds = %land.lhs.true33
  br label %if.end44

if.else38:                                        ; preds = %land.lhs.true33, %if.else26
  %32 = load %struct.op*, %struct.op** %sv.addr, align 8
  %op_type39 = getelementptr inbounds %struct.op, %struct.op* %32, i32 0, i32 4
  %bf.load40 = load i16, i16* %op_type39, align 8
  %bf.clear41 = and i16 %bf.load40, 511
  %bf.cast42 = zext i16 %bf.clear41 to i32
  %idxprom = zext i32 %bf.cast42 to i64
  %arrayidx43 = getelementptr inbounds [0 x i8*], [0 x i8*]* @PL_op_desc, i64 0, i64 %idxprom
  %33 = load i8*, i8** %arrayidx43, align 8
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.60, i64 0, i64 0), i8* %33)
  br label %if.end44

if.end44:                                         ; preds = %if.else38, %if.then37
  br label %if.end45

if.end45:                                         ; preds = %if.end44, %if.then21
  br label %if.end46

if.end46:                                         ; preds = %if.end45, %if.end
  %34 = load i64, i64* %padoff, align 8
  %tobool47 = icmp ne i64 %34, 0
  br i1 %tobool47, label %if.then48, label %if.end67

if.then48:                                        ; preds = %if.end46
  %35 = load %struct.padnamelist*, %struct.padnamelist** @PL_comppad_name, align 8
  %xpadnl_alloc49 = getelementptr inbounds %struct.padnamelist, %struct.padnamelist* %35, i32 0, i32 1
  %36 = load %struct.padname**, %struct.padname*** %xpadnl_alloc49, align 8
  %37 = load i64, i64* %padoff, align 8
  %arrayidx50 = getelementptr inbounds %struct.padname*, %struct.padname** %36, i64 %37
  %38 = load %struct.padname*, %struct.padname** %arrayidx50, align 8
  store %struct.padname* %38, %struct.padname** %pn, align 8
  %39 = load %struct.padname*, %struct.padname** %pn, align 8
  %xpadn_pv = getelementptr inbounds %struct.padname, %struct.padname* %39, i32 0, i32 0
  %40 = load i8*, i8** %xpadn_pv, align 8
  store i8* %40, i8** %name, align 8
  %41 = load %struct.padname*, %struct.padname** %pn, align 8
  %xpadn_len = getelementptr inbounds %struct.padname, %struct.padname* %41, i32 0, i32 7
  %42 = load i8, i8* %xpadn_len, align 8
  %conv51 = zext i8 %42 to i32
  %cmp52 = icmp eq i32 %conv51, 2
  br i1 %cmp52, label %land.lhs.true54, label %if.end66

land.lhs.true54:                                  ; preds = %if.then48
  %43 = load i8*, i8** %name, align 8
  %arrayidx55 = getelementptr inbounds i8, i8* %43, i64 0
  %44 = load i8, i8* %arrayidx55, align 1
  %conv56 = sext i8 %44 to i32
  %cmp57 = icmp eq i32 %conv56, 36
  br i1 %cmp57, label %land.lhs.true59, label %if.end66

land.lhs.true59:                                  ; preds = %land.lhs.true54
  %45 = load i8*, i8** %name, align 8
  %arrayidx60 = getelementptr inbounds i8, i8* %45, i64 1
  %46 = load i8, i8* %arrayidx60, align 1
  %conv61 = sext i8 %46 to i32
  %cmp62 = icmp eq i32 %conv61, 95
  br i1 %cmp62, label %if.then64, label %if.end66

if.then64:                                        ; preds = %land.lhs.true59
  %47 = load i32, i32* %iterpflags, align 4
  %or65 = or i32 %47, 8
  store i32 %or65, i32* %iterpflags, align 4
  br label %if.end66

if.end66:                                         ; preds = %if.then64, %land.lhs.true59, %land.lhs.true54, %if.then48
  br label %if.end67

if.end67:                                         ; preds = %if.end66, %if.end46
  br label %if.end79

if.else68:                                        ; preds = %entry
  %call = call i64 @Perl_pad_findmy_pvn(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.7, i64 0, i64 0), i64 2, i32 0)
  store i64 %call, i64* %offset, align 8
  %48 = load i64, i64* %offset, align 8
  %cmp69 = icmp eq i64 %48, -1
  br i1 %cmp69, label %if.then74, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.else68
  %49 = load %struct.padnamelist*, %struct.padnamelist** @PL_comppad_name, align 8
  %xpadnl_alloc71 = getelementptr inbounds %struct.padnamelist, %struct.padnamelist* %49, i32 0, i32 1
  %50 = load %struct.padname**, %struct.padname*** %xpadnl_alloc71, align 8
  %51 = load i64, i64* %offset, align 8
  %arrayidx72 = getelementptr inbounds %struct.padname*, %struct.padname** %50, i64 %51
  %52 = load %struct.padname*, %struct.padname** %arrayidx72, align 8
  %xpadn_ourstash = getelementptr inbounds %struct.padname, %struct.padname* %52, i32 0, i32 1
  %53 = load %struct.hv*, %struct.hv** %xpadn_ourstash, align 8
  %tobool73 = icmp ne %struct.hv* %53, null
  br i1 %tobool73, label %if.then74, label %if.else76

if.then74:                                        ; preds = %lor.lhs.false, %if.else68
  %54 = load %struct.gv*, %struct.gv** @PL_defgv, align 8
  %call75 = call %struct.op* @Perl_newGVOP(i32 7, i32 0, %struct.gv* %54)
  store %struct.op* %call75, %struct.op** %sv.addr, align 8
  br label %if.end77

if.else76:                                        ; preds = %lor.lhs.false
  %55 = load i64, i64* %offset, align 8
  store i64 %55, i64* %padoff, align 8
  br label %if.end77

if.end77:                                         ; preds = %if.else76, %if.then74
  %56 = load i32, i32* %iterpflags, align 4
  %or78 = or i32 %56, 8
  store i32 %or78, i32* %iterpflags, align 4
  br label %if.end79

if.end79:                                         ; preds = %if.end77, %if.end67
  %57 = load %struct.op*, %struct.op** %expr.addr, align 8
  %op_type80 = getelementptr inbounds %struct.op, %struct.op* %57, i32 0, i32 4
  %bf.load81 = load i16, i16* %op_type80, align 8
  %bf.clear82 = and i16 %bf.load81, 511
  %bf.cast83 = zext i16 %bf.clear82 to i32
  %cmp84 = icmp eq i32 %bf.cast83, 135
  br i1 %cmp84, label %if.then93, label %lor.lhs.false86

lor.lhs.false86:                                  ; preds = %if.end79
  %58 = load %struct.op*, %struct.op** %expr.addr, align 8
  %op_type87 = getelementptr inbounds %struct.op, %struct.op* %58, i32 0, i32 4
  %bf.load88 = load i16, i16* %op_type87, align 8
  %bf.clear89 = and i16 %bf.load88, 511
  %bf.cast90 = zext i16 %bf.clear89 to i32
  %cmp91 = icmp eq i32 %bf.cast90, 10
  br i1 %cmp91, label %if.then93, label %if.else99

if.then93:                                        ; preds = %lor.lhs.false86, %if.end79
  %59 = load %struct.op*, %struct.op** %expr.addr, align 8
  %call94 = call %struct.op* @Perl_doref(%struct.op* %59, i32 200, i1 zeroext true)
  %call95 = call %struct.op* @Perl_scalar(%struct.op* %call94)
  %call96 = call %struct.op* @S_force_list(%struct.op* %call95, i1 zeroext true)
  %call97 = call %struct.op* @Perl_op_lvalue_flags(%struct.op* %call96, i32 169, i32 0)
  store %struct.op* %call97, %struct.op** %expr.addr, align 8
  %60 = load i32, i32* %iterflags, align 4
  %or98 = or i32 %60, 64
  store i32 %or98, i32* %iterflags, align 4
  br label %if.end140

if.else99:                                        ; preds = %lor.lhs.false86
  %61 = load %struct.op*, %struct.op** %expr.addr, align 8
  %op_type100 = getelementptr inbounds %struct.op, %struct.op* %61, i32 0, i32 4
  %bf.load101 = load i16, i16* %op_type100, align 8
  %bf.clear102 = and i16 %bf.load101, 511
  %bf.cast103 = zext i16 %bf.clear102 to i32
  %cmp104 = icmp eq i32 %bf.cast103, 0
  br i1 %cmp104, label %land.lhs.true106, label %if.else136

land.lhs.true106:                                 ; preds = %if.else99
  %62 = load %struct.op*, %struct.op** %expr.addr, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %62, i32 0, i32 5
  %63 = load i8, i8* %op_flags, align 2
  %conv107 = zext i8 %63 to i32
  %and108 = and i32 %conv107, 4
  %tobool109 = icmp ne i32 %and108, 0
  br i1 %tobool109, label %land.lhs.true110, label %if.else136

land.lhs.true110:                                 ; preds = %land.lhs.true106
  %64 = load %struct.op*, %struct.op** %expr.addr, align 8
  %65 = bitcast %struct.op* %64 to %struct.binop*
  %op_first111 = getelementptr inbounds %struct.binop, %struct.binop* %65, i32 0, i32 7
  %66 = load %struct.op*, %struct.op** %op_first111, align 8
  %op_type112 = getelementptr inbounds %struct.op, %struct.op* %66, i32 0, i32 4
  %bf.load113 = load i16, i16* %op_type112, align 8
  %bf.clear114 = and i16 %bf.load113, 511
  %bf.cast115 = zext i16 %bf.clear114 to i32
  %cmp116 = icmp eq i32 %bf.cast115, 175
  br i1 %cmp116, label %if.then118, label %if.else136

if.then118:                                       ; preds = %land.lhs.true110
  %67 = load %struct.op*, %struct.op** %expr.addr, align 8
  %68 = bitcast %struct.op* %67 to %struct.binop*
  %op_first119 = getelementptr inbounds %struct.binop, %struct.binop* %68, i32 0, i32 7
  %69 = load %struct.op*, %struct.op** %op_first119, align 8
  %70 = bitcast %struct.op* %69 to %struct.unop*
  %op_first120 = getelementptr inbounds %struct.unop, %struct.unop* %70, i32 0, i32 7
  %71 = load %struct.op*, %struct.op** %op_first120, align 8
  %72 = bitcast %struct.op* %71 to %struct.unop*
  store %struct.unop* %72, %struct.unop** %flip, align 8
  %73 = load %struct.unop*, %struct.unop** %flip, align 8
  %op_first121 = getelementptr inbounds %struct.unop, %struct.unop* %73, i32 0, i32 7
  %74 = load %struct.op*, %struct.op** %op_first121, align 8
  %75 = bitcast %struct.op* %74 to %struct.logop*
  store %struct.logop* %75, %struct.logop** %range, align 8
  %76 = load %struct.logop*, %struct.logop** %range, align 8
  %op_first122 = getelementptr inbounds %struct.logop, %struct.logop* %76, i32 0, i32 7
  %77 = load %struct.op*, %struct.op** %op_first122, align 8
  store %struct.op* %77, %struct.op** %left, align 8
  %78 = load %struct.op*, %struct.op** %left, align 8
  %op_sibling = getelementptr inbounds %struct.op, %struct.op* %78, i32 0, i32 1
  %79 = load %struct.op*, %struct.op** %op_sibling, align 8
  %add.ptr = getelementptr inbounds %struct.op, %struct.op* %79, i64 0
  store %struct.op* %add.ptr, %struct.op** %right, align 8
  %80 = load %struct.logop*, %struct.logop** %range, align 8
  %op_flags123 = getelementptr inbounds %struct.logop, %struct.logop* %80, i32 0, i32 5
  %81 = load i8, i8* %op_flags123, align 2
  %conv124 = zext i8 %81 to i32
  %and125 = and i32 %conv124, -5
  %conv126 = trunc i32 %and125 to i8
  store i8 %conv126, i8* %op_flags123, align 2
  %82 = load %struct.logop*, %struct.logop** %range, align 8
  %83 = bitcast %struct.logop* %82 to %struct.op*
  %call127 = call %struct.op* @Perl_op_sibling_splice(%struct.op* %83, %struct.op* null, i32 -1, %struct.op* null)
  %84 = load %struct.op*, %struct.op** %left, align 8
  %85 = load %struct.op*, %struct.op** %right, align 8
  %call128 = call %struct.op* @Perl_newLISTOP(i32 158, i32 0, %struct.op* %84, %struct.op* %85)
  %86 = bitcast %struct.op* %call128 to %struct.listop*
  store %struct.listop* %86, %struct.listop** %listop, align 8
  %87 = load %struct.logop*, %struct.logop** %range, align 8
  %op_next = getelementptr inbounds %struct.logop, %struct.logop* %87, i32 0, i32 0
  %88 = load %struct.op*, %struct.op** %op_next, align 8
  %89 = load %struct.listop*, %struct.listop** %listop, align 8
  %op_first129 = getelementptr inbounds %struct.listop, %struct.listop* %89, i32 0, i32 7
  %90 = load %struct.op*, %struct.op** %op_first129, align 8
  %op_next130 = getelementptr inbounds %struct.op, %struct.op* %90, i32 0, i32 0
  store %struct.op* %88, %struct.op** %op_next130, align 8
  %91 = load %struct.logop*, %struct.logop** %range, align 8
  %op_other = getelementptr inbounds %struct.logop, %struct.logop* %91, i32 0, i32 8
  %92 = load %struct.op*, %struct.op** %op_other, align 8
  %93 = load %struct.op*, %struct.op** %left, align 8
  %op_next131 = getelementptr inbounds %struct.op, %struct.op* %93, i32 0, i32 0
  store %struct.op* %92, %struct.op** %op_next131, align 8
  %94 = load %struct.listop*, %struct.listop** %listop, align 8
  %95 = bitcast %struct.listop* %94 to %struct.op*
  %96 = load %struct.op*, %struct.op** %right, align 8
  %op_next132 = getelementptr inbounds %struct.op, %struct.op* %96, i32 0, i32 0
  store %struct.op* %95, %struct.op** %op_next132, align 8
  %97 = load %struct.listop*, %struct.listop** %listop, align 8
  %op_first133 = getelementptr inbounds %struct.listop, %struct.listop* %97, i32 0, i32 7
  %98 = load %struct.op*, %struct.op** %op_first133, align 8
  %99 = load %struct.listop*, %struct.listop** %listop, align 8
  %op_next134 = getelementptr inbounds %struct.listop, %struct.listop* %99, i32 0, i32 0
  store %struct.op* %98, %struct.op** %op_next134, align 8
  %100 = load %struct.op*, %struct.op** %expr.addr, align 8
  call void @Perl_op_free(%struct.op* %100)
  %101 = load %struct.listop*, %struct.listop** %listop, align 8
  %102 = bitcast %struct.listop* %101 to %struct.op*
  store %struct.op* %102, %struct.op** %expr.addr, align 8
  %103 = load %struct.op*, %struct.op** %expr.addr, align 8
  call void @Perl_op_null(%struct.op* %103)
  %104 = load i32, i32* %iterflags, align 4
  %or135 = or i32 %104, 64
  store i32 %or135, i32* %iterflags, align 4
  br label %if.end139

if.else136:                                       ; preds = %land.lhs.true110, %land.lhs.true106, %if.else99
  %105 = load %struct.op*, %struct.op** %expr.addr, align 8
  %call137 = call %struct.op* @S_force_list(%struct.op* %105, i1 zeroext true)
  %call138 = call %struct.op* @Perl_op_lvalue_flags(%struct.op* %call137, i32 169, i32 0)
  store %struct.op* %call138, %struct.op** %expr.addr, align 8
  br label %if.end139

if.end139:                                        ; preds = %if.else136, %if.then118
  br label %if.end140

if.end140:                                        ; preds = %if.end139, %if.then93
  %106 = load i32, i32* %iterflags, align 4
  %107 = load %struct.op*, %struct.op** %expr.addr, align 8
  %call141 = call %struct.op* @Perl_list(%struct.op* %107)
  %108 = load %struct.op*, %struct.op** %sv.addr, align 8
  %call142 = call %struct.op* @Perl_scalar(%struct.op* %108)
  %call143 = call %struct.op* @Perl_op_append_elem(i32 158, %struct.op* %call141, %struct.op* %call142)
  %call144 = call %struct.op* @Perl_op_convert_list(i32 199, i32 %106, %struct.op* %call143)
  %109 = bitcast %struct.op* %call144 to %struct.loop*
  store %struct.loop* %109, %struct.loop** %loop, align 8
  %110 = load i32, i32* %iterpflags, align 4
  %conv145 = trunc i32 %110 to i8
  %111 = load %struct.loop*, %struct.loop** %loop, align 8
  %op_private146 = getelementptr inbounds %struct.loop, %struct.loop* %111, i32 0, i32 6
  store i8 %conv145, i8* %op_private146, align 1
  %112 = load %struct.loop*, %struct.loop** %loop, align 8
  %op_slabbed = getelementptr inbounds %struct.loop, %struct.loop* %112, i32 0, i32 4
  %bf.load147 = load i16, i16* %op_slabbed, align 8
  %bf.lshr = lshr i16 %bf.load147, 10
  %bf.clear148 = and i16 %bf.lshr, 1
  %bf.cast149 = zext i16 %bf.clear148 to i32
  %tobool150 = icmp ne i32 %bf.cast149, 0
  br i1 %tobool150, label %land.lhs.true151, label %if.else157

land.lhs.true151:                                 ; preds = %if.end140
  %113 = load %struct.loop*, %struct.loop** %loop, align 8
  %114 = bitcast %struct.loop* %113 to i8*
  %add.ptr152 = getelementptr inbounds i8, i8* %114, i64 sub (i64 0, i64 ptrtoint (%struct.op* getelementptr inbounds (%struct.opslot, %struct.opslot* null, i32 0, i32 2) to i64))
  %115 = bitcast i8* %add.ptr152 to %struct.opslot*
  %opslot_next = getelementptr inbounds %struct.opslot, %struct.opslot* %115, i32 0, i32 0
  %116 = load %struct.opslot*, %struct.opslot** %opslot_next, align 8
  %117 = bitcast %struct.opslot* %116 to i32**
  %118 = load %struct.loop*, %struct.loop** %loop, align 8
  %119 = bitcast %struct.loop* %118 to i32**
  %sub.ptr.lhs.cast = ptrtoint i32** %117 to i64
  %sub.ptr.rhs.cast = ptrtoint i32** %119 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 8
  %cmp153 = icmp ult i64 %sub.ptr.div, 10
  br i1 %cmp153, label %if.then155, label %if.else157

if.then155:                                       ; preds = %land.lhs.true151
  %call156 = call i8* @Perl_Slab_Alloc(i64 80)
  %120 = bitcast i8* %call156 to %struct.loop*
  store %struct.loop* %120, %struct.loop** %tmp, align 8
  %121 = load %struct.loop*, %struct.loop** %tmp, align 8
  %122 = bitcast %struct.loop* %121 to i8*
  %123 = load %struct.loop*, %struct.loop** %loop, align 8
  %124 = bitcast %struct.loop* %123 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %122, i8* align 1 %124, i64 56, i1 false)
  %125 = load %struct.loop*, %struct.loop** %loop, align 8
  %126 = bitcast %struct.loop* %125 to %struct.op*
  call void @S_op_destroy(%struct.op* %126)
  %127 = load %struct.loop*, %struct.loop** %tmp, align 8
  store %struct.loop* %127, %struct.loop** %loop, align 8
  br label %if.end167

if.else157:                                       ; preds = %land.lhs.true151, %if.end140
  %128 = load %struct.loop*, %struct.loop** %loop, align 8
  %op_slabbed158 = getelementptr inbounds %struct.loop, %struct.loop* %128, i32 0, i32 4
  %bf.load159 = load i16, i16* %op_slabbed158, align 8
  %bf.lshr160 = lshr i16 %bf.load159, 10
  %bf.clear161 = and i16 %bf.lshr160, 1
  %bf.cast162 = zext i16 %bf.clear161 to i32
  %tobool163 = icmp ne i32 %bf.cast162, 0
  br i1 %tobool163, label %if.end166, label %if.then164

if.then164:                                       ; preds = %if.else157
  %129 = load %struct.loop*, %struct.loop** %loop, align 8
  %130 = bitcast %struct.loop* %129 to i8*
  %call165 = call i8* @realloc(i8* %130, i64 80) #5
  %131 = bitcast i8* %call165 to %struct.loop*
  store %struct.loop* %131, %struct.loop** %loop, align 8
  br label %if.end166

if.end166:                                        ; preds = %if.then164, %if.else157
  br label %if.end167

if.end167:                                        ; preds = %if.end166, %if.then155
  %132 = load i64, i64* %padoff, align 8
  %133 = load %struct.loop*, %struct.loop** %loop, align 8
  %op_targ168 = getelementptr inbounds %struct.loop, %struct.loop* %133, i32 0, i32 3
  store i64 %132, i64* %op_targ168, align 8
  %134 = load i32, i32* %flags.addr, align 4
  %135 = load %struct.loop*, %struct.loop** %loop, align 8
  %call169 = call %struct.op* @Perl_newOP(i32 200, i32 0)
  %136 = load %struct.op*, %struct.op** %block.addr, align 8
  %137 = load %struct.op*, %struct.op** %cont.addr, align 8
  %call170 = call %struct.op* @Perl_newWHILEOP(i32 %134, i32 1, %struct.loop* %135, %struct.op* %call169, %struct.op* %136, %struct.op* %137, i32 0)
  store %struct.op* %call170, %struct.op** %wop, align 8
  %138 = load %struct.op*, %struct.op** %wop, align 8
  ret %struct.op* %138
}

; Function Attrs: nounwind
declare dso_local i8* @realloc(i8*, i64) #1

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_newLOOPEX(i32 %type, %struct.op* %label) #0 {
entry:
  %type.addr = alloca i32, align 4
  %label.addr = alloca %struct.op*, align 8
  %o = alloca %struct.op*, align 8
  %sv = alloca %struct.sv*, align 8
  %l = alloca i64, align 8
  %s = alloca i8*, align 8
  store i32 %type, i32* %type.addr, align 4
  store %struct.op* %label, %struct.op** %label.addr, align 8
  store %struct.op* null, %struct.op** %o, align 8
  %0 = load i32, i32* %type.addr, align 4
  %cmp = icmp ne i32 %0, 208
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = load %struct.op*, %struct.op** %label.addr, align 8
  %op_type = getelementptr inbounds %struct.op, %struct.op* %1, i32 0, i32 4
  %bf.load = load i16, i16* %op_type, align 8
  %bf.clear = and i16 %bf.load, 511
  %bf.cast = zext i16 %bf.clear to i32
  %cmp1 = icmp eq i32 %bf.cast, 1
  br i1 %cmp1, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %if.then
  %2 = load %struct.op*, %struct.op** %label.addr, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %2, i32 0, i32 5
  %3 = load i8, i8* %op_flags, align 2
  %conv = zext i8 %3 to i32
  %and = and i32 %conv, 8
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then2, label %if.end

if.then2:                                         ; preds = %land.lhs.true
  %4 = load i32, i32* %type.addr, align 4
  %call = call %struct.op* @Perl_newOP(i32 %4, i32 128)
  store %struct.op* %call, %struct.op** %o, align 8
  br label %if.end

if.end:                                           ; preds = %if.then2, %land.lhs.true, %if.then
  br label %if.end18

if.else:                                          ; preds = %entry
  %5 = load %struct.op*, %struct.op** %label.addr, align 8
  %op_type3 = getelementptr inbounds %struct.op, %struct.op* %5, i32 0, i32 4
  %bf.load4 = load i16, i16* %op_type3, align 8
  %bf.clear5 = and i16 %bf.load4, 511
  %bf.cast6 = zext i16 %bf.clear5 to i32
  %cmp7 = icmp eq i32 %bf.cast6, 185
  br i1 %cmp7, label %land.lhs.true9, label %if.end17

land.lhs.true9:                                   ; preds = %if.else
  %6 = load %struct.op*, %struct.op** %label.addr, align 8
  %op_flags10 = getelementptr inbounds %struct.op, %struct.op* %6, i32 0, i32 5
  %7 = load i8, i8* %op_flags10, align 2
  %conv11 = zext i8 %7 to i32
  %and12 = and i32 %conv11, 64
  %tobool13 = icmp ne i32 %and12, 0
  br i1 %tobool13, label %if.end17, label %if.then14

if.then14:                                        ; preds = %land.lhs.true9
  %8 = load %struct.op*, %struct.op** %label.addr, align 8
  %call15 = call %struct.op* @Perl_op_lvalue_flags(%struct.op* %8, i32 20, i32 0)
  %call16 = call %struct.op* @Perl_newUNOP(i32 20, i32 0, %struct.op* %call15)
  store %struct.op* %call16, %struct.op** %label.addr, align 8
  br label %if.end17

if.end17:                                         ; preds = %if.then14, %land.lhs.true9, %if.else
  br label %if.end18

if.end18:                                         ; preds = %if.end17, %if.end
  %9 = load %struct.op*, %struct.op** %label.addr, align 8
  %op_type19 = getelementptr inbounds %struct.op, %struct.op* %9, i32 0, i32 4
  %bf.load20 = load i16, i16* %op_type19, align 8
  %bf.clear21 = and i16 %bf.load20, 511
  %bf.cast22 = zext i16 %bf.clear21 to i32
  %cmp23 = icmp eq i32 %bf.cast22, 5
  br i1 %cmp23, label %if.then25, label %if.end55

if.then25:                                        ; preds = %if.end18
  %10 = load %struct.op*, %struct.op** %label.addr, align 8
  %11 = bitcast %struct.op* %10 to %struct.svop*
  %op_sv = getelementptr inbounds %struct.svop, %struct.svop* %11, i32 0, i32 7
  %12 = load %struct.sv*, %struct.sv** %op_sv, align 8
  store %struct.sv* %12, %struct.sv** %sv, align 8
  %13 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %13, i32 0, i32 2
  %14 = load i32, i32* %sv_flags, align 4
  %and26 = and i32 %14, 2098176
  %cmp27 = icmp eq i32 %and26, 1024
  br i1 %cmp27, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then25
  %15 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %15, i32 0, i32 0
  %16 = load i8*, i8** %sv_any, align 8
  %17 = bitcast i8* %16 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %17, i32 0, i32 2
  %18 = load i64, i64* %xpv_cur, align 8
  store i64 %18, i64* %l, align 8
  %19 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %19, i32 0, i32 3
  %svu_pv = bitcast %union.anon* %sv_u to i8**
  %20 = load i8*, i8** %svu_pv, align 8
  %add.ptr = getelementptr inbounds i8, i8* %20, i64 0
  br label %cond.end

cond.false:                                       ; preds = %if.then25
  %21 = load %struct.sv*, %struct.sv** %sv, align 8
  %call29 = call i8* @Perl_sv_2pv_flags(%struct.sv* %21, i64* %l, i32 34)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %add.ptr, %cond.true ], [ %call29, %cond.false ]
  store i8* %cond, i8** %s, align 8
  %22 = load i64, i64* %l, align 8
  %23 = load i8*, i8** %s, align 8
  %call30 = call i64 @strlen(i8* %23) #7
  %cmp31 = icmp eq i64 %22, %call30
  br i1 %cmp31, label %if.then33, label %if.end54

if.then33:                                        ; preds = %cond.end
  %24 = load i32, i32* %type.addr, align 4
  %25 = load %struct.op*, %struct.op** %label.addr, align 8
  %26 = bitcast %struct.op* %25 to %struct.svop*
  %op_sv34 = getelementptr inbounds %struct.svop, %struct.svop* %26, i32 0, i32 7
  %27 = load %struct.sv*, %struct.sv** %op_sv34, align 8
  %sv_flags35 = getelementptr inbounds %struct.sv, %struct.sv* %27, i32 0, i32 2
  %28 = load i32, i32* %sv_flags35, align 4
  %and36 = and i32 %28, 536870912
  %29 = load %struct.op*, %struct.op** %label.addr, align 8
  %30 = bitcast %struct.op* %29 to %struct.svop*
  %op_sv37 = getelementptr inbounds %struct.svop, %struct.svop* %30, i32 0, i32 7
  %31 = load %struct.sv*, %struct.sv** %op_sv37, align 8
  %sv_flags38 = getelementptr inbounds %struct.sv, %struct.sv* %31, i32 0, i32 2
  %32 = load i32, i32* %sv_flags38, align 4
  %and39 = and i32 %32, 2098176
  %cmp40 = icmp eq i32 %and39, 1024
  br i1 %cmp40, label %cond.true42, label %cond.false47

cond.true42:                                      ; preds = %if.then33
  %33 = load %struct.op*, %struct.op** %label.addr, align 8
  %34 = bitcast %struct.op* %33 to %struct.svop*
  %op_sv43 = getelementptr inbounds %struct.svop, %struct.svop* %34, i32 0, i32 7
  %35 = load %struct.sv*, %struct.sv** %op_sv43, align 8
  %sv_u44 = getelementptr inbounds %struct.sv, %struct.sv* %35, i32 0, i32 3
  %svu_pv45 = bitcast %union.anon* %sv_u44 to i8**
  %36 = load i8*, i8** %svu_pv45, align 8
  %add.ptr46 = getelementptr inbounds i8, i8* %36, i64 0
  br label %cond.end50

cond.false47:                                     ; preds = %if.then33
  %37 = load %struct.op*, %struct.op** %label.addr, align 8
  %38 = bitcast %struct.op* %37 to %struct.svop*
  %op_sv48 = getelementptr inbounds %struct.svop, %struct.svop* %38, i32 0, i32 7
  %39 = load %struct.sv*, %struct.sv** %op_sv48, align 8
  %call49 = call i8* @Perl_sv_2pv_flags(%struct.sv* %39, i64* null, i32 34)
  br label %cond.end50

cond.end50:                                       ; preds = %cond.false47, %cond.true42
  %cond51 = phi i8* [ %add.ptr46, %cond.true42 ], [ %call49, %cond.false47 ]
  %call52 = call i8* @Perl_savesharedpv(i8* %cond51)
  %call53 = call %struct.op* @Perl_newPVOP(i32 %24, i32 %and36, i8* %call52)
  store %struct.op* %call53, %struct.op** %o, align 8
  br label %if.end54

if.end54:                                         ; preds = %cond.end50, %cond.end
  br label %if.end55

if.end55:                                         ; preds = %if.end54, %if.end18
  %40 = load %struct.op*, %struct.op** %o, align 8
  %tobool56 = icmp ne %struct.op* %40, null
  br i1 %tobool56, label %if.then57, label %if.else58

if.then57:                                        ; preds = %if.end55
  %41 = load %struct.op*, %struct.op** %label.addr, align 8
  call void @Perl_op_free(%struct.op* %41)
  br label %if.end60

if.else58:                                        ; preds = %if.end55
  %42 = load i32, i32* %type.addr, align 4
  %43 = load %struct.op*, %struct.op** %label.addr, align 8
  %call59 = call %struct.op* @Perl_newUNOP(i32 %42, i32 64, %struct.op* %43)
  store %struct.op* %call59, %struct.op** %o, align 8
  br label %if.end60

if.end60:                                         ; preds = %if.else58, %if.then57
  %44 = load i32, i32* getelementptr inbounds (%struct.cop, %struct.cop* @PL_compiling, i32 0, i32 10), align 8
  %or = or i32 %44, 256
  store i32 %or, i32* getelementptr inbounds (%struct.cop, %struct.cop* @PL_compiling, i32 0, i32 10), align 8
  %45 = load %struct.op*, %struct.op** %o, align 8
  ret %struct.op* %45
}

declare dso_local i8* @Perl_savesharedpv(i8*) #3

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_newGIVENOP(%struct.op* %cond, %struct.op* %block, i64 %defsv_off) #0 {
entry:
  %cond.addr = alloca %struct.op*, align 8
  %block.addr = alloca %struct.op*, align 8
  %defsv_off.addr = alloca i64, align 8
  store %struct.op* %cond, %struct.op** %cond.addr, align 8
  store %struct.op* %block, %struct.op** %block.addr, align 8
  store i64 %defsv_off, i64* %defsv_off.addr, align 8
  %0 = load %struct.op*, %struct.op** %cond.addr, align 8
  %call = call %struct.op* @S_ref_array_or_hash(%struct.op* %0)
  %1 = load %struct.op*, %struct.op** %block.addr, align 8
  %2 = load i64, i64* %defsv_off.addr, align 8
  %call1 = call %struct.op* @S_newGIVWHENOP(%struct.op* %call, %struct.op* %1, i32 214, i32 215, i64 %2)
  ret %struct.op* %call1
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.op* @S_newGIVWHENOP(%struct.op* %cond, %struct.op* %block, i32 %enter_opcode, i32 %leave_opcode, i64 %entertarg) #0 {
entry:
  %cond.addr = alloca %struct.op*, align 8
  %block.addr = alloca %struct.op*, align 8
  %enter_opcode.addr = alloca i32, align 4
  %leave_opcode.addr = alloca i32, align 4
  %entertarg.addr = alloca i64, align 8
  %enterop = alloca %struct.logop*, align 8
  %o = alloca %struct.op*, align 8
  store %struct.op* %cond, %struct.op** %cond.addr, align 8
  store %struct.op* %block, %struct.op** %block.addr, align 8
  store i32 %enter_opcode, i32* %enter_opcode.addr, align 4
  store i32 %leave_opcode, i32* %leave_opcode.addr, align 4
  store i64 %entertarg, i64* %entertarg.addr, align 8
  %0 = load i32, i32* %enter_opcode.addr, align 4
  %1 = load %struct.op*, %struct.op** %block.addr, align 8
  %call = call %struct.logop* @S_alloc_LOGOP(i32 %0, %struct.op* %1, %struct.op* null)
  store %struct.logop* %call, %struct.logop** %enterop, align 8
  %2 = load i64, i64* %entertarg.addr, align 8
  %cmp = icmp eq i64 %2, -1
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  br label %cond.end

cond.false:                                       ; preds = %entry
  %3 = load i64, i64* %entertarg.addr, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond1 = phi i64 [ 0, %cond.true ], [ %3, %cond.false ]
  %4 = load %struct.logop*, %struct.logop** %enterop, align 8
  %op_targ = getelementptr inbounds %struct.logop, %struct.logop* %4, i32 0, i32 3
  store i64 %cond1, i64* %op_targ, align 8
  %5 = load %struct.logop*, %struct.logop** %enterop, align 8
  %op_private = getelementptr inbounds %struct.logop, %struct.logop* %5, i32 0, i32 6
  store i8 0, i8* %op_private, align 1
  %6 = load i32, i32* %leave_opcode.addr, align 4
  %7 = load %struct.logop*, %struct.logop** %enterop, align 8
  %8 = bitcast %struct.logop* %7 to %struct.op*
  %call2 = call %struct.op* @Perl_newUNOP(i32 %6, i32 0, %struct.op* %8)
  store %struct.op* %call2, %struct.op** %o, align 8
  %9 = load %struct.op*, %struct.op** %cond.addr, align 8
  %tobool = icmp ne %struct.op* %9, null
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %cond.end
  %10 = load %struct.logop*, %struct.logop** %enterop, align 8
  %11 = bitcast %struct.logop* %10 to %struct.op*
  %12 = load %struct.op*, %struct.op** %cond.addr, align 8
  %call3 = call %struct.op* @Perl_scalar(%struct.op* %12)
  %call4 = call %struct.op* @Perl_op_sibling_splice(%struct.op* %11, %struct.op* null, i32 0, %struct.op* %call3)
  %13 = load %struct.op*, %struct.op** %cond.addr, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %13, i32 0, i32 0
  %14 = load %struct.op*, %struct.op** %op_next, align 8
  %tobool5 = icmp ne %struct.op* %14, null
  br i1 %tobool5, label %cond.true6, label %cond.false8

cond.true6:                                       ; preds = %if.then
  %15 = load %struct.op*, %struct.op** %cond.addr, align 8
  %op_next7 = getelementptr inbounds %struct.op, %struct.op* %15, i32 0, i32 0
  %16 = load %struct.op*, %struct.op** %op_next7, align 8
  br label %cond.end10

cond.false8:                                      ; preds = %if.then
  %17 = load %struct.op*, %struct.op** %cond.addr, align 8
  %call9 = call %struct.op* @Perl_op_linklist(%struct.op* %17)
  br label %cond.end10

cond.end10:                                       ; preds = %cond.false8, %cond.true6
  %cond11 = phi %struct.op* [ %16, %cond.true6 ], [ %call9, %cond.false8 ]
  %18 = load %struct.op*, %struct.op** %o, align 8
  %op_next12 = getelementptr inbounds %struct.op, %struct.op* %18, i32 0, i32 0
  store %struct.op* %cond11, %struct.op** %op_next12, align 8
  %19 = load %struct.logop*, %struct.logop** %enterop, align 8
  %20 = bitcast %struct.logop* %19 to %struct.op*
  %21 = load %struct.op*, %struct.op** %cond.addr, align 8
  %op_next13 = getelementptr inbounds %struct.op, %struct.op* %21, i32 0, i32 0
  store %struct.op* %20, %struct.op** %op_next13, align 8
  br label %if.end

if.else:                                          ; preds = %cond.end
  %22 = load %struct.logop*, %struct.logop** %enterop, align 8
  %op_flags = getelementptr inbounds %struct.logop, %struct.logop* %22, i32 0, i32 5
  %23 = load i8, i8* %op_flags, align 2
  %conv = zext i8 %23 to i32
  %or = or i32 %conv, 128
  %conv14 = trunc i32 %or to i8
  store i8 %conv14, i8* %op_flags, align 2
  %24 = load %struct.op*, %struct.op** %o, align 8
  %op_flags15 = getelementptr inbounds %struct.op, %struct.op* %24, i32 0, i32 5
  %25 = load i8, i8* %op_flags15, align 2
  %conv16 = zext i8 %25 to i32
  %or17 = or i32 %conv16, 128
  %conv18 = trunc i32 %or17 to i8
  store i8 %conv18, i8* %op_flags15, align 2
  %26 = load %struct.logop*, %struct.logop** %enterop, align 8
  %27 = bitcast %struct.logop* %26 to %struct.op*
  %28 = load %struct.op*, %struct.op** %o, align 8
  %op_next19 = getelementptr inbounds %struct.op, %struct.op* %28, i32 0, i32 0
  store %struct.op* %27, %struct.op** %op_next19, align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %cond.end10
  %29 = load i8*, i8** @PL_op_mask, align 8
  %tobool20 = icmp ne i8* %29, null
  br i1 %tobool20, label %land.lhs.true, label %cond.false26

land.lhs.true:                                    ; preds = %if.end
  %30 = load i8*, i8** @PL_op_mask, align 8
  %31 = load i32, i32* %enter_opcode.addr, align 4
  %idxprom = sext i32 %31 to i64
  %arrayidx = getelementptr inbounds i8, i8* %30, i64 %idxprom
  %32 = load i8, i8* %arrayidx, align 1
  %conv21 = sext i8 %32 to i32
  %tobool22 = icmp ne i32 %conv21, 0
  br i1 %tobool22, label %cond.true23, label %cond.false26

cond.true23:                                      ; preds = %land.lhs.true
  %33 = load %struct.logop*, %struct.logop** %enterop, align 8
  %34 = bitcast %struct.logop* %33 to %struct.op*
  call void @Perl_op_free(%struct.op* %34)
  %35 = load i32, i32* %enter_opcode.addr, align 4
  %idxprom24 = sext i32 %35 to i64
  %arrayidx25 = getelementptr inbounds [0 x i8*], [0 x i8*]* @PL_op_desc, i64 0, i64 %idxprom24
  %36 = load i8*, i8** %arrayidx25, align 8
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.49, i64 0, i64 0), i8* %36)
  br label %cond.end30

cond.false26:                                     ; preds = %land.lhs.true, %if.end
  %37 = load i32, i32* %enter_opcode.addr, align 4
  %idxprom27 = sext i32 %37 to i64
  %arrayidx28 = getelementptr inbounds [0 x %struct.op* (%struct.op*)*], [0 x %struct.op* (%struct.op*)*]* @PL_check, i64 0, i64 %idxprom27
  %38 = load %struct.op* (%struct.op*)*, %struct.op* (%struct.op*)** %arrayidx28, align 8
  %39 = load %struct.logop*, %struct.logop** %enterop, align 8
  %40 = bitcast %struct.logop* %39 to %struct.op*
  %call29 = call %struct.op* %38(%struct.op* %40)
  br label %cond.end30

cond.end30:                                       ; preds = %cond.false26, %cond.true23
  %cond31 = phi %struct.op* [ null, %cond.true23 ], [ %call29, %cond.false26 ]
  %41 = load %struct.op*, %struct.op** %block.addr, align 8
  %op_next32 = getelementptr inbounds %struct.op, %struct.op* %41, i32 0, i32 0
  %42 = load %struct.op*, %struct.op** %op_next32, align 8
  %tobool33 = icmp ne %struct.op* %42, null
  br i1 %tobool33, label %cond.true34, label %cond.false36

cond.true34:                                      ; preds = %cond.end30
  %43 = load %struct.op*, %struct.op** %block.addr, align 8
  %op_next35 = getelementptr inbounds %struct.op, %struct.op* %43, i32 0, i32 0
  %44 = load %struct.op*, %struct.op** %op_next35, align 8
  br label %cond.end38

cond.false36:                                     ; preds = %cond.end30
  %45 = load %struct.op*, %struct.op** %block.addr, align 8
  %call37 = call %struct.op* @Perl_op_linklist(%struct.op* %45)
  br label %cond.end38

cond.end38:                                       ; preds = %cond.false36, %cond.true34
  %cond39 = phi %struct.op* [ %44, %cond.true34 ], [ %call37, %cond.false36 ]
  %46 = load %struct.logop*, %struct.logop** %enterop, align 8
  %op_next40 = getelementptr inbounds %struct.logop, %struct.logop* %46, i32 0, i32 0
  store %struct.op* %cond39, %struct.op** %op_next40, align 8
  %47 = load %struct.op*, %struct.op** %o, align 8
  %48 = load %struct.logop*, %struct.logop** %enterop, align 8
  %op_other = getelementptr inbounds %struct.logop, %struct.logop* %48, i32 0, i32 8
  store %struct.op* %47, %struct.op** %op_other, align 8
  %49 = load %struct.op*, %struct.op** %block.addr, align 8
  %op_next41 = getelementptr inbounds %struct.op, %struct.op* %49, i32 0, i32 0
  store %struct.op* %47, %struct.op** %op_next41, align 8
  %50 = load %struct.op*, %struct.op** %o, align 8
  ret %struct.op* %50
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.op* @S_ref_array_or_hash(%struct.op* %cond) #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %cond.addr = alloca %struct.op*, align 8
  store %struct.op* %cond, %struct.op** %cond.addr, align 8
  %0 = load %struct.op*, %struct.op** %cond.addr, align 8
  %tobool = icmp ne %struct.op* %0, null
  br i1 %tobool, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %entry
  %1 = load %struct.op*, %struct.op** %cond.addr, align 8
  %op_type = getelementptr inbounds %struct.op, %struct.op* %1, i32 0, i32 4
  %bf.load = load i16, i16* %op_type, align 8
  %bf.clear = and i16 %bf.load, 511
  %bf.cast = zext i16 %bf.clear to i32
  %cmp = icmp eq i32 %bf.cast, 135
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true
  %2 = load %struct.op*, %struct.op** %cond.addr, align 8
  %op_type1 = getelementptr inbounds %struct.op, %struct.op* %2, i32 0, i32 4
  %bf.load2 = load i16, i16* %op_type1, align 8
  %bf.clear3 = and i16 %bf.load2, 511
  %bf.cast4 = zext i16 %bf.clear3 to i32
  %cmp5 = icmp eq i32 %bf.cast4, 10
  br i1 %cmp5, label %if.then, label %lor.lhs.false6

lor.lhs.false6:                                   ; preds = %lor.lhs.false
  %3 = load %struct.op*, %struct.op** %cond.addr, align 8
  %op_type7 = getelementptr inbounds %struct.op, %struct.op* %3, i32 0, i32 4
  %bf.load8 = load i16, i16* %op_type7, align 8
  %bf.clear9 = and i16 %bf.load8, 511
  %bf.cast10 = zext i16 %bf.clear9 to i32
  %cmp11 = icmp eq i32 %bf.cast10, 149
  br i1 %cmp11, label %if.then, label %lor.lhs.false12

lor.lhs.false12:                                  ; preds = %lor.lhs.false6
  %4 = load %struct.op*, %struct.op** %cond.addr, align 8
  %op_type13 = getelementptr inbounds %struct.op, %struct.op* %4, i32 0, i32 4
  %bf.load14 = load i16, i16* %op_type13, align 8
  %bf.clear15 = and i16 %bf.load14, 511
  %bf.cast16 = zext i16 %bf.clear15 to i32
  %cmp17 = icmp eq i32 %bf.cast16, 11
  br i1 %cmp17, label %if.then, label %if.else

if.then:                                          ; preds = %lor.lhs.false12, %lor.lhs.false6, %lor.lhs.false, %land.lhs.true
  %5 = load %struct.op*, %struct.op** %cond.addr, align 8
  %call = call %struct.op* @Perl_op_lvalue_flags(%struct.op* %5, i32 20, i32 0)
  %call18 = call %struct.op* @Perl_newUNOP(i32 20, i32 0, %struct.op* %call)
  store %struct.op* %call18, %struct.op** %retval, align 8
  br label %return

if.else:                                          ; preds = %lor.lhs.false12, %entry
  %6 = load %struct.op*, %struct.op** %cond.addr, align 8
  %tobool19 = icmp ne %struct.op* %6, null
  br i1 %tobool19, label %land.lhs.true20, label %if.else52

land.lhs.true20:                                  ; preds = %if.else
  %7 = load %struct.op*, %struct.op** %cond.addr, align 8
  %op_type21 = getelementptr inbounds %struct.op, %struct.op* %7, i32 0, i32 4
  %bf.load22 = load i16, i16* %op_type21, align 8
  %bf.clear23 = and i16 %bf.load22, 511
  %bf.cast24 = zext i16 %bf.clear23 to i32
  %cmp25 = icmp eq i32 %bf.cast24, 139
  br i1 %cmp25, label %if.then44, label %lor.lhs.false26

lor.lhs.false26:                                  ; preds = %land.lhs.true20
  %8 = load %struct.op*, %struct.op** %cond.addr, align 8
  %op_type27 = getelementptr inbounds %struct.op, %struct.op* %8, i32 0, i32 4
  %bf.load28 = load i16, i16* %op_type27, align 8
  %bf.clear29 = and i16 %bf.load28, 511
  %bf.cast30 = zext i16 %bf.clear29 to i32
  %cmp31 = icmp eq i32 %bf.cast30, 140
  br i1 %cmp31, label %if.then44, label %lor.lhs.false32

lor.lhs.false32:                                  ; preds = %lor.lhs.false26
  %9 = load %struct.op*, %struct.op** %cond.addr, align 8
  %op_type33 = getelementptr inbounds %struct.op, %struct.op* %9, i32 0, i32 4
  %bf.load34 = load i16, i16* %op_type33, align 8
  %bf.clear35 = and i16 %bf.load34, 511
  %bf.cast36 = zext i16 %bf.clear35 to i32
  %cmp37 = icmp eq i32 %bf.cast36, 151
  br i1 %cmp37, label %if.then44, label %lor.lhs.false38

lor.lhs.false38:                                  ; preds = %lor.lhs.false32
  %10 = load %struct.op*, %struct.op** %cond.addr, align 8
  %op_type39 = getelementptr inbounds %struct.op, %struct.op* %10, i32 0, i32 4
  %bf.load40 = load i16, i16* %op_type39, align 8
  %bf.clear41 = and i16 %bf.load40, 511
  %bf.cast42 = zext i16 %bf.clear41 to i32
  %cmp43 = icmp eq i32 %bf.cast42, 152
  br i1 %cmp43, label %if.then44, label %if.else52

if.then44:                                        ; preds = %lor.lhs.false38, %lor.lhs.false32, %lor.lhs.false26, %land.lhs.true20
  %11 = load %struct.op*, %struct.op** %cond.addr, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %11, i32 0, i32 5
  %12 = load i8, i8* %op_flags, align 2
  %conv = zext i8 %12 to i32
  %or = or i32 %conv, -19
  %conv45 = trunc i32 %or to i8
  store i8 %conv45, i8* %op_flags, align 2
  %13 = load %struct.op*, %struct.op** %cond.addr, align 8
  %op_flags46 = getelementptr inbounds %struct.op, %struct.op* %13, i32 0, i32 5
  %14 = load i8, i8* %op_flags46, align 2
  %conv47 = zext i8 %14 to i32
  %or48 = or i32 %conv47, 3
  %conv49 = trunc i32 %or48 to i8
  store i8 %conv49, i8* %op_flags46, align 2
  %15 = load %struct.op*, %struct.op** %cond.addr, align 8
  %call50 = call %struct.op* @Perl_op_lvalue_flags(%struct.op* %15, i32 160, i32 0)
  %call51 = call %struct.op* @Perl_newANONLIST(%struct.op* %call50)
  store %struct.op* %call51, %struct.op** %retval, align 8
  br label %return

if.else52:                                        ; preds = %lor.lhs.false38, %if.else
  %16 = load %struct.op*, %struct.op** %cond.addr, align 8
  store %struct.op* %16, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %if.else52, %if.then44, %if.then
  %17 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %17
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_newWHENOP(%struct.op* %cond, %struct.op* %block) #0 {
entry:
  %cond.addr = alloca %struct.op*, align 8
  %block.addr = alloca %struct.op*, align 8
  %cond_llb = alloca i8, align 1
  %cond_op = alloca %struct.op*, align 8
  store %struct.op* %cond, %struct.op** %cond.addr, align 8
  store %struct.op* %block, %struct.op** %block.addr, align 8
  %0 = load %struct.op*, %struct.op** %cond.addr, align 8
  %tobool = icmp ne %struct.op* %0, null
  br i1 %tobool, label %lor.rhs, label %lor.end

lor.rhs:                                          ; preds = %entry
  %1 = load %struct.op*, %struct.op** %cond.addr, align 8
  %call = call zeroext i1 @S_looks_like_bool(%struct.op* %1)
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %entry
  %2 = phi i1 [ true, %entry ], [ %call, %lor.rhs ]
  %frombool = zext i1 %2 to i8
  store i8 %frombool, i8* %cond_llb, align 1
  %3 = load i8, i8* %cond_llb, align 1
  %tobool1 = trunc i8 %3 to i1
  br i1 %tobool1, label %if.then, label %if.else

if.then:                                          ; preds = %lor.end
  %4 = load %struct.op*, %struct.op** %cond.addr, align 8
  store %struct.op* %4, %struct.op** %cond_op, align 8
  br label %if.end

if.else:                                          ; preds = %lor.end
  %call2 = call %struct.op* @Perl_newDEFSVOP()
  %5 = load %struct.op*, %struct.op** %cond.addr, align 8
  %call3 = call %struct.op* @S_ref_array_or_hash(%struct.op* %5)
  %call4 = call %struct.op* @Perl_scalar(%struct.op* %call3)
  %call5 = call %struct.op* @Perl_newBINOP(i32 107, i32 128, %struct.op* %call2, %struct.op* %call4)
  store %struct.op* %call5, %struct.op** %cond_op, align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %6 = load %struct.op*, %struct.op** %cond_op, align 8
  %7 = load %struct.op*, %struct.op** %block.addr, align 8
  %call6 = call %struct.op* @S_newGIVWHENOP(%struct.op* %6, %struct.op* %7, i32 216, i32 217, i64 0)
  ret %struct.op* %call6
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i1 @S_looks_like_bool(%struct.op* %o) #0 {
entry:
  %retval = alloca i1, align 1
  %o.addr = alloca %struct.op*, align 8
  %sibl = alloca %struct.op*, align 8
  store %struct.op* %o, %struct.op** %o.addr, align 8
  %0 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type = getelementptr inbounds %struct.op, %struct.op* %0, i32 0, i32 4
  %bf.load = load i16, i16* %op_type, align 8
  %bf.clear = and i16 %bf.load, 511
  %bf.cast = zext i16 %bf.clear to i32
  switch i32 %bf.cast, label %sw.default [
    i32 177, label %sw.bb
    i32 179, label %sw.bb
    i32 176, label %sw.bb1
    i32 0, label %sw.bb6
    i32 2, label %sw.bb6
    i32 185, label %sw.bb12
    i32 103, label %sw.bb12
    i32 178, label %sw.bb12
    i32 79, label %sw.bb12
    i32 81, label %sw.bb12
    i32 71, label %sw.bb12
    i32 73, label %sw.bb12
    i32 75, label %sw.bb12
    i32 77, label %sw.bb12
    i32 80, label %sw.bb12
    i32 82, label %sw.bb12
    i32 72, label %sw.bb12
    i32 74, label %sw.bb12
    i32 76, label %sw.bb12
    i32 78, label %sw.bb12
    i32 89, label %sw.bb12
    i32 90, label %sw.bb12
    i32 85, label %sw.bb12
    i32 86, label %sw.bb12
    i32 87, label %sw.bb12
    i32 88, label %sw.bb12
    i32 107, label %sw.bb12
    i32 266, label %sw.bb12
    i32 267, label %sw.bb12
    i32 268, label %sw.bb12
    i32 269, label %sw.bb12
    i32 270, label %sw.bb12
    i32 271, label %sw.bb12
    i32 272, label %sw.bb12
    i32 278, label %sw.bb12
    i32 277, label %sw.bb12
    i32 279, label %sw.bb12
    i32 280, label %sw.bb12
    i32 281, label %sw.bb12
    i32 282, label %sw.bb12
    i32 283, label %sw.bb12
    i32 284, label %sw.bb12
    i32 285, label %sw.bb12
    i32 289, label %sw.bb12
    i32 286, label %sw.bb12
    i32 287, label %sw.bb12
    i32 288, label %sw.bb12
    i32 290, label %sw.bb12
    i32 291, label %sw.bb12
    i32 292, label %sw.bb12
    i32 43, label %sw.bb12
    i32 148, label %sw.bb12
    i32 31, label %sw.bb12
    i32 244, label %sw.bb12
    i32 175, label %sw.bb12
    i32 5, label %sw.bb13
  ]

sw.bb:                                            ; preds = %entry, %entry
  %1 = load %struct.op*, %struct.op** %o.addr, align 8
  %2 = bitcast %struct.op* %1 to %struct.logop*
  %op_first = getelementptr inbounds %struct.logop, %struct.logop* %2, i32 0, i32 7
  %3 = load %struct.op*, %struct.op** %op_first, align 8
  %call = call zeroext i1 @S_looks_like_bool(%struct.op* %3)
  store i1 %call, i1* %retval, align 1
  br label %return

sw.bb1:                                           ; preds = %entry
  %4 = load %struct.op*, %struct.op** %o.addr, align 8
  %5 = bitcast %struct.op* %4 to %struct.logop*
  %op_first2 = getelementptr inbounds %struct.logop, %struct.logop* %5, i32 0, i32 7
  %6 = load %struct.op*, %struct.op** %op_first2, align 8
  %op_sibling = getelementptr inbounds %struct.op, %struct.op* %6, i32 0, i32 1
  %7 = load %struct.op*, %struct.op** %op_sibling, align 8
  %add.ptr = getelementptr inbounds %struct.op, %struct.op* %7, i64 0
  store %struct.op* %add.ptr, %struct.op** %sibl, align 8
  %8 = load %struct.op*, %struct.op** %o.addr, align 8
  %9 = bitcast %struct.op* %8 to %struct.logop*
  %op_first3 = getelementptr inbounds %struct.logop, %struct.logop* %9, i32 0, i32 7
  %10 = load %struct.op*, %struct.op** %op_first3, align 8
  %call4 = call zeroext i1 @S_looks_like_bool(%struct.op* %10)
  br i1 %call4, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %sw.bb1
  %11 = load %struct.op*, %struct.op** %sibl, align 8
  %call5 = call zeroext i1 @S_looks_like_bool(%struct.op* %11)
  br label %land.end

land.end:                                         ; preds = %land.rhs, %sw.bb1
  %12 = phi i1 [ false, %sw.bb1 ], [ %call5, %land.rhs ]
  store i1 %12, i1* %retval, align 1
  br label %return

sw.bb6:                                           ; preds = %entry, %entry
  %13 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %13, i32 0, i32 5
  %14 = load i8, i8* %op_flags, align 2
  %conv = zext i8 %14 to i32
  %and = and i32 %conv, 4
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %land.rhs7, label %land.end11

land.rhs7:                                        ; preds = %sw.bb6
  %15 = load %struct.op*, %struct.op** %o.addr, align 8
  %16 = bitcast %struct.op* %15 to %struct.unop*
  %op_first8 = getelementptr inbounds %struct.unop, %struct.unop* %16, i32 0, i32 7
  %17 = load %struct.op*, %struct.op** %op_first8, align 8
  %call9 = call zeroext i1 @S_looks_like_bool(%struct.op* %17)
  br label %land.end11

land.end11:                                       ; preds = %land.rhs7, %sw.bb6
  %18 = phi i1 [ false, %sw.bb6 ], [ %call9, %land.rhs7 ]
  store i1 %18, i1* %retval, align 1
  br label %return

sw.bb12:                                          ; preds = %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry
  store i1 true, i1* %retval, align 1
  br label %return

sw.bb13:                                          ; preds = %entry
  %19 = load %struct.op*, %struct.op** %o.addr, align 8
  %20 = bitcast %struct.op* %19 to %struct.svop*
  %op_sv = getelementptr inbounds %struct.svop, %struct.svop* %20, i32 0, i32 7
  %21 = load %struct.sv*, %struct.sv** %op_sv, align 8
  %cmp = icmp eq %struct.sv* %21, @PL_sv_yes
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %sw.bb13
  %22 = load %struct.op*, %struct.op** %o.addr, align 8
  %23 = bitcast %struct.op* %22 to %struct.svop*
  %op_sv15 = getelementptr inbounds %struct.svop, %struct.svop* %23, i32 0, i32 7
  %24 = load %struct.sv*, %struct.sv** %op_sv15, align 8
  %cmp16 = icmp eq %struct.sv* %24, @PL_sv_no
  br i1 %cmp16, label %if.then, label %if.else

if.then:                                          ; preds = %lor.lhs.false, %sw.bb13
  store i1 true, i1* %retval, align 1
  br label %return

if.else:                                          ; preds = %lor.lhs.false
  store i1 false, i1* %retval, align 1
  br label %return

sw.default:                                       ; preds = %entry
  store i1 false, i1* %retval, align 1
  br label %return

return:                                           ; preds = %sw.default, %if.else, %if.then, %sw.bb12, %land.end11, %land.end, %sw.bb
  %25 = load i1, i1* %retval, align 1
  ret i1 %25
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @Perl_cv_ckproto_len_flags(%struct.cv* %cv, %struct.gv* %gv, i8* %p, i64 %len, i32 %flags) #0 {
entry:
  %cv.addr = alloca %struct.cv*, align 8
  %gv.addr = alloca %struct.gv*, align 8
  %p.addr = alloca i8*, align 8
  %len.addr = alloca i64, align 8
  %flags.addr = alloca i32, align 4
  %name = alloca %struct.sv*, align 8
  %msg = alloca %struct.sv*, align 8
  %cvp = alloca i8*, align 8
  %clen = alloca i64, align 8
  %plen = alloca i64, align 8
  %bmxk = alloca %struct.hek*, align 8
  store %struct.cv* %cv, %struct.cv** %cv.addr, align 8
  store %struct.gv* %gv, %struct.gv** %gv.addr, align 8
  store i8* %p, i8** %p.addr, align 8
  store i64 %len, i64* %len.addr, align 8
  store i32 %flags, i32* %flags.addr, align 4
  store %struct.sv* null, %struct.sv** %name, align 8
  %0 = load %struct.cv*, %struct.cv** %cv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.cv, %struct.cv* %0, i32 0, i32 2
  %1 = load i32, i32* %sv_flags, align 4
  %and = and i32 %1, 2048
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %cond.true, label %cond.false30

cond.true:                                        ; preds = %entry
  %2 = load %struct.cv*, %struct.cv** %cv.addr, align 8
  %sv_u = getelementptr inbounds %struct.cv, %struct.cv* %2, i32 0, i32 3
  %svu_rv = bitcast %union.anon.10* %sv_u to %struct.sv**
  %3 = load %struct.sv*, %struct.sv** %svu_rv, align 8
  %add.ptr = getelementptr inbounds %struct.sv, %struct.sv* %3, i64 0
  %sv_flags1 = getelementptr inbounds %struct.sv, %struct.sv* %add.ptr, i32 0, i32 2
  %4 = load i32, i32* %sv_flags1, align 4
  %and2 = and i32 %4, 255
  %cmp = icmp eq i32 %and2, 13
  br i1 %cmp, label %cond.true3, label %cond.false27

cond.true3:                                       ; preds = %cond.true
  %5 = load %struct.cv*, %struct.cv** %cv.addr, align 8
  %sv_u4 = getelementptr inbounds %struct.cv, %struct.cv* %5, i32 0, i32 3
  %svu_rv5 = bitcast %union.anon.10* %sv_u4 to %struct.sv**
  %6 = load %struct.sv*, %struct.sv** %svu_rv5, align 8
  %add.ptr6 = getelementptr inbounds %struct.sv, %struct.sv* %6, i64 0
  %7 = bitcast %struct.sv* %add.ptr6 to %struct.cv*
  store %struct.cv* %7, %struct.cv** %cv.addr, align 8
  %8 = load %struct.cv*, %struct.cv** %cv.addr, align 8
  %sv_flags7 = getelementptr inbounds %struct.cv, %struct.cv* %8, i32 0, i32 2
  %9 = load i32, i32* %sv_flags7, align 4
  %and8 = and i32 %9, 1024
  %tobool9 = icmp ne i32 %and8, 0
  br i1 %tobool9, label %cond.true10, label %cond.false24

cond.true10:                                      ; preds = %cond.true3
  %10 = load %struct.cv*, %struct.cv** %cv.addr, align 8
  %sv_flags11 = getelementptr inbounds %struct.cv, %struct.cv* %10, i32 0, i32 2
  %11 = load i32, i32* %sv_flags11, align 4
  %and12 = and i32 %11, 255
  %cmp13 = icmp eq i32 %and12, 13
  br i1 %cmp13, label %land.lhs.true, label %cond.false

land.lhs.true:                                    ; preds = %cond.true10
  %12 = load %struct.cv*, %struct.cv** %cv.addr, align 8
  %sv_any = getelementptr inbounds %struct.cv, %struct.cv* %12, i32 0, i32 0
  %13 = load %struct.xpvcv*, %struct.xpvcv** %sv_any, align 8
  %14 = bitcast %struct.xpvcv* %13 to i8*
  %15 = bitcast i8* %14 to %struct.xpvcv*
  %xcv_flags = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %15, i32 0, i32 12
  %16 = load i32, i32* %xcv_flags, align 4
  %and14 = and i32 %16, 8192
  %tobool15 = icmp ne i32 %and14, 0
  br i1 %tobool15, label %cond.true16, label %cond.false

cond.true16:                                      ; preds = %land.lhs.true
  %17 = load %struct.cv*, %struct.cv** %cv.addr, align 8
  %sv_u17 = getelementptr inbounds %struct.cv, %struct.cv* %17, i32 0, i32 3
  %svu_pv = bitcast %union.anon.10* %sv_u17 to i8**
  %18 = load i8*, i8** %svu_pv, align 8
  %19 = load %struct.cv*, %struct.cv** %cv.addr, align 8
  %sv_any18 = getelementptr inbounds %struct.cv, %struct.cv* %19, i32 0, i32 0
  %20 = load %struct.xpvcv*, %struct.xpvcv** %sv_any18, align 8
  %21 = bitcast %struct.xpvcv* %20 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %21, i32 0, i32 2
  %22 = load i64, i64* %xpv_cur, align 8
  %add.ptr19 = getelementptr inbounds i8, i8* %18, i64 %22
  %add.ptr20 = getelementptr inbounds i8, i8* %add.ptr19, i64 1
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true, %cond.true10
  %23 = load %struct.cv*, %struct.cv** %cv.addr, align 8
  %sv_u21 = getelementptr inbounds %struct.cv, %struct.cv* %23, i32 0, i32 3
  %svu_pv22 = bitcast %union.anon.10* %sv_u21 to i8**
  %24 = load i8*, i8** %svu_pv22, align 8
  %add.ptr23 = getelementptr inbounds i8, i8* %24, i64 0
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true16
  %cond = phi i8* [ %add.ptr20, %cond.true16 ], [ %add.ptr23, %cond.false ]
  br label %cond.end25

cond.false24:                                     ; preds = %cond.true3
  br label %cond.end25

cond.end25:                                       ; preds = %cond.false24, %cond.end
  %cond26 = phi i8* [ %cond, %cond.end ], [ null, %cond.false24 ]
  br label %cond.end28

cond.false27:                                     ; preds = %cond.true
  br label %cond.end28

cond.end28:                                       ; preds = %cond.false27, %cond.end25
  %cond29 = phi i8* [ %cond26, %cond.end25 ], [ getelementptr inbounds ([1 x i8], [1 x i8]* @.str.17, i64 0, i64 0), %cond.false27 ]
  br label %cond.end59

cond.false30:                                     ; preds = %entry
  %25 = load %struct.cv*, %struct.cv** %cv.addr, align 8
  %sv_flags31 = getelementptr inbounds %struct.cv, %struct.cv* %25, i32 0, i32 2
  %26 = load i32, i32* %sv_flags31, align 4
  %and32 = and i32 %26, 1024
  %tobool33 = icmp ne i32 %and32, 0
  br i1 %tobool33, label %cond.true34, label %cond.false56

cond.true34:                                      ; preds = %cond.false30
  %27 = load %struct.cv*, %struct.cv** %cv.addr, align 8
  %sv_flags35 = getelementptr inbounds %struct.cv, %struct.cv* %27, i32 0, i32 2
  %28 = load i32, i32* %sv_flags35, align 4
  %and36 = and i32 %28, 255
  %cmp37 = icmp eq i32 %and36, 13
  br i1 %cmp37, label %land.lhs.true38, label %cond.false50

land.lhs.true38:                                  ; preds = %cond.true34
  %29 = load %struct.cv*, %struct.cv** %cv.addr, align 8
  %sv_any39 = getelementptr inbounds %struct.cv, %struct.cv* %29, i32 0, i32 0
  %30 = load %struct.xpvcv*, %struct.xpvcv** %sv_any39, align 8
  %31 = bitcast %struct.xpvcv* %30 to i8*
  %32 = bitcast i8* %31 to %struct.xpvcv*
  %xcv_flags40 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %32, i32 0, i32 12
  %33 = load i32, i32* %xcv_flags40, align 4
  %and41 = and i32 %33, 8192
  %tobool42 = icmp ne i32 %and41, 0
  br i1 %tobool42, label %cond.true43, label %cond.false50

cond.true43:                                      ; preds = %land.lhs.true38
  %34 = load %struct.cv*, %struct.cv** %cv.addr, align 8
  %sv_u44 = getelementptr inbounds %struct.cv, %struct.cv* %34, i32 0, i32 3
  %svu_pv45 = bitcast %union.anon.10* %sv_u44 to i8**
  %35 = load i8*, i8** %svu_pv45, align 8
  %36 = load %struct.cv*, %struct.cv** %cv.addr, align 8
  %sv_any46 = getelementptr inbounds %struct.cv, %struct.cv* %36, i32 0, i32 0
  %37 = load %struct.xpvcv*, %struct.xpvcv** %sv_any46, align 8
  %38 = bitcast %struct.xpvcv* %37 to %struct.xpv*
  %xpv_cur47 = getelementptr inbounds %struct.xpv, %struct.xpv* %38, i32 0, i32 2
  %39 = load i64, i64* %xpv_cur47, align 8
  %add.ptr48 = getelementptr inbounds i8, i8* %35, i64 %39
  %add.ptr49 = getelementptr inbounds i8, i8* %add.ptr48, i64 1
  br label %cond.end54

cond.false50:                                     ; preds = %land.lhs.true38, %cond.true34
  %40 = load %struct.cv*, %struct.cv** %cv.addr, align 8
  %sv_u51 = getelementptr inbounds %struct.cv, %struct.cv* %40, i32 0, i32 3
  %svu_pv52 = bitcast %union.anon.10* %sv_u51 to i8**
  %41 = load i8*, i8** %svu_pv52, align 8
  %add.ptr53 = getelementptr inbounds i8, i8* %41, i64 0
  br label %cond.end54

cond.end54:                                       ; preds = %cond.false50, %cond.true43
  %cond55 = phi i8* [ %add.ptr49, %cond.true43 ], [ %add.ptr53, %cond.false50 ]
  br label %cond.end57

cond.false56:                                     ; preds = %cond.false30
  br label %cond.end57

cond.end57:                                       ; preds = %cond.false56, %cond.end54
  %cond58 = phi i8* [ %cond55, %cond.end54 ], [ null, %cond.false56 ]
  br label %cond.end59

cond.end59:                                       ; preds = %cond.end57, %cond.end28
  %cond60 = phi i8* [ %cond29, %cond.end28 ], [ %cond58, %cond.end57 ]
  store i8* %cond60, i8** %cvp, align 8
  %42 = load %struct.cv*, %struct.cv** %cv.addr, align 8
  %sv_flags61 = getelementptr inbounds %struct.cv, %struct.cv* %42, i32 0, i32 2
  %43 = load i32, i32* %sv_flags61, align 4
  %and62 = and i32 %43, 1024
  %tobool63 = icmp ne i32 %and62, 0
  br i1 %tobool63, label %cond.true64, label %cond.false83

cond.true64:                                      ; preds = %cond.end59
  %44 = load %struct.cv*, %struct.cv** %cv.addr, align 8
  %sv_flags65 = getelementptr inbounds %struct.cv, %struct.cv* %44, i32 0, i32 2
  %45 = load i32, i32* %sv_flags65, align 4
  %and66 = and i32 %45, 255
  %cmp67 = icmp eq i32 %and66, 13
  br i1 %cmp67, label %land.lhs.true68, label %cond.false78

land.lhs.true68:                                  ; preds = %cond.true64
  %46 = load %struct.cv*, %struct.cv** %cv.addr, align 8
  %sv_any69 = getelementptr inbounds %struct.cv, %struct.cv* %46, i32 0, i32 0
  %47 = load %struct.xpvcv*, %struct.xpvcv** %sv_any69, align 8
  %48 = bitcast %struct.xpvcv* %47 to i8*
  %49 = bitcast i8* %48 to %struct.xpvcv*
  %xcv_flags70 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %49, i32 0, i32 12
  %50 = load i32, i32* %xcv_flags70, align 4
  %and71 = and i32 %50, 8192
  %tobool72 = icmp ne i32 %and71, 0
  br i1 %tobool72, label %cond.true73, label %cond.false78

cond.true73:                                      ; preds = %land.lhs.true68
  %51 = load %struct.cv*, %struct.cv** %cv.addr, align 8
  %sv_any74 = getelementptr inbounds %struct.cv, %struct.cv* %51, i32 0, i32 0
  %52 = load %struct.xpvcv*, %struct.xpvcv** %sv_any74, align 8
  %53 = bitcast %struct.xpvcv* %52 to %struct.xpv*
  %xpv_len_u = getelementptr inbounds %struct.xpv, %struct.xpv* %53, i32 0, i32 3
  %xpvlenu_len = bitcast %union.anon.21* %xpv_len_u to i64*
  %54 = load i64, i64* %xpvlenu_len, align 8
  %55 = load %struct.cv*, %struct.cv** %cv.addr, align 8
  %sv_any75 = getelementptr inbounds %struct.cv, %struct.cv* %55, i32 0, i32 0
  %56 = load %struct.xpvcv*, %struct.xpvcv** %sv_any75, align 8
  %57 = bitcast %struct.xpvcv* %56 to %struct.xpv*
  %xpv_cur76 = getelementptr inbounds %struct.xpv, %struct.xpv* %57, i32 0, i32 2
  %58 = load i64, i64* %xpv_cur76, align 8
  %sub = sub i64 %54, %58
  %sub77 = sub i64 %sub, 2
  br label %cond.end81

cond.false78:                                     ; preds = %land.lhs.true68, %cond.true64
  %59 = load %struct.cv*, %struct.cv** %cv.addr, align 8
  %sv_any79 = getelementptr inbounds %struct.cv, %struct.cv* %59, i32 0, i32 0
  %60 = load %struct.xpvcv*, %struct.xpvcv** %sv_any79, align 8
  %61 = bitcast %struct.xpvcv* %60 to %struct.xpv*
  %xpv_cur80 = getelementptr inbounds %struct.xpv, %struct.xpv* %61, i32 0, i32 2
  %62 = load i64, i64* %xpv_cur80, align 8
  br label %cond.end81

cond.end81:                                       ; preds = %cond.false78, %cond.true73
  %cond82 = phi i64 [ %sub77, %cond.true73 ], [ %62, %cond.false78 ]
  br label %cond.end84

cond.false83:                                     ; preds = %cond.end59
  br label %cond.end84

cond.end84:                                       ; preds = %cond.false83, %cond.end81
  %cond85 = phi i64 [ %cond82, %cond.end81 ], [ 0, %cond.false83 ]
  store i64 %cond85, i64* %clen, align 8
  %63 = load i64, i64* %len.addr, align 8
  store i64 %63, i64* %plen, align 8
  %64 = load i8*, i8** %p.addr, align 8
  %cmp86 = icmp eq i8* %64, null
  br i1 %cmp86, label %land.lhs.true87, label %if.end

land.lhs.true87:                                  ; preds = %cond.end84
  %65 = load i8*, i8** %cvp, align 8
  %cmp88 = icmp eq i8* %65, null
  br i1 %cmp88, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true87
  br label %return

if.end:                                           ; preds = %land.lhs.true87, %cond.end84
  %call = call zeroext i1 @Perl_ckwarn_d(i32 35)
  br i1 %call, label %if.end90, label %if.then89

if.then89:                                        ; preds = %if.end
  br label %return

if.end90:                                         ; preds = %if.end
  %66 = load i8*, i8** %p.addr, align 8
  %tobool91 = icmp ne i8* %66, null
  br i1 %tobool91, label %land.lhs.true92, label %if.end122

land.lhs.true92:                                  ; preds = %if.end90
  %67 = load i8*, i8** %cvp, align 8
  %tobool93 = icmp ne i8* %67, null
  br i1 %tobool93, label %if.then94, label %if.end122

if.then94:                                        ; preds = %land.lhs.true92
  %68 = load i8*, i8** %p.addr, align 8
  %call95 = call i8* @S_strip_spaces(i8* %68, i64* %plen)
  store i8* %call95, i8** %p.addr, align 8
  %69 = load i8*, i8** %cvp, align 8
  %call96 = call i8* @S_strip_spaces(i8* %69, i64* %clen)
  store i8* %call96, i8** %cvp, align 8
  %70 = load i32, i32* %flags.addr, align 4
  %and97 = and i32 %70, 536870912
  %71 = load %struct.cv*, %struct.cv** %cv.addr, align 8
  %sv_flags98 = getelementptr inbounds %struct.cv, %struct.cv* %71, i32 0, i32 2
  %72 = load i32, i32* %sv_flags98, align 4
  %and99 = and i32 %72, 536870912
  %cmp100 = icmp eq i32 %and97, %and99
  br i1 %cmp100, label %if.then101, label %if.else

if.then101:                                       ; preds = %if.then94
  %73 = load i64, i64* %plen, align 8
  %74 = load i64, i64* %clen, align 8
  %cmp102 = icmp eq i64 %73, %74
  br i1 %cmp102, label %land.lhs.true103, label %if.end107

land.lhs.true103:                                 ; preds = %if.then101
  %75 = load i8*, i8** %cvp, align 8
  %76 = load i8*, i8** %p.addr, align 8
  %77 = load i64, i64* %plen, align 8
  %call104 = call i32 @memcmp(i8* %75, i8* %76, i64 %77) #7
  %tobool105 = icmp ne i32 %call104, 0
  br i1 %tobool105, label %if.end107, label %if.then106

if.then106:                                       ; preds = %land.lhs.true103
  br label %return

if.end107:                                        ; preds = %land.lhs.true103, %if.then101
  br label %if.end121

if.else:                                          ; preds = %if.then94
  %78 = load i32, i32* %flags.addr, align 4
  %and108 = and i32 %78, 536870912
  %tobool109 = icmp ne i32 %and108, 0
  br i1 %tobool109, label %if.then110, label %if.else115

if.then110:                                       ; preds = %if.else
  %79 = load i8*, i8** %cvp, align 8
  %80 = load i64, i64* %clen, align 8
  %81 = load i8*, i8** %p.addr, align 8
  %82 = load i64, i64* %plen, align 8
  %call111 = call i32 @Perl_bytes_cmp_utf8(i8* %79, i64 %80, i8* %81, i64 %82)
  %cmp112 = icmp eq i32 %call111, 0
  br i1 %cmp112, label %if.then113, label %if.end114

if.then113:                                       ; preds = %if.then110
  br label %return

if.end114:                                        ; preds = %if.then110
  br label %if.end120

if.else115:                                       ; preds = %if.else
  %83 = load i8*, i8** %p.addr, align 8
  %84 = load i64, i64* %plen, align 8
  %85 = load i8*, i8** %cvp, align 8
  %86 = load i64, i64* %clen, align 8
  %call116 = call i32 @Perl_bytes_cmp_utf8(i8* %83, i64 %84, i8* %85, i64 %86)
  %cmp117 = icmp eq i32 %call116, 0
  br i1 %cmp117, label %if.then118, label %if.end119

if.then118:                                       ; preds = %if.else115
  br label %return

if.end119:                                        ; preds = %if.else115
  br label %if.end120

if.end120:                                        ; preds = %if.end119, %if.end114
  br label %if.end121

if.end121:                                        ; preds = %if.end120, %if.end107
  br label %if.end122

if.end122:                                        ; preds = %if.end121, %land.lhs.true92, %if.end90
  %call123 = call %struct.sv* @Perl_sv_newmortal()
  store %struct.sv* %call123, %struct.sv** %msg, align 8
  %87 = load %struct.gv*, %struct.gv** %gv.addr, align 8
  %tobool124 = icmp ne %struct.gv* %87, null
  br i1 %tobool124, label %if.then125, label %if.end220

if.then125:                                       ; preds = %if.end122
  %88 = load %struct.gv*, %struct.gv** %gv.addr, align 8
  %sv_flags126 = getelementptr inbounds %struct.gv, %struct.gv* %88, i32 0, i32 2
  %89 = load i32, i32* %sv_flags126, align 4
  %and127 = and i32 %89, 255
  %cmp128 = icmp eq i32 %and127, 9
  br i1 %cmp128, label %if.then129, label %if.else131

if.then129:                                       ; preds = %if.then125
  %call130 = call %struct.sv* @Perl_sv_newmortal()
  store %struct.sv* %call130, %struct.sv** %name, align 8
  %90 = load %struct.gv*, %struct.gv** %gv.addr, align 8
  call void @Perl_gv_efullname4(%struct.sv* %call130, %struct.gv* %90, i8* null, i1 zeroext true)
  br label %if.end219

if.else131:                                       ; preds = %if.then125
  %91 = load %struct.gv*, %struct.gv** %gv.addr, align 8
  %sv_flags132 = getelementptr inbounds %struct.gv, %struct.gv* %91, i32 0, i32 2
  %92 = load i32, i32* %sv_flags132, align 4
  %and133 = and i32 %92, 1024
  %tobool134 = icmp ne i32 %and133, 0
  br i1 %tobool134, label %land.lhs.true135, label %if.else150

land.lhs.true135:                                 ; preds = %if.else131
  %93 = load %struct.gv*, %struct.gv** %gv.addr, align 8
  %94 = bitcast %struct.gv* %93 to %struct.sv*
  %sv_u136 = getelementptr inbounds %struct.sv, %struct.sv* %94, i32 0, i32 3
  %svu_pv137 = bitcast %union.anon* %sv_u136 to i8**
  %95 = load i8*, i8** %svu_pv137, align 8
  %96 = load i8, i8* %95, align 1
  %conv = sext i8 %96 to i32
  %cmp138 = icmp eq i32 %conv, 38
  br i1 %cmp138, label %if.then140, label %if.else150

if.then140:                                       ; preds = %land.lhs.true135
  %97 = load %struct.gv*, %struct.gv** %gv.addr, align 8
  %98 = bitcast %struct.gv* %97 to %struct.sv*
  %sv_u141 = getelementptr inbounds %struct.sv, %struct.sv* %98, i32 0, i32 3
  %svu_pv142 = bitcast %union.anon* %sv_u141 to i8**
  %99 = load i8*, i8** %svu_pv142, align 8
  %add.ptr143 = getelementptr inbounds i8, i8* %99, i64 1
  %100 = load %struct.gv*, %struct.gv** %gv.addr, align 8
  %sv_any144 = getelementptr inbounds %struct.gv, %struct.gv* %100, i32 0, i32 0
  %101 = load %struct.xpvgv*, %struct.xpvgv** %sv_any144, align 8
  %102 = bitcast %struct.xpvgv* %101 to %struct.xpv*
  %xpv_cur145 = getelementptr inbounds %struct.xpv, %struct.xpv* %102, i32 0, i32 2
  %103 = load i64, i64* %xpv_cur145, align 8
  %sub146 = sub i64 %103, 1
  %104 = load %struct.gv*, %struct.gv** %gv.addr, align 8
  %sv_flags147 = getelementptr inbounds %struct.gv, %struct.gv* %104, i32 0, i32 2
  %105 = load i32, i32* %sv_flags147, align 4
  %and148 = and i32 %105, 536870912
  %or = or i32 %and148, 524288
  %call149 = call %struct.sv* @Perl_newSVpvn_flags(i8* %add.ptr143, i64 %sub146, i32 %or)
  store %struct.sv* %call149, %struct.sv** %name, align 8
  br label %if.end218

if.else150:                                       ; preds = %land.lhs.true135, %if.else131
  %106 = load i32, i32* %flags.addr, align 4
  %and151 = and i32 %106, 1
  %tobool152 = icmp ne i32 %and151, 0
  br i1 %tobool152, label %if.then156, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.else150
  %107 = load %struct.gv*, %struct.gv** %gv.addr, align 8
  %sv_flags153 = getelementptr inbounds %struct.gv, %struct.gv* %107, i32 0, i32 2
  %108 = load i32, i32* %sv_flags153, align 4
  %and154 = and i32 %108, 2048
  %tobool155 = icmp ne i32 %and154, 0
  br i1 %tobool155, label %if.then156, label %if.else216

if.then156:                                       ; preds = %lor.lhs.false, %if.else150
  %109 = load %struct.hv*, %struct.hv** @PL_curstash, align 8
  %sv_flags157 = getelementptr inbounds %struct.hv, %struct.hv* %109, i32 0, i32 2
  %110 = load i32, i32* %sv_flags157, align 4
  %and158 = and i32 %110, 33554432
  %tobool159 = icmp ne i32 %and158, 0
  br i1 %tobool159, label %land.lhs.true160, label %cond.false191

land.lhs.true160:                                 ; preds = %if.then156
  %111 = load %struct.hv*, %struct.hv** @PL_curstash, align 8
  %sv_u161 = getelementptr inbounds %struct.hv, %struct.hv* %111, i32 0, i32 3
  %svu_hash = bitcast %union.anon.4* %sv_u161 to %struct.he***
  %112 = load %struct.he**, %struct.he*** %svu_hash, align 8
  %113 = load %struct.hv*, %struct.hv** @PL_curstash, align 8
  %sv_any162 = getelementptr inbounds %struct.hv, %struct.hv* %113, i32 0, i32 0
  %114 = load %struct.xpvhv*, %struct.xpvhv** %sv_any162, align 8
  %xhv_max = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %114, i32 0, i32 3
  %115 = load i64, i64* %xhv_max, align 8
  %add = add i64 %115, 1
  %arrayidx = getelementptr inbounds %struct.he*, %struct.he** %112, i64 %add
  %116 = bitcast %struct.he** %arrayidx to %struct.xpvhv_aux*
  %xhv_name_u = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %116, i32 0, i32 0
  %xhvnameu_name = bitcast %union._xhvnameu* %xhv_name_u to %struct.hek**
  %117 = load %struct.hek*, %struct.hek** %xhvnameu_name, align 8
  %tobool163 = icmp ne %struct.hek* %117, null
  br i1 %tobool163, label %cond.true164, label %cond.false191

cond.true164:                                     ; preds = %land.lhs.true160
  %118 = load %struct.hv*, %struct.hv** @PL_curstash, align 8
  %sv_u165 = getelementptr inbounds %struct.hv, %struct.hv* %118, i32 0, i32 3
  %svu_hash166 = bitcast %union.anon.4* %sv_u165 to %struct.he***
  %119 = load %struct.he**, %struct.he*** %svu_hash166, align 8
  %120 = load %struct.hv*, %struct.hv** @PL_curstash, align 8
  %sv_any167 = getelementptr inbounds %struct.hv, %struct.hv* %120, i32 0, i32 0
  %121 = load %struct.xpvhv*, %struct.xpvhv** %sv_any167, align 8
  %xhv_max168 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %121, i32 0, i32 3
  %122 = load i64, i64* %xhv_max168, align 8
  %add169 = add i64 %122, 1
  %arrayidx170 = getelementptr inbounds %struct.he*, %struct.he** %119, i64 %add169
  %123 = bitcast %struct.he** %arrayidx170 to %struct.xpvhv_aux*
  %xhv_name_count = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %123, i32 0, i32 4
  %124 = load i32, i32* %xhv_name_count, align 4
  %tobool171 = icmp ne i32 %124, 0
  br i1 %tobool171, label %cond.true172, label %cond.false180

cond.true172:                                     ; preds = %cond.true164
  %125 = load %struct.hv*, %struct.hv** @PL_curstash, align 8
  %sv_u173 = getelementptr inbounds %struct.hv, %struct.hv* %125, i32 0, i32 3
  %svu_hash174 = bitcast %union.anon.4* %sv_u173 to %struct.he***
  %126 = load %struct.he**, %struct.he*** %svu_hash174, align 8
  %127 = load %struct.hv*, %struct.hv** @PL_curstash, align 8
  %sv_any175 = getelementptr inbounds %struct.hv, %struct.hv* %127, i32 0, i32 0
  %128 = load %struct.xpvhv*, %struct.xpvhv** %sv_any175, align 8
  %xhv_max176 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %128, i32 0, i32 3
  %129 = load i64, i64* %xhv_max176, align 8
  %add177 = add i64 %129, 1
  %arrayidx178 = getelementptr inbounds %struct.he*, %struct.he** %126, i64 %add177
  %130 = bitcast %struct.he** %arrayidx178 to %struct.xpvhv_aux*
  %xhv_name_u179 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %130, i32 0, i32 0
  %xhvnameu_names = bitcast %union._xhvnameu* %xhv_name_u179 to %struct.hek***
  %131 = load %struct.hek**, %struct.hek*** %xhvnameu_names, align 8
  %132 = load %struct.hek*, %struct.hek** %131, align 8
  br label %cond.end189

cond.false180:                                    ; preds = %cond.true164
  %133 = load %struct.hv*, %struct.hv** @PL_curstash, align 8
  %sv_u181 = getelementptr inbounds %struct.hv, %struct.hv* %133, i32 0, i32 3
  %svu_hash182 = bitcast %union.anon.4* %sv_u181 to %struct.he***
  %134 = load %struct.he**, %struct.he*** %svu_hash182, align 8
  %135 = load %struct.hv*, %struct.hv** @PL_curstash, align 8
  %sv_any183 = getelementptr inbounds %struct.hv, %struct.hv* %135, i32 0, i32 0
  %136 = load %struct.xpvhv*, %struct.xpvhv** %sv_any183, align 8
  %xhv_max184 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %136, i32 0, i32 3
  %137 = load i64, i64* %xhv_max184, align 8
  %add185 = add i64 %137, 1
  %arrayidx186 = getelementptr inbounds %struct.he*, %struct.he** %134, i64 %add185
  %138 = bitcast %struct.he** %arrayidx186 to %struct.xpvhv_aux*
  %xhv_name_u187 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %138, i32 0, i32 0
  %xhvnameu_name188 = bitcast %union._xhvnameu* %xhv_name_u187 to %struct.hek**
  %139 = load %struct.hek*, %struct.hek** %xhvnameu_name188, align 8
  br label %cond.end189

cond.end189:                                      ; preds = %cond.false180, %cond.true172
  %cond190 = phi %struct.hek* [ %132, %cond.true172 ], [ %139, %cond.false180 ]
  br label %cond.end192

cond.false191:                                    ; preds = %land.lhs.true160, %if.then156
  br label %cond.end192

cond.end192:                                      ; preds = %cond.false191, %cond.end189
  %cond193 = phi %struct.hek* [ %cond190, %cond.end189 ], [ null, %cond.false191 ]
  %call194 = call %struct.sv* @Perl_newSVhek(%struct.hek* %cond193)
  %call195 = call %struct.sv* @Perl_sv_2mortal(%struct.sv* %call194)
  store %struct.sv* %call195, %struct.sv** %name, align 8
  %140 = load %struct.sv*, %struct.sv** %name, align 8
  call void @Perl_sv_catpvn_flags(%struct.sv* %140, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.61, i64 0, i64 0), i64 2, i32 2)
  %141 = load %struct.gv*, %struct.gv** %gv.addr, align 8
  %sv_flags196 = getelementptr inbounds %struct.gv, %struct.gv* %141, i32 0, i32 2
  %142 = load i32, i32* %sv_flags196, align 4
  %and197 = and i32 %142, 2048
  %tobool198 = icmp ne i32 %and197, 0
  br i1 %tobool198, label %if.then199, label %if.else214

if.then199:                                       ; preds = %cond.end192
  br label %do.body

do.body:                                          ; preds = %if.then199
  %143 = load %struct.gv*, %struct.gv** %gv.addr, align 8
  %sv_u200 = getelementptr inbounds %struct.gv, %struct.gv* %143, i32 0, i32 3
  %svu_rv201 = bitcast %union.anon.3* %sv_u200 to %struct.sv**
  %144 = load %struct.sv*, %struct.sv** %svu_rv201, align 8
  %add.ptr202 = getelementptr inbounds %struct.sv, %struct.sv* %144, i64 0
  %145 = bitcast %struct.sv* %add.ptr202 to i8*
  %146 = bitcast i8* %145 to %struct.cv*
  %call203 = call %struct.hek* @CvNAME_HEK(%struct.cv* %146)
  store %struct.hek* %call203, %struct.hek** %bmxk, align 8
  %147 = load %struct.sv*, %struct.sv** %name, align 8
  %148 = load %struct.hek*, %struct.hek** %bmxk, align 8
  %hek_key = getelementptr inbounds %struct.hek, %struct.hek* %148, i32 0, i32 2
  %arraydecay = getelementptr inbounds [1 x i8], [1 x i8]* %hek_key, i64 0, i64 0
  %149 = load %struct.hek*, %struct.hek** %bmxk, align 8
  %hek_len = getelementptr inbounds %struct.hek, %struct.hek* %149, i32 0, i32 1
  %150 = load i32, i32* %hek_len, align 4
  %conv204 = sext i32 %150 to i64
  %151 = load %struct.hek*, %struct.hek** %bmxk, align 8
  %hek_key205 = getelementptr inbounds %struct.hek, %struct.hek* %151, i32 0, i32 2
  %arraydecay206 = getelementptr inbounds [1 x i8], [1 x i8]* %hek_key205, i64 0, i64 0
  %152 = load %struct.hek*, %struct.hek** %bmxk, align 8
  %hek_len207 = getelementptr inbounds %struct.hek, %struct.hek* %152, i32 0, i32 1
  %153 = load i32, i32* %hek_len207, align 4
  %idx.ext = sext i32 %153 to i64
  %add.ptr208 = getelementptr inbounds i8, i8* %arraydecay206, i64 %idx.ext
  %add.ptr209 = getelementptr inbounds i8, i8* %add.ptr208, i64 1
  %154 = load i8, i8* %add.ptr209, align 1
  %conv210 = zext i8 %154 to i32
  %and211 = and i32 %conv210, 1
  %tobool212 = icmp ne i32 %and211, 0
  %155 = zext i1 %tobool212 to i64
  %cond213 = select i1 %tobool212, i32 32768, i32 16384
  call void @Perl_sv_catpvn_flags(%struct.sv* %147, i8* %arraydecay, i64 %conv204, i32 %cond213)
  br label %do.end

do.end:                                           ; preds = %do.body
  br label %if.end215

if.else214:                                       ; preds = %cond.end192
  %156 = load %struct.sv*, %struct.sv** %name, align 8
  %157 = load %struct.gv*, %struct.gv** %gv.addr, align 8
  %158 = bitcast %struct.gv* %157 to %struct.sv*
  call void @Perl_sv_catsv_flags(%struct.sv* %156, %struct.sv* %158, i32 2)
  br label %if.end215

if.end215:                                        ; preds = %if.else214, %do.end
  br label %if.end217

if.else216:                                       ; preds = %lor.lhs.false
  %159 = load %struct.gv*, %struct.gv** %gv.addr, align 8
  %160 = bitcast %struct.gv* %159 to %struct.sv*
  store %struct.sv* %160, %struct.sv** %name, align 8
  br label %if.end217

if.end217:                                        ; preds = %if.else216, %if.end215
  br label %if.end218

if.end218:                                        ; preds = %if.end217, %if.then140
  br label %if.end219

if.end219:                                        ; preds = %if.end218, %if.then129
  br label %if.end220

if.end220:                                        ; preds = %if.end219, %if.end122
  %161 = load %struct.sv*, %struct.sv** %msg, align 8
  call void @Perl_sv_setpvn(%struct.sv* %161, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.62, i64 0, i64 0), i64 19)
  %162 = load %struct.sv*, %struct.sv** %name, align 8
  %tobool221 = icmp ne %struct.sv* %162, null
  br i1 %tobool221, label %if.then222, label %if.end223

if.then222:                                       ; preds = %if.end220
  %163 = load %struct.sv*, %struct.sv** %msg, align 8
  %164 = load %struct.sv*, %struct.sv** %name, align 8
  %165 = bitcast %struct.sv* %164 to i8*
  call void (%struct.sv*, i8*, ...) @Perl_sv_catpvf(%struct.sv* %163, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.63, i64 0, i64 0), i8* %165)
  br label %if.end223

if.end223:                                        ; preds = %if.then222, %if.end220
  %166 = load i8*, i8** %cvp, align 8
  %tobool224 = icmp ne i8* %166, null
  br i1 %tobool224, label %if.then225, label %if.else230

if.then225:                                       ; preds = %if.end223
  %167 = load %struct.sv*, %struct.sv** %msg, align 8
  %168 = load %struct.cv*, %struct.cv** %cv.addr, align 8
  %sv_flags226 = getelementptr inbounds %struct.cv, %struct.cv* %168, i32 0, i32 2
  %169 = load i32, i32* %sv_flags226, align 4
  %and227 = and i32 %169, 536870912
  %tobool228 = icmp ne i32 %and227, 0
  %170 = zext i1 %tobool228 to i64
  %cond229 = select i1 %tobool228, i32 1, i32 0
  %171 = load i64, i64* %clen, align 8
  %172 = load i8*, i8** %cvp, align 8
  call void (%struct.sv*, i8*, ...) @Perl_sv_catpvf(%struct.sv* %167, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.64, i64 0, i64 0), i32 %cond229, i64 %171, i8* %172)
  br label %if.end231

if.else230:                                       ; preds = %if.end223
  %173 = load %struct.sv*, %struct.sv** %msg, align 8
  call void @Perl_sv_catpvn_flags(%struct.sv* %173, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.65, i64 0, i64 0), i64 6, i32 2)
  br label %if.end231

if.end231:                                        ; preds = %if.else230, %if.then225
  %174 = load %struct.sv*, %struct.sv** %msg, align 8
  call void @Perl_sv_catpvn_flags(%struct.sv* %174, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.66, i64 0, i64 0), i64 4, i32 2)
  %175 = load i8*, i8** %p.addr, align 8
  %tobool232 = icmp ne i8* %175, null
  br i1 %tobool232, label %if.then233, label %if.else237

if.then233:                                       ; preds = %if.end231
  %176 = load %struct.sv*, %struct.sv** %msg, align 8
  %177 = load i32, i32* %flags.addr, align 4
  %and234 = and i32 %177, 536870912
  %tobool235 = icmp ne i32 %and234, 0
  %178 = zext i1 %tobool235 to i64
  %cond236 = select i1 %tobool235, i32 1, i32 0
  %179 = load i64, i64* %len.addr, align 8
  %180 = load i8*, i8** %p.addr, align 8
  call void (%struct.sv*, i8*, ...) @Perl_sv_catpvf(%struct.sv* %176, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.67, i64 0, i64 0), i32 %cond236, i64 %179, i8* %180)
  br label %if.end238

if.else237:                                       ; preds = %if.end231
  %181 = load %struct.sv*, %struct.sv** %msg, align 8
  call void @Perl_sv_catpvn_flags(%struct.sv* %181, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.68, i64 0, i64 0), i64 4, i32 2)
  br label %if.end238

if.end238:                                        ; preds = %if.else237, %if.then233
  %182 = load %struct.sv*, %struct.sv** %msg, align 8
  %183 = bitcast %struct.sv* %182 to i8*
  call void (i32, i8*, ...) @Perl_warner(i32 35, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.69, i64 0, i64 0), i8* %183)
  br label %return

return:                                           ; preds = %if.end238, %if.then118, %if.then113, %if.then106, %if.then89, %if.then
  ret void
}

declare dso_local zeroext i1 @Perl_ckwarn_d(i32) #3

; Function Attrs: noinline nounwind uwtable
define internal i8* @S_strip_spaces(i8* %orig, i64* %len) #0 {
entry:
  %orig.addr = alloca i8*, align 8
  %len.addr = alloca i64*, align 8
  %tmpsv = alloca %struct.sv*, align 8
  %tmps = alloca i8*, align 8
  store i8* %orig, i8** %orig.addr, align 8
  store i64* %len, i64** %len.addr, align 8
  %0 = load i8*, i8** %orig.addr, align 8
  %1 = load i64*, i64** %len.addr, align 8
  %2 = load i64, i64* %1, align 8
  %call = call %struct.sv* @Perl_newSVpvn_flags(i8* %0, i64 %2, i32 524288)
  store %struct.sv* %call, %struct.sv** %tmpsv, align 8
  %3 = load %struct.sv*, %struct.sv** %tmpsv, align 8
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %3, i32 0, i32 3
  %svu_pv = bitcast %union.anon* %sv_u to i8**
  %4 = load i8*, i8** %svu_pv, align 8
  store i8* %4, i8** %tmps, align 8
  br label %while.cond

while.cond:                                       ; preds = %if.end, %entry
  %5 = load i64*, i64** %len.addr, align 8
  %6 = load i64, i64* %5, align 8
  %dec = add i64 %6, -1
  store i64 %dec, i64* %5, align 8
  %tobool = icmp ne i64 %6, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %7 = load i8*, i8** %orig.addr, align 8
  %8 = load i8, i8* %7, align 1
  %idxprom = zext i8 %8 to i64
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @PL_charclass, i64 0, i64 %idxprom
  %9 = load i32, i32* %arrayidx, align 4
  %and = and i32 %9, 17408
  %cmp = icmp eq i32 %and, 17408
  br i1 %cmp, label %if.end, label %if.then

if.then:                                          ; preds = %while.body
  %10 = load i8*, i8** %orig.addr, align 8
  %11 = load i8, i8* %10, align 1
  %12 = load i8*, i8** %tmps, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %12, i32 1
  store i8* %incdec.ptr, i8** %tmps, align 8
  store i8 %11, i8* %12, align 1
  br label %if.end

if.end:                                           ; preds = %if.then, %while.body
  %13 = load i8*, i8** %orig.addr, align 8
  %incdec.ptr1 = getelementptr inbounds i8, i8* %13, i32 1
  store i8* %incdec.ptr1, i8** %orig.addr, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %14 = load i8*, i8** %tmps, align 8
  store i8 0, i8* %14, align 1
  %15 = load i8*, i8** %tmps, align 8
  %16 = load %struct.sv*, %struct.sv** %tmpsv, align 8
  %sv_u2 = getelementptr inbounds %struct.sv, %struct.sv* %16, i32 0, i32 3
  %svu_pv3 = bitcast %union.anon* %sv_u2 to i8**
  %17 = load i8*, i8** %svu_pv3, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %15 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %17 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %18 = load i64*, i64** %len.addr, align 8
  store i64 %sub.ptr.sub, i64* %18, align 8
  %19 = load %struct.sv*, %struct.sv** %tmpsv, align 8
  %sv_u4 = getelementptr inbounds %struct.sv, %struct.sv* %19, i32 0, i32 3
  %svu_pv5 = bitcast %union.anon* %sv_u4 to i8**
  %20 = load i8*, i8** %svu_pv5, align 8
  ret i8* %20
}

declare dso_local i32 @Perl_bytes_cmp_utf8(i8*, i64, i8*, i64) #3

declare dso_local %struct.sv* @Perl_sv_newmortal() #3

declare dso_local void @Perl_gv_efullname4(%struct.sv*, %struct.gv*, i8*, i1 zeroext) #3

declare dso_local %struct.sv* @Perl_newSVpvn_flags(i8*, i64, i32) #3

declare dso_local %struct.sv* @Perl_newSVhek(%struct.hek*) #3

declare dso_local void @Perl_sv_catpvn_flags(%struct.sv*, i8*, i64, i32) #3

; Function Attrs: noinline nounwind uwtable
define internal %struct.hek* @CvNAME_HEK(%struct.cv* %sv) #0 {
entry:
  %sv.addr = alloca %struct.cv*, align 8
  store %struct.cv* %sv, %struct.cv** %sv.addr, align 8
  %0 = load %struct.cv*, %struct.cv** %sv.addr, align 8
  %sv_any = getelementptr inbounds %struct.cv, %struct.cv* %0, i32 0, i32 0
  %1 = load %struct.xpvcv*, %struct.xpvcv** %sv_any, align 8
  %2 = bitcast %struct.xpvcv* %1 to i8*
  %3 = bitcast i8* %2 to %struct.xpvcv*
  %xcv_flags = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %3, i32 0, i32 12
  %4 = load i32, i32* %xcv_flags, align 4
  %and = and i32 %4, 32768
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %5 = load %struct.cv*, %struct.cv** %sv.addr, align 8
  %sv_any1 = getelementptr inbounds %struct.cv, %struct.cv* %5, i32 0, i32 0
  %6 = load %struct.xpvcv*, %struct.xpvcv** %sv_any1, align 8
  %7 = bitcast %struct.xpvcv* %6 to i8*
  %8 = bitcast i8* %7 to %struct.xpvcv*
  %xcv_gv_u = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %8, i32 0, i32 7
  %xcv_hek = bitcast %union.anon.8* %xcv_gv_u to %struct.hek**
  %9 = load %struct.hek*, %struct.hek** %xcv_hek, align 8
  br label %cond.end

cond.false:                                       ; preds = %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.hek* [ %9, %cond.true ], [ null, %cond.false ]
  ret %struct.hek* %cond
}

declare dso_local void @Perl_sv_catsv_flags(%struct.sv*, %struct.sv*, i32) #3

declare dso_local void @Perl_sv_setpvn(%struct.sv*, i8*, i64) #3

declare dso_local void @Perl_sv_catpvf(%struct.sv*, i8*, ...) #3

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.sv* @Perl_cv_const_sv(%struct.cv* %cv) #0 {
entry:
  %retval = alloca %struct.sv*, align 8
  %cv.addr = alloca %struct.cv*, align 8
  %sv = alloca %struct.sv*, align 8
  store %struct.cv* %cv, %struct.cv** %cv.addr, align 8
  %0 = load %struct.cv*, %struct.cv** %cv.addr, align 8
  %tobool = icmp ne %struct.cv* %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store %struct.sv* null, %struct.sv** %retval, align 8
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct.cv*, %struct.cv** %cv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.cv, %struct.cv* %1, i32 0, i32 2
  %2 = load i32, i32* %sv_flags, align 4
  %and = and i32 %2, 255
  %cmp = icmp eq i32 %and, 13
  br i1 %cmp, label %if.end5, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end
  %3 = load %struct.cv*, %struct.cv** %cv.addr, align 8
  %sv_flags1 = getelementptr inbounds %struct.cv, %struct.cv* %3, i32 0, i32 2
  %4 = load i32, i32* %sv_flags1, align 4
  %and2 = and i32 %4, 255
  %cmp3 = icmp eq i32 %and2, 14
  br i1 %cmp3, label %if.end5, label %if.then4

if.then4:                                         ; preds = %lor.lhs.false
  store %struct.sv* null, %struct.sv** %retval, align 8
  br label %return

if.end5:                                          ; preds = %lor.lhs.false, %if.end
  %5 = load %struct.cv*, %struct.cv** %cv.addr, align 8
  %sv_any = getelementptr inbounds %struct.cv, %struct.cv* %5, i32 0, i32 0
  %6 = load %struct.xpvcv*, %struct.xpvcv** %sv_any, align 8
  %7 = bitcast %struct.xpvcv* %6 to i8*
  %8 = bitcast i8* %7 to %struct.xpvcv*
  %xcv_flags = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %8, i32 0, i32 12
  %9 = load i32, i32* %xcv_flags, align 4
  %and6 = and i32 %9, 4
  %tobool7 = icmp ne i32 %and6, 0
  br i1 %tobool7, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end5
  %10 = load %struct.cv*, %struct.cv** %cv.addr, align 8
  %sv_any8 = getelementptr inbounds %struct.cv, %struct.cv* %10, i32 0, i32 0
  %11 = load %struct.xpvcv*, %struct.xpvcv** %sv_any8, align 8
  %12 = bitcast %struct.xpvcv* %11 to i8*
  %13 = bitcast i8* %12 to %struct.xpvcv*
  %xcv_start_u = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %13, i32 0, i32 5
  %xcv_xsubany = bitcast %union.anon.6* %xcv_start_u to %union.any*
  %any_ptr = bitcast %union.any* %xcv_xsubany to i8**
  %14 = load i8*, i8** %any_ptr, align 8
  %15 = bitcast i8* %14 to %struct.sv*
  br label %cond.end

cond.false:                                       ; preds = %if.end5
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.sv* [ %15, %cond.true ], [ null, %cond.false ]
  store %struct.sv* %cond, %struct.sv** %sv, align 8
  %16 = load %struct.sv*, %struct.sv** %sv, align 8
  %tobool9 = icmp ne %struct.sv* %16, null
  br i1 %tobool9, label %land.lhs.true, label %if.end14

land.lhs.true:                                    ; preds = %cond.end
  %17 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags10 = getelementptr inbounds %struct.sv, %struct.sv* %17, i32 0, i32 2
  %18 = load i32, i32* %sv_flags10, align 4
  %and11 = and i32 %18, 255
  %cmp12 = icmp eq i32 %and11, 11
  br i1 %cmp12, label %if.then13, label %if.end14

if.then13:                                        ; preds = %land.lhs.true
  store %struct.sv* null, %struct.sv** %retval, align 8
  br label %return

if.end14:                                         ; preds = %land.lhs.true, %cond.end
  %19 = load %struct.sv*, %struct.sv** %sv, align 8
  store %struct.sv* %19, %struct.sv** %retval, align 8
  br label %return

return:                                           ; preds = %if.end14, %if.then13, %if.then4, %if.then
  %20 = load %struct.sv*, %struct.sv** %retval, align 8
  ret %struct.sv* %20
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.sv* @Perl_cv_const_sv_or_av(%struct.cv* %cv) #0 {
entry:
  %retval = alloca %struct.sv*, align 8
  %cv.addr = alloca %struct.cv*, align 8
  store %struct.cv* %cv, %struct.cv** %cv.addr, align 8
  %0 = load %struct.cv*, %struct.cv** %cv.addr, align 8
  %tobool = icmp ne %struct.cv* %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store %struct.sv* null, %struct.sv** %retval, align 8
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct.cv*, %struct.cv** %cv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.cv, %struct.cv* %1, i32 0, i32 2
  %2 = load i32, i32* %sv_flags, align 4
  %and = and i32 %2, 2048
  %tobool1 = icmp ne i32 %and, 0
  br i1 %tobool1, label %if.then2, label %if.end3

if.then2:                                         ; preds = %if.end
  %3 = load %struct.cv*, %struct.cv** %cv.addr, align 8
  %4 = bitcast %struct.cv* %3 to %struct.sv*
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %4, i32 0, i32 3
  %svu_rv = bitcast %union.anon* %sv_u to %struct.sv**
  %5 = load %struct.sv*, %struct.sv** %svu_rv, align 8
  store %struct.sv* %5, %struct.sv** %retval, align 8
  br label %return

if.end3:                                          ; preds = %if.end
  %6 = load %struct.cv*, %struct.cv** %cv.addr, align 8
  %sv_any = getelementptr inbounds %struct.cv, %struct.cv* %6, i32 0, i32 0
  %7 = load %struct.xpvcv*, %struct.xpvcv** %sv_any, align 8
  %8 = bitcast %struct.xpvcv* %7 to i8*
  %9 = bitcast i8* %8 to %struct.xpvcv*
  %xcv_flags = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %9, i32 0, i32 12
  %10 = load i32, i32* %xcv_flags, align 4
  %and4 = and i32 %10, 4
  %tobool5 = icmp ne i32 %and4, 0
  br i1 %tobool5, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end3
  %11 = load %struct.cv*, %struct.cv** %cv.addr, align 8
  %sv_any6 = getelementptr inbounds %struct.cv, %struct.cv* %11, i32 0, i32 0
  %12 = load %struct.xpvcv*, %struct.xpvcv** %sv_any6, align 8
  %13 = bitcast %struct.xpvcv* %12 to i8*
  %14 = bitcast i8* %13 to %struct.xpvcv*
  %xcv_start_u = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %14, i32 0, i32 5
  %xcv_xsubany = bitcast %union.anon.6* %xcv_start_u to %union.any*
  %any_ptr = bitcast %union.any* %xcv_xsubany to i8**
  %15 = load i8*, i8** %any_ptr, align 8
  %16 = bitcast i8* %15 to %struct.sv*
  br label %cond.end

cond.false:                                       ; preds = %if.end3
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.sv* [ %16, %cond.true ], [ null, %cond.false ]
  store %struct.sv* %cond, %struct.sv** %retval, align 8
  br label %return

return:                                           ; preds = %cond.end, %if.then2, %if.then
  %17 = load %struct.sv*, %struct.sv** %retval, align 8
  ret %struct.sv* %17
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.cv* @Perl_newMYSUB(i32 %floor, %struct.op* %o, %struct.op* %proto, %struct.op* %attrs, %struct.op* %block) #0 {
entry:
  %floor.addr = alloca i32, align 4
  %o.addr = alloca %struct.op*, align 8
  %proto.addr = alloca %struct.op*, align 8
  %attrs.addr = alloca %struct.op*, align 8
  %block.addr = alloca %struct.op*, align 8
  %spot = alloca %struct.cv**, align 8
  %svspot = alloca %struct.sv**, align 8
  %ps = alloca i8*, align 8
  %ps_len = alloca i64, align 8
  %ps_utf8 = alloca i32, align 4
  %cv = alloca %struct.cv*, align 8
  %compcv = alloca %struct.cv*, align 8
  %const_sv = alloca %struct.sv*, align 8
  %name = alloca %struct.padname*, align 8
  %pax = alloca i64, align 8
  %outcv = alloca %struct.cv*, align 8
  %clonee = alloca %struct.cv*, align 8
  %hek = alloca %struct.hek*, align 8
  %reusable = alloca i8, align 1
  %start = alloca %struct.op*, align 8
  %_o = alloca %struct.op*, align 8
  %_o47 = alloca %struct.op*, align 8
  %hash = alloca i32, align 4
  %l = alloca i32, align 4
  %exists = alloca i8, align 1
  %preserved_flags = alloca i32, align 4
  %temp_padl = alloca %struct.padlist*, align 8
  %temp_cv = alloca %struct.cv*, align 8
  %other_flags = alloca i32, align 4
  %cvstart = alloca %struct.op*, align 8
  %hash373 = alloca i32, align 4
  %tmpstr = alloca %struct.sv*, align 8
  %db_postponed = alloca %struct.gv*, align 8
  %hv = alloca %struct.hv*, align 8
  %sv = alloca %struct.sv*, align 8
  %pcv = alloca %struct.cv*, align 8
  %sp = alloca %struct.sv**, align 8
  %mark_stack_entry = alloca i32*, align 8
  %depth = alloca i64, align 8
  %oldcv = alloca %struct.sv*, align 8
  store i32 %floor, i32* %floor.addr, align 4
  store %struct.op* %o, %struct.op** %o.addr, align 8
  store %struct.op* %proto, %struct.op** %proto.addr, align 8
  store %struct.op* %attrs, %struct.op** %attrs.addr, align 8
  store %struct.op* %block, %struct.op** %block.addr, align 8
  store i64 0, i64* %ps_len, align 8
  store i32 0, i32* %ps_utf8, align 4
  store %struct.cv* null, %struct.cv** %cv, align 8
  %0 = load %struct.cv*, %struct.cv** @PL_compcv, align 8
  store %struct.cv* %0, %struct.cv** %compcv, align 8
  %1 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_targ = getelementptr inbounds %struct.op, %struct.op* %1, i32 0, i32 3
  %2 = load i64, i64* %op_targ, align 8
  store i64 %2, i64* %pax, align 8
  %3 = load %struct.cv*, %struct.cv** @PL_compcv, align 8
  %sv_any = getelementptr inbounds %struct.cv, %struct.cv* %3, i32 0, i32 0
  %4 = load %struct.xpvcv*, %struct.xpvcv** %sv_any, align 8
  %5 = bitcast %struct.xpvcv* %4 to i8*
  %6 = bitcast i8* %5 to %struct.xpvcv*
  %xcv_outside = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %6, i32 0, i32 10
  %7 = load %struct.cv*, %struct.cv** %xcv_outside, align 8
  store %struct.cv* %7, %struct.cv** %outcv, align 8
  store %struct.cv* null, %struct.cv** %clonee, align 8
  store %struct.hek* null, %struct.hek** %hek, align 8
  store i8 0, i8* %reusable, align 1
  store %struct.op* null, %struct.op** %start, align 8
  br label %redo

redo:                                             ; preds = %if.then, %entry
  %8 = load %struct.cv*, %struct.cv** %outcv, align 8
  %sv_any1 = getelementptr inbounds %struct.cv, %struct.cv* %8, i32 0, i32 0
  %9 = load %struct.xpvcv*, %struct.xpvcv** %sv_any1, align 8
  %10 = bitcast %struct.xpvcv* %9 to i8*
  %11 = bitcast i8* %10 to %struct.xpvcv*
  %xcv_padlist_u = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %11, i32 0, i32 9
  %xcv_padlist = bitcast %union.anon.9* %xcv_padlist_u to %struct.padlist**
  %12 = load %struct.padlist*, %struct.padlist** %xcv_padlist, align 8
  %xpadl_alloc = getelementptr inbounds %struct.padlist, %struct.padlist* %12, i32 0, i32 1
  %13 = load %struct.av**, %struct.av*** %xpadl_alloc, align 8
  %14 = load %struct.av*, %struct.av** %13, align 8
  %15 = bitcast %struct.av* %14 to %struct.padnamelist*
  %xpadnl_alloc = getelementptr inbounds %struct.padnamelist, %struct.padnamelist* %15, i32 0, i32 1
  %16 = load %struct.padname**, %struct.padname*** %xpadnl_alloc, align 8
  %17 = load i64, i64* %pax, align 8
  %arrayidx = getelementptr inbounds %struct.padname*, %struct.padname** %16, i64 %17
  %18 = load %struct.padname*, %struct.padname** %arrayidx, align 8
  store %struct.padname* %18, %struct.padname** %name, align 8
  %19 = load %struct.padname*, %struct.padname** %name, align 8
  %xpadn_flags = getelementptr inbounds %struct.padname, %struct.padname* %19, i32 0, i32 8
  %20 = load i8, i8* %xpadn_flags, align 1
  %conv = zext i8 %20 to i32
  %and = and i32 %conv, 1
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %redo
  %21 = load %struct.padname*, %struct.padname** %name, align 8
  %xpadn_low = getelementptr inbounds %struct.padname, %struct.padname* %21, i32 0, i32 3
  %22 = load i32, i32* %xpadn_low, align 8
  %tobool2 = icmp ne i32 %22, 0
  br i1 %tobool2, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %23 = load %struct.padname*, %struct.padname** %name, align 8
  %xpadn_low3 = getelementptr inbounds %struct.padname, %struct.padname* %23, i32 0, i32 3
  %24 = load i32, i32* %xpadn_low3, align 8
  %conv4 = zext i32 %24 to i64
  store i64 %conv4, i64* %pax, align 8
  %25 = load %struct.cv*, %struct.cv** %outcv, align 8
  %sv_any5 = getelementptr inbounds %struct.cv, %struct.cv* %25, i32 0, i32 0
  %26 = load %struct.xpvcv*, %struct.xpvcv** %sv_any5, align 8
  %27 = bitcast %struct.xpvcv* %26 to i8*
  %28 = bitcast i8* %27 to %struct.xpvcv*
  %xcv_outside6 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %28, i32 0, i32 10
  %29 = load %struct.cv*, %struct.cv** %xcv_outside6, align 8
  store %struct.cv* %29, %struct.cv** %outcv, align 8
  br label %redo

if.end:                                           ; preds = %land.lhs.true, %redo
  %30 = load %struct.cv*, %struct.cv** %outcv, align 8
  %sv_any7 = getelementptr inbounds %struct.cv, %struct.cv* %30, i32 0, i32 0
  %31 = load %struct.xpvcv*, %struct.xpvcv** %sv_any7, align 8
  %32 = bitcast %struct.xpvcv* %31 to i8*
  %33 = bitcast i8* %32 to %struct.xpvcv*
  %xcv_padlist_u8 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %33, i32 0, i32 9
  %xcv_padlist9 = bitcast %union.anon.9* %xcv_padlist_u8 to %struct.padlist**
  %34 = load %struct.padlist*, %struct.padlist** %xcv_padlist9, align 8
  %xpadl_alloc10 = getelementptr inbounds %struct.padlist, %struct.padlist* %34, i32 0, i32 1
  %35 = load %struct.av**, %struct.av*** %xpadl_alloc10, align 8
  %36 = load %struct.cv*, %struct.cv** %outcv, align 8
  %call = call i32* @S_CvDEPTHp(%struct.cv* %36)
  %37 = load i32, i32* %call, align 4
  %tobool11 = icmp ne i32 %37, 0
  br i1 %tobool11, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end
  %38 = load %struct.cv*, %struct.cv** %outcv, align 8
  %call12 = call i32* @S_CvDEPTHp(%struct.cv* %38)
  %39 = load i32, i32* %call12, align 4
  br label %cond.end

cond.false:                                       ; preds = %if.end
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %39, %cond.true ], [ 1, %cond.false ]
  %idxprom = sext i32 %cond to i64
  %arrayidx13 = getelementptr inbounds %struct.av*, %struct.av** %35, i64 %idxprom
  %40 = load %struct.av*, %struct.av** %arrayidx13, align 8
  %sv_u = getelementptr inbounds %struct.av, %struct.av* %40, i32 0, i32 3
  %svu_array = bitcast %union.anon.2* %sv_u to %struct.sv***
  %41 = load %struct.sv**, %struct.sv*** %svu_array, align 8
  %42 = load i64, i64* %pax, align 8
  %arrayidx14 = getelementptr inbounds %struct.sv*, %struct.sv** %41, i64 %42
  store %struct.sv** %arrayidx14, %struct.sv*** %svspot, align 8
  %43 = load %struct.sv**, %struct.sv*** %svspot, align 8
  %44 = bitcast %struct.sv** %43 to %struct.cv**
  store %struct.cv** %44, %struct.cv*** %spot, align 8
  %45 = load %struct.yy_parser*, %struct.yy_parser** @PL_parser, align 8
  %tobool15 = icmp ne %struct.yy_parser* %45, null
  br i1 %tobool15, label %land.lhs.true16, label %if.then19

land.lhs.true16:                                  ; preds = %cond.end
  %46 = load %struct.yy_parser*, %struct.yy_parser** @PL_parser, align 8
  %error_count = getelementptr inbounds %struct.yy_parser, %struct.yy_parser* %46, i32 0, i32 44
  %47 = load i8, i8* %error_count, align 1
  %conv17 = zext i8 %47 to i32
  %tobool18 = icmp ne i32 %conv17, 0
  br i1 %tobool18, label %if.end22, label %if.then19

if.then19:                                        ; preds = %land.lhs.true16, %cond.end
  %48 = load %struct.padname*, %struct.padname** %name, align 8
  %xpadn_pv = getelementptr inbounds %struct.padname, %struct.padname* %48, i32 0, i32 0
  %49 = load i8*, i8** %xpadn_pv, align 8
  %50 = load %struct.padname*, %struct.padname** %name, align 8
  %xpadn_len = getelementptr inbounds %struct.padname, %struct.padname* %50, i32 0, i32 7
  %51 = load i8, i8* %xpadn_len, align 8
  %conv20 = zext i8 %51 to i64
  %call21 = call %struct.sv* @Perl_newSVpvn_flags(i8* %49, i64 %conv20, i32 537395200)
  %52 = bitcast %struct.sv* %call21 to %struct.gv*
  call void @S_move_proto_attr(%struct.op** %proto.addr, %struct.op** %attrs.addr, %struct.gv* %52)
  br label %if.end22

if.end22:                                         ; preds = %if.then19, %land.lhs.true16
  %53 = load %struct.op*, %struct.op** %proto.addr, align 8
  %tobool23 = icmp ne %struct.op* %53, null
  br i1 %tobool23, label %if.then24, label %if.else

if.then24:                                        ; preds = %if.end22
  %54 = load %struct.op*, %struct.op** %proto.addr, align 8
  %55 = bitcast %struct.op* %54 to %struct.svop*
  %op_sv = getelementptr inbounds %struct.svop, %struct.svop* %55, i32 0, i32 7
  %56 = load %struct.sv*, %struct.sv** %op_sv, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %56, i32 0, i32 2
  %57 = load i32, i32* %sv_flags, align 4
  %and25 = and i32 %57, 2098176
  %cmp = icmp eq i32 %and25, 1024
  br i1 %cmp, label %cond.true27, label %cond.false32

cond.true27:                                      ; preds = %if.then24
  %58 = load %struct.op*, %struct.op** %proto.addr, align 8
  %59 = bitcast %struct.op* %58 to %struct.svop*
  %op_sv28 = getelementptr inbounds %struct.svop, %struct.svop* %59, i32 0, i32 7
  %60 = load %struct.sv*, %struct.sv** %op_sv28, align 8
  %sv_any29 = getelementptr inbounds %struct.sv, %struct.sv* %60, i32 0, i32 0
  %61 = load i8*, i8** %sv_any29, align 8
  %62 = bitcast i8* %61 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %62, i32 0, i32 2
  %63 = load i64, i64* %xpv_cur, align 8
  store i64 %63, i64* %ps_len, align 8
  %64 = load %struct.op*, %struct.op** %proto.addr, align 8
  %65 = bitcast %struct.op* %64 to %struct.svop*
  %op_sv30 = getelementptr inbounds %struct.svop, %struct.svop* %65, i32 0, i32 7
  %66 = load %struct.sv*, %struct.sv** %op_sv30, align 8
  %sv_u31 = getelementptr inbounds %struct.sv, %struct.sv* %66, i32 0, i32 3
  %svu_pv = bitcast %union.anon* %sv_u31 to i8**
  %67 = load i8*, i8** %svu_pv, align 8
  %add.ptr = getelementptr inbounds i8, i8* %67, i64 0
  br label %cond.end35

cond.false32:                                     ; preds = %if.then24
  %68 = load %struct.op*, %struct.op** %proto.addr, align 8
  %69 = bitcast %struct.op* %68 to %struct.svop*
  %op_sv33 = getelementptr inbounds %struct.svop, %struct.svop* %69, i32 0, i32 7
  %70 = load %struct.sv*, %struct.sv** %op_sv33, align 8
  %call34 = call i8* @Perl_sv_2pv_flags(%struct.sv* %70, i64* %ps_len, i32 34)
  br label %cond.end35

cond.end35:                                       ; preds = %cond.false32, %cond.true27
  %cond36 = phi i8* [ %add.ptr, %cond.true27 ], [ %call34, %cond.false32 ]
  store i8* %cond36, i8** %ps, align 8
  %71 = load %struct.op*, %struct.op** %proto.addr, align 8
  %72 = bitcast %struct.op* %71 to %struct.svop*
  %op_sv37 = getelementptr inbounds %struct.svop, %struct.svop* %72, i32 0, i32 7
  %73 = load %struct.sv*, %struct.sv** %op_sv37, align 8
  %sv_flags38 = getelementptr inbounds %struct.sv, %struct.sv* %73, i32 0, i32 2
  %74 = load i32, i32* %sv_flags38, align 4
  %and39 = and i32 %74, 536870912
  store i32 %and39, i32* %ps_utf8, align 4
  br label %if.end40

if.else:                                          ; preds = %if.end22
  store i8* null, i8** %ps, align 8
  br label %if.end40

if.end40:                                         ; preds = %if.else, %cond.end35
  %75 = load %struct.op*, %struct.op** %proto.addr, align 8
  %tobool41 = icmp ne %struct.op* %75, null
  br i1 %tobool41, label %if.then42, label %if.end43

if.then42:                                        ; preds = %if.end40
  br label %do.body

do.body:                                          ; preds = %if.then42
  %76 = load %struct.op*, %struct.op** %proto.addr, align 8
  store %struct.op* %76, %struct.op** %_o, align 8
  %77 = load %struct.op*, %struct.op** %_o, align 8
  %op_savefree = getelementptr inbounds %struct.op, %struct.op* %77, i32 0, i32 4
  %bf.load = load i16, i16* %op_savefree, align 8
  %bf.clear = and i16 %bf.load, -2049
  %bf.set = or i16 %bf.clear, 2048
  store i16 %bf.set, i16* %op_savefree, align 8
  %78 = load %struct.op*, %struct.op** %_o, align 8
  %79 = bitcast %struct.op* %78 to i8*
  call void @Perl_save_pushptr(i8* %79, i32 9)
  br label %do.end

do.end:                                           ; preds = %do.body
  br label %if.end43

if.end43:                                         ; preds = %do.end, %if.end40
  %80 = load %struct.op*, %struct.op** %attrs.addr, align 8
  %tobool44 = icmp ne %struct.op* %80, null
  br i1 %tobool44, label %if.then45, label %if.end53

if.then45:                                        ; preds = %if.end43
  br label %do.body46

do.body46:                                        ; preds = %if.then45
  %81 = load %struct.op*, %struct.op** %attrs.addr, align 8
  store %struct.op* %81, %struct.op** %_o47, align 8
  %82 = load %struct.op*, %struct.op** %_o47, align 8
  %op_savefree48 = getelementptr inbounds %struct.op, %struct.op* %82, i32 0, i32 4
  %bf.load49 = load i16, i16* %op_savefree48, align 8
  %bf.clear50 = and i16 %bf.load49, -2049
  %bf.set51 = or i16 %bf.clear50, 2048
  store i16 %bf.set51, i16* %op_savefree48, align 8
  %83 = load %struct.op*, %struct.op** %_o47, align 8
  %84 = bitcast %struct.op* %83 to i8*
  call void @Perl_save_pushptr(i8* %84, i32 9)
  br label %do.end52

do.end52:                                         ; preds = %do.body46
  br label %if.end53

if.end53:                                         ; preds = %do.end52, %if.end43
  %85 = load %struct.yy_parser*, %struct.yy_parser** @PL_parser, align 8
  %tobool54 = icmp ne %struct.yy_parser* %85, null
  br i1 %tobool54, label %land.lhs.true55, label %if.end60

land.lhs.true55:                                  ; preds = %if.end53
  %86 = load %struct.yy_parser*, %struct.yy_parser** @PL_parser, align 8
  %error_count56 = getelementptr inbounds %struct.yy_parser, %struct.yy_parser* %86, i32 0, i32 44
  %87 = load i8, i8* %error_count56, align 1
  %conv57 = zext i8 %87 to i32
  %tobool58 = icmp ne i32 %conv57, 0
  br i1 %tobool58, label %if.then59, label %if.end60

if.then59:                                        ; preds = %land.lhs.true55
  %88 = load %struct.op*, %struct.op** %block.addr, align 8
  call void @Perl_op_free(%struct.op* %88)
  %89 = load %struct.cv*, %struct.cv** @PL_compcv, align 8
  %90 = bitcast %struct.cv* %89 to i8*
  %91 = bitcast i8* %90 to %struct.sv*
  call void @S_SvREFCNT_dec(%struct.sv* %91)
  store %struct.cv* null, %struct.cv** @PL_compcv, align 8
  br label %done

if.end60:                                         ; preds = %land.lhs.true55, %if.end53
  %92 = load %struct.cv*, %struct.cv** %outcv, align 8
  %call61 = call i32* @S_CvDEPTHp(%struct.cv* %92)
  %93 = load i32, i32* %call61, align 4
  %tobool62 = icmp ne i32 %93, 0
  br i1 %tobool62, label %land.lhs.true63, label %if.else68

land.lhs.true63:                                  ; preds = %if.end60
  %94 = load %struct.cv*, %struct.cv** %compcv, align 8
  %sv_any64 = getelementptr inbounds %struct.cv, %struct.cv* %94, i32 0, i32 0
  %95 = load %struct.xpvcv*, %struct.xpvcv** %sv_any64, align 8
  %96 = bitcast %struct.xpvcv* %95 to i8*
  %97 = bitcast i8* %96 to %struct.xpvcv*
  %xcv_flags = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %97, i32 0, i32 12
  %98 = load i32, i32* %xcv_flags, align 4
  %and65 = and i32 %98, 32
  %tobool66 = icmp ne i32 %and65, 0
  br i1 %tobool66, label %if.then67, label %if.else68

if.then67:                                        ; preds = %land.lhs.true63
  %99 = load %struct.cv**, %struct.cv*** %spot, align 8
  %100 = load %struct.cv*, %struct.cv** %99, align 8
  store %struct.cv* %100, %struct.cv** %cv, align 8
  store %struct.cv** %clonee, %struct.cv*** %spot, align 8
  %101 = bitcast %struct.cv** %clonee to %struct.sv**
  store %struct.sv** %101, %struct.sv*** %svspot, align 8
  br label %if.end114

if.else68:                                        ; preds = %land.lhs.true63, %if.end60
  %102 = load %struct.padname*, %struct.padname** %name, align 8
  %xpadn_flags69 = getelementptr inbounds %struct.padname, %struct.padname* %102, i32 0, i32 8
  %103 = load i8, i8* %xpadn_flags69, align 1
  %conv70 = zext i8 %103 to i32
  %and71 = and i32 %conv70, 2
  %tobool72 = icmp ne i32 %and71, 0
  br i1 %tobool72, label %if.then75, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.else68
  %104 = load %struct.cv*, %struct.cv** %outcv, align 8
  %call73 = call i32* @S_CvDEPTHp(%struct.cv* %104)
  %105 = load i32, i32* %call73, align 4
  %tobool74 = icmp ne i32 %105, 0
  br i1 %tobool74, label %if.then75, label %if.else76

if.then75:                                        ; preds = %lor.lhs.false, %if.else68
  %106 = load %struct.cv**, %struct.cv*** %spot, align 8
  %107 = load %struct.cv*, %struct.cv** %106, align 8
  store %struct.cv* %107, %struct.cv** %cv, align 8
  br label %if.end113

if.else76:                                        ; preds = %lor.lhs.false
  %108 = load %struct.cv**, %struct.cv*** %spot, align 8
  %109 = load %struct.cv*, %struct.cv** %108, align 8
  %sv_any77 = getelementptr inbounds %struct.cv, %struct.cv* %109, i32 0, i32 0
  %110 = load %struct.xpvcv*, %struct.xpvcv** %sv_any77, align 8
  %111 = bitcast %struct.xpvcv* %110 to i8*
  %112 = bitcast i8* %111 to %struct.xpvcv*
  %xcv_flags78 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %112, i32 0, i32 12
  %113 = load i32, i32* %xcv_flags78, align 4
  %and79 = and i32 %113, 32768
  %tobool80 = icmp ne i32 %and79, 0
  br i1 %tobool80, label %if.then81, label %if.else83

if.then81:                                        ; preds = %if.else76
  %114 = load %struct.cv**, %struct.cv*** %spot, align 8
  %115 = load %struct.cv*, %struct.cv** %114, align 8
  %call82 = call %struct.hek* @CvNAME_HEK(%struct.cv* %115)
  store %struct.hek* %call82, %struct.hek** %hek, align 8
  br label %if.end110

if.else83:                                        ; preds = %if.else76
  %116 = load %struct.padname*, %struct.padname** %name, align 8
  %xpadn_pv84 = getelementptr inbounds %struct.padname, %struct.padname* %116, i32 0, i32 0
  %117 = load i8*, i8** %xpadn_pv84, align 8
  %add.ptr85 = getelementptr inbounds i8, i8* %117, i64 1
  %118 = load %struct.padname*, %struct.padname** %name, align 8
  %xpadn_len86 = getelementptr inbounds %struct.padname, %struct.padname* %118, i32 0, i32 7
  %119 = load i8, i8* %xpadn_len86, align 8
  %conv87 = zext i8 %119 to i32
  %sub = sub nsw i32 %conv87, 1
  %conv88 = sext i32 %sub to i64
  %call89 = call i32 @S_perl_hash_one_at_a_time_hard(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.70, i64 0, i64 0), i8* %add.ptr85, i64 %conv88)
  store i32 %call89, i32* %hash, align 4
  %120 = load %struct.cv**, %struct.cv*** %spot, align 8
  %121 = load %struct.cv*, %struct.cv** %120, align 8
  %call90 = call %struct.hek* @CvNAME_HEK(%struct.cv* %121)
  %tobool91 = icmp ne %struct.hek* %call90, null
  br i1 %tobool91, label %cond.true92, label %cond.false94

cond.true92:                                      ; preds = %if.else83
  %122 = load %struct.cv**, %struct.cv*** %spot, align 8
  %123 = load %struct.cv*, %struct.cv** %122, align 8
  %sv_any93 = getelementptr inbounds %struct.cv, %struct.cv* %123, i32 0, i32 0
  %124 = load %struct.xpvcv*, %struct.xpvcv** %sv_any93, align 8
  %xcv_gv_u = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %124, i32 0, i32 7
  %xcv_hek = bitcast %union.anon.8* %xcv_gv_u to %struct.hek**
  %125 = load %struct.hek*, %struct.hek** %xcv_hek, align 8
  call void @Perl_unshare_hek(%struct.hek* %125)
  br label %cond.end95

cond.false94:                                     ; preds = %if.else83
  br label %cond.end95

cond.end95:                                       ; preds = %cond.false94, %cond.true92
  %126 = load %struct.padname*, %struct.padname** %name, align 8
  %xpadn_pv96 = getelementptr inbounds %struct.padname, %struct.padname* %126, i32 0, i32 0
  %127 = load i8*, i8** %xpadn_pv96, align 8
  %add.ptr97 = getelementptr inbounds i8, i8* %127, i64 1
  %128 = load %struct.padname*, %struct.padname** %name, align 8
  %xpadn_len98 = getelementptr inbounds %struct.padname, %struct.padname* %128, i32 0, i32 7
  %129 = load i8, i8* %xpadn_len98, align 8
  %conv99 = zext i8 %129 to i32
  %sub100 = sub nsw i32 %conv99, 1
  %mul = mul nsw i32 %sub100, -1
  %130 = load i32, i32* %hash, align 4
  %call101 = call %struct.hek* @Perl_share_hek(i8* %add.ptr97, i32 %mul, i32 %130)
  store %struct.hek* %call101, %struct.hek** %hek, align 8
  %131 = load %struct.cv**, %struct.cv*** %spot, align 8
  %132 = load %struct.cv*, %struct.cv** %131, align 8
  %sv_any102 = getelementptr inbounds %struct.cv, %struct.cv* %132, i32 0, i32 0
  %133 = load %struct.xpvcv*, %struct.xpvcv** %sv_any102, align 8
  %134 = bitcast %struct.xpvcv* %133 to i8*
  %135 = bitcast i8* %134 to %struct.xpvcv*
  %xcv_gv_u103 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %135, i32 0, i32 7
  %xcv_hek104 = bitcast %union.anon.8* %xcv_gv_u103 to %struct.hek**
  store %struct.hek* %call101, %struct.hek** %xcv_hek104, align 8
  %136 = load %struct.cv**, %struct.cv*** %spot, align 8
  %137 = load %struct.cv*, %struct.cv** %136, align 8
  %sv_any105 = getelementptr inbounds %struct.cv, %struct.cv* %137, i32 0, i32 0
  %138 = load %struct.xpvcv*, %struct.xpvcv** %sv_any105, align 8
  %139 = bitcast %struct.xpvcv* %138 to i8*
  %140 = bitcast i8* %139 to %struct.xpvcv*
  %xcv_flags106 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %140, i32 0, i32 12
  %141 = load i32, i32* %xcv_flags106, align 4
  %or = or i32 %141, 32768
  store i32 %or, i32* %xcv_flags106, align 4
  %142 = load %struct.cv**, %struct.cv*** %spot, align 8
  %143 = load %struct.cv*, %struct.cv** %142, align 8
  %sv_any107 = getelementptr inbounds %struct.cv, %struct.cv* %143, i32 0, i32 0
  %144 = load %struct.xpvcv*, %struct.xpvcv** %sv_any107, align 8
  %145 = bitcast %struct.xpvcv* %144 to i8*
  %146 = bitcast i8* %145 to %struct.xpvcv*
  %xcv_flags108 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %146, i32 0, i32 12
  %147 = load i32, i32* %xcv_flags108, align 4
  %or109 = or i32 %147, 65536
  store i32 %or109, i32* %xcv_flags108, align 4
  br label %if.end110

if.end110:                                        ; preds = %cond.end95, %if.then81
  %148 = load %struct.padname*, %struct.padname** %name, align 8
  %xpadn_type_u = getelementptr inbounds %struct.padname, %struct.padname* %148, i32 0, i32 2
  %xpadn_protocv = bitcast %union.anon.23* %xpadn_type_u to %struct.cv**
  %149 = load %struct.cv*, %struct.cv** %xpadn_protocv, align 8
  store %struct.cv* %149, %struct.cv** %cv, align 8
  %150 = load %struct.padname*, %struct.padname** %name, align 8
  %xpadn_type_u111 = getelementptr inbounds %struct.padname, %struct.padname* %150, i32 0, i32 2
  %xpadn_protocv112 = bitcast %union.anon.23* %xpadn_type_u111 to %struct.cv**
  store %struct.cv** %xpadn_protocv112, %struct.cv*** %spot, align 8
  %151 = bitcast %struct.cv** %xpadn_protocv112 to %struct.sv**
  store %struct.sv** %151, %struct.sv*** %svspot, align 8
  br label %if.end113

if.end113:                                        ; preds = %if.end110, %if.then75
  br label %if.end114

if.end114:                                        ; preds = %if.end113, %if.then67
  %152 = load %struct.op*, %struct.op** %block.addr, align 8
  %tobool115 = icmp ne %struct.op* %152, null
  br i1 %tobool115, label %if.then116, label %if.end160

if.then116:                                       ; preds = %if.end114
  %153 = load %struct.op*, %struct.op** %block.addr, align 8
  %op_type = getelementptr inbounds %struct.op, %struct.op* %153, i32 0, i32 4
  %bf.load117 = load i16, i16* %op_type, align 8
  %bf.clear118 = and i16 %bf.load117, 511
  %bf.cast = zext i16 %bf.clear118 to i32
  %cmp119 = icmp eq i32 %bf.cast, 1
  br i1 %cmp119, label %if.then121, label %if.end124

if.then121:                                       ; preds = %if.then116
  %154 = load %struct.yy_parser*, %struct.yy_parser** @PL_parser, align 8
  %copline = getelementptr inbounds %struct.yy_parser, %struct.yy_parser* %154, i32 0, i32 41
  %155 = load i32, i32* %copline, align 8
  store i32 %155, i32* %l, align 4
  %156 = load %struct.op*, %struct.op** %block.addr, align 8
  call void @Perl_op_free(%struct.op* %156)
  %call122 = call %struct.op* @Perl_newSTATEOP(i32 0, i8* null, %struct.op* null)
  store %struct.op* %call122, %struct.op** %block.addr, align 8
  %157 = load i32, i32* %l, align 4
  %158 = load %struct.yy_parser*, %struct.yy_parser** @PL_parser, align 8
  %copline123 = getelementptr inbounds %struct.yy_parser, %struct.yy_parser* %158, i32 0, i32 41
  store i32 %157, i32* %copline123, align 8
  br label %if.end124

if.end124:                                        ; preds = %if.then121, %if.then116
  %159 = load %struct.cv*, %struct.cv** %compcv, align 8
  %sv_any125 = getelementptr inbounds %struct.cv, %struct.cv* %159, i32 0, i32 0
  %160 = load %struct.xpvcv*, %struct.xpvcv** %sv_any125, align 8
  %161 = bitcast %struct.xpvcv* %160 to i8*
  %162 = bitcast i8* %161 to %struct.xpvcv*
  %xcv_flags126 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %162, i32 0, i32 12
  %163 = load i32, i32* %xcv_flags126, align 4
  %and127 = and i32 %163, 2
  %tobool128 = icmp ne i32 %and127, 0
  br i1 %tobool128, label %cond.true143, label %lor.lhs.false129

lor.lhs.false129:                                 ; preds = %if.end124
  %164 = load %struct.cv*, %struct.cv** %cv, align 8
  %tobool130 = icmp ne %struct.cv* %164, null
  br i1 %tobool130, label %land.lhs.true131, label %cond.false147

land.lhs.true131:                                 ; preds = %lor.lhs.false129
  %165 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any132 = getelementptr inbounds %struct.cv, %struct.cv* %165, i32 0, i32 0
  %166 = load %struct.xpvcv*, %struct.xpvcv** %sv_any132, align 8
  %167 = bitcast %struct.xpvcv* %166 to i8*
  %168 = bitcast i8* %167 to %struct.xpvcv*
  %xcv_flags133 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %168, i32 0, i32 12
  %169 = load i32, i32* %xcv_flags133, align 4
  %and134 = and i32 %169, 2
  %tobool135 = icmp ne i32 %and134, 0
  br i1 %tobool135, label %land.lhs.true136, label %cond.false147

land.lhs.true136:                                 ; preds = %land.lhs.true131
  %170 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any137 = getelementptr inbounds %struct.cv, %struct.cv* %170, i32 0, i32 0
  %171 = load %struct.xpvcv*, %struct.xpvcv** %sv_any137, align 8
  %172 = bitcast %struct.xpvcv* %171 to i8*
  %173 = bitcast i8* %172 to %struct.xpvcv*
  %xcv_root_u = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %173, i32 0, i32 6
  %xcv_root = bitcast %union.anon.7* %xcv_root_u to %struct.op**
  %174 = load %struct.op*, %struct.op** %xcv_root, align 8
  %tobool138 = icmp ne %struct.op* %174, null
  br i1 %tobool138, label %cond.false147, label %land.lhs.true139

land.lhs.true139:                                 ; preds = %land.lhs.true136
  %175 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any140 = getelementptr inbounds %struct.cv, %struct.cv* %175, i32 0, i32 0
  %176 = load %struct.xpvcv*, %struct.xpvcv** %sv_any140, align 8
  %177 = bitcast %struct.xpvcv* %176 to i8*
  %178 = bitcast i8* %177 to %struct.xpvcv*
  %xcv_root_u141 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %178, i32 0, i32 6
  %xcv_xsub = bitcast %union.anon.7* %xcv_root_u141 to void (%struct.cv*)**
  %179 = load void (%struct.cv*)*, void (%struct.cv*)** %xcv_xsub, align 8
  %tobool142 = icmp ne void (%struct.cv*)* %179, null
  br i1 %tobool142, label %cond.false147, label %cond.true143

cond.true143:                                     ; preds = %land.lhs.true139, %if.end124
  %180 = load %struct.op*, %struct.op** %block.addr, align 8
  %call144 = call %struct.op* @S_scalarseq(%struct.op* %180)
  %call145 = call %struct.op* @Perl_op_lvalue_flags(%struct.op* %call144, i32 187, i32 0)
  %call146 = call %struct.op* @Perl_newUNOP(i32 187, i32 0, %struct.op* %call145)
  br label %cond.end150

cond.false147:                                    ; preds = %land.lhs.true139, %land.lhs.true136, %land.lhs.true131, %lor.lhs.false129
  %181 = load %struct.op*, %struct.op** %block.addr, align 8
  %call148 = call %struct.op* @S_scalarseq(%struct.op* %181)
  %call149 = call %struct.op* @Perl_newUNOP(i32 186, i32 0, %struct.op* %call148)
  br label %cond.end150

cond.end150:                                      ; preds = %cond.false147, %cond.true143
  %cond151 = phi %struct.op* [ %call146, %cond.true143 ], [ %call149, %cond.false147 ]
  store %struct.op* %cond151, %struct.op** %block.addr, align 8
  %182 = load %struct.op*, %struct.op** %block.addr, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %182, i32 0, i32 0
  %183 = load %struct.op*, %struct.op** %op_next, align 8
  %tobool152 = icmp ne %struct.op* %183, null
  br i1 %tobool152, label %cond.true153, label %cond.false155

cond.true153:                                     ; preds = %cond.end150
  %184 = load %struct.op*, %struct.op** %block.addr, align 8
  %op_next154 = getelementptr inbounds %struct.op, %struct.op* %184, i32 0, i32 0
  %185 = load %struct.op*, %struct.op** %op_next154, align 8
  br label %cond.end157

cond.false155:                                    ; preds = %cond.end150
  %186 = load %struct.op*, %struct.op** %block.addr, align 8
  %call156 = call %struct.op* @Perl_op_linklist(%struct.op* %186)
  br label %cond.end157

cond.end157:                                      ; preds = %cond.false155, %cond.true153
  %cond158 = phi %struct.op* [ %185, %cond.true153 ], [ %call156, %cond.false155 ]
  store %struct.op* %cond158, %struct.op** %start, align 8
  %187 = load %struct.op*, %struct.op** %block.addr, align 8
  %op_next159 = getelementptr inbounds %struct.op, %struct.op* %187, i32 0, i32 0
  store %struct.op* null, %struct.op** %op_next159, align 8
  br label %if.end160

if.end160:                                        ; preds = %cond.end157, %if.end114
  %188 = load %struct.op*, %struct.op** %block.addr, align 8
  %tobool161 = icmp ne %struct.op* %188, null
  br i1 %tobool161, label %lor.lhs.false162, label %if.then174

lor.lhs.false162:                                 ; preds = %if.end160
  %189 = load i8*, i8** %ps, align 8
  %tobool163 = icmp ne i8* %189, null
  br i1 %tobool163, label %lor.lhs.false164, label %if.then174

lor.lhs.false164:                                 ; preds = %lor.lhs.false162
  %190 = load i8*, i8** %ps, align 8
  %191 = load i8, i8* %190, align 1
  %conv165 = sext i8 %191 to i32
  %tobool166 = icmp ne i32 %conv165, 0
  br i1 %tobool166, label %if.then174, label %lor.lhs.false167

lor.lhs.false167:                                 ; preds = %lor.lhs.false164
  %192 = load %struct.op*, %struct.op** %attrs.addr, align 8
  %tobool168 = icmp ne %struct.op* %192, null
  br i1 %tobool168, label %if.then174, label %lor.lhs.false169

lor.lhs.false169:                                 ; preds = %lor.lhs.false167
  %193 = load %struct.cv*, %struct.cv** %compcv, align 8
  %sv_any170 = getelementptr inbounds %struct.cv, %struct.cv* %193, i32 0, i32 0
  %194 = load %struct.xpvcv*, %struct.xpvcv** %sv_any170, align 8
  %195 = bitcast %struct.xpvcv* %194 to i8*
  %196 = bitcast i8* %195 to %struct.xpvcv*
  %xcv_flags171 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %196, i32 0, i32 12
  %197 = load i32, i32* %xcv_flags171, align 4
  %and172 = and i32 %197, 2
  %tobool173 = icmp ne i32 %and172, 0
  br i1 %tobool173, label %if.then174, label %if.else175

if.then174:                                       ; preds = %lor.lhs.false169, %lor.lhs.false167, %lor.lhs.false164, %lor.lhs.false162, %if.end160
  store %struct.sv* null, %struct.sv** %const_sv, align 8
  br label %if.end177

if.else175:                                       ; preds = %lor.lhs.false169
  %198 = load %struct.op*, %struct.op** %start, align 8
  %199 = load %struct.cv*, %struct.cv** %compcv, align 8
  %call176 = call %struct.sv* @S_op_const_sv(%struct.op* %198, %struct.cv* %199, i1 zeroext false)
  store %struct.sv* %call176, %struct.sv** %const_sv, align 8
  br label %if.end177

if.end177:                                        ; preds = %if.else175, %if.then174
  %200 = load %struct.cv*, %struct.cv** %cv, align 8
  %tobool178 = icmp ne %struct.cv* %200, null
  br i1 %tobool178, label %if.then179, label %if.end220

if.then179:                                       ; preds = %if.end177
  %201 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any180 = getelementptr inbounds %struct.cv, %struct.cv* %201, i32 0, i32 0
  %202 = load %struct.xpvcv*, %struct.xpvcv** %sv_any180, align 8
  %203 = bitcast %struct.xpvcv* %202 to i8*
  %204 = bitcast i8* %203 to %struct.xpvcv*
  %xcv_root_u181 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %204, i32 0, i32 6
  %xcv_root182 = bitcast %union.anon.7* %xcv_root_u181 to %struct.op**
  %205 = load %struct.op*, %struct.op** %xcv_root182, align 8
  %tobool183 = icmp ne %struct.op* %205, null
  br i1 %tobool183, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %if.then179
  %206 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any184 = getelementptr inbounds %struct.cv, %struct.cv* %206, i32 0, i32 0
  %207 = load %struct.xpvcv*, %struct.xpvcv** %sv_any184, align 8
  %208 = bitcast %struct.xpvcv* %207 to i8*
  %209 = bitcast i8* %208 to %struct.xpvcv*
  %xcv_root_u185 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %209, i32 0, i32 6
  %xcv_xsub186 = bitcast %union.anon.7* %xcv_root_u185 to void (%struct.cv*)**
  %210 = load void (%struct.cv*)*, void (%struct.cv*)** %xcv_xsub186, align 8
  %tobool187 = icmp ne void (%struct.cv*)* %210, null
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %if.then179
  %211 = phi i1 [ true, %if.then179 ], [ %tobool187, %lor.rhs ]
  %frombool = zext i1 %211 to i8
  store i8 %frombool, i8* %exists, align 1
  %212 = load i8, i8* %exists, align 1
  %tobool188 = trunc i8 %212 to i1
  br i1 %tobool188, label %if.then194, label %lor.lhs.false190

lor.lhs.false190:                                 ; preds = %lor.end
  %213 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_flags191 = getelementptr inbounds %struct.cv, %struct.cv* %213, i32 0, i32 2
  %214 = load i32, i32* %sv_flags191, align 4
  %and192 = and i32 %214, 1024
  %tobool193 = icmp ne i32 %and192, 0
  br i1 %tobool193, label %if.then194, label %if.end199

if.then194:                                       ; preds = %lor.lhs.false190, %lor.end
  %215 = load %struct.cv*, %struct.cv** %cv, align 8
  %216 = load %struct.padname*, %struct.padname** %name, align 8
  %xpadn_pv195 = getelementptr inbounds %struct.padname, %struct.padname* %216, i32 0, i32 0
  %217 = load i8*, i8** %xpadn_pv195, align 8
  %218 = load %struct.padname*, %struct.padname** %name, align 8
  %xpadn_len196 = getelementptr inbounds %struct.padname, %struct.padname* %218, i32 0, i32 7
  %219 = load i8, i8* %xpadn_len196, align 8
  %conv197 = zext i8 %219 to i64
  %call198 = call %struct.sv* @Perl_newSVpvn_flags(i8* %217, i64 %conv197, i32 537395200)
  %220 = bitcast %struct.sv* %call198 to %struct.gv*
  %221 = load i8*, i8** %ps, align 8
  %222 = load i64, i64* %ps_len, align 8
  %223 = load i32, i32* %ps_utf8, align 4
  call void @Perl_cv_ckproto_len_flags(%struct.cv* %215, %struct.gv* %220, i8* %221, i64 %222, i32 %223)
  br label %if.end199

if.end199:                                        ; preds = %if.then194, %lor.lhs.false190
  %224 = load i8, i8* %exists, align 1
  %tobool200 = trunc i8 %224 to i1
  br i1 %tobool200, label %if.then201, label %if.else209

if.then201:                                       ; preds = %if.end199
  %225 = load %struct.cv*, %struct.cv** %cv, align 8
  %226 = load %struct.op*, %struct.op** %block.addr, align 8
  %227 = load %struct.padname*, %struct.padname** %name, align 8
  %call202 = call zeroext i1 @S_already_defined(%struct.cv* %225, %struct.op* %226, %struct.op* null, %struct.padname* %227, %struct.sv** %const_sv)
  br i1 %call202, label %if.then203, label %if.else204

if.then203:                                       ; preds = %if.then201
  store %struct.cv* null, %struct.cv** %cv, align 8
  br label %if.end208

if.else204:                                       ; preds = %if.then201
  %228 = load %struct.op*, %struct.op** %attrs.addr, align 8
  %tobool205 = icmp ne %struct.op* %228, null
  br i1 %tobool205, label %if.then206, label %if.end207

if.then206:                                       ; preds = %if.else204
  br label %attrs482

if.end207:                                        ; preds = %if.else204
  %229 = load %struct.cv*, %struct.cv** %compcv, align 8
  %230 = bitcast %struct.cv* %229 to i8*
  %231 = bitcast i8* %230 to %struct.sv*
  %232 = bitcast %struct.sv* %231 to i8*
  call void @Perl_save_pushptr(i8* %232, i32 11)
  br label %done

if.end208:                                        ; preds = %if.then203
  br label %if.end219

if.else209:                                       ; preds = %if.end199
  %233 = load %struct.cv*, %struct.cv** %outcv, align 8
  %call210 = call i32* @S_CvDEPTHp(%struct.cv* %233)
  %234 = load i32, i32* %call210, align 4
  %tobool211 = icmp ne i32 %234, 0
  br i1 %tobool211, label %land.lhs.true212, label %if.end218

land.lhs.true212:                                 ; preds = %if.else209
  %235 = load %struct.cv*, %struct.cv** %compcv, align 8
  %sv_any213 = getelementptr inbounds %struct.cv, %struct.cv* %235, i32 0, i32 0
  %236 = load %struct.xpvcv*, %struct.xpvcv** %sv_any213, align 8
  %237 = bitcast %struct.xpvcv* %236 to i8*
  %238 = bitcast i8* %237 to %struct.xpvcv*
  %xcv_flags214 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %238, i32 0, i32 12
  %239 = load i32, i32* %xcv_flags214, align 4
  %and215 = and i32 %239, 32
  %tobool216 = icmp ne i32 %and215, 0
  br i1 %tobool216, label %if.then217, label %if.end218

if.then217:                                       ; preds = %land.lhs.true212
  store %struct.cv* null, %struct.cv** %cv, align 8
  store i8 1, i8* %reusable, align 1
  br label %if.end218

if.end218:                                        ; preds = %if.then217, %land.lhs.true212, %if.else209
  br label %if.end219

if.end219:                                        ; preds = %if.end218, %if.end208
  br label %if.end220

if.end220:                                        ; preds = %if.end219, %if.end177
  %240 = load %struct.sv*, %struct.sv** %const_sv, align 8
  %tobool221 = icmp ne %struct.sv* %240, null
  br i1 %tobool221, label %if.then222, label %if.end258

if.then222:                                       ; preds = %if.end220
  %241 = load %struct.sv*, %struct.sv** %const_sv, align 8
  %242 = bitcast %struct.sv* %241 to i8*
  %243 = bitcast i8* %242 to %struct.sv*
  %sv_refcnt = getelementptr inbounds %struct.sv, %struct.sv* %243, i32 0, i32 1
  %244 = load i32, i32* %sv_refcnt, align 8
  %inc = add i32 %244, 1
  store i32 %inc, i32* %sv_refcnt, align 8
  %245 = load %struct.sv*, %struct.sv** %const_sv, align 8
  %sv_flags223 = getelementptr inbounds %struct.sv, %struct.sv* %245, i32 0, i32 2
  %246 = load i32, i32* %sv_flags223, align 4
  %or224 = or i32 %246, 131072
  store i32 %or224, i32* %sv_flags223, align 4
  %247 = load %struct.cv*, %struct.cv** %cv, align 8
  %tobool225 = icmp ne %struct.cv* %247, null
  br i1 %tobool225, label %if.then226, label %if.else227

if.then226:                                       ; preds = %if.then222
  %248 = load %struct.cv*, %struct.cv** %cv, align 8
  call void @Perl_cv_forget_slab(%struct.cv* %248)
  br label %if.end241

if.else227:                                       ; preds = %if.then222
  %call228 = call %struct.sv* @Perl_newSV_type(i32 13)
  %249 = bitcast %struct.sv* %call228 to i8*
  %250 = bitcast i8* %249 to %struct.cv*
  store %struct.cv* %250, %struct.cv** %cv, align 8
  %251 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_filegv = getelementptr inbounds %struct.cop, %struct.cop* %251, i32 0, i32 9
  %252 = load %struct.gv*, %struct.gv** %cop_filegv, align 8
  %tobool229 = icmp ne %struct.gv* %252, null
  br i1 %tobool229, label %cond.true230, label %cond.false234

cond.true230:                                     ; preds = %if.else227
  %253 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_filegv231 = getelementptr inbounds %struct.cop, %struct.cop* %253, i32 0, i32 9
  %254 = load %struct.gv*, %struct.gv** %cop_filegv231, align 8
  %sv_any232 = getelementptr inbounds %struct.gv, %struct.gv* %254, i32 0, i32 0
  %255 = load %struct.xpvgv*, %struct.xpvgv** %sv_any232, align 8
  %xiv_u = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %255, i32 0, i32 4
  %xivu_namehek = bitcast %union._xivu* %xiv_u to %struct.hek**
  %256 = load %struct.hek*, %struct.hek** %xivu_namehek, align 8
  %hek_key = getelementptr inbounds %struct.hek, %struct.hek* %256, i32 0, i32 2
  %arraydecay = getelementptr inbounds [1 x i8], [1 x i8]* %hek_key, i64 0, i64 0
  %add.ptr233 = getelementptr inbounds i8, i8* %arraydecay, i64 2
  br label %cond.end235

cond.false234:                                    ; preds = %if.else227
  br label %cond.end235

cond.end235:                                      ; preds = %cond.false234, %cond.true230
  %cond236 = phi i8* [ %add.ptr233, %cond.true230 ], [ null, %cond.false234 ]
  %257 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any237 = getelementptr inbounds %struct.cv, %struct.cv* %257, i32 0, i32 0
  %258 = load %struct.xpvcv*, %struct.xpvcv** %sv_any237, align 8
  %259 = bitcast %struct.xpvcv* %258 to i8*
  %260 = bitcast i8* %259 to %struct.xpvcv*
  %xcv_file = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %260, i32 0, i32 8
  store i8* %cond236, i8** %xcv_file, align 8
  %261 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any238 = getelementptr inbounds %struct.cv, %struct.cv* %261, i32 0, i32 0
  %262 = load %struct.xpvcv*, %struct.xpvcv** %sv_any238, align 8
  %263 = bitcast %struct.xpvcv* %262 to i8*
  %264 = bitcast i8* %263 to %struct.xpvcv*
  %xcv_flags239 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %264, i32 0, i32 12
  %265 = load i32, i32* %xcv_flags239, align 4
  %and240 = and i32 %265, -4097
  store i32 %and240, i32* %xcv_flags239, align 4
  %266 = load %struct.cv*, %struct.cv** %cv, align 8
  %267 = load %struct.hv*, %struct.hv** @PL_curstash, align 8
  call void @Perl_cvstash_set(%struct.cv* %266, %struct.hv* %267)
  %268 = load %struct.cv*, %struct.cv** %cv, align 8
  %269 = load %struct.cv**, %struct.cv*** %spot, align 8
  store %struct.cv* %268, %struct.cv** %269, align 8
  br label %if.end241

if.end241:                                        ; preds = %cond.end235, %if.then226
  %270 = load %struct.cv*, %struct.cv** %cv, align 8
  %271 = bitcast %struct.cv* %270 to i8*
  %272 = bitcast i8* %271 to %struct.sv*
  call void @Perl_sv_setpvn(%struct.sv* %272, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.17, i64 0, i64 0), i64 0)
  %273 = load %struct.sv*, %struct.sv** %const_sv, align 8
  %274 = bitcast %struct.sv* %273 to i8*
  %275 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any242 = getelementptr inbounds %struct.cv, %struct.cv* %275, i32 0, i32 0
  %276 = load %struct.xpvcv*, %struct.xpvcv** %sv_any242, align 8
  %277 = bitcast %struct.xpvcv* %276 to i8*
  %278 = bitcast i8* %277 to %struct.xpvcv*
  %xcv_start_u = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %278, i32 0, i32 5
  %xcv_xsubany = bitcast %union.anon.6* %xcv_start_u to %union.any*
  %any_ptr = bitcast %union.any* %xcv_xsubany to i8**
  store i8* %274, i8** %any_ptr, align 8
  %279 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any243 = getelementptr inbounds %struct.cv, %struct.cv* %279, i32 0, i32 0
  %280 = load %struct.xpvcv*, %struct.xpvcv** %sv_any243, align 8
  %281 = bitcast %struct.xpvcv* %280 to i8*
  %282 = bitcast i8* %281 to %struct.xpvcv*
  %xcv_root_u244 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %282, i32 0, i32 6
  %xcv_xsub245 = bitcast %union.anon.7* %xcv_root_u244 to void (%struct.cv*)**
  store void (%struct.cv*)* @const_sv_xsub, void (%struct.cv*)** %xcv_xsub245, align 8
  %283 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any246 = getelementptr inbounds %struct.cv, %struct.cv* %283, i32 0, i32 0
  %284 = load %struct.xpvcv*, %struct.xpvcv** %sv_any246, align 8
  %285 = bitcast %struct.xpvcv* %284 to i8*
  %286 = bitcast i8* %285 to %struct.xpvcv*
  %xcv_flags247 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %286, i32 0, i32 12
  %287 = load i32, i32* %xcv_flags247, align 4
  %or248 = or i32 %287, 4
  store i32 %or248, i32* %xcv_flags247, align 4
  %288 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any249 = getelementptr inbounds %struct.cv, %struct.cv* %288, i32 0, i32 0
  %289 = load %struct.xpvcv*, %struct.xpvcv** %sv_any249, align 8
  %290 = bitcast %struct.xpvcv* %289 to i8*
  %291 = bitcast i8* %290 to %struct.xpvcv*
  %xcv_flags250 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %291, i32 0, i32 12
  %292 = load i32, i32* %xcv_flags250, align 4
  %or251 = or i32 %292, 8
  store i32 %or251, i32* %xcv_flags250, align 4
  %293 = load %struct.cv*, %struct.cv** %compcv, align 8
  %sv_any252 = getelementptr inbounds %struct.cv, %struct.cv* %293, i32 0, i32 0
  %294 = load %struct.xpvcv*, %struct.xpvcv** %sv_any252, align 8
  %295 = bitcast %struct.xpvcv* %294 to i8*
  %296 = bitcast i8* %295 to %struct.xpvcv*
  %xcv_flags253 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %296, i32 0, i32 12
  %297 = load i32, i32* %xcv_flags253, align 4
  %and254 = and i32 %297, 1
  %298 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any255 = getelementptr inbounds %struct.cv, %struct.cv* %298, i32 0, i32 0
  %299 = load %struct.xpvcv*, %struct.xpvcv** %sv_any255, align 8
  %300 = bitcast %struct.xpvcv* %299 to i8*
  %301 = bitcast i8* %300 to %struct.xpvcv*
  %xcv_flags256 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %301, i32 0, i32 12
  %302 = load i32, i32* %xcv_flags256, align 4
  %or257 = or i32 %302, %and254
  store i32 %or257, i32* %xcv_flags256, align 4
  %303 = load %struct.op*, %struct.op** %block.addr, align 8
  call void @Perl_op_free(%struct.op* %303)
  %304 = load %struct.cv*, %struct.cv** %compcv, align 8
  %305 = bitcast %struct.cv* %304 to i8*
  %306 = bitcast i8* %305 to %struct.sv*
  call void @S_SvREFCNT_dec(%struct.sv* %306)
  store %struct.cv* null, %struct.cv** @PL_compcv, align 8
  br label %setname

if.end258:                                        ; preds = %if.end220
  %307 = load %struct.cv*, %struct.cv** %outcv, align 8
  %308 = load %struct.cv*, %struct.cv** %compcv, align 8
  %sv_any259 = getelementptr inbounds %struct.cv, %struct.cv* %308, i32 0, i32 0
  %309 = load %struct.xpvcv*, %struct.xpvcv** %sv_any259, align 8
  %310 = bitcast %struct.xpvcv* %309 to i8*
  %311 = bitcast i8* %310 to %struct.xpvcv*
  %xcv_outside260 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %311, i32 0, i32 10
  %312 = load %struct.cv*, %struct.cv** %xcv_outside260, align 8
  %cmp261 = icmp eq %struct.cv* %307, %312
  br i1 %cmp261, label %land.lhs.true263, label %if.end274

land.lhs.true263:                                 ; preds = %if.end258
  %313 = load %struct.padname*, %struct.padname** %name, align 8
  %xpadn_flags264 = getelementptr inbounds %struct.padname, %struct.padname* %313, i32 0, i32 8
  %314 = load i8, i8* %xpadn_flags264, align 1
  %conv265 = zext i8 %314 to i32
  %and266 = and i32 %conv265, 1
  %tobool267 = icmp ne i32 %and266, 0
  br i1 %tobool267, label %if.end274, label %if.then268

if.then268:                                       ; preds = %land.lhs.true263
  %315 = load %struct.cv*, %struct.cv** %compcv, align 8
  %sv_any269 = getelementptr inbounds %struct.cv, %struct.cv* %315, i32 0, i32 0
  %316 = load %struct.xpvcv*, %struct.xpvcv** %sv_any269, align 8
  %317 = bitcast %struct.xpvcv* %316 to i8*
  %318 = bitcast i8* %317 to %struct.xpvcv*
  %xcv_outside270 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %318, i32 0, i32 10
  %319 = load %struct.cv*, %struct.cv** %xcv_outside270, align 8
  %320 = bitcast %struct.cv* %319 to i8*
  %321 = bitcast i8* %320 to %struct.sv*
  call void @S_SvREFCNT_dec(%struct.sv* %321)
  %322 = load %struct.cv*, %struct.cv** %compcv, align 8
  %sv_any271 = getelementptr inbounds %struct.cv, %struct.cv* %322, i32 0, i32 0
  %323 = load %struct.xpvcv*, %struct.xpvcv** %sv_any271, align 8
  %324 = bitcast %struct.xpvcv* %323 to i8*
  %325 = bitcast i8* %324 to %struct.xpvcv*
  %xcv_flags272 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %325, i32 0, i32 12
  %326 = load i32, i32* %xcv_flags272, align 4
  %or273 = or i32 %326, 16
  store i32 %or273, i32* %xcv_flags272, align 4
  br label %if.end274

if.end274:                                        ; preds = %if.then268, %land.lhs.true263, %if.end258
  %327 = load %struct.cv*, %struct.cv** %cv, align 8
  %tobool275 = icmp ne %struct.cv* %327, null
  br i1 %tobool275, label %if.then276, label %if.else360

if.then276:                                       ; preds = %if.end274
  %328 = load %struct.op*, %struct.op** %block.addr, align 8
  %tobool277 = icmp ne %struct.op* %328, null
  br i1 %tobool277, label %if.then278, label %if.else352

if.then278:                                       ; preds = %if.then276
  %329 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any279 = getelementptr inbounds %struct.cv, %struct.cv* %329, i32 0, i32 0
  %330 = load %struct.xpvcv*, %struct.xpvcv** %sv_any279, align 8
  %331 = bitcast %struct.xpvcv* %330 to i8*
  %332 = bitcast i8* %331 to %struct.xpvcv*
  %xcv_flags280 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %332, i32 0, i32 12
  %333 = load i32, i32* %xcv_flags280, align 4
  %and281 = and i32 %333, 163843
  store i32 %and281, i32* %preserved_flags, align 4
  %334 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any282 = getelementptr inbounds %struct.cv, %struct.cv* %334, i32 0, i32 0
  %335 = load %struct.xpvcv*, %struct.xpvcv** %sv_any282, align 8
  %336 = bitcast %struct.xpvcv* %335 to i8*
  %337 = bitcast i8* %336 to %struct.xpvcv*
  %xcv_padlist_u283 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %337, i32 0, i32 9
  %xcv_padlist284 = bitcast %union.anon.9* %xcv_padlist_u283 to %struct.padlist**
  %338 = load %struct.padlist*, %struct.padlist** %xcv_padlist284, align 8
  store %struct.padlist* %338, %struct.padlist** %temp_padl, align 8
  %339 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any285 = getelementptr inbounds %struct.cv, %struct.cv* %339, i32 0, i32 0
  %340 = load %struct.xpvcv*, %struct.xpvcv** %sv_any285, align 8
  %341 = bitcast %struct.xpvcv* %340 to i8*
  %342 = bitcast i8* %341 to %struct.xpvcv*
  %xcv_outside286 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %342, i32 0, i32 10
  %343 = load %struct.cv*, %struct.cv** %xcv_outside286, align 8
  store %struct.cv* %343, %struct.cv** %temp_cv, align 8
  %344 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any287 = getelementptr inbounds %struct.cv, %struct.cv* %344, i32 0, i32 0
  %345 = load %struct.xpvcv*, %struct.xpvcv** %sv_any287, align 8
  %346 = bitcast %struct.xpvcv* %345 to i8*
  %347 = bitcast i8* %346 to %struct.xpvcv*
  %xcv_flags288 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %347, i32 0, i32 12
  %348 = load i32, i32* %xcv_flags288, align 4
  %and289 = and i32 %348, 2064
  store i32 %and289, i32* %other_flags, align 4
  %349 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any290 = getelementptr inbounds %struct.cv, %struct.cv* %349, i32 0, i32 0
  %350 = load %struct.xpvcv*, %struct.xpvcv** %sv_any290, align 8
  %351 = bitcast %struct.xpvcv* %350 to i8*
  %352 = bitcast i8* %351 to %struct.xpvcv*
  %xcv_start_u291 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %352, i32 0, i32 5
  %xcv_start = bitcast %union.anon.6* %xcv_start_u291 to %struct.op**
  %353 = load %struct.op*, %struct.op** %xcv_start, align 8
  store %struct.op* %353, %struct.op** %cvstart, align 8
  %354 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_flags292 = getelementptr inbounds %struct.cv, %struct.cv* %354, i32 0, i32 2
  %355 = load i32, i32* %sv_flags292, align 4
  %and293 = and i32 %355, -17409
  store i32 %and293, i32* %sv_flags292, align 4
  %356 = load %struct.cv*, %struct.cv** %compcv, align 8
  %sv_any294 = getelementptr inbounds %struct.cv, %struct.cv* %356, i32 0, i32 0
  %357 = load %struct.xpvcv*, %struct.xpvcv** %sv_any294, align 8
  %358 = bitcast %struct.xpvcv* %357 to i8*
  %359 = bitcast i8* %358 to %struct.xpvcv*
  %xcv_flags295 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %359, i32 0, i32 12
  %360 = load i32, i32* %xcv_flags295, align 4
  %361 = load i32, i32* %preserved_flags, align 4
  %or296 = or i32 %360, %361
  %362 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any297 = getelementptr inbounds %struct.cv, %struct.cv* %362, i32 0, i32 0
  %363 = load %struct.xpvcv*, %struct.xpvcv** %sv_any297, align 8
  %364 = bitcast %struct.xpvcv* %363 to i8*
  %365 = bitcast i8* %364 to %struct.xpvcv*
  %xcv_flags298 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %365, i32 0, i32 12
  store i32 %or296, i32* %xcv_flags298, align 4
  %366 = load %struct.cv*, %struct.cv** %compcv, align 8
  %sv_any299 = getelementptr inbounds %struct.cv, %struct.cv* %366, i32 0, i32 0
  %367 = load %struct.xpvcv*, %struct.xpvcv** %sv_any299, align 8
  %368 = bitcast %struct.xpvcv* %367 to i8*
  %369 = bitcast i8* %368 to %struct.xpvcv*
  %xcv_outside300 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %369, i32 0, i32 10
  %370 = load %struct.cv*, %struct.cv** %xcv_outside300, align 8
  %371 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any301 = getelementptr inbounds %struct.cv, %struct.cv* %371, i32 0, i32 0
  %372 = load %struct.xpvcv*, %struct.xpvcv** %sv_any301, align 8
  %373 = bitcast %struct.xpvcv* %372 to i8*
  %374 = bitcast i8* %373 to %struct.xpvcv*
  %xcv_outside302 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %374, i32 0, i32 10
  store %struct.cv* %370, %struct.cv** %xcv_outside302, align 8
  %375 = load %struct.cv*, %struct.cv** %compcv, align 8
  %sv_any303 = getelementptr inbounds %struct.cv, %struct.cv* %375, i32 0, i32 0
  %376 = load %struct.xpvcv*, %struct.xpvcv** %sv_any303, align 8
  %377 = bitcast %struct.xpvcv* %376 to i8*
  %378 = bitcast i8* %377 to %struct.xpvcv*
  %xcv_outside_seq = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %378, i32 0, i32 11
  %379 = load i32, i32* %xcv_outside_seq, align 8
  %380 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any304 = getelementptr inbounds %struct.cv, %struct.cv* %380, i32 0, i32 0
  %381 = load %struct.xpvcv*, %struct.xpvcv** %sv_any304, align 8
  %382 = bitcast %struct.xpvcv* %381 to i8*
  %383 = bitcast i8* %382 to %struct.xpvcv*
  %xcv_outside_seq305 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %383, i32 0, i32 11
  store i32 %379, i32* %xcv_outside_seq305, align 8
  %384 = load %struct.cv*, %struct.cv** %compcv, align 8
  %sv_any306 = getelementptr inbounds %struct.cv, %struct.cv* %384, i32 0, i32 0
  %385 = load %struct.xpvcv*, %struct.xpvcv** %sv_any306, align 8
  %386 = bitcast %struct.xpvcv* %385 to i8*
  %387 = bitcast i8* %386 to %struct.xpvcv*
  %xcv_padlist_u307 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %387, i32 0, i32 9
  %xcv_padlist308 = bitcast %union.anon.9* %xcv_padlist_u307 to %struct.padlist**
  %388 = load %struct.padlist*, %struct.padlist** %xcv_padlist308, align 8
  %389 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any309 = getelementptr inbounds %struct.cv, %struct.cv* %389, i32 0, i32 0
  %390 = load %struct.xpvcv*, %struct.xpvcv** %sv_any309, align 8
  %391 = bitcast %struct.xpvcv* %390 to i8*
  %392 = bitcast i8* %391 to %struct.xpvcv*
  %xcv_padlist_u310 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %392, i32 0, i32 9
  %xcv_padlist311 = bitcast %union.anon.9* %xcv_padlist_u310 to %struct.padlist**
  store %struct.padlist* %388, %struct.padlist** %xcv_padlist311, align 8
  %393 = load %struct.cv*, %struct.cv** %temp_cv, align 8
  %394 = load %struct.cv*, %struct.cv** %compcv, align 8
  %sv_any312 = getelementptr inbounds %struct.cv, %struct.cv* %394, i32 0, i32 0
  %395 = load %struct.xpvcv*, %struct.xpvcv** %sv_any312, align 8
  %396 = bitcast %struct.xpvcv* %395 to i8*
  %397 = bitcast i8* %396 to %struct.xpvcv*
  %xcv_outside313 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %397, i32 0, i32 10
  store %struct.cv* %393, %struct.cv** %xcv_outside313, align 8
  %398 = load %struct.padlist*, %struct.padlist** %temp_padl, align 8
  %399 = load %struct.cv*, %struct.cv** %compcv, align 8
  %sv_any314 = getelementptr inbounds %struct.cv, %struct.cv* %399, i32 0, i32 0
  %400 = load %struct.xpvcv*, %struct.xpvcv** %sv_any314, align 8
  %401 = bitcast %struct.xpvcv* %400 to i8*
  %402 = bitcast i8* %401 to %struct.xpvcv*
  %xcv_padlist_u315 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %402, i32 0, i32 9
  %xcv_padlist316 = bitcast %union.anon.9* %xcv_padlist_u315 to %struct.padlist**
  store %struct.padlist* %398, %struct.padlist** %xcv_padlist316, align 8
  %403 = load %struct.cv*, %struct.cv** %compcv, align 8
  %sv_any317 = getelementptr inbounds %struct.cv, %struct.cv* %403, i32 0, i32 0
  %404 = load %struct.xpvcv*, %struct.xpvcv** %sv_any317, align 8
  %405 = bitcast %struct.xpvcv* %404 to i8*
  %406 = bitcast i8* %405 to %struct.xpvcv*
  %xcv_start_u318 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %406, i32 0, i32 5
  %xcv_start319 = bitcast %union.anon.6* %xcv_start_u318 to %struct.op**
  %407 = load %struct.op*, %struct.op** %xcv_start319, align 8
  %408 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any320 = getelementptr inbounds %struct.cv, %struct.cv* %408, i32 0, i32 0
  %409 = load %struct.xpvcv*, %struct.xpvcv** %sv_any320, align 8
  %410 = bitcast %struct.xpvcv* %409 to i8*
  %411 = bitcast i8* %410 to %struct.xpvcv*
  %xcv_start_u321 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %411, i32 0, i32 5
  %xcv_start322 = bitcast %union.anon.6* %xcv_start_u321 to %struct.op**
  store %struct.op* %407, %struct.op** %xcv_start322, align 8
  %412 = load %struct.op*, %struct.op** %cvstart, align 8
  %413 = load %struct.cv*, %struct.cv** %compcv, align 8
  %sv_any323 = getelementptr inbounds %struct.cv, %struct.cv* %413, i32 0, i32 0
  %414 = load %struct.xpvcv*, %struct.xpvcv** %sv_any323, align 8
  %415 = bitcast %struct.xpvcv* %414 to i8*
  %416 = bitcast i8* %415 to %struct.xpvcv*
  %xcv_start_u324 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %416, i32 0, i32 5
  %xcv_start325 = bitcast %union.anon.6* %xcv_start_u324 to %struct.op**
  store %struct.op* %412, %struct.op** %xcv_start325, align 8
  %417 = load %struct.cv*, %struct.cv** %compcv, align 8
  %sv_any326 = getelementptr inbounds %struct.cv, %struct.cv* %417, i32 0, i32 0
  %418 = load %struct.xpvcv*, %struct.xpvcv** %sv_any326, align 8
  %419 = bitcast %struct.xpvcv* %418 to i8*
  %420 = bitcast i8* %419 to %struct.xpvcv*
  %xcv_flags327 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %420, i32 0, i32 12
  %421 = load i32, i32* %xcv_flags327, align 4
  %and328 = and i32 %421, -2065
  store i32 %and328, i32* %xcv_flags327, align 4
  %422 = load i32, i32* %other_flags, align 4
  %423 = load %struct.cv*, %struct.cv** %compcv, align 8
  %sv_any329 = getelementptr inbounds %struct.cv, %struct.cv* %423, i32 0, i32 0
  %424 = load %struct.xpvcv*, %struct.xpvcv** %sv_any329, align 8
  %425 = bitcast %struct.xpvcv* %424 to i8*
  %426 = bitcast i8* %425 to %struct.xpvcv*
  %xcv_flags330 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %426, i32 0, i32 12
  %427 = load i32, i32* %xcv_flags330, align 4
  %or331 = or i32 %427, %422
  store i32 %or331, i32* %xcv_flags330, align 4
  %428 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any332 = getelementptr inbounds %struct.cv, %struct.cv* %428, i32 0, i32 0
  %429 = load %struct.xpvcv*, %struct.xpvcv** %sv_any332, align 8
  %430 = bitcast %struct.xpvcv* %429 to i8*
  %431 = bitcast i8* %430 to %struct.xpvcv*
  %xcv_file333 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %431, i32 0, i32 8
  %432 = load i8*, i8** %xcv_file333, align 8
  %tobool334 = icmp ne i8* %432, null
  br i1 %tobool334, label %land.lhs.true335, label %if.end343

land.lhs.true335:                                 ; preds = %if.then278
  %433 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any336 = getelementptr inbounds %struct.cv, %struct.cv* %433, i32 0, i32 0
  %434 = load %struct.xpvcv*, %struct.xpvcv** %sv_any336, align 8
  %435 = bitcast %struct.xpvcv* %434 to i8*
  %436 = bitcast i8* %435 to %struct.xpvcv*
  %xcv_flags337 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %436, i32 0, i32 12
  %437 = load i32, i32* %xcv_flags337, align 4
  %and338 = and i32 %437, 4096
  %tobool339 = icmp ne i32 %and338, 0
  br i1 %tobool339, label %if.then340, label %if.end343

if.then340:                                       ; preds = %land.lhs.true335
  %438 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any341 = getelementptr inbounds %struct.cv, %struct.cv* %438, i32 0, i32 0
  %439 = load %struct.xpvcv*, %struct.xpvcv** %sv_any341, align 8
  %440 = bitcast %struct.xpvcv* %439 to i8*
  %441 = bitcast i8* %440 to %struct.xpvcv*
  %xcv_file342 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %441, i32 0, i32 8
  %442 = load i8*, i8** %xcv_file342, align 8
  call void @Perl_safesysfree(i8* %442)
  br label %if.end343

if.end343:                                        ; preds = %if.then340, %land.lhs.true335, %if.then278
  %443 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any344 = getelementptr inbounds %struct.cv, %struct.cv* %443, i32 0, i32 0
  %444 = load %struct.xpvcv*, %struct.xpvcv** %sv_any344, align 8
  %445 = bitcast %struct.xpvcv* %444 to i8*
  %446 = bitcast i8* %445 to %struct.xpvcv*
  %xcv_padlist_u345 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %446, i32 0, i32 9
  %xcv_padlist346 = bitcast %union.anon.9* %xcv_padlist_u345 to %struct.padlist**
  %447 = load %struct.padlist*, %struct.padlist** %xcv_padlist346, align 8
  %448 = load %struct.cv*, %struct.cv** %compcv, align 8
  %449 = load %struct.cv*, %struct.cv** %cv, align 8
  call void @Perl_pad_fixup_inner_anons(%struct.padlist* %447, %struct.cv* %448, %struct.cv* %449)
  %450 = load i32, i32* @PL_perldb, align 4
  %and347 = and i32 %450, 8
  %tobool348 = icmp ne i32 %and347, 0
  br i1 %tobool348, label %if.then349, label %if.end351

if.then349:                                       ; preds = %if.end343
  %451 = load i32, i32* @PL_sub_generation, align 4
  %inc350 = add i32 %451, 1
  store i32 %inc350, i32* @PL_sub_generation, align 4
  br label %if.end351

if.end351:                                        ; preds = %if.then349, %if.end343
  br label %if.end359

if.else352:                                       ; preds = %if.then276
  %452 = load %struct.cv*, %struct.cv** %compcv, align 8
  %sv_any353 = getelementptr inbounds %struct.cv, %struct.cv* %452, i32 0, i32 0
  %453 = load %struct.xpvcv*, %struct.xpvcv** %sv_any353, align 8
  %454 = bitcast %struct.xpvcv* %453 to i8*
  %455 = bitcast i8* %454 to %struct.xpvcv*
  %xcv_flags354 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %455, i32 0, i32 12
  %456 = load i32, i32* %xcv_flags354, align 4
  %and355 = and i32 %456, 131075
  %457 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any356 = getelementptr inbounds %struct.cv, %struct.cv* %457, i32 0, i32 0
  %458 = load %struct.xpvcv*, %struct.xpvcv** %sv_any356, align 8
  %459 = bitcast %struct.xpvcv* %458 to i8*
  %460 = bitcast i8* %459 to %struct.xpvcv*
  %xcv_flags357 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %460, i32 0, i32 12
  %461 = load i32, i32* %xcv_flags357, align 4
  %or358 = or i32 %461, %and355
  store i32 %or358, i32* %xcv_flags357, align 4
  br label %if.end359

if.end359:                                        ; preds = %if.else352, %if.end351
  %462 = load %struct.cv*, %struct.cv** %compcv, align 8
  %463 = bitcast %struct.cv* %462 to i8*
  %464 = bitcast i8* %463 to %struct.sv*
  call void @S_SvREFCNT_dec(%struct.sv* %464)
  %465 = load %struct.cv*, %struct.cv** %cv, align 8
  store %struct.cv* %465, %struct.cv** %compcv, align 8
  store %struct.cv* %465, %struct.cv** @PL_compcv, align 8
  br label %if.end361

if.else360:                                       ; preds = %if.end274
  %466 = load %struct.cv*, %struct.cv** %compcv, align 8
  store %struct.cv* %466, %struct.cv** %cv, align 8
  %467 = load %struct.cv*, %struct.cv** %cv, align 8
  %468 = load %struct.cv**, %struct.cv*** %spot, align 8
  store %struct.cv* %467, %struct.cv** %468, align 8
  br label %if.end361

if.end361:                                        ; preds = %if.else360, %if.end359
  br label %setname

setname:                                          ; preds = %if.end361, %if.end241
  %469 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any362 = getelementptr inbounds %struct.cv, %struct.cv* %469, i32 0, i32 0
  %470 = load %struct.xpvcv*, %struct.xpvcv** %sv_any362, align 8
  %471 = bitcast %struct.xpvcv* %470 to i8*
  %472 = bitcast i8* %471 to %struct.xpvcv*
  %xcv_flags363 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %472, i32 0, i32 12
  %473 = load i32, i32* %xcv_flags363, align 4
  %or364 = or i32 %473, 65536
  store i32 %or364, i32* %xcv_flags363, align 4
  %474 = load %struct.cv*, %struct.cv** %cv, align 8
  %call365 = call %struct.hek* @CvNAME_HEK(%struct.cv* %474)
  %tobool366 = icmp ne %struct.hek* %call365, null
  br i1 %tobool366, label %if.end403, label %if.then367

if.then367:                                       ; preds = %setname
  %475 = load %struct.hek*, %struct.hek** %hek, align 8
  %tobool368 = icmp ne %struct.hek* %475, null
  br i1 %tobool368, label %if.then369, label %if.else372

if.then369:                                       ; preds = %if.then367
  %476 = load %struct.hek*, %struct.hek** %hek, align 8
  %477 = bitcast %struct.hek* %476 to i8*
  %add.ptr370 = getelementptr inbounds i8, i8* %477, i64 sub (i64 0, i64 ptrtoint (%struct.hek* getelementptr inbounds (%struct.shared_he, %struct.shared_he* null, i32 0, i32 1) to i64))
  %478 = bitcast i8* %add.ptr370 to %struct.shared_he*
  %shared_he_he = getelementptr inbounds %struct.shared_he, %struct.shared_he* %478, i32 0, i32 0
  %he_valu = getelementptr inbounds %struct.he, %struct.he* %shared_he_he, i32 0, i32 2
  %hent_refcount = bitcast %union.anon.0* %he_valu to i64*
  %479 = load i64, i64* %hent_refcount, align 8
  %inc371 = add i64 %479, 1
  store i64 %inc371, i64* %hent_refcount, align 8
  %480 = load %struct.hek*, %struct.hek** %hek, align 8
  br label %if.end388

if.else372:                                       ; preds = %if.then367
  %481 = load %struct.padname*, %struct.padname** %name, align 8
  %xpadn_pv374 = getelementptr inbounds %struct.padname, %struct.padname* %481, i32 0, i32 0
  %482 = load i8*, i8** %xpadn_pv374, align 8
  %add.ptr375 = getelementptr inbounds i8, i8* %482, i64 1
  %483 = load %struct.padname*, %struct.padname** %name, align 8
  %xpadn_len376 = getelementptr inbounds %struct.padname, %struct.padname* %483, i32 0, i32 7
  %484 = load i8, i8* %xpadn_len376, align 8
  %conv377 = zext i8 %484 to i32
  %sub378 = sub nsw i32 %conv377, 1
  %conv379 = sext i32 %sub378 to i64
  %call380 = call i32 @S_perl_hash_one_at_a_time_hard(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.70, i64 0, i64 0), i8* %add.ptr375, i64 %conv379)
  store i32 %call380, i32* %hash373, align 4
  %485 = load %struct.padname*, %struct.padname** %name, align 8
  %xpadn_pv381 = getelementptr inbounds %struct.padname, %struct.padname* %485, i32 0, i32 0
  %486 = load i8*, i8** %xpadn_pv381, align 8
  %add.ptr382 = getelementptr inbounds i8, i8* %486, i64 1
  %487 = load %struct.padname*, %struct.padname** %name, align 8
  %xpadn_len383 = getelementptr inbounds %struct.padname, %struct.padname* %487, i32 0, i32 7
  %488 = load i8, i8* %xpadn_len383, align 8
  %conv384 = zext i8 %488 to i32
  %sub385 = sub nsw i32 %conv384, 1
  %mul386 = mul nsw i32 %sub385, -1
  %489 = load i32, i32* %hash373, align 4
  %call387 = call %struct.hek* @Perl_share_hek(i8* %add.ptr382, i32 %mul386, i32 %489)
  store %struct.hek* %call387, %struct.hek** %hek, align 8
  br label %if.end388

if.end388:                                        ; preds = %if.else372, %if.then369
  %490 = load %struct.cv*, %struct.cv** %cv, align 8
  %call389 = call %struct.hek* @CvNAME_HEK(%struct.cv* %490)
  %tobool390 = icmp ne %struct.hek* %call389, null
  br i1 %tobool390, label %cond.true391, label %cond.false395

cond.true391:                                     ; preds = %if.end388
  %491 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any392 = getelementptr inbounds %struct.cv, %struct.cv* %491, i32 0, i32 0
  %492 = load %struct.xpvcv*, %struct.xpvcv** %sv_any392, align 8
  %xcv_gv_u393 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %492, i32 0, i32 7
  %xcv_hek394 = bitcast %union.anon.8* %xcv_gv_u393 to %struct.hek**
  %493 = load %struct.hek*, %struct.hek** %xcv_hek394, align 8
  call void @Perl_unshare_hek(%struct.hek* %493)
  br label %cond.end396

cond.false395:                                    ; preds = %if.end388
  br label %cond.end396

cond.end396:                                      ; preds = %cond.false395, %cond.true391
  %494 = load %struct.hek*, %struct.hek** %hek, align 8
  %495 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any397 = getelementptr inbounds %struct.cv, %struct.cv* %495, i32 0, i32 0
  %496 = load %struct.xpvcv*, %struct.xpvcv** %sv_any397, align 8
  %497 = bitcast %struct.xpvcv* %496 to i8*
  %498 = bitcast i8* %497 to %struct.xpvcv*
  %xcv_gv_u398 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %498, i32 0, i32 7
  %xcv_hek399 = bitcast %union.anon.8* %xcv_gv_u398 to %struct.hek**
  store %struct.hek* %494, %struct.hek** %xcv_hek399, align 8
  %499 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any400 = getelementptr inbounds %struct.cv, %struct.cv* %499, i32 0, i32 0
  %500 = load %struct.xpvcv*, %struct.xpvcv** %sv_any400, align 8
  %501 = bitcast %struct.xpvcv* %500 to i8*
  %502 = bitcast i8* %501 to %struct.xpvcv*
  %xcv_flags401 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %502, i32 0, i32 12
  %503 = load i32, i32* %xcv_flags401, align 4
  %or402 = or i32 %503, 32768
  store i32 %or402, i32* %xcv_flags401, align 4
  br label %if.end403

if.end403:                                        ; preds = %cond.end396, %setname
  %504 = load %struct.sv*, %struct.sv** %const_sv, align 8
  %tobool404 = icmp ne %struct.sv* %504, null
  br i1 %tobool404, label %if.then405, label %if.end406

if.then405:                                       ; preds = %if.end403
  br label %clone

if.end406:                                        ; preds = %if.end403
  %505 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_filegv407 = getelementptr inbounds %struct.cop, %struct.cop* %505, i32 0, i32 9
  %506 = load %struct.gv*, %struct.gv** %cop_filegv407, align 8
  %tobool408 = icmp ne %struct.gv* %506, null
  br i1 %tobool408, label %cond.true409, label %cond.false417

cond.true409:                                     ; preds = %if.end406
  %507 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_filegv410 = getelementptr inbounds %struct.cop, %struct.cop* %507, i32 0, i32 9
  %508 = load %struct.gv*, %struct.gv** %cop_filegv410, align 8
  %sv_any411 = getelementptr inbounds %struct.gv, %struct.gv* %508, i32 0, i32 0
  %509 = load %struct.xpvgv*, %struct.xpvgv** %sv_any411, align 8
  %xiv_u412 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %509, i32 0, i32 4
  %xivu_namehek413 = bitcast %union._xivu* %xiv_u412 to %struct.hek**
  %510 = load %struct.hek*, %struct.hek** %xivu_namehek413, align 8
  %hek_key414 = getelementptr inbounds %struct.hek, %struct.hek* %510, i32 0, i32 2
  %arraydecay415 = getelementptr inbounds [1 x i8], [1 x i8]* %hek_key414, i64 0, i64 0
  %add.ptr416 = getelementptr inbounds i8, i8* %arraydecay415, i64 2
  br label %cond.end418

cond.false417:                                    ; preds = %if.end406
  br label %cond.end418

cond.end418:                                      ; preds = %cond.false417, %cond.true409
  %cond419 = phi i8* [ %add.ptr416, %cond.true409 ], [ null, %cond.false417 ]
  %511 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any420 = getelementptr inbounds %struct.cv, %struct.cv* %511, i32 0, i32 0
  %512 = load %struct.xpvcv*, %struct.xpvcv** %sv_any420, align 8
  %513 = bitcast %struct.xpvcv* %512 to i8*
  %514 = bitcast i8* %513 to %struct.xpvcv*
  %xcv_file421 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %514, i32 0, i32 8
  store i8* %cond419, i8** %xcv_file421, align 8
  %515 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any422 = getelementptr inbounds %struct.cv, %struct.cv* %515, i32 0, i32 0
  %516 = load %struct.xpvcv*, %struct.xpvcv** %sv_any422, align 8
  %517 = bitcast %struct.xpvcv* %516 to i8*
  %518 = bitcast i8* %517 to %struct.xpvcv*
  %xcv_flags423 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %518, i32 0, i32 12
  %519 = load i32, i32* %xcv_flags423, align 4
  %and424 = and i32 %519, -4097
  store i32 %and424, i32* %xcv_flags423, align 4
  %520 = load %struct.cv*, %struct.cv** %cv, align 8
  %521 = load %struct.hv*, %struct.hv** @PL_curstash, align 8
  call void @Perl_cvstash_set(%struct.cv* %520, %struct.hv* %521)
  %522 = load i8*, i8** %ps, align 8
  %tobool425 = icmp ne i8* %522, null
  br i1 %tobool425, label %if.then426, label %if.end432

if.then426:                                       ; preds = %cond.end418
  %523 = load %struct.cv*, %struct.cv** %cv, align 8
  %524 = bitcast %struct.cv* %523 to i8*
  %525 = bitcast i8* %524 to %struct.sv*
  %526 = load i8*, i8** %ps, align 8
  %527 = load i64, i64* %ps_len, align 8
  call void @Perl_sv_setpvn(%struct.sv* %525, i8* %526, i64 %527)
  %528 = load i32, i32* %ps_utf8, align 4
  %tobool427 = icmp ne i32 %528, 0
  br i1 %tobool427, label %if.then428, label %if.end431

if.then428:                                       ; preds = %if.then426
  %529 = load %struct.cv*, %struct.cv** %cv, align 8
  %530 = bitcast %struct.cv* %529 to i8*
  %531 = bitcast i8* %530 to %struct.sv*
  %sv_flags429 = getelementptr inbounds %struct.sv, %struct.sv* %531, i32 0, i32 2
  %532 = load i32, i32* %sv_flags429, align 4
  %or430 = or i32 %532, 536870912
  store i32 %or430, i32* %sv_flags429, align 4
  br label %if.end431

if.end431:                                        ; preds = %if.then428, %if.then426
  br label %if.end432

if.end432:                                        ; preds = %if.end431, %cond.end418
  %533 = load %struct.op*, %struct.op** %block.addr, align 8
  %tobool433 = icmp ne %struct.op* %533, null
  br i1 %tobool433, label %if.end435, label %if.then434

if.then434:                                       ; preds = %if.end432
  br label %attrs482

if.end435:                                        ; preds = %if.end432
  %534 = load i32, i32* @PL_breakable_sub_gen, align 4
  %inc436 = add i32 %534, 1
  store i32 %inc436, i32* @PL_breakable_sub_gen, align 4
  %535 = load %struct.op*, %struct.op** %block.addr, align 8
  %536 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any437 = getelementptr inbounds %struct.cv, %struct.cv* %536, i32 0, i32 0
  %537 = load %struct.xpvcv*, %struct.xpvcv** %sv_any437, align 8
  %538 = bitcast %struct.xpvcv* %537 to i8*
  %539 = bitcast i8* %538 to %struct.xpvcv*
  %xcv_root_u438 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %539, i32 0, i32 6
  %xcv_root439 = bitcast %union.anon.7* %xcv_root_u438 to %struct.op**
  store %struct.op* %535, %struct.op** %xcv_root439, align 8
  %540 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any440 = getelementptr inbounds %struct.cv, %struct.cv* %540, i32 0, i32 0
  %541 = load %struct.xpvcv*, %struct.xpvcv** %sv_any440, align 8
  %542 = bitcast %struct.xpvcv* %541 to i8*
  %543 = bitcast i8* %542 to %struct.xpvcv*
  %xcv_root_u441 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %543, i32 0, i32 6
  %xcv_root442 = bitcast %union.anon.7* %xcv_root_u441 to %struct.op**
  %544 = load %struct.op*, %struct.op** %xcv_root442, align 8
  %op_private = getelementptr inbounds %struct.op, %struct.op* %544, i32 0, i32 6
  %545 = load i8, i8* %op_private, align 1
  %conv443 = zext i8 %545 to i32
  %or444 = or i32 %conv443, 64
  %conv445 = trunc i32 %or444 to i8
  store i8 %conv445, i8* %op_private, align 1
  %546 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any446 = getelementptr inbounds %struct.cv, %struct.cv* %546, i32 0, i32 0
  %547 = load %struct.xpvcv*, %struct.xpvcv** %sv_any446, align 8
  %548 = bitcast %struct.xpvcv* %547 to i8*
  %549 = bitcast i8* %548 to %struct.xpvcv*
  %xcv_root_u447 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %549, i32 0, i32 6
  %xcv_root448 = bitcast %union.anon.7* %xcv_root_u447 to %struct.op**
  %550 = load %struct.op*, %struct.op** %xcv_root448, align 8
  %op_targ449 = getelementptr inbounds %struct.op, %struct.op* %550, i32 0, i32 3
  store i64 1, i64* %op_targ449, align 8
  %551 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any450 = getelementptr inbounds %struct.cv, %struct.cv* %551, i32 0, i32 0
  %552 = load %struct.xpvcv*, %struct.xpvcv** %sv_any450, align 8
  %553 = bitcast %struct.xpvcv* %552 to i8*
  %554 = bitcast i8* %553 to %struct.xpvcv*
  %xcv_flags451 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %554, i32 0, i32 12
  %555 = load i32, i32* %xcv_flags451, align 4
  %and452 = and i32 %555, -2049
  store i32 %and452, i32* %xcv_flags451, align 4
  %556 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any453 = getelementptr inbounds %struct.cv, %struct.cv* %556, i32 0, i32 0
  %557 = load %struct.xpvcv*, %struct.xpvcv** %sv_any453, align 8
  %558 = bitcast %struct.xpvcv* %557 to i8*
  %559 = bitcast i8* %558 to %struct.xpvcv*
  %xcv_start_u454 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %559, i32 0, i32 5
  %xcv_start455 = bitcast %union.anon.6* %xcv_start_u454 to %struct.op**
  %560 = load %struct.op*, %struct.op** %xcv_start455, align 8
  %561 = bitcast %struct.op* %560 to %struct.opslab*
  %opslab_refcnt = getelementptr inbounds %struct.opslab, %struct.opslab* %561, i32 0, i32 3
  %562 = load i64, i64* %opslab_refcnt, align 8
  %cmp456 = icmp eq i64 %562, 1
  br i1 %cmp456, label %cond.true458, label %cond.false462

cond.true458:                                     ; preds = %if.end435
  %563 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any459 = getelementptr inbounds %struct.cv, %struct.cv* %563, i32 0, i32 0
  %564 = load %struct.xpvcv*, %struct.xpvcv** %sv_any459, align 8
  %565 = bitcast %struct.xpvcv* %564 to i8*
  %566 = bitcast i8* %565 to %struct.xpvcv*
  %xcv_start_u460 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %566, i32 0, i32 5
  %xcv_start461 = bitcast %union.anon.6* %xcv_start_u460 to %struct.op**
  %567 = load %struct.op*, %struct.op** %xcv_start461, align 8
  %568 = bitcast %struct.op* %567 to %struct.opslab*
  call void @Perl_opslab_free(%struct.opslab* %568)
  br label %cond.end467

cond.false462:                                    ; preds = %if.end435
  %569 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any463 = getelementptr inbounds %struct.cv, %struct.cv* %569, i32 0, i32 0
  %570 = load %struct.xpvcv*, %struct.xpvcv** %sv_any463, align 8
  %571 = bitcast %struct.xpvcv* %570 to i8*
  %572 = bitcast i8* %571 to %struct.xpvcv*
  %xcv_start_u464 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %572, i32 0, i32 5
  %xcv_start465 = bitcast %union.anon.6* %xcv_start_u464 to %struct.op**
  %573 = load %struct.op*, %struct.op** %xcv_start465, align 8
  %574 = bitcast %struct.op* %573 to %struct.opslab*
  %opslab_refcnt466 = getelementptr inbounds %struct.opslab, %struct.opslab* %574, i32 0, i32 3
  %575 = load i64, i64* %opslab_refcnt466, align 8
  %dec = add i64 %575, -1
  store i64 %dec, i64* %opslab_refcnt466, align 8
  br label %cond.end467

cond.end467:                                      ; preds = %cond.false462, %cond.true458
  %576 = load %struct.op*, %struct.op** %start, align 8
  %577 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any468 = getelementptr inbounds %struct.cv, %struct.cv* %577, i32 0, i32 0
  %578 = load %struct.xpvcv*, %struct.xpvcv** %sv_any468, align 8
  %579 = bitcast %struct.xpvcv* %578 to i8*
  %580 = bitcast i8* %579 to %struct.xpvcv*
  %xcv_start_u469 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %580, i32 0, i32 5
  %xcv_start470 = bitcast %union.anon.6* %xcv_start_u469 to %struct.op**
  store %struct.op* %576, %struct.op** %xcv_start470, align 8
  %581 = load void (%struct.op*)*, void (%struct.op*)** @PL_peepp, align 8
  %582 = load %struct.op*, %struct.op** %start, align 8
  call void %581(%struct.op* %582)
  %583 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any471 = getelementptr inbounds %struct.cv, %struct.cv* %583, i32 0, i32 0
  %584 = load %struct.xpvcv*, %struct.xpvcv** %sv_any471, align 8
  %585 = bitcast %struct.xpvcv* %584 to i8*
  %586 = bitcast i8* %585 to %struct.xpvcv*
  %xcv_root_u472 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %586, i32 0, i32 6
  %xcv_root473 = bitcast %union.anon.7* %xcv_root_u472 to %struct.op**
  %587 = load %struct.op*, %struct.op** %xcv_root473, align 8
  call void @Perl_finalize_optree(%struct.op* %587)
  %588 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any474 = getelementptr inbounds %struct.cv, %struct.cv* %588, i32 0, i32 0
  %589 = load %struct.xpvcv*, %struct.xpvcv** %sv_any474, align 8
  %590 = bitcast %struct.xpvcv* %589 to i8*
  %591 = bitcast i8* %590 to %struct.xpvcv*
  %xcv_start_u475 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %591, i32 0, i32 5
  %xcv_start476 = bitcast %union.anon.6* %xcv_start_u475 to %struct.op**
  call void @S_prune_chain_head(%struct.op** %xcv_start476)
  %592 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any477 = getelementptr inbounds %struct.cv, %struct.cv* %592, i32 0, i32 0
  %593 = load %struct.xpvcv*, %struct.xpvcv** %sv_any477, align 8
  %594 = bitcast %struct.xpvcv* %593 to i8*
  %595 = bitcast i8* %594 to %struct.xpvcv*
  %xcv_flags478 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %595, i32 0, i32 12
  %596 = load i32, i32* %xcv_flags478, align 4
  %and479 = and i32 %596, 32
  %tobool480 = icmp ne i32 %and479, 0
  %597 = zext i1 %tobool480 to i64
  %cond481 = select i1 %tobool480, i32 1, i32 0
  call void @Perl_pad_tidy(i32 %cond481)
  br label %attrs482

attrs482:                                         ; preds = %cond.end467, %if.then434, %if.then206
  %598 = load %struct.op*, %struct.op** %attrs.addr, align 8
  %tobool483 = icmp ne %struct.op* %598, null
  br i1 %tobool483, label %if.then484, label %if.end485

if.then484:                                       ; preds = %attrs482
  %599 = load %struct.hv*, %struct.hv** @PL_curstash, align 8
  %600 = load %struct.cv*, %struct.cv** %cv, align 8
  %601 = bitcast %struct.cv* %600 to i8*
  %602 = bitcast i8* %601 to %struct.sv*
  %603 = load %struct.op*, %struct.op** %attrs.addr, align 8
  call void @S_apply_attrs(%struct.hv* %599, %struct.sv* %602, %struct.op* %603)
  br label %if.end485

if.end485:                                        ; preds = %if.then484, %attrs482
  %604 = load %struct.op*, %struct.op** %block.addr, align 8
  %tobool486 = icmp ne %struct.op* %604, null
  br i1 %tobool486, label %if.then487, label %if.end702

if.then487:                                       ; preds = %if.end485
  %605 = load i32, i32* @PL_perldb, align 4
  %and488 = and i32 %605, 16
  %tobool489 = icmp ne i32 %and488, 0
  br i1 %tobool489, label %land.lhs.true490, label %if.end701

land.lhs.true490:                                 ; preds = %if.then487
  %606 = load %struct.hv*, %struct.hv** @PL_curstash, align 8
  %607 = load %struct.hv*, %struct.hv** @PL_debstash, align 8
  %cmp491 = icmp ne %struct.hv* %606, %607
  br i1 %cmp491, label %if.then493, label %if.end701

if.then493:                                       ; preds = %land.lhs.true490
  %call494 = call %struct.sv* @Perl_sv_newmortal()
  store %struct.sv* %call494, %struct.sv** %tmpstr, align 8
  %call495 = call %struct.gv* @Perl_gv_fetchpvn_flags(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.43, i64 0, i64 0), i64 13, i32 2, i32 12)
  store %struct.gv* %call495, %struct.gv** %db_postponed, align 8
  %608 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_filegv496 = getelementptr inbounds %struct.cop, %struct.cop* %608, i32 0, i32 9
  %609 = load %struct.gv*, %struct.gv** %cop_filegv496, align 8
  %tobool497 = icmp ne %struct.gv* %609, null
  br i1 %tobool497, label %cond.true498, label %cond.false506

cond.true498:                                     ; preds = %if.then493
  %610 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_filegv499 = getelementptr inbounds %struct.cop, %struct.cop* %610, i32 0, i32 9
  %611 = load %struct.gv*, %struct.gv** %cop_filegv499, align 8
  %sv_any500 = getelementptr inbounds %struct.gv, %struct.gv* %611, i32 0, i32 0
  %612 = load %struct.xpvgv*, %struct.xpvgv** %sv_any500, align 8
  %xiv_u501 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %612, i32 0, i32 4
  %xivu_namehek502 = bitcast %union._xivu* %xiv_u501 to %struct.hek**
  %613 = load %struct.hek*, %struct.hek** %xivu_namehek502, align 8
  %hek_key503 = getelementptr inbounds %struct.hek, %struct.hek* %613, i32 0, i32 2
  %arraydecay504 = getelementptr inbounds [1 x i8], [1 x i8]* %hek_key503, i64 0, i64 0
  %add.ptr505 = getelementptr inbounds i8, i8* %arraydecay504, i64 2
  br label %cond.end507

cond.false506:                                    ; preds = %if.then493
  br label %cond.end507

cond.end507:                                      ; preds = %cond.false506, %cond.true498
  %cond508 = phi i8* [ %add.ptr505, %cond.true498 ], [ null, %cond.false506 ]
  %614 = load i32, i32* @PL_subline, align 4
  %conv509 = sext i32 %614 to i64
  %615 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_line = getelementptr inbounds %struct.cop, %struct.cop* %615, i32 0, i32 7
  %616 = load i32, i32* %cop_line, align 4
  %conv510 = zext i32 %616 to i64
  %call511 = call %struct.sv* (i8*, ...) @Perl_newSVpvf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.71, i64 0, i64 0), i8* %cond508, i64 %conv509, i64 %conv510)
  store %struct.sv* %call511, %struct.sv** %sv, align 8
  %617 = load %struct.hv*, %struct.hv** @PL_curstash, align 8
  %sv_flags512 = getelementptr inbounds %struct.hv, %struct.hv* %617, i32 0, i32 2
  %618 = load i32, i32* %sv_flags512, align 4
  %and513 = and i32 %618, 33554432
  %tobool514 = icmp ne i32 %and513, 0
  br i1 %tobool514, label %land.lhs.true515, label %cond.false547

land.lhs.true515:                                 ; preds = %cond.end507
  %619 = load %struct.hv*, %struct.hv** @PL_curstash, align 8
  %sv_u516 = getelementptr inbounds %struct.hv, %struct.hv* %619, i32 0, i32 3
  %svu_hash = bitcast %union.anon.4* %sv_u516 to %struct.he***
  %620 = load %struct.he**, %struct.he*** %svu_hash, align 8
  %621 = load %struct.hv*, %struct.hv** @PL_curstash, align 8
  %sv_any517 = getelementptr inbounds %struct.hv, %struct.hv* %621, i32 0, i32 0
  %622 = load %struct.xpvhv*, %struct.xpvhv** %sv_any517, align 8
  %xhv_max = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %622, i32 0, i32 3
  %623 = load i64, i64* %xhv_max, align 8
  %add = add i64 %623, 1
  %arrayidx518 = getelementptr inbounds %struct.he*, %struct.he** %620, i64 %add
  %624 = bitcast %struct.he** %arrayidx518 to %struct.xpvhv_aux*
  %xhv_name_u = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %624, i32 0, i32 0
  %xhvnameu_name = bitcast %union._xhvnameu* %xhv_name_u to %struct.hek**
  %625 = load %struct.hek*, %struct.hek** %xhvnameu_name, align 8
  %tobool519 = icmp ne %struct.hek* %625, null
  br i1 %tobool519, label %cond.true520, label %cond.false547

cond.true520:                                     ; preds = %land.lhs.true515
  %626 = load %struct.hv*, %struct.hv** @PL_curstash, align 8
  %sv_u521 = getelementptr inbounds %struct.hv, %struct.hv* %626, i32 0, i32 3
  %svu_hash522 = bitcast %union.anon.4* %sv_u521 to %struct.he***
  %627 = load %struct.he**, %struct.he*** %svu_hash522, align 8
  %628 = load %struct.hv*, %struct.hv** @PL_curstash, align 8
  %sv_any523 = getelementptr inbounds %struct.hv, %struct.hv* %628, i32 0, i32 0
  %629 = load %struct.xpvhv*, %struct.xpvhv** %sv_any523, align 8
  %xhv_max524 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %629, i32 0, i32 3
  %630 = load i64, i64* %xhv_max524, align 8
  %add525 = add i64 %630, 1
  %arrayidx526 = getelementptr inbounds %struct.he*, %struct.he** %627, i64 %add525
  %631 = bitcast %struct.he** %arrayidx526 to %struct.xpvhv_aux*
  %xhv_name_count = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %631, i32 0, i32 4
  %632 = load i32, i32* %xhv_name_count, align 4
  %tobool527 = icmp ne i32 %632, 0
  br i1 %tobool527, label %cond.true528, label %cond.false537

cond.true528:                                     ; preds = %cond.true520
  %633 = load %struct.hv*, %struct.hv** @PL_curstash, align 8
  %sv_u529 = getelementptr inbounds %struct.hv, %struct.hv* %633, i32 0, i32 3
  %svu_hash530 = bitcast %union.anon.4* %sv_u529 to %struct.he***
  %634 = load %struct.he**, %struct.he*** %svu_hash530, align 8
  %635 = load %struct.hv*, %struct.hv** @PL_curstash, align 8
  %sv_any531 = getelementptr inbounds %struct.hv, %struct.hv* %635, i32 0, i32 0
  %636 = load %struct.xpvhv*, %struct.xpvhv** %sv_any531, align 8
  %xhv_max532 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %636, i32 0, i32 3
  %637 = load i64, i64* %xhv_max532, align 8
  %add533 = add i64 %637, 1
  %arrayidx534 = getelementptr inbounds %struct.he*, %struct.he** %634, i64 %add533
  %638 = bitcast %struct.he** %arrayidx534 to %struct.xpvhv_aux*
  %xhv_name_u535 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %638, i32 0, i32 0
  %xhvnameu_names = bitcast %union._xhvnameu* %xhv_name_u535 to %struct.hek***
  %639 = load %struct.hek**, %struct.hek*** %xhvnameu_names, align 8
  %640 = load %struct.hek*, %struct.hek** %639, align 8
  %tobool536 = icmp ne %struct.hek* %640, null
  br i1 %tobool536, label %if.then548, label %if.else594

cond.false537:                                    ; preds = %cond.true520
  %641 = load %struct.hv*, %struct.hv** @PL_curstash, align 8
  %sv_u538 = getelementptr inbounds %struct.hv, %struct.hv* %641, i32 0, i32 3
  %svu_hash539 = bitcast %union.anon.4* %sv_u538 to %struct.he***
  %642 = load %struct.he**, %struct.he*** %svu_hash539, align 8
  %643 = load %struct.hv*, %struct.hv** @PL_curstash, align 8
  %sv_any540 = getelementptr inbounds %struct.hv, %struct.hv* %643, i32 0, i32 0
  %644 = load %struct.xpvhv*, %struct.xpvhv** %sv_any540, align 8
  %xhv_max541 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %644, i32 0, i32 3
  %645 = load i64, i64* %xhv_max541, align 8
  %add542 = add i64 %645, 1
  %arrayidx543 = getelementptr inbounds %struct.he*, %struct.he** %642, i64 %add542
  %646 = bitcast %struct.he** %arrayidx543 to %struct.xpvhv_aux*
  %xhv_name_u544 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %646, i32 0, i32 0
  %xhvnameu_name545 = bitcast %union._xhvnameu* %xhv_name_u544 to %struct.hek**
  %647 = load %struct.hek*, %struct.hek** %xhvnameu_name545, align 8
  %tobool546 = icmp ne %struct.hek* %647, null
  br i1 %tobool546, label %if.then548, label %if.else594

cond.false547:                                    ; preds = %land.lhs.true515, %cond.end507
  br i1 false, label %if.then548, label %if.else594

if.then548:                                       ; preds = %cond.false547, %cond.false537, %cond.true528
  %648 = load %struct.sv*, %struct.sv** %tmpstr, align 8
  %649 = load %struct.hv*, %struct.hv** @PL_curstash, align 8
  %sv_flags549 = getelementptr inbounds %struct.hv, %struct.hv* %649, i32 0, i32 2
  %650 = load i32, i32* %sv_flags549, align 4
  %and550 = and i32 %650, 33554432
  %tobool551 = icmp ne i32 %and550, 0
  br i1 %tobool551, label %land.lhs.true552, label %cond.false591

land.lhs.true552:                                 ; preds = %if.then548
  %651 = load %struct.hv*, %struct.hv** @PL_curstash, align 8
  %sv_u553 = getelementptr inbounds %struct.hv, %struct.hv* %651, i32 0, i32 3
  %svu_hash554 = bitcast %union.anon.4* %sv_u553 to %struct.he***
  %652 = load %struct.he**, %struct.he*** %svu_hash554, align 8
  %653 = load %struct.hv*, %struct.hv** @PL_curstash, align 8
  %sv_any555 = getelementptr inbounds %struct.hv, %struct.hv* %653, i32 0, i32 0
  %654 = load %struct.xpvhv*, %struct.xpvhv** %sv_any555, align 8
  %xhv_max556 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %654, i32 0, i32 3
  %655 = load i64, i64* %xhv_max556, align 8
  %add557 = add i64 %655, 1
  %arrayidx558 = getelementptr inbounds %struct.he*, %struct.he** %652, i64 %add557
  %656 = bitcast %struct.he** %arrayidx558 to %struct.xpvhv_aux*
  %xhv_name_u559 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %656, i32 0, i32 0
  %xhvnameu_name560 = bitcast %union._xhvnameu* %xhv_name_u559 to %struct.hek**
  %657 = load %struct.hek*, %struct.hek** %xhvnameu_name560, align 8
  %tobool561 = icmp ne %struct.hek* %657, null
  br i1 %tobool561, label %cond.true562, label %cond.false591

cond.true562:                                     ; preds = %land.lhs.true552
  %658 = load %struct.hv*, %struct.hv** @PL_curstash, align 8
  %sv_u563 = getelementptr inbounds %struct.hv, %struct.hv* %658, i32 0, i32 3
  %svu_hash564 = bitcast %union.anon.4* %sv_u563 to %struct.he***
  %659 = load %struct.he**, %struct.he*** %svu_hash564, align 8
  %660 = load %struct.hv*, %struct.hv** @PL_curstash, align 8
  %sv_any565 = getelementptr inbounds %struct.hv, %struct.hv* %660, i32 0, i32 0
  %661 = load %struct.xpvhv*, %struct.xpvhv** %sv_any565, align 8
  %xhv_max566 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %661, i32 0, i32 3
  %662 = load i64, i64* %xhv_max566, align 8
  %add567 = add i64 %662, 1
  %arrayidx568 = getelementptr inbounds %struct.he*, %struct.he** %659, i64 %add567
  %663 = bitcast %struct.he** %arrayidx568 to %struct.xpvhv_aux*
  %xhv_name_count569 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %663, i32 0, i32 4
  %664 = load i32, i32* %xhv_name_count569, align 4
  %tobool570 = icmp ne i32 %664, 0
  br i1 %tobool570, label %cond.true571, label %cond.false580

cond.true571:                                     ; preds = %cond.true562
  %665 = load %struct.hv*, %struct.hv** @PL_curstash, align 8
  %sv_u572 = getelementptr inbounds %struct.hv, %struct.hv* %665, i32 0, i32 3
  %svu_hash573 = bitcast %union.anon.4* %sv_u572 to %struct.he***
  %666 = load %struct.he**, %struct.he*** %svu_hash573, align 8
  %667 = load %struct.hv*, %struct.hv** @PL_curstash, align 8
  %sv_any574 = getelementptr inbounds %struct.hv, %struct.hv* %667, i32 0, i32 0
  %668 = load %struct.xpvhv*, %struct.xpvhv** %sv_any574, align 8
  %xhv_max575 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %668, i32 0, i32 3
  %669 = load i64, i64* %xhv_max575, align 8
  %add576 = add i64 %669, 1
  %arrayidx577 = getelementptr inbounds %struct.he*, %struct.he** %666, i64 %add576
  %670 = bitcast %struct.he** %arrayidx577 to %struct.xpvhv_aux*
  %xhv_name_u578 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %670, i32 0, i32 0
  %xhvnameu_names579 = bitcast %union._xhvnameu* %xhv_name_u578 to %struct.hek***
  %671 = load %struct.hek**, %struct.hek*** %xhvnameu_names579, align 8
  %672 = load %struct.hek*, %struct.hek** %671, align 8
  br label %cond.end589

cond.false580:                                    ; preds = %cond.true562
  %673 = load %struct.hv*, %struct.hv** @PL_curstash, align 8
  %sv_u581 = getelementptr inbounds %struct.hv, %struct.hv* %673, i32 0, i32 3
  %svu_hash582 = bitcast %union.anon.4* %sv_u581 to %struct.he***
  %674 = load %struct.he**, %struct.he*** %svu_hash582, align 8
  %675 = load %struct.hv*, %struct.hv** @PL_curstash, align 8
  %sv_any583 = getelementptr inbounds %struct.hv, %struct.hv* %675, i32 0, i32 0
  %676 = load %struct.xpvhv*, %struct.xpvhv** %sv_any583, align 8
  %xhv_max584 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %676, i32 0, i32 3
  %677 = load i64, i64* %xhv_max584, align 8
  %add585 = add i64 %677, 1
  %arrayidx586 = getelementptr inbounds %struct.he*, %struct.he** %674, i64 %add585
  %678 = bitcast %struct.he** %arrayidx586 to %struct.xpvhv_aux*
  %xhv_name_u587 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %678, i32 0, i32 0
  %xhvnameu_name588 = bitcast %union._xhvnameu* %xhv_name_u587 to %struct.hek**
  %679 = load %struct.hek*, %struct.hek** %xhvnameu_name588, align 8
  br label %cond.end589

cond.end589:                                      ; preds = %cond.false580, %cond.true571
  %cond590 = phi %struct.hek* [ %672, %cond.true571 ], [ %679, %cond.false580 ]
  br label %cond.end592

cond.false591:                                    ; preds = %land.lhs.true552, %if.then548
  br label %cond.end592

cond.end592:                                      ; preds = %cond.false591, %cond.end589
  %cond593 = phi %struct.hek* [ %cond590, %cond.end589 ], [ null, %cond.false591 ]
  call void @Perl_sv_sethek(%struct.sv* %648, %struct.hek* %cond593)
  %680 = load %struct.sv*, %struct.sv** %tmpstr, align 8
  call void @Perl_sv_catpvn_flags(%struct.sv* %680, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.61, i64 0, i64 0), i64 2, i32 2)
  br label %if.end595

if.else594:                                       ; preds = %cond.false547, %cond.false537, %cond.true528
  %681 = load %struct.sv*, %struct.sv** %tmpstr, align 8
  call void @Perl_sv_setpvn(%struct.sv* %681, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.72, i64 0, i64 0), i64 10)
  br label %if.end595

if.end595:                                        ; preds = %if.else594, %cond.end592
  %682 = load %struct.sv*, %struct.sv** %tmpstr, align 8
  %683 = load %struct.padname*, %struct.padname** %name, align 8
  %xpadn_pv596 = getelementptr inbounds %struct.padname, %struct.padname* %683, i32 0, i32 0
  %684 = load i8*, i8** %xpadn_pv596, align 8
  %add.ptr597 = getelementptr inbounds i8, i8* %684, i64 1
  %685 = load %struct.padname*, %struct.padname** %name, align 8
  %xpadn_len598 = getelementptr inbounds %struct.padname, %struct.padname* %685, i32 0, i32 7
  %686 = load i8, i8* %xpadn_len598, align 8
  %conv599 = zext i8 %686 to i32
  %sub600 = sub nsw i32 %conv599, 1
  %conv601 = sext i32 %sub600 to i64
  call void @Perl_sv_catpvn_flags(%struct.sv* %682, i8* %add.ptr597, i64 %conv601, i32 32768)
  %687 = load %struct.gv*, %struct.gv** @PL_DBsub, align 8
  %sv_u602 = getelementptr inbounds %struct.gv, %struct.gv* %687, i32 0, i32 3
  %svu_gp = bitcast %union.anon.3* %sv_u602 to %struct.gp**
  %688 = load %struct.gp*, %struct.gp** %svu_gp, align 8
  %add.ptr603 = getelementptr inbounds %struct.gp, %struct.gp* %688, i64 0
  %gp_hv = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr603, i32 0, i32 5
  %689 = load %struct.hv*, %struct.hv** %gp_hv, align 8
  %690 = load %struct.sv*, %struct.sv** %tmpstr, align 8
  %sv_u604 = getelementptr inbounds %struct.sv, %struct.sv* %690, i32 0, i32 3
  %svu_pv605 = bitcast %union.anon* %sv_u604 to i8**
  %691 = load i8*, i8** %svu_pv605, align 8
  %add.ptr606 = getelementptr inbounds i8, i8* %691, i64 0
  %692 = load %struct.sv*, %struct.sv** %tmpstr, align 8
  %sv_flags607 = getelementptr inbounds %struct.sv, %struct.sv* %692, i32 0, i32 2
  %693 = load i32, i32* %sv_flags607, align 4
  %and608 = and i32 %693, 536870912
  %tobool609 = icmp ne i32 %and608, 0
  br i1 %tobool609, label %cond.true610, label %cond.false615

cond.true610:                                     ; preds = %if.end595
  %694 = load %struct.sv*, %struct.sv** %tmpstr, align 8
  %sv_any611 = getelementptr inbounds %struct.sv, %struct.sv* %694, i32 0, i32 0
  %695 = load i8*, i8** %sv_any611, align 8
  %696 = bitcast i8* %695 to %struct.xpv*
  %xpv_cur612 = getelementptr inbounds %struct.xpv, %struct.xpv* %696, i32 0, i32 2
  %697 = load i64, i64* %xpv_cur612, align 8
  %conv613 = trunc i64 %697 to i32
  %sub614 = sub nsw i32 0, %conv613
  br label %cond.end619

cond.false615:                                    ; preds = %if.end595
  %698 = load %struct.sv*, %struct.sv** %tmpstr, align 8
  %sv_any616 = getelementptr inbounds %struct.sv, %struct.sv* %698, i32 0, i32 0
  %699 = load i8*, i8** %sv_any616, align 8
  %700 = bitcast i8* %699 to %struct.xpv*
  %xpv_cur617 = getelementptr inbounds %struct.xpv, %struct.xpv* %700, i32 0, i32 2
  %701 = load i64, i64* %xpv_cur617, align 8
  %conv618 = trunc i64 %701 to i32
  br label %cond.end619

cond.end619:                                      ; preds = %cond.false615, %cond.true610
  %cond620 = phi i32 [ %sub614, %cond.true610 ], [ %conv618, %cond.false615 ]
  %702 = load %struct.sv*, %struct.sv** %sv, align 8
  %call621 = call i8* @Perl_hv_common_key_len(%struct.hv* %689, i8* %add.ptr606, i32 %cond620, i32 36, %struct.sv* %702, i32 0)
  %703 = bitcast i8* %call621 to %struct.sv**
  %704 = load %struct.gv*, %struct.gv** %db_postponed, align 8
  %sv_u622 = getelementptr inbounds %struct.gv, %struct.gv* %704, i32 0, i32 3
  %svu_gp623 = bitcast %union.anon.3* %sv_u622 to %struct.gp**
  %705 = load %struct.gp*, %struct.gp** %svu_gp623, align 8
  %add.ptr624 = getelementptr inbounds %struct.gp, %struct.gp* %705, i64 0
  %gp_hv625 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr624, i32 0, i32 5
  %706 = load %struct.hv*, %struct.hv** %gp_hv625, align 8
  %tobool626 = icmp ne %struct.hv* %706, null
  br i1 %tobool626, label %cond.true627, label %cond.false632

cond.true627:                                     ; preds = %cond.end619
  %707 = load %struct.gv*, %struct.gv** %db_postponed, align 8
  %sv_u628 = getelementptr inbounds %struct.gv, %struct.gv* %707, i32 0, i32 3
  %svu_gp629 = bitcast %union.anon.3* %sv_u628 to %struct.gp**
  %708 = load %struct.gp*, %struct.gp** %svu_gp629, align 8
  %add.ptr630 = getelementptr inbounds %struct.gp, %struct.gp* %708, i64 0
  %gp_hv631 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr630, i32 0, i32 5
  %709 = load %struct.hv*, %struct.hv** %gp_hv631, align 8
  br label %cond.end638

cond.false632:                                    ; preds = %cond.end619
  %710 = load %struct.gv*, %struct.gv** %db_postponed, align 8
  %call633 = call %struct.gv* @Perl_gv_add_by_type(%struct.gv* %710, i32 12)
  %sv_u634 = getelementptr inbounds %struct.gv, %struct.gv* %call633, i32 0, i32 3
  %svu_gp635 = bitcast %union.anon.3* %sv_u634 to %struct.gp**
  %711 = load %struct.gp*, %struct.gp** %svu_gp635, align 8
  %add.ptr636 = getelementptr inbounds %struct.gp, %struct.gp* %711, i64 0
  %gp_hv637 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr636, i32 0, i32 5
  %712 = load %struct.hv*, %struct.hv** %gp_hv637, align 8
  br label %cond.end638

cond.end638:                                      ; preds = %cond.false632, %cond.true627
  %cond639 = phi %struct.hv* [ %709, %cond.true627 ], [ %712, %cond.false632 ]
  store %struct.hv* %cond639, %struct.hv** %hv, align 8
  %713 = load %struct.hv*, %struct.hv** %hv, align 8
  %sv_any640 = getelementptr inbounds %struct.hv, %struct.hv* %713, i32 0, i32 0
  %714 = load %struct.xpvhv*, %struct.xpvhv** %sv_any640, align 8
  %xhv_keys = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %714, i32 0, i32 2
  %715 = load i64, i64* %xhv_keys, align 8
  %cmp641 = icmp ugt i64 %715, 0
  br i1 %cmp641, label %land.lhs.true643, label %if.end700

land.lhs.true643:                                 ; preds = %cond.end638
  %716 = load %struct.hv*, %struct.hv** %hv, align 8
  %717 = load %struct.sv*, %struct.sv** %tmpstr, align 8
  %sv_u644 = getelementptr inbounds %struct.sv, %struct.sv* %717, i32 0, i32 3
  %svu_pv645 = bitcast %union.anon* %sv_u644 to i8**
  %718 = load i8*, i8** %svu_pv645, align 8
  %add.ptr646 = getelementptr inbounds i8, i8* %718, i64 0
  %719 = load %struct.sv*, %struct.sv** %tmpstr, align 8
  %sv_flags647 = getelementptr inbounds %struct.sv, %struct.sv* %719, i32 0, i32 2
  %720 = load i32, i32* %sv_flags647, align 4
  %and648 = and i32 %720, 536870912
  %tobool649 = icmp ne i32 %and648, 0
  br i1 %tobool649, label %cond.true650, label %cond.false655

cond.true650:                                     ; preds = %land.lhs.true643
  %721 = load %struct.sv*, %struct.sv** %tmpstr, align 8
  %sv_any651 = getelementptr inbounds %struct.sv, %struct.sv* %721, i32 0, i32 0
  %722 = load i8*, i8** %sv_any651, align 8
  %723 = bitcast i8* %722 to %struct.xpv*
  %xpv_cur652 = getelementptr inbounds %struct.xpv, %struct.xpv* %723, i32 0, i32 2
  %724 = load i64, i64* %xpv_cur652, align 8
  %conv653 = trunc i64 %724 to i32
  %sub654 = sub nsw i32 0, %conv653
  br label %cond.end659

cond.false655:                                    ; preds = %land.lhs.true643
  %725 = load %struct.sv*, %struct.sv** %tmpstr, align 8
  %sv_any656 = getelementptr inbounds %struct.sv, %struct.sv* %725, i32 0, i32 0
  %726 = load i8*, i8** %sv_any656, align 8
  %727 = bitcast i8* %726 to %struct.xpv*
  %xpv_cur657 = getelementptr inbounds %struct.xpv, %struct.xpv* %727, i32 0, i32 2
  %728 = load i64, i64* %xpv_cur657, align 8
  %conv658 = trunc i64 %728 to i32
  br label %cond.end659

cond.end659:                                      ; preds = %cond.false655, %cond.true650
  %cond660 = phi i32 [ %sub654, %cond.true650 ], [ %conv658, %cond.false655 ]
  %call661 = call i8* @Perl_hv_common_key_len(%struct.hv* %716, i8* %add.ptr646, i32 %cond660, i32 8, %struct.sv* null, i32 0)
  %tobool662 = icmp ne i8* %call661, null
  br i1 %tobool662, label %cond.true663, label %cond.false664

cond.true663:                                     ; preds = %cond.end659
  br i1 true, label %if.then665, label %if.end700

cond.false664:                                    ; preds = %cond.end659
  br i1 false, label %if.then665, label %if.end700

if.then665:                                       ; preds = %cond.false664, %cond.true663
  %729 = load %struct.gv*, %struct.gv** %db_postponed, align 8
  %sv_u666 = getelementptr inbounds %struct.gv, %struct.gv* %729, i32 0, i32 3
  %svu_gp667 = bitcast %union.anon.3* %sv_u666 to %struct.gp**
  %730 = load %struct.gp*, %struct.gp** %svu_gp667, align 8
  %add.ptr668 = getelementptr inbounds %struct.gp, %struct.gp* %730, i64 0
  %gp_cv = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr668, i32 0, i32 2
  %731 = load %struct.cv*, %struct.cv** %gp_cv, align 8
  %add.ptr669 = getelementptr inbounds %struct.cv, %struct.cv* %731, i64 0
  store %struct.cv* %add.ptr669, %struct.cv** %pcv, align 8
  %732 = load %struct.cv*, %struct.cv** %pcv, align 8
  %tobool670 = icmp ne %struct.cv* %732, null
  br i1 %tobool670, label %if.then671, label %if.end699

if.then671:                                       ; preds = %if.then665
  %733 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %733, %struct.sv*** %sp, align 8
  br label %do.body672

do.body672:                                       ; preds = %if.then671
  %734 = load i32*, i32** @PL_markstack_ptr, align 8
  %incdec.ptr = getelementptr inbounds i32, i32* %734, i32 1
  store i32* %incdec.ptr, i32** @PL_markstack_ptr, align 8
  store i32* %incdec.ptr, i32** %mark_stack_entry, align 8
  %735 = load i32*, i32** @PL_markstack_max, align 8
  %cmp673 = icmp eq i32* %incdec.ptr, %735
  br i1 %cmp673, label %cond.true675, label %cond.false676

cond.true675:                                     ; preds = %do.body672
  br i1 true, label %if.then677, label %if.end679

cond.false676:                                    ; preds = %do.body672
  br i1 false, label %if.then677, label %if.end679

if.then677:                                       ; preds = %cond.false676, %cond.true675
  %call678 = call i32* @Perl_markstack_grow()
  store i32* %call678, i32** %mark_stack_entry, align 8
  br label %if.end679

if.end679:                                        ; preds = %if.then677, %cond.false676, %cond.true675
  %736 = load %struct.sv**, %struct.sv*** %sp, align 8
  %737 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %sub.ptr.lhs.cast = ptrtoint %struct.sv** %736 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.sv** %737 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 8
  %conv680 = trunc i64 %sub.ptr.div to i32
  %738 = load i32*, i32** %mark_stack_entry, align 8
  store i32 %conv680, i32* %738, align 4
  br label %do.end681

do.end681:                                        ; preds = %if.end679
  br label %do.body682

do.body682:                                       ; preds = %do.end681
  br label %do.body683

do.body683:                                       ; preds = %do.body682
  %739 = load %struct.sv**, %struct.sv*** @PL_stack_max, align 8
  %740 = load %struct.sv**, %struct.sv*** %sp, align 8
  %sub.ptr.lhs.cast684 = ptrtoint %struct.sv** %739 to i64
  %sub.ptr.rhs.cast685 = ptrtoint %struct.sv** %740 to i64
  %sub.ptr.sub686 = sub i64 %sub.ptr.lhs.cast684, %sub.ptr.rhs.cast685
  %sub.ptr.div687 = sdiv exact i64 %sub.ptr.sub686, 8
  %cmp688 = icmp slt i64 %sub.ptr.div687, 1
  br i1 %cmp688, label %cond.true690, label %cond.false691

cond.true690:                                     ; preds = %do.body683
  br i1 true, label %if.then692, label %if.end694

cond.false691:                                    ; preds = %do.body683
  br i1 false, label %if.then692, label %if.end694

if.then692:                                       ; preds = %cond.false691, %cond.true690
  %741 = load %struct.sv**, %struct.sv*** %sp, align 8
  %742 = load %struct.sv**, %struct.sv*** %sp, align 8
  %call693 = call %struct.sv** @Perl_stack_grow(%struct.sv** %741, %struct.sv** %742, i64 1)
  store %struct.sv** %call693, %struct.sv*** %sp, align 8
  %743 = load %struct.sv**, %struct.sv*** %sp, align 8
  br label %if.end694

if.end694:                                        ; preds = %if.then692, %cond.false691, %cond.true690
  br label %do.end695

do.end695:                                        ; preds = %if.end694
  %744 = load %struct.sv*, %struct.sv** %tmpstr, align 8
  %745 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr696 = getelementptr inbounds %struct.sv*, %struct.sv** %745, i32 1
  store %struct.sv** %incdec.ptr696, %struct.sv*** %sp, align 8
  store %struct.sv* %744, %struct.sv** %incdec.ptr696, align 8
  br label %do.end697

do.end697:                                        ; preds = %do.end695
  %746 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %746, %struct.sv*** @PL_stack_sp, align 8
  %747 = load %struct.cv*, %struct.cv** %pcv, align 8
  %748 = bitcast %struct.cv* %747 to i8*
  %749 = bitcast i8* %748 to %struct.sv*
  %call698 = call i32 @Perl_call_sv(%struct.sv* %749, i32 4)
  br label %if.end699

if.end699:                                        ; preds = %do.end697, %if.then665
  br label %if.end700

if.end700:                                        ; preds = %if.end699, %cond.false664, %cond.true663, %cond.end638
  br label %if.end701

if.end701:                                        ; preds = %if.end700, %land.lhs.true490, %if.then487
  br label %if.end702

if.end702:                                        ; preds = %if.end701, %if.end485
  br label %clone

clone:                                            ; preds = %if.end702, %if.then405
  %750 = load %struct.cv*, %struct.cv** %clonee, align 8
  %tobool703 = icmp ne %struct.cv* %750, null
  br i1 %tobool703, label %if.then704, label %if.end721

if.then704:                                       ; preds = %clone
  %751 = load %struct.cv*, %struct.cv** %outcv, align 8
  %sv_any705 = getelementptr inbounds %struct.cv, %struct.cv* %751, i32 0, i32 0
  %752 = load %struct.xpvcv*, %struct.xpvcv** %sv_any705, align 8
  %753 = bitcast %struct.xpvcv* %752 to i8*
  %754 = bitcast i8* %753 to %struct.xpvcv*
  %xcv_padlist_u706 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %754, i32 0, i32 9
  %xcv_padlist707 = bitcast %union.anon.9* %xcv_padlist_u706 to %struct.padlist**
  %755 = load %struct.padlist*, %struct.padlist** %xcv_padlist707, align 8
  %xpadl_alloc708 = getelementptr inbounds %struct.padlist, %struct.padlist* %755, i32 0, i32 1
  %756 = load %struct.av**, %struct.av*** %xpadl_alloc708, align 8
  %757 = load %struct.cv*, %struct.cv** %outcv, align 8
  %call709 = call i32* @S_CvDEPTHp(%struct.cv* %757)
  %758 = load i32, i32* %call709, align 4
  %idxprom710 = sext i32 %758 to i64
  %arrayidx711 = getelementptr inbounds %struct.av*, %struct.av** %756, i64 %idxprom710
  %759 = load %struct.av*, %struct.av** %arrayidx711, align 8
  %sv_u712 = getelementptr inbounds %struct.av, %struct.av* %759, i32 0, i32 3
  %svu_array713 = bitcast %union.anon.2* %sv_u712 to %struct.sv***
  %760 = load %struct.sv**, %struct.sv*** %svu_array713, align 8
  %761 = load i64, i64* %pax, align 8
  %arrayidx714 = getelementptr inbounds %struct.sv*, %struct.sv** %760, i64 %761
  %762 = bitcast %struct.sv** %arrayidx714 to %struct.cv**
  store %struct.cv** %762, %struct.cv*** %spot, align 8
  %763 = load i8, i8* %reusable, align 1
  %tobool715 = trunc i8 %763 to i1
  br i1 %tobool715, label %if.then716, label %if.else718

if.then716:                                       ; preds = %if.then704
  %764 = load %struct.cv*, %struct.cv** %clonee, align 8
  %765 = load %struct.cv**, %struct.cv*** %spot, align 8
  %766 = load %struct.cv*, %struct.cv** %765, align 8
  %call717 = call %struct.cv* @Perl_cv_clone_into(%struct.cv* %764, %struct.cv* %766)
  br label %if.end720

if.else718:                                       ; preds = %if.then704
  %767 = load %struct.cv*, %struct.cv** %clonee, align 8
  %call719 = call %struct.cv* @Perl_cv_clone(%struct.cv* %767)
  %768 = load %struct.cv**, %struct.cv*** %spot, align 8
  store %struct.cv* %call719, %struct.cv** %768, align 8
  br label %if.end720

if.end720:                                        ; preds = %if.else718, %if.then716
  %769 = load %struct.cv*, %struct.cv** %clonee, align 8
  %770 = bitcast %struct.cv* %769 to i8*
  %771 = bitcast i8* %770 to %struct.sv*
  call void @S_SvREFCNT_dec_NN(%struct.sv* %771)
  %772 = load %struct.cv**, %struct.cv*** %spot, align 8
  %773 = load %struct.cv*, %struct.cv** %772, align 8
  store %struct.cv* %773, %struct.cv** %cv, align 8
  br label %if.end721

if.end721:                                        ; preds = %if.end720, %clone
  %774 = load %struct.cv*, %struct.cv** %outcv, align 8
  %call722 = call i32* @S_CvDEPTHp(%struct.cv* %774)
  %775 = load i32, i32* %call722, align 4
  %tobool723 = icmp ne i32 %775, 0
  br i1 %tobool723, label %land.lhs.true724, label %if.end746

land.lhs.true724:                                 ; preds = %if.end721
  %776 = load i8, i8* %reusable, align 1
  %tobool725 = trunc i8 %776 to i1
  br i1 %tobool725, label %if.end746, label %land.lhs.true726

land.lhs.true726:                                 ; preds = %land.lhs.true724
  %777 = load %struct.padname*, %struct.padname** %name, align 8
  %xpadn_flags727 = getelementptr inbounds %struct.padname, %struct.padname* %777, i32 0, i32 8
  %778 = load i8, i8* %xpadn_flags727, align 1
  %conv728 = zext i8 %778 to i32
  %and729 = and i32 %conv728, 2
  %tobool730 = icmp ne i32 %and729, 0
  br i1 %tobool730, label %if.then731, label %if.end746

if.then731:                                       ; preds = %land.lhs.true726
  %779 = load %struct.cv*, %struct.cv** %outcv, align 8
  %call732 = call i32* @S_CvDEPTHp(%struct.cv* %779)
  %780 = load i32, i32* %call732, align 4
  %conv733 = sext i32 %780 to i64
  store i64 %conv733, i64* %depth, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.then731
  %781 = load i64, i64* %depth, align 8
  %dec734 = add i64 %781, -1
  store i64 %dec734, i64* %depth, align 8
  %tobool735 = icmp ne i64 %dec734, 0
  br i1 %tobool735, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %782 = load %struct.cv*, %struct.cv** %outcv, align 8
  %sv_any736 = getelementptr inbounds %struct.cv, %struct.cv* %782, i32 0, i32 0
  %783 = load %struct.xpvcv*, %struct.xpvcv** %sv_any736, align 8
  %784 = bitcast %struct.xpvcv* %783 to i8*
  %785 = bitcast i8* %784 to %struct.xpvcv*
  %xcv_padlist_u737 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %785, i32 0, i32 9
  %xcv_padlist738 = bitcast %union.anon.9* %xcv_padlist_u737 to %struct.padlist**
  %786 = load %struct.padlist*, %struct.padlist** %xcv_padlist738, align 8
  %xpadl_alloc739 = getelementptr inbounds %struct.padlist, %struct.padlist* %786, i32 0, i32 1
  %787 = load %struct.av**, %struct.av*** %xpadl_alloc739, align 8
  %788 = load i64, i64* %depth, align 8
  %arrayidx740 = getelementptr inbounds %struct.av*, %struct.av** %787, i64 %788
  %789 = load %struct.av*, %struct.av** %arrayidx740, align 8
  %sv_u741 = getelementptr inbounds %struct.av, %struct.av* %789, i32 0, i32 3
  %svu_array742 = bitcast %union.anon.2* %sv_u741 to %struct.sv***
  %790 = load %struct.sv**, %struct.sv*** %svu_array742, align 8
  %791 = load i64, i64* %pax, align 8
  %arrayidx743 = getelementptr inbounds %struct.sv*, %struct.sv** %790, i64 %791
  store %struct.sv** %arrayidx743, %struct.sv*** %svspot, align 8
  %792 = load %struct.sv**, %struct.sv*** %svspot, align 8
  %793 = load %struct.sv*, %struct.sv** %792, align 8
  store %struct.sv* %793, %struct.sv** %oldcv, align 8
  %794 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_refcnt744 = getelementptr inbounds %struct.cv, %struct.cv* %794, i32 0, i32 1
  %795 = load i32, i32* %sv_refcnt744, align 8
  %inc745 = add i32 %795, 1
  store i32 %inc745, i32* %sv_refcnt744, align 8
  %796 = load %struct.cv*, %struct.cv** %cv, align 8
  %797 = bitcast %struct.cv* %796 to i8*
  %798 = bitcast i8* %797 to %struct.sv*
  %799 = load %struct.sv**, %struct.sv*** %svspot, align 8
  store %struct.sv* %798, %struct.sv** %799, align 8
  %800 = load %struct.sv*, %struct.sv** %oldcv, align 8
  %801 = bitcast %struct.sv* %800 to i8*
  %802 = bitcast i8* %801 to %struct.sv*
  call void @S_SvREFCNT_dec(%struct.sv* %802)
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %if.end746

if.end746:                                        ; preds = %while.end, %land.lhs.true726, %land.lhs.true724, %if.end721
  br label %done

done:                                             ; preds = %if.end746, %if.end207, %if.then59
  %803 = load %struct.yy_parser*, %struct.yy_parser** @PL_parser, align 8
  %tobool747 = icmp ne %struct.yy_parser* %803, null
  br i1 %tobool747, label %if.then748, label %if.end750

if.then748:                                       ; preds = %done
  %804 = load %struct.yy_parser*, %struct.yy_parser** @PL_parser, align 8
  %copline749 = getelementptr inbounds %struct.yy_parser, %struct.yy_parser* %804, i32 0, i32 41
  store i32 -1, i32* %copline749, align 8
  br label %if.end750

if.end750:                                        ; preds = %if.then748, %done
  br label %do.body751

do.body751:                                       ; preds = %if.end750
  %805 = load i32, i32* @PL_savestack_ix, align 4
  %806 = load i32, i32* %floor.addr, align 4
  %cmp752 = icmp sgt i32 %805, %806
  br i1 %cmp752, label %if.then754, label %if.end755

if.then754:                                       ; preds = %do.body751
  %807 = load i32, i32* %floor.addr, align 4
  call void @Perl_leave_scope(i32 %807)
  br label %if.end755

if.end755:                                        ; preds = %if.then754, %do.body751
  br label %do.end756

do.end756:                                        ; preds = %if.end755
  %808 = load %struct.op*, %struct.op** %o.addr, align 8
  call void @Perl_op_free(%struct.op* %808)
  %809 = load %struct.cv*, %struct.cv** %cv, align 8
  ret %struct.cv* %809
}

; Function Attrs: noinline nounwind uwtable
define internal i32* @S_CvDEPTHp(%struct.cv* %sv) #0 {
entry:
  %sv.addr = alloca %struct.cv*, align 8
  store %struct.cv* %sv, %struct.cv** %sv.addr, align 8
  %0 = load %struct.cv*, %struct.cv** %sv.addr, align 8
  %sv_any = getelementptr inbounds %struct.cv, %struct.cv* %0, i32 0, i32 0
  %1 = load %struct.xpvcv*, %struct.xpvcv** %sv_any, align 8
  %xcv_depth = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %1, i32 0, i32 13
  ret i32* %xcv_depth
}

; Function Attrs: noinline nounwind uwtable
define internal void @S_move_proto_attr(%struct.op** %proto, %struct.op** %attrs, %struct.gv* %name) #0 {
entry:
  %proto.addr = alloca %struct.op**, align 8
  %attrs.addr = alloca %struct.op**, align 8
  %name.addr = alloca %struct.gv*, align 8
  %new_proto = alloca %struct.op*, align 8
  %pvlen = alloca i64, align 8
  %pv = alloca i8*, align 8
  %o = alloca %struct.op*, align 8
  %tmpsv = alloca %struct.sv*, align 8
  %tmpo = alloca %struct.sv**, align 8
  %lasto = alloca %struct.op*, align 8
  %tmpsv52 = alloca %struct.sv*, align 8
  %tmpo59 = alloca %struct.sv**, align 8
  %new_len = alloca i64, align 8
  %newp = alloca i8*, align 8
  %svname = alloca %struct.sv*, align 8
  %old_len = alloca i64, align 8
  %new_len145 = alloca i64, align 8
  %oldp = alloca i8*, align 8
  %newp163 = alloca i8*, align 8
  store %struct.op** %proto, %struct.op*** %proto.addr, align 8
  store %struct.op** %attrs, %struct.op*** %attrs.addr, align 8
  store %struct.gv* %name, %struct.gv** %name.addr, align 8
  store %struct.op* null, %struct.op** %new_proto, align 8
  %0 = load %struct.op**, %struct.op*** %attrs.addr, align 8
  %1 = load %struct.op*, %struct.op** %0, align 8
  %tobool = icmp ne %struct.op* %1, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  br label %if.end195

if.end:                                           ; preds = %entry
  %2 = load %struct.op**, %struct.op*** %attrs.addr, align 8
  %3 = load %struct.op*, %struct.op** %2, align 8
  store %struct.op* %3, %struct.op** %o, align 8
  %4 = load %struct.op*, %struct.op** %o, align 8
  %op_type = getelementptr inbounds %struct.op, %struct.op* %4, i32 0, i32 4
  %bf.load = load i16, i16* %op_type, align 8
  %bf.clear = and i16 %bf.load, 511
  %bf.cast = zext i16 %bf.clear to i32
  %cmp = icmp eq i32 %bf.cast, 5
  br i1 %cmp, label %if.then1, label %if.else

if.then1:                                         ; preds = %if.end
  %5 = load %struct.op*, %struct.op** %o, align 8
  %6 = bitcast %struct.op* %5 to %struct.svop*
  %op_sv = getelementptr inbounds %struct.svop, %struct.svop* %6, i32 0, i32 7
  %7 = load %struct.sv*, %struct.sv** %op_sv, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %7, i32 0, i32 2
  %8 = load i32, i32* %sv_flags, align 4
  %and = and i32 %8, 2098176
  %cmp2 = icmp eq i32 %and, 1024
  br i1 %cmp2, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then1
  %9 = load %struct.op*, %struct.op** %o, align 8
  %10 = bitcast %struct.op* %9 to %struct.svop*
  %op_sv3 = getelementptr inbounds %struct.svop, %struct.svop* %10, i32 0, i32 7
  %11 = load %struct.sv*, %struct.sv** %op_sv3, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %11, i32 0, i32 0
  %12 = load i8*, i8** %sv_any, align 8
  %13 = bitcast i8* %12 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %13, i32 0, i32 2
  %14 = load i64, i64* %xpv_cur, align 8
  store i64 %14, i64* %pvlen, align 8
  %15 = load %struct.op*, %struct.op** %o, align 8
  %16 = bitcast %struct.op* %15 to %struct.svop*
  %op_sv4 = getelementptr inbounds %struct.svop, %struct.svop* %16, i32 0, i32 7
  %17 = load %struct.sv*, %struct.sv** %op_sv4, align 8
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %17, i32 0, i32 3
  %svu_pv = bitcast %union.anon* %sv_u to i8**
  %18 = load i8*, i8** %svu_pv, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.then1
  %19 = load %struct.op*, %struct.op** %o, align 8
  %20 = bitcast %struct.op* %19 to %struct.svop*
  %op_sv5 = getelementptr inbounds %struct.svop, %struct.svop* %20, i32 0, i32 7
  %21 = load %struct.sv*, %struct.sv** %op_sv5, align 8
  %call = call i8* @Perl_sv_2pv_flags(%struct.sv* %21, i64* %pvlen, i32 2)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %18, %cond.true ], [ %call, %cond.false ]
  store i8* %cond, i8** %pv, align 8
  %22 = load i64, i64* %pvlen, align 8
  %cmp6 = icmp uge i64 %22, 10
  br i1 %cmp6, label %land.lhs.true, label %if.end16

land.lhs.true:                                    ; preds = %cond.end
  %23 = load i8*, i8** %pv, align 8
  %call7 = call i32 @memcmp(i8* %23, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.194, i64 0, i64 0), i64 10) #7
  %tobool8 = icmp ne i32 %call7, 0
  br i1 %tobool8, label %if.end16, label %if.then9

if.then9:                                         ; preds = %land.lhs.true
  %24 = load i8*, i8** %pv, align 8
  %add.ptr = getelementptr inbounds i8, i8* %24, i64 10
  %25 = load i64, i64* %pvlen, align 8
  %sub = sub i64 %25, 11
  %26 = load %struct.op*, %struct.op** %o, align 8
  %27 = bitcast %struct.op* %26 to %struct.svop*
  %op_sv10 = getelementptr inbounds %struct.svop, %struct.svop* %27, i32 0, i32 7
  %28 = load %struct.sv*, %struct.sv** %op_sv10, align 8
  %sv_flags11 = getelementptr inbounds %struct.sv, %struct.sv* %28, i32 0, i32 2
  %29 = load i32, i32* %sv_flags11, align 4
  %and12 = and i32 %29, 536870912
  %call13 = call %struct.sv* @Perl_newSVpvn_flags(i8* %add.ptr, i64 %sub, i32 %and12)
  store %struct.sv* %call13, %struct.sv** %tmpsv, align 8
  %30 = load %struct.op*, %struct.op** %o, align 8
  %31 = bitcast %struct.op* %30 to %struct.svop*
  %op_sv14 = getelementptr inbounds %struct.svop, %struct.svop* %31, i32 0, i32 7
  store %struct.sv** %op_sv14, %struct.sv*** %tmpo, align 8
  %32 = load %struct.op*, %struct.op** %o, align 8
  %33 = bitcast %struct.op* %32 to %struct.svop*
  %op_sv15 = getelementptr inbounds %struct.svop, %struct.svop* %33, i32 0, i32 7
  %34 = load %struct.sv*, %struct.sv** %op_sv15, align 8
  %35 = bitcast %struct.sv* %34 to i8*
  %36 = bitcast i8* %35 to %struct.sv*
  call void @S_SvREFCNT_dec(%struct.sv* %36)
  %37 = load %struct.sv*, %struct.sv** %tmpsv, align 8
  %38 = load %struct.sv**, %struct.sv*** %tmpo, align 8
  store %struct.sv* %37, %struct.sv** %38, align 8
  %39 = load %struct.op*, %struct.op** %o, align 8
  store %struct.op* %39, %struct.op** %new_proto, align 8
  %40 = load %struct.op**, %struct.op*** %attrs.addr, align 8
  store %struct.op* null, %struct.op** %40, align 8
  br label %if.end16

if.end16:                                         ; preds = %if.then9, %land.lhs.true, %cond.end
  br label %if.end105

if.else:                                          ; preds = %if.end
  %41 = load %struct.op*, %struct.op** %o, align 8
  %op_type17 = getelementptr inbounds %struct.op, %struct.op* %41, i32 0, i32 4
  %bf.load18 = load i16, i16* %op_type17, align 8
  %bf.clear19 = and i16 %bf.load18, 511
  %bf.cast20 = zext i16 %bf.clear19 to i32
  %cmp21 = icmp eq i32 %bf.cast20, 158
  br i1 %cmp21, label %if.then22, label %if.end104

if.then22:                                        ; preds = %if.else
  %42 = load %struct.op*, %struct.op** %o, align 8
  %43 = bitcast %struct.op* %42 to %struct.listop*
  %op_first = getelementptr inbounds %struct.listop, %struct.listop* %43, i32 0, i32 7
  %44 = load %struct.op*, %struct.op** %op_first, align 8
  store %struct.op* %44, %struct.op** %lasto, align 8
  %45 = load %struct.op*, %struct.op** %lasto, align 8
  %op_sibling = getelementptr inbounds %struct.op, %struct.op* %45, i32 0, i32 1
  %46 = load %struct.op*, %struct.op** %op_sibling, align 8
  %add.ptr23 = getelementptr inbounds %struct.op, %struct.op* %46, i64 0
  store %struct.op* %add.ptr23, %struct.op** %o, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then22
  %47 = load %struct.op*, %struct.op** %o, align 8
  %tobool24 = icmp ne %struct.op* %47, null
  br i1 %tobool24, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %48 = load %struct.op*, %struct.op** %o, align 8
  %op_type25 = getelementptr inbounds %struct.op, %struct.op* %48, i32 0, i32 4
  %bf.load26 = load i16, i16* %op_type25, align 8
  %bf.clear27 = and i16 %bf.load26, 511
  %bf.cast28 = zext i16 %bf.clear27 to i32
  %cmp29 = icmp eq i32 %bf.cast28, 5
  br i1 %cmp29, label %if.then30, label %if.end94

if.then30:                                        ; preds = %for.body
  %49 = load %struct.op*, %struct.op** %o, align 8
  %50 = bitcast %struct.op* %49 to %struct.svop*
  %op_sv31 = getelementptr inbounds %struct.svop, %struct.svop* %50, i32 0, i32 7
  %51 = load %struct.sv*, %struct.sv** %op_sv31, align 8
  %sv_flags32 = getelementptr inbounds %struct.sv, %struct.sv* %51, i32 0, i32 2
  %52 = load i32, i32* %sv_flags32, align 4
  %and33 = and i32 %52, 2098176
  %cmp34 = icmp eq i32 %and33, 1024
  br i1 %cmp34, label %cond.true35, label %cond.false42

cond.true35:                                      ; preds = %if.then30
  %53 = load %struct.op*, %struct.op** %o, align 8
  %54 = bitcast %struct.op* %53 to %struct.svop*
  %op_sv36 = getelementptr inbounds %struct.svop, %struct.svop* %54, i32 0, i32 7
  %55 = load %struct.sv*, %struct.sv** %op_sv36, align 8
  %sv_any37 = getelementptr inbounds %struct.sv, %struct.sv* %55, i32 0, i32 0
  %56 = load i8*, i8** %sv_any37, align 8
  %57 = bitcast i8* %56 to %struct.xpv*
  %xpv_cur38 = getelementptr inbounds %struct.xpv, %struct.xpv* %57, i32 0, i32 2
  %58 = load i64, i64* %xpv_cur38, align 8
  store i64 %58, i64* %pvlen, align 8
  %59 = load %struct.op*, %struct.op** %o, align 8
  %60 = bitcast %struct.op* %59 to %struct.svop*
  %op_sv39 = getelementptr inbounds %struct.svop, %struct.svop* %60, i32 0, i32 7
  %61 = load %struct.sv*, %struct.sv** %op_sv39, align 8
  %sv_u40 = getelementptr inbounds %struct.sv, %struct.sv* %61, i32 0, i32 3
  %svu_pv41 = bitcast %union.anon* %sv_u40 to i8**
  %62 = load i8*, i8** %svu_pv41, align 8
  br label %cond.end45

cond.false42:                                     ; preds = %if.then30
  %63 = load %struct.op*, %struct.op** %o, align 8
  %64 = bitcast %struct.op* %63 to %struct.svop*
  %op_sv43 = getelementptr inbounds %struct.svop, %struct.svop* %64, i32 0, i32 7
  %65 = load %struct.sv*, %struct.sv** %op_sv43, align 8
  %call44 = call i8* @Perl_sv_2pv_flags(%struct.sv* %65, i64* %pvlen, i32 2)
  br label %cond.end45

cond.end45:                                       ; preds = %cond.false42, %cond.true35
  %cond46 = phi i8* [ %62, %cond.true35 ], [ %call44, %cond.false42 ]
  store i8* %cond46, i8** %pv, align 8
  %66 = load i64, i64* %pvlen, align 8
  %cmp47 = icmp uge i64 %66, 10
  br i1 %cmp47, label %land.lhs.true48, label %if.end93

land.lhs.true48:                                  ; preds = %cond.end45
  %67 = load i8*, i8** %pv, align 8
  %call49 = call i32 @memcmp(i8* %67, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.194, i64 0, i64 0), i64 10) #7
  %tobool50 = icmp ne i32 %call49, 0
  br i1 %tobool50, label %if.end93, label %if.then51

if.then51:                                        ; preds = %land.lhs.true48
  %68 = load i8*, i8** %pv, align 8
  %add.ptr53 = getelementptr inbounds i8, i8* %68, i64 10
  %69 = load i64, i64* %pvlen, align 8
  %sub54 = sub i64 %69, 11
  %70 = load %struct.op*, %struct.op** %o, align 8
  %71 = bitcast %struct.op* %70 to %struct.svop*
  %op_sv55 = getelementptr inbounds %struct.svop, %struct.svop* %71, i32 0, i32 7
  %72 = load %struct.sv*, %struct.sv** %op_sv55, align 8
  %sv_flags56 = getelementptr inbounds %struct.sv, %struct.sv* %72, i32 0, i32 2
  %73 = load i32, i32* %sv_flags56, align 4
  %and57 = and i32 %73, 536870912
  %call58 = call %struct.sv* @Perl_newSVpvn_flags(i8* %add.ptr53, i64 %sub54, i32 %and57)
  store %struct.sv* %call58, %struct.sv** %tmpsv52, align 8
  %74 = load %struct.op*, %struct.op** %o, align 8
  %75 = bitcast %struct.op* %74 to %struct.svop*
  %op_sv60 = getelementptr inbounds %struct.svop, %struct.svop* %75, i32 0, i32 7
  store %struct.sv** %op_sv60, %struct.sv*** %tmpo59, align 8
  %76 = load %struct.op*, %struct.op** %o, align 8
  %77 = bitcast %struct.op* %76 to %struct.svop*
  %op_sv61 = getelementptr inbounds %struct.svop, %struct.svop* %77, i32 0, i32 7
  %78 = load %struct.sv*, %struct.sv** %op_sv61, align 8
  %79 = bitcast %struct.sv* %78 to i8*
  %80 = bitcast i8* %79 to %struct.sv*
  call void @S_SvREFCNT_dec(%struct.sv* %80)
  %81 = load %struct.sv*, %struct.sv** %tmpsv52, align 8
  %82 = load %struct.sv**, %struct.sv*** %tmpo59, align 8
  store %struct.sv* %81, %struct.sv** %82, align 8
  %83 = load %struct.op*, %struct.op** %new_proto, align 8
  %tobool62 = icmp ne %struct.op* %83, null
  br i1 %tobool62, label %land.lhs.true63, label %if.else87

land.lhs.true63:                                  ; preds = %if.then51
  %call64 = call zeroext i1 @Perl_ckwarn(i32 12)
  br i1 %call64, label %if.then65, label %if.else87

if.then65:                                        ; preds = %land.lhs.true63
  %84 = load %struct.op*, %struct.op** %o, align 8
  %85 = bitcast %struct.op* %84 to %struct.svop*
  %op_sv66 = getelementptr inbounds %struct.svop, %struct.svop* %85, i32 0, i32 7
  %86 = load %struct.sv*, %struct.sv** %op_sv66, align 8
  %sv_flags67 = getelementptr inbounds %struct.sv, %struct.sv* %86, i32 0, i32 2
  %87 = load i32, i32* %sv_flags67, align 4
  %and68 = and i32 %87, 2098176
  %cmp69 = icmp eq i32 %and68, 1024
  br i1 %cmp69, label %cond.true70, label %cond.false77

cond.true70:                                      ; preds = %if.then65
  %88 = load %struct.op*, %struct.op** %o, align 8
  %89 = bitcast %struct.op* %88 to %struct.svop*
  %op_sv71 = getelementptr inbounds %struct.svop, %struct.svop* %89, i32 0, i32 7
  %90 = load %struct.sv*, %struct.sv** %op_sv71, align 8
  %sv_any72 = getelementptr inbounds %struct.sv, %struct.sv* %90, i32 0, i32 0
  %91 = load i8*, i8** %sv_any72, align 8
  %92 = bitcast i8* %91 to %struct.xpv*
  %xpv_cur73 = getelementptr inbounds %struct.xpv, %struct.xpv* %92, i32 0, i32 2
  %93 = load i64, i64* %xpv_cur73, align 8
  store i64 %93, i64* %new_len, align 8
  %94 = load %struct.op*, %struct.op** %o, align 8
  %95 = bitcast %struct.op* %94 to %struct.svop*
  %op_sv74 = getelementptr inbounds %struct.svop, %struct.svop* %95, i32 0, i32 7
  %96 = load %struct.sv*, %struct.sv** %op_sv74, align 8
  %sv_u75 = getelementptr inbounds %struct.sv, %struct.sv* %96, i32 0, i32 3
  %svu_pv76 = bitcast %union.anon* %sv_u75 to i8**
  %97 = load i8*, i8** %svu_pv76, align 8
  br label %cond.end80

cond.false77:                                     ; preds = %if.then65
  %98 = load %struct.op*, %struct.op** %o, align 8
  %99 = bitcast %struct.op* %98 to %struct.svop*
  %op_sv78 = getelementptr inbounds %struct.svop, %struct.svop* %99, i32 0, i32 7
  %100 = load %struct.sv*, %struct.sv** %op_sv78, align 8
  %call79 = call i8* @Perl_sv_2pv_flags(%struct.sv* %100, i64* %new_len, i32 2)
  br label %cond.end80

cond.end80:                                       ; preds = %cond.false77, %cond.true70
  %cond81 = phi i8* [ %97, %cond.true70 ], [ %call79, %cond.false77 ]
  store i8* %cond81, i8** %newp, align 8
  %101 = load %struct.op*, %struct.op** %o, align 8
  %102 = bitcast %struct.op* %101 to %struct.svop*
  %op_sv82 = getelementptr inbounds %struct.svop, %struct.svop* %102, i32 0, i32 7
  %103 = load %struct.sv*, %struct.sv** %op_sv82, align 8
  %sv_flags83 = getelementptr inbounds %struct.sv, %struct.sv* %103, i32 0, i32 2
  %104 = load i32, i32* %sv_flags83, align 4
  %and84 = and i32 %104, 536870912
  %tobool85 = icmp ne i32 %and84, 0
  %105 = zext i1 %tobool85 to i64
  %cond86 = select i1 %tobool85, i32 1, i32 0
  %106 = load i64, i64* %new_len, align 8
  %107 = load i8*, i8** %newp, align 8
  call void (i32, i8*, ...) @Perl_warner(i32 12, i8* getelementptr inbounds ([79 x i8], [79 x i8]* @.str.195, i64 0, i64 0), i32 %cond86, i64 %106, i8* %107)
  %108 = load %struct.op*, %struct.op** %new_proto, align 8
  call void @Perl_op_free(%struct.op* %108)
  br label %if.end91

if.else87:                                        ; preds = %land.lhs.true63, %if.then51
  %109 = load %struct.op*, %struct.op** %new_proto, align 8
  %tobool88 = icmp ne %struct.op* %109, null
  br i1 %tobool88, label %if.then89, label %if.end90

if.then89:                                        ; preds = %if.else87
  %110 = load %struct.op*, %struct.op** %new_proto, align 8
  call void @Perl_op_free(%struct.op* %110)
  br label %if.end90

if.end90:                                         ; preds = %if.then89, %if.else87
  br label %if.end91

if.end91:                                         ; preds = %if.end90, %cond.end80
  %111 = load %struct.op*, %struct.op** %o, align 8
  store %struct.op* %111, %struct.op** %new_proto, align 8
  %112 = load %struct.op**, %struct.op*** %attrs.addr, align 8
  %113 = load %struct.op*, %struct.op** %112, align 8
  %114 = load %struct.op*, %struct.op** %lasto, align 8
  %call92 = call %struct.op* @Perl_op_sibling_splice(%struct.op* %113, %struct.op* %114, i32 1, %struct.op* null)
  %115 = load %struct.op*, %struct.op** %lasto, align 8
  store %struct.op* %115, %struct.op** %o, align 8
  br label %for.inc

if.end93:                                         ; preds = %land.lhs.true48, %cond.end45
  br label %if.end94

if.end94:                                         ; preds = %if.end93, %for.body
  %116 = load %struct.op*, %struct.op** %o, align 8
  store %struct.op* %116, %struct.op** %lasto, align 8
  br label %for.inc

for.inc:                                          ; preds = %if.end94, %if.end91
  %117 = load %struct.op*, %struct.op** %o, align 8
  %op_sibling95 = getelementptr inbounds %struct.op, %struct.op* %117, i32 0, i32 1
  %118 = load %struct.op*, %struct.op** %op_sibling95, align 8
  %add.ptr96 = getelementptr inbounds %struct.op, %struct.op* %118, i64 0
  store %struct.op* %add.ptr96, %struct.op** %o, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %119 = load %struct.op**, %struct.op*** %attrs.addr, align 8
  %120 = load %struct.op*, %struct.op** %119, align 8
  %121 = bitcast %struct.op* %120 to %struct.listop*
  %op_first97 = getelementptr inbounds %struct.listop, %struct.listop* %121, i32 0, i32 7
  %122 = load %struct.op*, %struct.op** %op_first97, align 8
  %op_sibling98 = getelementptr inbounds %struct.op, %struct.op* %122, i32 0, i32 1
  %123 = load %struct.op*, %struct.op** %op_sibling98, align 8
  %tobool99 = icmp ne %struct.op* %123, null
  br i1 %tobool99, label %cond.true100, label %cond.false101

cond.true100:                                     ; preds = %for.end
  br i1 true, label %if.end103, label %if.then102

cond.false101:                                    ; preds = %for.end
  br i1 false, label %if.end103, label %if.then102

if.then102:                                       ; preds = %cond.false101, %cond.true100
  %124 = load %struct.op**, %struct.op*** %attrs.addr, align 8
  %125 = load %struct.op*, %struct.op** %124, align 8
  call void @Perl_op_free(%struct.op* %125)
  %126 = load %struct.op**, %struct.op*** %attrs.addr, align 8
  store %struct.op* null, %struct.op** %126, align 8
  br label %if.end103

if.end103:                                        ; preds = %if.then102, %cond.false101, %cond.true100
  br label %if.end104

if.end104:                                        ; preds = %if.end103, %if.else
  br label %if.end105

if.end105:                                        ; preds = %if.end104, %if.end16
  %127 = load %struct.op*, %struct.op** %new_proto, align 8
  %tobool106 = icmp ne %struct.op* %127, null
  br i1 %tobool106, label %if.then107, label %if.end195

if.then107:                                       ; preds = %if.end105
  %128 = load %struct.gv*, %struct.gv** %name.addr, align 8
  %sv_flags108 = getelementptr inbounds %struct.gv, %struct.gv* %128, i32 0, i32 2
  %129 = load i32, i32* %sv_flags108, align 4
  %and109 = and i32 %129, 255
  %cmp110 = icmp eq i32 %and109, 9
  br i1 %cmp110, label %if.then111, label %if.else113

if.then111:                                       ; preds = %if.then107
  %call112 = call %struct.sv* @Perl_sv_newmortal()
  store %struct.sv* %call112, %struct.sv** %svname, align 8
  %130 = load %struct.sv*, %struct.sv** %svname, align 8
  %131 = load %struct.gv*, %struct.gv** %name.addr, align 8
  call void @Perl_gv_efullname4(%struct.sv* %130, %struct.gv* %131, i8* null, i1 zeroext true)
  br label %if.end134

if.else113:                                       ; preds = %if.then107
  %132 = load %struct.gv*, %struct.gv** %name.addr, align 8
  %sv_flags114 = getelementptr inbounds %struct.gv, %struct.gv* %132, i32 0, i32 2
  %133 = load i32, i32* %sv_flags114, align 4
  %and115 = and i32 %133, 1024
  %tobool116 = icmp ne i32 %and115, 0
  br i1 %tobool116, label %land.lhs.true117, label %if.else132

land.lhs.true117:                                 ; preds = %if.else113
  %134 = load %struct.gv*, %struct.gv** %name.addr, align 8
  %135 = bitcast %struct.gv* %134 to %struct.sv*
  %sv_u118 = getelementptr inbounds %struct.sv, %struct.sv* %135, i32 0, i32 3
  %svu_pv119 = bitcast %union.anon* %sv_u118 to i8**
  %136 = load i8*, i8** %svu_pv119, align 8
  %137 = load i8, i8* %136, align 1
  %conv = sext i8 %137 to i32
  %cmp120 = icmp eq i32 %conv, 38
  br i1 %cmp120, label %if.then122, label %if.else132

if.then122:                                       ; preds = %land.lhs.true117
  %138 = load %struct.gv*, %struct.gv** %name.addr, align 8
  %139 = bitcast %struct.gv* %138 to %struct.sv*
  %sv_u123 = getelementptr inbounds %struct.sv, %struct.sv* %139, i32 0, i32 3
  %svu_pv124 = bitcast %union.anon* %sv_u123 to i8**
  %140 = load i8*, i8** %svu_pv124, align 8
  %add.ptr125 = getelementptr inbounds i8, i8* %140, i64 1
  %141 = load %struct.gv*, %struct.gv** %name.addr, align 8
  %sv_any126 = getelementptr inbounds %struct.gv, %struct.gv* %141, i32 0, i32 0
  %142 = load %struct.xpvgv*, %struct.xpvgv** %sv_any126, align 8
  %143 = bitcast %struct.xpvgv* %142 to %struct.xpv*
  %xpv_cur127 = getelementptr inbounds %struct.xpv, %struct.xpv* %143, i32 0, i32 2
  %144 = load i64, i64* %xpv_cur127, align 8
  %sub128 = sub i64 %144, 1
  %145 = load %struct.gv*, %struct.gv** %name.addr, align 8
  %sv_flags129 = getelementptr inbounds %struct.gv, %struct.gv* %145, i32 0, i32 2
  %146 = load i32, i32* %sv_flags129, align 4
  %and130 = and i32 %146, 536870912
  %or = or i32 %and130, 524288
  %call131 = call %struct.sv* @Perl_newSVpvn_flags(i8* %add.ptr125, i64 %sub128, i32 %or)
  store %struct.sv* %call131, %struct.sv** %svname, align 8
  br label %if.end133

if.else132:                                       ; preds = %land.lhs.true117, %if.else113
  %147 = load %struct.gv*, %struct.gv** %name.addr, align 8
  %148 = bitcast %struct.gv* %147 to %struct.sv*
  store %struct.sv* %148, %struct.sv** %svname, align 8
  br label %if.end133

if.end133:                                        ; preds = %if.else132, %if.then122
  br label %if.end134

if.end134:                                        ; preds = %if.end133, %if.then111
  %call135 = call zeroext i1 @Perl_ckwarn(i32 47)
  br i1 %call135, label %if.then136, label %if.end139

if.then136:                                       ; preds = %if.end134
  %149 = load %struct.sv*, %struct.sv** %svname, align 8
  %150 = load %struct.op*, %struct.op** %new_proto, align 8
  %151 = bitcast %struct.op* %150 to %struct.svop*
  %op_sv137 = getelementptr inbounds %struct.svop, %struct.svop* %151, i32 0, i32 7
  %152 = load %struct.sv*, %struct.sv** %op_sv137, align 8
  %call138 = call zeroext i1 @Perl_validate_proto(%struct.sv* %149, %struct.sv* %152, i1 zeroext true)
  br label %if.end139

if.end139:                                        ; preds = %if.then136, %if.end134
  %153 = load %struct.op**, %struct.op*** %proto.addr, align 8
  %154 = load %struct.op*, %struct.op** %153, align 8
  %tobool140 = icmp ne %struct.op* %154, null
  br i1 %tobool140, label %land.lhs.true141, label %if.end191

land.lhs.true141:                                 ; preds = %if.end139
  %call142 = call zeroext i1 @Perl_ckwarn(i32 35)
  br i1 %call142, label %if.then144, label %if.end191

if.then144:                                       ; preds = %land.lhs.true141
  %155 = load %struct.op**, %struct.op*** %proto.addr, align 8
  %156 = load %struct.op*, %struct.op** %155, align 8
  %157 = bitcast %struct.op* %156 to %struct.svop*
  %op_sv146 = getelementptr inbounds %struct.svop, %struct.svop* %157, i32 0, i32 7
  %158 = load %struct.sv*, %struct.sv** %op_sv146, align 8
  %sv_flags147 = getelementptr inbounds %struct.sv, %struct.sv* %158, i32 0, i32 2
  %159 = load i32, i32* %sv_flags147, align 4
  %and148 = and i32 %159, 2098176
  %cmp149 = icmp eq i32 %and148, 1024
  br i1 %cmp149, label %cond.true151, label %cond.false158

cond.true151:                                     ; preds = %if.then144
  %160 = load %struct.op**, %struct.op*** %proto.addr, align 8
  %161 = load %struct.op*, %struct.op** %160, align 8
  %162 = bitcast %struct.op* %161 to %struct.svop*
  %op_sv152 = getelementptr inbounds %struct.svop, %struct.svop* %162, i32 0, i32 7
  %163 = load %struct.sv*, %struct.sv** %op_sv152, align 8
  %sv_any153 = getelementptr inbounds %struct.sv, %struct.sv* %163, i32 0, i32 0
  %164 = load i8*, i8** %sv_any153, align 8
  %165 = bitcast i8* %164 to %struct.xpv*
  %xpv_cur154 = getelementptr inbounds %struct.xpv, %struct.xpv* %165, i32 0, i32 2
  %166 = load i64, i64* %xpv_cur154, align 8
  store i64 %166, i64* %old_len, align 8
  %167 = load %struct.op**, %struct.op*** %proto.addr, align 8
  %168 = load %struct.op*, %struct.op** %167, align 8
  %169 = bitcast %struct.op* %168 to %struct.svop*
  %op_sv155 = getelementptr inbounds %struct.svop, %struct.svop* %169, i32 0, i32 7
  %170 = load %struct.sv*, %struct.sv** %op_sv155, align 8
  %sv_u156 = getelementptr inbounds %struct.sv, %struct.sv* %170, i32 0, i32 3
  %svu_pv157 = bitcast %union.anon* %sv_u156 to i8**
  %171 = load i8*, i8** %svu_pv157, align 8
  br label %cond.end161

cond.false158:                                    ; preds = %if.then144
  %172 = load %struct.op**, %struct.op*** %proto.addr, align 8
  %173 = load %struct.op*, %struct.op** %172, align 8
  %174 = bitcast %struct.op* %173 to %struct.svop*
  %op_sv159 = getelementptr inbounds %struct.svop, %struct.svop* %174, i32 0, i32 7
  %175 = load %struct.sv*, %struct.sv** %op_sv159, align 8
  %call160 = call i8* @Perl_sv_2pv_flags(%struct.sv* %175, i64* %old_len, i32 2)
  br label %cond.end161

cond.end161:                                      ; preds = %cond.false158, %cond.true151
  %cond162 = phi i8* [ %171, %cond.true151 ], [ %call160, %cond.false158 ]
  store i8* %cond162, i8** %oldp, align 8
  %176 = load %struct.op*, %struct.op** %new_proto, align 8
  %177 = bitcast %struct.op* %176 to %struct.svop*
  %op_sv164 = getelementptr inbounds %struct.svop, %struct.svop* %177, i32 0, i32 7
  %178 = load %struct.sv*, %struct.sv** %op_sv164, align 8
  %sv_flags165 = getelementptr inbounds %struct.sv, %struct.sv* %178, i32 0, i32 2
  %179 = load i32, i32* %sv_flags165, align 4
  %and166 = and i32 %179, 2098176
  %cmp167 = icmp eq i32 %and166, 1024
  br i1 %cmp167, label %cond.true169, label %cond.false176

cond.true169:                                     ; preds = %cond.end161
  %180 = load %struct.op*, %struct.op** %new_proto, align 8
  %181 = bitcast %struct.op* %180 to %struct.svop*
  %op_sv170 = getelementptr inbounds %struct.svop, %struct.svop* %181, i32 0, i32 7
  %182 = load %struct.sv*, %struct.sv** %op_sv170, align 8
  %sv_any171 = getelementptr inbounds %struct.sv, %struct.sv* %182, i32 0, i32 0
  %183 = load i8*, i8** %sv_any171, align 8
  %184 = bitcast i8* %183 to %struct.xpv*
  %xpv_cur172 = getelementptr inbounds %struct.xpv, %struct.xpv* %184, i32 0, i32 2
  %185 = load i64, i64* %xpv_cur172, align 8
  store i64 %185, i64* %new_len145, align 8
  %186 = load %struct.op*, %struct.op** %new_proto, align 8
  %187 = bitcast %struct.op* %186 to %struct.svop*
  %op_sv173 = getelementptr inbounds %struct.svop, %struct.svop* %187, i32 0, i32 7
  %188 = load %struct.sv*, %struct.sv** %op_sv173, align 8
  %sv_u174 = getelementptr inbounds %struct.sv, %struct.sv* %188, i32 0, i32 3
  %svu_pv175 = bitcast %union.anon* %sv_u174 to i8**
  %189 = load i8*, i8** %svu_pv175, align 8
  br label %cond.end179

cond.false176:                                    ; preds = %cond.end161
  %190 = load %struct.op*, %struct.op** %new_proto, align 8
  %191 = bitcast %struct.op* %190 to %struct.svop*
  %op_sv177 = getelementptr inbounds %struct.svop, %struct.svop* %191, i32 0, i32 7
  %192 = load %struct.sv*, %struct.sv** %op_sv177, align 8
  %call178 = call i8* @Perl_sv_2pv_flags(%struct.sv* %192, i64* %new_len145, i32 2)
  br label %cond.end179

cond.end179:                                      ; preds = %cond.false176, %cond.true169
  %cond180 = phi i8* [ %189, %cond.true169 ], [ %call178, %cond.false176 ]
  store i8* %cond180, i8** %newp163, align 8
  %193 = load %struct.op**, %struct.op*** %proto.addr, align 8
  %194 = load %struct.op*, %struct.op** %193, align 8
  %195 = bitcast %struct.op* %194 to %struct.svop*
  %op_sv181 = getelementptr inbounds %struct.svop, %struct.svop* %195, i32 0, i32 7
  %196 = load %struct.sv*, %struct.sv** %op_sv181, align 8
  %sv_flags182 = getelementptr inbounds %struct.sv, %struct.sv* %196, i32 0, i32 2
  %197 = load i32, i32* %sv_flags182, align 4
  %and183 = and i32 %197, 536870912
  %tobool184 = icmp ne i32 %and183, 0
  %198 = zext i1 %tobool184 to i64
  %cond185 = select i1 %tobool184, i32 1, i32 0
  %199 = load i64, i64* %old_len, align 8
  %200 = load i8*, i8** %oldp, align 8
  %201 = load %struct.op*, %struct.op** %new_proto, align 8
  %202 = bitcast %struct.op* %201 to %struct.svop*
  %op_sv186 = getelementptr inbounds %struct.svop, %struct.svop* %202, i32 0, i32 7
  %203 = load %struct.sv*, %struct.sv** %op_sv186, align 8
  %sv_flags187 = getelementptr inbounds %struct.sv, %struct.sv* %203, i32 0, i32 2
  %204 = load i32, i32* %sv_flags187, align 4
  %and188 = and i32 %204, 536870912
  %tobool189 = icmp ne i32 %and188, 0
  %205 = zext i1 %tobool189 to i64
  %cond190 = select i1 %tobool189, i32 1, i32 0
  %206 = load i64, i64* %new_len145, align 8
  %207 = load i8*, i8** %newp163, align 8
  %208 = load %struct.sv*, %struct.sv** %svname, align 8
  %209 = bitcast %struct.sv* %208 to i8*
  call void (i32, i8*, ...) @Perl_warner(i32 35, i8* getelementptr inbounds ([74 x i8], [74 x i8]* @.str.196, i64 0, i64 0), i32 %cond185, i64 %199, i8* %200, i32 %cond190, i64 %206, i8* %207, i8* %209)
  br label %if.end191

if.end191:                                        ; preds = %cond.end179, %land.lhs.true141, %if.end139
  %210 = load %struct.op**, %struct.op*** %proto.addr, align 8
  %211 = load %struct.op*, %struct.op** %210, align 8
  %tobool192 = icmp ne %struct.op* %211, null
  br i1 %tobool192, label %if.then193, label %if.end194

if.then193:                                       ; preds = %if.end191
  %212 = load %struct.op**, %struct.op*** %proto.addr, align 8
  %213 = load %struct.op*, %struct.op** %212, align 8
  call void @Perl_op_free(%struct.op* %213)
  br label %if.end194

if.end194:                                        ; preds = %if.then193, %if.end191
  %214 = load %struct.op*, %struct.op** %new_proto, align 8
  %215 = load %struct.op**, %struct.op*** %proto.addr, align 8
  store %struct.op* %214, %struct.op** %215, align 8
  br label %if.end195

if.end195:                                        ; preds = %if.then, %if.end194, %if.end105
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @S_perl_hash_one_at_a_time_hard(i8* %seed, i8* %str, i64 %len) #0 {
entry:
  %seed.addr = alloca i8*, align 8
  %str.addr = alloca i8*, align 8
  %len.addr = alloca i64, align 8
  %end = alloca i8*, align 8
  %hash = alloca i32, align 4
  store i8* %seed, i8** %seed.addr, align 8
  store i8* %str, i8** %str.addr, align 8
  store i64 %len, i64* %len.addr, align 8
  %0 = load i8*, i8** %str.addr, align 8
  %1 = load i64, i64* %len.addr, align 8
  %add.ptr = getelementptr inbounds i8, i8* %0, i64 %1
  store i8* %add.ptr, i8** %end, align 8
  %2 = load i8*, i8** %seed.addr, align 8
  %3 = bitcast i8* %2 to i32*
  %4 = load i32, i32* %3, align 4
  %5 = load i64, i64* %len.addr, align 8
  %conv = trunc i64 %5 to i32
  %add = add i32 %4, %conv
  store i32 %add, i32* %hash, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %6 = load i8*, i8** %str.addr, align 8
  %7 = load i8*, i8** %end, align 8
  %cmp = icmp ult i8* %6, %7
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %8 = load i32, i32* %hash, align 4
  %shl = shl i32 %8, 10
  %9 = load i32, i32* %hash, align 4
  %add2 = add i32 %9, %shl
  store i32 %add2, i32* %hash, align 4
  %10 = load i32, i32* %hash, align 4
  %shr = lshr i32 %10, 6
  %11 = load i32, i32* %hash, align 4
  %xor = xor i32 %11, %shr
  store i32 %xor, i32* %hash, align 4
  %12 = load i8*, i8** %str.addr, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %12, i32 1
  store i8* %incdec.ptr, i8** %str.addr, align 8
  %13 = load i8, i8* %12, align 1
  %conv3 = zext i8 %13 to i32
  %14 = load i32, i32* %hash, align 4
  %add4 = add i32 %14, %conv3
  store i32 %add4, i32* %hash, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %15 = load i32, i32* %hash, align 4
  %shl5 = shl i32 %15, 10
  %16 = load i32, i32* %hash, align 4
  %add6 = add i32 %16, %shl5
  store i32 %add6, i32* %hash, align 4
  %17 = load i32, i32* %hash, align 4
  %shr7 = lshr i32 %17, 6
  %18 = load i32, i32* %hash, align 4
  %xor8 = xor i32 %18, %shr7
  store i32 %xor8, i32* %hash, align 4
  %19 = load i8*, i8** %seed.addr, align 8
  %arrayidx = getelementptr inbounds i8, i8* %19, i64 4
  %20 = load i8, i8* %arrayidx, align 1
  %conv9 = zext i8 %20 to i32
  %21 = load i32, i32* %hash, align 4
  %add10 = add i32 %21, %conv9
  store i32 %add10, i32* %hash, align 4
  %22 = load i32, i32* %hash, align 4
  %shl11 = shl i32 %22, 10
  %23 = load i32, i32* %hash, align 4
  %add12 = add i32 %23, %shl11
  store i32 %add12, i32* %hash, align 4
  %24 = load i32, i32* %hash, align 4
  %shr13 = lshr i32 %24, 6
  %25 = load i32, i32* %hash, align 4
  %xor14 = xor i32 %25, %shr13
  store i32 %xor14, i32* %hash, align 4
  %26 = load i8*, i8** %seed.addr, align 8
  %arrayidx15 = getelementptr inbounds i8, i8* %26, i64 5
  %27 = load i8, i8* %arrayidx15, align 1
  %conv16 = zext i8 %27 to i32
  %28 = load i32, i32* %hash, align 4
  %add17 = add i32 %28, %conv16
  store i32 %add17, i32* %hash, align 4
  %29 = load i32, i32* %hash, align 4
  %shl18 = shl i32 %29, 10
  %30 = load i32, i32* %hash, align 4
  %add19 = add i32 %30, %shl18
  store i32 %add19, i32* %hash, align 4
  %31 = load i32, i32* %hash, align 4
  %shr20 = lshr i32 %31, 6
  %32 = load i32, i32* %hash, align 4
  %xor21 = xor i32 %32, %shr20
  store i32 %xor21, i32* %hash, align 4
  %33 = load i8*, i8** %seed.addr, align 8
  %arrayidx22 = getelementptr inbounds i8, i8* %33, i64 6
  %34 = load i8, i8* %arrayidx22, align 1
  %conv23 = zext i8 %34 to i32
  %35 = load i32, i32* %hash, align 4
  %add24 = add i32 %35, %conv23
  store i32 %add24, i32* %hash, align 4
  %36 = load i32, i32* %hash, align 4
  %shl25 = shl i32 %36, 10
  %37 = load i32, i32* %hash, align 4
  %add26 = add i32 %37, %shl25
  store i32 %add26, i32* %hash, align 4
  %38 = load i32, i32* %hash, align 4
  %shr27 = lshr i32 %38, 6
  %39 = load i32, i32* %hash, align 4
  %xor28 = xor i32 %39, %shr27
  store i32 %xor28, i32* %hash, align 4
  %40 = load i8*, i8** %seed.addr, align 8
  %arrayidx29 = getelementptr inbounds i8, i8* %40, i64 7
  %41 = load i8, i8* %arrayidx29, align 1
  %conv30 = zext i8 %41 to i32
  %42 = load i32, i32* %hash, align 4
  %add31 = add i32 %42, %conv30
  store i32 %add31, i32* %hash, align 4
  %43 = load i32, i32* %hash, align 4
  %shl32 = shl i32 %43, 10
  %44 = load i32, i32* %hash, align 4
  %add33 = add i32 %44, %shl32
  store i32 %add33, i32* %hash, align 4
  %45 = load i32, i32* %hash, align 4
  %shr34 = lshr i32 %45, 6
  %46 = load i32, i32* %hash, align 4
  %xor35 = xor i32 %46, %shr34
  store i32 %xor35, i32* %hash, align 4
  %47 = load i32, i32* %hash, align 4
  %shl36 = shl i32 %47, 3
  %48 = load i32, i32* %hash, align 4
  %add37 = add i32 %48, %shl36
  store i32 %add37, i32* %hash, align 4
  %49 = load i32, i32* %hash, align 4
  %shr38 = lshr i32 %49, 11
  %50 = load i32, i32* %hash, align 4
  %xor39 = xor i32 %50, %shr38
  store i32 %xor39, i32* %hash, align 4
  %51 = load i32, i32* %hash, align 4
  %52 = load i32, i32* %hash, align 4
  %shl40 = shl i32 %52, 15
  %add41 = add i32 %51, %shl40
  ret i32 %add41
}

declare dso_local void @Perl_unshare_hek(%struct.hek*) #3

declare dso_local %struct.hek* @Perl_share_hek(i8*, i32, i32) #3

; Function Attrs: noinline nounwind uwtable
define internal %struct.sv* @S_op_const_sv(%struct.op* %o, %struct.cv* %cv, i1 zeroext %allow_lex) #0 {
entry:
  %retval = alloca %struct.sv*, align 8
  %o.addr = alloca %struct.op*, align 8
  %cv.addr = alloca %struct.cv*, align 8
  %allow_lex.addr = alloca i8, align 1
  %sv = alloca %struct.sv*, align 8
  %padsv = alloca i8, align 1
  %type = alloca i16, align 2
  store %struct.op* %o, %struct.op** %o.addr, align 8
  store %struct.cv* %cv, %struct.cv** %cv.addr, align 8
  %frombool = zext i1 %allow_lex to i8
  store i8 %frombool, i8* %allow_lex.addr, align 1
  store %struct.sv* null, %struct.sv** %sv, align 8
  store i8 0, i8* %padsv, align 1
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load %struct.op*, %struct.op** %o.addr, align 8
  %tobool = icmp ne %struct.op* %0, null
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type = getelementptr inbounds %struct.op, %struct.op* %1, i32 0, i32 4
  %bf.load = load i16, i16* %op_type, align 8
  %bf.clear = and i16 %bf.load, 511
  %bf.cast = zext i16 %bf.clear to i32
  %conv = trunc i32 %bf.cast to i16
  store i16 %conv, i16* %type, align 2
  %2 = load i16, i16* %type, align 2
  %conv1 = zext i16 %2 to i32
  %cmp = icmp eq i32 %conv1, 193
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %for.body
  %3 = load i16, i16* %type, align 2
  %conv3 = zext i16 %3 to i32
  %cmp4 = icmp eq i32 %conv3, 192
  br i1 %cmp4, label %if.then, label %lor.lhs.false6

lor.lhs.false6:                                   ; preds = %lor.lhs.false
  %4 = load i16, i16* %type, align 2
  %conv7 = zext i16 %4 to i32
  %cmp8 = icmp eq i32 %conv7, 0
  br i1 %cmp8, label %if.then, label %lor.lhs.false10

lor.lhs.false10:                                  ; preds = %lor.lhs.false6
  %5 = load i16, i16* %type, align 2
  %conv11 = zext i16 %5 to i32
  %cmp12 = icmp eq i32 %conv11, 3
  br i1 %cmp12, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false10, %lor.lhs.false6, %lor.lhs.false, %for.body
  br label %for.inc

if.end:                                           ; preds = %lor.lhs.false10
  %6 = load i16, i16* %type, align 2
  %conv14 = zext i16 %6 to i32
  %cmp15 = icmp eq i32 %conv14, 194
  br i1 %cmp15, label %if.then17, label %if.end18

if.then17:                                        ; preds = %if.end
  br label %for.inc

if.end18:                                         ; preds = %if.end
  %7 = load i16, i16* %type, align 2
  %conv19 = zext i16 %7 to i32
  %cmp20 = icmp eq i32 %conv19, 186
  br i1 %cmp20, label %if.then22, label %if.end23

if.then22:                                        ; preds = %if.end18
  br label %for.end

if.end23:                                         ; preds = %if.end18
  %8 = load %struct.sv*, %struct.sv** %sv, align 8
  %tobool24 = icmp ne %struct.sv* %8, null
  br i1 %tobool24, label %if.then25, label %if.end26

if.then25:                                        ; preds = %if.end23
  store %struct.sv* null, %struct.sv** %retval, align 8
  br label %return

if.end26:                                         ; preds = %if.end23
  %9 = load i16, i16* %type, align 2
  %conv27 = zext i16 %9 to i32
  %cmp28 = icmp eq i32 %conv27, 5
  br i1 %cmp28, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %if.end26
  %10 = load %struct.op*, %struct.op** %o.addr, align 8
  %11 = bitcast %struct.op* %10 to %struct.svop*
  %op_sv = getelementptr inbounds %struct.svop, %struct.svop* %11, i32 0, i32 7
  %12 = load %struct.sv*, %struct.sv** %op_sv, align 8
  %tobool30 = icmp ne %struct.sv* %12, null
  br i1 %tobool30, label %if.then31, label %if.else

if.then31:                                        ; preds = %land.lhs.true
  %13 = load %struct.op*, %struct.op** %o.addr, align 8
  %14 = bitcast %struct.op* %13 to %struct.svop*
  %op_sv32 = getelementptr inbounds %struct.svop, %struct.svop* %14, i32 0, i32 7
  %15 = load %struct.sv*, %struct.sv** %op_sv32, align 8
  store %struct.sv* %15, %struct.sv** %sv, align 8
  br label %if.end55

if.else:                                          ; preds = %land.lhs.true, %if.end26
  %16 = load i16, i16* %type, align 2
  %conv33 = zext i16 %16 to i32
  %cmp34 = icmp eq i32 %conv33, 44
  br i1 %cmp34, label %land.lhs.true36, label %if.else39

land.lhs.true36:                                  ; preds = %if.else
  %17 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_private = getelementptr inbounds %struct.op, %struct.op* %17, i32 0, i32 6
  %18 = load i8, i8* %op_private, align 1
  %tobool37 = icmp ne i8 %18, 0
  br i1 %tobool37, label %if.else39, label %if.then38

if.then38:                                        ; preds = %land.lhs.true36
  %call = call %struct.sv* @Perl_newSV(i64 0)
  store %struct.sv* %call, %struct.sv** %sv, align 8
  %19 = load %struct.sv*, %struct.sv** %sv, align 8
  %20 = bitcast %struct.sv* %19 to i8*
  %21 = bitcast i8* %20 to %struct.sv*
  %22 = bitcast %struct.sv* %21 to i8*
  call void @Perl_save_pushptr(i8* %22, i32 11)
  br label %if.end54

if.else39:                                        ; preds = %land.lhs.true36, %if.else
  %23 = load i8, i8* %allow_lex.addr, align 1
  %tobool40 = trunc i8 %23 to i1
  br i1 %tobool40, label %land.lhs.true42, label %if.else52

land.lhs.true42:                                  ; preds = %if.else39
  %24 = load i16, i16* %type, align 2
  %conv43 = zext i16 %24 to i32
  %cmp44 = icmp eq i32 %conv43, 9
  br i1 %cmp44, label %if.then46, label %if.else52

if.then46:                                        ; preds = %land.lhs.true42
  %25 = load %struct.padnamelist*, %struct.padnamelist** @PL_comppad_name, align 8
  %xpadnl_alloc = getelementptr inbounds %struct.padnamelist, %struct.padnamelist* %25, i32 0, i32 1
  %26 = load %struct.padname**, %struct.padname*** %xpadnl_alloc, align 8
  %27 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_targ = getelementptr inbounds %struct.op, %struct.op* %27, i32 0, i32 3
  %28 = load i64, i64* %op_targ, align 8
  %arrayidx = getelementptr inbounds %struct.padname*, %struct.padname** %26, i64 %28
  %29 = load %struct.padname*, %struct.padname** %arrayidx, align 8
  %xpadn_flags = getelementptr inbounds %struct.padname, %struct.padname* %29, i32 0, i32 8
  %30 = load i8, i8* %xpadn_flags, align 1
  %conv47 = zext i8 %30 to i32
  %and = and i32 %conv47, 1
  %tobool48 = icmp ne i32 %and, 0
  br i1 %tobool48, label %if.then49, label %if.else50

if.then49:                                        ; preds = %if.then46
  store %struct.sv* @PL_sv_undef, %struct.sv** %sv, align 8
  store i8 1, i8* %padsv, align 1
  br label %if.end51

if.else50:                                        ; preds = %if.then46
  store %struct.sv* null, %struct.sv** %retval, align 8
  br label %return

if.end51:                                         ; preds = %if.then49
  br label %if.end53

if.else52:                                        ; preds = %land.lhs.true42, %if.else39
  store %struct.sv* null, %struct.sv** %retval, align 8
  br label %return

if.end53:                                         ; preds = %if.end51
  br label %if.end54

if.end54:                                         ; preds = %if.end53, %if.then38
  br label %if.end55

if.end55:                                         ; preds = %if.end54, %if.then31
  br label %for.inc

for.inc:                                          ; preds = %if.end55, %if.then17, %if.then
  %31 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %31, i32 0, i32 0
  %32 = load %struct.op*, %struct.op** %op_next, align 8
  store %struct.op* %32, %struct.op** %o.addr, align 8
  br label %for.cond

for.end:                                          ; preds = %if.then22, %for.cond
  %33 = load i8, i8* %padsv, align 1
  %tobool56 = trunc i8 %33 to i1
  br i1 %tobool56, label %if.then57, label %if.end58

if.then57:                                        ; preds = %for.end
  %34 = load %struct.cv*, %struct.cv** %cv.addr, align 8
  %sv_any = getelementptr inbounds %struct.cv, %struct.cv* %34, i32 0, i32 0
  %35 = load %struct.xpvcv*, %struct.xpvcv** %sv_any, align 8
  %36 = bitcast %struct.xpvcv* %35 to i8*
  %37 = bitcast i8* %36 to %struct.xpvcv*
  %xcv_flags = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %37, i32 0, i32 12
  %38 = load i32, i32* %xcv_flags, align 4
  %or = or i32 %38, 4
  store i32 %or, i32* %xcv_flags, align 4
  store %struct.sv* null, %struct.sv** %retval, align 8
  br label %return

if.end58:                                         ; preds = %for.end
  %39 = load %struct.sv*, %struct.sv** %sv, align 8
  store %struct.sv* %39, %struct.sv** %retval, align 8
  br label %return

return:                                           ; preds = %if.end58, %if.then57, %if.else52, %if.else50, %if.then25
  %40 = load %struct.sv*, %struct.sv** %retval, align 8
  ret %struct.sv* %40
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i1 @S_already_defined(%struct.cv* %cv, %struct.op* %block, %struct.op* %o, %struct.padname* %name, %struct.sv** %const_svp) #0 {
entry:
  %retval = alloca i1, align 1
  %cv.addr = alloca %struct.cv*, align 8
  %block.addr = alloca %struct.op*, align 8
  %o.addr = alloca %struct.op*, align 8
  %name.addr = alloca %struct.padname*, align 8
  %const_svp.addr = alloca %struct.sv**, align 8
  %pureperl = alloca i8, align 1
  %oldline = alloca i32, align 4
  %namesv = alloca %struct.sv*, align 8
  store %struct.cv* %cv, %struct.cv** %cv.addr, align 8
  store %struct.op* %block, %struct.op** %block.addr, align 8
  store %struct.op* %o, %struct.op** %o.addr, align 8
  store %struct.padname* %name, %struct.padname** %name.addr, align 8
  store %struct.sv** %const_svp, %struct.sv*** %const_svp.addr, align 8
  %0 = load %struct.op*, %struct.op** %block.addr, align 8
  %tobool = icmp ne %struct.op* %0, null
  br i1 %tobool, label %if.end28, label %if.then

if.then:                                          ; preds = %entry
  %1 = load %struct.cv*, %struct.cv** @PL_compcv, align 8
  %sv_any = getelementptr inbounds %struct.cv, %struct.cv* %1, i32 0, i32 0
  %2 = load %struct.xpvcv*, %struct.xpvcv** %sv_any, align 8
  %3 = bitcast %struct.xpvcv* %2 to i8*
  %4 = bitcast i8* %3 to %struct.xpvcv*
  %xcv_flags = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %4, i32 0, i32 12
  %5 = load i32, i32* %xcv_flags, align 4
  %tobool1 = icmp ne i32 %5, 0
  br i1 %tobool1, label %if.then2, label %if.end27

if.then2:                                         ; preds = %if.then
  %6 = load %struct.cv*, %struct.cv** %cv.addr, align 8
  %sv_any3 = getelementptr inbounds %struct.cv, %struct.cv* %6, i32 0, i32 0
  %7 = load %struct.xpvcv*, %struct.xpvcv** %sv_any3, align 8
  %8 = bitcast %struct.xpvcv* %7 to i8*
  %9 = bitcast i8* %8 to %struct.xpvcv*
  %xcv_flags4 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %9, i32 0, i32 12
  %10 = load i32, i32* %xcv_flags4, align 4
  %and = and i32 %10, 8
  %tobool5 = icmp ne i32 %and, 0
  br i1 %tobool5, label %land.end, label %land.rhs

land.rhs:                                         ; preds = %if.then2
  %11 = load %struct.cv*, %struct.cv** %cv.addr, align 8
  %sv_any6 = getelementptr inbounds %struct.cv, %struct.cv* %11, i32 0, i32 0
  %12 = load %struct.xpvcv*, %struct.xpvcv** %sv_any6, align 8
  %13 = bitcast %struct.xpvcv* %12 to i8*
  %14 = bitcast i8* %13 to %struct.xpvcv*
  %xcv_root_u = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %14, i32 0, i32 6
  %xcv_root = bitcast %union.anon.7* %xcv_root_u to %struct.op**
  %15 = load %struct.op*, %struct.op** %xcv_root, align 8
  %tobool7 = icmp ne %struct.op* %15, null
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.then2
  %16 = phi i1 [ false, %if.then2 ], [ %tobool7, %land.rhs ]
  %frombool = zext i1 %16 to i8
  store i8 %frombool, i8* %pureperl, align 1
  %17 = load %struct.cv*, %struct.cv** @PL_compcv, align 8
  %sv_any8 = getelementptr inbounds %struct.cv, %struct.cv* %17, i32 0, i32 0
  %18 = load %struct.xpvcv*, %struct.xpvcv** %sv_any8, align 8
  %19 = bitcast %struct.xpvcv* %18 to i8*
  %20 = bitcast i8* %19 to %struct.xpvcv*
  %xcv_flags9 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %20, i32 0, i32 12
  %21 = load i32, i32* %xcv_flags9, align 4
  %and10 = and i32 %21, 2
  %tobool11 = icmp ne i32 %and10, 0
  br i1 %tobool11, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %land.end
  %22 = load %struct.cv*, %struct.cv** %cv.addr, align 8
  %sv_any12 = getelementptr inbounds %struct.cv, %struct.cv* %22, i32 0, i32 0
  %23 = load %struct.xpvcv*, %struct.xpvcv** %sv_any12, align 8
  %24 = bitcast %struct.xpvcv* %23 to i8*
  %25 = bitcast i8* %24 to %struct.xpvcv*
  %xcv_flags13 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %25, i32 0, i32 12
  %26 = load i32, i32* %xcv_flags13, align 4
  %and14 = and i32 %26, 2
  %tobool15 = icmp ne i32 %and14, 0
  br i1 %tobool15, label %if.end, label %land.lhs.true16

land.lhs.true16:                                  ; preds = %land.lhs.true
  %27 = load i8, i8* %pureperl, align 1
  %tobool17 = trunc i8 %27 to i1
  br i1 %tobool17, label %land.lhs.true18, label %if.end

land.lhs.true18:                                  ; preds = %land.lhs.true16
  %call = call zeroext i1 @Perl_ckwarn(i32 12)
  br i1 %call, label %if.then19, label %if.end

if.then19:                                        ; preds = %land.lhs.true18
  %28 = load %struct.cv*, %struct.cv** @PL_compcv, align 8
  %29 = bitcast %struct.cv* %28 to i8*
  %30 = bitcast i8* %29 to %struct.sv*
  %31 = bitcast %struct.sv* %30 to i8*
  call void @Perl_save_pushptr(i8* %31, i32 11)
  call void (i32, i8*, ...) @Perl_warner(i32 12, i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str.197, i64 0, i64 0))
  %32 = load %struct.cv*, %struct.cv** @PL_compcv, align 8
  %33 = bitcast %struct.cv* %32 to i8*
  %34 = bitcast i8* %33 to %struct.sv*
  %sv_refcnt = getelementptr inbounds %struct.sv, %struct.sv* %34, i32 0, i32 1
  %35 = load i32, i32* %sv_refcnt, align 8
  %inc = add i32 %35, 1
  store i32 %inc, i32* %sv_refcnt, align 8
  br label %if.end

if.end:                                           ; preds = %if.then19, %land.lhs.true18, %land.lhs.true16, %land.lhs.true, %land.end
  %36 = load %struct.cv*, %struct.cv** @PL_compcv, align 8
  %sv_any20 = getelementptr inbounds %struct.cv, %struct.cv* %36, i32 0, i32 0
  %37 = load %struct.xpvcv*, %struct.xpvcv** %sv_any20, align 8
  %38 = bitcast %struct.xpvcv* %37 to i8*
  %39 = bitcast i8* %38 to %struct.xpvcv*
  %xcv_flags21 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %39, i32 0, i32 12
  %40 = load i32, i32* %xcv_flags21, align 4
  %and22 = and i32 %40, 131075
  %41 = load i8, i8* %pureperl, align 1
  %tobool23 = trunc i8 %41 to i1
  %conv = zext i1 %tobool23 to i32
  %mul = mul nsw i32 2, %conv
  %neg = xor i32 %mul, -1
  %and24 = and i32 %and22, %neg
  %42 = load %struct.cv*, %struct.cv** %cv.addr, align 8
  %sv_any25 = getelementptr inbounds %struct.cv, %struct.cv* %42, i32 0, i32 0
  %43 = load %struct.xpvcv*, %struct.xpvcv** %sv_any25, align 8
  %44 = bitcast %struct.xpvcv* %43 to i8*
  %45 = bitcast i8* %44 to %struct.xpvcv*
  %xcv_flags26 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %45, i32 0, i32 12
  %46 = load i32, i32* %xcv_flags26, align 4
  %or = or i32 %46, %and24
  store i32 %or, i32* %xcv_flags26, align 4
  br label %if.end27

if.end27:                                         ; preds = %if.end, %if.then
  store i1 false, i1* %retval, align 1
  br label %return

if.end28:                                         ; preds = %entry
  %47 = load %struct.cv*, %struct.cv** %cv.addr, align 8
  %sv_any29 = getelementptr inbounds %struct.cv, %struct.cv* %47, i32 0, i32 0
  %48 = load %struct.xpvcv*, %struct.xpvcv** %sv_any29, align 8
  %49 = bitcast %struct.xpvcv* %48 to i8*
  %50 = bitcast i8* %49 to %struct.xpvcv*
  %xcv_flags30 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %50, i32 0, i32 12
  %51 = load i32, i32* %xcv_flags30, align 4
  %and31 = and i32 %51, 4
  %tobool32 = icmp ne i32 %and31, 0
  br i1 %tobool32, label %if.then35, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end28
  %call33 = call zeroext i1 @Perl_ckwarn(i32 19)
  br i1 %call33, label %if.then35, label %if.end51

if.then35:                                        ; preds = %lor.lhs.false, %if.end28
  %52 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_line = getelementptr inbounds %struct.cop, %struct.cop* %52, i32 0, i32 7
  %53 = load i32, i32* %cop_line, align 4
  store i32 %53, i32* %oldline, align 4
  %54 = load %struct.op*, %struct.op** %o.addr, align 8
  %tobool36 = icmp ne %struct.op* %54, null
  br i1 %tobool36, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then35
  %55 = load %struct.op*, %struct.op** %o.addr, align 8
  %56 = bitcast %struct.op* %55 to %struct.svop*
  %op_sv = getelementptr inbounds %struct.svop, %struct.svop* %56, i32 0, i32 7
  %57 = load %struct.sv*, %struct.sv** %op_sv, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.then35
  %58 = load %struct.padname*, %struct.padname** %name.addr, align 8
  %xpadn_pv = getelementptr inbounds %struct.padname, %struct.padname* %58, i32 0, i32 0
  %59 = load i8*, i8** %xpadn_pv, align 8
  %add.ptr = getelementptr inbounds i8, i8* %59, i64 1
  %60 = load %struct.padname*, %struct.padname** %name.addr, align 8
  %xpadn_len = getelementptr inbounds %struct.padname, %struct.padname* %60, i32 0, i32 7
  %61 = load i8, i8* %xpadn_len, align 8
  %conv37 = zext i8 %61 to i32
  %sub = sub nsw i32 %conv37, 1
  %conv38 = sext i32 %sub to i64
  %call39 = call %struct.sv* @Perl_newSVpvn_flags(i8* %add.ptr, i64 %conv38, i32 536870912)
  %call40 = call %struct.sv* @Perl_sv_2mortal(%struct.sv* %call39)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.sv* [ %57, %cond.true ], [ %call40, %cond.false ]
  store %struct.sv* %cond, %struct.sv** %namesv, align 8
  %62 = load %struct.yy_parser*, %struct.yy_parser** @PL_parser, align 8
  %tobool41 = icmp ne %struct.yy_parser* %62, null
  br i1 %tobool41, label %land.lhs.true42, label %if.end47

land.lhs.true42:                                  ; preds = %cond.end
  %63 = load %struct.yy_parser*, %struct.yy_parser** @PL_parser, align 8
  %copline = getelementptr inbounds %struct.yy_parser, %struct.yy_parser* %63, i32 0, i32 41
  %64 = load i32, i32* %copline, align 8
  %cmp = icmp ne i32 %64, -1
  br i1 %cmp, label %if.then44, label %if.end47

if.then44:                                        ; preds = %land.lhs.true42
  %65 = load %struct.yy_parser*, %struct.yy_parser** @PL_parser, align 8
  %copline45 = getelementptr inbounds %struct.yy_parser, %struct.yy_parser* %65, i32 0, i32 41
  %66 = load i32, i32* %copline45, align 8
  %67 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_line46 = getelementptr inbounds %struct.cop, %struct.cop* %67, i32 0, i32 7
  store i32 %66, i32* %cop_line46, align 4
  br label %if.end47

if.end47:                                         ; preds = %if.then44, %land.lhs.true42, %cond.end
  %68 = load %struct.cv*, %struct.cv** @PL_compcv, align 8
  %69 = bitcast %struct.cv* %68 to i8*
  %70 = bitcast i8* %69 to %struct.sv*
  %71 = bitcast %struct.sv* %70 to i8*
  call void @Perl_save_pushptr(i8* %71, i32 11)
  %72 = load %struct.sv*, %struct.sv** %namesv, align 8
  %73 = load %struct.cv*, %struct.cv** %cv.addr, align 8
  %74 = load %struct.sv**, %struct.sv*** %const_svp.addr, align 8
  call void @Perl_report_redefined_cv(%struct.sv* %72, %struct.cv* %73, %struct.sv** %74)
  %75 = load %struct.cv*, %struct.cv** @PL_compcv, align 8
  %76 = bitcast %struct.cv* %75 to i8*
  %77 = bitcast i8* %76 to %struct.sv*
  %sv_refcnt48 = getelementptr inbounds %struct.sv, %struct.sv* %77, i32 0, i32 1
  %78 = load i32, i32* %sv_refcnt48, align 8
  %inc49 = add i32 %78, 1
  store i32 %inc49, i32* %sv_refcnt48, align 8
  %79 = load i32, i32* %oldline, align 4
  %80 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_line50 = getelementptr inbounds %struct.cop, %struct.cop* %80, i32 0, i32 7
  store i32 %79, i32* %cop_line50, align 4
  br label %if.end51

if.end51:                                         ; preds = %if.end47, %lor.lhs.false
  %81 = load %struct.cv*, %struct.cv** %cv.addr, align 8
  %82 = bitcast %struct.cv* %81 to i8*
  %83 = bitcast i8* %82 to %struct.sv*
  %84 = bitcast %struct.sv* %83 to i8*
  call void @Perl_save_pushptr(i8* %84, i32 11)
  store i1 true, i1* %retval, align 1
  br label %return

return:                                           ; preds = %if.end51, %if.end27
  %85 = load i1, i1* %retval, align 1
  ret i1 %85
}

declare dso_local %struct.sv* @Perl_newSV_type(i32) #3

declare dso_local void @Perl_cvstash_set(%struct.cv*, %struct.hv*) #3

; Function Attrs: noinline nounwind uwtable
define internal void @const_sv_xsub(%struct.cv* %cv) #0 {
entry:
  %cv.addr = alloca %struct.cv*, align 8
  %sp = alloca %struct.sv**, align 8
  %ax = alloca i32, align 4
  %mark = alloca %struct.sv**, align 8
  %items = alloca i32, align 4
  %sv = alloca %struct.sv*, align 8
  %tmpXSoff = alloca i64, align 8
  %tmpXSoff14 = alloca i64, align 8
  store %struct.cv* %cv, %struct.cv** %cv.addr, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load i32*, i32** @PL_markstack_ptr, align 8
  %incdec.ptr = getelementptr inbounds i32, i32* %1, i32 -1
  store i32* %incdec.ptr, i32** @PL_markstack_ptr, align 8
  %2 = load i32, i32* %1, align 4
  store i32 %2, i32* %ax, align 4
  %3 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %4 = load i32, i32* %ax, align 4
  %inc = add nsw i32 %4, 1
  store i32 %inc, i32* %ax, align 4
  %idx.ext = sext i32 %4 to i64
  %add.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %3, i64 %idx.ext
  store %struct.sv** %add.ptr, %struct.sv*** %mark, align 8
  %5 = load %struct.sv**, %struct.sv*** %sp, align 8
  %6 = load %struct.sv**, %struct.sv*** %mark, align 8
  %sub.ptr.lhs.cast = ptrtoint %struct.sv** %5 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.sv** %6 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 8
  %conv = trunc i64 %sub.ptr.div to i32
  store i32 %conv, i32* %items, align 4
  %7 = load %struct.cv*, %struct.cv** %cv.addr, align 8
  %sv_any = getelementptr inbounds %struct.cv, %struct.cv* %7, i32 0, i32 0
  %8 = load %struct.xpvcv*, %struct.xpvcv** %sv_any, align 8
  %9 = bitcast %struct.xpvcv* %8 to i8*
  %10 = bitcast i8* %9 to %struct.xpvcv*
  %xcv_start_u = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %10, i32 0, i32 5
  %xcv_xsubany = bitcast %union.anon.6* %xcv_start_u to %union.any*
  %any_ptr = bitcast %union.any* %xcv_xsubany to i8**
  %11 = load i8*, i8** %any_ptr, align 8
  %12 = bitcast i8* %11 to %struct.sv*
  store %struct.sv* %12, %struct.sv** %sv, align 8
  %13 = load i32, i32* %items, align 4
  %14 = load %struct.sv*, %struct.sv** %sv, align 8
  %tobool = icmp ne %struct.sv* %14, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  br label %do.body

do.body:                                          ; preds = %if.then
  store i64 0, i64* %tmpXSoff, align 8
  %15 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %16 = load i32, i32* %ax, align 4
  %idx.ext1 = sext i32 %16 to i64
  %add.ptr2 = getelementptr inbounds %struct.sv*, %struct.sv** %15, i64 %idx.ext1
  %add.ptr3 = getelementptr inbounds %struct.sv*, %struct.sv** %add.ptr2, i64 -1
  store %struct.sv** %add.ptr3, %struct.sv*** @PL_stack_sp, align 8
  br label %do.end18

do.end:                                           ; No predecessors!
  br label %if.end

if.end:                                           ; preds = %do.end, %entry
  br label %do.body4

do.body4:                                         ; preds = %if.end
  %17 = load %struct.sv**, %struct.sv*** @PL_stack_max, align 8
  %18 = load %struct.sv**, %struct.sv*** %sp, align 8
  %sub.ptr.lhs.cast5 = ptrtoint %struct.sv** %17 to i64
  %sub.ptr.rhs.cast6 = ptrtoint %struct.sv** %18 to i64
  %sub.ptr.sub7 = sub i64 %sub.ptr.lhs.cast5, %sub.ptr.rhs.cast6
  %sub.ptr.div8 = sdiv exact i64 %sub.ptr.sub7, 8
  %cmp = icmp slt i64 %sub.ptr.div8, 1
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %do.body4
  br i1 true, label %if.then10, label %if.end11

cond.false:                                       ; preds = %do.body4
  br i1 false, label %if.then10, label %if.end11

if.then10:                                        ; preds = %cond.false, %cond.true
  %19 = load %struct.sv**, %struct.sv*** %sp, align 8
  %20 = load %struct.sv**, %struct.sv*** %sp, align 8
  %call = call %struct.sv** @Perl_stack_grow(%struct.sv** %19, %struct.sv** %20, i64 1)
  store %struct.sv** %call, %struct.sv*** %sp, align 8
  %21 = load %struct.sv**, %struct.sv*** %sp, align 8
  br label %if.end11

if.end11:                                         ; preds = %if.then10, %cond.false, %cond.true
  br label %do.end12

do.end12:                                         ; preds = %if.end11
  %22 = load %struct.sv*, %struct.sv** %sv, align 8
  %23 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %24 = load i32, i32* %ax, align 4
  %add = add nsw i32 %24, 0
  %idxprom = sext i32 %add to i64
  %arrayidx = getelementptr inbounds %struct.sv*, %struct.sv** %23, i64 %idxprom
  store %struct.sv* %22, %struct.sv** %arrayidx, align 8
  br label %do.body13

do.body13:                                        ; preds = %do.end12
  store i64 1, i64* %tmpXSoff14, align 8
  %25 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %26 = load i32, i32* %ax, align 4
  %idx.ext15 = sext i32 %26 to i64
  %add.ptr16 = getelementptr inbounds %struct.sv*, %struct.sv** %25, i64 %idx.ext15
  %add.ptr17 = getelementptr inbounds %struct.sv*, %struct.sv** %add.ptr16, i64 0
  store %struct.sv** %add.ptr17, %struct.sv*** @PL_stack_sp, align 8
  br label %do.end18

do.end18:                                         ; preds = %do.body, %do.body13
  ret void
}

declare dso_local void @Perl_pad_fixup_inner_anons(%struct.padlist*, %struct.cv*, %struct.cv*) #3

declare dso_local void @Perl_pad_tidy(i32) #3

; Function Attrs: noinline nounwind uwtable
define internal void @S_apply_attrs(%struct.hv* %stash, %struct.sv* %target, %struct.op* %attrs) #0 {
entry:
  %stash.addr = alloca %struct.hv*, align 8
  %target.addr = alloca %struct.sv*, align 8
  %attrs.addr = alloca %struct.op*, align 8
  %stashsv = alloca %struct.sv*, align 8
  store %struct.hv* %stash, %struct.hv** %stash.addr, align 8
  store %struct.sv* %target, %struct.sv** %target.addr, align 8
  store %struct.op* %attrs, %struct.op** %attrs.addr, align 8
  %0 = load %struct.hv*, %struct.hv** %stash.addr, align 8
  %tobool = icmp ne %struct.hv* %0, null
  br i1 %tobool, label %cond.true, label %cond.false30

cond.true:                                        ; preds = %entry
  %1 = load %struct.hv*, %struct.hv** %stash.addr, align 8
  %sv_flags = getelementptr inbounds %struct.hv, %struct.hv* %1, i32 0, i32 2
  %2 = load i32, i32* %sv_flags, align 4
  %and = and i32 %2, 33554432
  %tobool1 = icmp ne i32 %and, 0
  br i1 %tobool1, label %land.lhs.true, label %cond.false27

land.lhs.true:                                    ; preds = %cond.true
  %3 = load %struct.hv*, %struct.hv** %stash.addr, align 8
  %sv_u = getelementptr inbounds %struct.hv, %struct.hv* %3, i32 0, i32 3
  %svu_hash = bitcast %union.anon.4* %sv_u to %struct.he***
  %4 = load %struct.he**, %struct.he*** %svu_hash, align 8
  %5 = load %struct.hv*, %struct.hv** %stash.addr, align 8
  %sv_any = getelementptr inbounds %struct.hv, %struct.hv* %5, i32 0, i32 0
  %6 = load %struct.xpvhv*, %struct.xpvhv** %sv_any, align 8
  %xhv_max = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %6, i32 0, i32 3
  %7 = load i64, i64* %xhv_max, align 8
  %add = add i64 %7, 1
  %arrayidx = getelementptr inbounds %struct.he*, %struct.he** %4, i64 %add
  %8 = bitcast %struct.he** %arrayidx to %struct.xpvhv_aux*
  %xhv_name_u = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %8, i32 0, i32 0
  %xhvnameu_name = bitcast %union._xhvnameu* %xhv_name_u to %struct.hek**
  %9 = load %struct.hek*, %struct.hek** %xhvnameu_name, align 8
  %tobool2 = icmp ne %struct.hek* %9, null
  br i1 %tobool2, label %cond.true3, label %cond.false27

cond.true3:                                       ; preds = %land.lhs.true
  %10 = load %struct.hv*, %struct.hv** %stash.addr, align 8
  %sv_u4 = getelementptr inbounds %struct.hv, %struct.hv* %10, i32 0, i32 3
  %svu_hash5 = bitcast %union.anon.4* %sv_u4 to %struct.he***
  %11 = load %struct.he**, %struct.he*** %svu_hash5, align 8
  %12 = load %struct.hv*, %struct.hv** %stash.addr, align 8
  %sv_any6 = getelementptr inbounds %struct.hv, %struct.hv* %12, i32 0, i32 0
  %13 = load %struct.xpvhv*, %struct.xpvhv** %sv_any6, align 8
  %xhv_max7 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %13, i32 0, i32 3
  %14 = load i64, i64* %xhv_max7, align 8
  %add8 = add i64 %14, 1
  %arrayidx9 = getelementptr inbounds %struct.he*, %struct.he** %11, i64 %add8
  %15 = bitcast %struct.he** %arrayidx9 to %struct.xpvhv_aux*
  %xhv_name_count = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %15, i32 0, i32 4
  %16 = load i32, i32* %xhv_name_count, align 4
  %tobool10 = icmp ne i32 %16, 0
  br i1 %tobool10, label %cond.true11, label %cond.false

cond.true11:                                      ; preds = %cond.true3
  %17 = load %struct.hv*, %struct.hv** %stash.addr, align 8
  %sv_u12 = getelementptr inbounds %struct.hv, %struct.hv* %17, i32 0, i32 3
  %svu_hash13 = bitcast %union.anon.4* %sv_u12 to %struct.he***
  %18 = load %struct.he**, %struct.he*** %svu_hash13, align 8
  %19 = load %struct.hv*, %struct.hv** %stash.addr, align 8
  %sv_any14 = getelementptr inbounds %struct.hv, %struct.hv* %19, i32 0, i32 0
  %20 = load %struct.xpvhv*, %struct.xpvhv** %sv_any14, align 8
  %xhv_max15 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %20, i32 0, i32 3
  %21 = load i64, i64* %xhv_max15, align 8
  %add16 = add i64 %21, 1
  %arrayidx17 = getelementptr inbounds %struct.he*, %struct.he** %18, i64 %add16
  %22 = bitcast %struct.he** %arrayidx17 to %struct.xpvhv_aux*
  %xhv_name_u18 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %22, i32 0, i32 0
  %xhvnameu_names = bitcast %union._xhvnameu* %xhv_name_u18 to %struct.hek***
  %23 = load %struct.hek**, %struct.hek*** %xhvnameu_names, align 8
  %24 = load %struct.hek*, %struct.hek** %23, align 8
  br label %cond.end

cond.false:                                       ; preds = %cond.true3
  %25 = load %struct.hv*, %struct.hv** %stash.addr, align 8
  %sv_u19 = getelementptr inbounds %struct.hv, %struct.hv* %25, i32 0, i32 3
  %svu_hash20 = bitcast %union.anon.4* %sv_u19 to %struct.he***
  %26 = load %struct.he**, %struct.he*** %svu_hash20, align 8
  %27 = load %struct.hv*, %struct.hv** %stash.addr, align 8
  %sv_any21 = getelementptr inbounds %struct.hv, %struct.hv* %27, i32 0, i32 0
  %28 = load %struct.xpvhv*, %struct.xpvhv** %sv_any21, align 8
  %xhv_max22 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %28, i32 0, i32 3
  %29 = load i64, i64* %xhv_max22, align 8
  %add23 = add i64 %29, 1
  %arrayidx24 = getelementptr inbounds %struct.he*, %struct.he** %26, i64 %add23
  %30 = bitcast %struct.he** %arrayidx24 to %struct.xpvhv_aux*
  %xhv_name_u25 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %30, i32 0, i32 0
  %xhvnameu_name26 = bitcast %union._xhvnameu* %xhv_name_u25 to %struct.hek**
  %31 = load %struct.hek*, %struct.hek** %xhvnameu_name26, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true11
  %cond = phi %struct.hek* [ %24, %cond.true11 ], [ %31, %cond.false ]
  br label %cond.end28

cond.false27:                                     ; preds = %land.lhs.true, %cond.true
  br label %cond.end28

cond.end28:                                       ; preds = %cond.false27, %cond.end
  %cond29 = phi %struct.hek* [ %cond, %cond.end ], [ null, %cond.false27 ]
  %call = call %struct.sv* @Perl_newSVhek(%struct.hek* %cond29)
  br label %cond.end31

cond.false30:                                     ; preds = %entry
  br label %cond.end31

cond.end31:                                       ; preds = %cond.false30, %cond.end28
  %cond32 = phi %struct.sv* [ %call, %cond.end28 ], [ @PL_sv_no, %cond.false30 ]
  store %struct.sv* %cond32, %struct.sv** %stashsv, align 8
  %call33 = call %struct.sv* @Perl_newSVpvn(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.36, i64 0, i64 0), i64 10)
  %32 = load %struct.sv*, %struct.sv** %stashsv, align 8
  %call34 = call %struct.op* @Perl_newSVOP(i32 5, i32 0, %struct.sv* %32)
  %33 = load %struct.sv*, %struct.sv** %target.addr, align 8
  %call35 = call %struct.sv* @Perl_newRV(%struct.sv* %33)
  %call36 = call %struct.op* @Perl_newSVOP(i32 5, i32 0, %struct.sv* %call35)
  %34 = load %struct.op*, %struct.op** %attrs.addr, align 8
  %call37 = call %struct.op* @S_dup_attrlist(%struct.op* %34)
  %call38 = call %struct.op* @Perl_op_prepend_elem(i32 158, %struct.op* %call36, %struct.op* %call37)
  %call39 = call %struct.op* @Perl_op_prepend_elem(i32 158, %struct.op* %call34, %struct.op* %call38)
  call void (i32, %struct.sv*, %struct.sv*, ...) @Perl_load_module(i32 4, %struct.sv* %call33, %struct.sv* null, %struct.op* %call39)
  ret void
}

declare dso_local void @Perl_sv_sethek(%struct.sv*, %struct.hek*) #3

declare dso_local i8* @Perl_hv_common_key_len(%struct.hv*, i8*, i32, i32, %struct.sv*, i32) #3

declare dso_local %struct.gv* @Perl_gv_add_by_type(%struct.gv*, i32) #3

declare dso_local %struct.cv* @Perl_cv_clone_into(%struct.cv*, %struct.cv*) #3

declare dso_local %struct.cv* @Perl_cv_clone(%struct.cv*) #3

; Function Attrs: nounwind readonly
declare dso_local i8* @memchr(i8*, i32, i64) #4

declare dso_local %struct.gv* @Perl_gv_fetchsv(%struct.sv*, i32, i32) #3

declare dso_local void @Perl_sv_setpvf(%struct.sv*, i8*, ...) #3

; Function Attrs: nounwind readonly
declare dso_local i8* @strrchr(i8*, i32) #4

; Function Attrs: nounwind readonly
declare dso_local i32 @strcmp(i8*, i8*) #4

declare dso_local void @Perl_gv_init_pvn(%struct.gv*, %struct.hv*, i8*, i64, i32) #3

declare dso_local i32 @Perl_sv_cmp_flags(%struct.sv*, %struct.sv*, i32) #3

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.cv* @Perl_newCONSTSUB_flags(%struct.hv* %stash, i8* %name, i64 %len, i32 %flags, %struct.sv* %sv) #0 {
entry:
  %stash.addr = alloca %struct.hv*, align 8
  %name.addr = alloca i8*, align 8
  %len.addr = alloca i64, align 8
  %flags.addr = alloca i32, align 4
  %sv.addr = alloca %struct.sv*, align 8
  %cv = alloca %struct.cv*, align 8
  %file = alloca i8*, align 8
  store %struct.hv* %stash, %struct.hv** %stash.addr, align 8
  store i8* %name, i8** %name.addr, align 8
  store i64 %len, i64* %len.addr, align 8
  store i32 %flags, i32* %flags.addr, align 4
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  %0 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_filegv = getelementptr inbounds %struct.cop, %struct.cop* %0, i32 0, i32 9
  %1 = load %struct.gv*, %struct.gv** %cop_filegv, align 8
  %tobool = icmp ne %struct.gv* %1, null
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %2 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_filegv1 = getelementptr inbounds %struct.cop, %struct.cop* %2, i32 0, i32 9
  %3 = load %struct.gv*, %struct.gv** %cop_filegv1, align 8
  %sv_any = getelementptr inbounds %struct.gv, %struct.gv* %3, i32 0, i32 0
  %4 = load %struct.xpvgv*, %struct.xpvgv** %sv_any, align 8
  %xiv_u = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %4, i32 0, i32 4
  %xivu_namehek = bitcast %union._xivu* %xiv_u to %struct.hek**
  %5 = load %struct.hek*, %struct.hek** %xivu_namehek, align 8
  %hek_key = getelementptr inbounds %struct.hek, %struct.hek* %5, i32 0, i32 2
  %arraydecay = getelementptr inbounds [1 x i8], [1 x i8]* %hek_key, i64 0, i64 0
  %add.ptr = getelementptr inbounds i8, i8* %arraydecay, i64 2
  br label %cond.end

cond.false:                                       ; preds = %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %add.ptr, %cond.true ], [ null, %cond.false ]
  store i8* %cond, i8** %file, align 8
  call void @Perl_push_scope()
  %6 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cmp = icmp ne %struct.cop* %6, @PL_compiling
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %cond.end
  call void @Perl_save_vptr(i8* bitcast (%struct.cop** @PL_curcop to i8*))
  %7 = load i64*, i64** getelementptr inbounds (%struct.cop, %struct.cop* @PL_compiling, i32 0, i32 12), align 8
  %8 = bitcast i64* %7 to i8*
  call void @Perl_save_pushptr(i8* %8, i32 6)
  %9 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings = getelementptr inbounds %struct.cop, %struct.cop* %9, i32 0, i32 12
  %10 = load i64*, i64** %cop_warnings, align 8
  %cmp2 = icmp eq i64* %10, null
  br i1 %cmp2, label %cond.true8, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.then
  %11 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings3 = getelementptr inbounds %struct.cop, %struct.cop* %11, i32 0, i32 12
  %12 = load i64*, i64** %cop_warnings3, align 8
  %cmp4 = icmp eq i64* %12, getelementptr inbounds (i64, i64* null, i64 1)
  br i1 %cmp4, label %cond.true8, label %lor.lhs.false5

lor.lhs.false5:                                   ; preds = %lor.lhs.false
  %13 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings6 = getelementptr inbounds %struct.cop, %struct.cop* %13, i32 0, i32 12
  %14 = load i64*, i64** %cop_warnings6, align 8
  %cmp7 = icmp eq i64* %14, getelementptr inbounds (i64, i64* null, i64 2)
  br i1 %cmp7, label %cond.true8, label %cond.false10

cond.true8:                                       ; preds = %lor.lhs.false5, %lor.lhs.false, %if.then
  %15 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings9 = getelementptr inbounds %struct.cop, %struct.cop* %15, i32 0, i32 12
  %16 = load i64*, i64** %cop_warnings9, align 8
  br label %cond.end15

cond.false10:                                     ; preds = %lor.lhs.false5
  %17 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings11 = getelementptr inbounds %struct.cop, %struct.cop* %17, i32 0, i32 12
  %18 = load i64*, i64** %cop_warnings11, align 8
  %19 = load i64, i64* %18, align 8
  %add = add i64 8, %19
  %call = call noalias i8* @malloc(i64 %add) #5
  %20 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings12 = getelementptr inbounds %struct.cop, %struct.cop* %20, i32 0, i32 12
  %21 = load i64*, i64** %cop_warnings12, align 8
  %22 = bitcast i64* %21 to i8*
  %23 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_warnings13 = getelementptr inbounds %struct.cop, %struct.cop* %23, i32 0, i32 12
  %24 = load i64*, i64** %cop_warnings13, align 8
  %25 = load i64, i64* %24, align 8
  %add14 = add i64 8, %25
  %mul = mul i64 %add14, 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %call, i8* align 1 %22, i64 %mul, i1 false)
  %26 = bitcast i8* %call to i64*
  br label %cond.end15

cond.end15:                                       ; preds = %cond.false10, %cond.true8
  %cond16 = phi i64* [ %16, %cond.true8 ], [ %26, %cond.false10 ]
  store i64* %cond16, i64** getelementptr inbounds (%struct.cop, %struct.cop* @PL_compiling, i32 0, i32 12), align 8
  store %struct.cop* @PL_compiling, %struct.cop** @PL_curcop, align 8
  br label %if.end

if.end:                                           ; preds = %cond.end15, %cond.end
  %27 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_line = getelementptr inbounds %struct.cop, %struct.cop* %27, i32 0, i32 7
  call void @Perl_save_I32(i32* %cop_line)
  %28 = load %struct.yy_parser*, %struct.yy_parser** @PL_parser, align 8
  %tobool17 = icmp ne %struct.yy_parser* %28, null
  br i1 %tobool17, label %cond.true18, label %cond.false19

cond.true18:                                      ; preds = %if.end
  %29 = load %struct.yy_parser*, %struct.yy_parser** @PL_parser, align 8
  %copline = getelementptr inbounds %struct.yy_parser, %struct.yy_parser* %29, i32 0, i32 41
  %30 = load i32, i32* %copline, align 8
  br label %cond.end20

cond.false19:                                     ; preds = %if.end
  br label %cond.end20

cond.end20:                                       ; preds = %cond.false19, %cond.true18
  %cond21 = phi i32 [ %30, %cond.true18 ], [ -1, %cond.false19 ]
  %31 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_line22 = getelementptr inbounds %struct.cop, %struct.cop* %31, i32 0, i32 7
  store i32 %cond21, i32* %cop_line22, align 4
  call void @Perl_save_hints()
  %32 = load i32, i32* getelementptr inbounds (%struct.cop, %struct.cop* @PL_compiling, i32 0, i32 10), align 8
  %and = and i32 %32, -257
  store i32 %and, i32* getelementptr inbounds (%struct.cop, %struct.cop* @PL_compiling, i32 0, i32 10), align 8
  %33 = load %struct.hv*, %struct.hv** %stash.addr, align 8
  %tobool23 = icmp ne %struct.hv* %33, null
  br i1 %tobool23, label %if.then24, label %if.end25

if.then24:                                        ; preds = %cond.end20
  call void @Perl_save_generic_svref(%struct.sv** bitcast (%struct.hv** @PL_curstash to %struct.sv**))
  %34 = load %struct.hv*, %struct.hv** %stash.addr, align 8
  %sv_refcnt = getelementptr inbounds %struct.hv, %struct.hv* %34, i32 0, i32 1
  %35 = load i32, i32* %sv_refcnt, align 8
  %inc = add i32 %35, 1
  store i32 %inc, i32* %sv_refcnt, align 8
  %36 = load %struct.hv*, %struct.hv** %stash.addr, align 8
  %37 = bitcast %struct.hv* %36 to i8*
  %38 = bitcast i8* %37 to %struct.sv*
  %39 = bitcast %struct.sv* %38 to %struct.hv*
  store %struct.hv* %39, %struct.hv** @PL_curstash, align 8
  br label %if.end25

if.end25:                                         ; preds = %if.then24, %cond.end20
  %40 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %tobool26 = icmp ne %struct.sv* %40, null
  br i1 %tobool26, label %if.then27, label %if.end28

if.then27:                                        ; preds = %if.end25
  %41 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %42 = bitcast %struct.sv* %41 to i8*
  %43 = bitcast i8* %42 to %struct.sv*
  %44 = bitcast %struct.sv* %43 to i8*
  call void @Perl_save_pushptr(i8* %44, i32 11)
  br label %if.end28

if.end28:                                         ; preds = %if.then27, %if.end25
  %45 = load i8*, i8** %name.addr, align 8
  %46 = load i64, i64* %len.addr, align 8
  %47 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %tobool29 = icmp ne %struct.sv* %47, null
  br i1 %tobool29, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %if.end28
  %48 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %48, i32 0, i32 2
  %49 = load i32, i32* %sv_flags, align 4
  %and30 = and i32 %49, 255
  %cmp31 = icmp eq i32 %and30, 11
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.end28
  %50 = phi i1 [ false, %if.end28 ], [ %cmp31, %land.rhs ]
  %51 = zext i1 %50 to i64
  %cond32 = select i1 %50, void (%struct.cv*)* @const_av_xsub, void (%struct.cv*)* @const_sv_xsub
  %52 = load i8*, i8** %file, align 8
  %tobool33 = icmp ne i8* %52, null
  br i1 %tobool33, label %cond.true34, label %cond.false35

cond.true34:                                      ; preds = %land.end
  %53 = load i8*, i8** %file, align 8
  br label %cond.end36

cond.false35:                                     ; preds = %land.end
  br label %cond.end36

cond.end36:                                       ; preds = %cond.false35, %cond.true34
  %cond37 = phi i8* [ %53, %cond.true34 ], [ getelementptr inbounds ([1 x i8], [1 x i8]* @.str.17, i64 0, i64 0), %cond.false35 ]
  %54 = load i32, i32* %flags.addr, align 4
  %or = or i32 1, %54
  %call38 = call %struct.cv* @Perl_newXS_len_flags(i8* %45, i64 %46, void (%struct.cv*)* %cond32, i8* %cond37, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.17, i64 0, i64 0), %struct.sv** %sv.addr, i32 %or)
  store %struct.cv* %call38, %struct.cv** %cv, align 8
  %55 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %56 = bitcast %struct.sv* %55 to i8*
  %57 = bitcast i8* %56 to %struct.sv*
  %call39 = call %struct.sv* @S_SvREFCNT_inc(%struct.sv* %57)
  %58 = bitcast %struct.sv* %call39 to i8*
  %59 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any40 = getelementptr inbounds %struct.cv, %struct.cv* %59, i32 0, i32 0
  %60 = load %struct.xpvcv*, %struct.xpvcv** %sv_any40, align 8
  %61 = bitcast %struct.xpvcv* %60 to i8*
  %62 = bitcast i8* %61 to %struct.xpvcv*
  %xcv_start_u = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %62, i32 0, i32 5
  %xcv_xsubany = bitcast %union.anon.6* %xcv_start_u to %union.any*
  %any_ptr = bitcast %union.any* %xcv_xsubany to i8**
  store i8* %58, i8** %any_ptr, align 8
  %63 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any41 = getelementptr inbounds %struct.cv, %struct.cv* %63, i32 0, i32 0
  %64 = load %struct.xpvcv*, %struct.xpvcv** %sv_any41, align 8
  %65 = bitcast %struct.xpvcv* %64 to i8*
  %66 = bitcast i8* %65 to %struct.xpvcv*
  %xcv_flags = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %66, i32 0, i32 12
  %67 = load i32, i32* %xcv_flags, align 4
  %or42 = or i32 %67, 4
  store i32 %or42, i32* %xcv_flags, align 4
  call void @Perl_pop_scope()
  %68 = load %struct.cv*, %struct.cv** %cv, align 8
  ret %struct.cv* %68
}

declare dso_local void @Perl_sv_force_normal_flags(%struct.sv*, i32) #3

declare dso_local i32 @Perl_sv_backoff(%struct.sv*) #3

declare dso_local void @Perl_cvgv_set(%struct.cv*, %struct.gv*) #3

declare dso_local void @Perl_mro_method_changed_in(%struct.hv*) #3

; Function Attrs: noinline nounwind uwtable
define internal %struct.gv* @S_CvGV(%struct.cv* %sv) #0 {
entry:
  %sv.addr = alloca %struct.cv*, align 8
  store %struct.cv* %sv, %struct.cv** %sv.addr, align 8
  %0 = load %struct.cv*, %struct.cv** %sv.addr, align 8
  %sv_any = getelementptr inbounds %struct.cv, %struct.cv* %0, i32 0, i32 0
  %1 = load %struct.xpvcv*, %struct.xpvcv** %sv_any, align 8
  %2 = bitcast %struct.xpvcv* %1 to i8*
  %3 = bitcast i8* %2 to %struct.xpvcv*
  %xcv_flags = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %3, i32 0, i32 12
  %4 = load i32, i32* %xcv_flags, align 4
  %and = and i32 %4, 32768
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %5 = load %struct.cv*, %struct.cv** %sv.addr, align 8
  %call = call %struct.gv* @Perl_cvgv_from_hek(%struct.cv* %5)
  br label %cond.end

cond.false:                                       ; preds = %entry
  %6 = load %struct.cv*, %struct.cv** %sv.addr, align 8
  %sv_any1 = getelementptr inbounds %struct.cv, %struct.cv* %6, i32 0, i32 0
  %7 = load %struct.xpvcv*, %struct.xpvcv** %sv_any1, align 8
  %8 = bitcast %struct.xpvcv* %7 to i8*
  %9 = bitcast i8* %8 to %struct.xpvcv*
  %xcv_gv_u = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %9, i32 0, i32 7
  %xcv_gv = bitcast %union.anon.8* %xcv_gv_u to %struct.gv**
  %10 = load %struct.gv*, %struct.gv** %xcv_gv, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.gv* [ %call, %cond.true ], [ %10, %cond.false ]
  ret %struct.gv* %cond
}

declare dso_local %struct.sv* @Perl_cv_name(%struct.cv*, %struct.sv*, i32) #3

; Function Attrs: noinline nounwind uwtable
define internal void @S_clear_special_blocks(i8* %fullname, %struct.gv* %gv, %struct.cv* %cv) #0 {
entry:
  %fullname.addr = alloca i8*, align 8
  %gv.addr = alloca %struct.gv*, align 8
  %cv.addr = alloca %struct.cv*, align 8
  %colon = alloca i8*, align 8
  %name = alloca i8*, align 8
  store i8* %fullname, i8** %fullname.addr, align 8
  store %struct.gv* %gv, %struct.gv** %gv.addr, align 8
  store %struct.cv* %cv, %struct.cv** %cv.addr, align 8
  %0 = load i8*, i8** %fullname.addr, align 8
  %call = call i8* @strrchr(i8* %0, i32 58) #7
  store i8* %call, i8** %colon, align 8
  %1 = load i8*, i8** %colon, align 8
  %tobool = icmp ne i8* %1, null
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %2 = load i8*, i8** %colon, align 8
  %add.ptr = getelementptr inbounds i8, i8* %2, i64 1
  br label %cond.end

cond.false:                                       ; preds = %entry
  %3 = load i8*, i8** %fullname.addr, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %add.ptr, %cond.true ], [ %3, %cond.false ]
  store i8* %cond, i8** %name, align 8
  %4 = load i8*, i8** %name, align 8
  %5 = load i8, i8* %4, align 1
  %conv = sext i8 %5 to i32
  %cmp = icmp eq i32 %conv, 66
  br i1 %cmp, label %land.lhs.true, label %lor.lhs.false

land.lhs.true:                                    ; preds = %cond.end
  %6 = load i8*, i8** %name, align 8
  %call2 = call i32 @strcmp(i8* %6, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.57, i64 0, i64 0)) #7
  %tobool3 = icmp ne i32 %call2, 0
  br i1 %tobool3, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %land.lhs.true, %cond.end
  %7 = load i8*, i8** %name, align 8
  %8 = load i8, i8* %7, align 1
  %conv4 = sext i8 %8 to i32
  %cmp5 = icmp eq i32 %conv4, 69
  br i1 %cmp5, label %land.lhs.true7, label %lor.lhs.false10

land.lhs.true7:                                   ; preds = %lor.lhs.false
  %9 = load i8*, i8** %name, align 8
  %call8 = call i32 @strcmp(i8* %9, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.198, i64 0, i64 0)) #7
  %tobool9 = icmp ne i32 %call8, 0
  br i1 %tobool9, label %lor.lhs.false10, label %if.then

lor.lhs.false10:                                  ; preds = %land.lhs.true7, %lor.lhs.false
  %10 = load i8*, i8** %name, align 8
  %11 = load i8, i8* %10, align 1
  %conv11 = sext i8 %11 to i32
  %cmp12 = icmp eq i32 %conv11, 85
  br i1 %cmp12, label %land.lhs.true14, label %lor.lhs.false17

land.lhs.true14:                                  ; preds = %lor.lhs.false10
  %12 = load i8*, i8** %name, align 8
  %call15 = call i32 @strcmp(i8* %12, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.199, i64 0, i64 0)) #7
  %tobool16 = icmp ne i32 %call15, 0
  br i1 %tobool16, label %lor.lhs.false17, label %if.then

lor.lhs.false17:                                  ; preds = %land.lhs.true14, %lor.lhs.false10
  %13 = load i8*, i8** %name, align 8
  %14 = load i8, i8* %13, align 1
  %conv18 = sext i8 %14 to i32
  %cmp19 = icmp eq i32 %conv18, 67
  br i1 %cmp19, label %land.lhs.true21, label %lor.lhs.false24

land.lhs.true21:                                  ; preds = %lor.lhs.false17
  %15 = load i8*, i8** %name, align 8
  %call22 = call i32 @strcmp(i8* %15, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.200, i64 0, i64 0)) #7
  %tobool23 = icmp ne i32 %call22, 0
  br i1 %tobool23, label %lor.lhs.false24, label %if.then

lor.lhs.false24:                                  ; preds = %land.lhs.true21, %lor.lhs.false17
  %16 = load i8*, i8** %name, align 8
  %17 = load i8, i8* %16, align 1
  %conv25 = sext i8 %17 to i32
  %cmp26 = icmp eq i32 %conv25, 73
  br i1 %cmp26, label %land.lhs.true28, label %if.end36

land.lhs.true28:                                  ; preds = %lor.lhs.false24
  %18 = load i8*, i8** %name, align 8
  %call29 = call i32 @strcmp(i8* %18, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.201, i64 0, i64 0)) #7
  %tobool30 = icmp ne i32 %call29, 0
  br i1 %tobool30, label %if.end36, label %if.then

if.then:                                          ; preds = %land.lhs.true28, %land.lhs.true21, %land.lhs.true14, %land.lhs.true7, %land.lhs.true
  %19 = load %struct.gv*, %struct.gv** %gv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.gv, %struct.gv* %19, i32 0, i32 2
  %20 = load i32, i32* %sv_flags, align 4
  %and = and i32 %20, 255
  %cmp31 = icmp eq i32 %and, 9
  br i1 %cmp31, label %if.end, label %if.then33

if.then33:                                        ; preds = %if.then
  %21 = load %struct.cv*, %struct.cv** %cv.addr, align 8
  %call34 = call %struct.gv* @S_CvGV(%struct.cv* %21)
  br label %if.end

if.end:                                           ; preds = %if.then33, %if.then
  %22 = load %struct.gv*, %struct.gv** %gv.addr, align 8
  %sv_u = getelementptr inbounds %struct.gv, %struct.gv* %22, i32 0, i32 3
  %svu_gp = bitcast %union.anon.3* %sv_u to %struct.gp**
  %23 = load %struct.gp*, %struct.gp** %svu_gp, align 8
  %add.ptr35 = getelementptr inbounds %struct.gp, %struct.gp* %23, i64 0
  %gp_cv = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr35, i32 0, i32 2
  store %struct.cv* null, %struct.cv** %gp_cv, align 8
  %24 = load %struct.cv*, %struct.cv** %cv.addr, align 8
  %25 = bitcast %struct.cv* %24 to i8*
  %26 = bitcast i8* %25 to %struct.sv*
  %27 = bitcast %struct.sv* %26 to i8*
  %28 = bitcast i8* %27 to %struct.sv*
  call void @S_SvREFCNT_dec_NN(%struct.sv* %28)
  br label %if.end36

if.end36:                                         ; preds = %if.end, %land.lhs.true28, %lor.lhs.false24
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i1 @S_process_special_blocks(i32 %floor, i8* %fullname, %struct.gv* %gv, %struct.cv* %cv) #0 {
entry:
  %retval = alloca i1, align 1
  %floor.addr = alloca i32, align 4
  %fullname.addr = alloca i8*, align 8
  %gv.addr = alloca %struct.gv*, align 8
  %cv.addr = alloca %struct.cv*, align 8
  %colon = alloca i8*, align 8
  %name = alloca i8*, align 8
  %oldscope = alloca i32, align 4
  %sp = alloca %struct.sv**, align 8
  %next = alloca %struct.stackinfo*, align 8
  %sp35 = alloca %struct.sv**, align 8
  %prev = alloca %struct.stackinfo*, align 8
  store i32 %floor, i32* %floor.addr, align 4
  store i8* %fullname, i8** %fullname.addr, align 8
  store %struct.gv* %gv, %struct.gv** %gv.addr, align 8
  store %struct.cv* %cv, %struct.cv** %cv.addr, align 8
  %0 = load i8*, i8** %fullname.addr, align 8
  %call = call i8* @strrchr(i8* %0, i32 58) #7
  store i8* %call, i8** %colon, align 8
  %1 = load i8*, i8** %colon, align 8
  %tobool = icmp ne i8* %1, null
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %2 = load i8*, i8** %colon, align 8
  %add.ptr = getelementptr inbounds i8, i8* %2, i64 1
  br label %cond.end

cond.false:                                       ; preds = %entry
  %3 = load i8*, i8** %fullname.addr, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %add.ptr, %cond.true ], [ %3, %cond.false ]
  store i8* %cond, i8** %name, align 8
  %4 = load i8*, i8** %name, align 8
  %5 = load i8, i8* %4, align 1
  %conv = sext i8 %5 to i32
  %cmp = icmp eq i32 %conv, 66
  br i1 %cmp, label %if.then, label %if.else62

if.then:                                          ; preds = %cond.end
  %6 = load i8*, i8** %name, align 8
  %call2 = call i32 @strcmp(i8* %6, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.57, i64 0, i64 0)) #7
  %tobool3 = icmp ne i32 %call2, 0
  br i1 %tobool3, label %if.else, label %if.then4

if.then4:                                         ; preds = %if.then
  %7 = load i32, i32* @PL_scopestack_ix, align 4
  store i32 %7, i32* %oldscope, align 4
  %8 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %8, %struct.sv*** %sp, align 8
  %9 = load %struct.cv*, %struct.cv** %cv.addr, align 8
  %call5 = call %struct.gv* @S_CvGV(%struct.cv* %9)
  %10 = load i32, i32* %floor.addr, align 4
  %tobool6 = icmp ne i32 %10, 0
  br i1 %tobool6, label %if.then7, label %if.end11

if.then7:                                         ; preds = %if.then4
  br label %do.body

do.body:                                          ; preds = %if.then7
  %11 = load i32, i32* @PL_savestack_ix, align 4
  %12 = load i32, i32* %floor.addr, align 4
  %cmp8 = icmp sgt i32 %11, %12
  br i1 %cmp8, label %if.then10, label %if.end

if.then10:                                        ; preds = %do.body
  %13 = load i32, i32* %floor.addr, align 4
  call void @Perl_leave_scope(i32 %13)
  br label %if.end

if.end:                                           ; preds = %if.then10, %do.body
  br label %do.end

do.end:                                           ; preds = %if.end
  br label %if.end11

if.end11:                                         ; preds = %do.end, %if.then4
  call void @Perl_push_scope()
  br label %do.body12

do.body12:                                        ; preds = %if.end11
  %14 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_next = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %14, i32 0, i32 3
  %15 = load %struct.stackinfo*, %struct.stackinfo** %si_next, align 8
  store %struct.stackinfo* %15, %struct.stackinfo** %next, align 8
  %16 = load %struct.stackinfo*, %struct.stackinfo** %next, align 8
  %tobool13 = icmp ne %struct.stackinfo* %16, null
  br i1 %tobool13, label %if.end17, label %if.then14

if.then14:                                        ; preds = %do.body12
  %call15 = call %struct.stackinfo* @Perl_new_stackinfo(i32 32, i32 22)
  store %struct.stackinfo* %call15, %struct.stackinfo** %next, align 8
  %17 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %18 = load %struct.stackinfo*, %struct.stackinfo** %next, align 8
  %si_prev = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %18, i32 0, i32 2
  store %struct.stackinfo* %17, %struct.stackinfo** %si_prev, align 8
  %19 = load %struct.stackinfo*, %struct.stackinfo** %next, align 8
  %20 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_next16 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %20, i32 0, i32 3
  store %struct.stackinfo* %19, %struct.stackinfo** %si_next16, align 8
  br label %if.end17

if.end17:                                         ; preds = %if.then14, %do.body12
  %21 = load %struct.stackinfo*, %struct.stackinfo** %next, align 8
  %si_type = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %21, i32 0, i32 6
  store i32 9, i32* %si_type, align 8
  %22 = load %struct.stackinfo*, %struct.stackinfo** %next, align 8
  %si_cxix = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %22, i32 0, i32 4
  store i32 -1, i32* %si_cxix, align 8
  %23 = load %struct.stackinfo*, %struct.stackinfo** %next, align 8
  %si_stack = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %23, i32 0, i32 0
  %24 = load %struct.av*, %struct.av** %si_stack, align 8
  %sv_any = getelementptr inbounds %struct.av, %struct.av* %24, i32 0, i32 0
  %25 = load %struct.xpvav*, %struct.xpvav** %sv_any, align 8
  %xav_fill = getelementptr inbounds %struct.xpvav, %struct.xpvav* %25, i32 0, i32 2
  store i64 0, i64* %xav_fill, align 8
  br label %do.body18

do.body18:                                        ; preds = %if.end17
  %26 = load %struct.sv**, %struct.sv*** %sp, align 8
  %27 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %sub.ptr.lhs.cast = ptrtoint %struct.sv** %26 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.sv** %27 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 8
  %28 = load %struct.av*, %struct.av** @PL_curstack, align 8
  %sv_any19 = getelementptr inbounds %struct.av, %struct.av* %28, i32 0, i32 0
  %29 = load %struct.xpvav*, %struct.xpvav** %sv_any19, align 8
  %xav_fill20 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %29, i32 0, i32 2
  store i64 %sub.ptr.div, i64* %xav_fill20, align 8
  %30 = load %struct.stackinfo*, %struct.stackinfo** %next, align 8
  %si_stack21 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %30, i32 0, i32 0
  %31 = load %struct.av*, %struct.av** %si_stack21, align 8
  %sv_u = getelementptr inbounds %struct.av, %struct.av* %31, i32 0, i32 3
  %svu_array = bitcast %union.anon.2* %sv_u to %struct.sv***
  %32 = load %struct.sv**, %struct.sv*** %svu_array, align 8
  store %struct.sv** %32, %struct.sv*** @PL_stack_base, align 8
  %33 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %34 = load %struct.stackinfo*, %struct.stackinfo** %next, align 8
  %si_stack22 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %34, i32 0, i32 0
  %35 = load %struct.av*, %struct.av** %si_stack22, align 8
  %sv_any23 = getelementptr inbounds %struct.av, %struct.av* %35, i32 0, i32 0
  %36 = load %struct.xpvav*, %struct.xpvav** %sv_any23, align 8
  %xav_max = getelementptr inbounds %struct.xpvav, %struct.xpvav* %36, i32 0, i32 3
  %37 = load i64, i64* %xav_max, align 8
  %add.ptr24 = getelementptr inbounds %struct.sv*, %struct.sv** %33, i64 %37
  store %struct.sv** %add.ptr24, %struct.sv*** @PL_stack_max, align 8
  %38 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %39 = load %struct.stackinfo*, %struct.stackinfo** %next, align 8
  %si_stack25 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %39, i32 0, i32 0
  %40 = load %struct.av*, %struct.av** %si_stack25, align 8
  %sv_any26 = getelementptr inbounds %struct.av, %struct.av* %40, i32 0, i32 0
  %41 = load %struct.xpvav*, %struct.xpvav** %sv_any26, align 8
  %xav_fill27 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %41, i32 0, i32 2
  %42 = load i64, i64* %xav_fill27, align 8
  %add.ptr28 = getelementptr inbounds %struct.sv*, %struct.sv** %38, i64 %42
  store %struct.sv** %add.ptr28, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %add.ptr28, %struct.sv*** %sp, align 8
  %43 = load %struct.stackinfo*, %struct.stackinfo** %next, align 8
  %si_stack29 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %43, i32 0, i32 0
  %44 = load %struct.av*, %struct.av** %si_stack29, align 8
  store %struct.av* %44, %struct.av** @PL_curstack, align 8
  br label %do.end30

do.end30:                                         ; preds = %do.body18
  %45 = load %struct.stackinfo*, %struct.stackinfo** %next, align 8
  store %struct.stackinfo* %45, %struct.stackinfo** @PL_curstackinfo, align 8
  br label %do.end31

do.end31:                                         ; preds = %do.end30
  call void @Perl_save_sptr(%struct.sv** bitcast (%struct.gv** getelementptr inbounds (%struct.cop, %struct.cop* @PL_compiling, i32 0, i32 9) to %struct.sv**))
  call void @Perl_save_I32(i32* getelementptr inbounds (%struct.cop, %struct.cop* @PL_compiling, i32 0, i32 7))
  call void @Perl_save_vptr(i8* bitcast (%struct.cop** @PL_curcop to i8*))
  %46 = load %struct.cv*, %struct.cv** %cv.addr, align 8
  %47 = bitcast %struct.cv* %46 to i8*
  %48 = bitcast i8* %47 to %struct.sv*
  call void @Perl_av_create_and_push(%struct.av** @PL_beginav, %struct.sv* %48)
  %49 = load %struct.gv*, %struct.gv** %gv.addr, align 8
  %sv_u32 = getelementptr inbounds %struct.gv, %struct.gv* %49, i32 0, i32 3
  %svu_gp = bitcast %union.anon.3* %sv_u32 to %struct.gp**
  %50 = load %struct.gp*, %struct.gp** %svu_gp, align 8
  %add.ptr33 = getelementptr inbounds %struct.gp, %struct.gp* %50, i64 0
  %gp_cv = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr33, i32 0, i32 2
  store %struct.cv* null, %struct.cv** %gp_cv, align 8
  %51 = load i32, i32* %oldscope, align 4
  %52 = load %struct.av*, %struct.av** @PL_beginav, align 8
  call void @Perl_call_list(i32 %51, %struct.av* %52)
  br label %do.body34

do.body34:                                        ; preds = %do.end31
  %53 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %53, %struct.sv*** %sp35, align 8
  %54 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_prev36 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %54, i32 0, i32 2
  %55 = load %struct.stackinfo*, %struct.stackinfo** %si_prev36, align 8
  store %struct.stackinfo* %55, %struct.stackinfo** %prev, align 8
  %56 = load %struct.stackinfo*, %struct.stackinfo** %prev, align 8
  %tobool37 = icmp ne %struct.stackinfo* %56, null
  br i1 %tobool37, label %if.end39, label %if.then38

if.then38:                                        ; preds = %do.body34
  call void @Perl_croak_popstack()
  br label %if.end39

if.end39:                                         ; preds = %if.then38, %do.body34
  br label %do.body40

do.body40:                                        ; preds = %if.end39
  %57 = load %struct.sv**, %struct.sv*** %sp35, align 8
  %58 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %sub.ptr.lhs.cast41 = ptrtoint %struct.sv** %57 to i64
  %sub.ptr.rhs.cast42 = ptrtoint %struct.sv** %58 to i64
  %sub.ptr.sub43 = sub i64 %sub.ptr.lhs.cast41, %sub.ptr.rhs.cast42
  %sub.ptr.div44 = sdiv exact i64 %sub.ptr.sub43, 8
  %59 = load %struct.av*, %struct.av** @PL_curstack, align 8
  %sv_any45 = getelementptr inbounds %struct.av, %struct.av* %59, i32 0, i32 0
  %60 = load %struct.xpvav*, %struct.xpvav** %sv_any45, align 8
  %xav_fill46 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %60, i32 0, i32 2
  store i64 %sub.ptr.div44, i64* %xav_fill46, align 8
  %61 = load %struct.stackinfo*, %struct.stackinfo** %prev, align 8
  %si_stack47 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %61, i32 0, i32 0
  %62 = load %struct.av*, %struct.av** %si_stack47, align 8
  %sv_u48 = getelementptr inbounds %struct.av, %struct.av* %62, i32 0, i32 3
  %svu_array49 = bitcast %union.anon.2* %sv_u48 to %struct.sv***
  %63 = load %struct.sv**, %struct.sv*** %svu_array49, align 8
  store %struct.sv** %63, %struct.sv*** @PL_stack_base, align 8
  %64 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %65 = load %struct.stackinfo*, %struct.stackinfo** %prev, align 8
  %si_stack50 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %65, i32 0, i32 0
  %66 = load %struct.av*, %struct.av** %si_stack50, align 8
  %sv_any51 = getelementptr inbounds %struct.av, %struct.av* %66, i32 0, i32 0
  %67 = load %struct.xpvav*, %struct.xpvav** %sv_any51, align 8
  %xav_max52 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %67, i32 0, i32 3
  %68 = load i64, i64* %xav_max52, align 8
  %add.ptr53 = getelementptr inbounds %struct.sv*, %struct.sv** %64, i64 %68
  store %struct.sv** %add.ptr53, %struct.sv*** @PL_stack_max, align 8
  %69 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %70 = load %struct.stackinfo*, %struct.stackinfo** %prev, align 8
  %si_stack54 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %70, i32 0, i32 0
  %71 = load %struct.av*, %struct.av** %si_stack54, align 8
  %sv_any55 = getelementptr inbounds %struct.av, %struct.av* %71, i32 0, i32 0
  %72 = load %struct.xpvav*, %struct.xpvav** %sv_any55, align 8
  %xav_fill56 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %72, i32 0, i32 2
  %73 = load i64, i64* %xav_fill56, align 8
  %add.ptr57 = getelementptr inbounds %struct.sv*, %struct.sv** %69, i64 %73
  store %struct.sv** %add.ptr57, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %add.ptr57, %struct.sv*** %sp35, align 8
  %74 = load %struct.stackinfo*, %struct.stackinfo** %prev, align 8
  %si_stack58 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %74, i32 0, i32 0
  %75 = load %struct.av*, %struct.av** %si_stack58, align 8
  store %struct.av* %75, %struct.av** @PL_curstack, align 8
  br label %do.end59

do.end59:                                         ; preds = %do.body40
  %76 = load %struct.stackinfo*, %struct.stackinfo** %prev, align 8
  store %struct.stackinfo* %76, %struct.stackinfo** @PL_curstackinfo, align 8
  br label %do.end60

do.end60:                                         ; preds = %do.end59
  call void @Perl_pop_scope()
  %77 = load i8, i8* @PL_savebegin, align 1
  %tobool61 = trunc i8 %77 to i1
  %lnot = xor i1 %tobool61, true
  store i1 %lnot, i1* %retval, align 1
  br label %return

if.else:                                          ; preds = %if.then
  store i1 false, i1* %retval, align 1
  br label %return

if.else62:                                        ; preds = %cond.end
  %78 = load i8*, i8** %name, align 8
  %79 = load i8, i8* %78, align 1
  %conv63 = sext i8 %79 to i32
  %cmp64 = icmp eq i32 %conv63, 69
  br i1 %cmp64, label %if.then66, label %if.else73

if.then66:                                        ; preds = %if.else62
  %80 = load i8*, i8** %name, align 8
  %call67 = call i32 @strcmp(i8* %80, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.198, i64 0, i64 0)) #7
  %tobool68 = icmp ne i32 %call67, 0
  br i1 %tobool68, label %if.else71, label %if.then69

if.then69:                                        ; preds = %if.then66
  %81 = load %struct.cv*, %struct.cv** %cv.addr, align 8
  %82 = bitcast %struct.cv* %81 to i8*
  %83 = bitcast i8* %82 to %struct.sv*
  %call70 = call %struct.sv** @Perl_av_create_and_unshift_one(%struct.av** @PL_endav, %struct.sv* %83)
  br label %if.end72

if.else71:                                        ; preds = %if.then66
  store i1 false, i1* %retval, align 1
  br label %return

if.end72:                                         ; preds = %if.then69
  br label %if.end115

if.else73:                                        ; preds = %if.else62
  %84 = load i8*, i8** %name, align 8
  %85 = load i8, i8* %84, align 1
  %conv74 = sext i8 %85 to i32
  %cmp75 = icmp eq i32 %conv74, 85
  br i1 %cmp75, label %if.then77, label %if.else84

if.then77:                                        ; preds = %if.else73
  %86 = load i8*, i8** %name, align 8
  %call78 = call i32 @strcmp(i8* %86, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.199, i64 0, i64 0)) #7
  %tobool79 = icmp ne i32 %call78, 0
  br i1 %tobool79, label %if.else82, label %if.then80

if.then80:                                        ; preds = %if.then77
  %87 = load %struct.cv*, %struct.cv** %cv.addr, align 8
  %88 = bitcast %struct.cv* %87 to i8*
  %89 = bitcast i8* %88 to %struct.sv*
  %call81 = call %struct.sv** @Perl_av_create_and_unshift_one(%struct.av** @PL_unitcheckav, %struct.sv* %89)
  br label %if.end83

if.else82:                                        ; preds = %if.then77
  store i1 false, i1* %retval, align 1
  br label %return

if.end83:                                         ; preds = %if.then80
  br label %if.end114

if.else84:                                        ; preds = %if.else73
  %90 = load i8*, i8** %name, align 8
  %91 = load i8, i8* %90, align 1
  %conv85 = sext i8 %91 to i32
  %cmp86 = icmp eq i32 %conv85, 67
  br i1 %cmp86, label %if.then88, label %if.else98

if.then88:                                        ; preds = %if.else84
  %92 = load i8*, i8** %name, align 8
  %call89 = call i32 @strcmp(i8* %92, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.200, i64 0, i64 0)) #7
  %tobool90 = icmp ne i32 %call89, 0
  br i1 %tobool90, label %if.else96, label %if.then91

if.then91:                                        ; preds = %if.then88
  %93 = load %struct.op*, %struct.op** @PL_main_start, align 8
  %tobool92 = icmp ne %struct.op* %93, null
  br i1 %tobool92, label %if.then93, label %if.end94

if.then93:                                        ; preds = %if.then91
  call void (i32, i8*, ...) @Perl_ck_warner(i32 45, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.202, i64 0, i64 0))
  br label %if.end94

if.end94:                                         ; preds = %if.then93, %if.then91
  %94 = load %struct.cv*, %struct.cv** %cv.addr, align 8
  %95 = bitcast %struct.cv* %94 to i8*
  %96 = bitcast i8* %95 to %struct.sv*
  %call95 = call %struct.sv** @Perl_av_create_and_unshift_one(%struct.av** @PL_checkav, %struct.sv* %96)
  br label %if.end97

if.else96:                                        ; preds = %if.then88
  store i1 false, i1* %retval, align 1
  br label %return

if.end97:                                         ; preds = %if.end94
  br label %if.end113

if.else98:                                        ; preds = %if.else84
  %97 = load i8*, i8** %name, align 8
  %98 = load i8, i8* %97, align 1
  %conv99 = sext i8 %98 to i32
  %cmp100 = icmp eq i32 %conv99, 73
  br i1 %cmp100, label %if.then102, label %if.else111

if.then102:                                       ; preds = %if.else98
  %99 = load i8*, i8** %name, align 8
  %call103 = call i32 @strcmp(i8* %99, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.201, i64 0, i64 0)) #7
  %tobool104 = icmp ne i32 %call103, 0
  br i1 %tobool104, label %if.else109, label %if.then105

if.then105:                                       ; preds = %if.then102
  %100 = load %struct.op*, %struct.op** @PL_main_start, align 8
  %tobool106 = icmp ne %struct.op* %100, null
  br i1 %tobool106, label %if.then107, label %if.end108

if.then107:                                       ; preds = %if.then105
  call void (i32, i8*, ...) @Perl_ck_warner(i32 45, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.203, i64 0, i64 0))
  br label %if.end108

if.end108:                                        ; preds = %if.then107, %if.then105
  %101 = load %struct.cv*, %struct.cv** %cv.addr, align 8
  %102 = bitcast %struct.cv* %101 to i8*
  %103 = bitcast i8* %102 to %struct.sv*
  call void @Perl_av_create_and_push(%struct.av** @PL_initav, %struct.sv* %103)
  br label %if.end110

if.else109:                                       ; preds = %if.then102
  store i1 false, i1* %retval, align 1
  br label %return

if.end110:                                        ; preds = %if.end108
  br label %if.end112

if.else111:                                       ; preds = %if.else98
  store i1 false, i1* %retval, align 1
  br label %return

if.end112:                                        ; preds = %if.end110
  br label %if.end113

if.end113:                                        ; preds = %if.end112, %if.end97
  br label %if.end114

if.end114:                                        ; preds = %if.end113, %if.end83
  br label %if.end115

if.end115:                                        ; preds = %if.end114, %if.end72
  %104 = load %struct.cv*, %struct.cv** %cv.addr, align 8
  %call116 = call %struct.gv* @S_CvGV(%struct.cv* %104)
  %105 = load %struct.gv*, %struct.gv** %gv.addr, align 8
  %sv_u117 = getelementptr inbounds %struct.gv, %struct.gv* %105, i32 0, i32 3
  %svu_gp118 = bitcast %union.anon.3* %sv_u117 to %struct.gp**
  %106 = load %struct.gp*, %struct.gp** %svu_gp118, align 8
  %add.ptr119 = getelementptr inbounds %struct.gp, %struct.gp* %106, i64 0
  %gp_cv120 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr119, i32 0, i32 2
  store %struct.cv* null, %struct.cv** %gp_cv120, align 8
  store i1 false, i1* %retval, align 1
  br label %return

return:                                           ; preds = %if.end115, %if.else111, %if.else109, %if.else96, %if.else82, %if.else71, %if.else, %do.end60
  %107 = load i1, i1* %retval, align 1
  ret i1 %107
}

declare dso_local void @Perl_pad_add_weakref(%struct.cv*) #3

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.cv* @Perl_newCONSTSUB(%struct.hv* %stash, i8* %name, %struct.sv* %sv) #0 {
entry:
  %stash.addr = alloca %struct.hv*, align 8
  %name.addr = alloca i8*, align 8
  %sv.addr = alloca %struct.sv*, align 8
  store %struct.hv* %stash, %struct.hv** %stash.addr, align 8
  store i8* %name, i8** %name.addr, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  %0 = load %struct.hv*, %struct.hv** %stash.addr, align 8
  %1 = load i8*, i8** %name.addr, align 8
  %2 = load i8*, i8** %name.addr, align 8
  %tobool = icmp ne i8* %2, null
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %3 = load i8*, i8** %name.addr, align 8
  %call = call i64 @strlen(i8* %3) #7
  br label %cond.end

cond.false:                                       ; preds = %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %call, %cond.true ], [ 0, %cond.false ]
  %4 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call1 = call %struct.cv* @Perl_newCONSTSUB_flags(%struct.hv* %0, i8* %1, i64 %cond, i32 0, %struct.sv* %4)
  ret %struct.cv* %call1
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.cv* @Perl_newXS_len_flags(i8* %name, i64 %len, void (%struct.cv*)* %subaddr, i8* %filename, i8* %proto, %struct.sv** %const_svp, i32 %flags) #0 {
entry:
  %name.addr = alloca i8*, align 8
  %len.addr = alloca i64, align 8
  %subaddr.addr = alloca void (%struct.cv*)*, align 8
  %filename.addr = alloca i8*, align 8
  %proto.addr = alloca i8*, align 8
  %const_svp.addr = alloca %struct.sv**, align 8
  %flags.addr = alloca i32, align 4
  %cv = alloca %struct.cv*, align 8
  %interleave = alloca i8, align 1
  %gv = alloca %struct.gv*, align 8
  store i8* %name, i8** %name.addr, align 8
  store i64 %len, i64* %len.addr, align 8
  store void (%struct.cv*)* %subaddr, void (%struct.cv*)** %subaddr.addr, align 8
  store i8* %filename, i8** %filename.addr, align 8
  store i8* %proto, i8** %proto.addr, align 8
  store %struct.sv** %const_svp, %struct.sv*** %const_svp.addr, align 8
  store i32 %flags, i32* %flags.addr, align 4
  store i8 0, i8* %interleave, align 1
  %0 = load i8*, i8** %name.addr, align 8
  %tobool = icmp ne i8* %0, null
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %1 = load i8*, i8** %name.addr, align 8
  br label %cond.end

cond.false:                                       ; preds = %entry
  %2 = load %struct.hv*, %struct.hv** @PL_curstash, align 8
  %tobool1 = icmp ne %struct.hv* %2, null
  %3 = zext i1 %tobool1 to i64
  %cond = select i1 %tobool1, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.74, i64 0, i64 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.75, i64 0, i64 0)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond2 = phi i8* [ %1, %cond.true ], [ %cond, %cond.false ]
  %4 = load i8*, i8** %name.addr, align 8
  %tobool3 = icmp ne i8* %4, null
  br i1 %tobool3, label %cond.true4, label %cond.false5

cond.true4:                                       ; preds = %cond.end
  %5 = load i64, i64* %len.addr, align 8
  br label %cond.end8

cond.false5:                                      ; preds = %cond.end
  %6 = load %struct.hv*, %struct.hv** @PL_curstash, align 8
  %tobool6 = icmp ne %struct.hv* %6, null
  %7 = zext i1 %tobool6 to i64
  %cond7 = select i1 %tobool6, i64 8, i64 18
  br label %cond.end8

cond.end8:                                        ; preds = %cond.false5, %cond.true4
  %cond9 = phi i64 [ %5, %cond.true4 ], [ %cond7, %cond.false5 ]
  %8 = load i32, i32* %flags.addr, align 4
  %or = or i32 2, %8
  %call = call %struct.gv* @Perl_gv_fetchpvn_flags(i8* %cond2, i64 %cond9, i32 %or, i32 13)
  store %struct.gv* %call, %struct.gv** %gv, align 8
  %9 = load i8*, i8** %name.addr, align 8
  %tobool10 = icmp ne i8* %9, null
  br i1 %tobool10, label %cond.true11, label %cond.false13

cond.true11:                                      ; preds = %cond.end8
  %10 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u = getelementptr inbounds %struct.gv, %struct.gv* %10, i32 0, i32 3
  %svu_gp = bitcast %union.anon.3* %sv_u to %struct.gp**
  %11 = load %struct.gp*, %struct.gp** %svu_gp, align 8
  %add.ptr = getelementptr inbounds %struct.gp, %struct.gp* %11, i64 0
  %gp_cv = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr, i32 0, i32 2
  %12 = load %struct.cv*, %struct.cv** %gp_cv, align 8
  %add.ptr12 = getelementptr inbounds %struct.cv, %struct.cv* %12, i64 0
  br label %cond.end14

cond.false13:                                     ; preds = %cond.end8
  br label %cond.end14

cond.end14:                                       ; preds = %cond.false13, %cond.true11
  %cond15 = phi %struct.cv* [ %add.ptr12, %cond.true11 ], [ null, %cond.false13 ]
  store %struct.cv* %cond15, %struct.cv** %cv, align 8
  %tobool16 = icmp ne %struct.cv* %cond15, null
  br i1 %tobool16, label %if.then, label %if.end41

if.then:                                          ; preds = %cond.end14
  %13 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u17 = getelementptr inbounds %struct.gv, %struct.gv* %13, i32 0, i32 3
  %svu_gp18 = bitcast %union.anon.3* %sv_u17 to %struct.gp**
  %14 = load %struct.gp*, %struct.gp** %svu_gp18, align 8
  %add.ptr19 = getelementptr inbounds %struct.gp, %struct.gp* %14, i64 0
  %gp_cvgen = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr19, i32 0, i32 3
  %15 = load i32, i32* %gp_cvgen, align 8
  %tobool20 = icmp ne i32 %15, 0
  br i1 %tobool20, label %if.then21, label %if.else

if.then21:                                        ; preds = %if.then
  %16 = load %struct.cv*, %struct.cv** %cv, align 8
  %17 = bitcast %struct.cv* %16 to i8*
  %18 = bitcast i8* %17 to %struct.sv*
  call void @S_SvREFCNT_dec(%struct.sv* %18)
  store %struct.cv* null, %struct.cv** %cv, align 8
  br label %if.end40

if.else:                                          ; preds = %if.then
  %19 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any = getelementptr inbounds %struct.cv, %struct.cv* %19, i32 0, i32 0
  %20 = load %struct.xpvcv*, %struct.xpvcv** %sv_any, align 8
  %21 = bitcast %struct.xpvcv* %20 to i8*
  %22 = bitcast i8* %21 to %struct.xpvcv*
  %xcv_root_u = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %22, i32 0, i32 6
  %xcv_root = bitcast %union.anon.7* %xcv_root_u to %struct.op**
  %23 = load %struct.op*, %struct.op** %xcv_root, align 8
  %tobool22 = icmp ne %struct.op* %23, null
  br i1 %tobool22, label %if.then29, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.else
  %24 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any23 = getelementptr inbounds %struct.cv, %struct.cv* %24, i32 0, i32 0
  %25 = load %struct.xpvcv*, %struct.xpvcv** %sv_any23, align 8
  %26 = bitcast %struct.xpvcv* %25 to i8*
  %27 = bitcast i8* %26 to %struct.xpvcv*
  %xcv_root_u24 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %27, i32 0, i32 6
  %xcv_xsub = bitcast %union.anon.7* %xcv_root_u24 to void (%struct.cv*)**
  %28 = load void (%struct.cv*)*, void (%struct.cv*)** %xcv_xsub, align 8
  %tobool25 = icmp ne void (%struct.cv*)* %28, null
  br i1 %tobool25, label %if.then29, label %lor.lhs.false26

lor.lhs.false26:                                  ; preds = %lor.lhs.false
  %29 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_any27 = getelementptr inbounds %struct.gv, %struct.gv* %29, i32 0, i32 0
  %30 = load %struct.xpvgv*, %struct.xpvgv** %sv_any27, align 8
  %xpv_cur = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %30, i32 0, i32 2
  %31 = load i64, i64* %xpv_cur, align 8
  %and = and i64 %31, 4
  %tobool28 = icmp ne i64 %and, 0
  br i1 %tobool28, label %if.then29, label %if.end39

if.then29:                                        ; preds = %lor.lhs.false26, %lor.lhs.false, %if.else
  %32 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any30 = getelementptr inbounds %struct.cv, %struct.cv* %32, i32 0, i32 0
  %33 = load %struct.xpvcv*, %struct.xpvcv** %sv_any30, align 8
  %34 = bitcast %struct.xpvcv* %33 to i8*
  %35 = bitcast i8* %34 to %struct.xpvcv*
  %xcv_flags = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %35, i32 0, i32 12
  %36 = load i32, i32* %xcv_flags, align 4
  %and31 = and i32 %36, 4
  %tobool32 = icmp ne i32 %and31, 0
  br i1 %tobool32, label %if.then35, label %lor.lhs.false33

lor.lhs.false33:                                  ; preds = %if.then29
  %call34 = call zeroext i1 @Perl_ckwarn(i32 19)
  br i1 %call34, label %if.then35, label %if.end

if.then35:                                        ; preds = %lor.lhs.false33, %if.then29
  %37 = load i8*, i8** %name.addr, align 8
  %38 = load i64, i64* %len.addr, align 8
  %39 = load i32, i32* %flags.addr, align 4
  %and36 = and i32 %39, 536870912
  %or37 = or i32 %and36, 524288
  %call38 = call %struct.sv* @Perl_newSVpvn_flags(i8* %37, i64 %38, i32 %or37)
  %40 = load %struct.cv*, %struct.cv** %cv, align 8
  %41 = load %struct.sv**, %struct.sv*** %const_svp.addr, align 8
  call void @Perl_report_redefined_cv(%struct.sv* %call38, %struct.cv* %40, %struct.sv** %41)
  br label %if.end

if.end:                                           ; preds = %if.then35, %lor.lhs.false33
  store i8 1, i8* %interleave, align 1
  call void @Perl_push_scope()
  %42 = load %struct.cv*, %struct.cv** %cv, align 8
  %43 = bitcast %struct.cv* %42 to i8*
  %44 = bitcast i8* %43 to %struct.sv*
  %45 = bitcast %struct.sv* %44 to i8*
  call void @Perl_save_pushptr(i8* %45, i32 11)
  store %struct.cv* null, %struct.cv** %cv, align 8
  br label %if.end39

if.end39:                                         ; preds = %if.end, %lor.lhs.false26
  br label %if.end40

if.end40:                                         ; preds = %if.end39, %if.then21
  br label %if.end41

if.end41:                                         ; preds = %if.end40, %cond.end14
  %46 = load %struct.cv*, %struct.cv** %cv, align 8
  %tobool42 = icmp ne %struct.cv* %46, null
  br i1 %tobool42, label %if.then43, label %if.else44

if.then43:                                        ; preds = %if.end41
  %47 = load %struct.cv*, %struct.cv** %cv, align 8
  call void @Perl_cv_undef(%struct.cv* %47)
  br label %if.end175

if.else44:                                        ; preds = %if.end41
  %call45 = call %struct.sv* @Perl_newSV_type(i32 13)
  %48 = bitcast %struct.sv* %call45 to i8*
  %49 = bitcast i8* %48 to %struct.cv*
  store %struct.cv* %49, %struct.cv** %cv, align 8
  %50 = load i8*, i8** %name.addr, align 8
  %tobool46 = icmp ne i8* %50, null
  br i1 %tobool46, label %if.then47, label %if.end174

if.then47:                                        ; preds = %if.else44
  %51 = load %struct.cv*, %struct.cv** %cv, align 8
  %52 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u48 = getelementptr inbounds %struct.gv, %struct.gv* %52, i32 0, i32 3
  %svu_gp49 = bitcast %union.anon.3* %sv_u48 to %struct.gp**
  %53 = load %struct.gp*, %struct.gp** %svu_gp49, align 8
  %add.ptr50 = getelementptr inbounds %struct.gp, %struct.gp* %53, i64 0
  %gp_cv51 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr50, i32 0, i32 2
  store %struct.cv* %51, %struct.cv** %gp_cv51, align 8
  %54 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u52 = getelementptr inbounds %struct.gv, %struct.gv* %54, i32 0, i32 3
  %svu_gp53 = bitcast %union.anon.3* %sv_u52 to %struct.gp**
  %55 = load %struct.gp*, %struct.gp** %svu_gp53, align 8
  %add.ptr54 = getelementptr inbounds %struct.gp, %struct.gp* %55, i64 0
  %gp_cvgen55 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr54, i32 0, i32 3
  store i32 0, i32* %gp_cvgen55, align 8
  %56 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_any56 = getelementptr inbounds %struct.gv, %struct.gv* %56, i32 0, i32 0
  %57 = load %struct.xpvgv*, %struct.xpvgv** %sv_any56, align 8
  %xnv_u = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %57, i32 0, i32 5
  %xgv_stash = bitcast %union._xnvu* %xnv_u to %struct.hv**
  %58 = load %struct.hv*, %struct.hv** %xgv_stash, align 8
  %sv_flags = getelementptr inbounds %struct.hv, %struct.hv* %58, i32 0, i32 2
  %59 = load i32, i32* %sv_flags, align 4
  %and57 = and i32 %59, 33554432
  %tobool58 = icmp ne i32 %and57, 0
  br i1 %tobool58, label %land.lhs.true, label %cond.false161

land.lhs.true:                                    ; preds = %if.then47
  %60 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_any59 = getelementptr inbounds %struct.gv, %struct.gv* %60, i32 0, i32 0
  %61 = load %struct.xpvgv*, %struct.xpvgv** %sv_any59, align 8
  %xnv_u60 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %61, i32 0, i32 5
  %xgv_stash61 = bitcast %union._xnvu* %xnv_u60 to %struct.hv**
  %62 = load %struct.hv*, %struct.hv** %xgv_stash61, align 8
  %sv_u62 = getelementptr inbounds %struct.hv, %struct.hv* %62, i32 0, i32 3
  %svu_hash = bitcast %union.anon.4* %sv_u62 to %struct.he***
  %63 = load %struct.he**, %struct.he*** %svu_hash, align 8
  %64 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_any63 = getelementptr inbounds %struct.gv, %struct.gv* %64, i32 0, i32 0
  %65 = load %struct.xpvgv*, %struct.xpvgv** %sv_any63, align 8
  %xnv_u64 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %65, i32 0, i32 5
  %xgv_stash65 = bitcast %union._xnvu* %xnv_u64 to %struct.hv**
  %66 = load %struct.hv*, %struct.hv** %xgv_stash65, align 8
  %sv_any66 = getelementptr inbounds %struct.hv, %struct.hv* %66, i32 0, i32 0
  %67 = load %struct.xpvhv*, %struct.xpvhv** %sv_any66, align 8
  %xhv_max = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %67, i32 0, i32 3
  %68 = load i64, i64* %xhv_max, align 8
  %add = add i64 %68, 1
  %arrayidx = getelementptr inbounds %struct.he*, %struct.he** %63, i64 %add
  %69 = bitcast %struct.he** %arrayidx to %struct.xpvhv_aux*
  %xhv_name_u = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %69, i32 0, i32 0
  %xhvnameu_name = bitcast %union._xhvnameu* %xhv_name_u to %struct.hek**
  %70 = load %struct.hek*, %struct.hek** %xhvnameu_name, align 8
  %tobool67 = icmp ne %struct.hek* %70, null
  br i1 %tobool67, label %cond.true68, label %cond.false161

cond.true68:                                      ; preds = %land.lhs.true
  %71 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_any69 = getelementptr inbounds %struct.gv, %struct.gv* %71, i32 0, i32 0
  %72 = load %struct.xpvgv*, %struct.xpvgv** %sv_any69, align 8
  %xnv_u70 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %72, i32 0, i32 5
  %xgv_stash71 = bitcast %union._xnvu* %xnv_u70 to %struct.hv**
  %73 = load %struct.hv*, %struct.hv** %xgv_stash71, align 8
  %sv_u72 = getelementptr inbounds %struct.hv, %struct.hv* %73, i32 0, i32 3
  %svu_hash73 = bitcast %union.anon.4* %sv_u72 to %struct.he***
  %74 = load %struct.he**, %struct.he*** %svu_hash73, align 8
  %75 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_any74 = getelementptr inbounds %struct.gv, %struct.gv* %75, i32 0, i32 0
  %76 = load %struct.xpvgv*, %struct.xpvgv** %sv_any74, align 8
  %xnv_u75 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %76, i32 0, i32 5
  %xgv_stash76 = bitcast %union._xnvu* %xnv_u75 to %struct.hv**
  %77 = load %struct.hv*, %struct.hv** %xgv_stash76, align 8
  %sv_any77 = getelementptr inbounds %struct.hv, %struct.hv* %77, i32 0, i32 0
  %78 = load %struct.xpvhv*, %struct.xpvhv** %sv_any77, align 8
  %xhv_max78 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %78, i32 0, i32 3
  %79 = load i64, i64* %xhv_max78, align 8
  %add79 = add i64 %79, 1
  %arrayidx80 = getelementptr inbounds %struct.he*, %struct.he** %74, i64 %add79
  %80 = bitcast %struct.he** %arrayidx80 to %struct.xpvhv_aux*
  %xhv_name_count = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %80, i32 0, i32 4
  %81 = load i32, i32* %xhv_name_count, align 4
  %cmp = icmp sgt i32 %81, 0
  br i1 %cmp, label %cond.true81, label %cond.false97

cond.true81:                                      ; preds = %cond.true68
  %82 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_any82 = getelementptr inbounds %struct.gv, %struct.gv* %82, i32 0, i32 0
  %83 = load %struct.xpvgv*, %struct.xpvgv** %sv_any82, align 8
  %xnv_u83 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %83, i32 0, i32 5
  %xgv_stash84 = bitcast %union._xnvu* %xnv_u83 to %struct.hv**
  %84 = load %struct.hv*, %struct.hv** %xgv_stash84, align 8
  %sv_u85 = getelementptr inbounds %struct.hv, %struct.hv* %84, i32 0, i32 3
  %svu_hash86 = bitcast %union.anon.4* %sv_u85 to %struct.he***
  %85 = load %struct.he**, %struct.he*** %svu_hash86, align 8
  %86 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_any87 = getelementptr inbounds %struct.gv, %struct.gv* %86, i32 0, i32 0
  %87 = load %struct.xpvgv*, %struct.xpvgv** %sv_any87, align 8
  %xnv_u88 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %87, i32 0, i32 5
  %xgv_stash89 = bitcast %union._xnvu* %xnv_u88 to %struct.hv**
  %88 = load %struct.hv*, %struct.hv** %xgv_stash89, align 8
  %sv_any90 = getelementptr inbounds %struct.hv, %struct.hv* %88, i32 0, i32 0
  %89 = load %struct.xpvhv*, %struct.xpvhv** %sv_any90, align 8
  %xhv_max91 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %89, i32 0, i32 3
  %90 = load i64, i64* %xhv_max91, align 8
  %add92 = add i64 %90, 1
  %arrayidx93 = getelementptr inbounds %struct.he*, %struct.he** %85, i64 %add92
  %91 = bitcast %struct.he** %arrayidx93 to %struct.xpvhv_aux*
  %xhv_name_u94 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %91, i32 0, i32 0
  %xhvnameu_names = bitcast %union._xhvnameu* %xhv_name_u94 to %struct.hek***
  %92 = load %struct.hek**, %struct.hek*** %xhvnameu_names, align 8
  %arrayidx95 = getelementptr inbounds %struct.hek*, %struct.hek** %92, i64 0
  %93 = load %struct.hek*, %struct.hek** %arrayidx95, align 8
  %tobool96 = icmp ne %struct.hek* %93, null
  br i1 %tobool96, label %if.then162, label %if.end173

cond.false97:                                     ; preds = %cond.true68
  %94 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_any98 = getelementptr inbounds %struct.gv, %struct.gv* %94, i32 0, i32 0
  %95 = load %struct.xpvgv*, %struct.xpvgv** %sv_any98, align 8
  %xnv_u99 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %95, i32 0, i32 5
  %xgv_stash100 = bitcast %union._xnvu* %xnv_u99 to %struct.hv**
  %96 = load %struct.hv*, %struct.hv** %xgv_stash100, align 8
  %sv_u101 = getelementptr inbounds %struct.hv, %struct.hv* %96, i32 0, i32 3
  %svu_hash102 = bitcast %union.anon.4* %sv_u101 to %struct.he***
  %97 = load %struct.he**, %struct.he*** %svu_hash102, align 8
  %98 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_any103 = getelementptr inbounds %struct.gv, %struct.gv* %98, i32 0, i32 0
  %99 = load %struct.xpvgv*, %struct.xpvgv** %sv_any103, align 8
  %xnv_u104 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %99, i32 0, i32 5
  %xgv_stash105 = bitcast %union._xnvu* %xnv_u104 to %struct.hv**
  %100 = load %struct.hv*, %struct.hv** %xgv_stash105, align 8
  %sv_any106 = getelementptr inbounds %struct.hv, %struct.hv* %100, i32 0, i32 0
  %101 = load %struct.xpvhv*, %struct.xpvhv** %sv_any106, align 8
  %xhv_max107 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %101, i32 0, i32 3
  %102 = load i64, i64* %xhv_max107, align 8
  %add108 = add i64 %102, 1
  %arrayidx109 = getelementptr inbounds %struct.he*, %struct.he** %97, i64 %add108
  %103 = bitcast %struct.he** %arrayidx109 to %struct.xpvhv_aux*
  %xhv_name_count110 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %103, i32 0, i32 4
  %104 = load i32, i32* %xhv_name_count110, align 4
  %cmp111 = icmp slt i32 %104, -1
  br i1 %cmp111, label %cond.true112, label %cond.false129

cond.true112:                                     ; preds = %cond.false97
  %105 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_any113 = getelementptr inbounds %struct.gv, %struct.gv* %105, i32 0, i32 0
  %106 = load %struct.xpvgv*, %struct.xpvgv** %sv_any113, align 8
  %xnv_u114 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %106, i32 0, i32 5
  %xgv_stash115 = bitcast %union._xnvu* %xnv_u114 to %struct.hv**
  %107 = load %struct.hv*, %struct.hv** %xgv_stash115, align 8
  %sv_u116 = getelementptr inbounds %struct.hv, %struct.hv* %107, i32 0, i32 3
  %svu_hash117 = bitcast %union.anon.4* %sv_u116 to %struct.he***
  %108 = load %struct.he**, %struct.he*** %svu_hash117, align 8
  %109 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_any118 = getelementptr inbounds %struct.gv, %struct.gv* %109, i32 0, i32 0
  %110 = load %struct.xpvgv*, %struct.xpvgv** %sv_any118, align 8
  %xnv_u119 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %110, i32 0, i32 5
  %xgv_stash120 = bitcast %union._xnvu* %xnv_u119 to %struct.hv**
  %111 = load %struct.hv*, %struct.hv** %xgv_stash120, align 8
  %sv_any121 = getelementptr inbounds %struct.hv, %struct.hv* %111, i32 0, i32 0
  %112 = load %struct.xpvhv*, %struct.xpvhv** %sv_any121, align 8
  %xhv_max122 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %112, i32 0, i32 3
  %113 = load i64, i64* %xhv_max122, align 8
  %add123 = add i64 %113, 1
  %arrayidx124 = getelementptr inbounds %struct.he*, %struct.he** %108, i64 %add123
  %114 = bitcast %struct.he** %arrayidx124 to %struct.xpvhv_aux*
  %xhv_name_u125 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %114, i32 0, i32 0
  %xhvnameu_names126 = bitcast %union._xhvnameu* %xhv_name_u125 to %struct.hek***
  %115 = load %struct.hek**, %struct.hek*** %xhvnameu_names126, align 8
  %arrayidx127 = getelementptr inbounds %struct.hek*, %struct.hek** %115, i64 1
  %116 = load %struct.hek*, %struct.hek** %arrayidx127, align 8
  %tobool128 = icmp ne %struct.hek* %116, null
  br i1 %tobool128, label %if.then162, label %if.end173

cond.false129:                                    ; preds = %cond.false97
  %117 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_any130 = getelementptr inbounds %struct.gv, %struct.gv* %117, i32 0, i32 0
  %118 = load %struct.xpvgv*, %struct.xpvgv** %sv_any130, align 8
  %xnv_u131 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %118, i32 0, i32 5
  %xgv_stash132 = bitcast %union._xnvu* %xnv_u131 to %struct.hv**
  %119 = load %struct.hv*, %struct.hv** %xgv_stash132, align 8
  %sv_u133 = getelementptr inbounds %struct.hv, %struct.hv* %119, i32 0, i32 3
  %svu_hash134 = bitcast %union.anon.4* %sv_u133 to %struct.he***
  %120 = load %struct.he**, %struct.he*** %svu_hash134, align 8
  %121 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_any135 = getelementptr inbounds %struct.gv, %struct.gv* %121, i32 0, i32 0
  %122 = load %struct.xpvgv*, %struct.xpvgv** %sv_any135, align 8
  %xnv_u136 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %122, i32 0, i32 5
  %xgv_stash137 = bitcast %union._xnvu* %xnv_u136 to %struct.hv**
  %123 = load %struct.hv*, %struct.hv** %xgv_stash137, align 8
  %sv_any138 = getelementptr inbounds %struct.hv, %struct.hv* %123, i32 0, i32 0
  %124 = load %struct.xpvhv*, %struct.xpvhv** %sv_any138, align 8
  %xhv_max139 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %124, i32 0, i32 3
  %125 = load i64, i64* %xhv_max139, align 8
  %add140 = add i64 %125, 1
  %arrayidx141 = getelementptr inbounds %struct.he*, %struct.he** %120, i64 %add140
  %126 = bitcast %struct.he** %arrayidx141 to %struct.xpvhv_aux*
  %xhv_name_count142 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %126, i32 0, i32 4
  %127 = load i32, i32* %xhv_name_count142, align 4
  %cmp143 = icmp eq i32 %127, -1
  br i1 %cmp143, label %cond.true144, label %cond.false145

cond.true144:                                     ; preds = %cond.false129
  br i1 false, label %if.then162, label %if.end173

cond.false145:                                    ; preds = %cond.false129
  %128 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_any146 = getelementptr inbounds %struct.gv, %struct.gv* %128, i32 0, i32 0
  %129 = load %struct.xpvgv*, %struct.xpvgv** %sv_any146, align 8
  %xnv_u147 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %129, i32 0, i32 5
  %xgv_stash148 = bitcast %union._xnvu* %xnv_u147 to %struct.hv**
  %130 = load %struct.hv*, %struct.hv** %xgv_stash148, align 8
  %sv_u149 = getelementptr inbounds %struct.hv, %struct.hv* %130, i32 0, i32 3
  %svu_hash150 = bitcast %union.anon.4* %sv_u149 to %struct.he***
  %131 = load %struct.he**, %struct.he*** %svu_hash150, align 8
  %132 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_any151 = getelementptr inbounds %struct.gv, %struct.gv* %132, i32 0, i32 0
  %133 = load %struct.xpvgv*, %struct.xpvgv** %sv_any151, align 8
  %xnv_u152 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %133, i32 0, i32 5
  %xgv_stash153 = bitcast %union._xnvu* %xnv_u152 to %struct.hv**
  %134 = load %struct.hv*, %struct.hv** %xgv_stash153, align 8
  %sv_any154 = getelementptr inbounds %struct.hv, %struct.hv* %134, i32 0, i32 0
  %135 = load %struct.xpvhv*, %struct.xpvhv** %sv_any154, align 8
  %xhv_max155 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %135, i32 0, i32 3
  %136 = load i64, i64* %xhv_max155, align 8
  %add156 = add i64 %136, 1
  %arrayidx157 = getelementptr inbounds %struct.he*, %struct.he** %131, i64 %add156
  %137 = bitcast %struct.he** %arrayidx157 to %struct.xpvhv_aux*
  %xhv_name_u158 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %137, i32 0, i32 0
  %xhvnameu_name159 = bitcast %union._xhvnameu* %xhv_name_u158 to %struct.hek**
  %138 = load %struct.hek*, %struct.hek** %xhvnameu_name159, align 8
  %tobool160 = icmp ne %struct.hek* %138, null
  br i1 %tobool160, label %if.then162, label %if.end173

cond.false161:                                    ; preds = %land.lhs.true, %if.then47
  br i1 false, label %if.then162, label %if.end173

if.then162:                                       ; preds = %cond.false161, %cond.false145, %cond.true144, %cond.true112, %cond.true81
  %139 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u163 = getelementptr inbounds %struct.gv, %struct.gv* %139, i32 0, i32 3
  %svu_gp164 = bitcast %union.anon.3* %sv_u163 to %struct.gp**
  %140 = load %struct.gp*, %struct.gp** %svu_gp164, align 8
  %add.ptr165 = getelementptr inbounds %struct.gp, %struct.gp* %140, i64 0
  %gp_refcnt = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr165, i32 0, i32 4
  %141 = load i32, i32* %gp_refcnt, align 4
  %cmp166 = icmp ugt i32 %141, 1
  br i1 %cmp166, label %cond.true167, label %cond.false168

cond.true167:                                     ; preds = %if.then162
  %142 = load i32, i32* @PL_sub_generation, align 4
  %inc = add i32 %142, 1
  store i32 %inc, i32* @PL_sub_generation, align 4
  br label %cond.end172

cond.false168:                                    ; preds = %if.then162
  %143 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_any169 = getelementptr inbounds %struct.gv, %struct.gv* %143, i32 0, i32 0
  %144 = load %struct.xpvgv*, %struct.xpvgv** %sv_any169, align 8
  %xnv_u170 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %144, i32 0, i32 5
  %xgv_stash171 = bitcast %union._xnvu* %xnv_u170 to %struct.hv**
  %145 = load %struct.hv*, %struct.hv** %xgv_stash171, align 8
  call void @Perl_mro_method_changed_in(%struct.hv* %145)
  br label %cond.end172

cond.end172:                                      ; preds = %cond.false168, %cond.true167
  br label %if.end173

if.end173:                                        ; preds = %cond.end172, %cond.false161, %cond.false145, %cond.true144, %cond.true112, %cond.true81
  br label %if.end174

if.end174:                                        ; preds = %if.end173, %if.else44
  br label %if.end175

if.end175:                                        ; preds = %if.end174, %if.then43
  %146 = load %struct.cv*, %struct.cv** %cv, align 8
  %147 = load %struct.gv*, %struct.gv** %gv, align 8
  call void @Perl_cvgv_set(%struct.cv* %146, %struct.gv* %147)
  %148 = load i8*, i8** %filename.addr, align 8
  %tobool176 = icmp ne i8* %148, null
  br i1 %tobool176, label %if.then177, label %if.else191

if.then177:                                       ; preds = %if.end175
  %149 = load i8*, i8** %filename.addr, align 8
  %call178 = call %struct.gv* @Perl_gv_fetchfile(i8* %149)
  %150 = load i32, i32* %flags.addr, align 4
  %and179 = and i32 %150, 1
  %tobool180 = icmp ne i32 %and179, 0
  br i1 %tobool180, label %if.then181, label %if.else187

if.then181:                                       ; preds = %if.then177
  %151 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any182 = getelementptr inbounds %struct.cv, %struct.cv* %151, i32 0, i32 0
  %152 = load %struct.xpvcv*, %struct.xpvcv** %sv_any182, align 8
  %153 = bitcast %struct.xpvcv* %152 to i8*
  %154 = bitcast i8* %153 to %struct.xpvcv*
  %xcv_flags183 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %154, i32 0, i32 12
  %155 = load i32, i32* %xcv_flags183, align 4
  %or184 = or i32 %155, 4096
  store i32 %or184, i32* %xcv_flags183, align 4
  %156 = load i8*, i8** %filename.addr, align 8
  %call185 = call i8* @Perl_savepv(i8* %156)
  %157 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any186 = getelementptr inbounds %struct.cv, %struct.cv* %157, i32 0, i32 0
  %158 = load %struct.xpvcv*, %struct.xpvcv** %sv_any186, align 8
  %159 = bitcast %struct.xpvcv* %158 to i8*
  %160 = bitcast i8* %159 to %struct.xpvcv*
  %xcv_file = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %160, i32 0, i32 8
  store i8* %call185, i8** %xcv_file, align 8
  br label %if.end190

if.else187:                                       ; preds = %if.then177
  %161 = load i8*, i8** %filename.addr, align 8
  %162 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any188 = getelementptr inbounds %struct.cv, %struct.cv* %162, i32 0, i32 0
  %163 = load %struct.xpvcv*, %struct.xpvcv** %sv_any188, align 8
  %164 = bitcast %struct.xpvcv* %163 to i8*
  %165 = bitcast i8* %164 to %struct.xpvcv*
  %xcv_file189 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %165, i32 0, i32 8
  store i8* %161, i8** %xcv_file189, align 8
  br label %if.end190

if.end190:                                        ; preds = %if.else187, %if.then181
  br label %if.end194

if.else191:                                       ; preds = %if.end175
  %166 = load i8*, i8** @PL_xsubfilename, align 8
  %167 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any192 = getelementptr inbounds %struct.cv, %struct.cv* %167, i32 0, i32 0
  %168 = load %struct.xpvcv*, %struct.xpvcv** %sv_any192, align 8
  %169 = bitcast %struct.xpvcv* %168 to i8*
  %170 = bitcast i8* %169 to %struct.xpvcv*
  %xcv_file193 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %170, i32 0, i32 8
  store i8* %166, i8** %xcv_file193, align 8
  br label %if.end194

if.end194:                                        ; preds = %if.else191, %if.end190
  %171 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any195 = getelementptr inbounds %struct.cv, %struct.cv* %171, i32 0, i32 0
  %172 = load %struct.xpvcv*, %struct.xpvcv** %sv_any195, align 8
  %173 = bitcast %struct.xpvcv* %172 to i8*
  %174 = bitcast i8* %173 to %struct.xpvcv*
  %xcv_flags196 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %174, i32 0, i32 12
  %175 = load i32, i32* %xcv_flags196, align 4
  %or197 = or i32 %175, 8
  store i32 %or197, i32* %xcv_flags196, align 4
  %176 = load void (%struct.cv*)*, void (%struct.cv*)** %subaddr.addr, align 8
  %177 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any198 = getelementptr inbounds %struct.cv, %struct.cv* %177, i32 0, i32 0
  %178 = load %struct.xpvcv*, %struct.xpvcv** %sv_any198, align 8
  %179 = bitcast %struct.xpvcv* %178 to i8*
  %180 = bitcast i8* %179 to %struct.xpvcv*
  %xcv_root_u199 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %180, i32 0, i32 6
  %xcv_xsub200 = bitcast %union.anon.7* %xcv_root_u199 to void (%struct.cv*)**
  store void (%struct.cv*)* %176, void (%struct.cv*)** %xcv_xsub200, align 8
  %181 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any201 = getelementptr inbounds %struct.cv, %struct.cv* %181, i32 0, i32 0
  %182 = load %struct.xpvcv*, %struct.xpvcv** %sv_any201, align 8
  %183 = bitcast %struct.xpvcv* %182 to i8*
  %184 = bitcast i8* %183 to %struct.xpvcv*
  %xcv_padlist_u = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %184, i32 0, i32 9
  %xcv_hscxt = bitcast %union.anon.9* %xcv_padlist_u to i8**
  store i8* bitcast (%struct.sv*** @PL_stack_sp to i8*), i8** %xcv_hscxt, align 8
  %185 = load i8*, i8** %name.addr, align 8
  %tobool202 = icmp ne i8* %185, null
  br i1 %tobool202, label %if.then203, label %if.else205

if.then203:                                       ; preds = %if.end194
  %186 = load i8*, i8** %name.addr, align 8
  %187 = load %struct.gv*, %struct.gv** %gv, align 8
  %188 = load %struct.cv*, %struct.cv** %cv, align 8
  %call204 = call zeroext i1 @S_process_special_blocks(i32 0, i8* %186, %struct.gv* %187, %struct.cv* %188)
  br label %if.end209

if.else205:                                       ; preds = %if.end194
  %189 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any206 = getelementptr inbounds %struct.cv, %struct.cv* %189, i32 0, i32 0
  %190 = load %struct.xpvcv*, %struct.xpvcv** %sv_any206, align 8
  %191 = bitcast %struct.xpvcv* %190 to i8*
  %192 = bitcast i8* %191 to %struct.xpvcv*
  %xcv_flags207 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %192, i32 0, i32 12
  %193 = load i32, i32* %xcv_flags207, align 4
  %or208 = or i32 %193, 128
  store i32 %or208, i32* %xcv_flags207, align 4
  br label %if.end209

if.end209:                                        ; preds = %if.else205, %if.then203
  %194 = load %struct.cv*, %struct.cv** %cv, align 8
  %195 = bitcast %struct.cv* %194 to i8*
  %196 = bitcast i8* %195 to %struct.sv*
  %197 = load i8*, i8** %proto.addr, align 8
  call void @Perl_sv_setpv(%struct.sv* %196, i8* %197)
  %198 = load i8, i8* %interleave, align 1
  %tobool210 = trunc i8 %198 to i1
  br i1 %tobool210, label %if.then211, label %if.end212

if.then211:                                       ; preds = %if.end209
  call void @Perl_pop_scope()
  br label %if.end212

if.end212:                                        ; preds = %if.then211, %if.end209
  %199 = load %struct.cv*, %struct.cv** %cv, align 8
  ret %struct.cv* %199
}

; Function Attrs: noinline nounwind uwtable
define internal void @const_av_xsub(%struct.cv* %cv) #0 {
entry:
  %cv.addr = alloca %struct.cv*, align 8
  %sp = alloca %struct.sv**, align 8
  %ax = alloca i32, align 4
  %mark = alloca %struct.sv**, align 8
  %items = alloca i32, align 4
  %av = alloca %struct.av*, align 8
  %tmpXSoff = alloca i64, align 8
  %tmpXSoff35 = alloca i64, align 8
  %tmpXSoff67 = alloca i64, align 8
  store %struct.cv* %cv, %struct.cv** %cv.addr, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load i32*, i32** @PL_markstack_ptr, align 8
  %incdec.ptr = getelementptr inbounds i32, i32* %1, i32 -1
  store i32* %incdec.ptr, i32** @PL_markstack_ptr, align 8
  %2 = load i32, i32* %1, align 4
  store i32 %2, i32* %ax, align 4
  %3 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %4 = load i32, i32* %ax, align 4
  %inc = add nsw i32 %4, 1
  store i32 %inc, i32* %ax, align 4
  %idx.ext = sext i32 %4 to i64
  %add.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %3, i64 %idx.ext
  store %struct.sv** %add.ptr, %struct.sv*** %mark, align 8
  %5 = load %struct.sv**, %struct.sv*** %sp, align 8
  %6 = load %struct.sv**, %struct.sv*** %mark, align 8
  %sub.ptr.lhs.cast = ptrtoint %struct.sv** %5 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.sv** %6 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 8
  %conv = trunc i64 %sub.ptr.div to i32
  store i32 %conv, i32* %items, align 4
  %7 = load %struct.cv*, %struct.cv** %cv.addr, align 8
  %sv_any = getelementptr inbounds %struct.cv, %struct.cv* %7, i32 0, i32 0
  %8 = load %struct.xpvcv*, %struct.xpvcv** %sv_any, align 8
  %9 = bitcast %struct.xpvcv* %8 to i8*
  %10 = bitcast i8* %9 to %struct.xpvcv*
  %xcv_start_u = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %10, i32 0, i32 5
  %xcv_xsubany = bitcast %union.anon.6* %xcv_start_u to %union.any*
  %any_ptr = bitcast %union.any* %xcv_xsubany to i8**
  %11 = load i8*, i8** %any_ptr, align 8
  %12 = bitcast i8* %11 to %struct.av*
  store %struct.av* %12, %struct.av** %av, align 8
  %13 = load i32, i32* %items, align 4
  %14 = load %struct.sv**, %struct.sv*** %sp, align 8
  %idx.ext1 = sext i32 %13 to i64
  %idx.neg = sub i64 0, %idx.ext1
  %add.ptr2 = getelementptr inbounds %struct.sv*, %struct.sv** %14, i64 %idx.neg
  store %struct.sv** %add.ptr2, %struct.sv*** %sp, align 8
  %15 = load %struct.av*, %struct.av** %av, align 8
  %tobool = icmp ne %struct.av* %15, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  br label %do.body

do.body:                                          ; preds = %if.then
  store i64 0, i64* %tmpXSoff, align 8
  %16 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %17 = load i32, i32* %ax, align 4
  %idx.ext3 = sext i32 %17 to i64
  %add.ptr4 = getelementptr inbounds %struct.sv*, %struct.sv** %16, i64 %idx.ext3
  %add.ptr5 = getelementptr inbounds %struct.sv*, %struct.sv** %add.ptr4, i64 -1
  store %struct.sv** %add.ptr5, %struct.sv*** @PL_stack_sp, align 8
  br label %do.end74

do.end:                                           ; No predecessors!
  br label %if.end

if.end:                                           ; preds = %do.end, %entry
  %18 = load %struct.av*, %struct.av** %av, align 8
  %sv_flags = getelementptr inbounds %struct.av, %struct.av* %18, i32 0, i32 2
  %19 = load i32, i32* %sv_flags, align 4
  %and = and i32 %19, 8388608
  %tobool6 = icmp ne i32 %and, 0
  br i1 %tobool6, label %if.then7, label %if.end8

if.then7:                                         ; preds = %if.end
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.211, i64 0, i64 0))
  br label %if.end8

if.end8:                                          ; preds = %if.then7, %if.end
  %20 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %20, i32 0, i32 5
  %21 = load i8, i8* %op_flags, align 2
  %conv9 = zext i8 %21 to i32
  %and10 = and i32 %conv9, 3
  %tobool11 = icmp ne i32 %and10, 0
  br i1 %tobool11, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end8
  %22 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags12 = getelementptr inbounds %struct.op, %struct.op* %22, i32 0, i32 5
  %23 = load i8, i8* %op_flags12, align 2
  %conv13 = zext i8 %23 to i32
  %and14 = and i32 %conv13, 3
  br label %cond.end

cond.false:                                       ; preds = %if.end8
  %call = call i32 @Perl_block_gimme()
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %and14, %cond.true ], [ %call, %cond.false ]
  %cmp = icmp ne i32 %cond, 3
  br i1 %cmp, label %if.then16, label %if.end40

if.then16:                                        ; preds = %cond.end
  br label %do.body17

do.body17:                                        ; preds = %if.then16
  %24 = load %struct.sv**, %struct.sv*** @PL_stack_max, align 8
  %25 = load %struct.sv**, %struct.sv*** %sp, align 8
  %sub.ptr.lhs.cast18 = ptrtoint %struct.sv** %24 to i64
  %sub.ptr.rhs.cast19 = ptrtoint %struct.sv** %25 to i64
  %sub.ptr.sub20 = sub i64 %sub.ptr.lhs.cast18, %sub.ptr.rhs.cast19
  %sub.ptr.div21 = sdiv exact i64 %sub.ptr.sub20, 8
  %cmp22 = icmp slt i64 %sub.ptr.div21, 1
  br i1 %cmp22, label %cond.true24, label %cond.false25

cond.true24:                                      ; preds = %do.body17
  br i1 true, label %if.then26, label %if.end28

cond.false25:                                     ; preds = %do.body17
  br i1 false, label %if.then26, label %if.end28

if.then26:                                        ; preds = %cond.false25, %cond.true24
  %26 = load %struct.sv**, %struct.sv*** %sp, align 8
  %27 = load %struct.sv**, %struct.sv*** %sp, align 8
  %call27 = call %struct.sv** @Perl_stack_grow(%struct.sv** %26, %struct.sv** %27, i64 1)
  store %struct.sv** %call27, %struct.sv*** %sp, align 8
  %28 = load %struct.sv**, %struct.sv*** %sp, align 8
  br label %if.end28

if.end28:                                         ; preds = %if.then26, %cond.false25, %cond.true24
  br label %do.end29

do.end29:                                         ; preds = %if.end28
  %29 = load %struct.av*, %struct.av** %av, align 8
  %sv_any30 = getelementptr inbounds %struct.av, %struct.av* %29, i32 0, i32 0
  %30 = load %struct.xpvav*, %struct.xpvav** %sv_any30, align 8
  %xav_fill = getelementptr inbounds %struct.xpvav, %struct.xpvav* %30, i32 0, i32 2
  %31 = load i64, i64* %xav_fill, align 8
  %add = add nsw i64 %31, 1
  %call31 = call %struct.sv* @Perl_newSViv(i64 %add)
  %call32 = call %struct.sv* @Perl_sv_2mortal(%struct.sv* %call31)
  %32 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %33 = load i32, i32* %ax, align 4
  %add33 = add nsw i32 %33, 0
  %idxprom = sext i32 %add33 to i64
  %arrayidx = getelementptr inbounds %struct.sv*, %struct.sv** %32, i64 %idxprom
  store %struct.sv* %call32, %struct.sv** %arrayidx, align 8
  br label %do.body34

do.body34:                                        ; preds = %do.end29
  store i64 1, i64* %tmpXSoff35, align 8
  %34 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %35 = load i32, i32* %ax, align 4
  %idx.ext36 = sext i32 %35 to i64
  %add.ptr37 = getelementptr inbounds %struct.sv*, %struct.sv** %34, i64 %idx.ext36
  %add.ptr38 = getelementptr inbounds %struct.sv*, %struct.sv** %add.ptr37, i64 0
  store %struct.sv** %add.ptr38, %struct.sv*** @PL_stack_sp, align 8
  br label %do.end74

do.end39:                                         ; No predecessors!
  br label %if.end40

if.end40:                                         ; preds = %do.end39, %cond.end
  br label %do.body41

do.body41:                                        ; preds = %if.end40
  %36 = load %struct.sv**, %struct.sv*** @PL_stack_max, align 8
  %37 = load %struct.sv**, %struct.sv*** %sp, align 8
  %sub.ptr.lhs.cast42 = ptrtoint %struct.sv** %36 to i64
  %sub.ptr.rhs.cast43 = ptrtoint %struct.sv** %37 to i64
  %sub.ptr.sub44 = sub i64 %sub.ptr.lhs.cast42, %sub.ptr.rhs.cast43
  %sub.ptr.div45 = sdiv exact i64 %sub.ptr.sub44, 8
  %38 = load %struct.av*, %struct.av** %av, align 8
  %sv_any46 = getelementptr inbounds %struct.av, %struct.av* %38, i32 0, i32 0
  %39 = load %struct.xpvav*, %struct.xpvav** %sv_any46, align 8
  %xav_fill47 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %39, i32 0, i32 2
  %40 = load i64, i64* %xav_fill47, align 8
  %add48 = add nsw i64 %40, 1
  %cmp49 = icmp slt i64 %sub.ptr.div45, %add48
  br i1 %cmp49, label %cond.true51, label %cond.false52

cond.true51:                                      ; preds = %do.body41
  br i1 true, label %if.then53, label %if.end58

cond.false52:                                     ; preds = %do.body41
  br i1 false, label %if.then53, label %if.end58

if.then53:                                        ; preds = %cond.false52, %cond.true51
  %41 = load %struct.sv**, %struct.sv*** %sp, align 8
  %42 = load %struct.sv**, %struct.sv*** %sp, align 8
  %43 = load %struct.av*, %struct.av** %av, align 8
  %sv_any54 = getelementptr inbounds %struct.av, %struct.av* %43, i32 0, i32 0
  %44 = load %struct.xpvav*, %struct.xpvav** %sv_any54, align 8
  %xav_fill55 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %44, i32 0, i32 2
  %45 = load i64, i64* %xav_fill55, align 8
  %add56 = add nsw i64 %45, 1
  %call57 = call %struct.sv** @Perl_stack_grow(%struct.sv** %41, %struct.sv** %42, i64 %add56)
  store %struct.sv** %call57, %struct.sv*** %sp, align 8
  %46 = load %struct.sv**, %struct.sv*** %sp, align 8
  br label %if.end58

if.end58:                                         ; preds = %if.then53, %cond.false52, %cond.true51
  br label %do.end59

do.end59:                                         ; preds = %if.end58
  %47 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %48 = load i32, i32* %ax, align 4
  %add60 = add nsw i32 %48, 0
  %idxprom61 = sext i32 %add60 to i64
  %arrayidx62 = getelementptr inbounds %struct.sv*, %struct.sv** %47, i64 %idxprom61
  %49 = bitcast %struct.sv** %arrayidx62 to i8*
  %50 = load %struct.av*, %struct.av** %av, align 8
  %sv_u = getelementptr inbounds %struct.av, %struct.av* %50, i32 0, i32 3
  %svu_array = bitcast %union.anon.2* %sv_u to %struct.sv***
  %51 = load %struct.sv**, %struct.sv*** %svu_array, align 8
  %52 = bitcast %struct.sv** %51 to i8*
  %53 = load %struct.av*, %struct.av** %av, align 8
  %sv_any63 = getelementptr inbounds %struct.av, %struct.av* %53, i32 0, i32 0
  %54 = load %struct.xpvav*, %struct.xpvav** %sv_any63, align 8
  %xav_fill64 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %54, i32 0, i32 2
  %55 = load i64, i64* %xav_fill64, align 8
  %add65 = add nsw i64 %55, 1
  %mul = mul i64 %add65, 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %49, i8* align 1 %52, i64 %mul, i1 false)
  br label %do.body66

do.body66:                                        ; preds = %do.end59
  %56 = load %struct.av*, %struct.av** %av, align 8
  %sv_any68 = getelementptr inbounds %struct.av, %struct.av* %56, i32 0, i32 0
  %57 = load %struct.xpvav*, %struct.xpvav** %sv_any68, align 8
  %xav_fill69 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %57, i32 0, i32 2
  %58 = load i64, i64* %xav_fill69, align 8
  %add70 = add nsw i64 %58, 1
  store i64 %add70, i64* %tmpXSoff67, align 8
  %59 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %60 = load i32, i32* %ax, align 4
  %idx.ext71 = sext i32 %60 to i64
  %add.ptr72 = getelementptr inbounds %struct.sv*, %struct.sv** %59, i64 %idx.ext71
  %61 = load i64, i64* %tmpXSoff67, align 8
  %sub = sub nsw i64 %61, 1
  %add.ptr73 = getelementptr inbounds %struct.sv*, %struct.sv** %add.ptr72, i64 %sub
  store %struct.sv** %add.ptr73, %struct.sv*** @PL_stack_sp, align 8
  br label %do.end74

do.end74:                                         ; preds = %do.body, %do.body34, %do.body66
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.cv* @Perl_newXS(i8* %name, void (%struct.cv*)* %subaddr, i8* %filename) #0 {
entry:
  %name.addr = alloca i8*, align 8
  %subaddr.addr = alloca void (%struct.cv*)*, align 8
  %filename.addr = alloca i8*, align 8
  store i8* %name, i8** %name.addr, align 8
  store void (%struct.cv*)* %subaddr, void (%struct.cv*)** %subaddr.addr, align 8
  store i8* %filename, i8** %filename.addr, align 8
  %0 = load i8*, i8** %name.addr, align 8
  %1 = load i8*, i8** %name.addr, align 8
  %tobool = icmp ne i8* %1, null
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %2 = load i8*, i8** %name.addr, align 8
  %call = call i64 @strlen(i8* %2) #7
  br label %cond.end

cond.false:                                       ; preds = %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %call, %cond.true ], [ 0, %cond.false ]
  %3 = load void (%struct.cv*)*, void (%struct.cv*)** %subaddr.addr, align 8
  %4 = load i8*, i8** %filename.addr, align 8
  %call1 = call %struct.cv* @Perl_newXS_len_flags(i8* %0, i64 %cond, void (%struct.cv*)* %3, i8* %4, i8* null, %struct.sv** null, i32 0)
  ret %struct.cv* %call1
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.cv* @Perl_newXS_flags(i8* %name, void (%struct.cv*)* %subaddr, i8* %filename, i8* %proto, i32 %flags) #0 {
entry:
  %name.addr = alloca i8*, align 8
  %subaddr.addr = alloca void (%struct.cv*)*, align 8
  %filename.addr = alloca i8*, align 8
  %proto.addr = alloca i8*, align 8
  %flags.addr = alloca i32, align 4
  store i8* %name, i8** %name.addr, align 8
  store void (%struct.cv*)* %subaddr, void (%struct.cv*)** %subaddr.addr, align 8
  store i8* %filename, i8** %filename.addr, align 8
  store i8* %proto, i8** %proto.addr, align 8
  store i32 %flags, i32* %flags.addr, align 4
  %0 = load i8*, i8** %name.addr, align 8
  %1 = load i8*, i8** %name.addr, align 8
  %tobool = icmp ne i8* %1, null
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %2 = load i8*, i8** %name.addr, align 8
  %call = call i64 @strlen(i8* %2) #7
  br label %cond.end

cond.false:                                       ; preds = %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %call, %cond.true ], [ 0, %cond.false ]
  %3 = load void (%struct.cv*)*, void (%struct.cv*)** %subaddr.addr, align 8
  %4 = load i8*, i8** %filename.addr, align 8
  %5 = load i8*, i8** %proto.addr, align 8
  %6 = load i32, i32* %flags.addr, align 4
  %call1 = call %struct.cv* @Perl_newXS_len_flags(i8* %0, i64 %cond, void (%struct.cv*)* %3, i8* %4, i8* %5, %struct.sv** null, i32 %6)
  ret %struct.cv* %call1
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.cv* @Perl_newXS_deffile(i8* %name, void (%struct.cv*)* %subaddr) #0 {
entry:
  %name.addr = alloca i8*, align 8
  %subaddr.addr = alloca void (%struct.cv*)*, align 8
  store i8* %name, i8** %name.addr, align 8
  store void (%struct.cv*)* %subaddr, void (%struct.cv*)** %subaddr.addr, align 8
  %0 = load i8*, i8** %name.addr, align 8
  %1 = load i8*, i8** %name.addr, align 8
  %tobool = icmp ne i8* %1, null
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %2 = load i8*, i8** %name.addr, align 8
  %call = call i64 @strlen(i8* %2) #7
  br label %cond.end

cond.false:                                       ; preds = %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %call, %cond.true ], [ 0, %cond.false ]
  %3 = load void (%struct.cv*)*, void (%struct.cv*)** %subaddr.addr, align 8
  %call1 = call %struct.cv* @Perl_newXS_len_flags(i8* %0, i64 %cond, void (%struct.cv*)* %3, i8* null, i8* null, %struct.sv** null, i32 0)
  ret %struct.cv* %call1
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @Perl_report_redefined_cv(%struct.sv* %name, %struct.cv* %old_cv, %struct.sv** %new_const_svp) #0 {
entry:
  %name.addr = alloca %struct.sv*, align 8
  %old_cv.addr = alloca %struct.cv*, align 8
  %new_const_svp.addr = alloca %struct.sv**, align 8
  %hvname = alloca i8*, align 8
  %is_const = alloca i8, align 1
  %old_const_sv = alloca %struct.sv*, align 8
  store %struct.sv* %name, %struct.sv** %name.addr, align 8
  store %struct.cv* %old_cv, %struct.cv** %old_cv.addr, align 8
  store %struct.sv** %new_const_svp, %struct.sv*** %new_const_svp.addr, align 8
  %0 = load %struct.cv*, %struct.cv** %old_cv.addr, align 8
  %sv_any = getelementptr inbounds %struct.cv, %struct.cv* %0, i32 0, i32 0
  %1 = load %struct.xpvcv*, %struct.xpvcv** %sv_any, align 8
  %2 = bitcast %struct.xpvcv* %1 to i8*
  %3 = bitcast i8* %2 to %struct.xpvcv*
  %xcv_flags = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %3, i32 0, i32 12
  %4 = load i32, i32* %xcv_flags, align 4
  %and = and i32 %4, 4
  %tobool = icmp ne i32 %and, 0
  %lnot = xor i1 %tobool, true
  %lnot1 = xor i1 %lnot, true
  %frombool = zext i1 %lnot1 to i8
  store i8 %frombool, i8* %is_const, align 1
  %5 = load i8, i8* %is_const, align 1
  %tobool2 = trunc i8 %5 to i1
  br i1 %tobool2, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %6 = load %struct.cv*, %struct.cv** %old_cv.addr, align 8
  %call = call %struct.sv* @Perl_cv_const_sv(%struct.cv* %6)
  br label %cond.end

cond.false:                                       ; preds = %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.sv* [ %call, %cond.true ], [ null, %cond.false ]
  store %struct.sv* %cond, %struct.sv** %old_const_sv, align 8
  %7 = load i8, i8* %is_const, align 1
  %tobool3 = trunc i8 %7 to i1
  br i1 %tobool3, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %cond.end
  %8 = load %struct.sv**, %struct.sv*** %new_const_svp.addr, align 8
  %tobool4 = icmp ne %struct.sv** %8, null
  br i1 %tobool4, label %land.lhs.true5, label %if.end

land.lhs.true5:                                   ; preds = %land.lhs.true
  %9 = load %struct.sv*, %struct.sv** %old_const_sv, align 8
  %10 = load %struct.sv**, %struct.sv*** %new_const_svp.addr, align 8
  %11 = load %struct.sv*, %struct.sv** %10, align 8
  %cmp = icmp eq %struct.sv* %9, %11
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true5
  br label %if.end289

if.end:                                           ; preds = %land.lhs.true5, %land.lhs.true, %cond.end
  %call6 = call zeroext i1 @Perl_ckwarn(i32 19)
  br i1 %call6, label %land.lhs.true7, label %lor.lhs.false

land.lhs.true7:                                   ; preds = %if.end
  %12 = load %struct.cv*, %struct.cv** %old_cv.addr, align 8
  %call8 = call %struct.gv* @S_CvGV(%struct.cv* %12)
  %tobool9 = icmp ne %struct.gv* %call8, null
  br i1 %tobool9, label %land.lhs.true10, label %if.then286

land.lhs.true10:                                  ; preds = %land.lhs.true7
  %13 = load %struct.cv*, %struct.cv** %old_cv.addr, align 8
  %call11 = call %struct.gv* @S_CvGV(%struct.cv* %13)
  %sv_any12 = getelementptr inbounds %struct.gv, %struct.gv* %call11, i32 0, i32 0
  %14 = load %struct.xpvgv*, %struct.xpvgv** %sv_any12, align 8
  %xnv_u = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %14, i32 0, i32 5
  %xgv_stash = bitcast %union._xnvu* %xnv_u to %struct.hv**
  %15 = load %struct.hv*, %struct.hv** %xgv_stash, align 8
  %tobool13 = icmp ne %struct.hv* %15, null
  br i1 %tobool13, label %land.lhs.true14, label %if.then286

land.lhs.true14:                                  ; preds = %land.lhs.true10
  %16 = load %struct.cv*, %struct.cv** %old_cv.addr, align 8
  %call15 = call %struct.gv* @S_CvGV(%struct.cv* %16)
  %sv_any16 = getelementptr inbounds %struct.gv, %struct.gv* %call15, i32 0, i32 0
  %17 = load %struct.xpvgv*, %struct.xpvgv** %sv_any16, align 8
  %xnv_u17 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %17, i32 0, i32 5
  %xgv_stash18 = bitcast %union._xnvu* %xnv_u17 to %struct.hv**
  %18 = load %struct.hv*, %struct.hv** %xgv_stash18, align 8
  %sv_flags = getelementptr inbounds %struct.hv, %struct.hv* %18, i32 0, i32 2
  %19 = load i32, i32* %sv_flags, align 4
  %and19 = and i32 %19, 33554432
  %tobool20 = icmp ne i32 %and19, 0
  br i1 %tobool20, label %land.lhs.true21, label %cond.false136

land.lhs.true21:                                  ; preds = %land.lhs.true14
  %20 = load %struct.cv*, %struct.cv** %old_cv.addr, align 8
  %call22 = call %struct.gv* @S_CvGV(%struct.cv* %20)
  %sv_any23 = getelementptr inbounds %struct.gv, %struct.gv* %call22, i32 0, i32 0
  %21 = load %struct.xpvgv*, %struct.xpvgv** %sv_any23, align 8
  %xnv_u24 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %21, i32 0, i32 5
  %xgv_stash25 = bitcast %union._xnvu* %xnv_u24 to %struct.hv**
  %22 = load %struct.hv*, %struct.hv** %xgv_stash25, align 8
  %sv_u = getelementptr inbounds %struct.hv, %struct.hv* %22, i32 0, i32 3
  %svu_hash = bitcast %union.anon.4* %sv_u to %struct.he***
  %23 = load %struct.he**, %struct.he*** %svu_hash, align 8
  %24 = load %struct.cv*, %struct.cv** %old_cv.addr, align 8
  %call26 = call %struct.gv* @S_CvGV(%struct.cv* %24)
  %sv_any27 = getelementptr inbounds %struct.gv, %struct.gv* %call26, i32 0, i32 0
  %25 = load %struct.xpvgv*, %struct.xpvgv** %sv_any27, align 8
  %xnv_u28 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %25, i32 0, i32 5
  %xgv_stash29 = bitcast %union._xnvu* %xnv_u28 to %struct.hv**
  %26 = load %struct.hv*, %struct.hv** %xgv_stash29, align 8
  %sv_any30 = getelementptr inbounds %struct.hv, %struct.hv* %26, i32 0, i32 0
  %27 = load %struct.xpvhv*, %struct.xpvhv** %sv_any30, align 8
  %xhv_max = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %27, i32 0, i32 3
  %28 = load i64, i64* %xhv_max, align 8
  %add = add i64 %28, 1
  %arrayidx = getelementptr inbounds %struct.he*, %struct.he** %23, i64 %add
  %29 = bitcast %struct.he** %arrayidx to %struct.xpvhv_aux*
  %xhv_name_u = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %29, i32 0, i32 0
  %xhvnameu_name = bitcast %union._xhvnameu* %xhv_name_u to %struct.hek**
  %30 = load %struct.hek*, %struct.hek** %xhvnameu_name, align 8
  %tobool31 = icmp ne %struct.hek* %30, null
  br i1 %tobool31, label %land.lhs.true32, label %cond.false136

land.lhs.true32:                                  ; preds = %land.lhs.true21
  %31 = load %struct.cv*, %struct.cv** %old_cv.addr, align 8
  %call33 = call %struct.gv* @S_CvGV(%struct.cv* %31)
  %sv_any34 = getelementptr inbounds %struct.gv, %struct.gv* %call33, i32 0, i32 0
  %32 = load %struct.xpvgv*, %struct.xpvgv** %sv_any34, align 8
  %xnv_u35 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %32, i32 0, i32 5
  %xgv_stash36 = bitcast %union._xnvu* %xnv_u35 to %struct.hv**
  %33 = load %struct.hv*, %struct.hv** %xgv_stash36, align 8
  %sv_u37 = getelementptr inbounds %struct.hv, %struct.hv* %33, i32 0, i32 3
  %svu_hash38 = bitcast %union.anon.4* %sv_u37 to %struct.he***
  %34 = load %struct.he**, %struct.he*** %svu_hash38, align 8
  %35 = load %struct.cv*, %struct.cv** %old_cv.addr, align 8
  %call39 = call %struct.gv* @S_CvGV(%struct.cv* %35)
  %sv_any40 = getelementptr inbounds %struct.gv, %struct.gv* %call39, i32 0, i32 0
  %36 = load %struct.xpvgv*, %struct.xpvgv** %sv_any40, align 8
  %xnv_u41 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %36, i32 0, i32 5
  %xgv_stash42 = bitcast %union._xnvu* %xnv_u41 to %struct.hv**
  %37 = load %struct.hv*, %struct.hv** %xgv_stash42, align 8
  %sv_any43 = getelementptr inbounds %struct.hv, %struct.hv* %37, i32 0, i32 0
  %38 = load %struct.xpvhv*, %struct.xpvhv** %sv_any43, align 8
  %xhv_max44 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %38, i32 0, i32 3
  %39 = load i64, i64* %xhv_max44, align 8
  %add45 = add i64 %39, 1
  %arrayidx46 = getelementptr inbounds %struct.he*, %struct.he** %34, i64 %add45
  %40 = bitcast %struct.he** %arrayidx46 to %struct.xpvhv_aux*
  %xhv_name_count = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %40, i32 0, i32 4
  %41 = load i32, i32* %xhv_name_count, align 4
  %tobool47 = icmp ne i32 %41, 0
  br i1 %tobool47, label %cond.true48, label %cond.false65

cond.true48:                                      ; preds = %land.lhs.true32
  %42 = load %struct.cv*, %struct.cv** %old_cv.addr, align 8
  %call49 = call %struct.gv* @S_CvGV(%struct.cv* %42)
  %sv_any50 = getelementptr inbounds %struct.gv, %struct.gv* %call49, i32 0, i32 0
  %43 = load %struct.xpvgv*, %struct.xpvgv** %sv_any50, align 8
  %xnv_u51 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %43, i32 0, i32 5
  %xgv_stash52 = bitcast %union._xnvu* %xnv_u51 to %struct.hv**
  %44 = load %struct.hv*, %struct.hv** %xgv_stash52, align 8
  %sv_u53 = getelementptr inbounds %struct.hv, %struct.hv* %44, i32 0, i32 3
  %svu_hash54 = bitcast %union.anon.4* %sv_u53 to %struct.he***
  %45 = load %struct.he**, %struct.he*** %svu_hash54, align 8
  %46 = load %struct.cv*, %struct.cv** %old_cv.addr, align 8
  %call55 = call %struct.gv* @S_CvGV(%struct.cv* %46)
  %sv_any56 = getelementptr inbounds %struct.gv, %struct.gv* %call55, i32 0, i32 0
  %47 = load %struct.xpvgv*, %struct.xpvgv** %sv_any56, align 8
  %xnv_u57 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %47, i32 0, i32 5
  %xgv_stash58 = bitcast %union._xnvu* %xnv_u57 to %struct.hv**
  %48 = load %struct.hv*, %struct.hv** %xgv_stash58, align 8
  %sv_any59 = getelementptr inbounds %struct.hv, %struct.hv* %48, i32 0, i32 0
  %49 = load %struct.xpvhv*, %struct.xpvhv** %sv_any59, align 8
  %xhv_max60 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %49, i32 0, i32 3
  %50 = load i64, i64* %xhv_max60, align 8
  %add61 = add i64 %50, 1
  %arrayidx62 = getelementptr inbounds %struct.he*, %struct.he** %45, i64 %add61
  %51 = bitcast %struct.he** %arrayidx62 to %struct.xpvhv_aux*
  %xhv_name_u63 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %51, i32 0, i32 0
  %xhvnameu_names = bitcast %union._xhvnameu* %xhv_name_u63 to %struct.hek***
  %52 = load %struct.hek**, %struct.hek*** %xhvnameu_names, align 8
  %53 = load %struct.hek*, %struct.hek** %52, align 8
  %tobool64 = icmp ne %struct.hek* %53, null
  br i1 %tobool64, label %cond.true83, label %cond.false136

cond.false65:                                     ; preds = %land.lhs.true32
  %54 = load %struct.cv*, %struct.cv** %old_cv.addr, align 8
  %call66 = call %struct.gv* @S_CvGV(%struct.cv* %54)
  %sv_any67 = getelementptr inbounds %struct.gv, %struct.gv* %call66, i32 0, i32 0
  %55 = load %struct.xpvgv*, %struct.xpvgv** %sv_any67, align 8
  %xnv_u68 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %55, i32 0, i32 5
  %xgv_stash69 = bitcast %union._xnvu* %xnv_u68 to %struct.hv**
  %56 = load %struct.hv*, %struct.hv** %xgv_stash69, align 8
  %sv_u70 = getelementptr inbounds %struct.hv, %struct.hv* %56, i32 0, i32 3
  %svu_hash71 = bitcast %union.anon.4* %sv_u70 to %struct.he***
  %57 = load %struct.he**, %struct.he*** %svu_hash71, align 8
  %58 = load %struct.cv*, %struct.cv** %old_cv.addr, align 8
  %call72 = call %struct.gv* @S_CvGV(%struct.cv* %58)
  %sv_any73 = getelementptr inbounds %struct.gv, %struct.gv* %call72, i32 0, i32 0
  %59 = load %struct.xpvgv*, %struct.xpvgv** %sv_any73, align 8
  %xnv_u74 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %59, i32 0, i32 5
  %xgv_stash75 = bitcast %union._xnvu* %xnv_u74 to %struct.hv**
  %60 = load %struct.hv*, %struct.hv** %xgv_stash75, align 8
  %sv_any76 = getelementptr inbounds %struct.hv, %struct.hv* %60, i32 0, i32 0
  %61 = load %struct.xpvhv*, %struct.xpvhv** %sv_any76, align 8
  %xhv_max77 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %61, i32 0, i32 3
  %62 = load i64, i64* %xhv_max77, align 8
  %add78 = add i64 %62, 1
  %arrayidx79 = getelementptr inbounds %struct.he*, %struct.he** %57, i64 %add78
  %63 = bitcast %struct.he** %arrayidx79 to %struct.xpvhv_aux*
  %xhv_name_u80 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %63, i32 0, i32 0
  %xhvnameu_name81 = bitcast %union._xhvnameu* %xhv_name_u80 to %struct.hek**
  %64 = load %struct.hek*, %struct.hek** %xhvnameu_name81, align 8
  %tobool82 = icmp ne %struct.hek* %64, null
  br i1 %tobool82, label %cond.true83, label %cond.false136

cond.true83:                                      ; preds = %cond.false65, %cond.true48
  %65 = load %struct.cv*, %struct.cv** %old_cv.addr, align 8
  %call84 = call %struct.gv* @S_CvGV(%struct.cv* %65)
  %sv_any85 = getelementptr inbounds %struct.gv, %struct.gv* %call84, i32 0, i32 0
  %66 = load %struct.xpvgv*, %struct.xpvgv** %sv_any85, align 8
  %xnv_u86 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %66, i32 0, i32 5
  %xgv_stash87 = bitcast %union._xnvu* %xnv_u86 to %struct.hv**
  %67 = load %struct.hv*, %struct.hv** %xgv_stash87, align 8
  %sv_u88 = getelementptr inbounds %struct.hv, %struct.hv* %67, i32 0, i32 3
  %svu_hash89 = bitcast %union.anon.4* %sv_u88 to %struct.he***
  %68 = load %struct.he**, %struct.he*** %svu_hash89, align 8
  %69 = load %struct.cv*, %struct.cv** %old_cv.addr, align 8
  %call90 = call %struct.gv* @S_CvGV(%struct.cv* %69)
  %sv_any91 = getelementptr inbounds %struct.gv, %struct.gv* %call90, i32 0, i32 0
  %70 = load %struct.xpvgv*, %struct.xpvgv** %sv_any91, align 8
  %xnv_u92 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %70, i32 0, i32 5
  %xgv_stash93 = bitcast %union._xnvu* %xnv_u92 to %struct.hv**
  %71 = load %struct.hv*, %struct.hv** %xgv_stash93, align 8
  %sv_any94 = getelementptr inbounds %struct.hv, %struct.hv* %71, i32 0, i32 0
  %72 = load %struct.xpvhv*, %struct.xpvhv** %sv_any94, align 8
  %xhv_max95 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %72, i32 0, i32 3
  %73 = load i64, i64* %xhv_max95, align 8
  %add96 = add i64 %73, 1
  %arrayidx97 = getelementptr inbounds %struct.he*, %struct.he** %68, i64 %add96
  %74 = bitcast %struct.he** %arrayidx97 to %struct.xpvhv_aux*
  %xhv_name_count98 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %74, i32 0, i32 4
  %75 = load i32, i32* %xhv_name_count98, align 4
  %tobool99 = icmp ne i32 %75, 0
  br i1 %tobool99, label %cond.true100, label %cond.false117

cond.true100:                                     ; preds = %cond.true83
  %76 = load %struct.cv*, %struct.cv** %old_cv.addr, align 8
  %call101 = call %struct.gv* @S_CvGV(%struct.cv* %76)
  %sv_any102 = getelementptr inbounds %struct.gv, %struct.gv* %call101, i32 0, i32 0
  %77 = load %struct.xpvgv*, %struct.xpvgv** %sv_any102, align 8
  %xnv_u103 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %77, i32 0, i32 5
  %xgv_stash104 = bitcast %union._xnvu* %xnv_u103 to %struct.hv**
  %78 = load %struct.hv*, %struct.hv** %xgv_stash104, align 8
  %sv_u105 = getelementptr inbounds %struct.hv, %struct.hv* %78, i32 0, i32 3
  %svu_hash106 = bitcast %union.anon.4* %sv_u105 to %struct.he***
  %79 = load %struct.he**, %struct.he*** %svu_hash106, align 8
  %80 = load %struct.cv*, %struct.cv** %old_cv.addr, align 8
  %call107 = call %struct.gv* @S_CvGV(%struct.cv* %80)
  %sv_any108 = getelementptr inbounds %struct.gv, %struct.gv* %call107, i32 0, i32 0
  %81 = load %struct.xpvgv*, %struct.xpvgv** %sv_any108, align 8
  %xnv_u109 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %81, i32 0, i32 5
  %xgv_stash110 = bitcast %union._xnvu* %xnv_u109 to %struct.hv**
  %82 = load %struct.hv*, %struct.hv** %xgv_stash110, align 8
  %sv_any111 = getelementptr inbounds %struct.hv, %struct.hv* %82, i32 0, i32 0
  %83 = load %struct.xpvhv*, %struct.xpvhv** %sv_any111, align 8
  %xhv_max112 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %83, i32 0, i32 3
  %84 = load i64, i64* %xhv_max112, align 8
  %add113 = add i64 %84, 1
  %arrayidx114 = getelementptr inbounds %struct.he*, %struct.he** %79, i64 %add113
  %85 = bitcast %struct.he** %arrayidx114 to %struct.xpvhv_aux*
  %xhv_name_u115 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %85, i32 0, i32 0
  %xhvnameu_names116 = bitcast %union._xhvnameu* %xhv_name_u115 to %struct.hek***
  %86 = load %struct.hek**, %struct.hek*** %xhvnameu_names116, align 8
  %87 = load %struct.hek*, %struct.hek** %86, align 8
  br label %cond.end134

cond.false117:                                    ; preds = %cond.true83
  %88 = load %struct.cv*, %struct.cv** %old_cv.addr, align 8
  %call118 = call %struct.gv* @S_CvGV(%struct.cv* %88)
  %sv_any119 = getelementptr inbounds %struct.gv, %struct.gv* %call118, i32 0, i32 0
  %89 = load %struct.xpvgv*, %struct.xpvgv** %sv_any119, align 8
  %xnv_u120 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %89, i32 0, i32 5
  %xgv_stash121 = bitcast %union._xnvu* %xnv_u120 to %struct.hv**
  %90 = load %struct.hv*, %struct.hv** %xgv_stash121, align 8
  %sv_u122 = getelementptr inbounds %struct.hv, %struct.hv* %90, i32 0, i32 3
  %svu_hash123 = bitcast %union.anon.4* %sv_u122 to %struct.he***
  %91 = load %struct.he**, %struct.he*** %svu_hash123, align 8
  %92 = load %struct.cv*, %struct.cv** %old_cv.addr, align 8
  %call124 = call %struct.gv* @S_CvGV(%struct.cv* %92)
  %sv_any125 = getelementptr inbounds %struct.gv, %struct.gv* %call124, i32 0, i32 0
  %93 = load %struct.xpvgv*, %struct.xpvgv** %sv_any125, align 8
  %xnv_u126 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %93, i32 0, i32 5
  %xgv_stash127 = bitcast %union._xnvu* %xnv_u126 to %struct.hv**
  %94 = load %struct.hv*, %struct.hv** %xgv_stash127, align 8
  %sv_any128 = getelementptr inbounds %struct.hv, %struct.hv* %94, i32 0, i32 0
  %95 = load %struct.xpvhv*, %struct.xpvhv** %sv_any128, align 8
  %xhv_max129 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %95, i32 0, i32 3
  %96 = load i64, i64* %xhv_max129, align 8
  %add130 = add i64 %96, 1
  %arrayidx131 = getelementptr inbounds %struct.he*, %struct.he** %91, i64 %add130
  %97 = bitcast %struct.he** %arrayidx131 to %struct.xpvhv_aux*
  %xhv_name_u132 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %97, i32 0, i32 0
  %xhvnameu_name133 = bitcast %union._xhvnameu* %xhv_name_u132 to %struct.hek**
  %98 = load %struct.hek*, %struct.hek** %xhvnameu_name133, align 8
  br label %cond.end134

cond.end134:                                      ; preds = %cond.false117, %cond.true100
  %cond135 = phi %struct.hek* [ %87, %cond.true100 ], [ %98, %cond.false117 ]
  %hek_len = getelementptr inbounds %struct.hek, %struct.hek* %cond135, i32 0, i32 1
  %99 = load i32, i32* %hek_len, align 4
  br label %cond.end137

cond.false136:                                    ; preds = %cond.false65, %cond.true48, %land.lhs.true21, %land.lhs.true14
  br label %cond.end137

cond.end137:                                      ; preds = %cond.false136, %cond.end134
  %cond138 = phi i32 [ %99, %cond.end134 ], [ 0, %cond.false136 ]
  %cmp139 = icmp eq i32 %cond138, 7
  br i1 %cmp139, label %land.lhs.true140, label %if.then286

land.lhs.true140:                                 ; preds = %cond.end137
  %100 = load %struct.cv*, %struct.cv** %old_cv.addr, align 8
  %call141 = call %struct.gv* @S_CvGV(%struct.cv* %100)
  %sv_any142 = getelementptr inbounds %struct.gv, %struct.gv* %call141, i32 0, i32 0
  %101 = load %struct.xpvgv*, %struct.xpvgv** %sv_any142, align 8
  %xnv_u143 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %101, i32 0, i32 5
  %xgv_stash144 = bitcast %union._xnvu* %xnv_u143 to %struct.hv**
  %102 = load %struct.hv*, %struct.hv** %xgv_stash144, align 8
  %sv_flags145 = getelementptr inbounds %struct.hv, %struct.hv* %102, i32 0, i32 2
  %103 = load i32, i32* %sv_flags145, align 4
  %and146 = and i32 %103, 33554432
  %tobool147 = icmp ne i32 %and146, 0
  br i1 %tobool147, label %land.lhs.true148, label %cond.false272

land.lhs.true148:                                 ; preds = %land.lhs.true140
  %104 = load %struct.cv*, %struct.cv** %old_cv.addr, align 8
  %call149 = call %struct.gv* @S_CvGV(%struct.cv* %104)
  %sv_any150 = getelementptr inbounds %struct.gv, %struct.gv* %call149, i32 0, i32 0
  %105 = load %struct.xpvgv*, %struct.xpvgv** %sv_any150, align 8
  %xnv_u151 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %105, i32 0, i32 5
  %xgv_stash152 = bitcast %union._xnvu* %xnv_u151 to %struct.hv**
  %106 = load %struct.hv*, %struct.hv** %xgv_stash152, align 8
  %sv_u153 = getelementptr inbounds %struct.hv, %struct.hv* %106, i32 0, i32 3
  %svu_hash154 = bitcast %union.anon.4* %sv_u153 to %struct.he***
  %107 = load %struct.he**, %struct.he*** %svu_hash154, align 8
  %108 = load %struct.cv*, %struct.cv** %old_cv.addr, align 8
  %call155 = call %struct.gv* @S_CvGV(%struct.cv* %108)
  %sv_any156 = getelementptr inbounds %struct.gv, %struct.gv* %call155, i32 0, i32 0
  %109 = load %struct.xpvgv*, %struct.xpvgv** %sv_any156, align 8
  %xnv_u157 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %109, i32 0, i32 5
  %xgv_stash158 = bitcast %union._xnvu* %xnv_u157 to %struct.hv**
  %110 = load %struct.hv*, %struct.hv** %xgv_stash158, align 8
  %sv_any159 = getelementptr inbounds %struct.hv, %struct.hv* %110, i32 0, i32 0
  %111 = load %struct.xpvhv*, %struct.xpvhv** %sv_any159, align 8
  %xhv_max160 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %111, i32 0, i32 3
  %112 = load i64, i64* %xhv_max160, align 8
  %add161 = add i64 %112, 1
  %arrayidx162 = getelementptr inbounds %struct.he*, %struct.he** %107, i64 %add161
  %113 = bitcast %struct.he** %arrayidx162 to %struct.xpvhv_aux*
  %xhv_name_u163 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %113, i32 0, i32 0
  %xhvnameu_name164 = bitcast %union._xhvnameu* %xhv_name_u163 to %struct.hek**
  %114 = load %struct.hek*, %struct.hek** %xhvnameu_name164, align 8
  %tobool165 = icmp ne %struct.hek* %114, null
  br i1 %tobool165, label %land.lhs.true166, label %cond.false272

land.lhs.true166:                                 ; preds = %land.lhs.true148
  %115 = load %struct.cv*, %struct.cv** %old_cv.addr, align 8
  %call167 = call %struct.gv* @S_CvGV(%struct.cv* %115)
  %sv_any168 = getelementptr inbounds %struct.gv, %struct.gv* %call167, i32 0, i32 0
  %116 = load %struct.xpvgv*, %struct.xpvgv** %sv_any168, align 8
  %xnv_u169 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %116, i32 0, i32 5
  %xgv_stash170 = bitcast %union._xnvu* %xnv_u169 to %struct.hv**
  %117 = load %struct.hv*, %struct.hv** %xgv_stash170, align 8
  %sv_u171 = getelementptr inbounds %struct.hv, %struct.hv* %117, i32 0, i32 3
  %svu_hash172 = bitcast %union.anon.4* %sv_u171 to %struct.he***
  %118 = load %struct.he**, %struct.he*** %svu_hash172, align 8
  %119 = load %struct.cv*, %struct.cv** %old_cv.addr, align 8
  %call173 = call %struct.gv* @S_CvGV(%struct.cv* %119)
  %sv_any174 = getelementptr inbounds %struct.gv, %struct.gv* %call173, i32 0, i32 0
  %120 = load %struct.xpvgv*, %struct.xpvgv** %sv_any174, align 8
  %xnv_u175 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %120, i32 0, i32 5
  %xgv_stash176 = bitcast %union._xnvu* %xnv_u175 to %struct.hv**
  %121 = load %struct.hv*, %struct.hv** %xgv_stash176, align 8
  %sv_any177 = getelementptr inbounds %struct.hv, %struct.hv* %121, i32 0, i32 0
  %122 = load %struct.xpvhv*, %struct.xpvhv** %sv_any177, align 8
  %xhv_max178 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %122, i32 0, i32 3
  %123 = load i64, i64* %xhv_max178, align 8
  %add179 = add i64 %123, 1
  %arrayidx180 = getelementptr inbounds %struct.he*, %struct.he** %118, i64 %add179
  %124 = bitcast %struct.he** %arrayidx180 to %struct.xpvhv_aux*
  %xhv_name_count181 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %124, i32 0, i32 4
  %125 = load i32, i32* %xhv_name_count181, align 4
  %tobool182 = icmp ne i32 %125, 0
  br i1 %tobool182, label %cond.true183, label %cond.false201

cond.true183:                                     ; preds = %land.lhs.true166
  %126 = load %struct.cv*, %struct.cv** %old_cv.addr, align 8
  %call184 = call %struct.gv* @S_CvGV(%struct.cv* %126)
  %sv_any185 = getelementptr inbounds %struct.gv, %struct.gv* %call184, i32 0, i32 0
  %127 = load %struct.xpvgv*, %struct.xpvgv** %sv_any185, align 8
  %xnv_u186 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %127, i32 0, i32 5
  %xgv_stash187 = bitcast %union._xnvu* %xnv_u186 to %struct.hv**
  %128 = load %struct.hv*, %struct.hv** %xgv_stash187, align 8
  %sv_u188 = getelementptr inbounds %struct.hv, %struct.hv* %128, i32 0, i32 3
  %svu_hash189 = bitcast %union.anon.4* %sv_u188 to %struct.he***
  %129 = load %struct.he**, %struct.he*** %svu_hash189, align 8
  %130 = load %struct.cv*, %struct.cv** %old_cv.addr, align 8
  %call190 = call %struct.gv* @S_CvGV(%struct.cv* %130)
  %sv_any191 = getelementptr inbounds %struct.gv, %struct.gv* %call190, i32 0, i32 0
  %131 = load %struct.xpvgv*, %struct.xpvgv** %sv_any191, align 8
  %xnv_u192 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %131, i32 0, i32 5
  %xgv_stash193 = bitcast %union._xnvu* %xnv_u192 to %struct.hv**
  %132 = load %struct.hv*, %struct.hv** %xgv_stash193, align 8
  %sv_any194 = getelementptr inbounds %struct.hv, %struct.hv* %132, i32 0, i32 0
  %133 = load %struct.xpvhv*, %struct.xpvhv** %sv_any194, align 8
  %xhv_max195 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %133, i32 0, i32 3
  %134 = load i64, i64* %xhv_max195, align 8
  %add196 = add i64 %134, 1
  %arrayidx197 = getelementptr inbounds %struct.he*, %struct.he** %129, i64 %add196
  %135 = bitcast %struct.he** %arrayidx197 to %struct.xpvhv_aux*
  %xhv_name_u198 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %135, i32 0, i32 0
  %xhvnameu_names199 = bitcast %union._xhvnameu* %xhv_name_u198 to %struct.hek***
  %136 = load %struct.hek**, %struct.hek*** %xhvnameu_names199, align 8
  %137 = load %struct.hek*, %struct.hek** %136, align 8
  %tobool200 = icmp ne %struct.hek* %137, null
  br i1 %tobool200, label %cond.true219, label %cond.false272

cond.false201:                                    ; preds = %land.lhs.true166
  %138 = load %struct.cv*, %struct.cv** %old_cv.addr, align 8
  %call202 = call %struct.gv* @S_CvGV(%struct.cv* %138)
  %sv_any203 = getelementptr inbounds %struct.gv, %struct.gv* %call202, i32 0, i32 0
  %139 = load %struct.xpvgv*, %struct.xpvgv** %sv_any203, align 8
  %xnv_u204 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %139, i32 0, i32 5
  %xgv_stash205 = bitcast %union._xnvu* %xnv_u204 to %struct.hv**
  %140 = load %struct.hv*, %struct.hv** %xgv_stash205, align 8
  %sv_u206 = getelementptr inbounds %struct.hv, %struct.hv* %140, i32 0, i32 3
  %svu_hash207 = bitcast %union.anon.4* %sv_u206 to %struct.he***
  %141 = load %struct.he**, %struct.he*** %svu_hash207, align 8
  %142 = load %struct.cv*, %struct.cv** %old_cv.addr, align 8
  %call208 = call %struct.gv* @S_CvGV(%struct.cv* %142)
  %sv_any209 = getelementptr inbounds %struct.gv, %struct.gv* %call208, i32 0, i32 0
  %143 = load %struct.xpvgv*, %struct.xpvgv** %sv_any209, align 8
  %xnv_u210 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %143, i32 0, i32 5
  %xgv_stash211 = bitcast %union._xnvu* %xnv_u210 to %struct.hv**
  %144 = load %struct.hv*, %struct.hv** %xgv_stash211, align 8
  %sv_any212 = getelementptr inbounds %struct.hv, %struct.hv* %144, i32 0, i32 0
  %145 = load %struct.xpvhv*, %struct.xpvhv** %sv_any212, align 8
  %xhv_max213 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %145, i32 0, i32 3
  %146 = load i64, i64* %xhv_max213, align 8
  %add214 = add i64 %146, 1
  %arrayidx215 = getelementptr inbounds %struct.he*, %struct.he** %141, i64 %add214
  %147 = bitcast %struct.he** %arrayidx215 to %struct.xpvhv_aux*
  %xhv_name_u216 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %147, i32 0, i32 0
  %xhvnameu_name217 = bitcast %union._xhvnameu* %xhv_name_u216 to %struct.hek**
  %148 = load %struct.hek*, %struct.hek** %xhvnameu_name217, align 8
  %tobool218 = icmp ne %struct.hek* %148, null
  br i1 %tobool218, label %cond.true219, label %cond.false272

cond.true219:                                     ; preds = %cond.false201, %cond.true183
  %149 = load %struct.cv*, %struct.cv** %old_cv.addr, align 8
  %call220 = call %struct.gv* @S_CvGV(%struct.cv* %149)
  %sv_any221 = getelementptr inbounds %struct.gv, %struct.gv* %call220, i32 0, i32 0
  %150 = load %struct.xpvgv*, %struct.xpvgv** %sv_any221, align 8
  %xnv_u222 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %150, i32 0, i32 5
  %xgv_stash223 = bitcast %union._xnvu* %xnv_u222 to %struct.hv**
  %151 = load %struct.hv*, %struct.hv** %xgv_stash223, align 8
  %sv_u224 = getelementptr inbounds %struct.hv, %struct.hv* %151, i32 0, i32 3
  %svu_hash225 = bitcast %union.anon.4* %sv_u224 to %struct.he***
  %152 = load %struct.he**, %struct.he*** %svu_hash225, align 8
  %153 = load %struct.cv*, %struct.cv** %old_cv.addr, align 8
  %call226 = call %struct.gv* @S_CvGV(%struct.cv* %153)
  %sv_any227 = getelementptr inbounds %struct.gv, %struct.gv* %call226, i32 0, i32 0
  %154 = load %struct.xpvgv*, %struct.xpvgv** %sv_any227, align 8
  %xnv_u228 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %154, i32 0, i32 5
  %xgv_stash229 = bitcast %union._xnvu* %xnv_u228 to %struct.hv**
  %155 = load %struct.hv*, %struct.hv** %xgv_stash229, align 8
  %sv_any230 = getelementptr inbounds %struct.hv, %struct.hv* %155, i32 0, i32 0
  %156 = load %struct.xpvhv*, %struct.xpvhv** %sv_any230, align 8
  %xhv_max231 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %156, i32 0, i32 3
  %157 = load i64, i64* %xhv_max231, align 8
  %add232 = add i64 %157, 1
  %arrayidx233 = getelementptr inbounds %struct.he*, %struct.he** %152, i64 %add232
  %158 = bitcast %struct.he** %arrayidx233 to %struct.xpvhv_aux*
  %xhv_name_count234 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %158, i32 0, i32 4
  %159 = load i32, i32* %xhv_name_count234, align 4
  %tobool235 = icmp ne i32 %159, 0
  br i1 %tobool235, label %cond.true236, label %cond.false253

cond.true236:                                     ; preds = %cond.true219
  %160 = load %struct.cv*, %struct.cv** %old_cv.addr, align 8
  %call237 = call %struct.gv* @S_CvGV(%struct.cv* %160)
  %sv_any238 = getelementptr inbounds %struct.gv, %struct.gv* %call237, i32 0, i32 0
  %161 = load %struct.xpvgv*, %struct.xpvgv** %sv_any238, align 8
  %xnv_u239 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %161, i32 0, i32 5
  %xgv_stash240 = bitcast %union._xnvu* %xnv_u239 to %struct.hv**
  %162 = load %struct.hv*, %struct.hv** %xgv_stash240, align 8
  %sv_u241 = getelementptr inbounds %struct.hv, %struct.hv* %162, i32 0, i32 3
  %svu_hash242 = bitcast %union.anon.4* %sv_u241 to %struct.he***
  %163 = load %struct.he**, %struct.he*** %svu_hash242, align 8
  %164 = load %struct.cv*, %struct.cv** %old_cv.addr, align 8
  %call243 = call %struct.gv* @S_CvGV(%struct.cv* %164)
  %sv_any244 = getelementptr inbounds %struct.gv, %struct.gv* %call243, i32 0, i32 0
  %165 = load %struct.xpvgv*, %struct.xpvgv** %sv_any244, align 8
  %xnv_u245 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %165, i32 0, i32 5
  %xgv_stash246 = bitcast %union._xnvu* %xnv_u245 to %struct.hv**
  %166 = load %struct.hv*, %struct.hv** %xgv_stash246, align 8
  %sv_any247 = getelementptr inbounds %struct.hv, %struct.hv* %166, i32 0, i32 0
  %167 = load %struct.xpvhv*, %struct.xpvhv** %sv_any247, align 8
  %xhv_max248 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %167, i32 0, i32 3
  %168 = load i64, i64* %xhv_max248, align 8
  %add249 = add i64 %168, 1
  %arrayidx250 = getelementptr inbounds %struct.he*, %struct.he** %163, i64 %add249
  %169 = bitcast %struct.he** %arrayidx250 to %struct.xpvhv_aux*
  %xhv_name_u251 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %169, i32 0, i32 0
  %xhvnameu_names252 = bitcast %union._xhvnameu* %xhv_name_u251 to %struct.hek***
  %170 = load %struct.hek**, %struct.hek*** %xhvnameu_names252, align 8
  %171 = load %struct.hek*, %struct.hek** %170, align 8
  br label %cond.end270

cond.false253:                                    ; preds = %cond.true219
  %172 = load %struct.cv*, %struct.cv** %old_cv.addr, align 8
  %call254 = call %struct.gv* @S_CvGV(%struct.cv* %172)
  %sv_any255 = getelementptr inbounds %struct.gv, %struct.gv* %call254, i32 0, i32 0
  %173 = load %struct.xpvgv*, %struct.xpvgv** %sv_any255, align 8
  %xnv_u256 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %173, i32 0, i32 5
  %xgv_stash257 = bitcast %union._xnvu* %xnv_u256 to %struct.hv**
  %174 = load %struct.hv*, %struct.hv** %xgv_stash257, align 8
  %sv_u258 = getelementptr inbounds %struct.hv, %struct.hv* %174, i32 0, i32 3
  %svu_hash259 = bitcast %union.anon.4* %sv_u258 to %struct.he***
  %175 = load %struct.he**, %struct.he*** %svu_hash259, align 8
  %176 = load %struct.cv*, %struct.cv** %old_cv.addr, align 8
  %call260 = call %struct.gv* @S_CvGV(%struct.cv* %176)
  %sv_any261 = getelementptr inbounds %struct.gv, %struct.gv* %call260, i32 0, i32 0
  %177 = load %struct.xpvgv*, %struct.xpvgv** %sv_any261, align 8
  %xnv_u262 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %177, i32 0, i32 5
  %xgv_stash263 = bitcast %union._xnvu* %xnv_u262 to %struct.hv**
  %178 = load %struct.hv*, %struct.hv** %xgv_stash263, align 8
  %sv_any264 = getelementptr inbounds %struct.hv, %struct.hv* %178, i32 0, i32 0
  %179 = load %struct.xpvhv*, %struct.xpvhv** %sv_any264, align 8
  %xhv_max265 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %179, i32 0, i32 3
  %180 = load i64, i64* %xhv_max265, align 8
  %add266 = add i64 %180, 1
  %arrayidx267 = getelementptr inbounds %struct.he*, %struct.he** %175, i64 %add266
  %181 = bitcast %struct.he** %arrayidx267 to %struct.xpvhv_aux*
  %xhv_name_u268 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %181, i32 0, i32 0
  %xhvnameu_name269 = bitcast %union._xhvnameu* %xhv_name_u268 to %struct.hek**
  %182 = load %struct.hek*, %struct.hek** %xhvnameu_name269, align 8
  br label %cond.end270

cond.end270:                                      ; preds = %cond.false253, %cond.true236
  %cond271 = phi %struct.hek* [ %171, %cond.true236 ], [ %182, %cond.false253 ]
  %hek_key = getelementptr inbounds %struct.hek, %struct.hek* %cond271, i32 0, i32 2
  %arraydecay = getelementptr inbounds [1 x i8], [1 x i8]* %hek_key, i64 0, i64 0
  br label %cond.end273

cond.false272:                                    ; preds = %cond.false201, %cond.true183, %land.lhs.true148, %land.lhs.true140
  br label %cond.end273

cond.end273:                                      ; preds = %cond.false272, %cond.end270
  %cond274 = phi i8* [ %arraydecay, %cond.end270 ], [ null, %cond.false272 ]
  store i8* %cond274, i8** %hvname, align 8
  %183 = load i8*, i8** %hvname, align 8
  %call275 = call i32 @strcmp(i8* %183, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.160, i64 0, i64 0)) #7
  %tobool276 = icmp ne i32 %call275, 0
  %lnot277 = xor i1 %tobool276, true
  br i1 %lnot277, label %lor.lhs.false, label %if.then286

lor.lhs.false:                                    ; preds = %cond.end273, %if.end
  %184 = load i8, i8* %is_const, align 1
  %tobool278 = trunc i8 %184 to i1
  br i1 %tobool278, label %land.lhs.true279, label %if.end289

land.lhs.true279:                                 ; preds = %lor.lhs.false
  %call280 = call zeroext i1 @Perl_ckwarn_d(i32 19)
  br i1 %call280, label %land.lhs.true281, label %if.end289

land.lhs.true281:                                 ; preds = %land.lhs.true279
  %185 = load %struct.sv**, %struct.sv*** %new_const_svp.addr, align 8
  %tobool282 = icmp ne %struct.sv** %185, null
  br i1 %tobool282, label %lor.lhs.false283, label %if.then286

lor.lhs.false283:                                 ; preds = %land.lhs.true281
  %186 = load %struct.sv*, %struct.sv** %old_const_sv, align 8
  %187 = load %struct.sv**, %struct.sv*** %new_const_svp.addr, align 8
  %188 = load %struct.sv*, %struct.sv** %187, align 8
  %call284 = call i32 @Perl_sv_cmp_flags(%struct.sv* %186, %struct.sv* %188, i32 2)
  %tobool285 = icmp ne i32 %call284, 0
  br i1 %tobool285, label %if.then286, label %if.end289

if.then286:                                       ; preds = %lor.lhs.false283, %land.lhs.true281, %cond.end273, %cond.end137, %land.lhs.true10, %land.lhs.true7
  %189 = load i8, i8* %is_const, align 1
  %tobool287 = trunc i8 %189 to i1
  %190 = zext i1 %tobool287 to i64
  %cond288 = select i1 %tobool287, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.77, i64 0, i64 0), i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.161, i64 0, i64 0)
  %191 = load %struct.sv*, %struct.sv** %name.addr, align 8
  %192 = bitcast %struct.sv* %191 to i8*
  call void (i32, i8*, ...) @Perl_warner(i32 19, i8* %cond288, i8* %192)
  br label %if.end289

if.end289:                                        ; preds = %if.then, %if.then286, %lor.lhs.false283, %land.lhs.true279, %lor.lhs.false
  ret void
}

declare dso_local void @Perl_cv_undef(%struct.cv*) #3

declare dso_local %struct.gv* @Perl_gv_fetchfile(i8*) #3

declare dso_local i8* @Perl_savepv(i8*) #3

declare dso_local void @Perl_sv_setpv(%struct.sv*, i8*) #3

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.cv* @Perl_newSTUB(%struct.gv* %gv, i1 zeroext %fake) #0 {
entry:
  %gv.addr = alloca %struct.gv*, align 8
  %fake.addr = alloca i8, align 1
  %cv = alloca %struct.cv*, align 8
  %cvgv = alloca %struct.gv*, align 8
  store %struct.gv* %gv, %struct.gv** %gv.addr, align 8
  %frombool = zext i1 %fake to i8
  store i8 %frombool, i8* %fake.addr, align 1
  %call = call %struct.sv* @Perl_newSV_type(i32 13)
  %0 = bitcast %struct.sv* %call to i8*
  %1 = bitcast i8* %0 to %struct.cv*
  store %struct.cv* %1, %struct.cv** %cv, align 8
  %2 = load %struct.cv*, %struct.cv** %cv, align 8
  %3 = load %struct.gv*, %struct.gv** %gv.addr, align 8
  %sv_u = getelementptr inbounds %struct.gv, %struct.gv* %3, i32 0, i32 3
  %svu_gp = bitcast %union.anon.3* %sv_u to %struct.gp**
  %4 = load %struct.gp*, %struct.gp** %svu_gp, align 8
  %add.ptr = getelementptr inbounds %struct.gp, %struct.gp* %4, i64 0
  %gp_cv = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr, i32 0, i32 2
  store %struct.cv* %2, %struct.cv** %gp_cv, align 8
  %5 = load %struct.gv*, %struct.gv** %gv.addr, align 8
  %sv_u1 = getelementptr inbounds %struct.gv, %struct.gv* %5, i32 0, i32 3
  %svu_gp2 = bitcast %union.anon.3* %sv_u1 to %struct.gp**
  %6 = load %struct.gp*, %struct.gp** %svu_gp2, align 8
  %add.ptr3 = getelementptr inbounds %struct.gp, %struct.gp* %6, i64 0
  %gp_cvgen = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr3, i32 0, i32 3
  store i32 0, i32* %gp_cvgen, align 8
  %7 = load i8, i8* %fake.addr, align 1
  %tobool = trunc i8 %7 to i1
  br i1 %tobool, label %if.end, label %land.lhs.true

land.lhs.true:                                    ; preds = %entry
  %8 = load %struct.gv*, %struct.gv** %gv.addr, align 8
  %sv_any = getelementptr inbounds %struct.gv, %struct.gv* %8, i32 0, i32 0
  %9 = load %struct.xpvgv*, %struct.xpvgv** %sv_any, align 8
  %xnv_u = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %9, i32 0, i32 5
  %xgv_stash = bitcast %union._xnvu* %xnv_u to %struct.hv**
  %10 = load %struct.hv*, %struct.hv** %xgv_stash, align 8
  %sv_flags = getelementptr inbounds %struct.hv, %struct.hv* %10, i32 0, i32 2
  %11 = load i32, i32* %sv_flags, align 4
  %and = and i32 %11, 33554432
  %tobool4 = icmp ne i32 %and, 0
  br i1 %tobool4, label %land.lhs.true5, label %cond.false106

land.lhs.true5:                                   ; preds = %land.lhs.true
  %12 = load %struct.gv*, %struct.gv** %gv.addr, align 8
  %sv_any6 = getelementptr inbounds %struct.gv, %struct.gv* %12, i32 0, i32 0
  %13 = load %struct.xpvgv*, %struct.xpvgv** %sv_any6, align 8
  %xnv_u7 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %13, i32 0, i32 5
  %xgv_stash8 = bitcast %union._xnvu* %xnv_u7 to %struct.hv**
  %14 = load %struct.hv*, %struct.hv** %xgv_stash8, align 8
  %sv_u9 = getelementptr inbounds %struct.hv, %struct.hv* %14, i32 0, i32 3
  %svu_hash = bitcast %union.anon.4* %sv_u9 to %struct.he***
  %15 = load %struct.he**, %struct.he*** %svu_hash, align 8
  %16 = load %struct.gv*, %struct.gv** %gv.addr, align 8
  %sv_any10 = getelementptr inbounds %struct.gv, %struct.gv* %16, i32 0, i32 0
  %17 = load %struct.xpvgv*, %struct.xpvgv** %sv_any10, align 8
  %xnv_u11 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %17, i32 0, i32 5
  %xgv_stash12 = bitcast %union._xnvu* %xnv_u11 to %struct.hv**
  %18 = load %struct.hv*, %struct.hv** %xgv_stash12, align 8
  %sv_any13 = getelementptr inbounds %struct.hv, %struct.hv* %18, i32 0, i32 0
  %19 = load %struct.xpvhv*, %struct.xpvhv** %sv_any13, align 8
  %xhv_max = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %19, i32 0, i32 3
  %20 = load i64, i64* %xhv_max, align 8
  %add = add i64 %20, 1
  %arrayidx = getelementptr inbounds %struct.he*, %struct.he** %15, i64 %add
  %21 = bitcast %struct.he** %arrayidx to %struct.xpvhv_aux*
  %xhv_name_u = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %21, i32 0, i32 0
  %xhvnameu_name = bitcast %union._xhvnameu* %xhv_name_u to %struct.hek**
  %22 = load %struct.hek*, %struct.hek** %xhvnameu_name, align 8
  %tobool14 = icmp ne %struct.hek* %22, null
  br i1 %tobool14, label %cond.true, label %cond.false106

cond.true:                                        ; preds = %land.lhs.true5
  %23 = load %struct.gv*, %struct.gv** %gv.addr, align 8
  %sv_any15 = getelementptr inbounds %struct.gv, %struct.gv* %23, i32 0, i32 0
  %24 = load %struct.xpvgv*, %struct.xpvgv** %sv_any15, align 8
  %xnv_u16 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %24, i32 0, i32 5
  %xgv_stash17 = bitcast %union._xnvu* %xnv_u16 to %struct.hv**
  %25 = load %struct.hv*, %struct.hv** %xgv_stash17, align 8
  %sv_u18 = getelementptr inbounds %struct.hv, %struct.hv* %25, i32 0, i32 3
  %svu_hash19 = bitcast %union.anon.4* %sv_u18 to %struct.he***
  %26 = load %struct.he**, %struct.he*** %svu_hash19, align 8
  %27 = load %struct.gv*, %struct.gv** %gv.addr, align 8
  %sv_any20 = getelementptr inbounds %struct.gv, %struct.gv* %27, i32 0, i32 0
  %28 = load %struct.xpvgv*, %struct.xpvgv** %sv_any20, align 8
  %xnv_u21 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %28, i32 0, i32 5
  %xgv_stash22 = bitcast %union._xnvu* %xnv_u21 to %struct.hv**
  %29 = load %struct.hv*, %struct.hv** %xgv_stash22, align 8
  %sv_any23 = getelementptr inbounds %struct.hv, %struct.hv* %29, i32 0, i32 0
  %30 = load %struct.xpvhv*, %struct.xpvhv** %sv_any23, align 8
  %xhv_max24 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %30, i32 0, i32 3
  %31 = load i64, i64* %xhv_max24, align 8
  %add25 = add i64 %31, 1
  %arrayidx26 = getelementptr inbounds %struct.he*, %struct.he** %26, i64 %add25
  %32 = bitcast %struct.he** %arrayidx26 to %struct.xpvhv_aux*
  %xhv_name_count = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %32, i32 0, i32 4
  %33 = load i32, i32* %xhv_name_count, align 4
  %cmp = icmp sgt i32 %33, 0
  br i1 %cmp, label %cond.true27, label %cond.false

cond.true27:                                      ; preds = %cond.true
  %34 = load %struct.gv*, %struct.gv** %gv.addr, align 8
  %sv_any28 = getelementptr inbounds %struct.gv, %struct.gv* %34, i32 0, i32 0
  %35 = load %struct.xpvgv*, %struct.xpvgv** %sv_any28, align 8
  %xnv_u29 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %35, i32 0, i32 5
  %xgv_stash30 = bitcast %union._xnvu* %xnv_u29 to %struct.hv**
  %36 = load %struct.hv*, %struct.hv** %xgv_stash30, align 8
  %sv_u31 = getelementptr inbounds %struct.hv, %struct.hv* %36, i32 0, i32 3
  %svu_hash32 = bitcast %union.anon.4* %sv_u31 to %struct.he***
  %37 = load %struct.he**, %struct.he*** %svu_hash32, align 8
  %38 = load %struct.gv*, %struct.gv** %gv.addr, align 8
  %sv_any33 = getelementptr inbounds %struct.gv, %struct.gv* %38, i32 0, i32 0
  %39 = load %struct.xpvgv*, %struct.xpvgv** %sv_any33, align 8
  %xnv_u34 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %39, i32 0, i32 5
  %xgv_stash35 = bitcast %union._xnvu* %xnv_u34 to %struct.hv**
  %40 = load %struct.hv*, %struct.hv** %xgv_stash35, align 8
  %sv_any36 = getelementptr inbounds %struct.hv, %struct.hv* %40, i32 0, i32 0
  %41 = load %struct.xpvhv*, %struct.xpvhv** %sv_any36, align 8
  %xhv_max37 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %41, i32 0, i32 3
  %42 = load i64, i64* %xhv_max37, align 8
  %add38 = add i64 %42, 1
  %arrayidx39 = getelementptr inbounds %struct.he*, %struct.he** %37, i64 %add38
  %43 = bitcast %struct.he** %arrayidx39 to %struct.xpvhv_aux*
  %xhv_name_u40 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %43, i32 0, i32 0
  %xhvnameu_names = bitcast %union._xhvnameu* %xhv_name_u40 to %struct.hek***
  %44 = load %struct.hek**, %struct.hek*** %xhvnameu_names, align 8
  %arrayidx41 = getelementptr inbounds %struct.hek*, %struct.hek** %44, i64 0
  %45 = load %struct.hek*, %struct.hek** %arrayidx41, align 8
  %tobool42 = icmp ne %struct.hek* %45, null
  br i1 %tobool42, label %if.then, label %if.end

cond.false:                                       ; preds = %cond.true
  %46 = load %struct.gv*, %struct.gv** %gv.addr, align 8
  %sv_any43 = getelementptr inbounds %struct.gv, %struct.gv* %46, i32 0, i32 0
  %47 = load %struct.xpvgv*, %struct.xpvgv** %sv_any43, align 8
  %xnv_u44 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %47, i32 0, i32 5
  %xgv_stash45 = bitcast %union._xnvu* %xnv_u44 to %struct.hv**
  %48 = load %struct.hv*, %struct.hv** %xgv_stash45, align 8
  %sv_u46 = getelementptr inbounds %struct.hv, %struct.hv* %48, i32 0, i32 3
  %svu_hash47 = bitcast %union.anon.4* %sv_u46 to %struct.he***
  %49 = load %struct.he**, %struct.he*** %svu_hash47, align 8
  %50 = load %struct.gv*, %struct.gv** %gv.addr, align 8
  %sv_any48 = getelementptr inbounds %struct.gv, %struct.gv* %50, i32 0, i32 0
  %51 = load %struct.xpvgv*, %struct.xpvgv** %sv_any48, align 8
  %xnv_u49 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %51, i32 0, i32 5
  %xgv_stash50 = bitcast %union._xnvu* %xnv_u49 to %struct.hv**
  %52 = load %struct.hv*, %struct.hv** %xgv_stash50, align 8
  %sv_any51 = getelementptr inbounds %struct.hv, %struct.hv* %52, i32 0, i32 0
  %53 = load %struct.xpvhv*, %struct.xpvhv** %sv_any51, align 8
  %xhv_max52 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %53, i32 0, i32 3
  %54 = load i64, i64* %xhv_max52, align 8
  %add53 = add i64 %54, 1
  %arrayidx54 = getelementptr inbounds %struct.he*, %struct.he** %49, i64 %add53
  %55 = bitcast %struct.he** %arrayidx54 to %struct.xpvhv_aux*
  %xhv_name_count55 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %55, i32 0, i32 4
  %56 = load i32, i32* %xhv_name_count55, align 4
  %cmp56 = icmp slt i32 %56, -1
  br i1 %cmp56, label %cond.true57, label %cond.false74

cond.true57:                                      ; preds = %cond.false
  %57 = load %struct.gv*, %struct.gv** %gv.addr, align 8
  %sv_any58 = getelementptr inbounds %struct.gv, %struct.gv* %57, i32 0, i32 0
  %58 = load %struct.xpvgv*, %struct.xpvgv** %sv_any58, align 8
  %xnv_u59 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %58, i32 0, i32 5
  %xgv_stash60 = bitcast %union._xnvu* %xnv_u59 to %struct.hv**
  %59 = load %struct.hv*, %struct.hv** %xgv_stash60, align 8
  %sv_u61 = getelementptr inbounds %struct.hv, %struct.hv* %59, i32 0, i32 3
  %svu_hash62 = bitcast %union.anon.4* %sv_u61 to %struct.he***
  %60 = load %struct.he**, %struct.he*** %svu_hash62, align 8
  %61 = load %struct.gv*, %struct.gv** %gv.addr, align 8
  %sv_any63 = getelementptr inbounds %struct.gv, %struct.gv* %61, i32 0, i32 0
  %62 = load %struct.xpvgv*, %struct.xpvgv** %sv_any63, align 8
  %xnv_u64 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %62, i32 0, i32 5
  %xgv_stash65 = bitcast %union._xnvu* %xnv_u64 to %struct.hv**
  %63 = load %struct.hv*, %struct.hv** %xgv_stash65, align 8
  %sv_any66 = getelementptr inbounds %struct.hv, %struct.hv* %63, i32 0, i32 0
  %64 = load %struct.xpvhv*, %struct.xpvhv** %sv_any66, align 8
  %xhv_max67 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %64, i32 0, i32 3
  %65 = load i64, i64* %xhv_max67, align 8
  %add68 = add i64 %65, 1
  %arrayidx69 = getelementptr inbounds %struct.he*, %struct.he** %60, i64 %add68
  %66 = bitcast %struct.he** %arrayidx69 to %struct.xpvhv_aux*
  %xhv_name_u70 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %66, i32 0, i32 0
  %xhvnameu_names71 = bitcast %union._xhvnameu* %xhv_name_u70 to %struct.hek***
  %67 = load %struct.hek**, %struct.hek*** %xhvnameu_names71, align 8
  %arrayidx72 = getelementptr inbounds %struct.hek*, %struct.hek** %67, i64 1
  %68 = load %struct.hek*, %struct.hek** %arrayidx72, align 8
  %tobool73 = icmp ne %struct.hek* %68, null
  br i1 %tobool73, label %if.then, label %if.end

cond.false74:                                     ; preds = %cond.false
  %69 = load %struct.gv*, %struct.gv** %gv.addr, align 8
  %sv_any75 = getelementptr inbounds %struct.gv, %struct.gv* %69, i32 0, i32 0
  %70 = load %struct.xpvgv*, %struct.xpvgv** %sv_any75, align 8
  %xnv_u76 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %70, i32 0, i32 5
  %xgv_stash77 = bitcast %union._xnvu* %xnv_u76 to %struct.hv**
  %71 = load %struct.hv*, %struct.hv** %xgv_stash77, align 8
  %sv_u78 = getelementptr inbounds %struct.hv, %struct.hv* %71, i32 0, i32 3
  %svu_hash79 = bitcast %union.anon.4* %sv_u78 to %struct.he***
  %72 = load %struct.he**, %struct.he*** %svu_hash79, align 8
  %73 = load %struct.gv*, %struct.gv** %gv.addr, align 8
  %sv_any80 = getelementptr inbounds %struct.gv, %struct.gv* %73, i32 0, i32 0
  %74 = load %struct.xpvgv*, %struct.xpvgv** %sv_any80, align 8
  %xnv_u81 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %74, i32 0, i32 5
  %xgv_stash82 = bitcast %union._xnvu* %xnv_u81 to %struct.hv**
  %75 = load %struct.hv*, %struct.hv** %xgv_stash82, align 8
  %sv_any83 = getelementptr inbounds %struct.hv, %struct.hv* %75, i32 0, i32 0
  %76 = load %struct.xpvhv*, %struct.xpvhv** %sv_any83, align 8
  %xhv_max84 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %76, i32 0, i32 3
  %77 = load i64, i64* %xhv_max84, align 8
  %add85 = add i64 %77, 1
  %arrayidx86 = getelementptr inbounds %struct.he*, %struct.he** %72, i64 %add85
  %78 = bitcast %struct.he** %arrayidx86 to %struct.xpvhv_aux*
  %xhv_name_count87 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %78, i32 0, i32 4
  %79 = load i32, i32* %xhv_name_count87, align 4
  %cmp88 = icmp eq i32 %79, -1
  br i1 %cmp88, label %cond.true89, label %cond.false90

cond.true89:                                      ; preds = %cond.false74
  br i1 false, label %if.then, label %if.end

cond.false90:                                     ; preds = %cond.false74
  %80 = load %struct.gv*, %struct.gv** %gv.addr, align 8
  %sv_any91 = getelementptr inbounds %struct.gv, %struct.gv* %80, i32 0, i32 0
  %81 = load %struct.xpvgv*, %struct.xpvgv** %sv_any91, align 8
  %xnv_u92 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %81, i32 0, i32 5
  %xgv_stash93 = bitcast %union._xnvu* %xnv_u92 to %struct.hv**
  %82 = load %struct.hv*, %struct.hv** %xgv_stash93, align 8
  %sv_u94 = getelementptr inbounds %struct.hv, %struct.hv* %82, i32 0, i32 3
  %svu_hash95 = bitcast %union.anon.4* %sv_u94 to %struct.he***
  %83 = load %struct.he**, %struct.he*** %svu_hash95, align 8
  %84 = load %struct.gv*, %struct.gv** %gv.addr, align 8
  %sv_any96 = getelementptr inbounds %struct.gv, %struct.gv* %84, i32 0, i32 0
  %85 = load %struct.xpvgv*, %struct.xpvgv** %sv_any96, align 8
  %xnv_u97 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %85, i32 0, i32 5
  %xgv_stash98 = bitcast %union._xnvu* %xnv_u97 to %struct.hv**
  %86 = load %struct.hv*, %struct.hv** %xgv_stash98, align 8
  %sv_any99 = getelementptr inbounds %struct.hv, %struct.hv* %86, i32 0, i32 0
  %87 = load %struct.xpvhv*, %struct.xpvhv** %sv_any99, align 8
  %xhv_max100 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %87, i32 0, i32 3
  %88 = load i64, i64* %xhv_max100, align 8
  %add101 = add i64 %88, 1
  %arrayidx102 = getelementptr inbounds %struct.he*, %struct.he** %83, i64 %add101
  %89 = bitcast %struct.he** %arrayidx102 to %struct.xpvhv_aux*
  %xhv_name_u103 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %89, i32 0, i32 0
  %xhvnameu_name104 = bitcast %union._xhvnameu* %xhv_name_u103 to %struct.hek**
  %90 = load %struct.hek*, %struct.hek** %xhvnameu_name104, align 8
  %tobool105 = icmp ne %struct.hek* %90, null
  br i1 %tobool105, label %if.then, label %if.end

cond.false106:                                    ; preds = %land.lhs.true5, %land.lhs.true
  br i1 false, label %if.then, label %if.end

if.then:                                          ; preds = %cond.false106, %cond.false90, %cond.true89, %cond.true57, %cond.true27
  %91 = load %struct.gv*, %struct.gv** %gv.addr, align 8
  %sv_u107 = getelementptr inbounds %struct.gv, %struct.gv* %91, i32 0, i32 3
  %svu_gp108 = bitcast %union.anon.3* %sv_u107 to %struct.gp**
  %92 = load %struct.gp*, %struct.gp** %svu_gp108, align 8
  %add.ptr109 = getelementptr inbounds %struct.gp, %struct.gp* %92, i64 0
  %gp_refcnt = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr109, i32 0, i32 4
  %93 = load i32, i32* %gp_refcnt, align 4
  %cmp110 = icmp ugt i32 %93, 1
  br i1 %cmp110, label %cond.true111, label %cond.false112

cond.true111:                                     ; preds = %if.then
  %94 = load i32, i32* @PL_sub_generation, align 4
  %inc = add i32 %94, 1
  store i32 %inc, i32* @PL_sub_generation, align 4
  br label %cond.end

cond.false112:                                    ; preds = %if.then
  %95 = load %struct.gv*, %struct.gv** %gv.addr, align 8
  %sv_any113 = getelementptr inbounds %struct.gv, %struct.gv* %95, i32 0, i32 0
  %96 = load %struct.xpvgv*, %struct.xpvgv** %sv_any113, align 8
  %xnv_u114 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %96, i32 0, i32 5
  %xgv_stash115 = bitcast %union._xnvu* %xnv_u114 to %struct.hv**
  %97 = load %struct.hv*, %struct.hv** %xgv_stash115, align 8
  call void @Perl_mro_method_changed_in(%struct.hv* %97)
  br label %cond.end

cond.end:                                         ; preds = %cond.false112, %cond.true111
  br label %if.end

if.end:                                           ; preds = %cond.end, %cond.false106, %cond.false90, %cond.true89, %cond.true57, %cond.true27, %entry
  %98 = load %struct.gv*, %struct.gv** %gv.addr, align 8
  %sv_flags116 = getelementptr inbounds %struct.gv, %struct.gv* %98, i32 0, i32 2
  %99 = load i32, i32* %sv_flags116, align 4
  %and117 = and i32 %99, 16777216
  %tobool118 = icmp ne i32 %and117, 0
  br i1 %tobool118, label %if.then119, label %if.else

if.then119:                                       ; preds = %if.end
  %100 = load %struct.gv*, %struct.gv** %gv.addr, align 8
  %101 = bitcast %struct.gv* %100 to %struct.sv*
  %call120 = call %struct.gv* @Perl_gv_fetchsv(%struct.sv* %101, i32 2, i32 13)
  store %struct.gv* %call120, %struct.gv** %cvgv, align 8
  %102 = load %struct.gv*, %struct.gv** %cvgv, align 8
  %sv_flags121 = getelementptr inbounds %struct.gv, %struct.gv* %102, i32 0, i32 2
  %103 = load i32, i32* %sv_flags121, align 4
  %and122 = and i32 %103, -16777217
  store i32 %and122, i32* %sv_flags121, align 4
  br label %if.end123

if.else:                                          ; preds = %if.end
  %104 = load %struct.gv*, %struct.gv** %gv.addr, align 8
  store %struct.gv* %104, %struct.gv** %cvgv, align 8
  br label %if.end123

if.end123:                                        ; preds = %if.else, %if.then119
  %105 = load %struct.cv*, %struct.cv** %cv, align 8
  %106 = load %struct.gv*, %struct.gv** %cvgv, align 8
  call void @Perl_cvgv_set(%struct.cv* %105, %struct.gv* %106)
  %107 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_filegv = getelementptr inbounds %struct.cop, %struct.cop* %107, i32 0, i32 9
  %108 = load %struct.gv*, %struct.gv** %cop_filegv, align 8
  %tobool124 = icmp ne %struct.gv* %108, null
  br i1 %tobool124, label %cond.true125, label %cond.false129

cond.true125:                                     ; preds = %if.end123
  %109 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_filegv126 = getelementptr inbounds %struct.cop, %struct.cop* %109, i32 0, i32 9
  %110 = load %struct.gv*, %struct.gv** %cop_filegv126, align 8
  %sv_any127 = getelementptr inbounds %struct.gv, %struct.gv* %110, i32 0, i32 0
  %111 = load %struct.xpvgv*, %struct.xpvgv** %sv_any127, align 8
  %xiv_u = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %111, i32 0, i32 4
  %xivu_namehek = bitcast %union._xivu* %xiv_u to %struct.hek**
  %112 = load %struct.hek*, %struct.hek** %xivu_namehek, align 8
  %hek_key = getelementptr inbounds %struct.hek, %struct.hek* %112, i32 0, i32 2
  %arraydecay = getelementptr inbounds [1 x i8], [1 x i8]* %hek_key, i64 0, i64 0
  %add.ptr128 = getelementptr inbounds i8, i8* %arraydecay, i64 2
  br label %cond.end130

cond.false129:                                    ; preds = %if.end123
  br label %cond.end130

cond.end130:                                      ; preds = %cond.false129, %cond.true125
  %cond = phi i8* [ %add.ptr128, %cond.true125 ], [ null, %cond.false129 ]
  %113 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any131 = getelementptr inbounds %struct.cv, %struct.cv* %113, i32 0, i32 0
  %114 = load %struct.xpvcv*, %struct.xpvcv** %sv_any131, align 8
  %115 = bitcast %struct.xpvcv* %114 to i8*
  %116 = bitcast i8* %115 to %struct.xpvcv*
  %xcv_file = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %116, i32 0, i32 8
  store i8* %cond, i8** %xcv_file, align 8
  %117 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any132 = getelementptr inbounds %struct.cv, %struct.cv* %117, i32 0, i32 0
  %118 = load %struct.xpvcv*, %struct.xpvcv** %sv_any132, align 8
  %119 = bitcast %struct.xpvcv* %118 to i8*
  %120 = bitcast i8* %119 to %struct.xpvcv*
  %xcv_flags = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %120, i32 0, i32 12
  %121 = load i32, i32* %xcv_flags, align 4
  %and133 = and i32 %121, -4097
  store i32 %and133, i32* %xcv_flags, align 4
  %122 = load %struct.cv*, %struct.cv** %cv, align 8
  %123 = load %struct.hv*, %struct.hv** @PL_curstash, align 8
  call void @Perl_cvstash_set(%struct.cv* %122, %struct.hv* %123)
  %124 = load %struct.gv*, %struct.gv** %gv.addr, align 8
  %sv_any134 = getelementptr inbounds %struct.gv, %struct.gv* %124, i32 0, i32 0
  %125 = load %struct.xpvgv*, %struct.xpvgv** %sv_any134, align 8
  %xpv_cur = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %125, i32 0, i32 2
  %126 = load i64, i64* %xpv_cur, align 8
  %or = or i64 %126, 2
  store i64 %or, i64* %xpv_cur, align 8
  %127 = load %struct.cv*, %struct.cv** %cv, align 8
  ret %struct.cv* %127
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @Perl_newFORM(i32 %floor, %struct.op* %o, %struct.op* %block) #0 {
entry:
  %floor.addr = alloca i32, align 4
  %o.addr = alloca %struct.op*, align 8
  %block.addr = alloca %struct.op*, align 8
  %cv = alloca %struct.cv*, align 8
  %gv = alloca %struct.gv*, align 8
  %oldline = alloca i32, align 4
  store i32 %floor, i32* %floor.addr, align 4
  store %struct.op* %o, %struct.op** %o.addr, align 8
  store %struct.op* %block, %struct.op** %block.addr, align 8
  %0 = load %struct.yy_parser*, %struct.yy_parser** @PL_parser, align 8
  %tobool = icmp ne %struct.yy_parser* %0, null
  br i1 %tobool, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %1 = load %struct.yy_parser*, %struct.yy_parser** @PL_parser, align 8
  %error_count = getelementptr inbounds %struct.yy_parser, %struct.yy_parser* %1, i32 0, i32 44
  %2 = load i8, i8* %error_count, align 1
  %conv = zext i8 %2 to i32
  %tobool1 = icmp ne i32 %conv, 0
  br i1 %tobool1, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %3 = load %struct.op*, %struct.op** %block.addr, align 8
  call void @Perl_op_free(%struct.op* %3)
  br label %finish

if.end:                                           ; preds = %land.lhs.true, %entry
  %4 = load %struct.op*, %struct.op** %o.addr, align 8
  %tobool2 = icmp ne %struct.op* %4, null
  br i1 %tobool2, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end
  %5 = load %struct.op*, %struct.op** %o.addr, align 8
  %6 = bitcast %struct.op* %5 to %struct.svop*
  %op_sv = getelementptr inbounds %struct.svop, %struct.svop* %6, i32 0, i32 7
  %7 = load %struct.sv*, %struct.sv** %op_sv, align 8
  %call = call %struct.gv* @Perl_gv_fetchsv(%struct.sv* %7, i32 1, i32 14)
  br label %cond.end

cond.false:                                       ; preds = %if.end
  %call3 = call %struct.gv* @Perl_gv_fetchpvn_flags(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.78, i64 0, i64 0), i64 6, i32 129, i32 14)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.gv* [ %call, %cond.true ], [ %call3, %cond.false ]
  store %struct.gv* %cond, %struct.gv** %gv, align 8
  %8 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_any = getelementptr inbounds %struct.gv, %struct.gv* %8, i32 0, i32 0
  %9 = load %struct.xpvgv*, %struct.xpvgv** %sv_any, align 8
  %xpv_cur = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %9, i32 0, i32 2
  %10 = load i64, i64* %xpv_cur, align 8
  %or = or i64 %10, 2
  store i64 %or, i64* %xpv_cur, align 8
  %11 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u = getelementptr inbounds %struct.gv, %struct.gv* %11, i32 0, i32 3
  %svu_gp = bitcast %union.anon.3* %sv_u to %struct.gp**
  %12 = load %struct.gp*, %struct.gp** %svu_gp, align 8
  %add.ptr = getelementptr inbounds %struct.gp, %struct.gp* %12, i64 0
  %gp_form = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr, i32 0, i32 7
  %13 = load %struct.cv*, %struct.cv** %gp_form, align 8
  store %struct.cv* %13, %struct.cv** %cv, align 8
  %tobool4 = icmp ne %struct.cv* %13, null
  br i1 %tobool4, label %if.then5, label %if.end21

if.then5:                                         ; preds = %cond.end
  %call6 = call zeroext i1 @Perl_ckwarn(i32 19)
  br i1 %call6, label %if.then7, label %if.end20

if.then7:                                         ; preds = %if.then5
  %14 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_line = getelementptr inbounds %struct.cop, %struct.cop* %14, i32 0, i32 7
  %15 = load i32, i32* %cop_line, align 4
  store i32 %15, i32* %oldline, align 4
  %16 = load %struct.yy_parser*, %struct.yy_parser** @PL_parser, align 8
  %tobool8 = icmp ne %struct.yy_parser* %16, null
  br i1 %tobool8, label %land.lhs.true9, label %if.end14

land.lhs.true9:                                   ; preds = %if.then7
  %17 = load %struct.yy_parser*, %struct.yy_parser** @PL_parser, align 8
  %copline = getelementptr inbounds %struct.yy_parser, %struct.yy_parser* %17, i32 0, i32 41
  %18 = load i32, i32* %copline, align 8
  %cmp = icmp ne i32 %18, -1
  br i1 %cmp, label %if.then11, label %if.end14

if.then11:                                        ; preds = %land.lhs.true9
  %19 = load %struct.yy_parser*, %struct.yy_parser** @PL_parser, align 8
  %copline12 = getelementptr inbounds %struct.yy_parser, %struct.yy_parser* %19, i32 0, i32 41
  %20 = load i32, i32* %copline12, align 8
  %21 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_line13 = getelementptr inbounds %struct.cop, %struct.cop* %21, i32 0, i32 7
  store i32 %20, i32* %cop_line13, align 4
  br label %if.end14

if.end14:                                         ; preds = %if.then11, %land.lhs.true9, %if.then7
  %22 = load %struct.op*, %struct.op** %o.addr, align 8
  %tobool15 = icmp ne %struct.op* %22, null
  br i1 %tobool15, label %if.then16, label %if.else

if.then16:                                        ; preds = %if.end14
  %23 = load %struct.op*, %struct.op** %o.addr, align 8
  %24 = bitcast %struct.op* %23 to %struct.svop*
  %op_sv17 = getelementptr inbounds %struct.svop, %struct.svop* %24, i32 0, i32 7
  %25 = load %struct.sv*, %struct.sv** %op_sv17, align 8
  %26 = bitcast %struct.sv* %25 to i8*
  call void (i32, i8*, ...) @Perl_warner(i32 19, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.79, i64 0, i64 0), i8* %26)
  br label %if.end18

if.else:                                          ; preds = %if.end14
  call void (i32, i8*, ...) @Perl_warner(i32 19, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.80, i64 0, i64 0))
  br label %if.end18

if.end18:                                         ; preds = %if.else, %if.then16
  %27 = load i32, i32* %oldline, align 4
  %28 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_line19 = getelementptr inbounds %struct.cop, %struct.cop* %28, i32 0, i32 7
  store i32 %27, i32* %cop_line19, align 4
  br label %if.end20

if.end20:                                         ; preds = %if.end18, %if.then5
  %29 = load %struct.cv*, %struct.cv** %cv, align 8
  %30 = bitcast %struct.cv* %29 to i8*
  %31 = bitcast i8* %30 to %struct.sv*
  call void @S_SvREFCNT_dec(%struct.sv* %31)
  br label %if.end21

if.end21:                                         ; preds = %if.end20, %cond.end
  %32 = load %struct.cv*, %struct.cv** @PL_compcv, align 8
  store %struct.cv* %32, %struct.cv** %cv, align 8
  %33 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_refcnt = getelementptr inbounds %struct.cv, %struct.cv* %33, i32 0, i32 1
  %34 = load i32, i32* %sv_refcnt, align 8
  %inc = add i32 %34, 1
  store i32 %inc, i32* %sv_refcnt, align 8
  %35 = load %struct.cv*, %struct.cv** %cv, align 8
  %36 = bitcast %struct.cv* %35 to i8*
  %37 = bitcast i8* %36 to %struct.sv*
  %38 = bitcast %struct.sv* %37 to %struct.cv*
  %39 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u22 = getelementptr inbounds %struct.gv, %struct.gv* %39, i32 0, i32 3
  %svu_gp23 = bitcast %union.anon.3* %sv_u22 to %struct.gp**
  %40 = load %struct.gp*, %struct.gp** %svu_gp23, align 8
  %add.ptr24 = getelementptr inbounds %struct.gp, %struct.gp* %40, i64 0
  %gp_form25 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr24, i32 0, i32 7
  store %struct.cv* %38, %struct.cv** %gp_form25, align 8
  %41 = load %struct.cv*, %struct.cv** %cv, align 8
  %42 = load %struct.gv*, %struct.gv** %gv, align 8
  call void @Perl_cvgv_set(%struct.cv* %41, %struct.gv* %42)
  %43 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_filegv = getelementptr inbounds %struct.cop, %struct.cop* %43, i32 0, i32 9
  %44 = load %struct.gv*, %struct.gv** %cop_filegv, align 8
  %tobool26 = icmp ne %struct.gv* %44, null
  br i1 %tobool26, label %cond.true27, label %cond.false31

cond.true27:                                      ; preds = %if.end21
  %45 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_filegv28 = getelementptr inbounds %struct.cop, %struct.cop* %45, i32 0, i32 9
  %46 = load %struct.gv*, %struct.gv** %cop_filegv28, align 8
  %sv_any29 = getelementptr inbounds %struct.gv, %struct.gv* %46, i32 0, i32 0
  %47 = load %struct.xpvgv*, %struct.xpvgv** %sv_any29, align 8
  %xiv_u = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %47, i32 0, i32 4
  %xivu_namehek = bitcast %union._xivu* %xiv_u to %struct.hek**
  %48 = load %struct.hek*, %struct.hek** %xivu_namehek, align 8
  %hek_key = getelementptr inbounds %struct.hek, %struct.hek* %48, i32 0, i32 2
  %arraydecay = getelementptr inbounds [1 x i8], [1 x i8]* %hek_key, i64 0, i64 0
  %add.ptr30 = getelementptr inbounds i8, i8* %arraydecay, i64 2
  br label %cond.end32

cond.false31:                                     ; preds = %if.end21
  br label %cond.end32

cond.end32:                                       ; preds = %cond.false31, %cond.true27
  %cond33 = phi i8* [ %add.ptr30, %cond.true27 ], [ null, %cond.false31 ]
  %49 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any34 = getelementptr inbounds %struct.cv, %struct.cv* %49, i32 0, i32 0
  %50 = load %struct.xpvcv*, %struct.xpvcv** %sv_any34, align 8
  %51 = bitcast %struct.xpvcv* %50 to i8*
  %52 = bitcast i8* %51 to %struct.xpvcv*
  %xcv_file = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %52, i32 0, i32 8
  store i8* %cond33, i8** %xcv_file, align 8
  %53 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any35 = getelementptr inbounds %struct.cv, %struct.cv* %53, i32 0, i32 0
  %54 = load %struct.xpvcv*, %struct.xpvcv** %sv_any35, align 8
  %55 = bitcast %struct.xpvcv* %54 to i8*
  %56 = bitcast i8* %55 to %struct.xpvcv*
  %xcv_flags = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %56, i32 0, i32 12
  %57 = load i32, i32* %xcv_flags, align 4
  %and = and i32 %57, -4097
  store i32 %and, i32* %xcv_flags, align 4
  call void @Perl_pad_tidy(i32 2)
  %58 = load %struct.op*, %struct.op** %block.addr, align 8
  %call36 = call %struct.op* @S_scalarseq(%struct.op* %58)
  %call37 = call %struct.op* @Perl_newUNOP(i32 236, i32 0, %struct.op* %call36)
  %59 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any38 = getelementptr inbounds %struct.cv, %struct.cv* %59, i32 0, i32 0
  %60 = load %struct.xpvcv*, %struct.xpvcv** %sv_any38, align 8
  %61 = bitcast %struct.xpvcv* %60 to i8*
  %62 = bitcast i8* %61 to %struct.xpvcv*
  %xcv_root_u = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %62, i32 0, i32 6
  %xcv_root = bitcast %union.anon.7* %xcv_root_u to %struct.op**
  store %struct.op* %call37, %struct.op** %xcv_root, align 8
  %63 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any39 = getelementptr inbounds %struct.cv, %struct.cv* %63, i32 0, i32 0
  %64 = load %struct.xpvcv*, %struct.xpvcv** %sv_any39, align 8
  %65 = bitcast %struct.xpvcv* %64 to i8*
  %66 = bitcast i8* %65 to %struct.xpvcv*
  %xcv_root_u40 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %66, i32 0, i32 6
  %xcv_root41 = bitcast %union.anon.7* %xcv_root_u40 to %struct.op**
  %67 = load %struct.op*, %struct.op** %xcv_root41, align 8
  %op_private = getelementptr inbounds %struct.op, %struct.op* %67, i32 0, i32 6
  %68 = load i8, i8* %op_private, align 1
  %conv42 = zext i8 %68 to i32
  %or43 = or i32 %conv42, 64
  %conv44 = trunc i32 %or43 to i8
  store i8 %conv44, i8* %op_private, align 1
  %69 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any45 = getelementptr inbounds %struct.cv, %struct.cv* %69, i32 0, i32 0
  %70 = load %struct.xpvcv*, %struct.xpvcv** %sv_any45, align 8
  %71 = bitcast %struct.xpvcv* %70 to i8*
  %72 = bitcast i8* %71 to %struct.xpvcv*
  %xcv_root_u46 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %72, i32 0, i32 6
  %xcv_root47 = bitcast %union.anon.7* %xcv_root_u46 to %struct.op**
  %73 = load %struct.op*, %struct.op** %xcv_root47, align 8
  %op_targ = getelementptr inbounds %struct.op, %struct.op* %73, i32 0, i32 3
  store i64 1, i64* %op_targ, align 8
  %74 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any48 = getelementptr inbounds %struct.cv, %struct.cv* %74, i32 0, i32 0
  %75 = load %struct.xpvcv*, %struct.xpvcv** %sv_any48, align 8
  %76 = bitcast %struct.xpvcv* %75 to i8*
  %77 = bitcast i8* %76 to %struct.xpvcv*
  %xcv_root_u49 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %77, i32 0, i32 6
  %xcv_root50 = bitcast %union.anon.7* %xcv_root_u49 to %struct.op**
  %78 = load %struct.op*, %struct.op** %xcv_root50, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %78, i32 0, i32 0
  %79 = load %struct.op*, %struct.op** %op_next, align 8
  %tobool51 = icmp ne %struct.op* %79, null
  br i1 %tobool51, label %cond.true52, label %cond.false57

cond.true52:                                      ; preds = %cond.end32
  %80 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any53 = getelementptr inbounds %struct.cv, %struct.cv* %80, i32 0, i32 0
  %81 = load %struct.xpvcv*, %struct.xpvcv** %sv_any53, align 8
  %82 = bitcast %struct.xpvcv* %81 to i8*
  %83 = bitcast i8* %82 to %struct.xpvcv*
  %xcv_root_u54 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %83, i32 0, i32 6
  %xcv_root55 = bitcast %union.anon.7* %xcv_root_u54 to %struct.op**
  %84 = load %struct.op*, %struct.op** %xcv_root55, align 8
  %op_next56 = getelementptr inbounds %struct.op, %struct.op* %84, i32 0, i32 0
  %85 = load %struct.op*, %struct.op** %op_next56, align 8
  br label %cond.end62

cond.false57:                                     ; preds = %cond.end32
  %86 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any58 = getelementptr inbounds %struct.cv, %struct.cv* %86, i32 0, i32 0
  %87 = load %struct.xpvcv*, %struct.xpvcv** %sv_any58, align 8
  %88 = bitcast %struct.xpvcv* %87 to i8*
  %89 = bitcast i8* %88 to %struct.xpvcv*
  %xcv_root_u59 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %89, i32 0, i32 6
  %xcv_root60 = bitcast %union.anon.7* %xcv_root_u59 to %struct.op**
  %90 = load %struct.op*, %struct.op** %xcv_root60, align 8
  %call61 = call %struct.op* @Perl_op_linklist(%struct.op* %90)
  br label %cond.end62

cond.end62:                                       ; preds = %cond.false57, %cond.true52
  %cond63 = phi %struct.op* [ %85, %cond.true52 ], [ %call61, %cond.false57 ]
  %91 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any64 = getelementptr inbounds %struct.cv, %struct.cv* %91, i32 0, i32 0
  %92 = load %struct.xpvcv*, %struct.xpvcv** %sv_any64, align 8
  %93 = bitcast %struct.xpvcv* %92 to i8*
  %94 = bitcast i8* %93 to %struct.xpvcv*
  %xcv_start_u = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %94, i32 0, i32 5
  %xcv_start = bitcast %union.anon.6* %xcv_start_u to %struct.op**
  store %struct.op* %cond63, %struct.op** %xcv_start, align 8
  %95 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any65 = getelementptr inbounds %struct.cv, %struct.cv* %95, i32 0, i32 0
  %96 = load %struct.xpvcv*, %struct.xpvcv** %sv_any65, align 8
  %97 = bitcast %struct.xpvcv* %96 to i8*
  %98 = bitcast i8* %97 to %struct.xpvcv*
  %xcv_root_u66 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %98, i32 0, i32 6
  %xcv_root67 = bitcast %union.anon.7* %xcv_root_u66 to %struct.op**
  %99 = load %struct.op*, %struct.op** %xcv_root67, align 8
  %op_next68 = getelementptr inbounds %struct.op, %struct.op* %99, i32 0, i32 0
  store %struct.op* null, %struct.op** %op_next68, align 8
  %100 = load void (%struct.op*)*, void (%struct.op*)** @PL_peepp, align 8
  %101 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any69 = getelementptr inbounds %struct.cv, %struct.cv* %101, i32 0, i32 0
  %102 = load %struct.xpvcv*, %struct.xpvcv** %sv_any69, align 8
  %103 = bitcast %struct.xpvcv* %102 to i8*
  %104 = bitcast i8* %103 to %struct.xpvcv*
  %xcv_start_u70 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %104, i32 0, i32 5
  %xcv_start71 = bitcast %union.anon.6* %xcv_start_u70 to %struct.op**
  %105 = load %struct.op*, %struct.op** %xcv_start71, align 8
  call void %100(%struct.op* %105)
  %106 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any72 = getelementptr inbounds %struct.cv, %struct.cv* %106, i32 0, i32 0
  %107 = load %struct.xpvcv*, %struct.xpvcv** %sv_any72, align 8
  %108 = bitcast %struct.xpvcv* %107 to i8*
  %109 = bitcast i8* %108 to %struct.xpvcv*
  %xcv_root_u73 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %109, i32 0, i32 6
  %xcv_root74 = bitcast %union.anon.7* %xcv_root_u73 to %struct.op**
  %110 = load %struct.op*, %struct.op** %xcv_root74, align 8
  call void @Perl_finalize_optree(%struct.op* %110)
  %111 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any75 = getelementptr inbounds %struct.cv, %struct.cv* %111, i32 0, i32 0
  %112 = load %struct.xpvcv*, %struct.xpvcv** %sv_any75, align 8
  %113 = bitcast %struct.xpvcv* %112 to i8*
  %114 = bitcast i8* %113 to %struct.xpvcv*
  %xcv_start_u76 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %114, i32 0, i32 5
  %xcv_start77 = bitcast %union.anon.6* %xcv_start_u76 to %struct.op**
  call void @S_prune_chain_head(%struct.op** %xcv_start77)
  %115 = load %struct.cv*, %struct.cv** %cv, align 8
  call void @Perl_cv_forget_slab(%struct.cv* %115)
  br label %finish

finish:                                           ; preds = %cond.end62, %if.then
  %116 = load %struct.op*, %struct.op** %o.addr, align 8
  call void @Perl_op_free(%struct.op* %116)
  %117 = load %struct.yy_parser*, %struct.yy_parser** @PL_parser, align 8
  %tobool78 = icmp ne %struct.yy_parser* %117, null
  br i1 %tobool78, label %if.then79, label %if.end81

if.then79:                                        ; preds = %finish
  %118 = load %struct.yy_parser*, %struct.yy_parser** @PL_parser, align 8
  %copline80 = getelementptr inbounds %struct.yy_parser, %struct.yy_parser* %118, i32 0, i32 41
  store i32 -1, i32* %copline80, align 8
  br label %if.end81

if.end81:                                         ; preds = %if.then79, %finish
  br label %do.body

do.body:                                          ; preds = %if.end81
  %119 = load i32, i32* @PL_savestack_ix, align 4
  %120 = load i32, i32* %floor.addr, align 4
  %cmp82 = icmp sgt i32 %119, %120
  br i1 %cmp82, label %if.then84, label %if.end85

if.then84:                                        ; preds = %do.body
  %121 = load i32, i32* %floor.addr, align 4
  call void @Perl_leave_scope(i32 %121)
  br label %if.end85

if.end85:                                         ; preds = %if.then84, %do.body
  br label %do.end

do.end:                                           ; preds = %if.end85
  store i32 0, i32* getelementptr inbounds (%struct.cop, %struct.cop* @PL_compiling, i32 0, i32 11), align 4
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_newANONLIST(%struct.op* %o) #0 {
entry:
  %o.addr = alloca %struct.op*, align 8
  store %struct.op* %o, %struct.op** %o.addr, align 8
  %0 = load %struct.op*, %struct.op** %o.addr, align 8
  %call = call %struct.op* @Perl_op_convert_list(i32 160, i32 128, %struct.op* %0)
  ret %struct.op* %call
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_newANONHASH(%struct.op* %o) #0 {
entry:
  %o.addr = alloca %struct.op*, align 8
  store %struct.op* %o, %struct.op** %o.addr, align 8
  %0 = load %struct.op*, %struct.op** %o.addr, align 8
  %call = call %struct.op* @Perl_op_convert_list(i32 161, i32 128, %struct.op* %0)
  ret %struct.op* %call
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_newANONSUB(i32 %floor, %struct.op* %proto, %struct.op* %block) #0 {
entry:
  %floor.addr = alloca i32, align 4
  %proto.addr = alloca %struct.op*, align 8
  %block.addr = alloca %struct.op*, align 8
  store i32 %floor, i32* %floor.addr, align 4
  store %struct.op* %proto, %struct.op** %proto.addr, align 8
  store %struct.op* %block, %struct.op** %block.addr, align 8
  %0 = load i32, i32* %floor.addr, align 4
  %1 = load %struct.op*, %struct.op** %proto.addr, align 8
  %2 = load %struct.op*, %struct.op** %block.addr, align 8
  %call = call %struct.op* @Perl_newANONATTRSUB(i32 %0, %struct.op* %1, %struct.op* null, %struct.op* %2)
  ret %struct.op* %call
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_newANONATTRSUB(i32 %floor, %struct.op* %proto, %struct.op* %attrs, %struct.op* %block) #0 {
entry:
  %floor.addr = alloca i32, align 4
  %proto.addr = alloca %struct.op*, align 8
  %attrs.addr = alloca %struct.op*, align 8
  %block.addr = alloca %struct.op*, align 8
  %cv = alloca %struct.sv*, align 8
  %anoncode = alloca %struct.op*, align 8
  store i32 %floor, i32* %floor.addr, align 4
  store %struct.op* %proto, %struct.op** %proto.addr, align 8
  store %struct.op* %attrs, %struct.op** %attrs.addr, align 8
  store %struct.op* %block, %struct.op** %block.addr, align 8
  %0 = load i32, i32* %floor.addr, align 4
  %1 = load %struct.op*, %struct.op** %proto.addr, align 8
  %2 = load %struct.op*, %struct.op** %attrs.addr, align 8
  %3 = load %struct.op*, %struct.op** %block.addr, align 8
  %call = call %struct.cv* @Perl_newATTRSUB_x(i32 %0, %struct.op* null, %struct.op* %1, %struct.op* %2, %struct.op* %3, i1 zeroext false)
  %4 = bitcast %struct.cv* %call to i8*
  %5 = bitcast i8* %4 to %struct.sv*
  store %struct.sv* %5, %struct.sv** %cv, align 8
  %6 = load %struct.sv*, %struct.sv** %cv, align 8
  %call1 = call %struct.op* @Perl_newSVOP(i32 18, i32 0, %struct.sv* %6)
  store %struct.op* %call1, %struct.op** %anoncode, align 8
  %7 = load %struct.sv*, %struct.sv** %cv, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %7, i32 0, i32 0
  %8 = load i8*, i8** %sv_any, align 8
  %9 = bitcast i8* %8 to %struct.xpvcv*
  %xcv_flags = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %9, i32 0, i32 12
  %10 = load i32, i32* %xcv_flags, align 4
  %and = and i32 %10, 131072
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %11 = load %struct.op*, %struct.op** %anoncode, align 8
  %call2 = call %struct.op* @Perl_op_convert_list(i32 185, i32 66, %struct.op* %11)
  %call3 = call %struct.op* @Perl_newUNOP(i32 395, i32 0, %struct.op* %call2)
  store %struct.op* %call3, %struct.op** %anoncode, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %12 = load %struct.op*, %struct.op** %anoncode, align 8
  %call4 = call %struct.op* @Perl_newUNOP(i32 20, i32 0, %struct.op* %12)
  ret %struct.op* %call4
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_oopsAV(%struct.op* %o) #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %o.addr = alloca %struct.op*, align 8
  store %struct.op* %o, %struct.op** %o.addr, align 8
  %0 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type = getelementptr inbounds %struct.op, %struct.op* %0, i32 0, i32 4
  %bf.load = load i16, i16* %op_type, align 8
  %bf.clear = and i16 %bf.load, 511
  %bf.cast = zext i16 %bf.clear to i32
  switch i32 %bf.cast, label %sw.default [
    i32 9, label %sw.bb
    i32 11, label %sw.bb
    i32 15, label %sw.bb4
    i32 149, label %sw.bb4
  ]

sw.bb:                                            ; preds = %entry, %entry
  br label %do.body

do.body:                                          ; preds = %sw.bb
  %1 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type1 = getelementptr inbounds %struct.op, %struct.op* %1, i32 0, i32 4
  %bf.load2 = load i16, i16* %op_type1, align 8
  %bf.clear3 = and i16 %bf.load2, -512
  %bf.set = or i16 %bf.clear3, 10
  store i16 %bf.set, i16* %op_type1, align 8
  %2 = load %struct.op* ()*, %struct.op* ()** getelementptr inbounds ([0 x %struct.op* ()*], [0 x %struct.op* ()*]* @PL_ppaddr, i64 0, i64 10), align 8
  %3 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_ppaddr = getelementptr inbounds %struct.op, %struct.op* %3, i32 0, i32 2
  store %struct.op* ()* %2, %struct.op* ()** %op_ppaddr, align 8
  br label %do.end

do.end:                                           ; preds = %do.body
  %4 = load %struct.op*, %struct.op** %o.addr, align 8
  %call = call %struct.op* @Perl_doref(%struct.op* %4, i32 135, i1 zeroext true)
  store %struct.op* %call, %struct.op** %retval, align 8
  br label %return

sw.bb4:                                           ; preds = %entry, %entry
  br label %do.body5

do.body5:                                         ; preds = %sw.bb4
  %5 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type6 = getelementptr inbounds %struct.op, %struct.op* %5, i32 0, i32 4
  %bf.load7 = load i16, i16* %op_type6, align 8
  %bf.clear8 = and i16 %bf.load7, -512
  %bf.set9 = or i16 %bf.clear8, 135
  store i16 %bf.set9, i16* %op_type6, align 8
  %6 = load %struct.op* ()*, %struct.op* ()** getelementptr inbounds ([0 x %struct.op* ()*], [0 x %struct.op* ()*]* @PL_ppaddr, i64 0, i64 135), align 8
  %7 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_ppaddr10 = getelementptr inbounds %struct.op, %struct.op* %7, i32 0, i32 2
  store %struct.op* ()* %6, %struct.op* ()** %op_ppaddr10, align 8
  br label %do.end11

do.end11:                                         ; preds = %do.body5
  %8 = load %struct.op*, %struct.op** %o.addr, align 8
  %call12 = call %struct.op* @Perl_doref(%struct.op* %8, i32 135, i1 zeroext true)
  br label %sw.epilog

sw.default:                                       ; preds = %entry
  call void (i32, i8*, ...) @Perl_ck_warner_d(i32 24, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.81, i64 0, i64 0))
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %do.end11
  %9 = load %struct.op*, %struct.op** %o.addr, align 8
  store %struct.op* %9, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %sw.epilog, %do.end
  %10 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %10
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_oopsHV(%struct.op* %o) #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %o.addr = alloca %struct.op*, align 8
  store %struct.op* %o, %struct.op** %o.addr, align 8
  %0 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type = getelementptr inbounds %struct.op, %struct.op* %0, i32 0, i32 4
  %bf.load = load i16, i16* %op_type, align 8
  %bf.clear = and i16 %bf.load, 511
  %bf.cast = zext i16 %bf.clear to i32
  switch i32 %bf.cast, label %sw.default [
    i32 9, label %sw.bb
    i32 10, label %sw.bb
    i32 15, label %sw.bb4
    i32 135, label %sw.bb4
  ]

sw.bb:                                            ; preds = %entry, %entry
  br label %do.body

do.body:                                          ; preds = %sw.bb
  %1 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type1 = getelementptr inbounds %struct.op, %struct.op* %1, i32 0, i32 4
  %bf.load2 = load i16, i16* %op_type1, align 8
  %bf.clear3 = and i16 %bf.load2, -512
  %bf.set = or i16 %bf.clear3, 11
  store i16 %bf.set, i16* %op_type1, align 8
  %2 = load %struct.op* ()*, %struct.op* ()** getelementptr inbounds ([0 x %struct.op* ()*], [0 x %struct.op* ()*]* @PL_ppaddr, i64 0, i64 11), align 8
  %3 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_ppaddr = getelementptr inbounds %struct.op, %struct.op* %3, i32 0, i32 2
  store %struct.op* ()* %2, %struct.op* ()** %op_ppaddr, align 8
  br label %do.end

do.end:                                           ; preds = %do.body
  %4 = load %struct.op*, %struct.op** %o.addr, align 8
  %call = call %struct.op* @Perl_doref(%struct.op* %4, i32 149, i1 zeroext true)
  store %struct.op* %call, %struct.op** %retval, align 8
  br label %return

sw.bb4:                                           ; preds = %entry, %entry
  br label %do.body5

do.body5:                                         ; preds = %sw.bb4
  %5 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type6 = getelementptr inbounds %struct.op, %struct.op* %5, i32 0, i32 4
  %bf.load7 = load i16, i16* %op_type6, align 8
  %bf.clear8 = and i16 %bf.load7, -512
  %bf.set9 = or i16 %bf.clear8, 149
  store i16 %bf.set9, i16* %op_type6, align 8
  %6 = load %struct.op* ()*, %struct.op* ()** getelementptr inbounds ([0 x %struct.op* ()*], [0 x %struct.op* ()*]* @PL_ppaddr, i64 0, i64 149), align 8
  %7 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_ppaddr10 = getelementptr inbounds %struct.op, %struct.op* %7, i32 0, i32 2
  store %struct.op* ()* %6, %struct.op* ()** %op_ppaddr10, align 8
  br label %do.end11

do.end11:                                         ; preds = %do.body5
  %8 = load %struct.op*, %struct.op** %o.addr, align 8
  %call12 = call %struct.op* @Perl_doref(%struct.op* %8, i32 149, i1 zeroext true)
  br label %sw.epilog

sw.default:                                       ; preds = %entry
  call void (i32, i8*, ...) @Perl_ck_warner_d(i32 24, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.82, i64 0, i64 0))
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %do.end11
  %9 = load %struct.op*, %struct.op** %o.addr, align 8
  store %struct.op* %9, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %sw.epilog, %do.end
  %10 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %10
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_newAVREF(%struct.op* %o) #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %o.addr = alloca %struct.op*, align 8
  store %struct.op* %o, %struct.op** %o.addr, align 8
  %0 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type = getelementptr inbounds %struct.op, %struct.op* %0, i32 0, i32 4
  %bf.load = load i16, i16* %op_type, align 8
  %bf.clear = and i16 %bf.load, 511
  %bf.cast = zext i16 %bf.clear to i32
  %cmp = icmp eq i32 %bf.cast, 12
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  br label %do.body

do.body:                                          ; preds = %if.then
  %1 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type1 = getelementptr inbounds %struct.op, %struct.op* %1, i32 0, i32 4
  %bf.load2 = load i16, i16* %op_type1, align 8
  %bf.clear3 = and i16 %bf.load2, -512
  %bf.set = or i16 %bf.clear3, 10
  store i16 %bf.set, i16* %op_type1, align 8
  %2 = load %struct.op* ()*, %struct.op* ()** getelementptr inbounds ([0 x %struct.op* ()*], [0 x %struct.op* ()*]* @PL_ppaddr, i64 0, i64 10), align 8
  %3 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_ppaddr = getelementptr inbounds %struct.op, %struct.op* %3, i32 0, i32 2
  store %struct.op* ()* %2, %struct.op* ()** %op_ppaddr, align 8
  br label %do.end

do.end:                                           ; preds = %do.body
  %4 = load %struct.op*, %struct.op** %o.addr, align 8
  store %struct.op* %4, %struct.op** %retval, align 8
  br label %return

if.else:                                          ; preds = %entry
  %5 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type4 = getelementptr inbounds %struct.op, %struct.op* %5, i32 0, i32 4
  %bf.load5 = load i16, i16* %op_type4, align 8
  %bf.clear6 = and i16 %bf.load5, 511
  %bf.cast7 = zext i16 %bf.clear6 to i32
  %cmp8 = icmp eq i32 %bf.cast7, 135
  br i1 %cmp8, label %if.then14, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.else
  %6 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type9 = getelementptr inbounds %struct.op, %struct.op* %6, i32 0, i32 4
  %bf.load10 = load i16, i16* %op_type9, align 8
  %bf.clear11 = and i16 %bf.load10, 511
  %bf.cast12 = zext i16 %bf.clear11 to i32
  %cmp13 = icmp eq i32 %bf.cast12, 10
  br i1 %cmp13, label %if.then14, label %if.end

if.then14:                                        ; preds = %lor.lhs.false, %if.else
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.83, i64 0, i64 0))
  br label %if.end

if.end:                                           ; preds = %if.then14, %lor.lhs.false
  br label %if.end15

if.end15:                                         ; preds = %if.end
  %7 = load %struct.op*, %struct.op** %o.addr, align 8
  %call = call %struct.op* @Perl_scalar(%struct.op* %7)
  %call16 = call %struct.op* @Perl_newUNOP(i32 135, i32 0, %struct.op* %call)
  store %struct.op* %call16, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %if.end15, %do.end
  %8 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %8
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_newGVREF(i32 %type, %struct.op* %o) #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %type.addr = alloca i32, align 4
  %o.addr = alloca %struct.op*, align 8
  store i32 %type, i32* %type.addr, align 4
  store %struct.op* %o, %struct.op** %o.addr, align 8
  %0 = load i32, i32* %type.addr, align 4
  %cmp = icmp eq i32 %0, 171
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load i32, i32* %type.addr, align 4
  %cmp1 = icmp eq i32 %1, 169
  br i1 %cmp1, label %if.then, label %lor.lhs.false2

lor.lhs.false2:                                   ; preds = %lor.lhs.false
  %2 = load i32, i32* %type.addr, align 4
  %cmp3 = icmp eq i32 %2, 167
  br i1 %cmp3, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false2, %lor.lhs.false, %entry
  %3 = load %struct.op*, %struct.op** %o.addr, align 8
  %call = call %struct.op* @Perl_newUNOP(i32 0, i32 0, %struct.op* %3)
  store %struct.op* %call, %struct.op** %retval, align 8
  br label %return

if.end:                                           ; preds = %lor.lhs.false2
  %4 = load %struct.op*, %struct.op** %o.addr, align 8
  %call4 = call %struct.op* @Perl_newUNOP(i32 14, i32 16, %struct.op* %4)
  %5 = load i32, i32* %type.addr, align 4
  %call5 = call %struct.op* @Perl_doref(%struct.op* %call4, i32 %5, i1 zeroext true)
  store %struct.op* %call5, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %if.end, %if.then
  %6 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %6
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_newHVREF(%struct.op* %o) #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %o.addr = alloca %struct.op*, align 8
  store %struct.op* %o, %struct.op** %o.addr, align 8
  %0 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type = getelementptr inbounds %struct.op, %struct.op* %0, i32 0, i32 4
  %bf.load = load i16, i16* %op_type, align 8
  %bf.clear = and i16 %bf.load, 511
  %bf.cast = zext i16 %bf.clear to i32
  %cmp = icmp eq i32 %bf.cast, 12
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  br label %do.body

do.body:                                          ; preds = %if.then
  %1 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type1 = getelementptr inbounds %struct.op, %struct.op* %1, i32 0, i32 4
  %bf.load2 = load i16, i16* %op_type1, align 8
  %bf.clear3 = and i16 %bf.load2, -512
  %bf.set = or i16 %bf.clear3, 11
  store i16 %bf.set, i16* %op_type1, align 8
  %2 = load %struct.op* ()*, %struct.op* ()** getelementptr inbounds ([0 x %struct.op* ()*], [0 x %struct.op* ()*]* @PL_ppaddr, i64 0, i64 11), align 8
  %3 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_ppaddr = getelementptr inbounds %struct.op, %struct.op* %3, i32 0, i32 2
  store %struct.op* ()* %2, %struct.op* ()** %op_ppaddr, align 8
  br label %do.end

do.end:                                           ; preds = %do.body
  %4 = load %struct.op*, %struct.op** %o.addr, align 8
  store %struct.op* %4, %struct.op** %retval, align 8
  br label %return

if.else:                                          ; preds = %entry
  %5 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type4 = getelementptr inbounds %struct.op, %struct.op* %5, i32 0, i32 4
  %bf.load5 = load i16, i16* %op_type4, align 8
  %bf.clear6 = and i16 %bf.load5, 511
  %bf.cast7 = zext i16 %bf.clear6 to i32
  %cmp8 = icmp eq i32 %bf.cast7, 149
  br i1 %cmp8, label %if.then14, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.else
  %6 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type9 = getelementptr inbounds %struct.op, %struct.op* %6, i32 0, i32 4
  %bf.load10 = load i16, i16* %op_type9, align 8
  %bf.clear11 = and i16 %bf.load10, 511
  %bf.cast12 = zext i16 %bf.clear11 to i32
  %cmp13 = icmp eq i32 %bf.cast12, 11
  br i1 %cmp13, label %if.then14, label %if.end

if.then14:                                        ; preds = %lor.lhs.false, %if.else
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.84, i64 0, i64 0))
  br label %if.end

if.end:                                           ; preds = %if.then14, %lor.lhs.false
  br label %if.end15

if.end15:                                         ; preds = %if.end
  %7 = load %struct.op*, %struct.op** %o.addr, align 8
  %call = call %struct.op* @Perl_scalar(%struct.op* %7)
  %call16 = call %struct.op* @Perl_newUNOP(i32 149, i32 0, %struct.op* %call)
  store %struct.op* %call16, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %if.end15, %do.end
  %8 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %8
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_newCVREF(i32 %flags, %struct.op* %o) #0 {
entry:
  %flags.addr = alloca i32, align 4
  %o.addr = alloca %struct.op*, align 8
  store i32 %flags, i32* %flags.addr, align 4
  store %struct.op* %o, %struct.op** %o.addr, align 8
  %0 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type = getelementptr inbounds %struct.op, %struct.op* %0, i32 0, i32 4
  %bf.load = load i16, i16* %op_type, align 8
  %bf.clear = and i16 %bf.load, 511
  %bf.cast = zext i16 %bf.clear to i32
  %cmp = icmp eq i32 %bf.cast, 12
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %do.body

do.body:                                          ; preds = %if.then
  %1 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type1 = getelementptr inbounds %struct.op, %struct.op* %1, i32 0, i32 4
  %bf.load2 = load i16, i16* %op_type1, align 8
  %bf.clear3 = and i16 %bf.load2, -512
  %bf.set = or i16 %bf.clear3, 387
  store i16 %bf.set, i16* %op_type1, align 8
  %2 = load %struct.op* ()*, %struct.op* ()** getelementptr inbounds ([0 x %struct.op* ()*], [0 x %struct.op* ()*]* @PL_ppaddr, i64 0, i64 387), align 8
  %3 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_ppaddr = getelementptr inbounds %struct.op, %struct.op* %3, i32 0, i32 2
  store %struct.op* ()* %2, %struct.op* ()** %op_ppaddr, align 8
  br label %do.end

do.end:                                           ; preds = %do.body
  br label %if.end

if.end:                                           ; preds = %do.end, %entry
  %4 = load i32, i32* %flags.addr, align 4
  %5 = load %struct.op*, %struct.op** %o.addr, align 8
  %call = call %struct.op* @Perl_scalar(%struct.op* %5)
  %call4 = call %struct.op* @Perl_newUNOP(i32 17, i32 %4, %struct.op* %call)
  ret %struct.op* %call4
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_ck_anoncode(%struct.op* %o) #0 {
entry:
  %o.addr = alloca %struct.op*, align 8
  store %struct.op* %o, %struct.op** %o.addr, align 8
  %0 = load %struct.op*, %struct.op** %o.addr, align 8
  %1 = bitcast %struct.op* %0 to %struct.svop*
  %op_sv = getelementptr inbounds %struct.svop, %struct.svop* %1, i32 0, i32 7
  %2 = load %struct.sv*, %struct.sv** %op_sv, align 8
  %3 = bitcast %struct.sv* %2 to %struct.cv*
  %4 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type = getelementptr inbounds %struct.op, %struct.op* %4, i32 0, i32 4
  %bf.load = load i16, i16* %op_type, align 8
  %bf.clear = and i16 %bf.load, 511
  %bf.cast = zext i16 %bf.clear to i32
  %call = call i64 @Perl_pad_add_anon(%struct.cv* %3, i32 %bf.cast)
  %5 = load %struct.op*, %struct.op** %o.addr, align 8
  %6 = bitcast %struct.op* %5 to %struct.svop*
  %op_targ = getelementptr inbounds %struct.svop, %struct.svop* %6, i32 0, i32 3
  store i64 %call, i64* %op_targ, align 8
  %7 = load %struct.op*, %struct.op** %o.addr, align 8
  %8 = bitcast %struct.op* %7 to %struct.svop*
  %op_sv1 = getelementptr inbounds %struct.svop, %struct.svop* %8, i32 0, i32 7
  store %struct.sv* null, %struct.sv** %op_sv1, align 8
  %9 = load %struct.op*, %struct.op** %o.addr, align 8
  ret %struct.op* %9
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_ck_backtick(%struct.op* %o) #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %o.addr = alloca %struct.op*, align 8
  %gv = alloca %struct.gv*, align 8
  %newop = alloca %struct.op*, align 8
  %sibl = alloca %struct.op*, align 8
  store %struct.op* %o, %struct.op** %o.addr, align 8
  store %struct.op* null, %struct.op** %newop, align 8
  %0 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %0, i32 0, i32 5
  %1 = load i8, i8* %op_flags, align 2
  %conv = zext i8 %1 to i32
  %and = and i32 %conv, 4
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.op*, %struct.op** %o.addr, align 8
  %3 = bitcast %struct.op* %2 to %struct.unop*
  %op_first = getelementptr inbounds %struct.unop, %struct.unop* %3, i32 0, i32 7
  %4 = load %struct.op*, %struct.op** %op_first, align 8
  %op_sibling = getelementptr inbounds %struct.op, %struct.op* %4, i32 0, i32 1
  %5 = load %struct.op*, %struct.op** %op_sibling, align 8
  %add.ptr = getelementptr inbounds %struct.op, %struct.op* %5, i64 0
  store %struct.op* %add.ptr, %struct.op** %sibl, align 8
  %tobool1 = icmp ne %struct.op* %add.ptr, null
  br i1 %tobool1, label %land.lhs.true2, label %if.else

land.lhs.true2:                                   ; preds = %land.lhs.true
  %call = call %struct.gv* @Perl_gv_override(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.85, i64 0, i64 0), i64 8)
  store %struct.gv* %call, %struct.gv** %gv, align 8
  %tobool3 = icmp ne %struct.gv* %call, null
  br i1 %tobool3, label %if.then, label %if.else

if.then:                                          ; preds = %land.lhs.true2
  %6 = load %struct.op*, %struct.op** %o.addr, align 8
  %7 = load %struct.op*, %struct.op** %o.addr, align 8
  %8 = bitcast %struct.op* %7 to %struct.unop*
  %op_first4 = getelementptr inbounds %struct.unop, %struct.unop* %8, i32 0, i32 7
  %9 = load %struct.op*, %struct.op** %op_first4, align 8
  %call5 = call %struct.op* @Perl_op_sibling_splice(%struct.op* %6, %struct.op* %9, i32 -1, %struct.op* null)
  %10 = load %struct.gv*, %struct.gv** %gv, align 8
  %11 = load %struct.op*, %struct.op** %sibl, align 8
  %call6 = call %struct.op* @S_new_entersubop(%struct.gv* %10, %struct.op* %11)
  store %struct.op* %call6, %struct.op** %newop, align 8
  br label %if.end14

if.else:                                          ; preds = %land.lhs.true2, %land.lhs.true, %entry
  %12 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_flags7 = getelementptr inbounds %struct.op, %struct.op* %12, i32 0, i32 5
  %13 = load i8, i8* %op_flags7, align 2
  %conv8 = zext i8 %13 to i32
  %and9 = and i32 %conv8, 4
  %tobool10 = icmp ne i32 %and9, 0
  br i1 %tobool10, label %if.end, label %if.then11

if.then11:                                        ; preds = %if.else
  %call12 = call %struct.op* @Perl_newDEFSVOP()
  %call13 = call %struct.op* @Perl_newUNOP(i32 24, i32 0, %struct.op* %call12)
  store %struct.op* %call13, %struct.op** %newop, align 8
  br label %if.end

if.end:                                           ; preds = %if.then11, %if.else
  br label %if.end14

if.end14:                                         ; preds = %if.end, %if.then
  %14 = load %struct.op*, %struct.op** %newop, align 8
  %tobool15 = icmp ne %struct.op* %14, null
  br i1 %tobool15, label %if.then16, label %if.end17

if.then16:                                        ; preds = %if.end14
  %15 = load %struct.op*, %struct.op** %o.addr, align 8
  call void @Perl_op_free(%struct.op* %15)
  %16 = load %struct.op*, %struct.op** %newop, align 8
  store %struct.op* %16, %struct.op** %retval, align 8
  br label %return

if.end17:                                         ; preds = %if.end14
  %17 = load %struct.op*, %struct.op** %o.addr, align 8
  call void @S_io_hints(%struct.op* %17)
  %18 = load %struct.op*, %struct.op** %o.addr, align 8
  store %struct.op* %18, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %if.end17, %if.then16
  %19 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %19
}

; Function Attrs: noinline nounwind uwtable
define internal void @S_io_hints(%struct.op* %o) #0 {
entry:
  %o.addr = alloca %struct.op*, align 8
  store %struct.op* %o, %struct.op** %o.addr, align 8
  %0 = load %struct.op*, %struct.op** %o.addr, align 8
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_ck_bitop(%struct.op* %o) #0 {
entry:
  %o.addr = alloca %struct.op*, align 8
  %left = alloca %struct.op*, align 8
  %right = alloca %struct.op*, align 8
  store %struct.op* %o, %struct.op** %o.addr, align 8
  %0 = load i32, i32* getelementptr inbounds (%struct.cop, %struct.cop* @PL_compiling, i32 0, i32 10), align 8
  %and = and i32 %0, 1
  %conv = trunc i32 %and to i8
  %1 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_private = getelementptr inbounds %struct.op, %struct.op* %1, i32 0, i32 6
  store i8 %conv, i8* %op_private, align 1
  %2 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type = getelementptr inbounds %struct.op, %struct.op* %2, i32 0, i32 4
  %bf.load = load i16, i16* %op_type, align 8
  %bf.clear = and i16 %bf.load, 511
  %bf.cast = zext i16 %bf.clear to i32
  %cmp = icmp eq i32 %bf.cast, 97
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %3 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type2 = getelementptr inbounds %struct.op, %struct.op* %3, i32 0, i32 4
  %bf.load3 = load i16, i16* %op_type2, align 8
  %bf.clear4 = and i16 %bf.load3, 511
  %bf.cast5 = zext i16 %bf.clear4 to i32
  %cmp6 = icmp eq i32 %bf.cast5, 100
  br i1 %cmp6, label %if.then, label %lor.lhs.false8

lor.lhs.false8:                                   ; preds = %lor.lhs.false
  %4 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type9 = getelementptr inbounds %struct.op, %struct.op* %4, i32 0, i32 4
  %bf.load10 = load i16, i16* %op_type9, align 8
  %bf.clear11 = and i16 %bf.load10, 511
  %bf.cast12 = zext i16 %bf.clear11 to i32
  %cmp13 = icmp eq i32 %bf.cast12, 96
  br i1 %cmp13, label %if.then, label %lor.lhs.false15

lor.lhs.false15:                                  ; preds = %lor.lhs.false8
  %5 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type16 = getelementptr inbounds %struct.op, %struct.op* %5, i32 0, i32 4
  %bf.load17 = load i16, i16* %op_type16, align 8
  %bf.clear18 = and i16 %bf.load17, 511
  %bf.cast19 = zext i16 %bf.clear18 to i32
  %cmp20 = icmp eq i32 %bf.cast19, 99
  br i1 %cmp20, label %if.then, label %lor.lhs.false22

lor.lhs.false22:                                  ; preds = %lor.lhs.false15
  %6 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type23 = getelementptr inbounds %struct.op, %struct.op* %6, i32 0, i32 4
  %bf.load24 = load i16, i16* %op_type23, align 8
  %bf.clear25 = and i16 %bf.load24, 511
  %bf.cast26 = zext i16 %bf.clear25 to i32
  %cmp27 = icmp eq i32 %bf.cast26, 95
  br i1 %cmp27, label %if.then, label %lor.lhs.false29

lor.lhs.false29:                                  ; preds = %lor.lhs.false22
  %7 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type30 = getelementptr inbounds %struct.op, %struct.op* %7, i32 0, i32 4
  %bf.load31 = load i16, i16* %op_type30, align 8
  %bf.clear32 = and i16 %bf.load31, 511
  %bf.cast33 = zext i16 %bf.clear32 to i32
  %cmp34 = icmp eq i32 %bf.cast33, 98
  br i1 %cmp34, label %if.then, label %lor.lhs.false36

lor.lhs.false36:                                  ; preds = %lor.lhs.false29
  %8 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type37 = getelementptr inbounds %struct.op, %struct.op* %8, i32 0, i32 4
  %bf.load38 = load i16, i16* %op_type37, align 8
  %bf.clear39 = and i16 %bf.load38, 511
  %bf.cast40 = zext i16 %bf.clear39 to i32
  %cmp41 = icmp eq i32 %bf.cast40, 105
  br i1 %cmp41, label %if.then, label %lor.lhs.false43

lor.lhs.false43:                                  ; preds = %lor.lhs.false36
  %9 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type44 = getelementptr inbounds %struct.op, %struct.op* %9, i32 0, i32 4
  %bf.load45 = load i16, i16* %op_type44, align 8
  %bf.clear46 = and i16 %bf.load45, 511
  %bf.cast47 = zext i16 %bf.clear46 to i32
  %cmp48 = icmp eq i32 %bf.cast47, 106
  br i1 %cmp48, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false43, %lor.lhs.false36, %lor.lhs.false29, %lor.lhs.false22, %lor.lhs.false15, %lor.lhs.false8, %lor.lhs.false, %entry
  call void (i32, i8*, ...) @Perl_ck_warner_d(i32 60, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.86, i64 0, i64 0))
  br label %if.end

if.end:                                           ; preds = %if.then, %lor.lhs.false43
  %10 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %10, i32 0, i32 5
  %11 = load i8, i8* %op_flags, align 2
  %conv50 = zext i8 %11 to i32
  %and51 = and i32 %conv50, 64
  %tobool = icmp ne i32 %and51, 0
  br i1 %tobool, label %if.end171, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.end
  %12 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type52 = getelementptr inbounds %struct.op, %struct.op* %12, i32 0, i32 4
  %bf.load53 = load i16, i16* %op_type52, align 8
  %bf.clear54 = and i16 %bf.load53, 511
  %bf.cast55 = zext i16 %bf.clear54 to i32
  %cmp56 = icmp sge i32 %bf.cast55, 92
  br i1 %cmp56, label %land.lhs.true58, label %if.end171

land.lhs.true58:                                  ; preds = %land.lhs.true
  %13 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type59 = getelementptr inbounds %struct.op, %struct.op* %13, i32 0, i32 4
  %bf.load60 = load i16, i16* %op_type59, align 8
  %bf.clear61 = and i16 %bf.load60, 511
  %bf.cast62 = zext i16 %bf.clear61 to i32
  %cmp63 = icmp sle i32 %bf.cast62, 100
  br i1 %cmp63, label %if.then65, label %if.end171

if.then65:                                        ; preds = %land.lhs.true58
  %14 = load %struct.op*, %struct.op** %o.addr, align 8
  %15 = bitcast %struct.op* %14 to %struct.binop*
  %op_first = getelementptr inbounds %struct.binop, %struct.binop* %15, i32 0, i32 7
  %16 = load %struct.op*, %struct.op** %op_first, align 8
  store %struct.op* %16, %struct.op** %left, align 8
  %17 = load %struct.op*, %struct.op** %left, align 8
  %op_sibling = getelementptr inbounds %struct.op, %struct.op* %17, i32 0, i32 1
  %18 = load %struct.op*, %struct.op** %op_sibling, align 8
  %add.ptr = getelementptr inbounds %struct.op, %struct.op* %18, i64 0
  store %struct.op* %add.ptr, %struct.op** %right, align 8
  %19 = load %struct.op*, %struct.op** %left, align 8
  %op_type66 = getelementptr inbounds %struct.op, %struct.op* %19, i32 0, i32 4
  %bf.load67 = load i16, i16* %op_type66, align 8
  %bf.clear68 = and i16 %bf.load67, 511
  %bf.cast69 = zext i16 %bf.clear68 to i32
  %cmp70 = icmp sge i32 %bf.cast69, 71
  br i1 %cmp70, label %land.lhs.true72, label %lor.lhs.false85

land.lhs.true72:                                  ; preds = %if.then65
  %20 = load %struct.op*, %struct.op** %left, align 8
  %op_type73 = getelementptr inbounds %struct.op, %struct.op* %20, i32 0, i32 4
  %bf.load74 = load i16, i16* %op_type73, align 8
  %bf.clear75 = and i16 %bf.load74, 511
  %bf.cast76 = zext i16 %bf.clear75 to i32
  %cmp77 = icmp sle i32 %bf.cast76, 84
  br i1 %cmp77, label %land.lhs.true79, label %lor.lhs.false85

land.lhs.true79:                                  ; preds = %land.lhs.true72
  %21 = load %struct.op*, %struct.op** %left, align 8
  %op_flags80 = getelementptr inbounds %struct.op, %struct.op* %21, i32 0, i32 5
  %22 = load i8, i8* %op_flags80, align 2
  %conv81 = zext i8 %22 to i32
  %and82 = and i32 %conv81, 8
  %cmp83 = icmp eq i32 %and82, 0
  br i1 %cmp83, label %if.then105, label %lor.lhs.false85

lor.lhs.false85:                                  ; preds = %land.lhs.true79, %land.lhs.true72, %if.then65
  %23 = load %struct.op*, %struct.op** %right, align 8
  %op_type86 = getelementptr inbounds %struct.op, %struct.op* %23, i32 0, i32 4
  %bf.load87 = load i16, i16* %op_type86, align 8
  %bf.clear88 = and i16 %bf.load87, 511
  %bf.cast89 = zext i16 %bf.clear88 to i32
  %cmp90 = icmp sge i32 %bf.cast89, 71
  br i1 %cmp90, label %land.lhs.true92, label %if.end170

land.lhs.true92:                                  ; preds = %lor.lhs.false85
  %24 = load %struct.op*, %struct.op** %right, align 8
  %op_type93 = getelementptr inbounds %struct.op, %struct.op* %24, i32 0, i32 4
  %bf.load94 = load i16, i16* %op_type93, align 8
  %bf.clear95 = and i16 %bf.load94, 511
  %bf.cast96 = zext i16 %bf.clear95 to i32
  %cmp97 = icmp sle i32 %bf.cast96, 84
  br i1 %cmp97, label %land.lhs.true99, label %if.end170

land.lhs.true99:                                  ; preds = %land.lhs.true92
  %25 = load %struct.op*, %struct.op** %right, align 8
  %op_flags100 = getelementptr inbounds %struct.op, %struct.op* %25, i32 0, i32 5
  %26 = load i8, i8* %op_flags100, align 2
  %conv101 = zext i8 %26 to i32
  %and102 = and i32 %conv101, 8
  %cmp103 = icmp eq i32 %and102, 0
  br i1 %cmp103, label %if.then105, label %if.end170

if.then105:                                       ; preds = %land.lhs.true99, %land.lhs.true79
  %27 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type106 = getelementptr inbounds %struct.op, %struct.op* %27, i32 0, i32 4
  %bf.load107 = load i16, i16* %op_type106, align 8
  %bf.clear108 = and i16 %bf.load107, 511
  %bf.cast109 = zext i16 %bf.clear108 to i32
  %cmp110 = icmp eq i32 %bf.cast109, 94
  br i1 %cmp110, label %cond.true, label %lor.lhs.false112

lor.lhs.false112:                                 ; preds = %if.then105
  %28 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type113 = getelementptr inbounds %struct.op, %struct.op* %28, i32 0, i32 4
  %bf.load114 = load i16, i16* %op_type113, align 8
  %bf.clear115 = and i16 %bf.load114, 511
  %bf.cast116 = zext i16 %bf.clear115 to i32
  %cmp117 = icmp eq i32 %bf.cast116, 97
  br i1 %cmp117, label %cond.true, label %cond.false

cond.true:                                        ; preds = %lor.lhs.false112, %if.then105
  br label %cond.end168

cond.false:                                       ; preds = %lor.lhs.false112
  %29 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type119 = getelementptr inbounds %struct.op, %struct.op* %29, i32 0, i32 4
  %bf.load120 = load i16, i16* %op_type119, align 8
  %bf.clear121 = and i16 %bf.load120, 511
  %bf.cast122 = zext i16 %bf.clear121 to i32
  %cmp123 = icmp eq i32 %bf.cast122, 92
  br i1 %cmp123, label %cond.true132, label %lor.lhs.false125

lor.lhs.false125:                                 ; preds = %cond.false
  %30 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type126 = getelementptr inbounds %struct.op, %struct.op* %30, i32 0, i32 4
  %bf.load127 = load i16, i16* %op_type126, align 8
  %bf.clear128 = and i16 %bf.load127, 511
  %bf.cast129 = zext i16 %bf.clear128 to i32
  %cmp130 = icmp eq i32 %bf.cast129, 95
  br i1 %cmp130, label %cond.true132, label %cond.false133

cond.true132:                                     ; preds = %lor.lhs.false125, %cond.false
  br label %cond.end166

cond.false133:                                    ; preds = %lor.lhs.false125
  %31 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type134 = getelementptr inbounds %struct.op, %struct.op* %31, i32 0, i32 4
  %bf.load135 = load i16, i16* %op_type134, align 8
  %bf.clear136 = and i16 %bf.load135, 511
  %bf.cast137 = zext i16 %bf.clear136 to i32
  %cmp138 = icmp eq i32 %bf.cast137, 93
  br i1 %cmp138, label %cond.true147, label %lor.lhs.false140

lor.lhs.false140:                                 ; preds = %cond.false133
  %32 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type141 = getelementptr inbounds %struct.op, %struct.op* %32, i32 0, i32 4
  %bf.load142 = load i16, i16* %op_type141, align 8
  %bf.clear143 = and i16 %bf.load142, 511
  %bf.cast144 = zext i16 %bf.clear143 to i32
  %cmp145 = icmp eq i32 %bf.cast144, 96
  br i1 %cmp145, label %cond.true147, label %cond.false148

cond.true147:                                     ; preds = %lor.lhs.false140, %cond.false133
  br label %cond.end164

cond.false148:                                    ; preds = %lor.lhs.false140
  %33 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type149 = getelementptr inbounds %struct.op, %struct.op* %33, i32 0, i32 4
  %bf.load150 = load i16, i16* %op_type149, align 8
  %bf.clear151 = and i16 %bf.load150, 511
  %bf.cast152 = zext i16 %bf.clear151 to i32
  %cmp153 = icmp eq i32 %bf.cast152, 100
  br i1 %cmp153, label %cond.true155, label %cond.false156

cond.true155:                                     ; preds = %cond.false148
  br label %cond.end

cond.false156:                                    ; preds = %cond.false148
  %34 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type157 = getelementptr inbounds %struct.op, %struct.op* %34, i32 0, i32 4
  %bf.load158 = load i16, i16* %op_type157, align 8
  %bf.clear159 = and i16 %bf.load158, 511
  %bf.cast160 = zext i16 %bf.clear159 to i32
  %cmp161 = icmp eq i32 %bf.cast160, 98
  %35 = zext i1 %cmp161 to i64
  %cond = select i1 %cmp161, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.92, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.93, i64 0, i64 0)
  br label %cond.end

cond.end:                                         ; preds = %cond.false156, %cond.true155
  %cond163 = phi i8* [ getelementptr inbounds ([3 x i8], [3 x i8]* @.str.91, i64 0, i64 0), %cond.true155 ], [ %cond, %cond.false156 ]
  br label %cond.end164

cond.end164:                                      ; preds = %cond.end, %cond.true147
  %cond165 = phi i8* [ getelementptr inbounds ([2 x i8], [2 x i8]* @.str.90, i64 0, i64 0), %cond.true147 ], [ %cond163, %cond.end ]
  br label %cond.end166

cond.end166:                                      ; preds = %cond.end164, %cond.true132
  %cond167 = phi i8* [ getelementptr inbounds ([2 x i8], [2 x i8]* @.str.89, i64 0, i64 0), %cond.true132 ], [ %cond165, %cond.end164 ]
  br label %cond.end168

cond.end168:                                      ; preds = %cond.end166, %cond.true
  %cond169 = phi i8* [ getelementptr inbounds ([2 x i8], [2 x i8]* @.str.88, i64 0, i64 0), %cond.true ], [ %cond167, %cond.end166 ]
  call void (i32, i8*, ...) @Perl_ck_warner(i32 33, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.87, i64 0, i64 0), i8* %cond169)
  br label %if.end170

if.end170:                                        ; preds = %cond.end168, %land.lhs.true99, %land.lhs.true92, %lor.lhs.false85
  br label %if.end171

if.end171:                                        ; preds = %if.end170, %land.lhs.true58, %land.lhs.true, %if.end
  %36 = load %struct.op*, %struct.op** %o.addr, align 8
  ret %struct.op* %36
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_ck_cmp(%struct.op* %o) #0 {
entry:
  %o.addr = alloca %struct.op*, align 8
  %kid = alloca %struct.op*, align 8
  %coerce = alloca %union.XOPRETANY, align 8
  store %struct.op* %o, %struct.op** %o.addr, align 8
  %call = call zeroext i1 @Perl_ckwarn(i32 28)
  br i1 %call, label %if.then, label %if.end29

if.then:                                          ; preds = %entry
  %0 = load %struct.op*, %struct.op** %o.addr, align 8
  %1 = bitcast %struct.op* %0 to %struct.unop*
  %op_first = getelementptr inbounds %struct.unop, %struct.unop* %1, i32 0, i32 7
  %2 = load %struct.op*, %struct.op** %op_first, align 8
  store %struct.op* %2, %struct.op** %kid, align 8
  %3 = load %struct.op*, %struct.op** %kid, align 8
  %tobool = icmp ne %struct.op* %3, null
  br i1 %tobool, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %if.then
  %4 = load %struct.op*, %struct.op** %kid, align 8
  %call1 = call zeroext i1 @is_dollar_bracket(%struct.op* %4)
  br i1 %call1, label %land.lhs.true2, label %lor.lhs.false

land.lhs.true2:                                   ; preds = %land.lhs.true
  %5 = load %struct.op*, %struct.op** %kid, align 8
  %op_sibling = getelementptr inbounds %struct.op, %struct.op* %5, i32 0, i32 1
  %6 = load %struct.op*, %struct.op** %op_sibling, align 8
  %add.ptr = getelementptr inbounds %struct.op, %struct.op* %6, i64 0
  %tobool3 = icmp ne %struct.op* %add.ptr, null
  br i1 %tobool3, label %land.lhs.true4, label %lor.lhs.false

land.lhs.true4:                                   ; preds = %land.lhs.true2
  %7 = load %struct.op*, %struct.op** %kid, align 8
  %op_sibling5 = getelementptr inbounds %struct.op, %struct.op* %7, i32 0, i32 1
  %8 = load %struct.op*, %struct.op** %op_sibling5, align 8
  %add.ptr6 = getelementptr inbounds %struct.op, %struct.op* %8, i64 0
  %op_type = getelementptr inbounds %struct.op, %struct.op* %add.ptr6, i32 0, i32 4
  %bf.load = load i16, i16* %op_type, align 8
  %bf.clear = and i16 %bf.load, 511
  %bf.cast = zext i16 %bf.clear to i32
  %cmp = icmp eq i32 %bf.cast, 5
  br i1 %cmp, label %if.then18, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true4, %land.lhs.true2, %land.lhs.true
  %9 = load %struct.op*, %struct.op** %kid, align 8
  %op_type7 = getelementptr inbounds %struct.op, %struct.op* %9, i32 0, i32 4
  %bf.load8 = load i16, i16* %op_type7, align 8
  %bf.clear9 = and i16 %bf.load8, 511
  %bf.cast10 = zext i16 %bf.clear9 to i32
  %cmp11 = icmp eq i32 %bf.cast10, 5
  br i1 %cmp11, label %land.lhs.true12, label %if.end

land.lhs.true12:                                  ; preds = %lor.lhs.false
  %10 = load %struct.op*, %struct.op** %kid, align 8
  %op_sibling13 = getelementptr inbounds %struct.op, %struct.op* %10, i32 0, i32 1
  %11 = load %struct.op*, %struct.op** %op_sibling13, align 8
  %add.ptr14 = getelementptr inbounds %struct.op, %struct.op* %11, i64 0
  store %struct.op* %add.ptr14, %struct.op** %kid, align 8
  %tobool15 = icmp ne %struct.op* %add.ptr14, null
  br i1 %tobool15, label %land.lhs.true16, label %if.end

land.lhs.true16:                                  ; preds = %land.lhs.true12
  %12 = load %struct.op*, %struct.op** %kid, align 8
  %call17 = call zeroext i1 @is_dollar_bracket(%struct.op* %12)
  br i1 %call17, label %if.then18, label %if.end

if.then18:                                        ; preds = %land.lhs.true16, %land.lhs.true4
  %13 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type19 = getelementptr inbounds %struct.op, %struct.op* %13, i32 0, i32 4
  %bf.load20 = load i16, i16* %op_type19, align 8
  %bf.clear21 = and i16 %bf.load20, 511
  %bf.cast22 = zext i16 %bf.clear21 to i32
  %cmp23 = icmp eq i32 %bf.cast22, 380
  br i1 %cmp23, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then18
  %14 = load %struct.op*, %struct.op** %o.addr, align 8
  %call24 = call i8* @Perl_custom_op_get_field(%struct.op* %14, i32 2)
  %coerce.dive = getelementptr inbounds %union.XOPRETANY, %union.XOPRETANY* %coerce, i32 0, i32 0
  store i8* %call24, i8** %coerce.dive, align 8
  %xop_desc = bitcast %union.XOPRETANY* %coerce to i8**
  %15 = load i8*, i8** %xop_desc, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.then18
  %16 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type25 = getelementptr inbounds %struct.op, %struct.op* %16, i32 0, i32 4
  %bf.load26 = load i16, i16* %op_type25, align 8
  %bf.clear27 = and i16 %bf.load26, 511
  %bf.cast28 = zext i16 %bf.clear27 to i32
  %idxprom = zext i32 %bf.cast28 to i64
  %arrayidx = getelementptr inbounds [0 x i8*], [0 x i8*]* @PL_op_desc, i64 0, i64 %idxprom
  %17 = load i8*, i8** %arrayidx, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %15, %cond.true ], [ %17, %cond.false ]
  call void (i32, i8*, ...) @Perl_warner(i32 28, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.94, i64 0, i64 0), i8* %cond)
  br label %if.end

if.end:                                           ; preds = %cond.end, %land.lhs.true16, %land.lhs.true12, %lor.lhs.false, %if.then
  br label %if.end29

if.end29:                                         ; preds = %if.end, %entry
  %18 = load %struct.op*, %struct.op** %o.addr, align 8
  ret %struct.op* %18
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i1 @is_dollar_bracket(%struct.op* %o) #0 {
entry:
  %o.addr = alloca %struct.op*, align 8
  %kid = alloca %struct.op*, align 8
  store %struct.op* %o, %struct.op** %o.addr, align 8
  %0 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type = getelementptr inbounds %struct.op, %struct.op* %0, i32 0, i32 4
  %bf.load = load i16, i16* %op_type, align 8
  %bf.clear = and i16 %bf.load, 511
  %bf.cast = zext i16 %bf.clear to i32
  %cmp = icmp eq i32 %bf.cast, 15
  br i1 %cmp, label %land.lhs.true, label %land.end

land.lhs.true:                                    ; preds = %entry
  %1 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %1, i32 0, i32 5
  %2 = load i8, i8* %op_flags, align 2
  %conv = zext i8 %2 to i32
  %and = and i32 %conv, 4
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %land.lhs.true1, label %land.end

land.lhs.true1:                                   ; preds = %land.lhs.true
  %3 = load %struct.op*, %struct.op** %o.addr, align 8
  %4 = bitcast %struct.op* %3 to %struct.unop*
  %op_first = getelementptr inbounds %struct.unop, %struct.unop* %4, i32 0, i32 7
  %5 = load %struct.op*, %struct.op** %op_first, align 8
  store %struct.op* %5, %struct.op** %kid, align 8
  %tobool2 = icmp ne %struct.op* %5, null
  br i1 %tobool2, label %land.lhs.true3, label %land.end

land.lhs.true3:                                   ; preds = %land.lhs.true1
  %6 = load %struct.op*, %struct.op** %kid, align 8
  %op_type4 = getelementptr inbounds %struct.op, %struct.op* %6, i32 0, i32 4
  %bf.load5 = load i16, i16* %op_type4, align 8
  %bf.clear6 = and i16 %bf.load5, 511
  %bf.cast7 = zext i16 %bf.clear6 to i32
  %cmp8 = icmp eq i32 %bf.cast7, 7
  br i1 %cmp8, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %land.lhs.true3
  %7 = load %struct.op*, %struct.op** %kid, align 8
  %8 = bitcast %struct.op* %7 to %struct.svop*
  %op_sv = getelementptr inbounds %struct.svop, %struct.svop* %8, i32 0, i32 7
  %9 = load %struct.sv*, %struct.sv** %op_sv, align 8
  %10 = bitcast %struct.sv* %9 to %struct.gv*
  %sv_any = getelementptr inbounds %struct.gv, %struct.gv* %10, i32 0, i32 0
  %11 = load %struct.xpvgv*, %struct.xpvgv** %sv_any, align 8
  %xiv_u = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %11, i32 0, i32 4
  %xivu_namehek = bitcast %union._xivu* %xiv_u to %struct.hek**
  %12 = load %struct.hek*, %struct.hek** %xivu_namehek, align 8
  %hek_key = getelementptr inbounds %struct.hek, %struct.hek* %12, i32 0, i32 2
  %arraydecay = getelementptr inbounds [1 x i8], [1 x i8]* %hek_key, i64 0, i64 0
  %call = call i32 @strcmp(i8* %arraydecay, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.204, i64 0, i64 0)) #7
  %tobool10 = icmp ne i32 %call, 0
  %lnot = xor i1 %tobool10, true
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true3, %land.lhs.true1, %land.lhs.true, %entry
  %13 = phi i1 [ false, %land.lhs.true3 ], [ false, %land.lhs.true1 ], [ false, %land.lhs.true ], [ false, %entry ], [ %lnot, %land.rhs ]
  ret i1 %13
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_ck_concat(%struct.op* %o) #0 {
entry:
  %o.addr = alloca %struct.op*, align 8
  %kid = alloca %struct.op*, align 8
  store %struct.op* %o, %struct.op** %o.addr, align 8
  %0 = load %struct.op*, %struct.op** %o.addr, align 8
  %1 = bitcast %struct.op* %0 to %struct.unop*
  %op_first = getelementptr inbounds %struct.unop, %struct.unop* %1, i32 0, i32 7
  %2 = load %struct.op*, %struct.op** %op_first, align 8
  store %struct.op* %2, %struct.op** %kid, align 8
  %3 = load %struct.op*, %struct.op** %kid, align 8
  %op_type = getelementptr inbounds %struct.op, %struct.op* %3, i32 0, i32 4
  %bf.load = load i16, i16* %op_type, align 8
  %bf.clear = and i16 %bf.load, 511
  %bf.cast = zext i16 %bf.clear to i32
  %cmp = icmp eq i32 %bf.cast, 67
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %4 = load %struct.op*, %struct.op** %kid, align 8
  %op_private = getelementptr inbounds %struct.op, %struct.op* %4, i32 0, i32 6
  %5 = load i8, i8* %op_private, align 1
  %conv = zext i8 %5 to i32
  %and = and i32 %conv, 16
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.end, label %land.lhs.true1

land.lhs.true1:                                   ; preds = %land.lhs.true
  %6 = load %struct.op*, %struct.op** %kid, align 8
  %7 = bitcast %struct.op* %6 to %struct.unop*
  %op_first2 = getelementptr inbounds %struct.unop, %struct.unop* %7, i32 0, i32 7
  %8 = load %struct.op*, %struct.op** %op_first2, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %8, i32 0, i32 5
  %9 = load i8, i8* %op_flags, align 2
  %conv3 = zext i8 %9 to i32
  %and4 = and i32 %conv3, 32
  %tobool5 = icmp ne i32 %and4, 0
  br i1 %tobool5, label %if.end, label %if.then

if.then:                                          ; preds = %land.lhs.true1
  %10 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_flags6 = getelementptr inbounds %struct.op, %struct.op* %10, i32 0, i32 5
  %11 = load i8, i8* %op_flags6, align 2
  %conv7 = zext i8 %11 to i32
  %or = or i32 %conv7, 64
  %conv8 = trunc i32 %or to i8
  store i8 %conv8, i8* %op_flags6, align 2
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true1, %land.lhs.true, %entry
  %12 = load %struct.op*, %struct.op** %o.addr, align 8
  ret %struct.op* %12
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_ck_spair(%struct.op* %o) #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %o.addr = alloca %struct.op*, align 8
  %newop = alloca %struct.op*, align 8
  %kid = alloca %struct.op*, align 8
  %kidkid = alloca %struct.op*, align 8
  %type = alloca i16, align 2
  %type7 = alloca i16, align 2
  store %struct.op* %o, %struct.op** %o.addr, align 8
  %0 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %0, i32 0, i32 5
  %1 = load i8, i8* %op_flags, align 2
  %conv = zext i8 %1 to i32
  %and = and i32 %conv, 4
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.end61

if.then:                                          ; preds = %entry
  %2 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type = getelementptr inbounds %struct.op, %struct.op* %2, i32 0, i32 4
  %bf.load = load i16, i16* %op_type, align 8
  %bf.clear = and i16 %bf.load, 511
  %bf.cast = zext i16 %bf.clear to i32
  %conv1 = trunc i32 %bf.cast to i16
  store i16 %conv1, i16* %type, align 2
  %3 = load %struct.op*, %struct.op** %o.addr, align 8
  %call = call %struct.op* @Perl_ck_fun(%struct.op* %3)
  %4 = load i16, i16* %type, align 2
  %conv2 = zext i16 %4 to i32
  %call3 = call %struct.op* @S_modkids(%struct.op* %call, i32 %conv2)
  store %struct.op* %call3, %struct.op** %o.addr, align 8
  %5 = load %struct.op*, %struct.op** %o.addr, align 8
  %6 = bitcast %struct.op* %5 to %struct.unop*
  %op_first = getelementptr inbounds %struct.unop, %struct.unop* %6, i32 0, i32 7
  %7 = load %struct.op*, %struct.op** %op_first, align 8
  store %struct.op* %7, %struct.op** %kid, align 8
  %8 = load %struct.op*, %struct.op** %kid, align 8
  %9 = bitcast %struct.op* %8 to %struct.unop*
  %op_first4 = getelementptr inbounds %struct.unop, %struct.unop* %9, i32 0, i32 7
  %10 = load %struct.op*, %struct.op** %op_first4, align 8
  store %struct.op* %10, %struct.op** %kidkid, align 8
  %11 = load %struct.op*, %struct.op** %kidkid, align 8
  %op_sibling = getelementptr inbounds %struct.op, %struct.op* %11, i32 0, i32 1
  %12 = load %struct.op*, %struct.op** %op_sibling, align 8
  %add.ptr = getelementptr inbounds %struct.op, %struct.op* %12, i64 0
  store %struct.op* %add.ptr, %struct.op** %newop, align 8
  %13 = load %struct.op*, %struct.op** %newop, align 8
  %tobool5 = icmp ne %struct.op* %13, null
  br i1 %tobool5, label %if.then6, label %if.end59

if.then6:                                         ; preds = %if.then
  %14 = load %struct.op*, %struct.op** %newop, align 8
  %op_type8 = getelementptr inbounds %struct.op, %struct.op* %14, i32 0, i32 4
  %bf.load9 = load i16, i16* %op_type8, align 8
  %bf.clear10 = and i16 %bf.load9, 511
  %bf.cast11 = zext i16 %bf.clear10 to i32
  %conv12 = trunc i32 %bf.cast11 to i16
  store i16 %conv12, i16* %type7, align 2
  %15 = load %struct.op*, %struct.op** %newop, align 8
  %op_sibling13 = getelementptr inbounds %struct.op, %struct.op* %15, i32 0, i32 1
  %16 = load %struct.op*, %struct.op** %op_sibling13, align 8
  %tobool14 = icmp ne %struct.op* %16, null
  br i1 %tobool14, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then6
  br i1 true, label %if.then15, label %if.end

cond.false:                                       ; preds = %if.then6
  br i1 false, label %if.then15, label %if.end

if.then15:                                        ; preds = %cond.false, %cond.true
  %17 = load %struct.op*, %struct.op** %o.addr, align 8
  store %struct.op* %17, %struct.op** %retval, align 8
  br label %return

if.end:                                           ; preds = %cond.false, %cond.true
  %18 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type16 = getelementptr inbounds %struct.op, %struct.op* %18, i32 0, i32 4
  %bf.load17 = load i16, i16* %op_type16, align 8
  %bf.clear18 = and i16 %bf.load17, 511
  %bf.cast19 = zext i16 %bf.clear18 to i32
  %cmp = icmp eq i32 %bf.cast19, 20
  br i1 %cmp, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %if.end
  %19 = load i16, i16* %type7, align 2
  %conv21 = zext i16 %19 to i32
  %cmp22 = icmp eq i32 %conv21, 17
  br i1 %cmp22, label %if.then44, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true
  %20 = load %struct.op*, %struct.op** %newop, align 8
  %op_flags24 = getelementptr inbounds %struct.op, %struct.op* %20, i32 0, i32 5
  %21 = load i8, i8* %op_flags24, align 2
  %conv25 = zext i8 %21 to i32
  %and26 = and i32 %conv25, 8
  %tobool27 = icmp ne i32 %and26, 0
  br i1 %tobool27, label %if.else, label %land.lhs.true28

land.lhs.true28:                                  ; preds = %lor.lhs.false
  %22 = load i16, i16* %type7, align 2
  %conv29 = zext i16 %22 to i32
  %cmp30 = icmp eq i32 %conv29, 135
  br i1 %cmp30, label %if.then44, label %lor.lhs.false32

lor.lhs.false32:                                  ; preds = %land.lhs.true28
  %23 = load i16, i16* %type7, align 2
  %conv33 = zext i16 %23 to i32
  %cmp34 = icmp eq i32 %conv33, 10
  br i1 %cmp34, label %if.then44, label %lor.lhs.false36

lor.lhs.false36:                                  ; preds = %lor.lhs.false32
  %24 = load i16, i16* %type7, align 2
  %conv37 = zext i16 %24 to i32
  %cmp38 = icmp eq i32 %conv37, 149
  br i1 %cmp38, label %if.then44, label %lor.lhs.false40

lor.lhs.false40:                                  ; preds = %lor.lhs.false36
  %25 = load i16, i16* %type7, align 2
  %conv41 = zext i16 %25 to i32
  %cmp42 = icmp eq i32 %conv41, 11
  br i1 %cmp42, label %if.then44, label %if.else

if.then44:                                        ; preds = %lor.lhs.false40, %lor.lhs.false36, %lor.lhs.false32, %land.lhs.true28, %land.lhs.true
  br label %if.end58

if.else:                                          ; preds = %lor.lhs.false40, %lor.lhs.false, %if.end
  %26 = load %struct.op*, %struct.op** %newop, align 8
  %op_flags45 = getelementptr inbounds %struct.op, %struct.op* %26, i32 0, i32 5
  %27 = load i8, i8* %op_flags45, align 2
  %conv46 = zext i8 %27 to i32
  %and47 = and i32 %conv46, 3
  %tobool48 = icmp ne i32 %and47, 0
  br i1 %tobool48, label %cond.true49, label %cond.false53

cond.true49:                                      ; preds = %if.else
  %28 = load %struct.op*, %struct.op** %newop, align 8
  %op_flags50 = getelementptr inbounds %struct.op, %struct.op* %28, i32 0, i32 5
  %29 = load i8, i8* %op_flags50, align 2
  %conv51 = zext i8 %29 to i32
  %and52 = and i32 %conv51, 3
  br label %cond.end

cond.false53:                                     ; preds = %if.else
  br label %cond.end

cond.end:                                         ; preds = %cond.false53, %cond.true49
  %cond = phi i32 [ %and52, %cond.true49 ], [ 0, %cond.false53 ]
  %cmp54 = icmp ne i32 %cond, 2
  br i1 %cmp54, label %if.then56, label %if.end57

if.then56:                                        ; preds = %cond.end
  %30 = load %struct.op*, %struct.op** %o.addr, align 8
  store %struct.op* %30, %struct.op** %retval, align 8
  br label %return

if.end57:                                         ; preds = %cond.end
  br label %if.end58

if.end58:                                         ; preds = %if.end57, %if.then44
  br label %if.end59

if.end59:                                         ; preds = %if.end58, %if.then
  %31 = load %struct.op*, %struct.op** %kid, align 8
  %call60 = call %struct.op* @Perl_op_sibling_splice(%struct.op* %31, %struct.op* null, i32 1, %struct.op* null)
  %32 = load %struct.op*, %struct.op** %kidkid, align 8
  call void @Perl_op_free(%struct.op* %32)
  br label %if.end61

if.end61:                                         ; preds = %if.end59, %entry
  %33 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type62 = getelementptr inbounds %struct.op, %struct.op* %33, i32 0, i32 4
  %bf.load63 = load i16, i16* %op_type62, align 8
  %bf.clear64 = and i16 %bf.load63, 511
  %bf.cast65 = zext i16 %bf.clear64 to i32
  %inc = add i32 %bf.cast65, 1
  %34 = trunc i32 %inc to i16
  %bf.load66 = load i16, i16* %op_type62, align 8
  %bf.value = and i16 %34, 511
  %bf.clear67 = and i16 %bf.load66, -512
  %bf.set = or i16 %bf.clear67, %bf.value
  store i16 %bf.set, i16* %op_type62, align 8
  %bf.result.cast = zext i16 %bf.value to i32
  %idxprom = zext i32 %bf.result.cast to i64
  %arrayidx = getelementptr inbounds [0 x %struct.op* ()*], [0 x %struct.op* ()*]* @PL_ppaddr, i64 0, i64 %idxprom
  %35 = load %struct.op* ()*, %struct.op* ()** %arrayidx, align 8
  %36 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_ppaddr = getelementptr inbounds %struct.op, %struct.op* %36, i32 0, i32 2
  store %struct.op* ()* %35, %struct.op* ()** %op_ppaddr, align 8
  %37 = load %struct.op*, %struct.op** %o.addr, align 8
  %call68 = call %struct.op* @Perl_ck_fun(%struct.op* %37)
  store %struct.op* %call68, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %if.end61, %if.then56, %if.then15
  %38 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %38
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_ck_fun(%struct.op* %o) #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %o.addr = alloca %struct.op*, align 8
  %type = alloca i32, align 4
  %oa = alloca i32, align 4
  %prev_kid = alloca %struct.op*, align 8
  %kid = alloca %struct.op*, align 8
  %numargs = alloca i32, align 4
  %seen_optional = alloca i8, align 1
  %optional = alloca i8, align 1
  %newop = alloca %struct.op*, align 8
  %newop210 = alloca %struct.op*, align 8
  %flags = alloca i32, align 4
  %priv = alloca i32, align 4
  %targ = alloca i64, align 8
  %name = alloca i8*, align 8
  %len = alloca i64, align 8
  %name_utf8 = alloca i32, align 4
  %want_dollar = alloca i8, align 1
  %pn = alloca %struct.padname*, align 8
  %gv = alloca %struct.gv*, align 8
  %firstop = alloca %struct.op*, align 8
  %op = alloca %struct.op*, align 8
  %tmpstr = alloca %struct.sv*, align 8
  %a = alloca i8*, align 8
  %gv321 = alloca %struct.gv*, align 8
  %padname = alloca i8*, align 8
  %namesv = alloca %struct.sv*, align 8
  %coerce = alloca %union.XOPRETANY, align 8
  %coerce509 = alloca %union.XOPRETANY, align 8
  store %struct.op* %o, %struct.op** %o.addr, align 8
  %0 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type = getelementptr inbounds %struct.op, %struct.op* %0, i32 0, i32 4
  %bf.load = load i16, i16* %op_type, align 8
  %bf.clear = and i16 %bf.load, 511
  %bf.cast = zext i16 %bf.clear to i32
  store i32 %bf.cast, i32* %type, align 4
  %1 = load i32, i32* %type, align 4
  %idxprom = sext i32 %1 to i64
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @PL_opargs, i64 0, i64 %idxprom
  %2 = load i32, i32* %arrayidx, align 4
  %shr = lshr i32 %2, 12
  store i32 %shr, i32* %oa, align 4
  %3 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %3, i32 0, i32 5
  %4 = load i8, i8* %op_flags, align 2
  %conv = zext i8 %4 to i32
  %and = and i32 %conv, 64
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.end11

if.then:                                          ; preds = %entry
  %5 = load i32, i32* %oa, align 4
  %and1 = and i32 %5, 8
  %tobool2 = icmp ne i32 %and1, 0
  br i1 %tobool2, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %if.then
  %6 = load i32, i32* %oa, align 4
  %shr3 = ashr i32 %6, 4
  %tobool4 = icmp ne i32 %shr3, 0
  br i1 %tobool4, label %land.lhs.true5, label %if.else

land.lhs.true5:                                   ; preds = %land.lhs.true
  %7 = load i32, i32* %oa, align 4
  %shr6 = ashr i32 %7, 4
  %and7 = and i32 %shr6, 8
  %tobool8 = icmp ne i32 %and7, 0
  br i1 %tobool8, label %if.else, label %if.then9

if.then9:                                         ; preds = %land.lhs.true5
  %8 = load i32, i32* %oa, align 4
  %and10 = and i32 %8, -9
  store i32 %and10, i32* %oa, align 4
  br label %if.end

if.else:                                          ; preds = %land.lhs.true5, %land.lhs.true, %if.then
  %9 = load %struct.op*, %struct.op** %o.addr, align 8
  %call = call %struct.op* @S_no_fh_allowed(%struct.op* %9)
  store %struct.op* %call, %struct.op** %retval, align 8
  br label %return

if.end:                                           ; preds = %if.then9
  br label %if.end11

if.end11:                                         ; preds = %if.end, %entry
  %10 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_flags12 = getelementptr inbounds %struct.op, %struct.op* %10, i32 0, i32 5
  %11 = load i8, i8* %op_flags12, align 2
  %conv13 = zext i8 %11 to i32
  %and14 = and i32 %conv13, 4
  %tobool15 = icmp ne i32 %and14, 0
  br i1 %tobool15, label %if.then16, label %if.else478

if.then16:                                        ; preds = %if.end11
  store %struct.op* null, %struct.op** %prev_kid, align 8
  %12 = load %struct.op*, %struct.op** %o.addr, align 8
  %13 = bitcast %struct.op* %12 to %struct.listop*
  %op_first = getelementptr inbounds %struct.listop, %struct.listop* %13, i32 0, i32 7
  %14 = load %struct.op*, %struct.op** %op_first, align 8
  store %struct.op* %14, %struct.op** %kid, align 8
  store i32 0, i32* %numargs, align 4
  store i8 0, i8* %seen_optional, align 1
  %15 = load %struct.op*, %struct.op** %kid, align 8
  %op_type17 = getelementptr inbounds %struct.op, %struct.op* %15, i32 0, i32 4
  %bf.load18 = load i16, i16* %op_type17, align 8
  %bf.clear19 = and i16 %bf.load18, 511
  %bf.cast20 = zext i16 %bf.clear19 to i32
  %cmp = icmp eq i32 %bf.cast20, 3
  br i1 %cmp, label %if.then31, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.then16
  %16 = load %struct.op*, %struct.op** %kid, align 8
  %op_type22 = getelementptr inbounds %struct.op, %struct.op* %16, i32 0, i32 4
  %bf.load23 = load i16, i16* %op_type22, align 8
  %bf.clear24 = and i16 %bf.load23, 511
  %bf.cast25 = zext i16 %bf.clear24 to i32
  %cmp26 = icmp eq i32 %bf.cast25, 0
  br i1 %cmp26, label %land.lhs.true28, label %if.end32

land.lhs.true28:                                  ; preds = %lor.lhs.false
  %17 = load %struct.op*, %struct.op** %kid, align 8
  %op_targ = getelementptr inbounds %struct.op, %struct.op* %17, i32 0, i32 3
  %18 = load i64, i64* %op_targ, align 8
  %cmp29 = icmp eq i64 %18, 3
  br i1 %cmp29, label %if.then31, label %if.end32

if.then31:                                        ; preds = %land.lhs.true28, %if.then16
  %19 = load %struct.op*, %struct.op** %kid, align 8
  store %struct.op* %19, %struct.op** %prev_kid, align 8
  %20 = load %struct.op*, %struct.op** %kid, align 8
  %op_sibling = getelementptr inbounds %struct.op, %struct.op* %20, i32 0, i32 1
  %21 = load %struct.op*, %struct.op** %op_sibling, align 8
  %add.ptr = getelementptr inbounds %struct.op, %struct.op* %21, i64 0
  store %struct.op* %add.ptr, %struct.op** %kid, align 8
  br label %if.end32

if.end32:                                         ; preds = %if.then31, %land.lhs.true28, %lor.lhs.false
  %22 = load %struct.op*, %struct.op** %kid, align 8
  %tobool33 = icmp ne %struct.op* %22, null
  br i1 %tobool33, label %land.lhs.true34, label %if.end53

land.lhs.true34:                                  ; preds = %if.end32
  %23 = load %struct.op*, %struct.op** %kid, align 8
  %op_type35 = getelementptr inbounds %struct.op, %struct.op* %23, i32 0, i32 4
  %bf.load36 = load i16, i16* %op_type35, align 8
  %bf.clear37 = and i16 %bf.load36, 511
  %bf.cast38 = zext i16 %bf.clear37 to i32
  %cmp39 = icmp eq i32 %bf.cast38, 384
  br i1 %cmp39, label %if.then41, label %if.end53

if.then41:                                        ; preds = %land.lhs.true34
  store i8 0, i8* %optional, align 1
  br label %while.cond

while.cond:                                       ; preds = %if.end46, %if.then41
  %24 = load i32, i32* %oa, align 4
  %tobool42 = icmp ne i32 %24, 0
  br i1 %tobool42, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %25 = load i32, i32* %numargs, align 4
  %inc = add nsw i32 %25, 1
  store i32 %inc, i32* %numargs, align 4
  %26 = load i32, i32* %oa, align 4
  %and43 = and i32 %26, 8
  %tobool44 = icmp ne i32 %and43, 0
  br i1 %tobool44, label %if.then45, label %if.end46

if.then45:                                        ; preds = %while.body
  store i8 1, i8* %optional, align 1
  br label %if.end46

if.end46:                                         ; preds = %if.then45, %while.body
  %27 = load i32, i32* %oa, align 4
  %shr47 = ashr i32 %27, 4
  store i32 %shr47, i32* %oa, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %28 = load i8, i8* %optional, align 1
  %tobool48 = trunc i8 %28 to i1
  br i1 %tobool48, label %if.then49, label %if.end52

if.then49:                                        ; preds = %while.end
  %29 = load i32, i32* %numargs, align 4
  %30 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_private = getelementptr inbounds %struct.op, %struct.op* %30, i32 0, i32 6
  %31 = load i8, i8* %op_private, align 1
  %conv50 = zext i8 %31 to i32
  %or = or i32 %conv50, %29
  %conv51 = trunc i32 %or to i8
  store i8 %conv51, i8* %op_private, align 1
  br label %if.end52

if.end52:                                         ; preds = %if.then49, %while.end
  %32 = load %struct.op*, %struct.op** %o.addr, align 8
  store %struct.op* %32, %struct.op** %retval, align 8
  br label %return

if.end53:                                         ; preds = %land.lhs.true34, %if.end32
  br label %while.cond54

while.cond54:                                     ; preds = %sw.epilog, %if.then110, %if.end53
  %33 = load i32, i32* %oa, align 4
  %tobool55 = icmp ne i32 %33, 0
  br i1 %tobool55, label %while.body56, label %while.end451

while.body56:                                     ; preds = %while.cond54
  %34 = load i32, i32* %oa, align 4
  %and57 = and i32 %34, 8
  %tobool58 = icmp ne i32 %and57, 0
  br i1 %tobool58, label %if.then63, label %lor.lhs.false59

lor.lhs.false59:                                  ; preds = %while.body56
  %35 = load i32, i32* %oa, align 4
  %and60 = and i32 %35, 7
  %cmp61 = icmp eq i32 %and60, 2
  br i1 %cmp61, label %if.then63, label %if.end76

if.then63:                                        ; preds = %lor.lhs.false59, %while.body56
  %36 = load %struct.op*, %struct.op** %kid, align 8
  %tobool64 = icmp ne %struct.op* %36, null
  br i1 %tobool64, label %if.end75, label %land.lhs.true65

land.lhs.true65:                                  ; preds = %if.then63
  %37 = load i8, i8* %seen_optional, align 1
  %tobool66 = trunc i8 %37 to i1
  br i1 %tobool66, label %if.end75, label %land.lhs.true67

land.lhs.true67:                                  ; preds = %land.lhs.true65
  %38 = load i32, i32* %type, align 4
  %idxprom68 = sext i32 %38 to i64
  %arrayidx69 = getelementptr inbounds [0 x i32], [0 x i32]* @PL_opargs, i64 0, i64 %idxprom68
  %39 = load i32, i32* %arrayidx69, align 4
  %and70 = and i32 %39, 128
  %tobool71 = icmp ne i32 %and70, 0
  br i1 %tobool71, label %if.then72, label %if.end75

if.then72:                                        ; preds = %land.lhs.true67
  %call73 = call %struct.op* @Perl_newDEFSVOP()
  store %struct.op* %call73, %struct.op** %kid, align 8
  %40 = load %struct.op*, %struct.op** %o.addr, align 8
  %41 = load %struct.op*, %struct.op** %prev_kid, align 8
  %42 = load %struct.op*, %struct.op** %kid, align 8
  %call74 = call %struct.op* @Perl_op_sibling_splice(%struct.op* %40, %struct.op* %41, i32 0, %struct.op* %42)
  br label %if.end75

if.end75:                                         ; preds = %if.then72, %land.lhs.true67, %land.lhs.true65, %if.then63
  store i8 1, i8* %seen_optional, align 1
  br label %if.end76

if.end76:                                         ; preds = %if.end75, %lor.lhs.false59
  %43 = load %struct.op*, %struct.op** %kid, align 8
  %tobool77 = icmp ne %struct.op* %43, null
  br i1 %tobool77, label %if.end79, label %if.then78

if.then78:                                        ; preds = %if.end76
  br label %while.end451

if.end79:                                         ; preds = %if.end76
  %44 = load i32, i32* %numargs, align 4
  %inc80 = add nsw i32 %44, 1
  store i32 %inc80, i32* %numargs, align 4
  %45 = load i32, i32* %oa, align 4
  %and81 = and i32 %45, 7
  switch i32 %and81, label %sw.epilog [
    i32 1, label %sw.bb
    i32 2, label %sw.bb107
    i32 3, label %sw.bb114
    i32 4, label %sw.bb164
    i32 5, label %sw.bb181
    i32 6, label %sw.bb183
    i32 7, label %sw.bb422
  ]

sw.bb:                                            ; preds = %if.end79
  %46 = load i32, i32* %numargs, align 4
  %cmp82 = icmp eq i32 %46, 1
  br i1 %cmp82, label %land.lhs.true84, label %if.end101

land.lhs.true84:                                  ; preds = %sw.bb
  %47 = load i32, i32* %oa, align 4
  %shr85 = ashr i32 %47, 4
  %tobool86 = icmp ne i32 %shr85, 0
  br i1 %tobool86, label %if.end101, label %land.lhs.true87

land.lhs.true87:                                  ; preds = %land.lhs.true84
  %48 = load %struct.op*, %struct.op** %kid, align 8
  %op_type88 = getelementptr inbounds %struct.op, %struct.op* %48, i32 0, i32 4
  %bf.load89 = load i16, i16* %op_type88, align 8
  %bf.clear90 = and i16 %bf.load89, 511
  %bf.cast91 = zext i16 %bf.clear90 to i32
  %cmp92 = icmp eq i32 %bf.cast91, 158
  br i1 %cmp92, label %land.lhs.true94, label %if.end101

land.lhs.true94:                                  ; preds = %land.lhs.true87
  %49 = load i32, i32* %type, align 4
  %cmp95 = icmp ne i32 %49, 2
  br i1 %cmp95, label %if.then97, label %if.end101

if.then97:                                        ; preds = %land.lhs.true94
  %50 = load %struct.op*, %struct.op** %o.addr, align 8
  %51 = load i32, i32* %type, align 4
  %idxprom98 = sext i32 %51 to i64
  %arrayidx99 = getelementptr inbounds [0 x i8*], [0 x i8*]* @PL_op_desc, i64 0, i64 %idxprom98
  %52 = load i8*, i8** %arrayidx99, align 8
  %call100 = call %struct.op* @S_too_many_arguments_pv(%struct.op* %50, i8* %52, i32 0)
  store %struct.op* %call100, %struct.op** %retval, align 8
  br label %return

if.end101:                                        ; preds = %land.lhs.true94, %land.lhs.true87, %land.lhs.true84, %sw.bb
  %53 = load i32, i32* %type, align 4
  %cmp102 = icmp ne i32 %53, 147
  br i1 %cmp102, label %if.then104, label %if.end106

if.then104:                                       ; preds = %if.end101
  %54 = load %struct.op*, %struct.op** %kid, align 8
  %call105 = call %struct.op* @Perl_scalar(%struct.op* %54)
  br label %if.end106

if.end106:                                        ; preds = %if.then104, %if.end101
  br label %sw.epilog

sw.bb107:                                         ; preds = %if.end79
  %55 = load i32, i32* %oa, align 4
  %cmp108 = icmp slt i32 %55, 16
  br i1 %cmp108, label %if.then110, label %if.else111

if.then110:                                       ; preds = %sw.bb107
  store %struct.op* null, %struct.op** %kid, align 8
  br label %while.cond54

if.else111:                                       ; preds = %sw.bb107
  %56 = load %struct.op*, %struct.op** %kid, align 8
  %call112 = call %struct.op* @Perl_list(%struct.op* %56)
  br label %if.end113

if.end113:                                        ; preds = %if.else111
  br label %sw.epilog

sw.bb114:                                         ; preds = %if.end79
  %57 = load i32, i32* %type, align 4
  %cmp115 = icmp eq i32 %57, 163
  br i1 %cmp115, label %land.lhs.true120, label %lor.lhs.false117

lor.lhs.false117:                                 ; preds = %sw.bb114
  %58 = load i32, i32* %type, align 4
  %cmp118 = icmp eq i32 %58, 166
  br i1 %cmp118, label %land.lhs.true120, label %if.end126

land.lhs.true120:                                 ; preds = %lor.lhs.false117, %sw.bb114
  %59 = load %struct.op*, %struct.op** %kid, align 8
  %op_sibling121 = getelementptr inbounds %struct.op, %struct.op* %59, i32 0, i32 1
  %60 = load %struct.op*, %struct.op** %op_sibling121, align 8
  %tobool122 = icmp ne %struct.op* %60, null
  br i1 %tobool122, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true120
  br i1 true, label %if.end126, label %if.then123

cond.false:                                       ; preds = %land.lhs.true120
  br i1 false, label %if.end126, label %if.then123

if.then123:                                       ; preds = %cond.false, %cond.true
  %61 = load i32, i32* %type, align 4
  %idxprom124 = sext i32 %61 to i64
  %arrayidx125 = getelementptr inbounds [0 x i8*], [0 x i8*]* @PL_op_desc, i64 0, i64 %idxprom124
  %62 = load i8*, i8** %arrayidx125, align 8
  call void (i32, i8*, ...) @Perl_ck_warner(i32 28, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.105, i64 0, i64 0), i8* %62)
  br label %if.end126

if.end126:                                        ; preds = %if.then123, %cond.false, %cond.true, %lor.lhs.false117
  %63 = load %struct.op*, %struct.op** %kid, align 8
  %op_type127 = getelementptr inbounds %struct.op, %struct.op* %63, i32 0, i32 4
  %bf.load128 = load i16, i16* %op_type127, align 8
  %bf.clear129 = and i16 %bf.load128, 511
  %bf.cast130 = zext i16 %bf.clear129 to i32
  %cmp131 = icmp eq i32 %bf.cast130, 5
  br i1 %cmp131, label %land.lhs.true133, label %if.end143

land.lhs.true133:                                 ; preds = %if.end126
  %64 = load %struct.op*, %struct.op** %kid, align 8
  %65 = bitcast %struct.op* %64 to %struct.svop*
  %op_sv = getelementptr inbounds %struct.svop, %struct.svop* %65, i32 0, i32 7
  %66 = load %struct.sv*, %struct.sv** %op_sv, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %66, i32 0, i32 2
  %67 = load i32, i32* %sv_flags, align 4
  %and134 = and i32 %67, 2048
  %tobool135 = icmp ne i32 %and134, 0
  br i1 %tobool135, label %lor.lhs.false136, label %if.then142

lor.lhs.false136:                                 ; preds = %land.lhs.true133
  %68 = load %struct.op*, %struct.op** %kid, align 8
  %69 = bitcast %struct.op* %68 to %struct.svop*
  %op_sv137 = getelementptr inbounds %struct.svop, %struct.svop* %69, i32 0, i32 7
  %70 = load %struct.sv*, %struct.sv** %op_sv137, align 8
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %70, i32 0, i32 3
  %svu_rv = bitcast %union.anon* %sv_u to %struct.sv**
  %71 = load %struct.sv*, %struct.sv** %svu_rv, align 8
  %sv_flags138 = getelementptr inbounds %struct.sv, %struct.sv* %71, i32 0, i32 2
  %72 = load i32, i32* %sv_flags138, align 4
  %and139 = and i32 %72, 255
  %cmp140 = icmp ne i32 %and139, 11
  br i1 %cmp140, label %if.then142, label %if.end143

if.then142:                                       ; preds = %lor.lhs.false136, %land.lhs.true133
  %73 = load i32, i32* %numargs, align 4
  %74 = load %struct.op*, %struct.op** %o.addr, align 8
  %75 = load %struct.op*, %struct.op** %kid, align 8
  call void @S_bad_type_pv(i32 %73, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.106, i64 0, i64 0), %struct.op* %74, %struct.op* %75)
  br label %if.end143

if.end143:                                        ; preds = %if.then142, %lor.lhs.false136, %if.end126
  %76 = load %struct.op*, %struct.op** %kid, align 8
  %op_type144 = getelementptr inbounds %struct.op, %struct.op* %76, i32 0, i32 4
  %bf.load145 = load i16, i16* %op_type144, align 8
  %bf.clear146 = and i16 %bf.load145, 511
  %bf.cast147 = zext i16 %bf.clear146 to i32
  %cmp148 = icmp eq i32 %bf.cast147, 135
  br i1 %cmp148, label %if.then157, label %lor.lhs.false150

lor.lhs.false150:                                 ; preds = %if.end143
  %77 = load %struct.op*, %struct.op** %kid, align 8
  %op_type151 = getelementptr inbounds %struct.op, %struct.op* %77, i32 0, i32 4
  %bf.load152 = load i16, i16* %op_type151, align 8
  %bf.clear153 = and i16 %bf.load152, 511
  %bf.cast154 = zext i16 %bf.clear153 to i32
  %cmp155 = icmp eq i32 %bf.cast154, 10
  br i1 %cmp155, label %if.then157, label %if.else159

if.then157:                                       ; preds = %lor.lhs.false150, %if.end143
  %78 = load %struct.op*, %struct.op** %kid, align 8
  %79 = load i32, i32* %type, align 4
  %call158 = call %struct.op* @Perl_op_lvalue_flags(%struct.op* %78, i32 %79, i32 0)
  br label %if.end163

if.else159:                                       ; preds = %lor.lhs.false150
  %80 = load %struct.op*, %struct.op** %kid, align 8
  %call160 = call %struct.op* @Perl_scalar(%struct.op* %80)
  %81 = load i32, i32* %type, align 4
  %idxprom161 = sext i32 %81 to i64
  %arrayidx162 = getelementptr inbounds [0 x i8*], [0 x i8*]* @PL_op_desc, i64 0, i64 %idxprom161
  %82 = load i8*, i8** %arrayidx162, align 8
  call void (i32, i8*, ...) @Perl_ck_warner_d(i32 56, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.107, i64 0, i64 0), i8* %82)
  br label %if.end163

if.end163:                                        ; preds = %if.else159, %if.then157
  br label %sw.epilog

sw.bb164:                                         ; preds = %if.end79
  %83 = load %struct.op*, %struct.op** %kid, align 8
  %op_type165 = getelementptr inbounds %struct.op, %struct.op* %83, i32 0, i32 4
  %bf.load166 = load i16, i16* %op_type165, align 8
  %bf.clear167 = and i16 %bf.load166, 511
  %bf.cast168 = zext i16 %bf.clear167 to i32
  %cmp169 = icmp ne i32 %bf.cast168, 149
  br i1 %cmp169, label %land.lhs.true171, label %if.end179

land.lhs.true171:                                 ; preds = %sw.bb164
  %84 = load %struct.op*, %struct.op** %kid, align 8
  %op_type172 = getelementptr inbounds %struct.op, %struct.op* %84, i32 0, i32 4
  %bf.load173 = load i16, i16* %op_type172, align 8
  %bf.clear174 = and i16 %bf.load173, 511
  %bf.cast175 = zext i16 %bf.clear174 to i32
  %cmp176 = icmp ne i32 %bf.cast175, 11
  br i1 %cmp176, label %if.then178, label %if.end179

if.then178:                                       ; preds = %land.lhs.true171
  %85 = load i32, i32* %numargs, align 4
  %86 = load %struct.op*, %struct.op** %o.addr, align 8
  %87 = load %struct.op*, %struct.op** %kid, align 8
  call void @S_bad_type_pv(i32 %85, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.108, i64 0, i64 0), %struct.op* %86, %struct.op* %87)
  br label %if.end179

if.end179:                                        ; preds = %if.then178, %land.lhs.true171, %sw.bb164
  %88 = load %struct.op*, %struct.op** %kid, align 8
  %89 = load i32, i32* %type, align 4
  %call180 = call %struct.op* @Perl_op_lvalue_flags(%struct.op* %88, i32 %89, i32 0)
  br label %sw.epilog

sw.bb181:                                         ; preds = %if.end79
  %90 = load %struct.op*, %struct.op** %o.addr, align 8
  %91 = load %struct.op*, %struct.op** %prev_kid, align 8
  %call182 = call %struct.op* @S_op_sibling_newUNOP(%struct.op* %90, %struct.op* %91, i32 0, i32 0)
  store %struct.op* %call182, %struct.op** %newop, align 8
  %92 = load %struct.op*, %struct.op** %newop, align 8
  %93 = load %struct.op*, %struct.op** %newop, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %93, i32 0, i32 0
  store %struct.op* %92, %struct.op** %op_next, align 8
  %94 = load %struct.op*, %struct.op** %newop, align 8
  store %struct.op* %94, %struct.op** %kid, align 8
  br label %sw.epilog

sw.bb183:                                         ; preds = %if.end79
  %95 = load %struct.op*, %struct.op** %kid, align 8
  %op_type184 = getelementptr inbounds %struct.op, %struct.op* %95, i32 0, i32 4
  %bf.load185 = load i16, i16* %op_type184, align 8
  %bf.clear186 = and i16 %bf.load185, 511
  %bf.cast187 = zext i16 %bf.clear186 to i32
  %cmp188 = icmp ne i32 %bf.cast187, 7
  br i1 %cmp188, label %land.lhs.true190, label %if.end420

land.lhs.true190:                                 ; preds = %sw.bb183
  %96 = load %struct.op*, %struct.op** %kid, align 8
  %op_type191 = getelementptr inbounds %struct.op, %struct.op* %96, i32 0, i32 4
  %bf.load192 = load i16, i16* %op_type191, align 8
  %bf.clear193 = and i16 %bf.load192, 511
  %bf.cast194 = zext i16 %bf.clear193 to i32
  %cmp195 = icmp ne i32 %bf.cast194, 14
  br i1 %cmp195, label %if.then197, label %if.end420

if.then197:                                       ; preds = %land.lhs.true190
  %97 = load %struct.op*, %struct.op** %kid, align 8
  %op_type198 = getelementptr inbounds %struct.op, %struct.op* %97, i32 0, i32 4
  %bf.load199 = load i16, i16* %op_type198, align 8
  %bf.clear200 = and i16 %bf.load199, 511
  %bf.cast201 = zext i16 %bf.clear200 to i32
  %cmp202 = icmp eq i32 %bf.cast201, 5
  br i1 %cmp202, label %land.lhs.true204, label %if.else215

land.lhs.true204:                                 ; preds = %if.then197
  %98 = load %struct.op*, %struct.op** %kid, align 8
  %op_private205 = getelementptr inbounds %struct.op, %struct.op* %98, i32 0, i32 6
  %99 = load i8, i8* %op_private205, align 1
  %conv206 = zext i8 %99 to i32
  %and207 = and i32 %conv206, 64
  %tobool208 = icmp ne i32 %and207, 0
  br i1 %tobool208, label %if.then209, label %if.else215

if.then209:                                       ; preds = %land.lhs.true204
  %100 = load %struct.op*, %struct.op** %kid, align 8
  %101 = bitcast %struct.op* %100 to %struct.svop*
  %op_sv211 = getelementptr inbounds %struct.svop, %struct.svop* %101, i32 0, i32 7
  %102 = load %struct.sv*, %struct.sv** %op_sv211, align 8
  %call212 = call %struct.gv* @Perl_gv_fetchsv(%struct.sv* %102, i32 1, i32 15)
  %call213 = call %struct.op* @Perl_newGVOP(i32 7, i32 0, %struct.gv* %call212)
  store %struct.op* %call213, %struct.op** %newop210, align 8
  %103 = load %struct.op*, %struct.op** %o.addr, align 8
  %104 = load %struct.op*, %struct.op** %prev_kid, align 8
  %105 = load %struct.op*, %struct.op** %newop210, align 8
  %call214 = call %struct.op* @Perl_op_sibling_splice(%struct.op* %103, %struct.op* %104, i32 1, %struct.op* %105)
  %106 = load %struct.op*, %struct.op** %kid, align 8
  call void @Perl_op_free(%struct.op* %106)
  %107 = load %struct.op*, %struct.op** %newop210, align 8
  store %struct.op* %107, %struct.op** %kid, align 8
  br label %if.end419

if.else215:                                       ; preds = %land.lhs.true204, %if.then197
  %108 = load %struct.op*, %struct.op** %kid, align 8
  %op_type216 = getelementptr inbounds %struct.op, %struct.op* %108, i32 0, i32 4
  %bf.load217 = load i16, i16* %op_type216, align 8
  %bf.clear218 = and i16 %bf.load217, 511
  %bf.cast219 = zext i16 %bf.clear218 to i32
  %cmp220 = icmp eq i32 %bf.cast219, 26
  br i1 %cmp220, label %if.then222, label %if.else223

if.then222:                                       ; preds = %if.else215
  %109 = load i32, i32* %numargs, align 4
  %110 = load %struct.op*, %struct.op** %o.addr, align 8
  %111 = load %struct.op*, %struct.op** %kid, align 8
  call void @S_bad_type_pv(i32 %109, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.109, i64 0, i64 0), %struct.op* %110, %struct.op* %111)
  br label %if.end418

if.else223:                                       ; preds = %if.else215
  store i32 128, i32* %flags, align 4
  store i32 0, i32* %priv, align 4
  store i64 0, i64* %targ, align 8
  %112 = load %struct.op*, %struct.op** %o.addr, align 8
  %113 = load i32, i32* %numargs, align 4
  %call224 = call zeroext i1 @S_is_handle_constructor(%struct.op* %112, i32 %113)
  br i1 %call224, label %if.then225, label %if.end410

if.then225:                                       ; preds = %if.else223
  store i8* null, i8** %name, align 8
  store i64 0, i64* %len, align 8
  store i32 0, i32* %name_utf8, align 4
  store i8 1, i8* %want_dollar, align 1
  store i32 0, i32* %flags, align 4
  store i32 48, i32* %priv, align 4
  %114 = load %struct.op*, %struct.op** %kid, align 8
  %op_type226 = getelementptr inbounds %struct.op, %struct.op* %114, i32 0, i32 4
  %bf.load227 = load i16, i16* %op_type226, align 8
  %bf.clear228 = and i16 %bf.load227, 511
  %bf.cast229 = zext i16 %bf.clear228 to i32
  %cmp230 = icmp eq i32 %bf.cast229, 9
  br i1 %cmp230, label %if.then232, label %if.else236

if.then232:                                       ; preds = %if.then225
  %115 = load %struct.padnamelist*, %struct.padnamelist** @PL_comppad_name, align 8
  %xpadnl_alloc = getelementptr inbounds %struct.padnamelist, %struct.padnamelist* %115, i32 0, i32 1
  %116 = load %struct.padname**, %struct.padname*** %xpadnl_alloc, align 8
  %117 = load %struct.op*, %struct.op** %kid, align 8
  %op_targ233 = getelementptr inbounds %struct.op, %struct.op* %117, i32 0, i32 3
  %118 = load i64, i64* %op_targ233, align 8
  %arrayidx234 = getelementptr inbounds %struct.padname*, %struct.padname** %116, i64 %118
  %119 = load %struct.padname*, %struct.padname** %arrayidx234, align 8
  store %struct.padname* %119, %struct.padname** %pn, align 8
  %120 = load %struct.padname*, %struct.padname** %pn, align 8
  %xpadn_pv = getelementptr inbounds %struct.padname, %struct.padname* %120, i32 0, i32 0
  %121 = load i8*, i8** %xpadn_pv, align 8
  store i8* %121, i8** %name, align 8
  %122 = load %struct.padname*, %struct.padname** %pn, align 8
  %xpadn_len = getelementptr inbounds %struct.padname, %struct.padname* %122, i32 0, i32 7
  %123 = load i8, i8* %xpadn_len, align 8
  %conv235 = zext i8 %123 to i64
  store i64 %conv235, i64* %len, align 8
  store i32 1, i32* %name_utf8, align 4
  br label %if.end390

if.else236:                                       ; preds = %if.then225
  %124 = load %struct.op*, %struct.op** %kid, align 8
  %op_type237 = getelementptr inbounds %struct.op, %struct.op* %124, i32 0, i32 4
  %bf.load238 = load i16, i16* %op_type237, align 8
  %bf.clear239 = and i16 %bf.load238, 511
  %bf.cast240 = zext i16 %bf.clear239 to i32
  %cmp241 = icmp eq i32 %bf.cast240, 15
  br i1 %cmp241, label %land.lhs.true243, label %if.else272

land.lhs.true243:                                 ; preds = %if.else236
  %125 = load %struct.op*, %struct.op** %kid, align 8
  %126 = bitcast %struct.op* %125 to %struct.unop*
  %op_first244 = getelementptr inbounds %struct.unop, %struct.unop* %126, i32 0, i32 7
  %127 = load %struct.op*, %struct.op** %op_first244, align 8
  %op_type245 = getelementptr inbounds %struct.op, %struct.op* %127, i32 0, i32 4
  %bf.load246 = load i16, i16* %op_type245, align 8
  %bf.clear247 = and i16 %bf.load246, 511
  %bf.cast248 = zext i16 %bf.clear247 to i32
  %cmp249 = icmp eq i32 %bf.cast248, 7
  br i1 %cmp249, label %if.then251, label %if.else272

if.then251:                                       ; preds = %land.lhs.true243
  %128 = load %struct.op*, %struct.op** %kid, align 8
  %129 = bitcast %struct.op* %128 to %struct.unop*
  %op_first252 = getelementptr inbounds %struct.unop, %struct.unop* %129, i32 0, i32 7
  %130 = load %struct.op*, %struct.op** %op_first252, align 8
  %131 = bitcast %struct.op* %130 to %struct.svop*
  %op_sv253 = getelementptr inbounds %struct.svop, %struct.svop* %131, i32 0, i32 7
  %132 = load %struct.sv*, %struct.sv** %op_sv253, align 8
  %133 = bitcast %struct.sv* %132 to %struct.gv*
  store %struct.gv* %133, %struct.gv** %gv, align 8
  %134 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_any = getelementptr inbounds %struct.gv, %struct.gv* %134, i32 0, i32 0
  %135 = load %struct.xpvgv*, %struct.xpvgv** %sv_any, align 8
  %xiv_u = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %135, i32 0, i32 4
  %xivu_namehek = bitcast %union._xivu* %xiv_u to %struct.hek**
  %136 = load %struct.hek*, %struct.hek** %xivu_namehek, align 8
  %hek_key = getelementptr inbounds %struct.hek, %struct.hek* %136, i32 0, i32 2
  %arraydecay = getelementptr inbounds [1 x i8], [1 x i8]* %hek_key, i64 0, i64 0
  store i8* %arraydecay, i8** %name, align 8
  %137 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_any254 = getelementptr inbounds %struct.gv, %struct.gv* %137, i32 0, i32 0
  %138 = load %struct.xpvgv*, %struct.xpvgv** %sv_any254, align 8
  %xiv_u255 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %138, i32 0, i32 4
  %xivu_namehek256 = bitcast %union._xivu* %xiv_u255 to %struct.hek**
  %139 = load %struct.hek*, %struct.hek** %xivu_namehek256, align 8
  %hek_len = getelementptr inbounds %struct.hek, %struct.hek* %139, i32 0, i32 1
  %140 = load i32, i32* %hek_len, align 4
  %conv257 = sext i32 %140 to i64
  store i64 %conv257, i64* %len, align 8
  %141 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_any258 = getelementptr inbounds %struct.gv, %struct.gv* %141, i32 0, i32 0
  %142 = load %struct.xpvgv*, %struct.xpvgv** %sv_any258, align 8
  %xiv_u259 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %142, i32 0, i32 4
  %xivu_namehek260 = bitcast %union._xivu* %xiv_u259 to %struct.hek**
  %143 = load %struct.hek*, %struct.hek** %xivu_namehek260, align 8
  %hek_key261 = getelementptr inbounds %struct.hek, %struct.hek* %143, i32 0, i32 2
  %arraydecay262 = getelementptr inbounds [1 x i8], [1 x i8]* %hek_key261, i64 0, i64 0
  %144 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_any263 = getelementptr inbounds %struct.gv, %struct.gv* %144, i32 0, i32 0
  %145 = load %struct.xpvgv*, %struct.xpvgv** %sv_any263, align 8
  %xiv_u264 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %145, i32 0, i32 4
  %xivu_namehek265 = bitcast %union._xivu* %xiv_u264 to %struct.hek**
  %146 = load %struct.hek*, %struct.hek** %xivu_namehek265, align 8
  %hek_len266 = getelementptr inbounds %struct.hek, %struct.hek* %146, i32 0, i32 1
  %147 = load i32, i32* %hek_len266, align 4
  %idx.ext = sext i32 %147 to i64
  %add.ptr267 = getelementptr inbounds i8, i8* %arraydecay262, i64 %idx.ext
  %add.ptr268 = getelementptr inbounds i8, i8* %add.ptr267, i64 1
  %148 = load i8, i8* %add.ptr268, align 1
  %conv269 = zext i8 %148 to i32
  %and270 = and i32 %conv269, 1
  %tobool271 = icmp ne i32 %and270, 0
  %149 = zext i1 %tobool271 to i64
  %cond = select i1 %tobool271, i32 536870912, i32 0
  store i32 %cond, i32* %name_utf8, align 4
  br label %if.end389

if.else272:                                       ; preds = %land.lhs.true243, %if.else236
  %150 = load %struct.op*, %struct.op** %kid, align 8
  %op_type273 = getelementptr inbounds %struct.op, %struct.op* %150, i32 0, i32 4
  %bf.load274 = load i16, i16* %op_type273, align 8
  %bf.clear275 = and i16 %bf.load274, 511
  %bf.cast276 = zext i16 %bf.clear275 to i32
  %cmp277 = icmp eq i32 %bf.cast276, 138
  br i1 %cmp277, label %if.then286, label %lor.lhs.false279

lor.lhs.false279:                                 ; preds = %if.else272
  %151 = load %struct.op*, %struct.op** %kid, align 8
  %op_type280 = getelementptr inbounds %struct.op, %struct.op* %151, i32 0, i32 4
  %bf.load281 = load i16, i16* %op_type280, align 8
  %bf.clear282 = and i16 %bf.load281, 511
  %bf.cast283 = zext i16 %bf.clear282 to i32
  %cmp284 = icmp eq i32 %bf.cast283, 150
  br i1 %cmp284, label %if.then286, label %if.end388

if.then286:                                       ; preds = %lor.lhs.false279, %if.else272
  %152 = load %struct.op*, %struct.op** %kid, align 8
  %153 = bitcast %struct.op* %152 to %struct.binop*
  %op_first287 = getelementptr inbounds %struct.binop, %struct.binop* %153, i32 0, i32 7
  %154 = load %struct.op*, %struct.op** %op_first287, align 8
  store %struct.op* %154, %struct.op** %op, align 8
  store i8* null, i8** %name, align 8
  %155 = load %struct.op*, %struct.op** %op, align 8
  %tobool288 = icmp ne %struct.op* %155, null
  br i1 %tobool288, label %if.then289, label %if.end383

if.then289:                                       ; preds = %if.then286
  store %struct.sv* null, %struct.sv** %tmpstr, align 8
  %156 = load %struct.op*, %struct.op** %kid, align 8
  %op_type290 = getelementptr inbounds %struct.op, %struct.op* %156, i32 0, i32 4
  %bf.load291 = load i16, i16* %op_type290, align 8
  %bf.clear292 = and i16 %bf.load291, 511
  %bf.cast293 = zext i16 %bf.clear292 to i32
  %cmp294 = icmp eq i32 %bf.cast293, 138
  %157 = zext i1 %cmp294 to i64
  %cond296 = select i1 %cmp294, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.110, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.111, i64 0, i64 0)
  store i8* %cond296, i8** %a, align 8
  %158 = load %struct.op*, %struct.op** %op, align 8
  %op_type297 = getelementptr inbounds %struct.op, %struct.op* %158, i32 0, i32 4
  %bf.load298 = load i16, i16* %op_type297, align 8
  %bf.clear299 = and i16 %bf.load298, 511
  %bf.cast300 = zext i16 %bf.clear299 to i32
  %cmp301 = icmp eq i32 %bf.cast300, 135
  br i1 %cmp301, label %land.lhs.true310, label %lor.lhs.false303

lor.lhs.false303:                                 ; preds = %if.then289
  %159 = load %struct.op*, %struct.op** %op, align 8
  %op_type304 = getelementptr inbounds %struct.op, %struct.op* %159, i32 0, i32 4
  %bf.load305 = load i16, i16* %op_type304, align 8
  %bf.clear306 = and i16 %bf.load305, 511
  %bf.cast307 = zext i16 %bf.clear306 to i32
  %cmp308 = icmp eq i32 %bf.cast307, 149
  br i1 %cmp308, label %land.lhs.true310, label %if.else336

land.lhs.true310:                                 ; preds = %lor.lhs.false303, %if.then289
  %160 = load %struct.op*, %struct.op** %op, align 8
  %161 = bitcast %struct.op* %160 to %struct.unop*
  %op_first311 = getelementptr inbounds %struct.unop, %struct.unop* %161, i32 0, i32 7
  %162 = load %struct.op*, %struct.op** %op_first311, align 8
  store %struct.op* %162, %struct.op** %firstop, align 8
  %tobool312 = icmp ne %struct.op* %162, null
  br i1 %tobool312, label %land.lhs.true313, label %if.else336

land.lhs.true313:                                 ; preds = %land.lhs.true310
  %163 = load %struct.op*, %struct.op** %firstop, align 8
  %op_type314 = getelementptr inbounds %struct.op, %struct.op* %163, i32 0, i32 4
  %bf.load315 = load i16, i16* %op_type314, align 8
  %bf.clear316 = and i16 %bf.load315, 511
  %bf.cast317 = zext i16 %bf.clear316 to i32
  %cmp318 = icmp eq i32 %bf.cast317, 7
  br i1 %cmp318, label %if.then320, label %if.else336

if.then320:                                       ; preds = %land.lhs.true313
  %164 = load %struct.op*, %struct.op** %firstop, align 8
  %165 = bitcast %struct.op* %164 to %struct.svop*
  %op_sv322 = getelementptr inbounds %struct.svop, %struct.svop* %165, i32 0, i32 7
  %166 = load %struct.sv*, %struct.sv** %op_sv322, align 8
  %167 = bitcast %struct.sv* %166 to %struct.gv*
  store %struct.gv* %167, %struct.gv** %gv321, align 8
  %168 = load %struct.gv*, %struct.gv** %gv321, align 8
  %tobool323 = icmp ne %struct.gv* %168, null
  br i1 %tobool323, label %if.then324, label %if.end335

if.then324:                                       ; preds = %if.then320
  %169 = load %struct.gv*, %struct.gv** %gv321, align 8
  %sv_any325 = getelementptr inbounds %struct.gv, %struct.gv* %169, i32 0, i32 0
  %170 = load %struct.xpvgv*, %struct.xpvgv** %sv_any325, align 8
  %xiv_u326 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %170, i32 0, i32 4
  %xivu_namehek327 = bitcast %union._xivu* %xiv_u326 to %struct.hek**
  %171 = load %struct.hek*, %struct.hek** %xivu_namehek327, align 8
  %hek_key328 = getelementptr inbounds %struct.hek, %struct.hek* %171, i32 0, i32 2
  %arraydecay329 = getelementptr inbounds [1 x i8], [1 x i8]* %hek_key328, i64 0, i64 0
  %172 = load i8*, i8** %a, align 8
  %arrayidx330 = getelementptr inbounds i8, i8* %172, i64 0
  %173 = load i8, i8* %arrayidx330, align 1
  %conv331 = sext i8 %173 to i32
  %174 = load i8*, i8** %a, align 8
  %arrayidx332 = getelementptr inbounds i8, i8* %174, i64 1
  %175 = load i8, i8* %arrayidx332, align 1
  %conv333 = sext i8 %175 to i32
  %call334 = call %struct.sv* (i8*, ...) @Perl_newSVpvf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.112, i64 0, i64 0), i8* %arraydecay329, i32 %conv331, i32 %conv333)
  store %struct.sv* %call334, %struct.sv** %tmpstr, align 8
  br label %if.end335

if.end335:                                        ; preds = %if.then324, %if.then320
  br label %if.end365

if.else336:                                       ; preds = %land.lhs.true313, %land.lhs.true310, %lor.lhs.false303
  %176 = load %struct.op*, %struct.op** %op, align 8
  %op_type337 = getelementptr inbounds %struct.op, %struct.op* %176, i32 0, i32 4
  %bf.load338 = load i16, i16* %op_type337, align 8
  %bf.clear339 = and i16 %bf.load338, 511
  %bf.cast340 = zext i16 %bf.clear339 to i32
  %cmp341 = icmp eq i32 %bf.cast340, 10
  br i1 %cmp341, label %if.then350, label %lor.lhs.false343

lor.lhs.false343:                                 ; preds = %if.else336
  %177 = load %struct.op*, %struct.op** %op, align 8
  %op_type344 = getelementptr inbounds %struct.op, %struct.op* %177, i32 0, i32 4
  %bf.load345 = load i16, i16* %op_type344, align 8
  %bf.clear346 = and i16 %bf.load345, 511
  %bf.cast347 = zext i16 %bf.clear346 to i32
  %cmp348 = icmp eq i32 %bf.cast347, 11
  br i1 %cmp348, label %if.then350, label %if.end364

if.then350:                                       ; preds = %lor.lhs.false343, %if.else336
  %178 = load %struct.padnamelist*, %struct.padnamelist** @PL_comppad_name, align 8
  %xpadnl_alloc351 = getelementptr inbounds %struct.padnamelist, %struct.padnamelist* %178, i32 0, i32 1
  %179 = load %struct.padname**, %struct.padname*** %xpadnl_alloc351, align 8
  %180 = load %struct.op*, %struct.op** %op, align 8
  %op_targ352 = getelementptr inbounds %struct.op, %struct.op* %180, i32 0, i32 3
  %181 = load i64, i64* %op_targ352, align 8
  %arrayidx353 = getelementptr inbounds %struct.padname*, %struct.padname** %179, i64 %181
  %182 = load %struct.padname*, %struct.padname** %arrayidx353, align 8
  %xpadn_pv354 = getelementptr inbounds %struct.padname, %struct.padname* %182, i32 0, i32 0
  %183 = load i8*, i8** %xpadn_pv354, align 8
  store i8* %183, i8** %padname, align 8
  %184 = load i8*, i8** %padname, align 8
  %tobool355 = icmp ne i8* %184, null
  br i1 %tobool355, label %if.then356, label %if.end363

if.then356:                                       ; preds = %if.then350
  %185 = load i8*, i8** %padname, align 8
  %add.ptr357 = getelementptr inbounds i8, i8* %185, i64 1
  %186 = load i8*, i8** %a, align 8
  %arrayidx358 = getelementptr inbounds i8, i8* %186, i64 0
  %187 = load i8, i8* %arrayidx358, align 1
  %conv359 = sext i8 %187 to i32
  %188 = load i8*, i8** %a, align 8
  %arrayidx360 = getelementptr inbounds i8, i8* %188, i64 1
  %189 = load i8, i8* %arrayidx360, align 1
  %conv361 = sext i8 %189 to i32
  %call362 = call %struct.sv* (i8*, ...) @Perl_newSVpvf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.112, i64 0, i64 0), i8* %add.ptr357, i32 %conv359, i32 %conv361)
  store %struct.sv* %call362, %struct.sv** %tmpstr, align 8
  br label %if.end363

if.end363:                                        ; preds = %if.then356, %if.then350
  br label %if.end364

if.end364:                                        ; preds = %if.end363, %lor.lhs.false343
  br label %if.end365

if.end365:                                        ; preds = %if.end364, %if.end335
  %190 = load %struct.sv*, %struct.sv** %tmpstr, align 8
  %tobool366 = icmp ne %struct.sv* %190, null
  br i1 %tobool366, label %if.then367, label %if.end382

if.then367:                                       ; preds = %if.end365
  %191 = load %struct.sv*, %struct.sv** %tmpstr, align 8
  %sv_flags368 = getelementptr inbounds %struct.sv, %struct.sv* %191, i32 0, i32 2
  %192 = load i32, i32* %sv_flags368, align 4
  %and369 = and i32 %192, 2098176
  %cmp370 = icmp eq i32 %and369, 1024
  br i1 %cmp370, label %cond.true372, label %cond.false376

cond.true372:                                     ; preds = %if.then367
  %193 = load %struct.sv*, %struct.sv** %tmpstr, align 8
  %sv_any373 = getelementptr inbounds %struct.sv, %struct.sv* %193, i32 0, i32 0
  %194 = load i8*, i8** %sv_any373, align 8
  %195 = bitcast i8* %194 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %195, i32 0, i32 2
  %196 = load i64, i64* %xpv_cur, align 8
  store i64 %196, i64* %len, align 8
  %197 = load %struct.sv*, %struct.sv** %tmpstr, align 8
  %sv_u374 = getelementptr inbounds %struct.sv, %struct.sv* %197, i32 0, i32 3
  %svu_pv = bitcast %union.anon* %sv_u374 to i8**
  %198 = load i8*, i8** %svu_pv, align 8
  %add.ptr375 = getelementptr inbounds i8, i8* %198, i64 0
  br label %cond.end

cond.false376:                                    ; preds = %if.then367
  %199 = load %struct.sv*, %struct.sv** %tmpstr, align 8
  %call377 = call i8* @Perl_sv_2pv_flags(%struct.sv* %199, i64* %len, i32 34)
  br label %cond.end

cond.end:                                         ; preds = %cond.false376, %cond.true372
  %cond378 = phi i8* [ %add.ptr375, %cond.true372 ], [ %call377, %cond.false376 ]
  store i8* %cond378, i8** %name, align 8
  %200 = load %struct.sv*, %struct.sv** %tmpstr, align 8
  %sv_flags379 = getelementptr inbounds %struct.sv, %struct.sv* %200, i32 0, i32 2
  %201 = load i32, i32* %sv_flags379, align 4
  %and380 = and i32 %201, 536870912
  store i32 %and380, i32* %name_utf8, align 4
  %202 = load %struct.sv*, %struct.sv** %tmpstr, align 8
  %call381 = call %struct.sv* @Perl_sv_2mortal(%struct.sv* %202)
  br label %if.end382

if.end382:                                        ; preds = %cond.end, %if.end365
  br label %if.end383

if.end383:                                        ; preds = %if.end382, %if.then286
  %203 = load i8*, i8** %name, align 8
  %tobool384 = icmp ne i8* %203, null
  br i1 %tobool384, label %if.end386, label %if.then385

if.then385:                                       ; preds = %if.end383
  store i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.113, i64 0, i64 0), i8** %name, align 8
  store i64 10, i64* %len, align 8
  store i8 0, i8* %want_dollar, align 1
  br label %if.end386

if.end386:                                        ; preds = %if.then385, %if.end383
  %204 = load %struct.op*, %struct.op** %kid, align 8
  %205 = load i32, i32* %type, align 4
  %call387 = call %struct.op* @Perl_op_lvalue_flags(%struct.op* %204, i32 %205, i32 0)
  br label %if.end388

if.end388:                                        ; preds = %if.end386, %lor.lhs.false279
  br label %if.end389

if.end389:                                        ; preds = %if.end388, %if.then251
  br label %if.end390

if.end390:                                        ; preds = %if.end389, %if.then232
  %206 = load i8*, i8** %name, align 8
  %tobool391 = icmp ne i8* %206, null
  br i1 %tobool391, label %if.then392, label %if.end409

if.then392:                                       ; preds = %if.end390
  %call393 = call i64 @Perl_pad_alloc(i32 14, i32 134217728)
  store i64 %call393, i64* %targ, align 8
  %207 = load %struct.sv**, %struct.sv*** @PL_curpad, align 8
  %208 = load i64, i64* %targ, align 8
  %arrayidx394 = getelementptr inbounds %struct.sv*, %struct.sv** %207, i64 %208
  %209 = load %struct.sv*, %struct.sv** %arrayidx394, align 8
  store %struct.sv* %209, %struct.sv** %namesv, align 8
  %210 = load i8, i8* %want_dollar, align 1
  %tobool395 = trunc i8 %210 to i1
  br i1 %tobool395, label %land.lhs.true397, label %if.else402

land.lhs.true397:                                 ; preds = %if.then392
  %211 = load i8*, i8** %name, align 8
  %212 = load i8, i8* %211, align 1
  %conv398 = sext i8 %212 to i32
  %cmp399 = icmp ne i32 %conv398, 36
  br i1 %cmp399, label %if.then401, label %if.else402

if.then401:                                       ; preds = %land.lhs.true397
  %213 = load %struct.sv*, %struct.sv** %namesv, align 8
  call void @Perl_sv_setpvn(%struct.sv* %213, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.59, i64 0, i64 0), i64 1)
  br label %if.end403

if.else402:                                       ; preds = %land.lhs.true397, %if.then392
  %214 = load %struct.sv*, %struct.sv** %namesv, align 8
  call void @Perl_sv_setpvn(%struct.sv* %214, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.17, i64 0, i64 0), i64 0)
  br label %if.end403

if.end403:                                        ; preds = %if.else402, %if.then401
  %215 = load %struct.sv*, %struct.sv** %namesv, align 8
  %216 = load i8*, i8** %name, align 8
  %217 = load i64, i64* %len, align 8
  call void @Perl_sv_catpvn_flags(%struct.sv* %215, i8* %216, i64 %217, i32 2)
  %218 = load i32, i32* %name_utf8, align 4
  %tobool404 = icmp ne i32 %218, 0
  br i1 %tobool404, label %if.then405, label %if.end408

if.then405:                                       ; preds = %if.end403
  %219 = load %struct.sv*, %struct.sv** %namesv, align 8
  %sv_flags406 = getelementptr inbounds %struct.sv, %struct.sv* %219, i32 0, i32 2
  %220 = load i32, i32* %sv_flags406, align 4
  %or407 = or i32 %220, 536870912
  store i32 %or407, i32* %sv_flags406, align 4
  br label %if.end408

if.end408:                                        ; preds = %if.then405, %if.end403
  br label %if.end409

if.end409:                                        ; preds = %if.end408, %if.end390
  br label %if.end410

if.end410:                                        ; preds = %if.end409, %if.else223
  %221 = load %struct.op*, %struct.op** %kid, align 8
  %call411 = call %struct.op* @Perl_scalar(%struct.op* %221)
  %222 = load %struct.op*, %struct.op** %o.addr, align 8
  %223 = load %struct.op*, %struct.op** %prev_kid, align 8
  %224 = load i32, i32* %flags, align 4
  %call412 = call %struct.op* @S_op_sibling_newUNOP(%struct.op* %222, %struct.op* %223, i32 14, i32 %224)
  store %struct.op* %call412, %struct.op** %kid, align 8
  %225 = load i64, i64* %targ, align 8
  %226 = load %struct.op*, %struct.op** %kid, align 8
  %op_targ413 = getelementptr inbounds %struct.op, %struct.op* %226, i32 0, i32 3
  store i64 %225, i64* %op_targ413, align 8
  %227 = load i32, i32* %priv, align 4
  %228 = load %struct.op*, %struct.op** %kid, align 8
  %op_private414 = getelementptr inbounds %struct.op, %struct.op* %228, i32 0, i32 6
  %229 = load i8, i8* %op_private414, align 1
  %conv415 = zext i8 %229 to i32
  %or416 = or i32 %conv415, %227
  %conv417 = trunc i32 %or416 to i8
  store i8 %conv417, i8* %op_private414, align 1
  br label %if.end418

if.end418:                                        ; preds = %if.end410, %if.then222
  br label %if.end419

if.end419:                                        ; preds = %if.end418, %if.then209
  br label %if.end420

if.end420:                                        ; preds = %if.end419, %land.lhs.true190, %sw.bb183
  %230 = load %struct.op*, %struct.op** %kid, align 8
  %call421 = call %struct.op* @Perl_scalar(%struct.op* %230)
  br label %sw.epilog

sw.bb422:                                         ; preds = %if.end79
  %231 = load i32, i32* %type, align 4
  %cmp423 = icmp eq i32 %231, 44
  br i1 %cmp423, label %land.lhs.true428, label %lor.lhs.false425

lor.lhs.false425:                                 ; preds = %sw.bb422
  %232 = load i32, i32* %type, align 4
  %cmp426 = icmp eq i32 %232, 46
  br i1 %cmp426, label %land.lhs.true428, label %if.end445

land.lhs.true428:                                 ; preds = %lor.lhs.false425, %sw.bb422
  %233 = load i32, i32* %numargs, align 4
  %cmp429 = icmp eq i32 %233, 1
  br i1 %cmp429, label %land.lhs.true431, label %if.end445

land.lhs.true431:                                 ; preds = %land.lhs.true428
  %234 = load i32, i32* %oa, align 4
  %shr432 = ashr i32 %234, 4
  %tobool433 = icmp ne i32 %shr432, 0
  br i1 %tobool433, label %if.end445, label %land.lhs.true434

land.lhs.true434:                                 ; preds = %land.lhs.true431
  %235 = load %struct.op*, %struct.op** %kid, align 8
  %op_type435 = getelementptr inbounds %struct.op, %struct.op* %235, i32 0, i32 4
  %bf.load436 = load i16, i16* %op_type435, align 8
  %bf.clear437 = and i16 %bf.load436, 511
  %bf.cast438 = zext i16 %bf.clear437 to i32
  %cmp439 = icmp eq i32 %bf.cast438, 158
  br i1 %cmp439, label %if.then441, label %if.end445

if.then441:                                       ; preds = %land.lhs.true434
  %236 = load %struct.op*, %struct.op** %o.addr, align 8
  %237 = load i32, i32* %type, align 4
  %idxprom442 = sext i32 %237 to i64
  %arrayidx443 = getelementptr inbounds [0 x i8*], [0 x i8*]* @PL_op_desc, i64 0, i64 %idxprom442
  %238 = load i8*, i8** %arrayidx443, align 8
  %call444 = call %struct.op* @S_too_many_arguments_pv(%struct.op* %236, i8* %238, i32 0)
  store %struct.op* %call444, %struct.op** %retval, align 8
  br label %return

if.end445:                                        ; preds = %land.lhs.true434, %land.lhs.true431, %land.lhs.true428, %lor.lhs.false425
  %239 = load %struct.op*, %struct.op** %kid, align 8
  %call446 = call %struct.op* @Perl_scalar(%struct.op* %239)
  %240 = load i32, i32* %type, align 4
  %call447 = call %struct.op* @Perl_op_lvalue_flags(%struct.op* %call446, i32 %240, i32 0)
  br label %sw.epilog

sw.epilog:                                        ; preds = %if.end79, %if.end445, %if.end420, %sw.bb181, %if.end179, %if.end163, %if.end113, %if.end106
  %241 = load i32, i32* %oa, align 4
  %shr448 = ashr i32 %241, 4
  store i32 %shr448, i32* %oa, align 4
  %242 = load %struct.op*, %struct.op** %kid, align 8
  store %struct.op* %242, %struct.op** %prev_kid, align 8
  %243 = load %struct.op*, %struct.op** %kid, align 8
  %op_sibling449 = getelementptr inbounds %struct.op, %struct.op* %243, i32 0, i32 1
  %244 = load %struct.op*, %struct.op** %op_sibling449, align 8
  %add.ptr450 = getelementptr inbounds %struct.op, %struct.op* %244, i64 0
  store %struct.op* %add.ptr450, %struct.op** %kid, align 8
  br label %while.cond54

while.end451:                                     ; preds = %if.then78, %while.cond54
  %245 = load i32, i32* %numargs, align 4
  %246 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_private452 = getelementptr inbounds %struct.op, %struct.op* %246, i32 0, i32 6
  %247 = load i8, i8* %op_private452, align 1
  %conv453 = zext i8 %247 to i32
  %or454 = or i32 %conv453, %245
  %conv455 = trunc i32 %or454 to i8
  store i8 %conv455, i8* %op_private452, align 1
  %248 = load %struct.op*, %struct.op** %kid, align 8
  %tobool456 = icmp ne %struct.op* %248, null
  br i1 %tobool456, label %if.then457, label %if.end476

if.then457:                                       ; preds = %while.end451
  %249 = load %struct.op*, %struct.op** %o.addr, align 8
  %250 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type458 = getelementptr inbounds %struct.op, %struct.op* %250, i32 0, i32 4
  %bf.load459 = load i16, i16* %op_type458, align 8
  %bf.clear460 = and i16 %bf.load459, 511
  %bf.cast461 = zext i16 %bf.clear460 to i32
  %cmp462 = icmp eq i32 %bf.cast461, 380
  br i1 %cmp462, label %cond.true464, label %cond.false466

cond.true464:                                     ; preds = %if.then457
  %251 = load %struct.op*, %struct.op** %o.addr, align 8
  %call465 = call i8* @Perl_custom_op_get_field(%struct.op* %251, i32 2)
  %coerce.dive = getelementptr inbounds %union.XOPRETANY, %union.XOPRETANY* %coerce, i32 0, i32 0
  store i8* %call465, i8** %coerce.dive, align 8
  %xop_desc = bitcast %union.XOPRETANY* %coerce to i8**
  %252 = load i8*, i8** %xop_desc, align 8
  br label %cond.end473

cond.false466:                                    ; preds = %if.then457
  %253 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type467 = getelementptr inbounds %struct.op, %struct.op* %253, i32 0, i32 4
  %bf.load468 = load i16, i16* %op_type467, align 8
  %bf.clear469 = and i16 %bf.load468, 511
  %bf.cast470 = zext i16 %bf.clear469 to i32
  %idxprom471 = zext i32 %bf.cast470 to i64
  %arrayidx472 = getelementptr inbounds [0 x i8*], [0 x i8*]* @PL_op_desc, i64 0, i64 %idxprom471
  %254 = load i8*, i8** %arrayidx472, align 8
  br label %cond.end473

cond.end473:                                      ; preds = %cond.false466, %cond.true464
  %cond474 = phi i8* [ %252, %cond.true464 ], [ %254, %cond.false466 ]
  %call475 = call %struct.op* @S_too_many_arguments_pv(%struct.op* %249, i8* %cond474, i32 0)
  store %struct.op* %call475, %struct.op** %retval, align 8
  br label %return

if.end476:                                        ; preds = %while.end451
  %255 = load %struct.op*, %struct.op** %o.addr, align 8
  %call477 = call %struct.op* @S_listkids(%struct.op* %255)
  br label %if.end487

if.else478:                                       ; preds = %if.end11
  %256 = load i32, i32* %type, align 4
  %idxprom479 = sext i32 %256 to i64
  %arrayidx480 = getelementptr inbounds [0 x i32], [0 x i32]* @PL_opargs, i64 0, i64 %idxprom479
  %257 = load i32, i32* %arrayidx480, align 4
  %and481 = and i32 %257, 128
  %tobool482 = icmp ne i32 %and481, 0
  br i1 %tobool482, label %if.then483, label %if.end486

if.then483:                                       ; preds = %if.else478
  %258 = load %struct.op*, %struct.op** %o.addr, align 8
  call void @Perl_op_free(%struct.op* %258)
  %259 = load i32, i32* %type, align 4
  %call484 = call %struct.op* @Perl_newDEFSVOP()
  %call485 = call %struct.op* @Perl_newUNOP(i32 %259, i32 0, %struct.op* %call484)
  store %struct.op* %call485, %struct.op** %retval, align 8
  br label %return

if.end486:                                        ; preds = %if.else478
  br label %if.end487

if.end487:                                        ; preds = %if.end486, %if.end476
  %260 = load i32, i32* %oa, align 4
  %tobool488 = icmp ne i32 %260, 0
  br i1 %tobool488, label %if.then489, label %if.end523

if.then489:                                       ; preds = %if.end487
  br label %while.cond490

while.cond490:                                    ; preds = %while.body493, %if.then489
  %261 = load i32, i32* %oa, align 4
  %and491 = and i32 %261, 8
  %tobool492 = icmp ne i32 %and491, 0
  br i1 %tobool492, label %while.body493, label %while.end495

while.body493:                                    ; preds = %while.cond490
  %262 = load i32, i32* %oa, align 4
  %shr494 = ashr i32 %262, 4
  store i32 %shr494, i32* %oa, align 4
  br label %while.cond490

while.end495:                                     ; preds = %while.cond490
  %263 = load i32, i32* %oa, align 4
  %tobool496 = icmp ne i32 %263, 0
  br i1 %tobool496, label %land.lhs.true497, label %if.end522

land.lhs.true497:                                 ; preds = %while.end495
  %264 = load i32, i32* %oa, align 4
  %cmp498 = icmp ne i32 %264, 2
  br i1 %cmp498, label %if.then500, label %if.end522

if.then500:                                       ; preds = %land.lhs.true497
  %265 = load %struct.op*, %struct.op** %o.addr, align 8
  %266 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type501 = getelementptr inbounds %struct.op, %struct.op* %266, i32 0, i32 4
  %bf.load502 = load i16, i16* %op_type501, align 8
  %bf.clear503 = and i16 %bf.load502, 511
  %bf.cast504 = zext i16 %bf.clear503 to i32
  %cmp505 = icmp eq i32 %bf.cast504, 380
  br i1 %cmp505, label %cond.true507, label %cond.false512

cond.true507:                                     ; preds = %if.then500
  %267 = load %struct.op*, %struct.op** %o.addr, align 8
  %call508 = call i8* @Perl_custom_op_get_field(%struct.op* %267, i32 2)
  %coerce.dive510 = getelementptr inbounds %union.XOPRETANY, %union.XOPRETANY* %coerce509, i32 0, i32 0
  store i8* %call508, i8** %coerce.dive510, align 8
  %xop_desc511 = bitcast %union.XOPRETANY* %coerce509 to i8**
  %268 = load i8*, i8** %xop_desc511, align 8
  br label %cond.end519

cond.false512:                                    ; preds = %if.then500
  %269 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type513 = getelementptr inbounds %struct.op, %struct.op* %269, i32 0, i32 4
  %bf.load514 = load i16, i16* %op_type513, align 8
  %bf.clear515 = and i16 %bf.load514, 511
  %bf.cast516 = zext i16 %bf.clear515 to i32
  %idxprom517 = zext i32 %bf.cast516 to i64
  %arrayidx518 = getelementptr inbounds [0 x i8*], [0 x i8*]* @PL_op_desc, i64 0, i64 %idxprom517
  %270 = load i8*, i8** %arrayidx518, align 8
  br label %cond.end519

cond.end519:                                      ; preds = %cond.false512, %cond.true507
  %cond520 = phi i8* [ %268, %cond.true507 ], [ %270, %cond.false512 ]
  %call521 = call %struct.op* @S_too_few_arguments_pv(%struct.op* %265, i8* %cond520, i32 0)
  store %struct.op* %call521, %struct.op** %retval, align 8
  br label %return

if.end522:                                        ; preds = %land.lhs.true497, %while.end495
  br label %if.end523

if.end523:                                        ; preds = %if.end522, %if.end487
  %271 = load %struct.op*, %struct.op** %o.addr, align 8
  store %struct.op* %271, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %if.end523, %cond.end519, %if.then483, %cond.end473, %if.then441, %if.then97, %if.end52, %if.else
  %272 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %272
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_ck_delete(%struct.op* %o) #0 {
entry:
  %o.addr = alloca %struct.op*, align 8
  %kid = alloca %struct.op*, align 8
  store %struct.op* %o, %struct.op** %o.addr, align 8
  %0 = load %struct.op*, %struct.op** %o.addr, align 8
  %call = call %struct.op* @Perl_ck_fun(%struct.op* %0)
  store %struct.op* %call, %struct.op** %o.addr, align 8
  %1 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_private = getelementptr inbounds %struct.op, %struct.op* %1, i32 0, i32 6
  store i8 0, i8* %op_private, align 1
  %2 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %2, i32 0, i32 5
  %3 = load i8, i8* %op_flags, align 2
  %conv = zext i8 %3 to i32
  %and = and i32 %conv, 4
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.end26

if.then:                                          ; preds = %entry
  %4 = load %struct.op*, %struct.op** %o.addr, align 8
  %5 = bitcast %struct.op* %4 to %struct.unop*
  %op_first = getelementptr inbounds %struct.unop, %struct.unop* %5, i32 0, i32 7
  %6 = load %struct.op*, %struct.op** %op_first, align 8
  store %struct.op* %6, %struct.op** %kid, align 8
  %7 = load %struct.op*, %struct.op** %kid, align 8
  %op_type = getelementptr inbounds %struct.op, %struct.op* %7, i32 0, i32 4
  %bf.load = load i16, i16* %op_type, align 8
  %bf.clear = and i16 %bf.load, 511
  %bf.cast = zext i16 %bf.clear to i32
  switch i32 %bf.cast, label %sw.default [
    i32 139, label %sw.bb
    i32 151, label %sw.bb4
    i32 138, label %sw.bb9
    i32 150, label %sw.bb14
    i32 140, label %sw.bb15
    i32 152, label %sw.bb16
  ]

sw.bb:                                            ; preds = %if.then
  %8 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_flags1 = getelementptr inbounds %struct.op, %struct.op* %8, i32 0, i32 5
  %9 = load i8, i8* %op_flags1, align 2
  %conv2 = zext i8 %9 to i32
  %or = or i32 %conv2, 128
  %conv3 = trunc i32 %or to i8
  store i8 %conv3, i8* %op_flags1, align 2
  br label %sw.bb4

sw.bb4:                                           ; preds = %if.then, %sw.bb
  %10 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_private5 = getelementptr inbounds %struct.op, %struct.op* %10, i32 0, i32 6
  %11 = load i8, i8* %op_private5, align 1
  %conv6 = zext i8 %11 to i32
  %or7 = or i32 %conv6, 64
  %conv8 = trunc i32 %or7 to i8
  store i8 %conv8, i8* %op_private5, align 1
  br label %sw.epilog

sw.bb9:                                           ; preds = %if.then
  %12 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_flags10 = getelementptr inbounds %struct.op, %struct.op* %12, i32 0, i32 5
  %13 = load i8, i8* %op_flags10, align 2
  %conv11 = zext i8 %13 to i32
  %or12 = or i32 %conv11, 128
  %conv13 = trunc i32 %or12 to i8
  store i8 %conv13, i8* %op_flags10, align 2
  br label %sw.bb14

sw.bb14:                                          ; preds = %if.then, %sw.bb9
  br label %sw.epilog

sw.bb15:                                          ; preds = %if.then
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.95, i64 0, i64 0))
  br label %sw.bb16

sw.bb16:                                          ; preds = %if.then, %sw.bb15
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.96, i64 0, i64 0))
  br label %sw.default

sw.default:                                       ; preds = %if.then, %sw.bb16
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.97, i64 0, i64 0))
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %sw.bb14, %sw.bb4
  %14 = load %struct.op*, %struct.op** %kid, align 8
  %op_private17 = getelementptr inbounds %struct.op, %struct.op* %14, i32 0, i32 6
  %15 = load i8, i8* %op_private17, align 1
  %conv18 = zext i8 %15 to i32
  %and19 = and i32 %conv18, 128
  %tobool20 = icmp ne i32 %and19, 0
  br i1 %tobool20, label %if.then21, label %if.end

if.then21:                                        ; preds = %sw.epilog
  %16 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_private22 = getelementptr inbounds %struct.op, %struct.op* %16, i32 0, i32 6
  %17 = load i8, i8* %op_private22, align 1
  %conv23 = zext i8 %17 to i32
  %or24 = or i32 %conv23, 128
  %conv25 = trunc i32 %or24 to i8
  store i8 %conv25, i8* %op_private22, align 1
  br label %if.end

if.end:                                           ; preds = %if.then21, %sw.epilog
  %18 = load %struct.op*, %struct.op** %kid, align 8
  call void @Perl_op_null(%struct.op* %18)
  br label %if.end26

if.end26:                                         ; preds = %if.end, %entry
  %19 = load %struct.op*, %struct.op** %o.addr, align 8
  ret %struct.op* %19
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_ck_eof(%struct.op* %o) #0 {
entry:
  %o.addr = alloca %struct.op*, align 8
  %kid = alloca %struct.op*, align 8
  %newop = alloca %struct.op*, align 8
  store %struct.op* %o, %struct.op** %o.addr, align 8
  %0 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %0, i32 0, i32 5
  %1 = load i8, i8* %op_flags, align 2
  %conv = zext i8 %1 to i32
  %and = and i32 %conv, 4
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.end20

if.then:                                          ; preds = %entry
  %2 = load %struct.op*, %struct.op** %o.addr, align 8
  %3 = bitcast %struct.op* %2 to %struct.listop*
  %op_first = getelementptr inbounds %struct.listop, %struct.listop* %3, i32 0, i32 7
  %4 = load %struct.op*, %struct.op** %op_first, align 8
  %op_type = getelementptr inbounds %struct.op, %struct.op* %4, i32 0, i32 4
  %bf.load = load i16, i16* %op_type, align 8
  %bf.clear = and i16 %bf.load, 511
  %bf.cast = zext i16 %bf.clear to i32
  %cmp = icmp eq i32 %bf.cast, 1
  br i1 %cmp, label %if.then2, label %if.end

if.then2:                                         ; preds = %if.then
  %5 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type3 = getelementptr inbounds %struct.op, %struct.op* %5, i32 0, i32 4
  %bf.load4 = load i16, i16* %op_type3, align 8
  %bf.clear5 = and i16 %bf.load4, 511
  %bf.cast6 = zext i16 %bf.clear5 to i32
  %6 = load %struct.gv*, %struct.gv** @PL_argvgv, align 8
  %call = call %struct.op* @Perl_newGVOP(i32 7, i32 0, %struct.gv* %6)
  %call7 = call %struct.op* @Perl_newUNOP(i32 %bf.cast6, i32 128, %struct.op* %call)
  store %struct.op* %call7, %struct.op** %newop, align 8
  %7 = load %struct.op*, %struct.op** %o.addr, align 8
  call void @Perl_op_free(%struct.op* %7)
  %8 = load %struct.op*, %struct.op** %newop, align 8
  store %struct.op* %8, %struct.op** %o.addr, align 8
  br label %if.end

if.end:                                           ; preds = %if.then2, %if.then
  %9 = load %struct.op*, %struct.op** %o.addr, align 8
  %call8 = call %struct.op* @Perl_ck_fun(%struct.op* %9)
  store %struct.op* %call8, %struct.op** %o.addr, align 8
  %10 = load %struct.op*, %struct.op** %o.addr, align 8
  %11 = bitcast %struct.op* %10 to %struct.listop*
  %op_first9 = getelementptr inbounds %struct.listop, %struct.listop* %11, i32 0, i32 7
  %12 = load %struct.op*, %struct.op** %op_first9, align 8
  store %struct.op* %12, %struct.op** %kid, align 8
  %13 = load %struct.op*, %struct.op** %kid, align 8
  %op_type10 = getelementptr inbounds %struct.op, %struct.op* %13, i32 0, i32 4
  %bf.load11 = load i16, i16* %op_type10, align 8
  %bf.clear12 = and i16 %bf.load11, 511
  %bf.cast13 = zext i16 %bf.clear12 to i32
  %cmp14 = icmp eq i32 %bf.cast13, 14
  br i1 %cmp14, label %if.then16, label %if.end19

if.then16:                                        ; preds = %if.end
  %14 = load %struct.op*, %struct.op** %kid, align 8
  %op_private = getelementptr inbounds %struct.op, %struct.op* %14, i32 0, i32 6
  %15 = load i8, i8* %op_private, align 1
  %conv17 = zext i8 %15 to i32
  %or = or i32 %conv17, 64
  %conv18 = trunc i32 %or to i8
  store i8 %conv18, i8* %op_private, align 1
  br label %if.end19

if.end19:                                         ; preds = %if.then16, %if.end
  br label %if.end20

if.end20:                                         ; preds = %if.end19, %entry
  %16 = load %struct.op*, %struct.op** %o.addr, align 8
  ret %struct.op* %16
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_ck_eval(%struct.op* %o) #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %o.addr = alloca %struct.op*, align 8
  %kid = alloca %struct.svop*, align 8
  %enter = alloca %struct.logop*, align 8
  %priv = alloca i8, align 1
  %hhop = alloca %struct.op*, align 8
  store %struct.op* %o, %struct.op** %o.addr, align 8
  %0 = load i32, i32* getelementptr inbounds (%struct.cop, %struct.cop* @PL_compiling, i32 0, i32 10), align 8
  %or = or i32 %0, 256
  store i32 %or, i32* getelementptr inbounds (%struct.cop, %struct.cop* @PL_compiling, i32 0, i32 10), align 8
  %1 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %1, i32 0, i32 5
  %2 = load i8, i8* %op_flags, align 2
  %conv = zext i8 %2 to i32
  %and = and i32 %conv, 4
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.else9

if.then:                                          ; preds = %entry
  %3 = load %struct.op*, %struct.op** %o.addr, align 8
  %4 = bitcast %struct.op* %3 to %struct.unop*
  %op_first = getelementptr inbounds %struct.unop, %struct.unop* %4, i32 0, i32 7
  %5 = load %struct.op*, %struct.op** %op_first, align 8
  %6 = bitcast %struct.op* %5 to %struct.svop*
  store %struct.svop* %6, %struct.svop** %kid, align 8
  %7 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type = getelementptr inbounds %struct.op, %struct.op* %7, i32 0, i32 4
  %bf.load = load i16, i16* %op_type, align 8
  %bf.clear = and i16 %bf.load, 511
  %bf.cast = zext i16 %bf.clear to i32
  %cmp = icmp eq i32 %bf.cast, 344
  br i1 %cmp, label %if.then2, label %if.else

if.then2:                                         ; preds = %if.then
  %8 = load %struct.op*, %struct.op** %o.addr, align 8
  %call = call %struct.op* @Perl_op_sibling_splice(%struct.op* %8, %struct.op* null, i32 -1, %struct.op* null)
  %9 = load %struct.op*, %struct.op** %o.addr, align 8
  call void @Perl_op_free(%struct.op* %9)
  %call3 = call %struct.logop* @S_alloc_LOGOP(i32 344, %struct.op* null, %struct.op* null)
  store %struct.logop* %call3, %struct.logop** %enter, align 8
  %10 = load %struct.logop*, %struct.logop** %enter, align 8
  %11 = bitcast %struct.logop* %10 to %struct.op*
  %12 = load %struct.logop*, %struct.logop** %enter, align 8
  %op_next = getelementptr inbounds %struct.logop, %struct.logop* %12, i32 0, i32 0
  store %struct.op* %11, %struct.op** %op_next, align 8
  %13 = load %struct.logop*, %struct.logop** %enter, align 8
  %14 = bitcast %struct.logop* %13 to %struct.op*
  %15 = load %struct.svop*, %struct.svop** %kid, align 8
  %16 = bitcast %struct.svop* %15 to %struct.op*
  %call4 = call %struct.op* @Perl_op_prepend_elem(i32 192, %struct.op* %14, %struct.op* %16)
  store %struct.op* %call4, %struct.op** %o.addr, align 8
  br label %do.body

do.body:                                          ; preds = %if.then2
  %17 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type5 = getelementptr inbounds %struct.op, %struct.op* %17, i32 0, i32 4
  %bf.load6 = load i16, i16* %op_type5, align 8
  %bf.clear7 = and i16 %bf.load6, -512
  %bf.set = or i16 %bf.clear7, 345
  store i16 %bf.set, i16* %op_type5, align 8
  %18 = load %struct.op* ()*, %struct.op* ()** getelementptr inbounds ([0 x %struct.op* ()*], [0 x %struct.op* ()*]* @PL_ppaddr, i64 0, i64 345), align 8
  %19 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_ppaddr = getelementptr inbounds %struct.op, %struct.op* %19, i32 0, i32 2
  store %struct.op* ()* %18, %struct.op* ()** %op_ppaddr, align 8
  br label %do.end

do.end:                                           ; preds = %do.body
  %20 = load %struct.op*, %struct.op** %o.addr, align 8
  %21 = load %struct.logop*, %struct.logop** %enter, align 8
  %op_other = getelementptr inbounds %struct.logop, %struct.logop* %21, i32 0, i32 8
  store %struct.op* %20, %struct.op** %op_other, align 8
  %22 = load %struct.op*, %struct.op** %o.addr, align 8
  store %struct.op* %22, %struct.op** %retval, align 8
  br label %return

if.else:                                          ; preds = %if.then
  %23 = load %struct.svop*, %struct.svop** %kid, align 8
  %24 = bitcast %struct.svop* %23 to %struct.op*
  %call8 = call %struct.op* @Perl_scalar(%struct.op* %24)
  call void @S_set_haseval()
  br label %if.end

if.end:                                           ; preds = %if.else
  br label %if.end13

if.else9:                                         ; preds = %entry
  %25 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_private = getelementptr inbounds %struct.op, %struct.op* %25, i32 0, i32 6
  %26 = load i8, i8* %op_private, align 1
  store i8 %26, i8* %priv, align 1
  %27 = load %struct.op*, %struct.op** %o.addr, align 8
  call void @Perl_op_free(%struct.op* %27)
  %28 = load i8, i8* %priv, align 1
  %conv10 = zext i8 %28 to i32
  %shl = shl i32 %conv10, 8
  %call11 = call %struct.op* @Perl_newDEFSVOP()
  %call12 = call %struct.op* @Perl_newUNOP(i32 342, i32 %shl, %struct.op* %call11)
  store %struct.op* %call12, %struct.op** %retval, align 8
  br label %return

if.end13:                                         ; preds = %if.end
  %29 = load i32, i32* getelementptr inbounds (%struct.cop, %struct.cop* @PL_compiling, i32 0, i32 10), align 8
  %conv14 = zext i32 %29 to i64
  %30 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_targ = getelementptr inbounds %struct.op, %struct.op* %30, i32 0, i32 3
  store i64 %conv14, i64* %op_targ, align 8
  %31 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_private15 = getelementptr inbounds %struct.op, %struct.op* %31, i32 0, i32 6
  %32 = load i8, i8* %op_private15, align 1
  %conv16 = zext i8 %32 to i32
  %and17 = and i32 %conv16, 8
  %tobool18 = icmp ne i32 %and17, 0
  br i1 %tobool18, label %if.then19, label %if.end22

if.then19:                                        ; preds = %if.end13
  %33 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_targ20 = getelementptr inbounds %struct.op, %struct.op* %33, i32 0, i32 3
  %34 = load i64, i64* %op_targ20, align 8
  %and21 = and i64 %34, -8388609
  store i64 %and21, i64* %op_targ20, align 8
  br label %if.end22

if.end22:                                         ; preds = %if.then19, %if.end13
  %35 = load i32, i32* getelementptr inbounds (%struct.cop, %struct.cop* @PL_compiling, i32 0, i32 10), align 8
  %and23 = and i32 %35, 131072
  %cmp24 = icmp ne i32 %and23, 0
  br i1 %cmp24, label %land.lhs.true, label %if.end45

land.lhs.true:                                    ; preds = %if.end22
  %36 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_private26 = getelementptr inbounds %struct.op, %struct.op* %36, i32 0, i32 6
  %37 = load i8, i8* %op_private26, align 1
  %conv27 = zext i8 %37 to i32
  %and28 = and i32 %conv27, 16
  %tobool29 = icmp ne i32 %and28, 0
  br i1 %tobool29, label %if.end45, label %land.lhs.true30

land.lhs.true30:                                  ; preds = %land.lhs.true
  %38 = load %struct.gv*, %struct.gv** @PL_hintgv, align 8
  %sv_u = getelementptr inbounds %struct.gv, %struct.gv* %38, i32 0, i32 3
  %svu_gp = bitcast %union.anon.3* %sv_u to %struct.gp**
  %39 = load %struct.gp*, %struct.gp** %svu_gp, align 8
  %add.ptr = getelementptr inbounds %struct.gp, %struct.gp* %39, i64 0
  %gp_hv = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr, i32 0, i32 5
  %40 = load %struct.hv*, %struct.hv** %gp_hv, align 8
  %tobool31 = icmp ne %struct.hv* %40, null
  br i1 %tobool31, label %if.then32, label %if.end45

if.then32:                                        ; preds = %land.lhs.true30
  %41 = load %struct.gv*, %struct.gv** @PL_hintgv, align 8
  %sv_u33 = getelementptr inbounds %struct.gv, %struct.gv* %41, i32 0, i32 3
  %svu_gp34 = bitcast %union.anon.3* %sv_u33 to %struct.gp**
  %42 = load %struct.gp*, %struct.gp** %svu_gp34, align 8
  %add.ptr35 = getelementptr inbounds %struct.gp, %struct.gp* %42, i64 0
  %gp_hv36 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr35, i32 0, i32 5
  %43 = load %struct.hv*, %struct.hv** %gp_hv36, align 8
  %call37 = call %struct.hv* @Perl_hv_copy_hints_hv(%struct.hv* %43)
  %44 = bitcast %struct.hv* %call37 to i8*
  %45 = bitcast i8* %44 to %struct.sv*
  %call38 = call %struct.op* @Perl_newSVOP(i32 341, i32 0, %struct.sv* %45)
  store %struct.op* %call38, %struct.op** %hhop, align 8
  %46 = load %struct.op*, %struct.op** %o.addr, align 8
  %47 = load %struct.op*, %struct.op** %o.addr, align 8
  %48 = bitcast %struct.op* %47 to %struct.unop*
  %op_first39 = getelementptr inbounds %struct.unop, %struct.unop* %48, i32 0, i32 7
  %49 = load %struct.op*, %struct.op** %op_first39, align 8
  %50 = load %struct.op*, %struct.op** %hhop, align 8
  %call40 = call %struct.op* @Perl_op_sibling_splice(%struct.op* %46, %struct.op* %49, i32 0, %struct.op* %50)
  %51 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_private41 = getelementptr inbounds %struct.op, %struct.op* %51, i32 0, i32 6
  %52 = load i8, i8* %op_private41, align 1
  %conv42 = zext i8 %52 to i32
  %or43 = or i32 %conv42, 2
  %conv44 = trunc i32 %or43 to i8
  store i8 %conv44, i8* %op_private41, align 1
  br label %if.end45

if.end45:                                         ; preds = %if.then32, %land.lhs.true30, %land.lhs.true, %if.end22
  %53 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_private46 = getelementptr inbounds %struct.op, %struct.op* %53, i32 0, i32 6
  %54 = load i8, i8* %op_private46, align 1
  %conv47 = zext i8 %54 to i32
  %and48 = and i32 %conv47, 8
  %tobool49 = icmp ne i32 %and48, 0
  br i1 %tobool49, label %if.end86, label %land.lhs.true50

land.lhs.true50:                                  ; preds = %if.end45
  %55 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cmp51 = icmp eq %struct.cop* %55, @PL_compiling
  br i1 %cmp51, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true50
  %56 = load i32, i32* getelementptr inbounds (%struct.cop, %struct.cop* @PL_compiling, i32 0, i32 10), align 8
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true50
  %57 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_hints = getelementptr inbounds %struct.cop, %struct.cop* %57, i32 0, i32 10
  %58 = load i32, i32* %cop_hints, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %56, %cond.true ], [ %58, %cond.false ]
  %and53 = and i32 %cond, 469762048
  %shr = lshr i32 %and53, 26
  %cmp54 = icmp eq i32 %shr, 3
  br i1 %cmp54, label %if.then81, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %cond.end
  %59 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cmp56 = icmp eq %struct.cop* %59, @PL_compiling
  br i1 %cmp56, label %cond.true58, label %cond.false59

cond.true58:                                      ; preds = %lor.lhs.false
  %60 = load i32, i32* getelementptr inbounds (%struct.cop, %struct.cop* @PL_compiling, i32 0, i32 10), align 8
  br label %cond.end61

cond.false59:                                     ; preds = %lor.lhs.false
  %61 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_hints60 = getelementptr inbounds %struct.cop, %struct.cop* %61, i32 0, i32 10
  %62 = load i32, i32* %cop_hints60, align 8
  br label %cond.end61

cond.end61:                                       ; preds = %cond.false59, %cond.true58
  %cond62 = phi i32 [ %60, %cond.true58 ], [ %62, %cond.false59 ]
  %and63 = and i32 %cond62, 469762048
  %shr64 = lshr i32 %and63, 26
  %cmp65 = icmp eq i32 %shr64, 7
  br i1 %cmp65, label %land.lhs.true67, label %if.end86

land.lhs.true67:                                  ; preds = %cond.end61
  %63 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cmp68 = icmp eq %struct.cop* %63, @PL_compiling
  br i1 %cmp68, label %cond.true70, label %cond.false71

cond.true70:                                      ; preds = %land.lhs.true67
  %64 = load i32, i32* getelementptr inbounds (%struct.cop, %struct.cop* @PL_compiling, i32 0, i32 10), align 8
  br label %cond.end73

cond.false71:                                     ; preds = %land.lhs.true67
  %65 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_hints72 = getelementptr inbounds %struct.cop, %struct.cop* %65, i32 0, i32 10
  %66 = load i32, i32* %cop_hints72, align 8
  br label %cond.end73

cond.end73:                                       ; preds = %cond.false71, %cond.true70
  %cond74 = phi i32 [ %64, %cond.true70 ], [ %66, %cond.false71 ]
  %and75 = and i32 %cond74, 131072
  %tobool76 = icmp ne i32 %and75, 0
  br i1 %tobool76, label %cond.true77, label %cond.false80

cond.true77:                                      ; preds = %cond.end73
  %call78 = call zeroext i1 @Perl_feature_is_enabled(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.98, i64 0, i64 0), i64 7)
  br i1 %call78, label %if.then81, label %if.end86

cond.false80:                                     ; preds = %cond.end73
  br i1 false, label %if.then81, label %if.end86

if.then81:                                        ; preds = %cond.false80, %cond.true77, %cond.end
  %67 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_private82 = getelementptr inbounds %struct.op, %struct.op* %67, i32 0, i32 6
  %68 = load i8, i8* %op_private82, align 1
  %conv83 = zext i8 %68 to i32
  %or84 = or i32 %conv83, 4
  %conv85 = trunc i32 %or84 to i8
  store i8 %conv85, i8* %op_private82, align 1
  br label %if.end86

if.end86:                                         ; preds = %if.then81, %cond.false80, %cond.true77, %cond.end61, %if.end45
  %69 = load %struct.op*, %struct.op** %o.addr, align 8
  store %struct.op* %69, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %if.end86, %if.else9, %do.end
  %70 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %70
}

declare dso_local %struct.hv* @Perl_hv_copy_hints_hv(%struct.hv*) #3

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_ck_exec(%struct.op* %o) #0 {
entry:
  %o.addr = alloca %struct.op*, align 8
  %kid = alloca %struct.op*, align 8
  store %struct.op* %o, %struct.op** %o.addr, align 8
  %0 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %0, i32 0, i32 5
  %1 = load i8, i8* %op_flags, align 2
  %conv = zext i8 %1 to i32
  %and = and i32 %conv, 64
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %2 = load %struct.op*, %struct.op** %o.addr, align 8
  %call = call %struct.op* @Perl_ck_fun(%struct.op* %2)
  store %struct.op* %call, %struct.op** %o.addr, align 8
  %3 = load %struct.op*, %struct.op** %o.addr, align 8
  %4 = bitcast %struct.op* %3 to %struct.unop*
  %op_first = getelementptr inbounds %struct.unop, %struct.unop* %4, i32 0, i32 7
  %5 = load %struct.op*, %struct.op** %op_first, align 8
  %op_sibling = getelementptr inbounds %struct.op, %struct.op* %5, i32 0, i32 1
  %6 = load %struct.op*, %struct.op** %op_sibling, align 8
  %add.ptr = getelementptr inbounds %struct.op, %struct.op* %6, i64 0
  store %struct.op* %add.ptr, %struct.op** %kid, align 8
  %7 = load %struct.op*, %struct.op** %kid, align 8
  %op_type = getelementptr inbounds %struct.op, %struct.op* %7, i32 0, i32 4
  %bf.load = load i16, i16* %op_type, align 8
  %bf.clear = and i16 %bf.load, 511
  %bf.cast = zext i16 %bf.clear to i32
  %cmp = icmp eq i32 %bf.cast, 14
  br i1 %cmp, label %if.then2, label %if.end

if.then2:                                         ; preds = %if.then
  %8 = load %struct.op*, %struct.op** %kid, align 8
  call void @Perl_op_null(%struct.op* %8)
  br label %if.end

if.end:                                           ; preds = %if.then2, %if.then
  br label %if.end4

if.else:                                          ; preds = %entry
  %9 = load %struct.op*, %struct.op** %o.addr, align 8
  %call3 = call %struct.op* @S_listkids(%struct.op* %9)
  store %struct.op* %call3, %struct.op** %o.addr, align 8
  br label %if.end4

if.end4:                                          ; preds = %if.else, %if.end
  %10 = load %struct.op*, %struct.op** %o.addr, align 8
  ret %struct.op* %10
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_ck_exists(%struct.op* %o) #0 {
entry:
  %o.addr = alloca %struct.op*, align 8
  %kid = alloca %struct.op*, align 8
  store %struct.op* %o, %struct.op** %o.addr, align 8
  %0 = load %struct.op*, %struct.op** %o.addr, align 8
  %call = call %struct.op* @Perl_ck_fun(%struct.op* %0)
  store %struct.op* %call, %struct.op** %o.addr, align 8
  %1 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %1, i32 0, i32 5
  %2 = load i8, i8* %op_flags, align 2
  %conv = zext i8 %2 to i32
  %and = and i32 %conv, 4
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.end43

if.then:                                          ; preds = %entry
  %3 = load %struct.op*, %struct.op** %o.addr, align 8
  %4 = bitcast %struct.op* %3 to %struct.unop*
  %op_first = getelementptr inbounds %struct.unop, %struct.unop* %4, i32 0, i32 7
  %5 = load %struct.op*, %struct.op** %op_first, align 8
  store %struct.op* %5, %struct.op** %kid, align 8
  %6 = load %struct.op*, %struct.op** %kid, align 8
  %op_type = getelementptr inbounds %struct.op, %struct.op* %6, i32 0, i32 4
  %bf.load = load i16, i16* %op_type, align 8
  %bf.clear = and i16 %bf.load, 511
  %bf.cast = zext i16 %bf.clear to i32
  %cmp = icmp eq i32 %bf.cast, 185
  br i1 %cmp, label %if.then2, label %if.else

if.then2:                                         ; preds = %if.then
  %7 = load %struct.op*, %struct.op** %kid, align 8
  %8 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type3 = getelementptr inbounds %struct.op, %struct.op* %8, i32 0, i32 4
  %bf.load4 = load i16, i16* %op_type3, align 8
  %bf.clear5 = and i16 %bf.load4, 511
  %bf.cast6 = zext i16 %bf.clear5 to i32
  %call7 = call %struct.op* @Perl_doref(%struct.op* %7, i32 %bf.cast6, i1 zeroext true)
  %9 = load %struct.op*, %struct.op** %kid, align 8
  %op_type8 = getelementptr inbounds %struct.op, %struct.op* %9, i32 0, i32 4
  %bf.load9 = load i16, i16* %op_type8, align 8
  %bf.clear10 = and i16 %bf.load9, 511
  %bf.cast11 = zext i16 %bf.clear10 to i32
  %cmp12 = icmp ne i32 %bf.cast11, 17
  br i1 %cmp12, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %if.then2
  %10 = load %struct.yy_parser*, %struct.yy_parser** @PL_parser, align 8
  %tobool14 = icmp ne %struct.yy_parser* %10, null
  br i1 %tobool14, label %land.lhs.true15, label %if.then18

land.lhs.true15:                                  ; preds = %land.lhs.true
  %11 = load %struct.yy_parser*, %struct.yy_parser** @PL_parser, align 8
  %error_count = getelementptr inbounds %struct.yy_parser, %struct.yy_parser* %11, i32 0, i32 44
  %12 = load i8, i8* %error_count, align 1
  %conv16 = zext i8 %12 to i32
  %tobool17 = icmp ne i32 %conv16, 0
  br i1 %tobool17, label %if.end, label %if.then18

if.then18:                                        ; preds = %land.lhs.true15, %land.lhs.true
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.99, i64 0, i64 0))
  br label %if.end

if.end:                                           ; preds = %if.then18, %land.lhs.true15, %if.then2
  %13 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_private = getelementptr inbounds %struct.op, %struct.op* %13, i32 0, i32 6
  %14 = load i8, i8* %op_private, align 1
  %conv19 = zext i8 %14 to i32
  %or = or i32 %conv19, 64
  %conv20 = trunc i32 %or to i8
  store i8 %conv20, i8* %op_private, align 1
  br label %if.end42

if.else:                                          ; preds = %if.then
  %15 = load %struct.op*, %struct.op** %kid, align 8
  %op_type21 = getelementptr inbounds %struct.op, %struct.op* %15, i32 0, i32 4
  %bf.load22 = load i16, i16* %op_type21, align 8
  %bf.clear23 = and i16 %bf.load22, 511
  %bf.cast24 = zext i16 %bf.clear23 to i32
  %cmp25 = icmp eq i32 %bf.cast24, 138
  br i1 %cmp25, label %if.then27, label %if.else32

if.then27:                                        ; preds = %if.else
  %16 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_flags28 = getelementptr inbounds %struct.op, %struct.op* %16, i32 0, i32 5
  %17 = load i8, i8* %op_flags28, align 2
  %conv29 = zext i8 %17 to i32
  %or30 = or i32 %conv29, 128
  %conv31 = trunc i32 %or30 to i8
  store i8 %conv31, i8* %op_flags28, align 2
  br label %if.end41

if.else32:                                        ; preds = %if.else
  %18 = load %struct.op*, %struct.op** %kid, align 8
  %op_type33 = getelementptr inbounds %struct.op, %struct.op* %18, i32 0, i32 4
  %bf.load34 = load i16, i16* %op_type33, align 8
  %bf.clear35 = and i16 %bf.load34, 511
  %bf.cast36 = zext i16 %bf.clear35 to i32
  %cmp37 = icmp ne i32 %bf.cast36, 150
  br i1 %cmp37, label %if.then39, label %if.end40

if.then39:                                        ; preds = %if.else32
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str.100, i64 0, i64 0))
  br label %if.end40

if.end40:                                         ; preds = %if.then39, %if.else32
  br label %if.end41

if.end41:                                         ; preds = %if.end40, %if.then27
  br label %if.end42

if.end42:                                         ; preds = %if.end41, %if.end
  %19 = load %struct.op*, %struct.op** %kid, align 8
  call void @Perl_op_null(%struct.op* %19)
  br label %if.end43

if.end43:                                         ; preds = %if.end42, %entry
  %20 = load %struct.op*, %struct.op** %o.addr, align 8
  ret %struct.op* %20
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_ck_rvconst(%struct.op* %o) #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %o.addr = alloca %struct.op*, align 8
  %kid = alloca %struct.svop*, align 8
  %iscv = alloca i32, align 4
  %gv = alloca %struct.gv*, align 8
  %kidsv = alloca %struct.sv*, align 8
  %badthing = alloca i8*, align 8
  store %struct.op* %o, %struct.op** %o.addr, align 8
  %0 = load %struct.op*, %struct.op** %o.addr, align 8
  %1 = bitcast %struct.op* %0 to %struct.unop*
  %op_first = getelementptr inbounds %struct.unop, %struct.unop* %1, i32 0, i32 7
  %2 = load %struct.op*, %struct.op** %op_first, align 8
  %3 = bitcast %struct.op* %2 to %struct.svop*
  store %struct.svop* %3, %struct.svop** %kid, align 8
  %4 = load i32, i32* getelementptr inbounds (%struct.cop, %struct.cop* @PL_compiling, i32 0, i32 10), align 8
  %and = and i32 %4, 2
  %5 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_private = getelementptr inbounds %struct.op, %struct.op* %5, i32 0, i32 6
  %6 = load i8, i8* %op_private, align 1
  %conv = zext i8 %6 to i32
  %or = or i32 %conv, %and
  %conv1 = trunc i32 %or to i8
  store i8 %conv1, i8* %op_private, align 1
  %7 = load %struct.svop*, %struct.svop** %kid, align 8
  %op_type = getelementptr inbounds %struct.svop, %struct.svop* %7, i32 0, i32 4
  %bf.load = load i16, i16* %op_type, align 8
  %bf.clear = and i16 %bf.load, 511
  %bf.cast = zext i16 %bf.clear to i32
  %cmp = icmp eq i32 %bf.cast, 5
  br i1 %cmp, label %if.then, label %if.end132

if.then:                                          ; preds = %entry
  %8 = load %struct.svop*, %struct.svop** %kid, align 8
  %op_sv = getelementptr inbounds %struct.svop, %struct.svop* %8, i32 0, i32 7
  %9 = load %struct.sv*, %struct.sv** %op_sv, align 8
  store %struct.sv* %9, %struct.sv** %kidsv, align 8
  %10 = load %struct.sv*, %struct.sv** %kidsv, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %10, i32 0, i32 2
  %11 = load i32, i32* %sv_flags, align 4
  %and3 = and i32 %11, 2048
  %tobool = icmp ne i32 %and3, 0
  br i1 %tobool, label %land.lhs.true17, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.then
  %12 = load %struct.sv*, %struct.sv** %kidsv, align 8
  %sv_flags4 = getelementptr inbounds %struct.sv, %struct.sv* %12, i32 0, i32 2
  %13 = load i32, i32* %sv_flags4, align 4
  %and5 = and i32 %13, 49152
  %cmp6 = icmp eq i32 %and5, 32768
  br i1 %cmp6, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %lor.lhs.false
  %14 = load %struct.sv*, %struct.sv** %kidsv, align 8
  %sv_flags8 = getelementptr inbounds %struct.sv, %struct.sv* %14, i32 0, i32 2
  %15 = load i32, i32* %sv_flags8, align 4
  %and9 = and i32 %15, 255
  %cmp10 = icmp eq i32 %and9, 9
  br i1 %cmp10, label %land.lhs.true17, label %lor.lhs.false12

lor.lhs.false12:                                  ; preds = %land.lhs.true
  %16 = load %struct.sv*, %struct.sv** %kidsv, align 8
  %sv_flags13 = getelementptr inbounds %struct.sv, %struct.sv* %16, i32 0, i32 2
  %17 = load i32, i32* %sv_flags13, align 4
  %and14 = and i32 %17, 255
  %cmp15 = icmp eq i32 %and14, 10
  br i1 %cmp15, label %land.lhs.true17, label %if.end

land.lhs.true17:                                  ; preds = %lor.lhs.false12, %land.lhs.true, %if.then
  %18 = load %struct.sv*, %struct.sv** %kidsv, align 8
  %sv_flags18 = getelementptr inbounds %struct.sv, %struct.sv* %18, i32 0, i32 2
  %19 = load i32, i32* %sv_flags18, align 4
  %and19 = and i32 %19, 134283264
  %tobool20 = icmp ne i32 %and19, 0
  br i1 %tobool20, label %if.then21, label %if.end

if.then21:                                        ; preds = %land.lhs.true17
  %20 = load %struct.op*, %struct.op** %o.addr, align 8
  store %struct.op* %20, %struct.op** %retval, align 8
  br label %return

if.end:                                           ; preds = %land.lhs.true17, %lor.lhs.false12, %lor.lhs.false
  %21 = load %struct.sv*, %struct.sv** %kidsv, align 8
  %sv_flags22 = getelementptr inbounds %struct.sv, %struct.sv* %21, i32 0, i32 2
  %22 = load i32, i32* %sv_flags22, align 4
  %and23 = and i32 %22, 255
  %cmp24 = icmp eq i32 %and23, 11
  br i1 %cmp24, label %if.then26, label %if.end27

if.then26:                                        ; preds = %if.end
  %23 = load %struct.op*, %struct.op** %o.addr, align 8
  store %struct.op* %23, %struct.op** %retval, align 8
  br label %return

if.end27:                                         ; preds = %if.end
  %24 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_private28 = getelementptr inbounds %struct.op, %struct.op* %24, i32 0, i32 6
  %25 = load i8, i8* %op_private28, align 1
  %conv29 = zext i8 %25 to i32
  %and30 = and i32 %conv29, 2
  %tobool31 = icmp ne i32 %and30, 0
  br i1 %tobool31, label %land.lhs.true32, label %if.end47

land.lhs.true32:                                  ; preds = %if.end27
  %26 = load %struct.svop*, %struct.svop** %kid, align 8
  %op_private33 = getelementptr inbounds %struct.svop, %struct.svop* %26, i32 0, i32 6
  %27 = load i8, i8* %op_private33, align 1
  %conv34 = zext i8 %27 to i32
  %and35 = and i32 %conv34, 64
  %tobool36 = icmp ne i32 %and35, 0
  br i1 %tobool36, label %if.then37, label %if.end47

if.then37:                                        ; preds = %land.lhs.true32
  %28 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type38 = getelementptr inbounds %struct.op, %struct.op* %28, i32 0, i32 4
  %bf.load39 = load i16, i16* %op_type38, align 8
  %bf.clear40 = and i16 %bf.load39, 511
  %bf.cast41 = zext i16 %bf.clear40 to i32
  switch i32 %bf.cast41, label %sw.default [
    i32 15, label %sw.bb
    i32 135, label %sw.bb42
    i32 149, label %sw.bb43
  ]

sw.bb:                                            ; preds = %if.then37
  store i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.101, i64 0, i64 0), i8** %badthing, align 8
  br label %sw.epilog

sw.bb42:                                          ; preds = %if.then37
  store i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.102, i64 0, i64 0), i8** %badthing, align 8
  br label %sw.epilog

sw.bb43:                                          ; preds = %if.then37
  store i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.103, i64 0, i64 0), i8** %badthing, align 8
  br label %sw.epilog

sw.default:                                       ; preds = %if.then37
  store i8* null, i8** %badthing, align 8
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %sw.bb43, %sw.bb42, %sw.bb
  %29 = load i8*, i8** %badthing, align 8
  %tobool44 = icmp ne i8* %29, null
  br i1 %tobool44, label %if.then45, label %if.end46

if.then45:                                        ; preds = %sw.epilog
  %30 = load %struct.sv*, %struct.sv** %kidsv, align 8
  %31 = bitcast %struct.sv* %30 to i8*
  %32 = load i8*, i8** %badthing, align 8
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.104, i64 0, i64 0), i8* %31, i8* %32)
  br label %if.end46

if.end46:                                         ; preds = %if.then45, %sw.epilog
  br label %if.end47

if.end47:                                         ; preds = %if.end46, %land.lhs.true32, %if.end27
  %33 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type48 = getelementptr inbounds %struct.op, %struct.op* %33, i32 0, i32 4
  %bf.load49 = load i16, i16* %op_type48, align 8
  %bf.clear50 = and i16 %bf.load49, 511
  %bf.cast51 = zext i16 %bf.clear50 to i32
  %cmp52 = icmp eq i32 %bf.cast51, 17
  %34 = zext i1 %cmp52 to i64
  %cond = select i1 %cmp52, i32 66, i32 0
  store i32 %cond, i32* %iscv, align 4
  %35 = load %struct.sv*, %struct.sv** %kidsv, align 8
  %36 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type54 = getelementptr inbounds %struct.op, %struct.op* %36, i32 0, i32 4
  %bf.load55 = load i16, i16* %op_type54, align 8
  %bf.clear56 = and i16 %bf.load55, 511
  %bf.cast57 = zext i16 %bf.clear56 to i32
  %cmp58 = icmp eq i32 %bf.cast57, 17
  br i1 %cmp58, label %land.lhs.true60, label %cond.false

land.lhs.true60:                                  ; preds = %if.end47
  %37 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_private61 = getelementptr inbounds %struct.op, %struct.op* %37, i32 0, i32 6
  %38 = load i8, i8* %op_private61, align 1
  %conv62 = zext i8 %38 to i32
  %and63 = and i32 %conv62, 32
  %tobool64 = icmp ne i32 %and63, 0
  br i1 %tobool64, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true60
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true60, %if.end47
  %39 = load i32, i32* %iscv, align 4
  %40 = load %struct.svop*, %struct.svop** %kid, align 8
  %op_private65 = getelementptr inbounds %struct.svop, %struct.svop* %40, i32 0, i32 6
  %41 = load i8, i8* %op_private65, align 1
  %conv66 = zext i8 %41 to i32
  %and67 = and i32 %conv66, 16
  %tobool68 = icmp ne i32 %and67, 0
  %lnot = xor i1 %tobool68, true
  %lnot.ext = zext i1 %lnot to i32
  %or69 = or i32 %39, %lnot.ext
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond70 = phi i32 [ 64, %cond.true ], [ %or69, %cond.false ]
  %42 = load i32, i32* %iscv, align 4
  %tobool71 = icmp ne i32 %42, 0
  br i1 %tobool71, label %cond.true72, label %cond.false73

cond.true72:                                      ; preds = %cond.end
  br label %cond.end101

cond.false73:                                     ; preds = %cond.end
  %43 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type74 = getelementptr inbounds %struct.op, %struct.op* %43, i32 0, i32 4
  %bf.load75 = load i16, i16* %op_type74, align 8
  %bf.clear76 = and i16 %bf.load75, 511
  %bf.cast77 = zext i16 %bf.clear76 to i32
  %cmp78 = icmp eq i32 %bf.cast77, 15
  br i1 %cmp78, label %cond.true80, label %cond.false81

cond.true80:                                      ; preds = %cond.false73
  br label %cond.end99

cond.false81:                                     ; preds = %cond.false73
  %44 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type82 = getelementptr inbounds %struct.op, %struct.op* %44, i32 0, i32 4
  %bf.load83 = load i16, i16* %op_type82, align 8
  %bf.clear84 = and i16 %bf.load83, 511
  %bf.cast85 = zext i16 %bf.clear84 to i32
  %cmp86 = icmp eq i32 %bf.cast85, 135
  br i1 %cmp86, label %cond.true88, label %cond.false89

cond.true88:                                      ; preds = %cond.false81
  br label %cond.end97

cond.false89:                                     ; preds = %cond.false81
  %45 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type90 = getelementptr inbounds %struct.op, %struct.op* %45, i32 0, i32 4
  %bf.load91 = load i16, i16* %op_type90, align 8
  %bf.clear92 = and i16 %bf.load91, 511
  %bf.cast93 = zext i16 %bf.clear92 to i32
  %cmp94 = icmp eq i32 %bf.cast93, 149
  %46 = zext i1 %cmp94 to i64
  %cond96 = select i1 %cmp94, i32 12, i32 9
  br label %cond.end97

cond.end97:                                       ; preds = %cond.false89, %cond.true88
  %cond98 = phi i32 [ 11, %cond.true88 ], [ %cond96, %cond.false89 ]
  br label %cond.end99

cond.end99:                                       ; preds = %cond.end97, %cond.true80
  %cond100 = phi i32 [ 3, %cond.true80 ], [ %cond98, %cond.end97 ]
  br label %cond.end101

cond.end101:                                      ; preds = %cond.end99, %cond.true72
  %cond102 = phi i32 [ 13, %cond.true72 ], [ %cond100, %cond.end99 ]
  %call = call %struct.gv* @Perl_gv_fetchsv(%struct.sv* %35, i32 %cond70, i32 %cond102)
  store %struct.gv* %call, %struct.gv** %gv, align 8
  %47 = load %struct.gv*, %struct.gv** %gv, align 8
  %tobool103 = icmp ne %struct.gv* %47, null
  br i1 %tobool103, label %if.then104, label %if.end131

if.then104:                                       ; preds = %cond.end101
  %48 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_flags105 = getelementptr inbounds %struct.gv, %struct.gv* %48, i32 0, i32 2
  %49 = load i32, i32* %sv_flags105, align 4
  %and106 = and i32 %49, 255
  %cmp107 = icmp eq i32 %and106, 9
  br i1 %cmp107, label %if.end122, label %if.then109

if.then109:                                       ; preds = %if.then104
  %50 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_private110 = getelementptr inbounds %struct.op, %struct.op* %50, i32 0, i32 6
  %51 = load i8, i8* %op_private110, align 1
  %conv111 = zext i8 %51 to i32
  %and112 = and i32 %conv111, 32
  %tobool113 = icmp ne i32 %and112, 0
  br i1 %tobool113, label %if.end121, label %land.lhs.true114

land.lhs.true114:                                 ; preds = %if.then109
  %52 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u = getelementptr inbounds %struct.gv, %struct.gv* %52, i32 0, i32 3
  %svu_rv = bitcast %union.anon.3* %sv_u to %struct.sv**
  %53 = load %struct.sv*, %struct.sv** %svu_rv, align 8
  %sv_flags115 = getelementptr inbounds %struct.sv, %struct.sv* %53, i32 0, i32 2
  %54 = load i32, i32* %sv_flags115, align 4
  %and116 = and i32 %54, 255
  %cmp117 = icmp ne i32 %and116, 13
  br i1 %cmp117, label %if.then119, label %if.end121

if.then119:                                       ; preds = %land.lhs.true114
  %55 = load %struct.sv*, %struct.sv** %kidsv, align 8
  %call120 = call %struct.gv* @Perl_gv_fetchsv(%struct.sv* %55, i32 2, i32 13)
  br label %if.end121

if.end121:                                        ; preds = %if.then119, %land.lhs.true114, %if.then109
  br label %if.end122

if.end122:                                        ; preds = %if.end121, %if.then104
  br label %do.body

do.body:                                          ; preds = %if.end122
  %56 = load %struct.svop*, %struct.svop** %kid, align 8
  %op_type123 = getelementptr inbounds %struct.svop, %struct.svop* %56, i32 0, i32 4
  %bf.load124 = load i16, i16* %op_type123, align 8
  %bf.clear125 = and i16 %bf.load124, -512
  %bf.set = or i16 %bf.clear125, 7
  store i16 %bf.set, i16* %op_type123, align 8
  %57 = load %struct.op* ()*, %struct.op* ()** getelementptr inbounds ([0 x %struct.op* ()*], [0 x %struct.op* ()*]* @PL_ppaddr, i64 0, i64 7), align 8
  %58 = load %struct.svop*, %struct.svop** %kid, align 8
  %op_ppaddr = getelementptr inbounds %struct.svop, %struct.svop* %58, i32 0, i32 2
  store %struct.op* ()* %57, %struct.op* ()** %op_ppaddr, align 8
  br label %do.end

do.end:                                           ; preds = %do.body
  %59 = load %struct.svop*, %struct.svop** %kid, align 8
  %op_sv126 = getelementptr inbounds %struct.svop, %struct.svop* %59, i32 0, i32 7
  %60 = load %struct.sv*, %struct.sv** %op_sv126, align 8
  %61 = bitcast %struct.sv* %60 to i8*
  %62 = bitcast i8* %61 to %struct.sv*
  call void @S_SvREFCNT_dec(%struct.sv* %62)
  %63 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_refcnt = getelementptr inbounds %struct.gv, %struct.gv* %63, i32 0, i32 1
  %64 = load i32, i32* %sv_refcnt, align 8
  %inc = add i32 %64, 1
  store i32 %inc, i32* %sv_refcnt, align 8
  %65 = load %struct.gv*, %struct.gv** %gv, align 8
  %66 = bitcast %struct.gv* %65 to i8*
  %67 = bitcast i8* %66 to %struct.sv*
  %68 = load %struct.svop*, %struct.svop** %kid, align 8
  %op_sv127 = getelementptr inbounds %struct.svop, %struct.svop* %68, i32 0, i32 7
  store %struct.sv* %67, %struct.sv** %op_sv127, align 8
  %69 = load %struct.svop*, %struct.svop** %kid, align 8
  %op_private128 = getelementptr inbounds %struct.svop, %struct.svop* %69, i32 0, i32 6
  store i8 0, i8* %op_private128, align 1
  %70 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_flags129 = getelementptr inbounds %struct.gv, %struct.gv* %70, i32 0, i32 2
  %71 = load i32, i32* %sv_flags129, align 4
  %and130 = and i32 %71, -16777217
  store i32 %and130, i32* %sv_flags129, align 4
  br label %if.end131

if.end131:                                        ; preds = %do.end, %cond.end101
  br label %if.end132

if.end132:                                        ; preds = %if.end131, %entry
  %72 = load %struct.op*, %struct.op** %o.addr, align 8
  store %struct.op* %72, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %if.end132, %if.then26, %if.then21
  %73 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %73
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.op* @S_no_fh_allowed(%struct.op* %o) #0 {
entry:
  %o.addr = alloca %struct.op*, align 8
  %coerce = alloca %union.XOPRETANY, align 8
  store %struct.op* %o, %struct.op** %o.addr, align 8
  %0 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type = getelementptr inbounds %struct.op, %struct.op* %0, i32 0, i32 4
  %bf.load = load i16, i16* %op_type, align 8
  %bf.clear = and i16 %bf.load, 511
  %bf.cast = zext i16 %bf.clear to i32
  %cmp = icmp eq i32 %bf.cast, 380
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %1 = load %struct.op*, %struct.op** %o.addr, align 8
  %call = call i8* @Perl_custom_op_get_field(%struct.op* %1, i32 2)
  %coerce.dive = getelementptr inbounds %union.XOPRETANY, %union.XOPRETANY* %coerce, i32 0, i32 0
  store i8* %call, i8** %coerce.dive, align 8
  %xop_desc = bitcast %union.XOPRETANY* %coerce to i8**
  %2 = load i8*, i8** %xop_desc, align 8
  br label %cond.end

cond.false:                                       ; preds = %entry
  %3 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type1 = getelementptr inbounds %struct.op, %struct.op* %3, i32 0, i32 4
  %bf.load2 = load i16, i16* %op_type1, align 8
  %bf.clear3 = and i16 %bf.load2, 511
  %bf.cast4 = zext i16 %bf.clear3 to i32
  %idxprom = zext i32 %bf.cast4 to i64
  %arrayidx = getelementptr inbounds [0 x i8*], [0 x i8*]* @PL_op_desc, i64 0, i64 %idxprom
  %4 = load i8*, i8** %arrayidx, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %2, %cond.true ], [ %4, %cond.false ]
  %call5 = call i8* (i8*, ...) @Perl_form(i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.205, i64 0, i64 0), i8* %cond)
  %call6 = call i32 @Perl_yyerror(i8* %call5)
  %5 = load %struct.op*, %struct.op** %o.addr, align 8
  ret %struct.op* %5
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.op* @S_too_many_arguments_pv(%struct.op* %o, i8* %name, i32 %flags) #0 {
entry:
  %o.addr = alloca %struct.op*, align 8
  %name.addr = alloca i8*, align 8
  %flags.addr = alloca i32, align 4
  store %struct.op* %o, %struct.op** %o.addr, align 8
  store i8* %name, i8** %name.addr, align 8
  store i32 %flags, i32* %flags.addr, align 4
  %0 = load i8*, i8** %name.addr, align 8
  %call = call i8* (i8*, ...) @Perl_form(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.206, i64 0, i64 0), i8* %0)
  %1 = load i32, i32* %flags.addr, align 4
  %call1 = call i32 @Perl_yyerror_pv(i8* %call, i32 %1)
  %2 = load %struct.op*, %struct.op** %o.addr, align 8
  ret %struct.op* %2
}

; Function Attrs: noinline nounwind uwtable
define internal void @S_bad_type_pv(i32 %n, i8* %t, %struct.op* %o, %struct.op* %kid) #0 {
entry:
  %n.addr = alloca i32, align 4
  %t.addr = alloca i8*, align 8
  %o.addr = alloca %struct.op*, align 8
  %kid.addr = alloca %struct.op*, align 8
  %coerce = alloca %union.XOPRETANY, align 8
  store i32 %n, i32* %n.addr, align 4
  store i8* %t, i8** %t.addr, align 8
  store %struct.op* %o, %struct.op** %o.addr, align 8
  store %struct.op* %kid, %struct.op** %kid.addr, align 8
  %0 = load i32, i32* %n.addr, align 4
  %1 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type = getelementptr inbounds %struct.op, %struct.op* %1, i32 0, i32 4
  %bf.load = load i16, i16* %op_type, align 8
  %bf.clear = and i16 %bf.load, 511
  %bf.cast = zext i16 %bf.clear to i32
  %idxprom = zext i32 %bf.cast to i64
  %arrayidx = getelementptr inbounds [0 x i8*], [0 x i8*]* @PL_op_desc, i64 0, i64 %idxprom
  %2 = load i8*, i8** %arrayidx, align 8
  %3 = load i8*, i8** %t.addr, align 8
  %4 = load %struct.op*, %struct.op** %kid.addr, align 8
  %op_type1 = getelementptr inbounds %struct.op, %struct.op* %4, i32 0, i32 4
  %bf.load2 = load i16, i16* %op_type1, align 8
  %bf.clear3 = and i16 %bf.load2, 511
  %bf.cast4 = zext i16 %bf.clear3 to i32
  %cmp = icmp eq i32 %bf.cast4, 380
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %5 = load %struct.op*, %struct.op** %kid.addr, align 8
  %call = call i8* @Perl_custom_op_get_field(%struct.op* %5, i32 2)
  %coerce.dive = getelementptr inbounds %union.XOPRETANY, %union.XOPRETANY* %coerce, i32 0, i32 0
  store i8* %call, i8** %coerce.dive, align 8
  %xop_desc = bitcast %union.XOPRETANY* %coerce to i8**
  %6 = load i8*, i8** %xop_desc, align 8
  br label %cond.end

cond.false:                                       ; preds = %entry
  %7 = load %struct.op*, %struct.op** %kid.addr, align 8
  %op_type5 = getelementptr inbounds %struct.op, %struct.op* %7, i32 0, i32 4
  %bf.load6 = load i16, i16* %op_type5, align 8
  %bf.clear7 = and i16 %bf.load6, 511
  %bf.cast8 = zext i16 %bf.clear7 to i32
  %idxprom9 = zext i32 %bf.cast8 to i64
  %arrayidx10 = getelementptr inbounds [0 x i8*], [0 x i8*]* @PL_op_desc, i64 0, i64 %idxprom9
  %8 = load i8*, i8** %arrayidx10, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %6, %cond.true ], [ %8, %cond.false ]
  %call11 = call i8* (i8*, ...) @Perl_form(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.207, i64 0, i64 0), i32 %0, i8* %2, i8* %3, i8* %cond)
  %call12 = call i32 @Perl_yyerror_pv(i8* %call11, i32 0)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i1 @S_is_handle_constructor(%struct.op* %o, i32 %numargs) #0 {
entry:
  %retval = alloca i1, align 1
  %o.addr = alloca %struct.op*, align 8
  %numargs.addr = alloca i32, align 4
  store %struct.op* %o, %struct.op** %o.addr, align 8
  store i32 %numargs, i32* %numargs.addr, align 4
  %0 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type = getelementptr inbounds %struct.op, %struct.op* %0, i32 0, i32 4
  %bf.load = load i16, i16* %op_type, align 8
  %bf.clear = and i16 %bf.load, 511
  %bf.cast = zext i16 %bf.clear to i32
  switch i32 %bf.cast, label %sw.default [
    i32 222, label %sw.bb
    i32 254, label %sw.bb
    i32 240, label %sw.bb1
    i32 220, label %sw.bb1
    i32 232, label %sw.bb1
    i32 253, label %sw.bb1
    i32 305, label %sw.bb1
    i32 258, label %sw.bb1
  ]

sw.bb:                                            ; preds = %entry, %entry
  %1 = load i32, i32* %numargs.addr, align 4
  %cmp = icmp eq i32 %1, 2
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %sw.bb
  store i1 true, i1* %retval, align 1
  br label %return

if.end:                                           ; preds = %sw.bb
  br label %sw.bb1

sw.bb1:                                           ; preds = %entry, %entry, %entry, %entry, %entry, %entry, %if.end
  %2 = load i32, i32* %numargs.addr, align 4
  %cmp2 = icmp eq i32 %2, 1
  br i1 %cmp2, label %if.then3, label %if.end4

if.then3:                                         ; preds = %sw.bb1
  store i1 true, i1* %retval, align 1
  br label %return

if.end4:                                          ; preds = %sw.bb1
  br label %sw.default

sw.default:                                       ; preds = %entry, %if.end4
  store i1 false, i1* %retval, align 1
  br label %return

return:                                           ; preds = %sw.default, %if.then3, %if.then
  %3 = load i1, i1* %retval, align 1
  ret i1 %3
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.op* @S_too_few_arguments_pv(%struct.op* %o, i8* %name, i32 %flags) #0 {
entry:
  %o.addr = alloca %struct.op*, align 8
  %name.addr = alloca i8*, align 8
  %flags.addr = alloca i32, align 4
  store %struct.op* %o, %struct.op** %o.addr, align 8
  store i8* %name, i8** %name.addr, align 8
  store i32 %flags, i32* %flags.addr, align 4
  %0 = load i8*, i8** %name.addr, align 8
  %call = call i8* (i8*, ...) @Perl_form(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.208, i64 0, i64 0), i8* %0)
  %1 = load i32, i32* %flags.addr, align 4
  %call1 = call i32 @Perl_yyerror_pv(i8* %call, i32 %1)
  %2 = load %struct.op*, %struct.op** %o.addr, align 8
  ret %struct.op* %2
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_ck_glob(%struct.op* %o) #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %o.addr = alloca %struct.op*, align 8
  %gv = alloca %struct.gv*, align 8
  store %struct.op* %o, %struct.op** %o.addr, align 8
  %0 = load %struct.op*, %struct.op** %o.addr, align 8
  %call = call %struct.op* @Perl_ck_fun(%struct.op* %0)
  store %struct.op* %call, %struct.op** %o.addr, align 8
  %1 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %1, i32 0, i32 5
  %2 = load i8, i8* %op_flags, align 2
  %conv = zext i8 %2 to i32
  %and = and i32 %conv, 4
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %3 = load %struct.op*, %struct.op** %o.addr, align 8
  %4 = bitcast %struct.op* %3 to %struct.listop*
  %op_first = getelementptr inbounds %struct.listop, %struct.listop* %4, i32 0, i32 7
  %5 = load %struct.op*, %struct.op** %op_first, align 8
  %op_sibling = getelementptr inbounds %struct.op, %struct.op* %5, i32 0, i32 1
  %6 = load %struct.op*, %struct.op** %op_sibling, align 8
  %tobool1 = icmp ne %struct.op* %6, null
  br i1 %tobool1, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true
  br i1 true, label %if.end, label %if.then

cond.false:                                       ; preds = %land.lhs.true
  br i1 false, label %if.end, label %if.then

if.then:                                          ; preds = %cond.false, %cond.true
  %7 = load %struct.op*, %struct.op** %o.addr, align 8
  %call2 = call %struct.op* @Perl_newDEFSVOP()
  %call3 = call %struct.op* @Perl_op_append_elem(i32 25, %struct.op* %7, %struct.op* %call2)
  br label %if.end

if.end:                                           ; preds = %if.then, %cond.false, %cond.true, %entry
  %8 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_flags4 = getelementptr inbounds %struct.op, %struct.op* %8, i32 0, i32 5
  %9 = load i8, i8* %op_flags4, align 2
  %conv5 = zext i8 %9 to i32
  %and6 = and i32 %conv5, 128
  %tobool7 = icmp ne i32 %and6, 0
  br i1 %tobool7, label %if.else, label %land.lhs.true8

land.lhs.true8:                                   ; preds = %if.end
  %call9 = call %struct.gv* @Perl_gv_override(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.114, i64 0, i64 0), i64 4)
  store %struct.gv* %call9, %struct.gv** %gv, align 8
  %tobool10 = icmp ne %struct.gv* %call9, null
  br i1 %tobool10, label %if.then11, label %if.else

if.then11:                                        ; preds = %land.lhs.true8
  %10 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_flags12 = getelementptr inbounds %struct.op, %struct.op* %10, i32 0, i32 5
  %11 = load i8, i8* %op_flags12, align 2
  %conv13 = zext i8 %11 to i32
  %or = or i32 %conv13, 128
  %conv14 = trunc i32 %or to i8
  store i8 %conv14, i8* %op_flags12, align 2
  %call15 = call i64 @Perl_pad_alloc(i32 25, i32 131072)
  %12 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_targ = getelementptr inbounds %struct.op, %struct.op* %12, i32 0, i32 3
  store i64 %call15, i64* %op_targ, align 8
  %13 = load %struct.gv*, %struct.gv** %gv, align 8
  %14 = load %struct.op*, %struct.op** %o.addr, align 8
  %call16 = call %struct.op* @S_new_entersubop(%struct.gv* %13, %struct.op* %14)
  store %struct.op* %call16, %struct.op** %o.addr, align 8
  %15 = load %struct.op*, %struct.op** %o.addr, align 8
  %call17 = call %struct.op* @Perl_newUNOP(i32 0, i32 0, %struct.op* %15)
  store %struct.op* %call17, %struct.op** %o.addr, align 8
  %16 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_targ18 = getelementptr inbounds %struct.op, %struct.op* %16, i32 0, i32 3
  store i64 25, i64* %op_targ18, align 8
  %17 = load %struct.op*, %struct.op** %o.addr, align 8
  store %struct.op* %17, %struct.op** %retval, align 8
  br label %return

if.else:                                          ; preds = %land.lhs.true8, %if.end
  %18 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_flags19 = getelementptr inbounds %struct.op, %struct.op* %18, i32 0, i32 5
  %19 = load i8, i8* %op_flags19, align 2
  %conv20 = zext i8 %19 to i32
  %and21 = and i32 %conv20, -129
  %conv22 = trunc i32 %and21 to i8
  store i8 %conv22, i8* %op_flags19, align 2
  br label %if.end23

if.end23:                                         ; preds = %if.else
  %20 = load void ()*, void ()** @PL_globhook, align 8
  %tobool24 = icmp ne void ()* %20, null
  br i1 %tobool24, label %if.end27, label %if.then25

if.then25:                                        ; preds = %if.end23
  call void @Perl_push_scope()
  %call26 = call %struct.sv* @Perl_newSVpvn(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.115, i64 0, i64 0), i64 10)
  call void (i32, %struct.sv*, %struct.sv*, ...) @Perl_load_module(i32 2, %struct.sv* %call26, %struct.sv* null, i8* null, i8* null)
  call void @Perl_pop_scope()
  br label %if.end27

if.end27:                                         ; preds = %if.then25, %if.end23
  %call28 = call %struct.sv* @Perl_newSV(i64 0)
  %21 = bitcast %struct.sv* %call28 to %struct.gv*
  store %struct.gv* %21, %struct.gv** %gv, align 8
  %22 = load %struct.gv*, %struct.gv** %gv, align 8
  call void @Perl_gv_init_pvn(%struct.gv* %22, %struct.hv* null, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.17, i64 0, i64 0), i64 0, i32 0)
  %23 = load %struct.gv*, %struct.gv** %gv, align 8
  %call29 = call %struct.gv* @Perl_gv_add_by_type(%struct.gv* %23, i32 15)
  %24 = load %struct.op*, %struct.op** %o.addr, align 8
  %25 = load %struct.gv*, %struct.gv** %gv, align 8
  %call30 = call %struct.op* @Perl_newGVOP(i32 7, i32 0, %struct.gv* %25)
  %call31 = call %struct.op* @Perl_op_append_elem(i32 25, %struct.op* %24, %struct.op* %call30)
  %26 = load %struct.gv*, %struct.gv** %gv, align 8
  %27 = bitcast %struct.gv* %26 to i8*
  %28 = bitcast i8* %27 to %struct.sv*
  call void @S_SvREFCNT_dec_NN(%struct.sv* %28)
  %29 = load %struct.op*, %struct.op** %o.addr, align 8
  %call32 = call %struct.op* @S_scalarkids(%struct.op* %29)
  %30 = load %struct.op*, %struct.op** %o.addr, align 8
  store %struct.op* %30, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %if.end27, %if.then11
  %31 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %31
}

declare dso_local %struct.sv* @Perl_newSV(i64) #3

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_ck_grep(%struct.op* %o) #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %o.addr = alloca %struct.op*, align 8
  %gwop = alloca %struct.logop*, align 8
  %kid = alloca %struct.op*, align 8
  %type = alloca i16, align 2
  %offset = alloca i64, align 8
  store %struct.op* %o, %struct.op** %o.addr, align 8
  %0 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type = getelementptr inbounds %struct.op, %struct.op* %0, i32 0, i32 4
  %bf.load = load i16, i16* %op_type, align 8
  %bf.clear = and i16 %bf.load, 511
  %bf.cast = zext i16 %bf.clear to i32
  %cmp = icmp eq i32 %bf.cast, 169
  %1 = zext i1 %cmp to i64
  %cond = select i1 %cmp, i32 170, i32 172
  %conv = trunc i32 %cond to i16
  store i16 %conv, i16* %type, align 2
  %2 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %2, i32 0, i32 5
  %3 = load i8, i8* %op_flags, align 2
  %conv1 = zext i8 %3 to i32
  %and = and i32 %conv1, 64
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.end20

if.then:                                          ; preds = %entry
  %4 = load %struct.op*, %struct.op** %o.addr, align 8
  %5 = bitcast %struct.op* %4 to %struct.listop*
  %op_first = getelementptr inbounds %struct.listop, %struct.listop* %5, i32 0, i32 7
  %6 = load %struct.op*, %struct.op** %op_first, align 8
  %op_sibling = getelementptr inbounds %struct.op, %struct.op* %6, i32 0, i32 1
  %7 = load %struct.op*, %struct.op** %op_sibling, align 8
  %add.ptr = getelementptr inbounds %struct.op, %struct.op* %7, i64 0
  %8 = bitcast %struct.op* %add.ptr to %struct.unop*
  %op_first2 = getelementptr inbounds %struct.unop, %struct.unop* %8, i32 0, i32 7
  %9 = load %struct.op*, %struct.op** %op_first2, align 8
  store %struct.op* %9, %struct.op** %kid, align 8
  %10 = load %struct.op*, %struct.op** %kid, align 8
  %op_type3 = getelementptr inbounds %struct.op, %struct.op* %10, i32 0, i32 4
  %bf.load4 = load i16, i16* %op_type3, align 8
  %bf.clear5 = and i16 %bf.load4, 511
  %bf.cast6 = zext i16 %bf.clear5 to i32
  %cmp7 = icmp ne i32 %bf.cast6, 198
  br i1 %cmp7, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %if.then
  %11 = load %struct.op*, %struct.op** %kid, align 8
  %op_type9 = getelementptr inbounds %struct.op, %struct.op* %11, i32 0, i32 4
  %bf.load10 = load i16, i16* %op_type9, align 8
  %bf.clear11 = and i16 %bf.load10, 511
  %bf.cast12 = zext i16 %bf.clear11 to i32
  %cmp13 = icmp ne i32 %bf.cast12, 197
  br i1 %cmp13, label %if.then15, label %if.end

if.then15:                                        ; preds = %land.lhs.true
  %12 = load %struct.op*, %struct.op** %o.addr, align 8
  %call = call %struct.op* @S_no_fh_allowed(%struct.op* %12)
  store %struct.op* %call, %struct.op** %retval, align 8
  br label %return

if.end:                                           ; preds = %land.lhs.true, %if.then
  %13 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_flags16 = getelementptr inbounds %struct.op, %struct.op* %13, i32 0, i32 5
  %14 = load i8, i8* %op_flags16, align 2
  %conv17 = zext i8 %14 to i32
  %and18 = and i32 %conv17, -65
  %conv19 = trunc i32 %and18 to i8
  store i8 %conv19, i8* %op_flags16, align 2
  br label %if.end20

if.end20:                                         ; preds = %if.end, %entry
  %15 = load %struct.op*, %struct.op** %o.addr, align 8
  %16 = bitcast %struct.op* %15 to %struct.listop*
  %op_first21 = getelementptr inbounds %struct.listop, %struct.listop* %16, i32 0, i32 7
  %17 = load %struct.op*, %struct.op** %op_first21, align 8
  %op_sibling22 = getelementptr inbounds %struct.op, %struct.op* %17, i32 0, i32 1
  %18 = load %struct.op*, %struct.op** %op_sibling22, align 8
  %add.ptr23 = getelementptr inbounds %struct.op, %struct.op* %18, i64 0
  store %struct.op* %add.ptr23, %struct.op** %kid, align 8
  %19 = load i16, i16* %type, align 2
  %conv24 = zext i16 %19 to i32
  %cmp25 = icmp eq i32 %conv24, 172
  br i1 %cmp25, label %if.then27, label %if.else

if.then27:                                        ; preds = %if.end20
  %20 = load %struct.op*, %struct.op** %kid, align 8
  %call28 = call %struct.op* @Perl_list(%struct.op* %20)
  br label %if.end30

if.else:                                          ; preds = %if.end20
  %21 = load %struct.op*, %struct.op** %kid, align 8
  %call29 = call %struct.op* @Perl_scalar(%struct.op* %21)
  br label %if.end30

if.end30:                                         ; preds = %if.else, %if.then27
  %22 = load %struct.op*, %struct.op** %o.addr, align 8
  %call31 = call %struct.op* @Perl_ck_fun(%struct.op* %22)
  store %struct.op* %call31, %struct.op** %o.addr, align 8
  %23 = load %struct.yy_parser*, %struct.yy_parser** @PL_parser, align 8
  %tobool32 = icmp ne %struct.yy_parser* %23, null
  br i1 %tobool32, label %land.lhs.true33, label %if.end37

land.lhs.true33:                                  ; preds = %if.end30
  %24 = load %struct.yy_parser*, %struct.yy_parser** @PL_parser, align 8
  %error_count = getelementptr inbounds %struct.yy_parser, %struct.yy_parser* %24, i32 0, i32 44
  %25 = load i8, i8* %error_count, align 1
  %conv34 = zext i8 %25 to i32
  %tobool35 = icmp ne i32 %conv34, 0
  br i1 %tobool35, label %if.then36, label %if.end37

if.then36:                                        ; preds = %land.lhs.true33
  %26 = load %struct.op*, %struct.op** %o.addr, align 8
  store %struct.op* %26, %struct.op** %retval, align 8
  br label %return

if.end37:                                         ; preds = %land.lhs.true33, %if.end30
  %27 = load %struct.op*, %struct.op** %o.addr, align 8
  %28 = bitcast %struct.op* %27 to %struct.listop*
  %op_first38 = getelementptr inbounds %struct.listop, %struct.listop* %28, i32 0, i32 7
  %29 = load %struct.op*, %struct.op** %op_first38, align 8
  %op_sibling39 = getelementptr inbounds %struct.op, %struct.op* %29, i32 0, i32 1
  %30 = load %struct.op*, %struct.op** %op_sibling39, align 8
  %add.ptr40 = getelementptr inbounds %struct.op, %struct.op* %30, i64 0
  store %struct.op* %add.ptr40, %struct.op** %kid, align 8
  %31 = load %struct.op*, %struct.op** %kid, align 8
  %op_type41 = getelementptr inbounds %struct.op, %struct.op* %31, i32 0, i32 4
  %bf.load42 = load i16, i16* %op_type41, align 8
  %bf.clear43 = and i16 %bf.load42, 511
  %bf.cast44 = zext i16 %bf.clear43 to i32
  %cmp45 = icmp ne i32 %bf.cast44, 0
  br i1 %cmp45, label %if.then47, label %if.end52

if.then47:                                        ; preds = %if.end37
  %32 = load %struct.op*, %struct.op** %kid, align 8
  %op_type48 = getelementptr inbounds %struct.op, %struct.op* %32, i32 0, i32 4
  %bf.load49 = load i16, i16* %op_type48, align 8
  %bf.clear50 = and i16 %bf.load49, 511
  %bf.cast51 = zext i16 %bf.clear50 to i32
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.116, i64 0, i64 0), i32 %bf.cast51)
  br label %if.end52

if.end52:                                         ; preds = %if.then47, %if.end37
  %33 = load %struct.op*, %struct.op** %kid, align 8
  %34 = bitcast %struct.op* %33 to %struct.unop*
  %op_first53 = getelementptr inbounds %struct.unop, %struct.unop* %34, i32 0, i32 7
  %35 = load %struct.op*, %struct.op** %op_first53, align 8
  store %struct.op* %35, %struct.op** %kid, align 8
  %36 = load i16, i16* %type, align 2
  %conv54 = zext i16 %36 to i32
  %37 = load %struct.op*, %struct.op** %o.addr, align 8
  %38 = load %struct.op*, %struct.op** %kid, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %38, i32 0, i32 0
  %39 = load %struct.op*, %struct.op** %op_next, align 8
  %tobool55 = icmp ne %struct.op* %39, null
  br i1 %tobool55, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end52
  %40 = load %struct.op*, %struct.op** %kid, align 8
  %op_next56 = getelementptr inbounds %struct.op, %struct.op* %40, i32 0, i32 0
  %41 = load %struct.op*, %struct.op** %op_next56, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.end52
  %42 = load %struct.op*, %struct.op** %kid, align 8
  %call57 = call %struct.op* @Perl_op_linklist(%struct.op* %42)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond58 = phi %struct.op* [ %41, %cond.true ], [ %call57, %cond.false ]
  %call59 = call %struct.logop* @S_alloc_LOGOP(i32 %conv54, %struct.op* %37, %struct.op* %cond58)
  store %struct.logop* %call59, %struct.logop** %gwop, align 8
  %43 = load %struct.logop*, %struct.logop** %gwop, align 8
  %44 = bitcast %struct.logop* %43 to %struct.op*
  %45 = load %struct.op*, %struct.op** %kid, align 8
  %op_next60 = getelementptr inbounds %struct.op, %struct.op* %45, i32 0, i32 0
  store %struct.op* %44, %struct.op** %op_next60, align 8
  %call61 = call i64 @Perl_pad_findmy_pvn(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.7, i64 0, i64 0), i64 2, i32 0)
  store i64 %call61, i64* %offset, align 8
  %46 = load i64, i64* %offset, align 8
  %cmp62 = icmp eq i64 %46, -1
  br i1 %cmp62, label %if.then65, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %cond.end
  %47 = load %struct.padnamelist*, %struct.padnamelist** @PL_comppad_name, align 8
  %xpadnl_alloc = getelementptr inbounds %struct.padnamelist, %struct.padnamelist* %47, i32 0, i32 1
  %48 = load %struct.padname**, %struct.padname*** %xpadnl_alloc, align 8
  %49 = load i64, i64* %offset, align 8
  %arrayidx = getelementptr inbounds %struct.padname*, %struct.padname** %48, i64 %49
  %50 = load %struct.padname*, %struct.padname** %arrayidx, align 8
  %xpadn_ourstash = getelementptr inbounds %struct.padname, %struct.padname* %50, i32 0, i32 1
  %51 = load %struct.hv*, %struct.hv** %xpadn_ourstash, align 8
  %tobool64 = icmp ne %struct.hv* %51, null
  br i1 %tobool64, label %if.then65, label %if.else69

if.then65:                                        ; preds = %lor.lhs.false, %cond.end
  %52 = load %struct.logop*, %struct.logop** %gwop, align 8
  %op_private = getelementptr inbounds %struct.logop, %struct.logop* %52, i32 0, i32 6
  store i8 0, i8* %op_private, align 1
  %53 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_private66 = getelementptr inbounds %struct.op, %struct.op* %53, i32 0, i32 6
  store i8 0, i8* %op_private66, align 1
  %54 = load i16, i16* %type, align 2
  %conv67 = zext i16 %54 to i32
  %call68 = call i64 @Perl_pad_alloc(i32 %conv67, i32 131072)
  %55 = load %struct.logop*, %struct.logop** %gwop, align 8
  %op_targ = getelementptr inbounds %struct.logop, %struct.logop* %55, i32 0, i32 3
  store i64 %call68, i64* %op_targ, align 8
  br label %if.end74

if.else69:                                        ; preds = %lor.lhs.false
  %56 = load %struct.logop*, %struct.logop** %gwop, align 8
  %op_private70 = getelementptr inbounds %struct.logop, %struct.logop* %56, i32 0, i32 6
  store i8 2, i8* %op_private70, align 1
  %57 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_private71 = getelementptr inbounds %struct.op, %struct.op* %57, i32 0, i32 6
  store i8 2, i8* %op_private71, align 1
  %58 = load i64, i64* %offset, align 8
  %59 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_targ72 = getelementptr inbounds %struct.op, %struct.op* %59, i32 0, i32 3
  store i64 %58, i64* %op_targ72, align 8
  %60 = load %struct.logop*, %struct.logop** %gwop, align 8
  %op_targ73 = getelementptr inbounds %struct.logop, %struct.logop* %60, i32 0, i32 3
  store i64 %58, i64* %op_targ73, align 8
  br label %if.end74

if.end74:                                         ; preds = %if.else69, %if.then65
  %61 = load %struct.op*, %struct.op** %o.addr, align 8
  %62 = bitcast %struct.op* %61 to %struct.listop*
  %op_first75 = getelementptr inbounds %struct.listop, %struct.listop* %62, i32 0, i32 7
  %63 = load %struct.op*, %struct.op** %op_first75, align 8
  %op_sibling76 = getelementptr inbounds %struct.op, %struct.op* %63, i32 0, i32 1
  %64 = load %struct.op*, %struct.op** %op_sibling76, align 8
  %add.ptr77 = getelementptr inbounds %struct.op, %struct.op* %64, i64 0
  store %struct.op* %add.ptr77, %struct.op** %kid, align 8
  %65 = load %struct.op*, %struct.op** %kid, align 8
  %op_sibling78 = getelementptr inbounds %struct.op, %struct.op* %65, i32 0, i32 1
  %66 = load %struct.op*, %struct.op** %op_sibling78, align 8
  %add.ptr79 = getelementptr inbounds %struct.op, %struct.op* %66, i64 0
  store %struct.op* %add.ptr79, %struct.op** %kid, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end74
  %67 = load %struct.op*, %struct.op** %kid, align 8
  %tobool80 = icmp ne %struct.op* %67, null
  br i1 %tobool80, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %68 = load %struct.op*, %struct.op** %kid, align 8
  %call81 = call %struct.op* @Perl_op_lvalue_flags(%struct.op* %68, i32 169, i32 0)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %69 = load %struct.op*, %struct.op** %kid, align 8
  %op_sibling82 = getelementptr inbounds %struct.op, %struct.op* %69, i32 0, i32 1
  %70 = load %struct.op*, %struct.op** %op_sibling82, align 8
  %add.ptr83 = getelementptr inbounds %struct.op, %struct.op* %70, i64 0
  store %struct.op* %add.ptr83, %struct.op** %kid, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %71 = load %struct.logop*, %struct.logop** %gwop, align 8
  %72 = bitcast %struct.logop* %71 to %struct.op*
  store %struct.op* %72, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %for.end, %if.then36, %if.then15
  %73 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %73
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_ck_index(%struct.op* %o) #0 {
entry:
  %o.addr = alloca %struct.op*, align 8
  %kid = alloca %struct.op*, align 8
  %save_taint = alloca i8, align 1
  %sv = alloca %struct.sv*, align 8
  store %struct.op* %o, %struct.op** %o.addr, align 8
  %0 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %0, i32 0, i32 5
  %1 = load i8, i8* %op_flags, align 2
  %conv = zext i8 %1 to i32
  %and = and i32 %conv, 4
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.end55

if.then:                                          ; preds = %entry
  %2 = load %struct.op*, %struct.op** %o.addr, align 8
  %3 = bitcast %struct.op* %2 to %struct.listop*
  %op_first = getelementptr inbounds %struct.listop, %struct.listop* %3, i32 0, i32 7
  %4 = load %struct.op*, %struct.op** %op_first, align 8
  %op_sibling = getelementptr inbounds %struct.op, %struct.op* %4, i32 0, i32 1
  %5 = load %struct.op*, %struct.op** %op_sibling, align 8
  %add.ptr = getelementptr inbounds %struct.op, %struct.op* %5, i64 0
  store %struct.op* %add.ptr, %struct.op** %kid, align 8
  %6 = load %struct.op*, %struct.op** %kid, align 8
  %tobool1 = icmp ne %struct.op* %6, null
  br i1 %tobool1, label %if.then2, label %if.end

if.then2:                                         ; preds = %if.then
  %7 = load %struct.op*, %struct.op** %kid, align 8
  %op_sibling3 = getelementptr inbounds %struct.op, %struct.op* %7, i32 0, i32 1
  %8 = load %struct.op*, %struct.op** %op_sibling3, align 8
  %add.ptr4 = getelementptr inbounds %struct.op, %struct.op* %8, i64 0
  store %struct.op* %add.ptr4, %struct.op** %kid, align 8
  br label %if.end

if.end:                                           ; preds = %if.then2, %if.then
  %9 = load %struct.op*, %struct.op** %kid, align 8
  %tobool5 = icmp ne %struct.op* %9, null
  br i1 %tobool5, label %land.lhs.true, label %if.end54

land.lhs.true:                                    ; preds = %if.end
  %10 = load %struct.op*, %struct.op** %kid, align 8
  %op_type = getelementptr inbounds %struct.op, %struct.op* %10, i32 0, i32 4
  %bf.load = load i16, i16* %op_type, align 8
  %bf.clear = and i16 %bf.load, 511
  %bf.cast = zext i16 %bf.clear to i32
  %cmp = icmp eq i32 %bf.cast, 5
  br i1 %cmp, label %if.then7, label %if.end54

if.then7:                                         ; preds = %land.lhs.true
  %11 = load i8, i8* @PL_tainted, align 1
  %tobool8 = trunc i8 %11 to i1
  %frombool = zext i1 %tobool8 to i8
  store i8 %frombool, i8* %save_taint, align 1
  %12 = load %struct.op*, %struct.op** %kid, align 8
  %13 = bitcast %struct.op* %12 to %struct.svop*
  %op_sv = getelementptr inbounds %struct.svop, %struct.svop* %13, i32 0, i32 7
  %14 = load %struct.sv*, %struct.sv** %op_sv, align 8
  store %struct.sv* %14, %struct.sv** %sv, align 8
  %15 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %15, i32 0, i32 2
  %16 = load i32, i32* %sv_flags, align 4
  %and9 = and i32 %16, 1024
  %tobool10 = icmp ne i32 %and9, 0
  br i1 %tobool10, label %lor.lhs.false, label %land.lhs.true14

lor.lhs.false:                                    ; preds = %if.then7
  %17 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags11 = getelementptr inbounds %struct.sv, %struct.sv* %17, i32 0, i32 2
  %18 = load i32, i32* %sv_flags11, align 4
  %and12 = and i32 %18, 12288
  %tobool13 = icmp ne i32 %and12, 0
  br i1 %tobool13, label %land.lhs.true14, label %if.end36

land.lhs.true14:                                  ; preds = %lor.lhs.false, %if.then7
  %19 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags15 = getelementptr inbounds %struct.sv, %struct.sv* %19, i32 0, i32 2
  %20 = load i32, i32* %sv_flags15, align 4
  %and16 = and i32 %20, 65280
  %tobool17 = icmp ne i32 %and16, 0
  br i1 %tobool17, label %land.lhs.true28, label %lor.lhs.false18

lor.lhs.false18:                                  ; preds = %land.lhs.true14
  %21 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags19 = getelementptr inbounds %struct.sv, %struct.sv* %21, i32 0, i32 2
  %22 = load i32, i32* %sv_flags19, align 4
  %and20 = and i32 %22, 255
  %cmp21 = icmp eq i32 %and20, 8
  br i1 %cmp21, label %land.lhs.true28, label %lor.lhs.false23

lor.lhs.false23:                                  ; preds = %lor.lhs.false18
  %23 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags24 = getelementptr inbounds %struct.sv, %struct.sv* %23, i32 0, i32 2
  %24 = load i32, i32* %sv_flags24, align 4
  %and25 = and i32 %24, 16826623
  %cmp26 = icmp eq i32 %and25, 16777226
  br i1 %cmp26, label %land.lhs.true28, label %if.end36

land.lhs.true28:                                  ; preds = %lor.lhs.false23, %lor.lhs.false18, %land.lhs.true14
  %25 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags29 = getelementptr inbounds %struct.sv, %struct.sv* %25, i32 0, i32 2
  %26 = load i32, i32* %sv_flags29, align 4
  %and30 = and i32 %26, 2048
  %tobool31 = icmp ne i32 %and30, 0
  br i1 %tobool31, label %if.end36, label %if.then32

if.then32:                                        ; preds = %land.lhs.true28
  %call = call %struct.sv* @Perl_newSV(i64 0)
  store %struct.sv* %call, %struct.sv** %sv, align 8
  %27 = load %struct.sv*, %struct.sv** %sv, align 8
  %28 = load %struct.op*, %struct.op** %kid, align 8
  %29 = bitcast %struct.op* %28 to %struct.svop*
  %op_sv33 = getelementptr inbounds %struct.svop, %struct.svop* %29, i32 0, i32 7
  %30 = load %struct.sv*, %struct.sv** %op_sv33, align 8
  call void @Perl_sv_copypv_flags(%struct.sv* %27, %struct.sv* %30, i32 2)
  %31 = load %struct.op*, %struct.op** %kid, align 8
  %32 = bitcast %struct.op* %31 to %struct.svop*
  %op_sv34 = getelementptr inbounds %struct.svop, %struct.svop* %32, i32 0, i32 7
  %33 = load %struct.sv*, %struct.sv** %op_sv34, align 8
  %34 = bitcast %struct.sv* %33 to i8*
  %35 = bitcast i8* %34 to %struct.sv*
  call void @S_SvREFCNT_dec_NN(%struct.sv* %35)
  %36 = load %struct.sv*, %struct.sv** %sv, align 8
  %37 = load %struct.op*, %struct.op** %kid, align 8
  %38 = bitcast %struct.op* %37 to %struct.svop*
  %op_sv35 = getelementptr inbounds %struct.svop, %struct.svop* %38, i32 0, i32 7
  store %struct.sv* %36, %struct.sv** %op_sv35, align 8
  br label %if.end36

if.end36:                                         ; preds = %if.then32, %land.lhs.true28, %lor.lhs.false23, %lor.lhs.false
  %39 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags37 = getelementptr inbounds %struct.sv, %struct.sv* %39, i32 0, i32 2
  %40 = load i32, i32* %sv_flags37, align 4
  %and38 = and i32 %40, 65280
  %tobool39 = icmp ne i32 %and38, 0
  br i1 %tobool39, label %if.then50, label %lor.lhs.false40

lor.lhs.false40:                                  ; preds = %if.end36
  %41 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags41 = getelementptr inbounds %struct.sv, %struct.sv* %41, i32 0, i32 2
  %42 = load i32, i32* %sv_flags41, align 4
  %and42 = and i32 %42, 255
  %cmp43 = icmp eq i32 %and42, 8
  br i1 %cmp43, label %if.then50, label %lor.lhs.false45

lor.lhs.false45:                                  ; preds = %lor.lhs.false40
  %43 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags46 = getelementptr inbounds %struct.sv, %struct.sv* %43, i32 0, i32 2
  %44 = load i32, i32* %sv_flags46, align 4
  %and47 = and i32 %44, 16826623
  %cmp48 = icmp eq i32 %and47, 16777226
  br i1 %cmp48, label %if.then50, label %if.end51

if.then50:                                        ; preds = %lor.lhs.false45, %lor.lhs.false40, %if.end36
  %45 = load %struct.sv*, %struct.sv** %sv, align 8
  call void @Perl_fbm_compile(%struct.sv* %45, i32 0)
  br label %if.end51

if.end51:                                         ; preds = %if.then50, %lor.lhs.false45
  %46 = load i8, i8* %save_taint, align 1
  %tobool52 = trunc i8 %46 to i1
  %frombool53 = zext i1 %tobool52 to i8
  store i8 %frombool53, i8* @PL_tainted, align 1
  br label %if.end54

if.end54:                                         ; preds = %if.end51, %land.lhs.true, %if.end
  br label %if.end55

if.end55:                                         ; preds = %if.end54, %entry
  %47 = load %struct.op*, %struct.op** %o.addr, align 8
  %call56 = call %struct.op* @Perl_ck_fun(%struct.op* %47)
  ret %struct.op* %call56
}

declare dso_local void @Perl_sv_copypv_flags(%struct.sv*, %struct.sv*, i32) #3

declare dso_local void @Perl_fbm_compile(%struct.sv*, i32) #3

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_ck_lfun(%struct.op* %o) #0 {
entry:
  %o.addr = alloca %struct.op*, align 8
  %type = alloca i16, align 2
  store %struct.op* %o, %struct.op** %o.addr, align 8
  %0 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type = getelementptr inbounds %struct.op, %struct.op* %0, i32 0, i32 4
  %bf.load = load i16, i16* %op_type, align 8
  %bf.clear = and i16 %bf.load, 511
  %bf.cast = zext i16 %bf.clear to i32
  %conv = trunc i32 %bf.cast to i16
  store i16 %conv, i16* %type, align 2
  %1 = load %struct.op*, %struct.op** %o.addr, align 8
  %call = call %struct.op* @Perl_ck_fun(%struct.op* %1)
  %2 = load i16, i16* %type, align 2
  %conv1 = zext i16 %2 to i32
  %call2 = call %struct.op* @S_modkids(%struct.op* %call, i32 %conv1)
  ret %struct.op* %call2
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_ck_defined(%struct.op* %o) #0 {
entry:
  %o.addr = alloca %struct.op*, align 8
  store %struct.op* %o, %struct.op** %o.addr, align 8
  %0 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %0, i32 0, i32 5
  %1 = load i8, i8* %op_flags, align 2
  %conv = zext i8 %1 to i32
  %and = and i32 %conv, 4
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.op*, %struct.op** %o.addr, align 8
  %3 = bitcast %struct.op* %2 to %struct.unop*
  %op_first = getelementptr inbounds %struct.unop, %struct.unop* %3, i32 0, i32 7
  %4 = load %struct.op*, %struct.op** %op_first, align 8
  %op_type = getelementptr inbounds %struct.op, %struct.op* %4, i32 0, i32 4
  %bf.load = load i16, i16* %op_type, align 8
  %bf.clear = and i16 %bf.load, 511
  %bf.cast = zext i16 %bf.clear to i32
  switch i32 %bf.cast, label %sw.default [
    i32 135, label %sw.bb
    i32 10, label %sw.bb
    i32 149, label %sw.bb1
    i32 11, label %sw.bb1
  ]

sw.bb:                                            ; preds = %if.then, %if.then
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([72 x i8], [72 x i8]* @.str.117, i64 0, i64 0))
  br label %sw.epilog

sw.bb1:                                           ; preds = %if.then, %if.then
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([72 x i8], [72 x i8]* @.str.118, i64 0, i64 0))
  br label %sw.epilog

sw.default:                                       ; preds = %if.then
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %sw.bb1, %sw.bb
  br label %if.end

if.end:                                           ; preds = %sw.epilog, %entry
  %5 = load %struct.op*, %struct.op** %o.addr, align 8
  %call = call %struct.op* @Perl_ck_rfun(%struct.op* %5)
  ret %struct.op* %call
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_ck_rfun(%struct.op* %o) #0 {
entry:
  %o.addr = alloca %struct.op*, align 8
  %type = alloca i16, align 2
  store %struct.op* %o, %struct.op** %o.addr, align 8
  %0 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type = getelementptr inbounds %struct.op, %struct.op* %0, i32 0, i32 4
  %bf.load = load i16, i16* %op_type, align 8
  %bf.clear = and i16 %bf.load, 511
  %bf.cast = zext i16 %bf.clear to i32
  %conv = trunc i32 %bf.cast to i16
  store i16 %conv, i16* %type, align 2
  %1 = load %struct.op*, %struct.op** %o.addr, align 8
  %call = call %struct.op* @Perl_ck_fun(%struct.op* %1)
  %2 = load i16, i16* %type, align 2
  %conv1 = zext i16 %2 to i32
  %call2 = call %struct.op* @S_refkids(%struct.op* %call, i32 %conv1)
  ret %struct.op* %call2
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_ck_readline(%struct.op* %o) #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %o.addr = alloca %struct.op*, align 8
  %kid = alloca %struct.op*, align 8
  %newop = alloca %struct.op*, align 8
  store %struct.op* %o, %struct.op** %o.addr, align 8
  %0 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %0, i32 0, i32 5
  %1 = load i8, i8* %op_flags, align 2
  %conv = zext i8 %1 to i32
  %and = and i32 %conv, 4
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %2 = load %struct.op*, %struct.op** %o.addr, align 8
  %3 = bitcast %struct.op* %2 to %struct.listop*
  %op_first = getelementptr inbounds %struct.listop, %struct.listop* %3, i32 0, i32 7
  %4 = load %struct.op*, %struct.op** %op_first, align 8
  store %struct.op* %4, %struct.op** %kid, align 8
  %5 = load %struct.op*, %struct.op** %kid, align 8
  %op_type = getelementptr inbounds %struct.op, %struct.op* %5, i32 0, i32 4
  %bf.load = load i16, i16* %op_type, align 8
  %bf.clear = and i16 %bf.load, 511
  %bf.cast = zext i16 %bf.clear to i32
  %cmp = icmp eq i32 %bf.cast, 14
  br i1 %cmp, label %if.then2, label %if.end

if.then2:                                         ; preds = %if.then
  %6 = load %struct.op*, %struct.op** %kid, align 8
  %op_private = getelementptr inbounds %struct.op, %struct.op* %6, i32 0, i32 6
  %7 = load i8, i8* %op_private, align 1
  %conv3 = zext i8 %7 to i32
  %or = or i32 %conv3, 64
  %conv4 = trunc i32 %or to i8
  store i8 %conv4, i8* %op_private, align 1
  br label %if.end

if.end:                                           ; preds = %if.then2, %if.then
  br label %if.end6

if.else:                                          ; preds = %entry
  %8 = load %struct.gv*, %struct.gv** @PL_argvgv, align 8
  %call = call %struct.op* @Perl_newGVOP(i32 7, i32 0, %struct.gv* %8)
  %call5 = call %struct.op* @Perl_newUNOP(i32 26, i32 0, %struct.op* %call)
  store %struct.op* %call5, %struct.op** %newop, align 8
  %9 = load %struct.op*, %struct.op** %o.addr, align 8
  call void @Perl_op_free(%struct.op* %9)
  %10 = load %struct.op*, %struct.op** %newop, align 8
  store %struct.op* %10, %struct.op** %retval, align 8
  br label %return

if.end6:                                          ; preds = %if.end
  %11 = load %struct.op*, %struct.op** %o.addr, align 8
  store %struct.op* %11, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %if.end6, %if.else
  %12 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %12
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.op* @S_refkids(%struct.op* %o, i32 %type) #0 {
entry:
  %o.addr = alloca %struct.op*, align 8
  %type.addr = alloca i32, align 4
  %kid = alloca %struct.op*, align 8
  store %struct.op* %o, %struct.op** %o.addr, align 8
  store i32 %type, i32* %type.addr, align 4
  %0 = load %struct.op*, %struct.op** %o.addr, align 8
  %tobool = icmp ne %struct.op* %0, null
  br i1 %tobool, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %1 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %1, i32 0, i32 5
  %2 = load i8, i8* %op_flags, align 2
  %conv = zext i8 %2 to i32
  %and = and i32 %conv, 4
  %tobool1 = icmp ne i32 %and, 0
  br i1 %tobool1, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %3 = load %struct.op*, %struct.op** %o.addr, align 8
  %4 = bitcast %struct.op* %3 to %struct.listop*
  %op_first = getelementptr inbounds %struct.listop, %struct.listop* %4, i32 0, i32 7
  %5 = load %struct.op*, %struct.op** %op_first, align 8
  store %struct.op* %5, %struct.op** %kid, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then
  %6 = load %struct.op*, %struct.op** %kid, align 8
  %tobool2 = icmp ne %struct.op* %6, null
  br i1 %tobool2, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %7 = load %struct.op*, %struct.op** %kid, align 8
  %8 = load i32, i32* %type.addr, align 4
  %call = call %struct.op* @Perl_doref(%struct.op* %7, i32 %8, i1 zeroext true)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %9 = load %struct.op*, %struct.op** %kid, align 8
  %op_sibling = getelementptr inbounds %struct.op, %struct.op* %9, i32 0, i32 1
  %10 = load %struct.op*, %struct.op** %op_sibling, align 8
  %add.ptr = getelementptr inbounds %struct.op, %struct.op* %10, i64 0
  store %struct.op* %add.ptr, %struct.op** %kid, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end

if.end:                                           ; preds = %for.end, %land.lhs.true, %entry
  %11 = load %struct.op*, %struct.op** %o.addr, align 8
  ret %struct.op* %11
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_ck_listiob(%struct.op* %o) #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %o.addr = alloca %struct.op*, align 8
  %kid = alloca %struct.op*, align 8
  store %struct.op* %o, %struct.op** %o.addr, align 8
  %0 = load %struct.op*, %struct.op** %o.addr, align 8
  %1 = bitcast %struct.op* %0 to %struct.listop*
  %op_first = getelementptr inbounds %struct.listop, %struct.listop* %1, i32 0, i32 7
  %2 = load %struct.op*, %struct.op** %op_first, align 8
  store %struct.op* %2, %struct.op** %kid, align 8
  %3 = load %struct.op*, %struct.op** %kid, align 8
  %tobool = icmp ne %struct.op* %3, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %4 = load %struct.op*, %struct.op** %o.addr, align 8
  %call = call %struct.op* @S_force_list(%struct.op* %4, i1 zeroext true)
  store %struct.op* %call, %struct.op** %o.addr, align 8
  %5 = load %struct.op*, %struct.op** %o.addr, align 8
  %6 = bitcast %struct.op* %5 to %struct.listop*
  %op_first1 = getelementptr inbounds %struct.listop, %struct.listop* %6, i32 0, i32 7
  %7 = load %struct.op*, %struct.op** %op_first1, align 8
  store %struct.op* %7, %struct.op** %kid, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %8 = load %struct.op*, %struct.op** %kid, align 8
  %op_type = getelementptr inbounds %struct.op, %struct.op* %8, i32 0, i32 4
  %bf.load = load i16, i16* %op_type, align 8
  %bf.clear = and i16 %bf.load, 511
  %bf.cast = zext i16 %bf.clear to i32
  %cmp = icmp eq i32 %bf.cast, 3
  br i1 %cmp, label %if.then2, label %if.end3

if.then2:                                         ; preds = %if.end
  %9 = load %struct.op*, %struct.op** %kid, align 8
  %op_sibling = getelementptr inbounds %struct.op, %struct.op* %9, i32 0, i32 1
  %10 = load %struct.op*, %struct.op** %op_sibling, align 8
  %add.ptr = getelementptr inbounds %struct.op, %struct.op* %10, i64 0
  store %struct.op* %add.ptr, %struct.op** %kid, align 8
  br label %if.end3

if.end3:                                          ; preds = %if.then2, %if.end
  %11 = load %struct.op*, %struct.op** %kid, align 8
  %tobool4 = icmp ne %struct.op* %11, null
  br i1 %tobool4, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %if.end3
  %12 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %12, i32 0, i32 5
  %13 = load i8, i8* %op_flags, align 2
  %conv = zext i8 %13 to i32
  %and = and i32 %conv, 64
  %tobool5 = icmp ne i32 %and, 0
  br i1 %tobool5, label %if.then6, label %if.else

if.then6:                                         ; preds = %land.lhs.true
  %14 = load %struct.op*, %struct.op** %kid, align 8
  %op_sibling7 = getelementptr inbounds %struct.op, %struct.op* %14, i32 0, i32 1
  %15 = load %struct.op*, %struct.op** %op_sibling7, align 8
  %add.ptr8 = getelementptr inbounds %struct.op, %struct.op* %15, i64 0
  store %struct.op* %add.ptr8, %struct.op** %kid, align 8
  br label %if.end40

if.else:                                          ; preds = %land.lhs.true, %if.end3
  %16 = load %struct.op*, %struct.op** %kid, align 8
  %tobool9 = icmp ne %struct.op* %16, null
  br i1 %tobool9, label %land.lhs.true10, label %if.end39

land.lhs.true10:                                  ; preds = %if.else
  %17 = load %struct.op*, %struct.op** %kid, align 8
  %op_sibling11 = getelementptr inbounds %struct.op, %struct.op* %17, i32 0, i32 1
  %18 = load %struct.op*, %struct.op** %op_sibling11, align 8
  %tobool12 = icmp ne %struct.op* %18, null
  br i1 %tobool12, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true10
  br i1 true, label %if.end39, label %if.then13

cond.false:                                       ; preds = %land.lhs.true10
  br i1 false, label %if.end39, label %if.then13

if.then13:                                        ; preds = %cond.false, %cond.true
  %19 = load %struct.op*, %struct.op** %kid, align 8
  %op_type14 = getelementptr inbounds %struct.op, %struct.op* %19, i32 0, i32 4
  %bf.load15 = load i16, i16* %op_type14, align 8
  %bf.clear16 = and i16 %bf.load15, 511
  %bf.cast17 = zext i16 %bf.clear16 to i32
  %cmp18 = icmp eq i32 %bf.cast17, 5
  br i1 %cmp18, label %land.lhs.true20, label %if.end38

land.lhs.true20:                                  ; preds = %if.then13
  %20 = load %struct.op*, %struct.op** %kid, align 8
  %op_private = getelementptr inbounds %struct.op, %struct.op* %20, i32 0, i32 6
  %21 = load i8, i8* %op_private, align 1
  %conv21 = zext i8 %21 to i32
  %and22 = and i32 %conv21, 64
  %tobool23 = icmp ne i32 %and22, 0
  br i1 %tobool23, label %land.lhs.true24, label %if.end38

land.lhs.true24:                                  ; preds = %land.lhs.true20
  %22 = load %struct.op*, %struct.op** %kid, align 8
  %op_folded = getelementptr inbounds %struct.op, %struct.op* %22, i32 0, i32 4
  %bf.load25 = load i16, i16* %op_folded, align 8
  %bf.lshr = lshr i16 %bf.load25, 13
  %bf.clear26 = and i16 %bf.lshr, 1
  %bf.cast27 = zext i16 %bf.clear26 to i32
  %tobool28 = icmp ne i32 %bf.cast27, 0
  br i1 %tobool28, label %if.end38, label %if.then29

if.then29:                                        ; preds = %land.lhs.true24
  %23 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_flags30 = getelementptr inbounds %struct.op, %struct.op* %23, i32 0, i32 5
  %24 = load i8, i8* %op_flags30, align 2
  %conv31 = zext i8 %24 to i32
  %or = or i32 %conv31, 64
  %conv32 = trunc i32 %or to i8
  store i8 %conv32, i8* %op_flags30, align 2
  %25 = load %struct.op*, %struct.op** %kid, align 8
  %call33 = call %struct.op* @Perl_scalar(%struct.op* %25)
  %26 = load %struct.op*, %struct.op** %o.addr, align 8
  %27 = load %struct.op*, %struct.op** %o.addr, align 8
  %28 = bitcast %struct.op* %27 to %struct.listop*
  %op_first34 = getelementptr inbounds %struct.listop, %struct.listop* %28, i32 0, i32 7
  %29 = load %struct.op*, %struct.op** %op_first34, align 8
  %call35 = call %struct.op* @S_op_sibling_newUNOP(%struct.op* %26, %struct.op* %29, i32 14, i32 16)
  store %struct.op* %call35, %struct.op** %kid, align 8
  %30 = load %struct.op*, %struct.op** %kid, align 8
  %op_sibling36 = getelementptr inbounds %struct.op, %struct.op* %30, i32 0, i32 1
  %31 = load %struct.op*, %struct.op** %op_sibling36, align 8
  %add.ptr37 = getelementptr inbounds %struct.op, %struct.op* %31, i64 0
  store %struct.op* %add.ptr37, %struct.op** %kid, align 8
  br label %if.end38

if.end38:                                         ; preds = %if.then29, %land.lhs.true24, %land.lhs.true20, %if.then13
  br label %if.end39

if.end39:                                         ; preds = %if.end38, %cond.false, %cond.true, %if.else
  br label %if.end40

if.end40:                                         ; preds = %if.end39, %if.then6
  %32 = load %struct.op*, %struct.op** %kid, align 8
  %tobool41 = icmp ne %struct.op* %32, null
  br i1 %tobool41, label %if.end49, label %if.then42

if.then42:                                        ; preds = %if.end40
  %33 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type43 = getelementptr inbounds %struct.op, %struct.op* %33, i32 0, i32 4
  %bf.load44 = load i16, i16* %op_type43, align 8
  %bf.clear45 = and i16 %bf.load44, 511
  %bf.cast46 = zext i16 %bf.clear45 to i32
  %34 = load %struct.op*, %struct.op** %o.addr, align 8
  %call47 = call %struct.op* @Perl_newDEFSVOP()
  %call48 = call %struct.op* @Perl_op_append_elem(i32 %bf.cast46, %struct.op* %34, %struct.op* %call47)
  br label %if.end49

if.end49:                                         ; preds = %if.then42, %if.end40
  %35 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type50 = getelementptr inbounds %struct.op, %struct.op* %35, i32 0, i32 4
  %bf.load51 = load i16, i16* %op_type50, align 8
  %bf.clear52 = and i16 %bf.load51, 511
  %bf.cast53 = zext i16 %bf.clear52 to i32
  %cmp54 = icmp eq i32 %bf.cast53, 237
  br i1 %cmp54, label %if.then56, label %if.end59

if.then56:                                        ; preds = %if.end49
  %36 = load %struct.op*, %struct.op** %o.addr, align 8
  %call57 = call %struct.op* @S_listkids(%struct.op* %36)
  %call58 = call %struct.op* @S_modkids(%struct.op* %call57, i32 237)
  store %struct.op* %call58, %struct.op** %retval, align 8
  br label %return

if.end59:                                         ; preds = %if.end49
  %37 = load %struct.op*, %struct.op** %o.addr, align 8
  %call60 = call %struct.op* @S_listkids(%struct.op* %37)
  store %struct.op* %call60, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %if.end59, %if.then56
  %38 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %38
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_ck_smartmatch(%struct.op* %o) #0 {
entry:
  %o.addr = alloca %struct.op*, align 8
  %first = alloca %struct.op*, align 8
  %second = alloca %struct.op*, align 8
  store %struct.op* %o, %struct.op** %o.addr, align 8
  %0 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %0, i32 0, i32 5
  %1 = load i8, i8* %op_flags, align 2
  %conv = zext i8 %1 to i32
  %and = and i32 %conv, 128
  %cmp = icmp eq i32 0, %and
  br i1 %cmp, label %if.then, label %if.end28

if.then:                                          ; preds = %entry
  %2 = load %struct.op*, %struct.op** %o.addr, align 8
  %3 = bitcast %struct.op* %2 to %struct.binop*
  %op_first = getelementptr inbounds %struct.binop, %struct.binop* %3, i32 0, i32 7
  %4 = load %struct.op*, %struct.op** %op_first, align 8
  store %struct.op* %4, %struct.op** %first, align 8
  %5 = load %struct.op*, %struct.op** %first, align 8
  %op_sibling = getelementptr inbounds %struct.op, %struct.op* %5, i32 0, i32 1
  %6 = load %struct.op*, %struct.op** %op_sibling, align 8
  %add.ptr = getelementptr inbounds %struct.op, %struct.op* %6, i64 0
  store %struct.op* %add.ptr, %struct.op** %second, align 8
  %7 = load %struct.op*, %struct.op** %o.addr, align 8
  %call = call %struct.op* @Perl_op_sibling_splice(%struct.op* %7, %struct.op* null, i32 1, %struct.op* null)
  %8 = load %struct.op*, %struct.op** %o.addr, align 8
  %call2 = call %struct.op* @Perl_op_sibling_splice(%struct.op* %8, %struct.op* null, i32 1, %struct.op* null)
  %9 = load %struct.op*, %struct.op** %first, align 8
  %call3 = call %struct.op* @S_ref_array_or_hash(%struct.op* %9)
  store %struct.op* %call3, %struct.op** %first, align 8
  %10 = load %struct.op*, %struct.op** %second, align 8
  %call4 = call %struct.op* @S_ref_array_or_hash(%struct.op* %10)
  store %struct.op* %call4, %struct.op** %second, align 8
  %11 = load %struct.op*, %struct.op** %o.addr, align 8
  %12 = load %struct.op*, %struct.op** %second, align 8
  %call5 = call %struct.op* @Perl_op_sibling_splice(%struct.op* %11, %struct.op* null, i32 0, %struct.op* %12)
  %13 = load %struct.op*, %struct.op** %o.addr, align 8
  %14 = load %struct.op*, %struct.op** %first, align 8
  %call6 = call %struct.op* @Perl_op_sibling_splice(%struct.op* %13, %struct.op* null, i32 0, %struct.op* %14)
  %15 = load %struct.op*, %struct.op** %first, align 8
  %op_type = getelementptr inbounds %struct.op, %struct.op* %15, i32 0, i32 4
  %bf.load = load i16, i16* %op_type, align 8
  %bf.clear = and i16 %bf.load, 511
  %bf.cast = zext i16 %bf.clear to i32
  %cmp7 = icmp eq i32 %bf.cast, 31
  br i1 %cmp7, label %if.then9, label %if.end

if.then9:                                         ; preds = %if.then
  br label %do.body

do.body:                                          ; preds = %if.then9
  %16 = load %struct.op*, %struct.op** %first, align 8
  %op_type10 = getelementptr inbounds %struct.op, %struct.op* %16, i32 0, i32 4
  %bf.load11 = load i16, i16* %op_type10, align 8
  %bf.clear12 = and i16 %bf.load11, -512
  %bf.set = or i16 %bf.clear12, 32
  store i16 %bf.set, i16* %op_type10, align 8
  %17 = load %struct.op* ()*, %struct.op* ()** getelementptr inbounds ([0 x %struct.op* ()*], [0 x %struct.op* ()*]* @PL_ppaddr, i64 0, i64 32), align 8
  %18 = load %struct.op*, %struct.op** %first, align 8
  %op_ppaddr = getelementptr inbounds %struct.op, %struct.op* %18, i32 0, i32 2
  store %struct.op* ()* %17, %struct.op* ()** %op_ppaddr, align 8
  br label %do.end

do.end:                                           ; preds = %do.body
  br label %if.end

if.end:                                           ; preds = %do.end, %if.then
  %19 = load %struct.op*, %struct.op** %second, align 8
  %op_type13 = getelementptr inbounds %struct.op, %struct.op* %19, i32 0, i32 4
  %bf.load14 = load i16, i16* %op_type13, align 8
  %bf.clear15 = and i16 %bf.load14, 511
  %bf.cast16 = zext i16 %bf.clear15 to i32
  %cmp17 = icmp eq i32 %bf.cast16, 31
  br i1 %cmp17, label %if.then19, label %if.end27

if.then19:                                        ; preds = %if.end
  br label %do.body20

do.body20:                                        ; preds = %if.then19
  %20 = load %struct.op*, %struct.op** %second, align 8
  %op_type21 = getelementptr inbounds %struct.op, %struct.op* %20, i32 0, i32 4
  %bf.load22 = load i16, i16* %op_type21, align 8
  %bf.clear23 = and i16 %bf.load22, -512
  %bf.set24 = or i16 %bf.clear23, 32
  store i16 %bf.set24, i16* %op_type21, align 8
  %21 = load %struct.op* ()*, %struct.op* ()** getelementptr inbounds ([0 x %struct.op* ()*], [0 x %struct.op* ()*]* @PL_ppaddr, i64 0, i64 32), align 8
  %22 = load %struct.op*, %struct.op** %second, align 8
  %op_ppaddr25 = getelementptr inbounds %struct.op, %struct.op* %22, i32 0, i32 2
  store %struct.op* ()* %21, %struct.op* ()** %op_ppaddr25, align 8
  br label %do.end26

do.end26:                                         ; preds = %do.body20
  br label %if.end27

if.end27:                                         ; preds = %do.end26, %if.end
  br label %if.end28

if.end28:                                         ; preds = %if.end27, %entry
  %23 = load %struct.op*, %struct.op** %o.addr, align 8
  ret %struct.op* %23
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_ck_sassign(%struct.op* %o) #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %o.addr = alloca %struct.op*, align 8
  %kid = alloca %struct.op*, align 8
  %kkid = alloca %struct.op*, align 8
  %target = alloca i64, align 8
  %other = alloca %struct.op*, align 8
  %first = alloca %struct.op*, align 8
  %nullop = alloca %struct.op*, align 8
  %condop = alloca %struct.op*, align 8
  store %struct.op* %o, %struct.op** %o.addr, align 8
  %0 = load %struct.op*, %struct.op** %o.addr, align 8
  %1 = bitcast %struct.op* %0 to %struct.listop*
  %op_first = getelementptr inbounds %struct.listop, %struct.listop* %1, i32 0, i32 7
  %2 = load %struct.op*, %struct.op** %op_first, align 8
  store %struct.op* %2, %struct.op** %kid, align 8
  %3 = load %struct.op*, %struct.op** %kid, align 8
  %op_sibling = getelementptr inbounds %struct.op, %struct.op* %3, i32 0, i32 1
  %4 = load %struct.op*, %struct.op** %op_sibling, align 8
  %tobool = icmp ne %struct.op* %4, null
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  br i1 true, label %if.then, label %if.end47

cond.false:                                       ; preds = %entry
  br i1 false, label %if.then, label %if.end47

if.then:                                          ; preds = %cond.false, %cond.true
  %5 = load %struct.op*, %struct.op** %kid, align 8
  %op_sibling1 = getelementptr inbounds %struct.op, %struct.op* %5, i32 0, i32 1
  %6 = load %struct.op*, %struct.op** %op_sibling1, align 8
  %add.ptr = getelementptr inbounds %struct.op, %struct.op* %6, i64 0
  store %struct.op* %add.ptr, %struct.op** %kkid, align 8
  %7 = load %struct.op*, %struct.op** %kkid, align 8
  %op_type = getelementptr inbounds %struct.op, %struct.op* %7, i32 0, i32 4
  %bf.load = load i16, i16* %op_type, align 8
  %bf.clear = and i16 %bf.load, 511
  %bf.cast = zext i16 %bf.clear to i32
  %cmp = icmp eq i32 %bf.cast, 9
  br i1 %cmp, label %land.lhs.true23, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.then
  %8 = load %struct.op*, %struct.op** %kkid, align 8
  %tobool2 = icmp ne %struct.op* %8, null
  br i1 %tobool2, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %lor.lhs.false
  %9 = load %struct.op*, %struct.op** %kkid, align 8
  %op_type3 = getelementptr inbounds %struct.op, %struct.op* %9, i32 0, i32 4
  %bf.load4 = load i16, i16* %op_type3, align 8
  %bf.clear5 = and i16 %bf.load4, 511
  %bf.cast6 = zext i16 %bf.clear5 to i32
  %cmp7 = icmp eq i32 %bf.cast6, 0
  br i1 %cmp7, label %cond.true8, label %cond.false9

cond.true8:                                       ; preds = %land.lhs.true
  %10 = load %struct.op*, %struct.op** %kkid, align 8
  %op_targ = getelementptr inbounds %struct.op, %struct.op* %10, i32 0, i32 3
  %11 = load i64, i64* %op_targ, align 8
  br label %cond.end

cond.false9:                                      ; preds = %land.lhs.true
  %12 = load %struct.op*, %struct.op** %kkid, align 8
  %op_type10 = getelementptr inbounds %struct.op, %struct.op* %12, i32 0, i32 4
  %bf.load11 = load i16, i16* %op_type10, align 8
  %bf.clear12 = and i16 %bf.load11, 511
  %bf.cast13 = zext i16 %bf.clear12 to i32
  %conv = zext i32 %bf.cast13 to i64
  br label %cond.end

cond.end:                                         ; preds = %cond.false9, %cond.true8
  %cond = phi i64 [ %11, %cond.true8 ], [ %conv, %cond.false9 ]
  %cmp14 = icmp eq i64 %cond, 158
  br i1 %cmp14, label %land.lhs.true16, label %if.end

land.lhs.true16:                                  ; preds = %cond.end
  %13 = load %struct.op*, %struct.op** %kkid, align 8
  %14 = bitcast %struct.op* %13 to %struct.listop*
  %op_last = getelementptr inbounds %struct.listop, %struct.listop* %14, i32 0, i32 8
  %15 = load %struct.op*, %struct.op** %op_last, align 8
  store %struct.op* %15, %struct.op** %kkid, align 8
  %op_type17 = getelementptr inbounds %struct.op, %struct.op* %15, i32 0, i32 4
  %bf.load18 = load i16, i16* %op_type17, align 8
  %bf.clear19 = and i16 %bf.load18, 511
  %bf.cast20 = zext i16 %bf.clear19 to i32
  %cmp21 = icmp eq i32 %bf.cast20, 9
  br i1 %cmp21, label %land.lhs.true23, label %if.end

land.lhs.true23:                                  ; preds = %land.lhs.true16, %if.then
  %16 = load %struct.op*, %struct.op** %kkid, align 8
  %op_private = getelementptr inbounds %struct.op, %struct.op* %16, i32 0, i32 6
  %17 = load i8, i8* %op_private, align 1
  %conv24 = zext i8 %17 to i32
  %and = and i32 %conv24, 192
  %cmp25 = icmp eq i32 %and, 192
  br i1 %cmp25, label %if.then27, label %if.end

if.then27:                                        ; preds = %land.lhs.true23
  %18 = load %struct.op*, %struct.op** %kkid, align 8
  %op_targ28 = getelementptr inbounds %struct.op, %struct.op* %18, i32 0, i32 3
  %19 = load i64, i64* %op_targ28, align 8
  store i64 %19, i64* %target, align 8
  %20 = load %struct.op*, %struct.op** %kkid, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %20, i32 0, i32 5
  %21 = load i8, i8* %op_flags, align 2
  %conv29 = zext i8 %21 to i32
  %22 = load %struct.op*, %struct.op** %kkid, align 8
  %op_private30 = getelementptr inbounds %struct.op, %struct.op* %22, i32 0, i32 6
  %23 = load i8, i8* %op_private30, align 1
  %conv31 = zext i8 %23 to i32
  %and32 = and i32 %conv31, -129
  %shl = shl i32 %and32, 8
  %or = or i32 %conv29, %shl
  %call = call %struct.op* @Perl_newOP(i32 9, i32 %or)
  store %struct.op* %call, %struct.op** %other, align 8
  %call33 = call %struct.op* @Perl_newOP(i32 0, i32 0)
  store %struct.op* %call33, %struct.op** %first, align 8
  %24 = load %struct.op*, %struct.op** %first, align 8
  %25 = load %struct.op*, %struct.op** %o.addr, align 8
  %26 = load %struct.op*, %struct.op** %other, align 8
  %call34 = call %struct.op* @Perl_newCONDOP(i32 0, %struct.op* %24, %struct.op* %25, %struct.op* %26)
  store %struct.op* %call34, %struct.op** %nullop, align 8
  %27 = load %struct.op*, %struct.op** %first, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %27, i32 0, i32 0
  %28 = load %struct.op*, %struct.op** %op_next, align 8
  store %struct.op* %28, %struct.op** %condop, align 8
  br label %do.body

do.body:                                          ; preds = %if.then27
  %29 = load %struct.op*, %struct.op** %condop, align 8
  %op_type35 = getelementptr inbounds %struct.op, %struct.op* %29, i32 0, i32 4
  %bf.load36 = load i16, i16* %op_type35, align 8
  %bf.clear37 = and i16 %bf.load36, -512
  %bf.set = or i16 %bf.clear37, 379
  store i16 %bf.set, i16* %op_type35, align 8
  %30 = load %struct.op* ()*, %struct.op* ()** getelementptr inbounds ([0 x %struct.op* ()*], [0 x %struct.op* ()*]* @PL_ppaddr, i64 0, i64 379), align 8
  %31 = load %struct.op*, %struct.op** %condop, align 8
  %op_ppaddr = getelementptr inbounds %struct.op, %struct.op* %31, i32 0, i32 2
  store %struct.op* ()* %30, %struct.op* ()** %op_ppaddr, align 8
  br label %do.end

do.end:                                           ; preds = %do.body
  %32 = load i64, i64* %target, align 8
  %33 = load %struct.op*, %struct.op** %other, align 8
  %op_targ38 = getelementptr inbounds %struct.op, %struct.op* %33, i32 0, i32 3
  store i64 %32, i64* %op_targ38, align 8
  %34 = load %struct.op*, %struct.op** %nullop, align 8
  %op_flags39 = getelementptr inbounds %struct.op, %struct.op* %34, i32 0, i32 5
  %35 = load i8, i8* %op_flags39, align 2
  %conv40 = zext i8 %35 to i32
  %or41 = or i32 %conv40, 2
  %conv42 = trunc i32 %or41 to i8
  store i8 %conv42, i8* %op_flags39, align 2
  %call43 = call i64 @Perl_pad_add_name_pvn(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.59, i64 0, i64 0), i64 1, i32 6, %struct.hv* null, %struct.hv* null)
  %36 = load %struct.op*, %struct.op** %condop, align 8
  %op_targ44 = getelementptr inbounds %struct.op, %struct.op* %36, i32 0, i32 3
  store i64 %call43, i64* %op_targ44, align 8
  %37 = load %struct.sv**, %struct.sv*** @PL_curpad, align 8
  %38 = load %struct.op*, %struct.op** %condop, align 8
  %op_targ45 = getelementptr inbounds %struct.op, %struct.op* %38, i32 0, i32 3
  %39 = load i64, i64* %op_targ45, align 8
  %arrayidx = getelementptr inbounds %struct.sv*, %struct.sv** %37, i64 %39
  %40 = load %struct.sv*, %struct.sv** %arrayidx, align 8
  %41 = bitcast %struct.sv* %40 to i8*
  %42 = bitcast i8* %41 to %struct.sv*
  %call46 = call i32 @S_SvPADSTALE_on(%struct.sv* %42)
  %43 = load %struct.op*, %struct.op** %nullop, align 8
  store %struct.op* %43, %struct.op** %retval, align 8
  br label %return

if.end:                                           ; preds = %land.lhs.true23, %land.lhs.true16, %cond.end, %lor.lhs.false
  br label %if.end47

if.end47:                                         ; preds = %if.end, %cond.false, %cond.true
  %44 = load %struct.op*, %struct.op** %o.addr, align 8
  %call48 = call %struct.op* @S_maybe_targlex(%struct.op* %44)
  store %struct.op* %call48, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %if.end47, %do.end
  %45 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %45
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @S_SvPADSTALE_on(%struct.sv* %sv) #0 {
entry:
  %sv.addr = alloca %struct.sv*, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %0, i32 0, i32 2
  %1 = load i32, i32* %sv_flags, align 4
  %or = or i32 %1, 262144
  store i32 %or, i32* %sv_flags, align 4
  ret i32 %or
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.op* @S_maybe_targlex(%struct.op* %o) #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %o.addr = alloca %struct.op*, align 8
  %kid = alloca %struct.op*, align 8
  %kkid = alloca %struct.op*, align 8
  store %struct.op* %o, %struct.op** %o.addr, align 8
  %0 = load %struct.op*, %struct.op** %o.addr, align 8
  %1 = bitcast %struct.op* %0 to %struct.listop*
  %op_first = getelementptr inbounds %struct.listop, %struct.listop* %1, i32 0, i32 7
  %2 = load %struct.op*, %struct.op** %op_first, align 8
  store %struct.op* %2, %struct.op** %kid, align 8
  %3 = load %struct.op*, %struct.op** %kid, align 8
  %op_type = getelementptr inbounds %struct.op, %struct.op* %3, i32 0, i32 4
  %bf.load = load i16, i16* %op_type, align 8
  %bf.clear = and i16 %bf.load, 511
  %bf.cast = zext i16 %bf.clear to i32
  %idxprom = zext i32 %bf.cast to i64
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @PL_opargs, i64 0, i64 %idxprom
  %4 = load i32, i32* %arrayidx, align 4
  %and = and i32 %4, 16
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %land.lhs.true, label %if.end29

land.lhs.true:                                    ; preds = %entry
  %5 = load %struct.op*, %struct.op** %kid, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %5, i32 0, i32 5
  %6 = load i8, i8* %op_flags, align 2
  %conv = zext i8 %6 to i32
  %and1 = and i32 %conv, 64
  %tobool2 = icmp ne i32 %and1, 0
  br i1 %tobool2, label %if.end29, label %land.lhs.true3

land.lhs.true3:                                   ; preds = %land.lhs.true
  %7 = load %struct.op*, %struct.op** %kid, align 8
  %op_private = getelementptr inbounds %struct.op, %struct.op* %7, i32 0, i32 6
  %8 = load i8, i8* %op_private, align 1
  %conv4 = zext i8 %8 to i32
  %and5 = and i32 %conv4, 16
  %tobool6 = icmp ne i32 %and5, 0
  br i1 %tobool6, label %if.end29, label %if.then

if.then:                                          ; preds = %land.lhs.true3
  %9 = load %struct.op*, %struct.op** %kid, align 8
  %op_sibling = getelementptr inbounds %struct.op, %struct.op* %9, i32 0, i32 1
  %10 = load %struct.op*, %struct.op** %op_sibling, align 8
  %add.ptr = getelementptr inbounds %struct.op, %struct.op* %10, i64 0
  store %struct.op* %add.ptr, %struct.op** %kkid, align 8
  %11 = load %struct.op*, %struct.op** %kkid, align 8
  %tobool7 = icmp ne %struct.op* %11, null
  br i1 %tobool7, label %land.lhs.true8, label %if.end

land.lhs.true8:                                   ; preds = %if.then
  %12 = load %struct.op*, %struct.op** %kkid, align 8
  %op_type9 = getelementptr inbounds %struct.op, %struct.op* %12, i32 0, i32 4
  %bf.load10 = load i16, i16* %op_type9, align 8
  %bf.clear11 = and i16 %bf.load10, 511
  %bf.cast12 = zext i16 %bf.clear11 to i32
  %cmp = icmp eq i32 %bf.cast12, 9
  br i1 %cmp, label %land.lhs.true14, label %if.end

land.lhs.true14:                                  ; preds = %land.lhs.true8
  %13 = load %struct.op*, %struct.op** %kkid, align 8
  %op_private15 = getelementptr inbounds %struct.op, %struct.op* %13, i32 0, i32 6
  %14 = load i8, i8* %op_private15, align 1
  %conv16 = zext i8 %14 to i32
  %and17 = and i32 %conv16, 128
  %tobool18 = icmp ne i32 %and17, 0
  br i1 %tobool18, label %lor.lhs.false, label %if.then23

lor.lhs.false:                                    ; preds = %land.lhs.true14
  %15 = load %struct.op*, %struct.op** %kkid, align 8
  %op_private19 = getelementptr inbounds %struct.op, %struct.op* %15, i32 0, i32 6
  %16 = load i8, i8* %op_private19, align 1
  %conv20 = zext i8 %16 to i32
  %and21 = and i32 %conv20, 64
  %tobool22 = icmp ne i32 %and21, 0
  br i1 %tobool22, label %if.then23, label %if.end

if.then23:                                        ; preds = %lor.lhs.false, %land.lhs.true14
  %17 = load %struct.op*, %struct.op** %kkid, align 8
  %op_targ = getelementptr inbounds %struct.op, %struct.op* %17, i32 0, i32 3
  %18 = load i64, i64* %op_targ, align 8
  %19 = load %struct.op*, %struct.op** %kid, align 8
  %op_targ24 = getelementptr inbounds %struct.op, %struct.op* %19, i32 0, i32 3
  store i64 %18, i64* %op_targ24, align 8
  %20 = load %struct.op*, %struct.op** %kkid, align 8
  %op_targ25 = getelementptr inbounds %struct.op, %struct.op* %20, i32 0, i32 3
  store i64 0, i64* %op_targ25, align 8
  %21 = load %struct.op*, %struct.op** %o.addr, align 8
  %call = call %struct.op* @Perl_op_sibling_splice(%struct.op* %21, %struct.op* null, i32 1, %struct.op* null)
  %22 = load %struct.op*, %struct.op** %o.addr, align 8
  call void @Perl_op_free(%struct.op* %22)
  %23 = load %struct.op*, %struct.op** %kid, align 8
  %op_private26 = getelementptr inbounds %struct.op, %struct.op* %23, i32 0, i32 6
  %24 = load i8, i8* %op_private26, align 1
  %conv27 = zext i8 %24 to i32
  %or = or i32 %conv27, 16
  %conv28 = trunc i32 %or to i8
  store i8 %conv28, i8* %op_private26, align 1
  %25 = load %struct.op*, %struct.op** %kid, align 8
  store %struct.op* %25, %struct.op** %retval, align 8
  br label %return

if.end:                                           ; preds = %lor.lhs.false, %land.lhs.true8, %if.then
  br label %if.end29

if.end29:                                         ; preds = %if.end, %land.lhs.true3, %land.lhs.true, %entry
  %26 = load %struct.op*, %struct.op** %o.addr, align 8
  store %struct.op* %26, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %if.end29, %if.then23
  %27 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %27
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_ck_match(%struct.op* %o) #0 {
entry:
  %o.addr = alloca %struct.op*, align 8
  %offset = alloca i64, align 8
  store %struct.op* %o, %struct.op** %o.addr, align 8
  %0 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type = getelementptr inbounds %struct.op, %struct.op* %0, i32 0, i32 4
  %bf.load = load i16, i16* %op_type, align 8
  %bf.clear = and i16 %bf.load, 511
  %bf.cast = zext i16 %bf.clear to i32
  %cmp = icmp ne i32 %bf.cast, 32
  br i1 %cmp, label %land.lhs.true, label %if.end6

land.lhs.true:                                    ; preds = %entry
  %1 = load %struct.cv*, %struct.cv** @PL_compcv, align 8
  %tobool = icmp ne %struct.cv* %1, null
  br i1 %tobool, label %if.then, label %if.end6

if.then:                                          ; preds = %land.lhs.true
  %call = call i64 @Perl_pad_findmy_pvn(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.7, i64 0, i64 0), i64 2, i32 0)
  store i64 %call, i64* %offset, align 8
  %2 = load i64, i64* %offset, align 8
  %cmp1 = icmp ne i64 %2, -1
  br i1 %cmp1, label %land.lhs.true2, label %if.end

land.lhs.true2:                                   ; preds = %if.then
  %3 = load %struct.padnamelist*, %struct.padnamelist** @PL_comppad_name, align 8
  %xpadnl_alloc = getelementptr inbounds %struct.padnamelist, %struct.padnamelist* %3, i32 0, i32 1
  %4 = load %struct.padname**, %struct.padname*** %xpadnl_alloc, align 8
  %5 = load i64, i64* %offset, align 8
  %arrayidx = getelementptr inbounds %struct.padname*, %struct.padname** %4, i64 %5
  %6 = load %struct.padname*, %struct.padname** %arrayidx, align 8
  %xpadn_ourstash = getelementptr inbounds %struct.padname, %struct.padname* %6, i32 0, i32 1
  %7 = load %struct.hv*, %struct.hv** %xpadn_ourstash, align 8
  %tobool3 = icmp ne %struct.hv* %7, null
  br i1 %tobool3, label %if.end, label %if.then4

if.then4:                                         ; preds = %land.lhs.true2
  %8 = load i64, i64* %offset, align 8
  %9 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_targ = getelementptr inbounds %struct.op, %struct.op* %9, i32 0, i32 3
  store i64 %8, i64* %op_targ, align 8
  %10 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_private = getelementptr inbounds %struct.op, %struct.op* %10, i32 0, i32 6
  %11 = load i8, i8* %op_private, align 1
  %conv = zext i8 %11 to i32
  %or = or i32 %conv, 16
  %conv5 = trunc i32 %or to i8
  store i8 %conv5, i8* %op_private, align 1
  br label %if.end

if.end:                                           ; preds = %if.then4, %land.lhs.true2, %if.then
  br label %if.end6

if.end6:                                          ; preds = %if.end, %land.lhs.true, %entry
  %12 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type7 = getelementptr inbounds %struct.op, %struct.op* %12, i32 0, i32 4
  %bf.load8 = load i16, i16* %op_type7, align 8
  %bf.clear9 = and i16 %bf.load8, 511
  %bf.cast10 = zext i16 %bf.clear9 to i32
  %cmp11 = icmp eq i32 %bf.cast10, 31
  br i1 %cmp11, label %if.then19, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end6
  %13 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type13 = getelementptr inbounds %struct.op, %struct.op* %13, i32 0, i32 4
  %bf.load14 = load i16, i16* %op_type13, align 8
  %bf.clear15 = and i16 %bf.load14, 511
  %bf.cast16 = zext i16 %bf.clear15 to i32
  %cmp17 = icmp eq i32 %bf.cast16, 32
  br i1 %cmp17, label %if.then19, label %if.end24

if.then19:                                        ; preds = %lor.lhs.false, %if.end6
  %14 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_private20 = getelementptr inbounds %struct.op, %struct.op* %14, i32 0, i32 6
  %15 = load i8, i8* %op_private20, align 1
  %conv21 = zext i8 %15 to i32
  %or22 = or i32 %conv21, 64
  %conv23 = trunc i32 %or22 to i8
  store i8 %conv23, i8* %op_private20, align 1
  br label %if.end24

if.end24:                                         ; preds = %if.then19, %lor.lhs.false
  %16 = load %struct.op*, %struct.op** %o.addr, align 8
  ret %struct.op* %16
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_ck_method(%struct.op* %o) #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %o.addr = alloca %struct.op*, align 8
  %sv = alloca %struct.sv*, align 8
  %methsv = alloca %struct.sv*, align 8
  %rclass = alloca %struct.sv*, align 8
  %method = alloca i8*, align 8
  %compatptr = alloca i8*, align 8
  %utf8 = alloca i32, align 4
  %len = alloca i64, align 8
  %nsplit = alloca i64, align 8
  %i = alloca i64, align 8
  %new_op = alloca %struct.op*, align 8
  %kid = alloca %struct.op*, align 8
  store %struct.op* %o, %struct.op** %o.addr, align 8
  store i64 0, i64* %nsplit, align 8
  %0 = load %struct.op*, %struct.op** %o.addr, align 8
  %1 = bitcast %struct.op* %0 to %struct.unop*
  %op_first = getelementptr inbounds %struct.unop, %struct.unop* %1, i32 0, i32 7
  %2 = load %struct.op*, %struct.op** %op_first, align 8
  store %struct.op* %2, %struct.op** %kid, align 8
  %3 = load %struct.op*, %struct.op** %kid, align 8
  %op_type = getelementptr inbounds %struct.op, %struct.op* %3, i32 0, i32 4
  %bf.load = load i16, i16* %op_type, align 8
  %bf.clear = and i16 %bf.load, 511
  %bf.cast = zext i16 %bf.clear to i32
  %cmp = icmp ne i32 %bf.cast, 5
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %4 = load %struct.op*, %struct.op** %o.addr, align 8
  store %struct.op* %4, %struct.op** %retval, align 8
  br label %return

if.end:                                           ; preds = %entry
  %5 = load %struct.op*, %struct.op** %kid, align 8
  %6 = bitcast %struct.op* %5 to %struct.svop*
  %op_sv = getelementptr inbounds %struct.svop, %struct.svop* %6, i32 0, i32 7
  %7 = load %struct.sv*, %struct.sv** %op_sv, align 8
  store %struct.sv* %7, %struct.sv** %sv, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end
  %8 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %8, i32 0, i32 3
  %svu_pv = bitcast %union.anon* %sv_u to i8**
  %9 = load i8*, i8** %svu_pv, align 8
  %call = call i8* @strchr(i8* %9, i32 39) #7
  store i8* %call, i8** %compatptr, align 8
  %tobool = icmp ne i8* %call, null
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %10 = load i8*, i8** %compatptr, align 8
  store i8 58, i8* %10, align 1
  %11 = load %struct.sv*, %struct.sv** %sv, align 8
  %12 = load i8*, i8** %compatptr, align 8
  %13 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_u1 = getelementptr inbounds %struct.sv, %struct.sv* %13, i32 0, i32 3
  %svu_pv2 = bitcast %union.anon* %sv_u1 to i8**
  %14 = load i8*, i8** %svu_pv2, align 8
  %add.ptr = getelementptr inbounds i8, i8* %14, i64 0
  %sub.ptr.lhs.cast = ptrtoint i8* %12 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %add.ptr to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  call void @Perl_sv_insert_flags(%struct.sv* %11, i64 %sub.ptr.sub, i64 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.119, i64 0, i64 0), i64 1, i32 2)
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %15 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_u3 = getelementptr inbounds %struct.sv, %struct.sv* %15, i32 0, i32 3
  %svu_pv4 = bitcast %union.anon* %sv_u3 to i8**
  %16 = load i8*, i8** %svu_pv4, align 8
  %add.ptr5 = getelementptr inbounds i8, i8* %16, i64 0
  store i8* %add.ptr5, i8** %method, align 8
  %17 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %17, i32 0, i32 0
  %18 = load i8*, i8** %sv_any, align 8
  %19 = bitcast i8* %18 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %19, i32 0, i32 2
  %20 = load i64, i64* %xpv_cur, align 8
  store i64 %20, i64* %len, align 8
  %21 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %21, i32 0, i32 2
  %22 = load i32, i32* %sv_flags, align 4
  %and = and i32 %22, 536870912
  %tobool6 = icmp ne i32 %and, 0
  %23 = zext i1 %tobool6 to i64
  %cond = select i1 %tobool6, i32 -1, i32 1
  store i32 %cond, i32* %utf8, align 4
  %24 = load i64, i64* %len, align 8
  %sub = sub i64 %24, 1
  store i64 %sub, i64* %i, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %while.end
  %25 = load i64, i64* %i, align 8
  %cmp7 = icmp ugt i64 %25, 0
  br i1 %cmp7, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %26 = load i8*, i8** %method, align 8
  %27 = load i64, i64* %i, align 8
  %arrayidx = getelementptr inbounds i8, i8* %26, i64 %27
  %28 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %28 to i32
  %cmp8 = icmp eq i32 %conv, 58
  br i1 %cmp8, label %if.then10, label %if.end11

if.then10:                                        ; preds = %for.body
  %29 = load i64, i64* %i, align 8
  %add = add i64 %29, 1
  store i64 %add, i64* %nsplit, align 8
  br label %for.end

if.end11:                                         ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end11
  %30 = load i64, i64* %i, align 8
  %dec = add i64 %30, -1
  store i64 %dec, i64* %i, align 8
  br label %for.cond

for.end:                                          ; preds = %if.then10, %for.cond
  %31 = load i8*, i8** %method, align 8
  %32 = load i64, i64* %nsplit, align 8
  %add.ptr12 = getelementptr inbounds i8, i8* %31, i64 %32
  %33 = load i32, i32* %utf8, align 4
  %conv13 = sext i32 %33 to i64
  %34 = load i64, i64* %len, align 8
  %35 = load i64, i64* %nsplit, align 8
  %sub14 = sub i64 %34, %35
  %mul = mul i64 %conv13, %sub14
  %conv15 = trunc i64 %mul to i32
  %call16 = call %struct.sv* @Perl_newSVpvn_share(i8* %add.ptr12, i32 %conv15, i32 0)
  store %struct.sv* %call16, %struct.sv** %methsv, align 8
  %36 = load i64, i64* %nsplit, align 8
  %tobool17 = icmp ne i64 %36, 0
  br i1 %tobool17, label %if.end20, label %if.then18

if.then18:                                        ; preds = %for.end
  %37 = load %struct.op*, %struct.op** %o.addr, align 8
  call void @Perl_op_free(%struct.op* %37)
  %38 = load %struct.sv*, %struct.sv** %methsv, align 8
  %call19 = call %struct.op* @Perl_newMETHOP_named(i32 210, i32 0, %struct.sv* %38)
  store %struct.op* %call19, %struct.op** %retval, align 8
  br label %return

if.end20:                                         ; preds = %for.end
  %39 = load i64, i64* %nsplit, align 8
  %cmp21 = icmp eq i64 %39, 7
  br i1 %cmp21, label %land.lhs.true, label %if.end27

land.lhs.true:                                    ; preds = %if.end20
  %40 = load i8*, i8** %method, align 8
  %41 = load i64, i64* %nsplit, align 8
  %call23 = call i32 @memcmp(i8* %40, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.120, i64 0, i64 0), i64 %41) #7
  %tobool24 = icmp ne i32 %call23, 0
  br i1 %tobool24, label %if.end27, label %if.then25

if.then25:                                        ; preds = %land.lhs.true
  %42 = load %struct.op*, %struct.op** %o.addr, align 8
  call void @Perl_op_free(%struct.op* %42)
  %43 = load %struct.sv*, %struct.sv** %methsv, align 8
  %call26 = call %struct.op* @Perl_newMETHOP_named(i32 211, i32 0, %struct.sv* %43)
  store %struct.op* %call26, %struct.op** %retval, align 8
  br label %return

if.end27:                                         ; preds = %land.lhs.true, %if.end20
  %44 = load i64, i64* %nsplit, align 8
  %cmp28 = icmp uge i64 %44, 9
  br i1 %cmp28, label %land.lhs.true30, label %if.else

land.lhs.true30:                                  ; preds = %if.end27
  %45 = load i8*, i8** %method, align 8
  %46 = load i64, i64* %nsplit, align 8
  %add.ptr31 = getelementptr inbounds i8, i8* %45, i64 %46
  %add.ptr32 = getelementptr inbounds i8, i8* %add.ptr31, i64 -9
  %call33 = call i32 @strncmp(i8* %add.ptr32, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.121, i64 0, i64 0), i64 9) #7
  %tobool34 = icmp ne i32 %call33, 0
  br i1 %tobool34, label %if.else, label %if.then35

if.then35:                                        ; preds = %land.lhs.true30
  %47 = load i8*, i8** %method, align 8
  %48 = load i32, i32* %utf8, align 4
  %conv36 = sext i32 %48 to i64
  %49 = load i64, i64* %nsplit, align 8
  %sub37 = sub i64 %49, 9
  %mul38 = mul i64 %conv36, %sub37
  %conv39 = trunc i64 %mul38 to i32
  %call40 = call %struct.sv* @Perl_newSVpvn_share(i8* %47, i32 %conv39, i32 0)
  store %struct.sv* %call40, %struct.sv** %rclass, align 8
  %50 = load %struct.sv*, %struct.sv** %methsv, align 8
  %call41 = call %struct.op* @Perl_newMETHOP_named(i32 213, i32 0, %struct.sv* %50)
  store %struct.op* %call41, %struct.op** %new_op, align 8
  br label %if.end48

if.else:                                          ; preds = %land.lhs.true30, %if.end27
  %51 = load i8*, i8** %method, align 8
  %52 = load i32, i32* %utf8, align 4
  %conv42 = sext i32 %52 to i64
  %53 = load i64, i64* %nsplit, align 8
  %sub43 = sub i64 %53, 2
  %mul44 = mul i64 %conv42, %sub43
  %conv45 = trunc i64 %mul44 to i32
  %call46 = call %struct.sv* @Perl_newSVpvn_share(i8* %51, i32 %conv45, i32 0)
  store %struct.sv* %call46, %struct.sv** %rclass, align 8
  %54 = load %struct.sv*, %struct.sv** %methsv, align 8
  %call47 = call %struct.op* @Perl_newMETHOP_named(i32 212, i32 0, %struct.sv* %54)
  store %struct.op* %call47, %struct.op** %new_op, align 8
  br label %if.end48

if.end48:                                         ; preds = %if.else, %if.then35
  %55 = load %struct.sv*, %struct.sv** %rclass, align 8
  %56 = load %struct.op*, %struct.op** %new_op, align 8
  %57 = bitcast %struct.op* %56 to %struct.methop*
  %op_rclass_sv = getelementptr inbounds %struct.methop, %struct.methop* %57, i32 0, i32 8
  store %struct.sv* %55, %struct.sv** %op_rclass_sv, align 8
  %58 = load %struct.op*, %struct.op** %o.addr, align 8
  call void @Perl_op_free(%struct.op* %58)
  %59 = load %struct.op*, %struct.op** %new_op, align 8
  store %struct.op* %59, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %if.end48, %if.then25, %if.then18, %if.then
  %60 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %60
}

declare dso_local void @Perl_sv_insert_flags(%struct.sv*, i64, i64, i8*, i64, i32) #3

; Function Attrs: nounwind readonly
declare dso_local i32 @strncmp(i8*, i8*, i64) #4

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_ck_null(%struct.op* %o) #0 {
entry:
  %o.addr = alloca %struct.op*, align 8
  store %struct.op* %o, %struct.op** %o.addr, align 8
  %0 = load %struct.op*, %struct.op** %o.addr, align 8
  ret %struct.op* %0
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_ck_open(%struct.op* %o) #0 {
entry:
  %o.addr = alloca %struct.op*, align 8
  %first = alloca %struct.op*, align 8
  %last = alloca %struct.op*, align 8
  %oa = alloca %struct.op*, align 8
  %mode = alloca i8*, align 8
  store %struct.op* %o, %struct.op** %o.addr, align 8
  %0 = load %struct.op*, %struct.op** %o.addr, align 8
  call void @S_io_hints(%struct.op* %0)
  %1 = load %struct.op*, %struct.op** %o.addr, align 8
  %2 = bitcast %struct.op* %1 to %struct.listop*
  %op_first = getelementptr inbounds %struct.listop, %struct.listop* %2, i32 0, i32 7
  %3 = load %struct.op*, %struct.op** %op_first, align 8
  store %struct.op* %3, %struct.op** %first, align 8
  %4 = load %struct.op*, %struct.op** %o.addr, align 8
  %5 = bitcast %struct.op* %4 to %struct.listop*
  %op_last = getelementptr inbounds %struct.listop, %struct.listop* %5, i32 0, i32 8
  %6 = load %struct.op*, %struct.op** %op_last, align 8
  store %struct.op* %6, %struct.op** %last, align 8
  %7 = load %struct.op*, %struct.op** %last, align 8
  %op_type = getelementptr inbounds %struct.op, %struct.op* %7, i32 0, i32 4
  %bf.load = load i16, i16* %op_type, align 8
  %bf.clear = and i16 %bf.load, 511
  %bf.cast = zext i16 %bf.clear to i32
  %cmp = icmp eq i32 %bf.cast, 5
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %8 = load %struct.op*, %struct.op** %last, align 8
  %op_private = getelementptr inbounds %struct.op, %struct.op* %8, i32 0, i32 6
  %9 = load i8, i8* %op_private, align 1
  %conv = zext i8 %9 to i32
  %and = and i32 %conv, 64
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %land.lhs.true1, label %if.end

land.lhs.true1:                                   ; preds = %land.lhs.true
  %10 = load %struct.op*, %struct.op** %last, align 8
  %op_private2 = getelementptr inbounds %struct.op, %struct.op* %10, i32 0, i32 6
  %11 = load i8, i8* %op_private2, align 1
  %conv3 = zext i8 %11 to i32
  %and4 = and i32 %conv3, 8
  %tobool5 = icmp ne i32 %and4, 0
  br i1 %tobool5, label %land.lhs.true6, label %if.end

land.lhs.true6:                                   ; preds = %land.lhs.true1
  %12 = load %struct.op*, %struct.op** %first, align 8
  %op_sibling = getelementptr inbounds %struct.op, %struct.op* %12, i32 0, i32 1
  %13 = load %struct.op*, %struct.op** %op_sibling, align 8
  %add.ptr = getelementptr inbounds %struct.op, %struct.op* %13, i64 0
  store %struct.op* %add.ptr, %struct.op** %oa, align 8
  %tobool7 = icmp ne %struct.op* %add.ptr, null
  br i1 %tobool7, label %land.lhs.true8, label %if.end

land.lhs.true8:                                   ; preds = %land.lhs.true6
  %14 = load %struct.op*, %struct.op** %oa, align 8
  %op_sibling9 = getelementptr inbounds %struct.op, %struct.op* %14, i32 0, i32 1
  %15 = load %struct.op*, %struct.op** %op_sibling9, align 8
  %add.ptr10 = getelementptr inbounds %struct.op, %struct.op* %15, i64 0
  store %struct.op* %add.ptr10, %struct.op** %oa, align 8
  %tobool11 = icmp ne %struct.op* %add.ptr10, null
  br i1 %tobool11, label %land.lhs.true12, label %if.end

land.lhs.true12:                                  ; preds = %land.lhs.true8
  %16 = load %struct.op*, %struct.op** %oa, align 8
  %op_type13 = getelementptr inbounds %struct.op, %struct.op* %16, i32 0, i32 4
  %bf.load14 = load i16, i16* %op_type13, align 8
  %bf.clear15 = and i16 %bf.load14, 511
  %bf.cast16 = zext i16 %bf.clear15 to i32
  %cmp17 = icmp eq i32 %bf.cast16, 5
  br i1 %cmp17, label %land.lhs.true19, label %if.end

land.lhs.true19:                                  ; preds = %land.lhs.true12
  %17 = load %struct.op*, %struct.op** %oa, align 8
  %18 = bitcast %struct.op* %17 to %struct.svop*
  %op_sv = getelementptr inbounds %struct.svop, %struct.svop* %18, i32 0, i32 7
  %19 = load %struct.sv*, %struct.sv** %op_sv, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %19, i32 0, i32 2
  %20 = load i32, i32* %sv_flags, align 4
  %and20 = and i32 %20, 1024
  %tobool21 = icmp ne i32 %and20, 0
  br i1 %tobool21, label %land.lhs.true22, label %if.end

land.lhs.true22:                                  ; preds = %land.lhs.true19
  %21 = load %struct.op*, %struct.op** %oa, align 8
  %22 = bitcast %struct.op* %21 to %struct.svop*
  %op_sv23 = getelementptr inbounds %struct.svop, %struct.svop* %22, i32 0, i32 7
  %23 = load %struct.sv*, %struct.sv** %op_sv23, align 8
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %23, i32 0, i32 3
  %svu_pv = bitcast %union.anon* %sv_u to i8**
  %24 = load i8*, i8** %svu_pv, align 8
  %add.ptr24 = getelementptr inbounds i8, i8* %24, i64 0
  store i8* %add.ptr24, i8** %mode, align 8
  %tobool25 = icmp ne i8* %add.ptr24, null
  br i1 %tobool25, label %land.lhs.true26, label %if.end

land.lhs.true26:                                  ; preds = %land.lhs.true22
  %25 = load i8*, i8** %mode, align 8
  %arrayidx = getelementptr inbounds i8, i8* %25, i64 0
  %26 = load i8, i8* %arrayidx, align 1
  %conv27 = sext i8 %26 to i32
  %cmp28 = icmp eq i32 %conv27, 62
  br i1 %cmp28, label %land.lhs.true30, label %if.end

land.lhs.true30:                                  ; preds = %land.lhs.true26
  %27 = load i8*, i8** %mode, align 8
  %arrayidx31 = getelementptr inbounds i8, i8* %27, i64 1
  %28 = load i8, i8* %arrayidx31, align 1
  %conv32 = sext i8 %28 to i32
  %cmp33 = icmp eq i32 %conv32, 38
  br i1 %cmp33, label %land.lhs.true35, label %if.end

land.lhs.true35:                                  ; preds = %land.lhs.true30
  %29 = load %struct.op*, %struct.op** %last, align 8
  %30 = load %struct.op*, %struct.op** %oa, align 8
  %op_sibling36 = getelementptr inbounds %struct.op, %struct.op* %30, i32 0, i32 1
  %31 = load %struct.op*, %struct.op** %op_sibling36, align 8
  %add.ptr37 = getelementptr inbounds %struct.op, %struct.op* %31, i64 0
  %cmp38 = icmp eq %struct.op* %29, %add.ptr37
  br i1 %cmp38, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true35
  %32 = load %struct.op*, %struct.op** %last, align 8
  %op_private40 = getelementptr inbounds %struct.op, %struct.op* %32, i32 0, i32 6
  %33 = load i8, i8* %op_private40, align 1
  %conv41 = zext i8 %33 to i32
  %and42 = and i32 %conv41, -9
  %conv43 = trunc i32 %and42 to i8
  store i8 %conv43, i8* %op_private40, align 1
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true35, %land.lhs.true30, %land.lhs.true26, %land.lhs.true22, %land.lhs.true19, %land.lhs.true12, %land.lhs.true8, %land.lhs.true6, %land.lhs.true1, %land.lhs.true, %entry
  %34 = load %struct.op*, %struct.op** %o.addr, align 8
  %call = call %struct.op* @Perl_ck_fun(%struct.op* %34)
  ret %struct.op* %call
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_ck_prototype(%struct.op* %o) #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %o.addr = alloca %struct.op*, align 8
  store %struct.op* %o, %struct.op** %o.addr, align 8
  %0 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %0, i32 0, i32 5
  %1 = load i8, i8* %op_flags, align 2
  %conv = zext i8 %1 to i32
  %and = and i32 %conv, 4
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %2 = load %struct.op*, %struct.op** %o.addr, align 8
  call void @Perl_op_free(%struct.op* %2)
  %call = call %struct.op* @Perl_newDEFSVOP()
  %call1 = call %struct.op* @Perl_newUNOP(i32 19, i32 0, %struct.op* %call)
  store %struct.op* %call1, %struct.op** %retval, align 8
  br label %return

if.end:                                           ; preds = %entry
  %3 = load %struct.op*, %struct.op** %o.addr, align 8
  store %struct.op* %3, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %if.end, %if.then
  %4 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %4
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_ck_refassign(%struct.op* %o) #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %o.addr = alloca %struct.op*, align 8
  %right = alloca %struct.op*, align 8
  %left = alloca %struct.op*, align 8
  %varop = alloca %struct.op*, align 8
  %stacked = alloca i8, align 1
  %kidparent = alloca %struct.op*, align 8
  %kid = alloca %struct.op*, align 8
  %coerce = alloca %union.XOPRETANY, align 8
  store %struct.op* %o, %struct.op** %o.addr, align 8
  %0 = load %struct.op*, %struct.op** %o.addr, align 8
  %1 = bitcast %struct.op* %0 to %struct.listop*
  %op_first = getelementptr inbounds %struct.listop, %struct.listop* %1, i32 0, i32 7
  %2 = load %struct.op*, %struct.op** %op_first, align 8
  store %struct.op* %2, %struct.op** %right, align 8
  %3 = load %struct.op*, %struct.op** %right, align 8
  %op_sibling = getelementptr inbounds %struct.op, %struct.op* %3, i32 0, i32 1
  %4 = load %struct.op*, %struct.op** %op_sibling, align 8
  %add.ptr = getelementptr inbounds %struct.op, %struct.op* %4, i64 0
  store %struct.op* %add.ptr, %struct.op** %left, align 8
  %5 = load %struct.op*, %struct.op** %left, align 8
  %6 = bitcast %struct.op* %5 to %struct.unop*
  %op_first1 = getelementptr inbounds %struct.unop, %struct.unop* %6, i32 0, i32 7
  %7 = load %struct.op*, %struct.op** %op_first1, align 8
  %8 = bitcast %struct.op* %7 to %struct.unop*
  %op_first2 = getelementptr inbounds %struct.unop, %struct.unop* %8, i32 0, i32 7
  %9 = load %struct.op*, %struct.op** %op_first2, align 8
  store %struct.op* %9, %struct.op** %varop, align 8
  store i8 0, i8* %stacked, align 1
  %10 = load %struct.op*, %struct.op** %varop, align 8
  %op_private = getelementptr inbounds %struct.op, %struct.op* %10, i32 0, i32 6
  %11 = load i8, i8* %op_private, align 1
  %conv = zext i8 %11 to i32
  %and = and i32 %conv, 192
  %conv3 = trunc i32 %and to i8
  %12 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_private4 = getelementptr inbounds %struct.op, %struct.op* %12, i32 0, i32 6
  store i8 %conv3, i8* %op_private4, align 1
  %13 = load %struct.op*, %struct.op** %varop, align 8
  %op_type = getelementptr inbounds %struct.op, %struct.op* %13, i32 0, i32 4
  %bf.load = load i16, i16* %op_type, align 8
  %bf.clear = and i16 %bf.load, 511
  %bf.cast = zext i16 %bf.clear to i32
  switch i32 %bf.cast, label %sw.default [
    i32 10, label %sw.bb
    i32 11, label %sw.bb8
    i32 9, label %sw.bb13
    i32 135, label %sw.bb17
    i32 149, label %sw.bb22
    i32 15, label %sw.bb27
    i32 17, label %sw.bb34
    i32 138, label %sw.bb63
    i32 150, label %sw.bb63
  ]

sw.bb:                                            ; preds = %entry
  %14 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_private5 = getelementptr inbounds %struct.op, %struct.op* %14, i32 0, i32 6
  %15 = load i8, i8* %op_private5, align 1
  %conv6 = zext i8 %15 to i32
  %or = or i32 %conv6, 16
  %conv7 = trunc i32 %or to i8
  store i8 %conv7, i8* %op_private5, align 1
  br label %settarg

sw.bb8:                                           ; preds = %entry
  %16 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_private9 = getelementptr inbounds %struct.op, %struct.op* %16, i32 0, i32 6
  %17 = load i8, i8* %op_private9, align 1
  %conv10 = zext i8 %17 to i32
  %or11 = or i32 %conv10, 32
  %conv12 = trunc i32 %or11 to i8
  store i8 %conv12, i8* %op_private9, align 1
  br label %sw.bb13

sw.bb13:                                          ; preds = %entry, %sw.bb8
  br label %settarg

settarg:                                          ; preds = %sw.bb13, %sw.bb
  %18 = load %struct.op*, %struct.op** %varop, align 8
  %op_targ = getelementptr inbounds %struct.op, %struct.op* %18, i32 0, i32 3
  %19 = load i64, i64* %op_targ, align 8
  %20 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_targ14 = getelementptr inbounds %struct.op, %struct.op* %20, i32 0, i32 3
  store i64 %19, i64* %op_targ14, align 8
  %21 = load %struct.op*, %struct.op** %varop, align 8
  %op_targ15 = getelementptr inbounds %struct.op, %struct.op* %21, i32 0, i32 3
  store i64 0, i64* %op_targ15, align 8
  %22 = load %struct.padnamelist*, %struct.padnamelist** @PL_comppad_name, align 8
  %xpadnl_alloc = getelementptr inbounds %struct.padnamelist, %struct.padnamelist* %22, i32 0, i32 1
  %23 = load %struct.padname**, %struct.padname*** %xpadnl_alloc, align 8
  %24 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_targ16 = getelementptr inbounds %struct.op, %struct.op* %24, i32 0, i32 3
  %25 = load i64, i64* %op_targ16, align 8
  %arrayidx = getelementptr inbounds %struct.padname*, %struct.padname** %23, i64 %25
  %26 = load %struct.padname*, %struct.padname** %arrayidx, align 8
  %xpadn_gen = getelementptr inbounds %struct.padname, %struct.padname* %26, i32 0, i32 6
  store i32 2147483647, i32* %xpadn_gen, align 4
  br label %sw.epilog

sw.bb17:                                          ; preds = %entry
  %27 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_private18 = getelementptr inbounds %struct.op, %struct.op* %27, i32 0, i32 6
  %28 = load i8, i8* %op_private18, align 1
  %conv19 = zext i8 %28 to i32
  %or20 = or i32 %conv19, 16
  %conv21 = trunc i32 %or20 to i8
  store i8 %conv21, i8* %op_private18, align 1
  br label %checkgv

sw.bb22:                                          ; preds = %entry
  %29 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_private23 = getelementptr inbounds %struct.op, %struct.op* %29, i32 0, i32 6
  %30 = load i8, i8* %op_private23, align 1
  %conv24 = zext i8 %30 to i32
  %or25 = or i32 %conv24, 32
  %conv26 = trunc i32 %or25 to i8
  store i8 %conv26, i8* %op_private23, align 1
  br label %sw.bb27

sw.bb27:                                          ; preds = %entry, %sw.bb22
  br label %checkgv

checkgv:                                          ; preds = %sw.bb27, %sw.bb17
  %31 = load %struct.op*, %struct.op** %varop, align 8
  %32 = bitcast %struct.op* %31 to %struct.unop*
  %op_first28 = getelementptr inbounds %struct.unop, %struct.unop* %32, i32 0, i32 7
  %33 = load %struct.op*, %struct.op** %op_first28, align 8
  %op_type29 = getelementptr inbounds %struct.op, %struct.op* %33, i32 0, i32 4
  %bf.load30 = load i16, i16* %op_type29, align 8
  %bf.clear31 = and i16 %bf.load30, 511
  %bf.cast32 = zext i16 %bf.clear31 to i32
  %cmp = icmp ne i32 %bf.cast32, 7
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %checkgv
  br label %bad

if.end:                                           ; preds = %checkgv
  br label %detach_and_stack

detach_and_stack:                                 ; preds = %if.then50, %if.end
  %34 = load %struct.op*, %struct.op** %varop, align 8
  %call = call %struct.op* @Perl_op_sibling_splice(%struct.op* %34, %struct.op* null, i32 -1, %struct.op* null)
  store %struct.op* %call, %struct.op** %varop, align 8
  store i8 1, i8* %stacked, align 1
  br label %sw.epilog

sw.bb34:                                          ; preds = %entry
  %35 = load %struct.op*, %struct.op** %varop, align 8
  %36 = bitcast %struct.op* %35 to %struct.unop*
  %op_first35 = getelementptr inbounds %struct.unop, %struct.unop* %36, i32 0, i32 7
  %37 = load %struct.op*, %struct.op** %op_first35, align 8
  %38 = bitcast %struct.op* %37 to %struct.unop*
  %op_first36 = getelementptr inbounds %struct.unop, %struct.unop* %38, i32 0, i32 7
  %39 = load %struct.op*, %struct.op** %op_first36, align 8
  %op_sibling37 = getelementptr inbounds %struct.op, %struct.op* %39, i32 0, i32 1
  %40 = load %struct.op*, %struct.op** %op_sibling37, align 8
  %add.ptr38 = getelementptr inbounds %struct.op, %struct.op* %40, i64 0
  store %struct.op* %add.ptr38, %struct.op** %kidparent, align 8
  %41 = load %struct.op*, %struct.op** %kidparent, align 8
  %42 = bitcast %struct.op* %41 to %struct.unop*
  %op_first39 = getelementptr inbounds %struct.unop, %struct.unop* %42, i32 0, i32 7
  %43 = load %struct.op*, %struct.op** %op_first39, align 8
  store %struct.op* %43, %struct.op** %kid, align 8
  %44 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_private40 = getelementptr inbounds %struct.op, %struct.op* %44, i32 0, i32 6
  %45 = load i8, i8* %op_private40, align 1
  %conv41 = zext i8 %45 to i32
  %or42 = or i32 %conv41, 48
  %conv43 = trunc i32 %or42 to i8
  store i8 %conv43, i8* %op_private40, align 1
  %46 = load %struct.op*, %struct.op** %kid, align 8
  %op_type44 = getelementptr inbounds %struct.op, %struct.op* %46, i32 0, i32 4
  %bf.load45 = load i16, i16* %op_type44, align 8
  %bf.clear46 = and i16 %bf.load45, 511
  %bf.cast47 = zext i16 %bf.clear46 to i32
  %cmp48 = icmp eq i32 %bf.cast47, 7
  br i1 %cmp48, label %if.then50, label %if.end51

if.then50:                                        ; preds = %sw.bb34
  %47 = load %struct.op*, %struct.op** %kidparent, align 8
  store %struct.op* %47, %struct.op** %varop, align 8
  br label %detach_and_stack

if.end51:                                         ; preds = %sw.bb34
  %48 = load %struct.op*, %struct.op** %kid, align 8
  %op_type52 = getelementptr inbounds %struct.op, %struct.op* %48, i32 0, i32 4
  %bf.load53 = load i16, i16* %op_type52, align 8
  %bf.clear54 = and i16 %bf.load53, 511
  %bf.cast55 = zext i16 %bf.clear54 to i32
  %cmp56 = icmp ne i32 %bf.cast55, 387
  br i1 %cmp56, label %if.then58, label %if.end59

if.then58:                                        ; preds = %if.end51
  br label %bad

if.end59:                                         ; preds = %if.end51
  %49 = load %struct.op*, %struct.op** %kid, align 8
  %op_targ60 = getelementptr inbounds %struct.op, %struct.op* %49, i32 0, i32 3
  %50 = load i64, i64* %op_targ60, align 8
  %51 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_targ61 = getelementptr inbounds %struct.op, %struct.op* %51, i32 0, i32 3
  store i64 %50, i64* %op_targ61, align 8
  %52 = load %struct.op*, %struct.op** %kid, align 8
  %op_targ62 = getelementptr inbounds %struct.op, %struct.op* %52, i32 0, i32 3
  store i64 0, i64* %op_targ62, align 8
  br label %sw.epilog

sw.bb63:                                          ; preds = %entry, %entry
  %53 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_private64 = getelementptr inbounds %struct.op, %struct.op* %53, i32 0, i32 6
  %54 = load i8, i8* %op_private64, align 1
  %conv65 = zext i8 %54 to i32
  %or66 = or i32 %conv65, 4
  %conv67 = trunc i32 %or66 to i8
  store i8 %conv67, i8* %op_private64, align 1
  %55 = load %struct.op*, %struct.op** %varop, align 8
  call void @Perl_op_null(%struct.op* %55)
  store i8 1, i8* %stacked, align 1
  %56 = load %struct.op*, %struct.op** %left, align 8
  %57 = bitcast %struct.op* %56 to %struct.unop*
  %op_first68 = getelementptr inbounds %struct.unop, %struct.unop* %57, i32 0, i32 7
  %58 = load %struct.op*, %struct.op** %op_first68, align 8
  %call69 = call %struct.op* @Perl_op_sibling_splice(%struct.op* %58, %struct.op* null, i32 -1, %struct.op* null)
  br label %sw.epilog

sw.default:                                       ; preds = %entry
  br label %bad

bad:                                              ; preds = %sw.default, %if.then58, %if.then
  %59 = load %struct.op*, %struct.op** %varop, align 8
  %op_type70 = getelementptr inbounds %struct.op, %struct.op* %59, i32 0, i32 4
  %bf.load71 = load i16, i16* %op_type70, align 8
  %bf.clear72 = and i16 %bf.load71, 511
  %bf.cast73 = zext i16 %bf.clear72 to i32
  %cmp74 = icmp eq i32 %bf.cast73, 380
  br i1 %cmp74, label %cond.true, label %cond.false

cond.true:                                        ; preds = %bad
  %60 = load %struct.op*, %struct.op** %varop, align 8
  %call76 = call i8* @Perl_custom_op_get_field(%struct.op* %60, i32 2)
  %coerce.dive = getelementptr inbounds %union.XOPRETANY, %union.XOPRETANY* %coerce, i32 0, i32 0
  store i8* %call76, i8** %coerce.dive, align 8
  %xop_desc = bitcast %union.XOPRETANY* %coerce to i8**
  %61 = load i8*, i8** %xop_desc, align 8
  br label %cond.end

cond.false:                                       ; preds = %bad
  %62 = load %struct.op*, %struct.op** %varop, align 8
  %op_type77 = getelementptr inbounds %struct.op, %struct.op* %62, i32 0, i32 4
  %bf.load78 = load i16, i16* %op_type77, align 8
  %bf.clear79 = and i16 %bf.load78, 511
  %bf.cast80 = zext i16 %bf.clear79 to i32
  %idxprom = zext i32 %bf.cast80 to i64
  %arrayidx81 = getelementptr inbounds [0 x i8*], [0 x i8*]* @PL_op_desc, i64 0, i64 %idxprom
  %63 = load i8*, i8** %arrayidx81, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %61, %cond.true ], [ %63, %cond.false ]
  %call82 = call i8* (i8*, ...) @Perl_form(i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.122, i64 0, i64 0), i8* %cond)
  %call83 = call i32 @Perl_yyerror(i8* %call82)
  %64 = load %struct.op*, %struct.op** %o.addr, align 8
  store %struct.op* %64, %struct.op** %retval, align 8
  br label %return

sw.epilog:                                        ; preds = %sw.bb63, %if.end59, %detach_and_stack, %settarg
  %65 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cmp84 = icmp eq %struct.cop* %65, @PL_compiling
  br i1 %cmp84, label %cond.true86, label %cond.false87

cond.true86:                                      ; preds = %sw.epilog
  %66 = load i32, i32* getelementptr inbounds (%struct.cop, %struct.cop* @PL_compiling, i32 0, i32 10), align 8
  br label %cond.end88

cond.false87:                                     ; preds = %sw.epilog
  %67 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_hints = getelementptr inbounds %struct.cop, %struct.cop* %67, i32 0, i32 10
  %68 = load i32, i32* %cop_hints, align 8
  br label %cond.end88

cond.end88:                                       ; preds = %cond.false87, %cond.true86
  %cond89 = phi i32 [ %66, %cond.true86 ], [ %68, %cond.false87 ]
  %and90 = and i32 %cond89, 469762048
  %shr = lshr i32 %and90, 26
  %cmp91 = icmp eq i32 %shr, 7
  br i1 %cmp91, label %land.lhs.true, label %if.then105

land.lhs.true:                                    ; preds = %cond.end88
  %69 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cmp93 = icmp eq %struct.cop* %69, @PL_compiling
  br i1 %cmp93, label %cond.true95, label %cond.false96

cond.true95:                                      ; preds = %land.lhs.true
  %70 = load i32, i32* getelementptr inbounds (%struct.cop, %struct.cop* @PL_compiling, i32 0, i32 10), align 8
  br label %cond.end98

cond.false96:                                     ; preds = %land.lhs.true
  %71 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_hints97 = getelementptr inbounds %struct.cop, %struct.cop* %71, i32 0, i32 10
  %72 = load i32, i32* %cop_hints97, align 8
  br label %cond.end98

cond.end98:                                       ; preds = %cond.false96, %cond.true95
  %cond99 = phi i32 [ %70, %cond.true95 ], [ %72, %cond.false96 ]
  %and100 = and i32 %cond99, 131072
  %tobool = icmp ne i32 %and100, 0
  br i1 %tobool, label %cond.true101, label %cond.false104

cond.true101:                                     ; preds = %cond.end98
  %call102 = call zeroext i1 @Perl_feature_is_enabled(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.32, i64 0, i64 0), i64 11)
  br i1 %call102, label %if.end106, label %if.then105

cond.false104:                                    ; preds = %cond.end98
  br i1 false, label %if.end106, label %if.then105

if.then105:                                       ; preds = %cond.false104, %cond.true101, %cond.end88
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.33, i64 0, i64 0))
  br label %if.end106

if.end106:                                        ; preds = %if.then105, %cond.false104, %cond.true101
  call void (i32, i8*, ...) @Perl_ck_warner_d(i32 63, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.34, i64 0, i64 0))
  %73 = load i8, i8* %stacked, align 1
  %tobool107 = trunc i8 %73 to i1
  br i1 %tobool107, label %if.then108, label %if.else

if.then108:                                       ; preds = %if.end106
  %74 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %74, i32 0, i32 5
  %75 = load i8, i8* %op_flags, align 2
  %conv109 = zext i8 %75 to i32
  %or110 = or i32 %conv109, 64
  %conv111 = trunc i32 %or110 to i8
  store i8 %conv111, i8* %op_flags, align 2
  %76 = load %struct.op*, %struct.op** %o.addr, align 8
  %77 = load %struct.op*, %struct.op** %right, align 8
  %78 = load %struct.op*, %struct.op** %varop, align 8
  %call112 = call %struct.op* @Perl_op_sibling_splice(%struct.op* %76, %struct.op* %77, i32 1, %struct.op* %78)
  br label %if.end118

if.else:                                          ; preds = %if.end106
  %79 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_flags113 = getelementptr inbounds %struct.op, %struct.op* %79, i32 0, i32 5
  %80 = load i8, i8* %op_flags113, align 2
  %conv114 = zext i8 %80 to i32
  %and115 = and i32 %conv114, -65
  %conv116 = trunc i32 %and115 to i8
  store i8 %conv116, i8* %op_flags113, align 2
  %81 = load %struct.op*, %struct.op** %o.addr, align 8
  %82 = load %struct.op*, %struct.op** %right, align 8
  %call117 = call %struct.op* @Perl_op_sibling_splice(%struct.op* %81, %struct.op* %82, i32 1, %struct.op* null)
  br label %if.end118

if.end118:                                        ; preds = %if.else, %if.then108
  %83 = load %struct.op*, %struct.op** %left, align 8
  call void @Perl_op_free(%struct.op* %83)
  %84 = load %struct.op*, %struct.op** %o.addr, align 8
  store %struct.op* %84, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %if.end118, %cond.end
  %85 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %85
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_ck_repeat(%struct.op* %o) #0 {
entry:
  %o.addr = alloca %struct.op*, align 8
  %kids = alloca %struct.op*, align 8
  store %struct.op* %o, %struct.op** %o.addr, align 8
  %0 = load %struct.op*, %struct.op** %o.addr, align 8
  %1 = bitcast %struct.op* %0 to %struct.binop*
  %op_first = getelementptr inbounds %struct.binop, %struct.binop* %1, i32 0, i32 7
  %2 = load %struct.op*, %struct.op** %op_first, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %2, i32 0, i32 5
  %3 = load i8, i8* %op_flags, align 2
  %conv = zext i8 %3 to i32
  %and = and i32 %conv, 8
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %4 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_private = getelementptr inbounds %struct.op, %struct.op* %4, i32 0, i32 6
  %5 = load i8, i8* %op_private, align 1
  %conv1 = zext i8 %5 to i32
  %or = or i32 %conv1, 64
  %conv2 = trunc i32 %or to i8
  store i8 %conv2, i8* %op_private, align 1
  %6 = load %struct.op*, %struct.op** %o.addr, align 8
  %call = call %struct.op* @Perl_op_sibling_splice(%struct.op* %6, %struct.op* null, i32 1, %struct.op* null)
  store %struct.op* %call, %struct.op** %kids, align 8
  %7 = load %struct.op*, %struct.op** %kids, align 8
  %call3 = call %struct.op* @S_force_list(%struct.op* %7, i1 zeroext true)
  store %struct.op* %call3, %struct.op** %kids, align 8
  %8 = load %struct.op*, %struct.op** %o.addr, align 8
  %9 = load %struct.op*, %struct.op** %kids, align 8
  %call4 = call %struct.op* @Perl_op_sibling_splice(%struct.op* %8, %struct.op* null, i32 0, %struct.op* %9)
  br label %if.end

if.else:                                          ; preds = %entry
  %10 = load %struct.op*, %struct.op** %o.addr, align 8
  %call5 = call %struct.op* @Perl_scalar(%struct.op* %10)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %11 = load %struct.op*, %struct.op** %o.addr, align 8
  ret %struct.op* %11
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_ck_require(%struct.op* %o) #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %o.addr = alloca %struct.op*, align 8
  %gv = alloca %struct.gv*, align 8
  %kid = alloca %struct.svop*, align 8
  %hek = alloca %struct.hek*, align 8
  %hash = alloca i32, align 4
  %s = alloca i8*, align 8
  %len = alloca i64, align 8
  %sv = alloca %struct.sv*, align 8
  %was_readonly = alloca i32, align 4
  %end = alloca i8*, align 8
  %kid130 = alloca %struct.op*, align 8
  %newop = alloca %struct.op*, align 8
  store %struct.op* %o, %struct.op** %o.addr, align 8
  %0 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %0, i32 0, i32 5
  %1 = load i8, i8* %op_flags, align 2
  %conv = zext i8 %1 to i32
  %and = and i32 %conv, 4
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.end121

if.then:                                          ; preds = %entry
  %2 = load %struct.op*, %struct.op** %o.addr, align 8
  %3 = bitcast %struct.op* %2 to %struct.unop*
  %op_first = getelementptr inbounds %struct.unop, %struct.unop* %3, i32 0, i32 7
  %4 = load %struct.op*, %struct.op** %op_first, align 8
  %5 = bitcast %struct.op* %4 to %struct.svop*
  store %struct.svop* %5, %struct.svop** %kid, align 8
  %6 = load %struct.svop*, %struct.svop** %kid, align 8
  %op_type = getelementptr inbounds %struct.svop, %struct.svop* %6, i32 0, i32 4
  %bf.load = load i16, i16* %op_type, align 8
  %bf.clear = and i16 %bf.load, 511
  %bf.cast = zext i16 %bf.clear to i32
  %cmp = icmp eq i32 %bf.cast, 5
  br i1 %cmp, label %if.then2, label %if.end120

if.then2:                                         ; preds = %if.then
  %7 = load %struct.svop*, %struct.svop** %kid, align 8
  %op_sv = getelementptr inbounds %struct.svop, %struct.svop* %7, i32 0, i32 7
  %8 = load %struct.sv*, %struct.sv** %op_sv, align 8
  store %struct.sv* %8, %struct.sv** %sv, align 8
  %9 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %9, i32 0, i32 2
  %10 = load i32, i32* %sv_flags, align 4
  %and3 = and i32 %10, 134283264
  store i32 %and3, i32* %was_readonly, align 4
  %11 = load %struct.svop*, %struct.svop** %kid, align 8
  %op_private = getelementptr inbounds %struct.svop, %struct.svop* %11, i32 0, i32 6
  %12 = load i8, i8* %op_private, align 1
  %conv4 = zext i8 %12 to i32
  %and5 = and i32 %conv4, 64
  %tobool6 = icmp ne i32 %and5, 0
  br i1 %tobool6, label %if.then7, label %if.else

if.then7:                                         ; preds = %if.then2
  %13 = load i32, i32* %was_readonly, align 4
  %tobool8 = icmp ne i32 %13, 0
  br i1 %tobool8, label %if.then9, label %if.end

if.then9:                                         ; preds = %if.then7
  %14 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags10 = getelementptr inbounds %struct.sv, %struct.sv* %14, i32 0, i32 2
  %15 = load i32, i32* %sv_flags10, align 4
  %and11 = and i32 %15, -134283265
  store i32 %and11, i32* %sv_flags10, align 4
  br label %if.end

if.end:                                           ; preds = %if.then9, %if.then7
  %16 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags12 = getelementptr inbounds %struct.sv, %struct.sv* %16, i32 0, i32 2
  %17 = load i32, i32* %sv_flags12, align 4
  %and13 = and i32 %17, 268435456
  %tobool14 = icmp ne i32 %and13, 0
  br i1 %tobool14, label %if.then15, label %if.end16

if.then15:                                        ; preds = %if.end
  %18 = load %struct.sv*, %struct.sv** %sv, align 8
  call void @Perl_sv_force_normal_flags(%struct.sv* %18, i32 0)
  br label %if.end16

if.end16:                                         ; preds = %if.then15, %if.end
  %19 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %19, i32 0, i32 3
  %svu_pv = bitcast %union.anon* %sv_u to i8**
  %20 = load i8*, i8** %svu_pv, align 8
  store i8* %20, i8** %s, align 8
  %21 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %21, i32 0, i32 0
  %22 = load i8*, i8** %sv_any, align 8
  %23 = bitcast i8* %22 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %23, i32 0, i32 2
  %24 = load i64, i64* %xpv_cur, align 8
  store i64 %24, i64* %len, align 8
  %25 = load i8*, i8** %s, align 8
  %26 = load i64, i64* %len, align 8
  %add.ptr = getelementptr inbounds i8, i8* %25, i64 %26
  store i8* %add.ptr, i8** %end, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end16
  %27 = load i8*, i8** %s, align 8
  %28 = load i8*, i8** %end, align 8
  %cmp17 = icmp ult i8* %27, %28
  br i1 %cmp17, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %29 = load i8*, i8** %s, align 8
  %30 = load i8, i8* %29, align 1
  %conv19 = sext i8 %30 to i32
  %cmp20 = icmp eq i32 %conv19, 58
  br i1 %cmp20, label %land.lhs.true, label %if.end28

land.lhs.true:                                    ; preds = %for.body
  %31 = load i8*, i8** %s, align 8
  %arrayidx = getelementptr inbounds i8, i8* %31, i64 1
  %32 = load i8, i8* %arrayidx, align 1
  %conv22 = sext i8 %32 to i32
  %cmp23 = icmp eq i32 %conv22, 58
  br i1 %cmp23, label %if.then25, label %if.end28

if.then25:                                        ; preds = %land.lhs.true
  %33 = load i8*, i8** %s, align 8
  store i8 47, i8* %33, align 1
  %34 = load i8*, i8** %s, align 8
  %add.ptr26 = getelementptr inbounds i8, i8* %34, i64 1
  %35 = load i8*, i8** %s, align 8
  %add.ptr27 = getelementptr inbounds i8, i8* %35, i64 2
  %36 = load i8*, i8** %end, align 8
  %37 = load i8*, i8** %s, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %36 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %37 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub = sub nsw i64 %sub.ptr.sub, 1
  %mul = mul i64 %sub, 1
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %add.ptr26, i8* align 1 %add.ptr27, i64 %mul, i1 false)
  %38 = load i8*, i8** %end, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %38, i32 -1
  store i8* %incdec.ptr, i8** %end, align 8
  br label %if.end28

if.end28:                                         ; preds = %if.then25, %land.lhs.true, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end28
  %39 = load i8*, i8** %s, align 8
  %incdec.ptr29 = getelementptr inbounds i8, i8* %39, i32 1
  store i8* %incdec.ptr29, i8** %s, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %do.body

do.body:                                          ; preds = %for.end
  br label %do.body30

do.body30:                                        ; preds = %do.body
  %40 = load i8*, i8** %end, align 8
  %41 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_u31 = getelementptr inbounds %struct.sv, %struct.sv* %41, i32 0, i32 3
  %svu_pv32 = bitcast %union.anon* %sv_u31 to i8**
  %42 = load i8*, i8** %svu_pv32, align 8
  %sub.ptr.lhs.cast33 = ptrtoint i8* %40 to i64
  %sub.ptr.rhs.cast34 = ptrtoint i8* %42 to i64
  %sub.ptr.sub35 = sub i64 %sub.ptr.lhs.cast33, %sub.ptr.rhs.cast34
  %43 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any36 = getelementptr inbounds %struct.sv, %struct.sv* %43, i32 0, i32 0
  %44 = load i8*, i8** %sv_any36, align 8
  %45 = bitcast i8* %44 to %struct.xpv*
  %xpv_cur37 = getelementptr inbounds %struct.xpv, %struct.xpv* %45, i32 0, i32 2
  store i64 %sub.ptr.sub35, i64* %xpv_cur37, align 8
  br label %do.end

do.end:                                           ; preds = %do.body30
  br label %do.end38

do.end38:                                         ; preds = %do.end
  %46 = load %struct.sv*, %struct.sv** %sv, align 8
  call void @Perl_sv_catpvn_flags(%struct.sv* %46, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.123, i64 0, i64 0), i64 3, i32 2)
  %47 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_u39 = getelementptr inbounds %struct.sv, %struct.sv* %47, i32 0, i32 3
  %svu_pv40 = bitcast %union.anon* %sv_u39 to i8**
  %48 = load i8*, i8** %svu_pv40, align 8
  %49 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any41 = getelementptr inbounds %struct.sv, %struct.sv* %49, i32 0, i32 0
  %50 = load i8*, i8** %sv_any41, align 8
  %51 = bitcast i8* %50 to %struct.xpv*
  %xpv_cur42 = getelementptr inbounds %struct.xpv, %struct.xpv* %51, i32 0, i32 2
  %52 = load i64, i64* %xpv_cur42, align 8
  %call = call i32 @S_perl_hash_one_at_a_time_hard(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.70, i64 0, i64 0), i8* %48, i64 %52)
  store i32 %call, i32* %hash, align 4
  %53 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_u43 = getelementptr inbounds %struct.sv, %struct.sv* %53, i32 0, i32 3
  %svu_pv44 = bitcast %union.anon* %sv_u43 to i8**
  %54 = load i8*, i8** %svu_pv44, align 8
  %55 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any45 = getelementptr inbounds %struct.sv, %struct.sv* %55, i32 0, i32 0
  %56 = load i8*, i8** %sv_any45, align 8
  %57 = bitcast i8* %56 to %struct.xpv*
  %xpv_cur46 = getelementptr inbounds %struct.xpv, %struct.xpv* %57, i32 0, i32 2
  %58 = load i64, i64* %xpv_cur46, align 8
  %59 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags47 = getelementptr inbounds %struct.sv, %struct.sv* %59, i32 0, i32 2
  %60 = load i32, i32* %sv_flags47, align 4
  %and48 = and i32 %60, 536870912
  %tobool49 = icmp ne i32 %and48, 0
  %61 = zext i1 %tobool49 to i64
  %cond = select i1 %tobool49, i32 -1, i32 1
  %conv50 = sext i32 %cond to i64
  %mul51 = mul nsw i64 %58, %conv50
  %conv52 = trunc i64 %mul51 to i32
  %62 = load i32, i32* %hash, align 4
  %call53 = call %struct.hek* @Perl_share_hek(i8* %54, i32 %conv52, i32 %62)
  store %struct.hek* %call53, %struct.hek** %hek, align 8
  %63 = load %struct.sv*, %struct.sv** %sv, align 8
  %64 = load %struct.hek*, %struct.hek** %hek, align 8
  call void @Perl_sv_sethek(%struct.sv* %63, %struct.hek* %64)
  %65 = load %struct.hek*, %struct.hek** %hek, align 8
  call void @Perl_unshare_hek(%struct.hek* %65)
  %66 = load i32, i32* %was_readonly, align 4
  %67 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags54 = getelementptr inbounds %struct.sv, %struct.sv* %67, i32 0, i32 2
  %68 = load i32, i32* %sv_flags54, align 4
  %or = or i32 %68, %66
  store i32 %or, i32* %sv_flags54, align 4
  br label %if.end119

if.else:                                          ; preds = %if.then2
  %69 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags55 = getelementptr inbounds %struct.sv, %struct.sv* %69, i32 0, i32 2
  %70 = load i32, i32* %sv_flags55, align 4
  %and56 = and i32 %70, 1024
  %tobool57 = icmp ne i32 %and56, 0
  br i1 %tobool57, label %land.lhs.true58, label %if.end118

land.lhs.true58:                                  ; preds = %if.else
  %71 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags59 = getelementptr inbounds %struct.sv, %struct.sv* %71, i32 0, i32 2
  %72 = load i32, i32* %sv_flags59, align 4
  %and60 = and i32 %72, 768
  %tobool61 = icmp ne i32 %and60, 0
  br i1 %tobool61, label %if.end118, label %land.lhs.true62

land.lhs.true62:                                  ; preds = %land.lhs.true58
  %73 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags63 = getelementptr inbounds %struct.sv, %struct.sv* %73, i32 0, i32 2
  %74 = load i32, i32* %sv_flags63, align 4
  %and64 = and i32 %74, 2097152
  %tobool65 = icmp ne i32 %and64, 0
  br i1 %tobool65, label %if.end118, label %land.lhs.true66

land.lhs.true66:                                  ; preds = %land.lhs.true62
  %75 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags67 = getelementptr inbounds %struct.sv, %struct.sv* %75, i32 0, i32 2
  %76 = load i32, i32* %sv_flags67, align 4
  %and68 = and i32 %76, 14680064
  %tobool69 = icmp ne i32 %and68, 0
  br i1 %tobool69, label %land.lhs.true70, label %if.then73

land.lhs.true70:                                  ; preds = %land.lhs.true66
  %77 = load %struct.sv*, %struct.sv** %sv, align 8
  %call71 = call %struct.magic* @Perl_mg_find(%struct.sv* %77, i32 86)
  %tobool72 = icmp ne %struct.magic* %call71, null
  br i1 %tobool72, label %if.end118, label %if.then73

if.then73:                                        ; preds = %land.lhs.true70, %land.lhs.true66
  %78 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags74 = getelementptr inbounds %struct.sv, %struct.sv* %78, i32 0, i32 2
  %79 = load i32, i32* %sv_flags74, align 4
  %and75 = and i32 %79, 2098176
  %cmp76 = icmp eq i32 %and75, 1024
  br i1 %cmp76, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then73
  %80 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any78 = getelementptr inbounds %struct.sv, %struct.sv* %80, i32 0, i32 0
  %81 = load i8*, i8** %sv_any78, align 8
  %82 = bitcast i8* %81 to %struct.xpv*
  %xpv_cur79 = getelementptr inbounds %struct.xpv, %struct.xpv* %82, i32 0, i32 2
  %83 = load i64, i64* %xpv_cur79, align 8
  store i64 %83, i64* %len, align 8
  %84 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_u80 = getelementptr inbounds %struct.sv, %struct.sv* %84, i32 0, i32 3
  %svu_pv81 = bitcast %union.anon* %sv_u80 to i8**
  %85 = load i8*, i8** %svu_pv81, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.then73
  %86 = load %struct.sv*, %struct.sv** %sv, align 8
  %call82 = call i8* @Perl_sv_2pv_flags(%struct.sv* %86, i64* %len, i32 2)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond83 = phi i8* [ %85, %cond.true ], [ %call82, %cond.false ]
  store i8* %cond83, i8** %s, align 8
  %87 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_refcnt = getelementptr inbounds %struct.sv, %struct.sv* %87, i32 0, i32 1
  %88 = load i32, i32* %sv_refcnt, align 8
  %cmp84 = icmp ugt i32 %88, 1
  br i1 %cmp84, label %if.then86, label %if.else98

if.then86:                                        ; preds = %cond.end
  %89 = load i8*, i8** %s, align 8
  %90 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags87 = getelementptr inbounds %struct.sv, %struct.sv* %90, i32 0, i32 2
  %91 = load i32, i32* %sv_flags87, align 4
  %and88 = and i32 %91, 536870912
  %tobool89 = icmp ne i32 %and88, 0
  br i1 %tobool89, label %cond.true90, label %cond.false92

cond.true90:                                      ; preds = %if.then86
  %92 = load i64, i64* %len, align 8
  %sub91 = sub nsw i64 0, %92
  br label %cond.end93

cond.false92:                                     ; preds = %if.then86
  %93 = load i64, i64* %len, align 8
  br label %cond.end93

cond.end93:                                       ; preds = %cond.false92, %cond.true90
  %cond94 = phi i64 [ %sub91, %cond.true90 ], [ %93, %cond.false92 ]
  %conv95 = trunc i64 %cond94 to i32
  %call96 = call %struct.sv* @Perl_newSVpvn_share(i8* %89, i32 %conv95, i32 0)
  %94 = load %struct.svop*, %struct.svop** %kid, align 8
  %op_sv97 = getelementptr inbounds %struct.svop, %struct.svop* %94, i32 0, i32 7
  store %struct.sv* %call96, %struct.sv** %op_sv97, align 8
  %95 = load %struct.sv*, %struct.sv** %sv, align 8
  %96 = bitcast %struct.sv* %95 to i8*
  %97 = bitcast i8* %96 to %struct.sv*
  call void @S_SvREFCNT_dec_NN(%struct.sv* %97)
  br label %if.end117

if.else98:                                        ; preds = %cond.end
  %98 = load i32, i32* %was_readonly, align 4
  %tobool99 = icmp ne i32 %98, 0
  br i1 %tobool99, label %if.then100, label %if.end103

if.then100:                                       ; preds = %if.else98
  %99 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags101 = getelementptr inbounds %struct.sv, %struct.sv* %99, i32 0, i32 2
  %100 = load i32, i32* %sv_flags101, align 4
  %and102 = and i32 %100, -134283265
  store i32 %and102, i32* %sv_flags101, align 4
  br label %if.end103

if.end103:                                        ; preds = %if.then100, %if.else98
  %101 = load i8*, i8** %s, align 8
  %102 = load i64, i64* %len, align 8
  %call104 = call i32 @S_perl_hash_one_at_a_time_hard(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.70, i64 0, i64 0), i8* %101, i64 %102)
  store i32 %call104, i32* %hash, align 4
  %103 = load i8*, i8** %s, align 8
  %104 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags105 = getelementptr inbounds %struct.sv, %struct.sv* %104, i32 0, i32 2
  %105 = load i32, i32* %sv_flags105, align 4
  %and106 = and i32 %105, 536870912
  %tobool107 = icmp ne i32 %and106, 0
  br i1 %tobool107, label %cond.true108, label %cond.false110

cond.true108:                                     ; preds = %if.end103
  %106 = load i64, i64* %len, align 8
  %sub109 = sub nsw i64 0, %106
  br label %cond.end111

cond.false110:                                    ; preds = %if.end103
  %107 = load i64, i64* %len, align 8
  br label %cond.end111

cond.end111:                                      ; preds = %cond.false110, %cond.true108
  %cond112 = phi i64 [ %sub109, %cond.true108 ], [ %107, %cond.false110 ]
  %conv113 = trunc i64 %cond112 to i32
  %108 = load i32, i32* %hash, align 4
  %call114 = call %struct.hek* @Perl_share_hek(i8* %103, i32 %conv113, i32 %108)
  store %struct.hek* %call114, %struct.hek** %hek, align 8
  %109 = load %struct.sv*, %struct.sv** %sv, align 8
  %110 = load %struct.hek*, %struct.hek** %hek, align 8
  call void @Perl_sv_sethek(%struct.sv* %109, %struct.hek* %110)
  %111 = load %struct.hek*, %struct.hek** %hek, align 8
  call void @Perl_unshare_hek(%struct.hek* %111)
  %112 = load i32, i32* %was_readonly, align 4
  %113 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags115 = getelementptr inbounds %struct.sv, %struct.sv* %113, i32 0, i32 2
  %114 = load i32, i32* %sv_flags115, align 4
  %or116 = or i32 %114, %112
  store i32 %or116, i32* %sv_flags115, align 4
  br label %if.end117

if.end117:                                        ; preds = %cond.end111, %cond.end93
  br label %if.end118

if.end118:                                        ; preds = %if.end117, %land.lhs.true70, %land.lhs.true62, %land.lhs.true58, %if.else
  br label %if.end119

if.end119:                                        ; preds = %if.end118, %do.end38
  br label %if.end120

if.end120:                                        ; preds = %if.end119, %if.then
  br label %if.end121

if.end121:                                        ; preds = %if.end120, %entry
  %115 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_flags122 = getelementptr inbounds %struct.op, %struct.op* %115, i32 0, i32 5
  %116 = load i8, i8* %op_flags122, align 2
  %conv123 = zext i8 %116 to i32
  %and124 = and i32 %conv123, 128
  %tobool125 = icmp ne i32 %and124, 0
  br i1 %tobool125, label %if.end142, label %land.lhs.true126

land.lhs.true126:                                 ; preds = %if.end121
  %call127 = call %struct.gv* @Perl_gv_override(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.124, i64 0, i64 0), i64 7)
  store %struct.gv* %call127, %struct.gv** %gv, align 8
  %tobool128 = icmp ne %struct.gv* %call127, null
  br i1 %tobool128, label %if.then129, label %if.end142

if.then129:                                       ; preds = %land.lhs.true126
  %117 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_flags131 = getelementptr inbounds %struct.op, %struct.op* %117, i32 0, i32 5
  %118 = load i8, i8* %op_flags131, align 2
  %conv132 = zext i8 %118 to i32
  %and133 = and i32 %conv132, 4
  %tobool134 = icmp ne i32 %and133, 0
  br i1 %tobool134, label %if.then135, label %if.else138

if.then135:                                       ; preds = %if.then129
  %119 = load %struct.op*, %struct.op** %o.addr, align 8
  %120 = bitcast %struct.op* %119 to %struct.unop*
  %op_first136 = getelementptr inbounds %struct.unop, %struct.unop* %120, i32 0, i32 7
  %121 = load %struct.op*, %struct.op** %op_first136, align 8
  store %struct.op* %121, %struct.op** %kid130, align 8
  %122 = load %struct.op*, %struct.op** %o.addr, align 8
  %call137 = call %struct.op* @Perl_op_sibling_splice(%struct.op* %122, %struct.op* null, i32 -1, %struct.op* null)
  br label %if.end140

if.else138:                                       ; preds = %if.then129
  %call139 = call %struct.op* @Perl_newDEFSVOP()
  store %struct.op* %call139, %struct.op** %kid130, align 8
  br label %if.end140

if.end140:                                        ; preds = %if.else138, %if.then135
  %123 = load %struct.op*, %struct.op** %o.addr, align 8
  call void @Perl_op_free(%struct.op* %123)
  %124 = load %struct.gv*, %struct.gv** %gv, align 8
  %125 = load %struct.op*, %struct.op** %kid130, align 8
  %call141 = call %struct.op* @S_new_entersubop(%struct.gv* %124, %struct.op* %125)
  store %struct.op* %call141, %struct.op** %newop, align 8
  %126 = load %struct.op*, %struct.op** %newop, align 8
  store %struct.op* %126, %struct.op** %retval, align 8
  br label %return

if.end142:                                        ; preds = %land.lhs.true126, %if.end121
  %127 = load %struct.op*, %struct.op** %o.addr, align 8
  %call143 = call %struct.op* @Perl_ck_fun(%struct.op* %127)
  store %struct.op* %call143, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %if.end142, %if.end140
  %128 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %128
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #2

declare dso_local %struct.magic* @Perl_mg_find(%struct.sv*, i32) #3

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_ck_return(%struct.op* %o) #0 {
entry:
  %o.addr = alloca %struct.op*, align 8
  %kid = alloca %struct.op*, align 8
  store %struct.op* %o, %struct.op** %o.addr, align 8
  %0 = load %struct.op*, %struct.op** %o.addr, align 8
  %1 = bitcast %struct.op* %0 to %struct.listop*
  %op_first = getelementptr inbounds %struct.listop, %struct.listop* %1, i32 0, i32 7
  %2 = load %struct.op*, %struct.op** %op_first, align 8
  %op_sibling = getelementptr inbounds %struct.op, %struct.op* %2, i32 0, i32 1
  %3 = load %struct.op*, %struct.op** %op_sibling, align 8
  %add.ptr = getelementptr inbounds %struct.op, %struct.op* %3, i64 0
  store %struct.op* %add.ptr, %struct.op** %kid, align 8
  %4 = load %struct.cv*, %struct.cv** @PL_compcv, align 8
  %sv_any = getelementptr inbounds %struct.cv, %struct.cv* %4, i32 0, i32 0
  %5 = load %struct.xpvcv*, %struct.xpvcv** %sv_any, align 8
  %6 = bitcast %struct.xpvcv* %5 to i8*
  %7 = bitcast i8* %6 to %struct.xpvcv*
  %xcv_flags = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %7, i32 0, i32 12
  %8 = load i32, i32* %xcv_flags, align 4
  %and = and i32 %8, 2
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then
  %9 = load %struct.op*, %struct.op** %kid, align 8
  %tobool1 = icmp ne %struct.op* %9, null
  br i1 %tobool1, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %10 = load %struct.op*, %struct.op** %kid, align 8
  %call = call %struct.op* @Perl_op_lvalue_flags(%struct.op* %10, i32 187, i32 0)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %11 = load %struct.op*, %struct.op** %kid, align 8
  %op_sibling2 = getelementptr inbounds %struct.op, %struct.op* %11, i32 0, i32 1
  %12 = load %struct.op*, %struct.op** %op_sibling2, align 8
  %add.ptr3 = getelementptr inbounds %struct.op, %struct.op* %12, i64 0
  store %struct.op* %add.ptr3, %struct.op** %kid, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end

if.end:                                           ; preds = %for.end, %entry
  %13 = load %struct.op*, %struct.op** %o.addr, align 8
  ret %struct.op* %13
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_ck_select(%struct.op* %o) #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %o.addr = alloca %struct.op*, align 8
  %kid = alloca %struct.op*, align 8
  store %struct.op* %o, %struct.op** %o.addr, align 8
  %0 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %0, i32 0, i32 5
  %1 = load i8, i8* %op_flags, align 2
  %conv = zext i8 %1 to i32
  %and = and i32 %conv, 4
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.end8

if.then:                                          ; preds = %entry
  %2 = load %struct.op*, %struct.op** %o.addr, align 8
  %3 = bitcast %struct.op* %2 to %struct.listop*
  %op_first = getelementptr inbounds %struct.listop, %struct.listop* %3, i32 0, i32 7
  %4 = load %struct.op*, %struct.op** %op_first, align 8
  %op_sibling = getelementptr inbounds %struct.op, %struct.op* %4, i32 0, i32 1
  %5 = load %struct.op*, %struct.op** %op_sibling, align 8
  %add.ptr = getelementptr inbounds %struct.op, %struct.op* %5, i64 0
  store %struct.op* %add.ptr, %struct.op** %kid, align 8
  %6 = load %struct.op*, %struct.op** %kid, align 8
  %tobool1 = icmp ne %struct.op* %6, null
  br i1 %tobool1, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %if.then
  %7 = load %struct.op*, %struct.op** %kid, align 8
  %op_sibling2 = getelementptr inbounds %struct.op, %struct.op* %7, i32 0, i32 1
  %8 = load %struct.op*, %struct.op** %op_sibling2, align 8
  %tobool3 = icmp ne %struct.op* %8, null
  br i1 %tobool3, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true
  br i1 true, label %if.then4, label %if.end

cond.false:                                       ; preds = %land.lhs.true
  br i1 false, label %if.then4, label %if.end

if.then4:                                         ; preds = %cond.false, %cond.true
  br label %do.body

do.body:                                          ; preds = %if.then4
  %9 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type = getelementptr inbounds %struct.op, %struct.op* %9, i32 0, i32 4
  %bf.load = load i16, i16* %op_type, align 8
  %bf.clear = and i16 %bf.load, -512
  %bf.set = or i16 %bf.clear, 231
  store i16 %bf.set, i16* %op_type, align 8
  %10 = load %struct.op* ()*, %struct.op* ()** getelementptr inbounds ([0 x %struct.op* ()*], [0 x %struct.op* ()*]* @PL_ppaddr, i64 0, i64 231), align 8
  %11 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_ppaddr = getelementptr inbounds %struct.op, %struct.op* %11, i32 0, i32 2
  store %struct.op* ()* %10, %struct.op* ()** %op_ppaddr, align 8
  br label %do.end

do.end:                                           ; preds = %do.body
  %12 = load %struct.op*, %struct.op** %o.addr, align 8
  %call = call %struct.op* @Perl_ck_fun(%struct.op* %12)
  store %struct.op* %call, %struct.op** %o.addr, align 8
  %13 = load %struct.op*, %struct.op** %o.addr, align 8
  %call5 = call %struct.op* @S_op_std_init(%struct.op* %13)
  %call6 = call %struct.op* @S_op_integerize(%struct.op* %call5)
  %call7 = call %struct.op* @S_fold_constants(%struct.op* %call6)
  store %struct.op* %call7, %struct.op** %retval, align 8
  br label %return

if.end:                                           ; preds = %cond.false, %cond.true, %if.then
  br label %if.end8

if.end8:                                          ; preds = %if.end, %entry
  %14 = load %struct.op*, %struct.op** %o.addr, align 8
  %call9 = call %struct.op* @Perl_ck_fun(%struct.op* %14)
  store %struct.op* %call9, %struct.op** %o.addr, align 8
  %15 = load %struct.op*, %struct.op** %o.addr, align 8
  %16 = bitcast %struct.op* %15 to %struct.listop*
  %op_first10 = getelementptr inbounds %struct.listop, %struct.listop* %16, i32 0, i32 7
  %17 = load %struct.op*, %struct.op** %op_first10, align 8
  %op_sibling11 = getelementptr inbounds %struct.op, %struct.op* %17, i32 0, i32 1
  %18 = load %struct.op*, %struct.op** %op_sibling11, align 8
  %add.ptr12 = getelementptr inbounds %struct.op, %struct.op* %18, i64 0
  store %struct.op* %add.ptr12, %struct.op** %kid, align 8
  %19 = load %struct.op*, %struct.op** %kid, align 8
  %tobool13 = icmp ne %struct.op* %19, null
  br i1 %tobool13, label %land.lhs.true14, label %if.end23

land.lhs.true14:                                  ; preds = %if.end8
  %20 = load %struct.op*, %struct.op** %kid, align 8
  %op_type15 = getelementptr inbounds %struct.op, %struct.op* %20, i32 0, i32 4
  %bf.load16 = load i16, i16* %op_type15, align 8
  %bf.clear17 = and i16 %bf.load16, 511
  %bf.cast = zext i16 %bf.clear17 to i32
  %cmp = icmp eq i32 %bf.cast, 14
  br i1 %cmp, label %if.then19, label %if.end23

if.then19:                                        ; preds = %land.lhs.true14
  %21 = load %struct.op*, %struct.op** %kid, align 8
  %op_private = getelementptr inbounds %struct.op, %struct.op* %21, i32 0, i32 6
  %22 = load i8, i8* %op_private, align 1
  %conv20 = zext i8 %22 to i32
  %and21 = and i32 %conv20, -3
  %conv22 = trunc i32 %and21 to i8
  store i8 %conv22, i8* %op_private, align 1
  br label %if.end23

if.end23:                                         ; preds = %if.then19, %land.lhs.true14, %if.end8
  %23 = load %struct.op*, %struct.op** %o.addr, align 8
  store %struct.op* %23, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %if.end23, %do.end
  %24 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %24
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_ck_shift(%struct.op* %o) #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %o.addr = alloca %struct.op*, align 8
  %type = alloca i32, align 4
  %argop = alloca %struct.op*, align 8
  store %struct.op* %o, %struct.op** %o.addr, align 8
  %0 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type = getelementptr inbounds %struct.op, %struct.op* %0, i32 0, i32 4
  %bf.load = load i16, i16* %op_type, align 8
  %bf.clear = and i16 %bf.load, 511
  %bf.cast = zext i16 %bf.clear to i32
  store i32 %bf.cast, i32* %type, align 4
  %1 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %1, i32 0, i32 5
  %2 = load i8, i8* %op_flags, align 2
  %conv = zext i8 %2 to i32
  %and = and i32 %conv, 4
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.end11, label %if.then

if.then:                                          ; preds = %entry
  %3 = load %struct.cv*, %struct.cv** @PL_compcv, align 8
  %sv_any = getelementptr inbounds %struct.cv, %struct.cv* %3, i32 0, i32 0
  %4 = load %struct.xpvcv*, %struct.xpvcv** %sv_any, align 8
  %5 = bitcast %struct.xpvcv* %4 to i8*
  %6 = bitcast i8* %5 to %struct.xpvcv*
  %xcv_flags = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %6, i32 0, i32 12
  %7 = load i32, i32* %xcv_flags, align 4
  %and1 = and i32 %7, 256
  %tobool2 = icmp ne i32 %and1, 0
  br i1 %tobool2, label %if.end, label %if.then3

if.then3:                                         ; preds = %if.then
  %8 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_flags4 = getelementptr inbounds %struct.op, %struct.op* %8, i32 0, i32 5
  %9 = load i8, i8* %op_flags4, align 2
  %conv5 = zext i8 %9 to i32
  %or = or i32 %conv5, 128
  %conv6 = trunc i32 %or to i8
  store i8 %conv6, i8* %op_flags4, align 2
  %10 = load %struct.op*, %struct.op** %o.addr, align 8
  store %struct.op* %10, %struct.op** %retval, align 8
  br label %return

if.end:                                           ; preds = %if.then
  %11 = load %struct.gv*, %struct.gv** @PL_argvgv, align 8
  %call = call %struct.op* @Perl_newGVOP(i32 7, i32 0, %struct.gv* %11)
  %call7 = call %struct.op* @Perl_scalar(%struct.op* %call)
  %call8 = call %struct.op* @Perl_newUNOP(i32 135, i32 0, %struct.op* %call7)
  store %struct.op* %call8, %struct.op** %argop, align 8
  %12 = load %struct.op*, %struct.op** %o.addr, align 8
  call void @Perl_op_free(%struct.op* %12)
  %13 = load i32, i32* %type, align 4
  %14 = load %struct.op*, %struct.op** %argop, align 8
  %call9 = call %struct.op* @Perl_scalar(%struct.op* %14)
  %call10 = call %struct.op* @Perl_newUNOP(i32 %13, i32 0, %struct.op* %call9)
  store %struct.op* %call10, %struct.op** %retval, align 8
  br label %return

if.end11:                                         ; preds = %entry
  %15 = load %struct.op*, %struct.op** %o.addr, align 8
  %call12 = call %struct.op* @Perl_ck_fun(%struct.op* %15)
  %call13 = call %struct.op* @Perl_scalar(%struct.op* %call12)
  store %struct.op* %call13, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %if.end11, %if.end, %if.then3
  %16 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %16
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_ck_sort(%struct.op* %o) #0 {
entry:
  %o.addr = alloca %struct.op*, align 8
  %firstkid = alloca %struct.op*, align 8
  %kid = alloca %struct.op*, align 8
  %hinthv = alloca %struct.hv*, align 8
  %stacked = alloca i8, align 1
  %svp = alloca %struct.sv**, align 8
  %sorthints = alloca i32, align 4
  %kid39 = alloca %struct.op*, align 8
  %tmpbuf = alloca [256 x i8], align 16
  %len = alloca i64, align 8
  %off = alloca i64, align 8
  %name = alloca i8*, align 8
  %fq = alloca %struct.sv*, align 8
  %padop = alloca %struct.op*, align 8
  store %struct.op* %o, %struct.op** %o.addr, align 8
  %0 = load i32, i32* getelementptr inbounds (%struct.cop, %struct.cop* @PL_compiling, i32 0, i32 10), align 8
  %and = and i32 %0, 131072
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %1 = load %struct.gv*, %struct.gv** @PL_hintgv, align 8
  %sv_u = getelementptr inbounds %struct.gv, %struct.gv* %1, i32 0, i32 3
  %svu_gp = bitcast %union.anon.3* %sv_u to %struct.gp**
  %2 = load %struct.gp*, %struct.gp** %svu_gp, align 8
  %add.ptr = getelementptr inbounds %struct.gp, %struct.gp* %2, i64 0
  %gp_hv = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr, i32 0, i32 5
  %3 = load %struct.hv*, %struct.hv** %gp_hv, align 8
  br label %cond.end

cond.false:                                       ; preds = %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.hv* [ %3, %cond.true ], [ null, %cond.false ]
  store %struct.hv* %cond, %struct.hv** %hinthv, align 8
  %4 = load %struct.hv*, %struct.hv** %hinthv, align 8
  %tobool1 = icmp ne %struct.hv* %4, null
  br i1 %tobool1, label %if.then, label %if.end26

if.then:                                          ; preds = %cond.end
  %5 = load %struct.hv*, %struct.hv** %hinthv, align 8
  %call = call i8* @Perl_hv_common(%struct.hv* %5, %struct.sv* null, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.125, i64 0, i64 0), i64 4, i32 0, i32 32, %struct.sv* null, i32 0)
  %6 = bitcast i8* %call to %struct.sv**
  store %struct.sv** %6, %struct.sv*** %svp, align 8
  %7 = load %struct.sv**, %struct.sv*** %svp, align 8
  %tobool2 = icmp ne %struct.sv** %7, null
  br i1 %tobool2, label %if.then3, label %if.end25

if.then3:                                         ; preds = %if.then
  %8 = load %struct.sv**, %struct.sv*** %svp, align 8
  %9 = load %struct.sv*, %struct.sv** %8, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %9, i32 0, i32 2
  %10 = load i32, i32* %sv_flags, align 4
  %and4 = and i32 %10, 2097408
  %cmp = icmp eq i32 %and4, 256
  br i1 %cmp, label %cond.true5, label %cond.false6

cond.true5:                                       ; preds = %if.then3
  %11 = load %struct.sv**, %struct.sv*** %svp, align 8
  %12 = load %struct.sv*, %struct.sv** %11, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %12, i32 0, i32 0
  %13 = load i8*, i8** %sv_any, align 8
  %14 = bitcast i8* %13 to %struct.xpviv*
  %xiv_u = getelementptr inbounds %struct.xpviv, %struct.xpviv* %14, i32 0, i32 4
  %xivu_iv = bitcast %union._xivu* %xiv_u to i64*
  %15 = load i64, i64* %xivu_iv, align 8
  br label %cond.end8

cond.false6:                                      ; preds = %if.then3
  %16 = load %struct.sv**, %struct.sv*** %svp, align 8
  %17 = load %struct.sv*, %struct.sv** %16, align 8
  %call7 = call i64 @Perl_sv_2iv_flags(%struct.sv* %17, i32 2)
  br label %cond.end8

cond.end8:                                        ; preds = %cond.false6, %cond.true5
  %cond9 = phi i64 [ %15, %cond.true5 ], [ %call7, %cond.false6 ]
  %conv = trunc i64 %cond9 to i32
  store i32 %conv, i32* %sorthints, align 4
  %18 = load i32, i32* %sorthints, align 4
  %and10 = and i32 %18, 1
  %cmp11 = icmp ne i32 %and10, 0
  br i1 %cmp11, label %if.then13, label %if.end

if.then13:                                        ; preds = %cond.end8
  %19 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_private = getelementptr inbounds %struct.op, %struct.op* %19, i32 0, i32 6
  %20 = load i8, i8* %op_private, align 1
  %conv14 = zext i8 %20 to i32
  %or = or i32 %conv14, 32
  %conv15 = trunc i32 %or to i8
  store i8 %conv15, i8* %op_private, align 1
  br label %if.end

if.end:                                           ; preds = %if.then13, %cond.end8
  %21 = load i32, i32* %sorthints, align 4
  %and16 = and i32 %21, 256
  %cmp17 = icmp ne i32 %and16, 0
  br i1 %cmp17, label %if.then19, label %if.end24

if.then19:                                        ; preds = %if.end
  %22 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_private20 = getelementptr inbounds %struct.op, %struct.op* %22, i32 0, i32 6
  %23 = load i8, i8* %op_private20, align 1
  %conv21 = zext i8 %23 to i32
  %or22 = or i32 %conv21, 64
  %conv23 = trunc i32 %or22 to i8
  store i8 %conv23, i8* %op_private20, align 1
  br label %if.end24

if.end24:                                         ; preds = %if.then19, %if.end
  br label %if.end25

if.end25:                                         ; preds = %if.end24, %if.then
  br label %if.end26

if.end26:                                         ; preds = %if.end25, %cond.end
  %24 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %24, i32 0, i32 5
  %25 = load i8, i8* %op_flags, align 2
  %conv27 = zext i8 %25 to i32
  %and28 = and i32 %conv27, 64
  %tobool29 = icmp ne i32 %and28, 0
  br i1 %tobool29, label %if.then30, label %if.end31

if.then30:                                        ; preds = %if.end26
  %26 = load %struct.op*, %struct.op** %o.addr, align 8
  call void @S_simplify_sort(%struct.op* %26)
  br label %if.end31

if.end31:                                         ; preds = %if.then30, %if.end26
  %27 = load %struct.op*, %struct.op** %o.addr, align 8
  %28 = bitcast %struct.op* %27 to %struct.listop*
  %op_first = getelementptr inbounds %struct.listop, %struct.listop* %28, i32 0, i32 7
  %29 = load %struct.op*, %struct.op** %op_first, align 8
  %op_sibling = getelementptr inbounds %struct.op, %struct.op* %29, i32 0, i32 1
  %30 = load %struct.op*, %struct.op** %op_sibling, align 8
  %add.ptr32 = getelementptr inbounds %struct.op, %struct.op* %30, i64 0
  store %struct.op* %add.ptr32, %struct.op** %firstkid, align 8
  %31 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_flags33 = getelementptr inbounds %struct.op, %struct.op* %31, i32 0, i32 5
  %32 = load i8, i8* %op_flags33, align 2
  %conv34 = zext i8 %32 to i32
  %and35 = and i32 %conv34, 64
  %conv36 = trunc i32 %and35 to i8
  store i8 %conv36, i8* %stacked, align 1
  %tobool37 = icmp ne i8 %conv36, 0
  br i1 %tobool37, label %if.then38, label %if.end188

if.then38:                                        ; preds = %if.end31
  %33 = load %struct.op*, %struct.op** %firstkid, align 8
  %34 = bitcast %struct.op* %33 to %struct.unop*
  %op_first40 = getelementptr inbounds %struct.unop, %struct.unop* %34, i32 0, i32 7
  %35 = load %struct.op*, %struct.op** %op_first40, align 8
  store %struct.op* %35, %struct.op** %kid39, align 8
  %36 = load %struct.op*, %struct.op** %kid39, align 8
  %op_type = getelementptr inbounds %struct.op, %struct.op* %36, i32 0, i32 4
  %bf.load = load i16, i16* %op_type, align 8
  %bf.clear = and i16 %bf.load, 511
  %bf.cast = zext i16 %bf.clear to i32
  %cmp41 = icmp eq i32 %bf.cast, 198
  br i1 %cmp41, label %if.then49, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.then38
  %37 = load %struct.op*, %struct.op** %kid39, align 8
  %op_type43 = getelementptr inbounds %struct.op, %struct.op* %37, i32 0, i32 4
  %bf.load44 = load i16, i16* %op_type43, align 8
  %bf.clear45 = and i16 %bf.load44, 511
  %bf.cast46 = zext i16 %bf.clear45 to i32
  %cmp47 = icmp eq i32 %bf.cast46, 197
  br i1 %cmp47, label %if.then49, label %if.else

if.then49:                                        ; preds = %lor.lhs.false, %if.then38
  %38 = load %struct.op*, %struct.op** %kid39, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %38, i32 0, i32 0
  %39 = load %struct.op*, %struct.op** %op_next, align 8
  %tobool50 = icmp ne %struct.op* %39, null
  br i1 %tobool50, label %cond.true51, label %cond.false53

cond.true51:                                      ; preds = %if.then49
  %40 = load %struct.op*, %struct.op** %kid39, align 8
  %op_next52 = getelementptr inbounds %struct.op, %struct.op* %40, i32 0, i32 0
  %41 = load %struct.op*, %struct.op** %op_next52, align 8
  br label %cond.end55

cond.false53:                                     ; preds = %if.then49
  %42 = load %struct.op*, %struct.op** %kid39, align 8
  %call54 = call %struct.op* @Perl_op_linklist(%struct.op* %42)
  br label %cond.end55

cond.end55:                                       ; preds = %cond.false53, %cond.true51
  %cond56 = phi %struct.op* [ %41, %cond.true51 ], [ %call54, %cond.false53 ]
  %43 = load %struct.op*, %struct.op** %kid39, align 8
  %op_type57 = getelementptr inbounds %struct.op, %struct.op* %43, i32 0, i32 4
  %bf.load58 = load i16, i16* %op_type57, align 8
  %bf.clear59 = and i16 %bf.load58, 511
  %bf.cast60 = zext i16 %bf.clear59 to i32
  %cmp61 = icmp eq i32 %bf.cast60, 197
  br i1 %cmp61, label %if.then63, label %if.end64

if.then63:                                        ; preds = %cond.end55
  %44 = load %struct.op*, %struct.op** %kid39, align 8
  call void @Perl_op_null(%struct.op* %44)
  br label %if.end64

if.end64:                                         ; preds = %if.then63, %cond.end55
  %45 = load %struct.op*, %struct.op** %kid39, align 8
  %op_next65 = getelementptr inbounds %struct.op, %struct.op* %45, i32 0, i32 0
  store %struct.op* null, %struct.op** %op_next65, align 8
  %46 = load %struct.op*, %struct.op** %firstkid, align 8
  %call66 = call %struct.op* @Perl_scalar(%struct.op* %46)
  store %struct.op* %call66, %struct.op** %kid39, align 8
  %47 = load %struct.op*, %struct.op** %kid39, align 8
  %48 = load %struct.op*, %struct.op** %kid39, align 8
  %op_next67 = getelementptr inbounds %struct.op, %struct.op* %48, i32 0, i32 0
  store %struct.op* %47, %struct.op** %op_next67, align 8
  %49 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_flags68 = getelementptr inbounds %struct.op, %struct.op* %49, i32 0, i32 5
  %50 = load i8, i8* %op_flags68, align 2
  %conv69 = zext i8 %50 to i32
  %or70 = or i32 %conv69, 128
  %conv71 = trunc i32 %or70 to i8
  store i8 %conv71, i8* %op_flags68, align 2
  br label %if.end185

if.else:                                          ; preds = %lor.lhs.false
  %51 = load %struct.op*, %struct.op** %kid39, align 8
  %op_type72 = getelementptr inbounds %struct.op, %struct.op* %51, i32 0, i32 4
  %bf.load73 = load i16, i16* %op_type72, align 8
  %bf.clear74 = and i16 %bf.load73, 511
  %bf.cast75 = zext i16 %bf.clear74 to i32
  %cmp76 = icmp eq i32 %bf.cast75, 5
  br i1 %cmp76, label %land.lhs.true, label %if.end184

land.lhs.true:                                    ; preds = %if.else
  %52 = load %struct.op*, %struct.op** %kid39, align 8
  %op_private78 = getelementptr inbounds %struct.op, %struct.op* %52, i32 0, i32 6
  %53 = load i8, i8* %op_private78, align 1
  %conv79 = zext i8 %53 to i32
  %and80 = and i32 %conv79, 64
  %tobool81 = icmp ne i32 %and80, 0
  br i1 %tobool81, label %if.then82, label %if.end184

if.then82:                                        ; preds = %land.lhs.true
  %54 = load %struct.op*, %struct.op** %kid39, align 8
  %55 = bitcast %struct.op* %54 to %struct.svop*
  %op_sv = getelementptr inbounds %struct.svop, %struct.svop* %55, i32 0, i32 7
  %56 = load %struct.sv*, %struct.sv** %op_sv, align 8
  %sv_flags83 = getelementptr inbounds %struct.sv, %struct.sv* %56, i32 0, i32 2
  %57 = load i32, i32* %sv_flags83, align 4
  %and84 = and i32 %57, 2098176
  %cmp85 = icmp eq i32 %and84, 1024
  br i1 %cmp85, label %cond.true87, label %cond.false92

cond.true87:                                      ; preds = %if.then82
  %58 = load %struct.op*, %struct.op** %kid39, align 8
  %59 = bitcast %struct.op* %58 to %struct.svop*
  %op_sv88 = getelementptr inbounds %struct.svop, %struct.svop* %59, i32 0, i32 7
  %60 = load %struct.sv*, %struct.sv** %op_sv88, align 8
  %sv_any89 = getelementptr inbounds %struct.sv, %struct.sv* %60, i32 0, i32 0
  %61 = load i8*, i8** %sv_any89, align 8
  %62 = bitcast i8* %61 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %62, i32 0, i32 2
  %63 = load i64, i64* %xpv_cur, align 8
  store i64 %63, i64* %len, align 8
  %64 = load %struct.op*, %struct.op** %kid39, align 8
  %65 = bitcast %struct.op* %64 to %struct.svop*
  %op_sv90 = getelementptr inbounds %struct.svop, %struct.svop* %65, i32 0, i32 7
  %66 = load %struct.sv*, %struct.sv** %op_sv90, align 8
  %sv_u91 = getelementptr inbounds %struct.sv, %struct.sv* %66, i32 0, i32 3
  %svu_pv = bitcast %union.anon* %sv_u91 to i8**
  %67 = load i8*, i8** %svu_pv, align 8
  br label %cond.end95

cond.false92:                                     ; preds = %if.then82
  %68 = load %struct.op*, %struct.op** %kid39, align 8
  %69 = bitcast %struct.op* %68 to %struct.svop*
  %op_sv93 = getelementptr inbounds %struct.svop, %struct.svop* %69, i32 0, i32 7
  %70 = load %struct.sv*, %struct.sv** %op_sv93, align 8
  %call94 = call i8* @Perl_sv_2pv_flags(%struct.sv* %70, i64* %len, i32 2)
  br label %cond.end95

cond.end95:                                       ; preds = %cond.false92, %cond.true87
  %cond96 = phi i8* [ %67, %cond.true87 ], [ %call94, %cond.false92 ]
  store i8* %cond96, i8** %name, align 8
  %arraydecay = getelementptr inbounds [256 x i8], [256 x i8]* %tmpbuf, i64 0, i64 0
  store i8 38, i8* %arraydecay, align 16
  %arraydecay97 = getelementptr inbounds [256 x i8], [256 x i8]* %tmpbuf, i64 0, i64 0
  %add.ptr98 = getelementptr inbounds i8, i8* %arraydecay97, i64 1
  %71 = load i8*, i8** %name, align 8
  %72 = load i64, i64* %len, align 8
  %mul = mul i64 %72, 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %add.ptr98, i8* align 1 %71, i64 %mul, i1 false)
  %arraydecay99 = getelementptr inbounds [256 x i8], [256 x i8]* %tmpbuf, i64 0, i64 0
  %73 = load i64, i64* %len, align 8
  %add = add i64 %73, 1
  %74 = load %struct.op*, %struct.op** %kid39, align 8
  %75 = bitcast %struct.op* %74 to %struct.svop*
  %op_sv100 = getelementptr inbounds %struct.svop, %struct.svop* %75, i32 0, i32 7
  %76 = load %struct.sv*, %struct.sv** %op_sv100, align 8
  %sv_flags101 = getelementptr inbounds %struct.sv, %struct.sv* %76, i32 0, i32 2
  %77 = load i32, i32* %sv_flags101, align 4
  %and102 = and i32 %77, 536870912
  %call103 = call i64 @Perl_pad_findmy_pvn(i8* %arraydecay99, i64 %add, i32 %and102)
  store i64 %call103, i64* %off, align 8
  %78 = load i64, i64* %off, align 8
  %cmp104 = icmp ne i64 %78, -1
  br i1 %cmp104, label %if.then106, label %if.end183

if.then106:                                       ; preds = %cond.end95
  %79 = load %struct.padnamelist*, %struct.padnamelist** @PL_comppad_name, align 8
  %xpadnl_alloc = getelementptr inbounds %struct.padnamelist, %struct.padnamelist* %79, i32 0, i32 1
  %80 = load %struct.padname**, %struct.padname*** %xpadnl_alloc, align 8
  %81 = load i64, i64* %off, align 8
  %arrayidx = getelementptr inbounds %struct.padname*, %struct.padname** %80, i64 %81
  %82 = load %struct.padname*, %struct.padname** %arrayidx, align 8
  %xpadn_ourstash = getelementptr inbounds %struct.padname, %struct.padname* %82, i32 0, i32 1
  %83 = load %struct.hv*, %struct.hv** %xpadn_ourstash, align 8
  %tobool107 = icmp ne %struct.hv* %83, null
  br i1 %tobool107, label %if.then108, label %if.else179

if.then108:                                       ; preds = %if.then106
  %84 = load %struct.padnamelist*, %struct.padnamelist** @PL_comppad_name, align 8
  %xpadnl_alloc109 = getelementptr inbounds %struct.padnamelist, %struct.padnamelist* %84, i32 0, i32 1
  %85 = load %struct.padname**, %struct.padname*** %xpadnl_alloc109, align 8
  %86 = load i64, i64* %off, align 8
  %arrayidx110 = getelementptr inbounds %struct.padname*, %struct.padname** %85, i64 %86
  %87 = load %struct.padname*, %struct.padname** %arrayidx110, align 8
  %xpadn_ourstash111 = getelementptr inbounds %struct.padname, %struct.padname* %87, i32 0, i32 1
  %88 = load %struct.hv*, %struct.hv** %xpadn_ourstash111, align 8
  %sv_flags112 = getelementptr inbounds %struct.hv, %struct.hv* %88, i32 0, i32 2
  %89 = load i32, i32* %sv_flags112, align 4
  %and113 = and i32 %89, 33554432
  %tobool114 = icmp ne i32 %and113, 0
  br i1 %tobool114, label %land.lhs.true115, label %cond.false172

land.lhs.true115:                                 ; preds = %if.then108
  %90 = load %struct.padnamelist*, %struct.padnamelist** @PL_comppad_name, align 8
  %xpadnl_alloc116 = getelementptr inbounds %struct.padnamelist, %struct.padnamelist* %90, i32 0, i32 1
  %91 = load %struct.padname**, %struct.padname*** %xpadnl_alloc116, align 8
  %92 = load i64, i64* %off, align 8
  %arrayidx117 = getelementptr inbounds %struct.padname*, %struct.padname** %91, i64 %92
  %93 = load %struct.padname*, %struct.padname** %arrayidx117, align 8
  %xpadn_ourstash118 = getelementptr inbounds %struct.padname, %struct.padname* %93, i32 0, i32 1
  %94 = load %struct.hv*, %struct.hv** %xpadn_ourstash118, align 8
  %sv_u119 = getelementptr inbounds %struct.hv, %struct.hv* %94, i32 0, i32 3
  %svu_hash = bitcast %union.anon.4* %sv_u119 to %struct.he***
  %95 = load %struct.he**, %struct.he*** %svu_hash, align 8
  %96 = load %struct.padnamelist*, %struct.padnamelist** @PL_comppad_name, align 8
  %xpadnl_alloc120 = getelementptr inbounds %struct.padnamelist, %struct.padnamelist* %96, i32 0, i32 1
  %97 = load %struct.padname**, %struct.padname*** %xpadnl_alloc120, align 8
  %98 = load i64, i64* %off, align 8
  %arrayidx121 = getelementptr inbounds %struct.padname*, %struct.padname** %97, i64 %98
  %99 = load %struct.padname*, %struct.padname** %arrayidx121, align 8
  %xpadn_ourstash122 = getelementptr inbounds %struct.padname, %struct.padname* %99, i32 0, i32 1
  %100 = load %struct.hv*, %struct.hv** %xpadn_ourstash122, align 8
  %sv_any123 = getelementptr inbounds %struct.hv, %struct.hv* %100, i32 0, i32 0
  %101 = load %struct.xpvhv*, %struct.xpvhv** %sv_any123, align 8
  %xhv_max = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %101, i32 0, i32 3
  %102 = load i64, i64* %xhv_max, align 8
  %add124 = add i64 %102, 1
  %arrayidx125 = getelementptr inbounds %struct.he*, %struct.he** %95, i64 %add124
  %103 = bitcast %struct.he** %arrayidx125 to %struct.xpvhv_aux*
  %xhv_name_u = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %103, i32 0, i32 0
  %xhvnameu_name = bitcast %union._xhvnameu* %xhv_name_u to %struct.hek**
  %104 = load %struct.hek*, %struct.hek** %xhvnameu_name, align 8
  %tobool126 = icmp ne %struct.hek* %104, null
  br i1 %tobool126, label %cond.true127, label %cond.false172

cond.true127:                                     ; preds = %land.lhs.true115
  %105 = load %struct.padnamelist*, %struct.padnamelist** @PL_comppad_name, align 8
  %xpadnl_alloc128 = getelementptr inbounds %struct.padnamelist, %struct.padnamelist* %105, i32 0, i32 1
  %106 = load %struct.padname**, %struct.padname*** %xpadnl_alloc128, align 8
  %107 = load i64, i64* %off, align 8
  %arrayidx129 = getelementptr inbounds %struct.padname*, %struct.padname** %106, i64 %107
  %108 = load %struct.padname*, %struct.padname** %arrayidx129, align 8
  %xpadn_ourstash130 = getelementptr inbounds %struct.padname, %struct.padname* %108, i32 0, i32 1
  %109 = load %struct.hv*, %struct.hv** %xpadn_ourstash130, align 8
  %sv_u131 = getelementptr inbounds %struct.hv, %struct.hv* %109, i32 0, i32 3
  %svu_hash132 = bitcast %union.anon.4* %sv_u131 to %struct.he***
  %110 = load %struct.he**, %struct.he*** %svu_hash132, align 8
  %111 = load %struct.padnamelist*, %struct.padnamelist** @PL_comppad_name, align 8
  %xpadnl_alloc133 = getelementptr inbounds %struct.padnamelist, %struct.padnamelist* %111, i32 0, i32 1
  %112 = load %struct.padname**, %struct.padname*** %xpadnl_alloc133, align 8
  %113 = load i64, i64* %off, align 8
  %arrayidx134 = getelementptr inbounds %struct.padname*, %struct.padname** %112, i64 %113
  %114 = load %struct.padname*, %struct.padname** %arrayidx134, align 8
  %xpadn_ourstash135 = getelementptr inbounds %struct.padname, %struct.padname* %114, i32 0, i32 1
  %115 = load %struct.hv*, %struct.hv** %xpadn_ourstash135, align 8
  %sv_any136 = getelementptr inbounds %struct.hv, %struct.hv* %115, i32 0, i32 0
  %116 = load %struct.xpvhv*, %struct.xpvhv** %sv_any136, align 8
  %xhv_max137 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %116, i32 0, i32 3
  %117 = load i64, i64* %xhv_max137, align 8
  %add138 = add i64 %117, 1
  %arrayidx139 = getelementptr inbounds %struct.he*, %struct.he** %110, i64 %add138
  %118 = bitcast %struct.he** %arrayidx139 to %struct.xpvhv_aux*
  %xhv_name_count = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %118, i32 0, i32 4
  %119 = load i32, i32* %xhv_name_count, align 4
  %tobool140 = icmp ne i32 %119, 0
  br i1 %tobool140, label %cond.true141, label %cond.false155

cond.true141:                                     ; preds = %cond.true127
  %120 = load %struct.padnamelist*, %struct.padnamelist** @PL_comppad_name, align 8
  %xpadnl_alloc142 = getelementptr inbounds %struct.padnamelist, %struct.padnamelist* %120, i32 0, i32 1
  %121 = load %struct.padname**, %struct.padname*** %xpadnl_alloc142, align 8
  %122 = load i64, i64* %off, align 8
  %arrayidx143 = getelementptr inbounds %struct.padname*, %struct.padname** %121, i64 %122
  %123 = load %struct.padname*, %struct.padname** %arrayidx143, align 8
  %xpadn_ourstash144 = getelementptr inbounds %struct.padname, %struct.padname* %123, i32 0, i32 1
  %124 = load %struct.hv*, %struct.hv** %xpadn_ourstash144, align 8
  %sv_u145 = getelementptr inbounds %struct.hv, %struct.hv* %124, i32 0, i32 3
  %svu_hash146 = bitcast %union.anon.4* %sv_u145 to %struct.he***
  %125 = load %struct.he**, %struct.he*** %svu_hash146, align 8
  %126 = load %struct.padnamelist*, %struct.padnamelist** @PL_comppad_name, align 8
  %xpadnl_alloc147 = getelementptr inbounds %struct.padnamelist, %struct.padnamelist* %126, i32 0, i32 1
  %127 = load %struct.padname**, %struct.padname*** %xpadnl_alloc147, align 8
  %128 = load i64, i64* %off, align 8
  %arrayidx148 = getelementptr inbounds %struct.padname*, %struct.padname** %127, i64 %128
  %129 = load %struct.padname*, %struct.padname** %arrayidx148, align 8
  %xpadn_ourstash149 = getelementptr inbounds %struct.padname, %struct.padname* %129, i32 0, i32 1
  %130 = load %struct.hv*, %struct.hv** %xpadn_ourstash149, align 8
  %sv_any150 = getelementptr inbounds %struct.hv, %struct.hv* %130, i32 0, i32 0
  %131 = load %struct.xpvhv*, %struct.xpvhv** %sv_any150, align 8
  %xhv_max151 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %131, i32 0, i32 3
  %132 = load i64, i64* %xhv_max151, align 8
  %add152 = add i64 %132, 1
  %arrayidx153 = getelementptr inbounds %struct.he*, %struct.he** %125, i64 %add152
  %133 = bitcast %struct.he** %arrayidx153 to %struct.xpvhv_aux*
  %xhv_name_u154 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %133, i32 0, i32 0
  %xhvnameu_names = bitcast %union._xhvnameu* %xhv_name_u154 to %struct.hek***
  %134 = load %struct.hek**, %struct.hek*** %xhvnameu_names, align 8
  %135 = load %struct.hek*, %struct.hek** %134, align 8
  br label %cond.end170

cond.false155:                                    ; preds = %cond.true127
  %136 = load %struct.padnamelist*, %struct.padnamelist** @PL_comppad_name, align 8
  %xpadnl_alloc156 = getelementptr inbounds %struct.padnamelist, %struct.padnamelist* %136, i32 0, i32 1
  %137 = load %struct.padname**, %struct.padname*** %xpadnl_alloc156, align 8
  %138 = load i64, i64* %off, align 8
  %arrayidx157 = getelementptr inbounds %struct.padname*, %struct.padname** %137, i64 %138
  %139 = load %struct.padname*, %struct.padname** %arrayidx157, align 8
  %xpadn_ourstash158 = getelementptr inbounds %struct.padname, %struct.padname* %139, i32 0, i32 1
  %140 = load %struct.hv*, %struct.hv** %xpadn_ourstash158, align 8
  %sv_u159 = getelementptr inbounds %struct.hv, %struct.hv* %140, i32 0, i32 3
  %svu_hash160 = bitcast %union.anon.4* %sv_u159 to %struct.he***
  %141 = load %struct.he**, %struct.he*** %svu_hash160, align 8
  %142 = load %struct.padnamelist*, %struct.padnamelist** @PL_comppad_name, align 8
  %xpadnl_alloc161 = getelementptr inbounds %struct.padnamelist, %struct.padnamelist* %142, i32 0, i32 1
  %143 = load %struct.padname**, %struct.padname*** %xpadnl_alloc161, align 8
  %144 = load i64, i64* %off, align 8
  %arrayidx162 = getelementptr inbounds %struct.padname*, %struct.padname** %143, i64 %144
  %145 = load %struct.padname*, %struct.padname** %arrayidx162, align 8
  %xpadn_ourstash163 = getelementptr inbounds %struct.padname, %struct.padname* %145, i32 0, i32 1
  %146 = load %struct.hv*, %struct.hv** %xpadn_ourstash163, align 8
  %sv_any164 = getelementptr inbounds %struct.hv, %struct.hv* %146, i32 0, i32 0
  %147 = load %struct.xpvhv*, %struct.xpvhv** %sv_any164, align 8
  %xhv_max165 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %147, i32 0, i32 3
  %148 = load i64, i64* %xhv_max165, align 8
  %add166 = add i64 %148, 1
  %arrayidx167 = getelementptr inbounds %struct.he*, %struct.he** %141, i64 %add166
  %149 = bitcast %struct.he** %arrayidx167 to %struct.xpvhv_aux*
  %xhv_name_u168 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %149, i32 0, i32 0
  %xhvnameu_name169 = bitcast %union._xhvnameu* %xhv_name_u168 to %struct.hek**
  %150 = load %struct.hek*, %struct.hek** %xhvnameu_name169, align 8
  br label %cond.end170

cond.end170:                                      ; preds = %cond.false155, %cond.true141
  %cond171 = phi %struct.hek* [ %135, %cond.true141 ], [ %150, %cond.false155 ]
  br label %cond.end173

cond.false172:                                    ; preds = %land.lhs.true115, %if.then108
  br label %cond.end173

cond.end173:                                      ; preds = %cond.false172, %cond.end170
  %cond174 = phi %struct.hek* [ %cond171, %cond.end170 ], [ null, %cond.false172 ]
  %call175 = call %struct.sv* @Perl_newSVhek(%struct.hek* %cond174)
  store %struct.sv* %call175, %struct.sv** %fq, align 8
  %151 = load %struct.sv*, %struct.sv** %fq, align 8
  call void @Perl_sv_catpvn_flags(%struct.sv* %151, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.61, i64 0, i64 0), i64 2, i32 2)
  %152 = load %struct.sv*, %struct.sv** %fq, align 8
  %153 = load %struct.op*, %struct.op** %kid39, align 8
  %154 = bitcast %struct.op* %153 to %struct.svop*
  %op_sv176 = getelementptr inbounds %struct.svop, %struct.svop* %154, i32 0, i32 7
  %155 = load %struct.sv*, %struct.sv** %op_sv176, align 8
  call void @Perl_sv_catsv_flags(%struct.sv* %152, %struct.sv* %155, i32 2)
  %156 = load %struct.op*, %struct.op** %kid39, align 8
  %157 = bitcast %struct.op* %156 to %struct.svop*
  %op_sv177 = getelementptr inbounds %struct.svop, %struct.svop* %157, i32 0, i32 7
  %158 = load %struct.sv*, %struct.sv** %op_sv177, align 8
  %159 = bitcast %struct.sv* %158 to i8*
  %160 = bitcast i8* %159 to %struct.sv*
  call void @S_SvREFCNT_dec_NN(%struct.sv* %160)
  %161 = load %struct.sv*, %struct.sv** %fq, align 8
  %162 = load %struct.op*, %struct.op** %kid39, align 8
  %163 = bitcast %struct.op* %162 to %struct.svop*
  %op_sv178 = getelementptr inbounds %struct.svop, %struct.svop* %163, i32 0, i32 7
  store %struct.sv* %161, %struct.sv** %op_sv178, align 8
  br label %if.end182

if.else179:                                       ; preds = %if.then106
  %call180 = call %struct.op* @Perl_newOP(i32 387, i32 0)
  store %struct.op* %call180, %struct.op** %padop, align 8
  %164 = load i64, i64* %off, align 8
  %165 = load %struct.op*, %struct.op** %padop, align 8
  %op_targ = getelementptr inbounds %struct.op, %struct.op* %165, i32 0, i32 3
  store i64 %164, i64* %op_targ, align 8
  %166 = load %struct.op*, %struct.op** %firstkid, align 8
  %167 = load %struct.op*, %struct.op** %padop, align 8
  %call181 = call %struct.op* @Perl_op_sibling_splice(%struct.op* %166, %struct.op* null, i32 1, %struct.op* %167)
  %168 = load %struct.op*, %struct.op** %kid39, align 8
  call void @Perl_op_free(%struct.op* %168)
  br label %if.end182

if.end182:                                        ; preds = %if.else179, %cond.end173
  br label %if.end183

if.end183:                                        ; preds = %if.end182, %cond.end95
  br label %if.end184

if.end184:                                        ; preds = %if.end183, %land.lhs.true, %if.else
  br label %if.end185

if.end185:                                        ; preds = %if.end184, %if.end64
  %169 = load %struct.op*, %struct.op** %firstkid, align 8
  %op_sibling186 = getelementptr inbounds %struct.op, %struct.op* %169, i32 0, i32 1
  %170 = load %struct.op*, %struct.op** %op_sibling186, align 8
  %add.ptr187 = getelementptr inbounds %struct.op, %struct.op* %170, i64 0
  store %struct.op* %add.ptr187, %struct.op** %firstkid, align 8
  br label %if.end188

if.end188:                                        ; preds = %if.end185, %if.end31
  %171 = load %struct.op*, %struct.op** %firstkid, align 8
  store %struct.op* %171, %struct.op** %kid, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end188
  %172 = load %struct.op*, %struct.op** %kid, align 8
  %tobool189 = icmp ne %struct.op* %172, null
  br i1 %tobool189, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %173 = load %struct.op*, %struct.op** %kid, align 8
  %call190 = call %struct.op* @Perl_list(%struct.op* %173)
  %174 = load i8, i8* %stacked, align 1
  %tobool191 = icmp ne i8 %174, 0
  br i1 %tobool191, label %if.then192, label %if.end194

if.then192:                                       ; preds = %for.body
  %175 = load %struct.op*, %struct.op** %kid, align 8
  %call193 = call %struct.op* @Perl_op_lvalue_flags(%struct.op* %175, i32 169, i32 0)
  br label %if.end194

if.end194:                                        ; preds = %if.then192, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end194
  %176 = load %struct.op*, %struct.op** %kid, align 8
  %op_sibling195 = getelementptr inbounds %struct.op, %struct.op* %176, i32 0, i32 1
  %177 = load %struct.op*, %struct.op** %op_sibling195, align 8
  %add.ptr196 = getelementptr inbounds %struct.op, %struct.op* %177, i64 0
  store %struct.op* %add.ptr196, %struct.op** %kid, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %178 = load %struct.op*, %struct.op** %o.addr, align 8
  ret %struct.op* %178
}

; Function Attrs: noinline nounwind uwtable
define internal void @S_simplify_sort(%struct.op* %o) #0 {
entry:
  %o.addr = alloca %struct.op*, align 8
  %kid = alloca %struct.op*, align 8
  %k = alloca %struct.op*, align 8
  %descending = alloca i32, align 4
  %gv = alloca %struct.gv*, align 8
  %gvname = alloca i8*, align 8
  %have_scopeop = alloca i8, align 1
  %name = alloca %struct.padname*, align 8
  store %struct.op* %o, %struct.op** %o.addr, align 8
  %0 = load %struct.op*, %struct.op** %o.addr, align 8
  %1 = bitcast %struct.op* %0 to %struct.listop*
  %op_first = getelementptr inbounds %struct.listop, %struct.listop* %1, i32 0, i32 7
  %2 = load %struct.op*, %struct.op** %op_first, align 8
  %op_sibling = getelementptr inbounds %struct.op, %struct.op* %2, i32 0, i32 1
  %3 = load %struct.op*, %struct.op** %op_sibling, align 8
  %add.ptr = getelementptr inbounds %struct.op, %struct.op* %3, i64 0
  store %struct.op* %add.ptr, %struct.op** %kid, align 8
  %4 = load %struct.op*, %struct.op** %kid, align 8
  %5 = bitcast %struct.op* %4 to %struct.unop*
  %op_first1 = getelementptr inbounds %struct.unop, %struct.unop* %5, i32 0, i32 7
  %6 = load %struct.op*, %struct.op** %op_first1, align 8
  store %struct.op* %6, %struct.op** %kid, align 8
  %7 = load %struct.op*, %struct.op** %kid, align 8
  %op_type = getelementptr inbounds %struct.op, %struct.op* %7, i32 0, i32 4
  %bf.load = load i16, i16* %op_type, align 8
  %bf.clear = and i16 %bf.load, 511
  %bf.cast = zext i16 %bf.clear to i32
  %cmp = icmp eq i32 %bf.cast, 198
  %frombool = zext i1 %cmp to i8
  store i8 %frombool, i8* %have_scopeop, align 1
  br i1 %cmp, label %if.end, label %land.lhs.true

land.lhs.true:                                    ; preds = %entry
  %8 = load %struct.op*, %struct.op** %kid, align 8
  %op_type2 = getelementptr inbounds %struct.op, %struct.op* %8, i32 0, i32 4
  %bf.load3 = load i16, i16* %op_type2, align 8
  %bf.clear4 = and i16 %bf.load3, 511
  %bf.cast5 = zext i16 %bf.clear4 to i32
  %cmp6 = icmp ne i32 %bf.cast5, 197
  br i1 %cmp6, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  br label %return

if.end:                                           ; preds = %land.lhs.true, %entry
  %9 = load %struct.op*, %struct.op** %kid, align 8
  %10 = bitcast %struct.op* %9 to %struct.listop*
  %op_last = getelementptr inbounds %struct.listop, %struct.listop* %10, i32 0, i32 8
  %11 = load %struct.op*, %struct.op** %op_last, align 8
  store %struct.op* %11, %struct.op** %kid, align 8
  %12 = load %struct.op*, %struct.op** %kid, align 8
  %op_type7 = getelementptr inbounds %struct.op, %struct.op* %12, i32 0, i32 4
  %bf.load8 = load i16, i16* %op_type7, align 8
  %bf.clear9 = and i16 %bf.load8, 511
  %bf.cast10 = zext i16 %bf.clear9 to i32
  switch i32 %bf.cast10, label %sw.default [
    i32 83, label %sw.bb
    i32 84, label %sw.bb
    i32 91, label %sw.bb
  ]

sw.bb:                                            ; preds = %if.end, %if.end, %if.end
  %13 = load i8, i8* %have_scopeop, align 1
  %tobool = trunc i8 %13 to i1
  br i1 %tobool, label %if.end12, label %if.then11

if.then11:                                        ; preds = %sw.bb
  br label %padkids

if.end12:                                         ; preds = %sw.bb
  br label %sw.epilog

sw.default:                                       ; preds = %if.end
  br label %return

sw.epilog:                                        ; preds = %if.end12
  %14 = load %struct.op*, %struct.op** %kid, align 8
  store %struct.op* %14, %struct.op** %k, align 8
  %15 = load %struct.op*, %struct.op** %kid, align 8
  %16 = bitcast %struct.op* %15 to %struct.binop*
  %op_first13 = getelementptr inbounds %struct.binop, %struct.binop* %16, i32 0, i32 7
  %17 = load %struct.op*, %struct.op** %op_first13, align 8
  %op_type14 = getelementptr inbounds %struct.op, %struct.op* %17, i32 0, i32 4
  %bf.load15 = load i16, i16* %op_type14, align 8
  %bf.clear16 = and i16 %bf.load15, 511
  %bf.cast17 = zext i16 %bf.clear16 to i32
  %cmp18 = icmp ne i32 %bf.cast17, 15
  br i1 %cmp18, label %if.then25, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %sw.epilog
  %18 = load %struct.op*, %struct.op** %kid, align 8
  %19 = bitcast %struct.op* %18 to %struct.binop*
  %op_last19 = getelementptr inbounds %struct.binop, %struct.binop* %19, i32 0, i32 8
  %20 = load %struct.op*, %struct.op** %op_last19, align 8
  %op_type20 = getelementptr inbounds %struct.op, %struct.op* %20, i32 0, i32 4
  %bf.load21 = load i16, i16* %op_type20, align 8
  %bf.clear22 = and i16 %bf.load21, 511
  %bf.cast23 = zext i16 %bf.clear22 to i32
  %cmp24 = icmp ne i32 %bf.cast23, 15
  br i1 %cmp24, label %if.then25, label %if.end62

if.then25:                                        ; preds = %lor.lhs.false, %sw.epilog
  br label %padkids

padkids:                                          ; preds = %if.then25, %if.then11
  %call = call zeroext i1 @Perl_ckwarn(i32 28)
  br i1 %call, label %if.end27, label %if.then26

if.then26:                                        ; preds = %padkids
  br label %return

if.end27:                                         ; preds = %padkids
  %21 = load %struct.op*, %struct.op** %kid, align 8
  %22 = bitcast %struct.op* %21 to %struct.binop*
  %op_first28 = getelementptr inbounds %struct.binop, %struct.binop* %22, i32 0, i32 7
  %23 = load %struct.op*, %struct.op** %op_first28, align 8
  store %struct.op* %23, %struct.op** %kid, align 8
  br label %do.body

do.body:                                          ; preds = %do.cond, %if.end27
  %24 = load %struct.op*, %struct.op** %kid, align 8
  %op_type29 = getelementptr inbounds %struct.op, %struct.op* %24, i32 0, i32 4
  %bf.load30 = load i16, i16* %op_type29, align 8
  %bf.clear31 = and i16 %bf.load30, 511
  %bf.cast32 = zext i16 %bf.clear31 to i32
  %cmp33 = icmp eq i32 %bf.cast32, 9
  br i1 %cmp33, label %if.then34, label %if.end58

if.then34:                                        ; preds = %do.body
  %25 = load %struct.padnamelist*, %struct.padnamelist** @PL_comppad_name, align 8
  %xpadnl_alloc = getelementptr inbounds %struct.padnamelist, %struct.padnamelist* %25, i32 0, i32 1
  %26 = load %struct.padname**, %struct.padname*** %xpadnl_alloc, align 8
  %27 = load %struct.op*, %struct.op** %kid, align 8
  %op_targ = getelementptr inbounds %struct.op, %struct.op* %27, i32 0, i32 3
  %28 = load i64, i64* %op_targ, align 8
  %arrayidx = getelementptr inbounds %struct.padname*, %struct.padname** %26, i64 %28
  %29 = load %struct.padname*, %struct.padname** %arrayidx, align 8
  store %struct.padname* %29, %struct.padname** %name, align 8
  %30 = load %struct.padname*, %struct.padname** %name, align 8
  %xpadn_len = getelementptr inbounds %struct.padname, %struct.padname* %30, i32 0, i32 7
  %31 = load i8, i8* %xpadn_len, align 8
  %conv = zext i8 %31 to i32
  %cmp35 = icmp eq i32 %conv, 2
  br i1 %cmp35, label %land.lhs.true37, label %if.end57

land.lhs.true37:                                  ; preds = %if.then34
  %32 = load %struct.padname*, %struct.padname** %name, align 8
  %xpadn_pv = getelementptr inbounds %struct.padname, %struct.padname* %32, i32 0, i32 0
  %33 = load i8*, i8** %xpadn_pv, align 8
  %34 = load i8, i8* %33, align 1
  %conv38 = sext i8 %34 to i32
  %cmp39 = icmp eq i32 %conv38, 36
  br i1 %cmp39, label %land.lhs.true41, label %if.end57

land.lhs.true41:                                  ; preds = %land.lhs.true37
  %35 = load %struct.padname*, %struct.padname** %name, align 8
  %xpadn_pv42 = getelementptr inbounds %struct.padname, %struct.padname* %35, i32 0, i32 0
  %36 = load i8*, i8** %xpadn_pv42, align 8
  %arrayidx43 = getelementptr inbounds i8, i8* %36, i64 1
  %37 = load i8, i8* %arrayidx43, align 1
  %conv44 = sext i8 %37 to i32
  %cmp45 = icmp eq i32 %conv44, 97
  br i1 %cmp45, label %if.then53, label %lor.lhs.false47

lor.lhs.false47:                                  ; preds = %land.lhs.true41
  %38 = load %struct.padname*, %struct.padname** %name, align 8
  %xpadn_pv48 = getelementptr inbounds %struct.padname, %struct.padname* %38, i32 0, i32 0
  %39 = load i8*, i8** %xpadn_pv48, align 8
  %arrayidx49 = getelementptr inbounds i8, i8* %39, i64 1
  %40 = load i8, i8* %arrayidx49, align 1
  %conv50 = sext i8 %40 to i32
  %cmp51 = icmp eq i32 %conv50, 98
  br i1 %cmp51, label %if.then53, label %if.end57

if.then53:                                        ; preds = %lor.lhs.false47, %land.lhs.true41
  %41 = load %struct.padname*, %struct.padname** %name, align 8
  %xpadn_flags = getelementptr inbounds %struct.padname, %struct.padname* %41, i32 0, i32 8
  %42 = load i8, i8* %xpadn_flags, align 1
  %conv54 = zext i8 %42 to i32
  %and = and i32 %conv54, 2
  %tobool55 = icmp ne i32 %and, 0
  %43 = zext i1 %tobool55 to i64
  %cond = select i1 %tobool55, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i64 0, i64 0)
  %44 = load %struct.padname*, %struct.padname** %name, align 8
  %xpadn_pv56 = getelementptr inbounds %struct.padname, %struct.padname* %44, i32 0, i32 0
  %45 = load i8*, i8** %xpadn_pv56, align 8
  call void (i32, i8*, ...) @Perl_warner(i32 28, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.209, i64 0, i64 0), i8* %cond, i8* %45)
  br label %if.end57

if.end57:                                         ; preds = %if.then53, %lor.lhs.false47, %land.lhs.true37, %if.then34
  br label %if.end58

if.end58:                                         ; preds = %if.end57, %do.body
  br label %do.cond

do.cond:                                          ; preds = %if.end58
  %46 = load %struct.op*, %struct.op** %kid, align 8
  %op_sibling59 = getelementptr inbounds %struct.op, %struct.op* %46, i32 0, i32 1
  %47 = load %struct.op*, %struct.op** %op_sibling59, align 8
  %add.ptr60 = getelementptr inbounds %struct.op, %struct.op* %47, i64 0
  store %struct.op* %add.ptr60, %struct.op** %kid, align 8
  %tobool61 = icmp ne %struct.op* %add.ptr60, null
  br i1 %tobool61, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  br label %return

if.end62:                                         ; preds = %lor.lhs.false
  %48 = load %struct.op*, %struct.op** %kid, align 8
  %49 = bitcast %struct.op* %48 to %struct.binop*
  %op_first63 = getelementptr inbounds %struct.binop, %struct.binop* %49, i32 0, i32 7
  %50 = load %struct.op*, %struct.op** %op_first63, align 8
  store %struct.op* %50, %struct.op** %kid, align 8
  %51 = load %struct.op*, %struct.op** %kid, align 8
  %52 = bitcast %struct.op* %51 to %struct.unop*
  %op_first64 = getelementptr inbounds %struct.unop, %struct.unop* %52, i32 0, i32 7
  %53 = load %struct.op*, %struct.op** %op_first64, align 8
  %op_type65 = getelementptr inbounds %struct.op, %struct.op* %53, i32 0, i32 4
  %bf.load66 = load i16, i16* %op_type65, align 8
  %bf.clear67 = and i16 %bf.load66, 511
  %bf.cast68 = zext i16 %bf.clear67 to i32
  %cmp69 = icmp ne i32 %bf.cast68, 7
  br i1 %cmp69, label %if.then71, label %if.end72

if.then71:                                        ; preds = %if.end62
  br label %return

if.end72:                                         ; preds = %if.end62
  %54 = load %struct.op*, %struct.op** %kid, align 8
  %55 = bitcast %struct.op* %54 to %struct.unop*
  %op_first73 = getelementptr inbounds %struct.unop, %struct.unop* %55, i32 0, i32 7
  %56 = load %struct.op*, %struct.op** %op_first73, align 8
  store %struct.op* %56, %struct.op** %kid, align 8
  %57 = load %struct.op*, %struct.op** %kid, align 8
  %58 = bitcast %struct.op* %57 to %struct.svop*
  %op_sv = getelementptr inbounds %struct.svop, %struct.svop* %58, i32 0, i32 7
  %59 = load %struct.sv*, %struct.sv** %op_sv, align 8
  %60 = bitcast %struct.sv* %59 to %struct.gv*
  store %struct.gv* %60, %struct.gv** %gv, align 8
  %61 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_any = getelementptr inbounds %struct.gv, %struct.gv* %61, i32 0, i32 0
  %62 = load %struct.xpvgv*, %struct.xpvgv** %sv_any, align 8
  %xnv_u = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %62, i32 0, i32 5
  %xgv_stash = bitcast %union._xnvu* %xnv_u to %struct.hv**
  %63 = load %struct.hv*, %struct.hv** %xgv_stash, align 8
  %64 = load %struct.hv*, %struct.hv** @PL_curstash, align 8
  %cmp74 = icmp ne %struct.hv* %63, %64
  br i1 %cmp74, label %if.then76, label %if.end77

if.then76:                                        ; preds = %if.end72
  br label %return

if.end77:                                         ; preds = %if.end72
  %65 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_any78 = getelementptr inbounds %struct.gv, %struct.gv* %65, i32 0, i32 0
  %66 = load %struct.xpvgv*, %struct.xpvgv** %sv_any78, align 8
  %xiv_u = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %66, i32 0, i32 4
  %xivu_namehek = bitcast %union._xivu* %xiv_u to %struct.hek**
  %67 = load %struct.hek*, %struct.hek** %xivu_namehek, align 8
  %hek_key = getelementptr inbounds %struct.hek, %struct.hek* %67, i32 0, i32 2
  %arraydecay = getelementptr inbounds [1 x i8], [1 x i8]* %hek_key, i64 0, i64 0
  store i8* %arraydecay, i8** %gvname, align 8
  %68 = load i8*, i8** %gvname, align 8
  %69 = load i8, i8* %68, align 1
  %conv79 = sext i8 %69 to i32
  %cmp80 = icmp eq i32 %conv79, 97
  br i1 %cmp80, label %land.lhs.true82, label %if.else

land.lhs.true82:                                  ; preds = %if.end77
  %70 = load i8*, i8** %gvname, align 8
  %arrayidx83 = getelementptr inbounds i8, i8* %70, i64 1
  %71 = load i8, i8* %arrayidx83, align 1
  %conv84 = sext i8 %71 to i32
  %cmp85 = icmp eq i32 %conv84, 0
  br i1 %cmp85, label %if.then87, label %if.else

if.then87:                                        ; preds = %land.lhs.true82
  store i32 0, i32* %descending, align 4
  br label %if.end99

if.else:                                          ; preds = %land.lhs.true82, %if.end77
  %72 = load i8*, i8** %gvname, align 8
  %73 = load i8, i8* %72, align 1
  %conv88 = sext i8 %73 to i32
  %cmp89 = icmp eq i32 %conv88, 98
  br i1 %cmp89, label %land.lhs.true91, label %if.else97

land.lhs.true91:                                  ; preds = %if.else
  %74 = load i8*, i8** %gvname, align 8
  %arrayidx92 = getelementptr inbounds i8, i8* %74, i64 1
  %75 = load i8, i8* %arrayidx92, align 1
  %conv93 = sext i8 %75 to i32
  %cmp94 = icmp eq i32 %conv93, 0
  br i1 %cmp94, label %if.then96, label %if.else97

if.then96:                                        ; preds = %land.lhs.true91
  store i32 1, i32* %descending, align 4
  br label %if.end98

if.else97:                                        ; preds = %land.lhs.true91, %if.else
  br label %return

if.end98:                                         ; preds = %if.then96
  br label %if.end99

if.end99:                                         ; preds = %if.end98, %if.then87
  %76 = load %struct.op*, %struct.op** %k, align 8
  store %struct.op* %76, %struct.op** %kid, align 8
  %77 = load %struct.op*, %struct.op** %kid, align 8
  %78 = bitcast %struct.op* %77 to %struct.binop*
  %op_last100 = getelementptr inbounds %struct.binop, %struct.binop* %78, i32 0, i32 8
  %79 = load %struct.op*, %struct.op** %op_last100, align 8
  store %struct.op* %79, %struct.op** %kid, align 8
  %80 = load %struct.op*, %struct.op** %kid, align 8
  %81 = bitcast %struct.op* %80 to %struct.unop*
  %op_first101 = getelementptr inbounds %struct.unop, %struct.unop* %81, i32 0, i32 7
  %82 = load %struct.op*, %struct.op** %op_first101, align 8
  %op_type102 = getelementptr inbounds %struct.op, %struct.op* %82, i32 0, i32 4
  %bf.load103 = load i16, i16* %op_type102, align 8
  %bf.clear104 = and i16 %bf.load103, 511
  %bf.cast105 = zext i16 %bf.clear104 to i32
  %cmp106 = icmp ne i32 %bf.cast105, 7
  br i1 %cmp106, label %if.then108, label %if.end109

if.then108:                                       ; preds = %if.end99
  br label %return

if.end109:                                        ; preds = %if.end99
  %83 = load %struct.op*, %struct.op** %kid, align 8
  %84 = bitcast %struct.op* %83 to %struct.unop*
  %op_first110 = getelementptr inbounds %struct.unop, %struct.unop* %84, i32 0, i32 7
  %85 = load %struct.op*, %struct.op** %op_first110, align 8
  store %struct.op* %85, %struct.op** %kid, align 8
  %86 = load %struct.op*, %struct.op** %kid, align 8
  %87 = bitcast %struct.op* %86 to %struct.svop*
  %op_sv111 = getelementptr inbounds %struct.svop, %struct.svop* %87, i32 0, i32 7
  %88 = load %struct.sv*, %struct.sv** %op_sv111, align 8
  %89 = bitcast %struct.sv* %88 to %struct.gv*
  store %struct.gv* %89, %struct.gv** %gv, align 8
  %90 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_any112 = getelementptr inbounds %struct.gv, %struct.gv* %90, i32 0, i32 0
  %91 = load %struct.xpvgv*, %struct.xpvgv** %sv_any112, align 8
  %xnv_u113 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %91, i32 0, i32 5
  %xgv_stash114 = bitcast %union._xnvu* %xnv_u113 to %struct.hv**
  %92 = load %struct.hv*, %struct.hv** %xgv_stash114, align 8
  %93 = load %struct.hv*, %struct.hv** @PL_curstash, align 8
  %cmp115 = icmp ne %struct.hv* %92, %93
  br i1 %cmp115, label %if.then117, label %if.end118

if.then117:                                       ; preds = %if.end109
  br label %return

if.end118:                                        ; preds = %if.end109
  %94 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_any119 = getelementptr inbounds %struct.gv, %struct.gv* %94, i32 0, i32 0
  %95 = load %struct.xpvgv*, %struct.xpvgv** %sv_any119, align 8
  %xiv_u120 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %95, i32 0, i32 4
  %xivu_namehek121 = bitcast %union._xivu* %xiv_u120 to %struct.hek**
  %96 = load %struct.hek*, %struct.hek** %xivu_namehek121, align 8
  %hek_key122 = getelementptr inbounds %struct.hek, %struct.hek* %96, i32 0, i32 2
  %arraydecay123 = getelementptr inbounds [1 x i8], [1 x i8]* %hek_key122, i64 0, i64 0
  store i8* %arraydecay123, i8** %gvname, align 8
  %97 = load i32, i32* %descending, align 4
  %tobool124 = icmp ne i32 %97, 0
  br i1 %tobool124, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end118
  %98 = load i8*, i8** %gvname, align 8
  %99 = load i8, i8* %98, align 1
  %conv125 = sext i8 %99 to i32
  %cmp126 = icmp eq i32 %conv125, 97
  br i1 %cmp126, label %land.lhs.true128, label %if.then141

land.lhs.true128:                                 ; preds = %cond.true
  %100 = load i8*, i8** %gvname, align 8
  %arrayidx129 = getelementptr inbounds i8, i8* %100, i64 1
  %101 = load i8, i8* %arrayidx129, align 1
  %conv130 = sext i8 %101 to i32
  %cmp131 = icmp eq i32 %conv130, 0
  br i1 %cmp131, label %if.end142, label %if.then141

cond.false:                                       ; preds = %if.end118
  %102 = load i8*, i8** %gvname, align 8
  %103 = load i8, i8* %102, align 1
  %conv133 = sext i8 %103 to i32
  %cmp134 = icmp eq i32 %conv133, 98
  br i1 %cmp134, label %land.lhs.true136, label %if.then141

land.lhs.true136:                                 ; preds = %cond.false
  %104 = load i8*, i8** %gvname, align 8
  %arrayidx137 = getelementptr inbounds i8, i8* %104, i64 1
  %105 = load i8, i8* %arrayidx137, align 1
  %conv138 = sext i8 %105 to i32
  %cmp139 = icmp eq i32 %conv138, 0
  br i1 %cmp139, label %if.end142, label %if.then141

if.then141:                                       ; preds = %land.lhs.true136, %cond.false, %land.lhs.true128, %cond.true
  br label %return

if.end142:                                        ; preds = %land.lhs.true136, %land.lhs.true128
  %106 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %106, i32 0, i32 5
  %107 = load i8, i8* %op_flags, align 2
  %conv143 = zext i8 %107 to i32
  %and144 = and i32 %conv143, -193
  %conv145 = trunc i32 %and144 to i8
  store i8 %conv145, i8* %op_flags, align 2
  %108 = load i32, i32* %descending, align 4
  %tobool146 = icmp ne i32 %108, 0
  br i1 %tobool146, label %if.then147, label %if.end150

if.then147:                                       ; preds = %if.end142
  %109 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_private = getelementptr inbounds %struct.op, %struct.op* %109, i32 0, i32 6
  %110 = load i8, i8* %op_private, align 1
  %conv148 = zext i8 %110 to i32
  %or = or i32 %conv148, 16
  %conv149 = trunc i32 %or to i8
  store i8 %conv149, i8* %op_private, align 1
  br label %if.end150

if.end150:                                        ; preds = %if.then147, %if.end142
  %111 = load %struct.op*, %struct.op** %k, align 8
  %op_type151 = getelementptr inbounds %struct.op, %struct.op* %111, i32 0, i32 4
  %bf.load152 = load i16, i16* %op_type151, align 8
  %bf.clear153 = and i16 %bf.load152, 511
  %bf.cast154 = zext i16 %bf.clear153 to i32
  %cmp155 = icmp eq i32 %bf.cast154, 83
  br i1 %cmp155, label %if.then157, label %if.end162

if.then157:                                       ; preds = %if.end150
  %112 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_private158 = getelementptr inbounds %struct.op, %struct.op* %112, i32 0, i32 6
  %113 = load i8, i8* %op_private158, align 1
  %conv159 = zext i8 %113 to i32
  %or160 = or i32 %conv159, 1
  %conv161 = trunc i32 %or160 to i8
  store i8 %conv161, i8* %op_private158, align 1
  br label %if.end162

if.end162:                                        ; preds = %if.then157, %if.end150
  %114 = load %struct.op*, %struct.op** %k, align 8
  %op_type163 = getelementptr inbounds %struct.op, %struct.op* %114, i32 0, i32 4
  %bf.load164 = load i16, i16* %op_type163, align 8
  %bf.clear165 = and i16 %bf.load164, 511
  %bf.cast166 = zext i16 %bf.clear165 to i32
  %cmp167 = icmp eq i32 %bf.cast166, 84
  br i1 %cmp167, label %if.then169, label %if.end174

if.then169:                                       ; preds = %if.end162
  %115 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_private170 = getelementptr inbounds %struct.op, %struct.op* %115, i32 0, i32 6
  %116 = load i8, i8* %op_private170, align 1
  %conv171 = zext i8 %116 to i32
  %or172 = or i32 %conv171, 3
  %conv173 = trunc i32 %or172 to i8
  store i8 %conv173, i8* %op_private170, align 1
  br label %if.end174

if.end174:                                        ; preds = %if.then169, %if.end162
  %117 = load %struct.op*, %struct.op** %o.addr, align 8
  %118 = bitcast %struct.op* %117 to %struct.listop*
  %op_first175 = getelementptr inbounds %struct.listop, %struct.listop* %118, i32 0, i32 7
  %119 = load %struct.op*, %struct.op** %op_first175, align 8
  %op_sibling176 = getelementptr inbounds %struct.op, %struct.op* %119, i32 0, i32 1
  %120 = load %struct.op*, %struct.op** %op_sibling176, align 8
  %add.ptr177 = getelementptr inbounds %struct.op, %struct.op* %120, i64 0
  store %struct.op* %add.ptr177, %struct.op** %kid, align 8
  %121 = load %struct.op*, %struct.op** %o.addr, align 8
  %122 = load %struct.op*, %struct.op** %o.addr, align 8
  %123 = bitcast %struct.op* %122 to %struct.listop*
  %op_first178 = getelementptr inbounds %struct.listop, %struct.listop* %123, i32 0, i32 7
  %124 = load %struct.op*, %struct.op** %op_first178, align 8
  %call179 = call %struct.op* @Perl_op_sibling_splice(%struct.op* %121, %struct.op* %124, i32 1, %struct.op* null)
  %125 = load %struct.op*, %struct.op** %kid, align 8
  call void @Perl_op_free(%struct.op* %125)
  br label %return

return:                                           ; preds = %if.end174, %if.then141, %if.then117, %if.then108, %if.else97, %if.then76, %if.then71, %do.end, %if.then26, %sw.default, %if.then
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_ck_split(%struct.op* %o) #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %o.addr = alloca %struct.op*, align 8
  %kid = alloca %struct.op*, align 8
  %coerce = alloca %union.XOPRETANY, align 8
  store %struct.op* %o, %struct.op** %o.addr, align 8
  %0 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %0, i32 0, i32 5
  %1 = load i8, i8* %op_flags, align 2
  %conv = zext i8 %1 to i32
  %and = and i32 %conv, 64
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.op*, %struct.op** %o.addr, align 8
  %call = call %struct.op* @S_no_fh_allowed(%struct.op* %2)
  store %struct.op* %call, %struct.op** %retval, align 8
  br label %return

if.end:                                           ; preds = %entry
  %3 = load %struct.op*, %struct.op** %o.addr, align 8
  %4 = bitcast %struct.op* %3 to %struct.listop*
  %op_first = getelementptr inbounds %struct.listop, %struct.listop* %4, i32 0, i32 7
  %5 = load %struct.op*, %struct.op** %op_first, align 8
  store %struct.op* %5, %struct.op** %kid, align 8
  %6 = load %struct.op*, %struct.op** %kid, align 8
  %op_type = getelementptr inbounds %struct.op, %struct.op* %6, i32 0, i32 4
  %bf.load = load i16, i16* %op_type, align 8
  %bf.clear = and i16 %bf.load, 511
  %bf.cast = zext i16 %bf.clear to i32
  %cmp = icmp ne i32 %bf.cast, 0
  br i1 %cmp, label %if.then2, label %if.end7

if.then2:                                         ; preds = %if.end
  %7 = load %struct.op*, %struct.op** %kid, align 8
  %op_type3 = getelementptr inbounds %struct.op, %struct.op* %7, i32 0, i32 4
  %bf.load4 = load i16, i16* %op_type3, align 8
  %bf.clear5 = and i16 %bf.load4, 511
  %bf.cast6 = zext i16 %bf.clear5 to i32
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.126, i64 0, i64 0), i32 %bf.cast6)
  br label %if.end7

if.end7:                                          ; preds = %if.then2, %if.end
  %8 = load %struct.op*, %struct.op** %o.addr, align 8
  %9 = load %struct.op*, %struct.op** %kid, align 8
  %op_sibling = getelementptr inbounds %struct.op, %struct.op* %9, i32 0, i32 1
  %10 = load %struct.op*, %struct.op** %op_sibling, align 8
  %tobool8 = icmp ne %struct.op* %10, null
  br i1 %tobool8, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end7
  br i1 true, label %cond.true9, label %cond.false10

cond.false:                                       ; preds = %if.end7
  br i1 false, label %cond.true9, label %cond.false10

cond.true9:                                       ; preds = %cond.false, %cond.true
  br label %cond.end

cond.false10:                                     ; preds = %cond.false, %cond.true
  %call11 = call %struct.sv* @Perl_newSVpvn(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.127, i64 0, i64 0), i64 1)
  %call12 = call %struct.op* @Perl_newSVOP(i32 5, i32 0, %struct.sv* %call11)
  br label %cond.end

cond.end:                                         ; preds = %cond.false10, %cond.true9
  %cond = phi %struct.op* [ null, %cond.true9 ], [ %call12, %cond.false10 ]
  %call13 = call %struct.op* @Perl_op_sibling_splice(%struct.op* %8, %struct.op* null, i32 1, %struct.op* %cond)
  %11 = load %struct.op*, %struct.op** %kid, align 8
  call void @Perl_op_free(%struct.op* %11)
  %12 = load %struct.op*, %struct.op** %o.addr, align 8
  %13 = bitcast %struct.op* %12 to %struct.listop*
  %op_first14 = getelementptr inbounds %struct.listop, %struct.listop* %13, i32 0, i32 7
  %14 = load %struct.op*, %struct.op** %op_first14, align 8
  store %struct.op* %14, %struct.op** %kid, align 8
  %15 = load %struct.op*, %struct.op** %kid, align 8
  %op_type15 = getelementptr inbounds %struct.op, %struct.op* %15, i32 0, i32 4
  %bf.load16 = load i16, i16* %op_type15, align 8
  %bf.clear17 = and i16 %bf.load16, 511
  %bf.cast18 = zext i16 %bf.clear17 to i32
  %cmp19 = icmp ne i32 %bf.cast18, 31
  br i1 %cmp19, label %if.then25, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %cond.end
  %16 = load %struct.op*, %struct.op** %kid, align 8
  %op_flags21 = getelementptr inbounds %struct.op, %struct.op* %16, i32 0, i32 5
  %17 = load i8, i8* %op_flags21, align 2
  %conv22 = zext i8 %17 to i32
  %and23 = and i32 %conv22, 64
  %tobool24 = icmp ne i32 %and23, 0
  br i1 %tobool24, label %if.then25, label %if.end30

if.then25:                                        ; preds = %lor.lhs.false, %cond.end
  %18 = load %struct.op*, %struct.op** %o.addr, align 8
  %call26 = call %struct.op* @Perl_op_sibling_splice(%struct.op* %18, %struct.op* null, i32 1, %struct.op* null)
  %call27 = call %struct.op* @Perl_newPMOP(i32 31, i32 128)
  %19 = load %struct.op*, %struct.op** %kid, align 8
  %call28 = call %struct.op* @Perl_pmruntime(%struct.op* %call27, %struct.op* %19, %struct.op* null, i1 zeroext false, i32 0)
  store %struct.op* %call28, %struct.op** %kid, align 8
  %20 = load %struct.op*, %struct.op** %o.addr, align 8
  %21 = load %struct.op*, %struct.op** %kid, align 8
  %call29 = call %struct.op* @Perl_op_sibling_splice(%struct.op* %20, %struct.op* null, i32 0, %struct.op* %21)
  br label %if.end30

if.end30:                                         ; preds = %if.then25, %lor.lhs.false
  br label %do.body

do.body:                                          ; preds = %if.end30
  %22 = load %struct.op*, %struct.op** %kid, align 8
  %op_type31 = getelementptr inbounds %struct.op, %struct.op* %22, i32 0, i32 4
  %bf.load32 = load i16, i16* %op_type31, align 8
  %bf.clear33 = and i16 %bf.load32, -512
  %bf.set = or i16 %bf.clear33, 13
  store i16 %bf.set, i16* %op_type31, align 8
  %23 = load %struct.op* ()*, %struct.op* ()** getelementptr inbounds ([0 x %struct.op* ()*], [0 x %struct.op* ()*]* @PL_ppaddr, i64 0, i64 13), align 8
  %24 = load %struct.op*, %struct.op** %kid, align 8
  %op_ppaddr = getelementptr inbounds %struct.op, %struct.op* %24, i32 0, i32 2
  store %struct.op* ()* %23, %struct.op* ()** %op_ppaddr, align 8
  br label %do.end

do.end:                                           ; preds = %do.body
  %25 = load %struct.op*, %struct.op** %kid, align 8
  %op_targ = getelementptr inbounds %struct.op, %struct.op* %25, i32 0, i32 3
  store i64 0, i64* %op_targ, align 8
  %26 = load %struct.op*, %struct.op** %kid, align 8
  %call34 = call %struct.op* @Perl_scalar(%struct.op* %26)
  %27 = load %struct.op*, %struct.op** %kid, align 8
  %28 = bitcast %struct.op* %27 to %struct.pmop*
  %op_pmflags = getelementptr inbounds %struct.pmop, %struct.pmop* %28, i32 0, i32 10
  %29 = load i32, i32* %op_pmflags, align 8
  %and35 = and i32 %29, 16777216
  %tobool36 = icmp ne i32 %and35, 0
  br i1 %tobool36, label %if.then37, label %if.end38

if.then37:                                        ; preds = %do.end
  call void (i32, i8*, ...) @Perl_ck_warner(i32 20, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.128, i64 0, i64 0))
  br label %if.end38

if.end38:                                         ; preds = %if.then37, %do.end
  %30 = load %struct.op*, %struct.op** %kid, align 8
  %op_sibling39 = getelementptr inbounds %struct.op, %struct.op* %30, i32 0, i32 1
  %31 = load %struct.op*, %struct.op** %op_sibling39, align 8
  %tobool40 = icmp ne %struct.op* %31, null
  br i1 %tobool40, label %cond.true41, label %cond.false42

cond.true41:                                      ; preds = %if.end38
  br i1 true, label %if.end46, label %if.then43

cond.false42:                                     ; preds = %if.end38
  br i1 false, label %if.end46, label %if.then43

if.then43:                                        ; preds = %cond.false42, %cond.true41
  %32 = load %struct.op*, %struct.op** %o.addr, align 8
  %call44 = call %struct.op* @Perl_newDEFSVOP()
  %call45 = call %struct.op* @Perl_op_append_elem(i32 156, %struct.op* %32, %struct.op* %call44)
  br label %if.end46

if.end46:                                         ; preds = %if.then43, %cond.false42, %cond.true41
  %33 = load %struct.op*, %struct.op** %kid, align 8
  %op_sibling47 = getelementptr inbounds %struct.op, %struct.op* %33, i32 0, i32 1
  %34 = load %struct.op*, %struct.op** %op_sibling47, align 8
  %add.ptr = getelementptr inbounds %struct.op, %struct.op* %34, i64 0
  store %struct.op* %add.ptr, %struct.op** %kid, align 8
  %35 = load %struct.op*, %struct.op** %kid, align 8
  %call48 = call %struct.op* @Perl_scalar(%struct.op* %35)
  %36 = load %struct.op*, %struct.op** %kid, align 8
  %op_sibling49 = getelementptr inbounds %struct.op, %struct.op* %36, i32 0, i32 1
  %37 = load %struct.op*, %struct.op** %op_sibling49, align 8
  %tobool50 = icmp ne %struct.op* %37, null
  br i1 %tobool50, label %cond.true51, label %cond.false52

cond.true51:                                      ; preds = %if.end46
  br i1 true, label %if.end59, label %if.then53

cond.false52:                                     ; preds = %if.end46
  br i1 false, label %if.end59, label %if.then53

if.then53:                                        ; preds = %cond.false52, %cond.true51
  %38 = load %struct.op*, %struct.op** %o.addr, align 8
  %call54 = call %struct.sv* @Perl_newSViv(i64 0)
  %call55 = call %struct.op* @Perl_newSVOP(i32 5, i32 0, %struct.sv* %call54)
  %call56 = call %struct.op* @Perl_op_append_elem(i32 156, %struct.op* %38, %struct.op* %call55)
  %39 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_private = getelementptr inbounds %struct.op, %struct.op* %39, i32 0, i32 6
  %40 = load i8, i8* %op_private, align 1
  %conv57 = zext i8 %40 to i32
  %or = or i32 %conv57, 128
  %conv58 = trunc i32 %or to i8
  store i8 %conv58, i8* %op_private, align 1
  br label %if.end59

if.end59:                                         ; preds = %if.then53, %cond.false52, %cond.true51
  %41 = load %struct.op*, %struct.op** %kid, align 8
  %op_sibling60 = getelementptr inbounds %struct.op, %struct.op* %41, i32 0, i32 1
  %42 = load %struct.op*, %struct.op** %op_sibling60, align 8
  %add.ptr61 = getelementptr inbounds %struct.op, %struct.op* %42, i64 0
  store %struct.op* %add.ptr61, %struct.op** %kid, align 8
  %43 = load %struct.op*, %struct.op** %kid, align 8
  %call62 = call %struct.op* @Perl_scalar(%struct.op* %43)
  %44 = load %struct.op*, %struct.op** %kid, align 8
  %op_sibling63 = getelementptr inbounds %struct.op, %struct.op* %44, i32 0, i32 1
  %45 = load %struct.op*, %struct.op** %op_sibling63, align 8
  %tobool64 = icmp ne %struct.op* %45, null
  br i1 %tobool64, label %cond.true65, label %cond.false66

cond.true65:                                      ; preds = %if.end59
  br i1 true, label %if.then67, label %if.end84

cond.false66:                                     ; preds = %if.end59
  br i1 false, label %if.then67, label %if.end84

if.then67:                                        ; preds = %cond.false66, %cond.true65
  %46 = load %struct.op*, %struct.op** %o.addr, align 8
  %47 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type68 = getelementptr inbounds %struct.op, %struct.op* %47, i32 0, i32 4
  %bf.load69 = load i16, i16* %op_type68, align 8
  %bf.clear70 = and i16 %bf.load69, 511
  %bf.cast71 = zext i16 %bf.clear70 to i32
  %cmp72 = icmp eq i32 %bf.cast71, 380
  br i1 %cmp72, label %cond.true74, label %cond.false76

cond.true74:                                      ; preds = %if.then67
  %48 = load %struct.op*, %struct.op** %o.addr, align 8
  %call75 = call i8* @Perl_custom_op_get_field(%struct.op* %48, i32 2)
  %coerce.dive = getelementptr inbounds %union.XOPRETANY, %union.XOPRETANY* %coerce, i32 0, i32 0
  store i8* %call75, i8** %coerce.dive, align 8
  %xop_desc = bitcast %union.XOPRETANY* %coerce to i8**
  %49 = load i8*, i8** %xop_desc, align 8
  br label %cond.end81

cond.false76:                                     ; preds = %if.then67
  %50 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type77 = getelementptr inbounds %struct.op, %struct.op* %50, i32 0, i32 4
  %bf.load78 = load i16, i16* %op_type77, align 8
  %bf.clear79 = and i16 %bf.load78, 511
  %bf.cast80 = zext i16 %bf.clear79 to i32
  %idxprom = zext i32 %bf.cast80 to i64
  %arrayidx = getelementptr inbounds [0 x i8*], [0 x i8*]* @PL_op_desc, i64 0, i64 %idxprom
  %51 = load i8*, i8** %arrayidx, align 8
  br label %cond.end81

cond.end81:                                       ; preds = %cond.false76, %cond.true74
  %cond82 = phi i8* [ %49, %cond.true74 ], [ %51, %cond.false76 ]
  %call83 = call %struct.op* @S_too_many_arguments_pv(%struct.op* %46, i8* %cond82, i32 0)
  store %struct.op* %call83, %struct.op** %retval, align 8
  br label %return

if.end84:                                         ; preds = %cond.false66, %cond.true65
  %52 = load %struct.op*, %struct.op** %o.addr, align 8
  store %struct.op* %52, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %if.end84, %cond.end81, %if.then
  %53 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %53
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_ck_stringify(%struct.op* %o) #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %o.addr = alloca %struct.op*, align 8
  %kid = alloca %struct.op*, align 8
  store %struct.op* %o, %struct.op** %o.addr, align 8
  %0 = load %struct.op*, %struct.op** %o.addr, align 8
  %1 = bitcast %struct.op* %0 to %struct.unop*
  %op_first = getelementptr inbounds %struct.unop, %struct.unop* %1, i32 0, i32 7
  %2 = load %struct.op*, %struct.op** %op_first, align 8
  %op_sibling = getelementptr inbounds %struct.op, %struct.op* %2, i32 0, i32 1
  %3 = load %struct.op*, %struct.op** %op_sibling, align 8
  %add.ptr = getelementptr inbounds %struct.op, %struct.op* %3, i64 0
  store %struct.op* %add.ptr, %struct.op** %kid, align 8
  %4 = load %struct.op*, %struct.op** %kid, align 8
  %op_type = getelementptr inbounds %struct.op, %struct.op* %4, i32 0, i32 4
  %bf.load = load i16, i16* %op_type, align 8
  %bf.clear = and i16 %bf.load, 511
  %bf.cast = zext i16 %bf.clear to i32
  %cmp = icmp eq i32 %bf.cast, 157
  br i1 %cmp, label %land.lhs.true, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %5 = load %struct.op*, %struct.op** %kid, align 8
  %op_type1 = getelementptr inbounds %struct.op, %struct.op* %5, i32 0, i32 4
  %bf.load2 = load i16, i16* %op_type1, align 8
  %bf.clear3 = and i16 %bf.load2, 511
  %bf.cast4 = zext i16 %bf.clear3 to i32
  %cmp5 = icmp eq i32 %bf.cast4, 134
  br i1 %cmp5, label %land.lhs.true, label %lor.lhs.false6

lor.lhs.false6:                                   ; preds = %lor.lhs.false
  %6 = load %struct.op*, %struct.op** %kid, align 8
  %op_type7 = getelementptr inbounds %struct.op, %struct.op* %6, i32 0, i32 4
  %bf.load8 = load i16, i16* %op_type7, align 8
  %bf.clear9 = and i16 %bf.load8, 511
  %bf.cast10 = zext i16 %bf.clear9 to i32
  %cmp11 = icmp eq i32 %bf.cast10, 133
  br i1 %cmp11, label %land.lhs.true, label %lor.lhs.false12

lor.lhs.false12:                                  ; preds = %lor.lhs.false6
  %7 = load %struct.op*, %struct.op** %kid, align 8
  %op_type13 = getelementptr inbounds %struct.op, %struct.op* %7, i32 0, i32 4
  %bf.load14 = load i16, i16* %op_type13, align 8
  %bf.clear15 = and i16 %bf.load14, 511
  %bf.cast16 = zext i16 %bf.clear15 to i32
  %cmp17 = icmp eq i32 %bf.cast16, 131
  br i1 %cmp17, label %land.lhs.true, label %lor.lhs.false18

lor.lhs.false18:                                  ; preds = %lor.lhs.false12
  %8 = load %struct.op*, %struct.op** %kid, align 8
  %op_type19 = getelementptr inbounds %struct.op, %struct.op* %8, i32 0, i32 4
  %bf.load20 = load i16, i16* %op_type19, align 8
  %bf.clear21 = and i16 %bf.load20, 511
  %bf.cast22 = zext i16 %bf.clear21 to i32
  %cmp23 = icmp eq i32 %bf.cast22, 132
  br i1 %cmp23, label %land.lhs.true, label %lor.lhs.false24

lor.lhs.false24:                                  ; preds = %lor.lhs.false18
  %9 = load %struct.op*, %struct.op** %kid, align 8
  %op_type25 = getelementptr inbounds %struct.op, %struct.op* %9, i32 0, i32 4
  %bf.load26 = load i16, i16* %op_type25, align 8
  %bf.clear27 = and i16 %bf.load26, 511
  %bf.cast28 = zext i16 %bf.clear27 to i32
  %cmp29 = icmp eq i32 %bf.cast28, 130
  br i1 %cmp29, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %lor.lhs.false24, %lor.lhs.false18, %lor.lhs.false12, %lor.lhs.false6, %lor.lhs.false, %entry
  %10 = load %struct.op*, %struct.op** %kid, align 8
  %op_sibling30 = getelementptr inbounds %struct.op, %struct.op* %10, i32 0, i32 1
  %11 = load %struct.op*, %struct.op** %op_sibling30, align 8
  %tobool = icmp ne %struct.op* %11, null
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true
  br i1 true, label %if.end, label %if.then

cond.false:                                       ; preds = %land.lhs.true
  br i1 false, label %if.end, label %if.then

if.then:                                          ; preds = %cond.false, %cond.true
  %12 = load %struct.op*, %struct.op** %o.addr, align 8
  %13 = load %struct.op*, %struct.op** %o.addr, align 8
  %14 = bitcast %struct.op* %13 to %struct.unop*
  %op_first31 = getelementptr inbounds %struct.unop, %struct.unop* %14, i32 0, i32 7
  %15 = load %struct.op*, %struct.op** %op_first31, align 8
  %call = call %struct.op* @Perl_op_sibling_splice(%struct.op* %12, %struct.op* %15, i32 -1, %struct.op* null)
  %16 = load %struct.op*, %struct.op** %o.addr, align 8
  call void @Perl_op_free(%struct.op* %16)
  %17 = load %struct.op*, %struct.op** %kid, align 8
  store %struct.op* %17, %struct.op** %retval, align 8
  br label %return

if.end:                                           ; preds = %cond.false, %cond.true, %lor.lhs.false24
  %18 = load %struct.op*, %struct.op** %o.addr, align 8
  %call32 = call %struct.op* @Perl_ck_fun(%struct.op* %18)
  store %struct.op* %call32, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %if.end, %if.then
  %19 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %19
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_ck_join(%struct.op* %o) #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %o.addr = alloca %struct.op*, align 8
  %kid = alloca %struct.op*, align 8
  %re = alloca %struct.p5rx*, align 8
  %msg = alloca %struct.sv*, align 8
  %bairn = alloca %struct.op*, align 8
  %ret = alloca %struct.op*, align 8
  store %struct.op* %o, %struct.op** %o.addr, align 8
  %0 = load %struct.op*, %struct.op** %o.addr, align 8
  %1 = bitcast %struct.op* %0 to %struct.listop*
  %op_first = getelementptr inbounds %struct.listop, %struct.listop* %1, i32 0, i32 7
  %2 = load %struct.op*, %struct.op** %op_first, align 8
  %op_sibling = getelementptr inbounds %struct.op, %struct.op* %2, i32 0, i32 1
  %3 = load %struct.op*, %struct.op** %op_sibling, align 8
  %add.ptr = getelementptr inbounds %struct.op, %struct.op* %3, i64 0
  store %struct.op* %add.ptr, %struct.op** %kid, align 8
  %4 = load %struct.op*, %struct.op** %kid, align 8
  %tobool = icmp ne %struct.op* %4, null
  br i1 %tobool, label %land.lhs.true, label %if.end19

land.lhs.true:                                    ; preds = %entry
  %5 = load %struct.op*, %struct.op** %kid, align 8
  %op_type = getelementptr inbounds %struct.op, %struct.op* %5, i32 0, i32 4
  %bf.load = load i16, i16* %op_type, align 8
  %bf.clear = and i16 %bf.load, 511
  %bf.cast = zext i16 %bf.clear to i32
  %cmp = icmp eq i32 %bf.cast, 31
  br i1 %cmp, label %if.then, label %if.end19

if.then:                                          ; preds = %land.lhs.true
  %call = call zeroext i1 @Perl_ckwarn(i32 28)
  br i1 %call, label %if.then1, label %if.end

if.then1:                                         ; preds = %if.then
  %6 = load %struct.op*, %struct.op** %kid, align 8
  %7 = bitcast %struct.op* %6 to %struct.pmop*
  %op_pmregexp = getelementptr inbounds %struct.pmop, %struct.pmop* %7, i32 0, i32 9
  %8 = load %struct.p5rx*, %struct.p5rx** %op_pmregexp, align 8
  store %struct.p5rx* %8, %struct.p5rx** %re, align 8
  %9 = load %struct.p5rx*, %struct.p5rx** %re, align 8
  %tobool2 = icmp ne %struct.p5rx* %9, null
  br i1 %tobool2, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then1
  %10 = load %struct.p5rx*, %struct.p5rx** %re, align 8
  %call3 = call %struct.regexp* @S_ReANY(%struct.p5rx* %10)
  %xpv_len_u = getelementptr inbounds %struct.regexp, %struct.regexp* %call3, i32 0, i32 3
  %xpvlenu_pv = bitcast %union.anon.14* %xpv_len_u to i8**
  %11 = load i8*, i8** %xpvlenu_pv, align 8
  %12 = load %struct.p5rx*, %struct.p5rx** %re, align 8
  %call4 = call %struct.regexp* @S_ReANY(%struct.p5rx* %12)
  %pre_prefix = getelementptr inbounds %struct.regexp, %struct.regexp* %call4, i32 0, i32 24
  %bf.load5 = load i16, i16* %pre_prefix, align 8
  %bf.clear6 = and i16 %bf.load5, 15
  %bf.cast7 = zext i16 %bf.clear6 to i32
  %idx.ext = sext i32 %bf.cast7 to i64
  %add.ptr8 = getelementptr inbounds i8, i8* %11, i64 %idx.ext
  %13 = load %struct.p5rx*, %struct.p5rx** %re, align 8
  %sv_any = getelementptr inbounds %struct.p5rx, %struct.p5rx* %13, i32 0, i32 0
  %14 = load %struct.regexp*, %struct.regexp** %sv_any, align 8
  %15 = bitcast %struct.regexp* %14 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %15, i32 0, i32 2
  %16 = load i64, i64* %xpv_cur, align 8
  %17 = load %struct.p5rx*, %struct.p5rx** %re, align 8
  %call9 = call %struct.regexp* @S_ReANY(%struct.p5rx* %17)
  %pre_prefix10 = getelementptr inbounds %struct.regexp, %struct.regexp* %call9, i32 0, i32 24
  %bf.load11 = load i16, i16* %pre_prefix10, align 8
  %bf.clear12 = and i16 %bf.load11, 15
  %bf.cast13 = zext i16 %bf.clear12 to i32
  %conv = zext i32 %bf.cast13 to i64
  %sub = sub i64 %16, %conv
  %sub14 = sub i64 %sub, 1
  %18 = load %struct.p5rx*, %struct.p5rx** %re, align 8
  %sv_flags = getelementptr inbounds %struct.p5rx, %struct.p5rx* %18, i32 0, i32 2
  %19 = load i32, i32* %sv_flags, align 4
  %and = and i32 %19, 536870912
  %tobool15 = icmp ne i32 %and, 0
  %20 = zext i1 %tobool15 to i64
  %cond = select i1 %tobool15, i32 536870912, i32 0
  %or = or i32 524288, %cond
  %call16 = call %struct.sv* @Perl_newSVpvn_flags(i8* %add.ptr8, i64 %sub14, i32 %or)
  br label %cond.end

cond.false:                                       ; preds = %if.then1
  %call17 = call %struct.sv* @Perl_newSVpvn_flags(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.129, i64 0, i64 0), i64 6, i32 524288)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond18 = phi %struct.sv* [ %call16, %cond.true ], [ %call17, %cond.false ]
  store %struct.sv* %cond18, %struct.sv** %msg, align 8
  %21 = load %struct.sv*, %struct.sv** %msg, align 8
  %22 = bitcast %struct.sv* %21 to i8*
  %23 = load %struct.sv*, %struct.sv** %msg, align 8
  %24 = bitcast %struct.sv* %23 to i8*
  call void (i32, i8*, ...) @Perl_warner(i32 28, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.130, i64 0, i64 0), i8* %22, i8* %24)
  br label %if.end

if.end:                                           ; preds = %cond.end, %if.then
  br label %if.end19

if.end19:                                         ; preds = %if.end, %land.lhs.true, %entry
  %25 = load %struct.op*, %struct.op** %kid, align 8
  %tobool20 = icmp ne %struct.op* %25, null
  br i1 %tobool20, label %land.lhs.true21, label %if.end84

land.lhs.true21:                                  ; preds = %if.end19
  %26 = load %struct.op*, %struct.op** %kid, align 8
  %op_type22 = getelementptr inbounds %struct.op, %struct.op* %26, i32 0, i32 4
  %bf.load23 = load i16, i16* %op_type22, align 8
  %bf.clear24 = and i16 %bf.load23, 511
  %bf.cast25 = zext i16 %bf.clear24 to i32
  %cmp26 = icmp eq i32 %bf.cast25, 5
  br i1 %cmp26, label %if.then58, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true21
  %27 = load %struct.op*, %struct.op** %kid, align 8
  %op_type28 = getelementptr inbounds %struct.op, %struct.op* %27, i32 0, i32 4
  %bf.load29 = load i16, i16* %op_type28, align 8
  %bf.clear30 = and i16 %bf.load29, 511
  %bf.cast31 = zext i16 %bf.clear30 to i32
  %cmp32 = icmp eq i32 %bf.cast31, 9
  br i1 %cmp32, label %land.lhs.true34, label %lor.lhs.false38

land.lhs.true34:                                  ; preds = %lor.lhs.false
  %28 = load %struct.op*, %struct.op** %kid, align 8
  %op_private = getelementptr inbounds %struct.op, %struct.op* %28, i32 0, i32 6
  %29 = load i8, i8* %op_private, align 1
  %conv35 = zext i8 %29 to i32
  %and36 = and i32 %conv35, 128
  %tobool37 = icmp ne i32 %and36, 0
  br i1 %tobool37, label %lor.lhs.false38, label %if.then58

lor.lhs.false38:                                  ; preds = %land.lhs.true34, %lor.lhs.false
  %30 = load %struct.op*, %struct.op** %kid, align 8
  %op_type39 = getelementptr inbounds %struct.op, %struct.op* %30, i32 0, i32 4
  %bf.load40 = load i16, i16* %op_type39, align 8
  %bf.clear41 = and i16 %bf.load40, 511
  %bf.cast42 = zext i16 %bf.clear41 to i32
  %cmp43 = icmp eq i32 %bf.cast42, 15
  br i1 %cmp43, label %land.lhs.true45, label %if.end84

land.lhs.true45:                                  ; preds = %lor.lhs.false38
  %31 = load %struct.op*, %struct.op** %kid, align 8
  %32 = bitcast %struct.op* %31 to %struct.unop*
  %op_first46 = getelementptr inbounds %struct.unop, %struct.unop* %32, i32 0, i32 7
  %33 = load %struct.op*, %struct.op** %op_first46, align 8
  %op_type47 = getelementptr inbounds %struct.op, %struct.op* %33, i32 0, i32 4
  %bf.load48 = load i16, i16* %op_type47, align 8
  %bf.clear49 = and i16 %bf.load48, 511
  %bf.cast50 = zext i16 %bf.clear49 to i32
  %cmp51 = icmp eq i32 %bf.cast50, 7
  br i1 %cmp51, label %land.lhs.true53, label %if.end84

land.lhs.true53:                                  ; preds = %land.lhs.true45
  %34 = load %struct.op*, %struct.op** %kid, align 8
  %op_private54 = getelementptr inbounds %struct.op, %struct.op* %34, i32 0, i32 6
  %35 = load i8, i8* %op_private54, align 1
  %conv55 = zext i8 %35 to i32
  %and56 = and i32 %conv55, 192
  %tobool57 = icmp ne i32 %and56, 0
  br i1 %tobool57, label %if.end84, label %if.then58

if.then58:                                        ; preds = %land.lhs.true53, %land.lhs.true34, %land.lhs.true21
  %36 = load %struct.op*, %struct.op** %kid, align 8
  %op_sibling59 = getelementptr inbounds %struct.op, %struct.op* %36, i32 0, i32 1
  %37 = load %struct.op*, %struct.op** %op_sibling59, align 8
  %add.ptr60 = getelementptr inbounds %struct.op, %struct.op* %37, i64 0
  store %struct.op* %add.ptr60, %struct.op** %bairn, align 8
  %38 = load %struct.op*, %struct.op** %bairn, align 8
  %tobool61 = icmp ne %struct.op* %38, null
  br i1 %tobool61, label %land.lhs.true62, label %if.end83

land.lhs.true62:                                  ; preds = %if.then58
  %39 = load %struct.op*, %struct.op** %bairn, align 8
  %op_sibling63 = getelementptr inbounds %struct.op, %struct.op* %39, i32 0, i32 1
  %40 = load %struct.op*, %struct.op** %op_sibling63, align 8
  %tobool64 = icmp ne %struct.op* %40, null
  br i1 %tobool64, label %cond.true65, label %cond.false66

cond.true65:                                      ; preds = %land.lhs.true62
  br i1 true, label %if.end83, label %land.lhs.true67

cond.false66:                                     ; preds = %land.lhs.true62
  br i1 false, label %if.end83, label %land.lhs.true67

land.lhs.true67:                                  ; preds = %cond.false66, %cond.true65
  %41 = load %struct.op*, %struct.op** %bairn, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %41, i32 0, i32 5
  %42 = load i8, i8* %op_flags, align 2
  %conv68 = zext i8 %42 to i32
  %and69 = and i32 %conv68, 3
  %tobool70 = icmp ne i32 %and69, 0
  br i1 %tobool70, label %cond.true71, label %cond.false75

cond.true71:                                      ; preds = %land.lhs.true67
  %43 = load %struct.op*, %struct.op** %bairn, align 8
  %op_flags72 = getelementptr inbounds %struct.op, %struct.op* %43, i32 0, i32 5
  %44 = load i8, i8* %op_flags72, align 2
  %conv73 = zext i8 %44 to i32
  %and74 = and i32 %conv73, 3
  br label %cond.end76

cond.false75:                                     ; preds = %land.lhs.true67
  br label %cond.end76

cond.end76:                                       ; preds = %cond.false75, %cond.true71
  %cond77 = phi i32 [ %and74, %cond.true71 ], [ 0, %cond.false75 ]
  %cmp78 = icmp eq i32 %cond77, 2
  br i1 %cmp78, label %if.then80, label %if.end83

if.then80:                                        ; preds = %cond.end76
  %45 = load %struct.op*, %struct.op** %o.addr, align 8
  %46 = load %struct.op*, %struct.op** %kid, align 8
  %call81 = call %struct.op* @Perl_op_sibling_splice(%struct.op* %45, %struct.op* %46, i32 1, %struct.op* null)
  %call82 = call %struct.op* @Perl_op_convert_list(i32 68, i32 65536, %struct.op* %call81)
  store %struct.op* %call82, %struct.op** %ret, align 8
  %47 = load %struct.op*, %struct.op** %o.addr, align 8
  call void @Perl_op_free(%struct.op* %47)
  %48 = load %struct.op*, %struct.op** %ret, align 8
  store %struct.op* %48, %struct.op** %retval, align 8
  br label %return

if.end83:                                         ; preds = %cond.end76, %cond.false66, %cond.true65, %if.then58
  br label %if.end84

if.end84:                                         ; preds = %if.end83, %land.lhs.true53, %land.lhs.true45, %lor.lhs.false38, %if.end19
  %49 = load %struct.op*, %struct.op** %o.addr, align 8
  %call85 = call %struct.op* @Perl_ck_fun(%struct.op* %49)
  store %struct.op* %call85, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %if.end84, %if.then80
  %50 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %50
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.cv* @Perl_find_lexical_cv(i64 %off) #0 {
entry:
  %retval = alloca %struct.cv*, align 8
  %off.addr = alloca i64, align 8
  %name = alloca %struct.padname*, align 8
  %compcv = alloca %struct.cv*, align 8
  store i64 %off, i64* %off.addr, align 8
  %0 = load %struct.padnamelist*, %struct.padnamelist** @PL_comppad_name, align 8
  %xpadnl_alloc = getelementptr inbounds %struct.padnamelist, %struct.padnamelist* %0, i32 0, i32 1
  %1 = load %struct.padname**, %struct.padname*** %xpadnl_alloc, align 8
  %2 = load i64, i64* %off.addr, align 8
  %arrayidx = getelementptr inbounds %struct.padname*, %struct.padname** %1, i64 %2
  %3 = load %struct.padname*, %struct.padname** %arrayidx, align 8
  store %struct.padname* %3, %struct.padname** %name, align 8
  %4 = load %struct.cv*, %struct.cv** @PL_compcv, align 8
  store %struct.cv* %4, %struct.cv** %compcv, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %5 = load %struct.padname*, %struct.padname** %name, align 8
  %xpadn_flags = getelementptr inbounds %struct.padname, %struct.padname* %5, i32 0, i32 8
  %6 = load i8, i8* %xpadn_flags, align 1
  %conv = zext i8 %6 to i32
  %and = and i32 %conv, 1
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %7 = load %struct.cv*, %struct.cv** %compcv, align 8
  %sv_any = getelementptr inbounds %struct.cv, %struct.cv* %7, i32 0, i32 0
  %8 = load %struct.xpvcv*, %struct.xpvcv** %sv_any, align 8
  %9 = bitcast %struct.xpvcv* %8 to i8*
  %10 = bitcast i8* %9 to %struct.xpvcv*
  %xcv_outside = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %10, i32 0, i32 10
  %11 = load %struct.cv*, %struct.cv** %xcv_outside, align 8
  store %struct.cv* %11, %struct.cv** %compcv, align 8
  %12 = load %struct.cv*, %struct.cv** %compcv, align 8
  %sv_any1 = getelementptr inbounds %struct.cv, %struct.cv* %12, i32 0, i32 0
  %13 = load %struct.xpvcv*, %struct.xpvcv** %sv_any1, align 8
  %14 = bitcast %struct.xpvcv* %13 to i8*
  %15 = bitcast i8* %14 to %struct.xpvcv*
  %xcv_padlist_u = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %15, i32 0, i32 9
  %xcv_padlist = bitcast %union.anon.9* %xcv_padlist_u to %struct.padlist**
  %16 = load %struct.padlist*, %struct.padlist** %xcv_padlist, align 8
  %xpadl_alloc = getelementptr inbounds %struct.padlist, %struct.padlist* %16, i32 0, i32 1
  %17 = load %struct.av**, %struct.av*** %xpadl_alloc, align 8
  %18 = load %struct.av*, %struct.av** %17, align 8
  %19 = bitcast %struct.av* %18 to %struct.padnamelist*
  %xpadnl_alloc2 = getelementptr inbounds %struct.padnamelist, %struct.padnamelist* %19, i32 0, i32 1
  %20 = load %struct.padname**, %struct.padname*** %xpadnl_alloc2, align 8
  %21 = load %struct.padname*, %struct.padname** %name, align 8
  %xpadn_low = getelementptr inbounds %struct.padname, %struct.padname* %21, i32 0, i32 3
  %22 = load i32, i32* %xpadn_low, align 8
  %conv3 = zext i32 %22 to i64
  store i64 %conv3, i64* %off.addr, align 8
  %arrayidx4 = getelementptr inbounds %struct.padname*, %struct.padname** %20, i64 %conv3
  %23 = load %struct.padname*, %struct.padname** %arrayidx4, align 8
  store %struct.padname* %23, %struct.padname** %name, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %24 = load %struct.padname*, %struct.padname** %name, align 8
  %xpadn_flags5 = getelementptr inbounds %struct.padname, %struct.padname* %24, i32 0, i32 8
  %25 = load i8, i8* %xpadn_flags5, align 1
  %conv6 = zext i8 %25 to i32
  %and7 = and i32 %conv6, 2
  %tobool8 = icmp ne i32 %and7, 0
  br i1 %tobool8, label %if.end, label %land.lhs.true

land.lhs.true:                                    ; preds = %while.end
  %26 = load %struct.padname*, %struct.padname** %name, align 8
  %xpadn_type_u = getelementptr inbounds %struct.padname, %struct.padname* %26, i32 0, i32 2
  %xpadn_protocv = bitcast %union.anon.23* %xpadn_type_u to %struct.cv**
  %27 = load %struct.cv*, %struct.cv** %xpadn_protocv, align 8
  %tobool9 = icmp ne %struct.cv* %27, null
  br i1 %tobool9, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %28 = load %struct.padname*, %struct.padname** %name, align 8
  %xpadn_type_u10 = getelementptr inbounds %struct.padname, %struct.padname* %28, i32 0, i32 2
  %xpadn_protocv11 = bitcast %union.anon.23* %xpadn_type_u10 to %struct.cv**
  %29 = load %struct.cv*, %struct.cv** %xpadn_protocv11, align 8
  store %struct.cv* %29, %struct.cv** %retval, align 8
  br label %return

if.end:                                           ; preds = %land.lhs.true, %while.end
  %30 = load %struct.cv*, %struct.cv** %compcv, align 8
  %sv_any12 = getelementptr inbounds %struct.cv, %struct.cv* %30, i32 0, i32 0
  %31 = load %struct.xpvcv*, %struct.xpvcv** %sv_any12, align 8
  %32 = bitcast %struct.xpvcv* %31 to i8*
  %33 = bitcast i8* %32 to %struct.xpvcv*
  %xcv_padlist_u13 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %33, i32 0, i32 9
  %xcv_padlist14 = bitcast %union.anon.9* %xcv_padlist_u13 to %struct.padlist**
  %34 = load %struct.padlist*, %struct.padlist** %xcv_padlist14, align 8
  %xpadl_alloc15 = getelementptr inbounds %struct.padlist, %struct.padlist* %34, i32 0, i32 1
  %35 = load %struct.av**, %struct.av*** %xpadl_alloc15, align 8
  %arrayidx16 = getelementptr inbounds %struct.av*, %struct.av** %35, i64 1
  %36 = load %struct.av*, %struct.av** %arrayidx16, align 8
  %sv_u = getelementptr inbounds %struct.av, %struct.av* %36, i32 0, i32 3
  %svu_array = bitcast %union.anon.2* %sv_u to %struct.sv***
  %37 = load %struct.sv**, %struct.sv*** %svu_array, align 8
  %38 = load i64, i64* %off.addr, align 8
  %arrayidx17 = getelementptr inbounds %struct.sv*, %struct.sv** %37, i64 %38
  %39 = load %struct.sv*, %struct.sv** %arrayidx17, align 8
  %40 = bitcast %struct.sv* %39 to %struct.cv*
  store %struct.cv* %40, %struct.cv** %retval, align 8
  br label %return

return:                                           ; preds = %if.end, %if.then
  %41 = load %struct.cv*, %struct.cv** %retval, align 8
  ret %struct.cv* %41
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.cv* @Perl_rv2cv_op_cv(%struct.op* %cvop, i32 %flags) #0 {
entry:
  %retval = alloca %struct.cv*, align 8
  %cvop.addr = alloca %struct.op*, align 8
  %flags.addr = alloca i32, align 4
  %rvop = alloca %struct.op*, align 8
  %cv = alloca %struct.cv*, align 8
  %gv = alloca %struct.gv*, align 8
  %rv = alloca %struct.sv*, align 8
  store %struct.op* %cvop, %struct.op** %cvop.addr, align 8
  store i32 %flags, i32* %flags.addr, align 4
  %0 = load i32, i32* %flags.addr, align 4
  %and = and i32 %0, -16
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load i32, i32* %flags.addr, align 4
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.131, i64 0, i64 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %2 = load %struct.op*, %struct.op** %cvop.addr, align 8
  %op_type = getelementptr inbounds %struct.op, %struct.op* %2, i32 0, i32 4
  %bf.load = load i16, i16* %op_type, align 8
  %bf.clear = and i16 %bf.load, 511
  %bf.cast = zext i16 %bf.clear to i32
  %cmp = icmp ne i32 %bf.cast, 17
  br i1 %cmp, label %if.then1, label %if.end2

if.then1:                                         ; preds = %if.end
  store %struct.cv* null, %struct.cv** %retval, align 8
  br label %return

if.end2:                                          ; preds = %if.end
  %3 = load %struct.op*, %struct.op** %cvop.addr, align 8
  %op_private = getelementptr inbounds %struct.op, %struct.op* %3, i32 0, i32 6
  %4 = load i8, i8* %op_private, align 1
  %conv = zext i8 %4 to i32
  %and3 = and i32 %conv, 8
  %tobool4 = icmp ne i32 %and3, 0
  br i1 %tobool4, label %if.then5, label %if.end6

if.then5:                                         ; preds = %if.end2
  store %struct.cv* null, %struct.cv** %retval, align 8
  br label %return

if.end6:                                          ; preds = %if.end2
  %5 = load %struct.op*, %struct.op** %cvop.addr, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %5, i32 0, i32 5
  %6 = load i8, i8* %op_flags, align 2
  %conv7 = zext i8 %6 to i32
  %and8 = and i32 %conv7, 4
  %tobool9 = icmp ne i32 %and8, 0
  br i1 %tobool9, label %if.end11, label %if.then10

if.then10:                                        ; preds = %if.end6
  store %struct.cv* null, %struct.cv** %retval, align 8
  br label %return

if.end11:                                         ; preds = %if.end6
  %7 = load %struct.op*, %struct.op** %cvop.addr, align 8
  %8 = bitcast %struct.op* %7 to %struct.unop*
  %op_first = getelementptr inbounds %struct.unop, %struct.unop* %8, i32 0, i32 7
  %9 = load %struct.op*, %struct.op** %op_first, align 8
  store %struct.op* %9, %struct.op** %rvop, align 8
  %10 = load %struct.op*, %struct.op** %rvop, align 8
  %op_type12 = getelementptr inbounds %struct.op, %struct.op* %10, i32 0, i32 4
  %bf.load13 = load i16, i16* %op_type12, align 8
  %bf.clear14 = and i16 %bf.load13, 511
  %bf.cast15 = zext i16 %bf.clear14 to i32
  switch i32 %bf.cast15, label %sw.default [
    i32 7, label %sw.bb
    i32 5, label %sw.bb50
    i32 387, label %sw.bb59
  ]

sw.bb:                                            ; preds = %if.end11
  %11 = load %struct.op*, %struct.op** %rvop, align 8
  %12 = bitcast %struct.op* %11 to %struct.svop*
  %op_sv = getelementptr inbounds %struct.svop, %struct.svop* %12, i32 0, i32 7
  %13 = load %struct.sv*, %struct.sv** %op_sv, align 8
  %14 = bitcast %struct.sv* %13 to %struct.gv*
  store %struct.gv* %14, %struct.gv** %gv, align 8
  %15 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_flags = getelementptr inbounds %struct.gv, %struct.gv* %15, i32 0, i32 2
  %16 = load i32, i32* %sv_flags, align 4
  %and16 = and i32 %16, 255
  %cmp17 = icmp eq i32 %and16, 9
  br i1 %cmp17, label %if.end34, label %if.then19

if.then19:                                        ; preds = %sw.bb
  %17 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_flags20 = getelementptr inbounds %struct.gv, %struct.gv* %17, i32 0, i32 2
  %18 = load i32, i32* %sv_flags20, align 4
  %and21 = and i32 %18, 2048
  %tobool22 = icmp ne i32 %and21, 0
  br i1 %tobool22, label %land.lhs.true, label %if.end30

land.lhs.true:                                    ; preds = %if.then19
  %19 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u = getelementptr inbounds %struct.gv, %struct.gv* %19, i32 0, i32 3
  %svu_rv = bitcast %union.anon.3* %sv_u to %struct.sv**
  %20 = load %struct.sv*, %struct.sv** %svu_rv, align 8
  %sv_flags23 = getelementptr inbounds %struct.sv, %struct.sv* %20, i32 0, i32 2
  %21 = load i32, i32* %sv_flags23, align 4
  %and24 = and i32 %21, 255
  %cmp25 = icmp eq i32 %and24, 13
  br i1 %cmp25, label %if.then27, label %if.end30

if.then27:                                        ; preds = %land.lhs.true
  %22 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u28 = getelementptr inbounds %struct.gv, %struct.gv* %22, i32 0, i32 3
  %svu_rv29 = bitcast %union.anon.3* %sv_u28 to %struct.sv**
  %23 = load %struct.sv*, %struct.sv** %svu_rv29, align 8
  %24 = bitcast %struct.sv* %23 to i8*
  %25 = bitcast i8* %24 to %struct.cv*
  store %struct.cv* %25, %struct.cv** %cv, align 8
  store %struct.gv* null, %struct.gv** %gv, align 8
  br label %sw.epilog

if.end30:                                         ; preds = %land.lhs.true, %if.then19
  %26 = load i32, i32* %flags.addr, align 4
  %and31 = and i32 %26, 4
  %tobool32 = icmp ne i32 %and31, 0
  br i1 %tobool32, label %if.then33, label %if.else

if.then33:                                        ; preds = %if.end30
  %27 = load %struct.gv*, %struct.gv** %gv, align 8
  %28 = bitcast %struct.gv* %27 to %struct.cv*
  store %struct.cv* %28, %struct.cv** %retval, align 8
  br label %return

if.else:                                          ; preds = %if.end30
  store %struct.cv* null, %struct.cv** %retval, align 8
  br label %return

if.end34:                                         ; preds = %sw.bb
  %29 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u35 = getelementptr inbounds %struct.gv, %struct.gv* %29, i32 0, i32 3
  %svu_gp = bitcast %union.anon.3* %sv_u35 to %struct.gp**
  %30 = load %struct.gp*, %struct.gp** %svu_gp, align 8
  %add.ptr = getelementptr inbounds %struct.gp, %struct.gp* %30, i64 0
  %gp_cvgen = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr, i32 0, i32 3
  %31 = load i32, i32* %gp_cvgen, align 8
  %tobool36 = icmp ne i32 %31, 0
  br i1 %tobool36, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end34
  br label %cond.end

cond.false:                                       ; preds = %if.end34
  %32 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u37 = getelementptr inbounds %struct.gv, %struct.gv* %32, i32 0, i32 3
  %svu_gp38 = bitcast %union.anon.3* %sv_u37 to %struct.gp**
  %33 = load %struct.gp*, %struct.gp** %svu_gp38, align 8
  %add.ptr39 = getelementptr inbounds %struct.gp, %struct.gp* %33, i64 0
  %gp_cv = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr39, i32 0, i32 2
  %34 = load %struct.cv*, %struct.cv** %gp_cv, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.cv* [ null, %cond.true ], [ %34, %cond.false ]
  store %struct.cv* %cond, %struct.cv** %cv, align 8
  %35 = load %struct.cv*, %struct.cv** %cv, align 8
  %tobool40 = icmp ne %struct.cv* %35, null
  br i1 %tobool40, label %if.end49, label %if.then41

if.then41:                                        ; preds = %cond.end
  %36 = load i32, i32* %flags.addr, align 4
  %and42 = and i32 %36, 1
  %tobool43 = icmp ne i32 %and42, 0
  br i1 %tobool43, label %if.then44, label %if.end48

if.then44:                                        ; preds = %if.then41
  %37 = load %struct.op*, %struct.op** %rvop, align 8
  %op_private45 = getelementptr inbounds %struct.op, %struct.op* %37, i32 0, i32 6
  %38 = load i8, i8* %op_private45, align 1
  %conv46 = zext i8 %38 to i32
  %or = or i32 %conv46, 32
  %conv47 = trunc i32 %or to i8
  store i8 %conv47, i8* %op_private45, align 1
  br label %if.end48

if.end48:                                         ; preds = %if.then44, %if.then41
  store %struct.cv* null, %struct.cv** %retval, align 8
  br label %return

if.end49:                                         ; preds = %cond.end
  br label %sw.epilog

sw.bb50:                                          ; preds = %if.end11
  %39 = load %struct.op*, %struct.op** %rvop, align 8
  %40 = bitcast %struct.op* %39 to %struct.svop*
  %op_sv51 = getelementptr inbounds %struct.svop, %struct.svop* %40, i32 0, i32 7
  %41 = load %struct.sv*, %struct.sv** %op_sv51, align 8
  store %struct.sv* %41, %struct.sv** %rv, align 8
  %42 = load %struct.sv*, %struct.sv** %rv, align 8
  %sv_flags52 = getelementptr inbounds %struct.sv, %struct.sv* %42, i32 0, i32 2
  %43 = load i32, i32* %sv_flags52, align 4
  %and53 = and i32 %43, 2048
  %tobool54 = icmp ne i32 %and53, 0
  br i1 %tobool54, label %if.end56, label %if.then55

if.then55:                                        ; preds = %sw.bb50
  store %struct.cv* null, %struct.cv** %retval, align 8
  br label %return

if.end56:                                         ; preds = %sw.bb50
  %44 = load %struct.sv*, %struct.sv** %rv, align 8
  %sv_u57 = getelementptr inbounds %struct.sv, %struct.sv* %44, i32 0, i32 3
  %svu_rv58 = bitcast %union.anon* %sv_u57 to %struct.sv**
  %45 = load %struct.sv*, %struct.sv** %svu_rv58, align 8
  %46 = bitcast %struct.sv* %45 to %struct.cv*
  store %struct.cv* %46, %struct.cv** %cv, align 8
  store %struct.gv* null, %struct.gv** %gv, align 8
  br label %sw.epilog

sw.bb59:                                          ; preds = %if.end11
  %47 = load %struct.op*, %struct.op** %rvop, align 8
  %op_targ = getelementptr inbounds %struct.op, %struct.op* %47, i32 0, i32 3
  %48 = load i64, i64* %op_targ, align 8
  %call = call %struct.cv* @Perl_find_lexical_cv(i64 %48)
  store %struct.cv* %call, %struct.cv** %cv, align 8
  store %struct.gv* null, %struct.gv** %gv, align 8
  br label %sw.epilog

sw.default:                                       ; preds = %if.end11
  store %struct.cv* null, %struct.cv** %retval, align 8
  br label %return

sw.epilog:                                        ; preds = %sw.bb59, %if.end56, %if.end49, %if.then27
  %49 = load %struct.cv*, %struct.cv** %cv, align 8
  %50 = bitcast %struct.cv* %49 to %struct.sv*
  %sv_flags60 = getelementptr inbounds %struct.sv, %struct.sv* %50, i32 0, i32 2
  %51 = load i32, i32* %sv_flags60, align 4
  %and61 = and i32 %51, 255
  %cmp62 = icmp ne i32 %and61, 13
  br i1 %cmp62, label %if.then64, label %if.end65

if.then64:                                        ; preds = %sw.epilog
  store %struct.cv* null, %struct.cv** %retval, align 8
  br label %return

if.end65:                                         ; preds = %sw.epilog
  %52 = load i32, i32* %flags.addr, align 4
  %and66 = and i32 %52, 10
  %tobool67 = icmp ne i32 %and66, 0
  br i1 %tobool67, label %if.then68, label %if.else88

if.then68:                                        ; preds = %if.end65
  %53 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any = getelementptr inbounds %struct.cv, %struct.cv* %53, i32 0, i32 0
  %54 = load %struct.xpvcv*, %struct.xpvcv** %sv_any, align 8
  %55 = bitcast %struct.xpvcv* %54 to i8*
  %56 = bitcast i8* %55 to %struct.xpvcv*
  %xcv_flags = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %56, i32 0, i32 12
  %57 = load i32, i32* %xcv_flags, align 4
  %and69 = and i32 %57, 128
  %tobool70 = icmp ne i32 %and69, 0
  br i1 %tobool70, label %lor.lhs.false, label %land.lhs.true72

lor.lhs.false:                                    ; preds = %if.then68
  %58 = load %struct.gv*, %struct.gv** %gv, align 8
  %tobool71 = icmp ne %struct.gv* %58, null
  br i1 %tobool71, label %if.end87, label %land.lhs.true72

land.lhs.true72:                                  ; preds = %lor.lhs.false, %if.then68
  %59 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any73 = getelementptr inbounds %struct.cv, %struct.cv* %59, i32 0, i32 0
  %60 = load %struct.xpvcv*, %struct.xpvcv** %sv_any73, align 8
  %61 = bitcast %struct.xpvcv* %60 to i8*
  %62 = bitcast i8* %61 to %struct.xpvcv*
  %xcv_flags74 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %62, i32 0, i32 12
  %63 = load i32, i32* %xcv_flags74, align 4
  %and75 = and i32 %63, 65536
  %tobool76 = icmp ne i32 %and75, 0
  br i1 %tobool76, label %if.end87, label %land.lhs.true77

land.lhs.true77:                                  ; preds = %land.lhs.true72
  %64 = load i32, i32* %flags.addr, align 4
  %and78 = and i32 %64, 2
  %tobool79 = icmp ne i32 %and78, 0
  br i1 %tobool79, label %if.then85, label %lor.lhs.false80

lor.lhs.false80:                                  ; preds = %land.lhs.true77
  %65 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any81 = getelementptr inbounds %struct.cv, %struct.cv* %65, i32 0, i32 0
  %66 = load %struct.xpvcv*, %struct.xpvcv** %sv_any81, align 8
  %67 = bitcast %struct.xpvcv* %66 to i8*
  %68 = bitcast i8* %67 to %struct.xpvcv*
  %xcv_flags82 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %68, i32 0, i32 12
  %69 = load i32, i32* %xcv_flags82, align 4
  %and83 = and i32 %69, 32768
  %tobool84 = icmp ne i32 %and83, 0
  br i1 %tobool84, label %if.end87, label %if.then85

if.then85:                                        ; preds = %lor.lhs.false80, %land.lhs.true77
  %70 = load %struct.cv*, %struct.cv** %cv, align 8
  %call86 = call %struct.gv* @S_CvGV(%struct.cv* %70)
  store %struct.gv* %call86, %struct.gv** %gv, align 8
  br label %if.end87

if.end87:                                         ; preds = %if.then85, %lor.lhs.false80, %land.lhs.true72, %lor.lhs.false
  %71 = load %struct.gv*, %struct.gv** %gv, align 8
  %72 = bitcast %struct.gv* %71 to %struct.cv*
  store %struct.cv* %72, %struct.cv** %retval, align 8
  br label %return

if.else88:                                        ; preds = %if.end65
  %73 = load %struct.cv*, %struct.cv** %cv, align 8
  store %struct.cv* %73, %struct.cv** %retval, align 8
  br label %return

return:                                           ; preds = %if.else88, %if.end87, %if.then64, %sw.default, %if.then55, %if.end48, %if.else, %if.then33, %if.then10, %if.then5, %if.then1
  %74 = load %struct.cv*, %struct.cv** %retval, align 8
  ret %struct.cv* %74
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_ck_entersub_args_list(%struct.op* %entersubop) #0 {
entry:
  %entersubop.addr = alloca %struct.op*, align 8
  %aop = alloca %struct.op*, align 8
  store %struct.op* %entersubop, %struct.op** %entersubop.addr, align 8
  %0 = load %struct.op*, %struct.op** %entersubop.addr, align 8
  %1 = bitcast %struct.op* %0 to %struct.unop*
  %op_first = getelementptr inbounds %struct.unop, %struct.unop* %1, i32 0, i32 7
  %2 = load %struct.op*, %struct.op** %op_first, align 8
  store %struct.op* %2, %struct.op** %aop, align 8
  %3 = load %struct.op*, %struct.op** %aop, align 8
  %op_sibling = getelementptr inbounds %struct.op, %struct.op* %3, i32 0, i32 1
  %4 = load %struct.op*, %struct.op** %op_sibling, align 8
  %tobool = icmp ne %struct.op* %4, null
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  br i1 true, label %if.end, label %if.then

cond.false:                                       ; preds = %entry
  br i1 false, label %if.end, label %if.then

if.then:                                          ; preds = %cond.false, %cond.true
  %5 = load %struct.op*, %struct.op** %aop, align 8
  %6 = bitcast %struct.op* %5 to %struct.unop*
  %op_first1 = getelementptr inbounds %struct.unop, %struct.unop* %6, i32 0, i32 7
  %7 = load %struct.op*, %struct.op** %op_first1, align 8
  store %struct.op* %7, %struct.op** %aop, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %cond.false, %cond.true
  %8 = load %struct.op*, %struct.op** %aop, align 8
  %op_sibling2 = getelementptr inbounds %struct.op, %struct.op* %8, i32 0, i32 1
  %9 = load %struct.op*, %struct.op** %op_sibling2, align 8
  %add.ptr = getelementptr inbounds %struct.op, %struct.op* %9, i64 0
  store %struct.op* %add.ptr, %struct.op** %aop, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %10 = load %struct.op*, %struct.op** %aop, align 8
  %op_sibling3 = getelementptr inbounds %struct.op, %struct.op* %10, i32 0, i32 1
  %11 = load %struct.op*, %struct.op** %op_sibling3, align 8
  %tobool4 = icmp ne %struct.op* %11, null
  %12 = zext i1 %tobool4 to i64
  %cond = select i1 %tobool4, i32 1, i32 0
  %tobool5 = icmp ne i32 %cond, 0
  br i1 %tobool5, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %13 = load %struct.op*, %struct.op** %aop, align 8
  %call = call %struct.op* @Perl_list(%struct.op* %13)
  %14 = load %struct.op*, %struct.op** %aop, align 8
  %call6 = call %struct.op* @Perl_op_lvalue_flags(%struct.op* %14, i32 185, i32 0)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %15 = load %struct.op*, %struct.op** %aop, align 8
  %op_sibling7 = getelementptr inbounds %struct.op, %struct.op* %15, i32 0, i32 1
  %16 = load %struct.op*, %struct.op** %op_sibling7, align 8
  %add.ptr8 = getelementptr inbounds %struct.op, %struct.op* %16, i64 0
  store %struct.op* %add.ptr8, %struct.op** %aop, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %17 = load %struct.op*, %struct.op** %entersubop.addr, align 8
  ret %struct.op* %17
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_ck_entersub_args_proto(%struct.op* %entersubop, %struct.gv* %namegv, %struct.sv* %protosv) #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %entersubop.addr = alloca %struct.op*, align 8
  %namegv.addr = alloca %struct.gv*, align 8
  %protosv.addr = alloca %struct.sv*, align 8
  %proto_len = alloca i64, align 8
  %proto = alloca i8*, align 8
  %proto_end = alloca i8*, align 8
  %aop = alloca %struct.op*, align 8
  %prev = alloca %struct.op*, align 8
  %cvop = alloca %struct.op*, align 8
  %parent = alloca %struct.op*, align 8
  %optional = alloca i32, align 4
  %arg = alloca i32, align 4
  %contextclass = alloca i32, align 4
  %e = alloca i8*, align 8
  %o3 = alloca %struct.op*, align 8
  %namesv = alloca %struct.sv*, align 8
  %p = alloca i8*, align 8
  %end = alloca i8*, align 8
  %namesv418 = alloca %struct.sv*, align 8
  store %struct.op* %entersubop, %struct.op** %entersubop.addr, align 8
  store %struct.gv* %namegv, %struct.gv** %namegv.addr, align 8
  store %struct.sv* %protosv, %struct.sv** %protosv.addr, align 8
  store i32 0, i32* %optional, align 4
  store i32 0, i32* %arg, align 4
  store i32 0, i32* %contextclass, align 4
  store i8* null, i8** %e, align 8
  %0 = load %struct.sv*, %struct.sv** %protosv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %0, i32 0, i32 2
  %1 = load i32, i32* %sv_flags, align 4
  %and = and i32 %1, 255
  %cmp = icmp eq i32 %and, 13
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %2 = load %struct.sv*, %struct.sv** %protosv.addr, align 8
  %sv_flags1 = getelementptr inbounds %struct.sv, %struct.sv* %2, i32 0, i32 2
  %3 = load i32, i32* %sv_flags1, align 4
  %and2 = and i32 %3, 1024
  %tobool = icmp ne i32 %and2, 0
  br i1 %tobool, label %if.end, label %if.then

cond.false:                                       ; preds = %entry
  %4 = load %struct.sv*, %struct.sv** %protosv.addr, align 8
  %sv_flags3 = getelementptr inbounds %struct.sv, %struct.sv* %4, i32 0, i32 2
  %5 = load i32, i32* %sv_flags3, align 4
  %and4 = and i32 %5, 65280
  %tobool5 = icmp ne i32 %and4, 0
  br i1 %tobool5, label %if.end, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %cond.false
  %6 = load %struct.sv*, %struct.sv** %protosv.addr, align 8
  %sv_flags6 = getelementptr inbounds %struct.sv, %struct.sv* %6, i32 0, i32 2
  %7 = load i32, i32* %sv_flags6, align 4
  %and7 = and i32 %7, 255
  %cmp8 = icmp eq i32 %and7, 8
  br i1 %cmp8, label %if.end, label %lor.lhs.false9

lor.lhs.false9:                                   ; preds = %lor.lhs.false
  %8 = load %struct.sv*, %struct.sv** %protosv.addr, align 8
  %sv_flags10 = getelementptr inbounds %struct.sv, %struct.sv* %8, i32 0, i32 2
  %9 = load i32, i32* %sv_flags10, align 4
  %and11 = and i32 %9, 16826623
  %cmp12 = icmp eq i32 %and11, 16777226
  br i1 %cmp12, label %if.end, label %if.then

if.then:                                          ; preds = %lor.lhs.false9, %cond.true
  %10 = load %struct.sv*, %struct.sv** %protosv.addr, align 8
  %sv_flags13 = getelementptr inbounds %struct.sv, %struct.sv* %10, i32 0, i32 2
  %11 = load i32, i32* %sv_flags13, align 4
  %conv = zext i32 %11 to i64
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.132, i64 0, i64 0), i64 %conv)
  br label %if.end

if.end:                                           ; preds = %if.then, %lor.lhs.false9, %lor.lhs.false, %cond.false, %cond.true
  %12 = load %struct.sv*, %struct.sv** %protosv.addr, align 8
  %sv_flags14 = getelementptr inbounds %struct.sv, %struct.sv* %12, i32 0, i32 2
  %13 = load i32, i32* %sv_flags14, align 4
  %and15 = and i32 %13, 255
  %cmp16 = icmp eq i32 %and15, 13
  br i1 %cmp16, label %if.then18, label %if.else

if.then18:                                        ; preds = %if.end
  %14 = load %struct.sv*, %struct.sv** %protosv.addr, align 8
  %sv_flags19 = getelementptr inbounds %struct.sv, %struct.sv* %14, i32 0, i32 2
  %15 = load i32, i32* %sv_flags19, align 4
  %and20 = and i32 %15, 1024
  %tobool21 = icmp ne i32 %and20, 0
  br i1 %tobool21, label %cond.true22, label %cond.false36

cond.true22:                                      ; preds = %if.then18
  %16 = load %struct.sv*, %struct.sv** %protosv.addr, align 8
  %sv_flags23 = getelementptr inbounds %struct.sv, %struct.sv* %16, i32 0, i32 2
  %17 = load i32, i32* %sv_flags23, align 4
  %and24 = and i32 %17, 255
  %cmp25 = icmp eq i32 %and24, 13
  br i1 %cmp25, label %land.lhs.true, label %cond.false32

land.lhs.true:                                    ; preds = %cond.true22
  %18 = load %struct.sv*, %struct.sv** %protosv.addr, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %18, i32 0, i32 0
  %19 = load i8*, i8** %sv_any, align 8
  %20 = bitcast i8* %19 to %struct.xpvcv*
  %xcv_flags = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %20, i32 0, i32 12
  %21 = load i32, i32* %xcv_flags, align 4
  %and27 = and i32 %21, 8192
  %tobool28 = icmp ne i32 %and27, 0
  br i1 %tobool28, label %cond.true29, label %cond.false32

cond.true29:                                      ; preds = %land.lhs.true
  %22 = load %struct.sv*, %struct.sv** %protosv.addr, align 8
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %22, i32 0, i32 3
  %svu_pv = bitcast %union.anon* %sv_u to i8**
  %23 = load i8*, i8** %svu_pv, align 8
  %24 = load %struct.sv*, %struct.sv** %protosv.addr, align 8
  %sv_any30 = getelementptr inbounds %struct.sv, %struct.sv* %24, i32 0, i32 0
  %25 = load i8*, i8** %sv_any30, align 8
  %26 = bitcast i8* %25 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %26, i32 0, i32 2
  %27 = load i64, i64* %xpv_cur, align 8
  %add.ptr = getelementptr inbounds i8, i8* %23, i64 %27
  %add.ptr31 = getelementptr inbounds i8, i8* %add.ptr, i64 1
  br label %cond.end

cond.false32:                                     ; preds = %land.lhs.true, %cond.true22
  %28 = load %struct.sv*, %struct.sv** %protosv.addr, align 8
  %sv_u33 = getelementptr inbounds %struct.sv, %struct.sv* %28, i32 0, i32 3
  %svu_pv34 = bitcast %union.anon* %sv_u33 to i8**
  %29 = load i8*, i8** %svu_pv34, align 8
  %add.ptr35 = getelementptr inbounds i8, i8* %29, i64 0
  br label %cond.end

cond.end:                                         ; preds = %cond.false32, %cond.true29
  %cond = phi i8* [ %add.ptr31, %cond.true29 ], [ %add.ptr35, %cond.false32 ]
  br label %cond.end37

cond.false36:                                     ; preds = %if.then18
  br label %cond.end37

cond.end37:                                       ; preds = %cond.false36, %cond.end
  %cond38 = phi i8* [ %cond, %cond.end ], [ null, %cond.false36 ]
  store i8* %cond38, i8** %proto, align 8
  %30 = load %struct.sv*, %struct.sv** %protosv.addr, align 8
  %sv_flags39 = getelementptr inbounds %struct.sv, %struct.sv* %30, i32 0, i32 2
  %31 = load i32, i32* %sv_flags39, align 4
  %and40 = and i32 %31, 1024
  %tobool41 = icmp ne i32 %and40, 0
  br i1 %tobool41, label %cond.true42, label %cond.false62

cond.true42:                                      ; preds = %cond.end37
  %32 = load %struct.sv*, %struct.sv** %protosv.addr, align 8
  %sv_flags43 = getelementptr inbounds %struct.sv, %struct.sv* %32, i32 0, i32 2
  %33 = load i32, i32* %sv_flags43, align 4
  %and44 = and i32 %33, 255
  %cmp45 = icmp eq i32 %and44, 13
  br i1 %cmp45, label %land.lhs.true47, label %cond.false57

land.lhs.true47:                                  ; preds = %cond.true42
  %34 = load %struct.sv*, %struct.sv** %protosv.addr, align 8
  %sv_any48 = getelementptr inbounds %struct.sv, %struct.sv* %34, i32 0, i32 0
  %35 = load i8*, i8** %sv_any48, align 8
  %36 = bitcast i8* %35 to %struct.xpvcv*
  %xcv_flags49 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %36, i32 0, i32 12
  %37 = load i32, i32* %xcv_flags49, align 4
  %and50 = and i32 %37, 8192
  %tobool51 = icmp ne i32 %and50, 0
  br i1 %tobool51, label %cond.true52, label %cond.false57

cond.true52:                                      ; preds = %land.lhs.true47
  %38 = load %struct.sv*, %struct.sv** %protosv.addr, align 8
  %sv_any53 = getelementptr inbounds %struct.sv, %struct.sv* %38, i32 0, i32 0
  %39 = load i8*, i8** %sv_any53, align 8
  %40 = bitcast i8* %39 to %struct.xpv*
  %xpv_len_u = getelementptr inbounds %struct.xpv, %struct.xpv* %40, i32 0, i32 3
  %xpvlenu_len = bitcast %union.anon.21* %xpv_len_u to i64*
  %41 = load i64, i64* %xpvlenu_len, align 8
  %42 = load %struct.sv*, %struct.sv** %protosv.addr, align 8
  %sv_any54 = getelementptr inbounds %struct.sv, %struct.sv* %42, i32 0, i32 0
  %43 = load i8*, i8** %sv_any54, align 8
  %44 = bitcast i8* %43 to %struct.xpv*
  %xpv_cur55 = getelementptr inbounds %struct.xpv, %struct.xpv* %44, i32 0, i32 2
  %45 = load i64, i64* %xpv_cur55, align 8
  %sub = sub i64 %41, %45
  %sub56 = sub i64 %sub, 2
  br label %cond.end60

cond.false57:                                     ; preds = %land.lhs.true47, %cond.true42
  %46 = load %struct.sv*, %struct.sv** %protosv.addr, align 8
  %sv_any58 = getelementptr inbounds %struct.sv, %struct.sv* %46, i32 0, i32 0
  %47 = load i8*, i8** %sv_any58, align 8
  %48 = bitcast i8* %47 to %struct.xpv*
  %xpv_cur59 = getelementptr inbounds %struct.xpv, %struct.xpv* %48, i32 0, i32 2
  %49 = load i64, i64* %xpv_cur59, align 8
  br label %cond.end60

cond.end60:                                       ; preds = %cond.false57, %cond.true52
  %cond61 = phi i64 [ %sub56, %cond.true52 ], [ %49, %cond.false57 ]
  br label %cond.end63

cond.false62:                                     ; preds = %cond.end37
  br label %cond.end63

cond.end63:                                       ; preds = %cond.false62, %cond.end60
  %cond64 = phi i64 [ %cond61, %cond.end60 ], [ 0, %cond.false62 ]
  store i64 %cond64, i64* %proto_len, align 8
  br label %if.end77

if.else:                                          ; preds = %if.end
  %50 = load %struct.sv*, %struct.sv** %protosv.addr, align 8
  %sv_flags65 = getelementptr inbounds %struct.sv, %struct.sv* %50, i32 0, i32 2
  %51 = load i32, i32* %sv_flags65, align 4
  %and66 = and i32 %51, 2098176
  %cmp67 = icmp eq i32 %and66, 1024
  br i1 %cmp67, label %cond.true69, label %cond.false74

cond.true69:                                      ; preds = %if.else
  %52 = load %struct.sv*, %struct.sv** %protosv.addr, align 8
  %sv_any70 = getelementptr inbounds %struct.sv, %struct.sv* %52, i32 0, i32 0
  %53 = load i8*, i8** %sv_any70, align 8
  %54 = bitcast i8* %53 to %struct.xpv*
  %xpv_cur71 = getelementptr inbounds %struct.xpv, %struct.xpv* %54, i32 0, i32 2
  %55 = load i64, i64* %xpv_cur71, align 8
  store i64 %55, i64* %proto_len, align 8
  %56 = load %struct.sv*, %struct.sv** %protosv.addr, align 8
  %sv_u72 = getelementptr inbounds %struct.sv, %struct.sv* %56, i32 0, i32 3
  %svu_pv73 = bitcast %union.anon* %sv_u72 to i8**
  %57 = load i8*, i8** %svu_pv73, align 8
  br label %cond.end75

cond.false74:                                     ; preds = %if.else
  %58 = load %struct.sv*, %struct.sv** %protosv.addr, align 8
  %call = call i8* @Perl_sv_2pv_flags(%struct.sv* %58, i64* %proto_len, i32 2)
  br label %cond.end75

cond.end75:                                       ; preds = %cond.false74, %cond.true69
  %cond76 = phi i8* [ %57, %cond.true69 ], [ %call, %cond.false74 ]
  store i8* %cond76, i8** %proto, align 8
  br label %if.end77

if.end77:                                         ; preds = %cond.end75, %cond.end63
  %59 = load i8*, i8** %proto, align 8
  %call78 = call i8* @S_strip_spaces(i8* %59, i64* %proto_len)
  store i8* %call78, i8** %proto, align 8
  %60 = load i8*, i8** %proto, align 8
  %61 = load i64, i64* %proto_len, align 8
  %add.ptr79 = getelementptr inbounds i8, i8* %60, i64 %61
  store i8* %add.ptr79, i8** %proto_end, align 8
  %62 = load %struct.op*, %struct.op** %entersubop.addr, align 8
  store %struct.op* %62, %struct.op** %parent, align 8
  %63 = load %struct.op*, %struct.op** %entersubop.addr, align 8
  %64 = bitcast %struct.op* %63 to %struct.unop*
  %op_first = getelementptr inbounds %struct.unop, %struct.unop* %64, i32 0, i32 7
  %65 = load %struct.op*, %struct.op** %op_first, align 8
  store %struct.op* %65, %struct.op** %aop, align 8
  %66 = load %struct.op*, %struct.op** %aop, align 8
  %op_sibling = getelementptr inbounds %struct.op, %struct.op* %66, i32 0, i32 1
  %67 = load %struct.op*, %struct.op** %op_sibling, align 8
  %tobool80 = icmp ne %struct.op* %67, null
  br i1 %tobool80, label %cond.true81, label %cond.false82

cond.true81:                                      ; preds = %if.end77
  br i1 true, label %if.end85, label %if.then83

cond.false82:                                     ; preds = %if.end77
  br i1 false, label %if.end85, label %if.then83

if.then83:                                        ; preds = %cond.false82, %cond.true81
  %68 = load %struct.op*, %struct.op** %aop, align 8
  store %struct.op* %68, %struct.op** %parent, align 8
  %69 = load %struct.op*, %struct.op** %aop, align 8
  %70 = bitcast %struct.op* %69 to %struct.unop*
  %op_first84 = getelementptr inbounds %struct.unop, %struct.unop* %70, i32 0, i32 7
  %71 = load %struct.op*, %struct.op** %op_first84, align 8
  store %struct.op* %71, %struct.op** %aop, align 8
  br label %if.end85

if.end85:                                         ; preds = %if.then83, %cond.false82, %cond.true81
  %72 = load %struct.op*, %struct.op** %aop, align 8
  store %struct.op* %72, %struct.op** %prev, align 8
  %73 = load %struct.op*, %struct.op** %aop, align 8
  %op_sibling86 = getelementptr inbounds %struct.op, %struct.op* %73, i32 0, i32 1
  %74 = load %struct.op*, %struct.op** %op_sibling86, align 8
  %add.ptr87 = getelementptr inbounds %struct.op, %struct.op* %74, i64 0
  store %struct.op* %add.ptr87, %struct.op** %aop, align 8
  %75 = load %struct.op*, %struct.op** %aop, align 8
  store %struct.op* %75, %struct.op** %cvop, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end85
  %76 = load %struct.op*, %struct.op** %cvop, align 8
  %op_sibling88 = getelementptr inbounds %struct.op, %struct.op* %76, i32 0, i32 1
  %77 = load %struct.op*, %struct.op** %op_sibling88, align 8
  %tobool89 = icmp ne %struct.op* %77, null
  %78 = zext i1 %tobool89 to i64
  %cond90 = select i1 %tobool89, i32 1, i32 0
  %tobool91 = icmp ne i32 %cond90, 0
  br i1 %tobool91, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %79 = load %struct.op*, %struct.op** %cvop, align 8
  %op_sibling92 = getelementptr inbounds %struct.op, %struct.op* %79, i32 0, i32 1
  %80 = load %struct.op*, %struct.op** %op_sibling92, align 8
  %add.ptr93 = getelementptr inbounds %struct.op, %struct.op* %80, i64 0
  store %struct.op* %add.ptr93, %struct.op** %cvop, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %while.cond

while.cond:                                       ; preds = %sw.epilog382, %sw.bb378, %sw.bb, %for.end
  %81 = load %struct.op*, %struct.op** %aop, align 8
  %82 = load %struct.op*, %struct.op** %cvop, align 8
  %cmp94 = icmp ne %struct.op* %81, %82
  br i1 %cmp94, label %while.body, label %while.end386

while.body:                                       ; preds = %while.cond
  %83 = load %struct.op*, %struct.op** %aop, align 8
  store %struct.op* %83, %struct.op** %o3, align 8
  %84 = load i8*, i8** %proto, align 8
  %85 = load i8*, i8** %proto_end, align 8
  %cmp96 = icmp uge i8* %84, %85
  br i1 %cmp96, label %if.then98, label %if.end104

if.then98:                                        ; preds = %while.body
  %86 = load %struct.gv*, %struct.gv** %namegv.addr, align 8
  %87 = bitcast %struct.gv* %86 to %struct.cv*
  %call99 = call %struct.sv* @Perl_cv_name(%struct.cv* %87, %struct.sv* null, i32 0)
  store %struct.sv* %call99, %struct.sv** %namesv, align 8
  %88 = load %struct.sv*, %struct.sv** %namesv, align 8
  %89 = bitcast %struct.sv* %88 to i8*
  %call100 = call i8* (i8*, ...) @Perl_form(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.133, i64 0, i64 0), i8* %89)
  %90 = load %struct.sv*, %struct.sv** %namesv, align 8
  %sv_flags101 = getelementptr inbounds %struct.sv, %struct.sv* %90, i32 0, i32 2
  %91 = load i32, i32* %sv_flags101, align 4
  %and102 = and i32 %91, 536870912
  %call103 = call i32 @Perl_yyerror_pv(i8* %call100, i32 %and102)
  %92 = load %struct.op*, %struct.op** %entersubop.addr, align 8
  store %struct.op* %92, %struct.op** %retval, align 8
  br label %return

if.end104:                                        ; preds = %while.body
  %93 = load i8*, i8** %proto, align 8
  %94 = load i8, i8* %93, align 1
  %conv105 = sext i8 %94 to i32
  switch i32 %conv105, label %sw.default380 [
    i32 59, label %sw.bb
    i32 95, label %sw.bb106
    i32 36, label %sw.bb116
    i32 37, label %sw.bb119
    i32 64, label %sw.bb119
    i32 38, label %sw.bb122
    i32 42, label %sw.bb157
    i32 43, label %sw.bb181
    i32 91, label %sw.bb214
    i32 93, label %sw.bb214
    i32 92, label %sw.bb215
    i32 32, label %sw.bb378
  ]

sw.bb:                                            ; preds = %if.end104
  store i32 1, i32* %optional, align 4
  %95 = load i8*, i8** %proto, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %95, i32 1
  store i8* %incdec.ptr, i8** %proto, align 8
  br label %while.cond

sw.bb106:                                         ; preds = %if.end104
  %96 = load i8*, i8** %proto, align 8
  %arrayidx = getelementptr inbounds i8, i8* %96, i64 1
  %97 = load i8, i8* %arrayidx, align 1
  %conv107 = sext i8 %97 to i32
  %tobool108 = icmp ne i32 %conv107, 0
  br i1 %tobool108, label %land.lhs.true109, label %if.end115

land.lhs.true109:                                 ; preds = %sw.bb106
  %98 = load i8*, i8** %proto, align 8
  %arrayidx110 = getelementptr inbounds i8, i8* %98, i64 1
  %99 = load i8, i8* %arrayidx110, align 1
  %conv111 = sext i8 %99 to i32
  %call112 = call i8* @strchr(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.134, i64 0, i64 0), i32 %conv111) #7
  %tobool113 = icmp ne i8* %call112, null
  br i1 %tobool113, label %if.end115, label %if.then114

if.then114:                                       ; preds = %land.lhs.true109
  br label %oops

if.end115:                                        ; preds = %land.lhs.true109, %sw.bb106
  br label %sw.bb116

sw.bb116:                                         ; preds = %if.end104, %if.end115
  %100 = load i8*, i8** %proto, align 8
  %incdec.ptr117 = getelementptr inbounds i8, i8* %100, i32 1
  store i8* %incdec.ptr117, i8** %proto, align 8
  %101 = load i32, i32* %arg, align 4
  %inc = add nsw i32 %101, 1
  store i32 %inc, i32* %arg, align 4
  %102 = load %struct.op*, %struct.op** %aop, align 8
  %call118 = call %struct.op* @Perl_scalar(%struct.op* %102)
  br label %sw.epilog382

sw.bb119:                                         ; preds = %if.end104, %if.end104
  %103 = load %struct.op*, %struct.op** %aop, align 8
  %call120 = call %struct.op* @Perl_list(%struct.op* %103)
  %104 = load i32, i32* %arg, align 4
  %inc121 = add nsw i32 %104, 1
  store i32 %inc121, i32* %arg, align 4
  br label %sw.epilog382

sw.bb122:                                         ; preds = %if.end104
  %105 = load i8*, i8** %proto, align 8
  %incdec.ptr123 = getelementptr inbounds i8, i8* %105, i32 1
  store i8* %incdec.ptr123, i8** %proto, align 8
  %106 = load i32, i32* %arg, align 4
  %inc124 = add nsw i32 %106, 1
  store i32 %inc124, i32* %arg, align 4
  %107 = load %struct.op*, %struct.op** %o3, align 8
  %op_type = getelementptr inbounds %struct.op, %struct.op* %107, i32 0, i32 4
  %bf.load = load i16, i16* %op_type, align 8
  %bf.clear = and i16 %bf.load, 511
  %bf.cast = zext i16 %bf.clear to i32
  %cmp125 = icmp ne i32 %bf.cast, 44
  br i1 %cmp125, label %land.lhs.true127, label %if.end156

land.lhs.true127:                                 ; preds = %sw.bb122
  %108 = load %struct.op*, %struct.op** %o3, align 8
  %op_type128 = getelementptr inbounds %struct.op, %struct.op* %108, i32 0, i32 4
  %bf.load129 = load i16, i16* %op_type128, align 8
  %bf.clear130 = and i16 %bf.load129, 511
  %bf.cast131 = zext i16 %bf.clear130 to i32
  %cmp132 = icmp ne i32 %bf.cast131, 21
  br i1 %cmp132, label %if.then152, label %lor.lhs.false134

lor.lhs.false134:                                 ; preds = %land.lhs.true127
  %109 = load %struct.op*, %struct.op** %o3, align 8
  %110 = bitcast %struct.op* %109 to %struct.unop*
  %op_first135 = getelementptr inbounds %struct.unop, %struct.unop* %110, i32 0, i32 7
  %111 = load %struct.op*, %struct.op** %op_first135, align 8
  %112 = bitcast %struct.op* %111 to %struct.unop*
  %op_first136 = getelementptr inbounds %struct.unop, %struct.unop* %112, i32 0, i32 7
  %113 = load %struct.op*, %struct.op** %op_first136, align 8
  %op_type137 = getelementptr inbounds %struct.op, %struct.op* %113, i32 0, i32 4
  %bf.load138 = load i16, i16* %op_type137, align 8
  %bf.clear139 = and i16 %bf.load138, 511
  %bf.cast140 = zext i16 %bf.clear139 to i32
  %cmp141 = icmp ne i32 %bf.cast140, 18
  br i1 %cmp141, label %land.lhs.true143, label %if.end156

land.lhs.true143:                                 ; preds = %lor.lhs.false134
  %114 = load %struct.op*, %struct.op** %o3, align 8
  %115 = bitcast %struct.op* %114 to %struct.unop*
  %op_first144 = getelementptr inbounds %struct.unop, %struct.unop* %115, i32 0, i32 7
  %116 = load %struct.op*, %struct.op** %op_first144, align 8
  %117 = bitcast %struct.op* %116 to %struct.unop*
  %op_first145 = getelementptr inbounds %struct.unop, %struct.unop* %117, i32 0, i32 7
  %118 = load %struct.op*, %struct.op** %op_first145, align 8
  %op_type146 = getelementptr inbounds %struct.op, %struct.op* %118, i32 0, i32 4
  %bf.load147 = load i16, i16* %op_type146, align 8
  %bf.clear148 = and i16 %bf.load147, 511
  %bf.cast149 = zext i16 %bf.clear148 to i32
  %cmp150 = icmp ne i32 %bf.cast149, 17
  br i1 %cmp150, label %if.then152, label %if.end156

if.then152:                                       ; preds = %land.lhs.true143, %land.lhs.true127
  %119 = load i32, i32* %arg, align 4
  %120 = load %struct.gv*, %struct.gv** %namegv.addr, align 8
  %121 = load %struct.op*, %struct.op** %o3, align 8
  %122 = load i32, i32* %arg, align 4
  %cmp153 = icmp eq i32 %122, 1
  %123 = zext i1 %cmp153 to i64
  %cond155 = select i1 %cmp153, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.135, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.136, i64 0, i64 0)
  call void @S_bad_type_gv(i32 %119, %struct.gv* %120, %struct.op* %121, i8* %cond155)
  br label %if.end156

if.end156:                                        ; preds = %if.then152, %land.lhs.true143, %lor.lhs.false134, %sw.bb122
  br label %sw.epilog382

sw.bb157:                                         ; preds = %if.end104
  %124 = load i8*, i8** %proto, align 8
  %incdec.ptr158 = getelementptr inbounds i8, i8* %124, i32 1
  store i8* %incdec.ptr158, i8** %proto, align 8
  %125 = load i32, i32* %arg, align 4
  %inc159 = add nsw i32 %125, 1
  store i32 %inc159, i32* %arg, align 4
  %126 = load %struct.op*, %struct.op** %o3, align 8
  %op_type160 = getelementptr inbounds %struct.op, %struct.op* %126, i32 0, i32 4
  %bf.load161 = load i16, i16* %op_type160, align 8
  %bf.clear162 = and i16 %bf.load161, 511
  %bf.cast163 = zext i16 %bf.clear162 to i32
  %cmp164 = icmp eq i32 %bf.cast163, 14
  br i1 %cmp164, label %if.then166, label %if.else167

if.then166:                                       ; preds = %sw.bb157
  br label %wrapref

if.else167:                                       ; preds = %sw.bb157
  %127 = load %struct.op*, %struct.op** %o3, align 8
  %op_type168 = getelementptr inbounds %struct.op, %struct.op* %127, i32 0, i32 4
  %bf.load169 = load i16, i16* %op_type168, align 8
  %bf.clear170 = and i16 %bf.load169, 511
  %bf.cast171 = zext i16 %bf.clear170 to i32
  %cmp172 = icmp eq i32 %bf.cast171, 5
  br i1 %cmp172, label %if.then174, label %if.end178

if.then174:                                       ; preds = %if.else167
  %128 = load %struct.op*, %struct.op** %o3, align 8
  %op_private = getelementptr inbounds %struct.op, %struct.op* %128, i32 0, i32 6
  %129 = load i8, i8* %op_private, align 1
  %conv175 = zext i8 %129 to i32
  %and176 = and i32 %conv175, -9
  %conv177 = trunc i32 %and176 to i8
  store i8 %conv177, i8* %op_private, align 1
  br label %if.end178

if.end178:                                        ; preds = %if.then174, %if.else167
  br label %if.end179

if.end179:                                        ; preds = %if.end178
  %130 = load %struct.op*, %struct.op** %aop, align 8
  %call180 = call %struct.op* @Perl_scalar(%struct.op* %130)
  br label %sw.epilog382

sw.bb181:                                         ; preds = %if.end104
  %131 = load i8*, i8** %proto, align 8
  %incdec.ptr182 = getelementptr inbounds i8, i8* %131, i32 1
  store i8* %incdec.ptr182, i8** %proto, align 8
  %132 = load i32, i32* %arg, align 4
  %inc183 = add nsw i32 %132, 1
  store i32 %inc183, i32* %arg, align 4
  %133 = load %struct.op*, %struct.op** %o3, align 8
  %op_type184 = getelementptr inbounds %struct.op, %struct.op* %133, i32 0, i32 4
  %bf.load185 = load i16, i16* %op_type184, align 8
  %bf.clear186 = and i16 %bf.load185, 511
  %bf.cast187 = zext i16 %bf.clear186 to i32
  %cmp188 = icmp eq i32 %bf.cast187, 135
  br i1 %cmp188, label %if.then211, label %lor.lhs.false190

lor.lhs.false190:                                 ; preds = %sw.bb181
  %134 = load %struct.op*, %struct.op** %o3, align 8
  %op_type191 = getelementptr inbounds %struct.op, %struct.op* %134, i32 0, i32 4
  %bf.load192 = load i16, i16* %op_type191, align 8
  %bf.clear193 = and i16 %bf.load192, 511
  %bf.cast194 = zext i16 %bf.clear193 to i32
  %cmp195 = icmp eq i32 %bf.cast194, 10
  br i1 %cmp195, label %if.then211, label %lor.lhs.false197

lor.lhs.false197:                                 ; preds = %lor.lhs.false190
  %135 = load %struct.op*, %struct.op** %o3, align 8
  %op_type198 = getelementptr inbounds %struct.op, %struct.op* %135, i32 0, i32 4
  %bf.load199 = load i16, i16* %op_type198, align 8
  %bf.clear200 = and i16 %bf.load199, 511
  %bf.cast201 = zext i16 %bf.clear200 to i32
  %cmp202 = icmp eq i32 %bf.cast201, 149
  br i1 %cmp202, label %if.then211, label %lor.lhs.false204

lor.lhs.false204:                                 ; preds = %lor.lhs.false197
  %136 = load %struct.op*, %struct.op** %o3, align 8
  %op_type205 = getelementptr inbounds %struct.op, %struct.op* %136, i32 0, i32 4
  %bf.load206 = load i16, i16* %op_type205, align 8
  %bf.clear207 = and i16 %bf.load206, 511
  %bf.cast208 = zext i16 %bf.clear207 to i32
  %cmp209 = icmp eq i32 %bf.cast208, 11
  br i1 %cmp209, label %if.then211, label %if.end212

if.then211:                                       ; preds = %lor.lhs.false204, %lor.lhs.false197, %lor.lhs.false190, %sw.bb181
  br label %wrapref

if.end212:                                        ; preds = %lor.lhs.false204
  %137 = load %struct.op*, %struct.op** %aop, align 8
  %call213 = call %struct.op* @Perl_scalar(%struct.op* %137)
  br label %sw.epilog382

sw.bb214:                                         ; preds = %if.end104, %if.end104
  br label %oops

sw.bb215:                                         ; preds = %if.end104
  %138 = load i8*, i8** %proto, align 8
  %incdec.ptr216 = getelementptr inbounds i8, i8* %138, i32 1
  store i8* %incdec.ptr216, i8** %proto, align 8
  %139 = load i32, i32* %arg, align 4
  %inc217 = add nsw i32 %139, 1
  store i32 %inc217, i32* %arg, align 4
  br label %again

again:                                            ; preds = %if.then376, %if.end233, %sw.bb215
  %140 = load i8*, i8** %proto, align 8
  %incdec.ptr218 = getelementptr inbounds i8, i8* %140, i32 1
  store i8* %incdec.ptr218, i8** %proto, align 8
  %141 = load i8, i8* %140, align 1
  %conv219 = sext i8 %141 to i32
  switch i32 %conv219, label %sw.default [
    i32 91, label %sw.bb220
    i32 93, label %sw.bb234
    i32 42, label %sw.bb256
    i32 38, label %sw.bb268
    i32 36, label %sw.bb284
    i32 64, label %sw.bb322
    i32 37, label %sw.bb345
  ]

sw.bb220:                                         ; preds = %again
  %142 = load i32, i32* %contextclass, align 4
  %inc221 = add nsw i32 %142, 1
  store i32 %inc221, i32* %contextclass, align 4
  %cmp222 = icmp eq i32 %142, 0
  br i1 %cmp222, label %if.then224, label %if.else232

if.then224:                                       ; preds = %sw.bb220
  %143 = load i8*, i8** %proto, align 8
  %call225 = call i8* @strchr(i8* %143, i32 93) #7
  store i8* %call225, i8** %e, align 8
  %144 = load i8*, i8** %e, align 8
  %tobool226 = icmp ne i8* %144, null
  br i1 %tobool226, label %lor.lhs.false227, label %if.then230

lor.lhs.false227:                                 ; preds = %if.then224
  %145 = load i8*, i8** %e, align 8
  %146 = load i8*, i8** %proto, align 8
  %cmp228 = icmp eq i8* %145, %146
  br i1 %cmp228, label %if.then230, label %if.end231

if.then230:                                       ; preds = %lor.lhs.false227, %if.then224
  br label %oops

if.end231:                                        ; preds = %lor.lhs.false227
  br label %if.end233

if.else232:                                       ; preds = %sw.bb220
  br label %oops

if.end233:                                        ; preds = %if.end231
  br label %again

sw.bb234:                                         ; preds = %again
  %147 = load i32, i32* %contextclass, align 4
  %tobool235 = icmp ne i32 %147, 0
  br i1 %tobool235, label %if.then236, label %if.else254

if.then236:                                       ; preds = %sw.bb234
  %148 = load i8*, i8** %proto, align 8
  store i8* %148, i8** %p, align 8
  %149 = load i8*, i8** %proto, align 8
  store i8* %149, i8** %end, align 8
  store i32 0, i32* %contextclass, align 4
  br label %while.cond237

while.cond237:                                    ; preds = %if.end251, %if.then236
  %150 = load i8*, i8** %p, align 8
  %incdec.ptr238 = getelementptr inbounds i8, i8* %150, i32 -1
  store i8* %incdec.ptr238, i8** %p, align 8
  %151 = load i8, i8* %incdec.ptr238, align 1
  %conv239 = sext i8 %151 to i32
  %cmp240 = icmp ne i32 %conv239, 91
  br i1 %cmp240, label %while.body242, label %while.end

while.body242:                                    ; preds = %while.cond237
  %152 = load i8*, i8** %p, align 8
  %153 = load i8, i8* %152, align 1
  %conv243 = sext i8 %153 to i32
  %cmp244 = icmp eq i32 %conv243, 36
  br i1 %cmp244, label %land.lhs.true246, label %if.end251

land.lhs.true246:                                 ; preds = %while.body242
  %154 = load %struct.op*, %struct.op** %o3, align 8
  %call247 = call %struct.op* @Perl_scalar(%struct.op* %154)
  %call248 = call %struct.op* @Perl_op_lvalue_flags(%struct.op* %call247, i32 234, i32 1)
  %tobool249 = icmp ne %struct.op* %call248, null
  br i1 %tobool249, label %if.then250, label %if.end251

if.then250:                                       ; preds = %land.lhs.true246
  br label %wrapref

if.end251:                                        ; preds = %land.lhs.true246, %while.body242
  br label %while.cond237

while.end:                                        ; preds = %while.cond237
  %155 = load i32, i32* %arg, align 4
  %156 = load %struct.gv*, %struct.gv** %namegv.addr, align 8
  %157 = load %struct.op*, %struct.op** %o3, align 8
  %158 = load i8*, i8** %end, align 8
  %159 = load i8*, i8** %p, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %158 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %159 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %conv252 = trunc i64 %sub.ptr.sub to i32
  %160 = load i8*, i8** %p, align 8
  %call253 = call i8* (i8*, ...) @Perl_form(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.137, i64 0, i64 0), i32 %conv252, i8* %160)
  call void @S_bad_type_gv(i32 %155, %struct.gv* %156, %struct.op* %157, i8* %call253)
  br label %if.end255

if.else254:                                       ; preds = %sw.bb234
  br label %oops

if.end255:                                        ; preds = %while.end
  br label %sw.epilog

sw.bb256:                                         ; preds = %again
  %161 = load %struct.op*, %struct.op** %o3, align 8
  %op_type257 = getelementptr inbounds %struct.op, %struct.op* %161, i32 0, i32 4
  %bf.load258 = load i16, i16* %op_type257, align 8
  %bf.clear259 = and i16 %bf.load258, 511
  %bf.cast260 = zext i16 %bf.clear259 to i32
  %cmp261 = icmp eq i32 %bf.cast260, 14
  br i1 %cmp261, label %if.then263, label %if.end264

if.then263:                                       ; preds = %sw.bb256
  br label %wrapref

if.end264:                                        ; preds = %sw.bb256
  %162 = load i32, i32* %contextclass, align 4
  %tobool265 = icmp ne i32 %162, 0
  br i1 %tobool265, label %if.end267, label %if.then266

if.then266:                                       ; preds = %if.end264
  %163 = load i32, i32* %arg, align 4
  %164 = load %struct.gv*, %struct.gv** %namegv.addr, align 8
  %165 = load %struct.op*, %struct.op** %o3, align 8
  call void @S_bad_type_gv(i32 %163, %struct.gv* %164, %struct.op* %165, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.138, i64 0, i64 0))
  br label %if.end267

if.end267:                                        ; preds = %if.then266, %if.end264
  br label %sw.epilog

sw.bb268:                                         ; preds = %again
  %166 = load %struct.op*, %struct.op** %o3, align 8
  %op_type269 = getelementptr inbounds %struct.op, %struct.op* %166, i32 0, i32 4
  %bf.load270 = load i16, i16* %op_type269, align 8
  %bf.clear271 = and i16 %bf.load270, 511
  %bf.cast272 = zext i16 %bf.clear271 to i32
  %cmp273 = icmp eq i32 %bf.cast272, 185
  br i1 %cmp273, label %land.lhs.true275, label %if.end280

land.lhs.true275:                                 ; preds = %sw.bb268
  %167 = load %struct.op*, %struct.op** %o3, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %167, i32 0, i32 5
  %168 = load i8, i8* %op_flags, align 2
  %conv276 = zext i8 %168 to i32
  %and277 = and i32 %conv276, 64
  %tobool278 = icmp ne i32 %and277, 0
  br i1 %tobool278, label %if.end280, label %if.then279

if.then279:                                       ; preds = %land.lhs.true275
  br label %wrapref

if.end280:                                        ; preds = %land.lhs.true275, %sw.bb268
  %169 = load i32, i32* %contextclass, align 4
  %tobool281 = icmp ne i32 %169, 0
  br i1 %tobool281, label %if.end283, label %if.then282

if.then282:                                       ; preds = %if.end280
  %170 = load i32, i32* %arg, align 4
  %171 = load %struct.gv*, %struct.gv** %namegv.addr, align 8
  %172 = load %struct.op*, %struct.op** %o3, align 8
  call void @S_bad_type_gv(i32 %170, %struct.gv* %171, %struct.op* %172, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.139, i64 0, i64 0))
  br label %if.end283

if.end283:                                        ; preds = %if.then282, %if.end280
  br label %sw.epilog

sw.bb284:                                         ; preds = %again
  %173 = load %struct.op*, %struct.op** %o3, align 8
  %op_type285 = getelementptr inbounds %struct.op, %struct.op* %173, i32 0, i32 4
  %bf.load286 = load i16, i16* %op_type285, align 8
  %bf.clear287 = and i16 %bf.load286, 511
  %bf.cast288 = zext i16 %bf.clear287 to i32
  %cmp289 = icmp eq i32 %bf.cast288, 15
  br i1 %cmp289, label %if.then312, label %lor.lhs.false291

lor.lhs.false291:                                 ; preds = %sw.bb284
  %174 = load %struct.op*, %struct.op** %o3, align 8
  %op_type292 = getelementptr inbounds %struct.op, %struct.op* %174, i32 0, i32 4
  %bf.load293 = load i16, i16* %op_type292, align 8
  %bf.clear294 = and i16 %bf.load293, 511
  %bf.cast295 = zext i16 %bf.clear294 to i32
  %cmp296 = icmp eq i32 %bf.cast295, 9
  br i1 %cmp296, label %if.then312, label %lor.lhs.false298

lor.lhs.false298:                                 ; preds = %lor.lhs.false291
  %175 = load %struct.op*, %struct.op** %o3, align 8
  %op_type299 = getelementptr inbounds %struct.op, %struct.op* %175, i32 0, i32 4
  %bf.load300 = load i16, i16* %op_type299, align 8
  %bf.clear301 = and i16 %bf.load300, 511
  %bf.cast302 = zext i16 %bf.clear301 to i32
  %cmp303 = icmp eq i32 %bf.cast302, 150
  br i1 %cmp303, label %if.then312, label %lor.lhs.false305

lor.lhs.false305:                                 ; preds = %lor.lhs.false298
  %176 = load %struct.op*, %struct.op** %o3, align 8
  %op_type306 = getelementptr inbounds %struct.op, %struct.op* %176, i32 0, i32 4
  %bf.load307 = load i16, i16* %op_type306, align 8
  %bf.clear308 = and i16 %bf.load307, 511
  %bf.cast309 = zext i16 %bf.clear308 to i32
  %cmp310 = icmp eq i32 %bf.cast309, 138
  br i1 %cmp310, label %if.then312, label %if.end313

if.then312:                                       ; preds = %lor.lhs.false305, %lor.lhs.false298, %lor.lhs.false291, %sw.bb284
  br label %wrapref

if.end313:                                        ; preds = %lor.lhs.false305
  %177 = load i32, i32* %contextclass, align 4
  %tobool314 = icmp ne i32 %177, 0
  br i1 %tobool314, label %if.end321, label %if.then315

if.then315:                                       ; preds = %if.end313
  %178 = load %struct.op*, %struct.op** %o3, align 8
  %call316 = call %struct.op* @Perl_scalar(%struct.op* %178)
  %call317 = call %struct.op* @Perl_op_lvalue_flags(%struct.op* %call316, i32 234, i32 1)
  %tobool318 = icmp ne %struct.op* %call317, null
  br i1 %tobool318, label %if.then319, label %if.end320

if.then319:                                       ; preds = %if.then315
  br label %wrapref

if.end320:                                        ; preds = %if.then315
  %179 = load i32, i32* %arg, align 4
  %180 = load %struct.gv*, %struct.gv** %namegv.addr, align 8
  %181 = load %struct.op*, %struct.op** %o3, align 8
  call void @S_bad_type_gv(i32 %179, %struct.gv* %180, %struct.op* %181, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.140, i64 0, i64 0))
  br label %if.end321

if.end321:                                        ; preds = %if.end320, %if.end313
  br label %sw.epilog

sw.bb322:                                         ; preds = %again
  %182 = load %struct.op*, %struct.op** %o3, align 8
  %op_type323 = getelementptr inbounds %struct.op, %struct.op* %182, i32 0, i32 4
  %bf.load324 = load i16, i16* %op_type323, align 8
  %bf.clear325 = and i16 %bf.load324, 511
  %bf.cast326 = zext i16 %bf.clear325 to i32
  %cmp327 = icmp eq i32 %bf.cast326, 135
  br i1 %cmp327, label %if.then336, label %lor.lhs.false329

lor.lhs.false329:                                 ; preds = %sw.bb322
  %183 = load %struct.op*, %struct.op** %o3, align 8
  %op_type330 = getelementptr inbounds %struct.op, %struct.op* %183, i32 0, i32 4
  %bf.load331 = load i16, i16* %op_type330, align 8
  %bf.clear332 = and i16 %bf.load331, 511
  %bf.cast333 = zext i16 %bf.clear332 to i32
  %cmp334 = icmp eq i32 %bf.cast333, 10
  br i1 %cmp334, label %if.then336, label %if.end341

if.then336:                                       ; preds = %lor.lhs.false329, %sw.bb322
  %184 = load %struct.op*, %struct.op** %o3, align 8
  %op_flags337 = getelementptr inbounds %struct.op, %struct.op* %184, i32 0, i32 5
  %185 = load i8, i8* %op_flags337, align 2
  %conv338 = zext i8 %185 to i32
  %and339 = and i32 %conv338, -9
  %conv340 = trunc i32 %and339 to i8
  store i8 %conv340, i8* %op_flags337, align 2
  br label %wrapref

if.end341:                                        ; preds = %lor.lhs.false329
  %186 = load i32, i32* %contextclass, align 4
  %tobool342 = icmp ne i32 %186, 0
  br i1 %tobool342, label %if.end344, label %if.then343

if.then343:                                       ; preds = %if.end341
  %187 = load i32, i32* %arg, align 4
  %188 = load %struct.gv*, %struct.gv** %namegv.addr, align 8
  %189 = load %struct.op*, %struct.op** %o3, align 8
  call void @S_bad_type_gv(i32 %187, %struct.gv* %188, %struct.op* %189, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.106, i64 0, i64 0))
  br label %if.end344

if.end344:                                        ; preds = %if.then343, %if.end341
  br label %sw.epilog

sw.bb345:                                         ; preds = %again
  %190 = load %struct.op*, %struct.op** %o3, align 8
  %op_type346 = getelementptr inbounds %struct.op, %struct.op* %190, i32 0, i32 4
  %bf.load347 = load i16, i16* %op_type346, align 8
  %bf.clear348 = and i16 %bf.load347, 511
  %bf.cast349 = zext i16 %bf.clear348 to i32
  %cmp350 = icmp eq i32 %bf.cast349, 149
  br i1 %cmp350, label %if.then359, label %lor.lhs.false352

lor.lhs.false352:                                 ; preds = %sw.bb345
  %191 = load %struct.op*, %struct.op** %o3, align 8
  %op_type353 = getelementptr inbounds %struct.op, %struct.op* %191, i32 0, i32 4
  %bf.load354 = load i16, i16* %op_type353, align 8
  %bf.clear355 = and i16 %bf.load354, 511
  %bf.cast356 = zext i16 %bf.clear355 to i32
  %cmp357 = icmp eq i32 %bf.cast356, 11
  br i1 %cmp357, label %if.then359, label %if.end364

if.then359:                                       ; preds = %lor.lhs.false352, %sw.bb345
  %192 = load %struct.op*, %struct.op** %o3, align 8
  %op_flags360 = getelementptr inbounds %struct.op, %struct.op* %192, i32 0, i32 5
  %193 = load i8, i8* %op_flags360, align 2
  %conv361 = zext i8 %193 to i32
  %and362 = and i32 %conv361, -9
  %conv363 = trunc i32 %and362 to i8
  store i8 %conv363, i8* %op_flags360, align 2
  br label %wrapref

if.end364:                                        ; preds = %lor.lhs.false352
  %194 = load i32, i32* %contextclass, align 4
  %tobool365 = icmp ne i32 %194, 0
  br i1 %tobool365, label %if.end367, label %if.then366

if.then366:                                       ; preds = %if.end364
  %195 = load i32, i32* %arg, align 4
  %196 = load %struct.gv*, %struct.gv** %namegv.addr, align 8
  %197 = load %struct.op*, %struct.op** %o3, align 8
  call void @S_bad_type_gv(i32 %195, %struct.gv* %196, %struct.op* %197, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.108, i64 0, i64 0))
  br label %if.end367

if.end367:                                        ; preds = %if.then366, %if.end364
  br label %sw.epilog

wrapref:                                          ; preds = %if.then359, %if.then336, %if.then319, %if.then312, %if.then279, %if.then263, %if.then250, %if.then211, %if.then166
  %198 = load %struct.op*, %struct.op** %parent, align 8
  %199 = load %struct.op*, %struct.op** %prev, align 8
  %call368 = call %struct.op* @S_op_sibling_newUNOP(%struct.op* %198, %struct.op* %199, i32 20, i32 0)
  store %struct.op* %call368, %struct.op** %aop, align 8
  %200 = load i32, i32* %contextclass, align 4
  %tobool369 = icmp ne i32 %200, 0
  br i1 %tobool369, label %land.lhs.true370, label %if.end374

land.lhs.true370:                                 ; preds = %wrapref
  %201 = load i8*, i8** %e, align 8
  %tobool371 = icmp ne i8* %201, null
  br i1 %tobool371, label %if.then372, label %if.end374

if.then372:                                       ; preds = %land.lhs.true370
  %202 = load i8*, i8** %e, align 8
  %add.ptr373 = getelementptr inbounds i8, i8* %202, i64 1
  store i8* %add.ptr373, i8** %proto, align 8
  store i32 0, i32* %contextclass, align 4
  br label %if.end374

if.end374:                                        ; preds = %if.then372, %land.lhs.true370, %wrapref
  br label %sw.epilog

sw.default:                                       ; preds = %again
  br label %oops

sw.epilog:                                        ; preds = %if.end374, %if.end367, %if.end344, %if.end321, %if.end283, %if.end267, %if.end255
  %203 = load i32, i32* %contextclass, align 4
  %tobool375 = icmp ne i32 %203, 0
  br i1 %tobool375, label %if.then376, label %if.end377

if.then376:                                       ; preds = %sw.epilog
  br label %again

if.end377:                                        ; preds = %sw.epilog
  br label %sw.epilog382

sw.bb378:                                         ; preds = %if.end104
  %204 = load i8*, i8** %proto, align 8
  %incdec.ptr379 = getelementptr inbounds i8, i8* %204, i32 1
  store i8* %incdec.ptr379, i8** %proto, align 8
  br label %while.cond

sw.default380:                                    ; preds = %if.end104
  br label %oops

oops:                                             ; preds = %sw.default380, %sw.default, %if.else254, %if.else232, %if.then230, %sw.bb214, %if.then114
  %205 = load %struct.gv*, %struct.gv** %namegv.addr, align 8
  %206 = bitcast %struct.gv* %205 to %struct.cv*
  %call381 = call %struct.sv* @Perl_cv_name(%struct.cv* %206, %struct.sv* null, i32 0)
  %207 = bitcast %struct.sv* %call381 to i8*
  %208 = load %struct.sv*, %struct.sv** %protosv.addr, align 8
  %209 = bitcast %struct.sv* %208 to i8*
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.141, i64 0, i64 0), i8* %207, i8* %209)
  br label %sw.epilog382

sw.epilog382:                                     ; preds = %oops, %if.end377, %if.end212, %if.end179, %if.end156, %sw.bb119, %sw.bb116
  %210 = load %struct.op*, %struct.op** %aop, align 8
  %call383 = call %struct.op* @Perl_op_lvalue_flags(%struct.op* %210, i32 185, i32 0)
  %211 = load %struct.op*, %struct.op** %aop, align 8
  store %struct.op* %211, %struct.op** %prev, align 8
  %212 = load %struct.op*, %struct.op** %aop, align 8
  %op_sibling384 = getelementptr inbounds %struct.op, %struct.op* %212, i32 0, i32 1
  %213 = load %struct.op*, %struct.op** %op_sibling384, align 8
  %add.ptr385 = getelementptr inbounds %struct.op, %struct.op* %213, i64 0
  store %struct.op* %add.ptr385, %struct.op** %aop, align 8
  br label %while.cond

while.end386:                                     ; preds = %while.cond
  %214 = load %struct.op*, %struct.op** %aop, align 8
  %215 = load %struct.op*, %struct.op** %cvop, align 8
  %cmp387 = icmp eq %struct.op* %214, %215
  br i1 %cmp387, label %land.lhs.true389, label %if.end396

land.lhs.true389:                                 ; preds = %while.end386
  %216 = load i8*, i8** %proto, align 8
  %217 = load i8, i8* %216, align 1
  %conv390 = sext i8 %217 to i32
  %cmp391 = icmp eq i32 %conv390, 95
  br i1 %cmp391, label %if.then393, label %if.end396

if.then393:                                       ; preds = %land.lhs.true389
  %218 = load %struct.op*, %struct.op** %parent, align 8
  %219 = load %struct.op*, %struct.op** %prev, align 8
  %call394 = call %struct.op* @Perl_newDEFSVOP()
  %call395 = call %struct.op* @Perl_op_sibling_splice(%struct.op* %218, %struct.op* %219, i32 0, %struct.op* %call394)
  br label %if.end396

if.end396:                                        ; preds = %if.then393, %land.lhs.true389, %while.end386
  %220 = load i32, i32* %optional, align 4
  %tobool397 = icmp ne i32 %220, 0
  br i1 %tobool397, label %if.end424, label %land.lhs.true398

land.lhs.true398:                                 ; preds = %if.end396
  %221 = load i8*, i8** %proto_end, align 8
  %222 = load i8*, i8** %proto, align 8
  %cmp399 = icmp ugt i8* %221, %222
  br i1 %cmp399, label %land.lhs.true401, label %if.end424

land.lhs.true401:                                 ; preds = %land.lhs.true398
  %223 = load i8*, i8** %proto, align 8
  %224 = load i8, i8* %223, align 1
  %conv402 = sext i8 %224 to i32
  %cmp403 = icmp ne i32 %conv402, 64
  br i1 %cmp403, label %land.lhs.true405, label %if.end424

land.lhs.true405:                                 ; preds = %land.lhs.true401
  %225 = load i8*, i8** %proto, align 8
  %226 = load i8, i8* %225, align 1
  %conv406 = sext i8 %226 to i32
  %cmp407 = icmp ne i32 %conv406, 37
  br i1 %cmp407, label %land.lhs.true409, label %if.end424

land.lhs.true409:                                 ; preds = %land.lhs.true405
  %227 = load i8*, i8** %proto, align 8
  %228 = load i8, i8* %227, align 1
  %conv410 = sext i8 %228 to i32
  %cmp411 = icmp ne i32 %conv410, 59
  br i1 %cmp411, label %land.lhs.true413, label %if.end424

land.lhs.true413:                                 ; preds = %land.lhs.true409
  %229 = load i8*, i8** %proto, align 8
  %230 = load i8, i8* %229, align 1
  %conv414 = sext i8 %230 to i32
  %cmp415 = icmp ne i32 %conv414, 95
  br i1 %cmp415, label %if.then417, label %if.end424

if.then417:                                       ; preds = %land.lhs.true413
  %231 = load %struct.gv*, %struct.gv** %namegv.addr, align 8
  %232 = bitcast %struct.gv* %231 to %struct.cv*
  %call419 = call %struct.sv* @Perl_cv_name(%struct.cv* %232, %struct.sv* null, i32 0)
  store %struct.sv* %call419, %struct.sv** %namesv418, align 8
  %233 = load %struct.sv*, %struct.sv** %namesv418, align 8
  %234 = bitcast %struct.sv* %233 to i8*
  %call420 = call i8* (i8*, ...) @Perl_form(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.142, i64 0, i64 0), i8* %234)
  %235 = load %struct.sv*, %struct.sv** %namesv418, align 8
  %sv_flags421 = getelementptr inbounds %struct.sv, %struct.sv* %235, i32 0, i32 2
  %236 = load i32, i32* %sv_flags421, align 4
  %and422 = and i32 %236, 536870912
  %call423 = call i32 @Perl_yyerror_pv(i8* %call420, i32 %and422)
  br label %if.end424

if.end424:                                        ; preds = %if.then417, %land.lhs.true413, %land.lhs.true409, %land.lhs.true405, %land.lhs.true401, %land.lhs.true398, %if.end396
  %237 = load %struct.op*, %struct.op** %entersubop.addr, align 8
  store %struct.op* %237, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %if.end424, %if.then98
  %238 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %238
}

; Function Attrs: noinline nounwind uwtable
define internal void @S_bad_type_gv(i32 %n, %struct.gv* %gv, %struct.op* %kid, i8* %t) #0 {
entry:
  %n.addr = alloca i32, align 4
  %gv.addr = alloca %struct.gv*, align 8
  %kid.addr = alloca %struct.op*, align 8
  %t.addr = alloca i8*, align 8
  %namesv = alloca %struct.sv*, align 8
  %coerce = alloca %union.XOPRETANY, align 8
  store i32 %n, i32* %n.addr, align 4
  store %struct.gv* %gv, %struct.gv** %gv.addr, align 8
  store %struct.op* %kid, %struct.op** %kid.addr, align 8
  store i8* %t, i8** %t.addr, align 8
  %0 = load %struct.gv*, %struct.gv** %gv.addr, align 8
  %1 = bitcast %struct.gv* %0 to %struct.cv*
  %call = call %struct.sv* @Perl_cv_name(%struct.cv* %1, %struct.sv* null, i32 0)
  store %struct.sv* %call, %struct.sv** %namesv, align 8
  %2 = load i32, i32* %n.addr, align 4
  %3 = load %struct.sv*, %struct.sv** %namesv, align 8
  %4 = bitcast %struct.sv* %3 to i8*
  %5 = load i8*, i8** %t.addr, align 8
  %6 = load %struct.op*, %struct.op** %kid.addr, align 8
  %op_type = getelementptr inbounds %struct.op, %struct.op* %6, i32 0, i32 4
  %bf.load = load i16, i16* %op_type, align 8
  %bf.clear = and i16 %bf.load, 511
  %bf.cast = zext i16 %bf.clear to i32
  %cmp = icmp eq i32 %bf.cast, 380
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %7 = load %struct.op*, %struct.op** %kid.addr, align 8
  %call1 = call i8* @Perl_custom_op_get_field(%struct.op* %7, i32 2)
  %coerce.dive = getelementptr inbounds %union.XOPRETANY, %union.XOPRETANY* %coerce, i32 0, i32 0
  store i8* %call1, i8** %coerce.dive, align 8
  %xop_desc = bitcast %union.XOPRETANY* %coerce to i8**
  %8 = load i8*, i8** %xop_desc, align 8
  br label %cond.end

cond.false:                                       ; preds = %entry
  %9 = load %struct.op*, %struct.op** %kid.addr, align 8
  %op_type2 = getelementptr inbounds %struct.op, %struct.op* %9, i32 0, i32 4
  %bf.load3 = load i16, i16* %op_type2, align 8
  %bf.clear4 = and i16 %bf.load3, 511
  %bf.cast5 = zext i16 %bf.clear4 to i32
  %idxprom = zext i32 %bf.cast5 to i64
  %arrayidx = getelementptr inbounds [0 x i8*], [0 x i8*]* @PL_op_desc, i64 0, i64 %idxprom
  %10 = load i8*, i8** %arrayidx, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %8, %cond.true ], [ %10, %cond.false ]
  %call6 = call i8* (i8*, ...) @Perl_form(i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.210, i64 0, i64 0), i32 %2, i8* %4, i8* %5, i8* %cond)
  %11 = load %struct.sv*, %struct.sv** %namesv, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %11, i32 0, i32 2
  %12 = load i32, i32* %sv_flags, align 4
  %and = and i32 %12, 536870912
  %call7 = call i32 @Perl_yyerror_pv(i8* %call6, i32 %and)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_ck_entersub_args_proto_or_list(%struct.op* %entersubop, %struct.gv* %namegv, %struct.sv* %protosv) #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %entersubop.addr = alloca %struct.op*, align 8
  %namegv.addr = alloca %struct.gv*, align 8
  %protosv.addr = alloca %struct.sv*, align 8
  store %struct.op* %entersubop, %struct.op** %entersubop.addr, align 8
  store %struct.gv* %namegv, %struct.gv** %namegv.addr, align 8
  store %struct.sv* %protosv, %struct.sv** %protosv.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %protosv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %0, i32 0, i32 2
  %1 = load i32, i32* %sv_flags, align 4
  %and = and i32 %1, 255
  %cmp = icmp eq i32 %and, 13
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %2 = load %struct.sv*, %struct.sv** %protosv.addr, align 8
  %sv_flags1 = getelementptr inbounds %struct.sv, %struct.sv* %2, i32 0, i32 2
  %3 = load i32, i32* %sv_flags1, align 4
  %and2 = and i32 %3, 1024
  %tobool = icmp ne i32 %and2, 0
  br i1 %tobool, label %if.then, label %if.else

cond.false:                                       ; preds = %entry
  %4 = load %struct.sv*, %struct.sv** %protosv.addr, align 8
  %sv_flags3 = getelementptr inbounds %struct.sv, %struct.sv* %4, i32 0, i32 2
  %5 = load i32, i32* %sv_flags3, align 4
  %and4 = and i32 %5, 65280
  %tobool5 = icmp ne i32 %and4, 0
  br i1 %tobool5, label %lor.end13, label %lor.rhs

lor.rhs:                                          ; preds = %cond.false
  %6 = load %struct.sv*, %struct.sv** %protosv.addr, align 8
  %sv_flags6 = getelementptr inbounds %struct.sv, %struct.sv* %6, i32 0, i32 2
  %7 = load i32, i32* %sv_flags6, align 4
  %and7 = and i32 %7, 255
  %cmp8 = icmp eq i32 %and7, 8
  br i1 %cmp8, label %lor.end, label %lor.rhs9

lor.rhs9:                                         ; preds = %lor.rhs
  %8 = load %struct.sv*, %struct.sv** %protosv.addr, align 8
  %sv_flags10 = getelementptr inbounds %struct.sv, %struct.sv* %8, i32 0, i32 2
  %9 = load i32, i32* %sv_flags10, align 4
  %and11 = and i32 %9, 16826623
  %cmp12 = icmp eq i32 %and11, 16777226
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs9, %lor.rhs
  %10 = phi i1 [ true, %lor.rhs ], [ %cmp12, %lor.rhs9 ]
  br label %lor.end13

lor.end13:                                        ; preds = %lor.end, %cond.false
  %11 = phi i1 [ true, %cond.false ], [ %10, %lor.end ]
  br i1 %11, label %if.then, label %if.else

if.then:                                          ; preds = %lor.end13, %cond.true
  %12 = load %struct.op*, %struct.op** %entersubop.addr, align 8
  %13 = load %struct.gv*, %struct.gv** %namegv.addr, align 8
  %14 = load %struct.sv*, %struct.sv** %protosv.addr, align 8
  %call = call %struct.op* @Perl_ck_entersub_args_proto(%struct.op* %12, %struct.gv* %13, %struct.sv* %14)
  store %struct.op* %call, %struct.op** %retval, align 8
  br label %return

if.else:                                          ; preds = %lor.end13, %cond.true
  %15 = load %struct.op*, %struct.op** %entersubop.addr, align 8
  %call14 = call %struct.op* @Perl_ck_entersub_args_list(%struct.op* %15)
  store %struct.op* %call14, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %if.else, %if.then
  %16 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %16
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_ck_entersub_args_core(%struct.op* %entersubop, %struct.gv* %namegv, %struct.sv* %protosv) #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %entersubop.addr = alloca %struct.op*, align 8
  %namegv.addr = alloca %struct.gv*, align 8
  %protosv.addr = alloca %struct.sv*, align 8
  %opnum = alloca i32, align 4
  %aop = alloca %struct.op*, align 8
  %cvop = alloca %struct.op*, align 8
  %prev = alloca %struct.op*, align 8
  %cvop92 = alloca %struct.op*, align 8
  %first = alloca %struct.op*, align 8
  %parent = alloca %struct.op*, align 8
  %flags = alloca i32, align 4
  store %struct.op* %entersubop, %struct.op** %entersubop.addr, align 8
  store %struct.gv* %namegv, %struct.gv** %namegv.addr, align 8
  store %struct.sv* %protosv, %struct.sv** %protosv.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %protosv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %0, i32 0, i32 2
  %1 = load i32, i32* %sv_flags, align 4
  %and = and i32 %1, 255
  %cmp = icmp eq i32 %and, 13
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  br label %cond.end6

cond.false:                                       ; preds = %entry
  %2 = load %struct.sv*, %struct.sv** %protosv.addr, align 8
  %sv_flags1 = getelementptr inbounds %struct.sv, %struct.sv* %2, i32 0, i32 2
  %3 = load i32, i32* %sv_flags1, align 4
  %and2 = and i32 %3, -2145386240
  %cmp3 = icmp eq i32 %and2, -2147483392
  br i1 %cmp3, label %cond.true4, label %cond.false5

cond.true4:                                       ; preds = %cond.false
  %4 = load %struct.sv*, %struct.sv** %protosv.addr, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %4, i32 0, i32 0
  %5 = load i8*, i8** %sv_any, align 8
  %6 = bitcast i8* %5 to %struct.xpvuv*
  %xuv_u = getelementptr inbounds %struct.xpvuv, %struct.xpvuv* %6, i32 0, i32 4
  %xivu_uv = bitcast %union._xivu* %xuv_u to i64*
  %7 = load i64, i64* %xivu_uv, align 8
  br label %cond.end

cond.false5:                                      ; preds = %cond.false
  %8 = load %struct.sv*, %struct.sv** %protosv.addr, align 8
  %call = call i64 @Perl_sv_2uv_flags(%struct.sv* %8, i32 2)
  br label %cond.end

cond.end:                                         ; preds = %cond.false5, %cond.true4
  %cond = phi i64 [ %7, %cond.true4 ], [ %call, %cond.false5 ]
  %conv = trunc i64 %cond to i32
  br label %cond.end6

cond.end6:                                        ; preds = %cond.end, %cond.true
  %cond7 = phi i32 [ 0, %cond.true ], [ %conv, %cond.end ]
  store i32 %cond7, i32* %opnum, align 4
  %9 = load %struct.op*, %struct.op** %entersubop.addr, align 8
  %10 = bitcast %struct.op* %9 to %struct.unop*
  %op_first = getelementptr inbounds %struct.unop, %struct.unop* %10, i32 0, i32 7
  %11 = load %struct.op*, %struct.op** %op_first, align 8
  store %struct.op* %11, %struct.op** %aop, align 8
  %12 = load i32, i32* %opnum, align 4
  %tobool = icmp ne i32 %12, 0
  br i1 %tobool, label %if.else, label %if.then

if.then:                                          ; preds = %cond.end6
  %13 = load %struct.op*, %struct.op** %aop, align 8
  %op_sibling = getelementptr inbounds %struct.op, %struct.op* %13, i32 0, i32 1
  %14 = load %struct.op*, %struct.op** %op_sibling, align 8
  %tobool8 = icmp ne %struct.op* %14, null
  br i1 %tobool8, label %cond.true9, label %cond.false10

cond.true9:                                       ; preds = %if.then
  br i1 true, label %if.end, label %if.then11

cond.false10:                                     ; preds = %if.then
  br i1 false, label %if.end, label %if.then11

if.then11:                                        ; preds = %cond.false10, %cond.true9
  %15 = load %struct.op*, %struct.op** %aop, align 8
  %16 = bitcast %struct.op* %15 to %struct.unop*
  %op_first12 = getelementptr inbounds %struct.unop, %struct.unop* %16, i32 0, i32 7
  %17 = load %struct.op*, %struct.op** %op_first12, align 8
  store %struct.op* %17, %struct.op** %aop, align 8
  br label %if.end

if.end:                                           ; preds = %if.then11, %cond.false10, %cond.true9
  %18 = load %struct.op*, %struct.op** %aop, align 8
  %op_sibling13 = getelementptr inbounds %struct.op, %struct.op* %18, i32 0, i32 1
  %19 = load %struct.op*, %struct.op** %op_sibling13, align 8
  %add.ptr = getelementptr inbounds %struct.op, %struct.op* %19, i64 0
  store %struct.op* %add.ptr, %struct.op** %aop, align 8
  %20 = load %struct.op*, %struct.op** %aop, align 8
  store %struct.op* %20, %struct.op** %cvop, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %21 = load %struct.op*, %struct.op** %cvop, align 8
  %op_sibling14 = getelementptr inbounds %struct.op, %struct.op* %21, i32 0, i32 1
  %22 = load %struct.op*, %struct.op** %op_sibling14, align 8
  %add.ptr15 = getelementptr inbounds %struct.op, %struct.op* %22, i64 0
  %tobool16 = icmp ne %struct.op* %add.ptr15, null
  br i1 %tobool16, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %23 = load %struct.op*, %struct.op** %cvop, align 8
  %op_sibling17 = getelementptr inbounds %struct.op, %struct.op* %23, i32 0, i32 1
  %24 = load %struct.op*, %struct.op** %op_sibling17, align 8
  %add.ptr18 = getelementptr inbounds %struct.op, %struct.op* %24, i64 0
  store %struct.op* %add.ptr18, %struct.op** %cvop, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %25 = load %struct.op*, %struct.op** %aop, align 8
  %26 = load %struct.op*, %struct.op** %cvop, align 8
  %cmp19 = icmp ne %struct.op* %25, %26
  br i1 %cmp19, label %if.then21, label %if.end24

if.then21:                                        ; preds = %for.end
  %27 = load %struct.op*, %struct.op** %entersubop.addr, align 8
  %28 = load %struct.gv*, %struct.gv** %namegv.addr, align 8
  %sv_any22 = getelementptr inbounds %struct.gv, %struct.gv* %28, i32 0, i32 0
  %29 = load %struct.xpvgv*, %struct.xpvgv** %sv_any22, align 8
  %xiv_u = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %29, i32 0, i32 4
  %xivu_namehek = bitcast %union._xivu* %xiv_u to %struct.hek**
  %30 = load %struct.hek*, %struct.hek** %xivu_namehek, align 8
  %hek_key = getelementptr inbounds %struct.hek, %struct.hek* %30, i32 0, i32 2
  %arraydecay = getelementptr inbounds [1 x i8], [1 x i8]* %hek_key, i64 0, i64 0
  %call23 = call %struct.op* @S_too_many_arguments_pv(%struct.op* %27, i8* %arraydecay, i32 0)
  br label %if.end24

if.end24:                                         ; preds = %if.then21, %for.end
  %31 = load %struct.op*, %struct.op** %entersubop.addr, align 8
  call void @Perl_op_free(%struct.op* %31)
  %32 = load %struct.gv*, %struct.gv** %namegv.addr, align 8
  %sv_any25 = getelementptr inbounds %struct.gv, %struct.gv* %32, i32 0, i32 0
  %33 = load %struct.xpvgv*, %struct.xpvgv** %sv_any25, align 8
  %xiv_u26 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %33, i32 0, i32 4
  %xivu_namehek27 = bitcast %union._xivu* %xiv_u26 to %struct.hek**
  %34 = load %struct.hek*, %struct.hek** %xivu_namehek27, align 8
  %hek_key28 = getelementptr inbounds %struct.hek, %struct.hek* %34, i32 0, i32 2
  %arrayidx = getelementptr inbounds [1 x i8], [1 x i8]* %hek_key28, i64 0, i64 2
  %35 = load i8, i8* %arrayidx, align 2
  %conv29 = sext i8 %35 to i32
  switch i32 %conv29, label %sw.epilog [
    i32 70, label %sw.bb
    i32 76, label %sw.bb44
    i32 80, label %sw.bb48
  ]

sw.bb:                                            ; preds = %if.end24
  %36 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_filegv = getelementptr inbounds %struct.cop, %struct.cop* %36, i32 0, i32 9
  %37 = load %struct.gv*, %struct.gv** %cop_filegv, align 8
  %tobool30 = icmp ne %struct.gv* %37, null
  br i1 %tobool30, label %cond.true31, label %cond.false39

cond.true31:                                      ; preds = %sw.bb
  %38 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_filegv32 = getelementptr inbounds %struct.cop, %struct.cop* %38, i32 0, i32 9
  %39 = load %struct.gv*, %struct.gv** %cop_filegv32, align 8
  %sv_any33 = getelementptr inbounds %struct.gv, %struct.gv* %39, i32 0, i32 0
  %40 = load %struct.xpvgv*, %struct.xpvgv** %sv_any33, align 8
  %xiv_u34 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %40, i32 0, i32 4
  %xivu_namehek35 = bitcast %union._xivu* %xiv_u34 to %struct.hek**
  %41 = load %struct.hek*, %struct.hek** %xivu_namehek35, align 8
  %hek_key36 = getelementptr inbounds %struct.hek, %struct.hek* %41, i32 0, i32 2
  %arraydecay37 = getelementptr inbounds [1 x i8], [1 x i8]* %hek_key36, i64 0, i64 0
  %add.ptr38 = getelementptr inbounds i8, i8* %arraydecay37, i64 2
  br label %cond.end40

cond.false39:                                     ; preds = %sw.bb
  br label %cond.end40

cond.end40:                                       ; preds = %cond.false39, %cond.true31
  %cond41 = phi i8* [ %add.ptr38, %cond.true31 ], [ null, %cond.false39 ]
  %call42 = call %struct.sv* @Perl_newSVpv(i8* %cond41, i64 0)
  %call43 = call %struct.op* @Perl_newSVOP(i32 5, i32 0, %struct.sv* %call42)
  store %struct.op* %call43, %struct.op** %retval, align 8
  br label %return

sw.bb44:                                          ; preds = %if.end24
  %42 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_line = getelementptr inbounds %struct.cop, %struct.cop* %42, i32 0, i32 7
  %43 = load i32, i32* %cop_line, align 4
  %conv45 = zext i32 %43 to i64
  %call46 = call %struct.sv* (i8*, ...) @Perl_newSVpvf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.143, i64 0, i64 0), i64 %conv45)
  %call47 = call %struct.op* @Perl_newSVOP(i32 5, i32 0, %struct.sv* %call46)
  store %struct.op* %call47, %struct.op** %retval, align 8
  br label %return

sw.bb48:                                          ; preds = %if.end24
  %44 = load %struct.hv*, %struct.hv** @PL_curstash, align 8
  %tobool49 = icmp ne %struct.hv* %44, null
  br i1 %tobool49, label %cond.true50, label %cond.false88

cond.true50:                                      ; preds = %sw.bb48
  %45 = load %struct.hv*, %struct.hv** @PL_curstash, align 8
  %sv_flags51 = getelementptr inbounds %struct.hv, %struct.hv* %45, i32 0, i32 2
  %46 = load i32, i32* %sv_flags51, align 4
  %and52 = and i32 %46, 33554432
  %tobool53 = icmp ne i32 %and52, 0
  br i1 %tobool53, label %land.lhs.true, label %cond.false84

land.lhs.true:                                    ; preds = %cond.true50
  %47 = load %struct.hv*, %struct.hv** @PL_curstash, align 8
  %sv_u = getelementptr inbounds %struct.hv, %struct.hv* %47, i32 0, i32 3
  %svu_hash = bitcast %union.anon.4* %sv_u to %struct.he***
  %48 = load %struct.he**, %struct.he*** %svu_hash, align 8
  %49 = load %struct.hv*, %struct.hv** @PL_curstash, align 8
  %sv_any54 = getelementptr inbounds %struct.hv, %struct.hv* %49, i32 0, i32 0
  %50 = load %struct.xpvhv*, %struct.xpvhv** %sv_any54, align 8
  %xhv_max = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %50, i32 0, i32 3
  %51 = load i64, i64* %xhv_max, align 8
  %add = add i64 %51, 1
  %arrayidx55 = getelementptr inbounds %struct.he*, %struct.he** %48, i64 %add
  %52 = bitcast %struct.he** %arrayidx55 to %struct.xpvhv_aux*
  %xhv_name_u = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %52, i32 0, i32 0
  %xhvnameu_name = bitcast %union._xhvnameu* %xhv_name_u to %struct.hek**
  %53 = load %struct.hek*, %struct.hek** %xhvnameu_name, align 8
  %tobool56 = icmp ne %struct.hek* %53, null
  br i1 %tobool56, label %cond.true57, label %cond.false84

cond.true57:                                      ; preds = %land.lhs.true
  %54 = load %struct.hv*, %struct.hv** @PL_curstash, align 8
  %sv_u58 = getelementptr inbounds %struct.hv, %struct.hv* %54, i32 0, i32 3
  %svu_hash59 = bitcast %union.anon.4* %sv_u58 to %struct.he***
  %55 = load %struct.he**, %struct.he*** %svu_hash59, align 8
  %56 = load %struct.hv*, %struct.hv** @PL_curstash, align 8
  %sv_any60 = getelementptr inbounds %struct.hv, %struct.hv* %56, i32 0, i32 0
  %57 = load %struct.xpvhv*, %struct.xpvhv** %sv_any60, align 8
  %xhv_max61 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %57, i32 0, i32 3
  %58 = load i64, i64* %xhv_max61, align 8
  %add62 = add i64 %58, 1
  %arrayidx63 = getelementptr inbounds %struct.he*, %struct.he** %55, i64 %add62
  %59 = bitcast %struct.he** %arrayidx63 to %struct.xpvhv_aux*
  %xhv_name_count = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %59, i32 0, i32 4
  %60 = load i32, i32* %xhv_name_count, align 4
  %tobool64 = icmp ne i32 %60, 0
  br i1 %tobool64, label %cond.true65, label %cond.false73

cond.true65:                                      ; preds = %cond.true57
  %61 = load %struct.hv*, %struct.hv** @PL_curstash, align 8
  %sv_u66 = getelementptr inbounds %struct.hv, %struct.hv* %61, i32 0, i32 3
  %svu_hash67 = bitcast %union.anon.4* %sv_u66 to %struct.he***
  %62 = load %struct.he**, %struct.he*** %svu_hash67, align 8
  %63 = load %struct.hv*, %struct.hv** @PL_curstash, align 8
  %sv_any68 = getelementptr inbounds %struct.hv, %struct.hv* %63, i32 0, i32 0
  %64 = load %struct.xpvhv*, %struct.xpvhv** %sv_any68, align 8
  %xhv_max69 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %64, i32 0, i32 3
  %65 = load i64, i64* %xhv_max69, align 8
  %add70 = add i64 %65, 1
  %arrayidx71 = getelementptr inbounds %struct.he*, %struct.he** %62, i64 %add70
  %66 = bitcast %struct.he** %arrayidx71 to %struct.xpvhv_aux*
  %xhv_name_u72 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %66, i32 0, i32 0
  %xhvnameu_names = bitcast %union._xhvnameu* %xhv_name_u72 to %struct.hek***
  %67 = load %struct.hek**, %struct.hek*** %xhvnameu_names, align 8
  %68 = load %struct.hek*, %struct.hek** %67, align 8
  br label %cond.end82

cond.false73:                                     ; preds = %cond.true57
  %69 = load %struct.hv*, %struct.hv** @PL_curstash, align 8
  %sv_u74 = getelementptr inbounds %struct.hv, %struct.hv* %69, i32 0, i32 3
  %svu_hash75 = bitcast %union.anon.4* %sv_u74 to %struct.he***
  %70 = load %struct.he**, %struct.he*** %svu_hash75, align 8
  %71 = load %struct.hv*, %struct.hv** @PL_curstash, align 8
  %sv_any76 = getelementptr inbounds %struct.hv, %struct.hv* %71, i32 0, i32 0
  %72 = load %struct.xpvhv*, %struct.xpvhv** %sv_any76, align 8
  %xhv_max77 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %72, i32 0, i32 3
  %73 = load i64, i64* %xhv_max77, align 8
  %add78 = add i64 %73, 1
  %arrayidx79 = getelementptr inbounds %struct.he*, %struct.he** %70, i64 %add78
  %74 = bitcast %struct.he** %arrayidx79 to %struct.xpvhv_aux*
  %xhv_name_u80 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %74, i32 0, i32 0
  %xhvnameu_name81 = bitcast %union._xhvnameu* %xhv_name_u80 to %struct.hek**
  %75 = load %struct.hek*, %struct.hek** %xhvnameu_name81, align 8
  br label %cond.end82

cond.end82:                                       ; preds = %cond.false73, %cond.true65
  %cond83 = phi %struct.hek* [ %68, %cond.true65 ], [ %75, %cond.false73 ]
  br label %cond.end85

cond.false84:                                     ; preds = %land.lhs.true, %cond.true50
  br label %cond.end85

cond.end85:                                       ; preds = %cond.false84, %cond.end82
  %cond86 = phi %struct.hek* [ %cond83, %cond.end82 ], [ null, %cond.false84 ]
  %call87 = call %struct.sv* @Perl_newSVhek(%struct.hek* %cond86)
  br label %cond.end89

cond.false88:                                     ; preds = %sw.bb48
  br label %cond.end89

cond.end89:                                       ; preds = %cond.false88, %cond.end85
  %cond90 = phi %struct.sv* [ %call87, %cond.end85 ], [ @PL_sv_undef, %cond.false88 ]
  %call91 = call %struct.op* @Perl_newSVOP(i32 5, i32 0, %struct.sv* %cond90)
  store %struct.op* %call91, %struct.op** %retval, align 8
  br label %return

sw.epilog:                                        ; preds = %if.end24
  br label %if.end189

if.else:                                          ; preds = %cond.end6
  store i32 0, i32* %flags, align 4
  %76 = load %struct.op*, %struct.op** %entersubop.addr, align 8
  store %struct.op* %76, %struct.op** %parent, align 8
  %77 = load %struct.op*, %struct.op** %aop, align 8
  %op_sibling93 = getelementptr inbounds %struct.op, %struct.op* %77, i32 0, i32 1
  %78 = load %struct.op*, %struct.op** %op_sibling93, align 8
  %tobool94 = icmp ne %struct.op* %78, null
  br i1 %tobool94, label %cond.true95, label %cond.false96

cond.true95:                                      ; preds = %if.else
  br i1 true, label %if.end99, label %if.then97

cond.false96:                                     ; preds = %if.else
  br i1 false, label %if.end99, label %if.then97

if.then97:                                        ; preds = %cond.false96, %cond.true95
  %79 = load %struct.op*, %struct.op** %aop, align 8
  store %struct.op* %79, %struct.op** %parent, align 8
  %80 = load %struct.op*, %struct.op** %aop, align 8
  %81 = bitcast %struct.op* %80 to %struct.unop*
  %op_first98 = getelementptr inbounds %struct.unop, %struct.unop* %81, i32 0, i32 7
  %82 = load %struct.op*, %struct.op** %op_first98, align 8
  store %struct.op* %82, %struct.op** %aop, align 8
  br label %if.end99

if.end99:                                         ; preds = %if.then97, %cond.false96, %cond.true95
  %83 = load %struct.op*, %struct.op** %aop, align 8
  store %struct.op* %83, %struct.op** %prev, align 8
  store %struct.op* %83, %struct.op** %first, align 8
  %84 = load %struct.op*, %struct.op** %aop, align 8
  %op_sibling100 = getelementptr inbounds %struct.op, %struct.op* %84, i32 0, i32 1
  %85 = load %struct.op*, %struct.op** %op_sibling100, align 8
  %add.ptr101 = getelementptr inbounds %struct.op, %struct.op* %85, i64 0
  store %struct.op* %add.ptr101, %struct.op** %aop, align 8
  %86 = load %struct.op*, %struct.op** %aop, align 8
  store %struct.op* %86, %struct.op** %cvop92, align 8
  br label %for.cond102

for.cond102:                                      ; preds = %for.inc108, %if.end99
  %87 = load %struct.op*, %struct.op** %cvop92, align 8
  %op_sibling103 = getelementptr inbounds %struct.op, %struct.op* %87, i32 0, i32 1
  %88 = load %struct.op*, %struct.op** %op_sibling103, align 8
  %tobool104 = icmp ne %struct.op* %88, null
  %89 = zext i1 %tobool104 to i64
  %cond105 = select i1 %tobool104, i32 1, i32 0
  %tobool106 = icmp ne i32 %cond105, 0
  br i1 %tobool106, label %for.body107, label %for.end111

for.body107:                                      ; preds = %for.cond102
  br label %for.inc108

for.inc108:                                       ; preds = %for.body107
  %90 = load %struct.op*, %struct.op** %cvop92, align 8
  store %struct.op* %90, %struct.op** %prev, align 8
  %91 = load %struct.op*, %struct.op** %cvop92, align 8
  %op_sibling109 = getelementptr inbounds %struct.op, %struct.op* %91, i32 0, i32 1
  %92 = load %struct.op*, %struct.op** %op_sibling109, align 8
  %add.ptr110 = getelementptr inbounds %struct.op, %struct.op* %92, i64 0
  store %struct.op* %add.ptr110, %struct.op** %cvop92, align 8
  br label %for.cond102

for.end111:                                       ; preds = %for.cond102
  %93 = load %struct.op*, %struct.op** %cvop92, align 8
  %op_private = getelementptr inbounds %struct.op, %struct.op* %93, i32 0, i32 6
  %94 = load i8, i8* %op_private, align 1
  %conv112 = zext i8 %94 to i32
  %and113 = and i32 %conv112, 128
  %tobool114 = icmp ne i32 %and113, 0
  br i1 %tobool114, label %if.end131, label %land.lhs.true115

land.lhs.true115:                                 ; preds = %for.end111
  %95 = load i32, i32* %opnum, align 4
  %cmp116 = icmp ne i32 %95, 145
  br i1 %cmp116, label %land.lhs.true118, label %if.end131

land.lhs.true118:                                 ; preds = %land.lhs.true115
  %96 = load i32, i32* %opnum, align 4
  %cmp119 = icmp ne i32 %96, 146
  br i1 %cmp119, label %land.lhs.true121, label %if.end131

land.lhs.true121:                                 ; preds = %land.lhs.true118
  %97 = load i32, i32* %opnum, align 4
  %cmp122 = icmp ne i32 %97, 144
  br i1 %cmp122, label %land.lhs.true124, label %if.end131

land.lhs.true124:                                 ; preds = %land.lhs.true121
  %98 = load i32, i32* %opnum, align 4
  %cmp125 = icmp ne i32 %98, 147
  br i1 %cmp125, label %land.lhs.true127, label %if.end131

land.lhs.true127:                                 ; preds = %land.lhs.true124
  %99 = load i32, i32* %opnum, align 4
  %cmp128 = icmp ne i32 %99, 148
  br i1 %cmp128, label %if.then130, label %if.end131

if.then130:                                       ; preds = %land.lhs.true127
  %100 = load i32, i32* %flags, align 4
  %or = or i32 %100, 128
  store i32 %or, i32* %flags, align 4
  br label %if.end131

if.end131:                                        ; preds = %if.then130, %land.lhs.true127, %land.lhs.true124, %land.lhs.true121, %land.lhs.true118, %land.lhs.true115, %for.end111
  %101 = load %struct.op*, %struct.op** %parent, align 8
  %102 = load %struct.op*, %struct.op** %prev, align 8
  %call132 = call %struct.op* @Perl_op_sibling_splice(%struct.op* %101, %struct.op* %102, i32 1, %struct.op* null)
  %103 = load %struct.op*, %struct.op** %cvop92, align 8
  call void @Perl_op_free(%struct.op* %103)
  %104 = load %struct.op*, %struct.op** %aop, align 8
  %105 = load %struct.op*, %struct.op** %cvop92, align 8
  %cmp133 = icmp eq %struct.op* %104, %105
  br i1 %cmp133, label %if.then135, label %if.end136

if.then135:                                       ; preds = %if.end131
  store %struct.op* null, %struct.op** %aop, align 8
  br label %if.end136

if.end136:                                        ; preds = %if.then135, %if.end131
  %106 = load %struct.op*, %struct.op** %aop, align 8
  %tobool137 = icmp ne %struct.op* %106, null
  br i1 %tobool137, label %if.then138, label %if.end140

if.then138:                                       ; preds = %if.end136
  %107 = load %struct.op*, %struct.op** %parent, align 8
  %108 = load %struct.op*, %struct.op** %first, align 8
  %call139 = call %struct.op* @Perl_op_sibling_splice(%struct.op* %107, %struct.op* %108, i32 -1, %struct.op* null)
  br label %if.end140

if.end140:                                        ; preds = %if.then138, %if.end136
  %109 = load %struct.op*, %struct.op** %entersubop.addr, align 8
  call void @Perl_op_free(%struct.op* %109)
  %110 = load i32, i32* %opnum, align 4
  %cmp141 = icmp eq i32 %110, 342
  br i1 %cmp141, label %land.lhs.true143, label %if.end159

land.lhs.true143:                                 ; preds = %if.end140
  %111 = load %struct.gv*, %struct.gv** %namegv.addr, align 8
  %sv_any144 = getelementptr inbounds %struct.gv, %struct.gv* %111, i32 0, i32 0
  %112 = load %struct.xpvgv*, %struct.xpvgv** %sv_any144, align 8
  %xiv_u145 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %112, i32 0, i32 4
  %xivu_namehek146 = bitcast %union._xivu* %xiv_u145 to %struct.hek**
  %113 = load %struct.hek*, %struct.hek** %xivu_namehek146, align 8
  %hek_len = getelementptr inbounds %struct.hek, %struct.hek* %113, i32 0, i32 1
  %114 = load i32, i32* %hek_len, align 4
  %cmp147 = icmp eq i32 %114, 9
  br i1 %cmp147, label %land.lhs.true149, label %if.end159

land.lhs.true149:                                 ; preds = %land.lhs.true143
  %115 = load %struct.gv*, %struct.gv** %namegv.addr, align 8
  %sv_any150 = getelementptr inbounds %struct.gv, %struct.gv* %115, i32 0, i32 0
  %116 = load %struct.xpvgv*, %struct.xpvgv** %sv_any150, align 8
  %xiv_u151 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %116, i32 0, i32 4
  %xivu_namehek152 = bitcast %union._xivu* %xiv_u151 to %struct.hek**
  %117 = load %struct.hek*, %struct.hek** %xivu_namehek152, align 8
  %hek_key153 = getelementptr inbounds %struct.hek, %struct.hek* %117, i32 0, i32 2
  %arraydecay154 = getelementptr inbounds [1 x i8], [1 x i8]* %hek_key153, i64 0, i64 0
  %call155 = call i32 @strncmp(i8* %arraydecay154, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.144, i64 0, i64 0), i64 9) #7
  %tobool156 = icmp ne i32 %call155, 0
  br i1 %tobool156, label %if.end159, label %if.then157

if.then157:                                       ; preds = %land.lhs.true149
  %118 = load i32, i32* %flags, align 4
  %or158 = or i32 %118, 2048
  store i32 %or158, i32* %flags, align 4
  br label %if.end159

if.end159:                                        ; preds = %if.then157, %land.lhs.true149, %land.lhs.true143, %if.end140
  %119 = load i32, i32* %opnum, align 4
  %idxprom = sext i32 %119 to i64
  %arrayidx160 = getelementptr inbounds [0 x i32], [0 x i32]* @PL_opargs, i64 0, i64 %idxprom
  %120 = load i32, i32* %arrayidx160, align 4
  %and161 = and i32 %120, 3840
  switch i32 %and161, label %sw.default [
    i32 256, label %sw.bb162
    i32 2816, label %sw.bb162
    i32 3072, label %sw.bb162
    i32 0, label %sw.bb170
  ]

sw.bb162:                                         ; preds = %if.end159, %if.end159, %if.end159
  %121 = load %struct.op*, %struct.op** %aop, align 8
  %tobool163 = icmp ne %struct.op* %121, null
  br i1 %tobool163, label %cond.true164, label %cond.false166

cond.true164:                                     ; preds = %sw.bb162
  %122 = load i32, i32* %opnum, align 4
  %123 = load i32, i32* %flags, align 4
  %124 = load %struct.op*, %struct.op** %aop, align 8
  %call165 = call %struct.op* @Perl_newUNOP(i32 %122, i32 %123, %struct.op* %124)
  br label %cond.end168

cond.false166:                                    ; preds = %sw.bb162
  %125 = load i32, i32* %opnum, align 4
  %126 = load i32, i32* %flags, align 4
  %call167 = call %struct.op* @Perl_newOP(i32 %125, i32 %126)
  br label %cond.end168

cond.end168:                                      ; preds = %cond.false166, %cond.true164
  %cond169 = phi %struct.op* [ %call165, %cond.true164 ], [ %call167, %cond.false166 ]
  store %struct.op* %cond169, %struct.op** %retval, align 8
  br label %return

sw.bb170:                                         ; preds = %if.end159
  %127 = load %struct.op*, %struct.op** %aop, align 8
  %tobool171 = icmp ne %struct.op* %127, null
  br i1 %tobool171, label %if.then172, label %if.end179

if.then172:                                       ; preds = %sw.bb170
  %128 = load %struct.op*, %struct.op** %aop, align 8
  %129 = load %struct.gv*, %struct.gv** %namegv.addr, align 8
  %sv_any173 = getelementptr inbounds %struct.gv, %struct.gv* %129, i32 0, i32 0
  %130 = load %struct.xpvgv*, %struct.xpvgv** %sv_any173, align 8
  %xiv_u174 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %130, i32 0, i32 4
  %xivu_namehek175 = bitcast %union._xivu* %xiv_u174 to %struct.hek**
  %131 = load %struct.hek*, %struct.hek** %xivu_namehek175, align 8
  %hek_key176 = getelementptr inbounds %struct.hek, %struct.hek* %131, i32 0, i32 2
  %arraydecay177 = getelementptr inbounds [1 x i8], [1 x i8]* %hek_key176, i64 0, i64 0
  %call178 = call %struct.op* @S_too_many_arguments_pv(%struct.op* %128, i8* %arraydecay177, i32 0)
  %132 = load %struct.op*, %struct.op** %aop, align 8
  call void @Perl_op_free(%struct.op* %132)
  br label %if.end179

if.end179:                                        ; preds = %if.then172, %sw.bb170
  %133 = load i32, i32* %opnum, align 4
  %cmp180 = icmp eq i32 %133, 385
  br i1 %cmp180, label %cond.true182, label %cond.false184

cond.true182:                                     ; preds = %if.end179
  %call183 = call %struct.op* @Perl_newPVOP(i32 385, i32 0, i8* null)
  br label %cond.end186

cond.false184:                                    ; preds = %if.end179
  %134 = load i32, i32* %opnum, align 4
  %call185 = call %struct.op* @Perl_newOP(i32 %134, i32 0)
  br label %cond.end186

cond.end186:                                      ; preds = %cond.false184, %cond.true182
  %cond187 = phi %struct.op* [ %call183, %cond.true182 ], [ %call185, %cond.false184 ]
  store %struct.op* %cond187, %struct.op** %retval, align 8
  br label %return

sw.default:                                       ; preds = %if.end159
  %135 = load i32, i32* %opnum, align 4
  %136 = load %struct.op*, %struct.op** %aop, align 8
  %call188 = call %struct.op* @Perl_op_convert_list(i32 %135, i32 0, %struct.op* %136)
  store %struct.op* %call188, %struct.op** %retval, align 8
  br label %return

if.end189:                                        ; preds = %sw.epilog
  %137 = load %struct.op*, %struct.op** %entersubop.addr, align 8
  store %struct.op* %137, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %if.end189, %sw.default, %cond.end186, %cond.end168, %cond.end89, %sw.bb44, %cond.end40
  %138 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %138
}

declare dso_local i64 @Perl_sv_2uv_flags(%struct.sv*, i32) #3

; Function Attrs: noinline nounwind uwtable
define dso_local void @Perl_cv_get_call_checker(%struct.cv* %cv, %struct.op* (%struct.op*, %struct.gv*, %struct.sv*)** %ckfun_p, %struct.sv** %ckobj_p) #0 {
entry:
  %cv.addr = alloca %struct.cv*, align 8
  %ckfun_p.addr = alloca %struct.op* (%struct.op*, %struct.gv*, %struct.sv*)**, align 8
  %ckobj_p.addr = alloca %struct.sv**, align 8
  store %struct.cv* %cv, %struct.cv** %cv.addr, align 8
  store %struct.op* (%struct.op*, %struct.gv*, %struct.sv*)** %ckfun_p, %struct.op* (%struct.op*, %struct.gv*, %struct.sv*)*** %ckfun_p.addr, align 8
  store %struct.sv** %ckobj_p, %struct.sv*** %ckobj_p.addr, align 8
  %0 = load %struct.cv*, %struct.cv** %cv.addr, align 8
  %1 = load %struct.op* (%struct.op*, %struct.gv*, %struct.sv*)**, %struct.op* (%struct.op*, %struct.gv*, %struct.sv*)*** %ckfun_p.addr, align 8
  %2 = load %struct.sv**, %struct.sv*** %ckobj_p.addr, align 8
  call void @S_cv_get_call_checker(%struct.cv* %0, %struct.op* (%struct.op*, %struct.gv*, %struct.sv*)** %1, %struct.sv** %2, i8* null)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @S_cv_get_call_checker(%struct.cv* %cv, %struct.op* (%struct.op*, %struct.gv*, %struct.sv*)** %ckfun_p, %struct.sv** %ckobj_p, i8* %flagsp) #0 {
entry:
  %cv.addr = alloca %struct.cv*, align 8
  %ckfun_p.addr = alloca %struct.op* (%struct.op*, %struct.gv*, %struct.sv*)**, align 8
  %ckobj_p.addr = alloca %struct.sv**, align 8
  %flagsp.addr = alloca i8*, align 8
  %callmg = alloca %struct.magic*, align 8
  store %struct.cv* %cv, %struct.cv** %cv.addr, align 8
  store %struct.op* (%struct.op*, %struct.gv*, %struct.sv*)** %ckfun_p, %struct.op* (%struct.op*, %struct.gv*, %struct.sv*)*** %ckfun_p.addr, align 8
  store %struct.sv** %ckobj_p, %struct.sv*** %ckobj_p.addr, align 8
  store i8* %flagsp, i8** %flagsp.addr, align 8
  %0 = load %struct.cv*, %struct.cv** %cv.addr, align 8
  %1 = bitcast %struct.cv* %0 to %struct.sv*
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %1, i32 0, i32 2
  %2 = load i32, i32* %sv_flags, align 4
  %and = and i32 %2, 14680064
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %3 = load %struct.cv*, %struct.cv** %cv.addr, align 8
  %4 = bitcast %struct.cv* %3 to %struct.sv*
  %call = call %struct.magic* @Perl_mg_find(%struct.sv* %4, i32 93)
  br label %cond.end

cond.false:                                       ; preds = %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.magic* [ %call, %cond.true ], [ null, %cond.false ]
  store %struct.magic* %cond, %struct.magic** %callmg, align 8
  %5 = load %struct.magic*, %struct.magic** %callmg, align 8
  %tobool1 = icmp ne %struct.magic* %5, null
  br i1 %tobool1, label %if.then, label %if.else

if.then:                                          ; preds = %cond.end
  %6 = load %struct.magic*, %struct.magic** %callmg, align 8
  %mg_ptr = getelementptr inbounds %struct.magic, %struct.magic* %6, i32 0, i32 7
  %7 = load i8*, i8** %mg_ptr, align 8
  %8 = ptrtoint i8* %7 to i64
  %9 = inttoptr i64 %8 to %struct.op* (%struct.op*, %struct.gv*, %struct.sv*)*
  %10 = load %struct.op* (%struct.op*, %struct.gv*, %struct.sv*)**, %struct.op* (%struct.op*, %struct.gv*, %struct.sv*)*** %ckfun_p.addr, align 8
  store %struct.op* (%struct.op*, %struct.gv*, %struct.sv*)* %9, %struct.op* (%struct.op*, %struct.gv*, %struct.sv*)** %10, align 8
  %11 = load %struct.magic*, %struct.magic** %callmg, align 8
  %mg_obj = getelementptr inbounds %struct.magic, %struct.magic* %11, i32 0, i32 6
  %12 = load %struct.sv*, %struct.sv** %mg_obj, align 8
  %13 = load %struct.sv**, %struct.sv*** %ckobj_p.addr, align 8
  store %struct.sv* %12, %struct.sv** %13, align 8
  %14 = load i8*, i8** %flagsp.addr, align 8
  %tobool2 = icmp ne i8* %14, null
  br i1 %tobool2, label %if.then3, label %if.end

if.then3:                                         ; preds = %if.then
  %15 = load %struct.magic*, %struct.magic** %callmg, align 8
  %mg_flags = getelementptr inbounds %struct.magic, %struct.magic* %15, i32 0, i32 4
  %16 = load i8, i8* %mg_flags, align 1
  %17 = load i8*, i8** %flagsp.addr, align 8
  store i8 %16, i8* %17, align 1
  br label %if.end

if.end:                                           ; preds = %if.then3, %if.then
  br label %if.end7

if.else:                                          ; preds = %cond.end
  %18 = load %struct.op* (%struct.op*, %struct.gv*, %struct.sv*)**, %struct.op* (%struct.op*, %struct.gv*, %struct.sv*)*** %ckfun_p.addr, align 8
  store %struct.op* (%struct.op*, %struct.gv*, %struct.sv*)* @Perl_ck_entersub_args_proto_or_list, %struct.op* (%struct.op*, %struct.gv*, %struct.sv*)** %18, align 8
  %19 = load %struct.cv*, %struct.cv** %cv.addr, align 8
  %20 = bitcast %struct.cv* %19 to %struct.sv*
  %21 = load %struct.sv**, %struct.sv*** %ckobj_p.addr, align 8
  store %struct.sv* %20, %struct.sv** %21, align 8
  %22 = load i8*, i8** %flagsp.addr, align 8
  %tobool4 = icmp ne i8* %22, null
  br i1 %tobool4, label %if.then5, label %if.end6

if.then5:                                         ; preds = %if.else
  %23 = load i8*, i8** %flagsp.addr, align 8
  store i8 0, i8* %23, align 1
  br label %if.end6

if.end6:                                          ; preds = %if.then5, %if.else
  br label %if.end7

if.end7:                                          ; preds = %if.end6, %if.end
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @Perl_cv_set_call_checker(%struct.cv* %cv, %struct.op* (%struct.op*, %struct.gv*, %struct.sv*)* %ckfun, %struct.sv* %ckobj) #0 {
entry:
  %cv.addr = alloca %struct.cv*, align 8
  %ckfun.addr = alloca %struct.op* (%struct.op*, %struct.gv*, %struct.sv*)*, align 8
  %ckobj.addr = alloca %struct.sv*, align 8
  store %struct.cv* %cv, %struct.cv** %cv.addr, align 8
  store %struct.op* (%struct.op*, %struct.gv*, %struct.sv*)* %ckfun, %struct.op* (%struct.op*, %struct.gv*, %struct.sv*)** %ckfun.addr, align 8
  store %struct.sv* %ckobj, %struct.sv** %ckobj.addr, align 8
  %0 = load %struct.cv*, %struct.cv** %cv.addr, align 8
  %1 = load %struct.op* (%struct.op*, %struct.gv*, %struct.sv*)*, %struct.op* (%struct.op*, %struct.gv*, %struct.sv*)** %ckfun.addr, align 8
  %2 = load %struct.sv*, %struct.sv** %ckobj.addr, align 8
  call void @Perl_cv_set_call_checker_flags(%struct.cv* %0, %struct.op* (%struct.op*, %struct.gv*, %struct.sv*)* %1, %struct.sv* %2, i32 1)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @Perl_cv_set_call_checker_flags(%struct.cv* %cv, %struct.op* (%struct.op*, %struct.gv*, %struct.sv*)* %ckfun, %struct.sv* %ckobj, i32 %flags) #0 {
entry:
  %cv.addr = alloca %struct.cv*, align 8
  %ckfun.addr = alloca %struct.op* (%struct.op*, %struct.gv*, %struct.sv*)*, align 8
  %ckobj.addr = alloca %struct.sv*, align 8
  %flags.addr = alloca i32, align 4
  %callmg = alloca %struct.magic*, align 8
  store %struct.cv* %cv, %struct.cv** %cv.addr, align 8
  store %struct.op* (%struct.op*, %struct.gv*, %struct.sv*)* %ckfun, %struct.op* (%struct.op*, %struct.gv*, %struct.sv*)** %ckfun.addr, align 8
  store %struct.sv* %ckobj, %struct.sv** %ckobj.addr, align 8
  store i32 %flags, i32* %flags.addr, align 4
  %0 = load %struct.op* (%struct.op*, %struct.gv*, %struct.sv*)*, %struct.op* (%struct.op*, %struct.gv*, %struct.sv*)** %ckfun.addr, align 8
  %cmp = icmp eq %struct.op* (%struct.op*, %struct.gv*, %struct.sv*)* %0, @Perl_ck_entersub_args_proto_or_list
  br i1 %cmp, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %entry
  %1 = load %struct.sv*, %struct.sv** %ckobj.addr, align 8
  %2 = load %struct.cv*, %struct.cv** %cv.addr, align 8
  %3 = bitcast %struct.cv* %2 to %struct.sv*
  %cmp1 = icmp eq %struct.sv* %1, %3
  br i1 %cmp1, label %if.then, label %if.else

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct.cv*, %struct.cv** %cv.addr, align 8
  %5 = bitcast %struct.cv* %4 to %struct.sv*
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %5, i32 0, i32 2
  %6 = load i32, i32* %sv_flags, align 4
  %and = and i32 %6, 14680064
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then2, label %if.end

if.then2:                                         ; preds = %if.then
  %7 = load %struct.cv*, %struct.cv** %cv.addr, align 8
  %8 = bitcast %struct.cv* %7 to %struct.sv*
  call void @Perl_mg_free_type(%struct.sv* %8, i32 93)
  br label %if.end

if.end:                                           ; preds = %if.then2, %if.then
  br label %if.end29

if.else:                                          ; preds = %land.lhs.true, %entry
  %9 = load %struct.cv*, %struct.cv** %cv.addr, align 8
  %10 = bitcast %struct.cv* %9 to %struct.sv*
  call void @Perl_sv_magic(%struct.sv* %10, %struct.sv* @PL_sv_undef, i32 93, i8* null, i32 0)
  %11 = load %struct.cv*, %struct.cv** %cv.addr, align 8
  %12 = bitcast %struct.cv* %11 to %struct.sv*
  %call = call %struct.magic* @Perl_mg_find(%struct.sv* %12, i32 93)
  store %struct.magic* %call, %struct.magic** %callmg, align 8
  %13 = load %struct.magic*, %struct.magic** %callmg, align 8
  %mg_flags = getelementptr inbounds %struct.magic, %struct.magic* %13, i32 0, i32 4
  %14 = load i8, i8* %mg_flags, align 1
  %conv = zext i8 %14 to i32
  %and3 = and i32 %conv, 2
  %tobool4 = icmp ne i32 %and3, 0
  br i1 %tobool4, label %if.then5, label %if.end10

if.then5:                                         ; preds = %if.else
  %15 = load %struct.magic*, %struct.magic** %callmg, align 8
  %mg_obj = getelementptr inbounds %struct.magic, %struct.magic* %15, i32 0, i32 6
  %16 = load %struct.sv*, %struct.sv** %mg_obj, align 8
  %17 = bitcast %struct.sv* %16 to i8*
  %18 = bitcast i8* %17 to %struct.sv*
  call void @S_SvREFCNT_dec(%struct.sv* %18)
  %19 = load %struct.magic*, %struct.magic** %callmg, align 8
  %mg_flags6 = getelementptr inbounds %struct.magic, %struct.magic* %19, i32 0, i32 4
  %20 = load i8, i8* %mg_flags6, align 1
  %conv7 = zext i8 %20 to i32
  %and8 = and i32 %conv7, -3
  %conv9 = trunc i32 %and8 to i8
  store i8 %conv9, i8* %mg_flags6, align 1
  br label %if.end10

if.end10:                                         ; preds = %if.then5, %if.else
  %21 = load %struct.op* (%struct.op*, %struct.gv*, %struct.sv*)*, %struct.op* (%struct.op*, %struct.gv*, %struct.sv*)** %ckfun.addr, align 8
  %22 = ptrtoint %struct.op* (%struct.op*, %struct.gv*, %struct.sv*)* %21 to i64
  %23 = inttoptr i64 %22 to i8*
  %24 = load %struct.magic*, %struct.magic** %callmg, align 8
  %mg_ptr = getelementptr inbounds %struct.magic, %struct.magic* %24, i32 0, i32 7
  store i8* %23, i8** %mg_ptr, align 8
  %25 = load %struct.sv*, %struct.sv** %ckobj.addr, align 8
  %26 = load %struct.magic*, %struct.magic** %callmg, align 8
  %mg_obj11 = getelementptr inbounds %struct.magic, %struct.magic* %26, i32 0, i32 6
  store %struct.sv* %25, %struct.sv** %mg_obj11, align 8
  %27 = load %struct.sv*, %struct.sv** %ckobj.addr, align 8
  %28 = load %struct.cv*, %struct.cv** %cv.addr, align 8
  %29 = bitcast %struct.cv* %28 to %struct.sv*
  %cmp12 = icmp ne %struct.sv* %27, %29
  br i1 %cmp12, label %if.then14, label %if.end18

if.then14:                                        ; preds = %if.end10
  %30 = load %struct.sv*, %struct.sv** %ckobj.addr, align 8
  %31 = bitcast %struct.sv* %30 to i8*
  %32 = bitcast i8* %31 to %struct.sv*
  %sv_refcnt = getelementptr inbounds %struct.sv, %struct.sv* %32, i32 0, i32 1
  %33 = load i32, i32* %sv_refcnt, align 8
  %inc = add i32 %33, 1
  store i32 %inc, i32* %sv_refcnt, align 8
  %34 = load %struct.magic*, %struct.magic** %callmg, align 8
  %mg_flags15 = getelementptr inbounds %struct.magic, %struct.magic* %34, i32 0, i32 4
  %35 = load i8, i8* %mg_flags15, align 1
  %conv16 = zext i8 %35 to i32
  %or = or i32 %conv16, 2
  %conv17 = trunc i32 %or to i8
  store i8 %conv17, i8* %mg_flags15, align 1
  br label %if.end18

if.end18:                                         ; preds = %if.then14, %if.end10
  %36 = load %struct.magic*, %struct.magic** %callmg, align 8
  %mg_flags19 = getelementptr inbounds %struct.magic, %struct.magic* %36, i32 0, i32 4
  %37 = load i8, i8* %mg_flags19, align 1
  %conv20 = zext i8 %37 to i32
  %and21 = and i32 %conv20, -2
  %38 = load i32, i32* %flags.addr, align 4
  %and22 = and i32 %38, 1
  %conv23 = trunc i32 %and22 to i8
  %conv24 = zext i8 %conv23 to i32
  %or25 = or i32 %and21, %conv24
  %or26 = or i32 %or25, 8
  %conv27 = trunc i32 %or26 to i8
  %39 = load %struct.magic*, %struct.magic** %callmg, align 8
  %mg_flags28 = getelementptr inbounds %struct.magic, %struct.magic* %39, i32 0, i32 4
  store i8 %conv27, i8* %mg_flags28, align 1
  br label %if.end29

if.end29:                                         ; preds = %if.end18, %if.end
  ret void
}

declare dso_local void @Perl_mg_free_type(%struct.sv*, i32) #3

declare dso_local void @Perl_sv_magic(%struct.sv*, %struct.sv*, i32, i8*, i32) #3

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_ck_subr(%struct.op* %o) #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %o.addr = alloca %struct.op*, align 8
  %aop = alloca %struct.op*, align 8
  %cvop = alloca %struct.op*, align 8
  %cv = alloca %struct.cv*, align 8
  %namegv = alloca %struct.gv*, align 8
  %const_class = alloca %struct.sv**, align 8
  %sib = alloca %struct.op*, align 8
  %len = alloca i64, align 8
  %str = alloca i8*, align 8
  %shared = alloca %struct.sv*, align 8
  %ckfun = alloca %struct.op* (%struct.op*, %struct.gv*, %struct.sv*)*, align 8
  %ckobj = alloca %struct.sv*, align 8
  %flags = alloca i8, align 1
  store %struct.op* %o, %struct.op** %o.addr, align 8
  store %struct.sv** null, %struct.sv*** %const_class, align 8
  %0 = load %struct.op*, %struct.op** %o.addr, align 8
  %1 = bitcast %struct.op* %0 to %struct.unop*
  %op_first = getelementptr inbounds %struct.unop, %struct.unop* %1, i32 0, i32 7
  %2 = load %struct.op*, %struct.op** %op_first, align 8
  store %struct.op* %2, %struct.op** %aop, align 8
  %3 = load %struct.op*, %struct.op** %aop, align 8
  %op_sibling = getelementptr inbounds %struct.op, %struct.op* %3, i32 0, i32 1
  %4 = load %struct.op*, %struct.op** %op_sibling, align 8
  %tobool = icmp ne %struct.op* %4, null
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  br i1 true, label %if.end, label %if.then

cond.false:                                       ; preds = %entry
  br i1 false, label %if.end, label %if.then

if.then:                                          ; preds = %cond.false, %cond.true
  %5 = load %struct.op*, %struct.op** %aop, align 8
  %6 = bitcast %struct.op* %5 to %struct.unop*
  %op_first1 = getelementptr inbounds %struct.unop, %struct.unop* %6, i32 0, i32 7
  %7 = load %struct.op*, %struct.op** %op_first1, align 8
  store %struct.op* %7, %struct.op** %aop, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %cond.false, %cond.true
  %8 = load %struct.op*, %struct.op** %aop, align 8
  %op_sibling2 = getelementptr inbounds %struct.op, %struct.op* %8, i32 0, i32 1
  %9 = load %struct.op*, %struct.op** %op_sibling2, align 8
  %add.ptr = getelementptr inbounds %struct.op, %struct.op* %9, i64 0
  store %struct.op* %add.ptr, %struct.op** %aop, align 8
  %10 = load %struct.op*, %struct.op** %aop, align 8
  store %struct.op* %10, %struct.op** %cvop, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %11 = load %struct.op*, %struct.op** %cvop, align 8
  %op_sibling3 = getelementptr inbounds %struct.op, %struct.op* %11, i32 0, i32 1
  %12 = load %struct.op*, %struct.op** %op_sibling3, align 8
  %tobool4 = icmp ne %struct.op* %12, null
  %13 = zext i1 %tobool4 to i64
  %cond = select i1 %tobool4, i32 1, i32 0
  %tobool5 = icmp ne i32 %cond, 0
  br i1 %tobool5, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %14 = load %struct.op*, %struct.op** %cvop, align 8
  %op_sibling6 = getelementptr inbounds %struct.op, %struct.op* %14, i32 0, i32 1
  %15 = load %struct.op*, %struct.op** %op_sibling6, align 8
  %add.ptr7 = getelementptr inbounds %struct.op, %struct.op* %15, i64 0
  store %struct.op* %add.ptr7, %struct.op** %cvop, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %16 = load %struct.op*, %struct.op** %cvop, align 8
  %call = call %struct.cv* @Perl_rv2cv_op_cv(%struct.op* %16, i32 1)
  store %struct.cv* %call, %struct.cv** %cv, align 8
  %17 = load %struct.cv*, %struct.cv** %cv, align 8
  %tobool8 = icmp ne %struct.cv* %17, null
  br i1 %tobool8, label %cond.true9, label %cond.false11

cond.true9:                                       ; preds = %for.end
  %18 = load %struct.op*, %struct.op** %cvop, align 8
  %call10 = call %struct.cv* @Perl_rv2cv_op_cv(%struct.op* %18, i32 8)
  %19 = bitcast %struct.cv* %call10 to %struct.gv*
  br label %cond.end

cond.false11:                                     ; preds = %for.end
  br label %cond.end

cond.end:                                         ; preds = %cond.false11, %cond.true9
  %cond12 = phi %struct.gv* [ %19, %cond.true9 ], [ null, %cond.false11 ]
  store %struct.gv* %cond12, %struct.gv** %namegv, align 8
  %20 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_private = getelementptr inbounds %struct.op, %struct.op* %20, i32 0, i32 6
  %21 = load i8, i8* %op_private, align 1
  %conv = zext i8 %21 to i32
  %and = and i32 %conv, -2
  %conv13 = trunc i32 %and to i8
  store i8 %conv13, i8* %op_private, align 1
  %22 = load i32, i32* getelementptr inbounds (%struct.cop, %struct.cop* @PL_compiling, i32 0, i32 10), align 8
  %and14 = and i32 %22, 2
  %23 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_private15 = getelementptr inbounds %struct.op, %struct.op* %23, i32 0, i32 6
  %24 = load i8, i8* %op_private15, align 1
  %conv16 = zext i8 %24 to i32
  %or = or i32 %conv16, %and14
  %conv17 = trunc i32 %or to i8
  store i8 %conv17, i8* %op_private15, align 1
  %25 = load i32, i32* @PL_perldb, align 4
  %and18 = and i32 %25, 1
  %tobool19 = icmp ne i32 %and18, 0
  br i1 %tobool19, label %land.lhs.true, label %if.end26

land.lhs.true:                                    ; preds = %cond.end
  %26 = load %struct.hv*, %struct.hv** @PL_curstash, align 8
  %27 = load %struct.hv*, %struct.hv** @PL_debstash, align 8
  %cmp = icmp ne %struct.hv* %26, %27
  br i1 %cmp, label %if.then21, label %if.end26

if.then21:                                        ; preds = %land.lhs.true
  %28 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_private22 = getelementptr inbounds %struct.op, %struct.op* %28, i32 0, i32 6
  %29 = load i8, i8* %op_private22, align 1
  %conv23 = zext i8 %29 to i32
  %or24 = or i32 %conv23, 64
  %conv25 = trunc i32 %or24 to i8
  store i8 %conv25, i8* %op_private22, align 1
  br label %if.end26

if.end26:                                         ; preds = %if.then21, %land.lhs.true, %cond.end
  %30 = load %struct.op*, %struct.op** %cvop, align 8
  %op_type = getelementptr inbounds %struct.op, %struct.op* %30, i32 0, i32 4
  %bf.load = load i16, i16* %op_type, align 8
  %bf.clear = and i16 %bf.load, 511
  %bf.cast = zext i16 %bf.clear to i32
  switch i32 %bf.cast, label %sw.epilog [
    i32 17, label %sw.bb
    i32 184, label %sw.bb34
    i32 210, label %sw.bb34
    i32 211, label %sw.bb34
    i32 212, label %sw.bb34
    i32 213, label %sw.bb34
  ]

sw.bb:                                            ; preds = %if.end26
  %31 = load %struct.op*, %struct.op** %cvop, align 8
  %op_private27 = getelementptr inbounds %struct.op, %struct.op* %31, i32 0, i32 6
  %32 = load i8, i8* %op_private27, align 1
  %conv28 = zext i8 %32 to i32
  %and29 = and i32 %conv28, 8
  %33 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_private30 = getelementptr inbounds %struct.op, %struct.op* %33, i32 0, i32 6
  %34 = load i8, i8* %op_private30, align 1
  %conv31 = zext i8 %34 to i32
  %or32 = or i32 %conv31, %and29
  %conv33 = trunc i32 %or32 to i8
  store i8 %conv33, i8* %op_private30, align 1
  %35 = load %struct.op*, %struct.op** %cvop, align 8
  call void @Perl_op_null(%struct.op* %35)
  br label %sw.epilog

sw.bb34:                                          ; preds = %if.end26, %if.end26, %if.end26, %if.end26, %if.end26
  %36 = load %struct.op*, %struct.op** %aop, align 8
  %op_type35 = getelementptr inbounds %struct.op, %struct.op* %36, i32 0, i32 4
  %bf.load36 = load i16, i16* %op_type35, align 8
  %bf.clear37 = and i16 %bf.load36, 511
  %bf.cast38 = zext i16 %bf.clear37 to i32
  %cmp39 = icmp eq i32 %bf.cast38, 5
  br i1 %cmp39, label %if.then41, label %if.else

if.then41:                                        ; preds = %sw.bb34
  %37 = load %struct.op*, %struct.op** %aop, align 8
  %op_private42 = getelementptr inbounds %struct.op, %struct.op* %37, i32 0, i32 6
  %38 = load i8, i8* %op_private42, align 1
  %conv43 = zext i8 %38 to i32
  %and44 = and i32 %conv43, -9
  %conv45 = trunc i32 %and44 to i8
  store i8 %conv45, i8* %op_private42, align 1
  %39 = load %struct.op*, %struct.op** %aop, align 8
  %40 = bitcast %struct.op* %39 to %struct.svop*
  %op_sv = getelementptr inbounds %struct.svop, %struct.svop* %40, i32 0, i32 7
  store %struct.sv** %op_sv, %struct.sv*** %const_class, align 8
  br label %if.end72

if.else:                                          ; preds = %sw.bb34
  %41 = load %struct.op*, %struct.op** %aop, align 8
  %op_type46 = getelementptr inbounds %struct.op, %struct.op* %41, i32 0, i32 4
  %bf.load47 = load i16, i16* %op_type46, align 8
  %bf.clear48 = and i16 %bf.load47, 511
  %bf.cast49 = zext i16 %bf.clear48 to i32
  %cmp50 = icmp eq i32 %bf.cast49, 158
  br i1 %cmp50, label %if.then52, label %if.end71

if.then52:                                        ; preds = %if.else
  %42 = load %struct.op*, %struct.op** %aop, align 8
  %43 = bitcast %struct.op* %42 to %struct.unop*
  %op_first53 = getelementptr inbounds %struct.unop, %struct.unop* %43, i32 0, i32 7
  %44 = load %struct.op*, %struct.op** %op_first53, align 8
  %op_sibling54 = getelementptr inbounds %struct.op, %struct.op* %44, i32 0, i32 1
  %45 = load %struct.op*, %struct.op** %op_sibling54, align 8
  %add.ptr55 = getelementptr inbounds %struct.op, %struct.op* %45, i64 0
  store %struct.op* %add.ptr55, %struct.op** %sib, align 8
  %46 = load %struct.op*, %struct.op** %sib, align 8
  %tobool56 = icmp ne %struct.op* %46, null
  br i1 %tobool56, label %land.lhs.true57, label %if.end70

land.lhs.true57:                                  ; preds = %if.then52
  %47 = load %struct.op*, %struct.op** %sib, align 8
  %op_type58 = getelementptr inbounds %struct.op, %struct.op* %47, i32 0, i32 4
  %bf.load59 = load i16, i16* %op_type58, align 8
  %bf.clear60 = and i16 %bf.load59, 511
  %bf.cast61 = zext i16 %bf.clear60 to i32
  %cmp62 = icmp eq i32 %bf.cast61, 5
  br i1 %cmp62, label %if.then64, label %if.end70

if.then64:                                        ; preds = %land.lhs.true57
  %48 = load %struct.op*, %struct.op** %sib, align 8
  %op_private65 = getelementptr inbounds %struct.op, %struct.op* %48, i32 0, i32 6
  %49 = load i8, i8* %op_private65, align 1
  %conv66 = zext i8 %49 to i32
  %and67 = and i32 %conv66, -9
  %conv68 = trunc i32 %and67 to i8
  store i8 %conv68, i8* %op_private65, align 1
  %50 = load %struct.op*, %struct.op** %sib, align 8
  %51 = bitcast %struct.op* %50 to %struct.svop*
  %op_sv69 = getelementptr inbounds %struct.svop, %struct.svop* %51, i32 0, i32 7
  store %struct.sv** %op_sv69, %struct.sv*** %const_class, align 8
  br label %if.end70

if.end70:                                         ; preds = %if.then64, %land.lhs.true57, %if.then52
  br label %if.end71

if.end71:                                         ; preds = %if.end70, %if.else
  br label %if.end72

if.end72:                                         ; preds = %if.end71, %if.then41
  %52 = load %struct.sv**, %struct.sv*** %const_class, align 8
  %tobool73 = icmp ne %struct.sv** %52, null
  br i1 %tobool73, label %land.lhs.true74, label %if.end106

land.lhs.true74:                                  ; preds = %if.end72
  %53 = load %struct.sv**, %struct.sv*** %const_class, align 8
  %54 = load %struct.sv*, %struct.sv** %53, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %54, i32 0, i32 2
  %55 = load i32, i32* %sv_flags, align 4
  %and75 = and i32 %55, 1024
  %tobool76 = icmp ne i32 %and75, 0
  br i1 %tobool76, label %if.then77, label %if.end106

if.then77:                                        ; preds = %land.lhs.true74
  %56 = load %struct.sv**, %struct.sv*** %const_class, align 8
  %57 = load %struct.sv*, %struct.sv** %56, align 8
  %sv_flags78 = getelementptr inbounds %struct.sv, %struct.sv* %57, i32 0, i32 2
  %58 = load i32, i32* %sv_flags78, align 4
  %and79 = and i32 %58, 2098176
  %cmp80 = icmp eq i32 %and79, 1024
  br i1 %cmp80, label %cond.true82, label %cond.false83

cond.true82:                                      ; preds = %if.then77
  %59 = load %struct.sv**, %struct.sv*** %const_class, align 8
  %60 = load %struct.sv*, %struct.sv** %59, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %60, i32 0, i32 0
  %61 = load i8*, i8** %sv_any, align 8
  %62 = bitcast i8* %61 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %62, i32 0, i32 2
  %63 = load i64, i64* %xpv_cur, align 8
  store i64 %63, i64* %len, align 8
  %64 = load %struct.sv**, %struct.sv*** %const_class, align 8
  %65 = load %struct.sv*, %struct.sv** %64, align 8
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %65, i32 0, i32 3
  %svu_pv = bitcast %union.anon* %sv_u to i8**
  %66 = load i8*, i8** %svu_pv, align 8
  br label %cond.end85

cond.false83:                                     ; preds = %if.then77
  %67 = load %struct.sv**, %struct.sv*** %const_class, align 8
  %68 = load %struct.sv*, %struct.sv** %67, align 8
  %call84 = call i8* @Perl_sv_2pv_flags(%struct.sv* %68, i64* %len, i32 2)
  br label %cond.end85

cond.end85:                                       ; preds = %cond.false83, %cond.true82
  %cond86 = phi i8* [ %66, %cond.true82 ], [ %call84, %cond.false83 ]
  store i8* %cond86, i8** %str, align 8
  %69 = load i64, i64* %len, align 8
  %tobool87 = icmp ne i64 %69, 0
  br i1 %tobool87, label %if.then88, label %if.end105

if.then88:                                        ; preds = %cond.end85
  %70 = load i8*, i8** %str, align 8
  %71 = load %struct.sv**, %struct.sv*** %const_class, align 8
  %72 = load %struct.sv*, %struct.sv** %71, align 8
  %sv_flags89 = getelementptr inbounds %struct.sv, %struct.sv* %72, i32 0, i32 2
  %73 = load i32, i32* %sv_flags89, align 4
  %and90 = and i32 %73, 536870912
  %tobool91 = icmp ne i32 %and90, 0
  br i1 %tobool91, label %cond.true92, label %cond.false93

cond.true92:                                      ; preds = %if.then88
  %74 = load i64, i64* %len, align 8
  %sub = sub nsw i64 0, %74
  br label %cond.end94

cond.false93:                                     ; preds = %if.then88
  %75 = load i64, i64* %len, align 8
  br label %cond.end94

cond.end94:                                       ; preds = %cond.false93, %cond.true92
  %cond95 = phi i64 [ %sub, %cond.true92 ], [ %75, %cond.false93 ]
  %conv96 = trunc i64 %cond95 to i32
  %call97 = call %struct.sv* @Perl_newSVpvn_share(i8* %70, i32 %conv96, i32 0)
  store %struct.sv* %call97, %struct.sv** %shared, align 8
  %76 = load %struct.sv**, %struct.sv*** %const_class, align 8
  %77 = load %struct.sv*, %struct.sv** %76, align 8
  %sv_flags98 = getelementptr inbounds %struct.sv, %struct.sv* %77, i32 0, i32 2
  %78 = load i32, i32* %sv_flags98, align 4
  %and99 = and i32 %78, 134283264
  %tobool100 = icmp ne i32 %and99, 0
  br i1 %tobool100, label %if.then101, label %if.end104

if.then101:                                       ; preds = %cond.end94
  %79 = load %struct.sv*, %struct.sv** %shared, align 8
  %sv_flags102 = getelementptr inbounds %struct.sv, %struct.sv* %79, i32 0, i32 2
  %80 = load i32, i32* %sv_flags102, align 4
  %or103 = or i32 %80, 134283264
  store i32 %or103, i32* %sv_flags102, align 4
  br label %if.end104

if.end104:                                        ; preds = %if.then101, %cond.end94
  %81 = load %struct.sv**, %struct.sv*** %const_class, align 8
  %82 = load %struct.sv*, %struct.sv** %81, align 8
  %83 = bitcast %struct.sv* %82 to i8*
  %84 = bitcast i8* %83 to %struct.sv*
  call void @S_SvREFCNT_dec(%struct.sv* %84)
  %85 = load %struct.sv*, %struct.sv** %shared, align 8
  %86 = load %struct.sv**, %struct.sv*** %const_class, align 8
  store %struct.sv* %85, %struct.sv** %86, align 8
  br label %if.end105

if.end105:                                        ; preds = %if.end104, %cond.end85
  br label %if.end106

if.end106:                                        ; preds = %if.end105, %land.lhs.true74, %if.end72
  br label %sw.epilog

sw.epilog:                                        ; preds = %if.end26, %if.end106, %sw.bb
  %87 = load %struct.cv*, %struct.cv** %cv, align 8
  %tobool107 = icmp ne %struct.cv* %87, null
  br i1 %tobool107, label %if.else110, label %if.then108

if.then108:                                       ; preds = %sw.epilog
  %88 = load %struct.op*, %struct.op** %o.addr, align 8
  call void @S_entersub_alloc_targ(%struct.op* %88)
  %89 = load %struct.op*, %struct.op** %o.addr, align 8
  %call109 = call %struct.op* @Perl_ck_entersub_args_list(%struct.op* %89)
  store %struct.op* %call109, %struct.op** %retval, align 8
  br label %return

if.else110:                                       ; preds = %sw.epilog
  %90 = load %struct.cv*, %struct.cv** %cv, align 8
  call void @S_cv_get_call_checker(%struct.cv* %90, %struct.op* (%struct.op*, %struct.gv*, %struct.sv*)** %ckfun, %struct.sv** %ckobj, i8* %flags)
  %91 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any111 = getelementptr inbounds %struct.cv, %struct.cv* %91, i32 0, i32 0
  %92 = load %struct.xpvcv*, %struct.xpvcv** %sv_any111, align 8
  %93 = bitcast %struct.xpvcv* %92 to i8*
  %94 = bitcast i8* %93 to %struct.xpvcv*
  %xcv_flags = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %94, i32 0, i32 12
  %95 = load i32, i32* %xcv_flags, align 4
  %and112 = and i32 %95, 8
  %tobool113 = icmp ne i32 %and112, 0
  br i1 %tobool113, label %if.then116, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.else110
  %96 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any114 = getelementptr inbounds %struct.cv, %struct.cv* %96, i32 0, i32 0
  %97 = load %struct.xpvcv*, %struct.xpvcv** %sv_any114, align 8
  %98 = bitcast %struct.xpvcv* %97 to i8*
  %99 = bitcast i8* %98 to %struct.xpvcv*
  %xcv_root_u = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %99, i32 0, i32 6
  %xcv_root = bitcast %union.anon.7* %xcv_root_u to %struct.op**
  %100 = load %struct.op*, %struct.op** %xcv_root, align 8
  %tobool115 = icmp ne %struct.op* %100, null
  br i1 %tobool115, label %if.end117, label %if.then116

if.then116:                                       ; preds = %lor.lhs.false, %if.else110
  %101 = load %struct.op*, %struct.op** %o.addr, align 8
  call void @S_entersub_alloc_targ(%struct.op* %101)
  br label %if.end117

if.end117:                                        ; preds = %if.then116, %lor.lhs.false
  %102 = load %struct.gv*, %struct.gv** %namegv, align 8
  %tobool118 = icmp ne %struct.gv* %102, null
  br i1 %tobool118, label %if.end145, label %if.then119

if.then119:                                       ; preds = %if.end117
  %103 = load i8, i8* %flags, align 1
  %conv120 = zext i8 %103 to i32
  %and121 = and i32 %conv120, 1
  %tobool122 = icmp ne i32 %and121, 0
  br i1 %tobool122, label %if.then123, label %if.else139

if.then123:                                       ; preds = %if.then119
  %104 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any124 = getelementptr inbounds %struct.cv, %struct.cv* %104, i32 0, i32 0
  %105 = load %struct.xpvcv*, %struct.xpvcv** %sv_any124, align 8
  %106 = bitcast %struct.xpvcv* %105 to i8*
  %107 = bitcast i8* %106 to %struct.xpvcv*
  %xcv_flags125 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %107, i32 0, i32 12
  %108 = load i32, i32* %xcv_flags125, align 4
  %and126 = and i32 %108, 128
  %tobool127 = icmp ne i32 %and126, 0
  br i1 %tobool127, label %if.end138, label %land.lhs.true128

land.lhs.true128:                                 ; preds = %if.then123
  %109 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any129 = getelementptr inbounds %struct.cv, %struct.cv* %109, i32 0, i32 0
  %110 = load %struct.xpvcv*, %struct.xpvcv** %sv_any129, align 8
  %111 = bitcast %struct.xpvcv* %110 to i8*
  %112 = bitcast i8* %111 to %struct.xpvcv*
  %xcv_flags130 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %112, i32 0, i32 12
  %113 = load i32, i32* %xcv_flags130, align 4
  %and131 = and i32 %113, 32768
  %tobool132 = icmp ne i32 %and131, 0
  br i1 %tobool132, label %lor.lhs.false133, label %if.then136

lor.lhs.false133:                                 ; preds = %land.lhs.true128
  %114 = load %struct.cv*, %struct.cv** %cv, align 8
  %call134 = call %struct.hek* @CvNAME_HEK(%struct.cv* %114)
  %tobool135 = icmp ne %struct.hek* %call134, null
  br i1 %tobool135, label %if.then136, label %if.end138

if.then136:                                       ; preds = %lor.lhs.false133, %land.lhs.true128
  %115 = load %struct.cv*, %struct.cv** %cv, align 8
  %call137 = call %struct.gv* @S_CvGV(%struct.cv* %115)
  store %struct.gv* %call137, %struct.gv** %namegv, align 8
  br label %if.end138

if.end138:                                        ; preds = %if.then136, %lor.lhs.false133, %if.then123
  br label %if.end140

if.else139:                                       ; preds = %if.then119
  %116 = load %struct.cv*, %struct.cv** %cv, align 8
  %117 = bitcast %struct.cv* %116 to i8*
  %118 = bitcast i8* %117 to %struct.gv*
  store %struct.gv* %118, %struct.gv** %namegv, align 8
  br label %if.end140

if.end140:                                        ; preds = %if.else139, %if.end138
  %119 = load %struct.gv*, %struct.gv** %namegv, align 8
  %tobool141 = icmp ne %struct.gv* %119, null
  br i1 %tobool141, label %if.end144, label %if.then142

if.then142:                                       ; preds = %if.end140
  %120 = load %struct.op*, %struct.op** %o.addr, align 8
  %call143 = call %struct.op* @Perl_ck_entersub_args_list(%struct.op* %120)
  store %struct.op* %call143, %struct.op** %retval, align 8
  br label %return

if.end144:                                        ; preds = %if.end140
  br label %if.end145

if.end145:                                        ; preds = %if.end144, %if.end117
  %121 = load %struct.op* (%struct.op*, %struct.gv*, %struct.sv*)*, %struct.op* (%struct.op*, %struct.gv*, %struct.sv*)** %ckfun, align 8
  %122 = load %struct.op*, %struct.op** %o.addr, align 8
  %123 = load %struct.gv*, %struct.gv** %namegv, align 8
  %124 = load %struct.sv*, %struct.sv** %ckobj, align 8
  %call146 = call %struct.op* %121(%struct.op* %122, %struct.gv* %123, %struct.sv* %124)
  store %struct.op* %call146, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %if.end145, %if.then142, %if.then108
  %125 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %125
}

; Function Attrs: noinline nounwind uwtable
define internal void @S_entersub_alloc_targ(%struct.op* %o) #0 {
entry:
  %o.addr = alloca %struct.op*, align 8
  store %struct.op* %o, %struct.op** %o.addr, align 8
  %call = call i64 @Perl_pad_alloc(i32 185, i32 131072)
  %0 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_targ = getelementptr inbounds %struct.op, %struct.op* %0, i32 0, i32 3
  store i64 %call, i64* %op_targ, align 8
  %1 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_private = getelementptr inbounds %struct.op, %struct.op* %1, i32 0, i32 6
  %2 = load i8, i8* %op_private, align 1
  %conv = zext i8 %2 to i32
  %or = or i32 %conv, 4
  %conv1 = trunc i32 %or to i8
  store i8 %conv1, i8* %op_private, align 1
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_ck_svconst(%struct.op* %o) #0 {
entry:
  %o.addr = alloca %struct.op*, align 8
  %sv = alloca %struct.sv*, align 8
  store %struct.op* %o, %struct.op** %o.addr, align 8
  %0 = load %struct.op*, %struct.op** %o.addr, align 8
  %1 = bitcast %struct.op* %0 to %struct.svop*
  %op_sv = getelementptr inbounds %struct.svop, %struct.svop* %1, i32 0, i32 7
  %2 = load %struct.sv*, %struct.sv** %op_sv, align 8
  store %struct.sv* %2, %struct.sv** %sv, align 8
  %3 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %3, i32 0, i32 2
  %4 = load i32, i32* %sv_flags, align 4
  %and = and i32 %4, 134283264
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.end, label %land.lhs.true

land.lhs.true:                                    ; preds = %entry
  %5 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags1 = getelementptr inbounds %struct.sv, %struct.sv* %5, i32 0, i32 2
  %6 = load i32, i32* %sv_flags1, align 4
  %and2 = and i32 %6, 268435456
  %tobool3 = icmp ne i32 %and2, 0
  br i1 %tobool3, label %if.end, label %land.lhs.true4

land.lhs.true4:                                   ; preds = %land.lhs.true
  %7 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags5 = getelementptr inbounds %struct.sv, %struct.sv* %7, i32 0, i32 2
  %8 = load i32, i32* %sv_flags5, align 4
  %and6 = and i32 %8, 268435456
  %tobool7 = icmp ne i32 %and6, 0
  br i1 %tobool7, label %cond.true, label %cond.false15

cond.true:                                        ; preds = %land.lhs.true4
  %9 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %9, i32 0, i32 0
  %10 = load i8*, i8** %sv_any, align 8
  %11 = bitcast i8* %10 to %struct.xpv*
  %xpv_len_u = getelementptr inbounds %struct.xpv, %struct.xpv* %11, i32 0, i32 3
  %xpvlenu_len = bitcast %union.anon.21* %xpv_len_u to i64*
  %12 = load i64, i64* %xpvlenu_len, align 8
  %tobool8 = icmp ne i64 %12, 0
  br i1 %tobool8, label %cond.true9, label %cond.false

cond.true9:                                       ; preds = %cond.true
  %13 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %13, i32 0, i32 3
  %svu_pv = bitcast %union.anon* %sv_u to i8**
  %14 = load i8*, i8** %svu_pv, align 8
  %15 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any10 = getelementptr inbounds %struct.sv, %struct.sv* %15, i32 0, i32 0
  %16 = load i8*, i8** %sv_any10, align 8
  %17 = bitcast i8* %16 to %struct.xpv*
  %xpv_len_u11 = getelementptr inbounds %struct.xpv, %struct.xpv* %17, i32 0, i32 3
  %xpvlenu_len12 = bitcast %union.anon.21* %xpv_len_u11 to i64*
  %18 = load i64, i64* %xpvlenu_len12, align 8
  %add.ptr = getelementptr inbounds i8, i8* %14, i64 %18
  %add.ptr13 = getelementptr inbounds i8, i8* %add.ptr, i64 -1
  %19 = load i8, i8* %add.ptr13, align 1
  %conv = zext i8 %19 to i32
  %cmp = icmp ne i32 %conv, 255
  br i1 %cmp, label %if.then, label %if.end

cond.false:                                       ; preds = %cond.true
  br i1 true, label %if.then, label %if.end

cond.false15:                                     ; preds = %land.lhs.true4
  %20 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags16 = getelementptr inbounds %struct.sv, %struct.sv* %20, i32 0, i32 2
  %21 = load i32, i32* %sv_flags16, align 4
  %and17 = and i32 %21, 251743232
  %cmp18 = icmp eq i32 %and17, 17408
  br i1 %cmp18, label %land.lhs.true20, label %if.end

land.lhs.true20:                                  ; preds = %cond.false15
  %22 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any21 = getelementptr inbounds %struct.sv, %struct.sv* %22, i32 0, i32 0
  %23 = load i8*, i8** %sv_any21, align 8
  %24 = bitcast i8* %23 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %24, i32 0, i32 2
  %25 = load i64, i64* %xpv_cur, align 8
  %add = add i64 %25, 1
  %26 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any22 = getelementptr inbounds %struct.sv, %struct.sv* %26, i32 0, i32 0
  %27 = load i8*, i8** %sv_any22, align 8
  %28 = bitcast i8* %27 to %struct.xpv*
  %xpv_len_u23 = getelementptr inbounds %struct.xpv, %struct.xpv* %28, i32 0, i32 3
  %xpvlenu_len24 = bitcast %union.anon.21* %xpv_len_u23 to i64*
  %29 = load i64, i64* %xpvlenu_len24, align 8
  %cmp25 = icmp ult i64 %add, %29
  br i1 %cmp25, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true20, %cond.false, %cond.true9
  %30 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags27 = getelementptr inbounds %struct.sv, %struct.sv* %30, i32 0, i32 2
  %31 = load i32, i32* %sv_flags27, align 4
  %or = or i32 %31, 268435456
  store i32 %or, i32* %sv_flags27, align 4
  %32 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_u28 = getelementptr inbounds %struct.sv, %struct.sv* %32, i32 0, i32 3
  %svu_pv29 = bitcast %union.anon* %sv_u28 to i8**
  %33 = load i8*, i8** %svu_pv29, align 8
  %34 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any30 = getelementptr inbounds %struct.sv, %struct.sv* %34, i32 0, i32 0
  %35 = load i8*, i8** %sv_any30, align 8
  %36 = bitcast i8* %35 to %struct.xpv*
  %xpv_len_u31 = getelementptr inbounds %struct.xpv, %struct.xpv* %36, i32 0, i32 3
  %xpvlenu_len32 = bitcast %union.anon.21* %xpv_len_u31 to i64*
  %37 = load i64, i64* %xpvlenu_len32, align 8
  %add.ptr33 = getelementptr inbounds i8, i8* %33, i64 %37
  %add.ptr34 = getelementptr inbounds i8, i8* %add.ptr33, i64 -1
  store i8 0, i8* %add.ptr34, align 1
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true20, %cond.false15, %cond.false, %cond.true9, %land.lhs.true, %entry
  %38 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags35 = getelementptr inbounds %struct.sv, %struct.sv* %38, i32 0, i32 2
  %39 = load i32, i32* %sv_flags35, align 4
  %or36 = or i32 %39, 134283264
  store i32 %or36, i32* %sv_flags35, align 4
  %40 = load %struct.op*, %struct.op** %o.addr, align 8
  ret %struct.op* %40
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_ck_trunc(%struct.op* %o) #0 {
entry:
  %o.addr = alloca %struct.op*, align 8
  %kid = alloca %struct.svop*, align 8
  store %struct.op* %o, %struct.op** %o.addr, align 8
  %0 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %0, i32 0, i32 5
  %1 = load i8, i8* %op_flags, align 2
  %conv = zext i8 %1 to i32
  %and = and i32 %conv, 4
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.end28

if.then:                                          ; preds = %entry
  %2 = load %struct.op*, %struct.op** %o.addr, align 8
  %3 = bitcast %struct.op* %2 to %struct.unop*
  %op_first = getelementptr inbounds %struct.unop, %struct.unop* %3, i32 0, i32 7
  %4 = load %struct.op*, %struct.op** %op_first, align 8
  %5 = bitcast %struct.op* %4 to %struct.svop*
  store %struct.svop* %5, %struct.svop** %kid, align 8
  %6 = load %struct.svop*, %struct.svop** %kid, align 8
  %op_type = getelementptr inbounds %struct.svop, %struct.svop* %6, i32 0, i32 4
  %bf.load = load i16, i16* %op_type, align 8
  %bf.clear = and i16 %bf.load, 511
  %bf.cast = zext i16 %bf.clear to i32
  %cmp = icmp eq i32 %bf.cast, 0
  br i1 %cmp, label %if.then2, label %if.end

if.then2:                                         ; preds = %if.then
  %7 = load %struct.svop*, %struct.svop** %kid, align 8
  %op_sibling = getelementptr inbounds %struct.svop, %struct.svop* %7, i32 0, i32 1
  %8 = load %struct.op*, %struct.op** %op_sibling, align 8
  %add.ptr = getelementptr inbounds %struct.op, %struct.op* %8, i64 0
  %9 = bitcast %struct.op* %add.ptr to %struct.svop*
  store %struct.svop* %9, %struct.svop** %kid, align 8
  br label %if.end

if.end:                                           ; preds = %if.then2, %if.then
  %10 = load %struct.svop*, %struct.svop** %kid, align 8
  %tobool3 = icmp ne %struct.svop* %10, null
  br i1 %tobool3, label %land.lhs.true, label %if.end27

land.lhs.true:                                    ; preds = %if.end
  %11 = load %struct.svop*, %struct.svop** %kid, align 8
  %op_type4 = getelementptr inbounds %struct.svop, %struct.svop* %11, i32 0, i32 4
  %bf.load5 = load i16, i16* %op_type4, align 8
  %bf.clear6 = and i16 %bf.load5, 511
  %bf.cast7 = zext i16 %bf.clear6 to i32
  %cmp8 = icmp eq i32 %bf.cast7, 5
  br i1 %cmp8, label %land.lhs.true10, label %if.end27

land.lhs.true10:                                  ; preds = %land.lhs.true
  %12 = load %struct.svop*, %struct.svop** %kid, align 8
  %op_private = getelementptr inbounds %struct.svop, %struct.svop* %12, i32 0, i32 6
  %13 = load i8, i8* %op_private, align 1
  %conv11 = zext i8 %13 to i32
  %and12 = and i32 %conv11, 64
  %tobool13 = icmp ne i32 %and12, 0
  br i1 %tobool13, label %land.lhs.true14, label %if.end27

land.lhs.true14:                                  ; preds = %land.lhs.true10
  %14 = load %struct.svop*, %struct.svop** %kid, align 8
  %op_folded = getelementptr inbounds %struct.svop, %struct.svop* %14, i32 0, i32 4
  %bf.load15 = load i16, i16* %op_folded, align 8
  %bf.lshr = lshr i16 %bf.load15, 13
  %bf.clear16 = and i16 %bf.lshr, 1
  %bf.cast17 = zext i16 %bf.clear16 to i32
  %tobool18 = icmp ne i32 %bf.cast17, 0
  br i1 %tobool18, label %if.end27, label %if.then19

if.then19:                                        ; preds = %land.lhs.true14
  %15 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_flags20 = getelementptr inbounds %struct.op, %struct.op* %15, i32 0, i32 5
  %16 = load i8, i8* %op_flags20, align 2
  %conv21 = zext i8 %16 to i32
  %or = or i32 %conv21, 128
  %conv22 = trunc i32 %or to i8
  store i8 %conv22, i8* %op_flags20, align 2
  %17 = load %struct.svop*, %struct.svop** %kid, align 8
  %op_private23 = getelementptr inbounds %struct.svop, %struct.svop* %17, i32 0, i32 6
  %18 = load i8, i8* %op_private23, align 1
  %conv24 = zext i8 %18 to i32
  %and25 = and i32 %conv24, -9
  %conv26 = trunc i32 %and25 to i8
  store i8 %conv26, i8* %op_private23, align 1
  br label %if.end27

if.end27:                                         ; preds = %if.then19, %land.lhs.true14, %land.lhs.true10, %land.lhs.true, %if.end
  br label %if.end28

if.end28:                                         ; preds = %if.end27, %entry
  %19 = load %struct.op*, %struct.op** %o.addr, align 8
  %call = call %struct.op* @Perl_ck_fun(%struct.op* %19)
  ret %struct.op* %call
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_ck_substr(%struct.op* %o) #0 {
entry:
  %o.addr = alloca %struct.op*, align 8
  %kid = alloca %struct.op*, align 8
  store %struct.op* %o, %struct.op** %o.addr, align 8
  %0 = load %struct.op*, %struct.op** %o.addr, align 8
  %call = call %struct.op* @Perl_ck_fun(%struct.op* %0)
  store %struct.op* %call, %struct.op** %o.addr, align 8
  %1 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %1, i32 0, i32 5
  %2 = load i8, i8* %op_flags, align 2
  %conv = zext i8 %2 to i32
  %and = and i32 %conv, 4
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %land.lhs.true, label %if.end12

land.lhs.true:                                    ; preds = %entry
  %3 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_private = getelementptr inbounds %struct.op, %struct.op* %3, i32 0, i32 6
  %4 = load i8, i8* %op_private, align 1
  %conv1 = zext i8 %4 to i32
  %cmp = icmp eq i32 %conv1, 4
  br i1 %cmp, label %if.then, label %if.end12

if.then:                                          ; preds = %land.lhs.true
  %5 = load %struct.op*, %struct.op** %o.addr, align 8
  %6 = bitcast %struct.op* %5 to %struct.listop*
  %op_first = getelementptr inbounds %struct.listop, %struct.listop* %6, i32 0, i32 7
  %7 = load %struct.op*, %struct.op** %op_first, align 8
  store %struct.op* %7, %struct.op** %kid, align 8
  %8 = load %struct.op*, %struct.op** %kid, align 8
  %op_type = getelementptr inbounds %struct.op, %struct.op* %8, i32 0, i32 4
  %bf.load = load i16, i16* %op_type, align 8
  %bf.clear = and i16 %bf.load, 511
  %bf.cast = zext i16 %bf.clear to i32
  %cmp3 = icmp eq i32 %bf.cast, 0
  br i1 %cmp3, label %if.then5, label %if.end

if.then5:                                         ; preds = %if.then
  %9 = load %struct.op*, %struct.op** %kid, align 8
  %op_sibling = getelementptr inbounds %struct.op, %struct.op* %9, i32 0, i32 1
  %10 = load %struct.op*, %struct.op** %op_sibling, align 8
  %add.ptr = getelementptr inbounds %struct.op, %struct.op* %10, i64 0
  store %struct.op* %add.ptr, %struct.op** %kid, align 8
  br label %if.end

if.end:                                           ; preds = %if.then5, %if.then
  %11 = load %struct.op*, %struct.op** %kid, align 8
  %tobool6 = icmp ne %struct.op* %11, null
  br i1 %tobool6, label %if.then7, label %if.end11

if.then7:                                         ; preds = %if.end
  %12 = load %struct.op*, %struct.op** %kid, align 8
  %op_flags8 = getelementptr inbounds %struct.op, %struct.op* %12, i32 0, i32 5
  %13 = load i8, i8* %op_flags8, align 2
  %conv9 = zext i8 %13 to i32
  %or = or i32 %conv9, 32
  %conv10 = trunc i32 %or to i8
  store i8 %conv10, i8* %op_flags8, align 2
  br label %if.end11

if.end11:                                         ; preds = %if.then7, %if.end
  br label %if.end12

if.end12:                                         ; preds = %if.end11, %land.lhs.true, %entry
  %14 = load %struct.op*, %struct.op** %o.addr, align 8
  ret %struct.op* %14
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_ck_tell(%struct.op* %o) #0 {
entry:
  %o.addr = alloca %struct.op*, align 8
  %kid = alloca %struct.op*, align 8
  store %struct.op* %o, %struct.op** %o.addr, align 8
  %0 = load %struct.op*, %struct.op** %o.addr, align 8
  %call = call %struct.op* @Perl_ck_fun(%struct.op* %0)
  store %struct.op* %call, %struct.op** %o.addr, align 8
  %1 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %1, i32 0, i32 5
  %2 = load i8, i8* %op_flags, align 2
  %conv = zext i8 %2 to i32
  %and = and i32 %conv, 4
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.end15

if.then:                                          ; preds = %entry
  %3 = load %struct.op*, %struct.op** %o.addr, align 8
  %4 = bitcast %struct.op* %3 to %struct.listop*
  %op_first = getelementptr inbounds %struct.listop, %struct.listop* %4, i32 0, i32 7
  %5 = load %struct.op*, %struct.op** %op_first, align 8
  store %struct.op* %5, %struct.op** %kid, align 8
  %6 = load %struct.op*, %struct.op** %kid, align 8
  %op_type = getelementptr inbounds %struct.op, %struct.op* %6, i32 0, i32 4
  %bf.load = load i16, i16* %op_type, align 8
  %bf.clear = and i16 %bf.load, 511
  %bf.cast = zext i16 %bf.clear to i32
  %cmp = icmp eq i32 %bf.cast, 0
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %if.then
  %7 = load %struct.op*, %struct.op** %kid, align 8
  %op_sibling = getelementptr inbounds %struct.op, %struct.op* %7, i32 0, i32 1
  %8 = load %struct.op*, %struct.op** %op_sibling, align 8
  %tobool2 = icmp ne %struct.op* %8, null
  br i1 %tobool2, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true
  br i1 true, label %if.then3, label %if.end

cond.false:                                       ; preds = %land.lhs.true
  br i1 false, label %if.then3, label %if.end

if.then3:                                         ; preds = %cond.false, %cond.true
  %9 = load %struct.op*, %struct.op** %kid, align 8
  %op_sibling4 = getelementptr inbounds %struct.op, %struct.op* %9, i32 0, i32 1
  %10 = load %struct.op*, %struct.op** %op_sibling4, align 8
  %add.ptr = getelementptr inbounds %struct.op, %struct.op* %10, i64 0
  store %struct.op* %add.ptr, %struct.op** %kid, align 8
  br label %if.end

if.end:                                           ; preds = %if.then3, %cond.false, %cond.true, %if.then
  %11 = load %struct.op*, %struct.op** %kid, align 8
  %op_type5 = getelementptr inbounds %struct.op, %struct.op* %11, i32 0, i32 4
  %bf.load6 = load i16, i16* %op_type5, align 8
  %bf.clear7 = and i16 %bf.load6, 511
  %bf.cast8 = zext i16 %bf.clear7 to i32
  %cmp9 = icmp eq i32 %bf.cast8, 14
  br i1 %cmp9, label %if.then11, label %if.end14

if.then11:                                        ; preds = %if.end
  %12 = load %struct.op*, %struct.op** %kid, align 8
  %op_private = getelementptr inbounds %struct.op, %struct.op* %12, i32 0, i32 6
  %13 = load i8, i8* %op_private, align 1
  %conv12 = zext i8 %13 to i32
  %or = or i32 %conv12, 64
  %conv13 = trunc i32 %or to i8
  store i8 %conv13, i8* %op_private, align 1
  br label %if.end14

if.end14:                                         ; preds = %if.then11, %if.end
  br label %if.end15

if.end15:                                         ; preds = %if.end14, %entry
  %14 = load %struct.op*, %struct.op** %o.addr, align 8
  ret %struct.op* %14
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_ck_each(%struct.op* %o) #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %o.addr = alloca %struct.op*, align 8
  %kid = alloca %struct.op*, align 8
  %orig_type = alloca i32, align 4
  %array_type = alloca i32, align 4
  %ref_type = alloca i32, align 4
  store %struct.op* %o, %struct.op** %o.addr, align 8
  %0 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %0, i32 0, i32 5
  %1 = load i8, i8* %op_flags, align 2
  %conv = zext i8 %1 to i32
  %and = and i32 %conv, 4
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %2 = load %struct.op*, %struct.op** %o.addr, align 8
  %3 = bitcast %struct.op* %2 to %struct.unop*
  %op_first = getelementptr inbounds %struct.unop, %struct.unop* %3, i32 0, i32 7
  %4 = load %struct.op*, %struct.op** %op_first, align 8
  br label %cond.end

cond.false:                                       ; preds = %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.op* [ %4, %cond.true ], [ null, %cond.false ]
  store %struct.op* %cond, %struct.op** %kid, align 8
  %5 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type = getelementptr inbounds %struct.op, %struct.op* %5, i32 0, i32 4
  %bf.load = load i16, i16* %op_type, align 8
  %bf.clear = and i16 %bf.load, 511
  %bf.cast = zext i16 %bf.clear to i32
  store i32 %bf.cast, i32* %orig_type, align 4
  %6 = load i32, i32* %orig_type, align 4
  %cmp = icmp eq i32 %6, 144
  br i1 %cmp, label %cond.true2, label %cond.false3

cond.true2:                                       ; preds = %cond.end
  br label %cond.end7

cond.false3:                                      ; preds = %cond.end
  %7 = load i32, i32* %orig_type, align 4
  %cmp4 = icmp eq i32 %7, 146
  %8 = zext i1 %cmp4 to i64
  %cond6 = select i1 %cmp4, i32 142, i32 143
  br label %cond.end7

cond.end7:                                        ; preds = %cond.false3, %cond.true2
  %cond8 = phi i32 [ 141, %cond.true2 ], [ %cond6, %cond.false3 ]
  store i32 %cond8, i32* %array_type, align 4
  %9 = load i32, i32* %orig_type, align 4
  %cmp9 = icmp eq i32 %9, 144
  br i1 %cmp9, label %cond.true11, label %cond.false12

cond.true11:                                      ; preds = %cond.end7
  br label %cond.end16

cond.false12:                                     ; preds = %cond.end7
  %10 = load i32, i32* %orig_type, align 4
  %cmp13 = icmp eq i32 %10, 146
  %11 = zext i1 %cmp13 to i64
  %cond15 = select i1 %cmp13, i32 382, i32 383
  br label %cond.end16

cond.end16:                                       ; preds = %cond.false12, %cond.true11
  %cond17 = phi i32 [ 381, %cond.true11 ], [ %cond15, %cond.false12 ]
  store i32 %cond17, i32* %ref_type, align 4
  %12 = load %struct.op*, %struct.op** %kid, align 8
  %tobool18 = icmp ne %struct.op* %12, null
  br i1 %tobool18, label %if.then, label %if.end62

if.then:                                          ; preds = %cond.end16
  %13 = load %struct.op*, %struct.op** %kid, align 8
  %op_type19 = getelementptr inbounds %struct.op, %struct.op* %13, i32 0, i32 4
  %bf.load20 = load i16, i16* %op_type19, align 8
  %bf.clear21 = and i16 %bf.load20, 511
  %bf.cast22 = zext i16 %bf.clear21 to i32
  switch i32 %bf.cast22, label %sw.default [
    i32 11, label %sw.bb
    i32 149, label %sw.bb
    i32 10, label %sw.bb23
    i32 135, label %sw.bb23
    i32 5, label %sw.bb29
  ]

sw.bb:                                            ; preds = %if.then, %if.then
  br label %sw.epilog

sw.bb23:                                          ; preds = %if.then, %if.then
  br label %do.body

do.body:                                          ; preds = %sw.bb23
  %14 = load i32, i32* %array_type, align 4
  %conv24 = trunc i32 %14 to i16
  %conv25 = zext i16 %conv24 to i32
  %15 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type26 = getelementptr inbounds %struct.op, %struct.op* %15, i32 0, i32 4
  %16 = trunc i32 %conv25 to i16
  %bf.load27 = load i16, i16* %op_type26, align 8
  %bf.value = and i16 %16, 511
  %bf.clear28 = and i16 %bf.load27, -512
  %bf.set = or i16 %bf.clear28, %bf.value
  store i16 %bf.set, i16* %op_type26, align 8
  %bf.result.cast = zext i16 %bf.value to i32
  %17 = load i32, i32* %array_type, align 4
  %idxprom = zext i32 %17 to i64
  %arrayidx = getelementptr inbounds [0 x %struct.op* ()*], [0 x %struct.op* ()*]* @PL_ppaddr, i64 0, i64 %idxprom
  %18 = load %struct.op* ()*, %struct.op* ()** %arrayidx, align 8
  %19 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_ppaddr = getelementptr inbounds %struct.op, %struct.op* %19, i32 0, i32 2
  store %struct.op* ()* %18, %struct.op* ()** %op_ppaddr, align 8
  br label %do.end

do.end:                                           ; preds = %do.body
  br label %sw.epilog

sw.bb29:                                          ; preds = %if.then
  %20 = load %struct.op*, %struct.op** %kid, align 8
  %op_private = getelementptr inbounds %struct.op, %struct.op* %20, i32 0, i32 6
  %21 = load i8, i8* %op_private, align 1
  %conv30 = zext i8 %21 to i32
  %cmp31 = icmp eq i32 %conv30, 64
  br i1 %cmp31, label %if.then48, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %sw.bb29
  %22 = load %struct.op*, %struct.op** %kid, align 8
  %23 = bitcast %struct.op* %22 to %struct.svop*
  %op_sv = getelementptr inbounds %struct.svop, %struct.svop* %23, i32 0, i32 7
  %24 = load %struct.sv*, %struct.sv** %op_sv, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %24, i32 0, i32 2
  %25 = load i32, i32* %sv_flags, align 4
  %and33 = and i32 %25, 2048
  %tobool34 = icmp ne i32 %and33, 0
  br i1 %tobool34, label %lor.lhs.false35, label %if.then48

lor.lhs.false35:                                  ; preds = %lor.lhs.false
  %26 = load %struct.op*, %struct.op** %kid, align 8
  %27 = bitcast %struct.op* %26 to %struct.svop*
  %op_sv36 = getelementptr inbounds %struct.svop, %struct.svop* %27, i32 0, i32 7
  %28 = load %struct.sv*, %struct.sv** %op_sv36, align 8
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %28, i32 0, i32 3
  %svu_rv = bitcast %union.anon* %sv_u to %struct.sv**
  %29 = load %struct.sv*, %struct.sv** %svu_rv, align 8
  %sv_flags37 = getelementptr inbounds %struct.sv, %struct.sv* %29, i32 0, i32 2
  %30 = load i32, i32* %sv_flags37, align 4
  %and38 = and i32 %30, 255
  %cmp39 = icmp ne i32 %and38, 11
  br i1 %cmp39, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %lor.lhs.false35
  %31 = load %struct.op*, %struct.op** %kid, align 8
  %32 = bitcast %struct.op* %31 to %struct.svop*
  %op_sv41 = getelementptr inbounds %struct.svop, %struct.svop* %32, i32 0, i32 7
  %33 = load %struct.sv*, %struct.sv** %op_sv41, align 8
  %sv_u42 = getelementptr inbounds %struct.sv, %struct.sv* %33, i32 0, i32 3
  %svu_rv43 = bitcast %union.anon* %sv_u42 to %struct.sv**
  %34 = load %struct.sv*, %struct.sv** %svu_rv43, align 8
  %sv_flags44 = getelementptr inbounds %struct.sv, %struct.sv* %34, i32 0, i32 2
  %35 = load i32, i32* %sv_flags44, align 4
  %and45 = and i32 %35, 255
  %cmp46 = icmp ne i32 %and45, 12
  br i1 %cmp46, label %if.then48, label %if.end

if.then48:                                        ; preds = %land.lhs.true, %lor.lhs.false, %sw.bb29
  br label %sw.epilog

if.end:                                           ; preds = %land.lhs.true, %lor.lhs.false35
  br label %sw.default

sw.default:                                       ; preds = %if.then, %if.end
  br label %do.body49

do.body49:                                        ; preds = %sw.default
  %36 = load i32, i32* %ref_type, align 4
  %conv50 = trunc i32 %36 to i16
  %conv51 = zext i16 %conv50 to i32
  %37 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type52 = getelementptr inbounds %struct.op, %struct.op* %37, i32 0, i32 4
  %38 = trunc i32 %conv51 to i16
  %bf.load53 = load i16, i16* %op_type52, align 8
  %bf.value54 = and i16 %38, 511
  %bf.clear55 = and i16 %bf.load53, -512
  %bf.set56 = or i16 %bf.clear55, %bf.value54
  store i16 %bf.set56, i16* %op_type52, align 8
  %bf.result.cast57 = zext i16 %bf.value54 to i32
  %39 = load i32, i32* %ref_type, align 4
  %idxprom58 = zext i32 %39 to i64
  %arrayidx59 = getelementptr inbounds [0 x %struct.op* ()*], [0 x %struct.op* ()*]* @PL_ppaddr, i64 0, i64 %idxprom58
  %40 = load %struct.op* ()*, %struct.op* ()** %arrayidx59, align 8
  %41 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_ppaddr60 = getelementptr inbounds %struct.op, %struct.op* %41, i32 0, i32 2
  store %struct.op* ()* %40, %struct.op* ()** %op_ppaddr60, align 8
  br label %do.end61

do.end61:                                         ; preds = %do.body49
  %42 = load %struct.op*, %struct.op** %kid, align 8
  %call = call %struct.op* @Perl_scalar(%struct.op* %42)
  br label %sw.epilog

sw.epilog:                                        ; preds = %do.end61, %if.then48, %do.end, %sw.bb
  br label %if.end62

if.end62:                                         ; preds = %sw.epilog, %cond.end16
  %43 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type63 = getelementptr inbounds %struct.op, %struct.op* %43, i32 0, i32 4
  %bf.load64 = load i16, i16* %op_type63, align 8
  %bf.clear65 = and i16 %bf.load64, 511
  %bf.cast66 = zext i16 %bf.clear65 to i32
  %44 = load i32, i32* %ref_type, align 4
  %cmp67 = icmp eq i32 %bf.cast66, %44
  br i1 %cmp67, label %if.then69, label %if.end72

if.then69:                                        ; preds = %if.end62
  %45 = load i32, i32* %ref_type, align 4
  %idxprom70 = zext i32 %45 to i64
  %arrayidx71 = getelementptr inbounds [0 x i8*], [0 x i8*]* @PL_op_desc, i64 0, i64 %idxprom70
  %46 = load i8*, i8** %arrayidx71, align 8
  call void (i32, i8*, ...) @Perl_ck_warner_d(i32 56, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.145, i64 0, i64 0), i8* %46)
  %47 = load %struct.op*, %struct.op** %o.addr, align 8
  store %struct.op* %47, %struct.op** %retval, align 8
  br label %return

if.end72:                                         ; preds = %if.end62
  %48 = load %struct.op*, %struct.op** %o.addr, align 8
  %call73 = call %struct.op* @Perl_ck_fun(%struct.op* %48)
  store %struct.op* %call73, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %if.end72, %if.then69
  %49 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %49
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_ck_length(%struct.op* %o) #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %o.addr = alloca %struct.op*, align 8
  %kid = alloca %struct.op*, align 8
  %name = alloca %struct.sv*, align 8
  %hash = alloca i8, align 1
  store %struct.op* %o, %struct.op** %o.addr, align 8
  %0 = load %struct.op*, %struct.op** %o.addr, align 8
  %call = call %struct.op* @Perl_ck_fun(%struct.op* %0)
  store %struct.op* %call, %struct.op** %o.addr, align 8
  %call1 = call zeroext i1 @Perl_ckwarn(i32 28)
  br i1 %call1, label %if.then, label %if.end26

if.then:                                          ; preds = %entry
  %1 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %1, i32 0, i32 5
  %2 = load i8, i8* %op_flags, align 2
  %conv = zext i8 %2 to i32
  %and = and i32 %conv, 4
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then
  %3 = load %struct.op*, %struct.op** %o.addr, align 8
  %4 = bitcast %struct.op* %3 to %struct.listop*
  %op_first = getelementptr inbounds %struct.listop, %struct.listop* %4, i32 0, i32 7
  %5 = load %struct.op*, %struct.op** %op_first, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.then
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.op* [ %5, %cond.true ], [ null, %cond.false ]
  store %struct.op* %cond, %struct.op** %kid, align 8
  %6 = load %struct.op*, %struct.op** %kid, align 8
  %tobool2 = icmp ne %struct.op* %6, null
  br i1 %tobool2, label %if.then3, label %if.end25

if.then3:                                         ; preds = %cond.end
  store %struct.sv* null, %struct.sv** %name, align 8
  %7 = load %struct.op*, %struct.op** %kid, align 8
  %op_type = getelementptr inbounds %struct.op, %struct.op* %7, i32 0, i32 4
  %bf.load = load i16, i16* %op_type, align 8
  %bf.clear = and i16 %bf.load, 511
  %bf.cast = zext i16 %bf.clear to i32
  %cmp = icmp eq i32 %bf.cast, 11
  br i1 %cmp, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %if.then3
  %8 = load %struct.op*, %struct.op** %kid, align 8
  %op_type5 = getelementptr inbounds %struct.op, %struct.op* %8, i32 0, i32 4
  %bf.load6 = load i16, i16* %op_type5, align 8
  %bf.clear7 = and i16 %bf.load6, 511
  %bf.cast8 = zext i16 %bf.clear7 to i32
  %cmp9 = icmp eq i32 %bf.cast8, 149
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %if.then3
  %9 = phi i1 [ true, %if.then3 ], [ %cmp9, %lor.rhs ]
  %frombool = zext i1 %9 to i8
  store i8 %frombool, i8* %hash, align 1
  %10 = load %struct.op*, %struct.op** %kid, align 8
  %op_type11 = getelementptr inbounds %struct.op, %struct.op* %10, i32 0, i32 4
  %bf.load12 = load i16, i16* %op_type11, align 8
  %bf.clear13 = and i16 %bf.load12, 511
  %bf.cast14 = zext i16 %bf.clear13 to i32
  switch i32 %bf.cast14, label %sw.default [
    i32 11, label %sw.bb
    i32 10, label %sw.bb
    i32 149, label %sw.bb
    i32 135, label %sw.bb
  ]

sw.bb:                                            ; preds = %lor.end, %lor.end, %lor.end, %lor.end
  %11 = load %struct.op*, %struct.op** %kid, align 8
  %call15 = call %struct.sv* @S_op_varname(%struct.op* %11)
  store %struct.sv* %call15, %struct.sv** %name, align 8
  br label %sw.epilog

sw.default:                                       ; preds = %lor.end
  %12 = load %struct.op*, %struct.op** %o.addr, align 8
  store %struct.op* %12, %struct.op** %retval, align 8
  br label %return

sw.epilog:                                        ; preds = %sw.bb
  %13 = load %struct.sv*, %struct.sv** %name, align 8
  %tobool16 = icmp ne %struct.sv* %13, null
  br i1 %tobool16, label %if.then17, label %if.else

if.then17:                                        ; preds = %sw.epilog
  %14 = load %struct.sv*, %struct.sv** %name, align 8
  %15 = bitcast %struct.sv* %14 to i8*
  %16 = load i8, i8* %hash, align 1
  %tobool18 = trunc i8 %16 to i1
  %17 = zext i1 %tobool18 to i64
  %cond20 = select i1 %tobool18, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.147, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.17, i64 0, i64 0)
  %18 = load %struct.sv*, %struct.sv** %name, align 8
  %19 = bitcast %struct.sv* %18 to i8*
  call void (i32, i8*, ...) @Perl_warner(i32 28, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.146, i64 0, i64 0), i8* %15, i8* %cond20, i8* %19)
  br label %if.end24

if.else:                                          ; preds = %sw.epilog
  %20 = load i8, i8* %hash, align 1
  %tobool21 = trunc i8 %20 to i1
  br i1 %tobool21, label %if.then22, label %if.else23

if.then22:                                        ; preds = %if.else
  call void (i32, i8*, ...) @Perl_warner(i32 28, i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.148, i64 0, i64 0))
  br label %if.end

if.else23:                                        ; preds = %if.else
  call void (i32, i8*, ...) @Perl_warner(i32 28, i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.149, i64 0, i64 0))
  br label %if.end

if.end:                                           ; preds = %if.else23, %if.then22
  br label %if.end24

if.end24:                                         ; preds = %if.end, %if.then17
  br label %if.end25

if.end25:                                         ; preds = %if.end24, %cond.end
  br label %if.end26

if.end26:                                         ; preds = %if.end25, %entry
  %21 = load %struct.op*, %struct.op** %o.addr, align 8
  store %struct.op* %21, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %if.end26, %sw.default
  %22 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %22
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @S_maybe_multideref(%struct.op* %start, %struct.op* %orig_o, i64 %orig_action, i8 zeroext %hints) #0 {
entry:
  %start.addr = alloca %struct.op*, align 8
  %orig_o.addr = alloca %struct.op*, align 8
  %orig_action.addr = alloca i64, align 8
  %hints.addr = alloca i8, align 1
  %pass = alloca i32, align 4
  %arg_buf = alloca %union.UNOP_AUX_item*, align 8
  %reset_start_targ = alloca i8, align 1
  %index_skip = alloca i32, align 4
  %o = alloca %struct.op*, align 8
  %action = alloca i64, align 8
  %first_elem_op = alloca %struct.op*, align 8
  %top_op = alloca %struct.op*, align 8
  %action_count = alloca i32, align 4
  %action_ix = alloca i32, align 4
  %next_is_hash = alloca i8, align 1
  %is_last = alloca i8, align 1
  %maybe_aelemfast = alloca i8, align 1
  %arg = alloca %union.UNOP_AUX_item*, align 8
  %action_ptr = alloca %union.UNOP_AUX_item*, align 8
  %kid = alloca %struct.op*, align 8
  %is_deref = alloca i8, align 1
  %ok = alloca i8, align 1
  %index_type = alloca i64, align 8
  %rop = alloca %struct.unop*, align 8
  %helem_op = alloca %struct.op*, align 8
  %iv = alloca i64, align 8
  %ix_sv = alloca %struct.sv*, align 8
  %mderef = alloca %struct.op*, align 8
  %p = alloca %struct.op*, align 8
  %q = alloca %struct.op*, align 8
  %size = alloca i64, align 8
  store %struct.op* %start, %struct.op** %start.addr, align 8
  store %struct.op* %orig_o, %struct.op** %orig_o.addr, align 8
  store i64 %orig_action, i64* %orig_action.addr, align 8
  store i8 %hints, i8* %hints.addr, align 1
  store %union.UNOP_AUX_item* null, %union.UNOP_AUX_item** %arg_buf, align 8
  store i8 0, i8* %reset_start_targ, align 1
  store i32 -1, i32* %index_skip, align 4
  store i32 0, i32* %pass, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %pass, align 4
  %cmp = icmp slt i32 %0, 2
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load %struct.op*, %struct.op** %orig_o.addr, align 8
  store %struct.op* %1, %struct.op** %o, align 8
  %2 = load i64, i64* %orig_action.addr, align 8
  store i64 %2, i64* %action, align 8
  store %struct.op* null, %struct.op** %first_elem_op, align 8
  store %struct.op* null, %struct.op** %top_op, align 8
  store i32 0, i32* %action_count, align 4
  store i32 0, i32* %action_ix, align 4
  store i8 0, i8* %next_is_hash, align 1
  store i8 0, i8* %is_last, align 1
  store i8 0, i8* %maybe_aelemfast, align 1
  %3 = load %union.UNOP_AUX_item*, %union.UNOP_AUX_item** %arg_buf, align 8
  store %union.UNOP_AUX_item* %3, %union.UNOP_AUX_item** %arg, align 8
  %4 = load %union.UNOP_AUX_item*, %union.UNOP_AUX_item** %arg_buf, align 8
  store %union.UNOP_AUX_item* %4, %union.UNOP_AUX_item** %action_ptr, align 8
  %5 = load i32, i32* %pass, align 4
  %tobool = icmp ne i32 %5, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %6 = load %union.UNOP_AUX_item*, %union.UNOP_AUX_item** %action_ptr, align 8
  %uv = bitcast %union.UNOP_AUX_item* %6 to i64*
  store i64 0, i64* %uv, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  %7 = load %union.UNOP_AUX_item*, %union.UNOP_AUX_item** %arg, align 8
  %incdec.ptr = getelementptr inbounds %union.UNOP_AUX_item, %union.UNOP_AUX_item* %7, i32 1
  store %union.UNOP_AUX_item* %incdec.ptr, %union.UNOP_AUX_item** %arg, align 8
  %8 = load i64, i64* %action, align 8
  switch i64 %8, label %sw.default [
    i64 9, label %sw.bb
    i64 13, label %sw.bb
    i64 2, label %sw.bb1
    i64 6, label %sw.bb1
    i64 12, label %sw.bb7
    i64 10, label %sw.bb7
    i64 5, label %sw.bb8
    i64 3, label %sw.bb8
    i64 8, label %sw.bb13
    i64 1, label %sw.bb14
  ]

sw.bb:                                            ; preds = %if.end, %if.end
  store i8 1, i8* %next_is_hash, align 1
  br label %sw.bb1

sw.bb1:                                           ; preds = %if.end, %if.end, %sw.bb
  %9 = load i32, i32* %pass, align 4
  %tobool2 = icmp ne i32 %9, 0
  br i1 %tobool2, label %if.then3, label %if.end5

if.then3:                                         ; preds = %sw.bb1
  %10 = load %struct.op*, %struct.op** %start.addr, align 8
  %11 = bitcast %struct.op* %10 to %struct.svop*
  %op_sv = getelementptr inbounds %struct.svop, %struct.svop* %11, i32 0, i32 7
  %12 = load %struct.sv*, %struct.sv** %op_sv, align 8
  %13 = load %union.UNOP_AUX_item*, %union.UNOP_AUX_item** %arg, align 8
  %sv = bitcast %union.UNOP_AUX_item* %13 to %struct.sv**
  store %struct.sv* %12, %struct.sv** %sv, align 8
  %14 = load %struct.op*, %struct.op** %start.addr, align 8
  %15 = bitcast %struct.op* %14 to %struct.svop*
  %op_sv4 = getelementptr inbounds %struct.svop, %struct.svop* %15, i32 0, i32 7
  store %struct.sv* null, %struct.sv** %op_sv4, align 8
  br label %if.end5

if.end5:                                          ; preds = %if.then3, %sw.bb1
  %16 = load %union.UNOP_AUX_item*, %union.UNOP_AUX_item** %arg, align 8
  %incdec.ptr6 = getelementptr inbounds %union.UNOP_AUX_item, %union.UNOP_AUX_item* %16, i32 1
  store %union.UNOP_AUX_item* %incdec.ptr6, %union.UNOP_AUX_item** %arg, align 8
  br label %sw.epilog

sw.bb7:                                           ; preds = %if.end, %if.end
  store i8 1, i8* %next_is_hash, align 1
  br label %sw.bb8

sw.bb8:                                           ; preds = %if.end, %if.end, %sw.bb7
  %17 = load i32, i32* %pass, align 4
  %tobool9 = icmp ne i32 %17, 0
  br i1 %tobool9, label %if.then10, label %if.end11

if.then10:                                        ; preds = %sw.bb8
  %18 = load %struct.op*, %struct.op** %start.addr, align 8
  %op_targ = getelementptr inbounds %struct.op, %struct.op* %18, i32 0, i32 3
  %19 = load i64, i64* %op_targ, align 8
  %20 = load %union.UNOP_AUX_item*, %union.UNOP_AUX_item** %arg, align 8
  %pad_offset = bitcast %union.UNOP_AUX_item* %20 to i64*
  store i64 %19, i64* %pad_offset, align 8
  store i8 1, i8* %reset_start_targ, align 1
  br label %if.end11

if.end11:                                         ; preds = %if.then10, %sw.bb8
  %21 = load %union.UNOP_AUX_item*, %union.UNOP_AUX_item** %arg, align 8
  %incdec.ptr12 = getelementptr inbounds %union.UNOP_AUX_item, %union.UNOP_AUX_item* %21, i32 1
  store %union.UNOP_AUX_item* %incdec.ptr12, %union.UNOP_AUX_item** %arg, align 8
  br label %sw.epilog

sw.bb13:                                          ; preds = %if.end
  store i8 1, i8* %next_is_hash, align 1
  br label %sw.bb14

sw.bb14:                                          ; preds = %if.end, %sw.bb13
  br label %sw.epilog

sw.default:                                       ; preds = %if.end
  br label %for.end

sw.epilog:                                        ; preds = %sw.bb14, %if.end11, %if.end5
  br label %while.cond

while.cond:                                       ; preds = %if.end423, %sw.epilog
  %22 = load i8, i8* %is_last, align 1
  %tobool15 = trunc i8 %22 to i1
  %lnot = xor i1 %tobool15, true
  br i1 %lnot, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  store i64 0, i64* %index_type, align 8
  %23 = load i32, i32* %action_count, align 4
  %tobool16 = icmp ne i32 %23, 0
  br i1 %tobool16, label %if.then17, label %if.end35

if.then17:                                        ; preds = %while.body
  %24 = load %struct.op*, %struct.op** %o, align 8
  %op_type = getelementptr inbounds %struct.op, %struct.op* %24, i32 0, i32 4
  %bf.load = load i16, i16* %op_type, align 8
  %bf.clear = and i16 %bf.load, 511
  %bf.cast = zext i16 %bf.clear to i32
  %cmp18 = icmp ne i32 %bf.cast, 135
  br i1 %cmp18, label %land.lhs.true, label %if.end25

land.lhs.true:                                    ; preds = %if.then17
  %25 = load %struct.op*, %struct.op** %o, align 8
  %op_type19 = getelementptr inbounds %struct.op, %struct.op* %25, i32 0, i32 4
  %bf.load20 = load i16, i16* %op_type19, align 8
  %bf.clear21 = and i16 %bf.load20, 511
  %bf.cast22 = zext i16 %bf.clear21 to i32
  %cmp23 = icmp ne i32 %bf.cast22, 149
  br i1 %cmp23, label %if.then24, label %if.end25

if.then24:                                        ; preds = %land.lhs.true
  br label %for.end

if.end25:                                         ; preds = %land.lhs.true, %if.then17
  %26 = load %struct.op*, %struct.op** %o, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %26, i32 0, i32 5
  %27 = load i8, i8* %op_flags, align 2
  %conv = zext i8 %27 to i32
  %cmp26 = icmp ne i32 %conv, 22
  br i1 %cmp26, label %if.then28, label %if.end29

if.then28:                                        ; preds = %if.end25
  br label %for.end

if.end29:                                         ; preds = %if.end25
  %28 = load %struct.op*, %struct.op** %o, align 8
  %op_private = getelementptr inbounds %struct.op, %struct.op* %28, i32 0, i32 6
  %29 = load i8, i8* %op_private, align 1
  %conv30 = zext i8 %29 to i32
  %and = and i32 %conv30, 2
  %conv31 = trunc i32 %and to i8
  store i8 %conv31, i8* %hints.addr, align 1
  %30 = load %struct.op*, %struct.op** %o, align 8
  store %struct.op* %30, %struct.op** %top_op, align 8
  %31 = load i8, i8* %next_is_hash, align 1
  %tobool32 = trunc i8 %31 to i1
  %32 = zext i1 %tobool32 to i64
  %cond = select i1 %tobool32, i32 11, i32 4
  %conv34 = sext i32 %cond to i64
  store i64 %conv34, i64* %action, align 8
  %33 = load %struct.op*, %struct.op** %o, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %33, i32 0, i32 0
  %34 = load %struct.op*, %struct.op** %op_next, align 8
  store %struct.op* %34, %struct.op** %o, align 8
  br label %if.end35

if.end35:                                         ; preds = %if.end29, %while.body
  %35 = load i32, i32* %action_count, align 4
  %36 = load i32, i32* %index_skip, align 4
  %cmp36 = icmp ne i32 %35, %36
  br i1 %cmp36, label %if.then38, label %if.end192

if.then38:                                        ; preds = %if.end35
  %37 = load %struct.op*, %struct.op** %o, align 8
  %op_type39 = getelementptr inbounds %struct.op, %struct.op* %37, i32 0, i32 4
  %bf.load40 = load i16, i16* %op_type39, align 8
  %bf.clear41 = and i16 %bf.load40, 511
  %bf.cast42 = zext i16 %bf.clear41 to i32
  switch i32 %bf.cast42, label %sw.epilog191 [
    i32 9, label %sw.bb43
    i32 5, label %sw.bb73
    i32 7, label %sw.bb149
  ]

sw.bb43:                                          ; preds = %if.then38
  %38 = load %struct.op*, %struct.op** %o, align 8
  %op_flags44 = getelementptr inbounds %struct.op, %struct.op* %38, i32 0, i32 5
  %39 = load i8, i8* %op_flags44, align 2
  %conv45 = zext i8 %39 to i32
  %and46 = and i32 %conv45, 3
  %tobool47 = icmp ne i32 %and46, 0
  br i1 %tobool47, label %cond.true, label %cond.false

cond.true:                                        ; preds = %sw.bb43
  %40 = load %struct.op*, %struct.op** %o, align 8
  %op_flags48 = getelementptr inbounds %struct.op, %struct.op* %40, i32 0, i32 5
  %41 = load i8, i8* %op_flags48, align 2
  %conv49 = zext i8 %41 to i32
  %and50 = and i32 %conv49, 3
  br label %cond.end

cond.false:                                       ; preds = %sw.bb43
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond51 = phi i32 [ %and50, %cond.true ], [ 0, %cond.false ]
  %cmp52 = icmp eq i32 %cond51, 2
  br i1 %cmp52, label %land.lhs.true54, label %if.end72

land.lhs.true54:                                  ; preds = %cond.end
  %42 = load %struct.op*, %struct.op** %o, align 8
  %op_flags55 = getelementptr inbounds %struct.op, %struct.op* %42, i32 0, i32 5
  %43 = load i8, i8* %op_flags55, align 2
  %conv56 = zext i8 %43 to i32
  %and57 = and i32 %conv56, 48
  %tobool58 = icmp ne i32 %and57, 0
  br i1 %tobool58, label %if.end72, label %land.lhs.true59

land.lhs.true59:                                  ; preds = %land.lhs.true54
  %44 = load %struct.op*, %struct.op** %o, align 8
  %op_private60 = getelementptr inbounds %struct.op, %struct.op* %44, i32 0, i32 6
  %45 = load i8, i8* %op_private60, align 1
  %conv61 = zext i8 %45 to i32
  %cmp62 = icmp eq i32 %conv61, 0
  br i1 %cmp62, label %if.then64, label %if.end72

if.then64:                                        ; preds = %land.lhs.true59
  %46 = load i32, i32* %pass, align 4
  %tobool65 = icmp ne i32 %46, 0
  br i1 %tobool65, label %if.then66, label %if.end69

if.then66:                                        ; preds = %if.then64
  %47 = load %struct.op*, %struct.op** %o, align 8
  %op_targ67 = getelementptr inbounds %struct.op, %struct.op* %47, i32 0, i32 3
  %48 = load i64, i64* %op_targ67, align 8
  %49 = load %union.UNOP_AUX_item*, %union.UNOP_AUX_item** %arg, align 8
  %pad_offset68 = bitcast %union.UNOP_AUX_item* %49 to i64*
  store i64 %48, i64* %pad_offset68, align 8
  br label %if.end69

if.end69:                                         ; preds = %if.then66, %if.then64
  %50 = load %union.UNOP_AUX_item*, %union.UNOP_AUX_item** %arg, align 8
  %incdec.ptr70 = getelementptr inbounds %union.UNOP_AUX_item, %union.UNOP_AUX_item* %50, i32 1
  store %union.UNOP_AUX_item* %incdec.ptr70, %union.UNOP_AUX_item** %arg, align 8
  store i64 32, i64* %index_type, align 8
  %51 = load %struct.op*, %struct.op** %o, align 8
  %op_next71 = getelementptr inbounds %struct.op, %struct.op* %51, i32 0, i32 0
  %52 = load %struct.op*, %struct.op** %op_next71, align 8
  store %struct.op* %52, %struct.op** %o, align 8
  br label %if.end72

if.end72:                                         ; preds = %if.end69, %land.lhs.true59, %land.lhs.true54, %cond.end
  br label %sw.epilog191

sw.bb73:                                          ; preds = %if.then38
  %53 = load i8, i8* %next_is_hash, align 1
  %tobool74 = trunc i8 %53 to i1
  br i1 %tobool74, label %if.then75, label %if.else

if.then75:                                        ; preds = %sw.bb73
  %54 = load %struct.op*, %struct.op** %o, align 8
  %55 = bitcast %struct.op* %54 to %struct.svop*
  %op_sv76 = getelementptr inbounds %struct.svop, %struct.svop* %55, i32 0, i32 7
  %56 = load %struct.sv*, %struct.sv** %op_sv76, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %56, i32 0, i32 2
  %57 = load i32, i32* %sv_flags, align 4
  %and77 = and i32 %57, 1792
  %tobool78 = icmp ne i32 %and77, 0
  br i1 %tobool78, label %if.end80, label %if.then79

if.then79:                                        ; preds = %if.then75
  br label %sw.epilog191

if.end80:                                         ; preds = %if.then75
  %58 = load i32, i32* %pass, align 4
  %tobool81 = icmp ne i32 %58, 0
  br i1 %tobool81, label %if.then82, label %if.end106

if.then82:                                        ; preds = %if.end80
  store %struct.unop* null, %struct.unop** %rop, align 8
  %59 = load %struct.op*, %struct.op** %o, align 8
  %op_next83 = getelementptr inbounds %struct.op, %struct.op* %59, i32 0, i32 0
  %60 = load %struct.op*, %struct.op** %op_next83, align 8
  store %struct.op* %60, %struct.op** %helem_op, align 8
  %61 = load %struct.op*, %struct.op** %helem_op, align 8
  %op_type84 = getelementptr inbounds %struct.op, %struct.op* %61, i32 0, i32 4
  %bf.load85 = load i16, i16* %op_type84, align 8
  %bf.clear86 = and i16 %bf.load85, 511
  %bf.cast87 = zext i16 %bf.clear86 to i32
  %cmp88 = icmp eq i32 %bf.cast87, 150
  br i1 %cmp88, label %if.then90, label %if.end103

if.then90:                                        ; preds = %if.then82
  %62 = load %struct.op*, %struct.op** %helem_op, align 8
  %63 = bitcast %struct.op* %62 to %struct.binop*
  %op_first = getelementptr inbounds %struct.binop, %struct.binop* %63, i32 0, i32 7
  %64 = load %struct.op*, %struct.op** %op_first, align 8
  %65 = bitcast %struct.op* %64 to %struct.unop*
  store %struct.unop* %65, %struct.unop** %rop, align 8
  %66 = load %struct.op*, %struct.op** %helem_op, align 8
  %op_private91 = getelementptr inbounds %struct.op, %struct.op* %66, i32 0, i32 6
  %67 = load i8, i8* %op_private91, align 1
  %conv92 = zext i8 %67 to i32
  %and93 = and i32 %conv92, 128
  %tobool94 = icmp ne i32 %and93, 0
  br i1 %tobool94, label %if.then101, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.then90
  %68 = load %struct.unop*, %struct.unop** %rop, align 8
  %op_type95 = getelementptr inbounds %struct.unop, %struct.unop* %68, i32 0, i32 4
  %bf.load96 = load i16, i16* %op_type95, align 8
  %bf.clear97 = and i16 %bf.load96, 511
  %bf.cast98 = zext i16 %bf.clear97 to i32
  %cmp99 = icmp ne i32 %bf.cast98, 149
  br i1 %cmp99, label %if.then101, label %if.end102

if.then101:                                       ; preds = %lor.lhs.false, %if.then90
  store %struct.unop* null, %struct.unop** %rop, align 8
  br label %if.end102

if.end102:                                        ; preds = %if.then101, %lor.lhs.false
  br label %if.end103

if.end103:                                        ; preds = %if.end102, %if.then82
  %69 = load %struct.unop*, %struct.unop** %rop, align 8
  %70 = load %struct.op*, %struct.op** %o, align 8
  %71 = bitcast %struct.op* %70 to %struct.svop*
  call void @S_check_hash_fields_and_hekify(%struct.unop* %69, %struct.svop* %71)
  %72 = load %struct.op*, %struct.op** %o, align 8
  %73 = bitcast %struct.op* %72 to %struct.svop*
  %op_sv104 = getelementptr inbounds %struct.svop, %struct.svop* %73, i32 0, i32 7
  %74 = load %struct.sv*, %struct.sv** %op_sv104, align 8
  %75 = load %union.UNOP_AUX_item*, %union.UNOP_AUX_item** %arg, align 8
  %sv105 = bitcast %union.UNOP_AUX_item* %75 to %struct.sv**
  store %struct.sv* %74, %struct.sv** %sv105, align 8
  br label %if.end106

if.end106:                                        ; preds = %if.end103, %if.end80
  br label %if.end142

if.else:                                          ; preds = %sw.bb73
  %76 = load %struct.op*, %struct.op** %o, align 8
  %77 = bitcast %struct.op* %76 to %struct.svop*
  %op_sv107 = getelementptr inbounds %struct.svop, %struct.svop* %77, i32 0, i32 7
  %78 = load %struct.sv*, %struct.sv** %op_sv107, align 8
  store %struct.sv* %78, %struct.sv** %ix_sv, align 8
  %79 = load %struct.sv*, %struct.sv** %ix_sv, align 8
  %sv_flags108 = getelementptr inbounds %struct.sv, %struct.sv* %79, i32 0, i32 2
  %80 = load i32, i32* %sv_flags108, align 4
  %and109 = and i32 %80, 256
  %tobool110 = icmp ne i32 %and109, 0
  br i1 %tobool110, label %if.end112, label %if.then111

if.then111:                                       ; preds = %if.else
  br label %sw.epilog191

if.end112:                                        ; preds = %if.else
  %81 = load %struct.sv*, %struct.sv** %ix_sv, align 8
  %sv_flags113 = getelementptr inbounds %struct.sv, %struct.sv* %81, i32 0, i32 2
  %82 = load i32, i32* %sv_flags113, align 4
  %and114 = and i32 %82, 2097408
  %cmp115 = icmp eq i32 %and114, 256
  br i1 %cmp115, label %cond.true117, label %cond.false118

cond.true117:                                     ; preds = %if.end112
  %83 = load %struct.sv*, %struct.sv** %ix_sv, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %83, i32 0, i32 0
  %84 = load i8*, i8** %sv_any, align 8
  %85 = bitcast i8* %84 to %struct.xpviv*
  %xiv_u = getelementptr inbounds %struct.xpviv, %struct.xpviv* %85, i32 0, i32 4
  %xivu_iv = bitcast %union._xivu* %xiv_u to i64*
  %86 = load i64, i64* %xivu_iv, align 8
  br label %cond.end119

cond.false118:                                    ; preds = %if.end112
  %87 = load %struct.sv*, %struct.sv** %ix_sv, align 8
  %call = call i64 @Perl_sv_2iv_flags(%struct.sv* %87, i32 2)
  br label %cond.end119

cond.end119:                                      ; preds = %cond.false118, %cond.true117
  %cond120 = phi i64 [ %86, %cond.true117 ], [ %call, %cond.false118 ]
  store i64 %cond120, i64* %iv, align 8
  %88 = load i32, i32* %action_count, align 4
  %cmp121 = icmp eq i32 %88, 0
  br i1 %cmp121, label %land.lhs.true123, label %if.end136

land.lhs.true123:                                 ; preds = %cond.end119
  %89 = load i64, i64* %iv, align 8
  %cmp124 = icmp sge i64 %89, -128
  br i1 %cmp124, label %land.lhs.true126, label %if.end136

land.lhs.true126:                                 ; preds = %land.lhs.true123
  %90 = load i64, i64* %iv, align 8
  %cmp127 = icmp sle i64 %90, 127
  br i1 %cmp127, label %land.lhs.true129, label %if.end136

land.lhs.true129:                                 ; preds = %land.lhs.true126
  %91 = load i64, i64* %action, align 8
  %cmp130 = icmp eq i64 %91, 5
  br i1 %cmp130, label %if.then135, label %lor.lhs.false132

lor.lhs.false132:                                 ; preds = %land.lhs.true129
  %92 = load i64, i64* %action, align 8
  %cmp133 = icmp eq i64 %92, 6
  br i1 %cmp133, label %if.then135, label %if.end136

if.then135:                                       ; preds = %lor.lhs.false132, %land.lhs.true129
  store i8 1, i8* %maybe_aelemfast, align 1
  br label %if.end136

if.end136:                                        ; preds = %if.then135, %lor.lhs.false132, %land.lhs.true126, %land.lhs.true123, %cond.end119
  %93 = load i32, i32* %pass, align 4
  %tobool137 = icmp ne i32 %93, 0
  br i1 %tobool137, label %if.then138, label %if.end141

if.then138:                                       ; preds = %if.end136
  %94 = load i64, i64* %iv, align 8
  %95 = load %union.UNOP_AUX_item*, %union.UNOP_AUX_item** %arg, align 8
  %iv139 = bitcast %union.UNOP_AUX_item* %95 to i64*
  store i64 %94, i64* %iv139, align 8
  %96 = load %struct.op*, %struct.op** %o, align 8
  %97 = bitcast %struct.op* %96 to %struct.svop*
  %op_sv140 = getelementptr inbounds %struct.svop, %struct.svop* %97, i32 0, i32 7
  %98 = load %struct.sv*, %struct.sv** %op_sv140, align 8
  %99 = bitcast %struct.sv* %98 to i8*
  %100 = bitcast i8* %99 to %struct.sv*
  call void @S_SvREFCNT_dec_NN(%struct.sv* %100)
  br label %if.end141

if.end141:                                        ; preds = %if.then138, %if.end136
  br label %if.end142

if.end142:                                        ; preds = %if.end141, %if.end106
  %101 = load i32, i32* %pass, align 4
  %tobool143 = icmp ne i32 %101, 0
  br i1 %tobool143, label %if.then144, label %if.end146

if.then144:                                       ; preds = %if.end142
  %102 = load %struct.op*, %struct.op** %o, align 8
  %103 = bitcast %struct.op* %102 to %struct.svop*
  %op_sv145 = getelementptr inbounds %struct.svop, %struct.svop* %103, i32 0, i32 7
  store %struct.sv* null, %struct.sv** %op_sv145, align 8
  br label %if.end146

if.end146:                                        ; preds = %if.then144, %if.end142
  %104 = load %union.UNOP_AUX_item*, %union.UNOP_AUX_item** %arg, align 8
  %incdec.ptr147 = getelementptr inbounds %union.UNOP_AUX_item, %union.UNOP_AUX_item* %104, i32 1
  store %union.UNOP_AUX_item* %incdec.ptr147, %union.UNOP_AUX_item** %arg, align 8
  store i64 16, i64* %index_type, align 8
  %105 = load %struct.op*, %struct.op** %o, align 8
  %op_next148 = getelementptr inbounds %struct.op, %struct.op* %105, i32 0, i32 0
  %106 = load %struct.op*, %struct.op** %op_next148, align 8
  store %struct.op* %106, %struct.op** %o, align 8
  br label %sw.epilog191

sw.bb149:                                         ; preds = %if.then38
  %107 = load %struct.op*, %struct.op** %o, align 8
  %op_flags150 = getelementptr inbounds %struct.op, %struct.op* %107, i32 0, i32 5
  %108 = load i8, i8* %op_flags150, align 2
  %conv151 = zext i8 %108 to i32
  %and152 = and i32 %conv151, -129
  %cmp153 = icmp ne i32 %and152, 2
  br i1 %cmp153, label %if.then160, label %lor.lhs.false155

lor.lhs.false155:                                 ; preds = %sw.bb149
  %109 = load %struct.op*, %struct.op** %o, align 8
  %op_private156 = getelementptr inbounds %struct.op, %struct.op* %109, i32 0, i32 6
  %110 = load i8, i8* %op_private156, align 1
  %conv157 = zext i8 %110 to i32
  %cmp158 = icmp ne i32 %conv157, 0
  br i1 %cmp158, label %if.then160, label %if.end161

if.then160:                                       ; preds = %lor.lhs.false155, %sw.bb149
  br label %sw.epilog191

if.end161:                                        ; preds = %lor.lhs.false155
  %111 = load %struct.op*, %struct.op** %o, align 8
  %op_next162 = getelementptr inbounds %struct.op, %struct.op* %111, i32 0, i32 0
  %112 = load %struct.op*, %struct.op** %op_next162, align 8
  store %struct.op* %112, %struct.op** %kid, align 8
  %113 = load %struct.op*, %struct.op** %kid, align 8
  %op_type163 = getelementptr inbounds %struct.op, %struct.op* %113, i32 0, i32 4
  %bf.load164 = load i16, i16* %op_type163, align 8
  %bf.clear165 = and i16 %bf.load164, 511
  %bf.cast166 = zext i16 %bf.clear165 to i32
  %cmp167 = icmp ne i32 %bf.cast166, 15
  br i1 %cmp167, label %if.then169, label %if.end170

if.then169:                                       ; preds = %if.end161
  br label %sw.epilog191

if.end170:                                        ; preds = %if.end161
  %114 = load %struct.op*, %struct.op** %kid, align 8
  %op_flags171 = getelementptr inbounds %struct.op, %struct.op* %114, i32 0, i32 5
  %115 = load i8, i8* %op_flags171, align 2
  %conv172 = zext i8 %115 to i32
  %and173 = and i32 %conv172, -9
  %cmp174 = icmp ne i32 %and173, 6
  br i1 %cmp174, label %if.then181, label %lor.lhs.false176

lor.lhs.false176:                                 ; preds = %if.end170
  %116 = load %struct.op*, %struct.op** %kid, align 8
  %op_private177 = getelementptr inbounds %struct.op, %struct.op* %116, i32 0, i32 6
  %117 = load i8, i8* %op_private177, align 1
  %conv178 = zext i8 %117 to i32
  %and179 = and i32 %conv178, -4
  %tobool180 = icmp ne i32 %and179, 0
  br i1 %tobool180, label %if.then181, label %if.end182

if.then181:                                       ; preds = %lor.lhs.false176, %if.end170
  br label %sw.epilog191

if.end182:                                        ; preds = %lor.lhs.false176
  %118 = load i32, i32* %pass, align 4
  %tobool183 = icmp ne i32 %118, 0
  br i1 %tobool183, label %if.then184, label %if.end188

if.then184:                                       ; preds = %if.end182
  %119 = load %struct.op*, %struct.op** %o, align 8
  %120 = bitcast %struct.op* %119 to %struct.svop*
  %op_sv185 = getelementptr inbounds %struct.svop, %struct.svop* %120, i32 0, i32 7
  %121 = load %struct.sv*, %struct.sv** %op_sv185, align 8
  %122 = load %union.UNOP_AUX_item*, %union.UNOP_AUX_item** %arg, align 8
  %sv186 = bitcast %union.UNOP_AUX_item* %122 to %struct.sv**
  store %struct.sv* %121, %struct.sv** %sv186, align 8
  %123 = load %struct.op*, %struct.op** %o, align 8
  %124 = bitcast %struct.op* %123 to %struct.svop*
  %op_sv187 = getelementptr inbounds %struct.svop, %struct.svop* %124, i32 0, i32 7
  store %struct.sv* null, %struct.sv** %op_sv187, align 8
  br label %if.end188

if.end188:                                        ; preds = %if.then184, %if.end182
  %125 = load %union.UNOP_AUX_item*, %union.UNOP_AUX_item** %arg, align 8
  %incdec.ptr189 = getelementptr inbounds %union.UNOP_AUX_item, %union.UNOP_AUX_item* %125, i32 1
  store %union.UNOP_AUX_item* %incdec.ptr189, %union.UNOP_AUX_item** %arg, align 8
  store i64 48, i64* %index_type, align 8
  %126 = load %struct.op*, %struct.op** %kid, align 8
  %op_next190 = getelementptr inbounds %struct.op, %struct.op* %126, i32 0, i32 0
  %127 = load %struct.op*, %struct.op** %op_next190, align 8
  store %struct.op* %127, %struct.op** %o, align 8
  br label %sw.epilog191

sw.epilog191:                                     ; preds = %if.then38, %if.end188, %if.then181, %if.then169, %if.then160, %if.end146, %if.then111, %if.then79, %if.end72
  br label %if.end192

if.end192:                                        ; preds = %sw.epilog191, %if.end35
  %128 = load i64, i64* %index_type, align 8
  %129 = load i64, i64* %action, align 8
  %or = or i64 %129, %128
  store i64 %or, i64* %action, align 8
  %130 = load %struct.op*, %struct.op** %o, align 8
  %op_type193 = getelementptr inbounds %struct.op, %struct.op* %130, i32 0, i32 4
  %bf.load194 = load i16, i16* %op_type193, align 8
  %bf.clear195 = and i16 %bf.load194, 511
  %bf.cast196 = zext i16 %bf.clear195 to i32
  %cmp197 = icmp eq i32 %bf.cast196, 0
  br i1 %cmp197, label %if.then199, label %if.end201

if.then199:                                       ; preds = %if.end192
  %131 = load %struct.op*, %struct.op** %o, align 8
  %op_next200 = getelementptr inbounds %struct.op, %struct.op* %131, i32 0, i32 0
  %132 = load %struct.op*, %struct.op** %op_next200, align 8
  store %struct.op* %132, %struct.op** %o, align 8
  br label %if.end201

if.end201:                                        ; preds = %if.then199, %if.end192
  %133 = load %struct.op*, %struct.op** %o, align 8
  %op_type202 = getelementptr inbounds %struct.op, %struct.op* %133, i32 0, i32 4
  %bf.load203 = load i16, i16* %op_type202, align 8
  %bf.clear204 = and i16 %bf.load203, 511
  %bf.cast205 = zext i16 %bf.clear204 to i32
  %cmp206 = icmp eq i32 %bf.cast205, 138
  br i1 %cmp206, label %land.lhs.true215, label %lor.lhs.false208

lor.lhs.false208:                                 ; preds = %if.end201
  %134 = load %struct.op*, %struct.op** %o, align 8
  %op_type209 = getelementptr inbounds %struct.op, %struct.op* %134, i32 0, i32 4
  %bf.load210 = load i16, i16* %op_type209, align 8
  %bf.clear211 = and i16 %bf.load210, 511
  %bf.cast212 = zext i16 %bf.clear211 to i32
  %cmp213 = icmp eq i32 %bf.cast212, 150
  br i1 %cmp213, label %land.lhs.true215, label %if.end223

land.lhs.true215:                                 ; preds = %lor.lhs.false208, %if.end201
  %135 = load %struct.op*, %struct.op** %o, align 8
  %op_type216 = getelementptr inbounds %struct.op, %struct.op* %135, i32 0, i32 4
  %bf.load217 = load i16, i16* %op_type216, align 8
  %bf.clear218 = and i16 %bf.load217, 511
  %bf.cast219 = zext i16 %bf.clear218 to i32
  %idxprom = zext i32 %bf.cast219 to i64
  %arrayidx = getelementptr inbounds [0 x %struct.op* (%struct.op*)*], [0 x %struct.op* (%struct.op*)*]* @PL_check, i64 0, i64 %idxprom
  %136 = load %struct.op* (%struct.op*)*, %struct.op* (%struct.op*)** %arrayidx, align 8
  %cmp220 = icmp ne %struct.op* (%struct.op*)* %136, @Perl_ck_null
  br i1 %cmp220, label %if.then222, label %if.end223

if.then222:                                       ; preds = %land.lhs.true215
  br label %for.end

if.end223:                                        ; preds = %land.lhs.true215, %lor.lhs.false208
  %137 = load %struct.op*, %struct.op** %o, align 8
  %op_type224 = getelementptr inbounds %struct.op, %struct.op* %137, i32 0, i32 4
  %bf.load225 = load i16, i16* %op_type224, align 8
  %bf.clear226 = and i16 %bf.load225, 511
  %bf.cast227 = zext i16 %bf.clear226 to i32
  %cmp228 = icmp ne i32 %bf.cast227, 138
  br i1 %cmp228, label %if.then235, label %lor.lhs.false230

lor.lhs.false230:                                 ; preds = %if.end223
  %138 = load %struct.op*, %struct.op** %o, align 8
  %op_private231 = getelementptr inbounds %struct.op, %struct.op* %138, i32 0, i32 6
  %139 = load i8, i8* %op_private231, align 1
  %conv232 = zext i8 %139 to i32
  %and233 = and i32 %conv232, 248
  %tobool234 = icmp ne i32 %and233, 0
  br i1 %tobool234, label %if.then235, label %if.end236

if.then235:                                       ; preds = %lor.lhs.false230, %if.end223
  store i8 0, i8* %maybe_aelemfast, align 1
  br label %if.end236

if.end236:                                        ; preds = %if.then235, %lor.lhs.false230
  %140 = load i64, i64* %index_type, align 8
  %cmp237 = icmp eq i64 %140, 0
  br i1 %cmp237, label %if.then267, label %lor.lhs.false239

lor.lhs.false239:                                 ; preds = %if.end236
  %141 = load %struct.op*, %struct.op** %o, align 8
  %op_type240 = getelementptr inbounds %struct.op, %struct.op* %141, i32 0, i32 4
  %bf.load241 = load i16, i16* %op_type240, align 8
  %bf.clear242 = and i16 %bf.load241, 511
  %bf.cast243 = zext i16 %bf.clear242 to i32
  %cmp244 = icmp ne i32 %bf.cast243, 138
  br i1 %cmp244, label %land.lhs.true246, label %if.else268

land.lhs.true246:                                 ; preds = %lor.lhs.false239
  %142 = load %struct.op*, %struct.op** %o, align 8
  %op_type247 = getelementptr inbounds %struct.op, %struct.op* %142, i32 0, i32 4
  %bf.load248 = load i16, i16* %op_type247, align 8
  %bf.clear249 = and i16 %bf.load248, 511
  %bf.cast250 = zext i16 %bf.clear249 to i32
  %cmp251 = icmp ne i32 %bf.cast250, 150
  br i1 %cmp251, label %land.lhs.true253, label %if.else268

land.lhs.true253:                                 ; preds = %land.lhs.true246
  %143 = load %struct.op*, %struct.op** %o, align 8
  %op_type254 = getelementptr inbounds %struct.op, %struct.op* %143, i32 0, i32 4
  %bf.load255 = load i16, i16* %op_type254, align 8
  %bf.clear256 = and i16 %bf.load255, 511
  %bf.cast257 = zext i16 %bf.clear256 to i32
  %cmp258 = icmp ne i32 %bf.cast257, 148
  br i1 %cmp258, label %land.lhs.true260, label %if.else268

land.lhs.true260:                                 ; preds = %land.lhs.true253
  %144 = load %struct.op*, %struct.op** %o, align 8
  %op_type261 = getelementptr inbounds %struct.op, %struct.op* %144, i32 0, i32 4
  %bf.load262 = load i16, i16* %op_type261, align 8
  %bf.clear263 = and i16 %bf.load262, 511
  %bf.cast264 = zext i16 %bf.clear263 to i32
  %cmp265 = icmp ne i32 %bf.cast264, 147
  br i1 %cmp265, label %if.then267, label %if.else268

if.then267:                                       ; preds = %land.lhs.true260, %if.end236
  store i8 0, i8* %ok, align 1
  br label %if.end382

if.else268:                                       ; preds = %land.lhs.true260, %land.lhs.true253, %land.lhs.true246, %lor.lhs.false239
  %145 = load %struct.op*, %struct.op** %o, align 8
  %op_type269 = getelementptr inbounds %struct.op, %struct.op* %145, i32 0, i32 4
  %bf.load270 = load i16, i16* %op_type269, align 8
  %bf.clear271 = and i16 %bf.load270, 511
  %bf.cast272 = zext i16 %bf.clear271 to i32
  %cmp273 = icmp eq i32 %bf.cast272, 138
  br i1 %cmp273, label %land.rhs, label %lor.lhs.false275

lor.lhs.false275:                                 ; preds = %if.else268
  %146 = load %struct.op*, %struct.op** %o, align 8
  %op_type276 = getelementptr inbounds %struct.op, %struct.op* %146, i32 0, i32 4
  %bf.load277 = load i16, i16* %op_type276, align 8
  %bf.clear278 = and i16 %bf.load277, 511
  %bf.cast279 = zext i16 %bf.clear278 to i32
  %cmp280 = icmp eq i32 %bf.cast279, 150
  br i1 %cmp280, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %lor.lhs.false275, %if.else268
  %147 = load %struct.op*, %struct.op** %o, align 8
  %op_private282 = getelementptr inbounds %struct.op, %struct.op* %147, i32 0, i32 6
  %148 = load i8, i8* %op_private282, align 1
  %conv283 = zext i8 %148 to i32
  %and284 = and i32 %conv283, 48
  %cmp285 = icmp eq i32 %and284, 16
  br i1 %cmp285, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %land.rhs
  %149 = load %struct.op*, %struct.op** %o, align 8
  %op_private287 = getelementptr inbounds %struct.op, %struct.op* %149, i32 0, i32 6
  %150 = load i8, i8* %op_private287, align 1
  %conv288 = zext i8 %150 to i32
  %and289 = and i32 %conv288, 48
  %cmp290 = icmp eq i32 %and289, 32
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %land.rhs
  %151 = phi i1 [ true, %land.rhs ], [ %cmp290, %lor.rhs ]
  br label %land.end

land.end:                                         ; preds = %lor.end, %lor.lhs.false275
  %152 = phi i1 [ false, %lor.lhs.false275 ], [ %151, %lor.end ]
  %frombool = zext i1 %152 to i8
  store i8 %frombool, i8* %is_deref, align 1
  %153 = load i8, i8* %is_deref, align 1
  %tobool292 = trunc i8 %153 to i1
  br i1 %tobool292, label %if.then293, label %if.else307

if.then293:                                       ; preds = %land.end
  %154 = load %struct.op*, %struct.op** %o, align 8
  %op_flags294 = getelementptr inbounds %struct.op, %struct.op* %154, i32 0, i32 5
  %155 = load i8, i8* %op_flags294, align 2
  %conv295 = zext i8 %155 to i32
  %and296 = and i32 %conv295, -9
  %cmp297 = icmp eq i32 %and296, 38
  br i1 %cmp297, label %land.rhs299, label %land.end305

land.rhs299:                                      ; preds = %if.then293
  %156 = load %struct.op*, %struct.op** %o, align 8
  %op_private300 = getelementptr inbounds %struct.op, %struct.op* %156, i32 0, i32 6
  %157 = load i8, i8* %op_private300, align 1
  %conv301 = zext i8 %157 to i32
  %and302 = and i32 %conv301, -52
  %tobool303 = icmp ne i32 %and302, 0
  %lnot304 = xor i1 %tobool303, true
  br label %land.end305

land.end305:                                      ; preds = %land.rhs299, %if.then293
  %158 = phi i1 [ false, %if.then293 ], [ %lnot304, %land.rhs299 ]
  %frombool306 = zext i1 %158 to i8
  store i8 %frombool306, i8* %ok, align 1
  br label %if.end381

if.else307:                                       ; preds = %land.end
  %159 = load %struct.op*, %struct.op** %o, align 8
  %op_type308 = getelementptr inbounds %struct.op, %struct.op* %159, i32 0, i32 4
  %bf.load309 = load i16, i16* %op_type308, align 8
  %bf.clear310 = and i16 %bf.load309, 511
  %bf.cast311 = zext i16 %bf.clear310 to i32
  %cmp312 = icmp eq i32 %bf.cast311, 148
  br i1 %cmp312, label %if.then314, label %if.else321

if.then314:                                       ; preds = %if.else307
  %160 = load %struct.op*, %struct.op** %o, align 8
  %op_private315 = getelementptr inbounds %struct.op, %struct.op* %160, i32 0, i32 6
  %161 = load i8, i8* %op_private315, align 1
  %conv316 = zext i8 %161 to i32
  %and317 = and i32 %conv316, -2
  %tobool318 = icmp ne i32 %and317, 0
  %lnot319 = xor i1 %tobool318, true
  %frombool320 = zext i1 %lnot319 to i8
  store i8 %frombool320, i8* %ok, align 1
  br label %if.end380

if.else321:                                       ; preds = %if.else307
  %162 = load %struct.op*, %struct.op** %o, align 8
  %op_type322 = getelementptr inbounds %struct.op, %struct.op* %162, i32 0, i32 4
  %bf.load323 = load i16, i16* %op_type322, align 8
  %bf.clear324 = and i16 %bf.load323, 511
  %bf.cast325 = zext i16 %bf.clear324 to i32
  %cmp326 = icmp eq i32 %bf.cast325, 147
  br i1 %cmp326, label %if.then328, label %if.else372

if.then328:                                       ; preds = %if.else321
  %163 = load %struct.op*, %struct.op** %o, align 8
  %op_private329 = getelementptr inbounds %struct.op, %struct.op* %163, i32 0, i32 6
  %164 = load i8, i8* %op_private329, align 1
  %conv330 = zext i8 %164 to i32
  %and331 = and i32 %conv330, -2
  %tobool332 = icmp ne i32 %and331, 0
  %lnot333 = xor i1 %tobool332, true
  %frombool334 = zext i1 %lnot333 to i8
  store i8 %frombool334, i8* %ok, align 1
  %165 = load %struct.op*, %struct.op** %o, align 8
  %166 = bitcast %struct.op* %165 to %struct.unop*
  %op_first335 = getelementptr inbounds %struct.unop, %struct.unop* %166, i32 0, i32 7
  %167 = load %struct.op*, %struct.op** %op_first335, align 8
  %tobool336 = icmp ne %struct.op* %167, null
  br i1 %tobool336, label %land.lhs.true337, label %if.end371

land.lhs.true337:                                 ; preds = %if.then328
  %168 = load %struct.op*, %struct.op** %o, align 8
  %169 = bitcast %struct.op* %168 to %struct.unop*
  %op_first338 = getelementptr inbounds %struct.unop, %struct.unop* %169, i32 0, i32 7
  %170 = load %struct.op*, %struct.op** %op_first338, align 8
  %op_type339 = getelementptr inbounds %struct.op, %struct.op* %170, i32 0, i32 4
  %bf.load340 = load i16, i16* %op_type339, align 8
  %bf.clear341 = and i16 %bf.load340, 511
  %bf.cast342 = zext i16 %bf.clear341 to i32
  %cmp343 = icmp eq i32 %bf.cast342, 0
  br i1 %cmp343, label %cond.true345, label %cond.false348

cond.true345:                                     ; preds = %land.lhs.true337
  %171 = load %struct.op*, %struct.op** %o, align 8
  %172 = bitcast %struct.op* %171 to %struct.unop*
  %op_first346 = getelementptr inbounds %struct.unop, %struct.unop* %172, i32 0, i32 7
  %173 = load %struct.op*, %struct.op** %op_first346, align 8
  %op_targ347 = getelementptr inbounds %struct.op, %struct.op* %173, i32 0, i32 3
  %174 = load i64, i64* %op_targ347, align 8
  br label %cond.end355

cond.false348:                                    ; preds = %land.lhs.true337
  %175 = load %struct.op*, %struct.op** %o, align 8
  %176 = bitcast %struct.op* %175 to %struct.unop*
  %op_first349 = getelementptr inbounds %struct.unop, %struct.unop* %176, i32 0, i32 7
  %177 = load %struct.op*, %struct.op** %op_first349, align 8
  %op_type350 = getelementptr inbounds %struct.op, %struct.op* %177, i32 0, i32 4
  %bf.load351 = load i16, i16* %op_type350, align 8
  %bf.clear352 = and i16 %bf.load351, 511
  %bf.cast353 = zext i16 %bf.clear352 to i32
  %conv354 = zext i32 %bf.cast353 to i64
  br label %cond.end355

cond.end355:                                      ; preds = %cond.false348, %cond.true345
  %cond356 = phi i64 [ %174, %cond.true345 ], [ %conv354, %cond.false348 ]
  %cmp357 = icmp eq i64 %cond356, 138
  br i1 %cmp357, label %if.then359, label %if.end371

if.then359:                                       ; preds = %cond.end355
  %178 = load i8, i8* %ok, align 1
  %tobool360 = trunc i8 %178 to i1
  br i1 %tobool360, label %land.rhs362, label %land.end369

land.rhs362:                                      ; preds = %if.then359
  %179 = load %struct.op*, %struct.op** %o, align 8
  %op_flags363 = getelementptr inbounds %struct.op, %struct.op* %179, i32 0, i32 5
  %180 = load i8, i8* %op_flags363, align 2
  %conv364 = zext i8 %180 to i32
  %and365 = and i32 %conv364, 128
  %tobool366 = icmp ne i32 %and365, 0
  %181 = zext i1 %tobool366 to i64
  %cond367 = select i1 %tobool366, i32 1, i32 0
  %tobool368 = icmp ne i32 %cond367, 0
  br label %land.end369

land.end369:                                      ; preds = %land.rhs362, %if.then359
  %182 = phi i1 [ false, %if.then359 ], [ %tobool368, %land.rhs362 ]
  %frombool370 = zext i1 %182 to i8
  store i8 %frombool370, i8* %ok, align 1
  br label %if.end371

if.end371:                                        ; preds = %land.end369, %cond.end355, %if.then328
  br label %if.end379

if.else372:                                       ; preds = %if.else321
  %183 = load %struct.op*, %struct.op** %o, align 8
  %op_private373 = getelementptr inbounds %struct.op, %struct.op* %183, i32 0, i32 6
  %184 = load i8, i8* %op_private373, align 1
  %conv374 = zext i8 %184 to i32
  %and375 = and i32 %conv374, 48
  %cmp376 = icmp ne i32 %and375, 48
  %frombool378 = zext i1 %cmp376 to i8
  store i8 %frombool378, i8* %ok, align 1
  br label %if.end379

if.end379:                                        ; preds = %if.else372, %if.end371
  br label %if.end380

if.end380:                                        ; preds = %if.end379, %if.then314
  br label %if.end381

if.end381:                                        ; preds = %if.end380, %land.end305
  br label %if.end382

if.end382:                                        ; preds = %if.end381, %if.then267
  %185 = load i8, i8* %ok, align 1
  %tobool383 = trunc i8 %185 to i1
  br i1 %tobool383, label %if.then384, label %if.else402

if.then384:                                       ; preds = %if.end382
  %186 = load %struct.op*, %struct.op** %first_elem_op, align 8
  %tobool385 = icmp ne %struct.op* %186, null
  br i1 %tobool385, label %if.end387, label %if.then386

if.then386:                                       ; preds = %if.then384
  %187 = load %struct.op*, %struct.op** %o, align 8
  store %struct.op* %187, %struct.op** %first_elem_op, align 8
  br label %if.end387

if.end387:                                        ; preds = %if.then386, %if.then384
  %188 = load %struct.op*, %struct.op** %o, align 8
  store %struct.op* %188, %struct.op** %top_op, align 8
  %189 = load i8, i8* %is_deref, align 1
  %tobool388 = trunc i8 %189 to i1
  br i1 %tobool388, label %if.then389, label %if.else399

if.then389:                                       ; preds = %if.end387
  %190 = load %struct.op*, %struct.op** %o, align 8
  %op_private390 = getelementptr inbounds %struct.op, %struct.op* %190, i32 0, i32 6
  %191 = load i8, i8* %op_private390, align 1
  %conv391 = zext i8 %191 to i32
  %and392 = and i32 %conv391, 48
  %cmp393 = icmp eq i32 %and392, 32
  %192 = zext i1 %cmp393 to i64
  %cond395 = select i1 %cmp393, i32 1, i32 0
  %tobool396 = icmp ne i32 %cond395, 0
  %frombool397 = zext i1 %tobool396 to i8
  store i8 %frombool397, i8* %next_is_hash, align 1
  %193 = load %struct.op*, %struct.op** %o, align 8
  %op_next398 = getelementptr inbounds %struct.op, %struct.op* %193, i32 0, i32 0
  %194 = load %struct.op*, %struct.op** %op_next398, align 8
  store %struct.op* %194, %struct.op** %o, align 8
  br label %if.end401

if.else399:                                       ; preds = %if.end387
  store i8 1, i8* %is_last, align 1
  %195 = load i64, i64* %action, align 8
  %or400 = or i64 %195, 64
  store i64 %or400, i64* %action, align 8
  br label %if.end401

if.end401:                                        ; preds = %if.else399, %if.then389
  br label %if.end407

if.else402:                                       ; preds = %if.end382
  %196 = load i32, i32* %action_count, align 4
  %tobool403 = icmp ne i32 %196, 0
  br i1 %tobool403, label %if.end405, label %if.then404

if.then404:                                       ; preds = %if.else402
  br label %for.end

if.end405:                                        ; preds = %if.else402
  store i8 1, i8* %is_last, align 1
  %197 = load i32, i32* %action_count, align 4
  store i32 %197, i32* %index_skip, align 4
  %198 = load i64, i64* %action, align 8
  %or406 = or i64 %198, 64
  store i64 %or406, i64* %action, align 8
  br label %if.end407

if.end407:                                        ; preds = %if.end405, %if.end401
  %199 = load i32, i32* %pass, align 4
  %tobool408 = icmp ne i32 %199, 0
  br i1 %tobool408, label %if.then409, label %if.end412

if.then409:                                       ; preds = %if.end407
  %200 = load i64, i64* %action, align 8
  %201 = load i32, i32* %action_ix, align 4
  %mul = mul nsw i32 %201, 7
  %sh_prom = zext i32 %mul to i64
  %shl = shl i64 %200, %sh_prom
  %202 = load %union.UNOP_AUX_item*, %union.UNOP_AUX_item** %action_ptr, align 8
  %uv410 = bitcast %union.UNOP_AUX_item* %202 to i64*
  %203 = load i64, i64* %uv410, align 8
  %or411 = or i64 %203, %shl
  store i64 %or411, i64* %uv410, align 8
  br label %if.end412

if.end412:                                        ; preds = %if.then409, %if.end407
  %204 = load i32, i32* %action_ix, align 4
  %inc = add nsw i32 %204, 1
  store i32 %inc, i32* %action_ix, align 4
  %205 = load i32, i32* %action_count, align 4
  %inc413 = add nsw i32 %205, 1
  store i32 %inc413, i32* %action_count, align 4
  %206 = load i32, i32* %action_ix, align 4
  %add = add nsw i32 %206, 1
  %mul414 = mul nsw i32 %add, 7
  %cmp415 = icmp sgt i32 %mul414, 64
  br i1 %cmp415, label %if.then417, label %if.end423

if.then417:                                       ; preds = %if.end412
  %207 = load %union.UNOP_AUX_item*, %union.UNOP_AUX_item** %arg, align 8
  store %union.UNOP_AUX_item* %207, %union.UNOP_AUX_item** %action_ptr, align 8
  %208 = load i32, i32* %pass, align 4
  %tobool418 = icmp ne i32 %208, 0
  br i1 %tobool418, label %if.then419, label %if.end421

if.then419:                                       ; preds = %if.then417
  %209 = load %union.UNOP_AUX_item*, %union.UNOP_AUX_item** %arg, align 8
  %uv420 = bitcast %union.UNOP_AUX_item* %209 to i64*
  store i64 0, i64* %uv420, align 8
  br label %if.end421

if.end421:                                        ; preds = %if.then419, %if.then417
  %210 = load %union.UNOP_AUX_item*, %union.UNOP_AUX_item** %arg, align 8
  %incdec.ptr422 = getelementptr inbounds %union.UNOP_AUX_item, %union.UNOP_AUX_item* %210, i32 1
  store %union.UNOP_AUX_item* %incdec.ptr422, %union.UNOP_AUX_item** %arg, align 8
  store i32 0, i32* %action_ix, align 4
  br label %if.end423

if.end423:                                        ; preds = %if.end421, %if.end412
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %211 = load i32, i32* %pass, align 4
  %tobool424 = icmp ne i32 %211, 0
  br i1 %tobool424, label %if.then425, label %if.else527

if.then425:                                       ; preds = %while.end
  %212 = load %union.UNOP_AUX_item*, %union.UNOP_AUX_item** %arg_buf, align 8
  %call426 = call %struct.op* @Perl_newUNOP_AUX(i32 153, i32 0, %struct.op* null, %union.UNOP_AUX_item* %212)
  store %struct.op* %call426, %struct.op** %mderef, align 8
  %213 = load i32, i32* %index_skip, align 4
  %cmp427 = icmp eq i32 %213, -1
  br i1 %cmp427, label %if.then429, label %if.end464

if.then429:                                       ; preds = %if.then425
  %214 = load %struct.op*, %struct.op** %o, align 8
  %op_flags430 = getelementptr inbounds %struct.op, %struct.op* %214, i32 0, i32 5
  %215 = load i8, i8* %op_flags430, align 2
  %conv431 = zext i8 %215 to i32
  %216 = load i8, i8* %next_is_hash, align 1
  %tobool432 = trunc i8 %216 to i1
  %217 = zext i1 %tobool432 to i64
  %cond434 = select i1 %tobool432, i32 128, i32 0
  %or435 = or i32 35, %cond434
  %and436 = and i32 %conv431, %or435
  %conv437 = trunc i32 %and436 to i8
  %218 = load %struct.op*, %struct.op** %mderef, align 8
  %op_flags438 = getelementptr inbounds %struct.op, %struct.op* %218, i32 0, i32 5
  store i8 %conv437, i8* %op_flags438, align 2
  %219 = load %struct.op*, %struct.op** %o, align 8
  %op_type439 = getelementptr inbounds %struct.op, %struct.op* %219, i32 0, i32 4
  %bf.load440 = load i16, i16* %op_type439, align 8
  %bf.clear441 = and i16 %bf.load440, 511
  %bf.cast442 = zext i16 %bf.clear441 to i32
  %cmp443 = icmp eq i32 %bf.cast442, 148
  br i1 %cmp443, label %if.then445, label %if.else447

if.then445:                                       ; preds = %if.then429
  %220 = load %struct.op*, %struct.op** %mderef, align 8
  %op_private446 = getelementptr inbounds %struct.op, %struct.op* %220, i32 0, i32 6
  store i8 16, i8* %op_private446, align 1
  br label %if.end463

if.else447:                                       ; preds = %if.then429
  %221 = load %struct.op*, %struct.op** %o, align 8
  %op_type448 = getelementptr inbounds %struct.op, %struct.op* %221, i32 0, i32 4
  %bf.load449 = load i16, i16* %op_type448, align 8
  %bf.clear450 = and i16 %bf.load449, 511
  %bf.cast451 = zext i16 %bf.clear450 to i32
  %cmp452 = icmp eq i32 %bf.cast451, 147
  br i1 %cmp452, label %if.then454, label %if.else456

if.then454:                                       ; preds = %if.else447
  %222 = load %struct.op*, %struct.op** %mderef, align 8
  %op_private455 = getelementptr inbounds %struct.op, %struct.op* %222, i32 0, i32 6
  store i8 32, i8* %op_private455, align 1
  br label %if.end462

if.else456:                                       ; preds = %if.else447
  %223 = load %struct.op*, %struct.op** %o, align 8
  %op_private457 = getelementptr inbounds %struct.op, %struct.op* %223, i32 0, i32 6
  %224 = load i8, i8* %op_private457, align 1
  %conv458 = zext i8 %224 to i32
  %and459 = and i32 %conv458, 200
  %conv460 = trunc i32 %and459 to i8
  %225 = load %struct.op*, %struct.op** %mderef, align 8
  %op_private461 = getelementptr inbounds %struct.op, %struct.op* %225, i32 0, i32 6
  store i8 %conv460, i8* %op_private461, align 1
  br label %if.end462

if.end462:                                        ; preds = %if.else456, %if.then454
  br label %if.end463

if.end463:                                        ; preds = %if.end462, %if.then445
  br label %if.end464

if.end464:                                        ; preds = %if.end463, %if.then425
  %226 = load i8, i8* %hints.addr, align 1
  %conv465 = zext i8 %226 to i32
  %227 = load %struct.op*, %struct.op** %mderef, align 8
  %op_private466 = getelementptr inbounds %struct.op, %struct.op* %227, i32 0, i32 6
  %228 = load i8, i8* %op_private466, align 1
  %conv467 = zext i8 %228 to i32
  %or468 = or i32 %conv467, %conv465
  %conv469 = trunc i32 %or468 to i8
  store i8 %conv469, i8* %op_private466, align 1
  %229 = load i8, i8* %reset_start_targ, align 1
  %tobool470 = trunc i8 %229 to i1
  br i1 %tobool470, label %if.then471, label %if.end473

if.then471:                                       ; preds = %if.end464
  %230 = load %struct.op*, %struct.op** %start.addr, align 8
  %op_targ472 = getelementptr inbounds %struct.op, %struct.op* %230, i32 0, i32 3
  store i64 0, i64* %op_targ472, align 8
  br label %if.end473

if.end473:                                        ; preds = %if.then471, %if.end464
  %231 = load %struct.op*, %struct.op** %first_elem_op, align 8
  store %struct.op* %231, %struct.op** %p, align 8
  %232 = load i64, i64* %orig_action.addr, align 8
  %cmp474 = icmp eq i64 %232, 1
  br i1 %cmp474, label %if.then479, label %lor.lhs.false476

lor.lhs.false476:                                 ; preds = %if.end473
  %233 = load i64, i64* %orig_action.addr, align 8
  %cmp477 = icmp eq i64 %233, 8
  br i1 %cmp477, label %if.then479, label %if.else496

if.then479:                                       ; preds = %lor.lhs.false476, %if.end473
  %234 = load %struct.op*, %struct.op** %p, align 8
  %op_type480 = getelementptr inbounds %struct.op, %struct.op* %234, i32 0, i32 4
  %bf.load481 = load i16, i16* %op_type480, align 8
  %bf.clear482 = and i16 %bf.load481, 511
  %bf.cast483 = zext i16 %bf.clear482 to i32
  %cmp484 = icmp eq i32 %bf.cast483, 148
  br i1 %cmp484, label %if.then493, label %lor.lhs.false486

lor.lhs.false486:                                 ; preds = %if.then479
  %235 = load %struct.op*, %struct.op** %p, align 8
  %op_type487 = getelementptr inbounds %struct.op, %struct.op* %235, i32 0, i32 4
  %bf.load488 = load i16, i16* %op_type487, align 8
  %bf.clear489 = and i16 %bf.load488, 511
  %bf.cast490 = zext i16 %bf.clear489 to i32
  %cmp491 = icmp eq i32 %bf.cast490, 147
  br i1 %cmp491, label %if.then493, label %if.end495

if.then493:                                       ; preds = %lor.lhs.false486, %if.then479
  %236 = load %struct.op*, %struct.op** %p, align 8
  %237 = bitcast %struct.op* %236 to %struct.unop*
  %op_first494 = getelementptr inbounds %struct.unop, %struct.unop* %237, i32 0, i32 7
  %238 = load %struct.op*, %struct.op** %op_first494, align 8
  store %struct.op* %238, %struct.op** %p, align 8
  br label %if.end495

if.end495:                                        ; preds = %if.then493, %lor.lhs.false486
  br label %if.end510

if.else496:                                       ; preds = %lor.lhs.false476
  br label %while.cond497

while.cond497:                                    ; preds = %while.body507, %if.else496
  %239 = load %struct.op*, %struct.op** %p, align 8
  %op_flags498 = getelementptr inbounds %struct.op, %struct.op* %239, i32 0, i32 5
  %240 = load i8, i8* %op_flags498, align 2
  %conv499 = zext i8 %240 to i32
  %and500 = and i32 %conv499, 4
  %tobool501 = icmp ne i32 %and500, 0
  br i1 %tobool501, label %land.rhs502, label %land.end506

land.rhs502:                                      ; preds = %while.cond497
  %241 = load %struct.op*, %struct.op** %p, align 8
  %242 = bitcast %struct.op* %241 to %struct.unop*
  %op_first503 = getelementptr inbounds %struct.unop, %struct.unop* %242, i32 0, i32 7
  %243 = load %struct.op*, %struct.op** %op_first503, align 8
  %244 = load %struct.op*, %struct.op** %start.addr, align 8
  %cmp504 = icmp ne %struct.op* %243, %244
  br label %land.end506

land.end506:                                      ; preds = %land.rhs502, %while.cond497
  %245 = phi i1 [ false, %while.cond497 ], [ %cmp504, %land.rhs502 ]
  br i1 %245, label %while.body507, label %while.end509

while.body507:                                    ; preds = %land.end506
  %246 = load %struct.op*, %struct.op** %p, align 8
  %247 = bitcast %struct.op* %246 to %struct.unop*
  %op_first508 = getelementptr inbounds %struct.unop, %struct.unop* %247, i32 0, i32 7
  %248 = load %struct.op*, %struct.op** %op_first508, align 8
  store %struct.op* %248, %struct.op** %p, align 8
  br label %while.cond497

while.end509:                                     ; preds = %land.end506
  br label %if.end510

if.end510:                                        ; preds = %while.end509, %if.end495
  %249 = load %struct.op*, %struct.op** %mderef, align 8
  %250 = load %struct.op*, %struct.op** %p, align 8
  %call511 = call %struct.op* @Perl_op_sibling_splice(%struct.op* %250, %struct.op* null, i32 1, %struct.op* null)
  %call512 = call %struct.op* @Perl_op_sibling_splice(%struct.op* %249, %struct.op* null, i32 0, %struct.op* %call511)
  %251 = load %struct.op*, %struct.op** %start.addr, align 8
  call void @Perl_op_null(%struct.op* %251)
  %252 = load %struct.op*, %struct.op** %mderef, align 8
  %253 = load %struct.op*, %struct.op** %start.addr, align 8
  %op_next513 = getelementptr inbounds %struct.op, %struct.op* %253, i32 0, i32 0
  store %struct.op* %252, %struct.op** %op_next513, align 8
  %254 = load i32, i32* %index_skip, align 4
  %cmp514 = icmp eq i32 %254, -1
  br i1 %cmp514, label %cond.true516, label %cond.false518

cond.true516:                                     ; preds = %if.end510
  %255 = load %struct.op*, %struct.op** %o, align 8
  %op_next517 = getelementptr inbounds %struct.op, %struct.op* %255, i32 0, i32 0
  %256 = load %struct.op*, %struct.op** %op_next517, align 8
  br label %cond.end519

cond.false518:                                    ; preds = %if.end510
  %257 = load %struct.op*, %struct.op** %o, align 8
  br label %cond.end519

cond.end519:                                      ; preds = %cond.false518, %cond.true516
  %cond520 = phi %struct.op* [ %256, %cond.true516 ], [ %257, %cond.false518 ]
  %258 = load %struct.op*, %struct.op** %mderef, align 8
  %op_next521 = getelementptr inbounds %struct.op, %struct.op* %258, i32 0, i32 0
  store %struct.op* %cond520, %struct.op** %op_next521, align 8
  %259 = load %struct.op*, %struct.op** %top_op, align 8
  %260 = load %struct.op*, %struct.op** %mderef, align 8
  %call522 = call %struct.op* @Perl_op_sibling_splice(%struct.op* %259, %struct.op* null, i32 -1, %struct.op* %260)
  store %struct.op* %call522, %struct.op** %p, align 8
  br label %while.cond523

while.cond523:                                    ; preds = %while.body525, %cond.end519
  %261 = load %struct.op*, %struct.op** %p, align 8
  %tobool524 = icmp ne %struct.op* %261, null
  br i1 %tobool524, label %while.body525, label %while.end526

while.body525:                                    ; preds = %while.cond523
  %262 = load %struct.op*, %struct.op** %p, align 8
  %op_sibling = getelementptr inbounds %struct.op, %struct.op* %262, i32 0, i32 1
  %263 = load %struct.op*, %struct.op** %op_sibling, align 8
  %add.ptr = getelementptr inbounds %struct.op, %struct.op* %263, i64 0
  store %struct.op* %add.ptr, %struct.op** %q, align 8
  %264 = load %struct.op*, %struct.op** %p, align 8
  call void @Perl_op_free(%struct.op* %264)
  %265 = load %struct.op*, %struct.op** %q, align 8
  store %struct.op* %265, %struct.op** %p, align 8
  br label %while.cond523

while.end526:                                     ; preds = %while.cond523
  %266 = load %struct.op*, %struct.op** %top_op, align 8
  call void @Perl_op_null(%struct.op* %266)
  br label %if.end540

if.else527:                                       ; preds = %while.end
  %267 = load %union.UNOP_AUX_item*, %union.UNOP_AUX_item** %arg, align 8
  %268 = load %union.UNOP_AUX_item*, %union.UNOP_AUX_item** %arg_buf, align 8
  %sub.ptr.lhs.cast = ptrtoint %union.UNOP_AUX_item* %267 to i64
  %sub.ptr.rhs.cast = ptrtoint %union.UNOP_AUX_item* %268 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 8
  store i64 %sub.ptr.div, i64* %size, align 8
  %269 = load i8, i8* %maybe_aelemfast, align 1
  %tobool528 = trunc i8 %269 to i1
  br i1 %tobool528, label %land.lhs.true530, label %if.end534

land.lhs.true530:                                 ; preds = %if.else527
  %270 = load i32, i32* %action_count, align 4
  %cmp531 = icmp eq i32 %270, 1
  br i1 %cmp531, label %if.then533, label %if.end534

if.then533:                                       ; preds = %land.lhs.true530
  br label %for.end

if.end534:                                        ; preds = %land.lhs.true530, %if.else527
  %271 = load i64, i64* %size, align 8
  %add535 = add i64 %271, 1
  %mul536 = mul i64 8, %add535
  %call537 = call noalias i8* @malloc(i64 %mul536) #5
  %272 = bitcast i8* %call537 to %union.UNOP_AUX_item*
  store %union.UNOP_AUX_item* %272, %union.UNOP_AUX_item** %arg_buf, align 8
  %273 = load i64, i64* %size, align 8
  %274 = load %union.UNOP_AUX_item*, %union.UNOP_AUX_item** %arg_buf, align 8
  %uv538 = bitcast %union.UNOP_AUX_item* %274 to i64*
  store i64 %273, i64* %uv538, align 8
  %275 = load %union.UNOP_AUX_item*, %union.UNOP_AUX_item** %arg_buf, align 8
  %incdec.ptr539 = getelementptr inbounds %union.UNOP_AUX_item, %union.UNOP_AUX_item* %275, i32 1
  store %union.UNOP_AUX_item* %incdec.ptr539, %union.UNOP_AUX_item** %arg_buf, align 8
  br label %if.end540

if.end540:                                        ; preds = %if.end534, %while.end526
  br label %for.inc

for.inc:                                          ; preds = %if.end540
  %276 = load i32, i32* %pass, align 4
  %inc541 = add nsw i32 %276, 1
  store i32 %inc541, i32* %pass, align 4
  br label %for.cond

for.end:                                          ; preds = %sw.default, %if.then24, %if.then28, %if.then222, %if.then404, %if.then533, %for.cond
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @Perl_rpeep(%struct.op* %o) #0 {
entry:
  %o.addr = alloca %struct.op*, align 8
  %oldop = alloca %struct.op*, align 8
  %oldoldop = alloca %struct.op*, align 8
  %defer_queue = alloca [4 x %struct.op**], align 16
  %defer_base = alloca i32, align 4
  %defer_ix = alloca i32, align 4
  %fop = alloca %struct.op*, align 8
  %sop = alloca %struct.op*, align 8
  %defer = alloca %struct.op**, align 8
  %action = alloca i64, align 8
  %o2 = alloca %struct.op*, align 8
  %hints = alloca i8, align 1
  %next = alloca %struct.op*, align 8
  %sibling = alloca %struct.op*, align 8
  %top = alloca %struct.op*, align 8
  %pad1 = alloca %struct.op*, align 8
  %ns2 = alloca %struct.op*, align 8
  %pad2 = alloca %struct.op*, align 8
  %ns3 = alloca %struct.op*, align 8
  %newop = alloca %struct.op*, align 8
  %newpm = alloca %struct.op*, align 8
  %nextop = alloca %struct.op*, align 8
  %kid = alloca %struct.op*, align 8
  %p = alloca %struct.op*, align 8
  %followop = alloca %struct.op*, align 8
  %count = alloca i8, align 1
  %intro = alloca i8, align 1
  %base = alloca i64, align 8
  %gvoid = alloca i8, align 1
  %defav = alloca i8, align 1
  %reuse = alloca i8, align 1
  %rv2av = alloca %struct.op*, align 8
  %q = alloca %struct.op*, align 8
  %old_count = alloca i8, align 1
  %pop = alloca %struct.op*, align 8
  %i = alloca i64, align 8
  %gv = alloca %struct.gv*, align 8
  %defer1500 = alloca %struct.op**, align 8
  %nop = alloca %struct.op*, align 8
  %lop = alloca %struct.op*, align 8
  %defer1778 = alloca %struct.op**, align 8
  %defer1833 = alloca %struct.op**, align 8
  %defer1852 = alloca %struct.op**, align 8
  %defer1890 = alloca %struct.op**, align 8
  %oright = alloca %struct.op*, align 8
  %nullop = alloca %struct.op*, align 8
  %kid1914 = alloca %struct.op*, align 8
  %defer1923 = alloca %struct.op**, align 8
  %reverse = alloca %struct.op*, align 8
  %pushmark = alloca %struct.op*, align 8
  %ourmark = alloca %struct.op*, align 8
  %theirmark = alloca %struct.op*, align 8
  %ourlast = alloca %struct.op*, align 8
  %iter = alloca %struct.op*, align 8
  %expushmark = alloca %struct.op*, align 8
  %rv2av1999 = alloca %struct.op*, align 8
  %gvop = alloca %struct.op*, align 8
  %enter = alloca %struct.listop*, align 8
  %exlist = alloca %struct.listop*, align 8
  %sv = alloca %struct.sv*, align 8
  %right = alloca %struct.op*, align 8
  %left = alloca %struct.op*, align 8
  %cpeep = alloca void (%struct.op*, %struct.op*)*, align 8
  %coerce = alloca %union.XOPRETANY, align 8
  store %struct.op* %o, %struct.op** %o.addr, align 8
  store %struct.op* null, %struct.op** %oldop, align 8
  store %struct.op* null, %struct.op** %oldoldop, align 8
  store i32 0, i32* %defer_base, align 4
  store i32 -1, i32* %defer_ix, align 4
  %0 = load %struct.op*, %struct.op** %o.addr, align 8
  %tobool = icmp ne %struct.op* %0, null
  br i1 %tobool, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %entry
  %1 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_opt = getelementptr inbounds %struct.op, %struct.op* %1, i32 0, i32 4
  %bf.load = load i16, i16* %op_opt, align 8
  %bf.lshr = lshr i16 %bf.load, 9
  %bf.clear = and i16 %bf.lshr, 1
  %bf.cast = zext i16 %bf.clear to i32
  %tobool1 = icmp ne i32 %bf.cast, 0
  br i1 %tobool1, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  call void @Perl_push_scope()
  %2 = load %struct.op*, %struct.op** @PL_op, align 8
  %3 = bitcast %struct.op* %2 to i8*
  call void @Perl_save_pushptr(i8* %3, i32 18)
  call void @Perl_save_vptr(i8* bitcast (%struct.cop** @PL_curcop to i8*))
  br label %for.cond

for.cond:                                         ; preds = %for.inc2384, %if.end
  %4 = load %struct.op*, %struct.op** %o.addr, align 8
  %tobool2 = icmp ne %struct.op* %4, null
  br i1 %tobool2, label %land.lhs.true, label %if.end10

land.lhs.true:                                    ; preds = %for.cond
  %5 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_opt3 = getelementptr inbounds %struct.op, %struct.op* %5, i32 0, i32 4
  %bf.load4 = load i16, i16* %op_opt3, align 8
  %bf.lshr5 = lshr i16 %bf.load4, 9
  %bf.clear6 = and i16 %bf.lshr5, 1
  %bf.cast7 = zext i16 %bf.clear6 to i32
  %tobool8 = icmp ne i32 %bf.cast7, 0
  br i1 %tobool8, label %if.then9, label %if.end10

if.then9:                                         ; preds = %land.lhs.true
  store %struct.op* null, %struct.op** %o.addr, align 8
  br label %if.end10

if.end10:                                         ; preds = %if.then9, %land.lhs.true, %for.cond
  %6 = load %struct.op*, %struct.op** %o.addr, align 8
  %tobool11 = icmp ne %struct.op* %6, null
  br i1 %tobool11, label %if.end13, label %if.then12

if.then12:                                        ; preds = %if.end10
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.then12
  %7 = load i32, i32* %defer_ix, align 4
  %cmp = icmp sge i32 %7, 0
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %8 = load i32, i32* %defer_base, align 4
  %9 = load i32, i32* %defer_ix, align 4
  %dec = add nsw i32 %9, -1
  store i32 %dec, i32* %defer_ix, align 4
  %add = add nsw i32 %8, %9
  %rem = srem i32 %add, 4
  %idxprom = sext i32 %rem to i64
  %arrayidx = getelementptr inbounds [4 x %struct.op**], [4 x %struct.op**]* %defer_queue, i64 0, i64 %idxprom
  %10 = load %struct.op**, %struct.op*** %arrayidx, align 8
  store %struct.op** %10, %struct.op*** %defer, align 8
  %11 = load void (%struct.op*)*, void (%struct.op*)** @PL_rpeepp, align 8
  %12 = load %struct.op**, %struct.op*** %defer, align 8
  %13 = load %struct.op*, %struct.op** %12, align 8
  call void %11(%struct.op* %13)
  %14 = load %struct.op**, %struct.op*** %defer, align 8
  call void @S_prune_chain_head(%struct.op** %14)
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %for.end2386

if.end13:                                         ; preds = %if.end10
  br label %redo

redo:                                             ; preds = %if.then1261, %if.end13
  %15 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_opt14 = getelementptr inbounds %struct.op, %struct.op* %15, i32 0, i32 4
  %bf.load15 = load i16, i16* %op_opt14, align 8
  %bf.clear16 = and i16 %bf.load15, -513
  %bf.set = or i16 %bf.clear16, 512
  store i16 %bf.set, i16* %op_opt14, align 8
  %16 = load %struct.op*, %struct.op** %o.addr, align 8
  store %struct.op* %16, %struct.op** @PL_op, align 8
  %17 = load %struct.op*, %struct.op** %o.addr, align 8
  store %struct.op* %17, %struct.op** %o2, align 8
  store i8 0, i8* %hints, align 1
  %18 = load %struct.op*, %struct.op** %o2, align 8
  %op_type = getelementptr inbounds %struct.op, %struct.op* %18, i32 0, i32 4
  %bf.load17 = load i16, i16* %op_type, align 8
  %bf.clear18 = and i16 %bf.load17, 511
  %bf.cast19 = zext i16 %bf.clear18 to i32
  switch i32 %bf.cast19, label %sw.default [
    i32 7, label %sw.bb
    i32 9, label %sw.bb80
    i32 10, label %sw.bb116
    i32 11, label %sw.bb116
    i32 135, label %sw.bb138
    i32 149, label %sw.bb138
  ]

sw.bb:                                            ; preds = %redo
  %19 = load %struct.op*, %struct.op** %o2, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %19, i32 0, i32 0
  %20 = load %struct.op*, %struct.op** %op_next, align 8
  store %struct.op* %20, %struct.op** %o2, align 8
  %21 = load %struct.op*, %struct.op** %o2, align 8
  %op_type20 = getelementptr inbounds %struct.op, %struct.op* %21, i32 0, i32 4
  %bf.load21 = load i16, i16* %op_type20, align 8
  %bf.clear22 = and i16 %bf.load21, 511
  %bf.cast23 = zext i16 %bf.clear22 to i32
  %cmp24 = icmp eq i32 %bf.cast23, 135
  br i1 %cmp24, label %if.then25, label %if.end26

if.then25:                                        ; preds = %sw.bb
  store i64 6, i64* %action, align 8
  br label %do_deref

if.end26:                                         ; preds = %sw.bb
  %22 = load %struct.op*, %struct.op** %o2, align 8
  %op_type27 = getelementptr inbounds %struct.op, %struct.op* %22, i32 0, i32 4
  %bf.load28 = load i16, i16* %op_type27, align 8
  %bf.clear29 = and i16 %bf.load28, 511
  %bf.cast30 = zext i16 %bf.clear29 to i32
  %cmp31 = icmp eq i32 %bf.cast30, 149
  br i1 %cmp31, label %if.then32, label %if.end33

if.then32:                                        ; preds = %if.end26
  store i64 13, i64* %action, align 8
  br label %do_deref

if.end33:                                         ; preds = %if.end26
  %23 = load %struct.op*, %struct.op** %o2, align 8
  %op_type34 = getelementptr inbounds %struct.op, %struct.op* %23, i32 0, i32 4
  %bf.load35 = load i16, i16* %op_type34, align 8
  %bf.clear36 = and i16 %bf.load35, 511
  %bf.cast37 = zext i16 %bf.clear36 to i32
  %cmp38 = icmp ne i32 %bf.cast37, 15
  br i1 %cmp38, label %if.then39, label %if.end40

if.then39:                                        ; preds = %if.end33
  br label %sw.epilog

if.end40:                                         ; preds = %if.end33
  %24 = load %struct.op*, %struct.op** %o2, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %24, i32 0, i32 5
  %25 = load i8, i8* %op_flags, align 2
  %conv = zext i8 %25 to i32
  %and = and i32 %conv, 179
  %cmp41 = icmp ne i32 %and, 34
  br i1 %cmp41, label %if.then43, label %if.end44

if.then43:                                        ; preds = %if.end40
  br label %sw.epilog

if.end44:                                         ; preds = %if.end40
  %26 = load %struct.op*, %struct.op** %o2, align 8
  %op_private = getelementptr inbounds %struct.op, %struct.op* %26, i32 0, i32 6
  %27 = load i8, i8* %op_private, align 1
  %conv45 = zext i8 %27 to i32
  %and46 = and i32 %conv45, 192
  %tobool47 = icmp ne i32 %and46, 0
  br i1 %tobool47, label %if.then48, label %if.end49

if.then48:                                        ; preds = %if.end44
  br label %sw.epilog

if.end49:                                         ; preds = %if.end44
  %28 = load %struct.op*, %struct.op** %o2, align 8
  %op_private50 = getelementptr inbounds %struct.op, %struct.op* %28, i32 0, i32 6
  %29 = load i8, i8* %op_private50, align 1
  %conv51 = zext i8 %29 to i32
  %and52 = and i32 %conv51, 48
  %cmp53 = icmp ne i32 %and52, 16
  br i1 %cmp53, label %land.lhs.true55, label %if.end62

land.lhs.true55:                                  ; preds = %if.end49
  %30 = load %struct.op*, %struct.op** %o2, align 8
  %op_private56 = getelementptr inbounds %struct.op, %struct.op* %30, i32 0, i32 6
  %31 = load i8, i8* %op_private56, align 1
  %conv57 = zext i8 %31 to i32
  %and58 = and i32 %conv57, 48
  %cmp59 = icmp ne i32 %and58, 32
  br i1 %cmp59, label %if.then61, label %if.end62

if.then61:                                        ; preds = %land.lhs.true55
  br label %sw.epilog

if.end62:                                         ; preds = %land.lhs.true55, %if.end49
  %32 = load %struct.op*, %struct.op** %o2, align 8
  %op_next63 = getelementptr inbounds %struct.op, %struct.op* %32, i32 0, i32 0
  %33 = load %struct.op*, %struct.op** %op_next63, align 8
  store %struct.op* %33, %struct.op** %o2, align 8
  %34 = load %struct.op*, %struct.op** %o2, align 8
  %op_type64 = getelementptr inbounds %struct.op, %struct.op* %34, i32 0, i32 4
  %bf.load65 = load i16, i16* %op_type64, align 8
  %bf.clear66 = and i16 %bf.load65, 511
  %bf.cast67 = zext i16 %bf.clear66 to i32
  %cmp68 = icmp eq i32 %bf.cast67, 135
  br i1 %cmp68, label %if.then70, label %if.end71

if.then70:                                        ; preds = %if.end62
  store i64 2, i64* %action, align 8
  br label %do_deref

if.end71:                                         ; preds = %if.end62
  %35 = load %struct.op*, %struct.op** %o2, align 8
  %op_type72 = getelementptr inbounds %struct.op, %struct.op* %35, i32 0, i32 4
  %bf.load73 = load i16, i16* %op_type72, align 8
  %bf.clear74 = and i16 %bf.load73, 511
  %bf.cast75 = zext i16 %bf.clear74 to i32
  %cmp76 = icmp eq i32 %bf.cast75, 149
  br i1 %cmp76, label %if.then78, label %if.end79

if.then78:                                        ; preds = %if.end71
  store i64 9, i64* %action, align 8
  br label %do_deref

if.end79:                                         ; preds = %if.end71
  br label %sw.epilog

sw.bb80:                                          ; preds = %redo
  %36 = load %struct.op*, %struct.op** %o2, align 8
  %op_flags81 = getelementptr inbounds %struct.op, %struct.op* %36, i32 0, i32 5
  %37 = load i8, i8* %op_flags81, align 2
  %conv82 = zext i8 %37 to i32
  %and83 = and i32 %conv82, 179
  %cmp84 = icmp ne i32 %and83, 34
  br i1 %cmp84, label %if.then86, label %if.end87

if.then86:                                        ; preds = %sw.bb80
  br label %sw.epilog

if.end87:                                         ; preds = %sw.bb80
  %38 = load %struct.op*, %struct.op** %o2, align 8
  %op_private88 = getelementptr inbounds %struct.op, %struct.op* %38, i32 0, i32 6
  %39 = load i8, i8* %op_private88, align 1
  %conv89 = zext i8 %39 to i32
  %cmp90 = icmp ne i32 %conv89, 16
  br i1 %cmp90, label %land.lhs.true92, label %if.end98

land.lhs.true92:                                  ; preds = %if.end87
  %40 = load %struct.op*, %struct.op** %o2, align 8
  %op_private93 = getelementptr inbounds %struct.op, %struct.op* %40, i32 0, i32 6
  %41 = load i8, i8* %op_private93, align 1
  %conv94 = zext i8 %41 to i32
  %cmp95 = icmp ne i32 %conv94, 32
  br i1 %cmp95, label %if.then97, label %if.end98

if.then97:                                        ; preds = %land.lhs.true92
  br label %sw.epilog

if.end98:                                         ; preds = %land.lhs.true92, %if.end87
  %42 = load %struct.op*, %struct.op** %o2, align 8
  %op_next99 = getelementptr inbounds %struct.op, %struct.op* %42, i32 0, i32 0
  %43 = load %struct.op*, %struct.op** %op_next99, align 8
  store %struct.op* %43, %struct.op** %o2, align 8
  %44 = load %struct.op*, %struct.op** %o2, align 8
  %op_type100 = getelementptr inbounds %struct.op, %struct.op* %44, i32 0, i32 4
  %bf.load101 = load i16, i16* %op_type100, align 8
  %bf.clear102 = and i16 %bf.load101, 511
  %bf.cast103 = zext i16 %bf.clear102 to i32
  %cmp104 = icmp eq i32 %bf.cast103, 135
  br i1 %cmp104, label %if.then106, label %if.end107

if.then106:                                       ; preds = %if.end98
  store i64 3, i64* %action, align 8
  br label %do_deref

if.end107:                                        ; preds = %if.end98
  %45 = load %struct.op*, %struct.op** %o2, align 8
  %op_type108 = getelementptr inbounds %struct.op, %struct.op* %45, i32 0, i32 4
  %bf.load109 = load i16, i16* %op_type108, align 8
  %bf.clear110 = and i16 %bf.load109, 511
  %bf.cast111 = zext i16 %bf.clear110 to i32
  %cmp112 = icmp eq i32 %bf.cast111, 149
  br i1 %cmp112, label %if.then114, label %if.end115

if.then114:                                       ; preds = %if.end107
  store i64 10, i64* %action, align 8
  br label %do_deref

if.end115:                                        ; preds = %if.end107
  br label %sw.epilog

sw.bb116:                                         ; preds = %redo, %redo
  %46 = load %struct.op*, %struct.op** %o2, align 8
  %op_flags117 = getelementptr inbounds %struct.op, %struct.op* %46, i32 0, i32 5
  %47 = load i8, i8* %op_flags117, align 2
  %conv118 = zext i8 %47 to i32
  %and119 = and i32 %conv118, 179
  %cmp120 = icmp ne i32 %and119, 18
  br i1 %cmp120, label %if.then122, label %if.end123

if.then122:                                       ; preds = %sw.bb116
  br label %sw.epilog

if.end123:                                        ; preds = %sw.bb116
  %48 = load %struct.op*, %struct.op** %o2, align 8
  %op_flags124 = getelementptr inbounds %struct.op, %struct.op* %48, i32 0, i32 5
  %49 = load i8, i8* %op_flags124, align 2
  %conv125 = zext i8 %49 to i32
  %cmp126 = icmp ne i32 %conv125, 18
  br i1 %cmp126, label %if.then128, label %if.end129

if.then128:                                       ; preds = %if.end123
  br label %sw.epilog

if.end129:                                        ; preds = %if.end123
  %50 = load %struct.op*, %struct.op** %o2, align 8
  %op_type130 = getelementptr inbounds %struct.op, %struct.op* %50, i32 0, i32 4
  %bf.load131 = load i16, i16* %op_type130, align 8
  %bf.clear132 = and i16 %bf.load131, 511
  %bf.cast133 = zext i16 %bf.clear132 to i32
  %cmp134 = icmp eq i32 %bf.cast133, 10
  %51 = zext i1 %cmp134 to i64
  %cond = select i1 %cmp134, i32 5, i32 12
  %conv136 = sext i32 %cond to i64
  store i64 %conv136, i64* %action, align 8
  %52 = load %struct.op*, %struct.op** %o2, align 8
  %op_next137 = getelementptr inbounds %struct.op, %struct.op* %52, i32 0, i32 0
  %53 = load %struct.op*, %struct.op** %op_next137, align 8
  store %struct.op* %53, %struct.op** %o2, align 8
  %54 = load %struct.op*, %struct.op** %o.addr, align 8
  %55 = load %struct.op*, %struct.op** %o2, align 8
  %56 = load i64, i64* %action, align 8
  call void @S_maybe_multideref(%struct.op* %54, %struct.op* %55, i64 %56, i8 zeroext 0)
  br label %sw.epilog

sw.bb138:                                         ; preds = %redo, %redo
  %57 = load %struct.op*, %struct.op** %o2, align 8
  %op_type139 = getelementptr inbounds %struct.op, %struct.op* %57, i32 0, i32 4
  %bf.load140 = load i16, i16* %op_type139, align 8
  %bf.clear141 = and i16 %bf.load140, 511
  %bf.cast142 = zext i16 %bf.clear141 to i32
  %cmp143 = icmp eq i32 %bf.cast142, 135
  %58 = zext i1 %cmp143 to i64
  %cond145 = select i1 %cmp143, i32 1, i32 8
  %conv146 = sext i32 %cond145 to i64
  store i64 %conv146, i64* %action, align 8
  br label %do_deref

do_deref:                                         ; preds = %sw.bb138, %if.then114, %if.then106, %if.then78, %if.then70, %if.then32, %if.then25
  %59 = load %struct.op*, %struct.op** %o2, align 8
  %op_flags147 = getelementptr inbounds %struct.op, %struct.op* %59, i32 0, i32 5
  %60 = load i8, i8* %op_flags147, align 2
  %conv148 = zext i8 %60 to i32
  %cmp149 = icmp ne i32 %conv148, 22
  br i1 %cmp149, label %if.then151, label %if.end152

if.then151:                                       ; preds = %do_deref
  br label %sw.epilog

if.end152:                                        ; preds = %do_deref
  %61 = load %struct.op*, %struct.op** %o2, align 8
  %op_private153 = getelementptr inbounds %struct.op, %struct.op* %61, i32 0, i32 6
  %62 = load i8, i8* %op_private153, align 1
  %conv154 = zext i8 %62 to i32
  %and155 = and i32 %conv154, 2
  %63 = load i8, i8* %hints, align 1
  %conv156 = zext i8 %63 to i32
  %or = or i32 %conv156, %and155
  %conv157 = trunc i32 %or to i8
  store i8 %conv157, i8* %hints, align 1
  %64 = load %struct.op*, %struct.op** %o2, align 8
  %op_next158 = getelementptr inbounds %struct.op, %struct.op* %64, i32 0, i32 0
  %65 = load %struct.op*, %struct.op** %op_next158, align 8
  store %struct.op* %65, %struct.op** %o2, align 8
  %66 = load %struct.op*, %struct.op** %o.addr, align 8
  %67 = load %struct.op*, %struct.op** %o2, align 8
  %68 = load i64, i64* %action, align 8
  %69 = load i8, i8* %hints, align 1
  call void @S_maybe_multideref(%struct.op* %66, %struct.op* %67, i64 %68, i8 zeroext %69)
  br label %sw.epilog

sw.default:                                       ; preds = %redo
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %if.end152, %if.then151, %if.end129, %if.then128, %if.then122, %if.end115, %if.then97, %if.then86, %if.end79, %if.then61, %if.then48, %if.then43, %if.then39
  %70 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type159 = getelementptr inbounds %struct.op, %struct.op* %70, i32 0, i32 4
  %bf.load160 = load i16, i16* %op_type159, align 8
  %bf.clear161 = and i16 %bf.load160, 511
  %bf.cast162 = zext i16 %bf.clear161 to i32
  switch i32 %bf.cast162, label %sw.epilog2365 [
    i32 194, label %sw.bb163
    i32 193, label %sw.bb164
    i32 67, label %sw.bb443
    i32 1, label %sw.bb478
    i32 0, label %sw.bb486
    i32 2, label %sw.bb499
    i32 192, label %sw.bb499
    i32 198, label %sw.bb499
    i32 3, label %sw.bb508
    i32 10, label %sw.bb1039
    i32 9, label %sw.bb1039
    i32 11, label %sw.bb1039
    i32 7, label %sw.bb1064
    i32 103, label %sw.bb1343
    i32 176, label %sw.bb1408
    i32 177, label %sw.bb1408
    i32 179, label %sw.bb1408
    i32 180, label %sw.bb1695
    i32 172, label %sw.bb1760
    i32 170, label %sw.bb1760
    i32 181, label %sw.bb1760
    i32 182, label %sw.bb1760
    i32 183, label %sw.bb1760
    i32 173, label %sw.bb1760
    i32 379, label %sw.bb1760
    i32 201, label %sw.bb1792
    i32 199, label %sw.bb1792
    i32 344, label %sw.bb1847
    i32 33, label %sw.bb1866
    i32 167, label %sw.bb1905
    i32 168, label %sw.bb1998
    i32 32, label %sw.bb2182
    i32 31, label %sw.bb2182
    i32 385, label %sw.bb2187
    i32 37, label %sw.bb2234
    i32 38, label %sw.bb2314
    i32 380, label %sw.bb2360
  ]

sw.bb163:                                         ; preds = %sw.epilog
  %71 = load %struct.op*, %struct.op** %o.addr, align 8
  %72 = bitcast %struct.op* %71 to %struct.cop*
  store %struct.cop* %72, %struct.cop** @PL_curcop, align 8
  br label %sw.epilog2365

sw.bb164:                                         ; preds = %sw.epilog
  %73 = load %struct.op*, %struct.op** %o.addr, align 8
  %74 = bitcast %struct.op* %73 to %struct.cop*
  store %struct.cop* %74, %struct.cop** @PL_curcop, align 8
  %75 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_next165 = getelementptr inbounds %struct.op, %struct.op* %75, i32 0, i32 0
  %76 = load %struct.op*, %struct.op** %op_next165, align 8
  store %struct.op* %76, %struct.op** %next, align 8
  %77 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_sibling = getelementptr inbounds %struct.op, %struct.op* %77, i32 0, i32 1
  %78 = load %struct.op*, %struct.op** %op_sibling, align 8
  %add.ptr = getelementptr inbounds %struct.op, %struct.op* %78, i64 0
  store %struct.op* %add.ptr, %struct.op** %sibling, align 8
  %79 = load %struct.op*, %struct.op** %next, align 8
  %tobool166 = icmp ne %struct.op* %79, null
  br i1 %tobool166, label %land.lhs.true167, label %if.end254

land.lhs.true167:                                 ; preds = %sw.bb164
  %80 = load %struct.op*, %struct.op** %next, align 8
  %op_type168 = getelementptr inbounds %struct.op, %struct.op* %80, i32 0, i32 4
  %bf.load169 = load i16, i16* %op_type168, align 8
  %bf.clear170 = and i16 %bf.load169, 511
  %bf.cast171 = zext i16 %bf.clear170 to i32
  %cmp172 = icmp eq i32 %bf.cast171, 3
  br i1 %cmp172, label %land.lhs.true174, label %if.end254

land.lhs.true174:                                 ; preds = %land.lhs.true167
  %81 = load %struct.op*, %struct.op** %sibling, align 8
  %tobool175 = icmp ne %struct.op* %81, null
  br i1 %tobool175, label %land.lhs.true176, label %if.end254

land.lhs.true176:                                 ; preds = %land.lhs.true174
  %82 = load %struct.op*, %struct.op** %sibling, align 8
  %op_type177 = getelementptr inbounds %struct.op, %struct.op* %82, i32 0, i32 4
  %bf.load178 = load i16, i16* %op_type177, align 8
  %bf.clear179 = and i16 %bf.load178, 511
  %bf.cast180 = zext i16 %bf.clear179 to i32
  %cmp181 = icmp eq i32 %bf.cast180, 203
  br i1 %cmp181, label %land.lhs.true183, label %if.end254

land.lhs.true183:                                 ; preds = %land.lhs.true176
  %83 = load %struct.op*, %struct.op** %sibling, align 8
  %op_next184 = getelementptr inbounds %struct.op, %struct.op* %83, i32 0, i32 0
  %84 = load %struct.op*, %struct.op** %op_next184, align 8
  %tobool185 = icmp ne %struct.op* %84, null
  br i1 %tobool185, label %land.lhs.true186, label %if.end254

land.lhs.true186:                                 ; preds = %land.lhs.true183
  %85 = load %struct.op*, %struct.op** %sibling, align 8
  %op_next187 = getelementptr inbounds %struct.op, %struct.op* %85, i32 0, i32 0
  %86 = load %struct.op*, %struct.op** %op_next187, align 8
  %op_type188 = getelementptr inbounds %struct.op, %struct.op* %86, i32 0, i32 4
  %bf.load189 = load i16, i16* %op_type188, align 8
  %bf.clear190 = and i16 %bf.load189, 511
  %bf.cast191 = zext i16 %bf.clear190 to i32
  %cmp192 = icmp eq i32 %bf.cast191, 192
  br i1 %cmp192, label %land.lhs.true194, label %if.end254

land.lhs.true194:                                 ; preds = %land.lhs.true186
  %87 = load %struct.op*, %struct.op** %sibling, align 8
  %op_next195 = getelementptr inbounds %struct.op, %struct.op* %87, i32 0, i32 0
  %88 = load %struct.op*, %struct.op** %op_next195, align 8
  %op_next196 = getelementptr inbounds %struct.op, %struct.op* %88, i32 0, i32 0
  %89 = load %struct.op*, %struct.op** %op_next196, align 8
  %tobool197 = icmp ne %struct.op* %89, null
  br i1 %tobool197, label %land.lhs.true198, label %lor.lhs.false207

land.lhs.true198:                                 ; preds = %land.lhs.true194
  %90 = load %struct.op*, %struct.op** %sibling, align 8
  %op_next199 = getelementptr inbounds %struct.op, %struct.op* %90, i32 0, i32 0
  %91 = load %struct.op*, %struct.op** %op_next199, align 8
  %op_next200 = getelementptr inbounds %struct.op, %struct.op* %91, i32 0, i32 0
  %92 = load %struct.op*, %struct.op** %op_next200, align 8
  %op_type201 = getelementptr inbounds %struct.op, %struct.op* %92, i32 0, i32 4
  %bf.load202 = load i16, i16* %op_type201, align 8
  %bf.clear203 = and i16 %bf.load202, 511
  %bf.cast204 = zext i16 %bf.clear203 to i32
  %cmp205 = icmp eq i32 %bf.cast204, 186
  br i1 %cmp205, label %land.lhs.true220, label %lor.lhs.false207

lor.lhs.false207:                                 ; preds = %land.lhs.true198, %land.lhs.true194
  %93 = load %struct.op*, %struct.op** %sibling, align 8
  %op_next208 = getelementptr inbounds %struct.op, %struct.op* %93, i32 0, i32 0
  %94 = load %struct.op*, %struct.op** %op_next208, align 8
  %op_next209 = getelementptr inbounds %struct.op, %struct.op* %94, i32 0, i32 0
  %95 = load %struct.op*, %struct.op** %op_next209, align 8
  %tobool210 = icmp ne %struct.op* %95, null
  br i1 %tobool210, label %land.lhs.true211, label %if.end254

land.lhs.true211:                                 ; preds = %lor.lhs.false207
  %96 = load %struct.op*, %struct.op** %sibling, align 8
  %op_next212 = getelementptr inbounds %struct.op, %struct.op* %96, i32 0, i32 0
  %97 = load %struct.op*, %struct.op** %op_next212, align 8
  %op_next213 = getelementptr inbounds %struct.op, %struct.op* %97, i32 0, i32 0
  %98 = load %struct.op*, %struct.op** %op_next213, align 8
  %op_type214 = getelementptr inbounds %struct.op, %struct.op* %98, i32 0, i32 4
  %bf.load215 = load i16, i16* %op_type214, align 8
  %bf.clear216 = and i16 %bf.load215, 511
  %bf.cast217 = zext i16 %bf.clear216 to i32
  %cmp218 = icmp eq i32 %bf.cast217, 187
  br i1 %cmp218, label %land.lhs.true220, label %if.end254

land.lhs.true220:                                 ; preds = %land.lhs.true211, %land.lhs.true198
  %99 = load %struct.op*, %struct.op** %sibling, align 8
  %100 = bitcast %struct.op* %99 to %struct.unop*
  %op_first = getelementptr inbounds %struct.unop, %struct.unop* %100, i32 0, i32 7
  %101 = load %struct.op*, %struct.op** %op_first, align 8
  %102 = load %struct.op*, %struct.op** %next, align 8
  %cmp221 = icmp eq %struct.op* %101, %102
  br i1 %cmp221, label %land.lhs.true223, label %if.end254

land.lhs.true223:                                 ; preds = %land.lhs.true220
  %103 = load %struct.op*, %struct.op** %next, align 8
  %op_sibling224 = getelementptr inbounds %struct.op, %struct.op* %103, i32 0, i32 1
  %104 = load %struct.op*, %struct.op** %op_sibling224, align 8
  %tobool225 = icmp ne %struct.op* %104, null
  br i1 %tobool225, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true223
  br i1 true, label %land.lhs.true226, label %if.end254

cond.false:                                       ; preds = %land.lhs.true223
  br i1 false, label %land.lhs.true226, label %if.end254

land.lhs.true226:                                 ; preds = %cond.false, %cond.true
  %105 = load %struct.op*, %struct.op** %next, align 8
  %op_sibling227 = getelementptr inbounds %struct.op, %struct.op* %105, i32 0, i32 1
  %106 = load %struct.op*, %struct.op** %op_sibling227, align 8
  %add.ptr228 = getelementptr inbounds %struct.op, %struct.op* %106, i64 0
  %op_next229 = getelementptr inbounds %struct.op, %struct.op* %add.ptr228, i32 0, i32 0
  %107 = load %struct.op*, %struct.op** %op_next229, align 8
  %tobool230 = icmp ne %struct.op* %107, null
  br i1 %tobool230, label %land.lhs.true231, label %if.end254

land.lhs.true231:                                 ; preds = %land.lhs.true226
  %108 = load %struct.op*, %struct.op** %next, align 8
  %op_next232 = getelementptr inbounds %struct.op, %struct.op* %108, i32 0, i32 0
  %109 = load %struct.op*, %struct.op** %op_next232, align 8
  %tobool233 = icmp ne %struct.op* %109, null
  br i1 %tobool233, label %if.then234, label %if.end254

if.then234:                                       ; preds = %land.lhs.true231
  %110 = load %struct.op*, %struct.op** %next, align 8
  %op_sibling235 = getelementptr inbounds %struct.op, %struct.op* %110, i32 0, i32 1
  %111 = load %struct.op*, %struct.op** %op_sibling235, align 8
  %add.ptr236 = getelementptr inbounds %struct.op, %struct.op* %111, i64 0
  store %struct.op* %add.ptr236, %struct.op** %top, align 8
  br label %while.cond237

while.cond237:                                    ; preds = %if.end250, %if.then234
  %112 = load %struct.op*, %struct.op** %top, align 8
  %tobool238 = icmp ne %struct.op* %112, null
  br i1 %tobool238, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond237
  %113 = load %struct.op*, %struct.op** %top, align 8
  %op_next239 = getelementptr inbounds %struct.op, %struct.op* %113, i32 0, i32 0
  %114 = load %struct.op*, %struct.op** %op_next239, align 8
  %tobool240 = icmp ne %struct.op* %114, null
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond237
  %115 = phi i1 [ false, %while.cond237 ], [ %tobool240, %land.rhs ]
  br i1 %115, label %while.body241, label %while.end253

while.body241:                                    ; preds = %land.end
  %116 = load %struct.op*, %struct.op** %top, align 8
  %op_next242 = getelementptr inbounds %struct.op, %struct.op* %116, i32 0, i32 0
  %117 = load %struct.op*, %struct.op** %op_next242, align 8
  %118 = load %struct.op*, %struct.op** %sibling, align 8
  %cmp243 = icmp eq %struct.op* %117, %118
  br i1 %cmp243, label %if.then245, label %if.end250

if.then245:                                       ; preds = %while.body241
  %119 = load %struct.op*, %struct.op** %sibling, align 8
  %op_next246 = getelementptr inbounds %struct.op, %struct.op* %119, i32 0, i32 0
  %120 = load %struct.op*, %struct.op** %op_next246, align 8
  %121 = load %struct.op*, %struct.op** %top, align 8
  %op_next247 = getelementptr inbounds %struct.op, %struct.op* %121, i32 0, i32 0
  store %struct.op* %120, %struct.op** %op_next247, align 8
  %122 = load %struct.op*, %struct.op** %next, align 8
  %op_next248 = getelementptr inbounds %struct.op, %struct.op* %122, i32 0, i32 0
  %123 = load %struct.op*, %struct.op** %op_next248, align 8
  %124 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_next249 = getelementptr inbounds %struct.op, %struct.op* %124, i32 0, i32 0
  store %struct.op* %123, %struct.op** %op_next249, align 8
  br label %while.end253

if.end250:                                        ; preds = %while.body241
  %125 = load %struct.op*, %struct.op** %top, align 8
  %op_sibling251 = getelementptr inbounds %struct.op, %struct.op* %125, i32 0, i32 1
  %126 = load %struct.op*, %struct.op** %op_sibling251, align 8
  %add.ptr252 = getelementptr inbounds %struct.op, %struct.op* %126, i64 0
  store %struct.op* %add.ptr252, %struct.op** %top, align 8
  br label %while.cond237

while.end253:                                     ; preds = %if.then245, %land.end
  br label %if.end254

if.end254:                                        ; preds = %while.end253, %land.lhs.true231, %land.lhs.true226, %cond.false, %cond.true, %land.lhs.true220, %land.lhs.true211, %lor.lhs.false207, %land.lhs.true186, %land.lhs.true183, %land.lhs.true176, %land.lhs.true174, %land.lhs.true167, %sw.bb164
  %127 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_next255 = getelementptr inbounds %struct.op, %struct.op* %127, i32 0, i32 0
  %128 = load %struct.op*, %struct.op** %op_next255, align 8
  %tobool256 = icmp ne %struct.op* %128, null
  br i1 %tobool256, label %land.lhs.true257, label %if.end407

land.lhs.true257:                                 ; preds = %if.end254
  %129 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_next258 = getelementptr inbounds %struct.op, %struct.op* %129, i32 0, i32 0
  %130 = load %struct.op*, %struct.op** %op_next258, align 8
  %op_type259 = getelementptr inbounds %struct.op, %struct.op* %130, i32 0, i32 4
  %bf.load260 = load i16, i16* %op_type259, align 8
  %bf.clear261 = and i16 %bf.load260, 511
  %bf.cast262 = zext i16 %bf.clear261 to i32
  %cmp263 = icmp eq i32 %bf.cast262, 9
  br i1 %cmp263, label %land.lhs.true281, label %lor.lhs.false265

lor.lhs.false265:                                 ; preds = %land.lhs.true257
  %131 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_next266 = getelementptr inbounds %struct.op, %struct.op* %131, i32 0, i32 0
  %132 = load %struct.op*, %struct.op** %op_next266, align 8
  %op_type267 = getelementptr inbounds %struct.op, %struct.op* %132, i32 0, i32 4
  %bf.load268 = load i16, i16* %op_type267, align 8
  %bf.clear269 = and i16 %bf.load268, 511
  %bf.cast270 = zext i16 %bf.clear269 to i32
  %cmp271 = icmp eq i32 %bf.cast270, 10
  br i1 %cmp271, label %land.lhs.true281, label %lor.lhs.false273

lor.lhs.false273:                                 ; preds = %lor.lhs.false265
  %133 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_next274 = getelementptr inbounds %struct.op, %struct.op* %133, i32 0, i32 0
  %134 = load %struct.op*, %struct.op** %op_next274, align 8
  %op_type275 = getelementptr inbounds %struct.op, %struct.op* %134, i32 0, i32 4
  %bf.load276 = load i16, i16* %op_type275, align 8
  %bf.clear277 = and i16 %bf.load276, 511
  %bf.cast278 = zext i16 %bf.clear277 to i32
  %cmp279 = icmp eq i32 %bf.cast278, 11
  br i1 %cmp279, label %land.lhs.true281, label %if.end407

land.lhs.true281:                                 ; preds = %lor.lhs.false273, %lor.lhs.false265, %land.lhs.true257
  %135 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_next282 = getelementptr inbounds %struct.op, %struct.op* %135, i32 0, i32 0
  %136 = load %struct.op*, %struct.op** %op_next282, align 8
  %op_private283 = getelementptr inbounds %struct.op, %struct.op* %136, i32 0, i32 6
  %137 = load i8, i8* %op_private283, align 1
  %conv284 = zext i8 %137 to i32
  %and285 = and i32 %conv284, -129
  %tobool286 = icmp ne i32 %and285, 0
  br i1 %tobool286, label %if.end407, label %land.lhs.true287

land.lhs.true287:                                 ; preds = %land.lhs.true281
  %138 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_next288 = getelementptr inbounds %struct.op, %struct.op* %138, i32 0, i32 0
  %139 = load %struct.op*, %struct.op** %op_next288, align 8
  %op_next289 = getelementptr inbounds %struct.op, %struct.op* %139, i32 0, i32 0
  %140 = load %struct.op*, %struct.op** %op_next289, align 8
  %tobool290 = icmp ne %struct.op* %140, null
  br i1 %tobool290, label %land.lhs.true291, label %if.end407

land.lhs.true291:                                 ; preds = %land.lhs.true287
  %141 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_next292 = getelementptr inbounds %struct.op, %struct.op* %141, i32 0, i32 0
  %142 = load %struct.op*, %struct.op** %op_next292, align 8
  %op_next293 = getelementptr inbounds %struct.op, %struct.op* %142, i32 0, i32 0
  %143 = load %struct.op*, %struct.op** %op_next293, align 8
  %op_type294 = getelementptr inbounds %struct.op, %struct.op* %143, i32 0, i32 4
  %bf.load295 = load i16, i16* %op_type294, align 8
  %bf.clear296 = and i16 %bf.load295, 511
  %bf.cast297 = zext i16 %bf.clear296 to i32
  %cmp298 = icmp eq i32 %bf.cast297, 193
  br i1 %cmp298, label %land.lhs.true300, label %if.end407

land.lhs.true300:                                 ; preds = %land.lhs.true291
  %144 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_next301 = getelementptr inbounds %struct.op, %struct.op* %144, i32 0, i32 0
  %145 = load %struct.op*, %struct.op** %op_next301, align 8
  %op_next302 = getelementptr inbounds %struct.op, %struct.op* %145, i32 0, i32 0
  %146 = load %struct.op*, %struct.op** %op_next302, align 8
  %op_next303 = getelementptr inbounds %struct.op, %struct.op* %146, i32 0, i32 0
  %147 = load %struct.op*, %struct.op** %op_next303, align 8
  %tobool304 = icmp ne %struct.op* %147, null
  br i1 %tobool304, label %land.lhs.true305, label %if.end407

land.lhs.true305:                                 ; preds = %land.lhs.true300
  %148 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_next306 = getelementptr inbounds %struct.op, %struct.op* %148, i32 0, i32 0
  %149 = load %struct.op*, %struct.op** %op_next306, align 8
  %op_next307 = getelementptr inbounds %struct.op, %struct.op* %149, i32 0, i32 0
  %150 = load %struct.op*, %struct.op** %op_next307, align 8
  %op_next308 = getelementptr inbounds %struct.op, %struct.op* %150, i32 0, i32 0
  %151 = load %struct.op*, %struct.op** %op_next308, align 8
  %op_type309 = getelementptr inbounds %struct.op, %struct.op* %151, i32 0, i32 4
  %bf.load310 = load i16, i16* %op_type309, align 8
  %bf.clear311 = and i16 %bf.load310, 511
  %bf.cast312 = zext i16 %bf.clear311 to i32
  %cmp313 = icmp eq i32 %bf.cast312, 9
  br i1 %cmp313, label %land.lhs.true335, label %lor.lhs.false315

lor.lhs.false315:                                 ; preds = %land.lhs.true305
  %152 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_next316 = getelementptr inbounds %struct.op, %struct.op* %152, i32 0, i32 0
  %153 = load %struct.op*, %struct.op** %op_next316, align 8
  %op_next317 = getelementptr inbounds %struct.op, %struct.op* %153, i32 0, i32 0
  %154 = load %struct.op*, %struct.op** %op_next317, align 8
  %op_next318 = getelementptr inbounds %struct.op, %struct.op* %154, i32 0, i32 0
  %155 = load %struct.op*, %struct.op** %op_next318, align 8
  %op_type319 = getelementptr inbounds %struct.op, %struct.op* %155, i32 0, i32 4
  %bf.load320 = load i16, i16* %op_type319, align 8
  %bf.clear321 = and i16 %bf.load320, 511
  %bf.cast322 = zext i16 %bf.clear321 to i32
  %cmp323 = icmp eq i32 %bf.cast322, 10
  br i1 %cmp323, label %land.lhs.true335, label %lor.lhs.false325

lor.lhs.false325:                                 ; preds = %lor.lhs.false315
  %156 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_next326 = getelementptr inbounds %struct.op, %struct.op* %156, i32 0, i32 0
  %157 = load %struct.op*, %struct.op** %op_next326, align 8
  %op_next327 = getelementptr inbounds %struct.op, %struct.op* %157, i32 0, i32 0
  %158 = load %struct.op*, %struct.op** %op_next327, align 8
  %op_next328 = getelementptr inbounds %struct.op, %struct.op* %158, i32 0, i32 0
  %159 = load %struct.op*, %struct.op** %op_next328, align 8
  %op_type329 = getelementptr inbounds %struct.op, %struct.op* %159, i32 0, i32 4
  %bf.load330 = load i16, i16* %op_type329, align 8
  %bf.clear331 = and i16 %bf.load330, 511
  %bf.cast332 = zext i16 %bf.clear331 to i32
  %cmp333 = icmp eq i32 %bf.cast332, 11
  br i1 %cmp333, label %land.lhs.true335, label %if.end407

land.lhs.true335:                                 ; preds = %lor.lhs.false325, %lor.lhs.false315, %land.lhs.true305
  %160 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_next336 = getelementptr inbounds %struct.op, %struct.op* %160, i32 0, i32 0
  %161 = load %struct.op*, %struct.op** %op_next336, align 8
  %op_next337 = getelementptr inbounds %struct.op, %struct.op* %161, i32 0, i32 0
  %162 = load %struct.op*, %struct.op** %op_next337, align 8
  %op_next338 = getelementptr inbounds %struct.op, %struct.op* %162, i32 0, i32 0
  %163 = load %struct.op*, %struct.op** %op_next338, align 8
  %op_private339 = getelementptr inbounds %struct.op, %struct.op* %163, i32 0, i32 6
  %164 = load i8, i8* %op_private339, align 1
  %conv340 = zext i8 %164 to i32
  %and341 = and i32 %conv340, -129
  %tobool342 = icmp ne i32 %and341, 0
  br i1 %tobool342, label %if.end407, label %land.lhs.true343

land.lhs.true343:                                 ; preds = %land.lhs.true335
  %165 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_next344 = getelementptr inbounds %struct.op, %struct.op* %165, i32 0, i32 0
  %166 = load %struct.op*, %struct.op** %op_next344, align 8
  %op_next345 = getelementptr inbounds %struct.op, %struct.op* %166, i32 0, i32 0
  %167 = load %struct.op*, %struct.op** %op_next345, align 8
  %op_next346 = getelementptr inbounds %struct.op, %struct.op* %167, i32 0, i32 0
  %168 = load %struct.op*, %struct.op** %op_next346, align 8
  %op_next347 = getelementptr inbounds %struct.op, %struct.op* %168, i32 0, i32 0
  %169 = load %struct.op*, %struct.op** %op_next347, align 8
  %tobool348 = icmp ne %struct.op* %169, null
  br i1 %tobool348, label %land.lhs.true349, label %if.end407

land.lhs.true349:                                 ; preds = %land.lhs.true343
  %170 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_next350 = getelementptr inbounds %struct.op, %struct.op* %170, i32 0, i32 0
  %171 = load %struct.op*, %struct.op** %op_next350, align 8
  %op_next351 = getelementptr inbounds %struct.op, %struct.op* %171, i32 0, i32 0
  %172 = load %struct.op*, %struct.op** %op_next351, align 8
  %op_next352 = getelementptr inbounds %struct.op, %struct.op* %172, i32 0, i32 0
  %173 = load %struct.op*, %struct.op** %op_next352, align 8
  %op_next353 = getelementptr inbounds %struct.op, %struct.op* %173, i32 0, i32 0
  %174 = load %struct.op*, %struct.op** %op_next353, align 8
  %op_type354 = getelementptr inbounds %struct.op, %struct.op* %174, i32 0, i32 4
  %bf.load355 = load i16, i16* %op_type354, align 8
  %bf.clear356 = and i16 %bf.load355, 511
  %bf.cast357 = zext i16 %bf.clear356 to i32
  %cmp358 = icmp eq i32 %bf.cast357, 193
  br i1 %cmp358, label %land.lhs.true360, label %if.end407

land.lhs.true360:                                 ; preds = %land.lhs.true349
  %175 = load %struct.op*, %struct.op** %o.addr, align 8
  %176 = bitcast %struct.op* %175 to %struct.cop*
  %call = call i8* @Perl_cop_fetch_label(%struct.cop* %176, i64* null, i32* null)
  %tobool361 = icmp ne i8* %call, null
  br i1 %tobool361, label %if.end407, label %land.lhs.true362

land.lhs.true362:                                 ; preds = %land.lhs.true360
  %177 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_next363 = getelementptr inbounds %struct.op, %struct.op* %177, i32 0, i32 0
  %178 = load %struct.op*, %struct.op** %op_next363, align 8
  %op_next364 = getelementptr inbounds %struct.op, %struct.op* %178, i32 0, i32 0
  %179 = load %struct.op*, %struct.op** %op_next364, align 8
  %180 = bitcast %struct.op* %179 to %struct.cop*
  %call365 = call i8* @Perl_cop_fetch_label(%struct.cop* %180, i64* null, i32* null)
  %tobool366 = icmp ne i8* %call365, null
  br i1 %tobool366, label %if.end407, label %if.then367

if.then367:                                       ; preds = %land.lhs.true362
  %181 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_next368 = getelementptr inbounds %struct.op, %struct.op* %181, i32 0, i32 0
  %182 = load %struct.op*, %struct.op** %op_next368, align 8
  store %struct.op* %182, %struct.op** %pad1, align 8
  %183 = load %struct.op*, %struct.op** %pad1, align 8
  %op_next369 = getelementptr inbounds %struct.op, %struct.op* %183, i32 0, i32 0
  %184 = load %struct.op*, %struct.op** %op_next369, align 8
  store %struct.op* %184, %struct.op** %ns2, align 8
  %185 = load %struct.op*, %struct.op** %ns2, align 8
  %op_next370 = getelementptr inbounds %struct.op, %struct.op* %185, i32 0, i32 0
  %186 = load %struct.op*, %struct.op** %op_next370, align 8
  store %struct.op* %186, %struct.op** %pad2, align 8
  %187 = load %struct.op*, %struct.op** %pad2, align 8
  %op_next371 = getelementptr inbounds %struct.op, %struct.op* %187, i32 0, i32 0
  %188 = load %struct.op*, %struct.op** %op_next371, align 8
  store %struct.op* %188, %struct.op** %ns3, align 8
  %189 = load %struct.op*, %struct.op** %pad1, align 8
  %call372 = call %struct.op* @Perl_op_sibling_splice(%struct.op* null, %struct.op* %189, i32 1, %struct.op* null)
  %190 = load %struct.op*, %struct.op** %ns2, align 8
  call void @Perl_op_free(%struct.op* %190)
  %191 = load %struct.op*, %struct.op** %o.addr, align 8
  %call373 = call %struct.op* @Perl_op_sibling_splice(%struct.op* null, %struct.op* %191, i32 2, %struct.op* null)
  %192 = load %struct.op*, %struct.op** %pad1, align 8
  %193 = load %struct.op*, %struct.op** %pad2, align 8
  %call374 = call %struct.op* @Perl_newLISTOP(i32 158, i32 0, %struct.op* %192, %struct.op* %193)
  store %struct.op* %call374, %struct.op** %newop, align 8
  %194 = load %struct.op*, %struct.op** %newop, align 8
  %op_flags375 = getelementptr inbounds %struct.op, %struct.op* %194, i32 0, i32 5
  %195 = load i8, i8* %op_flags375, align 2
  %conv376 = zext i8 %195 to i32
  %or377 = or i32 %conv376, 8
  %conv378 = trunc i32 %or377 to i8
  store i8 %conv378, i8* %op_flags375, align 2
  %196 = load %struct.op*, %struct.op** %newop, align 8
  %op_flags379 = getelementptr inbounds %struct.op, %struct.op* %196, i32 0, i32 5
  %197 = load i8, i8* %op_flags379, align 2
  %conv380 = zext i8 %197 to i32
  %and381 = and i32 %conv380, -4
  %or382 = or i32 %and381, 1
  %conv383 = trunc i32 %or382 to i8
  %198 = load %struct.op*, %struct.op** %newop, align 8
  %op_flags384 = getelementptr inbounds %struct.op, %struct.op* %198, i32 0, i32 5
  store i8 %conv383, i8* %op_flags384, align 2
  %199 = load %struct.op*, %struct.op** %o.addr, align 8
  %200 = load %struct.op*, %struct.op** %newop, align 8
  %call385 = call %struct.op* @Perl_op_sibling_splice(%struct.op* null, %struct.op* %199, i32 0, %struct.op* %200)
  %201 = load %struct.op*, %struct.op** %newop, align 8
  %202 = bitcast %struct.op* %201 to %struct.unop*
  %op_first386 = getelementptr inbounds %struct.unop, %struct.unop* %202, i32 0, i32 7
  %203 = load %struct.op*, %struct.op** %op_first386, align 8
  store %struct.op* %203, %struct.op** %newpm, align 8
  %204 = load %struct.op*, %struct.op** %newpm, align 8
  %205 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_next387 = getelementptr inbounds %struct.op, %struct.op* %205, i32 0, i32 0
  store %struct.op* %204, %struct.op** %op_next387, align 8
  %206 = load %struct.op*, %struct.op** %pad1, align 8
  %207 = load %struct.op*, %struct.op** %newpm, align 8
  %op_next388 = getelementptr inbounds %struct.op, %struct.op* %207, i32 0, i32 0
  store %struct.op* %206, %struct.op** %op_next388, align 8
  %208 = load %struct.op*, %struct.op** %pad2, align 8
  %209 = load %struct.op*, %struct.op** %pad1, align 8
  %op_next389 = getelementptr inbounds %struct.op, %struct.op* %209, i32 0, i32 0
  store %struct.op* %208, %struct.op** %op_next389, align 8
  %210 = load %struct.op*, %struct.op** %newop, align 8
  %211 = load %struct.op*, %struct.op** %pad2, align 8
  %op_next390 = getelementptr inbounds %struct.op, %struct.op* %211, i32 0, i32 0
  store %struct.op* %210, %struct.op** %op_next390, align 8
  %212 = load %struct.op*, %struct.op** %ns3, align 8
  %213 = load %struct.op*, %struct.op** %newop, align 8
  %op_next391 = getelementptr inbounds %struct.op, %struct.op* %213, i32 0, i32 0
  store %struct.op* %212, %struct.op** %op_next391, align 8
  %214 = load %struct.op*, %struct.op** %pad1, align 8
  %op_flags392 = getelementptr inbounds %struct.op, %struct.op* %214, i32 0, i32 5
  %215 = load i8, i8* %op_flags392, align 2
  %conv393 = zext i8 %215 to i32
  %and394 = and i32 %conv393, 32
  %tobool395 = icmp ne i32 %and394, 0
  br i1 %tobool395, label %land.lhs.true396, label %if.end406

land.lhs.true396:                                 ; preds = %if.then367
  %216 = load %struct.op*, %struct.op** %pad2, align 8
  %op_flags397 = getelementptr inbounds %struct.op, %struct.op* %216, i32 0, i32 5
  %217 = load i8, i8* %op_flags397, align 2
  %conv398 = zext i8 %217 to i32
  %and399 = and i32 %conv398, 32
  %tobool400 = icmp ne i32 %and399, 0
  br i1 %tobool400, label %if.then401, label %if.end406

if.then401:                                       ; preds = %land.lhs.true396
  %218 = load %struct.op*, %struct.op** %newpm, align 8
  %op_flags402 = getelementptr inbounds %struct.op, %struct.op* %218, i32 0, i32 5
  %219 = load i8, i8* %op_flags402, align 2
  %conv403 = zext i8 %219 to i32
  %or404 = or i32 %conv403, 32
  %conv405 = trunc i32 %or404 to i8
  store i8 %conv405, i8* %op_flags402, align 2
  br label %if.end406

if.end406:                                        ; preds = %if.then401, %land.lhs.true396, %if.then367
  br label %sw.epilog2365

if.end407:                                        ; preds = %land.lhs.true362, %land.lhs.true360, %land.lhs.true349, %land.lhs.true343, %land.lhs.true335, %lor.lhs.false325, %land.lhs.true300, %land.lhs.true291, %land.lhs.true287, %land.lhs.true281, %lor.lhs.false273, %if.end254
  %220 = load %struct.op*, %struct.op** %o.addr, align 8
  %221 = bitcast %struct.op* %220 to %struct.cop*
  %call408 = call i8* @Perl_cop_fetch_label(%struct.cop* %221, i64* null, i32* null)
  %tobool409 = icmp ne i8* %call408, null
  br i1 %tobool409, label %if.end442, label %land.lhs.true410

land.lhs.true410:                                 ; preds = %if.end407
  %222 = load i32, i32* @PL_perldb, align 4
  %and411 = and i32 %222, 4
  %tobool412 = icmp ne i32 %and411, 0
  br i1 %tobool412, label %if.end442, label %if.then413

if.then413:                                       ; preds = %land.lhs.true410
  %223 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_next414 = getelementptr inbounds %struct.op, %struct.op* %223, i32 0, i32 0
  %224 = load %struct.op*, %struct.op** %op_next414, align 8
  store %struct.op* %224, %struct.op** %nextop, align 8
  br label %while.cond415

while.cond415:                                    ; preds = %while.body425, %if.then413
  %225 = load %struct.op*, %struct.op** %nextop, align 8
  %tobool416 = icmp ne %struct.op* %225, null
  br i1 %tobool416, label %land.rhs417, label %land.end424

land.rhs417:                                      ; preds = %while.cond415
  %226 = load %struct.op*, %struct.op** %nextop, align 8
  %op_type418 = getelementptr inbounds %struct.op, %struct.op* %226, i32 0, i32 4
  %bf.load419 = load i16, i16* %op_type418, align 8
  %bf.clear420 = and i16 %bf.load419, 511
  %bf.cast421 = zext i16 %bf.clear420 to i32
  %cmp422 = icmp eq i32 %bf.cast421, 0
  br label %land.end424

land.end424:                                      ; preds = %land.rhs417, %while.cond415
  %227 = phi i1 [ false, %while.cond415 ], [ %cmp422, %land.rhs417 ]
  br i1 %227, label %while.body425, label %while.end427

while.body425:                                    ; preds = %land.end424
  %228 = load %struct.op*, %struct.op** %nextop, align 8
  %op_next426 = getelementptr inbounds %struct.op, %struct.op* %228, i32 0, i32 0
  %229 = load %struct.op*, %struct.op** %op_next426, align 8
  store %struct.op* %229, %struct.op** %nextop, align 8
  br label %while.cond415

while.end427:                                     ; preds = %land.end424
  %230 = load %struct.op*, %struct.op** %nextop, align 8
  %tobool428 = icmp ne %struct.op* %230, null
  br i1 %tobool428, label %land.lhs.true429, label %if.end441

land.lhs.true429:                                 ; preds = %while.end427
  %231 = load %struct.op*, %struct.op** %nextop, align 8
  %op_type430 = getelementptr inbounds %struct.op, %struct.op* %231, i32 0, i32 4
  %bf.load431 = load i16, i16* %op_type430, align 8
  %bf.clear432 = and i16 %bf.load431, 511
  %bf.cast433 = zext i16 %bf.clear432 to i32
  %cmp434 = icmp eq i32 %bf.cast433, 193
  br i1 %cmp434, label %if.then436, label %if.end441

if.then436:                                       ; preds = %land.lhs.true429
  %232 = load %struct.op*, %struct.op** %o.addr, align 8
  call void @Perl_op_null(%struct.op* %232)
  %233 = load %struct.op*, %struct.op** %oldop, align 8
  %tobool437 = icmp ne %struct.op* %233, null
  br i1 %tobool437, label %if.then438, label %if.end440

if.then438:                                       ; preds = %if.then436
  %234 = load %struct.op*, %struct.op** %nextop, align 8
  %235 = load %struct.op*, %struct.op** %oldop, align 8
  %op_next439 = getelementptr inbounds %struct.op, %struct.op* %235, i32 0, i32 0
  store %struct.op* %234, %struct.op** %op_next439, align 8
  br label %if.end440

if.end440:                                        ; preds = %if.then438, %if.then436
  br label %for.inc2384

if.end441:                                        ; preds = %land.lhs.true429, %while.end427
  br label %if.end442

if.end442:                                        ; preds = %if.end441, %land.lhs.true410, %if.end407
  br label %sw.epilog2365

sw.bb443:                                         ; preds = %sw.epilog
  %236 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_next444 = getelementptr inbounds %struct.op, %struct.op* %236, i32 0, i32 0
  %237 = load %struct.op*, %struct.op** %op_next444, align 8
  %tobool445 = icmp ne %struct.op* %237, null
  br i1 %tobool445, label %land.lhs.true446, label %if.end477

land.lhs.true446:                                 ; preds = %sw.bb443
  %238 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_next447 = getelementptr inbounds %struct.op, %struct.op* %238, i32 0, i32 0
  %239 = load %struct.op*, %struct.op** %op_next447, align 8
  %op_type448 = getelementptr inbounds %struct.op, %struct.op* %239, i32 0, i32 4
  %bf.load449 = load i16, i16* %op_type448, align 8
  %bf.clear450 = and i16 %bf.load449, 511
  %bf.cast451 = zext i16 %bf.clear450 to i32
  %cmp452 = icmp eq i32 %bf.cast451, 68
  br i1 %cmp452, label %if.then454, label %if.end477

if.then454:                                       ; preds = %land.lhs.true446
  %240 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_next455 = getelementptr inbounds %struct.op, %struct.op* %240, i32 0, i32 0
  %241 = load %struct.op*, %struct.op** %op_next455, align 8
  %op_private456 = getelementptr inbounds %struct.op, %struct.op* %241, i32 0, i32 6
  %242 = load i8, i8* %op_private456, align 1
  %conv457 = zext i8 %242 to i32
  %and458 = and i32 %conv457, 16
  %tobool459 = icmp ne i32 %and458, 0
  br i1 %tobool459, label %if.then460, label %if.end475

if.then460:                                       ; preds = %if.then454
  %243 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_flags461 = getelementptr inbounds %struct.op, %struct.op* %243, i32 0, i32 5
  %244 = load i8, i8* %op_flags461, align 2
  %conv462 = zext i8 %244 to i32
  %and463 = and i32 %conv462, 64
  %tobool464 = icmp ne i32 %and463, 0
  br i1 %tobool464, label %if.then465, label %if.else

if.then465:                                       ; preds = %if.then460
  br label %sw.epilog2365

if.else:                                          ; preds = %if.then460
  %245 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_next466 = getelementptr inbounds %struct.op, %struct.op* %245, i32 0, i32 0
  %246 = load %struct.op*, %struct.op** %op_next466, align 8
  %op_targ = getelementptr inbounds %struct.op, %struct.op* %246, i32 0, i32 3
  %247 = load i64, i64* %op_targ, align 8
  %248 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_targ467 = getelementptr inbounds %struct.op, %struct.op* %248, i32 0, i32 3
  store i64 %247, i64* %op_targ467, align 8
  %249 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_next468 = getelementptr inbounds %struct.op, %struct.op* %249, i32 0, i32 0
  %250 = load %struct.op*, %struct.op** %op_next468, align 8
  %op_targ469 = getelementptr inbounds %struct.op, %struct.op* %250, i32 0, i32 3
  store i64 0, i64* %op_targ469, align 8
  %251 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_private470 = getelementptr inbounds %struct.op, %struct.op* %251, i32 0, i32 6
  %252 = load i8, i8* %op_private470, align 1
  %conv471 = zext i8 %252 to i32
  %or472 = or i32 %conv471, 16
  %conv473 = trunc i32 %or472 to i8
  store i8 %conv473, i8* %op_private470, align 1
  br label %if.end474

if.end474:                                        ; preds = %if.else
  br label %if.end475

if.end475:                                        ; preds = %if.end474, %if.then454
  %253 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_next476 = getelementptr inbounds %struct.op, %struct.op* %253, i32 0, i32 0
  %254 = load %struct.op*, %struct.op** %op_next476, align 8
  call void @Perl_op_null(%struct.op* %254)
  br label %if.end477

if.end477:                                        ; preds = %if.end475, %land.lhs.true446, %sw.bb443
  br label %sw.epilog2365

sw.bb478:                                         ; preds = %sw.epilog
  %255 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_flags479 = getelementptr inbounds %struct.op, %struct.op* %255, i32 0, i32 5
  %256 = load i8, i8* %op_flags479, align 2
  %conv480 = zext i8 %256 to i32
  %and481 = and i32 %conv480, 3
  %cmp482 = icmp ne i32 %and481, 3
  br i1 %cmp482, label %if.then484, label %if.end485

if.then484:                                       ; preds = %sw.bb478
  br label %sw.epilog2365

if.end485:                                        ; preds = %sw.bb478
  br label %nothin

sw.bb486:                                         ; preds = %sw.epilog
  %257 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_targ487 = getelementptr inbounds %struct.op, %struct.op* %257, i32 0, i32 3
  %258 = load i64, i64* %op_targ487, align 8
  %cmp488 = icmp eq i64 %258, 193
  br i1 %cmp488, label %if.then494, label %lor.lhs.false490

lor.lhs.false490:                                 ; preds = %sw.bb486
  %259 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_targ491 = getelementptr inbounds %struct.op, %struct.op* %259, i32 0, i32 3
  %260 = load i64, i64* %op_targ491, align 8
  %cmp492 = icmp eq i64 %260, 194
  br i1 %cmp492, label %if.then494, label %if.end495

if.then494:                                       ; preds = %lor.lhs.false490, %sw.bb486
  %261 = load %struct.op*, %struct.op** %o.addr, align 8
  %262 = bitcast %struct.op* %261 to %struct.cop*
  store %struct.cop* %262, %struct.cop** @PL_curcop, align 8
  br label %if.end495

if.end495:                                        ; preds = %if.then494, %lor.lhs.false490
  %263 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_opt496 = getelementptr inbounds %struct.op, %struct.op* %263, i32 0, i32 4
  %bf.load497 = load i16, i16* %op_opt496, align 8
  %bf.clear498 = and i16 %bf.load497, -513
  store i16 %bf.clear498, i16* %op_opt496, align 8
  br label %sw.bb499

sw.bb499:                                         ; preds = %sw.epilog, %sw.epilog, %sw.epilog, %if.end495
  br label %nothin

nothin:                                           ; preds = %sw.bb499, %if.end485
  %264 = load %struct.op*, %struct.op** %oldop, align 8
  %tobool500 = icmp ne %struct.op* %264, null
  br i1 %tobool500, label %if.then501, label %if.end507

if.then501:                                       ; preds = %nothin
  %265 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_next502 = getelementptr inbounds %struct.op, %struct.op* %265, i32 0, i32 0
  %266 = load %struct.op*, %struct.op** %op_next502, align 8
  %267 = load %struct.op*, %struct.op** %oldop, align 8
  %op_next503 = getelementptr inbounds %struct.op, %struct.op* %267, i32 0, i32 0
  store %struct.op* %266, %struct.op** %op_next503, align 8
  %268 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_opt504 = getelementptr inbounds %struct.op, %struct.op* %268, i32 0, i32 4
  %bf.load505 = load i16, i16* %op_opt504, align 8
  %bf.clear506 = and i16 %bf.load505, -513
  store i16 %bf.clear506, i16* %op_opt504, align 8
  br label %for.inc2384

if.end507:                                        ; preds = %nothin
  br label %sw.epilog2365

sw.bb508:                                         ; preds = %sw.epilog
  %269 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_next509 = getelementptr inbounds %struct.op, %struct.op* %269, i32 0, i32 0
  %270 = load %struct.op*, %struct.op** %op_next509, align 8
  %op_type510 = getelementptr inbounds %struct.op, %struct.op* %270, i32 0, i32 4
  %bf.load511 = load i16, i16* %op_type510, align 8
  %bf.clear512 = and i16 %bf.load511, 511
  %bf.cast513 = zext i16 %bf.clear512 to i32
  %cmp514 = icmp eq i32 %bf.cast513, 5
  br i1 %cmp514, label %if.then554, label %lor.lhs.false516

lor.lhs.false516:                                 ; preds = %sw.bb508
  %271 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_next517 = getelementptr inbounds %struct.op, %struct.op* %271, i32 0, i32 0
  %272 = load %struct.op*, %struct.op** %op_next517, align 8
  %op_type518 = getelementptr inbounds %struct.op, %struct.op* %272, i32 0, i32 4
  %bf.load519 = load i16, i16* %op_type518, align 8
  %bf.clear520 = and i16 %bf.load519, 511
  %bf.cast521 = zext i16 %bf.clear520 to i32
  %cmp522 = icmp eq i32 %bf.cast521, 9
  br i1 %cmp522, label %land.lhs.true524, label %lor.lhs.false530

land.lhs.true524:                                 ; preds = %lor.lhs.false516
  %273 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_next525 = getelementptr inbounds %struct.op, %struct.op* %273, i32 0, i32 0
  %274 = load %struct.op*, %struct.op** %op_next525, align 8
  %op_private526 = getelementptr inbounds %struct.op, %struct.op* %274, i32 0, i32 6
  %275 = load i8, i8* %op_private526, align 1
  %conv527 = zext i8 %275 to i32
  %and528 = and i32 %conv527, 128
  %tobool529 = icmp ne i32 %and528, 0
  br i1 %tobool529, label %lor.lhs.false530, label %if.then554

lor.lhs.false530:                                 ; preds = %land.lhs.true524, %lor.lhs.false516
  %276 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_next531 = getelementptr inbounds %struct.op, %struct.op* %276, i32 0, i32 0
  %277 = load %struct.op*, %struct.op** %op_next531, align 8
  %op_type532 = getelementptr inbounds %struct.op, %struct.op* %277, i32 0, i32 4
  %bf.load533 = load i16, i16* %op_type532, align 8
  %bf.clear534 = and i16 %bf.load533, 511
  %bf.cast535 = zext i16 %bf.clear534 to i32
  %cmp536 = icmp eq i32 %bf.cast535, 7
  br i1 %cmp536, label %land.lhs.true538, label %if.end623

land.lhs.true538:                                 ; preds = %lor.lhs.false530
  %278 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_next539 = getelementptr inbounds %struct.op, %struct.op* %278, i32 0, i32 0
  %279 = load %struct.op*, %struct.op** %op_next539, align 8
  %op_next540 = getelementptr inbounds %struct.op, %struct.op* %279, i32 0, i32 0
  %280 = load %struct.op*, %struct.op** %op_next540, align 8
  %op_type541 = getelementptr inbounds %struct.op, %struct.op* %280, i32 0, i32 4
  %bf.load542 = load i16, i16* %op_type541, align 8
  %bf.clear543 = and i16 %bf.load542, 511
  %bf.cast544 = zext i16 %bf.clear543 to i32
  %cmp545 = icmp eq i32 %bf.cast544, 15
  br i1 %cmp545, label %land.lhs.true547, label %if.end623

land.lhs.true547:                                 ; preds = %land.lhs.true538
  %281 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_next548 = getelementptr inbounds %struct.op, %struct.op* %281, i32 0, i32 0
  %282 = load %struct.op*, %struct.op** %op_next548, align 8
  %op_next549 = getelementptr inbounds %struct.op, %struct.op* %282, i32 0, i32 0
  %283 = load %struct.op*, %struct.op** %op_next549, align 8
  %op_private550 = getelementptr inbounds %struct.op, %struct.op* %283, i32 0, i32 6
  %284 = load i8, i8* %op_private550, align 1
  %conv551 = zext i8 %284 to i32
  %and552 = and i32 %conv551, 192
  %tobool553 = icmp ne i32 %and552, 0
  br i1 %tobool553, label %if.end623, label %if.then554

if.then554:                                       ; preds = %land.lhs.true547, %land.lhs.true524, %sw.bb508
  %285 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_next555 = getelementptr inbounds %struct.op, %struct.op* %285, i32 0, i32 0
  %286 = load %struct.op*, %struct.op** %op_next555, align 8
  %op_next556 = getelementptr inbounds %struct.op, %struct.op* %286, i32 0, i32 0
  %287 = load %struct.op*, %struct.op** %op_next556, align 8
  store %struct.op* %287, %struct.op** %kid, align 8
  %288 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_next557 = getelementptr inbounds %struct.op, %struct.op* %288, i32 0, i32 0
  %289 = load %struct.op*, %struct.op** %op_next557, align 8
  %op_type558 = getelementptr inbounds %struct.op, %struct.op* %289, i32 0, i32 4
  %bf.load559 = load i16, i16* %op_type558, align 8
  %bf.clear560 = and i16 %bf.load559, 511
  %bf.cast561 = zext i16 %bf.clear560 to i32
  %cmp562 = icmp eq i32 %bf.cast561, 7
  br i1 %cmp562, label %if.then564, label %if.end566

if.then564:                                       ; preds = %if.then554
  %290 = load %struct.op*, %struct.op** %kid, align 8
  %op_next565 = getelementptr inbounds %struct.op, %struct.op* %290, i32 0, i32 0
  %291 = load %struct.op*, %struct.op** %op_next565, align 8
  store %struct.op* %291, %struct.op** %kid, align 8
  br label %if.end566

if.end566:                                        ; preds = %if.then564, %if.then554
  %292 = load %struct.op*, %struct.op** %kid, align 8
  %op_type567 = getelementptr inbounds %struct.op, %struct.op* %292, i32 0, i32 4
  %bf.load568 = load i16, i16* %op_type567, align 8
  %bf.clear569 = and i16 %bf.load568, 511
  %bf.cast570 = zext i16 %bf.clear569 to i32
  %cmp571 = icmp eq i32 %bf.cast570, 0
  br i1 %cmp571, label %land.lhs.true573, label %if.end622

land.lhs.true573:                                 ; preds = %if.end566
  %293 = load %struct.op*, %struct.op** %kid, align 8
  %op_next574 = getelementptr inbounds %struct.op, %struct.op* %293, i32 0, i32 0
  %294 = load %struct.op*, %struct.op** %op_next574, align 8
  store %struct.op* %294, %struct.op** %kid, align 8
  %op_type575 = getelementptr inbounds %struct.op, %struct.op* %294, i32 0, i32 4
  %bf.load576 = load i16, i16* %op_type575, align 8
  %bf.clear577 = and i16 %bf.load576, 511
  %bf.cast578 = zext i16 %bf.clear577 to i32
  %cmp579 = icmp eq i32 %bf.cast578, 5
  br i1 %cmp579, label %land.lhs.true581, label %if.end622

land.lhs.true581:                                 ; preds = %land.lhs.true573
  %295 = load %struct.op*, %struct.op** %kid, align 8
  %op_next582 = getelementptr inbounds %struct.op, %struct.op* %295, i32 0, i32 0
  %296 = load %struct.op*, %struct.op** %op_next582, align 8
  %op_type583 = getelementptr inbounds %struct.op, %struct.op* %296, i32 0, i32 4
  %bf.load584 = load i16, i16* %op_type583, align 8
  %bf.clear585 = and i16 %bf.load584, 511
  %bf.cast586 = zext i16 %bf.clear585 to i32
  %cmp587 = icmp eq i32 %bf.cast586, 62
  br i1 %cmp587, label %land.lhs.true589, label %if.end622

land.lhs.true589:                                 ; preds = %land.lhs.true581
  %297 = load %struct.op*, %struct.op** %kid, align 8
  %op_next590 = getelementptr inbounds %struct.op, %struct.op* %297, i32 0, i32 0
  %298 = load %struct.op*, %struct.op** %op_next590, align 8
  %op_private591 = getelementptr inbounds %struct.op, %struct.op* %298, i32 0, i32 6
  %299 = load i8, i8* %op_private591, align 1
  %conv592 = zext i8 %299 to i32
  %and593 = and i32 %conv592, 64
  %tobool594 = icmp ne i32 %and593, 0
  br i1 %tobool594, label %land.lhs.true595, label %if.end622

land.lhs.true595:                                 ; preds = %land.lhs.true589
  %300 = load %struct.op*, %struct.op** %kid, align 8
  %op_next596 = getelementptr inbounds %struct.op, %struct.op* %300, i32 0, i32 0
  %301 = load %struct.op*, %struct.op** %op_next596, align 8
  %op_flags597 = getelementptr inbounds %struct.op, %struct.op* %301, i32 0, i32 5
  %302 = load i8, i8* %op_flags597, align 2
  %conv598 = zext i8 %302 to i32
  %and599 = and i32 %conv598, 3
  %cmp600 = icmp eq i32 %and599, 3
  br i1 %cmp600, label %land.lhs.true602, label %if.end622

land.lhs.true602:                                 ; preds = %land.lhs.true595
  %303 = load %struct.op*, %struct.op** %kid, align 8
  %304 = bitcast %struct.op* %303 to %struct.svop*
  %op_sv = getelementptr inbounds %struct.svop, %struct.svop* %304, i32 0, i32 7
  %305 = load %struct.sv*, %struct.sv** %op_sv, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %305, i32 0, i32 2
  %306 = load i32, i32* %sv_flags, align 4
  %and603 = and i32 %306, 256
  %tobool604 = icmp ne i32 %and603, 0
  br i1 %tobool604, label %land.lhs.true605, label %if.end622

land.lhs.true605:                                 ; preds = %land.lhs.true602
  %307 = load %struct.op*, %struct.op** %kid, align 8
  %308 = bitcast %struct.op* %307 to %struct.svop*
  %op_sv606 = getelementptr inbounds %struct.svop, %struct.svop* %308, i32 0, i32 7
  %309 = load %struct.sv*, %struct.sv** %op_sv606, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %309, i32 0, i32 0
  %310 = load i8*, i8** %sv_any, align 8
  %311 = bitcast i8* %310 to %struct.xpviv*
  %xiv_u = getelementptr inbounds %struct.xpviv, %struct.xpviv* %311, i32 0, i32 4
  %xivu_iv = bitcast %union._xivu* %xiv_u to i64*
  %312 = load i64, i64* %xivu_iv, align 8
  %cmp607 = icmp eq i64 %312, 0
  br i1 %cmp607, label %if.then609, label %if.end622

if.then609:                                       ; preds = %land.lhs.true605
  %313 = load %struct.op*, %struct.op** %kid, align 8
  %op_next610 = getelementptr inbounds %struct.op, %struct.op* %313, i32 0, i32 0
  %314 = load %struct.op*, %struct.op** %op_next610, align 8
  store %struct.op* %314, %struct.op** %o.addr, align 8
  %315 = load %struct.op*, %struct.op** %o.addr, align 8
  %316 = load %struct.op*, %struct.op** %oldop, align 8
  %op_next611 = getelementptr inbounds %struct.op, %struct.op* %316, i32 0, i32 0
  store %struct.op* %315, %struct.op** %op_next611, align 8
  %317 = load %struct.op*, %struct.op** %o.addr, align 8
  %318 = bitcast %struct.op* %317 to %struct.binop*
  %op_first612 = getelementptr inbounds %struct.binop, %struct.binop* %318, i32 0, i32 7
  %319 = load %struct.op*, %struct.op** %op_first612, align 8
  call void @Perl_op_free(%struct.op* %319)
  %320 = load %struct.op*, %struct.op** %o.addr, align 8
  %321 = bitcast %struct.op* %320 to %struct.binop*
  %op_last = getelementptr inbounds %struct.binop, %struct.binop* %321, i32 0, i32 8
  %322 = load %struct.op*, %struct.op** %op_last, align 8
  call void @Perl_op_free(%struct.op* %322)
  %323 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_flags613 = getelementptr inbounds %struct.op, %struct.op* %323, i32 0, i32 5
  %324 = load i8, i8* %op_flags613, align 2
  %conv614 = zext i8 %324 to i32
  %and615 = and i32 %conv614, -5
  %conv616 = trunc i32 %and615 to i8
  store i8 %conv616, i8* %op_flags613, align 2
  br label %do.body

do.body:                                          ; preds = %if.then609
  %325 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type617 = getelementptr inbounds %struct.op, %struct.op* %325, i32 0, i32 4
  %bf.load618 = load i16, i16* %op_type617, align 8
  %bf.clear619 = and i16 %bf.load618, -512
  %bf.set620 = or i16 %bf.clear619, 1
  store i16 %bf.set620, i16* %op_type617, align 8
  %326 = load %struct.op* ()*, %struct.op* ()** getelementptr inbounds ([0 x %struct.op* ()*], [0 x %struct.op* ()*]* @PL_ppaddr, i64 0, i64 1), align 8
  %327 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_ppaddr = getelementptr inbounds %struct.op, %struct.op* %327, i32 0, i32 2
  store %struct.op* ()* %326, %struct.op* ()** %op_ppaddr, align 8
  br label %do.end

do.end:                                           ; preds = %do.body
  %328 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_private621 = getelementptr inbounds %struct.op, %struct.op* %328, i32 0, i32 6
  store i8 0, i8* %op_private621, align 1
  br label %sw.epilog2365

if.end622:                                        ; preds = %land.lhs.true605, %land.lhs.true602, %land.lhs.true595, %land.lhs.true589, %land.lhs.true581, %land.lhs.true573, %if.end566
  br label %if.end623

if.end623:                                        ; preds = %if.end622, %land.lhs.true547, %land.lhs.true538, %lor.lhs.false530
  store %struct.op* null, %struct.op** %followop, align 8
  store i8 0, i8* %count, align 1
  store i8 0, i8* %intro, align 1
  store i64 0, i64* %base, align 8
  store i8 0, i8* %gvoid, align 1
  store i8 0, i8* %defav, align 1
  store i8 0, i8* %reuse, align 1
  %329 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_next624 = getelementptr inbounds %struct.op, %struct.op* %329, i32 0, i32 0
  %330 = load %struct.op*, %struct.op** %op_next624, align 8
  store %struct.op* %330, %struct.op** %p, align 8
  %331 = load %struct.op*, %struct.op** %p, align 8
  %op_type625 = getelementptr inbounds %struct.op, %struct.op* %331, i32 0, i32 4
  %bf.load626 = load i16, i16* %op_type625, align 8
  %bf.clear627 = and i16 %bf.load626, 511
  %bf.cast628 = zext i16 %bf.clear627 to i32
  %cmp629 = icmp eq i32 %bf.cast628, 7
  br i1 %cmp629, label %land.lhs.true631, label %if.end680

land.lhs.true631:                                 ; preds = %if.end623
  %332 = load %struct.op*, %struct.op** %p, align 8
  %333 = bitcast %struct.op* %332 to %struct.svop*
  %op_sv632 = getelementptr inbounds %struct.svop, %struct.svop* %333, i32 0, i32 7
  %334 = load %struct.sv*, %struct.sv** %op_sv632, align 8
  %335 = bitcast %struct.sv* %334 to %struct.gv*
  %336 = load %struct.gv*, %struct.gv** @PL_defgv, align 8
  %cmp633 = icmp eq %struct.gv* %335, %336
  br i1 %cmp633, label %land.lhs.true635, label %if.end680

land.lhs.true635:                                 ; preds = %land.lhs.true631
  %337 = load %struct.op*, %struct.op** %p, align 8
  %op_next636 = getelementptr inbounds %struct.op, %struct.op* %337, i32 0, i32 0
  %338 = load %struct.op*, %struct.op** %op_next636, align 8
  store %struct.op* %338, %struct.op** %rv2av, align 8
  %tobool637 = icmp ne %struct.op* %338, null
  br i1 %tobool637, label %land.lhs.true638, label %if.end680

land.lhs.true638:                                 ; preds = %land.lhs.true635
  %339 = load %struct.op*, %struct.op** %rv2av, align 8
  %op_type639 = getelementptr inbounds %struct.op, %struct.op* %339, i32 0, i32 4
  %bf.load640 = load i16, i16* %op_type639, align 8
  %bf.clear641 = and i16 %bf.load640, 511
  %bf.cast642 = zext i16 %bf.clear641 to i32
  %cmp643 = icmp eq i32 %bf.cast642, 135
  br i1 %cmp643, label %land.lhs.true645, label %if.end680

land.lhs.true645:                                 ; preds = %land.lhs.true638
  %340 = load %struct.op*, %struct.op** %rv2av, align 8
  %op_flags646 = getelementptr inbounds %struct.op, %struct.op* %340, i32 0, i32 5
  %341 = load i8, i8* %op_flags646, align 2
  %conv647 = zext i8 %341 to i32
  %and648 = and i32 %conv647, 16
  %tobool649 = icmp ne i32 %and648, 0
  br i1 %tobool649, label %if.end680, label %land.lhs.true650

land.lhs.true650:                                 ; preds = %land.lhs.true645
  %342 = load %struct.op*, %struct.op** %rv2av, align 8
  %op_private651 = getelementptr inbounds %struct.op, %struct.op* %342, i32 0, i32 6
  %343 = load i8, i8* %op_private651, align 1
  %conv652 = zext i8 %343 to i32
  %and653 = and i32 %conv652, 136
  %tobool654 = icmp ne i32 %and653, 0
  br i1 %tobool654, label %if.end680, label %land.lhs.true655

land.lhs.true655:                                 ; preds = %land.lhs.true650
  %344 = load %struct.op*, %struct.op** %rv2av, align 8
  %op_flags656 = getelementptr inbounds %struct.op, %struct.op* %344, i32 0, i32 5
  %345 = load i8, i8* %op_flags656, align 2
  %conv657 = zext i8 %345 to i32
  %and658 = and i32 %conv657, 3
  %cmp659 = icmp eq i32 %and658, 3
  br i1 %cmp659, label %if.then661, label %if.end680

if.then661:                                       ; preds = %land.lhs.true655
  %346 = load %struct.op*, %struct.op** %rv2av, align 8
  %op_next662 = getelementptr inbounds %struct.op, %struct.op* %346, i32 0, i32 0
  %347 = load %struct.op*, %struct.op** %op_next662, align 8
  store %struct.op* %347, %struct.op** %q, align 8
  %348 = load %struct.op*, %struct.op** %q, align 8
  %op_type663 = getelementptr inbounds %struct.op, %struct.op* %348, i32 0, i32 4
  %bf.load664 = load i16, i16* %op_type663, align 8
  %bf.clear665 = and i16 %bf.load664, 511
  %bf.cast666 = zext i16 %bf.clear665 to i32
  %cmp667 = icmp eq i32 %bf.cast666, 0
  br i1 %cmp667, label %if.then669, label %if.end671

if.then669:                                       ; preds = %if.then661
  %349 = load %struct.op*, %struct.op** %q, align 8
  %op_next670 = getelementptr inbounds %struct.op, %struct.op* %349, i32 0, i32 0
  %350 = load %struct.op*, %struct.op** %op_next670, align 8
  store %struct.op* %350, %struct.op** %q, align 8
  br label %if.end671

if.end671:                                        ; preds = %if.then669, %if.then661
  %351 = load %struct.op*, %struct.op** %q, align 8
  %op_type672 = getelementptr inbounds %struct.op, %struct.op* %351, i32 0, i32 4
  %bf.load673 = load i16, i16* %op_type672, align 8
  %bf.clear674 = and i16 %bf.load673, 511
  %bf.cast675 = zext i16 %bf.clear674 to i32
  %cmp676 = icmp eq i32 %bf.cast675, 3
  br i1 %cmp676, label %if.then678, label %if.end679

if.then678:                                       ; preds = %if.end671
  store i8 1, i8* %defav, align 1
  %352 = load %struct.op*, %struct.op** %q, align 8
  store %struct.op* %352, %struct.op** %p, align 8
  br label %if.end679

if.end679:                                        ; preds = %if.then678, %if.end671
  br label %if.end680

if.end680:                                        ; preds = %if.end679, %land.lhs.true655, %land.lhs.true650, %land.lhs.true645, %land.lhs.true638, %land.lhs.true635, %land.lhs.true631, %if.end623
  %353 = load i8, i8* %defav, align 1
  %tobool681 = trunc i8 %353 to i1
  br i1 %tobool681, label %if.end683, label %if.then682

if.then682:                                       ; preds = %if.end680
  %354 = load %struct.op*, %struct.op** %o.addr, align 8
  store %struct.op* %354, %struct.op** %p, align 8
  br label %if.end683

if.end683:                                        ; preds = %if.then682, %if.end680
  %355 = load %struct.op*, %struct.op** %p, align 8
  %op_next684 = getelementptr inbounds %struct.op, %struct.op* %355, i32 0, i32 0
  %356 = load %struct.op*, %struct.op** %op_next684, align 8
  store %struct.op* %356, %struct.op** %p, align 8
  br label %for.cond685

for.cond685:                                      ; preds = %for.inc, %if.end683
  %357 = load %struct.op*, %struct.op** %p, align 8
  %tobool686 = icmp ne %struct.op* %357, null
  br i1 %tobool686, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond685
  %358 = load %struct.op*, %struct.op** %p, align 8
  %op_type687 = getelementptr inbounds %struct.op, %struct.op* %358, i32 0, i32 4
  %bf.load688 = load i16, i16* %op_type687, align 8
  %bf.clear689 = and i16 %bf.load688, 511
  %bf.cast690 = zext i16 %bf.clear689 to i32
  %cmp691 = icmp eq i32 %bf.cast690, 0
  br i1 %cmp691, label %if.then693, label %if.end694

if.then693:                                       ; preds = %for.body
  br label %for.inc

if.end694:                                        ; preds = %for.body
  %359 = load %struct.op*, %struct.op** %p, align 8
  %op_type695 = getelementptr inbounds %struct.op, %struct.op* %359, i32 0, i32 4
  %bf.load696 = load i16, i16* %op_type695, align 8
  %bf.clear697 = and i16 %bf.load696, 511
  %bf.cast698 = zext i16 %bf.clear697 to i32
  %cmp699 = icmp ne i32 %bf.cast698, 9
  br i1 %cmp699, label %land.lhs.true701, label %lor.lhs.false715

land.lhs.true701:                                 ; preds = %if.end694
  %360 = load %struct.op*, %struct.op** %p, align 8
  %op_type702 = getelementptr inbounds %struct.op, %struct.op* %360, i32 0, i32 4
  %bf.load703 = load i16, i16* %op_type702, align 8
  %bf.clear704 = and i16 %bf.load703, 511
  %bf.cast705 = zext i16 %bf.clear704 to i32
  %cmp706 = icmp ne i32 %bf.cast705, 10
  br i1 %cmp706, label %land.lhs.true708, label %lor.lhs.false715

land.lhs.true708:                                 ; preds = %land.lhs.true701
  %361 = load %struct.op*, %struct.op** %p, align 8
  %op_type709 = getelementptr inbounds %struct.op, %struct.op* %361, i32 0, i32 4
  %bf.load710 = load i16, i16* %op_type709, align 8
  %bf.clear711 = and i16 %bf.load710, 511
  %bf.cast712 = zext i16 %bf.clear711 to i32
  %cmp713 = icmp ne i32 %bf.cast712, 11
  br i1 %cmp713, label %if.then720, label %lor.lhs.false715

lor.lhs.false715:                                 ; preds = %land.lhs.true708, %land.lhs.true701, %if.end694
  %362 = load %struct.op*, %struct.op** %p, align 8
  %op_private716 = getelementptr inbounds %struct.op, %struct.op* %362, i32 0, i32 6
  %363 = load i8, i8* %op_private716, align 1
  %conv717 = zext i8 %363 to i32
  %and718 = and i32 %conv717, -129
  %tobool719 = icmp ne i32 %and718, 0
  br i1 %tobool719, label %if.then720, label %if.end721

if.then720:                                       ; preds = %lor.lhs.false715, %land.lhs.true708
  br label %for.end

if.end721:                                        ; preds = %lor.lhs.false715
  %364 = load %struct.op*, %struct.op** %p, align 8
  %op_type722 = getelementptr inbounds %struct.op, %struct.op* %364, i32 0, i32 4
  %bf.load723 = load i16, i16* %op_type722, align 8
  %bf.clear724 = and i16 %bf.load723, 511
  %bf.cast725 = zext i16 %bf.clear724 to i32
  %cmp726 = icmp eq i32 %bf.cast725, 10
  br i1 %cmp726, label %land.lhs.true728, label %if.end753

land.lhs.true728:                                 ; preds = %if.end721
  %365 = load %struct.op*, %struct.op** %p, align 8
  %op_next729 = getelementptr inbounds %struct.op, %struct.op* %365, i32 0, i32 0
  %366 = load %struct.op*, %struct.op** %op_next729, align 8
  %tobool730 = icmp ne %struct.op* %366, null
  br i1 %tobool730, label %land.lhs.true731, label %if.end753

land.lhs.true731:                                 ; preds = %land.lhs.true728
  %367 = load %struct.op*, %struct.op** %p, align 8
  %op_next732 = getelementptr inbounds %struct.op, %struct.op* %367, i32 0, i32 0
  %368 = load %struct.op*, %struct.op** %op_next732, align 8
  %op_type733 = getelementptr inbounds %struct.op, %struct.op* %368, i32 0, i32 4
  %bf.load734 = load i16, i16* %op_type733, align 8
  %bf.clear735 = and i16 %bf.load734, 511
  %bf.cast736 = zext i16 %bf.clear735 to i32
  %cmp737 = icmp eq i32 %bf.cast736, 5
  br i1 %cmp737, label %land.lhs.true739, label %if.end753

land.lhs.true739:                                 ; preds = %land.lhs.true731
  %369 = load %struct.op*, %struct.op** %p, align 8
  %op_next740 = getelementptr inbounds %struct.op, %struct.op* %369, i32 0, i32 0
  %370 = load %struct.op*, %struct.op** %op_next740, align 8
  %op_next741 = getelementptr inbounds %struct.op, %struct.op* %370, i32 0, i32 0
  %371 = load %struct.op*, %struct.op** %op_next741, align 8
  %tobool742 = icmp ne %struct.op* %371, null
  br i1 %tobool742, label %land.lhs.true743, label %if.end753

land.lhs.true743:                                 ; preds = %land.lhs.true739
  %372 = load %struct.op*, %struct.op** %p, align 8
  %op_next744 = getelementptr inbounds %struct.op, %struct.op* %372, i32 0, i32 0
  %373 = load %struct.op*, %struct.op** %op_next744, align 8
  %op_next745 = getelementptr inbounds %struct.op, %struct.op* %373, i32 0, i32 0
  %374 = load %struct.op*, %struct.op** %op_next745, align 8
  %op_type746 = getelementptr inbounds %struct.op, %struct.op* %374, i32 0, i32 4
  %bf.load747 = load i16, i16* %op_type746, align 8
  %bf.clear748 = and i16 %bf.load747, 511
  %bf.cast749 = zext i16 %bf.clear748 to i32
  %cmp750 = icmp eq i32 %bf.cast749, 138
  br i1 %cmp750, label %if.then752, label %if.end753

if.then752:                                       ; preds = %land.lhs.true743
  br label %for.end

if.end753:                                        ; preds = %land.lhs.true743, %land.lhs.true739, %land.lhs.true731, %land.lhs.true728, %if.end721
  %375 = load i8, i8* %count, align 1
  %conv754 = zext i8 %375 to i32
  %cmp755 = icmp eq i32 %conv754, 0
  br i1 %cmp755, label %if.then757, label %if.else775

if.then757:                                       ; preds = %if.end753
  %376 = load %struct.op*, %struct.op** %p, align 8
  %op_private758 = getelementptr inbounds %struct.op, %struct.op* %376, i32 0, i32 6
  %377 = load i8, i8* %op_private758, align 1
  %conv759 = zext i8 %377 to i32
  %and760 = and i32 %conv759, 128
  %conv761 = trunc i32 %and760 to i8
  store i8 %conv761, i8* %intro, align 1
  %378 = load %struct.op*, %struct.op** %p, align 8
  %op_targ762 = getelementptr inbounds %struct.op, %struct.op* %378, i32 0, i32 3
  %379 = load i64, i64* %op_targ762, align 8
  store i64 %379, i64* %base, align 8
  %380 = load %struct.op*, %struct.op** %p, align 8
  %op_flags763 = getelementptr inbounds %struct.op, %struct.op* %380, i32 0, i32 5
  %381 = load i8, i8* %op_flags763, align 2
  %conv764 = zext i8 %381 to i32
  %and765 = and i32 %conv764, 3
  %tobool766 = icmp ne i32 %and765, 0
  br i1 %tobool766, label %cond.true767, label %cond.false771

cond.true767:                                     ; preds = %if.then757
  %382 = load %struct.op*, %struct.op** %p, align 8
  %op_flags768 = getelementptr inbounds %struct.op, %struct.op* %382, i32 0, i32 5
  %383 = load i8, i8* %op_flags768, align 2
  %conv769 = zext i8 %383 to i32
  %and770 = and i32 %conv769, 3
  br label %cond.end

cond.false771:                                    ; preds = %if.then757
  br label %cond.end

cond.end:                                         ; preds = %cond.false771, %cond.true767
  %cond772 = phi i32 [ %and770, %cond.true767 ], [ 0, %cond.false771 ]
  %cmp773 = icmp eq i32 %cond772, 1
  %frombool = zext i1 %cmp773 to i8
  store i8 %frombool, i8* %gvoid, align 1
  br label %if.end810

if.else775:                                       ; preds = %if.end753
  %384 = load %struct.op*, %struct.op** %p, align 8
  %op_private776 = getelementptr inbounds %struct.op, %struct.op* %384, i32 0, i32 6
  %385 = load i8, i8* %op_private776, align 1
  %conv777 = zext i8 %385 to i32
  %and778 = and i32 %conv777, 128
  %386 = load i8, i8* %intro, align 1
  %conv779 = zext i8 %386 to i32
  %cmp780 = icmp ne i32 %and778, %conv779
  br i1 %cmp780, label %if.then782, label %if.end783

if.then782:                                       ; preds = %if.else775
  br label %for.end

if.end783:                                        ; preds = %if.else775
  %387 = load %struct.op*, %struct.op** %p, align 8
  %op_targ784 = getelementptr inbounds %struct.op, %struct.op* %387, i32 0, i32 3
  %388 = load i64, i64* %op_targ784, align 8
  %389 = load i64, i64* %base, align 8
  %390 = load i8, i8* %count, align 1
  %conv785 = zext i8 %390 to i64
  %add786 = add i64 %389, %conv785
  %cmp787 = icmp ne i64 %388, %add786
  br i1 %cmp787, label %if.then789, label %if.end790

if.then789:                                       ; preds = %if.end783
  br label %for.end

if.end790:                                        ; preds = %if.end783
  %391 = load i8, i8* %gvoid, align 1
  %tobool791 = trunc i8 %391 to i1
  %conv792 = zext i1 %tobool791 to i32
  %392 = load %struct.op*, %struct.op** %p, align 8
  %op_flags793 = getelementptr inbounds %struct.op, %struct.op* %392, i32 0, i32 5
  %393 = load i8, i8* %op_flags793, align 2
  %conv794 = zext i8 %393 to i32
  %and795 = and i32 %conv794, 3
  %tobool796 = icmp ne i32 %and795, 0
  br i1 %tobool796, label %cond.true797, label %cond.false801

cond.true797:                                     ; preds = %if.end790
  %394 = load %struct.op*, %struct.op** %p, align 8
  %op_flags798 = getelementptr inbounds %struct.op, %struct.op* %394, i32 0, i32 5
  %395 = load i8, i8* %op_flags798, align 2
  %conv799 = zext i8 %395 to i32
  %and800 = and i32 %conv799, 3
  br label %cond.end802

cond.false801:                                    ; preds = %if.end790
  br label %cond.end802

cond.end802:                                      ; preds = %cond.false801, %cond.true797
  %cond803 = phi i32 [ %and800, %cond.true797 ], [ 0, %cond.false801 ]
  %cmp804 = icmp eq i32 %cond803, 1
  %conv805 = zext i1 %cmp804 to i32
  %cmp806 = icmp ne i32 %conv792, %conv805
  br i1 %cmp806, label %if.then808, label %if.end809

if.then808:                                       ; preds = %cond.end802
  br label %for.end

if.end809:                                        ; preds = %cond.end802
  br label %if.end810

if.end810:                                        ; preds = %if.end809, %cond.end
  %396 = load %struct.op*, %struct.op** %p, align 8
  %op_type811 = getelementptr inbounds %struct.op, %struct.op* %396, i32 0, i32 4
  %bf.load812 = load i16, i16* %op_type811, align 8
  %bf.clear813 = and i16 %bf.load812, 511
  %bf.cast814 = zext i16 %bf.clear813 to i32
  %cmp815 = icmp ne i32 %bf.cast814, 9
  br i1 %cmp815, label %land.lhs.true817, label %if.end825

land.lhs.true817:                                 ; preds = %if.end810
  %397 = load i8, i8* %gvoid, align 1
  %tobool818 = trunc i8 %397 to i1
  br i1 %tobool818, label %if.end825, label %land.lhs.true819

land.lhs.true819:                                 ; preds = %land.lhs.true817
  %398 = load %struct.op*, %struct.op** %p, align 8
  %op_flags820 = getelementptr inbounds %struct.op, %struct.op* %398, i32 0, i32 5
  %399 = load i8, i8* %op_flags820, align 2
  %conv821 = zext i8 %399 to i32
  %and822 = and i32 %conv821, 16
  %tobool823 = icmp ne i32 %and822, 0
  br i1 %tobool823, label %if.end825, label %if.then824

if.then824:                                       ; preds = %land.lhs.true819
  br label %for.end

if.end825:                                        ; preds = %land.lhs.true819, %land.lhs.true817, %if.end810
  %400 = load i8, i8* %count, align 1
  %conv826 = zext i8 %400 to i32
  %cmp827 = icmp sge i32 %conv826, 127
  br i1 %cmp827, label %if.then829, label %if.end830

if.then829:                                       ; preds = %if.end825
  br label %for.end

if.end830:                                        ; preds = %if.end825
  %401 = load i8, i8* %intro, align 1
  %conv831 = zext i8 %401 to i32
  %tobool832 = icmp ne i32 %conv831, 0
  br i1 %tobool832, label %land.lhs.true833, label %if.end837

land.lhs.true833:                                 ; preds = %if.end830
  %402 = load i64, i64* %base, align 8
  %cmp834 = icmp ugt i64 %402, 2251799813685247
  br i1 %cmp834, label %if.then836, label %if.end837

if.then836:                                       ; preds = %land.lhs.true833
  br label %for.end

if.end837:                                        ; preds = %land.lhs.true833, %if.end830
  %403 = load i8, i8* %count, align 1
  %inc = add i8 %403, 1
  store i8 %inc, i8* %count, align 1
  %404 = load %struct.op*, %struct.op** %p, align 8
  %op_next838 = getelementptr inbounds %struct.op, %struct.op* %404, i32 0, i32 0
  %405 = load %struct.op*, %struct.op** %op_next838, align 8
  store %struct.op* %405, %struct.op** %followop, align 8
  br label %for.inc

for.inc:                                          ; preds = %if.end837, %if.then693
  %406 = load %struct.op*, %struct.op** %p, align 8
  %op_next839 = getelementptr inbounds %struct.op, %struct.op* %406, i32 0, i32 0
  %407 = load %struct.op*, %struct.op** %op_next839, align 8
  store %struct.op* %407, %struct.op** %p, align 8
  br label %for.cond685

for.end:                                          ; preds = %if.then836, %if.then829, %if.then824, %if.then808, %if.then789, %if.then782, %if.then752, %if.then720, %for.cond685
  %408 = load i8, i8* %count, align 1
  %conv840 = zext i8 %408 to i32
  %cmp841 = icmp slt i32 %conv840, 1
  br i1 %cmp841, label %if.then849, label %lor.lhs.false843

lor.lhs.false843:                                 ; preds = %for.end
  %409 = load i8, i8* %count, align 1
  %conv844 = zext i8 %409 to i32
  %cmp845 = icmp eq i32 %conv844, 1
  br i1 %cmp845, label %land.lhs.true847, label %if.end850

land.lhs.true847:                                 ; preds = %lor.lhs.false843
  %410 = load i8, i8* %defav, align 1
  %tobool848 = trunc i8 %410 to i1
  br i1 %tobool848, label %if.end850, label %if.then849

if.then849:                                       ; preds = %land.lhs.true847, %for.end
  br label %sw.epilog2365

if.end850:                                        ; preds = %land.lhs.true847, %lor.lhs.false843
  %411 = load i8, i8* %gvoid, align 1
  %tobool851 = trunc i8 %411 to i1
  br i1 %tobool851, label %if.then852, label %if.end1002

if.then852:                                       ; preds = %if.end850
  %412 = load %struct.op*, %struct.op** %followop, align 8
  %op_type853 = getelementptr inbounds %struct.op, %struct.op* %412, i32 0, i32 4
  %bf.load854 = load i16, i16* %op_type853, align 8
  %bf.clear855 = and i16 %bf.load854, 511
  %bf.cast856 = zext i16 %bf.clear855 to i32
  %cmp857 = icmp eq i32 %bf.cast856, 158
  br i1 %cmp857, label %land.lhs.true859, label %if.else1000

land.lhs.true859:                                 ; preds = %if.then852
  %413 = load %struct.op*, %struct.op** %followop, align 8
  %op_flags860 = getelementptr inbounds %struct.op, %struct.op* %413, i32 0, i32 5
  %414 = load i8, i8* %op_flags860, align 2
  %conv861 = zext i8 %414 to i32
  %and862 = and i32 %conv861, 3
  %tobool863 = icmp ne i32 %and862, 0
  br i1 %tobool863, label %cond.true864, label %cond.false868

cond.true864:                                     ; preds = %land.lhs.true859
  %415 = load %struct.op*, %struct.op** %followop, align 8
  %op_flags865 = getelementptr inbounds %struct.op, %struct.op* %415, i32 0, i32 5
  %416 = load i8, i8* %op_flags865, align 2
  %conv866 = zext i8 %416 to i32
  %and867 = and i32 %conv866, 3
  br label %cond.end869

cond.false868:                                    ; preds = %land.lhs.true859
  br label %cond.end869

cond.end869:                                      ; preds = %cond.false868, %cond.true864
  %cond870 = phi i32 [ %and867, %cond.true864 ], [ 0, %cond.false868 ]
  %cmp871 = icmp eq i32 %cond870, 1
  br i1 %cmp871, label %if.then873, label %if.else1000

if.then873:                                       ; preds = %cond.end869
  %417 = load %struct.op*, %struct.op** %followop, align 8
  %op_next874 = getelementptr inbounds %struct.op, %struct.op* %417, i32 0, i32 0
  %418 = load %struct.op*, %struct.op** %op_next874, align 8
  store %struct.op* %418, %struct.op** %followop, align 8
  %419 = load %struct.op*, %struct.op** %oldoldop, align 8
  %tobool875 = icmp ne %struct.op* %419, null
  br i1 %tobool875, label %land.lhs.true876, label %if.end923

land.lhs.true876:                                 ; preds = %if.then873
  %420 = load %struct.op*, %struct.op** %oldoldop, align 8
  %op_type877 = getelementptr inbounds %struct.op, %struct.op* %420, i32 0, i32 4
  %bf.load878 = load i16, i16* %op_type877, align 8
  %bf.clear879 = and i16 %bf.load878, 511
  %bf.cast880 = zext i16 %bf.clear879 to i32
  %cmp881 = icmp eq i32 %bf.cast880, 390
  br i1 %cmp881, label %land.lhs.true883, label %if.end923

land.lhs.true883:                                 ; preds = %land.lhs.true876
  %421 = load %struct.op*, %struct.op** %oldoldop, align 8
  %op_flags884 = getelementptr inbounds %struct.op, %struct.op* %421, i32 0, i32 5
  %422 = load i8, i8* %op_flags884, align 2
  %conv885 = zext i8 %422 to i32
  %and886 = and i32 %conv885, 3
  %cmp887 = icmp eq i32 %and886, 1
  br i1 %cmp887, label %land.lhs.true889, label %if.end923

land.lhs.true889:                                 ; preds = %land.lhs.true883
  %423 = load %struct.op*, %struct.op** %oldoldop, align 8
  %op_private890 = getelementptr inbounds %struct.op, %struct.op* %423, i32 0, i32 6
  %424 = load i8, i8* %op_private890, align 1
  %conv891 = zext i8 %424 to i32
  %and892 = and i32 %conv891, 128
  %425 = load i8, i8* %intro, align 1
  %conv893 = zext i8 %425 to i32
  %cmp894 = icmp eq i32 %and892, %conv893
  br i1 %cmp894, label %land.lhs.true896, label %if.end923

land.lhs.true896:                                 ; preds = %land.lhs.true889
  %426 = load %struct.op*, %struct.op** %oldoldop, align 8
  %op_flags897 = getelementptr inbounds %struct.op, %struct.op* %426, i32 0, i32 5
  %427 = load i8, i8* %op_flags897, align 2
  %conv898 = zext i8 %427 to i32
  %and899 = and i32 %conv898, 128
  %tobool900 = icmp ne i32 %and899, 0
  br i1 %tobool900, label %if.end923, label %if.then901

if.then901:                                       ; preds = %land.lhs.true896
  %428 = load %struct.op*, %struct.op** %oldoldop, align 8
  %op_private902 = getelementptr inbounds %struct.op, %struct.op* %428, i32 0, i32 6
  %429 = load i8, i8* %op_private902, align 1
  %conv903 = zext i8 %429 to i32
  %and904 = and i32 %conv903, 127
  %conv905 = trunc i32 %and904 to i8
  store i8 %conv905, i8* %old_count, align 1
  %430 = load %struct.op*, %struct.op** %oldoldop, align 8
  %op_targ906 = getelementptr inbounds %struct.op, %struct.op* %430, i32 0, i32 3
  %431 = load i64, i64* %op_targ906, align 8
  %432 = load i8, i8* %old_count, align 1
  %conv907 = zext i8 %432 to i64
  %add908 = add i64 %431, %conv907
  %433 = load i64, i64* %base, align 8
  %cmp909 = icmp eq i64 %add908, %433
  br i1 %cmp909, label %land.lhs.true911, label %if.end922

land.lhs.true911:                                 ; preds = %if.then901
  %434 = load i8, i8* %old_count, align 1
  %conv912 = zext i8 %434 to i32
  %435 = load i8, i8* %count, align 1
  %conv913 = zext i8 %435 to i32
  %sub = sub nsw i32 127, %conv913
  %cmp914 = icmp slt i32 %conv912, %sub
  br i1 %cmp914, label %if.then916, label %if.end922

if.then916:                                       ; preds = %land.lhs.true911
  %436 = load %struct.op*, %struct.op** %oldoldop, align 8
  %op_targ917 = getelementptr inbounds %struct.op, %struct.op* %436, i32 0, i32 3
  %437 = load i64, i64* %op_targ917, align 8
  store i64 %437, i64* %base, align 8
  %438 = load i8, i8* %old_count, align 1
  %conv918 = zext i8 %438 to i32
  %439 = load i8, i8* %count, align 1
  %conv919 = zext i8 %439 to i32
  %add920 = add nsw i32 %conv919, %conv918
  %conv921 = trunc i32 %add920 to i8
  store i8 %conv921, i8* %count, align 1
  store i8 1, i8* %reuse, align 1
  br label %if.end922

if.end922:                                        ; preds = %if.then916, %land.lhs.true911, %if.then901
  br label %if.end923

if.end923:                                        ; preds = %if.end922, %land.lhs.true896, %land.lhs.true889, %land.lhs.true883, %land.lhs.true876, %if.then873
  br label %while.cond924

while.cond924:                                    ; preds = %while.body996, %if.end923
  %440 = load %struct.op*, %struct.op** %followop, align 8
  %op_next925 = getelementptr inbounds %struct.op, %struct.op* %440, i32 0, i32 0
  %441 = load %struct.op*, %struct.op** %op_next925, align 8
  store %struct.op* %441, %struct.op** %p, align 8
  %tobool926 = icmp ne %struct.op* %441, null
  br i1 %tobool926, label %land.lhs.true927, label %land.end995

land.lhs.true927:                                 ; preds = %while.cond924
  %442 = load %struct.op*, %struct.op** %p, align 8
  %op_type928 = getelementptr inbounds %struct.op, %struct.op* %442, i32 0, i32 4
  %bf.load929 = load i16, i16* %op_type928, align 8
  %bf.clear930 = and i16 %bf.load929, 511
  %bf.cast931 = zext i16 %bf.clear930 to i32
  %cmp932 = icmp eq i32 %bf.cast931, 9
  br i1 %cmp932, label %land.lhs.true948, label %lor.lhs.false934

lor.lhs.false934:                                 ; preds = %land.lhs.true927
  %443 = load %struct.op*, %struct.op** %p, align 8
  %op_type935 = getelementptr inbounds %struct.op, %struct.op* %443, i32 0, i32 4
  %bf.load936 = load i16, i16* %op_type935, align 8
  %bf.clear937 = and i16 %bf.load936, 511
  %bf.cast938 = zext i16 %bf.clear937 to i32
  %cmp939 = icmp eq i32 %bf.cast938, 10
  br i1 %cmp939, label %land.lhs.true948, label %lor.lhs.false941

lor.lhs.false941:                                 ; preds = %lor.lhs.false934
  %444 = load %struct.op*, %struct.op** %p, align 8
  %op_type942 = getelementptr inbounds %struct.op, %struct.op* %444, i32 0, i32 4
  %bf.load943 = load i16, i16* %op_type942, align 8
  %bf.clear944 = and i16 %bf.load943, 511
  %bf.cast945 = zext i16 %bf.clear944 to i32
  %cmp946 = icmp eq i32 %bf.cast945, 11
  br i1 %cmp946, label %land.lhs.true948, label %land.end995

land.lhs.true948:                                 ; preds = %lor.lhs.false941, %lor.lhs.false934, %land.lhs.true927
  %445 = load %struct.op*, %struct.op** %p, align 8
  %op_flags949 = getelementptr inbounds %struct.op, %struct.op* %445, i32 0, i32 5
  %446 = load i8, i8* %op_flags949, align 2
  %conv950 = zext i8 %446 to i32
  %and951 = and i32 %conv950, 3
  %cmp952 = icmp eq i32 %and951, 1
  br i1 %cmp952, label %land.lhs.true954, label %land.end995

land.lhs.true954:                                 ; preds = %land.lhs.true948
  %447 = load %struct.op*, %struct.op** %p, align 8
  %op_private955 = getelementptr inbounds %struct.op, %struct.op* %447, i32 0, i32 6
  %448 = load i8, i8* %op_private955, align 1
  %conv956 = zext i8 %448 to i32
  %and957 = and i32 %conv956, 128
  %449 = load i8, i8* %intro, align 1
  %conv958 = zext i8 %449 to i32
  %cmp959 = icmp eq i32 %and957, %conv958
  br i1 %cmp959, label %land.lhs.true961, label %land.end995

land.lhs.true961:                                 ; preds = %land.lhs.true954
  %450 = load %struct.op*, %struct.op** %p, align 8
  %op_private962 = getelementptr inbounds %struct.op, %struct.op* %450, i32 0, i32 6
  %451 = load i8, i8* %op_private962, align 1
  %conv963 = zext i8 %451 to i32
  %and964 = and i32 %conv963, -129
  %tobool965 = icmp ne i32 %and964, 0
  br i1 %tobool965, label %land.end995, label %land.lhs.true966

land.lhs.true966:                                 ; preds = %land.lhs.true961
  %452 = load %struct.op*, %struct.op** %p, align 8
  %op_next967 = getelementptr inbounds %struct.op, %struct.op* %452, i32 0, i32 0
  %453 = load %struct.op*, %struct.op** %op_next967, align 8
  %tobool968 = icmp ne %struct.op* %453, null
  br i1 %tobool968, label %land.lhs.true969, label %land.end995

land.lhs.true969:                                 ; preds = %land.lhs.true966
  %454 = load %struct.op*, %struct.op** %p, align 8
  %op_next970 = getelementptr inbounds %struct.op, %struct.op* %454, i32 0, i32 0
  %455 = load %struct.op*, %struct.op** %op_next970, align 8
  %op_type971 = getelementptr inbounds %struct.op, %struct.op* %455, i32 0, i32 4
  %bf.load972 = load i16, i16* %op_type971, align 8
  %bf.clear973 = and i16 %bf.load972, 511
  %bf.cast974 = zext i16 %bf.clear973 to i32
  %cmp975 = icmp eq i32 %bf.cast974, 193
  br i1 %cmp975, label %land.lhs.true985, label %lor.lhs.false977

lor.lhs.false977:                                 ; preds = %land.lhs.true969
  %456 = load %struct.op*, %struct.op** %p, align 8
  %op_next978 = getelementptr inbounds %struct.op, %struct.op* %456, i32 0, i32 0
  %457 = load %struct.op*, %struct.op** %op_next978, align 8
  %op_type979 = getelementptr inbounds %struct.op, %struct.op* %457, i32 0, i32 4
  %bf.load980 = load i16, i16* %op_type979, align 8
  %bf.clear981 = and i16 %bf.load980, 511
  %bf.cast982 = zext i16 %bf.clear981 to i32
  %cmp983 = icmp eq i32 %bf.cast982, 194
  br i1 %cmp983, label %land.lhs.true985, label %land.end995

land.lhs.true985:                                 ; preds = %lor.lhs.false977, %land.lhs.true969
  %458 = load i8, i8* %count, align 1
  %conv986 = zext i8 %458 to i32
  %cmp987 = icmp slt i32 %conv986, 127
  br i1 %cmp987, label %land.rhs989, label %land.end995

land.rhs989:                                      ; preds = %land.lhs.true985
  %459 = load i64, i64* %base, align 8
  %460 = load i8, i8* %count, align 1
  %conv990 = zext i8 %460 to i64
  %add991 = add i64 %459, %conv990
  %461 = load %struct.op*, %struct.op** %p, align 8
  %op_targ992 = getelementptr inbounds %struct.op, %struct.op* %461, i32 0, i32 3
  %462 = load i64, i64* %op_targ992, align 8
  %cmp993 = icmp eq i64 %add991, %462
  br label %land.end995

land.end995:                                      ; preds = %land.rhs989, %land.lhs.true985, %lor.lhs.false977, %land.lhs.true966, %land.lhs.true961, %land.lhs.true954, %land.lhs.true948, %lor.lhs.false941, %while.cond924
  %463 = phi i1 [ false, %land.lhs.true985 ], [ false, %lor.lhs.false977 ], [ false, %land.lhs.true966 ], [ false, %land.lhs.true961 ], [ false, %land.lhs.true954 ], [ false, %land.lhs.true948 ], [ false, %lor.lhs.false941 ], [ false, %while.cond924 ], [ %cmp993, %land.rhs989 ]
  br i1 %463, label %while.body996, label %while.end999

while.body996:                                    ; preds = %land.end995
  %464 = load i8, i8* %count, align 1
  %inc997 = add i8 %464, 1
  store i8 %inc997, i8* %count, align 1
  %465 = load %struct.op*, %struct.op** %p, align 8
  %op_next998 = getelementptr inbounds %struct.op, %struct.op* %465, i32 0, i32 0
  %466 = load %struct.op*, %struct.op** %op_next998, align 8
  store %struct.op* %466, %struct.op** %followop, align 8
  br label %while.cond924

while.end999:                                     ; preds = %land.end995
  br label %if.end1001

if.else1000:                                      ; preds = %cond.end869, %if.then852
  br label %sw.epilog2365

if.end1001:                                       ; preds = %while.end999
  br label %if.end1002

if.end1002:                                       ; preds = %if.end1001, %if.end850
  %467 = load i8, i8* %reuse, align 1
  %tobool1003 = trunc i8 %467 to i1
  br i1 %tobool1003, label %if.then1004, label %if.else1011

if.then1004:                                      ; preds = %if.end1002
  %468 = load %struct.op*, %struct.op** %followop, align 8
  %469 = load %struct.op*, %struct.op** %oldoldop, align 8
  %op_next1005 = getelementptr inbounds %struct.op, %struct.op* %469, i32 0, i32 0
  store %struct.op* %468, %struct.op** %op_next1005, align 8
  %470 = load i8, i8* %intro, align 1
  %conv1006 = zext i8 %470 to i32
  %471 = load i8, i8* %count, align 1
  %conv1007 = zext i8 %471 to i32
  %or1008 = or i32 %conv1006, %conv1007
  %conv1009 = trunc i32 %or1008 to i8
  %472 = load %struct.op*, %struct.op** %oldoldop, align 8
  %op_private1010 = getelementptr inbounds %struct.op, %struct.op* %472, i32 0, i32 6
  store i8 %conv1009, i8* %op_private1010, align 1
  %473 = load %struct.op*, %struct.op** %oldoldop, align 8
  store %struct.op* %473, %struct.op** %o.addr, align 8
  store %struct.op* null, %struct.op** %oldop, align 8
  store %struct.op* null, %struct.op** %oldoldop, align 8
  br label %if.end1038

if.else1011:                                      ; preds = %if.end1002
  %474 = load %struct.op*, %struct.op** %followop, align 8
  %475 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_next1012 = getelementptr inbounds %struct.op, %struct.op* %475, i32 0, i32 0
  store %struct.op* %474, %struct.op** %op_next1012, align 8
  br label %do.body1013

do.body1013:                                      ; preds = %if.else1011
  %476 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type1014 = getelementptr inbounds %struct.op, %struct.op* %476, i32 0, i32 4
  %bf.load1015 = load i16, i16* %op_type1014, align 8
  %bf.clear1016 = and i16 %bf.load1015, -512
  %bf.set1017 = or i16 %bf.clear1016, 390
  store i16 %bf.set1017, i16* %op_type1014, align 8
  %477 = load %struct.op* ()*, %struct.op* ()** getelementptr inbounds ([0 x %struct.op* ()*], [0 x %struct.op* ()*]* @PL_ppaddr, i64 0, i64 390), align 8
  %478 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_ppaddr1018 = getelementptr inbounds %struct.op, %struct.op* %478, i32 0, i32 2
  store %struct.op* ()* %477, %struct.op* ()** %op_ppaddr1018, align 8
  br label %do.end1019

do.end1019:                                       ; preds = %do.body1013
  %479 = load i64, i64* %base, align 8
  %480 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_targ1020 = getelementptr inbounds %struct.op, %struct.op* %480, i32 0, i32 3
  store i64 %479, i64* %op_targ1020, align 8
  %481 = load i8, i8* %intro, align 1
  %conv1021 = zext i8 %481 to i32
  %482 = load i8, i8* %count, align 1
  %conv1022 = zext i8 %482 to i32
  %or1023 = or i32 %conv1021, %conv1022
  %conv1024 = trunc i32 %or1023 to i8
  %483 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_private1025 = getelementptr inbounds %struct.op, %struct.op* %483, i32 0, i32 6
  store i8 %conv1024, i8* %op_private1025, align 1
  %484 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_flags1026 = getelementptr inbounds %struct.op, %struct.op* %484, i32 0, i32 5
  %485 = load i8, i8* %op_flags1026, align 2
  %conv1027 = zext i8 %485 to i32
  %and1028 = and i32 %conv1027, -132
  %486 = load i8, i8* %gvoid, align 1
  %tobool1029 = trunc i8 %486 to i1
  %conv1030 = zext i1 %tobool1029 to i32
  %mul = mul nsw i32 %conv1030, 1
  %or1031 = or i32 %and1028, %mul
  %487 = load i8, i8* %defav, align 1
  %tobool1032 = trunc i8 %487 to i1
  %488 = zext i1 %tobool1032 to i64
  %cond1034 = select i1 %tobool1032, i32 128, i32 0
  %or1035 = or i32 %or1031, %cond1034
  %conv1036 = trunc i32 %or1035 to i8
  %489 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_flags1037 = getelementptr inbounds %struct.op, %struct.op* %489, i32 0, i32 5
  store i8 %conv1036, i8* %op_flags1037, align 2
  br label %if.end1038

if.end1038:                                       ; preds = %do.end1019, %if.then1004
  br label %sw.epilog2365

sw.bb1039:                                        ; preds = %sw.epilog, %sw.epilog, %sw.epilog
  %490 = load %struct.op*, %struct.op** %oldop, align 8
  %tobool1040 = icmp ne %struct.op* %490, null
  br i1 %tobool1040, label %land.lhs.true1041, label %if.end1055

land.lhs.true1041:                                ; preds = %sw.bb1039
  %491 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_private1042 = getelementptr inbounds %struct.op, %struct.op* %491, i32 0, i32 6
  %492 = load i8, i8* %op_private1042, align 1
  %conv1043 = zext i8 %492 to i32
  %cmp1044 = icmp eq i32 %conv1043, 192
  br i1 %cmp1044, label %land.lhs.true1046, label %if.end1055

land.lhs.true1046:                                ; preds = %land.lhs.true1041
  %493 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_flags1047 = getelementptr inbounds %struct.op, %struct.op* %493, i32 0, i32 5
  %494 = load i8, i8* %op_flags1047, align 2
  %conv1048 = zext i8 %494 to i32
  %and1049 = and i32 %conv1048, 3
  %cmp1050 = icmp eq i32 %and1049, 1
  br i1 %cmp1050, label %if.then1052, label %if.end1055

if.then1052:                                      ; preds = %land.lhs.true1046
  %495 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_next1053 = getelementptr inbounds %struct.op, %struct.op* %495, i32 0, i32 0
  %496 = load %struct.op*, %struct.op** %op_next1053, align 8
  %497 = load %struct.op*, %struct.op** %oldop, align 8
  %op_next1054 = getelementptr inbounds %struct.op, %struct.op* %497, i32 0, i32 0
  store %struct.op* %496, %struct.op** %op_next1054, align 8
  br label %redo_nextstate

if.end1055:                                       ; preds = %land.lhs.true1046, %land.lhs.true1041, %sw.bb1039
  %498 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type1056 = getelementptr inbounds %struct.op, %struct.op* %498, i32 0, i32 4
  %bf.load1057 = load i16, i16* %op_type1056, align 8
  %bf.clear1058 = and i16 %bf.load1057, 511
  %bf.cast1059 = zext i16 %bf.clear1058 to i32
  %cmp1060 = icmp ne i32 %bf.cast1059, 10
  br i1 %cmp1060, label %if.then1062, label %if.end1063

if.then1062:                                      ; preds = %if.end1055
  br label %sw.epilog2365

if.end1063:                                       ; preds = %if.end1055
  br label %sw.bb1064

sw.bb1064:                                        ; preds = %sw.epilog, %if.end1063
  %499 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type1065 = getelementptr inbounds %struct.op, %struct.op* %499, i32 0, i32 4
  %bf.load1066 = load i16, i16* %op_type1065, align 8
  %bf.clear1067 = and i16 %bf.load1066, 511
  %bf.cast1068 = zext i16 %bf.clear1067 to i32
  %cmp1069 = icmp eq i32 %bf.cast1068, 10
  br i1 %cmp1069, label %if.then1079, label %lor.lhs.false1071

lor.lhs.false1071:                                ; preds = %sw.bb1064
  %500 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_next1072 = getelementptr inbounds %struct.op, %struct.op* %500, i32 0, i32 0
  %501 = load %struct.op*, %struct.op** %op_next1072, align 8
  %op_type1073 = getelementptr inbounds %struct.op, %struct.op* %501, i32 0, i32 4
  %bf.load1074 = load i16, i16* %op_type1073, align 8
  %bf.clear1075 = and i16 %bf.load1074, 511
  %bf.cast1076 = zext i16 %bf.clear1075 to i32
  %cmp1077 = icmp eq i32 %bf.cast1076, 135
  br i1 %cmp1077, label %if.then1079, label %if.end1212

if.then1079:                                      ; preds = %lor.lhs.false1071, %sw.bb1064
  %502 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type1080 = getelementptr inbounds %struct.op, %struct.op* %502, i32 0, i32 4
  %bf.load1081 = load i16, i16* %op_type1080, align 8
  %bf.clear1082 = and i16 %bf.load1081, 511
  %bf.cast1083 = zext i16 %bf.clear1082 to i32
  %cmp1084 = icmp eq i32 %bf.cast1083, 10
  br i1 %cmp1084, label %cond.true1086, label %cond.false1088

cond.true1086:                                    ; preds = %if.then1079
  %503 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_next1087 = getelementptr inbounds %struct.op, %struct.op* %503, i32 0, i32 0
  %504 = load %struct.op*, %struct.op** %op_next1087, align 8
  br label %cond.end1091

cond.false1088:                                   ; preds = %if.then1079
  %505 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_next1089 = getelementptr inbounds %struct.op, %struct.op* %505, i32 0, i32 0
  %506 = load %struct.op*, %struct.op** %op_next1089, align 8
  %op_next1090 = getelementptr inbounds %struct.op, %struct.op* %506, i32 0, i32 0
  %507 = load %struct.op*, %struct.op** %op_next1090, align 8
  br label %cond.end1091

cond.end1091:                                     ; preds = %cond.false1088, %cond.true1086
  %cond1092 = phi %struct.op* [ %504, %cond.true1086 ], [ %507, %cond.false1088 ]
  store %struct.op* %cond1092, %struct.op** %pop, align 8
  %508 = load %struct.op*, %struct.op** %pop, align 8
  %tobool1093 = icmp ne %struct.op* %508, null
  br i1 %tobool1093, label %land.lhs.true1094, label %if.end1203

land.lhs.true1094:                                ; preds = %cond.end1091
  %509 = load %struct.op*, %struct.op** %pop, align 8
  %op_type1095 = getelementptr inbounds %struct.op, %struct.op* %509, i32 0, i32 4
  %bf.load1096 = load i16, i16* %op_type1095, align 8
  %bf.clear1097 = and i16 %bf.load1096, 511
  %bf.cast1098 = zext i16 %bf.clear1097 to i32
  %cmp1099 = icmp eq i32 %bf.cast1098, 5
  br i1 %cmp1099, label %land.lhs.true1101, label %if.end1203

land.lhs.true1101:                                ; preds = %land.lhs.true1094
  %510 = load %struct.op*, %struct.op** %pop, align 8
  %op_next1102 = getelementptr inbounds %struct.op, %struct.op* %510, i32 0, i32 0
  %511 = load %struct.op*, %struct.op** %op_next1102, align 8
  store %struct.op* %511, %struct.op** @PL_op, align 8
  %tobool1103 = icmp ne %struct.op* %511, null
  br i1 %tobool1103, label %land.lhs.true1104, label %if.end1203

land.lhs.true1104:                                ; preds = %land.lhs.true1101
  %512 = load %struct.op*, %struct.op** %pop, align 8
  %op_next1105 = getelementptr inbounds %struct.op, %struct.op* %512, i32 0, i32 0
  %513 = load %struct.op*, %struct.op** %op_next1105, align 8
  %op_type1106 = getelementptr inbounds %struct.op, %struct.op* %513, i32 0, i32 4
  %bf.load1107 = load i16, i16* %op_type1106, align 8
  %bf.clear1108 = and i16 %bf.load1107, 511
  %bf.cast1109 = zext i16 %bf.clear1108 to i32
  %cmp1110 = icmp eq i32 %bf.cast1109, 138
  br i1 %cmp1110, label %land.lhs.true1112, label %if.end1203

land.lhs.true1112:                                ; preds = %land.lhs.true1104
  %514 = load %struct.op*, %struct.op** %pop, align 8
  %op_next1113 = getelementptr inbounds %struct.op, %struct.op* %514, i32 0, i32 0
  %515 = load %struct.op*, %struct.op** %op_next1113, align 8
  %op_private1114 = getelementptr inbounds %struct.op, %struct.op* %515, i32 0, i32 6
  %516 = load i8, i8* %op_private1114, align 1
  %conv1115 = zext i8 %516 to i32
  %and1116 = and i32 %conv1115, 248
  %tobool1117 = icmp ne i32 %and1116, 0
  br i1 %tobool1117, label %if.end1203, label %land.lhs.true1118

land.lhs.true1118:                                ; preds = %land.lhs.true1112
  %517 = load %struct.op*, %struct.op** %pop, align 8
  %518 = bitcast %struct.op* %517 to %struct.svop*
  %op_sv1119 = getelementptr inbounds %struct.svop, %struct.svop* %518, i32 0, i32 7
  %519 = load %struct.sv*, %struct.sv** %op_sv1119, align 8
  %sv_flags1120 = getelementptr inbounds %struct.sv, %struct.sv* %519, i32 0, i32 2
  %520 = load i32, i32* %sv_flags1120, align 4
  %and1121 = and i32 %520, 2097408
  %cmp1122 = icmp eq i32 %and1121, 256
  br i1 %cmp1122, label %cond.true1124, label %cond.false1129

cond.true1124:                                    ; preds = %land.lhs.true1118
  %521 = load %struct.op*, %struct.op** %pop, align 8
  %522 = bitcast %struct.op* %521 to %struct.svop*
  %op_sv1125 = getelementptr inbounds %struct.svop, %struct.svop* %522, i32 0, i32 7
  %523 = load %struct.sv*, %struct.sv** %op_sv1125, align 8
  %sv_any1126 = getelementptr inbounds %struct.sv, %struct.sv* %523, i32 0, i32 0
  %524 = load i8*, i8** %sv_any1126, align 8
  %525 = bitcast i8* %524 to %struct.xpviv*
  %xiv_u1127 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %525, i32 0, i32 4
  %xivu_iv1128 = bitcast %union._xivu* %xiv_u1127 to i64*
  %526 = load i64, i64* %xivu_iv1128, align 8
  br label %cond.end1132

cond.false1129:                                   ; preds = %land.lhs.true1118
  %527 = load %struct.op*, %struct.op** %pop, align 8
  %528 = bitcast %struct.op* %527 to %struct.svop*
  %op_sv1130 = getelementptr inbounds %struct.svop, %struct.svop* %528, i32 0, i32 7
  %529 = load %struct.sv*, %struct.sv** %op_sv1130, align 8
  %call1131 = call i64 @Perl_sv_2iv_flags(%struct.sv* %529, i32 2)
  br label %cond.end1132

cond.end1132:                                     ; preds = %cond.false1129, %cond.true1124
  %cond1133 = phi i64 [ %526, %cond.true1124 ], [ %call1131, %cond.false1129 ]
  store i64 %cond1133, i64* %i, align 8
  %cmp1134 = icmp sge i64 %cond1133, -128
  br i1 %cmp1134, label %land.lhs.true1136, label %if.end1203

land.lhs.true1136:                                ; preds = %cond.end1132
  %530 = load i64, i64* %i, align 8
  %cmp1137 = icmp sle i64 %530, 127
  br i1 %cmp1137, label %if.then1139, label %if.end1203

if.then1139:                                      ; preds = %land.lhs.true1136
  %531 = load %struct.op*, %struct.op** %pop, align 8
  %532 = bitcast %struct.op* %531 to %struct.svop*
  %op_private1140 = getelementptr inbounds %struct.svop, %struct.svop* %532, i32 0, i32 6
  %533 = load i8, i8* %op_private1140, align 1
  %conv1141 = zext i8 %533 to i32
  %and1142 = and i32 %conv1141, 8
  %tobool1143 = icmp ne i32 %and1142, 0
  br i1 %tobool1143, label %if.then1144, label %if.end1145

if.then1144:                                      ; preds = %if.then1139
  %534 = load %struct.op*, %struct.op** %pop, align 8
  call void @S_no_bareword_allowed(%struct.op* %534)
  br label %if.end1145

if.end1145:                                       ; preds = %if.then1144, %if.then1139
  %535 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type1146 = getelementptr inbounds %struct.op, %struct.op* %535, i32 0, i32 4
  %bf.load1147 = load i16, i16* %op_type1146, align 8
  %bf.clear1148 = and i16 %bf.load1147, 511
  %bf.cast1149 = zext i16 %bf.clear1148 to i32
  %cmp1150 = icmp eq i32 %bf.cast1149, 7
  br i1 %cmp1150, label %if.then1152, label %if.end1154

if.then1152:                                      ; preds = %if.end1145
  %536 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_next1153 = getelementptr inbounds %struct.op, %struct.op* %536, i32 0, i32 0
  %537 = load %struct.op*, %struct.op** %op_next1153, align 8
  call void @Perl_op_null(%struct.op* %537)
  br label %if.end1154

if.end1154:                                       ; preds = %if.then1152, %if.end1145
  %538 = load %struct.op*, %struct.op** %pop, align 8
  %op_next1155 = getelementptr inbounds %struct.op, %struct.op* %538, i32 0, i32 0
  %539 = load %struct.op*, %struct.op** %op_next1155, align 8
  call void @Perl_op_null(%struct.op* %539)
  %540 = load %struct.op*, %struct.op** %pop, align 8
  call void @Perl_op_null(%struct.op* %540)
  %541 = load %struct.op*, %struct.op** %pop, align 8
  %op_next1156 = getelementptr inbounds %struct.op, %struct.op* %541, i32 0, i32 0
  %542 = load %struct.op*, %struct.op** %op_next1156, align 8
  %op_flags1157 = getelementptr inbounds %struct.op, %struct.op* %542, i32 0, i32 5
  %543 = load i8, i8* %op_flags1157, align 2
  %conv1158 = zext i8 %543 to i32
  %and1159 = and i32 %conv1158, 32
  %544 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_flags1160 = getelementptr inbounds %struct.op, %struct.op* %544, i32 0, i32 5
  %545 = load i8, i8* %op_flags1160, align 2
  %conv1161 = zext i8 %545 to i32
  %or1162 = or i32 %conv1161, %and1159
  %conv1163 = trunc i32 %or1162 to i8
  store i8 %conv1163, i8* %op_flags1160, align 2
  %546 = load %struct.op*, %struct.op** %pop, align 8
  %op_next1164 = getelementptr inbounds %struct.op, %struct.op* %546, i32 0, i32 0
  %547 = load %struct.op*, %struct.op** %op_next1164, align 8
  %op_next1165 = getelementptr inbounds %struct.op, %struct.op* %547, i32 0, i32 0
  %548 = load %struct.op*, %struct.op** %op_next1165, align 8
  %549 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_next1166 = getelementptr inbounds %struct.op, %struct.op* %549, i32 0, i32 0
  store %struct.op* %548, %struct.op** %op_next1166, align 8
  %550 = load %struct.op* ()*, %struct.op* ()** getelementptr inbounds ([0 x %struct.op* ()*], [0 x %struct.op* ()*]* @PL_ppaddr, i64 0, i64 136), align 8
  %551 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_ppaddr1167 = getelementptr inbounds %struct.op, %struct.op* %551, i32 0, i32 2
  store %struct.op* ()* %550, %struct.op* ()** %op_ppaddr1167, align 8
  %552 = load i64, i64* %i, align 8
  %conv1168 = trunc i64 %552 to i8
  %553 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_private1169 = getelementptr inbounds %struct.op, %struct.op* %553, i32 0, i32 6
  store i8 %conv1168, i8* %op_private1169, align 1
  %554 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type1170 = getelementptr inbounds %struct.op, %struct.op* %554, i32 0, i32 4
  %bf.load1171 = load i16, i16* %op_type1170, align 8
  %bf.clear1172 = and i16 %bf.load1171, 511
  %bf.cast1173 = zext i16 %bf.clear1172 to i32
  %cmp1174 = icmp eq i32 %bf.cast1173, 7
  br i1 %cmp1174, label %if.then1176, label %if.else1197

if.then1176:                                      ; preds = %if.end1154
  %555 = load %struct.op*, %struct.op** %o.addr, align 8
  %556 = bitcast %struct.op* %555 to %struct.svop*
  %op_sv1177 = getelementptr inbounds %struct.svop, %struct.svop* %556, i32 0, i32 7
  %557 = load %struct.sv*, %struct.sv** %op_sv1177, align 8
  %558 = bitcast %struct.sv* %557 to %struct.gv*
  store %struct.gv* %558, %struct.gv** %gv, align 8
  %559 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u = getelementptr inbounds %struct.gv, %struct.gv* %559, i32 0, i32 3
  %svu_gp = bitcast %union.anon.3* %sv_u to %struct.gp**
  %560 = load %struct.gp*, %struct.gp** %svu_gp, align 8
  %add.ptr1178 = getelementptr inbounds %struct.gp, %struct.gp* %560, i64 0
  %gp_av = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr1178, i32 0, i32 6
  %561 = load %struct.av*, %struct.av** %gp_av, align 8
  %tobool1179 = icmp ne %struct.av* %561, null
  br i1 %tobool1179, label %cond.true1180, label %cond.false1185

cond.true1180:                                    ; preds = %if.then1176
  %562 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u1181 = getelementptr inbounds %struct.gv, %struct.gv* %562, i32 0, i32 3
  %svu_gp1182 = bitcast %union.anon.3* %sv_u1181 to %struct.gp**
  %563 = load %struct.gp*, %struct.gp** %svu_gp1182, align 8
  %add.ptr1183 = getelementptr inbounds %struct.gp, %struct.gp* %563, i64 0
  %gp_av1184 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr1183, i32 0, i32 6
  %564 = load %struct.av*, %struct.av** %gp_av1184, align 8
  br label %cond.end1191

cond.false1185:                                   ; preds = %if.then1176
  %565 = load %struct.gv*, %struct.gv** %gv, align 8
  %call1186 = call %struct.gv* @Perl_gv_add_by_type(%struct.gv* %565, i32 11)
  %sv_u1187 = getelementptr inbounds %struct.gv, %struct.gv* %call1186, i32 0, i32 3
  %svu_gp1188 = bitcast %union.anon.3* %sv_u1187 to %struct.gp**
  %566 = load %struct.gp*, %struct.gp** %svu_gp1188, align 8
  %add.ptr1189 = getelementptr inbounds %struct.gp, %struct.gp* %566, i64 0
  %gp_av1190 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr1189, i32 0, i32 6
  %567 = load %struct.av*, %struct.av** %gp_av1190, align 8
  br label %cond.end1191

cond.end1191:                                     ; preds = %cond.false1185, %cond.true1180
  %cond1192 = phi %struct.av* [ %564, %cond.true1180 ], [ %567, %cond.false1185 ]
  %568 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type1193 = getelementptr inbounds %struct.op, %struct.op* %568, i32 0, i32 4
  %bf.load1194 = load i16, i16* %op_type1193, align 8
  %bf.clear1195 = and i16 %bf.load1194, -512
  %bf.set1196 = or i16 %bf.clear1195, 136
  store i16 %bf.set1196, i16* %op_type1193, align 8
  br label %if.end1202

if.else1197:                                      ; preds = %if.end1154
  %569 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type1198 = getelementptr inbounds %struct.op, %struct.op* %569, i32 0, i32 4
  %bf.load1199 = load i16, i16* %op_type1198, align 8
  %bf.clear1200 = and i16 %bf.load1199, -512
  %bf.set1201 = or i16 %bf.clear1200, 137
  store i16 %bf.set1201, i16* %op_type1198, align 8
  br label %if.end1202

if.end1202:                                       ; preds = %if.else1197, %cond.end1191
  br label %if.end1203

if.end1203:                                       ; preds = %if.end1202, %land.lhs.true1136, %cond.end1132, %land.lhs.true1112, %land.lhs.true1104, %land.lhs.true1101, %land.lhs.true1094, %cond.end1091
  %570 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type1204 = getelementptr inbounds %struct.op, %struct.op* %570, i32 0, i32 4
  %bf.load1205 = load i16, i16* %op_type1204, align 8
  %bf.clear1206 = and i16 %bf.load1205, 511
  %bf.cast1207 = zext i16 %bf.clear1206 to i32
  %cmp1208 = icmp ne i32 %bf.cast1207, 7
  br i1 %cmp1208, label %if.then1210, label %if.end1211

if.then1210:                                      ; preds = %if.end1203
  br label %sw.epilog2365

if.end1211:                                       ; preds = %if.end1203
  br label %if.end1212

if.end1212:                                       ; preds = %if.end1211, %lor.lhs.false1071
  %571 = load %struct.op*, %struct.op** %oldop, align 8
  %tobool1213 = icmp ne %struct.op* %571, null
  br i1 %tobool1213, label %land.lhs.true1214, label %if.else1266

land.lhs.true1214:                                ; preds = %if.end1212
  %572 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_next1215 = getelementptr inbounds %struct.op, %struct.op* %572, i32 0, i32 0
  %573 = load %struct.op*, %struct.op** %op_next1215, align 8
  %op_type1216 = getelementptr inbounds %struct.op, %struct.op* %573, i32 0, i32 4
  %bf.load1217 = load i16, i16* %op_type1216, align 8
  %bf.clear1218 = and i16 %bf.load1217, 511
  %bf.cast1219 = zext i16 %bf.clear1218 to i32
  %cmp1220 = icmp eq i32 %bf.cast1219, 15
  br i1 %cmp1220, label %land.lhs.true1238, label %lor.lhs.false1222

lor.lhs.false1222:                                ; preds = %land.lhs.true1214
  %574 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_next1223 = getelementptr inbounds %struct.op, %struct.op* %574, i32 0, i32 0
  %575 = load %struct.op*, %struct.op** %op_next1223, align 8
  %op_type1224 = getelementptr inbounds %struct.op, %struct.op* %575, i32 0, i32 4
  %bf.load1225 = load i16, i16* %op_type1224, align 8
  %bf.clear1226 = and i16 %bf.load1225, 511
  %bf.cast1227 = zext i16 %bf.clear1226 to i32
  %cmp1228 = icmp eq i32 %bf.cast1227, 135
  br i1 %cmp1228, label %land.lhs.true1238, label %lor.lhs.false1230

lor.lhs.false1230:                                ; preds = %lor.lhs.false1222
  %576 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_next1231 = getelementptr inbounds %struct.op, %struct.op* %576, i32 0, i32 0
  %577 = load %struct.op*, %struct.op** %op_next1231, align 8
  %op_type1232 = getelementptr inbounds %struct.op, %struct.op* %577, i32 0, i32 4
  %bf.load1233 = load i16, i16* %op_type1232, align 8
  %bf.clear1234 = and i16 %bf.load1233, 511
  %bf.cast1235 = zext i16 %bf.clear1234 to i32
  %cmp1236 = icmp eq i32 %bf.cast1235, 149
  br i1 %cmp1236, label %land.lhs.true1238, label %if.else1266

land.lhs.true1238:                                ; preds = %lor.lhs.false1230, %lor.lhs.false1222, %land.lhs.true1214
  %578 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_next1239 = getelementptr inbounds %struct.op, %struct.op* %578, i32 0, i32 0
  %579 = load %struct.op*, %struct.op** %op_next1239, align 8
  %op_flags1240 = getelementptr inbounds %struct.op, %struct.op* %579, i32 0, i32 5
  %580 = load i8, i8* %op_flags1240, align 2
  %conv1241 = zext i8 %580 to i32
  %and1242 = and i32 %conv1241, 3
  %cmp1243 = icmp eq i32 %and1242, 1
  br i1 %cmp1243, label %land.lhs.true1245, label %if.else1266

land.lhs.true1245:                                ; preds = %land.lhs.true1238
  %581 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_next1246 = getelementptr inbounds %struct.op, %struct.op* %581, i32 0, i32 0
  %582 = load %struct.op*, %struct.op** %op_next1246, align 8
  %op_private1247 = getelementptr inbounds %struct.op, %struct.op* %582, i32 0, i32 6
  %583 = load i8, i8* %op_private1247, align 1
  %conv1248 = zext i8 %583 to i32
  %and1249 = and i32 %conv1248, 128
  %tobool1250 = icmp ne i32 %and1249, 0
  br i1 %tobool1250, label %if.else1266, label %if.then1251

if.then1251:                                      ; preds = %land.lhs.true1245
  %584 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_next1252 = getelementptr inbounds %struct.op, %struct.op* %584, i32 0, i32 0
  %585 = load %struct.op*, %struct.op** %op_next1252, align 8
  %op_next1253 = getelementptr inbounds %struct.op, %struct.op* %585, i32 0, i32 0
  %586 = load %struct.op*, %struct.op** %op_next1253, align 8
  %587 = load %struct.op*, %struct.op** %oldop, align 8
  %op_next1254 = getelementptr inbounds %struct.op, %struct.op* %587, i32 0, i32 0
  store %struct.op* %586, %struct.op** %op_next1254, align 8
  br label %redo_nextstate

redo_nextstate:                                   ; preds = %if.then1251, %if.then1052
  %588 = load %struct.op*, %struct.op** %oldop, align 8
  %op_type1255 = getelementptr inbounds %struct.op, %struct.op* %588, i32 0, i32 4
  %bf.load1256 = load i16, i16* %op_type1255, align 8
  %bf.clear1257 = and i16 %bf.load1256, 511
  %bf.cast1258 = zext i16 %bf.clear1257 to i32
  %cmp1259 = icmp eq i32 %bf.cast1258, 193
  br i1 %cmp1259, label %if.then1261, label %if.end1265

if.then1261:                                      ; preds = %redo_nextstate
  %589 = load %struct.op*, %struct.op** %oldop, align 8
  %op_opt1262 = getelementptr inbounds %struct.op, %struct.op* %589, i32 0, i32 4
  %bf.load1263 = load i16, i16* %op_opt1262, align 8
  %bf.clear1264 = and i16 %bf.load1263, -513
  store i16 %bf.clear1264, i16* %op_opt1262, align 8
  %590 = load %struct.op*, %struct.op** %oldop, align 8
  store %struct.op* %590, %struct.op** %o.addr, align 8
  %591 = load %struct.op*, %struct.op** %oldoldop, align 8
  store %struct.op* %591, %struct.op** %oldop, align 8
  store %struct.op* null, %struct.op** %oldoldop, align 8
  br label %redo

if.end1265:                                       ; preds = %redo_nextstate
  %592 = load %struct.op*, %struct.op** %oldop, align 8
  store %struct.op* %592, %struct.op** %o.addr, align 8
  br label %if.end1342

if.else1266:                                      ; preds = %land.lhs.true1245, %land.lhs.true1238, %lor.lhs.false1230, %if.end1212
  %593 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_next1267 = getelementptr inbounds %struct.op, %struct.op* %593, i32 0, i32 0
  %594 = load %struct.op*, %struct.op** %op_next1267, align 8
  %op_type1268 = getelementptr inbounds %struct.op, %struct.op* %594, i32 0, i32 4
  %bf.load1269 = load i16, i16* %op_type1268, align 8
  %bf.clear1270 = and i16 %bf.load1269, 511
  %bf.cast1271 = zext i16 %bf.clear1270 to i32
  %cmp1272 = icmp eq i32 %bf.cast1271, 15
  br i1 %cmp1272, label %if.then1274, label %if.else1301

if.then1274:                                      ; preds = %if.else1266
  %595 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_next1275 = getelementptr inbounds %struct.op, %struct.op* %595, i32 0, i32 0
  %596 = load %struct.op*, %struct.op** %op_next1275, align 8
  %op_private1276 = getelementptr inbounds %struct.op, %struct.op* %596, i32 0, i32 6
  %597 = load i8, i8* %op_private1276, align 1
  %conv1277 = zext i8 %597 to i32
  %and1278 = and i32 %conv1277, 48
  %tobool1279 = icmp ne i32 %and1278, 0
  br i1 %tobool1279, label %if.end1300, label %if.then1280

if.then1280:                                      ; preds = %if.then1274
  %598 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_next1281 = getelementptr inbounds %struct.op, %struct.op* %598, i32 0, i32 0
  %599 = load %struct.op*, %struct.op** %op_next1281, align 8
  call void @Perl_op_null(%struct.op* %599)
  %600 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_next1282 = getelementptr inbounds %struct.op, %struct.op* %600, i32 0, i32 0
  %601 = load %struct.op*, %struct.op** %op_next1282, align 8
  %op_private1283 = getelementptr inbounds %struct.op, %struct.op* %601, i32 0, i32 6
  %602 = load i8, i8* %op_private1283, align 1
  %conv1284 = zext i8 %602 to i32
  %and1285 = and i32 %conv1284, 192
  %603 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_private1286 = getelementptr inbounds %struct.op, %struct.op* %603, i32 0, i32 6
  %604 = load i8, i8* %op_private1286, align 1
  %conv1287 = zext i8 %604 to i32
  %or1288 = or i32 %conv1287, %and1285
  %conv1289 = trunc i32 %or1288 to i8
  store i8 %conv1289, i8* %op_private1286, align 1
  %605 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_next1290 = getelementptr inbounds %struct.op, %struct.op* %605, i32 0, i32 0
  %606 = load %struct.op*, %struct.op** %op_next1290, align 8
  %op_next1291 = getelementptr inbounds %struct.op, %struct.op* %606, i32 0, i32 0
  %607 = load %struct.op*, %struct.op** %op_next1291, align 8
  %608 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_next1292 = getelementptr inbounds %struct.op, %struct.op* %608, i32 0, i32 0
  store %struct.op* %607, %struct.op** %op_next1292, align 8
  br label %do.body1293

do.body1293:                                      ; preds = %if.then1280
  %609 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type1294 = getelementptr inbounds %struct.op, %struct.op* %609, i32 0, i32 4
  %bf.load1295 = load i16, i16* %op_type1294, align 8
  %bf.clear1296 = and i16 %bf.load1295, -512
  %bf.set1297 = or i16 %bf.clear1296, 6
  store i16 %bf.set1297, i16* %op_type1294, align 8
  %610 = load %struct.op* ()*, %struct.op* ()** getelementptr inbounds ([0 x %struct.op* ()*], [0 x %struct.op* ()*]* @PL_ppaddr, i64 0, i64 6), align 8
  %611 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_ppaddr1298 = getelementptr inbounds %struct.op, %struct.op* %611, i32 0, i32 2
  store %struct.op* ()* %610, %struct.op* ()** %op_ppaddr1298, align 8
  br label %do.end1299

do.end1299:                                       ; preds = %do.body1293
  br label %if.end1300

if.end1300:                                       ; preds = %do.end1299, %if.then1274
  br label %if.end1341

if.else1301:                                      ; preds = %if.else1266
  %612 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_next1302 = getelementptr inbounds %struct.op, %struct.op* %612, i32 0, i32 0
  %613 = load %struct.op*, %struct.op** %op_next1302, align 8
  %op_type1303 = getelementptr inbounds %struct.op, %struct.op* %613, i32 0, i32 4
  %bf.load1304 = load i16, i16* %op_type1303, align 8
  %bf.clear1305 = and i16 %bf.load1304, 511
  %bf.cast1306 = zext i16 %bf.clear1305 to i32
  %cmp1307 = icmp eq i32 %bf.cast1306, 26
  br i1 %cmp1307, label %land.lhs.true1309, label %if.end1340

land.lhs.true1309:                                ; preds = %if.else1301
  %614 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_next1310 = getelementptr inbounds %struct.op, %struct.op* %614, i32 0, i32 0
  %615 = load %struct.op*, %struct.op** %op_next1310, align 8
  %op_next1311 = getelementptr inbounds %struct.op, %struct.op* %615, i32 0, i32 0
  %616 = load %struct.op*, %struct.op** %op_next1311, align 8
  %op_type1312 = getelementptr inbounds %struct.op, %struct.op* %616, i32 0, i32 4
  %bf.load1313 = load i16, i16* %op_type1312, align 8
  %bf.clear1314 = and i16 %bf.load1313, 511
  %bf.cast1315 = zext i16 %bf.clear1314 to i32
  %cmp1316 = icmp eq i32 %bf.cast1315, 67
  br i1 %cmp1316, label %land.lhs.true1318, label %if.end1340

land.lhs.true1318:                                ; preds = %land.lhs.true1309
  %617 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_next1319 = getelementptr inbounds %struct.op, %struct.op* %617, i32 0, i32 0
  %618 = load %struct.op*, %struct.op** %op_next1319, align 8
  %op_next1320 = getelementptr inbounds %struct.op, %struct.op* %618, i32 0, i32 0
  %619 = load %struct.op*, %struct.op** %op_next1320, align 8
  %op_flags1321 = getelementptr inbounds %struct.op, %struct.op* %619, i32 0, i32 5
  %620 = load i8, i8* %op_flags1321, align 2
  %conv1322 = zext i8 %620 to i32
  %and1323 = and i32 %conv1322, 64
  %tobool1324 = icmp ne i32 %and1323, 0
  br i1 %tobool1324, label %if.then1325, label %if.end1340

if.then1325:                                      ; preds = %land.lhs.true1318
  br label %do.body1326

do.body1326:                                      ; preds = %if.then1325
  %621 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type1327 = getelementptr inbounds %struct.op, %struct.op* %621, i32 0, i32 4
  %bf.load1328 = load i16, i16* %op_type1327, align 8
  %bf.clear1329 = and i16 %bf.load1328, -512
  %bf.set1330 = or i16 %bf.clear1329, 27
  store i16 %bf.set1330, i16* %op_type1327, align 8
  %622 = load %struct.op* ()*, %struct.op* ()** getelementptr inbounds ([0 x %struct.op* ()*], [0 x %struct.op* ()*]* @PL_ppaddr, i64 0, i64 27), align 8
  %623 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_ppaddr1331 = getelementptr inbounds %struct.op, %struct.op* %623, i32 0, i32 2
  store %struct.op* ()* %622, %struct.op* ()** %op_ppaddr1331, align 8
  br label %do.end1332

do.end1332:                                       ; preds = %do.body1326
  %624 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_flags1333 = getelementptr inbounds %struct.op, %struct.op* %624, i32 0, i32 5
  %625 = load i8, i8* %op_flags1333, align 2
  %conv1334 = zext i8 %625 to i32
  %or1335 = or i32 %conv1334, 64
  %conv1336 = trunc i32 %or1335 to i8
  store i8 %conv1336, i8* %op_flags1333, align 2
  %626 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_next1337 = getelementptr inbounds %struct.op, %struct.op* %626, i32 0, i32 0
  %627 = load %struct.op*, %struct.op** %op_next1337, align 8
  %op_next1338 = getelementptr inbounds %struct.op, %struct.op* %627, i32 0, i32 0
  %628 = load %struct.op*, %struct.op** %op_next1338, align 8
  call void @Perl_op_null(%struct.op* %628)
  %629 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_next1339 = getelementptr inbounds %struct.op, %struct.op* %629, i32 0, i32 0
  %630 = load %struct.op*, %struct.op** %op_next1339, align 8
  call void @Perl_op_null(%struct.op* %630)
  br label %if.end1340

if.end1340:                                       ; preds = %do.end1332, %land.lhs.true1318, %land.lhs.true1309, %if.else1301
  br label %if.end1341

if.end1341:                                       ; preds = %if.end1340, %if.end1300
  br label %if.end1342

if.end1342:                                       ; preds = %if.end1341, %if.end1265
  br label %sw.epilog2365

sw.bb1343:                                        ; preds = %sw.epilog
  %631 = load %struct.op*, %struct.op** @PL_op, align 8
  %632 = bitcast %struct.op* %631 to %struct.unop*
  %op_first1344 = getelementptr inbounds %struct.unop, %struct.unop* %632, i32 0, i32 7
  %633 = load %struct.op*, %struct.op** %op_first1344, align 8
  %op_type1345 = getelementptr inbounds %struct.op, %struct.op* %633, i32 0, i32 4
  %bf.load1346 = load i16, i16* %op_type1345, align 8
  %bf.clear1347 = and i16 %bf.load1346, 511
  %bf.cast1348 = zext i16 %bf.clear1347 to i32
  %cmp1349 = icmp eq i32 %bf.cast1348, 11
  br i1 %cmp1349, label %cond.true1359, label %lor.lhs.false1351

lor.lhs.false1351:                                ; preds = %sw.bb1343
  %634 = load %struct.op*, %struct.op** @PL_op, align 8
  %635 = bitcast %struct.op* %634 to %struct.unop*
  %op_first1352 = getelementptr inbounds %struct.unop, %struct.unop* %635, i32 0, i32 7
  %636 = load %struct.op*, %struct.op** %op_first1352, align 8
  %op_type1353 = getelementptr inbounds %struct.op, %struct.op* %636, i32 0, i32 4
  %bf.load1354 = load i16, i16* %op_type1353, align 8
  %bf.clear1355 = and i16 %bf.load1354, 511
  %bf.cast1356 = zext i16 %bf.clear1355 to i32
  %cmp1357 = icmp eq i32 %bf.cast1356, 149
  br i1 %cmp1357, label %cond.true1359, label %cond.false1361

cond.true1359:                                    ; preds = %lor.lhs.false1351, %sw.bb1343
  %637 = load %struct.op*, %struct.op** @PL_op, align 8
  %638 = bitcast %struct.op* %637 to %struct.unop*
  %op_first1360 = getelementptr inbounds %struct.unop, %struct.unop* %638, i32 0, i32 7
  %639 = load %struct.op*, %struct.op** %op_first1360, align 8
  br label %cond.end1399

cond.false1361:                                   ; preds = %lor.lhs.false1351
  %640 = load %struct.op*, %struct.op** @PL_op, align 8
  %641 = bitcast %struct.op* %640 to %struct.unop*
  %op_first1362 = getelementptr inbounds %struct.unop, %struct.unop* %641, i32 0, i32 7
  %642 = load %struct.op*, %struct.op** %op_first1362, align 8
  %op_type1363 = getelementptr inbounds %struct.op, %struct.op* %642, i32 0, i32 4
  %bf.load1364 = load i16, i16* %op_type1363, align 8
  %bf.clear1365 = and i16 %bf.load1364, 511
  %bf.cast1366 = zext i16 %bf.clear1365 to i32
  %cmp1367 = icmp eq i32 %bf.cast1366, 2
  br i1 %cmp1367, label %land.lhs.true1369, label %cond.false1396

land.lhs.true1369:                                ; preds = %cond.false1361
  %643 = load %struct.op*, %struct.op** @PL_op, align 8
  %644 = bitcast %struct.op* %643 to %struct.unop*
  %op_first1370 = getelementptr inbounds %struct.unop, %struct.unop* %644, i32 0, i32 7
  %645 = load %struct.op*, %struct.op** %op_first1370, align 8
  %op_flags1371 = getelementptr inbounds %struct.op, %struct.op* %645, i32 0, i32 5
  %646 = load i8, i8* %op_flags1371, align 2
  %conv1372 = zext i8 %646 to i32
  %and1373 = and i32 %conv1372, 4
  %tobool1374 = icmp ne i32 %and1373, 0
  br i1 %tobool1374, label %land.lhs.true1375, label %cond.false1396

land.lhs.true1375:                                ; preds = %land.lhs.true1369
  %647 = load %struct.op*, %struct.op** @PL_op, align 8
  %648 = bitcast %struct.op* %647 to %struct.unop*
  %op_first1376 = getelementptr inbounds %struct.unop, %struct.unop* %648, i32 0, i32 7
  %649 = load %struct.op*, %struct.op** %op_first1376, align 8
  %650 = bitcast %struct.op* %649 to %struct.unop*
  %op_first1377 = getelementptr inbounds %struct.unop, %struct.unop* %650, i32 0, i32 7
  %651 = load %struct.op*, %struct.op** %op_first1377, align 8
  %op_type1378 = getelementptr inbounds %struct.op, %struct.op* %651, i32 0, i32 4
  %bf.load1379 = load i16, i16* %op_type1378, align 8
  %bf.clear1380 = and i16 %bf.load1379, 511
  %bf.cast1381 = zext i16 %bf.clear1380 to i32
  %cmp1382 = icmp eq i32 %bf.cast1381, 11
  br i1 %cmp1382, label %cond.true1393, label %lor.lhs.false1384

lor.lhs.false1384:                                ; preds = %land.lhs.true1375
  %652 = load %struct.op*, %struct.op** @PL_op, align 8
  %653 = bitcast %struct.op* %652 to %struct.unop*
  %op_first1385 = getelementptr inbounds %struct.unop, %struct.unop* %653, i32 0, i32 7
  %654 = load %struct.op*, %struct.op** %op_first1385, align 8
  %655 = bitcast %struct.op* %654 to %struct.unop*
  %op_first1386 = getelementptr inbounds %struct.unop, %struct.unop* %655, i32 0, i32 7
  %656 = load %struct.op*, %struct.op** %op_first1386, align 8
  %op_type1387 = getelementptr inbounds %struct.op, %struct.op* %656, i32 0, i32 4
  %bf.load1388 = load i16, i16* %op_type1387, align 8
  %bf.clear1389 = and i16 %bf.load1388, 511
  %bf.cast1390 = zext i16 %bf.clear1389 to i32
  %cmp1391 = icmp eq i32 %bf.cast1390, 149
  br i1 %cmp1391, label %cond.true1393, label %cond.false1396

cond.true1393:                                    ; preds = %lor.lhs.false1384, %land.lhs.true1375
  %657 = load %struct.op*, %struct.op** @PL_op, align 8
  %658 = bitcast %struct.op* %657 to %struct.unop*
  %op_first1394 = getelementptr inbounds %struct.unop, %struct.unop* %658, i32 0, i32 7
  %659 = load %struct.op*, %struct.op** %op_first1394, align 8
  %660 = bitcast %struct.op* %659 to %struct.unop*
  %op_first1395 = getelementptr inbounds %struct.unop, %struct.unop* %660, i32 0, i32 7
  %661 = load %struct.op*, %struct.op** %op_first1395, align 8
  br label %cond.end1397

cond.false1396:                                   ; preds = %lor.lhs.false1384, %land.lhs.true1369, %cond.false1361
  br label %cond.end1397

cond.end1397:                                     ; preds = %cond.false1396, %cond.true1393
  %cond1398 = phi %struct.op* [ %661, %cond.true1393 ], [ null, %cond.false1396 ]
  br label %cond.end1399

cond.end1399:                                     ; preds = %cond.end1397, %cond.true1359
  %cond1400 = phi %struct.op* [ %639, %cond.true1359 ], [ %cond1398, %cond.end1397 ]
  store %struct.op* %cond1400, %struct.op** %fop, align 8
  %tobool1401 = icmp ne %struct.op* %cond1400, null
  br i1 %tobool1401, label %if.then1402, label %if.end1407

if.then1402:                                      ; preds = %cond.end1399
  %662 = load %struct.op*, %struct.op** %fop, align 8
  %op_private1403 = getelementptr inbounds %struct.op, %struct.op* %662, i32 0, i32 6
  %663 = load i8, i8* %op_private1403, align 1
  %conv1404 = zext i8 %663 to i32
  %or1405 = or i32 %conv1404, 32
  %conv1406 = trunc i32 %or1405 to i8
  store i8 %conv1406, i8* %op_private1403, align 1
  br label %if.end1407

if.end1407:                                       ; preds = %if.then1402, %cond.end1399
  br label %sw.epilog2365

sw.bb1408:                                        ; preds = %sw.epilog, %sw.epilog, %sw.epilog
  %664 = load %struct.op*, %struct.op** @PL_op, align 8
  %665 = bitcast %struct.op* %664 to %struct.logop*
  %op_first1409 = getelementptr inbounds %struct.logop, %struct.logop* %665, i32 0, i32 7
  %666 = load %struct.op*, %struct.op** %op_first1409, align 8
  store %struct.op* %666, %struct.op** %fop, align 8
  %667 = load %struct.op*, %struct.op** %fop, align 8
  %op_sibling1410 = getelementptr inbounds %struct.op, %struct.op* %667, i32 0, i32 1
  %668 = load %struct.op*, %struct.op** %op_sibling1410, align 8
  %add.ptr1411 = getelementptr inbounds %struct.op, %struct.op* %668, i64 0
  store %struct.op* %add.ptr1411, %struct.op** %sop, align 8
  br label %while.cond1412

while.cond1412:                                   ; preds = %while.body1419, %sw.bb1408
  %669 = load %struct.op*, %struct.op** @PL_op, align 8
  %670 = bitcast %struct.op* %669 to %struct.logop*
  %op_other = getelementptr inbounds %struct.logop, %struct.logop* %670, i32 0, i32 8
  %671 = load %struct.op*, %struct.op** %op_other, align 8
  %op_type1413 = getelementptr inbounds %struct.op, %struct.op* %671, i32 0, i32 4
  %bf.load1414 = load i16, i16* %op_type1413, align 8
  %bf.clear1415 = and i16 %bf.load1414, 511
  %bf.cast1416 = zext i16 %bf.clear1415 to i32
  %cmp1417 = icmp eq i32 %bf.cast1416, 0
  br i1 %cmp1417, label %while.body1419, label %while.end1423

while.body1419:                                   ; preds = %while.cond1412
  %672 = load %struct.op*, %struct.op** @PL_op, align 8
  %673 = bitcast %struct.op* %672 to %struct.logop*
  %op_other1420 = getelementptr inbounds %struct.logop, %struct.logop* %673, i32 0, i32 8
  %674 = load %struct.op*, %struct.op** %op_other1420, align 8
  %op_next1421 = getelementptr inbounds %struct.op, %struct.op* %674, i32 0, i32 0
  %675 = load %struct.op*, %struct.op** %op_next1421, align 8
  %676 = load %struct.op*, %struct.op** @PL_op, align 8
  %677 = bitcast %struct.op* %676 to %struct.logop*
  %op_other1422 = getelementptr inbounds %struct.logop, %struct.logop* %677, i32 0, i32 8
  store %struct.op* %675, %struct.op** %op_other1422, align 8
  br label %while.cond1412

while.end1423:                                    ; preds = %while.cond1412
  br label %while.cond1424

while.cond1424:                                   ; preds = %while.body1447, %while.end1423
  %678 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_next1425 = getelementptr inbounds %struct.op, %struct.op* %678, i32 0, i32 0
  %679 = load %struct.op*, %struct.op** %op_next1425, align 8
  %tobool1426 = icmp ne %struct.op* %679, null
  br i1 %tobool1426, label %land.rhs1427, label %land.end1446

land.rhs1427:                                     ; preds = %while.cond1424
  %680 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type1428 = getelementptr inbounds %struct.op, %struct.op* %680, i32 0, i32 4
  %bf.load1429 = load i16, i16* %op_type1428, align 8
  %bf.clear1430 = and i16 %bf.load1429, 511
  %bf.cast1431 = zext i16 %bf.clear1430 to i32
  %681 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_next1432 = getelementptr inbounds %struct.op, %struct.op* %681, i32 0, i32 0
  %682 = load %struct.op*, %struct.op** %op_next1432, align 8
  %op_type1433 = getelementptr inbounds %struct.op, %struct.op* %682, i32 0, i32 4
  %bf.load1434 = load i16, i16* %op_type1433, align 8
  %bf.clear1435 = and i16 %bf.load1434, 511
  %bf.cast1436 = zext i16 %bf.clear1435 to i32
  %cmp1437 = icmp eq i32 %bf.cast1431, %bf.cast1436
  br i1 %cmp1437, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %land.rhs1427
  %683 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_next1439 = getelementptr inbounds %struct.op, %struct.op* %683, i32 0, i32 0
  %684 = load %struct.op*, %struct.op** %op_next1439, align 8
  %op_type1440 = getelementptr inbounds %struct.op, %struct.op* %684, i32 0, i32 4
  %bf.load1441 = load i16, i16* %op_type1440, align 8
  %bf.clear1442 = and i16 %bf.load1441, 511
  %bf.cast1443 = zext i16 %bf.clear1442 to i32
  %cmp1444 = icmp eq i32 %bf.cast1443, 0
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %land.rhs1427
  %685 = phi i1 [ true, %land.rhs1427 ], [ %cmp1444, %lor.rhs ]
  br label %land.end1446

land.end1446:                                     ; preds = %lor.end, %while.cond1424
  %686 = phi i1 [ false, %while.cond1424 ], [ %685, %lor.end ]
  br i1 %686, label %while.body1447, label %while.end1451

while.body1447:                                   ; preds = %land.end1446
  %687 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_next1448 = getelementptr inbounds %struct.op, %struct.op* %687, i32 0, i32 0
  %688 = load %struct.op*, %struct.op** %op_next1448, align 8
  %op_next1449 = getelementptr inbounds %struct.op, %struct.op* %688, i32 0, i32 0
  %689 = load %struct.op*, %struct.op** %op_next1449, align 8
  %690 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_next1450 = getelementptr inbounds %struct.op, %struct.op* %690, i32 0, i32 0
  store %struct.op* %689, %struct.op** %op_next1450, align 8
  br label %while.cond1424

while.end1451:                                    ; preds = %land.end1446
  %691 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_next1452 = getelementptr inbounds %struct.op, %struct.op* %691, i32 0, i32 0
  %692 = load %struct.op*, %struct.op** %op_next1452, align 8
  %tobool1453 = icmp ne %struct.op* %692, null
  br i1 %tobool1453, label %land.lhs.true1454, label %if.end1495

land.lhs.true1454:                                ; preds = %while.end1451
  %693 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type1455 = getelementptr inbounds %struct.op, %struct.op* %693, i32 0, i32 4
  %bf.load1456 = load i16, i16* %op_type1455, align 8
  %bf.clear1457 = and i16 %bf.load1456, 511
  %bf.cast1458 = zext i16 %bf.clear1457 to i32
  %cmp1459 = icmp eq i32 %bf.cast1458, 176
  br i1 %cmp1459, label %land.lhs.true1461, label %lor.lhs.false1469

land.lhs.true1461:                                ; preds = %land.lhs.true1454
  %694 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_next1462 = getelementptr inbounds %struct.op, %struct.op* %694, i32 0, i32 0
  %695 = load %struct.op*, %struct.op** %op_next1462, align 8
  %op_type1463 = getelementptr inbounds %struct.op, %struct.op* %695, i32 0, i32 4
  %bf.load1464 = load i16, i16* %op_type1463, align 8
  %bf.clear1465 = and i16 %bf.load1464, 511
  %bf.cast1466 = zext i16 %bf.clear1465 to i32
  %cmp1467 = icmp eq i32 %bf.cast1466, 177
  br i1 %cmp1467, label %land.lhs.true1484, label %lor.lhs.false1469

lor.lhs.false1469:                                ; preds = %land.lhs.true1461, %land.lhs.true1454
  %696 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type1470 = getelementptr inbounds %struct.op, %struct.op* %696, i32 0, i32 4
  %bf.load1471 = load i16, i16* %op_type1470, align 8
  %bf.clear1472 = and i16 %bf.load1471, 511
  %bf.cast1473 = zext i16 %bf.clear1472 to i32
  %cmp1474 = icmp eq i32 %bf.cast1473, 177
  br i1 %cmp1474, label %land.lhs.true1476, label %if.end1495

land.lhs.true1476:                                ; preds = %lor.lhs.false1469
  %697 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_next1477 = getelementptr inbounds %struct.op, %struct.op* %697, i32 0, i32 0
  %698 = load %struct.op*, %struct.op** %op_next1477, align 8
  %op_type1478 = getelementptr inbounds %struct.op, %struct.op* %698, i32 0, i32 4
  %bf.load1479 = load i16, i16* %op_type1478, align 8
  %bf.clear1480 = and i16 %bf.load1479, 511
  %bf.cast1481 = zext i16 %bf.clear1480 to i32
  %cmp1482 = icmp eq i32 %bf.cast1481, 176
  br i1 %cmp1482, label %land.lhs.true1484, label %if.end1495

land.lhs.true1484:                                ; preds = %land.lhs.true1476, %land.lhs.true1461
  %699 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_next1485 = getelementptr inbounds %struct.op, %struct.op* %699, i32 0, i32 0
  %700 = load %struct.op*, %struct.op** %op_next1485, align 8
  %op_flags1486 = getelementptr inbounds %struct.op, %struct.op* %700, i32 0, i32 5
  %701 = load i8, i8* %op_flags1486, align 2
  %conv1487 = zext i8 %701 to i32
  %and1488 = and i32 %conv1487, 3
  %cmp1489 = icmp eq i32 %and1488, 1
  br i1 %cmp1489, label %if.then1491, label %if.end1495

if.then1491:                                      ; preds = %land.lhs.true1484
  %702 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_next1492 = getelementptr inbounds %struct.op, %struct.op* %702, i32 0, i32 0
  %703 = load %struct.op*, %struct.op** %op_next1492, align 8
  %704 = bitcast %struct.op* %703 to %struct.logop*
  %op_other1493 = getelementptr inbounds %struct.logop, %struct.logop* %704, i32 0, i32 8
  %705 = load %struct.op*, %struct.op** %op_other1493, align 8
  %706 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_next1494 = getelementptr inbounds %struct.op, %struct.op* %706, i32 0, i32 0
  store %struct.op* %705, %struct.op** %op_next1494, align 8
  br label %if.end1495

if.end1495:                                       ; preds = %if.then1491, %land.lhs.true1484, %land.lhs.true1476, %lor.lhs.false1469, %while.end1451
  br label %do.body1496

do.body1496:                                      ; preds = %if.end1495
  %707 = load i32, i32* %defer_ix, align 4
  %cmp1497 = icmp eq i32 %707, 3
  br i1 %cmp1497, label %if.then1499, label %if.end1506

if.then1499:                                      ; preds = %do.body1496
  %708 = load i32, i32* %defer_base, align 4
  %idxprom1501 = sext i32 %708 to i64
  %arrayidx1502 = getelementptr inbounds [4 x %struct.op**], [4 x %struct.op**]* %defer_queue, i64 0, i64 %idxprom1501
  %709 = load %struct.op**, %struct.op*** %arrayidx1502, align 8
  store %struct.op** %709, %struct.op*** %defer1500, align 8
  %710 = load void (%struct.op*)*, void (%struct.op*)** @PL_rpeepp, align 8
  %711 = load %struct.op**, %struct.op*** %defer1500, align 8
  %712 = load %struct.op*, %struct.op** %711, align 8
  call void %710(%struct.op* %712)
  %713 = load %struct.op**, %struct.op*** %defer1500, align 8
  call void @S_prune_chain_head(%struct.op** %713)
  %714 = load i32, i32* %defer_base, align 4
  %add1503 = add nsw i32 %714, 1
  %rem1504 = srem i32 %add1503, 4
  store i32 %rem1504, i32* %defer_base, align 4
  %715 = load i32, i32* %defer_ix, align 4
  %dec1505 = add nsw i32 %715, -1
  store i32 %dec1505, i32* %defer_ix, align 4
  br label %if.end1506

if.end1506:                                       ; preds = %if.then1499, %do.body1496
  %716 = load %struct.op*, %struct.op** @PL_op, align 8
  %717 = bitcast %struct.op* %716 to %struct.logop*
  %op_other1507 = getelementptr inbounds %struct.logop, %struct.logop* %717, i32 0, i32 8
  %718 = load i32, i32* %defer_base, align 4
  %719 = load i32, i32* %defer_ix, align 4
  %inc1508 = add nsw i32 %719, 1
  store i32 %inc1508, i32* %defer_ix, align 4
  %add1509 = add nsw i32 %718, %inc1508
  %rem1510 = srem i32 %add1509, 4
  %idxprom1511 = sext i32 %rem1510 to i64
  %arrayidx1512 = getelementptr inbounds [4 x %struct.op**], [4 x %struct.op**]* %defer_queue, i64 0, i64 %idxprom1511
  store %struct.op** %op_other1507, %struct.op*** %arrayidx1512, align 8
  br label %do.end1513

do.end1513:                                       ; preds = %if.end1506
  %720 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_opt1514 = getelementptr inbounds %struct.op, %struct.op* %720, i32 0, i32 4
  %bf.load1515 = load i16, i16* %op_opt1514, align 8
  %bf.clear1516 = and i16 %bf.load1515, -513
  %bf.set1517 = or i16 %bf.clear1516, 512
  store i16 %bf.set1517, i16* %op_opt1514, align 8
  %721 = load %struct.op*, %struct.op** %fop, align 8
  %op_type1518 = getelementptr inbounds %struct.op, %struct.op* %721, i32 0, i32 4
  %bf.load1519 = load i16, i16* %op_type1518, align 8
  %bf.clear1520 = and i16 %bf.load1519, 511
  %bf.cast1521 = zext i16 %bf.clear1520 to i32
  %cmp1522 = icmp eq i32 %bf.cast1521, 11
  br i1 %cmp1522, label %cond.true1531, label %lor.lhs.false1524

lor.lhs.false1524:                                ; preds = %do.end1513
  %722 = load %struct.op*, %struct.op** %fop, align 8
  %op_type1525 = getelementptr inbounds %struct.op, %struct.op* %722, i32 0, i32 4
  %bf.load1526 = load i16, i16* %op_type1525, align 8
  %bf.clear1527 = and i16 %bf.load1526, 511
  %bf.cast1528 = zext i16 %bf.clear1527 to i32
  %cmp1529 = icmp eq i32 %bf.cast1528, 149
  br i1 %cmp1529, label %cond.true1531, label %cond.false1532

cond.true1531:                                    ; preds = %lor.lhs.false1524, %do.end1513
  %723 = load %struct.op*, %struct.op** %fop, align 8
  br label %cond.end1565

cond.false1532:                                   ; preds = %lor.lhs.false1524
  %724 = load %struct.op*, %struct.op** %fop, align 8
  %op_type1533 = getelementptr inbounds %struct.op, %struct.op* %724, i32 0, i32 4
  %bf.load1534 = load i16, i16* %op_type1533, align 8
  %bf.clear1535 = and i16 %bf.load1534, 511
  %bf.cast1536 = zext i16 %bf.clear1535 to i32
  %cmp1537 = icmp eq i32 %bf.cast1536, 2
  br i1 %cmp1537, label %land.lhs.true1539, label %cond.false1562

land.lhs.true1539:                                ; preds = %cond.false1532
  %725 = load %struct.op*, %struct.op** %fop, align 8
  %op_flags1540 = getelementptr inbounds %struct.op, %struct.op* %725, i32 0, i32 5
  %726 = load i8, i8* %op_flags1540, align 2
  %conv1541 = zext i8 %726 to i32
  %and1542 = and i32 %conv1541, 4
  %tobool1543 = icmp ne i32 %and1542, 0
  br i1 %tobool1543, label %land.lhs.true1544, label %cond.false1562

land.lhs.true1544:                                ; preds = %land.lhs.true1539
  %727 = load %struct.op*, %struct.op** %fop, align 8
  %728 = bitcast %struct.op* %727 to %struct.unop*
  %op_first1545 = getelementptr inbounds %struct.unop, %struct.unop* %728, i32 0, i32 7
  %729 = load %struct.op*, %struct.op** %op_first1545, align 8
  %op_type1546 = getelementptr inbounds %struct.op, %struct.op* %729, i32 0, i32 4
  %bf.load1547 = load i16, i16* %op_type1546, align 8
  %bf.clear1548 = and i16 %bf.load1547, 511
  %bf.cast1549 = zext i16 %bf.clear1548 to i32
  %cmp1550 = icmp eq i32 %bf.cast1549, 11
  br i1 %cmp1550, label %cond.true1560, label %lor.lhs.false1552

lor.lhs.false1552:                                ; preds = %land.lhs.true1544
  %730 = load %struct.op*, %struct.op** %fop, align 8
  %731 = bitcast %struct.op* %730 to %struct.unop*
  %op_first1553 = getelementptr inbounds %struct.unop, %struct.unop* %731, i32 0, i32 7
  %732 = load %struct.op*, %struct.op** %op_first1553, align 8
  %op_type1554 = getelementptr inbounds %struct.op, %struct.op* %732, i32 0, i32 4
  %bf.load1555 = load i16, i16* %op_type1554, align 8
  %bf.clear1556 = and i16 %bf.load1555, 511
  %bf.cast1557 = zext i16 %bf.clear1556 to i32
  %cmp1558 = icmp eq i32 %bf.cast1557, 149
  br i1 %cmp1558, label %cond.true1560, label %cond.false1562

cond.true1560:                                    ; preds = %lor.lhs.false1552, %land.lhs.true1544
  %733 = load %struct.op*, %struct.op** %fop, align 8
  %734 = bitcast %struct.op* %733 to %struct.unop*
  %op_first1561 = getelementptr inbounds %struct.unop, %struct.unop* %734, i32 0, i32 7
  %735 = load %struct.op*, %struct.op** %op_first1561, align 8
  br label %cond.end1563

cond.false1562:                                   ; preds = %lor.lhs.false1552, %land.lhs.true1539, %cond.false1532
  br label %cond.end1563

cond.end1563:                                     ; preds = %cond.false1562, %cond.true1560
  %cond1564 = phi %struct.op* [ %735, %cond.true1560 ], [ null, %cond.false1562 ]
  br label %cond.end1565

cond.end1565:                                     ; preds = %cond.end1563, %cond.true1531
  %cond1566 = phi %struct.op* [ %723, %cond.true1531 ], [ %cond1564, %cond.end1563 ]
  store %struct.op* %cond1566, %struct.op** %fop, align 8
  %736 = load %struct.op*, %struct.op** %sop, align 8
  %tobool1567 = icmp ne %struct.op* %736, null
  br i1 %tobool1567, label %if.then1568, label %if.end1618

if.then1568:                                      ; preds = %cond.end1565
  %737 = load %struct.op*, %struct.op** %sop, align 8
  %op_type1569 = getelementptr inbounds %struct.op, %struct.op* %737, i32 0, i32 4
  %bf.load1570 = load i16, i16* %op_type1569, align 8
  %bf.clear1571 = and i16 %bf.load1570, 511
  %bf.cast1572 = zext i16 %bf.clear1571 to i32
  %cmp1573 = icmp eq i32 %bf.cast1572, 11
  br i1 %cmp1573, label %cond.true1582, label %lor.lhs.false1575

lor.lhs.false1575:                                ; preds = %if.then1568
  %738 = load %struct.op*, %struct.op** %sop, align 8
  %op_type1576 = getelementptr inbounds %struct.op, %struct.op* %738, i32 0, i32 4
  %bf.load1577 = load i16, i16* %op_type1576, align 8
  %bf.clear1578 = and i16 %bf.load1577, 511
  %bf.cast1579 = zext i16 %bf.clear1578 to i32
  %cmp1580 = icmp eq i32 %bf.cast1579, 149
  br i1 %cmp1580, label %cond.true1582, label %cond.false1583

cond.true1582:                                    ; preds = %lor.lhs.false1575, %if.then1568
  %739 = load %struct.op*, %struct.op** %sop, align 8
  br label %cond.end1616

cond.false1583:                                   ; preds = %lor.lhs.false1575
  %740 = load %struct.op*, %struct.op** %sop, align 8
  %op_type1584 = getelementptr inbounds %struct.op, %struct.op* %740, i32 0, i32 4
  %bf.load1585 = load i16, i16* %op_type1584, align 8
  %bf.clear1586 = and i16 %bf.load1585, 511
  %bf.cast1587 = zext i16 %bf.clear1586 to i32
  %cmp1588 = icmp eq i32 %bf.cast1587, 2
  br i1 %cmp1588, label %land.lhs.true1590, label %cond.false1613

land.lhs.true1590:                                ; preds = %cond.false1583
  %741 = load %struct.op*, %struct.op** %sop, align 8
  %op_flags1591 = getelementptr inbounds %struct.op, %struct.op* %741, i32 0, i32 5
  %742 = load i8, i8* %op_flags1591, align 2
  %conv1592 = zext i8 %742 to i32
  %and1593 = and i32 %conv1592, 4
  %tobool1594 = icmp ne i32 %and1593, 0
  br i1 %tobool1594, label %land.lhs.true1595, label %cond.false1613

land.lhs.true1595:                                ; preds = %land.lhs.true1590
  %743 = load %struct.op*, %struct.op** %sop, align 8
  %744 = bitcast %struct.op* %743 to %struct.unop*
  %op_first1596 = getelementptr inbounds %struct.unop, %struct.unop* %744, i32 0, i32 7
  %745 = load %struct.op*, %struct.op** %op_first1596, align 8
  %op_type1597 = getelementptr inbounds %struct.op, %struct.op* %745, i32 0, i32 4
  %bf.load1598 = load i16, i16* %op_type1597, align 8
  %bf.clear1599 = and i16 %bf.load1598, 511
  %bf.cast1600 = zext i16 %bf.clear1599 to i32
  %cmp1601 = icmp eq i32 %bf.cast1600, 11
  br i1 %cmp1601, label %cond.true1611, label %lor.lhs.false1603

lor.lhs.false1603:                                ; preds = %land.lhs.true1595
  %746 = load %struct.op*, %struct.op** %sop, align 8
  %747 = bitcast %struct.op* %746 to %struct.unop*
  %op_first1604 = getelementptr inbounds %struct.unop, %struct.unop* %747, i32 0, i32 7
  %748 = load %struct.op*, %struct.op** %op_first1604, align 8
  %op_type1605 = getelementptr inbounds %struct.op, %struct.op* %748, i32 0, i32 4
  %bf.load1606 = load i16, i16* %op_type1605, align 8
  %bf.clear1607 = and i16 %bf.load1606, 511
  %bf.cast1608 = zext i16 %bf.clear1607 to i32
  %cmp1609 = icmp eq i32 %bf.cast1608, 149
  br i1 %cmp1609, label %cond.true1611, label %cond.false1613

cond.true1611:                                    ; preds = %lor.lhs.false1603, %land.lhs.true1595
  %749 = load %struct.op*, %struct.op** %sop, align 8
  %750 = bitcast %struct.op* %749 to %struct.unop*
  %op_first1612 = getelementptr inbounds %struct.unop, %struct.unop* %750, i32 0, i32 7
  %751 = load %struct.op*, %struct.op** %op_first1612, align 8
  br label %cond.end1614

cond.false1613:                                   ; preds = %lor.lhs.false1603, %land.lhs.true1590, %cond.false1583
  br label %cond.end1614

cond.end1614:                                     ; preds = %cond.false1613, %cond.true1611
  %cond1615 = phi %struct.op* [ %751, %cond.true1611 ], [ null, %cond.false1613 ]
  br label %cond.end1616

cond.end1616:                                     ; preds = %cond.end1614, %cond.true1582
  %cond1617 = phi %struct.op* [ %739, %cond.true1582 ], [ %cond1615, %cond.end1614 ]
  store %struct.op* %cond1617, %struct.op** %sop, align 8
  br label %if.end1618

if.end1618:                                       ; preds = %cond.end1616, %cond.end1565
  %752 = load %struct.op*, %struct.op** %fop, align 8
  %tobool1619 = icmp ne %struct.op* %752, null
  br i1 %tobool1619, label %if.then1622, label %lor.lhs.false1620

lor.lhs.false1620:                                ; preds = %if.end1618
  %753 = load %struct.op*, %struct.op** %sop, align 8
  %tobool1621 = icmp ne %struct.op* %753, null
  br i1 %tobool1621, label %if.then1622, label %if.end1694

if.then1622:                                      ; preds = %lor.lhs.false1620, %if.end1618
  %754 = load %struct.op*, %struct.op** %o.addr, align 8
  store %struct.op* %754, %struct.op** %nop, align 8
  %755 = load %struct.op*, %struct.op** %o.addr, align 8
  store %struct.op* %755, %struct.op** %lop, align 8
  %756 = load %struct.op*, %struct.op** %nop, align 8
  %op_flags1623 = getelementptr inbounds %struct.op, %struct.op* %756, i32 0, i32 5
  %757 = load i8, i8* %op_flags1623, align 2
  %conv1624 = zext i8 %757 to i32
  %and1625 = and i32 %conv1624, 3
  %cmp1626 = icmp eq i32 %and1625, 1
  br i1 %cmp1626, label %if.end1648, label %if.then1628

if.then1628:                                      ; preds = %if.then1622
  br label %while.cond1629

while.cond1629:                                   ; preds = %sw.epilog1646, %if.then1628
  %758 = load %struct.op*, %struct.op** %nop, align 8
  %tobool1630 = icmp ne %struct.op* %758, null
  br i1 %tobool1630, label %land.rhs1631, label %land.end1634

land.rhs1631:                                     ; preds = %while.cond1629
  %759 = load %struct.op*, %struct.op** %nop, align 8
  %op_next1632 = getelementptr inbounds %struct.op, %struct.op* %759, i32 0, i32 0
  %760 = load %struct.op*, %struct.op** %op_next1632, align 8
  %tobool1633 = icmp ne %struct.op* %760, null
  br label %land.end1634

land.end1634:                                     ; preds = %land.rhs1631, %while.cond1629
  %761 = phi i1 [ false, %while.cond1629 ], [ %tobool1633, %land.rhs1631 ]
  br i1 %761, label %while.body1635, label %while.end1647

while.body1635:                                   ; preds = %land.end1634
  %762 = load %struct.op*, %struct.op** %nop, align 8
  %op_next1636 = getelementptr inbounds %struct.op, %struct.op* %762, i32 0, i32 0
  %763 = load %struct.op*, %struct.op** %op_next1636, align 8
  %op_type1637 = getelementptr inbounds %struct.op, %struct.op* %763, i32 0, i32 4
  %bf.load1638 = load i16, i16* %op_type1637, align 8
  %bf.clear1639 = and i16 %bf.load1638, 511
  %bf.cast1640 = zext i16 %bf.clear1639 to i32
  switch i32 %bf.cast1640, label %sw.default1645 [
    i32 103, label %sw.bb1641
    i32 176, label %sw.bb1641
    i32 177, label %sw.bb1641
    i32 179, label %sw.bb1641
    i32 0, label %sw.bb1643
  ]

sw.bb1641:                                        ; preds = %while.body1635, %while.body1635, %while.body1635, %while.body1635
  %764 = load %struct.op*, %struct.op** %nop, align 8
  %op_next1642 = getelementptr inbounds %struct.op, %struct.op* %764, i32 0, i32 0
  %765 = load %struct.op*, %struct.op** %op_next1642, align 8
  store %struct.op* %765, %struct.op** %nop, align 8
  store %struct.op* %765, %struct.op** %lop, align 8
  br label %sw.epilog1646

sw.bb1643:                                        ; preds = %while.body1635
  %766 = load %struct.op*, %struct.op** %nop, align 8
  %op_next1644 = getelementptr inbounds %struct.op, %struct.op* %766, i32 0, i32 0
  %767 = load %struct.op*, %struct.op** %op_next1644, align 8
  store %struct.op* %767, %struct.op** %nop, align 8
  br label %sw.epilog1646

sw.default1645:                                   ; preds = %while.body1635
  store %struct.op* null, %struct.op** %nop, align 8
  br label %sw.epilog1646

sw.epilog1646:                                    ; preds = %sw.default1645, %sw.bb1643, %sw.bb1641
  br label %while.cond1629

while.end1647:                                    ; preds = %land.end1634
  br label %if.end1648

if.end1648:                                       ; preds = %while.end1647, %if.then1622
  %768 = load %struct.op*, %struct.op** %fop, align 8
  %tobool1649 = icmp ne %struct.op* %768, null
  br i1 %tobool1649, label %if.then1650, label %if.end1680

if.then1650:                                      ; preds = %if.end1648
  %769 = load %struct.op*, %struct.op** %lop, align 8
  %op_flags1651 = getelementptr inbounds %struct.op, %struct.op* %769, i32 0, i32 5
  %770 = load i8, i8* %op_flags1651, align 2
  %conv1652 = zext i8 %770 to i32
  %and1653 = and i32 %conv1652, 3
  %cmp1654 = icmp eq i32 %and1653, 1
  br i1 %cmp1654, label %if.then1663, label %lor.lhs.false1656

lor.lhs.false1656:                                ; preds = %if.then1650
  %771 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type1657 = getelementptr inbounds %struct.op, %struct.op* %771, i32 0, i32 4
  %bf.load1658 = load i16, i16* %op_type1657, align 8
  %bf.clear1659 = and i16 %bf.load1658, 511
  %bf.cast1660 = zext i16 %bf.clear1659 to i32
  %cmp1661 = icmp eq i32 %bf.cast1660, 176
  br i1 %cmp1661, label %if.then1663, label %if.else1668

if.then1663:                                      ; preds = %lor.lhs.false1656, %if.then1650
  %772 = load %struct.op*, %struct.op** %fop, align 8
  %op_private1664 = getelementptr inbounds %struct.op, %struct.op* %772, i32 0, i32 6
  %773 = load i8, i8* %op_private1664, align 1
  %conv1665 = zext i8 %773 to i32
  %or1666 = or i32 %conv1665, 32
  %conv1667 = trunc i32 %or1666 to i8
  store i8 %conv1667, i8* %op_private1664, align 1
  br label %if.end1679

if.else1668:                                      ; preds = %lor.lhs.false1656
  %774 = load %struct.op*, %struct.op** %lop, align 8
  %op_flags1669 = getelementptr inbounds %struct.op, %struct.op* %774, i32 0, i32 5
  %775 = load i8, i8* %op_flags1669, align 2
  %conv1670 = zext i8 %775 to i32
  %and1671 = and i32 %conv1670, 3
  %tobool1672 = icmp ne i32 %and1671, 0
  br i1 %tobool1672, label %if.end1678, label %if.then1673

if.then1673:                                      ; preds = %if.else1668
  %776 = load %struct.op*, %struct.op** %fop, align 8
  %op_private1674 = getelementptr inbounds %struct.op, %struct.op* %776, i32 0, i32 6
  %777 = load i8, i8* %op_private1674, align 1
  %conv1675 = zext i8 %777 to i32
  %or1676 = or i32 %conv1675, 16
  %conv1677 = trunc i32 %or1676 to i8
  store i8 %conv1677, i8* %op_private1674, align 1
  br label %if.end1678

if.end1678:                                       ; preds = %if.then1673, %if.else1668
  br label %if.end1679

if.end1679:                                       ; preds = %if.end1678, %if.then1663
  br label %if.end1680

if.end1680:                                       ; preds = %if.end1679, %if.end1648
  %778 = load %struct.op*, %struct.op** %lop, align 8
  %op_flags1681 = getelementptr inbounds %struct.op, %struct.op* %778, i32 0, i32 5
  %779 = load i8, i8* %op_flags1681, align 2
  %conv1682 = zext i8 %779 to i32
  %and1683 = and i32 %conv1682, 3
  %cmp1684 = icmp eq i32 %and1683, 1
  br i1 %cmp1684, label %land.lhs.true1686, label %if.end1693

land.lhs.true1686:                                ; preds = %if.end1680
  %780 = load %struct.op*, %struct.op** %sop, align 8
  %tobool1687 = icmp ne %struct.op* %780, null
  br i1 %tobool1687, label %if.then1688, label %if.end1693

if.then1688:                                      ; preds = %land.lhs.true1686
  %781 = load %struct.op*, %struct.op** %sop, align 8
  %op_private1689 = getelementptr inbounds %struct.op, %struct.op* %781, i32 0, i32 6
  %782 = load i8, i8* %op_private1689, align 1
  %conv1690 = zext i8 %782 to i32
  %or1691 = or i32 %conv1690, 32
  %conv1692 = trunc i32 %or1691 to i8
  store i8 %conv1692, i8* %op_private1689, align 1
  br label %if.end1693

if.end1693:                                       ; preds = %if.then1688, %land.lhs.true1686, %if.end1680
  br label %if.end1694

if.end1694:                                       ; preds = %if.end1693, %lor.lhs.false1620
  br label %sw.epilog2365

sw.bb1695:                                        ; preds = %sw.epilog
  %783 = load %struct.op*, %struct.op** @PL_op, align 8
  %784 = bitcast %struct.op* %783 to %struct.logop*
  %op_first1696 = getelementptr inbounds %struct.logop, %struct.logop* %784, i32 0, i32 7
  %785 = load %struct.op*, %struct.op** %op_first1696, align 8
  %op_type1697 = getelementptr inbounds %struct.op, %struct.op* %785, i32 0, i32 4
  %bf.load1698 = load i16, i16* %op_type1697, align 8
  %bf.clear1699 = and i16 %bf.load1698, 511
  %bf.cast1700 = zext i16 %bf.clear1699 to i32
  %cmp1701 = icmp eq i32 %bf.cast1700, 11
  br i1 %cmp1701, label %cond.true1711, label %lor.lhs.false1703

lor.lhs.false1703:                                ; preds = %sw.bb1695
  %786 = load %struct.op*, %struct.op** @PL_op, align 8
  %787 = bitcast %struct.op* %786 to %struct.logop*
  %op_first1704 = getelementptr inbounds %struct.logop, %struct.logop* %787, i32 0, i32 7
  %788 = load %struct.op*, %struct.op** %op_first1704, align 8
  %op_type1705 = getelementptr inbounds %struct.op, %struct.op* %788, i32 0, i32 4
  %bf.load1706 = load i16, i16* %op_type1705, align 8
  %bf.clear1707 = and i16 %bf.load1706, 511
  %bf.cast1708 = zext i16 %bf.clear1707 to i32
  %cmp1709 = icmp eq i32 %bf.cast1708, 149
  br i1 %cmp1709, label %cond.true1711, label %cond.false1713

cond.true1711:                                    ; preds = %lor.lhs.false1703, %sw.bb1695
  %789 = load %struct.op*, %struct.op** @PL_op, align 8
  %790 = bitcast %struct.op* %789 to %struct.logop*
  %op_first1712 = getelementptr inbounds %struct.logop, %struct.logop* %790, i32 0, i32 7
  %791 = load %struct.op*, %struct.op** %op_first1712, align 8
  br label %cond.end1751

cond.false1713:                                   ; preds = %lor.lhs.false1703
  %792 = load %struct.op*, %struct.op** @PL_op, align 8
  %793 = bitcast %struct.op* %792 to %struct.logop*
  %op_first1714 = getelementptr inbounds %struct.logop, %struct.logop* %793, i32 0, i32 7
  %794 = load %struct.op*, %struct.op** %op_first1714, align 8
  %op_type1715 = getelementptr inbounds %struct.op, %struct.op* %794, i32 0, i32 4
  %bf.load1716 = load i16, i16* %op_type1715, align 8
  %bf.clear1717 = and i16 %bf.load1716, 511
  %bf.cast1718 = zext i16 %bf.clear1717 to i32
  %cmp1719 = icmp eq i32 %bf.cast1718, 2
  br i1 %cmp1719, label %land.lhs.true1721, label %cond.false1748

land.lhs.true1721:                                ; preds = %cond.false1713
  %795 = load %struct.op*, %struct.op** @PL_op, align 8
  %796 = bitcast %struct.op* %795 to %struct.logop*
  %op_first1722 = getelementptr inbounds %struct.logop, %struct.logop* %796, i32 0, i32 7
  %797 = load %struct.op*, %struct.op** %op_first1722, align 8
  %op_flags1723 = getelementptr inbounds %struct.op, %struct.op* %797, i32 0, i32 5
  %798 = load i8, i8* %op_flags1723, align 2
  %conv1724 = zext i8 %798 to i32
  %and1725 = and i32 %conv1724, 4
  %tobool1726 = icmp ne i32 %and1725, 0
  br i1 %tobool1726, label %land.lhs.true1727, label %cond.false1748

land.lhs.true1727:                                ; preds = %land.lhs.true1721
  %799 = load %struct.op*, %struct.op** @PL_op, align 8
  %800 = bitcast %struct.op* %799 to %struct.logop*
  %op_first1728 = getelementptr inbounds %struct.logop, %struct.logop* %800, i32 0, i32 7
  %801 = load %struct.op*, %struct.op** %op_first1728, align 8
  %802 = bitcast %struct.op* %801 to %struct.unop*
  %op_first1729 = getelementptr inbounds %struct.unop, %struct.unop* %802, i32 0, i32 7
  %803 = load %struct.op*, %struct.op** %op_first1729, align 8
  %op_type1730 = getelementptr inbounds %struct.op, %struct.op* %803, i32 0, i32 4
  %bf.load1731 = load i16, i16* %op_type1730, align 8
  %bf.clear1732 = and i16 %bf.load1731, 511
  %bf.cast1733 = zext i16 %bf.clear1732 to i32
  %cmp1734 = icmp eq i32 %bf.cast1733, 11
  br i1 %cmp1734, label %cond.true1745, label %lor.lhs.false1736

lor.lhs.false1736:                                ; preds = %land.lhs.true1727
  %804 = load %struct.op*, %struct.op** @PL_op, align 8
  %805 = bitcast %struct.op* %804 to %struct.logop*
  %op_first1737 = getelementptr inbounds %struct.logop, %struct.logop* %805, i32 0, i32 7
  %806 = load %struct.op*, %struct.op** %op_first1737, align 8
  %807 = bitcast %struct.op* %806 to %struct.unop*
  %op_first1738 = getelementptr inbounds %struct.unop, %struct.unop* %807, i32 0, i32 7
  %808 = load %struct.op*, %struct.op** %op_first1738, align 8
  %op_type1739 = getelementptr inbounds %struct.op, %struct.op* %808, i32 0, i32 4
  %bf.load1740 = load i16, i16* %op_type1739, align 8
  %bf.clear1741 = and i16 %bf.load1740, 511
  %bf.cast1742 = zext i16 %bf.clear1741 to i32
  %cmp1743 = icmp eq i32 %bf.cast1742, 149
  br i1 %cmp1743, label %cond.true1745, label %cond.false1748

cond.true1745:                                    ; preds = %lor.lhs.false1736, %land.lhs.true1727
  %809 = load %struct.op*, %struct.op** @PL_op, align 8
  %810 = bitcast %struct.op* %809 to %struct.logop*
  %op_first1746 = getelementptr inbounds %struct.logop, %struct.logop* %810, i32 0, i32 7
  %811 = load %struct.op*, %struct.op** %op_first1746, align 8
  %812 = bitcast %struct.op* %811 to %struct.unop*
  %op_first1747 = getelementptr inbounds %struct.unop, %struct.unop* %812, i32 0, i32 7
  %813 = load %struct.op*, %struct.op** %op_first1747, align 8
  br label %cond.end1749

cond.false1748:                                   ; preds = %lor.lhs.false1736, %land.lhs.true1721, %cond.false1713
  br label %cond.end1749

cond.end1749:                                     ; preds = %cond.false1748, %cond.true1745
  %cond1750 = phi %struct.op* [ %813, %cond.true1745 ], [ null, %cond.false1748 ]
  br label %cond.end1751

cond.end1751:                                     ; preds = %cond.end1749, %cond.true1711
  %cond1752 = phi %struct.op* [ %791, %cond.true1711 ], [ %cond1750, %cond.end1749 ]
  store %struct.op* %cond1752, %struct.op** %fop, align 8
  %tobool1753 = icmp ne %struct.op* %cond1752, null
  br i1 %tobool1753, label %if.then1754, label %if.end1759

if.then1754:                                      ; preds = %cond.end1751
  %814 = load %struct.op*, %struct.op** %fop, align 8
  %op_private1755 = getelementptr inbounds %struct.op, %struct.op* %814, i32 0, i32 6
  %815 = load i8, i8* %op_private1755, align 1
  %conv1756 = zext i8 %815 to i32
  %or1757 = or i32 %conv1756, 32
  %conv1758 = trunc i32 %or1757 to i8
  store i8 %conv1758, i8* %op_private1755, align 1
  br label %if.end1759

if.end1759:                                       ; preds = %if.then1754, %cond.end1751
  br label %sw.bb1760

sw.bb1760:                                        ; preds = %sw.epilog, %sw.epilog, %sw.epilog, %sw.epilog, %sw.epilog, %sw.epilog, %sw.epilog, %if.end1759
  br label %while.cond1761

while.cond1761:                                   ; preds = %while.body1769, %sw.bb1760
  %816 = load %struct.op*, %struct.op** @PL_op, align 8
  %817 = bitcast %struct.op* %816 to %struct.logop*
  %op_other1762 = getelementptr inbounds %struct.logop, %struct.logop* %817, i32 0, i32 8
  %818 = load %struct.op*, %struct.op** %op_other1762, align 8
  %op_type1763 = getelementptr inbounds %struct.op, %struct.op* %818, i32 0, i32 4
  %bf.load1764 = load i16, i16* %op_type1763, align 8
  %bf.clear1765 = and i16 %bf.load1764, 511
  %bf.cast1766 = zext i16 %bf.clear1765 to i32
  %cmp1767 = icmp eq i32 %bf.cast1766, 0
  br i1 %cmp1767, label %while.body1769, label %while.end1773

while.body1769:                                   ; preds = %while.cond1761
  %819 = load %struct.op*, %struct.op** @PL_op, align 8
  %820 = bitcast %struct.op* %819 to %struct.logop*
  %op_other1770 = getelementptr inbounds %struct.logop, %struct.logop* %820, i32 0, i32 8
  %821 = load %struct.op*, %struct.op** %op_other1770, align 8
  %op_next1771 = getelementptr inbounds %struct.op, %struct.op* %821, i32 0, i32 0
  %822 = load %struct.op*, %struct.op** %op_next1771, align 8
  %823 = load %struct.op*, %struct.op** @PL_op, align 8
  %824 = bitcast %struct.op* %823 to %struct.logop*
  %op_other1772 = getelementptr inbounds %struct.logop, %struct.logop* %824, i32 0, i32 8
  store %struct.op* %822, %struct.op** %op_other1772, align 8
  br label %while.cond1761

while.end1773:                                    ; preds = %while.cond1761
  br label %do.body1774

do.body1774:                                      ; preds = %while.end1773
  %825 = load i32, i32* %defer_ix, align 4
  %cmp1775 = icmp eq i32 %825, 3
  br i1 %cmp1775, label %if.then1777, label %if.end1784

if.then1777:                                      ; preds = %do.body1774
  %826 = load i32, i32* %defer_base, align 4
  %idxprom1779 = sext i32 %826 to i64
  %arrayidx1780 = getelementptr inbounds [4 x %struct.op**], [4 x %struct.op**]* %defer_queue, i64 0, i64 %idxprom1779
  %827 = load %struct.op**, %struct.op*** %arrayidx1780, align 8
  store %struct.op** %827, %struct.op*** %defer1778, align 8
  %828 = load void (%struct.op*)*, void (%struct.op*)** @PL_rpeepp, align 8
  %829 = load %struct.op**, %struct.op*** %defer1778, align 8
  %830 = load %struct.op*, %struct.op** %829, align 8
  call void %828(%struct.op* %830)
  %831 = load %struct.op**, %struct.op*** %defer1778, align 8
  call void @S_prune_chain_head(%struct.op** %831)
  %832 = load i32, i32* %defer_base, align 4
  %add1781 = add nsw i32 %832, 1
  %rem1782 = srem i32 %add1781, 4
  store i32 %rem1782, i32* %defer_base, align 4
  %833 = load i32, i32* %defer_ix, align 4
  %dec1783 = add nsw i32 %833, -1
  store i32 %dec1783, i32* %defer_ix, align 4
  br label %if.end1784

if.end1784:                                       ; preds = %if.then1777, %do.body1774
  %834 = load %struct.op*, %struct.op** @PL_op, align 8
  %835 = bitcast %struct.op* %834 to %struct.logop*
  %op_other1785 = getelementptr inbounds %struct.logop, %struct.logop* %835, i32 0, i32 8
  %836 = load i32, i32* %defer_base, align 4
  %837 = load i32, i32* %defer_ix, align 4
  %inc1786 = add nsw i32 %837, 1
  store i32 %inc1786, i32* %defer_ix, align 4
  %add1787 = add nsw i32 %836, %inc1786
  %rem1788 = srem i32 %add1787, 4
  %idxprom1789 = sext i32 %rem1788 to i64
  %arrayidx1790 = getelementptr inbounds [4 x %struct.op**], [4 x %struct.op**]* %defer_queue, i64 0, i64 %idxprom1789
  store %struct.op** %op_other1785, %struct.op*** %arrayidx1790, align 8
  br label %do.end1791

do.end1791:                                       ; preds = %if.end1784
  br label %sw.epilog2365

sw.bb1792:                                        ; preds = %sw.epilog, %sw.epilog
  br label %while.cond1793

while.cond1793:                                   ; preds = %while.body1800, %sw.bb1792
  %838 = load %struct.op*, %struct.op** @PL_op, align 8
  %839 = bitcast %struct.op* %838 to %struct.loop*
  %op_redoop = getelementptr inbounds %struct.loop, %struct.loop* %839, i32 0, i32 9
  %840 = load %struct.op*, %struct.op** %op_redoop, align 8
  %op_type1794 = getelementptr inbounds %struct.op, %struct.op* %840, i32 0, i32 4
  %bf.load1795 = load i16, i16* %op_type1794, align 8
  %bf.clear1796 = and i16 %bf.load1795, 511
  %bf.cast1797 = zext i16 %bf.clear1796 to i32
  %cmp1798 = icmp eq i32 %bf.cast1797, 0
  br i1 %cmp1798, label %while.body1800, label %while.end1804

while.body1800:                                   ; preds = %while.cond1793
  %841 = load %struct.op*, %struct.op** @PL_op, align 8
  %842 = bitcast %struct.op* %841 to %struct.loop*
  %op_redoop1801 = getelementptr inbounds %struct.loop, %struct.loop* %842, i32 0, i32 9
  %843 = load %struct.op*, %struct.op** %op_redoop1801, align 8
  %op_next1802 = getelementptr inbounds %struct.op, %struct.op* %843, i32 0, i32 0
  %844 = load %struct.op*, %struct.op** %op_next1802, align 8
  %845 = load %struct.op*, %struct.op** @PL_op, align 8
  %846 = bitcast %struct.op* %845 to %struct.loop*
  %op_redoop1803 = getelementptr inbounds %struct.loop, %struct.loop* %846, i32 0, i32 9
  store %struct.op* %844, %struct.op** %op_redoop1803, align 8
  br label %while.cond1793

while.end1804:                                    ; preds = %while.cond1793
  br label %while.cond1805

while.cond1805:                                   ; preds = %while.body1812, %while.end1804
  %847 = load %struct.op*, %struct.op** @PL_op, align 8
  %848 = bitcast %struct.op* %847 to %struct.loop*
  %op_nextop = getelementptr inbounds %struct.loop, %struct.loop* %848, i32 0, i32 10
  %849 = load %struct.op*, %struct.op** %op_nextop, align 8
  %op_type1806 = getelementptr inbounds %struct.op, %struct.op* %849, i32 0, i32 4
  %bf.load1807 = load i16, i16* %op_type1806, align 8
  %bf.clear1808 = and i16 %bf.load1807, 511
  %bf.cast1809 = zext i16 %bf.clear1808 to i32
  %cmp1810 = icmp eq i32 %bf.cast1809, 0
  br i1 %cmp1810, label %while.body1812, label %while.end1816

while.body1812:                                   ; preds = %while.cond1805
  %850 = load %struct.op*, %struct.op** @PL_op, align 8
  %851 = bitcast %struct.op* %850 to %struct.loop*
  %op_nextop1813 = getelementptr inbounds %struct.loop, %struct.loop* %851, i32 0, i32 10
  %852 = load %struct.op*, %struct.op** %op_nextop1813, align 8
  %op_next1814 = getelementptr inbounds %struct.op, %struct.op* %852, i32 0, i32 0
  %853 = load %struct.op*, %struct.op** %op_next1814, align 8
  %854 = load %struct.op*, %struct.op** @PL_op, align 8
  %855 = bitcast %struct.op* %854 to %struct.loop*
  %op_nextop1815 = getelementptr inbounds %struct.loop, %struct.loop* %855, i32 0, i32 10
  store %struct.op* %853, %struct.op** %op_nextop1815, align 8
  br label %while.cond1805

while.end1816:                                    ; preds = %while.cond1805
  br label %while.cond1817

while.cond1817:                                   ; preds = %while.body1824, %while.end1816
  %856 = load %struct.op*, %struct.op** @PL_op, align 8
  %857 = bitcast %struct.op* %856 to %struct.loop*
  %op_lastop = getelementptr inbounds %struct.loop, %struct.loop* %857, i32 0, i32 11
  %858 = load %struct.op*, %struct.op** %op_lastop, align 8
  %op_type1818 = getelementptr inbounds %struct.op, %struct.op* %858, i32 0, i32 4
  %bf.load1819 = load i16, i16* %op_type1818, align 8
  %bf.clear1820 = and i16 %bf.load1819, 511
  %bf.cast1821 = zext i16 %bf.clear1820 to i32
  %cmp1822 = icmp eq i32 %bf.cast1821, 0
  br i1 %cmp1822, label %while.body1824, label %while.end1828

while.body1824:                                   ; preds = %while.cond1817
  %859 = load %struct.op*, %struct.op** @PL_op, align 8
  %860 = bitcast %struct.op* %859 to %struct.loop*
  %op_lastop1825 = getelementptr inbounds %struct.loop, %struct.loop* %860, i32 0, i32 11
  %861 = load %struct.op*, %struct.op** %op_lastop1825, align 8
  %op_next1826 = getelementptr inbounds %struct.op, %struct.op* %861, i32 0, i32 0
  %862 = load %struct.op*, %struct.op** %op_next1826, align 8
  %863 = load %struct.op*, %struct.op** @PL_op, align 8
  %864 = bitcast %struct.op* %863 to %struct.loop*
  %op_lastop1827 = getelementptr inbounds %struct.loop, %struct.loop* %864, i32 0, i32 11
  store %struct.op* %862, %struct.op** %op_lastop1827, align 8
  br label %while.cond1817

while.end1828:                                    ; preds = %while.cond1817
  br label %do.body1829

do.body1829:                                      ; preds = %while.end1828
  %865 = load i32, i32* %defer_ix, align 4
  %cmp1830 = icmp eq i32 %865, 3
  br i1 %cmp1830, label %if.then1832, label %if.end1839

if.then1832:                                      ; preds = %do.body1829
  %866 = load i32, i32* %defer_base, align 4
  %idxprom1834 = sext i32 %866 to i64
  %arrayidx1835 = getelementptr inbounds [4 x %struct.op**], [4 x %struct.op**]* %defer_queue, i64 0, i64 %idxprom1834
  %867 = load %struct.op**, %struct.op*** %arrayidx1835, align 8
  store %struct.op** %867, %struct.op*** %defer1833, align 8
  %868 = load void (%struct.op*)*, void (%struct.op*)** @PL_rpeepp, align 8
  %869 = load %struct.op**, %struct.op*** %defer1833, align 8
  %870 = load %struct.op*, %struct.op** %869, align 8
  call void %868(%struct.op* %870)
  %871 = load %struct.op**, %struct.op*** %defer1833, align 8
  call void @S_prune_chain_head(%struct.op** %871)
  %872 = load i32, i32* %defer_base, align 4
  %add1836 = add nsw i32 %872, 1
  %rem1837 = srem i32 %add1836, 4
  store i32 %rem1837, i32* %defer_base, align 4
  %873 = load i32, i32* %defer_ix, align 4
  %dec1838 = add nsw i32 %873, -1
  store i32 %dec1838, i32* %defer_ix, align 4
  br label %if.end1839

if.end1839:                                       ; preds = %if.then1832, %do.body1829
  %874 = load %struct.op*, %struct.op** @PL_op, align 8
  %875 = bitcast %struct.op* %874 to %struct.loop*
  %op_lastop1840 = getelementptr inbounds %struct.loop, %struct.loop* %875, i32 0, i32 11
  %876 = load i32, i32* %defer_base, align 4
  %877 = load i32, i32* %defer_ix, align 4
  %inc1841 = add nsw i32 %877, 1
  store i32 %inc1841, i32* %defer_ix, align 4
  %add1842 = add nsw i32 %876, %inc1841
  %rem1843 = srem i32 %add1842, 4
  %idxprom1844 = sext i32 %rem1843 to i64
  %arrayidx1845 = getelementptr inbounds [4 x %struct.op**], [4 x %struct.op**]* %defer_queue, i64 0, i64 %idxprom1844
  store %struct.op** %op_lastop1840, %struct.op*** %arrayidx1845, align 8
  br label %do.end1846

do.end1846:                                       ; preds = %if.end1839
  br label %sw.epilog2365

sw.bb1847:                                        ; preds = %sw.epilog
  br label %do.body1848

do.body1848:                                      ; preds = %sw.bb1847
  %878 = load i32, i32* %defer_ix, align 4
  %cmp1849 = icmp eq i32 %878, 3
  br i1 %cmp1849, label %if.then1851, label %if.end1858

if.then1851:                                      ; preds = %do.body1848
  %879 = load i32, i32* %defer_base, align 4
  %idxprom1853 = sext i32 %879 to i64
  %arrayidx1854 = getelementptr inbounds [4 x %struct.op**], [4 x %struct.op**]* %defer_queue, i64 0, i64 %idxprom1853
  %880 = load %struct.op**, %struct.op*** %arrayidx1854, align 8
  store %struct.op** %880, %struct.op*** %defer1852, align 8
  %881 = load void (%struct.op*)*, void (%struct.op*)** @PL_rpeepp, align 8
  %882 = load %struct.op**, %struct.op*** %defer1852, align 8
  %883 = load %struct.op*, %struct.op** %882, align 8
  call void %881(%struct.op* %883)
  %884 = load %struct.op**, %struct.op*** %defer1852, align 8
  call void @S_prune_chain_head(%struct.op** %884)
  %885 = load i32, i32* %defer_base, align 4
  %add1855 = add nsw i32 %885, 1
  %rem1856 = srem i32 %add1855, 4
  store i32 %rem1856, i32* %defer_base, align 4
  %886 = load i32, i32* %defer_ix, align 4
  %dec1857 = add nsw i32 %886, -1
  store i32 %dec1857, i32* %defer_ix, align 4
  br label %if.end1858

if.end1858:                                       ; preds = %if.then1851, %do.body1848
  %887 = load %struct.op*, %struct.op** %o.addr, align 8
  %888 = bitcast %struct.op* %887 to %struct.logop*
  %op_other1859 = getelementptr inbounds %struct.logop, %struct.logop* %888, i32 0, i32 8
  %889 = load i32, i32* %defer_base, align 4
  %890 = load i32, i32* %defer_ix, align 4
  %inc1860 = add nsw i32 %890, 1
  store i32 %inc1860, i32* %defer_ix, align 4
  %add1861 = add nsw i32 %889, %inc1860
  %rem1862 = srem i32 %add1861, 4
  %idxprom1863 = sext i32 %rem1862 to i64
  %arrayidx1864 = getelementptr inbounds [4 x %struct.op**], [4 x %struct.op**]* %defer_queue, i64 0, i64 %idxprom1863
  store %struct.op** %op_other1859, %struct.op*** %arrayidx1864, align 8
  br label %do.end1865

do.end1865:                                       ; preds = %if.end1858
  br label %sw.epilog2365

sw.bb1866:                                        ; preds = %sw.epilog
  br label %while.cond1867

while.cond1867:                                   ; preds = %while.body1879, %sw.bb1866
  %891 = load %struct.op*, %struct.op** @PL_op, align 8
  %892 = bitcast %struct.op* %891 to %struct.pmop*
  %op_pmstashstartu = getelementptr inbounds %struct.pmop, %struct.pmop* %892, i32 0, i32 12
  %op_pmreplstart = bitcast %union.anon.19* %op_pmstashstartu to %struct.op**
  %893 = load %struct.op*, %struct.op** %op_pmreplstart, align 8
  %tobool1868 = icmp ne %struct.op* %893, null
  br i1 %tobool1868, label %land.rhs1869, label %land.end1878

land.rhs1869:                                     ; preds = %while.cond1867
  %894 = load %struct.op*, %struct.op** @PL_op, align 8
  %895 = bitcast %struct.op* %894 to %struct.pmop*
  %op_pmstashstartu1870 = getelementptr inbounds %struct.pmop, %struct.pmop* %895, i32 0, i32 12
  %op_pmreplstart1871 = bitcast %union.anon.19* %op_pmstashstartu1870 to %struct.op**
  %896 = load %struct.op*, %struct.op** %op_pmreplstart1871, align 8
  %op_type1872 = getelementptr inbounds %struct.op, %struct.op* %896, i32 0, i32 4
  %bf.load1873 = load i16, i16* %op_type1872, align 8
  %bf.clear1874 = and i16 %bf.load1873, 511
  %bf.cast1875 = zext i16 %bf.clear1874 to i32
  %cmp1876 = icmp eq i32 %bf.cast1875, 0
  br label %land.end1878

land.end1878:                                     ; preds = %land.rhs1869, %while.cond1867
  %897 = phi i1 [ false, %while.cond1867 ], [ %cmp1876, %land.rhs1869 ]
  br i1 %897, label %while.body1879, label %while.end1885

while.body1879:                                   ; preds = %land.end1878
  %898 = load %struct.op*, %struct.op** @PL_op, align 8
  %899 = bitcast %struct.op* %898 to %struct.pmop*
  %op_pmstashstartu1880 = getelementptr inbounds %struct.pmop, %struct.pmop* %899, i32 0, i32 12
  %op_pmreplstart1881 = bitcast %union.anon.19* %op_pmstashstartu1880 to %struct.op**
  %900 = load %struct.op*, %struct.op** %op_pmreplstart1881, align 8
  %op_next1882 = getelementptr inbounds %struct.op, %struct.op* %900, i32 0, i32 0
  %901 = load %struct.op*, %struct.op** %op_next1882, align 8
  %902 = load %struct.op*, %struct.op** @PL_op, align 8
  %903 = bitcast %struct.op* %902 to %struct.pmop*
  %op_pmstashstartu1883 = getelementptr inbounds %struct.pmop, %struct.pmop* %903, i32 0, i32 12
  %op_pmreplstart1884 = bitcast %union.anon.19* %op_pmstashstartu1883 to %struct.op**
  store %struct.op* %901, %struct.op** %op_pmreplstart1884, align 8
  br label %while.cond1867

while.end1885:                                    ; preds = %land.end1878
  br label %do.body1886

do.body1886:                                      ; preds = %while.end1885
  %904 = load i32, i32* %defer_ix, align 4
  %cmp1887 = icmp eq i32 %904, 3
  br i1 %cmp1887, label %if.then1889, label %if.end1896

if.then1889:                                      ; preds = %do.body1886
  %905 = load i32, i32* %defer_base, align 4
  %idxprom1891 = sext i32 %905 to i64
  %arrayidx1892 = getelementptr inbounds [4 x %struct.op**], [4 x %struct.op**]* %defer_queue, i64 0, i64 %idxprom1891
  %906 = load %struct.op**, %struct.op*** %arrayidx1892, align 8
  store %struct.op** %906, %struct.op*** %defer1890, align 8
  %907 = load void (%struct.op*)*, void (%struct.op*)** @PL_rpeepp, align 8
  %908 = load %struct.op**, %struct.op*** %defer1890, align 8
  %909 = load %struct.op*, %struct.op** %908, align 8
  call void %907(%struct.op* %909)
  %910 = load %struct.op**, %struct.op*** %defer1890, align 8
  call void @S_prune_chain_head(%struct.op** %910)
  %911 = load i32, i32* %defer_base, align 4
  %add1893 = add nsw i32 %911, 1
  %rem1894 = srem i32 %add1893, 4
  store i32 %rem1894, i32* %defer_base, align 4
  %912 = load i32, i32* %defer_ix, align 4
  %dec1895 = add nsw i32 %912, -1
  store i32 %dec1895, i32* %defer_ix, align 4
  br label %if.end1896

if.end1896:                                       ; preds = %if.then1889, %do.body1886
  %913 = load %struct.op*, %struct.op** @PL_op, align 8
  %914 = bitcast %struct.op* %913 to %struct.pmop*
  %op_pmstashstartu1897 = getelementptr inbounds %struct.pmop, %struct.pmop* %914, i32 0, i32 12
  %op_pmreplstart1898 = bitcast %union.anon.19* %op_pmstashstartu1897 to %struct.op**
  %915 = load i32, i32* %defer_base, align 4
  %916 = load i32, i32* %defer_ix, align 4
  %inc1899 = add nsw i32 %916, 1
  store i32 %inc1899, i32* %defer_ix, align 4
  %add1900 = add nsw i32 %915, %inc1899
  %rem1901 = srem i32 %add1900, 4
  %idxprom1902 = sext i32 %rem1901 to i64
  %arrayidx1903 = getelementptr inbounds [4 x %struct.op**], [4 x %struct.op**]* %defer_queue, i64 0, i64 %idxprom1902
  store %struct.op** %op_pmreplstart1898, %struct.op*** %arrayidx1903, align 8
  br label %do.end1904

do.end1904:                                       ; preds = %if.end1896
  br label %sw.epilog2365

sw.bb1905:                                        ; preds = %sw.epilog
  %917 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_flags1906 = getelementptr inbounds %struct.op, %struct.op* %917, i32 0, i32 5
  %918 = load i8, i8* %op_flags1906, align 2
  %conv1907 = zext i8 %918 to i32
  %and1908 = and i32 %conv1907, 128
  %tobool1909 = icmp ne i32 %and1908, 0
  br i1 %tobool1909, label %if.then1910, label %if.end1937

if.then1910:                                      ; preds = %sw.bb1905
  %919 = load %struct.op*, %struct.op** @PL_op, align 8
  %920 = bitcast %struct.op* %919 to %struct.listop*
  %op_first1911 = getelementptr inbounds %struct.listop, %struct.listop* %920, i32 0, i32 7
  %921 = load %struct.op*, %struct.op** %op_first1911, align 8
  %op_sibling1912 = getelementptr inbounds %struct.op, %struct.op* %921, i32 0, i32 1
  %922 = load %struct.op*, %struct.op** %op_sibling1912, align 8
  %add.ptr1913 = getelementptr inbounds %struct.op, %struct.op* %922, i64 0
  store %struct.op* %add.ptr1913, %struct.op** %nullop, align 8
  %923 = load %struct.op*, %struct.op** %nullop, align 8
  %924 = bitcast %struct.op* %923 to %struct.unop*
  %op_first1915 = getelementptr inbounds %struct.unop, %struct.unop* %924, i32 0, i32 7
  %925 = load %struct.op*, %struct.op** %op_first1915, align 8
  store %struct.op* %925, %struct.op** %kid1914, align 8
  %926 = load %struct.op*, %struct.op** %kid1914, align 8
  %927 = bitcast %struct.op* %926 to %struct.listop*
  %op_first1916 = getelementptr inbounds %struct.listop, %struct.listop* %927, i32 0, i32 7
  %928 = load %struct.op*, %struct.op** %op_first1916, align 8
  store %struct.op* %928, %struct.op** %kid1914, align 8
  %929 = load %struct.op*, %struct.op** %kid1914, align 8
  %930 = bitcast %struct.op* %929 to %struct.listop*
  %op_next1917 = getelementptr inbounds %struct.listop, %struct.listop* %930, i32 0, i32 0
  %931 = load %struct.op*, %struct.op** %op_next1917, align 8
  %932 = load %struct.op*, %struct.op** %nullop, align 8
  %op_next1918 = getelementptr inbounds %struct.op, %struct.op* %932, i32 0, i32 0
  store %struct.op* %931, %struct.op** %op_next1918, align 8
  br label %do.body1919

do.body1919:                                      ; preds = %if.then1910
  %933 = load i32, i32* %defer_ix, align 4
  %cmp1920 = icmp eq i32 %933, 3
  br i1 %cmp1920, label %if.then1922, label %if.end1929

if.then1922:                                      ; preds = %do.body1919
  %934 = load i32, i32* %defer_base, align 4
  %idxprom1924 = sext i32 %934 to i64
  %arrayidx1925 = getelementptr inbounds [4 x %struct.op**], [4 x %struct.op**]* %defer_queue, i64 0, i64 %idxprom1924
  %935 = load %struct.op**, %struct.op*** %arrayidx1925, align 8
  store %struct.op** %935, %struct.op*** %defer1923, align 8
  %936 = load void (%struct.op*)*, void (%struct.op*)** @PL_rpeepp, align 8
  %937 = load %struct.op**, %struct.op*** %defer1923, align 8
  %938 = load %struct.op*, %struct.op** %937, align 8
  call void %936(%struct.op* %938)
  %939 = load %struct.op**, %struct.op*** %defer1923, align 8
  call void @S_prune_chain_head(%struct.op** %939)
  %940 = load i32, i32* %defer_base, align 4
  %add1926 = add nsw i32 %940, 1
  %rem1927 = srem i32 %add1926, 4
  store i32 %rem1927, i32* %defer_base, align 4
  %941 = load i32, i32* %defer_ix, align 4
  %dec1928 = add nsw i32 %941, -1
  store i32 %dec1928, i32* %defer_ix, align 4
  br label %if.end1929

if.end1929:                                       ; preds = %if.then1922, %do.body1919
  %942 = load %struct.op*, %struct.op** %nullop, align 8
  %op_next1930 = getelementptr inbounds %struct.op, %struct.op* %942, i32 0, i32 0
  %943 = load i32, i32* %defer_base, align 4
  %944 = load i32, i32* %defer_ix, align 4
  %inc1931 = add nsw i32 %944, 1
  store i32 %inc1931, i32* %defer_ix, align 4
  %add1932 = add nsw i32 %943, %inc1931
  %rem1933 = srem i32 %add1932, 4
  %idxprom1934 = sext i32 %rem1933 to i64
  %arrayidx1935 = getelementptr inbounds [4 x %struct.op**], [4 x %struct.op**]* %defer_queue, i64 0, i64 %idxprom1934
  store %struct.op** %op_next1930, %struct.op*** %arrayidx1935, align 8
  br label %do.end1936

do.end1936:                                       ; preds = %if.end1929
  br label %if.end1937

if.end1937:                                       ; preds = %do.end1936, %sw.bb1905
  %945 = load %struct.op*, %struct.op** %o.addr, align 8
  %946 = bitcast %struct.op* %945 to %struct.unop*
  %op_first1938 = getelementptr inbounds %struct.unop, %struct.unop* %946, i32 0, i32 7
  %947 = load %struct.op*, %struct.op** %op_first1938, align 8
  store %struct.op* %947, %struct.op** %oright, align 8
  %948 = load %struct.op*, %struct.op** %oright, align 8
  %tobool1939 = icmp ne %struct.op* %948, null
  br i1 %tobool1939, label %lor.lhs.false1940, label %if.then1947

lor.lhs.false1940:                                ; preds = %if.end1937
  %949 = load %struct.op*, %struct.op** %oright, align 8
  %op_type1941 = getelementptr inbounds %struct.op, %struct.op* %949, i32 0, i32 4
  %bf.load1942 = load i16, i16* %op_type1941, align 8
  %bf.clear1943 = and i16 %bf.load1942, 511
  %bf.cast1944 = zext i16 %bf.clear1943 to i32
  %cmp1945 = icmp ne i32 %bf.cast1944, 3
  br i1 %cmp1945, label %if.then1947, label %if.end1948

if.then1947:                                      ; preds = %lor.lhs.false1940, %if.end1937
  br label %sw.epilog2365

if.end1948:                                       ; preds = %lor.lhs.false1940
  %950 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_private1949 = getelementptr inbounds %struct.op, %struct.op* %950, i32 0, i32 6
  %951 = load i8, i8* %op_private1949, align 1
  %conv1950 = zext i8 %951 to i32
  %and1951 = and i32 %conv1950, 8
  %tobool1952 = icmp ne i32 %and1951, 0
  br i1 %tobool1952, label %if.then1953, label %if.end1954

if.then1953:                                      ; preds = %if.end1948
  br label %sw.epilog2365

if.end1954:                                       ; preds = %if.end1948
  %952 = load %struct.op*, %struct.op** %o.addr, align 8
  %953 = bitcast %struct.op* %952 to %struct.unop*
  %op_sibling1955 = getelementptr inbounds %struct.unop, %struct.unop* %953, i32 0, i32 1
  %954 = load %struct.op*, %struct.op** %op_sibling1955, align 8
  %tobool1956 = icmp ne %struct.op* %954, null
  br i1 %tobool1956, label %cond.true1957, label %cond.false1958

cond.true1957:                                    ; preds = %if.end1954
  br i1 true, label %if.end1997, label %if.then1959

cond.false1958:                                   ; preds = %if.end1954
  br i1 false, label %if.end1997, label %if.then1959

if.then1959:                                      ; preds = %cond.false1958, %cond.true1957
  %955 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_next1960 = getelementptr inbounds %struct.op, %struct.op* %955, i32 0, i32 0
  %956 = load %struct.op*, %struct.op** %op_next1960, align 8
  store %struct.op* %956, %struct.op** %reverse, align 8
  %957 = load %struct.op*, %struct.op** %reverse, align 8
  %op_type1961 = getelementptr inbounds %struct.op, %struct.op* %957, i32 0, i32 4
  %bf.load1962 = load i16, i16* %op_type1961, align 8
  %bf.clear1963 = and i16 %bf.load1962, 511
  %bf.cast1964 = zext i16 %bf.clear1963 to i32
  %cmp1965 = icmp eq i32 %bf.cast1964, 168
  br i1 %cmp1965, label %land.lhs.true1967, label %if.end1996

land.lhs.true1967:                                ; preds = %if.then1959
  %958 = load %struct.op*, %struct.op** %reverse, align 8
  %op_flags1968 = getelementptr inbounds %struct.op, %struct.op* %958, i32 0, i32 5
  %959 = load i8, i8* %op_flags1968, align 2
  %conv1969 = zext i8 %959 to i32
  %and1970 = and i32 %conv1969, 3
  %cmp1971 = icmp eq i32 %and1970, 3
  br i1 %cmp1971, label %if.then1973, label %if.end1996

if.then1973:                                      ; preds = %land.lhs.true1967
  %960 = load %struct.op*, %struct.op** %reverse, align 8
  %961 = bitcast %struct.op* %960 to %struct.unop*
  %op_first1974 = getelementptr inbounds %struct.unop, %struct.unop* %961, i32 0, i32 7
  %962 = load %struct.op*, %struct.op** %op_first1974, align 8
  store %struct.op* %962, %struct.op** %pushmark, align 8
  %963 = load %struct.op*, %struct.op** %pushmark, align 8
  %tobool1975 = icmp ne %struct.op* %963, null
  br i1 %tobool1975, label %land.lhs.true1976, label %if.end1995

land.lhs.true1976:                                ; preds = %if.then1973
  %964 = load %struct.op*, %struct.op** %pushmark, align 8
  %op_type1977 = getelementptr inbounds %struct.op, %struct.op* %964, i32 0, i32 4
  %bf.load1978 = load i16, i16* %op_type1977, align 8
  %bf.clear1979 = and i16 %bf.load1978, 511
  %bf.cast1980 = zext i16 %bf.clear1979 to i32
  %cmp1981 = icmp eq i32 %bf.cast1980, 3
  br i1 %cmp1981, label %land.lhs.true1983, label %if.end1995

land.lhs.true1983:                                ; preds = %land.lhs.true1976
  %965 = load %struct.op*, %struct.op** %pushmark, align 8
  %966 = bitcast %struct.op* %965 to %struct.unop*
  %op_sibling1984 = getelementptr inbounds %struct.unop, %struct.unop* %966, i32 0, i32 1
  %967 = load %struct.op*, %struct.op** %op_sibling1984, align 8
  %add.ptr1985 = getelementptr inbounds %struct.op, %struct.op* %967, i64 0
  %968 = load %struct.op*, %struct.op** %o.addr, align 8
  %cmp1986 = icmp eq %struct.op* %add.ptr1985, %968
  br i1 %cmp1986, label %if.then1988, label %if.end1995

if.then1988:                                      ; preds = %land.lhs.true1983
  %969 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_private1989 = getelementptr inbounds %struct.op, %struct.op* %969, i32 0, i32 6
  %970 = load i8, i8* %op_private1989, align 1
  %conv1990 = zext i8 %970 to i32
  %or1991 = or i32 %conv1990, 4
  %conv1992 = trunc i32 %or1991 to i8
  store i8 %conv1992, i8* %op_private1989, align 1
  %971 = load %struct.op*, %struct.op** %reverse, align 8
  call void @Perl_op_null(%struct.op* %971)
  %972 = load %struct.op*, %struct.op** %oright, align 8
  %op_next1993 = getelementptr inbounds %struct.op, %struct.op* %972, i32 0, i32 0
  %973 = load %struct.op*, %struct.op** %op_next1993, align 8
  %974 = load %struct.op*, %struct.op** %pushmark, align 8
  %op_next1994 = getelementptr inbounds %struct.op, %struct.op* %974, i32 0, i32 0
  store %struct.op* %973, %struct.op** %op_next1994, align 8
  %975 = load %struct.op*, %struct.op** %oright, align 8
  call void @Perl_op_null(%struct.op* %975)
  br label %if.end1995

if.end1995:                                       ; preds = %if.then1988, %land.lhs.true1983, %land.lhs.true1976, %if.then1973
  br label %if.end1996

if.end1996:                                       ; preds = %if.end1995, %land.lhs.true1967, %if.then1959
  br label %if.end1997

if.end1997:                                       ; preds = %if.end1996, %cond.false1958, %cond.true1957
  br label %sw.epilog2365

sw.bb1998:                                        ; preds = %sw.epilog
  store %struct.op* null, %struct.op** %gvop, align 8
  %976 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_private2000 = getelementptr inbounds %struct.op, %struct.op* %976, i32 0, i32 6
  %977 = load i8, i8* %op_private2000, align 1
  %conv2001 = zext i8 %977 to i32
  %and2002 = and i32 %conv2001, 8
  %tobool2003 = icmp ne i32 %and2002, 0
  br i1 %tobool2003, label %if.then2004, label %if.end2005

if.then2004:                                      ; preds = %sw.bb1998
  br label %sw.epilog2365

if.end2005:                                       ; preds = %sw.bb1998
  %978 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_next2006 = getelementptr inbounds %struct.op, %struct.op* %978, i32 0, i32 0
  %979 = load %struct.op*, %struct.op** %op_next2006, align 8
  %980 = bitcast %struct.op* %979 to %struct.listop*
  store %struct.listop* %980, %struct.listop** %enter, align 8
  %981 = load %struct.listop*, %struct.listop** %enter, align 8
  %tobool2007 = icmp ne %struct.listop* %981, null
  br i1 %tobool2007, label %if.end2009, label %if.then2008

if.then2008:                                      ; preds = %if.end2005
  br label %sw.epilog2365

if.end2009:                                       ; preds = %if.end2005
  %982 = load %struct.listop*, %struct.listop** %enter, align 8
  %op_type2010 = getelementptr inbounds %struct.listop, %struct.listop* %982, i32 0, i32 4
  %bf.load2011 = load i16, i16* %op_type2010, align 8
  %bf.clear2012 = and i16 %bf.load2011, 511
  %bf.cast2013 = zext i16 %bf.clear2012 to i32
  %cmp2014 = icmp eq i32 %bf.cast2013, 0
  br i1 %cmp2014, label %if.then2016, label %if.end2021

if.then2016:                                      ; preds = %if.end2009
  %983 = load %struct.listop*, %struct.listop** %enter, align 8
  %op_next2017 = getelementptr inbounds %struct.listop, %struct.listop* %983, i32 0, i32 0
  %984 = load %struct.op*, %struct.op** %op_next2017, align 8
  %985 = bitcast %struct.op* %984 to %struct.listop*
  store %struct.listop* %985, %struct.listop** %enter, align 8
  %986 = load %struct.listop*, %struct.listop** %enter, align 8
  %tobool2018 = icmp ne %struct.listop* %986, null
  br i1 %tobool2018, label %if.end2020, label %if.then2019

if.then2019:                                      ; preds = %if.then2016
  br label %sw.epilog2365

if.end2020:                                       ; preds = %if.then2016
  br label %if.end2021

if.end2021:                                       ; preds = %if.end2020, %if.end2009
  %987 = load %struct.listop*, %struct.listop** %enter, align 8
  %op_type2022 = getelementptr inbounds %struct.listop, %struct.listop* %987, i32 0, i32 4
  %bf.load2023 = load i16, i16* %op_type2022, align 8
  %bf.clear2024 = and i16 %bf.load2023, 511
  %bf.cast2025 = zext i16 %bf.clear2024 to i32
  %cmp2026 = icmp eq i32 %bf.cast2025, 7
  br i1 %cmp2026, label %if.then2028, label %if.end2045

if.then2028:                                      ; preds = %if.end2021
  %988 = load %struct.listop*, %struct.listop** %enter, align 8
  %989 = bitcast %struct.listop* %988 to %struct.op*
  store %struct.op* %989, %struct.op** %gvop, align 8
  %990 = load %struct.listop*, %struct.listop** %enter, align 8
  %op_next2029 = getelementptr inbounds %struct.listop, %struct.listop* %990, i32 0, i32 0
  %991 = load %struct.op*, %struct.op** %op_next2029, align 8
  %992 = bitcast %struct.op* %991 to %struct.listop*
  store %struct.listop* %992, %struct.listop** %enter, align 8
  %993 = load %struct.listop*, %struct.listop** %enter, align 8
  %tobool2030 = icmp ne %struct.listop* %993, null
  br i1 %tobool2030, label %if.end2032, label %if.then2031

if.then2031:                                      ; preds = %if.then2028
  br label %sw.epilog2365

if.end2032:                                       ; preds = %if.then2028
  %994 = load %struct.listop*, %struct.listop** %enter, align 8
  %op_type2033 = getelementptr inbounds %struct.listop, %struct.listop* %994, i32 0, i32 4
  %bf.load2034 = load i16, i16* %op_type2033, align 8
  %bf.clear2035 = and i16 %bf.load2034, 511
  %bf.cast2036 = zext i16 %bf.clear2035 to i32
  %cmp2037 = icmp eq i32 %bf.cast2036, 14
  br i1 %cmp2037, label %if.then2039, label %if.end2044

if.then2039:                                      ; preds = %if.end2032
  %995 = load %struct.listop*, %struct.listop** %enter, align 8
  %op_next2040 = getelementptr inbounds %struct.listop, %struct.listop* %995, i32 0, i32 0
  %996 = load %struct.op*, %struct.op** %op_next2040, align 8
  %997 = bitcast %struct.op* %996 to %struct.listop*
  store %struct.listop* %997, %struct.listop** %enter, align 8
  %998 = load %struct.listop*, %struct.listop** %enter, align 8
  %tobool2041 = icmp ne %struct.listop* %998, null
  br i1 %tobool2041, label %if.end2043, label %if.then2042

if.then2042:                                      ; preds = %if.then2039
  br label %sw.epilog2365

if.end2043:                                       ; preds = %if.then2039
  br label %if.end2044

if.end2044:                                       ; preds = %if.end2043, %if.end2032
  br label %if.end2045

if.end2045:                                       ; preds = %if.end2044, %if.end2021
  %999 = load %struct.listop*, %struct.listop** %enter, align 8
  %op_type2046 = getelementptr inbounds %struct.listop, %struct.listop* %999, i32 0, i32 4
  %bf.load2047 = load i16, i16* %op_type2046, align 8
  %bf.clear2048 = and i16 %bf.load2047, 511
  %bf.cast2049 = zext i16 %bf.clear2048 to i32
  %cmp2050 = icmp ne i32 %bf.cast2049, 199
  br i1 %cmp2050, label %if.then2052, label %if.end2053

if.then2052:                                      ; preds = %if.end2045
  br label %sw.epilog2365

if.end2053:                                       ; preds = %if.end2045
  %1000 = load %struct.listop*, %struct.listop** %enter, align 8
  %op_next2054 = getelementptr inbounds %struct.listop, %struct.listop* %1000, i32 0, i32 0
  %1001 = load %struct.op*, %struct.op** %op_next2054, align 8
  store %struct.op* %1001, %struct.op** %iter, align 8
  %1002 = load %struct.op*, %struct.op** %iter, align 8
  %tobool2055 = icmp ne %struct.op* %1002, null
  br i1 %tobool2055, label %lor.lhs.false2056, label %if.then2063

lor.lhs.false2056:                                ; preds = %if.end2053
  %1003 = load %struct.op*, %struct.op** %iter, align 8
  %op_type2057 = getelementptr inbounds %struct.op, %struct.op* %1003, i32 0, i32 4
  %bf.load2058 = load i16, i16* %op_type2057, align 8
  %bf.clear2059 = and i16 %bf.load2058, 511
  %bf.cast2060 = zext i16 %bf.clear2059 to i32
  %cmp2061 = icmp ne i32 %bf.cast2060, 200
  br i1 %cmp2061, label %if.then2063, label %if.end2064

if.then2063:                                      ; preds = %lor.lhs.false2056, %if.end2053
  br label %sw.epilog2365

if.end2064:                                       ; preds = %lor.lhs.false2056
  %1004 = load %struct.listop*, %struct.listop** %enter, align 8
  %op_first2065 = getelementptr inbounds %struct.listop, %struct.listop* %1004, i32 0, i32 7
  %1005 = load %struct.op*, %struct.op** %op_first2065, align 8
  store %struct.op* %1005, %struct.op** %expushmark, align 8
  %1006 = load %struct.op*, %struct.op** %expushmark, align 8
  %tobool2066 = icmp ne %struct.op* %1006, null
  br i1 %tobool2066, label %lor.lhs.false2067, label %if.then2078

lor.lhs.false2067:                                ; preds = %if.end2064
  %1007 = load %struct.op*, %struct.op** %expushmark, align 8
  %op_type2068 = getelementptr inbounds %struct.op, %struct.op* %1007, i32 0, i32 4
  %bf.load2069 = load i16, i16* %op_type2068, align 8
  %bf.clear2070 = and i16 %bf.load2069, 511
  %bf.cast2071 = zext i16 %bf.clear2070 to i32
  %cmp2072 = icmp ne i32 %bf.cast2071, 0
  br i1 %cmp2072, label %if.then2078, label %lor.lhs.false2074

lor.lhs.false2074:                                ; preds = %lor.lhs.false2067
  %1008 = load %struct.op*, %struct.op** %expushmark, align 8
  %op_targ2075 = getelementptr inbounds %struct.op, %struct.op* %1008, i32 0, i32 3
  %1009 = load i64, i64* %op_targ2075, align 8
  %cmp2076 = icmp ne i64 %1009, 3
  br i1 %cmp2076, label %if.then2078, label %if.end2079

if.then2078:                                      ; preds = %lor.lhs.false2074, %lor.lhs.false2067, %if.end2064
  br label %sw.epilog2365

if.end2079:                                       ; preds = %lor.lhs.false2074
  %1010 = load %struct.op*, %struct.op** %expushmark, align 8
  %op_sibling2080 = getelementptr inbounds %struct.op, %struct.op* %1010, i32 0, i32 1
  %1011 = load %struct.op*, %struct.op** %op_sibling2080, align 8
  %add.ptr2081 = getelementptr inbounds %struct.op, %struct.op* %1011, i64 0
  %1012 = bitcast %struct.op* %add.ptr2081 to %struct.listop*
  store %struct.listop* %1012, %struct.listop** %exlist, align 8
  %1013 = load %struct.listop*, %struct.listop** %exlist, align 8
  %tobool2082 = icmp ne %struct.listop* %1013, null
  br i1 %tobool2082, label %lor.lhs.false2083, label %if.then2094

lor.lhs.false2083:                                ; preds = %if.end2079
  %1014 = load %struct.listop*, %struct.listop** %exlist, align 8
  %op_type2084 = getelementptr inbounds %struct.listop, %struct.listop* %1014, i32 0, i32 4
  %bf.load2085 = load i16, i16* %op_type2084, align 8
  %bf.clear2086 = and i16 %bf.load2085, 511
  %bf.cast2087 = zext i16 %bf.clear2086 to i32
  %cmp2088 = icmp ne i32 %bf.cast2087, 0
  br i1 %cmp2088, label %if.then2094, label %lor.lhs.false2090

lor.lhs.false2090:                                ; preds = %lor.lhs.false2083
  %1015 = load %struct.listop*, %struct.listop** %exlist, align 8
  %op_targ2091 = getelementptr inbounds %struct.listop, %struct.listop* %1015, i32 0, i32 3
  %1016 = load i64, i64* %op_targ2091, align 8
  %cmp2092 = icmp ne i64 %1016, 158
  br i1 %cmp2092, label %if.then2094, label %if.end2095

if.then2094:                                      ; preds = %lor.lhs.false2090, %lor.lhs.false2083, %if.end2079
  br label %sw.epilog2365

if.end2095:                                       ; preds = %lor.lhs.false2090
  %1017 = load %struct.listop*, %struct.listop** %exlist, align 8
  %op_last2096 = getelementptr inbounds %struct.listop, %struct.listop* %1017, i32 0, i32 8
  %1018 = load %struct.op*, %struct.op** %op_last2096, align 8
  %1019 = load %struct.op*, %struct.op** %o.addr, align 8
  %cmp2097 = icmp ne %struct.op* %1018, %1019
  br i1 %cmp2097, label %if.then2099, label %if.end2100

if.then2099:                                      ; preds = %if.end2095
  br label %sw.epilog2365

if.end2100:                                       ; preds = %if.end2095
  %1020 = load %struct.listop*, %struct.listop** %exlist, align 8
  %op_first2101 = getelementptr inbounds %struct.listop, %struct.listop* %1020, i32 0, i32 7
  %1021 = load %struct.op*, %struct.op** %op_first2101, align 8
  store %struct.op* %1021, %struct.op** %theirmark, align 8
  %1022 = load %struct.op*, %struct.op** %theirmark, align 8
  %tobool2102 = icmp ne %struct.op* %1022, null
  br i1 %tobool2102, label %lor.lhs.false2103, label %if.then2110

lor.lhs.false2103:                                ; preds = %if.end2100
  %1023 = load %struct.op*, %struct.op** %theirmark, align 8
  %op_type2104 = getelementptr inbounds %struct.op, %struct.op* %1023, i32 0, i32 4
  %bf.load2105 = load i16, i16* %op_type2104, align 8
  %bf.clear2106 = and i16 %bf.load2105, 511
  %bf.cast2107 = zext i16 %bf.clear2106 to i32
  %cmp2108 = icmp ne i32 %bf.cast2107, 3
  br i1 %cmp2108, label %if.then2110, label %if.end2111

if.then2110:                                      ; preds = %lor.lhs.false2103, %if.end2100
  br label %sw.epilog2365

if.end2111:                                       ; preds = %lor.lhs.false2103
  %1024 = load %struct.op*, %struct.op** %theirmark, align 8
  %op_sibling2112 = getelementptr inbounds %struct.op, %struct.op* %1024, i32 0, i32 1
  %1025 = load %struct.op*, %struct.op** %op_sibling2112, align 8
  %add.ptr2113 = getelementptr inbounds %struct.op, %struct.op* %1025, i64 0
  %1026 = load %struct.op*, %struct.op** %o.addr, align 8
  %cmp2114 = icmp ne %struct.op* %add.ptr2113, %1026
  br i1 %cmp2114, label %if.then2116, label %if.end2117

if.then2116:                                      ; preds = %if.end2111
  br label %sw.epilog2365

if.end2117:                                       ; preds = %if.end2111
  %1027 = load %struct.op*, %struct.op** %o.addr, align 8
  %1028 = bitcast %struct.op* %1027 to %struct.listop*
  %op_first2118 = getelementptr inbounds %struct.listop, %struct.listop* %1028, i32 0, i32 7
  %1029 = load %struct.op*, %struct.op** %op_first2118, align 8
  store %struct.op* %1029, %struct.op** %ourmark, align 8
  %1030 = load %struct.op*, %struct.op** %ourmark, align 8
  %tobool2119 = icmp ne %struct.op* %1030, null
  br i1 %tobool2119, label %lor.lhs.false2120, label %if.then2127

lor.lhs.false2120:                                ; preds = %if.end2117
  %1031 = load %struct.op*, %struct.op** %ourmark, align 8
  %op_type2121 = getelementptr inbounds %struct.op, %struct.op* %1031, i32 0, i32 4
  %bf.load2122 = load i16, i16* %op_type2121, align 8
  %bf.clear2123 = and i16 %bf.load2122, 511
  %bf.cast2124 = zext i16 %bf.clear2123 to i32
  %cmp2125 = icmp ne i32 %bf.cast2124, 3
  br i1 %cmp2125, label %if.then2127, label %if.end2128

if.then2127:                                      ; preds = %lor.lhs.false2120, %if.end2117
  br label %sw.epilog2365

if.end2128:                                       ; preds = %lor.lhs.false2120
  %1032 = load %struct.op*, %struct.op** %o.addr, align 8
  %1033 = bitcast %struct.op* %1032 to %struct.listop*
  %op_last2129 = getelementptr inbounds %struct.listop, %struct.listop* %1033, i32 0, i32 8
  %1034 = load %struct.op*, %struct.op** %op_last2129, align 8
  store %struct.op* %1034, %struct.op** %ourlast, align 8
  %1035 = load %struct.op*, %struct.op** %ourlast, align 8
  %tobool2130 = icmp ne %struct.op* %1035, null
  br i1 %tobool2130, label %lor.lhs.false2131, label %if.then2135

lor.lhs.false2131:                                ; preds = %if.end2128
  %1036 = load %struct.op*, %struct.op** %ourlast, align 8
  %op_next2132 = getelementptr inbounds %struct.op, %struct.op* %1036, i32 0, i32 0
  %1037 = load %struct.op*, %struct.op** %op_next2132, align 8
  %1038 = load %struct.op*, %struct.op** %o.addr, align 8
  %cmp2133 = icmp ne %struct.op* %1037, %1038
  br i1 %cmp2133, label %if.then2135, label %if.end2136

if.then2135:                                      ; preds = %lor.lhs.false2131, %if.end2128
  br label %sw.epilog2365

if.end2136:                                       ; preds = %lor.lhs.false2131
  %1039 = load %struct.op*, %struct.op** %ourmark, align 8
  %op_sibling2137 = getelementptr inbounds %struct.op, %struct.op* %1039, i32 0, i32 1
  %1040 = load %struct.op*, %struct.op** %op_sibling2137, align 8
  %add.ptr2138 = getelementptr inbounds %struct.op, %struct.op* %1040, i64 0
  store %struct.op* %add.ptr2138, %struct.op** %rv2av1999, align 8
  %1041 = load %struct.op*, %struct.op** %rv2av1999, align 8
  %tobool2139 = icmp ne %struct.op* %1041, null
  br i1 %tobool2139, label %land.lhs.true2140, label %if.end2163

land.lhs.true2140:                                ; preds = %if.end2136
  %1042 = load %struct.op*, %struct.op** %rv2av1999, align 8
  %op_type2141 = getelementptr inbounds %struct.op, %struct.op* %1042, i32 0, i32 4
  %bf.load2142 = load i16, i16* %op_type2141, align 8
  %bf.clear2143 = and i16 %bf.load2142, 511
  %bf.cast2144 = zext i16 %bf.clear2143 to i32
  %cmp2145 = icmp eq i32 %bf.cast2144, 135
  br i1 %cmp2145, label %land.lhs.true2147, label %if.end2163

land.lhs.true2147:                                ; preds = %land.lhs.true2140
  %1043 = load %struct.op*, %struct.op** %rv2av1999, align 8
  %op_sibling2148 = getelementptr inbounds %struct.op, %struct.op* %1043, i32 0, i32 1
  %1044 = load %struct.op*, %struct.op** %op_sibling2148, align 8
  %tobool2149 = icmp ne %struct.op* %1044, null
  br i1 %tobool2149, label %cond.true2150, label %cond.false2151

cond.true2150:                                    ; preds = %land.lhs.true2147
  br i1 true, label %if.end2163, label %land.lhs.true2152

cond.false2151:                                   ; preds = %land.lhs.true2147
  br i1 false, label %if.end2163, label %land.lhs.true2152

land.lhs.true2152:                                ; preds = %cond.false2151, %cond.true2150
  %1045 = load %struct.op*, %struct.op** %rv2av1999, align 8
  %op_flags2153 = getelementptr inbounds %struct.op, %struct.op* %1045, i32 0, i32 5
  %1046 = load i8, i8* %op_flags2153, align 2
  %conv2154 = zext i8 %1046 to i32
  %cmp2155 = icmp eq i32 %conv2154, 7
  br i1 %cmp2155, label %if.then2157, label %if.end2163

if.then2157:                                      ; preds = %land.lhs.true2152
  %1047 = load %struct.op*, %struct.op** %rv2av1999, align 8
  %op_flags2158 = getelementptr inbounds %struct.op, %struct.op* %1047, i32 0, i32 5
  store i8 22, i8* %op_flags2158, align 2
  %1048 = load %struct.listop*, %struct.listop** %enter, align 8
  %op_flags2159 = getelementptr inbounds %struct.listop, %struct.listop* %1048, i32 0, i32 5
  %1049 = load i8, i8* %op_flags2159, align 2
  %conv2160 = zext i8 %1049 to i32
  %or2161 = or i32 %conv2160, 64
  %conv2162 = trunc i32 %or2161 to i8
  store i8 %conv2162, i8* %op_flags2159, align 2
  br label %if.end2163

if.end2163:                                       ; preds = %if.then2157, %land.lhs.true2152, %cond.false2151, %cond.true2150, %land.lhs.true2140, %if.end2136
  %1050 = load %struct.op*, %struct.op** %ourmark, align 8
  %op_next2164 = getelementptr inbounds %struct.op, %struct.op* %1050, i32 0, i32 0
  %1051 = load %struct.op*, %struct.op** %op_next2164, align 8
  %1052 = load %struct.op*, %struct.op** %theirmark, align 8
  %op_next2165 = getelementptr inbounds %struct.op, %struct.op* %1052, i32 0, i32 0
  store %struct.op* %1051, %struct.op** %op_next2165, align 8
  %1053 = load %struct.op*, %struct.op** %ourmark, align 8
  %op_flags2166 = getelementptr inbounds %struct.op, %struct.op* %1053, i32 0, i32 5
  %1054 = load i8, i8* %op_flags2166, align 2
  %1055 = load %struct.op*, %struct.op** %theirmark, align 8
  %op_flags2167 = getelementptr inbounds %struct.op, %struct.op* %1055, i32 0, i32 5
  store i8 %1054, i8* %op_flags2167, align 2
  %1056 = load %struct.op*, %struct.op** %gvop, align 8
  %tobool2168 = icmp ne %struct.op* %1056, null
  br i1 %tobool2168, label %cond.true2169, label %cond.false2170

cond.true2169:                                    ; preds = %if.end2163
  %1057 = load %struct.op*, %struct.op** %gvop, align 8
  br label %cond.end2171

cond.false2170:                                   ; preds = %if.end2163
  %1058 = load %struct.listop*, %struct.listop** %enter, align 8
  %1059 = bitcast %struct.listop* %1058 to %struct.op*
  br label %cond.end2171

cond.end2171:                                     ; preds = %cond.false2170, %cond.true2169
  %cond2172 = phi %struct.op* [ %1057, %cond.true2169 ], [ %1059, %cond.false2170 ]
  %1060 = load %struct.op*, %struct.op** %ourlast, align 8
  %op_next2173 = getelementptr inbounds %struct.op, %struct.op* %1060, i32 0, i32 0
  store %struct.op* %cond2172, %struct.op** %op_next2173, align 8
  %1061 = load %struct.op*, %struct.op** %ourmark, align 8
  call void @Perl_op_null(%struct.op* %1061)
  %1062 = load %struct.op*, %struct.op** %o.addr, align 8
  call void @Perl_op_null(%struct.op* %1062)
  %1063 = load %struct.listop*, %struct.listop** %enter, align 8
  %op_private2174 = getelementptr inbounds %struct.listop, %struct.listop* %1063, i32 0, i32 6
  %1064 = load i8, i8* %op_private2174, align 1
  %conv2175 = zext i8 %1064 to i32
  %or2176 = or i32 %conv2175, 4
  %conv2177 = trunc i32 %or2176 to i8
  store i8 %conv2177, i8* %op_private2174, align 1
  %1065 = load %struct.op*, %struct.op** %iter, align 8
  %op_private2178 = getelementptr inbounds %struct.op, %struct.op* %1065, i32 0, i32 6
  %1066 = load i8, i8* %op_private2178, align 1
  %conv2179 = zext i8 %1066 to i32
  %or2180 = or i32 %conv2179, 4
  %conv2181 = trunc i32 %or2180 to i8
  store i8 %conv2181, i8* %op_private2178, align 1
  br label %sw.epilog2365

sw.bb2182:                                        ; preds = %sw.epilog, %sw.epilog
  %1067 = load %struct.op*, %struct.op** @PL_op, align 8
  %1068 = bitcast %struct.op* %1067 to %struct.pmop*
  %op_pmflags = getelementptr inbounds %struct.pmop, %struct.pmop* %1068, i32 0, i32 10
  %1069 = load i32, i32* %op_pmflags, align 8
  %and2183 = and i32 %1069, 1048576
  %tobool2184 = icmp ne i32 %and2183, 0
  br i1 %tobool2184, label %if.end2186, label %if.then2185

if.then2185:                                      ; preds = %sw.bb2182
  br label %if.end2186

if.end2186:                                       ; preds = %if.then2185, %sw.bb2182
  br label %sw.epilog2365

sw.bb2187:                                        ; preds = %sw.epilog
  %1070 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_private2188 = getelementptr inbounds %struct.op, %struct.op* %1070, i32 0, i32 6
  %1071 = load i8, i8* %op_private2188, align 1
  %conv2189 = zext i8 %1071 to i32
  %and2190 = and i32 %conv2189, 128
  %tobool2191 = icmp ne i32 %and2190, 0
  br i1 %tobool2191, label %if.end2233, label %land.lhs.true2192

land.lhs.true2192:                                ; preds = %sw.bb2187
  %1072 = load %struct.cv*, %struct.cv** @PL_compcv, align 8
  %sv_any2193 = getelementptr inbounds %struct.cv, %struct.cv* %1072, i32 0, i32 0
  %1073 = load %struct.xpvcv*, %struct.xpvcv** %sv_any2193, align 8
  %1074 = bitcast %struct.xpvcv* %1073 to i8*
  %1075 = bitcast i8* %1074 to %struct.xpvcv*
  %xcv_flags = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %1075, i32 0, i32 12
  %1076 = load i32, i32* %xcv_flags, align 4
  %and2194 = and i32 %1076, 32
  %tobool2195 = icmp ne i32 %and2194, 0
  br i1 %tobool2195, label %if.end2233, label %land.lhs.true2196

land.lhs.true2196:                                ; preds = %land.lhs.true2192
  %1077 = load %struct.cv*, %struct.cv** @PL_compcv, align 8
  %sv_any2197 = getelementptr inbounds %struct.cv, %struct.cv* %1077, i32 0, i32 0
  %1078 = load %struct.xpvcv*, %struct.xpvcv** %sv_any2197, align 8
  %1079 = bitcast %struct.xpvcv* %1078 to i8*
  %1080 = bitcast i8* %1079 to %struct.xpvcv*
  %xcv_flags2198 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %1080, i32 0, i32 12
  %1081 = load i32, i32* %xcv_flags2198, align 4
  %and2199 = and i32 %1081, 128
  %tobool2200 = icmp ne i32 %and2199, 0
  br i1 %tobool2200, label %lor.lhs.false2201, label %if.then2205

lor.lhs.false2201:                                ; preds = %land.lhs.true2196
  %1082 = load i8, i8* @PL_cv_has_eval, align 1
  %tobool2202 = trunc i8 %1082 to i1
  br i1 %tobool2202, label %if.end2233, label %land.lhs.true2203

land.lhs.true2203:                                ; preds = %lor.lhs.false2201
  %1083 = load i32, i32* @PL_perldb, align 4
  %tobool2204 = icmp ne i32 %1083, 0
  br i1 %tobool2204, label %if.end2233, label %if.then2205

if.then2205:                                      ; preds = %land.lhs.true2203, %land.lhs.true2196
  %1084 = load %struct.cv*, %struct.cv** @PL_compcv, align 8
  %sv_any2206 = getelementptr inbounds %struct.cv, %struct.cv* %1084, i32 0, i32 0
  %1085 = load %struct.xpvcv*, %struct.xpvcv** %sv_any2206, align 8
  %1086 = bitcast %struct.xpvcv* %1085 to i8*
  %1087 = bitcast i8* %1086 to %struct.xpvcv*
  %xcv_flags2207 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %1087, i32 0, i32 12
  %1088 = load i32, i32* %xcv_flags2207, align 4
  %and2208 = and i32 %1088, 256
  %tobool2209 = icmp ne i32 %and2208, 0
  br i1 %tobool2209, label %land.lhs.true2210, label %if.else2215

land.lhs.true2210:                                ; preds = %if.then2205
  %1089 = load %struct.cv*, %struct.cv** @PL_compcv, align 8
  %sv_flags2211 = getelementptr inbounds %struct.cv, %struct.cv* %1089, i32 0, i32 2
  %1090 = load i32, i32* %sv_flags2211, align 4
  %and2212 = and i32 %1090, 16777216
  %tobool2213 = icmp ne i32 %and2212, 0
  br i1 %tobool2213, label %if.else2215, label %if.then2214

if.then2214:                                      ; preds = %land.lhs.true2210
  store %struct.sv* @PL_sv_undef, %struct.sv** %sv, align 8
  br label %if.end2220

if.else2215:                                      ; preds = %land.lhs.true2210, %if.then2205
  %1091 = load %struct.cv*, %struct.cv** @PL_compcv, align 8
  %1092 = bitcast %struct.cv* %1091 to %struct.sv*
  %call2216 = call %struct.sv* @Perl_newRV(%struct.sv* %1092)
  store %struct.sv* %call2216, %struct.sv** %sv, align 8
  %1093 = load %struct.sv*, %struct.sv** %sv, align 8
  %call2217 = call %struct.sv* @Perl_sv_rvweaken(%struct.sv* %1093)
  %1094 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags2218 = getelementptr inbounds %struct.sv, %struct.sv* %1094, i32 0, i32 2
  %1095 = load i32, i32* %sv_flags2218, align 4
  %or2219 = or i32 %1095, 134283264
  store i32 %or2219, i32* %sv_flags2218, align 4
  br label %if.end2220

if.end2220:                                       ; preds = %if.else2215, %if.then2214
  br label %do.body2221

do.body2221:                                      ; preds = %if.end2220
  %1096 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type2222 = getelementptr inbounds %struct.op, %struct.op* %1096, i32 0, i32 4
  %bf.load2223 = load i16, i16* %op_type2222, align 8
  %bf.clear2224 = and i16 %bf.load2223, -512
  %bf.set2225 = or i16 %bf.clear2224, 5
  store i16 %bf.set2225, i16* %op_type2222, align 8
  %1097 = load %struct.op* ()*, %struct.op* ()** getelementptr inbounds ([0 x %struct.op* ()*], [0 x %struct.op* ()*]* @PL_ppaddr, i64 0, i64 5), align 8
  %1098 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_ppaddr2226 = getelementptr inbounds %struct.op, %struct.op* %1098, i32 0, i32 2
  store %struct.op* ()* %1097, %struct.op* ()** %op_ppaddr2226, align 8
  br label %do.end2227

do.end2227:                                       ; preds = %do.body2221
  %1099 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_flags2228 = getelementptr inbounds %struct.op, %struct.op* %1099, i32 0, i32 5
  %1100 = load i8, i8* %op_flags2228, align 2
  %conv2229 = zext i8 %1100 to i32
  %or2230 = or i32 %conv2229, 128
  %conv2231 = trunc i32 %or2230 to i8
  store i8 %conv2231, i8* %op_flags2228, align 2
  %1101 = load %struct.sv*, %struct.sv** %sv, align 8
  %1102 = load %struct.op*, %struct.op** %o.addr, align 8
  %1103 = bitcast %struct.op* %1102 to %struct.svop*
  %op_sv2232 = getelementptr inbounds %struct.svop, %struct.svop* %1103, i32 0, i32 7
  store %struct.sv* %1101, %struct.sv** %op_sv2232, align 8
  br label %if.end2233

if.end2233:                                       ; preds = %do.end2227, %land.lhs.true2203, %lor.lhs.false2201, %land.lhs.true2192, %sw.bb2187
  br label %sw.epilog2365

sw.bb2234:                                        ; preds = %sw.epilog
  %1104 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_flags2235 = getelementptr inbounds %struct.op, %struct.op* %1104, i32 0, i32 5
  %1105 = load i8, i8* %op_flags2235, align 2
  %conv2236 = zext i8 %1105 to i32
  %and2237 = and i32 %conv2236, 3
  %tobool2238 = icmp ne i32 %and2237, 0
  br i1 %tobool2238, label %cond.true2239, label %cond.false2243

cond.true2239:                                    ; preds = %sw.bb2234
  %1106 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_flags2240 = getelementptr inbounds %struct.op, %struct.op* %1106, i32 0, i32 5
  %1107 = load i8, i8* %op_flags2240, align 2
  %conv2241 = zext i8 %1107 to i32
  %and2242 = and i32 %conv2241, 3
  br label %cond.end2244

cond.false2243:                                   ; preds = %sw.bb2234
  br label %cond.end2244

cond.end2244:                                     ; preds = %cond.false2243, %cond.true2239
  %cond2245 = phi i32 [ %and2242, %cond.true2239 ], [ 0, %cond.false2243 ]
  %cmp2246 = icmp eq i32 %cond2245, 1
  br i1 %cmp2246, label %if.then2279, label %lor.lhs.false2248

lor.lhs.false2248:                                ; preds = %cond.end2244
  %1108 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_next2249 = getelementptr inbounds %struct.op, %struct.op* %1108, i32 0, i32 0
  %1109 = load %struct.op*, %struct.op** %op_next2249, align 8
  %op_type2250 = getelementptr inbounds %struct.op, %struct.op* %1109, i32 0, i32 4
  %bf.load2251 = load i16, i16* %op_type2250, align 8
  %bf.clear2252 = and i16 %bf.load2251, 511
  %bf.cast2253 = zext i16 %bf.clear2252 to i32
  %cmp2254 = icmp eq i32 %bf.cast2253, 192
  br i1 %cmp2254, label %land.lhs.true2256, label %if.end2313

land.lhs.true2256:                                ; preds = %lor.lhs.false2248
  %1110 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_next2257 = getelementptr inbounds %struct.op, %struct.op* %1110, i32 0, i32 0
  %1111 = load %struct.op*, %struct.op** %op_next2257, align 8
  %op_next2258 = getelementptr inbounds %struct.op, %struct.op* %1111, i32 0, i32 0
  %1112 = load %struct.op*, %struct.op** %op_next2258, align 8
  %op_type2259 = getelementptr inbounds %struct.op, %struct.op* %1112, i32 0, i32 4
  %bf.load2260 = load i16, i16* %op_type2259, align 8
  %bf.clear2261 = and i16 %bf.load2260, 511
  %bf.cast2262 = zext i16 %bf.clear2261 to i32
  %cmp2263 = icmp eq i32 %bf.cast2262, 186
  br i1 %cmp2263, label %if.then2279, label %lor.lhs.false2265

lor.lhs.false2265:                                ; preds = %land.lhs.true2256
  %1113 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_next2266 = getelementptr inbounds %struct.op, %struct.op* %1113, i32 0, i32 0
  %1114 = load %struct.op*, %struct.op** %op_next2266, align 8
  %op_next2267 = getelementptr inbounds %struct.op, %struct.op* %1114, i32 0, i32 0
  %1115 = load %struct.op*, %struct.op** %op_next2267, align 8
  %op_type2268 = getelementptr inbounds %struct.op, %struct.op* %1115, i32 0, i32 4
  %bf.load2269 = load i16, i16* %op_type2268, align 8
  %bf.clear2270 = and i16 %bf.load2269, 511
  %bf.cast2271 = zext i16 %bf.clear2270 to i32
  %cmp2272 = icmp eq i32 %bf.cast2271, 203
  br i1 %cmp2272, label %land.lhs.true2274, label %if.end2313

land.lhs.true2274:                                ; preds = %lor.lhs.false2265
  %1116 = load %struct.cv*, %struct.cv** @PL_compcv, align 8
  %sv_any2275 = getelementptr inbounds %struct.cv, %struct.cv* %1116, i32 0, i32 0
  %1117 = load %struct.xpvcv*, %struct.xpvcv** %sv_any2275, align 8
  %1118 = bitcast %struct.xpvcv* %1117 to i8*
  %1119 = bitcast i8* %1118 to %struct.xpvcv*
  %xcv_flags2276 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %1119, i32 0, i32 12
  %1120 = load i32, i32* %xcv_flags2276, align 4
  %and2277 = and i32 %1120, 2
  %tobool2278 = icmp ne i32 %and2277, 0
  br i1 %tobool2278, label %if.end2313, label %if.then2279

if.then2279:                                      ; preds = %land.lhs.true2274, %land.lhs.true2256, %cond.end2244
  %1121 = load %struct.op*, %struct.op** @PL_op, align 8
  %1122 = bitcast %struct.op* %1121 to %struct.binop*
  %op_first2280 = getelementptr inbounds %struct.binop, %struct.binop* %1122, i32 0, i32 7
  %1123 = load %struct.op*, %struct.op** %op_first2280, align 8
  store %struct.op* %1123, %struct.op** %right, align 8
  %1124 = load %struct.op*, %struct.op** %right, align 8
  %tobool2281 = icmp ne %struct.op* %1124, null
  br i1 %tobool2281, label %if.then2282, label %if.end2312

if.then2282:                                      ; preds = %if.then2279
  %1125 = load %struct.op*, %struct.op** %right, align 8
  %op_sibling2283 = getelementptr inbounds %struct.op, %struct.op* %1125, i32 0, i32 1
  %1126 = load %struct.op*, %struct.op** %op_sibling2283, align 8
  %add.ptr2284 = getelementptr inbounds %struct.op, %struct.op* %1126, i64 0
  store %struct.op* %add.ptr2284, %struct.op** %left, align 8
  %1127 = load %struct.op*, %struct.op** %left, align 8
  %op_type2285 = getelementptr inbounds %struct.op, %struct.op* %1127, i32 0, i32 4
  %bf.load2286 = load i16, i16* %op_type2285, align 8
  %bf.clear2287 = and i16 %bf.load2286, 511
  %bf.cast2288 = zext i16 %bf.clear2287 to i32
  %cmp2289 = icmp eq i32 %bf.cast2288, 121
  br i1 %cmp2289, label %land.lhs.true2291, label %if.end2311

land.lhs.true2291:                                ; preds = %if.then2282
  %1128 = load %struct.op*, %struct.op** %left, align 8
  %op_private2292 = getelementptr inbounds %struct.op, %struct.op* %1128, i32 0, i32 6
  %1129 = load i8, i8* %op_private2292, align 1
  %conv2293 = zext i8 %1129 to i32
  %and2294 = and i32 %conv2293, 7
  %cmp2295 = icmp slt i32 %and2294, 4
  br i1 %cmp2295, label %if.then2297, label %if.end2311

if.then2297:                                      ; preds = %land.lhs.true2291
  %1130 = load %struct.op*, %struct.op** %o.addr, align 8
  call void @Perl_op_null(%struct.op* %1130)
  %1131 = load %struct.op*, %struct.op** %o.addr, align 8
  %call2298 = call %struct.op* @Perl_op_sibling_splice(%struct.op* %1131, %struct.op* null, i32 1, %struct.op* null)
  %1132 = load %struct.op*, %struct.op** %left, align 8
  %1133 = load %struct.op*, %struct.op** %left, align 8
  %1134 = bitcast %struct.op* %1133 to %struct.binop*
  %op_first2299 = getelementptr inbounds %struct.binop, %struct.binop* %1134, i32 0, i32 7
  %1135 = load %struct.op*, %struct.op** %op_first2299, align 8
  %1136 = load %struct.op*, %struct.op** %right, align 8
  %call2300 = call %struct.op* @Perl_op_sibling_splice(%struct.op* %1132, %struct.op* %1135, i32 0, %struct.op* %1136)
  %1137 = load %struct.op*, %struct.op** %left, align 8
  %op_private2301 = getelementptr inbounds %struct.op, %struct.op* %1137, i32 0, i32 6
  %1138 = load i8, i8* %op_private2301, align 1
  %conv2302 = zext i8 %1138 to i32
  %or2303 = or i32 %conv2302, 16
  %conv2304 = trunc i32 %or2303 to i8
  store i8 %conv2304, i8* %op_private2301, align 1
  %1139 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_flags2305 = getelementptr inbounds %struct.op, %struct.op* %1139, i32 0, i32 5
  %1140 = load i8, i8* %op_flags2305, align 2
  %conv2306 = zext i8 %1140 to i32
  %and2307 = and i32 %conv2306, -4
  %or2308 = or i32 %and2307, 1
  %conv2309 = trunc i32 %or2308 to i8
  %1141 = load %struct.op*, %struct.op** %left, align 8
  %op_flags2310 = getelementptr inbounds %struct.op, %struct.op* %1141, i32 0, i32 5
  store i8 %conv2309, i8* %op_flags2310, align 2
  br label %if.end2311

if.end2311:                                       ; preds = %if.then2297, %land.lhs.true2291, %if.then2282
  br label %if.end2312

if.end2312:                                       ; preds = %if.end2311, %if.then2279
  br label %if.end2313

if.end2313:                                       ; preds = %if.end2312, %land.lhs.true2274, %lor.lhs.false2265, %lor.lhs.false2248
  br label %sw.epilog2365

sw.bb2314:                                        ; preds = %sw.epilog
  %1142 = load %struct.op*, %struct.op** %o.addr, align 8
  %1143 = bitcast %struct.op* %1142 to %struct.binop*
  %op_last2315 = getelementptr inbounds %struct.binop, %struct.binop* %1143, i32 0, i32 8
  %1144 = load %struct.op*, %struct.op** %op_last2315, align 8
  %1145 = bitcast %struct.op* %1144 to %struct.listop*
  %op_first2316 = getelementptr inbounds %struct.listop, %struct.listop* %1145, i32 0, i32 7
  %1146 = load %struct.op*, %struct.op** %op_first2316, align 8
  %op_sibling2317 = getelementptr inbounds %struct.op, %struct.op* %1146, i32 0, i32 1
  %1147 = load %struct.op*, %struct.op** %op_sibling2317, align 8
  %add.ptr2318 = getelementptr inbounds %struct.op, %struct.op* %1147, i64 0
  %1148 = load %struct.op*, %struct.op** %o.addr, align 8
  %1149 = bitcast %struct.op* %1148 to %struct.binop*
  %op_last2319 = getelementptr inbounds %struct.binop, %struct.binop* %1149, i32 0, i32 8
  %1150 = load %struct.op*, %struct.op** %op_last2319, align 8
  %1151 = bitcast %struct.op* %1150 to %struct.listop*
  %op_last2320 = getelementptr inbounds %struct.listop, %struct.listop* %1151, i32 0, i32 8
  %1152 = load %struct.op*, %struct.op** %op_last2320, align 8
  %cmp2321 = icmp eq %struct.op* %add.ptr2318, %1152
  br i1 %cmp2321, label %land.lhs.true2323, label %if.end2337

land.lhs.true2323:                                ; preds = %sw.bb2314
  %1153 = load %struct.op*, %struct.op** %o.addr, align 8
  %1154 = bitcast %struct.op* %1153 to %struct.binop*
  %op_last2324 = getelementptr inbounds %struct.binop, %struct.binop* %1154, i32 0, i32 8
  %1155 = load %struct.op*, %struct.op** %op_last2324, align 8
  %1156 = bitcast %struct.op* %1155 to %struct.listop*
  %op_last2325 = getelementptr inbounds %struct.listop, %struct.listop* %1156, i32 0, i32 8
  %1157 = load %struct.op*, %struct.op** %op_last2325, align 8
  %op_type2326 = getelementptr inbounds %struct.op, %struct.op* %1157, i32 0, i32 4
  %bf.load2327 = load i16, i16* %op_type2326, align 8
  %bf.clear2328 = and i16 %bf.load2327, 511
  %bf.cast2329 = zext i16 %bf.clear2328 to i32
  %cmp2330 = icmp eq i32 %bf.cast2329, 1
  br i1 %cmp2330, label %if.then2332, label %if.end2337

if.then2332:                                      ; preds = %land.lhs.true2323
  %1158 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_private2333 = getelementptr inbounds %struct.op, %struct.op* %1158, i32 0, i32 6
  %1159 = load i8, i8* %op_private2333, align 1
  %conv2334 = zext i8 %1159 to i32
  %and2335 = and i32 %conv2334, -65
  %conv2336 = trunc i32 %and2335 to i8
  store i8 %conv2336, i8* %op_private2333, align 1
  br label %sw.epilog2365

if.end2337:                                       ; preds = %land.lhs.true2323, %sw.bb2314
  %1160 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_private2338 = getelementptr inbounds %struct.op, %struct.op* %1160, i32 0, i32 6
  %1161 = load i8, i8* %op_private2338, align 1
  %conv2339 = zext i8 %1161 to i32
  %and2340 = and i32 %conv2339, 64
  %tobool2341 = icmp ne i32 %and2340, 0
  br i1 %tobool2341, label %if.then2342, label %if.else2351

if.then2342:                                      ; preds = %if.end2337
  %1162 = load i32, i32* @PL_generation, align 4
  %inc2343 = add nsw i32 %1162, 1
  store i32 %inc2343, i32* @PL_generation, align 4
  %1163 = load %struct.op*, %struct.op** %o.addr, align 8
  %call2344 = call zeroext i1 @S_aassign_common_vars(%struct.op* %1163)
  br i1 %call2344, label %if.end2350, label %if.then2345

if.then2345:                                      ; preds = %if.then2342
  %1164 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_private2346 = getelementptr inbounds %struct.op, %struct.op* %1164, i32 0, i32 6
  %1165 = load i8, i8* %op_private2346, align 1
  %conv2347 = zext i8 %1165 to i32
  %and2348 = and i32 %conv2347, -65
  %conv2349 = trunc i32 %and2348 to i8
  store i8 %conv2349, i8* %op_private2346, align 1
  br label %if.end2350

if.end2350:                                       ; preds = %if.then2345, %if.then2342
  br label %if.end2359

if.else2351:                                      ; preds = %if.end2337
  %1166 = load %struct.op*, %struct.op** %o.addr, align 8
  %call2352 = call zeroext i1 @S_aassign_common_vars_aliases_only(%struct.op* %1166)
  br i1 %call2352, label %if.then2353, label %if.end2358

if.then2353:                                      ; preds = %if.else2351
  %1167 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_private2354 = getelementptr inbounds %struct.op, %struct.op* %1167, i32 0, i32 6
  %1168 = load i8, i8* %op_private2354, align 1
  %conv2355 = zext i8 %1168 to i32
  %or2356 = or i32 %conv2355, 64
  %conv2357 = trunc i32 %or2356 to i8
  store i8 %conv2357, i8* %op_private2354, align 1
  br label %if.end2358

if.end2358:                                       ; preds = %if.then2353, %if.else2351
  br label %if.end2359

if.end2359:                                       ; preds = %if.end2358, %if.end2350
  br label %sw.epilog2365

sw.bb2360:                                        ; preds = %sw.epilog
  %1169 = load %struct.op*, %struct.op** %o.addr, align 8
  %call2361 = call i8* @Perl_custom_op_get_field(%struct.op* %1169, i32 8)
  %coerce.dive = getelementptr inbounds %union.XOPRETANY, %union.XOPRETANY* %coerce, i32 0, i32 0
  store i8* %call2361, i8** %coerce.dive, align 8
  %xop_peep = bitcast %union.XOPRETANY* %coerce to void (%struct.op*, %struct.op*)**
  %1170 = load void (%struct.op*, %struct.op*)*, void (%struct.op*, %struct.op*)** %xop_peep, align 8
  store void (%struct.op*, %struct.op*)* %1170, void (%struct.op*, %struct.op*)** %cpeep, align 8
  %1171 = load void (%struct.op*, %struct.op*)*, void (%struct.op*, %struct.op*)** %cpeep, align 8
  %tobool2362 = icmp ne void (%struct.op*, %struct.op*)* %1171, null
  br i1 %tobool2362, label %if.then2363, label %if.end2364

if.then2363:                                      ; preds = %sw.bb2360
  %1172 = load void (%struct.op*, %struct.op*)*, void (%struct.op*, %struct.op*)** %cpeep, align 8
  %1173 = load %struct.op*, %struct.op** %o.addr, align 8
  %1174 = load %struct.op*, %struct.op** %oldop, align 8
  call void %1172(%struct.op* %1173, %struct.op* %1174)
  br label %if.end2364

if.end2364:                                       ; preds = %if.then2363, %sw.bb2360
  br label %sw.epilog2365

sw.epilog2365:                                    ; preds = %sw.epilog, %if.end2364, %if.end2359, %if.then2332, %if.end2313, %if.end2233, %if.end2186, %cond.end2171, %if.then2135, %if.then2127, %if.then2116, %if.then2110, %if.then2099, %if.then2094, %if.then2078, %if.then2063, %if.then2052, %if.then2042, %if.then2031, %if.then2019, %if.then2008, %if.then2004, %if.end1997, %if.then1953, %if.then1947, %do.end1904, %do.end1865, %do.end1846, %do.end1791, %if.end1694, %if.end1407, %if.end1342, %if.then1210, %if.then1062, %if.end1038, %if.else1000, %if.then849, %do.end, %if.end507, %if.then484, %if.end477, %if.then465, %if.end442, %if.end406, %sw.bb163
  %1175 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type2366 = getelementptr inbounds %struct.op, %struct.op* %1175, i32 0, i32 4
  %bf.load2367 = load i16, i16* %op_type2366, align 8
  %bf.clear2368 = and i16 %bf.load2367, 511
  %bf.cast2369 = zext i16 %bf.clear2368 to i32
  %cmp2370 = icmp eq i32 %bf.cast2369, 0
  br i1 %cmp2370, label %land.lhs.true2372, label %if.else2382

land.lhs.true2372:                                ; preds = %sw.epilog2365
  %1176 = load %struct.op*, %struct.op** %oldop, align 8
  %tobool2373 = icmp ne %struct.op* %1176, null
  br i1 %tobool2373, label %land.lhs.true2374, label %if.else2382

land.lhs.true2374:                                ; preds = %land.lhs.true2372
  %1177 = load %struct.op*, %struct.op** %oldop, align 8
  %op_next2375 = getelementptr inbounds %struct.op, %struct.op* %1177, i32 0, i32 0
  %1178 = load %struct.op*, %struct.op** %op_next2375, align 8
  %1179 = load %struct.op*, %struct.op** %o.addr, align 8
  %cmp2376 = icmp eq %struct.op* %1178, %1179
  br i1 %cmp2376, label %if.then2378, label %if.else2382

if.then2378:                                      ; preds = %land.lhs.true2374
  %1180 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_opt2379 = getelementptr inbounds %struct.op, %struct.op* %1180, i32 0, i32 4
  %bf.load2380 = load i16, i16* %op_opt2379, align 8
  %bf.clear2381 = and i16 %bf.load2380, -513
  store i16 %bf.clear2381, i16* %op_opt2379, align 8
  %1181 = load %struct.op*, %struct.op** %oldop, align 8
  store %struct.op* %1181, %struct.op** %o.addr, align 8
  br label %if.end2383

if.else2382:                                      ; preds = %land.lhs.true2374, %land.lhs.true2372, %sw.epilog2365
  %1182 = load %struct.op*, %struct.op** %oldop, align 8
  store %struct.op* %1182, %struct.op** %oldoldop, align 8
  %1183 = load %struct.op*, %struct.op** %o.addr, align 8
  store %struct.op* %1183, %struct.op** %oldop, align 8
  br label %if.end2383

if.end2383:                                       ; preds = %if.else2382, %if.then2378
  br label %for.inc2384

for.inc2384:                                      ; preds = %if.end2383, %if.then501, %if.end440
  %1184 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_next2385 = getelementptr inbounds %struct.op, %struct.op* %1184, i32 0, i32 0
  %1185 = load %struct.op*, %struct.op** %op_next2385, align 8
  store %struct.op* %1185, %struct.op** %o.addr, align 8
  br label %for.cond

for.end2386:                                      ; preds = %while.end
  call void @Perl_pop_scope()
  br label %return

return:                                           ; preds = %for.end2386, %if.then
  ret void
}

declare dso_local i8* @Perl_cop_fetch_label(%struct.cop*, i64*, i32*) #3

declare dso_local %struct.sv* @Perl_sv_rvweaken(%struct.sv*) #3

; Function Attrs: noinline nounwind uwtable
define internal zeroext i1 @S_aassign_common_vars(%struct.op* %o) #0 {
entry:
  %retval = alloca i1, align 1
  %o.addr = alloca %struct.op*, align 8
  %curop = alloca %struct.op*, align 8
  %gv = alloca %struct.gv*, align 8
  %gv135 = alloca %struct.gv*, align 8
  store %struct.op* %o, %struct.op** %o.addr, align 8
  %0 = load %struct.op*, %struct.op** %o.addr, align 8
  %1 = bitcast %struct.op* %0 to %struct.unop*
  %op_first = getelementptr inbounds %struct.unop, %struct.unop* %1, i32 0, i32 7
  %2 = load %struct.op*, %struct.op** %op_first, align 8
  store %struct.op* %2, %struct.op** %curop, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load %struct.op*, %struct.op** %curop, align 8
  %tobool = icmp ne %struct.op* %3, null
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load %struct.op*, %struct.op** %curop, align 8
  %op_type = getelementptr inbounds %struct.op, %struct.op* %4, i32 0, i32 4
  %bf.load = load i16, i16* %op_type, align 8
  %bf.clear = and i16 %bf.load, 511
  %bf.cast = zext i16 %bf.clear to i32
  %idxprom = zext i32 %bf.cast to i64
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @PL_opargs, i64 0, i64 %idxprom
  %5 = load i32, i32* %arrayidx, align 4
  %and = and i32 %5, 64
  %tobool1 = icmp ne i32 %and, 0
  br i1 %tobool1, label %if.then, label %if.else176

if.then:                                          ; preds = %for.body
  %6 = load %struct.op*, %struct.op** %curop, align 8
  %op_type2 = getelementptr inbounds %struct.op, %struct.op* %6, i32 0, i32 4
  %bf.load3 = load i16, i16* %op_type2, align 8
  %bf.clear4 = and i16 %bf.load3, 511
  %bf.cast5 = zext i16 %bf.clear4 to i32
  %cmp = icmp eq i32 %bf.cast5, 7
  br i1 %cmp, label %if.then17, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.then
  %7 = load %struct.op*, %struct.op** %curop, align 8
  %op_type6 = getelementptr inbounds %struct.op, %struct.op* %7, i32 0, i32 4
  %bf.load7 = load i16, i16* %op_type6, align 8
  %bf.clear8 = and i16 %bf.load7, 511
  %bf.cast9 = zext i16 %bf.clear8 to i32
  %cmp10 = icmp eq i32 %bf.cast9, 6
  br i1 %cmp10, label %if.then17, label %lor.lhs.false11

lor.lhs.false11:                                  ; preds = %lor.lhs.false
  %8 = load %struct.op*, %struct.op** %curop, align 8
  %op_type12 = getelementptr inbounds %struct.op, %struct.op* %8, i32 0, i32 4
  %bf.load13 = load i16, i16* %op_type12, align 8
  %bf.clear14 = and i16 %bf.load13, 511
  %bf.cast15 = zext i16 %bf.clear14 to i32
  %cmp16 = icmp eq i32 %bf.cast15, 136
  br i1 %cmp16, label %if.then17, label %if.else

if.then17:                                        ; preds = %lor.lhs.false11, %lor.lhs.false, %if.then
  %9 = load %struct.op*, %struct.op** %curop, align 8
  %10 = bitcast %struct.op* %9 to %struct.svop*
  %op_sv = getelementptr inbounds %struct.svop, %struct.svop* %10, i32 0, i32 7
  %11 = load %struct.sv*, %struct.sv** %op_sv, align 8
  %12 = bitcast %struct.sv* %11 to %struct.gv*
  store %struct.gv* %12, %struct.gv** %gv, align 8
  %13 = load %struct.gv*, %struct.gv** %gv, align 8
  %14 = load %struct.gv*, %struct.gv** @PL_defgv, align 8
  %cmp18 = icmp eq %struct.gv* %13, %14
  br i1 %cmp18, label %if.then22, label %lor.lhs.false19

lor.lhs.false19:                                  ; preds = %if.then17
  %15 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_any = getelementptr inbounds %struct.gv, %struct.gv* %15, i32 0, i32 0
  %16 = load %struct.xpvgv*, %struct.xpvgv** %sv_any, align 8
  %17 = bitcast %struct.xpvgv* %16 to %struct.xpv*
  %xpv_len_u = getelementptr inbounds %struct.xpv, %struct.xpv* %17, i32 0, i32 3
  %xpvlenu_len = bitcast %union.anon.21* %xpv_len_u to i64*
  %18 = load i64, i64* %xpvlenu_len, align 8
  %add = add i64 0, %18
  %conv = trunc i64 %add to i32
  %19 = load i32, i32* @PL_generation, align 4
  %cmp20 = icmp eq i32 %conv, %19
  br i1 %cmp20, label %if.then22, label %if.end

if.then22:                                        ; preds = %lor.lhs.false19, %if.then17
  store i1 true, i1* %retval, align 1
  br label %return

if.end:                                           ; preds = %lor.lhs.false19
  br label %do.body

do.body:                                          ; preds = %if.end
  %20 = load i32, i32* @PL_generation, align 4
  %conv23 = sext i32 %20 to i64
  %21 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_any24 = getelementptr inbounds %struct.gv, %struct.gv* %21, i32 0, i32 0
  %22 = load %struct.xpvgv*, %struct.xpvgv** %sv_any24, align 8
  %23 = bitcast %struct.xpvgv* %22 to %struct.xpv*
  %xpv_len_u25 = getelementptr inbounds %struct.xpv, %struct.xpv* %23, i32 0, i32 3
  %xpvlenu_len26 = bitcast %union.anon.21* %xpv_len_u25 to i64*
  store i64 %conv23, i64* %xpvlenu_len26, align 8
  br label %do.end

do.end:                                           ; preds = %do.body
  br label %if.end175

if.else:                                          ; preds = %lor.lhs.false11
  %24 = load %struct.op*, %struct.op** %curop, align 8
  %op_type27 = getelementptr inbounds %struct.op, %struct.op* %24, i32 0, i32 4
  %bf.load28 = load i16, i16* %op_type27, align 8
  %bf.clear29 = and i16 %bf.load28, 511
  %bf.cast30 = zext i16 %bf.clear29 to i32
  %cmp31 = icmp eq i32 %bf.cast30, 9
  br i1 %cmp31, label %if.then61, label %lor.lhs.false33

lor.lhs.false33:                                  ; preds = %if.else
  %25 = load %struct.op*, %struct.op** %curop, align 8
  %op_type34 = getelementptr inbounds %struct.op, %struct.op* %25, i32 0, i32 4
  %bf.load35 = load i16, i16* %op_type34, align 8
  %bf.clear36 = and i16 %bf.load35, 511
  %bf.cast37 = zext i16 %bf.clear36 to i32
  %cmp38 = icmp eq i32 %bf.cast37, 10
  br i1 %cmp38, label %if.then61, label %lor.lhs.false40

lor.lhs.false40:                                  ; preds = %lor.lhs.false33
  %26 = load %struct.op*, %struct.op** %curop, align 8
  %op_type41 = getelementptr inbounds %struct.op, %struct.op* %26, i32 0, i32 4
  %bf.load42 = load i16, i16* %op_type41, align 8
  %bf.clear43 = and i16 %bf.load42, 511
  %bf.cast44 = zext i16 %bf.clear43 to i32
  %cmp45 = icmp eq i32 %bf.cast44, 11
  br i1 %cmp45, label %if.then61, label %lor.lhs.false47

lor.lhs.false47:                                  ; preds = %lor.lhs.false40
  %27 = load %struct.op*, %struct.op** %curop, align 8
  %op_type48 = getelementptr inbounds %struct.op, %struct.op* %27, i32 0, i32 4
  %bf.load49 = load i16, i16* %op_type48, align 8
  %bf.clear50 = and i16 %bf.load49, 511
  %bf.cast51 = zext i16 %bf.clear50 to i32
  %cmp52 = icmp eq i32 %bf.cast51, 137
  br i1 %cmp52, label %if.then61, label %lor.lhs.false54

lor.lhs.false54:                                  ; preds = %lor.lhs.false47
  %28 = load %struct.op*, %struct.op** %curop, align 8
  %op_type55 = getelementptr inbounds %struct.op, %struct.op* %28, i32 0, i32 4
  %bf.load56 = load i16, i16* %op_type55, align 8
  %bf.clear57 = and i16 %bf.load56, 511
  %bf.cast58 = zext i16 %bf.clear57 to i32
  %cmp59 = icmp eq i32 %bf.cast58, 12
  br i1 %cmp59, label %if.then61, label %if.else81

if.then61:                                        ; preds = %lor.lhs.false54, %lor.lhs.false47, %lor.lhs.false40, %lor.lhs.false33, %if.else
  br label %padcheck

padcheck:                                         ; preds = %if.then188, %if.then159, %if.then61
  %29 = load %struct.padnamelist*, %struct.padnamelist** @PL_comppad_name, align 8
  %xpadnl_alloc = getelementptr inbounds %struct.padnamelist, %struct.padnamelist* %29, i32 0, i32 1
  %30 = load %struct.padname**, %struct.padname*** %xpadnl_alloc, align 8
  %31 = load %struct.op*, %struct.op** %curop, align 8
  %op_targ = getelementptr inbounds %struct.op, %struct.op* %31, i32 0, i32 3
  %32 = load i64, i64* %op_targ, align 8
  %arrayidx62 = getelementptr inbounds %struct.padname*, %struct.padname** %30, i64 %32
  %33 = load %struct.padname*, %struct.padname** %arrayidx62, align 8
  %xpadn_gen = getelementptr inbounds %struct.padname, %struct.padname* %33, i32 0, i32 6
  %34 = load i32, i32* %xpadn_gen, align 4
  %conv63 = sext i32 %34 to i64
  %35 = load i32, i32* @PL_generation, align 4
  %conv64 = sext i32 %35 to i64
  %cmp65 = icmp eq i64 %conv63, %conv64
  br i1 %cmp65, label %if.then75, label %lor.lhs.false67

lor.lhs.false67:                                  ; preds = %padcheck
  %36 = load %struct.padnamelist*, %struct.padnamelist** @PL_comppad_name, align 8
  %xpadnl_alloc68 = getelementptr inbounds %struct.padnamelist, %struct.padnamelist* %36, i32 0, i32 1
  %37 = load %struct.padname**, %struct.padname*** %xpadnl_alloc68, align 8
  %38 = load %struct.op*, %struct.op** %curop, align 8
  %op_targ69 = getelementptr inbounds %struct.op, %struct.op* %38, i32 0, i32 3
  %39 = load i64, i64* %op_targ69, align 8
  %arrayidx70 = getelementptr inbounds %struct.padname*, %struct.padname** %37, i64 %39
  %40 = load %struct.padname*, %struct.padname** %arrayidx70, align 8
  %xpadn_gen71 = getelementptr inbounds %struct.padname, %struct.padname* %40, i32 0, i32 6
  %41 = load i32, i32* %xpadn_gen71, align 4
  %conv72 = sext i32 %41 to i64
  %cmp73 = icmp eq i64 %conv72, 2147483647
  br i1 %cmp73, label %if.then75, label %if.end76

if.then75:                                        ; preds = %lor.lhs.false67, %padcheck
  store i1 true, i1* %retval, align 1
  br label %return

if.end76:                                         ; preds = %lor.lhs.false67
  %42 = load i32, i32* @PL_generation, align 4
  %43 = load %struct.padnamelist*, %struct.padnamelist** @PL_comppad_name, align 8
  %xpadnl_alloc77 = getelementptr inbounds %struct.padnamelist, %struct.padnamelist* %43, i32 0, i32 1
  %44 = load %struct.padname**, %struct.padname*** %xpadnl_alloc77, align 8
  %45 = load %struct.op*, %struct.op** %curop, align 8
  %op_targ78 = getelementptr inbounds %struct.op, %struct.op* %45, i32 0, i32 3
  %46 = load i64, i64* %op_targ78, align 8
  %arrayidx79 = getelementptr inbounds %struct.padname*, %struct.padname** %44, i64 %46
  %47 = load %struct.padname*, %struct.padname** %arrayidx79, align 8
  %xpadn_gen80 = getelementptr inbounds %struct.padname, %struct.padname* %47, i32 0, i32 6
  store i32 %42, i32* %xpadn_gen80, align 4
  br label %if.end174

if.else81:                                        ; preds = %lor.lhs.false54
  %48 = load %struct.op*, %struct.op** %curop, align 8
  %op_type82 = getelementptr inbounds %struct.op, %struct.op* %48, i32 0, i32 4
  %bf.load83 = load i16, i16* %op_type82, align 8
  %bf.clear84 = and i16 %bf.load83, 511
  %bf.cast85 = zext i16 %bf.clear84 to i32
  %cmp86 = icmp eq i32 %bf.cast85, 17
  br i1 %cmp86, label %if.then88, label %if.else89

if.then88:                                        ; preds = %if.else81
  store i1 true, i1* %retval, align 1
  br label %return

if.else89:                                        ; preds = %if.else81
  %49 = load %struct.op*, %struct.op** %curop, align 8
  %op_type90 = getelementptr inbounds %struct.op, %struct.op* %49, i32 0, i32 4
  %bf.load91 = load i16, i16* %op_type90, align 8
  %bf.clear92 = and i16 %bf.load91, 511
  %bf.cast93 = zext i16 %bf.clear92 to i32
  %cmp94 = icmp eq i32 %bf.cast93, 15
  br i1 %cmp94, label %if.then117, label %lor.lhs.false96

lor.lhs.false96:                                  ; preds = %if.else89
  %50 = load %struct.op*, %struct.op** %curop, align 8
  %op_type97 = getelementptr inbounds %struct.op, %struct.op* %50, i32 0, i32 4
  %bf.load98 = load i16, i16* %op_type97, align 8
  %bf.clear99 = and i16 %bf.load98, 511
  %bf.cast100 = zext i16 %bf.clear99 to i32
  %cmp101 = icmp eq i32 %bf.cast100, 135
  br i1 %cmp101, label %if.then117, label %lor.lhs.false103

lor.lhs.false103:                                 ; preds = %lor.lhs.false96
  %51 = load %struct.op*, %struct.op** %curop, align 8
  %op_type104 = getelementptr inbounds %struct.op, %struct.op* %51, i32 0, i32 4
  %bf.load105 = load i16, i16* %op_type104, align 8
  %bf.clear106 = and i16 %bf.load105, 511
  %bf.cast107 = zext i16 %bf.clear106 to i32
  %cmp108 = icmp eq i32 %bf.cast107, 149
  br i1 %cmp108, label %if.then117, label %lor.lhs.false110

lor.lhs.false110:                                 ; preds = %lor.lhs.false103
  %52 = load %struct.op*, %struct.op** %curop, align 8
  %op_type111 = getelementptr inbounds %struct.op, %struct.op* %52, i32 0, i32 4
  %bf.load112 = load i16, i16* %op_type111, align 8
  %bf.clear113 = and i16 %bf.load112, 511
  %bf.cast114 = zext i16 %bf.clear113 to i32
  %cmp115 = icmp eq i32 %bf.cast114, 14
  br i1 %cmp115, label %if.then117, label %if.else127

if.then117:                                       ; preds = %lor.lhs.false110, %lor.lhs.false103, %lor.lhs.false96, %if.else89
  %53 = load %struct.op*, %struct.op** %curop, align 8
  %54 = bitcast %struct.op* %53 to %struct.unop*
  %op_first118 = getelementptr inbounds %struct.unop, %struct.unop* %54, i32 0, i32 7
  %55 = load %struct.op*, %struct.op** %op_first118, align 8
  %op_type119 = getelementptr inbounds %struct.op, %struct.op* %55, i32 0, i32 4
  %bf.load120 = load i16, i16* %op_type119, align 8
  %bf.clear121 = and i16 %bf.load120, 511
  %bf.cast122 = zext i16 %bf.clear121 to i32
  %cmp123 = icmp ne i32 %bf.cast122, 7
  br i1 %cmp123, label %if.then125, label %if.end126

if.then125:                                       ; preds = %if.then117
  store i1 true, i1* %retval, align 1
  br label %return

if.end126:                                        ; preds = %if.then117
  br label %if.end172

if.else127:                                       ; preds = %lor.lhs.false110
  %56 = load %struct.op*, %struct.op** %curop, align 8
  %op_type128 = getelementptr inbounds %struct.op, %struct.op* %56, i32 0, i32 4
  %bf.load129 = load i16, i16* %op_type128, align 8
  %bf.clear130 = and i16 %bf.load129, 511
  %bf.cast131 = zext i16 %bf.clear130 to i32
  %cmp132 = icmp eq i32 %bf.cast131, 13
  br i1 %cmp132, label %if.then134, label %if.else162

if.then134:                                       ; preds = %if.else127
  %57 = load %struct.op*, %struct.op** %curop, align 8
  %58 = bitcast %struct.op* %57 to %struct.pmop*
  %op_pmreplrootu = getelementptr inbounds %struct.pmop, %struct.pmop* %58, i32 0, i32 11
  %op_pmtargetgv = bitcast %union.anon.18* %op_pmreplrootu to %struct.gv**
  %59 = load %struct.gv*, %struct.gv** %op_pmtargetgv, align 8
  store %struct.gv* %59, %struct.gv** %gv135, align 8
  %60 = load %struct.gv*, %struct.gv** %gv135, align 8
  %tobool136 = icmp ne %struct.gv* %60, null
  br i1 %tobool136, label %if.then137, label %if.else156

if.then137:                                       ; preds = %if.then134
  %61 = load %struct.gv*, %struct.gv** %gv135, align 8
  %62 = load %struct.gv*, %struct.gv** @PL_defgv, align 8
  %cmp138 = icmp eq %struct.gv* %61, %62
  br i1 %cmp138, label %if.then148, label %lor.lhs.false140

lor.lhs.false140:                                 ; preds = %if.then137
  %63 = load %struct.gv*, %struct.gv** %gv135, align 8
  %sv_any141 = getelementptr inbounds %struct.gv, %struct.gv* %63, i32 0, i32 0
  %64 = load %struct.xpvgv*, %struct.xpvgv** %sv_any141, align 8
  %65 = bitcast %struct.xpvgv* %64 to %struct.xpv*
  %xpv_len_u142 = getelementptr inbounds %struct.xpv, %struct.xpv* %65, i32 0, i32 3
  %xpvlenu_len143 = bitcast %union.anon.21* %xpv_len_u142 to i64*
  %66 = load i64, i64* %xpvlenu_len143, align 8
  %add144 = add i64 0, %66
  %conv145 = trunc i64 %add144 to i32
  %67 = load i32, i32* @PL_generation, align 4
  %cmp146 = icmp eq i32 %conv145, %67
  br i1 %cmp146, label %if.then148, label %if.end149

if.then148:                                       ; preds = %lor.lhs.false140, %if.then137
  store i1 true, i1* %retval, align 1
  br label %return

if.end149:                                        ; preds = %lor.lhs.false140
  br label %do.body150

do.body150:                                       ; preds = %if.end149
  %68 = load i32, i32* @PL_generation, align 4
  %conv151 = sext i32 %68 to i64
  %69 = load %struct.gv*, %struct.gv** %gv135, align 8
  %sv_any152 = getelementptr inbounds %struct.gv, %struct.gv* %69, i32 0, i32 0
  %70 = load %struct.xpvgv*, %struct.xpvgv** %sv_any152, align 8
  %71 = bitcast %struct.xpvgv* %70 to %struct.xpv*
  %xpv_len_u153 = getelementptr inbounds %struct.xpv, %struct.xpv* %71, i32 0, i32 3
  %xpvlenu_len154 = bitcast %union.anon.21* %xpv_len_u153 to i64*
  store i64 %conv151, i64* %xpvlenu_len154, align 8
  br label %do.end155

do.end155:                                        ; preds = %do.body150
  br label %if.end161

if.else156:                                       ; preds = %if.then134
  %72 = load %struct.op*, %struct.op** %curop, align 8
  %op_targ157 = getelementptr inbounds %struct.op, %struct.op* %72, i32 0, i32 3
  %73 = load i64, i64* %op_targ157, align 8
  %tobool158 = icmp ne i64 %73, 0
  br i1 %tobool158, label %if.then159, label %if.end160

if.then159:                                       ; preds = %if.else156
  br label %padcheck

if.end160:                                        ; preds = %if.else156
  br label %if.end161

if.end161:                                        ; preds = %if.end160, %do.end155
  br label %if.end171

if.else162:                                       ; preds = %if.else127
  %74 = load %struct.op*, %struct.op** %curop, align 8
  %op_type163 = getelementptr inbounds %struct.op, %struct.op* %74, i32 0, i32 4
  %bf.load164 = load i16, i16* %op_type163, align 8
  %bf.clear165 = and i16 %bf.load164, 511
  %bf.cast166 = zext i16 %bf.clear165 to i32
  %cmp167 = icmp eq i32 %bf.cast166, 390
  br i1 %cmp167, label %if.then169, label %if.else170

if.then169:                                       ; preds = %if.else162
  br label %for.inc

if.else170:                                       ; preds = %if.else162
  store i1 true, i1* %retval, align 1
  br label %return

if.end171:                                        ; preds = %if.end161
  br label %if.end172

if.end172:                                        ; preds = %if.end171, %if.end126
  br label %if.end173

if.end173:                                        ; preds = %if.end172
  br label %if.end174

if.end174:                                        ; preds = %if.end173, %if.end76
  br label %if.end175

if.end175:                                        ; preds = %if.end174, %do.end
  br label %if.end190

if.else176:                                       ; preds = %for.body
  %75 = load %struct.op*, %struct.op** %curop, align 8
  %op_type177 = getelementptr inbounds %struct.op, %struct.op* %75, i32 0, i32 4
  %bf.load178 = load i16, i16* %op_type177, align 8
  %bf.clear179 = and i16 %bf.load178, 511
  %bf.cast180 = zext i16 %bf.clear179 to i32
  %idxprom181 = zext i32 %bf.cast180 to i64
  %arrayidx182 = getelementptr inbounds [0 x i32], [0 x i32]* @PL_opargs, i64 0, i64 %idxprom181
  %76 = load i32, i32* %arrayidx182, align 4
  %and183 = and i32 %76, 16
  %tobool184 = icmp ne i32 %and183, 0
  br i1 %tobool184, label %land.lhs.true, label %if.end189

land.lhs.true:                                    ; preds = %if.else176
  %77 = load %struct.op*, %struct.op** %curop, align 8
  %op_private = getelementptr inbounds %struct.op, %struct.op* %77, i32 0, i32 6
  %78 = load i8, i8* %op_private, align 1
  %conv185 = zext i8 %78 to i32
  %and186 = and i32 %conv185, 16
  %tobool187 = icmp ne i32 %and186, 0
  br i1 %tobool187, label %if.then188, label %if.end189

if.then188:                                       ; preds = %land.lhs.true
  br label %padcheck

if.end189:                                        ; preds = %land.lhs.true, %if.else176
  br label %if.end190

if.end190:                                        ; preds = %if.end189, %if.end175
  %79 = load %struct.op*, %struct.op** %curop, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %79, i32 0, i32 5
  %80 = load i8, i8* %op_flags, align 2
  %conv191 = zext i8 %80 to i32
  %and192 = and i32 %conv191, 4
  %tobool193 = icmp ne i32 %and192, 0
  br i1 %tobool193, label %if.then194, label %if.end197

if.then194:                                       ; preds = %if.end190
  %81 = load %struct.op*, %struct.op** %curop, align 8
  %call = call zeroext i1 @S_aassign_common_vars(%struct.op* %81)
  br i1 %call, label %if.then195, label %if.end196

if.then195:                                       ; preds = %if.then194
  store i1 true, i1* %retval, align 1
  br label %return

if.end196:                                        ; preds = %if.then194
  br label %if.end197

if.end197:                                        ; preds = %if.end196, %if.end190
  br label %for.inc

for.inc:                                          ; preds = %if.end197, %if.then169
  %82 = load %struct.op*, %struct.op** %curop, align 8
  %op_sibling = getelementptr inbounds %struct.op, %struct.op* %82, i32 0, i32 1
  %83 = load %struct.op*, %struct.op** %op_sibling, align 8
  %add.ptr = getelementptr inbounds %struct.op, %struct.op* %83, i64 0
  store %struct.op* %add.ptr, %struct.op** %curop, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i1 false, i1* %retval, align 1
  br label %return

return:                                           ; preds = %for.end, %if.then195, %if.else170, %if.then148, %if.then125, %if.then88, %if.then75, %if.then22
  %84 = load i1, i1* %retval, align 1
  ret i1 %84
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i1 @S_aassign_common_vars_aliases_only(%struct.op* %o) #0 {
entry:
  %retval = alloca i1, align 1
  %o.addr = alloca %struct.op*, align 8
  %curop = alloca %struct.op*, align 8
  store %struct.op* %o, %struct.op** %o.addr, align 8
  %0 = load %struct.op*, %struct.op** %o.addr, align 8
  %1 = bitcast %struct.op* %0 to %struct.unop*
  %op_first = getelementptr inbounds %struct.unop, %struct.unop* %1, i32 0, i32 7
  %2 = load %struct.op*, %struct.op** %op_first, align 8
  store %struct.op* %2, %struct.op** %curop, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load %struct.op*, %struct.op** %curop, align 8
  %tobool = icmp ne %struct.op* %3, null
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load %struct.op*, %struct.op** %curop, align 8
  %op_type = getelementptr inbounds %struct.op, %struct.op* %4, i32 0, i32 4
  %bf.load = load i16, i16* %op_type, align 8
  %bf.clear = and i16 %bf.load, 511
  %bf.cast = zext i16 %bf.clear to i32
  %cmp = icmp eq i32 %bf.cast, 9
  br i1 %cmp, label %land.lhs.true32, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %for.body
  %5 = load %struct.op*, %struct.op** %curop, align 8
  %op_type1 = getelementptr inbounds %struct.op, %struct.op* %5, i32 0, i32 4
  %bf.load2 = load i16, i16* %op_type1, align 8
  %bf.clear3 = and i16 %bf.load2, 511
  %bf.cast4 = zext i16 %bf.clear3 to i32
  %cmp5 = icmp eq i32 %bf.cast4, 10
  br i1 %cmp5, label %land.lhs.true32, label %lor.lhs.false6

lor.lhs.false6:                                   ; preds = %lor.lhs.false
  %6 = load %struct.op*, %struct.op** %curop, align 8
  %op_type7 = getelementptr inbounds %struct.op, %struct.op* %6, i32 0, i32 4
  %bf.load8 = load i16, i16* %op_type7, align 8
  %bf.clear9 = and i16 %bf.load8, 511
  %bf.cast10 = zext i16 %bf.clear9 to i32
  %cmp11 = icmp eq i32 %bf.cast10, 11
  br i1 %cmp11, label %land.lhs.true32, label %lor.lhs.false12

lor.lhs.false12:                                  ; preds = %lor.lhs.false6
  %7 = load %struct.op*, %struct.op** %curop, align 8
  %op_type13 = getelementptr inbounds %struct.op, %struct.op* %7, i32 0, i32 4
  %bf.load14 = load i16, i16* %op_type13, align 8
  %bf.clear15 = and i16 %bf.load14, 511
  %bf.cast16 = zext i16 %bf.clear15 to i32
  %cmp17 = icmp eq i32 %bf.cast16, 137
  br i1 %cmp17, label %land.lhs.true32, label %lor.lhs.false18

lor.lhs.false18:                                  ; preds = %lor.lhs.false12
  %8 = load %struct.op*, %struct.op** %curop, align 8
  %op_type19 = getelementptr inbounds %struct.op, %struct.op* %8, i32 0, i32 4
  %bf.load20 = load i16, i16* %op_type19, align 8
  %bf.clear21 = and i16 %bf.load20, 511
  %bf.cast22 = zext i16 %bf.clear21 to i32
  %cmp23 = icmp eq i32 %bf.cast22, 12
  br i1 %cmp23, label %land.lhs.true32, label %lor.lhs.false24

lor.lhs.false24:                                  ; preds = %lor.lhs.false18
  %9 = load %struct.op*, %struct.op** %curop, align 8
  %op_type25 = getelementptr inbounds %struct.op, %struct.op* %9, i32 0, i32 4
  %bf.load26 = load i16, i16* %op_type25, align 8
  %bf.clear27 = and i16 %bf.load26, 511
  %bf.cast28 = zext i16 %bf.clear27 to i32
  %idxprom = zext i32 %bf.cast28 to i64
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @PL_opargs, i64 0, i64 %idxprom
  %10 = load i32, i32* %arrayidx, align 4
  %and = and i32 %10, 16
  %tobool29 = icmp ne i32 %and, 0
  br i1 %tobool29, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %lor.lhs.false24
  %11 = load %struct.op*, %struct.op** %curop, align 8
  %op_private = getelementptr inbounds %struct.op, %struct.op* %11, i32 0, i32 6
  %12 = load i8, i8* %op_private, align 1
  %conv = zext i8 %12 to i32
  %and30 = and i32 %conv, 16
  %tobool31 = icmp ne i32 %and30, 0
  br i1 %tobool31, label %land.lhs.true32, label %if.end

land.lhs.true32:                                  ; preds = %land.lhs.true, %lor.lhs.false18, %lor.lhs.false12, %lor.lhs.false6, %lor.lhs.false, %for.body
  %13 = load %struct.padnamelist*, %struct.padnamelist** @PL_comppad_name, align 8
  %xpadnl_alloc = getelementptr inbounds %struct.padnamelist, %struct.padnamelist* %13, i32 0, i32 1
  %14 = load %struct.padname**, %struct.padname*** %xpadnl_alloc, align 8
  %15 = load %struct.op*, %struct.op** %curop, align 8
  %op_targ = getelementptr inbounds %struct.op, %struct.op* %15, i32 0, i32 3
  %16 = load i64, i64* %op_targ, align 8
  %arrayidx33 = getelementptr inbounds %struct.padname*, %struct.padname** %14, i64 %16
  %17 = load %struct.padname*, %struct.padname** %arrayidx33, align 8
  %xpadn_gen = getelementptr inbounds %struct.padname, %struct.padname* %17, i32 0, i32 6
  %18 = load i32, i32* %xpadn_gen, align 4
  %conv34 = sext i32 %18 to i64
  %cmp35 = icmp eq i64 %conv34, 2147483647
  br i1 %cmp35, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true32
  store i1 true, i1* %retval, align 1
  br label %return

if.end:                                           ; preds = %land.lhs.true32, %land.lhs.true, %lor.lhs.false24
  %19 = load %struct.op*, %struct.op** %curop, align 8
  %op_type37 = getelementptr inbounds %struct.op, %struct.op* %19, i32 0, i32 4
  %bf.load38 = load i16, i16* %op_type37, align 8
  %bf.clear39 = and i16 %bf.load38, 511
  %bf.cast40 = zext i16 %bf.clear39 to i32
  %cmp41 = icmp eq i32 %bf.cast40, 13
  br i1 %cmp41, label %land.lhs.true43, label %if.end55

land.lhs.true43:                                  ; preds = %if.end
  %20 = load %struct.op*, %struct.op** %curop, align 8
  %op_targ44 = getelementptr inbounds %struct.op, %struct.op* %20, i32 0, i32 3
  %21 = load i64, i64* %op_targ44, align 8
  %tobool45 = icmp ne i64 %21, 0
  br i1 %tobool45, label %land.lhs.true46, label %if.end55

land.lhs.true46:                                  ; preds = %land.lhs.true43
  %22 = load %struct.padnamelist*, %struct.padnamelist** @PL_comppad_name, align 8
  %xpadnl_alloc47 = getelementptr inbounds %struct.padnamelist, %struct.padnamelist* %22, i32 0, i32 1
  %23 = load %struct.padname**, %struct.padname*** %xpadnl_alloc47, align 8
  %24 = load %struct.op*, %struct.op** %curop, align 8
  %op_targ48 = getelementptr inbounds %struct.op, %struct.op* %24, i32 0, i32 3
  %25 = load i64, i64* %op_targ48, align 8
  %arrayidx49 = getelementptr inbounds %struct.padname*, %struct.padname** %23, i64 %25
  %26 = load %struct.padname*, %struct.padname** %arrayidx49, align 8
  %xpadn_gen50 = getelementptr inbounds %struct.padname, %struct.padname* %26, i32 0, i32 6
  %27 = load i32, i32* %xpadn_gen50, align 4
  %conv51 = sext i32 %27 to i64
  %cmp52 = icmp eq i64 %conv51, 2147483647
  br i1 %cmp52, label %if.then54, label %if.end55

if.then54:                                        ; preds = %land.lhs.true46
  store i1 true, i1* %retval, align 1
  br label %return

if.end55:                                         ; preds = %land.lhs.true46, %land.lhs.true43, %if.end
  %28 = load %struct.op*, %struct.op** %curop, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %28, i32 0, i32 5
  %29 = load i8, i8* %op_flags, align 2
  %conv56 = zext i8 %29 to i32
  %and57 = and i32 %conv56, 4
  %tobool58 = icmp ne i32 %and57, 0
  br i1 %tobool58, label %if.then59, label %if.end62

if.then59:                                        ; preds = %if.end55
  %30 = load %struct.op*, %struct.op** %curop, align 8
  %call = call zeroext i1 @S_aassign_common_vars_aliases_only(%struct.op* %30)
  br i1 %call, label %if.then60, label %if.end61

if.then60:                                        ; preds = %if.then59
  store i1 true, i1* %retval, align 1
  br label %return

if.end61:                                         ; preds = %if.then59
  br label %if.end62

if.end62:                                         ; preds = %if.end61, %if.end55
  br label %for.inc

for.inc:                                          ; preds = %if.end62
  %31 = load %struct.op*, %struct.op** %curop, align 8
  %op_sibling = getelementptr inbounds %struct.op, %struct.op* %31, i32 0, i32 1
  %32 = load %struct.op*, %struct.op** %op_sibling, align 8
  %add.ptr = getelementptr inbounds %struct.op, %struct.op* %32, i64 0
  store %struct.op* %add.ptr, %struct.op** %curop, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i1 false, i1* %retval, align 1
  br label %return

return:                                           ; preds = %for.end, %if.then60, %if.then54, %if.then
  %33 = load i1, i1* %retval, align 1
  ret i1 %33
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @Perl_peep(%struct.op* %o) #0 {
entry:
  %o.addr = alloca %struct.op*, align 8
  store %struct.op* %o, %struct.op** %o.addr, align 8
  %0 = load void (%struct.op*)*, void (%struct.op*)** @PL_rpeepp, align 8
  %1 = load %struct.op*, %struct.op** %o.addr, align 8
  call void %0(%struct.op* %1)
  ret void
}

declare dso_local i8* @Perl_safesyscalloc(i64, i64) #3

declare dso_local i8* @Perl_savepvn(i8*, i32) #3

; Function Attrs: noinline nounwind uwtable
define dso_local void @Perl_custom_op_register(%struct.op* ()* %ppaddr, %struct.custom_op* %xop) #0 {
entry:
  %ppaddr.addr = alloca %struct.op* ()*, align 8
  %xop.addr = alloca %struct.custom_op*, align 8
  %keysv = alloca %struct.sv*, align 8
  store %struct.op* ()* %ppaddr, %struct.op* ()** %ppaddr.addr, align 8
  store %struct.custom_op* %xop, %struct.custom_op** %xop.addr, align 8
  %0 = load %struct.op* ()*, %struct.op* ()** %ppaddr.addr, align 8
  %1 = ptrtoint %struct.op* ()* %0 to i64
  %call = call %struct.sv* @Perl_newSViv(i64 %1)
  %call1 = call %struct.sv* @Perl_sv_2mortal(%struct.sv* %call)
  store %struct.sv* %call1, %struct.sv** %keysv, align 8
  %2 = load %struct.hv*, %struct.hv** @PL_custom_ops, align 8
  %tobool = icmp ne %struct.hv* %2, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %call2 = call %struct.sv* @Perl_newSV_type(i32 12)
  %3 = bitcast %struct.sv* %call2 to i8*
  %4 = bitcast i8* %3 to %struct.hv*
  store %struct.hv* %4, %struct.hv** @PL_custom_ops, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.hv*, %struct.hv** @PL_custom_ops, align 8
  %6 = load %struct.sv*, %struct.sv** %keysv, align 8
  %7 = load %struct.custom_op*, %struct.custom_op** %xop.addr, align 8
  %8 = ptrtoint %struct.custom_op* %7 to i64
  %call3 = call %struct.sv* @Perl_newSViv(i64 %8)
  %call4 = call i8* @Perl_hv_common(%struct.hv* %5, %struct.sv* %6, i8* null, i64 0, i32 0, i32 4, %struct.sv* %call3, i32 0)
  %9 = bitcast i8* %call4 to %struct.he*
  %tobool5 = icmp ne %struct.he* %9, null
  br i1 %tobool5, label %if.end7, label %if.then6

if.then6:                                         ; preds = %if.end
  %10 = load %struct.custom_op*, %struct.custom_op** %xop.addr, align 8
  %xop_name = getelementptr inbounds %struct.custom_op, %struct.custom_op* %10, i32 0, i32 1
  %11 = load i8*, i8** %xop_name, align 8
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.150, i64 0, i64 0), i8* %11)
  br label %if.end7

if.end7:                                          ; preds = %if.then6, %if.end
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.sv* @Perl_core_prototype(%struct.sv* %sv, i8* %name, i32 %code, i32* %opnum) #0 {
entry:
  %retval = alloca %struct.sv*, align 8
  %sv.addr = alloca %struct.sv*, align 8
  %name.addr = alloca i8*, align 8
  %code.addr = alloca i32, align 4
  %opnum.addr = alloca i32*, align 8
  %i = alloca i32, align 4
  %n = alloca i32, align 4
  %seen_question = alloca i32, align 4
  %defgv = alloca i32, align 4
  %oa = alloca i32, align 4
  %str = alloca [14 x i8], align 1
  %nullret = alloca i8, align 1
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  store i8* %name, i8** %name.addr, align 8
  store i32 %code, i32* %code.addr, align 4
  store i32* %opnum, i32** %opnum.addr, align 8
  store i32 0, i32* %i, align 4
  store i32 0, i32* %n, align 4
  store i32 0, i32* %seen_question, align 4
  store i32 0, i32* %defgv, align 4
  store i8 0, i8* %nullret, align 1
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %tobool = icmp ne %struct.sv* %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %call = call %struct.sv* @Perl_sv_newmortal()
  store %struct.sv* %call, %struct.sv** %sv.addr, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %1 = load i32, i32* %code.addr, align 4
  %cmp = icmp slt i32 %1, 0
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end
  %2 = load i32, i32* %code.addr, align 4
  %sub = sub nsw i32 0, %2
  br label %cond.end

cond.false:                                       ; preds = %if.end
  %3 = load i32, i32* %code.addr, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %sub, %cond.true ], [ %3, %cond.false ]
  switch i32 %cond, label %sw.epilog [
    i32 17, label %sw.bb
    i32 27, label %sw.bb
    i32 26, label %sw.bb
    i32 33, label %sw.bb
    i32 41, label %sw.bb
    i32 42, label %sw.bb
    i32 59, label %sw.bb
    i32 60, label %sw.bb
    i32 56, label %sw.bb
    i32 72, label %sw.bb
    i32 102, label %sw.bb
    i32 103, label %sw.bb
    i32 104, label %sw.bb
    i32 113, label %sw.bb
    i32 116, label %sw.bb
    i32 125, label %sw.bb
    i32 127, label %sw.bb
    i32 134, label %sw.bb
    i32 135, label %sw.bb
    i32 141, label %sw.bb
    i32 149, label %sw.bb
    i32 150, label %sw.bb
    i32 155, label %sw.bb
    i32 166, label %sw.bb
    i32 169, label %sw.bb
    i32 171, label %sw.bb
    i32 177, label %sw.bb
    i32 181, label %sw.bb
    i32 205, label %sw.bb
    i32 207, label %sw.bb
    i32 221, label %sw.bb
    i32 252, label %sw.bb
    i32 253, label %sw.bb
    i32 100, label %sw.bb4
    i32 111, label %sw.bb8
    i32 243, label %sw.bb12
    i32 46, label %sw.bb16
    i32 152, label %sw.bb20
    i32 238, label %sw.bb24
    i32 147, label %sw.bb28
    i32 195, label %sw.bb32
    i32 148, label %sw.bb36
    i32 206, label %sw.bb40
    i32 1, label %sw.bb44
    i32 2, label %sw.bb44
    i32 3, label %sw.bb44
    i32 58, label %sw.bb48
    i32 164, label %sw.bb49
  ]

sw.bb:                                            ; preds = %cond.end, %cond.end, %cond.end, %cond.end, %cond.end, %cond.end, %cond.end, %cond.end, %cond.end, %cond.end, %cond.end, %cond.end, %cond.end, %cond.end, %cond.end, %cond.end, %cond.end, %cond.end, %cond.end, %cond.end, %cond.end, %cond.end, %cond.end, %cond.end, %cond.end, %cond.end, %cond.end, %cond.end, %cond.end, %cond.end, %cond.end, %cond.end, %cond.end
  %4 = load i32*, i32** %opnum.addr, align 8
  %tobool1 = icmp ne i32* %4, null
  br i1 %tobool1, label %if.end3, label %if.then2

if.then2:                                         ; preds = %sw.bb
  store %struct.sv* null, %struct.sv** %retval, align 8
  br label %return

if.end3:                                          ; preds = %sw.bb
  store i8 1, i8* %nullret, align 1
  br label %findopnum

sw.bb4:                                           ; preds = %cond.end
  %5 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  call void @Perl_sv_setpvn(%struct.sv* %5, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.151, i64 0, i64 0), i64 2)
  %6 = load i32*, i32** %opnum.addr, align 8
  %tobool5 = icmp ne i32* %6, null
  br i1 %tobool5, label %if.then6, label %if.end7

if.then6:                                         ; preds = %sw.bb4
  %7 = load i32*, i32** %opnum.addr, align 8
  store i32 25, i32* %7, align 4
  br label %if.end7

if.end7:                                          ; preds = %if.then6, %sw.bb4
  %8 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  store %struct.sv* %8, %struct.sv** %retval, align 8
  br label %return

sw.bb8:                                           ; preds = %cond.end
  %9 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  call void @Perl_sv_setpvn(%struct.sv* %9, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.152, i64 0, i64 0), i64 1)
  %10 = load i32*, i32** %opnum.addr, align 8
  %tobool9 = icmp ne i32* %10, null
  br i1 %tobool9, label %if.then10, label %if.end11

if.then10:                                        ; preds = %sw.bb8
  %11 = load i32*, i32** %opnum.addr, align 8
  store i32 146, i32* %11, align 4
  br label %if.end11

if.end11:                                         ; preds = %if.then10, %sw.bb8
  %12 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  store %struct.sv* %12, %struct.sv** %retval, align 8
  br label %return

sw.bb12:                                          ; preds = %cond.end
  %13 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  call void @Perl_sv_setpvn(%struct.sv* %13, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.152, i64 0, i64 0), i64 1)
  %14 = load i32*, i32** %opnum.addr, align 8
  %tobool13 = icmp ne i32* %14, null
  br i1 %tobool13, label %if.then14, label %if.end15

if.then14:                                        ; preds = %sw.bb12
  %15 = load i32*, i32** %opnum.addr, align 8
  store i32 145, i32* %15, align 4
  br label %if.end15

if.end15:                                         ; preds = %if.then14, %sw.bb12
  %16 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  store %struct.sv* %16, %struct.sv** %retval, align 8
  br label %return

sw.bb16:                                          ; preds = %cond.end
  %17 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  call void @Perl_sv_setpvn(%struct.sv* %17, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.152, i64 0, i64 0), i64 1)
  %18 = load i32*, i32** %opnum.addr, align 8
  %tobool17 = icmp ne i32* %18, null
  br i1 %tobool17, label %if.then18, label %if.end19

if.then18:                                        ; preds = %sw.bb16
  %19 = load i32*, i32** %opnum.addr, align 8
  store i32 144, i32* %19, align 4
  br label %if.end19

if.end19:                                         ; preds = %if.then18, %sw.bb16
  %20 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  store %struct.sv* %20, %struct.sv** %retval, align 8
  br label %return

sw.bb20:                                          ; preds = %cond.end
  %21 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  call void @Perl_sv_setpvn(%struct.sv* %21, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.153, i64 0, i64 0), i64 2)
  %22 = load i32*, i32** %opnum.addr, align 8
  %tobool21 = icmp ne i32* %22, null
  br i1 %tobool21, label %if.then22, label %if.end23

if.then22:                                        ; preds = %sw.bb20
  %23 = load i32*, i32** %opnum.addr, align 8
  store i32 163, i32* %23, align 4
  br label %if.end23

if.end23:                                         ; preds = %if.then22, %sw.bb20
  %24 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  store %struct.sv* %24, %struct.sv** %retval, align 8
  br label %return

sw.bb24:                                          ; preds = %cond.end
  %25 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  call void @Perl_sv_setpvn(%struct.sv* %25, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.153, i64 0, i64 0), i64 2)
  %26 = load i32*, i32** %opnum.addr, align 8
  %tobool25 = icmp ne i32* %26, null
  br i1 %tobool25, label %if.then26, label %if.end27

if.then26:                                        ; preds = %sw.bb24
  %27 = load i32*, i32** %opnum.addr, align 8
  store i32 166, i32* %27, align 4
  br label %if.end27

if.end27:                                         ; preds = %if.then26, %sw.bb24
  %28 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  store %struct.sv* %28, %struct.sv** %retval, align 8
  br label %return

sw.bb28:                                          ; preds = %cond.end
  %29 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  call void @Perl_sv_setpvn(%struct.sv* %29, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.154, i64 0, i64 0), i64 2)
  %30 = load i32*, i32** %opnum.addr, align 8
  %tobool29 = icmp ne i32* %30, null
  br i1 %tobool29, label %if.then30, label %if.end31

if.then30:                                        ; preds = %sw.bb28
  %31 = load i32*, i32** %opnum.addr, align 8
  store i32 164, i32* %31, align 4
  br label %if.end31

if.end31:                                         ; preds = %if.then30, %sw.bb28
  %32 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  store %struct.sv* %32, %struct.sv** %retval, align 8
  br label %return

sw.bb32:                                          ; preds = %cond.end
  %33 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  call void @Perl_sv_setpvn(%struct.sv* %33, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.154, i64 0, i64 0), i64 2)
  %34 = load i32*, i32** %opnum.addr, align 8
  %tobool33 = icmp ne i32* %34, null
  br i1 %tobool33, label %if.then34, label %if.end35

if.then34:                                        ; preds = %sw.bb32
  %35 = load i32*, i32** %opnum.addr, align 8
  store i32 165, i32* %35, align 4
  br label %if.end35

if.end35:                                         ; preds = %if.then34, %sw.bb32
  %36 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  store %struct.sv* %36, %struct.sv** %retval, align 8
  br label %return

sw.bb36:                                          ; preds = %cond.end
  %37 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  call void @Perl_sv_setpvn(%struct.sv* %37, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.155, i64 0, i64 0), i64 6)
  %38 = load i32*, i32** %opnum.addr, align 8
  %tobool37 = icmp ne i32* %38, null
  br i1 %tobool37, label %if.then38, label %if.end39

if.then38:                                        ; preds = %sw.bb36
  %39 = load i32*, i32** %opnum.addr, align 8
  store i32 46, i32* %39, align 4
  br label %if.end39

if.end39:                                         ; preds = %if.then38, %sw.bb36
  %40 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  store %struct.sv* %40, %struct.sv** %retval, align 8
  br label %return

sw.bb40:                                          ; preds = %cond.end
  %41 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  call void @Perl_sv_setpvn(%struct.sv* %41, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.156, i64 0, i64 0), i64 5)
  %42 = load i32*, i32** %opnum.addr, align 8
  %tobool41 = icmp ne i32* %42, null
  br i1 %tobool41, label %if.then42, label %if.end43

if.then42:                                        ; preds = %sw.bb40
  %43 = load i32*, i32** %opnum.addr, align 8
  store i32 162, i32* %43, align 4
  br label %if.end43

if.end43:                                         ; preds = %if.then42, %sw.bb40
  %44 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  store %struct.sv* %44, %struct.sv** %retval, align 8
  br label %return

sw.bb44:                                          ; preds = %cond.end, %cond.end, %cond.end
  %45 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  call void @Perl_sv_setpvn(%struct.sv* %45, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.17, i64 0, i64 0), i64 0)
  %46 = load i32*, i32** %opnum.addr, align 8
  %tobool45 = icmp ne i32* %46, null
  br i1 %tobool45, label %if.then46, label %if.end47

if.then46:                                        ; preds = %sw.bb44
  %47 = load i32*, i32** %opnum.addr, align 8
  store i32 0, i32* %47, align 4
  br label %if.end47

if.end47:                                         ; preds = %if.then46, %sw.bb44
  %48 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  store %struct.sv* %48, %struct.sv** %retval, align 8
  br label %return

sw.bb48:                                          ; preds = %cond.end
  store i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.157, i64 0, i64 0), i8** %name.addr, align 8
  br label %sw.epilog

sw.bb49:                                          ; preds = %cond.end
  store i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.158, i64 0, i64 0), i8** %name.addr, align 8
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.bb49, %cond.end, %sw.bb48
  br label %findopnum

findopnum:                                        ; preds = %sw.epilog, %if.end3
  br label %while.cond

while.cond:                                       ; preds = %if.end61, %findopnum
  %49 = load i32, i32* %i, align 4
  %cmp50 = icmp slt i32 %49, 396
  br i1 %cmp50, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %50 = load i8*, i8** %name.addr, align 8
  %51 = load i32, i32* %i, align 4
  %idxprom = sext i32 %51 to i64
  %arrayidx = getelementptr inbounds [0 x i8*], [0 x i8*]* @PL_op_name, i64 0, i64 %idxprom
  %52 = load i8*, i8** %arrayidx, align 8
  %call51 = call i32 @strcmp(i8* %50, i8* %52) #7
  %tobool52 = icmp ne i32 %call51, 0
  br i1 %tobool52, label %lor.lhs.false, label %if.then57

lor.lhs.false:                                    ; preds = %while.body
  %53 = load i8*, i8** %name.addr, align 8
  %54 = load i32, i32* %i, align 4
  %idxprom53 = sext i32 %54 to i64
  %arrayidx54 = getelementptr inbounds [0 x i8*], [0 x i8*]* @PL_op_desc, i64 0, i64 %idxprom53
  %55 = load i8*, i8** %arrayidx54, align 8
  %call55 = call i32 @strcmp(i8* %53, i8* %55) #7
  %tobool56 = icmp ne i32 %call55, 0
  br i1 %tobool56, label %if.end61, label %if.then57

if.then57:                                        ; preds = %lor.lhs.false, %while.body
  %56 = load i8, i8* %nullret, align 1
  %tobool58 = trunc i8 %56 to i1
  br i1 %tobool58, label %if.then59, label %if.end60

if.then59:                                        ; preds = %if.then57
  %57 = load i32, i32* %i, align 4
  %58 = load i32*, i32** %opnum.addr, align 8
  store i32 %57, i32* %58, align 4
  store %struct.sv* null, %struct.sv** %retval, align 8
  br label %return

if.end60:                                         ; preds = %if.then57
  br label %found

if.end61:                                         ; preds = %lor.lhs.false
  %59 = load i32, i32* %i, align 4
  %inc = add nsw i32 %59, 1
  store i32 %inc, i32* %i, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  store %struct.sv* null, %struct.sv** %retval, align 8
  br label %return

found:                                            ; preds = %if.end60
  %60 = load i32, i32* %i, align 4
  %idxprom62 = sext i32 %60 to i64
  %arrayidx63 = getelementptr inbounds [0 x i32], [0 x i32]* @PL_opargs, i64 0, i64 %idxprom62
  %61 = load i32, i32* %arrayidx63, align 4
  %and = and i32 %61, 128
  store i32 %and, i32* %defgv, align 4
  %62 = load i32, i32* %i, align 4
  %idxprom64 = sext i32 %62 to i64
  %arrayidx65 = getelementptr inbounds [0 x i32], [0 x i32]* @PL_opargs, i64 0, i64 %idxprom64
  %63 = load i32, i32* %arrayidx65, align 4
  %shr = lshr i32 %63, 12
  store i32 %shr, i32* %oa, align 4
  br label %while.cond66

while.cond66:                                     ; preds = %if.end147, %found
  %64 = load i32, i32* %oa, align 4
  %tobool67 = icmp ne i32 %64, 0
  br i1 %tobool67, label %while.body68, label %while.end149

while.body68:                                     ; preds = %while.cond66
  %65 = load i32, i32* %oa, align 4
  %and69 = and i32 %65, 8
  %tobool70 = icmp ne i32 %and69, 0
  br i1 %tobool70, label %land.lhs.true, label %if.end81

land.lhs.true:                                    ; preds = %while.body68
  %66 = load i32, i32* %seen_question, align 4
  %tobool71 = icmp ne i32 %66, 0
  br i1 %tobool71, label %if.end81, label %land.lhs.true72

land.lhs.true72:                                  ; preds = %land.lhs.true
  %67 = load i32, i32* %defgv, align 4
  %tobool73 = icmp ne i32 %67, 0
  br i1 %tobool73, label %lor.lhs.false74, label %if.then77

lor.lhs.false74:                                  ; preds = %land.lhs.true72
  %68 = load i32, i32* %oa, align 4
  %and75 = and i32 %68, 7
  %cmp76 = icmp eq i32 %and75, 6
  br i1 %cmp76, label %if.then77, label %if.end81

if.then77:                                        ; preds = %lor.lhs.false74, %land.lhs.true72
  store i32 1, i32* %seen_question, align 4
  %69 = load i32, i32* %n, align 4
  %inc78 = add nsw i32 %69, 1
  store i32 %inc78, i32* %n, align 4
  %idxprom79 = sext i32 %69 to i64
  %arrayidx80 = getelementptr inbounds [14 x i8], [14 x i8]* %str, i64 0, i64 %idxprom79
  store i8 59, i8* %arrayidx80, align 1
  br label %if.end81

if.end81:                                         ; preds = %if.then77, %lor.lhs.false74, %land.lhs.true, %while.body68
  %70 = load i32, i32* %oa, align 4
  %and82 = and i32 %70, 7
  %cmp83 = icmp sge i32 %and82, 3
  br i1 %cmp83, label %land.lhs.true84, label %if.end94

land.lhs.true84:                                  ; preds = %if.end81
  %71 = load i32, i32* %oa, align 4
  %and85 = and i32 %71, 7
  %cmp86 = icmp sle i32 %and85, 7
  br i1 %cmp86, label %land.lhs.true87, label %if.end94

land.lhs.true87:                                  ; preds = %land.lhs.true84
  %72 = load i32, i32* %oa, align 4
  %and88 = and i32 %72, 7
  %cmp89 = icmp ne i32 %and88, 6
  br i1 %cmp89, label %if.then90, label %if.end94

if.then90:                                        ; preds = %land.lhs.true87
  %73 = load i32, i32* %n, align 4
  %inc91 = add nsw i32 %73, 1
  store i32 %inc91, i32* %n, align 4
  %idxprom92 = sext i32 %73 to i64
  %arrayidx93 = getelementptr inbounds [14 x i8], [14 x i8]* %str, i64 0, i64 %idxprom92
  store i8 92, i8* %arrayidx93, align 1
  br label %if.end94

if.end94:                                         ; preds = %if.then90, %land.lhs.true87, %land.lhs.true84, %if.end81
  %74 = load i32, i32* %oa, align 4
  %and95 = and i32 %74, 7
  %cmp96 = icmp eq i32 %and95, 7
  br i1 %cmp96, label %land.lhs.true97, label %if.else

land.lhs.true97:                                  ; preds = %if.end94
  %75 = load i32, i32* %i, align 4
  %call98 = call zeroext i1 @S_scalar_mod_type(%struct.op* null, i32 %75)
  br i1 %call98, label %if.else, label %if.then99

if.then99:                                        ; preds = %land.lhs.true97
  %76 = load i32, i32* %n, align 4
  %inc100 = add nsw i32 %76, 1
  store i32 %inc100, i32* %n, align 4
  %idxprom101 = sext i32 %76 to i64
  %arrayidx102 = getelementptr inbounds [14 x i8], [14 x i8]* %str, i64 0, i64 %idxprom101
  store i8 91, i8* %arrayidx102, align 1
  %77 = load i32, i32* %n, align 4
  %inc103 = add nsw i32 %77, 1
  store i32 %inc103, i32* %n, align 4
  %idxprom104 = sext i32 %77 to i64
  %arrayidx105 = getelementptr inbounds [14 x i8], [14 x i8]* %str, i64 0, i64 %idxprom104
  store i8 36, i8* %arrayidx105, align 1
  %78 = load i32, i32* %n, align 4
  %inc106 = add nsw i32 %78, 1
  store i32 %inc106, i32* %n, align 4
  %idxprom107 = sext i32 %78 to i64
  %arrayidx108 = getelementptr inbounds [14 x i8], [14 x i8]* %str, i64 0, i64 %idxprom107
  store i8 64, i8* %arrayidx108, align 1
  %79 = load i32, i32* %n, align 4
  %inc109 = add nsw i32 %79, 1
  store i32 %inc109, i32* %n, align 4
  %idxprom110 = sext i32 %79 to i64
  %arrayidx111 = getelementptr inbounds [14 x i8], [14 x i8]* %str, i64 0, i64 %idxprom110
  store i8 37, i8* %arrayidx111, align 1
  %80 = load i32, i32* %i, align 4
  %cmp112 = icmp eq i32 %80, 378
  br i1 %cmp112, label %if.then115, label %lor.lhs.false113

lor.lhs.false113:                                 ; preds = %if.then99
  %81 = load i32, i32* %i, align 4
  %cmp114 = icmp eq i32 %81, 44
  br i1 %cmp114, label %if.then115, label %if.end119

if.then115:                                       ; preds = %lor.lhs.false113, %if.then99
  %82 = load i32, i32* %n, align 4
  %inc116 = add nsw i32 %82, 1
  store i32 %inc116, i32* %n, align 4
  %idxprom117 = sext i32 %82 to i64
  %arrayidx118 = getelementptr inbounds [14 x i8], [14 x i8]* %str, i64 0, i64 %idxprom117
  store i8 38, i8* %arrayidx118, align 1
  br label %if.end119

if.end119:                                        ; preds = %if.then115, %lor.lhs.false113
  %83 = load i32, i32* %n, align 4
  %inc120 = add nsw i32 %83, 1
  store i32 %inc120, i32* %n, align 4
  %idxprom121 = sext i32 %83 to i64
  %arrayidx122 = getelementptr inbounds [14 x i8], [14 x i8]* %str, i64 0, i64 %idxprom121
  store i8 42, i8* %arrayidx122, align 1
  %84 = load i32, i32* %n, align 4
  %inc123 = add nsw i32 %84, 1
  store i32 %inc123, i32* %n, align 4
  %idxprom124 = sext i32 %84 to i64
  %arrayidx125 = getelementptr inbounds [14 x i8], [14 x i8]* %str, i64 0, i64 %idxprom124
  store i8 93, i8* %arrayidx125, align 1
  br label %if.end132

if.else:                                          ; preds = %land.lhs.true97, %if.end94
  %85 = load i32, i32* %oa, align 4
  %and126 = and i32 %85, 7
  %idxprom127 = sext i32 %and126 to i64
  %arrayidx128 = getelementptr inbounds [9 x i8], [9 x i8]* @.str.159, i64 0, i64 %idxprom127
  %86 = load i8, i8* %arrayidx128, align 1
  %87 = load i32, i32* %n, align 4
  %inc129 = add nsw i32 %87, 1
  store i32 %inc129, i32* %n, align 4
  %idxprom130 = sext i32 %87 to i64
  %arrayidx131 = getelementptr inbounds [14 x i8], [14 x i8]* %str, i64 0, i64 %idxprom130
  store i8 %86, i8* %arrayidx131, align 1
  br label %if.end132

if.end132:                                        ; preds = %if.else, %if.end119
  %88 = load i32, i32* %oa, align 4
  %and133 = and i32 %88, 8
  %tobool134 = icmp ne i32 %and133, 0
  br i1 %tobool134, label %land.lhs.true135, label %if.end147

land.lhs.true135:                                 ; preds = %if.end132
  %89 = load i32, i32* %defgv, align 4
  %tobool136 = icmp ne i32 %89, 0
  br i1 %tobool136, label %land.lhs.true137, label %if.end147

land.lhs.true137:                                 ; preds = %land.lhs.true135
  %90 = load i32, i32* %n, align 4
  %sub138 = sub nsw i32 %90, 1
  %idxprom139 = sext i32 %sub138 to i64
  %arrayidx140 = getelementptr inbounds [14 x i8], [14 x i8]* %str, i64 0, i64 %idxprom139
  %91 = load i8, i8* %arrayidx140, align 1
  %conv = sext i8 %91 to i32
  %cmp141 = icmp eq i32 %conv, 36
  br i1 %cmp141, label %if.then143, label %if.end147

if.then143:                                       ; preds = %land.lhs.true137
  %92 = load i32, i32* %n, align 4
  %sub144 = sub nsw i32 %92, 1
  %idxprom145 = sext i32 %sub144 to i64
  %arrayidx146 = getelementptr inbounds [14 x i8], [14 x i8]* %str, i64 0, i64 %idxprom145
  store i8 95, i8* %arrayidx146, align 1
  store i32 0, i32* %defgv, align 4
  br label %if.end147

if.end147:                                        ; preds = %if.then143, %land.lhs.true137, %land.lhs.true135, %if.end132
  %93 = load i32, i32* %oa, align 4
  %shr148 = ashr i32 %93, 4
  store i32 %shr148, i32* %oa, align 4
  br label %while.cond66

while.end149:                                     ; preds = %while.cond66
  %94 = load i32, i32* %code.addr, align 4
  %cmp150 = icmp eq i32 %94, -137
  br i1 %cmp150, label %if.then155, label %lor.lhs.false152

lor.lhs.false152:                                 ; preds = %while.end149
  %95 = load i32, i32* %code.addr, align 4
  %cmp153 = icmp eq i32 %95, -89
  br i1 %cmp153, label %if.then155, label %if.end159

if.then155:                                       ; preds = %lor.lhs.false152, %while.end149
  %96 = load i32, i32* %n, align 4
  %inc156 = add nsw i32 %96, 1
  store i32 %inc156, i32* %n, align 4
  %idxprom157 = sext i32 %96 to i64
  %arrayidx158 = getelementptr inbounds [14 x i8], [14 x i8]* %str, i64 0, i64 %idxprom157
  store i8 59, i8* %arrayidx158, align 1
  br label %if.end159

if.end159:                                        ; preds = %if.then155, %lor.lhs.false152
  %97 = load i32, i32* %n, align 4
  %inc160 = add nsw i32 %97, 1
  store i32 %inc160, i32* %n, align 4
  %idxprom161 = sext i32 %97 to i64
  %arrayidx162 = getelementptr inbounds [14 x i8], [14 x i8]* %str, i64 0, i64 %idxprom161
  store i8 0, i8* %arrayidx162, align 1
  %98 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %arraydecay = getelementptr inbounds [14 x i8], [14 x i8]* %str, i64 0, i64 0
  %99 = load i32, i32* %n, align 4
  %sub163 = sub nsw i32 %99, 1
  %conv164 = sext i32 %sub163 to i64
  call void @Perl_sv_setpvn(%struct.sv* %98, i8* %arraydecay, i64 %conv164)
  %100 = load i32*, i32** %opnum.addr, align 8
  %tobool165 = icmp ne i32* %100, null
  br i1 %tobool165, label %if.then166, label %if.end167

if.then166:                                       ; preds = %if.end159
  %101 = load i32, i32* %i, align 4
  %102 = load i32*, i32** %opnum.addr, align 8
  store i32 %101, i32* %102, align 4
  br label %if.end167

if.end167:                                        ; preds = %if.then166, %if.end159
  %103 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  store %struct.sv* %103, %struct.sv** %retval, align 8
  br label %return

return:                                           ; preds = %if.end167, %while.end, %if.then59, %if.end47, %if.end43, %if.end39, %if.end35, %if.end31, %if.end27, %if.end23, %if.end19, %if.end15, %if.end11, %if.end7, %if.then2
  %104 = load %struct.sv*, %struct.sv** %retval, align 8
  ret %struct.sv* %104
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_coresub_op(%struct.sv* %coreargssv, i32 %code, i32 %opnum) #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %coreargssv.addr = alloca %struct.sv*, align 8
  %code.addr = alloca i32, align 4
  %opnum.addr = alloca i32, align 4
  %argop = alloca %struct.op*, align 8
  %o = alloca %struct.op*, align 8
  store %struct.sv* %coreargssv, %struct.sv** %coreargssv.addr, align 8
  store i32 %code, i32* %code.addr, align 4
  store i32 %opnum, i32* %opnum.addr, align 4
  %0 = load %struct.sv*, %struct.sv** %coreargssv.addr, align 8
  %call = call %struct.op* @Perl_newSVOP(i32 384, i32 0, %struct.sv* %0)
  store %struct.op* %call, %struct.op** %argop, align 8
  %1 = load i32, i32* %opnum.addr, align 4
  switch i32 %1, label %sw.default [
    i32 0, label %sw.bb
    i32 232, label %sw.bb6
  ]

sw.bb:                                            ; preds = %entry
  %2 = load %struct.op*, %struct.op** %argop, align 8
  %3 = load i32, i32* %code.addr, align 4
  %sub = sub nsw i32 0, %3
  %rem = srem i32 %sub, 3
  %conv = sext i32 %rem to i64
  %call1 = call %struct.sv* @Perl_newSViv(i64 %conv)
  %call2 = call %struct.op* @Perl_newSVOP(i32 5, i32 0, %struct.sv* %call1)
  %call3 = call %struct.op* @Perl_newOP(i32 188, i32 0)
  %call4 = call %struct.op* @Perl_newSLICEOP(i32 0, %struct.op* %call2, %struct.op* %call3)
  %call5 = call %struct.op* @Perl_op_append_elem(i32 192, %struct.op* %2, %struct.op* %call4)
  store %struct.op* %call5, %struct.op** %retval, align 8
  br label %return

sw.bb6:                                           ; preds = %entry
  %4 = load i32, i32* %code.addr, align 4
  %tobool = icmp ne i32 %4, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %sw.bb6
  %5 = load %struct.gv*, %struct.gv** @PL_defgv, align 8
  %call7 = call %struct.op* @Perl_newGVOP(i32 7, i32 0, %struct.gv* %5)
  %call8 = call %struct.op* @Perl_newAVREF(%struct.op* %call7)
  %call9 = call %struct.sv* @Perl_newSVuv(i64 1)
  %call10 = call %struct.op* @Perl_newSVOP(i32 5, i32 0, %struct.sv* %call9)
  %call11 = call %struct.op* @Perl_newBINOP(i32 73, i32 0, %struct.op* %call8, %struct.op* %call10)
  %call12 = call %struct.sv* @Perl_newSVuv(i64 231)
  %call13 = call %struct.op* @Perl_coresub_op(%struct.sv* %call12, i32 0, i32 231)
  %6 = load %struct.sv*, %struct.sv** %coreargssv.addr, align 8
  %call14 = call %struct.op* @Perl_coresub_op(%struct.sv* %6, i32 0, i32 232)
  %call15 = call %struct.op* @Perl_newCONDOP(i32 0, %struct.op* %call11, %struct.op* %call13, %struct.op* %call14)
  store %struct.op* %call15, %struct.op** %retval, align 8
  br label %return

if.end:                                           ; preds = %sw.bb6
  br label %sw.default

sw.default:                                       ; preds = %entry, %if.end
  %7 = load i32, i32* %opnum.addr, align 4
  %idxprom = sext i32 %7 to i64
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @PL_opargs, i64 0, i64 %idxprom
  %8 = load i32, i32* %arrayidx, align 4
  %and = and i32 %8, 3840
  switch i32 %and, label %sw.default58 [
    i32 0, label %sw.bb16
    i32 2816, label %sw.bb22
  ]

sw.bb16:                                          ; preds = %sw.default
  %9 = load %struct.op*, %struct.op** %argop, align 8
  %10 = load i32, i32* %opnum.addr, align 4
  %11 = load i32, i32* %opnum.addr, align 4
  %cmp = icmp eq i32 %11, 4
  br i1 %cmp, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %sw.bb16
  %12 = load i32, i32* %opnum.addr, align 4
  %cmp18 = icmp eq i32 %12, 385
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %sw.bb16
  %13 = phi i1 [ true, %sw.bb16 ], [ %cmp18, %lor.rhs ]
  %14 = zext i1 %13 to i64
  %cond = select i1 %13, i32 32768, i32 0
  %call20 = call %struct.op* @Perl_newOP(i32 %10, i32 %cond)
  %call21 = call %struct.op* @Perl_op_append_elem(i32 192, %struct.op* %9, %struct.op* %call20)
  store %struct.op* %call21, %struct.op** %retval, align 8
  br label %return

sw.bb22:                                          ; preds = %sw.default
  %15 = load i32, i32* %opnum.addr, align 4
  %cmp23 = icmp eq i32 %15, 342
  br i1 %cmp23, label %if.then25, label %if.else

if.then25:                                        ; preds = %sw.bb22
  %16 = load %struct.op*, %struct.op** %argop, align 8
  %call26 = call %struct.op* @Perl_newUNOP(i32 342, i32 4096, %struct.op* %16)
  store %struct.op* %call26, %struct.op** %o, align 8
  %17 = load i32, i32* %code.addr, align 4
  %cmp27 = icmp eq i32 %17, -58
  br i1 %cmp27, label %if.then29, label %if.end32

if.then29:                                        ; preds = %if.then25
  %18 = load %struct.op*, %struct.op** %o, align 8
  %op_private = getelementptr inbounds %struct.op, %struct.op* %18, i32 0, i32 6
  %19 = load i8, i8* %op_private, align 1
  %conv30 = zext i8 %19 to i32
  %or = or i32 %conv30, 8
  %conv31 = trunc i32 %or to i8
  store i8 %conv31, i8* %op_private, align 1
  br label %if.end32

if.end32:                                         ; preds = %if.then29, %if.then25
  br label %if.end34

if.else:                                          ; preds = %sw.bb22
  %20 = load i32, i32* %opnum.addr, align 4
  %21 = load %struct.op*, %struct.op** %argop, align 8
  %call33 = call %struct.op* @Perl_newUNOP(i32 %20, i32 0, %struct.op* %21)
  store %struct.op* %call33, %struct.op** %o, align 8
  br label %if.end34

if.end34:                                         ; preds = %if.else, %if.end32
  %22 = load i32, i32* %opnum.addr, align 4
  %cmp35 = icmp eq i32 %22, 188
  br i1 %cmp35, label %if.then37, label %if.else42

if.then37:                                        ; preds = %if.end34
  %23 = load %struct.op*, %struct.op** %o, align 8
  %op_private38 = getelementptr inbounds %struct.op, %struct.op* %23, i32 0, i32 6
  %24 = load i8, i8* %op_private38, align 1
  %conv39 = zext i8 %24 to i32
  %or40 = or i32 %conv39, 128
  %conv41 = trunc i32 %or40 to i8
  store i8 %conv41, i8* %op_private38, align 1
  br label %if.end57

if.else42:                                        ; preds = %if.end34
  br label %onearg

onearg:                                           ; preds = %if.else76, %if.else42
  %25 = load %struct.op*, %struct.op** %o, align 8
  %call43 = call zeroext i1 @S_is_handle_constructor(%struct.op* %25, i32 1)
  br i1 %call43, label %if.then44, label %if.end49

if.then44:                                        ; preds = %onearg
  %26 = load %struct.op*, %struct.op** %argop, align 8
  %op_private45 = getelementptr inbounds %struct.op, %struct.op* %26, i32 0, i32 6
  %27 = load i8, i8* %op_private45, align 1
  %conv46 = zext i8 %27 to i32
  %or47 = or i32 %conv46, 1
  %conv48 = trunc i32 %or47 to i8
  store i8 %conv48, i8* %op_private45, align 1
  br label %if.end49

if.end49:                                         ; preds = %if.then44, %onearg
  %28 = load i32, i32* %opnum.addr, align 4
  %call50 = call zeroext i1 @S_scalar_mod_type(%struct.op* null, i32 %28)
  br i1 %call50, label %if.then51, label %if.end56

if.then51:                                        ; preds = %if.end49
  %29 = load %struct.op*, %struct.op** %argop, align 8
  %op_private52 = getelementptr inbounds %struct.op, %struct.op* %29, i32 0, i32 6
  %30 = load i8, i8* %op_private52, align 1
  %conv53 = zext i8 %30 to i32
  %or54 = or i32 %conv53, 64
  %conv55 = trunc i32 %or54 to i8
  store i8 %conv55, i8* %op_private52, align 1
  br label %if.end56

if.end56:                                         ; preds = %if.then51, %if.end49
  br label %if.end57

if.end57:                                         ; preds = %if.end56, %if.then37
  %31 = load %struct.op*, %struct.op** %o, align 8
  store %struct.op* %31, %struct.op** %retval, align 8
  br label %return

sw.default58:                                     ; preds = %sw.default
  %32 = load i32, i32* %opnum.addr, align 4
  %33 = load i32, i32* %opnum.addr, align 4
  %cmp59 = icmp eq i32 %33, 25
  %conv60 = zext i1 %cmp59 to i32
  %mul = mul nsw i32 128, %conv60
  %34 = load %struct.op*, %struct.op** %argop, align 8
  %call61 = call %struct.op* @Perl_op_convert_list(i32 %32, i32 %mul, %struct.op* %34)
  store %struct.op* %call61, %struct.op** %o, align 8
  %35 = load %struct.op*, %struct.op** %o, align 8
  %call62 = call zeroext i1 @S_is_handle_constructor(%struct.op* %35, i32 2)
  br i1 %call62, label %if.then63, label %if.end68

if.then63:                                        ; preds = %sw.default58
  %36 = load %struct.op*, %struct.op** %argop, align 8
  %op_private64 = getelementptr inbounds %struct.op, %struct.op* %36, i32 0, i32 6
  %37 = load i8, i8* %op_private64, align 1
  %conv65 = zext i8 %37 to i32
  %or66 = or i32 %conv65, 2
  %conv67 = trunc i32 %or66 to i8
  store i8 %conv67, i8* %op_private64, align 1
  br label %if.end68

if.end68:                                         ; preds = %if.then63, %sw.default58
  %38 = load i32, i32* %opnum.addr, align 4
  %cmp69 = icmp eq i32 %38, 121
  br i1 %cmp69, label %if.then71, label %if.else76

if.then71:                                        ; preds = %if.end68
  %39 = load %struct.op*, %struct.op** %o, align 8
  %op_private72 = getelementptr inbounds %struct.op, %struct.op* %39, i32 0, i32 6
  %40 = load i8, i8* %op_private72, align 1
  %conv73 = zext i8 %40 to i32
  %or74 = or i32 %conv73, 8
  %conv75 = trunc i32 %or74 to i8
  store i8 %conv75, i8* %op_private72, align 1
  %41 = load %struct.op*, %struct.op** %o, align 8
  store %struct.op* %41, %struct.op** %retval, align 8
  br label %return

if.else76:                                        ; preds = %if.end68
  br label %onearg

return:                                           ; preds = %if.then71, %if.end57, %lor.end, %if.then, %sw.bb
  %42 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %42
}

declare dso_local %struct.sv* @Perl_newSVuv(i64) #3

; Function Attrs: noinline nounwind uwtable
define dso_local void @Perl_wrap_op_checker(i32 %opcode, %struct.op* (%struct.op*)* %new_checker, %struct.op* (%struct.op*)** %old_checker_p) #0 {
entry:
  %opcode.addr = alloca i32, align 4
  %new_checker.addr = alloca %struct.op* (%struct.op*)*, align 8
  %old_checker_p.addr = alloca %struct.op* (%struct.op*)**, align 8
  store i32 %opcode, i32* %opcode.addr, align 4
  store %struct.op* (%struct.op*)* %new_checker, %struct.op* (%struct.op*)** %new_checker.addr, align 8
  store %struct.op* (%struct.op*)** %old_checker_p, %struct.op* (%struct.op*)*** %old_checker_p.addr, align 8
  %0 = load %struct.op* (%struct.op*)**, %struct.op* (%struct.op*)*** %old_checker_p.addr, align 8
  %1 = load %struct.op* (%struct.op*)*, %struct.op* (%struct.op*)** %0, align 8
  %tobool = icmp ne %struct.op* (%struct.op*)* %1, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %if.end5

if.end:                                           ; preds = %entry
  %2 = load %struct.op* (%struct.op*)**, %struct.op* (%struct.op*)*** %old_checker_p.addr, align 8
  %3 = load %struct.op* (%struct.op*)*, %struct.op* (%struct.op*)** %2, align 8
  %tobool1 = icmp ne %struct.op* (%struct.op*)* %3, null
  br i1 %tobool1, label %if.end5, label %if.then2

if.then2:                                         ; preds = %if.end
  %4 = load i32, i32* %opcode.addr, align 4
  %idxprom = zext i32 %4 to i64
  %arrayidx = getelementptr inbounds [0 x %struct.op* (%struct.op*)*], [0 x %struct.op* (%struct.op*)*]* @PL_check, i64 0, i64 %idxprom
  %5 = load %struct.op* (%struct.op*)*, %struct.op* (%struct.op*)** %arrayidx, align 8
  %6 = load %struct.op* (%struct.op*)**, %struct.op* (%struct.op*)*** %old_checker_p.addr, align 8
  store %struct.op* (%struct.op*)* %5, %struct.op* (%struct.op*)** %6, align 8
  %7 = load %struct.op* (%struct.op*)*, %struct.op* (%struct.op*)** %new_checker.addr, align 8
  %8 = load i32, i32* %opcode.addr, align 4
  %idxprom3 = zext i32 %8 to i64
  %arrayidx4 = getelementptr inbounds [0 x %struct.op* (%struct.op*)*], [0 x %struct.op* (%struct.op*)*]* @PL_check, i64 0, i64 %idxprom3
  store %struct.op* (%struct.op*)* %7, %struct.op* (%struct.op*)** %arrayidx4, align 8
  br label %if.end5

if.end5:                                          ; preds = %if.then, %if.then2, %if.end
  ret void
}

declare dso_local void @Perl_sv_free2(%struct.sv*, i32) #3

declare dso_local void @Perl_refcounted_he_free(%struct.refcounted_he*) #3

declare dso_local %struct.sv* @Perl_varname(%struct.gv*, i8 signext, i64, %struct.sv*, i32, i32) #3

declare dso_local void @Perl_qerror(%struct.sv*) #3

declare dso_local %struct.sv* @Perl_mess(i8*, ...) #3

; Function Attrs: noinline nounwind uwtable
define internal void @S_scalar_slice_warning(%struct.op* %o) #0 {
entry:
  %o.addr = alloca %struct.op*, align 8
  %kid = alloca %struct.op*, align 8
  %lbrack = alloca i8, align 1
  %rbrack = alloca i8, align 1
  %name = alloca %struct.sv*, align 8
  %keysv = alloca %struct.sv*, align 8
  %key = alloca i8*, align 8
  store %struct.op* %o, %struct.op** %o.addr, align 8
  %0 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type = getelementptr inbounds %struct.op, %struct.op* %0, i32 0, i32 4
  %bf.load = load i16, i16* %op_type, align 8
  %bf.clear = and i16 %bf.load, 511
  %bf.cast = zext i16 %bf.clear to i32
  %cmp = icmp eq i32 %bf.cast, 151
  %1 = zext i1 %cmp to i64
  %cond = select i1 %cmp, i32 123, i32 91
  %conv = trunc i32 %cond to i8
  store i8 %conv, i8* %lbrack, align 1
  %2 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type1 = getelementptr inbounds %struct.op, %struct.op* %2, i32 0, i32 4
  %bf.load2 = load i16, i16* %op_type1, align 8
  %bf.clear3 = and i16 %bf.load2, 511
  %bf.cast4 = zext i16 %bf.clear3 to i32
  %cmp5 = icmp eq i32 %bf.cast4, 151
  %3 = zext i1 %cmp5 to i64
  %cond7 = select i1 %cmp5, i32 125, i32 93
  %conv8 = trunc i32 %cond7 to i8
  store i8 %conv8, i8* %rbrack, align 1
  store %struct.sv* null, %struct.sv** %keysv, align 8
  store i8* null, i8** %key, align 8
  %4 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_private = getelementptr inbounds %struct.op, %struct.op* %4, i32 0, i32 6
  %5 = load i8, i8* %op_private, align 1
  %conv9 = zext i8 %5 to i32
  %and = and i32 %conv9, 4
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  br label %if.end46

if.end:                                           ; preds = %entry
  %6 = load %struct.yy_parser*, %struct.yy_parser** @PL_parser, align 8
  %tobool10 = icmp ne %struct.yy_parser* %6, null
  br i1 %tobool10, label %land.lhs.true, label %if.end14

land.lhs.true:                                    ; preds = %if.end
  %7 = load %struct.yy_parser*, %struct.yy_parser** @PL_parser, align 8
  %error_count = getelementptr inbounds %struct.yy_parser, %struct.yy_parser* %7, i32 0, i32 44
  %8 = load i8, i8* %error_count, align 1
  %conv11 = zext i8 %8 to i32
  %tobool12 = icmp ne i32 %conv11, 0
  br i1 %tobool12, label %if.then13, label %if.end14

if.then13:                                        ; preds = %land.lhs.true
  br label %if.end46

if.end14:                                         ; preds = %land.lhs.true, %if.end
  %9 = load %struct.op*, %struct.op** %o.addr, align 8
  %10 = bitcast %struct.op* %9 to %struct.listop*
  %op_first = getelementptr inbounds %struct.listop, %struct.listop* %10, i32 0, i32 7
  %11 = load %struct.op*, %struct.op** %op_first, align 8
  store %struct.op* %11, %struct.op** %kid, align 8
  %12 = load %struct.op*, %struct.op** %kid, align 8
  %op_sibling = getelementptr inbounds %struct.op, %struct.op* %12, i32 0, i32 1
  %13 = load %struct.op*, %struct.op** %op_sibling, align 8
  %add.ptr = getelementptr inbounds %struct.op, %struct.op* %13, i64 0
  store %struct.op* %add.ptr, %struct.op** %kid, align 8
  %14 = load %struct.op*, %struct.op** %kid, align 8
  %op_type15 = getelementptr inbounds %struct.op, %struct.op* %14, i32 0, i32 4
  %bf.load16 = load i16, i16* %op_type15, align 8
  %bf.clear17 = and i16 %bf.load16, 511
  %bf.cast18 = zext i16 %bf.clear17 to i32
  switch i32 %bf.cast18, label %sw.epilog [
    i32 24, label %sw.bb
    i32 25, label %sw.bb
    i32 26, label %sw.bb
    i32 31, label %sw.bb
    i32 135, label %sw.bb
    i32 144, label %sw.bb
    i32 145, label %sw.bb
    i32 146, label %sw.bb
    i32 156, label %sw.bb
    i32 158, label %sw.bb
    i32 167, label %sw.bb
    i32 168, label %sw.bb
    i32 185, label %sw.bb
    i32 188, label %sw.bb
    i32 264, label %sw.bb
    i32 265, label %sw.bb
    i32 306, label %sw.bb
    i32 314, label %sw.bb
    i32 323, label %sw.bb
    i32 324, label %sw.bb
    i32 325, label %sw.bb
    i32 342, label %sw.bb
    i32 381, label %sw.bb
    i32 382, label %sw.bb
    i32 383, label %sw.bb
  ]

sw.bb:                                            ; preds = %if.end14, %if.end14, %if.end14, %if.end14, %if.end14, %if.end14, %if.end14, %if.end14, %if.end14, %if.end14, %if.end14, %if.end14, %if.end14, %if.end14, %if.end14, %if.end14, %if.end14, %if.end14, %if.end14, %if.end14, %if.end14, %if.end14, %if.end14, %if.end14, %if.end14
  br label %if.end46

sw.epilog:                                        ; preds = %if.end14
  %15 = load %struct.op*, %struct.op** %kid, align 8
  %op_type19 = getelementptr inbounds %struct.op, %struct.op* %15, i32 0, i32 4
  %bf.load20 = load i16, i16* %op_type19, align 8
  %bf.clear21 = and i16 %bf.load20, 511
  %bf.cast22 = zext i16 %bf.clear21 to i32
  %cmp23 = icmp eq i32 %bf.cast22, 0
  br i1 %cmp23, label %land.lhs.true25, label %if.end29

land.lhs.true25:                                  ; preds = %sw.epilog
  %16 = load %struct.op*, %struct.op** %kid, align 8
  %op_targ = getelementptr inbounds %struct.op, %struct.op* %16, i32 0, i32 3
  %17 = load i64, i64* %op_targ, align 8
  %cmp26 = icmp eq i64 %17, 158
  br i1 %cmp26, label %if.then28, label %if.end29

if.then28:                                        ; preds = %land.lhs.true25
  br label %if.end46

if.end29:                                         ; preds = %land.lhs.true25, %sw.epilog
  %18 = load %struct.op*, %struct.op** %kid, align 8
  %op_sibling30 = getelementptr inbounds %struct.op, %struct.op* %18, i32 0, i32 1
  %19 = load %struct.op*, %struct.op** %op_sibling30, align 8
  %add.ptr31 = getelementptr inbounds %struct.op, %struct.op* %19, i64 0
  %call = call %struct.sv* @S_op_varname(%struct.op* %add.ptr31)
  store %struct.sv* %call, %struct.sv** %name, align 8
  %20 = load %struct.sv*, %struct.sv** %name, align 8
  %tobool32 = icmp ne %struct.sv* %20, null
  br i1 %tobool32, label %if.end34, label %if.then33

if.then33:                                        ; preds = %if.end29
  br label %if.end46

if.end34:                                         ; preds = %if.end29
  %21 = load %struct.op*, %struct.op** %kid, align 8
  call void @S_op_pretty(%struct.op* %21, %struct.sv** %keysv, i8** %key)
  %22 = load %struct.sv*, %struct.sv** %name, align 8
  %23 = load %struct.sv*, %struct.sv** %name, align 8
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %23, i32 0, i32 3
  %svu_pv = bitcast %union.anon* %sv_u to i8**
  %24 = load i8*, i8** %svu_pv, align 8
  %add.ptr35 = getelementptr inbounds i8, i8* %24, i64 1
  call void @Perl_sv_chop(%struct.sv* %22, i8* %add.ptr35)
  %25 = load i8*, i8** %key, align 8
  %tobool36 = icmp ne i8* %25, null
  br i1 %tobool36, label %if.then37, label %if.else

if.then37:                                        ; preds = %if.end34
  %26 = load %struct.sv*, %struct.sv** %name, align 8
  %27 = bitcast %struct.sv* %26 to i8*
  %28 = load i8, i8* %lbrack, align 1
  %conv38 = sext i8 %28 to i32
  %29 = load i8*, i8** %key, align 8
  %30 = load i8, i8* %rbrack, align 1
  %conv39 = sext i8 %30 to i32
  %31 = load %struct.sv*, %struct.sv** %name, align 8
  %32 = bitcast %struct.sv* %31 to i8*
  %33 = load i8, i8* %lbrack, align 1
  %conv40 = sext i8 %33 to i32
  %34 = load i8*, i8** %key, align 8
  %35 = load i8, i8* %rbrack, align 1
  %conv41 = sext i8 %35 to i32
  call void (i32, i8*, ...) @Perl_warner(i32 28, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.168, i64 0, i64 0), i8* %27, i32 %conv38, i8* %29, i32 %conv39, i8* %32, i32 %conv40, i8* %34, i32 %conv41)
  br label %if.end46

if.else:                                          ; preds = %if.end34
  %36 = load %struct.sv*, %struct.sv** %name, align 8
  %37 = bitcast %struct.sv* %36 to i8*
  %38 = load i8, i8* %lbrack, align 1
  %conv42 = sext i8 %38 to i32
  %39 = load %struct.sv*, %struct.sv** %keysv, align 8
  %40 = bitcast %struct.sv* %39 to i8*
  %41 = load i8, i8* %rbrack, align 1
  %conv43 = sext i8 %41 to i32
  %42 = load %struct.sv*, %struct.sv** %name, align 8
  %43 = bitcast %struct.sv* %42 to i8*
  %44 = load i8, i8* %lbrack, align 1
  %conv44 = sext i8 %44 to i32
  %45 = load %struct.sv*, %struct.sv** %keysv, align 8
  %46 = bitcast %struct.sv* %45 to i8*
  %47 = load i8, i8* %rbrack, align 1
  %conv45 = sext i8 %47 to i32
  call void (i32, i8*, ...) @Perl_warner(i32 28, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.169, i64 0, i64 0), i8* %37, i32 %conv42, i8* %40, i32 %conv43, i8* %43, i32 %conv44, i8* %46, i32 %conv45)
  br label %if.end46

if.end46:                                         ; preds = %if.then, %if.then13, %sw.bb, %if.then28, %if.then33, %if.else, %if.then37
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @S_cant_declare(%struct.op* %o) #0 {
entry:
  %o.addr = alloca %struct.op*, align 8
  %coerce = alloca %union.XOPRETANY, align 8
  store %struct.op* %o, %struct.op** %o.addr, align 8
  %0 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type = getelementptr inbounds %struct.op, %struct.op* %0, i32 0, i32 4
  %bf.load = load i16, i16* %op_type, align 8
  %bf.clear = and i16 %bf.load, 511
  %bf.cast = zext i16 %bf.clear to i32
  %cmp = icmp eq i32 %bf.cast, 0
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %1 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %1, i32 0, i32 5
  %2 = load i8, i8* %op_flags, align 2
  %conv = zext i8 %2 to i32
  %and = and i32 %conv, 132
  %cmp1 = icmp eq i32 %and, 4
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %3 = load %struct.op*, %struct.op** %o.addr, align 8
  %4 = bitcast %struct.op* %3 to %struct.unop*
  %op_first = getelementptr inbounds %struct.unop, %struct.unop* %4, i32 0, i32 7
  %5 = load %struct.op*, %struct.op** %op_first, align 8
  store %struct.op* %5, %struct.op** %o.addr, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %6 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type3 = getelementptr inbounds %struct.op, %struct.op* %6, i32 0, i32 4
  %bf.load4 = load i16, i16* %op_type3, align 8
  %bf.clear5 = and i16 %bf.load4, 511
  %bf.cast6 = zext i16 %bf.clear5 to i32
  %cmp7 = icmp eq i32 %bf.cast6, 0
  br i1 %cmp7, label %land.lhs.true9, label %cond.false

land.lhs.true9:                                   ; preds = %if.end
  %7 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_flags10 = getelementptr inbounds %struct.op, %struct.op* %7, i32 0, i32 5
  %8 = load i8, i8* %op_flags10, align 2
  %conv11 = zext i8 %8 to i32
  %and12 = and i32 %conv11, 128
  %tobool = icmp ne i32 %and12, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true9
  br label %cond.end25

cond.false:                                       ; preds = %land.lhs.true9, %if.end
  %9 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type13 = getelementptr inbounds %struct.op, %struct.op* %9, i32 0, i32 4
  %bf.load14 = load i16, i16* %op_type13, align 8
  %bf.clear15 = and i16 %bf.load14, 511
  %bf.cast16 = zext i16 %bf.clear15 to i32
  %cmp17 = icmp eq i32 %bf.cast16, 380
  br i1 %cmp17, label %cond.true19, label %cond.false20

cond.true19:                                      ; preds = %cond.false
  %10 = load %struct.op*, %struct.op** %o.addr, align 8
  %call = call i8* @Perl_custom_op_get_field(%struct.op* %10, i32 2)
  %coerce.dive = getelementptr inbounds %union.XOPRETANY, %union.XOPRETANY* %coerce, i32 0, i32 0
  store i8* %call, i8** %coerce.dive, align 8
  %xop_desc = bitcast %union.XOPRETANY* %coerce to i8**
  %11 = load i8*, i8** %xop_desc, align 8
  br label %cond.end

cond.false20:                                     ; preds = %cond.false
  %12 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type21 = getelementptr inbounds %struct.op, %struct.op* %12, i32 0, i32 4
  %bf.load22 = load i16, i16* %op_type21, align 8
  %bf.clear23 = and i16 %bf.load22, 511
  %bf.cast24 = zext i16 %bf.clear23 to i32
  %idxprom = zext i32 %bf.cast24 to i64
  %arrayidx = getelementptr inbounds [0 x i8*], [0 x i8*]* @PL_op_desc, i64 0, i64 %idxprom
  %13 = load i8*, i8** %arrayidx, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false20, %cond.true19
  %cond = phi i8* [ %11, %cond.true19 ], [ %13, %cond.false20 ]
  br label %cond.end25

cond.end25:                                       ; preds = %cond.end, %cond.true
  %cond26 = phi i8* [ getelementptr inbounds ([9 x i8], [9 x i8]* @.str.28, i64 0, i64 0), %cond.true ], [ %cond, %cond.end ]
  %14 = load %struct.yy_parser*, %struct.yy_parser** @PL_parser, align 8
  %in_my = getelementptr inbounds %struct.yy_parser, %struct.yy_parser* %14, i32 0, i32 42
  %15 = load i16, i16* %in_my, align 4
  %conv27 = zext i16 %15 to i32
  %cmp28 = icmp eq i32 %conv27, 143
  br i1 %cmp28, label %cond.true30, label %cond.false31

cond.true30:                                      ; preds = %cond.end25
  br label %cond.end37

cond.false31:                                     ; preds = %cond.end25
  %16 = load %struct.yy_parser*, %struct.yy_parser** @PL_parser, align 8
  %in_my32 = getelementptr inbounds %struct.yy_parser, %struct.yy_parser* %16, i32 0, i32 42
  %17 = load i16, i16* %in_my32, align 4
  %conv33 = zext i16 %17 to i32
  %cmp34 = icmp eq i32 %conv33, 212
  %18 = zext i1 %cmp34 to i64
  %cond36 = select i1 %cmp34, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i64 0, i64 0)
  br label %cond.end37

cond.end37:                                       ; preds = %cond.false31, %cond.true30
  %cond38 = phi i8* [ getelementptr inbounds ([4 x i8], [4 x i8]* @.str.47, i64 0, i64 0), %cond.true30 ], [ %cond36, %cond.false31 ]
  %call39 = call i8* (i8*, ...) @Perl_form(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.173, i64 0, i64 0), i8* %cond26, i8* %cond38)
  %call40 = call i32 @Perl_yyerror(i8* %call39)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @S_apply_attrs_my(%struct.hv* %stash, %struct.op* %target, %struct.op* %attrs, %struct.op** %imopsp) #0 {
entry:
  %stash.addr = alloca %struct.hv*, align 8
  %target.addr = alloca %struct.op*, align 8
  %attrs.addr = alloca %struct.op*, align 8
  %imopsp.addr = alloca %struct.op**, align 8
  %pack = alloca %struct.op*, align 8
  %imop = alloca %struct.op*, align 8
  %arg = alloca %struct.op*, align 8
  %meth = alloca %struct.sv*, align 8
  %stashsv = alloca %struct.sv*, align 8
  %svp = alloca %struct.sv**, align 8
  store %struct.hv* %stash, %struct.hv** %stash.addr, align 8
  store %struct.op* %target, %struct.op** %target.addr, align 8
  store %struct.op* %attrs, %struct.op** %attrs.addr, align 8
  store %struct.op** %imopsp, %struct.op*** %imopsp.addr, align 8
  %0 = load %struct.op*, %struct.op** %attrs.addr, align 8
  %tobool = icmp ne %struct.op* %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct.gv*, %struct.gv** @PL_incgv, align 8
  %sv_u = getelementptr inbounds %struct.gv, %struct.gv* %1, i32 0, i32 3
  %svu_gp = bitcast %union.anon.3* %sv_u to %struct.gp**
  %2 = load %struct.gp*, %struct.gp** %svu_gp, align 8
  %add.ptr = getelementptr inbounds %struct.gp, %struct.gp* %2, i64 0
  %gp_hv = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr, i32 0, i32 5
  %3 = load %struct.hv*, %struct.hv** %gp_hv, align 8
  %tobool1 = icmp ne %struct.hv* %3, null
  br i1 %tobool1, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end
  %4 = load %struct.gv*, %struct.gv** @PL_incgv, align 8
  %sv_u2 = getelementptr inbounds %struct.gv, %struct.gv* %4, i32 0, i32 3
  %svu_gp3 = bitcast %union.anon.3* %sv_u2 to %struct.gp**
  %5 = load %struct.gp*, %struct.gp** %svu_gp3, align 8
  %add.ptr4 = getelementptr inbounds %struct.gp, %struct.gp* %5, i64 0
  %gp_hv5 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr4, i32 0, i32 5
  %6 = load %struct.hv*, %struct.hv** %gp_hv5, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.end
  %7 = load %struct.gv*, %struct.gv** @PL_incgv, align 8
  %call = call %struct.gv* @Perl_gv_add_by_type(%struct.gv* %7, i32 12)
  %sv_u6 = getelementptr inbounds %struct.gv, %struct.gv* %call, i32 0, i32 3
  %svu_gp7 = bitcast %union.anon.3* %sv_u6 to %struct.gp**
  %8 = load %struct.gp*, %struct.gp** %svu_gp7, align 8
  %add.ptr8 = getelementptr inbounds %struct.gp, %struct.gp* %8, i64 0
  %gp_hv9 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr8, i32 0, i32 5
  %9 = load %struct.hv*, %struct.hv** %gp_hv9, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.hv* [ %6, %cond.true ], [ %9, %cond.false ]
  %call10 = call i8* @Perl_hv_common(%struct.hv* %cond, %struct.sv* null, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.174, i64 0, i64 0), i64 13, i32 0, i32 32, %struct.sv* null, i32 0)
  %10 = bitcast i8* %call10 to %struct.sv**
  store %struct.sv** %10, %struct.sv*** %svp, align 8
  %11 = load %struct.sv**, %struct.sv*** %svp, align 8
  %tobool11 = icmp ne %struct.sv** %11, null
  br i1 %tobool11, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %cond.end
  %12 = load %struct.sv**, %struct.sv*** %svp, align 8
  %13 = load %struct.sv*, %struct.sv** %12, align 8
  %cmp = icmp ne %struct.sv* %13, @PL_sv_undef
  br i1 %cmp, label %if.then12, label %if.else

if.then12:                                        ; preds = %land.lhs.true
  br label %if.end14

if.else:                                          ; preds = %land.lhs.true, %cond.end
  %call13 = call %struct.sv* @Perl_newSVpvn(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.36, i64 0, i64 0), i64 10)
  call void (i32, %struct.sv*, %struct.sv*, ...) @Perl_load_module(i32 2, %struct.sv* %call13, %struct.sv* null)
  br label %if.end14

if.end14:                                         ; preds = %if.else, %if.then12
  %call15 = call %struct.sv* @Perl_newSVpvn(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.36, i64 0, i64 0), i64 10)
  %call16 = call %struct.op* @Perl_newSVOP(i32 5, i32 0, %struct.sv* %call15)
  store %struct.op* %call16, %struct.op** %pack, align 8
  %14 = load %struct.hv*, %struct.hv** %stash.addr, align 8
  %tobool17 = icmp ne %struct.hv* %14, null
  br i1 %tobool17, label %cond.true18, label %cond.false54

cond.true18:                                      ; preds = %if.end14
  %15 = load %struct.hv*, %struct.hv** %stash.addr, align 8
  %sv_flags = getelementptr inbounds %struct.hv, %struct.hv* %15, i32 0, i32 2
  %16 = load i32, i32* %sv_flags, align 4
  %and = and i32 %16, 33554432
  %tobool19 = icmp ne i32 %and, 0
  br i1 %tobool19, label %land.lhs.true20, label %cond.false50

land.lhs.true20:                                  ; preds = %cond.true18
  %17 = load %struct.hv*, %struct.hv** %stash.addr, align 8
  %sv_u21 = getelementptr inbounds %struct.hv, %struct.hv* %17, i32 0, i32 3
  %svu_hash = bitcast %union.anon.4* %sv_u21 to %struct.he***
  %18 = load %struct.he**, %struct.he*** %svu_hash, align 8
  %19 = load %struct.hv*, %struct.hv** %stash.addr, align 8
  %sv_any = getelementptr inbounds %struct.hv, %struct.hv* %19, i32 0, i32 0
  %20 = load %struct.xpvhv*, %struct.xpvhv** %sv_any, align 8
  %xhv_max = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %20, i32 0, i32 3
  %21 = load i64, i64* %xhv_max, align 8
  %add = add i64 %21, 1
  %arrayidx = getelementptr inbounds %struct.he*, %struct.he** %18, i64 %add
  %22 = bitcast %struct.he** %arrayidx to %struct.xpvhv_aux*
  %xhv_name_u = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %22, i32 0, i32 0
  %xhvnameu_name = bitcast %union._xhvnameu* %xhv_name_u to %struct.hek**
  %23 = load %struct.hek*, %struct.hek** %xhvnameu_name, align 8
  %tobool22 = icmp ne %struct.hek* %23, null
  br i1 %tobool22, label %cond.true23, label %cond.false50

cond.true23:                                      ; preds = %land.lhs.true20
  %24 = load %struct.hv*, %struct.hv** %stash.addr, align 8
  %sv_u24 = getelementptr inbounds %struct.hv, %struct.hv* %24, i32 0, i32 3
  %svu_hash25 = bitcast %union.anon.4* %sv_u24 to %struct.he***
  %25 = load %struct.he**, %struct.he*** %svu_hash25, align 8
  %26 = load %struct.hv*, %struct.hv** %stash.addr, align 8
  %sv_any26 = getelementptr inbounds %struct.hv, %struct.hv* %26, i32 0, i32 0
  %27 = load %struct.xpvhv*, %struct.xpvhv** %sv_any26, align 8
  %xhv_max27 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %27, i32 0, i32 3
  %28 = load i64, i64* %xhv_max27, align 8
  %add28 = add i64 %28, 1
  %arrayidx29 = getelementptr inbounds %struct.he*, %struct.he** %25, i64 %add28
  %29 = bitcast %struct.he** %arrayidx29 to %struct.xpvhv_aux*
  %xhv_name_count = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %29, i32 0, i32 4
  %30 = load i32, i32* %xhv_name_count, align 4
  %tobool30 = icmp ne i32 %30, 0
  br i1 %tobool30, label %cond.true31, label %cond.false39

cond.true31:                                      ; preds = %cond.true23
  %31 = load %struct.hv*, %struct.hv** %stash.addr, align 8
  %sv_u32 = getelementptr inbounds %struct.hv, %struct.hv* %31, i32 0, i32 3
  %svu_hash33 = bitcast %union.anon.4* %sv_u32 to %struct.he***
  %32 = load %struct.he**, %struct.he*** %svu_hash33, align 8
  %33 = load %struct.hv*, %struct.hv** %stash.addr, align 8
  %sv_any34 = getelementptr inbounds %struct.hv, %struct.hv* %33, i32 0, i32 0
  %34 = load %struct.xpvhv*, %struct.xpvhv** %sv_any34, align 8
  %xhv_max35 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %34, i32 0, i32 3
  %35 = load i64, i64* %xhv_max35, align 8
  %add36 = add i64 %35, 1
  %arrayidx37 = getelementptr inbounds %struct.he*, %struct.he** %32, i64 %add36
  %36 = bitcast %struct.he** %arrayidx37 to %struct.xpvhv_aux*
  %xhv_name_u38 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %36, i32 0, i32 0
  %xhvnameu_names = bitcast %union._xhvnameu* %xhv_name_u38 to %struct.hek***
  %37 = load %struct.hek**, %struct.hek*** %xhvnameu_names, align 8
  %38 = load %struct.hek*, %struct.hek** %37, align 8
  br label %cond.end48

cond.false39:                                     ; preds = %cond.true23
  %39 = load %struct.hv*, %struct.hv** %stash.addr, align 8
  %sv_u40 = getelementptr inbounds %struct.hv, %struct.hv* %39, i32 0, i32 3
  %svu_hash41 = bitcast %union.anon.4* %sv_u40 to %struct.he***
  %40 = load %struct.he**, %struct.he*** %svu_hash41, align 8
  %41 = load %struct.hv*, %struct.hv** %stash.addr, align 8
  %sv_any42 = getelementptr inbounds %struct.hv, %struct.hv* %41, i32 0, i32 0
  %42 = load %struct.xpvhv*, %struct.xpvhv** %sv_any42, align 8
  %xhv_max43 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %42, i32 0, i32 3
  %43 = load i64, i64* %xhv_max43, align 8
  %add44 = add i64 %43, 1
  %arrayidx45 = getelementptr inbounds %struct.he*, %struct.he** %40, i64 %add44
  %44 = bitcast %struct.he** %arrayidx45 to %struct.xpvhv_aux*
  %xhv_name_u46 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %44, i32 0, i32 0
  %xhvnameu_name47 = bitcast %union._xhvnameu* %xhv_name_u46 to %struct.hek**
  %45 = load %struct.hek*, %struct.hek** %xhvnameu_name47, align 8
  br label %cond.end48

cond.end48:                                       ; preds = %cond.false39, %cond.true31
  %cond49 = phi %struct.hek* [ %38, %cond.true31 ], [ %45, %cond.false39 ]
  br label %cond.end51

cond.false50:                                     ; preds = %land.lhs.true20, %cond.true18
  br label %cond.end51

cond.end51:                                       ; preds = %cond.false50, %cond.end48
  %cond52 = phi %struct.hek* [ %cond49, %cond.end48 ], [ null, %cond.false50 ]
  %call53 = call %struct.sv* @Perl_newSVhek(%struct.hek* %cond52)
  br label %cond.end55

cond.false54:                                     ; preds = %if.end14
  br label %cond.end55

cond.end55:                                       ; preds = %cond.false54, %cond.end51
  %cond56 = phi %struct.sv* [ %call53, %cond.end51 ], [ @PL_sv_no, %cond.false54 ]
  store %struct.sv* %cond56, %struct.sv** %stashsv, align 8
  %call57 = call %struct.op* @Perl_newOP(i32 9, i32 0)
  store %struct.op* %call57, %struct.op** %arg, align 8
  %46 = load %struct.op*, %struct.op** %target.addr, align 8
  %op_targ = getelementptr inbounds %struct.op, %struct.op* %46, i32 0, i32 3
  %47 = load i64, i64* %op_targ, align 8
  %48 = load %struct.op*, %struct.op** %arg, align 8
  %op_targ58 = getelementptr inbounds %struct.op, %struct.op* %48, i32 0, i32 3
  store i64 %47, i64* %op_targ58, align 8
  %49 = load %struct.sv*, %struct.sv** %stashsv, align 8
  %call59 = call %struct.op* @Perl_newSVOP(i32 5, i32 0, %struct.sv* %49)
  %50 = load %struct.op*, %struct.op** %arg, align 8
  %call60 = call %struct.op* @Perl_newUNOP(i32 20, i32 0, %struct.op* %50)
  %51 = load %struct.op*, %struct.op** %attrs.addr, align 8
  %call61 = call %struct.op* @S_dup_attrlist(%struct.op* %51)
  %call62 = call %struct.op* @Perl_op_prepend_elem(i32 158, %struct.op* %call60, %struct.op* %call61)
  %call63 = call %struct.op* @Perl_op_prepend_elem(i32 158, %struct.op* %call59, %struct.op* %call62)
  store %struct.op* %call63, %struct.op** %arg, align 8
  %call64 = call %struct.sv* @Perl_newSVpvn_share(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.55, i64 0, i64 0), i32 6, i32 0)
  store %struct.sv* %call64, %struct.sv** %meth, align 8
  %52 = load %struct.op*, %struct.op** %pack, align 8
  %53 = load %struct.op*, %struct.op** %arg, align 8
  %call65 = call %struct.op* @Perl_op_prepend_elem(i32 158, %struct.op* %52, %struct.op* %53)
  %54 = load %struct.sv*, %struct.sv** %meth, align 8
  %call66 = call %struct.op* @Perl_newMETHOP_named(i32 210, i32 0, %struct.sv* %54)
  %call67 = call %struct.op* @Perl_op_append_elem(i32 158, %struct.op* %call65, %struct.op* %call66)
  %call68 = call %struct.op* @Perl_op_convert_list(i32 185, i32 193, %struct.op* %call67)
  store %struct.op* %call68, %struct.op** %imop, align 8
  %55 = load %struct.op**, %struct.op*** %imopsp.addr, align 8
  %56 = load %struct.op*, %struct.op** %55, align 8
  %57 = load %struct.op*, %struct.op** %imop, align 8
  %call69 = call %struct.op* @Perl_op_append_elem(i32 158, %struct.op* %56, %struct.op* %57)
  %58 = load %struct.op**, %struct.op*** %imopsp.addr, align 8
  store %struct.op* %call69, %struct.op** %58, align 8
  br label %return

return:                                           ; preds = %cond.end55, %if.then
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.op* @S_dup_attrlist(%struct.op* %o) #0 {
entry:
  %o.addr = alloca %struct.op*, align 8
  %rop = alloca %struct.op*, align 8
  store %struct.op* %o, %struct.op** %o.addr, align 8
  %0 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type = getelementptr inbounds %struct.op, %struct.op* %0, i32 0, i32 4
  %bf.load = load i16, i16* %op_type, align 8
  %bf.clear = and i16 %bf.load, 511
  %bf.cast = zext i16 %bf.clear to i32
  %cmp = icmp eq i32 %bf.cast, 5
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %1, i32 0, i32 5
  %2 = load i8, i8* %op_flags, align 2
  %conv = zext i8 %2 to i32
  %3 = load %struct.op*, %struct.op** %o.addr, align 8
  %4 = bitcast %struct.op* %3 to %struct.svop*
  %op_sv = getelementptr inbounds %struct.svop, %struct.svop* %4, i32 0, i32 7
  %5 = load %struct.sv*, %struct.sv** %op_sv, align 8
  %6 = bitcast %struct.sv* %5 to i8*
  %7 = bitcast i8* %6 to %struct.sv*
  %call = call %struct.sv* @S_SvREFCNT_inc_NN(%struct.sv* %7)
  %call1 = call %struct.op* @Perl_newSVOP(i32 5, i32 %conv, %struct.sv* %call)
  store %struct.op* %call1, %struct.op** %rop, align 8
  br label %if.end15

if.else:                                          ; preds = %entry
  store %struct.op* null, %struct.op** %rop, align 8
  %8 = load %struct.op*, %struct.op** %o.addr, align 8
  %9 = bitcast %struct.op* %8 to %struct.listop*
  %op_first = getelementptr inbounds %struct.listop, %struct.listop* %9, i32 0, i32 7
  %10 = load %struct.op*, %struct.op** %op_first, align 8
  store %struct.op* %10, %struct.op** %o.addr, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.else
  %11 = load %struct.op*, %struct.op** %o.addr, align 8
  %tobool = icmp ne %struct.op* %11, null
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %12 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_type2 = getelementptr inbounds %struct.op, %struct.op* %12, i32 0, i32 4
  %bf.load3 = load i16, i16* %op_type2, align 8
  %bf.clear4 = and i16 %bf.load3, 511
  %bf.cast5 = zext i16 %bf.clear4 to i32
  %cmp6 = icmp eq i32 %bf.cast5, 5
  br i1 %cmp6, label %if.then8, label %if.end

if.then8:                                         ; preds = %for.body
  %13 = load %struct.op*, %struct.op** %rop, align 8
  %14 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_flags9 = getelementptr inbounds %struct.op, %struct.op* %14, i32 0, i32 5
  %15 = load i8, i8* %op_flags9, align 2
  %conv10 = zext i8 %15 to i32
  %16 = load %struct.op*, %struct.op** %o.addr, align 8
  %17 = bitcast %struct.op* %16 to %struct.svop*
  %op_sv11 = getelementptr inbounds %struct.svop, %struct.svop* %17, i32 0, i32 7
  %18 = load %struct.sv*, %struct.sv** %op_sv11, align 8
  %19 = bitcast %struct.sv* %18 to i8*
  %20 = bitcast i8* %19 to %struct.sv*
  %call12 = call %struct.sv* @S_SvREFCNT_inc_NN(%struct.sv* %20)
  %call13 = call %struct.op* @Perl_newSVOP(i32 5, i32 %conv10, %struct.sv* %call12)
  %call14 = call %struct.op* @Perl_op_append_elem(i32 158, %struct.op* %13, %struct.op* %call13)
  store %struct.op* %call14, %struct.op** %rop, align 8
  br label %if.end

if.end:                                           ; preds = %if.then8, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %21 = load %struct.op*, %struct.op** %o.addr, align 8
  %op_sibling = getelementptr inbounds %struct.op, %struct.op* %21, i32 0, i32 1
  %22 = load %struct.op*, %struct.op** %op_sibling, align 8
  %add.ptr = getelementptr inbounds %struct.op, %struct.op* %22, i64 0
  store %struct.op* %add.ptr, %struct.op** %o.addr, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end15

if.end15:                                         ; preds = %for.end, %if.then
  %23 = load %struct.op*, %struct.op** %rop, align 8
  ret %struct.op* %23
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.sv* @S_SvREFCNT_inc_NN(%struct.sv* %sv) #0 {
entry:
  %sv.addr = alloca %struct.sv*, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_refcnt = getelementptr inbounds %struct.sv, %struct.sv* %0, i32 0, i32 1
  %1 = load i32, i32* %sv_refcnt, align 8
  %inc = add i32 %1, 1
  store i32 %inc, i32* %sv_refcnt, align 8
  %2 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  ret %struct.sv* %2
}

declare dso_local i32 @Perl_mg_size(%struct.sv*) #3

declare dso_local %struct.op* @Perl_pp_pushmark() #3

declare dso_local %struct.op* @Perl_pp_anonlist() #3

declare dso_local %struct.context* @Perl_create_eval_scope(i32) #3

; Function Attrs: nounwind returns_twice
declare dso_local i32 @__sigsetjmp(%struct.__jmp_buf_tag*, i32) #6

declare dso_local void @Perl_pad_swipe(i64, i1 zeroext) #3

declare dso_local i32 @Perl_mg_free(%struct.sv*) #3

declare dso_local void @Perl_delete_eval_scope() #3

declare dso_local i8* @Perl_bytes_to_utf8(i8*, i64*) #3

declare dso_local i8* @Perl_safesysmalloc(i64) #3

declare dso_local i64 @Perl_utf8n_to_uvchr(i8*, i64, i64*, i32) #3

declare dso_local void @qsort(i8*, i64, i64, i32 (i8*, i8*)*) #3

; Function Attrs: noinline nounwind uwtable
define internal i32 @uvcompare(i8* %a, i8* %b) #0 {
entry:
  %retval = alloca i32, align 4
  %a.addr = alloca i8*, align 8
  %b.addr = alloca i8*, align 8
  store i8* %a, i8** %a.addr, align 8
  store i8* %b, i8** %b.addr, align 8
  %0 = load i8*, i8** %a.addr, align 8
  %1 = bitcast i8* %0 to i64*
  %2 = load i64, i64* %1, align 8
  %3 = load i8*, i8** %b.addr, align 8
  %4 = bitcast i8* %3 to i64*
  %5 = load i64, i64* %4, align 8
  %cmp = icmp ult i64 %2, %5
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 -1, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %6 = load i8*, i8** %a.addr, align 8
  %7 = bitcast i8* %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = load i8*, i8** %b.addr, align 8
  %10 = bitcast i8* %9 to i64*
  %11 = load i64, i64* %10, align 8
  %cmp1 = icmp ugt i64 %8, %11
  br i1 %cmp1, label %if.then2, label %if.end3

if.then2:                                         ; preds = %if.end
  store i32 1, i32* %retval, align 4
  br label %return

if.end3:                                          ; preds = %if.end
  %12 = load i8*, i8** %a.addr, align 8
  %13 = bitcast i8* %12 to i64*
  %add.ptr = getelementptr inbounds i64, i64* %13, i64 1
  %14 = load i64, i64* %add.ptr, align 8
  %15 = load i8*, i8** %b.addr, align 8
  %16 = bitcast i8* %15 to i64*
  %17 = load i64, i64* %16, align 8
  %add = add i64 %17, 1
  %cmp4 = icmp ult i64 %14, %add
  br i1 %cmp4, label %if.then5, label %if.end6

if.then5:                                         ; preds = %if.end3
  store i32 -1, i32* %retval, align 4
  br label %return

if.end6:                                          ; preds = %if.end3
  %18 = load i8*, i8** %a.addr, align 8
  %19 = bitcast i8* %18 to i64*
  %add.ptr7 = getelementptr inbounds i64, i64* %19, i64 1
  %20 = load i64, i64* %add.ptr7, align 8
  %21 = load i8*, i8** %b.addr, align 8
  %22 = bitcast i8* %21 to i64*
  %23 = load i64, i64* %22, align 8
  %add8 = add i64 %23, 1
  %cmp9 = icmp ugt i64 %20, %add8
  br i1 %cmp9, label %if.then10, label %if.end11

if.then10:                                        ; preds = %if.end6
  store i32 1, i32* %retval, align 4
  br label %return

if.end11:                                         ; preds = %if.end6
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end11, %if.then10, %if.then5, %if.then2, %if.then
  %24 = load i32, i32* %retval, align 4
  ret i32 %24
}

declare dso_local i8* @Perl_uvoffuni_to_utf8_flags(i8*, i64, i64) #3

declare dso_local %struct.sv* @Perl_swash_init(i8*, i8*, %struct.sv*, i32, i32) #3

; Function Attrs: noinline nounwind uwtable
define internal zeroext i1 @PadnameIN_SCOPE(%struct.padname* %pn, i32 %seq) #0 {
entry:
  %retval = alloca i1, align 1
  %pn.addr = alloca %struct.padname*, align 8
  %seq.addr = alloca i32, align 4
  store %struct.padname* %pn, %struct.padname** %pn.addr, align 8
  store i32 %seq, i32* %seq.addr, align 4
  %0 = load %struct.padname*, %struct.padname** %pn.addr, align 8
  %xpadn_low = getelementptr inbounds %struct.padname, %struct.padname* %0, i32 0, i32 3
  %1 = load i32, i32* %xpadn_low, align 8
  %cmp = icmp eq i32 %1, -1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i1 false, i1* %retval, align 1
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct.padname*, %struct.padname** %pn.addr, align 8
  %xpadn_high = getelementptr inbounds %struct.padname, %struct.padname* %2, i32 0, i32 4
  %3 = load i32, i32* %xpadn_high, align 4
  %cmp1 = icmp eq i32 %3, -1
  br i1 %cmp1, label %if.then2, label %if.else

if.then2:                                         ; preds = %if.end
  %4 = load i32, i32* %seq.addr, align 4
  %5 = load %struct.padname*, %struct.padname** %pn.addr, align 8
  %xpadn_low3 = getelementptr inbounds %struct.padname, %struct.padname* %5, i32 0, i32 3
  %6 = load i32, i32* %xpadn_low3, align 8
  %cmp4 = icmp ugt i32 %4, %6
  br i1 %cmp4, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then2
  %7 = load i32, i32* %seq.addr, align 4
  %8 = load %struct.padname*, %struct.padname** %pn.addr, align 8
  %xpadn_low5 = getelementptr inbounds %struct.padname, %struct.padname* %8, i32 0, i32 3
  %9 = load i32, i32* %xpadn_low5, align 8
  %sub = sub i32 %7, %9
  %cmp6 = icmp ult i32 %sub, 2147483647
  br i1 %cmp6, label %if.then10, label %if.end11

cond.false:                                       ; preds = %if.then2
  %10 = load %struct.padname*, %struct.padname** %pn.addr, align 8
  %xpadn_low7 = getelementptr inbounds %struct.padname, %struct.padname* %10, i32 0, i32 3
  %11 = load i32, i32* %xpadn_low7, align 8
  %12 = load i32, i32* %seq.addr, align 4
  %sub8 = sub i32 %11, %12
  %cmp9 = icmp ugt i32 %sub8, 2147483647
  br i1 %cmp9, label %if.then10, label %if.end11

if.then10:                                        ; preds = %cond.false, %cond.true
  store i1 true, i1* %retval, align 1
  br label %return

if.end11:                                         ; preds = %cond.false, %cond.true
  br label %if.end27

if.else:                                          ; preds = %if.end
  %13 = load %struct.padname*, %struct.padname** %pn.addr, align 8
  %xpadn_low12 = getelementptr inbounds %struct.padname, %struct.padname* %13, i32 0, i32 3
  %14 = load i32, i32* %xpadn_low12, align 8
  %15 = load %struct.padname*, %struct.padname** %pn.addr, align 8
  %xpadn_high13 = getelementptr inbounds %struct.padname, %struct.padname* %15, i32 0, i32 4
  %16 = load i32, i32* %xpadn_high13, align 4
  %cmp14 = icmp ugt i32 %14, %16
  br i1 %cmp14, label %cond.true15, label %cond.false20

cond.true15:                                      ; preds = %if.else
  %17 = load i32, i32* %seq.addr, align 4
  %18 = load %struct.padname*, %struct.padname** %pn.addr, align 8
  %xpadn_low16 = getelementptr inbounds %struct.padname, %struct.padname* %18, i32 0, i32 3
  %19 = load i32, i32* %xpadn_low16, align 8
  %cmp17 = icmp ugt i32 %17, %19
  br i1 %cmp17, label %if.then25, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %cond.true15
  %20 = load i32, i32* %seq.addr, align 4
  %21 = load %struct.padname*, %struct.padname** %pn.addr, align 8
  %xpadn_high18 = getelementptr inbounds %struct.padname, %struct.padname* %21, i32 0, i32 4
  %22 = load i32, i32* %xpadn_high18, align 4
  %cmp19 = icmp ule i32 %20, %22
  br i1 %cmp19, label %if.then25, label %if.end26

cond.false20:                                     ; preds = %if.else
  %23 = load i32, i32* %seq.addr, align 4
  %24 = load %struct.padname*, %struct.padname** %pn.addr, align 8
  %xpadn_low21 = getelementptr inbounds %struct.padname, %struct.padname* %24, i32 0, i32 3
  %25 = load i32, i32* %xpadn_low21, align 8
  %cmp22 = icmp ugt i32 %23, %25
  br i1 %cmp22, label %land.lhs.true, label %if.end26

land.lhs.true:                                    ; preds = %cond.false20
  %26 = load i32, i32* %seq.addr, align 4
  %27 = load %struct.padname*, %struct.padname** %pn.addr, align 8
  %xpadn_high23 = getelementptr inbounds %struct.padname, %struct.padname* %27, i32 0, i32 4
  %28 = load i32, i32* %xpadn_high23, align 4
  %cmp24 = icmp ule i32 %26, %28
  br i1 %cmp24, label %if.then25, label %if.end26

if.then25:                                        ; preds = %land.lhs.true, %lor.lhs.false, %cond.true15
  store i1 true, i1* %retval, align 1
  br label %return

if.end26:                                         ; preds = %land.lhs.true, %cond.false20, %lor.lhs.false
  br label %if.end27

if.end27:                                         ; preds = %if.end26, %if.end11
  store i1 false, i1* %retval, align 1
  br label %return

return:                                           ; preds = %if.end27, %if.then25, %if.then10, %if.then
  %29 = load i1, i1* %retval, align 1
  ret i1 %29
}

declare dso_local void @Perl_sv_setnv(%struct.sv*, double) #3

declare dso_local zeroext i1 @Perl_validate_proto(%struct.sv*, %struct.sv*, i1 zeroext) #3

declare dso_local %struct.gv* @Perl_cvgv_from_hek(%struct.cv*) #3

declare dso_local %struct.stackinfo* @Perl_new_stackinfo(i32, i32) #3

declare dso_local void @Perl_save_sptr(%struct.sv**) #3

declare dso_local void @Perl_call_list(i32, %struct.av*) #3

declare dso_local void @Perl_croak_popstack() #3

declare dso_local %struct.sv** @Perl_av_create_and_unshift_one(%struct.av**, %struct.sv*) #3

declare dso_local i32 @Perl_block_gimme() #3

attributes #0 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }
attributes #6 = { nounwind returns_twice "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind readonly }
attributes #8 = { nounwind returns_twice }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/svkeerthy/IR2Vec-LoopOptimizationFramework.git 561ac470e63b728263a0ac06ef987886ac648486)"}
