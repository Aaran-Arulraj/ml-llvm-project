; ModuleID = 'ipa-inline.c'
source_filename = "ipa-inline.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.cgraph_node = type { %union.tree_node*, %struct.cgraph_edge*, %struct.cgraph_edge*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.htab*, i8*, %struct.VEC_ipa_opt_pass_heap*, %struct.cgraph_local_info, %struct.cgraph_global_info, %struct.cgraph_rtl_info, %struct.cgraph_clone_info, %struct.cgraph_thunk_info, i64, i32, i32, i32, i16 }
%union.tree_node = type { %struct.tree_function_decl }
%struct.tree_function_decl = type { %struct.tree_decl_non_common, %struct.function*, %union.tree_node*, %union.tree_node*, %union.tree_node*, i32 }
%struct.tree_decl_non_common = type { %struct.tree_decl_with_vis, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node* }
%struct.tree_decl_with_vis = type { %struct.tree_decl_with_rtl, %union.tree_node*, %union.tree_node*, %union.tree_node*, i24 }
%struct.tree_decl_with_rtl = type { %struct.tree_decl_common, %struct.rtx_def* }
%struct.tree_decl_common = type { %struct.tree_decl_minimal, %union.tree_node*, i40, i32, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.lang_decl* }
%struct.tree_decl_minimal = type { %struct.tree_common, i32, i32, %union.tree_node*, %union.tree_node* }
%struct.tree_common = type { %struct.tree_base, %union.tree_node*, %union.tree_node* }
%struct.tree_base = type { i64 }
%struct.lang_decl = type opaque
%struct.rtx_def = type { i32, %union.u }
%union.u = type { %struct.block_symbol }
%struct.block_symbol = type { [3 x %union.rtunion_def], %struct.object_block*, i64 }
%union.rtunion_def = type { i8* }
%struct.object_block = type { %union.section*, i32, i64, %struct.VEC_rtx_gc*, %struct.VEC_rtx_gc* }
%union.section = type opaque
%struct.VEC_rtx_gc = type { %struct.VEC_rtx_base }
%struct.VEC_rtx_base = type { i32, i32, [1 x %struct.rtx_def*] }
%struct.function = type { %struct.eh_status*, %struct.control_flow_graph*, %struct.gimple_seq_d*, %struct.gimple_df*, %struct.loops*, %struct.htab*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.machine_function*, %struct.language_function*, %struct.htab*, i32, i32, i32, i32, i32, i32, i8*, i32 }
%struct.eh_status = type { %struct.eh_region_d*, %struct.VEC_eh_region_gc*, %struct.VEC_eh_landing_pad_gc*, %struct.htab*, %struct.VEC_tree_gc*, %union.eh_status_u }
%struct.eh_region_d = type { %struct.eh_region_d*, %struct.eh_region_d*, %struct.eh_region_d*, i32, i32, %union.eh_region_u, %struct.eh_landing_pad_d*, %struct.rtx_def*, %struct.rtx_def*, i8 }
%union.eh_region_u = type { %struct.eh_region_u_allowed }
%struct.eh_region_u_allowed = type { %union.tree_node*, %union.tree_node*, i32 }
%struct.eh_landing_pad_d = type { %struct.eh_landing_pad_d*, %struct.eh_region_d*, %union.tree_node*, %struct.rtx_def*, i32 }
%struct.VEC_eh_region_gc = type { %struct.VEC_eh_region_base }
%struct.VEC_eh_region_base = type { i32, i32, [1 x %struct.eh_region_d*] }
%struct.VEC_eh_landing_pad_gc = type { %struct.VEC_eh_landing_pad_base }
%struct.VEC_eh_landing_pad_base = type { i32, i32, [1 x %struct.eh_landing_pad_d*] }
%struct.VEC_tree_gc = type { %struct.VEC_tree_base }
%struct.VEC_tree_base = type { i32, i32, [1 x %union.tree_node*] }
%union.eh_status_u = type { %struct.VEC_tree_gc* }
%struct.control_flow_graph = type { %struct.basic_block_def*, %struct.basic_block_def*, %struct.VEC_basic_block_gc*, i32, i32, i32, %struct.VEC_basic_block_gc*, i32, [2 x i32], [2 x i32], i32, i32 }
%struct.basic_block_def = type { %struct.VEC_edge_gc*, %struct.VEC_edge_gc*, i8*, %struct.loop*, [2 x %struct.et_node*], %struct.basic_block_def*, %struct.basic_block_def*, %union.basic_block_il_dependent, i64, i32, i32, i32, i32, i32 }
%struct.VEC_edge_gc = type { %struct.VEC_edge_base }
%struct.VEC_edge_base = type { i32, i32, [1 x %struct.edge_def*] }
%struct.edge_def = type { %struct.basic_block_def*, %struct.basic_block_def*, %union.edge_def_insns, i8*, %union.tree_node*, i32, i32, i32, i32, i64 }
%union.edge_def_insns = type { %struct.gimple_seq_d* }
%struct.loop = type opaque
%struct.et_node = type opaque
%union.basic_block_il_dependent = type { %struct.gimple_bb_info* }
%struct.gimple_bb_info = type { %struct.gimple_seq_d*, %struct.gimple_seq_d* }
%struct.VEC_basic_block_gc = type { %struct.VEC_basic_block_base }
%struct.VEC_basic_block_base = type { i32, i32, [1 x %struct.basic_block_def*] }
%struct.gimple_seq_d = type { %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d*, %struct.gimple_seq_d* }
%struct.gimple_seq_node_d = type { %union.gimple_statement_d*, %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d* }
%union.gimple_statement_d = type { %struct.gimple_statement_phi }
%struct.gimple_statement_phi = type { %struct.gimple_statement_base, i32, i32, %union.tree_node*, [1 x %struct.phi_arg_d] }
%struct.gimple_statement_base = type { i32, i32, i32, i32, %struct.basic_block_def*, %union.tree_node* }
%struct.phi_arg_d = type { %struct.ssa_use_operand_d, %union.tree_node*, i32 }
%struct.ssa_use_operand_d = type { %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d*, %union.anon, %union.tree_node** }
%union.anon = type { %union.gimple_statement_d* }
%struct.gimple_df = type { %struct.htab*, %struct.VEC_gimple_gc*, %struct.VEC_tree_gc*, %union.tree_node*, %struct.pt_solution, %struct.pt_solution, %struct.pointer_map_t*, %union.tree_node*, %struct.htab*, %struct.bitmap_head_def*, i8, %struct.ssa_operands }
%struct.VEC_gimple_gc = type { %struct.VEC_gimple_base }
%struct.VEC_gimple_base = type { i32, i32, [1 x %union.gimple_statement_d*] }
%struct.pt_solution = type { i8, %struct.bitmap_head_def* }
%struct.pointer_map_t = type opaque
%struct.bitmap_head_def = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32, %struct.bitmap_obstack* }
%struct.bitmap_element_def = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32, [2 x i64] }
%struct.bitmap_obstack = type { %struct.bitmap_element_def*, %struct.bitmap_head_def*, %struct.obstack }
%struct.obstack = type { i64, %struct._obstack_chunk*, i8*, i8*, i8*, i64, i32, %struct._obstack_chunk* (i8*, i64)*, void (i8*, %struct._obstack_chunk*)*, i8*, i8 }
%struct._obstack_chunk = type { i8*, %struct._obstack_chunk*, [4 x i8] }
%struct.ssa_operands = type { %struct.ssa_operand_memory_d*, i32, i32, i8, %struct.def_optype_d*, %struct.use_optype_d* }
%struct.ssa_operand_memory_d = type { %struct.ssa_operand_memory_d*, [1 x i8] }
%struct.def_optype_d = type { %struct.def_optype_d*, %union.tree_node** }
%struct.use_optype_d = type { %struct.use_optype_d*, %struct.ssa_use_operand_d }
%struct.loops = type opaque
%struct.machine_function = type { %struct.stack_local_entry*, i8*, i32, i32, [4 x i32], i32, %struct.machine_cfa_state, i32, i8 }
%struct.stack_local_entry = type opaque
%struct.machine_cfa_state = type { %struct.rtx_def*, i64 }
%struct.language_function = type opaque
%struct.cgraph_edge = type { i64, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_edge*, %struct.cgraph_edge*, %struct.cgraph_edge*, %struct.cgraph_edge*, %union.gimple_statement_d*, i8*, i32, i32, i32, i32, i16, i8 }
%struct.htab = type { i32 (i8*)*, i32 (i8*, i8*)*, void (i8*)*, i8**, i64, i64, i64, i32, i32, i8* (i64, i64)*, void (i8*)*, i8*, i8* (i8*, i64, i64)*, void (i8*, i8*)*, i32 }
%struct.VEC_ipa_opt_pass_heap = type { %struct.VEC_ipa_opt_pass_base }
%struct.VEC_ipa_opt_pass_base = type { i32, i32, [1 x %struct.ipa_opt_pass_d*] }
%struct.ipa_opt_pass_d = type { %struct.opt_pass, void ()*, void (%struct.cgraph_node_set_def*)*, void ()*, void (%struct.cgraph_node*)*, void (%struct.cgraph_node*, %union.gimple_statement_d**)*, i32, i32 (%struct.cgraph_node*)*, void (%struct.varpool_node*)* }
%struct.opt_pass = type { i32, i8*, i8 ()*, i32 ()*, %struct.opt_pass*, %struct.opt_pass*, i32, i32, i32, i32, i32, i32, i32 }
%struct.cgraph_node_set_def = type { %struct.htab*, %struct.VEC_cgraph_node_ptr_gc*, i8* }
%struct.VEC_cgraph_node_ptr_gc = type { %struct.VEC_cgraph_node_ptr_base }
%struct.VEC_cgraph_node_ptr_base = type { i32, i32, [1 x %struct.cgraph_node*] }
%struct.varpool_node = type { %union.tree_node*, %struct.varpool_node*, %struct.varpool_node*, %struct.varpool_node*, i32, i8 }
%struct.cgraph_local_info = type { %struct.lto_file_decl_data*, %struct.inline_summary, i8 }
%struct.lto_file_decl_data = type opaque
%struct.inline_summary = type { i64, i32, i32, i32, i32 }
%struct.cgraph_global_info = type { i64, i64, %struct.cgraph_node*, i32, i32, i32, i8 }
%struct.cgraph_rtl_info = type { i32 }
%struct.cgraph_clone_info = type { %struct.VEC_ipa_replace_map_p_gc*, %struct.bitmap_head_def*, %struct.bitmap_head_def* }
%struct.VEC_ipa_replace_map_p_gc = type { %struct.VEC_ipa_replace_map_p_base }
%struct.VEC_ipa_replace_map_p_base = type { i32, i32, [1 x %struct.ipa_replace_map*] }
%struct.ipa_replace_map = type { %union.tree_node*, %union.tree_node*, i8, i8 }
%struct.cgraph_thunk_info = type { i64, i64, %union.tree_node*, i8, i8, i8 }
%struct.gimple_opt_pass = type { %struct.opt_pass }
%struct.simple_ipa_opt_pass = type { %struct.opt_pass }
%struct.ggc_root_tab = type { i8*, i64, i64, void (i8*)*, void (i8*)* }
%struct.diagnostic_context = type { %struct.pretty_print_info*, [12 x i32], i8, i8, [870 x i32], i8, i8, void (%struct.diagnostic_context*, %struct.diagnostic_info*)*, void (%struct.diagnostic_context*, %struct.diagnostic_info*)*, void (i8*, [1 x %struct.__va_list_tag]*)*, %union.tree_node*, %struct.line_map*, i32, i8 }
%struct.pretty_print_info = type { %struct.output_buffer*, i8*, i32, i32, i32, %struct.pp_wrapping_mode_t, i8 (%struct.pretty_print_info*, %struct.text_info*, i8*, i32, i8, i8, i8)*, i8, i8, i8 }
%struct.output_buffer = type { %struct.obstack, %struct.obstack, %struct.obstack*, %struct.chunk_info*, %struct._IO_FILE*, i32, [128 x i8] }
%struct.chunk_info = type { %struct.chunk_info*, [60 x i8*] }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%struct.pp_wrapping_mode_t = type { i32, i32 }
%struct.text_info = type { i8*, [1 x %struct.__va_list_tag]*, i32, i32*, %union.tree_node** }
%struct.__va_list_tag = type { i32, i32, i8*, i8* }
%struct.diagnostic_info = type { %struct.text_info, i32, i32, %union.tree_node*, i32, i32 }
%struct.line_map = type { i8*, i32, i32, i32, i8, i8, i8 }
%struct.param_info = type { i8*, i32, i8, i32, i32, i8* }
%struct.eni_weights_d = type { i32, i32, i32, i32, i8 }
%struct.cgraph_node_hook_list = type opaque
%struct.gcov_ctr_summary = type { i32, i32, i64, i64, i64 }
%struct.VEC_ipa_node_params_t_heap = type { %struct.VEC_ipa_node_params_t_base }
%struct.VEC_ipa_node_params_t_base = type { i32, i32, [1 x %struct.ipa_node_params] }
%struct.ipa_node_params = type { i32, %struct.ipa_param_descriptor*, %struct.ipa_param_call_note*, %struct.cgraph_node*, i64, i8 }
%struct.ipa_param_descriptor = type { %struct.ipcp_lattice, %union.tree_node*, i8 }
%struct.ipcp_lattice = type { i32, %union.tree_node* }
%struct.ipa_param_call_note = type { i64, %struct.ipa_param_call_note*, %union.gimple_statement_d*, i32, i32, i32, i16, i8 }
%struct.VEC_ipa_edge_args_t_gc = type { %struct.VEC_ipa_edge_args_t_base }
%struct.VEC_ipa_edge_args_t_base = type { i32, i32, [1 x %struct.ipa_edge_args] }
%struct.ipa_edge_args = type { i32, %struct.ipa_jump_func* }
%struct.ipa_jump_func = type { i32, %union.jump_func_value }
%union.jump_func_value = type { %struct.ipa_ancestor_jf_data }
%struct.ipa_ancestor_jf_data = type { i64, %union.tree_node*, i32 }
%struct.VEC_cgraph_edge_p_heap = type { %struct.VEC_cgraph_edge_p_base }
%struct.VEC_cgraph_edge_p_base = type { i32, i32, [1 x %struct.cgraph_edge*] }
%struct.gimple_stmt_iterator = type { %struct.gimple_seq_node_d*, %struct.gimple_seq_d*, %struct.basic_block_def* }
%struct.tree_exp = type { %struct.tree_common, i32, %union.tree_node*, [1 x %union.tree_node*] }
%struct.tree_ssa_name = type { %struct.tree_common, %union.tree_node*, %union.gimple_statement_d*, i32, %struct.ptr_info_def*, %struct.ssa_use_operand_d }
%struct.ptr_info_def = type { %struct.pt_solution }
%struct.fibheap = type { i64, %struct.fibnode*, %struct.fibnode* }
%struct.fibnode = type { %struct.fibnode*, %struct.fibnode*, %struct.fibnode*, %struct.fibnode*, i64, i8*, i32 }
%struct.expanded_location = type { i8*, i32, i32, i8 }

@cgraph_new_nodes = external dso_local global %struct.cgraph_node*, align 8
@.str = private unnamed_addr constant [13 x i8] c"ipa-inline.c\00", align 1
@.str.1 = private unnamed_addr constant [2 x i8] c"?\00", align 1
@overall_size = internal global i32 0, align 4, !dbg !0
@nfunctions_inlined = internal global i32 0, align 4, !dbg !2839
@.str.2 = private unnamed_addr constant [8 x i8] c"einline\00", align 1
@pass_early_inline = dso_local global %struct.gimple_opt_pass { %struct.opt_pass { i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.2, i32 0, i32 0), i8 ()* @cgraph_gate_early_inlining, i32 ()* @cgraph_early_inlining, %struct.opt_pass* null, %struct.opt_pass* null, i32 0, i32 46, i32 0, i32 0, i32 0, i32 0, i32 1 } }, align 8, !dbg !2811
@.str.3 = private unnamed_addr constant [12 x i8] c"einline_ipa\00", align 1
@pass_ipa_early_inline = dso_local global %struct.simple_ipa_opt_pass { %struct.opt_pass { i32 2, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.3, i32 0, i32 0), i8 ()* @cgraph_gate_ipa_early_inlining, i32 ()* null, %struct.opt_pass* null, %struct.opt_pass* null, i32 0, i32 46, i32 0, i32 0, i32 0, i32 0, i32 128 } }, align 8, !dbg !2816
@optimize = external dso_local global i32, align 4
@.str.4 = private unnamed_addr constant [13 x i8] c"inline_param\00", align 1
@pass_inline_parameters = dso_local global %struct.gimple_opt_pass { %struct.opt_pass { i32 0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.4, i32 0, i32 0), i8 ()* null, i32 ()* @compute_inline_parameters_for_current, %struct.opt_pass* null, %struct.opt_pass* null, i32 0, i32 46, i32 0, i32 0, i32 0, i32 0, i32 0 } }, align 8, !dbg !2821
@.str.5 = private unnamed_addr constant [7 x i8] c"inline\00", align 1
@pass_ipa_inline = dso_local global %struct.ipa_opt_pass_d { %struct.opt_pass { i32 3, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.5, i32 0, i32 0), i8 ()* null, i32 ()* @cgraph_decide_inlining, %struct.opt_pass* null, %struct.opt_pass* null, i32 0, i32 46, i32 0, i32 0, i32 0, i32 256, i32 385 }, void ()* @inline_generate_summary, void (%struct.cgraph_node_set_def*)* @inline_write_summary, void ()* @inline_read_summary, void (%struct.cgraph_node*)* null, void (%struct.cgraph_node*, %union.gimple_statement_d**)* @lto_ipa_fixup_call_notes, i32 0, i32 (%struct.cgraph_node*)* @inline_transform, void (%struct.varpool_node*)* null }, align 8, !dbg !2823
@order = internal global %struct.cgraph_node** null, align 8, !dbg !2841
@gt_ggc_r_gt_ipa_inline_h = dso_local constant [2 x %struct.ggc_root_tab] [%struct.ggc_root_tab { i8* bitcast (%struct.cgraph_node*** @order to i8*), i64 1, i64 8, void (i8*)* @gt_ggc_ma_order, void (i8*)* @gt_pch_na_order }, %struct.ggc_root_tab zeroinitializer], align 16, !dbg !2825
@flag_early_inlining = external dso_local global i32, align 4
@current_function_decl = external dso_local global %union.tree_node*, align 8
@global_dc = external dso_local global %struct.diagnostic_context*, align 8
@compiler_params = external dso_local global %struct.param_info*, align 8
@timevar_enable = external dso_local global i8, align 1
@dump_file = external dso_local global %struct._IO_FILE*, align 8
@.str.6 = private unnamed_addr constant [16 x i8] c"Iterations: %i\0A\00", align 1
@cfun = external dso_local global %struct.function*, align 8
@.str.7 = private unnamed_addr constant [8 x i8] c"flatten\00", align 1
@.str.8 = private unnamed_addr constant [15 x i8] c"Flattening %s\0A\00", align 1
@.str.9 = private unnamed_addr constant [51 x i8] c"Considering to always inline inline candidate %s.\0A\00", align 1
@.str.10 = private unnamed_addr constant [31 x i8] c"Not inlining: recursive call.\0A\00", align 1
@.str.11 = private unnamed_addr constant [17 x i8] c"Not inlining: %s\00", align 1
@.str.12 = private unnamed_addr constant [40 x i8] c"Not inlining: SSA form does not match.\0A\00", align 1
@.str.13 = private unnamed_addr constant [50 x i8] c"Not inlining: Function body no longer available.\0A\00", align 1
@.str.14 = private unnamed_addr constant [34 x i8] c"Considering inline candidate %s.\0A\00", align 1
@flag_inline_functions = external dso_local global i32, align 4
@.str.15 = private unnamed_addr constant [43 x i8] c"Not inlining: code size would grow by %i.\0A\00", align 1
@.str.16 = private unnamed_addr constant [19 x i8] c"Not inlining: %s.\0A\00", align 1
@.str.17 = private unnamed_addr constant [18 x i8] c"Not inlining: %s.\00", align 1
@.str.18 = private unnamed_addr constant [51 x i8] c"Hit cycle in %s, switching to always inline only.\0A\00", align 1
@.str.19 = private unnamed_addr constant [41 x i8] c"Not inlining %s into %s to avoid cycle.\0A\00", align 1
@.str.20 = private unnamed_addr constant [23 x i8] c" Inlining %s into %s.\0A\00", align 1
@ncalls_inlined = internal global i32 0, align 4, !dbg !2843
@flag_indirect_inlining = external dso_local global i32, align 4
@flag_inline_small_functions = external dso_local global i32, align 4
@in_lto_p = external dso_local global i8, align 1
@flag_branch_probabilities = external dso_local global i32, align 4
@flag_test_coverage = external dso_local global i32, align 4
@profile_arc_flag = external dso_local global i32, align 4
@.str.21 = private unnamed_addr constant [34 x i8] c"Analyzing function body size: %s\0A\00", align 1
@eni_size_weights = external dso_local global %struct.eni_weights_d, align 4
@eni_time_weights = external dso_local global %struct.eni_weights_d, align 4
@dump_flags = external dso_local global i32, align 4
@.str.22 = private unnamed_addr constant [30 x i8] c"  freq:%6i size:%3i time:%3i \00", align 1
@.str.23 = private unnamed_addr constant [23 x i8] c"    Likely eliminated\0A\00", align 1
@.str.24 = private unnamed_addr constant [47 x i8] c"Overall function body time: %i-%i size: %i-%i\0A\00", align 1
@.str.25 = private unnamed_addr constant [53 x i8] c"With function call overhead time: %i-%i size: %i-%i\0A\00", align 1
@.str.26 = private unnamed_addr constant [11 x i8] c"./gimple.h\00", align 1
@gimple_rhs_class_table = external dso_local constant [0 x i8], align 1
@gimple_ops_offset_ = external dso_local constant [0 x i64], align 8
@gss_for_code_ = external dso_local constant [0 x i32], align 4
@cgraph_n_nodes = external dso_local global i32, align 4
@function_insertion_hook_holder = internal global %struct.cgraph_node_hook_list* null, align 8, !dbg !2845
@max_count = internal global i64 0, align 8, !dbg !2849
@max_benefit = internal global i64 0, align 8, !dbg !2851
@cgraph_nodes = external dso_local global %struct.cgraph_node*, align 8
@profile_info = external dso_local global %struct.gcov_ctr_summary*, align 8
@.str.27 = private unnamed_addr constant [48 x i8] c"\0ADeciding on inlining.  Starting with size %i.\0A\00", align 1
@.str.28 = private unnamed_addr constant [36 x i8] c"\0AInlining always_inline functions:\0A\00", align 1
@.str.29 = private unnamed_addr constant [41 x i8] c"\0AConsidering %s size:%i (always inline)\0A\00", align 1
@.str.30 = private unnamed_addr constant [41 x i8] c" Inlined into %s which now has size %i.\0A\00", align 1
@.str.31 = private unnamed_addr constant [40 x i8] c" Inlined for a net change of %+i size.\0A\00", align 1
@flag_inline_functions_called_once = external dso_local global i32, align 4
@.str.32 = private unnamed_addr constant [37 x i8] c"\0ADeciding on functions called once:\0A\00", align 1
@.str.33 = private unnamed_addr constant [26 x i8] c"\0AConsidering %s size %i.\0A\00", align 1
@.str.34 = private unnamed_addr constant [32 x i8] c" Called once from %s %i insns.\0A\00", align 1
@.str.35 = private unnamed_addr constant [70 x i8] c" Inlined into %s which now has %i size for a net change of %+i size.\0A\00", align 1
@.str.36 = private unnamed_addr constant [20 x i8] c" Not inlining: %s.\0A\00", align 1
@.str.37 = private unnamed_addr constant [73 x i8] c"\0AInlined %i calls, eliminated %i functions, size %i turned to %i size.\0A\0A\00", align 1
@.str.38 = private unnamed_addr constant [33 x i8] c"\0ADeciding on smaller functions:\0A\00", align 1
@.str.39 = private unnamed_addr constant [30 x i8] c"\0AConsidering %s with %i size\0A\00", align 1
@.str.40 = private unnamed_addr constant [138 x i8] c" to be inlined into %s in %s:%i\0A Estimated growth after inlined into all callees is %+i insns.\0A Estimated badness is %i, frequency %.2f.\0A\00", align 1
@.str.41 = private unnamed_addr constant [14 x i8] c" Called %ldx\0A\00", align 1
@.str.42 = private unnamed_addr constant [71 x i8] c" inline_failed:Recursive inlining performed only for function itself.\0A\00", align 1
@.str.43 = private unnamed_addr constant [20 x i8] c" inline_failed:%s.\0A\00", align 1
@.str.44 = private unnamed_addr constant [27 x i8] c" Not inlining into %s:%s.\0A\00", align 1
@.str.45 = private unnamed_addr constant [76 x i8] c" Inlined into %s which now has size %i and self time %i,net change of %+i.\0A\00", align 1
@.str.46 = private unnamed_addr constant [30 x i8] c"New minimal size reached: %i\0A\00", align 1
@.str.47 = private unnamed_addr constant [21 x i8] c"Inlining failed: %s\0A\00", align 1
@flag_guess_branch_prob = external dso_local global i32, align 4
@.str.48 = private unnamed_addr constant [39 x i8] c"  Performing recursive inlining on %s\0A\00", align 1
@.str.49 = private unnamed_addr constant [26 x i8] c"   maximal depth reached\0A\00", align 1
@.str.50 = private unnamed_addr constant [27 x i8] c"   Not inlining cold call\0A\00", align 1
@.str.51 = private unnamed_addr constant [37 x i8] c"   Probability of edge is too small\0A\00", align 1
@.str.52 = private unnamed_addr constant [29 x i8] c"   Inlining call of depth %i\00", align 1
@.str.53 = private unnamed_addr constant [36 x i8] c" called approx. %.2f times per call\00", align 1
@.str.54 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.55 = private unnamed_addr constant [42 x i8] c"    Recursive inlining growth limit met.\0A\00", align 1
@.str.56 = private unnamed_addr constant [68 x i8] c"\0A   Inlined %i times, body grown from size %i to %i, time %i to %i\0A\00", align 1
@lookup_recursive_calls.priority = internal global i32 0, align 4, !dbg !2853
@ipa_node_params_vector = external dso_local global %struct.VEC_ipa_node_params_t_heap*, align 8
@cgraph_max_uid = external dso_local global i32, align 4
@ipa_edge_args_vector = external dso_local global %struct.VEC_ipa_edge_args_t_gc*, align 8
@cgraph_edge_max_uid = external dso_local global i32, align 4
@flag_ipa_cp = external dso_local global i32, align 4
@warn_inline = external dso_local global i32, align 4
@nnodes = internal global i32 0, align 4, !dbg !2866

; Function Attrs: noinline nounwind uwtable
define dso_local void @cgraph_clone_inlined_nodes(%struct.cgraph_edge* %e, i8 zeroext %duplicate, i8 zeroext %update_original) #0 !dbg !2872 {
entry:
  %e.addr = alloca %struct.cgraph_edge*, align 8
  %duplicate.addr = alloca i8, align 1
  %update_original.addr = alloca i8, align 1
  %peak = alloca i64, align 8
  %n = alloca %struct.cgraph_node*, align 8
  store %struct.cgraph_edge* %e, %struct.cgraph_edge** %e.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cgraph_edge** %e.addr, metadata !2875, metadata !DIExpression()), !dbg !2876
  store i8 %duplicate, i8* %duplicate.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %duplicate.addr, metadata !2877, metadata !DIExpression()), !dbg !2878
  store i8 %update_original, i8* %update_original.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %update_original.addr, metadata !2879, metadata !DIExpression()), !dbg !2880
  call void @llvm.dbg.declare(metadata i64* %peak, metadata !2881, metadata !DIExpression()), !dbg !2882
  %0 = load i8, i8* %duplicate.addr, align 1, !dbg !2883
  %tobool = icmp ne i8 %0, 0, !dbg !2883
  br i1 %tobool, label %if.then, label %if.end28, !dbg !2885

if.then:                                          ; preds = %entry
  %1 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e.addr, align 8, !dbg !2886
  %callee = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %1, i32 0, i32 2, !dbg !2889
  %2 = load %struct.cgraph_node*, %struct.cgraph_node** %callee, align 8, !dbg !2889
  %callers = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %2, i32 0, i32 2, !dbg !2890
  %3 = load %struct.cgraph_edge*, %struct.cgraph_edge** %callers, align 8, !dbg !2890
  %next_caller = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %3, i32 0, i32 4, !dbg !2891
  %4 = load %struct.cgraph_edge*, %struct.cgraph_edge** %next_caller, align 8, !dbg !2891
  %tobool1 = icmp ne %struct.cgraph_edge* %4, null, !dbg !2886
  br i1 %tobool1, label %if.else, label %land.lhs.true, !dbg !2892

land.lhs.true:                                    ; preds = %if.then
  %5 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e.addr, align 8, !dbg !2893
  %callee2 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %5, i32 0, i32 2, !dbg !2894
  %6 = load %struct.cgraph_node*, %struct.cgraph_node** %callee2, align 8, !dbg !2894
  %call = call zeroext i8 @cgraph_can_remove_if_no_direct_calls_p(%struct.cgraph_node* %6), !dbg !2895
  %conv = zext i8 %call to i32, !dbg !2895
  %tobool3 = icmp ne i32 %conv, 0, !dbg !2895
  br i1 %tobool3, label %land.lhs.true4, label %if.else, !dbg !2896

land.lhs.true4:                                   ; preds = %land.lhs.true
  %7 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e.addr, align 8, !dbg !2897
  %callee5 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %7, i32 0, i32 2, !dbg !2898
  %8 = load %struct.cgraph_node*, %struct.cgraph_node** %callee5, align 8, !dbg !2898
  %same_comdat_group = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %8, i32 0, i32 14, !dbg !2899
  %9 = load %struct.cgraph_node*, %struct.cgraph_node** %same_comdat_group, align 8, !dbg !2899
  %tobool6 = icmp ne %struct.cgraph_node* %9, null, !dbg !2897
  br i1 %tobool6, label %if.else, label %land.lhs.true7, !dbg !2900

land.lhs.true7:                                   ; preds = %land.lhs.true4
  %10 = load %struct.cgraph_node*, %struct.cgraph_node** @cgraph_new_nodes, align 8, !dbg !2901
  %tobool8 = icmp ne %struct.cgraph_node* %10, null, !dbg !2901
  br i1 %tobool8, label %if.else, label %if.then9, !dbg !2902

if.then9:                                         ; preds = %land.lhs.true7
  %11 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e.addr, align 8, !dbg !2903
  %callee10 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %11, i32 0, i32 2, !dbg !2903
  %12 = load %struct.cgraph_node*, %struct.cgraph_node** %callee10, align 8, !dbg !2903
  %global = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %12, i32 0, i32 19, !dbg !2903
  %inlined_to = getelementptr inbounds %struct.cgraph_global_info, %struct.cgraph_global_info* %global, i32 0, i32 2, !dbg !2903
  %13 = load %struct.cgraph_node*, %struct.cgraph_node** %inlined_to, align 8, !dbg !2903
  %tobool11 = icmp ne %struct.cgraph_node* %13, null, !dbg !2903
  br i1 %tobool11, label %cond.true, label %cond.false, !dbg !2903

cond.true:                                        ; preds = %if.then9
  call void @fancy_abort(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0), i32 257, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !2903
  br label %cond.end, !dbg !2903

cond.false:                                       ; preds = %if.then9
  br label %cond.end, !dbg !2903

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !2903
  %14 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e.addr, align 8, !dbg !2905
  %callee12 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %14, i32 0, i32 2, !dbg !2907
  %15 = load %struct.cgraph_node*, %struct.cgraph_node** %callee12, align 8, !dbg !2907
  %analyzed = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %15, i32 0, i32 27, !dbg !2908
  %bf.load = load i16, i16* %analyzed, align 4, !dbg !2908
  %bf.lshr = lshr i16 %bf.load, 5, !dbg !2908
  %bf.clear = and i16 %bf.lshr, 1, !dbg !2908
  %bf.cast = zext i16 %bf.clear to i32, !dbg !2908
  %tobool13 = icmp ne i32 %bf.cast, 0, !dbg !2905
  br i1 %tobool13, label %if.then14, label %if.end, !dbg !2909

if.then14:                                        ; preds = %cond.end
  %16 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e.addr, align 8, !dbg !2910
  %callee15 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %16, i32 0, i32 2, !dbg !2912
  %17 = load %struct.cgraph_node*, %struct.cgraph_node** %callee15, align 8, !dbg !2912
  %global16 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %17, i32 0, i32 19, !dbg !2913
  %size = getelementptr inbounds %struct.cgraph_global_info, %struct.cgraph_global_info* %global16, i32 0, i32 4, !dbg !2914
  %18 = load i32, i32* %size, align 4, !dbg !2914
  %19 = load i32, i32* @overall_size, align 4, !dbg !2915
  %sub = sub nsw i32 %19, %18, !dbg !2915
  store i32 %sub, i32* @overall_size, align 4, !dbg !2915
  %20 = load i32, i32* @nfunctions_inlined, align 4, !dbg !2916
  %inc = add nsw i32 %20, 1, !dbg !2916
  store i32 %inc, i32* @nfunctions_inlined, align 4, !dbg !2916
  br label %if.end, !dbg !2917

if.end:                                           ; preds = %if.then14, %cond.end
  store i8 0, i8* %duplicate.addr, align 1, !dbg !2918
  %21 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e.addr, align 8, !dbg !2919
  %callee17 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %21, i32 0, i32 2, !dbg !2920
  %22 = load %struct.cgraph_node*, %struct.cgraph_node** %callee17, align 8, !dbg !2920
  %local = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %22, i32 0, i32 18, !dbg !2921
  %externally_visible = getelementptr inbounds %struct.cgraph_local_info, %struct.cgraph_local_info* %local, i32 0, i32 2, !dbg !2922
  %bf.load18 = load i8, i8* %externally_visible, align 8, !dbg !2923
  %bf.clear19 = and i8 %bf.load18, -3, !dbg !2923
  store i8 %bf.clear19, i8* %externally_visible, align 8, !dbg !2923
  %23 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e.addr, align 8, !dbg !2924
  %callee20 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %23, i32 0, i32 2, !dbg !2925
  %24 = load %struct.cgraph_node*, %struct.cgraph_node** %callee20, align 8, !dbg !2925
  %25 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e.addr, align 8, !dbg !2926
  %frequency = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %25, i32 0, i32 11, !dbg !2927
  %26 = load i32, i32* %frequency, align 8, !dbg !2927
  %27 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e.addr, align 8, !dbg !2928
  %loop_nest = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %27, i32 0, i32 13, !dbg !2929
  %28 = load i16, i16* %loop_nest, align 8, !dbg !2929
  %conv21 = zext i16 %28 to i32, !dbg !2928
  call void @update_noncloned_frequencies(%struct.cgraph_node* %24, i32 %26, i32 %conv21), !dbg !2930
  br label %if.end27, !dbg !2931

if.else:                                          ; preds = %land.lhs.true7, %land.lhs.true4, %land.lhs.true, %if.then
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %n, metadata !2932, metadata !DIExpression()), !dbg !2934
  %29 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e.addr, align 8, !dbg !2935
  %callee22 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %29, i32 0, i32 2, !dbg !2936
  %30 = load %struct.cgraph_node*, %struct.cgraph_node** %callee22, align 8, !dbg !2936
  %31 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e.addr, align 8, !dbg !2937
  %count = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %31, i32 0, i32 0, !dbg !2938
  %32 = load i64, i64* %count, align 8, !dbg !2938
  %33 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e.addr, align 8, !dbg !2939
  %frequency23 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %33, i32 0, i32 11, !dbg !2940
  %34 = load i32, i32* %frequency23, align 8, !dbg !2940
  %35 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e.addr, align 8, !dbg !2941
  %loop_nest24 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %35, i32 0, i32 13, !dbg !2942
  %36 = load i16, i16* %loop_nest24, align 8, !dbg !2942
  %conv25 = zext i16 %36 to i32, !dbg !2941
  %37 = load i8, i8* %update_original.addr, align 1, !dbg !2943
  %call26 = call %struct.cgraph_node* @cgraph_clone_node(%struct.cgraph_node* %30, i64 %32, i32 %34, i32 %conv25, i8 zeroext %37, %struct.VEC_cgraph_edge_p_heap* null), !dbg !2944
  store %struct.cgraph_node* %call26, %struct.cgraph_node** %n, align 8, !dbg !2945
  %38 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e.addr, align 8, !dbg !2946
  %39 = load %struct.cgraph_node*, %struct.cgraph_node** %n, align 8, !dbg !2947
  call void @cgraph_redirect_edge_callee(%struct.cgraph_edge* %38, %struct.cgraph_node* %39), !dbg !2948
  br label %if.end27

if.end27:                                         ; preds = %if.else, %if.end
  br label %if.end28, !dbg !2949

if.end28:                                         ; preds = %if.end27, %entry
  %40 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e.addr, align 8, !dbg !2950
  %caller = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %40, i32 0, i32 1, !dbg !2952
  %41 = load %struct.cgraph_node*, %struct.cgraph_node** %caller, align 8, !dbg !2952
  %global29 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %41, i32 0, i32 19, !dbg !2953
  %inlined_to30 = getelementptr inbounds %struct.cgraph_global_info, %struct.cgraph_global_info* %global29, i32 0, i32 2, !dbg !2954
  %42 = load %struct.cgraph_node*, %struct.cgraph_node** %inlined_to30, align 8, !dbg !2954
  %tobool31 = icmp ne %struct.cgraph_node* %42, null, !dbg !2950
  br i1 %tobool31, label %if.then32, label %if.else39, !dbg !2955

if.then32:                                        ; preds = %if.end28
  %43 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e.addr, align 8, !dbg !2956
  %caller33 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %43, i32 0, i32 1, !dbg !2957
  %44 = load %struct.cgraph_node*, %struct.cgraph_node** %caller33, align 8, !dbg !2957
  %global34 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %44, i32 0, i32 19, !dbg !2958
  %inlined_to35 = getelementptr inbounds %struct.cgraph_global_info, %struct.cgraph_global_info* %global34, i32 0, i32 2, !dbg !2959
  %45 = load %struct.cgraph_node*, %struct.cgraph_node** %inlined_to35, align 8, !dbg !2959
  %46 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e.addr, align 8, !dbg !2960
  %callee36 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %46, i32 0, i32 2, !dbg !2961
  %47 = load %struct.cgraph_node*, %struct.cgraph_node** %callee36, align 8, !dbg !2961
  %global37 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %47, i32 0, i32 19, !dbg !2962
  %inlined_to38 = getelementptr inbounds %struct.cgraph_global_info, %struct.cgraph_global_info* %global37, i32 0, i32 2, !dbg !2963
  store %struct.cgraph_node* %45, %struct.cgraph_node** %inlined_to38, align 8, !dbg !2964
  br label %if.end44, !dbg !2960

if.else39:                                        ; preds = %if.end28
  %48 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e.addr, align 8, !dbg !2965
  %caller40 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %48, i32 0, i32 1, !dbg !2966
  %49 = load %struct.cgraph_node*, %struct.cgraph_node** %caller40, align 8, !dbg !2966
  %50 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e.addr, align 8, !dbg !2967
  %callee41 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %50, i32 0, i32 2, !dbg !2968
  %51 = load %struct.cgraph_node*, %struct.cgraph_node** %callee41, align 8, !dbg !2968
  %global42 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %51, i32 0, i32 19, !dbg !2969
  %inlined_to43 = getelementptr inbounds %struct.cgraph_global_info, %struct.cgraph_global_info* %global42, i32 0, i32 2, !dbg !2970
  store %struct.cgraph_node* %49, %struct.cgraph_node** %inlined_to43, align 8, !dbg !2971
  br label %if.end44

if.end44:                                         ; preds = %if.else39, %if.then32
  %52 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e.addr, align 8, !dbg !2972
  %caller45 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %52, i32 0, i32 1, !dbg !2973
  %53 = load %struct.cgraph_node*, %struct.cgraph_node** %caller45, align 8, !dbg !2973
  %global46 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %53, i32 0, i32 19, !dbg !2974
  %stack_frame_offset = getelementptr inbounds %struct.cgraph_global_info, %struct.cgraph_global_info* %global46, i32 0, i32 1, !dbg !2975
  %54 = load i64, i64* %stack_frame_offset, align 8, !dbg !2975
  %55 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e.addr, align 8, !dbg !2976
  %caller47 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %55, i32 0, i32 1, !dbg !2977
  %56 = load %struct.cgraph_node*, %struct.cgraph_node** %caller47, align 8, !dbg !2977
  %call48 = call %struct.inline_summary* @inline_summary(%struct.cgraph_node* %56), !dbg !2978
  %estimated_self_stack_size = getelementptr inbounds %struct.inline_summary, %struct.inline_summary* %call48, i32 0, i32 0, !dbg !2979
  %57 = load i64, i64* %estimated_self_stack_size, align 8, !dbg !2979
  %add = add nsw i64 %54, %57, !dbg !2980
  %58 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e.addr, align 8, !dbg !2981
  %callee49 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %58, i32 0, i32 2, !dbg !2982
  %59 = load %struct.cgraph_node*, %struct.cgraph_node** %callee49, align 8, !dbg !2982
  %global50 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %59, i32 0, i32 19, !dbg !2983
  %stack_frame_offset51 = getelementptr inbounds %struct.cgraph_global_info, %struct.cgraph_global_info* %global50, i32 0, i32 1, !dbg !2984
  store i64 %add, i64* %stack_frame_offset51, align 8, !dbg !2985
  %60 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e.addr, align 8, !dbg !2986
  %callee52 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %60, i32 0, i32 2, !dbg !2987
  %61 = load %struct.cgraph_node*, %struct.cgraph_node** %callee52, align 8, !dbg !2987
  %global53 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %61, i32 0, i32 19, !dbg !2988
  %stack_frame_offset54 = getelementptr inbounds %struct.cgraph_global_info, %struct.cgraph_global_info* %global53, i32 0, i32 1, !dbg !2989
  %62 = load i64, i64* %stack_frame_offset54, align 8, !dbg !2989
  %63 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e.addr, align 8, !dbg !2990
  %callee55 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %63, i32 0, i32 2, !dbg !2991
  %64 = load %struct.cgraph_node*, %struct.cgraph_node** %callee55, align 8, !dbg !2991
  %call56 = call %struct.inline_summary* @inline_summary(%struct.cgraph_node* %64), !dbg !2992
  %estimated_self_stack_size57 = getelementptr inbounds %struct.inline_summary, %struct.inline_summary* %call56, i32 0, i32 0, !dbg !2993
  %65 = load i64, i64* %estimated_self_stack_size57, align 8, !dbg !2993
  %add58 = add nsw i64 %62, %65, !dbg !2994
  store i64 %add58, i64* %peak, align 8, !dbg !2995
  %66 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e.addr, align 8, !dbg !2996
  %callee59 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %66, i32 0, i32 2, !dbg !2998
  %67 = load %struct.cgraph_node*, %struct.cgraph_node** %callee59, align 8, !dbg !2998
  %global60 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %67, i32 0, i32 19, !dbg !2999
  %inlined_to61 = getelementptr inbounds %struct.cgraph_global_info, %struct.cgraph_global_info* %global60, i32 0, i32 2, !dbg !3000
  %68 = load %struct.cgraph_node*, %struct.cgraph_node** %inlined_to61, align 8, !dbg !3000
  %global62 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %68, i32 0, i32 19, !dbg !3001
  %estimated_stack_size = getelementptr inbounds %struct.cgraph_global_info, %struct.cgraph_global_info* %global62, i32 0, i32 0, !dbg !3002
  %69 = load i64, i64* %estimated_stack_size, align 8, !dbg !3002
  %70 = load i64, i64* %peak, align 8, !dbg !3003
  %cmp = icmp slt i64 %69, %70, !dbg !3004
  br i1 %cmp, label %if.then64, label %if.end70, !dbg !3005

if.then64:                                        ; preds = %if.end44
  %71 = load i64, i64* %peak, align 8, !dbg !3006
  %72 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e.addr, align 8, !dbg !3007
  %callee65 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %72, i32 0, i32 2, !dbg !3008
  %73 = load %struct.cgraph_node*, %struct.cgraph_node** %callee65, align 8, !dbg !3008
  %global66 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %73, i32 0, i32 19, !dbg !3009
  %inlined_to67 = getelementptr inbounds %struct.cgraph_global_info, %struct.cgraph_global_info* %global66, i32 0, i32 2, !dbg !3010
  %74 = load %struct.cgraph_node*, %struct.cgraph_node** %inlined_to67, align 8, !dbg !3010
  %global68 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %74, i32 0, i32 19, !dbg !3011
  %estimated_stack_size69 = getelementptr inbounds %struct.cgraph_global_info, %struct.cgraph_global_info* %global68, i32 0, i32 0, !dbg !3012
  store i64 %71, i64* %estimated_stack_size69, align 8, !dbg !3013
  br label %if.end70, !dbg !3007

if.end70:                                         ; preds = %if.then64, %if.end44
  %75 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e.addr, align 8, !dbg !3014
  %callee71 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %75, i32 0, i32 2, !dbg !3016
  %76 = load %struct.cgraph_node*, %struct.cgraph_node** %callee71, align 8, !dbg !3016
  %callees = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %76, i32 0, i32 1, !dbg !3017
  %77 = load %struct.cgraph_edge*, %struct.cgraph_edge** %callees, align 8, !dbg !3017
  store %struct.cgraph_edge* %77, %struct.cgraph_edge** %e.addr, align 8, !dbg !3018
  br label %for.cond, !dbg !3019

for.cond:                                         ; preds = %for.inc, %if.end70
  %78 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e.addr, align 8, !dbg !3020
  %tobool72 = icmp ne %struct.cgraph_edge* %78, null, !dbg !3022
  br i1 %tobool72, label %for.body, label %for.end, !dbg !3022

for.body:                                         ; preds = %for.cond
  %79 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e.addr, align 8, !dbg !3023
  %inline_failed = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %79, i32 0, i32 9, !dbg !3025
  %80 = load i32, i32* %inline_failed, align 8, !dbg !3025
  %tobool73 = icmp ne i32 %80, 0, !dbg !3023
  br i1 %tobool73, label %if.end75, label %if.then74, !dbg !3026

if.then74:                                        ; preds = %for.body
  %81 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e.addr, align 8, !dbg !3027
  %82 = load i8, i8* %duplicate.addr, align 1, !dbg !3028
  %83 = load i8, i8* %update_original.addr, align 1, !dbg !3029
  call void @cgraph_clone_inlined_nodes(%struct.cgraph_edge* %81, i8 zeroext %82, i8 zeroext %83), !dbg !3030
  br label %if.end75, !dbg !3030

if.end75:                                         ; preds = %if.then74, %for.body
  br label %for.inc, !dbg !3025

for.inc:                                          ; preds = %if.end75
  %84 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e.addr, align 8, !dbg !3031
  %next_callee = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %84, i32 0, i32 6, !dbg !3032
  %85 = load %struct.cgraph_edge*, %struct.cgraph_edge** %next_callee, align 8, !dbg !3032
  store %struct.cgraph_edge* %85, %struct.cgraph_edge** %e.addr, align 8, !dbg !3033
  br label %for.cond, !dbg !3034, !llvm.loop !3035

for.end:                                          ; preds = %for.cond
  ret void, !dbg !3037
}

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @cgraph_can_remove_if_no_direct_calls_p(%struct.cgraph_node* %node) #0 !dbg !3038 {
entry:
  %node.addr = alloca %struct.cgraph_node*, align 8
  store %struct.cgraph_node* %node, %struct.cgraph_node** %node.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %node.addr, metadata !3041, metadata !DIExpression()), !dbg !3042
  %0 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !3043
  %needed = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %0, i32 0, i32 27, !dbg !3044
  %bf.load = load i16, i16* %needed, align 4, !dbg !3044
  %bf.clear = and i16 %bf.load, 1, !dbg !3044
  %bf.cast = zext i16 %bf.clear to i32, !dbg !3044
  %tobool = icmp ne i32 %bf.cast, 0, !dbg !3043
  br i1 %tobool, label %land.end, label %land.rhs, !dbg !3045

land.rhs:                                         ; preds = %entry
  %1 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !3046
  %decl = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %1, i32 0, i32 0, !dbg !3046
  %2 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !3046
  %decl_with_vis = bitcast %union.tree_node* %2 to %struct.tree_decl_with_vis*, !dbg !3046
  %comdat_flag = getelementptr inbounds %struct.tree_decl_with_vis, %struct.tree_decl_with_vis* %decl_with_vis, i32 0, i32 4, !dbg !3046
  %3 = bitcast i24* %comdat_flag to i32*, !dbg !3046
  %bf.load1 = load i32, i32* %3, align 8, !dbg !3046
  %bf.lshr = lshr i32 %bf.load1, 9, !dbg !3046
  %bf.clear2 = and i32 %bf.lshr, 1, !dbg !3046
  %tobool3 = icmp ne i32 %bf.clear2, 0, !dbg !3046
  br i1 %tobool3, label %lor.end, label %lor.rhs, !dbg !3047

lor.rhs:                                          ; preds = %land.rhs
  %4 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !3048
  %local = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %4, i32 0, i32 18, !dbg !3049
  %externally_visible = getelementptr inbounds %struct.cgraph_local_info, %struct.cgraph_local_info* %local, i32 0, i32 2, !dbg !3050
  %bf.load4 = load i8, i8* %externally_visible, align 8, !dbg !3050
  %bf.lshr5 = lshr i8 %bf.load4, 1, !dbg !3050
  %bf.clear6 = and i8 %bf.lshr5, 1, !dbg !3050
  %bf.cast7 = zext i8 %bf.clear6 to i32, !dbg !3050
  %tobool8 = icmp ne i32 %bf.cast7, 0, !dbg !3051
  %lnot = xor i1 %tobool8, true, !dbg !3051
  br label %lor.end, !dbg !3047

lor.end:                                          ; preds = %lor.rhs, %land.rhs
  %5 = phi i1 [ true, %land.rhs ], [ %lnot, %lor.rhs ]
  br label %land.end

land.end:                                         ; preds = %lor.end, %entry
  %6 = phi i1 [ false, %entry ], [ %5, %lor.end ], !dbg !3052
  %land.ext = zext i1 %6 to i32, !dbg !3045
  %conv = trunc i32 %land.ext to i8, !dbg !3053
  ret i8 %conv, !dbg !3054
}

declare dso_local void @fancy_abort(i8*, i32, i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @update_noncloned_frequencies(%struct.cgraph_node* %node, i32 %freq_scale, i32 %nest) #0 !dbg !3055 {
entry:
  %node.addr = alloca %struct.cgraph_node*, align 8
  %freq_scale.addr = alloca i32, align 4
  %nest.addr = alloca i32, align 4
  %e = alloca %struct.cgraph_edge*, align 8
  store %struct.cgraph_node* %node, %struct.cgraph_node** %node.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %node.addr, metadata !3058, metadata !DIExpression()), !dbg !3059
  store i32 %freq_scale, i32* %freq_scale.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %freq_scale.addr, metadata !3060, metadata !DIExpression()), !dbg !3061
  store i32 %nest, i32* %nest.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %nest.addr, metadata !3062, metadata !DIExpression()), !dbg !3063
  call void @llvm.dbg.declare(metadata %struct.cgraph_edge** %e, metadata !3064, metadata !DIExpression()), !dbg !3065
  %0 = load i32, i32* %freq_scale.addr, align 4, !dbg !3066
  %tobool = icmp ne i32 %0, 0, !dbg !3066
  br i1 %tobool, label %if.end, label %if.then, !dbg !3068

if.then:                                          ; preds = %entry
  store i32 1, i32* %freq_scale.addr, align 4, !dbg !3069
  br label %if.end, !dbg !3070

if.end:                                           ; preds = %if.then, %entry
  %1 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !3071
  %callees = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %1, i32 0, i32 1, !dbg !3073
  %2 = load %struct.cgraph_edge*, %struct.cgraph_edge** %callees, align 8, !dbg !3073
  store %struct.cgraph_edge* %2, %struct.cgraph_edge** %e, align 8, !dbg !3074
  br label %for.cond, !dbg !3075

for.cond:                                         ; preds = %for.inc, %if.end
  %3 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !3076
  %tobool1 = icmp ne %struct.cgraph_edge* %3, null, !dbg !3078
  br i1 %tobool1, label %for.body, label %for.end, !dbg !3078

for.body:                                         ; preds = %for.cond
  %4 = load i32, i32* %nest.addr, align 4, !dbg !3079
  %5 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !3081
  %loop_nest = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %5, i32 0, i32 13, !dbg !3082
  %6 = load i16, i16* %loop_nest, align 8, !dbg !3083
  %conv = zext i16 %6 to i32, !dbg !3083
  %add = add nsw i32 %conv, %4, !dbg !3083
  %conv2 = trunc i32 %add to i16, !dbg !3083
  store i16 %conv2, i16* %loop_nest, align 8, !dbg !3083
  %7 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !3084
  %frequency = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %7, i32 0, i32 11, !dbg !3085
  %8 = load i32, i32* %frequency, align 8, !dbg !3085
  %conv3 = sext i32 %8 to i64, !dbg !3084
  %9 = load i32, i32* %freq_scale.addr, align 4, !dbg !3086
  %conv4 = sext i32 %9 to i64, !dbg !3087
  %mul = mul nsw i64 %conv3, %conv4, !dbg !3088
  %div = sdiv i64 %mul, 1000, !dbg !3089
  %conv5 = trunc i64 %div to i32, !dbg !3084
  %10 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !3090
  %frequency6 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %10, i32 0, i32 11, !dbg !3091
  store i32 %conv5, i32* %frequency6, align 8, !dbg !3092
  %11 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !3093
  %frequency7 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %11, i32 0, i32 11, !dbg !3095
  %12 = load i32, i32* %frequency7, align 8, !dbg !3095
  %cmp = icmp sgt i32 %12, 100000, !dbg !3096
  br i1 %cmp, label %if.then9, label %if.end11, !dbg !3097

if.then9:                                         ; preds = %for.body
  %13 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !3098
  %frequency10 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %13, i32 0, i32 11, !dbg !3099
  store i32 100000, i32* %frequency10, align 8, !dbg !3100
  br label %if.end11, !dbg !3098

if.end11:                                         ; preds = %if.then9, %for.body
  %14 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !3101
  %inline_failed = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %14, i32 0, i32 9, !dbg !3103
  %15 = load i32, i32* %inline_failed, align 8, !dbg !3103
  %tobool12 = icmp ne i32 %15, 0, !dbg !3101
  br i1 %tobool12, label %if.end14, label %if.then13, !dbg !3104

if.then13:                                        ; preds = %if.end11
  %16 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !3105
  %callee = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %16, i32 0, i32 2, !dbg !3106
  %17 = load %struct.cgraph_node*, %struct.cgraph_node** %callee, align 8, !dbg !3106
  %18 = load i32, i32* %freq_scale.addr, align 4, !dbg !3107
  %19 = load i32, i32* %nest.addr, align 4, !dbg !3108
  call void @update_noncloned_frequencies(%struct.cgraph_node* %17, i32 %18, i32 %19), !dbg !3109
  br label %if.end14, !dbg !3109

if.end14:                                         ; preds = %if.then13, %if.end11
  br label %for.inc, !dbg !3110

for.inc:                                          ; preds = %if.end14
  %20 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !3111
  %next_callee = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %20, i32 0, i32 6, !dbg !3112
  %21 = load %struct.cgraph_edge*, %struct.cgraph_edge** %next_callee, align 8, !dbg !3112
  store %struct.cgraph_edge* %21, %struct.cgraph_edge** %e, align 8, !dbg !3113
  br label %for.cond, !dbg !3114, !llvm.loop !3115

for.end:                                          ; preds = %for.cond
  ret void, !dbg !3117
}

declare dso_local %struct.cgraph_node* @cgraph_clone_node(%struct.cgraph_node*, i64, i32, i32, i8 zeroext, %struct.VEC_cgraph_edge_p_heap*) #2

declare dso_local void @cgraph_redirect_edge_callee(%struct.cgraph_edge*, %struct.cgraph_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.inline_summary* @inline_summary(%struct.cgraph_node* %node) #0 !dbg !3118 {
entry:
  %node.addr = alloca %struct.cgraph_node*, align 8
  store %struct.cgraph_node* %node, %struct.cgraph_node** %node.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %node.addr, metadata !3122, metadata !DIExpression()), !dbg !3123
  %0 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !3124
  %local = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %0, i32 0, i32 18, !dbg !3125
  %inline_summary = getelementptr inbounds %struct.cgraph_local_info, %struct.cgraph_local_info* %local, i32 0, i32 1, !dbg !3126
  ret %struct.inline_summary* %inline_summary, !dbg !3127
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @cgraph_gate_early_inlining() #0 !dbg !3128 {
entry:
  %0 = load i32, i32* @flag_early_inlining, align 4, !dbg !3129
  %conv = trunc i32 %0 to i8, !dbg !3129
  ret i8 %conv, !dbg !3130
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @cgraph_early_inlining() #0 !dbg !3131 {
entry:
  %retval = alloca i32, align 4
  %node = alloca %struct.cgraph_node*, align 8
  %todo = alloca i32, align 4
  %iterations = alloca i32, align 4
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %node, metadata !3132, metadata !DIExpression()), !dbg !3133
  %0 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8, !dbg !3134
  %call = call %struct.cgraph_node* @cgraph_node(%union.tree_node* %0), !dbg !3135
  store %struct.cgraph_node* %call, %struct.cgraph_node** %node, align 8, !dbg !3133
  call void @llvm.dbg.declare(metadata i32* %todo, metadata !3136, metadata !DIExpression()), !dbg !3137
  store i32 0, i32* %todo, align 4, !dbg !3137
  call void @llvm.dbg.declare(metadata i32* %iterations, metadata !3138, metadata !DIExpression()), !dbg !3139
  store i32 0, i32* %iterations, align 4, !dbg !3139
  %1 = load %struct.diagnostic_context*, %struct.diagnostic_context** @global_dc, align 8, !dbg !3140
  %diagnostic_count = getelementptr inbounds %struct.diagnostic_context, %struct.diagnostic_context* %1, i32 0, i32 1, !dbg !3140
  %arrayidx = getelementptr inbounds [12 x i32], [12 x i32]* %diagnostic_count, i64 0, i64 5, !dbg !3140
  %2 = load i32, i32* %arrayidx, align 4, !dbg !3140
  %tobool = icmp ne i32 %2, 0, !dbg !3140
  br i1 %tobool, label %if.then, label %lor.lhs.false, !dbg !3142

lor.lhs.false:                                    ; preds = %entry
  %3 = load %struct.diagnostic_context*, %struct.diagnostic_context** @global_dc, align 8, !dbg !3143
  %diagnostic_count1 = getelementptr inbounds %struct.diagnostic_context, %struct.diagnostic_context* %3, i32 0, i32 1, !dbg !3143
  %arrayidx2 = getelementptr inbounds [12 x i32], [12 x i32]* %diagnostic_count1, i64 0, i64 4, !dbg !3143
  %4 = load i32, i32* %arrayidx2, align 8, !dbg !3143
  %tobool3 = icmp ne i32 %4, 0, !dbg !3143
  br i1 %tobool3, label %if.then, label %if.end, !dbg !3144

if.then:                                          ; preds = %lor.lhs.false, %entry
  store i32 0, i32* %retval, align 4, !dbg !3145
  br label %return, !dbg !3145

if.end:                                           ; preds = %lor.lhs.false
  br label %while.cond, !dbg !3146

while.cond:                                       ; preds = %do.end16, %if.end
  %5 = load i32, i32* %iterations, align 4, !dbg !3147
  %6 = load %struct.param_info*, %struct.param_info** @compiler_params, align 8, !dbg !3148
  %arrayidx4 = getelementptr inbounds %struct.param_info, %struct.param_info* %6, i64 9, !dbg !3148
  %value = getelementptr inbounds %struct.param_info, %struct.param_info* %arrayidx4, i32 0, i32 1, !dbg !3148
  %7 = load i32, i32* %value, align 8, !dbg !3148
  %cmp = icmp slt i32 %5, %7, !dbg !3149
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !3150

land.rhs:                                         ; preds = %while.cond
  %8 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !3151
  %9 = load i32, i32* %iterations, align 4, !dbg !3152
  %tobool5 = icmp ne i32 %9, 0, !dbg !3152
  %10 = zext i1 %tobool5 to i64, !dbg !3152
  %cond = select i1 %tobool5, i32 2, i32 3, !dbg !3152
  %call6 = call zeroext i8 @cgraph_decide_inlining_incrementally(%struct.cgraph_node* %8, i32 %cond, i32 0), !dbg !3153
  %conv = zext i8 %call6 to i32, !dbg !3153
  %tobool7 = icmp ne i32 %conv, 0, !dbg !3150
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %11 = phi i1 [ false, %while.cond ], [ %tobool7, %land.rhs ], !dbg !3154
  br i1 %11, label %while.body, label %while.end, !dbg !3146

while.body:                                       ; preds = %land.end
  br label %do.body, !dbg !3155

do.body:                                          ; preds = %while.body
  %12 = load i8, i8* @timevar_enable, align 1, !dbg !3157
  %tobool8 = icmp ne i8 %12, 0, !dbg !3157
  br i1 %tobool8, label %if.then9, label %if.end10, !dbg !3160

if.then9:                                         ; preds = %do.body
  call void @timevar_push_1(i32 47), !dbg !3157
  br label %if.end10, !dbg !3157

if.end10:                                         ; preds = %if.then9, %do.body
  br label %do.end, !dbg !3160

do.end:                                           ; preds = %if.end10
  %13 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8, !dbg !3161
  %call11 = call i32 @optimize_inline_calls(%union.tree_node* %13), !dbg !3162
  %14 = load i32, i32* %todo, align 4, !dbg !3163
  %or = or i32 %14, %call11, !dbg !3163
  store i32 %or, i32* %todo, align 4, !dbg !3163
  %15 = load i32, i32* %iterations, align 4, !dbg !3164
  %inc = add nsw i32 %15, 1, !dbg !3164
  store i32 %inc, i32* %iterations, align 4, !dbg !3164
  br label %do.body12, !dbg !3165

do.body12:                                        ; preds = %do.end
  %16 = load i8, i8* @timevar_enable, align 1, !dbg !3166
  %tobool13 = icmp ne i8 %16, 0, !dbg !3166
  br i1 %tobool13, label %if.then14, label %if.end15, !dbg !3169

if.then14:                                        ; preds = %do.body12
  call void @timevar_pop_1(i32 47), !dbg !3166
  br label %if.end15, !dbg !3166

if.end15:                                         ; preds = %if.then14, %do.body12
  br label %do.end16, !dbg !3169

do.end16:                                         ; preds = %if.end15
  br label %while.cond, !dbg !3146, !llvm.loop !3170

while.end:                                        ; preds = %land.end
  %17 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3172
  %tobool17 = icmp ne %struct._IO_FILE* %17, null, !dbg !3172
  br i1 %tobool17, label %if.then18, label %if.end20, !dbg !3174

if.then18:                                        ; preds = %while.end
  %18 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3175
  %19 = load i32, i32* %iterations, align 4, !dbg !3176
  %call19 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %18, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.6, i64 0, i64 0), i32 %19), !dbg !3177
  br label %if.end20, !dbg !3177

if.end20:                                         ; preds = %if.then18, %while.end
  %20 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3178
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %20, i64 0, !dbg !3178
  %always_inline_functions_inlined = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 20, !dbg !3179
  %bf.load = load i32, i32* %always_inline_functions_inlined, align 8, !dbg !3180
  %bf.clear = and i32 %bf.load, -33554433, !dbg !3180
  %bf.set = or i32 %bf.clear, 33554432, !dbg !3180
  store i32 %bf.set, i32* %always_inline_functions_inlined, align 8, !dbg !3180
  %21 = load i32, i32* %todo, align 4, !dbg !3181
  store i32 %21, i32* %retval, align 4, !dbg !3182
  br label %return, !dbg !3182

return:                                           ; preds = %if.end20, %if.then
  %22 = load i32, i32* %retval, align 4, !dbg !3183
  ret i32 %22, !dbg !3183
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @cgraph_gate_ipa_early_inlining() #0 !dbg !3184 {
entry:
  %0 = load i32, i32* @flag_early_inlining, align 4, !dbg !3185
  %tobool = icmp ne i32 %0, 0, !dbg !3185
  br i1 %tobool, label %land.lhs.true, label %land.end, !dbg !3186

land.lhs.true:                                    ; preds = %entry
  %1 = load i8, i8* @in_lto_p, align 1, !dbg !3187
  %tobool1 = icmp ne i8 %1, 0, !dbg !3187
  br i1 %tobool1, label %land.end, label %land.rhs, !dbg !3188

land.rhs:                                         ; preds = %land.lhs.true
  %2 = load i32, i32* @flag_branch_probabilities, align 4, !dbg !3189
  %tobool2 = icmp ne i32 %2, 0, !dbg !3189
  br i1 %tobool2, label %lor.end, label %lor.lhs.false, !dbg !3190

lor.lhs.false:                                    ; preds = %land.rhs
  %3 = load i32, i32* @flag_test_coverage, align 4, !dbg !3191
  %tobool3 = icmp ne i32 %3, 0, !dbg !3191
  br i1 %tobool3, label %lor.end, label %lor.rhs, !dbg !3192

lor.rhs:                                          ; preds = %lor.lhs.false
  %4 = load i32, i32* @profile_arc_flag, align 4, !dbg !3193
  %tobool4 = icmp ne i32 %4, 0, !dbg !3192
  br label %lor.end, !dbg !3192

lor.end:                                          ; preds = %lor.rhs, %lor.lhs.false, %land.rhs
  %5 = phi i1 [ true, %lor.lhs.false ], [ true, %land.rhs ], [ %tobool4, %lor.rhs ]
  br label %land.end

land.end:                                         ; preds = %lor.end, %land.lhs.true, %entry
  %6 = phi i1 [ false, %land.lhs.true ], [ false, %entry ], [ %5, %lor.end ], !dbg !3194
  %land.ext = zext i1 %6 to i32, !dbg !3188
  %conv = trunc i32 %land.ext to i8, !dbg !3195
  ret i8 %conv, !dbg !3196
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @compute_inline_parameters(%struct.cgraph_node* %node) #0 !dbg !3197 {
entry:
  %node.addr = alloca %struct.cgraph_node*, align 8
  %self_stack_size = alloca i64, align 8
  store %struct.cgraph_node* %node, %struct.cgraph_node** %node.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %node.addr, metadata !3198, metadata !DIExpression()), !dbg !3199
  call void @llvm.dbg.declare(metadata i64* %self_stack_size, metadata !3200, metadata !DIExpression()), !dbg !3201
  %0 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !3202
  %global = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %0, i32 0, i32 19, !dbg !3202
  %inlined_to = getelementptr inbounds %struct.cgraph_global_info, %struct.cgraph_global_info* %global, i32 0, i32 2, !dbg !3202
  %1 = load %struct.cgraph_node*, %struct.cgraph_node** %inlined_to, align 8, !dbg !3202
  %tobool = icmp ne %struct.cgraph_node* %1, null, !dbg !3202
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !3202

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0), i32 1865, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !3202
  br label %cond.end, !dbg !3202

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !3202

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !3202
  %2 = load i32, i32* @optimize, align 4, !dbg !3203
  %tobool1 = icmp ne i32 %2, 0, !dbg !3203
  br i1 %tobool1, label %cond.true2, label %cond.false3, !dbg !3203

cond.true2:                                       ; preds = %cond.end
  %call = call i64 @estimated_stack_frame_size(), !dbg !3204
  br label %cond.end4, !dbg !3203

cond.false3:                                      ; preds = %cond.end
  br label %cond.end4, !dbg !3203

cond.end4:                                        ; preds = %cond.false3, %cond.true2
  %cond5 = phi i64 [ %call, %cond.true2 ], [ 0, %cond.false3 ], !dbg !3203
  store i64 %cond5, i64* %self_stack_size, align 8, !dbg !3205
  %3 = load i64, i64* %self_stack_size, align 8, !dbg !3206
  %4 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !3207
  %call6 = call %struct.inline_summary* @inline_summary(%struct.cgraph_node* %4), !dbg !3208
  %estimated_self_stack_size = getelementptr inbounds %struct.inline_summary, %struct.inline_summary* %call6, i32 0, i32 0, !dbg !3209
  store i64 %3, i64* %estimated_self_stack_size, align 8, !dbg !3210
  %5 = load i64, i64* %self_stack_size, align 8, !dbg !3211
  %6 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !3212
  %global7 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %6, i32 0, i32 19, !dbg !3213
  %estimated_stack_size = getelementptr inbounds %struct.cgraph_global_info, %struct.cgraph_global_info* %global7, i32 0, i32 0, !dbg !3214
  store i64 %5, i64* %estimated_stack_size, align 8, !dbg !3215
  %7 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !3216
  %global8 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %7, i32 0, i32 19, !dbg !3217
  %stack_frame_offset = getelementptr inbounds %struct.cgraph_global_info, %struct.cgraph_global_info* %global8, i32 0, i32 1, !dbg !3218
  store i64 0, i64* %stack_frame_offset, align 8, !dbg !3219
  %8 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !3220
  %decl = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %8, i32 0, i32 0, !dbg !3221
  %9 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !3221
  %call9 = call zeroext i8 @tree_inlinable_function_p(%union.tree_node* %9), !dbg !3222
  %conv = zext i8 %call9 to i32, !dbg !3222
  %10 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !3223
  %local = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %10, i32 0, i32 18, !dbg !3224
  %inlinable = getelementptr inbounds %struct.cgraph_local_info, %struct.cgraph_local_info* %local, i32 0, i32 2, !dbg !3225
  %11 = trunc i32 %conv to i8, !dbg !3226
  %bf.load = load i8, i8* %inlinable, align 8, !dbg !3226
  %bf.value = and i8 %11, 1, !dbg !3226
  %bf.shl = shl i8 %bf.value, 3, !dbg !3226
  %bf.clear = and i8 %bf.load, -9, !dbg !3226
  %bf.set = or i8 %bf.clear, %bf.shl, !dbg !3226
  store i8 %bf.set, i8* %inlinable, align 8, !dbg !3226
  %bf.result.cast = zext i8 %bf.value to i32, !dbg !3226
  %12 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !3227
  %local10 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %12, i32 0, i32 18, !dbg !3229
  %inlinable11 = getelementptr inbounds %struct.cgraph_local_info, %struct.cgraph_local_info* %local10, i32 0, i32 2, !dbg !3230
  %bf.load12 = load i8, i8* %inlinable11, align 8, !dbg !3230
  %bf.lshr = lshr i8 %bf.load12, 3, !dbg !3230
  %bf.clear13 = and i8 %bf.lshr, 1, !dbg !3230
  %bf.cast = zext i8 %bf.clear13 to i32, !dbg !3230
  %tobool14 = icmp ne i32 %bf.cast, 0, !dbg !3227
  br i1 %tobool14, label %land.lhs.true, label %if.end, !dbg !3231

land.lhs.true:                                    ; preds = %cond.end4
  %13 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !3232
  %local15 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %13, i32 0, i32 18, !dbg !3233
  %disregard_inline_limits = getelementptr inbounds %struct.cgraph_local_info, %struct.cgraph_local_info* %local15, i32 0, i32 2, !dbg !3234
  %bf.load16 = load i8, i8* %disregard_inline_limits, align 8, !dbg !3234
  %bf.lshr17 = lshr i8 %bf.load16, 4, !dbg !3234
  %bf.clear18 = and i8 %bf.lshr17, 1, !dbg !3234
  %bf.cast19 = zext i8 %bf.clear18 to i32, !dbg !3234
  %tobool20 = icmp ne i32 %bf.cast19, 0, !dbg !3232
  br i1 %tobool20, label %if.end, label %if.then, !dbg !3235

if.then:                                          ; preds = %land.lhs.true
  %14 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !3236
  %decl21 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %14, i32 0, i32 0, !dbg !3236
  %15 = load %union.tree_node*, %union.tree_node** %decl21, align 8, !dbg !3236
  %function_decl = bitcast %union.tree_node* %15 to %struct.tree_function_decl*, !dbg !3236
  %disregard_inline_limits22 = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl, i32 0, i32 5, !dbg !3236
  %bf.load23 = load i32, i32* %disregard_inline_limits22, align 8, !dbg !3236
  %bf.lshr24 = lshr i32 %bf.load23, 26, !dbg !3236
  %bf.clear25 = and i32 %bf.lshr24, 1, !dbg !3236
  %16 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !3237
  %local26 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %16, i32 0, i32 18, !dbg !3238
  %disregard_inline_limits27 = getelementptr inbounds %struct.cgraph_local_info, %struct.cgraph_local_info* %local26, i32 0, i32 2, !dbg !3239
  %17 = trunc i32 %bf.clear25 to i8, !dbg !3240
  %bf.load28 = load i8, i8* %disregard_inline_limits27, align 8, !dbg !3240
  %bf.value29 = and i8 %17, 1, !dbg !3240
  %bf.shl30 = shl i8 %bf.value29, 4, !dbg !3240
  %bf.clear31 = and i8 %bf.load28, -17, !dbg !3240
  %bf.set32 = or i8 %bf.clear31, %bf.shl30, !dbg !3240
  store i8 %bf.set32, i8* %disregard_inline_limits27, align 8, !dbg !3240
  %bf.result.cast33 = zext i8 %bf.value29 to i32, !dbg !3240
  br label %if.end, !dbg !3237

if.end:                                           ; preds = %if.then, %land.lhs.true, %cond.end4
  %18 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !3241
  call void @estimate_function_body_sizes(%struct.cgraph_node* %18), !dbg !3242
  %19 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !3243
  %call34 = call %struct.inline_summary* @inline_summary(%struct.cgraph_node* %19), !dbg !3244
  %self_time = getelementptr inbounds %struct.inline_summary, %struct.inline_summary* %call34, i32 0, i32 3, !dbg !3245
  %20 = load i32, i32* %self_time, align 8, !dbg !3245
  %21 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !3246
  %global35 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %21, i32 0, i32 19, !dbg !3247
  %time = getelementptr inbounds %struct.cgraph_global_info, %struct.cgraph_global_info* %global35, i32 0, i32 3, !dbg !3248
  store i32 %20, i32* %time, align 8, !dbg !3249
  %22 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !3250
  %call36 = call %struct.inline_summary* @inline_summary(%struct.cgraph_node* %22), !dbg !3251
  %self_size = getelementptr inbounds %struct.inline_summary, %struct.inline_summary* %call36, i32 0, i32 1, !dbg !3252
  %23 = load i32, i32* %self_size, align 8, !dbg !3252
  %24 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !3253
  %global37 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %24, i32 0, i32 19, !dbg !3254
  %size = getelementptr inbounds %struct.cgraph_global_info, %struct.cgraph_global_info* %global37, i32 0, i32 4, !dbg !3255
  store i32 %23, i32* %size, align 4, !dbg !3256
  ret i32 0, !dbg !3257
}

declare dso_local i64 @estimated_stack_frame_size() #2

declare dso_local zeroext i8 @tree_inlinable_function_p(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @estimate_function_body_sizes(%struct.cgraph_node* %node) #0 !dbg !3258 {
entry:
  %node.addr = alloca %struct.cgraph_node*, align 8
  %time = alloca i64, align 8
  %time_inlining_benefit = alloca i64, align 8
  %size = alloca i32, align 4
  %size_inlining_benefit = alloca i32, align 4
  %bb = alloca %struct.basic_block_def*, align 8
  %bsi = alloca %struct.gimple_stmt_iterator, align 8
  %my_function = alloca %struct.function*, align 8
  %arg = alloca %union.tree_node*, align 8
  %freq = alloca i32, align 4
  %funtype = alloca %union.tree_node*, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  %this_size = alloca i32, align 4
  %this_time = alloca i32, align 4
  %cost = alloca i32, align 4
  %cost89 = alloca i32, align 4
  store %struct.cgraph_node* %node, %struct.cgraph_node** %node.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %node.addr, metadata !3259, metadata !DIExpression()), !dbg !3260
  call void @llvm.dbg.declare(metadata i64* %time, metadata !3261, metadata !DIExpression()), !dbg !3262
  store i64 0, i64* %time, align 8, !dbg !3262
  call void @llvm.dbg.declare(metadata i64* %time_inlining_benefit, metadata !3263, metadata !DIExpression()), !dbg !3264
  store i64 0, i64* %time_inlining_benefit, align 8, !dbg !3264
  call void @llvm.dbg.declare(metadata i32* %size, metadata !3265, metadata !DIExpression()), !dbg !3266
  store i32 0, i32* %size, align 4, !dbg !3266
  call void @llvm.dbg.declare(metadata i32* %size_inlining_benefit, metadata !3267, metadata !DIExpression()), !dbg !3268
  store i32 0, i32* %size_inlining_benefit, align 4, !dbg !3268
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !3269, metadata !DIExpression()), !dbg !3270
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %bsi, metadata !3271, metadata !DIExpression()), !dbg !3278
  call void @llvm.dbg.declare(metadata %struct.function** %my_function, metadata !3279, metadata !DIExpression()), !dbg !3280
  %0 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !3281
  %decl = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %0, i32 0, i32 0, !dbg !3281
  %1 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !3281
  %function_decl = bitcast %union.tree_node* %1 to %struct.tree_function_decl*, !dbg !3281
  %f = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl, i32 0, i32 1, !dbg !3281
  %2 = load %struct.function*, %struct.function** %f, align 8, !dbg !3281
  store %struct.function* %2, %struct.function** %my_function, align 8, !dbg !3280
  call void @llvm.dbg.declare(metadata %union.tree_node** %arg, metadata !3282, metadata !DIExpression()), !dbg !3283
  call void @llvm.dbg.declare(metadata i32* %freq, metadata !3284, metadata !DIExpression()), !dbg !3285
  call void @llvm.dbg.declare(metadata %union.tree_node** %funtype, metadata !3286, metadata !DIExpression()), !dbg !3287
  %3 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !3288
  %decl1 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %3, i32 0, i32 0, !dbg !3288
  %4 = load %union.tree_node*, %union.tree_node** %decl1, align 8, !dbg !3288
  %common = bitcast %union.tree_node* %4 to %struct.tree_common*, !dbg !3288
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !3288
  %5 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !3288
  store %union.tree_node* %5, %union.tree_node** %funtype, align 8, !dbg !3287
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3289
  %tobool = icmp ne %struct._IO_FILE* %6, null, !dbg !3289
  br i1 %tobool, label %if.then, label %if.end, !dbg !3291

if.then:                                          ; preds = %entry
  %7 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3292
  %8 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !3293
  %call = call i8* @cgraph_node_name(%struct.cgraph_node* %8), !dbg !3294
  %call2 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %7, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.21, i64 0, i64 0), i8* %call), !dbg !3295
  br label %if.end, !dbg !3295

if.end:                                           ; preds = %if.then, %entry
  %9 = load %struct.function*, %struct.function** %my_function, align 8, !dbg !3296
  %tobool3 = icmp ne %struct.function* %9, null, !dbg !3296
  br i1 %tobool3, label %land.lhs.true, label %cond.true, !dbg !3296

land.lhs.true:                                    ; preds = %if.end
  %10 = load %struct.function*, %struct.function** %my_function, align 8, !dbg !3296
  %cfg = getelementptr inbounds %struct.function, %struct.function* %10, i32 0, i32 1, !dbg !3296
  %11 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !3296
  %tobool4 = icmp ne %struct.control_flow_graph* %11, null, !dbg !3296
  br i1 %tobool4, label %cond.false, label %cond.true, !dbg !3296

cond.true:                                        ; preds = %land.lhs.true, %if.end
  call void @fancy_abort(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0), i32 1793, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !3296
  br label %cond.end, !dbg !3296

cond.false:                                       ; preds = %land.lhs.true
  br label %cond.end, !dbg !3296

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !3296
  %12 = load %struct.function*, %struct.function** %my_function, align 8, !dbg !3297
  %cfg5 = getelementptr inbounds %struct.function, %struct.function* %12, i32 0, i32 1, !dbg !3297
  %13 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg5, align 8, !dbg !3297
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %13, i32 0, i32 0, !dbg !3297
  %14 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !3297
  %next_bb = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %14, i32 0, i32 6, !dbg !3297
  %15 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb, align 8, !dbg !3297
  store %struct.basic_block_def* %15, %struct.basic_block_def** %bb, align 8, !dbg !3297
  br label %for.cond, !dbg !3297

for.cond:                                         ; preds = %for.inc49, %cond.end
  %16 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3299
  %17 = load %struct.function*, %struct.function** %my_function, align 8, !dbg !3299
  %cfg6 = getelementptr inbounds %struct.function, %struct.function* %17, i32 0, i32 1, !dbg !3299
  %18 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg6, align 8, !dbg !3299
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %18, i32 0, i32 1, !dbg !3299
  %19 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !3299
  %cmp = icmp ne %struct.basic_block_def* %16, %19, !dbg !3299
  br i1 %cmp, label %for.body, label %for.end51, !dbg !3297

for.body:                                         ; preds = %for.cond
  %20 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !3301
  %decl7 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %20, i32 0, i32 0, !dbg !3303
  %21 = load %union.tree_node*, %union.tree_node** %decl7, align 8, !dbg !3303
  %22 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3304
  %call8 = call i32 @compute_call_stmt_bb_frequency(%union.tree_node* %21, %struct.basic_block_def* %22), !dbg !3305
  store i32 %call8, i32* %freq, align 4, !dbg !3306
  %23 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3307
  call void @gsi_start_bb(%struct.gimple_stmt_iterator* sret %tmp, %struct.basic_block_def* %23), !dbg !3309
  %24 = bitcast %struct.gimple_stmt_iterator* %bsi to i8*, !dbg !3309
  %25 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !3309
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %24, i8* align 8 %25, i64 24, i1 false), !dbg !3309
  br label %for.cond9, !dbg !3310

for.cond9:                                        ; preds = %for.inc, %for.body
  %call10 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %bsi), !dbg !3311
  %tobool11 = icmp ne i8 %call10, 0, !dbg !3313
  %lnot = xor i1 %tobool11, true, !dbg !3313
  br i1 %lnot, label %for.body12, label %for.end, !dbg !3314

for.body12:                                       ; preds = %for.cond9
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !3315, metadata !DIExpression()), !dbg !3317
  %call13 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %bsi), !dbg !3318
  store %union.gimple_statement_d* %call13, %union.gimple_statement_d** %stmt, align 8, !dbg !3317
  call void @llvm.dbg.declare(metadata i32* %this_size, metadata !3319, metadata !DIExpression()), !dbg !3320
  %26 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !3321
  %call14 = call i32 @estimate_num_insns(%union.gimple_statement_d* %26, %struct.eni_weights_d* @eni_size_weights), !dbg !3322
  store i32 %call14, i32* %this_size, align 4, !dbg !3320
  call void @llvm.dbg.declare(metadata i32* %this_time, metadata !3323, metadata !DIExpression()), !dbg !3324
  %27 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !3325
  %call15 = call i32 @estimate_num_insns(%union.gimple_statement_d* %27, %struct.eni_weights_d* @eni_time_weights), !dbg !3326
  store i32 %call15, i32* %this_time, align 4, !dbg !3324
  %28 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3327
  %tobool16 = icmp ne %struct._IO_FILE* %28, null, !dbg !3327
  br i1 %tobool16, label %land.lhs.true17, label %if.end21, !dbg !3329

land.lhs.true17:                                  ; preds = %for.body12
  %29 = load i32, i32* @dump_flags, align 4, !dbg !3330
  %and = and i32 %29, 8, !dbg !3331
  %tobool18 = icmp ne i32 %and, 0, !dbg !3331
  br i1 %tobool18, label %if.then19, label %if.end21, !dbg !3332

if.then19:                                        ; preds = %land.lhs.true17
  %30 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3333
  %31 = load i32, i32* %freq, align 4, !dbg !3335
  %32 = load i32, i32* %this_size, align 4, !dbg !3336
  %33 = load i32, i32* %this_time, align 4, !dbg !3337
  %call20 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %30, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.22, i64 0, i64 0), i32 %31, i32 %32, i32 %33), !dbg !3338
  %34 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3339
  %35 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !3340
  call void @print_gimple_stmt(%struct._IO_FILE* %34, %union.gimple_statement_d* %35, i32 0, i32 0), !dbg !3341
  br label %if.end21, !dbg !3342

if.end21:                                         ; preds = %if.then19, %land.lhs.true17, %for.body12
  %36 = load i32, i32* %freq, align 4, !dbg !3343
  %37 = load i32, i32* %this_time, align 4, !dbg !3344
  %mul = mul nsw i32 %37, %36, !dbg !3344
  store i32 %mul, i32* %this_time, align 4, !dbg !3344
  %38 = load i32, i32* %this_time, align 4, !dbg !3345
  %conv = sext i32 %38 to i64, !dbg !3345
  %39 = load i64, i64* %time, align 8, !dbg !3346
  %add = add nsw i64 %39, %conv, !dbg !3346
  store i64 %add, i64* %time, align 8, !dbg !3346
  %40 = load i32, i32* %this_size, align 4, !dbg !3347
  %41 = load i32, i32* %size, align 4, !dbg !3348
  %add22 = add nsw i32 %41, %40, !dbg !3348
  store i32 %add22, i32* %size, align 4, !dbg !3348
  %42 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !3349
  %call23 = call zeroext i8 @likely_eliminated_by_inlining_p(%union.gimple_statement_d* %42), !dbg !3351
  %tobool24 = icmp ne i8 %call23, 0, !dbg !3351
  br i1 %tobool24, label %if.then25, label %if.end36, !dbg !3352

if.then25:                                        ; preds = %if.end21
  %43 = load i32, i32* %this_size, align 4, !dbg !3353
  %44 = load i32, i32* %size_inlining_benefit, align 4, !dbg !3355
  %add26 = add nsw i32 %44, %43, !dbg !3355
  store i32 %add26, i32* %size_inlining_benefit, align 4, !dbg !3355
  %45 = load i32, i32* %this_time, align 4, !dbg !3356
  %conv27 = sext i32 %45 to i64, !dbg !3356
  %46 = load i64, i64* %time_inlining_benefit, align 8, !dbg !3357
  %add28 = add nsw i64 %46, %conv27, !dbg !3357
  store i64 %add28, i64* %time_inlining_benefit, align 8, !dbg !3357
  %47 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3358
  %tobool29 = icmp ne %struct._IO_FILE* %47, null, !dbg !3358
  br i1 %tobool29, label %land.lhs.true30, label %if.end35, !dbg !3360

land.lhs.true30:                                  ; preds = %if.then25
  %48 = load i32, i32* @dump_flags, align 4, !dbg !3361
  %and31 = and i32 %48, 8, !dbg !3362
  %tobool32 = icmp ne i32 %and31, 0, !dbg !3362
  br i1 %tobool32, label %if.then33, label %if.end35, !dbg !3363

if.then33:                                        ; preds = %land.lhs.true30
  %49 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3364
  %call34 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %49, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.23, i64 0, i64 0)), !dbg !3365
  br label %if.end35, !dbg !3365

if.end35:                                         ; preds = %if.then33, %land.lhs.true30, %if.then25
  br label %if.end36, !dbg !3366

if.end36:                                         ; preds = %if.end35, %if.end21
  %50 = load i64, i64* %time, align 8, !dbg !3367
  %cmp37 = icmp sge i64 %50, 0, !dbg !3367
  br i1 %cmp37, label %cond.false40, label %cond.true39, !dbg !3367

cond.true39:                                      ; preds = %if.end36
  call void @fancy_abort(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0), i32 1819, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !3367
  br label %cond.end41, !dbg !3367

cond.false40:                                     ; preds = %if.end36
  br label %cond.end41, !dbg !3367

cond.end41:                                       ; preds = %cond.false40, %cond.true39
  %cond42 = phi i32 [ 0, %cond.true39 ], [ 0, %cond.false40 ], !dbg !3367
  %51 = load i32, i32* %size, align 4, !dbg !3368
  %cmp43 = icmp sge i32 %51, 0, !dbg !3368
  br i1 %cmp43, label %cond.false46, label %cond.true45, !dbg !3368

cond.true45:                                      ; preds = %cond.end41
  call void @fancy_abort(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0), i32 1820, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !3368
  br label %cond.end47, !dbg !3368

cond.false46:                                     ; preds = %cond.end41
  br label %cond.end47, !dbg !3368

cond.end47:                                       ; preds = %cond.false46, %cond.true45
  %cond48 = phi i32 [ 0, %cond.true45 ], [ 0, %cond.false46 ], !dbg !3368
  br label %for.inc, !dbg !3369

for.inc:                                          ; preds = %cond.end47
  call void @gsi_next(%struct.gimple_stmt_iterator* %bsi), !dbg !3370
  br label %for.cond9, !dbg !3371, !llvm.loop !3372

for.end:                                          ; preds = %for.cond9
  br label %for.inc49, !dbg !3374

for.inc49:                                        ; preds = %for.end
  %52 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3299
  %next_bb50 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %52, i32 0, i32 6, !dbg !3299
  %53 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb50, align 8, !dbg !3299
  store %struct.basic_block_def* %53, %struct.basic_block_def** %bb, align 8, !dbg !3299
  br label %for.cond, !dbg !3299, !llvm.loop !3375

for.end51:                                        ; preds = %for.cond
  %54 = load i64, i64* %time, align 8, !dbg !3377
  %add52 = add nsw i64 %54, 500, !dbg !3378
  %div = sdiv i64 %add52, 1000, !dbg !3379
  store i64 %div, i64* %time, align 8, !dbg !3380
  %55 = load i64, i64* %time_inlining_benefit, align 8, !dbg !3381
  %add53 = add nsw i64 %55, 500, !dbg !3382
  %div54 = sdiv i64 %add53, 1000, !dbg !3383
  store i64 %div54, i64* %time_inlining_benefit, align 8, !dbg !3384
  %56 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3385
  %tobool55 = icmp ne %struct._IO_FILE* %56, null, !dbg !3385
  br i1 %tobool55, label %if.then56, label %if.end60, !dbg !3387

if.then56:                                        ; preds = %for.end51
  %57 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3388
  %58 = load i64, i64* %time, align 8, !dbg !3389
  %conv57 = trunc i64 %58 to i32, !dbg !3390
  %59 = load i64, i64* %time_inlining_benefit, align 8, !dbg !3391
  %conv58 = trunc i64 %59 to i32, !dbg !3392
  %60 = load i32, i32* %size, align 4, !dbg !3393
  %61 = load i32, i32* %size_inlining_benefit, align 4, !dbg !3394
  %call59 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %57, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.24, i64 0, i64 0), i32 %conv57, i32 %conv58, i32 %60, i32 %61), !dbg !3395
  br label %if.end60, !dbg !3395

if.end60:                                         ; preds = %if.then56, %for.end51
  %62 = load i32, i32* getelementptr inbounds (%struct.eni_weights_d, %struct.eni_weights_d* @eni_time_weights, i32 0, i32 0), align 4, !dbg !3396
  %conv61 = zext i32 %62 to i64, !dbg !3397
  %63 = load i64, i64* %time_inlining_benefit, align 8, !dbg !3398
  %add62 = add nsw i64 %63, %conv61, !dbg !3398
  store i64 %add62, i64* %time_inlining_benefit, align 8, !dbg !3398
  %64 = load i32, i32* getelementptr inbounds (%struct.eni_weights_d, %struct.eni_weights_d* @eni_size_weights, i32 0, i32 0), align 4, !dbg !3399
  %65 = load i32, i32* %size_inlining_benefit, align 4, !dbg !3400
  %add63 = add i32 %65, %64, !dbg !3400
  store i32 %add63, i32* %size_inlining_benefit, align 4, !dbg !3400
  %66 = load %union.tree_node*, %union.tree_node** %funtype, align 8, !dbg !3401
  %common64 = bitcast %union.tree_node* %66 to %struct.tree_common*, !dbg !3401
  %type65 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common64, i32 0, i32 2, !dbg !3401
  %67 = load %union.tree_node*, %union.tree_node** %type65, align 8, !dbg !3401
  %base = bitcast %union.tree_node* %67 to %struct.tree_base*, !dbg !3401
  %68 = bitcast %struct.tree_base* %base to i64*, !dbg !3401
  %bf.load = load i64, i64* %68, align 8, !dbg !3401
  %bf.clear = and i64 %bf.load, 65535, !dbg !3401
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !3401
  %cmp66 = icmp eq i32 %bf.cast, 19, !dbg !3401
  br i1 %cmp66, label %if.end75, label %if.then68, !dbg !3403

if.then68:                                        ; preds = %if.end60
  call void @llvm.dbg.declare(metadata i32* %cost, metadata !3404, metadata !DIExpression()), !dbg !3406
  %69 = load %union.tree_node*, %union.tree_node** %funtype, align 8, !dbg !3407
  %common69 = bitcast %union.tree_node* %69 to %struct.tree_common*, !dbg !3407
  %type70 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common69, i32 0, i32 2, !dbg !3407
  %70 = load %union.tree_node*, %union.tree_node** %type70, align 8, !dbg !3407
  %call71 = call i32 @estimate_move_cost(%union.tree_node* %70), !dbg !3408
  store i32 %call71, i32* %cost, align 4, !dbg !3406
  %71 = load i32, i32* %cost, align 4, !dbg !3409
  %conv72 = sext i32 %71 to i64, !dbg !3409
  %72 = load i64, i64* %time_inlining_benefit, align 8, !dbg !3410
  %add73 = add nsw i64 %72, %conv72, !dbg !3410
  store i64 %add73, i64* %time_inlining_benefit, align 8, !dbg !3410
  %73 = load i32, i32* %cost, align 4, !dbg !3411
  %74 = load i32, i32* %size_inlining_benefit, align 4, !dbg !3412
  %add74 = add nsw i32 %74, %73, !dbg !3412
  store i32 %add74, i32* %size_inlining_benefit, align 4, !dbg !3412
  br label %if.end75, !dbg !3413

if.end75:                                         ; preds = %if.then68, %if.end60
  %75 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !3414
  %decl76 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %75, i32 0, i32 0, !dbg !3414
  %76 = load %union.tree_node*, %union.tree_node** %decl76, align 8, !dbg !3414
  %decl_non_common = bitcast %union.tree_node* %76 to %struct.tree_decl_non_common*, !dbg !3414
  %arguments = getelementptr inbounds %struct.tree_decl_non_common, %struct.tree_decl_non_common* %decl_non_common, i32 0, i32 2, !dbg !3414
  %77 = load %union.tree_node*, %union.tree_node** %arguments, align 8, !dbg !3414
  store %union.tree_node* %77, %union.tree_node** %arg, align 8, !dbg !3416
  br label %for.cond77, !dbg !3417

for.cond77:                                       ; preds = %for.inc97, %if.end75
  %78 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !3418
  %tobool78 = icmp ne %union.tree_node* %78, null, !dbg !3420
  br i1 %tobool78, label %for.body79, label %for.end99, !dbg !3420

for.body79:                                       ; preds = %for.cond77
  %79 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !3421
  %common80 = bitcast %union.tree_node* %79 to %struct.tree_common*, !dbg !3421
  %type81 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common80, i32 0, i32 2, !dbg !3421
  %80 = load %union.tree_node*, %union.tree_node** %type81, align 8, !dbg !3421
  %base82 = bitcast %union.tree_node* %80 to %struct.tree_base*, !dbg !3421
  %81 = bitcast %struct.tree_base* %base82 to i64*, !dbg !3421
  %bf.load83 = load i64, i64* %81, align 8, !dbg !3421
  %bf.clear84 = and i64 %bf.load83, 65535, !dbg !3421
  %bf.cast85 = trunc i64 %bf.clear84 to i32, !dbg !3421
  %cmp86 = icmp eq i32 %bf.cast85, 19, !dbg !3421
  br i1 %cmp86, label %if.end96, label %if.then88, !dbg !3423

if.then88:                                        ; preds = %for.body79
  call void @llvm.dbg.declare(metadata i32* %cost89, metadata !3424, metadata !DIExpression()), !dbg !3426
  %82 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !3427
  %common90 = bitcast %union.tree_node* %82 to %struct.tree_common*, !dbg !3427
  %type91 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common90, i32 0, i32 2, !dbg !3427
  %83 = load %union.tree_node*, %union.tree_node** %type91, align 8, !dbg !3427
  %call92 = call i32 @estimate_move_cost(%union.tree_node* %83), !dbg !3428
  store i32 %call92, i32* %cost89, align 4, !dbg !3426
  %84 = load i32, i32* %cost89, align 4, !dbg !3429
  %conv93 = sext i32 %84 to i64, !dbg !3429
  %85 = load i64, i64* %time_inlining_benefit, align 8, !dbg !3430
  %add94 = add nsw i64 %85, %conv93, !dbg !3430
  store i64 %add94, i64* %time_inlining_benefit, align 8, !dbg !3430
  %86 = load i32, i32* %cost89, align 4, !dbg !3431
  %87 = load i32, i32* %size_inlining_benefit, align 4, !dbg !3432
  %add95 = add nsw i32 %87, %86, !dbg !3432
  store i32 %add95, i32* %size_inlining_benefit, align 4, !dbg !3432
  br label %if.end96, !dbg !3433

if.end96:                                         ; preds = %if.then88, %for.body79
  br label %for.inc97, !dbg !3421

for.inc97:                                        ; preds = %if.end96
  %88 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !3434
  %common98 = bitcast %union.tree_node* %88 to %struct.tree_common*, !dbg !3434
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common98, i32 0, i32 1, !dbg !3434
  %89 = load %union.tree_node*, %union.tree_node** %chain, align 8, !dbg !3434
  store %union.tree_node* %89, %union.tree_node** %arg, align 8, !dbg !3435
  br label %for.cond77, !dbg !3436, !llvm.loop !3437

for.end99:                                        ; preds = %for.cond77
  %90 = load i64, i64* %time_inlining_benefit, align 8, !dbg !3439
  %cmp100 = icmp sgt i64 %90, 1000000000, !dbg !3441
  br i1 %cmp100, label %if.then102, label %if.end103, !dbg !3442

if.then102:                                       ; preds = %for.end99
  store i64 1000000000, i64* %time_inlining_benefit, align 8, !dbg !3443
  br label %if.end103, !dbg !3444

if.end103:                                        ; preds = %if.then102, %for.end99
  %91 = load i64, i64* %time, align 8, !dbg !3445
  %cmp104 = icmp sgt i64 %91, 1000000000, !dbg !3447
  br i1 %cmp104, label %if.then106, label %if.end107, !dbg !3448

if.then106:                                       ; preds = %if.end103
  store i64 1000000000, i64* %time, align 8, !dbg !3449
  br label %if.end107, !dbg !3450

if.end107:                                        ; preds = %if.then106, %if.end103
  %92 = load i64, i64* %time, align 8, !dbg !3451
  %conv108 = trunc i64 %92 to i32, !dbg !3451
  %93 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !3452
  %call109 = call %struct.inline_summary* @inline_summary(%struct.cgraph_node* %93), !dbg !3453
  %self_time = getelementptr inbounds %struct.inline_summary, %struct.inline_summary* %call109, i32 0, i32 3, !dbg !3454
  store i32 %conv108, i32* %self_time, align 8, !dbg !3455
  %94 = load i32, i32* %size, align 4, !dbg !3456
  %95 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !3457
  %call110 = call %struct.inline_summary* @inline_summary(%struct.cgraph_node* %95), !dbg !3458
  %self_size = getelementptr inbounds %struct.inline_summary, %struct.inline_summary* %call110, i32 0, i32 1, !dbg !3459
  store i32 %94, i32* %self_size, align 8, !dbg !3460
  %96 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3461
  %tobool111 = icmp ne %struct._IO_FILE* %96, null, !dbg !3461
  br i1 %tobool111, label %if.then112, label %if.end116, !dbg !3463

if.then112:                                       ; preds = %if.end107
  %97 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3464
  %98 = load i64, i64* %time, align 8, !dbg !3465
  %conv113 = trunc i64 %98 to i32, !dbg !3466
  %99 = load i64, i64* %time_inlining_benefit, align 8, !dbg !3467
  %conv114 = trunc i64 %99 to i32, !dbg !3468
  %100 = load i32, i32* %size, align 4, !dbg !3469
  %101 = load i32, i32* %size_inlining_benefit, align 4, !dbg !3470
  %call115 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %97, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.25, i64 0, i64 0), i32 %conv113, i32 %conv114, i32 %100, i32 %101), !dbg !3471
  br label %if.end116, !dbg !3471

if.end116:                                        ; preds = %if.then112, %if.end107
  %102 = load i64, i64* %time_inlining_benefit, align 8, !dbg !3472
  %conv117 = trunc i64 %102 to i32, !dbg !3472
  %103 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !3473
  %call118 = call %struct.inline_summary* @inline_summary(%struct.cgraph_node* %103), !dbg !3474
  %time_inlining_benefit119 = getelementptr inbounds %struct.inline_summary, %struct.inline_summary* %call118, i32 0, i32 4, !dbg !3475
  store i32 %conv117, i32* %time_inlining_benefit119, align 4, !dbg !3476
  %104 = load i32, i32* %size_inlining_benefit, align 4, !dbg !3477
  %105 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !3478
  %call120 = call %struct.inline_summary* @inline_summary(%struct.cgraph_node* %105), !dbg !3479
  %size_inlining_benefit121 = getelementptr inbounds %struct.inline_summary, %struct.inline_summary* %call120, i32 0, i32 2, !dbg !3480
  store i32 %104, i32* %size_inlining_benefit121, align 4, !dbg !3481
  ret void, !dbg !3482
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @compute_inline_parameters_for_current() #0 !dbg !3483 {
entry:
  %0 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8, !dbg !3484
  %call = call %struct.cgraph_node* @cgraph_node(%union.tree_node* %0), !dbg !3485
  %call1 = call i32 @compute_inline_parameters(%struct.cgraph_node* %call), !dbg !3486
  ret i32 0, !dbg !3487
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @cgraph_decide_inlining() #0 !dbg !3488 {
entry:
  %node = alloca %struct.cgraph_node*, align 8
  %nnodes = alloca i32, align 4
  %order = alloca %struct.cgraph_node**, align 8
  %old_size = alloca i32, align 4
  %i = alloca i32, align 4
  %redo_always_inline = alloca i8, align 1
  %initial_size = alloca i32, align 4
  %e = alloca %struct.cgraph_edge*, align 8
  %e61 = alloca %struct.cgraph_edge*, align 8
  %next62 = alloca %struct.cgraph_edge*, align 8
  %reason = alloca i32, align 4
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %node, metadata !3489, metadata !DIExpression()), !dbg !3490
  call void @llvm.dbg.declare(metadata i32* %nnodes, metadata !3491, metadata !DIExpression()), !dbg !3492
  call void @llvm.dbg.declare(metadata %struct.cgraph_node*** %order, metadata !3493, metadata !DIExpression()), !dbg !3494
  %0 = load i32, i32* @cgraph_n_nodes, align 4, !dbg !3495
  %conv = sext i32 %0 to i64, !dbg !3495
  %call = call i8* @xcalloc(i64 %conv, i64 8), !dbg !3495
  %1 = bitcast i8* %call to %struct.cgraph_node**, !dbg !3495
  store %struct.cgraph_node** %1, %struct.cgraph_node*** %order, align 8, !dbg !3494
  call void @llvm.dbg.declare(metadata i32* %old_size, metadata !3496, metadata !DIExpression()), !dbg !3497
  store i32 0, i32* %old_size, align 4, !dbg !3497
  call void @llvm.dbg.declare(metadata i32* %i, metadata !3498, metadata !DIExpression()), !dbg !3499
  call void @llvm.dbg.declare(metadata i8* %redo_always_inline, metadata !3500, metadata !DIExpression()), !dbg !3501
  store i8 1, i8* %redo_always_inline, align 1, !dbg !3501
  call void @llvm.dbg.declare(metadata i32* %initial_size, metadata !3502, metadata !DIExpression()), !dbg !3503
  store i32 0, i32* %initial_size, align 4, !dbg !3503
  %2 = load %struct.cgraph_node_hook_list*, %struct.cgraph_node_hook_list** @function_insertion_hook_holder, align 8, !dbg !3504
  call void @cgraph_remove_function_insertion_hook(%struct.cgraph_node_hook_list* %2), !dbg !3505
  %3 = load i8, i8* @in_lto_p, align 1, !dbg !3506
  %conv1 = zext i8 %3 to i32, !dbg !3506
  %tobool = icmp ne i32 %conv1, 0, !dbg !3506
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !3508

land.lhs.true:                                    ; preds = %entry
  %4 = load i32, i32* @flag_indirect_inlining, align 4, !dbg !3509
  %tobool2 = icmp ne i32 %4, 0, !dbg !3509
  br i1 %tobool2, label %if.then, label %if.end, !dbg !3510

if.then:                                          ; preds = %land.lhs.true
  call void @ipa_update_after_lto_read(), !dbg !3511
  br label %if.end, !dbg !3511

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  store i64 0, i64* @max_count, align 8, !dbg !3512
  store i64 0, i64* @max_benefit, align 8, !dbg !3513
  %5 = load %struct.cgraph_node*, %struct.cgraph_node** @cgraph_nodes, align 8, !dbg !3514
  store %struct.cgraph_node* %5, %struct.cgraph_node** %node, align 8, !dbg !3516
  br label %for.cond, !dbg !3517

for.cond:                                         ; preds = %for.inc28, %if.end
  %6 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !3518
  %tobool3 = icmp ne %struct.cgraph_node* %6, null, !dbg !3520
  br i1 %tobool3, label %for.body, label %for.end29, !dbg !3520

for.body:                                         ; preds = %for.cond
  %7 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !3521
  %analyzed = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %7, i32 0, i32 27, !dbg !3523
  %bf.load = load i16, i16* %analyzed, align 4, !dbg !3523
  %bf.lshr = lshr i16 %bf.load, 5, !dbg !3523
  %bf.clear = and i16 %bf.lshr, 1, !dbg !3523
  %bf.cast = zext i16 %bf.clear to i32, !dbg !3523
  %tobool4 = icmp ne i32 %bf.cast, 0, !dbg !3521
  br i1 %tobool4, label %if.then5, label %if.end27, !dbg !3524

if.then5:                                         ; preds = %for.body
  call void @llvm.dbg.declare(metadata %struct.cgraph_edge** %e, metadata !3525, metadata !DIExpression()), !dbg !3527
  %8 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !3528
  %call6 = call %struct.inline_summary* @inline_summary(%struct.cgraph_node* %8), !dbg !3528
  %self_size = getelementptr inbounds %struct.inline_summary, %struct.inline_summary* %call6, i32 0, i32 1, !dbg !3528
  %9 = load i32, i32* %self_size, align 8, !dbg !3528
  %10 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !3528
  %global = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %10, i32 0, i32 19, !dbg !3528
  %size = getelementptr inbounds %struct.cgraph_global_info, %struct.cgraph_global_info* %global, i32 0, i32 4, !dbg !3528
  %11 = load i32, i32* %size, align 4, !dbg !3528
  %cmp = icmp eq i32 %9, %11, !dbg !3528
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !3528

cond.true:                                        ; preds = %if.then5
  call void @fancy_abort(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0), i32 1157, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !3528
  br label %cond.end, !dbg !3528

cond.false:                                       ; preds = %if.then5
  br label %cond.end, !dbg !3528

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !3528
  %12 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !3529
  %global8 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %12, i32 0, i32 19, !dbg !3530
  %size9 = getelementptr inbounds %struct.cgraph_global_info, %struct.cgraph_global_info* %global8, i32 0, i32 4, !dbg !3531
  %13 = load i32, i32* %size9, align 4, !dbg !3531
  %14 = load i32, i32* %initial_size, align 4, !dbg !3532
  %add = add nsw i32 %14, %13, !dbg !3532
  store i32 %add, i32* %initial_size, align 4, !dbg !3532
  %15 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !3533
  %callees = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %15, i32 0, i32 1, !dbg !3535
  %16 = load %struct.cgraph_edge*, %struct.cgraph_edge** %callees, align 8, !dbg !3535
  store %struct.cgraph_edge* %16, %struct.cgraph_edge** %e, align 8, !dbg !3536
  br label %for.cond10, !dbg !3537

for.cond10:                                       ; preds = %for.inc, %cond.end
  %17 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !3538
  %tobool11 = icmp ne %struct.cgraph_edge* %17, null, !dbg !3540
  br i1 %tobool11, label %for.body12, label %for.end, !dbg !3540

for.body12:                                       ; preds = %for.cond10
  %18 = load i64, i64* @max_count, align 8, !dbg !3541
  %19 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !3543
  %count = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %19, i32 0, i32 0, !dbg !3544
  %20 = load i64, i64* %count, align 8, !dbg !3544
  %cmp13 = icmp slt i64 %18, %20, !dbg !3545
  br i1 %cmp13, label %if.then15, label %if.end17, !dbg !3546

if.then15:                                        ; preds = %for.body12
  %21 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !3547
  %count16 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %21, i32 0, i32 0, !dbg !3548
  %22 = load i64, i64* %count16, align 8, !dbg !3548
  store i64 %22, i64* @max_count, align 8, !dbg !3549
  br label %if.end17, !dbg !3550

if.end17:                                         ; preds = %if.then15, %for.body12
  br label %for.inc, !dbg !3544

for.inc:                                          ; preds = %if.end17
  %23 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !3551
  %next_callee = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %23, i32 0, i32 6, !dbg !3552
  %24 = load %struct.cgraph_edge*, %struct.cgraph_edge** %next_callee, align 8, !dbg !3552
  store %struct.cgraph_edge* %24, %struct.cgraph_edge** %e, align 8, !dbg !3553
  br label %for.cond10, !dbg !3554, !llvm.loop !3555

for.end:                                          ; preds = %for.cond10
  %25 = load i64, i64* @max_benefit, align 8, !dbg !3557
  %26 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !3559
  %call18 = call %struct.inline_summary* @inline_summary(%struct.cgraph_node* %26), !dbg !3560
  %time_inlining_benefit = getelementptr inbounds %struct.inline_summary, %struct.inline_summary* %call18, i32 0, i32 4, !dbg !3561
  %27 = load i32, i32* %time_inlining_benefit, align 4, !dbg !3561
  %conv19 = sext i32 %27 to i64, !dbg !3560
  %cmp20 = icmp slt i64 %25, %conv19, !dbg !3562
  br i1 %cmp20, label %if.then22, label %if.end26, !dbg !3563

if.then22:                                        ; preds = %for.end
  %28 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !3564
  %call23 = call %struct.inline_summary* @inline_summary(%struct.cgraph_node* %28), !dbg !3565
  %time_inlining_benefit24 = getelementptr inbounds %struct.inline_summary, %struct.inline_summary* %call23, i32 0, i32 4, !dbg !3566
  %29 = load i32, i32* %time_inlining_benefit24, align 4, !dbg !3566
  %conv25 = sext i32 %29 to i64, !dbg !3565
  store i64 %conv25, i64* @max_benefit, align 8, !dbg !3567
  br label %if.end26, !dbg !3568

if.end26:                                         ; preds = %if.then22, %for.end
  br label %if.end27, !dbg !3569

if.end27:                                         ; preds = %if.end26, %for.body
  br label %for.inc28, !dbg !3523

for.inc28:                                        ; preds = %if.end27
  %30 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !3570
  %next = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %30, i32 0, i32 3, !dbg !3571
  %31 = load %struct.cgraph_node*, %struct.cgraph_node** %next, align 8, !dbg !3571
  store %struct.cgraph_node* %31, %struct.cgraph_node** %node, align 8, !dbg !3572
  br label %for.cond, !dbg !3573, !llvm.loop !3574

for.end29:                                        ; preds = %for.cond
  %32 = load i8, i8* @in_lto_p, align 1, !dbg !3576
  %conv30 = zext i8 %32 to i32, !dbg !3576
  %tobool31 = icmp ne i32 %conv30, 0, !dbg !3576
  br i1 %tobool31, label %cond.false38, label %lor.lhs.false, !dbg !3576

lor.lhs.false:                                    ; preds = %for.end29
  %33 = load i64, i64* @max_count, align 8, !dbg !3576
  %tobool32 = icmp ne i64 %33, 0, !dbg !3576
  br i1 %tobool32, label %lor.lhs.false33, label %cond.false38, !dbg !3576

lor.lhs.false33:                                  ; preds = %lor.lhs.false
  %34 = load %struct.gcov_ctr_summary*, %struct.gcov_ctr_summary** @profile_info, align 8, !dbg !3576
  %tobool34 = icmp ne %struct.gcov_ctr_summary* %34, null, !dbg !3576
  br i1 %tobool34, label %land.lhs.true35, label %cond.true37, !dbg !3576

land.lhs.true35:                                  ; preds = %lor.lhs.false33
  %35 = load i32, i32* @flag_branch_probabilities, align 4, !dbg !3576
  %tobool36 = icmp ne i32 %35, 0, !dbg !3576
  br i1 %tobool36, label %cond.false38, label %cond.true37, !dbg !3576

cond.true37:                                      ; preds = %land.lhs.true35, %lor.lhs.false33
  call void @fancy_abort(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0), i32 1167, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !3576
  br label %cond.end39, !dbg !3576

cond.false38:                                     ; preds = %land.lhs.true35, %lor.lhs.false, %for.end29
  br label %cond.end39, !dbg !3576

cond.end39:                                       ; preds = %cond.false38, %cond.true37
  %cond40 = phi i32 [ 0, %cond.true37 ], [ 0, %cond.false38 ], !dbg !3576
  %36 = load i32, i32* %initial_size, align 4, !dbg !3577
  store i32 %36, i32* @overall_size, align 4, !dbg !3578
  %37 = load %struct.cgraph_node**, %struct.cgraph_node*** %order, align 8, !dbg !3579
  %call41 = call i32 @cgraph_postorder(%struct.cgraph_node** %37), !dbg !3580
  store i32 %call41, i32* %nnodes, align 4, !dbg !3581
  %38 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3582
  %tobool42 = icmp ne %struct._IO_FILE* %38, null, !dbg !3582
  br i1 %tobool42, label %if.then43, label %if.end45, !dbg !3584

if.then43:                                        ; preds = %cond.end39
  %39 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3585
  %40 = load i32, i32* %initial_size, align 4, !dbg !3586
  %call44 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %39, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.27, i64 0, i64 0), i32 %40), !dbg !3587
  br label %if.end45, !dbg !3587

if.end45:                                         ; preds = %if.then43, %cond.end39
  %41 = load %struct.cgraph_node*, %struct.cgraph_node** @cgraph_nodes, align 8, !dbg !3588
  store %struct.cgraph_node* %41, %struct.cgraph_node** %node, align 8, !dbg !3590
  br label %for.cond46, !dbg !3591

for.cond46:                                       ; preds = %for.inc49, %if.end45
  %42 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !3592
  %tobool47 = icmp ne %struct.cgraph_node* %42, null, !dbg !3594
  br i1 %tobool47, label %for.body48, label %for.end51, !dbg !3594

for.body48:                                       ; preds = %for.cond46
  %43 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !3595
  %aux = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %43, i32 0, i32 16, !dbg !3596
  store i8* null, i8** %aux, align 8, !dbg !3597
  br label %for.inc49, !dbg !3595

for.inc49:                                        ; preds = %for.body48
  %44 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !3598
  %next50 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %44, i32 0, i32 3, !dbg !3599
  %45 = load %struct.cgraph_node*, %struct.cgraph_node** %next50, align 8, !dbg !3599
  store %struct.cgraph_node* %45, %struct.cgraph_node** %node, align 8, !dbg !3600
  br label %for.cond46, !dbg !3601, !llvm.loop !3602

for.end51:                                        ; preds = %for.cond46
  %46 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3604
  %tobool52 = icmp ne %struct._IO_FILE* %46, null, !dbg !3604
  br i1 %tobool52, label %if.then53, label %if.end55, !dbg !3606

if.then53:                                        ; preds = %for.end51
  %47 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3607
  %call54 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %47, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.28, i64 0, i64 0)), !dbg !3608
  br label %if.end55, !dbg !3608

if.end55:                                         ; preds = %if.then53, %for.end51
  br label %while.cond, !dbg !3609

while.cond:                                       ; preds = %for.end142, %if.end55
  %48 = load i8, i8* %redo_always_inline, align 1, !dbg !3610
  %tobool56 = icmp ne i8 %48, 0, !dbg !3609
  br i1 %tobool56, label %while.body, label %while.end, !dbg !3609

while.body:                                       ; preds = %while.cond
  store i8 0, i8* %redo_always_inline, align 1, !dbg !3611
  %49 = load i32, i32* %nnodes, align 4, !dbg !3613
  %sub = sub nsw i32 %49, 1, !dbg !3615
  store i32 %sub, i32* %i, align 4, !dbg !3616
  br label %for.cond57, !dbg !3617

for.cond57:                                       ; preds = %for.inc141, %while.body
  %50 = load i32, i32* %i, align 4, !dbg !3618
  %cmp58 = icmp sge i32 %50, 0, !dbg !3620
  br i1 %cmp58, label %for.body60, label %for.end142, !dbg !3621

for.body60:                                       ; preds = %for.cond57
  call void @llvm.dbg.declare(metadata %struct.cgraph_edge** %e61, metadata !3622, metadata !DIExpression()), !dbg !3624
  call void @llvm.dbg.declare(metadata %struct.cgraph_edge** %next62, metadata !3625, metadata !DIExpression()), !dbg !3626
  %51 = load %struct.cgraph_node**, %struct.cgraph_node*** %order, align 8, !dbg !3627
  %52 = load i32, i32* %i, align 4, !dbg !3628
  %idxprom = sext i32 %52 to i64, !dbg !3627
  %arrayidx = getelementptr inbounds %struct.cgraph_node*, %struct.cgraph_node** %51, i64 %idxprom, !dbg !3627
  %53 = load %struct.cgraph_node*, %struct.cgraph_node** %arrayidx, align 8, !dbg !3627
  store %struct.cgraph_node* %53, %struct.cgraph_node** %node, align 8, !dbg !3629
  %54 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !3630
  %decl = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %54, i32 0, i32 0, !dbg !3630
  %55 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !3630
  %decl_common = bitcast %union.tree_node* %55 to %struct.tree_decl_common*, !dbg !3630
  %attributes = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 6, !dbg !3630
  %56 = load %union.tree_node*, %union.tree_node** %attributes, align 8, !dbg !3630
  %call63 = call %union.tree_node* @lookup_attribute(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.7, i64 0, i64 0), %union.tree_node* %56), !dbg !3632
  %cmp64 = icmp ne %union.tree_node* %call63, null, !dbg !3633
  br i1 %cmp64, label %if.then66, label %if.end73, !dbg !3634

if.then66:                                        ; preds = %for.body60
  %57 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3635
  %tobool67 = icmp ne %struct._IO_FILE* %57, null, !dbg !3635
  br i1 %tobool67, label %if.then68, label %if.end71, !dbg !3638

if.then68:                                        ; preds = %if.then66
  %58 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3639
  %59 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !3640
  %call69 = call i8* @cgraph_node_name(%struct.cgraph_node* %59), !dbg !3641
  %call70 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %58, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.8, i64 0, i64 0), i8* %call69), !dbg !3642
  br label %if.end71, !dbg !3642

if.end71:                                         ; preds = %if.then68, %if.then66
  %60 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !3643
  %call72 = call zeroext i8 @cgraph_decide_inlining_incrementally(%struct.cgraph_node* %60, i32 4, i32 0), !dbg !3644
  br label %if.end73, !dbg !3645

if.end73:                                         ; preds = %if.end71, %for.body60
  %61 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !3646
  %local = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %61, i32 0, i32 18, !dbg !3648
  %disregard_inline_limits = getelementptr inbounds %struct.cgraph_local_info, %struct.cgraph_local_info* %local, i32 0, i32 2, !dbg !3649
  %bf.load74 = load i8, i8* %disregard_inline_limits, align 8, !dbg !3649
  %bf.lshr75 = lshr i8 %bf.load74, 4, !dbg !3649
  %bf.clear76 = and i8 %bf.lshr75, 1, !dbg !3649
  %bf.cast77 = zext i8 %bf.clear76 to i32, !dbg !3649
  %tobool78 = icmp ne i32 %bf.cast77, 0, !dbg !3646
  br i1 %tobool78, label %if.end80, label %if.then79, !dbg !3650

if.then79:                                        ; preds = %if.end73
  br label %for.inc141, !dbg !3651

if.end80:                                         ; preds = %if.end73
  %62 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3652
  %tobool81 = icmp ne %struct._IO_FILE* %62, null, !dbg !3652
  br i1 %tobool81, label %if.then82, label %if.end87, !dbg !3654

if.then82:                                        ; preds = %if.end80
  %63 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3655
  %64 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !3656
  %call83 = call i8* @cgraph_node_name(%struct.cgraph_node* %64), !dbg !3657
  %65 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !3658
  %global84 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %65, i32 0, i32 19, !dbg !3659
  %size85 = getelementptr inbounds %struct.cgraph_global_info, %struct.cgraph_global_info* %global84, i32 0, i32 4, !dbg !3660
  %66 = load i32, i32* %size85, align 4, !dbg !3660
  %call86 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %63, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.29, i64 0, i64 0), i8* %call83, i32 %66), !dbg !3661
  br label %if.end87, !dbg !3661

if.end87:                                         ; preds = %if.then82, %if.end80
  %67 = load i32, i32* @overall_size, align 4, !dbg !3662
  store i32 %67, i32* %old_size, align 4, !dbg !3663
  %68 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !3664
  %callers = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %68, i32 0, i32 2, !dbg !3666
  %69 = load %struct.cgraph_edge*, %struct.cgraph_edge** %callers, align 8, !dbg !3666
  store %struct.cgraph_edge* %69, %struct.cgraph_edge** %e61, align 8, !dbg !3667
  br label %for.cond88, !dbg !3668

for.cond88:                                       ; preds = %for.inc122, %if.end87
  %70 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e61, align 8, !dbg !3669
  %tobool89 = icmp ne %struct.cgraph_edge* %70, null, !dbg !3671
  br i1 %tobool89, label %for.body90, label %for.end123, !dbg !3671

for.body90:                                       ; preds = %for.cond88
  %71 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e61, align 8, !dbg !3672
  %next_caller = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %71, i32 0, i32 4, !dbg !3674
  %72 = load %struct.cgraph_edge*, %struct.cgraph_edge** %next_caller, align 8, !dbg !3674
  store %struct.cgraph_edge* %72, %struct.cgraph_edge** %next62, align 8, !dbg !3675
  %73 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e61, align 8, !dbg !3676
  %inline_failed = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %73, i32 0, i32 9, !dbg !3678
  %74 = load i32, i32* %inline_failed, align 8, !dbg !3678
  %tobool91 = icmp ne i32 %74, 0, !dbg !3676
  br i1 %tobool91, label %lor.lhs.false92, label %if.then98, !dbg !3679

lor.lhs.false92:                                  ; preds = %for.body90
  %75 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e61, align 8, !dbg !3680
  %call_stmt_cannot_inline_p = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %75, i32 0, i32 14, !dbg !3681
  %bf.load93 = load i8, i8* %call_stmt_cannot_inline_p, align 2, !dbg !3681
  %bf.lshr94 = lshr i8 %bf.load93, 1, !dbg !3681
  %bf.clear95 = and i8 %bf.lshr94, 1, !dbg !3681
  %bf.cast96 = zext i8 %bf.clear95 to i32, !dbg !3681
  %tobool97 = icmp ne i32 %bf.cast96, 0, !dbg !3680
  br i1 %tobool97, label %if.then98, label %if.end99, !dbg !3682

if.then98:                                        ; preds = %lor.lhs.false92, %for.body90
  br label %for.inc122, !dbg !3683

if.end99:                                         ; preds = %lor.lhs.false92
  %76 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e61, align 8, !dbg !3684
  %caller = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %76, i32 0, i32 1, !dbg !3686
  %77 = load %struct.cgraph_node*, %struct.cgraph_node** %caller, align 8, !dbg !3686
  %78 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e61, align 8, !dbg !3687
  %callee = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %78, i32 0, i32 2, !dbg !3688
  %79 = load %struct.cgraph_node*, %struct.cgraph_node** %callee, align 8, !dbg !3688
  %80 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e61, align 8, !dbg !3689
  %inline_failed100 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %80, i32 0, i32 9, !dbg !3690
  %call101 = call zeroext i8 @cgraph_recursive_inlining_p(%struct.cgraph_node* %77, %struct.cgraph_node* %79, i32* %inline_failed100), !dbg !3691
  %tobool102 = icmp ne i8 %call101, 0, !dbg !3691
  br i1 %tobool102, label %if.then103, label %if.end104, !dbg !3692

if.then103:                                       ; preds = %if.end99
  br label %for.inc122, !dbg !3693

if.end104:                                        ; preds = %if.end99
  %81 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e61, align 8, !dbg !3694
  %call105 = call zeroext i8 @tree_can_inline_p(%struct.cgraph_edge* %81), !dbg !3696
  %tobool106 = icmp ne i8 %call105, 0, !dbg !3696
  br i1 %tobool106, label %if.end108, label %if.then107, !dbg !3697

if.then107:                                       ; preds = %if.end104
  br label %for.inc122, !dbg !3698

if.end108:                                        ; preds = %if.end104
  %82 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e61, align 8, !dbg !3699
  %call109 = call zeroext i8 @cgraph_mark_inline_edge(%struct.cgraph_edge* %82, i8 zeroext 1, %struct.VEC_cgraph_edge_p_heap** null), !dbg !3701
  %tobool110 = icmp ne i8 %call109, 0, !dbg !3701
  br i1 %tobool110, label %if.then111, label %if.end112, !dbg !3702

if.then111:                                       ; preds = %if.end108
  store i8 1, i8* %redo_always_inline, align 1, !dbg !3703
  br label %if.end112, !dbg !3704

if.end112:                                        ; preds = %if.then111, %if.end108
  %83 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3705
  %tobool113 = icmp ne %struct._IO_FILE* %83, null, !dbg !3705
  br i1 %tobool113, label %if.then114, label %if.end121, !dbg !3707

if.then114:                                       ; preds = %if.end112
  %84 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3708
  %85 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e61, align 8, !dbg !3709
  %caller115 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %85, i32 0, i32 1, !dbg !3710
  %86 = load %struct.cgraph_node*, %struct.cgraph_node** %caller115, align 8, !dbg !3710
  %call116 = call i8* @cgraph_node_name(%struct.cgraph_node* %86), !dbg !3711
  %87 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e61, align 8, !dbg !3712
  %caller117 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %87, i32 0, i32 1, !dbg !3713
  %88 = load %struct.cgraph_node*, %struct.cgraph_node** %caller117, align 8, !dbg !3713
  %global118 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %88, i32 0, i32 19, !dbg !3714
  %size119 = getelementptr inbounds %struct.cgraph_global_info, %struct.cgraph_global_info* %global118, i32 0, i32 4, !dbg !3715
  %89 = load i32, i32* %size119, align 4, !dbg !3715
  %call120 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %84, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.30, i64 0, i64 0), i8* %call116, i32 %89), !dbg !3716
  br label %if.end121, !dbg !3716

if.end121:                                        ; preds = %if.then114, %if.end112
  br label %for.inc122, !dbg !3717

for.inc122:                                       ; preds = %if.end121, %if.then107, %if.then103, %if.then98
  %90 = load %struct.cgraph_edge*, %struct.cgraph_edge** %next62, align 8, !dbg !3718
  store %struct.cgraph_edge* %90, %struct.cgraph_edge** %e61, align 8, !dbg !3719
  br label %for.cond88, !dbg !3720, !llvm.loop !3721

for.end123:                                       ; preds = %for.cond88
  %91 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !3723
  %callers124 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %91, i32 0, i32 2, !dbg !3725
  %92 = load %struct.cgraph_edge*, %struct.cgraph_edge** %callers124, align 8, !dbg !3725
  store %struct.cgraph_edge* %92, %struct.cgraph_edge** %e61, align 8, !dbg !3726
  br label %for.cond125, !dbg !3727

for.cond125:                                      ; preds = %for.inc133, %for.end123
  %93 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e61, align 8, !dbg !3728
  %tobool126 = icmp ne %struct.cgraph_edge* %93, null, !dbg !3730
  br i1 %tobool126, label %for.body127, label %for.end135, !dbg !3730

for.body127:                                      ; preds = %for.cond125
  %94 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e61, align 8, !dbg !3731
  %inline_failed128 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %94, i32 0, i32 9, !dbg !3733
  %95 = load i32, i32* %inline_failed128, align 8, !dbg !3733
  %tobool129 = icmp ne i32 %95, 0, !dbg !3731
  br i1 %tobool129, label %if.then130, label %if.end132, !dbg !3734

if.then130:                                       ; preds = %for.body127
  %96 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e61, align 8, !dbg !3735
  %inline_failed131 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %96, i32 0, i32 9, !dbg !3736
  store i32 12, i32* %inline_failed131, align 8, !dbg !3737
  br label %if.end132, !dbg !3735

if.end132:                                        ; preds = %if.then130, %for.body127
  br label %for.inc133, !dbg !3733

for.inc133:                                       ; preds = %if.end132
  %97 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e61, align 8, !dbg !3738
  %next_caller134 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %97, i32 0, i32 4, !dbg !3739
  %98 = load %struct.cgraph_edge*, %struct.cgraph_edge** %next_caller134, align 8, !dbg !3739
  store %struct.cgraph_edge* %98, %struct.cgraph_edge** %e61, align 8, !dbg !3740
  br label %for.cond125, !dbg !3741, !llvm.loop !3742

for.end135:                                       ; preds = %for.cond125
  %99 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3744
  %tobool136 = icmp ne %struct._IO_FILE* %99, null, !dbg !3744
  br i1 %tobool136, label %if.then137, label %if.end140, !dbg !3746

if.then137:                                       ; preds = %for.end135
  %100 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3747
  %101 = load i32, i32* @overall_size, align 4, !dbg !3748
  %102 = load i32, i32* %old_size, align 4, !dbg !3749
  %sub138 = sub nsw i32 %101, %102, !dbg !3750
  %call139 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %100, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.31, i64 0, i64 0), i32 %sub138), !dbg !3751
  br label %if.end140, !dbg !3751

if.end140:                                        ; preds = %if.then137, %for.end135
  br label %for.inc141, !dbg !3752

for.inc141:                                       ; preds = %if.end140, %if.then79
  %103 = load i32, i32* %i, align 4, !dbg !3753
  %dec = add nsw i32 %103, -1, !dbg !3753
  store i32 %dec, i32* %i, align 4, !dbg !3753
  br label %for.cond57, !dbg !3754, !llvm.loop !3755

for.end142:                                       ; preds = %for.cond57
  br label %while.cond, !dbg !3609, !llvm.loop !3757

while.end:                                        ; preds = %while.cond
  call void @cgraph_decide_inlining_of_small_functions(), !dbg !3759
  %104 = load i32, i32* @flag_inline_functions_called_once, align 4, !dbg !3760
  %tobool143 = icmp ne i32 %104, 0, !dbg !3760
  br i1 %tobool143, label %if.then144, label %if.end255, !dbg !3762

if.then144:                                       ; preds = %while.end
  %105 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3763
  %tobool145 = icmp ne %struct._IO_FILE* %105, null, !dbg !3763
  br i1 %tobool145, label %if.then146, label %if.end148, !dbg !3766

if.then146:                                       ; preds = %if.then144
  %106 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3767
  %call147 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %106, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.32, i64 0, i64 0)), !dbg !3768
  br label %if.end148, !dbg !3768

if.end148:                                        ; preds = %if.then146, %if.then144
  %107 = load i32, i32* %nnodes, align 4, !dbg !3769
  %sub149 = sub nsw i32 %107, 1, !dbg !3771
  store i32 %sub149, i32* %i, align 4, !dbg !3772
  br label %for.cond150, !dbg !3773

for.cond150:                                      ; preds = %for.inc252, %if.end148
  %108 = load i32, i32* %i, align 4, !dbg !3774
  %cmp151 = icmp sge i32 %108, 0, !dbg !3776
  br i1 %cmp151, label %for.body153, label %for.end254, !dbg !3777

for.body153:                                      ; preds = %for.cond150
  %109 = load %struct.cgraph_node**, %struct.cgraph_node*** %order, align 8, !dbg !3778
  %110 = load i32, i32* %i, align 4, !dbg !3780
  %idxprom154 = sext i32 %110 to i64, !dbg !3778
  %arrayidx155 = getelementptr inbounds %struct.cgraph_node*, %struct.cgraph_node** %109, i64 %idxprom154, !dbg !3778
  %111 = load %struct.cgraph_node*, %struct.cgraph_node** %arrayidx155, align 8, !dbg !3778
  store %struct.cgraph_node* %111, %struct.cgraph_node** %node, align 8, !dbg !3781
  %112 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !3782
  %callers156 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %112, i32 0, i32 2, !dbg !3784
  %113 = load %struct.cgraph_edge*, %struct.cgraph_edge** %callers156, align 8, !dbg !3784
  %tobool157 = icmp ne %struct.cgraph_edge* %113, null, !dbg !3782
  br i1 %tobool157, label %land.lhs.true158, label %if.end251, !dbg !3785

land.lhs.true158:                                 ; preds = %for.body153
  %114 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !3786
  %callers159 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %114, i32 0, i32 2, !dbg !3787
  %115 = load %struct.cgraph_edge*, %struct.cgraph_edge** %callers159, align 8, !dbg !3787
  %next_caller160 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %115, i32 0, i32 4, !dbg !3788
  %116 = load %struct.cgraph_edge*, %struct.cgraph_edge** %next_caller160, align 8, !dbg !3788
  %tobool161 = icmp ne %struct.cgraph_edge* %116, null, !dbg !3786
  br i1 %tobool161, label %if.end251, label %land.lhs.true162, !dbg !3789

land.lhs.true162:                                 ; preds = %land.lhs.true158
  %117 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !3790
  %call163 = call zeroext i8 @cgraph_only_called_directly_p(%struct.cgraph_node* %117), !dbg !3791
  %conv164 = zext i8 %call163 to i32, !dbg !3791
  %tobool165 = icmp ne i32 %conv164, 0, !dbg !3791
  br i1 %tobool165, label %land.lhs.true166, label %if.end251, !dbg !3792

land.lhs.true166:                                 ; preds = %land.lhs.true162
  %118 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !3793
  %local167 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %118, i32 0, i32 18, !dbg !3794
  %inlinable = getelementptr inbounds %struct.cgraph_local_info, %struct.cgraph_local_info* %local167, i32 0, i32 2, !dbg !3795
  %bf.load168 = load i8, i8* %inlinable, align 8, !dbg !3795
  %bf.lshr169 = lshr i8 %bf.load168, 3, !dbg !3795
  %bf.clear170 = and i8 %bf.lshr169, 1, !dbg !3795
  %bf.cast171 = zext i8 %bf.clear170 to i32, !dbg !3795
  %tobool172 = icmp ne i32 %bf.cast171, 0, !dbg !3793
  br i1 %tobool172, label %land.lhs.true173, label %if.end251, !dbg !3796

land.lhs.true173:                                 ; preds = %land.lhs.true166
  %119 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !3797
  %callers174 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %119, i32 0, i32 2, !dbg !3798
  %120 = load %struct.cgraph_edge*, %struct.cgraph_edge** %callers174, align 8, !dbg !3798
  %inline_failed175 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %120, i32 0, i32 9, !dbg !3799
  %121 = load i32, i32* %inline_failed175, align 8, !dbg !3799
  %tobool176 = icmp ne i32 %121, 0, !dbg !3797
  br i1 %tobool176, label %land.lhs.true177, label %if.end251, !dbg !3800

land.lhs.true177:                                 ; preds = %land.lhs.true173
  %122 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !3801
  %callers178 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %122, i32 0, i32 2, !dbg !3802
  %123 = load %struct.cgraph_edge*, %struct.cgraph_edge** %callers178, align 8, !dbg !3802
  %caller179 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %123, i32 0, i32 1, !dbg !3803
  %124 = load %struct.cgraph_node*, %struct.cgraph_node** %caller179, align 8, !dbg !3803
  %125 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !3804
  %cmp180 = icmp ne %struct.cgraph_node* %124, %125, !dbg !3805
  br i1 %cmp180, label %land.lhs.true182, label %if.end251, !dbg !3806

land.lhs.true182:                                 ; preds = %land.lhs.true177
  %126 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !3807
  %callers183 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %126, i32 0, i32 2, !dbg !3808
  %127 = load %struct.cgraph_edge*, %struct.cgraph_edge** %callers183, align 8, !dbg !3808
  %caller184 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %127, i32 0, i32 1, !dbg !3809
  %128 = load %struct.cgraph_node*, %struct.cgraph_node** %caller184, align 8, !dbg !3809
  %global185 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %128, i32 0, i32 19, !dbg !3810
  %inlined_to = getelementptr inbounds %struct.cgraph_global_info, %struct.cgraph_global_info* %global185, i32 0, i32 2, !dbg !3811
  %129 = load %struct.cgraph_node*, %struct.cgraph_node** %inlined_to, align 8, !dbg !3811
  %130 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !3812
  %cmp186 = icmp ne %struct.cgraph_node* %129, %130, !dbg !3813
  br i1 %cmp186, label %land.lhs.true188, label %if.end251, !dbg !3814

land.lhs.true188:                                 ; preds = %land.lhs.true182
  %131 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !3815
  %callers189 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %131, i32 0, i32 2, !dbg !3816
  %132 = load %struct.cgraph_edge*, %struct.cgraph_edge** %callers189, align 8, !dbg !3816
  %call_stmt_cannot_inline_p190 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %132, i32 0, i32 14, !dbg !3817
  %bf.load191 = load i8, i8* %call_stmt_cannot_inline_p190, align 2, !dbg !3817
  %bf.lshr192 = lshr i8 %bf.load191, 1, !dbg !3817
  %bf.clear193 = and i8 %bf.lshr192, 1, !dbg !3817
  %bf.cast194 = zext i8 %bf.clear193 to i32, !dbg !3817
  %tobool195 = icmp ne i32 %bf.cast194, 0, !dbg !3815
  br i1 %tobool195, label %if.end251, label %land.lhs.true196, !dbg !3818

land.lhs.true196:                                 ; preds = %land.lhs.true188
  %133 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !3819
  %decl197 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %133, i32 0, i32 0, !dbg !3819
  %134 = load %union.tree_node*, %union.tree_node** %decl197, align 8, !dbg !3819
  %decl_common198 = bitcast %union.tree_node* %134 to %struct.tree_decl_common*, !dbg !3819
  %decl_flag_1 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common198, i32 0, i32 2, !dbg !3819
  %135 = bitcast i40* %decl_flag_1 to i64*, !dbg !3819
  %bf.load199 = load i64, i64* %135, align 8, !dbg !3819
  %bf.lshr200 = lshr i64 %bf.load199, 25, !dbg !3819
  %bf.clear201 = and i64 %bf.lshr200, 1, !dbg !3819
  %bf.cast202 = trunc i64 %bf.clear201 to i32, !dbg !3819
  %tobool203 = icmp ne i32 %bf.cast202, 0, !dbg !3819
  br i1 %tobool203, label %if.end251, label %land.lhs.true204, !dbg !3820

land.lhs.true204:                                 ; preds = %land.lhs.true196
  %136 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !3821
  %decl205 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %136, i32 0, i32 0, !dbg !3821
  %137 = load %union.tree_node*, %union.tree_node** %decl205, align 8, !dbg !3821
  %decl_with_vis = bitcast %union.tree_node* %137 to %struct.tree_decl_with_vis*, !dbg !3821
  %comdat_flag = getelementptr inbounds %struct.tree_decl_with_vis, %struct.tree_decl_with_vis* %decl_with_vis, i32 0, i32 4, !dbg !3821
  %138 = bitcast i24* %comdat_flag to i32*, !dbg !3821
  %bf.load206 = load i32, i32* %138, align 8, !dbg !3821
  %bf.lshr207 = lshr i32 %bf.load206, 9, !dbg !3821
  %bf.clear208 = and i32 %bf.lshr207, 1, !dbg !3821
  %tobool209 = icmp ne i32 %bf.clear208, 0, !dbg !3821
  br i1 %tobool209, label %if.end251, label %if.then210, !dbg !3822

if.then210:                                       ; preds = %land.lhs.true204
  call void @llvm.dbg.declare(metadata i32* %reason, metadata !3823, metadata !DIExpression()), !dbg !3825
  %139 = load i32, i32* @overall_size, align 4, !dbg !3826
  store i32 %139, i32* %old_size, align 4, !dbg !3827
  %140 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3828
  %tobool211 = icmp ne %struct._IO_FILE* %140, null, !dbg !3828
  br i1 %tobool211, label %if.then212, label %if.end225, !dbg !3830

if.then212:                                       ; preds = %if.then210
  %141 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3831
  %142 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !3833
  %call213 = call i8* @cgraph_node_name(%struct.cgraph_node* %142), !dbg !3834
  %143 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !3835
  %global214 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %143, i32 0, i32 19, !dbg !3836
  %size215 = getelementptr inbounds %struct.cgraph_global_info, %struct.cgraph_global_info* %global214, i32 0, i32 4, !dbg !3837
  %144 = load i32, i32* %size215, align 4, !dbg !3837
  %call216 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %141, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.33, i64 0, i64 0), i8* %call213, i32 %144), !dbg !3838
  %145 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3839
  %146 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !3840
  %callers217 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %146, i32 0, i32 2, !dbg !3841
  %147 = load %struct.cgraph_edge*, %struct.cgraph_edge** %callers217, align 8, !dbg !3841
  %caller218 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %147, i32 0, i32 1, !dbg !3842
  %148 = load %struct.cgraph_node*, %struct.cgraph_node** %caller218, align 8, !dbg !3842
  %call219 = call i8* @cgraph_node_name(%struct.cgraph_node* %148), !dbg !3843
  %149 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !3844
  %callers220 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %149, i32 0, i32 2, !dbg !3845
  %150 = load %struct.cgraph_edge*, %struct.cgraph_edge** %callers220, align 8, !dbg !3845
  %caller221 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %150, i32 0, i32 1, !dbg !3846
  %151 = load %struct.cgraph_node*, %struct.cgraph_node** %caller221, align 8, !dbg !3846
  %global222 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %151, i32 0, i32 19, !dbg !3847
  %size223 = getelementptr inbounds %struct.cgraph_global_info, %struct.cgraph_global_info* %global222, i32 0, i32 4, !dbg !3848
  %152 = load i32, i32* %size223, align 4, !dbg !3848
  %call224 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %145, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.34, i64 0, i64 0), i8* %call219, i32 %152), !dbg !3849
  br label %if.end225, !dbg !3850

if.end225:                                        ; preds = %if.then212, %if.then210
  %153 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !3851
  %callers226 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %153, i32 0, i32 2, !dbg !3853
  %154 = load %struct.cgraph_edge*, %struct.cgraph_edge** %callers226, align 8, !dbg !3853
  %caller227 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %154, i32 0, i32 1, !dbg !3854
  %155 = load %struct.cgraph_node*, %struct.cgraph_node** %caller227, align 8, !dbg !3854
  %156 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !3855
  %call228 = call zeroext i8 @cgraph_check_inline_limits(%struct.cgraph_node* %155, %struct.cgraph_node* %156, i32* %reason, i8 zeroext 0), !dbg !3856
  %tobool229 = icmp ne i8 %call228, 0, !dbg !3856
  br i1 %tobool229, label %if.then230, label %if.else, !dbg !3857

if.then230:                                       ; preds = %if.end225
  %157 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !3858
  %callers231 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %157, i32 0, i32 2, !dbg !3860
  %158 = load %struct.cgraph_edge*, %struct.cgraph_edge** %callers231, align 8, !dbg !3860
  %call232 = call %struct.cgraph_edge* @cgraph_mark_inline(%struct.cgraph_edge* %158), !dbg !3861
  %159 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3862
  %tobool233 = icmp ne %struct._IO_FILE* %159, null, !dbg !3862
  br i1 %tobool233, label %if.then234, label %if.end244, !dbg !3864

if.then234:                                       ; preds = %if.then230
  %160 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3865
  %161 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !3866
  %callers235 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %161, i32 0, i32 2, !dbg !3867
  %162 = load %struct.cgraph_edge*, %struct.cgraph_edge** %callers235, align 8, !dbg !3867
  %caller236 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %162, i32 0, i32 1, !dbg !3868
  %163 = load %struct.cgraph_node*, %struct.cgraph_node** %caller236, align 8, !dbg !3868
  %call237 = call i8* @cgraph_node_name(%struct.cgraph_node* %163), !dbg !3869
  %164 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !3870
  %callers238 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %164, i32 0, i32 2, !dbg !3871
  %165 = load %struct.cgraph_edge*, %struct.cgraph_edge** %callers238, align 8, !dbg !3871
  %caller239 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %165, i32 0, i32 1, !dbg !3872
  %166 = load %struct.cgraph_node*, %struct.cgraph_node** %caller239, align 8, !dbg !3872
  %global240 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %166, i32 0, i32 19, !dbg !3873
  %size241 = getelementptr inbounds %struct.cgraph_global_info, %struct.cgraph_global_info* %global240, i32 0, i32 4, !dbg !3874
  %167 = load i32, i32* %size241, align 4, !dbg !3874
  %168 = load i32, i32* @overall_size, align 4, !dbg !3875
  %169 = load i32, i32* %old_size, align 4, !dbg !3876
  %sub242 = sub nsw i32 %168, %169, !dbg !3877
  %call243 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %160, i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.35, i64 0, i64 0), i8* %call237, i32 %167, i32 %sub242), !dbg !3878
  br label %if.end244, !dbg !3878

if.end244:                                        ; preds = %if.then234, %if.then230
  br label %if.end250, !dbg !3879

if.else:                                          ; preds = %if.end225
  %170 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3880
  %tobool245 = icmp ne %struct._IO_FILE* %170, null, !dbg !3880
  br i1 %tobool245, label %if.then246, label %if.end249, !dbg !3883

if.then246:                                       ; preds = %if.else
  %171 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3884
  %172 = load i32, i32* %reason, align 4, !dbg !3885
  %call247 = call i8* @cgraph_inline_failed_string(i32 %172), !dbg !3886
  %call248 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %171, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.36, i64 0, i64 0), i8* %call247), !dbg !3887
  br label %if.end249, !dbg !3887

if.end249:                                        ; preds = %if.then246, %if.else
  br label %if.end250

if.end250:                                        ; preds = %if.end249, %if.end244
  br label %if.end251, !dbg !3888

if.end251:                                        ; preds = %if.end250, %land.lhs.true204, %land.lhs.true196, %land.lhs.true188, %land.lhs.true182, %land.lhs.true177, %land.lhs.true173, %land.lhs.true166, %land.lhs.true162, %land.lhs.true158, %for.body153
  br label %for.inc252, !dbg !3889

for.inc252:                                       ; preds = %if.end251
  %173 = load i32, i32* %i, align 4, !dbg !3890
  %dec253 = add nsw i32 %173, -1, !dbg !3890
  store i32 %dec253, i32* %i, align 4, !dbg !3890
  br label %for.cond150, !dbg !3891, !llvm.loop !3892

for.end254:                                       ; preds = %for.cond150
  br label %if.end255, !dbg !3894

if.end255:                                        ; preds = %for.end254, %while.end
  %174 = load i32, i32* @flag_indirect_inlining, align 4, !dbg !3895
  %tobool256 = icmp ne i32 %174, 0, !dbg !3895
  br i1 %tobool256, label %if.then257, label %if.end258, !dbg !3897

if.then257:                                       ; preds = %if.end255
  call void @free_all_ipa_structures_after_iinln(), !dbg !3898
  br label %if.end258, !dbg !3898

if.end258:                                        ; preds = %if.then257, %if.end255
  %175 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3899
  %tobool259 = icmp ne %struct._IO_FILE* %175, null, !dbg !3899
  br i1 %tobool259, label %if.then260, label %if.end262, !dbg !3901

if.then260:                                       ; preds = %if.end258
  %176 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3902
  %177 = load i32, i32* @ncalls_inlined, align 4, !dbg !3903
  %178 = load i32, i32* @nfunctions_inlined, align 4, !dbg !3904
  %179 = load i32, i32* %initial_size, align 4, !dbg !3905
  %180 = load i32, i32* @overall_size, align 4, !dbg !3906
  %call261 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %176, i8* getelementptr inbounds ([73 x i8], [73 x i8]* @.str.37, i64 0, i64 0), i32 %177, i32 %178, i32 %179, i32 %180), !dbg !3907
  br label %if.end262, !dbg !3907

if.end262:                                        ; preds = %if.then260, %if.end258
  %181 = load %struct.cgraph_node**, %struct.cgraph_node*** %order, align 8, !dbg !3908
  %182 = bitcast %struct.cgraph_node** %181 to i8*, !dbg !3908
  call void @free(i8* %182), !dbg !3909
  ret i32 0, !dbg !3910
}

; Function Attrs: noinline nounwind uwtable
define internal void @inline_generate_summary() #0 !dbg !3911 {
entry:
  %node = alloca %struct.cgraph_node*, align 8
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %node, metadata !3912, metadata !DIExpression()), !dbg !3913
  %call = call %struct.cgraph_node_hook_list* @cgraph_add_function_insertion_hook(void (%struct.cgraph_node*, i8*)* @add_new_function, i8* null), !dbg !3914
  store %struct.cgraph_node_hook_list* %call, %struct.cgraph_node_hook_list** @function_insertion_hook_holder, align 8, !dbg !3915
  %0 = load i32, i32* @flag_indirect_inlining, align 4, !dbg !3916
  %tobool = icmp ne i32 %0, 0, !dbg !3916
  br i1 %tobool, label %if.then, label %if.end, !dbg !3918

if.then:                                          ; preds = %entry
  call void @ipa_register_cgraph_hooks(), !dbg !3919
  call void @ipa_check_create_node_params(), !dbg !3921
  call void @ipa_check_create_edge_args(), !dbg !3922
  br label %if.end, !dbg !3923

if.end:                                           ; preds = %if.then, %entry
  %1 = load %struct.cgraph_node*, %struct.cgraph_node** @cgraph_nodes, align 8, !dbg !3924
  store %struct.cgraph_node* %1, %struct.cgraph_node** %node, align 8, !dbg !3926
  br label %for.cond, !dbg !3927

for.cond:                                         ; preds = %for.inc, %if.end
  %2 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !3928
  %tobool1 = icmp ne %struct.cgraph_node* %2, null, !dbg !3930
  br i1 %tobool1, label %for.body, label %for.end, !dbg !3930

for.body:                                         ; preds = %for.cond
  %3 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !3931
  %analyzed = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %3, i32 0, i32 27, !dbg !3933
  %bf.load = load i16, i16* %analyzed, align 4, !dbg !3933
  %bf.lshr = lshr i16 %bf.load, 5, !dbg !3933
  %bf.clear = and i16 %bf.lshr, 1, !dbg !3933
  %bf.cast = zext i16 %bf.clear to i32, !dbg !3933
  %tobool2 = icmp ne i32 %bf.cast, 0, !dbg !3931
  br i1 %tobool2, label %if.then3, label %if.end4, !dbg !3934

if.then3:                                         ; preds = %for.body
  %4 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !3935
  call void @analyze_function(%struct.cgraph_node* %4), !dbg !3936
  br label %if.end4, !dbg !3936

if.end4:                                          ; preds = %if.then3, %for.body
  br label %for.inc, !dbg !3933

for.inc:                                          ; preds = %if.end4
  %5 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !3937
  %next = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %5, i32 0, i32 3, !dbg !3938
  %6 = load %struct.cgraph_node*, %struct.cgraph_node** %next, align 8, !dbg !3938
  store %struct.cgraph_node* %6, %struct.cgraph_node** %node, align 8, !dbg !3939
  br label %for.cond, !dbg !3940, !llvm.loop !3941

for.end:                                          ; preds = %for.cond
  ret void, !dbg !3943
}

; Function Attrs: noinline nounwind uwtable
define internal void @inline_write_summary(%struct.cgraph_node_set_def* %set) #0 !dbg !3944 {
entry:
  %set.addr = alloca %struct.cgraph_node_set_def*, align 8
  store %struct.cgraph_node_set_def* %set, %struct.cgraph_node_set_def** %set.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cgraph_node_set_def** %set.addr, metadata !3948, metadata !DIExpression()), !dbg !3949
  %0 = load i32, i32* @flag_indirect_inlining, align 4, !dbg !3950
  %tobool = icmp ne i32 %0, 0, !dbg !3950
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !3952

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* @flag_ipa_cp, align 4, !dbg !3953
  %tobool1 = icmp ne i32 %1, 0, !dbg !3953
  br i1 %tobool1, label %if.end, label %if.then, !dbg !3954

if.then:                                          ; preds = %land.lhs.true
  %2 = load %struct.cgraph_node_set_def*, %struct.cgraph_node_set_def** %set.addr, align 8, !dbg !3955
  call void @ipa_prop_write_jump_functions(%struct.cgraph_node_set_def* %2), !dbg !3956
  br label %if.end, !dbg !3956

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  ret void, !dbg !3957
}

; Function Attrs: noinline nounwind uwtable
define internal void @inline_read_summary() #0 !dbg !3958 {
entry:
  %0 = load i32, i32* @flag_indirect_inlining, align 4, !dbg !3959
  %tobool = icmp ne i32 %0, 0, !dbg !3959
  br i1 %tobool, label %if.then, label %if.end3, !dbg !3961

if.then:                                          ; preds = %entry
  call void @ipa_register_cgraph_hooks(), !dbg !3962
  %1 = load i32, i32* @flag_ipa_cp, align 4, !dbg !3964
  %tobool1 = icmp ne i32 %1, 0, !dbg !3964
  br i1 %tobool1, label %if.end, label %if.then2, !dbg !3966

if.then2:                                         ; preds = %if.then
  call void @ipa_prop_read_jump_functions(), !dbg !3967
  br label %if.end, !dbg !3967

if.end:                                           ; preds = %if.then2, %if.then
  br label %if.end3, !dbg !3968

if.end3:                                          ; preds = %if.end, %entry
  %call = call %struct.cgraph_node_hook_list* @cgraph_add_function_insertion_hook(void (%struct.cgraph_node*, i8*)* @add_new_function, i8* null), !dbg !3969
  store %struct.cgraph_node_hook_list* %call, %struct.cgraph_node_hook_list** @function_insertion_hook_holder, align 8, !dbg !3970
  ret void, !dbg !3971
}

declare dso_local void @lto_ipa_fixup_call_notes(%struct.cgraph_node*, %union.gimple_statement_d**) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @inline_transform(%struct.cgraph_node* %node) #0 !dbg !3972 {
entry:
  %retval = alloca i32, align 4
  %node.addr = alloca %struct.cgraph_node*, align 8
  %todo = alloca i32, align 4
  %e = alloca %struct.cgraph_edge*, align 8
  store %struct.cgraph_node* %node, %struct.cgraph_node** %node.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %node.addr, metadata !3973, metadata !DIExpression()), !dbg !3974
  call void @llvm.dbg.declare(metadata i32* %todo, metadata !3975, metadata !DIExpression()), !dbg !3976
  store i32 0, i32* %todo, align 4, !dbg !3976
  call void @llvm.dbg.declare(metadata %struct.cgraph_edge** %e, metadata !3977, metadata !DIExpression()), !dbg !3978
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3979
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !3979
  %after_inlining = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 20, !dbg !3981
  %bf.load = load i32, i32* %after_inlining, align 8, !dbg !3981
  %bf.lshr = lshr i32 %bf.load, 24, !dbg !3981
  %bf.clear = and i32 %bf.lshr, 1, !dbg !3981
  %tobool = icmp ne i32 %bf.clear, 0, !dbg !3979
  br i1 %tobool, label %if.then, label %if.end, !dbg !3982

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4, !dbg !3983
  br label %return, !dbg !3983

if.end:                                           ; preds = %entry
  %1 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !3984
  %decl = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %1, i32 0, i32 0, !dbg !3986
  %2 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !3986
  %call = call zeroext i8 @cgraph_preserve_function_body_p(%union.tree_node* %2), !dbg !3987
  %tobool1 = icmp ne i8 %call, 0, !dbg !3987
  br i1 %tobool1, label %if.then2, label %if.end4, !dbg !3988

if.then2:                                         ; preds = %if.end
  %3 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !3989
  %call3 = call %struct.cgraph_node* @save_inline_function_body(%struct.cgraph_node* %3), !dbg !3990
  br label %if.end4, !dbg !3990

if.end4:                                          ; preds = %if.then2, %if.end
  %4 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !3991
  %callees = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %4, i32 0, i32 1, !dbg !3993
  %5 = load %struct.cgraph_edge*, %struct.cgraph_edge** %callees, align 8, !dbg !3993
  store %struct.cgraph_edge* %5, %struct.cgraph_edge** %e, align 8, !dbg !3994
  br label %for.cond, !dbg !3995

for.cond:                                         ; preds = %for.inc, %if.end4
  %6 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !3996
  %tobool5 = icmp ne %struct.cgraph_edge* %6, null, !dbg !3998
  br i1 %tobool5, label %for.body, label %for.end, !dbg !3998

for.body:                                         ; preds = %for.cond
  %7 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !3999
  %inline_failed = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %7, i32 0, i32 9, !dbg !4001
  %8 = load i32, i32* %inline_failed, align 8, !dbg !4001
  %tobool6 = icmp ne i32 %8, 0, !dbg !3999
  br i1 %tobool6, label %lor.lhs.false, label %if.then8, !dbg !4002

lor.lhs.false:                                    ; preds = %for.body
  %9 = load i32, i32* @warn_inline, align 4, !dbg !4003
  %tobool7 = icmp ne i32 %9, 0, !dbg !4003
  br i1 %tobool7, label %if.then8, label %if.end9, !dbg !4004

if.then8:                                         ; preds = %lor.lhs.false, %for.body
  br label %for.end, !dbg !4005

if.end9:                                          ; preds = %lor.lhs.false
  br label %for.inc, !dbg !4003

for.inc:                                          ; preds = %if.end9
  %10 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !4006
  %next_callee = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %10, i32 0, i32 6, !dbg !4007
  %11 = load %struct.cgraph_edge*, %struct.cgraph_edge** %next_callee, align 8, !dbg !4007
  store %struct.cgraph_edge* %11, %struct.cgraph_edge** %e, align 8, !dbg !4008
  br label %for.cond, !dbg !4009, !llvm.loop !4010

for.end:                                          ; preds = %if.then8, %for.cond
  %12 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !4012
  %tobool10 = icmp ne %struct.cgraph_edge* %12, null, !dbg !4012
  br i1 %tobool10, label %if.then11, label %if.end21, !dbg !4014

if.then11:                                        ; preds = %for.end
  br label %do.body, !dbg !4015

do.body:                                          ; preds = %if.then11
  %13 = load i8, i8* @timevar_enable, align 1, !dbg !4017
  %tobool12 = icmp ne i8 %13, 0, !dbg !4017
  br i1 %tobool12, label %if.then13, label %if.end14, !dbg !4020

if.then13:                                        ; preds = %do.body
  call void @timevar_push_1(i32 47), !dbg !4017
  br label %if.end14, !dbg !4017

if.end14:                                         ; preds = %if.then13, %do.body
  br label %do.end, !dbg !4020

do.end:                                           ; preds = %if.end14
  %14 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8, !dbg !4021
  %call15 = call i32 @optimize_inline_calls(%union.tree_node* %14), !dbg !4022
  store i32 %call15, i32* %todo, align 4, !dbg !4023
  br label %do.body16, !dbg !4024

do.body16:                                        ; preds = %do.end
  %15 = load i8, i8* @timevar_enable, align 1, !dbg !4025
  %tobool17 = icmp ne i8 %15, 0, !dbg !4025
  br i1 %tobool17, label %if.then18, label %if.end19, !dbg !4028

if.then18:                                        ; preds = %do.body16
  call void @timevar_pop_1(i32 47), !dbg !4025
  br label %if.end19, !dbg !4025

if.end19:                                         ; preds = %if.then18, %do.body16
  br label %do.end20, !dbg !4028

do.end20:                                         ; preds = %if.end19
  br label %if.end21, !dbg !4029

if.end21:                                         ; preds = %do.end20, %for.end
  %16 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4030
  %add.ptr22 = getelementptr inbounds %struct.function, %struct.function* %16, i64 0, !dbg !4030
  %always_inline_functions_inlined = getelementptr inbounds %struct.function, %struct.function* %add.ptr22, i32 0, i32 20, !dbg !4031
  %bf.load23 = load i32, i32* %always_inline_functions_inlined, align 8, !dbg !4032
  %bf.clear24 = and i32 %bf.load23, -33554433, !dbg !4032
  %bf.set = or i32 %bf.clear24, 33554432, !dbg !4032
  store i32 %bf.set, i32* %always_inline_functions_inlined, align 8, !dbg !4032
  %17 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4033
  %add.ptr25 = getelementptr inbounds %struct.function, %struct.function* %17, i64 0, !dbg !4033
  %after_inlining26 = getelementptr inbounds %struct.function, %struct.function* %add.ptr25, i32 0, i32 20, !dbg !4034
  %bf.load27 = load i32, i32* %after_inlining26, align 8, !dbg !4035
  %bf.clear28 = and i32 %bf.load27, -16777217, !dbg !4035
  %bf.set29 = or i32 %bf.clear28, 16777216, !dbg !4035
  store i32 %bf.set29, i32* %after_inlining26, align 8, !dbg !4035
  %18 = load i32, i32* %todo, align 4, !dbg !4036
  %call30 = call i32 @execute_fixup_cfg(), !dbg !4037
  %or = or i32 %18, %call30, !dbg !4038
  store i32 %or, i32* %retval, align 4, !dbg !4039
  br label %return, !dbg !4039

return:                                           ; preds = %if.end21, %if.then
  %19 = load i32, i32* %retval, align 4, !dbg !4040
  ret i32 %19, !dbg !4040
}

; Function Attrs: noinline nounwind uwtable
define internal void @gt_ggc_ma_order(i8* %x_p) #0 !dbg !4041 {
entry:
  %x_p.addr = alloca i8*, align 8
  %i0 = alloca i64, align 8
  %a__ = alloca i8*, align 8
  store i8* %x_p, i8** %x_p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %x_p.addr, metadata !4042, metadata !DIExpression()), !dbg !4043
  %0 = load %struct.cgraph_node**, %struct.cgraph_node*** @order, align 8, !dbg !4044
  %cmp = icmp ne %struct.cgraph_node** %0, null, !dbg !4046
  br i1 %cmp, label %if.then, label %if.end15, !dbg !4047

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i64* %i0, metadata !4048, metadata !DIExpression()), !dbg !4050
  store i64 0, i64* %i0, align 8, !dbg !4051
  br label %for.cond, !dbg !4053

for.cond:                                         ; preds = %for.inc, %if.then
  %1 = load i64, i64* %i0, align 8, !dbg !4054
  %2 = load i32, i32* @nnodes, align 4, !dbg !4056
  %conv = sext i32 %2 to i64, !dbg !4057
  %cmp1 = icmp ne i64 %1, %conv, !dbg !4058
  br i1 %cmp1, label %for.body, label %for.end, !dbg !4059

for.body:                                         ; preds = %for.cond
  br label %do.body, !dbg !4060

do.body:                                          ; preds = %for.body
  %3 = load %struct.cgraph_node**, %struct.cgraph_node*** @order, align 8, !dbg !4062
  %4 = load i64, i64* %i0, align 8, !dbg !4062
  %arrayidx = getelementptr inbounds %struct.cgraph_node*, %struct.cgraph_node** %3, i64 %4, !dbg !4062
  %5 = load %struct.cgraph_node*, %struct.cgraph_node** %arrayidx, align 8, !dbg !4062
  %cmp3 = icmp ne %struct.cgraph_node* %5, null, !dbg !4062
  br i1 %cmp3, label %if.then5, label %if.end, !dbg !4065

if.then5:                                         ; preds = %do.body
  %6 = load %struct.cgraph_node**, %struct.cgraph_node*** @order, align 8, !dbg !4062
  %7 = load i64, i64* %i0, align 8, !dbg !4062
  %arrayidx6 = getelementptr inbounds %struct.cgraph_node*, %struct.cgraph_node** %6, i64 %7, !dbg !4062
  %8 = load %struct.cgraph_node*, %struct.cgraph_node** %arrayidx6, align 8, !dbg !4062
  %9 = bitcast %struct.cgraph_node* %8 to i8*, !dbg !4062
  call void @gt_ggc_mx_cgraph_node(i8* %9), !dbg !4062
  br label %if.end, !dbg !4062

if.end:                                           ; preds = %if.then5, %do.body
  br label %do.end, !dbg !4065

do.end:                                           ; preds = %if.end
  br label %for.inc, !dbg !4066

for.inc:                                          ; preds = %do.end
  %10 = load i64, i64* %i0, align 8, !dbg !4067
  %inc = add i64 %10, 1, !dbg !4067
  store i64 %inc, i64* %i0, align 8, !dbg !4067
  br label %for.cond, !dbg !4068, !llvm.loop !4069

for.end:                                          ; preds = %for.cond
  br label %do.body7, !dbg !4071

do.body7:                                         ; preds = %for.end
  call void @llvm.dbg.declare(metadata i8** %a__, metadata !4072, metadata !DIExpression()), !dbg !4075
  %11 = load %struct.cgraph_node**, %struct.cgraph_node*** @order, align 8, !dbg !4075
  %12 = bitcast %struct.cgraph_node** %11 to i8*, !dbg !4075
  store i8* %12, i8** %a__, align 8, !dbg !4075
  %13 = load i8*, i8** %a__, align 8, !dbg !4076
  %cmp8 = icmp ne i8* %13, null, !dbg !4076
  br i1 %cmp8, label %land.lhs.true, label %if.end13, !dbg !4076

land.lhs.true:                                    ; preds = %do.body7
  %14 = load i8*, i8** %a__, align 8, !dbg !4076
  %cmp10 = icmp ne i8* %14, inttoptr (i64 1 to i8*), !dbg !4076
  br i1 %cmp10, label %if.then12, label %if.end13, !dbg !4075

if.then12:                                        ; preds = %land.lhs.true
  %15 = load i8*, i8** %a__, align 8, !dbg !4076
  %call = call i32 @ggc_set_mark(i8* %15), !dbg !4076
  br label %if.end13, !dbg !4076

if.end13:                                         ; preds = %if.then12, %land.lhs.true, %do.body7
  br label %do.end14, !dbg !4075

do.end14:                                         ; preds = %if.end13
  br label %if.end15, !dbg !4078

if.end15:                                         ; preds = %do.end14, %entry
  ret void, !dbg !4079
}

; Function Attrs: noinline nounwind uwtable
define internal void @gt_pch_na_order(i8* %x_p) #0 !dbg !4080 {
entry:
  %x_p.addr = alloca i8*, align 8
  %i1 = alloca i64, align 8
  store i8* %x_p, i8** %x_p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %x_p.addr, metadata !4081, metadata !DIExpression()), !dbg !4082
  %0 = load %struct.cgraph_node**, %struct.cgraph_node*** @order, align 8, !dbg !4083
  %cmp = icmp ne %struct.cgraph_node** %0, null, !dbg !4085
  br i1 %cmp, label %if.then, label %if.end7, !dbg !4086

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i64* %i1, metadata !4087, metadata !DIExpression()), !dbg !4089
  store i64 0, i64* %i1, align 8, !dbg !4090
  br label %for.cond, !dbg !4092

for.cond:                                         ; preds = %for.inc, %if.then
  %1 = load i64, i64* %i1, align 8, !dbg !4093
  %2 = load i32, i32* @nnodes, align 4, !dbg !4095
  %conv = sext i32 %2 to i64, !dbg !4096
  %cmp1 = icmp ne i64 %1, %conv, !dbg !4097
  br i1 %cmp1, label %for.body, label %for.end, !dbg !4098

for.body:                                         ; preds = %for.cond
  br label %do.body, !dbg !4099

do.body:                                          ; preds = %for.body
  %3 = load %struct.cgraph_node**, %struct.cgraph_node*** @order, align 8, !dbg !4101
  %4 = load i64, i64* %i1, align 8, !dbg !4101
  %arrayidx = getelementptr inbounds %struct.cgraph_node*, %struct.cgraph_node** %3, i64 %4, !dbg !4101
  %5 = load %struct.cgraph_node*, %struct.cgraph_node** %arrayidx, align 8, !dbg !4101
  %cmp3 = icmp ne %struct.cgraph_node* %5, null, !dbg !4101
  br i1 %cmp3, label %if.then5, label %if.end, !dbg !4104

if.then5:                                         ; preds = %do.body
  %6 = load %struct.cgraph_node**, %struct.cgraph_node*** @order, align 8, !dbg !4101
  %7 = load i64, i64* %i1, align 8, !dbg !4101
  %arrayidx6 = getelementptr inbounds %struct.cgraph_node*, %struct.cgraph_node** %6, i64 %7, !dbg !4101
  %8 = load %struct.cgraph_node*, %struct.cgraph_node** %arrayidx6, align 8, !dbg !4101
  %9 = bitcast %struct.cgraph_node* %8 to i8*, !dbg !4101
  call void @gt_pch_nx_cgraph_node(i8* %9), !dbg !4101
  br label %if.end, !dbg !4101

if.end:                                           ; preds = %if.then5, %do.body
  br label %do.end, !dbg !4104

do.end:                                           ; preds = %if.end
  br label %for.inc, !dbg !4105

for.inc:                                          ; preds = %do.end
  %10 = load i64, i64* %i1, align 8, !dbg !4106
  %inc = add i64 %10, 1, !dbg !4106
  store i64 %inc, i64* %i1, align 8, !dbg !4106
  br label %for.cond, !dbg !4107, !llvm.loop !4108

for.end:                                          ; preds = %for.cond
  %11 = load %struct.cgraph_node**, %struct.cgraph_node*** @order, align 8, !dbg !4110
  %12 = bitcast %struct.cgraph_node** %11 to i8*, !dbg !4110
  %call = call i32 @gt_pch_note_object(i8* %12, i8* bitcast (%struct.cgraph_node*** @order to i8*), void (i8*, i8*, void (i8*, i8*)*, i8*)* @gt_pch_pa_order, i32 217), !dbg !4111
  br label %if.end7, !dbg !4112

if.end7:                                          ; preds = %for.end, %entry
  ret void, !dbg !4113
}

declare dso_local %struct.cgraph_node* @cgraph_node(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @cgraph_decide_inlining_incrementally(%struct.cgraph_node* %node, i32 %mode, i32 %depth) #0 !dbg !4114 {
entry:
  %node.addr = alloca %struct.cgraph_node*, align 8
  %mode.addr = alloca i32, align 4
  %depth.addr = alloca i32, align 4
  %e = alloca %struct.cgraph_edge*, align 8
  %inlined = alloca i8, align 1
  %failed_reason = alloca i32, align 4
  %old_mode = alloca i32, align 4
  %visited = alloca %struct.bitmap_head_def*, align 8
  %allowed_growth = alloca i32, align 4
  store %struct.cgraph_node* %node, %struct.cgraph_node** %node.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %node.addr, metadata !4117, metadata !DIExpression()), !dbg !4118
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !4119, metadata !DIExpression()), !dbg !4120
  store i32 %depth, i32* %depth.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %depth.addr, metadata !4121, metadata !DIExpression()), !dbg !4122
  call void @llvm.dbg.declare(metadata %struct.cgraph_edge** %e, metadata !4123, metadata !DIExpression()), !dbg !4124
  call void @llvm.dbg.declare(metadata i8* %inlined, metadata !4125, metadata !DIExpression()), !dbg !4126
  store i8 0, i8* %inlined, align 1, !dbg !4126
  call void @llvm.dbg.declare(metadata i32* %failed_reason, metadata !4127, metadata !DIExpression()), !dbg !4128
  call void @llvm.dbg.declare(metadata i32* %old_mode, metadata !4129, metadata !DIExpression()), !dbg !4130
  %0 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !4131
  %aux = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %0, i32 0, i32 16, !dbg !4132
  %1 = load i8*, i8** %aux, align 8, !dbg !4132
  %2 = ptrtoint i8* %1 to i64, !dbg !4133
  %conv = trunc i64 %2 to i32, !dbg !4134
  store i32 %conv, i32* %old_mode, align 4, !dbg !4135
  %3 = load i32, i32* %mode.addr, align 4, !dbg !4136
  %cmp = icmp ne i32 %3, 1, !dbg !4138
  br i1 %cmp, label %land.lhs.true, label %if.end10, !dbg !4139

land.lhs.true:                                    ; preds = %entry
  %4 = load i32, i32* %mode.addr, align 4, !dbg !4140
  %cmp2 = icmp ne i32 %4, 2, !dbg !4141
  br i1 %cmp2, label %land.lhs.true4, label %if.end10, !dbg !4142

land.lhs.true4:                                   ; preds = %land.lhs.true
  %5 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !4143
  %decl = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %5, i32 0, i32 0, !dbg !4143
  %6 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !4143
  %decl_common = bitcast %union.tree_node* %6 to %struct.tree_decl_common*, !dbg !4143
  %attributes = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 6, !dbg !4143
  %7 = load %union.tree_node*, %union.tree_node** %attributes, align 8, !dbg !4143
  %call = call %union.tree_node* @lookup_attribute(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.7, i64 0, i64 0), %union.tree_node* %7), !dbg !4144
  %cmp5 = icmp ne %union.tree_node* %call, null, !dbg !4145
  br i1 %cmp5, label %if.then, label %if.end10, !dbg !4146

if.then:                                          ; preds = %land.lhs.true4
  %8 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4147
  %tobool = icmp ne %struct._IO_FILE* %8, null, !dbg !4147
  br i1 %tobool, label %if.then7, label %if.end, !dbg !4150

if.then7:                                         ; preds = %if.then
  %9 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4151
  %10 = load i32, i32* %depth.addr, align 4, !dbg !4153
  call void @indent_to(%struct._IO_FILE* %9, i32 %10), !dbg !4154
  %11 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4155
  %12 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !4156
  %call8 = call i8* @cgraph_node_name(%struct.cgraph_node* %12), !dbg !4157
  %call9 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %11, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.8, i64 0, i64 0), i8* %call8), !dbg !4158
  br label %if.end, !dbg !4159

if.end:                                           ; preds = %if.then7, %if.then
  store i32 4, i32* %mode.addr, align 4, !dbg !4160
  br label %if.end10, !dbg !4161

if.end10:                                         ; preds = %if.end, %land.lhs.true4, %land.lhs.true, %entry
  %13 = load i32, i32* %mode.addr, align 4, !dbg !4162
  %conv11 = zext i32 %13 to i64, !dbg !4163
  %14 = inttoptr i64 %conv11 to i8*, !dbg !4164
  %15 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !4165
  %aux12 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %15, i32 0, i32 16, !dbg !4166
  store i8* %14, i8** %aux12, align 8, !dbg !4167
  %16 = load i32, i32* %mode.addr, align 4, !dbg !4168
  %cmp13 = icmp ne i32 %16, 2, !dbg !4170
  br i1 %cmp13, label %if.then15, label %if.end107, !dbg !4171

if.then15:                                        ; preds = %if.end10
  %17 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !4172
  %callees = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %17, i32 0, i32 1, !dbg !4174
  %18 = load %struct.cgraph_edge*, %struct.cgraph_edge** %callees, align 8, !dbg !4174
  store %struct.cgraph_edge* %18, %struct.cgraph_edge** %e, align 8, !dbg !4175
  br label %for.cond, !dbg !4176

for.cond:                                         ; preds = %for.inc, %if.then15
  %19 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !4177
  %tobool16 = icmp ne %struct.cgraph_edge* %19, null, !dbg !4179
  br i1 %tobool16, label %for.body, label %for.end, !dbg !4179

for.body:                                         ; preds = %for.cond
  %20 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !4180
  %callee = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %20, i32 0, i32 2, !dbg !4183
  %21 = load %struct.cgraph_node*, %struct.cgraph_node** %callee, align 8, !dbg !4183
  %local = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %21, i32 0, i32 18, !dbg !4184
  %disregard_inline_limits = getelementptr inbounds %struct.cgraph_local_info, %struct.cgraph_local_info* %local, i32 0, i32 2, !dbg !4185
  %bf.load = load i8, i8* %disregard_inline_limits, align 8, !dbg !4185
  %bf.lshr = lshr i8 %bf.load, 4, !dbg !4185
  %bf.clear = and i8 %bf.lshr, 1, !dbg !4185
  %bf.cast = zext i8 %bf.clear to i32, !dbg !4185
  %tobool17 = icmp ne i32 %bf.cast, 0, !dbg !4180
  br i1 %tobool17, label %if.end29, label %land.lhs.true18, !dbg !4186

land.lhs.true18:                                  ; preds = %for.body
  %22 = load i32, i32* %mode.addr, align 4, !dbg !4187
  %cmp19 = icmp ne i32 %22, 4, !dbg !4188
  br i1 %cmp19, label %if.then28, label %lor.lhs.false, !dbg !4189

lor.lhs.false:                                    ; preds = %land.lhs.true18
  %23 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !4190
  %callee21 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %23, i32 0, i32 2, !dbg !4191
  %24 = load %struct.cgraph_node*, %struct.cgraph_node** %callee21, align 8, !dbg !4191
  %local22 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %24, i32 0, i32 18, !dbg !4192
  %inlinable = getelementptr inbounds %struct.cgraph_local_info, %struct.cgraph_local_info* %local22, i32 0, i32 2, !dbg !4193
  %bf.load23 = load i8, i8* %inlinable, align 8, !dbg !4193
  %bf.lshr24 = lshr i8 %bf.load23, 3, !dbg !4193
  %bf.clear25 = and i8 %bf.lshr24, 1, !dbg !4193
  %bf.cast26 = zext i8 %bf.clear25 to i32, !dbg !4193
  %tobool27 = icmp ne i32 %bf.cast26, 0, !dbg !4190
  br i1 %tobool27, label %if.end29, label %if.then28, !dbg !4194

if.then28:                                        ; preds = %lor.lhs.false, %land.lhs.true18
  br label %for.inc, !dbg !4195

if.end29:                                         ; preds = %lor.lhs.false, %for.body
  %25 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !4196
  %call_stmt_cannot_inline_p = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %25, i32 0, i32 14, !dbg !4198
  %bf.load30 = load i8, i8* %call_stmt_cannot_inline_p, align 2, !dbg !4198
  %bf.lshr31 = lshr i8 %bf.load30, 1, !dbg !4198
  %bf.clear32 = and i8 %bf.lshr31, 1, !dbg !4198
  %bf.cast33 = zext i8 %bf.clear32 to i32, !dbg !4198
  %tobool34 = icmp ne i32 %bf.cast33, 0, !dbg !4196
  br i1 %tobool34, label %if.then35, label %if.end36, !dbg !4199

if.then35:                                        ; preds = %if.end29
  br label %for.inc, !dbg !4200

if.end36:                                         ; preds = %if.end29
  %26 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !4201
  %inline_failed = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %26, i32 0, i32 9, !dbg !4203
  %27 = load i32, i32* %inline_failed, align 8, !dbg !4203
  %tobool37 = icmp ne i32 %27, 0, !dbg !4201
  br i1 %tobool37, label %if.end46, label %land.lhs.true38, !dbg !4204

land.lhs.true38:                                  ; preds = %if.end36
  %28 = load i32, i32* %mode.addr, align 4, !dbg !4205
  %cmp39 = icmp eq i32 %28, 4, !dbg !4206
  br i1 %cmp39, label %if.then41, label %if.end46, !dbg !4207

if.then41:                                        ; preds = %land.lhs.true38
  %29 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !4208
  %30 = load i32, i32* %mode.addr, align 4, !dbg !4210
  %31 = load i32, i32* %depth.addr, align 4, !dbg !4211
  %call42 = call zeroext i8 @try_inline(%struct.cgraph_edge* %29, i32 %30, i32 %31), !dbg !4212
  %conv43 = zext i8 %call42 to i32, !dbg !4212
  %32 = load i8, i8* %inlined, align 1, !dbg !4213
  %conv44 = zext i8 %32 to i32, !dbg !4213
  %or = or i32 %conv44, %conv43, !dbg !4213
  %conv45 = trunc i32 %or to i8, !dbg !4213
  store i8 %conv45, i8* %inlined, align 1, !dbg !4213
  br label %for.inc, !dbg !4214

if.end46:                                         ; preds = %land.lhs.true38, %if.end36
  %33 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4215
  %tobool47 = icmp ne %struct._IO_FILE* %33, null, !dbg !4215
  br i1 %tobool47, label %if.then48, label %if.end52, !dbg !4217

if.then48:                                        ; preds = %if.end46
  %34 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4218
  %35 = load i32, i32* %depth.addr, align 4, !dbg !4220
  call void @indent_to(%struct._IO_FILE* %34, i32 %35), !dbg !4221
  %36 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4222
  %37 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !4223
  %callee49 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %37, i32 0, i32 2, !dbg !4224
  %38 = load %struct.cgraph_node*, %struct.cgraph_node** %callee49, align 8, !dbg !4224
  %call50 = call i8* @cgraph_node_name(%struct.cgraph_node* %38), !dbg !4225
  %call51 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %36, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.9, i64 0, i64 0), i8* %call50), !dbg !4226
  br label %if.end52, !dbg !4227

if.end52:                                         ; preds = %if.then48, %if.end46
  %39 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !4228
  %40 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !4230
  %callee53 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %40, i32 0, i32 2, !dbg !4231
  %41 = load %struct.cgraph_node*, %struct.cgraph_node** %callee53, align 8, !dbg !4231
  %42 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !4232
  %inline_failed54 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %42, i32 0, i32 9, !dbg !4233
  %call55 = call zeroext i8 @cgraph_recursive_inlining_p(%struct.cgraph_node* %39, %struct.cgraph_node* %41, i32* %inline_failed54), !dbg !4234
  %tobool56 = icmp ne i8 %call55, 0, !dbg !4234
  br i1 %tobool56, label %if.then57, label %if.end62, !dbg !4235

if.then57:                                        ; preds = %if.end52
  %43 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4236
  %tobool58 = icmp ne %struct._IO_FILE* %43, null, !dbg !4236
  br i1 %tobool58, label %if.then59, label %if.end61, !dbg !4239

if.then59:                                        ; preds = %if.then57
  %44 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4240
  %45 = load i32, i32* %depth.addr, align 4, !dbg !4242
  call void @indent_to(%struct._IO_FILE* %44, i32 %45), !dbg !4243
  %46 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4244
  %call60 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %46, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.10, i64 0, i64 0)), !dbg !4245
  br label %if.end61, !dbg !4246

if.end61:                                         ; preds = %if.then59, %if.then57
  br label %for.inc, !dbg !4247

if.end62:                                         ; preds = %if.end52
  %47 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !4248
  %call63 = call zeroext i8 @tree_can_inline_p(%struct.cgraph_edge* %47), !dbg !4250
  %tobool64 = icmp ne i8 %call63, 0, !dbg !4250
  br i1 %tobool64, label %if.end72, label %if.then65, !dbg !4251

if.then65:                                        ; preds = %if.end62
  %48 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4252
  %tobool66 = icmp ne %struct._IO_FILE* %48, null, !dbg !4252
  br i1 %tobool66, label %if.then67, label %if.end71, !dbg !4255

if.then67:                                        ; preds = %if.then65
  %49 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4256
  %50 = load i32, i32* %depth.addr, align 4, !dbg !4258
  call void @indent_to(%struct._IO_FILE* %49, i32 %50), !dbg !4259
  %51 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4260
  %52 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !4261
  %inline_failed68 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %52, i32 0, i32 9, !dbg !4262
  %53 = load i32, i32* %inline_failed68, align 8, !dbg !4262
  %call69 = call i8* @cgraph_inline_failed_string(i32 %53), !dbg !4263
  %call70 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %51, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.11, i64 0, i64 0), i8* %call69), !dbg !4264
  br label %if.end71, !dbg !4265

if.end71:                                         ; preds = %if.then67, %if.then65
  br label %for.inc, !dbg !4266

if.end72:                                         ; preds = %if.end62
  %54 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !4267
  %decl73 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %54, i32 0, i32 0, !dbg !4267
  %55 = load %union.tree_node*, %union.tree_node** %decl73, align 8, !dbg !4267
  %function_decl = bitcast %union.tree_node* %55 to %struct.tree_function_decl*, !dbg !4267
  %f = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl, i32 0, i32 1, !dbg !4267
  %56 = load %struct.function*, %struct.function** %f, align 8, !dbg !4267
  %call74 = call zeroext i8 @gimple_in_ssa_p(%struct.function* %56), !dbg !4269
  %conv75 = zext i8 %call74 to i32, !dbg !4269
  %57 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !4270
  %callee76 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %57, i32 0, i32 2, !dbg !4270
  %58 = load %struct.cgraph_node*, %struct.cgraph_node** %callee76, align 8, !dbg !4270
  %decl77 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %58, i32 0, i32 0, !dbg !4270
  %59 = load %union.tree_node*, %union.tree_node** %decl77, align 8, !dbg !4270
  %function_decl78 = bitcast %union.tree_node* %59 to %struct.tree_function_decl*, !dbg !4270
  %f79 = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl78, i32 0, i32 1, !dbg !4270
  %60 = load %struct.function*, %struct.function** %f79, align 8, !dbg !4270
  %call80 = call zeroext i8 @gimple_in_ssa_p(%struct.function* %60), !dbg !4271
  %conv81 = zext i8 %call80 to i32, !dbg !4271
  %cmp82 = icmp ne i32 %conv75, %conv81, !dbg !4272
  br i1 %cmp82, label %if.then84, label %if.end89, !dbg !4273

if.then84:                                        ; preds = %if.end72
  %61 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4274
  %tobool85 = icmp ne %struct._IO_FILE* %61, null, !dbg !4274
  br i1 %tobool85, label %if.then86, label %if.end88, !dbg !4277

if.then86:                                        ; preds = %if.then84
  %62 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4278
  %63 = load i32, i32* %depth.addr, align 4, !dbg !4280
  call void @indent_to(%struct._IO_FILE* %62, i32 %63), !dbg !4281
  %64 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4282
  %call87 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %64, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.12, i64 0, i64 0)), !dbg !4283
  br label %if.end88, !dbg !4284

if.end88:                                         ; preds = %if.then86, %if.then84
  br label %for.inc, !dbg !4285

if.end89:                                         ; preds = %if.end72
  %65 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !4286
  %callee90 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %65, i32 0, i32 2, !dbg !4288
  %66 = load %struct.cgraph_node*, %struct.cgraph_node** %callee90, align 8, !dbg !4288
  %analyzed = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %66, i32 0, i32 27, !dbg !4289
  %bf.load91 = load i16, i16* %analyzed, align 4, !dbg !4289
  %bf.lshr92 = lshr i16 %bf.load91, 5, !dbg !4289
  %bf.clear93 = and i16 %bf.lshr92, 1, !dbg !4289
  %bf.cast94 = zext i16 %bf.clear93 to i32, !dbg !4289
  %tobool95 = icmp ne i32 %bf.cast94, 0, !dbg !4286
  br i1 %tobool95, label %if.end101, label %if.then96, !dbg !4290

if.then96:                                        ; preds = %if.end89
  %67 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4291
  %tobool97 = icmp ne %struct._IO_FILE* %67, null, !dbg !4291
  br i1 %tobool97, label %if.then98, label %if.end100, !dbg !4294

if.then98:                                        ; preds = %if.then96
  %68 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4295
  %69 = load i32, i32* %depth.addr, align 4, !dbg !4297
  call void @indent_to(%struct._IO_FILE* %68, i32 %69), !dbg !4298
  %70 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4299
  %call99 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %70, i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.13, i64 0, i64 0)), !dbg !4300
  br label %if.end100, !dbg !4301

if.end100:                                        ; preds = %if.then98, %if.then96
  br label %for.inc, !dbg !4302

if.end101:                                        ; preds = %if.end89
  %71 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !4303
  %72 = load i32, i32* %mode.addr, align 4, !dbg !4304
  %73 = load i32, i32* %depth.addr, align 4, !dbg !4305
  %call102 = call zeroext i8 @try_inline(%struct.cgraph_edge* %71, i32 %72, i32 %73), !dbg !4306
  %conv103 = zext i8 %call102 to i32, !dbg !4306
  %74 = load i8, i8* %inlined, align 1, !dbg !4307
  %conv104 = zext i8 %74 to i32, !dbg !4307
  %or105 = or i32 %conv104, %conv103, !dbg !4307
  %conv106 = trunc i32 %or105 to i8, !dbg !4307
  store i8 %conv106, i8* %inlined, align 1, !dbg !4307
  br label %for.inc, !dbg !4308

for.inc:                                          ; preds = %if.end101, %if.end100, %if.end88, %if.end71, %if.end61, %if.then41, %if.then35, %if.then28
  %75 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !4309
  %next_callee = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %75, i32 0, i32 6, !dbg !4310
  %76 = load %struct.cgraph_edge*, %struct.cgraph_edge** %next_callee, align 8, !dbg !4310
  store %struct.cgraph_edge* %76, %struct.cgraph_edge** %e, align 8, !dbg !4311
  br label %for.cond, !dbg !4312, !llvm.loop !4313

for.end:                                          ; preds = %for.cond
  br label %if.end107, !dbg !4314

if.end107:                                        ; preds = %for.end, %if.end10
  %77 = load i32, i32* %mode.addr, align 4, !dbg !4315
  %cmp108 = icmp ne i32 %77, 4, !dbg !4317
  br i1 %cmp108, label %land.lhs.true110, label %if.end296, !dbg !4318

land.lhs.true110:                                 ; preds = %if.end107
  %78 = load i32, i32* %mode.addr, align 4, !dbg !4319
  %cmp111 = icmp ne i32 %78, 1, !dbg !4320
  br i1 %cmp111, label %land.lhs.true113, label %if.end296, !dbg !4321

land.lhs.true113:                                 ; preds = %land.lhs.true110
  %79 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !4322
  %local114 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %79, i32 0, i32 18, !dbg !4323
  %disregard_inline_limits115 = getelementptr inbounds %struct.cgraph_local_info, %struct.cgraph_local_info* %local114, i32 0, i32 2, !dbg !4324
  %bf.load116 = load i8, i8* %disregard_inline_limits115, align 8, !dbg !4324
  %bf.lshr117 = lshr i8 %bf.load116, 4, !dbg !4324
  %bf.clear118 = and i8 %bf.lshr117, 1, !dbg !4324
  %bf.cast119 = zext i8 %bf.clear118 to i32, !dbg !4324
  %tobool120 = icmp ne i32 %bf.cast119, 0, !dbg !4322
  br i1 %tobool120, label %if.end296, label %if.then121, !dbg !4325

if.then121:                                       ; preds = %land.lhs.true113
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %visited, metadata !4326, metadata !DIExpression()), !dbg !4328
  %call122 = call %struct.bitmap_head_def* @bitmap_obstack_alloc_stat(%struct.bitmap_obstack* null), !dbg !4329
  store %struct.bitmap_head_def* %call122, %struct.bitmap_head_def** %visited, align 8, !dbg !4328
  %80 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !4330
  %callees123 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %80, i32 0, i32 1, !dbg !4332
  %81 = load %struct.cgraph_edge*, %struct.cgraph_edge** %callees123, align 8, !dbg !4332
  store %struct.cgraph_edge* %81, %struct.cgraph_edge** %e, align 8, !dbg !4333
  br label %for.cond124, !dbg !4334

for.cond124:                                      ; preds = %for.inc293, %if.then121
  %82 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !4335
  %tobool125 = icmp ne %struct.cgraph_edge* %82, null, !dbg !4337
  br i1 %tobool125, label %for.body126, label %for.end295, !dbg !4337

for.body126:                                      ; preds = %for.cond124
  call void @llvm.dbg.declare(metadata i32* %allowed_growth, metadata !4338, metadata !DIExpression()), !dbg !4340
  store i32 0, i32* %allowed_growth, align 4, !dbg !4340
  %83 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !4341
  %callee127 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %83, i32 0, i32 2, !dbg !4343
  %84 = load %struct.cgraph_node*, %struct.cgraph_node** %callee127, align 8, !dbg !4343
  %local128 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %84, i32 0, i32 18, !dbg !4344
  %inlinable129 = getelementptr inbounds %struct.cgraph_local_info, %struct.cgraph_local_info* %local128, i32 0, i32 2, !dbg !4345
  %bf.load130 = load i8, i8* %inlinable129, align 8, !dbg !4345
  %bf.lshr131 = lshr i8 %bf.load130, 3, !dbg !4345
  %bf.clear132 = and i8 %bf.lshr131, 1, !dbg !4345
  %bf.cast133 = zext i8 %bf.clear132 to i32, !dbg !4345
  %tobool134 = icmp ne i32 %bf.cast133, 0, !dbg !4341
  br i1 %tobool134, label %lor.lhs.false135, label %if.then147, !dbg !4346

lor.lhs.false135:                                 ; preds = %for.body126
  %85 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !4347
  %inline_failed136 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %85, i32 0, i32 9, !dbg !4348
  %86 = load i32, i32* %inline_failed136, align 8, !dbg !4348
  %tobool137 = icmp ne i32 %86, 0, !dbg !4347
  br i1 %tobool137, label %lor.lhs.false138, label %if.then147, !dbg !4349

lor.lhs.false138:                                 ; preds = %lor.lhs.false135
  %87 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !4350
  %callee139 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %87, i32 0, i32 2, !dbg !4351
  %88 = load %struct.cgraph_node*, %struct.cgraph_node** %callee139, align 8, !dbg !4351
  %local140 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %88, i32 0, i32 18, !dbg !4352
  %disregard_inline_limits141 = getelementptr inbounds %struct.cgraph_local_info, %struct.cgraph_local_info* %local140, i32 0, i32 2, !dbg !4353
  %bf.load142 = load i8, i8* %disregard_inline_limits141, align 8, !dbg !4353
  %bf.lshr143 = lshr i8 %bf.load142, 4, !dbg !4353
  %bf.clear144 = and i8 %bf.lshr143, 1, !dbg !4353
  %bf.cast145 = zext i8 %bf.clear144 to i32, !dbg !4353
  %tobool146 = icmp ne i32 %bf.cast145, 0, !dbg !4350
  br i1 %tobool146, label %if.then147, label %if.end148, !dbg !4354

if.then147:                                       ; preds = %lor.lhs.false138, %lor.lhs.false135, %for.body126
  br label %for.inc293, !dbg !4355

if.end148:                                        ; preds = %lor.lhs.false138
  %89 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %visited, align 8, !dbg !4356
  %90 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !4358
  %callee149 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %90, i32 0, i32 2, !dbg !4359
  %91 = load %struct.cgraph_node*, %struct.cgraph_node** %callee149, align 8, !dbg !4359
  %uid = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %91, i32 0, i32 24, !dbg !4360
  %92 = load i32, i32* %uid, align 8, !dbg !4360
  %call150 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %89, i32 %92), !dbg !4361
  %tobool151 = icmp ne i8 %call150, 0, !dbg !4361
  br i1 %tobool151, label %if.end153, label %if.then152, !dbg !4362

if.then152:                                       ; preds = %if.end148
  br label %for.inc293, !dbg !4363

if.end153:                                        ; preds = %if.end148
  %93 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4364
  %tobool154 = icmp ne %struct._IO_FILE* %93, null, !dbg !4364
  br i1 %tobool154, label %if.then155, label %if.end159, !dbg !4366

if.then155:                                       ; preds = %if.end153
  %94 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4367
  %95 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !4368
  %callee156 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %95, i32 0, i32 2, !dbg !4369
  %96 = load %struct.cgraph_node*, %struct.cgraph_node** %callee156, align 8, !dbg !4369
  %call157 = call i8* @cgraph_node_name(%struct.cgraph_node* %96), !dbg !4370
  %call158 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %94, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.14, i64 0, i64 0), i8* %call157), !dbg !4371
  br label %if.end159, !dbg !4371

if.end159:                                        ; preds = %if.then155, %if.end153
  %97 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !4372
  %98 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !4374
  %callee160 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %98, i32 0, i32 2, !dbg !4375
  %99 = load %struct.cgraph_node*, %struct.cgraph_node** %callee160, align 8, !dbg !4375
  %100 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !4376
  %inline_failed161 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %100, i32 0, i32 9, !dbg !4377
  %call162 = call zeroext i8 @cgraph_recursive_inlining_p(%struct.cgraph_node* %97, %struct.cgraph_node* %99, i32* %inline_failed161), !dbg !4378
  %tobool163 = icmp ne i8 %call162, 0, !dbg !4378
  br i1 %tobool163, label %if.then164, label %if.end169, !dbg !4379

if.then164:                                       ; preds = %if.end159
  %101 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4380
  %tobool165 = icmp ne %struct._IO_FILE* %101, null, !dbg !4380
  br i1 %tobool165, label %if.then166, label %if.end168, !dbg !4383

if.then166:                                       ; preds = %if.then164
  %102 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4384
  %103 = load i32, i32* %depth.addr, align 4, !dbg !4386
  call void @indent_to(%struct._IO_FILE* %102, i32 %103), !dbg !4387
  %104 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4388
  %call167 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %104, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.10, i64 0, i64 0)), !dbg !4389
  br label %if.end168, !dbg !4390

if.end168:                                        ; preds = %if.then166, %if.then164
  br label %for.inc293, !dbg !4391

if.end169:                                        ; preds = %if.end159
  %105 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !4392
  %decl170 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %105, i32 0, i32 0, !dbg !4392
  %106 = load %union.tree_node*, %union.tree_node** %decl170, align 8, !dbg !4392
  %function_decl171 = bitcast %union.tree_node* %106 to %struct.tree_function_decl*, !dbg !4392
  %f172 = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl171, i32 0, i32 1, !dbg !4392
  %107 = load %struct.function*, %struct.function** %f172, align 8, !dbg !4392
  %call173 = call zeroext i8 @gimple_in_ssa_p(%struct.function* %107), !dbg !4394
  %conv174 = zext i8 %call173 to i32, !dbg !4394
  %108 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !4395
  %callee175 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %108, i32 0, i32 2, !dbg !4395
  %109 = load %struct.cgraph_node*, %struct.cgraph_node** %callee175, align 8, !dbg !4395
  %decl176 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %109, i32 0, i32 0, !dbg !4395
  %110 = load %union.tree_node*, %union.tree_node** %decl176, align 8, !dbg !4395
  %function_decl177 = bitcast %union.tree_node* %110 to %struct.tree_function_decl*, !dbg !4395
  %f178 = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl177, i32 0, i32 1, !dbg !4395
  %111 = load %struct.function*, %struct.function** %f178, align 8, !dbg !4395
  %call179 = call zeroext i8 @gimple_in_ssa_p(%struct.function* %111), !dbg !4396
  %conv180 = zext i8 %call179 to i32, !dbg !4396
  %cmp181 = icmp ne i32 %conv174, %conv180, !dbg !4397
  br i1 %cmp181, label %if.then183, label %if.end188, !dbg !4398

if.then183:                                       ; preds = %if.end169
  %112 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4399
  %tobool184 = icmp ne %struct._IO_FILE* %112, null, !dbg !4399
  br i1 %tobool184, label %if.then185, label %if.end187, !dbg !4402

if.then185:                                       ; preds = %if.then183
  %113 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4403
  %114 = load i32, i32* %depth.addr, align 4, !dbg !4405
  call void @indent_to(%struct._IO_FILE* %113, i32 %114), !dbg !4406
  %115 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4407
  %call186 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %115, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.12, i64 0, i64 0)), !dbg !4408
  br label %if.end187, !dbg !4409

if.end187:                                        ; preds = %if.then185, %if.then183
  br label %for.inc293, !dbg !4410

if.end188:                                        ; preds = %if.end169
  %116 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !4411
  %call189 = call zeroext i8 @cgraph_maybe_hot_edge_p(%struct.cgraph_edge* %116), !dbg !4413
  %conv190 = zext i8 %call189 to i32, !dbg !4413
  %tobool191 = icmp ne i32 %conv190, 0, !dbg !4413
  br i1 %tobool191, label %land.lhs.true192, label %if.end202, !dbg !4414

land.lhs.true192:                                 ; preds = %if.end188
  %117 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !4415
  %callee193 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %117, i32 0, i32 2, !dbg !4416
  %118 = load %struct.cgraph_node*, %struct.cgraph_node** %callee193, align 8, !dbg !4416
  %call194 = call zeroext i8 @leaf_node_p(%struct.cgraph_node* %118), !dbg !4417
  %conv195 = zext i8 %call194 to i32, !dbg !4417
  %tobool196 = icmp ne i32 %conv195, 0, !dbg !4417
  br i1 %tobool196, label %land.lhs.true197, label %if.end202, !dbg !4418

land.lhs.true197:                                 ; preds = %land.lhs.true192
  %119 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4419
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %119, i64 0, !dbg !4419
  %call198 = call zeroext i8 @optimize_function_for_speed_p(%struct.function* %add.ptr), !dbg !4420
  %conv199 = zext i8 %call198 to i32, !dbg !4420
  %tobool200 = icmp ne i32 %conv199, 0, !dbg !4420
  br i1 %tobool200, label %if.then201, label %if.end202, !dbg !4421

if.then201:                                       ; preds = %land.lhs.true197
  %120 = load %struct.param_info*, %struct.param_info** @compiler_params, align 8, !dbg !4422
  %arrayidx = getelementptr inbounds %struct.param_info, %struct.param_info* %120, i64 20, !dbg !4422
  %value = getelementptr inbounds %struct.param_info, %struct.param_info* %arrayidx, i32 0, i32 1, !dbg !4422
  %121 = load i32, i32* %value, align 8, !dbg !4422
  store i32 %121, i32* %allowed_growth, align 4, !dbg !4423
  br label %if.end202, !dbg !4424

if.end202:                                        ; preds = %if.then201, %land.lhs.true197, %land.lhs.true192, %if.end188
  %122 = load i32, i32* %mode.addr, align 4, !dbg !4425
  %cmp203 = icmp eq i32 %122, 3, !dbg !4427
  br i1 %cmp203, label %land.lhs.true218, label %lor.lhs.false205, !dbg !4428

lor.lhs.false205:                                 ; preds = %if.end202
  %123 = load i32, i32* %mode.addr, align 4, !dbg !4429
  %cmp206 = icmp eq i32 %123, 2, !dbg !4430
  br i1 %cmp206, label %land.lhs.true218, label %lor.lhs.false208, !dbg !4431

lor.lhs.false208:                                 ; preds = %lor.lhs.false205
  %124 = load i32, i32* @flag_inline_functions, align 4, !dbg !4432
  %tobool209 = icmp ne i32 %124, 0, !dbg !4432
  br i1 %tobool209, label %if.end240, label %land.lhs.true210, !dbg !4433

land.lhs.true210:                                 ; preds = %lor.lhs.false208
  %125 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !4434
  %callee211 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %125, i32 0, i32 2, !dbg !4434
  %126 = load %struct.cgraph_node*, %struct.cgraph_node** %callee211, align 8, !dbg !4434
  %decl212 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %126, i32 0, i32 0, !dbg !4434
  %127 = load %union.tree_node*, %union.tree_node** %decl212, align 8, !dbg !4434
  %function_decl213 = bitcast %union.tree_node* %127 to %struct.tree_function_decl*, !dbg !4434
  %declared_inline_flag = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl213, i32 0, i32 5, !dbg !4434
  %bf.load214 = load i32, i32* %declared_inline_flag, align 8, !dbg !4434
  %bf.lshr215 = lshr i32 %bf.load214, 21, !dbg !4434
  %bf.clear216 = and i32 %bf.lshr215, 1, !dbg !4434
  %tobool217 = icmp ne i32 %bf.clear216, 0, !dbg !4434
  br i1 %tobool217, label %if.end240, label %land.lhs.true218, !dbg !4435

land.lhs.true218:                                 ; preds = %land.lhs.true210, %lor.lhs.false205, %if.end202
  %128 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !4436
  %caller = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %128, i32 0, i32 1, !dbg !4437
  %129 = load %struct.cgraph_node*, %struct.cgraph_node** %caller, align 8, !dbg !4437
  %130 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !4438
  %callee219 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %130, i32 0, i32 2, !dbg !4439
  %131 = load %struct.cgraph_node*, %struct.cgraph_node** %callee219, align 8, !dbg !4439
  %call220 = call i32 @cgraph_estimate_size_after_inlining(i32 1, %struct.cgraph_node* %129, %struct.cgraph_node* %131), !dbg !4440
  %132 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !4441
  %caller221 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %132, i32 0, i32 1, !dbg !4442
  %133 = load %struct.cgraph_node*, %struct.cgraph_node** %caller221, align 8, !dbg !4442
  %global = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %133, i32 0, i32 19, !dbg !4443
  %size = getelementptr inbounds %struct.cgraph_global_info, %struct.cgraph_global_info* %global, i32 0, i32 4, !dbg !4444
  %134 = load i32, i32* %size, align 4, !dbg !4444
  %135 = load i32, i32* %allowed_growth, align 4, !dbg !4445
  %add = add nsw i32 %134, %135, !dbg !4446
  %cmp222 = icmp sgt i32 %call220, %add, !dbg !4447
  br i1 %cmp222, label %land.lhs.true224, label %if.end240, !dbg !4448

land.lhs.true224:                                 ; preds = %land.lhs.true218
  %136 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !4449
  %callee225 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %136, i32 0, i32 2, !dbg !4450
  %137 = load %struct.cgraph_node*, %struct.cgraph_node** %callee225, align 8, !dbg !4450
  %call226 = call i32 @cgraph_estimate_growth(%struct.cgraph_node* %137), !dbg !4451
  %138 = load i32, i32* %allowed_growth, align 4, !dbg !4452
  %cmp227 = icmp sgt i32 %call226, %138, !dbg !4453
  br i1 %cmp227, label %if.then229, label %if.end240, !dbg !4454

if.then229:                                       ; preds = %land.lhs.true224
  %139 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4455
  %tobool230 = icmp ne %struct._IO_FILE* %139, null, !dbg !4455
  br i1 %tobool230, label %if.then231, label %if.end239, !dbg !4458

if.then231:                                       ; preds = %if.then229
  %140 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4459
  %141 = load i32, i32* %depth.addr, align 4, !dbg !4461
  call void @indent_to(%struct._IO_FILE* %140, i32 %141), !dbg !4462
  %142 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4463
  %143 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !4464
  %caller232 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %143, i32 0, i32 1, !dbg !4465
  %144 = load %struct.cgraph_node*, %struct.cgraph_node** %caller232, align 8, !dbg !4465
  %145 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !4466
  %callee233 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %145, i32 0, i32 2, !dbg !4467
  %146 = load %struct.cgraph_node*, %struct.cgraph_node** %callee233, align 8, !dbg !4467
  %call234 = call i32 @cgraph_estimate_size_after_inlining(i32 1, %struct.cgraph_node* %144, %struct.cgraph_node* %146), !dbg !4468
  %147 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !4469
  %caller235 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %147, i32 0, i32 1, !dbg !4470
  %148 = load %struct.cgraph_node*, %struct.cgraph_node** %caller235, align 8, !dbg !4470
  %global236 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %148, i32 0, i32 19, !dbg !4471
  %size237 = getelementptr inbounds %struct.cgraph_global_info, %struct.cgraph_global_info* %global236, i32 0, i32 4, !dbg !4472
  %149 = load i32, i32* %size237, align 4, !dbg !4472
  %sub = sub nsw i32 %call234, %149, !dbg !4473
  %call238 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %142, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.15, i64 0, i64 0), i32 %sub), !dbg !4474
  br label %if.end239, !dbg !4475

if.end239:                                        ; preds = %if.then231, %if.then229
  br label %for.inc293, !dbg !4476

if.end240:                                        ; preds = %land.lhs.true224, %land.lhs.true218, %land.lhs.true210, %lor.lhs.false208
  %150 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !4477
  %151 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !4479
  %callee241 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %151, i32 0, i32 2, !dbg !4480
  %152 = load %struct.cgraph_node*, %struct.cgraph_node** %callee241, align 8, !dbg !4480
  %153 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !4481
  %inline_failed242 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %153, i32 0, i32 9, !dbg !4482
  %call243 = call zeroext i8 @cgraph_check_inline_limits(%struct.cgraph_node* %150, %struct.cgraph_node* %152, i32* %inline_failed242, i8 zeroext 0), !dbg !4483
  %tobool244 = icmp ne i8 %call243, 0, !dbg !4483
  br i1 %tobool244, label %lor.lhs.false245, label %if.then252, !dbg !4484

lor.lhs.false245:                                 ; preds = %if.end240
  %154 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !4485
  %call_stmt_cannot_inline_p246 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %154, i32 0, i32 14, !dbg !4486
  %bf.load247 = load i8, i8* %call_stmt_cannot_inline_p246, align 2, !dbg !4486
  %bf.lshr248 = lshr i8 %bf.load247, 1, !dbg !4486
  %bf.clear249 = and i8 %bf.lshr248, 1, !dbg !4486
  %bf.cast250 = zext i8 %bf.clear249 to i32, !dbg !4486
  %tobool251 = icmp ne i32 %bf.cast250, 0, !dbg !4485
  br i1 %tobool251, label %if.then252, label %if.end259, !dbg !4487

if.then252:                                       ; preds = %lor.lhs.false245, %if.end240
  %155 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4488
  %tobool253 = icmp ne %struct._IO_FILE* %155, null, !dbg !4488
  br i1 %tobool253, label %if.then254, label %if.end258, !dbg !4491

if.then254:                                       ; preds = %if.then252
  %156 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4492
  %157 = load i32, i32* %depth.addr, align 4, !dbg !4494
  call void @indent_to(%struct._IO_FILE* %156, i32 %157), !dbg !4495
  %158 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4496
  %159 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !4497
  %inline_failed255 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %159, i32 0, i32 9, !dbg !4498
  %160 = load i32, i32* %inline_failed255, align 8, !dbg !4498
  %call256 = call i8* @cgraph_inline_failed_string(i32 %160), !dbg !4499
  %call257 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %158, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.16, i64 0, i64 0), i8* %call256), !dbg !4500
  br label %if.end258, !dbg !4501

if.end258:                                        ; preds = %if.then254, %if.then252
  br label %for.inc293, !dbg !4502

if.end259:                                        ; preds = %lor.lhs.false245
  %161 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !4503
  %callee260 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %161, i32 0, i32 2, !dbg !4505
  %162 = load %struct.cgraph_node*, %struct.cgraph_node** %callee260, align 8, !dbg !4505
  %analyzed261 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %162, i32 0, i32 27, !dbg !4506
  %bf.load262 = load i16, i16* %analyzed261, align 4, !dbg !4506
  %bf.lshr263 = lshr i16 %bf.load262, 5, !dbg !4506
  %bf.clear264 = and i16 %bf.lshr263, 1, !dbg !4506
  %bf.cast265 = zext i16 %bf.clear264 to i32, !dbg !4506
  %tobool266 = icmp ne i32 %bf.cast265, 0, !dbg !4503
  br i1 %tobool266, label %if.end272, label %if.then267, !dbg !4507

if.then267:                                       ; preds = %if.end259
  %163 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4508
  %tobool268 = icmp ne %struct._IO_FILE* %163, null, !dbg !4508
  br i1 %tobool268, label %if.then269, label %if.end271, !dbg !4511

if.then269:                                       ; preds = %if.then267
  %164 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4512
  %165 = load i32, i32* %depth.addr, align 4, !dbg !4514
  call void @indent_to(%struct._IO_FILE* %164, i32 %165), !dbg !4515
  %166 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4516
  %call270 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %166, i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.13, i64 0, i64 0)), !dbg !4517
  br label %if.end271, !dbg !4518

if.end271:                                        ; preds = %if.then269, %if.then267
  br label %for.inc293, !dbg !4519

if.end272:                                        ; preds = %if.end259
  %167 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !4520
  %call273 = call zeroext i8 @tree_can_inline_p(%struct.cgraph_edge* %167), !dbg !4522
  %tobool274 = icmp ne i8 %call273, 0, !dbg !4522
  br i1 %tobool274, label %if.end282, label %if.then275, !dbg !4523

if.then275:                                       ; preds = %if.end272
  %168 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4524
  %tobool276 = icmp ne %struct._IO_FILE* %168, null, !dbg !4524
  br i1 %tobool276, label %if.then277, label %if.end281, !dbg !4527

if.then277:                                       ; preds = %if.then275
  %169 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4528
  %170 = load i32, i32* %depth.addr, align 4, !dbg !4530
  call void @indent_to(%struct._IO_FILE* %169, i32 %170), !dbg !4531
  %171 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4532
  %172 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !4533
  %inline_failed278 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %172, i32 0, i32 9, !dbg !4534
  %173 = load i32, i32* %inline_failed278, align 8, !dbg !4534
  %call279 = call i8* @cgraph_inline_failed_string(i32 %173), !dbg !4535
  %call280 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %171, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.17, i64 0, i64 0), i8* %call279), !dbg !4536
  br label %if.end281, !dbg !4537

if.end281:                                        ; preds = %if.then277, %if.then275
  br label %for.inc293, !dbg !4538

if.end282:                                        ; preds = %if.end272
  %174 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !4539
  %callee283 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %174, i32 0, i32 2, !dbg !4541
  %175 = load %struct.cgraph_node*, %struct.cgraph_node** %callee283, align 8, !dbg !4541
  %call284 = call zeroext i8 @cgraph_default_inline_p(%struct.cgraph_node* %175, i32* %failed_reason), !dbg !4542
  %tobool285 = icmp ne i8 %call284, 0, !dbg !4542
  br i1 %tobool285, label %if.then286, label %if.end292, !dbg !4543

if.then286:                                       ; preds = %if.end282
  %176 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !4544
  %177 = load i32, i32* %mode.addr, align 4, !dbg !4545
  %178 = load i32, i32* %depth.addr, align 4, !dbg !4546
  %call287 = call zeroext i8 @try_inline(%struct.cgraph_edge* %176, i32 %177, i32 %178), !dbg !4547
  %conv288 = zext i8 %call287 to i32, !dbg !4547
  %179 = load i8, i8* %inlined, align 1, !dbg !4548
  %conv289 = zext i8 %179 to i32, !dbg !4548
  %or290 = or i32 %conv289, %conv288, !dbg !4548
  %conv291 = trunc i32 %or290 to i8, !dbg !4548
  store i8 %conv291, i8* %inlined, align 1, !dbg !4548
  br label %if.end292, !dbg !4549

if.end292:                                        ; preds = %if.then286, %if.end282
  br label %for.inc293, !dbg !4550

for.inc293:                                       ; preds = %if.end292, %if.end281, %if.end271, %if.end258, %if.end239, %if.end187, %if.end168, %if.then152, %if.then147
  %180 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !4551
  %next_callee294 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %180, i32 0, i32 6, !dbg !4552
  %181 = load %struct.cgraph_edge*, %struct.cgraph_edge** %next_callee294, align 8, !dbg !4552
  store %struct.cgraph_edge* %181, %struct.cgraph_edge** %e, align 8, !dbg !4553
  br label %for.cond124, !dbg !4554, !llvm.loop !4555

for.end295:                                       ; preds = %for.cond124
  %182 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %visited, align 8, !dbg !4557
  call void @bitmap_obstack_free(%struct.bitmap_head_def* %182), !dbg !4557
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** %visited, align 8, !dbg !4557
  br label %if.end296, !dbg !4558

if.end296:                                        ; preds = %for.end295, %land.lhs.true113, %land.lhs.true110, %if.end107
  %183 = load i32, i32* %old_mode, align 4, !dbg !4559
  %conv297 = zext i32 %183 to i64, !dbg !4560
  %184 = inttoptr i64 %conv297 to i8*, !dbg !4561
  %185 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !4562
  %aux298 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %185, i32 0, i32 16, !dbg !4563
  store i8* %184, i8** %aux298, align 8, !dbg !4564
  %186 = load i8, i8* %inlined, align 1, !dbg !4565
  ret i8 %186, !dbg !4566
}

declare dso_local void @timevar_push_1(i32) #2

declare dso_local i32 @optimize_inline_calls(%union.tree_node*) #2

declare dso_local void @timevar_pop_1(i32) #2

declare dso_local i32 @fprintf(%struct._IO_FILE*, i8*, ...) #2

declare dso_local %union.tree_node* @lookup_attribute(i8*, %union.tree_node*) #2

declare dso_local void @indent_to(%struct._IO_FILE*, i32) #2

declare dso_local i8* @cgraph_node_name(%struct.cgraph_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @try_inline(%struct.cgraph_edge* %e, i32 %mode, i32 %depth) #0 !dbg !4567 {
entry:
  %retval = alloca i8, align 1
  %e.addr = alloca %struct.cgraph_edge*, align 8
  %mode.addr = alloca i32, align 4
  %depth.addr = alloca i32, align 4
  %callee = alloca %struct.cgraph_node*, align 8
  %callee_mode = alloca i32, align 4
  %always_inline = alloca i8, align 1
  %inlined = alloca i8, align 1
  store %struct.cgraph_edge* %e, %struct.cgraph_edge** %e.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cgraph_edge** %e.addr, metadata !4570, metadata !DIExpression()), !dbg !4571
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !4572, metadata !DIExpression()), !dbg !4573
  store i32 %depth, i32* %depth.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %depth.addr, metadata !4574, metadata !DIExpression()), !dbg !4575
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %callee, metadata !4576, metadata !DIExpression()), !dbg !4577
  %0 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e.addr, align 8, !dbg !4578
  %callee1 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %0, i32 0, i32 2, !dbg !4579
  %1 = load %struct.cgraph_node*, %struct.cgraph_node** %callee1, align 8, !dbg !4579
  store %struct.cgraph_node* %1, %struct.cgraph_node** %callee, align 8, !dbg !4577
  call void @llvm.dbg.declare(metadata i32* %callee_mode, metadata !4580, metadata !DIExpression()), !dbg !4581
  %2 = load %struct.cgraph_node*, %struct.cgraph_node** %callee, align 8, !dbg !4582
  %aux = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %2, i32 0, i32 16, !dbg !4583
  %3 = load i8*, i8** %aux, align 8, !dbg !4583
  %4 = ptrtoint i8* %3 to i64, !dbg !4584
  %conv = trunc i64 %4 to i32, !dbg !4585
  store i32 %conv, i32* %callee_mode, align 4, !dbg !4581
  call void @llvm.dbg.declare(metadata i8* %always_inline, metadata !4586, metadata !DIExpression()), !dbg !4587
  %5 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e.addr, align 8, !dbg !4588
  %callee2 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %5, i32 0, i32 2, !dbg !4589
  %6 = load %struct.cgraph_node*, %struct.cgraph_node** %callee2, align 8, !dbg !4589
  %local = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %6, i32 0, i32 18, !dbg !4590
  %disregard_inline_limits = getelementptr inbounds %struct.cgraph_local_info, %struct.cgraph_local_info* %local, i32 0, i32 2, !dbg !4591
  %bf.load = load i8, i8* %disregard_inline_limits, align 8, !dbg !4591
  %bf.lshr = lshr i8 %bf.load, 4, !dbg !4591
  %bf.clear = and i8 %bf.lshr, 1, !dbg !4591
  %bf.cast = zext i8 %bf.clear to i32, !dbg !4591
  %conv3 = trunc i32 %bf.cast to i8, !dbg !4588
  store i8 %conv3, i8* %always_inline, align 1, !dbg !4587
  call void @llvm.dbg.declare(metadata i8* %inlined, metadata !4592, metadata !DIExpression()), !dbg !4593
  store i8 0, i8* %inlined, align 1, !dbg !4593
  %7 = load i32, i32* %callee_mode, align 4, !dbg !4594
  %tobool = icmp ne i32 %7, 0, !dbg !4594
  br i1 %tobool, label %if.then, label %if.end26, !dbg !4596

if.then:                                          ; preds = %entry
  %8 = load i8, i8* %always_inline, align 1, !dbg !4597
  %conv4 = zext i8 %8 to i32, !dbg !4597
  %tobool5 = icmp ne i32 %conv4, 0, !dbg !4597
  br i1 %tobool5, label %land.lhs.true, label %if.else, !dbg !4600

land.lhs.true:                                    ; preds = %if.then
  %9 = load i32, i32* %mode.addr, align 4, !dbg !4601
  %cmp = icmp ne i32 %9, 1, !dbg !4602
  br i1 %cmp, label %if.then7, label %if.else, !dbg !4603

if.then7:                                         ; preds = %land.lhs.true
  %10 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4604
  %tobool8 = icmp ne %struct._IO_FILE* %10, null, !dbg !4604
  br i1 %tobool8, label %if.then9, label %if.end, !dbg !4607

if.then9:                                         ; preds = %if.then7
  %11 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4608
  %12 = load i32, i32* %depth.addr, align 4, !dbg !4610
  call void @indent_to(%struct._IO_FILE* %11, i32 %12), !dbg !4611
  %13 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4612
  %14 = load %struct.cgraph_node*, %struct.cgraph_node** %callee, align 8, !dbg !4613
  %call = call i8* @cgraph_node_name(%struct.cgraph_node* %14), !dbg !4614
  %call10 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %13, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.18, i64 0, i64 0), i8* %call), !dbg !4615
  br label %if.end, !dbg !4616

if.end:                                           ; preds = %if.then9, %if.then7
  store i32 1, i32* %mode.addr, align 4, !dbg !4617
  br label %if.end25, !dbg !4618

if.else:                                          ; preds = %land.lhs.true, %if.then
  %15 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4619
  %tobool11 = icmp ne %struct._IO_FILE* %15, null, !dbg !4619
  br i1 %tobool11, label %if.then12, label %if.end16, !dbg !4622

if.then12:                                        ; preds = %if.else
  %16 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4623
  %17 = load i32, i32* %depth.addr, align 4, !dbg !4625
  call void @indent_to(%struct._IO_FILE* %16, i32 %17), !dbg !4626
  %18 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4627
  %19 = load %struct.cgraph_node*, %struct.cgraph_node** %callee, align 8, !dbg !4628
  %call13 = call i8* @cgraph_node_name(%struct.cgraph_node* %19), !dbg !4629
  %20 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e.addr, align 8, !dbg !4630
  %caller = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %20, i32 0, i32 1, !dbg !4631
  %21 = load %struct.cgraph_node*, %struct.cgraph_node** %caller, align 8, !dbg !4631
  %call14 = call i8* @cgraph_node_name(%struct.cgraph_node* %21), !dbg !4632
  %call15 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %18, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.19, i64 0, i64 0), i8* %call13, i8* %call14), !dbg !4633
  br label %if.end16, !dbg !4634

if.end16:                                         ; preds = %if.then12, %if.else
  %22 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e.addr, align 8, !dbg !4635
  %callee17 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %22, i32 0, i32 2, !dbg !4636
  %23 = load %struct.cgraph_node*, %struct.cgraph_node** %callee17, align 8, !dbg !4636
  %local18 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %23, i32 0, i32 18, !dbg !4637
  %disregard_inline_limits19 = getelementptr inbounds %struct.cgraph_local_info, %struct.cgraph_local_info* %local18, i32 0, i32 2, !dbg !4638
  %bf.load20 = load i8, i8* %disregard_inline_limits19, align 8, !dbg !4638
  %bf.lshr21 = lshr i8 %bf.load20, 4, !dbg !4638
  %bf.clear22 = and i8 %bf.lshr21, 1, !dbg !4638
  %bf.cast23 = zext i8 %bf.clear22 to i32, !dbg !4638
  %tobool24 = icmp ne i32 %bf.cast23, 0, !dbg !4635
  %24 = zext i1 %tobool24 to i64, !dbg !4635
  %cond = select i1 %tobool24, i32 12, i32 1, !dbg !4635
  %25 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e.addr, align 8, !dbg !4639
  %inline_failed = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %25, i32 0, i32 9, !dbg !4640
  store i32 %cond, i32* %inline_failed, align 8, !dbg !4641
  store i8 0, i8* %retval, align 1, !dbg !4642
  br label %return, !dbg !4642

if.end25:                                         ; preds = %if.end
  br label %if.end26, !dbg !4643

if.end26:                                         ; preds = %if.end25, %entry
  %26 = load i32, i32* %mode.addr, align 4, !dbg !4644
  %conv27 = zext i32 %26 to i64, !dbg !4645
  %27 = inttoptr i64 %conv27 to i8*, !dbg !4646
  %28 = load %struct.cgraph_node*, %struct.cgraph_node** %callee, align 8, !dbg !4647
  %aux28 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %28, i32 0, i32 16, !dbg !4648
  store i8* %27, i8** %aux28, align 8, !dbg !4649
  %29 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4650
  %tobool29 = icmp ne %struct._IO_FILE* %29, null, !dbg !4650
  br i1 %tobool29, label %if.then30, label %if.end36, !dbg !4652

if.then30:                                        ; preds = %if.end26
  %30 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4653
  %31 = load i32, i32* %depth.addr, align 4, !dbg !4655
  call void @indent_to(%struct._IO_FILE* %30, i32 %31), !dbg !4656
  %32 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4657
  %33 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e.addr, align 8, !dbg !4658
  %callee31 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %33, i32 0, i32 2, !dbg !4659
  %34 = load %struct.cgraph_node*, %struct.cgraph_node** %callee31, align 8, !dbg !4659
  %call32 = call i8* @cgraph_node_name(%struct.cgraph_node* %34), !dbg !4660
  %35 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e.addr, align 8, !dbg !4661
  %caller33 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %35, i32 0, i32 1, !dbg !4662
  %36 = load %struct.cgraph_node*, %struct.cgraph_node** %caller33, align 8, !dbg !4662
  %call34 = call i8* @cgraph_node_name(%struct.cgraph_node* %36), !dbg !4663
  %call35 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %32, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.20, i64 0, i64 0), i8* %call32, i8* %call34), !dbg !4664
  br label %if.end36, !dbg !4665

if.end36:                                         ; preds = %if.then30, %if.end26
  %37 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e.addr, align 8, !dbg !4666
  %inline_failed37 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %37, i32 0, i32 9, !dbg !4668
  %38 = load i32, i32* %inline_failed37, align 8, !dbg !4668
  %tobool38 = icmp ne i32 %38, 0, !dbg !4666
  br i1 %tobool38, label %if.then39, label %if.end49, !dbg !4669

if.then39:                                        ; preds = %if.end36
  %39 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e.addr, align 8, !dbg !4670
  %call40 = call %struct.cgraph_edge* @cgraph_mark_inline(%struct.cgraph_edge* %39), !dbg !4672
  %40 = load i32, i32* %mode.addr, align 4, !dbg !4673
  %cmp41 = icmp eq i32 %40, 4, !dbg !4675
  br i1 %cmp41, label %if.then45, label %lor.lhs.false, !dbg !4676

lor.lhs.false:                                    ; preds = %if.then39
  %41 = load i8, i8* %always_inline, align 1, !dbg !4677
  %conv43 = zext i8 %41 to i32, !dbg !4677
  %tobool44 = icmp ne i32 %conv43, 0, !dbg !4677
  br i1 %tobool44, label %if.then45, label %if.end48, !dbg !4678

if.then45:                                        ; preds = %lor.lhs.false, %if.then39
  %42 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e.addr, align 8, !dbg !4679
  %callee46 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %42, i32 0, i32 2, !dbg !4680
  %43 = load %struct.cgraph_node*, %struct.cgraph_node** %callee46, align 8, !dbg !4680
  %44 = load i32, i32* %mode.addr, align 4, !dbg !4681
  %45 = load i32, i32* %depth.addr, align 4, !dbg !4682
  %add = add nsw i32 %45, 1, !dbg !4683
  %call47 = call zeroext i8 @cgraph_decide_inlining_incrementally(%struct.cgraph_node* %43, i32 %44, i32 %add), !dbg !4684
  br label %if.end48, !dbg !4684

if.end48:                                         ; preds = %if.then45, %lor.lhs.false
  store i8 1, i8* %inlined, align 1, !dbg !4685
  br label %if.end49, !dbg !4686

if.end49:                                         ; preds = %if.end48, %if.end36
  %46 = load i32, i32* %callee_mode, align 4, !dbg !4687
  %conv50 = zext i32 %46 to i64, !dbg !4688
  %47 = inttoptr i64 %conv50 to i8*, !dbg !4689
  %48 = load %struct.cgraph_node*, %struct.cgraph_node** %callee, align 8, !dbg !4690
  %aux51 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %48, i32 0, i32 16, !dbg !4691
  store i8* %47, i8** %aux51, align 8, !dbg !4692
  %49 = load i8, i8* %inlined, align 1, !dbg !4693
  store i8 %49, i8* %retval, align 1, !dbg !4694
  br label %return, !dbg !4694

return:                                           ; preds = %if.end49, %if.end16
  %50 = load i8, i8* %retval, align 1, !dbg !4695
  ret i8 %50, !dbg !4695
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @cgraph_recursive_inlining_p(%struct.cgraph_node* %to, %struct.cgraph_node* %what, i32* %reason) #0 !dbg !4696 {
entry:
  %to.addr = alloca %struct.cgraph_node*, align 8
  %what.addr = alloca %struct.cgraph_node*, align 8
  %reason.addr = alloca i32*, align 8
  %recursive = alloca i8, align 1
  store %struct.cgraph_node* %to, %struct.cgraph_node** %to.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %to.addr, metadata !4700, metadata !DIExpression()), !dbg !4701
  store %struct.cgraph_node* %what, %struct.cgraph_node** %what.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %what.addr, metadata !4702, metadata !DIExpression()), !dbg !4703
  store i32* %reason, i32** %reason.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %reason.addr, metadata !4704, metadata !DIExpression()), !dbg !4705
  call void @llvm.dbg.declare(metadata i8* %recursive, metadata !4706, metadata !DIExpression()), !dbg !4707
  %0 = load %struct.cgraph_node*, %struct.cgraph_node** %to.addr, align 8, !dbg !4708
  %global = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %0, i32 0, i32 19, !dbg !4710
  %inlined_to = getelementptr inbounds %struct.cgraph_global_info, %struct.cgraph_global_info* %global, i32 0, i32 2, !dbg !4711
  %1 = load %struct.cgraph_node*, %struct.cgraph_node** %inlined_to, align 8, !dbg !4711
  %tobool = icmp ne %struct.cgraph_node* %1, null, !dbg !4708
  br i1 %tobool, label %if.then, label %if.else, !dbg !4712

if.then:                                          ; preds = %entry
  %2 = load %struct.cgraph_node*, %struct.cgraph_node** %what.addr, align 8, !dbg !4713
  %decl = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %2, i32 0, i32 0, !dbg !4714
  %3 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !4714
  %4 = load %struct.cgraph_node*, %struct.cgraph_node** %to.addr, align 8, !dbg !4715
  %global1 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %4, i32 0, i32 19, !dbg !4716
  %inlined_to2 = getelementptr inbounds %struct.cgraph_global_info, %struct.cgraph_global_info* %global1, i32 0, i32 2, !dbg !4717
  %5 = load %struct.cgraph_node*, %struct.cgraph_node** %inlined_to2, align 8, !dbg !4717
  %decl3 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %5, i32 0, i32 0, !dbg !4718
  %6 = load %union.tree_node*, %union.tree_node** %decl3, align 8, !dbg !4718
  %cmp = icmp eq %union.tree_node* %3, %6, !dbg !4719
  %conv = zext i1 %cmp to i32, !dbg !4719
  %conv4 = trunc i32 %conv to i8, !dbg !4713
  store i8 %conv4, i8* %recursive, align 1, !dbg !4720
  br label %if.end, !dbg !4721

if.else:                                          ; preds = %entry
  %7 = load %struct.cgraph_node*, %struct.cgraph_node** %what.addr, align 8, !dbg !4722
  %decl5 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %7, i32 0, i32 0, !dbg !4723
  %8 = load %union.tree_node*, %union.tree_node** %decl5, align 8, !dbg !4723
  %9 = load %struct.cgraph_node*, %struct.cgraph_node** %to.addr, align 8, !dbg !4724
  %decl6 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %9, i32 0, i32 0, !dbg !4725
  %10 = load %union.tree_node*, %union.tree_node** %decl6, align 8, !dbg !4725
  %cmp7 = icmp eq %union.tree_node* %8, %10, !dbg !4726
  %conv8 = zext i1 %cmp7 to i32, !dbg !4726
  %conv9 = trunc i32 %conv8 to i8, !dbg !4722
  store i8 %conv9, i8* %recursive, align 1, !dbg !4727
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %11 = load i8, i8* %recursive, align 1, !dbg !4728
  %conv10 = zext i8 %11 to i32, !dbg !4728
  %tobool11 = icmp ne i32 %conv10, 0, !dbg !4728
  br i1 %tobool11, label %land.lhs.true, label %if.end15, !dbg !4730

land.lhs.true:                                    ; preds = %if.end
  %12 = load i32*, i32** %reason.addr, align 8, !dbg !4731
  %tobool12 = icmp ne i32* %12, null, !dbg !4731
  br i1 %tobool12, label %if.then13, label %if.end15, !dbg !4732

if.then13:                                        ; preds = %land.lhs.true
  %13 = load %struct.cgraph_node*, %struct.cgraph_node** %what.addr, align 8, !dbg !4733
  %local = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %13, i32 0, i32 18, !dbg !4734
  %disregard_inline_limits = getelementptr inbounds %struct.cgraph_local_info, %struct.cgraph_local_info* %local, i32 0, i32 2, !dbg !4735
  %bf.load = load i8, i8* %disregard_inline_limits, align 8, !dbg !4735
  %bf.lshr = lshr i8 %bf.load, 4, !dbg !4735
  %bf.clear = and i8 %bf.lshr, 1, !dbg !4735
  %bf.cast = zext i8 %bf.clear to i32, !dbg !4735
  %tobool14 = icmp ne i32 %bf.cast, 0, !dbg !4733
  %14 = zext i1 %tobool14 to i64, !dbg !4733
  %cond = select i1 %tobool14, i32 12, i32 1, !dbg !4733
  %15 = load i32*, i32** %reason.addr, align 8, !dbg !4736
  store i32 %cond, i32* %15, align 4, !dbg !4737
  br label %if.end15, !dbg !4738

if.end15:                                         ; preds = %if.then13, %land.lhs.true, %if.end
  %16 = load i8, i8* %recursive, align 1, !dbg !4739
  ret i8 %16, !dbg !4740
}

declare dso_local zeroext i8 @tree_can_inline_p(%struct.cgraph_edge*) #2

declare dso_local i8* @cgraph_inline_failed_string(i32) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_in_ssa_p(%struct.function* %fun) #0 !dbg !4741 {
entry:
  %fun.addr = alloca %struct.function*, align 8
  store %struct.function* %fun, %struct.function** %fun.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.function** %fun.addr, metadata !4747, metadata !DIExpression()), !dbg !4748
  %0 = load %struct.function*, %struct.function** %fun.addr, align 8, !dbg !4749
  %tobool = icmp ne %struct.function* %0, null, !dbg !4749
  br i1 %tobool, label %land.lhs.true, label %land.end, !dbg !4750

land.lhs.true:                                    ; preds = %entry
  %1 = load %struct.function*, %struct.function** %fun.addr, align 8, !dbg !4751
  %gimple_df = getelementptr inbounds %struct.function, %struct.function* %1, i32 0, i32 3, !dbg !4752
  %2 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df, align 8, !dbg !4752
  %tobool1 = icmp ne %struct.gimple_df* %2, null, !dbg !4751
  br i1 %tobool1, label %land.rhs, label %land.end, !dbg !4753

land.rhs:                                         ; preds = %land.lhs.true
  %3 = load %struct.function*, %struct.function** %fun.addr, align 8, !dbg !4754
  %gimple_df2 = getelementptr inbounds %struct.function, %struct.function* %3, i32 0, i32 3, !dbg !4755
  %4 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df2, align 8, !dbg !4755
  %in_ssa_p = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %4, i32 0, i32 10, !dbg !4756
  %bf.load = load i8, i8* %in_ssa_p, align 8, !dbg !4756
  %bf.clear = and i8 %bf.load, 1, !dbg !4756
  %bf.cast = zext i8 %bf.clear to i32, !dbg !4756
  %tobool3 = icmp ne i32 %bf.cast, 0, !dbg !4753
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true, %entry
  %5 = phi i1 [ false, %land.lhs.true ], [ false, %entry ], [ %tobool3, %land.rhs ], !dbg !4757
  %land.ext = zext i1 %5 to i32, !dbg !4753
  %conv = trunc i32 %land.ext to i8, !dbg !4749
  ret i8 %conv, !dbg !4758
}

declare dso_local %struct.bitmap_head_def* @bitmap_obstack_alloc_stat(%struct.bitmap_obstack*) #2

declare dso_local zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def*, i32) #2

declare dso_local zeroext i8 @cgraph_maybe_hot_edge_p(%struct.cgraph_edge*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @leaf_node_p(%struct.cgraph_node* %n) #0 !dbg !4759 {
entry:
  %retval = alloca i8, align 1
  %n.addr = alloca %struct.cgraph_node*, align 8
  %e = alloca %struct.cgraph_edge*, align 8
  store %struct.cgraph_node* %n, %struct.cgraph_node** %n.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %n.addr, metadata !4760, metadata !DIExpression()), !dbg !4761
  call void @llvm.dbg.declare(metadata %struct.cgraph_edge** %e, metadata !4762, metadata !DIExpression()), !dbg !4763
  %0 = load %struct.cgraph_node*, %struct.cgraph_node** %n.addr, align 8, !dbg !4764
  %callees = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %0, i32 0, i32 1, !dbg !4766
  %1 = load %struct.cgraph_edge*, %struct.cgraph_edge** %callees, align 8, !dbg !4766
  store %struct.cgraph_edge* %1, %struct.cgraph_edge** %e, align 8, !dbg !4767
  br label %for.cond, !dbg !4768

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !4769
  %tobool = icmp ne %struct.cgraph_edge* %2, null, !dbg !4771
  br i1 %tobool, label %for.body, label %for.end, !dbg !4771

for.body:                                         ; preds = %for.cond
  %3 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !4772
  %callee = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %3, i32 0, i32 2, !dbg !4772
  %4 = load %struct.cgraph_node*, %struct.cgraph_node** %callee, align 8, !dbg !4772
  %decl = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %4, i32 0, i32 0, !dbg !4772
  %5 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !4772
  %function_decl = bitcast %union.tree_node* %5 to %struct.tree_function_decl*, !dbg !4772
  %built_in_class = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl, i32 0, i32 5, !dbg !4772
  %bf.load = load i32, i32* %built_in_class, align 8, !dbg !4772
  %bf.lshr = lshr i32 %bf.load, 11, !dbg !4772
  %bf.clear = and i32 %bf.lshr, 3, !dbg !4772
  %cmp = icmp ne i32 %bf.clear, 0, !dbg !4772
  br i1 %cmp, label %lor.lhs.false, label %if.then, !dbg !4774

lor.lhs.false:                                    ; preds = %for.body
  %6 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !4775
  %callee1 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %6, i32 0, i32 2, !dbg !4775
  %7 = load %struct.cgraph_node*, %struct.cgraph_node** %callee1, align 8, !dbg !4775
  %decl2 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %7, i32 0, i32 0, !dbg !4775
  %8 = load %union.tree_node*, %union.tree_node** %decl2, align 8, !dbg !4775
  %base = bitcast %union.tree_node* %8 to %struct.tree_base*, !dbg !4775
  %9 = bitcast %struct.tree_base* %base to i64*, !dbg !4775
  %bf.load3 = load i64, i64* %9, align 8, !dbg !4775
  %bf.lshr4 = lshr i64 %bf.load3, 20, !dbg !4775
  %bf.clear5 = and i64 %bf.lshr4, 1, !dbg !4775
  %bf.cast = trunc i64 %bf.clear5 to i32, !dbg !4775
  %tobool6 = icmp ne i32 %bf.cast, 0, !dbg !4775
  br i1 %tobool6, label %lor.lhs.false7, label %if.then, !dbg !4776

lor.lhs.false7:                                   ; preds = %lor.lhs.false
  %10 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !4777
  %callee8 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %10, i32 0, i32 2, !dbg !4777
  %11 = load %struct.cgraph_node*, %struct.cgraph_node** %callee8, align 8, !dbg !4777
  %decl9 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %11, i32 0, i32 0, !dbg !4777
  %12 = load %union.tree_node*, %union.tree_node** %decl9, align 8, !dbg !4777
  %function_decl10 = bitcast %union.tree_node* %12 to %struct.tree_function_decl*, !dbg !4777
  %pure_flag = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl10, i32 0, i32 5, !dbg !4777
  %bf.load11 = load i32, i32* %pure_flag, align 8, !dbg !4777
  %bf.lshr12 = lshr i32 %bf.load11, 27, !dbg !4777
  %bf.clear13 = and i32 %bf.lshr12, 1, !dbg !4777
  %tobool14 = icmp ne i32 %bf.clear13, 0, !dbg !4777
  br i1 %tobool14, label %if.then, label %if.end, !dbg !4778

if.then:                                          ; preds = %lor.lhs.false7, %lor.lhs.false, %for.body
  store i8 0, i8* %retval, align 1, !dbg !4779
  br label %return, !dbg !4779

if.end:                                           ; preds = %lor.lhs.false7
  br label %for.inc, !dbg !4780

for.inc:                                          ; preds = %if.end
  %13 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !4781
  %next_callee = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %13, i32 0, i32 6, !dbg !4782
  %14 = load %struct.cgraph_edge*, %struct.cgraph_edge** %next_callee, align 8, !dbg !4782
  store %struct.cgraph_edge* %14, %struct.cgraph_edge** %e, align 8, !dbg !4783
  br label %for.cond, !dbg !4784, !llvm.loop !4785

for.end:                                          ; preds = %for.cond
  store i8 1, i8* %retval, align 1, !dbg !4787
  br label %return, !dbg !4787

return:                                           ; preds = %for.end, %if.then
  %15 = load i8, i8* %retval, align 1, !dbg !4788
  ret i8 %15, !dbg !4788
}

declare dso_local zeroext i8 @optimize_function_for_speed_p(%struct.function*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @cgraph_estimate_size_after_inlining(i32 %times, %struct.cgraph_node* %to, %struct.cgraph_node* %what) #0 !dbg !4789 {
entry:
  %times.addr = alloca i32, align 4
  %to.addr = alloca %struct.cgraph_node*, align 8
  %what.addr = alloca %struct.cgraph_node*, align 8
  %size = alloca i32, align 4
  store i32 %times, i32* %times.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %times.addr, metadata !4792, metadata !DIExpression()), !dbg !4793
  store %struct.cgraph_node* %to, %struct.cgraph_node** %to.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %to.addr, metadata !4794, metadata !DIExpression()), !dbg !4795
  store %struct.cgraph_node* %what, %struct.cgraph_node** %what.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %what.addr, metadata !4796, metadata !DIExpression()), !dbg !4797
  call void @llvm.dbg.declare(metadata i32* %size, metadata !4798, metadata !DIExpression()), !dbg !4799
  %0 = load %struct.cgraph_node*, %struct.cgraph_node** %what.addr, align 8, !dbg !4800
  %global = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %0, i32 0, i32 19, !dbg !4801
  %size1 = getelementptr inbounds %struct.cgraph_global_info, %struct.cgraph_global_info* %global, i32 0, i32 4, !dbg !4802
  %1 = load i32, i32* %size1, align 4, !dbg !4802
  %2 = load %struct.cgraph_node*, %struct.cgraph_node** %what.addr, align 8, !dbg !4803
  %call = call %struct.inline_summary* @inline_summary(%struct.cgraph_node* %2), !dbg !4804
  %size_inlining_benefit = getelementptr inbounds %struct.inline_summary, %struct.inline_summary* %call, i32 0, i32 2, !dbg !4805
  %3 = load i32, i32* %size_inlining_benefit, align 4, !dbg !4805
  %sub = sub nsw i32 %1, %3, !dbg !4806
  %4 = load i32, i32* %times.addr, align 4, !dbg !4807
  %mul = mul nsw i32 %sub, %4, !dbg !4808
  %5 = load %struct.cgraph_node*, %struct.cgraph_node** %to.addr, align 8, !dbg !4809
  %global2 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %5, i32 0, i32 19, !dbg !4810
  %size3 = getelementptr inbounds %struct.cgraph_global_info, %struct.cgraph_global_info* %global2, i32 0, i32 4, !dbg !4811
  %6 = load i32, i32* %size3, align 4, !dbg !4811
  %add = add nsw i32 %mul, %6, !dbg !4812
  store i32 %add, i32* %size, align 4, !dbg !4799
  %7 = load i32, i32* %size, align 4, !dbg !4813
  %cmp = icmp sge i32 %7, 0, !dbg !4813
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !4813

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0), i32 207, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !4813
  br label %cond.end, !dbg !4813

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4813

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !4813
  %8 = load i32, i32* %size, align 4, !dbg !4814
  ret i32 %8, !dbg !4815
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @cgraph_estimate_growth(%struct.cgraph_node* %node) #0 !dbg !4816 {
entry:
  %retval = alloca i32, align 4
  %node.addr = alloca %struct.cgraph_node*, align 8
  %growth = alloca i32, align 4
  %e = alloca %struct.cgraph_edge*, align 8
  %self_recursive = alloca i8, align 1
  store %struct.cgraph_node* %node, %struct.cgraph_node** %node.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %node.addr, metadata !4819, metadata !DIExpression()), !dbg !4820
  call void @llvm.dbg.declare(metadata i32* %growth, metadata !4821, metadata !DIExpression()), !dbg !4822
  store i32 0, i32* %growth, align 4, !dbg !4822
  call void @llvm.dbg.declare(metadata %struct.cgraph_edge** %e, metadata !4823, metadata !DIExpression()), !dbg !4824
  call void @llvm.dbg.declare(metadata i8* %self_recursive, metadata !4825, metadata !DIExpression()), !dbg !4826
  store i8 0, i8* %self_recursive, align 1, !dbg !4826
  %0 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !4827
  %global = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %0, i32 0, i32 19, !dbg !4829
  %estimated_growth = getelementptr inbounds %struct.cgraph_global_info, %struct.cgraph_global_info* %global, i32 0, i32 5, !dbg !4830
  %1 = load i32, i32* %estimated_growth, align 8, !dbg !4830
  %cmp = icmp ne i32 %1, -2147483648, !dbg !4831
  br i1 %cmp, label %if.then, label %if.end, !dbg !4832

if.then:                                          ; preds = %entry
  %2 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !4833
  %global1 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %2, i32 0, i32 19, !dbg !4834
  %estimated_growth2 = getelementptr inbounds %struct.cgraph_global_info, %struct.cgraph_global_info* %global1, i32 0, i32 5, !dbg !4835
  %3 = load i32, i32* %estimated_growth2, align 8, !dbg !4835
  store i32 %3, i32* %retval, align 4, !dbg !4836
  br label %return, !dbg !4836

if.end:                                           ; preds = %entry
  %4 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !4837
  %callers = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %4, i32 0, i32 2, !dbg !4839
  %5 = load %struct.cgraph_edge*, %struct.cgraph_edge** %callers, align 8, !dbg !4839
  store %struct.cgraph_edge* %5, %struct.cgraph_edge** %e, align 8, !dbg !4840
  br label %for.cond, !dbg !4841

for.cond:                                         ; preds = %for.inc, %if.end
  %6 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !4842
  %tobool = icmp ne %struct.cgraph_edge* %6, null, !dbg !4844
  br i1 %tobool, label %for.body, label %for.end, !dbg !4844

for.body:                                         ; preds = %for.cond
  %7 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !4845
  %caller = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %7, i32 0, i32 1, !dbg !4848
  %8 = load %struct.cgraph_node*, %struct.cgraph_node** %caller, align 8, !dbg !4848
  %9 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !4849
  %cmp3 = icmp eq %struct.cgraph_node* %8, %9, !dbg !4850
  br i1 %cmp3, label %if.then4, label %if.end5, !dbg !4851

if.then4:                                         ; preds = %for.body
  store i8 1, i8* %self_recursive, align 1, !dbg !4852
  br label %if.end5, !dbg !4853

if.end5:                                          ; preds = %if.then4, %for.body
  %10 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !4854
  %inline_failed = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %10, i32 0, i32 9, !dbg !4856
  %11 = load i32, i32* %inline_failed, align 8, !dbg !4856
  %tobool6 = icmp ne i32 %11, 0, !dbg !4854
  br i1 %tobool6, label %if.then7, label %if.end11, !dbg !4857

if.then7:                                         ; preds = %if.end5
  %12 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !4858
  %caller8 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %12, i32 0, i32 1, !dbg !4859
  %13 = load %struct.cgraph_node*, %struct.cgraph_node** %caller8, align 8, !dbg !4859
  %14 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !4860
  %call = call i32 @cgraph_estimate_size_after_inlining(i32 1, %struct.cgraph_node* %13, %struct.cgraph_node* %14), !dbg !4861
  %15 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !4862
  %caller9 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %15, i32 0, i32 1, !dbg !4863
  %16 = load %struct.cgraph_node*, %struct.cgraph_node** %caller9, align 8, !dbg !4863
  %global10 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %16, i32 0, i32 19, !dbg !4864
  %size = getelementptr inbounds %struct.cgraph_global_info, %struct.cgraph_global_info* %global10, i32 0, i32 4, !dbg !4865
  %17 = load i32, i32* %size, align 4, !dbg !4865
  %sub = sub nsw i32 %call, %17, !dbg !4866
  %18 = load i32, i32* %growth, align 4, !dbg !4867
  %add = add nsw i32 %18, %sub, !dbg !4867
  store i32 %add, i32* %growth, align 4, !dbg !4867
  br label %if.end11, !dbg !4868

if.end11:                                         ; preds = %if.then7, %if.end5
  br label %for.inc, !dbg !4869

for.inc:                                          ; preds = %if.end11
  %19 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !4870
  %next_caller = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %19, i32 0, i32 4, !dbg !4871
  %20 = load %struct.cgraph_edge*, %struct.cgraph_edge** %next_caller, align 8, !dbg !4871
  store %struct.cgraph_edge* %20, %struct.cgraph_edge** %e, align 8, !dbg !4872
  br label %for.cond, !dbg !4873, !llvm.loop !4874

for.end:                                          ; preds = %for.cond
  %21 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !4876
  %call12 = call zeroext i8 @cgraph_only_called_directly_p(%struct.cgraph_node* %21), !dbg !4878
  %conv = zext i8 %call12 to i32, !dbg !4878
  %tobool13 = icmp ne i32 %conv, 0, !dbg !4878
  br i1 %tobool13, label %land.lhs.true, label %if.end21, !dbg !4879

land.lhs.true:                                    ; preds = %for.end
  %22 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !4880
  %decl = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %22, i32 0, i32 0, !dbg !4880
  %23 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !4880
  %decl_common = bitcast %union.tree_node* %23 to %struct.tree_decl_common*, !dbg !4880
  %decl_flag_1 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 2, !dbg !4880
  %24 = bitcast i40* %decl_flag_1 to i64*, !dbg !4880
  %bf.load = load i64, i64* %24, align 8, !dbg !4880
  %bf.lshr = lshr i64 %bf.load, 25, !dbg !4880
  %bf.clear = and i64 %bf.lshr, 1, !dbg !4880
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !4880
  %tobool14 = icmp ne i32 %bf.cast, 0, !dbg !4880
  br i1 %tobool14, label %if.end21, label %land.lhs.true15, !dbg !4881

land.lhs.true15:                                  ; preds = %land.lhs.true
  %25 = load i8, i8* %self_recursive, align 1, !dbg !4882
  %tobool16 = icmp ne i8 %25, 0, !dbg !4882
  br i1 %tobool16, label %if.end21, label %if.then17, !dbg !4883

if.then17:                                        ; preds = %land.lhs.true15
  %26 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !4884
  %global18 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %26, i32 0, i32 19, !dbg !4885
  %size19 = getelementptr inbounds %struct.cgraph_global_info, %struct.cgraph_global_info* %global18, i32 0, i32 4, !dbg !4886
  %27 = load i32, i32* %size19, align 4, !dbg !4886
  %28 = load i32, i32* %growth, align 4, !dbg !4887
  %sub20 = sub nsw i32 %28, %27, !dbg !4887
  store i32 %sub20, i32* %growth, align 4, !dbg !4887
  br label %if.end21, !dbg !4888

if.end21:                                         ; preds = %if.then17, %land.lhs.true15, %land.lhs.true, %for.end
  %29 = load i32, i32* %growth, align 4, !dbg !4889
  %30 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !4890
  %global22 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %30, i32 0, i32 19, !dbg !4891
  %estimated_growth23 = getelementptr inbounds %struct.cgraph_global_info, %struct.cgraph_global_info* %global22, i32 0, i32 5, !dbg !4892
  store i32 %29, i32* %estimated_growth23, align 8, !dbg !4893
  %31 = load i32, i32* %growth, align 4, !dbg !4894
  store i32 %31, i32* %retval, align 4, !dbg !4895
  br label %return, !dbg !4895

return:                                           ; preds = %if.end21, %if.then
  %32 = load i32, i32* %retval, align 4, !dbg !4896
  ret i32 %32, !dbg !4896
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @cgraph_check_inline_limits(%struct.cgraph_node* %to, %struct.cgraph_node* %what, i32* %reason, i8 zeroext %one_only) #0 !dbg !4897 {
entry:
  %retval = alloca i8, align 1
  %to.addr = alloca %struct.cgraph_node*, align 8
  %what.addr = alloca %struct.cgraph_node*, align 8
  %reason.addr = alloca i32*, align 8
  %one_only.addr = alloca i8, align 1
  %times = alloca i32, align 4
  %e = alloca %struct.cgraph_edge*, align 8
  %newsize = alloca i32, align 4
  %limit = alloca i32, align 4
  %stack_size_limit = alloca i64, align 8
  %inlined_stack = alloca i64, align 8
  store %struct.cgraph_node* %to, %struct.cgraph_node** %to.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %to.addr, metadata !4900, metadata !DIExpression()), !dbg !4901
  store %struct.cgraph_node* %what, %struct.cgraph_node** %what.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %what.addr, metadata !4902, metadata !DIExpression()), !dbg !4903
  store i32* %reason, i32** %reason.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %reason.addr, metadata !4904, metadata !DIExpression()), !dbg !4905
  store i8 %one_only, i8* %one_only.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %one_only.addr, metadata !4906, metadata !DIExpression()), !dbg !4907
  call void @llvm.dbg.declare(metadata i32* %times, metadata !4908, metadata !DIExpression()), !dbg !4909
  store i32 0, i32* %times, align 4, !dbg !4909
  call void @llvm.dbg.declare(metadata %struct.cgraph_edge** %e, metadata !4910, metadata !DIExpression()), !dbg !4911
  call void @llvm.dbg.declare(metadata i32* %newsize, metadata !4912, metadata !DIExpression()), !dbg !4913
  call void @llvm.dbg.declare(metadata i32* %limit, metadata !4914, metadata !DIExpression()), !dbg !4915
  call void @llvm.dbg.declare(metadata i64* %stack_size_limit, metadata !4916, metadata !DIExpression()), !dbg !4917
  call void @llvm.dbg.declare(metadata i64* %inlined_stack, metadata !4918, metadata !DIExpression()), !dbg !4919
  %0 = load i8, i8* %one_only.addr, align 1, !dbg !4920
  %tobool = icmp ne i8 %0, 0, !dbg !4920
  br i1 %tobool, label %if.then, label %if.else, !dbg !4922

if.then:                                          ; preds = %entry
  store i32 1, i32* %times, align 4, !dbg !4923
  br label %if.end3, !dbg !4924

if.else:                                          ; preds = %entry
  %1 = load %struct.cgraph_node*, %struct.cgraph_node** %to.addr, align 8, !dbg !4925
  %callees = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %1, i32 0, i32 1, !dbg !4927
  %2 = load %struct.cgraph_edge*, %struct.cgraph_edge** %callees, align 8, !dbg !4927
  store %struct.cgraph_edge* %2, %struct.cgraph_edge** %e, align 8, !dbg !4928
  br label %for.cond, !dbg !4929

for.cond:                                         ; preds = %for.inc, %if.else
  %3 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !4930
  %tobool1 = icmp ne %struct.cgraph_edge* %3, null, !dbg !4932
  br i1 %tobool1, label %for.body, label %for.end, !dbg !4932

for.body:                                         ; preds = %for.cond
  %4 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !4933
  %callee = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %4, i32 0, i32 2, !dbg !4935
  %5 = load %struct.cgraph_node*, %struct.cgraph_node** %callee, align 8, !dbg !4935
  %6 = load %struct.cgraph_node*, %struct.cgraph_node** %what.addr, align 8, !dbg !4936
  %cmp = icmp eq %struct.cgraph_node* %5, %6, !dbg !4937
  br i1 %cmp, label %if.then2, label %if.end, !dbg !4938

if.then2:                                         ; preds = %for.body
  %7 = load i32, i32* %times, align 4, !dbg !4939
  %inc = add nsw i32 %7, 1, !dbg !4939
  store i32 %inc, i32* %times, align 4, !dbg !4939
  br label %if.end, !dbg !4940

if.end:                                           ; preds = %if.then2, %for.body
  br label %for.inc, !dbg !4936

for.inc:                                          ; preds = %if.end
  %8 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !4941
  %next_callee = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %8, i32 0, i32 6, !dbg !4942
  %9 = load %struct.cgraph_edge*, %struct.cgraph_edge** %next_callee, align 8, !dbg !4942
  store %struct.cgraph_edge* %9, %struct.cgraph_edge** %e, align 8, !dbg !4943
  br label %for.cond, !dbg !4944, !llvm.loop !4945

for.end:                                          ; preds = %for.cond
  br label %if.end3

if.end3:                                          ; preds = %for.end, %if.then
  %10 = load %struct.cgraph_node*, %struct.cgraph_node** %to.addr, align 8, !dbg !4947
  %global = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %10, i32 0, i32 19, !dbg !4949
  %inlined_to = getelementptr inbounds %struct.cgraph_global_info, %struct.cgraph_global_info* %global, i32 0, i32 2, !dbg !4950
  %11 = load %struct.cgraph_node*, %struct.cgraph_node** %inlined_to, align 8, !dbg !4950
  %tobool4 = icmp ne %struct.cgraph_node* %11, null, !dbg !4947
  br i1 %tobool4, label %if.then5, label %if.end8, !dbg !4951

if.then5:                                         ; preds = %if.end3
  %12 = load %struct.cgraph_node*, %struct.cgraph_node** %to.addr, align 8, !dbg !4952
  %global6 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %12, i32 0, i32 19, !dbg !4953
  %inlined_to7 = getelementptr inbounds %struct.cgraph_global_info, %struct.cgraph_global_info* %global6, i32 0, i32 2, !dbg !4954
  %13 = load %struct.cgraph_node*, %struct.cgraph_node** %inlined_to7, align 8, !dbg !4954
  store %struct.cgraph_node* %13, %struct.cgraph_node** %to.addr, align 8, !dbg !4955
  br label %if.end8, !dbg !4956

if.end8:                                          ; preds = %if.then5, %if.end3
  %14 = load %struct.cgraph_node*, %struct.cgraph_node** %to.addr, align 8, !dbg !4957
  %call = call %struct.inline_summary* @inline_summary(%struct.cgraph_node* %14), !dbg !4959
  %self_size = getelementptr inbounds %struct.inline_summary, %struct.inline_summary* %call, i32 0, i32 1, !dbg !4960
  %15 = load i32, i32* %self_size, align 8, !dbg !4960
  %16 = load %struct.cgraph_node*, %struct.cgraph_node** %what.addr, align 8, !dbg !4961
  %call9 = call %struct.inline_summary* @inline_summary(%struct.cgraph_node* %16), !dbg !4962
  %self_size10 = getelementptr inbounds %struct.inline_summary, %struct.inline_summary* %call9, i32 0, i32 1, !dbg !4963
  %17 = load i32, i32* %self_size10, align 8, !dbg !4963
  %cmp11 = icmp sgt i32 %15, %17, !dbg !4964
  br i1 %cmp11, label %if.then12, label %if.else15, !dbg !4965

if.then12:                                        ; preds = %if.end8
  %18 = load %struct.cgraph_node*, %struct.cgraph_node** %to.addr, align 8, !dbg !4966
  %call13 = call %struct.inline_summary* @inline_summary(%struct.cgraph_node* %18), !dbg !4967
  %self_size14 = getelementptr inbounds %struct.inline_summary, %struct.inline_summary* %call13, i32 0, i32 1, !dbg !4968
  %19 = load i32, i32* %self_size14, align 8, !dbg !4968
  store i32 %19, i32* %limit, align 4, !dbg !4969
  br label %if.end18, !dbg !4970

if.else15:                                        ; preds = %if.end8
  %20 = load %struct.cgraph_node*, %struct.cgraph_node** %what.addr, align 8, !dbg !4971
  %call16 = call %struct.inline_summary* @inline_summary(%struct.cgraph_node* %20), !dbg !4972
  %self_size17 = getelementptr inbounds %struct.inline_summary, %struct.inline_summary* %call16, i32 0, i32 1, !dbg !4973
  %21 = load i32, i32* %self_size17, align 8, !dbg !4973
  store i32 %21, i32* %limit, align 4, !dbg !4974
  br label %if.end18

if.end18:                                         ; preds = %if.else15, %if.then12
  %22 = load i32, i32* %limit, align 4, !dbg !4975
  %23 = load %struct.param_info*, %struct.param_info** @compiler_params, align 8, !dbg !4976
  %arrayidx = getelementptr inbounds %struct.param_info, %struct.param_info* %23, i64 16, !dbg !4976
  %value = getelementptr inbounds %struct.param_info, %struct.param_info* %arrayidx, i32 0, i32 1, !dbg !4976
  %24 = load i32, i32* %value, align 8, !dbg !4976
  %mul = mul nsw i32 %22, %24, !dbg !4977
  %div = sdiv i32 %mul, 100, !dbg !4978
  %25 = load i32, i32* %limit, align 4, !dbg !4979
  %add = add nsw i32 %25, %div, !dbg !4979
  store i32 %add, i32* %limit, align 4, !dbg !4979
  %26 = load i32, i32* %times, align 4, !dbg !4980
  %27 = load %struct.cgraph_node*, %struct.cgraph_node** %to.addr, align 8, !dbg !4981
  %28 = load %struct.cgraph_node*, %struct.cgraph_node** %what.addr, align 8, !dbg !4982
  %call19 = call i32 @cgraph_estimate_size_after_inlining(i32 %26, %struct.cgraph_node* %27, %struct.cgraph_node* %28), !dbg !4983
  store i32 %call19, i32* %newsize, align 4, !dbg !4984
  %29 = load i32, i32* %newsize, align 4, !dbg !4985
  %30 = load %struct.cgraph_node*, %struct.cgraph_node** %to.addr, align 8, !dbg !4987
  %global20 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %30, i32 0, i32 19, !dbg !4988
  %size = getelementptr inbounds %struct.cgraph_global_info, %struct.cgraph_global_info* %global20, i32 0, i32 4, !dbg !4989
  %31 = load i32, i32* %size, align 4, !dbg !4989
  %cmp21 = icmp sge i32 %29, %31, !dbg !4990
  br i1 %cmp21, label %land.lhs.true, label %if.end31, !dbg !4991

land.lhs.true:                                    ; preds = %if.end18
  %32 = load i32, i32* %newsize, align 4, !dbg !4992
  %33 = load %struct.param_info*, %struct.param_info** @compiler_params, align 8, !dbg !4993
  %arrayidx22 = getelementptr inbounds %struct.param_info, %struct.param_info* %33, i64 15, !dbg !4993
  %value23 = getelementptr inbounds %struct.param_info, %struct.param_info* %arrayidx22, i32 0, i32 1, !dbg !4993
  %34 = load i32, i32* %value23, align 8, !dbg !4993
  %cmp24 = icmp sgt i32 %32, %34, !dbg !4994
  br i1 %cmp24, label %land.lhs.true25, label %if.end31, !dbg !4995

land.lhs.true25:                                  ; preds = %land.lhs.true
  %35 = load i32, i32* %newsize, align 4, !dbg !4996
  %36 = load i32, i32* %limit, align 4, !dbg !4997
  %cmp26 = icmp sgt i32 %35, %36, !dbg !4998
  br i1 %cmp26, label %if.then27, label %if.end31, !dbg !4999

if.then27:                                        ; preds = %land.lhs.true25
  %37 = load i32*, i32** %reason.addr, align 8, !dbg !5000
  %tobool28 = icmp ne i32* %37, null, !dbg !5000
  br i1 %tobool28, label %if.then29, label %if.end30, !dbg !5003

if.then29:                                        ; preds = %if.then27
  %38 = load i32*, i32** %reason.addr, align 8, !dbg !5004
  store i32 7, i32* %38, align 4, !dbg !5005
  br label %if.end30, !dbg !5006

if.end30:                                         ; preds = %if.then29, %if.then27
  store i8 0, i8* %retval, align 1, !dbg !5007
  br label %return, !dbg !5007

if.end31:                                         ; preds = %land.lhs.true25, %land.lhs.true, %if.end18
  %39 = load %struct.cgraph_node*, %struct.cgraph_node** %to.addr, align 8, !dbg !5008
  %call32 = call %struct.inline_summary* @inline_summary(%struct.cgraph_node* %39), !dbg !5009
  %estimated_self_stack_size = getelementptr inbounds %struct.inline_summary, %struct.inline_summary* %call32, i32 0, i32 0, !dbg !5010
  %40 = load i64, i64* %estimated_self_stack_size, align 8, !dbg !5010
  store i64 %40, i64* %stack_size_limit, align 8, !dbg !5011
  %41 = load i64, i64* %stack_size_limit, align 8, !dbg !5012
  %42 = load %struct.param_info*, %struct.param_info** @compiler_params, align 8, !dbg !5013
  %arrayidx33 = getelementptr inbounds %struct.param_info, %struct.param_info* %42, i64 22, !dbg !5013
  %value34 = getelementptr inbounds %struct.param_info, %struct.param_info* %arrayidx33, i32 0, i32 1, !dbg !5013
  %43 = load i32, i32* %value34, align 8, !dbg !5013
  %conv = sext i32 %43 to i64, !dbg !5013
  %mul35 = mul nsw i64 %41, %conv, !dbg !5014
  %div36 = sdiv i64 %mul35, 100, !dbg !5015
  %44 = load i64, i64* %stack_size_limit, align 8, !dbg !5016
  %add37 = add nsw i64 %44, %div36, !dbg !5016
  store i64 %add37, i64* %stack_size_limit, align 8, !dbg !5016
  %45 = load %struct.cgraph_node*, %struct.cgraph_node** %to.addr, align 8, !dbg !5017
  %global38 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %45, i32 0, i32 19, !dbg !5018
  %stack_frame_offset = getelementptr inbounds %struct.cgraph_global_info, %struct.cgraph_global_info* %global38, i32 0, i32 1, !dbg !5019
  %46 = load i64, i64* %stack_frame_offset, align 8, !dbg !5019
  %47 = load %struct.cgraph_node*, %struct.cgraph_node** %to.addr, align 8, !dbg !5020
  %call39 = call %struct.inline_summary* @inline_summary(%struct.cgraph_node* %47), !dbg !5021
  %estimated_self_stack_size40 = getelementptr inbounds %struct.inline_summary, %struct.inline_summary* %call39, i32 0, i32 0, !dbg !5022
  %48 = load i64, i64* %estimated_self_stack_size40, align 8, !dbg !5022
  %add41 = add nsw i64 %46, %48, !dbg !5023
  %49 = load %struct.cgraph_node*, %struct.cgraph_node** %what.addr, align 8, !dbg !5024
  %global42 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %49, i32 0, i32 19, !dbg !5025
  %estimated_stack_size = getelementptr inbounds %struct.cgraph_global_info, %struct.cgraph_global_info* %global42, i32 0, i32 0, !dbg !5026
  %50 = load i64, i64* %estimated_stack_size, align 8, !dbg !5026
  %add43 = add nsw i64 %add41, %50, !dbg !5027
  store i64 %add43, i64* %inlined_stack, align 8, !dbg !5028
  %51 = load i64, i64* %inlined_stack, align 8, !dbg !5029
  %52 = load i64, i64* %stack_size_limit, align 8, !dbg !5031
  %cmp44 = icmp sgt i64 %51, %52, !dbg !5032
  br i1 %cmp44, label %land.lhs.true46, label %if.end56, !dbg !5033

land.lhs.true46:                                  ; preds = %if.end31
  %53 = load i64, i64* %inlined_stack, align 8, !dbg !5034
  %54 = load %struct.param_info*, %struct.param_info** @compiler_params, align 8, !dbg !5035
  %arrayidx47 = getelementptr inbounds %struct.param_info, %struct.param_info* %54, i64 21, !dbg !5035
  %value48 = getelementptr inbounds %struct.param_info, %struct.param_info* %arrayidx47, i32 0, i32 1, !dbg !5035
  %55 = load i32, i32* %value48, align 8, !dbg !5035
  %conv49 = sext i32 %55 to i64, !dbg !5035
  %cmp50 = icmp sgt i64 %53, %conv49, !dbg !5036
  br i1 %cmp50, label %if.then52, label %if.end56, !dbg !5037

if.then52:                                        ; preds = %land.lhs.true46
  %56 = load i32*, i32** %reason.addr, align 8, !dbg !5038
  %tobool53 = icmp ne i32* %56, null, !dbg !5038
  br i1 %tobool53, label %if.then54, label %if.end55, !dbg !5041

if.then54:                                        ; preds = %if.then52
  %57 = load i32*, i32** %reason.addr, align 8, !dbg !5042
  store i32 8, i32* %57, align 4, !dbg !5043
  br label %if.end55, !dbg !5044

if.end55:                                         ; preds = %if.then54, %if.then52
  store i8 0, i8* %retval, align 1, !dbg !5045
  br label %return, !dbg !5045

if.end56:                                         ; preds = %land.lhs.true46, %if.end31
  store i8 1, i8* %retval, align 1, !dbg !5046
  br label %return, !dbg !5046

return:                                           ; preds = %if.end56, %if.end55, %if.end30
  %58 = load i8, i8* %retval, align 1, !dbg !5047
  ret i8 %58, !dbg !5047
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @cgraph_default_inline_p(%struct.cgraph_node* %n, i32* %reason) #0 !dbg !5048 {
entry:
  %retval = alloca i8, align 1
  %n.addr = alloca %struct.cgraph_node*, align 8
  %reason.addr = alloca i32*, align 8
  %decl = alloca %union.tree_node*, align 8
  store %struct.cgraph_node* %n, %struct.cgraph_node** %n.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %n.addr, metadata !5051, metadata !DIExpression()), !dbg !5052
  store i32* %reason, i32** %reason.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %reason.addr, metadata !5053, metadata !DIExpression()), !dbg !5054
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl, metadata !5055, metadata !DIExpression()), !dbg !5056
  %0 = load %struct.cgraph_node*, %struct.cgraph_node** %n.addr, align 8, !dbg !5057
  %decl1 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %0, i32 0, i32 0, !dbg !5058
  %1 = load %union.tree_node*, %union.tree_node** %decl1, align 8, !dbg !5058
  store %union.tree_node* %1, %union.tree_node** %decl, align 8, !dbg !5056
  %2 = load i32, i32* @flag_inline_small_functions, align 4, !dbg !5059
  %tobool = icmp ne i32 %2, 0, !dbg !5059
  br i1 %tobool, label %if.end5, label %land.lhs.true, !dbg !5061

land.lhs.true:                                    ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !5062
  %function_decl = bitcast %union.tree_node* %3 to %struct.tree_function_decl*, !dbg !5062
  %declared_inline_flag = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl, i32 0, i32 5, !dbg !5062
  %bf.load = load i32, i32* %declared_inline_flag, align 8, !dbg !5062
  %bf.lshr = lshr i32 %bf.load, 21, !dbg !5062
  %bf.clear = and i32 %bf.lshr, 1, !dbg !5062
  %tobool2 = icmp ne i32 %bf.clear, 0, !dbg !5062
  br i1 %tobool2, label %if.end5, label %if.then, !dbg !5063

if.then:                                          ; preds = %land.lhs.true
  %4 = load i32*, i32** %reason.addr, align 8, !dbg !5064
  %tobool3 = icmp ne i32* %4, null, !dbg !5064
  br i1 %tobool3, label %if.then4, label %if.end, !dbg !5067

if.then4:                                         ; preds = %if.then
  %5 = load i32*, i32** %reason.addr, align 8, !dbg !5068
  store i32 6, i32* %5, align 4, !dbg !5069
  br label %if.end, !dbg !5070

if.end:                                           ; preds = %if.then4, %if.then
  store i8 0, i8* %retval, align 1, !dbg !5071
  br label %return, !dbg !5071

if.end5:                                          ; preds = %land.lhs.true, %entry
  %6 = load %struct.cgraph_node*, %struct.cgraph_node** %n.addr, align 8, !dbg !5072
  %analyzed = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %6, i32 0, i32 27, !dbg !5074
  %bf.load6 = load i16, i16* %analyzed, align 4, !dbg !5074
  %bf.lshr7 = lshr i16 %bf.load6, 5, !dbg !5074
  %bf.clear8 = and i16 %bf.lshr7, 1, !dbg !5074
  %bf.cast = zext i16 %bf.clear8 to i32, !dbg !5074
  %tobool9 = icmp ne i32 %bf.cast, 0, !dbg !5072
  br i1 %tobool9, label %if.end14, label %if.then10, !dbg !5075

if.then10:                                        ; preds = %if.end5
  %7 = load i32*, i32** %reason.addr, align 8, !dbg !5076
  %tobool11 = icmp ne i32* %7, null, !dbg !5076
  br i1 %tobool11, label %if.then12, label %if.end13, !dbg !5079

if.then12:                                        ; preds = %if.then10
  %8 = load i32*, i32** %reason.addr, align 8, !dbg !5080
  store i32 3, i32* %8, align 4, !dbg !5081
  br label %if.end13, !dbg !5082

if.end13:                                         ; preds = %if.then12, %if.then10
  store i8 0, i8* %retval, align 1, !dbg !5083
  br label %return, !dbg !5083

if.end14:                                         ; preds = %if.end5
  %9 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !5084
  %function_decl15 = bitcast %union.tree_node* %9 to %struct.tree_function_decl*, !dbg !5084
  %declared_inline_flag16 = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl15, i32 0, i32 5, !dbg !5084
  %bf.load17 = load i32, i32* %declared_inline_flag16, align 8, !dbg !5084
  %bf.lshr18 = lshr i32 %bf.load17, 21, !dbg !5084
  %bf.clear19 = and i32 %bf.lshr18, 1, !dbg !5084
  %tobool20 = icmp ne i32 %bf.clear19, 0, !dbg !5084
  br i1 %tobool20, label %if.then21, label %if.else, !dbg !5086

if.then21:                                        ; preds = %if.end14
  %10 = load %struct.cgraph_node*, %struct.cgraph_node** %n.addr, align 8, !dbg !5087
  %global = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %10, i32 0, i32 19, !dbg !5090
  %size = getelementptr inbounds %struct.cgraph_global_info, %struct.cgraph_global_info* %global, i32 0, i32 4, !dbg !5091
  %11 = load i32, i32* %size, align 4, !dbg !5091
  %12 = load %struct.param_info*, %struct.param_info** @compiler_params, align 8, !dbg !5092
  %arrayidx = getelementptr inbounds %struct.param_info, %struct.param_info* %12, i64 2, !dbg !5092
  %value = getelementptr inbounds %struct.param_info, %struct.param_info* %arrayidx, i32 0, i32 1, !dbg !5092
  %13 = load i32, i32* %value, align 8, !dbg !5092
  %cmp = icmp sge i32 %11, %13, !dbg !5093
  br i1 %cmp, label %if.then22, label %if.end26, !dbg !5094

if.then22:                                        ; preds = %if.then21
  %14 = load i32*, i32** %reason.addr, align 8, !dbg !5095
  %tobool23 = icmp ne i32* %14, null, !dbg !5095
  br i1 %tobool23, label %if.then24, label %if.end25, !dbg !5098

if.then24:                                        ; preds = %if.then22
  %15 = load i32*, i32** %reason.addr, align 8, !dbg !5099
  store i32 9, i32* %15, align 4, !dbg !5100
  br label %if.end25, !dbg !5101

if.end25:                                         ; preds = %if.then24, %if.then22
  store i8 0, i8* %retval, align 1, !dbg !5102
  br label %return, !dbg !5102

if.end26:                                         ; preds = %if.then21
  br label %if.end37, !dbg !5103

if.else:                                          ; preds = %if.end14
  %16 = load %struct.cgraph_node*, %struct.cgraph_node** %n.addr, align 8, !dbg !5104
  %global27 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %16, i32 0, i32 19, !dbg !5107
  %size28 = getelementptr inbounds %struct.cgraph_global_info, %struct.cgraph_global_info* %global27, i32 0, i32 4, !dbg !5108
  %17 = load i32, i32* %size28, align 4, !dbg !5108
  %18 = load %struct.param_info*, %struct.param_info** @compiler_params, align 8, !dbg !5109
  %arrayidx29 = getelementptr inbounds %struct.param_info, %struct.param_info* %18, i64 3, !dbg !5109
  %value30 = getelementptr inbounds %struct.param_info, %struct.param_info* %arrayidx29, i32 0, i32 1, !dbg !5109
  %19 = load i32, i32* %value30, align 8, !dbg !5109
  %cmp31 = icmp sge i32 %17, %19, !dbg !5110
  br i1 %cmp31, label %if.then32, label %if.end36, !dbg !5111

if.then32:                                        ; preds = %if.else
  %20 = load i32*, i32** %reason.addr, align 8, !dbg !5112
  %tobool33 = icmp ne i32* %20, null, !dbg !5112
  br i1 %tobool33, label %if.then34, label %if.end35, !dbg !5115

if.then34:                                        ; preds = %if.then32
  %21 = load i32*, i32** %reason.addr, align 8, !dbg !5116
  store i32 10, i32* %21, align 4, !dbg !5117
  br label %if.end35, !dbg !5118

if.end35:                                         ; preds = %if.then34, %if.then32
  store i8 0, i8* %retval, align 1, !dbg !5119
  br label %return, !dbg !5119

if.end36:                                         ; preds = %if.else
  br label %if.end37

if.end37:                                         ; preds = %if.end36, %if.end26
  store i8 1, i8* %retval, align 1, !dbg !5120
  br label %return, !dbg !5120

return:                                           ; preds = %if.end37, %if.end35, %if.end25, %if.end13, %if.end
  %22 = load i8, i8* %retval, align 1, !dbg !5121
  ret i8 %22, !dbg !5121
}

declare dso_local void @bitmap_obstack_free(%struct.bitmap_head_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.cgraph_edge* @cgraph_mark_inline(%struct.cgraph_edge* %edge) #0 !dbg !5122 {
entry:
  %edge.addr = alloca %struct.cgraph_edge*, align 8
  %to = alloca %struct.cgraph_node*, align 8
  %what = alloca %struct.cgraph_node*, align 8
  %e = alloca %struct.cgraph_edge*, align 8
  %next = alloca %struct.cgraph_edge*, align 8
  store %struct.cgraph_edge* %edge, %struct.cgraph_edge** %edge.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cgraph_edge** %edge.addr, metadata !5125, metadata !DIExpression()), !dbg !5126
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %to, metadata !5127, metadata !DIExpression()), !dbg !5128
  %0 = load %struct.cgraph_edge*, %struct.cgraph_edge** %edge.addr, align 8, !dbg !5129
  %caller = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %0, i32 0, i32 1, !dbg !5130
  %1 = load %struct.cgraph_node*, %struct.cgraph_node** %caller, align 8, !dbg !5130
  store %struct.cgraph_node* %1, %struct.cgraph_node** %to, align 8, !dbg !5128
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %what, metadata !5131, metadata !DIExpression()), !dbg !5132
  %2 = load %struct.cgraph_edge*, %struct.cgraph_edge** %edge.addr, align 8, !dbg !5133
  %callee = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %2, i32 0, i32 2, !dbg !5134
  %3 = load %struct.cgraph_node*, %struct.cgraph_node** %callee, align 8, !dbg !5134
  store %struct.cgraph_node* %3, %struct.cgraph_node** %what, align 8, !dbg !5132
  call void @llvm.dbg.declare(metadata %struct.cgraph_edge** %e, metadata !5135, metadata !DIExpression()), !dbg !5136
  call void @llvm.dbg.declare(metadata %struct.cgraph_edge** %next, metadata !5137, metadata !DIExpression()), !dbg !5138
  %4 = load %struct.cgraph_edge*, %struct.cgraph_edge** %edge.addr, align 8, !dbg !5139
  %call_stmt_cannot_inline_p = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %4, i32 0, i32 14, !dbg !5139
  %bf.load = load i8, i8* %call_stmt_cannot_inline_p, align 2, !dbg !5139
  %bf.lshr = lshr i8 %bf.load, 1, !dbg !5139
  %bf.clear = and i8 %bf.lshr, 1, !dbg !5139
  %bf.cast = zext i8 %bf.clear to i32, !dbg !5139
  %tobool = icmp ne i32 %bf.cast, 0, !dbg !5139
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5139

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0), i32 360, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !5139
  br label %cond.end, !dbg !5139

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5139

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !5139
  %5 = load %struct.cgraph_node*, %struct.cgraph_node** %what, align 8, !dbg !5140
  %callers = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %5, i32 0, i32 2, !dbg !5142
  %6 = load %struct.cgraph_edge*, %struct.cgraph_edge** %callers, align 8, !dbg !5142
  store %struct.cgraph_edge* %6, %struct.cgraph_edge** %e, align 8, !dbg !5143
  br label %for.cond, !dbg !5144

for.cond:                                         ; preds = %for.inc, %cond.end
  %7 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !5145
  %tobool1 = icmp ne %struct.cgraph_edge* %7, null, !dbg !5147
  br i1 %tobool1, label %for.body, label %for.end, !dbg !5147

for.body:                                         ; preds = %for.cond
  %8 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !5148
  %next_caller = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %8, i32 0, i32 4, !dbg !5150
  %9 = load %struct.cgraph_edge*, %struct.cgraph_edge** %next_caller, align 8, !dbg !5150
  store %struct.cgraph_edge* %9, %struct.cgraph_edge** %next, align 8, !dbg !5151
  %10 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !5152
  %caller2 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %10, i32 0, i32 1, !dbg !5154
  %11 = load %struct.cgraph_node*, %struct.cgraph_node** %caller2, align 8, !dbg !5154
  %12 = load %struct.cgraph_node*, %struct.cgraph_node** %to, align 8, !dbg !5155
  %cmp = icmp eq %struct.cgraph_node* %11, %12, !dbg !5156
  br i1 %cmp, label %land.lhs.true, label %if.end6, !dbg !5157

land.lhs.true:                                    ; preds = %for.body
  %13 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !5158
  %inline_failed = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %13, i32 0, i32 9, !dbg !5159
  %14 = load i32, i32* %inline_failed, align 8, !dbg !5159
  %tobool3 = icmp ne i32 %14, 0, !dbg !5158
  br i1 %tobool3, label %if.then, label %if.end6, !dbg !5160

if.then:                                          ; preds = %land.lhs.true
  %15 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !5161
  %call = call zeroext i8 @cgraph_mark_inline_edge(%struct.cgraph_edge* %15, i8 zeroext 1, %struct.VEC_cgraph_edge_p_heap** null), !dbg !5163
  %16 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !5164
  %17 = load %struct.cgraph_edge*, %struct.cgraph_edge** %edge.addr, align 8, !dbg !5166
  %cmp4 = icmp eq %struct.cgraph_edge* %16, %17, !dbg !5167
  br i1 %cmp4, label %if.then5, label %if.end, !dbg !5168

if.then5:                                         ; preds = %if.then
  %18 = load %struct.cgraph_edge*, %struct.cgraph_edge** %next, align 8, !dbg !5169
  store %struct.cgraph_edge* %18, %struct.cgraph_edge** %edge.addr, align 8, !dbg !5170
  br label %if.end, !dbg !5171

if.end:                                           ; preds = %if.then5, %if.then
  br label %if.end6, !dbg !5172

if.end6:                                          ; preds = %if.end, %land.lhs.true, %for.body
  br label %for.inc, !dbg !5173

for.inc:                                          ; preds = %if.end6
  %19 = load %struct.cgraph_edge*, %struct.cgraph_edge** %next, align 8, !dbg !5174
  store %struct.cgraph_edge* %19, %struct.cgraph_edge** %e, align 8, !dbg !5175
  br label %for.cond, !dbg !5176, !llvm.loop !5177

for.end:                                          ; preds = %for.cond
  %20 = load %struct.cgraph_edge*, %struct.cgraph_edge** %edge.addr, align 8, !dbg !5179
  ret %struct.cgraph_edge* %20, !dbg !5180
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @cgraph_mark_inline_edge(%struct.cgraph_edge* %e, i8 zeroext %update_original, %struct.VEC_cgraph_edge_p_heap** %new_edges) #0 !dbg !5181 {
entry:
  %retval = alloca i8, align 1
  %e.addr = alloca %struct.cgraph_edge*, align 8
  %update_original.addr = alloca i8, align 1
  %new_edges.addr = alloca %struct.VEC_cgraph_edge_p_heap**, align 8
  %old_size = alloca i32, align 4
  %new_size = alloca i32, align 4
  %to = alloca %struct.cgraph_node*, align 8
  %what = alloca %struct.cgraph_node*, align 8
  %curr = alloca %struct.cgraph_edge*, align 8
  %freq = alloca i32, align 4
  %duplicate = alloca i8, align 1
  %orig_size = alloca i32, align 4
  store %struct.cgraph_edge* %e, %struct.cgraph_edge** %e.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cgraph_edge** %e.addr, metadata !5185, metadata !DIExpression()), !dbg !5186
  store i8 %update_original, i8* %update_original.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %update_original.addr, metadata !5187, metadata !DIExpression()), !dbg !5188
  store %struct.VEC_cgraph_edge_p_heap** %new_edges, %struct.VEC_cgraph_edge_p_heap*** %new_edges.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_cgraph_edge_p_heap*** %new_edges.addr, metadata !5189, metadata !DIExpression()), !dbg !5190
  call void @llvm.dbg.declare(metadata i32* %old_size, metadata !5191, metadata !DIExpression()), !dbg !5192
  store i32 0, i32* %old_size, align 4, !dbg !5192
  call void @llvm.dbg.declare(metadata i32* %new_size, metadata !5193, metadata !DIExpression()), !dbg !5194
  store i32 0, i32* %new_size, align 4, !dbg !5194
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %to, metadata !5195, metadata !DIExpression()), !dbg !5196
  store %struct.cgraph_node* null, %struct.cgraph_node** %to, align 8, !dbg !5196
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %what, metadata !5197, metadata !DIExpression()), !dbg !5198
  call void @llvm.dbg.declare(metadata %struct.cgraph_edge** %curr, metadata !5199, metadata !DIExpression()), !dbg !5200
  %0 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e.addr, align 8, !dbg !5201
  store %struct.cgraph_edge* %0, %struct.cgraph_edge** %curr, align 8, !dbg !5200
  call void @llvm.dbg.declare(metadata i32* %freq, metadata !5202, metadata !DIExpression()), !dbg !5203
  call void @llvm.dbg.declare(metadata i8* %duplicate, metadata !5204, metadata !DIExpression()), !dbg !5205
  store i8 0, i8* %duplicate, align 1, !dbg !5205
  call void @llvm.dbg.declare(metadata i32* %orig_size, metadata !5206, metadata !DIExpression()), !dbg !5207
  %1 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e.addr, align 8, !dbg !5208
  %callee = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %1, i32 0, i32 2, !dbg !5209
  %2 = load %struct.cgraph_node*, %struct.cgraph_node** %callee, align 8, !dbg !5209
  %global = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %2, i32 0, i32 19, !dbg !5210
  %size = getelementptr inbounds %struct.cgraph_global_info, %struct.cgraph_global_info* %global, i32 0, i32 4, !dbg !5211
  %3 = load i32, i32* %size, align 4, !dbg !5211
  store i32 %3, i32* %orig_size, align 4, !dbg !5207
  %4 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e.addr, align 8, !dbg !5212
  %inline_failed = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %4, i32 0, i32 9, !dbg !5212
  %5 = load i32, i32* %inline_failed, align 8, !dbg !5212
  %tobool = icmp ne i32 %5, 0, !dbg !5212
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !5212

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0), i32 311, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !5212
  br label %cond.end, !dbg !5212

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5212

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !5212
  %6 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e.addr, align 8, !dbg !5213
  %inline_failed1 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %6, i32 0, i32 9, !dbg !5214
  store i32 0, i32* %inline_failed1, align 8, !dbg !5215
  %7 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e.addr, align 8, !dbg !5216
  %callee2 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %7, i32 0, i32 2, !dbg !5218
  %8 = load %struct.cgraph_node*, %struct.cgraph_node** %callee2, align 8, !dbg !5218
  %global3 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %8, i32 0, i32 19, !dbg !5219
  %inlined = getelementptr inbounds %struct.cgraph_global_info, %struct.cgraph_global_info* %global3, i32 0, i32 6, !dbg !5220
  %9 = load i8, i8* %inlined, align 4, !dbg !5220
  %tobool4 = icmp ne i8 %9, 0, !dbg !5216
  br i1 %tobool4, label %if.end, label %if.then, !dbg !5221

if.then:                                          ; preds = %cond.end
  %10 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e.addr, align 8, !dbg !5222
  %callee5 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %10, i32 0, i32 2, !dbg !5222
  %11 = load %struct.cgraph_node*, %struct.cgraph_node** %callee5, align 8, !dbg !5222
  %decl = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %11, i32 0, i32 0, !dbg !5222
  %12 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !5222
  %function_decl = bitcast %union.tree_node* %12 to %struct.tree_function_decl*, !dbg !5222
  %possibly_inlined = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl, i32 0, i32 5, !dbg !5222
  %bf.load = load i32, i32* %possibly_inlined, align 8, !dbg !5223
  %bf.clear = and i32 %bf.load, -65537, !dbg !5223
  %bf.set = or i32 %bf.clear, 65536, !dbg !5223
  store i32 %bf.set, i32* %possibly_inlined, align 8, !dbg !5223
  br label %if.end, !dbg !5222

if.end:                                           ; preds = %if.then, %cond.end
  %13 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e.addr, align 8, !dbg !5224
  %callee6 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %13, i32 0, i32 2, !dbg !5225
  %14 = load %struct.cgraph_node*, %struct.cgraph_node** %callee6, align 8, !dbg !5225
  %global7 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %14, i32 0, i32 19, !dbg !5226
  %inlined8 = getelementptr inbounds %struct.cgraph_global_info, %struct.cgraph_global_info* %global7, i32 0, i32 6, !dbg !5227
  store i8 1, i8* %inlined8, align 4, !dbg !5228
  %15 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e.addr, align 8, !dbg !5229
  %callee9 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %15, i32 0, i32 2, !dbg !5231
  %16 = load %struct.cgraph_node*, %struct.cgraph_node** %callee9, align 8, !dbg !5231
  %callers = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %16, i32 0, i32 2, !dbg !5232
  %17 = load %struct.cgraph_edge*, %struct.cgraph_edge** %callers, align 8, !dbg !5232
  %next_caller = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %17, i32 0, i32 4, !dbg !5233
  %18 = load %struct.cgraph_edge*, %struct.cgraph_edge** %next_caller, align 8, !dbg !5233
  %tobool10 = icmp ne %struct.cgraph_edge* %18, null, !dbg !5229
  br i1 %tobool10, label %if.then16, label %lor.lhs.false, !dbg !5234

lor.lhs.false:                                    ; preds = %if.end
  %19 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e.addr, align 8, !dbg !5235
  %callee11 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %19, i32 0, i32 2, !dbg !5236
  %20 = load %struct.cgraph_node*, %struct.cgraph_node** %callee11, align 8, !dbg !5236
  %call = call zeroext i8 @cgraph_can_remove_if_no_direct_calls_p(%struct.cgraph_node* %20), !dbg !5237
  %tobool12 = icmp ne i8 %call, 0, !dbg !5237
  br i1 %tobool12, label %lor.lhs.false13, label %if.then16, !dbg !5238

lor.lhs.false13:                                  ; preds = %lor.lhs.false
  %21 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e.addr, align 8, !dbg !5239
  %callee14 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %21, i32 0, i32 2, !dbg !5240
  %22 = load %struct.cgraph_node*, %struct.cgraph_node** %callee14, align 8, !dbg !5240
  %same_comdat_group = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %22, i32 0, i32 14, !dbg !5241
  %23 = load %struct.cgraph_node*, %struct.cgraph_node** %same_comdat_group, align 8, !dbg !5241
  %tobool15 = icmp ne %struct.cgraph_node* %23, null, !dbg !5239
  br i1 %tobool15, label %if.then16, label %if.end17, !dbg !5242

if.then16:                                        ; preds = %lor.lhs.false13, %lor.lhs.false, %if.end
  store i8 1, i8* %duplicate, align 1, !dbg !5243
  br label %if.end17, !dbg !5244

if.end17:                                         ; preds = %if.then16, %lor.lhs.false13
  %24 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e.addr, align 8, !dbg !5245
  %25 = load i8, i8* %update_original.addr, align 1, !dbg !5246
  call void @cgraph_clone_inlined_nodes(%struct.cgraph_edge* %24, i8 zeroext 1, i8 zeroext %25), !dbg !5247
  %26 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e.addr, align 8, !dbg !5248
  %callee18 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %26, i32 0, i32 2, !dbg !5249
  %27 = load %struct.cgraph_node*, %struct.cgraph_node** %callee18, align 8, !dbg !5249
  store %struct.cgraph_node* %27, %struct.cgraph_node** %what, align 8, !dbg !5250
  %28 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e.addr, align 8, !dbg !5251
  %frequency = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %28, i32 0, i32 11, !dbg !5252
  %29 = load i32, i32* %frequency, align 8, !dbg !5252
  store i32 %29, i32* %freq, align 4, !dbg !5253
  br label %for.cond, !dbg !5254

for.cond:                                         ; preds = %for.inc, %if.end17
  %30 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e.addr, align 8, !dbg !5255
  %tobool19 = icmp ne %struct.cgraph_edge* %30, null, !dbg !5255
  br i1 %tobool19, label %land.rhs, label %land.end, !dbg !5258

land.rhs:                                         ; preds = %for.cond
  %31 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e.addr, align 8, !dbg !5259
  %inline_failed20 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %31, i32 0, i32 9, !dbg !5260
  %32 = load i32, i32* %inline_failed20, align 8, !dbg !5260
  %tobool21 = icmp ne i32 %32, 0, !dbg !5261
  %lnot = xor i1 %tobool21, true, !dbg !5261
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %33 = phi i1 [ false, %for.cond ], [ %lnot, %land.rhs ], !dbg !5262
  br i1 %33, label %for.body, label %for.end, !dbg !5263

for.body:                                         ; preds = %land.end
  %34 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e.addr, align 8, !dbg !5264
  %caller = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %34, i32 0, i32 1, !dbg !5266
  %35 = load %struct.cgraph_node*, %struct.cgraph_node** %caller, align 8, !dbg !5266
  store %struct.cgraph_node* %35, %struct.cgraph_node** %to, align 8, !dbg !5267
  %36 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e.addr, align 8, !dbg !5268
  %caller22 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %36, i32 0, i32 1, !dbg !5269
  %37 = load %struct.cgraph_node*, %struct.cgraph_node** %caller22, align 8, !dbg !5269
  %global23 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %37, i32 0, i32 19, !dbg !5270
  %size24 = getelementptr inbounds %struct.cgraph_global_info, %struct.cgraph_global_info* %global23, i32 0, i32 4, !dbg !5271
  %38 = load i32, i32* %size24, align 4, !dbg !5271
  store i32 %38, i32* %old_size, align 4, !dbg !5272
  %39 = load %struct.cgraph_node*, %struct.cgraph_node** %to, align 8, !dbg !5273
  %40 = load %struct.cgraph_node*, %struct.cgraph_node** %what, align 8, !dbg !5274
  %call25 = call i32 @cgraph_estimate_size_after_inlining(i32 1, %struct.cgraph_node* %39, %struct.cgraph_node* %40), !dbg !5275
  store i32 %call25, i32* %new_size, align 4, !dbg !5276
  %41 = load i32, i32* %new_size, align 4, !dbg !5277
  %42 = load %struct.cgraph_node*, %struct.cgraph_node** %to, align 8, !dbg !5278
  %global26 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %42, i32 0, i32 19, !dbg !5279
  %size27 = getelementptr inbounds %struct.cgraph_global_info, %struct.cgraph_global_info* %global26, i32 0, i32 4, !dbg !5280
  store i32 %41, i32* %size27, align 4, !dbg !5281
  %43 = load i32, i32* %freq, align 4, !dbg !5282
  %44 = load %struct.cgraph_node*, %struct.cgraph_node** %to, align 8, !dbg !5283
  %45 = load %struct.cgraph_node*, %struct.cgraph_node** %what, align 8, !dbg !5284
  %call28 = call i32 @cgraph_estimate_time_after_inlining(i32 %43, %struct.cgraph_node* %44, %struct.cgraph_node* %45), !dbg !5285
  %46 = load %struct.cgraph_node*, %struct.cgraph_node** %to, align 8, !dbg !5286
  %global29 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %46, i32 0, i32 19, !dbg !5287
  %time = getelementptr inbounds %struct.cgraph_global_info, %struct.cgraph_global_info* %global29, i32 0, i32 3, !dbg !5288
  store i32 %call28, i32* %time, align 8, !dbg !5289
  br label %for.inc, !dbg !5290

for.inc:                                          ; preds = %for.body
  %47 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e.addr, align 8, !dbg !5291
  %caller30 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %47, i32 0, i32 1, !dbg !5292
  %48 = load %struct.cgraph_node*, %struct.cgraph_node** %caller30, align 8, !dbg !5292
  %callers31 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %48, i32 0, i32 2, !dbg !5293
  %49 = load %struct.cgraph_edge*, %struct.cgraph_edge** %callers31, align 8, !dbg !5293
  store %struct.cgraph_edge* %49, %struct.cgraph_edge** %e.addr, align 8, !dbg !5294
  br label %for.cond, !dbg !5295, !llvm.loop !5296

for.end:                                          ; preds = %land.end
  %50 = load %struct.cgraph_node*, %struct.cgraph_node** %what, align 8, !dbg !5298
  %global32 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %50, i32 0, i32 19, !dbg !5298
  %inlined_to = getelementptr inbounds %struct.cgraph_global_info, %struct.cgraph_global_info* %global32, i32 0, i32 2, !dbg !5298
  %51 = load %struct.cgraph_node*, %struct.cgraph_node** %inlined_to, align 8, !dbg !5298
  %52 = load %struct.cgraph_node*, %struct.cgraph_node** %to, align 8, !dbg !5298
  %cmp = icmp eq %struct.cgraph_node* %51, %52, !dbg !5298
  br i1 %cmp, label %cond.false34, label %cond.true33, !dbg !5298

cond.true33:                                      ; preds = %for.end
  call void @fancy_abort(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0), i32 336, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !5298
  br label %cond.end35, !dbg !5298

cond.false34:                                     ; preds = %for.end
  br label %cond.end35, !dbg !5298

cond.end35:                                       ; preds = %cond.false34, %cond.true33
  %cond36 = phi i32 [ 0, %cond.true33 ], [ 0, %cond.false34 ], !dbg !5298
  %53 = load i32, i32* %new_size, align 4, !dbg !5299
  %54 = load i32, i32* %old_size, align 4, !dbg !5301
  %cmp37 = icmp sgt i32 %53, %54, !dbg !5302
  br i1 %cmp37, label %if.then38, label %if.end39, !dbg !5303

if.then38:                                        ; preds = %cond.end35
  %55 = load i32, i32* %new_size, align 4, !dbg !5304
  %56 = load i32, i32* %old_size, align 4, !dbg !5305
  %sub = sub nsw i32 %55, %56, !dbg !5306
  %57 = load i32, i32* @overall_size, align 4, !dbg !5307
  %add = add nsw i32 %57, %sub, !dbg !5307
  store i32 %add, i32* @overall_size, align 4, !dbg !5307
  br label %if.end39, !dbg !5308

if.end39:                                         ; preds = %if.then38, %cond.end35
  %58 = load i8, i8* %duplicate, align 1, !dbg !5309
  %tobool40 = icmp ne i8 %58, 0, !dbg !5309
  br i1 %tobool40, label %if.end43, label %if.then41, !dbg !5311

if.then41:                                        ; preds = %if.end39
  %59 = load i32, i32* %orig_size, align 4, !dbg !5312
  %60 = load i32, i32* @overall_size, align 4, !dbg !5313
  %sub42 = sub nsw i32 %60, %59, !dbg !5313
  store i32 %sub42, i32* @overall_size, align 4, !dbg !5313
  br label %if.end43, !dbg !5314

if.end43:                                         ; preds = %if.then41, %if.end39
  %61 = load i32, i32* @ncalls_inlined, align 4, !dbg !5315
  %inc = add nsw i32 %61, 1, !dbg !5315
  store i32 %inc, i32* @ncalls_inlined, align 4, !dbg !5315
  %62 = load i32, i32* @flag_indirect_inlining, align 4, !dbg !5316
  %tobool44 = icmp ne i32 %62, 0, !dbg !5316
  br i1 %tobool44, label %if.then45, label %if.else, !dbg !5318

if.then45:                                        ; preds = %if.end43
  %63 = load %struct.cgraph_edge*, %struct.cgraph_edge** %curr, align 8, !dbg !5319
  %64 = load %struct.VEC_cgraph_edge_p_heap**, %struct.VEC_cgraph_edge_p_heap*** %new_edges.addr, align 8, !dbg !5320
  %call46 = call zeroext i8 @ipa_propagate_indirect_call_infos(%struct.cgraph_edge* %63, %struct.VEC_cgraph_edge_p_heap** %64), !dbg !5321
  store i8 %call46, i8* %retval, align 1, !dbg !5322
  br label %return, !dbg !5322

if.else:                                          ; preds = %if.end43
  store i8 0, i8* %retval, align 1, !dbg !5323
  br label %return, !dbg !5323

return:                                           ; preds = %if.else, %if.then45
  %65 = load i8, i8* %retval, align 1, !dbg !5324
  ret i8 %65, !dbg !5324
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @cgraph_estimate_time_after_inlining(i32 %frequency, %struct.cgraph_node* %to, %struct.cgraph_node* %what) #0 !dbg !5325 {
entry:
  %frequency.addr = alloca i32, align 4
  %to.addr = alloca %struct.cgraph_node*, align 8
  %what.addr = alloca %struct.cgraph_node*, align 8
  %time = alloca i64, align 8
  store i32 %frequency, i32* %frequency.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %frequency.addr, metadata !5326, metadata !DIExpression()), !dbg !5327
  store %struct.cgraph_node* %to, %struct.cgraph_node** %to.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %to.addr, metadata !5328, metadata !DIExpression()), !dbg !5329
  store %struct.cgraph_node* %what, %struct.cgraph_node** %what.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %what.addr, metadata !5330, metadata !DIExpression()), !dbg !5331
  call void @llvm.dbg.declare(metadata i64* %time, metadata !5332, metadata !DIExpression()), !dbg !5333
  %0 = load %struct.cgraph_node*, %struct.cgraph_node** %what.addr, align 8, !dbg !5334
  %global = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %0, i32 0, i32 19, !dbg !5335
  %time1 = getelementptr inbounds %struct.cgraph_global_info, %struct.cgraph_global_info* %global, i32 0, i32 3, !dbg !5336
  %1 = load i32, i32* %time1, align 8, !dbg !5336
  %conv = sext i32 %1 to i64, !dbg !5337
  %2 = load %struct.cgraph_node*, %struct.cgraph_node** %what.addr, align 8, !dbg !5338
  %call = call %struct.inline_summary* @inline_summary(%struct.cgraph_node* %2), !dbg !5339
  %time_inlining_benefit = getelementptr inbounds %struct.inline_summary, %struct.inline_summary* %call, i32 0, i32 4, !dbg !5340
  %3 = load i32, i32* %time_inlining_benefit, align 4, !dbg !5340
  %conv2 = sext i32 %3 to i64, !dbg !5339
  %sub = sub nsw i64 %conv, %conv2, !dbg !5341
  %4 = load i32, i32* %frequency.addr, align 4, !dbg !5342
  %conv3 = sext i32 %4 to i64, !dbg !5342
  %mul = mul nsw i64 %sub, %conv3, !dbg !5343
  %add = add nsw i64 %mul, 500, !dbg !5344
  %div = sdiv i64 %add, 1000, !dbg !5345
  %5 = load %struct.cgraph_node*, %struct.cgraph_node** %to.addr, align 8, !dbg !5346
  %global4 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %5, i32 0, i32 19, !dbg !5347
  %time5 = getelementptr inbounds %struct.cgraph_global_info, %struct.cgraph_global_info* %global4, i32 0, i32 3, !dbg !5348
  %6 = load i32, i32* %time5, align 8, !dbg !5348
  %conv6 = sext i32 %6 to i64, !dbg !5346
  %add7 = add nsw i64 %div, %conv6, !dbg !5349
  store i64 %add7, i64* %time, align 8, !dbg !5333
  %7 = load i64, i64* %time, align 8, !dbg !5350
  %cmp = icmp slt i64 %7, 0, !dbg !5352
  br i1 %cmp, label %if.then, label %if.end, !dbg !5353

if.then:                                          ; preds = %entry
  store i64 0, i64* %time, align 8, !dbg !5354
  br label %if.end, !dbg !5355

if.end:                                           ; preds = %if.then, %entry
  %8 = load i64, i64* %time, align 8, !dbg !5356
  %cmp9 = icmp sgt i64 %8, 1000000000, !dbg !5358
  br i1 %cmp9, label %if.then11, label %if.end12, !dbg !5359

if.then11:                                        ; preds = %if.end
  store i64 1000000000, i64* %time, align 8, !dbg !5360
  br label %if.end12, !dbg !5361

if.end12:                                         ; preds = %if.then11, %if.end
  %9 = load i64, i64* %time, align 8, !dbg !5362
  %conv13 = trunc i64 %9 to i32, !dbg !5362
  ret i32 %conv13, !dbg !5363
}

declare dso_local zeroext i8 @ipa_propagate_indirect_call_infos(%struct.cgraph_edge*, %struct.VEC_cgraph_edge_p_heap**) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @cgraph_only_called_directly_p(%struct.cgraph_node* %node) #0 !dbg !5364 {
entry:
  %node.addr = alloca %struct.cgraph_node*, align 8
  store %struct.cgraph_node* %node, %struct.cgraph_node** %node.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %node.addr, metadata !5365, metadata !DIExpression()), !dbg !5366
  %0 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !5367
  %needed = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %0, i32 0, i32 27, !dbg !5368
  %bf.load = load i16, i16* %needed, align 4, !dbg !5368
  %bf.clear = and i16 %bf.load, 1, !dbg !5368
  %bf.cast = zext i16 %bf.clear to i32, !dbg !5368
  %tobool = icmp ne i32 %bf.cast, 0, !dbg !5367
  br i1 %tobool, label %land.end, label %land.rhs, !dbg !5369

land.rhs:                                         ; preds = %entry
  %1 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !5370
  %local = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %1, i32 0, i32 18, !dbg !5371
  %externally_visible = getelementptr inbounds %struct.cgraph_local_info, %struct.cgraph_local_info* %local, i32 0, i32 2, !dbg !5372
  %bf.load1 = load i8, i8* %externally_visible, align 8, !dbg !5372
  %bf.lshr = lshr i8 %bf.load1, 1, !dbg !5372
  %bf.clear2 = and i8 %bf.lshr, 1, !dbg !5372
  %bf.cast3 = zext i8 %bf.clear2 to i32, !dbg !5372
  %tobool4 = icmp ne i32 %bf.cast3, 0, !dbg !5373
  %lnot = xor i1 %tobool4, true, !dbg !5373
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %2 = phi i1 [ false, %entry ], [ %lnot, %land.rhs ], !dbg !5374
  %land.ext = zext i1 %2 to i32, !dbg !5369
  %conv = trunc i32 %land.ext to i8, !dbg !5375
  ret i8 %conv, !dbg !5376
}

declare dso_local i32 @compute_call_stmt_bb_frequency(%union.tree_node*, %struct.basic_block_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @gsi_start_bb(%struct.gimple_stmt_iterator* noalias sret %agg.result, %struct.basic_block_def* %bb) #0 !dbg !5377 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %seq = alloca %struct.gimple_seq_d*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !5380, metadata !DIExpression()), !dbg !5381
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %agg.result, metadata !5382, metadata !DIExpression()), !dbg !5383
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %seq, metadata !5384, metadata !DIExpression()), !dbg !5385
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5386
  %call = call %struct.gimple_seq_d* @bb_seq(%struct.basic_block_def* %0), !dbg !5387
  store %struct.gimple_seq_d* %call, %struct.gimple_seq_d** %seq, align 8, !dbg !5388
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq, align 8, !dbg !5389
  %call1 = call %struct.gimple_seq_node_d* @gimple_seq_first(%struct.gimple_seq_d* %1), !dbg !5390
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 0, !dbg !5391
  store %struct.gimple_seq_node_d* %call1, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !5392
  %2 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq, align 8, !dbg !5393
  %seq2 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 1, !dbg !5394
  store %struct.gimple_seq_d* %2, %struct.gimple_seq_d** %seq2, align 8, !dbg !5395
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5396
  %bb3 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 2, !dbg !5397
  store %struct.basic_block_def* %3, %struct.basic_block_def** %bb3, align 8, !dbg !5398
  ret void, !dbg !5399
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #3

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %i) #0 !dbg !5400 {
entry:
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %i, metadata !5403, metadata !DIExpression()), !dbg !5404
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %i, i32 0, i32 0, !dbg !5405
  %0 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !5405
  %cmp = icmp eq %struct.gimple_seq_node_d* %0, null, !dbg !5406
  %conv = zext i1 %cmp to i32, !dbg !5406
  %conv1 = trunc i32 %conv to i8, !dbg !5407
  ret i8 %conv1, !dbg !5408
}

; Function Attrs: noinline nounwind uwtable
define internal %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %i) #0 !dbg !5409 {
entry:
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %i, metadata !5412, metadata !DIExpression()), !dbg !5413
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %i, i32 0, i32 0, !dbg !5414
  %0 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !5414
  %stmt = getelementptr inbounds %struct.gimple_seq_node_d, %struct.gimple_seq_node_d* %0, i32 0, i32 0, !dbg !5415
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5415
  ret %union.gimple_statement_d* %1, !dbg !5416
}

declare dso_local i32 @estimate_num_insns(%union.gimple_statement_d*, %struct.eni_weights_d*) #2

declare dso_local void @print_gimple_stmt(%struct._IO_FILE*, %union.gimple_statement_d*, i32, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @likely_eliminated_by_inlining_p(%union.gimple_statement_d* %stmt) #0 !dbg !5417 {
entry:
  %retval = alloca i8, align 1
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %code = alloca i32, align 4
  %rhs = alloca %union.tree_node*, align 8
  %lhs = alloca %union.tree_node*, align 8
  %inner_rhs = alloca %union.tree_node*, align 8
  %inner_lhs = alloca %union.tree_node*, align 8
  %rhs_free = alloca i8, align 1
  %lhs_free = alloca i8, align 1
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !5420, metadata !DIExpression()), !dbg !5421
  call void @llvm.dbg.declare(metadata i32* %code, metadata !5422, metadata !DIExpression()), !dbg !5423
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5424
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !5425
  store i32 %call, i32* %code, align 4, !dbg !5423
  %1 = load i32, i32* %code, align 4, !dbg !5426
  switch i32 %1, label %sw.default [
    i32 9, label %sw.bb
    i32 6, label %sw.bb1
  ], !dbg !5427

sw.bb:                                            ; preds = %entry
  store i8 1, i8* %retval, align 1, !dbg !5428
  br label %return, !dbg !5428

sw.bb1:                                           ; preds = %entry
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5430
  %call2 = call i32 @gimple_num_ops(%union.gimple_statement_d* %2), !dbg !5432
  %cmp = icmp ne i32 %call2, 2, !dbg !5433
  br i1 %cmp, label %if.then, label %if.end, !dbg !5434

if.then:                                          ; preds = %sw.bb1
  store i8 0, i8* %retval, align 1, !dbg !5435
  br label %return, !dbg !5435

if.end:                                           ; preds = %sw.bb1
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5436
  %call3 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %3), !dbg !5438
  %cmp4 = icmp eq i32 %call3, 113, !dbg !5439
  br i1 %cmp4, label %if.then13, label %lor.lhs.false, !dbg !5440

lor.lhs.false:                                    ; preds = %if.end
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5441
  %call5 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %4), !dbg !5442
  %cmp6 = icmp eq i32 %call5, 116, !dbg !5443
  br i1 %cmp6, label %if.then13, label %lor.lhs.false7, !dbg !5444

lor.lhs.false7:                                   ; preds = %lor.lhs.false
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5445
  %call8 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %5), !dbg !5446
  %cmp9 = icmp eq i32 %call8, 118, !dbg !5447
  br i1 %cmp9, label %if.then13, label %lor.lhs.false10, !dbg !5448

lor.lhs.false10:                                  ; preds = %lor.lhs.false7
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5449
  %call11 = call i32 @gimple_assign_rhs_class(%union.gimple_statement_d* %6), !dbg !5450
  %cmp12 = icmp eq i32 %call11, 3, !dbg !5451
  br i1 %cmp12, label %if.then13, label %if.end154, !dbg !5452

if.then13:                                        ; preds = %lor.lhs.false10, %lor.lhs.false7, %lor.lhs.false, %if.end
  call void @llvm.dbg.declare(metadata %union.tree_node** %rhs, metadata !5453, metadata !DIExpression()), !dbg !5455
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5456
  %call14 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %7), !dbg !5457
  store %union.tree_node* %call14, %union.tree_node** %rhs, align 8, !dbg !5455
  call void @llvm.dbg.declare(metadata %union.tree_node** %lhs, metadata !5458, metadata !DIExpression()), !dbg !5459
  %8 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5460
  %call15 = call %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %8), !dbg !5461
  store %union.tree_node* %call15, %union.tree_node** %lhs, align 8, !dbg !5459
  call void @llvm.dbg.declare(metadata %union.tree_node** %inner_rhs, metadata !5462, metadata !DIExpression()), !dbg !5463
  %9 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !5464
  store %union.tree_node* %9, %union.tree_node** %inner_rhs, align 8, !dbg !5463
  call void @llvm.dbg.declare(metadata %union.tree_node** %inner_lhs, metadata !5465, metadata !DIExpression()), !dbg !5466
  %10 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !5467
  store %union.tree_node* %10, %union.tree_node** %inner_lhs, align 8, !dbg !5466
  call void @llvm.dbg.declare(metadata i8* %rhs_free, metadata !5468, metadata !DIExpression()), !dbg !5469
  store i8 0, i8* %rhs_free, align 1, !dbg !5469
  call void @llvm.dbg.declare(metadata i8* %lhs_free, metadata !5470, metadata !DIExpression()), !dbg !5471
  store i8 0, i8* %lhs_free, align 1, !dbg !5471
  br label %while.cond, !dbg !5472

while.cond:                                       ; preds = %while.body, %if.then13
  %11 = load %union.tree_node*, %union.tree_node** %inner_lhs, align 8, !dbg !5473
  %call16 = call zeroext i8 @handled_component_p(%union.tree_node* %11), !dbg !5474
  %conv = zext i8 %call16 to i32, !dbg !5474
  %tobool = icmp ne i32 %conv, 0, !dbg !5474
  br i1 %tobool, label %lor.end, label %lor.rhs, !dbg !5475

lor.rhs:                                          ; preds = %while.cond
  %12 = load %union.tree_node*, %union.tree_node** %inner_lhs, align 8, !dbg !5476
  %base = bitcast %union.tree_node* %12 to %struct.tree_base*, !dbg !5476
  %13 = bitcast %struct.tree_base* %base to i64*, !dbg !5476
  %bf.load = load i64, i64* %13, align 8, !dbg !5476
  %bf.clear = and i64 %bf.load, 65535, !dbg !5476
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !5476
  %cmp17 = icmp eq i32 %bf.cast, 47, !dbg !5477
  br label %lor.end, !dbg !5475

lor.end:                                          ; preds = %lor.rhs, %while.cond
  %14 = phi i1 [ true, %while.cond ], [ %cmp17, %lor.rhs ]
  br i1 %14, label %while.body, label %while.end, !dbg !5472

while.body:                                       ; preds = %lor.end
  %15 = load %union.tree_node*, %union.tree_node** %inner_lhs, align 8, !dbg !5478
  %exp = bitcast %union.tree_node* %15 to %struct.tree_exp*, !dbg !5478
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !5478
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !5478
  %16 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !5478
  store %union.tree_node* %16, %union.tree_node** %inner_lhs, align 8, !dbg !5479
  br label %while.cond, !dbg !5472, !llvm.loop !5480

while.end:                                        ; preds = %lor.end
  br label %while.cond19, !dbg !5481

while.cond19:                                     ; preds = %while.body38, %while.end
  %17 = load %union.tree_node*, %union.tree_node** %inner_rhs, align 8, !dbg !5482
  %call20 = call zeroext i8 @handled_component_p(%union.tree_node* %17), !dbg !5483
  %conv21 = zext i8 %call20 to i32, !dbg !5483
  %tobool22 = icmp ne i32 %conv21, 0, !dbg !5483
  br i1 %tobool22, label %lor.end37, label %lor.lhs.false23, !dbg !5484

lor.lhs.false23:                                  ; preds = %while.cond19
  %18 = load %union.tree_node*, %union.tree_node** %inner_rhs, align 8, !dbg !5485
  %base24 = bitcast %union.tree_node* %18 to %struct.tree_base*, !dbg !5485
  %19 = bitcast %struct.tree_base* %base24 to i64*, !dbg !5485
  %bf.load25 = load i64, i64* %19, align 8, !dbg !5485
  %bf.clear26 = and i64 %bf.load25, 65535, !dbg !5485
  %bf.cast27 = trunc i64 %bf.clear26 to i32, !dbg !5485
  %cmp28 = icmp eq i32 %bf.cast27, 121, !dbg !5486
  br i1 %cmp28, label %lor.end37, label %lor.rhs30, !dbg !5487

lor.rhs30:                                        ; preds = %lor.lhs.false23
  %20 = load %union.tree_node*, %union.tree_node** %inner_rhs, align 8, !dbg !5488
  %base31 = bitcast %union.tree_node* %20 to %struct.tree_base*, !dbg !5488
  %21 = bitcast %struct.tree_base* %base31 to i64*, !dbg !5488
  %bf.load32 = load i64, i64* %21, align 8, !dbg !5488
  %bf.clear33 = and i64 %bf.load32, 65535, !dbg !5488
  %bf.cast34 = trunc i64 %bf.clear33 to i32, !dbg !5488
  %cmp35 = icmp eq i32 %bf.cast34, 47, !dbg !5489
  br label %lor.end37, !dbg !5487

lor.end37:                                        ; preds = %lor.rhs30, %lor.lhs.false23, %while.cond19
  %22 = phi i1 [ true, %lor.lhs.false23 ], [ true, %while.cond19 ], [ %cmp35, %lor.rhs30 ]
  br i1 %22, label %while.body38, label %while.end42, !dbg !5481

while.body38:                                     ; preds = %lor.end37
  %23 = load %union.tree_node*, %union.tree_node** %inner_rhs, align 8, !dbg !5490
  %exp39 = bitcast %union.tree_node* %23 to %struct.tree_exp*, !dbg !5490
  %operands40 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp39, i32 0, i32 3, !dbg !5490
  %arrayidx41 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands40, i64 0, i64 0, !dbg !5490
  %24 = load %union.tree_node*, %union.tree_node** %arrayidx41, align 8, !dbg !5490
  store %union.tree_node* %24, %union.tree_node** %inner_rhs, align 8, !dbg !5491
  br label %while.cond19, !dbg !5481, !llvm.loop !5492

while.end42:                                      ; preds = %lor.end37
  %25 = load %union.tree_node*, %union.tree_node** %inner_rhs, align 8, !dbg !5493
  %base43 = bitcast %union.tree_node* %25 to %struct.tree_base*, !dbg !5493
  %26 = bitcast %struct.tree_base* %base43 to i64*, !dbg !5493
  %bf.load44 = load i64, i64* %26, align 8, !dbg !5493
  %bf.clear45 = and i64 %bf.load44, 65535, !dbg !5493
  %bf.cast46 = trunc i64 %bf.clear45 to i32, !dbg !5493
  %cmp47 = icmp eq i32 %bf.cast46, 34, !dbg !5495
  br i1 %cmp47, label %if.then68, label %lor.lhs.false49, !dbg !5496

lor.lhs.false49:                                  ; preds = %while.end42
  %27 = load %union.tree_node*, %union.tree_node** %inner_rhs, align 8, !dbg !5497
  %base50 = bitcast %union.tree_node* %27 to %struct.tree_base*, !dbg !5497
  %28 = bitcast %struct.tree_base* %base50 to i64*, !dbg !5497
  %bf.load51 = load i64, i64* %28, align 8, !dbg !5497
  %bf.clear52 = and i64 %bf.load51, 65535, !dbg !5497
  %bf.cast53 = trunc i64 %bf.clear52 to i32, !dbg !5497
  %cmp54 = icmp eq i32 %bf.cast53, 141, !dbg !5498
  br i1 %cmp54, label %land.lhs.true, label %if.end69, !dbg !5499

land.lhs.true:                                    ; preds = %lor.lhs.false49
  %29 = load %union.tree_node*, %union.tree_node** %inner_rhs, align 8, !dbg !5500
  %base56 = bitcast %union.tree_node* %29 to %struct.tree_base*, !dbg !5500
  %30 = bitcast %struct.tree_base* %base56 to i64*, !dbg !5500
  %bf.load57 = load i64, i64* %30, align 8, !dbg !5500
  %bf.lshr = lshr i64 %bf.load57, 32, !dbg !5500
  %bf.clear58 = and i64 %bf.lshr, 1, !dbg !5500
  %bf.cast59 = trunc i64 %bf.clear58 to i32, !dbg !5500
  %tobool60 = icmp ne i32 %bf.cast59, 0, !dbg !5500
  br i1 %tobool60, label %land.lhs.true61, label %if.end69, !dbg !5501

land.lhs.true61:                                  ; preds = %land.lhs.true
  %31 = load %union.tree_node*, %union.tree_node** %inner_rhs, align 8, !dbg !5502
  %ssa_name = bitcast %union.tree_node* %31 to %struct.tree_ssa_name*, !dbg !5502
  %var = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 1, !dbg !5502
  %32 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !5502
  %base62 = bitcast %union.tree_node* %32 to %struct.tree_base*, !dbg !5502
  %33 = bitcast %struct.tree_base* %base62 to i64*, !dbg !5502
  %bf.load63 = load i64, i64* %33, align 8, !dbg !5502
  %bf.clear64 = and i64 %bf.load63, 65535, !dbg !5502
  %bf.cast65 = trunc i64 %bf.clear64 to i32, !dbg !5502
  %cmp66 = icmp eq i32 %bf.cast65, 34, !dbg !5503
  br i1 %cmp66, label %if.then68, label %if.end69, !dbg !5504

if.then68:                                        ; preds = %land.lhs.true61, %while.end42
  store i8 1, i8* %rhs_free, align 1, !dbg !5505
  br label %if.end69, !dbg !5506

if.end69:                                         ; preds = %if.then68, %land.lhs.true61, %land.lhs.true, %lor.lhs.false49
  %34 = load i8, i8* %rhs_free, align 1, !dbg !5507
  %conv70 = zext i8 %34 to i32, !dbg !5507
  %tobool71 = icmp ne i32 %conv70, 0, !dbg !5507
  br i1 %tobool71, label %land.lhs.true72, label %if.end77, !dbg !5509

land.lhs.true72:                                  ; preds = %if.end69
  %35 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !5510
  %call73 = call zeroext i8 @is_gimple_reg(%union.tree_node* %35), !dbg !5511
  %conv74 = zext i8 %call73 to i32, !dbg !5511
  %tobool75 = icmp ne i32 %conv74, 0, !dbg !5511
  br i1 %tobool75, label %if.then76, label %if.end77, !dbg !5512

if.then76:                                        ; preds = %land.lhs.true72
  store i8 1, i8* %lhs_free, align 1, !dbg !5513
  br label %if.end77, !dbg !5514

if.end77:                                         ; preds = %if.then76, %land.lhs.true72, %if.end69
  %36 = load %union.tree_node*, %union.tree_node** %inner_lhs, align 8, !dbg !5515
  %base78 = bitcast %union.tree_node* %36 to %struct.tree_base*, !dbg !5515
  %37 = bitcast %struct.tree_base* %base78 to i64*, !dbg !5515
  %bf.load79 = load i64, i64* %37, align 8, !dbg !5515
  %bf.clear80 = and i64 %bf.load79, 65535, !dbg !5515
  %bf.cast81 = trunc i64 %bf.clear80 to i32, !dbg !5515
  %cmp82 = icmp eq i32 %bf.cast81, 34, !dbg !5517
  br i1 %cmp82, label %land.lhs.true107, label %lor.lhs.false84, !dbg !5518

lor.lhs.false84:                                  ; preds = %if.end77
  %38 = load %union.tree_node*, %union.tree_node** %inner_lhs, align 8, !dbg !5519
  %base85 = bitcast %union.tree_node* %38 to %struct.tree_base*, !dbg !5519
  %39 = bitcast %struct.tree_base* %base85 to i64*, !dbg !5519
  %bf.load86 = load i64, i64* %39, align 8, !dbg !5519
  %bf.clear87 = and i64 %bf.load86, 65535, !dbg !5519
  %bf.cast88 = trunc i64 %bf.clear87 to i32, !dbg !5519
  %cmp89 = icmp eq i32 %bf.cast88, 141, !dbg !5520
  br i1 %cmp89, label %land.lhs.true91, label %lor.lhs.false110, !dbg !5521

land.lhs.true91:                                  ; preds = %lor.lhs.false84
  %40 = load %union.tree_node*, %union.tree_node** %inner_lhs, align 8, !dbg !5522
  %base92 = bitcast %union.tree_node* %40 to %struct.tree_base*, !dbg !5522
  %41 = bitcast %struct.tree_base* %base92 to i64*, !dbg !5522
  %bf.load93 = load i64, i64* %41, align 8, !dbg !5522
  %bf.lshr94 = lshr i64 %bf.load93, 32, !dbg !5522
  %bf.clear95 = and i64 %bf.lshr94, 1, !dbg !5522
  %bf.cast96 = trunc i64 %bf.clear95 to i32, !dbg !5522
  %tobool97 = icmp ne i32 %bf.cast96, 0, !dbg !5522
  br i1 %tobool97, label %land.lhs.true98, label %lor.lhs.false110, !dbg !5523

land.lhs.true98:                                  ; preds = %land.lhs.true91
  %42 = load %union.tree_node*, %union.tree_node** %inner_lhs, align 8, !dbg !5524
  %ssa_name99 = bitcast %union.tree_node* %42 to %struct.tree_ssa_name*, !dbg !5524
  %var100 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name99, i32 0, i32 1, !dbg !5524
  %43 = load %union.tree_node*, %union.tree_node** %var100, align 8, !dbg !5524
  %base101 = bitcast %union.tree_node* %43 to %struct.tree_base*, !dbg !5524
  %44 = bitcast %struct.tree_base* %base101 to i64*, !dbg !5524
  %bf.load102 = load i64, i64* %44, align 8, !dbg !5524
  %bf.clear103 = and i64 %bf.load102, 65535, !dbg !5524
  %bf.cast104 = trunc i64 %bf.clear103 to i32, !dbg !5524
  %cmp105 = icmp eq i32 %bf.cast104, 34, !dbg !5525
  br i1 %cmp105, label %land.lhs.true107, label %lor.lhs.false110, !dbg !5526

land.lhs.true107:                                 ; preds = %land.lhs.true98, %if.end77
  %45 = load %union.tree_node*, %union.tree_node** %inner_lhs, align 8, !dbg !5527
  %46 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !5528
  %cmp108 = icmp ne %union.tree_node* %45, %46, !dbg !5529
  br i1 %cmp108, label %if.then133, label %lor.lhs.false110, !dbg !5530

lor.lhs.false110:                                 ; preds = %land.lhs.true107, %land.lhs.true98, %land.lhs.true91, %lor.lhs.false84
  %47 = load %union.tree_node*, %union.tree_node** %inner_lhs, align 8, !dbg !5531
  %base111 = bitcast %union.tree_node* %47 to %struct.tree_base*, !dbg !5531
  %48 = bitcast %struct.tree_base* %base111 to i64*, !dbg !5531
  %bf.load112 = load i64, i64* %48, align 8, !dbg !5531
  %bf.clear113 = and i64 %bf.load112, 65535, !dbg !5531
  %bf.cast114 = trunc i64 %bf.clear113 to i32, !dbg !5531
  %cmp115 = icmp eq i32 %bf.cast114, 36, !dbg !5532
  br i1 %cmp115, label %if.then133, label %lor.lhs.false117, !dbg !5533

lor.lhs.false117:                                 ; preds = %lor.lhs.false110
  %49 = load %union.tree_node*, %union.tree_node** %inner_lhs, align 8, !dbg !5534
  %base118 = bitcast %union.tree_node* %49 to %struct.tree_base*, !dbg !5534
  %50 = bitcast %struct.tree_base* %base118 to i64*, !dbg !5534
  %bf.load119 = load i64, i64* %50, align 8, !dbg !5534
  %bf.clear120 = and i64 %bf.load119, 65535, !dbg !5534
  %bf.cast121 = trunc i64 %bf.clear120 to i32, !dbg !5534
  %cmp122 = icmp eq i32 %bf.cast121, 141, !dbg !5535
  br i1 %cmp122, label %land.lhs.true124, label %if.end134, !dbg !5536

land.lhs.true124:                                 ; preds = %lor.lhs.false117
  %51 = load %union.tree_node*, %union.tree_node** %inner_lhs, align 8, !dbg !5537
  %ssa_name125 = bitcast %union.tree_node* %51 to %struct.tree_ssa_name*, !dbg !5537
  %var126 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name125, i32 0, i32 1, !dbg !5537
  %52 = load %union.tree_node*, %union.tree_node** %var126, align 8, !dbg !5537
  %base127 = bitcast %union.tree_node* %52 to %struct.tree_base*, !dbg !5537
  %53 = bitcast %struct.tree_base* %base127 to i64*, !dbg !5537
  %bf.load128 = load i64, i64* %53, align 8, !dbg !5537
  %bf.clear129 = and i64 %bf.load128, 65535, !dbg !5537
  %bf.cast130 = trunc i64 %bf.clear129 to i32, !dbg !5537
  %cmp131 = icmp eq i32 %bf.cast130, 36, !dbg !5538
  br i1 %cmp131, label %if.then133, label %if.end134, !dbg !5539

if.then133:                                       ; preds = %land.lhs.true124, %lor.lhs.false110, %land.lhs.true107
  store i8 1, i8* %lhs_free, align 1, !dbg !5540
  br label %if.end134, !dbg !5541

if.end134:                                        ; preds = %if.then133, %land.lhs.true124, %lor.lhs.false117
  %54 = load i8, i8* %lhs_free, align 1, !dbg !5542
  %conv135 = zext i8 %54 to i32, !dbg !5542
  %tobool136 = icmp ne i32 %conv135, 0, !dbg !5542
  br i1 %tobool136, label %land.lhs.true137, label %if.end146, !dbg !5544

land.lhs.true137:                                 ; preds = %if.end134
  %55 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !5545
  %call138 = call zeroext i8 @is_gimple_reg(%union.tree_node* %55), !dbg !5546
  %conv139 = zext i8 %call138 to i32, !dbg !5546
  %tobool140 = icmp ne i32 %conv139, 0, !dbg !5546
  br i1 %tobool140, label %if.then145, label %lor.lhs.false141, !dbg !5547

lor.lhs.false141:                                 ; preds = %land.lhs.true137
  %56 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !5548
  %call142 = call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %56), !dbg !5549
  %conv143 = zext i8 %call142 to i32, !dbg !5549
  %tobool144 = icmp ne i32 %conv143, 0, !dbg !5549
  br i1 %tobool144, label %if.then145, label %if.end146, !dbg !5550

if.then145:                                       ; preds = %lor.lhs.false141, %land.lhs.true137
  store i8 1, i8* %rhs_free, align 1, !dbg !5551
  br label %if.end146, !dbg !5552

if.end146:                                        ; preds = %if.then145, %lor.lhs.false141, %if.end134
  %57 = load i8, i8* %lhs_free, align 1, !dbg !5553
  %conv147 = zext i8 %57 to i32, !dbg !5553
  %tobool148 = icmp ne i32 %conv147, 0, !dbg !5553
  br i1 %tobool148, label %land.lhs.true149, label %if.end153, !dbg !5555

land.lhs.true149:                                 ; preds = %if.end146
  %58 = load i8, i8* %rhs_free, align 1, !dbg !5556
  %conv150 = zext i8 %58 to i32, !dbg !5556
  %tobool151 = icmp ne i32 %conv150, 0, !dbg !5556
  br i1 %tobool151, label %if.then152, label %if.end153, !dbg !5557

if.then152:                                       ; preds = %land.lhs.true149
  store i8 1, i8* %retval, align 1, !dbg !5558
  br label %return, !dbg !5558

if.end153:                                        ; preds = %land.lhs.true149, %if.end146
  br label %if.end154, !dbg !5559

if.end154:                                        ; preds = %if.end153, %lor.lhs.false10
  store i8 0, i8* %retval, align 1, !dbg !5560
  br label %return, !dbg !5560

sw.default:                                       ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !5561
  br label %return, !dbg !5561

return:                                           ; preds = %sw.default, %if.end154, %if.then152, %if.then, %sw.bb
  %59 = load i8, i8* %retval, align 1, !dbg !5562
  ret i8 %59, !dbg !5562
}

; Function Attrs: noinline nounwind uwtable
define internal void @gsi_next(%struct.gimple_stmt_iterator* %i) #0 !dbg !5563 {
entry:
  %i.addr = alloca %struct.gimple_stmt_iterator*, align 8
  store %struct.gimple_stmt_iterator* %i, %struct.gimple_stmt_iterator** %i.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator** %i.addr, metadata !5567, metadata !DIExpression()), !dbg !5568
  %0 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %i.addr, align 8, !dbg !5569
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %0, i32 0, i32 0, !dbg !5570
  %1 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !5570
  %next = getelementptr inbounds %struct.gimple_seq_node_d, %struct.gimple_seq_node_d* %1, i32 0, i32 2, !dbg !5571
  %2 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %next, align 8, !dbg !5571
  %3 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %i.addr, align 8, !dbg !5572
  %ptr1 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %3, i32 0, i32 0, !dbg !5573
  store %struct.gimple_seq_node_d* %2, %struct.gimple_seq_node_d** %ptr1, align 8, !dbg !5574
  ret void, !dbg !5575
}

declare dso_local i32 @estimate_move_cost(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.gimple_seq_d* @bb_seq(%struct.basic_block_def* %bb) #0 !dbg !5576 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !5582, metadata !DIExpression()), !dbg !5583
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5584
  %flags = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 13, !dbg !5585
  %1 = load i32, i32* %flags, align 8, !dbg !5585
  %and = and i32 %1, 512, !dbg !5586
  %tobool = icmp ne i32 %and, 0, !dbg !5586
  br i1 %tobool, label %cond.false, label %land.lhs.true, !dbg !5587

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5588
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 7, !dbg !5589
  %gimple = bitcast %union.basic_block_il_dependent* %il to %struct.gimple_bb_info**, !dbg !5590
  %3 = load %struct.gimple_bb_info*, %struct.gimple_bb_info** %gimple, align 8, !dbg !5590
  %tobool1 = icmp ne %struct.gimple_bb_info* %3, null, !dbg !5588
  br i1 %tobool1, label %cond.true, label %cond.false, !dbg !5591

cond.true:                                        ; preds = %land.lhs.true
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5592
  %il2 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %4, i32 0, i32 7, !dbg !5593
  %gimple3 = bitcast %union.basic_block_il_dependent* %il2 to %struct.gimple_bb_info**, !dbg !5594
  %5 = load %struct.gimple_bb_info*, %struct.gimple_bb_info** %gimple3, align 8, !dbg !5594
  %seq = getelementptr inbounds %struct.gimple_bb_info, %struct.gimple_bb_info* %5, i32 0, i32 0, !dbg !5595
  %6 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq, align 8, !dbg !5595
  br label %cond.end, !dbg !5591

cond.false:                                       ; preds = %land.lhs.true, %entry
  br label %cond.end, !dbg !5591

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.gimple_seq_d* [ %6, %cond.true ], [ null, %cond.false ], !dbg !5591
  ret %struct.gimple_seq_d* %cond, !dbg !5596
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.gimple_seq_node_d* @gimple_seq_first(%struct.gimple_seq_d* %s) #0 !dbg !5597 {
entry:
  %s.addr = alloca %struct.gimple_seq_d*, align 8
  store %struct.gimple_seq_d* %s, %struct.gimple_seq_d** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %s.addr, metadata !5603, metadata !DIExpression()), !dbg !5604
  %0 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %s.addr, align 8, !dbg !5605
  %tobool = icmp ne %struct.gimple_seq_d* %0, null, !dbg !5605
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5605

cond.true:                                        ; preds = %entry
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %s.addr, align 8, !dbg !5606
  %first = getelementptr inbounds %struct.gimple_seq_d, %struct.gimple_seq_d* %1, i32 0, i32 0, !dbg !5607
  %2 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %first, align 8, !dbg !5607
  br label %cond.end, !dbg !5605

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5605

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.gimple_seq_node_d* [ %2, %cond.true ], [ null, %cond.false ], !dbg !5605
  ret %struct.gimple_seq_node_d* %cond, !dbg !5608
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_code(%union.gimple_statement_d* %g) #0 !dbg !5609 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !5612, metadata !DIExpression()), !dbg !5613
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !5614
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !5615
  %1 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !5616
  %bf.load = load i32, i32* %1, align 8, !dbg !5616
  %bf.clear = and i32 %bf.load, 255, !dbg !5616
  ret i32 %bf.clear, !dbg !5617
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_num_ops(%union.gimple_statement_d* %gs) #0 !dbg !5618 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5621, metadata !DIExpression()), !dbg !5622
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5623
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !5624
  %num_ops = getelementptr inbounds %struct.gimple_statement_base, %struct.gimple_statement_base* %gsbase, i32 0, i32 3, !dbg !5625
  %1 = load i32, i32* %num_ops, align 4, !dbg !5625
  ret i32 %1, !dbg !5626
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %gs) #0 !dbg !5627 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %code = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5630, metadata !DIExpression()), !dbg !5631
  call void @llvm.dbg.declare(metadata i32* %code, metadata !5632, metadata !DIExpression()), !dbg !5633
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5634
  %call = call i32 @gimple_expr_code(%union.gimple_statement_d* %0), !dbg !5635
  store i32 %call, i32* %code, align 4, !dbg !5636
  %1 = load i32, i32* %code, align 4, !dbg !5637
  %call1 = call i32 @get_gimple_rhs_class(i32 %1), !dbg !5639
  %cmp = icmp eq i32 %call1, 3, !dbg !5640
  br i1 %cmp, label %if.then, label %if.end, !dbg !5641

if.then:                                          ; preds = %entry
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5642
  %call2 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %2), !dbg !5642
  %base = bitcast %union.tree_node* %call2 to %struct.tree_base*, !dbg !5642
  %3 = bitcast %struct.tree_base* %base to i64*, !dbg !5642
  %bf.load = load i64, i64* %3, align 8, !dbg !5642
  %bf.clear = and i64 %bf.load, 65535, !dbg !5642
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !5642
  store i32 %bf.cast, i32* %code, align 4, !dbg !5643
  br label %if.end, !dbg !5644

if.end:                                           ; preds = %if.then, %entry
  %4 = load i32, i32* %code, align 4, !dbg !5645
  ret i32 %4, !dbg !5646
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_assign_rhs_class(%union.gimple_statement_d* %gs) #0 !dbg !5647 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5650, metadata !DIExpression()), !dbg !5651
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5652
  %call = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %0), !dbg !5653
  %call1 = call i32 @get_gimple_rhs_class(i32 %call), !dbg !5654
  ret i32 %call1, !dbg !5655
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %gs) #0 !dbg !5656 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5659, metadata !DIExpression()), !dbg !5660
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5661
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 1), !dbg !5662
  ret %union.tree_node* %call, !dbg !5663
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %gs) #0 !dbg !5664 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5665, metadata !DIExpression()), !dbg !5666
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5667
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 0), !dbg !5668
  ret %union.tree_node* %call, !dbg !5669
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @handled_component_p(%union.tree_node* %t) #0 !dbg !5670 {
entry:
  %retval = alloca i8, align 1
  %t.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %t, %union.tree_node** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %t.addr, metadata !5676, metadata !DIExpression()), !dbg !5677
  %0 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !5678
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !5678
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !5678
  %bf.load = load i64, i64* %1, align 8, !dbg !5678
  %bf.clear = and i64 %bf.load, 65535, !dbg !5678
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !5678
  switch i32 %bf.cast, label %sw.default [
    i32 42, label %sw.bb
    i32 41, label %sw.bb
    i32 45, label %sw.bb
    i32 46, label %sw.bb
    i32 118, label %sw.bb
    i32 43, label %sw.bb
    i32 44, label %sw.bb
  ], !dbg !5679

sw.bb:                                            ; preds = %entry, %entry, %entry, %entry, %entry, %entry, %entry
  store i8 1, i8* %retval, align 1, !dbg !5680
  br label %return, !dbg !5680

sw.default:                                       ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !5682
  br label %return, !dbg !5682

return:                                           ; preds = %sw.default, %sw.bb
  %2 = load i8, i8* %retval, align 1, !dbg !5683
  ret i8 %2, !dbg !5683
}

declare dso_local zeroext i8 @is_gimple_reg(%union.tree_node*) #2

declare dso_local zeroext i8 @is_gimple_min_invariant(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_expr_code(%union.gimple_statement_d* %stmt) #0 !dbg !5684 {
entry:
  %retval = alloca i32, align 4
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %code = alloca i32, align 4
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !5685, metadata !DIExpression()), !dbg !5686
  call void @llvm.dbg.declare(metadata i32* %code, metadata !5687, metadata !DIExpression()), !dbg !5688
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5689
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !5690
  store i32 %call, i32* %code, align 4, !dbg !5688
  %1 = load i32, i32* %code, align 4, !dbg !5691
  %cmp = icmp eq i32 %1, 6, !dbg !5693
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !5694

lor.lhs.false:                                    ; preds = %entry
  %2 = load i32, i32* %code, align 4, !dbg !5695
  %cmp1 = icmp eq i32 %2, 1, !dbg !5696
  br i1 %cmp1, label %if.then, label %if.else, !dbg !5697

if.then:                                          ; preds = %lor.lhs.false, %entry
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5698
  %gsbase = bitcast %union.gimple_statement_d* %3 to %struct.gimple_statement_base*, !dbg !5699
  %4 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !5700
  %bf.load = load i32, i32* %4, align 8, !dbg !5700
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !5700
  store i32 %bf.lshr, i32* %retval, align 4, !dbg !5701
  br label %return, !dbg !5701

if.else:                                          ; preds = %lor.lhs.false
  %5 = load i32, i32* %code, align 4, !dbg !5702
  %cmp2 = icmp eq i32 %5, 8, !dbg !5704
  br i1 %cmp2, label %if.then3, label %if.else4, !dbg !5705

if.then3:                                         ; preds = %if.else
  store i32 59, i32* %retval, align 4, !dbg !5706
  br label %return, !dbg !5706

if.else4:                                         ; preds = %if.else
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.26, i64 0, i64 0), i32 1446, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !5707
  br label %if.end

if.end:                                           ; preds = %if.else4
  br label %if.end5

if.end5:                                          ; preds = %if.end
  store i32 0, i32* %retval, align 4, !dbg !5708
  br label %return, !dbg !5708

return:                                           ; preds = %if.end5, %if.then3, %if.then
  %6 = load i32, i32* %retval, align 4, !dbg !5709
  ret i32 %6, !dbg !5709
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @get_gimple_rhs_class(i32 %code) #0 !dbg !5710 {
entry:
  %code.addr = alloca i32, align 4
  store i32 %code, i32* %code.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %code.addr, metadata !5713, metadata !DIExpression()), !dbg !5714
  %0 = load i32, i32* %code.addr, align 4, !dbg !5715
  %idxprom = sext i32 %0 to i64, !dbg !5716
  %arrayidx = getelementptr inbounds [0 x i8], [0 x i8]* @gimple_rhs_class_table, i64 0, i64 %idxprom, !dbg !5716
  %1 = load i8, i8* %arrayidx, align 1, !dbg !5716
  %conv = zext i8 %1 to i32, !dbg !5717
  ret i32 %conv, !dbg !5718
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_op(%union.gimple_statement_d* %gs, i32 %i) #0 !dbg !5719 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %i.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5722, metadata !DIExpression()), !dbg !5723
  store i32 %i, i32* %i.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %i.addr, metadata !5724, metadata !DIExpression()), !dbg !5725
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5726
  %call = call zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %0), !dbg !5728
  %tobool = icmp ne i8 %call, 0, !dbg !5728
  br i1 %tobool, label %if.then, label %if.else, !dbg !5729

if.then:                                          ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5730
  %call1 = call %union.tree_node** @gimple_ops(%union.gimple_statement_d* %1), !dbg !5732
  %2 = load i32, i32* %i.addr, align 4, !dbg !5733
  %idxprom = zext i32 %2 to i64, !dbg !5732
  %arrayidx = getelementptr inbounds %union.tree_node*, %union.tree_node** %call1, i64 %idxprom, !dbg !5732
  %3 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !5732
  store %union.tree_node* %3, %union.tree_node** %retval, align 8, !dbg !5734
  br label %return, !dbg !5734

if.else:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !5735
  br label %return, !dbg !5735

return:                                           ; preds = %if.else, %if.then
  %4 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !5736
  ret %union.tree_node* %4, !dbg !5736
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %g) #0 !dbg !5737 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !5740, metadata !DIExpression()), !dbg !5741
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !5742
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !5743
  %cmp = icmp uge i32 %call, 1, !dbg !5744
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !5745

land.rhs:                                         ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !5746
  %call1 = call i32 @gimple_code(%union.gimple_statement_d* %1), !dbg !5747
  %cmp2 = icmp ule i32 %call1, 9, !dbg !5748
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %2 = phi i1 [ false, %entry ], [ %cmp2, %land.rhs ], !dbg !5749
  %land.ext = zext i1 %2 to i32, !dbg !5745
  %conv = trunc i32 %land.ext to i8, !dbg !5743
  ret i8 %conv, !dbg !5750
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @gimple_ops(%union.gimple_statement_d* %gs) #0 !dbg !5751 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %off = alloca i64, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5754, metadata !DIExpression()), !dbg !5755
  call void @llvm.dbg.declare(metadata i64* %off, metadata !5756, metadata !DIExpression()), !dbg !5757
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5758
  %call = call i32 @gimple_statement_structure(%union.gimple_statement_d* %0), !dbg !5759
  %idxprom = zext i32 %call to i64, !dbg !5760
  %arrayidx = getelementptr inbounds [0 x i64], [0 x i64]* @gimple_ops_offset_, i64 0, i64 %idxprom, !dbg !5760
  %1 = load i64, i64* %arrayidx, align 8, !dbg !5760
  store i64 %1, i64* %off, align 8, !dbg !5761
  %2 = load i64, i64* %off, align 8, !dbg !5762
  %cmp = icmp ne i64 %2, 0, !dbg !5762
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !5762

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.26, i64 0, i64 0), i32 1622, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !5762
  br label %cond.end, !dbg !5762

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5762

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !5762
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5763
  %4 = bitcast %union.gimple_statement_d* %3 to i8*, !dbg !5764
  %5 = load i64, i64* %off, align 8, !dbg !5765
  %add.ptr = getelementptr inbounds i8, i8* %4, i64 %5, !dbg !5766
  %6 = bitcast i8* %add.ptr to %union.tree_node**, !dbg !5767
  ret %union.tree_node** %6, !dbg !5768
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_statement_structure(%union.gimple_statement_d* %gs) #0 !dbg !5769 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5772, metadata !DIExpression()), !dbg !5773
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5774
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !5775
  %call1 = call i32 @gss_for_code(i32 %call), !dbg !5776
  ret i32 %call1, !dbg !5777
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gss_for_code(i32 %code) #0 !dbg !5778 {
entry:
  %code.addr = alloca i32, align 4
  store i32 %code, i32* %code.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %code.addr, metadata !5781, metadata !DIExpression()), !dbg !5782
  %0 = load i32, i32* %code.addr, align 4, !dbg !5783
  %idxprom = zext i32 %0 to i64, !dbg !5784
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @gss_for_code_, i64 0, i64 %idxprom, !dbg !5784
  %1 = load i32, i32* %arrayidx, align 4, !dbg !5784
  ret i32 %1, !dbg !5785
}

declare dso_local i8* @xcalloc(i64, i64) #2

declare dso_local void @cgraph_remove_function_insertion_hook(%struct.cgraph_node_hook_list*) #2

declare dso_local void @ipa_update_after_lto_read() #2

declare dso_local i32 @cgraph_postorder(%struct.cgraph_node**) #2

; Function Attrs: noinline nounwind uwtable
define internal void @cgraph_decide_inlining_of_small_functions() #0 !dbg !5786 {
entry:
  %node = alloca %struct.cgraph_node*, align 8
  %edge = alloca %struct.cgraph_edge*, align 8
  %failed_reason = alloca i32, align 4
  %heap = alloca %struct.fibheap*, align 8
  %updated_nodes = alloca %struct.bitmap_head_def*, align 8
  %min_size = alloca i32, align 4
  %max_size = alloca i32, align 4
  %new_indirect_edges = alloca %struct.VEC_cgraph_edge_p_heap*, align 8
  %old_size = alloca i32, align 4
  %where = alloca %struct.cgraph_node*, align 8
  %growth = alloca i32, align 4
  %not_good = alloca i32, align 4
  %callee219 = alloca %struct.cgraph_node*, align 8
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %node, metadata !5787, metadata !DIExpression()), !dbg !5788
  call void @llvm.dbg.declare(metadata %struct.cgraph_edge** %edge, metadata !5789, metadata !DIExpression()), !dbg !5790
  call void @llvm.dbg.declare(metadata i32* %failed_reason, metadata !5791, metadata !DIExpression()), !dbg !5792
  call void @llvm.dbg.declare(metadata %struct.fibheap** %heap, metadata !5793, metadata !DIExpression()), !dbg !5794
  %call = call %struct.fibheap* @fibheap_new(), !dbg !5795
  store %struct.fibheap* %call, %struct.fibheap** %heap, align 8, !dbg !5794
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %updated_nodes, metadata !5796, metadata !DIExpression()), !dbg !5797
  %call1 = call %struct.bitmap_head_def* @bitmap_obstack_alloc_stat(%struct.bitmap_obstack* null), !dbg !5798
  store %struct.bitmap_head_def* %call1, %struct.bitmap_head_def** %updated_nodes, align 8, !dbg !5797
  call void @llvm.dbg.declare(metadata i32* %min_size, metadata !5799, metadata !DIExpression()), !dbg !5800
  call void @llvm.dbg.declare(metadata i32* %max_size, metadata !5801, metadata !DIExpression()), !dbg !5802
  call void @llvm.dbg.declare(metadata %struct.VEC_cgraph_edge_p_heap** %new_indirect_edges, metadata !5803, metadata !DIExpression()), !dbg !5804
  store %struct.VEC_cgraph_edge_p_heap* null, %struct.VEC_cgraph_edge_p_heap** %new_indirect_edges, align 8, !dbg !5804
  %0 = load i32, i32* @flag_indirect_inlining, align 4, !dbg !5805
  %tobool = icmp ne i32 %0, 0, !dbg !5805
  br i1 %tobool, label %if.then, label %if.end, !dbg !5807

if.then:                                          ; preds = %entry
  %call2 = call %struct.VEC_cgraph_edge_p_heap* @VEC_cgraph_edge_p_heap_alloc(i32 8), !dbg !5808
  store %struct.VEC_cgraph_edge_p_heap* %call2, %struct.VEC_cgraph_edge_p_heap** %new_indirect_edges, align 8, !dbg !5809
  br label %if.end, !dbg !5810

if.end:                                           ; preds = %if.then, %entry
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5811
  %tobool3 = icmp ne %struct._IO_FILE* %1, null, !dbg !5811
  br i1 %tobool3, label %if.then4, label %if.end6, !dbg !5813

if.then4:                                         ; preds = %if.end
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5814
  %call5 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %2, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.38, i64 0, i64 0)), !dbg !5815
  br label %if.end6, !dbg !5815

if.end6:                                          ; preds = %if.then4, %if.end
  %3 = load %struct.cgraph_node*, %struct.cgraph_node** @cgraph_nodes, align 8, !dbg !5816
  store %struct.cgraph_node* %3, %struct.cgraph_node** %node, align 8, !dbg !5818
  br label %for.cond, !dbg !5819

for.cond:                                         ; preds = %for.inc39, %if.end6
  %4 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !5820
  %tobool7 = icmp ne %struct.cgraph_node* %4, null, !dbg !5822
  br i1 %tobool7, label %for.body, label %for.end40, !dbg !5822

for.body:                                         ; preds = %for.cond
  %5 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !5823
  %local = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %5, i32 0, i32 18, !dbg !5826
  %inlinable = getelementptr inbounds %struct.cgraph_local_info, %struct.cgraph_local_info* %local, i32 0, i32 2, !dbg !5827
  %bf.load = load i8, i8* %inlinable, align 8, !dbg !5827
  %bf.lshr = lshr i8 %bf.load, 3, !dbg !5827
  %bf.clear = and i8 %bf.lshr, 1, !dbg !5827
  %bf.cast = zext i8 %bf.clear to i32, !dbg !5827
  %tobool8 = icmp ne i32 %bf.cast, 0, !dbg !5823
  br i1 %tobool8, label %lor.lhs.false, label %if.then17, !dbg !5828

lor.lhs.false:                                    ; preds = %for.body
  %6 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !5829
  %callers = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %6, i32 0, i32 2, !dbg !5830
  %7 = load %struct.cgraph_edge*, %struct.cgraph_edge** %callers, align 8, !dbg !5830
  %tobool9 = icmp ne %struct.cgraph_edge* %7, null, !dbg !5829
  br i1 %tobool9, label %lor.lhs.false10, label %if.then17, !dbg !5831

lor.lhs.false10:                                  ; preds = %lor.lhs.false
  %8 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !5832
  %local11 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %8, i32 0, i32 18, !dbg !5833
  %disregard_inline_limits = getelementptr inbounds %struct.cgraph_local_info, %struct.cgraph_local_info* %local11, i32 0, i32 2, !dbg !5834
  %bf.load12 = load i8, i8* %disregard_inline_limits, align 8, !dbg !5834
  %bf.lshr13 = lshr i8 %bf.load12, 4, !dbg !5834
  %bf.clear14 = and i8 %bf.lshr13, 1, !dbg !5834
  %bf.cast15 = zext i8 %bf.clear14 to i32, !dbg !5834
  %tobool16 = icmp ne i32 %bf.cast15, 0, !dbg !5832
  br i1 %tobool16, label %if.then17, label %if.end18, !dbg !5835

if.then17:                                        ; preds = %lor.lhs.false10, %lor.lhs.false, %for.body
  br label %for.inc39, !dbg !5836

if.end18:                                         ; preds = %lor.lhs.false10
  %9 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5837
  %tobool19 = icmp ne %struct._IO_FILE* %9, null, !dbg !5837
  br i1 %tobool19, label %if.then20, label %if.end23, !dbg !5839

if.then20:                                        ; preds = %if.end18
  %10 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5840
  %11 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !5841
  %call21 = call i8* @cgraph_node_name(%struct.cgraph_node* %11), !dbg !5842
  %call22 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %10, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.14, i64 0, i64 0), i8* %call21), !dbg !5843
  br label %if.end23, !dbg !5843

if.end23:                                         ; preds = %if.then20, %if.end18
  %12 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !5844
  %global = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %12, i32 0, i32 19, !dbg !5845
  %estimated_growth = getelementptr inbounds %struct.cgraph_global_info, %struct.cgraph_global_info* %global, i32 0, i32 5, !dbg !5846
  store i32 -2147483648, i32* %estimated_growth, align 8, !dbg !5847
  %13 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !5848
  %call24 = call zeroext i8 @cgraph_default_inline_p(%struct.cgraph_node* %13, i32* %failed_reason), !dbg !5850
  %tobool25 = icmp ne i8 %call24, 0, !dbg !5850
  br i1 %tobool25, label %if.end27, label %if.then26, !dbg !5851

if.then26:                                        ; preds = %if.end23
  %14 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !5852
  %15 = load i32, i32* %failed_reason, align 4, !dbg !5854
  call void @cgraph_set_inline_failed(%struct.cgraph_node* %14, i32 %15), !dbg !5855
  br label %for.inc39, !dbg !5856

if.end27:                                         ; preds = %if.end23
  %16 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !5857
  %callers28 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %16, i32 0, i32 2, !dbg !5859
  %17 = load %struct.cgraph_edge*, %struct.cgraph_edge** %callers28, align 8, !dbg !5859
  store %struct.cgraph_edge* %17, %struct.cgraph_edge** %edge, align 8, !dbg !5860
  br label %for.cond29, !dbg !5861

for.cond29:                                       ; preds = %for.inc, %if.end27
  %18 = load %struct.cgraph_edge*, %struct.cgraph_edge** %edge, align 8, !dbg !5862
  %tobool30 = icmp ne %struct.cgraph_edge* %18, null, !dbg !5864
  br i1 %tobool30, label %for.body31, label %for.end, !dbg !5864

for.body31:                                       ; preds = %for.cond29
  %19 = load %struct.cgraph_edge*, %struct.cgraph_edge** %edge, align 8, !dbg !5865
  %inline_failed = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %19, i32 0, i32 9, !dbg !5867
  %20 = load i32, i32* %inline_failed, align 8, !dbg !5867
  %tobool32 = icmp ne i32 %20, 0, !dbg !5865
  br i1 %tobool32, label %if.then33, label %if.end38, !dbg !5868

if.then33:                                        ; preds = %for.body31
  %21 = load %struct.cgraph_edge*, %struct.cgraph_edge** %edge, align 8, !dbg !5869
  %aux = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %21, i32 0, i32 8, !dbg !5869
  %22 = load i8*, i8** %aux, align 8, !dbg !5869
  %tobool34 = icmp ne i8* %22, null, !dbg !5869
  br i1 %tobool34, label %cond.true, label %cond.false, !dbg !5869

cond.true:                                        ; preds = %if.then33
  call void @fancy_abort(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0), i32 935, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !5869
  br label %cond.end, !dbg !5869

cond.false:                                       ; preds = %if.then33
  br label %cond.end, !dbg !5869

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !5869
  %23 = load %struct.fibheap*, %struct.fibheap** %heap, align 8, !dbg !5871
  %24 = load %struct.cgraph_edge*, %struct.cgraph_edge** %edge, align 8, !dbg !5872
  %call35 = call i32 @cgraph_edge_badness(%struct.cgraph_edge* %24), !dbg !5873
  %conv = sext i32 %call35 to i64, !dbg !5873
  %25 = load %struct.cgraph_edge*, %struct.cgraph_edge** %edge, align 8, !dbg !5874
  %26 = bitcast %struct.cgraph_edge* %25 to i8*, !dbg !5874
  %call36 = call %struct.fibnode* @fibheap_insert(%struct.fibheap* %23, i64 %conv, i8* %26), !dbg !5875
  %27 = bitcast %struct.fibnode* %call36 to i8*, !dbg !5875
  %28 = load %struct.cgraph_edge*, %struct.cgraph_edge** %edge, align 8, !dbg !5876
  %aux37 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %28, i32 0, i32 8, !dbg !5877
  store i8* %27, i8** %aux37, align 8, !dbg !5878
  br label %if.end38, !dbg !5879

if.end38:                                         ; preds = %cond.end, %for.body31
  br label %for.inc, !dbg !5867

for.inc:                                          ; preds = %if.end38
  %29 = load %struct.cgraph_edge*, %struct.cgraph_edge** %edge, align 8, !dbg !5880
  %next_caller = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %29, i32 0, i32 4, !dbg !5881
  %30 = load %struct.cgraph_edge*, %struct.cgraph_edge** %next_caller, align 8, !dbg !5881
  store %struct.cgraph_edge* %30, %struct.cgraph_edge** %edge, align 8, !dbg !5882
  br label %for.cond29, !dbg !5883, !llvm.loop !5884

for.end:                                          ; preds = %for.cond29
  br label %for.inc39, !dbg !5886

for.inc39:                                        ; preds = %for.end, %if.then26, %if.then17
  %31 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !5887
  %next = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %31, i32 0, i32 3, !dbg !5888
  %32 = load %struct.cgraph_node*, %struct.cgraph_node** %next, align 8, !dbg !5888
  store %struct.cgraph_node* %32, %struct.cgraph_node** %node, align 8, !dbg !5889
  br label %for.cond, !dbg !5890, !llvm.loop !5891

for.end40:                                        ; preds = %for.cond
  %33 = load i32, i32* @overall_size, align 4, !dbg !5893
  %call41 = call i32 @compute_max_insns(i32 %33), !dbg !5894
  store i32 %call41, i32* %max_size, align 4, !dbg !5895
  %34 = load i32, i32* @overall_size, align 4, !dbg !5896
  store i32 %34, i32* %min_size, align 4, !dbg !5897
  br label %while.cond, !dbg !5898

while.cond:                                       ; preds = %if.end275, %if.end239, %if.then214, %if.end191, %if.end181, %if.end162, %if.end116, %if.then81, %for.end40
  %35 = load i32, i32* @overall_size, align 4, !dbg !5899
  %36 = load i32, i32* %max_size, align 4, !dbg !5900
  %cmp = icmp sle i32 %35, %36, !dbg !5901
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !5902

land.rhs:                                         ; preds = %while.cond
  %37 = load %struct.fibheap*, %struct.fibheap** %heap, align 8, !dbg !5903
  %call43 = call i8* @fibheap_extract_min(%struct.fibheap* %37), !dbg !5904
  %38 = bitcast i8* %call43 to %struct.cgraph_edge*, !dbg !5905
  store %struct.cgraph_edge* %38, %struct.cgraph_edge** %edge, align 8, !dbg !5906
  %tobool44 = icmp ne %struct.cgraph_edge* %38, null, !dbg !5902
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %39 = phi i1 [ false, %while.cond ], [ %tobool44, %land.rhs ], !dbg !5907
  br i1 %39, label %while.body, label %while.end276, !dbg !5898

while.body:                                       ; preds = %land.end
  call void @llvm.dbg.declare(metadata i32* %old_size, metadata !5908, metadata !DIExpression()), !dbg !5910
  %40 = load i32, i32* @overall_size, align 4, !dbg !5911
  store i32 %40, i32* %old_size, align 4, !dbg !5910
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %where, metadata !5912, metadata !DIExpression()), !dbg !5913
  call void @llvm.dbg.declare(metadata i32* %growth, metadata !5914, metadata !DIExpression()), !dbg !5915
  %41 = load %struct.cgraph_edge*, %struct.cgraph_edge** %edge, align 8, !dbg !5916
  %caller = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %41, i32 0, i32 1, !dbg !5917
  %42 = load %struct.cgraph_node*, %struct.cgraph_node** %caller, align 8, !dbg !5917
  %43 = load %struct.cgraph_edge*, %struct.cgraph_edge** %edge, align 8, !dbg !5918
  %callee = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %43, i32 0, i32 2, !dbg !5919
  %44 = load %struct.cgraph_node*, %struct.cgraph_node** %callee, align 8, !dbg !5919
  %call45 = call i32 @cgraph_estimate_size_after_inlining(i32 1, %struct.cgraph_node* %42, %struct.cgraph_node* %44), !dbg !5920
  store i32 %call45, i32* %growth, align 4, !dbg !5915
  call void @llvm.dbg.declare(metadata i32* %not_good, metadata !5921, metadata !DIExpression()), !dbg !5922
  store i32 0, i32* %not_good, align 4, !dbg !5922
  %45 = load %struct.cgraph_edge*, %struct.cgraph_edge** %edge, align 8, !dbg !5923
  %caller46 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %45, i32 0, i32 1, !dbg !5924
  %46 = load %struct.cgraph_node*, %struct.cgraph_node** %caller46, align 8, !dbg !5924
  %global47 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %46, i32 0, i32 19, !dbg !5925
  %size = getelementptr inbounds %struct.cgraph_global_info, %struct.cgraph_global_info* %global47, i32 0, i32 4, !dbg !5926
  %47 = load i32, i32* %size, align 4, !dbg !5926
  %48 = load i32, i32* %growth, align 4, !dbg !5927
  %sub = sub nsw i32 %48, %47, !dbg !5927
  store i32 %sub, i32* %growth, align 4, !dbg !5927
  %49 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5928
  %tobool48 = icmp ne %struct._IO_FILE* %49, null, !dbg !5928
  br i1 %tobool48, label %if.then49, label %if.end71, !dbg !5930

if.then49:                                        ; preds = %while.body
  %50 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5931
  %51 = load %struct.cgraph_edge*, %struct.cgraph_edge** %edge, align 8, !dbg !5933
  %callee50 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %51, i32 0, i32 2, !dbg !5934
  %52 = load %struct.cgraph_node*, %struct.cgraph_node** %callee50, align 8, !dbg !5934
  %call51 = call i8* @cgraph_node_name(%struct.cgraph_node* %52), !dbg !5935
  %53 = load %struct.cgraph_edge*, %struct.cgraph_edge** %edge, align 8, !dbg !5936
  %callee52 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %53, i32 0, i32 2, !dbg !5937
  %54 = load %struct.cgraph_node*, %struct.cgraph_node** %callee52, align 8, !dbg !5937
  %global53 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %54, i32 0, i32 19, !dbg !5938
  %size54 = getelementptr inbounds %struct.cgraph_global_info, %struct.cgraph_global_info* %global53, i32 0, i32 4, !dbg !5939
  %55 = load i32, i32* %size54, align 4, !dbg !5939
  %call55 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %50, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.39, i64 0, i64 0), i8* %call51, i32 %55), !dbg !5940
  %56 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5941
  %57 = load %struct.cgraph_edge*, %struct.cgraph_edge** %edge, align 8, !dbg !5942
  %caller56 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %57, i32 0, i32 1, !dbg !5943
  %58 = load %struct.cgraph_node*, %struct.cgraph_node** %caller56, align 8, !dbg !5943
  %call57 = call i8* @cgraph_node_name(%struct.cgraph_node* %58), !dbg !5944
  %59 = load %struct.cgraph_edge*, %struct.cgraph_edge** %edge, align 8, !dbg !5945
  %call_stmt = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %59, i32 0, i32 7, !dbg !5946
  %60 = load %union.gimple_statement_d*, %union.gimple_statement_d** %call_stmt, align 8, !dbg !5946
  %call58 = call i8* @gimple_filename(%union.gimple_statement_d* %60), !dbg !5947
  %61 = load %struct.cgraph_edge*, %struct.cgraph_edge** %edge, align 8, !dbg !5948
  %call_stmt59 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %61, i32 0, i32 7, !dbg !5949
  %62 = load %union.gimple_statement_d*, %union.gimple_statement_d** %call_stmt59, align 8, !dbg !5949
  %call60 = call i32 @gimple_lineno(%union.gimple_statement_d* %62), !dbg !5950
  %63 = load %struct.cgraph_edge*, %struct.cgraph_edge** %edge, align 8, !dbg !5951
  %callee61 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %63, i32 0, i32 2, !dbg !5952
  %64 = load %struct.cgraph_node*, %struct.cgraph_node** %callee61, align 8, !dbg !5952
  %call62 = call i32 @cgraph_estimate_growth(%struct.cgraph_node* %64), !dbg !5953
  %65 = load %struct.cgraph_edge*, %struct.cgraph_edge** %edge, align 8, !dbg !5954
  %call63 = call i32 @cgraph_edge_badness(%struct.cgraph_edge* %65), !dbg !5955
  %66 = load %struct.cgraph_edge*, %struct.cgraph_edge** %edge, align 8, !dbg !5956
  %frequency = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %66, i32 0, i32 11, !dbg !5957
  %67 = load i32, i32* %frequency, align 8, !dbg !5957
  %conv64 = sitofp i32 %67 to double, !dbg !5956
  %div = fdiv double %conv64, 1.000000e+03, !dbg !5958
  %call65 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %56, i8* getelementptr inbounds ([138 x i8], [138 x i8]* @.str.40, i64 0, i64 0), i8* %call57, i8* %call58, i32 %call60, i32 %call62, i32 %call63, double %div), !dbg !5959
  %68 = load %struct.cgraph_edge*, %struct.cgraph_edge** %edge, align 8, !dbg !5960
  %count = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %68, i32 0, i32 0, !dbg !5962
  %69 = load i64, i64* %count, align 8, !dbg !5962
  %tobool66 = icmp ne i64 %69, 0, !dbg !5960
  br i1 %tobool66, label %if.then67, label %if.end70, !dbg !5963

if.then67:                                        ; preds = %if.then49
  %70 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5964
  %71 = load %struct.cgraph_edge*, %struct.cgraph_edge** %edge, align 8, !dbg !5965
  %count68 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %71, i32 0, i32 0, !dbg !5966
  %72 = load i64, i64* %count68, align 8, !dbg !5966
  %call69 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %70, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.41, i64 0, i64 0), i64 %72), !dbg !5967
  br label %if.end70, !dbg !5967

if.end70:                                         ; preds = %if.then67, %if.then49
  br label %if.end71, !dbg !5968

if.end71:                                         ; preds = %if.end70, %while.body
  %73 = load %struct.cgraph_edge*, %struct.cgraph_edge** %edge, align 8, !dbg !5969
  %aux72 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %73, i32 0, i32 8, !dbg !5969
  %74 = load i8*, i8** %aux72, align 8, !dbg !5969
  %tobool73 = icmp ne i8* %74, null, !dbg !5969
  br i1 %tobool73, label %cond.false75, label %cond.true74, !dbg !5969

cond.true74:                                      ; preds = %if.end71
  call void @fancy_abort(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0), i32 973, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !5969
  br label %cond.end76, !dbg !5969

cond.false75:                                     ; preds = %if.end71
  br label %cond.end76, !dbg !5969

cond.end76:                                       ; preds = %cond.false75, %cond.true74
  %cond77 = phi i32 [ 0, %cond.true74 ], [ 0, %cond.false75 ], !dbg !5969
  %75 = load %struct.cgraph_edge*, %struct.cgraph_edge** %edge, align 8, !dbg !5970
  %aux78 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %75, i32 0, i32 8, !dbg !5971
  store i8* null, i8** %aux78, align 8, !dbg !5972
  %76 = load %struct.cgraph_edge*, %struct.cgraph_edge** %edge, align 8, !dbg !5973
  %inline_failed79 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %76, i32 0, i32 9, !dbg !5975
  %77 = load i32, i32* %inline_failed79, align 8, !dbg !5975
  %tobool80 = icmp ne i32 %77, 0, !dbg !5973
  br i1 %tobool80, label %if.end82, label %if.then81, !dbg !5976

if.then81:                                        ; preds = %cond.end76
  br label %while.cond, !dbg !5977, !llvm.loop !5978

if.end82:                                         ; preds = %cond.end76
  %78 = load %struct.cgraph_edge*, %struct.cgraph_edge** %edge, align 8, !dbg !5980
  %count83 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %78, i32 0, i32 0, !dbg !5982
  %79 = load i64, i64* %count83, align 8, !dbg !5982
  %tobool84 = icmp ne i64 %79, 0, !dbg !5980
  br i1 %tobool84, label %if.end118, label %if.then85, !dbg !5983

if.then85:                                        ; preds = %if.end82
  %80 = load %struct.cgraph_edge*, %struct.cgraph_edge** %edge, align 8, !dbg !5984
  %caller86 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %80, i32 0, i32 1, !dbg !5986
  %81 = load %struct.cgraph_node*, %struct.cgraph_node** %caller86, align 8, !dbg !5986
  store %struct.cgraph_node* %81, %struct.cgraph_node** %where, align 8, !dbg !5987
  br label %while.cond87, !dbg !5988

while.cond87:                                     ; preds = %if.end96, %if.then85
  %82 = load %struct.cgraph_node*, %struct.cgraph_node** %where, align 8, !dbg !5989
  %global88 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %82, i32 0, i32 19, !dbg !5990
  %inlined_to = getelementptr inbounds %struct.cgraph_global_info, %struct.cgraph_global_info* %global88, i32 0, i32 2, !dbg !5991
  %83 = load %struct.cgraph_node*, %struct.cgraph_node** %inlined_to, align 8, !dbg !5991
  %tobool89 = icmp ne %struct.cgraph_node* %83, null, !dbg !5988
  br i1 %tobool89, label %while.body90, label %while.end, !dbg !5988

while.body90:                                     ; preds = %while.cond87
  %84 = load %struct.cgraph_node*, %struct.cgraph_node** %where, align 8, !dbg !5992
  %decl = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %84, i32 0, i32 0, !dbg !5995
  %85 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !5995
  %86 = load %struct.cgraph_edge*, %struct.cgraph_edge** %edge, align 8, !dbg !5996
  %callee91 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %86, i32 0, i32 2, !dbg !5997
  %87 = load %struct.cgraph_node*, %struct.cgraph_node** %callee91, align 8, !dbg !5997
  %decl92 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %87, i32 0, i32 0, !dbg !5998
  %88 = load %union.tree_node*, %union.tree_node** %decl92, align 8, !dbg !5998
  %cmp93 = icmp eq %union.tree_node* %85, %88, !dbg !5999
  br i1 %cmp93, label %if.then95, label %if.end96, !dbg !6000

if.then95:                                        ; preds = %while.body90
  br label %while.end, !dbg !6001

if.end96:                                         ; preds = %while.body90
  %89 = load %struct.cgraph_node*, %struct.cgraph_node** %where, align 8, !dbg !6002
  %callers97 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %89, i32 0, i32 2, !dbg !6003
  %90 = load %struct.cgraph_edge*, %struct.cgraph_edge** %callers97, align 8, !dbg !6003
  %caller98 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %90, i32 0, i32 1, !dbg !6004
  %91 = load %struct.cgraph_node*, %struct.cgraph_node** %caller98, align 8, !dbg !6004
  store %struct.cgraph_node* %91, %struct.cgraph_node** %where, align 8, !dbg !6005
  br label %while.cond87, !dbg !5988, !llvm.loop !6006

while.end:                                        ; preds = %if.then95, %while.cond87
  %92 = load %struct.cgraph_node*, %struct.cgraph_node** %where, align 8, !dbg !6008
  %global99 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %92, i32 0, i32 19, !dbg !6010
  %inlined_to100 = getelementptr inbounds %struct.cgraph_global_info, %struct.cgraph_global_info* %global99, i32 0, i32 2, !dbg !6011
  %93 = load %struct.cgraph_node*, %struct.cgraph_node** %inlined_to100, align 8, !dbg !6011
  %tobool101 = icmp ne %struct.cgraph_node* %93, null, !dbg !6008
  br i1 %tobool101, label %if.then102, label %if.end117, !dbg !6012

if.then102:                                       ; preds = %while.end
  %94 = load %struct.cgraph_edge*, %struct.cgraph_edge** %edge, align 8, !dbg !6013
  %callee103 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %94, i32 0, i32 2, !dbg !6015
  %95 = load %struct.cgraph_node*, %struct.cgraph_node** %callee103, align 8, !dbg !6015
  %local104 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %95, i32 0, i32 18, !dbg !6016
  %disregard_inline_limits105 = getelementptr inbounds %struct.cgraph_local_info, %struct.cgraph_local_info* %local104, i32 0, i32 2, !dbg !6017
  %bf.load106 = load i8, i8* %disregard_inline_limits105, align 8, !dbg !6017
  %bf.lshr107 = lshr i8 %bf.load106, 4, !dbg !6017
  %bf.clear108 = and i8 %bf.lshr107, 1, !dbg !6017
  %bf.cast109 = zext i8 %bf.clear108 to i32, !dbg !6017
  %tobool110 = icmp ne i32 %bf.cast109, 0, !dbg !6013
  %96 = zext i1 %tobool110 to i64, !dbg !6013
  %cond111 = select i1 %tobool110, i32 12, i32 1, !dbg !6013
  %97 = load %struct.cgraph_edge*, %struct.cgraph_edge** %edge, align 8, !dbg !6018
  %inline_failed112 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %97, i32 0, i32 9, !dbg !6019
  store i32 %cond111, i32* %inline_failed112, align 8, !dbg !6020
  %98 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6021
  %tobool113 = icmp ne %struct._IO_FILE* %98, null, !dbg !6021
  br i1 %tobool113, label %if.then114, label %if.end116, !dbg !6023

if.then114:                                       ; preds = %if.then102
  %99 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6024
  %call115 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %99, i8* getelementptr inbounds ([71 x i8], [71 x i8]* @.str.42, i64 0, i64 0)), !dbg !6025
  br label %if.end116, !dbg !6025

if.end116:                                        ; preds = %if.then114, %if.then102
  br label %while.cond, !dbg !6026, !llvm.loop !5978

if.end117:                                        ; preds = %while.end
  br label %if.end118, !dbg !6027

if.end118:                                        ; preds = %if.end117, %if.end82
  %100 = load %struct.cgraph_edge*, %struct.cgraph_edge** %edge, align 8, !dbg !6028
  %call119 = call zeroext i8 @cgraph_maybe_hot_edge_p(%struct.cgraph_edge* %100), !dbg !6030
  %tobool120 = icmp ne i8 %call119, 0, !dbg !6030
  br i1 %tobool120, label %if.end122, label %if.then121, !dbg !6031

if.then121:                                       ; preds = %if.end118
  store i32 13, i32* %not_good, align 4, !dbg !6032
  br label %if.end122, !dbg !6033

if.end122:                                        ; preds = %if.then121, %if.end118
  %101 = load i32, i32* @flag_inline_functions, align 4, !dbg !6034
  %tobool123 = icmp ne i32 %101, 0, !dbg !6034
  br i1 %tobool123, label %if.end131, label %land.lhs.true, !dbg !6036

land.lhs.true:                                    ; preds = %if.end122
  %102 = load %struct.cgraph_edge*, %struct.cgraph_edge** %edge, align 8, !dbg !6037
  %callee124 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %102, i32 0, i32 2, !dbg !6037
  %103 = load %struct.cgraph_node*, %struct.cgraph_node** %callee124, align 8, !dbg !6037
  %decl125 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %103, i32 0, i32 0, !dbg !6037
  %104 = load %union.tree_node*, %union.tree_node** %decl125, align 8, !dbg !6037
  %function_decl = bitcast %union.tree_node* %104 to %struct.tree_function_decl*, !dbg !6037
  %declared_inline_flag = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl, i32 0, i32 5, !dbg !6037
  %bf.load126 = load i32, i32* %declared_inline_flag, align 8, !dbg !6037
  %bf.lshr127 = lshr i32 %bf.load126, 21, !dbg !6037
  %bf.clear128 = and i32 %bf.lshr127, 1, !dbg !6037
  %tobool129 = icmp ne i32 %bf.clear128, 0, !dbg !6037
  br i1 %tobool129, label %if.end131, label %if.then130, !dbg !6038

if.then130:                                       ; preds = %land.lhs.true
  store i32 14, i32* %not_good, align 4, !dbg !6039
  br label %if.end131, !dbg !6040

if.end131:                                        ; preds = %if.then130, %land.lhs.true, %if.end122
  %105 = load %struct.cgraph_edge*, %struct.cgraph_edge** %edge, align 8, !dbg !6041
  %caller132 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %105, i32 0, i32 1, !dbg !6041
  %106 = load %struct.cgraph_node*, %struct.cgraph_node** %caller132, align 8, !dbg !6041
  %decl133 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %106, i32 0, i32 0, !dbg !6041
  %107 = load %union.tree_node*, %union.tree_node** %decl133, align 8, !dbg !6041
  %function_decl134 = bitcast %union.tree_node* %107 to %struct.tree_function_decl*, !dbg !6041
  %f = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl134, i32 0, i32 1, !dbg !6041
  %108 = load %struct.function*, %struct.function** %f, align 8, !dbg !6041
  %call135 = call zeroext i8 @optimize_function_for_size_p(%struct.function* %108), !dbg !6043
  %tobool136 = icmp ne i8 %call135, 0, !dbg !6043
  br i1 %tobool136, label %if.then137, label %if.end138, !dbg !6044

if.then137:                                       ; preds = %if.end131
  store i32 15, i32* %not_good, align 4, !dbg !6045
  br label %if.end138, !dbg !6046

if.end138:                                        ; preds = %if.then137, %if.end131
  %109 = load i32, i32* %not_good, align 4, !dbg !6047
  %tobool139 = icmp ne i32 %109, 0, !dbg !6047
  br i1 %tobool139, label %land.lhs.true140, label %if.end163, !dbg !6049

land.lhs.true140:                                 ; preds = %if.end138
  %110 = load i32, i32* %growth, align 4, !dbg !6050
  %cmp141 = icmp sgt i32 %110, 0, !dbg !6051
  br i1 %cmp141, label %land.lhs.true143, label %if.end163, !dbg !6052

land.lhs.true143:                                 ; preds = %land.lhs.true140
  %111 = load %struct.cgraph_edge*, %struct.cgraph_edge** %edge, align 8, !dbg !6053
  %callee144 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %111, i32 0, i32 2, !dbg !6054
  %112 = load %struct.cgraph_node*, %struct.cgraph_node** %callee144, align 8, !dbg !6054
  %call145 = call i32 @cgraph_estimate_growth(%struct.cgraph_node* %112), !dbg !6055
  %cmp146 = icmp sgt i32 %call145, 0, !dbg !6056
  br i1 %cmp146, label %if.then148, label %if.end163, !dbg !6057

if.then148:                                       ; preds = %land.lhs.true143
  %113 = load %struct.cgraph_edge*, %struct.cgraph_edge** %edge, align 8, !dbg !6058
  %caller149 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %113, i32 0, i32 1, !dbg !6061
  %114 = load %struct.cgraph_node*, %struct.cgraph_node** %caller149, align 8, !dbg !6061
  %115 = load %struct.cgraph_edge*, %struct.cgraph_edge** %edge, align 8, !dbg !6062
  %callee150 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %115, i32 0, i32 2, !dbg !6063
  %116 = load %struct.cgraph_node*, %struct.cgraph_node** %callee150, align 8, !dbg !6063
  %117 = load %struct.cgraph_edge*, %struct.cgraph_edge** %edge, align 8, !dbg !6064
  %inline_failed151 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %117, i32 0, i32 9, !dbg !6065
  %call152 = call zeroext i8 @cgraph_recursive_inlining_p(%struct.cgraph_node* %114, %struct.cgraph_node* %116, i32* %inline_failed151), !dbg !6066
  %tobool153 = icmp ne i8 %call152, 0, !dbg !6066
  br i1 %tobool153, label %if.end162, label %if.then154, !dbg !6067

if.then154:                                       ; preds = %if.then148
  %118 = load i32, i32* %not_good, align 4, !dbg !6068
  %119 = load %struct.cgraph_edge*, %struct.cgraph_edge** %edge, align 8, !dbg !6070
  %inline_failed155 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %119, i32 0, i32 9, !dbg !6071
  store i32 %118, i32* %inline_failed155, align 8, !dbg !6072
  %120 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6073
  %tobool156 = icmp ne %struct._IO_FILE* %120, null, !dbg !6073
  br i1 %tobool156, label %if.then157, label %if.end161, !dbg !6075

if.then157:                                       ; preds = %if.then154
  %121 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6076
  %122 = load %struct.cgraph_edge*, %struct.cgraph_edge** %edge, align 8, !dbg !6077
  %inline_failed158 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %122, i32 0, i32 9, !dbg !6078
  %123 = load i32, i32* %inline_failed158, align 8, !dbg !6078
  %call159 = call i8* @cgraph_inline_failed_string(i32 %123), !dbg !6079
  %call160 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %121, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.43, i64 0, i64 0), i8* %call159), !dbg !6080
  br label %if.end161, !dbg !6080

if.end161:                                        ; preds = %if.then157, %if.then154
  br label %if.end162, !dbg !6081

if.end162:                                        ; preds = %if.end161, %if.then148
  br label %while.cond, !dbg !6082, !llvm.loop !5978

if.end163:                                        ; preds = %land.lhs.true143, %land.lhs.true140, %if.end138
  %124 = load %struct.cgraph_edge*, %struct.cgraph_edge** %edge, align 8, !dbg !6083
  %callee164 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %124, i32 0, i32 2, !dbg !6085
  %125 = load %struct.cgraph_node*, %struct.cgraph_node** %callee164, align 8, !dbg !6085
  %126 = load %struct.cgraph_edge*, %struct.cgraph_edge** %edge, align 8, !dbg !6086
  %inline_failed165 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %126, i32 0, i32 9, !dbg !6087
  %call166 = call zeroext i8 @cgraph_default_inline_p(%struct.cgraph_node* %125, i32* %inline_failed165), !dbg !6088
  %tobool167 = icmp ne i8 %call166, 0, !dbg !6088
  br i1 %tobool167, label %if.end182, label %if.then168, !dbg !6089

if.then168:                                       ; preds = %if.end163
  %127 = load %struct.cgraph_edge*, %struct.cgraph_edge** %edge, align 8, !dbg !6090
  %caller169 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %127, i32 0, i32 1, !dbg !6093
  %128 = load %struct.cgraph_node*, %struct.cgraph_node** %caller169, align 8, !dbg !6093
  %129 = load %struct.cgraph_edge*, %struct.cgraph_edge** %edge, align 8, !dbg !6094
  %callee170 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %129, i32 0, i32 2, !dbg !6095
  %130 = load %struct.cgraph_node*, %struct.cgraph_node** %callee170, align 8, !dbg !6095
  %131 = load %struct.cgraph_edge*, %struct.cgraph_edge** %edge, align 8, !dbg !6096
  %inline_failed171 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %131, i32 0, i32 9, !dbg !6097
  %call172 = call zeroext i8 @cgraph_recursive_inlining_p(%struct.cgraph_node* %128, %struct.cgraph_node* %130, i32* %inline_failed171), !dbg !6098
  %tobool173 = icmp ne i8 %call172, 0, !dbg !6098
  br i1 %tobool173, label %if.end181, label %if.then174, !dbg !6099

if.then174:                                       ; preds = %if.then168
  %132 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6100
  %tobool175 = icmp ne %struct._IO_FILE* %132, null, !dbg !6100
  br i1 %tobool175, label %if.then176, label %if.end180, !dbg !6103

if.then176:                                       ; preds = %if.then174
  %133 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6104
  %134 = load %struct.cgraph_edge*, %struct.cgraph_edge** %edge, align 8, !dbg !6105
  %inline_failed177 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %134, i32 0, i32 9, !dbg !6106
  %135 = load i32, i32* %inline_failed177, align 8, !dbg !6106
  %call178 = call i8* @cgraph_inline_failed_string(i32 %135), !dbg !6107
  %call179 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %133, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.43, i64 0, i64 0), i8* %call178), !dbg !6108
  br label %if.end180, !dbg !6108

if.end180:                                        ; preds = %if.then176, %if.then174
  br label %if.end181, !dbg !6109

if.end181:                                        ; preds = %if.end180, %if.then168
  br label %while.cond, !dbg !6110, !llvm.loop !5978

if.end182:                                        ; preds = %if.end163
  %136 = load %struct.cgraph_edge*, %struct.cgraph_edge** %edge, align 8, !dbg !6111
  %call183 = call zeroext i8 @tree_can_inline_p(%struct.cgraph_edge* %136), !dbg !6113
  %tobool184 = icmp ne i8 %call183, 0, !dbg !6113
  br i1 %tobool184, label %if.end192, label %if.then185, !dbg !6114

if.then185:                                       ; preds = %if.end182
  %137 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6115
  %tobool186 = icmp ne %struct._IO_FILE* %137, null, !dbg !6115
  br i1 %tobool186, label %if.then187, label %if.end191, !dbg !6118

if.then187:                                       ; preds = %if.then185
  %138 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6119
  %139 = load %struct.cgraph_edge*, %struct.cgraph_edge** %edge, align 8, !dbg !6120
  %inline_failed188 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %139, i32 0, i32 9, !dbg !6121
  %140 = load i32, i32* %inline_failed188, align 8, !dbg !6121
  %call189 = call i8* @cgraph_inline_failed_string(i32 %140), !dbg !6122
  %call190 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %138, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.43, i64 0, i64 0), i8* %call189), !dbg !6123
  br label %if.end191, !dbg !6123

if.end191:                                        ; preds = %if.then187, %if.then185
  br label %while.cond, !dbg !6124, !llvm.loop !5978

if.end192:                                        ; preds = %if.end182
  %141 = load %struct.cgraph_edge*, %struct.cgraph_edge** %edge, align 8, !dbg !6125
  %caller193 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %141, i32 0, i32 1, !dbg !6127
  %142 = load %struct.cgraph_node*, %struct.cgraph_node** %caller193, align 8, !dbg !6127
  %143 = load %struct.cgraph_edge*, %struct.cgraph_edge** %edge, align 8, !dbg !6128
  %callee194 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %143, i32 0, i32 2, !dbg !6129
  %144 = load %struct.cgraph_node*, %struct.cgraph_node** %callee194, align 8, !dbg !6129
  %145 = load %struct.cgraph_edge*, %struct.cgraph_edge** %edge, align 8, !dbg !6130
  %inline_failed195 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %145, i32 0, i32 9, !dbg !6131
  %call196 = call zeroext i8 @cgraph_recursive_inlining_p(%struct.cgraph_node* %142, %struct.cgraph_node* %144, i32* %inline_failed195), !dbg !6132
  %tobool197 = icmp ne i8 %call196, 0, !dbg !6132
  br i1 %tobool197, label %if.then198, label %if.else, !dbg !6133

if.then198:                                       ; preds = %if.end192
  %146 = load %struct.cgraph_edge*, %struct.cgraph_edge** %edge, align 8, !dbg !6134
  %caller199 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %146, i32 0, i32 1, !dbg !6136
  %147 = load %struct.cgraph_node*, %struct.cgraph_node** %caller199, align 8, !dbg !6136
  store %struct.cgraph_node* %147, %struct.cgraph_node** %where, align 8, !dbg !6137
  %148 = load %struct.cgraph_node*, %struct.cgraph_node** %where, align 8, !dbg !6138
  %global200 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %148, i32 0, i32 19, !dbg !6140
  %inlined_to201 = getelementptr inbounds %struct.cgraph_global_info, %struct.cgraph_global_info* %global200, i32 0, i32 2, !dbg !6141
  %149 = load %struct.cgraph_node*, %struct.cgraph_node** %inlined_to201, align 8, !dbg !6141
  %tobool202 = icmp ne %struct.cgraph_node* %149, null, !dbg !6138
  br i1 %tobool202, label %if.then203, label %if.end206, !dbg !6142

if.then203:                                       ; preds = %if.then198
  %150 = load %struct.cgraph_node*, %struct.cgraph_node** %where, align 8, !dbg !6143
  %global204 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %150, i32 0, i32 19, !dbg !6144
  %inlined_to205 = getelementptr inbounds %struct.cgraph_global_info, %struct.cgraph_global_info* %global204, i32 0, i32 2, !dbg !6145
  %151 = load %struct.cgraph_node*, %struct.cgraph_node** %inlined_to205, align 8, !dbg !6145
  store %struct.cgraph_node* %151, %struct.cgraph_node** %where, align 8, !dbg !6146
  br label %if.end206, !dbg !6147

if.end206:                                        ; preds = %if.then203, %if.then198
  %152 = load %struct.cgraph_node*, %struct.cgraph_node** %where, align 8, !dbg !6148
  %153 = load i32, i32* @flag_indirect_inlining, align 4, !dbg !6150
  %tobool207 = icmp ne i32 %153, 0, !dbg !6150
  br i1 %tobool207, label %cond.true208, label %cond.false209, !dbg !6150

cond.true208:                                     ; preds = %if.end206
  br label %cond.end210, !dbg !6150

cond.false209:                                    ; preds = %if.end206
  br label %cond.end210, !dbg !6150

cond.end210:                                      ; preds = %cond.false209, %cond.true208
  %cond211 = phi %struct.VEC_cgraph_edge_p_heap** [ %new_indirect_edges, %cond.true208 ], [ null, %cond.false209 ], !dbg !6150
  %call212 = call zeroext i8 @cgraph_decide_recursive_inlining(%struct.cgraph_node* %152, %struct.VEC_cgraph_edge_p_heap** %cond211), !dbg !6151
  %tobool213 = icmp ne i8 %call212, 0, !dbg !6151
  br i1 %tobool213, label %if.end215, label %if.then214, !dbg !6152

if.then214:                                       ; preds = %cond.end210
  br label %while.cond, !dbg !6153, !llvm.loop !5978

if.end215:                                        ; preds = %cond.end210
  %154 = load i32, i32* @flag_indirect_inlining, align 4, !dbg !6154
  %tobool216 = icmp ne i32 %154, 0, !dbg !6154
  br i1 %tobool216, label %if.then217, label %if.end218, !dbg !6156

if.then217:                                       ; preds = %if.end215
  %155 = load %struct.fibheap*, %struct.fibheap** %heap, align 8, !dbg !6157
  %156 = load %struct.VEC_cgraph_edge_p_heap*, %struct.VEC_cgraph_edge_p_heap** %new_indirect_edges, align 8, !dbg !6158
  call void @add_new_edges_to_heap(%struct.fibheap* %155, %struct.VEC_cgraph_edge_p_heap* %156), !dbg !6159
  br label %if.end218, !dbg !6159

if.end218:                                        ; preds = %if.then217, %if.end215
  %157 = load %struct.fibheap*, %struct.fibheap** %heap, align 8, !dbg !6160
  %158 = load %struct.cgraph_node*, %struct.cgraph_node** %where, align 8, !dbg !6161
  %159 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %updated_nodes, align 8, !dbg !6162
  call void @update_callee_keys(%struct.fibheap* %157, %struct.cgraph_node* %158, %struct.bitmap_head_def* %159), !dbg !6163
  br label %if.end246, !dbg !6164

if.else:                                          ; preds = %if.end192
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %callee219, metadata !6165, metadata !DIExpression()), !dbg !6167
  %160 = load %struct.cgraph_edge*, %struct.cgraph_edge** %edge, align 8, !dbg !6168
  %call_stmt_cannot_inline_p = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %160, i32 0, i32 14, !dbg !6170
  %bf.load220 = load i8, i8* %call_stmt_cannot_inline_p, align 2, !dbg !6170
  %bf.lshr221 = lshr i8 %bf.load220, 1, !dbg !6170
  %bf.clear222 = and i8 %bf.lshr221, 1, !dbg !6170
  %bf.cast223 = zext i8 %bf.clear222 to i32, !dbg !6170
  %tobool224 = icmp ne i32 %bf.cast223, 0, !dbg !6168
  br i1 %tobool224, label %if.then231, label %lor.lhs.false225, !dbg !6171

lor.lhs.false225:                                 ; preds = %if.else
  %161 = load %struct.cgraph_edge*, %struct.cgraph_edge** %edge, align 8, !dbg !6172
  %caller226 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %161, i32 0, i32 1, !dbg !6173
  %162 = load %struct.cgraph_node*, %struct.cgraph_node** %caller226, align 8, !dbg !6173
  %163 = load %struct.cgraph_edge*, %struct.cgraph_edge** %edge, align 8, !dbg !6174
  %callee227 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %163, i32 0, i32 2, !dbg !6175
  %164 = load %struct.cgraph_node*, %struct.cgraph_node** %callee227, align 8, !dbg !6175
  %165 = load %struct.cgraph_edge*, %struct.cgraph_edge** %edge, align 8, !dbg !6176
  %inline_failed228 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %165, i32 0, i32 9, !dbg !6177
  %call229 = call zeroext i8 @cgraph_check_inline_limits(%struct.cgraph_node* %162, %struct.cgraph_node* %164, i32* %inline_failed228, i8 zeroext 1), !dbg !6178
  %tobool230 = icmp ne i8 %call229, 0, !dbg !6178
  br i1 %tobool230, label %if.end240, label %if.then231, !dbg !6179

if.then231:                                       ; preds = %lor.lhs.false225, %if.else
  %166 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6180
  %tobool232 = icmp ne %struct._IO_FILE* %166, null, !dbg !6180
  br i1 %tobool232, label %if.then233, label %if.end239, !dbg !6183

if.then233:                                       ; preds = %if.then231
  %167 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6184
  %168 = load %struct.cgraph_edge*, %struct.cgraph_edge** %edge, align 8, !dbg !6185
  %caller234 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %168, i32 0, i32 1, !dbg !6186
  %169 = load %struct.cgraph_node*, %struct.cgraph_node** %caller234, align 8, !dbg !6186
  %call235 = call i8* @cgraph_node_name(%struct.cgraph_node* %169), !dbg !6187
  %170 = load %struct.cgraph_edge*, %struct.cgraph_edge** %edge, align 8, !dbg !6188
  %inline_failed236 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %170, i32 0, i32 9, !dbg !6189
  %171 = load i32, i32* %inline_failed236, align 8, !dbg !6189
  %call237 = call i8* @cgraph_inline_failed_string(i32 %171), !dbg !6190
  %call238 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %167, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.44, i64 0, i64 0), i8* %call235, i8* %call237), !dbg !6191
  br label %if.end239, !dbg !6191

if.end239:                                        ; preds = %if.then233, %if.then231
  br label %while.cond, !dbg !6192, !llvm.loop !5978

if.end240:                                        ; preds = %lor.lhs.false225
  %172 = load %struct.cgraph_edge*, %struct.cgraph_edge** %edge, align 8, !dbg !6193
  %callee241 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %172, i32 0, i32 2, !dbg !6194
  %173 = load %struct.cgraph_node*, %struct.cgraph_node** %callee241, align 8, !dbg !6194
  store %struct.cgraph_node* %173, %struct.cgraph_node** %callee219, align 8, !dbg !6195
  %174 = load %struct.cgraph_edge*, %struct.cgraph_edge** %edge, align 8, !dbg !6196
  %call242 = call zeroext i8 @cgraph_mark_inline_edge(%struct.cgraph_edge* %174, i8 zeroext 1, %struct.VEC_cgraph_edge_p_heap** %new_indirect_edges), !dbg !6197
  %175 = load i32, i32* @flag_indirect_inlining, align 4, !dbg !6198
  %tobool243 = icmp ne i32 %175, 0, !dbg !6198
  br i1 %tobool243, label %if.then244, label %if.end245, !dbg !6200

if.then244:                                       ; preds = %if.end240
  %176 = load %struct.fibheap*, %struct.fibheap** %heap, align 8, !dbg !6201
  %177 = load %struct.VEC_cgraph_edge_p_heap*, %struct.VEC_cgraph_edge_p_heap** %new_indirect_edges, align 8, !dbg !6202
  call void @add_new_edges_to_heap(%struct.fibheap* %176, %struct.VEC_cgraph_edge_p_heap* %177), !dbg !6203
  br label %if.end245, !dbg !6203

if.end245:                                        ; preds = %if.then244, %if.end240
  %178 = load %struct.fibheap*, %struct.fibheap** %heap, align 8, !dbg !6204
  %179 = load %struct.cgraph_node*, %struct.cgraph_node** %callee219, align 8, !dbg !6205
  %180 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %updated_nodes, align 8, !dbg !6206
  call void @update_callee_keys(%struct.fibheap* %178, %struct.cgraph_node* %179, %struct.bitmap_head_def* %180), !dbg !6207
  br label %if.end246

if.end246:                                        ; preds = %if.end245, %if.end218
  %181 = load %struct.cgraph_edge*, %struct.cgraph_edge** %edge, align 8, !dbg !6208
  %caller247 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %181, i32 0, i32 1, !dbg !6209
  %182 = load %struct.cgraph_node*, %struct.cgraph_node** %caller247, align 8, !dbg !6209
  store %struct.cgraph_node* %182, %struct.cgraph_node** %where, align 8, !dbg !6210
  %183 = load %struct.cgraph_node*, %struct.cgraph_node** %where, align 8, !dbg !6211
  %global248 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %183, i32 0, i32 19, !dbg !6213
  %inlined_to249 = getelementptr inbounds %struct.cgraph_global_info, %struct.cgraph_global_info* %global248, i32 0, i32 2, !dbg !6214
  %184 = load %struct.cgraph_node*, %struct.cgraph_node** %inlined_to249, align 8, !dbg !6214
  %tobool250 = icmp ne %struct.cgraph_node* %184, null, !dbg !6211
  br i1 %tobool250, label %if.then251, label %if.end254, !dbg !6215

if.then251:                                       ; preds = %if.end246
  %185 = load %struct.cgraph_node*, %struct.cgraph_node** %where, align 8, !dbg !6216
  %global252 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %185, i32 0, i32 19, !dbg !6217
  %inlined_to253 = getelementptr inbounds %struct.cgraph_global_info, %struct.cgraph_global_info* %global252, i32 0, i32 2, !dbg !6218
  %186 = load %struct.cgraph_node*, %struct.cgraph_node** %inlined_to253, align 8, !dbg !6218
  store %struct.cgraph_node* %186, %struct.cgraph_node** %where, align 8, !dbg !6219
  br label %if.end254, !dbg !6220

if.end254:                                        ; preds = %if.then251, %if.end246
  %187 = load %struct.fibheap*, %struct.fibheap** %heap, align 8, !dbg !6221
  %188 = load %struct.cgraph_node*, %struct.cgraph_node** %where, align 8, !dbg !6222
  %189 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %updated_nodes, align 8, !dbg !6223
  call void @update_caller_keys(%struct.fibheap* %187, %struct.cgraph_node* %188, %struct.bitmap_head_def* %189), !dbg !6224
  %190 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %updated_nodes, align 8, !dbg !6225
  call void @bitmap_clear(%struct.bitmap_head_def* %190), !dbg !6226
  %191 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6227
  %tobool255 = icmp ne %struct._IO_FILE* %191, null, !dbg !6227
  br i1 %tobool255, label %if.then256, label %if.end266, !dbg !6229

if.then256:                                       ; preds = %if.end254
  %192 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6230
  %193 = load %struct.cgraph_edge*, %struct.cgraph_edge** %edge, align 8, !dbg !6232
  %caller257 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %193, i32 0, i32 1, !dbg !6233
  %194 = load %struct.cgraph_node*, %struct.cgraph_node** %caller257, align 8, !dbg !6233
  %call258 = call i8* @cgraph_node_name(%struct.cgraph_node* %194), !dbg !6234
  %195 = load %struct.cgraph_edge*, %struct.cgraph_edge** %edge, align 8, !dbg !6235
  %caller259 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %195, i32 0, i32 1, !dbg !6236
  %196 = load %struct.cgraph_node*, %struct.cgraph_node** %caller259, align 8, !dbg !6236
  %global260 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %196, i32 0, i32 19, !dbg !6237
  %time = getelementptr inbounds %struct.cgraph_global_info, %struct.cgraph_global_info* %global260, i32 0, i32 3, !dbg !6238
  %197 = load i32, i32* %time, align 8, !dbg !6238
  %198 = load %struct.cgraph_edge*, %struct.cgraph_edge** %edge, align 8, !dbg !6239
  %caller261 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %198, i32 0, i32 1, !dbg !6240
  %199 = load %struct.cgraph_node*, %struct.cgraph_node** %caller261, align 8, !dbg !6240
  %global262 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %199, i32 0, i32 19, !dbg !6241
  %size263 = getelementptr inbounds %struct.cgraph_global_info, %struct.cgraph_global_info* %global262, i32 0, i32 4, !dbg !6242
  %200 = load i32, i32* %size263, align 4, !dbg !6242
  %201 = load i32, i32* @overall_size, align 4, !dbg !6243
  %202 = load i32, i32* %old_size, align 4, !dbg !6244
  %sub264 = sub nsw i32 %201, %202, !dbg !6245
  %call265 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %192, i8* getelementptr inbounds ([76 x i8], [76 x i8]* @.str.45, i64 0, i64 0), i8* %call258, i32 %197, i32 %200, i32 %sub264), !dbg !6246
  br label %if.end266, !dbg !6247

if.end266:                                        ; preds = %if.then256, %if.end254
  %203 = load i32, i32* %min_size, align 4, !dbg !6248
  %204 = load i32, i32* @overall_size, align 4, !dbg !6250
  %cmp267 = icmp sgt i32 %203, %204, !dbg !6251
  br i1 %cmp267, label %if.then269, label %if.end275, !dbg !6252

if.then269:                                       ; preds = %if.end266
  %205 = load i32, i32* @overall_size, align 4, !dbg !6253
  store i32 %205, i32* %min_size, align 4, !dbg !6255
  %206 = load i32, i32* %min_size, align 4, !dbg !6256
  %call270 = call i32 @compute_max_insns(i32 %206), !dbg !6257
  store i32 %call270, i32* %max_size, align 4, !dbg !6258
  %207 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6259
  %tobool271 = icmp ne %struct._IO_FILE* %207, null, !dbg !6259
  br i1 %tobool271, label %if.then272, label %if.end274, !dbg !6261

if.then272:                                       ; preds = %if.then269
  %208 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6262
  %209 = load i32, i32* %min_size, align 4, !dbg !6263
  %call273 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %208, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.46, i64 0, i64 0), i32 %209), !dbg !6264
  br label %if.end274, !dbg !6264

if.end274:                                        ; preds = %if.then272, %if.then269
  br label %if.end275, !dbg !6265

if.end275:                                        ; preds = %if.end274, %if.end266
  br label %while.cond, !dbg !5898, !llvm.loop !5978

while.end276:                                     ; preds = %land.end
  br label %while.cond277, !dbg !6266

while.cond277:                                    ; preds = %if.end308, %while.end276
  %210 = load %struct.fibheap*, %struct.fibheap** %heap, align 8, !dbg !6267
  %call278 = call i8* @fibheap_extract_min(%struct.fibheap* %210), !dbg !6268
  %211 = bitcast i8* %call278 to %struct.cgraph_edge*, !dbg !6269
  store %struct.cgraph_edge* %211, %struct.cgraph_edge** %edge, align 8, !dbg !6270
  %cmp279 = icmp ne %struct.cgraph_edge* %211, null, !dbg !6271
  br i1 %cmp279, label %while.body281, label %while.end309, !dbg !6266

while.body281:                                    ; preds = %while.cond277
  %212 = load %struct.cgraph_edge*, %struct.cgraph_edge** %edge, align 8, !dbg !6272
  %aux282 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %212, i32 0, i32 8, !dbg !6272
  %213 = load i8*, i8** %aux282, align 8, !dbg !6272
  %tobool283 = icmp ne i8* %213, null, !dbg !6272
  br i1 %tobool283, label %cond.false285, label %cond.true284, !dbg !6272

cond.true284:                                     ; preds = %while.body281
  call void @fancy_abort(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0), i32 1117, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !6272
  br label %cond.end286, !dbg !6272

cond.false285:                                    ; preds = %while.body281
  br label %cond.end286, !dbg !6272

cond.end286:                                      ; preds = %cond.false285, %cond.true284
  %cond287 = phi i32 [ 0, %cond.true284 ], [ 0, %cond.false285 ], !dbg !6272
  %214 = load %struct.cgraph_edge*, %struct.cgraph_edge** %edge, align 8, !dbg !6274
  %aux288 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %214, i32 0, i32 8, !dbg !6275
  store i8* null, i8** %aux288, align 8, !dbg !6276
  %215 = load %struct.cgraph_edge*, %struct.cgraph_edge** %edge, align 8, !dbg !6277
  %callee289 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %215, i32 0, i32 2, !dbg !6279
  %216 = load %struct.cgraph_node*, %struct.cgraph_node** %callee289, align 8, !dbg !6279
  %local290 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %216, i32 0, i32 18, !dbg !6280
  %disregard_inline_limits291 = getelementptr inbounds %struct.cgraph_local_info, %struct.cgraph_local_info* %local290, i32 0, i32 2, !dbg !6281
  %bf.load292 = load i8, i8* %disregard_inline_limits291, align 8, !dbg !6281
  %bf.lshr293 = lshr i8 %bf.load292, 4, !dbg !6281
  %bf.clear294 = and i8 %bf.lshr293, 1, !dbg !6281
  %bf.cast295 = zext i8 %bf.clear294 to i32, !dbg !6281
  %tobool296 = icmp ne i32 %bf.cast295, 0, !dbg !6277
  br i1 %tobool296, label %if.end308, label %land.lhs.true297, !dbg !6282

land.lhs.true297:                                 ; preds = %cond.end286
  %217 = load %struct.cgraph_edge*, %struct.cgraph_edge** %edge, align 8, !dbg !6283
  %inline_failed298 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %217, i32 0, i32 9, !dbg !6284
  %218 = load i32, i32* %inline_failed298, align 8, !dbg !6284
  %tobool299 = icmp ne i32 %218, 0, !dbg !6283
  br i1 %tobool299, label %land.lhs.true300, label %if.end308, !dbg !6285

land.lhs.true300:                                 ; preds = %land.lhs.true297
  %219 = load %struct.cgraph_edge*, %struct.cgraph_edge** %edge, align 8, !dbg !6286
  %caller301 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %219, i32 0, i32 1, !dbg !6287
  %220 = load %struct.cgraph_node*, %struct.cgraph_node** %caller301, align 8, !dbg !6287
  %221 = load %struct.cgraph_edge*, %struct.cgraph_edge** %edge, align 8, !dbg !6288
  %callee302 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %221, i32 0, i32 2, !dbg !6289
  %222 = load %struct.cgraph_node*, %struct.cgraph_node** %callee302, align 8, !dbg !6289
  %223 = load %struct.cgraph_edge*, %struct.cgraph_edge** %edge, align 8, !dbg !6290
  %inline_failed303 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %223, i32 0, i32 9, !dbg !6291
  %call304 = call zeroext i8 @cgraph_recursive_inlining_p(%struct.cgraph_node* %220, %struct.cgraph_node* %222, i32* %inline_failed303), !dbg !6292
  %tobool305 = icmp ne i8 %call304, 0, !dbg !6292
  br i1 %tobool305, label %if.end308, label %if.then306, !dbg !6293

if.then306:                                       ; preds = %land.lhs.true300
  %224 = load %struct.cgraph_edge*, %struct.cgraph_edge** %edge, align 8, !dbg !6294
  %inline_failed307 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %224, i32 0, i32 9, !dbg !6295
  store i32 11, i32* %inline_failed307, align 8, !dbg !6296
  br label %if.end308, !dbg !6294

if.end308:                                        ; preds = %if.then306, %land.lhs.true300, %land.lhs.true297, %cond.end286
  br label %while.cond277, !dbg !6266, !llvm.loop !6297

while.end309:                                     ; preds = %while.cond277
  %225 = load %struct.VEC_cgraph_edge_p_heap*, %struct.VEC_cgraph_edge_p_heap** %new_indirect_edges, align 8, !dbg !6299
  %tobool310 = icmp ne %struct.VEC_cgraph_edge_p_heap* %225, null, !dbg !6299
  br i1 %tobool310, label %if.then311, label %if.end312, !dbg !6301

if.then311:                                       ; preds = %while.end309
  call void @VEC_cgraph_edge_p_heap_free(%struct.VEC_cgraph_edge_p_heap** %new_indirect_edges), !dbg !6302
  br label %if.end312, !dbg !6302

if.end312:                                        ; preds = %if.then311, %while.end309
  %226 = load %struct.fibheap*, %struct.fibheap** %heap, align 8, !dbg !6303
  call void @fibheap_delete(%struct.fibheap* %226), !dbg !6304
  %227 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %updated_nodes, align 8, !dbg !6305
  call void @bitmap_obstack_free(%struct.bitmap_head_def* %227), !dbg !6305
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** %updated_nodes, align 8, !dbg !6305
  ret void, !dbg !6306
}

declare dso_local void @free_all_ipa_structures_after_iinln() #2

declare dso_local void @free(i8*) #2

declare dso_local %struct.fibheap* @fibheap_new() #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.VEC_cgraph_edge_p_heap* @VEC_cgraph_edge_p_heap_alloc(i32 %alloc_) #0 !dbg !6307 {
entry:
  %alloc_.addr = alloca i32, align 4
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !6310, metadata !DIExpression()), !dbg !6311
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !6311
  %call = call i8* @vec_heap_p_reserve_exact(i8* null, i32 %0), !dbg !6311
  %1 = bitcast i8* %call to %struct.VEC_cgraph_edge_p_heap*, !dbg !6311
  ret %struct.VEC_cgraph_edge_p_heap* %1, !dbg !6311
}

; Function Attrs: noinline nounwind uwtable
define internal void @cgraph_set_inline_failed(%struct.cgraph_node* %node, i32 %reason) #0 !dbg !6312 {
entry:
  %node.addr = alloca %struct.cgraph_node*, align 8
  %reason.addr = alloca i32, align 4
  %e = alloca %struct.cgraph_edge*, align 8
  store %struct.cgraph_node* %node, %struct.cgraph_node** %node.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %node.addr, metadata !6315, metadata !DIExpression()), !dbg !6316
  store i32 %reason, i32* %reason.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %reason.addr, metadata !6317, metadata !DIExpression()), !dbg !6318
  call void @llvm.dbg.declare(metadata %struct.cgraph_edge** %e, metadata !6319, metadata !DIExpression()), !dbg !6320
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6321
  %tobool = icmp ne %struct._IO_FILE* %0, null, !dbg !6321
  br i1 %tobool, label %if.then, label %if.end, !dbg !6323

if.then:                                          ; preds = %entry
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6324
  %2 = load i32, i32* %reason.addr, align 4, !dbg !6325
  %call = call i8* @cgraph_inline_failed_string(i32 %2), !dbg !6326
  %call1 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.47, i64 0, i64 0), i8* %call), !dbg !6327
  br label %if.end, !dbg !6327

if.end:                                           ; preds = %if.then, %entry
  %3 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !6328
  %callers = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %3, i32 0, i32 2, !dbg !6330
  %4 = load %struct.cgraph_edge*, %struct.cgraph_edge** %callers, align 8, !dbg !6330
  store %struct.cgraph_edge* %4, %struct.cgraph_edge** %e, align 8, !dbg !6331
  br label %for.cond, !dbg !6332

for.cond:                                         ; preds = %for.inc, %if.end
  %5 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !6333
  %tobool2 = icmp ne %struct.cgraph_edge* %5, null, !dbg !6335
  br i1 %tobool2, label %for.body, label %for.end, !dbg !6335

for.body:                                         ; preds = %for.cond
  %6 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !6336
  %inline_failed = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %6, i32 0, i32 9, !dbg !6338
  %7 = load i32, i32* %inline_failed, align 8, !dbg !6338
  %tobool3 = icmp ne i32 %7, 0, !dbg !6336
  br i1 %tobool3, label %if.then4, label %if.end6, !dbg !6339

if.then4:                                         ; preds = %for.body
  %8 = load i32, i32* %reason.addr, align 4, !dbg !6340
  %9 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !6341
  %inline_failed5 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %9, i32 0, i32 9, !dbg !6342
  store i32 %8, i32* %inline_failed5, align 8, !dbg !6343
  br label %if.end6, !dbg !6341

if.end6:                                          ; preds = %if.then4, %for.body
  br label %for.inc, !dbg !6338

for.inc:                                          ; preds = %if.end6
  %10 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !6344
  %next_caller = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %10, i32 0, i32 4, !dbg !6345
  %11 = load %struct.cgraph_edge*, %struct.cgraph_edge** %next_caller, align 8, !dbg !6345
  store %struct.cgraph_edge* %11, %struct.cgraph_edge** %e, align 8, !dbg !6346
  br label %for.cond, !dbg !6347, !llvm.loop !6348

for.end:                                          ; preds = %for.cond
  ret void, !dbg !6350
}

declare dso_local %struct.fibnode* @fibheap_insert(%struct.fibheap*, i64, i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @cgraph_edge_badness(%struct.cgraph_edge* %edge) #0 !dbg !6351 {
entry:
  %retval = alloca i32, align 4
  %edge.addr = alloca %struct.cgraph_edge*, align 8
  %badness = alloca i64, align 8
  %growth = alloca i32, align 4
  %div18 = alloca i32, align 4
  %nest = alloca i32, align 4
  store %struct.cgraph_edge* %edge, %struct.cgraph_edge** %edge.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cgraph_edge** %edge.addr, metadata !6354, metadata !DIExpression()), !dbg !6355
  call void @llvm.dbg.declare(metadata i64* %badness, metadata !6356, metadata !DIExpression()), !dbg !6357
  call void @llvm.dbg.declare(metadata i32* %growth, metadata !6358, metadata !DIExpression()), !dbg !6359
  %0 = load %struct.cgraph_edge*, %struct.cgraph_edge** %edge.addr, align 8, !dbg !6360
  %caller = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %0, i32 0, i32 1, !dbg !6361
  %1 = load %struct.cgraph_node*, %struct.cgraph_node** %caller, align 8, !dbg !6361
  %2 = load %struct.cgraph_edge*, %struct.cgraph_edge** %edge.addr, align 8, !dbg !6362
  %callee = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %2, i32 0, i32 2, !dbg !6363
  %3 = load %struct.cgraph_node*, %struct.cgraph_node** %callee, align 8, !dbg !6363
  %call = call i32 @cgraph_estimate_size_after_inlining(i32 1, %struct.cgraph_node* %1, %struct.cgraph_node* %3), !dbg !6364
  store i32 %call, i32* %growth, align 4, !dbg !6359
  %4 = load %struct.cgraph_edge*, %struct.cgraph_edge** %edge.addr, align 8, !dbg !6365
  %caller1 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %4, i32 0, i32 1, !dbg !6366
  %5 = load %struct.cgraph_node*, %struct.cgraph_node** %caller1, align 8, !dbg !6366
  %global = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %5, i32 0, i32 19, !dbg !6367
  %size = getelementptr inbounds %struct.cgraph_global_info, %struct.cgraph_global_info* %global, i32 0, i32 4, !dbg !6368
  %6 = load i32, i32* %size, align 4, !dbg !6368
  %7 = load i32, i32* %growth, align 4, !dbg !6369
  %sub = sub nsw i32 %7, %6, !dbg !6369
  store i32 %sub, i32* %growth, align 4, !dbg !6369
  %8 = load i32, i32* %growth, align 4, !dbg !6370
  %cmp = icmp sle i32 %8, 0, !dbg !6372
  br i1 %cmp, label %if.then, label %if.else, !dbg !6373

if.then:                                          ; preds = %entry
  %9 = load i32, i32* %growth, align 4, !dbg !6374
  %sub2 = sub nsw i32 -2147483648, %9, !dbg !6375
  %conv = sext i32 %sub2 to i64, !dbg !6376
  store i64 %conv, i64* %badness, align 8, !dbg !6377
  br label %if.end93, !dbg !6378

if.else:                                          ; preds = %entry
  %10 = load i64, i64* @max_count, align 8, !dbg !6379
  %tobool = icmp ne i64 %10, 0, !dbg !6379
  br i1 %tobool, label %if.then3, label %if.else15, !dbg !6381

if.then3:                                         ; preds = %if.else
  %11 = load %struct.cgraph_edge*, %struct.cgraph_edge** %edge.addr, align 8, !dbg !6382
  %count = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %11, i32 0, i32 0, !dbg !6383
  %12 = load i64, i64* %count, align 8, !dbg !6383
  %conv4 = sitofp i64 %12 to double, !dbg !6384
  %mul = fmul double %conv4, 0xC1E0000000000000, !dbg !6385
  %13 = load i64, i64* @max_count, align 8, !dbg !6386
  %conv5 = sitofp i64 %13 to double, !dbg !6386
  %div = fdiv double %mul, %conv5, !dbg !6387
  %14 = load i64, i64* @max_benefit, align 8, !dbg !6388
  %add = add nsw i64 %14, 1, !dbg !6389
  %conv6 = sitofp i64 %add to double, !dbg !6390
  %div7 = fdiv double %div, %conv6, !dbg !6391
  %conv8 = fptosi double %div7 to i32, !dbg !6392
  %15 = load %struct.cgraph_edge*, %struct.cgraph_edge** %edge.addr, align 8, !dbg !6393
  %callee9 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %15, i32 0, i32 2, !dbg !6394
  %16 = load %struct.cgraph_node*, %struct.cgraph_node** %callee9, align 8, !dbg !6394
  %call10 = call %struct.inline_summary* @inline_summary(%struct.cgraph_node* %16), !dbg !6395
  %time_inlining_benefit = getelementptr inbounds %struct.inline_summary, %struct.inline_summary* %call10, i32 0, i32 4, !dbg !6396
  %17 = load i32, i32* %time_inlining_benefit, align 4, !dbg !6396
  %add11 = add nsw i32 %17, 1, !dbg !6397
  %mul12 = mul nsw i32 %conv8, %add11, !dbg !6398
  %18 = load i32, i32* %growth, align 4, !dbg !6399
  %div13 = sdiv i32 %mul12, %18, !dbg !6400
  %conv14 = sext i32 %div13 to i64, !dbg !6401
  store i64 %conv14, i64* %badness, align 8, !dbg !6402
  br label %if.end92, !dbg !6403

if.else15:                                        ; preds = %if.else
  %19 = load i32, i32* @flag_guess_branch_prob, align 4, !dbg !6404
  %tobool16 = icmp ne i32 %19, 0, !dbg !6404
  br i1 %tobool16, label %if.then17, label %if.else71, !dbg !6406

if.then17:                                        ; preds = %if.else15
  call void @llvm.dbg.declare(metadata i32* %div18, metadata !6407, metadata !DIExpression()), !dbg !6409
  %20 = load %struct.cgraph_edge*, %struct.cgraph_edge** %edge.addr, align 8, !dbg !6410
  %frequency = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %20, i32 0, i32 11, !dbg !6411
  %21 = load i32, i32* %frequency, align 8, !dbg !6411
  %mul19 = mul nsw i32 %21, 100, !dbg !6412
  %div20 = sdiv i32 %mul19, 1000, !dbg !6413
  %add21 = add nsw i32 %div20, 1, !dbg !6414
  store i32 %add21, i32* %div18, align 4, !dbg !6409
  %22 = load i32, i32* %growth, align 4, !dbg !6415
  %mul22 = mul nsw i32 %22, 10000, !dbg !6416
  %conv23 = sext i32 %mul22 to i64, !dbg !6415
  store i64 %conv23, i64* %badness, align 8, !dbg !6417
  %23 = load %struct.cgraph_edge*, %struct.cgraph_edge** %edge.addr, align 8, !dbg !6418
  %callee24 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %23, i32 0, i32 2, !dbg !6418
  %24 = load %struct.cgraph_node*, %struct.cgraph_node** %callee24, align 8, !dbg !6418
  %call25 = call %struct.inline_summary* @inline_summary(%struct.cgraph_node* %24), !dbg !6418
  %time_inlining_benefit26 = getelementptr inbounds %struct.inline_summary, %struct.inline_summary* %call25, i32 0, i32 4, !dbg !6418
  %25 = load i32, i32* %time_inlining_benefit26, align 4, !dbg !6418
  %mul27 = mul nsw i32 100, %25, !dbg !6418
  %26 = load %struct.cgraph_edge*, %struct.cgraph_edge** %edge.addr, align 8, !dbg !6418
  %callee28 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %26, i32 0, i32 2, !dbg !6418
  %27 = load %struct.cgraph_node*, %struct.cgraph_node** %callee28, align 8, !dbg !6418
  %global29 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %27, i32 0, i32 19, !dbg !6418
  %time = getelementptr inbounds %struct.cgraph_global_info, %struct.cgraph_global_info* %global29, i32 0, i32 3, !dbg !6418
  %28 = load i32, i32* %time, align 8, !dbg !6418
  %add30 = add nsw i32 %28, 1, !dbg !6418
  %div31 = sdiv i32 %mul27, %add30, !dbg !6418
  %add32 = add nsw i32 %div31, 1, !dbg !6418
  %cmp33 = icmp slt i32 %add32, 100, !dbg !6418
  br i1 %cmp33, label %cond.true, label %cond.false, !dbg !6418

cond.true:                                        ; preds = %if.then17
  %29 = load %struct.cgraph_edge*, %struct.cgraph_edge** %edge.addr, align 8, !dbg !6418
  %callee35 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %29, i32 0, i32 2, !dbg !6418
  %30 = load %struct.cgraph_node*, %struct.cgraph_node** %callee35, align 8, !dbg !6418
  %call36 = call %struct.inline_summary* @inline_summary(%struct.cgraph_node* %30), !dbg !6418
  %time_inlining_benefit37 = getelementptr inbounds %struct.inline_summary, %struct.inline_summary* %call36, i32 0, i32 4, !dbg !6418
  %31 = load i32, i32* %time_inlining_benefit37, align 4, !dbg !6418
  %mul38 = mul nsw i32 100, %31, !dbg !6418
  %32 = load %struct.cgraph_edge*, %struct.cgraph_edge** %edge.addr, align 8, !dbg !6418
  %callee39 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %32, i32 0, i32 2, !dbg !6418
  %33 = load %struct.cgraph_node*, %struct.cgraph_node** %callee39, align 8, !dbg !6418
  %global40 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %33, i32 0, i32 19, !dbg !6418
  %time41 = getelementptr inbounds %struct.cgraph_global_info, %struct.cgraph_global_info* %global40, i32 0, i32 3, !dbg !6418
  %34 = load i32, i32* %time41, align 8, !dbg !6418
  %add42 = add nsw i32 %34, 1, !dbg !6418
  %div43 = sdiv i32 %mul38, %add42, !dbg !6418
  %add44 = add nsw i32 %div43, 1, !dbg !6418
  br label %cond.end, !dbg !6418

cond.false:                                       ; preds = %if.then17
  br label %cond.end, !dbg !6418

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %add44, %cond.true ], [ 100, %cond.false ], !dbg !6418
  %35 = load i32, i32* %div18, align 4, !dbg !6419
  %mul45 = mul nsw i32 %35, %cond, !dbg !6419
  store i32 %mul45, i32* %div18, align 4, !dbg !6419
  %36 = load i32, i32* %div18, align 4, !dbg !6420
  %cmp46 = icmp sgt i32 %36, 10000, !dbg !6422
  br i1 %cmp46, label %if.then48, label %if.end, !dbg !6423

if.then48:                                        ; preds = %cond.end
  %37 = load i32, i32* %div18, align 4, !dbg !6424
  %conv49 = sext i32 %37 to i64, !dbg !6424
  %call50 = call i32 @ceil_log2(i64 %conv49), !dbg !6425
  %add51 = add nsw i32 10000, %call50, !dbg !6426
  %sub52 = sub nsw i32 %add51, 8, !dbg !6427
  store i32 %sub52, i32* %div18, align 4, !dbg !6428
  br label %if.end, !dbg !6429

if.end:                                           ; preds = %if.then48, %cond.end
  %38 = load i32, i32* %div18, align 4, !dbg !6430
  %cmp53 = icmp slt i32 %38, 1, !dbg !6432
  br i1 %cmp53, label %if.then55, label %if.end56, !dbg !6433

if.then55:                                        ; preds = %if.end
  store i32 1, i32* %div18, align 4, !dbg !6434
  br label %if.end56, !dbg !6435

if.end56:                                         ; preds = %if.then55, %if.end
  %39 = load i64, i64* %badness, align 8, !dbg !6436
  %cmp57 = icmp sgt i64 %39, 0, !dbg !6438
  br i1 %cmp57, label %if.then59, label %if.end62, !dbg !6439

if.then59:                                        ; preds = %if.end56
  %40 = load i32, i32* %div18, align 4, !dbg !6440
  %conv60 = sext i32 %40 to i64, !dbg !6440
  %41 = load i64, i64* %badness, align 8, !dbg !6441
  %div61 = sdiv i64 %41, %conv60, !dbg !6441
  store i64 %div61, i64* %badness, align 8, !dbg !6441
  br label %if.end62, !dbg !6442

if.end62:                                         ; preds = %if.then59, %if.end56
  %42 = load %struct.cgraph_edge*, %struct.cgraph_edge** %edge.addr, align 8, !dbg !6443
  %callee63 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %42, i32 0, i32 2, !dbg !6444
  %43 = load %struct.cgraph_node*, %struct.cgraph_node** %callee63, align 8, !dbg !6444
  %call64 = call i32 @cgraph_estimate_growth(%struct.cgraph_node* %43), !dbg !6445
  %conv65 = sext i32 %call64 to i64, !dbg !6445
  %44 = load i64, i64* %badness, align 8, !dbg !6446
  %add66 = add nsw i64 %44, %conv65, !dbg !6446
  store i64 %add66, i64* %badness, align 8, !dbg !6446
  %45 = load i64, i64* %badness, align 8, !dbg !6447
  %cmp67 = icmp sgt i64 %45, 2147483647, !dbg !6449
  br i1 %cmp67, label %if.then69, label %if.end70, !dbg !6450

if.then69:                                        ; preds = %if.end62
  store i64 2147483647, i64* %badness, align 8, !dbg !6451
  br label %if.end70, !dbg !6452

if.end70:                                         ; preds = %if.then69, %if.end62
  br label %if.end91, !dbg !6453

if.else71:                                        ; preds = %if.else15
  call void @llvm.dbg.declare(metadata i32* %nest, metadata !6454, metadata !DIExpression()), !dbg !6456
  %46 = load %struct.cgraph_edge*, %struct.cgraph_edge** %edge.addr, align 8, !dbg !6457
  %loop_nest = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %46, i32 0, i32 13, !dbg !6457
  %47 = load i16, i16* %loop_nest, align 8, !dbg !6457
  %conv72 = zext i16 %47 to i32, !dbg !6457
  %cmp73 = icmp slt i32 %conv72, 8, !dbg !6457
  br i1 %cmp73, label %cond.true75, label %cond.false78, !dbg !6457

cond.true75:                                      ; preds = %if.else71
  %48 = load %struct.cgraph_edge*, %struct.cgraph_edge** %edge.addr, align 8, !dbg !6457
  %loop_nest76 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %48, i32 0, i32 13, !dbg !6457
  %49 = load i16, i16* %loop_nest76, align 8, !dbg !6457
  %conv77 = zext i16 %49 to i32, !dbg !6457
  br label %cond.end79, !dbg !6457

cond.false78:                                     ; preds = %if.else71
  br label %cond.end79, !dbg !6457

cond.end79:                                       ; preds = %cond.false78, %cond.true75
  %cond80 = phi i32 [ %conv77, %cond.true75 ], [ 8, %cond.false78 ], !dbg !6457
  store i32 %cond80, i32* %nest, align 4, !dbg !6456
  %50 = load %struct.cgraph_edge*, %struct.cgraph_edge** %edge.addr, align 8, !dbg !6458
  %callee81 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %50, i32 0, i32 2, !dbg !6459
  %51 = load %struct.cgraph_node*, %struct.cgraph_node** %callee81, align 8, !dbg !6459
  %call82 = call i32 @cgraph_estimate_growth(%struct.cgraph_node* %51), !dbg !6460
  %mul83 = mul nsw i32 %call82, 256, !dbg !6461
  %conv84 = sext i32 %mul83 to i64, !dbg !6460
  store i64 %conv84, i64* %badness, align 8, !dbg !6462
  %52 = load i64, i64* %badness, align 8, !dbg !6463
  %cmp85 = icmp sgt i64 %52, 0, !dbg !6465
  br i1 %cmp85, label %if.then87, label %if.else88, !dbg !6466

if.then87:                                        ; preds = %cond.end79
  %53 = load i32, i32* %nest, align 4, !dbg !6467
  %54 = load i64, i64* %badness, align 8, !dbg !6468
  %sh_prom = zext i32 %53 to i64, !dbg !6468
  %shr = ashr i64 %54, %sh_prom, !dbg !6468
  store i64 %shr, i64* %badness, align 8, !dbg !6468
  br label %if.end90, !dbg !6469

if.else88:                                        ; preds = %cond.end79
  %55 = load i32, i32* %nest, align 4, !dbg !6470
  %56 = load i64, i64* %badness, align 8, !dbg !6472
  %sh_prom89 = zext i32 %55 to i64, !dbg !6472
  %shl = shl i64 %56, %sh_prom89, !dbg !6472
  store i64 %shl, i64* %badness, align 8, !dbg !6472
  br label %if.end90

if.end90:                                         ; preds = %if.else88, %if.then87
  br label %if.end91

if.end91:                                         ; preds = %if.end90, %if.end70
  br label %if.end92

if.end92:                                         ; preds = %if.end91, %if.then3
  br label %if.end93

if.end93:                                         ; preds = %if.end92, %if.then
  %57 = load %struct.cgraph_edge*, %struct.cgraph_edge** %edge.addr, align 8, !dbg !6473
  %caller94 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %57, i32 0, i32 1, !dbg !6475
  %58 = load %struct.cgraph_node*, %struct.cgraph_node** %caller94, align 8, !dbg !6475
  %59 = load %struct.cgraph_edge*, %struct.cgraph_edge** %edge.addr, align 8, !dbg !6476
  %callee95 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %59, i32 0, i32 2, !dbg !6477
  %60 = load %struct.cgraph_node*, %struct.cgraph_node** %callee95, align 8, !dbg !6477
  %call96 = call zeroext i8 @cgraph_recursive_inlining_p(%struct.cgraph_node* %58, %struct.cgraph_node* %60, i32* null), !dbg !6478
  %tobool97 = icmp ne i8 %call96, 0, !dbg !6478
  br i1 %tobool97, label %if.then98, label %if.else101, !dbg !6479

if.then98:                                        ; preds = %if.end93
  %61 = load i64, i64* %badness, align 8, !dbg !6480
  %add99 = add nsw i64 %61, 1, !dbg !6481
  %conv100 = trunc i64 %add99 to i32, !dbg !6480
  store i32 %conv100, i32* %retval, align 4, !dbg !6482
  br label %return, !dbg !6482

if.else101:                                       ; preds = %if.end93
  %62 = load i64, i64* %badness, align 8, !dbg !6483
  %conv102 = trunc i64 %62 to i32, !dbg !6483
  store i32 %conv102, i32* %retval, align 4, !dbg !6484
  br label %return, !dbg !6484

return:                                           ; preds = %if.else101, %if.then98
  %63 = load i32, i32* %retval, align 4, !dbg !6485
  ret i32 %63, !dbg !6485
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @compute_max_insns(i32 %insns) #0 !dbg !6486 {
entry:
  %insns.addr = alloca i32, align 4
  %max_insns = alloca i32, align 4
  store i32 %insns, i32* %insns.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %insns.addr, metadata !6489, metadata !DIExpression()), !dbg !6490
  call void @llvm.dbg.declare(metadata i32* %max_insns, metadata !6491, metadata !DIExpression()), !dbg !6492
  %0 = load i32, i32* %insns.addr, align 4, !dbg !6493
  store i32 %0, i32* %max_insns, align 4, !dbg !6492
  %1 = load i32, i32* %max_insns, align 4, !dbg !6494
  %2 = load %struct.param_info*, %struct.param_info** @compiler_params, align 8, !dbg !6496
  %arrayidx = getelementptr inbounds %struct.param_info, %struct.param_info* %2, i64 17, !dbg !6496
  %value = getelementptr inbounds %struct.param_info, %struct.param_info* %arrayidx, i32 0, i32 1, !dbg !6496
  %3 = load i32, i32* %value, align 8, !dbg !6496
  %cmp = icmp slt i32 %1, %3, !dbg !6497
  br i1 %cmp, label %if.then, label %if.end, !dbg !6498

if.then:                                          ; preds = %entry
  %4 = load %struct.param_info*, %struct.param_info** @compiler_params, align 8, !dbg !6499
  %arrayidx1 = getelementptr inbounds %struct.param_info, %struct.param_info* %4, i64 17, !dbg !6499
  %value2 = getelementptr inbounds %struct.param_info, %struct.param_info* %arrayidx1, i32 0, i32 1, !dbg !6499
  %5 = load i32, i32* %value2, align 8, !dbg !6499
  store i32 %5, i32* %max_insns, align 4, !dbg !6500
  br label %if.end, !dbg !6501

if.end:                                           ; preds = %if.then, %entry
  %6 = load i32, i32* %max_insns, align 4, !dbg !6502
  %conv = sext i32 %6 to i64, !dbg !6503
  %7 = load %struct.param_info*, %struct.param_info** @compiler_params, align 8, !dbg !6504
  %arrayidx3 = getelementptr inbounds %struct.param_info, %struct.param_info* %7, i64 18, !dbg !6504
  %value4 = getelementptr inbounds %struct.param_info, %struct.param_info* %arrayidx3, i32 0, i32 1, !dbg !6504
  %8 = load i32, i32* %value4, align 8, !dbg !6504
  %add = add nsw i32 100, %8, !dbg !6505
  %conv5 = sext i32 %add to i64, !dbg !6506
  %mul = mul nsw i64 %conv, %conv5, !dbg !6507
  %div = sdiv i64 %mul, 100, !dbg !6508
  %conv6 = trunc i64 %div to i32, !dbg !6509
  ret i32 %conv6, !dbg !6510
}

declare dso_local i8* @fibheap_extract_min(%struct.fibheap*) #2

; Function Attrs: noinline nounwind uwtable
define internal i8* @gimple_filename(%union.gimple_statement_d* %stmt) #0 !dbg !6511 {
entry:
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %tmp = alloca %struct.expanded_location, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !6514, metadata !DIExpression()), !dbg !6515
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6516
  %call = call i32 @gimple_location(%union.gimple_statement_d* %0), !dbg !6516
  call void @expand_location(%struct.expanded_location* sret %tmp, i32 %call), !dbg !6516
  %file = getelementptr inbounds %struct.expanded_location, %struct.expanded_location* %tmp, i32 0, i32 0, !dbg !6516
  %1 = load i8*, i8** %file, align 8, !dbg !6516
  ret i8* %1, !dbg !6517
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_lineno(%union.gimple_statement_d* %stmt) #0 !dbg !6518 {
entry:
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %tmp = alloca %struct.expanded_location, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !6521, metadata !DIExpression()), !dbg !6522
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6523
  %call = call i32 @gimple_location(%union.gimple_statement_d* %0), !dbg !6523
  call void @expand_location(%struct.expanded_location* sret %tmp, i32 %call), !dbg !6523
  %line = getelementptr inbounds %struct.expanded_location, %struct.expanded_location* %tmp, i32 0, i32 1, !dbg !6523
  %1 = load i32, i32* %line, align 8, !dbg !6523
  ret i32 %1, !dbg !6524
}

declare dso_local zeroext i8 @optimize_function_for_size_p(%struct.function*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @cgraph_decide_recursive_inlining(%struct.cgraph_node* %node, %struct.VEC_cgraph_edge_p_heap** %new_edges) #0 !dbg !6525 {
entry:
  %retval = alloca i8, align 1
  %node.addr = alloca %struct.cgraph_node*, align 8
  %new_edges.addr = alloca %struct.VEC_cgraph_edge_p_heap**, align 8
  %limit = alloca i32, align 4
  %max_depth = alloca i32, align 4
  %probability = alloca i32, align 4
  %heap = alloca %struct.fibheap*, align 8
  %e = alloca %struct.cgraph_edge*, align 8
  %master_clone = alloca %struct.cgraph_node*, align 8
  %next = alloca %struct.cgraph_node*, align 8
  %depth = alloca i32, align 4
  %n = alloca i32, align 4
  %curr = alloca %struct.cgraph_edge*, align 8
  %cnode = alloca %struct.cgraph_node*, align 8
  store %struct.cgraph_node* %node, %struct.cgraph_node** %node.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %node.addr, metadata !6528, metadata !DIExpression()), !dbg !6529
  store %struct.VEC_cgraph_edge_p_heap** %new_edges, %struct.VEC_cgraph_edge_p_heap*** %new_edges.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_cgraph_edge_p_heap*** %new_edges.addr, metadata !6530, metadata !DIExpression()), !dbg !6531
  call void @llvm.dbg.declare(metadata i32* %limit, metadata !6532, metadata !DIExpression()), !dbg !6533
  %0 = load %struct.param_info*, %struct.param_info** @compiler_params, align 8, !dbg !6534
  %arrayidx = getelementptr inbounds %struct.param_info, %struct.param_info* %0, i64 5, !dbg !6534
  %value = getelementptr inbounds %struct.param_info, %struct.param_info* %arrayidx, i32 0, i32 1, !dbg !6534
  %1 = load i32, i32* %value, align 8, !dbg !6534
  store i32 %1, i32* %limit, align 4, !dbg !6533
  call void @llvm.dbg.declare(metadata i32* %max_depth, metadata !6535, metadata !DIExpression()), !dbg !6536
  %2 = load %struct.param_info*, %struct.param_info** @compiler_params, align 8, !dbg !6537
  %arrayidx1 = getelementptr inbounds %struct.param_info, %struct.param_info* %2, i64 7, !dbg !6537
  %value2 = getelementptr inbounds %struct.param_info, %struct.param_info* %arrayidx1, i32 0, i32 1, !dbg !6537
  %3 = load i32, i32* %value2, align 8, !dbg !6537
  store i32 %3, i32* %max_depth, align 4, !dbg !6536
  call void @llvm.dbg.declare(metadata i32* %probability, metadata !6538, metadata !DIExpression()), !dbg !6539
  %4 = load %struct.param_info*, %struct.param_info** @compiler_params, align 8, !dbg !6540
  %arrayidx3 = getelementptr inbounds %struct.param_info, %struct.param_info* %4, i64 8, !dbg !6540
  %value4 = getelementptr inbounds %struct.param_info, %struct.param_info* %arrayidx3, i32 0, i32 1, !dbg !6540
  %5 = load i32, i32* %value4, align 8, !dbg !6540
  store i32 %5, i32* %probability, align 4, !dbg !6539
  call void @llvm.dbg.declare(metadata %struct.fibheap** %heap, metadata !6541, metadata !DIExpression()), !dbg !6542
  call void @llvm.dbg.declare(metadata %struct.cgraph_edge** %e, metadata !6543, metadata !DIExpression()), !dbg !6544
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %master_clone, metadata !6545, metadata !DIExpression()), !dbg !6546
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %next, metadata !6547, metadata !DIExpression()), !dbg !6548
  call void @llvm.dbg.declare(metadata i32* %depth, metadata !6549, metadata !DIExpression()), !dbg !6550
  store i32 0, i32* %depth, align 4, !dbg !6550
  call void @llvm.dbg.declare(metadata i32* %n, metadata !6551, metadata !DIExpression()), !dbg !6552
  store i32 0, i32* %n, align 4, !dbg !6552
  %6 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !6553
  %decl = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %6, i32 0, i32 0, !dbg !6553
  %7 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !6553
  %function_decl = bitcast %union.tree_node* %7 to %struct.tree_function_decl*, !dbg !6553
  %f = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl, i32 0, i32 1, !dbg !6553
  %8 = load %struct.function*, %struct.function** %f, align 8, !dbg !6553
  %call = call zeroext i8 @optimize_function_for_size_p(%struct.function* %8), !dbg !6555
  %conv = zext i8 %call to i32, !dbg !6555
  %tobool = icmp ne i32 %conv, 0, !dbg !6555
  br i1 %tobool, label %if.then, label %lor.lhs.false, !dbg !6556

lor.lhs.false:                                    ; preds = %entry
  %9 = load i32, i32* @flag_inline_functions, align 4, !dbg !6557
  %tobool5 = icmp ne i32 %9, 0, !dbg !6557
  br i1 %tobool5, label %if.end, label %land.lhs.true, !dbg !6558

land.lhs.true:                                    ; preds = %lor.lhs.false
  %10 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !6559
  %decl6 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %10, i32 0, i32 0, !dbg !6559
  %11 = load %union.tree_node*, %union.tree_node** %decl6, align 8, !dbg !6559
  %function_decl7 = bitcast %union.tree_node* %11 to %struct.tree_function_decl*, !dbg !6559
  %declared_inline_flag = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl7, i32 0, i32 5, !dbg !6559
  %bf.load = load i32, i32* %declared_inline_flag, align 8, !dbg !6559
  %bf.lshr = lshr i32 %bf.load, 21, !dbg !6559
  %bf.clear = and i32 %bf.lshr, 1, !dbg !6559
  %tobool8 = icmp ne i32 %bf.clear, 0, !dbg !6559
  br i1 %tobool8, label %if.end, label %if.then, !dbg !6560

if.then:                                          ; preds = %land.lhs.true, %entry
  store i8 0, i8* %retval, align 1, !dbg !6561
  br label %return, !dbg !6561

if.end:                                           ; preds = %land.lhs.true, %lor.lhs.false
  %12 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !6562
  %decl9 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %12, i32 0, i32 0, !dbg !6562
  %13 = load %union.tree_node*, %union.tree_node** %decl9, align 8, !dbg !6562
  %function_decl10 = bitcast %union.tree_node* %13 to %struct.tree_function_decl*, !dbg !6562
  %declared_inline_flag11 = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl10, i32 0, i32 5, !dbg !6562
  %bf.load12 = load i32, i32* %declared_inline_flag11, align 8, !dbg !6562
  %bf.lshr13 = lshr i32 %bf.load12, 21, !dbg !6562
  %bf.clear14 = and i32 %bf.lshr13, 1, !dbg !6562
  %tobool15 = icmp ne i32 %bf.clear14, 0, !dbg !6562
  br i1 %tobool15, label %if.then16, label %if.end21, !dbg !6564

if.then16:                                        ; preds = %if.end
  %14 = load %struct.param_info*, %struct.param_info** @compiler_params, align 8, !dbg !6565
  %arrayidx17 = getelementptr inbounds %struct.param_info, %struct.param_info* %14, i64 4, !dbg !6565
  %value18 = getelementptr inbounds %struct.param_info, %struct.param_info* %arrayidx17, i32 0, i32 1, !dbg !6565
  %15 = load i32, i32* %value18, align 8, !dbg !6565
  store i32 %15, i32* %limit, align 4, !dbg !6567
  %16 = load %struct.param_info*, %struct.param_info** @compiler_params, align 8, !dbg !6568
  %arrayidx19 = getelementptr inbounds %struct.param_info, %struct.param_info* %16, i64 6, !dbg !6568
  %value20 = getelementptr inbounds %struct.param_info, %struct.param_info* %arrayidx19, i32 0, i32 1, !dbg !6568
  %17 = load i32, i32* %value20, align 8, !dbg !6568
  store i32 %17, i32* %max_depth, align 4, !dbg !6569
  br label %if.end21, !dbg !6570

if.end21:                                         ; preds = %if.then16, %if.end
  %18 = load i32, i32* %max_depth, align 4, !dbg !6571
  %tobool22 = icmp ne i32 %18, 0, !dbg !6571
  br i1 %tobool22, label %lor.lhs.false23, label %if.then26, !dbg !6573

lor.lhs.false23:                                  ; preds = %if.end21
  %19 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !6574
  %20 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !6575
  %call24 = call i32 @cgraph_estimate_size_after_inlining(i32 1, %struct.cgraph_node* %19, %struct.cgraph_node* %20), !dbg !6576
  %21 = load i32, i32* %limit, align 4, !dbg !6577
  %cmp = icmp sge i32 %call24, %21, !dbg !6578
  br i1 %cmp, label %if.then26, label %if.end27, !dbg !6579

if.then26:                                        ; preds = %lor.lhs.false23, %if.end21
  store i8 0, i8* %retval, align 1, !dbg !6580
  br label %return, !dbg !6580

if.end27:                                         ; preds = %lor.lhs.false23
  %call28 = call %struct.fibheap* @fibheap_new(), !dbg !6581
  store %struct.fibheap* %call28, %struct.fibheap** %heap, align 8, !dbg !6582
  %22 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !6583
  %23 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !6584
  %24 = load %struct.fibheap*, %struct.fibheap** %heap, align 8, !dbg !6585
  call void @lookup_recursive_calls(%struct.cgraph_node* %22, %struct.cgraph_node* %23, %struct.fibheap* %24), !dbg !6586
  %25 = load %struct.fibheap*, %struct.fibheap** %heap, align 8, !dbg !6587
  %call29 = call i32 @fibheap_empty(%struct.fibheap* %25), !dbg !6589
  %tobool30 = icmp ne i32 %call29, 0, !dbg !6589
  br i1 %tobool30, label %if.then31, label %if.end32, !dbg !6590

if.then31:                                        ; preds = %if.end27
  %26 = load %struct.fibheap*, %struct.fibheap** %heap, align 8, !dbg !6591
  call void @fibheap_delete(%struct.fibheap* %26), !dbg !6593
  store i8 0, i8* %retval, align 1, !dbg !6594
  br label %return, !dbg !6594

if.end32:                                         ; preds = %if.end27
  %27 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6595
  %tobool33 = icmp ne %struct._IO_FILE* %27, null, !dbg !6595
  br i1 %tobool33, label %if.then34, label %if.end37, !dbg !6597

if.then34:                                        ; preds = %if.end32
  %28 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6598
  %29 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !6599
  %call35 = call i8* @cgraph_node_name(%struct.cgraph_node* %29), !dbg !6600
  %call36 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %28, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.48, i64 0, i64 0), i8* %call35), !dbg !6601
  br label %if.end37, !dbg !6601

if.end37:                                         ; preds = %if.then34, %if.end32
  %30 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !6602
  %31 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !6603
  %count = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %31, i32 0, i32 23, !dbg !6604
  %32 = load i64, i64* %count, align 8, !dbg !6604
  %call38 = call %struct.cgraph_node* @cgraph_clone_node(%struct.cgraph_node* %30, i64 %32, i32 1000, i32 1, i8 zeroext 0, %struct.VEC_cgraph_edge_p_heap* null), !dbg !6605
  store %struct.cgraph_node* %call38, %struct.cgraph_node** %master_clone, align 8, !dbg !6606
  %33 = load %struct.cgraph_node*, %struct.cgraph_node** %master_clone, align 8, !dbg !6607
  %needed = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %33, i32 0, i32 27, !dbg !6608
  %bf.load39 = load i16, i16* %needed, align 4, !dbg !6609
  %bf.clear40 = and i16 %bf.load39, -2, !dbg !6609
  %bf.set = or i16 %bf.clear40, 1, !dbg !6609
  store i16 %bf.set, i16* %needed, align 4, !dbg !6609
  %34 = load %struct.cgraph_node*, %struct.cgraph_node** %master_clone, align 8, !dbg !6610
  %callees = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %34, i32 0, i32 1, !dbg !6612
  %35 = load %struct.cgraph_edge*, %struct.cgraph_edge** %callees, align 8, !dbg !6612
  store %struct.cgraph_edge* %35, %struct.cgraph_edge** %e, align 8, !dbg !6613
  br label %for.cond, !dbg !6614

for.cond:                                         ; preds = %for.inc, %if.end37
  %36 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !6615
  %tobool41 = icmp ne %struct.cgraph_edge* %36, null, !dbg !6617
  br i1 %tobool41, label %for.body, label %for.end, !dbg !6617

for.body:                                         ; preds = %for.cond
  %37 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !6618
  %inline_failed = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %37, i32 0, i32 9, !dbg !6620
  %38 = load i32, i32* %inline_failed, align 8, !dbg !6620
  %tobool42 = icmp ne i32 %38, 0, !dbg !6618
  br i1 %tobool42, label %if.end44, label %if.then43, !dbg !6621

if.then43:                                        ; preds = %for.body
  %39 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !6622
  call void @cgraph_clone_inlined_nodes(%struct.cgraph_edge* %39, i8 zeroext 1, i8 zeroext 0), !dbg !6623
  br label %if.end44, !dbg !6623

if.end44:                                         ; preds = %if.then43, %for.body
  br label %for.inc, !dbg !6620

for.inc:                                          ; preds = %if.end44
  %40 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !6624
  %next_callee = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %40, i32 0, i32 6, !dbg !6625
  %41 = load %struct.cgraph_edge*, %struct.cgraph_edge** %next_callee, align 8, !dbg !6625
  store %struct.cgraph_edge* %41, %struct.cgraph_edge** %e, align 8, !dbg !6626
  br label %for.cond, !dbg !6627, !llvm.loop !6628

for.end:                                          ; preds = %for.cond
  br label %while.cond, !dbg !6630

while.cond:                                       ; preds = %if.end107, %if.end90, %if.end79, %if.end69, %for.end
  %42 = load %struct.fibheap*, %struct.fibheap** %heap, align 8, !dbg !6631
  %call45 = call i32 @fibheap_empty(%struct.fibheap* %42), !dbg !6632
  %tobool46 = icmp ne i32 %call45, 0, !dbg !6632
  br i1 %tobool46, label %land.end, label %land.rhs, !dbg !6633

land.rhs:                                         ; preds = %while.cond
  %43 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !6634
  %44 = load %struct.cgraph_node*, %struct.cgraph_node** %master_clone, align 8, !dbg !6635
  %call47 = call i32 @cgraph_estimate_size_after_inlining(i32 1, %struct.cgraph_node* %43, %struct.cgraph_node* %44), !dbg !6636
  %45 = load i32, i32* %limit, align 4, !dbg !6637
  %cmp48 = icmp sle i32 %call47, %45, !dbg !6638
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %46 = phi i1 [ false, %while.cond ], [ %cmp48, %land.rhs ], !dbg !6639
  br i1 %46, label %while.body, label %while.end, !dbg !6630

while.body:                                       ; preds = %land.end
  call void @llvm.dbg.declare(metadata %struct.cgraph_edge** %curr, metadata !6640, metadata !DIExpression()), !dbg !6642
  %47 = load %struct.fibheap*, %struct.fibheap** %heap, align 8, !dbg !6643
  %call50 = call i8* @fibheap_extract_min(%struct.fibheap* %47), !dbg !6644
  %48 = bitcast i8* %call50 to %struct.cgraph_edge*, !dbg !6645
  store %struct.cgraph_edge* %48, %struct.cgraph_edge** %curr, align 8, !dbg !6642
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %cnode, metadata !6646, metadata !DIExpression()), !dbg !6647
  store i32 1, i32* %depth, align 4, !dbg !6648
  %49 = load %struct.cgraph_edge*, %struct.cgraph_edge** %curr, align 8, !dbg !6649
  %caller = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %49, i32 0, i32 1, !dbg !6651
  %50 = load %struct.cgraph_node*, %struct.cgraph_node** %caller, align 8, !dbg !6651
  store %struct.cgraph_node* %50, %struct.cgraph_node** %cnode, align 8, !dbg !6652
  br label %for.cond51, !dbg !6653

for.cond51:                                       ; preds = %for.inc60, %while.body
  %51 = load %struct.cgraph_node*, %struct.cgraph_node** %cnode, align 8, !dbg !6654
  %global = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %51, i32 0, i32 19, !dbg !6656
  %inlined_to = getelementptr inbounds %struct.cgraph_global_info, %struct.cgraph_global_info* %global, i32 0, i32 2, !dbg !6657
  %52 = load %struct.cgraph_node*, %struct.cgraph_node** %inlined_to, align 8, !dbg !6657
  %tobool52 = icmp ne %struct.cgraph_node* %52, null, !dbg !6658
  br i1 %tobool52, label %for.body53, label %for.end62, !dbg !6658

for.body53:                                       ; preds = %for.cond51
  %53 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !6659
  %decl54 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %53, i32 0, i32 0, !dbg !6661
  %54 = load %union.tree_node*, %union.tree_node** %decl54, align 8, !dbg !6661
  %55 = load %struct.cgraph_edge*, %struct.cgraph_edge** %curr, align 8, !dbg !6662
  %callee = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %55, i32 0, i32 2, !dbg !6663
  %56 = load %struct.cgraph_node*, %struct.cgraph_node** %callee, align 8, !dbg !6663
  %decl55 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %56, i32 0, i32 0, !dbg !6664
  %57 = load %union.tree_node*, %union.tree_node** %decl55, align 8, !dbg !6664
  %cmp56 = icmp eq %union.tree_node* %54, %57, !dbg !6665
  br i1 %cmp56, label %if.then58, label %if.end59, !dbg !6666

if.then58:                                        ; preds = %for.body53
  %58 = load i32, i32* %depth, align 4, !dbg !6667
  %inc = add nsw i32 %58, 1, !dbg !6667
  store i32 %inc, i32* %depth, align 4, !dbg !6667
  br label %if.end59, !dbg !6668

if.end59:                                         ; preds = %if.then58, %for.body53
  br label %for.inc60, !dbg !6664

for.inc60:                                        ; preds = %if.end59
  %59 = load %struct.cgraph_node*, %struct.cgraph_node** %cnode, align 8, !dbg !6669
  %callers = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %59, i32 0, i32 2, !dbg !6670
  %60 = load %struct.cgraph_edge*, %struct.cgraph_edge** %callers, align 8, !dbg !6670
  %caller61 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %60, i32 0, i32 1, !dbg !6671
  %61 = load %struct.cgraph_node*, %struct.cgraph_node** %caller61, align 8, !dbg !6671
  store %struct.cgraph_node* %61, %struct.cgraph_node** %cnode, align 8, !dbg !6672
  br label %for.cond51, !dbg !6673, !llvm.loop !6674

for.end62:                                        ; preds = %for.cond51
  %62 = load i32, i32* %depth, align 4, !dbg !6676
  %63 = load i32, i32* %max_depth, align 4, !dbg !6678
  %cmp63 = icmp sgt i32 %62, %63, !dbg !6679
  br i1 %cmp63, label %if.then65, label %if.end70, !dbg !6680

if.then65:                                        ; preds = %for.end62
  %64 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6681
  %tobool66 = icmp ne %struct._IO_FILE* %64, null, !dbg !6681
  br i1 %tobool66, label %if.then67, label %if.end69, !dbg !6684

if.then67:                                        ; preds = %if.then65
  %65 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6685
  %call68 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %65, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.49, i64 0, i64 0)), !dbg !6686
  br label %if.end69, !dbg !6686

if.end69:                                         ; preds = %if.then67, %if.then65
  br label %while.cond, !dbg !6687, !llvm.loop !6688

if.end70:                                         ; preds = %for.end62
  %66 = load i64, i64* @max_count, align 8, !dbg !6690
  %tobool71 = icmp ne i64 %66, 0, !dbg !6690
  br i1 %tobool71, label %if.then72, label %if.end92, !dbg !6692

if.then72:                                        ; preds = %if.end70
  %67 = load %struct.cgraph_edge*, %struct.cgraph_edge** %curr, align 8, !dbg !6693
  %call73 = call zeroext i8 @cgraph_maybe_hot_edge_p(%struct.cgraph_edge* %67), !dbg !6696
  %tobool74 = icmp ne i8 %call73, 0, !dbg !6696
  br i1 %tobool74, label %if.end80, label %if.then75, !dbg !6697

if.then75:                                        ; preds = %if.then72
  %68 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6698
  %tobool76 = icmp ne %struct._IO_FILE* %68, null, !dbg !6698
  br i1 %tobool76, label %if.then77, label %if.end79, !dbg !6701

if.then77:                                        ; preds = %if.then75
  %69 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6702
  %call78 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %69, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.50, i64 0, i64 0)), !dbg !6703
  br label %if.end79, !dbg !6703

if.end79:                                         ; preds = %if.then77, %if.then75
  br label %while.cond, !dbg !6704, !llvm.loop !6688

if.end80:                                         ; preds = %if.then72
  %70 = load %struct.cgraph_edge*, %struct.cgraph_edge** %curr, align 8, !dbg !6705
  %count81 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %70, i32 0, i32 0, !dbg !6707
  %71 = load i64, i64* %count81, align 8, !dbg !6707
  %mul = mul nsw i64 %71, 100, !dbg !6708
  %72 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !6709
  %count82 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %72, i32 0, i32 23, !dbg !6710
  %73 = load i64, i64* %count82, align 8, !dbg !6710
  %div = sdiv i64 %mul, %73, !dbg !6711
  %74 = load i32, i32* %probability, align 4, !dbg !6712
  %conv83 = sext i32 %74 to i64, !dbg !6712
  %cmp84 = icmp slt i64 %div, %conv83, !dbg !6713
  br i1 %cmp84, label %if.then86, label %if.end91, !dbg !6714

if.then86:                                        ; preds = %if.end80
  %75 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6715
  %tobool87 = icmp ne %struct._IO_FILE* %75, null, !dbg !6715
  br i1 %tobool87, label %if.then88, label %if.end90, !dbg !6718

if.then88:                                        ; preds = %if.then86
  %76 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6719
  %call89 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %76, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.51, i64 0, i64 0)), !dbg !6720
  br label %if.end90, !dbg !6720

if.end90:                                         ; preds = %if.then88, %if.then86
  br label %while.cond, !dbg !6721, !llvm.loop !6688

if.end91:                                         ; preds = %if.end80
  br label %if.end92, !dbg !6722

if.end92:                                         ; preds = %if.end91, %if.end70
  %77 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6723
  %tobool93 = icmp ne %struct._IO_FILE* %77, null, !dbg !6723
  br i1 %tobool93, label %if.then94, label %if.end107, !dbg !6725

if.then94:                                        ; preds = %if.end92
  %78 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6726
  %79 = load i32, i32* %depth, align 4, !dbg !6728
  %call95 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %78, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.52, i64 0, i64 0), i32 %79), !dbg !6729
  %80 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !6730
  %count96 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %80, i32 0, i32 23, !dbg !6732
  %81 = load i64, i64* %count96, align 8, !dbg !6732
  %tobool97 = icmp ne i64 %81, 0, !dbg !6730
  br i1 %tobool97, label %if.then98, label %if.end105, !dbg !6733

if.then98:                                        ; preds = %if.then94
  %82 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6734
  %83 = load %struct.cgraph_edge*, %struct.cgraph_edge** %curr, align 8, !dbg !6736
  %count99 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %83, i32 0, i32 0, !dbg !6737
  %84 = load i64, i64* %count99, align 8, !dbg !6737
  %conv100 = sitofp i64 %84 to double, !dbg !6738
  %85 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !6739
  %count101 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %85, i32 0, i32 23, !dbg !6740
  %86 = load i64, i64* %count101, align 8, !dbg !6740
  %conv102 = sitofp i64 %86 to double, !dbg !6739
  %div103 = fdiv double %conv100, %conv102, !dbg !6741
  %call104 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %82, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.53, i64 0, i64 0), double %div103), !dbg !6742
  br label %if.end105, !dbg !6743

if.end105:                                        ; preds = %if.then98, %if.then94
  %87 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6744
  %call106 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %87, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.54, i64 0, i64 0)), !dbg !6745
  br label %if.end107, !dbg !6746

if.end107:                                        ; preds = %if.end105, %if.end92
  %88 = load %struct.cgraph_edge*, %struct.cgraph_edge** %curr, align 8, !dbg !6747
  %89 = load %struct.cgraph_node*, %struct.cgraph_node** %master_clone, align 8, !dbg !6748
  call void @cgraph_redirect_edge_callee(%struct.cgraph_edge* %88, %struct.cgraph_node* %89), !dbg !6749
  %90 = load %struct.cgraph_edge*, %struct.cgraph_edge** %curr, align 8, !dbg !6750
  %91 = load %struct.VEC_cgraph_edge_p_heap**, %struct.VEC_cgraph_edge_p_heap*** %new_edges.addr, align 8, !dbg !6751
  %call108 = call zeroext i8 @cgraph_mark_inline_edge(%struct.cgraph_edge* %90, i8 zeroext 0, %struct.VEC_cgraph_edge_p_heap** %91), !dbg !6752
  %92 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !6753
  %93 = load %struct.cgraph_edge*, %struct.cgraph_edge** %curr, align 8, !dbg !6754
  %callee109 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %93, i32 0, i32 2, !dbg !6755
  %94 = load %struct.cgraph_node*, %struct.cgraph_node** %callee109, align 8, !dbg !6755
  %95 = load %struct.fibheap*, %struct.fibheap** %heap, align 8, !dbg !6756
  call void @lookup_recursive_calls(%struct.cgraph_node* %92, %struct.cgraph_node* %94, %struct.fibheap* %95), !dbg !6757
  %96 = load i32, i32* %n, align 4, !dbg !6758
  %inc110 = add nsw i32 %96, 1, !dbg !6758
  store i32 %inc110, i32* %n, align 4, !dbg !6758
  br label %while.cond, !dbg !6630, !llvm.loop !6688

while.end:                                        ; preds = %land.end
  %97 = load %struct.fibheap*, %struct.fibheap** %heap, align 8, !dbg !6759
  %call111 = call i32 @fibheap_empty(%struct.fibheap* %97), !dbg !6761
  %tobool112 = icmp ne i32 %call111, 0, !dbg !6761
  br i1 %tobool112, label %if.end117, label %land.lhs.true113, !dbg !6762

land.lhs.true113:                                 ; preds = %while.end
  %98 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6763
  %tobool114 = icmp ne %struct._IO_FILE* %98, null, !dbg !6763
  br i1 %tobool114, label %if.then115, label %if.end117, !dbg !6764

if.then115:                                       ; preds = %land.lhs.true113
  %99 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6765
  %call116 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %99, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.55, i64 0, i64 0)), !dbg !6766
  br label %if.end117, !dbg !6766

if.end117:                                        ; preds = %if.then115, %land.lhs.true113, %while.end
  %100 = load %struct.fibheap*, %struct.fibheap** %heap, align 8, !dbg !6767
  call void @fibheap_delete(%struct.fibheap* %100), !dbg !6768
  %101 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6769
  %tobool118 = icmp ne %struct._IO_FILE* %101, null, !dbg !6769
  br i1 %tobool118, label %if.then119, label %if.end127, !dbg !6771

if.then119:                                       ; preds = %if.end117
  %102 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6772
  %103 = load i32, i32* %n, align 4, !dbg !6773
  %104 = load %struct.cgraph_node*, %struct.cgraph_node** %master_clone, align 8, !dbg !6774
  %global120 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %104, i32 0, i32 19, !dbg !6775
  %size = getelementptr inbounds %struct.cgraph_global_info, %struct.cgraph_global_info* %global120, i32 0, i32 4, !dbg !6776
  %105 = load i32, i32* %size, align 4, !dbg !6776
  %106 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !6777
  %global121 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %106, i32 0, i32 19, !dbg !6778
  %size122 = getelementptr inbounds %struct.cgraph_global_info, %struct.cgraph_global_info* %global121, i32 0, i32 4, !dbg !6779
  %107 = load i32, i32* %size122, align 4, !dbg !6779
  %108 = load %struct.cgraph_node*, %struct.cgraph_node** %master_clone, align 8, !dbg !6780
  %global123 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %108, i32 0, i32 19, !dbg !6781
  %time = getelementptr inbounds %struct.cgraph_global_info, %struct.cgraph_global_info* %global123, i32 0, i32 3, !dbg !6782
  %109 = load i32, i32* %time, align 8, !dbg !6782
  %110 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !6783
  %global124 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %110, i32 0, i32 19, !dbg !6784
  %time125 = getelementptr inbounds %struct.cgraph_global_info, %struct.cgraph_global_info* %global124, i32 0, i32 3, !dbg !6785
  %111 = load i32, i32* %time125, align 8, !dbg !6785
  %call126 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %102, i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.56, i64 0, i64 0), i32 %103, i32 %105, i32 %107, i32 %109, i32 %111), !dbg !6786
  br label %if.end127, !dbg !6786

if.end127:                                        ; preds = %if.then119, %if.end117
  %112 = load %struct.cgraph_node*, %struct.cgraph_node** @cgraph_nodes, align 8, !dbg !6787
  store %struct.cgraph_node* %112, %struct.cgraph_node** %node.addr, align 8, !dbg !6789
  br label %for.cond128, !dbg !6790

for.cond128:                                      ; preds = %for.inc139, %if.end127
  %113 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !6791
  %114 = load %struct.cgraph_node*, %struct.cgraph_node** %master_clone, align 8, !dbg !6793
  %cmp129 = icmp ne %struct.cgraph_node* %113, %114, !dbg !6794
  br i1 %cmp129, label %for.body131, label %for.end140, !dbg !6795

for.body131:                                      ; preds = %for.cond128
  %115 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !6796
  %next132 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %115, i32 0, i32 3, !dbg !6798
  %116 = load %struct.cgraph_node*, %struct.cgraph_node** %next132, align 8, !dbg !6798
  store %struct.cgraph_node* %116, %struct.cgraph_node** %next, align 8, !dbg !6799
  %117 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !6800
  %global133 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %117, i32 0, i32 19, !dbg !6802
  %inlined_to134 = getelementptr inbounds %struct.cgraph_global_info, %struct.cgraph_global_info* %global133, i32 0, i32 2, !dbg !6803
  %118 = load %struct.cgraph_node*, %struct.cgraph_node** %inlined_to134, align 8, !dbg !6803
  %119 = load %struct.cgraph_node*, %struct.cgraph_node** %master_clone, align 8, !dbg !6804
  %cmp135 = icmp eq %struct.cgraph_node* %118, %119, !dbg !6805
  br i1 %cmp135, label %if.then137, label %if.end138, !dbg !6806

if.then137:                                       ; preds = %for.body131
  %120 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !6807
  call void @cgraph_remove_node(%struct.cgraph_node* %120), !dbg !6808
  br label %if.end138, !dbg !6808

if.end138:                                        ; preds = %if.then137, %for.body131
  br label %for.inc139, !dbg !6809

for.inc139:                                       ; preds = %if.end138
  %121 = load %struct.cgraph_node*, %struct.cgraph_node** %next, align 8, !dbg !6810
  store %struct.cgraph_node* %121, %struct.cgraph_node** %node.addr, align 8, !dbg !6811
  br label %for.cond128, !dbg !6812, !llvm.loop !6813

for.end140:                                       ; preds = %for.cond128
  %122 = load %struct.cgraph_node*, %struct.cgraph_node** %master_clone, align 8, !dbg !6815
  call void @cgraph_remove_node(%struct.cgraph_node* %122), !dbg !6816
  %123 = load i32, i32* %n, align 4, !dbg !6817
  %cmp141 = icmp sgt i32 %123, 0, !dbg !6818
  %conv142 = zext i1 %cmp141 to i32, !dbg !6818
  %conv143 = trunc i32 %conv142 to i8, !dbg !6817
  store i8 %conv143, i8* %retval, align 1, !dbg !6819
  br label %return, !dbg !6819

return:                                           ; preds = %for.end140, %if.then31, %if.then26, %if.then
  %124 = load i8, i8* %retval, align 1, !dbg !6820
  ret i8 %124, !dbg !6820
}

; Function Attrs: noinline nounwind uwtable
define internal void @add_new_edges_to_heap(%struct.fibheap* %heap, %struct.VEC_cgraph_edge_p_heap* %new_edges) #0 !dbg !6821 {
entry:
  %heap.addr = alloca %struct.fibheap*, align 8
  %new_edges.addr = alloca %struct.VEC_cgraph_edge_p_heap*, align 8
  %edge = alloca %struct.cgraph_edge*, align 8
  store %struct.fibheap* %heap, %struct.fibheap** %heap.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.fibheap** %heap.addr, metadata !6824, metadata !DIExpression()), !dbg !6825
  store %struct.VEC_cgraph_edge_p_heap* %new_edges, %struct.VEC_cgraph_edge_p_heap** %new_edges.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_cgraph_edge_p_heap** %new_edges.addr, metadata !6826, metadata !DIExpression()), !dbg !6827
  br label %while.cond, !dbg !6828

while.cond:                                       ; preds = %cond.end11, %entry
  %0 = load %struct.VEC_cgraph_edge_p_heap*, %struct.VEC_cgraph_edge_p_heap** %new_edges.addr, align 8, !dbg !6829
  %tobool = icmp ne %struct.VEC_cgraph_edge_p_heap* %0, null, !dbg !6829
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6829

cond.true:                                        ; preds = %while.cond
  %1 = load %struct.VEC_cgraph_edge_p_heap*, %struct.VEC_cgraph_edge_p_heap** %new_edges.addr, align 8, !dbg !6829
  %base = getelementptr inbounds %struct.VEC_cgraph_edge_p_heap, %struct.VEC_cgraph_edge_p_heap* %1, i32 0, i32 0, !dbg !6829
  br label %cond.end, !dbg !6829

cond.false:                                       ; preds = %while.cond
  br label %cond.end, !dbg !6829

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_cgraph_edge_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !6829
  %call = call i32 @VEC_cgraph_edge_p_base_length(%struct.VEC_cgraph_edge_p_base* %cond), !dbg !6829
  %cmp = icmp ugt i32 %call, 0, !dbg !6830
  br i1 %cmp, label %while.body, label %while.end, !dbg !6828

while.body:                                       ; preds = %cond.end
  call void @llvm.dbg.declare(metadata %struct.cgraph_edge** %edge, metadata !6831, metadata !DIExpression()), !dbg !6833
  %2 = load %struct.VEC_cgraph_edge_p_heap*, %struct.VEC_cgraph_edge_p_heap** %new_edges.addr, align 8, !dbg !6834
  %tobool1 = icmp ne %struct.VEC_cgraph_edge_p_heap* %2, null, !dbg !6834
  br i1 %tobool1, label %cond.true2, label %cond.false4, !dbg !6834

cond.true2:                                       ; preds = %while.body
  %3 = load %struct.VEC_cgraph_edge_p_heap*, %struct.VEC_cgraph_edge_p_heap** %new_edges.addr, align 8, !dbg !6834
  %base3 = getelementptr inbounds %struct.VEC_cgraph_edge_p_heap, %struct.VEC_cgraph_edge_p_heap* %3, i32 0, i32 0, !dbg !6834
  br label %cond.end5, !dbg !6834

cond.false4:                                      ; preds = %while.body
  br label %cond.end5, !dbg !6834

cond.end5:                                        ; preds = %cond.false4, %cond.true2
  %cond6 = phi %struct.VEC_cgraph_edge_p_base* [ %base3, %cond.true2 ], [ null, %cond.false4 ], !dbg !6834
  %call7 = call %struct.cgraph_edge* @VEC_cgraph_edge_p_base_pop(%struct.VEC_cgraph_edge_p_base* %cond6), !dbg !6834
  store %struct.cgraph_edge* %call7, %struct.cgraph_edge** %edge, align 8, !dbg !6833
  %4 = load %struct.cgraph_edge*, %struct.cgraph_edge** %edge, align 8, !dbg !6835
  %aux = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %4, i32 0, i32 8, !dbg !6835
  %5 = load i8*, i8** %aux, align 8, !dbg !6835
  %tobool8 = icmp ne i8* %5, null, !dbg !6835
  br i1 %tobool8, label %cond.true9, label %cond.false10, !dbg !6835

cond.true9:                                       ; preds = %cond.end5
  call void @fancy_abort(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0), i32 885, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !6835
  br label %cond.end11, !dbg !6835

cond.false10:                                     ; preds = %cond.end5
  br label %cond.end11, !dbg !6835

cond.end11:                                       ; preds = %cond.false10, %cond.true9
  %cond12 = phi i32 [ 0, %cond.true9 ], [ 0, %cond.false10 ], !dbg !6835
  %6 = load %struct.fibheap*, %struct.fibheap** %heap.addr, align 8, !dbg !6836
  %7 = load %struct.cgraph_edge*, %struct.cgraph_edge** %edge, align 8, !dbg !6837
  %call13 = call i32 @cgraph_edge_badness(%struct.cgraph_edge* %7), !dbg !6838
  %conv = sext i32 %call13 to i64, !dbg !6838
  %8 = load %struct.cgraph_edge*, %struct.cgraph_edge** %edge, align 8, !dbg !6839
  %9 = bitcast %struct.cgraph_edge* %8 to i8*, !dbg !6839
  %call14 = call %struct.fibnode* @fibheap_insert(%struct.fibheap* %6, i64 %conv, i8* %9), !dbg !6840
  %10 = bitcast %struct.fibnode* %call14 to i8*, !dbg !6840
  %11 = load %struct.cgraph_edge*, %struct.cgraph_edge** %edge, align 8, !dbg !6841
  %aux15 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %11, i32 0, i32 8, !dbg !6842
  store i8* %10, i8** %aux15, align 8, !dbg !6843
  br label %while.cond, !dbg !6828, !llvm.loop !6844

while.end:                                        ; preds = %cond.end
  ret void, !dbg !6846
}

; Function Attrs: noinline nounwind uwtable
define internal void @update_callee_keys(%struct.fibheap* %heap, %struct.cgraph_node* %node, %struct.bitmap_head_def* %updated_nodes) #0 !dbg !6847 {
entry:
  %heap.addr = alloca %struct.fibheap*, align 8
  %node.addr = alloca %struct.cgraph_node*, align 8
  %updated_nodes.addr = alloca %struct.bitmap_head_def*, align 8
  %e = alloca %struct.cgraph_edge*, align 8
  store %struct.fibheap* %heap, %struct.fibheap** %heap.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.fibheap** %heap.addr, metadata !6850, metadata !DIExpression()), !dbg !6851
  store %struct.cgraph_node* %node, %struct.cgraph_node** %node.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %node.addr, metadata !6852, metadata !DIExpression()), !dbg !6853
  store %struct.bitmap_head_def* %updated_nodes, %struct.bitmap_head_def** %updated_nodes.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %updated_nodes.addr, metadata !6854, metadata !DIExpression()), !dbg !6855
  call void @llvm.dbg.declare(metadata %struct.cgraph_edge** %e, metadata !6856, metadata !DIExpression()), !dbg !6857
  %0 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !6858
  %global = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %0, i32 0, i32 19, !dbg !6859
  %estimated_growth = getelementptr inbounds %struct.cgraph_global_info, %struct.cgraph_global_info* %global, i32 0, i32 5, !dbg !6860
  store i32 -2147483648, i32* %estimated_growth, align 8, !dbg !6861
  %1 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !6862
  %callees = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %1, i32 0, i32 1, !dbg !6864
  %2 = load %struct.cgraph_edge*, %struct.cgraph_edge** %callees, align 8, !dbg !6864
  store %struct.cgraph_edge* %2, %struct.cgraph_edge** %e, align 8, !dbg !6865
  br label %for.cond, !dbg !6866

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !6867
  %tobool = icmp ne %struct.cgraph_edge* %3, null, !dbg !6869
  br i1 %tobool, label %for.body, label %for.end, !dbg !6869

for.body:                                         ; preds = %for.cond
  %4 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !6870
  %inline_failed = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %4, i32 0, i32 9, !dbg !6872
  %5 = load i32, i32* %inline_failed, align 8, !dbg !6872
  %tobool1 = icmp ne i32 %5, 0, !dbg !6870
  br i1 %tobool1, label %if.then, label %if.else, !dbg !6873

if.then:                                          ; preds = %for.body
  %6 = load %struct.fibheap*, %struct.fibheap** %heap.addr, align 8, !dbg !6874
  %7 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !6875
  %callee = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %7, i32 0, i32 2, !dbg !6876
  %8 = load %struct.cgraph_node*, %struct.cgraph_node** %callee, align 8, !dbg !6876
  %9 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %updated_nodes.addr, align 8, !dbg !6877
  call void @update_caller_keys(%struct.fibheap* %6, %struct.cgraph_node* %8, %struct.bitmap_head_def* %9), !dbg !6878
  br label %if.end6, !dbg !6878

if.else:                                          ; preds = %for.body
  %10 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !6879
  %inline_failed2 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %10, i32 0, i32 9, !dbg !6881
  %11 = load i32, i32* %inline_failed2, align 8, !dbg !6881
  %tobool3 = icmp ne i32 %11, 0, !dbg !6879
  br i1 %tobool3, label %if.end, label %if.then4, !dbg !6882

if.then4:                                         ; preds = %if.else
  %12 = load %struct.fibheap*, %struct.fibheap** %heap.addr, align 8, !dbg !6883
  %13 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !6884
  %callee5 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %13, i32 0, i32 2, !dbg !6885
  %14 = load %struct.cgraph_node*, %struct.cgraph_node** %callee5, align 8, !dbg !6885
  %15 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %updated_nodes.addr, align 8, !dbg !6886
  call void @update_callee_keys(%struct.fibheap* %12, %struct.cgraph_node* %14, %struct.bitmap_head_def* %15), !dbg !6887
  br label %if.end, !dbg !6887

if.end:                                           ; preds = %if.then4, %if.else
  br label %if.end6

if.end6:                                          ; preds = %if.end, %if.then
  br label %for.inc, !dbg !6872

for.inc:                                          ; preds = %if.end6
  %16 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !6888
  %next_callee = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %16, i32 0, i32 6, !dbg !6889
  %17 = load %struct.cgraph_edge*, %struct.cgraph_edge** %next_callee, align 8, !dbg !6889
  store %struct.cgraph_edge* %17, %struct.cgraph_edge** %e, align 8, !dbg !6890
  br label %for.cond, !dbg !6891, !llvm.loop !6892

for.end:                                          ; preds = %for.cond
  ret void, !dbg !6894
}

; Function Attrs: noinline nounwind uwtable
define internal void @update_caller_keys(%struct.fibheap* %heap, %struct.cgraph_node* %node, %struct.bitmap_head_def* %updated_nodes) #0 !dbg !6895 {
entry:
  %heap.addr = alloca %struct.fibheap*, align 8
  %node.addr = alloca %struct.cgraph_node*, align 8
  %updated_nodes.addr = alloca %struct.bitmap_head_def*, align 8
  %edge = alloca %struct.cgraph_edge*, align 8
  %failed_reason = alloca i32, align 4
  %badness = alloca i32, align 4
  %n = alloca %struct.fibnode*, align 8
  store %struct.fibheap* %heap, %struct.fibheap** %heap.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.fibheap** %heap.addr, metadata !6896, metadata !DIExpression()), !dbg !6897
  store %struct.cgraph_node* %node, %struct.cgraph_node** %node.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %node.addr, metadata !6898, metadata !DIExpression()), !dbg !6899
  store %struct.bitmap_head_def* %updated_nodes, %struct.bitmap_head_def** %updated_nodes.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %updated_nodes.addr, metadata !6900, metadata !DIExpression()), !dbg !6901
  call void @llvm.dbg.declare(metadata %struct.cgraph_edge** %edge, metadata !6902, metadata !DIExpression()), !dbg !6903
  call void @llvm.dbg.declare(metadata i32* %failed_reason, metadata !6904, metadata !DIExpression()), !dbg !6905
  %0 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !6906
  %local = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %0, i32 0, i32 18, !dbg !6908
  %inlinable = getelementptr inbounds %struct.cgraph_local_info, %struct.cgraph_local_info* %local, i32 0, i32 2, !dbg !6909
  %bf.load = load i8, i8* %inlinable, align 8, !dbg !6909
  %bf.lshr = lshr i8 %bf.load, 3, !dbg !6909
  %bf.clear = and i8 %bf.lshr, 1, !dbg !6909
  %bf.cast = zext i8 %bf.clear to i32, !dbg !6909
  %tobool = icmp ne i32 %bf.cast, 0, !dbg !6906
  br i1 %tobool, label %lor.lhs.false, label %if.then, !dbg !6910

lor.lhs.false:                                    ; preds = %entry
  %1 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !6911
  %local1 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %1, i32 0, i32 18, !dbg !6912
  %disregard_inline_limits = getelementptr inbounds %struct.cgraph_local_info, %struct.cgraph_local_info* %local1, i32 0, i32 2, !dbg !6913
  %bf.load2 = load i8, i8* %disregard_inline_limits, align 8, !dbg !6913
  %bf.lshr3 = lshr i8 %bf.load2, 4, !dbg !6913
  %bf.clear4 = and i8 %bf.lshr3, 1, !dbg !6913
  %bf.cast5 = zext i8 %bf.clear4 to i32, !dbg !6913
  %tobool6 = icmp ne i32 %bf.cast5, 0, !dbg !6911
  br i1 %tobool6, label %if.then, label %lor.lhs.false7, !dbg !6914

lor.lhs.false7:                                   ; preds = %lor.lhs.false
  %2 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !6915
  %global = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %2, i32 0, i32 19, !dbg !6916
  %inlined_to = getelementptr inbounds %struct.cgraph_global_info, %struct.cgraph_global_info* %global, i32 0, i32 2, !dbg !6917
  %3 = load %struct.cgraph_node*, %struct.cgraph_node** %inlined_to, align 8, !dbg !6917
  %tobool8 = icmp ne %struct.cgraph_node* %3, null, !dbg !6915
  br i1 %tobool8, label %if.then, label %if.end, !dbg !6918

if.then:                                          ; preds = %lor.lhs.false7, %lor.lhs.false, %entry
  br label %for.end69, !dbg !6919

if.end:                                           ; preds = %lor.lhs.false7
  %4 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %updated_nodes.addr, align 8, !dbg !6920
  %5 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !6922
  %uid = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %5, i32 0, i32 24, !dbg !6923
  %6 = load i32, i32* %uid, align 8, !dbg !6923
  %call = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %4, i32 %6), !dbg !6924
  %tobool9 = icmp ne i32 %call, 0, !dbg !6924
  br i1 %tobool9, label %if.then10, label %if.end11, !dbg !6925

if.then10:                                        ; preds = %if.end
  br label %for.end69, !dbg !6926

if.end11:                                         ; preds = %if.end
  %7 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %updated_nodes.addr, align 8, !dbg !6927
  %8 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !6928
  %uid12 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %8, i32 0, i32 24, !dbg !6929
  %9 = load i32, i32* %uid12, align 8, !dbg !6929
  %call13 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %7, i32 %9), !dbg !6930
  %10 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !6931
  %global14 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %10, i32 0, i32 19, !dbg !6932
  %estimated_growth = getelementptr inbounds %struct.cgraph_global_info, %struct.cgraph_global_info* %global14, i32 0, i32 5, !dbg !6933
  store i32 -2147483648, i32* %estimated_growth, align 8, !dbg !6934
  %11 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !6935
  %local15 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %11, i32 0, i32 18, !dbg !6937
  %inlinable16 = getelementptr inbounds %struct.cgraph_local_info, %struct.cgraph_local_info* %local15, i32 0, i32 2, !dbg !6938
  %bf.load17 = load i8, i8* %inlinable16, align 8, !dbg !6938
  %bf.lshr18 = lshr i8 %bf.load17, 3, !dbg !6938
  %bf.clear19 = and i8 %bf.lshr18, 1, !dbg !6938
  %bf.cast20 = zext i8 %bf.clear19 to i32, !dbg !6938
  %tobool21 = icmp ne i32 %bf.cast20, 0, !dbg !6935
  br i1 %tobool21, label %if.end23, label %if.then22, !dbg !6939

if.then22:                                        ; preds = %if.end11
  br label %for.end69, !dbg !6940

if.end23:                                         ; preds = %if.end11
  %12 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !6941
  %call24 = call zeroext i8 @cgraph_default_inline_p(%struct.cgraph_node* %12, i32* %failed_reason), !dbg !6943
  %tobool25 = icmp ne i8 %call24, 0, !dbg !6943
  br i1 %tobool25, label %if.end38, label %if.then26, !dbg !6944

if.then26:                                        ; preds = %if.end23
  %13 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !6945
  %callers = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %13, i32 0, i32 2, !dbg !6948
  %14 = load %struct.cgraph_edge*, %struct.cgraph_edge** %callers, align 8, !dbg !6948
  store %struct.cgraph_edge* %14, %struct.cgraph_edge** %edge, align 8, !dbg !6949
  br label %for.cond, !dbg !6950

for.cond:                                         ; preds = %for.inc, %if.then26
  %15 = load %struct.cgraph_edge*, %struct.cgraph_edge** %edge, align 8, !dbg !6951
  %tobool27 = icmp ne %struct.cgraph_edge* %15, null, !dbg !6953
  br i1 %tobool27, label %for.body, label %for.end, !dbg !6953

for.body:                                         ; preds = %for.cond
  %16 = load %struct.cgraph_edge*, %struct.cgraph_edge** %edge, align 8, !dbg !6954
  %aux = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %16, i32 0, i32 8, !dbg !6956
  %17 = load i8*, i8** %aux, align 8, !dbg !6956
  %tobool28 = icmp ne i8* %17, null, !dbg !6954
  br i1 %tobool28, label %if.then29, label %if.end37, !dbg !6957

if.then29:                                        ; preds = %for.body
  %18 = load %struct.fibheap*, %struct.fibheap** %heap.addr, align 8, !dbg !6958
  %19 = load %struct.cgraph_edge*, %struct.cgraph_edge** %edge, align 8, !dbg !6960
  %aux30 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %19, i32 0, i32 8, !dbg !6961
  %20 = load i8*, i8** %aux30, align 8, !dbg !6961
  %21 = bitcast i8* %20 to %struct.fibnode*, !dbg !6962
  %call31 = call i8* @fibheap_delete_node(%struct.fibheap* %18, %struct.fibnode* %21), !dbg !6963
  %22 = load %struct.cgraph_edge*, %struct.cgraph_edge** %edge, align 8, !dbg !6964
  %aux32 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %22, i32 0, i32 8, !dbg !6965
  store i8* null, i8** %aux32, align 8, !dbg !6966
  %23 = load %struct.cgraph_edge*, %struct.cgraph_edge** %edge, align 8, !dbg !6967
  %inline_failed = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %23, i32 0, i32 9, !dbg !6969
  %24 = load i32, i32* %inline_failed, align 8, !dbg !6969
  %tobool33 = icmp ne i32 %24, 0, !dbg !6967
  br i1 %tobool33, label %if.then34, label %if.end36, !dbg !6970

if.then34:                                        ; preds = %if.then29
  %25 = load i32, i32* %failed_reason, align 4, !dbg !6971
  %26 = load %struct.cgraph_edge*, %struct.cgraph_edge** %edge, align 8, !dbg !6972
  %inline_failed35 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %26, i32 0, i32 9, !dbg !6973
  store i32 %25, i32* %inline_failed35, align 8, !dbg !6974
  br label %if.end36, !dbg !6972

if.end36:                                         ; preds = %if.then34, %if.then29
  br label %if.end37, !dbg !6975

if.end37:                                         ; preds = %if.end36, %for.body
  br label %for.inc, !dbg !6956

for.inc:                                          ; preds = %if.end37
  %27 = load %struct.cgraph_edge*, %struct.cgraph_edge** %edge, align 8, !dbg !6976
  %next_caller = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %27, i32 0, i32 4, !dbg !6977
  %28 = load %struct.cgraph_edge*, %struct.cgraph_edge** %next_caller, align 8, !dbg !6977
  store %struct.cgraph_edge* %28, %struct.cgraph_edge** %edge, align 8, !dbg !6978
  br label %for.cond, !dbg !6979, !llvm.loop !6980

for.end:                                          ; preds = %for.cond
  br label %for.end69, !dbg !6982

if.end38:                                         ; preds = %if.end23
  %29 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !6983
  %callers39 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %29, i32 0, i32 2, !dbg !6985
  %30 = load %struct.cgraph_edge*, %struct.cgraph_edge** %callers39, align 8, !dbg !6985
  store %struct.cgraph_edge* %30, %struct.cgraph_edge** %edge, align 8, !dbg !6986
  br label %for.cond40, !dbg !6987

for.cond40:                                       ; preds = %for.inc67, %if.end38
  %31 = load %struct.cgraph_edge*, %struct.cgraph_edge** %edge, align 8, !dbg !6988
  %tobool41 = icmp ne %struct.cgraph_edge* %31, null, !dbg !6990
  br i1 %tobool41, label %for.body42, label %for.end69, !dbg !6990

for.body42:                                       ; preds = %for.cond40
  %32 = load %struct.cgraph_edge*, %struct.cgraph_edge** %edge, align 8, !dbg !6991
  %inline_failed43 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %32, i32 0, i32 9, !dbg !6993
  %33 = load i32, i32* %inline_failed43, align 8, !dbg !6993
  %tobool44 = icmp ne i32 %33, 0, !dbg !6991
  br i1 %tobool44, label %if.then45, label %if.end66, !dbg !6994

if.then45:                                        ; preds = %for.body42
  call void @llvm.dbg.declare(metadata i32* %badness, metadata !6995, metadata !DIExpression()), !dbg !6997
  %34 = load %struct.cgraph_edge*, %struct.cgraph_edge** %edge, align 8, !dbg !6998
  %call46 = call i32 @cgraph_edge_badness(%struct.cgraph_edge* %34), !dbg !6999
  store i32 %call46, i32* %badness, align 4, !dbg !6997
  %35 = load %struct.cgraph_edge*, %struct.cgraph_edge** %edge, align 8, !dbg !7000
  %aux47 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %35, i32 0, i32 8, !dbg !7002
  %36 = load i8*, i8** %aux47, align 8, !dbg !7002
  %tobool48 = icmp ne i8* %36, null, !dbg !7000
  br i1 %tobool48, label %if.then49, label %if.end62, !dbg !7003

if.then49:                                        ; preds = %if.then45
  call void @llvm.dbg.declare(metadata %struct.fibnode** %n, metadata !7004, metadata !DIExpression()), !dbg !7006
  %37 = load %struct.cgraph_edge*, %struct.cgraph_edge** %edge, align 8, !dbg !7007
  %aux50 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %37, i32 0, i32 8, !dbg !7008
  %38 = load i8*, i8** %aux50, align 8, !dbg !7008
  %39 = bitcast i8* %38 to %struct.fibnode*, !dbg !7009
  store %struct.fibnode* %39, %struct.fibnode** %n, align 8, !dbg !7006
  %40 = load %struct.fibnode*, %struct.fibnode** %n, align 8, !dbg !7010
  %data = getelementptr inbounds %struct.fibnode, %struct.fibnode* %40, i32 0, i32 5, !dbg !7010
  %41 = load i8*, i8** %data, align 8, !dbg !7010
  %42 = load %struct.cgraph_edge*, %struct.cgraph_edge** %edge, align 8, !dbg !7010
  %43 = bitcast %struct.cgraph_edge* %42 to i8*, !dbg !7010
  %cmp = icmp eq i8* %41, %43, !dbg !7010
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !7010

cond.true:                                        ; preds = %if.then49
  call void @fancy_abort(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0), i32 658, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !7010
  br label %cond.end, !dbg !7010

cond.false:                                       ; preds = %if.then49
  br label %cond.end, !dbg !7010

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !7010
  %44 = load %struct.fibnode*, %struct.fibnode** %n, align 8, !dbg !7011
  %key = getelementptr inbounds %struct.fibnode, %struct.fibnode* %44, i32 0, i32 4, !dbg !7013
  %45 = load i64, i64* %key, align 8, !dbg !7013
  %46 = load i32, i32* %badness, align 4, !dbg !7014
  %conv = sext i32 %46 to i64, !dbg !7014
  %cmp51 = icmp eq i64 %45, %conv, !dbg !7015
  br i1 %cmp51, label %if.then53, label %if.end54, !dbg !7016

if.then53:                                        ; preds = %cond.end
  br label %for.inc67, !dbg !7017

if.end54:                                         ; preds = %cond.end
  %47 = load %struct.fibheap*, %struct.fibheap** %heap.addr, align 8, !dbg !7018
  %48 = load %struct.fibnode*, %struct.fibnode** %n, align 8, !dbg !7020
  %49 = load i32, i32* %badness, align 4, !dbg !7021
  %conv55 = sext i32 %49 to i64, !dbg !7021
  %call56 = call i64 @fibheap_replace_key(%struct.fibheap* %47, %struct.fibnode* %48, i64 %conv55), !dbg !7022
  %tobool57 = icmp ne i64 %call56, 0, !dbg !7022
  br i1 %tobool57, label %if.then58, label %if.end59, !dbg !7023

if.then58:                                        ; preds = %if.end54
  br label %for.inc67, !dbg !7024

if.end59:                                         ; preds = %if.end54
  %50 = load %struct.fibheap*, %struct.fibheap** %heap.addr, align 8, !dbg !7025
  %51 = load %struct.cgraph_edge*, %struct.cgraph_edge** %edge, align 8, !dbg !7026
  %aux60 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %51, i32 0, i32 8, !dbg !7027
  %52 = load i8*, i8** %aux60, align 8, !dbg !7027
  %53 = bitcast i8* %52 to %struct.fibnode*, !dbg !7028
  %call61 = call i8* @fibheap_delete_node(%struct.fibheap* %50, %struct.fibnode* %53), !dbg !7029
  br label %if.end62, !dbg !7030

if.end62:                                         ; preds = %if.end59, %if.then45
  %54 = load %struct.fibheap*, %struct.fibheap** %heap.addr, align 8, !dbg !7031
  %55 = load i32, i32* %badness, align 4, !dbg !7032
  %conv63 = sext i32 %55 to i64, !dbg !7032
  %56 = load %struct.cgraph_edge*, %struct.cgraph_edge** %edge, align 8, !dbg !7033
  %57 = bitcast %struct.cgraph_edge* %56 to i8*, !dbg !7033
  %call64 = call %struct.fibnode* @fibheap_insert(%struct.fibheap* %54, i64 %conv63, i8* %57), !dbg !7034
  %58 = bitcast %struct.fibnode* %call64 to i8*, !dbg !7034
  %59 = load %struct.cgraph_edge*, %struct.cgraph_edge** %edge, align 8, !dbg !7035
  %aux65 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %59, i32 0, i32 8, !dbg !7036
  store i8* %58, i8** %aux65, align 8, !dbg !7037
  br label %if.end66, !dbg !7038

if.end66:                                         ; preds = %if.end62, %for.body42
  br label %for.inc67, !dbg !6993

for.inc67:                                        ; preds = %if.end66, %if.then58, %if.then53
  %60 = load %struct.cgraph_edge*, %struct.cgraph_edge** %edge, align 8, !dbg !7039
  %next_caller68 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %60, i32 0, i32 4, !dbg !7040
  %61 = load %struct.cgraph_edge*, %struct.cgraph_edge** %next_caller68, align 8, !dbg !7040
  store %struct.cgraph_edge* %61, %struct.cgraph_edge** %edge, align 8, !dbg !7041
  br label %for.cond40, !dbg !7042, !llvm.loop !7043

for.end69:                                        ; preds = %if.then, %if.then10, %if.then22, %for.end, %for.cond40
  ret void, !dbg !7045
}

declare dso_local void @bitmap_clear(%struct.bitmap_head_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_cgraph_edge_p_heap_free(%struct.VEC_cgraph_edge_p_heap** %vec_) #0 !dbg !7046 {
entry:
  %vec_.addr = alloca %struct.VEC_cgraph_edge_p_heap**, align 8
  store %struct.VEC_cgraph_edge_p_heap** %vec_, %struct.VEC_cgraph_edge_p_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_cgraph_edge_p_heap*** %vec_.addr, metadata !7049, metadata !DIExpression()), !dbg !7050
  %0 = load %struct.VEC_cgraph_edge_p_heap**, %struct.VEC_cgraph_edge_p_heap*** %vec_.addr, align 8, !dbg !7051
  %1 = load %struct.VEC_cgraph_edge_p_heap*, %struct.VEC_cgraph_edge_p_heap** %0, align 8, !dbg !7051
  %tobool = icmp ne %struct.VEC_cgraph_edge_p_heap* %1, null, !dbg !7051
  br i1 %tobool, label %if.then, label %if.end, !dbg !7050

if.then:                                          ; preds = %entry
  %2 = load %struct.VEC_cgraph_edge_p_heap**, %struct.VEC_cgraph_edge_p_heap*** %vec_.addr, align 8, !dbg !7051
  %3 = load %struct.VEC_cgraph_edge_p_heap*, %struct.VEC_cgraph_edge_p_heap** %2, align 8, !dbg !7051
  %4 = bitcast %struct.VEC_cgraph_edge_p_heap* %3 to i8*, !dbg !7051
  call void @free(i8* %4), !dbg !7051
  br label %if.end, !dbg !7051

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.VEC_cgraph_edge_p_heap**, %struct.VEC_cgraph_edge_p_heap*** %vec_.addr, align 8, !dbg !7050
  store %struct.VEC_cgraph_edge_p_heap* null, %struct.VEC_cgraph_edge_p_heap** %5, align 8, !dbg !7050
  ret void, !dbg !7050
}

declare dso_local void @fibheap_delete(%struct.fibheap*) #2

declare dso_local i8* @vec_heap_p_reserve_exact(i8*, i32) #2

declare dso_local i32 @ceil_log2(i64) #2

declare dso_local void @expand_location(%struct.expanded_location* sret, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_location(%union.gimple_statement_d* %g) #0 !dbg !7053 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !7056, metadata !DIExpression()), !dbg !7057
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !7058
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !7059
  %location = getelementptr inbounds %struct.gimple_statement_base, %struct.gimple_statement_base* %gsbase, i32 0, i32 2, !dbg !7060
  %1 = load i32, i32* %location, align 8, !dbg !7060
  ret i32 %1, !dbg !7061
}

; Function Attrs: noinline nounwind uwtable
define internal void @lookup_recursive_calls(%struct.cgraph_node* %node, %struct.cgraph_node* %where, %struct.fibheap* %heap) #0 !dbg !2855 {
entry:
  %node.addr = alloca %struct.cgraph_node*, align 8
  %where.addr = alloca %struct.cgraph_node*, align 8
  %heap.addr = alloca %struct.fibheap*, align 8
  %e = alloca %struct.cgraph_edge*, align 8
  store %struct.cgraph_node* %node, %struct.cgraph_node** %node.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %node.addr, metadata !7062, metadata !DIExpression()), !dbg !7063
  store %struct.cgraph_node* %where, %struct.cgraph_node** %where.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %where.addr, metadata !7064, metadata !DIExpression()), !dbg !7065
  store %struct.fibheap* %heap, %struct.fibheap** %heap.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.fibheap** %heap.addr, metadata !7066, metadata !DIExpression()), !dbg !7067
  call void @llvm.dbg.declare(metadata %struct.cgraph_edge** %e, metadata !7068, metadata !DIExpression()), !dbg !7069
  %0 = load %struct.cgraph_node*, %struct.cgraph_node** %where.addr, align 8, !dbg !7070
  %callees = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %0, i32 0, i32 1, !dbg !7072
  %1 = load %struct.cgraph_edge*, %struct.cgraph_edge** %callees, align 8, !dbg !7072
  store %struct.cgraph_edge* %1, %struct.cgraph_edge** %e, align 8, !dbg !7073
  br label %for.cond, !dbg !7074

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !7075
  %tobool = icmp ne %struct.cgraph_edge* %2, null, !dbg !7077
  br i1 %tobool, label %for.body, label %for.end, !dbg !7077

for.body:                                         ; preds = %for.cond
  %3 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !7078
  %callee = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %3, i32 0, i32 2, !dbg !7080
  %4 = load %struct.cgraph_node*, %struct.cgraph_node** %callee, align 8, !dbg !7080
  %5 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !7081
  %cmp = icmp eq %struct.cgraph_node* %4, %5, !dbg !7082
  br i1 %cmp, label %if.then, label %if.end, !dbg !7083

if.then:                                          ; preds = %for.body
  %6 = load %struct.fibheap*, %struct.fibheap** %heap.addr, align 8, !dbg !7084
  %7 = load i64, i64* @max_count, align 8, !dbg !7086
  %tobool1 = icmp ne i64 %7, 0, !dbg !7086
  br i1 %tobool1, label %cond.false, label %cond.true, !dbg !7087

cond.true:                                        ; preds = %if.then
  %8 = load i32, i32* @lookup_recursive_calls.priority, align 4, !dbg !7088
  %inc = add nsw i32 %8, 1, !dbg !7088
  store i32 %inc, i32* @lookup_recursive_calls.priority, align 4, !dbg !7088
  %conv = sext i32 %8 to i64, !dbg !7089
  br label %cond.end, !dbg !7087

cond.false:                                       ; preds = %if.then
  %9 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !7090
  %count = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %9, i32 0, i32 0, !dbg !7091
  %10 = load i64, i64* %count, align 8, !dbg !7091
  %11 = load i64, i64* @max_count, align 8, !dbg !7092
  %add = add nsw i64 %11, 16777216, !dbg !7093
  %sub = sub nsw i64 %add, 1, !dbg !7094
  %div = sdiv i64 %sub, 16777216, !dbg !7095
  %div2 = sdiv i64 %10, %div, !dbg !7096
  %sub3 = sub nsw i64 0, %div2, !dbg !7097
  br label %cond.end, !dbg !7087

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %conv, %cond.true ], [ %sub3, %cond.false ], !dbg !7087
  %12 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !7098
  %13 = bitcast %struct.cgraph_edge* %12 to i8*, !dbg !7098
  %call = call %struct.fibnode* @fibheap_insert(%struct.fibheap* %6, i64 %cond, i8* %13), !dbg !7099
  br label %if.end, !dbg !7100

if.end:                                           ; preds = %cond.end, %for.body
  br label %for.inc, !dbg !7081

for.inc:                                          ; preds = %if.end
  %14 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !7101
  %next_callee = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %14, i32 0, i32 6, !dbg !7102
  %15 = load %struct.cgraph_edge*, %struct.cgraph_edge** %next_callee, align 8, !dbg !7102
  store %struct.cgraph_edge* %15, %struct.cgraph_edge** %e, align 8, !dbg !7103
  br label %for.cond, !dbg !7104, !llvm.loop !7105

for.end:                                          ; preds = %for.cond
  %16 = load %struct.cgraph_node*, %struct.cgraph_node** %where.addr, align 8, !dbg !7107
  %callees4 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %16, i32 0, i32 1, !dbg !7109
  %17 = load %struct.cgraph_edge*, %struct.cgraph_edge** %callees4, align 8, !dbg !7109
  store %struct.cgraph_edge* %17, %struct.cgraph_edge** %e, align 8, !dbg !7110
  br label %for.cond5, !dbg !7111

for.cond5:                                        ; preds = %for.inc12, %for.end
  %18 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !7112
  %tobool6 = icmp ne %struct.cgraph_edge* %18, null, !dbg !7114
  br i1 %tobool6, label %for.body7, label %for.end14, !dbg !7114

for.body7:                                        ; preds = %for.cond5
  %19 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !7115
  %inline_failed = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %19, i32 0, i32 9, !dbg !7117
  %20 = load i32, i32* %inline_failed, align 8, !dbg !7117
  %tobool8 = icmp ne i32 %20, 0, !dbg !7115
  br i1 %tobool8, label %if.end11, label %if.then9, !dbg !7118

if.then9:                                         ; preds = %for.body7
  %21 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !7119
  %22 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !7120
  %callee10 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %22, i32 0, i32 2, !dbg !7121
  %23 = load %struct.cgraph_node*, %struct.cgraph_node** %callee10, align 8, !dbg !7121
  %24 = load %struct.fibheap*, %struct.fibheap** %heap.addr, align 8, !dbg !7122
  call void @lookup_recursive_calls(%struct.cgraph_node* %21, %struct.cgraph_node* %23, %struct.fibheap* %24), !dbg !7123
  br label %if.end11, !dbg !7123

if.end11:                                         ; preds = %if.then9, %for.body7
  br label %for.inc12, !dbg !7117

for.inc12:                                        ; preds = %if.end11
  %25 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !7124
  %next_callee13 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %25, i32 0, i32 6, !dbg !7125
  %26 = load %struct.cgraph_edge*, %struct.cgraph_edge** %next_callee13, align 8, !dbg !7125
  store %struct.cgraph_edge* %26, %struct.cgraph_edge** %e, align 8, !dbg !7126
  br label %for.cond5, !dbg !7127, !llvm.loop !7128

for.end14:                                        ; preds = %for.cond5
  ret void, !dbg !7130
}

declare dso_local i32 @fibheap_empty(%struct.fibheap*) #2

declare dso_local void @cgraph_remove_node(%struct.cgraph_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_cgraph_edge_p_base_length(%struct.VEC_cgraph_edge_p_base* %vec_) #0 !dbg !7131 {
entry:
  %vec_.addr = alloca %struct.VEC_cgraph_edge_p_base*, align 8
  store %struct.VEC_cgraph_edge_p_base* %vec_, %struct.VEC_cgraph_edge_p_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_cgraph_edge_p_base** %vec_.addr, metadata !7136, metadata !DIExpression()), !dbg !7137
  %0 = load %struct.VEC_cgraph_edge_p_base*, %struct.VEC_cgraph_edge_p_base** %vec_.addr, align 8, !dbg !7137
  %tobool = icmp ne %struct.VEC_cgraph_edge_p_base* %0, null, !dbg !7137
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7137

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_cgraph_edge_p_base*, %struct.VEC_cgraph_edge_p_base** %vec_.addr, align 8, !dbg !7137
  %num = getelementptr inbounds %struct.VEC_cgraph_edge_p_base, %struct.VEC_cgraph_edge_p_base* %1, i32 0, i32 0, !dbg !7137
  %2 = load i32, i32* %num, align 8, !dbg !7137
  br label %cond.end, !dbg !7137

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7137

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !7137
  ret i32 %cond, !dbg !7137
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.cgraph_edge* @VEC_cgraph_edge_p_base_pop(%struct.VEC_cgraph_edge_p_base* %vec_) #0 !dbg !7138 {
entry:
  %vec_.addr = alloca %struct.VEC_cgraph_edge_p_base*, align 8
  %obj_ = alloca %struct.cgraph_edge*, align 8
  store %struct.VEC_cgraph_edge_p_base* %vec_, %struct.VEC_cgraph_edge_p_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_cgraph_edge_p_base** %vec_.addr, metadata !7142, metadata !DIExpression()), !dbg !7143
  call void @llvm.dbg.declare(metadata %struct.cgraph_edge** %obj_, metadata !7144, metadata !DIExpression()), !dbg !7143
  %0 = load %struct.VEC_cgraph_edge_p_base*, %struct.VEC_cgraph_edge_p_base** %vec_.addr, align 8, !dbg !7143
  %num = getelementptr inbounds %struct.VEC_cgraph_edge_p_base, %struct.VEC_cgraph_edge_p_base* %0, i32 0, i32 0, !dbg !7143
  %1 = load i32, i32* %num, align 8, !dbg !7143
  %2 = load %struct.VEC_cgraph_edge_p_base*, %struct.VEC_cgraph_edge_p_base** %vec_.addr, align 8, !dbg !7143
  %vec = getelementptr inbounds %struct.VEC_cgraph_edge_p_base, %struct.VEC_cgraph_edge_p_base* %2, i32 0, i32 2, !dbg !7143
  %3 = load %struct.VEC_cgraph_edge_p_base*, %struct.VEC_cgraph_edge_p_base** %vec_.addr, align 8, !dbg !7143
  %num1 = getelementptr inbounds %struct.VEC_cgraph_edge_p_base, %struct.VEC_cgraph_edge_p_base* %3, i32 0, i32 0, !dbg !7143
  %4 = load i32, i32* %num1, align 8, !dbg !7143
  %dec = add i32 %4, -1, !dbg !7143
  store i32 %dec, i32* %num1, align 8, !dbg !7143
  %idxprom = zext i32 %dec to i64, !dbg !7143
  %arrayidx = getelementptr inbounds [1 x %struct.cgraph_edge*], [1 x %struct.cgraph_edge*]* %vec, i64 0, i64 %idxprom, !dbg !7143
  %5 = load %struct.cgraph_edge*, %struct.cgraph_edge** %arrayidx, align 8, !dbg !7143
  store %struct.cgraph_edge* %5, %struct.cgraph_edge** %obj_, align 8, !dbg !7143
  %6 = load %struct.cgraph_edge*, %struct.cgraph_edge** %obj_, align 8, !dbg !7143
  ret %struct.cgraph_edge* %6, !dbg !7143
}

declare dso_local i32 @bitmap_bit_p(%struct.bitmap_head_def*, i32) #2

declare dso_local i8* @fibheap_delete_node(%struct.fibheap*, %struct.fibnode*) #2

declare dso_local i64 @fibheap_replace_key(%struct.fibheap*, %struct.fibnode*, i64) #2

declare dso_local %struct.cgraph_node_hook_list* @cgraph_add_function_insertion_hook(void (%struct.cgraph_node*, i8*)*, i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @add_new_function(%struct.cgraph_node* %node, i8* %data) #0 !dbg !7145 {
entry:
  %node.addr = alloca %struct.cgraph_node*, align 8
  %data.addr = alloca i8*, align 8
  store %struct.cgraph_node* %node, %struct.cgraph_node** %node.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %node.addr, metadata !7148, metadata !DIExpression()), !dbg !7149
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !7150, metadata !DIExpression()), !dbg !7151
  %0 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !7152
  call void @analyze_function(%struct.cgraph_node* %0), !dbg !7153
  ret void, !dbg !7154
}

declare dso_local void @ipa_register_cgraph_hooks() #2

; Function Attrs: noinline nounwind uwtable
define internal void @ipa_check_create_node_params() #0 !dbg !7155 {
entry:
  %0 = load %struct.VEC_ipa_node_params_t_heap*, %struct.VEC_ipa_node_params_t_heap** @ipa_node_params_vector, align 8, !dbg !7156
  %tobool = icmp ne %struct.VEC_ipa_node_params_t_heap* %0, null, !dbg !7156
  br i1 %tobool, label %if.end, label %if.then, !dbg !7158

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @cgraph_max_uid, align 4, !dbg !7159
  %call = call %struct.VEC_ipa_node_params_t_heap* @VEC_ipa_node_params_t_heap_alloc(i32 %1), !dbg !7159
  store %struct.VEC_ipa_node_params_t_heap* %call, %struct.VEC_ipa_node_params_t_heap** @ipa_node_params_vector, align 8, !dbg !7160
  br label %if.end, !dbg !7161

if.end:                                           ; preds = %if.then, %entry
  %2 = load %struct.VEC_ipa_node_params_t_heap*, %struct.VEC_ipa_node_params_t_heap** @ipa_node_params_vector, align 8, !dbg !7162
  %tobool1 = icmp ne %struct.VEC_ipa_node_params_t_heap* %2, null, !dbg !7162
  br i1 %tobool1, label %cond.true, label %cond.false, !dbg !7162

cond.true:                                        ; preds = %if.end
  %3 = load %struct.VEC_ipa_node_params_t_heap*, %struct.VEC_ipa_node_params_t_heap** @ipa_node_params_vector, align 8, !dbg !7162
  %base = getelementptr inbounds %struct.VEC_ipa_node_params_t_heap, %struct.VEC_ipa_node_params_t_heap* %3, i32 0, i32 0, !dbg !7162
  br label %cond.end, !dbg !7162

cond.false:                                       ; preds = %if.end
  br label %cond.end, !dbg !7162

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_ipa_node_params_t_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !7162
  %call2 = call i32 @VEC_ipa_node_params_t_base_length(%struct.VEC_ipa_node_params_t_base* %cond), !dbg !7162
  %4 = load i32, i32* @cgraph_max_uid, align 4, !dbg !7164
  %cmp = icmp ule i32 %call2, %4, !dbg !7165
  br i1 %cmp, label %if.then3, label %if.end4, !dbg !7166

if.then3:                                         ; preds = %cond.end
  %5 = load i32, i32* @cgraph_max_uid, align 4, !dbg !7167
  %add = add nsw i32 %5, 1, !dbg !7167
  call void @VEC_ipa_node_params_t_heap_safe_grow_cleared(%struct.VEC_ipa_node_params_t_heap** @ipa_node_params_vector, i32 %add), !dbg !7167
  br label %if.end4, !dbg !7167

if.end4:                                          ; preds = %if.then3, %cond.end
  ret void, !dbg !7168
}

; Function Attrs: noinline nounwind uwtable
define internal void @ipa_check_create_edge_args() #0 !dbg !7169 {
entry:
  %0 = load %struct.VEC_ipa_edge_args_t_gc*, %struct.VEC_ipa_edge_args_t_gc** @ipa_edge_args_vector, align 8, !dbg !7170
  %tobool = icmp ne %struct.VEC_ipa_edge_args_t_gc* %0, null, !dbg !7170
  br i1 %tobool, label %if.end, label %if.then, !dbg !7172

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @cgraph_edge_max_uid, align 4, !dbg !7173
  %call = call %struct.VEC_ipa_edge_args_t_gc* @VEC_ipa_edge_args_t_gc_alloc(i32 %1), !dbg !7173
  store %struct.VEC_ipa_edge_args_t_gc* %call, %struct.VEC_ipa_edge_args_t_gc** @ipa_edge_args_vector, align 8, !dbg !7174
  br label %if.end, !dbg !7175

if.end:                                           ; preds = %if.then, %entry
  %2 = load %struct.VEC_ipa_edge_args_t_gc*, %struct.VEC_ipa_edge_args_t_gc** @ipa_edge_args_vector, align 8, !dbg !7176
  %tobool1 = icmp ne %struct.VEC_ipa_edge_args_t_gc* %2, null, !dbg !7176
  br i1 %tobool1, label %cond.true, label %cond.false, !dbg !7176

cond.true:                                        ; preds = %if.end
  %3 = load %struct.VEC_ipa_edge_args_t_gc*, %struct.VEC_ipa_edge_args_t_gc** @ipa_edge_args_vector, align 8, !dbg !7176
  %base = getelementptr inbounds %struct.VEC_ipa_edge_args_t_gc, %struct.VEC_ipa_edge_args_t_gc* %3, i32 0, i32 0, !dbg !7176
  br label %cond.end, !dbg !7176

cond.false:                                       ; preds = %if.end
  br label %cond.end, !dbg !7176

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_ipa_edge_args_t_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !7176
  %call2 = call i32 @VEC_ipa_edge_args_t_base_length(%struct.VEC_ipa_edge_args_t_base* %cond), !dbg !7176
  %4 = load i32, i32* @cgraph_edge_max_uid, align 4, !dbg !7178
  %cmp = icmp ule i32 %call2, %4, !dbg !7179
  br i1 %cmp, label %if.then3, label %if.end4, !dbg !7180

if.then3:                                         ; preds = %cond.end
  %5 = load i32, i32* @cgraph_edge_max_uid, align 4, !dbg !7181
  %add = add nsw i32 %5, 1, !dbg !7181
  call void @VEC_ipa_edge_args_t_gc_safe_grow_cleared(%struct.VEC_ipa_edge_args_t_gc** @ipa_edge_args_vector, i32 %add), !dbg !7181
  br label %if.end4, !dbg !7181

if.end4:                                          ; preds = %if.then3, %cond.end
  ret void, !dbg !7182
}

; Function Attrs: noinline nounwind uwtable
define internal void @analyze_function(%struct.cgraph_node* %node) #0 !dbg !7183 {
entry:
  %node.addr = alloca %struct.cgraph_node*, align 8
  store %struct.cgraph_node* %node, %struct.cgraph_node** %node.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %node.addr, metadata !7184, metadata !DIExpression()), !dbg !7185
  %0 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !7186
  %decl = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %0, i32 0, i32 0, !dbg !7186
  %1 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !7186
  %function_decl = bitcast %union.tree_node* %1 to %struct.tree_function_decl*, !dbg !7186
  %f = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl, i32 0, i32 1, !dbg !7186
  %2 = load %struct.function*, %struct.function** %f, align 8, !dbg !7186
  call void @push_cfun(%struct.function* %2), !dbg !7187
  %3 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !7188
  %decl1 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %3, i32 0, i32 0, !dbg !7189
  %4 = load %union.tree_node*, %union.tree_node** %decl1, align 8, !dbg !7189
  store %union.tree_node* %4, %union.tree_node** @current_function_decl, align 8, !dbg !7190
  %5 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !7191
  %call = call i32 @compute_inline_parameters(%struct.cgraph_node* %5), !dbg !7192
  %6 = load i32, i32* @flag_indirect_inlining, align 4, !dbg !7193
  %tobool = icmp ne i32 %6, 0, !dbg !7193
  br i1 %tobool, label %if.then, label %if.end, !dbg !7195

if.then:                                          ; preds = %entry
  %7 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !7196
  call void @inline_indirect_intraprocedural_analysis(%struct.cgraph_node* %7), !dbg !7197
  br label %if.end, !dbg !7197

if.end:                                           ; preds = %if.then, %entry
  store %union.tree_node* null, %union.tree_node** @current_function_decl, align 8, !dbg !7198
  call void @pop_cfun(), !dbg !7199
  ret void, !dbg !7200
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.VEC_ipa_node_params_t_heap* @VEC_ipa_node_params_t_heap_alloc(i32 %alloc_) #0 !dbg !7201 {
entry:
  %alloc_.addr = alloca i32, align 4
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !7204, metadata !DIExpression()), !dbg !7205
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !7205
  %call = call i8* @vec_heap_o_reserve_exact(i8* null, i32 %0, i64 8, i64 48), !dbg !7205
  %1 = bitcast i8* %call to %struct.VEC_ipa_node_params_t_heap*, !dbg !7205
  ret %struct.VEC_ipa_node_params_t_heap* %1, !dbg !7205
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_ipa_node_params_t_base_length(%struct.VEC_ipa_node_params_t_base* %vec_) #0 !dbg !7206 {
entry:
  %vec_.addr = alloca %struct.VEC_ipa_node_params_t_base*, align 8
  store %struct.VEC_ipa_node_params_t_base* %vec_, %struct.VEC_ipa_node_params_t_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_ipa_node_params_t_base** %vec_.addr, metadata !7211, metadata !DIExpression()), !dbg !7212
  %0 = load %struct.VEC_ipa_node_params_t_base*, %struct.VEC_ipa_node_params_t_base** %vec_.addr, align 8, !dbg !7212
  %tobool = icmp ne %struct.VEC_ipa_node_params_t_base* %0, null, !dbg !7212
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7212

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_ipa_node_params_t_base*, %struct.VEC_ipa_node_params_t_base** %vec_.addr, align 8, !dbg !7212
  %num = getelementptr inbounds %struct.VEC_ipa_node_params_t_base, %struct.VEC_ipa_node_params_t_base* %1, i32 0, i32 0, !dbg !7212
  %2 = load i32, i32* %num, align 8, !dbg !7212
  br label %cond.end, !dbg !7212

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7212

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !7212
  ret i32 %cond, !dbg !7212
}

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_ipa_node_params_t_heap_safe_grow_cleared(%struct.VEC_ipa_node_params_t_heap** %vec_, i32 %size_) #0 !dbg !7213 {
entry:
  %vec_.addr = alloca %struct.VEC_ipa_node_params_t_heap**, align 8
  %size_.addr = alloca i32, align 4
  %oldsize = alloca i32, align 4
  store %struct.VEC_ipa_node_params_t_heap** %vec_, %struct.VEC_ipa_node_params_t_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_ipa_node_params_t_heap*** %vec_.addr, metadata !7217, metadata !DIExpression()), !dbg !7218
  store i32 %size_, i32* %size_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %size_.addr, metadata !7219, metadata !DIExpression()), !dbg !7218
  call void @llvm.dbg.declare(metadata i32* %oldsize, metadata !7220, metadata !DIExpression()), !dbg !7218
  %0 = load %struct.VEC_ipa_node_params_t_heap**, %struct.VEC_ipa_node_params_t_heap*** %vec_.addr, align 8, !dbg !7218
  %1 = load %struct.VEC_ipa_node_params_t_heap*, %struct.VEC_ipa_node_params_t_heap** %0, align 8, !dbg !7218
  %tobool = icmp ne %struct.VEC_ipa_node_params_t_heap* %1, null, !dbg !7218
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7218

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_ipa_node_params_t_heap**, %struct.VEC_ipa_node_params_t_heap*** %vec_.addr, align 8, !dbg !7218
  %3 = load %struct.VEC_ipa_node_params_t_heap*, %struct.VEC_ipa_node_params_t_heap** %2, align 8, !dbg !7218
  %base = getelementptr inbounds %struct.VEC_ipa_node_params_t_heap, %struct.VEC_ipa_node_params_t_heap* %3, i32 0, i32 0, !dbg !7218
  br label %cond.end, !dbg !7218

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7218

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_ipa_node_params_t_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !7218
  %call = call i32 @VEC_ipa_node_params_t_base_length(%struct.VEC_ipa_node_params_t_base* %cond), !dbg !7218
  store i32 %call, i32* %oldsize, align 4, !dbg !7218
  %4 = load %struct.VEC_ipa_node_params_t_heap**, %struct.VEC_ipa_node_params_t_heap*** %vec_.addr, align 8, !dbg !7218
  %5 = load i32, i32* %size_.addr, align 4, !dbg !7218
  call void @VEC_ipa_node_params_t_heap_safe_grow(%struct.VEC_ipa_node_params_t_heap** %4, i32 %5), !dbg !7218
  %6 = load %struct.VEC_ipa_node_params_t_heap**, %struct.VEC_ipa_node_params_t_heap*** %vec_.addr, align 8, !dbg !7218
  %7 = load %struct.VEC_ipa_node_params_t_heap*, %struct.VEC_ipa_node_params_t_heap** %6, align 8, !dbg !7218
  %tobool1 = icmp ne %struct.VEC_ipa_node_params_t_heap* %7, null, !dbg !7218
  br i1 %tobool1, label %cond.true2, label %cond.false4, !dbg !7218

cond.true2:                                       ; preds = %cond.end
  %8 = load %struct.VEC_ipa_node_params_t_heap**, %struct.VEC_ipa_node_params_t_heap*** %vec_.addr, align 8, !dbg !7218
  %9 = load %struct.VEC_ipa_node_params_t_heap*, %struct.VEC_ipa_node_params_t_heap** %8, align 8, !dbg !7218
  %base3 = getelementptr inbounds %struct.VEC_ipa_node_params_t_heap, %struct.VEC_ipa_node_params_t_heap* %9, i32 0, i32 0, !dbg !7218
  br label %cond.end5, !dbg !7218

cond.false4:                                      ; preds = %cond.end
  br label %cond.end5, !dbg !7218

cond.end5:                                        ; preds = %cond.false4, %cond.true2
  %cond6 = phi %struct.VEC_ipa_node_params_t_base* [ %base3, %cond.true2 ], [ null, %cond.false4 ], !dbg !7218
  %call7 = call %struct.ipa_node_params* @VEC_ipa_node_params_t_base_address(%struct.VEC_ipa_node_params_t_base* %cond6), !dbg !7218
  %10 = load i32, i32* %oldsize, align 4, !dbg !7218
  %idxprom = sext i32 %10 to i64, !dbg !7218
  %arrayidx = getelementptr inbounds %struct.ipa_node_params, %struct.ipa_node_params* %call7, i64 %idxprom, !dbg !7218
  %11 = bitcast %struct.ipa_node_params* %arrayidx to i8*, !dbg !7218
  %12 = load i32, i32* %size_.addr, align 4, !dbg !7218
  %13 = load i32, i32* %oldsize, align 4, !dbg !7218
  %sub = sub nsw i32 %12, %13, !dbg !7218
  %conv = sext i32 %sub to i64, !dbg !7218
  %mul = mul i64 48, %conv, !dbg !7218
  call void @llvm.memset.p0i8.i64(i8* align 8 %11, i8 0, i64 %mul, i1 false), !dbg !7218
  ret void, !dbg !7218
}

declare dso_local i8* @vec_heap_o_reserve_exact(i8*, i32, i64, i64) #2

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_ipa_node_params_t_heap_safe_grow(%struct.VEC_ipa_node_params_t_heap** %vec_, i32 %size_) #0 !dbg !7221 {
entry:
  %vec_.addr = alloca %struct.VEC_ipa_node_params_t_heap**, align 8
  %size_.addr = alloca i32, align 4
  store %struct.VEC_ipa_node_params_t_heap** %vec_, %struct.VEC_ipa_node_params_t_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_ipa_node_params_t_heap*** %vec_.addr, metadata !7222, metadata !DIExpression()), !dbg !7223
  store i32 %size_, i32* %size_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %size_.addr, metadata !7224, metadata !DIExpression()), !dbg !7223
  %0 = load i32, i32* %size_.addr, align 4, !dbg !7223
  %cmp = icmp sge i32 %0, 0, !dbg !7223
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !7223

land.rhs:                                         ; preds = %entry
  %1 = load %struct.VEC_ipa_node_params_t_heap**, %struct.VEC_ipa_node_params_t_heap*** %vec_.addr, align 8, !dbg !7223
  %2 = load %struct.VEC_ipa_node_params_t_heap*, %struct.VEC_ipa_node_params_t_heap** %1, align 8, !dbg !7223
  %tobool = icmp ne %struct.VEC_ipa_node_params_t_heap* %2, null, !dbg !7223
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7223

cond.true:                                        ; preds = %land.rhs
  %3 = load %struct.VEC_ipa_node_params_t_heap**, %struct.VEC_ipa_node_params_t_heap*** %vec_.addr, align 8, !dbg !7223
  %4 = load %struct.VEC_ipa_node_params_t_heap*, %struct.VEC_ipa_node_params_t_heap** %3, align 8, !dbg !7223
  %base = getelementptr inbounds %struct.VEC_ipa_node_params_t_heap, %struct.VEC_ipa_node_params_t_heap* %4, i32 0, i32 0, !dbg !7223
  br label %cond.end, !dbg !7223

cond.false:                                       ; preds = %land.rhs
  br label %cond.end, !dbg !7223

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_ipa_node_params_t_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !7223
  %call = call i32 @VEC_ipa_node_params_t_base_length(%struct.VEC_ipa_node_params_t_base* %cond), !dbg !7223
  %5 = load i32, i32* %size_.addr, align 4, !dbg !7223
  %cmp1 = icmp ule i32 %call, %5, !dbg !7223
  br label %land.end

land.end:                                         ; preds = %cond.end, %entry
  %6 = phi i1 [ false, %entry ], [ %cmp1, %cond.end ], !dbg !7225
  %land.ext = zext i1 %6 to i32, !dbg !7223
  %7 = load %struct.VEC_ipa_node_params_t_heap**, %struct.VEC_ipa_node_params_t_heap*** %vec_.addr, align 8, !dbg !7223
  %8 = load i32, i32* %size_.addr, align 4, !dbg !7223
  %9 = load %struct.VEC_ipa_node_params_t_heap**, %struct.VEC_ipa_node_params_t_heap*** %vec_.addr, align 8, !dbg !7223
  %10 = load %struct.VEC_ipa_node_params_t_heap*, %struct.VEC_ipa_node_params_t_heap** %9, align 8, !dbg !7223
  %tobool2 = icmp ne %struct.VEC_ipa_node_params_t_heap* %10, null, !dbg !7223
  br i1 %tobool2, label %cond.true3, label %cond.false10, !dbg !7223

cond.true3:                                       ; preds = %land.end
  %11 = load %struct.VEC_ipa_node_params_t_heap**, %struct.VEC_ipa_node_params_t_heap*** %vec_.addr, align 8, !dbg !7223
  %12 = load %struct.VEC_ipa_node_params_t_heap*, %struct.VEC_ipa_node_params_t_heap** %11, align 8, !dbg !7223
  %tobool4 = icmp ne %struct.VEC_ipa_node_params_t_heap* %12, null, !dbg !7223
  br i1 %tobool4, label %cond.true5, label %cond.false7, !dbg !7223

cond.true5:                                       ; preds = %cond.true3
  %13 = load %struct.VEC_ipa_node_params_t_heap**, %struct.VEC_ipa_node_params_t_heap*** %vec_.addr, align 8, !dbg !7223
  %14 = load %struct.VEC_ipa_node_params_t_heap*, %struct.VEC_ipa_node_params_t_heap** %13, align 8, !dbg !7223
  %base6 = getelementptr inbounds %struct.VEC_ipa_node_params_t_heap, %struct.VEC_ipa_node_params_t_heap* %14, i32 0, i32 0, !dbg !7223
  br label %cond.end8, !dbg !7223

cond.false7:                                      ; preds = %cond.true3
  br label %cond.end8, !dbg !7223

cond.end8:                                        ; preds = %cond.false7, %cond.true5
  %cond9 = phi %struct.VEC_ipa_node_params_t_base* [ %base6, %cond.true5 ], [ null, %cond.false7 ], !dbg !7223
  %num = getelementptr inbounds %struct.VEC_ipa_node_params_t_base, %struct.VEC_ipa_node_params_t_base* %cond9, i32 0, i32 0, !dbg !7223
  %15 = load i32, i32* %num, align 8, !dbg !7223
  br label %cond.end11, !dbg !7223

cond.false10:                                     ; preds = %land.end
  br label %cond.end11, !dbg !7223

cond.end11:                                       ; preds = %cond.false10, %cond.end8
  %cond12 = phi i32 [ %15, %cond.end8 ], [ 0, %cond.false10 ], !dbg !7223
  %sub = sub nsw i32 %8, %cond12, !dbg !7223
  %call13 = call i32 @VEC_ipa_node_params_t_heap_reserve_exact(%struct.VEC_ipa_node_params_t_heap** %7, i32 %sub), !dbg !7223
  %16 = load i32, i32* %size_.addr, align 4, !dbg !7223
  %17 = load %struct.VEC_ipa_node_params_t_heap**, %struct.VEC_ipa_node_params_t_heap*** %vec_.addr, align 8, !dbg !7223
  %18 = load %struct.VEC_ipa_node_params_t_heap*, %struct.VEC_ipa_node_params_t_heap** %17, align 8, !dbg !7223
  %tobool14 = icmp ne %struct.VEC_ipa_node_params_t_heap* %18, null, !dbg !7223
  br i1 %tobool14, label %cond.true15, label %cond.false17, !dbg !7223

cond.true15:                                      ; preds = %cond.end11
  %19 = load %struct.VEC_ipa_node_params_t_heap**, %struct.VEC_ipa_node_params_t_heap*** %vec_.addr, align 8, !dbg !7223
  %20 = load %struct.VEC_ipa_node_params_t_heap*, %struct.VEC_ipa_node_params_t_heap** %19, align 8, !dbg !7223
  %base16 = getelementptr inbounds %struct.VEC_ipa_node_params_t_heap, %struct.VEC_ipa_node_params_t_heap* %20, i32 0, i32 0, !dbg !7223
  br label %cond.end18, !dbg !7223

cond.false17:                                     ; preds = %cond.end11
  br label %cond.end18, !dbg !7223

cond.end18:                                       ; preds = %cond.false17, %cond.true15
  %cond19 = phi %struct.VEC_ipa_node_params_t_base* [ %base16, %cond.true15 ], [ null, %cond.false17 ], !dbg !7223
  %num20 = getelementptr inbounds %struct.VEC_ipa_node_params_t_base, %struct.VEC_ipa_node_params_t_base* %cond19, i32 0, i32 0, !dbg !7223
  store i32 %16, i32* %num20, align 8, !dbg !7223
  ret void, !dbg !7223
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ipa_node_params* @VEC_ipa_node_params_t_base_address(%struct.VEC_ipa_node_params_t_base* %vec_) #0 !dbg !7226 {
entry:
  %vec_.addr = alloca %struct.VEC_ipa_node_params_t_base*, align 8
  store %struct.VEC_ipa_node_params_t_base* %vec_, %struct.VEC_ipa_node_params_t_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_ipa_node_params_t_base** %vec_.addr, metadata !7231, metadata !DIExpression()), !dbg !7232
  %0 = load %struct.VEC_ipa_node_params_t_base*, %struct.VEC_ipa_node_params_t_base** %vec_.addr, align 8, !dbg !7232
  %tobool = icmp ne %struct.VEC_ipa_node_params_t_base* %0, null, !dbg !7232
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7232

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_ipa_node_params_t_base*, %struct.VEC_ipa_node_params_t_base** %vec_.addr, align 8, !dbg !7232
  %vec = getelementptr inbounds %struct.VEC_ipa_node_params_t_base, %struct.VEC_ipa_node_params_t_base* %1, i32 0, i32 2, !dbg !7232
  %arraydecay = getelementptr inbounds [1 x %struct.ipa_node_params], [1 x %struct.ipa_node_params]* %vec, i64 0, i64 0, !dbg !7232
  br label %cond.end, !dbg !7232

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7232

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.ipa_node_params* [ %arraydecay, %cond.true ], [ null, %cond.false ], !dbg !7232
  ret %struct.ipa_node_params* %cond, !dbg !7232
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_ipa_node_params_t_heap_reserve_exact(%struct.VEC_ipa_node_params_t_heap** %vec_, i32 %alloc_) #0 !dbg !7233 {
entry:
  %vec_.addr = alloca %struct.VEC_ipa_node_params_t_heap**, align 8
  %alloc_.addr = alloca i32, align 4
  %extend = alloca i32, align 4
  store %struct.VEC_ipa_node_params_t_heap** %vec_, %struct.VEC_ipa_node_params_t_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_ipa_node_params_t_heap*** %vec_.addr, metadata !7236, metadata !DIExpression()), !dbg !7237
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !7238, metadata !DIExpression()), !dbg !7237
  call void @llvm.dbg.declare(metadata i32* %extend, metadata !7239, metadata !DIExpression()), !dbg !7237
  %0 = load %struct.VEC_ipa_node_params_t_heap**, %struct.VEC_ipa_node_params_t_heap*** %vec_.addr, align 8, !dbg !7237
  %1 = load %struct.VEC_ipa_node_params_t_heap*, %struct.VEC_ipa_node_params_t_heap** %0, align 8, !dbg !7237
  %tobool = icmp ne %struct.VEC_ipa_node_params_t_heap* %1, null, !dbg !7237
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7237

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_ipa_node_params_t_heap**, %struct.VEC_ipa_node_params_t_heap*** %vec_.addr, align 8, !dbg !7237
  %3 = load %struct.VEC_ipa_node_params_t_heap*, %struct.VEC_ipa_node_params_t_heap** %2, align 8, !dbg !7237
  %base = getelementptr inbounds %struct.VEC_ipa_node_params_t_heap, %struct.VEC_ipa_node_params_t_heap* %3, i32 0, i32 0, !dbg !7237
  br label %cond.end, !dbg !7237

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7237

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_ipa_node_params_t_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !7237
  %4 = load i32, i32* %alloc_.addr, align 4, !dbg !7237
  %call = call i32 @VEC_ipa_node_params_t_base_space(%struct.VEC_ipa_node_params_t_base* %cond, i32 %4), !dbg !7237
  %tobool1 = icmp ne i32 %call, 0, !dbg !7237
  %lnot = xor i1 %tobool1, true, !dbg !7237
  %lnot.ext = zext i1 %lnot to i32, !dbg !7237
  store i32 %lnot.ext, i32* %extend, align 4, !dbg !7237
  %5 = load i32, i32* %extend, align 4, !dbg !7240
  %tobool2 = icmp ne i32 %5, 0, !dbg !7240
  br i1 %tobool2, label %if.then, label %if.end, !dbg !7237

if.then:                                          ; preds = %cond.end
  %6 = load %struct.VEC_ipa_node_params_t_heap**, %struct.VEC_ipa_node_params_t_heap*** %vec_.addr, align 8, !dbg !7240
  %7 = load %struct.VEC_ipa_node_params_t_heap*, %struct.VEC_ipa_node_params_t_heap** %6, align 8, !dbg !7240
  %8 = bitcast %struct.VEC_ipa_node_params_t_heap* %7 to i8*, !dbg !7240
  %9 = load i32, i32* %alloc_.addr, align 4, !dbg !7240
  %call3 = call i8* @vec_heap_o_reserve_exact(i8* %8, i32 %9, i64 8, i64 48), !dbg !7240
  %10 = bitcast i8* %call3 to %struct.VEC_ipa_node_params_t_heap*, !dbg !7240
  %11 = load %struct.VEC_ipa_node_params_t_heap**, %struct.VEC_ipa_node_params_t_heap*** %vec_.addr, align 8, !dbg !7240
  store %struct.VEC_ipa_node_params_t_heap* %10, %struct.VEC_ipa_node_params_t_heap** %11, align 8, !dbg !7240
  br label %if.end, !dbg !7240

if.end:                                           ; preds = %if.then, %cond.end
  %12 = load i32, i32* %extend, align 4, !dbg !7237
  ret i32 %12, !dbg !7237
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_ipa_node_params_t_base_space(%struct.VEC_ipa_node_params_t_base* %vec_, i32 %alloc_) #0 !dbg !7242 {
entry:
  %vec_.addr = alloca %struct.VEC_ipa_node_params_t_base*, align 8
  %alloc_.addr = alloca i32, align 4
  store %struct.VEC_ipa_node_params_t_base* %vec_, %struct.VEC_ipa_node_params_t_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_ipa_node_params_t_base** %vec_.addr, metadata !7245, metadata !DIExpression()), !dbg !7246
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !7247, metadata !DIExpression()), !dbg !7246
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !7246
  %cmp = icmp sge i32 %0, 0, !dbg !7246
  %conv = zext i1 %cmp to i32, !dbg !7246
  %1 = load %struct.VEC_ipa_node_params_t_base*, %struct.VEC_ipa_node_params_t_base** %vec_.addr, align 8, !dbg !7246
  %tobool = icmp ne %struct.VEC_ipa_node_params_t_base* %1, null, !dbg !7246
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7246

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_ipa_node_params_t_base*, %struct.VEC_ipa_node_params_t_base** %vec_.addr, align 8, !dbg !7246
  %alloc = getelementptr inbounds %struct.VEC_ipa_node_params_t_base, %struct.VEC_ipa_node_params_t_base* %2, i32 0, i32 1, !dbg !7246
  %3 = load i32, i32* %alloc, align 4, !dbg !7246
  %4 = load %struct.VEC_ipa_node_params_t_base*, %struct.VEC_ipa_node_params_t_base** %vec_.addr, align 8, !dbg !7246
  %num = getelementptr inbounds %struct.VEC_ipa_node_params_t_base, %struct.VEC_ipa_node_params_t_base* %4, i32 0, i32 0, !dbg !7246
  %5 = load i32, i32* %num, align 8, !dbg !7246
  %sub = sub i32 %3, %5, !dbg !7246
  %6 = load i32, i32* %alloc_.addr, align 4, !dbg !7246
  %cmp1 = icmp uge i32 %sub, %6, !dbg !7246
  %conv2 = zext i1 %cmp1 to i32, !dbg !7246
  br label %cond.end, !dbg !7246

cond.false:                                       ; preds = %entry
  %7 = load i32, i32* %alloc_.addr, align 4, !dbg !7246
  %tobool3 = icmp ne i32 %7, 0, !dbg !7246
  %lnot = xor i1 %tobool3, true, !dbg !7246
  %lnot.ext = zext i1 %lnot to i32, !dbg !7246
  br label %cond.end, !dbg !7246

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv2, %cond.true ], [ %lnot.ext, %cond.false ], !dbg !7246
  ret i32 %cond, !dbg !7246
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.VEC_ipa_edge_args_t_gc* @VEC_ipa_edge_args_t_gc_alloc(i32 %alloc_) #0 !dbg !7248 {
entry:
  %alloc_.addr = alloca i32, align 4
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !7251, metadata !DIExpression()), !dbg !7252
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !7252
  %call = call i8* @vec_gc_o_reserve_exact(i8* null, i32 %0, i64 8, i64 16), !dbg !7252
  %1 = bitcast i8* %call to %struct.VEC_ipa_edge_args_t_gc*, !dbg !7252
  ret %struct.VEC_ipa_edge_args_t_gc* %1, !dbg !7252
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_ipa_edge_args_t_base_length(%struct.VEC_ipa_edge_args_t_base* %vec_) #0 !dbg !7253 {
entry:
  %vec_.addr = alloca %struct.VEC_ipa_edge_args_t_base*, align 8
  store %struct.VEC_ipa_edge_args_t_base* %vec_, %struct.VEC_ipa_edge_args_t_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_ipa_edge_args_t_base** %vec_.addr, metadata !7258, metadata !DIExpression()), !dbg !7259
  %0 = load %struct.VEC_ipa_edge_args_t_base*, %struct.VEC_ipa_edge_args_t_base** %vec_.addr, align 8, !dbg !7259
  %tobool = icmp ne %struct.VEC_ipa_edge_args_t_base* %0, null, !dbg !7259
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7259

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_ipa_edge_args_t_base*, %struct.VEC_ipa_edge_args_t_base** %vec_.addr, align 8, !dbg !7259
  %num = getelementptr inbounds %struct.VEC_ipa_edge_args_t_base, %struct.VEC_ipa_edge_args_t_base* %1, i32 0, i32 0, !dbg !7259
  %2 = load i32, i32* %num, align 8, !dbg !7259
  br label %cond.end, !dbg !7259

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7259

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !7259
  ret i32 %cond, !dbg !7259
}

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_ipa_edge_args_t_gc_safe_grow_cleared(%struct.VEC_ipa_edge_args_t_gc** %vec_, i32 %size_) #0 !dbg !7260 {
entry:
  %vec_.addr = alloca %struct.VEC_ipa_edge_args_t_gc**, align 8
  %size_.addr = alloca i32, align 4
  %oldsize = alloca i32, align 4
  store %struct.VEC_ipa_edge_args_t_gc** %vec_, %struct.VEC_ipa_edge_args_t_gc*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_ipa_edge_args_t_gc*** %vec_.addr, metadata !7264, metadata !DIExpression()), !dbg !7265
  store i32 %size_, i32* %size_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %size_.addr, metadata !7266, metadata !DIExpression()), !dbg !7265
  call void @llvm.dbg.declare(metadata i32* %oldsize, metadata !7267, metadata !DIExpression()), !dbg !7265
  %0 = load %struct.VEC_ipa_edge_args_t_gc**, %struct.VEC_ipa_edge_args_t_gc*** %vec_.addr, align 8, !dbg !7265
  %1 = load %struct.VEC_ipa_edge_args_t_gc*, %struct.VEC_ipa_edge_args_t_gc** %0, align 8, !dbg !7265
  %tobool = icmp ne %struct.VEC_ipa_edge_args_t_gc* %1, null, !dbg !7265
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7265

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_ipa_edge_args_t_gc**, %struct.VEC_ipa_edge_args_t_gc*** %vec_.addr, align 8, !dbg !7265
  %3 = load %struct.VEC_ipa_edge_args_t_gc*, %struct.VEC_ipa_edge_args_t_gc** %2, align 8, !dbg !7265
  %base = getelementptr inbounds %struct.VEC_ipa_edge_args_t_gc, %struct.VEC_ipa_edge_args_t_gc* %3, i32 0, i32 0, !dbg !7265
  br label %cond.end, !dbg !7265

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7265

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_ipa_edge_args_t_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !7265
  %call = call i32 @VEC_ipa_edge_args_t_base_length(%struct.VEC_ipa_edge_args_t_base* %cond), !dbg !7265
  store i32 %call, i32* %oldsize, align 4, !dbg !7265
  %4 = load %struct.VEC_ipa_edge_args_t_gc**, %struct.VEC_ipa_edge_args_t_gc*** %vec_.addr, align 8, !dbg !7265
  %5 = load i32, i32* %size_.addr, align 4, !dbg !7265
  call void @VEC_ipa_edge_args_t_gc_safe_grow(%struct.VEC_ipa_edge_args_t_gc** %4, i32 %5), !dbg !7265
  %6 = load %struct.VEC_ipa_edge_args_t_gc**, %struct.VEC_ipa_edge_args_t_gc*** %vec_.addr, align 8, !dbg !7265
  %7 = load %struct.VEC_ipa_edge_args_t_gc*, %struct.VEC_ipa_edge_args_t_gc** %6, align 8, !dbg !7265
  %tobool1 = icmp ne %struct.VEC_ipa_edge_args_t_gc* %7, null, !dbg !7265
  br i1 %tobool1, label %cond.true2, label %cond.false4, !dbg !7265

cond.true2:                                       ; preds = %cond.end
  %8 = load %struct.VEC_ipa_edge_args_t_gc**, %struct.VEC_ipa_edge_args_t_gc*** %vec_.addr, align 8, !dbg !7265
  %9 = load %struct.VEC_ipa_edge_args_t_gc*, %struct.VEC_ipa_edge_args_t_gc** %8, align 8, !dbg !7265
  %base3 = getelementptr inbounds %struct.VEC_ipa_edge_args_t_gc, %struct.VEC_ipa_edge_args_t_gc* %9, i32 0, i32 0, !dbg !7265
  br label %cond.end5, !dbg !7265

cond.false4:                                      ; preds = %cond.end
  br label %cond.end5, !dbg !7265

cond.end5:                                        ; preds = %cond.false4, %cond.true2
  %cond6 = phi %struct.VEC_ipa_edge_args_t_base* [ %base3, %cond.true2 ], [ null, %cond.false4 ], !dbg !7265
  %call7 = call %struct.ipa_edge_args* @VEC_ipa_edge_args_t_base_address(%struct.VEC_ipa_edge_args_t_base* %cond6), !dbg !7265
  %10 = load i32, i32* %oldsize, align 4, !dbg !7265
  %idxprom = sext i32 %10 to i64, !dbg !7265
  %arrayidx = getelementptr inbounds %struct.ipa_edge_args, %struct.ipa_edge_args* %call7, i64 %idxprom, !dbg !7265
  %11 = bitcast %struct.ipa_edge_args* %arrayidx to i8*, !dbg !7265
  %12 = load i32, i32* %size_.addr, align 4, !dbg !7265
  %13 = load i32, i32* %oldsize, align 4, !dbg !7265
  %sub = sub nsw i32 %12, %13, !dbg !7265
  %conv = sext i32 %sub to i64, !dbg !7265
  %mul = mul i64 16, %conv, !dbg !7265
  call void @llvm.memset.p0i8.i64(i8* align 8 %11, i8 0, i64 %mul, i1 false), !dbg !7265
  ret void, !dbg !7265
}

declare dso_local i8* @vec_gc_o_reserve_exact(i8*, i32, i64, i64) #2

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_ipa_edge_args_t_gc_safe_grow(%struct.VEC_ipa_edge_args_t_gc** %vec_, i32 %size_) #0 !dbg !7268 {
entry:
  %vec_.addr = alloca %struct.VEC_ipa_edge_args_t_gc**, align 8
  %size_.addr = alloca i32, align 4
  store %struct.VEC_ipa_edge_args_t_gc** %vec_, %struct.VEC_ipa_edge_args_t_gc*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_ipa_edge_args_t_gc*** %vec_.addr, metadata !7269, metadata !DIExpression()), !dbg !7270
  store i32 %size_, i32* %size_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %size_.addr, metadata !7271, metadata !DIExpression()), !dbg !7270
  %0 = load i32, i32* %size_.addr, align 4, !dbg !7270
  %cmp = icmp sge i32 %0, 0, !dbg !7270
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !7270

land.rhs:                                         ; preds = %entry
  %1 = load %struct.VEC_ipa_edge_args_t_gc**, %struct.VEC_ipa_edge_args_t_gc*** %vec_.addr, align 8, !dbg !7270
  %2 = load %struct.VEC_ipa_edge_args_t_gc*, %struct.VEC_ipa_edge_args_t_gc** %1, align 8, !dbg !7270
  %tobool = icmp ne %struct.VEC_ipa_edge_args_t_gc* %2, null, !dbg !7270
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7270

cond.true:                                        ; preds = %land.rhs
  %3 = load %struct.VEC_ipa_edge_args_t_gc**, %struct.VEC_ipa_edge_args_t_gc*** %vec_.addr, align 8, !dbg !7270
  %4 = load %struct.VEC_ipa_edge_args_t_gc*, %struct.VEC_ipa_edge_args_t_gc** %3, align 8, !dbg !7270
  %base = getelementptr inbounds %struct.VEC_ipa_edge_args_t_gc, %struct.VEC_ipa_edge_args_t_gc* %4, i32 0, i32 0, !dbg !7270
  br label %cond.end, !dbg !7270

cond.false:                                       ; preds = %land.rhs
  br label %cond.end, !dbg !7270

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_ipa_edge_args_t_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !7270
  %call = call i32 @VEC_ipa_edge_args_t_base_length(%struct.VEC_ipa_edge_args_t_base* %cond), !dbg !7270
  %5 = load i32, i32* %size_.addr, align 4, !dbg !7270
  %cmp1 = icmp ule i32 %call, %5, !dbg !7270
  br label %land.end

land.end:                                         ; preds = %cond.end, %entry
  %6 = phi i1 [ false, %entry ], [ %cmp1, %cond.end ], !dbg !7272
  %land.ext = zext i1 %6 to i32, !dbg !7270
  %7 = load %struct.VEC_ipa_edge_args_t_gc**, %struct.VEC_ipa_edge_args_t_gc*** %vec_.addr, align 8, !dbg !7270
  %8 = load i32, i32* %size_.addr, align 4, !dbg !7270
  %9 = load %struct.VEC_ipa_edge_args_t_gc**, %struct.VEC_ipa_edge_args_t_gc*** %vec_.addr, align 8, !dbg !7270
  %10 = load %struct.VEC_ipa_edge_args_t_gc*, %struct.VEC_ipa_edge_args_t_gc** %9, align 8, !dbg !7270
  %tobool2 = icmp ne %struct.VEC_ipa_edge_args_t_gc* %10, null, !dbg !7270
  br i1 %tobool2, label %cond.true3, label %cond.false10, !dbg !7270

cond.true3:                                       ; preds = %land.end
  %11 = load %struct.VEC_ipa_edge_args_t_gc**, %struct.VEC_ipa_edge_args_t_gc*** %vec_.addr, align 8, !dbg !7270
  %12 = load %struct.VEC_ipa_edge_args_t_gc*, %struct.VEC_ipa_edge_args_t_gc** %11, align 8, !dbg !7270
  %tobool4 = icmp ne %struct.VEC_ipa_edge_args_t_gc* %12, null, !dbg !7270
  br i1 %tobool4, label %cond.true5, label %cond.false7, !dbg !7270

cond.true5:                                       ; preds = %cond.true3
  %13 = load %struct.VEC_ipa_edge_args_t_gc**, %struct.VEC_ipa_edge_args_t_gc*** %vec_.addr, align 8, !dbg !7270
  %14 = load %struct.VEC_ipa_edge_args_t_gc*, %struct.VEC_ipa_edge_args_t_gc** %13, align 8, !dbg !7270
  %base6 = getelementptr inbounds %struct.VEC_ipa_edge_args_t_gc, %struct.VEC_ipa_edge_args_t_gc* %14, i32 0, i32 0, !dbg !7270
  br label %cond.end8, !dbg !7270

cond.false7:                                      ; preds = %cond.true3
  br label %cond.end8, !dbg !7270

cond.end8:                                        ; preds = %cond.false7, %cond.true5
  %cond9 = phi %struct.VEC_ipa_edge_args_t_base* [ %base6, %cond.true5 ], [ null, %cond.false7 ], !dbg !7270
  %num = getelementptr inbounds %struct.VEC_ipa_edge_args_t_base, %struct.VEC_ipa_edge_args_t_base* %cond9, i32 0, i32 0, !dbg !7270
  %15 = load i32, i32* %num, align 8, !dbg !7270
  br label %cond.end11, !dbg !7270

cond.false10:                                     ; preds = %land.end
  br label %cond.end11, !dbg !7270

cond.end11:                                       ; preds = %cond.false10, %cond.end8
  %cond12 = phi i32 [ %15, %cond.end8 ], [ 0, %cond.false10 ], !dbg !7270
  %sub = sub nsw i32 %8, %cond12, !dbg !7270
  %call13 = call i32 @VEC_ipa_edge_args_t_gc_reserve_exact(%struct.VEC_ipa_edge_args_t_gc** %7, i32 %sub), !dbg !7270
  %16 = load i32, i32* %size_.addr, align 4, !dbg !7270
  %17 = load %struct.VEC_ipa_edge_args_t_gc**, %struct.VEC_ipa_edge_args_t_gc*** %vec_.addr, align 8, !dbg !7270
  %18 = load %struct.VEC_ipa_edge_args_t_gc*, %struct.VEC_ipa_edge_args_t_gc** %17, align 8, !dbg !7270
  %tobool14 = icmp ne %struct.VEC_ipa_edge_args_t_gc* %18, null, !dbg !7270
  br i1 %tobool14, label %cond.true15, label %cond.false17, !dbg !7270

cond.true15:                                      ; preds = %cond.end11
  %19 = load %struct.VEC_ipa_edge_args_t_gc**, %struct.VEC_ipa_edge_args_t_gc*** %vec_.addr, align 8, !dbg !7270
  %20 = load %struct.VEC_ipa_edge_args_t_gc*, %struct.VEC_ipa_edge_args_t_gc** %19, align 8, !dbg !7270
  %base16 = getelementptr inbounds %struct.VEC_ipa_edge_args_t_gc, %struct.VEC_ipa_edge_args_t_gc* %20, i32 0, i32 0, !dbg !7270
  br label %cond.end18, !dbg !7270

cond.false17:                                     ; preds = %cond.end11
  br label %cond.end18, !dbg !7270

cond.end18:                                       ; preds = %cond.false17, %cond.true15
  %cond19 = phi %struct.VEC_ipa_edge_args_t_base* [ %base16, %cond.true15 ], [ null, %cond.false17 ], !dbg !7270
  %num20 = getelementptr inbounds %struct.VEC_ipa_edge_args_t_base, %struct.VEC_ipa_edge_args_t_base* %cond19, i32 0, i32 0, !dbg !7270
  store i32 %16, i32* %num20, align 8, !dbg !7270
  ret void, !dbg !7270
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ipa_edge_args* @VEC_ipa_edge_args_t_base_address(%struct.VEC_ipa_edge_args_t_base* %vec_) #0 !dbg !7273 {
entry:
  %vec_.addr = alloca %struct.VEC_ipa_edge_args_t_base*, align 8
  store %struct.VEC_ipa_edge_args_t_base* %vec_, %struct.VEC_ipa_edge_args_t_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_ipa_edge_args_t_base** %vec_.addr, metadata !7278, metadata !DIExpression()), !dbg !7279
  %0 = load %struct.VEC_ipa_edge_args_t_base*, %struct.VEC_ipa_edge_args_t_base** %vec_.addr, align 8, !dbg !7279
  %tobool = icmp ne %struct.VEC_ipa_edge_args_t_base* %0, null, !dbg !7279
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7279

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_ipa_edge_args_t_base*, %struct.VEC_ipa_edge_args_t_base** %vec_.addr, align 8, !dbg !7279
  %vec = getelementptr inbounds %struct.VEC_ipa_edge_args_t_base, %struct.VEC_ipa_edge_args_t_base* %1, i32 0, i32 2, !dbg !7279
  %arraydecay = getelementptr inbounds [1 x %struct.ipa_edge_args], [1 x %struct.ipa_edge_args]* %vec, i64 0, i64 0, !dbg !7279
  br label %cond.end, !dbg !7279

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7279

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.ipa_edge_args* [ %arraydecay, %cond.true ], [ null, %cond.false ], !dbg !7279
  ret %struct.ipa_edge_args* %cond, !dbg !7279
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_ipa_edge_args_t_gc_reserve_exact(%struct.VEC_ipa_edge_args_t_gc** %vec_, i32 %alloc_) #0 !dbg !7280 {
entry:
  %vec_.addr = alloca %struct.VEC_ipa_edge_args_t_gc**, align 8
  %alloc_.addr = alloca i32, align 4
  %extend = alloca i32, align 4
  store %struct.VEC_ipa_edge_args_t_gc** %vec_, %struct.VEC_ipa_edge_args_t_gc*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_ipa_edge_args_t_gc*** %vec_.addr, metadata !7283, metadata !DIExpression()), !dbg !7284
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !7285, metadata !DIExpression()), !dbg !7284
  call void @llvm.dbg.declare(metadata i32* %extend, metadata !7286, metadata !DIExpression()), !dbg !7284
  %0 = load %struct.VEC_ipa_edge_args_t_gc**, %struct.VEC_ipa_edge_args_t_gc*** %vec_.addr, align 8, !dbg !7284
  %1 = load %struct.VEC_ipa_edge_args_t_gc*, %struct.VEC_ipa_edge_args_t_gc** %0, align 8, !dbg !7284
  %tobool = icmp ne %struct.VEC_ipa_edge_args_t_gc* %1, null, !dbg !7284
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7284

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_ipa_edge_args_t_gc**, %struct.VEC_ipa_edge_args_t_gc*** %vec_.addr, align 8, !dbg !7284
  %3 = load %struct.VEC_ipa_edge_args_t_gc*, %struct.VEC_ipa_edge_args_t_gc** %2, align 8, !dbg !7284
  %base = getelementptr inbounds %struct.VEC_ipa_edge_args_t_gc, %struct.VEC_ipa_edge_args_t_gc* %3, i32 0, i32 0, !dbg !7284
  br label %cond.end, !dbg !7284

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7284

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_ipa_edge_args_t_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !7284
  %4 = load i32, i32* %alloc_.addr, align 4, !dbg !7284
  %call = call i32 @VEC_ipa_edge_args_t_base_space(%struct.VEC_ipa_edge_args_t_base* %cond, i32 %4), !dbg !7284
  %tobool1 = icmp ne i32 %call, 0, !dbg !7284
  %lnot = xor i1 %tobool1, true, !dbg !7284
  %lnot.ext = zext i1 %lnot to i32, !dbg !7284
  store i32 %lnot.ext, i32* %extend, align 4, !dbg !7284
  %5 = load i32, i32* %extend, align 4, !dbg !7287
  %tobool2 = icmp ne i32 %5, 0, !dbg !7287
  br i1 %tobool2, label %if.then, label %if.end, !dbg !7284

if.then:                                          ; preds = %cond.end
  %6 = load %struct.VEC_ipa_edge_args_t_gc**, %struct.VEC_ipa_edge_args_t_gc*** %vec_.addr, align 8, !dbg !7287
  %7 = load %struct.VEC_ipa_edge_args_t_gc*, %struct.VEC_ipa_edge_args_t_gc** %6, align 8, !dbg !7287
  %8 = bitcast %struct.VEC_ipa_edge_args_t_gc* %7 to i8*, !dbg !7287
  %9 = load i32, i32* %alloc_.addr, align 4, !dbg !7287
  %call3 = call i8* @vec_gc_o_reserve_exact(i8* %8, i32 %9, i64 8, i64 16), !dbg !7287
  %10 = bitcast i8* %call3 to %struct.VEC_ipa_edge_args_t_gc*, !dbg !7287
  %11 = load %struct.VEC_ipa_edge_args_t_gc**, %struct.VEC_ipa_edge_args_t_gc*** %vec_.addr, align 8, !dbg !7287
  store %struct.VEC_ipa_edge_args_t_gc* %10, %struct.VEC_ipa_edge_args_t_gc** %11, align 8, !dbg !7287
  br label %if.end, !dbg !7287

if.end:                                           ; preds = %if.then, %cond.end
  %12 = load i32, i32* %extend, align 4, !dbg !7284
  ret i32 %12, !dbg !7284
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_ipa_edge_args_t_base_space(%struct.VEC_ipa_edge_args_t_base* %vec_, i32 %alloc_) #0 !dbg !7289 {
entry:
  %vec_.addr = alloca %struct.VEC_ipa_edge_args_t_base*, align 8
  %alloc_.addr = alloca i32, align 4
  store %struct.VEC_ipa_edge_args_t_base* %vec_, %struct.VEC_ipa_edge_args_t_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_ipa_edge_args_t_base** %vec_.addr, metadata !7292, metadata !DIExpression()), !dbg !7293
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !7294, metadata !DIExpression()), !dbg !7293
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !7293
  %cmp = icmp sge i32 %0, 0, !dbg !7293
  %conv = zext i1 %cmp to i32, !dbg !7293
  %1 = load %struct.VEC_ipa_edge_args_t_base*, %struct.VEC_ipa_edge_args_t_base** %vec_.addr, align 8, !dbg !7293
  %tobool = icmp ne %struct.VEC_ipa_edge_args_t_base* %1, null, !dbg !7293
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7293

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_ipa_edge_args_t_base*, %struct.VEC_ipa_edge_args_t_base** %vec_.addr, align 8, !dbg !7293
  %alloc = getelementptr inbounds %struct.VEC_ipa_edge_args_t_base, %struct.VEC_ipa_edge_args_t_base* %2, i32 0, i32 1, !dbg !7293
  %3 = load i32, i32* %alloc, align 4, !dbg !7293
  %4 = load %struct.VEC_ipa_edge_args_t_base*, %struct.VEC_ipa_edge_args_t_base** %vec_.addr, align 8, !dbg !7293
  %num = getelementptr inbounds %struct.VEC_ipa_edge_args_t_base, %struct.VEC_ipa_edge_args_t_base* %4, i32 0, i32 0, !dbg !7293
  %5 = load i32, i32* %num, align 8, !dbg !7293
  %sub = sub i32 %3, %5, !dbg !7293
  %6 = load i32, i32* %alloc_.addr, align 4, !dbg !7293
  %cmp1 = icmp uge i32 %sub, %6, !dbg !7293
  %conv2 = zext i1 %cmp1 to i32, !dbg !7293
  br label %cond.end, !dbg !7293

cond.false:                                       ; preds = %entry
  %7 = load i32, i32* %alloc_.addr, align 4, !dbg !7293
  %tobool3 = icmp ne i32 %7, 0, !dbg !7293
  %lnot = xor i1 %tobool3, true, !dbg !7293
  %lnot.ext = zext i1 %lnot to i32, !dbg !7293
  br label %cond.end, !dbg !7293

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv2, %cond.true ], [ %lnot.ext, %cond.false ], !dbg !7293
  ret i32 %cond, !dbg !7293
}

declare dso_local void @push_cfun(%struct.function*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @inline_indirect_intraprocedural_analysis(%struct.cgraph_node* %node) #0 !dbg !7295 {
entry:
  %node.addr = alloca %struct.cgraph_node*, align 8
  %cs = alloca %struct.cgraph_edge*, align 8
  store %struct.cgraph_node* %node, %struct.cgraph_node** %node.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %node.addr, metadata !7296, metadata !DIExpression()), !dbg !7297
  call void @llvm.dbg.declare(metadata %struct.cgraph_edge** %cs, metadata !7298, metadata !DIExpression()), !dbg !7299
  %0 = load i32, i32* @flag_ipa_cp, align 4, !dbg !7300
  %tobool = icmp ne i32 %0, 0, !dbg !7300
  br i1 %tobool, label %if.end, label %if.then, !dbg !7302

if.then:                                          ; preds = %entry
  %1 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !7303
  call void @ipa_initialize_node_params(%struct.cgraph_node* %1), !dbg !7305
  %2 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !7306
  call void @ipa_detect_param_modifications(%struct.cgraph_node* %2), !dbg !7307
  br label %if.end, !dbg !7308

if.end:                                           ; preds = %if.then, %entry
  %3 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !7309
  call void @ipa_analyze_params_uses(%struct.cgraph_node* %3), !dbg !7310
  %4 = load i32, i32* @flag_ipa_cp, align 4, !dbg !7311
  %tobool1 = icmp ne i32 %4, 0, !dbg !7311
  br i1 %tobool1, label %if.end4, label %if.then2, !dbg !7313

if.then2:                                         ; preds = %if.end
  %5 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !7314
  %callees = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %5, i32 0, i32 1, !dbg !7316
  %6 = load %struct.cgraph_edge*, %struct.cgraph_edge** %callees, align 8, !dbg !7316
  store %struct.cgraph_edge* %6, %struct.cgraph_edge** %cs, align 8, !dbg !7317
  br label %for.cond, !dbg !7318

for.cond:                                         ; preds = %for.inc, %if.then2
  %7 = load %struct.cgraph_edge*, %struct.cgraph_edge** %cs, align 8, !dbg !7319
  %tobool3 = icmp ne %struct.cgraph_edge* %7, null, !dbg !7321
  br i1 %tobool3, label %for.body, label %for.end, !dbg !7321

for.body:                                         ; preds = %for.cond
  %8 = load %struct.cgraph_edge*, %struct.cgraph_edge** %cs, align 8, !dbg !7322
  call void @ipa_count_arguments(%struct.cgraph_edge* %8), !dbg !7324
  %9 = load %struct.cgraph_edge*, %struct.cgraph_edge** %cs, align 8, !dbg !7325
  call void @ipa_compute_jump_functions(%struct.cgraph_edge* %9), !dbg !7326
  br label %for.inc, !dbg !7327

for.inc:                                          ; preds = %for.body
  %10 = load %struct.cgraph_edge*, %struct.cgraph_edge** %cs, align 8, !dbg !7328
  %next_callee = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %10, i32 0, i32 6, !dbg !7329
  %11 = load %struct.cgraph_edge*, %struct.cgraph_edge** %next_callee, align 8, !dbg !7329
  store %struct.cgraph_edge* %11, %struct.cgraph_edge** %cs, align 8, !dbg !7330
  br label %for.cond, !dbg !7331, !llvm.loop !7332

for.end:                                          ; preds = %for.cond
  br label %if.end4, !dbg !7333

if.end4:                                          ; preds = %for.end, %if.end
  %12 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !7334
  %tobool5 = icmp ne %struct._IO_FILE* %12, null, !dbg !7334
  br i1 %tobool5, label %if.then6, label %if.end7, !dbg !7336

if.then6:                                         ; preds = %if.end4
  %13 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !7337
  %14 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !7339
  call void @ipa_print_node_params(%struct._IO_FILE* %13, %struct.cgraph_node* %14), !dbg !7340
  %15 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !7341
  %16 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !7342
  call void @ipa_print_node_jump_functions(%struct._IO_FILE* %15, %struct.cgraph_node* %16), !dbg !7343
  br label %if.end7, !dbg !7344

if.end7:                                          ; preds = %if.then6, %if.end4
  ret void, !dbg !7345
}

declare dso_local void @pop_cfun() #2

declare dso_local void @ipa_initialize_node_params(%struct.cgraph_node*) #2

declare dso_local void @ipa_detect_param_modifications(%struct.cgraph_node*) #2

declare dso_local void @ipa_analyze_params_uses(%struct.cgraph_node*) #2

declare dso_local void @ipa_count_arguments(%struct.cgraph_edge*) #2

declare dso_local void @ipa_compute_jump_functions(%struct.cgraph_edge*) #2

declare dso_local void @ipa_print_node_params(%struct._IO_FILE*, %struct.cgraph_node*) #2

declare dso_local void @ipa_print_node_jump_functions(%struct._IO_FILE*, %struct.cgraph_node*) #2

declare dso_local void @ipa_prop_write_jump_functions(%struct.cgraph_node_set_def*) #2

declare dso_local void @ipa_prop_read_jump_functions() #2

declare dso_local zeroext i8 @cgraph_preserve_function_body_p(%union.tree_node*) #2

declare dso_local %struct.cgraph_node* @save_inline_function_body(%struct.cgraph_node*) #2

declare dso_local i32 @execute_fixup_cfg() #2

declare dso_local void @gt_ggc_mx_cgraph_node(i8*) #2

declare dso_local i32 @ggc_set_mark(i8*) #2

declare dso_local void @gt_pch_nx_cgraph_node(i8*) #2

declare dso_local i32 @gt_pch_note_object(i8*, i8*, void (i8*, i8*, void (i8*, i8*)*, i8*)*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal void @gt_pch_pa_order(i8* %this_obj, i8* %x_p, void (i8*, i8*)* %op, i8* %cookie) #0 !dbg !7346 {
entry:
  %this_obj.addr = alloca i8*, align 8
  %x_p.addr = alloca i8*, align 8
  %op.addr = alloca void (i8*, i8*)*, align 8
  %cookie.addr = alloca i8*, align 8
  %i0 = alloca i64, align 8
  store i8* %this_obj, i8** %this_obj.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %this_obj.addr, metadata !7350, metadata !DIExpression()), !dbg !7351
  store i8* %x_p, i8** %x_p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %x_p.addr, metadata !7352, metadata !DIExpression()), !dbg !7353
  store void (i8*, i8*)* %op, void (i8*, i8*)** %op.addr, align 8
  call void @llvm.dbg.declare(metadata void (i8*, i8*)** %op.addr, metadata !7354, metadata !DIExpression()), !dbg !7355
  store i8* %cookie, i8** %cookie.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %cookie.addr, metadata !7356, metadata !DIExpression()), !dbg !7357
  %0 = load %struct.cgraph_node**, %struct.cgraph_node*** @order, align 8, !dbg !7358
  %cmp = icmp ne %struct.cgraph_node** %0, null, !dbg !7360
  br i1 %cmp, label %if.then, label %if.end10, !dbg !7361

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i64* %i0, metadata !7362, metadata !DIExpression()), !dbg !7364
  store i64 0, i64* %i0, align 8, !dbg !7365
  br label %for.cond, !dbg !7367

for.cond:                                         ; preds = %for.inc, %if.then
  %1 = load i64, i64* %i0, align 8, !dbg !7368
  %2 = load i32, i32* @nnodes, align 4, !dbg !7370
  %conv = sext i32 %2 to i64, !dbg !7371
  %cmp1 = icmp ne i64 %1, %conv, !dbg !7372
  br i1 %cmp1, label %for.body, label %for.end, !dbg !7373

for.body:                                         ; preds = %for.cond
  %3 = load %struct.cgraph_node**, %struct.cgraph_node*** @order, align 8, !dbg !7374
  %4 = bitcast %struct.cgraph_node** %3 to i8*, !dbg !7377
  %5 = load i8*, i8** %this_obj.addr, align 8, !dbg !7378
  %cmp3 = icmp eq i8* %4, %5, !dbg !7379
  br i1 %cmp3, label %if.then5, label %if.end, !dbg !7380

if.then5:                                         ; preds = %for.body
  %6 = load void (i8*, i8*)*, void (i8*, i8*)** %op.addr, align 8, !dbg !7381
  %7 = load %struct.cgraph_node**, %struct.cgraph_node*** @order, align 8, !dbg !7382
  %8 = load i64, i64* %i0, align 8, !dbg !7383
  %arrayidx = getelementptr inbounds %struct.cgraph_node*, %struct.cgraph_node** %7, i64 %8, !dbg !7382
  %9 = bitcast %struct.cgraph_node** %arrayidx to i8*, !dbg !7384
  %10 = load i8*, i8** %cookie.addr, align 8, !dbg !7385
  call void %6(i8* %9, i8* %10), !dbg !7381
  br label %if.end, !dbg !7381

if.end:                                           ; preds = %if.then5, %for.body
  br label %for.inc, !dbg !7386

for.inc:                                          ; preds = %if.end
  %11 = load i64, i64* %i0, align 8, !dbg !7387
  %inc = add i64 %11, 1, !dbg !7387
  store i64 %inc, i64* %i0, align 8, !dbg !7387
  br label %for.cond, !dbg !7388, !llvm.loop !7389

for.end:                                          ; preds = %for.cond
  %12 = load i8*, i8** %this_obj.addr, align 8, !dbg !7391
  %cmp6 = icmp eq i8* bitcast (%struct.cgraph_node*** @order to i8*), %12, !dbg !7393
  br i1 %cmp6, label %if.then8, label %if.end9, !dbg !7394

if.then8:                                         ; preds = %for.end
  %13 = load void (i8*, i8*)*, void (i8*, i8*)** %op.addr, align 8, !dbg !7395
  %14 = load i8*, i8** %cookie.addr, align 8, !dbg !7396
  call void %13(i8* bitcast (%struct.cgraph_node*** @order to i8*), i8* %14), !dbg !7395
  br label %if.end9, !dbg !7395

if.end9:                                          ; preds = %if.then8, %for.end
  br label %if.end10, !dbg !7397

if.end10:                                         ; preds = %if.end9, %entry
  ret void, !dbg !7398
}

attributes #0 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }

!llvm.dbg.cu = !{!2}
!llvm.module.flags = !{!2868, !2869, !2870}
!llvm.ident = !{!2871}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "overall_size", scope: !2, file: !3, line: 171, type: !1064, isLocal: true, isDefinition: true)
!2 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 10.0.1 (https://github.com/svkeerthy/IR2Vec-LoopOptimizationFramework.git 561ac470e63b728263a0ac06ef987886ac648486)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !1061, globals: !2810, splitDebugInlining: false, nameTableKind: None)
!3 = !DIFile(filename: "ipa-inline.c", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!4 = !{!5, !134, !329, !336, !342, !347, !352, !370, !377, !384, !391, !567, !590, !606, !729, !736, !742, !756, !795, !801, !827, !833, !840}
!5 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "machine_mode", file: !6, line: 7, baseType: !7, size: 32, elements: !8)
!6 = !DIFile(filename: "./insn-modes.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!7 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!8 = !{!9, !10, !11, !12, !13, !14, !15, !16, !17, !18, !19, !20, !21, !22, !23, !24, !25, !26, !27, !28, !29, !30, !31, !32, !33, !34, !35, !36, !37, !38, !39, !40, !41, !42, !43, !44, !45, !46, !47, !48, !49, !50, !51, !52, !53, !54, !55, !56, !57, !58, !59, !60, !61, !62, !63, !64, !65, !66, !67, !68, !69, !70, !71, !72, !73, !74, !75, !76, !77, !78, !79, !80, !81, !82, !83, !84, !85, !86, !87, !88, !89, !90, !91, !92, !93, !94, !95, !96, !97, !98, !99, !100, !101, !102, !103, !104, !105, !106, !107, !108, !109, !110, !111, !112, !113, !114, !115, !116, !117, !118, !119, !120, !121, !122, !123, !124, !125, !126, !127, !128, !129, !130, !131, !132, !133}
!9 = !DIEnumerator(name: "VOIDmode", value: 0, isUnsigned: true)
!10 = !DIEnumerator(name: "BLKmode", value: 1, isUnsigned: true)
!11 = !DIEnumerator(name: "CCmode", value: 2, isUnsigned: true)
!12 = !DIEnumerator(name: "CCGCmode", value: 3, isUnsigned: true)
!13 = !DIEnumerator(name: "CCGOCmode", value: 4, isUnsigned: true)
!14 = !DIEnumerator(name: "CCNOmode", value: 5, isUnsigned: true)
!15 = !DIEnumerator(name: "CCAmode", value: 6, isUnsigned: true)
!16 = !DIEnumerator(name: "CCCmode", value: 7, isUnsigned: true)
!17 = !DIEnumerator(name: "CCOmode", value: 8, isUnsigned: true)
!18 = !DIEnumerator(name: "CCSmode", value: 9, isUnsigned: true)
!19 = !DIEnumerator(name: "CCZmode", value: 10, isUnsigned: true)
!20 = !DIEnumerator(name: "CCFPmode", value: 11, isUnsigned: true)
!21 = !DIEnumerator(name: "CCFPUmode", value: 12, isUnsigned: true)
!22 = !DIEnumerator(name: "BImode", value: 13, isUnsigned: true)
!23 = !DIEnumerator(name: "QImode", value: 14, isUnsigned: true)
!24 = !DIEnumerator(name: "HImode", value: 15, isUnsigned: true)
!25 = !DIEnumerator(name: "SImode", value: 16, isUnsigned: true)
!26 = !DIEnumerator(name: "DImode", value: 17, isUnsigned: true)
!27 = !DIEnumerator(name: "TImode", value: 18, isUnsigned: true)
!28 = !DIEnumerator(name: "OImode", value: 19, isUnsigned: true)
!29 = !DIEnumerator(name: "QQmode", value: 20, isUnsigned: true)
!30 = !DIEnumerator(name: "HQmode", value: 21, isUnsigned: true)
!31 = !DIEnumerator(name: "SQmode", value: 22, isUnsigned: true)
!32 = !DIEnumerator(name: "DQmode", value: 23, isUnsigned: true)
!33 = !DIEnumerator(name: "TQmode", value: 24, isUnsigned: true)
!34 = !DIEnumerator(name: "UQQmode", value: 25, isUnsigned: true)
!35 = !DIEnumerator(name: "UHQmode", value: 26, isUnsigned: true)
!36 = !DIEnumerator(name: "USQmode", value: 27, isUnsigned: true)
!37 = !DIEnumerator(name: "UDQmode", value: 28, isUnsigned: true)
!38 = !DIEnumerator(name: "UTQmode", value: 29, isUnsigned: true)
!39 = !DIEnumerator(name: "HAmode", value: 30, isUnsigned: true)
!40 = !DIEnumerator(name: "SAmode", value: 31, isUnsigned: true)
!41 = !DIEnumerator(name: "DAmode", value: 32, isUnsigned: true)
!42 = !DIEnumerator(name: "TAmode", value: 33, isUnsigned: true)
!43 = !DIEnumerator(name: "UHAmode", value: 34, isUnsigned: true)
!44 = !DIEnumerator(name: "USAmode", value: 35, isUnsigned: true)
!45 = !DIEnumerator(name: "UDAmode", value: 36, isUnsigned: true)
!46 = !DIEnumerator(name: "UTAmode", value: 37, isUnsigned: true)
!47 = !DIEnumerator(name: "SFmode", value: 38, isUnsigned: true)
!48 = !DIEnumerator(name: "DFmode", value: 39, isUnsigned: true)
!49 = !DIEnumerator(name: "XFmode", value: 40, isUnsigned: true)
!50 = !DIEnumerator(name: "TFmode", value: 41, isUnsigned: true)
!51 = !DIEnumerator(name: "SDmode", value: 42, isUnsigned: true)
!52 = !DIEnumerator(name: "DDmode", value: 43, isUnsigned: true)
!53 = !DIEnumerator(name: "TDmode", value: 44, isUnsigned: true)
!54 = !DIEnumerator(name: "CQImode", value: 45, isUnsigned: true)
!55 = !DIEnumerator(name: "CHImode", value: 46, isUnsigned: true)
!56 = !DIEnumerator(name: "CSImode", value: 47, isUnsigned: true)
!57 = !DIEnumerator(name: "CDImode", value: 48, isUnsigned: true)
!58 = !DIEnumerator(name: "CTImode", value: 49, isUnsigned: true)
!59 = !DIEnumerator(name: "COImode", value: 50, isUnsigned: true)
!60 = !DIEnumerator(name: "SCmode", value: 51, isUnsigned: true)
!61 = !DIEnumerator(name: "DCmode", value: 52, isUnsigned: true)
!62 = !DIEnumerator(name: "XCmode", value: 53, isUnsigned: true)
!63 = !DIEnumerator(name: "TCmode", value: 54, isUnsigned: true)
!64 = !DIEnumerator(name: "V2QImode", value: 55, isUnsigned: true)
!65 = !DIEnumerator(name: "V4QImode", value: 56, isUnsigned: true)
!66 = !DIEnumerator(name: "V2HImode", value: 57, isUnsigned: true)
!67 = !DIEnumerator(name: "V1SImode", value: 58, isUnsigned: true)
!68 = !DIEnumerator(name: "V8QImode", value: 59, isUnsigned: true)
!69 = !DIEnumerator(name: "V4HImode", value: 60, isUnsigned: true)
!70 = !DIEnumerator(name: "V2SImode", value: 61, isUnsigned: true)
!71 = !DIEnumerator(name: "V1DImode", value: 62, isUnsigned: true)
!72 = !DIEnumerator(name: "V16QImode", value: 63, isUnsigned: true)
!73 = !DIEnumerator(name: "V8HImode", value: 64, isUnsigned: true)
!74 = !DIEnumerator(name: "V4SImode", value: 65, isUnsigned: true)
!75 = !DIEnumerator(name: "V2DImode", value: 66, isUnsigned: true)
!76 = !DIEnumerator(name: "V1TImode", value: 67, isUnsigned: true)
!77 = !DIEnumerator(name: "V32QImode", value: 68, isUnsigned: true)
!78 = !DIEnumerator(name: "V16HImode", value: 69, isUnsigned: true)
!79 = !DIEnumerator(name: "V8SImode", value: 70, isUnsigned: true)
!80 = !DIEnumerator(name: "V4DImode", value: 71, isUnsigned: true)
!81 = !DIEnumerator(name: "V2TImode", value: 72, isUnsigned: true)
!82 = !DIEnumerator(name: "V64QImode", value: 73, isUnsigned: true)
!83 = !DIEnumerator(name: "V32HImode", value: 74, isUnsigned: true)
!84 = !DIEnumerator(name: "V16SImode", value: 75, isUnsigned: true)
!85 = !DIEnumerator(name: "V8DImode", value: 76, isUnsigned: true)
!86 = !DIEnumerator(name: "V4TImode", value: 77, isUnsigned: true)
!87 = !DIEnumerator(name: "V2SFmode", value: 78, isUnsigned: true)
!88 = !DIEnumerator(name: "V4SFmode", value: 79, isUnsigned: true)
!89 = !DIEnumerator(name: "V2DFmode", value: 80, isUnsigned: true)
!90 = !DIEnumerator(name: "V8SFmode", value: 81, isUnsigned: true)
!91 = !DIEnumerator(name: "V4DFmode", value: 82, isUnsigned: true)
!92 = !DIEnumerator(name: "V2TFmode", value: 83, isUnsigned: true)
!93 = !DIEnumerator(name: "V16SFmode", value: 84, isUnsigned: true)
!94 = !DIEnumerator(name: "V8DFmode", value: 85, isUnsigned: true)
!95 = !DIEnumerator(name: "V4TFmode", value: 86, isUnsigned: true)
!96 = !DIEnumerator(name: "MAX_MACHINE_MODE", value: 87, isUnsigned: true)
!97 = !DIEnumerator(name: "MIN_MODE_RANDOM", value: 0, isUnsigned: true)
!98 = !DIEnumerator(name: "MAX_MODE_RANDOM", value: 1, isUnsigned: true)
!99 = !DIEnumerator(name: "MIN_MODE_CC", value: 2, isUnsigned: true)
!100 = !DIEnumerator(name: "MAX_MODE_CC", value: 12, isUnsigned: true)
!101 = !DIEnumerator(name: "MIN_MODE_INT", value: 14, isUnsigned: true)
!102 = !DIEnumerator(name: "MAX_MODE_INT", value: 19, isUnsigned: true)
!103 = !DIEnumerator(name: "MIN_MODE_PARTIAL_INT", value: 0, isUnsigned: true)
!104 = !DIEnumerator(name: "MAX_MODE_PARTIAL_INT", value: 0, isUnsigned: true)
!105 = !DIEnumerator(name: "MIN_MODE_FRACT", value: 20, isUnsigned: true)
!106 = !DIEnumerator(name: "MAX_MODE_FRACT", value: 24, isUnsigned: true)
!107 = !DIEnumerator(name: "MIN_MODE_UFRACT", value: 25, isUnsigned: true)
!108 = !DIEnumerator(name: "MAX_MODE_UFRACT", value: 29, isUnsigned: true)
!109 = !DIEnumerator(name: "MIN_MODE_ACCUM", value: 30, isUnsigned: true)
!110 = !DIEnumerator(name: "MAX_MODE_ACCUM", value: 33, isUnsigned: true)
!111 = !DIEnumerator(name: "MIN_MODE_UACCUM", value: 34, isUnsigned: true)
!112 = !DIEnumerator(name: "MAX_MODE_UACCUM", value: 37, isUnsigned: true)
!113 = !DIEnumerator(name: "MIN_MODE_FLOAT", value: 38, isUnsigned: true)
!114 = !DIEnumerator(name: "MAX_MODE_FLOAT", value: 41, isUnsigned: true)
!115 = !DIEnumerator(name: "MIN_MODE_DECIMAL_FLOAT", value: 42, isUnsigned: true)
!116 = !DIEnumerator(name: "MAX_MODE_DECIMAL_FLOAT", value: 44, isUnsigned: true)
!117 = !DIEnumerator(name: "MIN_MODE_COMPLEX_INT", value: 45, isUnsigned: true)
!118 = !DIEnumerator(name: "MAX_MODE_COMPLEX_INT", value: 50, isUnsigned: true)
!119 = !DIEnumerator(name: "MIN_MODE_COMPLEX_FLOAT", value: 51, isUnsigned: true)
!120 = !DIEnumerator(name: "MAX_MODE_COMPLEX_FLOAT", value: 54, isUnsigned: true)
!121 = !DIEnumerator(name: "MIN_MODE_VECTOR_INT", value: 55, isUnsigned: true)
!122 = !DIEnumerator(name: "MAX_MODE_VECTOR_INT", value: 77, isUnsigned: true)
!123 = !DIEnumerator(name: "MIN_MODE_VECTOR_FRACT", value: 0, isUnsigned: true)
!124 = !DIEnumerator(name: "MAX_MODE_VECTOR_FRACT", value: 0, isUnsigned: true)
!125 = !DIEnumerator(name: "MIN_MODE_VECTOR_UFRACT", value: 0, isUnsigned: true)
!126 = !DIEnumerator(name: "MAX_MODE_VECTOR_UFRACT", value: 0, isUnsigned: true)
!127 = !DIEnumerator(name: "MIN_MODE_VECTOR_ACCUM", value: 0, isUnsigned: true)
!128 = !DIEnumerator(name: "MAX_MODE_VECTOR_ACCUM", value: 0, isUnsigned: true)
!129 = !DIEnumerator(name: "MIN_MODE_VECTOR_UACCUM", value: 0, isUnsigned: true)
!130 = !DIEnumerator(name: "MAX_MODE_VECTOR_UACCUM", value: 0, isUnsigned: true)
!131 = !DIEnumerator(name: "MIN_MODE_VECTOR_FLOAT", value: 78, isUnsigned: true)
!132 = !DIEnumerator(name: "MAX_MODE_VECTOR_FLOAT", value: 86, isUnsigned: true)
!133 = !DIEnumerator(name: "NUM_MACHINE_MODES", value: 87, isUnsigned: true)
!134 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_code", file: !135, line: 39, baseType: !7, size: 32, elements: !136)
!135 = !DIFile(filename: "./tree.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!136 = !{!137, !138, !139, !140, !141, !142, !143, !144, !145, !146, !147, !148, !149, !150, !151, !152, !153, !154, !155, !156, !157, !158, !159, !160, !161, !162, !163, !164, !165, !166, !167, !168, !169, !170, !171, !172, !173, !174, !175, !176, !177, !178, !179, !180, !181, !182, !183, !184, !185, !186, !187, !188, !189, !190, !191, !192, !193, !194, !195, !196, !197, !198, !199, !200, !201, !202, !203, !204, !205, !206, !207, !208, !209, !210, !211, !212, !213, !214, !215, !216, !217, !218, !219, !220, !221, !222, !223, !224, !225, !226, !227, !228, !229, !230, !231, !232, !233, !234, !235, !236, !237, !238, !239, !240, !241, !242, !243, !244, !245, !246, !247, !248, !249, !250, !251, !252, !253, !254, !255, !256, !257, !258, !259, !260, !261, !262, !263, !264, !265, !266, !267, !268, !269, !270, !271, !272, !273, !274, !275, !276, !277, !278, !279, !280, !281, !282, !283, !284, !285, !286, !287, !288, !289, !290, !291, !292, !293, !294, !295, !296, !297, !298, !299, !300, !301, !302, !303, !304, !305, !306, !307, !308, !309, !310, !311, !312, !313, !314, !315, !316, !317, !318, !319, !320, !321, !322, !323, !324, !325, !326, !327, !328}
!137 = !DIEnumerator(name: "ERROR_MARK", value: 0, isUnsigned: true)
!138 = !DIEnumerator(name: "IDENTIFIER_NODE", value: 1, isUnsigned: true)
!139 = !DIEnumerator(name: "TREE_LIST", value: 2, isUnsigned: true)
!140 = !DIEnumerator(name: "TREE_VEC", value: 3, isUnsigned: true)
!141 = !DIEnumerator(name: "BLOCK", value: 4, isUnsigned: true)
!142 = !DIEnumerator(name: "OFFSET_TYPE", value: 5, isUnsigned: true)
!143 = !DIEnumerator(name: "ENUMERAL_TYPE", value: 6, isUnsigned: true)
!144 = !DIEnumerator(name: "BOOLEAN_TYPE", value: 7, isUnsigned: true)
!145 = !DIEnumerator(name: "INTEGER_TYPE", value: 8, isUnsigned: true)
!146 = !DIEnumerator(name: "REAL_TYPE", value: 9, isUnsigned: true)
!147 = !DIEnumerator(name: "POINTER_TYPE", value: 10, isUnsigned: true)
!148 = !DIEnumerator(name: "FIXED_POINT_TYPE", value: 11, isUnsigned: true)
!149 = !DIEnumerator(name: "REFERENCE_TYPE", value: 12, isUnsigned: true)
!150 = !DIEnumerator(name: "COMPLEX_TYPE", value: 13, isUnsigned: true)
!151 = !DIEnumerator(name: "VECTOR_TYPE", value: 14, isUnsigned: true)
!152 = !DIEnumerator(name: "ARRAY_TYPE", value: 15, isUnsigned: true)
!153 = !DIEnumerator(name: "RECORD_TYPE", value: 16, isUnsigned: true)
!154 = !DIEnumerator(name: "UNION_TYPE", value: 17, isUnsigned: true)
!155 = !DIEnumerator(name: "QUAL_UNION_TYPE", value: 18, isUnsigned: true)
!156 = !DIEnumerator(name: "VOID_TYPE", value: 19, isUnsigned: true)
!157 = !DIEnumerator(name: "FUNCTION_TYPE", value: 20, isUnsigned: true)
!158 = !DIEnumerator(name: "METHOD_TYPE", value: 21, isUnsigned: true)
!159 = !DIEnumerator(name: "LANG_TYPE", value: 22, isUnsigned: true)
!160 = !DIEnumerator(name: "INTEGER_CST", value: 23, isUnsigned: true)
!161 = !DIEnumerator(name: "REAL_CST", value: 24, isUnsigned: true)
!162 = !DIEnumerator(name: "FIXED_CST", value: 25, isUnsigned: true)
!163 = !DIEnumerator(name: "COMPLEX_CST", value: 26, isUnsigned: true)
!164 = !DIEnumerator(name: "VECTOR_CST", value: 27, isUnsigned: true)
!165 = !DIEnumerator(name: "STRING_CST", value: 28, isUnsigned: true)
!166 = !DIEnumerator(name: "FUNCTION_DECL", value: 29, isUnsigned: true)
!167 = !DIEnumerator(name: "LABEL_DECL", value: 30, isUnsigned: true)
!168 = !DIEnumerator(name: "FIELD_DECL", value: 31, isUnsigned: true)
!169 = !DIEnumerator(name: "VAR_DECL", value: 32, isUnsigned: true)
!170 = !DIEnumerator(name: "CONST_DECL", value: 33, isUnsigned: true)
!171 = !DIEnumerator(name: "PARM_DECL", value: 34, isUnsigned: true)
!172 = !DIEnumerator(name: "TYPE_DECL", value: 35, isUnsigned: true)
!173 = !DIEnumerator(name: "RESULT_DECL", value: 36, isUnsigned: true)
!174 = !DIEnumerator(name: "DEBUG_EXPR_DECL", value: 37, isUnsigned: true)
!175 = !DIEnumerator(name: "NAMESPACE_DECL", value: 38, isUnsigned: true)
!176 = !DIEnumerator(name: "IMPORTED_DECL", value: 39, isUnsigned: true)
!177 = !DIEnumerator(name: "TRANSLATION_UNIT_DECL", value: 40, isUnsigned: true)
!178 = !DIEnumerator(name: "COMPONENT_REF", value: 41, isUnsigned: true)
!179 = !DIEnumerator(name: "BIT_FIELD_REF", value: 42, isUnsigned: true)
!180 = !DIEnumerator(name: "REALPART_EXPR", value: 43, isUnsigned: true)
!181 = !DIEnumerator(name: "IMAGPART_EXPR", value: 44, isUnsigned: true)
!182 = !DIEnumerator(name: "ARRAY_REF", value: 45, isUnsigned: true)
!183 = !DIEnumerator(name: "ARRAY_RANGE_REF", value: 46, isUnsigned: true)
!184 = !DIEnumerator(name: "INDIRECT_REF", value: 47, isUnsigned: true)
!185 = !DIEnumerator(name: "ALIGN_INDIRECT_REF", value: 48, isUnsigned: true)
!186 = !DIEnumerator(name: "MISALIGNED_INDIRECT_REF", value: 49, isUnsigned: true)
!187 = !DIEnumerator(name: "OBJ_TYPE_REF", value: 50, isUnsigned: true)
!188 = !DIEnumerator(name: "CONSTRUCTOR", value: 51, isUnsigned: true)
!189 = !DIEnumerator(name: "COMPOUND_EXPR", value: 52, isUnsigned: true)
!190 = !DIEnumerator(name: "MODIFY_EXPR", value: 53, isUnsigned: true)
!191 = !DIEnumerator(name: "INIT_EXPR", value: 54, isUnsigned: true)
!192 = !DIEnumerator(name: "TARGET_EXPR", value: 55, isUnsigned: true)
!193 = !DIEnumerator(name: "COND_EXPR", value: 56, isUnsigned: true)
!194 = !DIEnumerator(name: "VEC_COND_EXPR", value: 57, isUnsigned: true)
!195 = !DIEnumerator(name: "BIND_EXPR", value: 58, isUnsigned: true)
!196 = !DIEnumerator(name: "CALL_EXPR", value: 59, isUnsigned: true)
!197 = !DIEnumerator(name: "WITH_CLEANUP_EXPR", value: 60, isUnsigned: true)
!198 = !DIEnumerator(name: "CLEANUP_POINT_EXPR", value: 61, isUnsigned: true)
!199 = !DIEnumerator(name: "PLACEHOLDER_EXPR", value: 62, isUnsigned: true)
!200 = !DIEnumerator(name: "PLUS_EXPR", value: 63, isUnsigned: true)
!201 = !DIEnumerator(name: "MINUS_EXPR", value: 64, isUnsigned: true)
!202 = !DIEnumerator(name: "MULT_EXPR", value: 65, isUnsigned: true)
!203 = !DIEnumerator(name: "POINTER_PLUS_EXPR", value: 66, isUnsigned: true)
!204 = !DIEnumerator(name: "TRUNC_DIV_EXPR", value: 67, isUnsigned: true)
!205 = !DIEnumerator(name: "CEIL_DIV_EXPR", value: 68, isUnsigned: true)
!206 = !DIEnumerator(name: "FLOOR_DIV_EXPR", value: 69, isUnsigned: true)
!207 = !DIEnumerator(name: "ROUND_DIV_EXPR", value: 70, isUnsigned: true)
!208 = !DIEnumerator(name: "TRUNC_MOD_EXPR", value: 71, isUnsigned: true)
!209 = !DIEnumerator(name: "CEIL_MOD_EXPR", value: 72, isUnsigned: true)
!210 = !DIEnumerator(name: "FLOOR_MOD_EXPR", value: 73, isUnsigned: true)
!211 = !DIEnumerator(name: "ROUND_MOD_EXPR", value: 74, isUnsigned: true)
!212 = !DIEnumerator(name: "RDIV_EXPR", value: 75, isUnsigned: true)
!213 = !DIEnumerator(name: "EXACT_DIV_EXPR", value: 76, isUnsigned: true)
!214 = !DIEnumerator(name: "FIX_TRUNC_EXPR", value: 77, isUnsigned: true)
!215 = !DIEnumerator(name: "FLOAT_EXPR", value: 78, isUnsigned: true)
!216 = !DIEnumerator(name: "NEGATE_EXPR", value: 79, isUnsigned: true)
!217 = !DIEnumerator(name: "MIN_EXPR", value: 80, isUnsigned: true)
!218 = !DIEnumerator(name: "MAX_EXPR", value: 81, isUnsigned: true)
!219 = !DIEnumerator(name: "ABS_EXPR", value: 82, isUnsigned: true)
!220 = !DIEnumerator(name: "LSHIFT_EXPR", value: 83, isUnsigned: true)
!221 = !DIEnumerator(name: "RSHIFT_EXPR", value: 84, isUnsigned: true)
!222 = !DIEnumerator(name: "LROTATE_EXPR", value: 85, isUnsigned: true)
!223 = !DIEnumerator(name: "RROTATE_EXPR", value: 86, isUnsigned: true)
!224 = !DIEnumerator(name: "BIT_IOR_EXPR", value: 87, isUnsigned: true)
!225 = !DIEnumerator(name: "BIT_XOR_EXPR", value: 88, isUnsigned: true)
!226 = !DIEnumerator(name: "BIT_AND_EXPR", value: 89, isUnsigned: true)
!227 = !DIEnumerator(name: "BIT_NOT_EXPR", value: 90, isUnsigned: true)
!228 = !DIEnumerator(name: "TRUTH_ANDIF_EXPR", value: 91, isUnsigned: true)
!229 = !DIEnumerator(name: "TRUTH_ORIF_EXPR", value: 92, isUnsigned: true)
!230 = !DIEnumerator(name: "TRUTH_AND_EXPR", value: 93, isUnsigned: true)
!231 = !DIEnumerator(name: "TRUTH_OR_EXPR", value: 94, isUnsigned: true)
!232 = !DIEnumerator(name: "TRUTH_XOR_EXPR", value: 95, isUnsigned: true)
!233 = !DIEnumerator(name: "TRUTH_NOT_EXPR", value: 96, isUnsigned: true)
!234 = !DIEnumerator(name: "LT_EXPR", value: 97, isUnsigned: true)
!235 = !DIEnumerator(name: "LE_EXPR", value: 98, isUnsigned: true)
!236 = !DIEnumerator(name: "GT_EXPR", value: 99, isUnsigned: true)
!237 = !DIEnumerator(name: "GE_EXPR", value: 100, isUnsigned: true)
!238 = !DIEnumerator(name: "EQ_EXPR", value: 101, isUnsigned: true)
!239 = !DIEnumerator(name: "NE_EXPR", value: 102, isUnsigned: true)
!240 = !DIEnumerator(name: "UNORDERED_EXPR", value: 103, isUnsigned: true)
!241 = !DIEnumerator(name: "ORDERED_EXPR", value: 104, isUnsigned: true)
!242 = !DIEnumerator(name: "UNLT_EXPR", value: 105, isUnsigned: true)
!243 = !DIEnumerator(name: "UNLE_EXPR", value: 106, isUnsigned: true)
!244 = !DIEnumerator(name: "UNGT_EXPR", value: 107, isUnsigned: true)
!245 = !DIEnumerator(name: "UNGE_EXPR", value: 108, isUnsigned: true)
!246 = !DIEnumerator(name: "UNEQ_EXPR", value: 109, isUnsigned: true)
!247 = !DIEnumerator(name: "LTGT_EXPR", value: 110, isUnsigned: true)
!248 = !DIEnumerator(name: "RANGE_EXPR", value: 111, isUnsigned: true)
!249 = !DIEnumerator(name: "PAREN_EXPR", value: 112, isUnsigned: true)
!250 = !DIEnumerator(name: "CONVERT_EXPR", value: 113, isUnsigned: true)
!251 = !DIEnumerator(name: "ADDR_SPACE_CONVERT_EXPR", value: 114, isUnsigned: true)
!252 = !DIEnumerator(name: "FIXED_CONVERT_EXPR", value: 115, isUnsigned: true)
!253 = !DIEnumerator(name: "NOP_EXPR", value: 116, isUnsigned: true)
!254 = !DIEnumerator(name: "NON_LVALUE_EXPR", value: 117, isUnsigned: true)
!255 = !DIEnumerator(name: "VIEW_CONVERT_EXPR", value: 118, isUnsigned: true)
!256 = !DIEnumerator(name: "COMPOUND_LITERAL_EXPR", value: 119, isUnsigned: true)
!257 = !DIEnumerator(name: "SAVE_EXPR", value: 120, isUnsigned: true)
!258 = !DIEnumerator(name: "ADDR_EXPR", value: 121, isUnsigned: true)
!259 = !DIEnumerator(name: "FDESC_EXPR", value: 122, isUnsigned: true)
!260 = !DIEnumerator(name: "COMPLEX_EXPR", value: 123, isUnsigned: true)
!261 = !DIEnumerator(name: "CONJ_EXPR", value: 124, isUnsigned: true)
!262 = !DIEnumerator(name: "PREDECREMENT_EXPR", value: 125, isUnsigned: true)
!263 = !DIEnumerator(name: "PREINCREMENT_EXPR", value: 126, isUnsigned: true)
!264 = !DIEnumerator(name: "POSTDECREMENT_EXPR", value: 127, isUnsigned: true)
!265 = !DIEnumerator(name: "POSTINCREMENT_EXPR", value: 128, isUnsigned: true)
!266 = !DIEnumerator(name: "VA_ARG_EXPR", value: 129, isUnsigned: true)
!267 = !DIEnumerator(name: "TRY_CATCH_EXPR", value: 130, isUnsigned: true)
!268 = !DIEnumerator(name: "TRY_FINALLY_EXPR", value: 131, isUnsigned: true)
!269 = !DIEnumerator(name: "DECL_EXPR", value: 132, isUnsigned: true)
!270 = !DIEnumerator(name: "LABEL_EXPR", value: 133, isUnsigned: true)
!271 = !DIEnumerator(name: "GOTO_EXPR", value: 134, isUnsigned: true)
!272 = !DIEnumerator(name: "RETURN_EXPR", value: 135, isUnsigned: true)
!273 = !DIEnumerator(name: "EXIT_EXPR", value: 136, isUnsigned: true)
!274 = !DIEnumerator(name: "LOOP_EXPR", value: 137, isUnsigned: true)
!275 = !DIEnumerator(name: "SWITCH_EXPR", value: 138, isUnsigned: true)
!276 = !DIEnumerator(name: "CASE_LABEL_EXPR", value: 139, isUnsigned: true)
!277 = !DIEnumerator(name: "ASM_EXPR", value: 140, isUnsigned: true)
!278 = !DIEnumerator(name: "SSA_NAME", value: 141, isUnsigned: true)
!279 = !DIEnumerator(name: "CATCH_EXPR", value: 142, isUnsigned: true)
!280 = !DIEnumerator(name: "EH_FILTER_EXPR", value: 143, isUnsigned: true)
!281 = !DIEnumerator(name: "SCEV_KNOWN", value: 144, isUnsigned: true)
!282 = !DIEnumerator(name: "SCEV_NOT_KNOWN", value: 145, isUnsigned: true)
!283 = !DIEnumerator(name: "POLYNOMIAL_CHREC", value: 146, isUnsigned: true)
!284 = !DIEnumerator(name: "STATEMENT_LIST", value: 147, isUnsigned: true)
!285 = !DIEnumerator(name: "ASSERT_EXPR", value: 148, isUnsigned: true)
!286 = !DIEnumerator(name: "TREE_BINFO", value: 149, isUnsigned: true)
!287 = !DIEnumerator(name: "WITH_SIZE_EXPR", value: 150, isUnsigned: true)
!288 = !DIEnumerator(name: "REALIGN_LOAD_EXPR", value: 151, isUnsigned: true)
!289 = !DIEnumerator(name: "TARGET_MEM_REF", value: 152, isUnsigned: true)
!290 = !DIEnumerator(name: "OMP_PARALLEL", value: 153, isUnsigned: true)
!291 = !DIEnumerator(name: "OMP_TASK", value: 154, isUnsigned: true)
!292 = !DIEnumerator(name: "OMP_FOR", value: 155, isUnsigned: true)
!293 = !DIEnumerator(name: "OMP_SECTIONS", value: 156, isUnsigned: true)
!294 = !DIEnumerator(name: "OMP_SINGLE", value: 157, isUnsigned: true)
!295 = !DIEnumerator(name: "OMP_SECTION", value: 158, isUnsigned: true)
!296 = !DIEnumerator(name: "OMP_MASTER", value: 159, isUnsigned: true)
!297 = !DIEnumerator(name: "OMP_ORDERED", value: 160, isUnsigned: true)
!298 = !DIEnumerator(name: "OMP_CRITICAL", value: 161, isUnsigned: true)
!299 = !DIEnumerator(name: "OMP_ATOMIC", value: 162, isUnsigned: true)
!300 = !DIEnumerator(name: "OMP_CLAUSE", value: 163, isUnsigned: true)
!301 = !DIEnumerator(name: "REDUC_MAX_EXPR", value: 164, isUnsigned: true)
!302 = !DIEnumerator(name: "REDUC_MIN_EXPR", value: 165, isUnsigned: true)
!303 = !DIEnumerator(name: "REDUC_PLUS_EXPR", value: 166, isUnsigned: true)
!304 = !DIEnumerator(name: "DOT_PROD_EXPR", value: 167, isUnsigned: true)
!305 = !DIEnumerator(name: "WIDEN_SUM_EXPR", value: 168, isUnsigned: true)
!306 = !DIEnumerator(name: "WIDEN_MULT_EXPR", value: 169, isUnsigned: true)
!307 = !DIEnumerator(name: "VEC_LSHIFT_EXPR", value: 170, isUnsigned: true)
!308 = !DIEnumerator(name: "VEC_RSHIFT_EXPR", value: 171, isUnsigned: true)
!309 = !DIEnumerator(name: "VEC_WIDEN_MULT_HI_EXPR", value: 172, isUnsigned: true)
!310 = !DIEnumerator(name: "VEC_WIDEN_MULT_LO_EXPR", value: 173, isUnsigned: true)
!311 = !DIEnumerator(name: "VEC_UNPACK_HI_EXPR", value: 174, isUnsigned: true)
!312 = !DIEnumerator(name: "VEC_UNPACK_LO_EXPR", value: 175, isUnsigned: true)
!313 = !DIEnumerator(name: "VEC_UNPACK_FLOAT_HI_EXPR", value: 176, isUnsigned: true)
!314 = !DIEnumerator(name: "VEC_UNPACK_FLOAT_LO_EXPR", value: 177, isUnsigned: true)
!315 = !DIEnumerator(name: "VEC_PACK_TRUNC_EXPR", value: 178, isUnsigned: true)
!316 = !DIEnumerator(name: "VEC_PACK_SAT_EXPR", value: 179, isUnsigned: true)
!317 = !DIEnumerator(name: "VEC_PACK_FIX_TRUNC_EXPR", value: 180, isUnsigned: true)
!318 = !DIEnumerator(name: "VEC_EXTRACT_EVEN_EXPR", value: 181, isUnsigned: true)
!319 = !DIEnumerator(name: "VEC_EXTRACT_ODD_EXPR", value: 182, isUnsigned: true)
!320 = !DIEnumerator(name: "VEC_INTERLEAVE_HIGH_EXPR", value: 183, isUnsigned: true)
!321 = !DIEnumerator(name: "VEC_INTERLEAVE_LOW_EXPR", value: 184, isUnsigned: true)
!322 = !DIEnumerator(name: "PREDICT_EXPR", value: 185, isUnsigned: true)
!323 = !DIEnumerator(name: "OPTIMIZATION_NODE", value: 186, isUnsigned: true)
!324 = !DIEnumerator(name: "TARGET_OPTION_NODE", value: 187, isUnsigned: true)
!325 = !DIEnumerator(name: "LAST_AND_UNUSED_TREE_CODE", value: 188, isUnsigned: true)
!326 = !DIEnumerator(name: "C_MAYBE_CONST_EXPR", value: 189, isUnsigned: true)
!327 = !DIEnumerator(name: "EXCESS_PRECISION_EXPR", value: 190, isUnsigned: true)
!328 = !DIEnumerator(name: "MAX_TREE_CODES", value: 191, isUnsigned: true)
!329 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "eh_region_type", file: !330, line: 30, baseType: !7, size: 32, elements: !331)
!330 = !DIFile(filename: "./except.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!331 = !{!332, !333, !334, !335}
!332 = !DIEnumerator(name: "ERT_CLEANUP", value: 0, isUnsigned: true)
!333 = !DIEnumerator(name: "ERT_TRY", value: 1, isUnsigned: true)
!334 = !DIEnumerator(name: "ERT_ALLOWED_EXCEPTIONS", value: 2, isUnsigned: true)
!335 = !DIEnumerator(name: "ERT_MUST_NOT_THROW", value: 3, isUnsigned: true)
!336 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "profile_status_d", file: !337, line: 363, baseType: !7, size: 32, elements: !338)
!337 = !DIFile(filename: "./basic-block.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!338 = !{!339, !340, !341}
!339 = !DIEnumerator(name: "PROFILE_ABSENT", value: 0, isUnsigned: true)
!340 = !DIEnumerator(name: "PROFILE_GUESSED", value: 1, isUnsigned: true)
!341 = !DIEnumerator(name: "PROFILE_READ", value: 2, isUnsigned: true)
!342 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "dom_state", file: !337, line: 355, baseType: !7, size: 32, elements: !343)
!343 = !{!344, !345, !346}
!344 = !DIEnumerator(name: "DOM_NONE", value: 0, isUnsigned: true)
!345 = !DIEnumerator(name: "DOM_NO_FAST_QUERY", value: 1, isUnsigned: true)
!346 = !DIEnumerator(name: "DOM_OK", value: 2, isUnsigned: true)
!347 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "calling_abi", file: !348, line: 474, baseType: !7, size: 32, elements: !349)
!348 = !DIFile(filename: "./config/i386/i386.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!349 = !{!350, !351}
!350 = !DIEnumerator(name: "SYSV_ABI", value: 0, isUnsigned: true)
!351 = !DIEnumerator(name: "MS_ABI", value: 1, isUnsigned: true)
!352 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_code", file: !135, line: 280, baseType: !7, size: 32, elements: !353)
!353 = !{!354, !355, !356, !357, !358, !359, !360, !361, !362, !363, !364, !365, !366, !367, !368, !369}
!354 = !DIEnumerator(name: "OMP_CLAUSE_ERROR", value: 0, isUnsigned: true)
!355 = !DIEnumerator(name: "OMP_CLAUSE_PRIVATE", value: 1, isUnsigned: true)
!356 = !DIEnumerator(name: "OMP_CLAUSE_SHARED", value: 2, isUnsigned: true)
!357 = !DIEnumerator(name: "OMP_CLAUSE_FIRSTPRIVATE", value: 3, isUnsigned: true)
!358 = !DIEnumerator(name: "OMP_CLAUSE_LASTPRIVATE", value: 4, isUnsigned: true)
!359 = !DIEnumerator(name: "OMP_CLAUSE_REDUCTION", value: 5, isUnsigned: true)
!360 = !DIEnumerator(name: "OMP_CLAUSE_COPYIN", value: 6, isUnsigned: true)
!361 = !DIEnumerator(name: "OMP_CLAUSE_COPYPRIVATE", value: 7, isUnsigned: true)
!362 = !DIEnumerator(name: "OMP_CLAUSE_IF", value: 8, isUnsigned: true)
!363 = !DIEnumerator(name: "OMP_CLAUSE_NUM_THREADS", value: 9, isUnsigned: true)
!364 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE", value: 10, isUnsigned: true)
!365 = !DIEnumerator(name: "OMP_CLAUSE_NOWAIT", value: 11, isUnsigned: true)
!366 = !DIEnumerator(name: "OMP_CLAUSE_ORDERED", value: 12, isUnsigned: true)
!367 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT", value: 13, isUnsigned: true)
!368 = !DIEnumerator(name: "OMP_CLAUSE_COLLAPSE", value: 14, isUnsigned: true)
!369 = !DIEnumerator(name: "OMP_CLAUSE_UNTIED", value: 15, isUnsigned: true)
!370 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_default_kind", file: !135, line: 1817, baseType: !7, size: 32, elements: !371)
!371 = !{!372, !373, !374, !375, !376}
!372 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_UNSPECIFIED", value: 0, isUnsigned: true)
!373 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_SHARED", value: 1, isUnsigned: true)
!374 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_NONE", value: 2, isUnsigned: true)
!375 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_PRIVATE", value: 3, isUnsigned: true)
!376 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_FIRSTPRIVATE", value: 4, isUnsigned: true)
!377 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_schedule_kind", file: !135, line: 1805, baseType: !7, size: 32, elements: !378)
!378 = !{!379, !380, !381, !382, !383}
!379 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_STATIC", value: 0, isUnsigned: true)
!380 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_DYNAMIC", value: 1, isUnsigned: true)
!381 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_GUIDED", value: 2, isUnsigned: true)
!382 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_AUTO", value: 3, isUnsigned: true)
!383 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_RUNTIME", value: 4, isUnsigned: true)
!384 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "opt_pass_type", file: !385, line: 104, baseType: !7, size: 32, elements: !386)
!385 = !DIFile(filename: "./tree-pass.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!386 = !{!387, !388, !389, !390}
!387 = !DIEnumerator(name: "GIMPLE_PASS", value: 0, isUnsigned: true)
!388 = !DIEnumerator(name: "RTL_PASS", value: 1, isUnsigned: true)
!389 = !DIEnumerator(name: "SIMPLE_IPA_PASS", value: 2, isUnsigned: true)
!390 = !DIEnumerator(name: "IPA_PASS", value: 3, isUnsigned: true)
!391 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !392, line: 74, baseType: !7, size: 32, elements: !393)
!392 = !DIFile(filename: "./timevar.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!393 = !{!394, !395, !396, !397, !398, !399, !400, !401, !402, !403, !404, !405, !406, !407, !408, !409, !410, !411, !412, !413, !414, !415, !416, !417, !418, !419, !420, !421, !422, !423, !424, !425, !426, !427, !428, !429, !430, !431, !432, !433, !434, !435, !436, !437, !438, !439, !440, !441, !442, !443, !444, !445, !446, !447, !448, !449, !450, !451, !452, !453, !454, !455, !456, !457, !458, !459, !460, !461, !462, !463, !464, !465, !466, !467, !468, !469, !470, !471, !472, !473, !474, !475, !476, !477, !478, !479, !480, !481, !482, !483, !484, !485, !486, !487, !488, !489, !490, !491, !492, !493, !494, !495, !496, !497, !498, !499, !500, !501, !502, !503, !504, !505, !506, !507, !508, !509, !510, !511, !512, !513, !514, !515, !516, !517, !518, !519, !520, !521, !522, !523, !524, !525, !526, !527, !528, !529, !530, !531, !532, !533, !534, !535, !536, !537, !538, !539, !540, !541, !542, !543, !544, !545, !546, !547, !548, !549, !550, !551, !552, !553, !554, !555, !556, !557, !558, !559, !560, !561, !562, !563, !564, !565, !566}
!394 = !DIEnumerator(name: "TV_NONE", value: 0, isUnsigned: true)
!395 = !DIEnumerator(name: "TV_TOTAL", value: 1, isUnsigned: true)
!396 = !DIEnumerator(name: "TV_GC", value: 2, isUnsigned: true)
!397 = !DIEnumerator(name: "TV_DUMP", value: 3, isUnsigned: true)
!398 = !DIEnumerator(name: "TV_CGRAPH", value: 4, isUnsigned: true)
!399 = !DIEnumerator(name: "TV_CGRAPHOPT", value: 5, isUnsigned: true)
!400 = !DIEnumerator(name: "TV_IPA_CONSTANT_PROP", value: 6, isUnsigned: true)
!401 = !DIEnumerator(name: "TV_IPA_LTO_GIMPLE_IO", value: 7, isUnsigned: true)
!402 = !DIEnumerator(name: "TV_IPA_LTO_DECL_IO", value: 8, isUnsigned: true)
!403 = !DIEnumerator(name: "TV_IPA_LTO_CGRAPH_IO", value: 9, isUnsigned: true)
!404 = !DIEnumerator(name: "TV_LTO", value: 10, isUnsigned: true)
!405 = !DIEnumerator(name: "TV_WHOPR_WPA", value: 11, isUnsigned: true)
!406 = !DIEnumerator(name: "TV_WHOPR_WPA_IO", value: 12, isUnsigned: true)
!407 = !DIEnumerator(name: "TV_WHOPR_LTRANS", value: 13, isUnsigned: true)
!408 = !DIEnumerator(name: "TV_WHOPR_WPA_FIXUP", value: 14, isUnsigned: true)
!409 = !DIEnumerator(name: "TV_WHOPR_WPA_LTRANS_EXEC", value: 15, isUnsigned: true)
!410 = !DIEnumerator(name: "TV_IPA_REFERENCE", value: 16, isUnsigned: true)
!411 = !DIEnumerator(name: "TV_IPA_PURE_CONST", value: 17, isUnsigned: true)
!412 = !DIEnumerator(name: "TV_IPA_TYPE_ESCAPE", value: 18, isUnsigned: true)
!413 = !DIEnumerator(name: "TV_IPA_PTA", value: 19, isUnsigned: true)
!414 = !DIEnumerator(name: "TV_IPA_SRA", value: 20, isUnsigned: true)
!415 = !DIEnumerator(name: "TV_IPA_FREE_LANG_DATA", value: 21, isUnsigned: true)
!416 = !DIEnumerator(name: "TV_CFG", value: 22, isUnsigned: true)
!417 = !DIEnumerator(name: "TV_CLEANUP_CFG", value: 23, isUnsigned: true)
!418 = !DIEnumerator(name: "TV_CFG_VERIFY", value: 24, isUnsigned: true)
!419 = !DIEnumerator(name: "TV_DELETE_TRIVIALLY_DEAD", value: 25, isUnsigned: true)
!420 = !DIEnumerator(name: "TV_LIFE", value: 26, isUnsigned: true)
!421 = !DIEnumerator(name: "TV_LIFE_UPDATE", value: 27, isUnsigned: true)
!422 = !DIEnumerator(name: "TV_DF_SCAN", value: 28, isUnsigned: true)
!423 = !DIEnumerator(name: "TV_DF_MD", value: 29, isUnsigned: true)
!424 = !DIEnumerator(name: "TV_DF_RD", value: 30, isUnsigned: true)
!425 = !DIEnumerator(name: "TV_DF_LR", value: 31, isUnsigned: true)
!426 = !DIEnumerator(name: "TV_DF_LIVE", value: 32, isUnsigned: true)
!427 = !DIEnumerator(name: "TV_DF_UREC", value: 33, isUnsigned: true)
!428 = !DIEnumerator(name: "TV_DF_CHAIN", value: 34, isUnsigned: true)
!429 = !DIEnumerator(name: "TV_DF_BYTE_LR", value: 35, isUnsigned: true)
!430 = !DIEnumerator(name: "TV_DF_NOTE", value: 36, isUnsigned: true)
!431 = !DIEnumerator(name: "TV_REG_STATS", value: 37, isUnsigned: true)
!432 = !DIEnumerator(name: "TV_ALIAS_ANALYSIS", value: 38, isUnsigned: true)
!433 = !DIEnumerator(name: "TV_ALIAS_STMT_WALK", value: 39, isUnsigned: true)
!434 = !DIEnumerator(name: "TV_REG_SCAN", value: 40, isUnsigned: true)
!435 = !DIEnumerator(name: "TV_REBUILD_JUMP", value: 41, isUnsigned: true)
!436 = !DIEnumerator(name: "TV_CPP", value: 42, isUnsigned: true)
!437 = !DIEnumerator(name: "TV_LEX", value: 43, isUnsigned: true)
!438 = !DIEnumerator(name: "TV_PARSE", value: 44, isUnsigned: true)
!439 = !DIEnumerator(name: "TV_NAME_LOOKUP", value: 45, isUnsigned: true)
!440 = !DIEnumerator(name: "TV_INLINE_HEURISTICS", value: 46, isUnsigned: true)
!441 = !DIEnumerator(name: "TV_INTEGRATION", value: 47, isUnsigned: true)
!442 = !DIEnumerator(name: "TV_TREE_GIMPLIFY", value: 48, isUnsigned: true)
!443 = !DIEnumerator(name: "TV_TREE_EH", value: 49, isUnsigned: true)
!444 = !DIEnumerator(name: "TV_TREE_CFG", value: 50, isUnsigned: true)
!445 = !DIEnumerator(name: "TV_TREE_CLEANUP_CFG", value: 51, isUnsigned: true)
!446 = !DIEnumerator(name: "TV_TREE_VRP", value: 52, isUnsigned: true)
!447 = !DIEnumerator(name: "TV_TREE_COPY_PROP", value: 53, isUnsigned: true)
!448 = !DIEnumerator(name: "TV_TREE_STORE_COPY_PROP", value: 54, isUnsigned: true)
!449 = !DIEnumerator(name: "TV_FIND_REFERENCED_VARS", value: 55, isUnsigned: true)
!450 = !DIEnumerator(name: "TV_TREE_PTA", value: 56, isUnsigned: true)
!451 = !DIEnumerator(name: "TV_TREE_INSERT_PHI_NODES", value: 57, isUnsigned: true)
!452 = !DIEnumerator(name: "TV_TREE_SSA_REWRITE_BLOCKS", value: 58, isUnsigned: true)
!453 = !DIEnumerator(name: "TV_TREE_SSA_OTHER", value: 59, isUnsigned: true)
!454 = !DIEnumerator(name: "TV_TREE_SSA_INCREMENTAL", value: 60, isUnsigned: true)
!455 = !DIEnumerator(name: "TV_TREE_OPS", value: 61, isUnsigned: true)
!456 = !DIEnumerator(name: "TV_TREE_SSA_DOMINATOR_OPTS", value: 62, isUnsigned: true)
!457 = !DIEnumerator(name: "TV_TREE_SRA", value: 63, isUnsigned: true)
!458 = !DIEnumerator(name: "TV_TREE_STORE_CCP", value: 64, isUnsigned: true)
!459 = !DIEnumerator(name: "TV_TREE_CCP", value: 65, isUnsigned: true)
!460 = !DIEnumerator(name: "TV_TREE_PHI_CPROP", value: 66, isUnsigned: true)
!461 = !DIEnumerator(name: "TV_TREE_SPLIT_EDGES", value: 67, isUnsigned: true)
!462 = !DIEnumerator(name: "TV_TREE_REASSOC", value: 68, isUnsigned: true)
!463 = !DIEnumerator(name: "TV_TREE_PRE", value: 69, isUnsigned: true)
!464 = !DIEnumerator(name: "TV_TREE_REDPHI", value: 70, isUnsigned: true)
!465 = !DIEnumerator(name: "TV_TREE_FRE", value: 71, isUnsigned: true)
!466 = !DIEnumerator(name: "TV_TREE_SINK", value: 72, isUnsigned: true)
!467 = !DIEnumerator(name: "TV_TREE_PHIOPT", value: 73, isUnsigned: true)
!468 = !DIEnumerator(name: "TV_TREE_FORWPROP", value: 74, isUnsigned: true)
!469 = !DIEnumerator(name: "TV_TREE_PHIPROP", value: 75, isUnsigned: true)
!470 = !DIEnumerator(name: "TV_TREE_DCE", value: 76, isUnsigned: true)
!471 = !DIEnumerator(name: "TV_TREE_CD_DCE", value: 77, isUnsigned: true)
!472 = !DIEnumerator(name: "TV_TREE_CALL_CDCE", value: 78, isUnsigned: true)
!473 = !DIEnumerator(name: "TV_TREE_DSE", value: 79, isUnsigned: true)
!474 = !DIEnumerator(name: "TV_TREE_MERGE_PHI", value: 80, isUnsigned: true)
!475 = !DIEnumerator(name: "TV_TREE_LOOP", value: 81, isUnsigned: true)
!476 = !DIEnumerator(name: "TV_TREE_LOOP_BOUNDS", value: 82, isUnsigned: true)
!477 = !DIEnumerator(name: "TV_LIM", value: 83, isUnsigned: true)
!478 = !DIEnumerator(name: "TV_TREE_LOOP_IVCANON", value: 84, isUnsigned: true)
!479 = !DIEnumerator(name: "TV_SCEV_CONST", value: 85, isUnsigned: true)
!480 = !DIEnumerator(name: "TV_TREE_LOOP_UNSWITCH", value: 86, isUnsigned: true)
!481 = !DIEnumerator(name: "TV_COMPLETE_UNROLL", value: 87, isUnsigned: true)
!482 = !DIEnumerator(name: "TV_TREE_PARALLELIZE_LOOPS", value: 88, isUnsigned: true)
!483 = !DIEnumerator(name: "TV_TREE_VECTORIZATION", value: 89, isUnsigned: true)
!484 = !DIEnumerator(name: "TV_TREE_SLP_VECTORIZATION", value: 90, isUnsigned: true)
!485 = !DIEnumerator(name: "TV_GRAPHITE_TRANSFORMS", value: 91, isUnsigned: true)
!486 = !DIEnumerator(name: "TV_GRAPHITE_DATA_DEPS", value: 92, isUnsigned: true)
!487 = !DIEnumerator(name: "TV_GRAPHITE_CODE_GEN", value: 93, isUnsigned: true)
!488 = !DIEnumerator(name: "TV_TREE_LINEAR_TRANSFORM", value: 94, isUnsigned: true)
!489 = !DIEnumerator(name: "TV_TREE_LOOP_DISTRIBUTION", value: 95, isUnsigned: true)
!490 = !DIEnumerator(name: "TV_CHECK_DATA_DEPS", value: 96, isUnsigned: true)
!491 = !DIEnumerator(name: "TV_TREE_PREFETCH", value: 97, isUnsigned: true)
!492 = !DIEnumerator(name: "TV_TREE_LOOP_IVOPTS", value: 98, isUnsigned: true)
!493 = !DIEnumerator(name: "TV_PREDCOM", value: 99, isUnsigned: true)
!494 = !DIEnumerator(name: "TV_TREE_LOOP_INIT", value: 100, isUnsigned: true)
!495 = !DIEnumerator(name: "TV_TREE_LOOP_FINI", value: 101, isUnsigned: true)
!496 = !DIEnumerator(name: "TV_TREE_CH", value: 102, isUnsigned: true)
!497 = !DIEnumerator(name: "TV_TREE_SSA_UNCPROP", value: 103, isUnsigned: true)
!498 = !DIEnumerator(name: "TV_TREE_SSA_TO_NORMAL", value: 104, isUnsigned: true)
!499 = !DIEnumerator(name: "TV_TREE_NRV", value: 105, isUnsigned: true)
!500 = !DIEnumerator(name: "TV_TREE_COPY_RENAME", value: 106, isUnsigned: true)
!501 = !DIEnumerator(name: "TV_TREE_SSA_VERIFY", value: 107, isUnsigned: true)
!502 = !DIEnumerator(name: "TV_TREE_STMT_VERIFY", value: 108, isUnsigned: true)
!503 = !DIEnumerator(name: "TV_TREE_SWITCH_CONVERSION", value: 109, isUnsigned: true)
!504 = !DIEnumerator(name: "TV_CGRAPH_VERIFY", value: 110, isUnsigned: true)
!505 = !DIEnumerator(name: "TV_DOM_FRONTIERS", value: 111, isUnsigned: true)
!506 = !DIEnumerator(name: "TV_DOMINANCE", value: 112, isUnsigned: true)
!507 = !DIEnumerator(name: "TV_CONTROL_DEPENDENCES", value: 113, isUnsigned: true)
!508 = !DIEnumerator(name: "TV_OVERLOAD", value: 114, isUnsigned: true)
!509 = !DIEnumerator(name: "TV_TEMPLATE_INSTANTIATION", value: 115, isUnsigned: true)
!510 = !DIEnumerator(name: "TV_EXPAND", value: 116, isUnsigned: true)
!511 = !DIEnumerator(name: "TV_VARCONST", value: 117, isUnsigned: true)
!512 = !DIEnumerator(name: "TV_LOWER_SUBREG", value: 118, isUnsigned: true)
!513 = !DIEnumerator(name: "TV_JUMP", value: 119, isUnsigned: true)
!514 = !DIEnumerator(name: "TV_FWPROP", value: 120, isUnsigned: true)
!515 = !DIEnumerator(name: "TV_CSE", value: 121, isUnsigned: true)
!516 = !DIEnumerator(name: "TV_DCE", value: 122, isUnsigned: true)
!517 = !DIEnumerator(name: "TV_DSE1", value: 123, isUnsigned: true)
!518 = !DIEnumerator(name: "TV_DSE2", value: 124, isUnsigned: true)
!519 = !DIEnumerator(name: "TV_LOOP", value: 125, isUnsigned: true)
!520 = !DIEnumerator(name: "TV_LOOP_MOVE_INVARIANTS", value: 126, isUnsigned: true)
!521 = !DIEnumerator(name: "TV_LOOP_UNSWITCH", value: 127, isUnsigned: true)
!522 = !DIEnumerator(name: "TV_LOOP_UNROLL", value: 128, isUnsigned: true)
!523 = !DIEnumerator(name: "TV_LOOP_DOLOOP", value: 129, isUnsigned: true)
!524 = !DIEnumerator(name: "TV_CPROP", value: 130, isUnsigned: true)
!525 = !DIEnumerator(name: "TV_PRE", value: 131, isUnsigned: true)
!526 = !DIEnumerator(name: "TV_HOIST", value: 132, isUnsigned: true)
!527 = !DIEnumerator(name: "TV_LSM", value: 133, isUnsigned: true)
!528 = !DIEnumerator(name: "TV_TRACER", value: 134, isUnsigned: true)
!529 = !DIEnumerator(name: "TV_WEB", value: 135, isUnsigned: true)
!530 = !DIEnumerator(name: "TV_AUTO_INC_DEC", value: 136, isUnsigned: true)
!531 = !DIEnumerator(name: "TV_CSE2", value: 137, isUnsigned: true)
!532 = !DIEnumerator(name: "TV_BRANCH_PROB", value: 138, isUnsigned: true)
!533 = !DIEnumerator(name: "TV_VPT", value: 139, isUnsigned: true)
!534 = !DIEnumerator(name: "TV_COMBINE", value: 140, isUnsigned: true)
!535 = !DIEnumerator(name: "TV_IFCVT", value: 141, isUnsigned: true)
!536 = !DIEnumerator(name: "TV_REGMOVE", value: 142, isUnsigned: true)
!537 = !DIEnumerator(name: "TV_MODE_SWITCH", value: 143, isUnsigned: true)
!538 = !DIEnumerator(name: "TV_SMS", value: 144, isUnsigned: true)
!539 = !DIEnumerator(name: "TV_SCHED", value: 145, isUnsigned: true)
!540 = !DIEnumerator(name: "TV_LOCAL_ALLOC", value: 146, isUnsigned: true)
!541 = !DIEnumerator(name: "TV_GLOBAL_ALLOC", value: 147, isUnsigned: true)
!542 = !DIEnumerator(name: "TV_IRA", value: 148, isUnsigned: true)
!543 = !DIEnumerator(name: "TV_RELOAD", value: 149, isUnsigned: true)
!544 = !DIEnumerator(name: "TV_RELOAD_CSE_REGS", value: 150, isUnsigned: true)
!545 = !DIEnumerator(name: "TV_SEQABSTR", value: 151, isUnsigned: true)
!546 = !DIEnumerator(name: "TV_GCSE_AFTER_RELOAD", value: 152, isUnsigned: true)
!547 = !DIEnumerator(name: "TV_THREAD_PROLOGUE_AND_EPILOGUE", value: 153, isUnsigned: true)
!548 = !DIEnumerator(name: "TV_IFCVT2", value: 154, isUnsigned: true)
!549 = !DIEnumerator(name: "TV_COMBINE_STACK_ADJUST", value: 155, isUnsigned: true)
!550 = !DIEnumerator(name: "TV_PEEPHOLE2", value: 156, isUnsigned: true)
!551 = !DIEnumerator(name: "TV_RENAME_REGISTERS", value: 157, isUnsigned: true)
!552 = !DIEnumerator(name: "TV_CPROP_REGISTERS", value: 158, isUnsigned: true)
!553 = !DIEnumerator(name: "TV_SCHED2", value: 159, isUnsigned: true)
!554 = !DIEnumerator(name: "TV_MACH_DEP", value: 160, isUnsigned: true)
!555 = !DIEnumerator(name: "TV_DBR_SCHED", value: 161, isUnsigned: true)
!556 = !DIEnumerator(name: "TV_REORDER_BLOCKS", value: 162, isUnsigned: true)
!557 = !DIEnumerator(name: "TV_SHORTEN_BRANCH", value: 163, isUnsigned: true)
!558 = !DIEnumerator(name: "TV_REG_STACK", value: 164, isUnsigned: true)
!559 = !DIEnumerator(name: "TV_FINAL", value: 165, isUnsigned: true)
!560 = !DIEnumerator(name: "TV_SYMOUT", value: 166, isUnsigned: true)
!561 = !DIEnumerator(name: "TV_VAR_TRACKING", value: 167, isUnsigned: true)
!562 = !DIEnumerator(name: "TV_TREE_IFCOMBINE", value: 168, isUnsigned: true)
!563 = !DIEnumerator(name: "TV_PLUGIN_INIT", value: 169, isUnsigned: true)
!564 = !DIEnumerator(name: "TV_PLUGIN_RUN", value: 170, isUnsigned: true)
!565 = !DIEnumerator(name: "TV_REST_OF_COMPILATION", value: 171, isUnsigned: true)
!566 = !DIEnumerator(name: "TIMEVAR_LAST", value: 172, isUnsigned: true)
!567 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !568, line: 309, baseType: !7, size: 32, elements: !569)
!568 = !DIFile(filename: "./cgraph.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!569 = !{!570, !571, !572, !573, !574, !575, !576, !577, !578, !579, !580, !581, !582, !583, !584, !585, !586, !587, !588, !589}
!570 = !DIEnumerator(name: "CIF_OK", value: 0, isUnsigned: true)
!571 = !DIEnumerator(name: "CIF_UNSPECIFIED", value: 1, isUnsigned: true)
!572 = !DIEnumerator(name: "CIF_FUNCTION_NOT_CONSIDERED", value: 2, isUnsigned: true)
!573 = !DIEnumerator(name: "CIF_BODY_NOT_AVAILABLE", value: 3, isUnsigned: true)
!574 = !DIEnumerator(name: "CIF_REDEFINED_EXTERN_INLINE", value: 4, isUnsigned: true)
!575 = !DIEnumerator(name: "CIF_FUNCTION_NOT_INLINABLE", value: 5, isUnsigned: true)
!576 = !DIEnumerator(name: "CIF_FUNCTION_NOT_INLINE_CANDIDATE", value: 6, isUnsigned: true)
!577 = !DIEnumerator(name: "CIF_LARGE_FUNCTION_GROWTH_LIMIT", value: 7, isUnsigned: true)
!578 = !DIEnumerator(name: "CIF_LARGE_STACK_FRAME_GROWTH_LIMIT", value: 8, isUnsigned: true)
!579 = !DIEnumerator(name: "CIF_MAX_INLINE_INSNS_SINGLE_LIMIT", value: 9, isUnsigned: true)
!580 = !DIEnumerator(name: "CIF_MAX_INLINE_INSNS_AUTO_LIMIT", value: 10, isUnsigned: true)
!581 = !DIEnumerator(name: "CIF_INLINE_UNIT_GROWTH_LIMIT", value: 11, isUnsigned: true)
!582 = !DIEnumerator(name: "CIF_RECURSIVE_INLINING", value: 12, isUnsigned: true)
!583 = !DIEnumerator(name: "CIF_UNLIKELY_CALL", value: 13, isUnsigned: true)
!584 = !DIEnumerator(name: "CIF_NOT_DECLARED_INLINED", value: 14, isUnsigned: true)
!585 = !DIEnumerator(name: "CIF_OPTIMIZING_FOR_SIZE", value: 15, isUnsigned: true)
!586 = !DIEnumerator(name: "CIF_TARGET_OPTION_MISMATCH", value: 16, isUnsigned: true)
!587 = !DIEnumerator(name: "CIF_MISMATCHED_ARGUMENTS", value: 17, isUnsigned: true)
!588 = !DIEnumerator(name: "CIF_ORIGINALLY_INDIRECT_CALL", value: 18, isUnsigned: true)
!589 = !DIEnumerator(name: "CIF_N_REASONS", value: 19, isUnsigned: true)
!590 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !591, line: 29, baseType: !7, size: 32, elements: !592)
!591 = !DIFile(filename: "./diagnostic.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!592 = !{!593, !594, !595, !596, !597, !598, !599, !600, !601, !602, !603, !604, !605}
!593 = !DIEnumerator(name: "DK_UNSPECIFIED", value: 0, isUnsigned: true)
!594 = !DIEnumerator(name: "DK_IGNORED", value: 1, isUnsigned: true)
!595 = !DIEnumerator(name: "DK_FATAL", value: 2, isUnsigned: true)
!596 = !DIEnumerator(name: "DK_ICE", value: 3, isUnsigned: true)
!597 = !DIEnumerator(name: "DK_ERROR", value: 4, isUnsigned: true)
!598 = !DIEnumerator(name: "DK_SORRY", value: 5, isUnsigned: true)
!599 = !DIEnumerator(name: "DK_WARNING", value: 6, isUnsigned: true)
!600 = !DIEnumerator(name: "DK_ANACHRONISM", value: 7, isUnsigned: true)
!601 = !DIEnumerator(name: "DK_NOTE", value: 8, isUnsigned: true)
!602 = !DIEnumerator(name: "DK_DEBUG", value: 9, isUnsigned: true)
!603 = !DIEnumerator(name: "DK_PEDWARN", value: 10, isUnsigned: true)
!604 = !DIEnumerator(name: "DK_PERMERROR", value: 11, isUnsigned: true)
!605 = !DIEnumerator(name: "DK_LAST_DIAGNOSTIC_KIND", value: 12, isUnsigned: true)
!606 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "compiler_param", file: !607, line: 82, baseType: !7, size: 32, elements: !608)
!607 = !DIFile(filename: "./params.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!608 = !{!609, !610, !611, !612, !613, !614, !615, !616, !617, !618, !619, !620, !621, !622, !623, !624, !625, !626, !627, !628, !629, !630, !631, !632, !633, !634, !635, !636, !637, !638, !639, !640, !641, !642, !643, !644, !645, !646, !647, !648, !649, !650, !651, !652, !653, !654, !655, !656, !657, !658, !659, !660, !661, !662, !663, !664, !665, !666, !667, !668, !669, !670, !671, !672, !673, !674, !675, !676, !677, !678, !679, !680, !681, !682, !683, !684, !685, !686, !687, !688, !689, !690, !691, !692, !693, !694, !695, !696, !697, !698, !699, !700, !701, !702, !703, !704, !705, !706, !707, !708, !709, !710, !711, !712, !713, !714, !715, !716, !717, !718, !719, !720, !721, !722, !723, !724, !725, !726, !727, !728}
!609 = !DIEnumerator(name: "PARAM_STRUCT_REORG_COLD_STRUCT_RATIO", value: 0, isUnsigned: true)
!610 = !DIEnumerator(name: "PARAM_PREDICTABLE_BRANCH_OUTCOME", value: 1, isUnsigned: true)
!611 = !DIEnumerator(name: "PARAM_MAX_INLINE_INSNS_SINGLE", value: 2, isUnsigned: true)
!612 = !DIEnumerator(name: "PARAM_MAX_INLINE_INSNS_AUTO", value: 3, isUnsigned: true)
!613 = !DIEnumerator(name: "PARAM_MAX_INLINE_INSNS_RECURSIVE", value: 4, isUnsigned: true)
!614 = !DIEnumerator(name: "PARAM_MAX_INLINE_INSNS_RECURSIVE_AUTO", value: 5, isUnsigned: true)
!615 = !DIEnumerator(name: "PARAM_MAX_INLINE_RECURSIVE_DEPTH", value: 6, isUnsigned: true)
!616 = !DIEnumerator(name: "PARAM_MAX_INLINE_RECURSIVE_DEPTH_AUTO", value: 7, isUnsigned: true)
!617 = !DIEnumerator(name: "PARAM_MIN_INLINE_RECURSIVE_PROBABILITY", value: 8, isUnsigned: true)
!618 = !DIEnumerator(name: "PARAM_EARLY_INLINER_MAX_ITERATIONS", value: 9, isUnsigned: true)
!619 = !DIEnumerator(name: "PARAM_MAX_VARIABLE_EXPANSIONS", value: 10, isUnsigned: true)
!620 = !DIEnumerator(name: "PARAM_MIN_VECT_LOOP_BOUND", value: 11, isUnsigned: true)
!621 = !DIEnumerator(name: "PARAM_MAX_DELAY_SLOT_INSN_SEARCH", value: 12, isUnsigned: true)
!622 = !DIEnumerator(name: "PARAM_MAX_DELAY_SLOT_LIVE_SEARCH", value: 13, isUnsigned: true)
!623 = !DIEnumerator(name: "PARAM_MAX_PENDING_LIST_LENGTH", value: 14, isUnsigned: true)
!624 = !DIEnumerator(name: "PARAM_LARGE_FUNCTION_INSNS", value: 15, isUnsigned: true)
!625 = !DIEnumerator(name: "PARAM_LARGE_FUNCTION_GROWTH", value: 16, isUnsigned: true)
!626 = !DIEnumerator(name: "PARAM_LARGE_UNIT_INSNS", value: 17, isUnsigned: true)
!627 = !DIEnumerator(name: "PARAM_INLINE_UNIT_GROWTH", value: 18, isUnsigned: true)
!628 = !DIEnumerator(name: "PARAM_IPCP_UNIT_GROWTH", value: 19, isUnsigned: true)
!629 = !DIEnumerator(name: "PARAM_EARLY_INLINING_INSNS", value: 20, isUnsigned: true)
!630 = !DIEnumerator(name: "PARAM_LARGE_STACK_FRAME", value: 21, isUnsigned: true)
!631 = !DIEnumerator(name: "PARAM_STACK_FRAME_GROWTH", value: 22, isUnsigned: true)
!632 = !DIEnumerator(name: "PARAM_MAX_GCSE_MEMORY", value: 23, isUnsigned: true)
!633 = !DIEnumerator(name: "PARAM_GCSE_AFTER_RELOAD_PARTIAL_FRACTION", value: 24, isUnsigned: true)
!634 = !DIEnumerator(name: "PARAM_GCSE_AFTER_RELOAD_CRITICAL_FRACTION", value: 25, isUnsigned: true)
!635 = !DIEnumerator(name: "PARAM_MAX_UNROLLED_INSNS", value: 26, isUnsigned: true)
!636 = !DIEnumerator(name: "PARAM_MAX_AVERAGE_UNROLLED_INSNS", value: 27, isUnsigned: true)
!637 = !DIEnumerator(name: "PARAM_MAX_UNROLL_TIMES", value: 28, isUnsigned: true)
!638 = !DIEnumerator(name: "PARAM_MAX_PEELED_INSNS", value: 29, isUnsigned: true)
!639 = !DIEnumerator(name: "PARAM_MAX_PEEL_TIMES", value: 30, isUnsigned: true)
!640 = !DIEnumerator(name: "PARAM_MAX_COMPLETELY_PEELED_INSNS", value: 31, isUnsigned: true)
!641 = !DIEnumerator(name: "PARAM_MAX_COMPLETELY_PEEL_TIMES", value: 32, isUnsigned: true)
!642 = !DIEnumerator(name: "PARAM_MAX_ONCE_PEELED_INSNS", value: 33, isUnsigned: true)
!643 = !DIEnumerator(name: "PARAM_MAX_UNROLL_ITERATIONS", value: 34, isUnsigned: true)
!644 = !DIEnumerator(name: "PARAM_MAX_UNSWITCH_INSNS", value: 35, isUnsigned: true)
!645 = !DIEnumerator(name: "PARAM_MAX_UNSWITCH_LEVEL", value: 36, isUnsigned: true)
!646 = !DIEnumerator(name: "PARAM_MAX_ITERATIONS_TO_TRACK", value: 37, isUnsigned: true)
!647 = !DIEnumerator(name: "PARAM_MAX_ITERATIONS_COMPUTATION_COST", value: 38, isUnsigned: true)
!648 = !DIEnumerator(name: "PARAM_SMS_MAX_II_FACTOR", value: 39, isUnsigned: true)
!649 = !DIEnumerator(name: "PARAM_SMS_DFA_HISTORY", value: 40, isUnsigned: true)
!650 = !DIEnumerator(name: "PARAM_SMS_LOOP_AVERAGE_COUNT_THRESHOLD", value: 41, isUnsigned: true)
!651 = !DIEnumerator(name: "HOT_BB_COUNT_FRACTION", value: 42, isUnsigned: true)
!652 = !DIEnumerator(name: "HOT_BB_FREQUENCY_FRACTION", value: 43, isUnsigned: true)
!653 = !DIEnumerator(name: "PARAM_ALIGN_THRESHOLD", value: 44, isUnsigned: true)
!654 = !DIEnumerator(name: "PARAM_ALIGN_LOOP_ITERATIONS", value: 45, isUnsigned: true)
!655 = !DIEnumerator(name: "PARAM_MAX_PREDICTED_ITERATIONS", value: 46, isUnsigned: true)
!656 = !DIEnumerator(name: "TRACER_DYNAMIC_COVERAGE_FEEDBACK", value: 47, isUnsigned: true)
!657 = !DIEnumerator(name: "TRACER_DYNAMIC_COVERAGE", value: 48, isUnsigned: true)
!658 = !DIEnumerator(name: "TRACER_MAX_CODE_GROWTH", value: 49, isUnsigned: true)
!659 = !DIEnumerator(name: "TRACER_MIN_BRANCH_RATIO", value: 50, isUnsigned: true)
!660 = !DIEnumerator(name: "TRACER_MIN_BRANCH_PROBABILITY_FEEDBACK", value: 51, isUnsigned: true)
!661 = !DIEnumerator(name: "TRACER_MIN_BRANCH_PROBABILITY", value: 52, isUnsigned: true)
!662 = !DIEnumerator(name: "PARAM_MAX_CROSSJUMP_EDGES", value: 53, isUnsigned: true)
!663 = !DIEnumerator(name: "PARAM_MIN_CROSSJUMP_INSNS", value: 54, isUnsigned: true)
!664 = !DIEnumerator(name: "PARAM_MAX_GROW_COPY_BB_INSNS", value: 55, isUnsigned: true)
!665 = !DIEnumerator(name: "PARAM_MAX_GOTO_DUPLICATION_INSNS", value: 56, isUnsigned: true)
!666 = !DIEnumerator(name: "PARAM_MAX_CSE_PATH_LENGTH", value: 57, isUnsigned: true)
!667 = !DIEnumerator(name: "PARAM_MAX_CSE_INSNS", value: 58, isUnsigned: true)
!668 = !DIEnumerator(name: "PARAM_LIM_EXPENSIVE", value: 59, isUnsigned: true)
!669 = !DIEnumerator(name: "PARAM_IV_CONSIDER_ALL_CANDIDATES_BOUND", value: 60, isUnsigned: true)
!670 = !DIEnumerator(name: "PARAM_IV_MAX_CONSIDERED_USES", value: 61, isUnsigned: true)
!671 = !DIEnumerator(name: "PARAM_IV_ALWAYS_PRUNE_CAND_SET_BOUND", value: 62, isUnsigned: true)
!672 = !DIEnumerator(name: "PARAM_SCEV_MAX_EXPR_SIZE", value: 63, isUnsigned: true)
!673 = !DIEnumerator(name: "PARAM_OMEGA_MAX_VARS", value: 64, isUnsigned: true)
!674 = !DIEnumerator(name: "PARAM_OMEGA_MAX_GEQS", value: 65, isUnsigned: true)
!675 = !DIEnumerator(name: "PARAM_OMEGA_MAX_EQS", value: 66, isUnsigned: true)
!676 = !DIEnumerator(name: "PARAM_OMEGA_MAX_WILD_CARDS", value: 67, isUnsigned: true)
!677 = !DIEnumerator(name: "PARAM_OMEGA_HASH_TABLE_SIZE", value: 68, isUnsigned: true)
!678 = !DIEnumerator(name: "PARAM_OMEGA_MAX_KEYS", value: 69, isUnsigned: true)
!679 = !DIEnumerator(name: "PARAM_OMEGA_ELIMINATE_REDUNDANT_CONSTRAINTS", value: 70, isUnsigned: true)
!680 = !DIEnumerator(name: "PARAM_VECT_MAX_VERSION_FOR_ALIGNMENT_CHECKS", value: 71, isUnsigned: true)
!681 = !DIEnumerator(name: "PARAM_VECT_MAX_VERSION_FOR_ALIAS_CHECKS", value: 72, isUnsigned: true)
!682 = !DIEnumerator(name: "PARAM_MAX_CSELIB_MEMORY_LOCATIONS", value: 73, isUnsigned: true)
!683 = !DIEnumerator(name: "GGC_MIN_EXPAND", value: 74, isUnsigned: true)
!684 = !DIEnumerator(name: "GGC_MIN_HEAPSIZE", value: 75, isUnsigned: true)
!685 = !DIEnumerator(name: "PARAM_MAX_RELOAD_SEARCH_INSNS", value: 76, isUnsigned: true)
!686 = !DIEnumerator(name: "PARAM_MAX_SCHED_REGION_BLOCKS", value: 77, isUnsigned: true)
!687 = !DIEnumerator(name: "PARAM_MAX_SCHED_REGION_INSNS", value: 78, isUnsigned: true)
!688 = !DIEnumerator(name: "PARAM_MAX_PIPELINE_REGION_BLOCKS", value: 79, isUnsigned: true)
!689 = !DIEnumerator(name: "PARAM_MAX_PIPELINE_REGION_INSNS", value: 80, isUnsigned: true)
!690 = !DIEnumerator(name: "PARAM_MIN_SPEC_PROB", value: 81, isUnsigned: true)
!691 = !DIEnumerator(name: "PARAM_MAX_SCHED_EXTEND_REGIONS_ITERS", value: 82, isUnsigned: true)
!692 = !DIEnumerator(name: "PARAM_MAX_SCHED_INSN_CONFLICT_DELAY", value: 83, isUnsigned: true)
!693 = !DIEnumerator(name: "PARAM_SCHED_SPEC_PROB_CUTOFF", value: 84, isUnsigned: true)
!694 = !DIEnumerator(name: "PARAM_SELSCHED_MAX_LOOKAHEAD", value: 85, isUnsigned: true)
!695 = !DIEnumerator(name: "PARAM_SELSCHED_MAX_SCHED_TIMES", value: 86, isUnsigned: true)
!696 = !DIEnumerator(name: "PARAM_SELSCHED_INSNS_TO_RENAME", value: 87, isUnsigned: true)
!697 = !DIEnumerator(name: "PARAM_SCHED_MEM_TRUE_DEP_COST", value: 88, isUnsigned: true)
!698 = !DIEnumerator(name: "PARAM_MAX_LAST_VALUE_RTL", value: 89, isUnsigned: true)
!699 = !DIEnumerator(name: "PARAM_INTEGER_SHARE_LIMIT", value: 90, isUnsigned: true)
!700 = !DIEnumerator(name: "PARAM_MIN_VIRTUAL_MAPPINGS", value: 91, isUnsigned: true)
!701 = !DIEnumerator(name: "PARAM_VIRTUAL_MAPPINGS_TO_SYMS_RATIO", value: 92, isUnsigned: true)
!702 = !DIEnumerator(name: "PARAM_SSP_BUFFER_SIZE", value: 93, isUnsigned: true)
!703 = !DIEnumerator(name: "PARAM_MAX_JUMP_THREAD_DUPLICATION_STMTS", value: 94, isUnsigned: true)
!704 = !DIEnumerator(name: "PARAM_MAX_FIELDS_FOR_FIELD_SENSITIVE", value: 95, isUnsigned: true)
!705 = !DIEnumerator(name: "PARAM_MAX_SCHED_READY_INSNS", value: 96, isUnsigned: true)
!706 = !DIEnumerator(name: "PARAM_PREFETCH_LATENCY", value: 97, isUnsigned: true)
!707 = !DIEnumerator(name: "PARAM_SIMULTANEOUS_PREFETCHES", value: 98, isUnsigned: true)
!708 = !DIEnumerator(name: "PARAM_L1_CACHE_SIZE", value: 99, isUnsigned: true)
!709 = !DIEnumerator(name: "PARAM_L1_CACHE_LINE_SIZE", value: 100, isUnsigned: true)
!710 = !DIEnumerator(name: "PARAM_L2_CACHE_SIZE", value: 101, isUnsigned: true)
!711 = !DIEnumerator(name: "PARAM_USE_CANONICAL_TYPES", value: 102, isUnsigned: true)
!712 = !DIEnumerator(name: "PARAM_MAX_PARTIAL_ANTIC_LENGTH", value: 103, isUnsigned: true)
!713 = !DIEnumerator(name: "PARAM_SCCVN_MAX_SCC_SIZE", value: 104, isUnsigned: true)
!714 = !DIEnumerator(name: "PARAM_IRA_MAX_LOOPS_NUM", value: 105, isUnsigned: true)
!715 = !DIEnumerator(name: "PARAM_IRA_MAX_CONFLICT_TABLE_SIZE", value: 106, isUnsigned: true)
!716 = !DIEnumerator(name: "PARAM_IRA_LOOP_RESERVED_REGS", value: 107, isUnsigned: true)
!717 = !DIEnumerator(name: "PARAM_SWITCH_CONVERSION_BRANCH_RATIO", value: 108, isUnsigned: true)
!718 = !DIEnumerator(name: "PARAM_LOOP_BLOCK_TILE_SIZE", value: 109, isUnsigned: true)
!719 = !DIEnumerator(name: "PARAM_GRAPHITE_MAX_NB_SCOP_PARAMS", value: 110, isUnsigned: true)
!720 = !DIEnumerator(name: "PARAM_GRAPHITE_MAX_BBS_PER_FUNCTION", value: 111, isUnsigned: true)
!721 = !DIEnumerator(name: "PARAM_LOOP_INVARIANT_MAX_BBS_IN_LOOP", value: 112, isUnsigned: true)
!722 = !DIEnumerator(name: "PARAM_SLP_MAX_INSNS_IN_BB", value: 113, isUnsigned: true)
!723 = !DIEnumerator(name: "PARAM_MIN_INSN_TO_PREFETCH_RATIO", value: 114, isUnsigned: true)
!724 = !DIEnumerator(name: "PARAM_PREFETCH_MIN_INSN_TO_MEM_RATIO", value: 115, isUnsigned: true)
!725 = !DIEnumerator(name: "PARAM_MAX_VARTRACK_SIZE", value: 116, isUnsigned: true)
!726 = !DIEnumerator(name: "PARAM_MIN_NONDEBUG_INSN_UID", value: 117, isUnsigned: true)
!727 = !DIEnumerator(name: "PARAM_IPA_SRA_PTR_GROWTH_FACTOR", value: 118, isUnsigned: true)
!728 = !DIEnumerator(name: "LAST_PARAM", value: 119, isUnsigned: true)
!729 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "inlining_mode", file: !3, line: 156, baseType: !7, size: 32, elements: !730)
!730 = !{!731, !732, !733, !734, !735}
!731 = !DIEnumerator(name: "INLINE_NONE", value: 0, isUnsigned: true)
!732 = !DIEnumerator(name: "INLINE_ALWAYS_INLINE", value: 1, isUnsigned: true)
!733 = !DIEnumerator(name: "INLINE_SIZE_NORECURSIVE", value: 2, isUnsigned: true)
!734 = !DIEnumerator(name: "INLINE_SIZE", value: 3, isUnsigned: true)
!735 = !DIEnumerator(name: "INLINE_ALL", value: 4, isUnsigned: true)
!736 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "built_in_class", file: !135, line: 205, baseType: !7, size: 32, elements: !737)
!737 = !{!738, !739, !740, !741}
!738 = !DIEnumerator(name: "NOT_BUILT_IN", value: 0, isUnsigned: true)
!739 = !DIEnumerator(name: "BUILT_IN_FRONTEND", value: 1, isUnsigned: true)
!740 = !DIEnumerator(name: "BUILT_IN_MD", value: 2, isUnsigned: true)
!741 = !DIEnumerator(name: "BUILT_IN_NORMAL", value: 3, isUnsigned: true)
!742 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "bb_flags", file: !337, line: 295, baseType: !7, size: 32, elements: !743)
!743 = !{!744, !745, !746, !747, !748, !749, !750, !751, !752, !753, !754, !755}
!744 = !DIEnumerator(name: "BB_NEW", value: 1, isUnsigned: true)
!745 = !DIEnumerator(name: "BB_REACHABLE", value: 2, isUnsigned: true)
!746 = !DIEnumerator(name: "BB_IRREDUCIBLE_LOOP", value: 4, isUnsigned: true)
!747 = !DIEnumerator(name: "BB_SUPERBLOCK", value: 8, isUnsigned: true)
!748 = !DIEnumerator(name: "BB_DISABLE_SCHEDULE", value: 16, isUnsigned: true)
!749 = !DIEnumerator(name: "BB_HOT_PARTITION", value: 32, isUnsigned: true)
!750 = !DIEnumerator(name: "BB_COLD_PARTITION", value: 64, isUnsigned: true)
!751 = !DIEnumerator(name: "BB_DUPLICATED", value: 128, isUnsigned: true)
!752 = !DIEnumerator(name: "BB_NON_LOCAL_GOTO_TARGET", value: 256, isUnsigned: true)
!753 = !DIEnumerator(name: "BB_RTL", value: 512, isUnsigned: true)
!754 = !DIEnumerator(name: "BB_FORWARDER_BLOCK", value: 1024, isUnsigned: true)
!755 = !DIEnumerator(name: "BB_NONTHREADABLE_BLOCK", value: 2048, isUnsigned: true)
!756 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gimple_code", file: !757, line: 51, baseType: !7, size: 32, elements: !758)
!757 = !DIFile(filename: "./gimple.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!758 = !{!759, !760, !761, !762, !763, !764, !765, !766, !767, !768, !769, !770, !771, !772, !773, !774, !775, !776, !777, !778, !779, !780, !781, !782, !783, !784, !785, !786, !787, !788, !789, !790, !791, !792, !793, !794}
!759 = !DIEnumerator(name: "GIMPLE_ERROR_MARK", value: 0, isUnsigned: true)
!760 = !DIEnumerator(name: "GIMPLE_COND", value: 1, isUnsigned: true)
!761 = !DIEnumerator(name: "GIMPLE_DEBUG", value: 2, isUnsigned: true)
!762 = !DIEnumerator(name: "GIMPLE_GOTO", value: 3, isUnsigned: true)
!763 = !DIEnumerator(name: "GIMPLE_LABEL", value: 4, isUnsigned: true)
!764 = !DIEnumerator(name: "GIMPLE_SWITCH", value: 5, isUnsigned: true)
!765 = !DIEnumerator(name: "GIMPLE_ASSIGN", value: 6, isUnsigned: true)
!766 = !DIEnumerator(name: "GIMPLE_ASM", value: 7, isUnsigned: true)
!767 = !DIEnumerator(name: "GIMPLE_CALL", value: 8, isUnsigned: true)
!768 = !DIEnumerator(name: "GIMPLE_RETURN", value: 9, isUnsigned: true)
!769 = !DIEnumerator(name: "GIMPLE_BIND", value: 10, isUnsigned: true)
!770 = !DIEnumerator(name: "GIMPLE_CATCH", value: 11, isUnsigned: true)
!771 = !DIEnumerator(name: "GIMPLE_EH_FILTER", value: 12, isUnsigned: true)
!772 = !DIEnumerator(name: "GIMPLE_EH_MUST_NOT_THROW", value: 13, isUnsigned: true)
!773 = !DIEnumerator(name: "GIMPLE_RESX", value: 14, isUnsigned: true)
!774 = !DIEnumerator(name: "GIMPLE_EH_DISPATCH", value: 15, isUnsigned: true)
!775 = !DIEnumerator(name: "GIMPLE_PHI", value: 16, isUnsigned: true)
!776 = !DIEnumerator(name: "GIMPLE_TRY", value: 17, isUnsigned: true)
!777 = !DIEnumerator(name: "GIMPLE_NOP", value: 18, isUnsigned: true)
!778 = !DIEnumerator(name: "GIMPLE_OMP_ATOMIC_LOAD", value: 19, isUnsigned: true)
!779 = !DIEnumerator(name: "GIMPLE_OMP_ATOMIC_STORE", value: 20, isUnsigned: true)
!780 = !DIEnumerator(name: "GIMPLE_OMP_CONTINUE", value: 21, isUnsigned: true)
!781 = !DIEnumerator(name: "GIMPLE_OMP_CRITICAL", value: 22, isUnsigned: true)
!782 = !DIEnumerator(name: "GIMPLE_OMP_FOR", value: 23, isUnsigned: true)
!783 = !DIEnumerator(name: "GIMPLE_OMP_MASTER", value: 24, isUnsigned: true)
!784 = !DIEnumerator(name: "GIMPLE_OMP_ORDERED", value: 25, isUnsigned: true)
!785 = !DIEnumerator(name: "GIMPLE_OMP_PARALLEL", value: 26, isUnsigned: true)
!786 = !DIEnumerator(name: "GIMPLE_OMP_TASK", value: 27, isUnsigned: true)
!787 = !DIEnumerator(name: "GIMPLE_OMP_RETURN", value: 28, isUnsigned: true)
!788 = !DIEnumerator(name: "GIMPLE_OMP_SECTION", value: 29, isUnsigned: true)
!789 = !DIEnumerator(name: "GIMPLE_OMP_SECTIONS", value: 30, isUnsigned: true)
!790 = !DIEnumerator(name: "GIMPLE_OMP_SECTIONS_SWITCH", value: 31, isUnsigned: true)
!791 = !DIEnumerator(name: "GIMPLE_OMP_SINGLE", value: 32, isUnsigned: true)
!792 = !DIEnumerator(name: "GIMPLE_PREDICT", value: 33, isUnsigned: true)
!793 = !DIEnumerator(name: "GIMPLE_WITH_CLEANUP_EXPR", value: 34, isUnsigned: true)
!794 = !DIEnumerator(name: "LAST_AND_UNUSED_GIMPLE_CODE", value: 35, isUnsigned: true)
!795 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gimple_rhs_class", file: !757, line: 80, baseType: !7, size: 32, elements: !796)
!796 = !{!797, !798, !799, !800}
!797 = !DIEnumerator(name: "GIMPLE_INVALID_RHS", value: 0, isUnsigned: true)
!798 = !DIEnumerator(name: "GIMPLE_BINARY_RHS", value: 1, isUnsigned: true)
!799 = !DIEnumerator(name: "GIMPLE_UNARY_RHS", value: 2, isUnsigned: true)
!800 = !DIEnumerator(name: "GIMPLE_SINGLE_RHS", value: 3, isUnsigned: true)
!801 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gimple_statement_structure_enum", file: !757, line: 727, baseType: !7, size: 32, elements: !802)
!802 = !{!803, !804, !805, !806, !807, !808, !809, !810, !811, !812, !813, !814, !815, !816, !817, !818, !819, !820, !821, !822, !823, !824, !825, !826}
!803 = !DIEnumerator(name: "GSS_BASE", value: 0, isUnsigned: true)
!804 = !DIEnumerator(name: "GSS_WITH_OPS", value: 1, isUnsigned: true)
!805 = !DIEnumerator(name: "GSS_WITH_MEM_OPS_BASE", value: 2, isUnsigned: true)
!806 = !DIEnumerator(name: "GSS_WITH_MEM_OPS", value: 3, isUnsigned: true)
!807 = !DIEnumerator(name: "GSS_ASM", value: 4, isUnsigned: true)
!808 = !DIEnumerator(name: "GSS_BIND", value: 5, isUnsigned: true)
!809 = !DIEnumerator(name: "GSS_PHI", value: 6, isUnsigned: true)
!810 = !DIEnumerator(name: "GSS_TRY", value: 7, isUnsigned: true)
!811 = !DIEnumerator(name: "GSS_CATCH", value: 8, isUnsigned: true)
!812 = !DIEnumerator(name: "GSS_EH_FILTER", value: 9, isUnsigned: true)
!813 = !DIEnumerator(name: "GSS_EH_MNT", value: 10, isUnsigned: true)
!814 = !DIEnumerator(name: "GSS_EH_CTRL", value: 11, isUnsigned: true)
!815 = !DIEnumerator(name: "GSS_WCE", value: 12, isUnsigned: true)
!816 = !DIEnumerator(name: "GSS_OMP", value: 13, isUnsigned: true)
!817 = !DIEnumerator(name: "GSS_OMP_CRITICAL", value: 14, isUnsigned: true)
!818 = !DIEnumerator(name: "GSS_OMP_FOR", value: 15, isUnsigned: true)
!819 = !DIEnumerator(name: "GSS_OMP_PARALLEL", value: 16, isUnsigned: true)
!820 = !DIEnumerator(name: "GSS_OMP_TASK", value: 17, isUnsigned: true)
!821 = !DIEnumerator(name: "GSS_OMP_SECTIONS", value: 18, isUnsigned: true)
!822 = !DIEnumerator(name: "GSS_OMP_SINGLE", value: 19, isUnsigned: true)
!823 = !DIEnumerator(name: "GSS_OMP_CONTINUE", value: 20, isUnsigned: true)
!824 = !DIEnumerator(name: "GSS_OMP_ATOMIC_LOAD", value: 21, isUnsigned: true)
!825 = !DIEnumerator(name: "GSS_OMP_ATOMIC_STORE", value: 22, isUnsigned: true)
!826 = !DIEnumerator(name: "LAST_GSS_ENUM", value: 23, isUnsigned: true)
!827 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "ipa_lattice_type", file: !828, line: 66, baseType: !7, size: 32, elements: !829)
!828 = !DIFile(filename: "./ipa-prop.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!829 = !{!830, !831, !832}
!830 = !DIEnumerator(name: "IPA_BOTTOM", value: 0, isUnsigned: true)
!831 = !DIEnumerator(name: "IPA_CONST_VALUE", value: 1, isUnsigned: true)
!832 = !DIEnumerator(name: "IPA_TOP", value: 2, isUnsigned: true)
!833 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "jump_func_type", file: !828, line: 48, baseType: !7, size: 32, elements: !834)
!834 = !{!835, !836, !837, !838, !839}
!835 = !DIEnumerator(name: "IPA_JF_UNKNOWN", value: 0, isUnsigned: true)
!836 = !DIEnumerator(name: "IPA_JF_CONST", value: 1, isUnsigned: true)
!837 = !DIEnumerator(name: "IPA_JF_CONST_MEMBER_PTR", value: 2, isUnsigned: true)
!838 = !DIEnumerator(name: "IPA_JF_PASS_THROUGH", value: 3, isUnsigned: true)
!839 = !DIEnumerator(name: "IPA_JF_ANCESTOR", value: 4, isUnsigned: true)
!840 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gt_types_enum", file: !841, line: 23, baseType: !7, size: 32, elements: !842)
!841 = !DIFile(filename: "./gtype-desc.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!842 = !{!843, !844, !845, !846, !847, !848, !849, !850, !851, !852, !853, !854, !855, !856, !857, !858, !859, !860, !861, !862, !863, !864, !865, !866, !867, !868, !869, !870, !871, !872, !873, !874, !875, !876, !877, !878, !879, !880, !881, !882, !883, !884, !885, !886, !887, !888, !889, !890, !891, !892, !893, !894, !895, !896, !897, !898, !899, !900, !901, !902, !903, !904, !905, !906, !907, !908, !909, !910, !911, !912, !913, !914, !915, !916, !917, !918, !919, !920, !921, !922, !923, !924, !925, !926, !927, !928, !929, !930, !931, !932, !933, !934, !935, !936, !937, !938, !939, !940, !941, !942, !943, !944, !945, !946, !947, !948, !949, !950, !951, !952, !953, !954, !955, !956, !957, !958, !959, !960, !961, !962, !963, !964, !965, !966, !967, !968, !969, !970, !971, !972, !973, !974, !975, !976, !977, !978, !979, !980, !981, !982, !983, !984, !985, !986, !987, !988, !989, !990, !991, !992, !993, !994, !995, !996, !997, !998, !999, !1000, !1001, !1002, !1003, !1004, !1005, !1006, !1007, !1008, !1009, !1010, !1011, !1012, !1013, !1014, !1015, !1016, !1017, !1018, !1019, !1020, !1021, !1022, !1023, !1024, !1025, !1026, !1027, !1028, !1029, !1030, !1031, !1032, !1033, !1034, !1035, !1036, !1037, !1038, !1039, !1040, !1041, !1042, !1043, !1044, !1045, !1046, !1047, !1048, !1049, !1050, !1051, !1052, !1053, !1054, !1055, !1056, !1057, !1058, !1059, !1060}
!843 = !DIEnumerator(name: "gt_ggc_e_15interface_tuple", value: 0, isUnsigned: true)
!844 = !DIEnumerator(name: "gt_ggc_e_16volatilized_type", value: 1, isUnsigned: true)
!845 = !DIEnumerator(name: "gt_ggc_e_17string_descriptor", value: 2, isUnsigned: true)
!846 = !DIEnumerator(name: "gt_ggc_e_15c_inline_static", value: 3, isUnsigned: true)
!847 = !DIEnumerator(name: "gt_ggc_e_24VEC_c_goto_bindings_p_gc", value: 4, isUnsigned: true)
!848 = !DIEnumerator(name: "gt_ggc_e_15c_goto_bindings", value: 5, isUnsigned: true)
!849 = !DIEnumerator(name: "gt_ggc_e_7c_scope", value: 6, isUnsigned: true)
!850 = !DIEnumerator(name: "gt_ggc_e_9c_binding", value: 7, isUnsigned: true)
!851 = !DIEnumerator(name: "gt_ggc_e_12c_label_vars", value: 8, isUnsigned: true)
!852 = !DIEnumerator(name: "gt_ggc_e_8c_parser", value: 9, isUnsigned: true)
!853 = !DIEnumerator(name: "gt_ggc_e_9imp_entry", value: 10, isUnsigned: true)
!854 = !DIEnumerator(name: "gt_ggc_e_16hashed_attribute", value: 11, isUnsigned: true)
!855 = !DIEnumerator(name: "gt_ggc_e_12hashed_entry", value: 12, isUnsigned: true)
!856 = !DIEnumerator(name: "gt_ggc_e_14type_assertion", value: 13, isUnsigned: true)
!857 = !DIEnumerator(name: "gt_ggc_e_18treetreehash_entry", value: 14, isUnsigned: true)
!858 = !DIEnumerator(name: "gt_ggc_e_5CPool", value: 15, isUnsigned: true)
!859 = !DIEnumerator(name: "gt_ggc_e_3JCF", value: 16, isUnsigned: true)
!860 = !DIEnumerator(name: "gt_ggc_e_17module_htab_entry", value: 17, isUnsigned: true)
!861 = !DIEnumerator(name: "gt_ggc_e_13binding_level", value: 18, isUnsigned: true)
!862 = !DIEnumerator(name: "gt_ggc_e_9opt_stack", value: 19, isUnsigned: true)
!863 = !DIEnumerator(name: "gt_ggc_e_11align_stack", value: 20, isUnsigned: true)
!864 = !DIEnumerator(name: "gt_ggc_e_18VEC_tree_gc_vec_gc", value: 21, isUnsigned: true)
!865 = !DIEnumerator(name: "gt_ggc_e_19VEC_const_char_p_gc", value: 22, isUnsigned: true)
!866 = !DIEnumerator(name: "gt_ggc_e_21pending_abstract_type", value: 23, isUnsigned: true)
!867 = !DIEnumerator(name: "gt_ggc_e_15VEC_tree_int_gc", value: 24, isUnsigned: true)
!868 = !DIEnumerator(name: "gt_ggc_e_9cp_parser", value: 25, isUnsigned: true)
!869 = !DIEnumerator(name: "gt_ggc_e_17cp_parser_context", value: 26, isUnsigned: true)
!870 = !DIEnumerator(name: "gt_ggc_e_8cp_lexer", value: 27, isUnsigned: true)
!871 = !DIEnumerator(name: "gt_ggc_e_10tree_check", value: 28, isUnsigned: true)
!872 = !DIEnumerator(name: "gt_ggc_e_22VEC_deferred_access_gc", value: 29, isUnsigned: true)
!873 = !DIEnumerator(name: "gt_ggc_e_10spec_entry", value: 30, isUnsigned: true)
!874 = !DIEnumerator(name: "gt_ggc_e_16pending_template", value: 31, isUnsigned: true)
!875 = !DIEnumerator(name: "gt_ggc_e_21named_label_use_entry", value: 32, isUnsigned: true)
!876 = !DIEnumerator(name: "gt_ggc_e_28VEC_deferred_access_check_gc", value: 33, isUnsigned: true)
!877 = !DIEnumerator(name: "gt_ggc_e_18sorted_fields_type", value: 34, isUnsigned: true)
!878 = !DIEnumerator(name: "gt_ggc_e_18VEC_tree_pair_s_gc", value: 35, isUnsigned: true)
!879 = !DIEnumerator(name: "gt_ggc_e_17named_label_entry", value: 36, isUnsigned: true)
!880 = !DIEnumerator(name: "gt_ggc_e_32VEC_qualified_typedef_usage_t_gc", value: 37, isUnsigned: true)
!881 = !DIEnumerator(name: "gt_ggc_e_14cp_token_cache", value: 38, isUnsigned: true)
!882 = !DIEnumerator(name: "gt_ggc_e_11saved_scope", value: 39, isUnsigned: true)
!883 = !DIEnumerator(name: "gt_ggc_e_16cxx_int_tree_map", value: 40, isUnsigned: true)
!884 = !DIEnumerator(name: "gt_ggc_e_23VEC_cp_class_binding_gc", value: 41, isUnsigned: true)
!885 = !DIEnumerator(name: "gt_ggc_e_24VEC_cxx_saved_binding_gc", value: 42, isUnsigned: true)
!886 = !DIEnumerator(name: "gt_ggc_e_16cp_binding_level", value: 43, isUnsigned: true)
!887 = !DIEnumerator(name: "gt_ggc_e_11cxx_binding", value: 44, isUnsigned: true)
!888 = !DIEnumerator(name: "gt_ggc_e_15binding_entry_s", value: 45, isUnsigned: true)
!889 = !DIEnumerator(name: "gt_ggc_e_15binding_table_s", value: 46, isUnsigned: true)
!890 = !DIEnumerator(name: "gt_ggc_e_11tinst_level", value: 47, isUnsigned: true)
!891 = !DIEnumerator(name: "gt_ggc_e_14VEC_tinfo_s_gc", value: 48, isUnsigned: true)
!892 = !DIEnumerator(name: "gt_ggc_e_18gnat_binding_level", value: 49, isUnsigned: true)
!893 = !DIEnumerator(name: "gt_ggc_e_9elab_info", value: 50, isUnsigned: true)
!894 = !DIEnumerator(name: "gt_ggc_e_10stmt_group", value: 51, isUnsigned: true)
!895 = !DIEnumerator(name: "gt_ggc_e_16VEC_parm_attr_gc", value: 52, isUnsigned: true)
!896 = !DIEnumerator(name: "gt_ggc_e_11parm_attr_d", value: 53, isUnsigned: true)
!897 = !DIEnumerator(name: "gt_ggc_e_22VEC_ipa_edge_args_t_gc", value: 54, isUnsigned: true)
!898 = !DIEnumerator(name: "gt_ggc_e_20lto_symtab_entry_def", value: 55, isUnsigned: true)
!899 = !DIEnumerator(name: "gt_ggc_e_20ssa_operand_memory_d", value: 56, isUnsigned: true)
!900 = !DIEnumerator(name: "gt_ggc_e_13scev_info_str", value: 57, isUnsigned: true)
!901 = !DIEnumerator(name: "gt_ggc_e_24VEC_mem_addr_template_gc", value: 58, isUnsigned: true)
!902 = !DIEnumerator(name: "gt_ggc_e_13VEC_gimple_gc", value: 59, isUnsigned: true)
!903 = !DIEnumerator(name: "gt_ggc_e_9type_hash", value: 60, isUnsigned: true)
!904 = !DIEnumerator(name: "gt_ggc_e_16string_pool_data", value: 61, isUnsigned: true)
!905 = !DIEnumerator(name: "gt_ggc_e_13libfunc_entry", value: 62, isUnsigned: true)
!906 = !DIEnumerator(name: "gt_ggc_e_23temp_slot_address_entry", value: 63, isUnsigned: true)
!907 = !DIEnumerator(name: "gt_ggc_e_15throw_stmt_node", value: 64, isUnsigned: true)
!908 = !DIEnumerator(name: "gt_ggc_e_21VEC_eh_landing_pad_gc", value: 65, isUnsigned: true)
!909 = !DIEnumerator(name: "gt_ggc_e_16VEC_eh_region_gc", value: 66, isUnsigned: true)
!910 = !DIEnumerator(name: "gt_ggc_e_10eh_catch_d", value: 67, isUnsigned: true)
!911 = !DIEnumerator(name: "gt_ggc_e_16eh_landing_pad_d", value: 68, isUnsigned: true)
!912 = !DIEnumerator(name: "gt_ggc_e_11eh_region_d", value: 69, isUnsigned: true)
!913 = !DIEnumerator(name: "gt_ggc_e_10vcall_insn", value: 70, isUnsigned: true)
!914 = !DIEnumerator(name: "gt_ggc_e_18VEC_vcall_entry_gc", value: 71, isUnsigned: true)
!915 = !DIEnumerator(name: "gt_ggc_e_18VEC_dcall_entry_gc", value: 72, isUnsigned: true)
!916 = !DIEnumerator(name: "gt_ggc_e_16var_loc_list_def", value: 73, isUnsigned: true)
!917 = !DIEnumerator(name: "gt_ggc_e_12var_loc_node", value: 74, isUnsigned: true)
!918 = !DIEnumerator(name: "gt_ggc_e_20VEC_die_arg_entry_gc", value: 75, isUnsigned: true)
!919 = !DIEnumerator(name: "gt_ggc_e_16limbo_die_struct", value: 76, isUnsigned: true)
!920 = !DIEnumerator(name: "gt_ggc_e_20VEC_pubname_entry_gc", value: 77, isUnsigned: true)
!921 = !DIEnumerator(name: "gt_ggc_e_19VEC_dw_attr_node_gc", value: 78, isUnsigned: true)
!922 = !DIEnumerator(name: "gt_ggc_e_18comdat_type_struct", value: 79, isUnsigned: true)
!923 = !DIEnumerator(name: "gt_ggc_e_25dw_ranges_by_label_struct", value: 80, isUnsigned: true)
!924 = !DIEnumerator(name: "gt_ggc_e_16dw_ranges_struct", value: 81, isUnsigned: true)
!925 = !DIEnumerator(name: "gt_ggc_e_28dw_separate_line_info_struct", value: 82, isUnsigned: true)
!926 = !DIEnumerator(name: "gt_ggc_e_19dw_line_info_struct", value: 83, isUnsigned: true)
!927 = !DIEnumerator(name: "gt_ggc_e_25VEC_deferred_locations_gc", value: 84, isUnsigned: true)
!928 = !DIEnumerator(name: "gt_ggc_e_18dw_loc_list_struct", value: 85, isUnsigned: true)
!929 = !DIEnumerator(name: "gt_ggc_e_15dwarf_file_data", value: 86, isUnsigned: true)
!930 = !DIEnumerator(name: "gt_ggc_e_15queued_reg_save", value: 87, isUnsigned: true)
!931 = !DIEnumerator(name: "gt_ggc_e_20indirect_string_node", value: 88, isUnsigned: true)
!932 = !DIEnumerator(name: "gt_ggc_e_19dw_loc_descr_struct", value: 89, isUnsigned: true)
!933 = !DIEnumerator(name: "gt_ggc_e_13dw_fde_struct", value: 90, isUnsigned: true)
!934 = !DIEnumerator(name: "gt_ggc_e_13dw_cfi_struct", value: 91, isUnsigned: true)
!935 = !DIEnumerator(name: "gt_ggc_e_8typeinfo", value: 92, isUnsigned: true)
!936 = !DIEnumerator(name: "gt_ggc_e_22VEC_alias_set_entry_gc", value: 93, isUnsigned: true)
!937 = !DIEnumerator(name: "gt_ggc_e_17alias_set_entry_d", value: 94, isUnsigned: true)
!938 = !DIEnumerator(name: "gt_ggc_e_24constant_descriptor_tree", value: 95, isUnsigned: true)
!939 = !DIEnumerator(name: "gt_ggc_e_15cgraph_asm_node", value: 96, isUnsigned: true)
!940 = !DIEnumerator(name: "gt_ggc_e_12varpool_node", value: 97, isUnsigned: true)
!941 = !DIEnumerator(name: "gt_ggc_e_22VEC_cgraph_node_set_gc", value: 98, isUnsigned: true)
!942 = !DIEnumerator(name: "gt_ggc_e_19cgraph_node_set_def", value: 99, isUnsigned: true)
!943 = !DIEnumerator(name: "gt_ggc_e_27cgraph_node_set_element_def", value: 100, isUnsigned: true)
!944 = !DIEnumerator(name: "gt_ggc_e_22VEC_cgraph_node_ptr_gc", value: 101, isUnsigned: true)
!945 = !DIEnumerator(name: "gt_ggc_e_11cgraph_edge", value: 102, isUnsigned: true)
!946 = !DIEnumerator(name: "gt_ggc_e_24VEC_ipa_replace_map_p_gc", value: 103, isUnsigned: true)
!947 = !DIEnumerator(name: "gt_ggc_e_15ipa_replace_map", value: 104, isUnsigned: true)
!948 = !DIEnumerator(name: "gt_ggc_e_11cgraph_node", value: 105, isUnsigned: true)
!949 = !DIEnumerator(name: "gt_ggc_e_18VEC_basic_block_gc", value: 106, isUnsigned: true)
!950 = !DIEnumerator(name: "gt_ggc_e_14gimple_bb_info", value: 107, isUnsigned: true)
!951 = !DIEnumerator(name: "gt_ggc_e_11rtl_bb_info", value: 108, isUnsigned: true)
!952 = !DIEnumerator(name: "gt_ggc_e_11VEC_edge_gc", value: 109, isUnsigned: true)
!953 = !DIEnumerator(name: "gt_ggc_e_17cselib_val_struct", value: 110, isUnsigned: true)
!954 = !DIEnumerator(name: "gt_ggc_e_12elt_loc_list", value: 111, isUnsigned: true)
!955 = !DIEnumerator(name: "gt_ggc_e_13VEC_loop_p_gc", value: 112, isUnsigned: true)
!956 = !DIEnumerator(name: "gt_ggc_e_4loop", value: 113, isUnsigned: true)
!957 = !DIEnumerator(name: "gt_ggc_e_9loop_exit", value: 114, isUnsigned: true)
!958 = !DIEnumerator(name: "gt_ggc_e_13nb_iter_bound", value: 115, isUnsigned: true)
!959 = !DIEnumerator(name: "gt_ggc_e_24types_used_by_vars_entry", value: 116, isUnsigned: true)
!960 = !DIEnumerator(name: "gt_ggc_e_17language_function", value: 117, isUnsigned: true)
!961 = !DIEnumerator(name: "gt_ggc_e_5loops", value: 118, isUnsigned: true)
!962 = !DIEnumerator(name: "gt_ggc_e_18control_flow_graph", value: 119, isUnsigned: true)
!963 = !DIEnumerator(name: "gt_ggc_e_9eh_status", value: 120, isUnsigned: true)
!964 = !DIEnumerator(name: "gt_ggc_e_20initial_value_struct", value: 121, isUnsigned: true)
!965 = !DIEnumerator(name: "gt_ggc_e_17rtx_constant_pool", value: 122, isUnsigned: true)
!966 = !DIEnumerator(name: "gt_ggc_e_18VEC_temp_slot_p_gc", value: 123, isUnsigned: true)
!967 = !DIEnumerator(name: "gt_ggc_e_9temp_slot", value: 124, isUnsigned: true)
!968 = !DIEnumerator(name: "gt_ggc_e_9gimple_df", value: 125, isUnsigned: true)
!969 = !DIEnumerator(name: "gt_ggc_e_23VEC_call_site_record_gc", value: 126, isUnsigned: true)
!970 = !DIEnumerator(name: "gt_ggc_e_18call_site_record_d", value: 127, isUnsigned: true)
!971 = !DIEnumerator(name: "gt_ggc_e_14sequence_stack", value: 128, isUnsigned: true)
!972 = !DIEnumerator(name: "gt_ggc_e_8elt_list", value: 129, isUnsigned: true)
!973 = !DIEnumerator(name: "gt_ggc_e_17tree_priority_map", value: 130, isUnsigned: true)
!974 = !DIEnumerator(name: "gt_ggc_e_12tree_int_map", value: 131, isUnsigned: true)
!975 = !DIEnumerator(name: "gt_ggc_e_8tree_map", value: 132, isUnsigned: true)
!976 = !DIEnumerator(name: "gt_ggc_e_14lang_tree_node", value: 133, isUnsigned: true)
!977 = !DIEnumerator(name: "gt_ggc_e_24tree_statement_list_node", value: 134, isUnsigned: true)
!978 = !DIEnumerator(name: "gt_ggc_e_9var_ann_d", value: 135, isUnsigned: true)
!979 = !DIEnumerator(name: "gt_ggc_e_9lang_decl", value: 136, isUnsigned: true)
!980 = !DIEnumerator(name: "gt_ggc_e_9lang_type", value: 137, isUnsigned: true)
!981 = !DIEnumerator(name: "gt_ggc_e_10die_struct", value: 138, isUnsigned: true)
!982 = !DIEnumerator(name: "gt_ggc_e_15varray_head_tag", value: 139, isUnsigned: true)
!983 = !DIEnumerator(name: "gt_ggc_e_12ptr_info_def", value: 140, isUnsigned: true)
!984 = !DIEnumerator(name: "gt_ggc_e_22VEC_constructor_elt_gc", value: 141, isUnsigned: true)
!985 = !DIEnumerator(name: "gt_ggc_e_17VEC_alias_pair_gc", value: 142, isUnsigned: true)
!986 = !DIEnumerator(name: "gt_ggc_e_11VEC_tree_gc", value: 143, isUnsigned: true)
!987 = !DIEnumerator(name: "gt_ggc_e_12VEC_uchar_gc", value: 144, isUnsigned: true)
!988 = !DIEnumerator(name: "gt_ggc_e_8function", value: 145, isUnsigned: true)
!989 = !DIEnumerator(name: "gt_ggc_e_23constant_descriptor_rtx", value: 146, isUnsigned: true)
!990 = !DIEnumerator(name: "gt_ggc_e_11fixed_value", value: 147, isUnsigned: true)
!991 = !DIEnumerator(name: "gt_ggc_e_10real_value", value: 148, isUnsigned: true)
!992 = !DIEnumerator(name: "gt_ggc_e_10VEC_rtx_gc", value: 149, isUnsigned: true)
!993 = !DIEnumerator(name: "gt_ggc_e_12object_block", value: 150, isUnsigned: true)
!994 = !DIEnumerator(name: "gt_ggc_e_9reg_attrs", value: 151, isUnsigned: true)
!995 = !DIEnumerator(name: "gt_ggc_e_9mem_attrs", value: 152, isUnsigned: true)
!996 = !DIEnumerator(name: "gt_ggc_e_14bitmap_obstack", value: 153, isUnsigned: true)
!997 = !DIEnumerator(name: "gt_ggc_e_18bitmap_element_def", value: 154, isUnsigned: true)
!998 = !DIEnumerator(name: "gt_ggc_e_16machine_function", value: 155, isUnsigned: true)
!999 = !DIEnumerator(name: "gt_ggc_e_17stack_local_entry", value: 156, isUnsigned: true)
!1000 = !DIEnumerator(name: "gt_ggc_e_15basic_block_def", value: 157, isUnsigned: true)
!1001 = !DIEnumerator(name: "gt_ggc_e_8edge_def", value: 158, isUnsigned: true)
!1002 = !DIEnumerator(name: "gt_ggc_e_17gimple_seq_node_d", value: 159, isUnsigned: true)
!1003 = !DIEnumerator(name: "gt_ggc_e_12gimple_seq_d", value: 160, isUnsigned: true)
!1004 = !DIEnumerator(name: "gt_ggc_e_7section", value: 161, isUnsigned: true)
!1005 = !DIEnumerator(name: "gt_ggc_e_18gimple_statement_d", value: 162, isUnsigned: true)
!1006 = !DIEnumerator(name: "gt_ggc_e_9rtvec_def", value: 163, isUnsigned: true)
!1007 = !DIEnumerator(name: "gt_ggc_e_7rtx_def", value: 164, isUnsigned: true)
!1008 = !DIEnumerator(name: "gt_ggc_e_15bitmap_head_def", value: 165, isUnsigned: true)
!1009 = !DIEnumerator(name: "gt_ggc_e_9tree_node", value: 166, isUnsigned: true)
!1010 = !DIEnumerator(name: "gt_ggc_e_6answer", value: 167, isUnsigned: true)
!1011 = !DIEnumerator(name: "gt_ggc_e_9cpp_macro", value: 168, isUnsigned: true)
!1012 = !DIEnumerator(name: "gt_ggc_e_9cpp_token", value: 169, isUnsigned: true)
!1013 = !DIEnumerator(name: "gt_ggc_e_9line_maps", value: 170, isUnsigned: true)
!1014 = !DIEnumerator(name: "gt_e_II17splay_tree_node_s", value: 171, isUnsigned: true)
!1015 = !DIEnumerator(name: "gt_e_SP9tree_node17splay_tree_node_s", value: 172, isUnsigned: true)
!1016 = !DIEnumerator(name: "gt_e_P9tree_nodeP9tree_node17splay_tree_node_s", value: 173, isUnsigned: true)
!1017 = !DIEnumerator(name: "gt_e_IP9tree_node17splay_tree_node_s", value: 174, isUnsigned: true)
!1018 = !DIEnumerator(name: "gt_e_P15interface_tuple4htab", value: 175, isUnsigned: true)
!1019 = !DIEnumerator(name: "gt_e_P16volatilized_type4htab", value: 176, isUnsigned: true)
!1020 = !DIEnumerator(name: "gt_e_P17string_descriptor4htab", value: 177, isUnsigned: true)
!1021 = !DIEnumerator(name: "gt_e_P14type_assertion4htab", value: 178, isUnsigned: true)
!1022 = !DIEnumerator(name: "gt_e_P18treetreehash_entry4htab", value: 179, isUnsigned: true)
!1023 = !DIEnumerator(name: "gt_e_P17module_htab_entry4htab", value: 180, isUnsigned: true)
!1024 = !DIEnumerator(name: "gt_e_P21pending_abstract_type4htab", value: 181, isUnsigned: true)
!1025 = !DIEnumerator(name: "gt_e_P10spec_entry4htab", value: 182, isUnsigned: true)
!1026 = !DIEnumerator(name: "gt_e_P16cxx_int_tree_map4htab", value: 183, isUnsigned: true)
!1027 = !DIEnumerator(name: "gt_e_P17named_label_entry4htab", value: 184, isUnsigned: true)
!1028 = !DIEnumerator(name: "gt_e_P12tree_int_map4htab", value: 185, isUnsigned: true)
!1029 = !DIEnumerator(name: "gt_e_P20lto_symtab_entry_def4htab", value: 186, isUnsigned: true)
!1030 = !DIEnumerator(name: "gt_e_IP9tree_node12splay_tree_s", value: 187, isUnsigned: true)
!1031 = !DIEnumerator(name: "gt_e_P9tree_nodeP9tree_node12splay_tree_s", value: 188, isUnsigned: true)
!1032 = !DIEnumerator(name: "gt_e_P12varpool_node4htab", value: 189, isUnsigned: true)
!1033 = !DIEnumerator(name: "gt_e_P13scev_info_str4htab", value: 190, isUnsigned: true)
!1034 = !DIEnumerator(name: "gt_e_P23constant_descriptor_rtx4htab", value: 191, isUnsigned: true)
!1035 = !DIEnumerator(name: "gt_e_P24constant_descriptor_tree4htab", value: 192, isUnsigned: true)
!1036 = !DIEnumerator(name: "gt_e_P12object_block4htab", value: 193, isUnsigned: true)
!1037 = !DIEnumerator(name: "gt_e_P7section4htab", value: 194, isUnsigned: true)
!1038 = !DIEnumerator(name: "gt_e_P17tree_priority_map4htab", value: 195, isUnsigned: true)
!1039 = !DIEnumerator(name: "gt_e_P8tree_map4htab", value: 196, isUnsigned: true)
!1040 = !DIEnumerator(name: "gt_e_P9type_hash4htab", value: 197, isUnsigned: true)
!1041 = !DIEnumerator(name: "gt_e_P13libfunc_entry4htab", value: 198, isUnsigned: true)
!1042 = !DIEnumerator(name: "gt_e_P23temp_slot_address_entry4htab", value: 199, isUnsigned: true)
!1043 = !DIEnumerator(name: "gt_e_P15throw_stmt_node4htab", value: 200, isUnsigned: true)
!1044 = !DIEnumerator(name: "gt_e_P9reg_attrs4htab", value: 201, isUnsigned: true)
!1045 = !DIEnumerator(name: "gt_e_P9mem_attrs4htab", value: 202, isUnsigned: true)
!1046 = !DIEnumerator(name: "gt_e_P7rtx_def4htab", value: 203, isUnsigned: true)
!1047 = !DIEnumerator(name: "gt_e_SP9tree_node12splay_tree_s", value: 204, isUnsigned: true)
!1048 = !DIEnumerator(name: "gt_e_P10vcall_insn4htab", value: 205, isUnsigned: true)
!1049 = !DIEnumerator(name: "gt_e_P16var_loc_list_def4htab", value: 206, isUnsigned: true)
!1050 = !DIEnumerator(name: "gt_e_P10die_struct4htab", value: 207, isUnsigned: true)
!1051 = !DIEnumerator(name: "gt_e_P15dwarf_file_data4htab", value: 208, isUnsigned: true)
!1052 = !DIEnumerator(name: "gt_e_P20indirect_string_node4htab", value: 209, isUnsigned: true)
!1053 = !DIEnumerator(name: "gt_e_P11cgraph_node4htab", value: 210, isUnsigned: true)
!1054 = !DIEnumerator(name: "gt_e_II12splay_tree_s", value: 211, isUnsigned: true)
!1055 = !DIEnumerator(name: "gt_e_P27cgraph_node_set_element_def4htab", value: 212, isUnsigned: true)
!1056 = !DIEnumerator(name: "gt_e_P11cgraph_edge4htab", value: 213, isUnsigned: true)
!1057 = !DIEnumerator(name: "gt_e_P9loop_exit4htab", value: 214, isUnsigned: true)
!1058 = !DIEnumerator(name: "gt_e_P24types_used_by_vars_entry4htab", value: 215, isUnsigned: true)
!1059 = !DIEnumerator(name: "gt_e_P9tree_node4htab", value: 216, isUnsigned: true)
!1060 = !DIEnumerator(name: "gt_types_enum_last", value: 217, isUnsigned: true)
!1061 = !{!1062, !1064, !729, !1065, !1068, !1069, !134, !795, !1132, !2462, !1254, !1762, !1108, !2464, !2470, !2694, !2695, !2696, !1063, !2709, !7, !2723, !2768}
!1062 = !DIDerivedType(tag: DW_TAG_typedef, name: "gcov_type", file: !337, line: 119, baseType: !1063)
!1063 = !DIBasicType(name: "long int", size: 64, encoding: DW_ATE_signed)
!1064 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!1065 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !1066, line: 46, baseType: !1067)
!1066 = !DIFile(filename: "Rohit/IR2Vec-LoopOptimizationFramework/build_REL_AsrtON/lib/clang/10.0.1/include/stddef.h", directory: "/home/venkat/IF-DV")
!1067 = !DIBasicType(name: "long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!1068 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!1069 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap", file: !1070, line: 47, baseType: !1071)
!1070 = !DIFile(filename: "./coretypes.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1071 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1072, size: 64)
!1072 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_head_def", file: !1073, line: 75, size: 256, elements: !1074)
!1073 = !DIFile(filename: "./bitmap.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1074 = !{!1075, !1089, !1090, !1091}
!1075 = !DIDerivedType(tag: DW_TAG_member, name: "first", scope: !1072, file: !1073, line: 76, baseType: !1076, size: 64)
!1076 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1077, size: 64)
!1077 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap_element", file: !1073, line: 68, baseType: !1078)
!1078 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_element_def", file: !1073, line: 63, size: 320, elements: !1079)
!1079 = !{!1080, !1082, !1083, !1084}
!1080 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1078, file: !1073, line: 64, baseType: !1081, size: 64)
!1081 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1078, size: 64)
!1082 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1078, file: !1073, line: 65, baseType: !1081, size: 64, offset: 64)
!1083 = !DIDerivedType(tag: DW_TAG_member, name: "indx", scope: !1078, file: !1073, line: 66, baseType: !7, size: 32, offset: 128)
!1084 = !DIDerivedType(tag: DW_TAG_member, name: "bits", scope: !1078, file: !1073, line: 67, baseType: !1085, size: 128, offset: 192)
!1085 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1086, size: 128, elements: !1087)
!1086 = !DIDerivedType(tag: DW_TAG_typedef, name: "BITMAP_WORD", file: !1073, line: 29, baseType: !1067)
!1087 = !{!1088}
!1088 = !DISubrange(count: 2)
!1089 = !DIDerivedType(tag: DW_TAG_member, name: "current", scope: !1072, file: !1073, line: 77, baseType: !1076, size: 64, offset: 64)
!1090 = !DIDerivedType(tag: DW_TAG_member, name: "indx", scope: !1072, file: !1073, line: 78, baseType: !7, size: 32, offset: 128)
!1091 = !DIDerivedType(tag: DW_TAG_member, name: "obstack", scope: !1072, file: !1073, line: 79, baseType: !1092, size: 64, offset: 192)
!1092 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1093, size: 64)
!1093 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap_obstack", file: !1073, line: 49, baseType: !1094)
!1094 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_obstack", file: !1073, line: 45, size: 832, elements: !1095)
!1095 = !{!1096, !1097, !1098}
!1096 = !DIDerivedType(tag: DW_TAG_member, name: "elements", scope: !1094, file: !1073, line: 46, baseType: !1081, size: 64)
!1097 = !DIDerivedType(tag: DW_TAG_member, name: "heads", scope: !1094, file: !1073, line: 47, baseType: !1071, size: 64, offset: 64)
!1098 = !DIDerivedType(tag: DW_TAG_member, name: "obstack", scope: !1094, file: !1073, line: 48, baseType: !1099, size: 704, offset: 128)
!1099 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "obstack", file: !1100, line: 164, size: 704, elements: !1101)
!1100 = !DIFile(filename: "./include/obstack.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1101 = !{!1102, !1103, !1115, !1116, !1117, !1118, !1119, !1120, !1124, !1128, !1129, !1130, !1131}
!1102 = !DIDerivedType(tag: DW_TAG_member, name: "chunk_size", scope: !1099, file: !1100, line: 166, baseType: !1063, size: 64)
!1103 = !DIDerivedType(tag: DW_TAG_member, name: "chunk", scope: !1099, file: !1100, line: 167, baseType: !1104, size: 64, offset: 64)
!1104 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1105, size: 64)
!1105 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_obstack_chunk", file: !1100, line: 157, size: 192, elements: !1106)
!1106 = !{!1107, !1110, !1111}
!1107 = !DIDerivedType(tag: DW_TAG_member, name: "limit", scope: !1105, file: !1100, line: 159, baseType: !1108, size: 64)
!1108 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1109, size: 64)
!1109 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!1110 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1105, file: !1100, line: 160, baseType: !1104, size: 64, offset: 64)
!1111 = !DIDerivedType(tag: DW_TAG_member, name: "contents", scope: !1105, file: !1100, line: 161, baseType: !1112, size: 32, offset: 128)
!1112 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1109, size: 32, elements: !1113)
!1113 = !{!1114}
!1114 = !DISubrange(count: 4)
!1115 = !DIDerivedType(tag: DW_TAG_member, name: "object_base", scope: !1099, file: !1100, line: 168, baseType: !1108, size: 64, offset: 128)
!1116 = !DIDerivedType(tag: DW_TAG_member, name: "next_free", scope: !1099, file: !1100, line: 169, baseType: !1108, size: 64, offset: 192)
!1117 = !DIDerivedType(tag: DW_TAG_member, name: "chunk_limit", scope: !1099, file: !1100, line: 170, baseType: !1108, size: 64, offset: 256)
!1118 = !DIDerivedType(tag: DW_TAG_member, name: "temp", scope: !1099, file: !1100, line: 171, baseType: !1063, size: 64, offset: 320)
!1119 = !DIDerivedType(tag: DW_TAG_member, name: "alignment_mask", scope: !1099, file: !1100, line: 172, baseType: !1064, size: 32, offset: 384)
!1120 = !DIDerivedType(tag: DW_TAG_member, name: "chunkfun", scope: !1099, file: !1100, line: 176, baseType: !1121, size: 64, offset: 448)
!1121 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1122, size: 64)
!1122 = !DISubroutineType(types: !1123)
!1123 = !{!1104, !1068, !1063}
!1124 = !DIDerivedType(tag: DW_TAG_member, name: "freefun", scope: !1099, file: !1100, line: 177, baseType: !1125, size: 64, offset: 512)
!1125 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1126, size: 64)
!1126 = !DISubroutineType(types: !1127)
!1127 = !{null, !1068, !1104}
!1128 = !DIDerivedType(tag: DW_TAG_member, name: "extra_arg", scope: !1099, file: !1100, line: 178, baseType: !1068, size: 64, offset: 576)
!1129 = !DIDerivedType(tag: DW_TAG_member, name: "use_extra_arg", scope: !1099, file: !1100, line: 179, baseType: !7, size: 1, offset: 640, flags: DIFlagBitField, extraData: i64 640)
!1130 = !DIDerivedType(tag: DW_TAG_member, name: "maybe_empty_object", scope: !1099, file: !1100, line: 180, baseType: !7, size: 1, offset: 641, flags: DIFlagBitField, extraData: i64 640)
!1131 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_failed", scope: !1099, file: !1100, line: 184, baseType: !7, size: 1, offset: 642, flags: DIFlagBitField, extraData: i64 640)
!1132 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1133, size: 64)
!1133 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "gimple_statement_d", file: !757, line: 737, size: 768, elements: !1134)
!1134 = !{!1135, !2309, !2319, !2325, !2330, !2335, !2342, !2348, !2354, !2359, !2373, !2378, !2384, !2389, !2399, !2404, !2420, !2427, !2434, !2440, !2445, !2451, !2457}
!1135 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1133, file: !757, line: 738, baseType: !1136, size: 256)
!1136 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_base", file: !757, line: 271, size: 256, elements: !1137)
!1137 = !{!1138, !1139, !1140, !1141, !1142, !1143, !1144, !1145, !1146, !1147, !1148, !1153, !1154, !2308}
!1138 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !1136, file: !757, line: 274, baseType: !7, size: 8, flags: DIFlagBitField, extraData: i64 0)
!1139 = !DIDerivedType(tag: DW_TAG_member, name: "no_warning", scope: !1136, file: !757, line: 277, baseType: !7, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1140 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !1136, file: !757, line: 281, baseType: !7, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1141 = !DIDerivedType(tag: DW_TAG_member, name: "nontemporal_move", scope: !1136, file: !757, line: 284, baseType: !7, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1142 = !DIDerivedType(tag: DW_TAG_member, name: "plf", scope: !1136, file: !757, line: 291, baseType: !7, size: 2, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!1143 = !DIDerivedType(tag: DW_TAG_member, name: "modified", scope: !1136, file: !757, line: 295, baseType: !7, size: 1, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!1144 = !DIDerivedType(tag: DW_TAG_member, name: "has_volatile_ops", scope: !1136, file: !757, line: 298, baseType: !7, size: 1, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!1145 = !DIDerivedType(tag: DW_TAG_member, name: "pad", scope: !1136, file: !757, line: 301, baseType: !7, size: 1, offset: 15, flags: DIFlagBitField, extraData: i64 0)
!1146 = !DIDerivedType(tag: DW_TAG_member, name: "subcode", scope: !1136, file: !757, line: 307, baseType: !7, size: 16, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1147 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !1136, file: !757, line: 312, baseType: !7, size: 32, offset: 32)
!1148 = !DIDerivedType(tag: DW_TAG_member, name: "location", scope: !1136, file: !757, line: 316, baseType: !1149, size: 32, offset: 64)
!1149 = !DIDerivedType(tag: DW_TAG_typedef, name: "location_t", file: !1150, line: 58, baseType: !1151)
!1150 = !DIFile(filename: "./input.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1151 = !DIDerivedType(tag: DW_TAG_typedef, name: "source_location", file: !1152, line: 44, baseType: !7)
!1152 = !DIFile(filename: "./line-map.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1153 = !DIDerivedType(tag: DW_TAG_member, name: "num_ops", scope: !1136, file: !757, line: 319, baseType: !7, size: 32, offset: 96)
!1154 = !DIDerivedType(tag: DW_TAG_member, name: "bb", scope: !1136, file: !757, line: 323, baseType: !1155, size: 64, offset: 128)
!1155 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1156, size: 64)
!1156 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "basic_block_def", file: !337, line: 217, size: 832, elements: !1157)
!1157 = !{!1158, !2273, !2274, !2275, !2278, !2282, !2283, !2284, !2302, !2303, !2304, !2305, !2306, !2307}
!1158 = !DIDerivedType(tag: DW_TAG_member, name: "preds", scope: !1156, file: !337, line: 219, baseType: !1159, size: 64)
!1159 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1160, size: 64)
!1160 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_edge_gc", file: !337, line: 151, baseType: !1161)
!1161 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_edge_gc", file: !337, line: 151, size: 128, elements: !1162)
!1162 = !{!1163}
!1163 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1161, file: !337, line: 151, baseType: !1164, size: 128)
!1164 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_edge_base", file: !337, line: 150, baseType: !1165)
!1165 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_edge_base", file: !337, line: 150, size: 128, elements: !1166)
!1166 = !{!1167, !1168, !1169}
!1167 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1165, file: !337, line: 150, baseType: !7, size: 32)
!1168 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1165, file: !337, line: 150, baseType: !7, size: 32, offset: 32)
!1169 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1165, file: !337, line: 150, baseType: !1170, size: 64, offset: 64)
!1170 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1171, size: 64, elements: !1234)
!1171 = !DIDerivedType(tag: DW_TAG_typedef, name: "edge", file: !1070, line: 108, baseType: !1172)
!1172 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1173, size: 64)
!1173 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "edge_def", file: !337, line: 122, size: 512, elements: !1174)
!1174 = !{!1175, !1176, !1177, !2266, !2267, !2268, !2269, !2270, !2271, !2272}
!1175 = !DIDerivedType(tag: DW_TAG_member, name: "src", scope: !1173, file: !337, line: 124, baseType: !1155, size: 64)
!1176 = !DIDerivedType(tag: DW_TAG_member, name: "dest", scope: !1173, file: !337, line: 125, baseType: !1155, size: 64, offset: 64)
!1177 = !DIDerivedType(tag: DW_TAG_member, name: "insns", scope: !1173, file: !337, line: 131, baseType: !1178, size: 64, offset: 128)
!1178 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "edge_def_insns", file: !337, line: 128, size: 64, elements: !1179)
!1179 = !{!1180, !1196}
!1180 = !DIDerivedType(tag: DW_TAG_member, name: "g", scope: !1178, file: !337, line: 129, baseType: !1181, size: 64)
!1181 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple_seq", file: !1070, line: 66, baseType: !1182)
!1182 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1183, size: 64)
!1183 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_seq_d", file: !757, line: 143, size: 192, elements: !1184)
!1184 = !{!1185, !1194, !1195}
!1185 = !DIDerivedType(tag: DW_TAG_member, name: "first", scope: !1183, file: !757, line: 145, baseType: !1186, size: 64)
!1186 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple_seq_node", file: !1070, line: 69, baseType: !1187)
!1187 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1188, size: 64)
!1188 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_seq_node_d", file: !757, line: 136, size: 192, elements: !1189)
!1189 = !{!1190, !1192, !1193}
!1190 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !1188, file: !757, line: 137, baseType: !1191, size: 64)
!1191 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple", file: !1070, line: 58, baseType: !1132)
!1192 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1188, file: !757, line: 138, baseType: !1187, size: 64, offset: 64)
!1193 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1188, file: !757, line: 139, baseType: !1187, size: 64, offset: 128)
!1194 = !DIDerivedType(tag: DW_TAG_member, name: "last", scope: !1183, file: !757, line: 146, baseType: !1186, size: 64, offset: 64)
!1195 = !DIDerivedType(tag: DW_TAG_member, name: "next_free", scope: !1183, file: !757, line: 152, baseType: !1181, size: 64, offset: 128)
!1196 = !DIDerivedType(tag: DW_TAG_member, name: "r", scope: !1178, file: !337, line: 130, baseType: !1197, size: 64)
!1197 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtx", file: !1070, line: 50, baseType: !1198)
!1198 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1199, size: 64)
!1199 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtx_def", file: !1200, line: 240, size: 384, elements: !1201)
!1200 = !DIFile(filename: "./rtl.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1201 = !{!1202, !1203, !1204, !1205, !1206, !1207, !1208, !1209, !1210, !1211, !1212}
!1202 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !1199, file: !1200, line: 242, baseType: !7, size: 16, flags: DIFlagBitField, extraData: i64 0)
!1203 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !1199, file: !1200, line: 245, baseType: !7, size: 8, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1204 = !DIDerivedType(tag: DW_TAG_member, name: "jump", scope: !1199, file: !1200, line: 252, baseType: !7, size: 1, offset: 24, flags: DIFlagBitField, extraData: i64 0)
!1205 = !DIDerivedType(tag: DW_TAG_member, name: "call", scope: !1199, file: !1200, line: 257, baseType: !7, size: 1, offset: 25, flags: DIFlagBitField, extraData: i64 0)
!1206 = !DIDerivedType(tag: DW_TAG_member, name: "unchanging", scope: !1199, file: !1200, line: 265, baseType: !7, size: 1, offset: 26, flags: DIFlagBitField, extraData: i64 0)
!1207 = !DIDerivedType(tag: DW_TAG_member, name: "volatil", scope: !1199, file: !1200, line: 277, baseType: !7, size: 1, offset: 27, flags: DIFlagBitField, extraData: i64 0)
!1208 = !DIDerivedType(tag: DW_TAG_member, name: "in_struct", scope: !1199, file: !1200, line: 291, baseType: !7, size: 1, offset: 28, flags: DIFlagBitField, extraData: i64 0)
!1209 = !DIDerivedType(tag: DW_TAG_member, name: "used", scope: !1199, file: !1200, line: 298, baseType: !7, size: 1, offset: 29, flags: DIFlagBitField, extraData: i64 0)
!1210 = !DIDerivedType(tag: DW_TAG_member, name: "frame_related", scope: !1199, file: !1200, line: 305, baseType: !7, size: 1, offset: 30, flags: DIFlagBitField, extraData: i64 0)
!1211 = !DIDerivedType(tag: DW_TAG_member, name: "return_val", scope: !1199, file: !1200, line: 310, baseType: !7, size: 1, offset: 31, flags: DIFlagBitField, extraData: i64 0)
!1212 = !DIDerivedType(tag: DW_TAG_member, name: "u", scope: !1199, file: !1200, line: 321, baseType: !1213, size: 320, offset: 64)
!1213 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "u", file: !1200, line: 315, size: 320, elements: !1214)
!1214 = !{!1215, !2233, !2235, !2264, !2265}
!1215 = !DIDerivedType(tag: DW_TAG_member, name: "fld", scope: !1213, file: !1200, line: 316, baseType: !1216, size: 64)
!1216 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1217, size: 64, elements: !1234)
!1217 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtunion", file: !1200, line: 183, baseType: !1218)
!1218 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "rtunion_def", file: !1200, line: 166, size: 64, elements: !1219)
!1219 = !{!1220, !1221, !1222, !1225, !1226, !1236, !1237, !1249, !1252, !1253, !2211, !2212, !2223, !2230}
!1220 = !DIDerivedType(tag: DW_TAG_member, name: "rt_int", scope: !1218, file: !1200, line: 168, baseType: !1064, size: 32)
!1221 = !DIDerivedType(tag: DW_TAG_member, name: "rt_uint", scope: !1218, file: !1200, line: 169, baseType: !7, size: 32)
!1222 = !DIDerivedType(tag: DW_TAG_member, name: "rt_str", scope: !1218, file: !1200, line: 170, baseType: !1223, size: 64)
!1223 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1224, size: 64)
!1224 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1109)
!1225 = !DIDerivedType(tag: DW_TAG_member, name: "rt_rtx", scope: !1218, file: !1200, line: 171, baseType: !1197, size: 64)
!1226 = !DIDerivedType(tag: DW_TAG_member, name: "rt_rtvec", scope: !1218, file: !1200, line: 172, baseType: !1227, size: 64)
!1227 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtvec", file: !1070, line: 53, baseType: !1228)
!1228 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1229, size: 64)
!1229 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtvec_def", file: !1200, line: 359, size: 128, elements: !1230)
!1230 = !{!1231, !1232}
!1231 = !DIDerivedType(tag: DW_TAG_member, name: "num_elem", scope: !1229, file: !1200, line: 360, baseType: !1064, size: 32)
!1232 = !DIDerivedType(tag: DW_TAG_member, name: "elem", scope: !1229, file: !1200, line: 361, baseType: !1233, size: 64, offset: 64)
!1233 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1197, size: 64, elements: !1234)
!1234 = !{!1235}
!1235 = !DISubrange(count: 1)
!1236 = !DIDerivedType(tag: DW_TAG_member, name: "rt_type", scope: !1218, file: !1200, line: 173, baseType: !5, size: 32)
!1237 = !DIDerivedType(tag: DW_TAG_member, name: "rt_addr_diff_vec_flags", scope: !1218, file: !1200, line: 174, baseType: !1238, size: 32)
!1238 = !DIDerivedType(tag: DW_TAG_typedef, name: "addr_diff_vec_flags", file: !1200, line: 133, baseType: !1239)
!1239 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !1200, line: 115, size: 32, elements: !1240)
!1240 = !{!1241, !1242, !1243, !1244, !1245, !1246, !1247, !1248}
!1241 = !DIDerivedType(tag: DW_TAG_member, name: "min_align", scope: !1239, file: !1200, line: 118, baseType: !7, size: 8, flags: DIFlagBitField, extraData: i64 0)
!1242 = !DIDerivedType(tag: DW_TAG_member, name: "base_after_vec", scope: !1239, file: !1200, line: 120, baseType: !7, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1243 = !DIDerivedType(tag: DW_TAG_member, name: "min_after_vec", scope: !1239, file: !1200, line: 121, baseType: !7, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1244 = !DIDerivedType(tag: DW_TAG_member, name: "max_after_vec", scope: !1239, file: !1200, line: 123, baseType: !7, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1245 = !DIDerivedType(tag: DW_TAG_member, name: "min_after_base", scope: !1239, file: !1200, line: 125, baseType: !7, size: 1, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!1246 = !DIDerivedType(tag: DW_TAG_member, name: "max_after_base", scope: !1239, file: !1200, line: 127, baseType: !7, size: 1, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1247 = !DIDerivedType(tag: DW_TAG_member, name: "offset_unsigned", scope: !1239, file: !1200, line: 130, baseType: !7, size: 1, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!1248 = !DIDerivedType(tag: DW_TAG_member, name: "scale", scope: !1239, file: !1200, line: 132, baseType: !7, size: 8, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1249 = !DIDerivedType(tag: DW_TAG_member, name: "rt_cselib", scope: !1218, file: !1200, line: 175, baseType: !1250, size: 64)
!1250 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1251, size: 64)
!1251 = !DICompositeType(tag: DW_TAG_structure_type, name: "cselib_val_struct", file: !1200, line: 175, flags: DIFlagFwdDecl)
!1252 = !DIDerivedType(tag: DW_TAG_member, name: "rt_bit", scope: !1218, file: !1200, line: 176, baseType: !1071, size: 64)
!1253 = !DIDerivedType(tag: DW_TAG_member, name: "rt_tree", scope: !1218, file: !1200, line: 177, baseType: !1254, size: 64)
!1254 = !DIDerivedType(tag: DW_TAG_typedef, name: "tree", file: !1070, line: 56, baseType: !1255)
!1255 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1256, size: 64)
!1256 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "tree_node", file: !135, line: 3371, size: 1792, elements: !1257)
!1257 = !{!1258, !1291, !1297, !1308, !1327, !1338, !1343, !1350, !1356, !1370, !1378, !1416, !1421, !1449, !1466, !1467, !1472, !1481, !1487, !1492, !1496, !1500, !1860, !1909, !1915, !1921, !1928, !1941, !1955, !1972, !1984, !2006, !2021, !2193}
!1258 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1256, file: !135, line: 3372, baseType: !1259, size: 64)
!1259 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_base", file: !135, line: 360, size: 64, elements: !1260)
!1260 = !{!1261, !1262, !1263, !1264, !1265, !1266, !1267, !1268, !1269, !1270, !1271, !1272, !1273, !1274, !1275, !1276, !1277, !1278, !1279, !1280, !1281, !1282, !1283, !1284, !1285, !1286, !1287, !1288, !1289, !1290}
!1261 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !1259, file: !135, line: 361, baseType: !7, size: 16, flags: DIFlagBitField, extraData: i64 0)
!1262 = !DIDerivedType(tag: DW_TAG_member, name: "side_effects_flag", scope: !1259, file: !135, line: 363, baseType: !7, size: 1, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1263 = !DIDerivedType(tag: DW_TAG_member, name: "constant_flag", scope: !1259, file: !135, line: 364, baseType: !7, size: 1, offset: 17, flags: DIFlagBitField, extraData: i64 0)
!1264 = !DIDerivedType(tag: DW_TAG_member, name: "addressable_flag", scope: !1259, file: !135, line: 365, baseType: !7, size: 1, offset: 18, flags: DIFlagBitField, extraData: i64 0)
!1265 = !DIDerivedType(tag: DW_TAG_member, name: "volatile_flag", scope: !1259, file: !135, line: 366, baseType: !7, size: 1, offset: 19, flags: DIFlagBitField, extraData: i64 0)
!1266 = !DIDerivedType(tag: DW_TAG_member, name: "readonly_flag", scope: !1259, file: !135, line: 367, baseType: !7, size: 1, offset: 20, flags: DIFlagBitField, extraData: i64 0)
!1267 = !DIDerivedType(tag: DW_TAG_member, name: "unsigned_flag", scope: !1259, file: !135, line: 368, baseType: !7, size: 1, offset: 21, flags: DIFlagBitField, extraData: i64 0)
!1268 = !DIDerivedType(tag: DW_TAG_member, name: "asm_written_flag", scope: !1259, file: !135, line: 369, baseType: !7, size: 1, offset: 22, flags: DIFlagBitField, extraData: i64 0)
!1269 = !DIDerivedType(tag: DW_TAG_member, name: "nowarning_flag", scope: !1259, file: !135, line: 370, baseType: !7, size: 1, offset: 23, flags: DIFlagBitField, extraData: i64 0)
!1270 = !DIDerivedType(tag: DW_TAG_member, name: "used_flag", scope: !1259, file: !135, line: 372, baseType: !7, size: 1, offset: 24, flags: DIFlagBitField, extraData: i64 0)
!1271 = !DIDerivedType(tag: DW_TAG_member, name: "nothrow_flag", scope: !1259, file: !135, line: 373, baseType: !7, size: 1, offset: 25, flags: DIFlagBitField, extraData: i64 0)
!1272 = !DIDerivedType(tag: DW_TAG_member, name: "static_flag", scope: !1259, file: !135, line: 374, baseType: !7, size: 1, offset: 26, flags: DIFlagBitField, extraData: i64 0)
!1273 = !DIDerivedType(tag: DW_TAG_member, name: "public_flag", scope: !1259, file: !135, line: 375, baseType: !7, size: 1, offset: 27, flags: DIFlagBitField, extraData: i64 0)
!1274 = !DIDerivedType(tag: DW_TAG_member, name: "private_flag", scope: !1259, file: !135, line: 376, baseType: !7, size: 1, offset: 28, flags: DIFlagBitField, extraData: i64 0)
!1275 = !DIDerivedType(tag: DW_TAG_member, name: "protected_flag", scope: !1259, file: !135, line: 377, baseType: !7, size: 1, offset: 29, flags: DIFlagBitField, extraData: i64 0)
!1276 = !DIDerivedType(tag: DW_TAG_member, name: "deprecated_flag", scope: !1259, file: !135, line: 378, baseType: !7, size: 1, offset: 30, flags: DIFlagBitField, extraData: i64 0)
!1277 = !DIDerivedType(tag: DW_TAG_member, name: "saturating_flag", scope: !1259, file: !135, line: 379, baseType: !7, size: 1, offset: 31, flags: DIFlagBitField, extraData: i64 0)
!1278 = !DIDerivedType(tag: DW_TAG_member, name: "default_def_flag", scope: !1259, file: !135, line: 381, baseType: !7, size: 1, offset: 32, flags: DIFlagBitField, extraData: i64 0)
!1279 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !1259, file: !135, line: 382, baseType: !7, size: 1, offset: 33, flags: DIFlagBitField, extraData: i64 0)
!1280 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !1259, file: !135, line: 383, baseType: !7, size: 1, offset: 34, flags: DIFlagBitField, extraData: i64 0)
!1281 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !1259, file: !135, line: 384, baseType: !7, size: 1, offset: 35, flags: DIFlagBitField, extraData: i64 0)
!1282 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !1259, file: !135, line: 385, baseType: !7, size: 1, offset: 36, flags: DIFlagBitField, extraData: i64 0)
!1283 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !1259, file: !135, line: 386, baseType: !7, size: 1, offset: 37, flags: DIFlagBitField, extraData: i64 0)
!1284 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !1259, file: !135, line: 387, baseType: !7, size: 1, offset: 38, flags: DIFlagBitField, extraData: i64 0)
!1285 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !1259, file: !135, line: 388, baseType: !7, size: 1, offset: 39, flags: DIFlagBitField, extraData: i64 0)
!1286 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !1259, file: !135, line: 390, baseType: !7, size: 1, offset: 40, flags: DIFlagBitField, extraData: i64 0)
!1287 = !DIDerivedType(tag: DW_TAG_member, name: "packed_flag", scope: !1259, file: !135, line: 391, baseType: !7, size: 1, offset: 41, flags: DIFlagBitField, extraData: i64 0)
!1288 = !DIDerivedType(tag: DW_TAG_member, name: "user_align", scope: !1259, file: !135, line: 392, baseType: !7, size: 1, offset: 42, flags: DIFlagBitField, extraData: i64 0)
!1289 = !DIDerivedType(tag: DW_TAG_member, name: "spare", scope: !1259, file: !135, line: 394, baseType: !7, size: 13, offset: 43, flags: DIFlagBitField, extraData: i64 0)
!1290 = !DIDerivedType(tag: DW_TAG_member, name: "address_space", scope: !1259, file: !135, line: 399, baseType: !7, size: 8, offset: 56, flags: DIFlagBitField, extraData: i64 0)
!1291 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1256, file: !135, line: 3373, baseType: !1292, size: 192)
!1292 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_common", file: !135, line: 402, size: 192, elements: !1293)
!1293 = !{!1294, !1295, !1296}
!1294 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1292, file: !135, line: 403, baseType: !1259, size: 64)
!1295 = !DIDerivedType(tag: DW_TAG_member, name: "chain", scope: !1292, file: !135, line: 404, baseType: !1254, size: 64, offset: 64)
!1296 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !1292, file: !135, line: 405, baseType: !1254, size: 64, offset: 128)
!1297 = !DIDerivedType(tag: DW_TAG_member, name: "int_cst", scope: !1256, file: !135, line: 3374, baseType: !1298, size: 320)
!1298 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_int_cst", file: !135, line: 1384, size: 320, elements: !1299)
!1299 = !{!1300, !1301}
!1300 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1298, file: !135, line: 1385, baseType: !1292, size: 192)
!1301 = !DIDerivedType(tag: DW_TAG_member, name: "int_cst", scope: !1298, file: !135, line: 1386, baseType: !1302, size: 128, offset: 192)
!1302 = !DIDerivedType(tag: DW_TAG_typedef, name: "double_int", file: !1303, line: 58, baseType: !1304)
!1303 = !DIFile(filename: "./double-int.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1304 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !1303, line: 54, size: 128, elements: !1305)
!1305 = !{!1306, !1307}
!1306 = !DIDerivedType(tag: DW_TAG_member, name: "low", scope: !1304, file: !1303, line: 56, baseType: !1067, size: 64)
!1307 = !DIDerivedType(tag: DW_TAG_member, name: "high", scope: !1304, file: !1303, line: 57, baseType: !1063, size: 64, offset: 64)
!1308 = !DIDerivedType(tag: DW_TAG_member, name: "real_cst", scope: !1256, file: !135, line: 3375, baseType: !1309, size: 256)
!1309 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_real_cst", file: !135, line: 1397, size: 256, elements: !1310)
!1310 = !{!1311, !1312}
!1311 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1309, file: !135, line: 1398, baseType: !1292, size: 192)
!1312 = !DIDerivedType(tag: DW_TAG_member, name: "real_cst_ptr", scope: !1309, file: !135, line: 1399, baseType: !1313, size: 64, offset: 192)
!1313 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1314, size: 64)
!1314 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "real_value", file: !1315, line: 52, size: 256, elements: !1316)
!1315 = !DIFile(filename: "./real.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1316 = !{!1317, !1318, !1319, !1320, !1321, !1322, !1323}
!1317 = !DIDerivedType(tag: DW_TAG_member, name: "cl", scope: !1314, file: !1315, line: 56, baseType: !7, size: 2, flags: DIFlagBitField, extraData: i64 0)
!1318 = !DIDerivedType(tag: DW_TAG_member, name: "decimal", scope: !1314, file: !1315, line: 57, baseType: !7, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1319 = !DIDerivedType(tag: DW_TAG_member, name: "sign", scope: !1314, file: !1315, line: 58, baseType: !7, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1320 = !DIDerivedType(tag: DW_TAG_member, name: "signalling", scope: !1314, file: !1315, line: 59, baseType: !7, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1321 = !DIDerivedType(tag: DW_TAG_member, name: "canonical", scope: !1314, file: !1315, line: 60, baseType: !7, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1322 = !DIDerivedType(tag: DW_TAG_member, name: "uexp", scope: !1314, file: !1315, line: 61, baseType: !7, size: 26, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1323 = !DIDerivedType(tag: DW_TAG_member, name: "sig", scope: !1314, file: !1315, line: 62, baseType: !1324, size: 192, offset: 64)
!1324 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1067, size: 192, elements: !1325)
!1325 = !{!1326}
!1326 = !DISubrange(count: 3)
!1327 = !DIDerivedType(tag: DW_TAG_member, name: "fixed_cst", scope: !1256, file: !135, line: 3376, baseType: !1328, size: 256)
!1328 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_fixed_cst", file: !135, line: 1408, size: 256, elements: !1329)
!1329 = !{!1330, !1331}
!1330 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1328, file: !135, line: 1409, baseType: !1292, size: 192)
!1331 = !DIDerivedType(tag: DW_TAG_member, name: "fixed_cst_ptr", scope: !1328, file: !135, line: 1410, baseType: !1332, size: 64, offset: 192)
!1332 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1333, size: 64)
!1333 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "fixed_value", file: !1334, line: 27, size: 192, elements: !1335)
!1334 = !DIFile(filename: "./fixed-value.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1335 = !{!1336, !1337}
!1336 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !1333, file: !1334, line: 29, baseType: !1302, size: 128)
!1337 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !1333, file: !1334, line: 30, baseType: !5, size: 32, offset: 128)
!1338 = !DIDerivedType(tag: DW_TAG_member, name: "vector", scope: !1256, file: !135, line: 3377, baseType: !1339, size: 256)
!1339 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_vector", file: !135, line: 1437, size: 256, elements: !1340)
!1340 = !{!1341, !1342}
!1341 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1339, file: !135, line: 1438, baseType: !1292, size: 192)
!1342 = !DIDerivedType(tag: DW_TAG_member, name: "elements", scope: !1339, file: !135, line: 1439, baseType: !1254, size: 64, offset: 192)
!1343 = !DIDerivedType(tag: DW_TAG_member, name: "string", scope: !1256, file: !135, line: 3378, baseType: !1344, size: 256)
!1344 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_string", file: !135, line: 1418, size: 256, elements: !1345)
!1345 = !{!1346, !1347, !1348}
!1346 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1344, file: !135, line: 1419, baseType: !1292, size: 192)
!1347 = !DIDerivedType(tag: DW_TAG_member, name: "length", scope: !1344, file: !135, line: 1420, baseType: !1064, size: 32, offset: 192)
!1348 = !DIDerivedType(tag: DW_TAG_member, name: "str", scope: !1344, file: !135, line: 1421, baseType: !1349, size: 8, offset: 224)
!1349 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1109, size: 8, elements: !1234)
!1350 = !DIDerivedType(tag: DW_TAG_member, name: "complex", scope: !1256, file: !135, line: 3379, baseType: !1351, size: 320)
!1351 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_complex", file: !135, line: 1428, size: 320, elements: !1352)
!1352 = !{!1353, !1354, !1355}
!1353 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1351, file: !135, line: 1429, baseType: !1292, size: 192)
!1354 = !DIDerivedType(tag: DW_TAG_member, name: "real", scope: !1351, file: !135, line: 1430, baseType: !1254, size: 64, offset: 192)
!1355 = !DIDerivedType(tag: DW_TAG_member, name: "imag", scope: !1351, file: !135, line: 1431, baseType: !1254, size: 64, offset: 256)
!1356 = !DIDerivedType(tag: DW_TAG_member, name: "identifier", scope: !1256, file: !135, line: 3380, baseType: !1357, size: 320)
!1357 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_identifier", file: !135, line: 1460, size: 320, elements: !1358)
!1358 = !{!1359, !1360}
!1359 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1357, file: !135, line: 1461, baseType: !1292, size: 192)
!1360 = !DIDerivedType(tag: DW_TAG_member, name: "id", scope: !1357, file: !135, line: 1462, baseType: !1361, size: 128, offset: 192)
!1361 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ht_identifier", file: !1362, line: 31, size: 128, elements: !1363)
!1362 = !DIFile(filename: "./symtab.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1363 = !{!1364, !1368, !1369}
!1364 = !DIDerivedType(tag: DW_TAG_member, name: "str", scope: !1361, file: !1362, line: 32, baseType: !1365, size: 64)
!1365 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1366, size: 64)
!1366 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1367)
!1367 = !DIBasicType(name: "unsigned char", size: 8, encoding: DW_ATE_unsigned_char)
!1368 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !1361, file: !1362, line: 33, baseType: !7, size: 32, offset: 64)
!1369 = !DIDerivedType(tag: DW_TAG_member, name: "hash_value", scope: !1361, file: !1362, line: 34, baseType: !7, size: 32, offset: 96)
!1370 = !DIDerivedType(tag: DW_TAG_member, name: "decl_minimal", scope: !1256, file: !135, line: 3381, baseType: !1371, size: 384)
!1371 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_minimal", file: !135, line: 2507, size: 384, elements: !1372)
!1372 = !{!1373, !1374, !1375, !1376, !1377}
!1373 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1371, file: !135, line: 2508, baseType: !1292, size: 192)
!1374 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !1371, file: !135, line: 2509, baseType: !1149, size: 32, offset: 192)
!1375 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !1371, file: !135, line: 2510, baseType: !7, size: 32, offset: 224)
!1376 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1371, file: !135, line: 2511, baseType: !1254, size: 64, offset: 256)
!1377 = !DIDerivedType(tag: DW_TAG_member, name: "context", scope: !1371, file: !135, line: 2512, baseType: !1254, size: 64, offset: 320)
!1378 = !DIDerivedType(tag: DW_TAG_member, name: "decl_common", scope: !1256, file: !135, line: 3382, baseType: !1379, size: 896)
!1379 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_common", file: !135, line: 2652, size: 896, elements: !1380)
!1380 = !{!1381, !1382, !1383, !1384, !1385, !1386, !1387, !1388, !1389, !1390, !1391, !1392, !1393, !1394, !1395, !1396, !1397, !1398, !1399, !1400, !1401, !1402, !1403, !1404, !1405, !1406, !1407, !1408, !1409, !1410, !1411, !1412, !1413}
!1381 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1379, file: !135, line: 2653, baseType: !1371, size: 384)
!1382 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1379, file: !135, line: 2654, baseType: !1254, size: 64, offset: 384)
!1383 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !1379, file: !135, line: 2656, baseType: !7, size: 8, offset: 448, flags: DIFlagBitField, extraData: i64 448)
!1384 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal_flag", scope: !1379, file: !135, line: 2658, baseType: !7, size: 1, offset: 456, flags: DIFlagBitField, extraData: i64 448)
!1385 = !DIDerivedType(tag: DW_TAG_member, name: "virtual_flag", scope: !1379, file: !135, line: 2659, baseType: !7, size: 1, offset: 457, flags: DIFlagBitField, extraData: i64 448)
!1386 = !DIDerivedType(tag: DW_TAG_member, name: "ignored_flag", scope: !1379, file: !135, line: 2660, baseType: !7, size: 1, offset: 458, flags: DIFlagBitField, extraData: i64 448)
!1387 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_flag", scope: !1379, file: !135, line: 2661, baseType: !7, size: 1, offset: 459, flags: DIFlagBitField, extraData: i64 448)
!1388 = !DIDerivedType(tag: DW_TAG_member, name: "artificial_flag", scope: !1379, file: !135, line: 2662, baseType: !7, size: 1, offset: 460, flags: DIFlagBitField, extraData: i64 448)
!1389 = !DIDerivedType(tag: DW_TAG_member, name: "preserve_flag", scope: !1379, file: !135, line: 2663, baseType: !7, size: 1, offset: 461, flags: DIFlagBitField, extraData: i64 448)
!1390 = !DIDerivedType(tag: DW_TAG_member, name: "debug_expr_is_from", scope: !1379, file: !135, line: 2664, baseType: !7, size: 1, offset: 462, flags: DIFlagBitField, extraData: i64 448)
!1391 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !1379, file: !135, line: 2666, baseType: !7, size: 1, offset: 463, flags: DIFlagBitField, extraData: i64 448)
!1392 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !1379, file: !135, line: 2667, baseType: !7, size: 1, offset: 464, flags: DIFlagBitField, extraData: i64 448)
!1393 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !1379, file: !135, line: 2668, baseType: !7, size: 1, offset: 465, flags: DIFlagBitField, extraData: i64 448)
!1394 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !1379, file: !135, line: 2669, baseType: !7, size: 1, offset: 466, flags: DIFlagBitField, extraData: i64 448)
!1395 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !1379, file: !135, line: 2670, baseType: !7, size: 1, offset: 467, flags: DIFlagBitField, extraData: i64 448)
!1396 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !1379, file: !135, line: 2671, baseType: !7, size: 1, offset: 468, flags: DIFlagBitField, extraData: i64 448)
!1397 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !1379, file: !135, line: 2672, baseType: !7, size: 1, offset: 469, flags: DIFlagBitField, extraData: i64 448)
!1398 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_7", scope: !1379, file: !135, line: 2673, baseType: !7, size: 1, offset: 470, flags: DIFlagBitField, extraData: i64 448)
!1399 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_8", scope: !1379, file: !135, line: 2674, baseType: !7, size: 1, offset: 471, flags: DIFlagBitField, extraData: i64 448)
!1400 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_0", scope: !1379, file: !135, line: 2678, baseType: !7, size: 1, offset: 472, flags: DIFlagBitField, extraData: i64 448)
!1401 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_1", scope: !1379, file: !135, line: 2682, baseType: !7, size: 1, offset: 473, flags: DIFlagBitField, extraData: i64 448)
!1402 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_2", scope: !1379, file: !135, line: 2685, baseType: !7, size: 1, offset: 474, flags: DIFlagBitField, extraData: i64 448)
!1403 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reg_flag", scope: !1379, file: !135, line: 2688, baseType: !7, size: 1, offset: 475, flags: DIFlagBitField, extraData: i64 448)
!1404 = !DIDerivedType(tag: DW_TAG_member, name: "decl_by_reference_flag", scope: !1379, file: !135, line: 2690, baseType: !7, size: 1, offset: 476, flags: DIFlagBitField, extraData: i64 448)
!1405 = !DIDerivedType(tag: DW_TAG_member, name: "decl_restricted_flag", scope: !1379, file: !135, line: 2692, baseType: !7, size: 1, offset: 477, flags: DIFlagBitField, extraData: i64 448)
!1406 = !DIDerivedType(tag: DW_TAG_member, name: "decl_common_unused", scope: !1379, file: !135, line: 2695, baseType: !7, size: 2, offset: 478, flags: DIFlagBitField, extraData: i64 448)
!1407 = !DIDerivedType(tag: DW_TAG_member, name: "off_align", scope: !1379, file: !135, line: 2698, baseType: !7, size: 8, offset: 480, flags: DIFlagBitField, extraData: i64 448)
!1408 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !1379, file: !135, line: 2703, baseType: !7, size: 32, offset: 512)
!1409 = !DIDerivedType(tag: DW_TAG_member, name: "size_unit", scope: !1379, file: !135, line: 2705, baseType: !1254, size: 64, offset: 576)
!1410 = !DIDerivedType(tag: DW_TAG_member, name: "initial", scope: !1379, file: !135, line: 2706, baseType: !1254, size: 64, offset: 640)
!1411 = !DIDerivedType(tag: DW_TAG_member, name: "attributes", scope: !1379, file: !135, line: 2707, baseType: !1254, size: 64, offset: 704)
!1412 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_origin", scope: !1379, file: !135, line: 2708, baseType: !1254, size: 64, offset: 768)
!1413 = !DIDerivedType(tag: DW_TAG_member, name: "lang_specific", scope: !1379, file: !135, line: 2711, baseType: !1414, size: 64, offset: 832)
!1414 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1415, size: 64)
!1415 = !DICompositeType(tag: DW_TAG_structure_type, name: "lang_decl", file: !135, line: 2711, flags: DIFlagFwdDecl)
!1416 = !DIDerivedType(tag: DW_TAG_member, name: "decl_with_rtl", scope: !1256, file: !135, line: 3383, baseType: !1417, size: 960)
!1417 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_with_rtl", file: !135, line: 2756, size: 960, elements: !1418)
!1418 = !{!1419, !1420}
!1419 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1417, file: !135, line: 2757, baseType: !1379, size: 896)
!1420 = !DIDerivedType(tag: DW_TAG_member, name: "rtl", scope: !1417, file: !135, line: 2758, baseType: !1197, size: 64, offset: 896)
!1421 = !DIDerivedType(tag: DW_TAG_member, name: "decl_non_common", scope: !1256, file: !135, line: 3384, baseType: !1422, size: 1472)
!1422 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_non_common", file: !135, line: 3114, size: 1472, elements: !1423)
!1423 = !{!1424, !1445, !1446, !1447, !1448}
!1424 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1422, file: !135, line: 3115, baseType: !1425, size: 1216)
!1425 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_with_vis", file: !135, line: 2984, size: 1216, elements: !1426)
!1426 = !{!1427, !1428, !1429, !1430, !1431, !1432, !1433, !1434, !1435, !1436, !1437, !1438, !1439, !1440, !1441, !1442, !1443, !1444}
!1427 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1425, file: !135, line: 2985, baseType: !1417, size: 960)
!1428 = !DIDerivedType(tag: DW_TAG_member, name: "assembler_name", scope: !1425, file: !135, line: 2986, baseType: !1254, size: 64, offset: 960)
!1429 = !DIDerivedType(tag: DW_TAG_member, name: "section_name", scope: !1425, file: !135, line: 2987, baseType: !1254, size: 64, offset: 1024)
!1430 = !DIDerivedType(tag: DW_TAG_member, name: "comdat_group", scope: !1425, file: !135, line: 2988, baseType: !1254, size: 64, offset: 1088)
!1431 = !DIDerivedType(tag: DW_TAG_member, name: "defer_output", scope: !1425, file: !135, line: 2991, baseType: !7, size: 1, offset: 1152, flags: DIFlagBitField, extraData: i64 1152)
!1432 = !DIDerivedType(tag: DW_TAG_member, name: "hard_register", scope: !1425, file: !135, line: 2992, baseType: !7, size: 1, offset: 1153, flags: DIFlagBitField, extraData: i64 1152)
!1433 = !DIDerivedType(tag: DW_TAG_member, name: "thread_local", scope: !1425, file: !135, line: 2993, baseType: !7, size: 1, offset: 1154, flags: DIFlagBitField, extraData: i64 1152)
!1434 = !DIDerivedType(tag: DW_TAG_member, name: "common_flag", scope: !1425, file: !135, line: 2994, baseType: !7, size: 1, offset: 1155, flags: DIFlagBitField, extraData: i64 1152)
!1435 = !DIDerivedType(tag: DW_TAG_member, name: "in_text_section", scope: !1425, file: !135, line: 2995, baseType: !7, size: 1, offset: 1156, flags: DIFlagBitField, extraData: i64 1152)
!1436 = !DIDerivedType(tag: DW_TAG_member, name: "dllimport_flag", scope: !1425, file: !135, line: 2996, baseType: !7, size: 1, offset: 1157, flags: DIFlagBitField, extraData: i64 1152)
!1437 = !DIDerivedType(tag: DW_TAG_member, name: "shadowed_for_var_p", scope: !1425, file: !135, line: 2998, baseType: !7, size: 1, offset: 1158, flags: DIFlagBitField, extraData: i64 1152)
!1438 = !DIDerivedType(tag: DW_TAG_member, name: "weak_flag", scope: !1425, file: !135, line: 3000, baseType: !7, size: 1, offset: 1159, flags: DIFlagBitField, extraData: i64 1152)
!1439 = !DIDerivedType(tag: DW_TAG_member, name: "seen_in_bind_expr", scope: !1425, file: !135, line: 3002, baseType: !7, size: 1, offset: 1160, flags: DIFlagBitField, extraData: i64 1152)
!1440 = !DIDerivedType(tag: DW_TAG_member, name: "comdat_flag", scope: !1425, file: !135, line: 3003, baseType: !7, size: 1, offset: 1161, flags: DIFlagBitField, extraData: i64 1152)
!1441 = !DIDerivedType(tag: DW_TAG_member, name: "visibility", scope: !1425, file: !135, line: 3004, baseType: !7, size: 2, offset: 1162, flags: DIFlagBitField, extraData: i64 1152)
!1442 = !DIDerivedType(tag: DW_TAG_member, name: "visibility_specified", scope: !1425, file: !135, line: 3005, baseType: !7, size: 1, offset: 1164, flags: DIFlagBitField, extraData: i64 1152)
!1443 = !DIDerivedType(tag: DW_TAG_member, name: "tls_model", scope: !1425, file: !135, line: 3007, baseType: !7, size: 3, offset: 1165, flags: DIFlagBitField, extraData: i64 1152)
!1444 = !DIDerivedType(tag: DW_TAG_member, name: "init_priority_p", scope: !1425, file: !135, line: 3010, baseType: !7, size: 1, offset: 1168, flags: DIFlagBitField, extraData: i64 1152)
!1445 = !DIDerivedType(tag: DW_TAG_member, name: "saved_tree", scope: !1422, file: !135, line: 3117, baseType: !1254, size: 64, offset: 1216)
!1446 = !DIDerivedType(tag: DW_TAG_member, name: "arguments", scope: !1422, file: !135, line: 3119, baseType: !1254, size: 64, offset: 1280)
!1447 = !DIDerivedType(tag: DW_TAG_member, name: "result", scope: !1422, file: !135, line: 3121, baseType: !1254, size: 64, offset: 1344)
!1448 = !DIDerivedType(tag: DW_TAG_member, name: "vindex", scope: !1422, file: !135, line: 3123, baseType: !1254, size: 64, offset: 1408)
!1449 = !DIDerivedType(tag: DW_TAG_member, name: "parm_decl", scope: !1256, file: !135, line: 3385, baseType: !1450, size: 1088)
!1450 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_parm_decl", file: !135, line: 2874, size: 1088, elements: !1451)
!1451 = !{!1452, !1453, !1454}
!1452 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1450, file: !135, line: 2875, baseType: !1417, size: 960)
!1453 = !DIDerivedType(tag: DW_TAG_member, name: "incoming_rtl", scope: !1450, file: !135, line: 2876, baseType: !1197, size: 64, offset: 960)
!1454 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !1450, file: !135, line: 2877, baseType: !1455, size: 64, offset: 1024)
!1455 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1456, size: 64)
!1456 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "var_ann_d", file: !1457, line: 172, size: 128, elements: !1458)
!1457 = !DIFile(filename: "./tree-flow.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1458 = !{!1459, !1460, !1461, !1462, !1463, !1464, !1465}
!1459 = !DIDerivedType(tag: DW_TAG_member, name: "base_var_processed", scope: !1456, file: !1457, line: 174, baseType: !7, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1460 = !DIDerivedType(tag: DW_TAG_member, name: "used", scope: !1456, file: !1457, line: 178, baseType: !7, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1461 = !DIDerivedType(tag: DW_TAG_member, name: "need_phi_state", scope: !1456, file: !1457, line: 183, baseType: !7, size: 2, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1462 = !DIDerivedType(tag: DW_TAG_member, name: "is_heapvar", scope: !1456, file: !1457, line: 187, baseType: !7, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1463 = !DIDerivedType(tag: DW_TAG_member, name: "noalias_state", scope: !1456, file: !1457, line: 192, baseType: !7, size: 2, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1464 = !DIDerivedType(tag: DW_TAG_member, name: "base_index", scope: !1456, file: !1457, line: 195, baseType: !7, size: 32, offset: 32)
!1465 = !DIDerivedType(tag: DW_TAG_member, name: "current_def", scope: !1456, file: !1457, line: 199, baseType: !1254, size: 64, offset: 64)
!1466 = !DIDerivedType(tag: DW_TAG_member, name: "decl_with_vis", scope: !1256, file: !135, line: 3386, baseType: !1425, size: 1216)
!1467 = !DIDerivedType(tag: DW_TAG_member, name: "var_decl", scope: !1256, file: !135, line: 3387, baseType: !1468, size: 1280)
!1468 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_var_decl", file: !135, line: 3093, size: 1280, elements: !1469)
!1469 = !{!1470, !1471}
!1470 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1468, file: !135, line: 3094, baseType: !1425, size: 1216)
!1471 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !1468, file: !135, line: 3095, baseType: !1455, size: 64, offset: 1216)
!1472 = !DIDerivedType(tag: DW_TAG_member, name: "field_decl", scope: !1256, file: !135, line: 3388, baseType: !1473, size: 1216)
!1473 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_field_decl", file: !135, line: 2824, size: 1216, elements: !1474)
!1474 = !{!1475, !1476, !1477, !1478, !1479, !1480}
!1475 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1473, file: !135, line: 2825, baseType: !1379, size: 896)
!1476 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1473, file: !135, line: 2827, baseType: !1254, size: 64, offset: 896)
!1477 = !DIDerivedType(tag: DW_TAG_member, name: "bit_field_type", scope: !1473, file: !135, line: 2828, baseType: !1254, size: 64, offset: 960)
!1478 = !DIDerivedType(tag: DW_TAG_member, name: "qualifier", scope: !1473, file: !135, line: 2829, baseType: !1254, size: 64, offset: 1024)
!1479 = !DIDerivedType(tag: DW_TAG_member, name: "bit_offset", scope: !1473, file: !135, line: 2830, baseType: !1254, size: 64, offset: 1088)
!1480 = !DIDerivedType(tag: DW_TAG_member, name: "fcontext", scope: !1473, file: !135, line: 2831, baseType: !1254, size: 64, offset: 1152)
!1481 = !DIDerivedType(tag: DW_TAG_member, name: "label_decl", scope: !1256, file: !135, line: 3389, baseType: !1482, size: 1024)
!1482 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_label_decl", file: !135, line: 2850, size: 1024, elements: !1483)
!1483 = !{!1484, !1485, !1486}
!1484 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1482, file: !135, line: 2851, baseType: !1417, size: 960)
!1485 = !DIDerivedType(tag: DW_TAG_member, name: "label_decl_uid", scope: !1482, file: !135, line: 2852, baseType: !1064, size: 32, offset: 960)
!1486 = !DIDerivedType(tag: DW_TAG_member, name: "eh_landing_pad_nr", scope: !1482, file: !135, line: 2853, baseType: !1064, size: 32, offset: 992)
!1487 = !DIDerivedType(tag: DW_TAG_member, name: "result_decl", scope: !1256, file: !135, line: 3390, baseType: !1488, size: 1024)
!1488 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_result_decl", file: !135, line: 2857, size: 1024, elements: !1489)
!1489 = !{!1490, !1491}
!1490 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1488, file: !135, line: 2858, baseType: !1417, size: 960)
!1491 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !1488, file: !135, line: 2859, baseType: !1455, size: 64, offset: 960)
!1492 = !DIDerivedType(tag: DW_TAG_member, name: "const_decl", scope: !1256, file: !135, line: 3391, baseType: !1493, size: 960)
!1493 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_const_decl", file: !135, line: 2862, size: 960, elements: !1494)
!1494 = !{!1495}
!1495 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1493, file: !135, line: 2863, baseType: !1417, size: 960)
!1496 = !DIDerivedType(tag: DW_TAG_member, name: "type_decl", scope: !1256, file: !135, line: 3392, baseType: !1497, size: 1472)
!1497 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_type_decl", file: !135, line: 3304, size: 1472, elements: !1498)
!1498 = !{!1499}
!1499 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1497, file: !135, line: 3305, baseType: !1422, size: 1472)
!1500 = !DIDerivedType(tag: DW_TAG_member, name: "function_decl", scope: !1256, file: !135, line: 3393, baseType: !1501, size: 1792)
!1501 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_function_decl", file: !135, line: 3248, size: 1792, elements: !1502)
!1502 = !{!1503, !1504, !1839, !1840, !1841, !1842, !1843, !1844, !1845, !1846, !1847, !1848, !1849, !1850, !1851, !1852, !1853, !1854, !1855, !1856, !1857, !1858, !1859}
!1503 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1501, file: !135, line: 3249, baseType: !1422, size: 1472)
!1504 = !DIDerivedType(tag: DW_TAG_member, name: "f", scope: !1501, file: !135, line: 3251, baseType: !1505, size: 64, offset: 1472)
!1505 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1506, size: 64)
!1506 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "function", file: !1507, line: 463, size: 1152, elements: !1508)
!1507 = !DIFile(filename: "./function.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1508 = !{!1509, !1671, !1702, !1703, !1780, !1783, !1784, !1785, !1786, !1787, !1788, !1812, !1815, !1816, !1817, !1818, !1819, !1820, !1821, !1822, !1823, !1824, !1825, !1826, !1827, !1828, !1829, !1830, !1831, !1832, !1833, !1834, !1835, !1836, !1837, !1838}
!1509 = !DIDerivedType(tag: DW_TAG_member, name: "eh", scope: !1506, file: !1507, line: 464, baseType: !1510, size: 64)
!1510 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1511, size: 64)
!1511 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "eh_status", file: !330, line: 194, size: 384, elements: !1512)
!1512 = !{!1513, !1562, !1575, !1589, !1639, !1652}
!1513 = !DIDerivedType(tag: DW_TAG_member, name: "region_tree", scope: !1511, file: !330, line: 197, baseType: !1514, size: 64)
!1514 = !DIDerivedType(tag: DW_TAG_typedef, name: "eh_region", file: !330, line: 182, baseType: !1515)
!1515 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1516, size: 64)
!1516 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "eh_region_d", file: !330, line: 116, size: 704, elements: !1517)
!1517 = !{!1518, !1519, !1520, !1521, !1522, !1523, !1550, !1559, !1560, !1561}
!1518 = !DIDerivedType(tag: DW_TAG_member, name: "outer", scope: !1516, file: !330, line: 119, baseType: !1515, size: 64)
!1519 = !DIDerivedType(tag: DW_TAG_member, name: "inner", scope: !1516, file: !330, line: 122, baseType: !1515, size: 64, offset: 64)
!1520 = !DIDerivedType(tag: DW_TAG_member, name: "next_peer", scope: !1516, file: !330, line: 123, baseType: !1515, size: 64, offset: 128)
!1521 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !1516, file: !330, line: 126, baseType: !1064, size: 32, offset: 192)
!1522 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !1516, file: !330, line: 129, baseType: !329, size: 32, offset: 224)
!1523 = !DIDerivedType(tag: DW_TAG_member, name: "u", scope: !1516, file: !330, line: 165, baseType: !1524, size: 192, offset: 256)
!1524 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "eh_region_u", file: !330, line: 132, size: 192, elements: !1525)
!1525 = !{!1526, !1539, !1545}
!1526 = !DIDerivedType(tag: DW_TAG_member, name: "eh_try", scope: !1524, file: !330, line: 137, baseType: !1527, size: 128)
!1527 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "eh_region_u_try", file: !330, line: 133, size: 128, elements: !1528)
!1528 = !{!1529, !1538}
!1529 = !DIDerivedType(tag: DW_TAG_member, name: "first_catch", scope: !1527, file: !330, line: 135, baseType: !1530, size: 64)
!1530 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1531, size: 64)
!1531 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "eh_catch_d", file: !330, line: 93, size: 320, elements: !1532)
!1532 = !{!1533, !1534, !1535, !1536, !1537}
!1533 = !DIDerivedType(tag: DW_TAG_member, name: "next_catch", scope: !1531, file: !330, line: 96, baseType: !1530, size: 64)
!1534 = !DIDerivedType(tag: DW_TAG_member, name: "prev_catch", scope: !1531, file: !330, line: 97, baseType: !1530, size: 64, offset: 64)
!1535 = !DIDerivedType(tag: DW_TAG_member, name: "type_list", scope: !1531, file: !330, line: 101, baseType: !1254, size: 64, offset: 128)
!1536 = !DIDerivedType(tag: DW_TAG_member, name: "filter_list", scope: !1531, file: !330, line: 106, baseType: !1254, size: 64, offset: 192)
!1537 = !DIDerivedType(tag: DW_TAG_member, name: "label", scope: !1531, file: !330, line: 111, baseType: !1254, size: 64, offset: 256)
!1538 = !DIDerivedType(tag: DW_TAG_member, name: "last_catch", scope: !1527, file: !330, line: 136, baseType: !1530, size: 64, offset: 64)
!1539 = !DIDerivedType(tag: DW_TAG_member, name: "allowed", scope: !1524, file: !330, line: 151, baseType: !1540, size: 192)
!1540 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "eh_region_u_allowed", file: !330, line: 139, size: 192, elements: !1541)
!1541 = !{!1542, !1543, !1544}
!1542 = !DIDerivedType(tag: DW_TAG_member, name: "type_list", scope: !1540, file: !330, line: 141, baseType: !1254, size: 64)
!1543 = !DIDerivedType(tag: DW_TAG_member, name: "label", scope: !1540, file: !330, line: 145, baseType: !1254, size: 64, offset: 64)
!1544 = !DIDerivedType(tag: DW_TAG_member, name: "filter", scope: !1540, file: !330, line: 150, baseType: !1064, size: 32, offset: 128)
!1545 = !DIDerivedType(tag: DW_TAG_member, name: "must_not_throw", scope: !1524, file: !330, line: 164, baseType: !1546, size: 128)
!1546 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "eh_region_u_must_not_throw", file: !330, line: 153, size: 128, elements: !1547)
!1547 = !{!1548, !1549}
!1548 = !DIDerivedType(tag: DW_TAG_member, name: "failure_decl", scope: !1546, file: !330, line: 161, baseType: !1254, size: 64)
!1549 = !DIDerivedType(tag: DW_TAG_member, name: "failure_loc", scope: !1546, file: !330, line: 163, baseType: !1149, size: 32, offset: 64)
!1550 = !DIDerivedType(tag: DW_TAG_member, name: "landing_pads", scope: !1516, file: !330, line: 168, baseType: !1551, size: 64, offset: 448)
!1551 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1552, size: 64)
!1552 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "eh_landing_pad_d", file: !330, line: 67, size: 320, elements: !1553)
!1553 = !{!1554, !1555, !1556, !1557, !1558}
!1554 = !DIDerivedType(tag: DW_TAG_member, name: "next_lp", scope: !1552, file: !330, line: 70, baseType: !1551, size: 64)
!1555 = !DIDerivedType(tag: DW_TAG_member, name: "region", scope: !1552, file: !330, line: 73, baseType: !1515, size: 64, offset: 64)
!1556 = !DIDerivedType(tag: DW_TAG_member, name: "post_landing_pad", scope: !1552, file: !330, line: 78, baseType: !1254, size: 64, offset: 128)
!1557 = !DIDerivedType(tag: DW_TAG_member, name: "landing_pad", scope: !1552, file: !330, line: 85, baseType: !1197, size: 64, offset: 192)
!1558 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !1552, file: !330, line: 88, baseType: !1064, size: 32, offset: 256)
!1559 = !DIDerivedType(tag: DW_TAG_member, name: "exc_ptr_reg", scope: !1516, file: !330, line: 173, baseType: !1197, size: 64, offset: 512)
!1560 = !DIDerivedType(tag: DW_TAG_member, name: "filter_reg", scope: !1516, file: !330, line: 173, baseType: !1197, size: 64, offset: 576)
!1561 = !DIDerivedType(tag: DW_TAG_member, name: "use_cxa_end_cleanup", scope: !1516, file: !330, line: 177, baseType: !1367, size: 8, offset: 640)
!1562 = !DIDerivedType(tag: DW_TAG_member, name: "region_array", scope: !1511, file: !330, line: 200, baseType: !1563, size: 64, offset: 64)
!1563 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1564, size: 64)
!1564 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_eh_region_gc", file: !330, line: 185, baseType: !1565)
!1565 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_eh_region_gc", file: !330, line: 185, size: 128, elements: !1566)
!1566 = !{!1567}
!1567 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1565, file: !330, line: 185, baseType: !1568, size: 128)
!1568 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_eh_region_base", file: !330, line: 184, baseType: !1569)
!1569 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_eh_region_base", file: !330, line: 184, size: 128, elements: !1570)
!1570 = !{!1571, !1572, !1573}
!1571 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1569, file: !330, line: 184, baseType: !7, size: 32)
!1572 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1569, file: !330, line: 184, baseType: !7, size: 32, offset: 32)
!1573 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1569, file: !330, line: 184, baseType: !1574, size: 64, offset: 64)
!1574 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1514, size: 64, elements: !1234)
!1575 = !DIDerivedType(tag: DW_TAG_member, name: "lp_array", scope: !1511, file: !330, line: 203, baseType: !1576, size: 64, offset: 128)
!1576 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1577, size: 64)
!1577 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_eh_landing_pad_gc", file: !330, line: 189, baseType: !1578)
!1578 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_eh_landing_pad_gc", file: !330, line: 189, size: 128, elements: !1579)
!1579 = !{!1580}
!1580 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1578, file: !330, line: 189, baseType: !1581, size: 128)
!1581 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_eh_landing_pad_base", file: !330, line: 188, baseType: !1582)
!1582 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_eh_landing_pad_base", file: !330, line: 188, size: 128, elements: !1583)
!1583 = !{!1584, !1585, !1586}
!1584 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1582, file: !330, line: 188, baseType: !7, size: 32)
!1585 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1582, file: !330, line: 188, baseType: !7, size: 32, offset: 32)
!1586 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1582, file: !330, line: 188, baseType: !1587, size: 64, offset: 64)
!1587 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1588, size: 64, elements: !1234)
!1588 = !DIDerivedType(tag: DW_TAG_typedef, name: "eh_landing_pad", file: !330, line: 180, baseType: !1551)
!1589 = !DIDerivedType(tag: DW_TAG_member, name: "throw_stmt_table", scope: !1511, file: !330, line: 207, baseType: !1590, size: 64, offset: 192)
!1590 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_t", file: !1591, line: 144, baseType: !1592)
!1591 = !DIFile(filename: "./include/hashtab.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1592 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1593, size: 64)
!1593 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "htab", file: !1591, line: 100, size: 896, elements: !1594)
!1594 = !{!1595, !1603, !1608, !1613, !1615, !1616, !1617, !1618, !1619, !1620, !1625, !1627, !1628, !1633, !1638}
!1595 = !DIDerivedType(tag: DW_TAG_member, name: "hash_f", scope: !1593, file: !1591, line: 102, baseType: !1596, size: 64)
!1596 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_hash", file: !1591, line: 52, baseType: !1597)
!1597 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1598, size: 64)
!1598 = !DISubroutineType(types: !1599)
!1599 = !{!1600, !1601}
!1600 = !DIDerivedType(tag: DW_TAG_typedef, name: "hashval_t", file: !1591, line: 47, baseType: !7)
!1601 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1602, size: 64)
!1602 = !DIDerivedType(tag: DW_TAG_const_type, baseType: null)
!1603 = !DIDerivedType(tag: DW_TAG_member, name: "eq_f", scope: !1593, file: !1591, line: 105, baseType: !1604, size: 64, offset: 64)
!1604 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_eq", file: !1591, line: 59, baseType: !1605)
!1605 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1606, size: 64)
!1606 = !DISubroutineType(types: !1607)
!1607 = !{!1064, !1601, !1601}
!1608 = !DIDerivedType(tag: DW_TAG_member, name: "del_f", scope: !1593, file: !1591, line: 108, baseType: !1609, size: 64, offset: 128)
!1609 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_del", file: !1591, line: 63, baseType: !1610)
!1610 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1611, size: 64)
!1611 = !DISubroutineType(types: !1612)
!1612 = !{null, !1068}
!1613 = !DIDerivedType(tag: DW_TAG_member, name: "entries", scope: !1593, file: !1591, line: 111, baseType: !1614, size: 64, offset: 192)
!1614 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1068, size: 64)
!1615 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1593, file: !1591, line: 114, baseType: !1065, size: 64, offset: 256)
!1616 = !DIDerivedType(tag: DW_TAG_member, name: "n_elements", scope: !1593, file: !1591, line: 117, baseType: !1065, size: 64, offset: 320)
!1617 = !DIDerivedType(tag: DW_TAG_member, name: "n_deleted", scope: !1593, file: !1591, line: 120, baseType: !1065, size: 64, offset: 384)
!1618 = !DIDerivedType(tag: DW_TAG_member, name: "searches", scope: !1593, file: !1591, line: 124, baseType: !7, size: 32, offset: 448)
!1619 = !DIDerivedType(tag: DW_TAG_member, name: "collisions", scope: !1593, file: !1591, line: 128, baseType: !7, size: 32, offset: 480)
!1620 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_f", scope: !1593, file: !1591, line: 131, baseType: !1621, size: 64, offset: 512)
!1621 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_alloc", file: !1591, line: 75, baseType: !1622)
!1622 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1623, size: 64)
!1623 = !DISubroutineType(types: !1624)
!1624 = !{!1068, !1065, !1065}
!1625 = !DIDerivedType(tag: DW_TAG_member, name: "free_f", scope: !1593, file: !1591, line: 132, baseType: !1626, size: 64, offset: 576)
!1626 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_free", file: !1591, line: 78, baseType: !1610)
!1627 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_arg", scope: !1593, file: !1591, line: 135, baseType: !1068, size: 64, offset: 640)
!1628 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_with_arg_f", scope: !1593, file: !1591, line: 136, baseType: !1629, size: 64, offset: 704)
!1629 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_alloc_with_arg", file: !1591, line: 82, baseType: !1630)
!1630 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1631, size: 64)
!1631 = !DISubroutineType(types: !1632)
!1632 = !{!1068, !1068, !1065, !1065}
!1633 = !DIDerivedType(tag: DW_TAG_member, name: "free_with_arg_f", scope: !1593, file: !1591, line: 137, baseType: !1634, size: 64, offset: 768)
!1634 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_free_with_arg", file: !1591, line: 83, baseType: !1635)
!1635 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1636, size: 64)
!1636 = !DISubroutineType(types: !1637)
!1637 = !{null, !1068, !1068}
!1638 = !DIDerivedType(tag: DW_TAG_member, name: "size_prime_index", scope: !1593, file: !1591, line: 141, baseType: !7, size: 32, offset: 832)
!1639 = !DIDerivedType(tag: DW_TAG_member, name: "ttype_data", scope: !1511, file: !330, line: 211, baseType: !1640, size: 64, offset: 256)
!1640 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1641, size: 64)
!1641 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_gc", file: !135, line: 183, baseType: !1642)
!1642 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_gc", file: !135, line: 183, size: 128, elements: !1643)
!1643 = !{!1644}
!1644 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1642, file: !135, line: 183, baseType: !1645, size: 128)
!1645 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_base", file: !135, line: 182, baseType: !1646)
!1646 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_base", file: !135, line: 182, size: 128, elements: !1647)
!1647 = !{!1648, !1649, !1650}
!1648 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1646, file: !135, line: 182, baseType: !7, size: 32)
!1649 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1646, file: !135, line: 182, baseType: !7, size: 32, offset: 32)
!1650 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1646, file: !135, line: 182, baseType: !1651, size: 64, offset: 64)
!1651 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1254, size: 64, elements: !1234)
!1652 = !DIDerivedType(tag: DW_TAG_member, name: "ehspec_data", scope: !1511, file: !330, line: 220, baseType: !1653, size: 64, offset: 320)
!1653 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "eh_status_u", file: !330, line: 217, size: 64, elements: !1654)
!1654 = !{!1655, !1656}
!1655 = !DIDerivedType(tag: DW_TAG_member, name: "arm_eabi", scope: !1653, file: !330, line: 218, baseType: !1640, size: 64)
!1656 = !DIDerivedType(tag: DW_TAG_member, name: "other", scope: !1653, file: !330, line: 219, baseType: !1657, size: 64)
!1657 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1658, size: 64)
!1658 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_uchar_gc", file: !1659, line: 29, baseType: !1660)
!1659 = !DIFile(filename: "./vecprim.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1660 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_uchar_gc", file: !1659, line: 29, size: 96, elements: !1661)
!1661 = !{!1662}
!1662 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1660, file: !1659, line: 29, baseType: !1663, size: 96)
!1663 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_uchar_base", file: !1659, line: 27, baseType: !1664)
!1664 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_uchar_base", file: !1659, line: 27, size: 96, elements: !1665)
!1665 = !{!1666, !1667, !1668}
!1666 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1664, file: !1659, line: 27, baseType: !7, size: 32)
!1667 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1664, file: !1659, line: 27, baseType: !7, size: 32, offset: 32)
!1668 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1664, file: !1659, line: 27, baseType: !1669, size: 8, offset: 64)
!1669 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1670, size: 8, elements: !1234)
!1670 = !DIDerivedType(tag: DW_TAG_typedef, name: "uchar", file: !1659, line: 26, baseType: !1367)
!1671 = !DIDerivedType(tag: DW_TAG_member, name: "cfg", scope: !1506, file: !1507, line: 467, baseType: !1672, size: 64, offset: 64)
!1672 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1673, size: 64)
!1673 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "control_flow_graph", file: !337, line: 374, size: 640, elements: !1674)
!1674 = !{!1675, !1677, !1678, !1691, !1692, !1693, !1694, !1695, !1696, !1698, !1700, !1701}
!1675 = !DIDerivedType(tag: DW_TAG_member, name: "x_entry_block_ptr", scope: !1673, file: !337, line: 377, baseType: !1676, size: 64)
!1676 = !DIDerivedType(tag: DW_TAG_typedef, name: "basic_block", file: !1070, line: 111, baseType: !1155)
!1677 = !DIDerivedType(tag: DW_TAG_member, name: "x_exit_block_ptr", scope: !1673, file: !337, line: 378, baseType: !1676, size: 64, offset: 64)
!1678 = !DIDerivedType(tag: DW_TAG_member, name: "x_basic_block_info", scope: !1673, file: !337, line: 381, baseType: !1679, size: 64, offset: 128)
!1679 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1680, size: 64)
!1680 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_basic_block_gc", file: !337, line: 282, baseType: !1681)
!1681 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_basic_block_gc", file: !337, line: 282, size: 128, elements: !1682)
!1682 = !{!1683}
!1683 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1681, file: !337, line: 282, baseType: !1684, size: 128)
!1684 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_basic_block_base", file: !337, line: 281, baseType: !1685)
!1685 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_basic_block_base", file: !337, line: 281, size: 128, elements: !1686)
!1686 = !{!1687, !1688, !1689}
!1687 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1685, file: !337, line: 281, baseType: !7, size: 32)
!1688 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1685, file: !337, line: 281, baseType: !7, size: 32, offset: 32)
!1689 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1685, file: !337, line: 281, baseType: !1690, size: 64, offset: 64)
!1690 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1676, size: 64, elements: !1234)
!1691 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_basic_blocks", scope: !1673, file: !337, line: 384, baseType: !1064, size: 32, offset: 192)
!1692 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_edges", scope: !1673, file: !337, line: 387, baseType: !1064, size: 32, offset: 224)
!1693 = !DIDerivedType(tag: DW_TAG_member, name: "x_last_basic_block", scope: !1673, file: !337, line: 390, baseType: !1064, size: 32, offset: 256)
!1694 = !DIDerivedType(tag: DW_TAG_member, name: "x_label_to_block_map", scope: !1673, file: !337, line: 394, baseType: !1679, size: 64, offset: 320)
!1695 = !DIDerivedType(tag: DW_TAG_member, name: "x_profile_status", scope: !1673, file: !337, line: 396, baseType: !336, size: 32, offset: 384)
!1696 = !DIDerivedType(tag: DW_TAG_member, name: "x_dom_computed", scope: !1673, file: !337, line: 399, baseType: !1697, size: 64, offset: 416)
!1697 = !DICompositeType(tag: DW_TAG_array_type, baseType: !342, size: 64, elements: !1087)
!1698 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_bbs_in_dom_tree", scope: !1673, file: !337, line: 402, baseType: !1699, size: 64, offset: 480)
!1699 = !DICompositeType(tag: DW_TAG_array_type, baseType: !7, size: 64, elements: !1087)
!1700 = !DIDerivedType(tag: DW_TAG_member, name: "max_jumptable_ents", scope: !1673, file: !337, line: 406, baseType: !1064, size: 32, offset: 544)
!1701 = !DIDerivedType(tag: DW_TAG_member, name: "last_label_uid", scope: !1673, file: !337, line: 409, baseType: !1064, size: 32, offset: 576)
!1702 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_body", scope: !1506, file: !1507, line: 470, baseType: !1182, size: 64, offset: 128)
!1703 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_df", scope: !1506, file: !1507, line: 473, baseType: !1704, size: 64, offset: 192)
!1704 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1705, size: 64)
!1705 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_df", file: !1457, line: 39, size: 1152, elements: !1706)
!1706 = !{!1707, !1708, !1721, !1722, !1723, !1734, !1735, !1739, !1740, !1741, !1742, !1743}
!1707 = !DIDerivedType(tag: DW_TAG_member, name: "referenced_vars", scope: !1705, file: !1457, line: 41, baseType: !1590, size: 64)
!1708 = !DIDerivedType(tag: DW_TAG_member, name: "modified_noreturn_calls", scope: !1705, file: !1457, line: 48, baseType: !1709, size: 64, offset: 64)
!1709 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1710, size: 64)
!1710 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_gimple_gc", file: !757, line: 35, baseType: !1711)
!1711 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_gimple_gc", file: !757, line: 35, size: 128, elements: !1712)
!1712 = !{!1713}
!1713 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1711, file: !757, line: 35, baseType: !1714, size: 128)
!1714 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_gimple_base", file: !757, line: 33, baseType: !1715)
!1715 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_gimple_base", file: !757, line: 33, size: 128, elements: !1716)
!1716 = !{!1717, !1718, !1719}
!1717 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1715, file: !757, line: 33, baseType: !7, size: 32)
!1718 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1715, file: !757, line: 33, baseType: !7, size: 32, offset: 32)
!1719 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1715, file: !757, line: 33, baseType: !1720, size: 64, offset: 64)
!1720 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1191, size: 64, elements: !1234)
!1721 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_names", scope: !1705, file: !1457, line: 51, baseType: !1640, size: 64, offset: 128)
!1722 = !DIDerivedType(tag: DW_TAG_member, name: "vop", scope: !1705, file: !1457, line: 54, baseType: !1254, size: 64, offset: 192)
!1723 = !DIDerivedType(tag: DW_TAG_member, name: "escaped", scope: !1705, file: !1457, line: 57, baseType: !1724, size: 128, offset: 256)
!1724 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "pt_solution", file: !1725, line: 31, size: 128, elements: !1726)
!1725 = !DIFile(filename: "./tree-ssa-alias.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1726 = !{!1727, !1728, !1729, !1730, !1731, !1732, !1733}
!1727 = !DIDerivedType(tag: DW_TAG_member, name: "anything", scope: !1724, file: !1725, line: 35, baseType: !7, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1728 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal", scope: !1724, file: !1725, line: 39, baseType: !7, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1729 = !DIDerivedType(tag: DW_TAG_member, name: "escaped", scope: !1724, file: !1725, line: 42, baseType: !7, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1730 = !DIDerivedType(tag: DW_TAG_member, name: "null", scope: !1724, file: !1725, line: 46, baseType: !7, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1731 = !DIDerivedType(tag: DW_TAG_member, name: "vars_contains_global", scope: !1724, file: !1725, line: 50, baseType: !7, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1732 = !DIDerivedType(tag: DW_TAG_member, name: "vars_contains_restrict", scope: !1724, file: !1725, line: 53, baseType: !7, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1733 = !DIDerivedType(tag: DW_TAG_member, name: "vars", scope: !1724, file: !1725, line: 56, baseType: !1069, size: 64, offset: 64)
!1734 = !DIDerivedType(tag: DW_TAG_member, name: "callused", scope: !1705, file: !1457, line: 60, baseType: !1724, size: 128, offset: 384)
!1735 = !DIDerivedType(tag: DW_TAG_member, name: "decls_to_pointers", scope: !1705, file: !1457, line: 64, baseType: !1736, size: 64, offset: 512)
!1736 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1737, size: 64)
!1737 = !DICompositeType(tag: DW_TAG_structure_type, name: "pointer_map_t", file: !1738, line: 33, flags: DIFlagFwdDecl)
!1738 = !DIFile(filename: "./pointer-set.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1739 = !DIDerivedType(tag: DW_TAG_member, name: "free_ssanames", scope: !1705, file: !1457, line: 67, baseType: !1254, size: 64, offset: 576)
!1740 = !DIDerivedType(tag: DW_TAG_member, name: "default_defs", scope: !1705, file: !1457, line: 73, baseType: !1590, size: 64, offset: 640)
!1741 = !DIDerivedType(tag: DW_TAG_member, name: "syms_to_rename", scope: !1705, file: !1457, line: 77, baseType: !1069, size: 64, offset: 704)
!1742 = !DIDerivedType(tag: DW_TAG_member, name: "in_ssa_p", scope: !1705, file: !1457, line: 80, baseType: !7, size: 1, offset: 768, flags: DIFlagBitField, extraData: i64 768)
!1743 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_operands", scope: !1705, file: !1457, line: 82, baseType: !1744, size: 320, offset: 832)
!1744 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_operands", file: !1745, line: 62, size: 320, elements: !1746)
!1745 = !DIFile(filename: "./tree-ssa-operands.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1746 = !{!1747, !1753, !1754, !1755, !1756, !1763}
!1747 = !DIDerivedType(tag: DW_TAG_member, name: "operand_memory", scope: !1744, file: !1745, line: 63, baseType: !1748, size: 64)
!1748 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1749, size: 64)
!1749 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_operand_memory_d", file: !1745, line: 56, size: 128, elements: !1750)
!1750 = !{!1751, !1752}
!1751 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1749, file: !1745, line: 57, baseType: !1748, size: 64)
!1752 = !DIDerivedType(tag: DW_TAG_member, name: "mem", scope: !1749, file: !1745, line: 58, baseType: !1349, size: 8, offset: 64)
!1753 = !DIDerivedType(tag: DW_TAG_member, name: "operand_memory_index", scope: !1744, file: !1745, line: 64, baseType: !7, size: 32, offset: 64)
!1754 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_operand_mem_size", scope: !1744, file: !1745, line: 66, baseType: !7, size: 32, offset: 96)
!1755 = !DIDerivedType(tag: DW_TAG_member, name: "ops_active", scope: !1744, file: !1745, line: 68, baseType: !1367, size: 8, offset: 128)
!1756 = !DIDerivedType(tag: DW_TAG_member, name: "free_defs", scope: !1744, file: !1745, line: 70, baseType: !1757, size: 64, offset: 192)
!1757 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1758, size: 64)
!1758 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "def_optype_d", file: !1745, line: 37, size: 128, elements: !1759)
!1759 = !{!1760, !1761}
!1760 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1758, file: !1745, line: 39, baseType: !1757, size: 64)
!1761 = !DIDerivedType(tag: DW_TAG_member, name: "def_ptr", scope: !1758, file: !1745, line: 40, baseType: !1762, size: 64, offset: 64)
!1762 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1254, size: 64)
!1763 = !DIDerivedType(tag: DW_TAG_member, name: "free_uses", scope: !1744, file: !1745, line: 71, baseType: !1764, size: 64, offset: 256)
!1764 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1765, size: 64)
!1765 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "use_optype_d", file: !1745, line: 45, size: 320, elements: !1766)
!1766 = !{!1767, !1768}
!1767 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1765, file: !1745, line: 47, baseType: !1764, size: 64)
!1768 = !DIDerivedType(tag: DW_TAG_member, name: "use_ptr", scope: !1765, file: !1745, line: 48, baseType: !1769, size: 256, offset: 64)
!1769 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_use_operand_d", file: !135, line: 1883, size: 256, elements: !1770)
!1770 = !{!1771, !1773, !1774, !1779}
!1771 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1769, file: !135, line: 1884, baseType: !1772, size: 64)
!1772 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1769, size: 64)
!1773 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1769, file: !135, line: 1885, baseType: !1772, size: 64, offset: 64)
!1774 = !DIDerivedType(tag: DW_TAG_member, name: "loc", scope: !1769, file: !135, line: 1891, baseType: !1775, size: 64, offset: 128)
!1775 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1769, file: !135, line: 1891, size: 64, elements: !1776)
!1776 = !{!1777, !1778}
!1777 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !1775, file: !135, line: 1891, baseType: !1191, size: 64)
!1778 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_name", scope: !1775, file: !135, line: 1891, baseType: !1254, size: 64)
!1779 = !DIDerivedType(tag: DW_TAG_member, name: "use", scope: !1769, file: !135, line: 1892, baseType: !1762, size: 64, offset: 192)
!1780 = !DIDerivedType(tag: DW_TAG_member, name: "x_current_loops", scope: !1506, file: !1507, line: 476, baseType: !1781, size: 64, offset: 256)
!1781 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1782, size: 64)
!1782 = !DICompositeType(tag: DW_TAG_structure_type, name: "loops", file: !1507, line: 476, flags: DIFlagFwdDecl)
!1783 = !DIDerivedType(tag: DW_TAG_member, name: "value_histograms", scope: !1506, file: !1507, line: 479, baseType: !1590, size: 64, offset: 320)
!1784 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !1506, file: !1507, line: 484, baseType: !1254, size: 64, offset: 384)
!1785 = !DIDerivedType(tag: DW_TAG_member, name: "static_chain_decl", scope: !1506, file: !1507, line: 488, baseType: !1254, size: 64, offset: 448)
!1786 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal_goto_save_area", scope: !1506, file: !1507, line: 493, baseType: !1254, size: 64, offset: 512)
!1787 = !DIDerivedType(tag: DW_TAG_member, name: "local_decls", scope: !1506, file: !1507, line: 496, baseType: !1254, size: 64, offset: 576)
!1788 = !DIDerivedType(tag: DW_TAG_member, name: "machine", scope: !1506, file: !1507, line: 501, baseType: !1789, size: 64, offset: 640)
!1789 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1790, size: 64)
!1790 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "machine_function", file: !348, line: 2355, size: 576, elements: !1791)
!1791 = !{!1792, !1795, !1796, !1797, !1798, !1800, !1801, !1806, !1807, !1808, !1809, !1810, !1811}
!1792 = !DIDerivedType(tag: DW_TAG_member, name: "stack_locals", scope: !1790, file: !348, line: 2356, baseType: !1793, size: 64)
!1793 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1794, size: 64)
!1794 = !DICompositeType(tag: DW_TAG_structure_type, name: "stack_local_entry", file: !348, line: 2356, flags: DIFlagFwdDecl)
!1795 = !DIDerivedType(tag: DW_TAG_member, name: "some_ld_name", scope: !1790, file: !348, line: 2357, baseType: !1223, size: 64, offset: 64)
!1796 = !DIDerivedType(tag: DW_TAG_member, name: "varargs_gpr_size", scope: !1790, file: !348, line: 2358, baseType: !1064, size: 32, offset: 128)
!1797 = !DIDerivedType(tag: DW_TAG_member, name: "varargs_fpr_size", scope: !1790, file: !348, line: 2359, baseType: !1064, size: 32, offset: 160)
!1798 = !DIDerivedType(tag: DW_TAG_member, name: "optimize_mode_switching", scope: !1790, file: !348, line: 2360, baseType: !1799, size: 128, offset: 192)
!1799 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1064, size: 128, elements: !1113)
!1800 = !DIDerivedType(tag: DW_TAG_member, name: "use_fast_prologue_epilogue_nregs", scope: !1790, file: !348, line: 2364, baseType: !1064, size: 32, offset: 320)
!1801 = !DIDerivedType(tag: DW_TAG_member, name: "cfa", scope: !1790, file: !348, line: 2367, baseType: !1802, size: 128, offset: 384)
!1802 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "machine_cfa_state", file: !348, line: 2349, size: 128, elements: !1803)
!1803 = !{!1804, !1805}
!1804 = !DIDerivedType(tag: DW_TAG_member, name: "reg", scope: !1802, file: !348, line: 2351, baseType: !1197, size: 64)
!1805 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1802, file: !348, line: 2352, baseType: !1063, size: 64, offset: 64)
!1806 = !DIDerivedType(tag: DW_TAG_member, name: "call_abi", scope: !1790, file: !348, line: 2371, baseType: !347, size: 32, offset: 512)
!1807 = !DIDerivedType(tag: DW_TAG_member, name: "accesses_prev_frame", scope: !1790, file: !348, line: 2374, baseType: !7, size: 1, offset: 544, flags: DIFlagBitField, extraData: i64 544)
!1808 = !DIDerivedType(tag: DW_TAG_member, name: "needs_cld", scope: !1790, file: !348, line: 2377, baseType: !7, size: 1, offset: 545, flags: DIFlagBitField, extraData: i64 544)
!1809 = !DIDerivedType(tag: DW_TAG_member, name: "use_fast_prologue_epilogue", scope: !1790, file: !348, line: 2381, baseType: !7, size: 1, offset: 546, flags: DIFlagBitField, extraData: i64 544)
!1810 = !DIDerivedType(tag: DW_TAG_member, name: "tls_descriptor_call_expanded_p", scope: !1790, file: !348, line: 2392, baseType: !7, size: 1, offset: 547, flags: DIFlagBitField, extraData: i64 544)
!1811 = !DIDerivedType(tag: DW_TAG_member, name: "static_chain_on_stack", scope: !1790, file: !348, line: 2396, baseType: !7, size: 1, offset: 548, flags: DIFlagBitField, extraData: i64 544)
!1812 = !DIDerivedType(tag: DW_TAG_member, name: "language", scope: !1506, file: !1507, line: 504, baseType: !1813, size: 64, offset: 704)
!1813 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1814, size: 64)
!1814 = !DICompositeType(tag: DW_TAG_structure_type, name: "language_function", file: !1507, line: 504, flags: DIFlagFwdDecl)
!1815 = !DIDerivedType(tag: DW_TAG_member, name: "used_types_hash", scope: !1506, file: !1507, line: 507, baseType: !1590, size: 64, offset: 768)
!1816 = !DIDerivedType(tag: DW_TAG_member, name: "last_stmt_uid", scope: !1506, file: !1507, line: 510, baseType: !1064, size: 32, offset: 832)
!1817 = !DIDerivedType(tag: DW_TAG_member, name: "funcdef_no", scope: !1506, file: !1507, line: 513, baseType: !1064, size: 32, offset: 864)
!1818 = !DIDerivedType(tag: DW_TAG_member, name: "function_start_locus", scope: !1506, file: !1507, line: 516, baseType: !1149, size: 32, offset: 896)
!1819 = !DIDerivedType(tag: DW_TAG_member, name: "function_end_locus", scope: !1506, file: !1507, line: 519, baseType: !1149, size: 32, offset: 928)
!1820 = !DIDerivedType(tag: DW_TAG_member, name: "curr_properties", scope: !1506, file: !1507, line: 522, baseType: !7, size: 32, offset: 960)
!1821 = !DIDerivedType(tag: DW_TAG_member, name: "last_verified", scope: !1506, file: !1507, line: 523, baseType: !7, size: 32, offset: 992)
!1822 = !DIDerivedType(tag: DW_TAG_member, name: "cannot_be_copied_reason", scope: !1506, file: !1507, line: 528, baseType: !1223, size: 64, offset: 1024)
!1823 = !DIDerivedType(tag: DW_TAG_member, name: "va_list_gpr_size", scope: !1506, file: !1507, line: 535, baseType: !7, size: 8, offset: 1088, flags: DIFlagBitField, extraData: i64 1088)
!1824 = !DIDerivedType(tag: DW_TAG_member, name: "va_list_fpr_size", scope: !1506, file: !1507, line: 539, baseType: !7, size: 8, offset: 1096, flags: DIFlagBitField, extraData: i64 1088)
!1825 = !DIDerivedType(tag: DW_TAG_member, name: "function_frequency", scope: !1506, file: !1507, line: 543, baseType: !7, size: 2, offset: 1104, flags: DIFlagBitField, extraData: i64 1088)
!1826 = !DIDerivedType(tag: DW_TAG_member, name: "calls_setjmp", scope: !1506, file: !1507, line: 546, baseType: !7, size: 1, offset: 1106, flags: DIFlagBitField, extraData: i64 1088)
!1827 = !DIDerivedType(tag: DW_TAG_member, name: "calls_alloca", scope: !1506, file: !1507, line: 550, baseType: !7, size: 1, offset: 1107, flags: DIFlagBitField, extraData: i64 1088)
!1828 = !DIDerivedType(tag: DW_TAG_member, name: "has_nonlocal_label", scope: !1506, file: !1507, line: 554, baseType: !7, size: 1, offset: 1108, flags: DIFlagBitField, extraData: i64 1088)
!1829 = !DIDerivedType(tag: DW_TAG_member, name: "cannot_be_copied_set", scope: !1506, file: !1507, line: 559, baseType: !7, size: 1, offset: 1109, flags: DIFlagBitField, extraData: i64 1088)
!1830 = !DIDerivedType(tag: DW_TAG_member, name: "stdarg", scope: !1506, file: !1507, line: 562, baseType: !7, size: 1, offset: 1110, flags: DIFlagBitField, extraData: i64 1088)
!1831 = !DIDerivedType(tag: DW_TAG_member, name: "dont_save_pending_sizes_p", scope: !1506, file: !1507, line: 571, baseType: !7, size: 1, offset: 1111, flags: DIFlagBitField, extraData: i64 1088)
!1832 = !DIDerivedType(tag: DW_TAG_member, name: "after_inlining", scope: !1506, file: !1507, line: 573, baseType: !7, size: 1, offset: 1112, flags: DIFlagBitField, extraData: i64 1088)
!1833 = !DIDerivedType(tag: DW_TAG_member, name: "always_inline_functions_inlined", scope: !1506, file: !1507, line: 574, baseType: !7, size: 1, offset: 1113, flags: DIFlagBitField, extraData: i64 1088)
!1834 = !DIDerivedType(tag: DW_TAG_member, name: "returns_struct", scope: !1506, file: !1507, line: 581, baseType: !7, size: 1, offset: 1114, flags: DIFlagBitField, extraData: i64 1088)
!1835 = !DIDerivedType(tag: DW_TAG_member, name: "returns_pcc_struct", scope: !1506, file: !1507, line: 585, baseType: !7, size: 1, offset: 1115, flags: DIFlagBitField, extraData: i64 1088)
!1836 = !DIDerivedType(tag: DW_TAG_member, name: "after_tree_profile", scope: !1506, file: !1507, line: 588, baseType: !7, size: 1, offset: 1116, flags: DIFlagBitField, extraData: i64 1088)
!1837 = !DIDerivedType(tag: DW_TAG_member, name: "has_local_explicit_reg_vars", scope: !1506, file: !1507, line: 592, baseType: !7, size: 1, offset: 1117, flags: DIFlagBitField, extraData: i64 1088)
!1838 = !DIDerivedType(tag: DW_TAG_member, name: "is_thunk", scope: !1506, file: !1507, line: 598, baseType: !7, size: 1, offset: 1118, flags: DIFlagBitField, extraData: i64 1088)
!1839 = !DIDerivedType(tag: DW_TAG_member, name: "personality", scope: !1501, file: !135, line: 3254, baseType: !1254, size: 64, offset: 1536)
!1840 = !DIDerivedType(tag: DW_TAG_member, name: "function_specific_target", scope: !1501, file: !135, line: 3257, baseType: !1254, size: 64, offset: 1600)
!1841 = !DIDerivedType(tag: DW_TAG_member, name: "function_specific_optimization", scope: !1501, file: !135, line: 3258, baseType: !1254, size: 64, offset: 1664)
!1842 = !DIDerivedType(tag: DW_TAG_member, name: "function_code", scope: !1501, file: !135, line: 3264, baseType: !7, size: 11, offset: 1728, flags: DIFlagBitField, extraData: i64 1728)
!1843 = !DIDerivedType(tag: DW_TAG_member, name: "built_in_class", scope: !1501, file: !135, line: 3265, baseType: !7, size: 2, offset: 1739, flags: DIFlagBitField, extraData: i64 1728)
!1844 = !DIDerivedType(tag: DW_TAG_member, name: "static_ctor_flag", scope: !1501, file: !135, line: 3267, baseType: !7, size: 1, offset: 1741, flags: DIFlagBitField, extraData: i64 1728)
!1845 = !DIDerivedType(tag: DW_TAG_member, name: "static_dtor_flag", scope: !1501, file: !135, line: 3268, baseType: !7, size: 1, offset: 1742, flags: DIFlagBitField, extraData: i64 1728)
!1846 = !DIDerivedType(tag: DW_TAG_member, name: "uninlinable", scope: !1501, file: !135, line: 3269, baseType: !7, size: 1, offset: 1743, flags: DIFlagBitField, extraData: i64 1728)
!1847 = !DIDerivedType(tag: DW_TAG_member, name: "possibly_inlined", scope: !1501, file: !135, line: 3271, baseType: !7, size: 1, offset: 1744, flags: DIFlagBitField, extraData: i64 1728)
!1848 = !DIDerivedType(tag: DW_TAG_member, name: "novops_flag", scope: !1501, file: !135, line: 3272, baseType: !7, size: 1, offset: 1745, flags: DIFlagBitField, extraData: i64 1728)
!1849 = !DIDerivedType(tag: DW_TAG_member, name: "returns_twice_flag", scope: !1501, file: !135, line: 3273, baseType: !7, size: 1, offset: 1746, flags: DIFlagBitField, extraData: i64 1728)
!1850 = !DIDerivedType(tag: DW_TAG_member, name: "malloc_flag", scope: !1501, file: !135, line: 3274, baseType: !7, size: 1, offset: 1747, flags: DIFlagBitField, extraData: i64 1728)
!1851 = !DIDerivedType(tag: DW_TAG_member, name: "operator_new_flag", scope: !1501, file: !135, line: 3275, baseType: !7, size: 1, offset: 1748, flags: DIFlagBitField, extraData: i64 1728)
!1852 = !DIDerivedType(tag: DW_TAG_member, name: "declared_inline_flag", scope: !1501, file: !135, line: 3276, baseType: !7, size: 1, offset: 1749, flags: DIFlagBitField, extraData: i64 1728)
!1853 = !DIDerivedType(tag: DW_TAG_member, name: "regdecl_flag", scope: !1501, file: !135, line: 3277, baseType: !7, size: 1, offset: 1750, flags: DIFlagBitField, extraData: i64 1728)
!1854 = !DIDerivedType(tag: DW_TAG_member, name: "no_inline_warning_flag", scope: !1501, file: !135, line: 3279, baseType: !7, size: 1, offset: 1751, flags: DIFlagBitField, extraData: i64 1728)
!1855 = !DIDerivedType(tag: DW_TAG_member, name: "no_instrument_function_entry_exit", scope: !1501, file: !135, line: 3280, baseType: !7, size: 1, offset: 1752, flags: DIFlagBitField, extraData: i64 1728)
!1856 = !DIDerivedType(tag: DW_TAG_member, name: "no_limit_stack", scope: !1501, file: !135, line: 3281, baseType: !7, size: 1, offset: 1753, flags: DIFlagBitField, extraData: i64 1728)
!1857 = !DIDerivedType(tag: DW_TAG_member, name: "disregard_inline_limits", scope: !1501, file: !135, line: 3282, baseType: !7, size: 1, offset: 1754, flags: DIFlagBitField, extraData: i64 1728)
!1858 = !DIDerivedType(tag: DW_TAG_member, name: "pure_flag", scope: !1501, file: !135, line: 3283, baseType: !7, size: 1, offset: 1755, flags: DIFlagBitField, extraData: i64 1728)
!1859 = !DIDerivedType(tag: DW_TAG_member, name: "looping_const_or_pure_flag", scope: !1501, file: !135, line: 3284, baseType: !7, size: 1, offset: 1756, flags: DIFlagBitField, extraData: i64 1728)
!1860 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !1256, file: !135, line: 3394, baseType: !1861, size: 1344)
!1861 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_type", file: !135, line: 2279, size: 1344, elements: !1862)
!1862 = !{!1863, !1864, !1865, !1866, !1867, !1868, !1869, !1870, !1871, !1872, !1873, !1874, !1875, !1876, !1877, !1878, !1879, !1880, !1881, !1882, !1883, !1884, !1885, !1888, !1889, !1890, !1898, !1899, !1900, !1901, !1902, !1903, !1904, !1905, !1906}
!1863 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1861, file: !135, line: 2280, baseType: !1292, size: 192)
!1864 = !DIDerivedType(tag: DW_TAG_member, name: "values", scope: !1861, file: !135, line: 2281, baseType: !1254, size: 64, offset: 192)
!1865 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1861, file: !135, line: 2282, baseType: !1254, size: 64, offset: 256)
!1866 = !DIDerivedType(tag: DW_TAG_member, name: "size_unit", scope: !1861, file: !135, line: 2283, baseType: !1254, size: 64, offset: 320)
!1867 = !DIDerivedType(tag: DW_TAG_member, name: "attributes", scope: !1861, file: !135, line: 2284, baseType: !1254, size: 64, offset: 384)
!1868 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !1861, file: !135, line: 2285, baseType: !7, size: 32, offset: 448)
!1869 = !DIDerivedType(tag: DW_TAG_member, name: "precision", scope: !1861, file: !135, line: 2287, baseType: !7, size: 10, offset: 480, flags: DIFlagBitField, extraData: i64 480)
!1870 = !DIDerivedType(tag: DW_TAG_member, name: "no_force_blk_flag", scope: !1861, file: !135, line: 2288, baseType: !7, size: 1, offset: 490, flags: DIFlagBitField, extraData: i64 480)
!1871 = !DIDerivedType(tag: DW_TAG_member, name: "needs_constructing_flag", scope: !1861, file: !135, line: 2289, baseType: !7, size: 1, offset: 491, flags: DIFlagBitField, extraData: i64 480)
!1872 = !DIDerivedType(tag: DW_TAG_member, name: "transparent_aggr_flag", scope: !1861, file: !135, line: 2290, baseType: !7, size: 1, offset: 492, flags: DIFlagBitField, extraData: i64 480)
!1873 = !DIDerivedType(tag: DW_TAG_member, name: "restrict_flag", scope: !1861, file: !135, line: 2291, baseType: !7, size: 1, offset: 493, flags: DIFlagBitField, extraData: i64 480)
!1874 = !DIDerivedType(tag: DW_TAG_member, name: "contains_placeholder_bits", scope: !1861, file: !135, line: 2292, baseType: !7, size: 2, offset: 494, flags: DIFlagBitField, extraData: i64 480)
!1875 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !1861, file: !135, line: 2294, baseType: !7, size: 8, offset: 496, flags: DIFlagBitField, extraData: i64 480)
!1876 = !DIDerivedType(tag: DW_TAG_member, name: "string_flag", scope: !1861, file: !135, line: 2296, baseType: !7, size: 1, offset: 504, flags: DIFlagBitField, extraData: i64 480)
!1877 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !1861, file: !135, line: 2297, baseType: !7, size: 1, offset: 505, flags: DIFlagBitField, extraData: i64 480)
!1878 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !1861, file: !135, line: 2298, baseType: !7, size: 1, offset: 506, flags: DIFlagBitField, extraData: i64 480)
!1879 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !1861, file: !135, line: 2299, baseType: !7, size: 1, offset: 507, flags: DIFlagBitField, extraData: i64 480)
!1880 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !1861, file: !135, line: 2300, baseType: !7, size: 1, offset: 508, flags: DIFlagBitField, extraData: i64 480)
!1881 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !1861, file: !135, line: 2301, baseType: !7, size: 1, offset: 509, flags: DIFlagBitField, extraData: i64 480)
!1882 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !1861, file: !135, line: 2302, baseType: !7, size: 1, offset: 510, flags: DIFlagBitField, extraData: i64 480)
!1883 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !1861, file: !135, line: 2303, baseType: !7, size: 1, offset: 511, flags: DIFlagBitField, extraData: i64 480)
!1884 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !1861, file: !135, line: 2305, baseType: !7, size: 32, offset: 512)
!1885 = !DIDerivedType(tag: DW_TAG_member, name: "alias_set", scope: !1861, file: !135, line: 2306, baseType: !1886, size: 32, offset: 544)
!1886 = !DIDerivedType(tag: DW_TAG_typedef, name: "alias_set_type", file: !1887, line: 31, baseType: !1064)
!1887 = !DIFile(filename: "./alias.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1888 = !DIDerivedType(tag: DW_TAG_member, name: "pointer_to", scope: !1861, file: !135, line: 2307, baseType: !1254, size: 64, offset: 576)
!1889 = !DIDerivedType(tag: DW_TAG_member, name: "reference_to", scope: !1861, file: !135, line: 2308, baseType: !1254, size: 64, offset: 640)
!1890 = !DIDerivedType(tag: DW_TAG_member, name: "symtab", scope: !1861, file: !135, line: 2314, baseType: !1891, size: 64, offset: 704)
!1891 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "tree_type_symtab", file: !135, line: 2309, size: 64, elements: !1892)
!1892 = !{!1893, !1894, !1895}
!1893 = !DIDerivedType(tag: DW_TAG_member, name: "address", scope: !1891, file: !135, line: 2310, baseType: !1064, size: 32)
!1894 = !DIDerivedType(tag: DW_TAG_member, name: "pointer", scope: !1891, file: !135, line: 2311, baseType: !1223, size: 64)
!1895 = !DIDerivedType(tag: DW_TAG_member, name: "die", scope: !1891, file: !135, line: 2312, baseType: !1896, size: 64)
!1896 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1897, size: 64)
!1897 = !DICompositeType(tag: DW_TAG_structure_type, name: "die_struct", file: !135, line: 2277, flags: DIFlagFwdDecl)
!1898 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1861, file: !135, line: 2315, baseType: !1254, size: 64, offset: 768)
!1899 = !DIDerivedType(tag: DW_TAG_member, name: "minval", scope: !1861, file: !135, line: 2316, baseType: !1254, size: 64, offset: 832)
!1900 = !DIDerivedType(tag: DW_TAG_member, name: "maxval", scope: !1861, file: !135, line: 2317, baseType: !1254, size: 64, offset: 896)
!1901 = !DIDerivedType(tag: DW_TAG_member, name: "next_variant", scope: !1861, file: !135, line: 2318, baseType: !1254, size: 64, offset: 960)
!1902 = !DIDerivedType(tag: DW_TAG_member, name: "main_variant", scope: !1861, file: !135, line: 2319, baseType: !1254, size: 64, offset: 1024)
!1903 = !DIDerivedType(tag: DW_TAG_member, name: "binfo", scope: !1861, file: !135, line: 2320, baseType: !1254, size: 64, offset: 1088)
!1904 = !DIDerivedType(tag: DW_TAG_member, name: "context", scope: !1861, file: !135, line: 2321, baseType: !1254, size: 64, offset: 1152)
!1905 = !DIDerivedType(tag: DW_TAG_member, name: "canonical", scope: !1861, file: !135, line: 2322, baseType: !1254, size: 64, offset: 1216)
!1906 = !DIDerivedType(tag: DW_TAG_member, name: "lang_specific", scope: !1861, file: !135, line: 2324, baseType: !1907, size: 64, offset: 1280)
!1907 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1908, size: 64)
!1908 = !DICompositeType(tag: DW_TAG_structure_type, name: "lang_type", file: !135, line: 2324, flags: DIFlagFwdDecl)
!1909 = !DIDerivedType(tag: DW_TAG_member, name: "list", scope: !1256, file: !135, line: 3395, baseType: !1910, size: 320)
!1910 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_list", file: !135, line: 1469, size: 320, elements: !1911)
!1911 = !{!1912, !1913, !1914}
!1912 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1910, file: !135, line: 1470, baseType: !1292, size: 192)
!1913 = !DIDerivedType(tag: DW_TAG_member, name: "purpose", scope: !1910, file: !135, line: 1471, baseType: !1254, size: 64, offset: 192)
!1914 = !DIDerivedType(tag: DW_TAG_member, name: "value", scope: !1910, file: !135, line: 1472, baseType: !1254, size: 64, offset: 256)
!1915 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1256, file: !135, line: 3396, baseType: !1916, size: 320)
!1916 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_vec", file: !135, line: 1482, size: 320, elements: !1917)
!1917 = !{!1918, !1919, !1920}
!1918 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1916, file: !135, line: 1483, baseType: !1292, size: 192)
!1919 = !DIDerivedType(tag: DW_TAG_member, name: "length", scope: !1916, file: !135, line: 1484, baseType: !1064, size: 32, offset: 192)
!1920 = !DIDerivedType(tag: DW_TAG_member, name: "a", scope: !1916, file: !135, line: 1485, baseType: !1651, size: 64, offset: 256)
!1921 = !DIDerivedType(tag: DW_TAG_member, name: "exp", scope: !1256, file: !135, line: 3397, baseType: !1922, size: 384)
!1922 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_exp", file: !135, line: 1829, size: 384, elements: !1923)
!1923 = !{!1924, !1925, !1926, !1927}
!1924 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1922, file: !135, line: 1830, baseType: !1292, size: 192)
!1925 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !1922, file: !135, line: 1831, baseType: !1149, size: 32, offset: 192)
!1926 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !1922, file: !135, line: 1832, baseType: !1254, size: 64, offset: 256)
!1927 = !DIDerivedType(tag: DW_TAG_member, name: "operands", scope: !1922, file: !135, line: 1835, baseType: !1651, size: 64, offset: 320)
!1928 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_name", scope: !1256, file: !135, line: 3398, baseType: !1929, size: 704)
!1929 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_ssa_name", file: !135, line: 1898, size: 704, elements: !1930)
!1930 = !{!1931, !1932, !1933, !1934, !1935, !1940}
!1931 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1929, file: !135, line: 1899, baseType: !1292, size: 192)
!1932 = !DIDerivedType(tag: DW_TAG_member, name: "var", scope: !1929, file: !135, line: 1902, baseType: !1254, size: 64, offset: 192)
!1933 = !DIDerivedType(tag: DW_TAG_member, name: "def_stmt", scope: !1929, file: !135, line: 1905, baseType: !1191, size: 64, offset: 256)
!1934 = !DIDerivedType(tag: DW_TAG_member, name: "version", scope: !1929, file: !135, line: 1908, baseType: !7, size: 32, offset: 320)
!1935 = !DIDerivedType(tag: DW_TAG_member, name: "ptr_info", scope: !1929, file: !135, line: 1911, baseType: !1936, size: 64, offset: 384)
!1936 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1937, size: 64)
!1937 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ptr_info_def", file: !1457, line: 117, size: 128, elements: !1938)
!1938 = !{!1939}
!1939 = !DIDerivedType(tag: DW_TAG_member, name: "pt", scope: !1937, file: !1457, line: 120, baseType: !1724, size: 128)
!1940 = !DIDerivedType(tag: DW_TAG_member, name: "imm_uses", scope: !1929, file: !135, line: 1914, baseType: !1769, size: 256, offset: 448)
!1941 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !1256, file: !135, line: 3399, baseType: !1942, size: 704)
!1942 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_block", file: !135, line: 2008, size: 704, elements: !1943)
!1943 = !{!1944, !1945, !1946, !1947, !1948, !1949, !1950, !1951, !1952, !1953, !1954}
!1944 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1942, file: !135, line: 2009, baseType: !1292, size: 192)
!1945 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_flag", scope: !1942, file: !135, line: 2011, baseType: !7, size: 1, offset: 192, flags: DIFlagBitField, extraData: i64 192)
!1946 = !DIDerivedType(tag: DW_TAG_member, name: "block_num", scope: !1942, file: !135, line: 2012, baseType: !7, size: 31, offset: 193, flags: DIFlagBitField, extraData: i64 192)
!1947 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !1942, file: !135, line: 2014, baseType: !1149, size: 32, offset: 224)
!1948 = !DIDerivedType(tag: DW_TAG_member, name: "vars", scope: !1942, file: !135, line: 2016, baseType: !1254, size: 64, offset: 256)
!1949 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocalized_vars", scope: !1942, file: !135, line: 2017, baseType: !1640, size: 64, offset: 320)
!1950 = !DIDerivedType(tag: DW_TAG_member, name: "subblocks", scope: !1942, file: !135, line: 2019, baseType: !1254, size: 64, offset: 384)
!1951 = !DIDerivedType(tag: DW_TAG_member, name: "supercontext", scope: !1942, file: !135, line: 2020, baseType: !1254, size: 64, offset: 448)
!1952 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_origin", scope: !1942, file: !135, line: 2021, baseType: !1254, size: 64, offset: 512)
!1953 = !DIDerivedType(tag: DW_TAG_member, name: "fragment_origin", scope: !1942, file: !135, line: 2022, baseType: !1254, size: 64, offset: 576)
!1954 = !DIDerivedType(tag: DW_TAG_member, name: "fragment_chain", scope: !1942, file: !135, line: 2023, baseType: !1254, size: 64, offset: 640)
!1955 = !DIDerivedType(tag: DW_TAG_member, name: "binfo", scope: !1256, file: !135, line: 3400, baseType: !1956, size: 832)
!1956 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_binfo", file: !135, line: 2430, size: 832, elements: !1957)
!1957 = !{!1958, !1959, !1960, !1961, !1962, !1963, !1964, !1965, !1966, !1967}
!1958 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1956, file: !135, line: 2431, baseType: !1292, size: 192)
!1959 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1956, file: !135, line: 2433, baseType: !1254, size: 64, offset: 192)
!1960 = !DIDerivedType(tag: DW_TAG_member, name: "vtable", scope: !1956, file: !135, line: 2434, baseType: !1254, size: 64, offset: 256)
!1961 = !DIDerivedType(tag: DW_TAG_member, name: "virtuals", scope: !1956, file: !135, line: 2435, baseType: !1254, size: 64, offset: 320)
!1962 = !DIDerivedType(tag: DW_TAG_member, name: "vptr_field", scope: !1956, file: !135, line: 2436, baseType: !1254, size: 64, offset: 384)
!1963 = !DIDerivedType(tag: DW_TAG_member, name: "base_accesses", scope: !1956, file: !135, line: 2437, baseType: !1640, size: 64, offset: 448)
!1964 = !DIDerivedType(tag: DW_TAG_member, name: "inheritance", scope: !1956, file: !135, line: 2438, baseType: !1254, size: 64, offset: 512)
!1965 = !DIDerivedType(tag: DW_TAG_member, name: "vtt_subvtt", scope: !1956, file: !135, line: 2440, baseType: !1254, size: 64, offset: 576)
!1966 = !DIDerivedType(tag: DW_TAG_member, name: "vtt_vptr", scope: !1956, file: !135, line: 2441, baseType: !1254, size: 64, offset: 640)
!1967 = !DIDerivedType(tag: DW_TAG_member, name: "base_binfos", scope: !1956, file: !135, line: 2443, baseType: !1968, size: 128, offset: 704)
!1968 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_none", file: !135, line: 182, baseType: !1969)
!1969 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_none", file: !135, line: 182, size: 128, elements: !1970)
!1970 = !{!1971}
!1971 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1969, file: !135, line: 182, baseType: !1645, size: 128)
!1972 = !DIDerivedType(tag: DW_TAG_member, name: "stmt_list", scope: !1256, file: !135, line: 3401, baseType: !1973, size: 320)
!1973 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_statement_list", file: !135, line: 3327, size: 320, elements: !1974)
!1974 = !{!1975, !1976, !1983}
!1975 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1973, file: !135, line: 3329, baseType: !1292, size: 192)
!1976 = !DIDerivedType(tag: DW_TAG_member, name: "head", scope: !1973, file: !135, line: 3330, baseType: !1977, size: 64, offset: 192)
!1977 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1978, size: 64)
!1978 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_statement_list_node", file: !135, line: 3320, size: 192, elements: !1979)
!1979 = !{!1980, !1981, !1982}
!1980 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1978, file: !135, line: 3322, baseType: !1977, size: 64)
!1981 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1978, file: !135, line: 3323, baseType: !1977, size: 64, offset: 64)
!1982 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !1978, file: !135, line: 3324, baseType: !1254, size: 64, offset: 128)
!1983 = !DIDerivedType(tag: DW_TAG_member, name: "tail", scope: !1973, file: !135, line: 3331, baseType: !1977, size: 64, offset: 256)
!1984 = !DIDerivedType(tag: DW_TAG_member, name: "constructor", scope: !1256, file: !135, line: 3402, baseType: !1985, size: 256)
!1985 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_constructor", file: !135, line: 1540, size: 256, elements: !1986)
!1986 = !{!1987, !1988}
!1987 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1985, file: !135, line: 1541, baseType: !1292, size: 192)
!1988 = !DIDerivedType(tag: DW_TAG_member, name: "elts", scope: !1985, file: !135, line: 1542, baseType: !1989, size: 64, offset: 192)
!1989 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1990, size: 64)
!1990 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_constructor_elt_gc", file: !135, line: 1538, baseType: !1991)
!1991 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_constructor_elt_gc", file: !135, line: 1538, size: 192, elements: !1992)
!1992 = !{!1993}
!1993 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1991, file: !135, line: 1538, baseType: !1994, size: 192)
!1994 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_constructor_elt_base", file: !135, line: 1537, baseType: !1995)
!1995 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_constructor_elt_base", file: !135, line: 1537, size: 192, elements: !1996)
!1996 = !{!1997, !1998, !1999}
!1997 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1995, file: !135, line: 1537, baseType: !7, size: 32)
!1998 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1995, file: !135, line: 1537, baseType: !7, size: 32, offset: 32)
!1999 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1995, file: !135, line: 1537, baseType: !2000, size: 128, offset: 64)
!2000 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2001, size: 128, elements: !1234)
!2001 = !DIDerivedType(tag: DW_TAG_typedef, name: "constructor_elt", file: !135, line: 1535, baseType: !2002)
!2002 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "constructor_elt_d", file: !135, line: 1532, size: 128, elements: !2003)
!2003 = !{!2004, !2005}
!2004 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !2002, file: !135, line: 1533, baseType: !1254, size: 64)
!2005 = !DIDerivedType(tag: DW_TAG_member, name: "value", scope: !2002, file: !135, line: 1534, baseType: !1254, size: 64, offset: 64)
!2006 = !DIDerivedType(tag: DW_TAG_member, name: "omp_clause", scope: !1256, file: !135, line: 3403, baseType: !2007, size: 512)
!2007 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_omp_clause", file: !135, line: 1938, size: 512, elements: !2008)
!2008 = !{!2009, !2010, !2011, !2012, !2018, !2019, !2020}
!2009 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2007, file: !135, line: 1939, baseType: !1292, size: 192)
!2010 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !2007, file: !135, line: 1940, baseType: !1149, size: 32, offset: 192)
!2011 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !2007, file: !135, line: 1941, baseType: !352, size: 32, offset: 224)
!2012 = !DIDerivedType(tag: DW_TAG_member, name: "subcode", scope: !2007, file: !135, line: 1946, baseType: !2013, size: 32, offset: 256)
!2013 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "omp_clause_subcode", file: !135, line: 1942, size: 32, elements: !2014)
!2014 = !{!2015, !2016, !2017}
!2015 = !DIDerivedType(tag: DW_TAG_member, name: "default_kind", scope: !2013, file: !135, line: 1943, baseType: !370, size: 32)
!2016 = !DIDerivedType(tag: DW_TAG_member, name: "schedule_kind", scope: !2013, file: !135, line: 1944, baseType: !377, size: 32)
!2017 = !DIDerivedType(tag: DW_TAG_member, name: "reduction_code", scope: !2013, file: !135, line: 1945, baseType: !134, size: 32)
!2018 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reduction_init", scope: !2007, file: !135, line: 1950, baseType: !1181, size: 64, offset: 320)
!2019 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reduction_merge", scope: !2007, file: !135, line: 1951, baseType: !1181, size: 64, offset: 384)
!2020 = !DIDerivedType(tag: DW_TAG_member, name: "ops", scope: !2007, file: !135, line: 1953, baseType: !1651, size: 64, offset: 448)
!2021 = !DIDerivedType(tag: DW_TAG_member, name: "optimization", scope: !1256, file: !135, line: 3404, baseType: !2022, size: 1664)
!2022 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_optimization_option", file: !135, line: 3337, size: 1664, elements: !2023)
!2023 = !{!2024, !2025}
!2024 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2022, file: !135, line: 3338, baseType: !1292, size: 192)
!2025 = !DIDerivedType(tag: DW_TAG_member, name: "opts", scope: !2022, file: !135, line: 3341, baseType: !2026, size: 1472, offset: 192)
!2026 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cl_optimization", file: !2027, line: 410, size: 1472, elements: !2028)
!2027 = !DIFile(filename: "./options.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2028 = !{!2029, !2030, !2031, !2032, !2033, !2034, !2035, !2036, !2037, !2039, !2040, !2041, !2042, !2043, !2044, !2045, !2046, !2047, !2048, !2049, !2050, !2051, !2052, !2053, !2054, !2055, !2056, !2057, !2058, !2059, !2060, !2061, !2062, !2063, !2064, !2065, !2066, !2067, !2068, !2069, !2070, !2071, !2072, !2073, !2074, !2075, !2076, !2077, !2078, !2079, !2080, !2081, !2082, !2083, !2084, !2085, !2086, !2087, !2088, !2089, !2090, !2091, !2092, !2093, !2094, !2095, !2096, !2097, !2098, !2099, !2100, !2101, !2102, !2103, !2104, !2105, !2106, !2107, !2108, !2109, !2110, !2111, !2112, !2113, !2114, !2115, !2116, !2117, !2118, !2119, !2120, !2121, !2122, !2123, !2124, !2125, !2126, !2127, !2128, !2129, !2130, !2131, !2132, !2133, !2134, !2135, !2136, !2137, !2138, !2139, !2140, !2141, !2142, !2143, !2144, !2145, !2146, !2147, !2148, !2149, !2150, !2151, !2152, !2153, !2154, !2155, !2156, !2157, !2158, !2159, !2160, !2161, !2162, !2163, !2164, !2165, !2166, !2167, !2168, !2169, !2170, !2171, !2172, !2173, !2174, !2175, !2176, !2177, !2178, !2179, !2180, !2181, !2182, !2183, !2184, !2185, !2186, !2187, !2188, !2189, !2190, !2191, !2192}
!2029 = !DIDerivedType(tag: DW_TAG_member, name: "align_functions", scope: !2026, file: !2027, line: 412, baseType: !1064, size: 32)
!2030 = !DIDerivedType(tag: DW_TAG_member, name: "align_jumps", scope: !2026, file: !2027, line: 413, baseType: !1064, size: 32, offset: 32)
!2031 = !DIDerivedType(tag: DW_TAG_member, name: "align_labels", scope: !2026, file: !2027, line: 414, baseType: !1064, size: 32, offset: 64)
!2032 = !DIDerivedType(tag: DW_TAG_member, name: "align_loops", scope: !2026, file: !2027, line: 415, baseType: !1064, size: 32, offset: 96)
!2033 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_stalled_insns", scope: !2026, file: !2027, line: 416, baseType: !1064, size: 32, offset: 128)
!2034 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_stalled_insns_dep", scope: !2026, file: !2027, line: 417, baseType: !1064, size: 32, offset: 160)
!2035 = !DIDerivedType(tag: DW_TAG_member, name: "optimize", scope: !2026, file: !2027, line: 418, baseType: !1367, size: 8, offset: 192)
!2036 = !DIDerivedType(tag: DW_TAG_member, name: "optimize_size", scope: !2026, file: !2027, line: 419, baseType: !1367, size: 8, offset: 200)
!2037 = !DIDerivedType(tag: DW_TAG_member, name: "flag_argument_noalias", scope: !2026, file: !2027, line: 420, baseType: !2038, size: 8, offset: 208)
!2038 = !DIBasicType(name: "signed char", size: 8, encoding: DW_ATE_signed_char)
!2039 = !DIDerivedType(tag: DW_TAG_member, name: "flag_asynchronous_unwind_tables", scope: !2026, file: !2027, line: 421, baseType: !2038, size: 8, offset: 216)
!2040 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_on_count_reg", scope: !2026, file: !2027, line: 422, baseType: !2038, size: 8, offset: 224)
!2041 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_probabilities", scope: !2026, file: !2027, line: 423, baseType: !2038, size: 8, offset: 232)
!2042 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_target_load_optimize", scope: !2026, file: !2027, line: 424, baseType: !2038, size: 8, offset: 240)
!2043 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_target_load_optimize2", scope: !2026, file: !2027, line: 425, baseType: !2038, size: 8, offset: 248)
!2044 = !DIDerivedType(tag: DW_TAG_member, name: "flag_btr_bb_exclusive", scope: !2026, file: !2027, line: 426, baseType: !2038, size: 8, offset: 256)
!2045 = !DIDerivedType(tag: DW_TAG_member, name: "flag_caller_saves", scope: !2026, file: !2027, line: 427, baseType: !2038, size: 8, offset: 264)
!2046 = !DIDerivedType(tag: DW_TAG_member, name: "flag_no_common", scope: !2026, file: !2027, line: 428, baseType: !2038, size: 8, offset: 272)
!2047 = !DIDerivedType(tag: DW_TAG_member, name: "flag_conserve_stack", scope: !2026, file: !2027, line: 429, baseType: !2038, size: 8, offset: 280)
!2048 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cprop_registers", scope: !2026, file: !2027, line: 430, baseType: !2038, size: 8, offset: 288)
!2049 = !DIDerivedType(tag: DW_TAG_member, name: "flag_crossjumping", scope: !2026, file: !2027, line: 431, baseType: !2038, size: 8, offset: 296)
!2050 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cse_follow_jumps", scope: !2026, file: !2027, line: 432, baseType: !2038, size: 8, offset: 304)
!2051 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cx_fortran_rules", scope: !2026, file: !2027, line: 433, baseType: !2038, size: 8, offset: 312)
!2052 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cx_limited_range", scope: !2026, file: !2027, line: 434, baseType: !2038, size: 8, offset: 320)
!2053 = !DIDerivedType(tag: DW_TAG_member, name: "flag_data_sections", scope: !2026, file: !2027, line: 435, baseType: !2038, size: 8, offset: 328)
!2054 = !DIDerivedType(tag: DW_TAG_member, name: "flag_dce", scope: !2026, file: !2027, line: 436, baseType: !2038, size: 8, offset: 336)
!2055 = !DIDerivedType(tag: DW_TAG_member, name: "flag_defer_pop", scope: !2026, file: !2027, line: 437, baseType: !2038, size: 8, offset: 344)
!2056 = !DIDerivedType(tag: DW_TAG_member, name: "flag_delayed_branch", scope: !2026, file: !2027, line: 438, baseType: !2038, size: 8, offset: 352)
!2057 = !DIDerivedType(tag: DW_TAG_member, name: "flag_delete_null_pointer_checks", scope: !2026, file: !2027, line: 439, baseType: !2038, size: 8, offset: 360)
!2058 = !DIDerivedType(tag: DW_TAG_member, name: "flag_dse", scope: !2026, file: !2027, line: 440, baseType: !2038, size: 8, offset: 368)
!2059 = !DIDerivedType(tag: DW_TAG_member, name: "flag_early_inlining", scope: !2026, file: !2027, line: 441, baseType: !2038, size: 8, offset: 376)
!2060 = !DIDerivedType(tag: DW_TAG_member, name: "flag_exceptions", scope: !2026, file: !2027, line: 442, baseType: !2038, size: 8, offset: 384)
!2061 = !DIDerivedType(tag: DW_TAG_member, name: "flag_expensive_optimizations", scope: !2026, file: !2027, line: 443, baseType: !2038, size: 8, offset: 392)
!2062 = !DIDerivedType(tag: DW_TAG_member, name: "flag_finite_math_only", scope: !2026, file: !2027, line: 444, baseType: !2038, size: 8, offset: 400)
!2063 = !DIDerivedType(tag: DW_TAG_member, name: "flag_float_store", scope: !2026, file: !2027, line: 445, baseType: !2038, size: 8, offset: 408)
!2064 = !DIDerivedType(tag: DW_TAG_member, name: "flag_forward_propagate", scope: !2026, file: !2027, line: 446, baseType: !2038, size: 8, offset: 416)
!2065 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse", scope: !2026, file: !2027, line: 447, baseType: !2038, size: 8, offset: 424)
!2066 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_after_reload", scope: !2026, file: !2027, line: 448, baseType: !2038, size: 8, offset: 432)
!2067 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_las", scope: !2026, file: !2027, line: 449, baseType: !2038, size: 8, offset: 440)
!2068 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_lm", scope: !2026, file: !2027, line: 450, baseType: !2038, size: 8, offset: 448)
!2069 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_sm", scope: !2026, file: !2027, line: 451, baseType: !2038, size: 8, offset: 456)
!2070 = !DIDerivedType(tag: DW_TAG_member, name: "flag_graphite_identity", scope: !2026, file: !2027, line: 452, baseType: !2038, size: 8, offset: 464)
!2071 = !DIDerivedType(tag: DW_TAG_member, name: "flag_guess_branch_prob", scope: !2026, file: !2027, line: 453, baseType: !2038, size: 8, offset: 472)
!2072 = !DIDerivedType(tag: DW_TAG_member, name: "flag_if_conversion", scope: !2026, file: !2027, line: 454, baseType: !2038, size: 8, offset: 480)
!2073 = !DIDerivedType(tag: DW_TAG_member, name: "flag_if_conversion2", scope: !2026, file: !2027, line: 455, baseType: !2038, size: 8, offset: 488)
!2074 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_functions", scope: !2026, file: !2027, line: 456, baseType: !2038, size: 8, offset: 496)
!2075 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_functions_called_once", scope: !2026, file: !2027, line: 457, baseType: !2038, size: 8, offset: 504)
!2076 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_small_functions", scope: !2026, file: !2027, line: 458, baseType: !2038, size: 8, offset: 512)
!2077 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_cp", scope: !2026, file: !2027, line: 459, baseType: !2038, size: 8, offset: 520)
!2078 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_cp_clone", scope: !2026, file: !2027, line: 460, baseType: !2038, size: 8, offset: 528)
!2079 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_matrix_reorg", scope: !2026, file: !2027, line: 461, baseType: !2038, size: 8, offset: 536)
!2080 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_pta", scope: !2026, file: !2027, line: 462, baseType: !2038, size: 8, offset: 544)
!2081 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_pure_const", scope: !2026, file: !2027, line: 463, baseType: !2038, size: 8, offset: 552)
!2082 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_reference", scope: !2026, file: !2027, line: 464, baseType: !2038, size: 8, offset: 560)
!2083 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_sra", scope: !2026, file: !2027, line: 465, baseType: !2038, size: 8, offset: 568)
!2084 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_type_escape", scope: !2026, file: !2027, line: 466, baseType: !2038, size: 8, offset: 576)
!2085 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ivopts", scope: !2026, file: !2027, line: 467, baseType: !2038, size: 8, offset: 584)
!2086 = !DIDerivedType(tag: DW_TAG_member, name: "flag_jump_tables", scope: !2026, file: !2027, line: 468, baseType: !2038, size: 8, offset: 592)
!2087 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_block", scope: !2026, file: !2027, line: 469, baseType: !2038, size: 8, offset: 600)
!2088 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_interchange", scope: !2026, file: !2027, line: 470, baseType: !2038, size: 8, offset: 608)
!2089 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_parallelize_all", scope: !2026, file: !2027, line: 471, baseType: !2038, size: 8, offset: 616)
!2090 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_strip_mine", scope: !2026, file: !2027, line: 472, baseType: !2038, size: 8, offset: 624)
!2091 = !DIDerivedType(tag: DW_TAG_member, name: "flag_lto_report", scope: !2026, file: !2027, line: 473, baseType: !2038, size: 8, offset: 632)
!2092 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ltrans", scope: !2026, file: !2027, line: 474, baseType: !2038, size: 8, offset: 640)
!2093 = !DIDerivedType(tag: DW_TAG_member, name: "flag_errno_math", scope: !2026, file: !2027, line: 475, baseType: !2038, size: 8, offset: 648)
!2094 = !DIDerivedType(tag: DW_TAG_member, name: "flag_merge_constants", scope: !2026, file: !2027, line: 476, baseType: !2038, size: 8, offset: 656)
!2095 = !DIDerivedType(tag: DW_TAG_member, name: "flag_modulo_sched", scope: !2026, file: !2027, line: 477, baseType: !2038, size: 8, offset: 664)
!2096 = !DIDerivedType(tag: DW_TAG_member, name: "flag_move_loop_invariants", scope: !2026, file: !2027, line: 478, baseType: !2038, size: 8, offset: 672)
!2097 = !DIDerivedType(tag: DW_TAG_member, name: "flag_non_call_exceptions", scope: !2026, file: !2027, line: 479, baseType: !2038, size: 8, offset: 680)
!2098 = !DIDerivedType(tag: DW_TAG_member, name: "flag_omit_frame_pointer", scope: !2026, file: !2027, line: 480, baseType: !2038, size: 8, offset: 688)
!2099 = !DIDerivedType(tag: DW_TAG_member, name: "flag_regmove", scope: !2026, file: !2027, line: 481, baseType: !2038, size: 8, offset: 696)
!2100 = !DIDerivedType(tag: DW_TAG_member, name: "flag_optimize_sibling_calls", scope: !2026, file: !2027, line: 482, baseType: !2038, size: 8, offset: 704)
!2101 = !DIDerivedType(tag: DW_TAG_member, name: "flag_pack_struct", scope: !2026, file: !2027, line: 483, baseType: !2038, size: 8, offset: 712)
!2102 = !DIDerivedType(tag: DW_TAG_member, name: "flag_peel_loops", scope: !2026, file: !2027, line: 484, baseType: !2038, size: 8, offset: 720)
!2103 = !DIDerivedType(tag: DW_TAG_member, name: "flag_no_peephole", scope: !2026, file: !2027, line: 485, baseType: !2038, size: 8, offset: 728)
!2104 = !DIDerivedType(tag: DW_TAG_member, name: "flag_peephole2", scope: !2026, file: !2027, line: 486, baseType: !2038, size: 8, offset: 736)
!2105 = !DIDerivedType(tag: DW_TAG_member, name: "flag_predictive_commoning", scope: !2026, file: !2027, line: 487, baseType: !2038, size: 8, offset: 744)
!2106 = !DIDerivedType(tag: DW_TAG_member, name: "flag_prefetch_loop_arrays", scope: !2026, file: !2027, line: 488, baseType: !2038, size: 8, offset: 752)
!2107 = !DIDerivedType(tag: DW_TAG_member, name: "flag_pcc_struct_return", scope: !2026, file: !2027, line: 489, baseType: !2038, size: 8, offset: 760)
!2108 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rename_registers", scope: !2026, file: !2027, line: 490, baseType: !2038, size: 8, offset: 768)
!2109 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_blocks", scope: !2026, file: !2027, line: 491, baseType: !2038, size: 8, offset: 776)
!2110 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_blocks_and_partition", scope: !2026, file: !2027, line: 492, baseType: !2038, size: 8, offset: 784)
!2111 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_functions", scope: !2026, file: !2027, line: 493, baseType: !2038, size: 8, offset: 792)
!2112 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rerun_cse_after_loop", scope: !2026, file: !2027, line: 494, baseType: !2038, size: 8, offset: 800)
!2113 = !DIDerivedType(tag: DW_TAG_member, name: "flag_resched_modulo_sched", scope: !2026, file: !2027, line: 495, baseType: !2038, size: 8, offset: 808)
!2114 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rounding_math", scope: !2026, file: !2027, line: 496, baseType: !2038, size: 8, offset: 816)
!2115 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_critical_path_heuristic", scope: !2026, file: !2027, line: 497, baseType: !2038, size: 8, offset: 824)
!2116 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_dep_count_heuristic", scope: !2026, file: !2027, line: 498, baseType: !2038, size: 8, offset: 832)
!2117 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_group_heuristic", scope: !2026, file: !2027, line: 499, baseType: !2038, size: 8, offset: 840)
!2118 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_interblock", scope: !2026, file: !2027, line: 500, baseType: !2038, size: 8, offset: 848)
!2119 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_last_insn_heuristic", scope: !2026, file: !2027, line: 501, baseType: !2038, size: 8, offset: 856)
!2120 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_pressure", scope: !2026, file: !2027, line: 502, baseType: !2038, size: 8, offset: 864)
!2121 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_rank_heuristic", scope: !2026, file: !2027, line: 503, baseType: !2038, size: 8, offset: 872)
!2122 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative", scope: !2026, file: !2027, line: 504, baseType: !2038, size: 8, offset: 880)
!2123 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_spec_insn_heuristic", scope: !2026, file: !2027, line: 505, baseType: !2038, size: 8, offset: 888)
!2124 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative_load", scope: !2026, file: !2027, line: 506, baseType: !2038, size: 8, offset: 896)
!2125 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative_load_dangerous", scope: !2026, file: !2027, line: 507, baseType: !2038, size: 8, offset: 904)
!2126 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched2_use_superblocks", scope: !2026, file: !2027, line: 508, baseType: !2038, size: 8, offset: 912)
!2127 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_insns", scope: !2026, file: !2027, line: 509, baseType: !2038, size: 8, offset: 920)
!2128 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_insns_after_reload", scope: !2026, file: !2027, line: 510, baseType: !2038, size: 8, offset: 928)
!2129 = !DIDerivedType(tag: DW_TAG_member, name: "flag_section_anchors", scope: !2026, file: !2027, line: 511, baseType: !2038, size: 8, offset: 936)
!2130 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_pipelining", scope: !2026, file: !2027, line: 512, baseType: !2038, size: 8, offset: 944)
!2131 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_pipelining_outer_loops", scope: !2026, file: !2027, line: 513, baseType: !2038, size: 8, offset: 952)
!2132 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_reschedule_pipelined", scope: !2026, file: !2027, line: 514, baseType: !2038, size: 8, offset: 960)
!2133 = !DIDerivedType(tag: DW_TAG_member, name: "flag_selective_scheduling", scope: !2026, file: !2027, line: 515, baseType: !2038, size: 8, offset: 968)
!2134 = !DIDerivedType(tag: DW_TAG_member, name: "flag_selective_scheduling2", scope: !2026, file: !2027, line: 516, baseType: !2038, size: 8, offset: 976)
!2135 = !DIDerivedType(tag: DW_TAG_member, name: "flag_signaling_nans", scope: !2026, file: !2027, line: 517, baseType: !2038, size: 8, offset: 984)
!2136 = !DIDerivedType(tag: DW_TAG_member, name: "flag_signed_zeros", scope: !2026, file: !2027, line: 518, baseType: !2038, size: 8, offset: 992)
!2137 = !DIDerivedType(tag: DW_TAG_member, name: "flag_single_precision_constant", scope: !2026, file: !2027, line: 519, baseType: !2038, size: 8, offset: 1000)
!2138 = !DIDerivedType(tag: DW_TAG_member, name: "flag_split_ivs_in_unroller", scope: !2026, file: !2027, line: 520, baseType: !2038, size: 8, offset: 1008)
!2139 = !DIDerivedType(tag: DW_TAG_member, name: "flag_split_wide_types", scope: !2026, file: !2027, line: 521, baseType: !2038, size: 8, offset: 1016)
!2140 = !DIDerivedType(tag: DW_TAG_member, name: "flag_strict_aliasing", scope: !2026, file: !2027, line: 522, baseType: !2038, size: 8, offset: 1024)
!2141 = !DIDerivedType(tag: DW_TAG_member, name: "flag_thread_jumps", scope: !2026, file: !2027, line: 523, baseType: !2038, size: 8, offset: 1032)
!2142 = !DIDerivedType(tag: DW_TAG_member, name: "flag_toplevel_reorder", scope: !2026, file: !2027, line: 524, baseType: !2038, size: 8, offset: 1040)
!2143 = !DIDerivedType(tag: DW_TAG_member, name: "flag_trapping_math", scope: !2026, file: !2027, line: 525, baseType: !2038, size: 8, offset: 1048)
!2144 = !DIDerivedType(tag: DW_TAG_member, name: "flag_trapv", scope: !2026, file: !2027, line: 526, baseType: !2038, size: 8, offset: 1056)
!2145 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_builtin_call_dce", scope: !2026, file: !2027, line: 527, baseType: !2038, size: 8, offset: 1064)
!2146 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ccp", scope: !2026, file: !2027, line: 528, baseType: !2038, size: 8, offset: 1072)
!2147 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ch", scope: !2026, file: !2027, line: 529, baseType: !2038, size: 8, offset: 1080)
!2148 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_copy_prop", scope: !2026, file: !2027, line: 530, baseType: !2038, size: 8, offset: 1088)
!2149 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_copyrename", scope: !2026, file: !2027, line: 531, baseType: !2038, size: 8, offset: 1096)
!2150 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_cselim", scope: !2026, file: !2027, line: 532, baseType: !2038, size: 8, offset: 1104)
!2151 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dce", scope: !2026, file: !2027, line: 533, baseType: !2038, size: 8, offset: 1112)
!2152 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dom", scope: !2026, file: !2027, line: 534, baseType: !2038, size: 8, offset: 1120)
!2153 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dse", scope: !2026, file: !2027, line: 535, baseType: !2038, size: 8, offset: 1128)
!2154 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_forwprop", scope: !2026, file: !2027, line: 536, baseType: !2038, size: 8, offset: 1136)
!2155 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_fre", scope: !2026, file: !2027, line: 537, baseType: !2038, size: 8, offset: 1144)
!2156 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_distribution", scope: !2026, file: !2027, line: 538, baseType: !2038, size: 8, offset: 1152)
!2157 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_im", scope: !2026, file: !2027, line: 539, baseType: !2038, size: 8, offset: 1160)
!2158 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_ivcanon", scope: !2026, file: !2027, line: 540, baseType: !2038, size: 8, offset: 1168)
!2159 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_linear", scope: !2026, file: !2027, line: 541, baseType: !2038, size: 8, offset: 1176)
!2160 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_optimize", scope: !2026, file: !2027, line: 542, baseType: !2038, size: 8, offset: 1184)
!2161 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_live_range_split", scope: !2026, file: !2027, line: 543, baseType: !2038, size: 8, offset: 1192)
!2162 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_phiprop", scope: !2026, file: !2027, line: 544, baseType: !2038, size: 8, offset: 1200)
!2163 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_pre", scope: !2026, file: !2027, line: 545, baseType: !2038, size: 8, offset: 1208)
!2164 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_pta", scope: !2026, file: !2027, line: 546, baseType: !2038, size: 8, offset: 1216)
!2165 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_reassoc", scope: !2026, file: !2027, line: 547, baseType: !2038, size: 8, offset: 1224)
!2166 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_scev_cprop", scope: !2026, file: !2027, line: 548, baseType: !2038, size: 8, offset: 1232)
!2167 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_sink", scope: !2026, file: !2027, line: 549, baseType: !2038, size: 8, offset: 1240)
!2168 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_slp_vectorize", scope: !2026, file: !2027, line: 550, baseType: !2038, size: 8, offset: 1248)
!2169 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_sra", scope: !2026, file: !2027, line: 551, baseType: !2038, size: 8, offset: 1256)
!2170 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_switch_conversion", scope: !2026, file: !2027, line: 552, baseType: !2038, size: 8, offset: 1264)
!2171 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ter", scope: !2026, file: !2027, line: 553, baseType: !2038, size: 8, offset: 1272)
!2172 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vect_loop_version", scope: !2026, file: !2027, line: 554, baseType: !2038, size: 8, offset: 1280)
!2173 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vectorize", scope: !2026, file: !2027, line: 555, baseType: !2038, size: 8, offset: 1288)
!2174 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vrp", scope: !2026, file: !2027, line: 556, baseType: !2038, size: 8, offset: 1296)
!2175 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unit_at_a_time", scope: !2026, file: !2027, line: 557, baseType: !2038, size: 8, offset: 1304)
!2176 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unroll_all_loops", scope: !2026, file: !2027, line: 558, baseType: !2038, size: 8, offset: 1312)
!2177 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unroll_loops", scope: !2026, file: !2027, line: 559, baseType: !2038, size: 8, offset: 1320)
!2178 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unsafe_loop_optimizations", scope: !2026, file: !2027, line: 560, baseType: !2038, size: 8, offset: 1328)
!2179 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unsafe_math_optimizations", scope: !2026, file: !2027, line: 561, baseType: !2038, size: 8, offset: 1336)
!2180 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unswitch_loops", scope: !2026, file: !2027, line: 562, baseType: !2038, size: 8, offset: 1344)
!2181 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unwind_tables", scope: !2026, file: !2027, line: 563, baseType: !2038, size: 8, offset: 1352)
!2182 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking", scope: !2026, file: !2027, line: 564, baseType: !2038, size: 8, offset: 1360)
!2183 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_assignments", scope: !2026, file: !2027, line: 565, baseType: !2038, size: 8, offset: 1368)
!2184 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_assignments_toggle", scope: !2026, file: !2027, line: 566, baseType: !2038, size: 8, offset: 1376)
!2185 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_uninit", scope: !2026, file: !2027, line: 567, baseType: !2038, size: 8, offset: 1384)
!2186 = !DIDerivedType(tag: DW_TAG_member, name: "flag_variable_expansion_in_unroller", scope: !2026, file: !2027, line: 568, baseType: !2038, size: 8, offset: 1392)
!2187 = !DIDerivedType(tag: DW_TAG_member, name: "flag_vect_cost_model", scope: !2026, file: !2027, line: 569, baseType: !2038, size: 8, offset: 1400)
!2188 = !DIDerivedType(tag: DW_TAG_member, name: "flag_value_profile_transformations", scope: !2026, file: !2027, line: 570, baseType: !2038, size: 8, offset: 1408)
!2189 = !DIDerivedType(tag: DW_TAG_member, name: "flag_web", scope: !2026, file: !2027, line: 571, baseType: !2038, size: 8, offset: 1416)
!2190 = !DIDerivedType(tag: DW_TAG_member, name: "flag_whole_program", scope: !2026, file: !2027, line: 572, baseType: !2038, size: 8, offset: 1424)
!2191 = !DIDerivedType(tag: DW_TAG_member, name: "flag_wpa", scope: !2026, file: !2027, line: 573, baseType: !2038, size: 8, offset: 1432)
!2192 = !DIDerivedType(tag: DW_TAG_member, name: "flag_wrapv", scope: !2026, file: !2027, line: 574, baseType: !2038, size: 8, offset: 1440)
!2193 = !DIDerivedType(tag: DW_TAG_member, name: "target_option", scope: !1256, file: !135, line: 3405, baseType: !2194, size: 384)
!2194 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_target_option", file: !135, line: 3352, size: 384, elements: !2195)
!2195 = !{!2196, !2197}
!2196 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2194, file: !135, line: 3353, baseType: !1292, size: 192)
!2197 = !DIDerivedType(tag: DW_TAG_member, name: "opts", scope: !2194, file: !135, line: 3356, baseType: !2198, size: 192, offset: 192)
!2198 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cl_target_option", file: !2027, line: 578, size: 192, elements: !2199)
!2199 = !{!2200, !2201, !2202, !2203, !2204, !2205, !2206, !2207, !2208, !2209, !2210}
!2200 = !DIDerivedType(tag: DW_TAG_member, name: "ix86_isa_flags_explicit", scope: !2198, file: !2027, line: 580, baseType: !1064, size: 32)
!2201 = !DIDerivedType(tag: DW_TAG_member, name: "target_flags_explicit", scope: !2198, file: !2027, line: 581, baseType: !1064, size: 32, offset: 32)
!2202 = !DIDerivedType(tag: DW_TAG_member, name: "target_flags", scope: !2198, file: !2027, line: 582, baseType: !1064, size: 32, offset: 64)
!2203 = !DIDerivedType(tag: DW_TAG_member, name: "ix86_isa_flags", scope: !2198, file: !2027, line: 583, baseType: !1064, size: 32, offset: 96)
!2204 = !DIDerivedType(tag: DW_TAG_member, name: "arch", scope: !2198, file: !2027, line: 584, baseType: !1367, size: 8, offset: 128)
!2205 = !DIDerivedType(tag: DW_TAG_member, name: "arch_specified", scope: !2198, file: !2027, line: 585, baseType: !1367, size: 8, offset: 136)
!2206 = !DIDerivedType(tag: DW_TAG_member, name: "branch_cost", scope: !2198, file: !2027, line: 586, baseType: !1367, size: 8, offset: 144)
!2207 = !DIDerivedType(tag: DW_TAG_member, name: "fpmath", scope: !2198, file: !2027, line: 587, baseType: !1367, size: 8, offset: 152)
!2208 = !DIDerivedType(tag: DW_TAG_member, name: "schedule", scope: !2198, file: !2027, line: 588, baseType: !1367, size: 8, offset: 160)
!2209 = !DIDerivedType(tag: DW_TAG_member, name: "tune", scope: !2198, file: !2027, line: 589, baseType: !1367, size: 8, offset: 168)
!2210 = !DIDerivedType(tag: DW_TAG_member, name: "tune_defaulted", scope: !2198, file: !2027, line: 590, baseType: !1367, size: 8, offset: 176)
!2211 = !DIDerivedType(tag: DW_TAG_member, name: "rt_bb", scope: !1218, file: !1200, line: 178, baseType: !1155, size: 64)
!2212 = !DIDerivedType(tag: DW_TAG_member, name: "rt_mem", scope: !1218, file: !1200, line: 179, baseType: !2213, size: 64)
!2213 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2214, size: 64)
!2214 = !DIDerivedType(tag: DW_TAG_typedef, name: "mem_attrs", file: !1200, line: 150, baseType: !2215)
!2215 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "mem_attrs", file: !1200, line: 142, size: 320, elements: !2216)
!2216 = !{!2217, !2218, !2219, !2220, !2221, !2222}
!2217 = !DIDerivedType(tag: DW_TAG_member, name: "expr", scope: !2215, file: !1200, line: 144, baseType: !1254, size: 64)
!2218 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2215, file: !1200, line: 145, baseType: !1197, size: 64, offset: 64)
!2219 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2215, file: !1200, line: 146, baseType: !1197, size: 64, offset: 128)
!2220 = !DIDerivedType(tag: DW_TAG_member, name: "alias", scope: !2215, file: !1200, line: 147, baseType: !1886, size: 32, offset: 192)
!2221 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !2215, file: !1200, line: 148, baseType: !7, size: 32, offset: 224)
!2222 = !DIDerivedType(tag: DW_TAG_member, name: "addrspace", scope: !2215, file: !1200, line: 149, baseType: !1367, size: 8, offset: 256)
!2223 = !DIDerivedType(tag: DW_TAG_member, name: "rt_reg", scope: !1218, file: !1200, line: 180, baseType: !2224, size: 64)
!2224 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2225, size: 64)
!2225 = !DIDerivedType(tag: DW_TAG_typedef, name: "reg_attrs", file: !1200, line: 162, baseType: !2226)
!2226 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "reg_attrs", file: !1200, line: 159, size: 128, elements: !2227)
!2227 = !{!2228, !2229}
!2228 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !2226, file: !1200, line: 160, baseType: !1254, size: 64)
!2229 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2226, file: !1200, line: 161, baseType: !1063, size: 64, offset: 64)
!2230 = !DIDerivedType(tag: DW_TAG_member, name: "rt_constant", scope: !1218, file: !1200, line: 181, baseType: !2231, size: 64)
!2231 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2232, size: 64)
!2232 = !DICompositeType(tag: DW_TAG_structure_type, name: "constant_descriptor_rtx", file: !1200, line: 181, flags: DIFlagFwdDecl)
!2233 = !DIDerivedType(tag: DW_TAG_member, name: "hwint", scope: !1213, file: !1200, line: 317, baseType: !2234, size: 64)
!2234 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1063, size: 64, elements: !1234)
!2235 = !DIDerivedType(tag: DW_TAG_member, name: "block_sym", scope: !1213, file: !1200, line: 318, baseType: !2236, size: 320)
!2236 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "block_symbol", file: !1200, line: 188, size: 320, elements: !2237)
!2237 = !{!2238, !2240, !2263}
!2238 = !DIDerivedType(tag: DW_TAG_member, name: "fld", scope: !2236, file: !1200, line: 190, baseType: !2239, size: 192)
!2239 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1217, size: 192, elements: !1325)
!2240 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !2236, file: !1200, line: 193, baseType: !2241, size: 64, offset: 192)
!2241 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2242, size: 64)
!2242 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "object_block", file: !1200, line: 206, size: 320, elements: !2243)
!2243 = !{!2244, !2248, !2249, !2250, !2262}
!2244 = !DIDerivedType(tag: DW_TAG_member, name: "sect", scope: !2242, file: !1200, line: 208, baseType: !2245, size: 64)
!2245 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2246, size: 64)
!2246 = !DIDerivedType(tag: DW_TAG_typedef, name: "section", file: !1070, line: 62, baseType: !2247)
!2247 = !DICompositeType(tag: DW_TAG_union_type, name: "section", file: !1070, line: 61, flags: DIFlagFwdDecl)
!2248 = !DIDerivedType(tag: DW_TAG_member, name: "alignment", scope: !2242, file: !1200, line: 211, baseType: !7, size: 32, offset: 64)
!2249 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2242, file: !1200, line: 214, baseType: !1063, size: 64, offset: 128)
!2250 = !DIDerivedType(tag: DW_TAG_member, name: "objects", scope: !2242, file: !1200, line: 224, baseType: !2251, size: 64, offset: 192)
!2251 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2252, size: 64)
!2252 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_rtx_gc", file: !1200, line: 202, baseType: !2253)
!2253 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_rtx_gc", file: !1200, line: 202, size: 128, elements: !2254)
!2254 = !{!2255}
!2255 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2253, file: !1200, line: 202, baseType: !2256, size: 128)
!2256 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_rtx_base", file: !1200, line: 200, baseType: !2257)
!2257 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_rtx_base", file: !1200, line: 200, size: 128, elements: !2258)
!2258 = !{!2259, !2260, !2261}
!2259 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2257, file: !1200, line: 200, baseType: !7, size: 32)
!2260 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2257, file: !1200, line: 200, baseType: !7, size: 32, offset: 32)
!2261 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2257, file: !1200, line: 200, baseType: !1233, size: 64, offset: 64)
!2262 = !DIDerivedType(tag: DW_TAG_member, name: "anchors", scope: !2242, file: !1200, line: 234, baseType: !2251, size: 64, offset: 256)
!2263 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2236, file: !1200, line: 197, baseType: !1063, size: 64, offset: 256)
!2264 = !DIDerivedType(tag: DW_TAG_member, name: "rv", scope: !1213, file: !1200, line: 319, baseType: !1314, size: 256)
!2265 = !DIDerivedType(tag: DW_TAG_member, name: "fv", scope: !1213, file: !1200, line: 320, baseType: !1333, size: 192)
!2266 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !1173, file: !337, line: 134, baseType: !1068, size: 64, offset: 192)
!2267 = !DIDerivedType(tag: DW_TAG_member, name: "goto_block", scope: !1173, file: !337, line: 137, baseType: !1254, size: 64, offset: 256)
!2268 = !DIDerivedType(tag: DW_TAG_member, name: "goto_locus", scope: !1173, file: !337, line: 138, baseType: !1149, size: 32, offset: 320)
!2269 = !DIDerivedType(tag: DW_TAG_member, name: "dest_idx", scope: !1173, file: !337, line: 142, baseType: !7, size: 32, offset: 352)
!2270 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1173, file: !337, line: 144, baseType: !1064, size: 32, offset: 384)
!2271 = !DIDerivedType(tag: DW_TAG_member, name: "probability", scope: !1173, file: !337, line: 145, baseType: !1064, size: 32, offset: 416)
!2272 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !1173, file: !337, line: 146, baseType: !1062, size: 64, offset: 448)
!2273 = !DIDerivedType(tag: DW_TAG_member, name: "succs", scope: !1156, file: !337, line: 220, baseType: !1159, size: 64, offset: 64)
!2274 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !1156, file: !337, line: 223, baseType: !1068, size: 64, offset: 128)
!2275 = !DIDerivedType(tag: DW_TAG_member, name: "loop_father", scope: !1156, file: !337, line: 226, baseType: !2276, size: 64, offset: 192)
!2276 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2277, size: 64)
!2277 = !DICompositeType(tag: DW_TAG_structure_type, name: "loop", file: !337, line: 185, flags: DIFlagFwdDecl)
!2278 = !DIDerivedType(tag: DW_TAG_member, name: "dom", scope: !1156, file: !337, line: 229, baseType: !2279, size: 128, offset: 256)
!2279 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2280, size: 128, elements: !1087)
!2280 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2281, size: 64)
!2281 = !DICompositeType(tag: DW_TAG_structure_type, name: "et_node", file: !337, line: 229, flags: DIFlagFwdDecl)
!2282 = !DIDerivedType(tag: DW_TAG_member, name: "prev_bb", scope: !1156, file: !337, line: 232, baseType: !1155, size: 64, offset: 384)
!2283 = !DIDerivedType(tag: DW_TAG_member, name: "next_bb", scope: !1156, file: !337, line: 233, baseType: !1155, size: 64, offset: 448)
!2284 = !DIDerivedType(tag: DW_TAG_member, name: "il", scope: !1156, file: !337, line: 238, baseType: !2285, size: 64, offset: 512)
!2285 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "basic_block_il_dependent", file: !337, line: 235, size: 64, elements: !2286)
!2286 = !{!2287, !2293}
!2287 = !DIDerivedType(tag: DW_TAG_member, name: "gimple", scope: !2285, file: !337, line: 236, baseType: !2288, size: 64)
!2288 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2289, size: 64)
!2289 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_bb_info", file: !337, line: 273, size: 128, elements: !2290)
!2290 = !{!2291, !2292}
!2291 = !DIDerivedType(tag: DW_TAG_member, name: "seq", scope: !2289, file: !337, line: 275, baseType: !1181, size: 64)
!2292 = !DIDerivedType(tag: DW_TAG_member, name: "phi_nodes", scope: !2289, file: !337, line: 278, baseType: !1181, size: 64, offset: 64)
!2293 = !DIDerivedType(tag: DW_TAG_member, name: "rtl", scope: !2285, file: !337, line: 237, baseType: !2294, size: 64)
!2294 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2295, size: 64)
!2295 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtl_bb_info", file: !337, line: 259, size: 320, elements: !2296)
!2296 = !{!2297, !2298, !2299, !2300, !2301}
!2297 = !DIDerivedType(tag: DW_TAG_member, name: "head_", scope: !2295, file: !337, line: 261, baseType: !1197, size: 64)
!2298 = !DIDerivedType(tag: DW_TAG_member, name: "end_", scope: !2295, file: !337, line: 262, baseType: !1197, size: 64, offset: 64)
!2299 = !DIDerivedType(tag: DW_TAG_member, name: "header", scope: !2295, file: !337, line: 266, baseType: !1197, size: 64, offset: 128)
!2300 = !DIDerivedType(tag: DW_TAG_member, name: "footer", scope: !2295, file: !337, line: 267, baseType: !1197, size: 64, offset: 192)
!2301 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !2295, file: !337, line: 270, baseType: !1064, size: 32, offset: 256)
!2302 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !1156, file: !337, line: 241, baseType: !1062, size: 64, offset: 576)
!2303 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !1156, file: !337, line: 244, baseType: !1064, size: 32, offset: 640)
!2304 = !DIDerivedType(tag: DW_TAG_member, name: "loop_depth", scope: !1156, file: !337, line: 247, baseType: !1064, size: 32, offset: 672)
!2305 = !DIDerivedType(tag: DW_TAG_member, name: "frequency", scope: !1156, file: !337, line: 250, baseType: !1064, size: 32, offset: 704)
!2306 = !DIDerivedType(tag: DW_TAG_member, name: "discriminator", scope: !1156, file: !337, line: 253, baseType: !1064, size: 32, offset: 736)
!2307 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1156, file: !337, line: 256, baseType: !1064, size: 32, offset: 768)
!2308 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !1136, file: !757, line: 327, baseType: !1254, size: 64, offset: 192)
!2309 = !DIDerivedType(tag: DW_TAG_member, name: "gsops", scope: !1133, file: !757, line: 739, baseType: !2310, size: 448)
!2310 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_ops", file: !757, line: 350, size: 448, elements: !2311)
!2311 = !{!2312, !2318}
!2312 = !DIDerivedType(tag: DW_TAG_member, name: "opbase", scope: !2310, file: !757, line: 353, baseType: !2313, size: 384)
!2313 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_ops_base", file: !757, line: 333, size: 384, elements: !2314)
!2314 = !{!2315, !2316, !2317}
!2315 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2313, file: !757, line: 336, baseType: !1136, size: 256)
!2316 = !DIDerivedType(tag: DW_TAG_member, name: "def_ops", scope: !2313, file: !757, line: 343, baseType: !1757, size: 64, offset: 256)
!2317 = !DIDerivedType(tag: DW_TAG_member, name: "use_ops", scope: !2313, file: !757, line: 344, baseType: !1764, size: 64, offset: 320)
!2318 = !DIDerivedType(tag: DW_TAG_member, name: "op", scope: !2310, file: !757, line: 359, baseType: !1651, size: 64, offset: 384)
!2319 = !DIDerivedType(tag: DW_TAG_member, name: "gsmembase", scope: !1133, file: !757, line: 740, baseType: !2320, size: 512)
!2320 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_memory_ops_base", file: !757, line: 365, size: 512, elements: !2321)
!2321 = !{!2322, !2323, !2324}
!2322 = !DIDerivedType(tag: DW_TAG_member, name: "opbase", scope: !2320, file: !757, line: 368, baseType: !2313, size: 384)
!2323 = !DIDerivedType(tag: DW_TAG_member, name: "vdef", scope: !2320, file: !757, line: 373, baseType: !1254, size: 64, offset: 384)
!2324 = !DIDerivedType(tag: DW_TAG_member, name: "vuse", scope: !2320, file: !757, line: 374, baseType: !1254, size: 64, offset: 448)
!2325 = !DIDerivedType(tag: DW_TAG_member, name: "gsmem", scope: !1133, file: !757, line: 741, baseType: !2326, size: 576)
!2326 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_memory_ops", file: !757, line: 380, size: 576, elements: !2327)
!2327 = !{!2328, !2329}
!2328 = !DIDerivedType(tag: DW_TAG_member, name: "membase", scope: !2326, file: !757, line: 383, baseType: !2320, size: 512)
!2329 = !DIDerivedType(tag: DW_TAG_member, name: "op", scope: !2326, file: !757, line: 389, baseType: !1651, size: 64, offset: 512)
!2330 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !1133, file: !757, line: 742, baseType: !2331, size: 320)
!2331 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp", file: !757, line: 395, size: 320, elements: !2332)
!2332 = !{!2333, !2334}
!2333 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2331, file: !757, line: 397, baseType: !1136, size: 256)
!2334 = !DIDerivedType(tag: DW_TAG_member, name: "body", scope: !2331, file: !757, line: 400, baseType: !1181, size: 64, offset: 256)
!2335 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_bind", scope: !1133, file: !757, line: 743, baseType: !2336, size: 448)
!2336 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_bind", file: !757, line: 406, size: 448, elements: !2337)
!2337 = !{!2338, !2339, !2340, !2341}
!2338 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2336, file: !757, line: 408, baseType: !1136, size: 256)
!2339 = !DIDerivedType(tag: DW_TAG_member, name: "vars", scope: !2336, file: !757, line: 412, baseType: !1254, size: 64, offset: 256)
!2340 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !2336, file: !757, line: 420, baseType: !1254, size: 64, offset: 320)
!2341 = !DIDerivedType(tag: DW_TAG_member, name: "body", scope: !2336, file: !757, line: 423, baseType: !1181, size: 64, offset: 384)
!2342 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_catch", scope: !1133, file: !757, line: 744, baseType: !2343, size: 384)
!2343 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_catch", file: !757, line: 429, size: 384, elements: !2344)
!2344 = !{!2345, !2346, !2347}
!2345 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2343, file: !757, line: 431, baseType: !1136, size: 256)
!2346 = !DIDerivedType(tag: DW_TAG_member, name: "types", scope: !2343, file: !757, line: 434, baseType: !1254, size: 64, offset: 256)
!2347 = !DIDerivedType(tag: DW_TAG_member, name: "handler", scope: !2343, file: !757, line: 437, baseType: !1181, size: 64, offset: 320)
!2348 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_eh_filter", scope: !1133, file: !757, line: 745, baseType: !2349, size: 384)
!2349 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_eh_filter", file: !757, line: 443, size: 384, elements: !2350)
!2350 = !{!2351, !2352, !2353}
!2351 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2349, file: !757, line: 445, baseType: !1136, size: 256)
!2352 = !DIDerivedType(tag: DW_TAG_member, name: "types", scope: !2349, file: !757, line: 449, baseType: !1254, size: 64, offset: 256)
!2353 = !DIDerivedType(tag: DW_TAG_member, name: "failure", scope: !2349, file: !757, line: 453, baseType: !1181, size: 64, offset: 320)
!2354 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_eh_mnt", scope: !1133, file: !757, line: 746, baseType: !2355, size: 320)
!2355 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_eh_mnt", file: !757, line: 459, size: 320, elements: !2356)
!2356 = !{!2357, !2358}
!2357 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2355, file: !757, line: 461, baseType: !1136, size: 256)
!2358 = !DIDerivedType(tag: DW_TAG_member, name: "fndecl", scope: !2355, file: !757, line: 464, baseType: !1254, size: 64, offset: 256)
!2359 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_phi", scope: !1133, file: !757, line: 747, baseType: !2360, size: 768)
!2360 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_phi", file: !757, line: 469, size: 768, elements: !2361)
!2361 = !{!2362, !2363, !2364, !2365, !2366}
!2362 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2360, file: !757, line: 471, baseType: !1136, size: 256)
!2363 = !DIDerivedType(tag: DW_TAG_member, name: "capacity", scope: !2360, file: !757, line: 474, baseType: !7, size: 32, offset: 256)
!2364 = !DIDerivedType(tag: DW_TAG_member, name: "nargs", scope: !2360, file: !757, line: 475, baseType: !7, size: 32, offset: 288)
!2365 = !DIDerivedType(tag: DW_TAG_member, name: "result", scope: !2360, file: !757, line: 478, baseType: !1254, size: 64, offset: 320)
!2366 = !DIDerivedType(tag: DW_TAG_member, name: "args", scope: !2360, file: !757, line: 481, baseType: !2367, size: 384, offset: 384)
!2367 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2368, size: 384, elements: !1234)
!2368 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "phi_arg_d", file: !135, line: 1917, size: 384, elements: !2369)
!2369 = !{!2370, !2371, !2372}
!2370 = !DIDerivedType(tag: DW_TAG_member, name: "imm_use", scope: !2368, file: !135, line: 1920, baseType: !1769, size: 256)
!2371 = !DIDerivedType(tag: DW_TAG_member, name: "def", scope: !2368, file: !135, line: 1921, baseType: !1254, size: 64, offset: 256)
!2372 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !2368, file: !135, line: 1922, baseType: !1149, size: 32, offset: 320)
!2373 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_eh_ctrl", scope: !1133, file: !757, line: 748, baseType: !2374, size: 320)
!2374 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_eh_ctrl", file: !757, line: 487, size: 320, elements: !2375)
!2375 = !{!2376, !2377}
!2376 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2374, file: !757, line: 490, baseType: !1136, size: 256)
!2377 = !DIDerivedType(tag: DW_TAG_member, name: "region", scope: !2374, file: !757, line: 494, baseType: !1064, size: 32, offset: 256)
!2378 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_try", scope: !1133, file: !757, line: 749, baseType: !2379, size: 384)
!2379 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_try", file: !757, line: 500, size: 384, elements: !2380)
!2380 = !{!2381, !2382, !2383}
!2381 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2379, file: !757, line: 502, baseType: !1136, size: 256)
!2382 = !DIDerivedType(tag: DW_TAG_member, name: "eval", scope: !2379, file: !757, line: 506, baseType: !1181, size: 64, offset: 256)
!2383 = !DIDerivedType(tag: DW_TAG_member, name: "cleanup", scope: !2379, file: !757, line: 510, baseType: !1181, size: 64, offset: 320)
!2384 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_wce", scope: !1133, file: !757, line: 750, baseType: !2385, size: 320)
!2385 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_wce", file: !757, line: 529, size: 320, elements: !2386)
!2386 = !{!2387, !2388}
!2387 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2385, file: !757, line: 531, baseType: !1136, size: 256)
!2388 = !DIDerivedType(tag: DW_TAG_member, name: "cleanup", scope: !2385, file: !757, line: 540, baseType: !1181, size: 64, offset: 256)
!2389 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_asm", scope: !1133, file: !757, line: 751, baseType: !2390, size: 704)
!2390 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_asm", file: !757, line: 546, size: 704, elements: !2391)
!2391 = !{!2392, !2393, !2394, !2395, !2396, !2397, !2398}
!2392 = !DIDerivedType(tag: DW_TAG_member, name: "membase", scope: !2390, file: !757, line: 549, baseType: !2320, size: 512)
!2393 = !DIDerivedType(tag: DW_TAG_member, name: "string", scope: !2390, file: !757, line: 553, baseType: !1223, size: 64, offset: 512)
!2394 = !DIDerivedType(tag: DW_TAG_member, name: "ni", scope: !2390, file: !757, line: 557, baseType: !1367, size: 8, offset: 576)
!2395 = !DIDerivedType(tag: DW_TAG_member, name: "no", scope: !2390, file: !757, line: 558, baseType: !1367, size: 8, offset: 584)
!2396 = !DIDerivedType(tag: DW_TAG_member, name: "nc", scope: !2390, file: !757, line: 559, baseType: !1367, size: 8, offset: 592)
!2397 = !DIDerivedType(tag: DW_TAG_member, name: "nl", scope: !2390, file: !757, line: 560, baseType: !1367, size: 8, offset: 600)
!2398 = !DIDerivedType(tag: DW_TAG_member, name: "op", scope: !2390, file: !757, line: 566, baseType: !1651, size: 64, offset: 640)
!2399 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_critical", scope: !1133, file: !757, line: 752, baseType: !2400, size: 384)
!2400 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_critical", file: !757, line: 571, size: 384, elements: !2401)
!2401 = !{!2402, !2403}
!2402 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !2400, file: !757, line: 573, baseType: !2331, size: 320)
!2403 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !2400, file: !757, line: 577, baseType: !1254, size: 64, offset: 320)
!2404 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_for", scope: !1133, file: !757, line: 753, baseType: !2405, size: 576)
!2405 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_for", file: !757, line: 600, size: 576, elements: !2406)
!2406 = !{!2407, !2408, !2409, !2410, !2419}
!2407 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !2405, file: !757, line: 602, baseType: !2331, size: 320)
!2408 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !2405, file: !757, line: 605, baseType: !1254, size: 64, offset: 320)
!2409 = !DIDerivedType(tag: DW_TAG_member, name: "collapse", scope: !2405, file: !757, line: 609, baseType: !1065, size: 64, offset: 384)
!2410 = !DIDerivedType(tag: DW_TAG_member, name: "iter", scope: !2405, file: !757, line: 612, baseType: !2411, size: 64, offset: 448)
!2411 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2412, size: 64)
!2412 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_omp_for_iter", file: !757, line: 581, size: 320, elements: !2413)
!2413 = !{!2414, !2415, !2416, !2417, !2418}
!2414 = !DIDerivedType(tag: DW_TAG_member, name: "cond", scope: !2412, file: !757, line: 583, baseType: !134, size: 32)
!2415 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !2412, file: !757, line: 586, baseType: !1254, size: 64, offset: 64)
!2416 = !DIDerivedType(tag: DW_TAG_member, name: "initial", scope: !2412, file: !757, line: 589, baseType: !1254, size: 64, offset: 128)
!2417 = !DIDerivedType(tag: DW_TAG_member, name: "final", scope: !2412, file: !757, line: 592, baseType: !1254, size: 64, offset: 192)
!2418 = !DIDerivedType(tag: DW_TAG_member, name: "incr", scope: !2412, file: !757, line: 595, baseType: !1254, size: 64, offset: 256)
!2419 = !DIDerivedType(tag: DW_TAG_member, name: "pre_body", scope: !2405, file: !757, line: 616, baseType: !1181, size: 64, offset: 512)
!2420 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_parallel", scope: !1133, file: !757, line: 754, baseType: !2421, size: 512)
!2421 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_parallel", file: !757, line: 622, size: 512, elements: !2422)
!2422 = !{!2423, !2424, !2425, !2426}
!2423 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !2421, file: !757, line: 624, baseType: !2331, size: 320)
!2424 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !2421, file: !757, line: 628, baseType: !1254, size: 64, offset: 320)
!2425 = !DIDerivedType(tag: DW_TAG_member, name: "child_fn", scope: !2421, file: !757, line: 632, baseType: !1254, size: 64, offset: 384)
!2426 = !DIDerivedType(tag: DW_TAG_member, name: "data_arg", scope: !2421, file: !757, line: 636, baseType: !1254, size: 64, offset: 448)
!2427 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_task", scope: !1133, file: !757, line: 755, baseType: !2428, size: 704)
!2428 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_task", file: !757, line: 642, size: 704, elements: !2429)
!2429 = !{!2430, !2431, !2432, !2433}
!2430 = !DIDerivedType(tag: DW_TAG_member, name: "par", scope: !2428, file: !757, line: 644, baseType: !2421, size: 512)
!2431 = !DIDerivedType(tag: DW_TAG_member, name: "copy_fn", scope: !2428, file: !757, line: 648, baseType: !1254, size: 64, offset: 512)
!2432 = !DIDerivedType(tag: DW_TAG_member, name: "arg_size", scope: !2428, file: !757, line: 652, baseType: !1254, size: 64, offset: 576)
!2433 = !DIDerivedType(tag: DW_TAG_member, name: "arg_align", scope: !2428, file: !757, line: 653, baseType: !1254, size: 64, offset: 640)
!2434 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_sections", scope: !1133, file: !757, line: 756, baseType: !2435, size: 448)
!2435 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_sections", file: !757, line: 663, size: 448, elements: !2436)
!2436 = !{!2437, !2438, !2439}
!2437 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !2435, file: !757, line: 665, baseType: !2331, size: 320)
!2438 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !2435, file: !757, line: 668, baseType: !1254, size: 64, offset: 320)
!2439 = !DIDerivedType(tag: DW_TAG_member, name: "control", scope: !2435, file: !757, line: 673, baseType: !1254, size: 64, offset: 384)
!2440 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_single", scope: !1133, file: !757, line: 757, baseType: !2441, size: 384)
!2441 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_single", file: !757, line: 694, size: 384, elements: !2442)
!2442 = !{!2443, !2444}
!2443 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !2441, file: !757, line: 696, baseType: !2331, size: 320)
!2444 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !2441, file: !757, line: 699, baseType: !1254, size: 64, offset: 320)
!2445 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_continue", scope: !1133, file: !757, line: 758, baseType: !2446, size: 384)
!2446 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_continue", file: !757, line: 681, size: 384, elements: !2447)
!2447 = !{!2448, !2449, !2450}
!2448 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2446, file: !757, line: 683, baseType: !1136, size: 256)
!2449 = !DIDerivedType(tag: DW_TAG_member, name: "control_def", scope: !2446, file: !757, line: 686, baseType: !1254, size: 64, offset: 256)
!2450 = !DIDerivedType(tag: DW_TAG_member, name: "control_use", scope: !2446, file: !757, line: 689, baseType: !1254, size: 64, offset: 320)
!2451 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_atomic_load", scope: !1133, file: !757, line: 759, baseType: !2452, size: 384)
!2452 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_atomic_load", file: !757, line: 707, size: 384, elements: !2453)
!2453 = !{!2454, !2455, !2456}
!2454 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2452, file: !757, line: 709, baseType: !1136, size: 256)
!2455 = !DIDerivedType(tag: DW_TAG_member, name: "rhs", scope: !2452, file: !757, line: 712, baseType: !1254, size: 64, offset: 256)
!2456 = !DIDerivedType(tag: DW_TAG_member, name: "lhs", scope: !2452, file: !757, line: 712, baseType: !1254, size: 64, offset: 320)
!2457 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_atomic_store", scope: !1133, file: !757, line: 760, baseType: !2458, size: 320)
!2458 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_atomic_store", file: !757, line: 718, size: 320, elements: !2459)
!2459 = !{!2460, !2461}
!2460 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2458, file: !757, line: 720, baseType: !1136, size: 256)
!2461 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !2458, file: !757, line: 723, baseType: !1254, size: 64, offset: 256)
!2462 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2463, size: 64)
!2463 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1133)
!2464 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2465, size: 64)
!2465 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2466, size: 64)
!2466 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cgraph_node", file: !568, line: 181, size: 2496, elements: !2467)
!2467 = !{!2468, !2469, !2492, !2493, !2494, !2495, !2496, !2497, !2498, !2499, !2500, !2501, !2502, !2503, !2504, !2505, !2506, !2507, !2609, !2631, !2641, !2645, !2671, !2680, !2681, !2682, !2683, !2684, !2685, !2686, !2687, !2688, !2689, !2690, !2691, !2692, !2693}
!2468 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !2466, file: !568, line: 182, baseType: !1254, size: 64)
!2469 = !DIDerivedType(tag: DW_TAG_member, name: "callees", scope: !2466, file: !568, line: 183, baseType: !2470, size: 64, offset: 64)
!2470 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2471, size: 64)
!2471 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cgraph_edge", file: !568, line: 314, size: 768, elements: !2472)
!2472 = !{!2473, !2474, !2475, !2476, !2477, !2478, !2479, !2480, !2481, !2482, !2484, !2485, !2486, !2487, !2489, !2490, !2491}
!2473 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !2471, file: !568, line: 316, baseType: !1062, size: 64)
!2474 = !DIDerivedType(tag: DW_TAG_member, name: "caller", scope: !2471, file: !568, line: 317, baseType: !2465, size: 64, offset: 64)
!2475 = !DIDerivedType(tag: DW_TAG_member, name: "callee", scope: !2471, file: !568, line: 318, baseType: !2465, size: 64, offset: 128)
!2476 = !DIDerivedType(tag: DW_TAG_member, name: "prev_caller", scope: !2471, file: !568, line: 319, baseType: !2470, size: 64, offset: 192)
!2477 = !DIDerivedType(tag: DW_TAG_member, name: "next_caller", scope: !2471, file: !568, line: 320, baseType: !2470, size: 64, offset: 256)
!2478 = !DIDerivedType(tag: DW_TAG_member, name: "prev_callee", scope: !2471, file: !568, line: 321, baseType: !2470, size: 64, offset: 320)
!2479 = !DIDerivedType(tag: DW_TAG_member, name: "next_callee", scope: !2471, file: !568, line: 322, baseType: !2470, size: 64, offset: 384)
!2480 = !DIDerivedType(tag: DW_TAG_member, name: "call_stmt", scope: !2471, file: !568, line: 323, baseType: !1191, size: 64, offset: 448)
!2481 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !2471, file: !568, line: 324, baseType: !1068, size: 64, offset: 512)
!2482 = !DIDerivedType(tag: DW_TAG_member, name: "inline_failed", scope: !2471, file: !568, line: 327, baseType: !2483, size: 32, offset: 576)
!2483 = !DIDerivedType(tag: DW_TAG_typedef, name: "cgraph_inline_failed_t", file: !568, line: 312, baseType: !567)
!2484 = !DIDerivedType(tag: DW_TAG_member, name: "lto_stmt_uid", scope: !2471, file: !568, line: 330, baseType: !7, size: 32, offset: 608)
!2485 = !DIDerivedType(tag: DW_TAG_member, name: "frequency", scope: !2471, file: !568, line: 334, baseType: !1064, size: 32, offset: 640)
!2486 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !2471, file: !568, line: 336, baseType: !1064, size: 32, offset: 672)
!2487 = !DIDerivedType(tag: DW_TAG_member, name: "loop_nest", scope: !2471, file: !568, line: 338, baseType: !2488, size: 16, offset: 704)
!2488 = !DIBasicType(name: "unsigned short", size: 16, encoding: DW_ATE_unsigned)
!2489 = !DIDerivedType(tag: DW_TAG_member, name: "indirect_call", scope: !2471, file: !568, line: 340, baseType: !7, size: 1, offset: 720, flags: DIFlagBitField, extraData: i64 720)
!2490 = !DIDerivedType(tag: DW_TAG_member, name: "call_stmt_cannot_inline_p", scope: !2471, file: !568, line: 342, baseType: !7, size: 1, offset: 721, flags: DIFlagBitField, extraData: i64 720)
!2491 = !DIDerivedType(tag: DW_TAG_member, name: "can_throw_external", scope: !2471, file: !568, line: 344, baseType: !7, size: 1, offset: 722, flags: DIFlagBitField, extraData: i64 720)
!2492 = !DIDerivedType(tag: DW_TAG_member, name: "callers", scope: !2466, file: !568, line: 184, baseType: !2470, size: 64, offset: 128)
!2493 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2466, file: !568, line: 185, baseType: !2465, size: 64, offset: 192)
!2494 = !DIDerivedType(tag: DW_TAG_member, name: "previous", scope: !2466, file: !568, line: 186, baseType: !2465, size: 64, offset: 256)
!2495 = !DIDerivedType(tag: DW_TAG_member, name: "origin", scope: !2466, file: !568, line: 188, baseType: !2465, size: 64, offset: 320)
!2496 = !DIDerivedType(tag: DW_TAG_member, name: "nested", scope: !2466, file: !568, line: 190, baseType: !2465, size: 64, offset: 384)
!2497 = !DIDerivedType(tag: DW_TAG_member, name: "next_nested", scope: !2466, file: !568, line: 192, baseType: !2465, size: 64, offset: 448)
!2498 = !DIDerivedType(tag: DW_TAG_member, name: "next_needed", scope: !2466, file: !568, line: 194, baseType: !2465, size: 64, offset: 512)
!2499 = !DIDerivedType(tag: DW_TAG_member, name: "next_sibling_clone", scope: !2466, file: !568, line: 196, baseType: !2465, size: 64, offset: 576)
!2500 = !DIDerivedType(tag: DW_TAG_member, name: "prev_sibling_clone", scope: !2466, file: !568, line: 197, baseType: !2465, size: 64, offset: 640)
!2501 = !DIDerivedType(tag: DW_TAG_member, name: "clones", scope: !2466, file: !568, line: 198, baseType: !2465, size: 64, offset: 704)
!2502 = !DIDerivedType(tag: DW_TAG_member, name: "clone_of", scope: !2466, file: !568, line: 199, baseType: !2465, size: 64, offset: 768)
!2503 = !DIDerivedType(tag: DW_TAG_member, name: "same_body", scope: !2466, file: !568, line: 202, baseType: !2465, size: 64, offset: 832)
!2504 = !DIDerivedType(tag: DW_TAG_member, name: "same_comdat_group", scope: !2466, file: !568, line: 204, baseType: !2465, size: 64, offset: 896)
!2505 = !DIDerivedType(tag: DW_TAG_member, name: "call_site_hash", scope: !2466, file: !568, line: 207, baseType: !1590, size: 64, offset: 960)
!2506 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !2466, file: !568, line: 209, baseType: !1068, size: 64, offset: 1024)
!2507 = !DIDerivedType(tag: DW_TAG_member, name: "ipa_transforms_to_apply", scope: !2466, file: !568, line: 214, baseType: !2508, size: 64, offset: 1088)
!2508 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2509, size: 64)
!2509 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_ipa_opt_pass_heap", file: !1507, line: 177, baseType: !2510)
!2510 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_ipa_opt_pass_heap", file: !1507, line: 177, size: 128, elements: !2511)
!2511 = !{!2512}
!2512 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2510, file: !1507, line: 177, baseType: !2513, size: 128)
!2513 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_ipa_opt_pass_base", file: !1507, line: 176, baseType: !2514)
!2514 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_ipa_opt_pass_base", file: !1507, line: 176, size: 128, elements: !2515)
!2515 = !{!2516, !2517, !2518}
!2516 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2514, file: !1507, line: 176, baseType: !7, size: 32)
!2517 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2514, file: !1507, line: 176, baseType: !7, size: 32, offset: 32)
!2518 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2514, file: !1507, line: 176, baseType: !2519, size: 64, offset: 64)
!2519 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2520, size: 64, elements: !1234)
!2520 = !DIDerivedType(tag: DW_TAG_typedef, name: "ipa_opt_pass", file: !1507, line: 174, baseType: !2521)
!2521 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2522, size: 64)
!2522 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ipa_opt_pass_d", file: !385, line: 173, size: 1152, elements: !2523)
!2523 = !{!2524, !2548, !2552, !2575, !2576, !2580, !2585, !2586, !2590}
!2524 = !DIDerivedType(tag: DW_TAG_member, name: "pass", scope: !2522, file: !385, line: 175, baseType: !2525, size: 640)
!2525 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "opt_pass", file: !385, line: 114, size: 640, elements: !2526)
!2526 = !{!2527, !2528, !2529, !2533, !2537, !2539, !2540, !2541, !2543, !2544, !2545, !2546, !2547}
!2527 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !2525, file: !385, line: 117, baseType: !384, size: 32)
!2528 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !2525, file: !385, line: 121, baseType: !1223, size: 64, offset: 64)
!2529 = !DIDerivedType(tag: DW_TAG_member, name: "gate", scope: !2525, file: !385, line: 125, baseType: !2530, size: 64, offset: 128)
!2530 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2531, size: 64)
!2531 = !DISubroutineType(types: !2532)
!2532 = !{!1367}
!2533 = !DIDerivedType(tag: DW_TAG_member, name: "execute", scope: !2525, file: !385, line: 130, baseType: !2534, size: 64, offset: 192)
!2534 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2535, size: 64)
!2535 = !DISubroutineType(types: !2536)
!2536 = !{!7}
!2537 = !DIDerivedType(tag: DW_TAG_member, name: "sub", scope: !2525, file: !385, line: 133, baseType: !2538, size: 64, offset: 256)
!2538 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2525, size: 64)
!2539 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2525, file: !385, line: 136, baseType: !2538, size: 64, offset: 320)
!2540 = !DIDerivedType(tag: DW_TAG_member, name: "static_pass_number", scope: !2525, file: !385, line: 139, baseType: !1064, size: 32, offset: 384)
!2541 = !DIDerivedType(tag: DW_TAG_member, name: "tv_id", scope: !2525, file: !385, line: 143, baseType: !2542, size: 32, offset: 416)
!2542 = !DIDerivedType(tag: DW_TAG_typedef, name: "timevar_id_t", file: !392, line: 80, baseType: !391)
!2543 = !DIDerivedType(tag: DW_TAG_member, name: "properties_required", scope: !2525, file: !385, line: 146, baseType: !7, size: 32, offset: 448)
!2544 = !DIDerivedType(tag: DW_TAG_member, name: "properties_provided", scope: !2525, file: !385, line: 147, baseType: !7, size: 32, offset: 480)
!2545 = !DIDerivedType(tag: DW_TAG_member, name: "properties_destroyed", scope: !2525, file: !385, line: 148, baseType: !7, size: 32, offset: 512)
!2546 = !DIDerivedType(tag: DW_TAG_member, name: "todo_flags_start", scope: !2525, file: !385, line: 151, baseType: !7, size: 32, offset: 544)
!2547 = !DIDerivedType(tag: DW_TAG_member, name: "todo_flags_finish", scope: !2525, file: !385, line: 152, baseType: !7, size: 32, offset: 576)
!2548 = !DIDerivedType(tag: DW_TAG_member, name: "generate_summary", scope: !2522, file: !385, line: 179, baseType: !2549, size: 64, offset: 640)
!2549 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2550, size: 64)
!2550 = !DISubroutineType(types: !2551)
!2551 = !{null}
!2552 = !DIDerivedType(tag: DW_TAG_member, name: "write_summary", scope: !2522, file: !385, line: 182, baseType: !2553, size: 64, offset: 704)
!2553 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2554, size: 64)
!2554 = !DISubroutineType(types: !2555)
!2555 = !{null, !2556}
!2556 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2557, size: 64)
!2557 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cgraph_node_set_def", file: !568, line: 276, size: 192, elements: !2558)
!2558 = !{!2559, !2560, !2574}
!2559 = !DIDerivedType(tag: DW_TAG_member, name: "hashtab", scope: !2557, file: !568, line: 278, baseType: !1590, size: 64)
!2560 = !DIDerivedType(tag: DW_TAG_member, name: "nodes", scope: !2557, file: !568, line: 279, baseType: !2561, size: 64, offset: 64)
!2561 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2562, size: 64)
!2562 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_cgraph_node_ptr_gc", file: !568, line: 272, baseType: !2563)
!2563 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_cgraph_node_ptr_gc", file: !568, line: 272, size: 128, elements: !2564)
!2564 = !{!2565}
!2565 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2563, file: !568, line: 272, baseType: !2566, size: 128)
!2566 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_cgraph_node_ptr_base", file: !568, line: 270, baseType: !2567)
!2567 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_cgraph_node_ptr_base", file: !568, line: 270, size: 128, elements: !2568)
!2568 = !{!2569, !2570, !2571}
!2569 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2567, file: !568, line: 270, baseType: !7, size: 32)
!2570 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2567, file: !568, line: 270, baseType: !7, size: 32, offset: 32)
!2571 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2567, file: !568, line: 270, baseType: !2572, size: 64, offset: 64)
!2572 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2573, size: 64, elements: !1234)
!2573 = !DIDerivedType(tag: DW_TAG_typedef, name: "cgraph_node_ptr", file: !568, line: 268, baseType: !2465)
!2574 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !2557, file: !568, line: 280, baseType: !1068, size: 64, offset: 128)
!2575 = !DIDerivedType(tag: DW_TAG_member, name: "read_summary", scope: !2522, file: !385, line: 187, baseType: !2549, size: 64, offset: 768)
!2576 = !DIDerivedType(tag: DW_TAG_member, name: "function_read_summary", scope: !2522, file: !385, line: 188, baseType: !2577, size: 64, offset: 832)
!2577 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2578, size: 64)
!2578 = !DISubroutineType(types: !2579)
!2579 = !{null, !2465}
!2580 = !DIDerivedType(tag: DW_TAG_member, name: "stmt_fixup", scope: !2522, file: !385, line: 191, baseType: !2581, size: 64, offset: 896)
!2581 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2582, size: 64)
!2582 = !DISubroutineType(types: !2583)
!2583 = !{null, !2465, !2584}
!2584 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1191, size: 64)
!2585 = !DIDerivedType(tag: DW_TAG_member, name: "function_transform_todo_flags_start", scope: !2522, file: !385, line: 195, baseType: !7, size: 32, offset: 960)
!2586 = !DIDerivedType(tag: DW_TAG_member, name: "function_transform", scope: !2522, file: !385, line: 196, baseType: !2587, size: 64, offset: 1024)
!2587 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2588, size: 64)
!2588 = !DISubroutineType(types: !2589)
!2589 = !{!7, !2465}
!2590 = !DIDerivedType(tag: DW_TAG_member, name: "variable_transform", scope: !2522, file: !385, line: 197, baseType: !2591, size: 64, offset: 1088)
!2591 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2592, size: 64)
!2592 = !DISubroutineType(types: !2593)
!2593 = !{null, !2594}
!2594 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2595, size: 64)
!2595 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "varpool_node", file: !568, line: 358, size: 320, elements: !2596)
!2596 = !{!2597, !2598, !2599, !2600, !2601, !2602, !2603, !2604, !2605, !2606, !2607, !2608}
!2597 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !2595, file: !568, line: 359, baseType: !1254, size: 64)
!2598 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2595, file: !568, line: 361, baseType: !2594, size: 64, offset: 64)
!2599 = !DIDerivedType(tag: DW_TAG_member, name: "next_needed", scope: !2595, file: !568, line: 363, baseType: !2594, size: 64, offset: 128)
!2600 = !DIDerivedType(tag: DW_TAG_member, name: "extra_name", scope: !2595, file: !568, line: 366, baseType: !2594, size: 64, offset: 192)
!2601 = !DIDerivedType(tag: DW_TAG_member, name: "order", scope: !2595, file: !568, line: 368, baseType: !1064, size: 32, offset: 256)
!2602 = !DIDerivedType(tag: DW_TAG_member, name: "needed", scope: !2595, file: !568, line: 372, baseType: !7, size: 1, offset: 288, flags: DIFlagBitField, extraData: i64 288)
!2603 = !DIDerivedType(tag: DW_TAG_member, name: "force_output", scope: !2595, file: !568, line: 375, baseType: !7, size: 1, offset: 289, flags: DIFlagBitField, extraData: i64 288)
!2604 = !DIDerivedType(tag: DW_TAG_member, name: "analyzed", scope: !2595, file: !568, line: 378, baseType: !7, size: 1, offset: 290, flags: DIFlagBitField, extraData: i64 288)
!2605 = !DIDerivedType(tag: DW_TAG_member, name: "finalized", scope: !2595, file: !568, line: 380, baseType: !7, size: 1, offset: 291, flags: DIFlagBitField, extraData: i64 288)
!2606 = !DIDerivedType(tag: DW_TAG_member, name: "output", scope: !2595, file: !568, line: 382, baseType: !7, size: 1, offset: 292, flags: DIFlagBitField, extraData: i64 288)
!2607 = !DIDerivedType(tag: DW_TAG_member, name: "externally_visible", scope: !2595, file: !568, line: 384, baseType: !7, size: 1, offset: 293, flags: DIFlagBitField, extraData: i64 288)
!2608 = !DIDerivedType(tag: DW_TAG_member, name: "alias", scope: !2595, file: !568, line: 387, baseType: !7, size: 1, offset: 294, flags: DIFlagBitField, extraData: i64 288)
!2609 = !DIDerivedType(tag: DW_TAG_member, name: "local", scope: !2466, file: !568, line: 216, baseType: !2610, size: 320, offset: 1152)
!2610 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cgraph_local_info", file: !568, line: 88, size: 320, elements: !2611)
!2611 = !{!2612, !2615, !2623, !2624, !2625, !2626, !2627, !2628, !2629, !2630}
!2612 = !DIDerivedType(tag: DW_TAG_member, name: "lto_file_data", scope: !2610, file: !568, line: 90, baseType: !2613, size: 64)
!2613 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2614, size: 64)
!2614 = !DICompositeType(tag: DW_TAG_structure_type, name: "lto_file_decl_data", file: !568, line: 51, flags: DIFlagFwdDecl)
!2615 = !DIDerivedType(tag: DW_TAG_member, name: "inline_summary", scope: !2610, file: !568, line: 92, baseType: !2616, size: 192, offset: 64)
!2616 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "inline_summary", file: !568, line: 57, size: 192, elements: !2617)
!2617 = !{!2618, !2619, !2620, !2621, !2622}
!2618 = !DIDerivedType(tag: DW_TAG_member, name: "estimated_self_stack_size", scope: !2616, file: !568, line: 60, baseType: !1063, size: 64)
!2619 = !DIDerivedType(tag: DW_TAG_member, name: "self_size", scope: !2616, file: !568, line: 63, baseType: !1064, size: 32, offset: 64)
!2620 = !DIDerivedType(tag: DW_TAG_member, name: "size_inlining_benefit", scope: !2616, file: !568, line: 65, baseType: !1064, size: 32, offset: 96)
!2621 = !DIDerivedType(tag: DW_TAG_member, name: "self_time", scope: !2616, file: !568, line: 67, baseType: !1064, size: 32, offset: 128)
!2622 = !DIDerivedType(tag: DW_TAG_member, name: "time_inlining_benefit", scope: !2616, file: !568, line: 69, baseType: !1064, size: 32, offset: 160)
!2623 = !DIDerivedType(tag: DW_TAG_member, name: "local", scope: !2610, file: !568, line: 96, baseType: !7, size: 1, offset: 256, flags: DIFlagBitField, extraData: i64 256)
!2624 = !DIDerivedType(tag: DW_TAG_member, name: "externally_visible", scope: !2610, file: !568, line: 99, baseType: !7, size: 1, offset: 257, flags: DIFlagBitField, extraData: i64 256)
!2625 = !DIDerivedType(tag: DW_TAG_member, name: "finalized", scope: !2610, file: !568, line: 102, baseType: !7, size: 1, offset: 258, flags: DIFlagBitField, extraData: i64 256)
!2626 = !DIDerivedType(tag: DW_TAG_member, name: "inlinable", scope: !2610, file: !568, line: 105, baseType: !7, size: 1, offset: 259, flags: DIFlagBitField, extraData: i64 256)
!2627 = !DIDerivedType(tag: DW_TAG_member, name: "disregard_inline_limits", scope: !2610, file: !568, line: 108, baseType: !7, size: 1, offset: 260, flags: DIFlagBitField, extraData: i64 256)
!2628 = !DIDerivedType(tag: DW_TAG_member, name: "redefined_extern_inline", scope: !2610, file: !568, line: 112, baseType: !7, size: 1, offset: 261, flags: DIFlagBitField, extraData: i64 256)
!2629 = !DIDerivedType(tag: DW_TAG_member, name: "for_functions_valid", scope: !2610, file: !568, line: 116, baseType: !7, size: 1, offset: 262, flags: DIFlagBitField, extraData: i64 256)
!2630 = !DIDerivedType(tag: DW_TAG_member, name: "vtable_method", scope: !2610, file: !568, line: 120, baseType: !7, size: 1, offset: 263, flags: DIFlagBitField, extraData: i64 256)
!2631 = !DIDerivedType(tag: DW_TAG_member, name: "global", scope: !2466, file: !568, line: 217, baseType: !2632, size: 320, offset: 1472)
!2632 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cgraph_global_info", file: !568, line: 126, size: 320, elements: !2633)
!2633 = !{!2634, !2635, !2636, !2637, !2638, !2639, !2640}
!2634 = !DIDerivedType(tag: DW_TAG_member, name: "estimated_stack_size", scope: !2632, file: !568, line: 128, baseType: !1063, size: 64)
!2635 = !DIDerivedType(tag: DW_TAG_member, name: "stack_frame_offset", scope: !2632, file: !568, line: 130, baseType: !1063, size: 64, offset: 64)
!2636 = !DIDerivedType(tag: DW_TAG_member, name: "inlined_to", scope: !2632, file: !568, line: 134, baseType: !2465, size: 64, offset: 128)
!2637 = !DIDerivedType(tag: DW_TAG_member, name: "time", scope: !2632, file: !568, line: 137, baseType: !1064, size: 32, offset: 192)
!2638 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2632, file: !568, line: 138, baseType: !1064, size: 32, offset: 224)
!2639 = !DIDerivedType(tag: DW_TAG_member, name: "estimated_growth", scope: !2632, file: !568, line: 141, baseType: !1064, size: 32, offset: 256)
!2640 = !DIDerivedType(tag: DW_TAG_member, name: "inlined", scope: !2632, file: !568, line: 144, baseType: !1367, size: 8, offset: 288)
!2641 = !DIDerivedType(tag: DW_TAG_member, name: "rtl", scope: !2466, file: !568, line: 218, baseType: !2642, size: 32, offset: 1792)
!2642 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cgraph_rtl_info", file: !568, line: 150, size: 32, elements: !2643)
!2643 = !{!2644}
!2644 = !DIDerivedType(tag: DW_TAG_member, name: "preferred_incoming_stack_boundary", scope: !2642, file: !568, line: 151, baseType: !7, size: 32)
!2645 = !DIDerivedType(tag: DW_TAG_member, name: "clone", scope: !2466, file: !568, line: 219, baseType: !2646, size: 192, offset: 1856)
!2646 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cgraph_clone_info", file: !568, line: 171, size: 192, elements: !2647)
!2647 = !{!2648, !2669, !2670}
!2648 = !DIDerivedType(tag: DW_TAG_member, name: "tree_map", scope: !2646, file: !568, line: 173, baseType: !2649, size: 64)
!2649 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2650, size: 64)
!2650 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_ipa_replace_map_p_gc", file: !568, line: 169, baseType: !2651)
!2651 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_ipa_replace_map_p_gc", file: !568, line: 169, size: 128, elements: !2652)
!2652 = !{!2653}
!2653 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2651, file: !568, line: 169, baseType: !2654, size: 128)
!2654 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_ipa_replace_map_p_base", file: !568, line: 168, baseType: !2655)
!2655 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_ipa_replace_map_p_base", file: !568, line: 168, size: 128, elements: !2656)
!2656 = !{!2657, !2658, !2659}
!2657 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2655, file: !568, line: 168, baseType: !7, size: 32)
!2658 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2655, file: !568, line: 168, baseType: !7, size: 32, offset: 32)
!2659 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2655, file: !568, line: 168, baseType: !2660, size: 64, offset: 64)
!2660 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2661, size: 64, elements: !1234)
!2661 = !DIDerivedType(tag: DW_TAG_typedef, name: "ipa_replace_map_p", file: !568, line: 167, baseType: !2662)
!2662 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2663, size: 64)
!2663 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ipa_replace_map", file: !568, line: 156, size: 192, elements: !2664)
!2664 = !{!2665, !2666, !2667, !2668}
!2665 = !DIDerivedType(tag: DW_TAG_member, name: "old_tree", scope: !2663, file: !568, line: 159, baseType: !1254, size: 64)
!2666 = !DIDerivedType(tag: DW_TAG_member, name: "new_tree", scope: !2663, file: !568, line: 161, baseType: !1254, size: 64, offset: 64)
!2667 = !DIDerivedType(tag: DW_TAG_member, name: "replace_p", scope: !2663, file: !568, line: 163, baseType: !1367, size: 8, offset: 128)
!2668 = !DIDerivedType(tag: DW_TAG_member, name: "ref_p", scope: !2663, file: !568, line: 165, baseType: !1367, size: 8, offset: 136)
!2669 = !DIDerivedType(tag: DW_TAG_member, name: "args_to_skip", scope: !2646, file: !568, line: 174, baseType: !1069, size: 64, offset: 64)
!2670 = !DIDerivedType(tag: DW_TAG_member, name: "combined_args_to_skip", scope: !2646, file: !568, line: 175, baseType: !1069, size: 64, offset: 128)
!2671 = !DIDerivedType(tag: DW_TAG_member, name: "thunk", scope: !2466, file: !568, line: 220, baseType: !2672, size: 256, offset: 2048)
!2672 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cgraph_thunk_info", file: !568, line: 74, size: 256, elements: !2673)
!2673 = !{!2674, !2675, !2676, !2677, !2678, !2679}
!2674 = !DIDerivedType(tag: DW_TAG_member, name: "fixed_offset", scope: !2672, file: !568, line: 76, baseType: !1063, size: 64)
!2675 = !DIDerivedType(tag: DW_TAG_member, name: "virtual_value", scope: !2672, file: !568, line: 77, baseType: !1063, size: 64, offset: 64)
!2676 = !DIDerivedType(tag: DW_TAG_member, name: "alias", scope: !2672, file: !568, line: 78, baseType: !1254, size: 64, offset: 128)
!2677 = !DIDerivedType(tag: DW_TAG_member, name: "this_adjusting", scope: !2672, file: !568, line: 79, baseType: !1367, size: 8, offset: 192)
!2678 = !DIDerivedType(tag: DW_TAG_member, name: "virtual_offset_p", scope: !2672, file: !568, line: 80, baseType: !1367, size: 8, offset: 200)
!2679 = !DIDerivedType(tag: DW_TAG_member, name: "thunk_p", scope: !2672, file: !568, line: 82, baseType: !1367, size: 8, offset: 208)
!2680 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !2466, file: !568, line: 223, baseType: !1062, size: 64, offset: 2304)
!2681 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !2466, file: !568, line: 225, baseType: !1064, size: 32, offset: 2368)
!2682 = !DIDerivedType(tag: DW_TAG_member, name: "order", scope: !2466, file: !568, line: 227, baseType: !1064, size: 32, offset: 2400)
!2683 = !DIDerivedType(tag: DW_TAG_member, name: "pid", scope: !2466, file: !568, line: 231, baseType: !1064, size: 32, offset: 2432)
!2684 = !DIDerivedType(tag: DW_TAG_member, name: "needed", scope: !2466, file: !568, line: 238, baseType: !7, size: 1, offset: 2464, flags: DIFlagBitField, extraData: i64 2464)
!2685 = !DIDerivedType(tag: DW_TAG_member, name: "address_taken", scope: !2466, file: !568, line: 241, baseType: !7, size: 1, offset: 2465, flags: DIFlagBitField, extraData: i64 2464)
!2686 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_and_needed", scope: !2466, file: !568, line: 244, baseType: !7, size: 1, offset: 2466, flags: DIFlagBitField, extraData: i64 2464)
!2687 = !DIDerivedType(tag: DW_TAG_member, name: "reachable", scope: !2466, file: !568, line: 251, baseType: !7, size: 1, offset: 2467, flags: DIFlagBitField, extraData: i64 2464)
!2688 = !DIDerivedType(tag: DW_TAG_member, name: "lowered", scope: !2466, file: !568, line: 253, baseType: !7, size: 1, offset: 2468, flags: DIFlagBitField, extraData: i64 2464)
!2689 = !DIDerivedType(tag: DW_TAG_member, name: "analyzed", scope: !2466, file: !568, line: 256, baseType: !7, size: 1, offset: 2469, flags: DIFlagBitField, extraData: i64 2464)
!2690 = !DIDerivedType(tag: DW_TAG_member, name: "process", scope: !2466, file: !568, line: 258, baseType: !7, size: 1, offset: 2470, flags: DIFlagBitField, extraData: i64 2464)
!2691 = !DIDerivedType(tag: DW_TAG_member, name: "alias", scope: !2466, file: !568, line: 260, baseType: !7, size: 1, offset: 2471, flags: DIFlagBitField, extraData: i64 2464)
!2692 = !DIDerivedType(tag: DW_TAG_member, name: "finalized_by_frontend", scope: !2466, file: !568, line: 262, baseType: !7, size: 1, offset: 2472, flags: DIFlagBitField, extraData: i64 2464)
!2693 = !DIDerivedType(tag: DW_TAG_member, name: "same_body_alias", scope: !2466, file: !568, line: 265, baseType: !7, size: 1, offset: 2473, flags: DIFlagBitField, extraData: i64 2464)
!2694 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_gimple", file: !1070, line: 60, baseType: !2462)
!2695 = !DIBasicType(name: "double", size: 64, encoding: DW_ATE_float)
!2696 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2697, size: 64)
!2697 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_cgraph_edge_p_heap", file: !568, line: 353, baseType: !2698)
!2698 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_cgraph_edge_p_heap", file: !568, line: 353, size: 128, elements: !2699)
!2699 = !{!2700}
!2700 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2698, file: !568, line: 353, baseType: !2701, size: 128)
!2701 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_cgraph_edge_p_base", file: !568, line: 352, baseType: !2702)
!2702 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_cgraph_edge_p_base", file: !568, line: 352, size: 128, elements: !2703)
!2703 = !{!2704, !2705, !2706}
!2704 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2702, file: !568, line: 352, baseType: !7, size: 32)
!2705 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2702, file: !568, line: 352, baseType: !7, size: 32, offset: 32)
!2706 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2702, file: !568, line: 352, baseType: !2707, size: 64, offset: 64)
!2707 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2708, size: 64, elements: !1234)
!2708 = !DIDerivedType(tag: DW_TAG_typedef, name: "cgraph_edge_p", file: !568, line: 350, baseType: !2470)
!2709 = !DIDerivedType(tag: DW_TAG_typedef, name: "fibnode_t", file: !2710, line: 74, baseType: !2711)
!2710 = !DIFile(filename: "./include/fibheap.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2711 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2712, size: 64)
!2712 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "fibnode", file: !2710, line: 59, size: 448, elements: !2713)
!2713 = !{!2714, !2715, !2716, !2717, !2718, !2720, !2721, !2722}
!2714 = !DIDerivedType(tag: DW_TAG_member, name: "parent", scope: !2712, file: !2710, line: 61, baseType: !2711, size: 64)
!2715 = !DIDerivedType(tag: DW_TAG_member, name: "child", scope: !2712, file: !2710, line: 62, baseType: !2711, size: 64, offset: 64)
!2716 = !DIDerivedType(tag: DW_TAG_member, name: "left", scope: !2712, file: !2710, line: 63, baseType: !2711, size: 64, offset: 128)
!2717 = !DIDerivedType(tag: DW_TAG_member, name: "right", scope: !2712, file: !2710, line: 64, baseType: !2711, size: 64, offset: 192)
!2718 = !DIDerivedType(tag: DW_TAG_member, name: "key", scope: !2712, file: !2710, line: 65, baseType: !2719, size: 64, offset: 256)
!2719 = !DIDerivedType(tag: DW_TAG_typedef, name: "fibheapkey_t", file: !2710, line: 50, baseType: !1063)
!2720 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !2712, file: !2710, line: 66, baseType: !1068, size: 64, offset: 320)
!2721 = !DIDerivedType(tag: DW_TAG_member, name: "degree", scope: !2712, file: !2710, line: 71, baseType: !7, size: 31, offset: 384, flags: DIFlagBitField, extraData: i64 384)
!2722 = !DIDerivedType(tag: DW_TAG_member, name: "mark", scope: !2712, file: !2710, line: 72, baseType: !7, size: 1, offset: 415, flags: DIFlagBitField, extraData: i64 384)
!2723 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2724, size: 64)
!2724 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_ipa_node_params_t_heap", file: !828, line: 315, baseType: !2725)
!2725 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_ipa_node_params_t_heap", file: !828, line: 315, size: 448, elements: !2726)
!2726 = !{!2727}
!2727 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2725, file: !828, line: 315, baseType: !2728, size: 448)
!2728 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_ipa_node_params_t_base", file: !828, line: 314, baseType: !2729)
!2729 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_ipa_node_params_t_base", file: !828, line: 314, size: 448, elements: !2730)
!2730 = !{!2731, !2732, !2733}
!2731 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2729, file: !828, line: 314, baseType: !7, size: 32)
!2732 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2729, file: !828, line: 314, baseType: !7, size: 32, offset: 32)
!2733 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2729, file: !828, line: 314, baseType: !2734, size: 384, offset: 64)
!2734 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2735, size: 384, elements: !1234)
!2735 = !DIDerivedType(tag: DW_TAG_typedef, name: "ipa_node_params_t", file: !828, line: 311, baseType: !2736)
!2736 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ipa_node_params", file: !828, line: 178, size: 384, elements: !2737)
!2737 = !{!2738, !2739, !2750, !2762, !2763, !2764, !2765, !2766, !2767}
!2738 = !DIDerivedType(tag: DW_TAG_member, name: "param_count", scope: !2736, file: !828, line: 183, baseType: !1064, size: 32)
!2739 = !DIDerivedType(tag: DW_TAG_member, name: "params", scope: !2736, file: !828, line: 186, baseType: !2740, size: 64, offset: 64)
!2740 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2741, size: 64)
!2741 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ipa_param_descriptor", file: !828, line: 165, size: 256, elements: !2742)
!2742 = !{!2743, !2748, !2749}
!2743 = !DIDerivedType(tag: DW_TAG_member, name: "ipcp_lattice", scope: !2741, file: !828, line: 168, baseType: !2744, size: 128)
!2744 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ipcp_lattice", file: !828, line: 132, size: 128, elements: !2745)
!2745 = !{!2746, !2747}
!2746 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !2744, file: !828, line: 134, baseType: !827, size: 32)
!2747 = !DIDerivedType(tag: DW_TAG_member, name: "constant", scope: !2744, file: !828, line: 135, baseType: !1254, size: 64, offset: 64)
!2748 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !2741, file: !828, line: 170, baseType: !1254, size: 64, offset: 128)
!2749 = !DIDerivedType(tag: DW_TAG_member, name: "modified", scope: !2741, file: !828, line: 172, baseType: !7, size: 1, offset: 192, flags: DIFlagBitField, extraData: i64 192)
!2750 = !DIDerivedType(tag: DW_TAG_member, name: "param_calls", scope: !2736, file: !828, line: 188, baseType: !2751, size: 64, offset: 128)
!2751 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2752, size: 64)
!2752 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ipa_param_call_note", file: !828, line: 141, size: 320, elements: !2753)
!2753 = !{!2754, !2755, !2756, !2757, !2758, !2759, !2760, !2761}
!2754 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !2752, file: !828, line: 144, baseType: !1062, size: 64)
!2755 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2752, file: !828, line: 146, baseType: !2751, size: 64, offset: 64)
!2756 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !2752, file: !828, line: 148, baseType: !1191, size: 64, offset: 128)
!2757 = !DIDerivedType(tag: DW_TAG_member, name: "lto_stmt_uid", scope: !2752, file: !828, line: 150, baseType: !7, size: 32, offset: 192)
!2758 = !DIDerivedType(tag: DW_TAG_member, name: "formal_id", scope: !2752, file: !828, line: 152, baseType: !1064, size: 32, offset: 224)
!2759 = !DIDerivedType(tag: DW_TAG_member, name: "frequency", scope: !2752, file: !828, line: 155, baseType: !1064, size: 32, offset: 256)
!2760 = !DIDerivedType(tag: DW_TAG_member, name: "loop_nest", scope: !2752, file: !828, line: 157, baseType: !2488, size: 16, offset: 288)
!2761 = !DIDerivedType(tag: DW_TAG_member, name: "processed", scope: !2752, file: !828, line: 161, baseType: !1367, size: 8, offset: 304)
!2762 = !DIDerivedType(tag: DW_TAG_member, name: "ipcp_orig_node", scope: !2736, file: !828, line: 191, baseType: !2465, size: 64, offset: 192)
!2763 = !DIDerivedType(tag: DW_TAG_member, name: "count_scale", scope: !2736, file: !828, line: 197, baseType: !1062, size: 64, offset: 256)
!2764 = !DIDerivedType(tag: DW_TAG_member, name: "called_with_var_arguments", scope: !2736, file: !828, line: 201, baseType: !7, size: 1, offset: 320, flags: DIFlagBitField, extraData: i64 320)
!2765 = !DIDerivedType(tag: DW_TAG_member, name: "modification_analysis_done", scope: !2736, file: !828, line: 203, baseType: !7, size: 1, offset: 321, flags: DIFlagBitField, extraData: i64 320)
!2766 = !DIDerivedType(tag: DW_TAG_member, name: "uses_analysis_done", scope: !2736, file: !828, line: 205, baseType: !7, size: 1, offset: 322, flags: DIFlagBitField, extraData: i64 320)
!2767 = !DIDerivedType(tag: DW_TAG_member, name: "node_enqueued", scope: !2736, file: !828, line: 207, baseType: !7, size: 1, offset: 323, flags: DIFlagBitField, extraData: i64 320)
!2768 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2769, size: 64)
!2769 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_ipa_edge_args_t_gc", file: !828, line: 317, baseType: !2770)
!2770 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_ipa_edge_args_t_gc", file: !828, line: 317, size: 192, elements: !2771)
!2771 = !{!2772}
!2772 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2770, file: !828, line: 317, baseType: !2773, size: 192)
!2773 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_ipa_edge_args_t_base", file: !828, line: 316, baseType: !2774)
!2774 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_ipa_edge_args_t_base", file: !828, line: 316, size: 192, elements: !2775)
!2775 = !{!2776, !2777, !2778}
!2776 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2774, file: !828, line: 316, baseType: !7, size: 32)
!2777 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2774, file: !828, line: 316, baseType: !7, size: 32, offset: 32)
!2778 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2774, file: !828, line: 316, baseType: !2779, size: 128, offset: 64)
!2779 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2780, size: 128, elements: !1234)
!2780 = !DIDerivedType(tag: DW_TAG_typedef, name: "ipa_edge_args_t", file: !828, line: 279, baseType: !2781)
!2781 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ipa_edge_args", file: !828, line: 271, size: 128, elements: !2782)
!2782 = !{!2783, !2784}
!2783 = !DIDerivedType(tag: DW_TAG_member, name: "argument_count", scope: !2781, file: !828, line: 276, baseType: !1064, size: 32)
!2784 = !DIDerivedType(tag: DW_TAG_member, name: "jump_functions", scope: !2781, file: !828, line: 278, baseType: !2785, size: 64, offset: 64)
!2785 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2786, size: 64)
!2786 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ipa_jump_func", file: !828, line: 114, size: 256, elements: !2787)
!2787 = !{!2788, !2789}
!2788 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !2786, file: !828, line: 116, baseType: !833, size: 32)
!2789 = !DIDerivedType(tag: DW_TAG_member, name: "value", scope: !2786, file: !828, line: 126, baseType: !2790, size: 192, offset: 64)
!2790 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "jump_func_value", file: !828, line: 120, size: 192, elements: !2791)
!2791 = !{!2792, !2793, !2799, !2805}
!2792 = !DIDerivedType(tag: DW_TAG_member, name: "constant", scope: !2790, file: !828, line: 122, baseType: !1254, size: 64)
!2793 = !DIDerivedType(tag: DW_TAG_member, name: "pass_through", scope: !2790, file: !828, line: 123, baseType: !2794, size: 128)
!2794 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ipa_pass_through_data", file: !828, line: 76, size: 128, elements: !2795)
!2795 = !{!2796, !2797, !2798}
!2796 = !DIDerivedType(tag: DW_TAG_member, name: "operand", scope: !2794, file: !828, line: 80, baseType: !1254, size: 64)
!2797 = !DIDerivedType(tag: DW_TAG_member, name: "formal_id", scope: !2794, file: !828, line: 82, baseType: !1064, size: 32, offset: 64)
!2798 = !DIDerivedType(tag: DW_TAG_member, name: "operation", scope: !2794, file: !828, line: 87, baseType: !134, size: 32, offset: 96)
!2799 = !DIDerivedType(tag: DW_TAG_member, name: "ancestor", scope: !2790, file: !828, line: 124, baseType: !2800, size: 192)
!2800 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ipa_ancestor_jf_data", file: !828, line: 93, size: 192, elements: !2801)
!2801 = !{!2802, !2803, !2804}
!2802 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2800, file: !828, line: 96, baseType: !1063, size: 64)
!2803 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !2800, file: !828, line: 98, baseType: !1254, size: 64, offset: 64)
!2804 = !DIDerivedType(tag: DW_TAG_member, name: "formal_id", scope: !2800, file: !828, line: 100, baseType: !1064, size: 32, offset: 128)
!2805 = !DIDerivedType(tag: DW_TAG_member, name: "member_cst", scope: !2790, file: !828, line: 125, baseType: !2806, size: 128)
!2806 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ipa_member_ptr_cst", file: !828, line: 105, size: 128, elements: !2807)
!2807 = !{!2808, !2809}
!2808 = !DIDerivedType(tag: DW_TAG_member, name: "pfn", scope: !2806, file: !828, line: 107, baseType: !1254, size: 64)
!2809 = !DIDerivedType(tag: DW_TAG_member, name: "delta", scope: !2806, file: !828, line: 108, baseType: !1254, size: 64, offset: 64)
!2810 = !{!2811, !2816, !2821, !2823, !2825, !2839, !0, !2841, !2843, !2845, !2849, !2851, !2853, !2866}
!2811 = !DIGlobalVariableExpression(var: !2812, expr: !DIExpression())
!2812 = distinct !DIGlobalVariable(name: "pass_early_inline", scope: !2, file: !3, line: 1659, type: !2813, isLocal: false, isDefinition: true)
!2813 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_opt_pass", file: !385, line: 156, size: 640, elements: !2814)
!2814 = !{!2815}
!2815 = !DIDerivedType(tag: DW_TAG_member, name: "pass", scope: !2813, file: !385, line: 158, baseType: !2525, size: 640)
!2816 = !DIGlobalVariableExpression(var: !2817, expr: !DIExpression())
!2817 = distinct !DIGlobalVariable(name: "pass_ipa_early_inline", scope: !2, file: !3, line: 1690, type: !2818, isLocal: false, isDefinition: true)
!2818 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "simple_ipa_opt_pass", file: !385, line: 202, size: 640, elements: !2819)
!2819 = !{!2820}
!2820 = !DIDerivedType(tag: DW_TAG_member, name: "pass", scope: !2818, file: !385, line: 204, baseType: !2525, size: 640)
!2821 = !DIGlobalVariableExpression(var: !2822, expr: !DIExpression())
!2822 = distinct !DIGlobalVariable(name: "pass_inline_parameters", scope: !2, file: !3, line: 1896, type: !2813, isLocal: false, isDefinition: true)
!2823 = !DIGlobalVariableExpression(var: !2824, expr: !DIExpression())
!2824 = distinct !DIGlobalVariable(name: "pass_ipa_inline", scope: !2, file: !3, line: 2048, type: !2522, isLocal: false, isDefinition: true)
!2825 = !DIGlobalVariableExpression(var: !2826, expr: !DIExpression())
!2826 = distinct !DIGlobalVariable(name: "gt_ggc_r_gt_ipa_inline_h", scope: !2, file: !2827, line: 68, type: !2828, isLocal: false, isDefinition: true)
!2827 = !DIFile(filename: "./gt-ipa-inline.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2828 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2829, size: 640, elements: !1087)
!2829 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2830)
!2830 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ggc_root_tab", file: !2831, line: 69, size: 320, elements: !2832)
!2831 = !DIFile(filename: "./ggc.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2832 = !{!2833, !2834, !2835, !2836, !2838}
!2833 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2830, file: !2831, line: 70, baseType: !1068, size: 64)
!2834 = !DIDerivedType(tag: DW_TAG_member, name: "nelt", scope: !2830, file: !2831, line: 71, baseType: !1065, size: 64, offset: 64)
!2835 = !DIDerivedType(tag: DW_TAG_member, name: "stride", scope: !2830, file: !2831, line: 72, baseType: !1065, size: 64, offset: 128)
!2836 = !DIDerivedType(tag: DW_TAG_member, name: "cb", scope: !2830, file: !2831, line: 73, baseType: !2837, size: 64, offset: 192)
!2837 = !DIDerivedType(tag: DW_TAG_typedef, name: "gt_pointer_walker", file: !2831, line: 65, baseType: !1610)
!2838 = !DIDerivedType(tag: DW_TAG_member, name: "pchw", scope: !2830, file: !2831, line: 74, baseType: !2837, size: 64, offset: 256)
!2839 = !DIGlobalVariableExpression(var: !2840, expr: !DIExpression())
!2840 = distinct !DIGlobalVariable(name: "nfunctions_inlined", scope: !2, file: !3, line: 170, type: !1064, isLocal: true, isDefinition: true)
!2841 = !DIGlobalVariableExpression(var: !2842, expr: !DIExpression())
!2842 = distinct !DIGlobalVariable(name: "order", scope: !2, file: !3, line: 1622, type: !2464, isLocal: true, isDefinition: true)
!2843 = !DIGlobalVariableExpression(var: !2844, expr: !DIExpression())
!2844 = distinct !DIGlobalVariable(name: "ncalls_inlined", scope: !2, file: !3, line: 169, type: !1064, isLocal: true, isDefinition: true)
!2845 = !DIGlobalVariableExpression(var: !2846, expr: !DIExpression())
!2846 = distinct !DIGlobalVariable(name: "function_insertion_hook_holder", scope: !2, file: !3, line: 175, type: !2847, isLocal: true, isDefinition: true)
!2847 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2848, size: 64)
!2848 = !DICompositeType(tag: DW_TAG_structure_type, name: "cgraph_node_hook_list", file: !568, line: 520, flags: DIFlagFwdDecl)
!2849 = !DIGlobalVariableExpression(var: !2850, expr: !DIExpression())
!2850 = distinct !DIGlobalVariable(name: "max_count", scope: !2, file: !3, line: 172, type: !1062, isLocal: true, isDefinition: true)
!2851 = !DIGlobalVariableExpression(var: !2852, expr: !DIExpression())
!2852 = distinct !DIGlobalVariable(name: "max_benefit", scope: !2, file: !3, line: 172, type: !1062, isLocal: true, isDefinition: true)
!2853 = !DIGlobalVariableExpression(var: !2854, expr: !DIExpression())
!2854 = distinct !DIGlobalVariable(name: "priority", scope: !2855, file: !3, line: 694, type: !1064, isLocal: true, isDefinition: true)
!2855 = distinct !DISubprogram(name: "lookup_recursive_calls", scope: !3, file: !3, line: 691, type: !2856, scopeLine: 693, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2865)
!2856 = !DISubroutineType(types: !2857)
!2857 = !{null, !2465, !2465, !2858}
!2858 = !DIDerivedType(tag: DW_TAG_typedef, name: "fibheap_t", file: !2710, line: 57, baseType: !2859)
!2859 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2860, size: 64)
!2860 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "fibheap", file: !2710, line: 52, size: 192, elements: !2861)
!2861 = !{!2862, !2863, !2864}
!2862 = !DIDerivedType(tag: DW_TAG_member, name: "nodes", scope: !2860, file: !2710, line: 54, baseType: !1065, size: 64)
!2863 = !DIDerivedType(tag: DW_TAG_member, name: "min", scope: !2860, file: !2710, line: 55, baseType: !2711, size: 64, offset: 64)
!2864 = !DIDerivedType(tag: DW_TAG_member, name: "root", scope: !2860, file: !2710, line: 56, baseType: !2711, size: 64, offset: 128)
!2865 = !{}
!2866 = !DIGlobalVariableExpression(var: !2867, expr: !DIExpression())
!2867 = distinct !DIGlobalVariable(name: "nnodes", scope: !2, file: !3, line: 1621, type: !1064, isLocal: true, isDefinition: true)
!2868 = !{i32 7, !"Dwarf Version", i32 4}
!2869 = !{i32 2, !"Debug Info Version", i32 3}
!2870 = !{i32 1, !"wchar_size", i32 4}
!2871 = !{!"clang version 10.0.1 (https://github.com/svkeerthy/IR2Vec-LoopOptimizationFramework.git 561ac470e63b728263a0ac06ef987886ac648486)"}
!2872 = distinct !DISubprogram(name: "cgraph_clone_inlined_nodes", scope: !3, file: !3, line: 240, type: !2873, scopeLine: 242, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2865)
!2873 = !DISubroutineType(types: !2874)
!2874 = !{null, !2470, !1367, !1367}
!2875 = !DILocalVariable(name: "e", arg: 1, scope: !2872, file: !3, line: 240, type: !2470)
!2876 = !DILocation(line: 240, column: 49, scope: !2872)
!2877 = !DILocalVariable(name: "duplicate", arg: 2, scope: !2872, file: !3, line: 240, type: !1367)
!2878 = !DILocation(line: 240, column: 57, scope: !2872)
!2879 = !DILocalVariable(name: "update_original", arg: 3, scope: !2872, file: !3, line: 241, type: !1367)
!2880 = !DILocation(line: 241, column: 13, scope: !2872)
!2881 = !DILocalVariable(name: "peak", scope: !2872, file: !3, line: 243, type: !1063)
!2882 = !DILocation(line: 243, column: 17, scope: !2872)
!2883 = !DILocation(line: 245, column: 7, scope: !2884)
!2884 = distinct !DILexicalBlock(scope: !2872, file: !3, line: 245, column: 7)
!2885 = !DILocation(line: 245, column: 7, scope: !2872)
!2886 = !DILocation(line: 249, column: 12, scope: !2887)
!2887 = distinct !DILexicalBlock(scope: !2888, file: !3, line: 249, column: 11)
!2888 = distinct !DILexicalBlock(scope: !2884, file: !3, line: 246, column: 5)
!2889 = !DILocation(line: 249, column: 15, scope: !2887)
!2890 = !DILocation(line: 249, column: 23, scope: !2887)
!2891 = !DILocation(line: 249, column: 32, scope: !2887)
!2892 = !DILocation(line: 250, column: 4, scope: !2887)
!2893 = !DILocation(line: 250, column: 47, scope: !2887)
!2894 = !DILocation(line: 250, column: 50, scope: !2887)
!2895 = !DILocation(line: 250, column: 7, scope: !2887)
!2896 = !DILocation(line: 254, column: 4, scope: !2887)
!2897 = !DILocation(line: 254, column: 8, scope: !2887)
!2898 = !DILocation(line: 254, column: 11, scope: !2887)
!2899 = !DILocation(line: 254, column: 19, scope: !2887)
!2900 = !DILocation(line: 255, column: 4, scope: !2887)
!2901 = !DILocation(line: 255, column: 8, scope: !2887)
!2902 = !DILocation(line: 249, column: 11, scope: !2888)
!2903 = !DILocation(line: 257, column: 4, scope: !2904)
!2904 = distinct !DILexicalBlock(scope: !2887, file: !3, line: 256, column: 2)
!2905 = !DILocation(line: 258, column: 8, scope: !2906)
!2906 = distinct !DILexicalBlock(scope: !2904, file: !3, line: 258, column: 8)
!2907 = !DILocation(line: 258, column: 11, scope: !2906)
!2908 = !DILocation(line: 258, column: 19, scope: !2906)
!2909 = !DILocation(line: 258, column: 8, scope: !2904)
!2910 = !DILocation(line: 260, column: 24, scope: !2911)
!2911 = distinct !DILexicalBlock(scope: !2906, file: !3, line: 259, column: 6)
!2912 = !DILocation(line: 260, column: 27, scope: !2911)
!2913 = !DILocation(line: 260, column: 35, scope: !2911)
!2914 = !DILocation(line: 260, column: 42, scope: !2911)
!2915 = !DILocation(line: 260, column: 21, scope: !2911)
!2916 = !DILocation(line: 261, column: 26, scope: !2911)
!2917 = !DILocation(line: 262, column: 6, scope: !2911)
!2918 = !DILocation(line: 263, column: 14, scope: !2904)
!2919 = !DILocation(line: 264, column: 4, scope: !2904)
!2920 = !DILocation(line: 264, column: 7, scope: !2904)
!2921 = !DILocation(line: 264, column: 15, scope: !2904)
!2922 = !DILocation(line: 264, column: 21, scope: !2904)
!2923 = !DILocation(line: 264, column: 40, scope: !2904)
!2924 = !DILocation(line: 265, column: 41, scope: !2904)
!2925 = !DILocation(line: 265, column: 44, scope: !2904)
!2926 = !DILocation(line: 265, column: 52, scope: !2904)
!2927 = !DILocation(line: 265, column: 55, scope: !2904)
!2928 = !DILocation(line: 265, column: 66, scope: !2904)
!2929 = !DILocation(line: 265, column: 69, scope: !2904)
!2930 = !DILocation(line: 265, column: 11, scope: !2904)
!2931 = !DILocation(line: 266, column: 2, scope: !2904)
!2932 = !DILocalVariable(name: "n", scope: !2933, file: !3, line: 269, type: !2465)
!2933 = distinct !DILexicalBlock(scope: !2887, file: !3, line: 268, column: 2)
!2934 = !DILocation(line: 269, column: 24, scope: !2933)
!2935 = !DILocation(line: 270, column: 27, scope: !2933)
!2936 = !DILocation(line: 270, column: 30, scope: !2933)
!2937 = !DILocation(line: 270, column: 38, scope: !2933)
!2938 = !DILocation(line: 270, column: 41, scope: !2933)
!2939 = !DILocation(line: 270, column: 48, scope: !2933)
!2940 = !DILocation(line: 270, column: 51, scope: !2933)
!2941 = !DILocation(line: 270, column: 62, scope: !2933)
!2942 = !DILocation(line: 270, column: 65, scope: !2933)
!2943 = !DILocation(line: 271, column: 6, scope: !2933)
!2944 = !DILocation(line: 270, column: 8, scope: !2933)
!2945 = !DILocation(line: 270, column: 6, scope: !2933)
!2946 = !DILocation(line: 272, column: 33, scope: !2933)
!2947 = !DILocation(line: 272, column: 36, scope: !2933)
!2948 = !DILocation(line: 272, column: 4, scope: !2933)
!2949 = !DILocation(line: 274, column: 5, scope: !2888)
!2950 = !DILocation(line: 276, column: 7, scope: !2951)
!2951 = distinct !DILexicalBlock(scope: !2872, file: !3, line: 276, column: 7)
!2952 = !DILocation(line: 276, column: 10, scope: !2951)
!2953 = !DILocation(line: 276, column: 18, scope: !2951)
!2954 = !DILocation(line: 276, column: 25, scope: !2951)
!2955 = !DILocation(line: 276, column: 7, scope: !2872)
!2956 = !DILocation(line: 277, column: 36, scope: !2951)
!2957 = !DILocation(line: 277, column: 39, scope: !2951)
!2958 = !DILocation(line: 277, column: 47, scope: !2951)
!2959 = !DILocation(line: 277, column: 54, scope: !2951)
!2960 = !DILocation(line: 277, column: 5, scope: !2951)
!2961 = !DILocation(line: 277, column: 8, scope: !2951)
!2962 = !DILocation(line: 277, column: 16, scope: !2951)
!2963 = !DILocation(line: 277, column: 23, scope: !2951)
!2964 = !DILocation(line: 277, column: 34, scope: !2951)
!2965 = !DILocation(line: 279, column: 36, scope: !2951)
!2966 = !DILocation(line: 279, column: 39, scope: !2951)
!2967 = !DILocation(line: 279, column: 5, scope: !2951)
!2968 = !DILocation(line: 279, column: 8, scope: !2951)
!2969 = !DILocation(line: 279, column: 16, scope: !2951)
!2970 = !DILocation(line: 279, column: 23, scope: !2951)
!2971 = !DILocation(line: 279, column: 34, scope: !2951)
!2972 = !DILocation(line: 281, column: 7, scope: !2872)
!2973 = !DILocation(line: 281, column: 10, scope: !2872)
!2974 = !DILocation(line: 281, column: 18, scope: !2872)
!2975 = !DILocation(line: 281, column: 25, scope: !2872)
!2976 = !DILocation(line: 282, column: 25, scope: !2872)
!2977 = !DILocation(line: 282, column: 28, scope: !2872)
!2978 = !DILocation(line: 282, column: 9, scope: !2872)
!2979 = !DILocation(line: 282, column: 37, scope: !2872)
!2980 = !DILocation(line: 282, column: 7, scope: !2872)
!2981 = !DILocation(line: 280, column: 3, scope: !2872)
!2982 = !DILocation(line: 280, column: 6, scope: !2872)
!2983 = !DILocation(line: 280, column: 14, scope: !2872)
!2984 = !DILocation(line: 280, column: 21, scope: !2872)
!2985 = !DILocation(line: 281, column: 5, scope: !2872)
!2986 = !DILocation(line: 283, column: 10, scope: !2872)
!2987 = !DILocation(line: 283, column: 13, scope: !2872)
!2988 = !DILocation(line: 283, column: 21, scope: !2872)
!2989 = !DILocation(line: 283, column: 28, scope: !2872)
!2990 = !DILocation(line: 284, column: 25, scope: !2872)
!2991 = !DILocation(line: 284, column: 28, scope: !2872)
!2992 = !DILocation(line: 284, column: 9, scope: !2872)
!2993 = !DILocation(line: 284, column: 37, scope: !2872)
!2994 = !DILocation(line: 284, column: 7, scope: !2872)
!2995 = !DILocation(line: 283, column: 8, scope: !2872)
!2996 = !DILocation(line: 285, column: 7, scope: !2997)
!2997 = distinct !DILexicalBlock(scope: !2872, file: !3, line: 285, column: 7)
!2998 = !DILocation(line: 285, column: 10, scope: !2997)
!2999 = !DILocation(line: 285, column: 18, scope: !2997)
!3000 = !DILocation(line: 285, column: 25, scope: !2997)
!3001 = !DILocation(line: 285, column: 37, scope: !2997)
!3002 = !DILocation(line: 285, column: 44, scope: !2997)
!3003 = !DILocation(line: 285, column: 67, scope: !2997)
!3004 = !DILocation(line: 285, column: 65, scope: !2997)
!3005 = !DILocation(line: 285, column: 7, scope: !2872)
!3006 = !DILocation(line: 286, column: 65, scope: !2997)
!3007 = !DILocation(line: 286, column: 5, scope: !2997)
!3008 = !DILocation(line: 286, column: 8, scope: !2997)
!3009 = !DILocation(line: 286, column: 16, scope: !2997)
!3010 = !DILocation(line: 286, column: 23, scope: !2997)
!3011 = !DILocation(line: 286, column: 35, scope: !2997)
!3012 = !DILocation(line: 286, column: 42, scope: !2997)
!3013 = !DILocation(line: 286, column: 63, scope: !2997)
!3014 = !DILocation(line: 289, column: 12, scope: !3015)
!3015 = distinct !DILexicalBlock(scope: !2872, file: !3, line: 289, column: 3)
!3016 = !DILocation(line: 289, column: 15, scope: !3015)
!3017 = !DILocation(line: 289, column: 23, scope: !3015)
!3018 = !DILocation(line: 289, column: 10, scope: !3015)
!3019 = !DILocation(line: 289, column: 8, scope: !3015)
!3020 = !DILocation(line: 289, column: 32, scope: !3021)
!3021 = distinct !DILexicalBlock(scope: !3015, file: !3, line: 289, column: 3)
!3022 = !DILocation(line: 289, column: 3, scope: !3015)
!3023 = !DILocation(line: 290, column: 10, scope: !3024)
!3024 = distinct !DILexicalBlock(scope: !3021, file: !3, line: 290, column: 9)
!3025 = !DILocation(line: 290, column: 13, scope: !3024)
!3026 = !DILocation(line: 290, column: 9, scope: !3021)
!3027 = !DILocation(line: 291, column: 35, scope: !3024)
!3028 = !DILocation(line: 291, column: 38, scope: !3024)
!3029 = !DILocation(line: 291, column: 49, scope: !3024)
!3030 = !DILocation(line: 291, column: 7, scope: !3024)
!3031 = !DILocation(line: 289, column: 39, scope: !3021)
!3032 = !DILocation(line: 289, column: 42, scope: !3021)
!3033 = !DILocation(line: 289, column: 37, scope: !3021)
!3034 = !DILocation(line: 289, column: 3, scope: !3021)
!3035 = distinct !{!3035, !3022, !3036}
!3036 = !DILocation(line: 291, column: 64, scope: !3015)
!3037 = !DILocation(line: 292, column: 1, scope: !2872)
!3038 = distinct !DISubprogram(name: "cgraph_can_remove_if_no_direct_calls_p", scope: !568, file: !568, line: 724, type: !3039, scopeLine: 725, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2865)
!3039 = !DISubroutineType(types: !3040)
!3040 = !{!1367, !2465}
!3041 = !DILocalVariable(name: "node", arg: 1, scope: !3038, file: !568, line: 724, type: !2465)
!3042 = !DILocation(line: 724, column: 61, scope: !3038)
!3043 = !DILocation(line: 726, column: 12, scope: !3038)
!3044 = !DILocation(line: 726, column: 18, scope: !3038)
!3045 = !DILocation(line: 727, column: 6, scope: !3038)
!3046 = !DILocation(line: 727, column: 10, scope: !3038)
!3047 = !DILocation(line: 727, column: 35, scope: !3038)
!3048 = !DILocation(line: 727, column: 39, scope: !3038)
!3049 = !DILocation(line: 727, column: 45, scope: !3038)
!3050 = !DILocation(line: 727, column: 51, scope: !3038)
!3051 = !DILocation(line: 727, column: 38, scope: !3038)
!3052 = !DILocation(line: 0, scope: !3038)
!3053 = !DILocation(line: 726, column: 10, scope: !3038)
!3054 = !DILocation(line: 726, column: 3, scope: !3038)
!3055 = distinct !DISubprogram(name: "update_noncloned_frequencies", scope: !3, file: !3, line: 215, type: !3056, scopeLine: 217, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2865)
!3056 = !DISubroutineType(types: !3057)
!3057 = !{null, !2465, !1064, !1064}
!3058 = !DILocalVariable(name: "node", arg: 1, scope: !3055, file: !3, line: 215, type: !2465)
!3059 = !DILocation(line: 215, column: 51, scope: !3055)
!3060 = !DILocalVariable(name: "freq_scale", arg: 2, scope: !3055, file: !3, line: 216, type: !1064)
!3061 = !DILocation(line: 216, column: 14, scope: !3055)
!3062 = !DILocalVariable(name: "nest", arg: 3, scope: !3055, file: !3, line: 216, type: !1064)
!3063 = !DILocation(line: 216, column: 30, scope: !3055)
!3064 = !DILocalVariable(name: "e", scope: !3055, file: !3, line: 218, type: !2470)
!3065 = !DILocation(line: 218, column: 23, scope: !3055)
!3066 = !DILocation(line: 221, column: 8, scope: !3067)
!3067 = distinct !DILexicalBlock(scope: !3055, file: !3, line: 221, column: 7)
!3068 = !DILocation(line: 221, column: 7, scope: !3055)
!3069 = !DILocation(line: 222, column: 16, scope: !3067)
!3070 = !DILocation(line: 222, column: 5, scope: !3067)
!3071 = !DILocation(line: 223, column: 12, scope: !3072)
!3072 = distinct !DILexicalBlock(scope: !3055, file: !3, line: 223, column: 3)
!3073 = !DILocation(line: 223, column: 18, scope: !3072)
!3074 = !DILocation(line: 223, column: 10, scope: !3072)
!3075 = !DILocation(line: 223, column: 8, scope: !3072)
!3076 = !DILocation(line: 223, column: 27, scope: !3077)
!3077 = distinct !DILexicalBlock(scope: !3072, file: !3, line: 223, column: 3)
!3078 = !DILocation(line: 223, column: 3, scope: !3072)
!3079 = !DILocation(line: 225, column: 23, scope: !3080)
!3080 = distinct !DILexicalBlock(scope: !3077, file: !3, line: 224, column: 5)
!3081 = !DILocation(line: 225, column: 7, scope: !3080)
!3082 = !DILocation(line: 225, column: 10, scope: !3080)
!3083 = !DILocation(line: 225, column: 20, scope: !3080)
!3084 = !DILocation(line: 226, column: 22, scope: !3080)
!3085 = !DILocation(line: 226, column: 25, scope: !3080)
!3086 = !DILocation(line: 226, column: 49, scope: !3080)
!3087 = !DILocation(line: 226, column: 37, scope: !3080)
!3088 = !DILocation(line: 226, column: 35, scope: !3080)
!3089 = !DILocation(line: 226, column: 60, scope: !3080)
!3090 = !DILocation(line: 226, column: 7, scope: !3080)
!3091 = !DILocation(line: 226, column: 10, scope: !3080)
!3092 = !DILocation(line: 226, column: 20, scope: !3080)
!3093 = !DILocation(line: 227, column: 11, scope: !3094)
!3094 = distinct !DILexicalBlock(scope: !3080, file: !3, line: 227, column: 11)
!3095 = !DILocation(line: 227, column: 14, scope: !3094)
!3096 = !DILocation(line: 227, column: 24, scope: !3094)
!3097 = !DILocation(line: 227, column: 11, scope: !3080)
!3098 = !DILocation(line: 228, column: 9, scope: !3094)
!3099 = !DILocation(line: 228, column: 12, scope: !3094)
!3100 = !DILocation(line: 228, column: 22, scope: !3094)
!3101 = !DILocation(line: 229, column: 12, scope: !3102)
!3102 = distinct !DILexicalBlock(scope: !3080, file: !3, line: 229, column: 11)
!3103 = !DILocation(line: 229, column: 15, scope: !3102)
!3104 = !DILocation(line: 229, column: 11, scope: !3080)
!3105 = !DILocation(line: 230, column: 39, scope: !3102)
!3106 = !DILocation(line: 230, column: 42, scope: !3102)
!3107 = !DILocation(line: 230, column: 50, scope: !3102)
!3108 = !DILocation(line: 230, column: 62, scope: !3102)
!3109 = !DILocation(line: 230, column: 9, scope: !3102)
!3110 = !DILocation(line: 231, column: 5, scope: !3080)
!3111 = !DILocation(line: 223, column: 34, scope: !3077)
!3112 = !DILocation(line: 223, column: 37, scope: !3077)
!3113 = !DILocation(line: 223, column: 32, scope: !3077)
!3114 = !DILocation(line: 223, column: 3, scope: !3077)
!3115 = distinct !{!3115, !3078, !3116}
!3116 = !DILocation(line: 231, column: 5, scope: !3072)
!3117 = !DILocation(line: 232, column: 1, scope: !3055)
!3118 = distinct !DISubprogram(name: "inline_summary", scope: !3, file: !3, line: 178, type: !3119, scopeLine: 179, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2865)
!3119 = !DISubroutineType(types: !3120)
!3120 = !{!3121, !2465}
!3121 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2616, size: 64)
!3122 = !DILocalVariable(name: "node", arg: 1, scope: !3118, file: !3, line: 178, type: !2465)
!3123 = !DILocation(line: 178, column: 37, scope: !3118)
!3124 = !DILocation(line: 180, column: 11, scope: !3118)
!3125 = !DILocation(line: 180, column: 17, scope: !3118)
!3126 = !DILocation(line: 180, column: 23, scope: !3118)
!3127 = !DILocation(line: 180, column: 3, scope: !3118)
!3128 = distinct !DISubprogram(name: "cgraph_gate_early_inlining", scope: !3, file: !3, line: 1654, type: !2531, scopeLine: 1655, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2865)
!3129 = !DILocation(line: 1656, column: 10, scope: !3128)
!3130 = !DILocation(line: 1656, column: 3, scope: !3128)
!3131 = distinct !DISubprogram(name: "cgraph_early_inlining", scope: !3, file: !3, line: 1628, type: !2535, scopeLine: 1629, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2865)
!3132 = !DILocalVariable(name: "node", scope: !3131, file: !3, line: 1630, type: !2465)
!3133 = !DILocation(line: 1630, column: 23, scope: !3131)
!3134 = !DILocation(line: 1630, column: 43, scope: !3131)
!3135 = !DILocation(line: 1630, column: 30, scope: !3131)
!3136 = !DILocalVariable(name: "todo", scope: !3131, file: !3, line: 1631, type: !7)
!3137 = !DILocation(line: 1631, column: 16, scope: !3131)
!3138 = !DILocalVariable(name: "iterations", scope: !3131, file: !3, line: 1632, type: !1064)
!3139 = !DILocation(line: 1632, column: 7, scope: !3131)
!3140 = !DILocation(line: 1634, column: 7, scope: !3141)
!3141 = distinct !DILexicalBlock(scope: !3131, file: !3, line: 1634, column: 7)
!3142 = !DILocation(line: 1634, column: 18, scope: !3141)
!3143 = !DILocation(line: 1634, column: 21, scope: !3141)
!3144 = !DILocation(line: 1634, column: 7, scope: !3131)
!3145 = !DILocation(line: 1635, column: 5, scope: !3141)
!3146 = !DILocation(line: 1636, column: 3, scope: !3131)
!3147 = !DILocation(line: 1636, column: 10, scope: !3131)
!3148 = !DILocation(line: 1636, column: 23, scope: !3131)
!3149 = !DILocation(line: 1636, column: 21, scope: !3131)
!3150 = !DILocation(line: 1637, column: 10, scope: !3131)
!3151 = !DILocation(line: 1637, column: 51, scope: !3131)
!3152 = !DILocation(line: 1638, column: 18, scope: !3131)
!3153 = !DILocation(line: 1637, column: 13, scope: !3131)
!3154 = !DILocation(line: 0, scope: !3131)
!3155 = !DILocation(line: 1641, column: 7, scope: !3156)
!3156 = distinct !DILexicalBlock(scope: !3131, file: !3, line: 1640, column: 5)
!3157 = !DILocation(line: 1641, column: 7, scope: !3158)
!3158 = distinct !DILexicalBlock(scope: !3159, file: !3, line: 1641, column: 7)
!3159 = distinct !DILexicalBlock(scope: !3156, file: !3, line: 1641, column: 7)
!3160 = !DILocation(line: 1641, column: 7, scope: !3159)
!3161 = !DILocation(line: 1642, column: 38, scope: !3156)
!3162 = !DILocation(line: 1642, column: 15, scope: !3156)
!3163 = !DILocation(line: 1642, column: 12, scope: !3156)
!3164 = !DILocation(line: 1643, column: 17, scope: !3156)
!3165 = !DILocation(line: 1644, column: 7, scope: !3156)
!3166 = !DILocation(line: 1644, column: 7, scope: !3167)
!3167 = distinct !DILexicalBlock(scope: !3168, file: !3, line: 1644, column: 7)
!3168 = distinct !DILexicalBlock(scope: !3156, file: !3, line: 1644, column: 7)
!3169 = !DILocation(line: 1644, column: 7, scope: !3168)
!3170 = distinct !{!3170, !3146, !3171}
!3171 = !DILocation(line: 1645, column: 5, scope: !3131)
!3172 = !DILocation(line: 1646, column: 7, scope: !3173)
!3173 = distinct !DILexicalBlock(scope: !3131, file: !3, line: 1646, column: 7)
!3174 = !DILocation(line: 1646, column: 7, scope: !3131)
!3175 = !DILocation(line: 1647, column: 14, scope: !3173)
!3176 = !DILocation(line: 1647, column: 45, scope: !3173)
!3177 = !DILocation(line: 1647, column: 5, scope: !3173)
!3178 = !DILocation(line: 1648, column: 3, scope: !3131)
!3179 = !DILocation(line: 1648, column: 9, scope: !3131)
!3180 = !DILocation(line: 1648, column: 41, scope: !3131)
!3181 = !DILocation(line: 1649, column: 10, scope: !3131)
!3182 = !DILocation(line: 1649, column: 3, scope: !3131)
!3183 = !DILocation(line: 1650, column: 1, scope: !3131)
!3184 = distinct !DISubprogram(name: "cgraph_gate_ipa_early_inlining", scope: !3, file: !3, line: 1680, type: !2531, scopeLine: 1681, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2865)
!3185 = !DILocation(line: 1682, column: 11, scope: !3184)
!3186 = !DILocation(line: 1683, column: 4, scope: !3184)
!3187 = !DILocation(line: 1683, column: 8, scope: !3184)
!3188 = !DILocation(line: 1684, column: 4, scope: !3184)
!3189 = !DILocation(line: 1684, column: 8, scope: !3184)
!3190 = !DILocation(line: 1684, column: 34, scope: !3184)
!3191 = !DILocation(line: 1684, column: 37, scope: !3184)
!3192 = !DILocation(line: 1685, column: 8, scope: !3184)
!3193 = !DILocation(line: 1685, column: 11, scope: !3184)
!3194 = !DILocation(line: 0, scope: !3184)
!3195 = !DILocation(line: 1682, column: 10, scope: !3184)
!3196 = !DILocation(line: 1682, column: 3, scope: !3184)
!3197 = distinct !DISubprogram(name: "compute_inline_parameters", scope: !3, file: !3, line: 1861, type: !2588, scopeLine: 1862, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2865)
!3198 = !DILocalVariable(name: "node", arg: 1, scope: !3197, file: !3, line: 1861, type: !2465)
!3199 = !DILocation(line: 1861, column: 48, scope: !3197)
!3200 = !DILocalVariable(name: "self_stack_size", scope: !3197, file: !3, line: 1863, type: !1063)
!3201 = !DILocation(line: 1863, column: 17, scope: !3197)
!3202 = !DILocation(line: 1865, column: 3, scope: !3197)
!3203 = !DILocation(line: 1869, column: 21, scope: !3197)
!3204 = !DILocation(line: 1869, column: 32, scope: !3197)
!3205 = !DILocation(line: 1869, column: 19, scope: !3197)
!3206 = !DILocation(line: 1870, column: 54, scope: !3197)
!3207 = !DILocation(line: 1870, column: 19, scope: !3197)
!3208 = !DILocation(line: 1870, column: 3, scope: !3197)
!3209 = !DILocation(line: 1870, column: 26, scope: !3197)
!3210 = !DILocation(line: 1870, column: 52, scope: !3197)
!3211 = !DILocation(line: 1871, column: 39, scope: !3197)
!3212 = !DILocation(line: 1871, column: 3, scope: !3197)
!3213 = !DILocation(line: 1871, column: 9, scope: !3197)
!3214 = !DILocation(line: 1871, column: 16, scope: !3197)
!3215 = !DILocation(line: 1871, column: 37, scope: !3197)
!3216 = !DILocation(line: 1872, column: 3, scope: !3197)
!3217 = !DILocation(line: 1872, column: 9, scope: !3197)
!3218 = !DILocation(line: 1872, column: 16, scope: !3197)
!3219 = !DILocation(line: 1872, column: 35, scope: !3197)
!3220 = !DILocation(line: 1875, column: 54, scope: !3197)
!3221 = !DILocation(line: 1875, column: 60, scope: !3197)
!3222 = !DILocation(line: 1875, column: 27, scope: !3197)
!3223 = !DILocation(line: 1875, column: 3, scope: !3197)
!3224 = !DILocation(line: 1875, column: 9, scope: !3197)
!3225 = !DILocation(line: 1875, column: 15, scope: !3197)
!3226 = !DILocation(line: 1875, column: 25, scope: !3197)
!3227 = !DILocation(line: 1876, column: 7, scope: !3228)
!3228 = distinct !DILexicalBlock(scope: !3197, file: !3, line: 1876, column: 7)
!3229 = !DILocation(line: 1876, column: 13, scope: !3228)
!3230 = !DILocation(line: 1876, column: 19, scope: !3228)
!3231 = !DILocation(line: 1876, column: 29, scope: !3228)
!3232 = !DILocation(line: 1876, column: 33, scope: !3228)
!3233 = !DILocation(line: 1876, column: 39, scope: !3228)
!3234 = !DILocation(line: 1876, column: 45, scope: !3228)
!3235 = !DILocation(line: 1876, column: 7, scope: !3197)
!3236 = !DILocation(line: 1878, column: 9, scope: !3228)
!3237 = !DILocation(line: 1877, column: 5, scope: !3228)
!3238 = !DILocation(line: 1877, column: 11, scope: !3228)
!3239 = !DILocation(line: 1877, column: 17, scope: !3228)
!3240 = !DILocation(line: 1878, column: 7, scope: !3228)
!3241 = !DILocation(line: 1879, column: 33, scope: !3197)
!3242 = !DILocation(line: 1879, column: 3, scope: !3197)
!3243 = !DILocation(line: 1881, column: 39, scope: !3197)
!3244 = !DILocation(line: 1881, column: 23, scope: !3197)
!3245 = !DILocation(line: 1881, column: 46, scope: !3197)
!3246 = !DILocation(line: 1881, column: 3, scope: !3197)
!3247 = !DILocation(line: 1881, column: 9, scope: !3197)
!3248 = !DILocation(line: 1881, column: 16, scope: !3197)
!3249 = !DILocation(line: 1881, column: 21, scope: !3197)
!3250 = !DILocation(line: 1882, column: 39, scope: !3197)
!3251 = !DILocation(line: 1882, column: 23, scope: !3197)
!3252 = !DILocation(line: 1882, column: 46, scope: !3197)
!3253 = !DILocation(line: 1882, column: 3, scope: !3197)
!3254 = !DILocation(line: 1882, column: 9, scope: !3197)
!3255 = !DILocation(line: 1882, column: 16, scope: !3197)
!3256 = !DILocation(line: 1882, column: 21, scope: !3197)
!3257 = !DILocation(line: 1883, column: 3, scope: !3197)
!3258 = distinct !DISubprogram(name: "estimate_function_body_sizes", scope: !3, file: !3, line: 1776, type: !2578, scopeLine: 1777, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2865)
!3259 = !DILocalVariable(name: "node", arg: 1, scope: !3258, file: !3, line: 1776, type: !2465)
!3260 = !DILocation(line: 1776, column: 51, scope: !3258)
!3261 = !DILocalVariable(name: "time", scope: !3258, file: !3, line: 1778, type: !1062)
!3262 = !DILocation(line: 1778, column: 13, scope: !3258)
!3263 = !DILocalVariable(name: "time_inlining_benefit", scope: !3258, file: !3, line: 1779, type: !1062)
!3264 = !DILocation(line: 1779, column: 13, scope: !3258)
!3265 = !DILocalVariable(name: "size", scope: !3258, file: !3, line: 1780, type: !1064)
!3266 = !DILocation(line: 1780, column: 7, scope: !3258)
!3267 = !DILocalVariable(name: "size_inlining_benefit", scope: !3258, file: !3, line: 1781, type: !1064)
!3268 = !DILocation(line: 1781, column: 7, scope: !3258)
!3269 = !DILocalVariable(name: "bb", scope: !3258, file: !3, line: 1782, type: !1676)
!3270 = !DILocation(line: 1782, column: 15, scope: !3258)
!3271 = !DILocalVariable(name: "bsi", scope: !3258, file: !3, line: 1783, type: !3272)
!3272 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple_stmt_iterator", file: !757, line: 265, baseType: !3273)
!3273 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !757, line: 254, size: 192, elements: !3274)
!3274 = !{!3275, !3276, !3277}
!3275 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !3273, file: !757, line: 257, baseType: !1186, size: 64)
!3276 = !DIDerivedType(tag: DW_TAG_member, name: "seq", scope: !3273, file: !757, line: 263, baseType: !1181, size: 64, offset: 64)
!3277 = !DIDerivedType(tag: DW_TAG_member, name: "bb", scope: !3273, file: !757, line: 264, baseType: !1676, size: 64, offset: 128)
!3278 = !DILocation(line: 1783, column: 24, scope: !3258)
!3279 = !DILocalVariable(name: "my_function", scope: !3258, file: !3, line: 1784, type: !1505)
!3280 = !DILocation(line: 1784, column: 20, scope: !3258)
!3281 = !DILocation(line: 1784, column: 34, scope: !3258)
!3282 = !DILocalVariable(name: "arg", scope: !3258, file: !3, line: 1785, type: !1254)
!3283 = !DILocation(line: 1785, column: 8, scope: !3258)
!3284 = !DILocalVariable(name: "freq", scope: !3258, file: !3, line: 1786, type: !1064)
!3285 = !DILocation(line: 1786, column: 7, scope: !3258)
!3286 = !DILocalVariable(name: "funtype", scope: !3258, file: !3, line: 1787, type: !1254)
!3287 = !DILocation(line: 1787, column: 8, scope: !3258)
!3288 = !DILocation(line: 1787, column: 18, scope: !3258)
!3289 = !DILocation(line: 1789, column: 7, scope: !3290)
!3290 = distinct !DILexicalBlock(scope: !3258, file: !3, line: 1789, column: 7)
!3291 = !DILocation(line: 1789, column: 7, scope: !3258)
!3292 = !DILocation(line: 1790, column: 14, scope: !3290)
!3293 = !DILocation(line: 1791, column: 25, scope: !3290)
!3294 = !DILocation(line: 1791, column: 7, scope: !3290)
!3295 = !DILocation(line: 1790, column: 5, scope: !3290)
!3296 = !DILocation(line: 1793, column: 3, scope: !3258)
!3297 = !DILocation(line: 1794, column: 3, scope: !3298)
!3298 = distinct !DILexicalBlock(scope: !3258, file: !3, line: 1794, column: 3)
!3299 = !DILocation(line: 1794, column: 3, scope: !3300)
!3300 = distinct !DILexicalBlock(scope: !3298, file: !3, line: 1794, column: 3)
!3301 = !DILocation(line: 1796, column: 46, scope: !3302)
!3302 = distinct !DILexicalBlock(scope: !3300, file: !3, line: 1795, column: 5)
!3303 = !DILocation(line: 1796, column: 52, scope: !3302)
!3304 = !DILocation(line: 1796, column: 58, scope: !3302)
!3305 = !DILocation(line: 1796, column: 14, scope: !3302)
!3306 = !DILocation(line: 1796, column: 12, scope: !3302)
!3307 = !DILocation(line: 1797, column: 32, scope: !3308)
!3308 = distinct !DILexicalBlock(scope: !3302, file: !3, line: 1797, column: 7)
!3309 = !DILocation(line: 1797, column: 18, scope: !3308)
!3310 = !DILocation(line: 1797, column: 12, scope: !3308)
!3311 = !DILocation(line: 1797, column: 38, scope: !3312)
!3312 = distinct !DILexicalBlock(scope: !3308, file: !3, line: 1797, column: 7)
!3313 = !DILocation(line: 1797, column: 37, scope: !3312)
!3314 = !DILocation(line: 1797, column: 7, scope: !3308)
!3315 = !DILocalVariable(name: "stmt", scope: !3316, file: !3, line: 1799, type: !1191)
!3316 = distinct !DILexicalBlock(scope: !3312, file: !3, line: 1798, column: 2)
!3317 = !DILocation(line: 1799, column: 11, scope: !3316)
!3318 = !DILocation(line: 1799, column: 18, scope: !3316)
!3319 = !DILocalVariable(name: "this_size", scope: !3316, file: !3, line: 1800, type: !1064)
!3320 = !DILocation(line: 1800, column: 8, scope: !3316)
!3321 = !DILocation(line: 1800, column: 40, scope: !3316)
!3322 = !DILocation(line: 1800, column: 20, scope: !3316)
!3323 = !DILocalVariable(name: "this_time", scope: !3316, file: !3, line: 1801, type: !1064)
!3324 = !DILocation(line: 1801, column: 8, scope: !3316)
!3325 = !DILocation(line: 1801, column: 40, scope: !3316)
!3326 = !DILocation(line: 1801, column: 20, scope: !3316)
!3327 = !DILocation(line: 1803, column: 8, scope: !3328)
!3328 = distinct !DILexicalBlock(scope: !3316, file: !3, line: 1803, column: 8)
!3329 = !DILocation(line: 1803, column: 18, scope: !3328)
!3330 = !DILocation(line: 1803, column: 22, scope: !3328)
!3331 = !DILocation(line: 1803, column: 33, scope: !3328)
!3332 = !DILocation(line: 1803, column: 8, scope: !3316)
!3333 = !DILocation(line: 1805, column: 17, scope: !3334)
!3334 = distinct !DILexicalBlock(scope: !3328, file: !3, line: 1804, column: 6)
!3335 = !DILocation(line: 1806, column: 10, scope: !3334)
!3336 = !DILocation(line: 1806, column: 16, scope: !3334)
!3337 = !DILocation(line: 1806, column: 27, scope: !3334)
!3338 = !DILocation(line: 1805, column: 8, scope: !3334)
!3339 = !DILocation(line: 1807, column: 27, scope: !3334)
!3340 = !DILocation(line: 1807, column: 38, scope: !3334)
!3341 = !DILocation(line: 1807, column: 8, scope: !3334)
!3342 = !DILocation(line: 1808, column: 6, scope: !3334)
!3343 = !DILocation(line: 1809, column: 17, scope: !3316)
!3344 = !DILocation(line: 1809, column: 14, scope: !3316)
!3345 = !DILocation(line: 1810, column: 12, scope: !3316)
!3346 = !DILocation(line: 1810, column: 9, scope: !3316)
!3347 = !DILocation(line: 1811, column: 12, scope: !3316)
!3348 = !DILocation(line: 1811, column: 9, scope: !3316)
!3349 = !DILocation(line: 1812, column: 41, scope: !3350)
!3350 = distinct !DILexicalBlock(scope: !3316, file: !3, line: 1812, column: 8)
!3351 = !DILocation(line: 1812, column: 8, scope: !3350)
!3352 = !DILocation(line: 1812, column: 8, scope: !3316)
!3353 = !DILocation(line: 1814, column: 33, scope: !3354)
!3354 = distinct !DILexicalBlock(scope: !3350, file: !3, line: 1813, column: 6)
!3355 = !DILocation(line: 1814, column: 30, scope: !3354)
!3356 = !DILocation(line: 1815, column: 33, scope: !3354)
!3357 = !DILocation(line: 1815, column: 30, scope: !3354)
!3358 = !DILocation(line: 1816, column: 12, scope: !3359)
!3359 = distinct !DILexicalBlock(scope: !3354, file: !3, line: 1816, column: 12)
!3360 = !DILocation(line: 1816, column: 22, scope: !3359)
!3361 = !DILocation(line: 1816, column: 26, scope: !3359)
!3362 = !DILocation(line: 1816, column: 37, scope: !3359)
!3363 = !DILocation(line: 1816, column: 12, scope: !3354)
!3364 = !DILocation(line: 1817, column: 12, scope: !3359)
!3365 = !DILocation(line: 1817, column: 3, scope: !3359)
!3366 = !DILocation(line: 1818, column: 6, scope: !3354)
!3367 = !DILocation(line: 1819, column: 4, scope: !3316)
!3368 = !DILocation(line: 1820, column: 4, scope: !3316)
!3369 = !DILocation(line: 1821, column: 2, scope: !3316)
!3370 = !DILocation(line: 1797, column: 55, scope: !3312)
!3371 = !DILocation(line: 1797, column: 7, scope: !3312)
!3372 = distinct !{!3372, !3314, !3373}
!3373 = !DILocation(line: 1821, column: 2, scope: !3308)
!3374 = !DILocation(line: 1822, column: 5, scope: !3302)
!3375 = distinct !{!3375, !3297, !3376}
!3376 = !DILocation(line: 1822, column: 5, scope: !3298)
!3377 = !DILocation(line: 1823, column: 11, scope: !3258)
!3378 = !DILocation(line: 1823, column: 16, scope: !3258)
!3379 = !DILocation(line: 1823, column: 40, scope: !3258)
!3380 = !DILocation(line: 1823, column: 8, scope: !3258)
!3381 = !DILocation(line: 1824, column: 29, scope: !3258)
!3382 = !DILocation(line: 1824, column: 51, scope: !3258)
!3383 = !DILocation(line: 1825, column: 9, scope: !3258)
!3384 = !DILocation(line: 1824, column: 25, scope: !3258)
!3385 = !DILocation(line: 1826, column: 7, scope: !3386)
!3386 = distinct !DILexicalBlock(scope: !3258, file: !3, line: 1826, column: 7)
!3387 = !DILocation(line: 1826, column: 7, scope: !3258)
!3388 = !DILocation(line: 1827, column: 14, scope: !3386)
!3389 = !DILocation(line: 1828, column: 12, scope: !3386)
!3390 = !DILocation(line: 1828, column: 7, scope: !3386)
!3391 = !DILocation(line: 1828, column: 23, scope: !3386)
!3392 = !DILocation(line: 1828, column: 18, scope: !3386)
!3393 = !DILocation(line: 1829, column: 7, scope: !3386)
!3394 = !DILocation(line: 1829, column: 13, scope: !3386)
!3395 = !DILocation(line: 1827, column: 5, scope: !3386)
!3396 = !DILocation(line: 1830, column: 45, scope: !3258)
!3397 = !DILocation(line: 1830, column: 28, scope: !3258)
!3398 = !DILocation(line: 1830, column: 25, scope: !3258)
!3399 = !DILocation(line: 1831, column: 45, scope: !3258)
!3400 = !DILocation(line: 1831, column: 25, scope: !3258)
!3401 = !DILocation(line: 1832, column: 8, scope: !3402)
!3402 = distinct !DILexicalBlock(scope: !3258, file: !3, line: 1832, column: 7)
!3403 = !DILocation(line: 1832, column: 7, scope: !3258)
!3404 = !DILocalVariable(name: "cost", scope: !3405, file: !3, line: 1834, type: !1064)
!3405 = distinct !DILexicalBlock(scope: !3402, file: !3, line: 1833, column: 5)
!3406 = !DILocation(line: 1834, column: 11, scope: !3405)
!3407 = !DILocation(line: 1834, column: 38, scope: !3405)
!3408 = !DILocation(line: 1834, column: 18, scope: !3405)
!3409 = !DILocation(line: 1835, column: 32, scope: !3405)
!3410 = !DILocation(line: 1835, column: 29, scope: !3405)
!3411 = !DILocation(line: 1836, column: 32, scope: !3405)
!3412 = !DILocation(line: 1836, column: 29, scope: !3405)
!3413 = !DILocation(line: 1837, column: 5, scope: !3405)
!3414 = !DILocation(line: 1838, column: 14, scope: !3415)
!3415 = distinct !DILexicalBlock(scope: !3258, file: !3, line: 1838, column: 3)
!3416 = !DILocation(line: 1838, column: 12, scope: !3415)
!3417 = !DILocation(line: 1838, column: 8, scope: !3415)
!3418 = !DILocation(line: 1838, column: 43, scope: !3419)
!3419 = distinct !DILexicalBlock(scope: !3415, file: !3, line: 1838, column: 3)
!3420 = !DILocation(line: 1838, column: 3, scope: !3415)
!3421 = !DILocation(line: 1839, column: 10, scope: !3422)
!3422 = distinct !DILexicalBlock(scope: !3419, file: !3, line: 1839, column: 9)
!3423 = !DILocation(line: 1839, column: 9, scope: !3419)
!3424 = !DILocalVariable(name: "cost", scope: !3425, file: !3, line: 1841, type: !1064)
!3425 = distinct !DILexicalBlock(scope: !3422, file: !3, line: 1840, column: 7)
!3426 = !DILocation(line: 1841, column: 13, scope: !3425)
!3427 = !DILocation(line: 1841, column: 40, scope: !3425)
!3428 = !DILocation(line: 1841, column: 20, scope: !3425)
!3429 = !DILocation(line: 1842, column: 34, scope: !3425)
!3430 = !DILocation(line: 1842, column: 31, scope: !3425)
!3431 = !DILocation(line: 1843, column: 34, scope: !3425)
!3432 = !DILocation(line: 1843, column: 31, scope: !3425)
!3433 = !DILocation(line: 1844, column: 7, scope: !3425)
!3434 = !DILocation(line: 1838, column: 54, scope: !3419)
!3435 = !DILocation(line: 1838, column: 52, scope: !3419)
!3436 = !DILocation(line: 1838, column: 3, scope: !3419)
!3437 = distinct !{!3437, !3420, !3438}
!3438 = !DILocation(line: 1844, column: 7, scope: !3415)
!3439 = !DILocation(line: 1845, column: 7, scope: !3440)
!3440 = distinct !DILexicalBlock(scope: !3258, file: !3, line: 1845, column: 7)
!3441 = !DILocation(line: 1845, column: 29, scope: !3440)
!3442 = !DILocation(line: 1845, column: 7, scope: !3258)
!3443 = !DILocation(line: 1846, column: 27, scope: !3440)
!3444 = !DILocation(line: 1846, column: 5, scope: !3440)
!3445 = !DILocation(line: 1847, column: 7, scope: !3446)
!3446 = distinct !DILexicalBlock(scope: !3258, file: !3, line: 1847, column: 7)
!3447 = !DILocation(line: 1847, column: 12, scope: !3446)
!3448 = !DILocation(line: 1847, column: 7, scope: !3258)
!3449 = !DILocation(line: 1848, column: 10, scope: !3446)
!3450 = !DILocation(line: 1848, column: 5, scope: !3446)
!3451 = !DILocation(line: 1849, column: 38, scope: !3258)
!3452 = !DILocation(line: 1849, column: 19, scope: !3258)
!3453 = !DILocation(line: 1849, column: 3, scope: !3258)
!3454 = !DILocation(line: 1849, column: 26, scope: !3258)
!3455 = !DILocation(line: 1849, column: 36, scope: !3258)
!3456 = !DILocation(line: 1850, column: 38, scope: !3258)
!3457 = !DILocation(line: 1850, column: 19, scope: !3258)
!3458 = !DILocation(line: 1850, column: 3, scope: !3258)
!3459 = !DILocation(line: 1850, column: 26, scope: !3258)
!3460 = !DILocation(line: 1850, column: 36, scope: !3258)
!3461 = !DILocation(line: 1851, column: 7, scope: !3462)
!3462 = distinct !DILexicalBlock(scope: !3258, file: !3, line: 1851, column: 7)
!3463 = !DILocation(line: 1851, column: 7, scope: !3258)
!3464 = !DILocation(line: 1852, column: 14, scope: !3462)
!3465 = !DILocation(line: 1853, column: 12, scope: !3462)
!3466 = !DILocation(line: 1853, column: 7, scope: !3462)
!3467 = !DILocation(line: 1853, column: 23, scope: !3462)
!3468 = !DILocation(line: 1853, column: 18, scope: !3462)
!3469 = !DILocation(line: 1854, column: 7, scope: !3462)
!3470 = !DILocation(line: 1854, column: 13, scope: !3462)
!3471 = !DILocation(line: 1852, column: 5, scope: !3462)
!3472 = !DILocation(line: 1855, column: 50, scope: !3258)
!3473 = !DILocation(line: 1855, column: 19, scope: !3258)
!3474 = !DILocation(line: 1855, column: 3, scope: !3258)
!3475 = !DILocation(line: 1855, column: 26, scope: !3258)
!3476 = !DILocation(line: 1855, column: 48, scope: !3258)
!3477 = !DILocation(line: 1856, column: 50, scope: !3258)
!3478 = !DILocation(line: 1856, column: 19, scope: !3258)
!3479 = !DILocation(line: 1856, column: 3, scope: !3258)
!3480 = !DILocation(line: 1856, column: 26, scope: !3258)
!3481 = !DILocation(line: 1856, column: 48, scope: !3258)
!3482 = !DILocation(line: 1857, column: 1, scope: !3258)
!3483 = distinct !DISubprogram(name: "compute_inline_parameters_for_current", scope: !3, file: !3, line: 1890, type: !2535, scopeLine: 1891, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2865)
!3484 = !DILocation(line: 1892, column: 43, scope: !3483)
!3485 = !DILocation(line: 1892, column: 30, scope: !3483)
!3486 = !DILocation(line: 1892, column: 3, scope: !3483)
!3487 = !DILocation(line: 1893, column: 3, scope: !3483)
!3488 = distinct !DISubprogram(name: "cgraph_decide_inlining", scope: !3, file: !3, line: 1135, type: !2535, scopeLine: 1136, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2865)
!3489 = !DILocalVariable(name: "node", scope: !3488, file: !3, line: 1137, type: !2465)
!3490 = !DILocation(line: 1137, column: 23, scope: !3488)
!3491 = !DILocalVariable(name: "nnodes", scope: !3488, file: !3, line: 1138, type: !1064)
!3492 = !DILocation(line: 1138, column: 7, scope: !3488)
!3493 = !DILocalVariable(name: "order", scope: !3488, file: !3, line: 1139, type: !2464)
!3494 = !DILocation(line: 1139, column: 24, scope: !3488)
!3495 = !DILocation(line: 1140, column: 5, scope: !3488)
!3496 = !DILocalVariable(name: "old_size", scope: !3488, file: !3, line: 1141, type: !1064)
!3497 = !DILocation(line: 1141, column: 7, scope: !3488)
!3498 = !DILocalVariable(name: "i", scope: !3488, file: !3, line: 1142, type: !1064)
!3499 = !DILocation(line: 1142, column: 7, scope: !3488)
!3500 = !DILocalVariable(name: "redo_always_inline", scope: !3488, file: !3, line: 1143, type: !1367)
!3501 = !DILocation(line: 1143, column: 8, scope: !3488)
!3502 = !DILocalVariable(name: "initial_size", scope: !3488, file: !3, line: 1144, type: !1064)
!3503 = !DILocation(line: 1144, column: 7, scope: !3488)
!3504 = !DILocation(line: 1146, column: 42, scope: !3488)
!3505 = !DILocation(line: 1146, column: 3, scope: !3488)
!3506 = !DILocation(line: 1147, column: 7, scope: !3507)
!3507 = distinct !DILexicalBlock(scope: !3488, file: !3, line: 1147, column: 7)
!3508 = !DILocation(line: 1147, column: 16, scope: !3507)
!3509 = !DILocation(line: 1147, column: 19, scope: !3507)
!3510 = !DILocation(line: 1147, column: 7, scope: !3488)
!3511 = !DILocation(line: 1148, column: 5, scope: !3507)
!3512 = !DILocation(line: 1150, column: 13, scope: !3488)
!3513 = !DILocation(line: 1151, column: 15, scope: !3488)
!3514 = !DILocation(line: 1152, column: 15, scope: !3515)
!3515 = distinct !DILexicalBlock(scope: !3488, file: !3, line: 1152, column: 3)
!3516 = !DILocation(line: 1152, column: 13, scope: !3515)
!3517 = !DILocation(line: 1152, column: 8, scope: !3515)
!3518 = !DILocation(line: 1152, column: 29, scope: !3519)
!3519 = distinct !DILexicalBlock(scope: !3515, file: !3, line: 1152, column: 3)
!3520 = !DILocation(line: 1152, column: 3, scope: !3515)
!3521 = !DILocation(line: 1153, column: 9, scope: !3522)
!3522 = distinct !DILexicalBlock(scope: !3519, file: !3, line: 1153, column: 9)
!3523 = !DILocation(line: 1153, column: 15, scope: !3522)
!3524 = !DILocation(line: 1153, column: 9, scope: !3519)
!3525 = !DILocalVariable(name: "e", scope: !3526, file: !3, line: 1155, type: !2470)
!3526 = distinct !DILexicalBlock(scope: !3522, file: !3, line: 1154, column: 7)
!3527 = !DILocation(line: 1155, column: 22, scope: !3526)
!3528 = !DILocation(line: 1157, column: 2, scope: !3526)
!3529 = !DILocation(line: 1158, column: 18, scope: !3526)
!3530 = !DILocation(line: 1158, column: 24, scope: !3526)
!3531 = !DILocation(line: 1158, column: 31, scope: !3526)
!3532 = !DILocation(line: 1158, column: 15, scope: !3526)
!3533 = !DILocation(line: 1159, column: 11, scope: !3534)
!3534 = distinct !DILexicalBlock(scope: !3526, file: !3, line: 1159, column: 2)
!3535 = !DILocation(line: 1159, column: 17, scope: !3534)
!3536 = !DILocation(line: 1159, column: 9, scope: !3534)
!3537 = !DILocation(line: 1159, column: 7, scope: !3534)
!3538 = !DILocation(line: 1159, column: 26, scope: !3539)
!3539 = distinct !DILexicalBlock(scope: !3534, file: !3, line: 1159, column: 2)
!3540 = !DILocation(line: 1159, column: 2, scope: !3534)
!3541 = !DILocation(line: 1160, column: 8, scope: !3542)
!3542 = distinct !DILexicalBlock(scope: !3539, file: !3, line: 1160, column: 8)
!3543 = !DILocation(line: 1160, column: 20, scope: !3542)
!3544 = !DILocation(line: 1160, column: 23, scope: !3542)
!3545 = !DILocation(line: 1160, column: 18, scope: !3542)
!3546 = !DILocation(line: 1160, column: 8, scope: !3539)
!3547 = !DILocation(line: 1161, column: 18, scope: !3542)
!3548 = !DILocation(line: 1161, column: 21, scope: !3542)
!3549 = !DILocation(line: 1161, column: 16, scope: !3542)
!3550 = !DILocation(line: 1161, column: 6, scope: !3542)
!3551 = !DILocation(line: 1159, column: 33, scope: !3539)
!3552 = !DILocation(line: 1159, column: 36, scope: !3539)
!3553 = !DILocation(line: 1159, column: 31, scope: !3539)
!3554 = !DILocation(line: 1159, column: 2, scope: !3539)
!3555 = distinct !{!3555, !3540, !3556}
!3556 = !DILocation(line: 1161, column: 21, scope: !3534)
!3557 = !DILocation(line: 1162, column: 6, scope: !3558)
!3558 = distinct !DILexicalBlock(scope: !3526, file: !3, line: 1162, column: 6)
!3559 = !DILocation(line: 1162, column: 36, scope: !3558)
!3560 = !DILocation(line: 1162, column: 20, scope: !3558)
!3561 = !DILocation(line: 1162, column: 43, scope: !3558)
!3562 = !DILocation(line: 1162, column: 18, scope: !3558)
!3563 = !DILocation(line: 1162, column: 6, scope: !3526)
!3564 = !DILocation(line: 1163, column: 34, scope: !3558)
!3565 = !DILocation(line: 1163, column: 18, scope: !3558)
!3566 = !DILocation(line: 1163, column: 41, scope: !3558)
!3567 = !DILocation(line: 1163, column: 16, scope: !3558)
!3568 = !DILocation(line: 1163, column: 4, scope: !3558)
!3569 = !DILocation(line: 1164, column: 7, scope: !3526)
!3570 = !DILocation(line: 1152, column: 42, scope: !3519)
!3571 = !DILocation(line: 1152, column: 48, scope: !3519)
!3572 = !DILocation(line: 1152, column: 40, scope: !3519)
!3573 = !DILocation(line: 1152, column: 3, scope: !3519)
!3574 = distinct !{!3574, !3520, !3575}
!3575 = !DILocation(line: 1164, column: 7, scope: !3515)
!3576 = !DILocation(line: 1165, column: 3, scope: !3488)
!3577 = !DILocation(line: 1168, column: 18, scope: !3488)
!3578 = !DILocation(line: 1168, column: 16, scope: !3488)
!3579 = !DILocation(line: 1170, column: 30, scope: !3488)
!3580 = !DILocation(line: 1170, column: 12, scope: !3488)
!3581 = !DILocation(line: 1170, column: 10, scope: !3488)
!3582 = !DILocation(line: 1172, column: 7, scope: !3583)
!3583 = distinct !DILexicalBlock(scope: !3488, file: !3, line: 1172, column: 7)
!3584 = !DILocation(line: 1172, column: 7, scope: !3488)
!3585 = !DILocation(line: 1173, column: 14, scope: !3583)
!3586 = !DILocation(line: 1175, column: 7, scope: !3583)
!3587 = !DILocation(line: 1173, column: 5, scope: !3583)
!3588 = !DILocation(line: 1177, column: 15, scope: !3589)
!3589 = distinct !DILexicalBlock(scope: !3488, file: !3, line: 1177, column: 3)
!3590 = !DILocation(line: 1177, column: 13, scope: !3589)
!3591 = !DILocation(line: 1177, column: 8, scope: !3589)
!3592 = !DILocation(line: 1177, column: 29, scope: !3593)
!3593 = distinct !DILexicalBlock(scope: !3589, file: !3, line: 1177, column: 3)
!3594 = !DILocation(line: 1177, column: 3, scope: !3589)
!3595 = !DILocation(line: 1178, column: 5, scope: !3593)
!3596 = !DILocation(line: 1178, column: 11, scope: !3593)
!3597 = !DILocation(line: 1178, column: 15, scope: !3593)
!3598 = !DILocation(line: 1177, column: 42, scope: !3593)
!3599 = !DILocation(line: 1177, column: 48, scope: !3593)
!3600 = !DILocation(line: 1177, column: 40, scope: !3593)
!3601 = !DILocation(line: 1177, column: 3, scope: !3593)
!3602 = distinct !{!3602, !3594, !3603}
!3603 = !DILocation(line: 1178, column: 17, scope: !3589)
!3604 = !DILocation(line: 1180, column: 7, scope: !3605)
!3605 = distinct !DILexicalBlock(scope: !3488, file: !3, line: 1180, column: 7)
!3606 = !DILocation(line: 1180, column: 7, scope: !3488)
!3607 = !DILocation(line: 1181, column: 14, scope: !3605)
!3608 = !DILocation(line: 1181, column: 5, scope: !3605)
!3609 = !DILocation(line: 1185, column: 3, scope: !3488)
!3610 = !DILocation(line: 1185, column: 10, scope: !3488)
!3611 = !DILocation(line: 1187, column: 26, scope: !3612)
!3612 = distinct !DILexicalBlock(scope: !3488, file: !3, line: 1186, column: 5)
!3613 = !DILocation(line: 1188, column: 16, scope: !3614)
!3614 = distinct !DILexicalBlock(scope: !3612, file: !3, line: 1188, column: 7)
!3615 = !DILocation(line: 1188, column: 23, scope: !3614)
!3616 = !DILocation(line: 1188, column: 14, scope: !3614)
!3617 = !DILocation(line: 1188, column: 12, scope: !3614)
!3618 = !DILocation(line: 1188, column: 28, scope: !3619)
!3619 = distinct !DILexicalBlock(scope: !3614, file: !3, line: 1188, column: 7)
!3620 = !DILocation(line: 1188, column: 30, scope: !3619)
!3621 = !DILocation(line: 1188, column: 7, scope: !3614)
!3622 = !DILocalVariable(name: "e", scope: !3623, file: !3, line: 1190, type: !2470)
!3623 = distinct !DILexicalBlock(scope: !3619, file: !3, line: 1189, column: 2)
!3624 = !DILocation(line: 1190, column: 24, scope: !3623)
!3625 = !DILocalVariable(name: "next", scope: !3623, file: !3, line: 1190, type: !2470)
!3626 = !DILocation(line: 1190, column: 28, scope: !3623)
!3627 = !DILocation(line: 1192, column: 11, scope: !3623)
!3628 = !DILocation(line: 1192, column: 17, scope: !3623)
!3629 = !DILocation(line: 1192, column: 9, scope: !3623)
!3630 = !DILocation(line: 1197, column: 5, scope: !3631)
!3631 = distinct !DILexicalBlock(scope: !3623, file: !3, line: 1196, column: 8)
!3632 = !DILocation(line: 1196, column: 8, scope: !3631)
!3633 = !DILocation(line: 1197, column: 35, scope: !3631)
!3634 = !DILocation(line: 1196, column: 8, scope: !3623)
!3635 = !DILocation(line: 1199, column: 12, scope: !3636)
!3636 = distinct !DILexicalBlock(scope: !3637, file: !3, line: 1199, column: 12)
!3637 = distinct !DILexicalBlock(scope: !3631, file: !3, line: 1198, column: 6)
!3638 = !DILocation(line: 1199, column: 12, scope: !3637)
!3639 = !DILocation(line: 1200, column: 12, scope: !3636)
!3640 = !DILocation(line: 1201, column: 42, scope: !3636)
!3641 = !DILocation(line: 1201, column: 24, scope: !3636)
!3642 = !DILocation(line: 1200, column: 3, scope: !3636)
!3643 = !DILocation(line: 1202, column: 46, scope: !3637)
!3644 = !DILocation(line: 1202, column: 8, scope: !3637)
!3645 = !DILocation(line: 1203, column: 6, scope: !3637)
!3646 = !DILocation(line: 1205, column: 9, scope: !3647)
!3647 = distinct !DILexicalBlock(scope: !3623, file: !3, line: 1205, column: 8)
!3648 = !DILocation(line: 1205, column: 15, scope: !3647)
!3649 = !DILocation(line: 1205, column: 21, scope: !3647)
!3650 = !DILocation(line: 1205, column: 8, scope: !3623)
!3651 = !DILocation(line: 1206, column: 6, scope: !3647)
!3652 = !DILocation(line: 1207, column: 8, scope: !3653)
!3653 = distinct !DILexicalBlock(scope: !3623, file: !3, line: 1207, column: 8)
!3654 = !DILocation(line: 1207, column: 8, scope: !3623)
!3655 = !DILocation(line: 1208, column: 15, scope: !3653)
!3656 = !DILocation(line: 1210, column: 26, scope: !3653)
!3657 = !DILocation(line: 1210, column: 8, scope: !3653)
!3658 = !DILocation(line: 1210, column: 33, scope: !3653)
!3659 = !DILocation(line: 1210, column: 39, scope: !3653)
!3660 = !DILocation(line: 1210, column: 46, scope: !3653)
!3661 = !DILocation(line: 1208, column: 6, scope: !3653)
!3662 = !DILocation(line: 1211, column: 15, scope: !3623)
!3663 = !DILocation(line: 1211, column: 13, scope: !3623)
!3664 = !DILocation(line: 1212, column: 13, scope: !3665)
!3665 = distinct !DILexicalBlock(scope: !3623, file: !3, line: 1212, column: 4)
!3666 = !DILocation(line: 1212, column: 19, scope: !3665)
!3667 = !DILocation(line: 1212, column: 11, scope: !3665)
!3668 = !DILocation(line: 1212, column: 9, scope: !3665)
!3669 = !DILocation(line: 1212, column: 28, scope: !3670)
!3670 = distinct !DILexicalBlock(scope: !3665, file: !3, line: 1212, column: 4)
!3671 = !DILocation(line: 1212, column: 4, scope: !3665)
!3672 = !DILocation(line: 1214, column: 15, scope: !3673)
!3673 = distinct !DILexicalBlock(scope: !3670, file: !3, line: 1213, column: 6)
!3674 = !DILocation(line: 1214, column: 18, scope: !3673)
!3675 = !DILocation(line: 1214, column: 13, scope: !3673)
!3676 = !DILocation(line: 1215, column: 13, scope: !3677)
!3677 = distinct !DILexicalBlock(scope: !3673, file: !3, line: 1215, column: 12)
!3678 = !DILocation(line: 1215, column: 16, scope: !3677)
!3679 = !DILocation(line: 1215, column: 30, scope: !3677)
!3680 = !DILocation(line: 1215, column: 33, scope: !3677)
!3681 = !DILocation(line: 1215, column: 36, scope: !3677)
!3682 = !DILocation(line: 1215, column: 12, scope: !3673)
!3683 = !DILocation(line: 1216, column: 3, scope: !3677)
!3684 = !DILocation(line: 1217, column: 41, scope: !3685)
!3685 = distinct !DILexicalBlock(scope: !3673, file: !3, line: 1217, column: 12)
!3686 = !DILocation(line: 1217, column: 44, scope: !3685)
!3687 = !DILocation(line: 1217, column: 52, scope: !3685)
!3688 = !DILocation(line: 1217, column: 55, scope: !3685)
!3689 = !DILocation(line: 1218, column: 14, scope: !3685)
!3690 = !DILocation(line: 1218, column: 17, scope: !3685)
!3691 = !DILocation(line: 1217, column: 12, scope: !3685)
!3692 = !DILocation(line: 1217, column: 12, scope: !3673)
!3693 = !DILocation(line: 1219, column: 3, scope: !3685)
!3694 = !DILocation(line: 1220, column: 32, scope: !3695)
!3695 = distinct !DILexicalBlock(scope: !3673, file: !3, line: 1220, column: 12)
!3696 = !DILocation(line: 1220, column: 13, scope: !3695)
!3697 = !DILocation(line: 1220, column: 12, scope: !3673)
!3698 = !DILocation(line: 1221, column: 17, scope: !3695)
!3699 = !DILocation(line: 1222, column: 37, scope: !3700)
!3700 = distinct !DILexicalBlock(scope: !3673, file: !3, line: 1222, column: 12)
!3701 = !DILocation(line: 1222, column: 12, scope: !3700)
!3702 = !DILocation(line: 1222, column: 12, scope: !3673)
!3703 = !DILocation(line: 1223, column: 22, scope: !3700)
!3704 = !DILocation(line: 1223, column: 3, scope: !3700)
!3705 = !DILocation(line: 1224, column: 12, scope: !3706)
!3706 = distinct !DILexicalBlock(scope: !3673, file: !3, line: 1224, column: 12)
!3707 = !DILocation(line: 1224, column: 12, scope: !3673)
!3708 = !DILocation(line: 1225, column: 12, scope: !3706)
!3709 = !DILocation(line: 1227, column: 23, scope: !3706)
!3710 = !DILocation(line: 1227, column: 26, scope: !3706)
!3711 = !DILocation(line: 1227, column: 5, scope: !3706)
!3712 = !DILocation(line: 1228, column: 5, scope: !3706)
!3713 = !DILocation(line: 1228, column: 8, scope: !3706)
!3714 = !DILocation(line: 1228, column: 16, scope: !3706)
!3715 = !DILocation(line: 1228, column: 23, scope: !3706)
!3716 = !DILocation(line: 1225, column: 3, scope: !3706)
!3717 = !DILocation(line: 1229, column: 6, scope: !3673)
!3718 = !DILocation(line: 1212, column: 35, scope: !3670)
!3719 = !DILocation(line: 1212, column: 33, scope: !3670)
!3720 = !DILocation(line: 1212, column: 4, scope: !3670)
!3721 = distinct !{!3721, !3671, !3722}
!3722 = !DILocation(line: 1229, column: 6, scope: !3665)
!3723 = !DILocation(line: 1233, column: 13, scope: !3724)
!3724 = distinct !DILexicalBlock(scope: !3623, file: !3, line: 1233, column: 4)
!3725 = !DILocation(line: 1233, column: 19, scope: !3724)
!3726 = !DILocation(line: 1233, column: 11, scope: !3724)
!3727 = !DILocation(line: 1233, column: 9, scope: !3724)
!3728 = !DILocation(line: 1233, column: 28, scope: !3729)
!3729 = distinct !DILexicalBlock(scope: !3724, file: !3, line: 1233, column: 4)
!3730 = !DILocation(line: 1233, column: 4, scope: !3724)
!3731 = !DILocation(line: 1234, column: 10, scope: !3732)
!3732 = distinct !DILexicalBlock(scope: !3729, file: !3, line: 1234, column: 10)
!3733 = !DILocation(line: 1234, column: 13, scope: !3732)
!3734 = !DILocation(line: 1234, column: 10, scope: !3729)
!3735 = !DILocation(line: 1235, column: 8, scope: !3732)
!3736 = !DILocation(line: 1235, column: 11, scope: !3732)
!3737 = !DILocation(line: 1235, column: 25, scope: !3732)
!3738 = !DILocation(line: 1233, column: 35, scope: !3729)
!3739 = !DILocation(line: 1233, column: 38, scope: !3729)
!3740 = !DILocation(line: 1233, column: 33, scope: !3729)
!3741 = !DILocation(line: 1233, column: 4, scope: !3729)
!3742 = distinct !{!3742, !3730, !3743}
!3743 = !DILocation(line: 1235, column: 27, scope: !3724)
!3744 = !DILocation(line: 1236, column: 8, scope: !3745)
!3745 = distinct !DILexicalBlock(scope: !3623, file: !3, line: 1236, column: 8)
!3746 = !DILocation(line: 1236, column: 8, scope: !3623)
!3747 = !DILocation(line: 1237, column: 15, scope: !3745)
!3748 = !DILocation(line: 1239, column: 8, scope: !3745)
!3749 = !DILocation(line: 1239, column: 23, scope: !3745)
!3750 = !DILocation(line: 1239, column: 21, scope: !3745)
!3751 = !DILocation(line: 1237, column: 6, scope: !3745)
!3752 = !DILocation(line: 1240, column: 2, scope: !3623)
!3753 = !DILocation(line: 1188, column: 37, scope: !3619)
!3754 = !DILocation(line: 1188, column: 7, scope: !3619)
!3755 = distinct !{!3755, !3621, !3756}
!3756 = !DILocation(line: 1240, column: 2, scope: !3614)
!3757 = distinct !{!3757, !3609, !3758}
!3758 = !DILocation(line: 1241, column: 5, scope: !3488)
!3759 = !DILocation(line: 1243, column: 3, scope: !3488)
!3760 = !DILocation(line: 1245, column: 7, scope: !3761)
!3761 = distinct !DILexicalBlock(scope: !3488, file: !3, line: 1245, column: 7)
!3762 = !DILocation(line: 1245, column: 7, scope: !3488)
!3763 = !DILocation(line: 1247, column: 11, scope: !3764)
!3764 = distinct !DILexicalBlock(scope: !3765, file: !3, line: 1247, column: 11)
!3765 = distinct !DILexicalBlock(scope: !3761, file: !3, line: 1246, column: 5)
!3766 = !DILocation(line: 1247, column: 11, scope: !3765)
!3767 = !DILocation(line: 1248, column: 11, scope: !3764)
!3768 = !DILocation(line: 1248, column: 2, scope: !3764)
!3769 = !DILocation(line: 1251, column: 16, scope: !3770)
!3770 = distinct !DILexicalBlock(scope: !3765, file: !3, line: 1251, column: 7)
!3771 = !DILocation(line: 1251, column: 23, scope: !3770)
!3772 = !DILocation(line: 1251, column: 14, scope: !3770)
!3773 = !DILocation(line: 1251, column: 12, scope: !3770)
!3774 = !DILocation(line: 1251, column: 28, scope: !3775)
!3775 = distinct !DILexicalBlock(scope: !3770, file: !3, line: 1251, column: 7)
!3776 = !DILocation(line: 1251, column: 30, scope: !3775)
!3777 = !DILocation(line: 1251, column: 7, scope: !3770)
!3778 = !DILocation(line: 1253, column: 11, scope: !3779)
!3779 = distinct !DILexicalBlock(scope: !3775, file: !3, line: 1252, column: 2)
!3780 = !DILocation(line: 1253, column: 17, scope: !3779)
!3781 = !DILocation(line: 1253, column: 9, scope: !3779)
!3782 = !DILocation(line: 1255, column: 8, scope: !3783)
!3783 = distinct !DILexicalBlock(scope: !3779, file: !3, line: 1255, column: 8)
!3784 = !DILocation(line: 1255, column: 14, scope: !3783)
!3785 = !DILocation(line: 1256, column: 8, scope: !3783)
!3786 = !DILocation(line: 1256, column: 12, scope: !3783)
!3787 = !DILocation(line: 1256, column: 18, scope: !3783)
!3788 = !DILocation(line: 1256, column: 27, scope: !3783)
!3789 = !DILocation(line: 1257, column: 8, scope: !3783)
!3790 = !DILocation(line: 1257, column: 42, scope: !3783)
!3791 = !DILocation(line: 1257, column: 11, scope: !3783)
!3792 = !DILocation(line: 1258, column: 8, scope: !3783)
!3793 = !DILocation(line: 1258, column: 11, scope: !3783)
!3794 = !DILocation(line: 1258, column: 17, scope: !3783)
!3795 = !DILocation(line: 1258, column: 23, scope: !3783)
!3796 = !DILocation(line: 1259, column: 8, scope: !3783)
!3797 = !DILocation(line: 1259, column: 11, scope: !3783)
!3798 = !DILocation(line: 1259, column: 17, scope: !3783)
!3799 = !DILocation(line: 1259, column: 26, scope: !3783)
!3800 = !DILocation(line: 1260, column: 8, scope: !3783)
!3801 = !DILocation(line: 1260, column: 11, scope: !3783)
!3802 = !DILocation(line: 1260, column: 17, scope: !3783)
!3803 = !DILocation(line: 1260, column: 26, scope: !3783)
!3804 = !DILocation(line: 1260, column: 36, scope: !3783)
!3805 = !DILocation(line: 1260, column: 33, scope: !3783)
!3806 = !DILocation(line: 1261, column: 8, scope: !3783)
!3807 = !DILocation(line: 1261, column: 11, scope: !3783)
!3808 = !DILocation(line: 1261, column: 17, scope: !3783)
!3809 = !DILocation(line: 1261, column: 26, scope: !3783)
!3810 = !DILocation(line: 1261, column: 34, scope: !3783)
!3811 = !DILocation(line: 1261, column: 41, scope: !3783)
!3812 = !DILocation(line: 1261, column: 55, scope: !3783)
!3813 = !DILocation(line: 1261, column: 52, scope: !3783)
!3814 = !DILocation(line: 1262, column: 8, scope: !3783)
!3815 = !DILocation(line: 1262, column: 12, scope: !3783)
!3816 = !DILocation(line: 1262, column: 18, scope: !3783)
!3817 = !DILocation(line: 1262, column: 27, scope: !3783)
!3818 = !DILocation(line: 1263, column: 8, scope: !3783)
!3819 = !DILocation(line: 1263, column: 12, scope: !3783)
!3820 = !DILocation(line: 1264, column: 8, scope: !3783)
!3821 = !DILocation(line: 1264, column: 12, scope: !3783)
!3822 = !DILocation(line: 1255, column: 8, scope: !3779)
!3823 = !DILocalVariable(name: "reason", scope: !3824, file: !3, line: 1266, type: !2483)
!3824 = distinct !DILexicalBlock(scope: !3783, file: !3, line: 1265, column: 6)
!3825 = !DILocation(line: 1266, column: 31, scope: !3824)
!3826 = !DILocation(line: 1267, column: 19, scope: !3824)
!3827 = !DILocation(line: 1267, column: 17, scope: !3824)
!3828 = !DILocation(line: 1268, column: 12, scope: !3829)
!3829 = distinct !DILexicalBlock(scope: !3824, file: !3, line: 1268, column: 12)
!3830 = !DILocation(line: 1268, column: 12, scope: !3824)
!3831 = !DILocation(line: 1270, column: 14, scope: !3832)
!3832 = distinct !DILexicalBlock(scope: !3829, file: !3, line: 1269, column: 3)
!3833 = !DILocation(line: 1272, column: 25, scope: !3832)
!3834 = !DILocation(line: 1272, column: 7, scope: !3832)
!3835 = !DILocation(line: 1272, column: 32, scope: !3832)
!3836 = !DILocation(line: 1272, column: 38, scope: !3832)
!3837 = !DILocation(line: 1272, column: 45, scope: !3832)
!3838 = !DILocation(line: 1270, column: 5, scope: !3832)
!3839 = !DILocation(line: 1273, column: 14, scope: !3832)
!3840 = !DILocation(line: 1275, column: 25, scope: !3832)
!3841 = !DILocation(line: 1275, column: 31, scope: !3832)
!3842 = !DILocation(line: 1275, column: 40, scope: !3832)
!3843 = !DILocation(line: 1275, column: 7, scope: !3832)
!3844 = !DILocation(line: 1276, column: 7, scope: !3832)
!3845 = !DILocation(line: 1276, column: 13, scope: !3832)
!3846 = !DILocation(line: 1276, column: 22, scope: !3832)
!3847 = !DILocation(line: 1276, column: 30, scope: !3832)
!3848 = !DILocation(line: 1276, column: 37, scope: !3832)
!3849 = !DILocation(line: 1273, column: 5, scope: !3832)
!3850 = !DILocation(line: 1277, column: 3, scope: !3832)
!3851 = !DILocation(line: 1279, column: 40, scope: !3852)
!3852 = distinct !DILexicalBlock(scope: !3824, file: !3, line: 1279, column: 12)
!3853 = !DILocation(line: 1279, column: 46, scope: !3852)
!3854 = !DILocation(line: 1279, column: 55, scope: !3852)
!3855 = !DILocation(line: 1279, column: 63, scope: !3852)
!3856 = !DILocation(line: 1279, column: 12, scope: !3852)
!3857 = !DILocation(line: 1279, column: 12, scope: !3824)
!3858 = !DILocation(line: 1282, column: 25, scope: !3859)
!3859 = distinct !DILexicalBlock(scope: !3852, file: !3, line: 1281, column: 3)
!3860 = !DILocation(line: 1282, column: 31, scope: !3859)
!3861 = !DILocation(line: 1282, column: 5, scope: !3859)
!3862 = !DILocation(line: 1283, column: 9, scope: !3863)
!3863 = distinct !DILexicalBlock(scope: !3859, file: !3, line: 1283, column: 9)
!3864 = !DILocation(line: 1283, column: 9, scope: !3859)
!3865 = !DILocation(line: 1284, column: 16, scope: !3863)
!3866 = !DILocation(line: 1287, column: 27, scope: !3863)
!3867 = !DILocation(line: 1287, column: 33, scope: !3863)
!3868 = !DILocation(line: 1287, column: 42, scope: !3863)
!3869 = !DILocation(line: 1287, column: 9, scope: !3863)
!3870 = !DILocation(line: 1288, column: 9, scope: !3863)
!3871 = !DILocation(line: 1288, column: 15, scope: !3863)
!3872 = !DILocation(line: 1288, column: 24, scope: !3863)
!3873 = !DILocation(line: 1288, column: 32, scope: !3863)
!3874 = !DILocation(line: 1288, column: 39, scope: !3863)
!3875 = !DILocation(line: 1289, column: 9, scope: !3863)
!3876 = !DILocation(line: 1289, column: 24, scope: !3863)
!3877 = !DILocation(line: 1289, column: 22, scope: !3863)
!3878 = !DILocation(line: 1284, column: 7, scope: !3863)
!3879 = !DILocation(line: 1290, column: 3, scope: !3859)
!3880 = !DILocation(line: 1293, column: 9, scope: !3881)
!3881 = distinct !DILexicalBlock(scope: !3882, file: !3, line: 1293, column: 9)
!3882 = distinct !DILexicalBlock(scope: !3852, file: !3, line: 1292, column: 3)
!3883 = !DILocation(line: 1293, column: 9, scope: !3882)
!3884 = !DILocation(line: 1294, column: 16, scope: !3881)
!3885 = !DILocation(line: 1296, column: 59, scope: !3881)
!3886 = !DILocation(line: 1296, column: 30, scope: !3881)
!3887 = !DILocation(line: 1294, column: 7, scope: !3881)
!3888 = !DILocation(line: 1298, column: 6, scope: !3824)
!3889 = !DILocation(line: 1299, column: 2, scope: !3779)
!3890 = !DILocation(line: 1251, column: 37, scope: !3775)
!3891 = !DILocation(line: 1251, column: 7, scope: !3775)
!3892 = distinct !{!3892, !3777, !3893}
!3893 = !DILocation(line: 1299, column: 2, scope: !3770)
!3894 = !DILocation(line: 1300, column: 5, scope: !3765)
!3895 = !DILocation(line: 1303, column: 7, scope: !3896)
!3896 = distinct !DILexicalBlock(scope: !3488, file: !3, line: 1303, column: 7)
!3897 = !DILocation(line: 1303, column: 7, scope: !3488)
!3898 = !DILocation(line: 1304, column: 5, scope: !3896)
!3899 = !DILocation(line: 1306, column: 7, scope: !3900)
!3900 = distinct !DILexicalBlock(scope: !3488, file: !3, line: 1306, column: 7)
!3901 = !DILocation(line: 1306, column: 7, scope: !3488)
!3902 = !DILocation(line: 1307, column: 14, scope: !3900)
!3903 = !DILocation(line: 1310, column: 7, scope: !3900)
!3904 = !DILocation(line: 1310, column: 23, scope: !3900)
!3905 = !DILocation(line: 1310, column: 43, scope: !3900)
!3906 = !DILocation(line: 1311, column: 7, scope: !3900)
!3907 = !DILocation(line: 1307, column: 5, scope: !3900)
!3908 = !DILocation(line: 1312, column: 9, scope: !3488)
!3909 = !DILocation(line: 1312, column: 3, scope: !3488)
!3910 = !DILocation(line: 1313, column: 3, scope: !3488)
!3911 = distinct !DISubprogram(name: "inline_generate_summary", scope: !3, file: !3, line: 1967, type: !2550, scopeLine: 1968, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2865)
!3912 = !DILocalVariable(name: "node", scope: !3911, file: !3, line: 1969, type: !2465)
!3913 = !DILocation(line: 1969, column: 23, scope: !3911)
!3914 = !DILocation(line: 1972, column: 7, scope: !3911)
!3915 = !DILocation(line: 1971, column: 34, scope: !3911)
!3916 = !DILocation(line: 1974, column: 7, scope: !3917)
!3917 = distinct !DILexicalBlock(scope: !3911, file: !3, line: 1974, column: 7)
!3918 = !DILocation(line: 1974, column: 7, scope: !3911)
!3919 = !DILocation(line: 1976, column: 7, scope: !3920)
!3920 = distinct !DILexicalBlock(scope: !3917, file: !3, line: 1975, column: 5)
!3921 = !DILocation(line: 1977, column: 7, scope: !3920)
!3922 = !DILocation(line: 1978, column: 7, scope: !3920)
!3923 = !DILocation(line: 1979, column: 5, scope: !3920)
!3924 = !DILocation(line: 1981, column: 15, scope: !3925)
!3925 = distinct !DILexicalBlock(scope: !3911, file: !3, line: 1981, column: 3)
!3926 = !DILocation(line: 1981, column: 13, scope: !3925)
!3927 = !DILocation(line: 1981, column: 8, scope: !3925)
!3928 = !DILocation(line: 1981, column: 29, scope: !3929)
!3929 = distinct !DILexicalBlock(scope: !3925, file: !3, line: 1981, column: 3)
!3930 = !DILocation(line: 1981, column: 3, scope: !3925)
!3931 = !DILocation(line: 1982, column: 9, scope: !3932)
!3932 = distinct !DILexicalBlock(scope: !3929, file: !3, line: 1982, column: 9)
!3933 = !DILocation(line: 1982, column: 15, scope: !3932)
!3934 = !DILocation(line: 1982, column: 9, scope: !3929)
!3935 = !DILocation(line: 1983, column: 25, scope: !3932)
!3936 = !DILocation(line: 1983, column: 7, scope: !3932)
!3937 = !DILocation(line: 1981, column: 42, scope: !3929)
!3938 = !DILocation(line: 1981, column: 48, scope: !3929)
!3939 = !DILocation(line: 1981, column: 40, scope: !3929)
!3940 = !DILocation(line: 1981, column: 3, scope: !3929)
!3941 = distinct !{!3941, !3930, !3942}
!3942 = !DILocation(line: 1983, column: 29, scope: !3925)
!3943 = !DILocation(line: 1985, column: 3, scope: !3911)
!3944 = distinct !DISubprogram(name: "inline_write_summary", scope: !3, file: !3, line: 2042, type: !3945, scopeLine: 2043, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2865)
!3945 = !DISubroutineType(types: !3946)
!3946 = !{null, !3947}
!3947 = !DIDerivedType(tag: DW_TAG_typedef, name: "cgraph_node_set", file: !568, line: 283, baseType: !2556)
!3948 = !DILocalVariable(name: "set", arg: 1, scope: !3944, file: !3, line: 2042, type: !3947)
!3949 = !DILocation(line: 2042, column: 39, scope: !3944)
!3950 = !DILocation(line: 2044, column: 7, scope: !3951)
!3951 = distinct !DILexicalBlock(scope: !3944, file: !3, line: 2044, column: 7)
!3952 = !DILocation(line: 2044, column: 30, scope: !3951)
!3953 = !DILocation(line: 2044, column: 34, scope: !3951)
!3954 = !DILocation(line: 2044, column: 7, scope: !3944)
!3955 = !DILocation(line: 2045, column: 36, scope: !3951)
!3956 = !DILocation(line: 2045, column: 5, scope: !3951)
!3957 = !DILocation(line: 2046, column: 1, scope: !3944)
!3958 = distinct !DISubprogram(name: "inline_read_summary", scope: !3, file: !3, line: 2025, type: !2550, scopeLine: 2026, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2865)
!3959 = !DILocation(line: 2027, column: 7, scope: !3960)
!3960 = distinct !DILexicalBlock(scope: !3958, file: !3, line: 2027, column: 7)
!3961 = !DILocation(line: 2027, column: 7, scope: !3958)
!3962 = !DILocation(line: 2029, column: 7, scope: !3963)
!3963 = distinct !DILexicalBlock(scope: !3960, file: !3, line: 2028, column: 5)
!3964 = !DILocation(line: 2030, column: 12, scope: !3965)
!3965 = distinct !DILexicalBlock(scope: !3963, file: !3, line: 2030, column: 11)
!3966 = !DILocation(line: 2030, column: 11, scope: !3963)
!3967 = !DILocation(line: 2031, column: 9, scope: !3965)
!3968 = !DILocation(line: 2032, column: 5, scope: !3963)
!3969 = !DILocation(line: 2034, column: 7, scope: !3958)
!3970 = !DILocation(line: 2033, column: 34, scope: !3958)
!3971 = !DILocation(line: 2035, column: 1, scope: !3958)
!3972 = distinct !DISubprogram(name: "inline_transform", scope: !3, file: !3, line: 1990, type: !2588, scopeLine: 1991, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2865)
!3973 = !DILocalVariable(name: "node", arg: 1, scope: !3972, file: !3, line: 1990, type: !2465)
!3974 = !DILocation(line: 1990, column: 39, scope: !3972)
!3975 = !DILocalVariable(name: "todo", scope: !3972, file: !3, line: 1992, type: !7)
!3976 = !DILocation(line: 1992, column: 16, scope: !3972)
!3977 = !DILocalVariable(name: "e", scope: !3972, file: !3, line: 1993, type: !2470)
!3978 = !DILocation(line: 1993, column: 23, scope: !3972)
!3979 = !DILocation(line: 1997, column: 7, scope: !3980)
!3980 = distinct !DILexicalBlock(scope: !3972, file: !3, line: 1997, column: 7)
!3981 = !DILocation(line: 1997, column: 13, scope: !3980)
!3982 = !DILocation(line: 1997, column: 7, scope: !3972)
!3983 = !DILocation(line: 1998, column: 5, scope: !3980)
!3984 = !DILocation(line: 2002, column: 40, scope: !3985)
!3985 = distinct !DILexicalBlock(scope: !3972, file: !3, line: 2002, column: 7)
!3986 = !DILocation(line: 2002, column: 46, scope: !3985)
!3987 = !DILocation(line: 2002, column: 7, scope: !3985)
!3988 = !DILocation(line: 2002, column: 7, scope: !3972)
!3989 = !DILocation(line: 2003, column: 32, scope: !3985)
!3990 = !DILocation(line: 2003, column: 5, scope: !3985)
!3991 = !DILocation(line: 2005, column: 12, scope: !3992)
!3992 = distinct !DILexicalBlock(scope: !3972, file: !3, line: 2005, column: 3)
!3993 = !DILocation(line: 2005, column: 18, scope: !3992)
!3994 = !DILocation(line: 2005, column: 10, scope: !3992)
!3995 = !DILocation(line: 2005, column: 8, scope: !3992)
!3996 = !DILocation(line: 2005, column: 27, scope: !3997)
!3997 = distinct !DILexicalBlock(scope: !3992, file: !3, line: 2005, column: 3)
!3998 = !DILocation(line: 2005, column: 3, scope: !3992)
!3999 = !DILocation(line: 2006, column: 10, scope: !4000)
!4000 = distinct !DILexicalBlock(scope: !3997, file: !3, line: 2006, column: 9)
!4001 = !DILocation(line: 2006, column: 13, scope: !4000)
!4002 = !DILocation(line: 2006, column: 27, scope: !4000)
!4003 = !DILocation(line: 2006, column: 30, scope: !4000)
!4004 = !DILocation(line: 2006, column: 9, scope: !3997)
!4005 = !DILocation(line: 2007, column: 7, scope: !4000)
!4006 = !DILocation(line: 2005, column: 34, scope: !3997)
!4007 = !DILocation(line: 2005, column: 37, scope: !3997)
!4008 = !DILocation(line: 2005, column: 32, scope: !3997)
!4009 = !DILocation(line: 2005, column: 3, scope: !3997)
!4010 = distinct !{!4010, !3998, !4011}
!4011 = !DILocation(line: 2007, column: 7, scope: !3992)
!4012 = !DILocation(line: 2009, column: 7, scope: !4013)
!4013 = distinct !DILexicalBlock(scope: !3972, file: !3, line: 2009, column: 7)
!4014 = !DILocation(line: 2009, column: 7, scope: !3972)
!4015 = !DILocation(line: 2011, column: 7, scope: !4016)
!4016 = distinct !DILexicalBlock(scope: !4013, file: !3, line: 2010, column: 5)
!4017 = !DILocation(line: 2011, column: 7, scope: !4018)
!4018 = distinct !DILexicalBlock(scope: !4019, file: !3, line: 2011, column: 7)
!4019 = distinct !DILexicalBlock(scope: !4016, file: !3, line: 2011, column: 7)
!4020 = !DILocation(line: 2011, column: 7, scope: !4019)
!4021 = !DILocation(line: 2012, column: 37, scope: !4016)
!4022 = !DILocation(line: 2012, column: 14, scope: !4016)
!4023 = !DILocation(line: 2012, column: 12, scope: !4016)
!4024 = !DILocation(line: 2013, column: 7, scope: !4016)
!4025 = !DILocation(line: 2013, column: 7, scope: !4026)
!4026 = distinct !DILexicalBlock(scope: !4027, file: !3, line: 2013, column: 7)
!4027 = distinct !DILexicalBlock(scope: !4016, file: !3, line: 2013, column: 7)
!4028 = !DILocation(line: 2013, column: 7, scope: !4027)
!4029 = !DILocation(line: 2014, column: 5, scope: !4016)
!4030 = !DILocation(line: 2015, column: 3, scope: !3972)
!4031 = !DILocation(line: 2015, column: 9, scope: !3972)
!4032 = !DILocation(line: 2015, column: 41, scope: !3972)
!4033 = !DILocation(line: 2016, column: 3, scope: !3972)
!4034 = !DILocation(line: 2016, column: 9, scope: !3972)
!4035 = !DILocation(line: 2016, column: 24, scope: !3972)
!4036 = !DILocation(line: 2017, column: 10, scope: !3972)
!4037 = !DILocation(line: 2017, column: 17, scope: !3972)
!4038 = !DILocation(line: 2017, column: 15, scope: !3972)
!4039 = !DILocation(line: 2017, column: 3, scope: !3972)
!4040 = !DILocation(line: 2018, column: 1, scope: !3972)
!4041 = distinct !DISubprogram(name: "gt_ggc_ma_order", scope: !2827, file: !2827, line: 26, type: !1611, scopeLine: 27, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2865)
!4042 = !DILocalVariable(name: "x_p", arg: 1, scope: !4041, file: !2827, line: 26, type: !1068)
!4043 = !DILocation(line: 26, column: 41, scope: !4041)
!4044 = !DILocation(line: 28, column: 7, scope: !4045)
!4045 = distinct !DILexicalBlock(scope: !4041, file: !2827, line: 28, column: 7)
!4046 = !DILocation(line: 28, column: 13, scope: !4045)
!4047 = !DILocation(line: 28, column: 7, scope: !4041)
!4048 = !DILocalVariable(name: "i0", scope: !4049, file: !2827, line: 29, type: !1065)
!4049 = distinct !DILexicalBlock(scope: !4045, file: !2827, line: 28, column: 22)
!4050 = !DILocation(line: 29, column: 12, scope: !4049)
!4051 = !DILocation(line: 30, column: 13, scope: !4052)
!4052 = distinct !DILexicalBlock(scope: !4049, file: !2827, line: 30, column: 5)
!4053 = !DILocation(line: 30, column: 10, scope: !4052)
!4054 = !DILocation(line: 30, column: 18, scope: !4055)
!4055 = distinct !DILexicalBlock(scope: !4052, file: !2827, line: 30, column: 5)
!4056 = !DILocation(line: 30, column: 33, scope: !4055)
!4057 = !DILocation(line: 30, column: 24, scope: !4055)
!4058 = !DILocation(line: 30, column: 21, scope: !4055)
!4059 = !DILocation(line: 30, column: 5, scope: !4052)
!4060 = !DILocation(line: 31, column: 7, scope: !4061)
!4061 = distinct !DILexicalBlock(scope: !4055, file: !2827, line: 30, column: 48)
!4062 = !DILocation(line: 31, column: 7, scope: !4063)
!4063 = distinct !DILexicalBlock(scope: !4064, file: !2827, line: 31, column: 7)
!4064 = distinct !DILexicalBlock(scope: !4061, file: !2827, line: 31, column: 7)
!4065 = !DILocation(line: 31, column: 7, scope: !4064)
!4066 = !DILocation(line: 32, column: 5, scope: !4061)
!4067 = !DILocation(line: 30, column: 44, scope: !4055)
!4068 = !DILocation(line: 30, column: 5, scope: !4055)
!4069 = distinct !{!4069, !4059, !4070}
!4070 = !DILocation(line: 32, column: 5, scope: !4052)
!4071 = !DILocation(line: 33, column: 5, scope: !4049)
!4072 = !DILocalVariable(name: "a__", scope: !4073, file: !2827, line: 33, type: !4074)
!4073 = distinct !DILexicalBlock(scope: !4049, file: !2827, line: 33, column: 5)
!4074 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1601)
!4075 = !DILocation(line: 33, column: 5, scope: !4073)
!4076 = !DILocation(line: 33, column: 5, scope: !4077)
!4077 = distinct !DILexicalBlock(scope: !4073, file: !2827, line: 33, column: 5)
!4078 = !DILocation(line: 34, column: 3, scope: !4049)
!4079 = !DILocation(line: 35, column: 1, scope: !4041)
!4080 = distinct !DISubprogram(name: "gt_pch_na_order", scope: !2827, file: !2827, line: 57, type: !1611, scopeLine: 58, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2865)
!4081 = !DILocalVariable(name: "x_p", arg: 1, scope: !4080, file: !2827, line: 57, type: !1068)
!4082 = !DILocation(line: 57, column: 41, scope: !4080)
!4083 = !DILocation(line: 59, column: 7, scope: !4084)
!4084 = distinct !DILexicalBlock(scope: !4080, file: !2827, line: 59, column: 7)
!4085 = !DILocation(line: 59, column: 13, scope: !4084)
!4086 = !DILocation(line: 59, column: 7, scope: !4080)
!4087 = !DILocalVariable(name: "i1", scope: !4088, file: !2827, line: 60, type: !1065)
!4088 = distinct !DILexicalBlock(scope: !4084, file: !2827, line: 59, column: 22)
!4089 = !DILocation(line: 60, column: 12, scope: !4088)
!4090 = !DILocation(line: 61, column: 13, scope: !4091)
!4091 = distinct !DILexicalBlock(scope: !4088, file: !2827, line: 61, column: 5)
!4092 = !DILocation(line: 61, column: 10, scope: !4091)
!4093 = !DILocation(line: 61, column: 18, scope: !4094)
!4094 = distinct !DILexicalBlock(scope: !4091, file: !2827, line: 61, column: 5)
!4095 = !DILocation(line: 61, column: 33, scope: !4094)
!4096 = !DILocation(line: 61, column: 24, scope: !4094)
!4097 = !DILocation(line: 61, column: 21, scope: !4094)
!4098 = !DILocation(line: 61, column: 5, scope: !4091)
!4099 = !DILocation(line: 62, column: 7, scope: !4100)
!4100 = distinct !DILexicalBlock(scope: !4094, file: !2827, line: 61, column: 48)
!4101 = !DILocation(line: 62, column: 7, scope: !4102)
!4102 = distinct !DILexicalBlock(scope: !4103, file: !2827, line: 62, column: 7)
!4103 = distinct !DILexicalBlock(scope: !4100, file: !2827, line: 62, column: 7)
!4104 = !DILocation(line: 62, column: 7, scope: !4103)
!4105 = !DILocation(line: 63, column: 5, scope: !4100)
!4106 = !DILocation(line: 61, column: 44, scope: !4094)
!4107 = !DILocation(line: 61, column: 5, scope: !4094)
!4108 = distinct !{!4108, !4098, !4109}
!4109 = !DILocation(line: 63, column: 5, scope: !4091)
!4110 = !DILocation(line: 64, column: 25, scope: !4088)
!4111 = !DILocation(line: 64, column: 5, scope: !4088)
!4112 = !DILocation(line: 65, column: 3, scope: !4088)
!4113 = !DILocation(line: 66, column: 1, scope: !4080)
!4114 = distinct !DISubprogram(name: "cgraph_decide_inlining_incrementally", scope: !3, file: !3, line: 1415, type: !4115, scopeLine: 1418, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2865)
!4115 = !DISubroutineType(types: !4116)
!4116 = !{!1367, !2465, !729, !1064}
!4117 = !DILocalVariable(name: "node", arg: 1, scope: !4114, file: !3, line: 1415, type: !2465)
!4118 = !DILocation(line: 1415, column: 59, scope: !4114)
!4119 = !DILocalVariable(name: "mode", arg: 2, scope: !4114, file: !3, line: 1416, type: !729)
!4120 = !DILocation(line: 1416, column: 30, scope: !4114)
!4121 = !DILocalVariable(name: "depth", arg: 3, scope: !4114, file: !3, line: 1417, type: !1064)
!4122 = !DILocation(line: 1417, column: 15, scope: !4114)
!4123 = !DILocalVariable(name: "e", scope: !4114, file: !3, line: 1419, type: !2470)
!4124 = !DILocation(line: 1419, column: 23, scope: !4114)
!4125 = !DILocalVariable(name: "inlined", scope: !4114, file: !3, line: 1420, type: !1367)
!4126 = !DILocation(line: 1420, column: 8, scope: !4114)
!4127 = !DILocalVariable(name: "failed_reason", scope: !4114, file: !3, line: 1421, type: !2483)
!4128 = !DILocation(line: 1421, column: 26, scope: !4114)
!4129 = !DILocalVariable(name: "old_mode", scope: !4114, file: !3, line: 1422, type: !729)
!4130 = !DILocation(line: 1422, column: 22, scope: !4114)
!4131 = !DILocation(line: 1428, column: 43, scope: !4114)
!4132 = !DILocation(line: 1428, column: 49, scope: !4114)
!4133 = !DILocation(line: 1428, column: 35, scope: !4114)
!4134 = !DILocation(line: 1428, column: 14, scope: !4114)
!4135 = !DILocation(line: 1428, column: 12, scope: !4114)
!4136 = !DILocation(line: 1430, column: 7, scope: !4137)
!4137 = distinct !DILexicalBlock(scope: !4114, file: !3, line: 1430, column: 7)
!4138 = !DILocation(line: 1430, column: 12, scope: !4137)
!4139 = !DILocation(line: 1430, column: 36, scope: !4137)
!4140 = !DILocation(line: 1430, column: 39, scope: !4137)
!4141 = !DILocation(line: 1430, column: 44, scope: !4137)
!4142 = !DILocation(line: 1431, column: 7, scope: !4137)
!4143 = !DILocation(line: 1431, column: 39, scope: !4137)
!4144 = !DILocation(line: 1431, column: 10, scope: !4137)
!4145 = !DILocation(line: 1431, column: 69, scope: !4137)
!4146 = !DILocation(line: 1430, column: 7, scope: !4114)
!4147 = !DILocation(line: 1433, column: 11, scope: !4148)
!4148 = distinct !DILexicalBlock(scope: !4149, file: !3, line: 1433, column: 11)
!4149 = distinct !DILexicalBlock(scope: !4137, file: !3, line: 1432, column: 5)
!4150 = !DILocation(line: 1433, column: 11, scope: !4149)
!4151 = !DILocation(line: 1435, column: 15, scope: !4152)
!4152 = distinct !DILexicalBlock(scope: !4148, file: !3, line: 1434, column: 2)
!4153 = !DILocation(line: 1435, column: 26, scope: !4152)
!4154 = !DILocation(line: 1435, column: 4, scope: !4152)
!4155 = !DILocation(line: 1436, column: 13, scope: !4152)
!4156 = !DILocation(line: 1436, column: 61, scope: !4152)
!4157 = !DILocation(line: 1436, column: 43, scope: !4152)
!4158 = !DILocation(line: 1436, column: 4, scope: !4152)
!4159 = !DILocation(line: 1437, column: 2, scope: !4152)
!4160 = !DILocation(line: 1438, column: 12, scope: !4149)
!4161 = !DILocation(line: 1439, column: 5, scope: !4149)
!4162 = !DILocation(line: 1441, column: 32, scope: !4114)
!4163 = !DILocation(line: 1441, column: 23, scope: !4114)
!4164 = !DILocation(line: 1441, column: 15, scope: !4114)
!4165 = !DILocation(line: 1441, column: 3, scope: !4114)
!4166 = !DILocation(line: 1441, column: 9, scope: !4114)
!4167 = !DILocation(line: 1441, column: 13, scope: !4114)
!4168 = !DILocation(line: 1444, column: 7, scope: !4169)
!4169 = distinct !DILexicalBlock(scope: !4114, file: !3, line: 1444, column: 7)
!4170 = !DILocation(line: 1444, column: 12, scope: !4169)
!4171 = !DILocation(line: 1444, column: 7, scope: !4114)
!4172 = !DILocation(line: 1445, column: 14, scope: !4173)
!4173 = distinct !DILexicalBlock(scope: !4169, file: !3, line: 1445, column: 5)
!4174 = !DILocation(line: 1445, column: 20, scope: !4173)
!4175 = !DILocation(line: 1445, column: 12, scope: !4173)
!4176 = !DILocation(line: 1445, column: 10, scope: !4173)
!4177 = !DILocation(line: 1445, column: 29, scope: !4178)
!4178 = distinct !DILexicalBlock(scope: !4173, file: !3, line: 1445, column: 5)
!4179 = !DILocation(line: 1445, column: 5, scope: !4173)
!4180 = !DILocation(line: 1447, column: 7, scope: !4181)
!4181 = distinct !DILexicalBlock(scope: !4182, file: !3, line: 1447, column: 6)
!4182 = distinct !DILexicalBlock(scope: !4178, file: !3, line: 1446, column: 7)
!4183 = !DILocation(line: 1447, column: 10, scope: !4181)
!4184 = !DILocation(line: 1447, column: 18, scope: !4181)
!4185 = !DILocation(line: 1447, column: 24, scope: !4181)
!4186 = !DILocation(line: 1448, column: 6, scope: !4181)
!4187 = !DILocation(line: 1448, column: 10, scope: !4181)
!4188 = !DILocation(line: 1448, column: 15, scope: !4181)
!4189 = !DILocation(line: 1448, column: 29, scope: !4181)
!4190 = !DILocation(line: 1448, column: 33, scope: !4181)
!4191 = !DILocation(line: 1448, column: 36, scope: !4181)
!4192 = !DILocation(line: 1448, column: 44, scope: !4181)
!4193 = !DILocation(line: 1448, column: 50, scope: !4181)
!4194 = !DILocation(line: 1447, column: 6, scope: !4182)
!4195 = !DILocation(line: 1449, column: 4, scope: !4181)
!4196 = !DILocation(line: 1450, column: 6, scope: !4197)
!4197 = distinct !DILexicalBlock(scope: !4182, file: !3, line: 1450, column: 6)
!4198 = !DILocation(line: 1450, column: 9, scope: !4197)
!4199 = !DILocation(line: 1450, column: 6, scope: !4182)
!4200 = !DILocation(line: 1451, column: 4, scope: !4197)
!4201 = !DILocation(line: 1454, column: 7, scope: !4202)
!4202 = distinct !DILexicalBlock(scope: !4182, file: !3, line: 1454, column: 6)
!4203 = !DILocation(line: 1454, column: 10, scope: !4202)
!4204 = !DILocation(line: 1454, column: 24, scope: !4202)
!4205 = !DILocation(line: 1454, column: 27, scope: !4202)
!4206 = !DILocation(line: 1454, column: 32, scope: !4202)
!4207 = !DILocation(line: 1454, column: 6, scope: !4182)
!4208 = !DILocation(line: 1456, column: 29, scope: !4209)
!4209 = distinct !DILexicalBlock(scope: !4202, file: !3, line: 1455, column: 4)
!4210 = !DILocation(line: 1456, column: 32, scope: !4209)
!4211 = !DILocation(line: 1456, column: 38, scope: !4209)
!4212 = !DILocation(line: 1456, column: 17, scope: !4209)
!4213 = !DILocation(line: 1456, column: 14, scope: !4209)
!4214 = !DILocation(line: 1457, column: 6, scope: !4209)
!4215 = !DILocation(line: 1459, column: 6, scope: !4216)
!4216 = distinct !DILexicalBlock(scope: !4182, file: !3, line: 1459, column: 6)
!4217 = !DILocation(line: 1459, column: 6, scope: !4182)
!4218 = !DILocation(line: 1461, column: 17, scope: !4219)
!4219 = distinct !DILexicalBlock(scope: !4216, file: !3, line: 1460, column: 4)
!4220 = !DILocation(line: 1461, column: 28, scope: !4219)
!4221 = !DILocation(line: 1461, column: 6, scope: !4219)
!4222 = !DILocation(line: 1462, column: 15, scope: !4219)
!4223 = !DILocation(line: 1464, column: 26, scope: !4219)
!4224 = !DILocation(line: 1464, column: 29, scope: !4219)
!4225 = !DILocation(line: 1464, column: 8, scope: !4219)
!4226 = !DILocation(line: 1462, column: 6, scope: !4219)
!4227 = !DILocation(line: 1465, column: 4, scope: !4219)
!4228 = !DILocation(line: 1466, column: 35, scope: !4229)
!4229 = distinct !DILexicalBlock(scope: !4182, file: !3, line: 1466, column: 6)
!4230 = !DILocation(line: 1466, column: 41, scope: !4229)
!4231 = !DILocation(line: 1466, column: 44, scope: !4229)
!4232 = !DILocation(line: 1466, column: 53, scope: !4229)
!4233 = !DILocation(line: 1466, column: 56, scope: !4229)
!4234 = !DILocation(line: 1466, column: 6, scope: !4229)
!4235 = !DILocation(line: 1466, column: 6, scope: !4182)
!4236 = !DILocation(line: 1468, column: 10, scope: !4237)
!4237 = distinct !DILexicalBlock(scope: !4238, file: !3, line: 1468, column: 10)
!4238 = distinct !DILexicalBlock(scope: !4229, file: !3, line: 1467, column: 4)
!4239 = !DILocation(line: 1468, column: 10, scope: !4238)
!4240 = !DILocation(line: 1470, column: 14, scope: !4241)
!4241 = distinct !DILexicalBlock(scope: !4237, file: !3, line: 1469, column: 8)
!4242 = !DILocation(line: 1470, column: 25, scope: !4241)
!4243 = !DILocation(line: 1470, column: 3, scope: !4241)
!4244 = !DILocation(line: 1471, column: 12, scope: !4241)
!4245 = !DILocation(line: 1471, column: 3, scope: !4241)
!4246 = !DILocation(line: 1472, column: 8, scope: !4241)
!4247 = !DILocation(line: 1473, column: 6, scope: !4238)
!4248 = !DILocation(line: 1475, column: 26, scope: !4249)
!4249 = distinct !DILexicalBlock(scope: !4182, file: !3, line: 1475, column: 6)
!4250 = !DILocation(line: 1475, column: 7, scope: !4249)
!4251 = !DILocation(line: 1475, column: 6, scope: !4182)
!4252 = !DILocation(line: 1477, column: 10, scope: !4253)
!4253 = distinct !DILexicalBlock(scope: !4254, file: !3, line: 1477, column: 10)
!4254 = distinct !DILexicalBlock(scope: !4249, file: !3, line: 1476, column: 4)
!4255 = !DILocation(line: 1477, column: 10, scope: !4254)
!4256 = !DILocation(line: 1479, column: 14, scope: !4257)
!4257 = distinct !DILexicalBlock(scope: !4253, file: !3, line: 1478, column: 8)
!4258 = !DILocation(line: 1479, column: 25, scope: !4257)
!4259 = !DILocation(line: 1479, column: 3, scope: !4257)
!4260 = !DILocation(line: 1480, column: 12, scope: !4257)
!4261 = !DILocation(line: 1482, column: 55, scope: !4257)
!4262 = !DILocation(line: 1482, column: 58, scope: !4257)
!4263 = !DILocation(line: 1482, column: 26, scope: !4257)
!4264 = !DILocation(line: 1480, column: 3, scope: !4257)
!4265 = !DILocation(line: 1483, column: 8, scope: !4257)
!4266 = !DILocation(line: 1484, column: 6, scope: !4254)
!4267 = !DILocation(line: 1486, column: 23, scope: !4268)
!4268 = distinct !DILexicalBlock(scope: !4182, file: !3, line: 1486, column: 6)
!4269 = !DILocation(line: 1486, column: 6, scope: !4268)
!4270 = !DILocation(line: 1487, column: 26, scope: !4268)
!4271 = !DILocation(line: 1487, column: 9, scope: !4268)
!4272 = !DILocation(line: 1487, column: 6, scope: !4268)
!4273 = !DILocation(line: 1486, column: 6, scope: !4182)
!4274 = !DILocation(line: 1489, column: 10, scope: !4275)
!4275 = distinct !DILexicalBlock(scope: !4276, file: !3, line: 1489, column: 10)
!4276 = distinct !DILexicalBlock(scope: !4268, file: !3, line: 1488, column: 4)
!4277 = !DILocation(line: 1489, column: 10, scope: !4276)
!4278 = !DILocation(line: 1491, column: 14, scope: !4279)
!4279 = distinct !DILexicalBlock(scope: !4275, file: !3, line: 1490, column: 8)
!4280 = !DILocation(line: 1491, column: 25, scope: !4279)
!4281 = !DILocation(line: 1491, column: 3, scope: !4279)
!4282 = !DILocation(line: 1492, column: 12, scope: !4279)
!4283 = !DILocation(line: 1492, column: 3, scope: !4279)
!4284 = !DILocation(line: 1493, column: 8, scope: !4279)
!4285 = !DILocation(line: 1494, column: 6, scope: !4276)
!4286 = !DILocation(line: 1496, column: 7, scope: !4287)
!4287 = distinct !DILexicalBlock(scope: !4182, file: !3, line: 1496, column: 6)
!4288 = !DILocation(line: 1496, column: 10, scope: !4287)
!4289 = !DILocation(line: 1496, column: 18, scope: !4287)
!4290 = !DILocation(line: 1496, column: 6, scope: !4182)
!4291 = !DILocation(line: 1498, column: 10, scope: !4292)
!4292 = distinct !DILexicalBlock(scope: !4293, file: !3, line: 1498, column: 10)
!4293 = distinct !DILexicalBlock(scope: !4287, file: !3, line: 1497, column: 4)
!4294 = !DILocation(line: 1498, column: 10, scope: !4293)
!4295 = !DILocation(line: 1500, column: 14, scope: !4296)
!4296 = distinct !DILexicalBlock(scope: !4292, file: !3, line: 1499, column: 8)
!4297 = !DILocation(line: 1500, column: 25, scope: !4296)
!4298 = !DILocation(line: 1500, column: 3, scope: !4296)
!4299 = !DILocation(line: 1501, column: 12, scope: !4296)
!4300 = !DILocation(line: 1501, column: 3, scope: !4296)
!4301 = !DILocation(line: 1503, column: 8, scope: !4296)
!4302 = !DILocation(line: 1504, column: 6, scope: !4293)
!4303 = !DILocation(line: 1506, column: 25, scope: !4182)
!4304 = !DILocation(line: 1506, column: 28, scope: !4182)
!4305 = !DILocation(line: 1506, column: 34, scope: !4182)
!4306 = !DILocation(line: 1506, column: 13, scope: !4182)
!4307 = !DILocation(line: 1506, column: 10, scope: !4182)
!4308 = !DILocation(line: 1507, column: 7, scope: !4182)
!4309 = !DILocation(line: 1445, column: 36, scope: !4178)
!4310 = !DILocation(line: 1445, column: 39, scope: !4178)
!4311 = !DILocation(line: 1445, column: 34, scope: !4178)
!4312 = !DILocation(line: 1445, column: 5, scope: !4178)
!4313 = distinct !{!4313, !4179, !4314}
!4314 = !DILocation(line: 1507, column: 7, scope: !4173)
!4315 = !DILocation(line: 1510, column: 7, scope: !4316)
!4316 = distinct !DILexicalBlock(scope: !4114, file: !3, line: 1510, column: 7)
!4317 = !DILocation(line: 1510, column: 12, scope: !4316)
!4318 = !DILocation(line: 1510, column: 26, scope: !4316)
!4319 = !DILocation(line: 1510, column: 29, scope: !4316)
!4320 = !DILocation(line: 1510, column: 34, scope: !4316)
!4321 = !DILocation(line: 1513, column: 7, scope: !4316)
!4322 = !DILocation(line: 1513, column: 11, scope: !4316)
!4323 = !DILocation(line: 1513, column: 17, scope: !4316)
!4324 = !DILocation(line: 1513, column: 23, scope: !4316)
!4325 = !DILocation(line: 1510, column: 7, scope: !4114)
!4326 = !DILocalVariable(name: "visited", scope: !4327, file: !3, line: 1515, type: !1069)
!4327 = distinct !DILexicalBlock(scope: !4316, file: !3, line: 1514, column: 5)
!4328 = !DILocation(line: 1515, column: 14, scope: !4327)
!4329 = !DILocation(line: 1515, column: 24, scope: !4327)
!4330 = !DILocation(line: 1516, column: 16, scope: !4331)
!4331 = distinct !DILexicalBlock(scope: !4327, file: !3, line: 1516, column: 7)
!4332 = !DILocation(line: 1516, column: 22, scope: !4331)
!4333 = !DILocation(line: 1516, column: 14, scope: !4331)
!4334 = !DILocation(line: 1516, column: 12, scope: !4331)
!4335 = !DILocation(line: 1516, column: 31, scope: !4336)
!4336 = distinct !DILexicalBlock(scope: !4331, file: !3, line: 1516, column: 7)
!4337 = !DILocation(line: 1516, column: 7, scope: !4331)
!4338 = !DILocalVariable(name: "allowed_growth", scope: !4339, file: !3, line: 1518, type: !1064)
!4339 = distinct !DILexicalBlock(scope: !4336, file: !3, line: 1517, column: 2)
!4340 = !DILocation(line: 1518, column: 8, scope: !4339)
!4341 = !DILocation(line: 1519, column: 9, scope: !4342)
!4342 = distinct !DILexicalBlock(scope: !4339, file: !3, line: 1519, column: 8)
!4343 = !DILocation(line: 1519, column: 12, scope: !4342)
!4344 = !DILocation(line: 1519, column: 20, scope: !4342)
!4345 = !DILocation(line: 1519, column: 26, scope: !4342)
!4346 = !DILocation(line: 1520, column: 8, scope: !4342)
!4347 = !DILocation(line: 1520, column: 12, scope: !4342)
!4348 = !DILocation(line: 1520, column: 15, scope: !4342)
!4349 = !DILocation(line: 1521, column: 8, scope: !4342)
!4350 = !DILocation(line: 1521, column: 11, scope: !4342)
!4351 = !DILocation(line: 1521, column: 14, scope: !4342)
!4352 = !DILocation(line: 1521, column: 22, scope: !4342)
!4353 = !DILocation(line: 1521, column: 28, scope: !4342)
!4354 = !DILocation(line: 1519, column: 8, scope: !4339)
!4355 = !DILocation(line: 1522, column: 6, scope: !4342)
!4356 = !DILocation(line: 1525, column: 25, scope: !4357)
!4357 = distinct !DILexicalBlock(scope: !4339, file: !3, line: 1525, column: 8)
!4358 = !DILocation(line: 1525, column: 34, scope: !4357)
!4359 = !DILocation(line: 1525, column: 37, scope: !4357)
!4360 = !DILocation(line: 1525, column: 45, scope: !4357)
!4361 = !DILocation(line: 1525, column: 9, scope: !4357)
!4362 = !DILocation(line: 1525, column: 8, scope: !4339)
!4363 = !DILocation(line: 1526, column: 6, scope: !4357)
!4364 = !DILocation(line: 1527, column: 8, scope: !4365)
!4365 = distinct !DILexicalBlock(scope: !4339, file: !3, line: 1527, column: 8)
!4366 = !DILocation(line: 1527, column: 8, scope: !4339)
!4367 = !DILocation(line: 1528, column: 15, scope: !4365)
!4368 = !DILocation(line: 1529, column: 26, scope: !4365)
!4369 = !DILocation(line: 1529, column: 29, scope: !4365)
!4370 = !DILocation(line: 1529, column: 8, scope: !4365)
!4371 = !DILocation(line: 1528, column: 6, scope: !4365)
!4372 = !DILocation(line: 1530, column: 37, scope: !4373)
!4373 = distinct !DILexicalBlock(scope: !4339, file: !3, line: 1530, column: 8)
!4374 = !DILocation(line: 1530, column: 43, scope: !4373)
!4375 = !DILocation(line: 1530, column: 46, scope: !4373)
!4376 = !DILocation(line: 1530, column: 55, scope: !4373)
!4377 = !DILocation(line: 1530, column: 58, scope: !4373)
!4378 = !DILocation(line: 1530, column: 8, scope: !4373)
!4379 = !DILocation(line: 1530, column: 8, scope: !4339)
!4380 = !DILocation(line: 1532, column: 12, scope: !4381)
!4381 = distinct !DILexicalBlock(scope: !4382, file: !3, line: 1532, column: 12)
!4382 = distinct !DILexicalBlock(scope: !4373, file: !3, line: 1531, column: 6)
!4383 = !DILocation(line: 1532, column: 12, scope: !4382)
!4384 = !DILocation(line: 1534, column: 16, scope: !4385)
!4385 = distinct !DILexicalBlock(scope: !4381, file: !3, line: 1533, column: 3)
!4386 = !DILocation(line: 1534, column: 27, scope: !4385)
!4387 = !DILocation(line: 1534, column: 5, scope: !4385)
!4388 = !DILocation(line: 1535, column: 14, scope: !4385)
!4389 = !DILocation(line: 1535, column: 5, scope: !4385)
!4390 = !DILocation(line: 1536, column: 3, scope: !4385)
!4391 = !DILocation(line: 1537, column: 8, scope: !4382)
!4392 = !DILocation(line: 1539, column: 25, scope: !4393)
!4393 = distinct !DILexicalBlock(scope: !4339, file: !3, line: 1539, column: 8)
!4394 = !DILocation(line: 1539, column: 8, scope: !4393)
!4395 = !DILocation(line: 1540, column: 28, scope: !4393)
!4396 = !DILocation(line: 1540, column: 11, scope: !4393)
!4397 = !DILocation(line: 1540, column: 8, scope: !4393)
!4398 = !DILocation(line: 1539, column: 8, scope: !4339)
!4399 = !DILocation(line: 1542, column: 12, scope: !4400)
!4400 = distinct !DILexicalBlock(scope: !4401, file: !3, line: 1542, column: 12)
!4401 = distinct !DILexicalBlock(scope: !4393, file: !3, line: 1541, column: 6)
!4402 = !DILocation(line: 1542, column: 12, scope: !4401)
!4403 = !DILocation(line: 1544, column: 16, scope: !4404)
!4404 = distinct !DILexicalBlock(scope: !4400, file: !3, line: 1543, column: 3)
!4405 = !DILocation(line: 1544, column: 27, scope: !4404)
!4406 = !DILocation(line: 1544, column: 5, scope: !4404)
!4407 = !DILocation(line: 1545, column: 14, scope: !4404)
!4408 = !DILocation(line: 1545, column: 5, scope: !4404)
!4409 = !DILocation(line: 1547, column: 3, scope: !4404)
!4410 = !DILocation(line: 1548, column: 8, scope: !4401)
!4411 = !DILocation(line: 1551, column: 33, scope: !4412)
!4412 = distinct !DILexicalBlock(scope: !4339, file: !3, line: 1551, column: 8)
!4413 = !DILocation(line: 1551, column: 8, scope: !4412)
!4414 = !DILocation(line: 1551, column: 36, scope: !4412)
!4415 = !DILocation(line: 1551, column: 52, scope: !4412)
!4416 = !DILocation(line: 1551, column: 55, scope: !4412)
!4417 = !DILocation(line: 1551, column: 39, scope: !4412)
!4418 = !DILocation(line: 1552, column: 8, scope: !4412)
!4419 = !DILocation(line: 1552, column: 42, scope: !4412)
!4420 = !DILocation(line: 1552, column: 11, scope: !4412)
!4421 = !DILocation(line: 1551, column: 8, scope: !4339)
!4422 = !DILocation(line: 1553, column: 23, scope: !4412)
!4423 = !DILocation(line: 1553, column: 21, scope: !4412)
!4424 = !DILocation(line: 1553, column: 6, scope: !4412)
!4425 = !DILocation(line: 1558, column: 10, scope: !4426)
!4426 = distinct !DILexicalBlock(scope: !4339, file: !3, line: 1558, column: 8)
!4427 = !DILocation(line: 1558, column: 15, scope: !4426)
!4428 = !DILocation(line: 1558, column: 30, scope: !4426)
!4429 = !DILocation(line: 1558, column: 33, scope: !4426)
!4430 = !DILocation(line: 1558, column: 38, scope: !4426)
!4431 = !DILocation(line: 1559, column: 9, scope: !4426)
!4432 = !DILocation(line: 1559, column: 14, scope: !4426)
!4433 = !DILocation(line: 1560, column: 6, scope: !4426)
!4434 = !DILocation(line: 1560, column: 10, scope: !4426)
!4435 = !DILocation(line: 1561, column: 8, scope: !4426)
!4436 = !DILocation(line: 1561, column: 52, scope: !4426)
!4437 = !DILocation(line: 1561, column: 55, scope: !4426)
!4438 = !DILocation(line: 1561, column: 63, scope: !4426)
!4439 = !DILocation(line: 1561, column: 66, scope: !4426)
!4440 = !DILocation(line: 1561, column: 12, scope: !4426)
!4441 = !DILocation(line: 1562, column: 7, scope: !4426)
!4442 = !DILocation(line: 1562, column: 10, scope: !4426)
!4443 = !DILocation(line: 1562, column: 18, scope: !4426)
!4444 = !DILocation(line: 1562, column: 25, scope: !4426)
!4445 = !DILocation(line: 1562, column: 32, scope: !4426)
!4446 = !DILocation(line: 1562, column: 30, scope: !4426)
!4447 = !DILocation(line: 1562, column: 5, scope: !4426)
!4448 = !DILocation(line: 1563, column: 8, scope: !4426)
!4449 = !DILocation(line: 1563, column: 35, scope: !4426)
!4450 = !DILocation(line: 1563, column: 38, scope: !4426)
!4451 = !DILocation(line: 1563, column: 11, scope: !4426)
!4452 = !DILocation(line: 1563, column: 48, scope: !4426)
!4453 = !DILocation(line: 1563, column: 46, scope: !4426)
!4454 = !DILocation(line: 1558, column: 8, scope: !4339)
!4455 = !DILocation(line: 1565, column: 12, scope: !4456)
!4456 = distinct !DILexicalBlock(scope: !4457, file: !3, line: 1565, column: 12)
!4457 = distinct !DILexicalBlock(scope: !4426, file: !3, line: 1564, column: 6)
!4458 = !DILocation(line: 1565, column: 12, scope: !4457)
!4459 = !DILocation(line: 1567, column: 16, scope: !4460)
!4460 = distinct !DILexicalBlock(scope: !4456, file: !3, line: 1566, column: 3)
!4461 = !DILocation(line: 1567, column: 27, scope: !4460)
!4462 = !DILocation(line: 1567, column: 5, scope: !4460)
!4463 = !DILocation(line: 1568, column: 14, scope: !4460)
!4464 = !DILocation(line: 1570, column: 47, scope: !4460)
!4465 = !DILocation(line: 1570, column: 50, scope: !4460)
!4466 = !DILocation(line: 1571, column: 9, scope: !4460)
!4467 = !DILocation(line: 1571, column: 12, scope: !4460)
!4468 = !DILocation(line: 1570, column: 7, scope: !4460)
!4469 = !DILocation(line: 1572, column: 9, scope: !4460)
!4470 = !DILocation(line: 1572, column: 12, scope: !4460)
!4471 = !DILocation(line: 1572, column: 20, scope: !4460)
!4472 = !DILocation(line: 1572, column: 27, scope: !4460)
!4473 = !DILocation(line: 1572, column: 7, scope: !4460)
!4474 = !DILocation(line: 1568, column: 5, scope: !4460)
!4475 = !DILocation(line: 1573, column: 3, scope: !4460)
!4476 = !DILocation(line: 1574, column: 8, scope: !4457)
!4477 = !DILocation(line: 1576, column: 37, scope: !4478)
!4478 = distinct !DILexicalBlock(scope: !4339, file: !3, line: 1576, column: 8)
!4479 = !DILocation(line: 1576, column: 43, scope: !4478)
!4480 = !DILocation(line: 1576, column: 46, scope: !4478)
!4481 = !DILocation(line: 1576, column: 55, scope: !4478)
!4482 = !DILocation(line: 1576, column: 58, scope: !4478)
!4483 = !DILocation(line: 1576, column: 9, scope: !4478)
!4484 = !DILocation(line: 1578, column: 8, scope: !4478)
!4485 = !DILocation(line: 1578, column: 11, scope: !4478)
!4486 = !DILocation(line: 1578, column: 14, scope: !4478)
!4487 = !DILocation(line: 1576, column: 8, scope: !4339)
!4488 = !DILocation(line: 1580, column: 12, scope: !4489)
!4489 = distinct !DILexicalBlock(scope: !4490, file: !3, line: 1580, column: 12)
!4490 = distinct !DILexicalBlock(scope: !4478, file: !3, line: 1579, column: 6)
!4491 = !DILocation(line: 1580, column: 12, scope: !4490)
!4492 = !DILocation(line: 1582, column: 16, scope: !4493)
!4493 = distinct !DILexicalBlock(scope: !4489, file: !3, line: 1581, column: 3)
!4494 = !DILocation(line: 1582, column: 27, scope: !4493)
!4495 = !DILocation(line: 1582, column: 5, scope: !4493)
!4496 = !DILocation(line: 1583, column: 14, scope: !4493)
!4497 = !DILocation(line: 1584, column: 36, scope: !4493)
!4498 = !DILocation(line: 1584, column: 39, scope: !4493)
!4499 = !DILocation(line: 1584, column: 7, scope: !4493)
!4500 = !DILocation(line: 1583, column: 5, scope: !4493)
!4501 = !DILocation(line: 1585, column: 3, scope: !4493)
!4502 = !DILocation(line: 1586, column: 8, scope: !4490)
!4503 = !DILocation(line: 1588, column: 9, scope: !4504)
!4504 = distinct !DILexicalBlock(scope: !4339, file: !3, line: 1588, column: 8)
!4505 = !DILocation(line: 1588, column: 12, scope: !4504)
!4506 = !DILocation(line: 1588, column: 20, scope: !4504)
!4507 = !DILocation(line: 1588, column: 8, scope: !4339)
!4508 = !DILocation(line: 1590, column: 12, scope: !4509)
!4509 = distinct !DILexicalBlock(scope: !4510, file: !3, line: 1590, column: 12)
!4510 = distinct !DILexicalBlock(scope: !4504, file: !3, line: 1589, column: 6)
!4511 = !DILocation(line: 1590, column: 12, scope: !4510)
!4512 = !DILocation(line: 1592, column: 16, scope: !4513)
!4513 = distinct !DILexicalBlock(scope: !4509, file: !3, line: 1591, column: 3)
!4514 = !DILocation(line: 1592, column: 27, scope: !4513)
!4515 = !DILocation(line: 1592, column: 5, scope: !4513)
!4516 = !DILocation(line: 1593, column: 14, scope: !4513)
!4517 = !DILocation(line: 1593, column: 5, scope: !4513)
!4518 = !DILocation(line: 1595, column: 3, scope: !4513)
!4519 = !DILocation(line: 1596, column: 8, scope: !4510)
!4520 = !DILocation(line: 1598, column: 28, scope: !4521)
!4521 = distinct !DILexicalBlock(scope: !4339, file: !3, line: 1598, column: 8)
!4522 = !DILocation(line: 1598, column: 9, scope: !4521)
!4523 = !DILocation(line: 1598, column: 8, scope: !4339)
!4524 = !DILocation(line: 1600, column: 12, scope: !4525)
!4525 = distinct !DILexicalBlock(scope: !4526, file: !3, line: 1600, column: 12)
!4526 = distinct !DILexicalBlock(scope: !4521, file: !3, line: 1599, column: 6)
!4527 = !DILocation(line: 1600, column: 12, scope: !4526)
!4528 = !DILocation(line: 1602, column: 16, scope: !4529)
!4529 = distinct !DILexicalBlock(scope: !4525, file: !3, line: 1601, column: 3)
!4530 = !DILocation(line: 1602, column: 27, scope: !4529)
!4531 = !DILocation(line: 1602, column: 5, scope: !4529)
!4532 = !DILocation(line: 1603, column: 14, scope: !4529)
!4533 = !DILocation(line: 1605, column: 36, scope: !4529)
!4534 = !DILocation(line: 1605, column: 39, scope: !4529)
!4535 = !DILocation(line: 1605, column: 7, scope: !4529)
!4536 = !DILocation(line: 1603, column: 5, scope: !4529)
!4537 = !DILocation(line: 1606, column: 3, scope: !4529)
!4538 = !DILocation(line: 1607, column: 8, scope: !4526)
!4539 = !DILocation(line: 1609, column: 33, scope: !4540)
!4540 = distinct !DILexicalBlock(scope: !4339, file: !3, line: 1609, column: 8)
!4541 = !DILocation(line: 1609, column: 36, scope: !4540)
!4542 = !DILocation(line: 1609, column: 8, scope: !4540)
!4543 = !DILocation(line: 1609, column: 8, scope: !4339)
!4544 = !DILocation(line: 1610, column: 29, scope: !4540)
!4545 = !DILocation(line: 1610, column: 32, scope: !4540)
!4546 = !DILocation(line: 1610, column: 38, scope: !4540)
!4547 = !DILocation(line: 1610, column: 17, scope: !4540)
!4548 = !DILocation(line: 1610, column: 14, scope: !4540)
!4549 = !DILocation(line: 1610, column: 6, scope: !4540)
!4550 = !DILocation(line: 1611, column: 2, scope: !4339)
!4551 = !DILocation(line: 1516, column: 38, scope: !4336)
!4552 = !DILocation(line: 1516, column: 41, scope: !4336)
!4553 = !DILocation(line: 1516, column: 36, scope: !4336)
!4554 = !DILocation(line: 1516, column: 7, scope: !4336)
!4555 = distinct !{!4555, !4337, !4556}
!4556 = !DILocation(line: 1611, column: 2, scope: !4331)
!4557 = !DILocation(line: 1612, column: 7, scope: !4327)
!4558 = !DILocation(line: 1613, column: 5, scope: !4327)
!4559 = !DILocation(line: 1614, column: 32, scope: !4114)
!4560 = !DILocation(line: 1614, column: 23, scope: !4114)
!4561 = !DILocation(line: 1614, column: 15, scope: !4114)
!4562 = !DILocation(line: 1614, column: 3, scope: !4114)
!4563 = !DILocation(line: 1614, column: 9, scope: !4114)
!4564 = !DILocation(line: 1614, column: 13, scope: !4114)
!4565 = !DILocation(line: 1615, column: 10, scope: !4114)
!4566 = !DILocation(line: 1615, column: 3, scope: !4114)
!4567 = distinct !DISubprogram(name: "try_inline", scope: !3, file: !3, line: 1330, type: !4568, scopeLine: 1331, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2865)
!4568 = !DISubroutineType(types: !4569)
!4569 = !{!1367, !2470, !729, !1064}
!4570 = !DILocalVariable(name: "e", arg: 1, scope: !4567, file: !3, line: 1330, type: !2470)
!4571 = !DILocation(line: 1330, column: 33, scope: !4567)
!4572 = !DILocalVariable(name: "mode", arg: 2, scope: !4567, file: !3, line: 1330, type: !729)
!4573 = !DILocation(line: 1330, column: 55, scope: !4567)
!4574 = !DILocalVariable(name: "depth", arg: 3, scope: !4567, file: !3, line: 1330, type: !1064)
!4575 = !DILocation(line: 1330, column: 65, scope: !4567)
!4576 = !DILocalVariable(name: "callee", scope: !4567, file: !3, line: 1332, type: !2465)
!4577 = !DILocation(line: 1332, column: 23, scope: !4567)
!4578 = !DILocation(line: 1332, column: 32, scope: !4567)
!4579 = !DILocation(line: 1332, column: 35, scope: !4567)
!4580 = !DILocalVariable(name: "callee_mode", scope: !4567, file: !3, line: 1333, type: !729)
!4581 = !DILocation(line: 1333, column: 22, scope: !4567)
!4582 = !DILocation(line: 1333, column: 66, scope: !4567)
!4583 = !DILocation(line: 1333, column: 74, scope: !4567)
!4584 = !DILocation(line: 1333, column: 57, scope: !4567)
!4585 = !DILocation(line: 1333, column: 36, scope: !4567)
!4586 = !DILocalVariable(name: "always_inline", scope: !4567, file: !3, line: 1334, type: !1367)
!4587 = !DILocation(line: 1334, column: 8, scope: !4567)
!4588 = !DILocation(line: 1334, column: 24, scope: !4567)
!4589 = !DILocation(line: 1334, column: 27, scope: !4567)
!4590 = !DILocation(line: 1334, column: 35, scope: !4567)
!4591 = !DILocation(line: 1334, column: 41, scope: !4567)
!4592 = !DILocalVariable(name: "inlined", scope: !4567, file: !3, line: 1335, type: !1367)
!4593 = !DILocation(line: 1335, column: 8, scope: !4567)
!4594 = !DILocation(line: 1338, column: 7, scope: !4595)
!4595 = distinct !DILexicalBlock(scope: !4567, file: !3, line: 1338, column: 7)
!4596 = !DILocation(line: 1338, column: 7, scope: !4567)
!4597 = !DILocation(line: 1342, column: 11, scope: !4598)
!4598 = distinct !DILexicalBlock(scope: !4599, file: !3, line: 1342, column: 11)
!4599 = distinct !DILexicalBlock(scope: !4595, file: !3, line: 1339, column: 5)
!4600 = !DILocation(line: 1342, column: 25, scope: !4598)
!4601 = !DILocation(line: 1342, column: 28, scope: !4598)
!4602 = !DILocation(line: 1342, column: 33, scope: !4598)
!4603 = !DILocation(line: 1342, column: 11, scope: !4599)
!4604 = !DILocation(line: 1344, column: 8, scope: !4605)
!4605 = distinct !DILexicalBlock(scope: !4606, file: !3, line: 1344, column: 8)
!4606 = distinct !DILexicalBlock(scope: !4598, file: !3, line: 1343, column: 2)
!4607 = !DILocation(line: 1344, column: 8, scope: !4606)
!4608 = !DILocation(line: 1346, column: 19, scope: !4609)
!4609 = distinct !DILexicalBlock(scope: !4605, file: !3, line: 1345, column: 6)
!4610 = !DILocation(line: 1346, column: 30, scope: !4609)
!4611 = !DILocation(line: 1346, column: 8, scope: !4609)
!4612 = !DILocation(line: 1347, column: 17, scope: !4609)
!4613 = !DILocation(line: 1349, column: 28, scope: !4609)
!4614 = !DILocation(line: 1349, column: 10, scope: !4609)
!4615 = !DILocation(line: 1347, column: 8, scope: !4609)
!4616 = !DILocation(line: 1350, column: 6, scope: !4609)
!4617 = !DILocation(line: 1351, column: 9, scope: !4606)
!4618 = !DILocation(line: 1352, column: 2, scope: !4606)
!4619 = !DILocation(line: 1356, column: 8, scope: !4620)
!4620 = distinct !DILexicalBlock(scope: !4621, file: !3, line: 1356, column: 8)
!4621 = distinct !DILexicalBlock(scope: !4598, file: !3, line: 1355, column: 2)
!4622 = !DILocation(line: 1356, column: 8, scope: !4621)
!4623 = !DILocation(line: 1358, column: 19, scope: !4624)
!4624 = distinct !DILexicalBlock(scope: !4620, file: !3, line: 1357, column: 6)
!4625 = !DILocation(line: 1358, column: 30, scope: !4624)
!4626 = !DILocation(line: 1358, column: 8, scope: !4624)
!4627 = !DILocation(line: 1359, column: 17, scope: !4624)
!4628 = !DILocation(line: 1361, column: 28, scope: !4624)
!4629 = !DILocation(line: 1361, column: 10, scope: !4624)
!4630 = !DILocation(line: 1362, column: 28, scope: !4624)
!4631 = !DILocation(line: 1362, column: 31, scope: !4624)
!4632 = !DILocation(line: 1362, column: 10, scope: !4624)
!4633 = !DILocation(line: 1359, column: 8, scope: !4624)
!4634 = !DILocation(line: 1363, column: 6, scope: !4624)
!4635 = !DILocation(line: 1364, column: 24, scope: !4621)
!4636 = !DILocation(line: 1364, column: 27, scope: !4621)
!4637 = !DILocation(line: 1364, column: 35, scope: !4621)
!4638 = !DILocation(line: 1364, column: 41, scope: !4621)
!4639 = !DILocation(line: 1364, column: 4, scope: !4621)
!4640 = !DILocation(line: 1364, column: 7, scope: !4621)
!4641 = !DILocation(line: 1364, column: 21, scope: !4621)
!4642 = !DILocation(line: 1366, column: 11, scope: !4621)
!4643 = !DILocation(line: 1368, column: 5, scope: !4599)
!4644 = !DILocation(line: 1370, column: 34, scope: !4567)
!4645 = !DILocation(line: 1370, column: 25, scope: !4567)
!4646 = !DILocation(line: 1370, column: 17, scope: !4567)
!4647 = !DILocation(line: 1370, column: 3, scope: !4567)
!4648 = !DILocation(line: 1370, column: 11, scope: !4567)
!4649 = !DILocation(line: 1370, column: 15, scope: !4567)
!4650 = !DILocation(line: 1371, column: 7, scope: !4651)
!4651 = distinct !DILexicalBlock(scope: !4567, file: !3, line: 1371, column: 7)
!4652 = !DILocation(line: 1371, column: 7, scope: !4567)
!4653 = !DILocation(line: 1373, column: 18, scope: !4654)
!4654 = distinct !DILexicalBlock(scope: !4651, file: !3, line: 1372, column: 5)
!4655 = !DILocation(line: 1373, column: 29, scope: !4654)
!4656 = !DILocation(line: 1373, column: 7, scope: !4654)
!4657 = !DILocation(line: 1374, column: 16, scope: !4654)
!4658 = !DILocation(line: 1375, column: 27, scope: !4654)
!4659 = !DILocation(line: 1375, column: 30, scope: !4654)
!4660 = !DILocation(line: 1375, column: 9, scope: !4654)
!4661 = !DILocation(line: 1376, column: 27, scope: !4654)
!4662 = !DILocation(line: 1376, column: 30, scope: !4654)
!4663 = !DILocation(line: 1376, column: 9, scope: !4654)
!4664 = !DILocation(line: 1374, column: 7, scope: !4654)
!4665 = !DILocation(line: 1377, column: 5, scope: !4654)
!4666 = !DILocation(line: 1378, column: 7, scope: !4667)
!4667 = distinct !DILexicalBlock(scope: !4567, file: !3, line: 1378, column: 7)
!4668 = !DILocation(line: 1378, column: 10, scope: !4667)
!4669 = !DILocation(line: 1378, column: 7, scope: !4567)
!4670 = !DILocation(line: 1380, column: 27, scope: !4671)
!4671 = distinct !DILexicalBlock(scope: !4667, file: !3, line: 1379, column: 5)
!4672 = !DILocation(line: 1380, column: 7, scope: !4671)
!4673 = !DILocation(line: 1388, column: 11, scope: !4674)
!4674 = distinct !DILexicalBlock(scope: !4671, file: !3, line: 1388, column: 11)
!4675 = !DILocation(line: 1388, column: 16, scope: !4674)
!4676 = !DILocation(line: 1388, column: 30, scope: !4674)
!4677 = !DILocation(line: 1388, column: 33, scope: !4674)
!4678 = !DILocation(line: 1388, column: 11, scope: !4671)
!4679 = !DILocation(line: 1389, column: 40, scope: !4674)
!4680 = !DILocation(line: 1389, column: 43, scope: !4674)
!4681 = !DILocation(line: 1389, column: 51, scope: !4674)
!4682 = !DILocation(line: 1389, column: 57, scope: !4674)
!4683 = !DILocation(line: 1389, column: 63, scope: !4674)
!4684 = !DILocation(line: 1389, column: 2, scope: !4674)
!4685 = !DILocation(line: 1390, column: 15, scope: !4671)
!4686 = !DILocation(line: 1391, column: 5, scope: !4671)
!4687 = !DILocation(line: 1392, column: 34, scope: !4567)
!4688 = !DILocation(line: 1392, column: 25, scope: !4567)
!4689 = !DILocation(line: 1392, column: 17, scope: !4567)
!4690 = !DILocation(line: 1392, column: 3, scope: !4567)
!4691 = !DILocation(line: 1392, column: 11, scope: !4567)
!4692 = !DILocation(line: 1392, column: 15, scope: !4567)
!4693 = !DILocation(line: 1393, column: 10, scope: !4567)
!4694 = !DILocation(line: 1393, column: 3, scope: !4567)
!4695 = !DILocation(line: 1394, column: 1, scope: !4567)
!4696 = distinct !DISubprogram(name: "cgraph_recursive_inlining_p", scope: !3, file: !3, line: 523, type: !4697, scopeLine: 526, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2865)
!4697 = !DISubroutineType(types: !4698)
!4698 = !{!1367, !2465, !2465, !4699}
!4699 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2483, size: 64)
!4700 = !DILocalVariable(name: "to", arg: 1, scope: !4696, file: !3, line: 523, type: !2465)
!4701 = !DILocation(line: 523, column: 50, scope: !4696)
!4702 = !DILocalVariable(name: "what", arg: 2, scope: !4696, file: !3, line: 524, type: !2465)
!4703 = !DILocation(line: 524, column: 29, scope: !4696)
!4704 = !DILocalVariable(name: "reason", arg: 3, scope: !4696, file: !3, line: 525, type: !4699)
!4705 = !DILocation(line: 525, column: 33, scope: !4696)
!4706 = !DILocalVariable(name: "recursive", scope: !4696, file: !3, line: 527, type: !1367)
!4707 = !DILocation(line: 527, column: 8, scope: !4696)
!4708 = !DILocation(line: 528, column: 7, scope: !4709)
!4709 = distinct !DILexicalBlock(scope: !4696, file: !3, line: 528, column: 7)
!4710 = !DILocation(line: 528, column: 11, scope: !4709)
!4711 = !DILocation(line: 528, column: 18, scope: !4709)
!4712 = !DILocation(line: 528, column: 7, scope: !4696)
!4713 = !DILocation(line: 529, column: 17, scope: !4709)
!4714 = !DILocation(line: 529, column: 23, scope: !4709)
!4715 = !DILocation(line: 529, column: 31, scope: !4709)
!4716 = !DILocation(line: 529, column: 35, scope: !4709)
!4717 = !DILocation(line: 529, column: 42, scope: !4709)
!4718 = !DILocation(line: 529, column: 54, scope: !4709)
!4719 = !DILocation(line: 529, column: 28, scope: !4709)
!4720 = !DILocation(line: 529, column: 15, scope: !4709)
!4721 = !DILocation(line: 529, column: 5, scope: !4709)
!4722 = !DILocation(line: 531, column: 17, scope: !4709)
!4723 = !DILocation(line: 531, column: 23, scope: !4709)
!4724 = !DILocation(line: 531, column: 31, scope: !4709)
!4725 = !DILocation(line: 531, column: 35, scope: !4709)
!4726 = !DILocation(line: 531, column: 28, scope: !4709)
!4727 = !DILocation(line: 531, column: 15, scope: !4709)
!4728 = !DILocation(line: 534, column: 7, scope: !4729)
!4729 = distinct !DILexicalBlock(scope: !4696, file: !3, line: 534, column: 7)
!4730 = !DILocation(line: 534, column: 17, scope: !4729)
!4731 = !DILocation(line: 534, column: 20, scope: !4729)
!4732 = !DILocation(line: 534, column: 7, scope: !4696)
!4733 = !DILocation(line: 535, column: 16, scope: !4729)
!4734 = !DILocation(line: 535, column: 22, scope: !4729)
!4735 = !DILocation(line: 535, column: 28, scope: !4729)
!4736 = !DILocation(line: 535, column: 6, scope: !4729)
!4737 = !DILocation(line: 535, column: 13, scope: !4729)
!4738 = !DILocation(line: 535, column: 5, scope: !4729)
!4739 = !DILocation(line: 537, column: 10, scope: !4696)
!4740 = !DILocation(line: 537, column: 3, scope: !4696)
!4741 = distinct !DISubprogram(name: "gimple_in_ssa_p", scope: !4742, file: !4742, line: 33, type: !4743, scopeLine: 34, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2865)
!4742 = !DIFile(filename: "./tree-flow-inline.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!4743 = !DISubroutineType(types: !4744)
!4744 = !{!1367, !4745}
!4745 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4746, size: 64)
!4746 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1506)
!4747 = !DILocalVariable(name: "fun", arg: 1, scope: !4741, file: !4742, line: 33, type: !4745)
!4748 = !DILocation(line: 33, column: 41, scope: !4741)
!4749 = !DILocation(line: 35, column: 10, scope: !4741)
!4750 = !DILocation(line: 35, column: 14, scope: !4741)
!4751 = !DILocation(line: 35, column: 17, scope: !4741)
!4752 = !DILocation(line: 35, column: 22, scope: !4741)
!4753 = !DILocation(line: 35, column: 32, scope: !4741)
!4754 = !DILocation(line: 35, column: 35, scope: !4741)
!4755 = !DILocation(line: 35, column: 40, scope: !4741)
!4756 = !DILocation(line: 35, column: 51, scope: !4741)
!4757 = !DILocation(line: 0, scope: !4741)
!4758 = !DILocation(line: 35, column: 3, scope: !4741)
!4759 = distinct !DISubprogram(name: "leaf_node_p", scope: !3, file: !3, line: 1399, type: !3039, scopeLine: 1400, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2865)
!4760 = !DILocalVariable(name: "n", arg: 1, scope: !4759, file: !3, line: 1399, type: !2465)
!4761 = !DILocation(line: 1399, column: 34, scope: !4759)
!4762 = !DILocalVariable(name: "e", scope: !4759, file: !3, line: 1401, type: !2470)
!4763 = !DILocation(line: 1401, column: 23, scope: !4759)
!4764 = !DILocation(line: 1402, column: 12, scope: !4765)
!4765 = distinct !DILexicalBlock(scope: !4759, file: !3, line: 1402, column: 3)
!4766 = !DILocation(line: 1402, column: 15, scope: !4765)
!4767 = !DILocation(line: 1402, column: 10, scope: !4765)
!4768 = !DILocation(line: 1402, column: 8, scope: !4765)
!4769 = !DILocation(line: 1402, column: 24, scope: !4770)
!4770 = distinct !DILexicalBlock(scope: !4765, file: !3, line: 1402, column: 3)
!4771 = !DILocation(line: 1402, column: 3, scope: !4765)
!4772 = !DILocation(line: 1403, column: 10, scope: !4773)
!4773 = distinct !DILexicalBlock(scope: !4770, file: !3, line: 1403, column: 9)
!4774 = !DILocation(line: 1404, column: 2, scope: !4773)
!4775 = !DILocation(line: 1404, column: 7, scope: !4773)
!4776 = !DILocation(line: 1405, column: 6, scope: !4773)
!4777 = !DILocation(line: 1405, column: 9, scope: !4773)
!4778 = !DILocation(line: 1403, column: 9, scope: !4770)
!4779 = !DILocation(line: 1406, column: 7, scope: !4773)
!4780 = !DILocation(line: 1405, column: 38, scope: !4773)
!4781 = !DILocation(line: 1402, column: 31, scope: !4770)
!4782 = !DILocation(line: 1402, column: 34, scope: !4770)
!4783 = !DILocation(line: 1402, column: 29, scope: !4770)
!4784 = !DILocation(line: 1402, column: 3, scope: !4770)
!4785 = distinct !{!4785, !4771, !4786}
!4786 = !DILocation(line: 1406, column: 14, scope: !4765)
!4787 = !DILocation(line: 1407, column: 3, scope: !4759)
!4788 = !DILocation(line: 1408, column: 1, scope: !4759)
!4789 = distinct !DISubprogram(name: "cgraph_estimate_size_after_inlining", scope: !3, file: !3, line: 203, type: !4790, scopeLine: 205, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2865)
!4790 = !DISubroutineType(types: !4791)
!4791 = !{!1064, !1064, !2465, !2465}
!4792 = !DILocalVariable(name: "times", arg: 1, scope: !4789, file: !3, line: 203, type: !1064)
!4793 = !DILocation(line: 203, column: 42, scope: !4789)
!4794 = !DILocalVariable(name: "to", arg: 2, scope: !4789, file: !3, line: 203, type: !2465)
!4795 = !DILocation(line: 203, column: 69, scope: !4789)
!4796 = !DILocalVariable(name: "what", arg: 3, scope: !4789, file: !3, line: 204, type: !2465)
!4797 = !DILocation(line: 204, column: 30, scope: !4789)
!4798 = !DILocalVariable(name: "size", scope: !4789, file: !3, line: 206, type: !1064)
!4799 = !DILocation(line: 206, column: 7, scope: !4789)
!4800 = !DILocation(line: 206, column: 15, scope: !4789)
!4801 = !DILocation(line: 206, column: 21, scope: !4789)
!4802 = !DILocation(line: 206, column: 28, scope: !4789)
!4803 = !DILocation(line: 206, column: 51, scope: !4789)
!4804 = !DILocation(line: 206, column: 35, scope: !4789)
!4805 = !DILocation(line: 206, column: 58, scope: !4789)
!4806 = !DILocation(line: 206, column: 33, scope: !4789)
!4807 = !DILocation(line: 206, column: 83, scope: !4789)
!4808 = !DILocation(line: 206, column: 81, scope: !4789)
!4809 = !DILocation(line: 206, column: 91, scope: !4789)
!4810 = !DILocation(line: 206, column: 95, scope: !4789)
!4811 = !DILocation(line: 206, column: 102, scope: !4789)
!4812 = !DILocation(line: 206, column: 89, scope: !4789)
!4813 = !DILocation(line: 207, column: 3, scope: !4789)
!4814 = !DILocation(line: 208, column: 10, scope: !4789)
!4815 = !DILocation(line: 208, column: 3, scope: !4789)
!4816 = distinct !DISubprogram(name: "cgraph_estimate_growth", scope: !3, file: !3, line: 380, type: !4817, scopeLine: 381, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2865)
!4817 = !DISubroutineType(types: !4818)
!4818 = !{!1064, !2465}
!4819 = !DILocalVariable(name: "node", arg: 1, scope: !4816, file: !3, line: 380, type: !2465)
!4820 = !DILocation(line: 380, column: 45, scope: !4816)
!4821 = !DILocalVariable(name: "growth", scope: !4816, file: !3, line: 382, type: !1064)
!4822 = !DILocation(line: 382, column: 7, scope: !4816)
!4823 = !DILocalVariable(name: "e", scope: !4816, file: !3, line: 383, type: !2470)
!4824 = !DILocation(line: 383, column: 23, scope: !4816)
!4825 = !DILocalVariable(name: "self_recursive", scope: !4816, file: !3, line: 384, type: !1367)
!4826 = !DILocation(line: 384, column: 8, scope: !4816)
!4827 = !DILocation(line: 386, column: 7, scope: !4828)
!4828 = distinct !DILexicalBlock(scope: !4816, file: !3, line: 386, column: 7)
!4829 = !DILocation(line: 386, column: 13, scope: !4828)
!4830 = !DILocation(line: 386, column: 20, scope: !4828)
!4831 = !DILocation(line: 386, column: 37, scope: !4828)
!4832 = !DILocation(line: 386, column: 7, scope: !4816)
!4833 = !DILocation(line: 387, column: 12, scope: !4828)
!4834 = !DILocation(line: 387, column: 18, scope: !4828)
!4835 = !DILocation(line: 387, column: 25, scope: !4828)
!4836 = !DILocation(line: 387, column: 5, scope: !4828)
!4837 = !DILocation(line: 389, column: 12, scope: !4838)
!4838 = distinct !DILexicalBlock(scope: !4816, file: !3, line: 389, column: 3)
!4839 = !DILocation(line: 389, column: 18, scope: !4838)
!4840 = !DILocation(line: 389, column: 10, scope: !4838)
!4841 = !DILocation(line: 389, column: 8, scope: !4838)
!4842 = !DILocation(line: 389, column: 27, scope: !4843)
!4843 = distinct !DILexicalBlock(scope: !4838, file: !3, line: 389, column: 3)
!4844 = !DILocation(line: 389, column: 3, scope: !4838)
!4845 = !DILocation(line: 391, column: 11, scope: !4846)
!4846 = distinct !DILexicalBlock(scope: !4847, file: !3, line: 391, column: 11)
!4847 = distinct !DILexicalBlock(scope: !4843, file: !3, line: 390, column: 5)
!4848 = !DILocation(line: 391, column: 14, scope: !4846)
!4849 = !DILocation(line: 391, column: 24, scope: !4846)
!4850 = !DILocation(line: 391, column: 21, scope: !4846)
!4851 = !DILocation(line: 391, column: 11, scope: !4847)
!4852 = !DILocation(line: 392, column: 24, scope: !4846)
!4853 = !DILocation(line: 392, column: 9, scope: !4846)
!4854 = !DILocation(line: 393, column: 11, scope: !4855)
!4855 = distinct !DILexicalBlock(scope: !4847, file: !3, line: 393, column: 11)
!4856 = !DILocation(line: 393, column: 14, scope: !4855)
!4857 = !DILocation(line: 393, column: 11, scope: !4847)
!4858 = !DILocation(line: 394, column: 53, scope: !4855)
!4859 = !DILocation(line: 394, column: 56, scope: !4855)
!4860 = !DILocation(line: 394, column: 64, scope: !4855)
!4861 = !DILocation(line: 394, column: 13, scope: !4855)
!4862 = !DILocation(line: 395, column: 8, scope: !4855)
!4863 = !DILocation(line: 395, column: 11, scope: !4855)
!4864 = !DILocation(line: 395, column: 19, scope: !4855)
!4865 = !DILocation(line: 395, column: 26, scope: !4855)
!4866 = !DILocation(line: 395, column: 6, scope: !4855)
!4867 = !DILocation(line: 394, column: 9, scope: !4855)
!4868 = !DILocation(line: 394, column: 2, scope: !4855)
!4869 = !DILocation(line: 396, column: 5, scope: !4847)
!4870 = !DILocation(line: 389, column: 34, scope: !4843)
!4871 = !DILocation(line: 389, column: 37, scope: !4843)
!4872 = !DILocation(line: 389, column: 32, scope: !4843)
!4873 = !DILocation(line: 389, column: 3, scope: !4843)
!4874 = distinct !{!4874, !4844, !4875}
!4875 = !DILocation(line: 396, column: 5, scope: !4838)
!4876 = !DILocation(line: 402, column: 38, scope: !4877)
!4877 = distinct !DILexicalBlock(scope: !4816, file: !3, line: 402, column: 7)
!4878 = !DILocation(line: 402, column: 7, scope: !4877)
!4879 = !DILocation(line: 403, column: 7, scope: !4877)
!4880 = !DILocation(line: 403, column: 11, scope: !4877)
!4881 = !DILocation(line: 403, column: 38, scope: !4877)
!4882 = !DILocation(line: 403, column: 42, scope: !4877)
!4883 = !DILocation(line: 402, column: 7, scope: !4816)
!4884 = !DILocation(line: 404, column: 15, scope: !4877)
!4885 = !DILocation(line: 404, column: 21, scope: !4877)
!4886 = !DILocation(line: 404, column: 28, scope: !4877)
!4887 = !DILocation(line: 404, column: 12, scope: !4877)
!4888 = !DILocation(line: 404, column: 5, scope: !4877)
!4889 = !DILocation(line: 406, column: 35, scope: !4816)
!4890 = !DILocation(line: 406, column: 3, scope: !4816)
!4891 = !DILocation(line: 406, column: 9, scope: !4816)
!4892 = !DILocation(line: 406, column: 16, scope: !4816)
!4893 = !DILocation(line: 406, column: 33, scope: !4816)
!4894 = !DILocation(line: 407, column: 10, scope: !4816)
!4895 = !DILocation(line: 407, column: 3, scope: !4816)
!4896 = !DILocation(line: 408, column: 1, scope: !4816)
!4897 = distinct !DISubprogram(name: "cgraph_check_inline_limits", scope: !3, file: !3, line: 418, type: !4898, scopeLine: 420, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2865)
!4898 = !DISubroutineType(types: !4899)
!4899 = !{!1367, !2465, !2465, !4699, !1367}
!4900 = !DILocalVariable(name: "to", arg: 1, scope: !4897, file: !3, line: 418, type: !2465)
!4901 = !DILocation(line: 418, column: 49, scope: !4897)
!4902 = !DILocalVariable(name: "what", arg: 2, scope: !4897, file: !3, line: 418, type: !2465)
!4903 = !DILocation(line: 418, column: 73, scope: !4897)
!4904 = !DILocalVariable(name: "reason", arg: 3, scope: !4897, file: !3, line: 419, type: !4699)
!4905 = !DILocation(line: 419, column: 32, scope: !4897)
!4906 = !DILocalVariable(name: "one_only", arg: 4, scope: !4897, file: !3, line: 419, type: !1367)
!4907 = !DILocation(line: 419, column: 45, scope: !4897)
!4908 = !DILocalVariable(name: "times", scope: !4897, file: !3, line: 421, type: !1064)
!4909 = !DILocation(line: 421, column: 7, scope: !4897)
!4910 = !DILocalVariable(name: "e", scope: !4897, file: !3, line: 422, type: !2470)
!4911 = !DILocation(line: 422, column: 23, scope: !4897)
!4912 = !DILocalVariable(name: "newsize", scope: !4897, file: !3, line: 423, type: !1064)
!4913 = !DILocation(line: 423, column: 7, scope: !4897)
!4914 = !DILocalVariable(name: "limit", scope: !4897, file: !3, line: 424, type: !1064)
!4915 = !DILocation(line: 424, column: 7, scope: !4897)
!4916 = !DILocalVariable(name: "stack_size_limit", scope: !4897, file: !3, line: 425, type: !1063)
!4917 = !DILocation(line: 425, column: 17, scope: !4897)
!4918 = !DILocalVariable(name: "inlined_stack", scope: !4897, file: !3, line: 425, type: !1063)
!4919 = !DILocation(line: 425, column: 35, scope: !4897)
!4920 = !DILocation(line: 427, column: 7, scope: !4921)
!4921 = distinct !DILexicalBlock(scope: !4897, file: !3, line: 427, column: 7)
!4922 = !DILocation(line: 427, column: 7, scope: !4897)
!4923 = !DILocation(line: 428, column: 11, scope: !4921)
!4924 = !DILocation(line: 428, column: 5, scope: !4921)
!4925 = !DILocation(line: 430, column: 14, scope: !4926)
!4926 = distinct !DILexicalBlock(scope: !4921, file: !3, line: 430, column: 5)
!4927 = !DILocation(line: 430, column: 18, scope: !4926)
!4928 = !DILocation(line: 430, column: 12, scope: !4926)
!4929 = !DILocation(line: 430, column: 10, scope: !4926)
!4930 = !DILocation(line: 430, column: 27, scope: !4931)
!4931 = distinct !DILexicalBlock(scope: !4926, file: !3, line: 430, column: 5)
!4932 = !DILocation(line: 430, column: 5, scope: !4926)
!4933 = !DILocation(line: 431, column: 11, scope: !4934)
!4934 = distinct !DILexicalBlock(scope: !4931, file: !3, line: 431, column: 11)
!4935 = !DILocation(line: 431, column: 14, scope: !4934)
!4936 = !DILocation(line: 431, column: 24, scope: !4934)
!4937 = !DILocation(line: 431, column: 21, scope: !4934)
!4938 = !DILocation(line: 431, column: 11, scope: !4931)
!4939 = !DILocation(line: 432, column: 7, scope: !4934)
!4940 = !DILocation(line: 432, column: 2, scope: !4934)
!4941 = !DILocation(line: 430, column: 34, scope: !4931)
!4942 = !DILocation(line: 430, column: 37, scope: !4931)
!4943 = !DILocation(line: 430, column: 32, scope: !4931)
!4944 = !DILocation(line: 430, column: 5, scope: !4931)
!4945 = distinct !{!4945, !4932, !4946}
!4946 = !DILocation(line: 432, column: 7, scope: !4926)
!4947 = !DILocation(line: 434, column: 7, scope: !4948)
!4948 = distinct !DILexicalBlock(scope: !4897, file: !3, line: 434, column: 7)
!4949 = !DILocation(line: 434, column: 11, scope: !4948)
!4950 = !DILocation(line: 434, column: 18, scope: !4948)
!4951 = !DILocation(line: 434, column: 7, scope: !4897)
!4952 = !DILocation(line: 435, column: 10, scope: !4948)
!4953 = !DILocation(line: 435, column: 14, scope: !4948)
!4954 = !DILocation(line: 435, column: 21, scope: !4948)
!4955 = !DILocation(line: 435, column: 8, scope: !4948)
!4956 = !DILocation(line: 435, column: 5, scope: !4948)
!4957 = !DILocation(line: 439, column: 23, scope: !4958)
!4958 = distinct !DILexicalBlock(scope: !4897, file: !3, line: 439, column: 7)
!4959 = !DILocation(line: 439, column: 7, scope: !4958)
!4960 = !DILocation(line: 439, column: 28, scope: !4958)
!4961 = !DILocation(line: 439, column: 55, scope: !4958)
!4962 = !DILocation(line: 439, column: 40, scope: !4958)
!4963 = !DILocation(line: 439, column: 62, scope: !4958)
!4964 = !DILocation(line: 439, column: 38, scope: !4958)
!4965 = !DILocation(line: 439, column: 7, scope: !4897)
!4966 = !DILocation(line: 440, column: 29, scope: !4958)
!4967 = !DILocation(line: 440, column: 13, scope: !4958)
!4968 = !DILocation(line: 440, column: 34, scope: !4958)
!4969 = !DILocation(line: 440, column: 11, scope: !4958)
!4970 = !DILocation(line: 440, column: 5, scope: !4958)
!4971 = !DILocation(line: 442, column: 29, scope: !4958)
!4972 = !DILocation(line: 442, column: 13, scope: !4958)
!4973 = !DILocation(line: 442, column: 36, scope: !4958)
!4974 = !DILocation(line: 442, column: 11, scope: !4958)
!4975 = !DILocation(line: 444, column: 12, scope: !4897)
!4976 = !DILocation(line: 444, column: 20, scope: !4897)
!4977 = !DILocation(line: 444, column: 18, scope: !4897)
!4978 = !DILocation(line: 444, column: 62, scope: !4897)
!4979 = !DILocation(line: 444, column: 9, scope: !4897)
!4980 = !DILocation(line: 448, column: 50, scope: !4897)
!4981 = !DILocation(line: 448, column: 57, scope: !4897)
!4982 = !DILocation(line: 448, column: 61, scope: !4897)
!4983 = !DILocation(line: 448, column: 13, scope: !4897)
!4984 = !DILocation(line: 448, column: 11, scope: !4897)
!4985 = !DILocation(line: 449, column: 7, scope: !4986)
!4986 = distinct !DILexicalBlock(scope: !4897, file: !3, line: 449, column: 7)
!4987 = !DILocation(line: 449, column: 18, scope: !4986)
!4988 = !DILocation(line: 449, column: 22, scope: !4986)
!4989 = !DILocation(line: 449, column: 29, scope: !4986)
!4990 = !DILocation(line: 449, column: 15, scope: !4986)
!4991 = !DILocation(line: 450, column: 7, scope: !4986)
!4992 = !DILocation(line: 450, column: 10, scope: !4986)
!4993 = !DILocation(line: 450, column: 20, scope: !4986)
!4994 = !DILocation(line: 450, column: 18, scope: !4986)
!4995 = !DILocation(line: 451, column: 7, scope: !4986)
!4996 = !DILocation(line: 451, column: 10, scope: !4986)
!4997 = !DILocation(line: 451, column: 20, scope: !4986)
!4998 = !DILocation(line: 451, column: 18, scope: !4986)
!4999 = !DILocation(line: 449, column: 7, scope: !4897)
!5000 = !DILocation(line: 453, column: 11, scope: !5001)
!5001 = distinct !DILexicalBlock(scope: !5002, file: !3, line: 453, column: 11)
!5002 = distinct !DILexicalBlock(scope: !4986, file: !3, line: 452, column: 5)
!5003 = !DILocation(line: 453, column: 11, scope: !5002)
!5004 = !DILocation(line: 454, column: 10, scope: !5001)
!5005 = !DILocation(line: 454, column: 17, scope: !5001)
!5006 = !DILocation(line: 454, column: 9, scope: !5001)
!5007 = !DILocation(line: 455, column: 7, scope: !5002)
!5008 = !DILocation(line: 458, column: 38, scope: !4897)
!5009 = !DILocation(line: 458, column: 22, scope: !4897)
!5010 = !DILocation(line: 458, column: 43, scope: !4897)
!5011 = !DILocation(line: 458, column: 20, scope: !4897)
!5012 = !DILocation(line: 460, column: 23, scope: !4897)
!5013 = !DILocation(line: 460, column: 42, scope: !4897)
!5014 = !DILocation(line: 460, column: 40, scope: !4897)
!5015 = !DILocation(line: 460, column: 81, scope: !4897)
!5016 = !DILocation(line: 460, column: 20, scope: !4897)
!5017 = !DILocation(line: 462, column: 20, scope: !4897)
!5018 = !DILocation(line: 462, column: 24, scope: !4897)
!5019 = !DILocation(line: 462, column: 31, scope: !4897)
!5020 = !DILocation(line: 463, column: 24, scope: !4897)
!5021 = !DILocation(line: 463, column: 8, scope: !4897)
!5022 = !DILocation(line: 463, column: 29, scope: !4897)
!5023 = !DILocation(line: 463, column: 6, scope: !4897)
!5024 = !DILocation(line: 464, column: 8, scope: !4897)
!5025 = !DILocation(line: 464, column: 14, scope: !4897)
!5026 = !DILocation(line: 464, column: 21, scope: !4897)
!5027 = !DILocation(line: 464, column: 6, scope: !4897)
!5028 = !DILocation(line: 462, column: 17, scope: !4897)
!5029 = !DILocation(line: 465, column: 7, scope: !5030)
!5030 = distinct !DILexicalBlock(scope: !4897, file: !3, line: 465, column: 7)
!5031 = !DILocation(line: 465, column: 24, scope: !5030)
!5032 = !DILocation(line: 465, column: 22, scope: !5030)
!5033 = !DILocation(line: 466, column: 7, scope: !5030)
!5034 = !DILocation(line: 466, column: 10, scope: !5030)
!5035 = !DILocation(line: 466, column: 26, scope: !5030)
!5036 = !DILocation(line: 466, column: 24, scope: !5030)
!5037 = !DILocation(line: 465, column: 7, scope: !4897)
!5038 = !DILocation(line: 468, column: 11, scope: !5039)
!5039 = distinct !DILexicalBlock(scope: !5040, file: !3, line: 468, column: 11)
!5040 = distinct !DILexicalBlock(scope: !5030, file: !3, line: 467, column: 5)
!5041 = !DILocation(line: 468, column: 11, scope: !5040)
!5042 = !DILocation(line: 469, column: 10, scope: !5039)
!5043 = !DILocation(line: 469, column: 17, scope: !5039)
!5044 = !DILocation(line: 469, column: 9, scope: !5039)
!5045 = !DILocation(line: 470, column: 7, scope: !5040)
!5046 = !DILocation(line: 472, column: 3, scope: !4897)
!5047 = !DILocation(line: 473, column: 1, scope: !4897)
!5048 = distinct !DISubprogram(name: "cgraph_default_inline_p", scope: !3, file: !3, line: 478, type: !5049, scopeLine: 479, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2865)
!5049 = !DISubroutineType(types: !5050)
!5050 = !{!1367, !2465, !4699}
!5051 = !DILocalVariable(name: "n", arg: 1, scope: !5048, file: !3, line: 478, type: !2465)
!5052 = !DILocation(line: 478, column: 46, scope: !5048)
!5053 = !DILocalVariable(name: "reason", arg: 2, scope: !5048, file: !3, line: 478, type: !4699)
!5054 = !DILocation(line: 478, column: 73, scope: !5048)
!5055 = !DILocalVariable(name: "decl", scope: !5048, file: !3, line: 480, type: !1254)
!5056 = !DILocation(line: 480, column: 8, scope: !5048)
!5057 = !DILocation(line: 480, column: 15, scope: !5048)
!5058 = !DILocation(line: 480, column: 18, scope: !5048)
!5059 = !DILocation(line: 482, column: 8, scope: !5060)
!5060 = distinct !DILexicalBlock(scope: !5048, file: !3, line: 482, column: 7)
!5061 = !DILocation(line: 482, column: 36, scope: !5060)
!5062 = !DILocation(line: 482, column: 40, scope: !5060)
!5063 = !DILocation(line: 482, column: 7, scope: !5048)
!5064 = !DILocation(line: 484, column: 11, scope: !5065)
!5065 = distinct !DILexicalBlock(scope: !5066, file: !3, line: 484, column: 11)
!5066 = distinct !DILexicalBlock(scope: !5060, file: !3, line: 483, column: 5)
!5067 = !DILocation(line: 484, column: 11, scope: !5066)
!5068 = !DILocation(line: 485, column: 3, scope: !5065)
!5069 = !DILocation(line: 485, column: 10, scope: !5065)
!5070 = !DILocation(line: 485, column: 2, scope: !5065)
!5071 = !DILocation(line: 486, column: 7, scope: !5066)
!5072 = !DILocation(line: 489, column: 8, scope: !5073)
!5073 = distinct !DILexicalBlock(scope: !5048, file: !3, line: 489, column: 7)
!5074 = !DILocation(line: 489, column: 11, scope: !5073)
!5075 = !DILocation(line: 489, column: 7, scope: !5048)
!5076 = !DILocation(line: 491, column: 11, scope: !5077)
!5077 = distinct !DILexicalBlock(scope: !5078, file: !3, line: 491, column: 11)
!5078 = distinct !DILexicalBlock(scope: !5073, file: !3, line: 490, column: 5)
!5079 = !DILocation(line: 491, column: 11, scope: !5078)
!5080 = !DILocation(line: 492, column: 3, scope: !5077)
!5081 = !DILocation(line: 492, column: 10, scope: !5077)
!5082 = !DILocation(line: 492, column: 2, scope: !5077)
!5083 = !DILocation(line: 493, column: 7, scope: !5078)
!5084 = !DILocation(line: 496, column: 7, scope: !5085)
!5085 = distinct !DILexicalBlock(scope: !5048, file: !3, line: 496, column: 7)
!5086 = !DILocation(line: 496, column: 7, scope: !5048)
!5087 = !DILocation(line: 498, column: 11, scope: !5088)
!5088 = distinct !DILexicalBlock(scope: !5089, file: !3, line: 498, column: 11)
!5089 = distinct !DILexicalBlock(scope: !5085, file: !3, line: 497, column: 5)
!5090 = !DILocation(line: 498, column: 14, scope: !5088)
!5091 = !DILocation(line: 498, column: 21, scope: !5088)
!5092 = !DILocation(line: 498, column: 29, scope: !5088)
!5093 = !DILocation(line: 498, column: 26, scope: !5088)
!5094 = !DILocation(line: 498, column: 11, scope: !5089)
!5095 = !DILocation(line: 500, column: 8, scope: !5096)
!5096 = distinct !DILexicalBlock(scope: !5097, file: !3, line: 500, column: 8)
!5097 = distinct !DILexicalBlock(scope: !5088, file: !3, line: 499, column: 2)
!5098 = !DILocation(line: 500, column: 8, scope: !5097)
!5099 = !DILocation(line: 501, column: 7, scope: !5096)
!5100 = !DILocation(line: 501, column: 14, scope: !5096)
!5101 = !DILocation(line: 501, column: 6, scope: !5096)
!5102 = !DILocation(line: 502, column: 4, scope: !5097)
!5103 = !DILocation(line: 504, column: 5, scope: !5089)
!5104 = !DILocation(line: 507, column: 11, scope: !5105)
!5105 = distinct !DILexicalBlock(scope: !5106, file: !3, line: 507, column: 11)
!5106 = distinct !DILexicalBlock(scope: !5085, file: !3, line: 506, column: 5)
!5107 = !DILocation(line: 507, column: 14, scope: !5105)
!5108 = !DILocation(line: 507, column: 21, scope: !5105)
!5109 = !DILocation(line: 507, column: 29, scope: !5105)
!5110 = !DILocation(line: 507, column: 26, scope: !5105)
!5111 = !DILocation(line: 507, column: 11, scope: !5106)
!5112 = !DILocation(line: 509, column: 8, scope: !5113)
!5113 = distinct !DILexicalBlock(scope: !5114, file: !3, line: 509, column: 8)
!5114 = distinct !DILexicalBlock(scope: !5105, file: !3, line: 508, column: 2)
!5115 = !DILocation(line: 509, column: 8, scope: !5114)
!5116 = !DILocation(line: 510, column: 7, scope: !5113)
!5117 = !DILocation(line: 510, column: 14, scope: !5113)
!5118 = !DILocation(line: 510, column: 6, scope: !5113)
!5119 = !DILocation(line: 511, column: 4, scope: !5114)
!5120 = !DILocation(line: 515, column: 3, scope: !5048)
!5121 = !DILocation(line: 516, column: 1, scope: !5048)
!5122 = distinct !DISubprogram(name: "cgraph_mark_inline", scope: !3, file: !3, line: 354, type: !5123, scopeLine: 355, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2865)
!5123 = !DISubroutineType(types: !5124)
!5124 = !{!2470, !2470}
!5125 = !DILocalVariable(name: "edge", arg: 1, scope: !5122, file: !3, line: 354, type: !2470)
!5126 = !DILocation(line: 354, column: 41, scope: !5122)
!5127 = !DILocalVariable(name: "to", scope: !5122, file: !3, line: 356, type: !2465)
!5128 = !DILocation(line: 356, column: 23, scope: !5122)
!5129 = !DILocation(line: 356, column: 28, scope: !5122)
!5130 = !DILocation(line: 356, column: 34, scope: !5122)
!5131 = !DILocalVariable(name: "what", scope: !5122, file: !3, line: 357, type: !2465)
!5132 = !DILocation(line: 357, column: 23, scope: !5122)
!5133 = !DILocation(line: 357, column: 30, scope: !5122)
!5134 = !DILocation(line: 357, column: 36, scope: !5122)
!5135 = !DILocalVariable(name: "e", scope: !5122, file: !3, line: 358, type: !2470)
!5136 = !DILocation(line: 358, column: 23, scope: !5122)
!5137 = !DILocalVariable(name: "next", scope: !5122, file: !3, line: 358, type: !2470)
!5138 = !DILocation(line: 358, column: 27, scope: !5122)
!5139 = !DILocation(line: 360, column: 3, scope: !5122)
!5140 = !DILocation(line: 363, column: 12, scope: !5141)
!5141 = distinct !DILexicalBlock(scope: !5122, file: !3, line: 363, column: 3)
!5142 = !DILocation(line: 363, column: 18, scope: !5141)
!5143 = !DILocation(line: 363, column: 10, scope: !5141)
!5144 = !DILocation(line: 363, column: 8, scope: !5141)
!5145 = !DILocation(line: 363, column: 27, scope: !5146)
!5146 = distinct !DILexicalBlock(scope: !5141, file: !3, line: 363, column: 3)
!5147 = !DILocation(line: 363, column: 3, scope: !5141)
!5148 = !DILocation(line: 365, column: 14, scope: !5149)
!5149 = distinct !DILexicalBlock(scope: !5146, file: !3, line: 364, column: 5)
!5150 = !DILocation(line: 365, column: 17, scope: !5149)
!5151 = !DILocation(line: 365, column: 12, scope: !5149)
!5152 = !DILocation(line: 366, column: 11, scope: !5153)
!5153 = distinct !DILexicalBlock(scope: !5149, file: !3, line: 366, column: 11)
!5154 = !DILocation(line: 366, column: 14, scope: !5153)
!5155 = !DILocation(line: 366, column: 24, scope: !5153)
!5156 = !DILocation(line: 366, column: 21, scope: !5153)
!5157 = !DILocation(line: 366, column: 27, scope: !5153)
!5158 = !DILocation(line: 366, column: 30, scope: !5153)
!5159 = !DILocation(line: 366, column: 33, scope: !5153)
!5160 = !DILocation(line: 366, column: 11, scope: !5149)
!5161 = !DILocation(line: 368, column: 36, scope: !5162)
!5162 = distinct !DILexicalBlock(scope: !5153, file: !3, line: 367, column: 2)
!5163 = !DILocation(line: 368, column: 11, scope: !5162)
!5164 = !DILocation(line: 369, column: 8, scope: !5165)
!5165 = distinct !DILexicalBlock(scope: !5162, file: !3, line: 369, column: 8)
!5166 = !DILocation(line: 369, column: 13, scope: !5165)
!5167 = !DILocation(line: 369, column: 10, scope: !5165)
!5168 = !DILocation(line: 369, column: 8, scope: !5162)
!5169 = !DILocation(line: 370, column: 13, scope: !5165)
!5170 = !DILocation(line: 370, column: 11, scope: !5165)
!5171 = !DILocation(line: 370, column: 6, scope: !5165)
!5172 = !DILocation(line: 371, column: 2, scope: !5162)
!5173 = !DILocation(line: 372, column: 5, scope: !5149)
!5174 = !DILocation(line: 363, column: 34, scope: !5146)
!5175 = !DILocation(line: 363, column: 32, scope: !5146)
!5176 = !DILocation(line: 363, column: 3, scope: !5146)
!5177 = distinct !{!5177, !5147, !5178}
!5178 = !DILocation(line: 372, column: 5, scope: !5141)
!5179 = !DILocation(line: 374, column: 10, scope: !5122)
!5180 = !DILocation(line: 374, column: 3, scope: !5122)
!5181 = distinct !DISubprogram(name: "cgraph_mark_inline_edge", scope: !3, file: !3, line: 301, type: !5182, scopeLine: 303, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2865)
!5182 = !DISubroutineType(types: !5183)
!5183 = !{!1367, !2470, !1367, !5184}
!5184 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2696, size: 64)
!5185 = !DILocalVariable(name: "e", arg: 1, scope: !5181, file: !3, line: 301, type: !2470)
!5186 = !DILocation(line: 301, column: 46, scope: !5181)
!5187 = !DILocalVariable(name: "update_original", arg: 2, scope: !5181, file: !3, line: 301, type: !1367)
!5188 = !DILocation(line: 301, column: 54, scope: !5181)
!5189 = !DILocalVariable(name: "new_edges", arg: 3, scope: !5181, file: !3, line: 302, type: !5184)
!5190 = !DILocation(line: 302, column: 33, scope: !5181)
!5191 = !DILocalVariable(name: "old_size", scope: !5181, file: !3, line: 304, type: !1064)
!5192 = !DILocation(line: 304, column: 7, scope: !5181)
!5193 = !DILocalVariable(name: "new_size", scope: !5181, file: !3, line: 304, type: !1064)
!5194 = !DILocation(line: 304, column: 21, scope: !5181)
!5195 = !DILocalVariable(name: "to", scope: !5181, file: !3, line: 305, type: !2465)
!5196 = !DILocation(line: 305, column: 23, scope: !5181)
!5197 = !DILocalVariable(name: "what", scope: !5181, file: !3, line: 305, type: !2465)
!5198 = !DILocation(line: 305, column: 35, scope: !5181)
!5199 = !DILocalVariable(name: "curr", scope: !5181, file: !3, line: 306, type: !2470)
!5200 = !DILocation(line: 306, column: 23, scope: !5181)
!5201 = !DILocation(line: 306, column: 30, scope: !5181)
!5202 = !DILocalVariable(name: "freq", scope: !5181, file: !3, line: 307, type: !1064)
!5203 = !DILocation(line: 307, column: 7, scope: !5181)
!5204 = !DILocalVariable(name: "duplicate", scope: !5181, file: !3, line: 308, type: !1367)
!5205 = !DILocation(line: 308, column: 8, scope: !5181)
!5206 = !DILocalVariable(name: "orig_size", scope: !5181, file: !3, line: 309, type: !1064)
!5207 = !DILocation(line: 309, column: 7, scope: !5181)
!5208 = !DILocation(line: 309, column: 19, scope: !5181)
!5209 = !DILocation(line: 309, column: 22, scope: !5181)
!5210 = !DILocation(line: 309, column: 30, scope: !5181)
!5211 = !DILocation(line: 309, column: 37, scope: !5181)
!5212 = !DILocation(line: 311, column: 3, scope: !5181)
!5213 = !DILocation(line: 312, column: 3, scope: !5181)
!5214 = !DILocation(line: 312, column: 6, scope: !5181)
!5215 = !DILocation(line: 312, column: 20, scope: !5181)
!5216 = !DILocation(line: 314, column: 8, scope: !5217)
!5217 = distinct !DILexicalBlock(scope: !5181, file: !3, line: 314, column: 7)
!5218 = !DILocation(line: 314, column: 11, scope: !5217)
!5219 = !DILocation(line: 314, column: 19, scope: !5217)
!5220 = !DILocation(line: 314, column: 26, scope: !5217)
!5221 = !DILocation(line: 314, column: 7, scope: !5181)
!5222 = !DILocation(line: 315, column: 5, scope: !5217)
!5223 = !DILocation(line: 315, column: 45, scope: !5217)
!5224 = !DILocation(line: 316, column: 3, scope: !5181)
!5225 = !DILocation(line: 316, column: 6, scope: !5181)
!5226 = !DILocation(line: 316, column: 14, scope: !5181)
!5227 = !DILocation(line: 316, column: 21, scope: !5181)
!5228 = !DILocation(line: 316, column: 29, scope: !5181)
!5229 = !DILocation(line: 318, column: 7, scope: !5230)
!5230 = distinct !DILexicalBlock(scope: !5181, file: !3, line: 318, column: 7)
!5231 = !DILocation(line: 318, column: 10, scope: !5230)
!5232 = !DILocation(line: 318, column: 18, scope: !5230)
!5233 = !DILocation(line: 318, column: 27, scope: !5230)
!5234 = !DILocation(line: 319, column: 7, scope: !5230)
!5235 = !DILocation(line: 319, column: 51, scope: !5230)
!5236 = !DILocation(line: 319, column: 54, scope: !5230)
!5237 = !DILocation(line: 319, column: 11, scope: !5230)
!5238 = !DILocation(line: 320, column: 7, scope: !5230)
!5239 = !DILocation(line: 320, column: 10, scope: !5230)
!5240 = !DILocation(line: 320, column: 13, scope: !5230)
!5241 = !DILocation(line: 320, column: 21, scope: !5230)
!5242 = !DILocation(line: 318, column: 7, scope: !5181)
!5243 = !DILocation(line: 321, column: 15, scope: !5230)
!5244 = !DILocation(line: 321, column: 5, scope: !5230)
!5245 = !DILocation(line: 322, column: 31, scope: !5181)
!5246 = !DILocation(line: 322, column: 40, scope: !5181)
!5247 = !DILocation(line: 322, column: 3, scope: !5181)
!5248 = !DILocation(line: 324, column: 10, scope: !5181)
!5249 = !DILocation(line: 324, column: 13, scope: !5181)
!5250 = !DILocation(line: 324, column: 8, scope: !5181)
!5251 = !DILocation(line: 326, column: 10, scope: !5181)
!5252 = !DILocation(line: 326, column: 13, scope: !5181)
!5253 = !DILocation(line: 326, column: 8, scope: !5181)
!5254 = !DILocation(line: 328, column: 3, scope: !5181)
!5255 = !DILocation(line: 328, column: 9, scope: !5256)
!5256 = distinct !DILexicalBlock(scope: !5257, file: !3, line: 328, column: 3)
!5257 = distinct !DILexicalBlock(scope: !5181, file: !3, line: 328, column: 3)
!5258 = !DILocation(line: 328, column: 11, scope: !5256)
!5259 = !DILocation(line: 328, column: 15, scope: !5256)
!5260 = !DILocation(line: 328, column: 18, scope: !5256)
!5261 = !DILocation(line: 328, column: 14, scope: !5256)
!5262 = !DILocation(line: 0, scope: !5256)
!5263 = !DILocation(line: 328, column: 3, scope: !5257)
!5264 = !DILocation(line: 330, column: 12, scope: !5265)
!5265 = distinct !DILexicalBlock(scope: !5256, file: !3, line: 329, column: 5)
!5266 = !DILocation(line: 330, column: 15, scope: !5265)
!5267 = !DILocation(line: 330, column: 10, scope: !5265)
!5268 = !DILocation(line: 331, column: 18, scope: !5265)
!5269 = !DILocation(line: 331, column: 21, scope: !5265)
!5270 = !DILocation(line: 331, column: 29, scope: !5265)
!5271 = !DILocation(line: 331, column: 36, scope: !5265)
!5272 = !DILocation(line: 331, column: 16, scope: !5265)
!5273 = !DILocation(line: 332, column: 58, scope: !5265)
!5274 = !DILocation(line: 332, column: 62, scope: !5265)
!5275 = !DILocation(line: 332, column: 18, scope: !5265)
!5276 = !DILocation(line: 332, column: 16, scope: !5265)
!5277 = !DILocation(line: 333, column: 25, scope: !5265)
!5278 = !DILocation(line: 333, column: 7, scope: !5265)
!5279 = !DILocation(line: 333, column: 11, scope: !5265)
!5280 = !DILocation(line: 333, column: 18, scope: !5265)
!5281 = !DILocation(line: 333, column: 23, scope: !5265)
!5282 = !DILocation(line: 334, column: 62, scope: !5265)
!5283 = !DILocation(line: 334, column: 68, scope: !5265)
!5284 = !DILocation(line: 334, column: 72, scope: !5265)
!5285 = !DILocation(line: 334, column: 25, scope: !5265)
!5286 = !DILocation(line: 334, column: 7, scope: !5265)
!5287 = !DILocation(line: 334, column: 11, scope: !5265)
!5288 = !DILocation(line: 334, column: 18, scope: !5265)
!5289 = !DILocation(line: 334, column: 23, scope: !5265)
!5290 = !DILocation(line: 335, column: 5, scope: !5265)
!5291 = !DILocation(line: 328, column: 37, scope: !5256)
!5292 = !DILocation(line: 328, column: 40, scope: !5256)
!5293 = !DILocation(line: 328, column: 48, scope: !5256)
!5294 = !DILocation(line: 328, column: 35, scope: !5256)
!5295 = !DILocation(line: 328, column: 3, scope: !5256)
!5296 = distinct !{!5296, !5263, !5297}
!5297 = !DILocation(line: 335, column: 5, scope: !5257)
!5298 = !DILocation(line: 336, column: 3, scope: !5181)
!5299 = !DILocation(line: 337, column: 7, scope: !5300)
!5300 = distinct !DILexicalBlock(scope: !5181, file: !3, line: 337, column: 7)
!5301 = !DILocation(line: 337, column: 18, scope: !5300)
!5302 = !DILocation(line: 337, column: 16, scope: !5300)
!5303 = !DILocation(line: 337, column: 7, scope: !5181)
!5304 = !DILocation(line: 338, column: 21, scope: !5300)
!5305 = !DILocation(line: 338, column: 32, scope: !5300)
!5306 = !DILocation(line: 338, column: 30, scope: !5300)
!5307 = !DILocation(line: 338, column: 18, scope: !5300)
!5308 = !DILocation(line: 338, column: 5, scope: !5300)
!5309 = !DILocation(line: 339, column: 8, scope: !5310)
!5310 = distinct !DILexicalBlock(scope: !5181, file: !3, line: 339, column: 7)
!5311 = !DILocation(line: 339, column: 7, scope: !5181)
!5312 = !DILocation(line: 340, column: 21, scope: !5310)
!5313 = !DILocation(line: 340, column: 18, scope: !5310)
!5314 = !DILocation(line: 340, column: 5, scope: !5310)
!5315 = !DILocation(line: 341, column: 17, scope: !5181)
!5316 = !DILocation(line: 343, column: 7, scope: !5317)
!5317 = distinct !DILexicalBlock(scope: !5181, file: !3, line: 343, column: 7)
!5318 = !DILocation(line: 343, column: 7, scope: !5181)
!5319 = !DILocation(line: 344, column: 47, scope: !5317)
!5320 = !DILocation(line: 344, column: 53, scope: !5317)
!5321 = !DILocation(line: 344, column: 12, scope: !5317)
!5322 = !DILocation(line: 344, column: 5, scope: !5317)
!5323 = !DILocation(line: 346, column: 5, scope: !5317)
!5324 = !DILocation(line: 347, column: 1, scope: !5181)
!5325 = distinct !DISubprogram(name: "cgraph_estimate_time_after_inlining", scope: !3, file: !3, line: 186, type: !4790, scopeLine: 188, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2865)
!5326 = !DILocalVariable(name: "frequency", arg: 1, scope: !5325, file: !3, line: 186, type: !1064)
!5327 = !DILocation(line: 186, column: 42, scope: !5325)
!5328 = !DILocalVariable(name: "to", arg: 2, scope: !5325, file: !3, line: 186, type: !2465)
!5329 = !DILocation(line: 186, column: 73, scope: !5325)
!5330 = !DILocalVariable(name: "what", arg: 3, scope: !5325, file: !3, line: 187, type: !2465)
!5331 = !DILocation(line: 187, column: 30, scope: !5325)
!5332 = !DILocalVariable(name: "time", scope: !5325, file: !3, line: 189, type: !1062)
!5333 = !DILocation(line: 189, column: 13, scope: !5325)
!5334 = !DILocation(line: 189, column: 33, scope: !5325)
!5335 = !DILocation(line: 189, column: 39, scope: !5325)
!5336 = !DILocation(line: 189, column: 46, scope: !5325)
!5337 = !DILocation(line: 189, column: 22, scope: !5325)
!5338 = !DILocation(line: 190, column: 26, scope: !5325)
!5339 = !DILocation(line: 190, column: 10, scope: !5325)
!5340 = !DILocation(line: 190, column: 33, scope: !5325)
!5341 = !DILocation(line: 190, column: 8, scope: !5325)
!5342 = !DILocation(line: 191, column: 11, scope: !5325)
!5343 = !DILocation(line: 191, column: 9, scope: !5325)
!5344 = !DILocation(line: 191, column: 21, scope: !5325)
!5345 = !DILocation(line: 191, column: 45, scope: !5325)
!5346 = !DILocation(line: 192, column: 9, scope: !5325)
!5347 = !DILocation(line: 192, column: 13, scope: !5325)
!5348 = !DILocation(line: 192, column: 20, scope: !5325)
!5349 = !DILocation(line: 192, column: 7, scope: !5325)
!5350 = !DILocation(line: 193, column: 7, scope: !5351)
!5351 = distinct !DILexicalBlock(scope: !5325, file: !3, line: 193, column: 7)
!5352 = !DILocation(line: 193, column: 12, scope: !5351)
!5353 = !DILocation(line: 193, column: 7, scope: !5325)
!5354 = !DILocation(line: 194, column: 10, scope: !5351)
!5355 = !DILocation(line: 194, column: 5, scope: !5351)
!5356 = !DILocation(line: 195, column: 7, scope: !5357)
!5357 = distinct !DILexicalBlock(scope: !5325, file: !3, line: 195, column: 7)
!5358 = !DILocation(line: 195, column: 12, scope: !5357)
!5359 = !DILocation(line: 195, column: 7, scope: !5325)
!5360 = !DILocation(line: 196, column: 10, scope: !5357)
!5361 = !DILocation(line: 196, column: 5, scope: !5357)
!5362 = !DILocation(line: 197, column: 10, scope: !5325)
!5363 = !DILocation(line: 197, column: 3, scope: !5325)
!5364 = distinct !DISubprogram(name: "cgraph_only_called_directly_p", scope: !568, file: !568, line: 715, type: !3039, scopeLine: 716, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2865)
!5365 = !DILocalVariable(name: "node", arg: 1, scope: !5364, file: !568, line: 715, type: !2465)
!5366 = !DILocation(line: 715, column: 52, scope: !5364)
!5367 = !DILocation(line: 717, column: 11, scope: !5364)
!5368 = !DILocation(line: 717, column: 17, scope: !5364)
!5369 = !DILocation(line: 717, column: 24, scope: !5364)
!5370 = !DILocation(line: 717, column: 28, scope: !5364)
!5371 = !DILocation(line: 717, column: 34, scope: !5364)
!5372 = !DILocation(line: 717, column: 40, scope: !5364)
!5373 = !DILocation(line: 717, column: 27, scope: !5364)
!5374 = !DILocation(line: 0, scope: !5364)
!5375 = !DILocation(line: 717, column: 10, scope: !5364)
!5376 = !DILocation(line: 717, column: 3, scope: !5364)
!5377 = distinct !DISubprogram(name: "gsi_start_bb", scope: !757, file: !757, line: 4418, type: !5378, scopeLine: 4419, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2865)
!5378 = !DISubroutineType(types: !5379)
!5379 = !{!3272, !1676}
!5380 = !DILocalVariable(name: "bb", arg: 1, scope: !5377, file: !757, line: 4418, type: !1676)
!5381 = !DILocation(line: 4418, column: 27, scope: !5377)
!5382 = !DILocalVariable(name: "i", scope: !5377, file: !757, line: 4420, type: !3272)
!5383 = !DILocation(line: 4420, column: 24, scope: !5377)
!5384 = !DILocalVariable(name: "seq", scope: !5377, file: !757, line: 4421, type: !1181)
!5385 = !DILocation(line: 4421, column: 14, scope: !5377)
!5386 = !DILocation(line: 4423, column: 17, scope: !5377)
!5387 = !DILocation(line: 4423, column: 9, scope: !5377)
!5388 = !DILocation(line: 4423, column: 7, scope: !5377)
!5389 = !DILocation(line: 4424, column: 29, scope: !5377)
!5390 = !DILocation(line: 4424, column: 11, scope: !5377)
!5391 = !DILocation(line: 4424, column: 5, scope: !5377)
!5392 = !DILocation(line: 4424, column: 9, scope: !5377)
!5393 = !DILocation(line: 4425, column: 11, scope: !5377)
!5394 = !DILocation(line: 4425, column: 5, scope: !5377)
!5395 = !DILocation(line: 4425, column: 9, scope: !5377)
!5396 = !DILocation(line: 4426, column: 10, scope: !5377)
!5397 = !DILocation(line: 4426, column: 5, scope: !5377)
!5398 = !DILocation(line: 4426, column: 8, scope: !5377)
!5399 = !DILocation(line: 4428, column: 3, scope: !5377)
!5400 = distinct !DISubprogram(name: "gsi_end_p", scope: !757, file: !757, line: 4467, type: !5401, scopeLine: 4468, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2865)
!5401 = !DISubroutineType(types: !5402)
!5402 = !{!1367, !3272}
!5403 = !DILocalVariable(name: "i", arg: 1, scope: !5400, file: !757, line: 4467, type: !3272)
!5404 = !DILocation(line: 4467, column: 33, scope: !5400)
!5405 = !DILocation(line: 4469, column: 12, scope: !5400)
!5406 = !DILocation(line: 4469, column: 16, scope: !5400)
!5407 = !DILocation(line: 4469, column: 10, scope: !5400)
!5408 = !DILocation(line: 4469, column: 3, scope: !5400)
!5409 = distinct !DISubprogram(name: "gsi_stmt", scope: !757, file: !757, line: 4501, type: !5410, scopeLine: 4502, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2865)
!5410 = !DISubroutineType(types: !5411)
!5411 = !{!1191, !3272}
!5412 = !DILocalVariable(name: "i", arg: 1, scope: !5409, file: !757, line: 4501, type: !3272)
!5413 = !DILocation(line: 4501, column: 32, scope: !5409)
!5414 = !DILocation(line: 4503, column: 12, scope: !5409)
!5415 = !DILocation(line: 4503, column: 17, scope: !5409)
!5416 = !DILocation(line: 4503, column: 3, scope: !5409)
!5417 = distinct !DISubprogram(name: "likely_eliminated_by_inlining_p", scope: !3, file: !3, line: 1713, type: !5418, scopeLine: 1714, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2865)
!5418 = !DISubroutineType(types: !5419)
!5419 = !{!1367, !1191}
!5420 = !DILocalVariable(name: "stmt", arg: 1, scope: !5417, file: !3, line: 1713, type: !1191)
!5421 = !DILocation(line: 1713, column: 41, scope: !5417)
!5422 = !DILocalVariable(name: "code", scope: !5417, file: !3, line: 1715, type: !756)
!5423 = !DILocation(line: 1715, column: 20, scope: !5417)
!5424 = !DILocation(line: 1715, column: 40, scope: !5417)
!5425 = !DILocation(line: 1715, column: 27, scope: !5417)
!5426 = !DILocation(line: 1716, column: 11, scope: !5417)
!5427 = !DILocation(line: 1716, column: 3, scope: !5417)
!5428 = !DILocation(line: 1719, column: 9, scope: !5429)
!5429 = distinct !DILexicalBlock(scope: !5417, file: !3, line: 1717, column: 5)
!5430 = !DILocation(line: 1721, column: 22, scope: !5431)
!5431 = distinct !DILexicalBlock(scope: !5429, file: !3, line: 1721, column: 6)
!5432 = !DILocation(line: 1721, column: 6, scope: !5431)
!5433 = !DILocation(line: 1721, column: 28, scope: !5431)
!5434 = !DILocation(line: 1721, column: 6, scope: !5429)
!5435 = !DILocation(line: 1722, column: 4, scope: !5431)
!5436 = !DILocation(line: 1727, column: 30, scope: !5437)
!5437 = distinct !DILexicalBlock(scope: !5429, file: !3, line: 1727, column: 6)
!5438 = !DILocation(line: 1727, column: 6, scope: !5437)
!5439 = !DILocation(line: 1727, column: 36, scope: !5437)
!5440 = !DILocation(line: 1728, column: 6, scope: !5437)
!5441 = !DILocation(line: 1728, column: 33, scope: !5437)
!5442 = !DILocation(line: 1728, column: 9, scope: !5437)
!5443 = !DILocation(line: 1728, column: 39, scope: !5437)
!5444 = !DILocation(line: 1729, column: 6, scope: !5437)
!5445 = !DILocation(line: 1729, column: 33, scope: !5437)
!5446 = !DILocation(line: 1729, column: 9, scope: !5437)
!5447 = !DILocation(line: 1729, column: 39, scope: !5437)
!5448 = !DILocation(line: 1730, column: 6, scope: !5437)
!5449 = !DILocation(line: 1730, column: 34, scope: !5437)
!5450 = !DILocation(line: 1730, column: 9, scope: !5437)
!5451 = !DILocation(line: 1730, column: 40, scope: !5437)
!5452 = !DILocation(line: 1727, column: 6, scope: !5429)
!5453 = !DILocalVariable(name: "rhs", scope: !5454, file: !3, line: 1732, type: !1254)
!5454 = distinct !DILexicalBlock(scope: !5437, file: !3, line: 1731, column: 4)
!5455 = !DILocation(line: 1732, column: 11, scope: !5454)
!5456 = !DILocation(line: 1732, column: 37, scope: !5454)
!5457 = !DILocation(line: 1732, column: 17, scope: !5454)
!5458 = !DILocalVariable(name: "lhs", scope: !5454, file: !3, line: 1733, type: !1254)
!5459 = !DILocation(line: 1733, column: 18, scope: !5454)
!5460 = !DILocation(line: 1733, column: 43, scope: !5454)
!5461 = !DILocation(line: 1733, column: 24, scope: !5454)
!5462 = !DILocalVariable(name: "inner_rhs", scope: !5454, file: !3, line: 1734, type: !1254)
!5463 = !DILocation(line: 1734, column: 11, scope: !5454)
!5464 = !DILocation(line: 1734, column: 23, scope: !5454)
!5465 = !DILocalVariable(name: "inner_lhs", scope: !5454, file: !3, line: 1735, type: !1254)
!5466 = !DILocation(line: 1735, column: 11, scope: !5454)
!5467 = !DILocation(line: 1735, column: 23, scope: !5454)
!5468 = !DILocalVariable(name: "rhs_free", scope: !5454, file: !3, line: 1736, type: !1367)
!5469 = !DILocation(line: 1736, column: 11, scope: !5454)
!5470 = !DILocalVariable(name: "lhs_free", scope: !5454, file: !3, line: 1737, type: !1367)
!5471 = !DILocation(line: 1737, column: 11, scope: !5454)
!5472 = !DILocation(line: 1739, column: 7, scope: !5454)
!5473 = !DILocation(line: 1739, column: 35, scope: !5454)
!5474 = !DILocation(line: 1739, column: 14, scope: !5454)
!5475 = !DILocation(line: 1739, column: 46, scope: !5454)
!5476 = !DILocation(line: 1739, column: 49, scope: !5454)
!5477 = !DILocation(line: 1739, column: 71, scope: !5454)
!5478 = !DILocation(line: 1740, column: 20, scope: !5454)
!5479 = !DILocation(line: 1740, column: 18, scope: !5454)
!5480 = distinct !{!5480, !5472, !5478}
!5481 = !DILocation(line: 1741, column: 7, scope: !5454)
!5482 = !DILocation(line: 1741, column: 35, scope: !5454)
!5483 = !DILocation(line: 1741, column: 14, scope: !5454)
!5484 = !DILocation(line: 1742, column: 13, scope: !5454)
!5485 = !DILocation(line: 1742, column: 16, scope: !5454)
!5486 = !DILocation(line: 1742, column: 38, scope: !5454)
!5487 = !DILocation(line: 1742, column: 51, scope: !5454)
!5488 = !DILocation(line: 1742, column: 54, scope: !5454)
!5489 = !DILocation(line: 1742, column: 76, scope: !5454)
!5490 = !DILocation(line: 1743, column: 20, scope: !5454)
!5491 = !DILocation(line: 1743, column: 18, scope: !5454)
!5492 = distinct !{!5492, !5481, !5490}
!5493 = !DILocation(line: 1746, column: 10, scope: !5494)
!5494 = distinct !DILexicalBlock(scope: !5454, file: !3, line: 1746, column: 10)
!5495 = !DILocation(line: 1746, column: 32, scope: !5494)
!5496 = !DILocation(line: 1747, column: 10, scope: !5494)
!5497 = !DILocation(line: 1747, column: 14, scope: !5494)
!5498 = !DILocation(line: 1747, column: 36, scope: !5494)
!5499 = !DILocation(line: 1748, column: 7, scope: !5494)
!5500 = !DILocation(line: 1748, column: 10, scope: !5494)
!5501 = !DILocation(line: 1749, column: 7, scope: !5494)
!5502 = !DILocation(line: 1749, column: 10, scope: !5494)
!5503 = !DILocation(line: 1749, column: 47, scope: !5494)
!5504 = !DILocation(line: 1746, column: 10, scope: !5454)
!5505 = !DILocation(line: 1750, column: 17, scope: !5494)
!5506 = !DILocation(line: 1750, column: 8, scope: !5494)
!5507 = !DILocation(line: 1751, column: 10, scope: !5508)
!5508 = distinct !DILexicalBlock(scope: !5454, file: !3, line: 1751, column: 10)
!5509 = !DILocation(line: 1751, column: 19, scope: !5508)
!5510 = !DILocation(line: 1751, column: 37, scope: !5508)
!5511 = !DILocation(line: 1751, column: 22, scope: !5508)
!5512 = !DILocation(line: 1751, column: 10, scope: !5454)
!5513 = !DILocation(line: 1752, column: 17, scope: !5508)
!5514 = !DILocation(line: 1752, column: 8, scope: !5508)
!5515 = !DILocation(line: 1753, column: 12, scope: !5516)
!5516 = distinct !DILexicalBlock(scope: !5454, file: !3, line: 1753, column: 10)
!5517 = !DILocation(line: 1753, column: 34, scope: !5516)
!5518 = !DILocation(line: 1754, column: 12, scope: !5516)
!5519 = !DILocation(line: 1754, column: 16, scope: !5516)
!5520 = !DILocation(line: 1754, column: 38, scope: !5516)
!5521 = !DILocation(line: 1755, column: 9, scope: !5516)
!5522 = !DILocation(line: 1755, column: 12, scope: !5516)
!5523 = !DILocation(line: 1756, column: 9, scope: !5516)
!5524 = !DILocation(line: 1756, column: 12, scope: !5516)
!5525 = !DILocation(line: 1756, column: 49, scope: !5516)
!5526 = !DILocation(line: 1757, column: 4, scope: !5516)
!5527 = !DILocation(line: 1757, column: 7, scope: !5516)
!5528 = !DILocation(line: 1757, column: 20, scope: !5516)
!5529 = !DILocation(line: 1757, column: 17, scope: !5516)
!5530 = !DILocation(line: 1758, column: 10, scope: !5516)
!5531 = !DILocation(line: 1758, column: 13, scope: !5516)
!5532 = !DILocation(line: 1758, column: 35, scope: !5516)
!5533 = !DILocation(line: 1759, column: 10, scope: !5516)
!5534 = !DILocation(line: 1759, column: 14, scope: !5516)
!5535 = !DILocation(line: 1759, column: 36, scope: !5516)
!5536 = !DILocation(line: 1760, column: 7, scope: !5516)
!5537 = !DILocation(line: 1760, column: 10, scope: !5516)
!5538 = !DILocation(line: 1760, column: 47, scope: !5516)
!5539 = !DILocation(line: 1753, column: 10, scope: !5454)
!5540 = !DILocation(line: 1761, column: 17, scope: !5516)
!5541 = !DILocation(line: 1761, column: 8, scope: !5516)
!5542 = !DILocation(line: 1762, column: 10, scope: !5543)
!5543 = distinct !DILexicalBlock(scope: !5454, file: !3, line: 1762, column: 10)
!5544 = !DILocation(line: 1762, column: 19, scope: !5543)
!5545 = !DILocation(line: 1762, column: 38, scope: !5543)
!5546 = !DILocation(line: 1762, column: 23, scope: !5543)
!5547 = !DILocation(line: 1762, column: 43, scope: !5543)
!5548 = !DILocation(line: 1762, column: 71, scope: !5543)
!5549 = !DILocation(line: 1762, column: 46, scope: !5543)
!5550 = !DILocation(line: 1762, column: 10, scope: !5454)
!5551 = !DILocation(line: 1763, column: 17, scope: !5543)
!5552 = !DILocation(line: 1763, column: 8, scope: !5543)
!5553 = !DILocation(line: 1764, column: 10, scope: !5554)
!5554 = distinct !DILexicalBlock(scope: !5454, file: !3, line: 1764, column: 10)
!5555 = !DILocation(line: 1764, column: 19, scope: !5554)
!5556 = !DILocation(line: 1764, column: 22, scope: !5554)
!5557 = !DILocation(line: 1764, column: 10, scope: !5454)
!5558 = !DILocation(line: 1765, column: 8, scope: !5554)
!5559 = !DILocation(line: 1766, column: 4, scope: !5454)
!5560 = !DILocation(line: 1767, column: 2, scope: !5429)
!5561 = !DILocation(line: 1769, column: 2, scope: !5429)
!5562 = !DILocation(line: 1771, column: 1, scope: !5417)
!5563 = distinct !DISubprogram(name: "gsi_next", scope: !757, file: !757, line: 4485, type: !5564, scopeLine: 4486, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2865)
!5564 = !DISubroutineType(types: !5565)
!5565 = !{null, !5566}
!5566 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3272, size: 64)
!5567 = !DILocalVariable(name: "i", arg: 1, scope: !5563, file: !757, line: 4485, type: !5566)
!5568 = !DILocation(line: 4485, column: 33, scope: !5563)
!5569 = !DILocation(line: 4487, column: 12, scope: !5563)
!5570 = !DILocation(line: 4487, column: 15, scope: !5563)
!5571 = !DILocation(line: 4487, column: 20, scope: !5563)
!5572 = !DILocation(line: 4487, column: 3, scope: !5563)
!5573 = !DILocation(line: 4487, column: 6, scope: !5563)
!5574 = !DILocation(line: 4487, column: 10, scope: !5563)
!5575 = !DILocation(line: 4488, column: 1, scope: !5563)
!5576 = distinct !DISubprogram(name: "bb_seq", scope: !757, file: !757, line: 237, type: !5577, scopeLine: 238, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2865)
!5577 = !DISubroutineType(types: !5578)
!5578 = !{!1181, !5579}
!5579 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_basic_block", file: !1070, line: 112, baseType: !5580)
!5580 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5581, size: 64)
!5581 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1156)
!5582 = !DILocalVariable(name: "bb", arg: 1, scope: !5576, file: !757, line: 237, type: !5579)
!5583 = !DILocation(line: 237, column: 27, scope: !5576)
!5584 = !DILocation(line: 239, column: 13, scope: !5576)
!5585 = !DILocation(line: 239, column: 17, scope: !5576)
!5586 = !DILocation(line: 239, column: 23, scope: !5576)
!5587 = !DILocation(line: 239, column: 33, scope: !5576)
!5588 = !DILocation(line: 239, column: 36, scope: !5576)
!5589 = !DILocation(line: 239, column: 40, scope: !5576)
!5590 = !DILocation(line: 239, column: 43, scope: !5576)
!5591 = !DILocation(line: 239, column: 10, scope: !5576)
!5592 = !DILocation(line: 239, column: 53, scope: !5576)
!5593 = !DILocation(line: 239, column: 57, scope: !5576)
!5594 = !DILocation(line: 239, column: 60, scope: !5576)
!5595 = !DILocation(line: 239, column: 68, scope: !5576)
!5596 = !DILocation(line: 239, column: 3, scope: !5576)
!5597 = distinct !DISubprogram(name: "gimple_seq_first", scope: !757, file: !757, line: 159, type: !5598, scopeLine: 160, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2865)
!5598 = !DISubroutineType(types: !5599)
!5599 = !{!1186, !5600}
!5600 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_gimple_seq", file: !1070, line: 67, baseType: !5601)
!5601 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5602, size: 64)
!5602 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1183)
!5603 = !DILocalVariable(name: "s", arg: 1, scope: !5597, file: !757, line: 159, type: !5600)
!5604 = !DILocation(line: 159, column: 36, scope: !5597)
!5605 = !DILocation(line: 161, column: 10, scope: !5597)
!5606 = !DILocation(line: 161, column: 14, scope: !5597)
!5607 = !DILocation(line: 161, column: 17, scope: !5597)
!5608 = !DILocation(line: 161, column: 3, scope: !5597)
!5609 = distinct !DISubprogram(name: "gimple_code", scope: !757, file: !757, line: 1052, type: !5610, scopeLine: 1053, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2865)
!5610 = !DISubroutineType(types: !5611)
!5611 = !{!756, !2694}
!5612 = !DILocalVariable(name: "g", arg: 1, scope: !5609, file: !757, line: 1052, type: !2694)
!5613 = !DILocation(line: 1052, column: 27, scope: !5609)
!5614 = !DILocation(line: 1054, column: 10, scope: !5609)
!5615 = !DILocation(line: 1054, column: 13, scope: !5609)
!5616 = !DILocation(line: 1054, column: 20, scope: !5609)
!5617 = !DILocation(line: 1054, column: 3, scope: !5609)
!5618 = distinct !DISubprogram(name: "gimple_num_ops", scope: !757, file: !757, line: 1596, type: !5619, scopeLine: 1597, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2865)
!5619 = !DISubroutineType(types: !5620)
!5620 = !{!7, !2694}
!5621 = !DILocalVariable(name: "gs", arg: 1, scope: !5618, file: !757, line: 1596, type: !2694)
!5622 = !DILocation(line: 1596, column: 30, scope: !5618)
!5623 = !DILocation(line: 1598, column: 10, scope: !5618)
!5624 = !DILocation(line: 1598, column: 14, scope: !5618)
!5625 = !DILocation(line: 1598, column: 21, scope: !5618)
!5626 = !DILocation(line: 1598, column: 3, scope: !5618)
!5627 = distinct !DISubprogram(name: "gimple_assign_rhs_code", scope: !757, file: !757, line: 1815, type: !5628, scopeLine: 1816, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2865)
!5628 = !DISubroutineType(types: !5629)
!5629 = !{!134, !2694}
!5630 = !DILocalVariable(name: "gs", arg: 1, scope: !5627, file: !757, line: 1815, type: !2694)
!5631 = !DILocation(line: 1815, column: 38, scope: !5627)
!5632 = !DILocalVariable(name: "code", scope: !5627, file: !757, line: 1817, type: !134)
!5633 = !DILocation(line: 1817, column: 18, scope: !5627)
!5634 = !DILocation(line: 1820, column: 28, scope: !5627)
!5635 = !DILocation(line: 1820, column: 10, scope: !5627)
!5636 = !DILocation(line: 1820, column: 8, scope: !5627)
!5637 = !DILocation(line: 1821, column: 29, scope: !5638)
!5638 = distinct !DILexicalBlock(scope: !5627, file: !757, line: 1821, column: 7)
!5639 = !DILocation(line: 1821, column: 7, scope: !5638)
!5640 = !DILocation(line: 1821, column: 35, scope: !5638)
!5641 = !DILocation(line: 1821, column: 7, scope: !5627)
!5642 = !DILocation(line: 1822, column: 12, scope: !5638)
!5643 = !DILocation(line: 1822, column: 10, scope: !5638)
!5644 = !DILocation(line: 1822, column: 5, scope: !5638)
!5645 = !DILocation(line: 1824, column: 10, scope: !5627)
!5646 = !DILocation(line: 1824, column: 3, scope: !5627)
!5647 = distinct !DISubprogram(name: "gimple_assign_rhs_class", scope: !757, file: !757, line: 1844, type: !5648, scopeLine: 1845, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2865)
!5648 = !DISubroutineType(types: !5649)
!5649 = !{!795, !2694}
!5650 = !DILocalVariable(name: "gs", arg: 1, scope: !5647, file: !757, line: 1844, type: !2694)
!5651 = !DILocation(line: 1844, column: 39, scope: !5647)
!5652 = !DILocation(line: 1846, column: 56, scope: !5647)
!5653 = !DILocation(line: 1846, column: 32, scope: !5647)
!5654 = !DILocation(line: 1846, column: 10, scope: !5647)
!5655 = !DILocation(line: 1846, column: 3, scope: !5647)
!5656 = distinct !DISubprogram(name: "gimple_assign_rhs1", scope: !757, file: !757, line: 1727, type: !5657, scopeLine: 1728, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2865)
!5657 = !DISubroutineType(types: !5658)
!5658 = !{!1254, !2694}
!5659 = !DILocalVariable(name: "gs", arg: 1, scope: !5656, file: !757, line: 1727, type: !2694)
!5660 = !DILocation(line: 1727, column: 34, scope: !5656)
!5661 = !DILocation(line: 1730, column: 21, scope: !5656)
!5662 = !DILocation(line: 1730, column: 10, scope: !5656)
!5663 = !DILocation(line: 1730, column: 3, scope: !5656)
!5664 = distinct !DISubprogram(name: "gimple_assign_lhs", scope: !757, file: !757, line: 1694, type: !5657, scopeLine: 1695, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2865)
!5665 = !DILocalVariable(name: "gs", arg: 1, scope: !5664, file: !757, line: 1694, type: !2694)
!5666 = !DILocation(line: 1694, column: 33, scope: !5664)
!5667 = !DILocation(line: 1697, column: 21, scope: !5664)
!5668 = !DILocation(line: 1697, column: 10, scope: !5664)
!5669 = !DILocation(line: 1697, column: 3, scope: !5664)
!5670 = distinct !DISubprogram(name: "handled_component_p", scope: !135, file: !135, line: 4551, type: !5671, scopeLine: 4552, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2865)
!5671 = !DISubroutineType(types: !5672)
!5672 = !{!1367, !5673}
!5673 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_tree", file: !1070, line: 59, baseType: !5674)
!5674 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5675, size: 64)
!5675 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1256)
!5676 = !DILocalVariable(name: "t", arg: 1, scope: !5670, file: !135, line: 4551, type: !5673)
!5677 = !DILocation(line: 4551, column: 33, scope: !5670)
!5678 = !DILocation(line: 4553, column: 11, scope: !5670)
!5679 = !DILocation(line: 4553, column: 3, scope: !5670)
!5680 = !DILocation(line: 4562, column: 7, scope: !5681)
!5681 = distinct !DILexicalBlock(scope: !5670, file: !135, line: 4554, column: 5)
!5682 = !DILocation(line: 4565, column: 7, scope: !5681)
!5683 = !DILocation(line: 4567, column: 1, scope: !5670)
!5684 = distinct !DISubprogram(name: "gimple_expr_code", scope: !757, file: !757, line: 1438, type: !5628, scopeLine: 1439, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2865)
!5685 = !DILocalVariable(name: "stmt", arg: 1, scope: !5684, file: !757, line: 1438, type: !2694)
!5686 = !DILocation(line: 1438, column: 32, scope: !5684)
!5687 = !DILocalVariable(name: "code", scope: !5684, file: !757, line: 1440, type: !756)
!5688 = !DILocation(line: 1440, column: 20, scope: !5684)
!5689 = !DILocation(line: 1440, column: 40, scope: !5684)
!5690 = !DILocation(line: 1440, column: 27, scope: !5684)
!5691 = !DILocation(line: 1441, column: 7, scope: !5692)
!5692 = distinct !DILexicalBlock(scope: !5684, file: !757, line: 1441, column: 7)
!5693 = !DILocation(line: 1441, column: 12, scope: !5692)
!5694 = !DILocation(line: 1441, column: 29, scope: !5692)
!5695 = !DILocation(line: 1441, column: 32, scope: !5692)
!5696 = !DILocation(line: 1441, column: 37, scope: !5692)
!5697 = !DILocation(line: 1441, column: 7, scope: !5684)
!5698 = !DILocation(line: 1442, column: 29, scope: !5692)
!5699 = !DILocation(line: 1442, column: 35, scope: !5692)
!5700 = !DILocation(line: 1442, column: 42, scope: !5692)
!5701 = !DILocation(line: 1442, column: 5, scope: !5692)
!5702 = !DILocation(line: 1443, column: 12, scope: !5703)
!5703 = distinct !DILexicalBlock(scope: !5692, file: !757, line: 1443, column: 12)
!5704 = !DILocation(line: 1443, column: 17, scope: !5703)
!5705 = !DILocation(line: 1443, column: 12, scope: !5692)
!5706 = !DILocation(line: 1444, column: 5, scope: !5703)
!5707 = !DILocation(line: 1446, column: 5, scope: !5703)
!5708 = !DILocation(line: 1448, column: 5, scope: !5684)
!5709 = !DILocation(line: 1450, column: 1, scope: !5684)
!5710 = distinct !DISubprogram(name: "get_gimple_rhs_class", scope: !757, file: !757, line: 1686, type: !5711, scopeLine: 1687, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2865)
!5711 = !DISubroutineType(types: !5712)
!5712 = !{!795, !134}
!5713 = !DILocalVariable(name: "code", arg: 1, scope: !5710, file: !757, line: 1686, type: !134)
!5714 = !DILocation(line: 1686, column: 38, scope: !5710)
!5715 = !DILocation(line: 1688, column: 63, scope: !5710)
!5716 = !DILocation(line: 1688, column: 34, scope: !5710)
!5717 = !DILocation(line: 1688, column: 10, scope: !5710)
!5718 = !DILocation(line: 1688, column: 3, scope: !5710)
!5719 = distinct !DISubprogram(name: "gimple_op", scope: !757, file: !757, line: 1631, type: !5720, scopeLine: 1632, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2865)
!5720 = !DISubroutineType(types: !5721)
!5721 = !{!1254, !2694, !7}
!5722 = !DILocalVariable(name: "gs", arg: 1, scope: !5719, file: !757, line: 1631, type: !2694)
!5723 = !DILocation(line: 1631, column: 25, scope: !5719)
!5724 = !DILocalVariable(name: "i", arg: 2, scope: !5719, file: !757, line: 1631, type: !7)
!5725 = !DILocation(line: 1631, column: 38, scope: !5719)
!5726 = !DILocation(line: 1633, column: 23, scope: !5727)
!5727 = distinct !DILexicalBlock(scope: !5719, file: !757, line: 1633, column: 7)
!5728 = !DILocation(line: 1633, column: 7, scope: !5727)
!5729 = !DILocation(line: 1633, column: 7, scope: !5719)
!5730 = !DILocation(line: 1638, column: 26, scope: !5731)
!5731 = distinct !DILexicalBlock(scope: !5727, file: !757, line: 1634, column: 5)
!5732 = !DILocation(line: 1638, column: 14, scope: !5731)
!5733 = !DILocation(line: 1638, column: 50, scope: !5731)
!5734 = !DILocation(line: 1638, column: 7, scope: !5731)
!5735 = !DILocation(line: 1641, column: 5, scope: !5727)
!5736 = !DILocation(line: 1642, column: 1, scope: !5719)
!5737 = distinct !DISubprogram(name: "gimple_has_ops", scope: !757, file: !757, line: 1274, type: !5738, scopeLine: 1275, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2865)
!5738 = !DISubroutineType(types: !5739)
!5739 = !{!1367, !2694}
!5740 = !DILocalVariable(name: "g", arg: 1, scope: !5737, file: !757, line: 1274, type: !2694)
!5741 = !DILocation(line: 1274, column: 30, scope: !5737)
!5742 = !DILocation(line: 1276, column: 23, scope: !5737)
!5743 = !DILocation(line: 1276, column: 10, scope: !5737)
!5744 = !DILocation(line: 1276, column: 26, scope: !5737)
!5745 = !DILocation(line: 1276, column: 41, scope: !5737)
!5746 = !DILocation(line: 1276, column: 57, scope: !5737)
!5747 = !DILocation(line: 1276, column: 44, scope: !5737)
!5748 = !DILocation(line: 1276, column: 60, scope: !5737)
!5749 = !DILocation(line: 0, scope: !5737)
!5750 = !DILocation(line: 1276, column: 3, scope: !5737)
!5751 = distinct !DISubprogram(name: "gimple_ops", scope: !757, file: !757, line: 1614, type: !5752, scopeLine: 1615, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2865)
!5752 = !DISubroutineType(types: !5753)
!5753 = !{!1762, !1191}
!5754 = !DILocalVariable(name: "gs", arg: 1, scope: !5751, file: !757, line: 1614, type: !1191)
!5755 = !DILocation(line: 1614, column: 20, scope: !5751)
!5756 = !DILocalVariable(name: "off", scope: !5751, file: !757, line: 1616, type: !1065)
!5757 = !DILocation(line: 1616, column: 10, scope: !5751)
!5758 = !DILocation(line: 1621, column: 56, scope: !5751)
!5759 = !DILocation(line: 1621, column: 28, scope: !5751)
!5760 = !DILocation(line: 1621, column: 9, scope: !5751)
!5761 = !DILocation(line: 1621, column: 7, scope: !5751)
!5762 = !DILocation(line: 1622, column: 3, scope: !5751)
!5763 = !DILocation(line: 1624, column: 29, scope: !5751)
!5764 = !DILocation(line: 1624, column: 20, scope: !5751)
!5765 = !DILocation(line: 1624, column: 34, scope: !5751)
!5766 = !DILocation(line: 1624, column: 32, scope: !5751)
!5767 = !DILocation(line: 1624, column: 10, scope: !5751)
!5768 = !DILocation(line: 1624, column: 3, scope: !5751)
!5769 = distinct !DISubprogram(name: "gimple_statement_structure", scope: !757, file: !757, line: 1073, type: !5770, scopeLine: 1074, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2865)
!5770 = !DISubroutineType(types: !5771)
!5771 = !{!801, !1191}
!5772 = !DILocalVariable(name: "gs", arg: 1, scope: !5769, file: !757, line: 1073, type: !1191)
!5773 = !DILocation(line: 1073, column: 36, scope: !5769)
!5774 = !DILocation(line: 1075, column: 37, scope: !5769)
!5775 = !DILocation(line: 1075, column: 24, scope: !5769)
!5776 = !DILocation(line: 1075, column: 10, scope: !5769)
!5777 = !DILocation(line: 1075, column: 3, scope: !5769)
!5778 = distinct !DISubprogram(name: "gss_for_code", scope: !757, file: !757, line: 1061, type: !5779, scopeLine: 1062, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2865)
!5779 = !DISubroutineType(types: !5780)
!5780 = !{!801, !756}
!5781 = !DILocalVariable(name: "code", arg: 1, scope: !5778, file: !757, line: 1061, type: !756)
!5782 = !DILocation(line: 1061, column: 32, scope: !5778)
!5783 = !DILocation(line: 1066, column: 24, scope: !5778)
!5784 = !DILocation(line: 1066, column: 10, scope: !5778)
!5785 = !DILocation(line: 1066, column: 3, scope: !5778)
!5786 = distinct !DISubprogram(name: "cgraph_decide_inlining_of_small_functions", scope: !3, file: !3, line: 899, type: !2550, scopeLine: 900, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2865)
!5787 = !DILocalVariable(name: "node", scope: !5786, file: !3, line: 901, type: !2465)
!5788 = !DILocation(line: 901, column: 23, scope: !5786)
!5789 = !DILocalVariable(name: "edge", scope: !5786, file: !3, line: 902, type: !2470)
!5790 = !DILocation(line: 902, column: 23, scope: !5786)
!5791 = !DILocalVariable(name: "failed_reason", scope: !5786, file: !3, line: 903, type: !2483)
!5792 = !DILocation(line: 903, column: 26, scope: !5786)
!5793 = !DILocalVariable(name: "heap", scope: !5786, file: !3, line: 904, type: !2858)
!5794 = !DILocation(line: 904, column: 13, scope: !5786)
!5795 = !DILocation(line: 904, column: 20, scope: !5786)
!5796 = !DILocalVariable(name: "updated_nodes", scope: !5786, file: !3, line: 905, type: !1069)
!5797 = !DILocation(line: 905, column: 10, scope: !5786)
!5798 = !DILocation(line: 905, column: 26, scope: !5786)
!5799 = !DILocalVariable(name: "min_size", scope: !5786, file: !3, line: 906, type: !1064)
!5800 = !DILocation(line: 906, column: 7, scope: !5786)
!5801 = !DILocalVariable(name: "max_size", scope: !5786, file: !3, line: 906, type: !1064)
!5802 = !DILocation(line: 906, column: 17, scope: !5786)
!5803 = !DILocalVariable(name: "new_indirect_edges", scope: !5786, file: !3, line: 907, type: !2696)
!5804 = !DILocation(line: 907, column: 30, scope: !5786)
!5805 = !DILocation(line: 909, column: 7, scope: !5806)
!5806 = distinct !DILexicalBlock(scope: !5786, file: !3, line: 909, column: 7)
!5807 = !DILocation(line: 909, column: 7, scope: !5786)
!5808 = !DILocation(line: 910, column: 26, scope: !5806)
!5809 = !DILocation(line: 910, column: 24, scope: !5806)
!5810 = !DILocation(line: 910, column: 5, scope: !5806)
!5811 = !DILocation(line: 912, column: 7, scope: !5812)
!5812 = distinct !DILexicalBlock(scope: !5786, file: !3, line: 912, column: 7)
!5813 = !DILocation(line: 912, column: 7, scope: !5786)
!5814 = !DILocation(line: 913, column: 14, scope: !5812)
!5815 = !DILocation(line: 913, column: 5, scope: !5812)
!5816 = !DILocation(line: 917, column: 15, scope: !5817)
!5817 = distinct !DILexicalBlock(scope: !5786, file: !3, line: 917, column: 3)
!5818 = !DILocation(line: 917, column: 13, scope: !5817)
!5819 = !DILocation(line: 917, column: 8, scope: !5817)
!5820 = !DILocation(line: 917, column: 29, scope: !5821)
!5821 = distinct !DILexicalBlock(scope: !5817, file: !3, line: 917, column: 3)
!5822 = !DILocation(line: 917, column: 3, scope: !5817)
!5823 = !DILocation(line: 919, column: 12, scope: !5824)
!5824 = distinct !DILexicalBlock(scope: !5825, file: !3, line: 919, column: 11)
!5825 = distinct !DILexicalBlock(scope: !5821, file: !3, line: 918, column: 5)
!5826 = !DILocation(line: 919, column: 18, scope: !5824)
!5827 = !DILocation(line: 919, column: 24, scope: !5824)
!5828 = !DILocation(line: 919, column: 34, scope: !5824)
!5829 = !DILocation(line: 919, column: 38, scope: !5824)
!5830 = !DILocation(line: 919, column: 44, scope: !5824)
!5831 = !DILocation(line: 920, column: 4, scope: !5824)
!5832 = !DILocation(line: 920, column: 7, scope: !5824)
!5833 = !DILocation(line: 920, column: 13, scope: !5824)
!5834 = !DILocation(line: 920, column: 19, scope: !5824)
!5835 = !DILocation(line: 919, column: 11, scope: !5825)
!5836 = !DILocation(line: 921, column: 2, scope: !5824)
!5837 = !DILocation(line: 922, column: 11, scope: !5838)
!5838 = distinct !DILexicalBlock(scope: !5825, file: !3, line: 922, column: 11)
!5839 = !DILocation(line: 922, column: 11, scope: !5825)
!5840 = !DILocation(line: 923, column: 11, scope: !5838)
!5841 = !DILocation(line: 923, column: 78, scope: !5838)
!5842 = !DILocation(line: 923, column: 60, scope: !5838)
!5843 = !DILocation(line: 923, column: 2, scope: !5838)
!5844 = !DILocation(line: 925, column: 7, scope: !5825)
!5845 = !DILocation(line: 925, column: 13, scope: !5825)
!5846 = !DILocation(line: 925, column: 20, scope: !5825)
!5847 = !DILocation(line: 925, column: 37, scope: !5825)
!5848 = !DILocation(line: 926, column: 37, scope: !5849)
!5849 = distinct !DILexicalBlock(scope: !5825, file: !3, line: 926, column: 11)
!5850 = !DILocation(line: 926, column: 12, scope: !5849)
!5851 = !DILocation(line: 926, column: 11, scope: !5825)
!5852 = !DILocation(line: 928, column: 30, scope: !5853)
!5853 = distinct !DILexicalBlock(scope: !5849, file: !3, line: 927, column: 2)
!5854 = !DILocation(line: 928, column: 36, scope: !5853)
!5855 = !DILocation(line: 928, column: 4, scope: !5853)
!5856 = !DILocation(line: 929, column: 4, scope: !5853)
!5857 = !DILocation(line: 932, column: 19, scope: !5858)
!5858 = distinct !DILexicalBlock(scope: !5825, file: !3, line: 932, column: 7)
!5859 = !DILocation(line: 932, column: 25, scope: !5858)
!5860 = !DILocation(line: 932, column: 17, scope: !5858)
!5861 = !DILocation(line: 932, column: 12, scope: !5858)
!5862 = !DILocation(line: 932, column: 34, scope: !5863)
!5863 = distinct !DILexicalBlock(scope: !5858, file: !3, line: 932, column: 7)
!5864 = !DILocation(line: 932, column: 7, scope: !5858)
!5865 = !DILocation(line: 933, column: 6, scope: !5866)
!5866 = distinct !DILexicalBlock(scope: !5863, file: !3, line: 933, column: 6)
!5867 = !DILocation(line: 933, column: 12, scope: !5866)
!5868 = !DILocation(line: 933, column: 6, scope: !5863)
!5869 = !DILocation(line: 935, column: 6, scope: !5870)
!5870 = distinct !DILexicalBlock(scope: !5866, file: !3, line: 934, column: 4)
!5871 = !DILocation(line: 936, column: 34, scope: !5870)
!5872 = !DILocation(line: 936, column: 61, scope: !5870)
!5873 = !DILocation(line: 936, column: 40, scope: !5870)
!5874 = !DILocation(line: 936, column: 68, scope: !5870)
!5875 = !DILocation(line: 936, column: 18, scope: !5870)
!5876 = !DILocation(line: 936, column: 6, scope: !5870)
!5877 = !DILocation(line: 936, column: 12, scope: !5870)
!5878 = !DILocation(line: 936, column: 16, scope: !5870)
!5879 = !DILocation(line: 937, column: 4, scope: !5870)
!5880 = !DILocation(line: 932, column: 47, scope: !5863)
!5881 = !DILocation(line: 932, column: 53, scope: !5863)
!5882 = !DILocation(line: 932, column: 45, scope: !5863)
!5883 = !DILocation(line: 932, column: 7, scope: !5863)
!5884 = distinct !{!5884, !5864, !5885}
!5885 = !DILocation(line: 937, column: 4, scope: !5858)
!5886 = !DILocation(line: 938, column: 5, scope: !5825)
!5887 = !DILocation(line: 917, column: 42, scope: !5821)
!5888 = !DILocation(line: 917, column: 48, scope: !5821)
!5889 = !DILocation(line: 917, column: 40, scope: !5821)
!5890 = !DILocation(line: 917, column: 3, scope: !5821)
!5891 = distinct !{!5891, !5822, !5892}
!5892 = !DILocation(line: 938, column: 5, scope: !5817)
!5893 = !DILocation(line: 940, column: 33, scope: !5786)
!5894 = !DILocation(line: 940, column: 14, scope: !5786)
!5895 = !DILocation(line: 940, column: 12, scope: !5786)
!5896 = !DILocation(line: 941, column: 14, scope: !5786)
!5897 = !DILocation(line: 941, column: 12, scope: !5786)
!5898 = !DILocation(line: 943, column: 3, scope: !5786)
!5899 = !DILocation(line: 943, column: 10, scope: !5786)
!5900 = !DILocation(line: 943, column: 26, scope: !5786)
!5901 = !DILocation(line: 943, column: 23, scope: !5786)
!5902 = !DILocation(line: 944, column: 3, scope: !5786)
!5903 = !DILocation(line: 944, column: 58, scope: !5786)
!5904 = !DILocation(line: 944, column: 37, scope: !5786)
!5905 = !DILocation(line: 944, column: 14, scope: !5786)
!5906 = !DILocation(line: 944, column: 12, scope: !5786)
!5907 = !DILocation(line: 0, scope: !5786)
!5908 = !DILocalVariable(name: "old_size", scope: !5909, file: !3, line: 946, type: !1064)
!5909 = distinct !DILexicalBlock(scope: !5786, file: !3, line: 945, column: 5)
!5910 = !DILocation(line: 946, column: 11, scope: !5909)
!5911 = !DILocation(line: 946, column: 22, scope: !5909)
!5912 = !DILocalVariable(name: "where", scope: !5909, file: !3, line: 947, type: !2465)
!5913 = !DILocation(line: 947, column: 27, scope: !5909)
!5914 = !DILocalVariable(name: "growth", scope: !5909, file: !3, line: 948, type: !1064)
!5915 = !DILocation(line: 948, column: 11, scope: !5909)
!5916 = !DILocation(line: 949, column: 42, scope: !5909)
!5917 = !DILocation(line: 949, column: 48, scope: !5909)
!5918 = !DILocation(line: 949, column: 56, scope: !5909)
!5919 = !DILocation(line: 949, column: 62, scope: !5909)
!5920 = !DILocation(line: 949, column: 2, scope: !5909)
!5921 = !DILocalVariable(name: "not_good", scope: !5909, file: !3, line: 950, type: !2483)
!5922 = !DILocation(line: 950, column: 30, scope: !5909)
!5923 = !DILocation(line: 952, column: 17, scope: !5909)
!5924 = !DILocation(line: 952, column: 23, scope: !5909)
!5925 = !DILocation(line: 952, column: 31, scope: !5909)
!5926 = !DILocation(line: 952, column: 38, scope: !5909)
!5927 = !DILocation(line: 952, column: 14, scope: !5909)
!5928 = !DILocation(line: 954, column: 11, scope: !5929)
!5929 = distinct !DILexicalBlock(scope: !5909, file: !3, line: 954, column: 11)
!5930 = !DILocation(line: 954, column: 11, scope: !5909)
!5931 = !DILocation(line: 956, column: 13, scope: !5932)
!5932 = distinct !DILexicalBlock(scope: !5929, file: !3, line: 955, column: 2)
!5933 = !DILocation(line: 958, column: 24, scope: !5932)
!5934 = !DILocation(line: 958, column: 30, scope: !5932)
!5935 = !DILocation(line: 958, column: 6, scope: !5932)
!5936 = !DILocation(line: 959, column: 6, scope: !5932)
!5937 = !DILocation(line: 959, column: 12, scope: !5932)
!5938 = !DILocation(line: 959, column: 20, scope: !5932)
!5939 = !DILocation(line: 959, column: 27, scope: !5932)
!5940 = !DILocation(line: 956, column: 4, scope: !5932)
!5941 = !DILocation(line: 960, column: 13, scope: !5932)
!5942 = !DILocation(line: 964, column: 24, scope: !5932)
!5943 = !DILocation(line: 964, column: 30, scope: !5932)
!5944 = !DILocation(line: 964, column: 6, scope: !5932)
!5945 = !DILocation(line: 965, column: 38, scope: !5932)
!5946 = !DILocation(line: 965, column: 44, scope: !5932)
!5947 = !DILocation(line: 965, column: 6, scope: !5932)
!5948 = !DILocation(line: 966, column: 36, scope: !5932)
!5949 = !DILocation(line: 966, column: 42, scope: !5932)
!5950 = !DILocation(line: 966, column: 6, scope: !5932)
!5951 = !DILocation(line: 967, column: 30, scope: !5932)
!5952 = !DILocation(line: 967, column: 36, scope: !5932)
!5953 = !DILocation(line: 967, column: 6, scope: !5932)
!5954 = !DILocation(line: 968, column: 27, scope: !5932)
!5955 = !DILocation(line: 968, column: 6, scope: !5932)
!5956 = !DILocation(line: 969, column: 6, scope: !5932)
!5957 = !DILocation(line: 969, column: 12, scope: !5932)
!5958 = !DILocation(line: 969, column: 22, scope: !5932)
!5959 = !DILocation(line: 960, column: 4, scope: !5932)
!5960 = !DILocation(line: 970, column: 8, scope: !5961)
!5961 = distinct !DILexicalBlock(scope: !5932, file: !3, line: 970, column: 8)
!5962 = !DILocation(line: 970, column: 14, scope: !5961)
!5963 = !DILocation(line: 970, column: 8, scope: !5932)
!5964 = !DILocation(line: 971, column: 15, scope: !5961)
!5965 = !DILocation(line: 971, column: 67, scope: !5961)
!5966 = !DILocation(line: 971, column: 73, scope: !5961)
!5967 = !DILocation(line: 971, column: 6, scope: !5961)
!5968 = !DILocation(line: 972, column: 2, scope: !5932)
!5969 = !DILocation(line: 973, column: 7, scope: !5909)
!5970 = !DILocation(line: 974, column: 7, scope: !5909)
!5971 = !DILocation(line: 974, column: 13, scope: !5909)
!5972 = !DILocation(line: 974, column: 17, scope: !5909)
!5973 = !DILocation(line: 975, column: 12, scope: !5974)
!5974 = distinct !DILexicalBlock(scope: !5909, file: !3, line: 975, column: 11)
!5975 = !DILocation(line: 975, column: 18, scope: !5974)
!5976 = !DILocation(line: 975, column: 11, scope: !5909)
!5977 = !DILocation(line: 976, column: 2, scope: !5974)
!5978 = distinct !{!5978, !5898, !5979}
!5979 = !DILocation(line: 1114, column: 5, scope: !5786)
!5980 = !DILocation(line: 992, column: 12, scope: !5981)
!5981 = distinct !DILexicalBlock(scope: !5909, file: !3, line: 992, column: 11)
!5982 = !DILocation(line: 992, column: 18, scope: !5981)
!5983 = !DILocation(line: 992, column: 11, scope: !5909)
!5984 = !DILocation(line: 994, column: 12, scope: !5985)
!5985 = distinct !DILexicalBlock(scope: !5981, file: !3, line: 993, column: 2)
!5986 = !DILocation(line: 994, column: 18, scope: !5985)
!5987 = !DILocation(line: 994, column: 10, scope: !5985)
!5988 = !DILocation(line: 995, column: 4, scope: !5985)
!5989 = !DILocation(line: 995, column: 11, scope: !5985)
!5990 = !DILocation(line: 995, column: 18, scope: !5985)
!5991 = !DILocation(line: 995, column: 25, scope: !5985)
!5992 = !DILocation(line: 997, column: 12, scope: !5993)
!5993 = distinct !DILexicalBlock(scope: !5994, file: !3, line: 997, column: 12)
!5994 = distinct !DILexicalBlock(scope: !5985, file: !3, line: 996, column: 6)
!5995 = !DILocation(line: 997, column: 19, scope: !5993)
!5996 = !DILocation(line: 997, column: 27, scope: !5993)
!5997 = !DILocation(line: 997, column: 33, scope: !5993)
!5998 = !DILocation(line: 997, column: 41, scope: !5993)
!5999 = !DILocation(line: 997, column: 24, scope: !5993)
!6000 = !DILocation(line: 997, column: 12, scope: !5994)
!6001 = !DILocation(line: 998, column: 3, scope: !5993)
!6002 = !DILocation(line: 999, column: 16, scope: !5994)
!6003 = !DILocation(line: 999, column: 23, scope: !5994)
!6004 = !DILocation(line: 999, column: 32, scope: !5994)
!6005 = !DILocation(line: 999, column: 14, scope: !5994)
!6006 = distinct !{!6006, !5988, !6007}
!6007 = !DILocation(line: 1000, column: 6, scope: !5985)
!6008 = !DILocation(line: 1001, column: 8, scope: !6009)
!6009 = distinct !DILexicalBlock(scope: !5985, file: !3, line: 1001, column: 8)
!6010 = !DILocation(line: 1001, column: 15, scope: !6009)
!6011 = !DILocation(line: 1001, column: 22, scope: !6009)
!6012 = !DILocation(line: 1001, column: 8, scope: !5985)
!6013 = !DILocation(line: 1004, column: 6, scope: !6014)
!6014 = distinct !DILexicalBlock(scope: !6009, file: !3, line: 1002, column: 6)
!6015 = !DILocation(line: 1004, column: 12, scope: !6014)
!6016 = !DILocation(line: 1004, column: 20, scope: !6014)
!6017 = !DILocation(line: 1004, column: 26, scope: !6014)
!6018 = !DILocation(line: 1003, column: 8, scope: !6014)
!6019 = !DILocation(line: 1003, column: 14, scope: !6014)
!6020 = !DILocation(line: 1004, column: 3, scope: !6014)
!6021 = !DILocation(line: 1006, column: 12, scope: !6022)
!6022 = distinct !DILexicalBlock(scope: !6014, file: !3, line: 1006, column: 12)
!6023 = !DILocation(line: 1006, column: 12, scope: !6014)
!6024 = !DILocation(line: 1007, column: 12, scope: !6022)
!6025 = !DILocation(line: 1007, column: 3, scope: !6022)
!6026 = !DILocation(line: 1008, column: 8, scope: !6014)
!6027 = !DILocation(line: 1010, column: 2, scope: !5985)
!6028 = !DILocation(line: 1012, column: 37, scope: !6029)
!6029 = distinct !DILexicalBlock(scope: !5909, file: !3, line: 1012, column: 11)
!6030 = !DILocation(line: 1012, column: 12, scope: !6029)
!6031 = !DILocation(line: 1012, column: 11, scope: !5909)
!6032 = !DILocation(line: 1013, column: 12, scope: !6029)
!6033 = !DILocation(line: 1013, column: 3, scope: !6029)
!6034 = !DILocation(line: 1014, column: 12, scope: !6035)
!6035 = distinct !DILexicalBlock(scope: !5909, file: !3, line: 1014, column: 11)
!6036 = !DILocation(line: 1015, column: 4, scope: !6035)
!6037 = !DILocation(line: 1015, column: 8, scope: !6035)
!6038 = !DILocation(line: 1014, column: 11, scope: !5909)
!6039 = !DILocation(line: 1016, column: 12, scope: !6035)
!6040 = !DILocation(line: 1016, column: 3, scope: !6035)
!6041 = !DILocation(line: 1017, column: 41, scope: !6042)
!6042 = distinct !DILexicalBlock(scope: !5909, file: !3, line: 1017, column: 11)
!6043 = !DILocation(line: 1017, column: 11, scope: !6042)
!6044 = !DILocation(line: 1017, column: 11, scope: !5909)
!6045 = !DILocation(line: 1018, column: 12, scope: !6042)
!6046 = !DILocation(line: 1018, column: 3, scope: !6042)
!6047 = !DILocation(line: 1019, column: 11, scope: !6048)
!6048 = distinct !DILexicalBlock(scope: !5909, file: !3, line: 1019, column: 11)
!6049 = !DILocation(line: 1019, column: 20, scope: !6048)
!6050 = !DILocation(line: 1019, column: 23, scope: !6048)
!6051 = !DILocation(line: 1019, column: 30, scope: !6048)
!6052 = !DILocation(line: 1019, column: 34, scope: !6048)
!6053 = !DILocation(line: 1019, column: 61, scope: !6048)
!6054 = !DILocation(line: 1019, column: 67, scope: !6048)
!6055 = !DILocation(line: 1019, column: 37, scope: !6048)
!6056 = !DILocation(line: 1019, column: 75, scope: !6048)
!6057 = !DILocation(line: 1019, column: 11, scope: !5909)
!6058 = !DILocation(line: 1021, column: 45, scope: !6059)
!6059 = distinct !DILexicalBlock(scope: !6060, file: !3, line: 1021, column: 15)
!6060 = distinct !DILexicalBlock(scope: !6048, file: !3, line: 1020, column: 2)
!6061 = !DILocation(line: 1021, column: 51, scope: !6059)
!6062 = !DILocation(line: 1021, column: 59, scope: !6059)
!6063 = !DILocation(line: 1021, column: 65, scope: !6059)
!6064 = !DILocation(line: 1022, column: 18, scope: !6059)
!6065 = !DILocation(line: 1022, column: 24, scope: !6059)
!6066 = !DILocation(line: 1021, column: 16, scope: !6059)
!6067 = !DILocation(line: 1021, column: 15, scope: !6060)
!6068 = !DILocation(line: 1024, column: 30, scope: !6069)
!6069 = distinct !DILexicalBlock(scope: !6059, file: !3, line: 1023, column: 6)
!6070 = !DILocation(line: 1024, column: 8, scope: !6069)
!6071 = !DILocation(line: 1024, column: 14, scope: !6069)
!6072 = !DILocation(line: 1024, column: 28, scope: !6069)
!6073 = !DILocation(line: 1025, column: 12, scope: !6074)
!6074 = distinct !DILexicalBlock(scope: !6069, file: !3, line: 1025, column: 12)
!6075 = !DILocation(line: 1025, column: 12, scope: !6069)
!6076 = !DILocation(line: 1026, column: 12, scope: !6074)
!6077 = !DILocation(line: 1027, column: 34, scope: !6074)
!6078 = !DILocation(line: 1027, column: 40, scope: !6074)
!6079 = !DILocation(line: 1027, column: 5, scope: !6074)
!6080 = !DILocation(line: 1026, column: 3, scope: !6074)
!6081 = !DILocation(line: 1028, column: 6, scope: !6069)
!6082 = !DILocation(line: 1029, column: 4, scope: !6060)
!6083 = !DILocation(line: 1031, column: 37, scope: !6084)
!6084 = distinct !DILexicalBlock(scope: !5909, file: !3, line: 1031, column: 11)
!6085 = !DILocation(line: 1031, column: 43, scope: !6084)
!6086 = !DILocation(line: 1031, column: 52, scope: !6084)
!6087 = !DILocation(line: 1031, column: 58, scope: !6084)
!6088 = !DILocation(line: 1031, column: 12, scope: !6084)
!6089 = !DILocation(line: 1031, column: 11, scope: !5909)
!6090 = !DILocation(line: 1033, column: 45, scope: !6091)
!6091 = distinct !DILexicalBlock(scope: !6092, file: !3, line: 1033, column: 15)
!6092 = distinct !DILexicalBlock(scope: !6084, file: !3, line: 1032, column: 2)
!6093 = !DILocation(line: 1033, column: 51, scope: !6091)
!6094 = !DILocation(line: 1033, column: 59, scope: !6091)
!6095 = !DILocation(line: 1033, column: 65, scope: !6091)
!6096 = !DILocation(line: 1034, column: 18, scope: !6091)
!6097 = !DILocation(line: 1034, column: 24, scope: !6091)
!6098 = !DILocation(line: 1033, column: 16, scope: !6091)
!6099 = !DILocation(line: 1033, column: 15, scope: !6092)
!6100 = !DILocation(line: 1036, column: 12, scope: !6101)
!6101 = distinct !DILexicalBlock(scope: !6102, file: !3, line: 1036, column: 12)
!6102 = distinct !DILexicalBlock(scope: !6091, file: !3, line: 1035, column: 6)
!6103 = !DILocation(line: 1036, column: 12, scope: !6102)
!6104 = !DILocation(line: 1037, column: 12, scope: !6101)
!6105 = !DILocation(line: 1038, column: 34, scope: !6101)
!6106 = !DILocation(line: 1038, column: 40, scope: !6101)
!6107 = !DILocation(line: 1038, column: 5, scope: !6101)
!6108 = !DILocation(line: 1037, column: 3, scope: !6101)
!6109 = !DILocation(line: 1039, column: 6, scope: !6102)
!6110 = !DILocation(line: 1040, column: 4, scope: !6092)
!6111 = !DILocation(line: 1042, column: 31, scope: !6112)
!6112 = distinct !DILexicalBlock(scope: !5909, file: !3, line: 1042, column: 11)
!6113 = !DILocation(line: 1042, column: 12, scope: !6112)
!6114 = !DILocation(line: 1042, column: 11, scope: !5909)
!6115 = !DILocation(line: 1044, column: 8, scope: !6116)
!6116 = distinct !DILexicalBlock(scope: !6117, file: !3, line: 1044, column: 8)
!6117 = distinct !DILexicalBlock(scope: !6112, file: !3, line: 1043, column: 2)
!6118 = !DILocation(line: 1044, column: 8, scope: !6117)
!6119 = !DILocation(line: 1045, column: 15, scope: !6116)
!6120 = !DILocation(line: 1046, column: 37, scope: !6116)
!6121 = !DILocation(line: 1046, column: 43, scope: !6116)
!6122 = !DILocation(line: 1046, column: 8, scope: !6116)
!6123 = !DILocation(line: 1045, column: 6, scope: !6116)
!6124 = !DILocation(line: 1047, column: 4, scope: !6117)
!6125 = !DILocation(line: 1049, column: 40, scope: !6126)
!6126 = distinct !DILexicalBlock(scope: !5909, file: !3, line: 1049, column: 11)
!6127 = !DILocation(line: 1049, column: 46, scope: !6126)
!6128 = !DILocation(line: 1049, column: 54, scope: !6126)
!6129 = !DILocation(line: 1049, column: 60, scope: !6126)
!6130 = !DILocation(line: 1050, column: 13, scope: !6126)
!6131 = !DILocation(line: 1050, column: 19, scope: !6126)
!6132 = !DILocation(line: 1049, column: 11, scope: !6126)
!6133 = !DILocation(line: 1049, column: 11, scope: !5909)
!6134 = !DILocation(line: 1052, column: 12, scope: !6135)
!6135 = distinct !DILexicalBlock(scope: !6126, file: !3, line: 1051, column: 2)
!6136 = !DILocation(line: 1052, column: 18, scope: !6135)
!6137 = !DILocation(line: 1052, column: 10, scope: !6135)
!6138 = !DILocation(line: 1053, column: 8, scope: !6139)
!6139 = distinct !DILexicalBlock(scope: !6135, file: !3, line: 1053, column: 8)
!6140 = !DILocation(line: 1053, column: 15, scope: !6139)
!6141 = !DILocation(line: 1053, column: 22, scope: !6139)
!6142 = !DILocation(line: 1053, column: 8, scope: !6135)
!6143 = !DILocation(line: 1054, column: 14, scope: !6139)
!6144 = !DILocation(line: 1054, column: 21, scope: !6139)
!6145 = !DILocation(line: 1054, column: 28, scope: !6139)
!6146 = !DILocation(line: 1054, column: 12, scope: !6139)
!6147 = !DILocation(line: 1054, column: 6, scope: !6139)
!6148 = !DILocation(line: 1055, column: 43, scope: !6149)
!6149 = distinct !DILexicalBlock(scope: !6135, file: !3, line: 1055, column: 8)
!6150 = !DILocation(line: 1056, column: 8, scope: !6149)
!6151 = !DILocation(line: 1055, column: 9, scope: !6149)
!6152 = !DILocation(line: 1055, column: 8, scope: !6135)
!6153 = !DILocation(line: 1058, column: 6, scope: !6149)
!6154 = !DILocation(line: 1059, column: 8, scope: !6155)
!6155 = distinct !DILexicalBlock(scope: !6135, file: !3, line: 1059, column: 8)
!6156 = !DILocation(line: 1059, column: 8, scope: !6135)
!6157 = !DILocation(line: 1060, column: 29, scope: !6155)
!6158 = !DILocation(line: 1060, column: 35, scope: !6155)
!6159 = !DILocation(line: 1060, column: 6, scope: !6155)
!6160 = !DILocation(line: 1061, column: 31, scope: !6135)
!6161 = !DILocation(line: 1061, column: 37, scope: !6135)
!6162 = !DILocation(line: 1061, column: 44, scope: !6135)
!6163 = !DILocation(line: 1061, column: 11, scope: !6135)
!6164 = !DILocation(line: 1062, column: 2, scope: !6135)
!6165 = !DILocalVariable(name: "callee", scope: !6166, file: !3, line: 1065, type: !2465)
!6166 = distinct !DILexicalBlock(scope: !6126, file: !3, line: 1064, column: 2)
!6167 = !DILocation(line: 1065, column: 24, scope: !6166)
!6168 = !DILocation(line: 1066, column: 8, scope: !6169)
!6169 = distinct !DILexicalBlock(scope: !6166, file: !3, line: 1066, column: 8)
!6170 = !DILocation(line: 1066, column: 14, scope: !6169)
!6171 = !DILocation(line: 1067, column: 8, scope: !6169)
!6172 = !DILocation(line: 1067, column: 40, scope: !6169)
!6173 = !DILocation(line: 1067, column: 46, scope: !6169)
!6174 = !DILocation(line: 1067, column: 54, scope: !6169)
!6175 = !DILocation(line: 1067, column: 60, scope: !6169)
!6176 = !DILocation(line: 1068, column: 13, scope: !6169)
!6177 = !DILocation(line: 1068, column: 19, scope: !6169)
!6178 = !DILocation(line: 1067, column: 12, scope: !6169)
!6179 = !DILocation(line: 1066, column: 8, scope: !6166)
!6180 = !DILocation(line: 1070, column: 12, scope: !6181)
!6181 = distinct !DILexicalBlock(scope: !6182, file: !3, line: 1070, column: 12)
!6182 = distinct !DILexicalBlock(scope: !6169, file: !3, line: 1069, column: 6)
!6183 = !DILocation(line: 1070, column: 12, scope: !6182)
!6184 = !DILocation(line: 1071, column: 12, scope: !6181)
!6185 = !DILocation(line: 1072, column: 23, scope: !6181)
!6186 = !DILocation(line: 1072, column: 29, scope: !6181)
!6187 = !DILocation(line: 1072, column: 5, scope: !6181)
!6188 = !DILocation(line: 1073, column: 34, scope: !6181)
!6189 = !DILocation(line: 1073, column: 40, scope: !6181)
!6190 = !DILocation(line: 1073, column: 5, scope: !6181)
!6191 = !DILocation(line: 1071, column: 3, scope: !6181)
!6192 = !DILocation(line: 1074, column: 8, scope: !6182)
!6193 = !DILocation(line: 1076, column: 13, scope: !6166)
!6194 = !DILocation(line: 1076, column: 19, scope: !6166)
!6195 = !DILocation(line: 1076, column: 11, scope: !6166)
!6196 = !DILocation(line: 1077, column: 29, scope: !6166)
!6197 = !DILocation(line: 1077, column: 4, scope: !6166)
!6198 = !DILocation(line: 1078, column: 8, scope: !6199)
!6199 = distinct !DILexicalBlock(scope: !6166, file: !3, line: 1078, column: 8)
!6200 = !DILocation(line: 1078, column: 8, scope: !6166)
!6201 = !DILocation(line: 1079, column: 29, scope: !6199)
!6202 = !DILocation(line: 1079, column: 35, scope: !6199)
!6203 = !DILocation(line: 1079, column: 6, scope: !6199)
!6204 = !DILocation(line: 1081, column: 24, scope: !6166)
!6205 = !DILocation(line: 1081, column: 30, scope: !6166)
!6206 = !DILocation(line: 1081, column: 38, scope: !6166)
!6207 = !DILocation(line: 1081, column: 4, scope: !6166)
!6208 = !DILocation(line: 1083, column: 15, scope: !5909)
!6209 = !DILocation(line: 1083, column: 21, scope: !5909)
!6210 = !DILocation(line: 1083, column: 13, scope: !5909)
!6211 = !DILocation(line: 1084, column: 11, scope: !6212)
!6212 = distinct !DILexicalBlock(scope: !5909, file: !3, line: 1084, column: 11)
!6213 = !DILocation(line: 1084, column: 18, scope: !6212)
!6214 = !DILocation(line: 1084, column: 25, scope: !6212)
!6215 = !DILocation(line: 1084, column: 11, scope: !5909)
!6216 = !DILocation(line: 1085, column: 10, scope: !6212)
!6217 = !DILocation(line: 1085, column: 17, scope: !6212)
!6218 = !DILocation(line: 1085, column: 24, scope: !6212)
!6219 = !DILocation(line: 1085, column: 8, scope: !6212)
!6220 = !DILocation(line: 1085, column: 2, scope: !6212)
!6221 = !DILocation(line: 1093, column: 27, scope: !5909)
!6222 = !DILocation(line: 1093, column: 33, scope: !5909)
!6223 = !DILocation(line: 1093, column: 40, scope: !5909)
!6224 = !DILocation(line: 1093, column: 7, scope: !5909)
!6225 = !DILocation(line: 1094, column: 21, scope: !5909)
!6226 = !DILocation(line: 1094, column: 7, scope: !5909)
!6227 = !DILocation(line: 1096, column: 11, scope: !6228)
!6228 = distinct !DILexicalBlock(scope: !5909, file: !3, line: 1096, column: 11)
!6229 = !DILocation(line: 1096, column: 11, scope: !5909)
!6230 = !DILocation(line: 1098, column: 13, scope: !6231)
!6231 = distinct !DILexicalBlock(scope: !6228, file: !3, line: 1097, column: 2)
!6232 = !DILocation(line: 1101, column: 24, scope: !6231)
!6233 = !DILocation(line: 1101, column: 30, scope: !6231)
!6234 = !DILocation(line: 1101, column: 6, scope: !6231)
!6235 = !DILocation(line: 1102, column: 6, scope: !6231)
!6236 = !DILocation(line: 1102, column: 12, scope: !6231)
!6237 = !DILocation(line: 1102, column: 20, scope: !6231)
!6238 = !DILocation(line: 1102, column: 27, scope: !6231)
!6239 = !DILocation(line: 1103, column: 6, scope: !6231)
!6240 = !DILocation(line: 1103, column: 12, scope: !6231)
!6241 = !DILocation(line: 1103, column: 20, scope: !6231)
!6242 = !DILocation(line: 1103, column: 27, scope: !6231)
!6243 = !DILocation(line: 1104, column: 6, scope: !6231)
!6244 = !DILocation(line: 1104, column: 21, scope: !6231)
!6245 = !DILocation(line: 1104, column: 19, scope: !6231)
!6246 = !DILocation(line: 1098, column: 4, scope: !6231)
!6247 = !DILocation(line: 1105, column: 2, scope: !6231)
!6248 = !DILocation(line: 1106, column: 11, scope: !6249)
!6249 = distinct !DILexicalBlock(scope: !5909, file: !3, line: 1106, column: 11)
!6250 = !DILocation(line: 1106, column: 22, scope: !6249)
!6251 = !DILocation(line: 1106, column: 20, scope: !6249)
!6252 = !DILocation(line: 1106, column: 11, scope: !5909)
!6253 = !DILocation(line: 1108, column: 15, scope: !6254)
!6254 = distinct !DILexicalBlock(scope: !6249, file: !3, line: 1107, column: 2)
!6255 = !DILocation(line: 1108, column: 13, scope: !6254)
!6256 = !DILocation(line: 1109, column: 34, scope: !6254)
!6257 = !DILocation(line: 1109, column: 15, scope: !6254)
!6258 = !DILocation(line: 1109, column: 13, scope: !6254)
!6259 = !DILocation(line: 1111, column: 8, scope: !6260)
!6260 = distinct !DILexicalBlock(scope: !6254, file: !3, line: 1111, column: 8)
!6261 = !DILocation(line: 1111, column: 8, scope: !6254)
!6262 = !DILocation(line: 1112, column: 15, scope: !6260)
!6263 = !DILocation(line: 1112, column: 60, scope: !6260)
!6264 = !DILocation(line: 1112, column: 6, scope: !6260)
!6265 = !DILocation(line: 1113, column: 2, scope: !6254)
!6266 = !DILocation(line: 1115, column: 3, scope: !5786)
!6267 = !DILocation(line: 1115, column: 62, scope: !5786)
!6268 = !DILocation(line: 1115, column: 41, scope: !5786)
!6269 = !DILocation(line: 1115, column: 18, scope: !5786)
!6270 = !DILocation(line: 1115, column: 16, scope: !5786)
!6271 = !DILocation(line: 1115, column: 69, scope: !5786)
!6272 = !DILocation(line: 1117, column: 7, scope: !6273)
!6273 = distinct !DILexicalBlock(scope: !5786, file: !3, line: 1116, column: 5)
!6274 = !DILocation(line: 1118, column: 7, scope: !6273)
!6275 = !DILocation(line: 1118, column: 13, scope: !6273)
!6276 = !DILocation(line: 1118, column: 17, scope: !6273)
!6277 = !DILocation(line: 1119, column: 12, scope: !6278)
!6278 = distinct !DILexicalBlock(scope: !6273, file: !3, line: 1119, column: 11)
!6279 = !DILocation(line: 1119, column: 18, scope: !6278)
!6280 = !DILocation(line: 1119, column: 26, scope: !6278)
!6281 = !DILocation(line: 1119, column: 32, scope: !6278)
!6282 = !DILocation(line: 1119, column: 56, scope: !6278)
!6283 = !DILocation(line: 1119, column: 59, scope: !6278)
!6284 = !DILocation(line: 1119, column: 65, scope: !6278)
!6285 = !DILocation(line: 1120, column: 11, scope: !6278)
!6286 = !DILocation(line: 1120, column: 44, scope: !6278)
!6287 = !DILocation(line: 1120, column: 50, scope: !6278)
!6288 = !DILocation(line: 1120, column: 58, scope: !6278)
!6289 = !DILocation(line: 1120, column: 64, scope: !6278)
!6290 = !DILocation(line: 1121, column: 17, scope: !6278)
!6291 = !DILocation(line: 1121, column: 23, scope: !6278)
!6292 = !DILocation(line: 1120, column: 15, scope: !6278)
!6293 = !DILocation(line: 1119, column: 11, scope: !6273)
!6294 = !DILocation(line: 1122, column: 2, scope: !6278)
!6295 = !DILocation(line: 1122, column: 8, scope: !6278)
!6296 = !DILocation(line: 1122, column: 22, scope: !6278)
!6297 = distinct !{!6297, !6266, !6298}
!6298 = !DILocation(line: 1123, column: 5, scope: !5786)
!6299 = !DILocation(line: 1125, column: 7, scope: !6300)
!6300 = distinct !DILexicalBlock(scope: !5786, file: !3, line: 1125, column: 7)
!6301 = !DILocation(line: 1125, column: 7, scope: !5786)
!6302 = !DILocation(line: 1126, column: 5, scope: !6300)
!6303 = !DILocation(line: 1127, column: 19, scope: !5786)
!6304 = !DILocation(line: 1127, column: 3, scope: !5786)
!6305 = !DILocation(line: 1128, column: 3, scope: !5786)
!6306 = !DILocation(line: 1129, column: 1, scope: !5786)
!6307 = distinct !DISubprogram(name: "VEC_cgraph_edge_p_heap_alloc", scope: !568, file: !568, line: 353, type: !6308, scopeLine: 353, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2865)
!6308 = !DISubroutineType(types: !6309)
!6309 = !{!2696, !1064}
!6310 = !DILocalVariable(name: "alloc_", arg: 1, scope: !6307, file: !568, line: 353, type: !1064)
!6311 = !DILocation(line: 353, column: 1, scope: !6307)
!6312 = distinct !DISubprogram(name: "cgraph_set_inline_failed", scope: !3, file: !3, line: 851, type: !6313, scopeLine: 853, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2865)
!6313 = !DISubroutineType(types: !6314)
!6314 = !{null, !2465, !2483}
!6315 = !DILocalVariable(name: "node", arg: 1, scope: !6312, file: !3, line: 851, type: !2465)
!6316 = !DILocation(line: 851, column: 47, scope: !6312)
!6317 = !DILocalVariable(name: "reason", arg: 2, scope: !6312, file: !3, line: 852, type: !2483)
!6318 = !DILocation(line: 852, column: 29, scope: !6312)
!6319 = !DILocalVariable(name: "e", scope: !6312, file: !3, line: 854, type: !2470)
!6320 = !DILocation(line: 854, column: 23, scope: !6312)
!6321 = !DILocation(line: 856, column: 7, scope: !6322)
!6322 = distinct !DILexicalBlock(scope: !6312, file: !3, line: 856, column: 7)
!6323 = !DILocation(line: 856, column: 7, scope: !6312)
!6324 = !DILocation(line: 857, column: 14, scope: !6322)
!6325 = !DILocation(line: 858, column: 36, scope: !6322)
!6326 = !DILocation(line: 858, column: 7, scope: !6322)
!6327 = !DILocation(line: 857, column: 5, scope: !6322)
!6328 = !DILocation(line: 859, column: 12, scope: !6329)
!6329 = distinct !DILexicalBlock(scope: !6312, file: !3, line: 859, column: 3)
!6330 = !DILocation(line: 859, column: 18, scope: !6329)
!6331 = !DILocation(line: 859, column: 10, scope: !6329)
!6332 = !DILocation(line: 859, column: 8, scope: !6329)
!6333 = !DILocation(line: 859, column: 27, scope: !6334)
!6334 = distinct !DILexicalBlock(scope: !6329, file: !3, line: 859, column: 3)
!6335 = !DILocation(line: 859, column: 3, scope: !6329)
!6336 = !DILocation(line: 860, column: 9, scope: !6337)
!6337 = distinct !DILexicalBlock(scope: !6334, file: !3, line: 860, column: 9)
!6338 = !DILocation(line: 860, column: 12, scope: !6337)
!6339 = !DILocation(line: 860, column: 9, scope: !6334)
!6340 = !DILocation(line: 861, column: 26, scope: !6337)
!6341 = !DILocation(line: 861, column: 7, scope: !6337)
!6342 = !DILocation(line: 861, column: 10, scope: !6337)
!6343 = !DILocation(line: 861, column: 24, scope: !6337)
!6344 = !DILocation(line: 859, column: 34, scope: !6334)
!6345 = !DILocation(line: 859, column: 37, scope: !6334)
!6346 = !DILocation(line: 859, column: 32, scope: !6334)
!6347 = !DILocation(line: 859, column: 3, scope: !6334)
!6348 = distinct !{!6348, !6335, !6349}
!6349 = !DILocation(line: 861, column: 26, scope: !6329)
!6350 = !DILocation(line: 862, column: 1, scope: !6312)
!6351 = distinct !DISubprogram(name: "cgraph_edge_badness", scope: !3, file: !3, line: 547, type: !6352, scopeLine: 548, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2865)
!6352 = !DISubroutineType(types: !6353)
!6353 = !{!1064, !2470}
!6354 = !DILocalVariable(name: "edge", arg: 1, scope: !6351, file: !3, line: 547, type: !2470)
!6355 = !DILocation(line: 547, column: 42, scope: !6351)
!6356 = !DILocalVariable(name: "badness", scope: !6351, file: !3, line: 549, type: !1062)
!6357 = !DILocation(line: 549, column: 13, scope: !6351)
!6358 = !DILocalVariable(name: "growth", scope: !6351, file: !3, line: 550, type: !1064)
!6359 = !DILocation(line: 550, column: 7, scope: !6351)
!6360 = !DILocation(line: 551, column: 45, scope: !6351)
!6361 = !DILocation(line: 551, column: 51, scope: !6351)
!6362 = !DILocation(line: 551, column: 59, scope: !6351)
!6363 = !DILocation(line: 551, column: 65, scope: !6351)
!6364 = !DILocation(line: 551, column: 5, scope: !6351)
!6365 = !DILocation(line: 553, column: 13, scope: !6351)
!6366 = !DILocation(line: 553, column: 19, scope: !6351)
!6367 = !DILocation(line: 553, column: 27, scope: !6351)
!6368 = !DILocation(line: 553, column: 34, scope: !6351)
!6369 = !DILocation(line: 553, column: 10, scope: !6351)
!6370 = !DILocation(line: 556, column: 7, scope: !6371)
!6371 = distinct !DILexicalBlock(scope: !6351, file: !3, line: 556, column: 7)
!6372 = !DILocation(line: 556, column: 14, scope: !6371)
!6373 = !DILocation(line: 556, column: 7, scope: !6351)
!6374 = !DILocation(line: 557, column: 25, scope: !6371)
!6375 = !DILocation(line: 557, column: 23, scope: !6371)
!6376 = !DILocation(line: 557, column: 15, scope: !6371)
!6377 = !DILocation(line: 557, column: 13, scope: !6371)
!6378 = !DILocation(line: 557, column: 5, scope: !6371)
!6379 = !DILocation(line: 561, column: 12, scope: !6380)
!6380 = distinct !DILexicalBlock(scope: !6371, file: !3, line: 561, column: 12)
!6381 = !DILocation(line: 561, column: 12, scope: !6371)
!6382 = !DILocation(line: 562, column: 30, scope: !6380)
!6383 = !DILocation(line: 562, column: 36, scope: !6380)
!6384 = !DILocation(line: 562, column: 22, scope: !6380)
!6385 = !DILocation(line: 562, column: 42, scope: !6380)
!6386 = !DILocation(line: 562, column: 54, scope: !6380)
!6387 = !DILocation(line: 562, column: 52, scope: !6380)
!6388 = !DILocation(line: 562, column: 67, scope: !6380)
!6389 = !DILocation(line: 562, column: 79, scope: !6380)
!6390 = !DILocation(line: 562, column: 66, scope: !6380)
!6391 = !DILocation(line: 562, column: 64, scope: !6380)
!6392 = !DILocation(line: 562, column: 16, scope: !6380)
!6393 = !DILocation(line: 563, column: 31, scope: !6380)
!6394 = !DILocation(line: 563, column: 37, scope: !6380)
!6395 = !DILocation(line: 563, column: 15, scope: !6380)
!6396 = !DILocation(line: 563, column: 46, scope: !6380)
!6397 = !DILocation(line: 563, column: 68, scope: !6380)
!6398 = !DILocation(line: 563, column: 12, scope: !6380)
!6399 = !DILocation(line: 563, column: 76, scope: !6380)
!6400 = !DILocation(line: 563, column: 74, scope: !6380)
!6401 = !DILocation(line: 562, column: 15, scope: !6380)
!6402 = !DILocation(line: 562, column: 13, scope: !6380)
!6403 = !DILocation(line: 562, column: 5, scope: !6380)
!6404 = !DILocation(line: 574, column: 12, scope: !6405)
!6405 = distinct !DILexicalBlock(scope: !6380, file: !3, line: 574, column: 12)
!6406 = !DILocation(line: 574, column: 12, scope: !6380)
!6407 = !DILocalVariable(name: "div", scope: !6408, file: !3, line: 576, type: !1064)
!6408 = distinct !DILexicalBlock(scope: !6405, file: !3, line: 575, column: 5)
!6409 = !DILocation(line: 576, column: 11, scope: !6408)
!6410 = !DILocation(line: 576, column: 17, scope: !6408)
!6411 = !DILocation(line: 576, column: 23, scope: !6408)
!6412 = !DILocation(line: 576, column: 33, scope: !6408)
!6413 = !DILocation(line: 576, column: 39, scope: !6408)
!6414 = !DILocation(line: 576, column: 58, scope: !6408)
!6415 = !DILocation(line: 577, column: 17, scope: !6408)
!6416 = !DILocation(line: 577, column: 24, scope: !6408)
!6417 = !DILocation(line: 577, column: 15, scope: !6408)
!6418 = !DILocation(line: 578, column: 14, scope: !6408)
!6419 = !DILocation(line: 578, column: 11, scope: !6408)
!6420 = !DILocation(line: 584, column: 11, scope: !6421)
!6421 = distinct !DILexicalBlock(scope: !6408, file: !3, line: 584, column: 11)
!6422 = !DILocation(line: 584, column: 15, scope: !6421)
!6423 = !DILocation(line: 584, column: 11, scope: !6408)
!6424 = !DILocation(line: 585, column: 27, scope: !6421)
!6425 = !DILocation(line: 585, column: 16, scope: !6421)
!6426 = !DILocation(line: 585, column: 14, scope: !6421)
!6427 = !DILocation(line: 585, column: 32, scope: !6421)
!6428 = !DILocation(line: 585, column: 6, scope: !6421)
!6429 = !DILocation(line: 585, column: 2, scope: !6421)
!6430 = !DILocation(line: 586, column: 11, scope: !6431)
!6431 = distinct !DILexicalBlock(scope: !6408, file: !3, line: 586, column: 11)
!6432 = !DILocation(line: 586, column: 15, scope: !6431)
!6433 = !DILocation(line: 586, column: 11, scope: !6408)
!6434 = !DILocation(line: 587, column: 6, scope: !6431)
!6435 = !DILocation(line: 587, column: 2, scope: !6431)
!6436 = !DILocation(line: 588, column: 11, scope: !6437)
!6437 = distinct !DILexicalBlock(scope: !6408, file: !3, line: 588, column: 11)
!6438 = !DILocation(line: 588, column: 19, scope: !6437)
!6439 = !DILocation(line: 588, column: 11, scope: !6408)
!6440 = !DILocation(line: 589, column: 13, scope: !6437)
!6441 = !DILocation(line: 589, column: 10, scope: !6437)
!6442 = !DILocation(line: 589, column: 2, scope: !6437)
!6443 = !DILocation(line: 590, column: 42, scope: !6408)
!6444 = !DILocation(line: 590, column: 48, scope: !6408)
!6445 = !DILocation(line: 590, column: 18, scope: !6408)
!6446 = !DILocation(line: 590, column: 15, scope: !6408)
!6447 = !DILocation(line: 591, column: 11, scope: !6448)
!6448 = distinct !DILexicalBlock(scope: !6408, file: !3, line: 591, column: 11)
!6449 = !DILocation(line: 591, column: 19, scope: !6448)
!6450 = !DILocation(line: 591, column: 11, scope: !6408)
!6451 = !DILocation(line: 592, column: 17, scope: !6448)
!6452 = !DILocation(line: 592, column: 9, scope: !6448)
!6453 = !DILocation(line: 593, column: 5, scope: !6408)
!6454 = !DILocalVariable(name: "nest", scope: !6455, file: !3, line: 600, type: !1064)
!6455 = distinct !DILexicalBlock(scope: !6405, file: !3, line: 599, column: 5)
!6456 = !DILocation(line: 600, column: 11, scope: !6455)
!6457 = !DILocation(line: 600, column: 18, scope: !6455)
!6458 = !DILocation(line: 601, column: 41, scope: !6455)
!6459 = !DILocation(line: 601, column: 47, scope: !6455)
!6460 = !DILocation(line: 601, column: 17, scope: !6455)
!6461 = !DILocation(line: 601, column: 55, scope: !6455)
!6462 = !DILocation(line: 601, column: 15, scope: !6455)
!6463 = !DILocation(line: 604, column: 11, scope: !6464)
!6464 = distinct !DILexicalBlock(scope: !6455, file: !3, line: 604, column: 11)
!6465 = !DILocation(line: 604, column: 19, scope: !6464)
!6466 = !DILocation(line: 604, column: 11, scope: !6455)
!6467 = !DILocation(line: 605, column: 14, scope: !6464)
!6468 = !DILocation(line: 605, column: 10, scope: !6464)
!6469 = !DILocation(line: 605, column: 2, scope: !6464)
!6470 = !DILocation(line: 608, column: 16, scope: !6471)
!6471 = distinct !DILexicalBlock(scope: !6464, file: !3, line: 607, column: 9)
!6472 = !DILocation(line: 608, column: 12, scope: !6471)
!6473 = !DILocation(line: 612, column: 36, scope: !6474)
!6474 = distinct !DILexicalBlock(scope: !6351, file: !3, line: 612, column: 7)
!6475 = !DILocation(line: 612, column: 42, scope: !6474)
!6476 = !DILocation(line: 612, column: 50, scope: !6474)
!6477 = !DILocation(line: 612, column: 56, scope: !6474)
!6478 = !DILocation(line: 612, column: 7, scope: !6474)
!6479 = !DILocation(line: 612, column: 7, scope: !6351)
!6480 = !DILocation(line: 613, column: 12, scope: !6474)
!6481 = !DILocation(line: 613, column: 20, scope: !6474)
!6482 = !DILocation(line: 613, column: 5, scope: !6474)
!6483 = !DILocation(line: 615, column: 12, scope: !6474)
!6484 = !DILocation(line: 615, column: 5, scope: !6474)
!6485 = !DILocation(line: 616, column: 1, scope: !6351)
!6486 = distinct !DISubprogram(name: "compute_max_insns", scope: !3, file: !3, line: 867, type: !6487, scopeLine: 868, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2865)
!6487 = !DISubroutineType(types: !6488)
!6488 = !{!1064, !1064}
!6489 = !DILocalVariable(name: "insns", arg: 1, scope: !6486, file: !3, line: 867, type: !1064)
!6490 = !DILocation(line: 867, column: 24, scope: !6486)
!6491 = !DILocalVariable(name: "max_insns", scope: !6486, file: !3, line: 869, type: !1064)
!6492 = !DILocation(line: 869, column: 7, scope: !6486)
!6493 = !DILocation(line: 869, column: 19, scope: !6486)
!6494 = !DILocation(line: 870, column: 7, scope: !6495)
!6495 = distinct !DILexicalBlock(scope: !6486, file: !3, line: 870, column: 7)
!6496 = !DILocation(line: 870, column: 19, scope: !6495)
!6497 = !DILocation(line: 870, column: 17, scope: !6495)
!6498 = !DILocation(line: 870, column: 7, scope: !6486)
!6499 = !DILocation(line: 871, column: 17, scope: !6495)
!6500 = !DILocation(line: 871, column: 15, scope: !6495)
!6501 = !DILocation(line: 871, column: 5, scope: !6495)
!6502 = !DILocation(line: 873, column: 29, scope: !6486)
!6503 = !DILocation(line: 873, column: 11, scope: !6486)
!6504 = !DILocation(line: 874, column: 13, scope: !6486)
!6505 = !DILocation(line: 874, column: 11, scope: !6486)
!6506 = !DILocation(line: 874, column: 6, scope: !6486)
!6507 = !DILocation(line: 874, column: 4, scope: !6486)
!6508 = !DILocation(line: 874, column: 53, scope: !6486)
!6509 = !DILocation(line: 873, column: 10, scope: !6486)
!6510 = !DILocation(line: 873, column: 3, scope: !6486)
!6511 = distinct !DISubprogram(name: "gimple_filename", scope: !757, file: !757, line: 1174, type: !6512, scopeLine: 1175, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2865)
!6512 = !DISubroutineType(types: !6513)
!6513 = !{!1223, !2694}
!6514 = !DILocalVariable(name: "stmt", arg: 1, scope: !6511, file: !757, line: 1174, type: !2694)
!6515 = !DILocation(line: 1174, column: 31, scope: !6511)
!6516 = !DILocation(line: 1176, column: 10, scope: !6511)
!6517 = !DILocation(line: 1176, column: 3, scope: !6511)
!6518 = distinct !DISubprogram(name: "gimple_lineno", scope: !757, file: !757, line: 1183, type: !6519, scopeLine: 1184, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2865)
!6519 = !DISubroutineType(types: !6520)
!6520 = !{!1064, !2694}
!6521 = !DILocalVariable(name: "stmt", arg: 1, scope: !6518, file: !757, line: 1183, type: !2694)
!6522 = !DILocation(line: 1183, column: 29, scope: !6518)
!6523 = !DILocation(line: 1185, column: 10, scope: !6518)
!6524 = !DILocation(line: 1185, column: 3, scope: !6518)
!6525 = distinct !DISubprogram(name: "cgraph_decide_recursive_inlining", scope: !3, file: !3, line: 718, type: !6526, scopeLine: 720, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2865)
!6526 = !DISubroutineType(types: !6527)
!6527 = !{!1367, !2465, !5184}
!6528 = !DILocalVariable(name: "node", arg: 1, scope: !6525, file: !3, line: 718, type: !2465)
!6529 = !DILocation(line: 718, column: 55, scope: !6525)
!6530 = !DILocalVariable(name: "new_edges", arg: 2, scope: !6525, file: !3, line: 719, type: !5184)
!6531 = !DILocation(line: 719, column: 35, scope: !6525)
!6532 = !DILocalVariable(name: "limit", scope: !6525, file: !3, line: 721, type: !1064)
!6533 = !DILocation(line: 721, column: 7, scope: !6525)
!6534 = !DILocation(line: 721, column: 15, scope: !6525)
!6535 = !DILocalVariable(name: "max_depth", scope: !6525, file: !3, line: 722, type: !1064)
!6536 = !DILocation(line: 722, column: 7, scope: !6525)
!6537 = !DILocation(line: 722, column: 19, scope: !6525)
!6538 = !DILocalVariable(name: "probability", scope: !6525, file: !3, line: 723, type: !1064)
!6539 = !DILocation(line: 723, column: 7, scope: !6525)
!6540 = !DILocation(line: 723, column: 21, scope: !6525)
!6541 = !DILocalVariable(name: "heap", scope: !6525, file: !3, line: 724, type: !2858)
!6542 = !DILocation(line: 724, column: 13, scope: !6525)
!6543 = !DILocalVariable(name: "e", scope: !6525, file: !3, line: 725, type: !2470)
!6544 = !DILocation(line: 725, column: 23, scope: !6525)
!6545 = !DILocalVariable(name: "master_clone", scope: !6525, file: !3, line: 726, type: !2465)
!6546 = !DILocation(line: 726, column: 23, scope: !6525)
!6547 = !DILocalVariable(name: "next", scope: !6525, file: !3, line: 726, type: !2465)
!6548 = !DILocation(line: 726, column: 38, scope: !6525)
!6549 = !DILocalVariable(name: "depth", scope: !6525, file: !3, line: 727, type: !1064)
!6550 = !DILocation(line: 727, column: 7, scope: !6525)
!6551 = !DILocalVariable(name: "n", scope: !6525, file: !3, line: 728, type: !1064)
!6552 = !DILocation(line: 728, column: 7, scope: !6525)
!6553 = !DILocation(line: 730, column: 37, scope: !6554)
!6554 = distinct !DILexicalBlock(scope: !6525, file: !3, line: 730, column: 7)
!6555 = !DILocation(line: 730, column: 7, scope: !6554)
!6556 = !DILocation(line: 731, column: 7, scope: !6554)
!6557 = !DILocation(line: 731, column: 12, scope: !6554)
!6558 = !DILocation(line: 731, column: 34, scope: !6554)
!6559 = !DILocation(line: 731, column: 38, scope: !6554)
!6560 = !DILocation(line: 730, column: 7, scope: !6525)
!6561 = !DILocation(line: 732, column: 5, scope: !6554)
!6562 = !DILocation(line: 734, column: 7, scope: !6563)
!6563 = distinct !DILexicalBlock(scope: !6525, file: !3, line: 734, column: 7)
!6564 = !DILocation(line: 734, column: 7, scope: !6525)
!6565 = !DILocation(line: 736, column: 15, scope: !6566)
!6566 = distinct !DILexicalBlock(scope: !6563, file: !3, line: 735, column: 5)
!6567 = !DILocation(line: 736, column: 13, scope: !6566)
!6568 = !DILocation(line: 737, column: 19, scope: !6566)
!6569 = !DILocation(line: 737, column: 17, scope: !6566)
!6570 = !DILocation(line: 738, column: 5, scope: !6566)
!6571 = !DILocation(line: 741, column: 8, scope: !6572)
!6572 = distinct !DILexicalBlock(scope: !6525, file: !3, line: 741, column: 7)
!6573 = !DILocation(line: 742, column: 7, scope: !6572)
!6574 = !DILocation(line: 742, column: 50, scope: !6572)
!6575 = !DILocation(line: 742, column: 56, scope: !6572)
!6576 = !DILocation(line: 742, column: 10, scope: !6572)
!6577 = !DILocation(line: 742, column: 66, scope: !6572)
!6578 = !DILocation(line: 742, column: 63, scope: !6572)
!6579 = !DILocation(line: 741, column: 7, scope: !6525)
!6580 = !DILocation(line: 743, column: 5, scope: !6572)
!6581 = !DILocation(line: 744, column: 10, scope: !6525)
!6582 = !DILocation(line: 744, column: 8, scope: !6525)
!6583 = !DILocation(line: 745, column: 27, scope: !6525)
!6584 = !DILocation(line: 745, column: 33, scope: !6525)
!6585 = !DILocation(line: 745, column: 39, scope: !6525)
!6586 = !DILocation(line: 745, column: 3, scope: !6525)
!6587 = !DILocation(line: 746, column: 22, scope: !6588)
!6588 = distinct !DILexicalBlock(scope: !6525, file: !3, line: 746, column: 7)
!6589 = !DILocation(line: 746, column: 7, scope: !6588)
!6590 = !DILocation(line: 746, column: 7, scope: !6525)
!6591 = !DILocation(line: 748, column: 23, scope: !6592)
!6592 = distinct !DILexicalBlock(scope: !6588, file: !3, line: 747, column: 5)
!6593 = !DILocation(line: 748, column: 7, scope: !6592)
!6594 = !DILocation(line: 749, column: 7, scope: !6592)
!6595 = !DILocation(line: 752, column: 7, scope: !6596)
!6596 = distinct !DILexicalBlock(scope: !6525, file: !3, line: 752, column: 7)
!6597 = !DILocation(line: 752, column: 7, scope: !6525)
!6598 = !DILocation(line: 753, column: 14, scope: !6596)
!6599 = !DILocation(line: 755, column: 25, scope: !6596)
!6600 = !DILocation(line: 755, column: 7, scope: !6596)
!6601 = !DILocation(line: 753, column: 5, scope: !6596)
!6602 = !DILocation(line: 758, column: 37, scope: !6525)
!6603 = !DILocation(line: 758, column: 43, scope: !6525)
!6604 = !DILocation(line: 758, column: 49, scope: !6525)
!6605 = !DILocation(line: 758, column: 18, scope: !6525)
!6606 = !DILocation(line: 758, column: 16, scope: !6525)
!6607 = !DILocation(line: 760, column: 3, scope: !6525)
!6608 = !DILocation(line: 760, column: 17, scope: !6525)
!6609 = !DILocation(line: 760, column: 24, scope: !6525)
!6610 = !DILocation(line: 761, column: 12, scope: !6611)
!6611 = distinct !DILexicalBlock(scope: !6525, file: !3, line: 761, column: 3)
!6612 = !DILocation(line: 761, column: 26, scope: !6611)
!6613 = !DILocation(line: 761, column: 10, scope: !6611)
!6614 = !DILocation(line: 761, column: 8, scope: !6611)
!6615 = !DILocation(line: 761, column: 35, scope: !6616)
!6616 = distinct !DILexicalBlock(scope: !6611, file: !3, line: 761, column: 3)
!6617 = !DILocation(line: 761, column: 3, scope: !6611)
!6618 = !DILocation(line: 762, column: 10, scope: !6619)
!6619 = distinct !DILexicalBlock(scope: !6616, file: !3, line: 762, column: 9)
!6620 = !DILocation(line: 762, column: 13, scope: !6619)
!6621 = !DILocation(line: 762, column: 9, scope: !6616)
!6622 = !DILocation(line: 763, column: 35, scope: !6619)
!6623 = !DILocation(line: 763, column: 7, scope: !6619)
!6624 = !DILocation(line: 761, column: 42, scope: !6616)
!6625 = !DILocation(line: 761, column: 45, scope: !6616)
!6626 = !DILocation(line: 761, column: 40, scope: !6616)
!6627 = !DILocation(line: 761, column: 3, scope: !6616)
!6628 = distinct !{!6628, !6617, !6629}
!6629 = !DILocation(line: 763, column: 49, scope: !6611)
!6630 = !DILocation(line: 766, column: 3, scope: !6525)
!6631 = !DILocation(line: 766, column: 26, scope: !6525)
!6632 = !DILocation(line: 766, column: 11, scope: !6525)
!6633 = !DILocation(line: 767, column: 3, scope: !6525)
!6634 = !DILocation(line: 767, column: 47, scope: !6525)
!6635 = !DILocation(line: 767, column: 53, scope: !6525)
!6636 = !DILocation(line: 767, column: 7, scope: !6525)
!6637 = !DILocation(line: 768, column: 10, scope: !6525)
!6638 = !DILocation(line: 768, column: 7, scope: !6525)
!6639 = !DILocation(line: 0, scope: !6525)
!6640 = !DILocalVariable(name: "curr", scope: !6641, file: !3, line: 770, type: !2470)
!6641 = distinct !DILexicalBlock(scope: !6525, file: !3, line: 769, column: 5)
!6642 = !DILocation(line: 770, column: 27, scope: !6641)
!6643 = !DILocation(line: 771, column: 48, scope: !6641)
!6644 = !DILocation(line: 771, column: 27, scope: !6641)
!6645 = !DILocation(line: 771, column: 4, scope: !6641)
!6646 = !DILocalVariable(name: "cnode", scope: !6641, file: !3, line: 772, type: !2465)
!6647 = !DILocation(line: 772, column: 27, scope: !6641)
!6648 = !DILocation(line: 774, column: 13, scope: !6641)
!6649 = !DILocation(line: 775, column: 20, scope: !6650)
!6650 = distinct !DILexicalBlock(scope: !6641, file: !3, line: 775, column: 7)
!6651 = !DILocation(line: 775, column: 26, scope: !6650)
!6652 = !DILocation(line: 775, column: 18, scope: !6650)
!6653 = !DILocation(line: 775, column: 12, scope: !6650)
!6654 = !DILocation(line: 776, column: 5, scope: !6655)
!6655 = distinct !DILexicalBlock(scope: !6650, file: !3, line: 775, column: 7)
!6656 = !DILocation(line: 776, column: 12, scope: !6655)
!6657 = !DILocation(line: 776, column: 19, scope: !6655)
!6658 = !DILocation(line: 775, column: 7, scope: !6650)
!6659 = !DILocation(line: 777, column: 6, scope: !6660)
!6660 = distinct !DILexicalBlock(scope: !6655, file: !3, line: 777, column: 6)
!6661 = !DILocation(line: 777, column: 12, scope: !6660)
!6662 = !DILocation(line: 777, column: 20, scope: !6660)
!6663 = !DILocation(line: 777, column: 26, scope: !6660)
!6664 = !DILocation(line: 777, column: 34, scope: !6660)
!6665 = !DILocation(line: 777, column: 17, scope: !6660)
!6666 = !DILocation(line: 777, column: 6, scope: !6655)
!6667 = !DILocation(line: 778, column: 9, scope: !6660)
!6668 = !DILocation(line: 778, column: 4, scope: !6660)
!6669 = !DILocation(line: 776, column: 39, scope: !6655)
!6670 = !DILocation(line: 776, column: 46, scope: !6655)
!6671 = !DILocation(line: 776, column: 55, scope: !6655)
!6672 = !DILocation(line: 776, column: 37, scope: !6655)
!6673 = !DILocation(line: 775, column: 7, scope: !6655)
!6674 = distinct !{!6674, !6658, !6675}
!6675 = !DILocation(line: 778, column: 9, scope: !6650)
!6676 = !DILocation(line: 779, column: 11, scope: !6677)
!6677 = distinct !DILexicalBlock(scope: !6641, file: !3, line: 779, column: 11)
!6678 = !DILocation(line: 779, column: 19, scope: !6677)
!6679 = !DILocation(line: 779, column: 17, scope: !6677)
!6680 = !DILocation(line: 779, column: 11, scope: !6641)
!6681 = !DILocation(line: 781, column: 15, scope: !6682)
!6682 = distinct !DILexicalBlock(scope: !6683, file: !3, line: 781, column: 15)
!6683 = distinct !DILexicalBlock(scope: !6677, file: !3, line: 780, column: 2)
!6684 = !DILocation(line: 781, column: 15, scope: !6683)
!6685 = !DILocation(line: 782, column: 15, scope: !6682)
!6686 = !DILocation(line: 782, column: 6, scope: !6682)
!6687 = !DILocation(line: 784, column: 4, scope: !6683)
!6688 = distinct !{!6688, !6630, !6689}
!6689 = !DILocation(line: 819, column: 5, scope: !6525)
!6690 = !DILocation(line: 787, column: 11, scope: !6691)
!6691 = distinct !DILexicalBlock(scope: !6641, file: !3, line: 787, column: 11)
!6692 = !DILocation(line: 787, column: 11, scope: !6641)
!6693 = !DILocation(line: 789, column: 41, scope: !6694)
!6694 = distinct !DILexicalBlock(scope: !6695, file: !3, line: 789, column: 15)
!6695 = distinct !DILexicalBlock(scope: !6691, file: !3, line: 788, column: 2)
!6696 = !DILocation(line: 789, column: 16, scope: !6694)
!6697 = !DILocation(line: 789, column: 15, scope: !6695)
!6698 = !DILocation(line: 791, column: 12, scope: !6699)
!6699 = distinct !DILexicalBlock(scope: !6700, file: !3, line: 791, column: 12)
!6700 = distinct !DILexicalBlock(scope: !6694, file: !3, line: 790, column: 6)
!6701 = !DILocation(line: 791, column: 12, scope: !6700)
!6702 = !DILocation(line: 792, column: 12, scope: !6699)
!6703 = !DILocation(line: 792, column: 3, scope: !6699)
!6704 = !DILocation(line: 793, column: 8, scope: !6700)
!6705 = !DILocation(line: 795, column: 15, scope: !6706)
!6706 = distinct !DILexicalBlock(scope: !6695, file: !3, line: 795, column: 15)
!6707 = !DILocation(line: 795, column: 21, scope: !6706)
!6708 = !DILocation(line: 795, column: 27, scope: !6706)
!6709 = !DILocation(line: 795, column: 35, scope: !6706)
!6710 = !DILocation(line: 795, column: 41, scope: !6706)
!6711 = !DILocation(line: 795, column: 33, scope: !6706)
!6712 = !DILocation(line: 795, column: 49, scope: !6706)
!6713 = !DILocation(line: 795, column: 47, scope: !6706)
!6714 = !DILocation(line: 795, column: 15, scope: !6695)
!6715 = !DILocation(line: 797, column: 12, scope: !6716)
!6716 = distinct !DILexicalBlock(scope: !6717, file: !3, line: 797, column: 12)
!6717 = distinct !DILexicalBlock(scope: !6706, file: !3, line: 796, column: 6)
!6718 = !DILocation(line: 797, column: 12, scope: !6717)
!6719 = !DILocation(line: 798, column: 12, scope: !6716)
!6720 = !DILocation(line: 798, column: 3, scope: !6716)
!6721 = !DILocation(line: 800, column: 8, scope: !6717)
!6722 = !DILocation(line: 802, column: 2, scope: !6695)
!6723 = !DILocation(line: 804, column: 11, scope: !6724)
!6724 = distinct !DILexicalBlock(scope: !6641, file: !3, line: 804, column: 11)
!6725 = !DILocation(line: 804, column: 11, scope: !6641)
!6726 = !DILocation(line: 806, column: 13, scope: !6727)
!6727 = distinct !DILexicalBlock(scope: !6724, file: !3, line: 805, column: 2)
!6728 = !DILocation(line: 807, column: 38, scope: !6727)
!6729 = !DILocation(line: 806, column: 4, scope: !6727)
!6730 = !DILocation(line: 808, column: 8, scope: !6731)
!6731 = distinct !DILexicalBlock(scope: !6727, file: !3, line: 808, column: 8)
!6732 = !DILocation(line: 808, column: 14, scope: !6731)
!6733 = !DILocation(line: 808, column: 8, scope: !6727)
!6734 = !DILocation(line: 810, column: 17, scope: !6735)
!6735 = distinct !DILexicalBlock(scope: !6731, file: !3, line: 809, column: 6)
!6736 = !DILocation(line: 811, column: 18, scope: !6735)
!6737 = !DILocation(line: 811, column: 24, scope: !6735)
!6738 = !DILocation(line: 811, column: 10, scope: !6735)
!6739 = !DILocation(line: 811, column: 32, scope: !6735)
!6740 = !DILocation(line: 811, column: 38, scope: !6735)
!6741 = !DILocation(line: 811, column: 30, scope: !6735)
!6742 = !DILocation(line: 810, column: 8, scope: !6735)
!6743 = !DILocation(line: 812, column: 6, scope: !6735)
!6744 = !DILocation(line: 813, column: 13, scope: !6727)
!6745 = !DILocation(line: 813, column: 4, scope: !6727)
!6746 = !DILocation(line: 814, column: 2, scope: !6727)
!6747 = !DILocation(line: 815, column: 36, scope: !6641)
!6748 = !DILocation(line: 815, column: 42, scope: !6641)
!6749 = !DILocation(line: 815, column: 7, scope: !6641)
!6750 = !DILocation(line: 816, column: 32, scope: !6641)
!6751 = !DILocation(line: 816, column: 45, scope: !6641)
!6752 = !DILocation(line: 816, column: 7, scope: !6641)
!6753 = !DILocation(line: 817, column: 31, scope: !6641)
!6754 = !DILocation(line: 817, column: 37, scope: !6641)
!6755 = !DILocation(line: 817, column: 43, scope: !6641)
!6756 = !DILocation(line: 817, column: 51, scope: !6641)
!6757 = !DILocation(line: 817, column: 7, scope: !6641)
!6758 = !DILocation(line: 818, column: 8, scope: !6641)
!6759 = !DILocation(line: 820, column: 23, scope: !6760)
!6760 = distinct !DILexicalBlock(scope: !6525, file: !3, line: 820, column: 7)
!6761 = !DILocation(line: 820, column: 8, scope: !6760)
!6762 = !DILocation(line: 820, column: 29, scope: !6760)
!6763 = !DILocation(line: 820, column: 32, scope: !6760)
!6764 = !DILocation(line: 820, column: 7, scope: !6525)
!6765 = !DILocation(line: 821, column: 14, scope: !6760)
!6766 = !DILocation(line: 821, column: 5, scope: !6760)
!6767 = !DILocation(line: 823, column: 19, scope: !6525)
!6768 = !DILocation(line: 823, column: 3, scope: !6525)
!6769 = !DILocation(line: 824, column: 7, scope: !6770)
!6770 = distinct !DILexicalBlock(scope: !6525, file: !3, line: 824, column: 7)
!6771 = !DILocation(line: 824, column: 7, scope: !6525)
!6772 = !DILocation(line: 825, column: 14, scope: !6770)
!6773 = !DILocation(line: 826, column: 80, scope: !6770)
!6774 = !DILocation(line: 827, column: 7, scope: !6770)
!6775 = !DILocation(line: 827, column: 21, scope: !6770)
!6776 = !DILocation(line: 827, column: 28, scope: !6770)
!6777 = !DILocation(line: 827, column: 34, scope: !6770)
!6778 = !DILocation(line: 827, column: 40, scope: !6770)
!6779 = !DILocation(line: 827, column: 47, scope: !6770)
!6780 = !DILocation(line: 828, column: 7, scope: !6770)
!6781 = !DILocation(line: 828, column: 21, scope: !6770)
!6782 = !DILocation(line: 828, column: 28, scope: !6770)
!6783 = !DILocation(line: 828, column: 34, scope: !6770)
!6784 = !DILocation(line: 828, column: 40, scope: !6770)
!6785 = !DILocation(line: 828, column: 47, scope: !6770)
!6786 = !DILocation(line: 825, column: 5, scope: !6770)
!6787 = !DILocation(line: 833, column: 15, scope: !6788)
!6788 = distinct !DILexicalBlock(scope: !6525, file: !3, line: 833, column: 3)
!6789 = !DILocation(line: 833, column: 13, scope: !6788)
!6790 = !DILocation(line: 833, column: 8, scope: !6788)
!6791 = !DILocation(line: 833, column: 29, scope: !6792)
!6792 = distinct !DILexicalBlock(scope: !6788, file: !3, line: 833, column: 3)
!6793 = !DILocation(line: 833, column: 37, scope: !6792)
!6794 = !DILocation(line: 833, column: 34, scope: !6792)
!6795 = !DILocation(line: 833, column: 3, scope: !6788)
!6796 = !DILocation(line: 836, column: 14, scope: !6797)
!6797 = distinct !DILexicalBlock(scope: !6792, file: !3, line: 835, column: 5)
!6798 = !DILocation(line: 836, column: 20, scope: !6797)
!6799 = !DILocation(line: 836, column: 12, scope: !6797)
!6800 = !DILocation(line: 837, column: 11, scope: !6801)
!6801 = distinct !DILexicalBlock(scope: !6797, file: !3, line: 837, column: 11)
!6802 = !DILocation(line: 837, column: 17, scope: !6801)
!6803 = !DILocation(line: 837, column: 24, scope: !6801)
!6804 = !DILocation(line: 837, column: 38, scope: !6801)
!6805 = !DILocation(line: 837, column: 35, scope: !6801)
!6806 = !DILocation(line: 837, column: 11, scope: !6797)
!6807 = !DILocation(line: 838, column: 22, scope: !6801)
!6808 = !DILocation(line: 838, column: 2, scope: !6801)
!6809 = !DILocation(line: 839, column: 5, scope: !6797)
!6810 = !DILocation(line: 834, column: 15, scope: !6792)
!6811 = !DILocation(line: 834, column: 13, scope: !6792)
!6812 = !DILocation(line: 833, column: 3, scope: !6792)
!6813 = distinct !{!6813, !6795, !6814}
!6814 = !DILocation(line: 839, column: 5, scope: !6788)
!6815 = !DILocation(line: 840, column: 23, scope: !6525)
!6816 = !DILocation(line: 840, column: 3, scope: !6525)
!6817 = !DILocation(line: 845, column: 10, scope: !6525)
!6818 = !DILocation(line: 845, column: 12, scope: !6525)
!6819 = !DILocation(line: 845, column: 3, scope: !6525)
!6820 = !DILocation(line: 846, column: 1, scope: !6525)
!6821 = distinct !DISubprogram(name: "add_new_edges_to_heap", scope: !3, file: !3, line: 879, type: !6822, scopeLine: 880, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2865)
!6822 = !DISubroutineType(types: !6823)
!6823 = !{null, !2858, !2696}
!6824 = !DILocalVariable(name: "heap", arg: 1, scope: !6821, file: !3, line: 879, type: !2858)
!6825 = !DILocation(line: 879, column: 34, scope: !6821)
!6826 = !DILocalVariable(name: "new_edges", arg: 2, scope: !6821, file: !3, line: 879, type: !2696)
!6827 = !DILocation(line: 879, column: 67, scope: !6821)
!6828 = !DILocation(line: 881, column: 3, scope: !6821)
!6829 = !DILocation(line: 881, column: 10, scope: !6821)
!6830 = !DILocation(line: 881, column: 48, scope: !6821)
!6831 = !DILocalVariable(name: "edge", scope: !6832, file: !3, line: 883, type: !2470)
!6832 = distinct !DILexicalBlock(scope: !6821, file: !3, line: 882, column: 5)
!6833 = !DILocation(line: 883, column: 27, scope: !6832)
!6834 = !DILocation(line: 883, column: 34, scope: !6832)
!6835 = !DILocation(line: 885, column: 7, scope: !6832)
!6836 = !DILocation(line: 886, column: 35, scope: !6832)
!6837 = !DILocation(line: 886, column: 62, scope: !6832)
!6838 = !DILocation(line: 886, column: 41, scope: !6832)
!6839 = !DILocation(line: 886, column: 69, scope: !6832)
!6840 = !DILocation(line: 886, column: 19, scope: !6832)
!6841 = !DILocation(line: 886, column: 7, scope: !6832)
!6842 = !DILocation(line: 886, column: 13, scope: !6832)
!6843 = !DILocation(line: 886, column: 17, scope: !6832)
!6844 = distinct !{!6844, !6828, !6845}
!6845 = !DILocation(line: 887, column: 5, scope: !6821)
!6846 = !DILocation(line: 888, column: 1, scope: !6821)
!6847 = distinct !DISubprogram(name: "update_callee_keys", scope: !3, file: !3, line: 674, type: !6848, scopeLine: 676, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2865)
!6848 = !DISubroutineType(types: !6849)
!6849 = !{null, !2858, !2465, !1069}
!6850 = !DILocalVariable(name: "heap", arg: 1, scope: !6847, file: !3, line: 674, type: !2858)
!6851 = !DILocation(line: 674, column: 31, scope: !6847)
!6852 = !DILocalVariable(name: "node", arg: 2, scope: !6847, file: !3, line: 674, type: !2465)
!6853 = !DILocation(line: 674, column: 57, scope: !6847)
!6854 = !DILocalVariable(name: "updated_nodes", arg: 3, scope: !6847, file: !3, line: 675, type: !1069)
!6855 = !DILocation(line: 675, column: 14, scope: !6847)
!6856 = !DILocalVariable(name: "e", scope: !6847, file: !3, line: 677, type: !2470)
!6857 = !DILocation(line: 677, column: 23, scope: !6847)
!6858 = !DILocation(line: 678, column: 3, scope: !6847)
!6859 = !DILocation(line: 678, column: 9, scope: !6847)
!6860 = !DILocation(line: 678, column: 16, scope: !6847)
!6861 = !DILocation(line: 678, column: 33, scope: !6847)
!6862 = !DILocation(line: 680, column: 12, scope: !6863)
!6863 = distinct !DILexicalBlock(scope: !6847, file: !3, line: 680, column: 3)
!6864 = !DILocation(line: 680, column: 18, scope: !6863)
!6865 = !DILocation(line: 680, column: 10, scope: !6863)
!6866 = !DILocation(line: 680, column: 8, scope: !6863)
!6867 = !DILocation(line: 680, column: 27, scope: !6868)
!6868 = distinct !DILexicalBlock(scope: !6863, file: !3, line: 680, column: 3)
!6869 = !DILocation(line: 680, column: 3, scope: !6863)
!6870 = !DILocation(line: 681, column: 9, scope: !6871)
!6871 = distinct !DILexicalBlock(scope: !6868, file: !3, line: 681, column: 9)
!6872 = !DILocation(line: 681, column: 12, scope: !6871)
!6873 = !DILocation(line: 681, column: 9, scope: !6868)
!6874 = !DILocation(line: 682, column: 27, scope: !6871)
!6875 = !DILocation(line: 682, column: 33, scope: !6871)
!6876 = !DILocation(line: 682, column: 36, scope: !6871)
!6877 = !DILocation(line: 682, column: 44, scope: !6871)
!6878 = !DILocation(line: 682, column: 7, scope: !6871)
!6879 = !DILocation(line: 683, column: 15, scope: !6880)
!6880 = distinct !DILexicalBlock(scope: !6871, file: !3, line: 683, column: 14)
!6881 = !DILocation(line: 683, column: 18, scope: !6880)
!6882 = !DILocation(line: 683, column: 14, scope: !6871)
!6883 = !DILocation(line: 684, column: 27, scope: !6880)
!6884 = !DILocation(line: 684, column: 33, scope: !6880)
!6885 = !DILocation(line: 684, column: 36, scope: !6880)
!6886 = !DILocation(line: 684, column: 44, scope: !6880)
!6887 = !DILocation(line: 684, column: 7, scope: !6880)
!6888 = !DILocation(line: 680, column: 34, scope: !6868)
!6889 = !DILocation(line: 680, column: 37, scope: !6868)
!6890 = !DILocation(line: 680, column: 32, scope: !6868)
!6891 = !DILocation(line: 680, column: 3, scope: !6868)
!6892 = distinct !{!6892, !6869, !6893}
!6893 = !DILocation(line: 684, column: 57, scope: !6863)
!6894 = !DILocation(line: 685, column: 1, scope: !6847)
!6895 = distinct !DISubprogram(name: "update_caller_keys", scope: !3, file: !3, line: 621, type: !6848, scopeLine: 623, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2865)
!6896 = !DILocalVariable(name: "heap", arg: 1, scope: !6895, file: !3, line: 621, type: !2858)
!6897 = !DILocation(line: 621, column: 31, scope: !6895)
!6898 = !DILocalVariable(name: "node", arg: 2, scope: !6895, file: !3, line: 621, type: !2465)
!6899 = !DILocation(line: 621, column: 57, scope: !6895)
!6900 = !DILocalVariable(name: "updated_nodes", arg: 3, scope: !6895, file: !3, line: 622, type: !1069)
!6901 = !DILocation(line: 622, column: 14, scope: !6895)
!6902 = !DILocalVariable(name: "edge", scope: !6895, file: !3, line: 624, type: !2470)
!6903 = !DILocation(line: 624, column: 23, scope: !6895)
!6904 = !DILocalVariable(name: "failed_reason", scope: !6895, file: !3, line: 625, type: !2483)
!6905 = !DILocation(line: 625, column: 26, scope: !6895)
!6906 = !DILocation(line: 627, column: 8, scope: !6907)
!6907 = distinct !DILexicalBlock(scope: !6895, file: !3, line: 627, column: 7)
!6908 = !DILocation(line: 627, column: 14, scope: !6907)
!6909 = !DILocation(line: 627, column: 20, scope: !6907)
!6910 = !DILocation(line: 627, column: 30, scope: !6907)
!6911 = !DILocation(line: 627, column: 33, scope: !6907)
!6912 = !DILocation(line: 627, column: 39, scope: !6907)
!6913 = !DILocation(line: 627, column: 45, scope: !6907)
!6914 = !DILocation(line: 628, column: 7, scope: !6907)
!6915 = !DILocation(line: 628, column: 10, scope: !6907)
!6916 = !DILocation(line: 628, column: 16, scope: !6907)
!6917 = !DILocation(line: 628, column: 23, scope: !6907)
!6918 = !DILocation(line: 627, column: 7, scope: !6895)
!6919 = !DILocation(line: 629, column: 5, scope: !6907)
!6920 = !DILocation(line: 630, column: 21, scope: !6921)
!6921 = distinct !DILexicalBlock(scope: !6895, file: !3, line: 630, column: 7)
!6922 = !DILocation(line: 630, column: 36, scope: !6921)
!6923 = !DILocation(line: 630, column: 42, scope: !6921)
!6924 = !DILocation(line: 630, column: 7, scope: !6921)
!6925 = !DILocation(line: 630, column: 7, scope: !6895)
!6926 = !DILocation(line: 631, column: 5, scope: !6921)
!6927 = !DILocation(line: 632, column: 19, scope: !6895)
!6928 = !DILocation(line: 632, column: 34, scope: !6895)
!6929 = !DILocation(line: 632, column: 40, scope: !6895)
!6930 = !DILocation(line: 632, column: 3, scope: !6895)
!6931 = !DILocation(line: 633, column: 3, scope: !6895)
!6932 = !DILocation(line: 633, column: 9, scope: !6895)
!6933 = !DILocation(line: 633, column: 16, scope: !6895)
!6934 = !DILocation(line: 633, column: 33, scope: !6895)
!6935 = !DILocation(line: 635, column: 8, scope: !6936)
!6936 = distinct !DILexicalBlock(scope: !6895, file: !3, line: 635, column: 7)
!6937 = !DILocation(line: 635, column: 14, scope: !6936)
!6938 = !DILocation(line: 635, column: 20, scope: !6936)
!6939 = !DILocation(line: 635, column: 7, scope: !6895)
!6940 = !DILocation(line: 636, column: 5, scope: !6936)
!6941 = !DILocation(line: 638, column: 33, scope: !6942)
!6942 = distinct !DILexicalBlock(scope: !6895, file: !3, line: 638, column: 7)
!6943 = !DILocation(line: 638, column: 8, scope: !6942)
!6944 = !DILocation(line: 638, column: 7, scope: !6895)
!6945 = !DILocation(line: 640, column: 19, scope: !6946)
!6946 = distinct !DILexicalBlock(scope: !6947, file: !3, line: 640, column: 7)
!6947 = distinct !DILexicalBlock(scope: !6942, file: !3, line: 639, column: 5)
!6948 = !DILocation(line: 640, column: 25, scope: !6946)
!6949 = !DILocation(line: 640, column: 17, scope: !6946)
!6950 = !DILocation(line: 640, column: 12, scope: !6946)
!6951 = !DILocation(line: 640, column: 34, scope: !6952)
!6952 = distinct !DILexicalBlock(scope: !6946, file: !3, line: 640, column: 7)
!6953 = !DILocation(line: 640, column: 7, scope: !6946)
!6954 = !DILocation(line: 641, column: 6, scope: !6955)
!6955 = distinct !DILexicalBlock(scope: !6952, file: !3, line: 641, column: 6)
!6956 = !DILocation(line: 641, column: 12, scope: !6955)
!6957 = !DILocation(line: 641, column: 6, scope: !6952)
!6958 = !DILocation(line: 643, column: 27, scope: !6959)
!6959 = distinct !DILexicalBlock(scope: !6955, file: !3, line: 642, column: 4)
!6960 = !DILocation(line: 643, column: 45, scope: !6959)
!6961 = !DILocation(line: 643, column: 51, scope: !6959)
!6962 = !DILocation(line: 643, column: 33, scope: !6959)
!6963 = !DILocation(line: 643, column: 6, scope: !6959)
!6964 = !DILocation(line: 644, column: 6, scope: !6959)
!6965 = !DILocation(line: 644, column: 12, scope: !6959)
!6966 = !DILocation(line: 644, column: 16, scope: !6959)
!6967 = !DILocation(line: 645, column: 10, scope: !6968)
!6968 = distinct !DILexicalBlock(scope: !6959, file: !3, line: 645, column: 10)
!6969 = !DILocation(line: 645, column: 16, scope: !6968)
!6970 = !DILocation(line: 645, column: 10, scope: !6959)
!6971 = !DILocation(line: 646, column: 30, scope: !6968)
!6972 = !DILocation(line: 646, column: 8, scope: !6968)
!6973 = !DILocation(line: 646, column: 14, scope: !6968)
!6974 = !DILocation(line: 646, column: 28, scope: !6968)
!6975 = !DILocation(line: 647, column: 4, scope: !6959)
!6976 = !DILocation(line: 640, column: 47, scope: !6952)
!6977 = !DILocation(line: 640, column: 53, scope: !6952)
!6978 = !DILocation(line: 640, column: 45, scope: !6952)
!6979 = !DILocation(line: 640, column: 7, scope: !6952)
!6980 = distinct !{!6980, !6953, !6981}
!6981 = !DILocation(line: 647, column: 4, scope: !6946)
!6982 = !DILocation(line: 648, column: 7, scope: !6947)
!6983 = !DILocation(line: 651, column: 15, scope: !6984)
!6984 = distinct !DILexicalBlock(scope: !6895, file: !3, line: 651, column: 3)
!6985 = !DILocation(line: 651, column: 21, scope: !6984)
!6986 = !DILocation(line: 651, column: 13, scope: !6984)
!6987 = !DILocation(line: 651, column: 8, scope: !6984)
!6988 = !DILocation(line: 651, column: 30, scope: !6989)
!6989 = distinct !DILexicalBlock(scope: !6984, file: !3, line: 651, column: 3)
!6990 = !DILocation(line: 651, column: 3, scope: !6984)
!6991 = !DILocation(line: 652, column: 9, scope: !6992)
!6992 = distinct !DILexicalBlock(scope: !6989, file: !3, line: 652, column: 9)
!6993 = !DILocation(line: 652, column: 15, scope: !6992)
!6994 = !DILocation(line: 652, column: 9, scope: !6989)
!6995 = !DILocalVariable(name: "badness", scope: !6996, file: !3, line: 654, type: !1064)
!6996 = distinct !DILexicalBlock(scope: !6992, file: !3, line: 653, column: 7)
!6997 = !DILocation(line: 654, column: 6, scope: !6996)
!6998 = !DILocation(line: 654, column: 37, scope: !6996)
!6999 = !DILocation(line: 654, column: 16, scope: !6996)
!7000 = !DILocation(line: 655, column: 6, scope: !7001)
!7001 = distinct !DILexicalBlock(scope: !6996, file: !3, line: 655, column: 6)
!7002 = !DILocation(line: 655, column: 12, scope: !7001)
!7003 = !DILocation(line: 655, column: 6, scope: !6996)
!7004 = !DILocalVariable(name: "n", scope: !7005, file: !3, line: 657, type: !2709)
!7005 = distinct !DILexicalBlock(scope: !7001, file: !3, line: 656, column: 4)
!7006 = !DILocation(line: 657, column: 16, scope: !7005)
!7007 = !DILocation(line: 657, column: 32, scope: !7005)
!7008 = !DILocation(line: 657, column: 38, scope: !7005)
!7009 = !DILocation(line: 657, column: 20, scope: !7005)
!7010 = !DILocation(line: 658, column: 6, scope: !7005)
!7011 = !DILocation(line: 659, column: 10, scope: !7012)
!7012 = distinct !DILexicalBlock(scope: !7005, file: !3, line: 659, column: 10)
!7013 = !DILocation(line: 659, column: 13, scope: !7012)
!7014 = !DILocation(line: 659, column: 20, scope: !7012)
!7015 = !DILocation(line: 659, column: 17, scope: !7012)
!7016 = !DILocation(line: 659, column: 10, scope: !7005)
!7017 = !DILocation(line: 660, column: 8, scope: !7012)
!7018 = !DILocation(line: 663, column: 31, scope: !7019)
!7019 = distinct !DILexicalBlock(scope: !7005, file: !3, line: 663, column: 10)
!7020 = !DILocation(line: 663, column: 37, scope: !7019)
!7021 = !DILocation(line: 663, column: 40, scope: !7019)
!7022 = !DILocation(line: 663, column: 10, scope: !7019)
!7023 = !DILocation(line: 663, column: 10, scope: !7005)
!7024 = !DILocation(line: 664, column: 8, scope: !7019)
!7025 = !DILocation(line: 665, column: 27, scope: !7005)
!7026 = !DILocation(line: 665, column: 45, scope: !7005)
!7027 = !DILocation(line: 665, column: 51, scope: !7005)
!7028 = !DILocation(line: 665, column: 33, scope: !7005)
!7029 = !DILocation(line: 665, column: 6, scope: !7005)
!7030 = !DILocation(line: 666, column: 4, scope: !7005)
!7031 = !DILocation(line: 667, column: 30, scope: !6996)
!7032 = !DILocation(line: 667, column: 36, scope: !6996)
!7033 = !DILocation(line: 667, column: 45, scope: !6996)
!7034 = !DILocation(line: 667, column: 14, scope: !6996)
!7035 = !DILocation(line: 667, column: 2, scope: !6996)
!7036 = !DILocation(line: 667, column: 8, scope: !6996)
!7037 = !DILocation(line: 667, column: 12, scope: !6996)
!7038 = !DILocation(line: 668, column: 7, scope: !6996)
!7039 = !DILocation(line: 651, column: 43, scope: !6989)
!7040 = !DILocation(line: 651, column: 49, scope: !6989)
!7041 = !DILocation(line: 651, column: 41, scope: !6989)
!7042 = !DILocation(line: 651, column: 3, scope: !6989)
!7043 = distinct !{!7043, !6990, !7044}
!7044 = !DILocation(line: 668, column: 7, scope: !6984)
!7045 = !DILocation(line: 669, column: 1, scope: !6895)
!7046 = distinct !DISubprogram(name: "VEC_cgraph_edge_p_heap_free", scope: !568, file: !568, line: 353, type: !7047, scopeLine: 353, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2865)
!7047 = !DISubroutineType(types: !7048)
!7048 = !{null, !5184}
!7049 = !DILocalVariable(name: "vec_", arg: 1, scope: !7046, file: !568, line: 353, type: !5184)
!7050 = !DILocation(line: 353, column: 1, scope: !7046)
!7051 = !DILocation(line: 353, column: 1, scope: !7052)
!7052 = distinct !DILexicalBlock(scope: !7046, file: !568, line: 353, column: 1)
!7053 = distinct !DISubprogram(name: "gimple_location", scope: !757, file: !757, line: 1139, type: !7054, scopeLine: 1140, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2865)
!7054 = !DISubroutineType(types: !7055)
!7055 = !{!1149, !2694}
!7056 = !DILocalVariable(name: "g", arg: 1, scope: !7053, file: !757, line: 1139, type: !2694)
!7057 = !DILocation(line: 1139, column: 31, scope: !7053)
!7058 = !DILocation(line: 1141, column: 10, scope: !7053)
!7059 = !DILocation(line: 1141, column: 13, scope: !7053)
!7060 = !DILocation(line: 1141, column: 20, scope: !7053)
!7061 = !DILocation(line: 1141, column: 3, scope: !7053)
!7062 = !DILocalVariable(name: "node", arg: 1, scope: !2855, file: !3, line: 691, type: !2465)
!7063 = !DILocation(line: 691, column: 45, scope: !2855)
!7064 = !DILocalVariable(name: "where", arg: 2, scope: !2855, file: !3, line: 691, type: !2465)
!7065 = !DILocation(line: 691, column: 71, scope: !2855)
!7066 = !DILocalVariable(name: "heap", arg: 3, scope: !2855, file: !3, line: 692, type: !2858)
!7067 = !DILocation(line: 692, column: 14, scope: !2855)
!7068 = !DILocalVariable(name: "e", scope: !2855, file: !3, line: 695, type: !2470)
!7069 = !DILocation(line: 695, column: 23, scope: !2855)
!7070 = !DILocation(line: 696, column: 12, scope: !7071)
!7071 = distinct !DILexicalBlock(scope: !2855, file: !3, line: 696, column: 3)
!7072 = !DILocation(line: 696, column: 19, scope: !7071)
!7073 = !DILocation(line: 696, column: 10, scope: !7071)
!7074 = !DILocation(line: 696, column: 8, scope: !7071)
!7075 = !DILocation(line: 696, column: 28, scope: !7076)
!7076 = distinct !DILexicalBlock(scope: !7071, file: !3, line: 696, column: 3)
!7077 = !DILocation(line: 696, column: 3, scope: !7071)
!7078 = !DILocation(line: 697, column: 9, scope: !7079)
!7079 = distinct !DILexicalBlock(scope: !7076, file: !3, line: 697, column: 9)
!7080 = !DILocation(line: 697, column: 12, scope: !7079)
!7081 = !DILocation(line: 697, column: 22, scope: !7079)
!7082 = !DILocation(line: 697, column: 19, scope: !7079)
!7083 = !DILocation(line: 697, column: 9, scope: !7076)
!7084 = !DILocation(line: 702, column: 25, scope: !7085)
!7085 = distinct !DILexicalBlock(scope: !7079, file: !3, line: 698, column: 7)
!7086 = !DILocation(line: 703, column: 5, scope: !7085)
!7087 = !DILocation(line: 703, column: 4, scope: !7085)
!7088 = !DILocation(line: 703, column: 25, scope: !7085)
!7089 = !DILocation(line: 703, column: 17, scope: !7085)
!7090 = !DILocation(line: 704, column: 15, scope: !7085)
!7091 = !DILocation(line: 704, column: 18, scope: !7085)
!7092 = !DILocation(line: 704, column: 28, scope: !7085)
!7093 = !DILocation(line: 704, column: 38, scope: !7085)
!7094 = !DILocation(line: 704, column: 48, scope: !7085)
!7095 = !DILocation(line: 704, column: 53, scope: !7085)
!7096 = !DILocation(line: 704, column: 24, scope: !7085)
!7097 = !DILocation(line: 704, column: 13, scope: !7085)
!7098 = !DILocation(line: 705, column: 11, scope: !7085)
!7099 = !DILocation(line: 702, column: 9, scope: !7085)
!7100 = !DILocation(line: 706, column: 7, scope: !7085)
!7101 = !DILocation(line: 696, column: 35, scope: !7076)
!7102 = !DILocation(line: 696, column: 38, scope: !7076)
!7103 = !DILocation(line: 696, column: 33, scope: !7076)
!7104 = !DILocation(line: 696, column: 3, scope: !7076)
!7105 = distinct !{!7105, !7077, !7106}
!7106 = !DILocation(line: 706, column: 7, scope: !7071)
!7107 = !DILocation(line: 707, column: 12, scope: !7108)
!7108 = distinct !DILexicalBlock(scope: !2855, file: !3, line: 707, column: 3)
!7109 = !DILocation(line: 707, column: 19, scope: !7108)
!7110 = !DILocation(line: 707, column: 10, scope: !7108)
!7111 = !DILocation(line: 707, column: 8, scope: !7108)
!7112 = !DILocation(line: 707, column: 28, scope: !7113)
!7113 = distinct !DILexicalBlock(scope: !7108, file: !3, line: 707, column: 3)
!7114 = !DILocation(line: 707, column: 3, scope: !7108)
!7115 = !DILocation(line: 708, column: 10, scope: !7116)
!7116 = distinct !DILexicalBlock(scope: !7113, file: !3, line: 708, column: 9)
!7117 = !DILocation(line: 708, column: 13, scope: !7116)
!7118 = !DILocation(line: 708, column: 9, scope: !7113)
!7119 = !DILocation(line: 709, column: 31, scope: !7116)
!7120 = !DILocation(line: 709, column: 37, scope: !7116)
!7121 = !DILocation(line: 709, column: 40, scope: !7116)
!7122 = !DILocation(line: 709, column: 48, scope: !7116)
!7123 = !DILocation(line: 709, column: 7, scope: !7116)
!7124 = !DILocation(line: 707, column: 35, scope: !7113)
!7125 = !DILocation(line: 707, column: 38, scope: !7113)
!7126 = !DILocation(line: 707, column: 33, scope: !7113)
!7127 = !DILocation(line: 707, column: 3, scope: !7113)
!7128 = distinct !{!7128, !7114, !7129}
!7129 = !DILocation(line: 709, column: 52, scope: !7108)
!7130 = !DILocation(line: 710, column: 1, scope: !2855)
!7131 = distinct !DISubprogram(name: "VEC_cgraph_edge_p_base_length", scope: !568, file: !568, line: 352, type: !7132, scopeLine: 352, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2865)
!7132 = !DISubroutineType(types: !7133)
!7133 = !{!7, !7134}
!7134 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7135, size: 64)
!7135 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2701)
!7136 = !DILocalVariable(name: "vec_", arg: 1, scope: !7131, file: !568, line: 352, type: !7134)
!7137 = !DILocation(line: 352, column: 1, scope: !7131)
!7138 = distinct !DISubprogram(name: "VEC_cgraph_edge_p_base_pop", scope: !568, file: !568, line: 352, type: !7139, scopeLine: 352, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2865)
!7139 = !DISubroutineType(types: !7140)
!7140 = !{!2708, !7141}
!7141 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2701, size: 64)
!7142 = !DILocalVariable(name: "vec_", arg: 1, scope: !7138, file: !568, line: 352, type: !7141)
!7143 = !DILocation(line: 352, column: 1, scope: !7138)
!7144 = !DILocalVariable(name: "obj_", scope: !7138, file: !568, line: 352, type: !2708)
!7145 = distinct !DISubprogram(name: "add_new_function", scope: !3, file: !3, line: 1960, type: !7146, scopeLine: 1961, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2865)
!7146 = !DISubroutineType(types: !7147)
!7147 = !{null, !2465, !1068}
!7148 = !DILocalVariable(name: "node", arg: 1, scope: !7145, file: !3, line: 1960, type: !2465)
!7149 = !DILocation(line: 1960, column: 39, scope: !7145)
!7150 = !DILocalVariable(name: "data", arg: 2, scope: !7145, file: !3, line: 1960, type: !1068)
!7151 = !DILocation(line: 1960, column: 51, scope: !7145)
!7152 = !DILocation(line: 1962, column: 21, scope: !7145)
!7153 = !DILocation(line: 1962, column: 3, scope: !7145)
!7154 = !DILocation(line: 1963, column: 1, scope: !7145)
!7155 = distinct !DISubprogram(name: "ipa_check_create_node_params", scope: !828, file: !828, line: 349, type: !2550, scopeLine: 350, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2865)
!7156 = !DILocation(line: 351, column: 8, scope: !7157)
!7157 = distinct !DILexicalBlock(scope: !7155, file: !828, line: 351, column: 7)
!7158 = !DILocation(line: 351, column: 7, scope: !7155)
!7159 = !DILocation(line: 352, column: 30, scope: !7157)
!7160 = !DILocation(line: 352, column: 28, scope: !7157)
!7161 = !DILocation(line: 352, column: 5, scope: !7157)
!7162 = !DILocation(line: 355, column: 7, scope: !7163)
!7163 = distinct !DILexicalBlock(scope: !7155, file: !828, line: 355, column: 7)
!7164 = !DILocation(line: 356, column: 21, scope: !7163)
!7165 = !DILocation(line: 356, column: 7, scope: !7163)
!7166 = !DILocation(line: 355, column: 7, scope: !7155)
!7167 = !DILocation(line: 357, column: 5, scope: !7163)
!7168 = !DILocation(line: 359, column: 1, scope: !7155)
!7169 = distinct !DISubprogram(name: "ipa_check_create_edge_args", scope: !828, file: !828, line: 365, type: !2550, scopeLine: 366, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2865)
!7170 = !DILocation(line: 367, column: 8, scope: !7171)
!7171 = distinct !DILexicalBlock(scope: !7169, file: !828, line: 367, column: 7)
!7172 = !DILocation(line: 367, column: 7, scope: !7169)
!7173 = !DILocation(line: 368, column: 28, scope: !7171)
!7174 = !DILocation(line: 368, column: 26, scope: !7171)
!7175 = !DILocation(line: 368, column: 5, scope: !7171)
!7176 = !DILocation(line: 371, column: 7, scope: !7177)
!7177 = distinct !DILexicalBlock(scope: !7169, file: !828, line: 371, column: 7)
!7178 = !DILocation(line: 372, column: 22, scope: !7177)
!7179 = !DILocation(line: 372, column: 7, scope: !7177)
!7180 = !DILocation(line: 371, column: 7, scope: !7169)
!7181 = !DILocation(line: 373, column: 5, scope: !7177)
!7182 = !DILocation(line: 375, column: 1, scope: !7169)
!7183 = distinct !DISubprogram(name: "analyze_function", scope: !3, file: !3, line: 1945, type: !2578, scopeLine: 1946, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2865)
!7184 = !DILocalVariable(name: "node", arg: 1, scope: !7183, file: !3, line: 1945, type: !2465)
!7185 = !DILocation(line: 1945, column: 39, scope: !7183)
!7186 = !DILocation(line: 1947, column: 14, scope: !7183)
!7187 = !DILocation(line: 1947, column: 3, scope: !7183)
!7188 = !DILocation(line: 1948, column: 27, scope: !7183)
!7189 = !DILocation(line: 1948, column: 33, scope: !7183)
!7190 = !DILocation(line: 1948, column: 25, scope: !7183)
!7191 = !DILocation(line: 1950, column: 30, scope: !7183)
!7192 = !DILocation(line: 1950, column: 3, scope: !7183)
!7193 = !DILocation(line: 1951, column: 7, scope: !7194)
!7194 = distinct !DILexicalBlock(scope: !7183, file: !3, line: 1951, column: 7)
!7195 = !DILocation(line: 1951, column: 7, scope: !7183)
!7196 = !DILocation(line: 1952, column: 47, scope: !7194)
!7197 = !DILocation(line: 1952, column: 5, scope: !7194)
!7198 = !DILocation(line: 1954, column: 25, scope: !7183)
!7199 = !DILocation(line: 1955, column: 3, scope: !7183)
!7200 = !DILocation(line: 1956, column: 1, scope: !7183)
!7201 = distinct !DISubprogram(name: "VEC_ipa_node_params_t_heap_alloc", scope: !828, file: !828, line: 315, type: !7202, scopeLine: 315, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2865)
!7202 = !DISubroutineType(types: !7203)
!7203 = !{!2723, !1064}
!7204 = !DILocalVariable(name: "alloc_", arg: 1, scope: !7201, file: !828, line: 315, type: !1064)
!7205 = !DILocation(line: 315, column: 1, scope: !7201)
!7206 = distinct !DISubprogram(name: "VEC_ipa_node_params_t_base_length", scope: !828, file: !828, line: 314, type: !7207, scopeLine: 314, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2865)
!7207 = !DISubroutineType(types: !7208)
!7208 = !{!7, !7209}
!7209 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7210, size: 64)
!7210 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2728)
!7211 = !DILocalVariable(name: "vec_", arg: 1, scope: !7206, file: !828, line: 314, type: !7209)
!7212 = !DILocation(line: 314, column: 1, scope: !7206)
!7213 = distinct !DISubprogram(name: "VEC_ipa_node_params_t_heap_safe_grow_cleared", scope: !828, file: !828, line: 315, type: !7214, scopeLine: 315, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2865)
!7214 = !DISubroutineType(types: !7215)
!7215 = !{null, !7216, !1064}
!7216 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2723, size: 64)
!7217 = !DILocalVariable(name: "vec_", arg: 1, scope: !7213, file: !828, line: 315, type: !7216)
!7218 = !DILocation(line: 315, column: 1, scope: !7213)
!7219 = !DILocalVariable(name: "size_", arg: 2, scope: !7213, file: !828, line: 315, type: !1064)
!7220 = !DILocalVariable(name: "oldsize", scope: !7213, file: !828, line: 315, type: !1064)
!7221 = distinct !DISubprogram(name: "VEC_ipa_node_params_t_heap_safe_grow", scope: !828, file: !828, line: 315, type: !7214, scopeLine: 315, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2865)
!7222 = !DILocalVariable(name: "vec_", arg: 1, scope: !7221, file: !828, line: 315, type: !7216)
!7223 = !DILocation(line: 315, column: 1, scope: !7221)
!7224 = !DILocalVariable(name: "size_", arg: 2, scope: !7221, file: !828, line: 315, type: !1064)
!7225 = !DILocation(line: 0, scope: !7221)
!7226 = distinct !DISubprogram(name: "VEC_ipa_node_params_t_base_address", scope: !828, file: !828, line: 314, type: !7227, scopeLine: 314, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2865)
!7227 = !DISubroutineType(types: !7228)
!7228 = !{!7229, !7230}
!7229 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2735, size: 64)
!7230 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2728, size: 64)
!7231 = !DILocalVariable(name: "vec_", arg: 1, scope: !7226, file: !828, line: 314, type: !7230)
!7232 = !DILocation(line: 314, column: 1, scope: !7226)
!7233 = distinct !DISubprogram(name: "VEC_ipa_node_params_t_heap_reserve_exact", scope: !828, file: !828, line: 315, type: !7234, scopeLine: 315, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2865)
!7234 = !DISubroutineType(types: !7235)
!7235 = !{!1064, !7216, !1064}
!7236 = !DILocalVariable(name: "vec_", arg: 1, scope: !7233, file: !828, line: 315, type: !7216)
!7237 = !DILocation(line: 315, column: 1, scope: !7233)
!7238 = !DILocalVariable(name: "alloc_", arg: 2, scope: !7233, file: !828, line: 315, type: !1064)
!7239 = !DILocalVariable(name: "extend", scope: !7233, file: !828, line: 315, type: !1064)
!7240 = !DILocation(line: 315, column: 1, scope: !7241)
!7241 = distinct !DILexicalBlock(scope: !7233, file: !828, line: 315, column: 1)
!7242 = distinct !DISubprogram(name: "VEC_ipa_node_params_t_base_space", scope: !828, file: !828, line: 314, type: !7243, scopeLine: 314, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2865)
!7243 = !DISubroutineType(types: !7244)
!7244 = !{!1064, !7230, !1064}
!7245 = !DILocalVariable(name: "vec_", arg: 1, scope: !7242, file: !828, line: 314, type: !7230)
!7246 = !DILocation(line: 314, column: 1, scope: !7242)
!7247 = !DILocalVariable(name: "alloc_", arg: 2, scope: !7242, file: !828, line: 314, type: !1064)
!7248 = distinct !DISubprogram(name: "VEC_ipa_edge_args_t_gc_alloc", scope: !828, file: !828, line: 317, type: !7249, scopeLine: 317, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2865)
!7249 = !DISubroutineType(types: !7250)
!7250 = !{!2768, !1064}
!7251 = !DILocalVariable(name: "alloc_", arg: 1, scope: !7248, file: !828, line: 317, type: !1064)
!7252 = !DILocation(line: 317, column: 1, scope: !7248)
!7253 = distinct !DISubprogram(name: "VEC_ipa_edge_args_t_base_length", scope: !828, file: !828, line: 316, type: !7254, scopeLine: 316, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2865)
!7254 = !DISubroutineType(types: !7255)
!7255 = !{!7, !7256}
!7256 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7257, size: 64)
!7257 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2773)
!7258 = !DILocalVariable(name: "vec_", arg: 1, scope: !7253, file: !828, line: 316, type: !7256)
!7259 = !DILocation(line: 316, column: 1, scope: !7253)
!7260 = distinct !DISubprogram(name: "VEC_ipa_edge_args_t_gc_safe_grow_cleared", scope: !828, file: !828, line: 317, type: !7261, scopeLine: 317, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2865)
!7261 = !DISubroutineType(types: !7262)
!7262 = !{null, !7263, !1064}
!7263 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2768, size: 64)
!7264 = !DILocalVariable(name: "vec_", arg: 1, scope: !7260, file: !828, line: 317, type: !7263)
!7265 = !DILocation(line: 317, column: 1, scope: !7260)
!7266 = !DILocalVariable(name: "size_", arg: 2, scope: !7260, file: !828, line: 317, type: !1064)
!7267 = !DILocalVariable(name: "oldsize", scope: !7260, file: !828, line: 317, type: !1064)
!7268 = distinct !DISubprogram(name: "VEC_ipa_edge_args_t_gc_safe_grow", scope: !828, file: !828, line: 317, type: !7261, scopeLine: 317, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2865)
!7269 = !DILocalVariable(name: "vec_", arg: 1, scope: !7268, file: !828, line: 317, type: !7263)
!7270 = !DILocation(line: 317, column: 1, scope: !7268)
!7271 = !DILocalVariable(name: "size_", arg: 2, scope: !7268, file: !828, line: 317, type: !1064)
!7272 = !DILocation(line: 0, scope: !7268)
!7273 = distinct !DISubprogram(name: "VEC_ipa_edge_args_t_base_address", scope: !828, file: !828, line: 316, type: !7274, scopeLine: 316, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2865)
!7274 = !DISubroutineType(types: !7275)
!7275 = !{!7276, !7277}
!7276 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2780, size: 64)
!7277 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2773, size: 64)
!7278 = !DILocalVariable(name: "vec_", arg: 1, scope: !7273, file: !828, line: 316, type: !7277)
!7279 = !DILocation(line: 316, column: 1, scope: !7273)
!7280 = distinct !DISubprogram(name: "VEC_ipa_edge_args_t_gc_reserve_exact", scope: !828, file: !828, line: 317, type: !7281, scopeLine: 317, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2865)
!7281 = !DISubroutineType(types: !7282)
!7282 = !{!1064, !7263, !1064}
!7283 = !DILocalVariable(name: "vec_", arg: 1, scope: !7280, file: !828, line: 317, type: !7263)
!7284 = !DILocation(line: 317, column: 1, scope: !7280)
!7285 = !DILocalVariable(name: "alloc_", arg: 2, scope: !7280, file: !828, line: 317, type: !1064)
!7286 = !DILocalVariable(name: "extend", scope: !7280, file: !828, line: 317, type: !1064)
!7287 = !DILocation(line: 317, column: 1, scope: !7288)
!7288 = distinct !DILexicalBlock(scope: !7280, file: !828, line: 317, column: 1)
!7289 = distinct !DISubprogram(name: "VEC_ipa_edge_args_t_base_space", scope: !828, file: !828, line: 316, type: !7290, scopeLine: 316, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2865)
!7290 = !DISubroutineType(types: !7291)
!7291 = !{!1064, !7277, !1064}
!7292 = !DILocalVariable(name: "vec_", arg: 1, scope: !7289, file: !828, line: 316, type: !7277)
!7293 = !DILocation(line: 316, column: 1, scope: !7289)
!7294 = !DILocalVariable(name: "alloc_", arg: 2, scope: !7289, file: !828, line: 316, type: !1064)
!7295 = distinct !DISubprogram(name: "inline_indirect_intraprocedural_analysis", scope: !3, file: !3, line: 1918, type: !2578, scopeLine: 1919, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2865)
!7296 = !DILocalVariable(name: "node", arg: 1, scope: !7295, file: !3, line: 1918, type: !2465)
!7297 = !DILocation(line: 1918, column: 63, scope: !7295)
!7298 = !DILocalVariable(name: "cs", scope: !7295, file: !3, line: 1920, type: !2470)
!7299 = !DILocation(line: 1920, column: 23, scope: !7295)
!7300 = !DILocation(line: 1922, column: 8, scope: !7301)
!7301 = distinct !DILexicalBlock(scope: !7295, file: !3, line: 1922, column: 7)
!7302 = !DILocation(line: 1922, column: 7, scope: !7295)
!7303 = !DILocation(line: 1924, column: 35, scope: !7304)
!7304 = distinct !DILexicalBlock(scope: !7301, file: !3, line: 1923, column: 5)
!7305 = !DILocation(line: 1924, column: 7, scope: !7304)
!7306 = !DILocation(line: 1925, column: 39, scope: !7304)
!7307 = !DILocation(line: 1925, column: 7, scope: !7304)
!7308 = !DILocation(line: 1926, column: 5, scope: !7304)
!7309 = !DILocation(line: 1927, column: 28, scope: !7295)
!7310 = !DILocation(line: 1927, column: 3, scope: !7295)
!7311 = !DILocation(line: 1929, column: 8, scope: !7312)
!7312 = distinct !DILexicalBlock(scope: !7295, file: !3, line: 1929, column: 7)
!7313 = !DILocation(line: 1929, column: 7, scope: !7295)
!7314 = !DILocation(line: 1930, column: 15, scope: !7315)
!7315 = distinct !DILexicalBlock(scope: !7312, file: !3, line: 1930, column: 5)
!7316 = !DILocation(line: 1930, column: 21, scope: !7315)
!7317 = !DILocation(line: 1930, column: 13, scope: !7315)
!7318 = !DILocation(line: 1930, column: 10, scope: !7315)
!7319 = !DILocation(line: 1930, column: 30, scope: !7320)
!7320 = distinct !DILexicalBlock(scope: !7315, file: !3, line: 1930, column: 5)
!7321 = !DILocation(line: 1930, column: 5, scope: !7315)
!7322 = !DILocation(line: 1932, column: 23, scope: !7323)
!7323 = distinct !DILexicalBlock(scope: !7320, file: !3, line: 1931, column: 7)
!7324 = !DILocation(line: 1932, column: 2, scope: !7323)
!7325 = !DILocation(line: 1933, column: 30, scope: !7323)
!7326 = !DILocation(line: 1933, column: 2, scope: !7323)
!7327 = !DILocation(line: 1934, column: 7, scope: !7323)
!7328 = !DILocation(line: 1930, column: 39, scope: !7320)
!7329 = !DILocation(line: 1930, column: 43, scope: !7320)
!7330 = !DILocation(line: 1930, column: 37, scope: !7320)
!7331 = !DILocation(line: 1930, column: 5, scope: !7320)
!7332 = distinct !{!7332, !7321, !7333}
!7333 = !DILocation(line: 1934, column: 7, scope: !7315)
!7334 = !DILocation(line: 1936, column: 7, scope: !7335)
!7335 = distinct !DILexicalBlock(scope: !7295, file: !3, line: 1936, column: 7)
!7336 = !DILocation(line: 1936, column: 7, scope: !7295)
!7337 = !DILocation(line: 1938, column: 30, scope: !7338)
!7338 = distinct !DILexicalBlock(scope: !7335, file: !3, line: 1937, column: 5)
!7339 = !DILocation(line: 1938, column: 41, scope: !7338)
!7340 = !DILocation(line: 1938, column: 7, scope: !7338)
!7341 = !DILocation(line: 1939, column: 38, scope: !7338)
!7342 = !DILocation(line: 1939, column: 49, scope: !7338)
!7343 = !DILocation(line: 1939, column: 7, scope: !7338)
!7344 = !DILocation(line: 1940, column: 5, scope: !7338)
!7345 = !DILocation(line: 1941, column: 1, scope: !7295)
!7346 = distinct !DISubprogram(name: "gt_pch_pa_order", scope: !2827, file: !2827, line: 39, type: !7347, scopeLine: 43, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2865)
!7347 = !DISubroutineType(types: !7348)
!7348 = !{null, !1068, !1068, !7349, !1068}
!7349 = !DIDerivedType(tag: DW_TAG_typedef, name: "gt_pointer_operator", file: !2831, line: 38, baseType: !1635)
!7350 = !DILocalVariable(name: "this_obj", arg: 1, scope: !7346, file: !2827, line: 39, type: !1068)
!7351 = !DILocation(line: 39, column: 53, scope: !7346)
!7352 = !DILocalVariable(name: "x_p", arg: 2, scope: !7346, file: !2827, line: 40, type: !1068)
!7353 = !DILocation(line: 40, column: 30, scope: !7346)
!7354 = !DILocalVariable(name: "op", arg: 3, scope: !7346, file: !2827, line: 41, type: !7349)
!7355 = !DILocation(line: 41, column: 44, scope: !7346)
!7356 = !DILocalVariable(name: "cookie", arg: 4, scope: !7346, file: !2827, line: 42, type: !1068)
!7357 = !DILocation(line: 42, column: 31, scope: !7346)
!7358 = !DILocation(line: 44, column: 7, scope: !7359)
!7359 = distinct !DILexicalBlock(scope: !7346, file: !2827, line: 44, column: 7)
!7360 = !DILocation(line: 44, column: 13, scope: !7359)
!7361 = !DILocation(line: 44, column: 7, scope: !7346)
!7362 = !DILocalVariable(name: "i0", scope: !7363, file: !2827, line: 45, type: !1065)
!7363 = distinct !DILexicalBlock(scope: !7359, file: !2827, line: 44, column: 22)
!7364 = !DILocation(line: 45, column: 12, scope: !7363)
!7365 = !DILocation(line: 46, column: 13, scope: !7366)
!7366 = distinct !DILexicalBlock(scope: !7363, file: !2827, line: 46, column: 5)
!7367 = !DILocation(line: 46, column: 10, scope: !7366)
!7368 = !DILocation(line: 46, column: 18, scope: !7369)
!7369 = distinct !DILexicalBlock(scope: !7366, file: !2827, line: 46, column: 5)
!7370 = !DILocation(line: 46, column: 33, scope: !7369)
!7371 = !DILocation(line: 46, column: 24, scope: !7369)
!7372 = !DILocation(line: 46, column: 21, scope: !7369)
!7373 = !DILocation(line: 46, column: 5, scope: !7366)
!7374 = !DILocation(line: 47, column: 20, scope: !7375)
!7375 = distinct !DILexicalBlock(scope: !7376, file: !2827, line: 47, column: 11)
!7376 = distinct !DILexicalBlock(scope: !7369, file: !2827, line: 46, column: 48)
!7377 = !DILocation(line: 47, column: 11, scope: !7375)
!7378 = !DILocation(line: 47, column: 30, scope: !7375)
!7379 = !DILocation(line: 47, column: 27, scope: !7375)
!7380 = !DILocation(line: 47, column: 11, scope: !7376)
!7381 = !DILocation(line: 48, column: 9, scope: !7375)
!7382 = !DILocation(line: 48, column: 15, scope: !7375)
!7383 = !DILocation(line: 48, column: 21, scope: !7375)
!7384 = !DILocation(line: 48, column: 13, scope: !7375)
!7385 = !DILocation(line: 48, column: 27, scope: !7375)
!7386 = !DILocation(line: 49, column: 5, scope: !7376)
!7387 = !DILocation(line: 46, column: 44, scope: !7369)
!7388 = !DILocation(line: 46, column: 5, scope: !7369)
!7389 = distinct !{!7389, !7373, !7390}
!7390 = !DILocation(line: 49, column: 5, scope: !7366)
!7391 = !DILocation(line: 50, column: 29, scope: !7392)
!7392 = distinct !DILexicalBlock(scope: !7363, file: !2827, line: 50, column: 9)
!7393 = !DILocation(line: 50, column: 26, scope: !7392)
!7394 = !DILocation(line: 50, column: 9, scope: !7363)
!7395 = !DILocation(line: 51, column: 7, scope: !7392)
!7396 = !DILocation(line: 51, column: 21, scope: !7392)
!7397 = !DILocation(line: 52, column: 3, scope: !7363)
!7398 = !DILocation(line: 53, column: 1, scope: !7346)
