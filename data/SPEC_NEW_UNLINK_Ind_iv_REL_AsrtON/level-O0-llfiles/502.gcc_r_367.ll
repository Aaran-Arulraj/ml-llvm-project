; ModuleID = 'tree-ssa-math-opts.c'
source_filename = "tree-ssa-math-opts.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.gimple_opt_pass = type { %struct.opt_pass }
%struct.opt_pass = type { i32, i8*, i8 ()*, i32 ()*, %struct.opt_pass*, %struct.opt_pass*, i32, i32, i32, i32, i32, i32, i32 }
%struct.function = type { %struct.eh_status*, %struct.control_flow_graph*, %struct.gimple_seq_d*, %struct.gimple_df*, %struct.loops*, %struct.htab*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.machine_function*, %struct.language_function*, %struct.htab*, i32, i32, i32, i32, i32, i32, i8*, i32 }
%struct.eh_status = type opaque
%struct.control_flow_graph = type { %struct.basic_block_def*, %struct.basic_block_def*, %struct.VEC_basic_block_gc*, i32, i32, i32, %struct.VEC_basic_block_gc*, i32, [2 x i32], [2 x i32], i32, i32 }
%struct.basic_block_def = type { %struct.VEC_edge_gc*, %struct.VEC_edge_gc*, i8*, %struct.loop*, [2 x %struct.et_node*], %struct.basic_block_def*, %struct.basic_block_def*, %union.basic_block_il_dependent, i64, i32, i32, i32, i32, i32 }
%struct.VEC_edge_gc = type { %struct.VEC_edge_base }
%struct.VEC_edge_base = type { i32, i32, [1 x %struct.edge_def*] }
%struct.edge_def = type { %struct.basic_block_def*, %struct.basic_block_def*, %union.edge_def_insns, i8*, %union.tree_node*, i32, i32, i32, i32, i64 }
%union.edge_def_insns = type { %struct.gimple_seq_d* }
%struct.loop = type opaque
%struct.et_node = type opaque
%union.basic_block_il_dependent = type { %struct.gimple_bb_info* }
%struct.gimple_bb_info = type { %struct.gimple_seq_d*, %struct.gimple_seq_d* }
%struct.VEC_basic_block_gc = type { %struct.VEC_basic_block_base }
%struct.VEC_basic_block_base = type { i32, i32, [1 x %struct.basic_block_def*] }
%struct.gimple_seq_d = type { %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d*, %struct.gimple_seq_d* }
%struct.gimple_seq_node_d = type { %union.gimple_statement_d*, %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d* }
%union.gimple_statement_d = type { %struct.gimple_statement_phi }
%struct.gimple_statement_phi = type { %struct.gimple_statement_base, i32, i32, %union.tree_node*, [1 x %struct.phi_arg_d] }
%struct.gimple_statement_base = type { i32, i32, i32, i32, %struct.basic_block_def*, %union.tree_node* }
%struct.phi_arg_d = type { %struct.ssa_use_operand_d, %union.tree_node*, i32 }
%struct.ssa_use_operand_d = type { %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d*, %union.anon, %union.tree_node** }
%union.anon = type { %union.gimple_statement_d* }
%struct.gimple_df = type { %struct.htab*, %struct.VEC_gimple_gc*, %struct.VEC_tree_gc*, %union.tree_node*, %struct.pt_solution, %struct.pt_solution, %struct.pointer_map_t*, %union.tree_node*, %struct.htab*, %struct.bitmap_head_def*, i8, %struct.ssa_operands }
%struct.VEC_gimple_gc = type { %struct.VEC_gimple_base }
%struct.VEC_gimple_base = type { i32, i32, [1 x %union.gimple_statement_d*] }
%struct.VEC_tree_gc = type { %struct.VEC_tree_base }
%struct.VEC_tree_base = type { i32, i32, [1 x %union.tree_node*] }
%struct.pt_solution = type { i8, %struct.bitmap_head_def* }
%struct.pointer_map_t = type opaque
%struct.bitmap_head_def = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32, %struct.bitmap_obstack* }
%struct.bitmap_element_def = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32, [2 x i64] }
%struct.bitmap_obstack = type { %struct.bitmap_element_def*, %struct.bitmap_head_def*, %struct.obstack }
%struct.obstack = type { i64, %struct._obstack_chunk*, i8*, i8*, i8*, i64, i32, %struct._obstack_chunk* (i8*, i64)*, void (i8*, %struct._obstack_chunk*)*, i8*, i8 }
%struct._obstack_chunk = type { i8*, %struct._obstack_chunk*, [4 x i8] }
%struct.ssa_operands = type { %struct.ssa_operand_memory_d*, i32, i32, i8, %struct.def_optype_d*, %struct.use_optype_d* }
%struct.ssa_operand_memory_d = type { %struct.ssa_operand_memory_d*, [1 x i8] }
%struct.def_optype_d = type { %struct.def_optype_d*, %union.tree_node** }
%struct.use_optype_d = type { %struct.use_optype_d*, %struct.ssa_use_operand_d }
%struct.loops = type opaque
%union.tree_node = type { %struct.tree_function_decl }
%struct.tree_function_decl = type { %struct.tree_decl_non_common, %struct.function*, %union.tree_node*, %union.tree_node*, %union.tree_node*, i32 }
%struct.tree_decl_non_common = type { %struct.tree_decl_with_vis, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node* }
%struct.tree_decl_with_vis = type { %struct.tree_decl_with_rtl, %union.tree_node*, %union.tree_node*, %union.tree_node*, i24 }
%struct.tree_decl_with_rtl = type { %struct.tree_decl_common, %struct.rtx_def* }
%struct.tree_decl_common = type { %struct.tree_decl_minimal, %union.tree_node*, i40, i32, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.lang_decl* }
%struct.tree_decl_minimal = type { %struct.tree_common, i32, i32, %union.tree_node*, %union.tree_node* }
%struct.tree_common = type { %struct.tree_base, %union.tree_node*, %union.tree_node* }
%struct.tree_base = type { i64 }
%struct.lang_decl = type opaque
%struct.rtx_def = type { i32, %union.u }
%union.u = type { %struct.block_symbol }
%struct.block_symbol = type { [3 x %union.rtunion_def], %struct.object_block*, i64 }
%union.rtunion_def = type { i8* }
%struct.object_block = type { %union.section*, i32, i64, %struct.VEC_rtx_gc*, %struct.VEC_rtx_gc* }
%union.section = type opaque
%struct.VEC_rtx_gc = type { %struct.VEC_rtx_base }
%struct.VEC_rtx_base = type { i32, i32, [1 x %struct.rtx_def*] }
%struct.machine_function = type { %struct.stack_local_entry*, i8*, i32, i32, [4 x i32], i32, %struct.machine_cfa_state, i32, i8 }
%struct.stack_local_entry = type opaque
%struct.machine_cfa_state = type { %struct.rtx_def*, i64 }
%struct.language_function = type opaque
%struct.htab = type { i32 (i8*)*, i32 (i8*, i8*)*, void (i8*)*, i8**, i64, i64, i64, i32, i32, i8* (i64, i64)*, void (i8*)*, i8*, i8* (i8*, i64, i64)*, void (i8*, i8*)*, i32 }
%struct.alloc_pool_def = type { i8*, i64, %struct.alloc_pool_list_def*, i8*, i64, i64, i64, i64, %struct.alloc_pool_list_def*, i64, i64 }
%struct.alloc_pool_list_def = type { %struct.alloc_pool_list_def* }
%struct.gcc_target = type { %struct.asm_out, %struct.sched, %struct.vectorize, i32, void ()*, i8 (i64, i8*, i32)*, void ()*, i32 ()*, i32 ()*, i32 ()*, i32 ()*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, %struct.attribute_spec*, i32 (%union.tree_node*, %union.tree_node*)*, void (%union.tree_node*)*, void (%union.tree_node*, %union.tree_node**)*, i8 (%union.tree_node*)*, i8 (%union.tree_node*)*, i8 ()*, i8 ()*, i8 ()*, i8 ()*, void ()*, %union.tree_node* (i32, i8)*, %struct.rtx_def* (%union.tree_node*, %struct.rtx_def*, %struct.rtx_def*, i32, i32)*, %union.tree_node* (i32, %union.tree_node*, i8*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, i8)*, %union.tree_node* (i32, i8, i8)*, i8* (%union.tree_node*)*, void ()*, i32 (%union.tree_node*, i8*, i32)*, i8 ()*, i32 ()*, i8 (i8)*, i8 ()*, i8 (%struct.rtx_def*)*, i8 (%struct.rtx_def*)*, i8 (%struct.rtx_def*, i32)*, %struct.rtx_def* (%struct.rtx_def*, %struct.rtx_def*, i32)*, %struct.rtx_def* (%struct.rtx_def*)*, i8 (i32, %struct.rtx_def*, i8)*, i8 (i32, %struct.rtx_def*)*, i64, i64, i8 (%struct.rtx_def*)*, i8 (%union.tree_node*, %union.tree_node*)*, void (%union.tree_node*)*, i8 (%union.tree_node*)*, i8 (%union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, void (%union.tree_node*, %struct.rtx_def*, i32)*, i8* (i8*)*, i64 (i32)*, i32 (i32)*, i32 (i32, i32)*, i8 (i32)*, %struct.addr_space, i8 (i32)*, i8 (i32)*, i8 (%struct.rtx_def*, i32, i32, i32*, i8)*, i32 (%struct.rtx_def*, i8)*, %struct.rtx_def* (%struct.rtx_def*)*, i32 (%struct.rtx_def*, i32)*, %struct.rtx_def* (%struct.rtx_def*)*, void (%union.tree_node*)*, i8 (i32*, i32*)*, i32 (i32, i32)*, void ()*, %union.tree_node* ()*, %union.tree_node* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, void (%union.tree_node*, %struct.rtx_def*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %struct.gimple_seq_d**, %struct.gimple_seq_d**)*, i8* (i64*)*, i8* (i8*, i64)*, i8* (i32)*, i8 ()*, %struct.rtx_def* ()*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, i32 (%union.tree_node*)*, void (i8*, %struct.rtx_def*, i32)*, i8 (%struct.stdarg_info*, %union.gimple_statement_d*)*, %union.tree_node* ()*, %union.tree_node* ()*, i8* (%struct.rtx_def*)*, i8 (%union.tree_node*)*, i64, %struct.calls, i8* (%union.tree_node*, %union.tree_node*)*, i8* (i32, %union.tree_node*)*, i8* (i32, %union.tree_node*, %union.tree_node*)*, i8* (%union.tree_node*)*, i8* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, i32* ()*, i32 (i8, %struct.rtx_def*, i32, i32, %struct.secondary_reload_info*)*, void ()*, void ()*, i8 (i32)*, i32 ()*, i8 ()*, i8 (i32, i32)*, %struct.c, %struct.cxx, %struct.emutls, %struct.target_option_hooks, void (%struct.bitmap_head_def*)*, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.asm_out = type { i8*, i8*, i8*, %struct.asm_int_op, %struct.asm_int_op, i8 (%struct.rtx_def*, i32, i32)*, void (%struct._IO_FILE*, i8*)*, void (%struct._IO_FILE*, %union.tree_node*)*, void (%struct._IO_FILE*, %union.tree_node*, i32, i32)*, void (%struct._IO_FILE*)*, void (%struct._IO_FILE*, %struct.rtx_def*)*, void (%struct._IO_FILE*, i8*, i64)*, i8 (%struct.rtx_def*)*, void (%union.tree_node*, i32)*, void (%struct._IO_FILE*, i64)*, void (%struct._IO_FILE*)*, void (%struct._IO_FILE*)*, void (%struct._IO_FILE*, i64)*, void ()*, void (i8*, i32, %union.tree_node*)*, i32 ()*, %union.section* (%union.tree_node*, i32, i64)*, %union.section* (i32, %struct.rtx_def*, i64)*, void (%union.tree_node*, i32)*, %union.section* (%union.tree_node*)*, void (%struct.rtx_def*, i32)*, void (%struct.rtx_def*, i32)*, void (%struct._IO_FILE*, %union.tree_node*, i64, i64, %union.tree_node*)*, i8 (%union.tree_node*, i64, i64, %union.tree_node*)*, void ()*, void ()*, void ()*, void (%struct.rtx_def*)*, void (i8*)*, i32 (i32, i8*)*, i8*, void (%struct.rtx_def*)*, void (%struct._IO_FILE*, i32, %struct.rtx_def*)*, void (%struct._IO_FILE*, %struct.rtx_def*, %struct.rtx_def**, i32)*, void (%struct._IO_FILE*)* }
%struct.asm_int_op = type { i8*, i8*, i8*, i8* }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%struct.sched = type { i32 (%struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)*, i32 ()*, i32 (%struct._IO_FILE*, i32, %struct.rtx_def*, i32)*, void (%struct._IO_FILE*, i32, i32)*, void (%struct._IO_FILE*, i32)*, void (%struct._IO_FILE*, i32, i32)*, void (%struct._IO_FILE*, i32)*, i32 (%struct._IO_FILE*, i32, %struct.rtx_def**, i32*, i32)*, i32 (%struct._IO_FILE*, i32, %struct.rtx_def**, i32*, i32)*, void (%struct.rtx_def*, %struct.rtx_def*)*, void ()*, %struct.rtx_def* ()*, void ()*, %struct.rtx_def* ()*, void ()*, void ()*, i32 ()*, i32 (%struct.rtx_def*)*, i32 (%struct._IO_FILE*, i32, %struct.rtx_def*, i32, i32, i32*)*, i8 (%struct._dep*, i32, i32)*, i32 (%struct.rtx_def*, i32, %struct.rtx_def*, i32, i32)*, void ()*, i8* ()*, void (i8*, i8)*, void (i8*)*, void (i8*)*, void (i8*)*, i32 (%struct.rtx_def*, i32, %struct.rtx_def**)*, i8 (i32)*, %struct.rtx_def* (%struct.rtx_def*, %struct.rtx_def*, i32)*, i8 (%struct.rtx_def*)*, void (%struct.spec_info_def*)*, i32 (%struct.rtx_def*)*, i32 (%struct.rtx_def*)*, i8 (%struct.rtx_def*)*, i32 (%struct.ddg*)* }
%struct._dep = type opaque
%struct.spec_info_def = type opaque
%struct.ddg = type opaque
%struct.vectorize = type { %union.tree_node* ()*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, %union.tree_node* (i32, %union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, i32 (i8)*, i8 (%union.tree_node*, i8)*, %union.tree_node* (%union.tree_node*, %union.tree_node**)*, i8 (%union.tree_node*, %union.tree_node*)*, i8 (i32, %union.tree_node*, i32, i8)* }
%struct.attribute_spec = type { i8*, i32, i32, i8, i8, i8, %union.tree_node* (%union.tree_node**, %union.tree_node*, %union.tree_node*, i32, i8*)* }
%struct.addr_space = type { i32 (i8)*, i32 (i8)*, i8 (i32, i8)*, i8 (i32, %struct.rtx_def*, i8, i8)*, %struct.rtx_def* (%struct.rtx_def*, %struct.rtx_def*, i32, i8)*, i8 (i8, i8)*, %struct.rtx_def* (%struct.rtx_def*, %union.tree_node*, %union.tree_node*)* }
%struct.stdarg_info = type opaque
%struct.calls = type { i32 (%union.tree_node*, i32, i32*, %union.tree_node*, i32)*, i8 (%union.tree_node*)*, %struct.rtx_def* (%union.tree_node*, i32)*, i8 (%union.tree_node*, %union.tree_node*)*, i8 (%union.tree_node*)*, i8 (%struct.ix86_args*, i32, %union.tree_node*, i8)*, %struct.rtx_def* ()*, void (%struct.ix86_args*, i32, %union.tree_node*, i32*, i32)*, i8 (%struct.ix86_args*)*, i8 (%struct.ix86_args*)*, i8 (%union.tree_node*)*, i8 (i32, %union.tree_node*)*, i8 (%struct.ix86_args*, i32, %union.tree_node*, i8)*, i32 (%struct.ix86_args*, i32, %union.tree_node*, i8)*, i8* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, %struct.rtx_def* (%union.tree_node*, %union.tree_node*, i8)*, %struct.rtx_def* (i32, %struct.rtx_def*)*, %struct.rtx_def* ()*, void ()*, %struct.rtx_def* ()*, i8 ()*, %struct.rtx_def* (%union.tree_node*, i8)*, void (%struct.rtx_def*, %union.tree_node*, %struct.rtx_def*)*, %struct.rtx_def* (%struct.rtx_def*)* }
%struct.ix86_args = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.secondary_reload_info = type { i32, i32, %struct.secondary_reload_info*, i32 }
%struct.c = type { i32 (i8)* }
%struct.cxx = type { %union.tree_node* ()*, i8 ()*, %union.tree_node* (%union.tree_node*)*, i8 ()*, i32 (%union.tree_node*, i32)*, i8 ()*, i8 ()*, void (%union.tree_node*)*, i8 ()*, i8 ()*, i8 ()*, i8 ()*, void (%union.tree_node*)* }
%struct.emutls = type { i8*, i8*, i8*, i8*, i8*, i8*, %union.tree_node* (%union.tree_node*, %union.tree_node**)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, i8, i8 }
%struct.target_option_hooks = type { i8 (%union.tree_node*, %union.tree_node*, %union.tree_node*, i32)*, void (%struct.cl_target_option*)*, void (%struct.cl_target_option*)*, void (%struct._IO_FILE*, i32, %struct.cl_target_option*)*, i8 (%union.tree_node*, %union.tree_node*)*, i8 (%union.tree_node*, %union.tree_node*)* }
%struct.cl_target_option = type { i32, i32, i32, i32, i8, i8, i8, i8, i8, i8, i8 }
%struct.occurrence = type { %struct.basic_block_def*, %union.tree_node*, %union.gimple_statement_d*, %struct.occurrence*, %struct.occurrence*, i32, i8 }
%struct.optab_d = type { i32, i8*, i8, void (%struct.optab_d*, i8*, i8, i32)*, [87 x %struct.optab_handlers] }
%struct.optab_handlers = type { i32 }
%struct.gimple_stmt_iterator = type { %struct.gimple_seq_node_d*, %struct.gimple_seq_d*, %struct.basic_block_def* }
%struct.immediate_use_iterator_d = type { %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* }
%struct.tree_ssa_name = type { %struct.tree_common, %union.tree_node*, %union.gimple_statement_d*, i32, %struct.ptr_info_def*, %struct.ssa_use_operand_d }
%struct.ptr_info_def = type { %struct.pt_solution }
%struct.tree_type = type { %struct.tree_common, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, i32, i32, i32, i32, %union.tree_node*, %union.tree_node*, %union.tree_type_symtab, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.lang_type* }
%union.tree_type_symtab = type { i8* }
%struct.lang_type = type opaque
%struct.tree_list = type { %struct.tree_common, %union.tree_node*, %union.tree_node* }
%struct.ssa_operand_iterator_d = type { i8, i32, %struct.def_optype_d*, %struct.use_optype_d*, i32, i32, %union.gimple_statement_d* }
%struct.tree_exp = type { %struct.tree_common, i32, %union.tree_node*, [1 x %union.tree_node*] }
%struct.gimple_statement_with_ops = type { %struct.gimple_statement_with_ops_base, [1 x %union.tree_node*] }
%struct.gimple_statement_with_ops_base = type { %struct.gimple_statement_base, %struct.def_optype_d*, %struct.use_optype_d* }
%struct.gimple_statement_with_memory_ops_base = type { %struct.gimple_statement_with_ops_base, %union.tree_node*, %union.tree_node* }
%struct.VEC_gimple_heap = type { %struct.VEC_gimple_base }
%struct.symbolic_number = type { i64, i32 }
%struct.tree_int_cst = type { %struct.tree_common, %struct.double_int }
%struct.double_int = type { i64, i64 }

@.str = private unnamed_addr constant [6 x i8] c"recip\00", align 1
@pass_cse_reciprocals = dso_local global %struct.gimple_opt_pass { %struct.opt_pass { i32 0, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i32 0, i32 0), i8 ()* @gate_cse_reciprocals, i32 ()* @execute_cse_reciprocals, %struct.opt_pass* null, %struct.opt_pass* null, i32 0, i32 0, i32 32, i32 0, i32 0, i32 0, i32 2069 } }, align 8, !dbg !0
@.str.1 = private unnamed_addr constant [7 x i8] c"sincos\00", align 1
@pass_cse_sincos = dso_local global %struct.gimple_opt_pass { %struct.opt_pass { i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i32 0, i32 0), i8 ()* @gate_cse_sincos, i32 ()* @execute_cse_sincos, %struct.opt_pass* null, %struct.opt_pass* null, i32 0, i32 0, i32 32, i32 0, i32 0, i32 0, i32 2069 } }, align 8, !dbg !4499
@.str.2 = private unnamed_addr constant [6 x i8] c"bswap\00", align 1
@pass_optimize_bswap = dso_local global %struct.gimple_opt_pass { %struct.opt_pass { i32 0, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i32 0, i32 0), i8 ()* @gate_optimize_bswap, i32 ()* @execute_optimize_bswap, %struct.opt_pass* null, %struct.opt_pass* null, i32 0, i32 0, i32 32, i32 0, i32 0, i32 0, i32 0 } }, align 8, !dbg !4527
@optimize = external dso_local global i32, align 4
@flag_reciprocal_math = external dso_local global i32, align 4
@.str.3 = private unnamed_addr constant [21 x i8] c"dominators for recip\00", align 1
@cfun = external dso_local global %struct.function*, align 8
@occ_pool = internal global %struct.alloc_pool_def* null, align 8, !dbg !4529
@targetm = external dso_local global %struct.gcc_target, align 8
@.str.4 = private unnamed_addr constant [21 x i8] c"tree-ssa-math-opts.c\00", align 1
@.str.5 = private unnamed_addr constant [2 x i8] c"?\00", align 1
@occ_head = internal global %struct.occurrence* null, align 8, !dbg !4552
@flag_exceptions = external dso_local global i32, align 4
@flag_trapping_math = external dso_local global i32, align 4
@.str.6 = private unnamed_addr constant [9 x i8] c"reciptmp\00", align 1
@.str.7 = private unnamed_addr constant [21 x i8] c"./tree-flow-inline.h\00", align 1
@.str.8 = private unnamed_addr constant [11 x i8] c"./gimple.h\00", align 1
@gimple_rhs_class_table = external dso_local constant [0 x i8], align 1
@gimple_ops_offset_ = external dso_local constant [0 x i64], align 8
@gss_for_code_ = external dso_local constant [0 x i32], align 4
@linux_uclibc = external dso_local global i32, align 4
@.str.9 = private unnamed_addr constant [10 x i8] c"sincostmp\00", align 1
@flag_expensive_optimizations = external dso_local global i32, align 4
@built_in_decls = external dso_local global [721 x %union.tree_node*], align 16
@optab_table = external dso_local global [159 x %struct.optab_d], align 16
@word_mode = external dso_local global i32, align 4
@.str.10 = private unnamed_addr constant [9 x i8] c"bswapsrc\00", align 1
@.str.11 = private unnamed_addr constant [9 x i8] c"bswapdst\00", align 1
@dump_file = external dso_local global %struct._IO_FILE*, align 8
@.str.12 = private unnamed_addr constant [39 x i8] c"%d bit bswap implementation found at: \00", align 1
@global_trees = external dso_local global [131 x %union.tree_node*], align 16

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gate_cse_reciprocals() #0 !dbg !4558 {
entry:
  %0 = load i32, i32* @optimize, align 4, !dbg !4560
  %tobool = icmp ne i32 %0, 0, !dbg !4560
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !4561

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* @flag_reciprocal_math, align 4, !dbg !4562
  %tobool1 = icmp ne i32 %1, 0, !dbg !4561
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %2 = phi i1 [ false, %entry ], [ %tobool1, %land.rhs ], !dbg !4563
  %land.ext = zext i1 %2 to i32, !dbg !4561
  %conv = trunc i32 %land.ext to i8, !dbg !4560
  ret i8 %conv, !dbg !4564
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @execute_cse_reciprocals() #0 !dbg !4565 {
entry:
  %bb = alloca %struct.basic_block_def*, align 8
  %arg = alloca %union.tree_node*, align 8
  %gsi = alloca %struct.gimple_stmt_iterator, align 8
  %phi = alloca %union.gimple_statement_d*, align 8
  %def = alloca %union.tree_node*, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  %tmp101 = alloca %struct.gimple_stmt_iterator, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  %tmp168 = alloca %struct.gimple_stmt_iterator, align 8
  %stmt174 = alloca %union.gimple_statement_d*, align 8
  %fndecl = alloca %union.tree_node*, align 8
  %arg1 = alloca %union.tree_node*, align 8
  %stmt1 = alloca %union.gimple_statement_d*, align 8
  %code = alloca i32, align 4
  %md_code = alloca i8, align 1
  %fail = alloca i8, align 1
  %ui = alloca %struct.immediate_use_iterator_d, align 8
  %use_p = alloca %struct.ssa_use_operand_d*, align 8
  %stmt2 = alloca %union.gimple_statement_d*, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !4566, metadata !DIExpression()), !dbg !4567
  call void @llvm.dbg.declare(metadata %union.tree_node** %arg, metadata !4568, metadata !DIExpression()), !dbg !4569
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4570
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !4570
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !4570
  %1 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !4570
  %x_n_basic_blocks = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %1, i32 0, i32 3, !dbg !4570
  %2 = load i32, i32* %x_n_basic_blocks, align 8, !dbg !4570
  %div = sdiv i32 %2, 3, !dbg !4571
  %add = add nsw i32 %div, 1, !dbg !4572
  %conv = sext i32 %add to i64, !dbg !4570
  %call = call %struct.alloc_pool_def* @create_alloc_pool(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.3, i64 0, i64 0), i64 48, i64 %conv), !dbg !4573
  store %struct.alloc_pool_def* %call, %struct.alloc_pool_def** @occ_pool, align 8, !dbg !4574
  call void @calculate_dominance_info(i32 1), !dbg !4575
  call void @calculate_dominance_info(i32 2), !dbg !4576
  %3 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4577
  %add.ptr1 = getelementptr inbounds %struct.function, %struct.function* %3, i64 0, !dbg !4577
  %decl = getelementptr inbounds %struct.function, %struct.function* %add.ptr1, i32 0, i32 6, !dbg !4577
  %4 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !4577
  %decl_non_common = bitcast %union.tree_node* %4 to %struct.tree_decl_non_common*, !dbg !4577
  %arguments = getelementptr inbounds %struct.tree_decl_non_common, %struct.tree_decl_non_common* %decl_non_common, i32 0, i32 2, !dbg !4577
  %5 = load %union.tree_node*, %union.tree_node** %arguments, align 8, !dbg !4577
  store %union.tree_node* %5, %union.tree_node** %arg, align 8, !dbg !4579
  br label %for.cond, !dbg !4580

for.cond:                                         ; preds = %for.inc, %entry
  %6 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !4581
  %tobool = icmp ne %union.tree_node* %6, null, !dbg !4583
  br i1 %tobool, label %for.body, label %for.end, !dbg !4583

for.body:                                         ; preds = %for.cond
  %7 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4584
  %add.ptr2 = getelementptr inbounds %struct.function, %struct.function* %7, i64 0, !dbg !4584
  %8 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !4586
  %call3 = call %union.tree_node* @gimple_default_def(%struct.function* %add.ptr2, %union.tree_node* %8), !dbg !4587
  %tobool4 = icmp ne %union.tree_node* %call3, null, !dbg !4587
  br i1 %tobool4, label %land.lhs.true, label %if.end, !dbg !4588

land.lhs.true:                                    ; preds = %for.body
  %9 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !4589
  %common = bitcast %union.tree_node* %9 to %struct.tree_common*, !dbg !4589
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !4589
  %10 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !4589
  %base = bitcast %union.tree_node* %10 to %struct.tree_base*, !dbg !4589
  %11 = bitcast %struct.tree_base* %base to i64*, !dbg !4589
  %bf.load = load i64, i64* %11, align 8, !dbg !4589
  %bf.clear = and i64 %bf.load, 65535, !dbg !4589
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !4589
  %cmp = icmp eq i32 %bf.cast, 9, !dbg !4589
  br i1 %cmp, label %land.lhs.true34, label %lor.lhs.false, !dbg !4589

lor.lhs.false:                                    ; preds = %land.lhs.true
  %12 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !4589
  %common6 = bitcast %union.tree_node* %12 to %struct.tree_common*, !dbg !4589
  %type7 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common6, i32 0, i32 2, !dbg !4589
  %13 = load %union.tree_node*, %union.tree_node** %type7, align 8, !dbg !4589
  %base8 = bitcast %union.tree_node* %13 to %struct.tree_base*, !dbg !4589
  %14 = bitcast %struct.tree_base* %base8 to i64*, !dbg !4589
  %bf.load9 = load i64, i64* %14, align 8, !dbg !4589
  %bf.clear10 = and i64 %bf.load9, 65535, !dbg !4589
  %bf.cast11 = trunc i64 %bf.clear10 to i32, !dbg !4589
  %cmp12 = icmp eq i32 %bf.cast11, 13, !dbg !4589
  br i1 %cmp12, label %land.lhs.true23, label %lor.lhs.false14, !dbg !4589

lor.lhs.false14:                                  ; preds = %lor.lhs.false
  %15 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !4589
  %common15 = bitcast %union.tree_node* %15 to %struct.tree_common*, !dbg !4589
  %type16 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common15, i32 0, i32 2, !dbg !4589
  %16 = load %union.tree_node*, %union.tree_node** %type16, align 8, !dbg !4589
  %base17 = bitcast %union.tree_node* %16 to %struct.tree_base*, !dbg !4589
  %17 = bitcast %struct.tree_base* %base17 to i64*, !dbg !4589
  %bf.load18 = load i64, i64* %17, align 8, !dbg !4589
  %bf.clear19 = and i64 %bf.load18, 65535, !dbg !4589
  %bf.cast20 = trunc i64 %bf.clear19 to i32, !dbg !4589
  %cmp21 = icmp eq i32 %bf.cast20, 14, !dbg !4589
  br i1 %cmp21, label %land.lhs.true23, label %if.end, !dbg !4589

land.lhs.true23:                                  ; preds = %lor.lhs.false14, %lor.lhs.false
  %18 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !4589
  %common24 = bitcast %union.tree_node* %18 to %struct.tree_common*, !dbg !4589
  %type25 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common24, i32 0, i32 2, !dbg !4589
  %19 = load %union.tree_node*, %union.tree_node** %type25, align 8, !dbg !4589
  %common26 = bitcast %union.tree_node* %19 to %struct.tree_common*, !dbg !4589
  %type27 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common26, i32 0, i32 2, !dbg !4589
  %20 = load %union.tree_node*, %union.tree_node** %type27, align 8, !dbg !4589
  %base28 = bitcast %union.tree_node* %20 to %struct.tree_base*, !dbg !4589
  %21 = bitcast %struct.tree_base* %base28 to i64*, !dbg !4589
  %bf.load29 = load i64, i64* %21, align 8, !dbg !4589
  %bf.clear30 = and i64 %bf.load29, 65535, !dbg !4589
  %bf.cast31 = trunc i64 %bf.clear30 to i32, !dbg !4589
  %cmp32 = icmp eq i32 %bf.cast31, 9, !dbg !4589
  br i1 %cmp32, label %land.lhs.true34, label %if.end, !dbg !4590

land.lhs.true34:                                  ; preds = %land.lhs.true23, %land.lhs.true
  %22 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !4591
  %call35 = call zeroext i8 @is_gimple_reg(%union.tree_node* %22), !dbg !4592
  %conv36 = zext i8 %call35 to i32, !dbg !4592
  %tobool37 = icmp ne i32 %conv36, 0, !dbg !4592
  br i1 %tobool37, label %if.then, label %if.end, !dbg !4593

if.then:                                          ; preds = %land.lhs.true34
  %23 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4594
  %add.ptr38 = getelementptr inbounds %struct.function, %struct.function* %23, i64 0, !dbg !4594
  %24 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !4595
  %call39 = call %union.tree_node* @gimple_default_def(%struct.function* %add.ptr38, %union.tree_node* %24), !dbg !4596
  call void @execute_cse_reciprocals_1(%struct.gimple_stmt_iterator* null, %union.tree_node* %call39), !dbg !4597
  br label %if.end, !dbg !4597

if.end:                                           ; preds = %if.then, %land.lhs.true34, %land.lhs.true23, %lor.lhs.false14, %for.body
  br label %for.inc, !dbg !4598

for.inc:                                          ; preds = %if.end
  %25 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !4599
  %common40 = bitcast %union.tree_node* %25 to %struct.tree_common*, !dbg !4599
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common40, i32 0, i32 1, !dbg !4599
  %26 = load %union.tree_node*, %union.tree_node** %chain, align 8, !dbg !4599
  store %union.tree_node* %26, %union.tree_node** %arg, align 8, !dbg !4600
  br label %for.cond, !dbg !4601, !llvm.loop !4602

for.end:                                          ; preds = %for.cond
  %27 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4604
  %add.ptr41 = getelementptr inbounds %struct.function, %struct.function* %27, i64 0, !dbg !4604
  %cfg42 = getelementptr inbounds %struct.function, %struct.function* %add.ptr41, i32 0, i32 1, !dbg !4604
  %28 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg42, align 8, !dbg !4604
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %28, i32 0, i32 0, !dbg !4604
  %29 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !4604
  %next_bb = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %29, i32 0, i32 6, !dbg !4604
  %30 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb, align 8, !dbg !4604
  store %struct.basic_block_def* %30, %struct.basic_block_def** %bb, align 8, !dbg !4604
  br label %for.cond43, !dbg !4604

for.cond43:                                       ; preds = %for.inc278, %for.end
  %31 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4606
  %32 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4606
  %add.ptr44 = getelementptr inbounds %struct.function, %struct.function* %32, i64 0, !dbg !4606
  %cfg45 = getelementptr inbounds %struct.function, %struct.function* %add.ptr44, i32 0, i32 1, !dbg !4606
  %33 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg45, align 8, !dbg !4606
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %33, i32 0, i32 1, !dbg !4606
  %34 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !4606
  %cmp46 = icmp ne %struct.basic_block_def* %31, %34, !dbg !4606
  br i1 %cmp46, label %for.body48, label %for.end280, !dbg !4604

for.body48:                                       ; preds = %for.cond43
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %gsi, metadata !4608, metadata !DIExpression()), !dbg !4616
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %phi, metadata !4617, metadata !DIExpression()), !dbg !4618
  call void @llvm.dbg.declare(metadata %union.tree_node** %def, metadata !4619, metadata !DIExpression()), !dbg !4620
  %35 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4621
  call void @gsi_start_phis(%struct.gimple_stmt_iterator* sret %tmp, %struct.basic_block_def* %35), !dbg !4623
  %36 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !4623
  %37 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !4623
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %36, i8* align 8 %37, i64 24, i1 false), !dbg !4623
  br label %for.cond49, !dbg !4624

for.cond49:                                       ; preds = %for.inc99, %for.body48
  %call50 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !4625
  %tobool51 = icmp ne i8 %call50, 0, !dbg !4627
  %lnot = xor i1 %tobool51, true, !dbg !4627
  br i1 %lnot, label %for.body52, label %for.end100, !dbg !4628

for.body52:                                       ; preds = %for.cond49
  %call53 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !4629
  store %union.gimple_statement_d* %call53, %union.gimple_statement_d** %phi, align 8, !dbg !4631
  %38 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !4632
  %call54 = call %union.tree_node** @gimple_phi_result_ptr(%union.gimple_statement_d* %38), !dbg !4632
  %call55 = call %union.tree_node* @get_def_from_ptr(%union.tree_node** %call54), !dbg !4632
  store %union.tree_node* %call55, %union.tree_node** %def, align 8, !dbg !4633
  %39 = load %union.tree_node*, %union.tree_node** %def, align 8, !dbg !4634
  %common56 = bitcast %union.tree_node* %39 to %struct.tree_common*, !dbg !4634
  %type57 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common56, i32 0, i32 2, !dbg !4634
  %40 = load %union.tree_node*, %union.tree_node** %type57, align 8, !dbg !4634
  %base58 = bitcast %union.tree_node* %40 to %struct.tree_base*, !dbg !4634
  %41 = bitcast %struct.tree_base* %base58 to i64*, !dbg !4634
  %bf.load59 = load i64, i64* %41, align 8, !dbg !4634
  %bf.clear60 = and i64 %bf.load59, 65535, !dbg !4634
  %bf.cast61 = trunc i64 %bf.clear60 to i32, !dbg !4634
  %cmp62 = icmp eq i32 %bf.cast61, 9, !dbg !4634
  br i1 %cmp62, label %land.lhs.true93, label %lor.lhs.false64, !dbg !4634

lor.lhs.false64:                                  ; preds = %for.body52
  %42 = load %union.tree_node*, %union.tree_node** %def, align 8, !dbg !4634
  %common65 = bitcast %union.tree_node* %42 to %struct.tree_common*, !dbg !4634
  %type66 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common65, i32 0, i32 2, !dbg !4634
  %43 = load %union.tree_node*, %union.tree_node** %type66, align 8, !dbg !4634
  %base67 = bitcast %union.tree_node* %43 to %struct.tree_base*, !dbg !4634
  %44 = bitcast %struct.tree_base* %base67 to i64*, !dbg !4634
  %bf.load68 = load i64, i64* %44, align 8, !dbg !4634
  %bf.clear69 = and i64 %bf.load68, 65535, !dbg !4634
  %bf.cast70 = trunc i64 %bf.clear69 to i32, !dbg !4634
  %cmp71 = icmp eq i32 %bf.cast70, 13, !dbg !4634
  br i1 %cmp71, label %land.lhs.true82, label %lor.lhs.false73, !dbg !4634

lor.lhs.false73:                                  ; preds = %lor.lhs.false64
  %45 = load %union.tree_node*, %union.tree_node** %def, align 8, !dbg !4634
  %common74 = bitcast %union.tree_node* %45 to %struct.tree_common*, !dbg !4634
  %type75 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common74, i32 0, i32 2, !dbg !4634
  %46 = load %union.tree_node*, %union.tree_node** %type75, align 8, !dbg !4634
  %base76 = bitcast %union.tree_node* %46 to %struct.tree_base*, !dbg !4634
  %47 = bitcast %struct.tree_base* %base76 to i64*, !dbg !4634
  %bf.load77 = load i64, i64* %47, align 8, !dbg !4634
  %bf.clear78 = and i64 %bf.load77, 65535, !dbg !4634
  %bf.cast79 = trunc i64 %bf.clear78 to i32, !dbg !4634
  %cmp80 = icmp eq i32 %bf.cast79, 14, !dbg !4634
  br i1 %cmp80, label %land.lhs.true82, label %if.end98, !dbg !4634

land.lhs.true82:                                  ; preds = %lor.lhs.false73, %lor.lhs.false64
  %48 = load %union.tree_node*, %union.tree_node** %def, align 8, !dbg !4634
  %common83 = bitcast %union.tree_node* %48 to %struct.tree_common*, !dbg !4634
  %type84 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common83, i32 0, i32 2, !dbg !4634
  %49 = load %union.tree_node*, %union.tree_node** %type84, align 8, !dbg !4634
  %common85 = bitcast %union.tree_node* %49 to %struct.tree_common*, !dbg !4634
  %type86 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common85, i32 0, i32 2, !dbg !4634
  %50 = load %union.tree_node*, %union.tree_node** %type86, align 8, !dbg !4634
  %base87 = bitcast %union.tree_node* %50 to %struct.tree_base*, !dbg !4634
  %51 = bitcast %struct.tree_base* %base87 to i64*, !dbg !4634
  %bf.load88 = load i64, i64* %51, align 8, !dbg !4634
  %bf.clear89 = and i64 %bf.load88, 65535, !dbg !4634
  %bf.cast90 = trunc i64 %bf.clear89 to i32, !dbg !4634
  %cmp91 = icmp eq i32 %bf.cast90, 9, !dbg !4634
  br i1 %cmp91, label %land.lhs.true93, label %if.end98, !dbg !4636

land.lhs.true93:                                  ; preds = %land.lhs.true82, %for.body52
  %52 = load %union.tree_node*, %union.tree_node** %def, align 8, !dbg !4637
  %call94 = call zeroext i8 @is_gimple_reg(%union.tree_node* %52), !dbg !4638
  %conv95 = zext i8 %call94 to i32, !dbg !4638
  %tobool96 = icmp ne i32 %conv95, 0, !dbg !4638
  br i1 %tobool96, label %if.then97, label %if.end98, !dbg !4639

if.then97:                                        ; preds = %land.lhs.true93
  %53 = load %union.tree_node*, %union.tree_node** %def, align 8, !dbg !4640
  call void @execute_cse_reciprocals_1(%struct.gimple_stmt_iterator* null, %union.tree_node* %53), !dbg !4641
  br label %if.end98, !dbg !4641

if.end98:                                         ; preds = %if.then97, %land.lhs.true93, %land.lhs.true82, %lor.lhs.false73
  br label %for.inc99, !dbg !4642

for.inc99:                                        ; preds = %if.end98
  call void @gsi_next(%struct.gimple_stmt_iterator* %gsi), !dbg !4643
  br label %for.cond49, !dbg !4644, !llvm.loop !4645

for.end100:                                       ; preds = %for.cond49
  %54 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4647
  call void @gsi_after_labels(%struct.gimple_stmt_iterator* sret %tmp101, %struct.basic_block_def* %54), !dbg !4649
  %55 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !4649
  %56 = bitcast %struct.gimple_stmt_iterator* %tmp101 to i8*, !dbg !4649
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %55, i8* align 8 %56, i64 24, i1 false), !dbg !4649
  br label %for.cond102, !dbg !4650

for.cond102:                                      ; preds = %for.inc162, %for.end100
  %call103 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !4651
  %tobool104 = icmp ne i8 %call103, 0, !dbg !4653
  %lnot105 = xor i1 %tobool104, true, !dbg !4653
  br i1 %lnot105, label %for.body106, label %for.end163, !dbg !4654

for.body106:                                      ; preds = %for.cond102
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !4655, metadata !DIExpression()), !dbg !4657
  %call107 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !4658
  store %union.gimple_statement_d* %call107, %union.gimple_statement_d** %stmt, align 8, !dbg !4657
  %57 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4659
  %call108 = call zeroext i8 @gimple_has_lhs(%union.gimple_statement_d* %57), !dbg !4661
  %conv109 = zext i8 %call108 to i32, !dbg !4661
  %tobool110 = icmp ne i32 %conv109, 0, !dbg !4661
  br i1 %tobool110, label %land.lhs.true111, label %if.end161, !dbg !4662

land.lhs.true111:                                 ; preds = %for.body106
  %58 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4663
  %call112 = call %union.tree_node* @single_ssa_tree_operand(%union.gimple_statement_d* %58, i32 2), !dbg !4663
  store %union.tree_node* %call112, %union.tree_node** %def, align 8, !dbg !4664
  %cmp113 = icmp ne %union.tree_node* %call112, null, !dbg !4665
  br i1 %cmp113, label %land.lhs.true115, label %if.end161, !dbg !4666

land.lhs.true115:                                 ; preds = %land.lhs.true111
  %59 = load %union.tree_node*, %union.tree_node** %def, align 8, !dbg !4667
  %common116 = bitcast %union.tree_node* %59 to %struct.tree_common*, !dbg !4667
  %type117 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common116, i32 0, i32 2, !dbg !4667
  %60 = load %union.tree_node*, %union.tree_node** %type117, align 8, !dbg !4667
  %base118 = bitcast %union.tree_node* %60 to %struct.tree_base*, !dbg !4667
  %61 = bitcast %struct.tree_base* %base118 to i64*, !dbg !4667
  %bf.load119 = load i64, i64* %61, align 8, !dbg !4667
  %bf.clear120 = and i64 %bf.load119, 65535, !dbg !4667
  %bf.cast121 = trunc i64 %bf.clear120 to i32, !dbg !4667
  %cmp122 = icmp eq i32 %bf.cast121, 9, !dbg !4667
  br i1 %cmp122, label %land.lhs.true153, label %lor.lhs.false124, !dbg !4667

lor.lhs.false124:                                 ; preds = %land.lhs.true115
  %62 = load %union.tree_node*, %union.tree_node** %def, align 8, !dbg !4667
  %common125 = bitcast %union.tree_node* %62 to %struct.tree_common*, !dbg !4667
  %type126 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common125, i32 0, i32 2, !dbg !4667
  %63 = load %union.tree_node*, %union.tree_node** %type126, align 8, !dbg !4667
  %base127 = bitcast %union.tree_node* %63 to %struct.tree_base*, !dbg !4667
  %64 = bitcast %struct.tree_base* %base127 to i64*, !dbg !4667
  %bf.load128 = load i64, i64* %64, align 8, !dbg !4667
  %bf.clear129 = and i64 %bf.load128, 65535, !dbg !4667
  %bf.cast130 = trunc i64 %bf.clear129 to i32, !dbg !4667
  %cmp131 = icmp eq i32 %bf.cast130, 13, !dbg !4667
  br i1 %cmp131, label %land.lhs.true142, label %lor.lhs.false133, !dbg !4667

lor.lhs.false133:                                 ; preds = %lor.lhs.false124
  %65 = load %union.tree_node*, %union.tree_node** %def, align 8, !dbg !4667
  %common134 = bitcast %union.tree_node* %65 to %struct.tree_common*, !dbg !4667
  %type135 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common134, i32 0, i32 2, !dbg !4667
  %66 = load %union.tree_node*, %union.tree_node** %type135, align 8, !dbg !4667
  %base136 = bitcast %union.tree_node* %66 to %struct.tree_base*, !dbg !4667
  %67 = bitcast %struct.tree_base* %base136 to i64*, !dbg !4667
  %bf.load137 = load i64, i64* %67, align 8, !dbg !4667
  %bf.clear138 = and i64 %bf.load137, 65535, !dbg !4667
  %bf.cast139 = trunc i64 %bf.clear138 to i32, !dbg !4667
  %cmp140 = icmp eq i32 %bf.cast139, 14, !dbg !4667
  br i1 %cmp140, label %land.lhs.true142, label %if.end161, !dbg !4667

land.lhs.true142:                                 ; preds = %lor.lhs.false133, %lor.lhs.false124
  %68 = load %union.tree_node*, %union.tree_node** %def, align 8, !dbg !4667
  %common143 = bitcast %union.tree_node* %68 to %struct.tree_common*, !dbg !4667
  %type144 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common143, i32 0, i32 2, !dbg !4667
  %69 = load %union.tree_node*, %union.tree_node** %type144, align 8, !dbg !4667
  %common145 = bitcast %union.tree_node* %69 to %struct.tree_common*, !dbg !4667
  %type146 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common145, i32 0, i32 2, !dbg !4667
  %70 = load %union.tree_node*, %union.tree_node** %type146, align 8, !dbg !4667
  %base147 = bitcast %union.tree_node* %70 to %struct.tree_base*, !dbg !4667
  %71 = bitcast %struct.tree_base* %base147 to i64*, !dbg !4667
  %bf.load148 = load i64, i64* %71, align 8, !dbg !4667
  %bf.clear149 = and i64 %bf.load148, 65535, !dbg !4667
  %bf.cast150 = trunc i64 %bf.clear149 to i32, !dbg !4667
  %cmp151 = icmp eq i32 %bf.cast150, 9, !dbg !4667
  br i1 %cmp151, label %land.lhs.true153, label %if.end161, !dbg !4668

land.lhs.true153:                                 ; preds = %land.lhs.true142, %land.lhs.true115
  %72 = load %union.tree_node*, %union.tree_node** %def, align 8, !dbg !4669
  %base154 = bitcast %union.tree_node* %72 to %struct.tree_base*, !dbg !4669
  %73 = bitcast %struct.tree_base* %base154 to i64*, !dbg !4669
  %bf.load155 = load i64, i64* %73, align 8, !dbg !4669
  %bf.clear156 = and i64 %bf.load155, 65535, !dbg !4669
  %bf.cast157 = trunc i64 %bf.clear156 to i32, !dbg !4669
  %cmp158 = icmp eq i32 %bf.cast157, 141, !dbg !4670
  br i1 %cmp158, label %if.then160, label %if.end161, !dbg !4671

if.then160:                                       ; preds = %land.lhs.true153
  %74 = load %union.tree_node*, %union.tree_node** %def, align 8, !dbg !4672
  call void @execute_cse_reciprocals_1(%struct.gimple_stmt_iterator* %gsi, %union.tree_node* %74), !dbg !4673
  br label %if.end161, !dbg !4673

if.end161:                                        ; preds = %if.then160, %land.lhs.true153, %land.lhs.true142, %lor.lhs.false133, %land.lhs.true111, %for.body106
  br label %for.inc162, !dbg !4674

for.inc162:                                       ; preds = %if.end161
  call void @gsi_next(%struct.gimple_stmt_iterator* %gsi), !dbg !4675
  br label %for.cond102, !dbg !4676, !llvm.loop !4677

for.end163:                                       ; preds = %for.cond102
  %75 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4679
  %call164 = call zeroext i8 @optimize_bb_for_size_p(%struct.basic_block_def* %75), !dbg !4681
  %tobool165 = icmp ne i8 %call164, 0, !dbg !4681
  br i1 %tobool165, label %if.then166, label %if.end167, !dbg !4682

if.then166:                                       ; preds = %for.end163
  br label %for.inc278, !dbg !4683

if.end167:                                        ; preds = %for.end163
  %76 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4684
  call void @gsi_after_labels(%struct.gimple_stmt_iterator* sret %tmp168, %struct.basic_block_def* %76), !dbg !4686
  %77 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !4686
  %78 = bitcast %struct.gimple_stmt_iterator* %tmp168 to i8*, !dbg !4686
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %77, i8* align 8 %78, i64 24, i1 false), !dbg !4686
  br label %for.cond169, !dbg !4687

for.cond169:                                      ; preds = %for.inc276, %if.end167
  %call170 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !4688
  %tobool171 = icmp ne i8 %call170, 0, !dbg !4690
  %lnot172 = xor i1 %tobool171, true, !dbg !4690
  br i1 %lnot172, label %for.body173, label %for.end277, !dbg !4691

for.body173:                                      ; preds = %for.cond169
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt174, metadata !4692, metadata !DIExpression()), !dbg !4694
  %call175 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !4695
  store %union.gimple_statement_d* %call175, %union.gimple_statement_d** %stmt174, align 8, !dbg !4694
  call void @llvm.dbg.declare(metadata %union.tree_node** %fndecl, metadata !4696, metadata !DIExpression()), !dbg !4697
  %79 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt174, align 8, !dbg !4698
  %call176 = call zeroext i8 @is_gimple_assign(%union.gimple_statement_d* %79), !dbg !4700
  %conv177 = zext i8 %call176 to i32, !dbg !4700
  %tobool178 = icmp ne i32 %conv177, 0, !dbg !4700
  br i1 %tobool178, label %land.lhs.true179, label %if.end275, !dbg !4701

land.lhs.true179:                                 ; preds = %for.body173
  %80 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt174, align 8, !dbg !4702
  %call180 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %80), !dbg !4703
  %cmp181 = icmp eq i32 %call180, 75, !dbg !4704
  br i1 %cmp181, label %if.then183, label %if.end275, !dbg !4705

if.then183:                                       ; preds = %land.lhs.true179
  call void @llvm.dbg.declare(metadata %union.tree_node** %arg1, metadata !4706, metadata !DIExpression()), !dbg !4708
  %81 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt174, align 8, !dbg !4709
  %call184 = call %union.tree_node* @gimple_assign_rhs2(%union.gimple_statement_d* %81), !dbg !4710
  store %union.tree_node* %call184, %union.tree_node** %arg1, align 8, !dbg !4708
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt1, metadata !4711, metadata !DIExpression()), !dbg !4712
  %82 = load %union.tree_node*, %union.tree_node** %arg1, align 8, !dbg !4713
  %base185 = bitcast %union.tree_node* %82 to %struct.tree_base*, !dbg !4713
  %83 = bitcast %struct.tree_base* %base185 to i64*, !dbg !4713
  %bf.load186 = load i64, i64* %83, align 8, !dbg !4713
  %bf.clear187 = and i64 %bf.load186, 65535, !dbg !4713
  %bf.cast188 = trunc i64 %bf.clear187 to i32, !dbg !4713
  %cmp189 = icmp ne i32 %bf.cast188, 141, !dbg !4715
  br i1 %cmp189, label %if.then191, label %if.end192, !dbg !4716

if.then191:                                       ; preds = %if.then183
  br label %for.inc276, !dbg !4717

if.end192:                                        ; preds = %if.then183
  %84 = load %union.tree_node*, %union.tree_node** %arg1, align 8, !dbg !4718
  %ssa_name = bitcast %union.tree_node* %84 to %struct.tree_ssa_name*, !dbg !4718
  %def_stmt = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 2, !dbg !4718
  %85 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !4718
  store %union.gimple_statement_d* %85, %union.gimple_statement_d** %stmt1, align 8, !dbg !4719
  %86 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt1, align 8, !dbg !4720
  %call193 = call zeroext i8 @is_gimple_call(%union.gimple_statement_d* %86), !dbg !4722
  %conv194 = zext i8 %call193 to i32, !dbg !4722
  %tobool195 = icmp ne i32 %conv194, 0, !dbg !4722
  br i1 %tobool195, label %land.lhs.true196, label %if.end274, !dbg !4723

land.lhs.true196:                                 ; preds = %if.end192
  %87 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt1, align 8, !dbg !4724
  %call197 = call %union.tree_node* @gimple_call_lhs(%union.gimple_statement_d* %87), !dbg !4725
  %tobool198 = icmp ne %union.tree_node* %call197, null, !dbg !4725
  br i1 %tobool198, label %land.lhs.true199, label %if.end274, !dbg !4726

land.lhs.true199:                                 ; preds = %land.lhs.true196
  %88 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt1, align 8, !dbg !4727
  %call200 = call %union.tree_node* @gimple_call_fndecl(%union.gimple_statement_d* %88), !dbg !4728
  store %union.tree_node* %call200, %union.tree_node** %fndecl, align 8, !dbg !4729
  %tobool201 = icmp ne %union.tree_node* %call200, null, !dbg !4729
  br i1 %tobool201, label %land.lhs.true202, label %if.end274, !dbg !4730

land.lhs.true202:                                 ; preds = %land.lhs.true199
  %89 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !4731
  %function_decl = bitcast %union.tree_node* %89 to %struct.tree_function_decl*, !dbg !4731
  %built_in_class = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl, i32 0, i32 5, !dbg !4731
  %bf.load203 = load i32, i32* %built_in_class, align 8, !dbg !4731
  %bf.lshr = lshr i32 %bf.load203, 11, !dbg !4731
  %bf.clear204 = and i32 %bf.lshr, 3, !dbg !4731
  %cmp205 = icmp eq i32 %bf.clear204, 3, !dbg !4732
  br i1 %cmp205, label %if.then215, label %lor.lhs.false207, !dbg !4733

lor.lhs.false207:                                 ; preds = %land.lhs.true202
  %90 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !4734
  %function_decl208 = bitcast %union.tree_node* %90 to %struct.tree_function_decl*, !dbg !4734
  %built_in_class209 = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl208, i32 0, i32 5, !dbg !4734
  %bf.load210 = load i32, i32* %built_in_class209, align 8, !dbg !4734
  %bf.lshr211 = lshr i32 %bf.load210, 11, !dbg !4734
  %bf.clear212 = and i32 %bf.lshr211, 3, !dbg !4734
  %cmp213 = icmp eq i32 %bf.clear212, 2, !dbg !4735
  br i1 %cmp213, label %if.then215, label %if.end274, !dbg !4736

if.then215:                                       ; preds = %lor.lhs.false207, %land.lhs.true202
  call void @llvm.dbg.declare(metadata i32* %code, metadata !4737, metadata !DIExpression()), !dbg !4739
  call void @llvm.dbg.declare(metadata i8* %md_code, metadata !4740, metadata !DIExpression()), !dbg !4741
  call void @llvm.dbg.declare(metadata i8* %fail, metadata !4742, metadata !DIExpression()), !dbg !4743
  call void @llvm.dbg.declare(metadata %struct.immediate_use_iterator_d* %ui, metadata !4744, metadata !DIExpression()), !dbg !4752
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %use_p, metadata !4753, metadata !DIExpression()), !dbg !4754
  %91 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !4755
  %function_decl216 = bitcast %union.tree_node* %91 to %struct.tree_function_decl*, !dbg !4755
  %function_code = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl216, i32 0, i32 5, !dbg !4755
  %bf.load217 = load i32, i32* %function_code, align 8, !dbg !4755
  %bf.clear218 = and i32 %bf.load217, 2047, !dbg !4755
  store i32 %bf.clear218, i32* %code, align 4, !dbg !4756
  %92 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !4757
  %function_decl219 = bitcast %union.tree_node* %92 to %struct.tree_function_decl*, !dbg !4757
  %built_in_class220 = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl219, i32 0, i32 5, !dbg !4757
  %bf.load221 = load i32, i32* %built_in_class220, align 8, !dbg !4757
  %bf.lshr222 = lshr i32 %bf.load221, 11, !dbg !4757
  %bf.clear223 = and i32 %bf.lshr222, 3, !dbg !4757
  %cmp224 = icmp eq i32 %bf.clear223, 2, !dbg !4758
  %conv225 = zext i1 %cmp224 to i32, !dbg !4758
  %conv226 = trunc i32 %conv225 to i8, !dbg !4757
  store i8 %conv226, i8* %md_code, align 1, !dbg !4759
  %93 = load %union.tree_node* (i32, i8, i8)*, %union.tree_node* (i32, i8, i8)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 28), align 8, !dbg !4760
  %94 = load i32, i32* %code, align 4, !dbg !4761
  %95 = load i8, i8* %md_code, align 1, !dbg !4762
  %call227 = call %union.tree_node* %93(i32 %94, i8 zeroext %95, i8 zeroext 0), !dbg !4763
  store %union.tree_node* %call227, %union.tree_node** %fndecl, align 8, !dbg !4764
  %96 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !4765
  %tobool228 = icmp ne %union.tree_node* %96, null, !dbg !4765
  br i1 %tobool228, label %if.end230, label %if.then229, !dbg !4767

if.then229:                                       ; preds = %if.then215
  br label %for.inc276, !dbg !4768

if.end230:                                        ; preds = %if.then215
  store i8 0, i8* %fail, align 1, !dbg !4769
  %97 = load %union.tree_node*, %union.tree_node** %arg1, align 8, !dbg !4770
  %call231 = call %struct.ssa_use_operand_d* @first_readonly_imm_use(%struct.immediate_use_iterator_d* %ui, %union.tree_node* %97), !dbg !4770
  store %struct.ssa_use_operand_d* %call231, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !4770
  br label %for.cond232, !dbg !4770

for.cond232:                                      ; preds = %for.inc258, %if.end230
  %call233 = call zeroext i8 @end_readonly_imm_use_p(%struct.immediate_use_iterator_d* %ui), !dbg !4772
  %tobool234 = icmp ne i8 %call233, 0, !dbg !4772
  %lnot235 = xor i1 %tobool234, true, !dbg !4772
  br i1 %lnot235, label %for.body236, label %for.end260, !dbg !4770

for.body236:                                      ; preds = %for.cond232
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt2, metadata !4774, metadata !DIExpression()), !dbg !4776
  %98 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !4777
  %loc = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %98, i32 0, i32 2, !dbg !4777
  %stmt237 = bitcast %union.anon* %loc to %union.gimple_statement_d**, !dbg !4777
  %99 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt237, align 8, !dbg !4777
  store %union.gimple_statement_d* %99, %union.gimple_statement_d** %stmt2, align 8, !dbg !4776
  %100 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt2, align 8, !dbg !4778
  %call238 = call zeroext i8 @is_gimple_debug(%union.gimple_statement_d* %100), !dbg !4780
  %tobool239 = icmp ne i8 %call238, 0, !dbg !4780
  br i1 %tobool239, label %if.then240, label %if.end241, !dbg !4781

if.then240:                                       ; preds = %for.body236
  br label %for.inc258, !dbg !4782

if.end241:                                        ; preds = %for.body236
  %101 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt2, align 8, !dbg !4783
  %call242 = call zeroext i8 @is_gimple_assign(%union.gimple_statement_d* %101), !dbg !4785
  %tobool243 = icmp ne i8 %call242, 0, !dbg !4785
  br i1 %tobool243, label %lor.lhs.false244, label %if.then256, !dbg !4786

lor.lhs.false244:                                 ; preds = %if.end241
  %102 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt2, align 8, !dbg !4787
  %call245 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %102), !dbg !4788
  %cmp246 = icmp ne i32 %call245, 75, !dbg !4789
  br i1 %cmp246, label %if.then256, label %lor.lhs.false248, !dbg !4790

lor.lhs.false248:                                 ; preds = %lor.lhs.false244
  %103 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt2, align 8, !dbg !4791
  %call249 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %103), !dbg !4792
  %104 = load %union.tree_node*, %union.tree_node** %arg1, align 8, !dbg !4793
  %cmp250 = icmp eq %union.tree_node* %call249, %104, !dbg !4794
  br i1 %cmp250, label %if.then256, label %lor.lhs.false252, !dbg !4795

lor.lhs.false252:                                 ; preds = %lor.lhs.false248
  %105 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt2, align 8, !dbg !4796
  %call253 = call %union.tree_node* @gimple_assign_rhs2(%union.gimple_statement_d* %105), !dbg !4797
  %106 = load %union.tree_node*, %union.tree_node** %arg1, align 8, !dbg !4798
  %cmp254 = icmp ne %union.tree_node* %call253, %106, !dbg !4799
  br i1 %cmp254, label %if.then256, label %if.end257, !dbg !4800

if.then256:                                       ; preds = %lor.lhs.false252, %lor.lhs.false248, %lor.lhs.false244, %if.end241
  store i8 1, i8* %fail, align 1, !dbg !4801
  br label %for.end260, !dbg !4803

if.end257:                                        ; preds = %lor.lhs.false252
  br label %for.inc258, !dbg !4804

for.inc258:                                       ; preds = %if.end257, %if.then240
  %call259 = call %struct.ssa_use_operand_d* @next_readonly_imm_use(%struct.immediate_use_iterator_d* %ui), !dbg !4772
  store %struct.ssa_use_operand_d* %call259, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !4772
  br label %for.cond232, !dbg !4772, !llvm.loop !4805

for.end260:                                       ; preds = %if.then256, %for.cond232
  %107 = load i8, i8* %fail, align 1, !dbg !4807
  %tobool261 = icmp ne i8 %107, 0, !dbg !4807
  br i1 %tobool261, label %if.then262, label %if.end263, !dbg !4809

if.then262:                                       ; preds = %for.end260
  br label %for.inc276, !dbg !4810

if.end263:                                        ; preds = %for.end260
  %108 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt1, align 8, !dbg !4811
  %109 = load %union.tree_node*, %union.tree_node** %arg1, align 8, !dbg !4812
  call void @gimple_replace_lhs(%union.gimple_statement_d* %108, %union.tree_node* %109), !dbg !4813
  %110 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt1, align 8, !dbg !4814
  %111 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !4815
  call void @gimple_call_set_fndecl(%union.gimple_statement_d* %110, %union.tree_node* %111), !dbg !4816
  %112 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt1, align 8, !dbg !4817
  call void @update_stmt(%union.gimple_statement_d* %112), !dbg !4818
  %113 = load %union.tree_node*, %union.tree_node** %arg1, align 8, !dbg !4819
  %call264 = call %union.gimple_statement_d* @first_imm_use_stmt(%struct.immediate_use_iterator_d* %ui, %union.tree_node* %113), !dbg !4819
  store %union.gimple_statement_d* %call264, %union.gimple_statement_d** %stmt174, align 8, !dbg !4819
  br label %for.cond265, !dbg !4819

for.cond265:                                      ; preds = %for.inc271, %if.end263
  %call266 = call zeroext i8 @end_imm_use_stmt_p(%struct.immediate_use_iterator_d* %ui), !dbg !4821
  %tobool267 = icmp ne i8 %call266, 0, !dbg !4821
  %lnot268 = xor i1 %tobool267, true, !dbg !4821
  br i1 %lnot268, label %for.body269, label %for.end273, !dbg !4819

for.body269:                                      ; preds = %for.cond265
  %114 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt174, align 8, !dbg !4823
  call void @gimple_assign_set_rhs_code(%union.gimple_statement_d* %114, i32 65), !dbg !4825
  %115 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt174, align 8, !dbg !4826
  %call270 = call zeroext i8 @fold_stmt_inplace(%union.gimple_statement_d* %115), !dbg !4827
  %116 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt174, align 8, !dbg !4828
  call void @update_stmt(%union.gimple_statement_d* %116), !dbg !4829
  br label %for.inc271, !dbg !4830

for.inc271:                                       ; preds = %for.body269
  %call272 = call %union.gimple_statement_d* @next_imm_use_stmt(%struct.immediate_use_iterator_d* %ui), !dbg !4821
  store %union.gimple_statement_d* %call272, %union.gimple_statement_d** %stmt174, align 8, !dbg !4821
  br label %for.cond265, !dbg !4821, !llvm.loop !4831

for.end273:                                       ; preds = %for.cond265
  br label %if.end274, !dbg !4833

if.end274:                                        ; preds = %for.end273, %lor.lhs.false207, %land.lhs.true199, %land.lhs.true196, %if.end192
  br label %if.end275, !dbg !4834

if.end275:                                        ; preds = %if.end274, %land.lhs.true179, %for.body173
  br label %for.inc276, !dbg !4835

for.inc276:                                       ; preds = %if.end275, %if.then262, %if.then229, %if.then191
  call void @gsi_next(%struct.gimple_stmt_iterator* %gsi), !dbg !4836
  br label %for.cond169, !dbg !4837, !llvm.loop !4838

for.end277:                                       ; preds = %for.cond169
  br label %for.inc278, !dbg !4840

for.inc278:                                       ; preds = %for.end277, %if.then166
  %117 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4606
  %next_bb279 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %117, i32 0, i32 6, !dbg !4606
  %118 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb279, align 8, !dbg !4606
  store %struct.basic_block_def* %118, %struct.basic_block_def** %bb, align 8, !dbg !4606
  br label %for.cond43, !dbg !4606, !llvm.loop !4841

for.end280:                                       ; preds = %for.cond43
  call void @free_dominance_info(i32 1), !dbg !4843
  call void @free_dominance_info(i32 2), !dbg !4844
  %119 = load %struct.alloc_pool_def*, %struct.alloc_pool_def** @occ_pool, align 8, !dbg !4845
  call void @free_alloc_pool(%struct.alloc_pool_def* %119), !dbg !4846
  ret i32 0, !dbg !4847
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gate_cse_sincos() #0 !dbg !4848 {
entry:
  %0 = load i32, i32* @linux_uclibc, align 4, !dbg !4849
  %and = and i32 %0, 1, !dbg !4849
  %cmp = icmp eq i32 %and, 0, !dbg !4849
  br i1 %cmp, label %land.rhs, label %lor.lhs.false, !dbg !4850

lor.lhs.false:                                    ; preds = %entry
  %1 = load i32, i32* @linux_uclibc, align 4, !dbg !4851
  %and1 = and i32 %1, 1, !dbg !4851
  %cmp2 = icmp eq i32 %and1, 0, !dbg !4851
  br i1 %cmp2, label %land.rhs, label %land.end, !dbg !4852

land.rhs:                                         ; preds = %lor.lhs.false, %entry
  %2 = load i32, i32* @optimize, align 4, !dbg !4853
  %tobool = icmp ne i32 %2, 0, !dbg !4852
  br label %land.end

land.end:                                         ; preds = %land.rhs, %lor.lhs.false
  %3 = phi i1 [ false, %lor.lhs.false ], [ %tobool, %land.rhs ], !dbg !4854
  %land.ext = zext i1 %3 to i32, !dbg !4852
  %conv = trunc i32 %land.ext to i8, !dbg !4855
  ret i8 %conv, !dbg !4856
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @execute_cse_sincos() #0 !dbg !4857 {
entry:
  %bb = alloca %struct.basic_block_def*, align 8
  %gsi = alloca %struct.gimple_stmt_iterator, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  %fndecl = alloca %union.tree_node*, align 8
  %arg = alloca %union.tree_node*, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !4858, metadata !DIExpression()), !dbg !4859
  call void @calculate_dominance_info(i32 1), !dbg !4860
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4861
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !4861
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !4861
  %1 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !4861
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %1, i32 0, i32 0, !dbg !4861
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !4861
  %next_bb = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 6, !dbg !4861
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb, align 8, !dbg !4861
  store %struct.basic_block_def* %3, %struct.basic_block_def** %bb, align 8, !dbg !4861
  br label %for.cond, !dbg !4861

for.cond:                                         ; preds = %for.inc26, %entry
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4863
  %5 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4863
  %add.ptr1 = getelementptr inbounds %struct.function, %struct.function* %5, i64 0, !dbg !4863
  %cfg2 = getelementptr inbounds %struct.function, %struct.function* %add.ptr1, i32 0, i32 1, !dbg !4863
  %6 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg2, align 8, !dbg !4863
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %6, i32 0, i32 1, !dbg !4863
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !4863
  %cmp = icmp ne %struct.basic_block_def* %4, %7, !dbg !4863
  br i1 %cmp, label %for.body, label %for.end28, !dbg !4861

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %gsi, metadata !4865, metadata !DIExpression()), !dbg !4867
  %8 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4868
  call void @gsi_after_labels(%struct.gimple_stmt_iterator* sret %tmp, %struct.basic_block_def* %8), !dbg !4870
  %9 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !4870
  %10 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !4870
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %9, i8* align 8 %10, i64 24, i1 false), !dbg !4870
  br label %for.cond3, !dbg !4871

for.cond3:                                        ; preds = %for.inc, %for.body
  %call = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !4872
  %tobool = icmp ne i8 %call, 0, !dbg !4874
  %lnot = xor i1 %tobool, true, !dbg !4874
  br i1 %lnot, label %for.body4, label %for.end, !dbg !4875

for.body4:                                        ; preds = %for.cond3
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !4876, metadata !DIExpression()), !dbg !4878
  %call5 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !4879
  store %union.gimple_statement_d* %call5, %union.gimple_statement_d** %stmt, align 8, !dbg !4878
  call void @llvm.dbg.declare(metadata %union.tree_node** %fndecl, metadata !4880, metadata !DIExpression()), !dbg !4881
  %11 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4882
  %call6 = call zeroext i8 @is_gimple_call(%union.gimple_statement_d* %11), !dbg !4884
  %conv = zext i8 %call6 to i32, !dbg !4884
  %tobool7 = icmp ne i32 %conv, 0, !dbg !4884
  br i1 %tobool7, label %land.lhs.true, label %if.end25, !dbg !4885

land.lhs.true:                                    ; preds = %for.body4
  %12 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4886
  %call8 = call %union.tree_node* @gimple_call_lhs(%union.gimple_statement_d* %12), !dbg !4887
  %tobool9 = icmp ne %union.tree_node* %call8, null, !dbg !4887
  br i1 %tobool9, label %land.lhs.true10, label %if.end25, !dbg !4888

land.lhs.true10:                                  ; preds = %land.lhs.true
  %13 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4889
  %call11 = call %union.tree_node* @gimple_call_fndecl(%union.gimple_statement_d* %13), !dbg !4890
  store %union.tree_node* %call11, %union.tree_node** %fndecl, align 8, !dbg !4891
  %tobool12 = icmp ne %union.tree_node* %call11, null, !dbg !4891
  br i1 %tobool12, label %land.lhs.true13, label %if.end25, !dbg !4892

land.lhs.true13:                                  ; preds = %land.lhs.true10
  %14 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !4893
  %function_decl = bitcast %union.tree_node* %14 to %struct.tree_function_decl*, !dbg !4893
  %built_in_class = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl, i32 0, i32 5, !dbg !4893
  %bf.load = load i32, i32* %built_in_class, align 8, !dbg !4893
  %bf.lshr = lshr i32 %bf.load, 11, !dbg !4893
  %bf.clear = and i32 %bf.lshr, 3, !dbg !4893
  %cmp14 = icmp eq i32 %bf.clear, 3, !dbg !4894
  br i1 %cmp14, label %if.then, label %if.end25, !dbg !4895

if.then:                                          ; preds = %land.lhs.true13
  call void @llvm.dbg.declare(metadata %union.tree_node** %arg, metadata !4896, metadata !DIExpression()), !dbg !4898
  %15 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !4899
  %function_decl16 = bitcast %union.tree_node* %15 to %struct.tree_function_decl*, !dbg !4899
  %function_code = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl16, i32 0, i32 5, !dbg !4899
  %bf.load17 = load i32, i32* %function_code, align 8, !dbg !4899
  %bf.clear18 = and i32 %bf.load17, 2047, !dbg !4899
  switch i32 %bf.clear18, label %sw.default [
    i32 30, label %sw.bb
    i32 31, label %sw.bb
    i32 35, label %sw.bb
    i32 219, label %sw.bb
    i32 223, label %sw.bb
    i32 227, label %sw.bb
    i32 285, label %sw.bb
    i32 286, label %sw.bb
    i32 287, label %sw.bb
  ], !dbg !4900

sw.bb:                                            ; preds = %if.then, %if.then, %if.then, %if.then, %if.then, %if.then, %if.then, %if.then, %if.then
  %16 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4901
  %call19 = call %union.tree_node* @gimple_call_arg(%union.gimple_statement_d* %16, i32 0), !dbg !4903
  store %union.tree_node* %call19, %union.tree_node** %arg, align 8, !dbg !4904
  %17 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !4905
  %base = bitcast %union.tree_node* %17 to %struct.tree_base*, !dbg !4905
  %18 = bitcast %struct.tree_base* %base to i64*, !dbg !4905
  %bf.load20 = load i64, i64* %18, align 8, !dbg !4905
  %bf.clear21 = and i64 %bf.load20, 65535, !dbg !4905
  %bf.cast = trunc i64 %bf.clear21 to i32, !dbg !4905
  %cmp22 = icmp eq i32 %bf.cast, 141, !dbg !4907
  br i1 %cmp22, label %if.then24, label %if.end, !dbg !4908

if.then24:                                        ; preds = %sw.bb
  %19 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !4909
  call void @execute_cse_sincos_1(%union.tree_node* %19), !dbg !4910
  br label %if.end, !dbg !4910

if.end:                                           ; preds = %if.then24, %sw.bb
  br label %sw.epilog, !dbg !4911

sw.default:                                       ; preds = %if.then
  br label %sw.epilog, !dbg !4912

sw.epilog:                                        ; preds = %sw.default, %if.end
  br label %if.end25, !dbg !4913

if.end25:                                         ; preds = %sw.epilog, %land.lhs.true13, %land.lhs.true10, %land.lhs.true, %for.body4
  br label %for.inc, !dbg !4914

for.inc:                                          ; preds = %if.end25
  call void @gsi_next(%struct.gimple_stmt_iterator* %gsi), !dbg !4915
  br label %for.cond3, !dbg !4916, !llvm.loop !4917

for.end:                                          ; preds = %for.cond3
  br label %for.inc26, !dbg !4919

for.inc26:                                        ; preds = %for.end
  %20 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4863
  %next_bb27 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %20, i32 0, i32 6, !dbg !4863
  %21 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb27, align 8, !dbg !4863
  store %struct.basic_block_def* %21, %struct.basic_block_def** %bb, align 8, !dbg !4863
  br label %for.cond, !dbg !4863, !llvm.loop !4920

for.end28:                                        ; preds = %for.cond
  call void @free_dominance_info(i32 1), !dbg !4922
  ret i32 0, !dbg !4923
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gate_optimize_bswap() #0 !dbg !4924 {
entry:
  %0 = load i32, i32* @flag_expensive_optimizations, align 4, !dbg !4925
  %tobool = icmp ne i32 %0, 0, !dbg !4925
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !4926

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* @optimize, align 4, !dbg !4927
  %tobool1 = icmp ne i32 %1, 0, !dbg !4926
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %2 = phi i1 [ false, %entry ], [ %tobool1, %land.rhs ], !dbg !4928
  %land.ext = zext i1 %2 to i32, !dbg !4926
  %conv = trunc i32 %land.ext to i8, !dbg !4925
  ret i8 %conv, !dbg !4929
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @execute_optimize_bswap() #0 !dbg !4930 {
entry:
  %retval = alloca i32, align 4
  %bb = alloca %struct.basic_block_def*, align 8
  %bswap32_p = alloca i8, align 1
  %bswap64_p = alloca i8, align 1
  %changed = alloca i8, align 1
  %bswap32_type = alloca %union.tree_node*, align 8
  %bswap64_type = alloca %union.tree_node*, align 8
  %fndecl = alloca %union.tree_node*, align 8
  %fndecl23 = alloca %union.tree_node*, align 8
  %gsi = alloca %struct.gimple_stmt_iterator, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  %bswap_src = alloca %union.tree_node*, align 8
  %bswap_type = alloca %union.tree_node*, align 8
  %bswap_tmp = alloca %union.tree_node*, align 8
  %fndecl39 = alloca %union.tree_node*, align 8
  %type_size = alloca i32, align 4
  %call40 = alloca %union.gimple_statement_d*, align 8
  %convert_stmt = alloca %union.gimple_statement_d*, align 8
  %convert_stmt81 = alloca %union.gimple_statement_d*, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !4931, metadata !DIExpression()), !dbg !4932
  call void @llvm.dbg.declare(metadata i8* %bswap32_p, metadata !4933, metadata !DIExpression()), !dbg !4934
  call void @llvm.dbg.declare(metadata i8* %bswap64_p, metadata !4935, metadata !DIExpression()), !dbg !4936
  call void @llvm.dbg.declare(metadata i8* %changed, metadata !4937, metadata !DIExpression()), !dbg !4938
  store i8 0, i8* %changed, align 1, !dbg !4938
  call void @llvm.dbg.declare(metadata %union.tree_node** %bswap32_type, metadata !4939, metadata !DIExpression()), !dbg !4940
  store %union.tree_node* null, %union.tree_node** %bswap32_type, align 8, !dbg !4940
  call void @llvm.dbg.declare(metadata %union.tree_node** %bswap64_type, metadata !4941, metadata !DIExpression()), !dbg !4942
  store %union.tree_node* null, %union.tree_node** %bswap64_type, align 8, !dbg !4942
  %0 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([721 x %union.tree_node*], [721 x %union.tree_node*]* @built_in_decls, i64 0, i64 419), align 8, !dbg !4943
  %tobool = icmp ne %union.tree_node* %0, null, !dbg !4943
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !4944

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 68, i32 4, i64 16, i32 0), align 16, !dbg !4945
  %cmp = icmp ne i32 %1, 2956, !dbg !4946
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %2 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !4947
  %land.ext = zext i1 %2 to i32, !dbg !4944
  %conv = trunc i32 %land.ext to i8, !dbg !4948
  store i8 %conv, i8* %bswap32_p, align 1, !dbg !4949
  %3 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([721 x %union.tree_node*], [721 x %union.tree_node*]* @built_in_decls, i64 0, i64 420), align 16, !dbg !4950
  %tobool1 = icmp ne %union.tree_node* %3, null, !dbg !4950
  br i1 %tobool1, label %land.rhs2, label %land.end12, !dbg !4951

land.rhs2:                                        ; preds = %land.end
  %4 = load i32, i32* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 68, i32 4, i64 17, i32 0), align 4, !dbg !4952
  %cmp3 = icmp ne i32 %4, 2956, !dbg !4953
  br i1 %cmp3, label %lor.end, label %lor.rhs, !dbg !4954

lor.rhs:                                          ; preds = %land.rhs2
  %5 = load i8, i8* %bswap32_p, align 1, !dbg !4955
  %conv5 = zext i8 %5 to i32, !dbg !4955
  %tobool6 = icmp ne i32 %conv5, 0, !dbg !4955
  br i1 %tobool6, label %land.rhs7, label %land.end10, !dbg !4956

land.rhs7:                                        ; preds = %lor.rhs
  %6 = load i32, i32* @word_mode, align 4, !dbg !4957
  %cmp8 = icmp eq i32 %6, 16, !dbg !4958
  br label %land.end10

land.end10:                                       ; preds = %land.rhs7, %lor.rhs
  %7 = phi i1 [ false, %lor.rhs ], [ %cmp8, %land.rhs7 ], !dbg !4947
  br label %lor.end, !dbg !4954

lor.end:                                          ; preds = %land.end10, %land.rhs2
  %8 = phi i1 [ true, %land.rhs2 ], [ %7, %land.end10 ]
  br label %land.end12

land.end12:                                       ; preds = %lor.end, %land.end
  %9 = phi i1 [ false, %land.end ], [ %8, %lor.end ], !dbg !4947
  %land.ext13 = zext i1 %9 to i32, !dbg !4951
  %conv14 = trunc i32 %land.ext13 to i8, !dbg !4959
  store i8 %conv14, i8* %bswap64_p, align 1, !dbg !4960
  %10 = load i8, i8* %bswap32_p, align 1, !dbg !4961
  %tobool15 = icmp ne i8 %10, 0, !dbg !4961
  br i1 %tobool15, label %if.end, label %land.lhs.true, !dbg !4963

land.lhs.true:                                    ; preds = %land.end12
  %11 = load i8, i8* %bswap64_p, align 1, !dbg !4964
  %tobool16 = icmp ne i8 %11, 0, !dbg !4964
  br i1 %tobool16, label %if.end, label %if.then, !dbg !4965

if.then:                                          ; preds = %land.lhs.true
  store i32 0, i32* %retval, align 4, !dbg !4966
  br label %return, !dbg !4966

if.end:                                           ; preds = %land.lhs.true, %land.end12
  %12 = load i8, i8* %bswap32_p, align 1, !dbg !4967
  %tobool17 = icmp ne i8 %12, 0, !dbg !4967
  br i1 %tobool17, label %if.then18, label %if.end20, !dbg !4969

if.then18:                                        ; preds = %if.end
  call void @llvm.dbg.declare(metadata %union.tree_node** %fndecl, metadata !4970, metadata !DIExpression()), !dbg !4972
  %13 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([721 x %union.tree_node*], [721 x %union.tree_node*]* @built_in_decls, i64 0, i64 419), align 8, !dbg !4973
  store %union.tree_node* %13, %union.tree_node** %fndecl, align 8, !dbg !4972
  %14 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !4974
  %common = bitcast %union.tree_node* %14 to %struct.tree_common*, !dbg !4974
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !4974
  %15 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !4974
  %type19 = bitcast %union.tree_node* %15 to %struct.tree_type*, !dbg !4974
  %values = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type19, i32 0, i32 1, !dbg !4974
  %16 = load %union.tree_node*, %union.tree_node** %values, align 8, !dbg !4974
  %list = bitcast %union.tree_node* %16 to %struct.tree_list*, !dbg !4974
  %value = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list, i32 0, i32 2, !dbg !4974
  %17 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !4974
  store %union.tree_node* %17, %union.tree_node** %bswap32_type, align 8, !dbg !4975
  br label %if.end20, !dbg !4976

if.end20:                                         ; preds = %if.then18, %if.end
  %18 = load i8, i8* %bswap64_p, align 1, !dbg !4977
  %tobool21 = icmp ne i8 %18, 0, !dbg !4977
  br i1 %tobool21, label %if.then22, label %if.end30, !dbg !4979

if.then22:                                        ; preds = %if.end20
  call void @llvm.dbg.declare(metadata %union.tree_node** %fndecl23, metadata !4980, metadata !DIExpression()), !dbg !4982
  %19 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([721 x %union.tree_node*], [721 x %union.tree_node*]* @built_in_decls, i64 0, i64 420), align 16, !dbg !4983
  store %union.tree_node* %19, %union.tree_node** %fndecl23, align 8, !dbg !4982
  %20 = load %union.tree_node*, %union.tree_node** %fndecl23, align 8, !dbg !4984
  %common24 = bitcast %union.tree_node* %20 to %struct.tree_common*, !dbg !4984
  %type25 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common24, i32 0, i32 2, !dbg !4984
  %21 = load %union.tree_node*, %union.tree_node** %type25, align 8, !dbg !4984
  %type26 = bitcast %union.tree_node* %21 to %struct.tree_type*, !dbg !4984
  %values27 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type26, i32 0, i32 1, !dbg !4984
  %22 = load %union.tree_node*, %union.tree_node** %values27, align 8, !dbg !4984
  %list28 = bitcast %union.tree_node* %22 to %struct.tree_list*, !dbg !4984
  %value29 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list28, i32 0, i32 2, !dbg !4984
  %23 = load %union.tree_node*, %union.tree_node** %value29, align 8, !dbg !4984
  store %union.tree_node* %23, %union.tree_node** %bswap64_type, align 8, !dbg !4985
  br label %if.end30, !dbg !4986

if.end30:                                         ; preds = %if.then22, %if.end20
  %24 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4987
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %24, i64 0, !dbg !4987
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !4987
  %25 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !4987
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %25, i32 0, i32 0, !dbg !4987
  %26 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !4987
  %next_bb = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %26, i32 0, i32 6, !dbg !4987
  %27 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb, align 8, !dbg !4987
  store %struct.basic_block_def* %27, %struct.basic_block_def** %bb, align 8, !dbg !4987
  br label %for.cond, !dbg !4987

for.cond:                                         ; preds = %for.inc92, %if.end30
  %28 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4989
  %29 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4989
  %add.ptr31 = getelementptr inbounds %struct.function, %struct.function* %29, i64 0, !dbg !4989
  %cfg32 = getelementptr inbounds %struct.function, %struct.function* %add.ptr31, i32 0, i32 1, !dbg !4989
  %30 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg32, align 8, !dbg !4989
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %30, i32 0, i32 1, !dbg !4989
  %31 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !4989
  %cmp33 = icmp ne %struct.basic_block_def* %28, %31, !dbg !4989
  br i1 %cmp33, label %for.body, label %for.end94, !dbg !4987

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %gsi, metadata !4991, metadata !DIExpression()), !dbg !4993
  %32 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4994
  call void @gsi_after_labels(%struct.gimple_stmt_iterator* sret %tmp, %struct.basic_block_def* %32), !dbg !4996
  %33 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !4996
  %34 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !4996
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %33, i8* align 8 %34, i64 24, i1 false), !dbg !4996
  br label %for.cond35, !dbg !4997

for.cond35:                                       ; preds = %for.inc, %for.body
  %call = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !4998
  %tobool36 = icmp ne i8 %call, 0, !dbg !5000
  %lnot = xor i1 %tobool36, true, !dbg !5000
  br i1 %lnot, label %for.body37, label %for.end, !dbg !5001

for.body37:                                       ; preds = %for.cond35
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !5002, metadata !DIExpression()), !dbg !5004
  %call38 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !5005
  store %union.gimple_statement_d* %call38, %union.gimple_statement_d** %stmt, align 8, !dbg !5004
  call void @llvm.dbg.declare(metadata %union.tree_node** %bswap_src, metadata !5006, metadata !DIExpression()), !dbg !5007
  call void @llvm.dbg.declare(metadata %union.tree_node** %bswap_type, metadata !5008, metadata !DIExpression()), !dbg !5009
  call void @llvm.dbg.declare(metadata %union.tree_node** %bswap_tmp, metadata !5010, metadata !DIExpression()), !dbg !5011
  call void @llvm.dbg.declare(metadata %union.tree_node** %fndecl39, metadata !5012, metadata !DIExpression()), !dbg !5013
  store %union.tree_node* null, %union.tree_node** %fndecl39, align 8, !dbg !5013
  call void @llvm.dbg.declare(metadata i32* %type_size, metadata !5014, metadata !DIExpression()), !dbg !5015
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %call40, metadata !5016, metadata !DIExpression()), !dbg !5017
  %35 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5018
  %call41 = call zeroext i8 @is_gimple_assign(%union.gimple_statement_d* %35), !dbg !5020
  %tobool42 = icmp ne i8 %call41, 0, !dbg !5020
  br i1 %tobool42, label %lor.lhs.false, label %if.then46, !dbg !5021

lor.lhs.false:                                    ; preds = %for.body37
  %36 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5022
  %call43 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %36), !dbg !5023
  %cmp44 = icmp ne i32 %call43, 87, !dbg !5024
  br i1 %cmp44, label %if.then46, label %if.end47, !dbg !5025

if.then46:                                        ; preds = %lor.lhs.false, %for.body37
  br label %for.inc, !dbg !5026

if.end47:                                         ; preds = %lor.lhs.false
  %37 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5027
  %call48 = call %union.tree_node* @gimple_expr_type(%union.gimple_statement_d* %37), !dbg !5027
  %type49 = bitcast %union.tree_node* %call48 to %struct.tree_type*, !dbg !5027
  %precision = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type49, i32 0, i32 6, !dbg !5027
  %bf.load = load i32, i32* %precision, align 4, !dbg !5027
  %bf.clear = and i32 %bf.load, 1023, !dbg !5027
  store i32 %bf.clear, i32* %type_size, align 4, !dbg !5028
  %38 = load i32, i32* %type_size, align 4, !dbg !5029
  switch i32 %38, label %sw.default [
    i32 32, label %sw.bb
    i32 64, label %sw.bb53
  ], !dbg !5030

sw.bb:                                            ; preds = %if.end47
  %39 = load i8, i8* %bswap32_p, align 1, !dbg !5031
  %tobool50 = icmp ne i8 %39, 0, !dbg !5031
  br i1 %tobool50, label %if.then51, label %if.end52, !dbg !5034

if.then51:                                        ; preds = %sw.bb
  %40 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([721 x %union.tree_node*], [721 x %union.tree_node*]* @built_in_decls, i64 0, i64 419), align 8, !dbg !5035
  store %union.tree_node* %40, %union.tree_node** %fndecl39, align 8, !dbg !5037
  %41 = load %union.tree_node*, %union.tree_node** %bswap32_type, align 8, !dbg !5038
  store %union.tree_node* %41, %union.tree_node** %bswap_type, align 8, !dbg !5039
  br label %if.end52, !dbg !5040

if.end52:                                         ; preds = %if.then51, %sw.bb
  br label %sw.epilog, !dbg !5041

sw.bb53:                                          ; preds = %if.end47
  %42 = load i8, i8* %bswap64_p, align 1, !dbg !5042
  %tobool54 = icmp ne i8 %42, 0, !dbg !5042
  br i1 %tobool54, label %if.then55, label %if.end56, !dbg !5044

if.then55:                                        ; preds = %sw.bb53
  %43 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([721 x %union.tree_node*], [721 x %union.tree_node*]* @built_in_decls, i64 0, i64 420), align 16, !dbg !5045
  store %union.tree_node* %43, %union.tree_node** %fndecl39, align 8, !dbg !5047
  %44 = load %union.tree_node*, %union.tree_node** %bswap64_type, align 8, !dbg !5048
  store %union.tree_node* %44, %union.tree_node** %bswap_type, align 8, !dbg !5049
  br label %if.end56, !dbg !5050

if.end56:                                         ; preds = %if.then55, %sw.bb53
  br label %sw.epilog, !dbg !5051

sw.default:                                       ; preds = %if.end47
  br label %for.inc, !dbg !5052

sw.epilog:                                        ; preds = %if.end56, %if.end52
  %45 = load %union.tree_node*, %union.tree_node** %fndecl39, align 8, !dbg !5053
  %tobool57 = icmp ne %union.tree_node* %45, null, !dbg !5053
  br i1 %tobool57, label %if.end59, label %if.then58, !dbg !5055

if.then58:                                        ; preds = %sw.epilog
  br label %for.inc, !dbg !5056

if.end59:                                         ; preds = %sw.epilog
  %46 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5057
  %call60 = call %union.tree_node* @find_bswap(%union.gimple_statement_d* %46), !dbg !5058
  store %union.tree_node* %call60, %union.tree_node** %bswap_src, align 8, !dbg !5059
  %47 = load %union.tree_node*, %union.tree_node** %bswap_src, align 8, !dbg !5060
  %tobool61 = icmp ne %union.tree_node* %47, null, !dbg !5060
  br i1 %tobool61, label %if.end63, label %if.then62, !dbg !5062

if.then62:                                        ; preds = %if.end59
  br label %for.inc, !dbg !5063

if.end63:                                         ; preds = %if.end59
  store i8 1, i8* %changed, align 1, !dbg !5064
  %48 = load %union.tree_node*, %union.tree_node** %bswap_src, align 8, !dbg !5065
  store %union.tree_node* %48, %union.tree_node** %bswap_tmp, align 8, !dbg !5066
  %49 = load %union.tree_node*, %union.tree_node** %bswap_tmp, align 8, !dbg !5067
  %common64 = bitcast %union.tree_node* %49 to %struct.tree_common*, !dbg !5067
  %type65 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common64, i32 0, i32 2, !dbg !5067
  %50 = load %union.tree_node*, %union.tree_node** %type65, align 8, !dbg !5067
  %51 = load %union.tree_node*, %union.tree_node** %bswap_type, align 8, !dbg !5069
  %call66 = call zeroext i8 @useless_type_conversion_p(%union.tree_node* %50, %union.tree_node* %51), !dbg !5070
  %tobool67 = icmp ne i8 %call66, 0, !dbg !5070
  br i1 %tobool67, label %if.end73, label %if.then68, !dbg !5071

if.then68:                                        ; preds = %if.end63
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %convert_stmt, metadata !5072, metadata !DIExpression()), !dbg !5074
  %52 = load %union.tree_node*, %union.tree_node** %bswap_type, align 8, !dbg !5075
  %call69 = call %union.tree_node* @create_tmp_var(%union.tree_node* %52, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.10, i64 0, i64 0)), !dbg !5076
  store %union.tree_node* %call69, %union.tree_node** %bswap_tmp, align 8, !dbg !5077
  %53 = load %union.tree_node*, %union.tree_node** %bswap_tmp, align 8, !dbg !5078
  %call70 = call zeroext i8 @add_referenced_var(%union.tree_node* %53), !dbg !5079
  %54 = load %union.tree_node*, %union.tree_node** %bswap_tmp, align 8, !dbg !5080
  %call71 = call %union.tree_node* @make_ssa_name(%union.tree_node* %54, %union.gimple_statement_d* null), !dbg !5081
  store %union.tree_node* %call71, %union.tree_node** %bswap_tmp, align 8, !dbg !5082
  %55 = load %union.tree_node*, %union.tree_node** %bswap_tmp, align 8, !dbg !5083
  %56 = load %union.tree_node*, %union.tree_node** %bswap_src, align 8, !dbg !5083
  %call72 = call %union.gimple_statement_d* @gimple_build_assign_with_ops_stat(i32 113, %union.tree_node* %55, %union.tree_node* %56, %union.tree_node* null), !dbg !5083
  store %union.gimple_statement_d* %call72, %union.gimple_statement_d** %convert_stmt, align 8, !dbg !5084
  %57 = load %union.gimple_statement_d*, %union.gimple_statement_d** %convert_stmt, align 8, !dbg !5085
  call void @gsi_insert_before(%struct.gimple_stmt_iterator* %gsi, %union.gimple_statement_d* %57, i32 1), !dbg !5086
  br label %if.end73, !dbg !5087

if.end73:                                         ; preds = %if.then68, %if.end63
  %58 = load %union.tree_node*, %union.tree_node** %fndecl39, align 8, !dbg !5088
  %59 = load %union.tree_node*, %union.tree_node** %bswap_tmp, align 8, !dbg !5089
  %call74 = call %union.gimple_statement_d* (%union.tree_node*, i32, ...) @gimple_build_call(%union.tree_node* %58, i32 1, %union.tree_node* %59), !dbg !5090
  store %union.gimple_statement_d* %call74, %union.gimple_statement_d** %call40, align 8, !dbg !5091
  %60 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5092
  %call75 = call %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %60), !dbg !5093
  store %union.tree_node* %call75, %union.tree_node** %bswap_tmp, align 8, !dbg !5094
  %61 = load %union.tree_node*, %union.tree_node** %bswap_tmp, align 8, !dbg !5095
  %common76 = bitcast %union.tree_node* %61 to %struct.tree_common*, !dbg !5095
  %type77 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common76, i32 0, i32 2, !dbg !5095
  %62 = load %union.tree_node*, %union.tree_node** %type77, align 8, !dbg !5095
  %63 = load %union.tree_node*, %union.tree_node** %bswap_type, align 8, !dbg !5097
  %call78 = call zeroext i8 @useless_type_conversion_p(%union.tree_node* %62, %union.tree_node* %63), !dbg !5098
  %tobool79 = icmp ne i8 %call78, 0, !dbg !5098
  br i1 %tobool79, label %if.end87, label %if.then80, !dbg !5099

if.then80:                                        ; preds = %if.end73
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %convert_stmt81, metadata !5100, metadata !DIExpression()), !dbg !5102
  %64 = load %union.tree_node*, %union.tree_node** %bswap_type, align 8, !dbg !5103
  %call82 = call %union.tree_node* @create_tmp_var(%union.tree_node* %64, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.11, i64 0, i64 0)), !dbg !5104
  store %union.tree_node* %call82, %union.tree_node** %bswap_tmp, align 8, !dbg !5105
  %65 = load %union.tree_node*, %union.tree_node** %bswap_tmp, align 8, !dbg !5106
  %call83 = call zeroext i8 @add_referenced_var(%union.tree_node* %65), !dbg !5107
  %66 = load %union.tree_node*, %union.tree_node** %bswap_tmp, align 8, !dbg !5108
  %call84 = call %union.tree_node* @make_ssa_name(%union.tree_node* %66, %union.gimple_statement_d* null), !dbg !5109
  store %union.tree_node* %call84, %union.tree_node** %bswap_tmp, align 8, !dbg !5110
  %67 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5111
  %call85 = call %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %67), !dbg !5111
  %68 = load %union.tree_node*, %union.tree_node** %bswap_tmp, align 8, !dbg !5111
  %call86 = call %union.gimple_statement_d* @gimple_build_assign_with_ops_stat(i32 113, %union.tree_node* %call85, %union.tree_node* %68, %union.tree_node* null), !dbg !5111
  store %union.gimple_statement_d* %call86, %union.gimple_statement_d** %convert_stmt81, align 8, !dbg !5112
  %69 = load %union.gimple_statement_d*, %union.gimple_statement_d** %convert_stmt81, align 8, !dbg !5113
  call void @gsi_insert_after(%struct.gimple_stmt_iterator* %gsi, %union.gimple_statement_d* %69, i32 1), !dbg !5114
  br label %if.end87, !dbg !5115

if.end87:                                         ; preds = %if.then80, %if.end73
  %70 = load %union.gimple_statement_d*, %union.gimple_statement_d** %call40, align 8, !dbg !5116
  %71 = load %union.tree_node*, %union.tree_node** %bswap_tmp, align 8, !dbg !5117
  call void @gimple_call_set_lhs(%union.gimple_statement_d* %70, %union.tree_node* %71), !dbg !5118
  %72 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5119
  %tobool88 = icmp ne %struct._IO_FILE* %72, null, !dbg !5119
  br i1 %tobool88, label %if.then89, label %if.end91, !dbg !5121

if.then89:                                        ; preds = %if.end87
  %73 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5122
  %74 = load i32, i32* %type_size, align 4, !dbg !5124
  %call90 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %73, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.12, i64 0, i64 0), i32 %74), !dbg !5125
  %75 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5126
  %76 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5127
  call void @print_gimple_stmt(%struct._IO_FILE* %75, %union.gimple_statement_d* %76, i32 0, i32 0), !dbg !5128
  br label %if.end91, !dbg !5129

if.end91:                                         ; preds = %if.then89, %if.end87
  %77 = load %union.gimple_statement_d*, %union.gimple_statement_d** %call40, align 8, !dbg !5130
  call void @gsi_insert_after(%struct.gimple_stmt_iterator* %gsi, %union.gimple_statement_d* %77, i32 1), !dbg !5131
  call void @gsi_remove(%struct.gimple_stmt_iterator* %gsi, i8 zeroext 1), !dbg !5132
  br label %for.inc, !dbg !5133

for.inc:                                          ; preds = %if.end91, %if.then62, %if.then58, %sw.default, %if.then46
  call void @gsi_next(%struct.gimple_stmt_iterator* %gsi), !dbg !5134
  br label %for.cond35, !dbg !5135, !llvm.loop !5136

for.end:                                          ; preds = %for.cond35
  br label %for.inc92, !dbg !5138

for.inc92:                                        ; preds = %for.end
  %78 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4989
  %next_bb93 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %78, i32 0, i32 6, !dbg !4989
  %79 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb93, align 8, !dbg !4989
  store %struct.basic_block_def* %79, %struct.basic_block_def** %bb, align 8, !dbg !4989
  br label %for.cond, !dbg !4989, !llvm.loop !5139

for.end94:                                        ; preds = %for.cond
  %80 = load i8, i8* %changed, align 1, !dbg !5141
  %conv95 = zext i8 %80 to i32, !dbg !5141
  %tobool96 = icmp ne i32 %conv95, 0, !dbg !5141
  %81 = zext i1 %tobool96 to i64, !dbg !5141
  %cond = select i1 %tobool96, i32 2069, i32 0, !dbg !5141
  store i32 %cond, i32* %retval, align 4, !dbg !5142
  br label %return, !dbg !5142

return:                                           ; preds = %for.end94, %if.then
  %82 = load i32, i32* %retval, align 4, !dbg !5143
  ret i32 %82, !dbg !5143
}

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare dso_local %struct.alloc_pool_def* @create_alloc_pool(i8*, i64, i64) #2

declare dso_local void @calculate_dominance_info(i32) #2

declare dso_local %union.tree_node* @gimple_default_def(%struct.function*, %union.tree_node*) #2

declare dso_local zeroext i8 @is_gimple_reg(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @execute_cse_reciprocals_1(%struct.gimple_stmt_iterator* %def_gsi, %union.tree_node* %def) #0 !dbg !5144 {
entry:
  %def_gsi.addr = alloca %struct.gimple_stmt_iterator*, align 8
  %def.addr = alloca %union.tree_node*, align 8
  %use_p = alloca %struct.ssa_use_operand_d*, align 8
  %use_iter = alloca %struct.immediate_use_iterator_d, align 8
  %occ = alloca %struct.occurrence*, align 8
  %count = alloca i32, align 4
  %threshold = alloca i32, align 4
  %use_stmt = alloca %union.gimple_statement_d*, align 8
  %use_stmt57 = alloca %union.gimple_statement_d*, align 8
  store %struct.gimple_stmt_iterator* %def_gsi, %struct.gimple_stmt_iterator** %def_gsi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator** %def_gsi.addr, metadata !5148, metadata !DIExpression()), !dbg !5149
  store %union.tree_node* %def, %union.tree_node** %def.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %def.addr, metadata !5150, metadata !DIExpression()), !dbg !5151
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %use_p, metadata !5152, metadata !DIExpression()), !dbg !5153
  call void @llvm.dbg.declare(metadata %struct.immediate_use_iterator_d* %use_iter, metadata !5154, metadata !DIExpression()), !dbg !5155
  call void @llvm.dbg.declare(metadata %struct.occurrence** %occ, metadata !5156, metadata !DIExpression()), !dbg !5157
  call void @llvm.dbg.declare(metadata i32* %count, metadata !5158, metadata !DIExpression()), !dbg !5159
  store i32 0, i32* %count, align 4, !dbg !5159
  call void @llvm.dbg.declare(metadata i32* %threshold, metadata !5160, metadata !DIExpression()), !dbg !5161
  %0 = load %union.tree_node*, %union.tree_node** %def.addr, align 8, !dbg !5162
  %common = bitcast %union.tree_node* %0 to %struct.tree_common*, !dbg !5162
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !5162
  %1 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5162
  %base = bitcast %union.tree_node* %1 to %struct.tree_base*, !dbg !5162
  %2 = bitcast %struct.tree_base* %base to i64*, !dbg !5162
  %bf.load = load i64, i64* %2, align 8, !dbg !5162
  %bf.clear = and i64 %bf.load, 65535, !dbg !5162
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !5162
  %cmp = icmp eq i32 %bf.cast, 9, !dbg !5162
  br i1 %cmp, label %land.lhs.true25, label %lor.lhs.false, !dbg !5162

lor.lhs.false:                                    ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %def.addr, align 8, !dbg !5162
  %common1 = bitcast %union.tree_node* %3 to %struct.tree_common*, !dbg !5162
  %type2 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1, i32 0, i32 2, !dbg !5162
  %4 = load %union.tree_node*, %union.tree_node** %type2, align 8, !dbg !5162
  %base3 = bitcast %union.tree_node* %4 to %struct.tree_base*, !dbg !5162
  %5 = bitcast %struct.tree_base* %base3 to i64*, !dbg !5162
  %bf.load4 = load i64, i64* %5, align 8, !dbg !5162
  %bf.clear5 = and i64 %bf.load4, 65535, !dbg !5162
  %bf.cast6 = trunc i64 %bf.clear5 to i32, !dbg !5162
  %cmp7 = icmp eq i32 %bf.cast6, 13, !dbg !5162
  br i1 %cmp7, label %land.lhs.true, label %lor.lhs.false8, !dbg !5162

lor.lhs.false8:                                   ; preds = %lor.lhs.false
  %6 = load %union.tree_node*, %union.tree_node** %def.addr, align 8, !dbg !5162
  %common9 = bitcast %union.tree_node* %6 to %struct.tree_common*, !dbg !5162
  %type10 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common9, i32 0, i32 2, !dbg !5162
  %7 = load %union.tree_node*, %union.tree_node** %type10, align 8, !dbg !5162
  %base11 = bitcast %union.tree_node* %7 to %struct.tree_base*, !dbg !5162
  %8 = bitcast %struct.tree_base* %base11 to i64*, !dbg !5162
  %bf.load12 = load i64, i64* %8, align 8, !dbg !5162
  %bf.clear13 = and i64 %bf.load12, 65535, !dbg !5162
  %bf.cast14 = trunc i64 %bf.clear13 to i32, !dbg !5162
  %cmp15 = icmp eq i32 %bf.cast14, 14, !dbg !5162
  br i1 %cmp15, label %land.lhs.true, label %cond.true, !dbg !5162

land.lhs.true:                                    ; preds = %lor.lhs.false8, %lor.lhs.false
  %9 = load %union.tree_node*, %union.tree_node** %def.addr, align 8, !dbg !5162
  %common16 = bitcast %union.tree_node* %9 to %struct.tree_common*, !dbg !5162
  %type17 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common16, i32 0, i32 2, !dbg !5162
  %10 = load %union.tree_node*, %union.tree_node** %type17, align 8, !dbg !5162
  %common18 = bitcast %union.tree_node* %10 to %struct.tree_common*, !dbg !5162
  %type19 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common18, i32 0, i32 2, !dbg !5162
  %11 = load %union.tree_node*, %union.tree_node** %type19, align 8, !dbg !5162
  %base20 = bitcast %union.tree_node* %11 to %struct.tree_base*, !dbg !5162
  %12 = bitcast %struct.tree_base* %base20 to i64*, !dbg !5162
  %bf.load21 = load i64, i64* %12, align 8, !dbg !5162
  %bf.clear22 = and i64 %bf.load21, 65535, !dbg !5162
  %bf.cast23 = trunc i64 %bf.clear22 to i32, !dbg !5162
  %cmp24 = icmp eq i32 %bf.cast23, 9, !dbg !5162
  br i1 %cmp24, label %land.lhs.true25, label %cond.true, !dbg !5162

land.lhs.true25:                                  ; preds = %land.lhs.true, %entry
  %13 = load %union.tree_node*, %union.tree_node** %def.addr, align 8, !dbg !5162
  %call = call zeroext i8 @is_gimple_reg(%union.tree_node* %13), !dbg !5162
  %conv = zext i8 %call to i32, !dbg !5162
  %tobool = icmp ne i32 %conv, 0, !dbg !5162
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !5162

cond.true:                                        ; preds = %land.lhs.true25, %land.lhs.true, %lor.lhs.false8
  call void @fancy_abort(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.4, i64 0, i64 0), i32 411, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0)), !dbg !5162
  br label %cond.end, !dbg !5162

cond.false:                                       ; preds = %land.lhs.true25
  br label %cond.end, !dbg !5162

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !5162
  %14 = load %union.tree_node*, %union.tree_node** %def.addr, align 8, !dbg !5163
  %call26 = call %struct.ssa_use_operand_d* @first_readonly_imm_use(%struct.immediate_use_iterator_d* %use_iter, %union.tree_node* %14), !dbg !5163
  store %struct.ssa_use_operand_d* %call26, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !5163
  br label %for.cond, !dbg !5163

for.cond:                                         ; preds = %for.inc, %cond.end
  %call27 = call zeroext i8 @end_readonly_imm_use_p(%struct.immediate_use_iterator_d* %use_iter), !dbg !5165
  %tobool28 = icmp ne i8 %call27, 0, !dbg !5165
  %lnot = xor i1 %tobool28, true, !dbg !5165
  br i1 %lnot, label %for.body, label %for.end, !dbg !5163

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %use_stmt, metadata !5167, metadata !DIExpression()), !dbg !5169
  %15 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !5170
  %loc = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %15, i32 0, i32 2, !dbg !5170
  %stmt = bitcast %union.anon* %loc to %union.gimple_statement_d**, !dbg !5170
  %16 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5170
  store %union.gimple_statement_d* %16, %union.gimple_statement_d** %use_stmt, align 8, !dbg !5169
  %17 = load %union.gimple_statement_d*, %union.gimple_statement_d** %use_stmt, align 8, !dbg !5171
  %18 = load %union.tree_node*, %union.tree_node** %def.addr, align 8, !dbg !5173
  %call29 = call zeroext i8 @is_division_by(%union.gimple_statement_d* %17, %union.tree_node* %18), !dbg !5174
  %tobool30 = icmp ne i8 %call29, 0, !dbg !5174
  br i1 %tobool30, label %if.then, label %if.end, !dbg !5175

if.then:                                          ; preds = %for.body
  %19 = load %union.gimple_statement_d*, %union.gimple_statement_d** %use_stmt, align 8, !dbg !5176
  %call31 = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %19), !dbg !5178
  call void @register_division_in(%struct.basic_block_def* %call31), !dbg !5179
  %20 = load i32, i32* %count, align 4, !dbg !5180
  %inc = add nsw i32 %20, 1, !dbg !5180
  store i32 %inc, i32* %count, align 4, !dbg !5180
  br label %if.end, !dbg !5181

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc, !dbg !5182

for.inc:                                          ; preds = %if.end
  %call32 = call %struct.ssa_use_operand_d* @next_readonly_imm_use(%struct.immediate_use_iterator_d* %use_iter), !dbg !5165
  store %struct.ssa_use_operand_d* %call32, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !5165
  br label %for.cond, !dbg !5165, !llvm.loop !5183

for.end:                                          ; preds = %for.cond
  %21 = load i32 (i32)*, i32 (i32)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 54), align 8, !dbg !5185
  %22 = load %union.tree_node*, %union.tree_node** %def.addr, align 8, !dbg !5186
  %common33 = bitcast %union.tree_node* %22 to %struct.tree_common*, !dbg !5186
  %type34 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common33, i32 0, i32 2, !dbg !5186
  %23 = load %union.tree_node*, %union.tree_node** %type34, align 8, !dbg !5186
  %base35 = bitcast %union.tree_node* %23 to %struct.tree_base*, !dbg !5186
  %24 = bitcast %struct.tree_base* %base35 to i64*, !dbg !5186
  %bf.load36 = load i64, i64* %24, align 8, !dbg !5186
  %bf.clear37 = and i64 %bf.load36, 65535, !dbg !5186
  %bf.cast38 = trunc i64 %bf.clear37 to i32, !dbg !5186
  %cmp39 = icmp eq i32 %bf.cast38, 14, !dbg !5186
  br i1 %cmp39, label %cond.true41, label %cond.false45, !dbg !5186

cond.true41:                                      ; preds = %for.end
  %25 = load %union.tree_node*, %union.tree_node** %def.addr, align 8, !dbg !5186
  %common42 = bitcast %union.tree_node* %25 to %struct.tree_common*, !dbg !5186
  %type43 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common42, i32 0, i32 2, !dbg !5186
  %26 = load %union.tree_node*, %union.tree_node** %type43, align 8, !dbg !5186
  %call44 = call i32 @vector_type_mode(%union.tree_node* %26), !dbg !5186
  br label %cond.end51, !dbg !5186

cond.false45:                                     ; preds = %for.end
  %27 = load %union.tree_node*, %union.tree_node** %def.addr, align 8, !dbg !5186
  %common46 = bitcast %union.tree_node* %27 to %struct.tree_common*, !dbg !5186
  %type47 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common46, i32 0, i32 2, !dbg !5186
  %28 = load %union.tree_node*, %union.tree_node** %type47, align 8, !dbg !5186
  %type48 = bitcast %union.tree_node* %28 to %struct.tree_type*, !dbg !5186
  %mode = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type48, i32 0, i32 6, !dbg !5186
  %bf.load49 = load i32, i32* %mode, align 4, !dbg !5186
  %bf.lshr = lshr i32 %bf.load49, 16, !dbg !5186
  %bf.clear50 = and i32 %bf.lshr, 255, !dbg !5186
  br label %cond.end51, !dbg !5186

cond.end51:                                       ; preds = %cond.false45, %cond.true41
  %cond52 = phi i32 [ %call44, %cond.true41 ], [ %bf.clear50, %cond.false45 ], !dbg !5186
  %call53 = call i32 %21(i32 %cond52), !dbg !5187
  store i32 %call53, i32* %threshold, align 4, !dbg !5188
  %29 = load i32, i32* %count, align 4, !dbg !5189
  %30 = load i32, i32* %threshold, align 4, !dbg !5191
  %cmp54 = icmp sge i32 %29, %30, !dbg !5192
  br i1 %cmp54, label %if.then56, label %if.end85, !dbg !5193

if.then56:                                        ; preds = %cond.end51
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %use_stmt57, metadata !5194, metadata !DIExpression()), !dbg !5196
  %31 = load %struct.occurrence*, %struct.occurrence** @occ_head, align 8, !dbg !5197
  store %struct.occurrence* %31, %struct.occurrence** %occ, align 8, !dbg !5199
  br label %for.cond58, !dbg !5200

for.cond58:                                       ; preds = %for.inc61, %if.then56
  %32 = load %struct.occurrence*, %struct.occurrence** %occ, align 8, !dbg !5201
  %tobool59 = icmp ne %struct.occurrence* %32, null, !dbg !5203
  br i1 %tobool59, label %for.body60, label %for.end62, !dbg !5203

for.body60:                                       ; preds = %for.cond58
  %33 = load %struct.occurrence*, %struct.occurrence** %occ, align 8, !dbg !5204
  call void @compute_merit(%struct.occurrence* %33), !dbg !5206
  %34 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %def_gsi.addr, align 8, !dbg !5207
  %35 = load %struct.occurrence*, %struct.occurrence** %occ, align 8, !dbg !5208
  %36 = load %union.tree_node*, %union.tree_node** %def.addr, align 8, !dbg !5209
  %37 = load i32, i32* %threshold, align 4, !dbg !5210
  call void @insert_reciprocals(%struct.gimple_stmt_iterator* %34, %struct.occurrence* %35, %union.tree_node* %36, %union.tree_node* null, i32 %37), !dbg !5211
  br label %for.inc61, !dbg !5212

for.inc61:                                        ; preds = %for.body60
  %38 = load %struct.occurrence*, %struct.occurrence** %occ, align 8, !dbg !5213
  %next = getelementptr inbounds %struct.occurrence, %struct.occurrence* %38, i32 0, i32 4, !dbg !5214
  %39 = load %struct.occurrence*, %struct.occurrence** %next, align 8, !dbg !5214
  store %struct.occurrence* %39, %struct.occurrence** %occ, align 8, !dbg !5215
  br label %for.cond58, !dbg !5216, !llvm.loop !5217

for.end62:                                        ; preds = %for.cond58
  %40 = load %union.tree_node*, %union.tree_node** %def.addr, align 8, !dbg !5219
  %call63 = call %union.gimple_statement_d* @first_imm_use_stmt(%struct.immediate_use_iterator_d* %use_iter, %union.tree_node* %40), !dbg !5219
  store %union.gimple_statement_d* %call63, %union.gimple_statement_d** %use_stmt57, align 8, !dbg !5219
  br label %for.cond64, !dbg !5219

for.cond64:                                       ; preds = %for.inc82, %for.end62
  %call65 = call zeroext i8 @end_imm_use_stmt_p(%struct.immediate_use_iterator_d* %use_iter), !dbg !5221
  %tobool66 = icmp ne i8 %call65, 0, !dbg !5221
  %lnot67 = xor i1 %tobool66, true, !dbg !5221
  br i1 %lnot67, label %for.body68, label %for.end84, !dbg !5219

for.body68:                                       ; preds = %for.cond64
  %41 = load %union.gimple_statement_d*, %union.gimple_statement_d** %use_stmt57, align 8, !dbg !5223
  %42 = load %union.tree_node*, %union.tree_node** %def.addr, align 8, !dbg !5226
  %call69 = call zeroext i8 @is_division_by(%union.gimple_statement_d* %41, %union.tree_node* %42), !dbg !5227
  %tobool70 = icmp ne i8 %call69, 0, !dbg !5227
  br i1 %tobool70, label %if.then71, label %if.end81, !dbg !5228

if.then71:                                        ; preds = %for.body68
  %call72 = call %struct.ssa_use_operand_d* @first_imm_use_on_stmt(%struct.immediate_use_iterator_d* %use_iter), !dbg !5229
  store %struct.ssa_use_operand_d* %call72, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !5229
  br label %for.cond73, !dbg !5229

for.cond73:                                       ; preds = %for.inc78, %if.then71
  %call74 = call zeroext i8 @end_imm_use_on_stmt_p(%struct.immediate_use_iterator_d* %use_iter), !dbg !5232
  %tobool75 = icmp ne i8 %call74, 0, !dbg !5232
  %lnot76 = xor i1 %tobool75, true, !dbg !5232
  br i1 %lnot76, label %for.body77, label %for.end80, !dbg !5229

for.body77:                                       ; preds = %for.cond73
  %43 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !5234
  call void @replace_reciprocal(%struct.ssa_use_operand_d* %43), !dbg !5235
  br label %for.inc78, !dbg !5235

for.inc78:                                        ; preds = %for.body77
  %call79 = call %struct.ssa_use_operand_d* @next_imm_use_on_stmt(%struct.immediate_use_iterator_d* %use_iter), !dbg !5232
  store %struct.ssa_use_operand_d* %call79, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !5232
  br label %for.cond73, !dbg !5232, !llvm.loop !5236

for.end80:                                        ; preds = %for.cond73
  br label %if.end81, !dbg !5238

if.end81:                                         ; preds = %for.end80, %for.body68
  br label %for.inc82, !dbg !5239

for.inc82:                                        ; preds = %if.end81
  %call83 = call %union.gimple_statement_d* @next_imm_use_stmt(%struct.immediate_use_iterator_d* %use_iter), !dbg !5221
  store %union.gimple_statement_d* %call83, %union.gimple_statement_d** %use_stmt57, align 8, !dbg !5221
  br label %for.cond64, !dbg !5221, !llvm.loop !5240

for.end84:                                        ; preds = %for.cond64
  br label %if.end85, !dbg !5242

if.end85:                                         ; preds = %for.end84, %cond.end51
  %44 = load %struct.occurrence*, %struct.occurrence** @occ_head, align 8, !dbg !5243
  store %struct.occurrence* %44, %struct.occurrence** %occ, align 8, !dbg !5245
  br label %for.cond86, !dbg !5246

for.cond86:                                       ; preds = %for.body88, %if.end85
  %45 = load %struct.occurrence*, %struct.occurrence** %occ, align 8, !dbg !5247
  %tobool87 = icmp ne %struct.occurrence* %45, null, !dbg !5249
  br i1 %tobool87, label %for.body88, label %for.end90, !dbg !5249

for.body88:                                       ; preds = %for.cond86
  %46 = load %struct.occurrence*, %struct.occurrence** %occ, align 8, !dbg !5250
  %call89 = call %struct.occurrence* @free_bb(%struct.occurrence* %46), !dbg !5251
  store %struct.occurrence* %call89, %struct.occurrence** %occ, align 8, !dbg !5252
  br label %for.cond86, !dbg !5253, !llvm.loop !5254

for.end90:                                        ; preds = %for.cond86
  store %struct.occurrence* null, %struct.occurrence** @occ_head, align 8, !dbg !5256
  ret void, !dbg !5257
}

declare dso_local void @gsi_start_phis(%struct.gimple_stmt_iterator* sret, %struct.basic_block_def*) #2

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #3

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %i) #0 !dbg !5258 {
entry:
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %i, metadata !5261, metadata !DIExpression()), !dbg !5262
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %i, i32 0, i32 0, !dbg !5263
  %0 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !5263
  %cmp = icmp eq %struct.gimple_seq_node_d* %0, null, !dbg !5264
  %conv = zext i1 %cmp to i32, !dbg !5264
  %conv1 = trunc i32 %conv to i8, !dbg !5265
  ret i8 %conv1, !dbg !5266
}

; Function Attrs: noinline nounwind uwtable
define internal %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %i) #0 !dbg !5267 {
entry:
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %i, metadata !5270, metadata !DIExpression()), !dbg !5271
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %i, i32 0, i32 0, !dbg !5272
  %0 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !5272
  %stmt = getelementptr inbounds %struct.gimple_seq_node_d, %struct.gimple_seq_node_d* %0, i32 0, i32 0, !dbg !5273
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5273
  ret %union.gimple_statement_d* %1, !dbg !5274
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @get_def_from_ptr(%union.tree_node** %def) #0 !dbg !5275 {
entry:
  %def.addr = alloca %union.tree_node**, align 8
  store %union.tree_node** %def, %union.tree_node*** %def.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %def.addr, metadata !5280, metadata !DIExpression()), !dbg !5281
  %0 = load %union.tree_node**, %union.tree_node*** %def.addr, align 8, !dbg !5282
  %1 = load %union.tree_node*, %union.tree_node** %0, align 8, !dbg !5283
  ret %union.tree_node* %1, !dbg !5284
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @gimple_phi_result_ptr(%union.gimple_statement_d* %gs) #0 !dbg !5285 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5288, metadata !DIExpression()), !dbg !5289
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5290
  %gimple_phi = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_phi*, !dbg !5291
  %result = getelementptr inbounds %struct.gimple_statement_phi, %struct.gimple_statement_phi* %gimple_phi, i32 0, i32 3, !dbg !5292
  ret %union.tree_node** %result, !dbg !5293
}

; Function Attrs: noinline nounwind uwtable
define internal void @gsi_next(%struct.gimple_stmt_iterator* %i) #0 !dbg !5294 {
entry:
  %i.addr = alloca %struct.gimple_stmt_iterator*, align 8
  store %struct.gimple_stmt_iterator* %i, %struct.gimple_stmt_iterator** %i.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator** %i.addr, metadata !5297, metadata !DIExpression()), !dbg !5298
  %0 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %i.addr, align 8, !dbg !5299
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %0, i32 0, i32 0, !dbg !5300
  %1 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !5300
  %next = getelementptr inbounds %struct.gimple_seq_node_d, %struct.gimple_seq_node_d* %1, i32 0, i32 2, !dbg !5301
  %2 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %next, align 8, !dbg !5301
  %3 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %i.addr, align 8, !dbg !5302
  %ptr1 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %3, i32 0, i32 0, !dbg !5303
  store %struct.gimple_seq_node_d* %2, %struct.gimple_seq_node_d** %ptr1, align 8, !dbg !5304
  ret void, !dbg !5305
}

; Function Attrs: noinline nounwind uwtable
define internal void @gsi_after_labels(%struct.gimple_stmt_iterator* noalias sret %agg.result, %struct.basic_block_def* %bb) #0 !dbg !5306 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !5309, metadata !DIExpression()), !dbg !5310
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %agg.result, metadata !5311, metadata !DIExpression()), !dbg !5312
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5313
  call void @gsi_start_bb(%struct.gimple_stmt_iterator* sret %agg.result, %struct.basic_block_def* %0), !dbg !5314
  br label %while.cond, !dbg !5315

while.cond:                                       ; preds = %while.body, %entry
  %call = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %agg.result), !dbg !5316
  %tobool = icmp ne i8 %call, 0, !dbg !5316
  br i1 %tobool, label %land.end, label %land.rhs, !dbg !5317

land.rhs:                                         ; preds = %while.cond
  %call1 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %agg.result), !dbg !5318
  %call2 = call i32 @gimple_code(%union.gimple_statement_d* %call1), !dbg !5319
  %cmp = icmp eq i32 %call2, 4, !dbg !5320
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %1 = phi i1 [ false, %while.cond ], [ %cmp, %land.rhs ], !dbg !5321
  br i1 %1, label %while.body, label %while.end, !dbg !5315

while.body:                                       ; preds = %land.end
  call void @gsi_next(%struct.gimple_stmt_iterator* %agg.result), !dbg !5322
  br label %while.cond, !dbg !5315, !llvm.loop !5323

while.end:                                        ; preds = %land.end
  ret void, !dbg !5325
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_has_lhs(%union.gimple_statement_d* %stmt) #0 !dbg !5326 {
entry:
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !5329, metadata !DIExpression()), !dbg !5330
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5331
  %call = call zeroext i8 @is_gimple_assign(%union.gimple_statement_d* %0), !dbg !5332
  %conv = zext i8 %call to i32, !dbg !5332
  %tobool = icmp ne i32 %conv, 0, !dbg !5332
  br i1 %tobool, label %lor.end, label %lor.rhs, !dbg !5333

lor.rhs:                                          ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5334
  %call1 = call zeroext i8 @is_gimple_call(%union.gimple_statement_d* %1), !dbg !5335
  %conv2 = zext i8 %call1 to i32, !dbg !5335
  %tobool3 = icmp ne i32 %conv2, 0, !dbg !5335
  br i1 %tobool3, label %land.rhs, label %land.end, !dbg !5336

land.rhs:                                         ; preds = %lor.rhs
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5337
  %call4 = call %union.tree_node* @gimple_call_lhs(%union.gimple_statement_d* %2), !dbg !5338
  %cmp = icmp ne %union.tree_node* %call4, null, !dbg !5339
  br label %land.end

land.end:                                         ; preds = %land.rhs, %lor.rhs
  %3 = phi i1 [ false, %lor.rhs ], [ %cmp, %land.rhs ], !dbg !5340
  br label %lor.end, !dbg !5333

lor.end:                                          ; preds = %land.end, %entry
  %4 = phi i1 [ true, %entry ], [ %3, %land.end ]
  %lor.ext = zext i1 %4 to i32, !dbg !5333
  %conv6 = trunc i32 %lor.ext to i8, !dbg !5341
  ret i8 %conv6, !dbg !5342
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @single_ssa_tree_operand(%union.gimple_statement_d* %stmt, i32 %flags) #0 !dbg !5343 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %flags.addr = alloca i32, align 4
  %var = alloca %union.tree_node*, align 8
  %iter = alloca %struct.ssa_operand_iterator_d, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !5346, metadata !DIExpression()), !dbg !5347
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !5348, metadata !DIExpression()), !dbg !5349
  call void @llvm.dbg.declare(metadata %union.tree_node** %var, metadata !5350, metadata !DIExpression()), !dbg !5351
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d* %iter, metadata !5352, metadata !DIExpression()), !dbg !5365
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5366
  %1 = load i32, i32* %flags.addr, align 4, !dbg !5367
  %call = call %union.tree_node* @op_iter_init_tree(%struct.ssa_operand_iterator_d* %iter, %union.gimple_statement_d* %0, i32 %1), !dbg !5368
  store %union.tree_node* %call, %union.tree_node** %var, align 8, !dbg !5369
  %call1 = call zeroext i8 @op_iter_done(%struct.ssa_operand_iterator_d* %iter), !dbg !5370
  %tobool = icmp ne i8 %call1, 0, !dbg !5370
  br i1 %tobool, label %if.then, label %if.end, !dbg !5372

if.then:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !5373
  br label %return, !dbg !5373

if.end:                                           ; preds = %entry
  %call2 = call %union.tree_node* @op_iter_next_tree(%struct.ssa_operand_iterator_d* %iter), !dbg !5374
  %call3 = call zeroext i8 @op_iter_done(%struct.ssa_operand_iterator_d* %iter), !dbg !5375
  %tobool4 = icmp ne i8 %call3, 0, !dbg !5375
  br i1 %tobool4, label %if.then5, label %if.end6, !dbg !5377

if.then5:                                         ; preds = %if.end
  %2 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !5378
  store %union.tree_node* %2, %union.tree_node** %retval, align 8, !dbg !5379
  br label %return, !dbg !5379

if.end6:                                          ; preds = %if.end
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !5380
  br label %return, !dbg !5380

return:                                           ; preds = %if.end6, %if.then5, %if.then
  %3 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !5381
  ret %union.tree_node* %3, !dbg !5381
}

declare dso_local zeroext i8 @optimize_bb_for_size_p(%struct.basic_block_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @is_gimple_assign(%union.gimple_statement_d* %gs) #0 !dbg !5382 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5386, metadata !DIExpression()), !dbg !5387
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5388
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !5389
  %cmp = icmp eq i32 %call, 6, !dbg !5390
  %conv = zext i1 %cmp to i32, !dbg !5390
  %conv1 = trunc i32 %conv to i8, !dbg !5389
  ret i8 %conv1, !dbg !5391
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %gs) #0 !dbg !5392 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %code = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5395, metadata !DIExpression()), !dbg !5396
  call void @llvm.dbg.declare(metadata i32* %code, metadata !5397, metadata !DIExpression()), !dbg !5398
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5399
  %call = call i32 @gimple_expr_code(%union.gimple_statement_d* %0), !dbg !5400
  store i32 %call, i32* %code, align 4, !dbg !5401
  %1 = load i32, i32* %code, align 4, !dbg !5402
  %call1 = call i32 @get_gimple_rhs_class(i32 %1), !dbg !5404
  %cmp = icmp eq i32 %call1, 3, !dbg !5405
  br i1 %cmp, label %if.then, label %if.end, !dbg !5406

if.then:                                          ; preds = %entry
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5407
  %call2 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %2), !dbg !5407
  %base = bitcast %union.tree_node* %call2 to %struct.tree_base*, !dbg !5407
  %3 = bitcast %struct.tree_base* %base to i64*, !dbg !5407
  %bf.load = load i64, i64* %3, align 8, !dbg !5407
  %bf.clear = and i64 %bf.load, 65535, !dbg !5407
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !5407
  store i32 %bf.cast, i32* %code, align 4, !dbg !5408
  br label %if.end, !dbg !5409

if.end:                                           ; preds = %if.then, %entry
  %4 = load i32, i32* %code, align 4, !dbg !5410
  ret i32 %4, !dbg !5411
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_assign_rhs2(%union.gimple_statement_d* %gs) #0 !dbg !5412 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5415, metadata !DIExpression()), !dbg !5416
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5417
  %call = call i32 @gimple_num_ops(%union.gimple_statement_d* %0), !dbg !5419
  %cmp = icmp uge i32 %call, 3, !dbg !5420
  br i1 %cmp, label %if.then, label %if.else, !dbg !5421

if.then:                                          ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5422
  %call1 = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %1, i32 2), !dbg !5423
  store %union.tree_node* %call1, %union.tree_node** %retval, align 8, !dbg !5424
  br label %return, !dbg !5424

if.else:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !5425
  br label %return, !dbg !5425

return:                                           ; preds = %if.else, %if.then
  %2 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !5426
  ret %union.tree_node* %2, !dbg !5426
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @is_gimple_call(%union.gimple_statement_d* %gs) #0 !dbg !5427 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5428, metadata !DIExpression()), !dbg !5429
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5430
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !5431
  %cmp = icmp eq i32 %call, 8, !dbg !5432
  %conv = zext i1 %cmp to i32, !dbg !5432
  %conv1 = trunc i32 %conv to i8, !dbg !5431
  ret i8 %conv1, !dbg !5433
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_call_lhs(%union.gimple_statement_d* %gs) #0 !dbg !5434 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5435, metadata !DIExpression()), !dbg !5436
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5437
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 0), !dbg !5438
  ret %union.tree_node* %call, !dbg !5439
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_call_fndecl(%union.gimple_statement_d* %gs) #0 !dbg !5440 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5441, metadata !DIExpression()), !dbg !5442
  call void @llvm.dbg.declare(metadata %union.tree_node** %addr, metadata !5443, metadata !DIExpression()), !dbg !5444
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5445
  %call = call %union.tree_node* @gimple_call_fn(%union.gimple_statement_d* %0), !dbg !5446
  store %union.tree_node* %call, %union.tree_node** %addr, align 8, !dbg !5444
  %1 = load %union.tree_node*, %union.tree_node** %addr, align 8, !dbg !5447
  %base = bitcast %union.tree_node* %1 to %struct.tree_base*, !dbg !5447
  %2 = bitcast %struct.tree_base* %base to i64*, !dbg !5447
  %bf.load = load i64, i64* %2, align 8, !dbg !5447
  %bf.clear = and i64 %bf.load, 65535, !dbg !5447
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !5447
  %cmp = icmp eq i32 %bf.cast, 121, !dbg !5449
  br i1 %cmp, label %if.then, label %if.end, !dbg !5450

if.then:                                          ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %addr, align 8, !dbg !5451
  %exp = bitcast %union.tree_node* %3 to %struct.tree_exp*, !dbg !5451
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !5451
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !5451
  %4 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !5451
  store %union.tree_node* %4, %union.tree_node** %retval, align 8, !dbg !5452
  br label %return, !dbg !5452

if.end:                                           ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !5453
  br label %return, !dbg !5453

return:                                           ; preds = %if.end, %if.then
  %5 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !5454
  ret %union.tree_node* %5, !dbg !5454
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ssa_use_operand_d* @first_readonly_imm_use(%struct.immediate_use_iterator_d* %imm, %union.tree_node* %var) #0 !dbg !5455 {
entry:
  %retval = alloca %struct.ssa_use_operand_d*, align 8
  %imm.addr = alloca %struct.immediate_use_iterator_d*, align 8
  %var.addr = alloca %union.tree_node*, align 8
  store %struct.immediate_use_iterator_d* %imm, %struct.immediate_use_iterator_d** %imm.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.immediate_use_iterator_d** %imm.addr, metadata !5459, metadata !DIExpression()), !dbg !5460
  store %union.tree_node* %var, %union.tree_node** %var.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %var.addr, metadata !5461, metadata !DIExpression()), !dbg !5462
  %0 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !5463
  %ssa_name = bitcast %union.tree_node* %0 to %struct.tree_ssa_name*, !dbg !5463
  %imm_uses = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 5, !dbg !5463
  %1 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !5464
  %end_p = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %1, i32 0, i32 1, !dbg !5465
  store %struct.ssa_use_operand_d* %imm_uses, %struct.ssa_use_operand_d** %end_p, align 8, !dbg !5466
  %2 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !5467
  %end_p1 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %2, i32 0, i32 1, !dbg !5468
  %3 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %end_p1, align 8, !dbg !5468
  %next = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %3, i32 0, i32 1, !dbg !5469
  %4 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next, align 8, !dbg !5469
  %5 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !5470
  %imm_use = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %5, i32 0, i32 0, !dbg !5471
  store %struct.ssa_use_operand_d* %4, %struct.ssa_use_operand_d** %imm_use, align 8, !dbg !5472
  %6 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !5473
  %call = call zeroext i8 @end_readonly_imm_use_p(%struct.immediate_use_iterator_d* %6), !dbg !5475
  %tobool = icmp ne i8 %call, 0, !dbg !5475
  br i1 %tobool, label %if.then, label %if.end, !dbg !5476

if.then:                                          ; preds = %entry
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %retval, align 8, !dbg !5477
  br label %return, !dbg !5477

if.end:                                           ; preds = %entry
  %7 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !5478
  %imm_use2 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %7, i32 0, i32 0, !dbg !5479
  %8 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use2, align 8, !dbg !5479
  store %struct.ssa_use_operand_d* %8, %struct.ssa_use_operand_d** %retval, align 8, !dbg !5480
  br label %return, !dbg !5480

return:                                           ; preds = %if.end, %if.then
  %9 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %retval, align 8, !dbg !5481
  ret %struct.ssa_use_operand_d* %9, !dbg !5481
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @end_readonly_imm_use_p(%struct.immediate_use_iterator_d* %imm) #0 !dbg !5482 {
entry:
  %imm.addr = alloca %struct.immediate_use_iterator_d*, align 8
  store %struct.immediate_use_iterator_d* %imm, %struct.immediate_use_iterator_d** %imm.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.immediate_use_iterator_d** %imm.addr, metadata !5487, metadata !DIExpression()), !dbg !5488
  %0 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !5489
  %imm_use = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %0, i32 0, i32 0, !dbg !5490
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use, align 8, !dbg !5490
  %2 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !5491
  %end_p = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %2, i32 0, i32 1, !dbg !5492
  %3 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %end_p, align 8, !dbg !5492
  %cmp = icmp eq %struct.ssa_use_operand_d* %1, %3, !dbg !5493
  %conv = zext i1 %cmp to i32, !dbg !5493
  %conv1 = trunc i32 %conv to i8, !dbg !5494
  ret i8 %conv1, !dbg !5495
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @is_gimple_debug(%union.gimple_statement_d* %gs) #0 !dbg !5496 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5497, metadata !DIExpression()), !dbg !5498
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5499
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !5500
  %cmp = icmp eq i32 %call, 2, !dbg !5501
  %conv = zext i1 %cmp to i32, !dbg !5501
  %conv1 = trunc i32 %conv to i8, !dbg !5500
  ret i8 %conv1, !dbg !5502
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %gs) #0 !dbg !5503 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5504, metadata !DIExpression()), !dbg !5505
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5506
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 1), !dbg !5507
  ret %union.tree_node* %call, !dbg !5508
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ssa_use_operand_d* @next_readonly_imm_use(%struct.immediate_use_iterator_d* %imm) #0 !dbg !5509 {
entry:
  %retval = alloca %struct.ssa_use_operand_d*, align 8
  %imm.addr = alloca %struct.immediate_use_iterator_d*, align 8
  %old = alloca %struct.ssa_use_operand_d*, align 8
  store %struct.immediate_use_iterator_d* %imm, %struct.immediate_use_iterator_d** %imm.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.immediate_use_iterator_d** %imm.addr, metadata !5512, metadata !DIExpression()), !dbg !5513
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %old, metadata !5514, metadata !DIExpression()), !dbg !5515
  %0 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !5516
  %imm_use = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %0, i32 0, i32 0, !dbg !5517
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use, align 8, !dbg !5517
  store %struct.ssa_use_operand_d* %1, %struct.ssa_use_operand_d** %old, align 8, !dbg !5515
  %2 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %old, align 8, !dbg !5518
  %next = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %2, i32 0, i32 1, !dbg !5519
  %3 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next, align 8, !dbg !5519
  %4 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !5520
  %imm_use1 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %4, i32 0, i32 0, !dbg !5521
  store %struct.ssa_use_operand_d* %3, %struct.ssa_use_operand_d** %imm_use1, align 8, !dbg !5522
  %5 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !5523
  %call = call zeroext i8 @end_readonly_imm_use_p(%struct.immediate_use_iterator_d* %5), !dbg !5525
  %tobool = icmp ne i8 %call, 0, !dbg !5525
  br i1 %tobool, label %if.then, label %if.end, !dbg !5526

if.then:                                          ; preds = %entry
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %retval, align 8, !dbg !5527
  br label %return, !dbg !5527

if.end:                                           ; preds = %entry
  %6 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !5528
  %imm_use2 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %6, i32 0, i32 0, !dbg !5529
  %7 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use2, align 8, !dbg !5529
  store %struct.ssa_use_operand_d* %7, %struct.ssa_use_operand_d** %retval, align 8, !dbg !5530
  br label %return, !dbg !5530

return:                                           ; preds = %if.end, %if.then
  %8 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %retval, align 8, !dbg !5531
  ret %struct.ssa_use_operand_d* %8, !dbg !5531
}

declare dso_local void @gimple_replace_lhs(%union.gimple_statement_d*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_call_set_fndecl(%union.gimple_statement_d* %gs, %union.tree_node* %decl) #0 !dbg !5532 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %decl.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5535, metadata !DIExpression()), !dbg !5536
  store %union.tree_node* %decl, %union.tree_node** %decl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl.addr, metadata !5537, metadata !DIExpression()), !dbg !5538
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5539
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5540
  %call = call i32 @gimple_location(%union.gimple_statement_d* %1), !dbg !5541
  %2 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5542
  %call1 = call %union.tree_node* @build_fold_addr_expr_loc(i32 %call, %union.tree_node* %2), !dbg !5543
  call void @gimple_set_op(%union.gimple_statement_d* %0, i32 1, %union.tree_node* %call1), !dbg !5544
  ret void, !dbg !5545
}

; Function Attrs: noinline nounwind uwtable
define internal void @update_stmt(%union.gimple_statement_d* %s) #0 !dbg !5546 {
entry:
  %s.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %s, %union.gimple_statement_d** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %s.addr, metadata !5549, metadata !DIExpression()), !dbg !5550
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !5551
  %call = call zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %0), !dbg !5553
  %tobool = icmp ne i8 %call, 0, !dbg !5553
  br i1 %tobool, label %if.then, label %if.end, !dbg !5554

if.then:                                          ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !5555
  call void @gimple_set_modified(%union.gimple_statement_d* %1, i8 zeroext 1), !dbg !5557
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !5558
  call void @update_stmt_operands(%union.gimple_statement_d* %2), !dbg !5559
  br label %if.end, !dbg !5560

if.end:                                           ; preds = %if.then, %entry
  ret void, !dbg !5561
}

; Function Attrs: noinline nounwind uwtable
define internal %union.gimple_statement_d* @first_imm_use_stmt(%struct.immediate_use_iterator_d* %imm, %union.tree_node* %var) #0 !dbg !5562 {
entry:
  %retval = alloca %union.gimple_statement_d*, align 8
  %imm.addr = alloca %struct.immediate_use_iterator_d*, align 8
  %var.addr = alloca %union.tree_node*, align 8
  store %struct.immediate_use_iterator_d* %imm, %struct.immediate_use_iterator_d** %imm.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.immediate_use_iterator_d** %imm.addr, metadata !5565, metadata !DIExpression()), !dbg !5566
  store %union.tree_node* %var, %union.tree_node** %var.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %var.addr, metadata !5567, metadata !DIExpression()), !dbg !5568
  %0 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !5569
  %ssa_name = bitcast %union.tree_node* %0 to %struct.tree_ssa_name*, !dbg !5569
  %imm_uses = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 5, !dbg !5569
  %1 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !5570
  %end_p = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %1, i32 0, i32 1, !dbg !5571
  store %struct.ssa_use_operand_d* %imm_uses, %struct.ssa_use_operand_d** %end_p, align 8, !dbg !5572
  %2 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !5573
  %end_p1 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %2, i32 0, i32 1, !dbg !5574
  %3 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %end_p1, align 8, !dbg !5574
  %next = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %3, i32 0, i32 1, !dbg !5575
  %4 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next, align 8, !dbg !5575
  %5 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !5576
  %imm_use = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %5, i32 0, i32 0, !dbg !5577
  store %struct.ssa_use_operand_d* %4, %struct.ssa_use_operand_d** %imm_use, align 8, !dbg !5578
  %6 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !5579
  %next_imm_name = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %6, i32 0, i32 3, !dbg !5580
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %next_imm_name, align 8, !dbg !5581
  %7 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !5582
  %iter_node = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %7, i32 0, i32 2, !dbg !5583
  %prev = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %iter_node, i32 0, i32 0, !dbg !5584
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %prev, align 8, !dbg !5585
  %8 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !5586
  %iter_node2 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %8, i32 0, i32 2, !dbg !5587
  %next3 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %iter_node2, i32 0, i32 1, !dbg !5588
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %next3, align 8, !dbg !5589
  %9 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !5590
  %iter_node4 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %9, i32 0, i32 2, !dbg !5591
  %loc = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %iter_node4, i32 0, i32 2, !dbg !5592
  %stmt = bitcast %union.anon* %loc to %union.gimple_statement_d**, !dbg !5593
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %stmt, align 8, !dbg !5594
  %10 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !5595
  %iter_node5 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %10, i32 0, i32 2, !dbg !5596
  %use = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %iter_node5, i32 0, i32 3, !dbg !5597
  store %union.tree_node** null, %union.tree_node*** %use, align 8, !dbg !5598
  %11 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !5599
  %call = call zeroext i8 @end_imm_use_stmt_p(%struct.immediate_use_iterator_d* %11), !dbg !5601
  %tobool = icmp ne i8 %call, 0, !dbg !5601
  br i1 %tobool, label %if.then, label %if.end, !dbg !5602

if.then:                                          ; preds = %entry
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %retval, align 8, !dbg !5603
  br label %return, !dbg !5603

if.end:                                           ; preds = %entry
  %12 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !5604
  %imm_use6 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %12, i32 0, i32 0, !dbg !5605
  %13 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use6, align 8, !dbg !5605
  %14 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !5606
  call void @link_use_stmts_after(%struct.ssa_use_operand_d* %13, %struct.immediate_use_iterator_d* %14), !dbg !5607
  %15 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !5608
  %imm_use7 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %15, i32 0, i32 0, !dbg !5608
  %16 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use7, align 8, !dbg !5608
  %loc8 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %16, i32 0, i32 2, !dbg !5608
  %stmt9 = bitcast %union.anon* %loc8 to %union.gimple_statement_d**, !dbg !5608
  %17 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt9, align 8, !dbg !5608
  store %union.gimple_statement_d* %17, %union.gimple_statement_d** %retval, align 8, !dbg !5609
  br label %return, !dbg !5609

return:                                           ; preds = %if.end, %if.then
  %18 = load %union.gimple_statement_d*, %union.gimple_statement_d** %retval, align 8, !dbg !5610
  ret %union.gimple_statement_d* %18, !dbg !5610
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @end_imm_use_stmt_p(%struct.immediate_use_iterator_d* %imm) #0 !dbg !5611 {
entry:
  %imm.addr = alloca %struct.immediate_use_iterator_d*, align 8
  store %struct.immediate_use_iterator_d* %imm, %struct.immediate_use_iterator_d** %imm.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.immediate_use_iterator_d** %imm.addr, metadata !5612, metadata !DIExpression()), !dbg !5613
  %0 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !5614
  %imm_use = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %0, i32 0, i32 0, !dbg !5615
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use, align 8, !dbg !5615
  %2 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !5616
  %end_p = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %2, i32 0, i32 1, !dbg !5617
  %3 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %end_p, align 8, !dbg !5617
  %cmp = icmp eq %struct.ssa_use_operand_d* %1, %3, !dbg !5618
  %conv = zext i1 %cmp to i32, !dbg !5618
  %conv1 = trunc i32 %conv to i8, !dbg !5619
  ret i8 %conv1, !dbg !5620
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_assign_set_rhs_code(%union.gimple_statement_d* %s, i32 %code) #0 !dbg !5621 {
entry:
  %s.addr = alloca %union.gimple_statement_d*, align 8
  %code.addr = alloca i32, align 4
  store %union.gimple_statement_d* %s, %union.gimple_statement_d** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %s.addr, metadata !5624, metadata !DIExpression()), !dbg !5625
  store i32 %code, i32* %code.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %code.addr, metadata !5626, metadata !DIExpression()), !dbg !5627
  %0 = load i32, i32* %code.addr, align 4, !dbg !5628
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !5629
  %gsbase = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_base*, !dbg !5630
  %2 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !5631
  %bf.load = load i32, i32* %2, align 8, !dbg !5632
  %bf.value = and i32 %0, 65535, !dbg !5632
  %bf.shl = shl i32 %bf.value, 16, !dbg !5632
  %bf.clear = and i32 %bf.load, 65535, !dbg !5632
  %bf.set = or i32 %bf.clear, %bf.shl, !dbg !5632
  store i32 %bf.set, i32* %2, align 8, !dbg !5632
  ret void, !dbg !5633
}

declare dso_local zeroext i8 @fold_stmt_inplace(%union.gimple_statement_d*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.gimple_statement_d* @next_imm_use_stmt(%struct.immediate_use_iterator_d* %imm) #0 !dbg !5634 {
entry:
  %retval = alloca %union.gimple_statement_d*, align 8
  %imm.addr = alloca %struct.immediate_use_iterator_d*, align 8
  store %struct.immediate_use_iterator_d* %imm, %struct.immediate_use_iterator_d** %imm.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.immediate_use_iterator_d** %imm.addr, metadata !5637, metadata !DIExpression()), !dbg !5638
  %0 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !5639
  %iter_node = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %0, i32 0, i32 2, !dbg !5640
  %next = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %iter_node, i32 0, i32 1, !dbg !5641
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next, align 8, !dbg !5641
  %2 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !5642
  %imm_use = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %2, i32 0, i32 0, !dbg !5643
  store %struct.ssa_use_operand_d* %1, %struct.ssa_use_operand_d** %imm_use, align 8, !dbg !5644
  %3 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !5645
  %call = call zeroext i8 @end_imm_use_stmt_p(%struct.immediate_use_iterator_d* %3), !dbg !5647
  %tobool = icmp ne i8 %call, 0, !dbg !5647
  br i1 %tobool, label %if.then, label %if.end4, !dbg !5648

if.then:                                          ; preds = %entry
  %4 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !5649
  %iter_node1 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %4, i32 0, i32 2, !dbg !5652
  %prev = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %iter_node1, i32 0, i32 0, !dbg !5653
  %5 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %prev, align 8, !dbg !5653
  %cmp = icmp ne %struct.ssa_use_operand_d* %5, null, !dbg !5654
  br i1 %cmp, label %if.then2, label %if.end, !dbg !5655

if.then2:                                         ; preds = %if.then
  %6 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !5656
  %iter_node3 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %6, i32 0, i32 2, !dbg !5657
  call void @delink_imm_use(%struct.ssa_use_operand_d* %iter_node3), !dbg !5658
  br label %if.end, !dbg !5658

if.end:                                           ; preds = %if.then2, %if.then
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %retval, align 8, !dbg !5659
  br label %return, !dbg !5659

if.end4:                                          ; preds = %entry
  %7 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !5660
  %imm_use5 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %7, i32 0, i32 0, !dbg !5661
  %8 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use5, align 8, !dbg !5661
  %9 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !5662
  call void @link_use_stmts_after(%struct.ssa_use_operand_d* %8, %struct.immediate_use_iterator_d* %9), !dbg !5663
  %10 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !5664
  %imm_use6 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %10, i32 0, i32 0, !dbg !5664
  %11 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use6, align 8, !dbg !5664
  %loc = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %11, i32 0, i32 2, !dbg !5664
  %stmt = bitcast %union.anon* %loc to %union.gimple_statement_d**, !dbg !5664
  %12 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5664
  store %union.gimple_statement_d* %12, %union.gimple_statement_d** %retval, align 8, !dbg !5665
  br label %return, !dbg !5665

return:                                           ; preds = %if.end4, %if.end
  %13 = load %union.gimple_statement_d*, %union.gimple_statement_d** %retval, align 8, !dbg !5666
  ret %union.gimple_statement_d* %13, !dbg !5666
}

declare dso_local void @free_dominance_info(i32) #2

declare dso_local void @free_alloc_pool(%struct.alloc_pool_def*) #2

declare dso_local void @fancy_abort(i8*, i32, i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @is_division_by(%union.gimple_statement_d* %use_stmt, %union.tree_node* %def) #0 !dbg !5667 {
entry:
  %use_stmt.addr = alloca %union.gimple_statement_d*, align 8
  %def.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %use_stmt, %union.gimple_statement_d** %use_stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %use_stmt.addr, metadata !5670, metadata !DIExpression()), !dbg !5671
  store %union.tree_node* %def, %union.tree_node** %def.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %def.addr, metadata !5672, metadata !DIExpression()), !dbg !5673
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %use_stmt.addr, align 8, !dbg !5674
  %call = call zeroext i8 @is_gimple_assign(%union.gimple_statement_d* %0), !dbg !5675
  %conv = zext i8 %call to i32, !dbg !5675
  %tobool = icmp ne i32 %conv, 0, !dbg !5675
  br i1 %tobool, label %land.lhs.true, label %land.end, !dbg !5676

land.lhs.true:                                    ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %use_stmt.addr, align 8, !dbg !5677
  %call1 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %1), !dbg !5678
  %cmp = icmp eq i32 %call1, 75, !dbg !5679
  br i1 %cmp, label %land.lhs.true3, label %land.end, !dbg !5680

land.lhs.true3:                                   ; preds = %land.lhs.true
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %use_stmt.addr, align 8, !dbg !5681
  %call4 = call %union.tree_node* @gimple_assign_rhs2(%union.gimple_statement_d* %2), !dbg !5682
  %3 = load %union.tree_node*, %union.tree_node** %def.addr, align 8, !dbg !5683
  %cmp5 = icmp eq %union.tree_node* %call4, %3, !dbg !5684
  br i1 %cmp5, label %land.rhs, label %land.end, !dbg !5685

land.rhs:                                         ; preds = %land.lhs.true3
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %use_stmt.addr, align 8, !dbg !5686
  %call7 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %4), !dbg !5687
  %5 = load %union.tree_node*, %union.tree_node** %def.addr, align 8, !dbg !5688
  %cmp8 = icmp ne %union.tree_node* %call7, %5, !dbg !5689
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true3, %land.lhs.true, %entry
  %6 = phi i1 [ false, %land.lhs.true3 ], [ false, %land.lhs.true ], [ false, %entry ], [ %cmp8, %land.rhs ], !dbg !5690
  %land.ext = zext i1 %6 to i32, !dbg !5685
  %conv10 = trunc i32 %land.ext to i8, !dbg !5675
  ret i8 %conv10, !dbg !5691
}

; Function Attrs: noinline nounwind uwtable
define internal void @register_division_in(%struct.basic_block_def* %bb) #0 !dbg !5692 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %occ = alloca %struct.occurrence*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !5695, metadata !DIExpression()), !dbg !5696
  call void @llvm.dbg.declare(metadata %struct.occurrence** %occ, metadata !5697, metadata !DIExpression()), !dbg !5698
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5699
  %aux = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 2, !dbg !5700
  %1 = load i8*, i8** %aux, align 8, !dbg !5700
  %2 = bitcast i8* %1 to %struct.occurrence*, !dbg !5701
  store %struct.occurrence* %2, %struct.occurrence** %occ, align 8, !dbg !5702
  %3 = load %struct.occurrence*, %struct.occurrence** %occ, align 8, !dbg !5703
  %tobool = icmp ne %struct.occurrence* %3, null, !dbg !5703
  br i1 %tobool, label %if.end, label %if.then, !dbg !5705

if.then:                                          ; preds = %entry
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5706
  %call = call %struct.occurrence* @occ_new(%struct.basic_block_def* %4, %struct.occurrence* null), !dbg !5708
  store %struct.occurrence* %call, %struct.occurrence** %occ, align 8, !dbg !5709
  %5 = load %struct.occurrence*, %struct.occurrence** %occ, align 8, !dbg !5710
  %6 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5711
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %6, i64 0, !dbg !5711
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !5711
  %7 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !5711
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %7, i32 0, i32 0, !dbg !5711
  %8 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !5711
  call void @insert_bb(%struct.occurrence* %5, %struct.basic_block_def* %8, %struct.occurrence** @occ_head), !dbg !5712
  br label %if.end, !dbg !5713

if.end:                                           ; preds = %if.then, %entry
  %9 = load %struct.occurrence*, %struct.occurrence** %occ, align 8, !dbg !5714
  %bb_has_division = getelementptr inbounds %struct.occurrence, %struct.occurrence* %9, i32 0, i32 6, !dbg !5715
  store i8 1, i8* %bb_has_division, align 4, !dbg !5716
  %10 = load %struct.occurrence*, %struct.occurrence** %occ, align 8, !dbg !5717
  %num_divisions = getelementptr inbounds %struct.occurrence, %struct.occurrence* %10, i32 0, i32 5, !dbg !5718
  %11 = load i32, i32* %num_divisions, align 8, !dbg !5719
  %inc = add nsw i32 %11, 1, !dbg !5719
  store i32 %inc, i32* %num_divisions, align 8, !dbg !5719
  ret void, !dbg !5720
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %g) #0 !dbg !5721 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !5724, metadata !DIExpression()), !dbg !5725
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !5726
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !5727
  %bb = getelementptr inbounds %struct.gimple_statement_base, %struct.gimple_statement_base* %gsbase, i32 0, i32 4, !dbg !5728
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !5728
  ret %struct.basic_block_def* %1, !dbg !5729
}

declare dso_local i32 @vector_type_mode(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @compute_merit(%struct.occurrence* %occ) #0 !dbg !5730 {
entry:
  %occ.addr = alloca %struct.occurrence*, align 8
  %occ_child = alloca %struct.occurrence*, align 8
  %dom = alloca %struct.basic_block_def*, align 8
  %bb1 = alloca %struct.basic_block_def*, align 8
  store %struct.occurrence* %occ, %struct.occurrence** %occ.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.occurrence** %occ.addr, metadata !5733, metadata !DIExpression()), !dbg !5734
  call void @llvm.dbg.declare(metadata %struct.occurrence** %occ_child, metadata !5735, metadata !DIExpression()), !dbg !5736
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %dom, metadata !5737, metadata !DIExpression()), !dbg !5738
  %0 = load %struct.occurrence*, %struct.occurrence** %occ.addr, align 8, !dbg !5739
  %bb = getelementptr inbounds %struct.occurrence, %struct.occurrence* %0, i32 0, i32 0, !dbg !5740
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !5740
  store %struct.basic_block_def* %1, %struct.basic_block_def** %dom, align 8, !dbg !5738
  %2 = load %struct.occurrence*, %struct.occurrence** %occ.addr, align 8, !dbg !5741
  %children = getelementptr inbounds %struct.occurrence, %struct.occurrence* %2, i32 0, i32 3, !dbg !5743
  %3 = load %struct.occurrence*, %struct.occurrence** %children, align 8, !dbg !5743
  store %struct.occurrence* %3, %struct.occurrence** %occ_child, align 8, !dbg !5744
  br label %for.cond, !dbg !5745

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load %struct.occurrence*, %struct.occurrence** %occ_child, align 8, !dbg !5746
  %tobool = icmp ne %struct.occurrence* %4, null, !dbg !5748
  br i1 %tobool, label %for.body, label %for.end, !dbg !5748

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb1, metadata !5749, metadata !DIExpression()), !dbg !5751
  %5 = load %struct.occurrence*, %struct.occurrence** %occ_child, align 8, !dbg !5752
  %children2 = getelementptr inbounds %struct.occurrence, %struct.occurrence* %5, i32 0, i32 3, !dbg !5754
  %6 = load %struct.occurrence*, %struct.occurrence** %children2, align 8, !dbg !5754
  %tobool3 = icmp ne %struct.occurrence* %6, null, !dbg !5752
  br i1 %tobool3, label %if.then, label %if.end, !dbg !5755

if.then:                                          ; preds = %for.body
  %7 = load %struct.occurrence*, %struct.occurrence** %occ_child, align 8, !dbg !5756
  call void @compute_merit(%struct.occurrence* %7), !dbg !5757
  br label %if.end, !dbg !5757

if.end:                                           ; preds = %if.then, %for.body
  %8 = load i32, i32* @flag_exceptions, align 4, !dbg !5758
  %tobool4 = icmp ne i32 %8, 0, !dbg !5758
  br i1 %tobool4, label %if.then5, label %if.else, !dbg !5760

if.then5:                                         ; preds = %if.end
  %9 = load %struct.basic_block_def*, %struct.basic_block_def** %dom, align 8, !dbg !5761
  %call = call %struct.basic_block_def* @single_noncomplex_succ(%struct.basic_block_def* %9), !dbg !5762
  store %struct.basic_block_def* %call, %struct.basic_block_def** %bb1, align 8, !dbg !5763
  br label %if.end6, !dbg !5764

if.else:                                          ; preds = %if.end
  %10 = load %struct.basic_block_def*, %struct.basic_block_def** %dom, align 8, !dbg !5765
  store %struct.basic_block_def* %10, %struct.basic_block_def** %bb1, align 8, !dbg !5766
  br label %if.end6

if.end6:                                          ; preds = %if.else, %if.then5
  %11 = load %struct.basic_block_def*, %struct.basic_block_def** %bb1, align 8, !dbg !5767
  %12 = load %struct.occurrence*, %struct.occurrence** %occ_child, align 8, !dbg !5769
  %bb7 = getelementptr inbounds %struct.occurrence, %struct.occurrence* %12, i32 0, i32 0, !dbg !5770
  %13 = load %struct.basic_block_def*, %struct.basic_block_def** %bb7, align 8, !dbg !5770
  %call8 = call zeroext i8 @dominated_by_p(i32 2, %struct.basic_block_def* %11, %struct.basic_block_def* %13), !dbg !5771
  %tobool9 = icmp ne i8 %call8, 0, !dbg !5771
  br i1 %tobool9, label %if.then10, label %if.end12, !dbg !5772

if.then10:                                        ; preds = %if.end6
  %14 = load %struct.occurrence*, %struct.occurrence** %occ_child, align 8, !dbg !5773
  %num_divisions = getelementptr inbounds %struct.occurrence, %struct.occurrence* %14, i32 0, i32 5, !dbg !5774
  %15 = load i32, i32* %num_divisions, align 8, !dbg !5774
  %16 = load %struct.occurrence*, %struct.occurrence** %occ.addr, align 8, !dbg !5775
  %num_divisions11 = getelementptr inbounds %struct.occurrence, %struct.occurrence* %16, i32 0, i32 5, !dbg !5776
  %17 = load i32, i32* %num_divisions11, align 8, !dbg !5777
  %add = add nsw i32 %17, %15, !dbg !5777
  store i32 %add, i32* %num_divisions11, align 8, !dbg !5777
  br label %if.end12, !dbg !5775

if.end12:                                         ; preds = %if.then10, %if.end6
  br label %for.inc, !dbg !5778

for.inc:                                          ; preds = %if.end12
  %18 = load %struct.occurrence*, %struct.occurrence** %occ_child, align 8, !dbg !5779
  %next = getelementptr inbounds %struct.occurrence, %struct.occurrence* %18, i32 0, i32 4, !dbg !5780
  %19 = load %struct.occurrence*, %struct.occurrence** %next, align 8, !dbg !5780
  store %struct.occurrence* %19, %struct.occurrence** %occ_child, align 8, !dbg !5781
  br label %for.cond, !dbg !5782, !llvm.loop !5783

for.end:                                          ; preds = %for.cond
  ret void, !dbg !5785
}

; Function Attrs: noinline nounwind uwtable
define internal void @insert_reciprocals(%struct.gimple_stmt_iterator* %def_gsi, %struct.occurrence* %occ, %union.tree_node* %def, %union.tree_node* %recip_def, i32 %threshold) #0 !dbg !5786 {
entry:
  %def_gsi.addr = alloca %struct.gimple_stmt_iterator*, align 8
  %occ.addr = alloca %struct.occurrence*, align 8
  %def.addr = alloca %union.tree_node*, align 8
  %recip_def.addr = alloca %union.tree_node*, align 8
  %threshold.addr = alloca i32, align 4
  %type = alloca %union.tree_node*, align 8
  %new_stmt = alloca %union.gimple_statement_d*, align 8
  %gsi = alloca %struct.gimple_stmt_iterator, align 8
  %occ_child = alloca %struct.occurrence*, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  %tmp24 = alloca %struct.gimple_stmt_iterator, align 8
  store %struct.gimple_stmt_iterator* %def_gsi, %struct.gimple_stmt_iterator** %def_gsi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator** %def_gsi.addr, metadata !5789, metadata !DIExpression()), !dbg !5790
  store %struct.occurrence* %occ, %struct.occurrence** %occ.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.occurrence** %occ.addr, metadata !5791, metadata !DIExpression()), !dbg !5792
  store %union.tree_node* %def, %union.tree_node** %def.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %def.addr, metadata !5793, metadata !DIExpression()), !dbg !5794
  store %union.tree_node* %recip_def, %union.tree_node** %recip_def.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %recip_def.addr, metadata !5795, metadata !DIExpression()), !dbg !5796
  store i32 %threshold, i32* %threshold.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %threshold.addr, metadata !5797, metadata !DIExpression()), !dbg !5798
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !5799, metadata !DIExpression()), !dbg !5800
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %new_stmt, metadata !5801, metadata !DIExpression()), !dbg !5802
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %gsi, metadata !5803, metadata !DIExpression()), !dbg !5804
  call void @llvm.dbg.declare(metadata %struct.occurrence** %occ_child, metadata !5805, metadata !DIExpression()), !dbg !5806
  %0 = load %union.tree_node*, %union.tree_node** %recip_def.addr, align 8, !dbg !5807
  %tobool = icmp ne %union.tree_node* %0, null, !dbg !5807
  br i1 %tobool, label %if.end27, label %land.lhs.true, !dbg !5809

land.lhs.true:                                    ; preds = %entry
  %1 = load %struct.occurrence*, %struct.occurrence** %occ.addr, align 8, !dbg !5810
  %bb_has_division = getelementptr inbounds %struct.occurrence, %struct.occurrence* %1, i32 0, i32 6, !dbg !5811
  %2 = load i8, i8* %bb_has_division, align 4, !dbg !5811
  %conv = zext i8 %2 to i32, !dbg !5810
  %tobool1 = icmp ne i32 %conv, 0, !dbg !5810
  br i1 %tobool1, label %land.lhs.true3, label %lor.lhs.false, !dbg !5812

lor.lhs.false:                                    ; preds = %land.lhs.true
  %3 = load i32, i32* @flag_trapping_math, align 4, !dbg !5813
  %tobool2 = icmp ne i32 %3, 0, !dbg !5813
  br i1 %tobool2, label %if.end27, label %land.lhs.true3, !dbg !5814

land.lhs.true3:                                   ; preds = %lor.lhs.false, %land.lhs.true
  %4 = load %struct.occurrence*, %struct.occurrence** %occ.addr, align 8, !dbg !5815
  %num_divisions = getelementptr inbounds %struct.occurrence, %struct.occurrence* %4, i32 0, i32 5, !dbg !5816
  %5 = load i32, i32* %num_divisions, align 8, !dbg !5816
  %6 = load i32, i32* %threshold.addr, align 4, !dbg !5817
  %cmp = icmp sge i32 %5, %6, !dbg !5818
  br i1 %cmp, label %if.then, label %if.end27, !dbg !5819

if.then:                                          ; preds = %land.lhs.true3
  %7 = load %union.tree_node*, %union.tree_node** %def.addr, align 8, !dbg !5820
  %common = bitcast %union.tree_node* %7 to %struct.tree_common*, !dbg !5820
  %type5 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !5820
  %8 = load %union.tree_node*, %union.tree_node** %type5, align 8, !dbg !5820
  store %union.tree_node* %8, %union.tree_node** %type, align 8, !dbg !5822
  %9 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5823
  %call = call %union.tree_node* @make_rename_temp(%union.tree_node* %9, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.6, i64 0, i64 0)), !dbg !5824
  store %union.tree_node* %call, %union.tree_node** %recip_def.addr, align 8, !dbg !5825
  %10 = load %union.tree_node*, %union.tree_node** %recip_def.addr, align 8, !dbg !5826
  %11 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5826
  %call6 = call %union.tree_node* @build_one_cst(%union.tree_node* %11), !dbg !5826
  %12 = load %union.tree_node*, %union.tree_node** %def.addr, align 8, !dbg !5826
  %call7 = call %union.gimple_statement_d* @gimple_build_assign_with_ops_stat(i32 75, %union.tree_node* %10, %union.tree_node* %call6, %union.tree_node* %12), !dbg !5826
  store %union.gimple_statement_d* %call7, %union.gimple_statement_d** %new_stmt, align 8, !dbg !5827
  %13 = load %struct.occurrence*, %struct.occurrence** %occ.addr, align 8, !dbg !5828
  %bb_has_division8 = getelementptr inbounds %struct.occurrence, %struct.occurrence* %13, i32 0, i32 6, !dbg !5830
  %14 = load i8, i8* %bb_has_division8, align 4, !dbg !5830
  %tobool9 = icmp ne i8 %14, 0, !dbg !5828
  br i1 %tobool9, label %if.then10, label %if.else, !dbg !5831

if.then10:                                        ; preds = %if.then
  %15 = load %struct.occurrence*, %struct.occurrence** %occ.addr, align 8, !dbg !5832
  %bb = getelementptr inbounds %struct.occurrence, %struct.occurrence* %15, i32 0, i32 0, !dbg !5834
  %16 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !5834
  call void @gsi_after_labels(%struct.gimple_stmt_iterator* sret %tmp, %struct.basic_block_def* %16), !dbg !5835
  %17 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !5835
  %18 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !5835
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %17, i8* align 8 %18, i64 24, i1 false), !dbg !5835
  br label %while.cond, !dbg !5836

while.cond:                                       ; preds = %while.body, %if.then10
  %call11 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !5837
  %tobool12 = icmp ne i8 %call11, 0, !dbg !5837
  br i1 %tobool12, label %land.end, label %land.rhs, !dbg !5838

land.rhs:                                         ; preds = %while.cond
  %call13 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !5839
  %19 = load %union.tree_node*, %union.tree_node** %def.addr, align 8, !dbg !5840
  %call14 = call zeroext i8 @is_division_by(%union.gimple_statement_d* %call13, %union.tree_node* %19), !dbg !5841
  %tobool15 = icmp ne i8 %call14, 0, !dbg !5842
  %lnot = xor i1 %tobool15, true, !dbg !5842
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %20 = phi i1 [ false, %while.cond ], [ %lnot, %land.rhs ], !dbg !5843
  br i1 %20, label %while.body, label %while.end, !dbg !5836

while.body:                                       ; preds = %land.end
  call void @gsi_next(%struct.gimple_stmt_iterator* %gsi), !dbg !5844
  br label %while.cond, !dbg !5836, !llvm.loop !5845

while.end:                                        ; preds = %land.end
  %21 = load %union.gimple_statement_d*, %union.gimple_statement_d** %new_stmt, align 8, !dbg !5847
  call void @gsi_insert_before(%struct.gimple_stmt_iterator* %gsi, %union.gimple_statement_d* %21, i32 1), !dbg !5848
  br label %if.end26, !dbg !5849

if.else:                                          ; preds = %if.then
  %22 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %def_gsi.addr, align 8, !dbg !5850
  %tobool16 = icmp ne %struct.gimple_stmt_iterator* %22, null, !dbg !5850
  br i1 %tobool16, label %land.lhs.true17, label %if.else23, !dbg !5852

land.lhs.true17:                                  ; preds = %if.else
  %23 = load %struct.occurrence*, %struct.occurrence** %occ.addr, align 8, !dbg !5853
  %bb18 = getelementptr inbounds %struct.occurrence, %struct.occurrence* %23, i32 0, i32 0, !dbg !5854
  %24 = load %struct.basic_block_def*, %struct.basic_block_def** %bb18, align 8, !dbg !5854
  %25 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %def_gsi.addr, align 8, !dbg !5855
  %bb19 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %25, i32 0, i32 2, !dbg !5856
  %26 = load %struct.basic_block_def*, %struct.basic_block_def** %bb19, align 8, !dbg !5856
  %cmp20 = icmp eq %struct.basic_block_def* %24, %26, !dbg !5857
  br i1 %cmp20, label %if.then22, label %if.else23, !dbg !5858

if.then22:                                        ; preds = %land.lhs.true17
  %27 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %def_gsi.addr, align 8, !dbg !5859
  %28 = load %union.gimple_statement_d*, %union.gimple_statement_d** %new_stmt, align 8, !dbg !5861
  call void @gsi_insert_after(%struct.gimple_stmt_iterator* %27, %union.gimple_statement_d* %28, i32 0), !dbg !5862
  br label %if.end, !dbg !5863

if.else23:                                        ; preds = %land.lhs.true17, %if.else
  %29 = load %struct.occurrence*, %struct.occurrence** %occ.addr, align 8, !dbg !5864
  %bb25 = getelementptr inbounds %struct.occurrence, %struct.occurrence* %29, i32 0, i32 0, !dbg !5866
  %30 = load %struct.basic_block_def*, %struct.basic_block_def** %bb25, align 8, !dbg !5866
  call void @gsi_after_labels(%struct.gimple_stmt_iterator* sret %tmp24, %struct.basic_block_def* %30), !dbg !5867
  %31 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !5867
  %32 = bitcast %struct.gimple_stmt_iterator* %tmp24 to i8*, !dbg !5867
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %31, i8* align 8 %32, i64 24, i1 false), !dbg !5867
  %33 = load %union.gimple_statement_d*, %union.gimple_statement_d** %new_stmt, align 8, !dbg !5868
  call void @gsi_insert_before(%struct.gimple_stmt_iterator* %gsi, %union.gimple_statement_d* %33, i32 1), !dbg !5869
  br label %if.end

if.end:                                           ; preds = %if.else23, %if.then22
  br label %if.end26

if.end26:                                         ; preds = %if.end, %while.end
  %34 = load %union.gimple_statement_d*, %union.gimple_statement_d** %new_stmt, align 8, !dbg !5870
  %35 = load %struct.occurrence*, %struct.occurrence** %occ.addr, align 8, !dbg !5871
  %recip_def_stmt = getelementptr inbounds %struct.occurrence, %struct.occurrence* %35, i32 0, i32 2, !dbg !5872
  store %union.gimple_statement_d* %34, %union.gimple_statement_d** %recip_def_stmt, align 8, !dbg !5873
  br label %if.end27, !dbg !5874

if.end27:                                         ; preds = %if.end26, %land.lhs.true3, %lor.lhs.false, %entry
  %36 = load %union.tree_node*, %union.tree_node** %recip_def.addr, align 8, !dbg !5875
  %37 = load %struct.occurrence*, %struct.occurrence** %occ.addr, align 8, !dbg !5876
  %recip_def28 = getelementptr inbounds %struct.occurrence, %struct.occurrence* %37, i32 0, i32 1, !dbg !5877
  store %union.tree_node* %36, %union.tree_node** %recip_def28, align 8, !dbg !5878
  %38 = load %struct.occurrence*, %struct.occurrence** %occ.addr, align 8, !dbg !5879
  %children = getelementptr inbounds %struct.occurrence, %struct.occurrence* %38, i32 0, i32 3, !dbg !5881
  %39 = load %struct.occurrence*, %struct.occurrence** %children, align 8, !dbg !5881
  store %struct.occurrence* %39, %struct.occurrence** %occ_child, align 8, !dbg !5882
  br label %for.cond, !dbg !5883

for.cond:                                         ; preds = %for.inc, %if.end27
  %40 = load %struct.occurrence*, %struct.occurrence** %occ_child, align 8, !dbg !5884
  %tobool29 = icmp ne %struct.occurrence* %40, null, !dbg !5886
  br i1 %tobool29, label %for.body, label %for.end, !dbg !5886

for.body:                                         ; preds = %for.cond
  %41 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %def_gsi.addr, align 8, !dbg !5887
  %42 = load %struct.occurrence*, %struct.occurrence** %occ_child, align 8, !dbg !5888
  %43 = load %union.tree_node*, %union.tree_node** %def.addr, align 8, !dbg !5889
  %44 = load %union.tree_node*, %union.tree_node** %recip_def.addr, align 8, !dbg !5890
  %45 = load i32, i32* %threshold.addr, align 4, !dbg !5891
  call void @insert_reciprocals(%struct.gimple_stmt_iterator* %41, %struct.occurrence* %42, %union.tree_node* %43, %union.tree_node* %44, i32 %45), !dbg !5892
  br label %for.inc, !dbg !5892

for.inc:                                          ; preds = %for.body
  %46 = load %struct.occurrence*, %struct.occurrence** %occ_child, align 8, !dbg !5893
  %next = getelementptr inbounds %struct.occurrence, %struct.occurrence* %46, i32 0, i32 4, !dbg !5894
  %47 = load %struct.occurrence*, %struct.occurrence** %next, align 8, !dbg !5894
  store %struct.occurrence* %47, %struct.occurrence** %occ_child, align 8, !dbg !5895
  br label %for.cond, !dbg !5896, !llvm.loop !5897

for.end:                                          ; preds = %for.cond
  ret void, !dbg !5899
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ssa_use_operand_d* @first_imm_use_on_stmt(%struct.immediate_use_iterator_d* %imm) #0 !dbg !5900 {
entry:
  %imm.addr = alloca %struct.immediate_use_iterator_d*, align 8
  store %struct.immediate_use_iterator_d* %imm, %struct.immediate_use_iterator_d** %imm.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.immediate_use_iterator_d** %imm.addr, metadata !5901, metadata !DIExpression()), !dbg !5902
  %0 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !5903
  %imm_use = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %0, i32 0, i32 0, !dbg !5904
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use, align 8, !dbg !5904
  %next = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %1, i32 0, i32 1, !dbg !5905
  %2 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next, align 8, !dbg !5905
  %3 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !5906
  %next_imm_name = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %3, i32 0, i32 3, !dbg !5907
  store %struct.ssa_use_operand_d* %2, %struct.ssa_use_operand_d** %next_imm_name, align 8, !dbg !5908
  %4 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !5909
  %imm_use1 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %4, i32 0, i32 0, !dbg !5910
  %5 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use1, align 8, !dbg !5910
  ret %struct.ssa_use_operand_d* %5, !dbg !5911
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @end_imm_use_on_stmt_p(%struct.immediate_use_iterator_d* %imm) #0 !dbg !5912 {
entry:
  %imm.addr = alloca %struct.immediate_use_iterator_d*, align 8
  store %struct.immediate_use_iterator_d* %imm, %struct.immediate_use_iterator_d** %imm.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.immediate_use_iterator_d** %imm.addr, metadata !5913, metadata !DIExpression()), !dbg !5914
  %0 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !5915
  %imm_use = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %0, i32 0, i32 0, !dbg !5916
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use, align 8, !dbg !5916
  %2 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !5917
  %iter_node = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %2, i32 0, i32 2, !dbg !5918
  %cmp = icmp eq %struct.ssa_use_operand_d* %1, %iter_node, !dbg !5919
  %conv = zext i1 %cmp to i32, !dbg !5919
  %conv1 = trunc i32 %conv to i8, !dbg !5920
  ret i8 %conv1, !dbg !5921
}

; Function Attrs: noinline nounwind uwtable
define internal void @replace_reciprocal(%struct.ssa_use_operand_d* %use_p) #0 !dbg !5922 {
entry:
  %use_p.addr = alloca %struct.ssa_use_operand_d*, align 8
  %use_stmt = alloca %union.gimple_statement_d*, align 8
  %bb = alloca %struct.basic_block_def*, align 8
  %occ = alloca %struct.occurrence*, align 8
  store %struct.ssa_use_operand_d* %use_p, %struct.ssa_use_operand_d** %use_p.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %use_p.addr, metadata !5925, metadata !DIExpression()), !dbg !5926
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %use_stmt, metadata !5927, metadata !DIExpression()), !dbg !5928
  %0 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p.addr, align 8, !dbg !5929
  %loc = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %0, i32 0, i32 2, !dbg !5929
  %stmt = bitcast %union.anon* %loc to %union.gimple_statement_d**, !dbg !5929
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5929
  store %union.gimple_statement_d* %1, %union.gimple_statement_d** %use_stmt, align 8, !dbg !5928
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !5930, metadata !DIExpression()), !dbg !5931
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %use_stmt, align 8, !dbg !5932
  %call = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %2), !dbg !5933
  store %struct.basic_block_def* %call, %struct.basic_block_def** %bb, align 8, !dbg !5931
  call void @llvm.dbg.declare(metadata %struct.occurrence** %occ, metadata !5934, metadata !DIExpression()), !dbg !5935
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !5936
  %aux = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %3, i32 0, i32 2, !dbg !5937
  %4 = load i8*, i8** %aux, align 8, !dbg !5937
  %5 = bitcast i8* %4 to %struct.occurrence*, !dbg !5938
  store %struct.occurrence* %5, %struct.occurrence** %occ, align 8, !dbg !5935
  %6 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !5939
  %call1 = call zeroext i8 @optimize_bb_for_speed_p(%struct.basic_block_def* %6), !dbg !5941
  %conv = zext i8 %call1 to i32, !dbg !5941
  %tobool = icmp ne i32 %conv, 0, !dbg !5941
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !5942

land.lhs.true:                                    ; preds = %entry
  %7 = load %struct.occurrence*, %struct.occurrence** %occ, align 8, !dbg !5943
  %recip_def = getelementptr inbounds %struct.occurrence, %struct.occurrence* %7, i32 0, i32 1, !dbg !5944
  %8 = load %union.tree_node*, %union.tree_node** %recip_def, align 8, !dbg !5944
  %tobool2 = icmp ne %union.tree_node* %8, null, !dbg !5943
  br i1 %tobool2, label %land.lhs.true3, label %if.end, !dbg !5945

land.lhs.true3:                                   ; preds = %land.lhs.true
  %9 = load %union.gimple_statement_d*, %union.gimple_statement_d** %use_stmt, align 8, !dbg !5946
  %10 = load %struct.occurrence*, %struct.occurrence** %occ, align 8, !dbg !5947
  %recip_def_stmt = getelementptr inbounds %struct.occurrence, %struct.occurrence* %10, i32 0, i32 2, !dbg !5948
  %11 = load %union.gimple_statement_d*, %union.gimple_statement_d** %recip_def_stmt, align 8, !dbg !5948
  %cmp = icmp ne %union.gimple_statement_d* %9, %11, !dbg !5949
  br i1 %cmp, label %if.then, label %if.end, !dbg !5950

if.then:                                          ; preds = %land.lhs.true3
  %12 = load %union.gimple_statement_d*, %union.gimple_statement_d** %use_stmt, align 8, !dbg !5951
  call void @gimple_assign_set_rhs_code(%union.gimple_statement_d* %12, i32 65), !dbg !5953
  %13 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p.addr, align 8, !dbg !5954
  %14 = load %struct.occurrence*, %struct.occurrence** %occ, align 8, !dbg !5954
  %recip_def5 = getelementptr inbounds %struct.occurrence, %struct.occurrence* %14, i32 0, i32 1, !dbg !5954
  %15 = load %union.tree_node*, %union.tree_node** %recip_def5, align 8, !dbg !5954
  call void @set_ssa_use_from_ptr(%struct.ssa_use_operand_d* %13, %union.tree_node* %15), !dbg !5954
  %16 = load %union.gimple_statement_d*, %union.gimple_statement_d** %use_stmt, align 8, !dbg !5955
  %call6 = call zeroext i8 @fold_stmt_inplace(%union.gimple_statement_d* %16), !dbg !5956
  %17 = load %union.gimple_statement_d*, %union.gimple_statement_d** %use_stmt, align 8, !dbg !5957
  call void @update_stmt(%union.gimple_statement_d* %17), !dbg !5958
  br label %if.end, !dbg !5959

if.end:                                           ; preds = %if.then, %land.lhs.true3, %land.lhs.true, %entry
  ret void, !dbg !5960
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ssa_use_operand_d* @next_imm_use_on_stmt(%struct.immediate_use_iterator_d* %imm) #0 !dbg !5961 {
entry:
  %retval = alloca %struct.ssa_use_operand_d*, align 8
  %imm.addr = alloca %struct.immediate_use_iterator_d*, align 8
  store %struct.immediate_use_iterator_d* %imm, %struct.immediate_use_iterator_d** %imm.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.immediate_use_iterator_d** %imm.addr, metadata !5962, metadata !DIExpression()), !dbg !5963
  %0 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !5964
  %next_imm_name = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %0, i32 0, i32 3, !dbg !5965
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next_imm_name, align 8, !dbg !5965
  %2 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !5966
  %imm_use = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %2, i32 0, i32 0, !dbg !5967
  store %struct.ssa_use_operand_d* %1, %struct.ssa_use_operand_d** %imm_use, align 8, !dbg !5968
  %3 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !5969
  %call = call zeroext i8 @end_imm_use_on_stmt_p(%struct.immediate_use_iterator_d* %3), !dbg !5971
  %tobool = icmp ne i8 %call, 0, !dbg !5971
  br i1 %tobool, label %if.then, label %if.else, !dbg !5972

if.then:                                          ; preds = %entry
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %retval, align 8, !dbg !5973
  br label %return, !dbg !5973

if.else:                                          ; preds = %entry
  %4 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !5974
  %imm_use1 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %4, i32 0, i32 0, !dbg !5976
  %5 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use1, align 8, !dbg !5976
  %next = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %5, i32 0, i32 1, !dbg !5977
  %6 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next, align 8, !dbg !5977
  %7 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !5978
  %next_imm_name2 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %7, i32 0, i32 3, !dbg !5979
  store %struct.ssa_use_operand_d* %6, %struct.ssa_use_operand_d** %next_imm_name2, align 8, !dbg !5980
  %8 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !5981
  %imm_use3 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %8, i32 0, i32 0, !dbg !5982
  %9 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use3, align 8, !dbg !5982
  store %struct.ssa_use_operand_d* %9, %struct.ssa_use_operand_d** %retval, align 8, !dbg !5983
  br label %return, !dbg !5983

return:                                           ; preds = %if.else, %if.then
  %10 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %retval, align 8, !dbg !5984
  ret %struct.ssa_use_operand_d* %10, !dbg !5984
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.occurrence* @free_bb(%struct.occurrence* %occ) #0 !dbg !5985 {
entry:
  %retval = alloca %struct.occurrence*, align 8
  %occ.addr = alloca %struct.occurrence*, align 8
  %child = alloca %struct.occurrence*, align 8
  %next = alloca %struct.occurrence*, align 8
  store %struct.occurrence* %occ, %struct.occurrence** %occ.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.occurrence** %occ.addr, metadata !5988, metadata !DIExpression()), !dbg !5989
  call void @llvm.dbg.declare(metadata %struct.occurrence** %child, metadata !5990, metadata !DIExpression()), !dbg !5991
  call void @llvm.dbg.declare(metadata %struct.occurrence** %next, metadata !5992, metadata !DIExpression()), !dbg !5993
  %0 = load %struct.occurrence*, %struct.occurrence** %occ.addr, align 8, !dbg !5994
  %next1 = getelementptr inbounds %struct.occurrence, %struct.occurrence* %0, i32 0, i32 4, !dbg !5995
  %1 = load %struct.occurrence*, %struct.occurrence** %next1, align 8, !dbg !5995
  store %struct.occurrence* %1, %struct.occurrence** %next, align 8, !dbg !5996
  %2 = load %struct.occurrence*, %struct.occurrence** %occ.addr, align 8, !dbg !5997
  %children = getelementptr inbounds %struct.occurrence, %struct.occurrence* %2, i32 0, i32 3, !dbg !5998
  %3 = load %struct.occurrence*, %struct.occurrence** %children, align 8, !dbg !5998
  store %struct.occurrence* %3, %struct.occurrence** %child, align 8, !dbg !5999
  %4 = load %struct.occurrence*, %struct.occurrence** %occ.addr, align 8, !dbg !6000
  %bb = getelementptr inbounds %struct.occurrence, %struct.occurrence* %4, i32 0, i32 0, !dbg !6001
  %5 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6001
  %aux = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %5, i32 0, i32 2, !dbg !6002
  store i8* null, i8** %aux, align 8, !dbg !6003
  %6 = load %struct.alloc_pool_def*, %struct.alloc_pool_def** @occ_pool, align 8, !dbg !6004
  %7 = load %struct.occurrence*, %struct.occurrence** %occ.addr, align 8, !dbg !6005
  %8 = bitcast %struct.occurrence* %7 to i8*, !dbg !6005
  call void @pool_free(%struct.alloc_pool_def* %6, i8* %8), !dbg !6006
  %9 = load %struct.occurrence*, %struct.occurrence** %child, align 8, !dbg !6007
  %tobool = icmp ne %struct.occurrence* %9, null, !dbg !6007
  br i1 %tobool, label %if.else, label %if.then, !dbg !6009

if.then:                                          ; preds = %entry
  %10 = load %struct.occurrence*, %struct.occurrence** %next, align 8, !dbg !6010
  store %struct.occurrence* %10, %struct.occurrence** %retval, align 8, !dbg !6011
  br label %return, !dbg !6011

if.else:                                          ; preds = %entry
  br label %while.cond, !dbg !6012

while.cond:                                       ; preds = %while.body, %if.else
  %11 = load %struct.occurrence*, %struct.occurrence** %next, align 8, !dbg !6014
  %tobool2 = icmp ne %struct.occurrence* %11, null, !dbg !6012
  br i1 %tobool2, label %while.body, label %while.end, !dbg !6012

while.body:                                       ; preds = %while.cond
  %12 = load %struct.occurrence*, %struct.occurrence** %next, align 8, !dbg !6015
  %call = call %struct.occurrence* @free_bb(%struct.occurrence* %12), !dbg !6016
  store %struct.occurrence* %call, %struct.occurrence** %next, align 8, !dbg !6017
  br label %while.cond, !dbg !6012, !llvm.loop !6018

while.end:                                        ; preds = %while.cond
  %13 = load %struct.occurrence*, %struct.occurrence** %child, align 8, !dbg !6020
  store %struct.occurrence* %13, %struct.occurrence** %retval, align 8, !dbg !6021
  br label %return, !dbg !6021

return:                                           ; preds = %while.end, %if.then
  %14 = load %struct.occurrence*, %struct.occurrence** %retval, align 8, !dbg !6022
  ret %struct.occurrence* %14, !dbg !6022
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.occurrence* @occ_new(%struct.basic_block_def* %bb, %struct.occurrence* %children) #0 !dbg !6023 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %children.addr = alloca %struct.occurrence*, align 8
  %occ = alloca %struct.occurrence*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !6026, metadata !DIExpression()), !dbg !6027
  store %struct.occurrence* %children, %struct.occurrence** %children.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.occurrence** %children.addr, metadata !6028, metadata !DIExpression()), !dbg !6029
  call void @llvm.dbg.declare(metadata %struct.occurrence** %occ, metadata !6030, metadata !DIExpression()), !dbg !6031
  %0 = load %struct.alloc_pool_def*, %struct.alloc_pool_def** @occ_pool, align 8, !dbg !6032
  %call = call i8* @pool_alloc(%struct.alloc_pool_def* %0), !dbg !6033
  %1 = bitcast i8* %call to %struct.occurrence*, !dbg !6034
  store %struct.occurrence* %1, %struct.occurrence** %occ, align 8, !dbg !6035
  %2 = bitcast %struct.occurrence* %1 to i8*, !dbg !6036
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6037
  %aux = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %3, i32 0, i32 2, !dbg !6038
  store i8* %2, i8** %aux, align 8, !dbg !6039
  %4 = load %struct.occurrence*, %struct.occurrence** %occ, align 8, !dbg !6040
  %5 = bitcast %struct.occurrence* %4 to i8*, !dbg !6041
  call void @llvm.memset.p0i8.i64(i8* align 8 %5, i8 0, i64 48, i1 false), !dbg !6041
  %6 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6042
  %7 = load %struct.occurrence*, %struct.occurrence** %occ, align 8, !dbg !6043
  %bb1 = getelementptr inbounds %struct.occurrence, %struct.occurrence* %7, i32 0, i32 0, !dbg !6044
  store %struct.basic_block_def* %6, %struct.basic_block_def** %bb1, align 8, !dbg !6045
  %8 = load %struct.occurrence*, %struct.occurrence** %children.addr, align 8, !dbg !6046
  %9 = load %struct.occurrence*, %struct.occurrence** %occ, align 8, !dbg !6047
  %children2 = getelementptr inbounds %struct.occurrence, %struct.occurrence* %9, i32 0, i32 3, !dbg !6048
  store %struct.occurrence* %8, %struct.occurrence** %children2, align 8, !dbg !6049
  %10 = load %struct.occurrence*, %struct.occurrence** %occ, align 8, !dbg !6050
  ret %struct.occurrence* %10, !dbg !6051
}

; Function Attrs: noinline nounwind uwtable
define internal void @insert_bb(%struct.occurrence* %new_occ, %struct.basic_block_def* %idom, %struct.occurrence** %p_head) #0 !dbg !6052 {
entry:
  %new_occ.addr = alloca %struct.occurrence*, align 8
  %idom.addr = alloca %struct.basic_block_def*, align 8
  %p_head.addr = alloca %struct.occurrence**, align 8
  %occ = alloca %struct.occurrence*, align 8
  %p_occ = alloca %struct.occurrence**, align 8
  %bb = alloca %struct.basic_block_def*, align 8
  %occ_bb = alloca %struct.basic_block_def*, align 8
  %dom = alloca %struct.basic_block_def*, align 8
  store %struct.occurrence* %new_occ, %struct.occurrence** %new_occ.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.occurrence** %new_occ.addr, metadata !6056, metadata !DIExpression()), !dbg !6057
  store %struct.basic_block_def* %idom, %struct.basic_block_def** %idom.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %idom.addr, metadata !6058, metadata !DIExpression()), !dbg !6059
  store %struct.occurrence** %p_head, %struct.occurrence*** %p_head.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.occurrence*** %p_head.addr, metadata !6060, metadata !DIExpression()), !dbg !6061
  call void @llvm.dbg.declare(metadata %struct.occurrence** %occ, metadata !6062, metadata !DIExpression()), !dbg !6063
  call void @llvm.dbg.declare(metadata %struct.occurrence*** %p_occ, metadata !6064, metadata !DIExpression()), !dbg !6065
  %0 = load %struct.occurrence**, %struct.occurrence*** %p_head.addr, align 8, !dbg !6066
  store %struct.occurrence** %0, %struct.occurrence*** %p_occ, align 8, !dbg !6068
  br label %for.cond, !dbg !6069

for.cond:                                         ; preds = %if.end19, %entry
  %1 = load %struct.occurrence**, %struct.occurrence*** %p_occ, align 8, !dbg !6070
  %2 = load %struct.occurrence*, %struct.occurrence** %1, align 8, !dbg !6072
  store %struct.occurrence* %2, %struct.occurrence** %occ, align 8, !dbg !6073
  %cmp = icmp ne %struct.occurrence* %2, null, !dbg !6074
  br i1 %cmp, label %for.body, label %for.end, !dbg !6075

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !6076, metadata !DIExpression()), !dbg !6078
  %3 = load %struct.occurrence*, %struct.occurrence** %new_occ.addr, align 8, !dbg !6079
  %bb1 = getelementptr inbounds %struct.occurrence, %struct.occurrence* %3, i32 0, i32 0, !dbg !6080
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %bb1, align 8, !dbg !6080
  store %struct.basic_block_def* %4, %struct.basic_block_def** %bb, align 8, !dbg !6078
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %occ_bb, metadata !6081, metadata !DIExpression()), !dbg !6082
  %5 = load %struct.occurrence*, %struct.occurrence** %occ, align 8, !dbg !6083
  %bb2 = getelementptr inbounds %struct.occurrence, %struct.occurrence* %5, i32 0, i32 0, !dbg !6084
  %6 = load %struct.basic_block_def*, %struct.basic_block_def** %bb2, align 8, !dbg !6084
  store %struct.basic_block_def* %6, %struct.basic_block_def** %occ_bb, align 8, !dbg !6082
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %dom, metadata !6085, metadata !DIExpression()), !dbg !6086
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %occ_bb, align 8, !dbg !6087
  %8 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6088
  %call = call %struct.basic_block_def* @nearest_common_dominator(i32 1, %struct.basic_block_def* %7, %struct.basic_block_def* %8), !dbg !6089
  store %struct.basic_block_def* %call, %struct.basic_block_def** %dom, align 8, !dbg !6086
  %9 = load %struct.basic_block_def*, %struct.basic_block_def** %dom, align 8, !dbg !6090
  %10 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6092
  %cmp3 = icmp eq %struct.basic_block_def* %9, %10, !dbg !6093
  br i1 %cmp3, label %if.then, label %if.else, !dbg !6094

if.then:                                          ; preds = %for.body
  %11 = load %struct.occurrence*, %struct.occurrence** %occ, align 8, !dbg !6095
  %next = getelementptr inbounds %struct.occurrence, %struct.occurrence* %11, i32 0, i32 4, !dbg !6097
  %12 = load %struct.occurrence*, %struct.occurrence** %next, align 8, !dbg !6097
  %13 = load %struct.occurrence**, %struct.occurrence*** %p_occ, align 8, !dbg !6098
  store %struct.occurrence* %12, %struct.occurrence** %13, align 8, !dbg !6099
  %14 = load %struct.occurrence*, %struct.occurrence** %new_occ.addr, align 8, !dbg !6100
  %children = getelementptr inbounds %struct.occurrence, %struct.occurrence* %14, i32 0, i32 3, !dbg !6101
  %15 = load %struct.occurrence*, %struct.occurrence** %children, align 8, !dbg !6101
  %16 = load %struct.occurrence*, %struct.occurrence** %occ, align 8, !dbg !6102
  %next4 = getelementptr inbounds %struct.occurrence, %struct.occurrence* %16, i32 0, i32 4, !dbg !6103
  store %struct.occurrence* %15, %struct.occurrence** %next4, align 8, !dbg !6104
  %17 = load %struct.occurrence*, %struct.occurrence** %occ, align 8, !dbg !6105
  %18 = load %struct.occurrence*, %struct.occurrence** %new_occ.addr, align 8, !dbg !6106
  %children5 = getelementptr inbounds %struct.occurrence, %struct.occurrence* %18, i32 0, i32 3, !dbg !6107
  store %struct.occurrence* %17, %struct.occurrence** %children5, align 8, !dbg !6108
  br label %if.end19, !dbg !6109

if.else:                                          ; preds = %for.body
  %19 = load %struct.basic_block_def*, %struct.basic_block_def** %dom, align 8, !dbg !6110
  %20 = load %struct.basic_block_def*, %struct.basic_block_def** %occ_bb, align 8, !dbg !6112
  %cmp6 = icmp eq %struct.basic_block_def* %19, %20, !dbg !6113
  br i1 %cmp6, label %if.then7, label %if.else9, !dbg !6114

if.then7:                                         ; preds = %if.else
  %21 = load %struct.occurrence*, %struct.occurrence** %new_occ.addr, align 8, !dbg !6115
  %22 = load %struct.basic_block_def*, %struct.basic_block_def** %dom, align 8, !dbg !6117
  %23 = load %struct.occurrence*, %struct.occurrence** %occ, align 8, !dbg !6118
  %children8 = getelementptr inbounds %struct.occurrence, %struct.occurrence* %23, i32 0, i32 3, !dbg !6119
  call void @insert_bb(%struct.occurrence* %21, %struct.basic_block_def* %22, %struct.occurrence** %children8), !dbg !6120
  br label %return, !dbg !6121

if.else9:                                         ; preds = %if.else
  %24 = load %struct.basic_block_def*, %struct.basic_block_def** %dom, align 8, !dbg !6122
  %25 = load %struct.basic_block_def*, %struct.basic_block_def** %idom.addr, align 8, !dbg !6124
  %cmp10 = icmp ne %struct.basic_block_def* %24, %25, !dbg !6125
  br i1 %cmp10, label %if.then11, label %if.else16, !dbg !6126

if.then11:                                        ; preds = %if.else9
  %26 = load %struct.basic_block_def*, %struct.basic_block_def** %dom, align 8, !dbg !6127
  %aux = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %26, i32 0, i32 2, !dbg !6127
  %27 = load i8*, i8** %aux, align 8, !dbg !6127
  %tobool = icmp ne i8* %27, null, !dbg !6127
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6127

cond.true:                                        ; preds = %if.then11
  call void @fancy_abort(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.4, i64 0, i64 0), i32 204, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0)), !dbg !6127
  br label %cond.end, !dbg !6127

cond.false:                                       ; preds = %if.then11
  br label %cond.end, !dbg !6127

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6127
  %28 = load %struct.occurrence*, %struct.occurrence** %occ, align 8, !dbg !6129
  %next12 = getelementptr inbounds %struct.occurrence, %struct.occurrence* %28, i32 0, i32 4, !dbg !6130
  %29 = load %struct.occurrence*, %struct.occurrence** %next12, align 8, !dbg !6130
  %30 = load %struct.occurrence**, %struct.occurrence*** %p_occ, align 8, !dbg !6131
  store %struct.occurrence* %29, %struct.occurrence** %30, align 8, !dbg !6132
  %31 = load %struct.occurrence*, %struct.occurrence** %occ, align 8, !dbg !6133
  %32 = load %struct.occurrence*, %struct.occurrence** %new_occ.addr, align 8, !dbg !6134
  %next13 = getelementptr inbounds %struct.occurrence, %struct.occurrence* %32, i32 0, i32 4, !dbg !6135
  store %struct.occurrence* %31, %struct.occurrence** %next13, align 8, !dbg !6136
  %33 = load %struct.occurrence*, %struct.occurrence** %occ, align 8, !dbg !6137
  %next14 = getelementptr inbounds %struct.occurrence, %struct.occurrence* %33, i32 0, i32 4, !dbg !6138
  store %struct.occurrence* null, %struct.occurrence** %next14, align 8, !dbg !6139
  %34 = load %struct.basic_block_def*, %struct.basic_block_def** %dom, align 8, !dbg !6140
  %35 = load %struct.occurrence*, %struct.occurrence** %new_occ.addr, align 8, !dbg !6141
  %call15 = call %struct.occurrence* @occ_new(%struct.basic_block_def* %34, %struct.occurrence* %35), !dbg !6142
  store %struct.occurrence* %call15, %struct.occurrence** %new_occ.addr, align 8, !dbg !6143
  br label %if.end, !dbg !6144

if.else16:                                        ; preds = %if.else9
  %36 = load %struct.occurrence*, %struct.occurrence** %occ, align 8, !dbg !6145
  %next17 = getelementptr inbounds %struct.occurrence, %struct.occurrence* %36, i32 0, i32 4, !dbg !6147
  store %struct.occurrence** %next17, %struct.occurrence*** %p_occ, align 8, !dbg !6148
  br label %if.end

if.end:                                           ; preds = %if.else16, %cond.end
  br label %if.end18

if.end18:                                         ; preds = %if.end
  br label %if.end19

if.end19:                                         ; preds = %if.end18, %if.then
  br label %for.cond, !dbg !6149, !llvm.loop !6150

for.end:                                          ; preds = %for.cond
  %37 = load %struct.occurrence**, %struct.occurrence*** %p_head.addr, align 8, !dbg !6152
  %38 = load %struct.occurrence*, %struct.occurrence** %37, align 8, !dbg !6153
  %39 = load %struct.occurrence*, %struct.occurrence** %new_occ.addr, align 8, !dbg !6154
  %next20 = getelementptr inbounds %struct.occurrence, %struct.occurrence* %39, i32 0, i32 4, !dbg !6155
  store %struct.occurrence* %38, %struct.occurrence** %next20, align 8, !dbg !6156
  %40 = load %struct.occurrence*, %struct.occurrence** %new_occ.addr, align 8, !dbg !6157
  %41 = load %struct.occurrence**, %struct.occurrence*** %p_head.addr, align 8, !dbg !6158
  store %struct.occurrence* %40, %struct.occurrence** %41, align 8, !dbg !6159
  br label %return, !dbg !6160

return:                                           ; preds = %for.end, %if.then7
  ret void, !dbg !6160
}

declare dso_local i8* @pool_alloc(%struct.alloc_pool_def*) #2

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

declare dso_local %struct.basic_block_def* @nearest_common_dominator(i32, %struct.basic_block_def*, %struct.basic_block_def*) #2

declare dso_local %struct.basic_block_def* @single_noncomplex_succ(%struct.basic_block_def*) #2

declare dso_local zeroext i8 @dominated_by_p(i32, %struct.basic_block_def*, %struct.basic_block_def*) #2

declare dso_local %union.tree_node* @make_rename_temp(%union.tree_node*, i8*) #2

declare dso_local %union.gimple_statement_d* @gimple_build_assign_with_ops_stat(i32, %union.tree_node*, %union.tree_node*, %union.tree_node*) #2

declare dso_local %union.tree_node* @build_one_cst(%union.tree_node*) #2

declare dso_local void @gsi_insert_before(%struct.gimple_stmt_iterator*, %union.gimple_statement_d*, i32) #2

declare dso_local void @gsi_insert_after(%struct.gimple_stmt_iterator*, %union.gimple_statement_d*, i32) #2

declare dso_local zeroext i8 @optimize_bb_for_speed_p(%struct.basic_block_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @set_ssa_use_from_ptr(%struct.ssa_use_operand_d* %use, %union.tree_node* %val) #0 !dbg !6161 {
entry:
  %use.addr = alloca %struct.ssa_use_operand_d*, align 8
  %val.addr = alloca %union.tree_node*, align 8
  store %struct.ssa_use_operand_d* %use, %struct.ssa_use_operand_d** %use.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %use.addr, metadata !6164, metadata !DIExpression()), !dbg !6165
  store %union.tree_node* %val, %union.tree_node** %val.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %val.addr, metadata !6166, metadata !DIExpression()), !dbg !6167
  %0 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use.addr, align 8, !dbg !6168
  call void @delink_imm_use(%struct.ssa_use_operand_d* %0), !dbg !6169
  %1 = load %union.tree_node*, %union.tree_node** %val.addr, align 8, !dbg !6170
  %2 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use.addr, align 8, !dbg !6171
  %use1 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %2, i32 0, i32 3, !dbg !6172
  %3 = load %union.tree_node**, %union.tree_node*** %use1, align 8, !dbg !6172
  store %union.tree_node* %1, %union.tree_node** %3, align 8, !dbg !6173
  %4 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use.addr, align 8, !dbg !6174
  %5 = load %union.tree_node*, %union.tree_node** %val.addr, align 8, !dbg !6175
  call void @link_imm_use(%struct.ssa_use_operand_d* %4, %union.tree_node* %5), !dbg !6176
  ret void, !dbg !6177
}

; Function Attrs: noinline nounwind uwtable
define internal void @delink_imm_use(%struct.ssa_use_operand_d* %linknode) #0 !dbg !6178 {
entry:
  %linknode.addr = alloca %struct.ssa_use_operand_d*, align 8
  store %struct.ssa_use_operand_d* %linknode, %struct.ssa_use_operand_d** %linknode.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %linknode.addr, metadata !6181, metadata !DIExpression()), !dbg !6182
  %0 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !6183
  %prev = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %0, i32 0, i32 0, !dbg !6185
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %prev, align 8, !dbg !6185
  %cmp = icmp eq %struct.ssa_use_operand_d* %1, null, !dbg !6186
  br i1 %cmp, label %if.then, label %if.end, !dbg !6187

if.then:                                          ; preds = %entry
  br label %return, !dbg !6188

if.end:                                           ; preds = %entry
  %2 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !6189
  %next = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %2, i32 0, i32 1, !dbg !6190
  %3 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next, align 8, !dbg !6190
  %4 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !6191
  %prev1 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %4, i32 0, i32 0, !dbg !6192
  %5 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %prev1, align 8, !dbg !6192
  %next2 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %5, i32 0, i32 1, !dbg !6193
  store %struct.ssa_use_operand_d* %3, %struct.ssa_use_operand_d** %next2, align 8, !dbg !6194
  %6 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !6195
  %prev3 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %6, i32 0, i32 0, !dbg !6196
  %7 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %prev3, align 8, !dbg !6196
  %8 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !6197
  %next4 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %8, i32 0, i32 1, !dbg !6198
  %9 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next4, align 8, !dbg !6198
  %prev5 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %9, i32 0, i32 0, !dbg !6199
  store %struct.ssa_use_operand_d* %7, %struct.ssa_use_operand_d** %prev5, align 8, !dbg !6200
  %10 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !6201
  %prev6 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %10, i32 0, i32 0, !dbg !6202
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %prev6, align 8, !dbg !6203
  %11 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !6204
  %next7 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %11, i32 0, i32 1, !dbg !6205
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %next7, align 8, !dbg !6206
  br label %return, !dbg !6207

return:                                           ; preds = %if.end, %if.then
  ret void, !dbg !6207
}

; Function Attrs: noinline nounwind uwtable
define internal void @link_imm_use(%struct.ssa_use_operand_d* %linknode, %union.tree_node* %def) #0 !dbg !6208 {
entry:
  %linknode.addr = alloca %struct.ssa_use_operand_d*, align 8
  %def.addr = alloca %union.tree_node*, align 8
  %root = alloca %struct.ssa_use_operand_d*, align 8
  store %struct.ssa_use_operand_d* %linknode, %struct.ssa_use_operand_d** %linknode.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %linknode.addr, metadata !6211, metadata !DIExpression()), !dbg !6212
  store %union.tree_node* %def, %union.tree_node** %def.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %def.addr, metadata !6213, metadata !DIExpression()), !dbg !6214
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %root, metadata !6215, metadata !DIExpression()), !dbg !6216
  %0 = load %union.tree_node*, %union.tree_node** %def.addr, align 8, !dbg !6217
  %tobool = icmp ne %union.tree_node* %0, null, !dbg !6217
  br i1 %tobool, label %lor.lhs.false, label %if.then, !dbg !6219

lor.lhs.false:                                    ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %def.addr, align 8, !dbg !6220
  %base = bitcast %union.tree_node* %1 to %struct.tree_base*, !dbg !6220
  %2 = bitcast %struct.tree_base* %base to i64*, !dbg !6220
  %bf.load = load i64, i64* %2, align 8, !dbg !6220
  %bf.clear = and i64 %bf.load, 65535, !dbg !6220
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !6220
  %cmp = icmp ne i32 %bf.cast, 141, !dbg !6221
  br i1 %cmp, label %if.then, label %if.else, !dbg !6222

if.then:                                          ; preds = %lor.lhs.false, %entry
  %3 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !6223
  %prev = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %3, i32 0, i32 0, !dbg !6224
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %prev, align 8, !dbg !6225
  br label %if.end, !dbg !6223

if.else:                                          ; preds = %lor.lhs.false
  %4 = load %union.tree_node*, %union.tree_node** %def.addr, align 8, !dbg !6226
  %ssa_name = bitcast %union.tree_node* %4 to %struct.tree_ssa_name*, !dbg !6226
  %imm_uses = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 5, !dbg !6226
  store %struct.ssa_use_operand_d* %imm_uses, %struct.ssa_use_operand_d** %root, align 8, !dbg !6228
  %5 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !6229
  %6 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %root, align 8, !dbg !6230
  call void @link_imm_use_to_list(%struct.ssa_use_operand_d* %5, %struct.ssa_use_operand_d* %6), !dbg !6231
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void, !dbg !6232
}

; Function Attrs: noinline nounwind uwtable
define internal void @link_imm_use_to_list(%struct.ssa_use_operand_d* %linknode, %struct.ssa_use_operand_d* %list) #0 !dbg !6233 {
entry:
  %linknode.addr = alloca %struct.ssa_use_operand_d*, align 8
  %list.addr = alloca %struct.ssa_use_operand_d*, align 8
  store %struct.ssa_use_operand_d* %linknode, %struct.ssa_use_operand_d** %linknode.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %linknode.addr, metadata !6236, metadata !DIExpression()), !dbg !6237
  store %struct.ssa_use_operand_d* %list, %struct.ssa_use_operand_d** %list.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %list.addr, metadata !6238, metadata !DIExpression()), !dbg !6239
  %0 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %list.addr, align 8, !dbg !6240
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !6241
  %prev = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %1, i32 0, i32 0, !dbg !6242
  store %struct.ssa_use_operand_d* %0, %struct.ssa_use_operand_d** %prev, align 8, !dbg !6243
  %2 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %list.addr, align 8, !dbg !6244
  %next = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %2, i32 0, i32 1, !dbg !6245
  %3 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next, align 8, !dbg !6245
  %4 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !6246
  %next1 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %4, i32 0, i32 1, !dbg !6247
  store %struct.ssa_use_operand_d* %3, %struct.ssa_use_operand_d** %next1, align 8, !dbg !6248
  %5 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !6249
  %6 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %list.addr, align 8, !dbg !6250
  %next2 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %6, i32 0, i32 1, !dbg !6251
  %7 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next2, align 8, !dbg !6251
  %prev3 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %7, i32 0, i32 0, !dbg !6252
  store %struct.ssa_use_operand_d* %5, %struct.ssa_use_operand_d** %prev3, align 8, !dbg !6253
  %8 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !6254
  %9 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %list.addr, align 8, !dbg !6255
  %next4 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %9, i32 0, i32 1, !dbg !6256
  store %struct.ssa_use_operand_d* %8, %struct.ssa_use_operand_d** %next4, align 8, !dbg !6257
  ret void, !dbg !6258
}

declare dso_local void @pool_free(%struct.alloc_pool_def*, i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @gsi_start_bb(%struct.gimple_stmt_iterator* noalias sret %agg.result, %struct.basic_block_def* %bb) #0 !dbg !6259 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %seq = alloca %struct.gimple_seq_d*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !6260, metadata !DIExpression()), !dbg !6261
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %agg.result, metadata !6262, metadata !DIExpression()), !dbg !6263
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %seq, metadata !6264, metadata !DIExpression()), !dbg !6265
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6266
  %call = call %struct.gimple_seq_d* @bb_seq(%struct.basic_block_def* %0), !dbg !6267
  store %struct.gimple_seq_d* %call, %struct.gimple_seq_d** %seq, align 8, !dbg !6268
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq, align 8, !dbg !6269
  %call1 = call %struct.gimple_seq_node_d* @gimple_seq_first(%struct.gimple_seq_d* %1), !dbg !6270
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 0, !dbg !6271
  store %struct.gimple_seq_node_d* %call1, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !6272
  %2 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq, align 8, !dbg !6273
  %seq2 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 1, !dbg !6274
  store %struct.gimple_seq_d* %2, %struct.gimple_seq_d** %seq2, align 8, !dbg !6275
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6276
  %bb3 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 2, !dbg !6277
  store %struct.basic_block_def* %3, %struct.basic_block_def** %bb3, align 8, !dbg !6278
  ret void, !dbg !6279
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_code(%union.gimple_statement_d* %g) #0 !dbg !6280 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !6283, metadata !DIExpression()), !dbg !6284
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !6285
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !6286
  %1 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !6287
  %bf.load = load i32, i32* %1, align 8, !dbg !6287
  %bf.clear = and i32 %bf.load, 255, !dbg !6287
  ret i32 %bf.clear, !dbg !6288
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.gimple_seq_d* @bb_seq(%struct.basic_block_def* %bb) #0 !dbg !6289 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !6295, metadata !DIExpression()), !dbg !6296
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6297
  %flags = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 13, !dbg !6298
  %1 = load i32, i32* %flags, align 8, !dbg !6298
  %and = and i32 %1, 512, !dbg !6299
  %tobool = icmp ne i32 %and, 0, !dbg !6299
  br i1 %tobool, label %cond.false, label %land.lhs.true, !dbg !6300

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6301
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 7, !dbg !6302
  %gimple = bitcast %union.basic_block_il_dependent* %il to %struct.gimple_bb_info**, !dbg !6303
  %3 = load %struct.gimple_bb_info*, %struct.gimple_bb_info** %gimple, align 8, !dbg !6303
  %tobool1 = icmp ne %struct.gimple_bb_info* %3, null, !dbg !6301
  br i1 %tobool1, label %cond.true, label %cond.false, !dbg !6304

cond.true:                                        ; preds = %land.lhs.true
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6305
  %il2 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %4, i32 0, i32 7, !dbg !6306
  %gimple3 = bitcast %union.basic_block_il_dependent* %il2 to %struct.gimple_bb_info**, !dbg !6307
  %5 = load %struct.gimple_bb_info*, %struct.gimple_bb_info** %gimple3, align 8, !dbg !6307
  %seq = getelementptr inbounds %struct.gimple_bb_info, %struct.gimple_bb_info* %5, i32 0, i32 0, !dbg !6308
  %6 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq, align 8, !dbg !6308
  br label %cond.end, !dbg !6304

cond.false:                                       ; preds = %land.lhs.true, %entry
  br label %cond.end, !dbg !6304

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.gimple_seq_d* [ %6, %cond.true ], [ null, %cond.false ], !dbg !6304
  ret %struct.gimple_seq_d* %cond, !dbg !6309
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.gimple_seq_node_d* @gimple_seq_first(%struct.gimple_seq_d* %s) #0 !dbg !6310 {
entry:
  %s.addr = alloca %struct.gimple_seq_d*, align 8
  store %struct.gimple_seq_d* %s, %struct.gimple_seq_d** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %s.addr, metadata !6316, metadata !DIExpression()), !dbg !6317
  %0 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %s.addr, align 8, !dbg !6318
  %tobool = icmp ne %struct.gimple_seq_d* %0, null, !dbg !6318
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6318

cond.true:                                        ; preds = %entry
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %s.addr, align 8, !dbg !6319
  %first = getelementptr inbounds %struct.gimple_seq_d, %struct.gimple_seq_d* %1, i32 0, i32 0, !dbg !6320
  %2 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %first, align 8, !dbg !6320
  br label %cond.end, !dbg !6318

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6318

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.gimple_seq_node_d* [ %2, %cond.true ], [ null, %cond.false ], !dbg !6318
  ret %struct.gimple_seq_node_d* %cond, !dbg !6321
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @op_iter_init_tree(%struct.ssa_operand_iterator_d* %ptr, %union.gimple_statement_d* %stmt, i32 %flags) #0 !dbg !6322 {
entry:
  %ptr.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %flags.addr = alloca i32, align 4
  store %struct.ssa_operand_iterator_d* %ptr, %struct.ssa_operand_iterator_d** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %ptr.addr, metadata !6326, metadata !DIExpression()), !dbg !6327
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !6328, metadata !DIExpression()), !dbg !6329
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !6330, metadata !DIExpression()), !dbg !6331
  %0 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6332
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6333
  %2 = load i32, i32* %flags.addr, align 4, !dbg !6334
  call void @op_iter_init(%struct.ssa_operand_iterator_d* %0, %union.gimple_statement_d* %1, i32 %2), !dbg !6335
  %3 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6336
  %iter_type = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %3, i32 0, i32 1, !dbg !6337
  store i32 1, i32* %iter_type, align 4, !dbg !6338
  %4 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6339
  %call = call %union.tree_node* @op_iter_next_tree(%struct.ssa_operand_iterator_d* %4), !dbg !6340
  ret %union.tree_node* %call, !dbg !6341
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @op_iter_done(%struct.ssa_operand_iterator_d* %ptr) #0 !dbg !6342 {
entry:
  %ptr.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  store %struct.ssa_operand_iterator_d* %ptr, %struct.ssa_operand_iterator_d** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %ptr.addr, metadata !6347, metadata !DIExpression()), !dbg !6348
  %0 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6349
  %done = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %0, i32 0, i32 0, !dbg !6350
  %1 = load i8, i8* %done, align 8, !dbg !6350
  ret i8 %1, !dbg !6351
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @op_iter_next_tree(%struct.ssa_operand_iterator_d* %ptr) #0 !dbg !6352 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %ptr.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  %val = alloca %union.tree_node*, align 8
  store %struct.ssa_operand_iterator_d* %ptr, %struct.ssa_operand_iterator_d** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %ptr.addr, metadata !6355, metadata !DIExpression()), !dbg !6356
  call void @llvm.dbg.declare(metadata %union.tree_node** %val, metadata !6357, metadata !DIExpression()), !dbg !6358
  %0 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6359
  %uses = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %0, i32 0, i32 3, !dbg !6361
  %1 = load %struct.use_optype_d*, %struct.use_optype_d** %uses, align 8, !dbg !6361
  %tobool = icmp ne %struct.use_optype_d* %1, null, !dbg !6359
  br i1 %tobool, label %if.then, label %if.end, !dbg !6362

if.then:                                          ; preds = %entry
  %2 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6363
  %uses1 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %2, i32 0, i32 3, !dbg !6363
  %3 = load %struct.use_optype_d*, %struct.use_optype_d** %uses1, align 8, !dbg !6363
  %use_ptr = getelementptr inbounds %struct.use_optype_d, %struct.use_optype_d* %3, i32 0, i32 1, !dbg !6363
  %call = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %use_ptr), !dbg !6363
  store %union.tree_node* %call, %union.tree_node** %val, align 8, !dbg !6365
  %4 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6366
  %uses2 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %4, i32 0, i32 3, !dbg !6367
  %5 = load %struct.use_optype_d*, %struct.use_optype_d** %uses2, align 8, !dbg !6367
  %next = getelementptr inbounds %struct.use_optype_d, %struct.use_optype_d* %5, i32 0, i32 0, !dbg !6368
  %6 = load %struct.use_optype_d*, %struct.use_optype_d** %next, align 8, !dbg !6368
  %7 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6369
  %uses3 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %7, i32 0, i32 3, !dbg !6370
  store %struct.use_optype_d* %6, %struct.use_optype_d** %uses3, align 8, !dbg !6371
  %8 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !6372
  store %union.tree_node* %8, %union.tree_node** %retval, align 8, !dbg !6373
  br label %return, !dbg !6373

if.end:                                           ; preds = %entry
  %9 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6374
  %defs = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %9, i32 0, i32 2, !dbg !6376
  %10 = load %struct.def_optype_d*, %struct.def_optype_d** %defs, align 8, !dbg !6376
  %tobool4 = icmp ne %struct.def_optype_d* %10, null, !dbg !6374
  br i1 %tobool4, label %if.then5, label %if.end11, !dbg !6377

if.then5:                                         ; preds = %if.end
  %11 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6378
  %defs6 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %11, i32 0, i32 2, !dbg !6378
  %12 = load %struct.def_optype_d*, %struct.def_optype_d** %defs6, align 8, !dbg !6378
  %def_ptr = getelementptr inbounds %struct.def_optype_d, %struct.def_optype_d* %12, i32 0, i32 1, !dbg !6378
  %13 = load %union.tree_node**, %union.tree_node*** %def_ptr, align 8, !dbg !6378
  %call7 = call %union.tree_node* @get_def_from_ptr(%union.tree_node** %13), !dbg !6378
  store %union.tree_node* %call7, %union.tree_node** %val, align 8, !dbg !6380
  %14 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6381
  %defs8 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %14, i32 0, i32 2, !dbg !6382
  %15 = load %struct.def_optype_d*, %struct.def_optype_d** %defs8, align 8, !dbg !6382
  %next9 = getelementptr inbounds %struct.def_optype_d, %struct.def_optype_d* %15, i32 0, i32 0, !dbg !6383
  %16 = load %struct.def_optype_d*, %struct.def_optype_d** %next9, align 8, !dbg !6383
  %17 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6384
  %defs10 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %17, i32 0, i32 2, !dbg !6385
  store %struct.def_optype_d* %16, %struct.def_optype_d** %defs10, align 8, !dbg !6386
  %18 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !6387
  store %union.tree_node* %18, %union.tree_node** %retval, align 8, !dbg !6388
  br label %return, !dbg !6388

if.end11:                                         ; preds = %if.end
  %19 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6389
  %done = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %19, i32 0, i32 0, !dbg !6390
  store i8 1, i8* %done, align 8, !dbg !6391
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !6392
  br label %return, !dbg !6392

return:                                           ; preds = %if.end11, %if.then5, %if.then
  %20 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !6393
  ret %union.tree_node* %20, !dbg !6393
}

; Function Attrs: noinline nounwind uwtable
define internal void @op_iter_init(%struct.ssa_operand_iterator_d* %ptr, %union.gimple_statement_d* %stmt, i32 %flags) #0 !dbg !6394 {
entry:
  %ptr.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %flags.addr = alloca i32, align 4
  store %struct.ssa_operand_iterator_d* %ptr, %struct.ssa_operand_iterator_d** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %ptr.addr, metadata !6397, metadata !DIExpression()), !dbg !6398
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !6399, metadata !DIExpression()), !dbg !6400
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !6401, metadata !DIExpression()), !dbg !6402
  %0 = load i32, i32* %flags.addr, align 4, !dbg !6403
  %and = and i32 %0, 8, !dbg !6403
  %tobool = icmp ne i32 %and, 0, !dbg !6403
  br i1 %tobool, label %lor.lhs.false, label %land.lhs.true, !dbg !6403

lor.lhs.false:                                    ; preds = %entry
  %1 = load i32, i32* %flags.addr, align 4, !dbg !6403
  %and1 = and i32 %1, 2, !dbg !6403
  %tobool2 = icmp ne i32 %and1, 0, !dbg !6403
  br i1 %tobool2, label %land.lhs.true, label %cond.true, !dbg !6403

land.lhs.true:                                    ; preds = %lor.lhs.false, %entry
  %2 = load i32, i32* %flags.addr, align 4, !dbg !6403
  %and3 = and i32 %2, 4, !dbg !6403
  %tobool4 = icmp ne i32 %and3, 0, !dbg !6403
  br i1 %tobool4, label %lor.lhs.false5, label %cond.false, !dbg !6403

lor.lhs.false5:                                   ; preds = %land.lhs.true
  %3 = load i32, i32* %flags.addr, align 4, !dbg !6403
  %and6 = and i32 %3, 1, !dbg !6403
  %tobool7 = icmp ne i32 %and6, 0, !dbg !6403
  br i1 %tobool7, label %cond.false, label %cond.true, !dbg !6403

cond.true:                                        ; preds = %lor.lhs.false5, %lor.lhs.false
  call void @fancy_abort(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.7, i64 0, i64 0), i32 747, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0)), !dbg !6403
  br label %cond.end, !dbg !6403

cond.false:                                       ; preds = %lor.lhs.false5, %land.lhs.true
  br label %cond.end, !dbg !6403

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6403
  %4 = load i32, i32* %flags.addr, align 4, !dbg !6404
  %and8 = and i32 %4, 10, !dbg !6405
  %tobool9 = icmp ne i32 %and8, 0, !dbg !6405
  br i1 %tobool9, label %cond.true10, label %cond.false11, !dbg !6406

cond.true10:                                      ; preds = %cond.end
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6407
  %call = call %struct.def_optype_d* @gimple_def_ops(%union.gimple_statement_d* %5), !dbg !6408
  br label %cond.end12, !dbg !6406

cond.false11:                                     ; preds = %cond.end
  br label %cond.end12, !dbg !6406

cond.end12:                                       ; preds = %cond.false11, %cond.true10
  %cond13 = phi %struct.def_optype_d* [ %call, %cond.true10 ], [ null, %cond.false11 ], !dbg !6406
  %6 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6409
  %defs = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %6, i32 0, i32 2, !dbg !6410
  store %struct.def_optype_d* %cond13, %struct.def_optype_d** %defs, align 8, !dbg !6411
  %7 = load i32, i32* %flags.addr, align 4, !dbg !6412
  %and14 = and i32 %7, 8, !dbg !6414
  %tobool15 = icmp ne i32 %and14, 0, !dbg !6414
  br i1 %tobool15, label %if.end, label %land.lhs.true16, !dbg !6415

land.lhs.true16:                                  ; preds = %cond.end12
  %8 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6416
  %defs17 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %8, i32 0, i32 2, !dbg !6417
  %9 = load %struct.def_optype_d*, %struct.def_optype_d** %defs17, align 8, !dbg !6417
  %tobool18 = icmp ne %struct.def_optype_d* %9, null, !dbg !6416
  br i1 %tobool18, label %land.lhs.true19, label %if.end, !dbg !6418

land.lhs.true19:                                  ; preds = %land.lhs.true16
  %10 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6419
  %call20 = call %union.tree_node* @gimple_vdef(%union.gimple_statement_d* %10), !dbg !6420
  %cmp = icmp ne %union.tree_node* %call20, null, !dbg !6421
  br i1 %cmp, label %if.then, label %if.end, !dbg !6422

if.then:                                          ; preds = %land.lhs.true19
  %11 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6423
  %defs21 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %11, i32 0, i32 2, !dbg !6424
  %12 = load %struct.def_optype_d*, %struct.def_optype_d** %defs21, align 8, !dbg !6424
  %next = getelementptr inbounds %struct.def_optype_d, %struct.def_optype_d* %12, i32 0, i32 0, !dbg !6425
  %13 = load %struct.def_optype_d*, %struct.def_optype_d** %next, align 8, !dbg !6425
  %14 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6426
  %defs22 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %14, i32 0, i32 2, !dbg !6427
  store %struct.def_optype_d* %13, %struct.def_optype_d** %defs22, align 8, !dbg !6428
  br label %if.end, !dbg !6426

if.end:                                           ; preds = %if.then, %land.lhs.true19, %land.lhs.true16, %cond.end12
  %15 = load i32, i32* %flags.addr, align 4, !dbg !6429
  %and23 = and i32 %15, 5, !dbg !6430
  %tobool24 = icmp ne i32 %and23, 0, !dbg !6430
  br i1 %tobool24, label %cond.true25, label %cond.false27, !dbg !6431

cond.true25:                                      ; preds = %if.end
  %16 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6432
  %call26 = call %struct.use_optype_d* @gimple_use_ops(%union.gimple_statement_d* %16), !dbg !6433
  br label %cond.end28, !dbg !6431

cond.false27:                                     ; preds = %if.end
  br label %cond.end28, !dbg !6431

cond.end28:                                       ; preds = %cond.false27, %cond.true25
  %cond29 = phi %struct.use_optype_d* [ %call26, %cond.true25 ], [ null, %cond.false27 ], !dbg !6431
  %17 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6434
  %uses = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %17, i32 0, i32 3, !dbg !6435
  store %struct.use_optype_d* %cond29, %struct.use_optype_d** %uses, align 8, !dbg !6436
  %18 = load i32, i32* %flags.addr, align 4, !dbg !6437
  %and30 = and i32 %18, 4, !dbg !6439
  %tobool31 = icmp ne i32 %and30, 0, !dbg !6439
  br i1 %tobool31, label %if.end42, label %land.lhs.true32, !dbg !6440

land.lhs.true32:                                  ; preds = %cond.end28
  %19 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6441
  %uses33 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %19, i32 0, i32 3, !dbg !6442
  %20 = load %struct.use_optype_d*, %struct.use_optype_d** %uses33, align 8, !dbg !6442
  %tobool34 = icmp ne %struct.use_optype_d* %20, null, !dbg !6441
  br i1 %tobool34, label %land.lhs.true35, label %if.end42, !dbg !6443

land.lhs.true35:                                  ; preds = %land.lhs.true32
  %21 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6444
  %call36 = call %union.tree_node* @gimple_vuse(%union.gimple_statement_d* %21), !dbg !6445
  %cmp37 = icmp ne %union.tree_node* %call36, null, !dbg !6446
  br i1 %cmp37, label %if.then38, label %if.end42, !dbg !6447

if.then38:                                        ; preds = %land.lhs.true35
  %22 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6448
  %uses39 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %22, i32 0, i32 3, !dbg !6449
  %23 = load %struct.use_optype_d*, %struct.use_optype_d** %uses39, align 8, !dbg !6449
  %next40 = getelementptr inbounds %struct.use_optype_d, %struct.use_optype_d* %23, i32 0, i32 0, !dbg !6450
  %24 = load %struct.use_optype_d*, %struct.use_optype_d** %next40, align 8, !dbg !6450
  %25 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6451
  %uses41 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %25, i32 0, i32 3, !dbg !6452
  store %struct.use_optype_d* %24, %struct.use_optype_d** %uses41, align 8, !dbg !6453
  br label %if.end42, !dbg !6451

if.end42:                                         ; preds = %if.then38, %land.lhs.true35, %land.lhs.true32, %cond.end28
  %26 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6454
  %done = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %26, i32 0, i32 0, !dbg !6455
  store i8 0, i8* %done, align 8, !dbg !6456
  %27 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6457
  %phi_i = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %27, i32 0, i32 4, !dbg !6458
  store i32 0, i32* %phi_i, align 8, !dbg !6459
  %28 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6460
  %num_phi = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %28, i32 0, i32 5, !dbg !6461
  store i32 0, i32* %num_phi, align 4, !dbg !6462
  %29 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6463
  %phi_stmt = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %29, i32 0, i32 6, !dbg !6464
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %phi_stmt, align 8, !dbg !6465
  ret void, !dbg !6466
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.def_optype_d* @gimple_def_ops(%union.gimple_statement_d* %g) #0 !dbg !6467 {
entry:
  %retval = alloca %struct.def_optype_d*, align 8
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !6470, metadata !DIExpression()), !dbg !6471
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !6472
  %call = call zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %0), !dbg !6474
  %tobool = icmp ne i8 %call, 0, !dbg !6474
  br i1 %tobool, label %if.end, label %if.then, !dbg !6475

if.then:                                          ; preds = %entry
  store %struct.def_optype_d* null, %struct.def_optype_d** %retval, align 8, !dbg !6476
  br label %return, !dbg !6476

if.end:                                           ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !6477
  %gsops = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_with_ops*, !dbg !6478
  %opbase = getelementptr inbounds %struct.gimple_statement_with_ops, %struct.gimple_statement_with_ops* %gsops, i32 0, i32 0, !dbg !6479
  %def_ops = getelementptr inbounds %struct.gimple_statement_with_ops_base, %struct.gimple_statement_with_ops_base* %opbase, i32 0, i32 1, !dbg !6480
  %2 = load %struct.def_optype_d*, %struct.def_optype_d** %def_ops, align 8, !dbg !6480
  store %struct.def_optype_d* %2, %struct.def_optype_d** %retval, align 8, !dbg !6481
  br label %return, !dbg !6481

return:                                           ; preds = %if.end, %if.then
  %3 = load %struct.def_optype_d*, %struct.def_optype_d** %retval, align 8, !dbg !6482
  ret %struct.def_optype_d* %3, !dbg !6482
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_vdef(%union.gimple_statement_d* %g) #0 !dbg !6483 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !6484, metadata !DIExpression()), !dbg !6485
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !6486
  %call = call zeroext i8 @gimple_has_mem_ops(%union.gimple_statement_d* %0), !dbg !6488
  %tobool = icmp ne i8 %call, 0, !dbg !6488
  br i1 %tobool, label %if.end, label %if.then, !dbg !6489

if.then:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !6490
  br label %return, !dbg !6490

if.end:                                           ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !6491
  %gsmembase = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_with_memory_ops_base*, !dbg !6492
  %vdef = getelementptr inbounds %struct.gimple_statement_with_memory_ops_base, %struct.gimple_statement_with_memory_ops_base* %gsmembase, i32 0, i32 1, !dbg !6493
  %2 = load %union.tree_node*, %union.tree_node** %vdef, align 8, !dbg !6493
  store %union.tree_node* %2, %union.tree_node** %retval, align 8, !dbg !6494
  br label %return, !dbg !6494

return:                                           ; preds = %if.end, %if.then
  %3 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !6495
  ret %union.tree_node* %3, !dbg !6495
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.use_optype_d* @gimple_use_ops(%union.gimple_statement_d* %g) #0 !dbg !6496 {
entry:
  %retval = alloca %struct.use_optype_d*, align 8
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !6499, metadata !DIExpression()), !dbg !6500
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !6501
  %call = call zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %0), !dbg !6503
  %tobool = icmp ne i8 %call, 0, !dbg !6503
  br i1 %tobool, label %if.end, label %if.then, !dbg !6504

if.then:                                          ; preds = %entry
  store %struct.use_optype_d* null, %struct.use_optype_d** %retval, align 8, !dbg !6505
  br label %return, !dbg !6505

if.end:                                           ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !6506
  %gsops = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_with_ops*, !dbg !6507
  %opbase = getelementptr inbounds %struct.gimple_statement_with_ops, %struct.gimple_statement_with_ops* %gsops, i32 0, i32 0, !dbg !6508
  %use_ops = getelementptr inbounds %struct.gimple_statement_with_ops_base, %struct.gimple_statement_with_ops_base* %opbase, i32 0, i32 2, !dbg !6509
  %2 = load %struct.use_optype_d*, %struct.use_optype_d** %use_ops, align 8, !dbg !6509
  store %struct.use_optype_d* %2, %struct.use_optype_d** %retval, align 8, !dbg !6510
  br label %return, !dbg !6510

return:                                           ; preds = %if.end, %if.then
  %3 = load %struct.use_optype_d*, %struct.use_optype_d** %retval, align 8, !dbg !6511
  ret %struct.use_optype_d* %3, !dbg !6511
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_vuse(%union.gimple_statement_d* %g) #0 !dbg !6512 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !6513, metadata !DIExpression()), !dbg !6514
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !6515
  %call = call zeroext i8 @gimple_has_mem_ops(%union.gimple_statement_d* %0), !dbg !6517
  %tobool = icmp ne i8 %call, 0, !dbg !6517
  br i1 %tobool, label %if.end, label %if.then, !dbg !6518

if.then:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !6519
  br label %return, !dbg !6519

if.end:                                           ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !6520
  %gsmembase = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_with_memory_ops_base*, !dbg !6521
  %vuse = getelementptr inbounds %struct.gimple_statement_with_memory_ops_base, %struct.gimple_statement_with_memory_ops_base* %gsmembase, i32 0, i32 2, !dbg !6522
  %2 = load %union.tree_node*, %union.tree_node** %vuse, align 8, !dbg !6522
  store %union.tree_node* %2, %union.tree_node** %retval, align 8, !dbg !6523
  br label %return, !dbg !6523

return:                                           ; preds = %if.end, %if.then
  %3 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !6524
  ret %union.tree_node* %3, !dbg !6524
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %g) #0 !dbg !6525 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !6526, metadata !DIExpression()), !dbg !6527
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !6528
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !6529
  %cmp = icmp uge i32 %call, 1, !dbg !6530
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !6531

land.rhs:                                         ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !6532
  %call1 = call i32 @gimple_code(%union.gimple_statement_d* %1), !dbg !6533
  %cmp2 = icmp ule i32 %call1, 9, !dbg !6534
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %2 = phi i1 [ false, %entry ], [ %cmp2, %land.rhs ], !dbg !6535
  %land.ext = zext i1 %2 to i32, !dbg !6531
  %conv = trunc i32 %land.ext to i8, !dbg !6529
  ret i8 %conv, !dbg !6536
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_has_mem_ops(%union.gimple_statement_d* %g) #0 !dbg !6537 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !6538, metadata !DIExpression()), !dbg !6539
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !6540
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !6541
  %cmp = icmp uge i32 %call, 6, !dbg !6542
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !6543

land.rhs:                                         ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !6544
  %call1 = call i32 @gimple_code(%union.gimple_statement_d* %1), !dbg !6545
  %cmp2 = icmp ule i32 %call1, 9, !dbg !6546
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %2 = phi i1 [ false, %entry ], [ %cmp2, %land.rhs ], !dbg !6547
  %land.ext = zext i1 %2 to i32, !dbg !6543
  %conv = trunc i32 %land.ext to i8, !dbg !6541
  ret i8 %conv, !dbg !6548
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %use) #0 !dbg !6549 {
entry:
  %use.addr = alloca %struct.ssa_use_operand_d*, align 8
  store %struct.ssa_use_operand_d* %use, %struct.ssa_use_operand_d** %use.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %use.addr, metadata !6552, metadata !DIExpression()), !dbg !6553
  %0 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use.addr, align 8, !dbg !6554
  %use1 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %0, i32 0, i32 3, !dbg !6555
  %1 = load %union.tree_node**, %union.tree_node*** %use1, align 8, !dbg !6555
  %2 = load %union.tree_node*, %union.tree_node** %1, align 8, !dbg !6556
  ret %union.tree_node* %2, !dbg !6557
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_expr_code(%union.gimple_statement_d* %stmt) #0 !dbg !6558 {
entry:
  %retval = alloca i32, align 4
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %code = alloca i32, align 4
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !6559, metadata !DIExpression()), !dbg !6560
  call void @llvm.dbg.declare(metadata i32* %code, metadata !6561, metadata !DIExpression()), !dbg !6562
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6563
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !6564
  store i32 %call, i32* %code, align 4, !dbg !6562
  %1 = load i32, i32* %code, align 4, !dbg !6565
  %cmp = icmp eq i32 %1, 6, !dbg !6567
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !6568

lor.lhs.false:                                    ; preds = %entry
  %2 = load i32, i32* %code, align 4, !dbg !6569
  %cmp1 = icmp eq i32 %2, 1, !dbg !6570
  br i1 %cmp1, label %if.then, label %if.else, !dbg !6571

if.then:                                          ; preds = %lor.lhs.false, %entry
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6572
  %gsbase = bitcast %union.gimple_statement_d* %3 to %struct.gimple_statement_base*, !dbg !6573
  %4 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !6574
  %bf.load = load i32, i32* %4, align 8, !dbg !6574
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !6574
  store i32 %bf.lshr, i32* %retval, align 4, !dbg !6575
  br label %return, !dbg !6575

if.else:                                          ; preds = %lor.lhs.false
  %5 = load i32, i32* %code, align 4, !dbg !6576
  %cmp2 = icmp eq i32 %5, 8, !dbg !6578
  br i1 %cmp2, label %if.then3, label %if.else4, !dbg !6579

if.then3:                                         ; preds = %if.else
  store i32 59, i32* %retval, align 4, !dbg !6580
  br label %return, !dbg !6580

if.else4:                                         ; preds = %if.else
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.8, i64 0, i64 0), i32 1446, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0)), !dbg !6581
  br label %if.end

if.end:                                           ; preds = %if.else4
  br label %if.end5

if.end5:                                          ; preds = %if.end
  store i32 0, i32* %retval, align 4, !dbg !6582
  br label %return, !dbg !6582

return:                                           ; preds = %if.end5, %if.then3, %if.then
  %6 = load i32, i32* %retval, align 4, !dbg !6583
  ret i32 %6, !dbg !6583
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @get_gimple_rhs_class(i32 %code) #0 !dbg !6584 {
entry:
  %code.addr = alloca i32, align 4
  store i32 %code, i32* %code.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %code.addr, metadata !6587, metadata !DIExpression()), !dbg !6588
  %0 = load i32, i32* %code.addr, align 4, !dbg !6589
  %idxprom = sext i32 %0 to i64, !dbg !6590
  %arrayidx = getelementptr inbounds [0 x i8], [0 x i8]* @gimple_rhs_class_table, i64 0, i64 %idxprom, !dbg !6590
  %1 = load i8, i8* %arrayidx, align 1, !dbg !6590
  %conv = zext i8 %1 to i32, !dbg !6591
  ret i32 %conv, !dbg !6592
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_num_ops(%union.gimple_statement_d* %gs) #0 !dbg !6593 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6596, metadata !DIExpression()), !dbg !6597
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6598
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !6599
  %num_ops = getelementptr inbounds %struct.gimple_statement_base, %struct.gimple_statement_base* %gsbase, i32 0, i32 3, !dbg !6600
  %1 = load i32, i32* %num_ops, align 4, !dbg !6600
  ret i32 %1, !dbg !6601
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_op(%union.gimple_statement_d* %gs, i32 %i) #0 !dbg !6602 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %i.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6605, metadata !DIExpression()), !dbg !6606
  store i32 %i, i32* %i.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %i.addr, metadata !6607, metadata !DIExpression()), !dbg !6608
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6609
  %call = call zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %0), !dbg !6611
  %tobool = icmp ne i8 %call, 0, !dbg !6611
  br i1 %tobool, label %if.then, label %if.else, !dbg !6612

if.then:                                          ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6613
  %call1 = call %union.tree_node** @gimple_ops(%union.gimple_statement_d* %1), !dbg !6615
  %2 = load i32, i32* %i.addr, align 4, !dbg !6616
  %idxprom = zext i32 %2 to i64, !dbg !6615
  %arrayidx = getelementptr inbounds %union.tree_node*, %union.tree_node** %call1, i64 %idxprom, !dbg !6615
  %3 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !6615
  store %union.tree_node* %3, %union.tree_node** %retval, align 8, !dbg !6617
  br label %return, !dbg !6617

if.else:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !6618
  br label %return, !dbg !6618

return:                                           ; preds = %if.else, %if.then
  %4 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !6619
  ret %union.tree_node* %4, !dbg !6619
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @gimple_ops(%union.gimple_statement_d* %gs) #0 !dbg !6620 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %off = alloca i64, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6621, metadata !DIExpression()), !dbg !6622
  call void @llvm.dbg.declare(metadata i64* %off, metadata !6623, metadata !DIExpression()), !dbg !6624
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6625
  %call = call i32 @gimple_statement_structure(%union.gimple_statement_d* %0), !dbg !6626
  %idxprom = zext i32 %call to i64, !dbg !6627
  %arrayidx = getelementptr inbounds [0 x i64], [0 x i64]* @gimple_ops_offset_, i64 0, i64 %idxprom, !dbg !6627
  %1 = load i64, i64* %arrayidx, align 8, !dbg !6627
  store i64 %1, i64* %off, align 8, !dbg !6628
  %2 = load i64, i64* %off, align 8, !dbg !6629
  %cmp = icmp ne i64 %2, 0, !dbg !6629
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !6629

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.8, i64 0, i64 0), i32 1622, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0)), !dbg !6629
  br label %cond.end, !dbg !6629

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6629

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6629
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6630
  %4 = bitcast %union.gimple_statement_d* %3 to i8*, !dbg !6631
  %5 = load i64, i64* %off, align 8, !dbg !6632
  %add.ptr = getelementptr inbounds i8, i8* %4, i64 %5, !dbg !6633
  %6 = bitcast i8* %add.ptr to %union.tree_node**, !dbg !6634
  ret %union.tree_node** %6, !dbg !6635
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_statement_structure(%union.gimple_statement_d* %gs) #0 !dbg !6636 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6639, metadata !DIExpression()), !dbg !6640
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6641
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !6642
  %call1 = call i32 @gss_for_code(i32 %call), !dbg !6643
  ret i32 %call1, !dbg !6644
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gss_for_code(i32 %code) #0 !dbg !6645 {
entry:
  %code.addr = alloca i32, align 4
  store i32 %code, i32* %code.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %code.addr, metadata !6648, metadata !DIExpression()), !dbg !6649
  %0 = load i32, i32* %code.addr, align 4, !dbg !6650
  %idxprom = zext i32 %0 to i64, !dbg !6651
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @gss_for_code_, i64 0, i64 %idxprom, !dbg !6651
  %1 = load i32, i32* %arrayidx, align 4, !dbg !6651
  ret i32 %1, !dbg !6652
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_call_fn(%union.gimple_statement_d* %gs) #0 !dbg !6653 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6654, metadata !DIExpression()), !dbg !6655
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6656
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 1), !dbg !6657
  ret %union.tree_node* %call, !dbg !6658
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_set_op(%union.gimple_statement_d* %gs, i32 %i, %union.tree_node* %op) #0 !dbg !6659 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %i.addr = alloca i32, align 4
  %op.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6662, metadata !DIExpression()), !dbg !6663
  store i32 %i, i32* %i.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %i.addr, metadata !6664, metadata !DIExpression()), !dbg !6665
  store %union.tree_node* %op, %union.tree_node** %op.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %op.addr, metadata !6666, metadata !DIExpression()), !dbg !6667
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6668
  %call = call zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %0), !dbg !6668
  %conv = zext i8 %call to i32, !dbg !6668
  %tobool = icmp ne i32 %conv, 0, !dbg !6668
  br i1 %tobool, label %land.lhs.true, label %cond.true, !dbg !6668

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %i.addr, align 4, !dbg !6668
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6668
  %call1 = call i32 @gimple_num_ops(%union.gimple_statement_d* %2), !dbg !6668
  %cmp = icmp ult i32 %1, %call1, !dbg !6668
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !6668

cond.true:                                        ; preds = %land.lhs.true, %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.8, i64 0, i64 0), i32 1665, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0)), !dbg !6668
  br label %cond.end, !dbg !6668

cond.false:                                       ; preds = %land.lhs.true
  br label %cond.end, !dbg !6668

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6668
  %3 = load %union.tree_node*, %union.tree_node** %op.addr, align 8, !dbg !6669
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6670
  %call3 = call %union.tree_node** @gimple_ops(%union.gimple_statement_d* %4), !dbg !6671
  %5 = load i32, i32* %i.addr, align 4, !dbg !6672
  %idxprom = zext i32 %5 to i64, !dbg !6671
  %arrayidx = getelementptr inbounds %union.tree_node*, %union.tree_node** %call3, i64 %idxprom, !dbg !6671
  store %union.tree_node* %3, %union.tree_node** %arrayidx, align 8, !dbg !6673
  ret void, !dbg !6674
}

declare dso_local %union.tree_node* @build_fold_addr_expr_loc(i32, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_location(%union.gimple_statement_d* %g) #0 !dbg !6675 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !6678, metadata !DIExpression()), !dbg !6679
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !6680
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !6681
  %location = getelementptr inbounds %struct.gimple_statement_base, %struct.gimple_statement_base* %gsbase, i32 0, i32 2, !dbg !6682
  %1 = load i32, i32* %location, align 8, !dbg !6682
  ret i32 %1, !dbg !6683
}

declare dso_local void @gimple_set_modified(%union.gimple_statement_d*, i8 zeroext) #2

declare dso_local void @update_stmt_operands(%union.gimple_statement_d*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @link_use_stmts_after(%struct.ssa_use_operand_d* %head, %struct.immediate_use_iterator_d* %imm) #0 !dbg !6684 {
entry:
  %head.addr = alloca %struct.ssa_use_operand_d*, align 8
  %imm.addr = alloca %struct.immediate_use_iterator_d*, align 8
  %use_p = alloca %struct.ssa_use_operand_d*, align 8
  %last_p = alloca %struct.ssa_use_operand_d*, align 8
  %head_stmt = alloca %union.gimple_statement_d*, align 8
  %use = alloca %union.tree_node*, align 8
  %op_iter = alloca %struct.ssa_operand_iterator_d, align 8
  %flag = alloca i32, align 4
  store %struct.ssa_use_operand_d* %head, %struct.ssa_use_operand_d** %head.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %head.addr, metadata !6687, metadata !DIExpression()), !dbg !6688
  store %struct.immediate_use_iterator_d* %imm, %struct.immediate_use_iterator_d** %imm.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.immediate_use_iterator_d** %imm.addr, metadata !6689, metadata !DIExpression()), !dbg !6690
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %use_p, metadata !6691, metadata !DIExpression()), !dbg !6692
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %last_p, metadata !6693, metadata !DIExpression()), !dbg !6694
  %0 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %head.addr, align 8, !dbg !6695
  store %struct.ssa_use_operand_d* %0, %struct.ssa_use_operand_d** %last_p, align 8, !dbg !6694
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %head_stmt, metadata !6696, metadata !DIExpression()), !dbg !6697
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %head.addr, align 8, !dbg !6698
  %loc = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %1, i32 0, i32 2, !dbg !6698
  %stmt = bitcast %union.anon* %loc to %union.gimple_statement_d**, !dbg !6698
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6698
  store %union.gimple_statement_d* %2, %union.gimple_statement_d** %head_stmt, align 8, !dbg !6697
  call void @llvm.dbg.declare(metadata %union.tree_node** %use, metadata !6699, metadata !DIExpression()), !dbg !6700
  %3 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %head.addr, align 8, !dbg !6701
  %call = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %3), !dbg !6701
  store %union.tree_node* %call, %union.tree_node** %use, align 8, !dbg !6700
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d* %op_iter, metadata !6702, metadata !DIExpression()), !dbg !6703
  call void @llvm.dbg.declare(metadata i32* %flag, metadata !6704, metadata !DIExpression()), !dbg !6705
  %4 = load %union.tree_node*, %union.tree_node** %use, align 8, !dbg !6706
  %call1 = call zeroext i8 @is_gimple_reg(%union.tree_node* %4), !dbg !6707
  %conv = zext i8 %call1 to i32, !dbg !6707
  %tobool = icmp ne i32 %conv, 0, !dbg !6707
  %5 = zext i1 %tobool to i64, !dbg !6707
  %cond = select i1 %tobool, i32 1, i32 4, !dbg !6707
  store i32 %cond, i32* %flag, align 4, !dbg !6708
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %head_stmt, align 8, !dbg !6709
  %call2 = call i32 @gimple_code(%union.gimple_statement_d* %6), !dbg !6711
  %cmp = icmp eq i32 %call2, 16, !dbg !6712
  br i1 %cmp, label %if.then, label %if.else, !dbg !6713

if.then:                                          ; preds = %entry
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %head_stmt, align 8, !dbg !6714
  %8 = load i32, i32* %flag, align 4, !dbg !6714
  %call4 = call %struct.ssa_use_operand_d* @op_iter_init_phiuse(%struct.ssa_operand_iterator_d* %op_iter, %union.gimple_statement_d* %7, i32 %8), !dbg !6714
  store %struct.ssa_use_operand_d* %call4, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !6714
  br label %for.cond, !dbg !6714

for.cond:                                         ; preds = %for.inc, %if.then
  %call5 = call zeroext i8 @op_iter_done(%struct.ssa_operand_iterator_d* %op_iter), !dbg !6717
  %tobool6 = icmp ne i8 %call5, 0, !dbg !6717
  %lnot = xor i1 %tobool6, true, !dbg !6717
  br i1 %lnot, label %for.body, label %for.end, !dbg !6714

for.body:                                         ; preds = %for.cond
  %9 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !6719
  %call7 = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %9), !dbg !6719
  %10 = load %union.tree_node*, %union.tree_node** %use, align 8, !dbg !6721
  %cmp8 = icmp eq %union.tree_node* %call7, %10, !dbg !6722
  br i1 %cmp8, label %if.then10, label %if.end, !dbg !6723

if.then10:                                        ; preds = %for.body
  %11 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !6724
  %12 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %head.addr, align 8, !dbg !6725
  %13 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %last_p, align 8, !dbg !6726
  %call11 = call %struct.ssa_use_operand_d* @move_use_after_head(%struct.ssa_use_operand_d* %11, %struct.ssa_use_operand_d* %12, %struct.ssa_use_operand_d* %13), !dbg !6727
  store %struct.ssa_use_operand_d* %call11, %struct.ssa_use_operand_d** %last_p, align 8, !dbg !6728
  br label %if.end, !dbg !6729

if.end:                                           ; preds = %if.then10, %for.body
  br label %for.inc, !dbg !6721

for.inc:                                          ; preds = %if.end
  %call12 = call %struct.ssa_use_operand_d* @op_iter_next_use(%struct.ssa_operand_iterator_d* %op_iter), !dbg !6717
  store %struct.ssa_use_operand_d* %call12, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !6717
  br label %for.cond, !dbg !6717, !llvm.loop !6730

for.end:                                          ; preds = %for.cond
  br label %if.end44, !dbg !6732

if.else:                                          ; preds = %entry
  %14 = load i32, i32* %flag, align 4, !dbg !6733
  %cmp13 = icmp eq i32 %14, 1, !dbg !6736
  br i1 %cmp13, label %if.then15, label %if.else31, !dbg !6737

if.then15:                                        ; preds = %if.else
  %15 = load %union.gimple_statement_d*, %union.gimple_statement_d** %head_stmt, align 8, !dbg !6738
  %16 = load i32, i32* %flag, align 4, !dbg !6738
  %call16 = call %struct.ssa_use_operand_d* @op_iter_init_use(%struct.ssa_operand_iterator_d* %op_iter, %union.gimple_statement_d* %15, i32 %16), !dbg !6738
  store %struct.ssa_use_operand_d* %call16, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !6738
  br label %for.cond17, !dbg !6738

for.cond17:                                       ; preds = %for.inc28, %if.then15
  %call18 = call zeroext i8 @op_iter_done(%struct.ssa_operand_iterator_d* %op_iter), !dbg !6741
  %tobool19 = icmp ne i8 %call18, 0, !dbg !6741
  %lnot20 = xor i1 %tobool19, true, !dbg !6741
  br i1 %lnot20, label %for.body21, label %for.end30, !dbg !6738

for.body21:                                       ; preds = %for.cond17
  %17 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !6743
  %call22 = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %17), !dbg !6743
  %18 = load %union.tree_node*, %union.tree_node** %use, align 8, !dbg !6745
  %cmp23 = icmp eq %union.tree_node* %call22, %18, !dbg !6746
  br i1 %cmp23, label %if.then25, label %if.end27, !dbg !6747

if.then25:                                        ; preds = %for.body21
  %19 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !6748
  %20 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %head.addr, align 8, !dbg !6749
  %21 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %last_p, align 8, !dbg !6750
  %call26 = call %struct.ssa_use_operand_d* @move_use_after_head(%struct.ssa_use_operand_d* %19, %struct.ssa_use_operand_d* %20, %struct.ssa_use_operand_d* %21), !dbg !6751
  store %struct.ssa_use_operand_d* %call26, %struct.ssa_use_operand_d** %last_p, align 8, !dbg !6752
  br label %if.end27, !dbg !6753

if.end27:                                         ; preds = %if.then25, %for.body21
  br label %for.inc28, !dbg !6745

for.inc28:                                        ; preds = %if.end27
  %call29 = call %struct.ssa_use_operand_d* @op_iter_next_use(%struct.ssa_operand_iterator_d* %op_iter), !dbg !6741
  store %struct.ssa_use_operand_d* %call29, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !6741
  br label %for.cond17, !dbg !6741, !llvm.loop !6754

for.end30:                                        ; preds = %for.cond17
  br label %if.end43, !dbg !6756

if.else31:                                        ; preds = %if.else
  %22 = load %union.gimple_statement_d*, %union.gimple_statement_d** %head_stmt, align 8, !dbg !6757
  %call32 = call %struct.ssa_use_operand_d* @gimple_vuse_op(%union.gimple_statement_d* %22), !dbg !6759
  store %struct.ssa_use_operand_d* %call32, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !6760
  %cmp33 = icmp ne %struct.ssa_use_operand_d* %call32, null, !dbg !6761
  br i1 %cmp33, label %if.then35, label %if.end42, !dbg !6762

if.then35:                                        ; preds = %if.else31
  %23 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !6763
  %call36 = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %23), !dbg !6763
  %24 = load %union.tree_node*, %union.tree_node** %use, align 8, !dbg !6766
  %cmp37 = icmp eq %union.tree_node* %call36, %24, !dbg !6767
  br i1 %cmp37, label %if.then39, label %if.end41, !dbg !6768

if.then39:                                        ; preds = %if.then35
  %25 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !6769
  %26 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %head.addr, align 8, !dbg !6770
  %27 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %last_p, align 8, !dbg !6771
  %call40 = call %struct.ssa_use_operand_d* @move_use_after_head(%struct.ssa_use_operand_d* %25, %struct.ssa_use_operand_d* %26, %struct.ssa_use_operand_d* %27), !dbg !6772
  store %struct.ssa_use_operand_d* %call40, %struct.ssa_use_operand_d** %last_p, align 8, !dbg !6773
  br label %if.end41, !dbg !6774

if.end41:                                         ; preds = %if.then39, %if.then35
  br label %if.end42, !dbg !6775

if.end42:                                         ; preds = %if.end41, %if.else31
  br label %if.end43

if.end43:                                         ; preds = %if.end42, %for.end30
  br label %if.end44

if.end44:                                         ; preds = %if.end43, %for.end
  %28 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !6776
  %iter_node = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %28, i32 0, i32 2, !dbg !6778
  %prev = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %iter_node, i32 0, i32 0, !dbg !6779
  %29 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %prev, align 8, !dbg !6779
  %cmp45 = icmp ne %struct.ssa_use_operand_d* %29, null, !dbg !6780
  br i1 %cmp45, label %if.then47, label %if.end49, !dbg !6781

if.then47:                                        ; preds = %if.end44
  %30 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !6782
  %iter_node48 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %30, i32 0, i32 2, !dbg !6783
  call void @delink_imm_use(%struct.ssa_use_operand_d* %iter_node48), !dbg !6784
  br label %if.end49, !dbg !6784

if.end49:                                         ; preds = %if.then47, %if.end44
  %31 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !6785
  %iter_node50 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %31, i32 0, i32 2, !dbg !6786
  %32 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %last_p, align 8, !dbg !6787
  call void @link_imm_use_to_list(%struct.ssa_use_operand_d* %iter_node50, %struct.ssa_use_operand_d* %32), !dbg !6788
  ret void, !dbg !6789
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ssa_use_operand_d* @op_iter_init_phiuse(%struct.ssa_operand_iterator_d* %ptr, %union.gimple_statement_d* %phi, i32 %flags) #0 !dbg !6790 {
entry:
  %retval = alloca %struct.ssa_use_operand_d*, align 8
  %ptr.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  %phi.addr = alloca %union.gimple_statement_d*, align 8
  %flags.addr = alloca i32, align 4
  %phi_def = alloca %union.tree_node*, align 8
  %comp = alloca i32, align 4
  store %struct.ssa_operand_iterator_d* %ptr, %struct.ssa_operand_iterator_d** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %ptr.addr, metadata !6793, metadata !DIExpression()), !dbg !6794
  store %union.gimple_statement_d* %phi, %union.gimple_statement_d** %phi.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %phi.addr, metadata !6795, metadata !DIExpression()), !dbg !6796
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !6797, metadata !DIExpression()), !dbg !6798
  call void @llvm.dbg.declare(metadata %union.tree_node** %phi_def, metadata !6799, metadata !DIExpression()), !dbg !6800
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi.addr, align 8, !dbg !6801
  %call = call %union.tree_node* @gimple_phi_result(%union.gimple_statement_d* %0), !dbg !6802
  store %union.tree_node* %call, %union.tree_node** %phi_def, align 8, !dbg !6800
  call void @llvm.dbg.declare(metadata i32* %comp, metadata !6803, metadata !DIExpression()), !dbg !6804
  %1 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6805
  call void @clear_and_done_ssa_iter(%struct.ssa_operand_iterator_d* %1), !dbg !6806
  %2 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6807
  %done = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %2, i32 0, i32 0, !dbg !6808
  store i8 0, i8* %done, align 8, !dbg !6809
  %3 = load i32, i32* %flags.addr, align 4, !dbg !6810
  %and = and i32 %3, 5, !dbg !6810
  %cmp = icmp ne i32 %and, 0, !dbg !6810
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !6810

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.7, i64 0, i64 0), i32 918, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0)), !dbg !6810
  br label %cond.end, !dbg !6810

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6810

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6810
  %4 = load %union.tree_node*, %union.tree_node** %phi_def, align 8, !dbg !6811
  %call1 = call zeroext i8 @is_gimple_reg(%union.tree_node* %4), !dbg !6812
  %conv = zext i8 %call1 to i32, !dbg !6812
  %tobool = icmp ne i32 %conv, 0, !dbg !6812
  %5 = zext i1 %tobool to i64, !dbg !6812
  %cond2 = select i1 %tobool, i32 1, i32 4, !dbg !6812
  store i32 %cond2, i32* %comp, align 4, !dbg !6813
  %6 = load i32, i32* %flags.addr, align 4, !dbg !6814
  %7 = load i32, i32* %comp, align 4, !dbg !6816
  %and3 = and i32 %6, %7, !dbg !6817
  %cmp4 = icmp eq i32 %and3, 0, !dbg !6818
  br i1 %cmp4, label %if.then, label %if.end, !dbg !6819

if.then:                                          ; preds = %cond.end
  %8 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6820
  %done6 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %8, i32 0, i32 0, !dbg !6822
  store i8 1, i8* %done6, align 8, !dbg !6823
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %retval, align 8, !dbg !6824
  br label %return, !dbg !6824

if.end:                                           ; preds = %cond.end
  %9 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi.addr, align 8, !dbg !6825
  %10 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6826
  %phi_stmt = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %10, i32 0, i32 6, !dbg !6827
  store %union.gimple_statement_d* %9, %union.gimple_statement_d** %phi_stmt, align 8, !dbg !6828
  %11 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi.addr, align 8, !dbg !6829
  %call7 = call i32 @gimple_phi_num_args(%union.gimple_statement_d* %11), !dbg !6830
  %12 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6831
  %num_phi = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %12, i32 0, i32 5, !dbg !6832
  store i32 %call7, i32* %num_phi, align 4, !dbg !6833
  %13 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6834
  %iter_type = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %13, i32 0, i32 1, !dbg !6835
  store i32 2, i32* %iter_type, align 4, !dbg !6836
  %14 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6837
  %call8 = call %struct.ssa_use_operand_d* @op_iter_next_use(%struct.ssa_operand_iterator_d* %14), !dbg !6838
  store %struct.ssa_use_operand_d* %call8, %struct.ssa_use_operand_d** %retval, align 8, !dbg !6839
  br label %return, !dbg !6839

return:                                           ; preds = %if.end, %if.then
  %15 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %retval, align 8, !dbg !6840
  ret %struct.ssa_use_operand_d* %15, !dbg !6840
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ssa_use_operand_d* @move_use_after_head(%struct.ssa_use_operand_d* %use_p, %struct.ssa_use_operand_d* %head, %struct.ssa_use_operand_d* %last_p) #0 !dbg !6841 {
entry:
  %use_p.addr = alloca %struct.ssa_use_operand_d*, align 8
  %head.addr = alloca %struct.ssa_use_operand_d*, align 8
  %last_p.addr = alloca %struct.ssa_use_operand_d*, align 8
  store %struct.ssa_use_operand_d* %use_p, %struct.ssa_use_operand_d** %use_p.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %use_p.addr, metadata !6844, metadata !DIExpression()), !dbg !6845
  store %struct.ssa_use_operand_d* %head, %struct.ssa_use_operand_d** %head.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %head.addr, metadata !6846, metadata !DIExpression()), !dbg !6847
  store %struct.ssa_use_operand_d* %last_p, %struct.ssa_use_operand_d** %last_p.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %last_p.addr, metadata !6848, metadata !DIExpression()), !dbg !6849
  %0 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p.addr, align 8, !dbg !6850
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %head.addr, align 8, !dbg !6852
  %cmp = icmp ne %struct.ssa_use_operand_d* %0, %1, !dbg !6853
  br i1 %cmp, label %if.then, label %if.end3, !dbg !6854

if.then:                                          ; preds = %entry
  %2 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %last_p.addr, align 8, !dbg !6855
  %next = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %2, i32 0, i32 1, !dbg !6858
  %3 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next, align 8, !dbg !6858
  %4 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p.addr, align 8, !dbg !6859
  %cmp1 = icmp eq %struct.ssa_use_operand_d* %3, %4, !dbg !6860
  br i1 %cmp1, label %if.then2, label %if.else, !dbg !6861

if.then2:                                         ; preds = %if.then
  %5 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p.addr, align 8, !dbg !6862
  store %struct.ssa_use_operand_d* %5, %struct.ssa_use_operand_d** %last_p.addr, align 8, !dbg !6863
  br label %if.end, !dbg !6864

if.else:                                          ; preds = %if.then
  %6 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p.addr, align 8, !dbg !6865
  call void @delink_imm_use(%struct.ssa_use_operand_d* %6), !dbg !6867
  %7 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p.addr, align 8, !dbg !6868
  %8 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %last_p.addr, align 8, !dbg !6869
  call void @link_imm_use_to_list(%struct.ssa_use_operand_d* %7, %struct.ssa_use_operand_d* %8), !dbg !6870
  %9 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p.addr, align 8, !dbg !6871
  store %struct.ssa_use_operand_d* %9, %struct.ssa_use_operand_d** %last_p.addr, align 8, !dbg !6872
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then2
  br label %if.end3, !dbg !6873

if.end3:                                          ; preds = %if.end, %entry
  %10 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %last_p.addr, align 8, !dbg !6874
  ret %struct.ssa_use_operand_d* %10, !dbg !6875
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ssa_use_operand_d* @op_iter_next_use(%struct.ssa_operand_iterator_d* %ptr) #0 !dbg !6876 {
entry:
  %retval = alloca %struct.ssa_use_operand_d*, align 8
  %ptr.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  %use_p = alloca %struct.ssa_use_operand_d*, align 8
  store %struct.ssa_operand_iterator_d* %ptr, %struct.ssa_operand_iterator_d** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %ptr.addr, metadata !6879, metadata !DIExpression()), !dbg !6880
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %use_p, metadata !6881, metadata !DIExpression()), !dbg !6882
  %0 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6883
  %uses = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %0, i32 0, i32 3, !dbg !6885
  %1 = load %struct.use_optype_d*, %struct.use_optype_d** %uses, align 8, !dbg !6885
  %tobool = icmp ne %struct.use_optype_d* %1, null, !dbg !6883
  br i1 %tobool, label %if.then, label %if.end, !dbg !6886

if.then:                                          ; preds = %entry
  %2 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6887
  %uses1 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %2, i32 0, i32 3, !dbg !6887
  %3 = load %struct.use_optype_d*, %struct.use_optype_d** %uses1, align 8, !dbg !6887
  %use_ptr = getelementptr inbounds %struct.use_optype_d, %struct.use_optype_d* %3, i32 0, i32 1, !dbg !6887
  store %struct.ssa_use_operand_d* %use_ptr, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !6889
  %4 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6890
  %uses2 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %4, i32 0, i32 3, !dbg !6891
  %5 = load %struct.use_optype_d*, %struct.use_optype_d** %uses2, align 8, !dbg !6891
  %next = getelementptr inbounds %struct.use_optype_d, %struct.use_optype_d* %5, i32 0, i32 0, !dbg !6892
  %6 = load %struct.use_optype_d*, %struct.use_optype_d** %next, align 8, !dbg !6892
  %7 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6893
  %uses3 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %7, i32 0, i32 3, !dbg !6894
  store %struct.use_optype_d* %6, %struct.use_optype_d** %uses3, align 8, !dbg !6895
  %8 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !6896
  store %struct.ssa_use_operand_d* %8, %struct.ssa_use_operand_d** %retval, align 8, !dbg !6897
  br label %return, !dbg !6897

if.end:                                           ; preds = %entry
  %9 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6898
  %phi_i = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %9, i32 0, i32 4, !dbg !6900
  %10 = load i32, i32* %phi_i, align 8, !dbg !6900
  %11 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6901
  %num_phi = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %11, i32 0, i32 5, !dbg !6902
  %12 = load i32, i32* %num_phi, align 4, !dbg !6902
  %cmp = icmp slt i32 %10, %12, !dbg !6903
  br i1 %cmp, label %if.then4, label %if.end6, !dbg !6904

if.then4:                                         ; preds = %if.end
  %13 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6905
  %phi_stmt = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %13, i32 0, i32 6, !dbg !6905
  %14 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi_stmt, align 8, !dbg !6905
  %15 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6905
  %phi_i5 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %15, i32 0, i32 4, !dbg !6905
  %16 = load i32, i32* %phi_i5, align 8, !dbg !6905
  %inc = add nsw i32 %16, 1, !dbg !6905
  store i32 %inc, i32* %phi_i5, align 8, !dbg !6905
  %call = call %struct.ssa_use_operand_d* @gimple_phi_arg_imm_use_ptr(%union.gimple_statement_d* %14, i32 %16), !dbg !6905
  store %struct.ssa_use_operand_d* %call, %struct.ssa_use_operand_d** %retval, align 8, !dbg !6907
  br label %return, !dbg !6907

if.end6:                                          ; preds = %if.end
  %17 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6908
  %done = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %17, i32 0, i32 0, !dbg !6909
  store i8 1, i8* %done, align 8, !dbg !6910
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %retval, align 8, !dbg !6911
  br label %return, !dbg !6911

return:                                           ; preds = %if.end6, %if.then4, %if.then
  %18 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %retval, align 8, !dbg !6912
  ret %struct.ssa_use_operand_d* %18, !dbg !6912
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ssa_use_operand_d* @op_iter_init_use(%struct.ssa_operand_iterator_d* %ptr, %union.gimple_statement_d* %stmt, i32 %flags) #0 !dbg !6913 {
entry:
  %ptr.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %flags.addr = alloca i32, align 4
  store %struct.ssa_operand_iterator_d* %ptr, %struct.ssa_operand_iterator_d** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %ptr.addr, metadata !6914, metadata !DIExpression()), !dbg !6915
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !6916, metadata !DIExpression()), !dbg !6917
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !6918, metadata !DIExpression()), !dbg !6919
  %0 = load i32, i32* %flags.addr, align 4, !dbg !6920
  %and = and i32 %0, 10, !dbg !6920
  %cmp = icmp eq i32 %and, 0, !dbg !6920
  br i1 %cmp, label %land.lhs.true, label %cond.true, !dbg !6920

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %flags.addr, align 4, !dbg !6920
  %and1 = and i32 %1, 1, !dbg !6920
  %tobool = icmp ne i32 %and1, 0, !dbg !6920
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !6920

cond.true:                                        ; preds = %land.lhs.true, %entry
  call void @fancy_abort(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.7, i64 0, i64 0), i32 771, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0)), !dbg !6920
  br label %cond.end, !dbg !6920

cond.false:                                       ; preds = %land.lhs.true
  br label %cond.end, !dbg !6920

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6920
  %2 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6921
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6922
  %4 = load i32, i32* %flags.addr, align 4, !dbg !6923
  call void @op_iter_init(%struct.ssa_operand_iterator_d* %2, %union.gimple_statement_d* %3, i32 %4), !dbg !6924
  %5 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6925
  %iter_type = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %5, i32 0, i32 1, !dbg !6926
  store i32 2, i32* %iter_type, align 4, !dbg !6927
  %6 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6928
  %call = call %struct.ssa_use_operand_d* @op_iter_next_use(%struct.ssa_operand_iterator_d* %6), !dbg !6929
  ret %struct.ssa_use_operand_d* %call, !dbg !6930
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ssa_use_operand_d* @gimple_vuse_op(%union.gimple_statement_d* %g) #0 !dbg !6931 {
entry:
  %retval = alloca %struct.ssa_use_operand_d*, align 8
  %g.addr = alloca %union.gimple_statement_d*, align 8
  %ops = alloca %struct.use_optype_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !6934, metadata !DIExpression()), !dbg !6935
  call void @llvm.dbg.declare(metadata %struct.use_optype_d** %ops, metadata !6936, metadata !DIExpression()), !dbg !6937
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !6938
  %call = call zeroext i8 @gimple_has_mem_ops(%union.gimple_statement_d* %0), !dbg !6940
  %tobool = icmp ne i8 %call, 0, !dbg !6940
  br i1 %tobool, label %if.end, label %if.then, !dbg !6941

if.then:                                          ; preds = %entry
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %retval, align 8, !dbg !6942
  br label %return, !dbg !6942

if.end:                                           ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !6943
  %gsops = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_with_ops*, !dbg !6944
  %opbase = getelementptr inbounds %struct.gimple_statement_with_ops, %struct.gimple_statement_with_ops* %gsops, i32 0, i32 0, !dbg !6945
  %use_ops = getelementptr inbounds %struct.gimple_statement_with_ops_base, %struct.gimple_statement_with_ops_base* %opbase, i32 0, i32 2, !dbg !6946
  %2 = load %struct.use_optype_d*, %struct.use_optype_d** %use_ops, align 8, !dbg !6946
  store %struct.use_optype_d* %2, %struct.use_optype_d** %ops, align 8, !dbg !6947
  %3 = load %struct.use_optype_d*, %struct.use_optype_d** %ops, align 8, !dbg !6948
  %tobool1 = icmp ne %struct.use_optype_d* %3, null, !dbg !6948
  br i1 %tobool1, label %land.lhs.true, label %if.end4, !dbg !6950

land.lhs.true:                                    ; preds = %if.end
  %4 = load %struct.use_optype_d*, %struct.use_optype_d** %ops, align 8, !dbg !6951
  %use_ptr = getelementptr inbounds %struct.use_optype_d, %struct.use_optype_d* %4, i32 0, i32 1, !dbg !6951
  %use = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %use_ptr, i32 0, i32 3, !dbg !6952
  %5 = load %union.tree_node**, %union.tree_node*** %use, align 8, !dbg !6952
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !6953
  %gsmembase = bitcast %union.gimple_statement_d* %6 to %struct.gimple_statement_with_memory_ops_base*, !dbg !6954
  %vuse = getelementptr inbounds %struct.gimple_statement_with_memory_ops_base, %struct.gimple_statement_with_memory_ops_base* %gsmembase, i32 0, i32 2, !dbg !6955
  %cmp = icmp eq %union.tree_node** %5, %vuse, !dbg !6956
  br i1 %cmp, label %if.then2, label %if.end4, !dbg !6957

if.then2:                                         ; preds = %land.lhs.true
  %7 = load %struct.use_optype_d*, %struct.use_optype_d** %ops, align 8, !dbg !6958
  %use_ptr3 = getelementptr inbounds %struct.use_optype_d, %struct.use_optype_d* %7, i32 0, i32 1, !dbg !6958
  store %struct.ssa_use_operand_d* %use_ptr3, %struct.ssa_use_operand_d** %retval, align 8, !dbg !6959
  br label %return, !dbg !6959

if.end4:                                          ; preds = %land.lhs.true, %if.end
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %retval, align 8, !dbg !6960
  br label %return, !dbg !6960

return:                                           ; preds = %if.end4, %if.then2, %if.then
  %8 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %retval, align 8, !dbg !6961
  ret %struct.ssa_use_operand_d* %8, !dbg !6961
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_phi_result(%union.gimple_statement_d* %gs) #0 !dbg !6962 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6963, metadata !DIExpression()), !dbg !6964
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6965
  %gimple_phi = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_phi*, !dbg !6966
  %result = getelementptr inbounds %struct.gimple_statement_phi, %struct.gimple_statement_phi* %gimple_phi, i32 0, i32 3, !dbg !6967
  %1 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !6967
  ret %union.tree_node* %1, !dbg !6968
}

; Function Attrs: noinline nounwind uwtable
define internal void @clear_and_done_ssa_iter(%struct.ssa_operand_iterator_d* %ptr) #0 !dbg !6969 {
entry:
  %ptr.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  store %struct.ssa_operand_iterator_d* %ptr, %struct.ssa_operand_iterator_d** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %ptr.addr, metadata !6972, metadata !DIExpression()), !dbg !6973
  %0 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6974
  %defs = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %0, i32 0, i32 2, !dbg !6975
  store %struct.def_optype_d* null, %struct.def_optype_d** %defs, align 8, !dbg !6976
  %1 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6977
  %uses = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %1, i32 0, i32 3, !dbg !6978
  store %struct.use_optype_d* null, %struct.use_optype_d** %uses, align 8, !dbg !6979
  %2 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6980
  %iter_type = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %2, i32 0, i32 1, !dbg !6981
  store i32 0, i32* %iter_type, align 4, !dbg !6982
  %3 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6983
  %phi_i = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %3, i32 0, i32 4, !dbg !6984
  store i32 0, i32* %phi_i, align 8, !dbg !6985
  %4 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6986
  %num_phi = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %4, i32 0, i32 5, !dbg !6987
  store i32 0, i32* %num_phi, align 4, !dbg !6988
  %5 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6989
  %phi_stmt = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %5, i32 0, i32 6, !dbg !6990
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %phi_stmt, align 8, !dbg !6991
  %6 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6992
  %done = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %6, i32 0, i32 0, !dbg !6993
  store i8 1, i8* %done, align 8, !dbg !6994
  ret void, !dbg !6995
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_phi_num_args(%union.gimple_statement_d* %gs) #0 !dbg !6996 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6997, metadata !DIExpression()), !dbg !6998
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6999
  %gimple_phi = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_phi*, !dbg !7000
  %nargs = getelementptr inbounds %struct.gimple_statement_phi, %struct.gimple_statement_phi* %gimple_phi, i32 0, i32 2, !dbg !7001
  %1 = load i32, i32* %nargs, align 4, !dbg !7001
  ret i32 %1, !dbg !7002
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ssa_use_operand_d* @gimple_phi_arg_imm_use_ptr(%union.gimple_statement_d* %gs, i32 %i) #0 !dbg !7003 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %i.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !7006, metadata !DIExpression()), !dbg !7007
  store i32 %i, i32* %i.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %i.addr, metadata !7008, metadata !DIExpression()), !dbg !7009
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7010
  %1 = load i32, i32* %i.addr, align 4, !dbg !7011
  %call = call %struct.phi_arg_d* @gimple_phi_arg(%union.gimple_statement_d* %0, i32 %1), !dbg !7012
  %imm_use = getelementptr inbounds %struct.phi_arg_d, %struct.phi_arg_d* %call, i32 0, i32 0, !dbg !7013
  ret %struct.ssa_use_operand_d* %imm_use, !dbg !7014
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.phi_arg_d* @gimple_phi_arg(%union.gimple_statement_d* %gs, i32 %index) #0 !dbg !7015 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %index.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !7019, metadata !DIExpression()), !dbg !7020
  store i32 %index, i32* %index.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %index.addr, metadata !7021, metadata !DIExpression()), !dbg !7022
  %0 = load i32, i32* %index.addr, align 4, !dbg !7023
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7023
  %gimple_phi = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_phi*, !dbg !7023
  %capacity = getelementptr inbounds %struct.gimple_statement_phi, %struct.gimple_statement_phi* %gimple_phi, i32 0, i32 1, !dbg !7023
  %2 = load i32, i32* %capacity, align 8, !dbg !7023
  %cmp = icmp ule i32 %0, %2, !dbg !7023
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !7023

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.8, i64 0, i64 0), i32 3103, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0)), !dbg !7023
  br label %cond.end, !dbg !7023

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7023

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !7023
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7024
  %gimple_phi1 = bitcast %union.gimple_statement_d* %3 to %struct.gimple_statement_phi*, !dbg !7025
  %args = getelementptr inbounds %struct.gimple_statement_phi, %struct.gimple_statement_phi* %gimple_phi1, i32 0, i32 4, !dbg !7026
  %4 = load i32, i32* %index.addr, align 4, !dbg !7027
  %idxprom = zext i32 %4 to i64, !dbg !7024
  %arrayidx = getelementptr inbounds [1 x %struct.phi_arg_d], [1 x %struct.phi_arg_d]* %args, i64 0, i64 %idxprom, !dbg !7024
  ret %struct.phi_arg_d* %arrayidx, !dbg !7028
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_call_arg(%union.gimple_statement_d* %gs, i32 %index) #0 !dbg !7029 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %index.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !7030, metadata !DIExpression()), !dbg !7031
  store i32 %index, i32* %index.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %index.addr, metadata !7032, metadata !DIExpression()), !dbg !7033
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7034
  %1 = load i32, i32* %index.addr, align 4, !dbg !7035
  %add = add i32 %1, 3, !dbg !7036
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 %add), !dbg !7037
  ret %union.tree_node* %call, !dbg !7038
}

; Function Attrs: noinline nounwind uwtable
define internal void @execute_cse_sincos_1(%union.tree_node* %name) #0 !dbg !7039 {
entry:
  %name.addr = alloca %union.tree_node*, align 8
  %gsi = alloca %struct.gimple_stmt_iterator, align 8
  %use_iter = alloca %struct.immediate_use_iterator_d, align 8
  %fndecl = alloca %union.tree_node*, align 8
  %res = alloca %union.tree_node*, align 8
  %type = alloca %union.tree_node*, align 8
  %def_stmt = alloca %union.gimple_statement_d*, align 8
  %use_stmt = alloca %union.gimple_statement_d*, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  %seen_cos = alloca i32, align 4
  %seen_sin = alloca i32, align 4
  %seen_cexpi = alloca i32, align 4
  %stmts = alloca %struct.VEC_gimple_heap*, align 8
  %top_bb = alloca %struct.basic_block_def*, align 8
  %i = alloca i32, align 4
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  %tmp57 = alloca %struct.gimple_stmt_iterator, align 8
  %rhs = alloca %union.tree_node*, align 8
  %tmp80 = alloca %struct.gimple_stmt_iterator, align 8
  store %union.tree_node* %name, %union.tree_node** %name.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %name.addr, metadata !7042, metadata !DIExpression()), !dbg !7043
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %gsi, metadata !7044, metadata !DIExpression()), !dbg !7045
  call void @llvm.dbg.declare(metadata %struct.immediate_use_iterator_d* %use_iter, metadata !7046, metadata !DIExpression()), !dbg !7047
  call void @llvm.dbg.declare(metadata %union.tree_node** %fndecl, metadata !7048, metadata !DIExpression()), !dbg !7049
  call void @llvm.dbg.declare(metadata %union.tree_node** %res, metadata !7050, metadata !DIExpression()), !dbg !7051
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !7052, metadata !DIExpression()), !dbg !7053
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %def_stmt, metadata !7054, metadata !DIExpression()), !dbg !7055
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %use_stmt, metadata !7056, metadata !DIExpression()), !dbg !7057
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !7058, metadata !DIExpression()), !dbg !7059
  call void @llvm.dbg.declare(metadata i32* %seen_cos, metadata !7060, metadata !DIExpression()), !dbg !7061
  store i32 0, i32* %seen_cos, align 4, !dbg !7061
  call void @llvm.dbg.declare(metadata i32* %seen_sin, metadata !7062, metadata !DIExpression()), !dbg !7063
  store i32 0, i32* %seen_sin, align 4, !dbg !7063
  call void @llvm.dbg.declare(metadata i32* %seen_cexpi, metadata !7064, metadata !DIExpression()), !dbg !7065
  store i32 0, i32* %seen_cexpi, align 4, !dbg !7065
  call void @llvm.dbg.declare(metadata %struct.VEC_gimple_heap** %stmts, metadata !7066, metadata !DIExpression()), !dbg !7067
  store %struct.VEC_gimple_heap* null, %struct.VEC_gimple_heap** %stmts, align 8, !dbg !7067
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %top_bb, metadata !7068, metadata !DIExpression()), !dbg !7069
  store %struct.basic_block_def* null, %struct.basic_block_def** %top_bb, align 8, !dbg !7069
  call void @llvm.dbg.declare(metadata i32* %i, metadata !7070, metadata !DIExpression()), !dbg !7071
  %0 = load %union.tree_node*, %union.tree_node** %name.addr, align 8, !dbg !7072
  %common = bitcast %union.tree_node* %0 to %struct.tree_common*, !dbg !7072
  %type1 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !7072
  %1 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !7072
  store %union.tree_node* %1, %union.tree_node** %type, align 8, !dbg !7073
  %2 = load %union.tree_node*, %union.tree_node** %name.addr, align 8, !dbg !7074
  %call = call %union.gimple_statement_d* @first_imm_use_stmt(%struct.immediate_use_iterator_d* %use_iter, %union.tree_node* %2), !dbg !7074
  store %union.gimple_statement_d* %call, %union.gimple_statement_d** %use_stmt, align 8, !dbg !7074
  br label %for.cond, !dbg !7074

for.cond:                                         ; preds = %for.inc, %entry
  %call2 = call zeroext i8 @end_imm_use_stmt_p(%struct.immediate_use_iterator_d* %use_iter), !dbg !7076
  %tobool = icmp ne i8 %call2, 0, !dbg !7076
  %lnot = xor i1 %tobool, true, !dbg !7076
  br i1 %lnot, label %for.body, label %for.end, !dbg !7074

for.body:                                         ; preds = %for.cond
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %use_stmt, align 8, !dbg !7078
  %call3 = call i32 @gimple_code(%union.gimple_statement_d* %3), !dbg !7081
  %cmp = icmp ne i32 %call3, 8, !dbg !7082
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !7083

lor.lhs.false:                                    ; preds = %for.body
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %use_stmt, align 8, !dbg !7084
  %call4 = call %union.tree_node* @gimple_call_lhs(%union.gimple_statement_d* %4), !dbg !7085
  %tobool5 = icmp ne %union.tree_node* %call4, null, !dbg !7085
  br i1 %tobool5, label %lor.lhs.false6, label %if.then, !dbg !7086

lor.lhs.false6:                                   ; preds = %lor.lhs.false
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %use_stmt, align 8, !dbg !7087
  %call7 = call %union.tree_node* @gimple_call_fndecl(%union.gimple_statement_d* %5), !dbg !7088
  store %union.tree_node* %call7, %union.tree_node** %fndecl, align 8, !dbg !7089
  %tobool8 = icmp ne %union.tree_node* %call7, null, !dbg !7089
  br i1 %tobool8, label %lor.lhs.false9, label %if.then, !dbg !7090

lor.lhs.false9:                                   ; preds = %lor.lhs.false6
  %6 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !7091
  %function_decl = bitcast %union.tree_node* %6 to %struct.tree_function_decl*, !dbg !7091
  %built_in_class = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl, i32 0, i32 5, !dbg !7091
  %bf.load = load i32, i32* %built_in_class, align 8, !dbg !7091
  %bf.lshr = lshr i32 %bf.load, 11, !dbg !7091
  %bf.clear = and i32 %bf.lshr, 3, !dbg !7091
  %cmp10 = icmp ne i32 %bf.clear, 3, !dbg !7092
  br i1 %cmp10, label %if.then, label %if.end, !dbg !7093

if.then:                                          ; preds = %lor.lhs.false9, %lor.lhs.false6, %lor.lhs.false, %for.body
  br label %for.inc, !dbg !7094

if.end:                                           ; preds = %lor.lhs.false9
  %7 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !7095
  %function_decl11 = bitcast %union.tree_node* %7 to %struct.tree_function_decl*, !dbg !7095
  %function_code = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl11, i32 0, i32 5, !dbg !7095
  %bf.load12 = load i32, i32* %function_code, align 8, !dbg !7095
  %bf.clear13 = and i32 %bf.load12, 2047, !dbg !7095
  switch i32 %bf.clear13, label %sw.default [
    i32 30, label %sw.bb
    i32 31, label %sw.bb
    i32 35, label %sw.bb
    i32 219, label %sw.bb16
    i32 223, label %sw.bb16
    i32 227, label %sw.bb16
    i32 285, label %sw.bb22
    i32 286, label %sw.bb22
    i32 287, label %sw.bb22
  ], !dbg !7096

sw.bb:                                            ; preds = %if.end, %if.end, %if.end
  %8 = load %union.gimple_statement_d*, %union.gimple_statement_d** %use_stmt, align 8, !dbg !7097
  %call14 = call zeroext i8 @maybe_record_sincos(%struct.VEC_gimple_heap** %stmts, %struct.basic_block_def** %top_bb, %union.gimple_statement_d* %8), !dbg !7099
  %conv = zext i8 %call14 to i32, !dbg !7099
  %tobool15 = icmp ne i32 %conv, 0, !dbg !7099
  %9 = zext i1 %tobool15 to i64, !dbg !7099
  %cond = select i1 %tobool15, i32 1, i32 0, !dbg !7099
  %10 = load i32, i32* %seen_cos, align 4, !dbg !7100
  %or = or i32 %10, %cond, !dbg !7100
  store i32 %or, i32* %seen_cos, align 4, !dbg !7100
  br label %sw.epilog, !dbg !7101

sw.bb16:                                          ; preds = %if.end, %if.end, %if.end
  %11 = load %union.gimple_statement_d*, %union.gimple_statement_d** %use_stmt, align 8, !dbg !7102
  %call17 = call zeroext i8 @maybe_record_sincos(%struct.VEC_gimple_heap** %stmts, %struct.basic_block_def** %top_bb, %union.gimple_statement_d* %11), !dbg !7103
  %conv18 = zext i8 %call17 to i32, !dbg !7103
  %tobool19 = icmp ne i32 %conv18, 0, !dbg !7103
  %12 = zext i1 %tobool19 to i64, !dbg !7103
  %cond20 = select i1 %tobool19, i32 1, i32 0, !dbg !7103
  %13 = load i32, i32* %seen_sin, align 4, !dbg !7104
  %or21 = or i32 %13, %cond20, !dbg !7104
  store i32 %or21, i32* %seen_sin, align 4, !dbg !7104
  br label %sw.epilog, !dbg !7105

sw.bb22:                                          ; preds = %if.end, %if.end, %if.end
  %14 = load %union.gimple_statement_d*, %union.gimple_statement_d** %use_stmt, align 8, !dbg !7106
  %call23 = call zeroext i8 @maybe_record_sincos(%struct.VEC_gimple_heap** %stmts, %struct.basic_block_def** %top_bb, %union.gimple_statement_d* %14), !dbg !7107
  %conv24 = zext i8 %call23 to i32, !dbg !7107
  %tobool25 = icmp ne i32 %conv24, 0, !dbg !7107
  %15 = zext i1 %tobool25 to i64, !dbg !7107
  %cond26 = select i1 %tobool25, i32 1, i32 0, !dbg !7107
  %16 = load i32, i32* %seen_cexpi, align 4, !dbg !7108
  %or27 = or i32 %16, %cond26, !dbg !7108
  store i32 %or27, i32* %seen_cexpi, align 4, !dbg !7108
  br label %sw.epilog, !dbg !7109

sw.default:                                       ; preds = %if.end
  br label %sw.epilog, !dbg !7110

sw.epilog:                                        ; preds = %sw.default, %sw.bb22, %sw.bb16, %sw.bb
  br label %for.inc, !dbg !7111

for.inc:                                          ; preds = %sw.epilog, %if.then
  %call28 = call %union.gimple_statement_d* @next_imm_use_stmt(%struct.immediate_use_iterator_d* %use_iter), !dbg !7076
  store %union.gimple_statement_d* %call28, %union.gimple_statement_d** %use_stmt, align 8, !dbg !7076
  br label %for.cond, !dbg !7076, !llvm.loop !7112

for.end:                                          ; preds = %for.cond
  %17 = load i32, i32* %seen_cos, align 4, !dbg !7114
  %18 = load i32, i32* %seen_sin, align 4, !dbg !7116
  %add = add nsw i32 %17, %18, !dbg !7117
  %19 = load i32, i32* %seen_cexpi, align 4, !dbg !7118
  %add29 = add nsw i32 %add, %19, !dbg !7119
  %cmp30 = icmp sle i32 %add29, 1, !dbg !7120
  br i1 %cmp30, label %if.then32, label %if.end33, !dbg !7121

if.then32:                                        ; preds = %for.end
  call void @VEC_gimple_heap_free(%struct.VEC_gimple_heap** %stmts), !dbg !7122
  br label %return, !dbg !7124

if.end33:                                         ; preds = %for.end
  %20 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !7125
  %call34 = call %union.tree_node* @mathfn_built_in(%union.tree_node* %20, i32 285), !dbg !7126
  store %union.tree_node* %call34, %union.tree_node** %fndecl, align 8, !dbg !7127
  %21 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !7128
  %tobool35 = icmp ne %union.tree_node* %21, null, !dbg !7128
  br i1 %tobool35, label %if.end37, label %if.then36, !dbg !7130

if.then36:                                        ; preds = %if.end33
  br label %return, !dbg !7131

if.end37:                                         ; preds = %if.end33
  %22 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !7132
  %common38 = bitcast %union.tree_node* %22 to %struct.tree_common*, !dbg !7132
  %type39 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common38, i32 0, i32 2, !dbg !7132
  %23 = load %union.tree_node*, %union.tree_node** %type39, align 8, !dbg !7132
  %common40 = bitcast %union.tree_node* %23 to %struct.tree_common*, !dbg !7132
  %type41 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common40, i32 0, i32 2, !dbg !7132
  %24 = load %union.tree_node*, %union.tree_node** %type41, align 8, !dbg !7132
  %call42 = call %union.tree_node* @make_rename_temp(%union.tree_node* %24, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.9, i64 0, i64 0)), !dbg !7133
  store %union.tree_node* %call42, %union.tree_node** %res, align 8, !dbg !7134
  %25 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !7135
  %26 = load %union.tree_node*, %union.tree_node** %name.addr, align 8, !dbg !7136
  %call43 = call %union.gimple_statement_d* (%union.tree_node*, i32, ...) @gimple_build_call(%union.tree_node* %25, i32 1, %union.tree_node* %26), !dbg !7137
  store %union.gimple_statement_d* %call43, %union.gimple_statement_d** %stmt, align 8, !dbg !7138
  %27 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !7139
  %28 = load %union.tree_node*, %union.tree_node** %res, align 8, !dbg !7140
  call void @gimple_call_set_lhs(%union.gimple_statement_d* %27, %union.tree_node* %28), !dbg !7141
  %29 = load %union.tree_node*, %union.tree_node** %name.addr, align 8, !dbg !7142
  %ssa_name = bitcast %union.tree_node* %29 to %struct.tree_ssa_name*, !dbg !7142
  %def_stmt44 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 2, !dbg !7142
  %30 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt44, align 8, !dbg !7142
  store %union.gimple_statement_d* %30, %union.gimple_statement_d** %def_stmt, align 8, !dbg !7143
  %31 = load %union.tree_node*, %union.tree_node** %name.addr, align 8, !dbg !7144
  %base = bitcast %union.tree_node* %31 to %struct.tree_base*, !dbg !7144
  %32 = bitcast %struct.tree_base* %base to i64*, !dbg !7144
  %bf.load45 = load i64, i64* %32, align 8, !dbg !7144
  %bf.lshr46 = lshr i64 %bf.load45, 32, !dbg !7144
  %bf.clear47 = and i64 %bf.lshr46, 1, !dbg !7144
  %bf.cast = trunc i64 %bf.clear47 to i32, !dbg !7144
  %tobool48 = icmp ne i32 %bf.cast, 0, !dbg !7144
  br i1 %tobool48, label %if.else, label %land.lhs.true, !dbg !7146

land.lhs.true:                                    ; preds = %if.end37
  %33 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !7147
  %call49 = call i32 @gimple_code(%union.gimple_statement_d* %33), !dbg !7148
  %cmp50 = icmp ne i32 %call49, 16, !dbg !7149
  br i1 %cmp50, label %land.lhs.true52, label %if.else, !dbg !7150

land.lhs.true52:                                  ; preds = %land.lhs.true
  %34 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !7151
  %call53 = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %34), !dbg !7152
  %35 = load %struct.basic_block_def*, %struct.basic_block_def** %top_bb, align 8, !dbg !7153
  %cmp54 = icmp eq %struct.basic_block_def* %call53, %35, !dbg !7154
  br i1 %cmp54, label %if.then56, label %if.else, !dbg !7155

if.then56:                                        ; preds = %land.lhs.true52
  %36 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !7156
  call void @gsi_for_stmt(%struct.gimple_stmt_iterator* sret %tmp, %union.gimple_statement_d* %36), !dbg !7158
  %37 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !7158
  %38 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !7158
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %37, i8* align 8 %38, i64 24, i1 false), !dbg !7158
  %39 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !7159
  call void @gsi_insert_after(%struct.gimple_stmt_iterator* %gsi, %union.gimple_statement_d* %39, i32 1), !dbg !7160
  br label %if.end58, !dbg !7161

if.else:                                          ; preds = %land.lhs.true52, %land.lhs.true, %if.end37
  %40 = load %struct.basic_block_def*, %struct.basic_block_def** %top_bb, align 8, !dbg !7162
  call void @gsi_after_labels(%struct.gimple_stmt_iterator* sret %tmp57, %struct.basic_block_def* %40), !dbg !7164
  %41 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !7164
  %42 = bitcast %struct.gimple_stmt_iterator* %tmp57 to i8*, !dbg !7164
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %41, i8* align 8 %42, i64 24, i1 false), !dbg !7164
  %43 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !7165
  call void @gsi_insert_before(%struct.gimple_stmt_iterator* %gsi, %union.gimple_statement_d* %43, i32 1), !dbg !7166
  br label %if.end58

if.end58:                                         ; preds = %if.else, %if.then56
  %44 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !7167
  call void @update_stmt(%union.gimple_statement_d* %44), !dbg !7168
  store i32 0, i32* %i, align 4, !dbg !7169
  br label %for.cond59, !dbg !7171

for.cond59:                                       ; preds = %for.inc81, %if.end58
  %45 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %stmts, align 8, !dbg !7172
  %tobool60 = icmp ne %struct.VEC_gimple_heap* %45, null, !dbg !7172
  br i1 %tobool60, label %cond.true, label %cond.false, !dbg !7172

cond.true:                                        ; preds = %for.cond59
  %46 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %stmts, align 8, !dbg !7172
  %base61 = getelementptr inbounds %struct.VEC_gimple_heap, %struct.VEC_gimple_heap* %46, i32 0, i32 0, !dbg !7172
  br label %cond.end, !dbg !7172

cond.false:                                       ; preds = %for.cond59
  br label %cond.end, !dbg !7172

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond62 = phi %struct.VEC_gimple_base* [ %base61, %cond.true ], [ null, %cond.false ], !dbg !7172
  %47 = load i32, i32* %i, align 4, !dbg !7172
  %call63 = call i32 @VEC_gimple_base_iterate(%struct.VEC_gimple_base* %cond62, i32 %47, %union.gimple_statement_d** %use_stmt), !dbg !7172
  %tobool64 = icmp ne i32 %call63, 0, !dbg !7174
  br i1 %tobool64, label %for.body65, label %for.end82, !dbg !7174

for.body65:                                       ; preds = %cond.end
  call void @llvm.dbg.declare(metadata %union.tree_node** %rhs, metadata !7175, metadata !DIExpression()), !dbg !7177
  store %union.tree_node* null, %union.tree_node** %rhs, align 8, !dbg !7177
  %48 = load %union.gimple_statement_d*, %union.gimple_statement_d** %use_stmt, align 8, !dbg !7178
  %call66 = call %union.tree_node* @gimple_call_fndecl(%union.gimple_statement_d* %48), !dbg !7179
  store %union.tree_node* %call66, %union.tree_node** %fndecl, align 8, !dbg !7180
  %49 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !7181
  %function_decl67 = bitcast %union.tree_node* %49 to %struct.tree_function_decl*, !dbg !7181
  %function_code68 = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl67, i32 0, i32 5, !dbg !7181
  %bf.load69 = load i32, i32* %function_code68, align 8, !dbg !7181
  %bf.clear70 = and i32 %bf.load69, 2047, !dbg !7181
  switch i32 %bf.clear70, label %sw.default76 [
    i32 30, label %sw.bb71
    i32 31, label %sw.bb71
    i32 35, label %sw.bb71
    i32 219, label %sw.bb73
    i32 223, label %sw.bb73
    i32 227, label %sw.bb73
    i32 285, label %sw.bb75
    i32 286, label %sw.bb75
    i32 287, label %sw.bb75
  ], !dbg !7182

sw.bb71:                                          ; preds = %for.body65, %for.body65, %for.body65
  %50 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !7183
  %51 = load %union.tree_node*, %union.tree_node** %res, align 8, !dbg !7183
  %call72 = call %union.tree_node* @fold_build1_stat_loc(i32 0, i32 43, %union.tree_node* %50, %union.tree_node* %51), !dbg !7183
  store %union.tree_node* %call72, %union.tree_node** %rhs, align 8, !dbg !7185
  br label %sw.epilog77, !dbg !7186

sw.bb73:                                          ; preds = %for.body65, %for.body65, %for.body65
  %52 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !7187
  %53 = load %union.tree_node*, %union.tree_node** %res, align 8, !dbg !7187
  %call74 = call %union.tree_node* @fold_build1_stat_loc(i32 0, i32 44, %union.tree_node* %52, %union.tree_node* %53), !dbg !7187
  store %union.tree_node* %call74, %union.tree_node** %rhs, align 8, !dbg !7188
  br label %sw.epilog77, !dbg !7189

sw.bb75:                                          ; preds = %for.body65, %for.body65, %for.body65
  %54 = load %union.tree_node*, %union.tree_node** %res, align 8, !dbg !7190
  store %union.tree_node* %54, %union.tree_node** %rhs, align 8, !dbg !7191
  br label %sw.epilog77, !dbg !7192

sw.default76:                                     ; preds = %for.body65
  call void @fancy_abort(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.4, i64 0, i64 0), i32 733, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0)), !dbg !7193
  br label %sw.epilog77, !dbg !7194

sw.epilog77:                                      ; preds = %sw.default76, %sw.bb75, %sw.bb73, %sw.bb71
  %55 = load %union.gimple_statement_d*, %union.gimple_statement_d** %use_stmt, align 8, !dbg !7195
  %call78 = call %union.tree_node* @gimple_call_lhs(%union.gimple_statement_d* %55), !dbg !7195
  %56 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !7195
  %call79 = call %union.gimple_statement_d* @gimple_build_assign_stat(%union.tree_node* %call78, %union.tree_node* %56), !dbg !7195
  store %union.gimple_statement_d* %call79, %union.gimple_statement_d** %stmt, align 8, !dbg !7196
  %57 = load %union.gimple_statement_d*, %union.gimple_statement_d** %use_stmt, align 8, !dbg !7197
  call void @gsi_for_stmt(%struct.gimple_stmt_iterator* sret %tmp80, %union.gimple_statement_d* %57), !dbg !7198
  %58 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !7198
  %59 = bitcast %struct.gimple_stmt_iterator* %tmp80 to i8*, !dbg !7198
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %58, i8* align 8 %59, i64 24, i1 false), !dbg !7198
  %60 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !7199
  call void @gsi_insert_after(%struct.gimple_stmt_iterator* %gsi, %union.gimple_statement_d* %60, i32 1), !dbg !7200
  call void @gsi_remove(%struct.gimple_stmt_iterator* %gsi, i8 zeroext 1), !dbg !7201
  br label %for.inc81, !dbg !7202

for.inc81:                                        ; preds = %sw.epilog77
  %61 = load i32, i32* %i, align 4, !dbg !7203
  %inc = add nsw i32 %61, 1, !dbg !7203
  store i32 %inc, i32* %i, align 4, !dbg !7203
  br label %for.cond59, !dbg !7204, !llvm.loop !7205

for.end82:                                        ; preds = %cond.end
  call void @VEC_gimple_heap_free(%struct.VEC_gimple_heap** %stmts), !dbg !7207
  br label %return, !dbg !7208

return:                                           ; preds = %for.end82, %if.then36, %if.then32
  ret void, !dbg !7208
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @maybe_record_sincos(%struct.VEC_gimple_heap** %stmts, %struct.basic_block_def** %top_bb, %union.gimple_statement_d* %use_stmt) #0 !dbg !7209 {
entry:
  %retval = alloca i8, align 1
  %stmts.addr = alloca %struct.VEC_gimple_heap**, align 8
  %top_bb.addr = alloca %struct.basic_block_def**, align 8
  %use_stmt.addr = alloca %union.gimple_statement_d*, align 8
  %use_bb = alloca %struct.basic_block_def*, align 8
  store %struct.VEC_gimple_heap** %stmts, %struct.VEC_gimple_heap*** %stmts.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_gimple_heap*** %stmts.addr, metadata !7214, metadata !DIExpression()), !dbg !7215
  store %struct.basic_block_def** %top_bb, %struct.basic_block_def*** %top_bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def*** %top_bb.addr, metadata !7216, metadata !DIExpression()), !dbg !7217
  store %union.gimple_statement_d* %use_stmt, %union.gimple_statement_d** %use_stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %use_stmt.addr, metadata !7218, metadata !DIExpression()), !dbg !7219
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %use_bb, metadata !7220, metadata !DIExpression()), !dbg !7221
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %use_stmt.addr, align 8, !dbg !7222
  %call = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %0), !dbg !7223
  store %struct.basic_block_def* %call, %struct.basic_block_def** %use_bb, align 8, !dbg !7221
  %1 = load %struct.basic_block_def**, %struct.basic_block_def*** %top_bb.addr, align 8, !dbg !7224
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %1, align 8, !dbg !7226
  %tobool = icmp ne %struct.basic_block_def* %2, null, !dbg !7226
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !7227

land.lhs.true:                                    ; preds = %entry
  %3 = load %struct.basic_block_def**, %struct.basic_block_def*** %top_bb.addr, align 8, !dbg !7228
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %3, align 8, !dbg !7229
  %5 = load %struct.basic_block_def*, %struct.basic_block_def** %use_bb, align 8, !dbg !7230
  %cmp = icmp eq %struct.basic_block_def* %4, %5, !dbg !7231
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !7232

lor.lhs.false:                                    ; preds = %land.lhs.true
  %6 = load %struct.basic_block_def*, %struct.basic_block_def** %use_bb, align 8, !dbg !7233
  %7 = load %struct.basic_block_def**, %struct.basic_block_def*** %top_bb.addr, align 8, !dbg !7234
  %8 = load %struct.basic_block_def*, %struct.basic_block_def** %7, align 8, !dbg !7235
  %call1 = call zeroext i8 @dominated_by_p(i32 1, %struct.basic_block_def* %6, %struct.basic_block_def* %8), !dbg !7236
  %conv = zext i8 %call1 to i32, !dbg !7236
  %tobool2 = icmp ne i32 %conv, 0, !dbg !7236
  br i1 %tobool2, label %if.then, label %if.else, !dbg !7237

if.then:                                          ; preds = %lor.lhs.false, %land.lhs.true
  %9 = load %struct.VEC_gimple_heap**, %struct.VEC_gimple_heap*** %stmts.addr, align 8, !dbg !7238
  %10 = load %union.gimple_statement_d*, %union.gimple_statement_d** %use_stmt.addr, align 8, !dbg !7238
  %call3 = call %union.gimple_statement_d** @VEC_gimple_heap_safe_push(%struct.VEC_gimple_heap** %9, %union.gimple_statement_d* %10), !dbg !7238
  br label %if.end12, !dbg !7238

if.else:                                          ; preds = %lor.lhs.false, %entry
  %11 = load %struct.basic_block_def**, %struct.basic_block_def*** %top_bb.addr, align 8, !dbg !7239
  %12 = load %struct.basic_block_def*, %struct.basic_block_def** %11, align 8, !dbg !7241
  %tobool4 = icmp ne %struct.basic_block_def* %12, null, !dbg !7241
  br i1 %tobool4, label %lor.lhs.false5, label %if.then9, !dbg !7242

lor.lhs.false5:                                   ; preds = %if.else
  %13 = load %struct.basic_block_def**, %struct.basic_block_def*** %top_bb.addr, align 8, !dbg !7243
  %14 = load %struct.basic_block_def*, %struct.basic_block_def** %13, align 8, !dbg !7244
  %15 = load %struct.basic_block_def*, %struct.basic_block_def** %use_bb, align 8, !dbg !7245
  %call6 = call zeroext i8 @dominated_by_p(i32 1, %struct.basic_block_def* %14, %struct.basic_block_def* %15), !dbg !7246
  %conv7 = zext i8 %call6 to i32, !dbg !7246
  %tobool8 = icmp ne i32 %conv7, 0, !dbg !7246
  br i1 %tobool8, label %if.then9, label %if.else11, !dbg !7247

if.then9:                                         ; preds = %lor.lhs.false5, %if.else
  %16 = load %struct.VEC_gimple_heap**, %struct.VEC_gimple_heap*** %stmts.addr, align 8, !dbg !7248
  %17 = load %union.gimple_statement_d*, %union.gimple_statement_d** %use_stmt.addr, align 8, !dbg !7248
  %call10 = call %union.gimple_statement_d** @VEC_gimple_heap_safe_push(%struct.VEC_gimple_heap** %16, %union.gimple_statement_d* %17), !dbg !7248
  %18 = load %struct.basic_block_def*, %struct.basic_block_def** %use_bb, align 8, !dbg !7250
  %19 = load %struct.basic_block_def**, %struct.basic_block_def*** %top_bb.addr, align 8, !dbg !7251
  store %struct.basic_block_def* %18, %struct.basic_block_def** %19, align 8, !dbg !7252
  br label %if.end, !dbg !7253

if.else11:                                        ; preds = %lor.lhs.false5
  store i8 0, i8* %retval, align 1, !dbg !7254
  br label %return, !dbg !7254

if.end:                                           ; preds = %if.then9
  br label %if.end12

if.end12:                                         ; preds = %if.end, %if.then
  store i8 1, i8* %retval, align 1, !dbg !7255
  br label %return, !dbg !7255

return:                                           ; preds = %if.end12, %if.else11
  %20 = load i8, i8* %retval, align 1, !dbg !7256
  ret i8 %20, !dbg !7256
}

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_gimple_heap_free(%struct.VEC_gimple_heap** %vec_) #0 !dbg !7257 {
entry:
  %vec_.addr = alloca %struct.VEC_gimple_heap**, align 8
  store %struct.VEC_gimple_heap** %vec_, %struct.VEC_gimple_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_gimple_heap*** %vec_.addr, metadata !7260, metadata !DIExpression()), !dbg !7261
  %0 = load %struct.VEC_gimple_heap**, %struct.VEC_gimple_heap*** %vec_.addr, align 8, !dbg !7262
  %1 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %0, align 8, !dbg !7262
  %tobool = icmp ne %struct.VEC_gimple_heap* %1, null, !dbg !7262
  br i1 %tobool, label %if.then, label %if.end, !dbg !7261

if.then:                                          ; preds = %entry
  %2 = load %struct.VEC_gimple_heap**, %struct.VEC_gimple_heap*** %vec_.addr, align 8, !dbg !7262
  %3 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %2, align 8, !dbg !7262
  %4 = bitcast %struct.VEC_gimple_heap* %3 to i8*, !dbg !7262
  call void @free(i8* %4), !dbg !7262
  br label %if.end, !dbg !7262

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.VEC_gimple_heap**, %struct.VEC_gimple_heap*** %vec_.addr, align 8, !dbg !7261
  store %struct.VEC_gimple_heap* null, %struct.VEC_gimple_heap** %5, align 8, !dbg !7261
  ret void, !dbg !7261
}

declare dso_local %union.tree_node* @mathfn_built_in(%union.tree_node*, i32) #2

declare dso_local %union.gimple_statement_d* @gimple_build_call(%union.tree_node*, i32, ...) #2

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_call_set_lhs(%union.gimple_statement_d* %gs, %union.tree_node* %lhs) #0 !dbg !7264 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %lhs.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !7265, metadata !DIExpression()), !dbg !7266
  store %union.tree_node* %lhs, %union.tree_node** %lhs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %lhs.addr, metadata !7267, metadata !DIExpression()), !dbg !7268
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7269
  %1 = load %union.tree_node*, %union.tree_node** %lhs.addr, align 8, !dbg !7270
  call void @gimple_set_op(%union.gimple_statement_d* %0, i32 0, %union.tree_node* %1), !dbg !7271
  %2 = load %union.tree_node*, %union.tree_node** %lhs.addr, align 8, !dbg !7272
  %tobool = icmp ne %union.tree_node* %2, null, !dbg !7272
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !7274

land.lhs.true:                                    ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %lhs.addr, align 8, !dbg !7275
  %base = bitcast %union.tree_node* %3 to %struct.tree_base*, !dbg !7275
  %4 = bitcast %struct.tree_base* %base to i64*, !dbg !7275
  %bf.load = load i64, i64* %4, align 8, !dbg !7275
  %bf.clear = and i64 %bf.load, 65535, !dbg !7275
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !7275
  %cmp = icmp eq i32 %bf.cast, 141, !dbg !7276
  br i1 %cmp, label %if.then, label %if.end, !dbg !7277

if.then:                                          ; preds = %land.lhs.true
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7278
  %6 = load %union.tree_node*, %union.tree_node** %lhs.addr, align 8, !dbg !7279
  %ssa_name = bitcast %union.tree_node* %6 to %struct.tree_ssa_name*, !dbg !7279
  %def_stmt = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 2, !dbg !7279
  store %union.gimple_statement_d* %5, %union.gimple_statement_d** %def_stmt, align 8, !dbg !7280
  br label %if.end, !dbg !7279

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  ret void, !dbg !7281
}

declare dso_local void @gsi_for_stmt(%struct.gimple_stmt_iterator* sret, %union.gimple_statement_d*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_gimple_base_iterate(%struct.VEC_gimple_base* %vec_, i32 %ix_, %union.gimple_statement_d** %ptr) #0 !dbg !7282 {
entry:
  %retval = alloca i32, align 4
  %vec_.addr = alloca %struct.VEC_gimple_base*, align 8
  %ix_.addr = alloca i32, align 4
  %ptr.addr = alloca %union.gimple_statement_d**, align 8
  store %struct.VEC_gimple_base* %vec_, %struct.VEC_gimple_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_gimple_base** %vec_.addr, metadata !7288, metadata !DIExpression()), !dbg !7289
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !7290, metadata !DIExpression()), !dbg !7289
  store %union.gimple_statement_d** %ptr, %union.gimple_statement_d*** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d*** %ptr.addr, metadata !7291, metadata !DIExpression()), !dbg !7289
  %0 = load %struct.VEC_gimple_base*, %struct.VEC_gimple_base** %vec_.addr, align 8, !dbg !7292
  %tobool = icmp ne %struct.VEC_gimple_base* %0, null, !dbg !7292
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !7292

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !7292
  %2 = load %struct.VEC_gimple_base*, %struct.VEC_gimple_base** %vec_.addr, align 8, !dbg !7292
  %num = getelementptr inbounds %struct.VEC_gimple_base, %struct.VEC_gimple_base* %2, i32 0, i32 0, !dbg !7292
  %3 = load i32, i32* %num, align 8, !dbg !7292
  %cmp = icmp ult i32 %1, %3, !dbg !7292
  br i1 %cmp, label %if.then, label %if.else, !dbg !7289

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct.VEC_gimple_base*, %struct.VEC_gimple_base** %vec_.addr, align 8, !dbg !7294
  %vec = getelementptr inbounds %struct.VEC_gimple_base, %struct.VEC_gimple_base* %4, i32 0, i32 2, !dbg !7294
  %5 = load i32, i32* %ix_.addr, align 4, !dbg !7294
  %idxprom = zext i32 %5 to i64, !dbg !7294
  %arrayidx = getelementptr inbounds [1 x %union.gimple_statement_d*], [1 x %union.gimple_statement_d*]* %vec, i64 0, i64 %idxprom, !dbg !7294
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %arrayidx, align 8, !dbg !7294
  %7 = load %union.gimple_statement_d**, %union.gimple_statement_d*** %ptr.addr, align 8, !dbg !7294
  store %union.gimple_statement_d* %6, %union.gimple_statement_d** %7, align 8, !dbg !7294
  store i32 1, i32* %retval, align 4, !dbg !7294
  br label %return, !dbg !7294

if.else:                                          ; preds = %land.lhs.true, %entry
  %8 = load %union.gimple_statement_d**, %union.gimple_statement_d*** %ptr.addr, align 8, !dbg !7296
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %8, align 8, !dbg !7296
  store i32 0, i32* %retval, align 4, !dbg !7296
  br label %return, !dbg !7296

return:                                           ; preds = %if.else, %if.then
  %9 = load i32, i32* %retval, align 4, !dbg !7289
  ret i32 %9, !dbg !7289
}

declare dso_local %union.tree_node* @fold_build1_stat_loc(i32, i32, %union.tree_node*, %union.tree_node*) #2

declare dso_local %union.gimple_statement_d* @gimple_build_assign_stat(%union.tree_node*, %union.tree_node*) #2

declare dso_local void @gsi_remove(%struct.gimple_stmt_iterator*, i8 zeroext) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.gimple_statement_d** @VEC_gimple_heap_safe_push(%struct.VEC_gimple_heap** %vec_, %union.gimple_statement_d* %obj_) #0 !dbg !7298 {
entry:
  %vec_.addr = alloca %struct.VEC_gimple_heap**, align 8
  %obj_.addr = alloca %union.gimple_statement_d*, align 8
  store %struct.VEC_gimple_heap** %vec_, %struct.VEC_gimple_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_gimple_heap*** %vec_.addr, metadata !7301, metadata !DIExpression()), !dbg !7302
  store %union.gimple_statement_d* %obj_, %union.gimple_statement_d** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %obj_.addr, metadata !7303, metadata !DIExpression()), !dbg !7302
  %0 = load %struct.VEC_gimple_heap**, %struct.VEC_gimple_heap*** %vec_.addr, align 8, !dbg !7302
  %call = call i32 @VEC_gimple_heap_reserve(%struct.VEC_gimple_heap** %0, i32 1), !dbg !7302
  %1 = load %struct.VEC_gimple_heap**, %struct.VEC_gimple_heap*** %vec_.addr, align 8, !dbg !7302
  %2 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %1, align 8, !dbg !7302
  %tobool = icmp ne %struct.VEC_gimple_heap* %2, null, !dbg !7302
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7302

cond.true:                                        ; preds = %entry
  %3 = load %struct.VEC_gimple_heap**, %struct.VEC_gimple_heap*** %vec_.addr, align 8, !dbg !7302
  %4 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %3, align 8, !dbg !7302
  %base = getelementptr inbounds %struct.VEC_gimple_heap, %struct.VEC_gimple_heap* %4, i32 0, i32 0, !dbg !7302
  br label %cond.end, !dbg !7302

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7302

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_gimple_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !7302
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %obj_.addr, align 8, !dbg !7302
  %call1 = call %union.gimple_statement_d** @VEC_gimple_base_quick_push(%struct.VEC_gimple_base* %cond, %union.gimple_statement_d* %5), !dbg !7302
  ret %union.gimple_statement_d** %call1, !dbg !7302
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_gimple_heap_reserve(%struct.VEC_gimple_heap** %vec_, i32 %alloc_) #0 !dbg !7304 {
entry:
  %vec_.addr = alloca %struct.VEC_gimple_heap**, align 8
  %alloc_.addr = alloca i32, align 4
  %extend = alloca i32, align 4
  store %struct.VEC_gimple_heap** %vec_, %struct.VEC_gimple_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_gimple_heap*** %vec_.addr, metadata !7307, metadata !DIExpression()), !dbg !7308
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !7309, metadata !DIExpression()), !dbg !7308
  call void @llvm.dbg.declare(metadata i32* %extend, metadata !7310, metadata !DIExpression()), !dbg !7308
  %0 = load %struct.VEC_gimple_heap**, %struct.VEC_gimple_heap*** %vec_.addr, align 8, !dbg !7308
  %1 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %0, align 8, !dbg !7308
  %tobool = icmp ne %struct.VEC_gimple_heap* %1, null, !dbg !7308
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7308

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_gimple_heap**, %struct.VEC_gimple_heap*** %vec_.addr, align 8, !dbg !7308
  %3 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %2, align 8, !dbg !7308
  %base = getelementptr inbounds %struct.VEC_gimple_heap, %struct.VEC_gimple_heap* %3, i32 0, i32 0, !dbg !7308
  br label %cond.end, !dbg !7308

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7308

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_gimple_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !7308
  %4 = load i32, i32* %alloc_.addr, align 4, !dbg !7308
  %call = call i32 @VEC_gimple_base_space(%struct.VEC_gimple_base* %cond, i32 %4), !dbg !7308
  %tobool1 = icmp ne i32 %call, 0, !dbg !7308
  %lnot = xor i1 %tobool1, true, !dbg !7308
  %lnot.ext = zext i1 %lnot to i32, !dbg !7308
  store i32 %lnot.ext, i32* %extend, align 4, !dbg !7308
  %5 = load i32, i32* %extend, align 4, !dbg !7311
  %tobool2 = icmp ne i32 %5, 0, !dbg !7311
  br i1 %tobool2, label %if.then, label %if.end, !dbg !7308

if.then:                                          ; preds = %cond.end
  %6 = load %struct.VEC_gimple_heap**, %struct.VEC_gimple_heap*** %vec_.addr, align 8, !dbg !7311
  %7 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %6, align 8, !dbg !7311
  %8 = bitcast %struct.VEC_gimple_heap* %7 to i8*, !dbg !7311
  %9 = load i32, i32* %alloc_.addr, align 4, !dbg !7311
  %call3 = call i8* @vec_heap_p_reserve(i8* %8, i32 %9), !dbg !7311
  %10 = bitcast i8* %call3 to %struct.VEC_gimple_heap*, !dbg !7311
  %11 = load %struct.VEC_gimple_heap**, %struct.VEC_gimple_heap*** %vec_.addr, align 8, !dbg !7311
  store %struct.VEC_gimple_heap* %10, %struct.VEC_gimple_heap** %11, align 8, !dbg !7311
  br label %if.end, !dbg !7311

if.end:                                           ; preds = %if.then, %cond.end
  %12 = load i32, i32* %extend, align 4, !dbg !7308
  ret i32 %12, !dbg !7308
}

; Function Attrs: noinline nounwind uwtable
define internal %union.gimple_statement_d** @VEC_gimple_base_quick_push(%struct.VEC_gimple_base* %vec_, %union.gimple_statement_d* %obj_) #0 !dbg !7313 {
entry:
  %vec_.addr = alloca %struct.VEC_gimple_base*, align 8
  %obj_.addr = alloca %union.gimple_statement_d*, align 8
  %slot_ = alloca %union.gimple_statement_d**, align 8
  store %struct.VEC_gimple_base* %vec_, %struct.VEC_gimple_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_gimple_base** %vec_.addr, metadata !7317, metadata !DIExpression()), !dbg !7318
  store %union.gimple_statement_d* %obj_, %union.gimple_statement_d** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %obj_.addr, metadata !7319, metadata !DIExpression()), !dbg !7318
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d*** %slot_, metadata !7320, metadata !DIExpression()), !dbg !7318
  %0 = load %struct.VEC_gimple_base*, %struct.VEC_gimple_base** %vec_.addr, align 8, !dbg !7318
  %num = getelementptr inbounds %struct.VEC_gimple_base, %struct.VEC_gimple_base* %0, i32 0, i32 0, !dbg !7318
  %1 = load i32, i32* %num, align 8, !dbg !7318
  %2 = load %struct.VEC_gimple_base*, %struct.VEC_gimple_base** %vec_.addr, align 8, !dbg !7318
  %alloc = getelementptr inbounds %struct.VEC_gimple_base, %struct.VEC_gimple_base* %2, i32 0, i32 1, !dbg !7318
  %3 = load i32, i32* %alloc, align 4, !dbg !7318
  %cmp = icmp ult i32 %1, %3, !dbg !7318
  %conv = zext i1 %cmp to i32, !dbg !7318
  %4 = load %struct.VEC_gimple_base*, %struct.VEC_gimple_base** %vec_.addr, align 8, !dbg !7318
  %vec = getelementptr inbounds %struct.VEC_gimple_base, %struct.VEC_gimple_base* %4, i32 0, i32 2, !dbg !7318
  %5 = load %struct.VEC_gimple_base*, %struct.VEC_gimple_base** %vec_.addr, align 8, !dbg !7318
  %num1 = getelementptr inbounds %struct.VEC_gimple_base, %struct.VEC_gimple_base* %5, i32 0, i32 0, !dbg !7318
  %6 = load i32, i32* %num1, align 8, !dbg !7318
  %inc = add i32 %6, 1, !dbg !7318
  store i32 %inc, i32* %num1, align 8, !dbg !7318
  %idxprom = zext i32 %6 to i64, !dbg !7318
  %arrayidx = getelementptr inbounds [1 x %union.gimple_statement_d*], [1 x %union.gimple_statement_d*]* %vec, i64 0, i64 %idxprom, !dbg !7318
  store %union.gimple_statement_d** %arrayidx, %union.gimple_statement_d*** %slot_, align 8, !dbg !7318
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %obj_.addr, align 8, !dbg !7318
  %8 = load %union.gimple_statement_d**, %union.gimple_statement_d*** %slot_, align 8, !dbg !7318
  store %union.gimple_statement_d* %7, %union.gimple_statement_d** %8, align 8, !dbg !7318
  %9 = load %union.gimple_statement_d**, %union.gimple_statement_d*** %slot_, align 8, !dbg !7318
  ret %union.gimple_statement_d** %9, !dbg !7318
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_gimple_base_space(%struct.VEC_gimple_base* %vec_, i32 %alloc_) #0 !dbg !7321 {
entry:
  %vec_.addr = alloca %struct.VEC_gimple_base*, align 8
  %alloc_.addr = alloca i32, align 4
  store %struct.VEC_gimple_base* %vec_, %struct.VEC_gimple_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_gimple_base** %vec_.addr, metadata !7324, metadata !DIExpression()), !dbg !7325
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !7326, metadata !DIExpression()), !dbg !7325
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !7325
  %cmp = icmp sge i32 %0, 0, !dbg !7325
  %conv = zext i1 %cmp to i32, !dbg !7325
  %1 = load %struct.VEC_gimple_base*, %struct.VEC_gimple_base** %vec_.addr, align 8, !dbg !7325
  %tobool = icmp ne %struct.VEC_gimple_base* %1, null, !dbg !7325
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7325

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_gimple_base*, %struct.VEC_gimple_base** %vec_.addr, align 8, !dbg !7325
  %alloc = getelementptr inbounds %struct.VEC_gimple_base, %struct.VEC_gimple_base* %2, i32 0, i32 1, !dbg !7325
  %3 = load i32, i32* %alloc, align 4, !dbg !7325
  %4 = load %struct.VEC_gimple_base*, %struct.VEC_gimple_base** %vec_.addr, align 8, !dbg !7325
  %num = getelementptr inbounds %struct.VEC_gimple_base, %struct.VEC_gimple_base* %4, i32 0, i32 0, !dbg !7325
  %5 = load i32, i32* %num, align 8, !dbg !7325
  %sub = sub i32 %3, %5, !dbg !7325
  %6 = load i32, i32* %alloc_.addr, align 4, !dbg !7325
  %cmp1 = icmp uge i32 %sub, %6, !dbg !7325
  %conv2 = zext i1 %cmp1 to i32, !dbg !7325
  br label %cond.end, !dbg !7325

cond.false:                                       ; preds = %entry
  %7 = load i32, i32* %alloc_.addr, align 4, !dbg !7325
  %tobool3 = icmp ne i32 %7, 0, !dbg !7325
  %lnot = xor i1 %tobool3, true, !dbg !7325
  %lnot.ext = zext i1 %lnot to i32, !dbg !7325
  br label %cond.end, !dbg !7325

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv2, %cond.true ], [ %lnot.ext, %cond.false ], !dbg !7325
  ret i32 %cond, !dbg !7325
}

declare dso_local i8* @vec_heap_p_reserve(i8*, i32) #2

declare dso_local void @free(i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_expr_type(%union.gimple_statement_d* %stmt) #0 !dbg !7327 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %code = alloca i32, align 4
  %type = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !7328, metadata !DIExpression()), !dbg !7329
  call void @llvm.dbg.declare(metadata i32* %code, metadata !7330, metadata !DIExpression()), !dbg !7331
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7332
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !7333
  store i32 %call, i32* %code, align 4, !dbg !7331
  %1 = load i32, i32* %code, align 4, !dbg !7334
  %cmp = icmp eq i32 %1, 6, !dbg !7336
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !7337

lor.lhs.false:                                    ; preds = %entry
  %2 = load i32, i32* %code, align 4, !dbg !7338
  %cmp1 = icmp eq i32 %2, 8, !dbg !7339
  br i1 %cmp1, label %if.then, label %if.else11, !dbg !7340

if.then:                                          ; preds = %lor.lhs.false, %entry
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !7341, metadata !DIExpression()), !dbg !7343
  %3 = load i32, i32* %code, align 4, !dbg !7344
  %cmp2 = icmp eq i32 %3, 8, !dbg !7346
  br i1 %cmp2, label %if.then3, label %if.else, !dbg !7347

if.then3:                                         ; preds = %if.then
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7348
  %call4 = call %union.tree_node* @gimple_call_return_type(%union.gimple_statement_d* %4), !dbg !7349
  store %union.tree_node* %call4, %union.tree_node** %type, align 8, !dbg !7350
  br label %if.end, !dbg !7351

if.else:                                          ; preds = %if.then
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7352
  %call5 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %5), !dbg !7353
  switch i32 %call5, label %sw.default [
    i32 66, label %sw.bb
  ], !dbg !7354

sw.bb:                                            ; preds = %if.else
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7355
  %call6 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %6), !dbg !7355
  %common = bitcast %union.tree_node* %call6 to %struct.tree_common*, !dbg !7355
  %type7 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !7355
  %7 = load %union.tree_node*, %union.tree_node** %type7, align 8, !dbg !7355
  store %union.tree_node* %7, %union.tree_node** %type, align 8, !dbg !7357
  br label %sw.epilog, !dbg !7358

sw.default:                                       ; preds = %if.else
  %8 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7359
  %call8 = call %union.tree_node* @gimple_get_lhs(%union.gimple_statement_d* %8), !dbg !7359
  %common9 = bitcast %union.tree_node* %call8 to %struct.tree_common*, !dbg !7359
  %type10 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common9, i32 0, i32 2, !dbg !7359
  %9 = load %union.tree_node*, %union.tree_node** %type10, align 8, !dbg !7359
  store %union.tree_node* %9, %union.tree_node** %type, align 8, !dbg !7360
  br label %sw.epilog, !dbg !7361

sw.epilog:                                        ; preds = %sw.default, %sw.bb
  br label %if.end

if.end:                                           ; preds = %sw.epilog, %if.then3
  %10 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !7362
  store %union.tree_node* %10, %union.tree_node** %retval, align 8, !dbg !7363
  br label %return, !dbg !7363

if.else11:                                        ; preds = %lor.lhs.false
  %11 = load i32, i32* %code, align 4, !dbg !7364
  %cmp12 = icmp eq i32 %11, 1, !dbg !7366
  br i1 %cmp12, label %if.then13, label %if.else14, !dbg !7367

if.then13:                                        ; preds = %if.else11
  %12 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 47), align 8, !dbg !7368
  store %union.tree_node* %12, %union.tree_node** %retval, align 8, !dbg !7369
  br label %return, !dbg !7369

if.else14:                                        ; preds = %if.else11
  %13 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 38), align 16, !dbg !7370
  store %union.tree_node* %13, %union.tree_node** %retval, align 8, !dbg !7371
  br label %return, !dbg !7371

return:                                           ; preds = %if.else14, %if.then13, %if.end
  %14 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !7372
  ret %union.tree_node* %14, !dbg !7372
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @find_bswap(%union.gimple_statement_d* %stmt) #0 !dbg !7373 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %cmp = alloca i64, align 8
  %n = alloca %struct.symbolic_number, align 8
  %source_expr = alloca %union.tree_node*, align 8
  %mask = alloca i64, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !7376, metadata !DIExpression()), !dbg !7377
  call void @llvm.dbg.declare(metadata i64* %cmp, metadata !7378, metadata !DIExpression()), !dbg !7379
  store i64 72623859790382856, i64* %cmp, align 8, !dbg !7379
  call void @llvm.dbg.declare(metadata %struct.symbolic_number* %n, metadata !7380, metadata !DIExpression()), !dbg !7385
  call void @llvm.dbg.declare(metadata %union.tree_node** %source_expr, metadata !7386, metadata !DIExpression()), !dbg !7387
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7388
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7389
  %call = call %union.tree_node* @gimple_expr_type(%union.gimple_statement_d* %1), !dbg !7389
  %type = bitcast %union.tree_node* %call to %struct.tree_type*, !dbg !7389
  %size_unit = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type, i32 0, i32 3, !dbg !7389
  %2 = load %union.tree_node*, %union.tree_node** %size_unit, align 8, !dbg !7389
  %int_cst = bitcast %union.tree_node* %2 to %struct.tree_int_cst*, !dbg !7389
  %int_cst1 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst, i32 0, i32 1, !dbg !7389
  %low = getelementptr inbounds %struct.double_int, %struct.double_int* %int_cst1, i32 0, i32 0, !dbg !7389
  %3 = load i64, i64* %low, align 8, !dbg !7389
  %add = add i64 %3, 1, !dbg !7390
  %conv = trunc i64 %add to i32, !dbg !7389
  %call2 = call %union.tree_node* @find_bswap_1(%union.gimple_statement_d* %0, %struct.symbolic_number* %n, i32 %conv), !dbg !7391
  store %union.tree_node* %call2, %union.tree_node** %source_expr, align 8, !dbg !7392
  %4 = load %union.tree_node*, %union.tree_node** %source_expr, align 8, !dbg !7393
  %tobool = icmp ne %union.tree_node* %4, null, !dbg !7393
  br i1 %tobool, label %if.end, label %if.then, !dbg !7395

if.then:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !7396
  br label %return, !dbg !7396

if.end:                                           ; preds = %entry
  %size = getelementptr inbounds %struct.symbolic_number, %struct.symbolic_number* %n, i32 0, i32 1, !dbg !7397
  %5 = load i32, i32* %size, align 8, !dbg !7397
  %cmp3 = icmp slt i32 %5, 8, !dbg !7399
  br i1 %cmp3, label %if.then5, label %if.end12, !dbg !7400

if.then5:                                         ; preds = %if.end
  call void @llvm.dbg.declare(metadata i64* %mask, metadata !7401, metadata !DIExpression()), !dbg !7403
  %size6 = getelementptr inbounds %struct.symbolic_number, %struct.symbolic_number* %n, i32 0, i32 1, !dbg !7404
  %6 = load i32, i32* %size6, align 8, !dbg !7404
  %mul = mul nsw i32 %6, 8, !dbg !7405
  %sh_prom = zext i32 %mul to i64, !dbg !7406
  %shl = shl i64 1, %sh_prom, !dbg !7406
  %sub = sub i64 %shl, 1, !dbg !7407
  store i64 %sub, i64* %mask, align 8, !dbg !7403
  %7 = load i64, i64* %mask, align 8, !dbg !7408
  %n7 = getelementptr inbounds %struct.symbolic_number, %struct.symbolic_number* %n, i32 0, i32 0, !dbg !7409
  %8 = load i64, i64* %n7, align 8, !dbg !7410
  %and = and i64 %8, %7, !dbg !7410
  store i64 %and, i64* %n7, align 8, !dbg !7410
  %size8 = getelementptr inbounds %struct.symbolic_number, %struct.symbolic_number* %n, i32 0, i32 1, !dbg !7411
  %9 = load i32, i32* %size8, align 8, !dbg !7411
  %conv9 = sext i32 %9 to i64, !dbg !7412
  %sub10 = sub i64 8, %conv9, !dbg !7413
  %mul11 = mul i64 %sub10, 8, !dbg !7414
  %10 = load i64, i64* %cmp, align 8, !dbg !7415
  %shr = lshr i64 %10, %mul11, !dbg !7415
  store i64 %shr, i64* %cmp, align 8, !dbg !7415
  br label %if.end12, !dbg !7416

if.end12:                                         ; preds = %if.then5, %if.end
  %11 = load i64, i64* %cmp, align 8, !dbg !7417
  %n13 = getelementptr inbounds %struct.symbolic_number, %struct.symbolic_number* %n, i32 0, i32 0, !dbg !7419
  %12 = load i64, i64* %n13, align 8, !dbg !7419
  %cmp14 = icmp ne i64 %11, %12, !dbg !7420
  br i1 %cmp14, label %if.then16, label %if.end17, !dbg !7421

if.then16:                                        ; preds = %if.end12
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !7422
  br label %return, !dbg !7422

if.end17:                                         ; preds = %if.end12
  %13 = load %union.tree_node*, %union.tree_node** %source_expr, align 8, !dbg !7423
  store %union.tree_node* %13, %union.tree_node** %retval, align 8, !dbg !7424
  br label %return, !dbg !7424

return:                                           ; preds = %if.end17, %if.then16, %if.then
  %14 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !7425
  ret %union.tree_node* %14, !dbg !7425
}

declare dso_local zeroext i8 @useless_type_conversion_p(%union.tree_node*, %union.tree_node*) #2

declare dso_local %union.tree_node* @create_tmp_var(%union.tree_node*, i8*) #2

declare dso_local zeroext i8 @add_referenced_var(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @make_ssa_name(%union.tree_node* %var, %union.gimple_statement_d* %stmt) #0 !dbg !7426 {
entry:
  %var.addr = alloca %union.tree_node*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  store %union.tree_node* %var, %union.tree_node** %var.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %var.addr, metadata !7429, metadata !DIExpression()), !dbg !7430
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !7431, metadata !DIExpression()), !dbg !7432
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !7433
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !7433
  %1 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !7434
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7435
  %call = call %union.tree_node* @make_ssa_name_fn(%struct.function* %add.ptr, %union.tree_node* %1, %union.gimple_statement_d* %2), !dbg !7436
  ret %union.tree_node* %call, !dbg !7437
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %gs) #0 !dbg !7438 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !7439, metadata !DIExpression()), !dbg !7440
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7441
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 0), !dbg !7442
  ret %union.tree_node* %call, !dbg !7443
}

declare dso_local i32 @fprintf(%struct._IO_FILE*, i8*, ...) #2

declare dso_local void @print_gimple_stmt(%struct._IO_FILE*, %union.gimple_statement_d*, i32, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_call_return_type(%union.gimple_statement_d* %gs) #0 !dbg !7444 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %fn = alloca %union.tree_node*, align 8
  %type = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !7445, metadata !DIExpression()), !dbg !7446
  call void @llvm.dbg.declare(metadata %union.tree_node** %fn, metadata !7447, metadata !DIExpression()), !dbg !7448
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7449
  %call = call %union.tree_node* @gimple_call_fn(%union.gimple_statement_d* %0), !dbg !7450
  store %union.tree_node* %call, %union.tree_node** %fn, align 8, !dbg !7448
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !7451, metadata !DIExpression()), !dbg !7452
  %1 = load %union.tree_node*, %union.tree_node** %fn, align 8, !dbg !7453
  %common = bitcast %union.tree_node* %1 to %struct.tree_common*, !dbg !7453
  %type1 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !7453
  %2 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !7453
  store %union.tree_node* %2, %union.tree_node** %type, align 8, !dbg !7452
  %3 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !7454
  %common2 = bitcast %union.tree_node* %3 to %struct.tree_common*, !dbg !7454
  %type3 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common2, i32 0, i32 2, !dbg !7454
  %4 = load %union.tree_node*, %union.tree_node** %type3, align 8, !dbg !7454
  store %union.tree_node* %4, %union.tree_node** %type, align 8, !dbg !7455
  %5 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !7456
  %common4 = bitcast %union.tree_node* %5 to %struct.tree_common*, !dbg !7456
  %type5 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common4, i32 0, i32 2, !dbg !7456
  %6 = load %union.tree_node*, %union.tree_node** %type5, align 8, !dbg !7456
  ret %union.tree_node* %6, !dbg !7457
}

declare dso_local %union.tree_node* @gimple_get_lhs(%union.gimple_statement_d*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @find_bswap_1(%union.gimple_statement_d* %stmt, %struct.symbolic_number* %n, i32 %limit) #0 !dbg !7458 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %n.addr = alloca %struct.symbolic_number*, align 8
  %limit.addr = alloca i32, align 4
  %code = alloca i32, align 4
  %rhs1 = alloca %union.tree_node*, align 8
  %rhs2 = alloca %union.tree_node*, align 8
  %rhs1_stmt = alloca %union.gimple_statement_d*, align 8
  %rhs2_stmt = alloca %union.gimple_statement_d*, align 8
  %source_expr1 = alloca %union.tree_node*, align 8
  %rhs_class = alloca i32, align 4
  %i = alloca i32, align 4
  %val = alloca i64, align 8
  %tmp = alloca i64, align 8
  %type_size = alloca i32, align 4
  %n1 = alloca %struct.symbolic_number, align 8
  %n2 = alloca %struct.symbolic_number, align 8
  %source_expr2 = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !7462, metadata !DIExpression()), !dbg !7463
  store %struct.symbolic_number* %n, %struct.symbolic_number** %n.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.symbolic_number** %n.addr, metadata !7464, metadata !DIExpression()), !dbg !7465
  store i32 %limit, i32* %limit.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %limit.addr, metadata !7466, metadata !DIExpression()), !dbg !7467
  call void @llvm.dbg.declare(metadata i32* %code, metadata !7468, metadata !DIExpression()), !dbg !7469
  call void @llvm.dbg.declare(metadata %union.tree_node** %rhs1, metadata !7470, metadata !DIExpression()), !dbg !7471
  call void @llvm.dbg.declare(metadata %union.tree_node** %rhs2, metadata !7472, metadata !DIExpression()), !dbg !7473
  store %union.tree_node* null, %union.tree_node** %rhs2, align 8, !dbg !7473
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %rhs1_stmt, metadata !7474, metadata !DIExpression()), !dbg !7475
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %rhs2_stmt, metadata !7476, metadata !DIExpression()), !dbg !7477
  call void @llvm.dbg.declare(metadata %union.tree_node** %source_expr1, metadata !7478, metadata !DIExpression()), !dbg !7479
  call void @llvm.dbg.declare(metadata i32* %rhs_class, metadata !7480, metadata !DIExpression()), !dbg !7481
  %0 = load i32, i32* %limit.addr, align 4, !dbg !7482
  %tobool = icmp ne i32 %0, 0, !dbg !7482
  br i1 %tobool, label %lor.lhs.false, label %if.then, !dbg !7484

lor.lhs.false:                                    ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7485
  %call = call zeroext i8 @is_gimple_assign(%union.gimple_statement_d* %1), !dbg !7486
  %tobool1 = icmp ne i8 %call, 0, !dbg !7486
  br i1 %tobool1, label %if.end, label %if.then, !dbg !7487

if.then:                                          ; preds = %lor.lhs.false, %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !7488
  br label %return, !dbg !7488

if.end:                                           ; preds = %lor.lhs.false
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7489
  %call2 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %2), !dbg !7490
  store %union.tree_node* %call2, %union.tree_node** %rhs1, align 8, !dbg !7491
  %3 = load %union.tree_node*, %union.tree_node** %rhs1, align 8, !dbg !7492
  %base = bitcast %union.tree_node* %3 to %struct.tree_base*, !dbg !7492
  %4 = bitcast %struct.tree_base* %base to i64*, !dbg !7492
  %bf.load = load i64, i64* %4, align 8, !dbg !7492
  %bf.clear = and i64 %bf.load, 65535, !dbg !7492
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !7492
  %cmp = icmp ne i32 %bf.cast, 141, !dbg !7494
  br i1 %cmp, label %if.then3, label %if.end4, !dbg !7495

if.then3:                                         ; preds = %if.end
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !7496
  br label %return, !dbg !7496

if.end4:                                          ; preds = %if.end
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7497
  %call5 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %5), !dbg !7498
  store i32 %call5, i32* %code, align 4, !dbg !7499
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7500
  %call6 = call i32 @gimple_assign_rhs_class(%union.gimple_statement_d* %6), !dbg !7501
  store i32 %call6, i32* %rhs_class, align 4, !dbg !7502
  %7 = load %union.tree_node*, %union.tree_node** %rhs1, align 8, !dbg !7503
  %ssa_name = bitcast %union.tree_node* %7 to %struct.tree_ssa_name*, !dbg !7503
  %def_stmt = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 2, !dbg !7503
  %8 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !7503
  store %union.gimple_statement_d* %8, %union.gimple_statement_d** %rhs1_stmt, align 8, !dbg !7504
  %9 = load i32, i32* %rhs_class, align 4, !dbg !7505
  %cmp7 = icmp eq i32 %9, 1, !dbg !7507
  br i1 %cmp7, label %if.then8, label %if.end10, !dbg !7508

if.then8:                                         ; preds = %if.end4
  %10 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7509
  %call9 = call %union.tree_node* @gimple_assign_rhs2(%union.gimple_statement_d* %10), !dbg !7510
  store %union.tree_node* %call9, %union.tree_node** %rhs2, align 8, !dbg !7511
  br label %if.end10, !dbg !7512

if.end10:                                         ; preds = %if.then8, %if.end4
  %11 = load i32, i32* %rhs_class, align 4, !dbg !7513
  %cmp11 = icmp eq i32 %11, 2, !dbg !7515
  br i1 %cmp11, label %if.then19, label %lor.lhs.false12, !dbg !7516

lor.lhs.false12:                                  ; preds = %if.end10
  %12 = load i32, i32* %rhs_class, align 4, !dbg !7517
  %cmp13 = icmp eq i32 %12, 1, !dbg !7518
  br i1 %cmp13, label %land.lhs.true, label %if.end99, !dbg !7519

land.lhs.true:                                    ; preds = %lor.lhs.false12
  %13 = load %union.tree_node*, %union.tree_node** %rhs2, align 8, !dbg !7520
  %base14 = bitcast %union.tree_node* %13 to %struct.tree_base*, !dbg !7520
  %14 = bitcast %struct.tree_base* %base14 to i64*, !dbg !7520
  %bf.load15 = load i64, i64* %14, align 8, !dbg !7520
  %bf.clear16 = and i64 %bf.load15, 65535, !dbg !7520
  %bf.cast17 = trunc i64 %bf.clear16 to i32, !dbg !7520
  %cmp18 = icmp eq i32 %bf.cast17, 23, !dbg !7521
  br i1 %cmp18, label %if.then19, label %if.end99, !dbg !7522

if.then19:                                        ; preds = %land.lhs.true, %if.end10
  %15 = load i32, i32* %code, align 4, !dbg !7523
  %cmp20 = icmp ne i32 %15, 89, !dbg !7526
  br i1 %cmp20, label %land.lhs.true21, label %if.end34, !dbg !7527

land.lhs.true21:                                  ; preds = %if.then19
  %16 = load i32, i32* %code, align 4, !dbg !7528
  %cmp22 = icmp ne i32 %16, 83, !dbg !7529
  br i1 %cmp22, label %land.lhs.true23, label %if.end34, !dbg !7530

land.lhs.true23:                                  ; preds = %land.lhs.true21
  %17 = load i32, i32* %code, align 4, !dbg !7531
  %cmp24 = icmp ne i32 %17, 84, !dbg !7532
  br i1 %cmp24, label %land.lhs.true25, label %if.end34, !dbg !7533

land.lhs.true25:                                  ; preds = %land.lhs.true23
  %18 = load i32, i32* %code, align 4, !dbg !7534
  %cmp26 = icmp ne i32 %18, 85, !dbg !7535
  br i1 %cmp26, label %land.lhs.true27, label %if.end34, !dbg !7536

land.lhs.true27:                                  ; preds = %land.lhs.true25
  %19 = load i32, i32* %code, align 4, !dbg !7537
  %cmp28 = icmp ne i32 %19, 86, !dbg !7538
  br i1 %cmp28, label %land.lhs.true29, label %if.end34, !dbg !7539

land.lhs.true29:                                  ; preds = %land.lhs.true27
  %20 = load i32, i32* %code, align 4, !dbg !7540
  %cmp30 = icmp ne i32 %20, 116, !dbg !7541
  br i1 %cmp30, label %land.lhs.true31, label %if.end34, !dbg !7542

land.lhs.true31:                                  ; preds = %land.lhs.true29
  %21 = load i32, i32* %code, align 4, !dbg !7543
  %cmp32 = icmp ne i32 %21, 113, !dbg !7544
  br i1 %cmp32, label %if.then33, label %if.end34, !dbg !7545

if.then33:                                        ; preds = %land.lhs.true31
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !7546
  br label %return, !dbg !7546

if.end34:                                         ; preds = %land.lhs.true31, %land.lhs.true29, %land.lhs.true27, %land.lhs.true25, %land.lhs.true23, %land.lhs.true21, %if.then19
  %22 = load %union.gimple_statement_d*, %union.gimple_statement_d** %rhs1_stmt, align 8, !dbg !7547
  %23 = load %struct.symbolic_number*, %struct.symbolic_number** %n.addr, align 8, !dbg !7548
  %24 = load i32, i32* %limit.addr, align 4, !dbg !7549
  %sub = sub nsw i32 %24, 1, !dbg !7550
  %call35 = call %union.tree_node* @find_bswap_1(%union.gimple_statement_d* %22, %struct.symbolic_number* %23, i32 %sub), !dbg !7551
  store %union.tree_node* %call35, %union.tree_node** %source_expr1, align 8, !dbg !7552
  %25 = load %union.tree_node*, %union.tree_node** %source_expr1, align 8, !dbg !7553
  %tobool36 = icmp ne %union.tree_node* %25, null, !dbg !7553
  br i1 %tobool36, label %if.end54, label %if.then37, !dbg !7555

if.then37:                                        ; preds = %if.end34
  %26 = load %union.tree_node*, %union.tree_node** %rhs1, align 8, !dbg !7556
  %common = bitcast %union.tree_node* %26 to %struct.tree_common*, !dbg !7556
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !7556
  %27 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !7556
  %type38 = bitcast %union.tree_node* %27 to %struct.tree_type*, !dbg !7556
  %precision = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type38, i32 0, i32 6, !dbg !7556
  %bf.load39 = load i32, i32* %precision, align 4, !dbg !7556
  %bf.clear40 = and i32 %bf.load39, 1023, !dbg !7556
  %28 = load %struct.symbolic_number*, %struct.symbolic_number** %n.addr, align 8, !dbg !7558
  %size = getelementptr inbounds %struct.symbolic_number, %struct.symbolic_number* %28, i32 0, i32 1, !dbg !7559
  store i32 %bf.clear40, i32* %size, align 8, !dbg !7560
  %29 = load %struct.symbolic_number*, %struct.symbolic_number** %n.addr, align 8, !dbg !7561
  %size41 = getelementptr inbounds %struct.symbolic_number, %struct.symbolic_number* %29, i32 0, i32 1, !dbg !7563
  %30 = load i32, i32* %size41, align 8, !dbg !7563
  %rem = srem i32 %30, 8, !dbg !7564
  %cmp42 = icmp ne i32 %rem, 0, !dbg !7565
  br i1 %cmp42, label %if.then43, label %if.end44, !dbg !7566

if.then43:                                        ; preds = %if.then37
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !7567
  br label %return, !dbg !7567

if.end44:                                         ; preds = %if.then37
  %31 = load %struct.symbolic_number*, %struct.symbolic_number** %n.addr, align 8, !dbg !7568
  %size45 = getelementptr inbounds %struct.symbolic_number, %struct.symbolic_number* %31, i32 0, i32 1, !dbg !7569
  %32 = load i32, i32* %size45, align 8, !dbg !7570
  %div = sdiv i32 %32, 8, !dbg !7570
  store i32 %div, i32* %size45, align 8, !dbg !7570
  %33 = load %struct.symbolic_number*, %struct.symbolic_number** %n.addr, align 8, !dbg !7571
  %n46 = getelementptr inbounds %struct.symbolic_number, %struct.symbolic_number* %33, i32 0, i32 0, !dbg !7572
  store i64 578437695752307201, i64* %n46, align 8, !dbg !7573
  %34 = load %struct.symbolic_number*, %struct.symbolic_number** %n.addr, align 8, !dbg !7574
  %size47 = getelementptr inbounds %struct.symbolic_number, %struct.symbolic_number* %34, i32 0, i32 1, !dbg !7576
  %35 = load i32, i32* %size47, align 8, !dbg !7576
  %cmp48 = icmp slt i32 %35, 8, !dbg !7577
  br i1 %cmp48, label %if.then49, label %if.end53, !dbg !7578

if.then49:                                        ; preds = %if.end44
  %36 = load %struct.symbolic_number*, %struct.symbolic_number** %n.addr, align 8, !dbg !7579
  %size50 = getelementptr inbounds %struct.symbolic_number, %struct.symbolic_number* %36, i32 0, i32 1, !dbg !7580
  %37 = load i32, i32* %size50, align 8, !dbg !7580
  %mul = mul nsw i32 %37, 8, !dbg !7581
  %sh_prom = zext i32 %mul to i64, !dbg !7582
  %shl = shl i64 1, %sh_prom, !dbg !7582
  %sub51 = sub i64 %shl, 1, !dbg !7583
  %38 = load %struct.symbolic_number*, %struct.symbolic_number** %n.addr, align 8, !dbg !7584
  %n52 = getelementptr inbounds %struct.symbolic_number, %struct.symbolic_number* %38, i32 0, i32 0, !dbg !7585
  %39 = load i64, i64* %n52, align 8, !dbg !7586
  %and = and i64 %39, %sub51, !dbg !7586
  store i64 %and, i64* %n52, align 8, !dbg !7586
  br label %if.end53, !dbg !7584

if.end53:                                         ; preds = %if.then49, %if.end44
  %40 = load %union.tree_node*, %union.tree_node** %rhs1, align 8, !dbg !7587
  store %union.tree_node* %40, %union.tree_node** %source_expr1, align 8, !dbg !7588
  br label %if.end54, !dbg !7589

if.end54:                                         ; preds = %if.end53, %if.end34
  %41 = load i32, i32* %code, align 4, !dbg !7590
  switch i32 %41, label %sw.default [
    i32 89, label %sw.bb
    i32 83, label %sw.bb67
    i32 84, label %sw.bb67
    i32 85, label %sw.bb67
    i32 86, label %sw.bb67
    i32 116, label %sw.bb73
    i32 113, label %sw.bb73
  ], !dbg !7591

sw.bb:                                            ; preds = %if.end54
  call void @llvm.dbg.declare(metadata i32* %i, metadata !7592, metadata !DIExpression()), !dbg !7595
  call void @llvm.dbg.declare(metadata i64* %val, metadata !7596, metadata !DIExpression()), !dbg !7597
  %42 = load %union.tree_node*, %union.tree_node** %rhs2, align 8, !dbg !7598
  %call55 = call i64 @widest_int_cst_value(%union.tree_node* %42), !dbg !7599
  store i64 %call55, i64* %val, align 8, !dbg !7597
  call void @llvm.dbg.declare(metadata i64* %tmp, metadata !7600, metadata !DIExpression()), !dbg !7601
  %43 = load i64, i64* %val, align 8, !dbg !7602
  store i64 %43, i64* %tmp, align 8, !dbg !7601
  store i32 0, i32* %i, align 4, !dbg !7603
  br label %for.cond, !dbg !7605

for.cond:                                         ; preds = %for.inc, %sw.bb
  %44 = load i32, i32* %i, align 4, !dbg !7606
  %45 = load %struct.symbolic_number*, %struct.symbolic_number** %n.addr, align 8, !dbg !7608
  %size56 = getelementptr inbounds %struct.symbolic_number, %struct.symbolic_number* %45, i32 0, i32 1, !dbg !7609
  %46 = load i32, i32* %size56, align 8, !dbg !7609
  %cmp57 = icmp slt i32 %44, %46, !dbg !7610
  br i1 %cmp57, label %for.body, label %for.end, !dbg !7611

for.body:                                         ; preds = %for.cond
  %47 = load i64, i64* %tmp, align 8, !dbg !7612
  %and58 = and i64 %47, 255, !dbg !7614
  %cmp59 = icmp ne i64 %and58, 0, !dbg !7615
  br i1 %cmp59, label %land.lhs.true60, label %if.end64, !dbg !7616

land.lhs.true60:                                  ; preds = %for.body
  %48 = load i64, i64* %tmp, align 8, !dbg !7617
  %and61 = and i64 %48, 255, !dbg !7618
  %cmp62 = icmp ne i64 %and61, 255, !dbg !7619
  br i1 %cmp62, label %if.then63, label %if.end64, !dbg !7620

if.then63:                                        ; preds = %land.lhs.true60
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !7621
  br label %return, !dbg !7621

if.end64:                                         ; preds = %land.lhs.true60, %for.body
  br label %for.inc, !dbg !7622

for.inc:                                          ; preds = %if.end64
  %49 = load i32, i32* %i, align 4, !dbg !7623
  %inc = add nsw i32 %49, 1, !dbg !7623
  store i32 %inc, i32* %i, align 4, !dbg !7623
  %50 = load i64, i64* %tmp, align 8, !dbg !7624
  %shr = lshr i64 %50, 8, !dbg !7624
  store i64 %shr, i64* %tmp, align 8, !dbg !7624
  br label %for.cond, !dbg !7625, !llvm.loop !7626

for.end:                                          ; preds = %for.cond
  %51 = load i64, i64* %val, align 8, !dbg !7628
  %52 = load %struct.symbolic_number*, %struct.symbolic_number** %n.addr, align 8, !dbg !7629
  %n65 = getelementptr inbounds %struct.symbolic_number, %struct.symbolic_number* %52, i32 0, i32 0, !dbg !7630
  %53 = load i64, i64* %n65, align 8, !dbg !7631
  %and66 = and i64 %53, %51, !dbg !7631
  store i64 %and66, i64* %n65, align 8, !dbg !7631
  br label %sw.epilog, !dbg !7632

sw.bb67:                                          ; preds = %if.end54, %if.end54, %if.end54, %if.end54
  %54 = load i32, i32* %code, align 4, !dbg !7633
  %55 = load %struct.symbolic_number*, %struct.symbolic_number** %n.addr, align 8, !dbg !7635
  %56 = load %union.tree_node*, %union.tree_node** %rhs2, align 8, !dbg !7636
  %int_cst = bitcast %union.tree_node* %56 to %struct.tree_int_cst*, !dbg !7636
  %int_cst68 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst, i32 0, i32 1, !dbg !7636
  %low = getelementptr inbounds %struct.double_int, %struct.double_int* %int_cst68, i32 0, i32 0, !dbg !7636
  %57 = load i64, i64* %low, align 8, !dbg !7636
  %conv = trunc i64 %57 to i32, !dbg !7637
  %call69 = call zeroext i8 @do_shift_rotate(i32 %54, %struct.symbolic_number* %55, i32 %conv), !dbg !7638
  %tobool70 = icmp ne i8 %call69, 0, !dbg !7638
  br i1 %tobool70, label %if.end72, label %if.then71, !dbg !7639

if.then71:                                        ; preds = %sw.bb67
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !7640
  br label %return, !dbg !7640

if.end72:                                         ; preds = %sw.bb67
  br label %sw.epilog, !dbg !7641

sw.bb73:                                          ; preds = %if.end54, %if.end54
  call void @llvm.dbg.declare(metadata i32* %type_size, metadata !7642, metadata !DIExpression()), !dbg !7644
  %58 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7645
  %call74 = call %union.tree_node* @gimple_expr_type(%union.gimple_statement_d* %58), !dbg !7645
  %type75 = bitcast %union.tree_node* %call74 to %struct.tree_type*, !dbg !7645
  %precision76 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type75, i32 0, i32 6, !dbg !7645
  %bf.load77 = load i32, i32* %precision76, align 4, !dbg !7645
  %bf.clear78 = and i32 %bf.load77, 1023, !dbg !7645
  store i32 %bf.clear78, i32* %type_size, align 4, !dbg !7646
  %59 = load i32, i32* %type_size, align 4, !dbg !7647
  %rem79 = srem i32 %59, 8, !dbg !7649
  %cmp80 = icmp ne i32 %rem79, 0, !dbg !7650
  br i1 %cmp80, label %if.then82, label %if.end83, !dbg !7651

if.then82:                                        ; preds = %sw.bb73
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !7652
  br label %return, !dbg !7652

if.end83:                                         ; preds = %sw.bb73
  %60 = load i32, i32* %type_size, align 4, !dbg !7653
  %div84 = sdiv i32 %60, 8, !dbg !7655
  %cmp85 = icmp slt i32 %div84, 8, !dbg !7656
  br i1 %cmp85, label %if.then87, label %if.end93, !dbg !7657

if.then87:                                        ; preds = %if.end83
  %61 = load i32, i32* %type_size, align 4, !dbg !7658
  %sh_prom88 = zext i32 %61 to i64, !dbg !7660
  %shl89 = shl i64 1, %sh_prom88, !dbg !7660
  %sub90 = sub i64 %shl89, 1, !dbg !7661
  %62 = load %struct.symbolic_number*, %struct.symbolic_number** %n.addr, align 8, !dbg !7662
  %n91 = getelementptr inbounds %struct.symbolic_number, %struct.symbolic_number* %62, i32 0, i32 0, !dbg !7663
  %63 = load i64, i64* %n91, align 8, !dbg !7664
  %and92 = and i64 %63, %sub90, !dbg !7664
  store i64 %and92, i64* %n91, align 8, !dbg !7664
  br label %if.end93, !dbg !7665

if.end93:                                         ; preds = %if.then87, %if.end83
  %64 = load i32, i32* %type_size, align 4, !dbg !7666
  %div94 = sdiv i32 %64, 8, !dbg !7667
  %65 = load %struct.symbolic_number*, %struct.symbolic_number** %n.addr, align 8, !dbg !7668
  %size95 = getelementptr inbounds %struct.symbolic_number, %struct.symbolic_number* %65, i32 0, i32 1, !dbg !7669
  store i32 %div94, i32* %size95, align 8, !dbg !7670
  br label %sw.epilog, !dbg !7671

sw.default:                                       ; preds = %if.end54
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !7672
  br label %return, !dbg !7672

sw.epilog:                                        ; preds = %if.end93, %if.end72, %for.end
  %66 = load %struct.symbolic_number*, %struct.symbolic_number** %n.addr, align 8, !dbg !7673
  %67 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7674
  %call96 = call zeroext i8 @verify_symbolic_number_p(%struct.symbolic_number* %66, %union.gimple_statement_d* %67), !dbg !7675
  %conv97 = zext i8 %call96 to i32, !dbg !7675
  %tobool98 = icmp ne i32 %conv97, 0, !dbg !7675
  br i1 %tobool98, label %cond.true, label %cond.false, !dbg !7675

cond.true:                                        ; preds = %sw.epilog
  %68 = load %union.tree_node*, %union.tree_node** %source_expr1, align 8, !dbg !7676
  br label %cond.end, !dbg !7675

cond.false:                                       ; preds = %sw.epilog
  br label %cond.end, !dbg !7675

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %union.tree_node* [ %68, %cond.true ], [ null, %cond.false ], !dbg !7675
  store %union.tree_node* %cond, %union.tree_node** %retval, align 8, !dbg !7677
  br label %return, !dbg !7677

if.end99:                                         ; preds = %land.lhs.true, %lor.lhs.false12
  %69 = load i32, i32* %rhs_class, align 4, !dbg !7678
  %cmp100 = icmp eq i32 %69, 1, !dbg !7680
  br i1 %cmp100, label %if.then102, label %if.end145, !dbg !7681

if.then102:                                       ; preds = %if.end99
  call void @llvm.dbg.declare(metadata %struct.symbolic_number* %n1, metadata !7682, metadata !DIExpression()), !dbg !7684
  call void @llvm.dbg.declare(metadata %struct.symbolic_number* %n2, metadata !7685, metadata !DIExpression()), !dbg !7686
  call void @llvm.dbg.declare(metadata %union.tree_node** %source_expr2, metadata !7687, metadata !DIExpression()), !dbg !7688
  %70 = load i32, i32* %code, align 4, !dbg !7689
  %cmp103 = icmp ne i32 %70, 87, !dbg !7691
  br i1 %cmp103, label %if.then105, label %if.end106, !dbg !7692

if.then105:                                       ; preds = %if.then102
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !7693
  br label %return, !dbg !7693

if.end106:                                        ; preds = %if.then102
  %71 = load %union.tree_node*, %union.tree_node** %rhs2, align 8, !dbg !7694
  %base107 = bitcast %union.tree_node* %71 to %struct.tree_base*, !dbg !7694
  %72 = bitcast %struct.tree_base* %base107 to i64*, !dbg !7694
  %bf.load108 = load i64, i64* %72, align 8, !dbg !7694
  %bf.clear109 = and i64 %bf.load108, 65535, !dbg !7694
  %bf.cast110 = trunc i64 %bf.clear109 to i32, !dbg !7694
  %cmp111 = icmp ne i32 %bf.cast110, 141, !dbg !7696
  br i1 %cmp111, label %if.then113, label %if.end114, !dbg !7697

if.then113:                                       ; preds = %if.end106
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !7698
  br label %return, !dbg !7698

if.end114:                                        ; preds = %if.end106
  %73 = load %union.tree_node*, %union.tree_node** %rhs2, align 8, !dbg !7699
  %ssa_name115 = bitcast %union.tree_node* %73 to %struct.tree_ssa_name*, !dbg !7699
  %def_stmt116 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name115, i32 0, i32 2, !dbg !7699
  %74 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt116, align 8, !dbg !7699
  store %union.gimple_statement_d* %74, %union.gimple_statement_d** %rhs2_stmt, align 8, !dbg !7700
  %75 = load i32, i32* %code, align 4, !dbg !7701
  switch i32 %75, label %sw.default143 [
    i32 87, label %sw.bb117
  ], !dbg !7702

sw.bb117:                                         ; preds = %if.end114
  %76 = load %union.gimple_statement_d*, %union.gimple_statement_d** %rhs1_stmt, align 8, !dbg !7703
  %77 = load i32, i32* %limit.addr, align 4, !dbg !7705
  %sub118 = sub nsw i32 %77, 1, !dbg !7706
  %call119 = call %union.tree_node* @find_bswap_1(%union.gimple_statement_d* %76, %struct.symbolic_number* %n1, i32 %sub118), !dbg !7707
  store %union.tree_node* %call119, %union.tree_node** %source_expr1, align 8, !dbg !7708
  %78 = load %union.tree_node*, %union.tree_node** %source_expr1, align 8, !dbg !7709
  %tobool120 = icmp ne %union.tree_node* %78, null, !dbg !7709
  br i1 %tobool120, label %if.end122, label %if.then121, !dbg !7711

if.then121:                                       ; preds = %sw.bb117
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !7712
  br label %return, !dbg !7712

if.end122:                                        ; preds = %sw.bb117
  %79 = load %union.gimple_statement_d*, %union.gimple_statement_d** %rhs2_stmt, align 8, !dbg !7713
  %80 = load i32, i32* %limit.addr, align 4, !dbg !7714
  %sub123 = sub nsw i32 %80, 1, !dbg !7715
  %call124 = call %union.tree_node* @find_bswap_1(%union.gimple_statement_d* %79, %struct.symbolic_number* %n2, i32 %sub123), !dbg !7716
  store %union.tree_node* %call124, %union.tree_node** %source_expr2, align 8, !dbg !7717
  %81 = load %union.tree_node*, %union.tree_node** %source_expr1, align 8, !dbg !7718
  %82 = load %union.tree_node*, %union.tree_node** %source_expr2, align 8, !dbg !7720
  %cmp125 = icmp ne %union.tree_node* %81, %82, !dbg !7721
  br i1 %cmp125, label %if.then132, label %lor.lhs.false127, !dbg !7722

lor.lhs.false127:                                 ; preds = %if.end122
  %size128 = getelementptr inbounds %struct.symbolic_number, %struct.symbolic_number* %n1, i32 0, i32 1, !dbg !7723
  %83 = load i32, i32* %size128, align 8, !dbg !7723
  %size129 = getelementptr inbounds %struct.symbolic_number, %struct.symbolic_number* %n2, i32 0, i32 1, !dbg !7724
  %84 = load i32, i32* %size129, align 8, !dbg !7724
  %cmp130 = icmp ne i32 %83, %84, !dbg !7725
  br i1 %cmp130, label %if.then132, label %if.end133, !dbg !7726

if.then132:                                       ; preds = %lor.lhs.false127, %if.end122
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !7727
  br label %return, !dbg !7727

if.end133:                                        ; preds = %lor.lhs.false127
  %size134 = getelementptr inbounds %struct.symbolic_number, %struct.symbolic_number* %n1, i32 0, i32 1, !dbg !7728
  %85 = load i32, i32* %size134, align 8, !dbg !7728
  %86 = load %struct.symbolic_number*, %struct.symbolic_number** %n.addr, align 8, !dbg !7729
  %size135 = getelementptr inbounds %struct.symbolic_number, %struct.symbolic_number* %86, i32 0, i32 1, !dbg !7730
  store i32 %85, i32* %size135, align 8, !dbg !7731
  %n136 = getelementptr inbounds %struct.symbolic_number, %struct.symbolic_number* %n1, i32 0, i32 0, !dbg !7732
  %87 = load i64, i64* %n136, align 8, !dbg !7732
  %n137 = getelementptr inbounds %struct.symbolic_number, %struct.symbolic_number* %n2, i32 0, i32 0, !dbg !7733
  %88 = load i64, i64* %n137, align 8, !dbg !7733
  %or = or i64 %87, %88, !dbg !7734
  %89 = load %struct.symbolic_number*, %struct.symbolic_number** %n.addr, align 8, !dbg !7735
  %n138 = getelementptr inbounds %struct.symbolic_number, %struct.symbolic_number* %89, i32 0, i32 0, !dbg !7736
  store i64 %or, i64* %n138, align 8, !dbg !7737
  %90 = load %struct.symbolic_number*, %struct.symbolic_number** %n.addr, align 8, !dbg !7738
  %91 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7740
  %call139 = call zeroext i8 @verify_symbolic_number_p(%struct.symbolic_number* %90, %union.gimple_statement_d* %91), !dbg !7741
  %tobool140 = icmp ne i8 %call139, 0, !dbg !7741
  br i1 %tobool140, label %if.end142, label %if.then141, !dbg !7742

if.then141:                                       ; preds = %if.end133
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !7743
  br label %return, !dbg !7743

if.end142:                                        ; preds = %if.end133
  br label %sw.epilog144, !dbg !7744

sw.default143:                                    ; preds = %if.end114
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !7745
  br label %return, !dbg !7745

sw.epilog144:                                     ; preds = %if.end142
  %92 = load %union.tree_node*, %union.tree_node** %source_expr1, align 8, !dbg !7746
  store %union.tree_node* %92, %union.tree_node** %retval, align 8, !dbg !7747
  br label %return, !dbg !7747

if.end145:                                        ; preds = %if.end99
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !7748
  br label %return, !dbg !7748

return:                                           ; preds = %if.end145, %sw.epilog144, %sw.default143, %if.then141, %if.then132, %if.then121, %if.then113, %if.then105, %cond.end, %sw.default, %if.then82, %if.then71, %if.then63, %if.then43, %if.then33, %if.then3, %if.then
  %93 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !7749
  ret %union.tree_node* %93, !dbg !7749
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_assign_rhs_class(%union.gimple_statement_d* %gs) #0 !dbg !7750 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !7753, metadata !DIExpression()), !dbg !7754
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7755
  %call = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %0), !dbg !7756
  %call1 = call i32 @get_gimple_rhs_class(i32 %call), !dbg !7757
  ret i32 %call1, !dbg !7758
}

declare dso_local i64 @widest_int_cst_value(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @do_shift_rotate(i32 %code, %struct.symbolic_number* %n, i32 %count) #0 !dbg !7759 {
entry:
  %retval = alloca i8, align 1
  %code.addr = alloca i32, align 4
  %n.addr = alloca %struct.symbolic_number*, align 8
  %count.addr = alloca i32, align 4
  store i32 %code, i32* %code.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %code.addr, metadata !7762, metadata !DIExpression()), !dbg !7763
  store %struct.symbolic_number* %n, %struct.symbolic_number** %n.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.symbolic_number** %n.addr, metadata !7764, metadata !DIExpression()), !dbg !7765
  store i32 %count, i32* %count.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %count.addr, metadata !7766, metadata !DIExpression()), !dbg !7767
  %0 = load i32, i32* %count.addr, align 4, !dbg !7768
  %rem = srem i32 %0, 8, !dbg !7770
  %cmp = icmp ne i32 %rem, 0, !dbg !7771
  br i1 %cmp, label %if.then, label %if.end, !dbg !7772

if.then:                                          ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !7773
  br label %return, !dbg !7773

if.end:                                           ; preds = %entry
  %1 = load %struct.symbolic_number*, %struct.symbolic_number** %n.addr, align 8, !dbg !7774
  %size = getelementptr inbounds %struct.symbolic_number, %struct.symbolic_number* %1, i32 0, i32 1, !dbg !7776
  %2 = load i32, i32* %size, align 8, !dbg !7776
  %cmp1 = icmp slt i32 %2, 8, !dbg !7777
  br i1 %cmp1, label %if.then2, label %if.end5, !dbg !7778

if.then2:                                         ; preds = %if.end
  %3 = load %struct.symbolic_number*, %struct.symbolic_number** %n.addr, align 8, !dbg !7779
  %size3 = getelementptr inbounds %struct.symbolic_number, %struct.symbolic_number* %3, i32 0, i32 1, !dbg !7780
  %4 = load i32, i32* %size3, align 8, !dbg !7780
  %mul = mul nsw i32 %4, 8, !dbg !7781
  %sh_prom = zext i32 %mul to i64, !dbg !7782
  %shl = shl i64 1, %sh_prom, !dbg !7782
  %sub = sub i64 %shl, 1, !dbg !7783
  %5 = load %struct.symbolic_number*, %struct.symbolic_number** %n.addr, align 8, !dbg !7784
  %n4 = getelementptr inbounds %struct.symbolic_number, %struct.symbolic_number* %5, i32 0, i32 0, !dbg !7785
  %6 = load i64, i64* %n4, align 8, !dbg !7786
  %and = and i64 %6, %sub, !dbg !7786
  store i64 %and, i64* %n4, align 8, !dbg !7786
  br label %if.end5, !dbg !7784

if.end5:                                          ; preds = %if.then2, %if.end
  %7 = load i32, i32* %code.addr, align 4, !dbg !7787
  switch i32 %7, label %sw.default [
    i32 83, label %sw.bb
    i32 84, label %sw.bb9
    i32 85, label %sw.bb12
    i32 86, label %sw.bb23
  ], !dbg !7788

sw.bb:                                            ; preds = %if.end5
  %8 = load i32, i32* %count.addr, align 4, !dbg !7789
  %9 = load %struct.symbolic_number*, %struct.symbolic_number** %n.addr, align 8, !dbg !7791
  %n6 = getelementptr inbounds %struct.symbolic_number, %struct.symbolic_number* %9, i32 0, i32 0, !dbg !7792
  %10 = load i64, i64* %n6, align 8, !dbg !7793
  %sh_prom7 = zext i32 %8 to i64, !dbg !7793
  %shl8 = shl i64 %10, %sh_prom7, !dbg !7793
  store i64 %shl8, i64* %n6, align 8, !dbg !7793
  br label %sw.epilog, !dbg !7794

sw.bb9:                                           ; preds = %if.end5
  %11 = load i32, i32* %count.addr, align 4, !dbg !7795
  %12 = load %struct.symbolic_number*, %struct.symbolic_number** %n.addr, align 8, !dbg !7796
  %n10 = getelementptr inbounds %struct.symbolic_number, %struct.symbolic_number* %12, i32 0, i32 0, !dbg !7797
  %13 = load i64, i64* %n10, align 8, !dbg !7798
  %sh_prom11 = zext i32 %11 to i64, !dbg !7798
  %shr = lshr i64 %13, %sh_prom11, !dbg !7798
  store i64 %shr, i64* %n10, align 8, !dbg !7798
  br label %sw.epilog, !dbg !7799

sw.bb12:                                          ; preds = %if.end5
  %14 = load %struct.symbolic_number*, %struct.symbolic_number** %n.addr, align 8, !dbg !7800
  %n13 = getelementptr inbounds %struct.symbolic_number, %struct.symbolic_number* %14, i32 0, i32 0, !dbg !7801
  %15 = load i64, i64* %n13, align 8, !dbg !7801
  %16 = load i32, i32* %count.addr, align 4, !dbg !7802
  %sh_prom14 = zext i32 %16 to i64, !dbg !7803
  %shl15 = shl i64 %15, %sh_prom14, !dbg !7803
  %17 = load %struct.symbolic_number*, %struct.symbolic_number** %n.addr, align 8, !dbg !7804
  %n16 = getelementptr inbounds %struct.symbolic_number, %struct.symbolic_number* %17, i32 0, i32 0, !dbg !7805
  %18 = load i64, i64* %n16, align 8, !dbg !7805
  %19 = load %struct.symbolic_number*, %struct.symbolic_number** %n.addr, align 8, !dbg !7806
  %size17 = getelementptr inbounds %struct.symbolic_number, %struct.symbolic_number* %19, i32 0, i32 1, !dbg !7807
  %20 = load i32, i32* %size17, align 8, !dbg !7807
  %mul18 = mul nsw i32 %20, 8, !dbg !7808
  %21 = load i32, i32* %count.addr, align 4, !dbg !7809
  %sub19 = sub nsw i32 %mul18, %21, !dbg !7810
  %sh_prom20 = zext i32 %sub19 to i64, !dbg !7811
  %shr21 = lshr i64 %18, %sh_prom20, !dbg !7811
  %or = or i64 %shl15, %shr21, !dbg !7812
  %22 = load %struct.symbolic_number*, %struct.symbolic_number** %n.addr, align 8, !dbg !7813
  %n22 = getelementptr inbounds %struct.symbolic_number, %struct.symbolic_number* %22, i32 0, i32 0, !dbg !7814
  store i64 %or, i64* %n22, align 8, !dbg !7815
  br label %sw.epilog, !dbg !7816

sw.bb23:                                          ; preds = %if.end5
  %23 = load %struct.symbolic_number*, %struct.symbolic_number** %n.addr, align 8, !dbg !7817
  %n24 = getelementptr inbounds %struct.symbolic_number, %struct.symbolic_number* %23, i32 0, i32 0, !dbg !7818
  %24 = load i64, i64* %n24, align 8, !dbg !7818
  %25 = load i32, i32* %count.addr, align 4, !dbg !7819
  %sh_prom25 = zext i32 %25 to i64, !dbg !7820
  %shr26 = lshr i64 %24, %sh_prom25, !dbg !7820
  %26 = load %struct.symbolic_number*, %struct.symbolic_number** %n.addr, align 8, !dbg !7821
  %n27 = getelementptr inbounds %struct.symbolic_number, %struct.symbolic_number* %26, i32 0, i32 0, !dbg !7822
  %27 = load i64, i64* %n27, align 8, !dbg !7822
  %28 = load %struct.symbolic_number*, %struct.symbolic_number** %n.addr, align 8, !dbg !7823
  %size28 = getelementptr inbounds %struct.symbolic_number, %struct.symbolic_number* %28, i32 0, i32 1, !dbg !7824
  %29 = load i32, i32* %size28, align 8, !dbg !7824
  %mul29 = mul nsw i32 %29, 8, !dbg !7825
  %30 = load i32, i32* %count.addr, align 4, !dbg !7826
  %sub30 = sub nsw i32 %mul29, %30, !dbg !7827
  %sh_prom31 = zext i32 %sub30 to i64, !dbg !7828
  %shl32 = shl i64 %27, %sh_prom31, !dbg !7828
  %or33 = or i64 %shr26, %shl32, !dbg !7829
  %31 = load %struct.symbolic_number*, %struct.symbolic_number** %n.addr, align 8, !dbg !7830
  %n34 = getelementptr inbounds %struct.symbolic_number, %struct.symbolic_number* %31, i32 0, i32 0, !dbg !7831
  store i64 %or33, i64* %n34, align 8, !dbg !7832
  br label %sw.epilog, !dbg !7833

sw.default:                                       ; preds = %if.end5
  store i8 0, i8* %retval, align 1, !dbg !7834
  br label %return, !dbg !7834

sw.epilog:                                        ; preds = %sw.bb23, %sw.bb12, %sw.bb9, %sw.bb
  store i8 1, i8* %retval, align 1, !dbg !7835
  br label %return, !dbg !7835

return:                                           ; preds = %sw.epilog, %sw.default, %if.then
  %32 = load i8, i8* %retval, align 1, !dbg !7836
  ret i8 %32, !dbg !7836
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @verify_symbolic_number_p(%struct.symbolic_number* %n, %union.gimple_statement_d* %stmt) #0 !dbg !7837 {
entry:
  %retval = alloca i8, align 1
  %n.addr = alloca %struct.symbolic_number*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %lhs_type = alloca %union.tree_node*, align 8
  store %struct.symbolic_number* %n, %struct.symbolic_number** %n.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.symbolic_number** %n.addr, metadata !7840, metadata !DIExpression()), !dbg !7841
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !7842, metadata !DIExpression()), !dbg !7843
  call void @llvm.dbg.declare(metadata %union.tree_node** %lhs_type, metadata !7844, metadata !DIExpression()), !dbg !7845
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7846
  %call = call %union.tree_node* @gimple_expr_type(%union.gimple_statement_d* %0), !dbg !7847
  store %union.tree_node* %call, %union.tree_node** %lhs_type, align 8, !dbg !7848
  %1 = load %union.tree_node*, %union.tree_node** %lhs_type, align 8, !dbg !7849
  %base = bitcast %union.tree_node* %1 to %struct.tree_base*, !dbg !7849
  %2 = bitcast %struct.tree_base* %base to i64*, !dbg !7849
  %bf.load = load i64, i64* %2, align 8, !dbg !7849
  %bf.clear = and i64 %bf.load, 65535, !dbg !7849
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !7849
  %cmp = icmp ne i32 %bf.cast, 8, !dbg !7851
  br i1 %cmp, label %if.then, label %if.end, !dbg !7852

if.then:                                          ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !7853
  br label %return, !dbg !7853

if.end:                                           ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %lhs_type, align 8, !dbg !7854
  %type = bitcast %union.tree_node* %3 to %struct.tree_type*, !dbg !7854
  %precision = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type, i32 0, i32 6, !dbg !7854
  %bf.load1 = load i32, i32* %precision, align 4, !dbg !7854
  %bf.clear2 = and i32 %bf.load1, 1023, !dbg !7854
  %4 = load %struct.symbolic_number*, %struct.symbolic_number** %n.addr, align 8, !dbg !7856
  %size = getelementptr inbounds %struct.symbolic_number, %struct.symbolic_number* %4, i32 0, i32 1, !dbg !7857
  %5 = load i32, i32* %size, align 8, !dbg !7857
  %mul = mul nsw i32 %5, 8, !dbg !7858
  %cmp3 = icmp ne i32 %bf.clear2, %mul, !dbg !7859
  br i1 %cmp3, label %if.then4, label %if.end5, !dbg !7860

if.then4:                                         ; preds = %if.end
  store i8 0, i8* %retval, align 1, !dbg !7861
  br label %return, !dbg !7861

if.end5:                                          ; preds = %if.end
  store i8 1, i8* %retval, align 1, !dbg !7862
  br label %return, !dbg !7862

return:                                           ; preds = %if.end5, %if.then4, %if.then
  %6 = load i8, i8* %retval, align 1, !dbg !7863
  ret i8 %6, !dbg !7863
}

declare dso_local %union.tree_node* @make_ssa_name_fn(%struct.function*, %union.tree_node*, %union.gimple_statement_d*) #2

attributes #0 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }

!llvm.dbg.cu = !{!2}
!llvm.module.flags = !{!4554, !4555, !4556}
!llvm.ident = !{!4557}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "pass_cse_reciprocals", scope: !2, file: !3, line: 588, type: !4501, isLocal: false, isDefinition: true)
!2 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 10.0.1 (https://github.com/svkeerthy/IR2Vec-LoopOptimizationFramework.git 561ac470e63b728263a0ac06ef987886ac648486)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !3176, globals: !4498, splitDebugInlining: false, nameTableKind: None)
!3 = !DIFile(filename: "tree-ssa-math-opts.c", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!4 = !{!5, !13, !189, !317, !323, !328, !333, !352, !359, !366, !560, !564, !570, !1290, !1296, !1334, !1348, !1355, !1361, !1387, !1550, !3042}
!5 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "opt_pass_type", file: !6, line: 104, baseType: !7, size: 32, elements: !8)
!6 = !DIFile(filename: "./tree-pass.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!7 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!8 = !{!9, !10, !11, !12}
!9 = !DIEnumerator(name: "GIMPLE_PASS", value: 0, isUnsigned: true)
!10 = !DIEnumerator(name: "RTL_PASS", value: 1, isUnsigned: true)
!11 = !DIEnumerator(name: "SIMPLE_IPA_PASS", value: 2, isUnsigned: true)
!12 = !DIEnumerator(name: "IPA_PASS", value: 3, isUnsigned: true)
!13 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !14, line: 74, baseType: !7, size: 32, elements: !15)
!14 = !DIFile(filename: "./timevar.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!15 = !{!16, !17, !18, !19, !20, !21, !22, !23, !24, !25, !26, !27, !28, !29, !30, !31, !32, !33, !34, !35, !36, !37, !38, !39, !40, !41, !42, !43, !44, !45, !46, !47, !48, !49, !50, !51, !52, !53, !54, !55, !56, !57, !58, !59, !60, !61, !62, !63, !64, !65, !66, !67, !68, !69, !70, !71, !72, !73, !74, !75, !76, !77, !78, !79, !80, !81, !82, !83, !84, !85, !86, !87, !88, !89, !90, !91, !92, !93, !94, !95, !96, !97, !98, !99, !100, !101, !102, !103, !104, !105, !106, !107, !108, !109, !110, !111, !112, !113, !114, !115, !116, !117, !118, !119, !120, !121, !122, !123, !124, !125, !126, !127, !128, !129, !130, !131, !132, !133, !134, !135, !136, !137, !138, !139, !140, !141, !142, !143, !144, !145, !146, !147, !148, !149, !150, !151, !152, !153, !154, !155, !156, !157, !158, !159, !160, !161, !162, !163, !164, !165, !166, !167, !168, !169, !170, !171, !172, !173, !174, !175, !176, !177, !178, !179, !180, !181, !182, !183, !184, !185, !186, !187, !188}
!16 = !DIEnumerator(name: "TV_NONE", value: 0, isUnsigned: true)
!17 = !DIEnumerator(name: "TV_TOTAL", value: 1, isUnsigned: true)
!18 = !DIEnumerator(name: "TV_GC", value: 2, isUnsigned: true)
!19 = !DIEnumerator(name: "TV_DUMP", value: 3, isUnsigned: true)
!20 = !DIEnumerator(name: "TV_CGRAPH", value: 4, isUnsigned: true)
!21 = !DIEnumerator(name: "TV_CGRAPHOPT", value: 5, isUnsigned: true)
!22 = !DIEnumerator(name: "TV_IPA_CONSTANT_PROP", value: 6, isUnsigned: true)
!23 = !DIEnumerator(name: "TV_IPA_LTO_GIMPLE_IO", value: 7, isUnsigned: true)
!24 = !DIEnumerator(name: "TV_IPA_LTO_DECL_IO", value: 8, isUnsigned: true)
!25 = !DIEnumerator(name: "TV_IPA_LTO_CGRAPH_IO", value: 9, isUnsigned: true)
!26 = !DIEnumerator(name: "TV_LTO", value: 10, isUnsigned: true)
!27 = !DIEnumerator(name: "TV_WHOPR_WPA", value: 11, isUnsigned: true)
!28 = !DIEnumerator(name: "TV_WHOPR_WPA_IO", value: 12, isUnsigned: true)
!29 = !DIEnumerator(name: "TV_WHOPR_LTRANS", value: 13, isUnsigned: true)
!30 = !DIEnumerator(name: "TV_WHOPR_WPA_FIXUP", value: 14, isUnsigned: true)
!31 = !DIEnumerator(name: "TV_WHOPR_WPA_LTRANS_EXEC", value: 15, isUnsigned: true)
!32 = !DIEnumerator(name: "TV_IPA_REFERENCE", value: 16, isUnsigned: true)
!33 = !DIEnumerator(name: "TV_IPA_PURE_CONST", value: 17, isUnsigned: true)
!34 = !DIEnumerator(name: "TV_IPA_TYPE_ESCAPE", value: 18, isUnsigned: true)
!35 = !DIEnumerator(name: "TV_IPA_PTA", value: 19, isUnsigned: true)
!36 = !DIEnumerator(name: "TV_IPA_SRA", value: 20, isUnsigned: true)
!37 = !DIEnumerator(name: "TV_IPA_FREE_LANG_DATA", value: 21, isUnsigned: true)
!38 = !DIEnumerator(name: "TV_CFG", value: 22, isUnsigned: true)
!39 = !DIEnumerator(name: "TV_CLEANUP_CFG", value: 23, isUnsigned: true)
!40 = !DIEnumerator(name: "TV_CFG_VERIFY", value: 24, isUnsigned: true)
!41 = !DIEnumerator(name: "TV_DELETE_TRIVIALLY_DEAD", value: 25, isUnsigned: true)
!42 = !DIEnumerator(name: "TV_LIFE", value: 26, isUnsigned: true)
!43 = !DIEnumerator(name: "TV_LIFE_UPDATE", value: 27, isUnsigned: true)
!44 = !DIEnumerator(name: "TV_DF_SCAN", value: 28, isUnsigned: true)
!45 = !DIEnumerator(name: "TV_DF_MD", value: 29, isUnsigned: true)
!46 = !DIEnumerator(name: "TV_DF_RD", value: 30, isUnsigned: true)
!47 = !DIEnumerator(name: "TV_DF_LR", value: 31, isUnsigned: true)
!48 = !DIEnumerator(name: "TV_DF_LIVE", value: 32, isUnsigned: true)
!49 = !DIEnumerator(name: "TV_DF_UREC", value: 33, isUnsigned: true)
!50 = !DIEnumerator(name: "TV_DF_CHAIN", value: 34, isUnsigned: true)
!51 = !DIEnumerator(name: "TV_DF_BYTE_LR", value: 35, isUnsigned: true)
!52 = !DIEnumerator(name: "TV_DF_NOTE", value: 36, isUnsigned: true)
!53 = !DIEnumerator(name: "TV_REG_STATS", value: 37, isUnsigned: true)
!54 = !DIEnumerator(name: "TV_ALIAS_ANALYSIS", value: 38, isUnsigned: true)
!55 = !DIEnumerator(name: "TV_ALIAS_STMT_WALK", value: 39, isUnsigned: true)
!56 = !DIEnumerator(name: "TV_REG_SCAN", value: 40, isUnsigned: true)
!57 = !DIEnumerator(name: "TV_REBUILD_JUMP", value: 41, isUnsigned: true)
!58 = !DIEnumerator(name: "TV_CPP", value: 42, isUnsigned: true)
!59 = !DIEnumerator(name: "TV_LEX", value: 43, isUnsigned: true)
!60 = !DIEnumerator(name: "TV_PARSE", value: 44, isUnsigned: true)
!61 = !DIEnumerator(name: "TV_NAME_LOOKUP", value: 45, isUnsigned: true)
!62 = !DIEnumerator(name: "TV_INLINE_HEURISTICS", value: 46, isUnsigned: true)
!63 = !DIEnumerator(name: "TV_INTEGRATION", value: 47, isUnsigned: true)
!64 = !DIEnumerator(name: "TV_TREE_GIMPLIFY", value: 48, isUnsigned: true)
!65 = !DIEnumerator(name: "TV_TREE_EH", value: 49, isUnsigned: true)
!66 = !DIEnumerator(name: "TV_TREE_CFG", value: 50, isUnsigned: true)
!67 = !DIEnumerator(name: "TV_TREE_CLEANUP_CFG", value: 51, isUnsigned: true)
!68 = !DIEnumerator(name: "TV_TREE_VRP", value: 52, isUnsigned: true)
!69 = !DIEnumerator(name: "TV_TREE_COPY_PROP", value: 53, isUnsigned: true)
!70 = !DIEnumerator(name: "TV_TREE_STORE_COPY_PROP", value: 54, isUnsigned: true)
!71 = !DIEnumerator(name: "TV_FIND_REFERENCED_VARS", value: 55, isUnsigned: true)
!72 = !DIEnumerator(name: "TV_TREE_PTA", value: 56, isUnsigned: true)
!73 = !DIEnumerator(name: "TV_TREE_INSERT_PHI_NODES", value: 57, isUnsigned: true)
!74 = !DIEnumerator(name: "TV_TREE_SSA_REWRITE_BLOCKS", value: 58, isUnsigned: true)
!75 = !DIEnumerator(name: "TV_TREE_SSA_OTHER", value: 59, isUnsigned: true)
!76 = !DIEnumerator(name: "TV_TREE_SSA_INCREMENTAL", value: 60, isUnsigned: true)
!77 = !DIEnumerator(name: "TV_TREE_OPS", value: 61, isUnsigned: true)
!78 = !DIEnumerator(name: "TV_TREE_SSA_DOMINATOR_OPTS", value: 62, isUnsigned: true)
!79 = !DIEnumerator(name: "TV_TREE_SRA", value: 63, isUnsigned: true)
!80 = !DIEnumerator(name: "TV_TREE_STORE_CCP", value: 64, isUnsigned: true)
!81 = !DIEnumerator(name: "TV_TREE_CCP", value: 65, isUnsigned: true)
!82 = !DIEnumerator(name: "TV_TREE_PHI_CPROP", value: 66, isUnsigned: true)
!83 = !DIEnumerator(name: "TV_TREE_SPLIT_EDGES", value: 67, isUnsigned: true)
!84 = !DIEnumerator(name: "TV_TREE_REASSOC", value: 68, isUnsigned: true)
!85 = !DIEnumerator(name: "TV_TREE_PRE", value: 69, isUnsigned: true)
!86 = !DIEnumerator(name: "TV_TREE_REDPHI", value: 70, isUnsigned: true)
!87 = !DIEnumerator(name: "TV_TREE_FRE", value: 71, isUnsigned: true)
!88 = !DIEnumerator(name: "TV_TREE_SINK", value: 72, isUnsigned: true)
!89 = !DIEnumerator(name: "TV_TREE_PHIOPT", value: 73, isUnsigned: true)
!90 = !DIEnumerator(name: "TV_TREE_FORWPROP", value: 74, isUnsigned: true)
!91 = !DIEnumerator(name: "TV_TREE_PHIPROP", value: 75, isUnsigned: true)
!92 = !DIEnumerator(name: "TV_TREE_DCE", value: 76, isUnsigned: true)
!93 = !DIEnumerator(name: "TV_TREE_CD_DCE", value: 77, isUnsigned: true)
!94 = !DIEnumerator(name: "TV_TREE_CALL_CDCE", value: 78, isUnsigned: true)
!95 = !DIEnumerator(name: "TV_TREE_DSE", value: 79, isUnsigned: true)
!96 = !DIEnumerator(name: "TV_TREE_MERGE_PHI", value: 80, isUnsigned: true)
!97 = !DIEnumerator(name: "TV_TREE_LOOP", value: 81, isUnsigned: true)
!98 = !DIEnumerator(name: "TV_TREE_LOOP_BOUNDS", value: 82, isUnsigned: true)
!99 = !DIEnumerator(name: "TV_LIM", value: 83, isUnsigned: true)
!100 = !DIEnumerator(name: "TV_TREE_LOOP_IVCANON", value: 84, isUnsigned: true)
!101 = !DIEnumerator(name: "TV_SCEV_CONST", value: 85, isUnsigned: true)
!102 = !DIEnumerator(name: "TV_TREE_LOOP_UNSWITCH", value: 86, isUnsigned: true)
!103 = !DIEnumerator(name: "TV_COMPLETE_UNROLL", value: 87, isUnsigned: true)
!104 = !DIEnumerator(name: "TV_TREE_PARALLELIZE_LOOPS", value: 88, isUnsigned: true)
!105 = !DIEnumerator(name: "TV_TREE_VECTORIZATION", value: 89, isUnsigned: true)
!106 = !DIEnumerator(name: "TV_TREE_SLP_VECTORIZATION", value: 90, isUnsigned: true)
!107 = !DIEnumerator(name: "TV_GRAPHITE_TRANSFORMS", value: 91, isUnsigned: true)
!108 = !DIEnumerator(name: "TV_GRAPHITE_DATA_DEPS", value: 92, isUnsigned: true)
!109 = !DIEnumerator(name: "TV_GRAPHITE_CODE_GEN", value: 93, isUnsigned: true)
!110 = !DIEnumerator(name: "TV_TREE_LINEAR_TRANSFORM", value: 94, isUnsigned: true)
!111 = !DIEnumerator(name: "TV_TREE_LOOP_DISTRIBUTION", value: 95, isUnsigned: true)
!112 = !DIEnumerator(name: "TV_CHECK_DATA_DEPS", value: 96, isUnsigned: true)
!113 = !DIEnumerator(name: "TV_TREE_PREFETCH", value: 97, isUnsigned: true)
!114 = !DIEnumerator(name: "TV_TREE_LOOP_IVOPTS", value: 98, isUnsigned: true)
!115 = !DIEnumerator(name: "TV_PREDCOM", value: 99, isUnsigned: true)
!116 = !DIEnumerator(name: "TV_TREE_LOOP_INIT", value: 100, isUnsigned: true)
!117 = !DIEnumerator(name: "TV_TREE_LOOP_FINI", value: 101, isUnsigned: true)
!118 = !DIEnumerator(name: "TV_TREE_CH", value: 102, isUnsigned: true)
!119 = !DIEnumerator(name: "TV_TREE_SSA_UNCPROP", value: 103, isUnsigned: true)
!120 = !DIEnumerator(name: "TV_TREE_SSA_TO_NORMAL", value: 104, isUnsigned: true)
!121 = !DIEnumerator(name: "TV_TREE_NRV", value: 105, isUnsigned: true)
!122 = !DIEnumerator(name: "TV_TREE_COPY_RENAME", value: 106, isUnsigned: true)
!123 = !DIEnumerator(name: "TV_TREE_SSA_VERIFY", value: 107, isUnsigned: true)
!124 = !DIEnumerator(name: "TV_TREE_STMT_VERIFY", value: 108, isUnsigned: true)
!125 = !DIEnumerator(name: "TV_TREE_SWITCH_CONVERSION", value: 109, isUnsigned: true)
!126 = !DIEnumerator(name: "TV_CGRAPH_VERIFY", value: 110, isUnsigned: true)
!127 = !DIEnumerator(name: "TV_DOM_FRONTIERS", value: 111, isUnsigned: true)
!128 = !DIEnumerator(name: "TV_DOMINANCE", value: 112, isUnsigned: true)
!129 = !DIEnumerator(name: "TV_CONTROL_DEPENDENCES", value: 113, isUnsigned: true)
!130 = !DIEnumerator(name: "TV_OVERLOAD", value: 114, isUnsigned: true)
!131 = !DIEnumerator(name: "TV_TEMPLATE_INSTANTIATION", value: 115, isUnsigned: true)
!132 = !DIEnumerator(name: "TV_EXPAND", value: 116, isUnsigned: true)
!133 = !DIEnumerator(name: "TV_VARCONST", value: 117, isUnsigned: true)
!134 = !DIEnumerator(name: "TV_LOWER_SUBREG", value: 118, isUnsigned: true)
!135 = !DIEnumerator(name: "TV_JUMP", value: 119, isUnsigned: true)
!136 = !DIEnumerator(name: "TV_FWPROP", value: 120, isUnsigned: true)
!137 = !DIEnumerator(name: "TV_CSE", value: 121, isUnsigned: true)
!138 = !DIEnumerator(name: "TV_DCE", value: 122, isUnsigned: true)
!139 = !DIEnumerator(name: "TV_DSE1", value: 123, isUnsigned: true)
!140 = !DIEnumerator(name: "TV_DSE2", value: 124, isUnsigned: true)
!141 = !DIEnumerator(name: "TV_LOOP", value: 125, isUnsigned: true)
!142 = !DIEnumerator(name: "TV_LOOP_MOVE_INVARIANTS", value: 126, isUnsigned: true)
!143 = !DIEnumerator(name: "TV_LOOP_UNSWITCH", value: 127, isUnsigned: true)
!144 = !DIEnumerator(name: "TV_LOOP_UNROLL", value: 128, isUnsigned: true)
!145 = !DIEnumerator(name: "TV_LOOP_DOLOOP", value: 129, isUnsigned: true)
!146 = !DIEnumerator(name: "TV_CPROP", value: 130, isUnsigned: true)
!147 = !DIEnumerator(name: "TV_PRE", value: 131, isUnsigned: true)
!148 = !DIEnumerator(name: "TV_HOIST", value: 132, isUnsigned: true)
!149 = !DIEnumerator(name: "TV_LSM", value: 133, isUnsigned: true)
!150 = !DIEnumerator(name: "TV_TRACER", value: 134, isUnsigned: true)
!151 = !DIEnumerator(name: "TV_WEB", value: 135, isUnsigned: true)
!152 = !DIEnumerator(name: "TV_AUTO_INC_DEC", value: 136, isUnsigned: true)
!153 = !DIEnumerator(name: "TV_CSE2", value: 137, isUnsigned: true)
!154 = !DIEnumerator(name: "TV_BRANCH_PROB", value: 138, isUnsigned: true)
!155 = !DIEnumerator(name: "TV_VPT", value: 139, isUnsigned: true)
!156 = !DIEnumerator(name: "TV_COMBINE", value: 140, isUnsigned: true)
!157 = !DIEnumerator(name: "TV_IFCVT", value: 141, isUnsigned: true)
!158 = !DIEnumerator(name: "TV_REGMOVE", value: 142, isUnsigned: true)
!159 = !DIEnumerator(name: "TV_MODE_SWITCH", value: 143, isUnsigned: true)
!160 = !DIEnumerator(name: "TV_SMS", value: 144, isUnsigned: true)
!161 = !DIEnumerator(name: "TV_SCHED", value: 145, isUnsigned: true)
!162 = !DIEnumerator(name: "TV_LOCAL_ALLOC", value: 146, isUnsigned: true)
!163 = !DIEnumerator(name: "TV_GLOBAL_ALLOC", value: 147, isUnsigned: true)
!164 = !DIEnumerator(name: "TV_IRA", value: 148, isUnsigned: true)
!165 = !DIEnumerator(name: "TV_RELOAD", value: 149, isUnsigned: true)
!166 = !DIEnumerator(name: "TV_RELOAD_CSE_REGS", value: 150, isUnsigned: true)
!167 = !DIEnumerator(name: "TV_SEQABSTR", value: 151, isUnsigned: true)
!168 = !DIEnumerator(name: "TV_GCSE_AFTER_RELOAD", value: 152, isUnsigned: true)
!169 = !DIEnumerator(name: "TV_THREAD_PROLOGUE_AND_EPILOGUE", value: 153, isUnsigned: true)
!170 = !DIEnumerator(name: "TV_IFCVT2", value: 154, isUnsigned: true)
!171 = !DIEnumerator(name: "TV_COMBINE_STACK_ADJUST", value: 155, isUnsigned: true)
!172 = !DIEnumerator(name: "TV_PEEPHOLE2", value: 156, isUnsigned: true)
!173 = !DIEnumerator(name: "TV_RENAME_REGISTERS", value: 157, isUnsigned: true)
!174 = !DIEnumerator(name: "TV_CPROP_REGISTERS", value: 158, isUnsigned: true)
!175 = !DIEnumerator(name: "TV_SCHED2", value: 159, isUnsigned: true)
!176 = !DIEnumerator(name: "TV_MACH_DEP", value: 160, isUnsigned: true)
!177 = !DIEnumerator(name: "TV_DBR_SCHED", value: 161, isUnsigned: true)
!178 = !DIEnumerator(name: "TV_REORDER_BLOCKS", value: 162, isUnsigned: true)
!179 = !DIEnumerator(name: "TV_SHORTEN_BRANCH", value: 163, isUnsigned: true)
!180 = !DIEnumerator(name: "TV_REG_STACK", value: 164, isUnsigned: true)
!181 = !DIEnumerator(name: "TV_FINAL", value: 165, isUnsigned: true)
!182 = !DIEnumerator(name: "TV_SYMOUT", value: 166, isUnsigned: true)
!183 = !DIEnumerator(name: "TV_VAR_TRACKING", value: 167, isUnsigned: true)
!184 = !DIEnumerator(name: "TV_TREE_IFCOMBINE", value: 168, isUnsigned: true)
!185 = !DIEnumerator(name: "TV_PLUGIN_INIT", value: 169, isUnsigned: true)
!186 = !DIEnumerator(name: "TV_PLUGIN_RUN", value: 170, isUnsigned: true)
!187 = !DIEnumerator(name: "TV_REST_OF_COMPILATION", value: 171, isUnsigned: true)
!188 = !DIEnumerator(name: "TIMEVAR_LAST", value: 172, isUnsigned: true)
!189 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "machine_mode", file: !190, line: 7, baseType: !7, size: 32, elements: !191)
!190 = !DIFile(filename: "./insn-modes.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!191 = !{!192, !193, !194, !195, !196, !197, !198, !199, !200, !201, !202, !203, !204, !205, !206, !207, !208, !209, !210, !211, !212, !213, !214, !215, !216, !217, !218, !219, !220, !221, !222, !223, !224, !225, !226, !227, !228, !229, !230, !231, !232, !233, !234, !235, !236, !237, !238, !239, !240, !241, !242, !243, !244, !245, !246, !247, !248, !249, !250, !251, !252, !253, !254, !255, !256, !257, !258, !259, !260, !261, !262, !263, !264, !265, !266, !267, !268, !269, !270, !271, !272, !273, !274, !275, !276, !277, !278, !279, !280, !281, !282, !283, !284, !285, !286, !287, !288, !289, !290, !291, !292, !293, !294, !295, !296, !297, !298, !299, !300, !301, !302, !303, !304, !305, !306, !307, !308, !309, !310, !311, !312, !313, !314, !315, !316}
!192 = !DIEnumerator(name: "VOIDmode", value: 0, isUnsigned: true)
!193 = !DIEnumerator(name: "BLKmode", value: 1, isUnsigned: true)
!194 = !DIEnumerator(name: "CCmode", value: 2, isUnsigned: true)
!195 = !DIEnumerator(name: "CCGCmode", value: 3, isUnsigned: true)
!196 = !DIEnumerator(name: "CCGOCmode", value: 4, isUnsigned: true)
!197 = !DIEnumerator(name: "CCNOmode", value: 5, isUnsigned: true)
!198 = !DIEnumerator(name: "CCAmode", value: 6, isUnsigned: true)
!199 = !DIEnumerator(name: "CCCmode", value: 7, isUnsigned: true)
!200 = !DIEnumerator(name: "CCOmode", value: 8, isUnsigned: true)
!201 = !DIEnumerator(name: "CCSmode", value: 9, isUnsigned: true)
!202 = !DIEnumerator(name: "CCZmode", value: 10, isUnsigned: true)
!203 = !DIEnumerator(name: "CCFPmode", value: 11, isUnsigned: true)
!204 = !DIEnumerator(name: "CCFPUmode", value: 12, isUnsigned: true)
!205 = !DIEnumerator(name: "BImode", value: 13, isUnsigned: true)
!206 = !DIEnumerator(name: "QImode", value: 14, isUnsigned: true)
!207 = !DIEnumerator(name: "HImode", value: 15, isUnsigned: true)
!208 = !DIEnumerator(name: "SImode", value: 16, isUnsigned: true)
!209 = !DIEnumerator(name: "DImode", value: 17, isUnsigned: true)
!210 = !DIEnumerator(name: "TImode", value: 18, isUnsigned: true)
!211 = !DIEnumerator(name: "OImode", value: 19, isUnsigned: true)
!212 = !DIEnumerator(name: "QQmode", value: 20, isUnsigned: true)
!213 = !DIEnumerator(name: "HQmode", value: 21, isUnsigned: true)
!214 = !DIEnumerator(name: "SQmode", value: 22, isUnsigned: true)
!215 = !DIEnumerator(name: "DQmode", value: 23, isUnsigned: true)
!216 = !DIEnumerator(name: "TQmode", value: 24, isUnsigned: true)
!217 = !DIEnumerator(name: "UQQmode", value: 25, isUnsigned: true)
!218 = !DIEnumerator(name: "UHQmode", value: 26, isUnsigned: true)
!219 = !DIEnumerator(name: "USQmode", value: 27, isUnsigned: true)
!220 = !DIEnumerator(name: "UDQmode", value: 28, isUnsigned: true)
!221 = !DIEnumerator(name: "UTQmode", value: 29, isUnsigned: true)
!222 = !DIEnumerator(name: "HAmode", value: 30, isUnsigned: true)
!223 = !DIEnumerator(name: "SAmode", value: 31, isUnsigned: true)
!224 = !DIEnumerator(name: "DAmode", value: 32, isUnsigned: true)
!225 = !DIEnumerator(name: "TAmode", value: 33, isUnsigned: true)
!226 = !DIEnumerator(name: "UHAmode", value: 34, isUnsigned: true)
!227 = !DIEnumerator(name: "USAmode", value: 35, isUnsigned: true)
!228 = !DIEnumerator(name: "UDAmode", value: 36, isUnsigned: true)
!229 = !DIEnumerator(name: "UTAmode", value: 37, isUnsigned: true)
!230 = !DIEnumerator(name: "SFmode", value: 38, isUnsigned: true)
!231 = !DIEnumerator(name: "DFmode", value: 39, isUnsigned: true)
!232 = !DIEnumerator(name: "XFmode", value: 40, isUnsigned: true)
!233 = !DIEnumerator(name: "TFmode", value: 41, isUnsigned: true)
!234 = !DIEnumerator(name: "SDmode", value: 42, isUnsigned: true)
!235 = !DIEnumerator(name: "DDmode", value: 43, isUnsigned: true)
!236 = !DIEnumerator(name: "TDmode", value: 44, isUnsigned: true)
!237 = !DIEnumerator(name: "CQImode", value: 45, isUnsigned: true)
!238 = !DIEnumerator(name: "CHImode", value: 46, isUnsigned: true)
!239 = !DIEnumerator(name: "CSImode", value: 47, isUnsigned: true)
!240 = !DIEnumerator(name: "CDImode", value: 48, isUnsigned: true)
!241 = !DIEnumerator(name: "CTImode", value: 49, isUnsigned: true)
!242 = !DIEnumerator(name: "COImode", value: 50, isUnsigned: true)
!243 = !DIEnumerator(name: "SCmode", value: 51, isUnsigned: true)
!244 = !DIEnumerator(name: "DCmode", value: 52, isUnsigned: true)
!245 = !DIEnumerator(name: "XCmode", value: 53, isUnsigned: true)
!246 = !DIEnumerator(name: "TCmode", value: 54, isUnsigned: true)
!247 = !DIEnumerator(name: "V2QImode", value: 55, isUnsigned: true)
!248 = !DIEnumerator(name: "V4QImode", value: 56, isUnsigned: true)
!249 = !DIEnumerator(name: "V2HImode", value: 57, isUnsigned: true)
!250 = !DIEnumerator(name: "V1SImode", value: 58, isUnsigned: true)
!251 = !DIEnumerator(name: "V8QImode", value: 59, isUnsigned: true)
!252 = !DIEnumerator(name: "V4HImode", value: 60, isUnsigned: true)
!253 = !DIEnumerator(name: "V2SImode", value: 61, isUnsigned: true)
!254 = !DIEnumerator(name: "V1DImode", value: 62, isUnsigned: true)
!255 = !DIEnumerator(name: "V16QImode", value: 63, isUnsigned: true)
!256 = !DIEnumerator(name: "V8HImode", value: 64, isUnsigned: true)
!257 = !DIEnumerator(name: "V4SImode", value: 65, isUnsigned: true)
!258 = !DIEnumerator(name: "V2DImode", value: 66, isUnsigned: true)
!259 = !DIEnumerator(name: "V1TImode", value: 67, isUnsigned: true)
!260 = !DIEnumerator(name: "V32QImode", value: 68, isUnsigned: true)
!261 = !DIEnumerator(name: "V16HImode", value: 69, isUnsigned: true)
!262 = !DIEnumerator(name: "V8SImode", value: 70, isUnsigned: true)
!263 = !DIEnumerator(name: "V4DImode", value: 71, isUnsigned: true)
!264 = !DIEnumerator(name: "V2TImode", value: 72, isUnsigned: true)
!265 = !DIEnumerator(name: "V64QImode", value: 73, isUnsigned: true)
!266 = !DIEnumerator(name: "V32HImode", value: 74, isUnsigned: true)
!267 = !DIEnumerator(name: "V16SImode", value: 75, isUnsigned: true)
!268 = !DIEnumerator(name: "V8DImode", value: 76, isUnsigned: true)
!269 = !DIEnumerator(name: "V4TImode", value: 77, isUnsigned: true)
!270 = !DIEnumerator(name: "V2SFmode", value: 78, isUnsigned: true)
!271 = !DIEnumerator(name: "V4SFmode", value: 79, isUnsigned: true)
!272 = !DIEnumerator(name: "V2DFmode", value: 80, isUnsigned: true)
!273 = !DIEnumerator(name: "V8SFmode", value: 81, isUnsigned: true)
!274 = !DIEnumerator(name: "V4DFmode", value: 82, isUnsigned: true)
!275 = !DIEnumerator(name: "V2TFmode", value: 83, isUnsigned: true)
!276 = !DIEnumerator(name: "V16SFmode", value: 84, isUnsigned: true)
!277 = !DIEnumerator(name: "V8DFmode", value: 85, isUnsigned: true)
!278 = !DIEnumerator(name: "V4TFmode", value: 86, isUnsigned: true)
!279 = !DIEnumerator(name: "MAX_MACHINE_MODE", value: 87, isUnsigned: true)
!280 = !DIEnumerator(name: "MIN_MODE_RANDOM", value: 0, isUnsigned: true)
!281 = !DIEnumerator(name: "MAX_MODE_RANDOM", value: 1, isUnsigned: true)
!282 = !DIEnumerator(name: "MIN_MODE_CC", value: 2, isUnsigned: true)
!283 = !DIEnumerator(name: "MAX_MODE_CC", value: 12, isUnsigned: true)
!284 = !DIEnumerator(name: "MIN_MODE_INT", value: 14, isUnsigned: true)
!285 = !DIEnumerator(name: "MAX_MODE_INT", value: 19, isUnsigned: true)
!286 = !DIEnumerator(name: "MIN_MODE_PARTIAL_INT", value: 0, isUnsigned: true)
!287 = !DIEnumerator(name: "MAX_MODE_PARTIAL_INT", value: 0, isUnsigned: true)
!288 = !DIEnumerator(name: "MIN_MODE_FRACT", value: 20, isUnsigned: true)
!289 = !DIEnumerator(name: "MAX_MODE_FRACT", value: 24, isUnsigned: true)
!290 = !DIEnumerator(name: "MIN_MODE_UFRACT", value: 25, isUnsigned: true)
!291 = !DIEnumerator(name: "MAX_MODE_UFRACT", value: 29, isUnsigned: true)
!292 = !DIEnumerator(name: "MIN_MODE_ACCUM", value: 30, isUnsigned: true)
!293 = !DIEnumerator(name: "MAX_MODE_ACCUM", value: 33, isUnsigned: true)
!294 = !DIEnumerator(name: "MIN_MODE_UACCUM", value: 34, isUnsigned: true)
!295 = !DIEnumerator(name: "MAX_MODE_UACCUM", value: 37, isUnsigned: true)
!296 = !DIEnumerator(name: "MIN_MODE_FLOAT", value: 38, isUnsigned: true)
!297 = !DIEnumerator(name: "MAX_MODE_FLOAT", value: 41, isUnsigned: true)
!298 = !DIEnumerator(name: "MIN_MODE_DECIMAL_FLOAT", value: 42, isUnsigned: true)
!299 = !DIEnumerator(name: "MAX_MODE_DECIMAL_FLOAT", value: 44, isUnsigned: true)
!300 = !DIEnumerator(name: "MIN_MODE_COMPLEX_INT", value: 45, isUnsigned: true)
!301 = !DIEnumerator(name: "MAX_MODE_COMPLEX_INT", value: 50, isUnsigned: true)
!302 = !DIEnumerator(name: "MIN_MODE_COMPLEX_FLOAT", value: 51, isUnsigned: true)
!303 = !DIEnumerator(name: "MAX_MODE_COMPLEX_FLOAT", value: 54, isUnsigned: true)
!304 = !DIEnumerator(name: "MIN_MODE_VECTOR_INT", value: 55, isUnsigned: true)
!305 = !DIEnumerator(name: "MAX_MODE_VECTOR_INT", value: 77, isUnsigned: true)
!306 = !DIEnumerator(name: "MIN_MODE_VECTOR_FRACT", value: 0, isUnsigned: true)
!307 = !DIEnumerator(name: "MAX_MODE_VECTOR_FRACT", value: 0, isUnsigned: true)
!308 = !DIEnumerator(name: "MIN_MODE_VECTOR_UFRACT", value: 0, isUnsigned: true)
!309 = !DIEnumerator(name: "MAX_MODE_VECTOR_UFRACT", value: 0, isUnsigned: true)
!310 = !DIEnumerator(name: "MIN_MODE_VECTOR_ACCUM", value: 0, isUnsigned: true)
!311 = !DIEnumerator(name: "MAX_MODE_VECTOR_ACCUM", value: 0, isUnsigned: true)
!312 = !DIEnumerator(name: "MIN_MODE_VECTOR_UACCUM", value: 0, isUnsigned: true)
!313 = !DIEnumerator(name: "MAX_MODE_VECTOR_UACCUM", value: 0, isUnsigned: true)
!314 = !DIEnumerator(name: "MIN_MODE_VECTOR_FLOAT", value: 78, isUnsigned: true)
!315 = !DIEnumerator(name: "MAX_MODE_VECTOR_FLOAT", value: 86, isUnsigned: true)
!316 = !DIEnumerator(name: "NUM_MACHINE_MODES", value: 87, isUnsigned: true)
!317 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "profile_status_d", file: !318, line: 363, baseType: !7, size: 32, elements: !319)
!318 = !DIFile(filename: "./basic-block.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!319 = !{!320, !321, !322}
!320 = !DIEnumerator(name: "PROFILE_ABSENT", value: 0, isUnsigned: true)
!321 = !DIEnumerator(name: "PROFILE_GUESSED", value: 1, isUnsigned: true)
!322 = !DIEnumerator(name: "PROFILE_READ", value: 2, isUnsigned: true)
!323 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "dom_state", file: !318, line: 355, baseType: !7, size: 32, elements: !324)
!324 = !{!325, !326, !327}
!325 = !DIEnumerator(name: "DOM_NONE", value: 0, isUnsigned: true)
!326 = !DIEnumerator(name: "DOM_NO_FAST_QUERY", value: 1, isUnsigned: true)
!327 = !DIEnumerator(name: "DOM_OK", value: 2, isUnsigned: true)
!328 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "calling_abi", file: !329, line: 474, baseType: !7, size: 32, elements: !330)
!329 = !DIFile(filename: "./config/i386/i386.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!330 = !{!331, !332}
!331 = !DIEnumerator(name: "SYSV_ABI", value: 0, isUnsigned: true)
!332 = !DIEnumerator(name: "MS_ABI", value: 1, isUnsigned: true)
!333 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_code", file: !334, line: 280, baseType: !7, size: 32, elements: !335)
!334 = !DIFile(filename: "./tree.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!335 = !{!336, !337, !338, !339, !340, !341, !342, !343, !344, !345, !346, !347, !348, !349, !350, !351}
!336 = !DIEnumerator(name: "OMP_CLAUSE_ERROR", value: 0, isUnsigned: true)
!337 = !DIEnumerator(name: "OMP_CLAUSE_PRIVATE", value: 1, isUnsigned: true)
!338 = !DIEnumerator(name: "OMP_CLAUSE_SHARED", value: 2, isUnsigned: true)
!339 = !DIEnumerator(name: "OMP_CLAUSE_FIRSTPRIVATE", value: 3, isUnsigned: true)
!340 = !DIEnumerator(name: "OMP_CLAUSE_LASTPRIVATE", value: 4, isUnsigned: true)
!341 = !DIEnumerator(name: "OMP_CLAUSE_REDUCTION", value: 5, isUnsigned: true)
!342 = !DIEnumerator(name: "OMP_CLAUSE_COPYIN", value: 6, isUnsigned: true)
!343 = !DIEnumerator(name: "OMP_CLAUSE_COPYPRIVATE", value: 7, isUnsigned: true)
!344 = !DIEnumerator(name: "OMP_CLAUSE_IF", value: 8, isUnsigned: true)
!345 = !DIEnumerator(name: "OMP_CLAUSE_NUM_THREADS", value: 9, isUnsigned: true)
!346 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE", value: 10, isUnsigned: true)
!347 = !DIEnumerator(name: "OMP_CLAUSE_NOWAIT", value: 11, isUnsigned: true)
!348 = !DIEnumerator(name: "OMP_CLAUSE_ORDERED", value: 12, isUnsigned: true)
!349 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT", value: 13, isUnsigned: true)
!350 = !DIEnumerator(name: "OMP_CLAUSE_COLLAPSE", value: 14, isUnsigned: true)
!351 = !DIEnumerator(name: "OMP_CLAUSE_UNTIED", value: 15, isUnsigned: true)
!352 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_default_kind", file: !334, line: 1817, baseType: !7, size: 32, elements: !353)
!353 = !{!354, !355, !356, !357, !358}
!354 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_UNSPECIFIED", value: 0, isUnsigned: true)
!355 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_SHARED", value: 1, isUnsigned: true)
!356 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_NONE", value: 2, isUnsigned: true)
!357 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_PRIVATE", value: 3, isUnsigned: true)
!358 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_FIRSTPRIVATE", value: 4, isUnsigned: true)
!359 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_schedule_kind", file: !334, line: 1805, baseType: !7, size: 32, elements: !360)
!360 = !{!361, !362, !363, !364, !365}
!361 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_STATIC", value: 0, isUnsigned: true)
!362 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_DYNAMIC", value: 1, isUnsigned: true)
!363 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_GUIDED", value: 2, isUnsigned: true)
!364 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_AUTO", value: 3, isUnsigned: true)
!365 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_RUNTIME", value: 4, isUnsigned: true)
!366 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_code", file: !334, line: 39, baseType: !7, size: 32, elements: !367)
!367 = !{!368, !369, !370, !371, !372, !373, !374, !375, !376, !377, !378, !379, !380, !381, !382, !383, !384, !385, !386, !387, !388, !389, !390, !391, !392, !393, !394, !395, !396, !397, !398, !399, !400, !401, !402, !403, !404, !405, !406, !407, !408, !409, !410, !411, !412, !413, !414, !415, !416, !417, !418, !419, !420, !421, !422, !423, !424, !425, !426, !427, !428, !429, !430, !431, !432, !433, !434, !435, !436, !437, !438, !439, !440, !441, !442, !443, !444, !445, !446, !447, !448, !449, !450, !451, !452, !453, !454, !455, !456, !457, !458, !459, !460, !461, !462, !463, !464, !465, !466, !467, !468, !469, !470, !471, !472, !473, !474, !475, !476, !477, !478, !479, !480, !481, !482, !483, !484, !485, !486, !487, !488, !489, !490, !491, !492, !493, !494, !495, !496, !497, !498, !499, !500, !501, !502, !503, !504, !505, !506, !507, !508, !509, !510, !511, !512, !513, !514, !515, !516, !517, !518, !519, !520, !521, !522, !523, !524, !525, !526, !527, !528, !529, !530, !531, !532, !533, !534, !535, !536, !537, !538, !539, !540, !541, !542, !543, !544, !545, !546, !547, !548, !549, !550, !551, !552, !553, !554, !555, !556, !557, !558, !559}
!368 = !DIEnumerator(name: "ERROR_MARK", value: 0, isUnsigned: true)
!369 = !DIEnumerator(name: "IDENTIFIER_NODE", value: 1, isUnsigned: true)
!370 = !DIEnumerator(name: "TREE_LIST", value: 2, isUnsigned: true)
!371 = !DIEnumerator(name: "TREE_VEC", value: 3, isUnsigned: true)
!372 = !DIEnumerator(name: "BLOCK", value: 4, isUnsigned: true)
!373 = !DIEnumerator(name: "OFFSET_TYPE", value: 5, isUnsigned: true)
!374 = !DIEnumerator(name: "ENUMERAL_TYPE", value: 6, isUnsigned: true)
!375 = !DIEnumerator(name: "BOOLEAN_TYPE", value: 7, isUnsigned: true)
!376 = !DIEnumerator(name: "INTEGER_TYPE", value: 8, isUnsigned: true)
!377 = !DIEnumerator(name: "REAL_TYPE", value: 9, isUnsigned: true)
!378 = !DIEnumerator(name: "POINTER_TYPE", value: 10, isUnsigned: true)
!379 = !DIEnumerator(name: "FIXED_POINT_TYPE", value: 11, isUnsigned: true)
!380 = !DIEnumerator(name: "REFERENCE_TYPE", value: 12, isUnsigned: true)
!381 = !DIEnumerator(name: "COMPLEX_TYPE", value: 13, isUnsigned: true)
!382 = !DIEnumerator(name: "VECTOR_TYPE", value: 14, isUnsigned: true)
!383 = !DIEnumerator(name: "ARRAY_TYPE", value: 15, isUnsigned: true)
!384 = !DIEnumerator(name: "RECORD_TYPE", value: 16, isUnsigned: true)
!385 = !DIEnumerator(name: "UNION_TYPE", value: 17, isUnsigned: true)
!386 = !DIEnumerator(name: "QUAL_UNION_TYPE", value: 18, isUnsigned: true)
!387 = !DIEnumerator(name: "VOID_TYPE", value: 19, isUnsigned: true)
!388 = !DIEnumerator(name: "FUNCTION_TYPE", value: 20, isUnsigned: true)
!389 = !DIEnumerator(name: "METHOD_TYPE", value: 21, isUnsigned: true)
!390 = !DIEnumerator(name: "LANG_TYPE", value: 22, isUnsigned: true)
!391 = !DIEnumerator(name: "INTEGER_CST", value: 23, isUnsigned: true)
!392 = !DIEnumerator(name: "REAL_CST", value: 24, isUnsigned: true)
!393 = !DIEnumerator(name: "FIXED_CST", value: 25, isUnsigned: true)
!394 = !DIEnumerator(name: "COMPLEX_CST", value: 26, isUnsigned: true)
!395 = !DIEnumerator(name: "VECTOR_CST", value: 27, isUnsigned: true)
!396 = !DIEnumerator(name: "STRING_CST", value: 28, isUnsigned: true)
!397 = !DIEnumerator(name: "FUNCTION_DECL", value: 29, isUnsigned: true)
!398 = !DIEnumerator(name: "LABEL_DECL", value: 30, isUnsigned: true)
!399 = !DIEnumerator(name: "FIELD_DECL", value: 31, isUnsigned: true)
!400 = !DIEnumerator(name: "VAR_DECL", value: 32, isUnsigned: true)
!401 = !DIEnumerator(name: "CONST_DECL", value: 33, isUnsigned: true)
!402 = !DIEnumerator(name: "PARM_DECL", value: 34, isUnsigned: true)
!403 = !DIEnumerator(name: "TYPE_DECL", value: 35, isUnsigned: true)
!404 = !DIEnumerator(name: "RESULT_DECL", value: 36, isUnsigned: true)
!405 = !DIEnumerator(name: "DEBUG_EXPR_DECL", value: 37, isUnsigned: true)
!406 = !DIEnumerator(name: "NAMESPACE_DECL", value: 38, isUnsigned: true)
!407 = !DIEnumerator(name: "IMPORTED_DECL", value: 39, isUnsigned: true)
!408 = !DIEnumerator(name: "TRANSLATION_UNIT_DECL", value: 40, isUnsigned: true)
!409 = !DIEnumerator(name: "COMPONENT_REF", value: 41, isUnsigned: true)
!410 = !DIEnumerator(name: "BIT_FIELD_REF", value: 42, isUnsigned: true)
!411 = !DIEnumerator(name: "REALPART_EXPR", value: 43, isUnsigned: true)
!412 = !DIEnumerator(name: "IMAGPART_EXPR", value: 44, isUnsigned: true)
!413 = !DIEnumerator(name: "ARRAY_REF", value: 45, isUnsigned: true)
!414 = !DIEnumerator(name: "ARRAY_RANGE_REF", value: 46, isUnsigned: true)
!415 = !DIEnumerator(name: "INDIRECT_REF", value: 47, isUnsigned: true)
!416 = !DIEnumerator(name: "ALIGN_INDIRECT_REF", value: 48, isUnsigned: true)
!417 = !DIEnumerator(name: "MISALIGNED_INDIRECT_REF", value: 49, isUnsigned: true)
!418 = !DIEnumerator(name: "OBJ_TYPE_REF", value: 50, isUnsigned: true)
!419 = !DIEnumerator(name: "CONSTRUCTOR", value: 51, isUnsigned: true)
!420 = !DIEnumerator(name: "COMPOUND_EXPR", value: 52, isUnsigned: true)
!421 = !DIEnumerator(name: "MODIFY_EXPR", value: 53, isUnsigned: true)
!422 = !DIEnumerator(name: "INIT_EXPR", value: 54, isUnsigned: true)
!423 = !DIEnumerator(name: "TARGET_EXPR", value: 55, isUnsigned: true)
!424 = !DIEnumerator(name: "COND_EXPR", value: 56, isUnsigned: true)
!425 = !DIEnumerator(name: "VEC_COND_EXPR", value: 57, isUnsigned: true)
!426 = !DIEnumerator(name: "BIND_EXPR", value: 58, isUnsigned: true)
!427 = !DIEnumerator(name: "CALL_EXPR", value: 59, isUnsigned: true)
!428 = !DIEnumerator(name: "WITH_CLEANUP_EXPR", value: 60, isUnsigned: true)
!429 = !DIEnumerator(name: "CLEANUP_POINT_EXPR", value: 61, isUnsigned: true)
!430 = !DIEnumerator(name: "PLACEHOLDER_EXPR", value: 62, isUnsigned: true)
!431 = !DIEnumerator(name: "PLUS_EXPR", value: 63, isUnsigned: true)
!432 = !DIEnumerator(name: "MINUS_EXPR", value: 64, isUnsigned: true)
!433 = !DIEnumerator(name: "MULT_EXPR", value: 65, isUnsigned: true)
!434 = !DIEnumerator(name: "POINTER_PLUS_EXPR", value: 66, isUnsigned: true)
!435 = !DIEnumerator(name: "TRUNC_DIV_EXPR", value: 67, isUnsigned: true)
!436 = !DIEnumerator(name: "CEIL_DIV_EXPR", value: 68, isUnsigned: true)
!437 = !DIEnumerator(name: "FLOOR_DIV_EXPR", value: 69, isUnsigned: true)
!438 = !DIEnumerator(name: "ROUND_DIV_EXPR", value: 70, isUnsigned: true)
!439 = !DIEnumerator(name: "TRUNC_MOD_EXPR", value: 71, isUnsigned: true)
!440 = !DIEnumerator(name: "CEIL_MOD_EXPR", value: 72, isUnsigned: true)
!441 = !DIEnumerator(name: "FLOOR_MOD_EXPR", value: 73, isUnsigned: true)
!442 = !DIEnumerator(name: "ROUND_MOD_EXPR", value: 74, isUnsigned: true)
!443 = !DIEnumerator(name: "RDIV_EXPR", value: 75, isUnsigned: true)
!444 = !DIEnumerator(name: "EXACT_DIV_EXPR", value: 76, isUnsigned: true)
!445 = !DIEnumerator(name: "FIX_TRUNC_EXPR", value: 77, isUnsigned: true)
!446 = !DIEnumerator(name: "FLOAT_EXPR", value: 78, isUnsigned: true)
!447 = !DIEnumerator(name: "NEGATE_EXPR", value: 79, isUnsigned: true)
!448 = !DIEnumerator(name: "MIN_EXPR", value: 80, isUnsigned: true)
!449 = !DIEnumerator(name: "MAX_EXPR", value: 81, isUnsigned: true)
!450 = !DIEnumerator(name: "ABS_EXPR", value: 82, isUnsigned: true)
!451 = !DIEnumerator(name: "LSHIFT_EXPR", value: 83, isUnsigned: true)
!452 = !DIEnumerator(name: "RSHIFT_EXPR", value: 84, isUnsigned: true)
!453 = !DIEnumerator(name: "LROTATE_EXPR", value: 85, isUnsigned: true)
!454 = !DIEnumerator(name: "RROTATE_EXPR", value: 86, isUnsigned: true)
!455 = !DIEnumerator(name: "BIT_IOR_EXPR", value: 87, isUnsigned: true)
!456 = !DIEnumerator(name: "BIT_XOR_EXPR", value: 88, isUnsigned: true)
!457 = !DIEnumerator(name: "BIT_AND_EXPR", value: 89, isUnsigned: true)
!458 = !DIEnumerator(name: "BIT_NOT_EXPR", value: 90, isUnsigned: true)
!459 = !DIEnumerator(name: "TRUTH_ANDIF_EXPR", value: 91, isUnsigned: true)
!460 = !DIEnumerator(name: "TRUTH_ORIF_EXPR", value: 92, isUnsigned: true)
!461 = !DIEnumerator(name: "TRUTH_AND_EXPR", value: 93, isUnsigned: true)
!462 = !DIEnumerator(name: "TRUTH_OR_EXPR", value: 94, isUnsigned: true)
!463 = !DIEnumerator(name: "TRUTH_XOR_EXPR", value: 95, isUnsigned: true)
!464 = !DIEnumerator(name: "TRUTH_NOT_EXPR", value: 96, isUnsigned: true)
!465 = !DIEnumerator(name: "LT_EXPR", value: 97, isUnsigned: true)
!466 = !DIEnumerator(name: "LE_EXPR", value: 98, isUnsigned: true)
!467 = !DIEnumerator(name: "GT_EXPR", value: 99, isUnsigned: true)
!468 = !DIEnumerator(name: "GE_EXPR", value: 100, isUnsigned: true)
!469 = !DIEnumerator(name: "EQ_EXPR", value: 101, isUnsigned: true)
!470 = !DIEnumerator(name: "NE_EXPR", value: 102, isUnsigned: true)
!471 = !DIEnumerator(name: "UNORDERED_EXPR", value: 103, isUnsigned: true)
!472 = !DIEnumerator(name: "ORDERED_EXPR", value: 104, isUnsigned: true)
!473 = !DIEnumerator(name: "UNLT_EXPR", value: 105, isUnsigned: true)
!474 = !DIEnumerator(name: "UNLE_EXPR", value: 106, isUnsigned: true)
!475 = !DIEnumerator(name: "UNGT_EXPR", value: 107, isUnsigned: true)
!476 = !DIEnumerator(name: "UNGE_EXPR", value: 108, isUnsigned: true)
!477 = !DIEnumerator(name: "UNEQ_EXPR", value: 109, isUnsigned: true)
!478 = !DIEnumerator(name: "LTGT_EXPR", value: 110, isUnsigned: true)
!479 = !DIEnumerator(name: "RANGE_EXPR", value: 111, isUnsigned: true)
!480 = !DIEnumerator(name: "PAREN_EXPR", value: 112, isUnsigned: true)
!481 = !DIEnumerator(name: "CONVERT_EXPR", value: 113, isUnsigned: true)
!482 = !DIEnumerator(name: "ADDR_SPACE_CONVERT_EXPR", value: 114, isUnsigned: true)
!483 = !DIEnumerator(name: "FIXED_CONVERT_EXPR", value: 115, isUnsigned: true)
!484 = !DIEnumerator(name: "NOP_EXPR", value: 116, isUnsigned: true)
!485 = !DIEnumerator(name: "NON_LVALUE_EXPR", value: 117, isUnsigned: true)
!486 = !DIEnumerator(name: "VIEW_CONVERT_EXPR", value: 118, isUnsigned: true)
!487 = !DIEnumerator(name: "COMPOUND_LITERAL_EXPR", value: 119, isUnsigned: true)
!488 = !DIEnumerator(name: "SAVE_EXPR", value: 120, isUnsigned: true)
!489 = !DIEnumerator(name: "ADDR_EXPR", value: 121, isUnsigned: true)
!490 = !DIEnumerator(name: "FDESC_EXPR", value: 122, isUnsigned: true)
!491 = !DIEnumerator(name: "COMPLEX_EXPR", value: 123, isUnsigned: true)
!492 = !DIEnumerator(name: "CONJ_EXPR", value: 124, isUnsigned: true)
!493 = !DIEnumerator(name: "PREDECREMENT_EXPR", value: 125, isUnsigned: true)
!494 = !DIEnumerator(name: "PREINCREMENT_EXPR", value: 126, isUnsigned: true)
!495 = !DIEnumerator(name: "POSTDECREMENT_EXPR", value: 127, isUnsigned: true)
!496 = !DIEnumerator(name: "POSTINCREMENT_EXPR", value: 128, isUnsigned: true)
!497 = !DIEnumerator(name: "VA_ARG_EXPR", value: 129, isUnsigned: true)
!498 = !DIEnumerator(name: "TRY_CATCH_EXPR", value: 130, isUnsigned: true)
!499 = !DIEnumerator(name: "TRY_FINALLY_EXPR", value: 131, isUnsigned: true)
!500 = !DIEnumerator(name: "DECL_EXPR", value: 132, isUnsigned: true)
!501 = !DIEnumerator(name: "LABEL_EXPR", value: 133, isUnsigned: true)
!502 = !DIEnumerator(name: "GOTO_EXPR", value: 134, isUnsigned: true)
!503 = !DIEnumerator(name: "RETURN_EXPR", value: 135, isUnsigned: true)
!504 = !DIEnumerator(name: "EXIT_EXPR", value: 136, isUnsigned: true)
!505 = !DIEnumerator(name: "LOOP_EXPR", value: 137, isUnsigned: true)
!506 = !DIEnumerator(name: "SWITCH_EXPR", value: 138, isUnsigned: true)
!507 = !DIEnumerator(name: "CASE_LABEL_EXPR", value: 139, isUnsigned: true)
!508 = !DIEnumerator(name: "ASM_EXPR", value: 140, isUnsigned: true)
!509 = !DIEnumerator(name: "SSA_NAME", value: 141, isUnsigned: true)
!510 = !DIEnumerator(name: "CATCH_EXPR", value: 142, isUnsigned: true)
!511 = !DIEnumerator(name: "EH_FILTER_EXPR", value: 143, isUnsigned: true)
!512 = !DIEnumerator(name: "SCEV_KNOWN", value: 144, isUnsigned: true)
!513 = !DIEnumerator(name: "SCEV_NOT_KNOWN", value: 145, isUnsigned: true)
!514 = !DIEnumerator(name: "POLYNOMIAL_CHREC", value: 146, isUnsigned: true)
!515 = !DIEnumerator(name: "STATEMENT_LIST", value: 147, isUnsigned: true)
!516 = !DIEnumerator(name: "ASSERT_EXPR", value: 148, isUnsigned: true)
!517 = !DIEnumerator(name: "TREE_BINFO", value: 149, isUnsigned: true)
!518 = !DIEnumerator(name: "WITH_SIZE_EXPR", value: 150, isUnsigned: true)
!519 = !DIEnumerator(name: "REALIGN_LOAD_EXPR", value: 151, isUnsigned: true)
!520 = !DIEnumerator(name: "TARGET_MEM_REF", value: 152, isUnsigned: true)
!521 = !DIEnumerator(name: "OMP_PARALLEL", value: 153, isUnsigned: true)
!522 = !DIEnumerator(name: "OMP_TASK", value: 154, isUnsigned: true)
!523 = !DIEnumerator(name: "OMP_FOR", value: 155, isUnsigned: true)
!524 = !DIEnumerator(name: "OMP_SECTIONS", value: 156, isUnsigned: true)
!525 = !DIEnumerator(name: "OMP_SINGLE", value: 157, isUnsigned: true)
!526 = !DIEnumerator(name: "OMP_SECTION", value: 158, isUnsigned: true)
!527 = !DIEnumerator(name: "OMP_MASTER", value: 159, isUnsigned: true)
!528 = !DIEnumerator(name: "OMP_ORDERED", value: 160, isUnsigned: true)
!529 = !DIEnumerator(name: "OMP_CRITICAL", value: 161, isUnsigned: true)
!530 = !DIEnumerator(name: "OMP_ATOMIC", value: 162, isUnsigned: true)
!531 = !DIEnumerator(name: "OMP_CLAUSE", value: 163, isUnsigned: true)
!532 = !DIEnumerator(name: "REDUC_MAX_EXPR", value: 164, isUnsigned: true)
!533 = !DIEnumerator(name: "REDUC_MIN_EXPR", value: 165, isUnsigned: true)
!534 = !DIEnumerator(name: "REDUC_PLUS_EXPR", value: 166, isUnsigned: true)
!535 = !DIEnumerator(name: "DOT_PROD_EXPR", value: 167, isUnsigned: true)
!536 = !DIEnumerator(name: "WIDEN_SUM_EXPR", value: 168, isUnsigned: true)
!537 = !DIEnumerator(name: "WIDEN_MULT_EXPR", value: 169, isUnsigned: true)
!538 = !DIEnumerator(name: "VEC_LSHIFT_EXPR", value: 170, isUnsigned: true)
!539 = !DIEnumerator(name: "VEC_RSHIFT_EXPR", value: 171, isUnsigned: true)
!540 = !DIEnumerator(name: "VEC_WIDEN_MULT_HI_EXPR", value: 172, isUnsigned: true)
!541 = !DIEnumerator(name: "VEC_WIDEN_MULT_LO_EXPR", value: 173, isUnsigned: true)
!542 = !DIEnumerator(name: "VEC_UNPACK_HI_EXPR", value: 174, isUnsigned: true)
!543 = !DIEnumerator(name: "VEC_UNPACK_LO_EXPR", value: 175, isUnsigned: true)
!544 = !DIEnumerator(name: "VEC_UNPACK_FLOAT_HI_EXPR", value: 176, isUnsigned: true)
!545 = !DIEnumerator(name: "VEC_UNPACK_FLOAT_LO_EXPR", value: 177, isUnsigned: true)
!546 = !DIEnumerator(name: "VEC_PACK_TRUNC_EXPR", value: 178, isUnsigned: true)
!547 = !DIEnumerator(name: "VEC_PACK_SAT_EXPR", value: 179, isUnsigned: true)
!548 = !DIEnumerator(name: "VEC_PACK_FIX_TRUNC_EXPR", value: 180, isUnsigned: true)
!549 = !DIEnumerator(name: "VEC_EXTRACT_EVEN_EXPR", value: 181, isUnsigned: true)
!550 = !DIEnumerator(name: "VEC_EXTRACT_ODD_EXPR", value: 182, isUnsigned: true)
!551 = !DIEnumerator(name: "VEC_INTERLEAVE_HIGH_EXPR", value: 183, isUnsigned: true)
!552 = !DIEnumerator(name: "VEC_INTERLEAVE_LOW_EXPR", value: 184, isUnsigned: true)
!553 = !DIEnumerator(name: "PREDICT_EXPR", value: 185, isUnsigned: true)
!554 = !DIEnumerator(name: "OPTIMIZATION_NODE", value: 186, isUnsigned: true)
!555 = !DIEnumerator(name: "TARGET_OPTION_NODE", value: 187, isUnsigned: true)
!556 = !DIEnumerator(name: "LAST_AND_UNUSED_TREE_CODE", value: 188, isUnsigned: true)
!557 = !DIEnumerator(name: "C_MAYBE_CONST_EXPR", value: 189, isUnsigned: true)
!558 = !DIEnumerator(name: "EXCESS_PRECISION_EXPR", value: 190, isUnsigned: true)
!559 = !DIEnumerator(name: "MAX_TREE_CODES", value: 191, isUnsigned: true)
!560 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "cdi_direction", file: !318, line: 912, baseType: !7, size: 32, elements: !561)
!561 = !{!562, !563}
!562 = !DIEnumerator(name: "CDI_DOMINATORS", value: 1, isUnsigned: true)
!563 = !DIEnumerator(name: "CDI_POST_DOMINATORS", value: 2, isUnsigned: true)
!564 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "built_in_class", file: !334, line: 205, baseType: !7, size: 32, elements: !565)
!565 = !{!566, !567, !568, !569}
!566 = !DIEnumerator(name: "NOT_BUILT_IN", value: 0, isUnsigned: true)
!567 = !DIEnumerator(name: "BUILT_IN_FRONTEND", value: 1, isUnsigned: true)
!568 = !DIEnumerator(name: "BUILT_IN_MD", value: 2, isUnsigned: true)
!569 = !DIEnumerator(name: "BUILT_IN_NORMAL", value: 3, isUnsigned: true)
!570 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "built_in_function", file: !334, line: 220, baseType: !7, size: 32, elements: !571)
!571 = !{!572, !573, !574, !575, !576, !577, !578, !579, !580, !581, !582, !583, !584, !585, !586, !587, !588, !589, !590, !591, !592, !593, !594, !595, !596, !597, !598, !599, !600, !601, !602, !603, !604, !605, !606, !607, !608, !609, !610, !611, !612, !613, !614, !615, !616, !617, !618, !619, !620, !621, !622, !623, !624, !625, !626, !627, !628, !629, !630, !631, !632, !633, !634, !635, !636, !637, !638, !639, !640, !641, !642, !643, !644, !645, !646, !647, !648, !649, !650, !651, !652, !653, !654, !655, !656, !657, !658, !659, !660, !661, !662, !663, !664, !665, !666, !667, !668, !669, !670, !671, !672, !673, !674, !675, !676, !677, !678, !679, !680, !681, !682, !683, !684, !685, !686, !687, !688, !689, !690, !691, !692, !693, !694, !695, !696, !697, !698, !699, !700, !701, !702, !703, !704, !705, !706, !707, !708, !709, !710, !711, !712, !713, !714, !715, !716, !717, !718, !719, !720, !721, !722, !723, !724, !725, !726, !727, !728, !729, !730, !731, !732, !733, !734, !735, !736, !737, !738, !739, !740, !741, !742, !743, !744, !745, !746, !747, !748, !749, !750, !751, !752, !753, !754, !755, !756, !757, !758, !759, !760, !761, !762, !763, !764, !765, !766, !767, !768, !769, !770, !771, !772, !773, !774, !775, !776, !777, !778, !779, !780, !781, !782, !783, !784, !785, !786, !787, !788, !789, !790, !791, !792, !793, !794, !795, !796, !797, !798, !799, !800, !801, !802, !803, !804, !805, !806, !807, !808, !809, !810, !811, !812, !813, !814, !815, !816, !817, !818, !819, !820, !821, !822, !823, !824, !825, !826, !827, !828, !829, !830, !831, !832, !833, !834, !835, !836, !837, !838, !839, !840, !841, !842, !843, !844, !845, !846, !847, !848, !849, !850, !851, !852, !853, !854, !855, !856, !857, !858, !859, !860, !861, !862, !863, !864, !865, !866, !867, !868, !869, !870, !871, !872, !873, !874, !875, !876, !877, !878, !879, !880, !881, !882, !883, !884, !885, !886, !887, !888, !889, !890, !891, !892, !893, !894, !895, !896, !897, !898, !899, !900, !901, !902, !903, !904, !905, !906, !907, !908, !909, !910, !911, !912, !913, !914, !915, !916, !917, !918, !919, !920, !921, !922, !923, !924, !925, !926, !927, !928, !929, !930, !931, !932, !933, !934, !935, !936, !937, !938, !939, !940, !941, !942, !943, !944, !945, !946, !947, !948, !949, !950, !951, !952, !953, !954, !955, !956, !957, !958, !959, !960, !961, !962, !963, !964, !965, !966, !967, !968, !969, !970, !971, !972, !973, !974, !975, !976, !977, !978, !979, !980, !981, !982, !983, !984, !985, !986, !987, !988, !989, !990, !991, !992, !993, !994, !995, !996, !997, !998, !999, !1000, !1001, !1002, !1003, !1004, !1005, !1006, !1007, !1008, !1009, !1010, !1011, !1012, !1013, !1014, !1015, !1016, !1017, !1018, !1019, !1020, !1021, !1022, !1023, !1024, !1025, !1026, !1027, !1028, !1029, !1030, !1031, !1032, !1033, !1034, !1035, !1036, !1037, !1038, !1039, !1040, !1041, !1042, !1043, !1044, !1045, !1046, !1047, !1048, !1049, !1050, !1051, !1052, !1053, !1054, !1055, !1056, !1057, !1058, !1059, !1060, !1061, !1062, !1063, !1064, !1065, !1066, !1067, !1068, !1069, !1070, !1071, !1072, !1073, !1074, !1075, !1076, !1077, !1078, !1079, !1080, !1081, !1082, !1083, !1084, !1085, !1086, !1087, !1088, !1089, !1090, !1091, !1092, !1093, !1094, !1095, !1096, !1097, !1098, !1099, !1100, !1101, !1102, !1103, !1104, !1105, !1106, !1107, !1108, !1109, !1110, !1111, !1112, !1113, !1114, !1115, !1116, !1117, !1118, !1119, !1120, !1121, !1122, !1123, !1124, !1125, !1126, !1127, !1128, !1129, !1130, !1131, !1132, !1133, !1134, !1135, !1136, !1137, !1138, !1139, !1140, !1141, !1142, !1143, !1144, !1145, !1146, !1147, !1148, !1149, !1150, !1151, !1152, !1153, !1154, !1155, !1156, !1157, !1158, !1159, !1160, !1161, !1162, !1163, !1164, !1165, !1166, !1167, !1168, !1169, !1170, !1171, !1172, !1173, !1174, !1175, !1176, !1177, !1178, !1179, !1180, !1181, !1182, !1183, !1184, !1185, !1186, !1187, !1188, !1189, !1190, !1191, !1192, !1193, !1194, !1195, !1196, !1197, !1198, !1199, !1200, !1201, !1202, !1203, !1204, !1205, !1206, !1207, !1208, !1209, !1210, !1211, !1212, !1213, !1214, !1215, !1216, !1217, !1218, !1219, !1220, !1221, !1222, !1223, !1224, !1225, !1226, !1227, !1228, !1229, !1230, !1231, !1232, !1233, !1234, !1235, !1236, !1237, !1238, !1239, !1240, !1241, !1242, !1243, !1244, !1245, !1246, !1247, !1248, !1249, !1250, !1251, !1252, !1253, !1254, !1255, !1256, !1257, !1258, !1259, !1260, !1261, !1262, !1263, !1264, !1265, !1266, !1267, !1268, !1269, !1270, !1271, !1272, !1273, !1274, !1275, !1276, !1277, !1278, !1279, !1280, !1281, !1282, !1283, !1284, !1285, !1286, !1287, !1288, !1289}
!572 = !DIEnumerator(name: "BUILT_IN_ACOS", value: 0, isUnsigned: true)
!573 = !DIEnumerator(name: "BUILT_IN_ACOSF", value: 1, isUnsigned: true)
!574 = !DIEnumerator(name: "BUILT_IN_ACOSH", value: 2, isUnsigned: true)
!575 = !DIEnumerator(name: "BUILT_IN_ACOSHF", value: 3, isUnsigned: true)
!576 = !DIEnumerator(name: "BUILT_IN_ACOSHL", value: 4, isUnsigned: true)
!577 = !DIEnumerator(name: "BUILT_IN_ACOSL", value: 5, isUnsigned: true)
!578 = !DIEnumerator(name: "BUILT_IN_ASIN", value: 6, isUnsigned: true)
!579 = !DIEnumerator(name: "BUILT_IN_ASINF", value: 7, isUnsigned: true)
!580 = !DIEnumerator(name: "BUILT_IN_ASINH", value: 8, isUnsigned: true)
!581 = !DIEnumerator(name: "BUILT_IN_ASINHF", value: 9, isUnsigned: true)
!582 = !DIEnumerator(name: "BUILT_IN_ASINHL", value: 10, isUnsigned: true)
!583 = !DIEnumerator(name: "BUILT_IN_ASINL", value: 11, isUnsigned: true)
!584 = !DIEnumerator(name: "BUILT_IN_ATAN", value: 12, isUnsigned: true)
!585 = !DIEnumerator(name: "BUILT_IN_ATAN2", value: 13, isUnsigned: true)
!586 = !DIEnumerator(name: "BUILT_IN_ATAN2F", value: 14, isUnsigned: true)
!587 = !DIEnumerator(name: "BUILT_IN_ATAN2L", value: 15, isUnsigned: true)
!588 = !DIEnumerator(name: "BUILT_IN_ATANF", value: 16, isUnsigned: true)
!589 = !DIEnumerator(name: "BUILT_IN_ATANH", value: 17, isUnsigned: true)
!590 = !DIEnumerator(name: "BUILT_IN_ATANHF", value: 18, isUnsigned: true)
!591 = !DIEnumerator(name: "BUILT_IN_ATANHL", value: 19, isUnsigned: true)
!592 = !DIEnumerator(name: "BUILT_IN_ATANL", value: 20, isUnsigned: true)
!593 = !DIEnumerator(name: "BUILT_IN_CBRT", value: 21, isUnsigned: true)
!594 = !DIEnumerator(name: "BUILT_IN_CBRTF", value: 22, isUnsigned: true)
!595 = !DIEnumerator(name: "BUILT_IN_CBRTL", value: 23, isUnsigned: true)
!596 = !DIEnumerator(name: "BUILT_IN_CEIL", value: 24, isUnsigned: true)
!597 = !DIEnumerator(name: "BUILT_IN_CEILF", value: 25, isUnsigned: true)
!598 = !DIEnumerator(name: "BUILT_IN_CEILL", value: 26, isUnsigned: true)
!599 = !DIEnumerator(name: "BUILT_IN_COPYSIGN", value: 27, isUnsigned: true)
!600 = !DIEnumerator(name: "BUILT_IN_COPYSIGNF", value: 28, isUnsigned: true)
!601 = !DIEnumerator(name: "BUILT_IN_COPYSIGNL", value: 29, isUnsigned: true)
!602 = !DIEnumerator(name: "BUILT_IN_COS", value: 30, isUnsigned: true)
!603 = !DIEnumerator(name: "BUILT_IN_COSF", value: 31, isUnsigned: true)
!604 = !DIEnumerator(name: "BUILT_IN_COSH", value: 32, isUnsigned: true)
!605 = !DIEnumerator(name: "BUILT_IN_COSHF", value: 33, isUnsigned: true)
!606 = !DIEnumerator(name: "BUILT_IN_COSHL", value: 34, isUnsigned: true)
!607 = !DIEnumerator(name: "BUILT_IN_COSL", value: 35, isUnsigned: true)
!608 = !DIEnumerator(name: "BUILT_IN_DREM", value: 36, isUnsigned: true)
!609 = !DIEnumerator(name: "BUILT_IN_DREMF", value: 37, isUnsigned: true)
!610 = !DIEnumerator(name: "BUILT_IN_DREML", value: 38, isUnsigned: true)
!611 = !DIEnumerator(name: "BUILT_IN_ERF", value: 39, isUnsigned: true)
!612 = !DIEnumerator(name: "BUILT_IN_ERFC", value: 40, isUnsigned: true)
!613 = !DIEnumerator(name: "BUILT_IN_ERFCF", value: 41, isUnsigned: true)
!614 = !DIEnumerator(name: "BUILT_IN_ERFCL", value: 42, isUnsigned: true)
!615 = !DIEnumerator(name: "BUILT_IN_ERFF", value: 43, isUnsigned: true)
!616 = !DIEnumerator(name: "BUILT_IN_ERFL", value: 44, isUnsigned: true)
!617 = !DIEnumerator(name: "BUILT_IN_EXP", value: 45, isUnsigned: true)
!618 = !DIEnumerator(name: "BUILT_IN_EXP10", value: 46, isUnsigned: true)
!619 = !DIEnumerator(name: "BUILT_IN_EXP10F", value: 47, isUnsigned: true)
!620 = !DIEnumerator(name: "BUILT_IN_EXP10L", value: 48, isUnsigned: true)
!621 = !DIEnumerator(name: "BUILT_IN_EXP2", value: 49, isUnsigned: true)
!622 = !DIEnumerator(name: "BUILT_IN_EXP2F", value: 50, isUnsigned: true)
!623 = !DIEnumerator(name: "BUILT_IN_EXP2L", value: 51, isUnsigned: true)
!624 = !DIEnumerator(name: "BUILT_IN_EXPF", value: 52, isUnsigned: true)
!625 = !DIEnumerator(name: "BUILT_IN_EXPL", value: 53, isUnsigned: true)
!626 = !DIEnumerator(name: "BUILT_IN_EXPM1", value: 54, isUnsigned: true)
!627 = !DIEnumerator(name: "BUILT_IN_EXPM1F", value: 55, isUnsigned: true)
!628 = !DIEnumerator(name: "BUILT_IN_EXPM1L", value: 56, isUnsigned: true)
!629 = !DIEnumerator(name: "BUILT_IN_FABS", value: 57, isUnsigned: true)
!630 = !DIEnumerator(name: "BUILT_IN_FABSF", value: 58, isUnsigned: true)
!631 = !DIEnumerator(name: "BUILT_IN_FABSL", value: 59, isUnsigned: true)
!632 = !DIEnumerator(name: "BUILT_IN_FDIM", value: 60, isUnsigned: true)
!633 = !DIEnumerator(name: "BUILT_IN_FDIMF", value: 61, isUnsigned: true)
!634 = !DIEnumerator(name: "BUILT_IN_FDIML", value: 62, isUnsigned: true)
!635 = !DIEnumerator(name: "BUILT_IN_FLOOR", value: 63, isUnsigned: true)
!636 = !DIEnumerator(name: "BUILT_IN_FLOORF", value: 64, isUnsigned: true)
!637 = !DIEnumerator(name: "BUILT_IN_FLOORL", value: 65, isUnsigned: true)
!638 = !DIEnumerator(name: "BUILT_IN_FMA", value: 66, isUnsigned: true)
!639 = !DIEnumerator(name: "BUILT_IN_FMAF", value: 67, isUnsigned: true)
!640 = !DIEnumerator(name: "BUILT_IN_FMAL", value: 68, isUnsigned: true)
!641 = !DIEnumerator(name: "BUILT_IN_FMAX", value: 69, isUnsigned: true)
!642 = !DIEnumerator(name: "BUILT_IN_FMAXF", value: 70, isUnsigned: true)
!643 = !DIEnumerator(name: "BUILT_IN_FMAXL", value: 71, isUnsigned: true)
!644 = !DIEnumerator(name: "BUILT_IN_FMIN", value: 72, isUnsigned: true)
!645 = !DIEnumerator(name: "BUILT_IN_FMINF", value: 73, isUnsigned: true)
!646 = !DIEnumerator(name: "BUILT_IN_FMINL", value: 74, isUnsigned: true)
!647 = !DIEnumerator(name: "BUILT_IN_FMOD", value: 75, isUnsigned: true)
!648 = !DIEnumerator(name: "BUILT_IN_FMODF", value: 76, isUnsigned: true)
!649 = !DIEnumerator(name: "BUILT_IN_FMODL", value: 77, isUnsigned: true)
!650 = !DIEnumerator(name: "BUILT_IN_FREXP", value: 78, isUnsigned: true)
!651 = !DIEnumerator(name: "BUILT_IN_FREXPF", value: 79, isUnsigned: true)
!652 = !DIEnumerator(name: "BUILT_IN_FREXPL", value: 80, isUnsigned: true)
!653 = !DIEnumerator(name: "BUILT_IN_GAMMA", value: 81, isUnsigned: true)
!654 = !DIEnumerator(name: "BUILT_IN_GAMMAF", value: 82, isUnsigned: true)
!655 = !DIEnumerator(name: "BUILT_IN_GAMMAL", value: 83, isUnsigned: true)
!656 = !DIEnumerator(name: "BUILT_IN_GAMMA_R", value: 84, isUnsigned: true)
!657 = !DIEnumerator(name: "BUILT_IN_GAMMAF_R", value: 85, isUnsigned: true)
!658 = !DIEnumerator(name: "BUILT_IN_GAMMAL_R", value: 86, isUnsigned: true)
!659 = !DIEnumerator(name: "BUILT_IN_HUGE_VAL", value: 87, isUnsigned: true)
!660 = !DIEnumerator(name: "BUILT_IN_HUGE_VALF", value: 88, isUnsigned: true)
!661 = !DIEnumerator(name: "BUILT_IN_HUGE_VALL", value: 89, isUnsigned: true)
!662 = !DIEnumerator(name: "BUILT_IN_HYPOT", value: 90, isUnsigned: true)
!663 = !DIEnumerator(name: "BUILT_IN_HYPOTF", value: 91, isUnsigned: true)
!664 = !DIEnumerator(name: "BUILT_IN_HYPOTL", value: 92, isUnsigned: true)
!665 = !DIEnumerator(name: "BUILT_IN_ILOGB", value: 93, isUnsigned: true)
!666 = !DIEnumerator(name: "BUILT_IN_ILOGBF", value: 94, isUnsigned: true)
!667 = !DIEnumerator(name: "BUILT_IN_ILOGBL", value: 95, isUnsigned: true)
!668 = !DIEnumerator(name: "BUILT_IN_INF", value: 96, isUnsigned: true)
!669 = !DIEnumerator(name: "BUILT_IN_INFF", value: 97, isUnsigned: true)
!670 = !DIEnumerator(name: "BUILT_IN_INFL", value: 98, isUnsigned: true)
!671 = !DIEnumerator(name: "BUILT_IN_INFD32", value: 99, isUnsigned: true)
!672 = !DIEnumerator(name: "BUILT_IN_INFD64", value: 100, isUnsigned: true)
!673 = !DIEnumerator(name: "BUILT_IN_INFD128", value: 101, isUnsigned: true)
!674 = !DIEnumerator(name: "BUILT_IN_J0", value: 102, isUnsigned: true)
!675 = !DIEnumerator(name: "BUILT_IN_J0F", value: 103, isUnsigned: true)
!676 = !DIEnumerator(name: "BUILT_IN_J0L", value: 104, isUnsigned: true)
!677 = !DIEnumerator(name: "BUILT_IN_J1", value: 105, isUnsigned: true)
!678 = !DIEnumerator(name: "BUILT_IN_J1F", value: 106, isUnsigned: true)
!679 = !DIEnumerator(name: "BUILT_IN_J1L", value: 107, isUnsigned: true)
!680 = !DIEnumerator(name: "BUILT_IN_JN", value: 108, isUnsigned: true)
!681 = !DIEnumerator(name: "BUILT_IN_JNF", value: 109, isUnsigned: true)
!682 = !DIEnumerator(name: "BUILT_IN_JNL", value: 110, isUnsigned: true)
!683 = !DIEnumerator(name: "BUILT_IN_LCEIL", value: 111, isUnsigned: true)
!684 = !DIEnumerator(name: "BUILT_IN_LCEILF", value: 112, isUnsigned: true)
!685 = !DIEnumerator(name: "BUILT_IN_LCEILL", value: 113, isUnsigned: true)
!686 = !DIEnumerator(name: "BUILT_IN_LDEXP", value: 114, isUnsigned: true)
!687 = !DIEnumerator(name: "BUILT_IN_LDEXPF", value: 115, isUnsigned: true)
!688 = !DIEnumerator(name: "BUILT_IN_LDEXPL", value: 116, isUnsigned: true)
!689 = !DIEnumerator(name: "BUILT_IN_LFLOOR", value: 117, isUnsigned: true)
!690 = !DIEnumerator(name: "BUILT_IN_LFLOORF", value: 118, isUnsigned: true)
!691 = !DIEnumerator(name: "BUILT_IN_LFLOORL", value: 119, isUnsigned: true)
!692 = !DIEnumerator(name: "BUILT_IN_LGAMMA", value: 120, isUnsigned: true)
!693 = !DIEnumerator(name: "BUILT_IN_LGAMMAF", value: 121, isUnsigned: true)
!694 = !DIEnumerator(name: "BUILT_IN_LGAMMAL", value: 122, isUnsigned: true)
!695 = !DIEnumerator(name: "BUILT_IN_LGAMMA_R", value: 123, isUnsigned: true)
!696 = !DIEnumerator(name: "BUILT_IN_LGAMMAF_R", value: 124, isUnsigned: true)
!697 = !DIEnumerator(name: "BUILT_IN_LGAMMAL_R", value: 125, isUnsigned: true)
!698 = !DIEnumerator(name: "BUILT_IN_LLCEIL", value: 126, isUnsigned: true)
!699 = !DIEnumerator(name: "BUILT_IN_LLCEILF", value: 127, isUnsigned: true)
!700 = !DIEnumerator(name: "BUILT_IN_LLCEILL", value: 128, isUnsigned: true)
!701 = !DIEnumerator(name: "BUILT_IN_LLFLOOR", value: 129, isUnsigned: true)
!702 = !DIEnumerator(name: "BUILT_IN_LLFLOORF", value: 130, isUnsigned: true)
!703 = !DIEnumerator(name: "BUILT_IN_LLFLOORL", value: 131, isUnsigned: true)
!704 = !DIEnumerator(name: "BUILT_IN_LLRINT", value: 132, isUnsigned: true)
!705 = !DIEnumerator(name: "BUILT_IN_LLRINTF", value: 133, isUnsigned: true)
!706 = !DIEnumerator(name: "BUILT_IN_LLRINTL", value: 134, isUnsigned: true)
!707 = !DIEnumerator(name: "BUILT_IN_LLROUND", value: 135, isUnsigned: true)
!708 = !DIEnumerator(name: "BUILT_IN_LLROUNDF", value: 136, isUnsigned: true)
!709 = !DIEnumerator(name: "BUILT_IN_LLROUNDL", value: 137, isUnsigned: true)
!710 = !DIEnumerator(name: "BUILT_IN_LOG", value: 138, isUnsigned: true)
!711 = !DIEnumerator(name: "BUILT_IN_LOG10", value: 139, isUnsigned: true)
!712 = !DIEnumerator(name: "BUILT_IN_LOG10F", value: 140, isUnsigned: true)
!713 = !DIEnumerator(name: "BUILT_IN_LOG10L", value: 141, isUnsigned: true)
!714 = !DIEnumerator(name: "BUILT_IN_LOG1P", value: 142, isUnsigned: true)
!715 = !DIEnumerator(name: "BUILT_IN_LOG1PF", value: 143, isUnsigned: true)
!716 = !DIEnumerator(name: "BUILT_IN_LOG1PL", value: 144, isUnsigned: true)
!717 = !DIEnumerator(name: "BUILT_IN_LOG2", value: 145, isUnsigned: true)
!718 = !DIEnumerator(name: "BUILT_IN_LOG2F", value: 146, isUnsigned: true)
!719 = !DIEnumerator(name: "BUILT_IN_LOG2L", value: 147, isUnsigned: true)
!720 = !DIEnumerator(name: "BUILT_IN_LOGB", value: 148, isUnsigned: true)
!721 = !DIEnumerator(name: "BUILT_IN_LOGBF", value: 149, isUnsigned: true)
!722 = !DIEnumerator(name: "BUILT_IN_LOGBL", value: 150, isUnsigned: true)
!723 = !DIEnumerator(name: "BUILT_IN_LOGF", value: 151, isUnsigned: true)
!724 = !DIEnumerator(name: "BUILT_IN_LOGL", value: 152, isUnsigned: true)
!725 = !DIEnumerator(name: "BUILT_IN_LRINT", value: 153, isUnsigned: true)
!726 = !DIEnumerator(name: "BUILT_IN_LRINTF", value: 154, isUnsigned: true)
!727 = !DIEnumerator(name: "BUILT_IN_LRINTL", value: 155, isUnsigned: true)
!728 = !DIEnumerator(name: "BUILT_IN_LROUND", value: 156, isUnsigned: true)
!729 = !DIEnumerator(name: "BUILT_IN_LROUNDF", value: 157, isUnsigned: true)
!730 = !DIEnumerator(name: "BUILT_IN_LROUNDL", value: 158, isUnsigned: true)
!731 = !DIEnumerator(name: "BUILT_IN_MODF", value: 159, isUnsigned: true)
!732 = !DIEnumerator(name: "BUILT_IN_MODFF", value: 160, isUnsigned: true)
!733 = !DIEnumerator(name: "BUILT_IN_MODFL", value: 161, isUnsigned: true)
!734 = !DIEnumerator(name: "BUILT_IN_NAN", value: 162, isUnsigned: true)
!735 = !DIEnumerator(name: "BUILT_IN_NANF", value: 163, isUnsigned: true)
!736 = !DIEnumerator(name: "BUILT_IN_NANL", value: 164, isUnsigned: true)
!737 = !DIEnumerator(name: "BUILT_IN_NAND32", value: 165, isUnsigned: true)
!738 = !DIEnumerator(name: "BUILT_IN_NAND64", value: 166, isUnsigned: true)
!739 = !DIEnumerator(name: "BUILT_IN_NAND128", value: 167, isUnsigned: true)
!740 = !DIEnumerator(name: "BUILT_IN_NANS", value: 168, isUnsigned: true)
!741 = !DIEnumerator(name: "BUILT_IN_NANSF", value: 169, isUnsigned: true)
!742 = !DIEnumerator(name: "BUILT_IN_NANSL", value: 170, isUnsigned: true)
!743 = !DIEnumerator(name: "BUILT_IN_NEARBYINT", value: 171, isUnsigned: true)
!744 = !DIEnumerator(name: "BUILT_IN_NEARBYINTF", value: 172, isUnsigned: true)
!745 = !DIEnumerator(name: "BUILT_IN_NEARBYINTL", value: 173, isUnsigned: true)
!746 = !DIEnumerator(name: "BUILT_IN_NEXTAFTER", value: 174, isUnsigned: true)
!747 = !DIEnumerator(name: "BUILT_IN_NEXTAFTERF", value: 175, isUnsigned: true)
!748 = !DIEnumerator(name: "BUILT_IN_NEXTAFTERL", value: 176, isUnsigned: true)
!749 = !DIEnumerator(name: "BUILT_IN_NEXTTOWARD", value: 177, isUnsigned: true)
!750 = !DIEnumerator(name: "BUILT_IN_NEXTTOWARDF", value: 178, isUnsigned: true)
!751 = !DIEnumerator(name: "BUILT_IN_NEXTTOWARDL", value: 179, isUnsigned: true)
!752 = !DIEnumerator(name: "BUILT_IN_POW", value: 180, isUnsigned: true)
!753 = !DIEnumerator(name: "BUILT_IN_POW10", value: 181, isUnsigned: true)
!754 = !DIEnumerator(name: "BUILT_IN_POW10F", value: 182, isUnsigned: true)
!755 = !DIEnumerator(name: "BUILT_IN_POW10L", value: 183, isUnsigned: true)
!756 = !DIEnumerator(name: "BUILT_IN_POWF", value: 184, isUnsigned: true)
!757 = !DIEnumerator(name: "BUILT_IN_POWI", value: 185, isUnsigned: true)
!758 = !DIEnumerator(name: "BUILT_IN_POWIF", value: 186, isUnsigned: true)
!759 = !DIEnumerator(name: "BUILT_IN_POWIL", value: 187, isUnsigned: true)
!760 = !DIEnumerator(name: "BUILT_IN_POWL", value: 188, isUnsigned: true)
!761 = !DIEnumerator(name: "BUILT_IN_REMAINDER", value: 189, isUnsigned: true)
!762 = !DIEnumerator(name: "BUILT_IN_REMAINDERF", value: 190, isUnsigned: true)
!763 = !DIEnumerator(name: "BUILT_IN_REMAINDERL", value: 191, isUnsigned: true)
!764 = !DIEnumerator(name: "BUILT_IN_REMQUO", value: 192, isUnsigned: true)
!765 = !DIEnumerator(name: "BUILT_IN_REMQUOF", value: 193, isUnsigned: true)
!766 = !DIEnumerator(name: "BUILT_IN_REMQUOL", value: 194, isUnsigned: true)
!767 = !DIEnumerator(name: "BUILT_IN_RINT", value: 195, isUnsigned: true)
!768 = !DIEnumerator(name: "BUILT_IN_RINTF", value: 196, isUnsigned: true)
!769 = !DIEnumerator(name: "BUILT_IN_RINTL", value: 197, isUnsigned: true)
!770 = !DIEnumerator(name: "BUILT_IN_ROUND", value: 198, isUnsigned: true)
!771 = !DIEnumerator(name: "BUILT_IN_ROUNDF", value: 199, isUnsigned: true)
!772 = !DIEnumerator(name: "BUILT_IN_ROUNDL", value: 200, isUnsigned: true)
!773 = !DIEnumerator(name: "BUILT_IN_SCALB", value: 201, isUnsigned: true)
!774 = !DIEnumerator(name: "BUILT_IN_SCALBF", value: 202, isUnsigned: true)
!775 = !DIEnumerator(name: "BUILT_IN_SCALBL", value: 203, isUnsigned: true)
!776 = !DIEnumerator(name: "BUILT_IN_SCALBLN", value: 204, isUnsigned: true)
!777 = !DIEnumerator(name: "BUILT_IN_SCALBLNF", value: 205, isUnsigned: true)
!778 = !DIEnumerator(name: "BUILT_IN_SCALBLNL", value: 206, isUnsigned: true)
!779 = !DIEnumerator(name: "BUILT_IN_SCALBN", value: 207, isUnsigned: true)
!780 = !DIEnumerator(name: "BUILT_IN_SCALBNF", value: 208, isUnsigned: true)
!781 = !DIEnumerator(name: "BUILT_IN_SCALBNL", value: 209, isUnsigned: true)
!782 = !DIEnumerator(name: "BUILT_IN_SIGNBIT", value: 210, isUnsigned: true)
!783 = !DIEnumerator(name: "BUILT_IN_SIGNBITF", value: 211, isUnsigned: true)
!784 = !DIEnumerator(name: "BUILT_IN_SIGNBITL", value: 212, isUnsigned: true)
!785 = !DIEnumerator(name: "BUILT_IN_SIGNBITD32", value: 213, isUnsigned: true)
!786 = !DIEnumerator(name: "BUILT_IN_SIGNBITD64", value: 214, isUnsigned: true)
!787 = !DIEnumerator(name: "BUILT_IN_SIGNBITD128", value: 215, isUnsigned: true)
!788 = !DIEnumerator(name: "BUILT_IN_SIGNIFICAND", value: 216, isUnsigned: true)
!789 = !DIEnumerator(name: "BUILT_IN_SIGNIFICANDF", value: 217, isUnsigned: true)
!790 = !DIEnumerator(name: "BUILT_IN_SIGNIFICANDL", value: 218, isUnsigned: true)
!791 = !DIEnumerator(name: "BUILT_IN_SIN", value: 219, isUnsigned: true)
!792 = !DIEnumerator(name: "BUILT_IN_SINCOS", value: 220, isUnsigned: true)
!793 = !DIEnumerator(name: "BUILT_IN_SINCOSF", value: 221, isUnsigned: true)
!794 = !DIEnumerator(name: "BUILT_IN_SINCOSL", value: 222, isUnsigned: true)
!795 = !DIEnumerator(name: "BUILT_IN_SINF", value: 223, isUnsigned: true)
!796 = !DIEnumerator(name: "BUILT_IN_SINH", value: 224, isUnsigned: true)
!797 = !DIEnumerator(name: "BUILT_IN_SINHF", value: 225, isUnsigned: true)
!798 = !DIEnumerator(name: "BUILT_IN_SINHL", value: 226, isUnsigned: true)
!799 = !DIEnumerator(name: "BUILT_IN_SINL", value: 227, isUnsigned: true)
!800 = !DIEnumerator(name: "BUILT_IN_SQRT", value: 228, isUnsigned: true)
!801 = !DIEnumerator(name: "BUILT_IN_SQRTF", value: 229, isUnsigned: true)
!802 = !DIEnumerator(name: "BUILT_IN_SQRTL", value: 230, isUnsigned: true)
!803 = !DIEnumerator(name: "BUILT_IN_TAN", value: 231, isUnsigned: true)
!804 = !DIEnumerator(name: "BUILT_IN_TANF", value: 232, isUnsigned: true)
!805 = !DIEnumerator(name: "BUILT_IN_TANH", value: 233, isUnsigned: true)
!806 = !DIEnumerator(name: "BUILT_IN_TANHF", value: 234, isUnsigned: true)
!807 = !DIEnumerator(name: "BUILT_IN_TANHL", value: 235, isUnsigned: true)
!808 = !DIEnumerator(name: "BUILT_IN_TANL", value: 236, isUnsigned: true)
!809 = !DIEnumerator(name: "BUILT_IN_TGAMMA", value: 237, isUnsigned: true)
!810 = !DIEnumerator(name: "BUILT_IN_TGAMMAF", value: 238, isUnsigned: true)
!811 = !DIEnumerator(name: "BUILT_IN_TGAMMAL", value: 239, isUnsigned: true)
!812 = !DIEnumerator(name: "BUILT_IN_TRUNC", value: 240, isUnsigned: true)
!813 = !DIEnumerator(name: "BUILT_IN_TRUNCF", value: 241, isUnsigned: true)
!814 = !DIEnumerator(name: "BUILT_IN_TRUNCL", value: 242, isUnsigned: true)
!815 = !DIEnumerator(name: "BUILT_IN_Y0", value: 243, isUnsigned: true)
!816 = !DIEnumerator(name: "BUILT_IN_Y0F", value: 244, isUnsigned: true)
!817 = !DIEnumerator(name: "BUILT_IN_Y0L", value: 245, isUnsigned: true)
!818 = !DIEnumerator(name: "BUILT_IN_Y1", value: 246, isUnsigned: true)
!819 = !DIEnumerator(name: "BUILT_IN_Y1F", value: 247, isUnsigned: true)
!820 = !DIEnumerator(name: "BUILT_IN_Y1L", value: 248, isUnsigned: true)
!821 = !DIEnumerator(name: "BUILT_IN_YN", value: 249, isUnsigned: true)
!822 = !DIEnumerator(name: "BUILT_IN_YNF", value: 250, isUnsigned: true)
!823 = !DIEnumerator(name: "BUILT_IN_YNL", value: 251, isUnsigned: true)
!824 = !DIEnumerator(name: "BUILT_IN_CABS", value: 252, isUnsigned: true)
!825 = !DIEnumerator(name: "BUILT_IN_CABSF", value: 253, isUnsigned: true)
!826 = !DIEnumerator(name: "BUILT_IN_CABSL", value: 254, isUnsigned: true)
!827 = !DIEnumerator(name: "BUILT_IN_CACOS", value: 255, isUnsigned: true)
!828 = !DIEnumerator(name: "BUILT_IN_CACOSF", value: 256, isUnsigned: true)
!829 = !DIEnumerator(name: "BUILT_IN_CACOSH", value: 257, isUnsigned: true)
!830 = !DIEnumerator(name: "BUILT_IN_CACOSHF", value: 258, isUnsigned: true)
!831 = !DIEnumerator(name: "BUILT_IN_CACOSHL", value: 259, isUnsigned: true)
!832 = !DIEnumerator(name: "BUILT_IN_CACOSL", value: 260, isUnsigned: true)
!833 = !DIEnumerator(name: "BUILT_IN_CARG", value: 261, isUnsigned: true)
!834 = !DIEnumerator(name: "BUILT_IN_CARGF", value: 262, isUnsigned: true)
!835 = !DIEnumerator(name: "BUILT_IN_CARGL", value: 263, isUnsigned: true)
!836 = !DIEnumerator(name: "BUILT_IN_CASIN", value: 264, isUnsigned: true)
!837 = !DIEnumerator(name: "BUILT_IN_CASINF", value: 265, isUnsigned: true)
!838 = !DIEnumerator(name: "BUILT_IN_CASINH", value: 266, isUnsigned: true)
!839 = !DIEnumerator(name: "BUILT_IN_CASINHF", value: 267, isUnsigned: true)
!840 = !DIEnumerator(name: "BUILT_IN_CASINHL", value: 268, isUnsigned: true)
!841 = !DIEnumerator(name: "BUILT_IN_CASINL", value: 269, isUnsigned: true)
!842 = !DIEnumerator(name: "BUILT_IN_CATAN", value: 270, isUnsigned: true)
!843 = !DIEnumerator(name: "BUILT_IN_CATANF", value: 271, isUnsigned: true)
!844 = !DIEnumerator(name: "BUILT_IN_CATANH", value: 272, isUnsigned: true)
!845 = !DIEnumerator(name: "BUILT_IN_CATANHF", value: 273, isUnsigned: true)
!846 = !DIEnumerator(name: "BUILT_IN_CATANHL", value: 274, isUnsigned: true)
!847 = !DIEnumerator(name: "BUILT_IN_CATANL", value: 275, isUnsigned: true)
!848 = !DIEnumerator(name: "BUILT_IN_CCOS", value: 276, isUnsigned: true)
!849 = !DIEnumerator(name: "BUILT_IN_CCOSF", value: 277, isUnsigned: true)
!850 = !DIEnumerator(name: "BUILT_IN_CCOSH", value: 278, isUnsigned: true)
!851 = !DIEnumerator(name: "BUILT_IN_CCOSHF", value: 279, isUnsigned: true)
!852 = !DIEnumerator(name: "BUILT_IN_CCOSHL", value: 280, isUnsigned: true)
!853 = !DIEnumerator(name: "BUILT_IN_CCOSL", value: 281, isUnsigned: true)
!854 = !DIEnumerator(name: "BUILT_IN_CEXP", value: 282, isUnsigned: true)
!855 = !DIEnumerator(name: "BUILT_IN_CEXPF", value: 283, isUnsigned: true)
!856 = !DIEnumerator(name: "BUILT_IN_CEXPL", value: 284, isUnsigned: true)
!857 = !DIEnumerator(name: "BUILT_IN_CEXPI", value: 285, isUnsigned: true)
!858 = !DIEnumerator(name: "BUILT_IN_CEXPIF", value: 286, isUnsigned: true)
!859 = !DIEnumerator(name: "BUILT_IN_CEXPIL", value: 287, isUnsigned: true)
!860 = !DIEnumerator(name: "BUILT_IN_CIMAG", value: 288, isUnsigned: true)
!861 = !DIEnumerator(name: "BUILT_IN_CIMAGF", value: 289, isUnsigned: true)
!862 = !DIEnumerator(name: "BUILT_IN_CIMAGL", value: 290, isUnsigned: true)
!863 = !DIEnumerator(name: "BUILT_IN_CLOG", value: 291, isUnsigned: true)
!864 = !DIEnumerator(name: "BUILT_IN_CLOGF", value: 292, isUnsigned: true)
!865 = !DIEnumerator(name: "BUILT_IN_CLOGL", value: 293, isUnsigned: true)
!866 = !DIEnumerator(name: "BUILT_IN_CLOG10", value: 294, isUnsigned: true)
!867 = !DIEnumerator(name: "BUILT_IN_CLOG10F", value: 295, isUnsigned: true)
!868 = !DIEnumerator(name: "BUILT_IN_CLOG10L", value: 296, isUnsigned: true)
!869 = !DIEnumerator(name: "BUILT_IN_CONJ", value: 297, isUnsigned: true)
!870 = !DIEnumerator(name: "BUILT_IN_CONJF", value: 298, isUnsigned: true)
!871 = !DIEnumerator(name: "BUILT_IN_CONJL", value: 299, isUnsigned: true)
!872 = !DIEnumerator(name: "BUILT_IN_CPOW", value: 300, isUnsigned: true)
!873 = !DIEnumerator(name: "BUILT_IN_CPOWF", value: 301, isUnsigned: true)
!874 = !DIEnumerator(name: "BUILT_IN_CPOWL", value: 302, isUnsigned: true)
!875 = !DIEnumerator(name: "BUILT_IN_CPROJ", value: 303, isUnsigned: true)
!876 = !DIEnumerator(name: "BUILT_IN_CPROJF", value: 304, isUnsigned: true)
!877 = !DIEnumerator(name: "BUILT_IN_CPROJL", value: 305, isUnsigned: true)
!878 = !DIEnumerator(name: "BUILT_IN_CREAL", value: 306, isUnsigned: true)
!879 = !DIEnumerator(name: "BUILT_IN_CREALF", value: 307, isUnsigned: true)
!880 = !DIEnumerator(name: "BUILT_IN_CREALL", value: 308, isUnsigned: true)
!881 = !DIEnumerator(name: "BUILT_IN_CSIN", value: 309, isUnsigned: true)
!882 = !DIEnumerator(name: "BUILT_IN_CSINF", value: 310, isUnsigned: true)
!883 = !DIEnumerator(name: "BUILT_IN_CSINH", value: 311, isUnsigned: true)
!884 = !DIEnumerator(name: "BUILT_IN_CSINHF", value: 312, isUnsigned: true)
!885 = !DIEnumerator(name: "BUILT_IN_CSINHL", value: 313, isUnsigned: true)
!886 = !DIEnumerator(name: "BUILT_IN_CSINL", value: 314, isUnsigned: true)
!887 = !DIEnumerator(name: "BUILT_IN_CSQRT", value: 315, isUnsigned: true)
!888 = !DIEnumerator(name: "BUILT_IN_CSQRTF", value: 316, isUnsigned: true)
!889 = !DIEnumerator(name: "BUILT_IN_CSQRTL", value: 317, isUnsigned: true)
!890 = !DIEnumerator(name: "BUILT_IN_CTAN", value: 318, isUnsigned: true)
!891 = !DIEnumerator(name: "BUILT_IN_CTANF", value: 319, isUnsigned: true)
!892 = !DIEnumerator(name: "BUILT_IN_CTANH", value: 320, isUnsigned: true)
!893 = !DIEnumerator(name: "BUILT_IN_CTANHF", value: 321, isUnsigned: true)
!894 = !DIEnumerator(name: "BUILT_IN_CTANHL", value: 322, isUnsigned: true)
!895 = !DIEnumerator(name: "BUILT_IN_CTANL", value: 323, isUnsigned: true)
!896 = !DIEnumerator(name: "BUILT_IN_BCMP", value: 324, isUnsigned: true)
!897 = !DIEnumerator(name: "BUILT_IN_BCOPY", value: 325, isUnsigned: true)
!898 = !DIEnumerator(name: "BUILT_IN_BZERO", value: 326, isUnsigned: true)
!899 = !DIEnumerator(name: "BUILT_IN_INDEX", value: 327, isUnsigned: true)
!900 = !DIEnumerator(name: "BUILT_IN_MEMCHR", value: 328, isUnsigned: true)
!901 = !DIEnumerator(name: "BUILT_IN_MEMCMP", value: 329, isUnsigned: true)
!902 = !DIEnumerator(name: "BUILT_IN_MEMCPY", value: 330, isUnsigned: true)
!903 = !DIEnumerator(name: "BUILT_IN_MEMMOVE", value: 331, isUnsigned: true)
!904 = !DIEnumerator(name: "BUILT_IN_MEMPCPY", value: 332, isUnsigned: true)
!905 = !DIEnumerator(name: "BUILT_IN_MEMSET", value: 333, isUnsigned: true)
!906 = !DIEnumerator(name: "BUILT_IN_RINDEX", value: 334, isUnsigned: true)
!907 = !DIEnumerator(name: "BUILT_IN_STPCPY", value: 335, isUnsigned: true)
!908 = !DIEnumerator(name: "BUILT_IN_STPNCPY", value: 336, isUnsigned: true)
!909 = !DIEnumerator(name: "BUILT_IN_STRCASECMP", value: 337, isUnsigned: true)
!910 = !DIEnumerator(name: "BUILT_IN_STRCAT", value: 338, isUnsigned: true)
!911 = !DIEnumerator(name: "BUILT_IN_STRCHR", value: 339, isUnsigned: true)
!912 = !DIEnumerator(name: "BUILT_IN_STRCMP", value: 340, isUnsigned: true)
!913 = !DIEnumerator(name: "BUILT_IN_STRCPY", value: 341, isUnsigned: true)
!914 = !DIEnumerator(name: "BUILT_IN_STRCSPN", value: 342, isUnsigned: true)
!915 = !DIEnumerator(name: "BUILT_IN_STRDUP", value: 343, isUnsigned: true)
!916 = !DIEnumerator(name: "BUILT_IN_STRNDUP", value: 344, isUnsigned: true)
!917 = !DIEnumerator(name: "BUILT_IN_STRLEN", value: 345, isUnsigned: true)
!918 = !DIEnumerator(name: "BUILT_IN_STRNCASECMP", value: 346, isUnsigned: true)
!919 = !DIEnumerator(name: "BUILT_IN_STRNCAT", value: 347, isUnsigned: true)
!920 = !DIEnumerator(name: "BUILT_IN_STRNCMP", value: 348, isUnsigned: true)
!921 = !DIEnumerator(name: "BUILT_IN_STRNCPY", value: 349, isUnsigned: true)
!922 = !DIEnumerator(name: "BUILT_IN_STRPBRK", value: 350, isUnsigned: true)
!923 = !DIEnumerator(name: "BUILT_IN_STRRCHR", value: 351, isUnsigned: true)
!924 = !DIEnumerator(name: "BUILT_IN_STRSPN", value: 352, isUnsigned: true)
!925 = !DIEnumerator(name: "BUILT_IN_STRSTR", value: 353, isUnsigned: true)
!926 = !DIEnumerator(name: "BUILT_IN_FPRINTF", value: 354, isUnsigned: true)
!927 = !DIEnumerator(name: "BUILT_IN_FPRINTF_UNLOCKED", value: 355, isUnsigned: true)
!928 = !DIEnumerator(name: "BUILT_IN_PUTC", value: 356, isUnsigned: true)
!929 = !DIEnumerator(name: "BUILT_IN_PUTC_UNLOCKED", value: 357, isUnsigned: true)
!930 = !DIEnumerator(name: "BUILT_IN_FPUTC", value: 358, isUnsigned: true)
!931 = !DIEnumerator(name: "BUILT_IN_FPUTC_UNLOCKED", value: 359, isUnsigned: true)
!932 = !DIEnumerator(name: "BUILT_IN_FPUTS", value: 360, isUnsigned: true)
!933 = !DIEnumerator(name: "BUILT_IN_FPUTS_UNLOCKED", value: 361, isUnsigned: true)
!934 = !DIEnumerator(name: "BUILT_IN_FSCANF", value: 362, isUnsigned: true)
!935 = !DIEnumerator(name: "BUILT_IN_FWRITE", value: 363, isUnsigned: true)
!936 = !DIEnumerator(name: "BUILT_IN_FWRITE_UNLOCKED", value: 364, isUnsigned: true)
!937 = !DIEnumerator(name: "BUILT_IN_PRINTF", value: 365, isUnsigned: true)
!938 = !DIEnumerator(name: "BUILT_IN_PRINTF_UNLOCKED", value: 366, isUnsigned: true)
!939 = !DIEnumerator(name: "BUILT_IN_PUTCHAR", value: 367, isUnsigned: true)
!940 = !DIEnumerator(name: "BUILT_IN_PUTCHAR_UNLOCKED", value: 368, isUnsigned: true)
!941 = !DIEnumerator(name: "BUILT_IN_PUTS", value: 369, isUnsigned: true)
!942 = !DIEnumerator(name: "BUILT_IN_PUTS_UNLOCKED", value: 370, isUnsigned: true)
!943 = !DIEnumerator(name: "BUILT_IN_SCANF", value: 371, isUnsigned: true)
!944 = !DIEnumerator(name: "BUILT_IN_SNPRINTF", value: 372, isUnsigned: true)
!945 = !DIEnumerator(name: "BUILT_IN_SPRINTF", value: 373, isUnsigned: true)
!946 = !DIEnumerator(name: "BUILT_IN_SSCANF", value: 374, isUnsigned: true)
!947 = !DIEnumerator(name: "BUILT_IN_VFPRINTF", value: 375, isUnsigned: true)
!948 = !DIEnumerator(name: "BUILT_IN_VFSCANF", value: 376, isUnsigned: true)
!949 = !DIEnumerator(name: "BUILT_IN_VPRINTF", value: 377, isUnsigned: true)
!950 = !DIEnumerator(name: "BUILT_IN_VSCANF", value: 378, isUnsigned: true)
!951 = !DIEnumerator(name: "BUILT_IN_VSNPRINTF", value: 379, isUnsigned: true)
!952 = !DIEnumerator(name: "BUILT_IN_VSPRINTF", value: 380, isUnsigned: true)
!953 = !DIEnumerator(name: "BUILT_IN_VSSCANF", value: 381, isUnsigned: true)
!954 = !DIEnumerator(name: "BUILT_IN_ISALNUM", value: 382, isUnsigned: true)
!955 = !DIEnumerator(name: "BUILT_IN_ISALPHA", value: 383, isUnsigned: true)
!956 = !DIEnumerator(name: "BUILT_IN_ISASCII", value: 384, isUnsigned: true)
!957 = !DIEnumerator(name: "BUILT_IN_ISBLANK", value: 385, isUnsigned: true)
!958 = !DIEnumerator(name: "BUILT_IN_ISCNTRL", value: 386, isUnsigned: true)
!959 = !DIEnumerator(name: "BUILT_IN_ISDIGIT", value: 387, isUnsigned: true)
!960 = !DIEnumerator(name: "BUILT_IN_ISGRAPH", value: 388, isUnsigned: true)
!961 = !DIEnumerator(name: "BUILT_IN_ISLOWER", value: 389, isUnsigned: true)
!962 = !DIEnumerator(name: "BUILT_IN_ISPRINT", value: 390, isUnsigned: true)
!963 = !DIEnumerator(name: "BUILT_IN_ISPUNCT", value: 391, isUnsigned: true)
!964 = !DIEnumerator(name: "BUILT_IN_ISSPACE", value: 392, isUnsigned: true)
!965 = !DIEnumerator(name: "BUILT_IN_ISUPPER", value: 393, isUnsigned: true)
!966 = !DIEnumerator(name: "BUILT_IN_ISXDIGIT", value: 394, isUnsigned: true)
!967 = !DIEnumerator(name: "BUILT_IN_TOASCII", value: 395, isUnsigned: true)
!968 = !DIEnumerator(name: "BUILT_IN_TOLOWER", value: 396, isUnsigned: true)
!969 = !DIEnumerator(name: "BUILT_IN_TOUPPER", value: 397, isUnsigned: true)
!970 = !DIEnumerator(name: "BUILT_IN_ISWALNUM", value: 398, isUnsigned: true)
!971 = !DIEnumerator(name: "BUILT_IN_ISWALPHA", value: 399, isUnsigned: true)
!972 = !DIEnumerator(name: "BUILT_IN_ISWBLANK", value: 400, isUnsigned: true)
!973 = !DIEnumerator(name: "BUILT_IN_ISWCNTRL", value: 401, isUnsigned: true)
!974 = !DIEnumerator(name: "BUILT_IN_ISWDIGIT", value: 402, isUnsigned: true)
!975 = !DIEnumerator(name: "BUILT_IN_ISWGRAPH", value: 403, isUnsigned: true)
!976 = !DIEnumerator(name: "BUILT_IN_ISWLOWER", value: 404, isUnsigned: true)
!977 = !DIEnumerator(name: "BUILT_IN_ISWPRINT", value: 405, isUnsigned: true)
!978 = !DIEnumerator(name: "BUILT_IN_ISWPUNCT", value: 406, isUnsigned: true)
!979 = !DIEnumerator(name: "BUILT_IN_ISWSPACE", value: 407, isUnsigned: true)
!980 = !DIEnumerator(name: "BUILT_IN_ISWUPPER", value: 408, isUnsigned: true)
!981 = !DIEnumerator(name: "BUILT_IN_ISWXDIGIT", value: 409, isUnsigned: true)
!982 = !DIEnumerator(name: "BUILT_IN_TOWLOWER", value: 410, isUnsigned: true)
!983 = !DIEnumerator(name: "BUILT_IN_TOWUPPER", value: 411, isUnsigned: true)
!984 = !DIEnumerator(name: "BUILT_IN_ABORT", value: 412, isUnsigned: true)
!985 = !DIEnumerator(name: "BUILT_IN_ABS", value: 413, isUnsigned: true)
!986 = !DIEnumerator(name: "BUILT_IN_AGGREGATE_INCOMING_ADDRESS", value: 414, isUnsigned: true)
!987 = !DIEnumerator(name: "BUILT_IN_ALLOCA", value: 415, isUnsigned: true)
!988 = !DIEnumerator(name: "BUILT_IN_APPLY", value: 416, isUnsigned: true)
!989 = !DIEnumerator(name: "BUILT_IN_APPLY_ARGS", value: 417, isUnsigned: true)
!990 = !DIEnumerator(name: "BUILT_IN_ARGS_INFO", value: 418, isUnsigned: true)
!991 = !DIEnumerator(name: "BUILT_IN_BSWAP32", value: 419, isUnsigned: true)
!992 = !DIEnumerator(name: "BUILT_IN_BSWAP64", value: 420, isUnsigned: true)
!993 = !DIEnumerator(name: "BUILT_IN_CLEAR_CACHE", value: 421, isUnsigned: true)
!994 = !DIEnumerator(name: "BUILT_IN_CALLOC", value: 422, isUnsigned: true)
!995 = !DIEnumerator(name: "BUILT_IN_CLASSIFY_TYPE", value: 423, isUnsigned: true)
!996 = !DIEnumerator(name: "BUILT_IN_CLZ", value: 424, isUnsigned: true)
!997 = !DIEnumerator(name: "BUILT_IN_CLZIMAX", value: 425, isUnsigned: true)
!998 = !DIEnumerator(name: "BUILT_IN_CLZL", value: 426, isUnsigned: true)
!999 = !DIEnumerator(name: "BUILT_IN_CLZLL", value: 427, isUnsigned: true)
!1000 = !DIEnumerator(name: "BUILT_IN_CONSTANT_P", value: 428, isUnsigned: true)
!1001 = !DIEnumerator(name: "BUILT_IN_CTZ", value: 429, isUnsigned: true)
!1002 = !DIEnumerator(name: "BUILT_IN_CTZIMAX", value: 430, isUnsigned: true)
!1003 = !DIEnumerator(name: "BUILT_IN_CTZL", value: 431, isUnsigned: true)
!1004 = !DIEnumerator(name: "BUILT_IN_CTZLL", value: 432, isUnsigned: true)
!1005 = !DIEnumerator(name: "BUILT_IN_DCGETTEXT", value: 433, isUnsigned: true)
!1006 = !DIEnumerator(name: "BUILT_IN_DGETTEXT", value: 434, isUnsigned: true)
!1007 = !DIEnumerator(name: "BUILT_IN_DWARF_CFA", value: 435, isUnsigned: true)
!1008 = !DIEnumerator(name: "BUILT_IN_DWARF_SP_COLUMN", value: 436, isUnsigned: true)
!1009 = !DIEnumerator(name: "BUILT_IN_EH_RETURN", value: 437, isUnsigned: true)
!1010 = !DIEnumerator(name: "BUILT_IN_EH_RETURN_DATA_REGNO", value: 438, isUnsigned: true)
!1011 = !DIEnumerator(name: "BUILT_IN_EXECL", value: 439, isUnsigned: true)
!1012 = !DIEnumerator(name: "BUILT_IN_EXECLP", value: 440, isUnsigned: true)
!1013 = !DIEnumerator(name: "BUILT_IN_EXECLE", value: 441, isUnsigned: true)
!1014 = !DIEnumerator(name: "BUILT_IN_EXECV", value: 442, isUnsigned: true)
!1015 = !DIEnumerator(name: "BUILT_IN_EXECVP", value: 443, isUnsigned: true)
!1016 = !DIEnumerator(name: "BUILT_IN_EXECVE", value: 444, isUnsigned: true)
!1017 = !DIEnumerator(name: "BUILT_IN_EXIT", value: 445, isUnsigned: true)
!1018 = !DIEnumerator(name: "BUILT_IN_EXPECT", value: 446, isUnsigned: true)
!1019 = !DIEnumerator(name: "BUILT_IN_EXTEND_POINTER", value: 447, isUnsigned: true)
!1020 = !DIEnumerator(name: "BUILT_IN_EXTRACT_RETURN_ADDR", value: 448, isUnsigned: true)
!1021 = !DIEnumerator(name: "BUILT_IN_FFS", value: 449, isUnsigned: true)
!1022 = !DIEnumerator(name: "BUILT_IN_FFSIMAX", value: 450, isUnsigned: true)
!1023 = !DIEnumerator(name: "BUILT_IN_FFSL", value: 451, isUnsigned: true)
!1024 = !DIEnumerator(name: "BUILT_IN_FFSLL", value: 452, isUnsigned: true)
!1025 = !DIEnumerator(name: "BUILT_IN_FORK", value: 453, isUnsigned: true)
!1026 = !DIEnumerator(name: "BUILT_IN_FRAME_ADDRESS", value: 454, isUnsigned: true)
!1027 = !DIEnumerator(name: "BUILT_IN_FREE", value: 455, isUnsigned: true)
!1028 = !DIEnumerator(name: "BUILT_IN_FROB_RETURN_ADDR", value: 456, isUnsigned: true)
!1029 = !DIEnumerator(name: "BUILT_IN_GETTEXT", value: 457, isUnsigned: true)
!1030 = !DIEnumerator(name: "BUILT_IN_IMAXABS", value: 458, isUnsigned: true)
!1031 = !DIEnumerator(name: "BUILT_IN_INIT_DWARF_REG_SIZES", value: 459, isUnsigned: true)
!1032 = !DIEnumerator(name: "BUILT_IN_FINITE", value: 460, isUnsigned: true)
!1033 = !DIEnumerator(name: "BUILT_IN_FINITEF", value: 461, isUnsigned: true)
!1034 = !DIEnumerator(name: "BUILT_IN_FINITEL", value: 462, isUnsigned: true)
!1035 = !DIEnumerator(name: "BUILT_IN_FINITED32", value: 463, isUnsigned: true)
!1036 = !DIEnumerator(name: "BUILT_IN_FINITED64", value: 464, isUnsigned: true)
!1037 = !DIEnumerator(name: "BUILT_IN_FINITED128", value: 465, isUnsigned: true)
!1038 = !DIEnumerator(name: "BUILT_IN_FPCLASSIFY", value: 466, isUnsigned: true)
!1039 = !DIEnumerator(name: "BUILT_IN_ISFINITE", value: 467, isUnsigned: true)
!1040 = !DIEnumerator(name: "BUILT_IN_ISINF_SIGN", value: 468, isUnsigned: true)
!1041 = !DIEnumerator(name: "BUILT_IN_ISINF", value: 469, isUnsigned: true)
!1042 = !DIEnumerator(name: "BUILT_IN_ISINFF", value: 470, isUnsigned: true)
!1043 = !DIEnumerator(name: "BUILT_IN_ISINFL", value: 471, isUnsigned: true)
!1044 = !DIEnumerator(name: "BUILT_IN_ISINFD32", value: 472, isUnsigned: true)
!1045 = !DIEnumerator(name: "BUILT_IN_ISINFD64", value: 473, isUnsigned: true)
!1046 = !DIEnumerator(name: "BUILT_IN_ISINFD128", value: 474, isUnsigned: true)
!1047 = !DIEnumerator(name: "BUILT_IN_ISNAN", value: 475, isUnsigned: true)
!1048 = !DIEnumerator(name: "BUILT_IN_ISNANF", value: 476, isUnsigned: true)
!1049 = !DIEnumerator(name: "BUILT_IN_ISNANL", value: 477, isUnsigned: true)
!1050 = !DIEnumerator(name: "BUILT_IN_ISNAND32", value: 478, isUnsigned: true)
!1051 = !DIEnumerator(name: "BUILT_IN_ISNAND64", value: 479, isUnsigned: true)
!1052 = !DIEnumerator(name: "BUILT_IN_ISNAND128", value: 480, isUnsigned: true)
!1053 = !DIEnumerator(name: "BUILT_IN_ISNORMAL", value: 481, isUnsigned: true)
!1054 = !DIEnumerator(name: "BUILT_IN_ISGREATER", value: 482, isUnsigned: true)
!1055 = !DIEnumerator(name: "BUILT_IN_ISGREATEREQUAL", value: 483, isUnsigned: true)
!1056 = !DIEnumerator(name: "BUILT_IN_ISLESS", value: 484, isUnsigned: true)
!1057 = !DIEnumerator(name: "BUILT_IN_ISLESSEQUAL", value: 485, isUnsigned: true)
!1058 = !DIEnumerator(name: "BUILT_IN_ISLESSGREATER", value: 486, isUnsigned: true)
!1059 = !DIEnumerator(name: "BUILT_IN_ISUNORDERED", value: 487, isUnsigned: true)
!1060 = !DIEnumerator(name: "BUILT_IN_LABS", value: 488, isUnsigned: true)
!1061 = !DIEnumerator(name: "BUILT_IN_LLABS", value: 489, isUnsigned: true)
!1062 = !DIEnumerator(name: "BUILT_IN_LONGJMP", value: 490, isUnsigned: true)
!1063 = !DIEnumerator(name: "BUILT_IN_MALLOC", value: 491, isUnsigned: true)
!1064 = !DIEnumerator(name: "BUILT_IN_NEXT_ARG", value: 492, isUnsigned: true)
!1065 = !DIEnumerator(name: "BUILT_IN_PARITY", value: 493, isUnsigned: true)
!1066 = !DIEnumerator(name: "BUILT_IN_PARITYIMAX", value: 494, isUnsigned: true)
!1067 = !DIEnumerator(name: "BUILT_IN_PARITYL", value: 495, isUnsigned: true)
!1068 = !DIEnumerator(name: "BUILT_IN_PARITYLL", value: 496, isUnsigned: true)
!1069 = !DIEnumerator(name: "BUILT_IN_POPCOUNT", value: 497, isUnsigned: true)
!1070 = !DIEnumerator(name: "BUILT_IN_POPCOUNTIMAX", value: 498, isUnsigned: true)
!1071 = !DIEnumerator(name: "BUILT_IN_POPCOUNTL", value: 499, isUnsigned: true)
!1072 = !DIEnumerator(name: "BUILT_IN_POPCOUNTLL", value: 500, isUnsigned: true)
!1073 = !DIEnumerator(name: "BUILT_IN_PREFETCH", value: 501, isUnsigned: true)
!1074 = !DIEnumerator(name: "BUILT_IN_REALLOC", value: 502, isUnsigned: true)
!1075 = !DIEnumerator(name: "BUILT_IN_RETURN", value: 503, isUnsigned: true)
!1076 = !DIEnumerator(name: "BUILT_IN_RETURN_ADDRESS", value: 504, isUnsigned: true)
!1077 = !DIEnumerator(name: "BUILT_IN_SAVEREGS", value: 505, isUnsigned: true)
!1078 = !DIEnumerator(name: "BUILT_IN_SETJMP", value: 506, isUnsigned: true)
!1079 = !DIEnumerator(name: "BUILT_IN_STRFMON", value: 507, isUnsigned: true)
!1080 = !DIEnumerator(name: "BUILT_IN_STRFTIME", value: 508, isUnsigned: true)
!1081 = !DIEnumerator(name: "BUILT_IN_TRAP", value: 509, isUnsigned: true)
!1082 = !DIEnumerator(name: "BUILT_IN_UNREACHABLE", value: 510, isUnsigned: true)
!1083 = !DIEnumerator(name: "BUILT_IN_UNWIND_INIT", value: 511, isUnsigned: true)
!1084 = !DIEnumerator(name: "BUILT_IN_UPDATE_SETJMP_BUF", value: 512, isUnsigned: true)
!1085 = !DIEnumerator(name: "BUILT_IN_VA_COPY", value: 513, isUnsigned: true)
!1086 = !DIEnumerator(name: "BUILT_IN_VA_END", value: 514, isUnsigned: true)
!1087 = !DIEnumerator(name: "BUILT_IN_VA_START", value: 515, isUnsigned: true)
!1088 = !DIEnumerator(name: "BUILT_IN_VA_ARG_PACK", value: 516, isUnsigned: true)
!1089 = !DIEnumerator(name: "BUILT_IN_VA_ARG_PACK_LEN", value: 517, isUnsigned: true)
!1090 = !DIEnumerator(name: "BUILT_IN__EXIT", value: 518, isUnsigned: true)
!1091 = !DIEnumerator(name: "BUILT_IN__EXIT2", value: 519, isUnsigned: true)
!1092 = !DIEnumerator(name: "BUILT_IN_INIT_TRAMPOLINE", value: 520, isUnsigned: true)
!1093 = !DIEnumerator(name: "BUILT_IN_ADJUST_TRAMPOLINE", value: 521, isUnsigned: true)
!1094 = !DIEnumerator(name: "BUILT_IN_NONLOCAL_GOTO", value: 522, isUnsigned: true)
!1095 = !DIEnumerator(name: "BUILT_IN_SETJMP_SETUP", value: 523, isUnsigned: true)
!1096 = !DIEnumerator(name: "BUILT_IN_SETJMP_DISPATCHER", value: 524, isUnsigned: true)
!1097 = !DIEnumerator(name: "BUILT_IN_SETJMP_RECEIVER", value: 525, isUnsigned: true)
!1098 = !DIEnumerator(name: "BUILT_IN_STACK_SAVE", value: 526, isUnsigned: true)
!1099 = !DIEnumerator(name: "BUILT_IN_STACK_RESTORE", value: 527, isUnsigned: true)
!1100 = !DIEnumerator(name: "BUILT_IN_OBJECT_SIZE", value: 528, isUnsigned: true)
!1101 = !DIEnumerator(name: "BUILT_IN_MEMCPY_CHK", value: 529, isUnsigned: true)
!1102 = !DIEnumerator(name: "BUILT_IN_MEMMOVE_CHK", value: 530, isUnsigned: true)
!1103 = !DIEnumerator(name: "BUILT_IN_MEMPCPY_CHK", value: 531, isUnsigned: true)
!1104 = !DIEnumerator(name: "BUILT_IN_MEMSET_CHK", value: 532, isUnsigned: true)
!1105 = !DIEnumerator(name: "BUILT_IN_STPCPY_CHK", value: 533, isUnsigned: true)
!1106 = !DIEnumerator(name: "BUILT_IN_STRCAT_CHK", value: 534, isUnsigned: true)
!1107 = !DIEnumerator(name: "BUILT_IN_STRCPY_CHK", value: 535, isUnsigned: true)
!1108 = !DIEnumerator(name: "BUILT_IN_STRNCAT_CHK", value: 536, isUnsigned: true)
!1109 = !DIEnumerator(name: "BUILT_IN_STRNCPY_CHK", value: 537, isUnsigned: true)
!1110 = !DIEnumerator(name: "BUILT_IN_SNPRINTF_CHK", value: 538, isUnsigned: true)
!1111 = !DIEnumerator(name: "BUILT_IN_SPRINTF_CHK", value: 539, isUnsigned: true)
!1112 = !DIEnumerator(name: "BUILT_IN_VSNPRINTF_CHK", value: 540, isUnsigned: true)
!1113 = !DIEnumerator(name: "BUILT_IN_VSPRINTF_CHK", value: 541, isUnsigned: true)
!1114 = !DIEnumerator(name: "BUILT_IN_FPRINTF_CHK", value: 542, isUnsigned: true)
!1115 = !DIEnumerator(name: "BUILT_IN_PRINTF_CHK", value: 543, isUnsigned: true)
!1116 = !DIEnumerator(name: "BUILT_IN_VFPRINTF_CHK", value: 544, isUnsigned: true)
!1117 = !DIEnumerator(name: "BUILT_IN_VPRINTF_CHK", value: 545, isUnsigned: true)
!1118 = !DIEnumerator(name: "BUILT_IN_PROFILE_FUNC_ENTER", value: 546, isUnsigned: true)
!1119 = !DIEnumerator(name: "BUILT_IN_PROFILE_FUNC_EXIT", value: 547, isUnsigned: true)
!1120 = !DIEnumerator(name: "BUILT_IN_EMUTLS_GET_ADDRESS", value: 548, isUnsigned: true)
!1121 = !DIEnumerator(name: "BUILT_IN_EMUTLS_REGISTER_COMMON", value: 549, isUnsigned: true)
!1122 = !DIEnumerator(name: "BUILT_IN_UNWIND_RESUME", value: 550, isUnsigned: true)
!1123 = !DIEnumerator(name: "BUILT_IN_CXA_END_CLEANUP", value: 551, isUnsigned: true)
!1124 = !DIEnumerator(name: "BUILT_IN_EH_POINTER", value: 552, isUnsigned: true)
!1125 = !DIEnumerator(name: "BUILT_IN_EH_FILTER", value: 553, isUnsigned: true)
!1126 = !DIEnumerator(name: "BUILT_IN_EH_COPY_VALUES", value: 554, isUnsigned: true)
!1127 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_ADD_N", value: 555, isUnsigned: true)
!1128 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_ADD_1", value: 556, isUnsigned: true)
!1129 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_ADD_2", value: 557, isUnsigned: true)
!1130 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_ADD_4", value: 558, isUnsigned: true)
!1131 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_ADD_8", value: 559, isUnsigned: true)
!1132 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_ADD_16", value: 560, isUnsigned: true)
!1133 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_SUB_N", value: 561, isUnsigned: true)
!1134 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_SUB_1", value: 562, isUnsigned: true)
!1135 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_SUB_2", value: 563, isUnsigned: true)
!1136 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_SUB_4", value: 564, isUnsigned: true)
!1137 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_SUB_8", value: 565, isUnsigned: true)
!1138 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_SUB_16", value: 566, isUnsigned: true)
!1139 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_OR_N", value: 567, isUnsigned: true)
!1140 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_OR_1", value: 568, isUnsigned: true)
!1141 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_OR_2", value: 569, isUnsigned: true)
!1142 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_OR_4", value: 570, isUnsigned: true)
!1143 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_OR_8", value: 571, isUnsigned: true)
!1144 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_OR_16", value: 572, isUnsigned: true)
!1145 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_AND_N", value: 573, isUnsigned: true)
!1146 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_AND_1", value: 574, isUnsigned: true)
!1147 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_AND_2", value: 575, isUnsigned: true)
!1148 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_AND_4", value: 576, isUnsigned: true)
!1149 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_AND_8", value: 577, isUnsigned: true)
!1150 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_AND_16", value: 578, isUnsigned: true)
!1151 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_XOR_N", value: 579, isUnsigned: true)
!1152 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_XOR_1", value: 580, isUnsigned: true)
!1153 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_XOR_2", value: 581, isUnsigned: true)
!1154 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_XOR_4", value: 582, isUnsigned: true)
!1155 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_XOR_8", value: 583, isUnsigned: true)
!1156 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_XOR_16", value: 584, isUnsigned: true)
!1157 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_NAND_N", value: 585, isUnsigned: true)
!1158 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_NAND_1", value: 586, isUnsigned: true)
!1159 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_NAND_2", value: 587, isUnsigned: true)
!1160 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_NAND_4", value: 588, isUnsigned: true)
!1161 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_NAND_8", value: 589, isUnsigned: true)
!1162 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_NAND_16", value: 590, isUnsigned: true)
!1163 = !DIEnumerator(name: "BUILT_IN_ADD_AND_FETCH_N", value: 591, isUnsigned: true)
!1164 = !DIEnumerator(name: "BUILT_IN_ADD_AND_FETCH_1", value: 592, isUnsigned: true)
!1165 = !DIEnumerator(name: "BUILT_IN_ADD_AND_FETCH_2", value: 593, isUnsigned: true)
!1166 = !DIEnumerator(name: "BUILT_IN_ADD_AND_FETCH_4", value: 594, isUnsigned: true)
!1167 = !DIEnumerator(name: "BUILT_IN_ADD_AND_FETCH_8", value: 595, isUnsigned: true)
!1168 = !DIEnumerator(name: "BUILT_IN_ADD_AND_FETCH_16", value: 596, isUnsigned: true)
!1169 = !DIEnumerator(name: "BUILT_IN_SUB_AND_FETCH_N", value: 597, isUnsigned: true)
!1170 = !DIEnumerator(name: "BUILT_IN_SUB_AND_FETCH_1", value: 598, isUnsigned: true)
!1171 = !DIEnumerator(name: "BUILT_IN_SUB_AND_FETCH_2", value: 599, isUnsigned: true)
!1172 = !DIEnumerator(name: "BUILT_IN_SUB_AND_FETCH_4", value: 600, isUnsigned: true)
!1173 = !DIEnumerator(name: "BUILT_IN_SUB_AND_FETCH_8", value: 601, isUnsigned: true)
!1174 = !DIEnumerator(name: "BUILT_IN_SUB_AND_FETCH_16", value: 602, isUnsigned: true)
!1175 = !DIEnumerator(name: "BUILT_IN_OR_AND_FETCH_N", value: 603, isUnsigned: true)
!1176 = !DIEnumerator(name: "BUILT_IN_OR_AND_FETCH_1", value: 604, isUnsigned: true)
!1177 = !DIEnumerator(name: "BUILT_IN_OR_AND_FETCH_2", value: 605, isUnsigned: true)
!1178 = !DIEnumerator(name: "BUILT_IN_OR_AND_FETCH_4", value: 606, isUnsigned: true)
!1179 = !DIEnumerator(name: "BUILT_IN_OR_AND_FETCH_8", value: 607, isUnsigned: true)
!1180 = !DIEnumerator(name: "BUILT_IN_OR_AND_FETCH_16", value: 608, isUnsigned: true)
!1181 = !DIEnumerator(name: "BUILT_IN_AND_AND_FETCH_N", value: 609, isUnsigned: true)
!1182 = !DIEnumerator(name: "BUILT_IN_AND_AND_FETCH_1", value: 610, isUnsigned: true)
!1183 = !DIEnumerator(name: "BUILT_IN_AND_AND_FETCH_2", value: 611, isUnsigned: true)
!1184 = !DIEnumerator(name: "BUILT_IN_AND_AND_FETCH_4", value: 612, isUnsigned: true)
!1185 = !DIEnumerator(name: "BUILT_IN_AND_AND_FETCH_8", value: 613, isUnsigned: true)
!1186 = !DIEnumerator(name: "BUILT_IN_AND_AND_FETCH_16", value: 614, isUnsigned: true)
!1187 = !DIEnumerator(name: "BUILT_IN_XOR_AND_FETCH_N", value: 615, isUnsigned: true)
!1188 = !DIEnumerator(name: "BUILT_IN_XOR_AND_FETCH_1", value: 616, isUnsigned: true)
!1189 = !DIEnumerator(name: "BUILT_IN_XOR_AND_FETCH_2", value: 617, isUnsigned: true)
!1190 = !DIEnumerator(name: "BUILT_IN_XOR_AND_FETCH_4", value: 618, isUnsigned: true)
!1191 = !DIEnumerator(name: "BUILT_IN_XOR_AND_FETCH_8", value: 619, isUnsigned: true)
!1192 = !DIEnumerator(name: "BUILT_IN_XOR_AND_FETCH_16", value: 620, isUnsigned: true)
!1193 = !DIEnumerator(name: "BUILT_IN_NAND_AND_FETCH_N", value: 621, isUnsigned: true)
!1194 = !DIEnumerator(name: "BUILT_IN_NAND_AND_FETCH_1", value: 622, isUnsigned: true)
!1195 = !DIEnumerator(name: "BUILT_IN_NAND_AND_FETCH_2", value: 623, isUnsigned: true)
!1196 = !DIEnumerator(name: "BUILT_IN_NAND_AND_FETCH_4", value: 624, isUnsigned: true)
!1197 = !DIEnumerator(name: "BUILT_IN_NAND_AND_FETCH_8", value: 625, isUnsigned: true)
!1198 = !DIEnumerator(name: "BUILT_IN_NAND_AND_FETCH_16", value: 626, isUnsigned: true)
!1199 = !DIEnumerator(name: "BUILT_IN_BOOL_COMPARE_AND_SWAP_N", value: 627, isUnsigned: true)
!1200 = !DIEnumerator(name: "BUILT_IN_BOOL_COMPARE_AND_SWAP_1", value: 628, isUnsigned: true)
!1201 = !DIEnumerator(name: "BUILT_IN_BOOL_COMPARE_AND_SWAP_2", value: 629, isUnsigned: true)
!1202 = !DIEnumerator(name: "BUILT_IN_BOOL_COMPARE_AND_SWAP_4", value: 630, isUnsigned: true)
!1203 = !DIEnumerator(name: "BUILT_IN_BOOL_COMPARE_AND_SWAP_8", value: 631, isUnsigned: true)
!1204 = !DIEnumerator(name: "BUILT_IN_BOOL_COMPARE_AND_SWAP_16", value: 632, isUnsigned: true)
!1205 = !DIEnumerator(name: "BUILT_IN_VAL_COMPARE_AND_SWAP_N", value: 633, isUnsigned: true)
!1206 = !DIEnumerator(name: "BUILT_IN_VAL_COMPARE_AND_SWAP_1", value: 634, isUnsigned: true)
!1207 = !DIEnumerator(name: "BUILT_IN_VAL_COMPARE_AND_SWAP_2", value: 635, isUnsigned: true)
!1208 = !DIEnumerator(name: "BUILT_IN_VAL_COMPARE_AND_SWAP_4", value: 636, isUnsigned: true)
!1209 = !DIEnumerator(name: "BUILT_IN_VAL_COMPARE_AND_SWAP_8", value: 637, isUnsigned: true)
!1210 = !DIEnumerator(name: "BUILT_IN_VAL_COMPARE_AND_SWAP_16", value: 638, isUnsigned: true)
!1211 = !DIEnumerator(name: "BUILT_IN_LOCK_TEST_AND_SET_N", value: 639, isUnsigned: true)
!1212 = !DIEnumerator(name: "BUILT_IN_LOCK_TEST_AND_SET_1", value: 640, isUnsigned: true)
!1213 = !DIEnumerator(name: "BUILT_IN_LOCK_TEST_AND_SET_2", value: 641, isUnsigned: true)
!1214 = !DIEnumerator(name: "BUILT_IN_LOCK_TEST_AND_SET_4", value: 642, isUnsigned: true)
!1215 = !DIEnumerator(name: "BUILT_IN_LOCK_TEST_AND_SET_8", value: 643, isUnsigned: true)
!1216 = !DIEnumerator(name: "BUILT_IN_LOCK_TEST_AND_SET_16", value: 644, isUnsigned: true)
!1217 = !DIEnumerator(name: "BUILT_IN_LOCK_RELEASE_N", value: 645, isUnsigned: true)
!1218 = !DIEnumerator(name: "BUILT_IN_LOCK_RELEASE_1", value: 646, isUnsigned: true)
!1219 = !DIEnumerator(name: "BUILT_IN_LOCK_RELEASE_2", value: 647, isUnsigned: true)
!1220 = !DIEnumerator(name: "BUILT_IN_LOCK_RELEASE_4", value: 648, isUnsigned: true)
!1221 = !DIEnumerator(name: "BUILT_IN_LOCK_RELEASE_8", value: 649, isUnsigned: true)
!1222 = !DIEnumerator(name: "BUILT_IN_LOCK_RELEASE_16", value: 650, isUnsigned: true)
!1223 = !DIEnumerator(name: "BUILT_IN_SYNCHRONIZE", value: 651, isUnsigned: true)
!1224 = !DIEnumerator(name: "BUILT_IN_OMP_GET_THREAD_NUM", value: 652, isUnsigned: true)
!1225 = !DIEnumerator(name: "BUILT_IN_OMP_GET_NUM_THREADS", value: 653, isUnsigned: true)
!1226 = !DIEnumerator(name: "BUILT_IN_GOMP_ATOMIC_START", value: 654, isUnsigned: true)
!1227 = !DIEnumerator(name: "BUILT_IN_GOMP_ATOMIC_END", value: 655, isUnsigned: true)
!1228 = !DIEnumerator(name: "BUILT_IN_GOMP_BARRIER", value: 656, isUnsigned: true)
!1229 = !DIEnumerator(name: "BUILT_IN_GOMP_TASKWAIT", value: 657, isUnsigned: true)
!1230 = !DIEnumerator(name: "BUILT_IN_GOMP_CRITICAL_START", value: 658, isUnsigned: true)
!1231 = !DIEnumerator(name: "BUILT_IN_GOMP_CRITICAL_END", value: 659, isUnsigned: true)
!1232 = !DIEnumerator(name: "BUILT_IN_GOMP_CRITICAL_NAME_START", value: 660, isUnsigned: true)
!1233 = !DIEnumerator(name: "BUILT_IN_GOMP_CRITICAL_NAME_END", value: 661, isUnsigned: true)
!1234 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_STATIC_START", value: 662, isUnsigned: true)
!1235 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_DYNAMIC_START", value: 663, isUnsigned: true)
!1236 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_GUIDED_START", value: 664, isUnsigned: true)
!1237 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_RUNTIME_START", value: 665, isUnsigned: true)
!1238 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ORDERED_STATIC_START", value: 666, isUnsigned: true)
!1239 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ORDERED_DYNAMIC_START", value: 667, isUnsigned: true)
!1240 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ORDERED_GUIDED_START", value: 668, isUnsigned: true)
!1241 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ORDERED_RUNTIME_START", value: 669, isUnsigned: true)
!1242 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_STATIC_NEXT", value: 670, isUnsigned: true)
!1243 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_DYNAMIC_NEXT", value: 671, isUnsigned: true)
!1244 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_GUIDED_NEXT", value: 672, isUnsigned: true)
!1245 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_RUNTIME_NEXT", value: 673, isUnsigned: true)
!1246 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ORDERED_STATIC_NEXT", value: 674, isUnsigned: true)
!1247 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ORDERED_DYNAMIC_NEXT", value: 675, isUnsigned: true)
!1248 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ORDERED_GUIDED_NEXT", value: 676, isUnsigned: true)
!1249 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ORDERED_RUNTIME_NEXT", value: 677, isUnsigned: true)
!1250 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_STATIC_START", value: 678, isUnsigned: true)
!1251 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_DYNAMIC_START", value: 679, isUnsigned: true)
!1252 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_GUIDED_START", value: 680, isUnsigned: true)
!1253 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_RUNTIME_START", value: 681, isUnsigned: true)
!1254 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_ORDERED_STATIC_START", value: 682, isUnsigned: true)
!1255 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_ORDERED_DYNAMIC_START", value: 683, isUnsigned: true)
!1256 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_ORDERED_GUIDED_START", value: 684, isUnsigned: true)
!1257 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_ORDERED_RUNTIME_START", value: 685, isUnsigned: true)
!1258 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_STATIC_NEXT", value: 686, isUnsigned: true)
!1259 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_DYNAMIC_NEXT", value: 687, isUnsigned: true)
!1260 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_GUIDED_NEXT", value: 688, isUnsigned: true)
!1261 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_RUNTIME_NEXT", value: 689, isUnsigned: true)
!1262 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_ORDERED_STATIC_NEXT", value: 690, isUnsigned: true)
!1263 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_ORDERED_DYNAMIC_NEXT", value: 691, isUnsigned: true)
!1264 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_ORDERED_GUIDED_NEXT", value: 692, isUnsigned: true)
!1265 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_ORDERED_RUNTIME_NEXT", value: 693, isUnsigned: true)
!1266 = !DIEnumerator(name: "BUILT_IN_GOMP_PARALLEL_LOOP_STATIC_START", value: 694, isUnsigned: true)
!1267 = !DIEnumerator(name: "BUILT_IN_GOMP_PARALLEL_LOOP_DYNAMIC_START", value: 695, isUnsigned: true)
!1268 = !DIEnumerator(name: "BUILT_IN_GOMP_PARALLEL_LOOP_GUIDED_START", value: 696, isUnsigned: true)
!1269 = !DIEnumerator(name: "BUILT_IN_GOMP_PARALLEL_LOOP_RUNTIME_START", value: 697, isUnsigned: true)
!1270 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_END", value: 698, isUnsigned: true)
!1271 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_END_NOWAIT", value: 699, isUnsigned: true)
!1272 = !DIEnumerator(name: "BUILT_IN_GOMP_ORDERED_START", value: 700, isUnsigned: true)
!1273 = !DIEnumerator(name: "BUILT_IN_GOMP_ORDERED_END", value: 701, isUnsigned: true)
!1274 = !DIEnumerator(name: "BUILT_IN_GOMP_PARALLEL_START", value: 702, isUnsigned: true)
!1275 = !DIEnumerator(name: "BUILT_IN_GOMP_PARALLEL_END", value: 703, isUnsigned: true)
!1276 = !DIEnumerator(name: "BUILT_IN_GOMP_TASK", value: 704, isUnsigned: true)
!1277 = !DIEnumerator(name: "BUILT_IN_GOMP_SECTIONS_START", value: 705, isUnsigned: true)
!1278 = !DIEnumerator(name: "BUILT_IN_GOMP_SECTIONS_NEXT", value: 706, isUnsigned: true)
!1279 = !DIEnumerator(name: "BUILT_IN_GOMP_PARALLEL_SECTIONS_START", value: 707, isUnsigned: true)
!1280 = !DIEnumerator(name: "BUILT_IN_GOMP_SECTIONS_END", value: 708, isUnsigned: true)
!1281 = !DIEnumerator(name: "BUILT_IN_GOMP_SECTIONS_END_NOWAIT", value: 709, isUnsigned: true)
!1282 = !DIEnumerator(name: "BUILT_IN_GOMP_SINGLE_START", value: 710, isUnsigned: true)
!1283 = !DIEnumerator(name: "BUILT_IN_GOMP_SINGLE_COPY_START", value: 711, isUnsigned: true)
!1284 = !DIEnumerator(name: "BUILT_IN_GOMP_SINGLE_COPY_END", value: 712, isUnsigned: true)
!1285 = !DIEnumerator(name: "BUILT_IN_COMPLEX_MUL_MIN", value: 713, isUnsigned: true)
!1286 = !DIEnumerator(name: "BUILT_IN_COMPLEX_MUL_MAX", value: 716, isUnsigned: true)
!1287 = !DIEnumerator(name: "BUILT_IN_COMPLEX_DIV_MIN", value: 717, isUnsigned: true)
!1288 = !DIEnumerator(name: "BUILT_IN_COMPLEX_DIV_MAX", value: 720, isUnsigned: true)
!1289 = !DIEnumerator(name: "END_BUILTINS", value: 721, isUnsigned: true)
!1290 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gsi_iterator_update", file: !1291, line: 4603, baseType: !7, size: 32, elements: !1292)
!1291 = !DIFile(filename: "./gimple.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1292 = !{!1293, !1294, !1295}
!1293 = !DIEnumerator(name: "GSI_NEW_STMT", value: 0, isUnsigned: true)
!1294 = !DIEnumerator(name: "GSI_SAME_STMT", value: 1, isUnsigned: true)
!1295 = !DIEnumerator(name: "GSI_CONTINUE_LINKING", value: 2, isUnsigned: true)
!1296 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gimple_code", file: !1291, line: 51, baseType: !7, size: 32, elements: !1297)
!1297 = !{!1298, !1299, !1300, !1301, !1302, !1303, !1304, !1305, !1306, !1307, !1308, !1309, !1310, !1311, !1312, !1313, !1314, !1315, !1316, !1317, !1318, !1319, !1320, !1321, !1322, !1323, !1324, !1325, !1326, !1327, !1328, !1329, !1330, !1331, !1332, !1333}
!1298 = !DIEnumerator(name: "GIMPLE_ERROR_MARK", value: 0, isUnsigned: true)
!1299 = !DIEnumerator(name: "GIMPLE_COND", value: 1, isUnsigned: true)
!1300 = !DIEnumerator(name: "GIMPLE_DEBUG", value: 2, isUnsigned: true)
!1301 = !DIEnumerator(name: "GIMPLE_GOTO", value: 3, isUnsigned: true)
!1302 = !DIEnumerator(name: "GIMPLE_LABEL", value: 4, isUnsigned: true)
!1303 = !DIEnumerator(name: "GIMPLE_SWITCH", value: 5, isUnsigned: true)
!1304 = !DIEnumerator(name: "GIMPLE_ASSIGN", value: 6, isUnsigned: true)
!1305 = !DIEnumerator(name: "GIMPLE_ASM", value: 7, isUnsigned: true)
!1306 = !DIEnumerator(name: "GIMPLE_CALL", value: 8, isUnsigned: true)
!1307 = !DIEnumerator(name: "GIMPLE_RETURN", value: 9, isUnsigned: true)
!1308 = !DIEnumerator(name: "GIMPLE_BIND", value: 10, isUnsigned: true)
!1309 = !DIEnumerator(name: "GIMPLE_CATCH", value: 11, isUnsigned: true)
!1310 = !DIEnumerator(name: "GIMPLE_EH_FILTER", value: 12, isUnsigned: true)
!1311 = !DIEnumerator(name: "GIMPLE_EH_MUST_NOT_THROW", value: 13, isUnsigned: true)
!1312 = !DIEnumerator(name: "GIMPLE_RESX", value: 14, isUnsigned: true)
!1313 = !DIEnumerator(name: "GIMPLE_EH_DISPATCH", value: 15, isUnsigned: true)
!1314 = !DIEnumerator(name: "GIMPLE_PHI", value: 16, isUnsigned: true)
!1315 = !DIEnumerator(name: "GIMPLE_TRY", value: 17, isUnsigned: true)
!1316 = !DIEnumerator(name: "GIMPLE_NOP", value: 18, isUnsigned: true)
!1317 = !DIEnumerator(name: "GIMPLE_OMP_ATOMIC_LOAD", value: 19, isUnsigned: true)
!1318 = !DIEnumerator(name: "GIMPLE_OMP_ATOMIC_STORE", value: 20, isUnsigned: true)
!1319 = !DIEnumerator(name: "GIMPLE_OMP_CONTINUE", value: 21, isUnsigned: true)
!1320 = !DIEnumerator(name: "GIMPLE_OMP_CRITICAL", value: 22, isUnsigned: true)
!1321 = !DIEnumerator(name: "GIMPLE_OMP_FOR", value: 23, isUnsigned: true)
!1322 = !DIEnumerator(name: "GIMPLE_OMP_MASTER", value: 24, isUnsigned: true)
!1323 = !DIEnumerator(name: "GIMPLE_OMP_ORDERED", value: 25, isUnsigned: true)
!1324 = !DIEnumerator(name: "GIMPLE_OMP_PARALLEL", value: 26, isUnsigned: true)
!1325 = !DIEnumerator(name: "GIMPLE_OMP_TASK", value: 27, isUnsigned: true)
!1326 = !DIEnumerator(name: "GIMPLE_OMP_RETURN", value: 28, isUnsigned: true)
!1327 = !DIEnumerator(name: "GIMPLE_OMP_SECTION", value: 29, isUnsigned: true)
!1328 = !DIEnumerator(name: "GIMPLE_OMP_SECTIONS", value: 30, isUnsigned: true)
!1329 = !DIEnumerator(name: "GIMPLE_OMP_SECTIONS_SWITCH", value: 31, isUnsigned: true)
!1330 = !DIEnumerator(name: "GIMPLE_OMP_SINGLE", value: 32, isUnsigned: true)
!1331 = !DIEnumerator(name: "GIMPLE_PREDICT", value: 33, isUnsigned: true)
!1332 = !DIEnumerator(name: "GIMPLE_WITH_CLEANUP_EXPR", value: 34, isUnsigned: true)
!1333 = !DIEnumerator(name: "LAST_AND_UNUSED_GIMPLE_CODE", value: 35, isUnsigned: true)
!1334 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "bb_flags", file: !318, line: 295, baseType: !7, size: 32, elements: !1335)
!1335 = !{!1336, !1337, !1338, !1339, !1340, !1341, !1342, !1343, !1344, !1345, !1346, !1347}
!1336 = !DIEnumerator(name: "BB_NEW", value: 1, isUnsigned: true)
!1337 = !DIEnumerator(name: "BB_REACHABLE", value: 2, isUnsigned: true)
!1338 = !DIEnumerator(name: "BB_IRREDUCIBLE_LOOP", value: 4, isUnsigned: true)
!1339 = !DIEnumerator(name: "BB_SUPERBLOCK", value: 8, isUnsigned: true)
!1340 = !DIEnumerator(name: "BB_DISABLE_SCHEDULE", value: 16, isUnsigned: true)
!1341 = !DIEnumerator(name: "BB_HOT_PARTITION", value: 32, isUnsigned: true)
!1342 = !DIEnumerator(name: "BB_COLD_PARTITION", value: 64, isUnsigned: true)
!1343 = !DIEnumerator(name: "BB_DUPLICATED", value: 128, isUnsigned: true)
!1344 = !DIEnumerator(name: "BB_NON_LOCAL_GOTO_TARGET", value: 256, isUnsigned: true)
!1345 = !DIEnumerator(name: "BB_RTL", value: 512, isUnsigned: true)
!1346 = !DIEnumerator(name: "BB_FORWARDER_BLOCK", value: 1024, isUnsigned: true)
!1347 = !DIEnumerator(name: "BB_NONTHREADABLE_BLOCK", value: 2048, isUnsigned: true)
!1348 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "ssa_op_iter_type", file: !1349, line: 119, baseType: !7, size: 32, elements: !1350)
!1349 = !DIFile(filename: "./tree-ssa-operands.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1350 = !{!1351, !1352, !1353, !1354}
!1351 = !DIEnumerator(name: "ssa_op_iter_none", value: 0, isUnsigned: true)
!1352 = !DIEnumerator(name: "ssa_op_iter_tree", value: 1, isUnsigned: true)
!1353 = !DIEnumerator(name: "ssa_op_iter_use", value: 2, isUnsigned: true)
!1354 = !DIEnumerator(name: "ssa_op_iter_def", value: 3, isUnsigned: true)
!1355 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gimple_rhs_class", file: !1291, line: 80, baseType: !7, size: 32, elements: !1356)
!1356 = !{!1357, !1358, !1359, !1360}
!1357 = !DIEnumerator(name: "GIMPLE_INVALID_RHS", value: 0, isUnsigned: true)
!1358 = !DIEnumerator(name: "GIMPLE_BINARY_RHS", value: 1, isUnsigned: true)
!1359 = !DIEnumerator(name: "GIMPLE_UNARY_RHS", value: 2, isUnsigned: true)
!1360 = !DIEnumerator(name: "GIMPLE_SINGLE_RHS", value: 3, isUnsigned: true)
!1361 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gimple_statement_structure_enum", file: !1291, line: 727, baseType: !7, size: 32, elements: !1362)
!1362 = !{!1363, !1364, !1365, !1366, !1367, !1368, !1369, !1370, !1371, !1372, !1373, !1374, !1375, !1376, !1377, !1378, !1379, !1380, !1381, !1382, !1383, !1384, !1385, !1386}
!1363 = !DIEnumerator(name: "GSS_BASE", value: 0, isUnsigned: true)
!1364 = !DIEnumerator(name: "GSS_WITH_OPS", value: 1, isUnsigned: true)
!1365 = !DIEnumerator(name: "GSS_WITH_MEM_OPS_BASE", value: 2, isUnsigned: true)
!1366 = !DIEnumerator(name: "GSS_WITH_MEM_OPS", value: 3, isUnsigned: true)
!1367 = !DIEnumerator(name: "GSS_ASM", value: 4, isUnsigned: true)
!1368 = !DIEnumerator(name: "GSS_BIND", value: 5, isUnsigned: true)
!1369 = !DIEnumerator(name: "GSS_PHI", value: 6, isUnsigned: true)
!1370 = !DIEnumerator(name: "GSS_TRY", value: 7, isUnsigned: true)
!1371 = !DIEnumerator(name: "GSS_CATCH", value: 8, isUnsigned: true)
!1372 = !DIEnumerator(name: "GSS_EH_FILTER", value: 9, isUnsigned: true)
!1373 = !DIEnumerator(name: "GSS_EH_MNT", value: 10, isUnsigned: true)
!1374 = !DIEnumerator(name: "GSS_EH_CTRL", value: 11, isUnsigned: true)
!1375 = !DIEnumerator(name: "GSS_WCE", value: 12, isUnsigned: true)
!1376 = !DIEnumerator(name: "GSS_OMP", value: 13, isUnsigned: true)
!1377 = !DIEnumerator(name: "GSS_OMP_CRITICAL", value: 14, isUnsigned: true)
!1378 = !DIEnumerator(name: "GSS_OMP_FOR", value: 15, isUnsigned: true)
!1379 = !DIEnumerator(name: "GSS_OMP_PARALLEL", value: 16, isUnsigned: true)
!1380 = !DIEnumerator(name: "GSS_OMP_TASK", value: 17, isUnsigned: true)
!1381 = !DIEnumerator(name: "GSS_OMP_SECTIONS", value: 18, isUnsigned: true)
!1382 = !DIEnumerator(name: "GSS_OMP_SINGLE", value: 19, isUnsigned: true)
!1383 = !DIEnumerator(name: "GSS_OMP_CONTINUE", value: 20, isUnsigned: true)
!1384 = !DIEnumerator(name: "GSS_OMP_ATOMIC_LOAD", value: 21, isUnsigned: true)
!1385 = !DIEnumerator(name: "GSS_OMP_ATOMIC_STORE", value: 22, isUnsigned: true)
!1386 = !DIEnumerator(name: "LAST_GSS_ENUM", value: 23, isUnsigned: true)
!1387 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "optab_index", file: !1388, line: 76, baseType: !7, size: 32, elements: !1389)
!1388 = !DIFile(filename: "./optabs.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1389 = !{!1390, !1391, !1392, !1393, !1394, !1395, !1396, !1397, !1398, !1399, !1400, !1401, !1402, !1403, !1404, !1405, !1406, !1407, !1408, !1409, !1410, !1411, !1412, !1413, !1414, !1415, !1416, !1417, !1418, !1419, !1420, !1421, !1422, !1423, !1424, !1425, !1426, !1427, !1428, !1429, !1430, !1431, !1432, !1433, !1434, !1435, !1436, !1437, !1438, !1439, !1440, !1441, !1442, !1443, !1444, !1445, !1446, !1447, !1448, !1449, !1450, !1451, !1452, !1453, !1454, !1455, !1456, !1457, !1458, !1459, !1460, !1461, !1462, !1463, !1464, !1465, !1466, !1467, !1468, !1469, !1470, !1471, !1472, !1473, !1474, !1475, !1476, !1477, !1478, !1479, !1480, !1481, !1482, !1483, !1484, !1485, !1486, !1487, !1488, !1489, !1490, !1491, !1492, !1493, !1494, !1495, !1496, !1497, !1498, !1499, !1500, !1501, !1502, !1503, !1504, !1505, !1506, !1507, !1508, !1509, !1510, !1511, !1512, !1513, !1514, !1515, !1516, !1517, !1518, !1519, !1520, !1521, !1522, !1523, !1524, !1525, !1526, !1527, !1528, !1529, !1530, !1531, !1532, !1533, !1534, !1535, !1536, !1537, !1538, !1539, !1540, !1541, !1542, !1543, !1544, !1545, !1546, !1547, !1548, !1549}
!1390 = !DIEnumerator(name: "OTI_ssadd", value: 0, isUnsigned: true)
!1391 = !DIEnumerator(name: "OTI_usadd", value: 1, isUnsigned: true)
!1392 = !DIEnumerator(name: "OTI_sssub", value: 2, isUnsigned: true)
!1393 = !DIEnumerator(name: "OTI_ussub", value: 3, isUnsigned: true)
!1394 = !DIEnumerator(name: "OTI_ssmul", value: 4, isUnsigned: true)
!1395 = !DIEnumerator(name: "OTI_usmul", value: 5, isUnsigned: true)
!1396 = !DIEnumerator(name: "OTI_ssdiv", value: 6, isUnsigned: true)
!1397 = !DIEnumerator(name: "OTI_usdiv", value: 7, isUnsigned: true)
!1398 = !DIEnumerator(name: "OTI_ssneg", value: 8, isUnsigned: true)
!1399 = !DIEnumerator(name: "OTI_usneg", value: 9, isUnsigned: true)
!1400 = !DIEnumerator(name: "OTI_ssashl", value: 10, isUnsigned: true)
!1401 = !DIEnumerator(name: "OTI_usashl", value: 11, isUnsigned: true)
!1402 = !DIEnumerator(name: "OTI_add", value: 12, isUnsigned: true)
!1403 = !DIEnumerator(name: "OTI_addv", value: 13, isUnsigned: true)
!1404 = !DIEnumerator(name: "OTI_sub", value: 14, isUnsigned: true)
!1405 = !DIEnumerator(name: "OTI_subv", value: 15, isUnsigned: true)
!1406 = !DIEnumerator(name: "OTI_smul", value: 16, isUnsigned: true)
!1407 = !DIEnumerator(name: "OTI_smulv", value: 17, isUnsigned: true)
!1408 = !DIEnumerator(name: "OTI_smul_highpart", value: 18, isUnsigned: true)
!1409 = !DIEnumerator(name: "OTI_umul_highpart", value: 19, isUnsigned: true)
!1410 = !DIEnumerator(name: "OTI_smul_widen", value: 20, isUnsigned: true)
!1411 = !DIEnumerator(name: "OTI_umul_widen", value: 21, isUnsigned: true)
!1412 = !DIEnumerator(name: "OTI_usmul_widen", value: 22, isUnsigned: true)
!1413 = !DIEnumerator(name: "OTI_smadd_widen", value: 23, isUnsigned: true)
!1414 = !DIEnumerator(name: "OTI_umadd_widen", value: 24, isUnsigned: true)
!1415 = !DIEnumerator(name: "OTI_ssmadd_widen", value: 25, isUnsigned: true)
!1416 = !DIEnumerator(name: "OTI_usmadd_widen", value: 26, isUnsigned: true)
!1417 = !DIEnumerator(name: "OTI_smsub_widen", value: 27, isUnsigned: true)
!1418 = !DIEnumerator(name: "OTI_umsub_widen", value: 28, isUnsigned: true)
!1419 = !DIEnumerator(name: "OTI_ssmsub_widen", value: 29, isUnsigned: true)
!1420 = !DIEnumerator(name: "OTI_usmsub_widen", value: 30, isUnsigned: true)
!1421 = !DIEnumerator(name: "OTI_sdiv", value: 31, isUnsigned: true)
!1422 = !DIEnumerator(name: "OTI_sdivv", value: 32, isUnsigned: true)
!1423 = !DIEnumerator(name: "OTI_sdivmod", value: 33, isUnsigned: true)
!1424 = !DIEnumerator(name: "OTI_udiv", value: 34, isUnsigned: true)
!1425 = !DIEnumerator(name: "OTI_udivmod", value: 35, isUnsigned: true)
!1426 = !DIEnumerator(name: "OTI_smod", value: 36, isUnsigned: true)
!1427 = !DIEnumerator(name: "OTI_umod", value: 37, isUnsigned: true)
!1428 = !DIEnumerator(name: "OTI_fmod", value: 38, isUnsigned: true)
!1429 = !DIEnumerator(name: "OTI_remainder", value: 39, isUnsigned: true)
!1430 = !DIEnumerator(name: "OTI_ftrunc", value: 40, isUnsigned: true)
!1431 = !DIEnumerator(name: "OTI_and", value: 41, isUnsigned: true)
!1432 = !DIEnumerator(name: "OTI_ior", value: 42, isUnsigned: true)
!1433 = !DIEnumerator(name: "OTI_xor", value: 43, isUnsigned: true)
!1434 = !DIEnumerator(name: "OTI_ashl", value: 44, isUnsigned: true)
!1435 = !DIEnumerator(name: "OTI_lshr", value: 45, isUnsigned: true)
!1436 = !DIEnumerator(name: "OTI_ashr", value: 46, isUnsigned: true)
!1437 = !DIEnumerator(name: "OTI_rotl", value: 47, isUnsigned: true)
!1438 = !DIEnumerator(name: "OTI_rotr", value: 48, isUnsigned: true)
!1439 = !DIEnumerator(name: "OTI_vashl", value: 49, isUnsigned: true)
!1440 = !DIEnumerator(name: "OTI_vlshr", value: 50, isUnsigned: true)
!1441 = !DIEnumerator(name: "OTI_vashr", value: 51, isUnsigned: true)
!1442 = !DIEnumerator(name: "OTI_vrotl", value: 52, isUnsigned: true)
!1443 = !DIEnumerator(name: "OTI_vrotr", value: 53, isUnsigned: true)
!1444 = !DIEnumerator(name: "OTI_smin", value: 54, isUnsigned: true)
!1445 = !DIEnumerator(name: "OTI_smax", value: 55, isUnsigned: true)
!1446 = !DIEnumerator(name: "OTI_umin", value: 56, isUnsigned: true)
!1447 = !DIEnumerator(name: "OTI_umax", value: 57, isUnsigned: true)
!1448 = !DIEnumerator(name: "OTI_pow", value: 58, isUnsigned: true)
!1449 = !DIEnumerator(name: "OTI_atan2", value: 59, isUnsigned: true)
!1450 = !DIEnumerator(name: "OTI_mov", value: 60, isUnsigned: true)
!1451 = !DIEnumerator(name: "OTI_movstrict", value: 61, isUnsigned: true)
!1452 = !DIEnumerator(name: "OTI_movmisalign", value: 62, isUnsigned: true)
!1453 = !DIEnumerator(name: "OTI_storent", value: 63, isUnsigned: true)
!1454 = !DIEnumerator(name: "OTI_neg", value: 64, isUnsigned: true)
!1455 = !DIEnumerator(name: "OTI_negv", value: 65, isUnsigned: true)
!1456 = !DIEnumerator(name: "OTI_abs", value: 66, isUnsigned: true)
!1457 = !DIEnumerator(name: "OTI_absv", value: 67, isUnsigned: true)
!1458 = !DIEnumerator(name: "OTI_bswap", value: 68, isUnsigned: true)
!1459 = !DIEnumerator(name: "OTI_one_cmpl", value: 69, isUnsigned: true)
!1460 = !DIEnumerator(name: "OTI_ffs", value: 70, isUnsigned: true)
!1461 = !DIEnumerator(name: "OTI_clz", value: 71, isUnsigned: true)
!1462 = !DIEnumerator(name: "OTI_ctz", value: 72, isUnsigned: true)
!1463 = !DIEnumerator(name: "OTI_popcount", value: 73, isUnsigned: true)
!1464 = !DIEnumerator(name: "OTI_parity", value: 74, isUnsigned: true)
!1465 = !DIEnumerator(name: "OTI_sqrt", value: 75, isUnsigned: true)
!1466 = !DIEnumerator(name: "OTI_sincos", value: 76, isUnsigned: true)
!1467 = !DIEnumerator(name: "OTI_sin", value: 77, isUnsigned: true)
!1468 = !DIEnumerator(name: "OTI_asin", value: 78, isUnsigned: true)
!1469 = !DIEnumerator(name: "OTI_cos", value: 79, isUnsigned: true)
!1470 = !DIEnumerator(name: "OTI_acos", value: 80, isUnsigned: true)
!1471 = !DIEnumerator(name: "OTI_exp", value: 81, isUnsigned: true)
!1472 = !DIEnumerator(name: "OTI_exp10", value: 82, isUnsigned: true)
!1473 = !DIEnumerator(name: "OTI_exp2", value: 83, isUnsigned: true)
!1474 = !DIEnumerator(name: "OTI_expm1", value: 84, isUnsigned: true)
!1475 = !DIEnumerator(name: "OTI_ldexp", value: 85, isUnsigned: true)
!1476 = !DIEnumerator(name: "OTI_scalb", value: 86, isUnsigned: true)
!1477 = !DIEnumerator(name: "OTI_significand", value: 87, isUnsigned: true)
!1478 = !DIEnumerator(name: "OTI_logb", value: 88, isUnsigned: true)
!1479 = !DIEnumerator(name: "OTI_ilogb", value: 89, isUnsigned: true)
!1480 = !DIEnumerator(name: "OTI_log", value: 90, isUnsigned: true)
!1481 = !DIEnumerator(name: "OTI_log10", value: 91, isUnsigned: true)
!1482 = !DIEnumerator(name: "OTI_log2", value: 92, isUnsigned: true)
!1483 = !DIEnumerator(name: "OTI_log1p", value: 93, isUnsigned: true)
!1484 = !DIEnumerator(name: "OTI_floor", value: 94, isUnsigned: true)
!1485 = !DIEnumerator(name: "OTI_ceil", value: 95, isUnsigned: true)
!1486 = !DIEnumerator(name: "OTI_btrunc", value: 96, isUnsigned: true)
!1487 = !DIEnumerator(name: "OTI_round", value: 97, isUnsigned: true)
!1488 = !DIEnumerator(name: "OTI_nearbyint", value: 98, isUnsigned: true)
!1489 = !DIEnumerator(name: "OTI_rint", value: 99, isUnsigned: true)
!1490 = !DIEnumerator(name: "OTI_tan", value: 100, isUnsigned: true)
!1491 = !DIEnumerator(name: "OTI_atan", value: 101, isUnsigned: true)
!1492 = !DIEnumerator(name: "OTI_copysign", value: 102, isUnsigned: true)
!1493 = !DIEnumerator(name: "OTI_signbit", value: 103, isUnsigned: true)
!1494 = !DIEnumerator(name: "OTI_isinf", value: 104, isUnsigned: true)
!1495 = !DIEnumerator(name: "OTI_cmp", value: 105, isUnsigned: true)
!1496 = !DIEnumerator(name: "OTI_ucmp", value: 106, isUnsigned: true)
!1497 = !DIEnumerator(name: "OTI_eq", value: 107, isUnsigned: true)
!1498 = !DIEnumerator(name: "OTI_ne", value: 108, isUnsigned: true)
!1499 = !DIEnumerator(name: "OTI_gt", value: 109, isUnsigned: true)
!1500 = !DIEnumerator(name: "OTI_ge", value: 110, isUnsigned: true)
!1501 = !DIEnumerator(name: "OTI_lt", value: 111, isUnsigned: true)
!1502 = !DIEnumerator(name: "OTI_le", value: 112, isUnsigned: true)
!1503 = !DIEnumerator(name: "OTI_unord", value: 113, isUnsigned: true)
!1504 = !DIEnumerator(name: "OTI_strlen", value: 114, isUnsigned: true)
!1505 = !DIEnumerator(name: "OTI_cbranch", value: 115, isUnsigned: true)
!1506 = !DIEnumerator(name: "OTI_cmov", value: 116, isUnsigned: true)
!1507 = !DIEnumerator(name: "OTI_cstore", value: 117, isUnsigned: true)
!1508 = !DIEnumerator(name: "OTI_ctrap", value: 118, isUnsigned: true)
!1509 = !DIEnumerator(name: "OTI_push", value: 119, isUnsigned: true)
!1510 = !DIEnumerator(name: "OTI_addcc", value: 120, isUnsigned: true)
!1511 = !DIEnumerator(name: "OTI_reduc_smax", value: 121, isUnsigned: true)
!1512 = !DIEnumerator(name: "OTI_reduc_umax", value: 122, isUnsigned: true)
!1513 = !DIEnumerator(name: "OTI_reduc_smin", value: 123, isUnsigned: true)
!1514 = !DIEnumerator(name: "OTI_reduc_umin", value: 124, isUnsigned: true)
!1515 = !DIEnumerator(name: "OTI_reduc_splus", value: 125, isUnsigned: true)
!1516 = !DIEnumerator(name: "OTI_reduc_uplus", value: 126, isUnsigned: true)
!1517 = !DIEnumerator(name: "OTI_ssum_widen", value: 127, isUnsigned: true)
!1518 = !DIEnumerator(name: "OTI_usum_widen", value: 128, isUnsigned: true)
!1519 = !DIEnumerator(name: "OTI_sdot_prod", value: 129, isUnsigned: true)
!1520 = !DIEnumerator(name: "OTI_udot_prod", value: 130, isUnsigned: true)
!1521 = !DIEnumerator(name: "OTI_vec_set", value: 131, isUnsigned: true)
!1522 = !DIEnumerator(name: "OTI_vec_extract", value: 132, isUnsigned: true)
!1523 = !DIEnumerator(name: "OTI_vec_extract_even", value: 133, isUnsigned: true)
!1524 = !DIEnumerator(name: "OTI_vec_extract_odd", value: 134, isUnsigned: true)
!1525 = !DIEnumerator(name: "OTI_vec_interleave_high", value: 135, isUnsigned: true)
!1526 = !DIEnumerator(name: "OTI_vec_interleave_low", value: 136, isUnsigned: true)
!1527 = !DIEnumerator(name: "OTI_vec_init", value: 137, isUnsigned: true)
!1528 = !DIEnumerator(name: "OTI_vec_shl", value: 138, isUnsigned: true)
!1529 = !DIEnumerator(name: "OTI_vec_shr", value: 139, isUnsigned: true)
!1530 = !DIEnumerator(name: "OTI_vec_realign_load", value: 140, isUnsigned: true)
!1531 = !DIEnumerator(name: "OTI_vec_widen_umult_hi", value: 141, isUnsigned: true)
!1532 = !DIEnumerator(name: "OTI_vec_widen_umult_lo", value: 142, isUnsigned: true)
!1533 = !DIEnumerator(name: "OTI_vec_widen_smult_hi", value: 143, isUnsigned: true)
!1534 = !DIEnumerator(name: "OTI_vec_widen_smult_lo", value: 144, isUnsigned: true)
!1535 = !DIEnumerator(name: "OTI_vec_unpacks_hi", value: 145, isUnsigned: true)
!1536 = !DIEnumerator(name: "OTI_vec_unpacks_lo", value: 146, isUnsigned: true)
!1537 = !DIEnumerator(name: "OTI_vec_unpacku_hi", value: 147, isUnsigned: true)
!1538 = !DIEnumerator(name: "OTI_vec_unpacku_lo", value: 148, isUnsigned: true)
!1539 = !DIEnumerator(name: "OTI_vec_unpacks_float_hi", value: 149, isUnsigned: true)
!1540 = !DIEnumerator(name: "OTI_vec_unpacks_float_lo", value: 150, isUnsigned: true)
!1541 = !DIEnumerator(name: "OTI_vec_unpacku_float_hi", value: 151, isUnsigned: true)
!1542 = !DIEnumerator(name: "OTI_vec_unpacku_float_lo", value: 152, isUnsigned: true)
!1543 = !DIEnumerator(name: "OTI_vec_pack_trunc", value: 153, isUnsigned: true)
!1544 = !DIEnumerator(name: "OTI_vec_pack_usat", value: 154, isUnsigned: true)
!1545 = !DIEnumerator(name: "OTI_vec_pack_ssat", value: 155, isUnsigned: true)
!1546 = !DIEnumerator(name: "OTI_vec_pack_sfix_trunc", value: 156, isUnsigned: true)
!1547 = !DIEnumerator(name: "OTI_vec_pack_ufix_trunc", value: 157, isUnsigned: true)
!1548 = !DIEnumerator(name: "OTI_powi", value: 158, isUnsigned: true)
!1549 = !DIEnumerator(name: "OTI_MAX", value: 159, isUnsigned: true)
!1550 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "insn_code", file: !1551, line: 7, baseType: !7, size: 32, elements: !1552)
!1551 = !DIFile(filename: "./insn-codes.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1552 = !{!1553, !1554, !1555, !1556, !1557, !1558, !1559, !1560, !1561, !1562, !1563, !1564, !1565, !1566, !1567, !1568, !1569, !1570, !1571, !1572, !1573, !1574, !1575, !1576, !1577, !1578, !1579, !1580, !1581, !1582, !1583, !1584, !1585, !1586, !1587, !1588, !1589, !1590, !1591, !1592, !1593, !1594, !1595, !1596, !1597, !1598, !1599, !1600, !1601, !1602, !1603, !1604, !1605, !1606, !1607, !1608, !1609, !1610, !1611, !1612, !1613, !1614, !1615, !1616, !1617, !1618, !1619, !1620, !1621, !1622, !1623, !1624, !1625, !1626, !1627, !1628, !1629, !1630, !1631, !1632, !1633, !1634, !1635, !1636, !1637, !1638, !1639, !1640, !1641, !1642, !1643, !1644, !1645, !1646, !1647, !1648, !1649, !1650, !1651, !1652, !1653, !1654, !1655, !1656, !1657, !1658, !1659, !1660, !1661, !1662, !1663, !1664, !1665, !1666, !1667, !1668, !1669, !1670, !1671, !1672, !1673, !1674, !1675, !1676, !1677, !1678, !1679, !1680, !1681, !1682, !1683, !1684, !1685, !1686, !1687, !1688, !1689, !1690, !1691, !1692, !1693, !1694, !1695, !1696, !1697, !1698, !1699, !1700, !1701, !1702, !1703, !1704, !1705, !1706, !1707, !1708, !1709, !1710, !1711, !1712, !1713, !1714, !1715, !1716, !1717, !1718, !1719, !1720, !1721, !1722, !1723, !1724, !1725, !1726, !1727, !1728, !1729, !1730, !1731, !1732, !1733, !1734, !1735, !1736, !1737, !1738, !1739, !1740, !1741, !1742, !1743, !1744, !1745, !1746, !1747, !1748, !1749, !1750, !1751, !1752, !1753, !1754, !1755, !1756, !1757, !1758, !1759, !1760, !1761, !1762, !1763, !1764, !1765, !1766, !1767, !1768, !1769, !1770, !1771, !1772, !1773, !1774, !1775, !1776, !1777, !1778, !1779, !1780, !1781, !1782, !1783, !1784, !1785, !1786, !1787, !1788, !1789, !1790, !1791, !1792, !1793, !1794, !1795, !1796, !1797, !1798, !1799, !1800, !1801, !1802, !1803, !1804, !1805, !1806, !1807, !1808, !1809, !1810, !1811, !1812, !1813, !1814, !1815, !1816, !1817, !1818, !1819, !1820, !1821, !1822, !1823, !1824, !1825, !1826, !1827, !1828, !1829, !1830, !1831, !1832, !1833, !1834, !1835, !1836, !1837, !1838, !1839, !1840, !1841, !1842, !1843, !1844, !1845, !1846, !1847, !1848, !1849, !1850, !1851, !1852, !1853, !1854, !1855, !1856, !1857, !1858, !1859, !1860, !1861, !1862, !1863, !1864, !1865, !1866, !1867, !1868, !1869, !1870, !1871, !1872, !1873, !1874, !1875, !1876, !1877, !1878, !1879, !1880, !1881, !1882, !1883, !1884, !1885, !1886, !1887, !1888, !1889, !1890, !1891, !1892, !1893, !1894, !1895, !1896, !1897, !1898, !1899, !1900, !1901, !1902, !1903, !1904, !1905, !1906, !1907, !1908, !1909, !1910, !1911, !1912, !1913, !1914, !1915, !1916, !1917, !1918, !1919, !1920, !1921, !1922, !1923, !1924, !1925, !1926, !1927, !1928, !1929, !1930, !1931, !1932, !1933, !1934, !1935, !1936, !1937, !1938, !1939, !1940, !1941, !1942, !1943, !1944, !1945, !1946, !1947, !1948, !1949, !1950, !1951, !1952, !1953, !1954, !1955, !1956, !1957, !1958, !1959, !1960, !1961, !1962, !1963, !1964, !1965, !1966, !1967, !1968, !1969, !1970, !1971, !1972, !1973, !1974, !1975, !1976, !1977, !1978, !1979, !1980, !1981, !1982, !1983, !1984, !1985, !1986, !1987, !1988, !1989, !1990, !1991, !1992, !1993, !1994, !1995, !1996, !1997, !1998, !1999, !2000, !2001, !2002, !2003, !2004, !2005, !2006, !2007, !2008, !2009, !2010, !2011, !2012, !2013, !2014, !2015, !2016, !2017, !2018, !2019, !2020, !2021, !2022, !2023, !2024, !2025, !2026, !2027, !2028, !2029, !2030, !2031, !2032, !2033, !2034, !2035, !2036, !2037, !2038, !2039, !2040, !2041, !2042, !2043, !2044, !2045, !2046, !2047, !2048, !2049, !2050, !2051, !2052, !2053, !2054, !2055, !2056, !2057, !2058, !2059, !2060, !2061, !2062, !2063, !2064, !2065, !2066, !2067, !2068, !2069, !2070, !2071, !2072, !2073, !2074, !2075, !2076, !2077, !2078, !2079, !2080, !2081, !2082, !2083, !2084, !2085, !2086, !2087, !2088, !2089, !2090, !2091, !2092, !2093, !2094, !2095, !2096, !2097, !2098, !2099, !2100, !2101, !2102, !2103, !2104, !2105, !2106, !2107, !2108, !2109, !2110, !2111, !2112, !2113, !2114, !2115, !2116, !2117, !2118, !2119, !2120, !2121, !2122, !2123, !2124, !2125, !2126, !2127, !2128, !2129, !2130, !2131, !2132, !2133, !2134, !2135, !2136, !2137, !2138, !2139, !2140, !2141, !2142, !2143, !2144, !2145, !2146, !2147, !2148, !2149, !2150, !2151, !2152, !2153, !2154, !2155, !2156, !2157, !2158, !2159, !2160, !2161, !2162, !2163, !2164, !2165, !2166, !2167, !2168, !2169, !2170, !2171, !2172, !2173, !2174, !2175, !2176, !2177, !2178, !2179, !2180, !2181, !2182, !2183, !2184, !2185, !2186, !2187, !2188, !2189, !2190, !2191, !2192, !2193, !2194, !2195, !2196, !2197, !2198, !2199, !2200, !2201, !2202, !2203, !2204, !2205, !2206, !2207, !2208, !2209, !2210, !2211, !2212, !2213, !2214, !2215, !2216, !2217, !2218, !2219, !2220, !2221, !2222, !2223, !2224, !2225, !2226, !2227, !2228, !2229, !2230, !2231, !2232, !2233, !2234, !2235, !2236, !2237, !2238, !2239, !2240, !2241, !2242, !2243, !2244, !2245, !2246, !2247, !2248, !2249, !2250, !2251, !2252, !2253, !2254, !2255, !2256, !2257, !2258, !2259, !2260, !2261, !2262, !2263, !2264, !2265, !2266, !2267, !2268, !2269, !2270, !2271, !2272, !2273, !2274, !2275, !2276, !2277, !2278, !2279, !2280, !2281, !2282, !2283, !2284, !2285, !2286, !2287, !2288, !2289, !2290, !2291, !2292, !2293, !2294, !2295, !2296, !2297, !2298, !2299, !2300, !2301, !2302, !2303, !2304, !2305, !2306, !2307, !2308, !2309, !2310, !2311, !2312, !2313, !2314, !2315, !2316, !2317, !2318, !2319, !2320, !2321, !2322, !2323, !2324, !2325, !2326, !2327, !2328, !2329, !2330, !2331, !2332, !2333, !2334, !2335, !2336, !2337, !2338, !2339, !2340, !2341, !2342, !2343, !2344, !2345, !2346, !2347, !2348, !2349, !2350, !2351, !2352, !2353, !2354, !2355, !2356, !2357, !2358, !2359, !2360, !2361, !2362, !2363, !2364, !2365, !2366, !2367, !2368, !2369, !2370, !2371, !2372, !2373, !2374, !2375, !2376, !2377, !2378, !2379, !2380, !2381, !2382, !2383, !2384, !2385, !2386, !2387, !2388, !2389, !2390, !2391, !2392, !2393, !2394, !2395, !2396, !2397, !2398, !2399, !2400, !2401, !2402, !2403, !2404, !2405, !2406, !2407, !2408, !2409, !2410, !2411, !2412, !2413, !2414, !2415, !2416, !2417, !2418, !2419, !2420, !2421, !2422, !2423, !2424, !2425, !2426, !2427, !2428, !2429, !2430, !2431, !2432, !2433, !2434, !2435, !2436, !2437, !2438, !2439, !2440, !2441, !2442, !2443, !2444, !2445, !2446, !2447, !2448, !2449, !2450, !2451, !2452, !2453, !2454, !2455, !2456, !2457, !2458, !2459, !2460, !2461, !2462, !2463, !2464, !2465, !2466, !2467, !2468, !2469, !2470, !2471, !2472, !2473, !2474, !2475, !2476, !2477, !2478, !2479, !2480, !2481, !2482, !2483, !2484, !2485, !2486, !2487, !2488, !2489, !2490, !2491, !2492, !2493, !2494, !2495, !2496, !2497, !2498, !2499, !2500, !2501, !2502, !2503, !2504, !2505, !2506, !2507, !2508, !2509, !2510, !2511, !2512, !2513, !2514, !2515, !2516, !2517, !2518, !2519, !2520, !2521, !2522, !2523, !2524, !2525, !2526, !2527, !2528, !2529, !2530, !2531, !2532, !2533, !2534, !2535, !2536, !2537, !2538, !2539, !2540, !2541, !2542, !2543, !2544, !2545, !2546, !2547, !2548, !2549, !2550, !2551, !2552, !2553, !2554, !2555, !2556, !2557, !2558, !2559, !2560, !2561, !2562, !2563, !2564, !2565, !2566, !2567, !2568, !2569, !2570, !2571, !2572, !2573, !2574, !2575, !2576, !2577, !2578, !2579, !2580, !2581, !2582, !2583, !2584, !2585, !2586, !2587, !2588, !2589, !2590, !2591, !2592, !2593, !2594, !2595, !2596, !2597, !2598, !2599, !2600, !2601, !2602, !2603, !2604, !2605, !2606, !2607, !2608, !2609, !2610, !2611, !2612, !2613, !2614, !2615, !2616, !2617, !2618, !2619, !2620, !2621, !2622, !2623, !2624, !2625, !2626, !2627, !2628, !2629, !2630, !2631, !2632, !2633, !2634, !2635, !2636, !2637, !2638, !2639, !2640, !2641, !2642, !2643, !2644, !2645, !2646, !2647, !2648, !2649, !2650, !2651, !2652, !2653, !2654, !2655, !2656, !2657, !2658, !2659, !2660, !2661, !2662, !2663, !2664, !2665, !2666, !2667, !2668, !2669, !2670, !2671, !2672, !2673, !2674, !2675, !2676, !2677, !2678, !2679, !2680, !2681, !2682, !2683, !2684, !2685, !2686, !2687, !2688, !2689, !2690, !2691, !2692, !2693, !2694, !2695, !2696, !2697, !2698, !2699, !2700, !2701, !2702, !2703, !2704, !2705, !2706, !2707, !2708, !2709, !2710, !2711, !2712, !2713, !2714, !2715, !2716, !2717, !2718, !2719, !2720, !2721, !2722, !2723, !2724, !2725, !2726, !2727, !2728, !2729, !2730, !2731, !2732, !2733, !2734, !2735, !2736, !2737, !2738, !2739, !2740, !2741, !2742, !2743, !2744, !2745, !2746, !2747, !2748, !2749, !2750, !2751, !2752, !2753, !2754, !2755, !2756, !2757, !2758, !2759, !2760, !2761, !2762, !2763, !2764, !2765, !2766, !2767, !2768, !2769, !2770, !2771, !2772, !2773, !2774, !2775, !2776, !2777, !2778, !2779, !2780, !2781, !2782, !2783, !2784, !2785, !2786, !2787, !2788, !2789, !2790, !2791, !2792, !2793, !2794, !2795, !2796, !2797, !2798, !2799, !2800, !2801, !2802, !2803, !2804, !2805, !2806, !2807, !2808, !2809, !2810, !2811, !2812, !2813, !2814, !2815, !2816, !2817, !2818, !2819, !2820, !2821, !2822, !2823, !2824, !2825, !2826, !2827, !2828, !2829, !2830, !2831, !2832, !2833, !2834, !2835, !2836, !2837, !2838, !2839, !2840, !2841, !2842, !2843, !2844, !2845, !2846, !2847, !2848, !2849, !2850, !2851, !2852, !2853, !2854, !2855, !2856, !2857, !2858, !2859, !2860, !2861, !2862, !2863, !2864, !2865, !2866, !2867, !2868, !2869, !2870, !2871, !2872, !2873, !2874, !2875, !2876, !2877, !2878, !2879, !2880, !2881, !2882, !2883, !2884, !2885, !2886, !2887, !2888, !2889, !2890, !2891, !2892, !2893, !2894, !2895, !2896, !2897, !2898, !2899, !2900, !2901, !2902, !2903, !2904, !2905, !2906, !2907, !2908, !2909, !2910, !2911, !2912, !2913, !2914, !2915, !2916, !2917, !2918, !2919, !2920, !2921, !2922, !2923, !2924, !2925, !2926, !2927, !2928, !2929, !2930, !2931, !2932, !2933, !2934, !2935, !2936, !2937, !2938, !2939, !2940, !2941, !2942, !2943, !2944, !2945, !2946, !2947, !2948, !2949, !2950, !2951, !2952, !2953, !2954, !2955, !2956, !2957, !2958, !2959, !2960, !2961, !2962, !2963, !2964, !2965, !2966, !2967, !2968, !2969, !2970, !2971, !2972, !2973, !2974, !2975, !2976, !2977, !2978, !2979, !2980, !2981, !2982, !2983, !2984, !2985, !2986, !2987, !2988, !2989, !2990, !2991, !2992, !2993, !2994, !2995, !2996, !2997, !2998, !2999, !3000, !3001, !3002, !3003, !3004, !3005, !3006, !3007, !3008, !3009, !3010, !3011, !3012, !3013, !3014, !3015, !3016, !3017, !3018, !3019, !3020, !3021, !3022, !3023, !3024, !3025, !3026, !3027, !3028, !3029, !3030, !3031, !3032, !3033, !3034, !3035, !3036, !3037, !3038, !3039, !3040, !3041}
!1553 = !DIEnumerator(name: "CODE_FOR_x86_fnstsw_1", value: 30, isUnsigned: true)
!1554 = !DIEnumerator(name: "CODE_FOR_x86_sahf_1", value: 31, isUnsigned: true)
!1555 = !DIEnumerator(name: "CODE_FOR_popsi1", value: 41, isUnsigned: true)
!1556 = !DIEnumerator(name: "CODE_FOR_movsi_insv_1", value: 63, isUnsigned: true)
!1557 = !DIEnumerator(name: "CODE_FOR_swapxf", value: 83, isUnsigned: true)
!1558 = !DIEnumerator(name: "CODE_FOR_zero_extendhisi2_and", value: 84, isUnsigned: true)
!1559 = !DIEnumerator(name: "CODE_FOR_zero_extendsidi2_32", value: 92, isUnsigned: true)
!1560 = !DIEnumerator(name: "CODE_FOR_extendhisi2", value: 94, isUnsigned: true)
!1561 = !DIEnumerator(name: "CODE_FOR_extendqihi2", value: 95, isUnsigned: true)
!1562 = !DIEnumerator(name: "CODE_FOR_extendqisi2", value: 96, isUnsigned: true)
!1563 = !DIEnumerator(name: "CODE_FOR_truncxfsf2_i387_noop", value: 110, isUnsigned: true)
!1564 = !DIEnumerator(name: "CODE_FOR_truncxfdf2_i387_noop", value: 111, isUnsigned: true)
!1565 = !DIEnumerator(name: "CODE_FOR_fix_truncsfsi_sse", value: 116, isUnsigned: true)
!1566 = !DIEnumerator(name: "CODE_FOR_fix_truncdfsi_sse", value: 117, isUnsigned: true)
!1567 = !DIEnumerator(name: "CODE_FOR_fix_trunchi_fisttp_i387_1", value: 118, isUnsigned: true)
!1568 = !DIEnumerator(name: "CODE_FOR_fix_truncsi_fisttp_i387_1", value: 119, isUnsigned: true)
!1569 = !DIEnumerator(name: "CODE_FOR_fix_truncdi_fisttp_i387_1", value: 120, isUnsigned: true)
!1570 = !DIEnumerator(name: "CODE_FOR_fix_trunchi_i387_fisttp", value: 121, isUnsigned: true)
!1571 = !DIEnumerator(name: "CODE_FOR_fix_truncsi_i387_fisttp", value: 122, isUnsigned: true)
!1572 = !DIEnumerator(name: "CODE_FOR_fix_truncdi_i387_fisttp", value: 123, isUnsigned: true)
!1573 = !DIEnumerator(name: "CODE_FOR_fix_trunchi_i387_fisttp_with_temp", value: 124, isUnsigned: true)
!1574 = !DIEnumerator(name: "CODE_FOR_fix_truncsi_i387_fisttp_with_temp", value: 125, isUnsigned: true)
!1575 = !DIEnumerator(name: "CODE_FOR_fix_truncdi_i387_fisttp_with_temp", value: 126, isUnsigned: true)
!1576 = !DIEnumerator(name: "CODE_FOR_fix_truncdi_i387", value: 130, isUnsigned: true)
!1577 = !DIEnumerator(name: "CODE_FOR_fix_truncdi_i387_with_temp", value: 131, isUnsigned: true)
!1578 = !DIEnumerator(name: "CODE_FOR_fix_trunchi_i387", value: 132, isUnsigned: true)
!1579 = !DIEnumerator(name: "CODE_FOR_fix_truncsi_i387", value: 133, isUnsigned: true)
!1580 = !DIEnumerator(name: "CODE_FOR_fix_trunchi_i387_with_temp", value: 134, isUnsigned: true)
!1581 = !DIEnumerator(name: "CODE_FOR_fix_truncsi_i387_with_temp", value: 135, isUnsigned: true)
!1582 = !DIEnumerator(name: "CODE_FOR_x86_fnstcw_1", value: 136, isUnsigned: true)
!1583 = !DIEnumerator(name: "CODE_FOR_x86_fldcw_1", value: 137, isUnsigned: true)
!1584 = !DIEnumerator(name: "CODE_FOR_floatdisf2_i387_with_xmm", value: 185, isUnsigned: true)
!1585 = !DIEnumerator(name: "CODE_FOR_floatdidf2_i387_with_xmm", value: 186, isUnsigned: true)
!1586 = !DIEnumerator(name: "CODE_FOR_floatdixf2_i387_with_xmm", value: 187, isUnsigned: true)
!1587 = !DIEnumerator(name: "CODE_FOR_addqi3_cc", value: 195, isUnsigned: true)
!1588 = !DIEnumerator(name: "CODE_FOR_addqi_ext_1", value: 219, isUnsigned: true)
!1589 = !DIEnumerator(name: "CODE_FOR_divqi3", value: 271, isUnsigned: true)
!1590 = !DIEnumerator(name: "CODE_FOR_udivqi3", value: 272, isUnsigned: true)
!1591 = !DIEnumerator(name: "CODE_FOR_andqi_ext_0", value: 298, isUnsigned: true)
!1592 = !DIEnumerator(name: "CODE_FOR_copysignsf3_const", value: 367, isUnsigned: true)
!1593 = !DIEnumerator(name: "CODE_FOR_copysigndf3_const", value: 368, isUnsigned: true)
!1594 = !DIEnumerator(name: "CODE_FOR_copysigntf3_const", value: 369, isUnsigned: true)
!1595 = !DIEnumerator(name: "CODE_FOR_copysignsf3_var", value: 370, isUnsigned: true)
!1596 = !DIEnumerator(name: "CODE_FOR_copysigndf3_var", value: 371, isUnsigned: true)
!1597 = !DIEnumerator(name: "CODE_FOR_copysigntf3_var", value: 372, isUnsigned: true)
!1598 = !DIEnumerator(name: "CODE_FOR_x86_shld", value: 382, isUnsigned: true)
!1599 = !DIEnumerator(name: "CODE_FOR_x86_shrd", value: 395, isUnsigned: true)
!1600 = !DIEnumerator(name: "CODE_FOR_ix86_rotldi3", value: 438, isUnsigned: true)
!1601 = !DIEnumerator(name: "CODE_FOR_ix86_rotrdi3", value: 447, isUnsigned: true)
!1602 = !DIEnumerator(name: "CODE_FOR_jump", value: 478, isUnsigned: true)
!1603 = !DIEnumerator(name: "CODE_FOR_blockage", value: 487, isUnsigned: true)
!1604 = !DIEnumerator(name: "CODE_FOR_prologue_use", value: 489, isUnsigned: true)
!1605 = !DIEnumerator(name: "CODE_FOR_return_internal", value: 490, isUnsigned: true)
!1606 = !DIEnumerator(name: "CODE_FOR_return_internal_long", value: 491, isUnsigned: true)
!1607 = !DIEnumerator(name: "CODE_FOR_return_pop_internal", value: 492, isUnsigned: true)
!1608 = !DIEnumerator(name: "CODE_FOR_return_indirect_internal", value: 493, isUnsigned: true)
!1609 = !DIEnumerator(name: "CODE_FOR_nop", value: 494, isUnsigned: true)
!1610 = !DIEnumerator(name: "CODE_FOR_vswapmov", value: 495, isUnsigned: true)
!1611 = !DIEnumerator(name: "CODE_FOR_pad", value: 496, isUnsigned: true)
!1612 = !DIEnumerator(name: "CODE_FOR_set_got", value: 497, isUnsigned: true)
!1613 = !DIEnumerator(name: "CODE_FOR_set_got_labelled", value: 498, isUnsigned: true)
!1614 = !DIEnumerator(name: "CODE_FOR_eh_return_internal", value: 499, isUnsigned: true)
!1615 = !DIEnumerator(name: "CODE_FOR_leave", value: 500, isUnsigned: true)
!1616 = !DIEnumerator(name: "CODE_FOR_ctzsi2", value: 503, isUnsigned: true)
!1617 = !DIEnumerator(name: "CODE_FOR_clzsi2_abm", value: 504, isUnsigned: true)
!1618 = !DIEnumerator(name: "CODE_FOR_bsr", value: 505, isUnsigned: true)
!1619 = !DIEnumerator(name: "CODE_FOR_popcounthi2", value: 506, isUnsigned: true)
!1620 = !DIEnumerator(name: "CODE_FOR_popcountsi2", value: 507, isUnsigned: true)
!1621 = !DIEnumerator(name: "CODE_FOR_bswaphi_lowpart", value: 514, isUnsigned: true)
!1622 = !DIEnumerator(name: "CODE_FOR_clzhi2_abm", value: 515, isUnsigned: true)
!1623 = !DIEnumerator(name: "CODE_FOR_paritydi2_cmp", value: 517, isUnsigned: true)
!1624 = !DIEnumerator(name: "CODE_FOR_paritysi2_cmp", value: 518, isUnsigned: true)
!1625 = !DIEnumerator(name: "CODE_FOR_truncxfsf2_i387_noop_unspec", value: 573, isUnsigned: true)
!1626 = !DIEnumerator(name: "CODE_FOR_truncxfdf2_i387_noop_unspec", value: 574, isUnsigned: true)
!1627 = !DIEnumerator(name: "CODE_FOR_sqrtxf2", value: 575, isUnsigned: true)
!1628 = !DIEnumerator(name: "CODE_FOR_sqrt_extendsfxf2_i387", value: 576, isUnsigned: true)
!1629 = !DIEnumerator(name: "CODE_FOR_sqrt_extenddfxf2_i387", value: 577, isUnsigned: true)
!1630 = !DIEnumerator(name: "CODE_FOR_fpremxf4_i387", value: 581, isUnsigned: true)
!1631 = !DIEnumerator(name: "CODE_FOR_fprem1xf4_i387", value: 582, isUnsigned: true)
!1632 = !DIEnumerator(name: "CODE_FOR_sincosxf3", value: 589, isUnsigned: true)
!1633 = !DIEnumerator(name: "CODE_FOR_sincos_extendsfxf3_i387", value: 590, isUnsigned: true)
!1634 = !DIEnumerator(name: "CODE_FOR_sincos_extenddfxf3_i387", value: 591, isUnsigned: true)
!1635 = !DIEnumerator(name: "CODE_FOR_fptanxf4_i387", value: 592, isUnsigned: true)
!1636 = !DIEnumerator(name: "CODE_FOR_fptan_extendsfxf4_i387", value: 593, isUnsigned: true)
!1637 = !DIEnumerator(name: "CODE_FOR_fptan_extenddfxf4_i387", value: 594, isUnsigned: true)
!1638 = !DIEnumerator(name: "CODE_FOR_fpatan_extendsfxf3_i387", value: 596, isUnsigned: true)
!1639 = !DIEnumerator(name: "CODE_FOR_fpatan_extenddfxf3_i387", value: 597, isUnsigned: true)
!1640 = !DIEnumerator(name: "CODE_FOR_fyl2xxf3_i387", value: 598, isUnsigned: true)
!1641 = !DIEnumerator(name: "CODE_FOR_fyl2x_extendsfxf3_i387", value: 599, isUnsigned: true)
!1642 = !DIEnumerator(name: "CODE_FOR_fyl2x_extenddfxf3_i387", value: 600, isUnsigned: true)
!1643 = !DIEnumerator(name: "CODE_FOR_fyl2xp1xf3_i387", value: 601, isUnsigned: true)
!1644 = !DIEnumerator(name: "CODE_FOR_fyl2xp1_extendsfxf3_i387", value: 602, isUnsigned: true)
!1645 = !DIEnumerator(name: "CODE_FOR_fyl2xp1_extenddfxf3_i387", value: 603, isUnsigned: true)
!1646 = !DIEnumerator(name: "CODE_FOR_fxtractxf3_i387", value: 604, isUnsigned: true)
!1647 = !DIEnumerator(name: "CODE_FOR_fxtract_extendsfxf3_i387", value: 605, isUnsigned: true)
!1648 = !DIEnumerator(name: "CODE_FOR_fxtract_extenddfxf3_i387", value: 606, isUnsigned: true)
!1649 = !DIEnumerator(name: "CODE_FOR_sse4_1_roundsf2", value: 609, isUnsigned: true)
!1650 = !DIEnumerator(name: "CODE_FOR_sse4_1_rounddf2", value: 610, isUnsigned: true)
!1651 = !DIEnumerator(name: "CODE_FOR_rintxf2", value: 611, isUnsigned: true)
!1652 = !DIEnumerator(name: "CODE_FOR_fistdi2", value: 613, isUnsigned: true)
!1653 = !DIEnumerator(name: "CODE_FOR_fistdi2_with_temp", value: 614, isUnsigned: true)
!1654 = !DIEnumerator(name: "CODE_FOR_fisthi2", value: 617, isUnsigned: true)
!1655 = !DIEnumerator(name: "CODE_FOR_fistsi2", value: 618, isUnsigned: true)
!1656 = !DIEnumerator(name: "CODE_FOR_fisthi2_with_temp", value: 619, isUnsigned: true)
!1657 = !DIEnumerator(name: "CODE_FOR_fistsi2_with_temp", value: 620, isUnsigned: true)
!1658 = !DIEnumerator(name: "CODE_FOR_frndintxf2_floor", value: 621, isUnsigned: true)
!1659 = !DIEnumerator(name: "CODE_FOR_frndintxf2_floor_i387", value: 622, isUnsigned: true)
!1660 = !DIEnumerator(name: "CODE_FOR_fistdi2_floor", value: 626, isUnsigned: true)
!1661 = !DIEnumerator(name: "CODE_FOR_fistdi2_floor_with_temp", value: 627, isUnsigned: true)
!1662 = !DIEnumerator(name: "CODE_FOR_fisthi2_floor", value: 628, isUnsigned: true)
!1663 = !DIEnumerator(name: "CODE_FOR_fistsi2_floor", value: 629, isUnsigned: true)
!1664 = !DIEnumerator(name: "CODE_FOR_fisthi2_floor_with_temp", value: 630, isUnsigned: true)
!1665 = !DIEnumerator(name: "CODE_FOR_fistsi2_floor_with_temp", value: 631, isUnsigned: true)
!1666 = !DIEnumerator(name: "CODE_FOR_frndintxf2_ceil", value: 632, isUnsigned: true)
!1667 = !DIEnumerator(name: "CODE_FOR_frndintxf2_ceil_i387", value: 633, isUnsigned: true)
!1668 = !DIEnumerator(name: "CODE_FOR_fistdi2_ceil", value: 637, isUnsigned: true)
!1669 = !DIEnumerator(name: "CODE_FOR_fistdi2_ceil_with_temp", value: 638, isUnsigned: true)
!1670 = !DIEnumerator(name: "CODE_FOR_fisthi2_ceil", value: 639, isUnsigned: true)
!1671 = !DIEnumerator(name: "CODE_FOR_fistsi2_ceil", value: 640, isUnsigned: true)
!1672 = !DIEnumerator(name: "CODE_FOR_fisthi2_ceil_with_temp", value: 641, isUnsigned: true)
!1673 = !DIEnumerator(name: "CODE_FOR_fistsi2_ceil_with_temp", value: 642, isUnsigned: true)
!1674 = !DIEnumerator(name: "CODE_FOR_frndintxf2_trunc", value: 643, isUnsigned: true)
!1675 = !DIEnumerator(name: "CODE_FOR_frndintxf2_trunc_i387", value: 644, isUnsigned: true)
!1676 = !DIEnumerator(name: "CODE_FOR_frndintxf2_mask_pm", value: 645, isUnsigned: true)
!1677 = !DIEnumerator(name: "CODE_FOR_frndintxf2_mask_pm_i387", value: 646, isUnsigned: true)
!1678 = !DIEnumerator(name: "CODE_FOR_fxamsf2_i387", value: 647, isUnsigned: true)
!1679 = !DIEnumerator(name: "CODE_FOR_fxamdf2_i387", value: 648, isUnsigned: true)
!1680 = !DIEnumerator(name: "CODE_FOR_fxamxf2_i387", value: 649, isUnsigned: true)
!1681 = !DIEnumerator(name: "CODE_FOR_fxamsf2_i387_with_temp", value: 650, isUnsigned: true)
!1682 = !DIEnumerator(name: "CODE_FOR_fxamdf2_i387_with_temp", value: 651, isUnsigned: true)
!1683 = !DIEnumerator(name: "CODE_FOR_cld", value: 652, isUnsigned: true)
!1684 = !DIEnumerator(name: "CODE_FOR_smaxsf3", value: 681, isUnsigned: true)
!1685 = !DIEnumerator(name: "CODE_FOR_sminsf3", value: 682, isUnsigned: true)
!1686 = !DIEnumerator(name: "CODE_FOR_smaxdf3", value: 683, isUnsigned: true)
!1687 = !DIEnumerator(name: "CODE_FOR_smindf3", value: 684, isUnsigned: true)
!1688 = !DIEnumerator(name: "CODE_FOR_pro_epilogue_adjust_stack_1", value: 693, isUnsigned: true)
!1689 = !DIEnumerator(name: "CODE_FOR_allocate_stack_worker_32", value: 694, isUnsigned: true)
!1690 = !DIEnumerator(name: "CODE_FOR_trap", value: 701, isUnsigned: true)
!1691 = !DIEnumerator(name: "CODE_FOR_stack_protect_set_si", value: 704, isUnsigned: true)
!1692 = !DIEnumerator(name: "CODE_FOR_stack_tls_protect_set_si", value: 705, isUnsigned: true)
!1693 = !DIEnumerator(name: "CODE_FOR_stack_protect_test_si", value: 706, isUnsigned: true)
!1694 = !DIEnumerator(name: "CODE_FOR_stack_tls_protect_test_si", value: 707, isUnsigned: true)
!1695 = !DIEnumerator(name: "CODE_FOR_sse4_2_crc32qi", value: 708, isUnsigned: true)
!1696 = !DIEnumerator(name: "CODE_FOR_sse4_2_crc32hi", value: 709, isUnsigned: true)
!1697 = !DIEnumerator(name: "CODE_FOR_sse4_2_crc32si", value: 710, isUnsigned: true)
!1698 = !DIEnumerator(name: "CODE_FOR_lwp_slwpcbsi", value: 715, isUnsigned: true)
!1699 = !DIEnumerator(name: "CODE_FOR_sse_movntdi", value: 728, isUnsigned: true)
!1700 = !DIEnumerator(name: "CODE_FOR_mmx_rcpv2sf2", value: 736, isUnsigned: true)
!1701 = !DIEnumerator(name: "CODE_FOR_mmx_rcpit1v2sf3", value: 737, isUnsigned: true)
!1702 = !DIEnumerator(name: "CODE_FOR_mmx_rcpit2v2sf3", value: 738, isUnsigned: true)
!1703 = !DIEnumerator(name: "CODE_FOR_mmx_rsqrtv2sf2", value: 739, isUnsigned: true)
!1704 = !DIEnumerator(name: "CODE_FOR_mmx_rsqit1v2sf3", value: 740, isUnsigned: true)
!1705 = !DIEnumerator(name: "CODE_FOR_mmx_haddv2sf3", value: 741, isUnsigned: true)
!1706 = !DIEnumerator(name: "CODE_FOR_mmx_hsubv2sf3", value: 742, isUnsigned: true)
!1707 = !DIEnumerator(name: "CODE_FOR_mmx_addsubv2sf3", value: 743, isUnsigned: true)
!1708 = !DIEnumerator(name: "CODE_FOR_mmx_gtv2sf3", value: 745, isUnsigned: true)
!1709 = !DIEnumerator(name: "CODE_FOR_mmx_gev2sf3", value: 746, isUnsigned: true)
!1710 = !DIEnumerator(name: "CODE_FOR_mmx_pf2id", value: 747, isUnsigned: true)
!1711 = !DIEnumerator(name: "CODE_FOR_mmx_pf2iw", value: 748, isUnsigned: true)
!1712 = !DIEnumerator(name: "CODE_FOR_mmx_pi2fw", value: 749, isUnsigned: true)
!1713 = !DIEnumerator(name: "CODE_FOR_mmx_floatv2si2", value: 750, isUnsigned: true)
!1714 = !DIEnumerator(name: "CODE_FOR_mmx_pswapdv2sf2", value: 751, isUnsigned: true)
!1715 = !DIEnumerator(name: "CODE_FOR_mmx_ashrv4hi3", value: 782, isUnsigned: true)
!1716 = !DIEnumerator(name: "CODE_FOR_mmx_ashrv2si3", value: 783, isUnsigned: true)
!1717 = !DIEnumerator(name: "CODE_FOR_mmx_lshrv4hi3", value: 784, isUnsigned: true)
!1718 = !DIEnumerator(name: "CODE_FOR_mmx_lshrv2si3", value: 785, isUnsigned: true)
!1719 = !DIEnumerator(name: "CODE_FOR_mmx_lshrv1di3", value: 786, isUnsigned: true)
!1720 = !DIEnumerator(name: "CODE_FOR_mmx_ashlv4hi3", value: 787, isUnsigned: true)
!1721 = !DIEnumerator(name: "CODE_FOR_mmx_ashlv2si3", value: 788, isUnsigned: true)
!1722 = !DIEnumerator(name: "CODE_FOR_mmx_ashlv1di3", value: 789, isUnsigned: true)
!1723 = !DIEnumerator(name: "CODE_FOR_mmx_gtv8qi3", value: 793, isUnsigned: true)
!1724 = !DIEnumerator(name: "CODE_FOR_mmx_gtv4hi3", value: 794, isUnsigned: true)
!1725 = !DIEnumerator(name: "CODE_FOR_mmx_gtv2si3", value: 795, isUnsigned: true)
!1726 = !DIEnumerator(name: "CODE_FOR_mmx_andnotv8qi3", value: 796, isUnsigned: true)
!1727 = !DIEnumerator(name: "CODE_FOR_mmx_andnotv4hi3", value: 797, isUnsigned: true)
!1728 = !DIEnumerator(name: "CODE_FOR_mmx_andnotv2si3", value: 798, isUnsigned: true)
!1729 = !DIEnumerator(name: "CODE_FOR_mmx_packsswb", value: 808, isUnsigned: true)
!1730 = !DIEnumerator(name: "CODE_FOR_mmx_packssdw", value: 809, isUnsigned: true)
!1731 = !DIEnumerator(name: "CODE_FOR_mmx_packuswb", value: 810, isUnsigned: true)
!1732 = !DIEnumerator(name: "CODE_FOR_mmx_punpckhbw", value: 811, isUnsigned: true)
!1733 = !DIEnumerator(name: "CODE_FOR_mmx_punpcklbw", value: 812, isUnsigned: true)
!1734 = !DIEnumerator(name: "CODE_FOR_mmx_punpckhwd", value: 813, isUnsigned: true)
!1735 = !DIEnumerator(name: "CODE_FOR_mmx_punpcklwd", value: 814, isUnsigned: true)
!1736 = !DIEnumerator(name: "CODE_FOR_mmx_punpckhdq", value: 815, isUnsigned: true)
!1737 = !DIEnumerator(name: "CODE_FOR_mmx_punpckldq", value: 816, isUnsigned: true)
!1738 = !DIEnumerator(name: "CODE_FOR_mmx_pextrw", value: 818, isUnsigned: true)
!1739 = !DIEnumerator(name: "CODE_FOR_mmx_pshufw_1", value: 819, isUnsigned: true)
!1740 = !DIEnumerator(name: "CODE_FOR_mmx_pswapdv2si2", value: 820, isUnsigned: true)
!1741 = !DIEnumerator(name: "CODE_FOR_mmx_psadbw", value: 828, isUnsigned: true)
!1742 = !DIEnumerator(name: "CODE_FOR_mmx_pmovmskb", value: 829, isUnsigned: true)
!1743 = !DIEnumerator(name: "CODE_FOR_movdi_to_sse", value: 853, isUnsigned: true)
!1744 = !DIEnumerator(name: "CODE_FOR_avx_movups", value: 854, isUnsigned: true)
!1745 = !DIEnumerator(name: "CODE_FOR_avx_movupd", value: 855, isUnsigned: true)
!1746 = !DIEnumerator(name: "CODE_FOR_avx_movups256", value: 856, isUnsigned: true)
!1747 = !DIEnumerator(name: "CODE_FOR_avx_movupd256", value: 857, isUnsigned: true)
!1748 = !DIEnumerator(name: "CODE_FOR_sse2_movq128", value: 858, isUnsigned: true)
!1749 = !DIEnumerator(name: "CODE_FOR_sse_movups", value: 859, isUnsigned: true)
!1750 = !DIEnumerator(name: "CODE_FOR_sse2_movupd", value: 860, isUnsigned: true)
!1751 = !DIEnumerator(name: "CODE_FOR_avx_movdqu256", value: 861, isUnsigned: true)
!1752 = !DIEnumerator(name: "CODE_FOR_avx_movdqu", value: 862, isUnsigned: true)
!1753 = !DIEnumerator(name: "CODE_FOR_sse2_movdqu", value: 863, isUnsigned: true)
!1754 = !DIEnumerator(name: "CODE_FOR_avx_movntv4sf", value: 864, isUnsigned: true)
!1755 = !DIEnumerator(name: "CODE_FOR_avx_movntv2df", value: 865, isUnsigned: true)
!1756 = !DIEnumerator(name: "CODE_FOR_avx_movntv8sf", value: 866, isUnsigned: true)
!1757 = !DIEnumerator(name: "CODE_FOR_avx_movntv4df", value: 867, isUnsigned: true)
!1758 = !DIEnumerator(name: "CODE_FOR_sse_movntv4sf", value: 868, isUnsigned: true)
!1759 = !DIEnumerator(name: "CODE_FOR_sse2_movntv2df", value: 869, isUnsigned: true)
!1760 = !DIEnumerator(name: "CODE_FOR_avx_movntv4di", value: 870, isUnsigned: true)
!1761 = !DIEnumerator(name: "CODE_FOR_avx_movntv2di", value: 871, isUnsigned: true)
!1762 = !DIEnumerator(name: "CODE_FOR_sse2_movntv2di", value: 872, isUnsigned: true)
!1763 = !DIEnumerator(name: "CODE_FOR_sse2_movntsi", value: 873, isUnsigned: true)
!1764 = !DIEnumerator(name: "CODE_FOR_avx_lddqu256", value: 874, isUnsigned: true)
!1765 = !DIEnumerator(name: "CODE_FOR_avx_lddqu", value: 875, isUnsigned: true)
!1766 = !DIEnumerator(name: "CODE_FOR_sse3_lddqu", value: 876, isUnsigned: true)
!1767 = !DIEnumerator(name: "CODE_FOR_sse_vmaddv4sf3", value: 893, isUnsigned: true)
!1768 = !DIEnumerator(name: "CODE_FOR_sse_vmsubv4sf3", value: 894, isUnsigned: true)
!1769 = !DIEnumerator(name: "CODE_FOR_sse2_vmaddv2df3", value: 895, isUnsigned: true)
!1770 = !DIEnumerator(name: "CODE_FOR_sse2_vmsubv2df3", value: 896, isUnsigned: true)
!1771 = !DIEnumerator(name: "CODE_FOR_sse_vmmulv4sf3", value: 905, isUnsigned: true)
!1772 = !DIEnumerator(name: "CODE_FOR_sse2_vmmulv2df3", value: 906, isUnsigned: true)
!1773 = !DIEnumerator(name: "CODE_FOR_avx_divv4sf3", value: 907, isUnsigned: true)
!1774 = !DIEnumerator(name: "CODE_FOR_avx_divv2df3", value: 908, isUnsigned: true)
!1775 = !DIEnumerator(name: "CODE_FOR_avx_divv8sf3", value: 909, isUnsigned: true)
!1776 = !DIEnumerator(name: "CODE_FOR_avx_divv4df3", value: 910, isUnsigned: true)
!1777 = !DIEnumerator(name: "CODE_FOR_sse_divv4sf3", value: 913, isUnsigned: true)
!1778 = !DIEnumerator(name: "CODE_FOR_sse2_divv2df3", value: 914, isUnsigned: true)
!1779 = !DIEnumerator(name: "CODE_FOR_sse_vmdivv4sf3", value: 917, isUnsigned: true)
!1780 = !DIEnumerator(name: "CODE_FOR_sse2_vmdivv2df3", value: 918, isUnsigned: true)
!1781 = !DIEnumerator(name: "CODE_FOR_avx_rcpv8sf2", value: 919, isUnsigned: true)
!1782 = !DIEnumerator(name: "CODE_FOR_sse_rcpv4sf2", value: 920, isUnsigned: true)
!1783 = !DIEnumerator(name: "CODE_FOR_sse_vmrcpv4sf2", value: 922, isUnsigned: true)
!1784 = !DIEnumerator(name: "CODE_FOR_avx_sqrtv8sf2", value: 923, isUnsigned: true)
!1785 = !DIEnumerator(name: "CODE_FOR_sse_sqrtv4sf2", value: 924, isUnsigned: true)
!1786 = !DIEnumerator(name: "CODE_FOR_sqrtv4df2", value: 925, isUnsigned: true)
!1787 = !DIEnumerator(name: "CODE_FOR_sqrtv2df2", value: 926, isUnsigned: true)
!1788 = !DIEnumerator(name: "CODE_FOR_sse_vmsqrtv4sf2", value: 929, isUnsigned: true)
!1789 = !DIEnumerator(name: "CODE_FOR_sse2_vmsqrtv2df2", value: 930, isUnsigned: true)
!1790 = !DIEnumerator(name: "CODE_FOR_avx_rsqrtv8sf2", value: 931, isUnsigned: true)
!1791 = !DIEnumerator(name: "CODE_FOR_sse_rsqrtv4sf2", value: 932, isUnsigned: true)
!1792 = !DIEnumerator(name: "CODE_FOR_sse_vmrsqrtv4sf2", value: 934, isUnsigned: true)
!1793 = !DIEnumerator(name: "CODE_FOR_sse_vmsmaxv4sf3", value: 963, isUnsigned: true)
!1794 = !DIEnumerator(name: "CODE_FOR_sse_vmsminv4sf3", value: 964, isUnsigned: true)
!1795 = !DIEnumerator(name: "CODE_FOR_sse2_vmsmaxv2df3", value: 965, isUnsigned: true)
!1796 = !DIEnumerator(name: "CODE_FOR_sse2_vmsminv2df3", value: 966, isUnsigned: true)
!1797 = !DIEnumerator(name: "CODE_FOR_avx_addsubv8sf3", value: 979, isUnsigned: true)
!1798 = !DIEnumerator(name: "CODE_FOR_avx_addsubv4df3", value: 980, isUnsigned: true)
!1799 = !DIEnumerator(name: "CODE_FOR_sse3_addsubv4sf3", value: 982, isUnsigned: true)
!1800 = !DIEnumerator(name: "CODE_FOR_sse3_addsubv2df3", value: 984, isUnsigned: true)
!1801 = !DIEnumerator(name: "CODE_FOR_avx_haddv4df3", value: 985, isUnsigned: true)
!1802 = !DIEnumerator(name: "CODE_FOR_avx_hsubv4df3", value: 986, isUnsigned: true)
!1803 = !DIEnumerator(name: "CODE_FOR_avx_haddv8sf3", value: 987, isUnsigned: true)
!1804 = !DIEnumerator(name: "CODE_FOR_avx_hsubv8sf3", value: 988, isUnsigned: true)
!1805 = !DIEnumerator(name: "CODE_FOR_sse3_haddv4sf3", value: 991, isUnsigned: true)
!1806 = !DIEnumerator(name: "CODE_FOR_sse3_hsubv4sf3", value: 992, isUnsigned: true)
!1807 = !DIEnumerator(name: "CODE_FOR_sse3_haddv2df3", value: 995, isUnsigned: true)
!1808 = !DIEnumerator(name: "CODE_FOR_sse3_hsubv2df3", value: 996, isUnsigned: true)
!1809 = !DIEnumerator(name: "CODE_FOR_avx_cmppsv4sf3", value: 997, isUnsigned: true)
!1810 = !DIEnumerator(name: "CODE_FOR_avx_cmppdv2df3", value: 998, isUnsigned: true)
!1811 = !DIEnumerator(name: "CODE_FOR_avx_cmppsv8sf3", value: 999, isUnsigned: true)
!1812 = !DIEnumerator(name: "CODE_FOR_avx_cmppdv4df3", value: 1000, isUnsigned: true)
!1813 = !DIEnumerator(name: "CODE_FOR_avx_cmpssv4sf3", value: 1001, isUnsigned: true)
!1814 = !DIEnumerator(name: "CODE_FOR_avx_cmpsdv2df3", value: 1002, isUnsigned: true)
!1815 = !DIEnumerator(name: "CODE_FOR_sse_maskcmpsf3", value: 1007, isUnsigned: true)
!1816 = !DIEnumerator(name: "CODE_FOR_sse2_maskcmpdf3", value: 1008, isUnsigned: true)
!1817 = !DIEnumerator(name: "CODE_FOR_sse_maskcmpv4sf3", value: 1009, isUnsigned: true)
!1818 = !DIEnumerator(name: "CODE_FOR_sse2_maskcmpv2df3", value: 1010, isUnsigned: true)
!1819 = !DIEnumerator(name: "CODE_FOR_sse_vmmaskcmpv4sf3", value: 1011, isUnsigned: true)
!1820 = !DIEnumerator(name: "CODE_FOR_sse2_vmmaskcmpv2df3", value: 1012, isUnsigned: true)
!1821 = !DIEnumerator(name: "CODE_FOR_sse_comi", value: 1013, isUnsigned: true)
!1822 = !DIEnumerator(name: "CODE_FOR_sse2_comi", value: 1014, isUnsigned: true)
!1823 = !DIEnumerator(name: "CODE_FOR_sse_ucomi", value: 1015, isUnsigned: true)
!1824 = !DIEnumerator(name: "CODE_FOR_sse2_ucomi", value: 1016, isUnsigned: true)
!1825 = !DIEnumerator(name: "CODE_FOR_avx_andnotv4sf3", value: 1017, isUnsigned: true)
!1826 = !DIEnumerator(name: "CODE_FOR_avx_andnotv2df3", value: 1018, isUnsigned: true)
!1827 = !DIEnumerator(name: "CODE_FOR_avx_andnotv8sf3", value: 1019, isUnsigned: true)
!1828 = !DIEnumerator(name: "CODE_FOR_avx_andnotv4df3", value: 1020, isUnsigned: true)
!1829 = !DIEnumerator(name: "CODE_FOR_sse_andnotv4sf3", value: 1021, isUnsigned: true)
!1830 = !DIEnumerator(name: "CODE_FOR_sse2_andnotv2df3", value: 1022, isUnsigned: true)
!1831 = !DIEnumerator(name: "CODE_FOR_fma4_fmaddv8sf4256", value: 1057, isUnsigned: true)
!1832 = !DIEnumerator(name: "CODE_FOR_fma4_fmaddv4df4256", value: 1058, isUnsigned: true)
!1833 = !DIEnumerator(name: "CODE_FOR_fma4_fmsubv8sf4256", value: 1059, isUnsigned: true)
!1834 = !DIEnumerator(name: "CODE_FOR_fma4_fmsubv4df4256", value: 1060, isUnsigned: true)
!1835 = !DIEnumerator(name: "CODE_FOR_fma4_fnmaddv8sf4256", value: 1061, isUnsigned: true)
!1836 = !DIEnumerator(name: "CODE_FOR_fma4_fnmaddv4df4256", value: 1062, isUnsigned: true)
!1837 = !DIEnumerator(name: "CODE_FOR_fma4_fnmsubv8sf4256", value: 1063, isUnsigned: true)
!1838 = !DIEnumerator(name: "CODE_FOR_fma4_fnmsubv4df4256", value: 1064, isUnsigned: true)
!1839 = !DIEnumerator(name: "CODE_FOR_fma4_fmaddsf4", value: 1065, isUnsigned: true)
!1840 = !DIEnumerator(name: "CODE_FOR_fma4_fmadddf4", value: 1066, isUnsigned: true)
!1841 = !DIEnumerator(name: "CODE_FOR_fma4_fmaddv4sf4", value: 1067, isUnsigned: true)
!1842 = !DIEnumerator(name: "CODE_FOR_fma4_fmaddv2df4", value: 1068, isUnsigned: true)
!1843 = !DIEnumerator(name: "CODE_FOR_fma4_vmfmaddv4sf4", value: 1069, isUnsigned: true)
!1844 = !DIEnumerator(name: "CODE_FOR_fma4_vmfmaddv2df4", value: 1070, isUnsigned: true)
!1845 = !DIEnumerator(name: "CODE_FOR_fma4_fmsubsf4", value: 1071, isUnsigned: true)
!1846 = !DIEnumerator(name: "CODE_FOR_fma4_fmsubdf4", value: 1072, isUnsigned: true)
!1847 = !DIEnumerator(name: "CODE_FOR_fma4_fmsubv4sf4", value: 1073, isUnsigned: true)
!1848 = !DIEnumerator(name: "CODE_FOR_fma4_fmsubv2df4", value: 1074, isUnsigned: true)
!1849 = !DIEnumerator(name: "CODE_FOR_fma4_vmfmsubv4sf4", value: 1075, isUnsigned: true)
!1850 = !DIEnumerator(name: "CODE_FOR_fma4_vmfmsubv2df4", value: 1076, isUnsigned: true)
!1851 = !DIEnumerator(name: "CODE_FOR_fma4_fnmaddsf4", value: 1077, isUnsigned: true)
!1852 = !DIEnumerator(name: "CODE_FOR_fma4_fnmadddf4", value: 1078, isUnsigned: true)
!1853 = !DIEnumerator(name: "CODE_FOR_fma4_fnmaddv4sf4", value: 1079, isUnsigned: true)
!1854 = !DIEnumerator(name: "CODE_FOR_fma4_fnmaddv2df4", value: 1080, isUnsigned: true)
!1855 = !DIEnumerator(name: "CODE_FOR_fma4_vmfnmaddv4sf4", value: 1081, isUnsigned: true)
!1856 = !DIEnumerator(name: "CODE_FOR_fma4_vmfnmaddv2df4", value: 1082, isUnsigned: true)
!1857 = !DIEnumerator(name: "CODE_FOR_fma4_fnmsubsf4", value: 1083, isUnsigned: true)
!1858 = !DIEnumerator(name: "CODE_FOR_fma4_fnmsubdf4", value: 1084, isUnsigned: true)
!1859 = !DIEnumerator(name: "CODE_FOR_fma4_fnmsubv4sf4", value: 1085, isUnsigned: true)
!1860 = !DIEnumerator(name: "CODE_FOR_fma4_fnmsubv2df4", value: 1086, isUnsigned: true)
!1861 = !DIEnumerator(name: "CODE_FOR_fma4_vmfnmsubv4sf4", value: 1087, isUnsigned: true)
!1862 = !DIEnumerator(name: "CODE_FOR_fma4_vmfnmsubv2df4", value: 1088, isUnsigned: true)
!1863 = !DIEnumerator(name: "CODE_FOR_fma4i_fmaddv8sf4256", value: 1089, isUnsigned: true)
!1864 = !DIEnumerator(name: "CODE_FOR_fma4i_fmaddv4df4256", value: 1090, isUnsigned: true)
!1865 = !DIEnumerator(name: "CODE_FOR_fma4i_fmsubv8sf4256", value: 1091, isUnsigned: true)
!1866 = !DIEnumerator(name: "CODE_FOR_fma4i_fmsubv4df4256", value: 1092, isUnsigned: true)
!1867 = !DIEnumerator(name: "CODE_FOR_fma4i_fnmaddv8sf4256", value: 1093, isUnsigned: true)
!1868 = !DIEnumerator(name: "CODE_FOR_fma4i_fnmaddv4df4256", value: 1094, isUnsigned: true)
!1869 = !DIEnumerator(name: "CODE_FOR_fma4i_fnmsubv8sf4256", value: 1095, isUnsigned: true)
!1870 = !DIEnumerator(name: "CODE_FOR_fma4i_fnmsubv4df4256", value: 1096, isUnsigned: true)
!1871 = !DIEnumerator(name: "CODE_FOR_fma4i_fmaddv4sf4", value: 1097, isUnsigned: true)
!1872 = !DIEnumerator(name: "CODE_FOR_fma4i_fmaddv2df4", value: 1098, isUnsigned: true)
!1873 = !DIEnumerator(name: "CODE_FOR_fma4i_fmsubv4sf4", value: 1099, isUnsigned: true)
!1874 = !DIEnumerator(name: "CODE_FOR_fma4i_fmsubv2df4", value: 1100, isUnsigned: true)
!1875 = !DIEnumerator(name: "CODE_FOR_fma4i_fnmaddv4sf4", value: 1101, isUnsigned: true)
!1876 = !DIEnumerator(name: "CODE_FOR_fma4i_fnmaddv2df4", value: 1102, isUnsigned: true)
!1877 = !DIEnumerator(name: "CODE_FOR_fma4i_fnmsubv4sf4", value: 1103, isUnsigned: true)
!1878 = !DIEnumerator(name: "CODE_FOR_fma4i_fnmsubv2df4", value: 1104, isUnsigned: true)
!1879 = !DIEnumerator(name: "CODE_FOR_fma4i_vmfmaddv4sf4", value: 1105, isUnsigned: true)
!1880 = !DIEnumerator(name: "CODE_FOR_fma4i_vmfmaddv2df4", value: 1106, isUnsigned: true)
!1881 = !DIEnumerator(name: "CODE_FOR_fma4i_vmfmsubv4sf4", value: 1107, isUnsigned: true)
!1882 = !DIEnumerator(name: "CODE_FOR_fma4i_vmfmsubv2df4", value: 1108, isUnsigned: true)
!1883 = !DIEnumerator(name: "CODE_FOR_fma4i_vmfnmaddv4sf4", value: 1109, isUnsigned: true)
!1884 = !DIEnumerator(name: "CODE_FOR_fma4i_vmfnmaddv2df4", value: 1110, isUnsigned: true)
!1885 = !DIEnumerator(name: "CODE_FOR_fma4i_vmfnmsubv4sf4", value: 1111, isUnsigned: true)
!1886 = !DIEnumerator(name: "CODE_FOR_fma4i_vmfnmsubv2df4", value: 1112, isUnsigned: true)
!1887 = !DIEnumerator(name: "CODE_FOR_fma4_fmaddsubv8sf4", value: 1113, isUnsigned: true)
!1888 = !DIEnumerator(name: "CODE_FOR_fma4_fmaddsubv4df4", value: 1114, isUnsigned: true)
!1889 = !DIEnumerator(name: "CODE_FOR_fma4_fmaddsubv4sf4", value: 1115, isUnsigned: true)
!1890 = !DIEnumerator(name: "CODE_FOR_fma4_fmaddsubv2df4", value: 1116, isUnsigned: true)
!1891 = !DIEnumerator(name: "CODE_FOR_fma4_fmsubaddv8sf4", value: 1117, isUnsigned: true)
!1892 = !DIEnumerator(name: "CODE_FOR_fma4_fmsubaddv4df4", value: 1118, isUnsigned: true)
!1893 = !DIEnumerator(name: "CODE_FOR_fma4_fmsubaddv4sf4", value: 1119, isUnsigned: true)
!1894 = !DIEnumerator(name: "CODE_FOR_fma4_fmsubaddv2df4", value: 1120, isUnsigned: true)
!1895 = !DIEnumerator(name: "CODE_FOR_fma4i_fmaddsubv8sf4", value: 1121, isUnsigned: true)
!1896 = !DIEnumerator(name: "CODE_FOR_fma4i_fmaddsubv4df4", value: 1122, isUnsigned: true)
!1897 = !DIEnumerator(name: "CODE_FOR_fma4i_fmaddsubv4sf4", value: 1123, isUnsigned: true)
!1898 = !DIEnumerator(name: "CODE_FOR_fma4i_fmaddsubv2df4", value: 1124, isUnsigned: true)
!1899 = !DIEnumerator(name: "CODE_FOR_fma4i_fmsubaddv8sf4", value: 1125, isUnsigned: true)
!1900 = !DIEnumerator(name: "CODE_FOR_fma4i_fmsubaddv4df4", value: 1126, isUnsigned: true)
!1901 = !DIEnumerator(name: "CODE_FOR_fma4i_fmsubaddv4sf4", value: 1127, isUnsigned: true)
!1902 = !DIEnumerator(name: "CODE_FOR_fma4i_fmsubaddv2df4", value: 1128, isUnsigned: true)
!1903 = !DIEnumerator(name: "CODE_FOR_sse_cvtpi2ps", value: 1129, isUnsigned: true)
!1904 = !DIEnumerator(name: "CODE_FOR_sse_cvtps2pi", value: 1130, isUnsigned: true)
!1905 = !DIEnumerator(name: "CODE_FOR_sse_cvttps2pi", value: 1131, isUnsigned: true)
!1906 = !DIEnumerator(name: "CODE_FOR_sse_cvtsi2ss", value: 1133, isUnsigned: true)
!1907 = !DIEnumerator(name: "CODE_FOR_sse_cvtss2si", value: 1134, isUnsigned: true)
!1908 = !DIEnumerator(name: "CODE_FOR_sse_cvtss2si_2", value: 1135, isUnsigned: true)
!1909 = !DIEnumerator(name: "CODE_FOR_sse_cvttss2si", value: 1136, isUnsigned: true)
!1910 = !DIEnumerator(name: "CODE_FOR_avx_cvtdq2ps", value: 1137, isUnsigned: true)
!1911 = !DIEnumerator(name: "CODE_FOR_avx_cvtdq2ps256", value: 1138, isUnsigned: true)
!1912 = !DIEnumerator(name: "CODE_FOR_sse2_cvtdq2ps", value: 1139, isUnsigned: true)
!1913 = !DIEnumerator(name: "CODE_FOR_avx_cvtps2dq", value: 1140, isUnsigned: true)
!1914 = !DIEnumerator(name: "CODE_FOR_avx_cvtps2dq256", value: 1141, isUnsigned: true)
!1915 = !DIEnumerator(name: "CODE_FOR_sse2_cvtps2dq", value: 1142, isUnsigned: true)
!1916 = !DIEnumerator(name: "CODE_FOR_avx_cvttps2dq", value: 1143, isUnsigned: true)
!1917 = !DIEnumerator(name: "CODE_FOR_avx_cvttps2dq256", value: 1144, isUnsigned: true)
!1918 = !DIEnumerator(name: "CODE_FOR_sse2_cvttps2dq", value: 1145, isUnsigned: true)
!1919 = !DIEnumerator(name: "CODE_FOR_sse2_cvtpi2pd", value: 1146, isUnsigned: true)
!1920 = !DIEnumerator(name: "CODE_FOR_sse2_cvtpd2pi", value: 1147, isUnsigned: true)
!1921 = !DIEnumerator(name: "CODE_FOR_sse2_cvttpd2pi", value: 1148, isUnsigned: true)
!1922 = !DIEnumerator(name: "CODE_FOR_sse2_cvtsi2sd", value: 1150, isUnsigned: true)
!1923 = !DIEnumerator(name: "CODE_FOR_sse2_cvtsd2si", value: 1151, isUnsigned: true)
!1924 = !DIEnumerator(name: "CODE_FOR_sse2_cvtsd2si_2", value: 1152, isUnsigned: true)
!1925 = !DIEnumerator(name: "CODE_FOR_sse2_cvttsd2si", value: 1153, isUnsigned: true)
!1926 = !DIEnumerator(name: "CODE_FOR_avx_cvtdq2pd256", value: 1154, isUnsigned: true)
!1927 = !DIEnumerator(name: "CODE_FOR_sse2_cvtdq2pd", value: 1155, isUnsigned: true)
!1928 = !DIEnumerator(name: "CODE_FOR_avx_cvtpd2dq256", value: 1156, isUnsigned: true)
!1929 = !DIEnumerator(name: "CODE_FOR_avx_cvttpd2dq256", value: 1158, isUnsigned: true)
!1930 = !DIEnumerator(name: "CODE_FOR_sse2_cvtsd2ss", value: 1161, isUnsigned: true)
!1931 = !DIEnumerator(name: "CODE_FOR_sse2_cvtss2sd", value: 1163, isUnsigned: true)
!1932 = !DIEnumerator(name: "CODE_FOR_avx_cvtpd2ps256", value: 1164, isUnsigned: true)
!1933 = !DIEnumerator(name: "CODE_FOR_avx_cvtps2pd256", value: 1166, isUnsigned: true)
!1934 = !DIEnumerator(name: "CODE_FOR_sse2_cvtps2pd", value: 1167, isUnsigned: true)
!1935 = !DIEnumerator(name: "CODE_FOR_sse_movhlps", value: 1169, isUnsigned: true)
!1936 = !DIEnumerator(name: "CODE_FOR_sse_movlhps", value: 1171, isUnsigned: true)
!1937 = !DIEnumerator(name: "CODE_FOR_avx_unpckhps256", value: 1172, isUnsigned: true)
!1938 = !DIEnumerator(name: "CODE_FOR_vec_interleave_highv4sf", value: 1174, isUnsigned: true)
!1939 = !DIEnumerator(name: "CODE_FOR_avx_unpcklps256", value: 1175, isUnsigned: true)
!1940 = !DIEnumerator(name: "CODE_FOR_vec_interleave_lowv4sf", value: 1177, isUnsigned: true)
!1941 = !DIEnumerator(name: "CODE_FOR_avx_movshdup256", value: 1178, isUnsigned: true)
!1942 = !DIEnumerator(name: "CODE_FOR_sse3_movshdup", value: 1179, isUnsigned: true)
!1943 = !DIEnumerator(name: "CODE_FOR_avx_movsldup256", value: 1180, isUnsigned: true)
!1944 = !DIEnumerator(name: "CODE_FOR_sse3_movsldup", value: 1181, isUnsigned: true)
!1945 = !DIEnumerator(name: "CODE_FOR_avx_shufps256_1", value: 1182, isUnsigned: true)
!1946 = !DIEnumerator(name: "CODE_FOR_sse_shufps_v4sf", value: 1185, isUnsigned: true)
!1947 = !DIEnumerator(name: "CODE_FOR_sse_shufps_v4si", value: 1186, isUnsigned: true)
!1948 = !DIEnumerator(name: "CODE_FOR_sse_storehps", value: 1187, isUnsigned: true)
!1949 = !DIEnumerator(name: "CODE_FOR_sse_loadhps", value: 1189, isUnsigned: true)
!1950 = !DIEnumerator(name: "CODE_FOR_sse_storelps", value: 1191, isUnsigned: true)
!1951 = !DIEnumerator(name: "CODE_FOR_sse_loadlps", value: 1193, isUnsigned: true)
!1952 = !DIEnumerator(name: "CODE_FOR_sse_movss", value: 1195, isUnsigned: true)
!1953 = !DIEnumerator(name: "CODE_FOR_vec_setv4sf_0", value: 1209, isUnsigned: true)
!1954 = !DIEnumerator(name: "CODE_FOR_vec_setv4si_0", value: 1210, isUnsigned: true)
!1955 = !DIEnumerator(name: "CODE_FOR_sse4_1_insertps", value: 1214, isUnsigned: true)
!1956 = !DIEnumerator(name: "CODE_FOR_vec_extract_lo_v4di", value: 1216, isUnsigned: true)
!1957 = !DIEnumerator(name: "CODE_FOR_vec_extract_lo_v4df", value: 1217, isUnsigned: true)
!1958 = !DIEnumerator(name: "CODE_FOR_vec_extract_hi_v4di", value: 1218, isUnsigned: true)
!1959 = !DIEnumerator(name: "CODE_FOR_vec_extract_hi_v4df", value: 1219, isUnsigned: true)
!1960 = !DIEnumerator(name: "CODE_FOR_vec_extract_lo_v8si", value: 1220, isUnsigned: true)
!1961 = !DIEnumerator(name: "CODE_FOR_vec_extract_lo_v8sf", value: 1221, isUnsigned: true)
!1962 = !DIEnumerator(name: "CODE_FOR_vec_extract_hi_v8si", value: 1222, isUnsigned: true)
!1963 = !DIEnumerator(name: "CODE_FOR_vec_extract_hi_v8sf", value: 1223, isUnsigned: true)
!1964 = !DIEnumerator(name: "CODE_FOR_vec_extract_lo_v16hi", value: 1224, isUnsigned: true)
!1965 = !DIEnumerator(name: "CODE_FOR_vec_extract_hi_v16hi", value: 1225, isUnsigned: true)
!1966 = !DIEnumerator(name: "CODE_FOR_vec_extract_lo_v32qi", value: 1226, isUnsigned: true)
!1967 = !DIEnumerator(name: "CODE_FOR_vec_extract_hi_v32qi", value: 1227, isUnsigned: true)
!1968 = !DIEnumerator(name: "CODE_FOR_avx_unpckhpd256", value: 1230, isUnsigned: true)
!1969 = !DIEnumerator(name: "CODE_FOR_avx_shufpd256_1", value: 1238, isUnsigned: true)
!1970 = !DIEnumerator(name: "CODE_FOR_vec_interleave_highv2di", value: 1240, isUnsigned: true)
!1971 = !DIEnumerator(name: "CODE_FOR_vec_interleave_lowv2di", value: 1242, isUnsigned: true)
!1972 = !DIEnumerator(name: "CODE_FOR_sse2_shufpd_v2df", value: 1245, isUnsigned: true)
!1973 = !DIEnumerator(name: "CODE_FOR_sse2_shufpd_v2di", value: 1246, isUnsigned: true)
!1974 = !DIEnumerator(name: "CODE_FOR_sse2_storehpd", value: 1248, isUnsigned: true)
!1975 = !DIEnumerator(name: "CODE_FOR_sse2_storelpd", value: 1249, isUnsigned: true)
!1976 = !DIEnumerator(name: "CODE_FOR_sse2_loadhpd", value: 1251, isUnsigned: true)
!1977 = !DIEnumerator(name: "CODE_FOR_sse2_loadlpd", value: 1253, isUnsigned: true)
!1978 = !DIEnumerator(name: "CODE_FOR_sse2_movsd", value: 1257, isUnsigned: true)
!1979 = !DIEnumerator(name: "CODE_FOR_vec_dupv2df", value: 1259, isUnsigned: true)
!1980 = !DIEnumerator(name: "CODE_FOR_mulv16qi3", value: 1295, isUnsigned: true)
!1981 = !DIEnumerator(name: "CODE_FOR_mulv2di3", value: 1311, isUnsigned: true)
!1982 = !DIEnumerator(name: "CODE_FOR_ashrv8hi3", value: 1314, isUnsigned: true)
!1983 = !DIEnumerator(name: "CODE_FOR_ashrv4si3", value: 1315, isUnsigned: true)
!1984 = !DIEnumerator(name: "CODE_FOR_sse2_lshrv1ti3", value: 1320, isUnsigned: true)
!1985 = !DIEnumerator(name: "CODE_FOR_lshrv8hi3", value: 1321, isUnsigned: true)
!1986 = !DIEnumerator(name: "CODE_FOR_lshrv4si3", value: 1322, isUnsigned: true)
!1987 = !DIEnumerator(name: "CODE_FOR_lshrv2di3", value: 1323, isUnsigned: true)
!1988 = !DIEnumerator(name: "CODE_FOR_sse2_ashlv1ti3", value: 1328, isUnsigned: true)
!1989 = !DIEnumerator(name: "CODE_FOR_ashlv8hi3", value: 1329, isUnsigned: true)
!1990 = !DIEnumerator(name: "CODE_FOR_ashlv4si3", value: 1330, isUnsigned: true)
!1991 = !DIEnumerator(name: "CODE_FOR_ashlv2di3", value: 1331, isUnsigned: true)
!1992 = !DIEnumerator(name: "CODE_FOR_sse2_gtv16qi3", value: 1368, isUnsigned: true)
!1993 = !DIEnumerator(name: "CODE_FOR_sse2_gtv8hi3", value: 1369, isUnsigned: true)
!1994 = !DIEnumerator(name: "CODE_FOR_sse2_gtv4si3", value: 1370, isUnsigned: true)
!1995 = !DIEnumerator(name: "CODE_FOR_sse4_2_gtv2di3", value: 1371, isUnsigned: true)
!1996 = !DIEnumerator(name: "CODE_FOR_sse2_andnotv16qi3", value: 1384, isUnsigned: true)
!1997 = !DIEnumerator(name: "CODE_FOR_sse2_andnotv8hi3", value: 1385, isUnsigned: true)
!1998 = !DIEnumerator(name: "CODE_FOR_sse2_andnotv4si3", value: 1386, isUnsigned: true)
!1999 = !DIEnumerator(name: "CODE_FOR_sse2_andnotv2di3", value: 1387, isUnsigned: true)
!2000 = !DIEnumerator(name: "CODE_FOR_sse2_packsswb", value: 1441, isUnsigned: true)
!2001 = !DIEnumerator(name: "CODE_FOR_sse2_packssdw", value: 1443, isUnsigned: true)
!2002 = !DIEnumerator(name: "CODE_FOR_sse2_packuswb", value: 1445, isUnsigned: true)
!2003 = !DIEnumerator(name: "CODE_FOR_vec_interleave_highv16qi", value: 1447, isUnsigned: true)
!2004 = !DIEnumerator(name: "CODE_FOR_vec_interleave_lowv16qi", value: 1449, isUnsigned: true)
!2005 = !DIEnumerator(name: "CODE_FOR_vec_interleave_highv8hi", value: 1451, isUnsigned: true)
!2006 = !DIEnumerator(name: "CODE_FOR_vec_interleave_lowv8hi", value: 1453, isUnsigned: true)
!2007 = !DIEnumerator(name: "CODE_FOR_vec_interleave_highv4si", value: 1455, isUnsigned: true)
!2008 = !DIEnumerator(name: "CODE_FOR_vec_interleave_lowv4si", value: 1457, isUnsigned: true)
!2009 = !DIEnumerator(name: "CODE_FOR_sse2_pshufd_1", value: 1469, isUnsigned: true)
!2010 = !DIEnumerator(name: "CODE_FOR_sse2_pshuflw_1", value: 1470, isUnsigned: true)
!2011 = !DIEnumerator(name: "CODE_FOR_sse2_pshufhw_1", value: 1471, isUnsigned: true)
!2012 = !DIEnumerator(name: "CODE_FOR_sse2_loadld", value: 1473, isUnsigned: true)
!2013 = !DIEnumerator(name: "CODE_FOR_sse2_stored", value: 1474, isUnsigned: true)
!2014 = !DIEnumerator(name: "CODE_FOR_vec_concatv2di", value: 1492, isUnsigned: true)
!2015 = !DIEnumerator(name: "CODE_FOR_sse2_psadbw", value: 1498, isUnsigned: true)
!2016 = !DIEnumerator(name: "CODE_FOR_avx_movmskps256", value: 1499, isUnsigned: true)
!2017 = !DIEnumerator(name: "CODE_FOR_avx_movmskpd256", value: 1500, isUnsigned: true)
!2018 = !DIEnumerator(name: "CODE_FOR_sse_movmskps", value: 1501, isUnsigned: true)
!2019 = !DIEnumerator(name: "CODE_FOR_sse2_movmskpd", value: 1502, isUnsigned: true)
!2020 = !DIEnumerator(name: "CODE_FOR_sse2_pmovmskb", value: 1503, isUnsigned: true)
!2021 = !DIEnumerator(name: "CODE_FOR_sse_ldmxcsr", value: 1505, isUnsigned: true)
!2022 = !DIEnumerator(name: "CODE_FOR_sse_stmxcsr", value: 1506, isUnsigned: true)
!2023 = !DIEnumerator(name: "CODE_FOR_sse2_clflush", value: 1508, isUnsigned: true)
!2024 = !DIEnumerator(name: "CODE_FOR_sse3_mwait", value: 1511, isUnsigned: true)
!2025 = !DIEnumerator(name: "CODE_FOR_sse3_monitor", value: 1512, isUnsigned: true)
!2026 = !DIEnumerator(name: "CODE_FOR_ssse3_phaddwv8hi3", value: 1514, isUnsigned: true)
!2027 = !DIEnumerator(name: "CODE_FOR_ssse3_phaddwv4hi3", value: 1515, isUnsigned: true)
!2028 = !DIEnumerator(name: "CODE_FOR_ssse3_phadddv4si3", value: 1517, isUnsigned: true)
!2029 = !DIEnumerator(name: "CODE_FOR_ssse3_phadddv2si3", value: 1518, isUnsigned: true)
!2030 = !DIEnumerator(name: "CODE_FOR_ssse3_phaddswv8hi3", value: 1520, isUnsigned: true)
!2031 = !DIEnumerator(name: "CODE_FOR_ssse3_phaddswv4hi3", value: 1521, isUnsigned: true)
!2032 = !DIEnumerator(name: "CODE_FOR_ssse3_phsubwv8hi3", value: 1523, isUnsigned: true)
!2033 = !DIEnumerator(name: "CODE_FOR_ssse3_phsubwv4hi3", value: 1524, isUnsigned: true)
!2034 = !DIEnumerator(name: "CODE_FOR_ssse3_phsubdv4si3", value: 1526, isUnsigned: true)
!2035 = !DIEnumerator(name: "CODE_FOR_ssse3_phsubdv2si3", value: 1527, isUnsigned: true)
!2036 = !DIEnumerator(name: "CODE_FOR_ssse3_phsubswv8hi3", value: 1529, isUnsigned: true)
!2037 = !DIEnumerator(name: "CODE_FOR_ssse3_phsubswv4hi3", value: 1530, isUnsigned: true)
!2038 = !DIEnumerator(name: "CODE_FOR_ssse3_pmaddubsw128", value: 1532, isUnsigned: true)
!2039 = !DIEnumerator(name: "CODE_FOR_ssse3_pmaddubsw", value: 1533, isUnsigned: true)
!2040 = !DIEnumerator(name: "CODE_FOR_ssse3_pshufbv16qi3", value: 1538, isUnsigned: true)
!2041 = !DIEnumerator(name: "CODE_FOR_ssse3_pshufbv8qi3", value: 1539, isUnsigned: true)
!2042 = !DIEnumerator(name: "CODE_FOR_ssse3_psignv16qi3", value: 1543, isUnsigned: true)
!2043 = !DIEnumerator(name: "CODE_FOR_ssse3_psignv8hi3", value: 1544, isUnsigned: true)
!2044 = !DIEnumerator(name: "CODE_FOR_ssse3_psignv4si3", value: 1545, isUnsigned: true)
!2045 = !DIEnumerator(name: "CODE_FOR_ssse3_psignv8qi3", value: 1546, isUnsigned: true)
!2046 = !DIEnumerator(name: "CODE_FOR_ssse3_psignv4hi3", value: 1547, isUnsigned: true)
!2047 = !DIEnumerator(name: "CODE_FOR_ssse3_psignv2si3", value: 1548, isUnsigned: true)
!2048 = !DIEnumerator(name: "CODE_FOR_ssse3_palignrti", value: 1550, isUnsigned: true)
!2049 = !DIEnumerator(name: "CODE_FOR_ssse3_palignrdi", value: 1551, isUnsigned: true)
!2050 = !DIEnumerator(name: "CODE_FOR_absv16qi2", value: 1552, isUnsigned: true)
!2051 = !DIEnumerator(name: "CODE_FOR_absv8hi2", value: 1553, isUnsigned: true)
!2052 = !DIEnumerator(name: "CODE_FOR_absv4si2", value: 1554, isUnsigned: true)
!2053 = !DIEnumerator(name: "CODE_FOR_absv8qi2", value: 1555, isUnsigned: true)
!2054 = !DIEnumerator(name: "CODE_FOR_absv4hi2", value: 1556, isUnsigned: true)
!2055 = !DIEnumerator(name: "CODE_FOR_absv2si2", value: 1557, isUnsigned: true)
!2056 = !DIEnumerator(name: "CODE_FOR_sse4a_movntsf", value: 1558, isUnsigned: true)
!2057 = !DIEnumerator(name: "CODE_FOR_sse4a_movntdf", value: 1559, isUnsigned: true)
!2058 = !DIEnumerator(name: "CODE_FOR_sse4a_vmmovntv4sf", value: 1560, isUnsigned: true)
!2059 = !DIEnumerator(name: "CODE_FOR_sse4a_vmmovntv2df", value: 1561, isUnsigned: true)
!2060 = !DIEnumerator(name: "CODE_FOR_sse4a_extrqi", value: 1562, isUnsigned: true)
!2061 = !DIEnumerator(name: "CODE_FOR_sse4a_extrq", value: 1563, isUnsigned: true)
!2062 = !DIEnumerator(name: "CODE_FOR_sse4a_insertqi", value: 1564, isUnsigned: true)
!2063 = !DIEnumerator(name: "CODE_FOR_sse4a_insertq", value: 1565, isUnsigned: true)
!2064 = !DIEnumerator(name: "CODE_FOR_avx_blendps", value: 1566, isUnsigned: true)
!2065 = !DIEnumerator(name: "CODE_FOR_avx_blendpd", value: 1567, isUnsigned: true)
!2066 = !DIEnumerator(name: "CODE_FOR_avx_blendps256", value: 1568, isUnsigned: true)
!2067 = !DIEnumerator(name: "CODE_FOR_avx_blendpd256", value: 1569, isUnsigned: true)
!2068 = !DIEnumerator(name: "CODE_FOR_avx_blendvps", value: 1570, isUnsigned: true)
!2069 = !DIEnumerator(name: "CODE_FOR_avx_blendvpd", value: 1571, isUnsigned: true)
!2070 = !DIEnumerator(name: "CODE_FOR_avx_blendvps256", value: 1572, isUnsigned: true)
!2071 = !DIEnumerator(name: "CODE_FOR_avx_blendvpd256", value: 1573, isUnsigned: true)
!2072 = !DIEnumerator(name: "CODE_FOR_sse4_1_blendps", value: 1574, isUnsigned: true)
!2073 = !DIEnumerator(name: "CODE_FOR_sse4_1_blendpd", value: 1575, isUnsigned: true)
!2074 = !DIEnumerator(name: "CODE_FOR_sse4_1_blendvps", value: 1576, isUnsigned: true)
!2075 = !DIEnumerator(name: "CODE_FOR_sse4_1_blendvpd", value: 1577, isUnsigned: true)
!2076 = !DIEnumerator(name: "CODE_FOR_avx_dpps", value: 1578, isUnsigned: true)
!2077 = !DIEnumerator(name: "CODE_FOR_avx_dppd", value: 1579, isUnsigned: true)
!2078 = !DIEnumerator(name: "CODE_FOR_avx_dpps256", value: 1580, isUnsigned: true)
!2079 = !DIEnumerator(name: "CODE_FOR_avx_dppd256", value: 1581, isUnsigned: true)
!2080 = !DIEnumerator(name: "CODE_FOR_sse4_1_dpps", value: 1582, isUnsigned: true)
!2081 = !DIEnumerator(name: "CODE_FOR_sse4_1_dppd", value: 1583, isUnsigned: true)
!2082 = !DIEnumerator(name: "CODE_FOR_sse4_1_movntdqa", value: 1584, isUnsigned: true)
!2083 = !DIEnumerator(name: "CODE_FOR_sse4_1_mpsadbw", value: 1586, isUnsigned: true)
!2084 = !DIEnumerator(name: "CODE_FOR_sse4_1_packusdw", value: 1588, isUnsigned: true)
!2085 = !DIEnumerator(name: "CODE_FOR_sse4_1_pblendvb", value: 1590, isUnsigned: true)
!2086 = !DIEnumerator(name: "CODE_FOR_sse4_1_pblendw", value: 1592, isUnsigned: true)
!2087 = !DIEnumerator(name: "CODE_FOR_sse4_1_phminposuw", value: 1593, isUnsigned: true)
!2088 = !DIEnumerator(name: "CODE_FOR_sse4_1_extendv8qiv8hi2", value: 1594, isUnsigned: true)
!2089 = !DIEnumerator(name: "CODE_FOR_sse4_1_extendv4qiv4si2", value: 1596, isUnsigned: true)
!2090 = !DIEnumerator(name: "CODE_FOR_sse4_1_extendv2qiv2di2", value: 1598, isUnsigned: true)
!2091 = !DIEnumerator(name: "CODE_FOR_sse4_1_extendv4hiv4si2", value: 1600, isUnsigned: true)
!2092 = !DIEnumerator(name: "CODE_FOR_sse4_1_extendv2hiv2di2", value: 1602, isUnsigned: true)
!2093 = !DIEnumerator(name: "CODE_FOR_sse4_1_extendv2siv2di2", value: 1604, isUnsigned: true)
!2094 = !DIEnumerator(name: "CODE_FOR_sse4_1_zero_extendv8qiv8hi2", value: 1606, isUnsigned: true)
!2095 = !DIEnumerator(name: "CODE_FOR_sse4_1_zero_extendv4qiv4si2", value: 1608, isUnsigned: true)
!2096 = !DIEnumerator(name: "CODE_FOR_sse4_1_zero_extendv2qiv2di2", value: 1610, isUnsigned: true)
!2097 = !DIEnumerator(name: "CODE_FOR_sse4_1_zero_extendv4hiv4si2", value: 1612, isUnsigned: true)
!2098 = !DIEnumerator(name: "CODE_FOR_sse4_1_zero_extendv2hiv2di2", value: 1614, isUnsigned: true)
!2099 = !DIEnumerator(name: "CODE_FOR_sse4_1_zero_extendv2siv2di2", value: 1616, isUnsigned: true)
!2100 = !DIEnumerator(name: "CODE_FOR_avx_vtestps", value: 1618, isUnsigned: true)
!2101 = !DIEnumerator(name: "CODE_FOR_avx_vtestpd", value: 1619, isUnsigned: true)
!2102 = !DIEnumerator(name: "CODE_FOR_avx_vtestps256", value: 1620, isUnsigned: true)
!2103 = !DIEnumerator(name: "CODE_FOR_avx_vtestpd256", value: 1621, isUnsigned: true)
!2104 = !DIEnumerator(name: "CODE_FOR_avx_ptest256", value: 1622, isUnsigned: true)
!2105 = !DIEnumerator(name: "CODE_FOR_sse4_1_ptest", value: 1623, isUnsigned: true)
!2106 = !DIEnumerator(name: "CODE_FOR_avx_roundps256", value: 1624, isUnsigned: true)
!2107 = !DIEnumerator(name: "CODE_FOR_avx_roundpd256", value: 1625, isUnsigned: true)
!2108 = !DIEnumerator(name: "CODE_FOR_sse4_1_roundps", value: 1626, isUnsigned: true)
!2109 = !DIEnumerator(name: "CODE_FOR_sse4_1_roundpd", value: 1627, isUnsigned: true)
!2110 = !DIEnumerator(name: "CODE_FOR_sse4_1_roundss", value: 1630, isUnsigned: true)
!2111 = !DIEnumerator(name: "CODE_FOR_sse4_1_roundsd", value: 1631, isUnsigned: true)
!2112 = !DIEnumerator(name: "CODE_FOR_sse4_2_pcmpestr", value: 1632, isUnsigned: true)
!2113 = !DIEnumerator(name: "CODE_FOR_sse4_2_pcmpestri", value: 1633, isUnsigned: true)
!2114 = !DIEnumerator(name: "CODE_FOR_sse4_2_pcmpestrm", value: 1634, isUnsigned: true)
!2115 = !DIEnumerator(name: "CODE_FOR_sse4_2_pcmpestr_cconly", value: 1635, isUnsigned: true)
!2116 = !DIEnumerator(name: "CODE_FOR_sse4_2_pcmpistr", value: 1636, isUnsigned: true)
!2117 = !DIEnumerator(name: "CODE_FOR_sse4_2_pcmpistri", value: 1637, isUnsigned: true)
!2118 = !DIEnumerator(name: "CODE_FOR_sse4_2_pcmpistrm", value: 1638, isUnsigned: true)
!2119 = !DIEnumerator(name: "CODE_FOR_sse4_2_pcmpistr_cconly", value: 1639, isUnsigned: true)
!2120 = !DIEnumerator(name: "CODE_FOR_xop_pmacsww", value: 1640, isUnsigned: true)
!2121 = !DIEnumerator(name: "CODE_FOR_xop_pmacssww", value: 1641, isUnsigned: true)
!2122 = !DIEnumerator(name: "CODE_FOR_xop_pmacsdd", value: 1642, isUnsigned: true)
!2123 = !DIEnumerator(name: "CODE_FOR_xop_pmacssdd", value: 1643, isUnsigned: true)
!2124 = !DIEnumerator(name: "CODE_FOR_xop_pmacssdql", value: 1644, isUnsigned: true)
!2125 = !DIEnumerator(name: "CODE_FOR_xop_pmacssdqh", value: 1645, isUnsigned: true)
!2126 = !DIEnumerator(name: "CODE_FOR_xop_pmacsdql", value: 1646, isUnsigned: true)
!2127 = !DIEnumerator(name: "CODE_FOR_xop_mulv2div2di3_low", value: 1647, isUnsigned: true)
!2128 = !DIEnumerator(name: "CODE_FOR_xop_pmacsdqh", value: 1648, isUnsigned: true)
!2129 = !DIEnumerator(name: "CODE_FOR_xop_mulv2div2di3_high", value: 1649, isUnsigned: true)
!2130 = !DIEnumerator(name: "CODE_FOR_xop_pmacsswd", value: 1650, isUnsigned: true)
!2131 = !DIEnumerator(name: "CODE_FOR_xop_pmacswd", value: 1651, isUnsigned: true)
!2132 = !DIEnumerator(name: "CODE_FOR_xop_pmadcsswd", value: 1652, isUnsigned: true)
!2133 = !DIEnumerator(name: "CODE_FOR_xop_pmadcswd", value: 1653, isUnsigned: true)
!2134 = !DIEnumerator(name: "CODE_FOR_xop_pcmov_v16qi", value: 1654, isUnsigned: true)
!2135 = !DIEnumerator(name: "CODE_FOR_xop_pcmov_v8hi", value: 1655, isUnsigned: true)
!2136 = !DIEnumerator(name: "CODE_FOR_xop_pcmov_v4si", value: 1656, isUnsigned: true)
!2137 = !DIEnumerator(name: "CODE_FOR_xop_pcmov_v2di", value: 1657, isUnsigned: true)
!2138 = !DIEnumerator(name: "CODE_FOR_xop_pcmov_v4sf", value: 1658, isUnsigned: true)
!2139 = !DIEnumerator(name: "CODE_FOR_xop_pcmov_v2df", value: 1659, isUnsigned: true)
!2140 = !DIEnumerator(name: "CODE_FOR_xop_pcmov_v32qi256", value: 1660, isUnsigned: true)
!2141 = !DIEnumerator(name: "CODE_FOR_xop_pcmov_v16hi256", value: 1661, isUnsigned: true)
!2142 = !DIEnumerator(name: "CODE_FOR_xop_pcmov_v8si256", value: 1662, isUnsigned: true)
!2143 = !DIEnumerator(name: "CODE_FOR_xop_pcmov_v4di256", value: 1663, isUnsigned: true)
!2144 = !DIEnumerator(name: "CODE_FOR_xop_pcmov_v8sf256", value: 1664, isUnsigned: true)
!2145 = !DIEnumerator(name: "CODE_FOR_xop_pcmov_v4df256", value: 1665, isUnsigned: true)
!2146 = !DIEnumerator(name: "CODE_FOR_xop_phaddbw", value: 1666, isUnsigned: true)
!2147 = !DIEnumerator(name: "CODE_FOR_xop_phaddbd", value: 1667, isUnsigned: true)
!2148 = !DIEnumerator(name: "CODE_FOR_xop_phaddbq", value: 1668, isUnsigned: true)
!2149 = !DIEnumerator(name: "CODE_FOR_xop_phaddwd", value: 1669, isUnsigned: true)
!2150 = !DIEnumerator(name: "CODE_FOR_xop_phaddwq", value: 1670, isUnsigned: true)
!2151 = !DIEnumerator(name: "CODE_FOR_xop_phadddq", value: 1671, isUnsigned: true)
!2152 = !DIEnumerator(name: "CODE_FOR_xop_phaddubw", value: 1672, isUnsigned: true)
!2153 = !DIEnumerator(name: "CODE_FOR_xop_phaddubd", value: 1673, isUnsigned: true)
!2154 = !DIEnumerator(name: "CODE_FOR_xop_phaddubq", value: 1674, isUnsigned: true)
!2155 = !DIEnumerator(name: "CODE_FOR_xop_phadduwd", value: 1675, isUnsigned: true)
!2156 = !DIEnumerator(name: "CODE_FOR_xop_phadduwq", value: 1676, isUnsigned: true)
!2157 = !DIEnumerator(name: "CODE_FOR_xop_phaddudq", value: 1677, isUnsigned: true)
!2158 = !DIEnumerator(name: "CODE_FOR_xop_phsubbw", value: 1678, isUnsigned: true)
!2159 = !DIEnumerator(name: "CODE_FOR_xop_phsubwd", value: 1679, isUnsigned: true)
!2160 = !DIEnumerator(name: "CODE_FOR_xop_phsubdq", value: 1680, isUnsigned: true)
!2161 = !DIEnumerator(name: "CODE_FOR_xop_pperm", value: 1681, isUnsigned: true)
!2162 = !DIEnumerator(name: "CODE_FOR_xop_pperm_pack_v2di_v4si", value: 1682, isUnsigned: true)
!2163 = !DIEnumerator(name: "CODE_FOR_xop_pperm_pack_v4si_v8hi", value: 1683, isUnsigned: true)
!2164 = !DIEnumerator(name: "CODE_FOR_xop_pperm_pack_v8hi_v16qi", value: 1684, isUnsigned: true)
!2165 = !DIEnumerator(name: "CODE_FOR_xop_rotlv16qi3", value: 1685, isUnsigned: true)
!2166 = !DIEnumerator(name: "CODE_FOR_xop_rotlv8hi3", value: 1686, isUnsigned: true)
!2167 = !DIEnumerator(name: "CODE_FOR_xop_rotlv4si3", value: 1687, isUnsigned: true)
!2168 = !DIEnumerator(name: "CODE_FOR_xop_rotlv2di3", value: 1688, isUnsigned: true)
!2169 = !DIEnumerator(name: "CODE_FOR_xop_rotrv16qi3", value: 1689, isUnsigned: true)
!2170 = !DIEnumerator(name: "CODE_FOR_xop_rotrv8hi3", value: 1690, isUnsigned: true)
!2171 = !DIEnumerator(name: "CODE_FOR_xop_rotrv4si3", value: 1691, isUnsigned: true)
!2172 = !DIEnumerator(name: "CODE_FOR_xop_rotrv2di3", value: 1692, isUnsigned: true)
!2173 = !DIEnumerator(name: "CODE_FOR_xop_vrotlv16qi3", value: 1693, isUnsigned: true)
!2174 = !DIEnumerator(name: "CODE_FOR_xop_vrotlv8hi3", value: 1694, isUnsigned: true)
!2175 = !DIEnumerator(name: "CODE_FOR_xop_vrotlv4si3", value: 1695, isUnsigned: true)
!2176 = !DIEnumerator(name: "CODE_FOR_xop_vrotlv2di3", value: 1696, isUnsigned: true)
!2177 = !DIEnumerator(name: "CODE_FOR_xop_ashlv16qi3", value: 1697, isUnsigned: true)
!2178 = !DIEnumerator(name: "CODE_FOR_xop_ashlv8hi3", value: 1698, isUnsigned: true)
!2179 = !DIEnumerator(name: "CODE_FOR_xop_ashlv4si3", value: 1699, isUnsigned: true)
!2180 = !DIEnumerator(name: "CODE_FOR_xop_ashlv2di3", value: 1700, isUnsigned: true)
!2181 = !DIEnumerator(name: "CODE_FOR_xop_lshlv16qi3", value: 1701, isUnsigned: true)
!2182 = !DIEnumerator(name: "CODE_FOR_xop_lshlv8hi3", value: 1702, isUnsigned: true)
!2183 = !DIEnumerator(name: "CODE_FOR_xop_lshlv4si3", value: 1703, isUnsigned: true)
!2184 = !DIEnumerator(name: "CODE_FOR_xop_lshlv2di3", value: 1704, isUnsigned: true)
!2185 = !DIEnumerator(name: "CODE_FOR_xop_frczv4sf2", value: 1705, isUnsigned: true)
!2186 = !DIEnumerator(name: "CODE_FOR_xop_frczv2df2", value: 1706, isUnsigned: true)
!2187 = !DIEnumerator(name: "CODE_FOR_xop_vmfrczv4sf2", value: 1707, isUnsigned: true)
!2188 = !DIEnumerator(name: "CODE_FOR_xop_vmfrczv2df2", value: 1708, isUnsigned: true)
!2189 = !DIEnumerator(name: "CODE_FOR_xop_frczv8sf2256", value: 1709, isUnsigned: true)
!2190 = !DIEnumerator(name: "CODE_FOR_xop_frczv4df2256", value: 1710, isUnsigned: true)
!2191 = !DIEnumerator(name: "CODE_FOR_xop_maskcmpv16qi3", value: 1711, isUnsigned: true)
!2192 = !DIEnumerator(name: "CODE_FOR_xop_maskcmpv8hi3", value: 1712, isUnsigned: true)
!2193 = !DIEnumerator(name: "CODE_FOR_xop_maskcmpv4si3", value: 1713, isUnsigned: true)
!2194 = !DIEnumerator(name: "CODE_FOR_xop_maskcmpv2di3", value: 1714, isUnsigned: true)
!2195 = !DIEnumerator(name: "CODE_FOR_xop_maskcmp_unsv16qi3", value: 1715, isUnsigned: true)
!2196 = !DIEnumerator(name: "CODE_FOR_xop_maskcmp_unsv8hi3", value: 1716, isUnsigned: true)
!2197 = !DIEnumerator(name: "CODE_FOR_xop_maskcmp_unsv4si3", value: 1717, isUnsigned: true)
!2198 = !DIEnumerator(name: "CODE_FOR_xop_maskcmp_unsv2di3", value: 1718, isUnsigned: true)
!2199 = !DIEnumerator(name: "CODE_FOR_xop_maskcmp_uns2v16qi3", value: 1719, isUnsigned: true)
!2200 = !DIEnumerator(name: "CODE_FOR_xop_maskcmp_uns2v8hi3", value: 1720, isUnsigned: true)
!2201 = !DIEnumerator(name: "CODE_FOR_xop_maskcmp_uns2v4si3", value: 1721, isUnsigned: true)
!2202 = !DIEnumerator(name: "CODE_FOR_xop_maskcmp_uns2v2di3", value: 1722, isUnsigned: true)
!2203 = !DIEnumerator(name: "CODE_FOR_xop_pcom_tfv16qi3", value: 1723, isUnsigned: true)
!2204 = !DIEnumerator(name: "CODE_FOR_xop_pcom_tfv8hi3", value: 1724, isUnsigned: true)
!2205 = !DIEnumerator(name: "CODE_FOR_xop_pcom_tfv4si3", value: 1725, isUnsigned: true)
!2206 = !DIEnumerator(name: "CODE_FOR_xop_pcom_tfv2di3", value: 1726, isUnsigned: true)
!2207 = !DIEnumerator(name: "CODE_FOR_xop_vpermil2v4sf3", value: 1727, isUnsigned: true)
!2208 = !DIEnumerator(name: "CODE_FOR_xop_vpermil2v2df3", value: 1728, isUnsigned: true)
!2209 = !DIEnumerator(name: "CODE_FOR_xop_vpermil2v8sf3", value: 1729, isUnsigned: true)
!2210 = !DIEnumerator(name: "CODE_FOR_xop_vpermil2v4df3", value: 1730, isUnsigned: true)
!2211 = !DIEnumerator(name: "CODE_FOR_aesenc", value: 1732, isUnsigned: true)
!2212 = !DIEnumerator(name: "CODE_FOR_aesenclast", value: 1734, isUnsigned: true)
!2213 = !DIEnumerator(name: "CODE_FOR_aesdec", value: 1736, isUnsigned: true)
!2214 = !DIEnumerator(name: "CODE_FOR_aesdeclast", value: 1738, isUnsigned: true)
!2215 = !DIEnumerator(name: "CODE_FOR_aesimc", value: 1739, isUnsigned: true)
!2216 = !DIEnumerator(name: "CODE_FOR_aeskeygenassist", value: 1740, isUnsigned: true)
!2217 = !DIEnumerator(name: "CODE_FOR_pclmulqdq", value: 1742, isUnsigned: true)
!2218 = !DIEnumerator(name: "CODE_FOR_vec_dupv8si", value: 1745, isUnsigned: true)
!2219 = !DIEnumerator(name: "CODE_FOR_vec_dupv8sf", value: 1746, isUnsigned: true)
!2220 = !DIEnumerator(name: "CODE_FOR_vec_dupv4di", value: 1747, isUnsigned: true)
!2221 = !DIEnumerator(name: "CODE_FOR_vec_dupv4df", value: 1748, isUnsigned: true)
!2222 = !DIEnumerator(name: "CODE_FOR_avx_vbroadcastf128_v32qi", value: 1749, isUnsigned: true)
!2223 = !DIEnumerator(name: "CODE_FOR_avx_vbroadcastf128_v16hi", value: 1750, isUnsigned: true)
!2224 = !DIEnumerator(name: "CODE_FOR_avx_vbroadcastf128_v8si", value: 1751, isUnsigned: true)
!2225 = !DIEnumerator(name: "CODE_FOR_avx_vbroadcastf128_v4di", value: 1752, isUnsigned: true)
!2226 = !DIEnumerator(name: "CODE_FOR_avx_vbroadcastf128_v8sf", value: 1753, isUnsigned: true)
!2227 = !DIEnumerator(name: "CODE_FOR_avx_vbroadcastf128_v4df", value: 1754, isUnsigned: true)
!2228 = !DIEnumerator(name: "CODE_FOR_avx_vpermilvarv4sf3", value: 1762, isUnsigned: true)
!2229 = !DIEnumerator(name: "CODE_FOR_avx_vpermilvarv2df3", value: 1763, isUnsigned: true)
!2230 = !DIEnumerator(name: "CODE_FOR_avx_vpermilvarv8sf3", value: 1764, isUnsigned: true)
!2231 = !DIEnumerator(name: "CODE_FOR_avx_vpermilvarv4df3", value: 1765, isUnsigned: true)
!2232 = !DIEnumerator(name: "CODE_FOR_vec_set_lo_v4di", value: 1772, isUnsigned: true)
!2233 = !DIEnumerator(name: "CODE_FOR_vec_set_lo_v4df", value: 1773, isUnsigned: true)
!2234 = !DIEnumerator(name: "CODE_FOR_vec_set_hi_v4di", value: 1774, isUnsigned: true)
!2235 = !DIEnumerator(name: "CODE_FOR_vec_set_hi_v4df", value: 1775, isUnsigned: true)
!2236 = !DIEnumerator(name: "CODE_FOR_vec_set_lo_v8si", value: 1776, isUnsigned: true)
!2237 = !DIEnumerator(name: "CODE_FOR_vec_set_lo_v8sf", value: 1777, isUnsigned: true)
!2238 = !DIEnumerator(name: "CODE_FOR_vec_set_hi_v8si", value: 1778, isUnsigned: true)
!2239 = !DIEnumerator(name: "CODE_FOR_vec_set_hi_v8sf", value: 1779, isUnsigned: true)
!2240 = !DIEnumerator(name: "CODE_FOR_vec_set_lo_v16hi", value: 1780, isUnsigned: true)
!2241 = !DIEnumerator(name: "CODE_FOR_vec_set_hi_v16hi", value: 1781, isUnsigned: true)
!2242 = !DIEnumerator(name: "CODE_FOR_vec_set_lo_v32qi", value: 1782, isUnsigned: true)
!2243 = !DIEnumerator(name: "CODE_FOR_vec_set_hi_v32qi", value: 1783, isUnsigned: true)
!2244 = !DIEnumerator(name: "CODE_FOR_avx_maskloadps", value: 1784, isUnsigned: true)
!2245 = !DIEnumerator(name: "CODE_FOR_avx_maskloadpd", value: 1785, isUnsigned: true)
!2246 = !DIEnumerator(name: "CODE_FOR_avx_maskloadps256", value: 1786, isUnsigned: true)
!2247 = !DIEnumerator(name: "CODE_FOR_avx_maskloadpd256", value: 1787, isUnsigned: true)
!2248 = !DIEnumerator(name: "CODE_FOR_avx_maskstoreps", value: 1788, isUnsigned: true)
!2249 = !DIEnumerator(name: "CODE_FOR_avx_maskstorepd", value: 1789, isUnsigned: true)
!2250 = !DIEnumerator(name: "CODE_FOR_avx_maskstoreps256", value: 1790, isUnsigned: true)
!2251 = !DIEnumerator(name: "CODE_FOR_avx_maskstorepd256", value: 1791, isUnsigned: true)
!2252 = !DIEnumerator(name: "CODE_FOR_avx_si256_si", value: 1792, isUnsigned: true)
!2253 = !DIEnumerator(name: "CODE_FOR_avx_ps256_ps", value: 1793, isUnsigned: true)
!2254 = !DIEnumerator(name: "CODE_FOR_avx_pd256_pd", value: 1794, isUnsigned: true)
!2255 = !DIEnumerator(name: "CODE_FOR_avx_si_si256", value: 1795, isUnsigned: true)
!2256 = !DIEnumerator(name: "CODE_FOR_avx_ps_ps256", value: 1796, isUnsigned: true)
!2257 = !DIEnumerator(name: "CODE_FOR_avx_pd_pd256", value: 1797, isUnsigned: true)
!2258 = !DIEnumerator(name: "CODE_FOR_memory_barrier_nosse", value: 1804, isUnsigned: true)
!2259 = !DIEnumerator(name: "CODE_FOR_sync_double_compare_and_swapdi", value: 1808, isUnsigned: true)
!2260 = !DIEnumerator(name: "CODE_FOR_sync_old_addqi", value: 1810, isUnsigned: true)
!2261 = !DIEnumerator(name: "CODE_FOR_sync_old_addhi", value: 1811, isUnsigned: true)
!2262 = !DIEnumerator(name: "CODE_FOR_sync_old_addsi", value: 1812, isUnsigned: true)
!2263 = !DIEnumerator(name: "CODE_FOR_sync_lock_test_and_setqi", value: 1813, isUnsigned: true)
!2264 = !DIEnumerator(name: "CODE_FOR_sync_lock_test_and_sethi", value: 1814, isUnsigned: true)
!2265 = !DIEnumerator(name: "CODE_FOR_sync_lock_test_and_setsi", value: 1815, isUnsigned: true)
!2266 = !DIEnumerator(name: "CODE_FOR_sync_addqi", value: 1816, isUnsigned: true)
!2267 = !DIEnumerator(name: "CODE_FOR_sync_addhi", value: 1817, isUnsigned: true)
!2268 = !DIEnumerator(name: "CODE_FOR_sync_addsi", value: 1818, isUnsigned: true)
!2269 = !DIEnumerator(name: "CODE_FOR_sync_subqi", value: 1819, isUnsigned: true)
!2270 = !DIEnumerator(name: "CODE_FOR_sync_subhi", value: 1820, isUnsigned: true)
!2271 = !DIEnumerator(name: "CODE_FOR_sync_subsi", value: 1821, isUnsigned: true)
!2272 = !DIEnumerator(name: "CODE_FOR_sync_andqi", value: 1822, isUnsigned: true)
!2273 = !DIEnumerator(name: "CODE_FOR_sync_iorqi", value: 1823, isUnsigned: true)
!2274 = !DIEnumerator(name: "CODE_FOR_sync_xorqi", value: 1824, isUnsigned: true)
!2275 = !DIEnumerator(name: "CODE_FOR_sync_andhi", value: 1825, isUnsigned: true)
!2276 = !DIEnumerator(name: "CODE_FOR_sync_iorhi", value: 1826, isUnsigned: true)
!2277 = !DIEnumerator(name: "CODE_FOR_sync_xorhi", value: 1827, isUnsigned: true)
!2278 = !DIEnumerator(name: "CODE_FOR_sync_andsi", value: 1828, isUnsigned: true)
!2279 = !DIEnumerator(name: "CODE_FOR_sync_iorsi", value: 1829, isUnsigned: true)
!2280 = !DIEnumerator(name: "CODE_FOR_sync_xorsi", value: 1830, isUnsigned: true)
!2281 = !DIEnumerator(name: "CODE_FOR_cbranchqi4", value: 1831, isUnsigned: true)
!2282 = !DIEnumerator(name: "CODE_FOR_cbranchhi4", value: 1832, isUnsigned: true)
!2283 = !DIEnumerator(name: "CODE_FOR_cbranchsi4", value: 1833, isUnsigned: true)
!2284 = !DIEnumerator(name: "CODE_FOR_cbranchdi4", value: 1834, isUnsigned: true)
!2285 = !DIEnumerator(name: "CODE_FOR_cstoreqi4", value: 1835, isUnsigned: true)
!2286 = !DIEnumerator(name: "CODE_FOR_cstorehi4", value: 1836, isUnsigned: true)
!2287 = !DIEnumerator(name: "CODE_FOR_cstoresi4", value: 1837, isUnsigned: true)
!2288 = !DIEnumerator(name: "CODE_FOR_cmpsi_1", value: 1838, isUnsigned: true)
!2289 = !DIEnumerator(name: "CODE_FOR_cmpqi_ext_3", value: 1839, isUnsigned: true)
!2290 = !DIEnumerator(name: "CODE_FOR_cbranchxf4", value: 1840, isUnsigned: true)
!2291 = !DIEnumerator(name: "CODE_FOR_cstorexf4", value: 1841, isUnsigned: true)
!2292 = !DIEnumerator(name: "CODE_FOR_cbranchsf4", value: 1842, isUnsigned: true)
!2293 = !DIEnumerator(name: "CODE_FOR_cbranchdf4", value: 1843, isUnsigned: true)
!2294 = !DIEnumerator(name: "CODE_FOR_cstoresf4", value: 1844, isUnsigned: true)
!2295 = !DIEnumerator(name: "CODE_FOR_cstoredf4", value: 1845, isUnsigned: true)
!2296 = !DIEnumerator(name: "CODE_FOR_cbranchcc4", value: 1846, isUnsigned: true)
!2297 = !DIEnumerator(name: "CODE_FOR_cstorecc4", value: 1847, isUnsigned: true)
!2298 = !DIEnumerator(name: "CODE_FOR_movsi", value: 1855, isUnsigned: true)
!2299 = !DIEnumerator(name: "CODE_FOR_movhi", value: 1856, isUnsigned: true)
!2300 = !DIEnumerator(name: "CODE_FOR_movstricthi", value: 1857, isUnsigned: true)
!2301 = !DIEnumerator(name: "CODE_FOR_movqi", value: 1858, isUnsigned: true)
!2302 = !DIEnumerator(name: "CODE_FOR_movstrictqi", value: 1859, isUnsigned: true)
!2303 = !DIEnumerator(name: "CODE_FOR_movdi", value: 1860, isUnsigned: true)
!2304 = !DIEnumerator(name: "CODE_FOR_movoi", value: 1863, isUnsigned: true)
!2305 = !DIEnumerator(name: "CODE_FOR_movti", value: 1864, isUnsigned: true)
!2306 = !DIEnumerator(name: "CODE_FOR_movcdi", value: 1866, isUnsigned: true)
!2307 = !DIEnumerator(name: "CODE_FOR_movsf", value: 1867, isUnsigned: true)
!2308 = !DIEnumerator(name: "CODE_FOR_movdf", value: 1870, isUnsigned: true)
!2309 = !DIEnumerator(name: "CODE_FOR_movxf", value: 1874, isUnsigned: true)
!2310 = !DIEnumerator(name: "CODE_FOR_movtf", value: 1877, isUnsigned: true)
!2311 = !DIEnumerator(name: "CODE_FOR_zero_extendhisi2", value: 1887, isUnsigned: true)
!2312 = !DIEnumerator(name: "CODE_FOR_zero_extendqihi2", value: 1889, isUnsigned: true)
!2313 = !DIEnumerator(name: "CODE_FOR_zero_extendqisi2", value: 1893, isUnsigned: true)
!2314 = !DIEnumerator(name: "CODE_FOR_zero_extendsidi2", value: 1897, isUnsigned: true)
!2315 = !DIEnumerator(name: "CODE_FOR_extendsidi2", value: 1900, isUnsigned: true)
!2316 = !DIEnumerator(name: "CODE_FOR_extendsfdf2", value: 1907, isUnsigned: true)
!2317 = !DIEnumerator(name: "CODE_FOR_extendsfxf2", value: 1909, isUnsigned: true)
!2318 = !DIEnumerator(name: "CODE_FOR_extenddfxf2", value: 1910, isUnsigned: true)
!2319 = !DIEnumerator(name: "CODE_FOR_truncdfsf2", value: 1911, isUnsigned: true)
!2320 = !DIEnumerator(name: "CODE_FOR_truncdfsf2_with_temp", value: 1913, isUnsigned: true)
!2321 = !DIEnumerator(name: "CODE_FOR_truncxfsf2", value: 1915, isUnsigned: true)
!2322 = !DIEnumerator(name: "CODE_FOR_truncxfdf2", value: 1916, isUnsigned: true)
!2323 = !DIEnumerator(name: "CODE_FOR_fix_truncxfdi2", value: 1921, isUnsigned: true)
!2324 = !DIEnumerator(name: "CODE_FOR_fix_truncsfdi2", value: 1922, isUnsigned: true)
!2325 = !DIEnumerator(name: "CODE_FOR_fix_truncdfdi2", value: 1923, isUnsigned: true)
!2326 = !DIEnumerator(name: "CODE_FOR_fix_truncxfsi2", value: 1924, isUnsigned: true)
!2327 = !DIEnumerator(name: "CODE_FOR_fix_truncsfsi2", value: 1925, isUnsigned: true)
!2328 = !DIEnumerator(name: "CODE_FOR_fix_truncdfsi2", value: 1926, isUnsigned: true)
!2329 = !DIEnumerator(name: "CODE_FOR_fix_truncsfhi2", value: 1927, isUnsigned: true)
!2330 = !DIEnumerator(name: "CODE_FOR_fix_truncdfhi2", value: 1928, isUnsigned: true)
!2331 = !DIEnumerator(name: "CODE_FOR_fix_truncxfhi2", value: 1929, isUnsigned: true)
!2332 = !DIEnumerator(name: "CODE_FOR_fixuns_truncsfsi2", value: 1930, isUnsigned: true)
!2333 = !DIEnumerator(name: "CODE_FOR_fixuns_truncdfsi2", value: 1931, isUnsigned: true)
!2334 = !DIEnumerator(name: "CODE_FOR_fixuns_truncsfhi2", value: 1934, isUnsigned: true)
!2335 = !DIEnumerator(name: "CODE_FOR_fixuns_truncdfhi2", value: 1935, isUnsigned: true)
!2336 = !DIEnumerator(name: "CODE_FOR_floathisf2", value: 1962, isUnsigned: true)
!2337 = !DIEnumerator(name: "CODE_FOR_floathidf2", value: 1963, isUnsigned: true)
!2338 = !DIEnumerator(name: "CODE_FOR_floathixf2", value: 1964, isUnsigned: true)
!2339 = !DIEnumerator(name: "CODE_FOR_floatsisf2", value: 1974, isUnsigned: true)
!2340 = !DIEnumerator(name: "CODE_FOR_floatdisf2", value: 1975, isUnsigned: true)
!2341 = !DIEnumerator(name: "CODE_FOR_floatsidf2", value: 1976, isUnsigned: true)
!2342 = !DIEnumerator(name: "CODE_FOR_floatdidf2", value: 1977, isUnsigned: true)
!2343 = !DIEnumerator(name: "CODE_FOR_floatsixf2", value: 1978, isUnsigned: true)
!2344 = !DIEnumerator(name: "CODE_FOR_floatdixf2", value: 1979, isUnsigned: true)
!2345 = !DIEnumerator(name: "CODE_FOR_floatunssisf2", value: 2028, isUnsigned: true)
!2346 = !DIEnumerator(name: "CODE_FOR_floatunssidf2", value: 2029, isUnsigned: true)
!2347 = !DIEnumerator(name: "CODE_FOR_floatunssixf2", value: 2030, isUnsigned: true)
!2348 = !DIEnumerator(name: "CODE_FOR_addqi3", value: 2031, isUnsigned: true)
!2349 = !DIEnumerator(name: "CODE_FOR_addhi3", value: 2032, isUnsigned: true)
!2350 = !DIEnumerator(name: "CODE_FOR_addsi3", value: 2033, isUnsigned: true)
!2351 = !DIEnumerator(name: "CODE_FOR_adddi3", value: 2034, isUnsigned: true)
!2352 = !DIEnumerator(name: "CODE_FOR_subqi3", value: 2040, isUnsigned: true)
!2353 = !DIEnumerator(name: "CODE_FOR_subhi3", value: 2041, isUnsigned: true)
!2354 = !DIEnumerator(name: "CODE_FOR_subsi3", value: 2042, isUnsigned: true)
!2355 = !DIEnumerator(name: "CODE_FOR_subdi3", value: 2043, isUnsigned: true)
!2356 = !DIEnumerator(name: "CODE_FOR_addqi3_carry", value: 2045, isUnsigned: true)
!2357 = !DIEnumerator(name: "CODE_FOR_subqi3_carry", value: 2046, isUnsigned: true)
!2358 = !DIEnumerator(name: "CODE_FOR_addhi3_carry", value: 2047, isUnsigned: true)
!2359 = !DIEnumerator(name: "CODE_FOR_subhi3_carry", value: 2048, isUnsigned: true)
!2360 = !DIEnumerator(name: "CODE_FOR_addsi3_carry", value: 2049, isUnsigned: true)
!2361 = !DIEnumerator(name: "CODE_FOR_subsi3_carry", value: 2050, isUnsigned: true)
!2362 = !DIEnumerator(name: "CODE_FOR_adddi3_carry", value: 2051, isUnsigned: true)
!2363 = !DIEnumerator(name: "CODE_FOR_subdi3_carry", value: 2052, isUnsigned: true)
!2364 = !DIEnumerator(name: "CODE_FOR_addxf3", value: 2053, isUnsigned: true)
!2365 = !DIEnumerator(name: "CODE_FOR_subxf3", value: 2054, isUnsigned: true)
!2366 = !DIEnumerator(name: "CODE_FOR_addsf3", value: 2055, isUnsigned: true)
!2367 = !DIEnumerator(name: "CODE_FOR_subsf3", value: 2056, isUnsigned: true)
!2368 = !DIEnumerator(name: "CODE_FOR_adddf3", value: 2057, isUnsigned: true)
!2369 = !DIEnumerator(name: "CODE_FOR_subdf3", value: 2058, isUnsigned: true)
!2370 = !DIEnumerator(name: "CODE_FOR_mulhi3", value: 2059, isUnsigned: true)
!2371 = !DIEnumerator(name: "CODE_FOR_mulsi3", value: 2060, isUnsigned: true)
!2372 = !DIEnumerator(name: "CODE_FOR_mulqi3", value: 2061, isUnsigned: true)
!2373 = !DIEnumerator(name: "CODE_FOR_mulsidi3", value: 2062, isUnsigned: true)
!2374 = !DIEnumerator(name: "CODE_FOR_umulsidi3", value: 2063, isUnsigned: true)
!2375 = !DIEnumerator(name: "CODE_FOR_mulqihi3", value: 2064, isUnsigned: true)
!2376 = !DIEnumerator(name: "CODE_FOR_umulqihi3", value: 2065, isUnsigned: true)
!2377 = !DIEnumerator(name: "CODE_FOR_smulsi3_highpart", value: 2066, isUnsigned: true)
!2378 = !DIEnumerator(name: "CODE_FOR_umulsi3_highpart", value: 2067, isUnsigned: true)
!2379 = !DIEnumerator(name: "CODE_FOR_mulxf3", value: 2068, isUnsigned: true)
!2380 = !DIEnumerator(name: "CODE_FOR_mulsf3", value: 2069, isUnsigned: true)
!2381 = !DIEnumerator(name: "CODE_FOR_muldf3", value: 2070, isUnsigned: true)
!2382 = !DIEnumerator(name: "CODE_FOR_divxf3", value: 2071, isUnsigned: true)
!2383 = !DIEnumerator(name: "CODE_FOR_divdf3", value: 2072, isUnsigned: true)
!2384 = !DIEnumerator(name: "CODE_FOR_divsf3", value: 2073, isUnsigned: true)
!2385 = !DIEnumerator(name: "CODE_FOR_divmodhi4", value: 2074, isUnsigned: true)
!2386 = !DIEnumerator(name: "CODE_FOR_divmodsi4", value: 2075, isUnsigned: true)
!2387 = !DIEnumerator(name: "CODE_FOR_udivmodhi4", value: 2078, isUnsigned: true)
!2388 = !DIEnumerator(name: "CODE_FOR_udivmodsi4", value: 2079, isUnsigned: true)
!2389 = !DIEnumerator(name: "CODE_FOR_testsi_ccno_1", value: 2082, isUnsigned: true)
!2390 = !DIEnumerator(name: "CODE_FOR_testqi_ccz_1", value: 2083, isUnsigned: true)
!2391 = !DIEnumerator(name: "CODE_FOR_testqi_ext_ccno_0", value: 2084, isUnsigned: true)
!2392 = !DIEnumerator(name: "CODE_FOR_andqi3", value: 2088, isUnsigned: true)
!2393 = !DIEnumerator(name: "CODE_FOR_andhi3", value: 2089, isUnsigned: true)
!2394 = !DIEnumerator(name: "CODE_FOR_andsi3", value: 2090, isUnsigned: true)
!2395 = !DIEnumerator(name: "CODE_FOR_iorqi3", value: 2096, isUnsigned: true)
!2396 = !DIEnumerator(name: "CODE_FOR_xorqi3", value: 2097, isUnsigned: true)
!2397 = !DIEnumerator(name: "CODE_FOR_iorhi3", value: 2098, isUnsigned: true)
!2398 = !DIEnumerator(name: "CODE_FOR_xorhi3", value: 2099, isUnsigned: true)
!2399 = !DIEnumerator(name: "CODE_FOR_iorsi3", value: 2100, isUnsigned: true)
!2400 = !DIEnumerator(name: "CODE_FOR_xorsi3", value: 2101, isUnsigned: true)
!2401 = !DIEnumerator(name: "CODE_FOR_xorqi_cc_ext_1", value: 2106, isUnsigned: true)
!2402 = !DIEnumerator(name: "CODE_FOR_negqi2", value: 2107, isUnsigned: true)
!2403 = !DIEnumerator(name: "CODE_FOR_neghi2", value: 2108, isUnsigned: true)
!2404 = !DIEnumerator(name: "CODE_FOR_negsi2", value: 2109, isUnsigned: true)
!2405 = !DIEnumerator(name: "CODE_FOR_negdi2", value: 2110, isUnsigned: true)
!2406 = !DIEnumerator(name: "CODE_FOR_abssf2", value: 2112, isUnsigned: true)
!2407 = !DIEnumerator(name: "CODE_FOR_negsf2", value: 2113, isUnsigned: true)
!2408 = !DIEnumerator(name: "CODE_FOR_absdf2", value: 2114, isUnsigned: true)
!2409 = !DIEnumerator(name: "CODE_FOR_negdf2", value: 2115, isUnsigned: true)
!2410 = !DIEnumerator(name: "CODE_FOR_absxf2", value: 2116, isUnsigned: true)
!2411 = !DIEnumerator(name: "CODE_FOR_negxf2", value: 2117, isUnsigned: true)
!2412 = !DIEnumerator(name: "CODE_FOR_abstf2", value: 2118, isUnsigned: true)
!2413 = !DIEnumerator(name: "CODE_FOR_negtf2", value: 2119, isUnsigned: true)
!2414 = !DIEnumerator(name: "CODE_FOR_copysignsf3", value: 2125, isUnsigned: true)
!2415 = !DIEnumerator(name: "CODE_FOR_copysigndf3", value: 2126, isUnsigned: true)
!2416 = !DIEnumerator(name: "CODE_FOR_copysigntf3", value: 2127, isUnsigned: true)
!2417 = !DIEnumerator(name: "CODE_FOR_one_cmplqi2", value: 2134, isUnsigned: true)
!2418 = !DIEnumerator(name: "CODE_FOR_one_cmplhi2", value: 2135, isUnsigned: true)
!2419 = !DIEnumerator(name: "CODE_FOR_one_cmplsi2", value: 2136, isUnsigned: true)
!2420 = !DIEnumerator(name: "CODE_FOR_ashldi3", value: 2142, isUnsigned: true)
!2421 = !DIEnumerator(name: "CODE_FOR_x86_shift_adj_1", value: 2145, isUnsigned: true)
!2422 = !DIEnumerator(name: "CODE_FOR_x86_shift_adj_2", value: 2146, isUnsigned: true)
!2423 = !DIEnumerator(name: "CODE_FOR_ashlsi3", value: 2147, isUnsigned: true)
!2424 = !DIEnumerator(name: "CODE_FOR_ashlhi3", value: 2150, isUnsigned: true)
!2425 = !DIEnumerator(name: "CODE_FOR_ashlqi3", value: 2151, isUnsigned: true)
!2426 = !DIEnumerator(name: "CODE_FOR_ashrdi3", value: 2152, isUnsigned: true)
!2427 = !DIEnumerator(name: "CODE_FOR_x86_64_shift_adj_3", value: 2153, isUnsigned: true)
!2428 = !DIEnumerator(name: "CODE_FOR_x86_shift_adj_3", value: 2156, isUnsigned: true)
!2429 = !DIEnumerator(name: "CODE_FOR_ashrsi3_31", value: 2157, isUnsigned: true)
!2430 = !DIEnumerator(name: "CODE_FOR_ashrsi3", value: 2158, isUnsigned: true)
!2431 = !DIEnumerator(name: "CODE_FOR_ashrhi3", value: 2159, isUnsigned: true)
!2432 = !DIEnumerator(name: "CODE_FOR_ashrqi3", value: 2160, isUnsigned: true)
!2433 = !DIEnumerator(name: "CODE_FOR_lshrdi3", value: 2161, isUnsigned: true)
!2434 = !DIEnumerator(name: "CODE_FOR_lshrsi3", value: 2164, isUnsigned: true)
!2435 = !DIEnumerator(name: "CODE_FOR_lshrhi3", value: 2165, isUnsigned: true)
!2436 = !DIEnumerator(name: "CODE_FOR_lshrqi3", value: 2166, isUnsigned: true)
!2437 = !DIEnumerator(name: "CODE_FOR_rotldi3", value: 2167, isUnsigned: true)
!2438 = !DIEnumerator(name: "CODE_FOR_rotlsi3", value: 2169, isUnsigned: true)
!2439 = !DIEnumerator(name: "CODE_FOR_rotlhi3", value: 2170, isUnsigned: true)
!2440 = !DIEnumerator(name: "CODE_FOR_rotlqi3", value: 2172, isUnsigned: true)
!2441 = !DIEnumerator(name: "CODE_FOR_rotrdi3", value: 2173, isUnsigned: true)
!2442 = !DIEnumerator(name: "CODE_FOR_rotrsi3", value: 2175, isUnsigned: true)
!2443 = !DIEnumerator(name: "CODE_FOR_rotrhi3", value: 2176, isUnsigned: true)
!2444 = !DIEnumerator(name: "CODE_FOR_rotrqi3", value: 2178, isUnsigned: true)
!2445 = !DIEnumerator(name: "CODE_FOR_extv", value: 2179, isUnsigned: true)
!2446 = !DIEnumerator(name: "CODE_FOR_extzv", value: 2180, isUnsigned: true)
!2447 = !DIEnumerator(name: "CODE_FOR_insv", value: 2181, isUnsigned: true)
!2448 = !DIEnumerator(name: "CODE_FOR_indirect_jump", value: 2200, isUnsigned: true)
!2449 = !DIEnumerator(name: "CODE_FOR_tablejump", value: 2201, isUnsigned: true)
!2450 = !DIEnumerator(name: "CODE_FOR_call_pop", value: 2204, isUnsigned: true)
!2451 = !DIEnumerator(name: "CODE_FOR_call", value: 2205, isUnsigned: true)
!2452 = !DIEnumerator(name: "CODE_FOR_sibcall", value: 2206, isUnsigned: true)
!2453 = !DIEnumerator(name: "CODE_FOR_call_value_pop", value: 2207, isUnsigned: true)
!2454 = !DIEnumerator(name: "CODE_FOR_call_value", value: 2208, isUnsigned: true)
!2455 = !DIEnumerator(name: "CODE_FOR_sibcall_value", value: 2209, isUnsigned: true)
!2456 = !DIEnumerator(name: "CODE_FOR_untyped_call", value: 2210, isUnsigned: true)
!2457 = !DIEnumerator(name: "CODE_FOR_memory_blockage", value: 2211, isUnsigned: true)
!2458 = !DIEnumerator(name: "CODE_FOR_return", value: 2212, isUnsigned: true)
!2459 = !DIEnumerator(name: "CODE_FOR_prologue", value: 2213, isUnsigned: true)
!2460 = !DIEnumerator(name: "CODE_FOR_epilogue", value: 2214, isUnsigned: true)
!2461 = !DIEnumerator(name: "CODE_FOR_sibcall_epilogue", value: 2215, isUnsigned: true)
!2462 = !DIEnumerator(name: "CODE_FOR_eh_return", value: 2216, isUnsigned: true)
!2463 = !DIEnumerator(name: "CODE_FOR_ffssi2", value: 2218, isUnsigned: true)
!2464 = !DIEnumerator(name: "CODE_FOR_ffs_cmove", value: 2219, isUnsigned: true)
!2465 = !DIEnumerator(name: "CODE_FOR_clzsi2", value: 2221, isUnsigned: true)
!2466 = !DIEnumerator(name: "CODE_FOR_bswapsi2", value: 2222, isUnsigned: true)
!2467 = !DIEnumerator(name: "CODE_FOR_clzhi2", value: 2223, isUnsigned: true)
!2468 = !DIEnumerator(name: "CODE_FOR_paritydi2", value: 2224, isUnsigned: true)
!2469 = !DIEnumerator(name: "CODE_FOR_paritysi2", value: 2226, isUnsigned: true)
!2470 = !DIEnumerator(name: "CODE_FOR_tls_global_dynamic_32", value: 2228, isUnsigned: true)
!2471 = !DIEnumerator(name: "CODE_FOR_tls_global_dynamic_64", value: 2229, isUnsigned: true)
!2472 = !DIEnumerator(name: "CODE_FOR_tls_local_dynamic_base_32", value: 2230, isUnsigned: true)
!2473 = !DIEnumerator(name: "CODE_FOR_tls_local_dynamic_base_64", value: 2231, isUnsigned: true)
!2474 = !DIEnumerator(name: "CODE_FOR_tls_dynamic_gnu2_32", value: 2233, isUnsigned: true)
!2475 = !DIEnumerator(name: "CODE_FOR_rsqrtsf2", value: 2240, isUnsigned: true)
!2476 = !DIEnumerator(name: "CODE_FOR_sqrtsf2", value: 2241, isUnsigned: true)
!2477 = !DIEnumerator(name: "CODE_FOR_sqrtdf2", value: 2242, isUnsigned: true)
!2478 = !DIEnumerator(name: "CODE_FOR_fmodxf3", value: 2243, isUnsigned: true)
!2479 = !DIEnumerator(name: "CODE_FOR_fmodsf3", value: 2244, isUnsigned: true)
!2480 = !DIEnumerator(name: "CODE_FOR_fmoddf3", value: 2245, isUnsigned: true)
!2481 = !DIEnumerator(name: "CODE_FOR_remainderxf3", value: 2246, isUnsigned: true)
!2482 = !DIEnumerator(name: "CODE_FOR_remaindersf3", value: 2247, isUnsigned: true)
!2483 = !DIEnumerator(name: "CODE_FOR_remainderdf3", value: 2248, isUnsigned: true)
!2484 = !DIEnumerator(name: "CODE_FOR_sincossf3", value: 2255, isUnsigned: true)
!2485 = !DIEnumerator(name: "CODE_FOR_sincosdf3", value: 2256, isUnsigned: true)
!2486 = !DIEnumerator(name: "CODE_FOR_tanxf2", value: 2257, isUnsigned: true)
!2487 = !DIEnumerator(name: "CODE_FOR_tansf2", value: 2258, isUnsigned: true)
!2488 = !DIEnumerator(name: "CODE_FOR_tandf2", value: 2259, isUnsigned: true)
!2489 = !DIEnumerator(name: "CODE_FOR_atan2xf3", value: 2260, isUnsigned: true)
!2490 = !DIEnumerator(name: "CODE_FOR_atan2sf3", value: 2261, isUnsigned: true)
!2491 = !DIEnumerator(name: "CODE_FOR_atan2df3", value: 2262, isUnsigned: true)
!2492 = !DIEnumerator(name: "CODE_FOR_atanxf2", value: 2263, isUnsigned: true)
!2493 = !DIEnumerator(name: "CODE_FOR_atansf2", value: 2264, isUnsigned: true)
!2494 = !DIEnumerator(name: "CODE_FOR_atandf2", value: 2265, isUnsigned: true)
!2495 = !DIEnumerator(name: "CODE_FOR_asinxf2", value: 2266, isUnsigned: true)
!2496 = !DIEnumerator(name: "CODE_FOR_asinsf2", value: 2267, isUnsigned: true)
!2497 = !DIEnumerator(name: "CODE_FOR_asindf2", value: 2268, isUnsigned: true)
!2498 = !DIEnumerator(name: "CODE_FOR_acosxf2", value: 2269, isUnsigned: true)
!2499 = !DIEnumerator(name: "CODE_FOR_acossf2", value: 2270, isUnsigned: true)
!2500 = !DIEnumerator(name: "CODE_FOR_acosdf2", value: 2271, isUnsigned: true)
!2501 = !DIEnumerator(name: "CODE_FOR_logxf2", value: 2272, isUnsigned: true)
!2502 = !DIEnumerator(name: "CODE_FOR_logsf2", value: 2273, isUnsigned: true)
!2503 = !DIEnumerator(name: "CODE_FOR_logdf2", value: 2274, isUnsigned: true)
!2504 = !DIEnumerator(name: "CODE_FOR_log10xf2", value: 2275, isUnsigned: true)
!2505 = !DIEnumerator(name: "CODE_FOR_log10sf2", value: 2276, isUnsigned: true)
!2506 = !DIEnumerator(name: "CODE_FOR_log10df2", value: 2277, isUnsigned: true)
!2507 = !DIEnumerator(name: "CODE_FOR_log2xf2", value: 2278, isUnsigned: true)
!2508 = !DIEnumerator(name: "CODE_FOR_log2sf2", value: 2279, isUnsigned: true)
!2509 = !DIEnumerator(name: "CODE_FOR_log2df2", value: 2280, isUnsigned: true)
!2510 = !DIEnumerator(name: "CODE_FOR_log1pxf2", value: 2281, isUnsigned: true)
!2511 = !DIEnumerator(name: "CODE_FOR_log1psf2", value: 2282, isUnsigned: true)
!2512 = !DIEnumerator(name: "CODE_FOR_log1pdf2", value: 2283, isUnsigned: true)
!2513 = !DIEnumerator(name: "CODE_FOR_logbxf2", value: 2284, isUnsigned: true)
!2514 = !DIEnumerator(name: "CODE_FOR_logbsf2", value: 2285, isUnsigned: true)
!2515 = !DIEnumerator(name: "CODE_FOR_logbdf2", value: 2286, isUnsigned: true)
!2516 = !DIEnumerator(name: "CODE_FOR_ilogbxf2", value: 2287, isUnsigned: true)
!2517 = !DIEnumerator(name: "CODE_FOR_ilogbsf2", value: 2288, isUnsigned: true)
!2518 = !DIEnumerator(name: "CODE_FOR_ilogbdf2", value: 2289, isUnsigned: true)
!2519 = !DIEnumerator(name: "CODE_FOR_expNcorexf3", value: 2290, isUnsigned: true)
!2520 = !DIEnumerator(name: "CODE_FOR_expxf2", value: 2291, isUnsigned: true)
!2521 = !DIEnumerator(name: "CODE_FOR_expsf2", value: 2292, isUnsigned: true)
!2522 = !DIEnumerator(name: "CODE_FOR_expdf2", value: 2293, isUnsigned: true)
!2523 = !DIEnumerator(name: "CODE_FOR_exp10xf2", value: 2294, isUnsigned: true)
!2524 = !DIEnumerator(name: "CODE_FOR_exp10sf2", value: 2295, isUnsigned: true)
!2525 = !DIEnumerator(name: "CODE_FOR_exp10df2", value: 2296, isUnsigned: true)
!2526 = !DIEnumerator(name: "CODE_FOR_exp2xf2", value: 2297, isUnsigned: true)
!2527 = !DIEnumerator(name: "CODE_FOR_exp2sf2", value: 2298, isUnsigned: true)
!2528 = !DIEnumerator(name: "CODE_FOR_exp2df2", value: 2299, isUnsigned: true)
!2529 = !DIEnumerator(name: "CODE_FOR_expm1xf2", value: 2300, isUnsigned: true)
!2530 = !DIEnumerator(name: "CODE_FOR_expm1sf2", value: 2301, isUnsigned: true)
!2531 = !DIEnumerator(name: "CODE_FOR_expm1df2", value: 2302, isUnsigned: true)
!2532 = !DIEnumerator(name: "CODE_FOR_ldexpxf3", value: 2303, isUnsigned: true)
!2533 = !DIEnumerator(name: "CODE_FOR_ldexpsf3", value: 2304, isUnsigned: true)
!2534 = !DIEnumerator(name: "CODE_FOR_ldexpdf3", value: 2305, isUnsigned: true)
!2535 = !DIEnumerator(name: "CODE_FOR_scalbxf3", value: 2306, isUnsigned: true)
!2536 = !DIEnumerator(name: "CODE_FOR_scalbsf3", value: 2307, isUnsigned: true)
!2537 = !DIEnumerator(name: "CODE_FOR_scalbdf3", value: 2308, isUnsigned: true)
!2538 = !DIEnumerator(name: "CODE_FOR_significandxf2", value: 2309, isUnsigned: true)
!2539 = !DIEnumerator(name: "CODE_FOR_significandsf2", value: 2310, isUnsigned: true)
!2540 = !DIEnumerator(name: "CODE_FOR_significanddf2", value: 2311, isUnsigned: true)
!2541 = !DIEnumerator(name: "CODE_FOR_rintsf2", value: 2312, isUnsigned: true)
!2542 = !DIEnumerator(name: "CODE_FOR_rintdf2", value: 2313, isUnsigned: true)
!2543 = !DIEnumerator(name: "CODE_FOR_roundsf2", value: 2314, isUnsigned: true)
!2544 = !DIEnumerator(name: "CODE_FOR_rounddf2", value: 2315, isUnsigned: true)
!2545 = !DIEnumerator(name: "CODE_FOR_lrintxfhi2", value: 2325, isUnsigned: true)
!2546 = !DIEnumerator(name: "CODE_FOR_lrintxfsi2", value: 2326, isUnsigned: true)
!2547 = !DIEnumerator(name: "CODE_FOR_lrintxfdi2", value: 2327, isUnsigned: true)
!2548 = !DIEnumerator(name: "CODE_FOR_lrintsfsi2", value: 2328, isUnsigned: true)
!2549 = !DIEnumerator(name: "CODE_FOR_lrintdfsi2", value: 2329, isUnsigned: true)
!2550 = !DIEnumerator(name: "CODE_FOR_lroundsfsi2", value: 2330, isUnsigned: true)
!2551 = !DIEnumerator(name: "CODE_FOR_lrounddfsi2", value: 2331, isUnsigned: true)
!2552 = !DIEnumerator(name: "CODE_FOR_floorxf2", value: 2333, isUnsigned: true)
!2553 = !DIEnumerator(name: "CODE_FOR_floorsf2", value: 2334, isUnsigned: true)
!2554 = !DIEnumerator(name: "CODE_FOR_floordf2", value: 2335, isUnsigned: true)
!2555 = !DIEnumerator(name: "CODE_FOR_lfloorxfhi2", value: 2345, isUnsigned: true)
!2556 = !DIEnumerator(name: "CODE_FOR_lfloorxfsi2", value: 2346, isUnsigned: true)
!2557 = !DIEnumerator(name: "CODE_FOR_lfloorxfdi2", value: 2347, isUnsigned: true)
!2558 = !DIEnumerator(name: "CODE_FOR_lfloorsfsi2", value: 2348, isUnsigned: true)
!2559 = !DIEnumerator(name: "CODE_FOR_lfloordfsi2", value: 2349, isUnsigned: true)
!2560 = !DIEnumerator(name: "CODE_FOR_ceilxf2", value: 2351, isUnsigned: true)
!2561 = !DIEnumerator(name: "CODE_FOR_ceilsf2", value: 2352, isUnsigned: true)
!2562 = !DIEnumerator(name: "CODE_FOR_ceildf2", value: 2353, isUnsigned: true)
!2563 = !DIEnumerator(name: "CODE_FOR_lceilxfhi2", value: 2363, isUnsigned: true)
!2564 = !DIEnumerator(name: "CODE_FOR_lceilxfsi2", value: 2364, isUnsigned: true)
!2565 = !DIEnumerator(name: "CODE_FOR_lceilxfdi2", value: 2365, isUnsigned: true)
!2566 = !DIEnumerator(name: "CODE_FOR_lceilsfsi2", value: 2366, isUnsigned: true)
!2567 = !DIEnumerator(name: "CODE_FOR_lceildfsi2", value: 2367, isUnsigned: true)
!2568 = !DIEnumerator(name: "CODE_FOR_btruncxf2", value: 2369, isUnsigned: true)
!2569 = !DIEnumerator(name: "CODE_FOR_btruncsf2", value: 2370, isUnsigned: true)
!2570 = !DIEnumerator(name: "CODE_FOR_btruncdf2", value: 2371, isUnsigned: true)
!2571 = !DIEnumerator(name: "CODE_FOR_nearbyintxf2", value: 2373, isUnsigned: true)
!2572 = !DIEnumerator(name: "CODE_FOR_nearbyintsf2", value: 2374, isUnsigned: true)
!2573 = !DIEnumerator(name: "CODE_FOR_nearbyintdf2", value: 2375, isUnsigned: true)
!2574 = !DIEnumerator(name: "CODE_FOR_isinfxf2", value: 2378, isUnsigned: true)
!2575 = !DIEnumerator(name: "CODE_FOR_isinfsf2", value: 2379, isUnsigned: true)
!2576 = !DIEnumerator(name: "CODE_FOR_isinfdf2", value: 2380, isUnsigned: true)
!2577 = !DIEnumerator(name: "CODE_FOR_signbitsf2", value: 2381, isUnsigned: true)
!2578 = !DIEnumerator(name: "CODE_FOR_signbitdf2", value: 2382, isUnsigned: true)
!2579 = !DIEnumerator(name: "CODE_FOR_signbitxf2", value: 2383, isUnsigned: true)
!2580 = !DIEnumerator(name: "CODE_FOR_movmemsi", value: 2384, isUnsigned: true)
!2581 = !DIEnumerator(name: "CODE_FOR_strmov", value: 2385, isUnsigned: true)
!2582 = !DIEnumerator(name: "CODE_FOR_strmov_singleop", value: 2386, isUnsigned: true)
!2583 = !DIEnumerator(name: "CODE_FOR_rep_mov", value: 2387, isUnsigned: true)
!2584 = !DIEnumerator(name: "CODE_FOR_setmemsi", value: 2388, isUnsigned: true)
!2585 = !DIEnumerator(name: "CODE_FOR_strset", value: 2389, isUnsigned: true)
!2586 = !DIEnumerator(name: "CODE_FOR_strset_singleop", value: 2390, isUnsigned: true)
!2587 = !DIEnumerator(name: "CODE_FOR_rep_stos", value: 2391, isUnsigned: true)
!2588 = !DIEnumerator(name: "CODE_FOR_cmpstrnsi", value: 2392, isUnsigned: true)
!2589 = !DIEnumerator(name: "CODE_FOR_cmpintqi", value: 2393, isUnsigned: true)
!2590 = !DIEnumerator(name: "CODE_FOR_cmpstrnqi_nz_1", value: 2394, isUnsigned: true)
!2591 = !DIEnumerator(name: "CODE_FOR_cmpstrnqi_1", value: 2395, isUnsigned: true)
!2592 = !DIEnumerator(name: "CODE_FOR_strlensi", value: 2396, isUnsigned: true)
!2593 = !DIEnumerator(name: "CODE_FOR_strlendi", value: 2397, isUnsigned: true)
!2594 = !DIEnumerator(name: "CODE_FOR_strlenqi_1", value: 2398, isUnsigned: true)
!2595 = !DIEnumerator(name: "CODE_FOR_movqicc", value: 2401, isUnsigned: true)
!2596 = !DIEnumerator(name: "CODE_FOR_movhicc", value: 2402, isUnsigned: true)
!2597 = !DIEnumerator(name: "CODE_FOR_movsicc", value: 2403, isUnsigned: true)
!2598 = !DIEnumerator(name: "CODE_FOR_x86_movsicc_0_m1", value: 2404, isUnsigned: true)
!2599 = !DIEnumerator(name: "CODE_FOR_movsfcc", value: 2406, isUnsigned: true)
!2600 = !DIEnumerator(name: "CODE_FOR_movdfcc", value: 2407, isUnsigned: true)
!2601 = !DIEnumerator(name: "CODE_FOR_movxfcc", value: 2408, isUnsigned: true)
!2602 = !DIEnumerator(name: "CODE_FOR_addqicc", value: 2411, isUnsigned: true)
!2603 = !DIEnumerator(name: "CODE_FOR_addhicc", value: 2412, isUnsigned: true)
!2604 = !DIEnumerator(name: "CODE_FOR_addsicc", value: 2413, isUnsigned: true)
!2605 = !DIEnumerator(name: "CODE_FOR_allocate_stack", value: 2414, isUnsigned: true)
!2606 = !DIEnumerator(name: "CODE_FOR_probe_stack", value: 2415, isUnsigned: true)
!2607 = !DIEnumerator(name: "CODE_FOR_builtin_setjmp_receiver", value: 2416, isUnsigned: true)
!2608 = !DIEnumerator(name: "CODE_FOR_prefetch", value: 2486, isUnsigned: true)
!2609 = !DIEnumerator(name: "CODE_FOR_stack_protect_set", value: 2487, isUnsigned: true)
!2610 = !DIEnumerator(name: "CODE_FOR_stack_protect_test", value: 2488, isUnsigned: true)
!2611 = !DIEnumerator(name: "CODE_FOR_rdpmc", value: 2489, isUnsigned: true)
!2612 = !DIEnumerator(name: "CODE_FOR_rdtsc", value: 2490, isUnsigned: true)
!2613 = !DIEnumerator(name: "CODE_FOR_rdtscp", value: 2491, isUnsigned: true)
!2614 = !DIEnumerator(name: "CODE_FOR_lwp_llwpcb", value: 2492, isUnsigned: true)
!2615 = !DIEnumerator(name: "CODE_FOR_lwp_slwpcb", value: 2493, isUnsigned: true)
!2616 = !DIEnumerator(name: "CODE_FOR_lwp_lwpvalsi3", value: 2494, isUnsigned: true)
!2617 = !DIEnumerator(name: "CODE_FOR_lwp_lwpinssi3", value: 2495, isUnsigned: true)
!2618 = !DIEnumerator(name: "CODE_FOR_movv8qi", value: 2496, isUnsigned: true)
!2619 = !DIEnumerator(name: "CODE_FOR_movv4hi", value: 2497, isUnsigned: true)
!2620 = !DIEnumerator(name: "CODE_FOR_movv2si", value: 2498, isUnsigned: true)
!2621 = !DIEnumerator(name: "CODE_FOR_movv1di", value: 2499, isUnsigned: true)
!2622 = !DIEnumerator(name: "CODE_FOR_movv2sf", value: 2500, isUnsigned: true)
!2623 = !DIEnumerator(name: "CODE_FOR_pushv8qi1", value: 2506, isUnsigned: true)
!2624 = !DIEnumerator(name: "CODE_FOR_pushv4hi1", value: 2507, isUnsigned: true)
!2625 = !DIEnumerator(name: "CODE_FOR_pushv2si1", value: 2508, isUnsigned: true)
!2626 = !DIEnumerator(name: "CODE_FOR_pushv1di1", value: 2509, isUnsigned: true)
!2627 = !DIEnumerator(name: "CODE_FOR_pushv2sf1", value: 2510, isUnsigned: true)
!2628 = !DIEnumerator(name: "CODE_FOR_movmisalignv8qi", value: 2511, isUnsigned: true)
!2629 = !DIEnumerator(name: "CODE_FOR_movmisalignv4hi", value: 2512, isUnsigned: true)
!2630 = !DIEnumerator(name: "CODE_FOR_movmisalignv2si", value: 2513, isUnsigned: true)
!2631 = !DIEnumerator(name: "CODE_FOR_movmisalignv1di", value: 2514, isUnsigned: true)
!2632 = !DIEnumerator(name: "CODE_FOR_movmisalignv2sf", value: 2515, isUnsigned: true)
!2633 = !DIEnumerator(name: "CODE_FOR_mmx_addv2sf3", value: 2516, isUnsigned: true)
!2634 = !DIEnumerator(name: "CODE_FOR_mmx_subv2sf3", value: 2517, isUnsigned: true)
!2635 = !DIEnumerator(name: "CODE_FOR_mmx_subrv2sf3", value: 2518, isUnsigned: true)
!2636 = !DIEnumerator(name: "CODE_FOR_mmx_mulv2sf3", value: 2519, isUnsigned: true)
!2637 = !DIEnumerator(name: "CODE_FOR_mmx_smaxv2sf3", value: 2520, isUnsigned: true)
!2638 = !DIEnumerator(name: "CODE_FOR_mmx_sminv2sf3", value: 2521, isUnsigned: true)
!2639 = !DIEnumerator(name: "CODE_FOR_mmx_eqv2sf3", value: 2522, isUnsigned: true)
!2640 = !DIEnumerator(name: "CODE_FOR_vec_setv2sf", value: 2523, isUnsigned: true)
!2641 = !DIEnumerator(name: "CODE_FOR_vec_extractv2sf", value: 2526, isUnsigned: true)
!2642 = !DIEnumerator(name: "CODE_FOR_vec_initv2sf", value: 2527, isUnsigned: true)
!2643 = !DIEnumerator(name: "CODE_FOR_mmx_addv8qi3", value: 2528, isUnsigned: true)
!2644 = !DIEnumerator(name: "CODE_FOR_mmx_subv8qi3", value: 2529, isUnsigned: true)
!2645 = !DIEnumerator(name: "CODE_FOR_mmx_addv4hi3", value: 2530, isUnsigned: true)
!2646 = !DIEnumerator(name: "CODE_FOR_mmx_subv4hi3", value: 2531, isUnsigned: true)
!2647 = !DIEnumerator(name: "CODE_FOR_mmx_addv2si3", value: 2532, isUnsigned: true)
!2648 = !DIEnumerator(name: "CODE_FOR_mmx_subv2si3", value: 2533, isUnsigned: true)
!2649 = !DIEnumerator(name: "CODE_FOR_mmx_addv1di3", value: 2534, isUnsigned: true)
!2650 = !DIEnumerator(name: "CODE_FOR_mmx_subv1di3", value: 2535, isUnsigned: true)
!2651 = !DIEnumerator(name: "CODE_FOR_mmx_ssaddv8qi3", value: 2536, isUnsigned: true)
!2652 = !DIEnumerator(name: "CODE_FOR_mmx_usaddv8qi3", value: 2537, isUnsigned: true)
!2653 = !DIEnumerator(name: "CODE_FOR_mmx_sssubv8qi3", value: 2538, isUnsigned: true)
!2654 = !DIEnumerator(name: "CODE_FOR_mmx_ussubv8qi3", value: 2539, isUnsigned: true)
!2655 = !DIEnumerator(name: "CODE_FOR_mmx_ssaddv4hi3", value: 2540, isUnsigned: true)
!2656 = !DIEnumerator(name: "CODE_FOR_mmx_usaddv4hi3", value: 2541, isUnsigned: true)
!2657 = !DIEnumerator(name: "CODE_FOR_mmx_sssubv4hi3", value: 2542, isUnsigned: true)
!2658 = !DIEnumerator(name: "CODE_FOR_mmx_ussubv4hi3", value: 2543, isUnsigned: true)
!2659 = !DIEnumerator(name: "CODE_FOR_mmx_mulv4hi3", value: 2544, isUnsigned: true)
!2660 = !DIEnumerator(name: "CODE_FOR_mmx_smulv4hi3_highpart", value: 2545, isUnsigned: true)
!2661 = !DIEnumerator(name: "CODE_FOR_mmx_umulv4hi3_highpart", value: 2546, isUnsigned: true)
!2662 = !DIEnumerator(name: "CODE_FOR_mmx_pmaddwd", value: 2547, isUnsigned: true)
!2663 = !DIEnumerator(name: "CODE_FOR_mmx_pmulhrwv4hi3", value: 2548, isUnsigned: true)
!2664 = !DIEnumerator(name: "CODE_FOR_sse2_umulv1siv1di3", value: 2549, isUnsigned: true)
!2665 = !DIEnumerator(name: "CODE_FOR_mmx_smaxv4hi3", value: 2550, isUnsigned: true)
!2666 = !DIEnumerator(name: "CODE_FOR_mmx_sminv4hi3", value: 2551, isUnsigned: true)
!2667 = !DIEnumerator(name: "CODE_FOR_mmx_umaxv8qi3", value: 2552, isUnsigned: true)
!2668 = !DIEnumerator(name: "CODE_FOR_mmx_uminv8qi3", value: 2553, isUnsigned: true)
!2669 = !DIEnumerator(name: "CODE_FOR_mmx_eqv8qi3", value: 2554, isUnsigned: true)
!2670 = !DIEnumerator(name: "CODE_FOR_mmx_eqv4hi3", value: 2555, isUnsigned: true)
!2671 = !DIEnumerator(name: "CODE_FOR_mmx_eqv2si3", value: 2556, isUnsigned: true)
!2672 = !DIEnumerator(name: "CODE_FOR_mmx_andv8qi3", value: 2557, isUnsigned: true)
!2673 = !DIEnumerator(name: "CODE_FOR_mmx_iorv8qi3", value: 2558, isUnsigned: true)
!2674 = !DIEnumerator(name: "CODE_FOR_mmx_xorv8qi3", value: 2559, isUnsigned: true)
!2675 = !DIEnumerator(name: "CODE_FOR_mmx_andv4hi3", value: 2560, isUnsigned: true)
!2676 = !DIEnumerator(name: "CODE_FOR_mmx_iorv4hi3", value: 2561, isUnsigned: true)
!2677 = !DIEnumerator(name: "CODE_FOR_mmx_xorv4hi3", value: 2562, isUnsigned: true)
!2678 = !DIEnumerator(name: "CODE_FOR_mmx_andv2si3", value: 2563, isUnsigned: true)
!2679 = !DIEnumerator(name: "CODE_FOR_mmx_iorv2si3", value: 2564, isUnsigned: true)
!2680 = !DIEnumerator(name: "CODE_FOR_mmx_xorv2si3", value: 2565, isUnsigned: true)
!2681 = !DIEnumerator(name: "CODE_FOR_mmx_pinsrw", value: 2566, isUnsigned: true)
!2682 = !DIEnumerator(name: "CODE_FOR_mmx_pshufw", value: 2567, isUnsigned: true)
!2683 = !DIEnumerator(name: "CODE_FOR_vec_setv2si", value: 2568, isUnsigned: true)
!2684 = !DIEnumerator(name: "CODE_FOR_vec_extractv2si", value: 2571, isUnsigned: true)
!2685 = !DIEnumerator(name: "CODE_FOR_vec_initv2si", value: 2572, isUnsigned: true)
!2686 = !DIEnumerator(name: "CODE_FOR_vec_setv4hi", value: 2573, isUnsigned: true)
!2687 = !DIEnumerator(name: "CODE_FOR_vec_extractv4hi", value: 2574, isUnsigned: true)
!2688 = !DIEnumerator(name: "CODE_FOR_vec_initv4hi", value: 2575, isUnsigned: true)
!2689 = !DIEnumerator(name: "CODE_FOR_vec_setv8qi", value: 2576, isUnsigned: true)
!2690 = !DIEnumerator(name: "CODE_FOR_vec_extractv8qi", value: 2577, isUnsigned: true)
!2691 = !DIEnumerator(name: "CODE_FOR_vec_initv8qi", value: 2578, isUnsigned: true)
!2692 = !DIEnumerator(name: "CODE_FOR_mmx_uavgv8qi3", value: 2579, isUnsigned: true)
!2693 = !DIEnumerator(name: "CODE_FOR_mmx_uavgv4hi3", value: 2580, isUnsigned: true)
!2694 = !DIEnumerator(name: "CODE_FOR_mmx_maskmovq", value: 2581, isUnsigned: true)
!2695 = !DIEnumerator(name: "CODE_FOR_mmx_emms", value: 2582, isUnsigned: true)
!2696 = !DIEnumerator(name: "CODE_FOR_mmx_femms", value: 2583, isUnsigned: true)
!2697 = !DIEnumerator(name: "CODE_FOR_movv32qi", value: 2584, isUnsigned: true)
!2698 = !DIEnumerator(name: "CODE_FOR_movv16hi", value: 2585, isUnsigned: true)
!2699 = !DIEnumerator(name: "CODE_FOR_movv8si", value: 2586, isUnsigned: true)
!2700 = !DIEnumerator(name: "CODE_FOR_movv4di", value: 2587, isUnsigned: true)
!2701 = !DIEnumerator(name: "CODE_FOR_movv8sf", value: 2588, isUnsigned: true)
!2702 = !DIEnumerator(name: "CODE_FOR_movv4df", value: 2589, isUnsigned: true)
!2703 = !DIEnumerator(name: "CODE_FOR_movv16qi", value: 2590, isUnsigned: true)
!2704 = !DIEnumerator(name: "CODE_FOR_movv8hi", value: 2591, isUnsigned: true)
!2705 = !DIEnumerator(name: "CODE_FOR_movv4si", value: 2592, isUnsigned: true)
!2706 = !DIEnumerator(name: "CODE_FOR_movv2di", value: 2593, isUnsigned: true)
!2707 = !DIEnumerator(name: "CODE_FOR_movv1ti", value: 2594, isUnsigned: true)
!2708 = !DIEnumerator(name: "CODE_FOR_movv4sf", value: 2595, isUnsigned: true)
!2709 = !DIEnumerator(name: "CODE_FOR_movv2df", value: 2596, isUnsigned: true)
!2710 = !DIEnumerator(name: "CODE_FOR_pushv32qi1", value: 2600, isUnsigned: true)
!2711 = !DIEnumerator(name: "CODE_FOR_pushv16hi1", value: 2601, isUnsigned: true)
!2712 = !DIEnumerator(name: "CODE_FOR_pushv8si1", value: 2602, isUnsigned: true)
!2713 = !DIEnumerator(name: "CODE_FOR_pushv4di1", value: 2603, isUnsigned: true)
!2714 = !DIEnumerator(name: "CODE_FOR_pushv8sf1", value: 2604, isUnsigned: true)
!2715 = !DIEnumerator(name: "CODE_FOR_pushv4df1", value: 2605, isUnsigned: true)
!2716 = !DIEnumerator(name: "CODE_FOR_pushv16qi1", value: 2606, isUnsigned: true)
!2717 = !DIEnumerator(name: "CODE_FOR_pushv8hi1", value: 2607, isUnsigned: true)
!2718 = !DIEnumerator(name: "CODE_FOR_pushv4si1", value: 2608, isUnsigned: true)
!2719 = !DIEnumerator(name: "CODE_FOR_pushv2di1", value: 2609, isUnsigned: true)
!2720 = !DIEnumerator(name: "CODE_FOR_pushv1ti1", value: 2610, isUnsigned: true)
!2721 = !DIEnumerator(name: "CODE_FOR_pushv4sf1", value: 2611, isUnsigned: true)
!2722 = !DIEnumerator(name: "CODE_FOR_pushv2df1", value: 2612, isUnsigned: true)
!2723 = !DIEnumerator(name: "CODE_FOR_movmisalignv32qi", value: 2613, isUnsigned: true)
!2724 = !DIEnumerator(name: "CODE_FOR_movmisalignv16hi", value: 2614, isUnsigned: true)
!2725 = !DIEnumerator(name: "CODE_FOR_movmisalignv8si", value: 2615, isUnsigned: true)
!2726 = !DIEnumerator(name: "CODE_FOR_movmisalignv4di", value: 2616, isUnsigned: true)
!2727 = !DIEnumerator(name: "CODE_FOR_movmisalignv8sf", value: 2617, isUnsigned: true)
!2728 = !DIEnumerator(name: "CODE_FOR_movmisalignv4df", value: 2618, isUnsigned: true)
!2729 = !DIEnumerator(name: "CODE_FOR_movmisalignv16qi", value: 2619, isUnsigned: true)
!2730 = !DIEnumerator(name: "CODE_FOR_movmisalignv8hi", value: 2620, isUnsigned: true)
!2731 = !DIEnumerator(name: "CODE_FOR_movmisalignv4si", value: 2621, isUnsigned: true)
!2732 = !DIEnumerator(name: "CODE_FOR_movmisalignv2di", value: 2622, isUnsigned: true)
!2733 = !DIEnumerator(name: "CODE_FOR_movmisalignv1ti", value: 2623, isUnsigned: true)
!2734 = !DIEnumerator(name: "CODE_FOR_movmisalignv4sf", value: 2624, isUnsigned: true)
!2735 = !DIEnumerator(name: "CODE_FOR_movmisalignv2df", value: 2625, isUnsigned: true)
!2736 = !DIEnumerator(name: "CODE_FOR_storentv4sf", value: 2626, isUnsigned: true)
!2737 = !DIEnumerator(name: "CODE_FOR_storentv2df", value: 2627, isUnsigned: true)
!2738 = !DIEnumerator(name: "CODE_FOR_storentsf", value: 2628, isUnsigned: true)
!2739 = !DIEnumerator(name: "CODE_FOR_storentdf", value: 2629, isUnsigned: true)
!2740 = !DIEnumerator(name: "CODE_FOR_storentv2di", value: 2630, isUnsigned: true)
!2741 = !DIEnumerator(name: "CODE_FOR_storentsi", value: 2631, isUnsigned: true)
!2742 = !DIEnumerator(name: "CODE_FOR_absv4sf2", value: 2632, isUnsigned: true)
!2743 = !DIEnumerator(name: "CODE_FOR_negv4sf2", value: 2633, isUnsigned: true)
!2744 = !DIEnumerator(name: "CODE_FOR_absv2df2", value: 2634, isUnsigned: true)
!2745 = !DIEnumerator(name: "CODE_FOR_negv2df2", value: 2635, isUnsigned: true)
!2746 = !DIEnumerator(name: "CODE_FOR_addv8sf3", value: 2636, isUnsigned: true)
!2747 = !DIEnumerator(name: "CODE_FOR_subv8sf3", value: 2637, isUnsigned: true)
!2748 = !DIEnumerator(name: "CODE_FOR_addv4df3", value: 2638, isUnsigned: true)
!2749 = !DIEnumerator(name: "CODE_FOR_subv4df3", value: 2639, isUnsigned: true)
!2750 = !DIEnumerator(name: "CODE_FOR_addv4sf3", value: 2640, isUnsigned: true)
!2751 = !DIEnumerator(name: "CODE_FOR_subv4sf3", value: 2641, isUnsigned: true)
!2752 = !DIEnumerator(name: "CODE_FOR_addv2df3", value: 2642, isUnsigned: true)
!2753 = !DIEnumerator(name: "CODE_FOR_subv2df3", value: 2643, isUnsigned: true)
!2754 = !DIEnumerator(name: "CODE_FOR_mulv8sf3", value: 2644, isUnsigned: true)
!2755 = !DIEnumerator(name: "CODE_FOR_mulv4df3", value: 2645, isUnsigned: true)
!2756 = !DIEnumerator(name: "CODE_FOR_mulv4sf3", value: 2646, isUnsigned: true)
!2757 = !DIEnumerator(name: "CODE_FOR_mulv2df3", value: 2647, isUnsigned: true)
!2758 = !DIEnumerator(name: "CODE_FOR_divv8sf3", value: 2648, isUnsigned: true)
!2759 = !DIEnumerator(name: "CODE_FOR_divv4df3", value: 2649, isUnsigned: true)
!2760 = !DIEnumerator(name: "CODE_FOR_divv4sf3", value: 2650, isUnsigned: true)
!2761 = !DIEnumerator(name: "CODE_FOR_divv2df3", value: 2651, isUnsigned: true)
!2762 = !DIEnumerator(name: "CODE_FOR_sqrtv8sf2", value: 2652, isUnsigned: true)
!2763 = !DIEnumerator(name: "CODE_FOR_sqrtv4sf2", value: 2653, isUnsigned: true)
!2764 = !DIEnumerator(name: "CODE_FOR_rsqrtv8sf2", value: 2654, isUnsigned: true)
!2765 = !DIEnumerator(name: "CODE_FOR_rsqrtv4sf2", value: 2655, isUnsigned: true)
!2766 = !DIEnumerator(name: "CODE_FOR_smaxv8sf3", value: 2656, isUnsigned: true)
!2767 = !DIEnumerator(name: "CODE_FOR_sminv8sf3", value: 2657, isUnsigned: true)
!2768 = !DIEnumerator(name: "CODE_FOR_smaxv4df3", value: 2658, isUnsigned: true)
!2769 = !DIEnumerator(name: "CODE_FOR_sminv4df3", value: 2659, isUnsigned: true)
!2770 = !DIEnumerator(name: "CODE_FOR_smaxv4sf3", value: 2660, isUnsigned: true)
!2771 = !DIEnumerator(name: "CODE_FOR_sminv4sf3", value: 2661, isUnsigned: true)
!2772 = !DIEnumerator(name: "CODE_FOR_smaxv2df3", value: 2662, isUnsigned: true)
!2773 = !DIEnumerator(name: "CODE_FOR_sminv2df3", value: 2663, isUnsigned: true)
!2774 = !DIEnumerator(name: "CODE_FOR_reduc_splus_v4sf", value: 2664, isUnsigned: true)
!2775 = !DIEnumerator(name: "CODE_FOR_reduc_splus_v2df", value: 2665, isUnsigned: true)
!2776 = !DIEnumerator(name: "CODE_FOR_reduc_smax_v4sf", value: 2666, isUnsigned: true)
!2777 = !DIEnumerator(name: "CODE_FOR_reduc_smin_v4sf", value: 2667, isUnsigned: true)
!2778 = !DIEnumerator(name: "CODE_FOR_vcondv4sf", value: 2668, isUnsigned: true)
!2779 = !DIEnumerator(name: "CODE_FOR_vcondv2df", value: 2669, isUnsigned: true)
!2780 = !DIEnumerator(name: "CODE_FOR_andv8sf3", value: 2670, isUnsigned: true)
!2781 = !DIEnumerator(name: "CODE_FOR_iorv8sf3", value: 2671, isUnsigned: true)
!2782 = !DIEnumerator(name: "CODE_FOR_xorv8sf3", value: 2672, isUnsigned: true)
!2783 = !DIEnumerator(name: "CODE_FOR_andv4df3", value: 2673, isUnsigned: true)
!2784 = !DIEnumerator(name: "CODE_FOR_iorv4df3", value: 2674, isUnsigned: true)
!2785 = !DIEnumerator(name: "CODE_FOR_xorv4df3", value: 2675, isUnsigned: true)
!2786 = !DIEnumerator(name: "CODE_FOR_andv4sf3", value: 2676, isUnsigned: true)
!2787 = !DIEnumerator(name: "CODE_FOR_iorv4sf3", value: 2677, isUnsigned: true)
!2788 = !DIEnumerator(name: "CODE_FOR_xorv4sf3", value: 2678, isUnsigned: true)
!2789 = !DIEnumerator(name: "CODE_FOR_andv2df3", value: 2679, isUnsigned: true)
!2790 = !DIEnumerator(name: "CODE_FOR_iorv2df3", value: 2680, isUnsigned: true)
!2791 = !DIEnumerator(name: "CODE_FOR_xorv2df3", value: 2681, isUnsigned: true)
!2792 = !DIEnumerator(name: "CODE_FOR_copysignv4sf3", value: 2682, isUnsigned: true)
!2793 = !DIEnumerator(name: "CODE_FOR_copysignv2df3", value: 2683, isUnsigned: true)
!2794 = !DIEnumerator(name: "CODE_FOR_sse2_cvtudq2ps", value: 2684, isUnsigned: true)
!2795 = !DIEnumerator(name: "CODE_FOR_sse2_cvtpd2dq", value: 2685, isUnsigned: true)
!2796 = !DIEnumerator(name: "CODE_FOR_sse2_cvttpd2dq", value: 2686, isUnsigned: true)
!2797 = !DIEnumerator(name: "CODE_FOR_sse2_cvtpd2ps", value: 2687, isUnsigned: true)
!2798 = !DIEnumerator(name: "CODE_FOR_vec_unpacks_hi_v4sf", value: 2688, isUnsigned: true)
!2799 = !DIEnumerator(name: "CODE_FOR_vec_unpacks_lo_v4sf", value: 2689, isUnsigned: true)
!2800 = !DIEnumerator(name: "CODE_FOR_vec_unpacks_float_hi_v8hi", value: 2690, isUnsigned: true)
!2801 = !DIEnumerator(name: "CODE_FOR_vec_unpacks_float_lo_v8hi", value: 2691, isUnsigned: true)
!2802 = !DIEnumerator(name: "CODE_FOR_vec_unpacku_float_hi_v8hi", value: 2692, isUnsigned: true)
!2803 = !DIEnumerator(name: "CODE_FOR_vec_unpacku_float_lo_v8hi", value: 2693, isUnsigned: true)
!2804 = !DIEnumerator(name: "CODE_FOR_vec_unpacks_float_hi_v4si", value: 2694, isUnsigned: true)
!2805 = !DIEnumerator(name: "CODE_FOR_vec_unpacks_float_lo_v4si", value: 2695, isUnsigned: true)
!2806 = !DIEnumerator(name: "CODE_FOR_vec_unpacku_float_hi_v4si", value: 2696, isUnsigned: true)
!2807 = !DIEnumerator(name: "CODE_FOR_vec_unpacku_float_lo_v4si", value: 2697, isUnsigned: true)
!2808 = !DIEnumerator(name: "CODE_FOR_vec_pack_trunc_v2df", value: 2698, isUnsigned: true)
!2809 = !DIEnumerator(name: "CODE_FOR_vec_pack_sfix_trunc_v2df", value: 2699, isUnsigned: true)
!2810 = !DIEnumerator(name: "CODE_FOR_vec_pack_sfix_v2df", value: 2700, isUnsigned: true)
!2811 = !DIEnumerator(name: "CODE_FOR_sse_movhlps_exp", value: 2701, isUnsigned: true)
!2812 = !DIEnumerator(name: "CODE_FOR_sse_movlhps_exp", value: 2702, isUnsigned: true)
!2813 = !DIEnumerator(name: "CODE_FOR_avx_shufps256", value: 2703, isUnsigned: true)
!2814 = !DIEnumerator(name: "CODE_FOR_sse_shufps", value: 2704, isUnsigned: true)
!2815 = !DIEnumerator(name: "CODE_FOR_sse_loadhps_exp", value: 2705, isUnsigned: true)
!2816 = !DIEnumerator(name: "CODE_FOR_sse_loadlps_exp", value: 2706, isUnsigned: true)
!2817 = !DIEnumerator(name: "CODE_FOR_vec_dupv4sf", value: 2707, isUnsigned: true)
!2818 = !DIEnumerator(name: "CODE_FOR_vec_initv16qi", value: 2708, isUnsigned: true)
!2819 = !DIEnumerator(name: "CODE_FOR_vec_initv8hi", value: 2709, isUnsigned: true)
!2820 = !DIEnumerator(name: "CODE_FOR_vec_initv4si", value: 2710, isUnsigned: true)
!2821 = !DIEnumerator(name: "CODE_FOR_vec_initv2di", value: 2711, isUnsigned: true)
!2822 = !DIEnumerator(name: "CODE_FOR_vec_initv4sf", value: 2712, isUnsigned: true)
!2823 = !DIEnumerator(name: "CODE_FOR_vec_initv2df", value: 2713, isUnsigned: true)
!2824 = !DIEnumerator(name: "CODE_FOR_vec_setv16qi", value: 2715, isUnsigned: true)
!2825 = !DIEnumerator(name: "CODE_FOR_vec_setv8hi", value: 2716, isUnsigned: true)
!2826 = !DIEnumerator(name: "CODE_FOR_vec_setv4si", value: 2717, isUnsigned: true)
!2827 = !DIEnumerator(name: "CODE_FOR_vec_setv2di", value: 2718, isUnsigned: true)
!2828 = !DIEnumerator(name: "CODE_FOR_vec_setv4sf", value: 2719, isUnsigned: true)
!2829 = !DIEnumerator(name: "CODE_FOR_vec_setv2df", value: 2720, isUnsigned: true)
!2830 = !DIEnumerator(name: "CODE_FOR_avx_vextractf128v32qi", value: 2722, isUnsigned: true)
!2831 = !DIEnumerator(name: "CODE_FOR_avx_vextractf128v16hi", value: 2723, isUnsigned: true)
!2832 = !DIEnumerator(name: "CODE_FOR_avx_vextractf128v8si", value: 2724, isUnsigned: true)
!2833 = !DIEnumerator(name: "CODE_FOR_avx_vextractf128v4di", value: 2725, isUnsigned: true)
!2834 = !DIEnumerator(name: "CODE_FOR_avx_vextractf128v8sf", value: 2726, isUnsigned: true)
!2835 = !DIEnumerator(name: "CODE_FOR_avx_vextractf128v4df", value: 2727, isUnsigned: true)
!2836 = !DIEnumerator(name: "CODE_FOR_vec_extractv16qi", value: 2729, isUnsigned: true)
!2837 = !DIEnumerator(name: "CODE_FOR_vec_extractv8hi", value: 2730, isUnsigned: true)
!2838 = !DIEnumerator(name: "CODE_FOR_vec_extractv4si", value: 2731, isUnsigned: true)
!2839 = !DIEnumerator(name: "CODE_FOR_vec_extractv2di", value: 2732, isUnsigned: true)
!2840 = !DIEnumerator(name: "CODE_FOR_vec_extractv4sf", value: 2733, isUnsigned: true)
!2841 = !DIEnumerator(name: "CODE_FOR_vec_extractv2df", value: 2734, isUnsigned: true)
!2842 = !DIEnumerator(name: "CODE_FOR_vec_interleave_highv2df", value: 2735, isUnsigned: true)
!2843 = !DIEnumerator(name: "CODE_FOR_avx_movddup256", value: 2736, isUnsigned: true)
!2844 = !DIEnumerator(name: "CODE_FOR_avx_unpcklpd256", value: 2737, isUnsigned: true)
!2845 = !DIEnumerator(name: "CODE_FOR_vec_interleave_lowv2df", value: 2738, isUnsigned: true)
!2846 = !DIEnumerator(name: "CODE_FOR_avx_shufpd256", value: 2741, isUnsigned: true)
!2847 = !DIEnumerator(name: "CODE_FOR_sse2_shufpd", value: 2742, isUnsigned: true)
!2848 = !DIEnumerator(name: "CODE_FOR_vec_extract_evenv4sf", value: 2743, isUnsigned: true)
!2849 = !DIEnumerator(name: "CODE_FOR_vec_extract_evenv2df", value: 2744, isUnsigned: true)
!2850 = !DIEnumerator(name: "CODE_FOR_vec_extract_evenv2di", value: 2745, isUnsigned: true)
!2851 = !DIEnumerator(name: "CODE_FOR_vec_extract_evenv4si", value: 2746, isUnsigned: true)
!2852 = !DIEnumerator(name: "CODE_FOR_vec_extract_evenv8hi", value: 2747, isUnsigned: true)
!2853 = !DIEnumerator(name: "CODE_FOR_vec_extract_evenv16qi", value: 2748, isUnsigned: true)
!2854 = !DIEnumerator(name: "CODE_FOR_vec_extract_evenv4df", value: 2749, isUnsigned: true)
!2855 = !DIEnumerator(name: "CODE_FOR_vec_extract_evenv8sf", value: 2750, isUnsigned: true)
!2856 = !DIEnumerator(name: "CODE_FOR_vec_extract_oddv4sf", value: 2751, isUnsigned: true)
!2857 = !DIEnumerator(name: "CODE_FOR_vec_extract_oddv2df", value: 2752, isUnsigned: true)
!2858 = !DIEnumerator(name: "CODE_FOR_vec_extract_oddv2di", value: 2753, isUnsigned: true)
!2859 = !DIEnumerator(name: "CODE_FOR_vec_extract_oddv4si", value: 2754, isUnsigned: true)
!2860 = !DIEnumerator(name: "CODE_FOR_vec_extract_oddv8hi", value: 2755, isUnsigned: true)
!2861 = !DIEnumerator(name: "CODE_FOR_vec_extract_oddv16qi", value: 2756, isUnsigned: true)
!2862 = !DIEnumerator(name: "CODE_FOR_vec_extract_oddv4df", value: 2757, isUnsigned: true)
!2863 = !DIEnumerator(name: "CODE_FOR_vec_extract_oddv8sf", value: 2758, isUnsigned: true)
!2864 = !DIEnumerator(name: "CODE_FOR_sse2_loadhpd_exp", value: 2761, isUnsigned: true)
!2865 = !DIEnumerator(name: "CODE_FOR_sse2_loadlpd_exp", value: 2763, isUnsigned: true)
!2866 = !DIEnumerator(name: "CODE_FOR_negv16qi2", value: 2765, isUnsigned: true)
!2867 = !DIEnumerator(name: "CODE_FOR_negv8hi2", value: 2766, isUnsigned: true)
!2868 = !DIEnumerator(name: "CODE_FOR_negv4si2", value: 2767, isUnsigned: true)
!2869 = !DIEnumerator(name: "CODE_FOR_negv2di2", value: 2768, isUnsigned: true)
!2870 = !DIEnumerator(name: "CODE_FOR_addv16qi3", value: 2769, isUnsigned: true)
!2871 = !DIEnumerator(name: "CODE_FOR_subv16qi3", value: 2770, isUnsigned: true)
!2872 = !DIEnumerator(name: "CODE_FOR_addv8hi3", value: 2771, isUnsigned: true)
!2873 = !DIEnumerator(name: "CODE_FOR_subv8hi3", value: 2772, isUnsigned: true)
!2874 = !DIEnumerator(name: "CODE_FOR_addv4si3", value: 2773, isUnsigned: true)
!2875 = !DIEnumerator(name: "CODE_FOR_subv4si3", value: 2774, isUnsigned: true)
!2876 = !DIEnumerator(name: "CODE_FOR_addv2di3", value: 2775, isUnsigned: true)
!2877 = !DIEnumerator(name: "CODE_FOR_subv2di3", value: 2776, isUnsigned: true)
!2878 = !DIEnumerator(name: "CODE_FOR_sse2_ssaddv16qi3", value: 2777, isUnsigned: true)
!2879 = !DIEnumerator(name: "CODE_FOR_sse2_usaddv16qi3", value: 2778, isUnsigned: true)
!2880 = !DIEnumerator(name: "CODE_FOR_sse2_sssubv16qi3", value: 2779, isUnsigned: true)
!2881 = !DIEnumerator(name: "CODE_FOR_sse2_ussubv16qi3", value: 2780, isUnsigned: true)
!2882 = !DIEnumerator(name: "CODE_FOR_sse2_ssaddv8hi3", value: 2781, isUnsigned: true)
!2883 = !DIEnumerator(name: "CODE_FOR_sse2_usaddv8hi3", value: 2782, isUnsigned: true)
!2884 = !DIEnumerator(name: "CODE_FOR_sse2_sssubv8hi3", value: 2783, isUnsigned: true)
!2885 = !DIEnumerator(name: "CODE_FOR_sse2_ussubv8hi3", value: 2784, isUnsigned: true)
!2886 = !DIEnumerator(name: "CODE_FOR_mulv8hi3", value: 2786, isUnsigned: true)
!2887 = !DIEnumerator(name: "CODE_FOR_smulv8hi3_highpart", value: 2787, isUnsigned: true)
!2888 = !DIEnumerator(name: "CODE_FOR_umulv8hi3_highpart", value: 2788, isUnsigned: true)
!2889 = !DIEnumerator(name: "CODE_FOR_sse2_umulv2siv2di3", value: 2789, isUnsigned: true)
!2890 = !DIEnumerator(name: "CODE_FOR_sse4_1_mulv2siv2di3", value: 2790, isUnsigned: true)
!2891 = !DIEnumerator(name: "CODE_FOR_sse2_pmaddwd", value: 2791, isUnsigned: true)
!2892 = !DIEnumerator(name: "CODE_FOR_mulv4si3", value: 2792, isUnsigned: true)
!2893 = !DIEnumerator(name: "CODE_FOR_vec_widen_smult_hi_v8hi", value: 2795, isUnsigned: true)
!2894 = !DIEnumerator(name: "CODE_FOR_vec_widen_smult_lo_v8hi", value: 2796, isUnsigned: true)
!2895 = !DIEnumerator(name: "CODE_FOR_vec_widen_umult_hi_v8hi", value: 2797, isUnsigned: true)
!2896 = !DIEnumerator(name: "CODE_FOR_vec_widen_umult_lo_v8hi", value: 2798, isUnsigned: true)
!2897 = !DIEnumerator(name: "CODE_FOR_vec_widen_smult_hi_v4si", value: 2799, isUnsigned: true)
!2898 = !DIEnumerator(name: "CODE_FOR_vec_widen_smult_lo_v4si", value: 2800, isUnsigned: true)
!2899 = !DIEnumerator(name: "CODE_FOR_vec_widen_umult_hi_v4si", value: 2801, isUnsigned: true)
!2900 = !DIEnumerator(name: "CODE_FOR_vec_widen_umult_lo_v4si", value: 2802, isUnsigned: true)
!2901 = !DIEnumerator(name: "CODE_FOR_sdot_prodv8hi", value: 2803, isUnsigned: true)
!2902 = !DIEnumerator(name: "CODE_FOR_udot_prodv4si", value: 2804, isUnsigned: true)
!2903 = !DIEnumerator(name: "CODE_FOR_vec_shl_v16qi", value: 2805, isUnsigned: true)
!2904 = !DIEnumerator(name: "CODE_FOR_vec_shl_v8hi", value: 2806, isUnsigned: true)
!2905 = !DIEnumerator(name: "CODE_FOR_vec_shl_v4si", value: 2807, isUnsigned: true)
!2906 = !DIEnumerator(name: "CODE_FOR_vec_shl_v2di", value: 2808, isUnsigned: true)
!2907 = !DIEnumerator(name: "CODE_FOR_vec_shr_v16qi", value: 2809, isUnsigned: true)
!2908 = !DIEnumerator(name: "CODE_FOR_vec_shr_v8hi", value: 2810, isUnsigned: true)
!2909 = !DIEnumerator(name: "CODE_FOR_vec_shr_v4si", value: 2811, isUnsigned: true)
!2910 = !DIEnumerator(name: "CODE_FOR_vec_shr_v2di", value: 2812, isUnsigned: true)
!2911 = !DIEnumerator(name: "CODE_FOR_umaxv16qi3", value: 2813, isUnsigned: true)
!2912 = !DIEnumerator(name: "CODE_FOR_uminv16qi3", value: 2814, isUnsigned: true)
!2913 = !DIEnumerator(name: "CODE_FOR_smaxv8hi3", value: 2815, isUnsigned: true)
!2914 = !DIEnumerator(name: "CODE_FOR_sminv8hi3", value: 2816, isUnsigned: true)
!2915 = !DIEnumerator(name: "CODE_FOR_umaxv8hi3", value: 2817, isUnsigned: true)
!2916 = !DIEnumerator(name: "CODE_FOR_smaxv16qi3", value: 2818, isUnsigned: true)
!2917 = !DIEnumerator(name: "CODE_FOR_smaxv4si3", value: 2819, isUnsigned: true)
!2918 = !DIEnumerator(name: "CODE_FOR_smaxv2di3", value: 2820, isUnsigned: true)
!2919 = !DIEnumerator(name: "CODE_FOR_umaxv4si3", value: 2821, isUnsigned: true)
!2920 = !DIEnumerator(name: "CODE_FOR_umaxv2di3", value: 2822, isUnsigned: true)
!2921 = !DIEnumerator(name: "CODE_FOR_sminv16qi3", value: 2823, isUnsigned: true)
!2922 = !DIEnumerator(name: "CODE_FOR_sminv4si3", value: 2824, isUnsigned: true)
!2923 = !DIEnumerator(name: "CODE_FOR_sminv2di3", value: 2825, isUnsigned: true)
!2924 = !DIEnumerator(name: "CODE_FOR_uminv8hi3", value: 2826, isUnsigned: true)
!2925 = !DIEnumerator(name: "CODE_FOR_uminv4si3", value: 2827, isUnsigned: true)
!2926 = !DIEnumerator(name: "CODE_FOR_uminv2di3", value: 2828, isUnsigned: true)
!2927 = !DIEnumerator(name: "CODE_FOR_sse2_eqv16qi3", value: 2829, isUnsigned: true)
!2928 = !DIEnumerator(name: "CODE_FOR_sse2_eqv8hi3", value: 2830, isUnsigned: true)
!2929 = !DIEnumerator(name: "CODE_FOR_sse2_eqv4si3", value: 2831, isUnsigned: true)
!2930 = !DIEnumerator(name: "CODE_FOR_sse4_1_eqv2di3", value: 2832, isUnsigned: true)
!2931 = !DIEnumerator(name: "CODE_FOR_vcondv16qi", value: 2833, isUnsigned: true)
!2932 = !DIEnumerator(name: "CODE_FOR_vcondv8hi", value: 2834, isUnsigned: true)
!2933 = !DIEnumerator(name: "CODE_FOR_vcondv4si", value: 2835, isUnsigned: true)
!2934 = !DIEnumerator(name: "CODE_FOR_vcondv2di", value: 2836, isUnsigned: true)
!2935 = !DIEnumerator(name: "CODE_FOR_vconduv16qi", value: 2837, isUnsigned: true)
!2936 = !DIEnumerator(name: "CODE_FOR_vconduv8hi", value: 2838, isUnsigned: true)
!2937 = !DIEnumerator(name: "CODE_FOR_vconduv4si", value: 2839, isUnsigned: true)
!2938 = !DIEnumerator(name: "CODE_FOR_vconduv2di", value: 2840, isUnsigned: true)
!2939 = !DIEnumerator(name: "CODE_FOR_one_cmplv16qi2", value: 2841, isUnsigned: true)
!2940 = !DIEnumerator(name: "CODE_FOR_one_cmplv8hi2", value: 2842, isUnsigned: true)
!2941 = !DIEnumerator(name: "CODE_FOR_one_cmplv4si2", value: 2843, isUnsigned: true)
!2942 = !DIEnumerator(name: "CODE_FOR_one_cmplv2di2", value: 2844, isUnsigned: true)
!2943 = !DIEnumerator(name: "CODE_FOR_andv16qi3", value: 2845, isUnsigned: true)
!2944 = !DIEnumerator(name: "CODE_FOR_iorv16qi3", value: 2846, isUnsigned: true)
!2945 = !DIEnumerator(name: "CODE_FOR_xorv16qi3", value: 2847, isUnsigned: true)
!2946 = !DIEnumerator(name: "CODE_FOR_andv8hi3", value: 2848, isUnsigned: true)
!2947 = !DIEnumerator(name: "CODE_FOR_iorv8hi3", value: 2849, isUnsigned: true)
!2948 = !DIEnumerator(name: "CODE_FOR_xorv8hi3", value: 2850, isUnsigned: true)
!2949 = !DIEnumerator(name: "CODE_FOR_andv4si3", value: 2851, isUnsigned: true)
!2950 = !DIEnumerator(name: "CODE_FOR_iorv4si3", value: 2852, isUnsigned: true)
!2951 = !DIEnumerator(name: "CODE_FOR_xorv4si3", value: 2853, isUnsigned: true)
!2952 = !DIEnumerator(name: "CODE_FOR_andv2di3", value: 2854, isUnsigned: true)
!2953 = !DIEnumerator(name: "CODE_FOR_iorv2di3", value: 2855, isUnsigned: true)
!2954 = !DIEnumerator(name: "CODE_FOR_xorv2di3", value: 2856, isUnsigned: true)
!2955 = !DIEnumerator(name: "CODE_FOR_andtf3", value: 2857, isUnsigned: true)
!2956 = !DIEnumerator(name: "CODE_FOR_iortf3", value: 2858, isUnsigned: true)
!2957 = !DIEnumerator(name: "CODE_FOR_xortf3", value: 2859, isUnsigned: true)
!2958 = !DIEnumerator(name: "CODE_FOR_vec_pack_trunc_v8hi", value: 2860, isUnsigned: true)
!2959 = !DIEnumerator(name: "CODE_FOR_vec_pack_trunc_v4si", value: 2861, isUnsigned: true)
!2960 = !DIEnumerator(name: "CODE_FOR_vec_pack_trunc_v2di", value: 2862, isUnsigned: true)
!2961 = !DIEnumerator(name: "CODE_FOR_sse2_pshufd", value: 2863, isUnsigned: true)
!2962 = !DIEnumerator(name: "CODE_FOR_sse2_pshuflw", value: 2864, isUnsigned: true)
!2963 = !DIEnumerator(name: "CODE_FOR_sse2_pshufhw", value: 2865, isUnsigned: true)
!2964 = !DIEnumerator(name: "CODE_FOR_sse2_loadd", value: 2866, isUnsigned: true)
!2965 = !DIEnumerator(name: "CODE_FOR_sse_storeq", value: 2869, isUnsigned: true)
!2966 = !DIEnumerator(name: "CODE_FOR_vec_unpacku_hi_v16qi", value: 2871, isUnsigned: true)
!2967 = !DIEnumerator(name: "CODE_FOR_vec_unpacks_hi_v16qi", value: 2872, isUnsigned: true)
!2968 = !DIEnumerator(name: "CODE_FOR_vec_unpacku_lo_v16qi", value: 2873, isUnsigned: true)
!2969 = !DIEnumerator(name: "CODE_FOR_vec_unpacks_lo_v16qi", value: 2874, isUnsigned: true)
!2970 = !DIEnumerator(name: "CODE_FOR_vec_unpacku_hi_v8hi", value: 2875, isUnsigned: true)
!2971 = !DIEnumerator(name: "CODE_FOR_vec_unpacks_hi_v8hi", value: 2876, isUnsigned: true)
!2972 = !DIEnumerator(name: "CODE_FOR_vec_unpacku_lo_v8hi", value: 2877, isUnsigned: true)
!2973 = !DIEnumerator(name: "CODE_FOR_vec_unpacks_lo_v8hi", value: 2878, isUnsigned: true)
!2974 = !DIEnumerator(name: "CODE_FOR_vec_unpacku_hi_v4si", value: 2879, isUnsigned: true)
!2975 = !DIEnumerator(name: "CODE_FOR_vec_unpacks_hi_v4si", value: 2880, isUnsigned: true)
!2976 = !DIEnumerator(name: "CODE_FOR_vec_unpacku_lo_v4si", value: 2881, isUnsigned: true)
!2977 = !DIEnumerator(name: "CODE_FOR_vec_unpacks_lo_v4si", value: 2882, isUnsigned: true)
!2978 = !DIEnumerator(name: "CODE_FOR_sse2_uavgv16qi3", value: 2883, isUnsigned: true)
!2979 = !DIEnumerator(name: "CODE_FOR_sse2_uavgv8hi3", value: 2884, isUnsigned: true)
!2980 = !DIEnumerator(name: "CODE_FOR_sse2_maskmovdqu", value: 2885, isUnsigned: true)
!2981 = !DIEnumerator(name: "CODE_FOR_sse_sfence", value: 2886, isUnsigned: true)
!2982 = !DIEnumerator(name: "CODE_FOR_sse2_mfence", value: 2887, isUnsigned: true)
!2983 = !DIEnumerator(name: "CODE_FOR_sse2_lfence", value: 2888, isUnsigned: true)
!2984 = !DIEnumerator(name: "CODE_FOR_ssse3_pmulhrswv8hi3", value: 2889, isUnsigned: true)
!2985 = !DIEnumerator(name: "CODE_FOR_ssse3_pmulhrswv4hi3", value: 2890, isUnsigned: true)
!2986 = !DIEnumerator(name: "CODE_FOR_rotlv16qi3", value: 2895, isUnsigned: true)
!2987 = !DIEnumerator(name: "CODE_FOR_rotlv8hi3", value: 2896, isUnsigned: true)
!2988 = !DIEnumerator(name: "CODE_FOR_rotlv4si3", value: 2897, isUnsigned: true)
!2989 = !DIEnumerator(name: "CODE_FOR_rotlv2di3", value: 2898, isUnsigned: true)
!2990 = !DIEnumerator(name: "CODE_FOR_rotrv16qi3", value: 2899, isUnsigned: true)
!2991 = !DIEnumerator(name: "CODE_FOR_rotrv8hi3", value: 2900, isUnsigned: true)
!2992 = !DIEnumerator(name: "CODE_FOR_rotrv4si3", value: 2901, isUnsigned: true)
!2993 = !DIEnumerator(name: "CODE_FOR_rotrv2di3", value: 2902, isUnsigned: true)
!2994 = !DIEnumerator(name: "CODE_FOR_vrotrv16qi3", value: 2903, isUnsigned: true)
!2995 = !DIEnumerator(name: "CODE_FOR_vrotrv8hi3", value: 2904, isUnsigned: true)
!2996 = !DIEnumerator(name: "CODE_FOR_vrotrv4si3", value: 2905, isUnsigned: true)
!2997 = !DIEnumerator(name: "CODE_FOR_vrotrv2di3", value: 2906, isUnsigned: true)
!2998 = !DIEnumerator(name: "CODE_FOR_vrotlv16qi3", value: 2907, isUnsigned: true)
!2999 = !DIEnumerator(name: "CODE_FOR_vrotlv8hi3", value: 2908, isUnsigned: true)
!3000 = !DIEnumerator(name: "CODE_FOR_vrotlv4si3", value: 2909, isUnsigned: true)
!3001 = !DIEnumerator(name: "CODE_FOR_vrotlv2di3", value: 2910, isUnsigned: true)
!3002 = !DIEnumerator(name: "CODE_FOR_vlshrv16qi3", value: 2911, isUnsigned: true)
!3003 = !DIEnumerator(name: "CODE_FOR_vlshrv8hi3", value: 2912, isUnsigned: true)
!3004 = !DIEnumerator(name: "CODE_FOR_vlshrv4si3", value: 2913, isUnsigned: true)
!3005 = !DIEnumerator(name: "CODE_FOR_vashrv16qi3", value: 2914, isUnsigned: true)
!3006 = !DIEnumerator(name: "CODE_FOR_vashrv8hi3", value: 2915, isUnsigned: true)
!3007 = !DIEnumerator(name: "CODE_FOR_vashrv4si3", value: 2916, isUnsigned: true)
!3008 = !DIEnumerator(name: "CODE_FOR_vashlv16qi3", value: 2917, isUnsigned: true)
!3009 = !DIEnumerator(name: "CODE_FOR_vashlv8hi3", value: 2918, isUnsigned: true)
!3010 = !DIEnumerator(name: "CODE_FOR_vashlv4si3", value: 2919, isUnsigned: true)
!3011 = !DIEnumerator(name: "CODE_FOR_ashlv16qi3", value: 2920, isUnsigned: true)
!3012 = !DIEnumerator(name: "CODE_FOR_lshlv16qi3", value: 2921, isUnsigned: true)
!3013 = !DIEnumerator(name: "CODE_FOR_ashrv16qi3", value: 2922, isUnsigned: true)
!3014 = !DIEnumerator(name: "CODE_FOR_ashrv2di3", value: 2923, isUnsigned: true)
!3015 = !DIEnumerator(name: "CODE_FOR_avx_vzeroall", value: 2924, isUnsigned: true)
!3016 = !DIEnumerator(name: "CODE_FOR_avx_vzeroupper", value: 2925, isUnsigned: true)
!3017 = !DIEnumerator(name: "CODE_FOR_avx_vpermilv2df", value: 2932, isUnsigned: true)
!3018 = !DIEnumerator(name: "CODE_FOR_avx_vpermilv4df", value: 2933, isUnsigned: true)
!3019 = !DIEnumerator(name: "CODE_FOR_avx_vpermilv4sf", value: 2934, isUnsigned: true)
!3020 = !DIEnumerator(name: "CODE_FOR_avx_vpermilv8sf", value: 2935, isUnsigned: true)
!3021 = !DIEnumerator(name: "CODE_FOR_avx_vperm2f128v8si3", value: 2936, isUnsigned: true)
!3022 = !DIEnumerator(name: "CODE_FOR_avx_vperm2f128v8sf3", value: 2937, isUnsigned: true)
!3023 = !DIEnumerator(name: "CODE_FOR_avx_vperm2f128v4df3", value: 2938, isUnsigned: true)
!3024 = !DIEnumerator(name: "CODE_FOR_avx_vinsertf128v32qi", value: 2939, isUnsigned: true)
!3025 = !DIEnumerator(name: "CODE_FOR_avx_vinsertf128v16hi", value: 2940, isUnsigned: true)
!3026 = !DIEnumerator(name: "CODE_FOR_avx_vinsertf128v8si", value: 2941, isUnsigned: true)
!3027 = !DIEnumerator(name: "CODE_FOR_avx_vinsertf128v4di", value: 2942, isUnsigned: true)
!3028 = !DIEnumerator(name: "CODE_FOR_avx_vinsertf128v8sf", value: 2943, isUnsigned: true)
!3029 = !DIEnumerator(name: "CODE_FOR_avx_vinsertf128v4df", value: 2944, isUnsigned: true)
!3030 = !DIEnumerator(name: "CODE_FOR_vec_initv32qi", value: 2945, isUnsigned: true)
!3031 = !DIEnumerator(name: "CODE_FOR_vec_initv16hi", value: 2946, isUnsigned: true)
!3032 = !DIEnumerator(name: "CODE_FOR_vec_initv8si", value: 2947, isUnsigned: true)
!3033 = !DIEnumerator(name: "CODE_FOR_vec_initv4di", value: 2948, isUnsigned: true)
!3034 = !DIEnumerator(name: "CODE_FOR_vec_initv8sf", value: 2949, isUnsigned: true)
!3035 = !DIEnumerator(name: "CODE_FOR_vec_initv4df", value: 2950, isUnsigned: true)
!3036 = !DIEnumerator(name: "CODE_FOR_memory_barrier", value: 2951, isUnsigned: true)
!3037 = !DIEnumerator(name: "CODE_FOR_sync_compare_and_swapqi", value: 2952, isUnsigned: true)
!3038 = !DIEnumerator(name: "CODE_FOR_sync_compare_and_swaphi", value: 2953, isUnsigned: true)
!3039 = !DIEnumerator(name: "CODE_FOR_sync_compare_and_swapsi", value: 2954, isUnsigned: true)
!3040 = !DIEnumerator(name: "CODE_FOR_sync_compare_and_swapdi", value: 2955, isUnsigned: true)
!3041 = !DIEnumerator(name: "CODE_FOR_nothing", value: 2956, isUnsigned: true)
!3042 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_index", file: !334, line: 3410, baseType: !7, size: 32, elements: !3043)
!3043 = !{!3044, !3045, !3046, !3047, !3048, !3049, !3050, !3051, !3052, !3053, !3054, !3055, !3056, !3057, !3058, !3059, !3060, !3061, !3062, !3063, !3064, !3065, !3066, !3067, !3068, !3069, !3070, !3071, !3072, !3073, !3074, !3075, !3076, !3077, !3078, !3079, !3080, !3081, !3082, !3083, !3084, !3085, !3086, !3087, !3088, !3089, !3090, !3091, !3092, !3093, !3094, !3095, !3096, !3097, !3098, !3099, !3100, !3101, !3102, !3103, !3104, !3105, !3106, !3107, !3108, !3109, !3110, !3111, !3112, !3113, !3114, !3115, !3116, !3117, !3118, !3119, !3120, !3121, !3122, !3123, !3124, !3125, !3126, !3127, !3128, !3129, !3130, !3131, !3132, !3133, !3134, !3135, !3136, !3137, !3138, !3139, !3140, !3141, !3142, !3143, !3144, !3145, !3146, !3147, !3148, !3149, !3150, !3151, !3152, !3153, !3154, !3155, !3156, !3157, !3158, !3159, !3160, !3161, !3162, !3163, !3164, !3165, !3166, !3167, !3168, !3169, !3170, !3171, !3172, !3173, !3174, !3175}
!3044 = !DIEnumerator(name: "TI_ERROR_MARK", value: 0, isUnsigned: true)
!3045 = !DIEnumerator(name: "TI_INTQI_TYPE", value: 1, isUnsigned: true)
!3046 = !DIEnumerator(name: "TI_INTHI_TYPE", value: 2, isUnsigned: true)
!3047 = !DIEnumerator(name: "TI_INTSI_TYPE", value: 3, isUnsigned: true)
!3048 = !DIEnumerator(name: "TI_INTDI_TYPE", value: 4, isUnsigned: true)
!3049 = !DIEnumerator(name: "TI_INTTI_TYPE", value: 5, isUnsigned: true)
!3050 = !DIEnumerator(name: "TI_UINTQI_TYPE", value: 6, isUnsigned: true)
!3051 = !DIEnumerator(name: "TI_UINTHI_TYPE", value: 7, isUnsigned: true)
!3052 = !DIEnumerator(name: "TI_UINTSI_TYPE", value: 8, isUnsigned: true)
!3053 = !DIEnumerator(name: "TI_UINTDI_TYPE", value: 9, isUnsigned: true)
!3054 = !DIEnumerator(name: "TI_UINTTI_TYPE", value: 10, isUnsigned: true)
!3055 = !DIEnumerator(name: "TI_UINT32_TYPE", value: 11, isUnsigned: true)
!3056 = !DIEnumerator(name: "TI_UINT64_TYPE", value: 12, isUnsigned: true)
!3057 = !DIEnumerator(name: "TI_INTEGER_ZERO", value: 13, isUnsigned: true)
!3058 = !DIEnumerator(name: "TI_INTEGER_ONE", value: 14, isUnsigned: true)
!3059 = !DIEnumerator(name: "TI_INTEGER_MINUS_ONE", value: 15, isUnsigned: true)
!3060 = !DIEnumerator(name: "TI_NULL_POINTER", value: 16, isUnsigned: true)
!3061 = !DIEnumerator(name: "TI_SIZE_ZERO", value: 17, isUnsigned: true)
!3062 = !DIEnumerator(name: "TI_SIZE_ONE", value: 18, isUnsigned: true)
!3063 = !DIEnumerator(name: "TI_BITSIZE_ZERO", value: 19, isUnsigned: true)
!3064 = !DIEnumerator(name: "TI_BITSIZE_ONE", value: 20, isUnsigned: true)
!3065 = !DIEnumerator(name: "TI_BITSIZE_UNIT", value: 21, isUnsigned: true)
!3066 = !DIEnumerator(name: "TI_PUBLIC", value: 22, isUnsigned: true)
!3067 = !DIEnumerator(name: "TI_PROTECTED", value: 23, isUnsigned: true)
!3068 = !DIEnumerator(name: "TI_PRIVATE", value: 24, isUnsigned: true)
!3069 = !DIEnumerator(name: "TI_BOOLEAN_FALSE", value: 25, isUnsigned: true)
!3070 = !DIEnumerator(name: "TI_BOOLEAN_TRUE", value: 26, isUnsigned: true)
!3071 = !DIEnumerator(name: "TI_COMPLEX_INTEGER_TYPE", value: 27, isUnsigned: true)
!3072 = !DIEnumerator(name: "TI_COMPLEX_FLOAT_TYPE", value: 28, isUnsigned: true)
!3073 = !DIEnumerator(name: "TI_COMPLEX_DOUBLE_TYPE", value: 29, isUnsigned: true)
!3074 = !DIEnumerator(name: "TI_COMPLEX_LONG_DOUBLE_TYPE", value: 30, isUnsigned: true)
!3075 = !DIEnumerator(name: "TI_FLOAT_TYPE", value: 31, isUnsigned: true)
!3076 = !DIEnumerator(name: "TI_DOUBLE_TYPE", value: 32, isUnsigned: true)
!3077 = !DIEnumerator(name: "TI_LONG_DOUBLE_TYPE", value: 33, isUnsigned: true)
!3078 = !DIEnumerator(name: "TI_FLOAT_PTR_TYPE", value: 34, isUnsigned: true)
!3079 = !DIEnumerator(name: "TI_DOUBLE_PTR_TYPE", value: 35, isUnsigned: true)
!3080 = !DIEnumerator(name: "TI_LONG_DOUBLE_PTR_TYPE", value: 36, isUnsigned: true)
!3081 = !DIEnumerator(name: "TI_INTEGER_PTR_TYPE", value: 37, isUnsigned: true)
!3082 = !DIEnumerator(name: "TI_VOID_TYPE", value: 38, isUnsigned: true)
!3083 = !DIEnumerator(name: "TI_PTR_TYPE", value: 39, isUnsigned: true)
!3084 = !DIEnumerator(name: "TI_CONST_PTR_TYPE", value: 40, isUnsigned: true)
!3085 = !DIEnumerator(name: "TI_SIZE_TYPE", value: 41, isUnsigned: true)
!3086 = !DIEnumerator(name: "TI_PID_TYPE", value: 42, isUnsigned: true)
!3087 = !DIEnumerator(name: "TI_PTRDIFF_TYPE", value: 43, isUnsigned: true)
!3088 = !DIEnumerator(name: "TI_VA_LIST_TYPE", value: 44, isUnsigned: true)
!3089 = !DIEnumerator(name: "TI_VA_LIST_GPR_COUNTER_FIELD", value: 45, isUnsigned: true)
!3090 = !DIEnumerator(name: "TI_VA_LIST_FPR_COUNTER_FIELD", value: 46, isUnsigned: true)
!3091 = !DIEnumerator(name: "TI_BOOLEAN_TYPE", value: 47, isUnsigned: true)
!3092 = !DIEnumerator(name: "TI_FILEPTR_TYPE", value: 48, isUnsigned: true)
!3093 = !DIEnumerator(name: "TI_DFLOAT32_TYPE", value: 49, isUnsigned: true)
!3094 = !DIEnumerator(name: "TI_DFLOAT64_TYPE", value: 50, isUnsigned: true)
!3095 = !DIEnumerator(name: "TI_DFLOAT128_TYPE", value: 51, isUnsigned: true)
!3096 = !DIEnumerator(name: "TI_DFLOAT32_PTR_TYPE", value: 52, isUnsigned: true)
!3097 = !DIEnumerator(name: "TI_DFLOAT64_PTR_TYPE", value: 53, isUnsigned: true)
!3098 = !DIEnumerator(name: "TI_DFLOAT128_PTR_TYPE", value: 54, isUnsigned: true)
!3099 = !DIEnumerator(name: "TI_VOID_LIST_NODE", value: 55, isUnsigned: true)
!3100 = !DIEnumerator(name: "TI_MAIN_IDENTIFIER", value: 56, isUnsigned: true)
!3101 = !DIEnumerator(name: "TI_SAT_SFRACT_TYPE", value: 57, isUnsigned: true)
!3102 = !DIEnumerator(name: "TI_SAT_FRACT_TYPE", value: 58, isUnsigned: true)
!3103 = !DIEnumerator(name: "TI_SAT_LFRACT_TYPE", value: 59, isUnsigned: true)
!3104 = !DIEnumerator(name: "TI_SAT_LLFRACT_TYPE", value: 60, isUnsigned: true)
!3105 = !DIEnumerator(name: "TI_SAT_USFRACT_TYPE", value: 61, isUnsigned: true)
!3106 = !DIEnumerator(name: "TI_SAT_UFRACT_TYPE", value: 62, isUnsigned: true)
!3107 = !DIEnumerator(name: "TI_SAT_ULFRACT_TYPE", value: 63, isUnsigned: true)
!3108 = !DIEnumerator(name: "TI_SAT_ULLFRACT_TYPE", value: 64, isUnsigned: true)
!3109 = !DIEnumerator(name: "TI_SFRACT_TYPE", value: 65, isUnsigned: true)
!3110 = !DIEnumerator(name: "TI_FRACT_TYPE", value: 66, isUnsigned: true)
!3111 = !DIEnumerator(name: "TI_LFRACT_TYPE", value: 67, isUnsigned: true)
!3112 = !DIEnumerator(name: "TI_LLFRACT_TYPE", value: 68, isUnsigned: true)
!3113 = !DIEnumerator(name: "TI_USFRACT_TYPE", value: 69, isUnsigned: true)
!3114 = !DIEnumerator(name: "TI_UFRACT_TYPE", value: 70, isUnsigned: true)
!3115 = !DIEnumerator(name: "TI_ULFRACT_TYPE", value: 71, isUnsigned: true)
!3116 = !DIEnumerator(name: "TI_ULLFRACT_TYPE", value: 72, isUnsigned: true)
!3117 = !DIEnumerator(name: "TI_SAT_SACCUM_TYPE", value: 73, isUnsigned: true)
!3118 = !DIEnumerator(name: "TI_SAT_ACCUM_TYPE", value: 74, isUnsigned: true)
!3119 = !DIEnumerator(name: "TI_SAT_LACCUM_TYPE", value: 75, isUnsigned: true)
!3120 = !DIEnumerator(name: "TI_SAT_LLACCUM_TYPE", value: 76, isUnsigned: true)
!3121 = !DIEnumerator(name: "TI_SAT_USACCUM_TYPE", value: 77, isUnsigned: true)
!3122 = !DIEnumerator(name: "TI_SAT_UACCUM_TYPE", value: 78, isUnsigned: true)
!3123 = !DIEnumerator(name: "TI_SAT_ULACCUM_TYPE", value: 79, isUnsigned: true)
!3124 = !DIEnumerator(name: "TI_SAT_ULLACCUM_TYPE", value: 80, isUnsigned: true)
!3125 = !DIEnumerator(name: "TI_SACCUM_TYPE", value: 81, isUnsigned: true)
!3126 = !DIEnumerator(name: "TI_ACCUM_TYPE", value: 82, isUnsigned: true)
!3127 = !DIEnumerator(name: "TI_LACCUM_TYPE", value: 83, isUnsigned: true)
!3128 = !DIEnumerator(name: "TI_LLACCUM_TYPE", value: 84, isUnsigned: true)
!3129 = !DIEnumerator(name: "TI_USACCUM_TYPE", value: 85, isUnsigned: true)
!3130 = !DIEnumerator(name: "TI_UACCUM_TYPE", value: 86, isUnsigned: true)
!3131 = !DIEnumerator(name: "TI_ULACCUM_TYPE", value: 87, isUnsigned: true)
!3132 = !DIEnumerator(name: "TI_ULLACCUM_TYPE", value: 88, isUnsigned: true)
!3133 = !DIEnumerator(name: "TI_QQ_TYPE", value: 89, isUnsigned: true)
!3134 = !DIEnumerator(name: "TI_HQ_TYPE", value: 90, isUnsigned: true)
!3135 = !DIEnumerator(name: "TI_SQ_TYPE", value: 91, isUnsigned: true)
!3136 = !DIEnumerator(name: "TI_DQ_TYPE", value: 92, isUnsigned: true)
!3137 = !DIEnumerator(name: "TI_TQ_TYPE", value: 93, isUnsigned: true)
!3138 = !DIEnumerator(name: "TI_UQQ_TYPE", value: 94, isUnsigned: true)
!3139 = !DIEnumerator(name: "TI_UHQ_TYPE", value: 95, isUnsigned: true)
!3140 = !DIEnumerator(name: "TI_USQ_TYPE", value: 96, isUnsigned: true)
!3141 = !DIEnumerator(name: "TI_UDQ_TYPE", value: 97, isUnsigned: true)
!3142 = !DIEnumerator(name: "TI_UTQ_TYPE", value: 98, isUnsigned: true)
!3143 = !DIEnumerator(name: "TI_SAT_QQ_TYPE", value: 99, isUnsigned: true)
!3144 = !DIEnumerator(name: "TI_SAT_HQ_TYPE", value: 100, isUnsigned: true)
!3145 = !DIEnumerator(name: "TI_SAT_SQ_TYPE", value: 101, isUnsigned: true)
!3146 = !DIEnumerator(name: "TI_SAT_DQ_TYPE", value: 102, isUnsigned: true)
!3147 = !DIEnumerator(name: "TI_SAT_TQ_TYPE", value: 103, isUnsigned: true)
!3148 = !DIEnumerator(name: "TI_SAT_UQQ_TYPE", value: 104, isUnsigned: true)
!3149 = !DIEnumerator(name: "TI_SAT_UHQ_TYPE", value: 105, isUnsigned: true)
!3150 = !DIEnumerator(name: "TI_SAT_USQ_TYPE", value: 106, isUnsigned: true)
!3151 = !DIEnumerator(name: "TI_SAT_UDQ_TYPE", value: 107, isUnsigned: true)
!3152 = !DIEnumerator(name: "TI_SAT_UTQ_TYPE", value: 108, isUnsigned: true)
!3153 = !DIEnumerator(name: "TI_HA_TYPE", value: 109, isUnsigned: true)
!3154 = !DIEnumerator(name: "TI_SA_TYPE", value: 110, isUnsigned: true)
!3155 = !DIEnumerator(name: "TI_DA_TYPE", value: 111, isUnsigned: true)
!3156 = !DIEnumerator(name: "TI_TA_TYPE", value: 112, isUnsigned: true)
!3157 = !DIEnumerator(name: "TI_UHA_TYPE", value: 113, isUnsigned: true)
!3158 = !DIEnumerator(name: "TI_USA_TYPE", value: 114, isUnsigned: true)
!3159 = !DIEnumerator(name: "TI_UDA_TYPE", value: 115, isUnsigned: true)
!3160 = !DIEnumerator(name: "TI_UTA_TYPE", value: 116, isUnsigned: true)
!3161 = !DIEnumerator(name: "TI_SAT_HA_TYPE", value: 117, isUnsigned: true)
!3162 = !DIEnumerator(name: "TI_SAT_SA_TYPE", value: 118, isUnsigned: true)
!3163 = !DIEnumerator(name: "TI_SAT_DA_TYPE", value: 119, isUnsigned: true)
!3164 = !DIEnumerator(name: "TI_SAT_TA_TYPE", value: 120, isUnsigned: true)
!3165 = !DIEnumerator(name: "TI_SAT_UHA_TYPE", value: 121, isUnsigned: true)
!3166 = !DIEnumerator(name: "TI_SAT_USA_TYPE", value: 122, isUnsigned: true)
!3167 = !DIEnumerator(name: "TI_SAT_UDA_TYPE", value: 123, isUnsigned: true)
!3168 = !DIEnumerator(name: "TI_SAT_UTA_TYPE", value: 124, isUnsigned: true)
!3169 = !DIEnumerator(name: "TI_OPTIMIZATION_DEFAULT", value: 125, isUnsigned: true)
!3170 = !DIEnumerator(name: "TI_OPTIMIZATION_CURRENT", value: 126, isUnsigned: true)
!3171 = !DIEnumerator(name: "TI_TARGET_OPTION_DEFAULT", value: 127, isUnsigned: true)
!3172 = !DIEnumerator(name: "TI_TARGET_OPTION_CURRENT", value: 128, isUnsigned: true)
!3173 = !DIEnumerator(name: "TI_CURRENT_TARGET_PRAGMA", value: 129, isUnsigned: true)
!3174 = !DIEnumerator(name: "TI_CURRENT_OPTIMIZE_PRAGMA", value: 130, isUnsigned: true)
!3175 = !DIEnumerator(name: "TI_MAX", value: 131, isUnsigned: true)
!3176 = !{!366, !3177, !3178, !4488, !3245, !1355, !3341, !3221, !4491, !3834, !3509, !3240, !4493, !7, !3220, !3298}
!3177 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!3178 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3179, size: 64)
!3179 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "occurrence", file: !3, line: 109, size: 384, elements: !3180)
!3180 = !{!3181, !4482, !4483, !4484, !4485, !4486, !4487}
!3181 = !DIDerivedType(tag: DW_TAG_member, name: "bb", scope: !3179, file: !3, line: 111, baseType: !3182, size: 64)
!3182 = !DIDerivedType(tag: DW_TAG_typedef, name: "basic_block", file: !3183, line: 111, baseType: !3184)
!3183 = !DIFile(filename: "./coretypes.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!3184 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3185, size: 64)
!3185 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "basic_block_def", file: !318, line: 217, size: 832, elements: !3186)
!3186 = !{!3187, !4447, !4448, !4449, !4452, !4456, !4457, !4458, !4476, !4477, !4478, !4479, !4480, !4481}
!3187 = !DIDerivedType(tag: DW_TAG_member, name: "preds", scope: !3185, file: !318, line: 219, baseType: !3188, size: 64)
!3188 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3189, size: 64)
!3189 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_edge_gc", file: !318, line: 151, baseType: !3190)
!3190 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_edge_gc", file: !318, line: 151, size: 128, elements: !3191)
!3191 = !{!3192}
!3192 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !3190, file: !318, line: 151, baseType: !3193, size: 128)
!3193 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_edge_base", file: !318, line: 150, baseType: !3194)
!3194 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_edge_base", file: !318, line: 150, size: 128, elements: !3195)
!3195 = !{!3196, !3197, !3198}
!3196 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !3194, file: !318, line: 150, baseType: !7, size: 32)
!3197 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !3194, file: !318, line: 150, baseType: !7, size: 32, offset: 32)
!3198 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !3194, file: !318, line: 150, baseType: !3199, size: 64, offset: 64)
!3199 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3200, size: 64, elements: !3345)
!3200 = !DIDerivedType(tag: DW_TAG_typedef, name: "edge", file: !3183, line: 108, baseType: !3201)
!3201 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3202, size: 64)
!3202 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "edge_def", file: !318, line: 122, size: 512, elements: !3203)
!3203 = !{!3204, !3205, !3206, !4439, !4440, !4441, !4442, !4443, !4444, !4445}
!3204 = !DIDerivedType(tag: DW_TAG_member, name: "src", scope: !3202, file: !318, line: 124, baseType: !3184, size: 64)
!3205 = !DIDerivedType(tag: DW_TAG_member, name: "dest", scope: !3202, file: !318, line: 125, baseType: !3184, size: 64, offset: 64)
!3206 = !DIDerivedType(tag: DW_TAG_member, name: "insns", scope: !3202, file: !318, line: 131, baseType: !3207, size: 64, offset: 128)
!3207 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "edge_def_insns", file: !318, line: 128, size: 64, elements: !3208)
!3208 = !{!3209, !4438}
!3209 = !DIDerivedType(tag: DW_TAG_member, name: "g", scope: !3207, file: !318, line: 129, baseType: !3210, size: 64)
!3210 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple_seq", file: !3183, line: 66, baseType: !3211)
!3211 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3212, size: 64)
!3212 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_seq_d", file: !1291, line: 143, size: 192, elements: !3213)
!3213 = !{!3214, !4436, !4437}
!3214 = !DIDerivedType(tag: DW_TAG_member, name: "first", scope: !3212, file: !1291, line: 145, baseType: !3215, size: 64)
!3215 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple_seq_node", file: !3183, line: 69, baseType: !3216)
!3216 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3217, size: 64)
!3217 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_seq_node_d", file: !1291, line: 136, size: 192, elements: !3218)
!3218 = !{!3219, !4434, !4435}
!3219 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !3217, file: !1291, line: 137, baseType: !3220, size: 64)
!3220 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple", file: !3183, line: 58, baseType: !3221)
!3221 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3222, size: 64)
!3222 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "gimple_statement_d", file: !1291, line: 737, size: 768, elements: !3223)
!3223 = !{!3224, !4281, !4291, !4297, !4302, !4307, !4314, !4320, !4326, !4331, !4345, !4350, !4356, !4361, !4371, !4376, !4392, !4399, !4406, !4412, !4417, !4423, !4429}
!3224 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !3222, file: !1291, line: 738, baseType: !3225, size: 256)
!3225 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_base", file: !1291, line: 271, size: 256, elements: !3226)
!3226 = !{!3227, !3228, !3229, !3230, !3231, !3232, !3233, !3234, !3235, !3236, !3237, !3242, !3243, !3244}
!3227 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !3225, file: !1291, line: 274, baseType: !7, size: 8, flags: DIFlagBitField, extraData: i64 0)
!3228 = !DIDerivedType(tag: DW_TAG_member, name: "no_warning", scope: !3225, file: !1291, line: 277, baseType: !7, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!3229 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !3225, file: !1291, line: 281, baseType: !7, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!3230 = !DIDerivedType(tag: DW_TAG_member, name: "nontemporal_move", scope: !3225, file: !1291, line: 284, baseType: !7, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!3231 = !DIDerivedType(tag: DW_TAG_member, name: "plf", scope: !3225, file: !1291, line: 291, baseType: !7, size: 2, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!3232 = !DIDerivedType(tag: DW_TAG_member, name: "modified", scope: !3225, file: !1291, line: 295, baseType: !7, size: 1, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!3233 = !DIDerivedType(tag: DW_TAG_member, name: "has_volatile_ops", scope: !3225, file: !1291, line: 298, baseType: !7, size: 1, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!3234 = !DIDerivedType(tag: DW_TAG_member, name: "pad", scope: !3225, file: !1291, line: 301, baseType: !7, size: 1, offset: 15, flags: DIFlagBitField, extraData: i64 0)
!3235 = !DIDerivedType(tag: DW_TAG_member, name: "subcode", scope: !3225, file: !1291, line: 307, baseType: !7, size: 16, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!3236 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !3225, file: !1291, line: 312, baseType: !7, size: 32, offset: 32)
!3237 = !DIDerivedType(tag: DW_TAG_member, name: "location", scope: !3225, file: !1291, line: 316, baseType: !3238, size: 32, offset: 64)
!3238 = !DIDerivedType(tag: DW_TAG_typedef, name: "location_t", file: !3239, line: 58, baseType: !3240)
!3239 = !DIFile(filename: "./input.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!3240 = !DIDerivedType(tag: DW_TAG_typedef, name: "source_location", file: !3241, line: 44, baseType: !7)
!3241 = !DIFile(filename: "./line-map.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!3242 = !DIDerivedType(tag: DW_TAG_member, name: "num_ops", scope: !3225, file: !1291, line: 319, baseType: !7, size: 32, offset: 96)
!3243 = !DIDerivedType(tag: DW_TAG_member, name: "bb", scope: !3225, file: !1291, line: 323, baseType: !3184, size: 64, offset: 128)
!3244 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !3225, file: !1291, line: 327, baseType: !3245, size: 64, offset: 192)
!3245 = !DIDerivedType(tag: DW_TAG_typedef, name: "tree", file: !3183, line: 56, baseType: !3246)
!3246 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3247, size: 64)
!3247 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "tree_node", file: !334, line: 3371, size: 1792, elements: !3248)
!3248 = !{!3249, !3282, !3288, !3301, !3320, !3331, !3336, !3347, !3353, !3367, !3375, !3413, !3590, !3618, !3635, !3636, !3641, !3650, !3656, !3661, !3665, !3669, !3932, !3979, !3985, !3991, !3998, !4011, !4025, !4042, !4054, !4076, !4091, !4263}
!3249 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !3247, file: !334, line: 3372, baseType: !3250, size: 64)
!3250 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_base", file: !334, line: 360, size: 64, elements: !3251)
!3251 = !{!3252, !3253, !3254, !3255, !3256, !3257, !3258, !3259, !3260, !3261, !3262, !3263, !3264, !3265, !3266, !3267, !3268, !3269, !3270, !3271, !3272, !3273, !3274, !3275, !3276, !3277, !3278, !3279, !3280, !3281}
!3252 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !3250, file: !334, line: 361, baseType: !7, size: 16, flags: DIFlagBitField, extraData: i64 0)
!3253 = !DIDerivedType(tag: DW_TAG_member, name: "side_effects_flag", scope: !3250, file: !334, line: 363, baseType: !7, size: 1, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!3254 = !DIDerivedType(tag: DW_TAG_member, name: "constant_flag", scope: !3250, file: !334, line: 364, baseType: !7, size: 1, offset: 17, flags: DIFlagBitField, extraData: i64 0)
!3255 = !DIDerivedType(tag: DW_TAG_member, name: "addressable_flag", scope: !3250, file: !334, line: 365, baseType: !7, size: 1, offset: 18, flags: DIFlagBitField, extraData: i64 0)
!3256 = !DIDerivedType(tag: DW_TAG_member, name: "volatile_flag", scope: !3250, file: !334, line: 366, baseType: !7, size: 1, offset: 19, flags: DIFlagBitField, extraData: i64 0)
!3257 = !DIDerivedType(tag: DW_TAG_member, name: "readonly_flag", scope: !3250, file: !334, line: 367, baseType: !7, size: 1, offset: 20, flags: DIFlagBitField, extraData: i64 0)
!3258 = !DIDerivedType(tag: DW_TAG_member, name: "unsigned_flag", scope: !3250, file: !334, line: 368, baseType: !7, size: 1, offset: 21, flags: DIFlagBitField, extraData: i64 0)
!3259 = !DIDerivedType(tag: DW_TAG_member, name: "asm_written_flag", scope: !3250, file: !334, line: 369, baseType: !7, size: 1, offset: 22, flags: DIFlagBitField, extraData: i64 0)
!3260 = !DIDerivedType(tag: DW_TAG_member, name: "nowarning_flag", scope: !3250, file: !334, line: 370, baseType: !7, size: 1, offset: 23, flags: DIFlagBitField, extraData: i64 0)
!3261 = !DIDerivedType(tag: DW_TAG_member, name: "used_flag", scope: !3250, file: !334, line: 372, baseType: !7, size: 1, offset: 24, flags: DIFlagBitField, extraData: i64 0)
!3262 = !DIDerivedType(tag: DW_TAG_member, name: "nothrow_flag", scope: !3250, file: !334, line: 373, baseType: !7, size: 1, offset: 25, flags: DIFlagBitField, extraData: i64 0)
!3263 = !DIDerivedType(tag: DW_TAG_member, name: "static_flag", scope: !3250, file: !334, line: 374, baseType: !7, size: 1, offset: 26, flags: DIFlagBitField, extraData: i64 0)
!3264 = !DIDerivedType(tag: DW_TAG_member, name: "public_flag", scope: !3250, file: !334, line: 375, baseType: !7, size: 1, offset: 27, flags: DIFlagBitField, extraData: i64 0)
!3265 = !DIDerivedType(tag: DW_TAG_member, name: "private_flag", scope: !3250, file: !334, line: 376, baseType: !7, size: 1, offset: 28, flags: DIFlagBitField, extraData: i64 0)
!3266 = !DIDerivedType(tag: DW_TAG_member, name: "protected_flag", scope: !3250, file: !334, line: 377, baseType: !7, size: 1, offset: 29, flags: DIFlagBitField, extraData: i64 0)
!3267 = !DIDerivedType(tag: DW_TAG_member, name: "deprecated_flag", scope: !3250, file: !334, line: 378, baseType: !7, size: 1, offset: 30, flags: DIFlagBitField, extraData: i64 0)
!3268 = !DIDerivedType(tag: DW_TAG_member, name: "saturating_flag", scope: !3250, file: !334, line: 379, baseType: !7, size: 1, offset: 31, flags: DIFlagBitField, extraData: i64 0)
!3269 = !DIDerivedType(tag: DW_TAG_member, name: "default_def_flag", scope: !3250, file: !334, line: 381, baseType: !7, size: 1, offset: 32, flags: DIFlagBitField, extraData: i64 0)
!3270 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !3250, file: !334, line: 382, baseType: !7, size: 1, offset: 33, flags: DIFlagBitField, extraData: i64 0)
!3271 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !3250, file: !334, line: 383, baseType: !7, size: 1, offset: 34, flags: DIFlagBitField, extraData: i64 0)
!3272 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !3250, file: !334, line: 384, baseType: !7, size: 1, offset: 35, flags: DIFlagBitField, extraData: i64 0)
!3273 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !3250, file: !334, line: 385, baseType: !7, size: 1, offset: 36, flags: DIFlagBitField, extraData: i64 0)
!3274 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !3250, file: !334, line: 386, baseType: !7, size: 1, offset: 37, flags: DIFlagBitField, extraData: i64 0)
!3275 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !3250, file: !334, line: 387, baseType: !7, size: 1, offset: 38, flags: DIFlagBitField, extraData: i64 0)
!3276 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !3250, file: !334, line: 388, baseType: !7, size: 1, offset: 39, flags: DIFlagBitField, extraData: i64 0)
!3277 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !3250, file: !334, line: 390, baseType: !7, size: 1, offset: 40, flags: DIFlagBitField, extraData: i64 0)
!3278 = !DIDerivedType(tag: DW_TAG_member, name: "packed_flag", scope: !3250, file: !334, line: 391, baseType: !7, size: 1, offset: 41, flags: DIFlagBitField, extraData: i64 0)
!3279 = !DIDerivedType(tag: DW_TAG_member, name: "user_align", scope: !3250, file: !334, line: 392, baseType: !7, size: 1, offset: 42, flags: DIFlagBitField, extraData: i64 0)
!3280 = !DIDerivedType(tag: DW_TAG_member, name: "spare", scope: !3250, file: !334, line: 394, baseType: !7, size: 13, offset: 43, flags: DIFlagBitField, extraData: i64 0)
!3281 = !DIDerivedType(tag: DW_TAG_member, name: "address_space", scope: !3250, file: !334, line: 399, baseType: !7, size: 8, offset: 56, flags: DIFlagBitField, extraData: i64 0)
!3282 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3247, file: !334, line: 3373, baseType: !3283, size: 192)
!3283 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_common", file: !334, line: 402, size: 192, elements: !3284)
!3284 = !{!3285, !3286, !3287}
!3285 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !3283, file: !334, line: 403, baseType: !3250, size: 64)
!3286 = !DIDerivedType(tag: DW_TAG_member, name: "chain", scope: !3283, file: !334, line: 404, baseType: !3245, size: 64, offset: 64)
!3287 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !3283, file: !334, line: 405, baseType: !3245, size: 64, offset: 128)
!3288 = !DIDerivedType(tag: DW_TAG_member, name: "int_cst", scope: !3247, file: !334, line: 3374, baseType: !3289, size: 320)
!3289 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_int_cst", file: !334, line: 1384, size: 320, elements: !3290)
!3290 = !{!3291, !3292}
!3291 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3289, file: !334, line: 1385, baseType: !3283, size: 192)
!3292 = !DIDerivedType(tag: DW_TAG_member, name: "int_cst", scope: !3289, file: !334, line: 1386, baseType: !3293, size: 128, offset: 192)
!3293 = !DIDerivedType(tag: DW_TAG_typedef, name: "double_int", file: !3294, line: 58, baseType: !3295)
!3294 = !DIFile(filename: "./double-int.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!3295 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !3294, line: 54, size: 128, elements: !3296)
!3296 = !{!3297, !3299}
!3297 = !DIDerivedType(tag: DW_TAG_member, name: "low", scope: !3295, file: !3294, line: 56, baseType: !3298, size: 64)
!3298 = !DIBasicType(name: "long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!3299 = !DIDerivedType(tag: DW_TAG_member, name: "high", scope: !3295, file: !3294, line: 57, baseType: !3300, size: 64, offset: 64)
!3300 = !DIBasicType(name: "long int", size: 64, encoding: DW_ATE_signed)
!3301 = !DIDerivedType(tag: DW_TAG_member, name: "real_cst", scope: !3247, file: !334, line: 3375, baseType: !3302, size: 256)
!3302 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_real_cst", file: !334, line: 1397, size: 256, elements: !3303)
!3303 = !{!3304, !3305}
!3304 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3302, file: !334, line: 1398, baseType: !3283, size: 192)
!3305 = !DIDerivedType(tag: DW_TAG_member, name: "real_cst_ptr", scope: !3302, file: !334, line: 1399, baseType: !3306, size: 64, offset: 192)
!3306 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3307, size: 64)
!3307 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "real_value", file: !3308, line: 52, size: 256, elements: !3309)
!3308 = !DIFile(filename: "./real.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!3309 = !{!3310, !3311, !3312, !3313, !3314, !3315, !3316}
!3310 = !DIDerivedType(tag: DW_TAG_member, name: "cl", scope: !3307, file: !3308, line: 56, baseType: !7, size: 2, flags: DIFlagBitField, extraData: i64 0)
!3311 = !DIDerivedType(tag: DW_TAG_member, name: "decimal", scope: !3307, file: !3308, line: 57, baseType: !7, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!3312 = !DIDerivedType(tag: DW_TAG_member, name: "sign", scope: !3307, file: !3308, line: 58, baseType: !7, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!3313 = !DIDerivedType(tag: DW_TAG_member, name: "signalling", scope: !3307, file: !3308, line: 59, baseType: !7, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!3314 = !DIDerivedType(tag: DW_TAG_member, name: "canonical", scope: !3307, file: !3308, line: 60, baseType: !7, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!3315 = !DIDerivedType(tag: DW_TAG_member, name: "uexp", scope: !3307, file: !3308, line: 61, baseType: !7, size: 26, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!3316 = !DIDerivedType(tag: DW_TAG_member, name: "sig", scope: !3307, file: !3308, line: 62, baseType: !3317, size: 192, offset: 64)
!3317 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3298, size: 192, elements: !3318)
!3318 = !{!3319}
!3319 = !DISubrange(count: 3)
!3320 = !DIDerivedType(tag: DW_TAG_member, name: "fixed_cst", scope: !3247, file: !334, line: 3376, baseType: !3321, size: 256)
!3321 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_fixed_cst", file: !334, line: 1408, size: 256, elements: !3322)
!3322 = !{!3323, !3324}
!3323 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3321, file: !334, line: 1409, baseType: !3283, size: 192)
!3324 = !DIDerivedType(tag: DW_TAG_member, name: "fixed_cst_ptr", scope: !3321, file: !334, line: 1410, baseType: !3325, size: 64, offset: 192)
!3325 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3326, size: 64)
!3326 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "fixed_value", file: !3327, line: 27, size: 192, elements: !3328)
!3327 = !DIFile(filename: "./fixed-value.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!3328 = !{!3329, !3330}
!3329 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !3326, file: !3327, line: 29, baseType: !3293, size: 128)
!3330 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !3326, file: !3327, line: 30, baseType: !189, size: 32, offset: 128)
!3331 = !DIDerivedType(tag: DW_TAG_member, name: "vector", scope: !3247, file: !334, line: 3377, baseType: !3332, size: 256)
!3332 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_vector", file: !334, line: 1437, size: 256, elements: !3333)
!3333 = !{!3334, !3335}
!3334 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3332, file: !334, line: 1438, baseType: !3283, size: 192)
!3335 = !DIDerivedType(tag: DW_TAG_member, name: "elements", scope: !3332, file: !334, line: 1439, baseType: !3245, size: 64, offset: 192)
!3336 = !DIDerivedType(tag: DW_TAG_member, name: "string", scope: !3247, file: !334, line: 3378, baseType: !3337, size: 256)
!3337 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_string", file: !334, line: 1418, size: 256, elements: !3338)
!3338 = !{!3339, !3340, !3342}
!3339 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3337, file: !334, line: 1419, baseType: !3283, size: 192)
!3340 = !DIDerivedType(tag: DW_TAG_member, name: "length", scope: !3337, file: !334, line: 1420, baseType: !3341, size: 32, offset: 192)
!3341 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!3342 = !DIDerivedType(tag: DW_TAG_member, name: "str", scope: !3337, file: !334, line: 1421, baseType: !3343, size: 8, offset: 224)
!3343 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3344, size: 8, elements: !3345)
!3344 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!3345 = !{!3346}
!3346 = !DISubrange(count: 1)
!3347 = !DIDerivedType(tag: DW_TAG_member, name: "complex", scope: !3247, file: !334, line: 3379, baseType: !3348, size: 320)
!3348 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_complex", file: !334, line: 1428, size: 320, elements: !3349)
!3349 = !{!3350, !3351, !3352}
!3350 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3348, file: !334, line: 1429, baseType: !3283, size: 192)
!3351 = !DIDerivedType(tag: DW_TAG_member, name: "real", scope: !3348, file: !334, line: 1430, baseType: !3245, size: 64, offset: 192)
!3352 = !DIDerivedType(tag: DW_TAG_member, name: "imag", scope: !3348, file: !334, line: 1431, baseType: !3245, size: 64, offset: 256)
!3353 = !DIDerivedType(tag: DW_TAG_member, name: "identifier", scope: !3247, file: !334, line: 3380, baseType: !3354, size: 320)
!3354 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_identifier", file: !334, line: 1460, size: 320, elements: !3355)
!3355 = !{!3356, !3357}
!3356 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3354, file: !334, line: 1461, baseType: !3283, size: 192)
!3357 = !DIDerivedType(tag: DW_TAG_member, name: "id", scope: !3354, file: !334, line: 1462, baseType: !3358, size: 128, offset: 192)
!3358 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ht_identifier", file: !3359, line: 31, size: 128, elements: !3360)
!3359 = !DIFile(filename: "./symtab.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!3360 = !{!3361, !3365, !3366}
!3361 = !DIDerivedType(tag: DW_TAG_member, name: "str", scope: !3358, file: !3359, line: 32, baseType: !3362, size: 64)
!3362 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3363, size: 64)
!3363 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !3364)
!3364 = !DIBasicType(name: "unsigned char", size: 8, encoding: DW_ATE_unsigned_char)
!3365 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !3358, file: !3359, line: 33, baseType: !7, size: 32, offset: 64)
!3366 = !DIDerivedType(tag: DW_TAG_member, name: "hash_value", scope: !3358, file: !3359, line: 34, baseType: !7, size: 32, offset: 96)
!3367 = !DIDerivedType(tag: DW_TAG_member, name: "decl_minimal", scope: !3247, file: !334, line: 3381, baseType: !3368, size: 384)
!3368 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_minimal", file: !334, line: 2507, size: 384, elements: !3369)
!3369 = !{!3370, !3371, !3372, !3373, !3374}
!3370 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3368, file: !334, line: 2508, baseType: !3283, size: 192)
!3371 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !3368, file: !334, line: 2509, baseType: !3238, size: 32, offset: 192)
!3372 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !3368, file: !334, line: 2510, baseType: !7, size: 32, offset: 224)
!3373 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !3368, file: !334, line: 2511, baseType: !3245, size: 64, offset: 256)
!3374 = !DIDerivedType(tag: DW_TAG_member, name: "context", scope: !3368, file: !334, line: 2512, baseType: !3245, size: 64, offset: 320)
!3375 = !DIDerivedType(tag: DW_TAG_member, name: "decl_common", scope: !3247, file: !334, line: 3382, baseType: !3376, size: 896)
!3376 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_common", file: !334, line: 2652, size: 896, elements: !3377)
!3377 = !{!3378, !3379, !3380, !3381, !3382, !3383, !3384, !3385, !3386, !3387, !3388, !3389, !3390, !3391, !3392, !3393, !3394, !3395, !3396, !3397, !3398, !3399, !3400, !3401, !3402, !3403, !3404, !3405, !3406, !3407, !3408, !3409, !3410}
!3378 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3376, file: !334, line: 2653, baseType: !3368, size: 384)
!3379 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !3376, file: !334, line: 2654, baseType: !3245, size: 64, offset: 384)
!3380 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !3376, file: !334, line: 2656, baseType: !7, size: 8, offset: 448, flags: DIFlagBitField, extraData: i64 448)
!3381 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal_flag", scope: !3376, file: !334, line: 2658, baseType: !7, size: 1, offset: 456, flags: DIFlagBitField, extraData: i64 448)
!3382 = !DIDerivedType(tag: DW_TAG_member, name: "virtual_flag", scope: !3376, file: !334, line: 2659, baseType: !7, size: 1, offset: 457, flags: DIFlagBitField, extraData: i64 448)
!3383 = !DIDerivedType(tag: DW_TAG_member, name: "ignored_flag", scope: !3376, file: !334, line: 2660, baseType: !7, size: 1, offset: 458, flags: DIFlagBitField, extraData: i64 448)
!3384 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_flag", scope: !3376, file: !334, line: 2661, baseType: !7, size: 1, offset: 459, flags: DIFlagBitField, extraData: i64 448)
!3385 = !DIDerivedType(tag: DW_TAG_member, name: "artificial_flag", scope: !3376, file: !334, line: 2662, baseType: !7, size: 1, offset: 460, flags: DIFlagBitField, extraData: i64 448)
!3386 = !DIDerivedType(tag: DW_TAG_member, name: "preserve_flag", scope: !3376, file: !334, line: 2663, baseType: !7, size: 1, offset: 461, flags: DIFlagBitField, extraData: i64 448)
!3387 = !DIDerivedType(tag: DW_TAG_member, name: "debug_expr_is_from", scope: !3376, file: !334, line: 2664, baseType: !7, size: 1, offset: 462, flags: DIFlagBitField, extraData: i64 448)
!3388 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !3376, file: !334, line: 2666, baseType: !7, size: 1, offset: 463, flags: DIFlagBitField, extraData: i64 448)
!3389 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !3376, file: !334, line: 2667, baseType: !7, size: 1, offset: 464, flags: DIFlagBitField, extraData: i64 448)
!3390 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !3376, file: !334, line: 2668, baseType: !7, size: 1, offset: 465, flags: DIFlagBitField, extraData: i64 448)
!3391 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !3376, file: !334, line: 2669, baseType: !7, size: 1, offset: 466, flags: DIFlagBitField, extraData: i64 448)
!3392 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !3376, file: !334, line: 2670, baseType: !7, size: 1, offset: 467, flags: DIFlagBitField, extraData: i64 448)
!3393 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !3376, file: !334, line: 2671, baseType: !7, size: 1, offset: 468, flags: DIFlagBitField, extraData: i64 448)
!3394 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !3376, file: !334, line: 2672, baseType: !7, size: 1, offset: 469, flags: DIFlagBitField, extraData: i64 448)
!3395 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_7", scope: !3376, file: !334, line: 2673, baseType: !7, size: 1, offset: 470, flags: DIFlagBitField, extraData: i64 448)
!3396 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_8", scope: !3376, file: !334, line: 2674, baseType: !7, size: 1, offset: 471, flags: DIFlagBitField, extraData: i64 448)
!3397 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_0", scope: !3376, file: !334, line: 2678, baseType: !7, size: 1, offset: 472, flags: DIFlagBitField, extraData: i64 448)
!3398 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_1", scope: !3376, file: !334, line: 2682, baseType: !7, size: 1, offset: 473, flags: DIFlagBitField, extraData: i64 448)
!3399 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_2", scope: !3376, file: !334, line: 2685, baseType: !7, size: 1, offset: 474, flags: DIFlagBitField, extraData: i64 448)
!3400 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reg_flag", scope: !3376, file: !334, line: 2688, baseType: !7, size: 1, offset: 475, flags: DIFlagBitField, extraData: i64 448)
!3401 = !DIDerivedType(tag: DW_TAG_member, name: "decl_by_reference_flag", scope: !3376, file: !334, line: 2690, baseType: !7, size: 1, offset: 476, flags: DIFlagBitField, extraData: i64 448)
!3402 = !DIDerivedType(tag: DW_TAG_member, name: "decl_restricted_flag", scope: !3376, file: !334, line: 2692, baseType: !7, size: 1, offset: 477, flags: DIFlagBitField, extraData: i64 448)
!3403 = !DIDerivedType(tag: DW_TAG_member, name: "decl_common_unused", scope: !3376, file: !334, line: 2695, baseType: !7, size: 2, offset: 478, flags: DIFlagBitField, extraData: i64 448)
!3404 = !DIDerivedType(tag: DW_TAG_member, name: "off_align", scope: !3376, file: !334, line: 2698, baseType: !7, size: 8, offset: 480, flags: DIFlagBitField, extraData: i64 448)
!3405 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !3376, file: !334, line: 2703, baseType: !7, size: 32, offset: 512)
!3406 = !DIDerivedType(tag: DW_TAG_member, name: "size_unit", scope: !3376, file: !334, line: 2705, baseType: !3245, size: 64, offset: 576)
!3407 = !DIDerivedType(tag: DW_TAG_member, name: "initial", scope: !3376, file: !334, line: 2706, baseType: !3245, size: 64, offset: 640)
!3408 = !DIDerivedType(tag: DW_TAG_member, name: "attributes", scope: !3376, file: !334, line: 2707, baseType: !3245, size: 64, offset: 704)
!3409 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_origin", scope: !3376, file: !334, line: 2708, baseType: !3245, size: 64, offset: 768)
!3410 = !DIDerivedType(tag: DW_TAG_member, name: "lang_specific", scope: !3376, file: !334, line: 2711, baseType: !3411, size: 64, offset: 832)
!3411 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3412, size: 64)
!3412 = !DICompositeType(tag: DW_TAG_structure_type, name: "lang_decl", file: !334, line: 2711, flags: DIFlagFwdDecl)
!3413 = !DIDerivedType(tag: DW_TAG_member, name: "decl_with_rtl", scope: !3247, file: !334, line: 3383, baseType: !3414, size: 960)
!3414 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_with_rtl", file: !334, line: 2756, size: 960, elements: !3415)
!3415 = !{!3416, !3417}
!3416 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3414, file: !334, line: 2757, baseType: !3376, size: 896)
!3417 = !DIDerivedType(tag: DW_TAG_member, name: "rtl", scope: !3414, file: !334, line: 2758, baseType: !3418, size: 64, offset: 896)
!3418 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtx", file: !3183, line: 50, baseType: !3419)
!3419 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3420, size: 64)
!3420 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtx_def", file: !3421, line: 240, size: 384, elements: !3422)
!3421 = !DIFile(filename: "./rtl.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!3422 = !{!3423, !3424, !3425, !3426, !3427, !3428, !3429, !3430, !3431, !3432, !3433}
!3423 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !3420, file: !3421, line: 242, baseType: !7, size: 16, flags: DIFlagBitField, extraData: i64 0)
!3424 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !3420, file: !3421, line: 245, baseType: !7, size: 8, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!3425 = !DIDerivedType(tag: DW_TAG_member, name: "jump", scope: !3420, file: !3421, line: 252, baseType: !7, size: 1, offset: 24, flags: DIFlagBitField, extraData: i64 0)
!3426 = !DIDerivedType(tag: DW_TAG_member, name: "call", scope: !3420, file: !3421, line: 257, baseType: !7, size: 1, offset: 25, flags: DIFlagBitField, extraData: i64 0)
!3427 = !DIDerivedType(tag: DW_TAG_member, name: "unchanging", scope: !3420, file: !3421, line: 265, baseType: !7, size: 1, offset: 26, flags: DIFlagBitField, extraData: i64 0)
!3428 = !DIDerivedType(tag: DW_TAG_member, name: "volatil", scope: !3420, file: !3421, line: 277, baseType: !7, size: 1, offset: 27, flags: DIFlagBitField, extraData: i64 0)
!3429 = !DIDerivedType(tag: DW_TAG_member, name: "in_struct", scope: !3420, file: !3421, line: 291, baseType: !7, size: 1, offset: 28, flags: DIFlagBitField, extraData: i64 0)
!3430 = !DIDerivedType(tag: DW_TAG_member, name: "used", scope: !3420, file: !3421, line: 298, baseType: !7, size: 1, offset: 29, flags: DIFlagBitField, extraData: i64 0)
!3431 = !DIDerivedType(tag: DW_TAG_member, name: "frame_related", scope: !3420, file: !3421, line: 305, baseType: !7, size: 1, offset: 30, flags: DIFlagBitField, extraData: i64 0)
!3432 = !DIDerivedType(tag: DW_TAG_member, name: "return_val", scope: !3420, file: !3421, line: 310, baseType: !7, size: 1, offset: 31, flags: DIFlagBitField, extraData: i64 0)
!3433 = !DIDerivedType(tag: DW_TAG_member, name: "u", scope: !3420, file: !3421, line: 321, baseType: !3434, size: 320, offset: 64)
!3434 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "u", file: !3421, line: 315, size: 320, elements: !3435)
!3435 = !{!3436, !3557, !3559, !3588, !3589}
!3436 = !DIDerivedType(tag: DW_TAG_member, name: "fld", scope: !3434, file: !3421, line: 316, baseType: !3437, size: 64)
!3437 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3438, size: 64, elements: !3345)
!3438 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtunion", file: !3421, line: 183, baseType: !3439)
!3439 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "rtunion_def", file: !3421, line: 166, size: 64, elements: !3440)
!3440 = !{!3441, !3442, !3443, !3446, !3447, !3455, !3456, !3468, !3471, !3532, !3533, !3534, !3547, !3554}
!3441 = !DIDerivedType(tag: DW_TAG_member, name: "rt_int", scope: !3439, file: !3421, line: 168, baseType: !3341, size: 32)
!3442 = !DIDerivedType(tag: DW_TAG_member, name: "rt_uint", scope: !3439, file: !3421, line: 169, baseType: !7, size: 32)
!3443 = !DIDerivedType(tag: DW_TAG_member, name: "rt_str", scope: !3439, file: !3421, line: 170, baseType: !3444, size: 64)
!3444 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3445, size: 64)
!3445 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !3344)
!3446 = !DIDerivedType(tag: DW_TAG_member, name: "rt_rtx", scope: !3439, file: !3421, line: 171, baseType: !3418, size: 64)
!3447 = !DIDerivedType(tag: DW_TAG_member, name: "rt_rtvec", scope: !3439, file: !3421, line: 172, baseType: !3448, size: 64)
!3448 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtvec", file: !3183, line: 53, baseType: !3449)
!3449 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3450, size: 64)
!3450 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtvec_def", file: !3421, line: 359, size: 128, elements: !3451)
!3451 = !{!3452, !3453}
!3452 = !DIDerivedType(tag: DW_TAG_member, name: "num_elem", scope: !3450, file: !3421, line: 360, baseType: !3341, size: 32)
!3453 = !DIDerivedType(tag: DW_TAG_member, name: "elem", scope: !3450, file: !3421, line: 361, baseType: !3454, size: 64, offset: 64)
!3454 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3418, size: 64, elements: !3345)
!3455 = !DIDerivedType(tag: DW_TAG_member, name: "rt_type", scope: !3439, file: !3421, line: 173, baseType: !189, size: 32)
!3456 = !DIDerivedType(tag: DW_TAG_member, name: "rt_addr_diff_vec_flags", scope: !3439, file: !3421, line: 174, baseType: !3457, size: 32)
!3457 = !DIDerivedType(tag: DW_TAG_typedef, name: "addr_diff_vec_flags", file: !3421, line: 133, baseType: !3458)
!3458 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !3421, line: 115, size: 32, elements: !3459)
!3459 = !{!3460, !3461, !3462, !3463, !3464, !3465, !3466, !3467}
!3460 = !DIDerivedType(tag: DW_TAG_member, name: "min_align", scope: !3458, file: !3421, line: 118, baseType: !7, size: 8, flags: DIFlagBitField, extraData: i64 0)
!3461 = !DIDerivedType(tag: DW_TAG_member, name: "base_after_vec", scope: !3458, file: !3421, line: 120, baseType: !7, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!3462 = !DIDerivedType(tag: DW_TAG_member, name: "min_after_vec", scope: !3458, file: !3421, line: 121, baseType: !7, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!3463 = !DIDerivedType(tag: DW_TAG_member, name: "max_after_vec", scope: !3458, file: !3421, line: 123, baseType: !7, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!3464 = !DIDerivedType(tag: DW_TAG_member, name: "min_after_base", scope: !3458, file: !3421, line: 125, baseType: !7, size: 1, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!3465 = !DIDerivedType(tag: DW_TAG_member, name: "max_after_base", scope: !3458, file: !3421, line: 127, baseType: !7, size: 1, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!3466 = !DIDerivedType(tag: DW_TAG_member, name: "offset_unsigned", scope: !3458, file: !3421, line: 130, baseType: !7, size: 1, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!3467 = !DIDerivedType(tag: DW_TAG_member, name: "scale", scope: !3458, file: !3421, line: 132, baseType: !7, size: 8, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!3468 = !DIDerivedType(tag: DW_TAG_member, name: "rt_cselib", scope: !3439, file: !3421, line: 175, baseType: !3469, size: 64)
!3469 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3470, size: 64)
!3470 = !DICompositeType(tag: DW_TAG_structure_type, name: "cselib_val_struct", file: !3421, line: 175, flags: DIFlagFwdDecl)
!3471 = !DIDerivedType(tag: DW_TAG_member, name: "rt_bit", scope: !3439, file: !3421, line: 176, baseType: !3472, size: 64)
!3472 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3473, size: 64)
!3473 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_head_def", file: !3474, line: 75, size: 256, elements: !3475)
!3474 = !DIFile(filename: "./bitmap.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!3475 = !{!3476, !3490, !3491, !3492}
!3476 = !DIDerivedType(tag: DW_TAG_member, name: "first", scope: !3473, file: !3474, line: 76, baseType: !3477, size: 64)
!3477 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3478, size: 64)
!3478 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap_element", file: !3474, line: 68, baseType: !3479)
!3479 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_element_def", file: !3474, line: 63, size: 320, elements: !3480)
!3480 = !{!3481, !3483, !3484, !3485}
!3481 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !3479, file: !3474, line: 64, baseType: !3482, size: 64)
!3482 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3479, size: 64)
!3483 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !3479, file: !3474, line: 65, baseType: !3482, size: 64, offset: 64)
!3484 = !DIDerivedType(tag: DW_TAG_member, name: "indx", scope: !3479, file: !3474, line: 66, baseType: !7, size: 32, offset: 128)
!3485 = !DIDerivedType(tag: DW_TAG_member, name: "bits", scope: !3479, file: !3474, line: 67, baseType: !3486, size: 128, offset: 192)
!3486 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3487, size: 128, elements: !3488)
!3487 = !DIDerivedType(tag: DW_TAG_typedef, name: "BITMAP_WORD", file: !3474, line: 29, baseType: !3298)
!3488 = !{!3489}
!3489 = !DISubrange(count: 2)
!3490 = !DIDerivedType(tag: DW_TAG_member, name: "current", scope: !3473, file: !3474, line: 77, baseType: !3477, size: 64, offset: 64)
!3491 = !DIDerivedType(tag: DW_TAG_member, name: "indx", scope: !3473, file: !3474, line: 78, baseType: !7, size: 32, offset: 128)
!3492 = !DIDerivedType(tag: DW_TAG_member, name: "obstack", scope: !3473, file: !3474, line: 79, baseType: !3493, size: 64, offset: 192)
!3493 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3494, size: 64)
!3494 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap_obstack", file: !3474, line: 49, baseType: !3495)
!3495 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_obstack", file: !3474, line: 45, size: 832, elements: !3496)
!3496 = !{!3497, !3498, !3499}
!3497 = !DIDerivedType(tag: DW_TAG_member, name: "elements", scope: !3495, file: !3474, line: 46, baseType: !3482, size: 64)
!3498 = !DIDerivedType(tag: DW_TAG_member, name: "heads", scope: !3495, file: !3474, line: 47, baseType: !3472, size: 64, offset: 64)
!3499 = !DIDerivedType(tag: DW_TAG_member, name: "obstack", scope: !3495, file: !3474, line: 48, baseType: !3500, size: 704, offset: 128)
!3500 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "obstack", file: !3501, line: 164, size: 704, elements: !3502)
!3501 = !DIFile(filename: "./include/obstack.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!3502 = !{!3503, !3504, !3515, !3516, !3517, !3518, !3519, !3520, !3524, !3528, !3529, !3530, !3531}
!3503 = !DIDerivedType(tag: DW_TAG_member, name: "chunk_size", scope: !3500, file: !3501, line: 166, baseType: !3300, size: 64)
!3504 = !DIDerivedType(tag: DW_TAG_member, name: "chunk", scope: !3500, file: !3501, line: 167, baseType: !3505, size: 64, offset: 64)
!3505 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3506, size: 64)
!3506 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_obstack_chunk", file: !3501, line: 157, size: 192, elements: !3507)
!3507 = !{!3508, !3510, !3511}
!3508 = !DIDerivedType(tag: DW_TAG_member, name: "limit", scope: !3506, file: !3501, line: 159, baseType: !3509, size: 64)
!3509 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3344, size: 64)
!3510 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !3506, file: !3501, line: 160, baseType: !3505, size: 64, offset: 64)
!3511 = !DIDerivedType(tag: DW_TAG_member, name: "contents", scope: !3506, file: !3501, line: 161, baseType: !3512, size: 32, offset: 128)
!3512 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3344, size: 32, elements: !3513)
!3513 = !{!3514}
!3514 = !DISubrange(count: 4)
!3515 = !DIDerivedType(tag: DW_TAG_member, name: "object_base", scope: !3500, file: !3501, line: 168, baseType: !3509, size: 64, offset: 128)
!3516 = !DIDerivedType(tag: DW_TAG_member, name: "next_free", scope: !3500, file: !3501, line: 169, baseType: !3509, size: 64, offset: 192)
!3517 = !DIDerivedType(tag: DW_TAG_member, name: "chunk_limit", scope: !3500, file: !3501, line: 170, baseType: !3509, size: 64, offset: 256)
!3518 = !DIDerivedType(tag: DW_TAG_member, name: "temp", scope: !3500, file: !3501, line: 171, baseType: !3300, size: 64, offset: 320)
!3519 = !DIDerivedType(tag: DW_TAG_member, name: "alignment_mask", scope: !3500, file: !3501, line: 172, baseType: !3341, size: 32, offset: 384)
!3520 = !DIDerivedType(tag: DW_TAG_member, name: "chunkfun", scope: !3500, file: !3501, line: 176, baseType: !3521, size: 64, offset: 448)
!3521 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3522, size: 64)
!3522 = !DISubroutineType(types: !3523)
!3523 = !{!3505, !3177, !3300}
!3524 = !DIDerivedType(tag: DW_TAG_member, name: "freefun", scope: !3500, file: !3501, line: 177, baseType: !3525, size: 64, offset: 512)
!3525 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3526, size: 64)
!3526 = !DISubroutineType(types: !3527)
!3527 = !{null, !3177, !3505}
!3528 = !DIDerivedType(tag: DW_TAG_member, name: "extra_arg", scope: !3500, file: !3501, line: 178, baseType: !3177, size: 64, offset: 576)
!3529 = !DIDerivedType(tag: DW_TAG_member, name: "use_extra_arg", scope: !3500, file: !3501, line: 179, baseType: !7, size: 1, offset: 640, flags: DIFlagBitField, extraData: i64 640)
!3530 = !DIDerivedType(tag: DW_TAG_member, name: "maybe_empty_object", scope: !3500, file: !3501, line: 180, baseType: !7, size: 1, offset: 641, flags: DIFlagBitField, extraData: i64 640)
!3531 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_failed", scope: !3500, file: !3501, line: 184, baseType: !7, size: 1, offset: 642, flags: DIFlagBitField, extraData: i64 640)
!3532 = !DIDerivedType(tag: DW_TAG_member, name: "rt_tree", scope: !3439, file: !3421, line: 177, baseType: !3245, size: 64)
!3533 = !DIDerivedType(tag: DW_TAG_member, name: "rt_bb", scope: !3439, file: !3421, line: 178, baseType: !3184, size: 64)
!3534 = !DIDerivedType(tag: DW_TAG_member, name: "rt_mem", scope: !3439, file: !3421, line: 179, baseType: !3535, size: 64)
!3535 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3536, size: 64)
!3536 = !DIDerivedType(tag: DW_TAG_typedef, name: "mem_attrs", file: !3421, line: 150, baseType: !3537)
!3537 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "mem_attrs", file: !3421, line: 142, size: 320, elements: !3538)
!3538 = !{!3539, !3540, !3541, !3542, !3545, !3546}
!3539 = !DIDerivedType(tag: DW_TAG_member, name: "expr", scope: !3537, file: !3421, line: 144, baseType: !3245, size: 64)
!3540 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !3537, file: !3421, line: 145, baseType: !3418, size: 64, offset: 64)
!3541 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !3537, file: !3421, line: 146, baseType: !3418, size: 64, offset: 128)
!3542 = !DIDerivedType(tag: DW_TAG_member, name: "alias", scope: !3537, file: !3421, line: 147, baseType: !3543, size: 32, offset: 192)
!3543 = !DIDerivedType(tag: DW_TAG_typedef, name: "alias_set_type", file: !3544, line: 31, baseType: !3341)
!3544 = !DIFile(filename: "./alias.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!3545 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !3537, file: !3421, line: 148, baseType: !7, size: 32, offset: 224)
!3546 = !DIDerivedType(tag: DW_TAG_member, name: "addrspace", scope: !3537, file: !3421, line: 149, baseType: !3364, size: 8, offset: 256)
!3547 = !DIDerivedType(tag: DW_TAG_member, name: "rt_reg", scope: !3439, file: !3421, line: 180, baseType: !3548, size: 64)
!3548 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3549, size: 64)
!3549 = !DIDerivedType(tag: DW_TAG_typedef, name: "reg_attrs", file: !3421, line: 162, baseType: !3550)
!3550 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "reg_attrs", file: !3421, line: 159, size: 128, elements: !3551)
!3551 = !{!3552, !3553}
!3552 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !3550, file: !3421, line: 160, baseType: !3245, size: 64)
!3553 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !3550, file: !3421, line: 161, baseType: !3300, size: 64, offset: 64)
!3554 = !DIDerivedType(tag: DW_TAG_member, name: "rt_constant", scope: !3439, file: !3421, line: 181, baseType: !3555, size: 64)
!3555 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3556, size: 64)
!3556 = !DICompositeType(tag: DW_TAG_structure_type, name: "constant_descriptor_rtx", file: !3421, line: 181, flags: DIFlagFwdDecl)
!3557 = !DIDerivedType(tag: DW_TAG_member, name: "hwint", scope: !3434, file: !3421, line: 317, baseType: !3558, size: 64)
!3558 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3300, size: 64, elements: !3345)
!3559 = !DIDerivedType(tag: DW_TAG_member, name: "block_sym", scope: !3434, file: !3421, line: 318, baseType: !3560, size: 320)
!3560 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "block_symbol", file: !3421, line: 188, size: 320, elements: !3561)
!3561 = !{!3562, !3564, !3587}
!3562 = !DIDerivedType(tag: DW_TAG_member, name: "fld", scope: !3560, file: !3421, line: 190, baseType: !3563, size: 192)
!3563 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3438, size: 192, elements: !3318)
!3564 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !3560, file: !3421, line: 193, baseType: !3565, size: 64, offset: 192)
!3565 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3566, size: 64)
!3566 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "object_block", file: !3421, line: 206, size: 320, elements: !3567)
!3567 = !{!3568, !3572, !3573, !3574, !3586}
!3568 = !DIDerivedType(tag: DW_TAG_member, name: "sect", scope: !3566, file: !3421, line: 208, baseType: !3569, size: 64)
!3569 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3570, size: 64)
!3570 = !DIDerivedType(tag: DW_TAG_typedef, name: "section", file: !3183, line: 62, baseType: !3571)
!3571 = !DICompositeType(tag: DW_TAG_union_type, name: "section", file: !3183, line: 61, flags: DIFlagFwdDecl)
!3572 = !DIDerivedType(tag: DW_TAG_member, name: "alignment", scope: !3566, file: !3421, line: 211, baseType: !7, size: 32, offset: 64)
!3573 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !3566, file: !3421, line: 214, baseType: !3300, size: 64, offset: 128)
!3574 = !DIDerivedType(tag: DW_TAG_member, name: "objects", scope: !3566, file: !3421, line: 224, baseType: !3575, size: 64, offset: 192)
!3575 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3576, size: 64)
!3576 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_rtx_gc", file: !3421, line: 202, baseType: !3577)
!3577 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_rtx_gc", file: !3421, line: 202, size: 128, elements: !3578)
!3578 = !{!3579}
!3579 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !3577, file: !3421, line: 202, baseType: !3580, size: 128)
!3580 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_rtx_base", file: !3421, line: 200, baseType: !3581)
!3581 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_rtx_base", file: !3421, line: 200, size: 128, elements: !3582)
!3582 = !{!3583, !3584, !3585}
!3583 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !3581, file: !3421, line: 200, baseType: !7, size: 32)
!3584 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !3581, file: !3421, line: 200, baseType: !7, size: 32, offset: 32)
!3585 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !3581, file: !3421, line: 200, baseType: !3454, size: 64, offset: 64)
!3586 = !DIDerivedType(tag: DW_TAG_member, name: "anchors", scope: !3566, file: !3421, line: 234, baseType: !3575, size: 64, offset: 256)
!3587 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !3560, file: !3421, line: 197, baseType: !3300, size: 64, offset: 256)
!3588 = !DIDerivedType(tag: DW_TAG_member, name: "rv", scope: !3434, file: !3421, line: 319, baseType: !3307, size: 256)
!3589 = !DIDerivedType(tag: DW_TAG_member, name: "fv", scope: !3434, file: !3421, line: 320, baseType: !3326, size: 192)
!3590 = !DIDerivedType(tag: DW_TAG_member, name: "decl_non_common", scope: !3247, file: !334, line: 3384, baseType: !3591, size: 1472)
!3591 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_non_common", file: !334, line: 3114, size: 1472, elements: !3592)
!3592 = !{!3593, !3614, !3615, !3616, !3617}
!3593 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3591, file: !334, line: 3115, baseType: !3594, size: 1216)
!3594 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_with_vis", file: !334, line: 2984, size: 1216, elements: !3595)
!3595 = !{!3596, !3597, !3598, !3599, !3600, !3601, !3602, !3603, !3604, !3605, !3606, !3607, !3608, !3609, !3610, !3611, !3612, !3613}
!3596 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3594, file: !334, line: 2985, baseType: !3414, size: 960)
!3597 = !DIDerivedType(tag: DW_TAG_member, name: "assembler_name", scope: !3594, file: !334, line: 2986, baseType: !3245, size: 64, offset: 960)
!3598 = !DIDerivedType(tag: DW_TAG_member, name: "section_name", scope: !3594, file: !334, line: 2987, baseType: !3245, size: 64, offset: 1024)
!3599 = !DIDerivedType(tag: DW_TAG_member, name: "comdat_group", scope: !3594, file: !334, line: 2988, baseType: !3245, size: 64, offset: 1088)
!3600 = !DIDerivedType(tag: DW_TAG_member, name: "defer_output", scope: !3594, file: !334, line: 2991, baseType: !7, size: 1, offset: 1152, flags: DIFlagBitField, extraData: i64 1152)
!3601 = !DIDerivedType(tag: DW_TAG_member, name: "hard_register", scope: !3594, file: !334, line: 2992, baseType: !7, size: 1, offset: 1153, flags: DIFlagBitField, extraData: i64 1152)
!3602 = !DIDerivedType(tag: DW_TAG_member, name: "thread_local", scope: !3594, file: !334, line: 2993, baseType: !7, size: 1, offset: 1154, flags: DIFlagBitField, extraData: i64 1152)
!3603 = !DIDerivedType(tag: DW_TAG_member, name: "common_flag", scope: !3594, file: !334, line: 2994, baseType: !7, size: 1, offset: 1155, flags: DIFlagBitField, extraData: i64 1152)
!3604 = !DIDerivedType(tag: DW_TAG_member, name: "in_text_section", scope: !3594, file: !334, line: 2995, baseType: !7, size: 1, offset: 1156, flags: DIFlagBitField, extraData: i64 1152)
!3605 = !DIDerivedType(tag: DW_TAG_member, name: "dllimport_flag", scope: !3594, file: !334, line: 2996, baseType: !7, size: 1, offset: 1157, flags: DIFlagBitField, extraData: i64 1152)
!3606 = !DIDerivedType(tag: DW_TAG_member, name: "shadowed_for_var_p", scope: !3594, file: !334, line: 2998, baseType: !7, size: 1, offset: 1158, flags: DIFlagBitField, extraData: i64 1152)
!3607 = !DIDerivedType(tag: DW_TAG_member, name: "weak_flag", scope: !3594, file: !334, line: 3000, baseType: !7, size: 1, offset: 1159, flags: DIFlagBitField, extraData: i64 1152)
!3608 = !DIDerivedType(tag: DW_TAG_member, name: "seen_in_bind_expr", scope: !3594, file: !334, line: 3002, baseType: !7, size: 1, offset: 1160, flags: DIFlagBitField, extraData: i64 1152)
!3609 = !DIDerivedType(tag: DW_TAG_member, name: "comdat_flag", scope: !3594, file: !334, line: 3003, baseType: !7, size: 1, offset: 1161, flags: DIFlagBitField, extraData: i64 1152)
!3610 = !DIDerivedType(tag: DW_TAG_member, name: "visibility", scope: !3594, file: !334, line: 3004, baseType: !7, size: 2, offset: 1162, flags: DIFlagBitField, extraData: i64 1152)
!3611 = !DIDerivedType(tag: DW_TAG_member, name: "visibility_specified", scope: !3594, file: !334, line: 3005, baseType: !7, size: 1, offset: 1164, flags: DIFlagBitField, extraData: i64 1152)
!3612 = !DIDerivedType(tag: DW_TAG_member, name: "tls_model", scope: !3594, file: !334, line: 3007, baseType: !7, size: 3, offset: 1165, flags: DIFlagBitField, extraData: i64 1152)
!3613 = !DIDerivedType(tag: DW_TAG_member, name: "init_priority_p", scope: !3594, file: !334, line: 3010, baseType: !7, size: 1, offset: 1168, flags: DIFlagBitField, extraData: i64 1152)
!3614 = !DIDerivedType(tag: DW_TAG_member, name: "saved_tree", scope: !3591, file: !334, line: 3117, baseType: !3245, size: 64, offset: 1216)
!3615 = !DIDerivedType(tag: DW_TAG_member, name: "arguments", scope: !3591, file: !334, line: 3119, baseType: !3245, size: 64, offset: 1280)
!3616 = !DIDerivedType(tag: DW_TAG_member, name: "result", scope: !3591, file: !334, line: 3121, baseType: !3245, size: 64, offset: 1344)
!3617 = !DIDerivedType(tag: DW_TAG_member, name: "vindex", scope: !3591, file: !334, line: 3123, baseType: !3245, size: 64, offset: 1408)
!3618 = !DIDerivedType(tag: DW_TAG_member, name: "parm_decl", scope: !3247, file: !334, line: 3385, baseType: !3619, size: 1088)
!3619 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_parm_decl", file: !334, line: 2874, size: 1088, elements: !3620)
!3620 = !{!3621, !3622, !3623}
!3621 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3619, file: !334, line: 2875, baseType: !3414, size: 960)
!3622 = !DIDerivedType(tag: DW_TAG_member, name: "incoming_rtl", scope: !3619, file: !334, line: 2876, baseType: !3418, size: 64, offset: 960)
!3623 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !3619, file: !334, line: 2877, baseType: !3624, size: 64, offset: 1024)
!3624 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3625, size: 64)
!3625 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "var_ann_d", file: !3626, line: 172, size: 128, elements: !3627)
!3626 = !DIFile(filename: "./tree-flow.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!3627 = !{!3628, !3629, !3630, !3631, !3632, !3633, !3634}
!3628 = !DIDerivedType(tag: DW_TAG_member, name: "base_var_processed", scope: !3625, file: !3626, line: 174, baseType: !7, size: 1, flags: DIFlagBitField, extraData: i64 0)
!3629 = !DIDerivedType(tag: DW_TAG_member, name: "used", scope: !3625, file: !3626, line: 178, baseType: !7, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!3630 = !DIDerivedType(tag: DW_TAG_member, name: "need_phi_state", scope: !3625, file: !3626, line: 183, baseType: !7, size: 2, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!3631 = !DIDerivedType(tag: DW_TAG_member, name: "is_heapvar", scope: !3625, file: !3626, line: 187, baseType: !7, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!3632 = !DIDerivedType(tag: DW_TAG_member, name: "noalias_state", scope: !3625, file: !3626, line: 192, baseType: !7, size: 2, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!3633 = !DIDerivedType(tag: DW_TAG_member, name: "base_index", scope: !3625, file: !3626, line: 195, baseType: !7, size: 32, offset: 32)
!3634 = !DIDerivedType(tag: DW_TAG_member, name: "current_def", scope: !3625, file: !3626, line: 199, baseType: !3245, size: 64, offset: 64)
!3635 = !DIDerivedType(tag: DW_TAG_member, name: "decl_with_vis", scope: !3247, file: !334, line: 3386, baseType: !3594, size: 1216)
!3636 = !DIDerivedType(tag: DW_TAG_member, name: "var_decl", scope: !3247, file: !334, line: 3387, baseType: !3637, size: 1280)
!3637 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_var_decl", file: !334, line: 3093, size: 1280, elements: !3638)
!3638 = !{!3639, !3640}
!3639 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3637, file: !334, line: 3094, baseType: !3594, size: 1216)
!3640 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !3637, file: !334, line: 3095, baseType: !3624, size: 64, offset: 1216)
!3641 = !DIDerivedType(tag: DW_TAG_member, name: "field_decl", scope: !3247, file: !334, line: 3388, baseType: !3642, size: 1216)
!3642 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_field_decl", file: !334, line: 2824, size: 1216, elements: !3643)
!3643 = !{!3644, !3645, !3646, !3647, !3648, !3649}
!3644 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3642, file: !334, line: 2825, baseType: !3376, size: 896)
!3645 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !3642, file: !334, line: 2827, baseType: !3245, size: 64, offset: 896)
!3646 = !DIDerivedType(tag: DW_TAG_member, name: "bit_field_type", scope: !3642, file: !334, line: 2828, baseType: !3245, size: 64, offset: 960)
!3647 = !DIDerivedType(tag: DW_TAG_member, name: "qualifier", scope: !3642, file: !334, line: 2829, baseType: !3245, size: 64, offset: 1024)
!3648 = !DIDerivedType(tag: DW_TAG_member, name: "bit_offset", scope: !3642, file: !334, line: 2830, baseType: !3245, size: 64, offset: 1088)
!3649 = !DIDerivedType(tag: DW_TAG_member, name: "fcontext", scope: !3642, file: !334, line: 2831, baseType: !3245, size: 64, offset: 1152)
!3650 = !DIDerivedType(tag: DW_TAG_member, name: "label_decl", scope: !3247, file: !334, line: 3389, baseType: !3651, size: 1024)
!3651 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_label_decl", file: !334, line: 2850, size: 1024, elements: !3652)
!3652 = !{!3653, !3654, !3655}
!3653 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3651, file: !334, line: 2851, baseType: !3414, size: 960)
!3654 = !DIDerivedType(tag: DW_TAG_member, name: "label_decl_uid", scope: !3651, file: !334, line: 2852, baseType: !3341, size: 32, offset: 960)
!3655 = !DIDerivedType(tag: DW_TAG_member, name: "eh_landing_pad_nr", scope: !3651, file: !334, line: 2853, baseType: !3341, size: 32, offset: 992)
!3656 = !DIDerivedType(tag: DW_TAG_member, name: "result_decl", scope: !3247, file: !334, line: 3390, baseType: !3657, size: 1024)
!3657 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_result_decl", file: !334, line: 2857, size: 1024, elements: !3658)
!3658 = !{!3659, !3660}
!3659 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3657, file: !334, line: 2858, baseType: !3414, size: 960)
!3660 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !3657, file: !334, line: 2859, baseType: !3624, size: 64, offset: 960)
!3661 = !DIDerivedType(tag: DW_TAG_member, name: "const_decl", scope: !3247, file: !334, line: 3391, baseType: !3662, size: 960)
!3662 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_const_decl", file: !334, line: 2862, size: 960, elements: !3663)
!3663 = !{!3664}
!3664 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3662, file: !334, line: 2863, baseType: !3414, size: 960)
!3665 = !DIDerivedType(tag: DW_TAG_member, name: "type_decl", scope: !3247, file: !334, line: 3392, baseType: !3666, size: 1472)
!3666 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_type_decl", file: !334, line: 3304, size: 1472, elements: !3667)
!3667 = !{!3668}
!3668 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3666, file: !334, line: 3305, baseType: !3591, size: 1472)
!3669 = !DIDerivedType(tag: DW_TAG_member, name: "function_decl", scope: !3247, file: !334, line: 3393, baseType: !3670, size: 1792)
!3670 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_function_decl", file: !334, line: 3248, size: 1792, elements: !3671)
!3671 = !{!3672, !3673, !3911, !3912, !3913, !3914, !3915, !3916, !3917, !3918, !3919, !3920, !3921, !3922, !3923, !3924, !3925, !3926, !3927, !3928, !3929, !3930, !3931}
!3672 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3670, file: !334, line: 3249, baseType: !3591, size: 1472)
!3673 = !DIDerivedType(tag: DW_TAG_member, name: "f", scope: !3670, file: !334, line: 3251, baseType: !3674, size: 64, offset: 1472)
!3674 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3675, size: 64)
!3675 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "function", file: !3676, line: 463, size: 1152, elements: !3677)
!3676 = !DIFile(filename: "./function.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!3677 = !{!3678, !3681, !3711, !3712, !3852, !3855, !3856, !3857, !3858, !3859, !3860, !3884, !3887, !3888, !3889, !3890, !3891, !3892, !3893, !3894, !3895, !3896, !3897, !3898, !3899, !3900, !3901, !3902, !3903, !3904, !3905, !3906, !3907, !3908, !3909, !3910}
!3678 = !DIDerivedType(tag: DW_TAG_member, name: "eh", scope: !3675, file: !3676, line: 464, baseType: !3679, size: 64)
!3679 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3680, size: 64)
!3680 = !DICompositeType(tag: DW_TAG_structure_type, name: "eh_status", file: !3676, line: 464, flags: DIFlagFwdDecl)
!3681 = !DIDerivedType(tag: DW_TAG_member, name: "cfg", scope: !3675, file: !3676, line: 467, baseType: !3682, size: 64, offset: 64)
!3682 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3683, size: 64)
!3683 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "control_flow_graph", file: !318, line: 374, size: 640, elements: !3684)
!3684 = !{!3685, !3686, !3687, !3700, !3701, !3702, !3703, !3704, !3705, !3707, !3709, !3710}
!3685 = !DIDerivedType(tag: DW_TAG_member, name: "x_entry_block_ptr", scope: !3683, file: !318, line: 377, baseType: !3182, size: 64)
!3686 = !DIDerivedType(tag: DW_TAG_member, name: "x_exit_block_ptr", scope: !3683, file: !318, line: 378, baseType: !3182, size: 64, offset: 64)
!3687 = !DIDerivedType(tag: DW_TAG_member, name: "x_basic_block_info", scope: !3683, file: !318, line: 381, baseType: !3688, size: 64, offset: 128)
!3688 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3689, size: 64)
!3689 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_basic_block_gc", file: !318, line: 282, baseType: !3690)
!3690 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_basic_block_gc", file: !318, line: 282, size: 128, elements: !3691)
!3691 = !{!3692}
!3692 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !3690, file: !318, line: 282, baseType: !3693, size: 128)
!3693 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_basic_block_base", file: !318, line: 281, baseType: !3694)
!3694 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_basic_block_base", file: !318, line: 281, size: 128, elements: !3695)
!3695 = !{!3696, !3697, !3698}
!3696 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !3694, file: !318, line: 281, baseType: !7, size: 32)
!3697 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !3694, file: !318, line: 281, baseType: !7, size: 32, offset: 32)
!3698 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !3694, file: !318, line: 281, baseType: !3699, size: 64, offset: 64)
!3699 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3182, size: 64, elements: !3345)
!3700 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_basic_blocks", scope: !3683, file: !318, line: 384, baseType: !3341, size: 32, offset: 192)
!3701 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_edges", scope: !3683, file: !318, line: 387, baseType: !3341, size: 32, offset: 224)
!3702 = !DIDerivedType(tag: DW_TAG_member, name: "x_last_basic_block", scope: !3683, file: !318, line: 390, baseType: !3341, size: 32, offset: 256)
!3703 = !DIDerivedType(tag: DW_TAG_member, name: "x_label_to_block_map", scope: !3683, file: !318, line: 394, baseType: !3688, size: 64, offset: 320)
!3704 = !DIDerivedType(tag: DW_TAG_member, name: "x_profile_status", scope: !3683, file: !318, line: 396, baseType: !317, size: 32, offset: 384)
!3705 = !DIDerivedType(tag: DW_TAG_member, name: "x_dom_computed", scope: !3683, file: !318, line: 399, baseType: !3706, size: 64, offset: 416)
!3706 = !DICompositeType(tag: DW_TAG_array_type, baseType: !323, size: 64, elements: !3488)
!3707 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_bbs_in_dom_tree", scope: !3683, file: !318, line: 402, baseType: !3708, size: 64, offset: 480)
!3708 = !DICompositeType(tag: DW_TAG_array_type, baseType: !7, size: 64, elements: !3488)
!3709 = !DIDerivedType(tag: DW_TAG_member, name: "max_jumptable_ents", scope: !3683, file: !318, line: 406, baseType: !3341, size: 32, offset: 544)
!3710 = !DIDerivedType(tag: DW_TAG_member, name: "last_label_uid", scope: !3683, file: !318, line: 409, baseType: !3341, size: 32, offset: 576)
!3711 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_body", scope: !3675, file: !3676, line: 470, baseType: !3211, size: 64, offset: 128)
!3712 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_df", scope: !3675, file: !3676, line: 473, baseType: !3713, size: 64, offset: 192)
!3713 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3714, size: 64)
!3714 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_df", file: !3626, line: 39, size: 1152, elements: !3715)
!3715 = !{!3716, !3768, !3781, !3794, !3795, !3807, !3808, !3812, !3813, !3814, !3815, !3816}
!3716 = !DIDerivedType(tag: DW_TAG_member, name: "referenced_vars", scope: !3714, file: !3626, line: 41, baseType: !3717, size: 64)
!3717 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_t", file: !3718, line: 144, baseType: !3719)
!3718 = !DIFile(filename: "./include/hashtab.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!3719 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3720, size: 64)
!3720 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "htab", file: !3718, line: 100, size: 896, elements: !3721)
!3721 = !{!3722, !3730, !3735, !3740, !3742, !3745, !3746, !3747, !3748, !3749, !3754, !3756, !3757, !3762, !3767}
!3722 = !DIDerivedType(tag: DW_TAG_member, name: "hash_f", scope: !3720, file: !3718, line: 102, baseType: !3723, size: 64)
!3723 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_hash", file: !3718, line: 52, baseType: !3724)
!3724 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3725, size: 64)
!3725 = !DISubroutineType(types: !3726)
!3726 = !{!3727, !3728}
!3727 = !DIDerivedType(tag: DW_TAG_typedef, name: "hashval_t", file: !3718, line: 47, baseType: !7)
!3728 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3729, size: 64)
!3729 = !DIDerivedType(tag: DW_TAG_const_type, baseType: null)
!3730 = !DIDerivedType(tag: DW_TAG_member, name: "eq_f", scope: !3720, file: !3718, line: 105, baseType: !3731, size: 64, offset: 64)
!3731 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_eq", file: !3718, line: 59, baseType: !3732)
!3732 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3733, size: 64)
!3733 = !DISubroutineType(types: !3734)
!3734 = !{!3341, !3728, !3728}
!3735 = !DIDerivedType(tag: DW_TAG_member, name: "del_f", scope: !3720, file: !3718, line: 108, baseType: !3736, size: 64, offset: 128)
!3736 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_del", file: !3718, line: 63, baseType: !3737)
!3737 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3738, size: 64)
!3738 = !DISubroutineType(types: !3739)
!3739 = !{null, !3177}
!3740 = !DIDerivedType(tag: DW_TAG_member, name: "entries", scope: !3720, file: !3718, line: 111, baseType: !3741, size: 64, offset: 192)
!3741 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3177, size: 64)
!3742 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !3720, file: !3718, line: 114, baseType: !3743, size: 64, offset: 256)
!3743 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !3744, line: 46, baseType: !3298)
!3744 = !DIFile(filename: "Rohit/IR2Vec-LoopOptimizationFramework/build_REL_AsrtON/lib/clang/10.0.1/include/stddef.h", directory: "/home/venkat/IF-DV")
!3745 = !DIDerivedType(tag: DW_TAG_member, name: "n_elements", scope: !3720, file: !3718, line: 117, baseType: !3743, size: 64, offset: 320)
!3746 = !DIDerivedType(tag: DW_TAG_member, name: "n_deleted", scope: !3720, file: !3718, line: 120, baseType: !3743, size: 64, offset: 384)
!3747 = !DIDerivedType(tag: DW_TAG_member, name: "searches", scope: !3720, file: !3718, line: 124, baseType: !7, size: 32, offset: 448)
!3748 = !DIDerivedType(tag: DW_TAG_member, name: "collisions", scope: !3720, file: !3718, line: 128, baseType: !7, size: 32, offset: 480)
!3749 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_f", scope: !3720, file: !3718, line: 131, baseType: !3750, size: 64, offset: 512)
!3750 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_alloc", file: !3718, line: 75, baseType: !3751)
!3751 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3752, size: 64)
!3752 = !DISubroutineType(types: !3753)
!3753 = !{!3177, !3743, !3743}
!3754 = !DIDerivedType(tag: DW_TAG_member, name: "free_f", scope: !3720, file: !3718, line: 132, baseType: !3755, size: 64, offset: 576)
!3755 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_free", file: !3718, line: 78, baseType: !3737)
!3756 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_arg", scope: !3720, file: !3718, line: 135, baseType: !3177, size: 64, offset: 640)
!3757 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_with_arg_f", scope: !3720, file: !3718, line: 136, baseType: !3758, size: 64, offset: 704)
!3758 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_alloc_with_arg", file: !3718, line: 82, baseType: !3759)
!3759 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3760, size: 64)
!3760 = !DISubroutineType(types: !3761)
!3761 = !{!3177, !3177, !3743, !3743}
!3762 = !DIDerivedType(tag: DW_TAG_member, name: "free_with_arg_f", scope: !3720, file: !3718, line: 137, baseType: !3763, size: 64, offset: 768)
!3763 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_free_with_arg", file: !3718, line: 83, baseType: !3764)
!3764 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3765, size: 64)
!3765 = !DISubroutineType(types: !3766)
!3766 = !{null, !3177, !3177}
!3767 = !DIDerivedType(tag: DW_TAG_member, name: "size_prime_index", scope: !3720, file: !3718, line: 141, baseType: !7, size: 32, offset: 832)
!3768 = !DIDerivedType(tag: DW_TAG_member, name: "modified_noreturn_calls", scope: !3714, file: !3626, line: 48, baseType: !3769, size: 64, offset: 64)
!3769 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3770, size: 64)
!3770 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_gimple_gc", file: !1291, line: 35, baseType: !3771)
!3771 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_gimple_gc", file: !1291, line: 35, size: 128, elements: !3772)
!3772 = !{!3773}
!3773 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !3771, file: !1291, line: 35, baseType: !3774, size: 128)
!3774 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_gimple_base", file: !1291, line: 33, baseType: !3775)
!3775 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_gimple_base", file: !1291, line: 33, size: 128, elements: !3776)
!3776 = !{!3777, !3778, !3779}
!3777 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !3775, file: !1291, line: 33, baseType: !7, size: 32)
!3778 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !3775, file: !1291, line: 33, baseType: !7, size: 32, offset: 32)
!3779 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !3775, file: !1291, line: 33, baseType: !3780, size: 64, offset: 64)
!3780 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3220, size: 64, elements: !3345)
!3781 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_names", scope: !3714, file: !3626, line: 51, baseType: !3782, size: 64, offset: 128)
!3782 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3783, size: 64)
!3783 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_gc", file: !334, line: 183, baseType: !3784)
!3784 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_gc", file: !334, line: 183, size: 128, elements: !3785)
!3785 = !{!3786}
!3786 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !3784, file: !334, line: 183, baseType: !3787, size: 128)
!3787 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_base", file: !334, line: 182, baseType: !3788)
!3788 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_base", file: !334, line: 182, size: 128, elements: !3789)
!3789 = !{!3790, !3791, !3792}
!3790 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !3788, file: !334, line: 182, baseType: !7, size: 32)
!3791 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !3788, file: !334, line: 182, baseType: !7, size: 32, offset: 32)
!3792 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !3788, file: !334, line: 182, baseType: !3793, size: 64, offset: 64)
!3793 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3245, size: 64, elements: !3345)
!3794 = !DIDerivedType(tag: DW_TAG_member, name: "vop", scope: !3714, file: !3626, line: 54, baseType: !3245, size: 64, offset: 192)
!3795 = !DIDerivedType(tag: DW_TAG_member, name: "escaped", scope: !3714, file: !3626, line: 57, baseType: !3796, size: 128, offset: 256)
!3796 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "pt_solution", file: !3797, line: 31, size: 128, elements: !3798)
!3797 = !DIFile(filename: "./tree-ssa-alias.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!3798 = !{!3799, !3800, !3801, !3802, !3803, !3804, !3805}
!3799 = !DIDerivedType(tag: DW_TAG_member, name: "anything", scope: !3796, file: !3797, line: 35, baseType: !7, size: 1, flags: DIFlagBitField, extraData: i64 0)
!3800 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal", scope: !3796, file: !3797, line: 39, baseType: !7, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!3801 = !DIDerivedType(tag: DW_TAG_member, name: "escaped", scope: !3796, file: !3797, line: 42, baseType: !7, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!3802 = !DIDerivedType(tag: DW_TAG_member, name: "null", scope: !3796, file: !3797, line: 46, baseType: !7, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!3803 = !DIDerivedType(tag: DW_TAG_member, name: "vars_contains_global", scope: !3796, file: !3797, line: 50, baseType: !7, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!3804 = !DIDerivedType(tag: DW_TAG_member, name: "vars_contains_restrict", scope: !3796, file: !3797, line: 53, baseType: !7, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!3805 = !DIDerivedType(tag: DW_TAG_member, name: "vars", scope: !3796, file: !3797, line: 56, baseType: !3806, size: 64, offset: 64)
!3806 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap", file: !3183, line: 47, baseType: !3472)
!3807 = !DIDerivedType(tag: DW_TAG_member, name: "callused", scope: !3714, file: !3626, line: 60, baseType: !3796, size: 128, offset: 384)
!3808 = !DIDerivedType(tag: DW_TAG_member, name: "decls_to_pointers", scope: !3714, file: !3626, line: 64, baseType: !3809, size: 64, offset: 512)
!3809 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3810, size: 64)
!3810 = !DICompositeType(tag: DW_TAG_structure_type, name: "pointer_map_t", file: !3811, line: 33, flags: DIFlagFwdDecl)
!3811 = !DIFile(filename: "./pointer-set.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!3812 = !DIDerivedType(tag: DW_TAG_member, name: "free_ssanames", scope: !3714, file: !3626, line: 67, baseType: !3245, size: 64, offset: 576)
!3813 = !DIDerivedType(tag: DW_TAG_member, name: "default_defs", scope: !3714, file: !3626, line: 73, baseType: !3717, size: 64, offset: 640)
!3814 = !DIDerivedType(tag: DW_TAG_member, name: "syms_to_rename", scope: !3714, file: !3626, line: 77, baseType: !3806, size: 64, offset: 704)
!3815 = !DIDerivedType(tag: DW_TAG_member, name: "in_ssa_p", scope: !3714, file: !3626, line: 80, baseType: !7, size: 1, offset: 768, flags: DIFlagBitField, extraData: i64 768)
!3816 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_operands", scope: !3714, file: !3626, line: 82, baseType: !3817, size: 320, offset: 832)
!3817 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_operands", file: !1349, line: 62, size: 320, elements: !3818)
!3818 = !{!3819, !3825, !3826, !3827, !3828, !3835}
!3819 = !DIDerivedType(tag: DW_TAG_member, name: "operand_memory", scope: !3817, file: !1349, line: 63, baseType: !3820, size: 64)
!3820 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3821, size: 64)
!3821 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_operand_memory_d", file: !1349, line: 56, size: 128, elements: !3822)
!3822 = !{!3823, !3824}
!3823 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !3821, file: !1349, line: 57, baseType: !3820, size: 64)
!3824 = !DIDerivedType(tag: DW_TAG_member, name: "mem", scope: !3821, file: !1349, line: 58, baseType: !3343, size: 8, offset: 64)
!3825 = !DIDerivedType(tag: DW_TAG_member, name: "operand_memory_index", scope: !3817, file: !1349, line: 64, baseType: !7, size: 32, offset: 64)
!3826 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_operand_mem_size", scope: !3817, file: !1349, line: 66, baseType: !7, size: 32, offset: 96)
!3827 = !DIDerivedType(tag: DW_TAG_member, name: "ops_active", scope: !3817, file: !1349, line: 68, baseType: !3364, size: 8, offset: 128)
!3828 = !DIDerivedType(tag: DW_TAG_member, name: "free_defs", scope: !3817, file: !1349, line: 70, baseType: !3829, size: 64, offset: 192)
!3829 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3830, size: 64)
!3830 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "def_optype_d", file: !1349, line: 37, size: 128, elements: !3831)
!3831 = !{!3832, !3833}
!3832 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !3830, file: !1349, line: 39, baseType: !3829, size: 64)
!3833 = !DIDerivedType(tag: DW_TAG_member, name: "def_ptr", scope: !3830, file: !1349, line: 40, baseType: !3834, size: 64, offset: 64)
!3834 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3245, size: 64)
!3835 = !DIDerivedType(tag: DW_TAG_member, name: "free_uses", scope: !3817, file: !1349, line: 71, baseType: !3836, size: 64, offset: 256)
!3836 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3837, size: 64)
!3837 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "use_optype_d", file: !1349, line: 45, size: 320, elements: !3838)
!3838 = !{!3839, !3840}
!3839 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !3837, file: !1349, line: 47, baseType: !3836, size: 64)
!3840 = !DIDerivedType(tag: DW_TAG_member, name: "use_ptr", scope: !3837, file: !1349, line: 48, baseType: !3841, size: 256, offset: 64)
!3841 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_use_operand_d", file: !334, line: 1883, size: 256, elements: !3842)
!3842 = !{!3843, !3845, !3846, !3851}
!3843 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !3841, file: !334, line: 1884, baseType: !3844, size: 64)
!3844 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3841, size: 64)
!3845 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !3841, file: !334, line: 1885, baseType: !3844, size: 64, offset: 64)
!3846 = !DIDerivedType(tag: DW_TAG_member, name: "loc", scope: !3841, file: !334, line: 1891, baseType: !3847, size: 64, offset: 128)
!3847 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !3841, file: !334, line: 1891, size: 64, elements: !3848)
!3848 = !{!3849, !3850}
!3849 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !3847, file: !334, line: 1891, baseType: !3220, size: 64)
!3850 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_name", scope: !3847, file: !334, line: 1891, baseType: !3245, size: 64)
!3851 = !DIDerivedType(tag: DW_TAG_member, name: "use", scope: !3841, file: !334, line: 1892, baseType: !3834, size: 64, offset: 192)
!3852 = !DIDerivedType(tag: DW_TAG_member, name: "x_current_loops", scope: !3675, file: !3676, line: 476, baseType: !3853, size: 64, offset: 256)
!3853 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3854, size: 64)
!3854 = !DICompositeType(tag: DW_TAG_structure_type, name: "loops", file: !3676, line: 476, flags: DIFlagFwdDecl)
!3855 = !DIDerivedType(tag: DW_TAG_member, name: "value_histograms", scope: !3675, file: !3676, line: 479, baseType: !3717, size: 64, offset: 320)
!3856 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !3675, file: !3676, line: 484, baseType: !3245, size: 64, offset: 384)
!3857 = !DIDerivedType(tag: DW_TAG_member, name: "static_chain_decl", scope: !3675, file: !3676, line: 488, baseType: !3245, size: 64, offset: 448)
!3858 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal_goto_save_area", scope: !3675, file: !3676, line: 493, baseType: !3245, size: 64, offset: 512)
!3859 = !DIDerivedType(tag: DW_TAG_member, name: "local_decls", scope: !3675, file: !3676, line: 496, baseType: !3245, size: 64, offset: 576)
!3860 = !DIDerivedType(tag: DW_TAG_member, name: "machine", scope: !3675, file: !3676, line: 501, baseType: !3861, size: 64, offset: 640)
!3861 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3862, size: 64)
!3862 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "machine_function", file: !329, line: 2355, size: 576, elements: !3863)
!3863 = !{!3864, !3867, !3868, !3869, !3870, !3872, !3873, !3878, !3879, !3880, !3881, !3882, !3883}
!3864 = !DIDerivedType(tag: DW_TAG_member, name: "stack_locals", scope: !3862, file: !329, line: 2356, baseType: !3865, size: 64)
!3865 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3866, size: 64)
!3866 = !DICompositeType(tag: DW_TAG_structure_type, name: "stack_local_entry", file: !329, line: 2356, flags: DIFlagFwdDecl)
!3867 = !DIDerivedType(tag: DW_TAG_member, name: "some_ld_name", scope: !3862, file: !329, line: 2357, baseType: !3444, size: 64, offset: 64)
!3868 = !DIDerivedType(tag: DW_TAG_member, name: "varargs_gpr_size", scope: !3862, file: !329, line: 2358, baseType: !3341, size: 32, offset: 128)
!3869 = !DIDerivedType(tag: DW_TAG_member, name: "varargs_fpr_size", scope: !3862, file: !329, line: 2359, baseType: !3341, size: 32, offset: 160)
!3870 = !DIDerivedType(tag: DW_TAG_member, name: "optimize_mode_switching", scope: !3862, file: !329, line: 2360, baseType: !3871, size: 128, offset: 192)
!3871 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3341, size: 128, elements: !3513)
!3872 = !DIDerivedType(tag: DW_TAG_member, name: "use_fast_prologue_epilogue_nregs", scope: !3862, file: !329, line: 2364, baseType: !3341, size: 32, offset: 320)
!3873 = !DIDerivedType(tag: DW_TAG_member, name: "cfa", scope: !3862, file: !329, line: 2367, baseType: !3874, size: 128, offset: 384)
!3874 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "machine_cfa_state", file: !329, line: 2349, size: 128, elements: !3875)
!3875 = !{!3876, !3877}
!3876 = !DIDerivedType(tag: DW_TAG_member, name: "reg", scope: !3874, file: !329, line: 2351, baseType: !3418, size: 64)
!3877 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !3874, file: !329, line: 2352, baseType: !3300, size: 64, offset: 64)
!3878 = !DIDerivedType(tag: DW_TAG_member, name: "call_abi", scope: !3862, file: !329, line: 2371, baseType: !328, size: 32, offset: 512)
!3879 = !DIDerivedType(tag: DW_TAG_member, name: "accesses_prev_frame", scope: !3862, file: !329, line: 2374, baseType: !7, size: 1, offset: 544, flags: DIFlagBitField, extraData: i64 544)
!3880 = !DIDerivedType(tag: DW_TAG_member, name: "needs_cld", scope: !3862, file: !329, line: 2377, baseType: !7, size: 1, offset: 545, flags: DIFlagBitField, extraData: i64 544)
!3881 = !DIDerivedType(tag: DW_TAG_member, name: "use_fast_prologue_epilogue", scope: !3862, file: !329, line: 2381, baseType: !7, size: 1, offset: 546, flags: DIFlagBitField, extraData: i64 544)
!3882 = !DIDerivedType(tag: DW_TAG_member, name: "tls_descriptor_call_expanded_p", scope: !3862, file: !329, line: 2392, baseType: !7, size: 1, offset: 547, flags: DIFlagBitField, extraData: i64 544)
!3883 = !DIDerivedType(tag: DW_TAG_member, name: "static_chain_on_stack", scope: !3862, file: !329, line: 2396, baseType: !7, size: 1, offset: 548, flags: DIFlagBitField, extraData: i64 544)
!3884 = !DIDerivedType(tag: DW_TAG_member, name: "language", scope: !3675, file: !3676, line: 504, baseType: !3885, size: 64, offset: 704)
!3885 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3886, size: 64)
!3886 = !DICompositeType(tag: DW_TAG_structure_type, name: "language_function", file: !3676, line: 504, flags: DIFlagFwdDecl)
!3887 = !DIDerivedType(tag: DW_TAG_member, name: "used_types_hash", scope: !3675, file: !3676, line: 507, baseType: !3717, size: 64, offset: 768)
!3888 = !DIDerivedType(tag: DW_TAG_member, name: "last_stmt_uid", scope: !3675, file: !3676, line: 510, baseType: !3341, size: 32, offset: 832)
!3889 = !DIDerivedType(tag: DW_TAG_member, name: "funcdef_no", scope: !3675, file: !3676, line: 513, baseType: !3341, size: 32, offset: 864)
!3890 = !DIDerivedType(tag: DW_TAG_member, name: "function_start_locus", scope: !3675, file: !3676, line: 516, baseType: !3238, size: 32, offset: 896)
!3891 = !DIDerivedType(tag: DW_TAG_member, name: "function_end_locus", scope: !3675, file: !3676, line: 519, baseType: !3238, size: 32, offset: 928)
!3892 = !DIDerivedType(tag: DW_TAG_member, name: "curr_properties", scope: !3675, file: !3676, line: 522, baseType: !7, size: 32, offset: 960)
!3893 = !DIDerivedType(tag: DW_TAG_member, name: "last_verified", scope: !3675, file: !3676, line: 523, baseType: !7, size: 32, offset: 992)
!3894 = !DIDerivedType(tag: DW_TAG_member, name: "cannot_be_copied_reason", scope: !3675, file: !3676, line: 528, baseType: !3444, size: 64, offset: 1024)
!3895 = !DIDerivedType(tag: DW_TAG_member, name: "va_list_gpr_size", scope: !3675, file: !3676, line: 535, baseType: !7, size: 8, offset: 1088, flags: DIFlagBitField, extraData: i64 1088)
!3896 = !DIDerivedType(tag: DW_TAG_member, name: "va_list_fpr_size", scope: !3675, file: !3676, line: 539, baseType: !7, size: 8, offset: 1096, flags: DIFlagBitField, extraData: i64 1088)
!3897 = !DIDerivedType(tag: DW_TAG_member, name: "function_frequency", scope: !3675, file: !3676, line: 543, baseType: !7, size: 2, offset: 1104, flags: DIFlagBitField, extraData: i64 1088)
!3898 = !DIDerivedType(tag: DW_TAG_member, name: "calls_setjmp", scope: !3675, file: !3676, line: 546, baseType: !7, size: 1, offset: 1106, flags: DIFlagBitField, extraData: i64 1088)
!3899 = !DIDerivedType(tag: DW_TAG_member, name: "calls_alloca", scope: !3675, file: !3676, line: 550, baseType: !7, size: 1, offset: 1107, flags: DIFlagBitField, extraData: i64 1088)
!3900 = !DIDerivedType(tag: DW_TAG_member, name: "has_nonlocal_label", scope: !3675, file: !3676, line: 554, baseType: !7, size: 1, offset: 1108, flags: DIFlagBitField, extraData: i64 1088)
!3901 = !DIDerivedType(tag: DW_TAG_member, name: "cannot_be_copied_set", scope: !3675, file: !3676, line: 559, baseType: !7, size: 1, offset: 1109, flags: DIFlagBitField, extraData: i64 1088)
!3902 = !DIDerivedType(tag: DW_TAG_member, name: "stdarg", scope: !3675, file: !3676, line: 562, baseType: !7, size: 1, offset: 1110, flags: DIFlagBitField, extraData: i64 1088)
!3903 = !DIDerivedType(tag: DW_TAG_member, name: "dont_save_pending_sizes_p", scope: !3675, file: !3676, line: 571, baseType: !7, size: 1, offset: 1111, flags: DIFlagBitField, extraData: i64 1088)
!3904 = !DIDerivedType(tag: DW_TAG_member, name: "after_inlining", scope: !3675, file: !3676, line: 573, baseType: !7, size: 1, offset: 1112, flags: DIFlagBitField, extraData: i64 1088)
!3905 = !DIDerivedType(tag: DW_TAG_member, name: "always_inline_functions_inlined", scope: !3675, file: !3676, line: 574, baseType: !7, size: 1, offset: 1113, flags: DIFlagBitField, extraData: i64 1088)
!3906 = !DIDerivedType(tag: DW_TAG_member, name: "returns_struct", scope: !3675, file: !3676, line: 581, baseType: !7, size: 1, offset: 1114, flags: DIFlagBitField, extraData: i64 1088)
!3907 = !DIDerivedType(tag: DW_TAG_member, name: "returns_pcc_struct", scope: !3675, file: !3676, line: 585, baseType: !7, size: 1, offset: 1115, flags: DIFlagBitField, extraData: i64 1088)
!3908 = !DIDerivedType(tag: DW_TAG_member, name: "after_tree_profile", scope: !3675, file: !3676, line: 588, baseType: !7, size: 1, offset: 1116, flags: DIFlagBitField, extraData: i64 1088)
!3909 = !DIDerivedType(tag: DW_TAG_member, name: "has_local_explicit_reg_vars", scope: !3675, file: !3676, line: 592, baseType: !7, size: 1, offset: 1117, flags: DIFlagBitField, extraData: i64 1088)
!3910 = !DIDerivedType(tag: DW_TAG_member, name: "is_thunk", scope: !3675, file: !3676, line: 598, baseType: !7, size: 1, offset: 1118, flags: DIFlagBitField, extraData: i64 1088)
!3911 = !DIDerivedType(tag: DW_TAG_member, name: "personality", scope: !3670, file: !334, line: 3254, baseType: !3245, size: 64, offset: 1536)
!3912 = !DIDerivedType(tag: DW_TAG_member, name: "function_specific_target", scope: !3670, file: !334, line: 3257, baseType: !3245, size: 64, offset: 1600)
!3913 = !DIDerivedType(tag: DW_TAG_member, name: "function_specific_optimization", scope: !3670, file: !334, line: 3258, baseType: !3245, size: 64, offset: 1664)
!3914 = !DIDerivedType(tag: DW_TAG_member, name: "function_code", scope: !3670, file: !334, line: 3264, baseType: !7, size: 11, offset: 1728, flags: DIFlagBitField, extraData: i64 1728)
!3915 = !DIDerivedType(tag: DW_TAG_member, name: "built_in_class", scope: !3670, file: !334, line: 3265, baseType: !7, size: 2, offset: 1739, flags: DIFlagBitField, extraData: i64 1728)
!3916 = !DIDerivedType(tag: DW_TAG_member, name: "static_ctor_flag", scope: !3670, file: !334, line: 3267, baseType: !7, size: 1, offset: 1741, flags: DIFlagBitField, extraData: i64 1728)
!3917 = !DIDerivedType(tag: DW_TAG_member, name: "static_dtor_flag", scope: !3670, file: !334, line: 3268, baseType: !7, size: 1, offset: 1742, flags: DIFlagBitField, extraData: i64 1728)
!3918 = !DIDerivedType(tag: DW_TAG_member, name: "uninlinable", scope: !3670, file: !334, line: 3269, baseType: !7, size: 1, offset: 1743, flags: DIFlagBitField, extraData: i64 1728)
!3919 = !DIDerivedType(tag: DW_TAG_member, name: "possibly_inlined", scope: !3670, file: !334, line: 3271, baseType: !7, size: 1, offset: 1744, flags: DIFlagBitField, extraData: i64 1728)
!3920 = !DIDerivedType(tag: DW_TAG_member, name: "novops_flag", scope: !3670, file: !334, line: 3272, baseType: !7, size: 1, offset: 1745, flags: DIFlagBitField, extraData: i64 1728)
!3921 = !DIDerivedType(tag: DW_TAG_member, name: "returns_twice_flag", scope: !3670, file: !334, line: 3273, baseType: !7, size: 1, offset: 1746, flags: DIFlagBitField, extraData: i64 1728)
!3922 = !DIDerivedType(tag: DW_TAG_member, name: "malloc_flag", scope: !3670, file: !334, line: 3274, baseType: !7, size: 1, offset: 1747, flags: DIFlagBitField, extraData: i64 1728)
!3923 = !DIDerivedType(tag: DW_TAG_member, name: "operator_new_flag", scope: !3670, file: !334, line: 3275, baseType: !7, size: 1, offset: 1748, flags: DIFlagBitField, extraData: i64 1728)
!3924 = !DIDerivedType(tag: DW_TAG_member, name: "declared_inline_flag", scope: !3670, file: !334, line: 3276, baseType: !7, size: 1, offset: 1749, flags: DIFlagBitField, extraData: i64 1728)
!3925 = !DIDerivedType(tag: DW_TAG_member, name: "regdecl_flag", scope: !3670, file: !334, line: 3277, baseType: !7, size: 1, offset: 1750, flags: DIFlagBitField, extraData: i64 1728)
!3926 = !DIDerivedType(tag: DW_TAG_member, name: "no_inline_warning_flag", scope: !3670, file: !334, line: 3279, baseType: !7, size: 1, offset: 1751, flags: DIFlagBitField, extraData: i64 1728)
!3927 = !DIDerivedType(tag: DW_TAG_member, name: "no_instrument_function_entry_exit", scope: !3670, file: !334, line: 3280, baseType: !7, size: 1, offset: 1752, flags: DIFlagBitField, extraData: i64 1728)
!3928 = !DIDerivedType(tag: DW_TAG_member, name: "no_limit_stack", scope: !3670, file: !334, line: 3281, baseType: !7, size: 1, offset: 1753, flags: DIFlagBitField, extraData: i64 1728)
!3929 = !DIDerivedType(tag: DW_TAG_member, name: "disregard_inline_limits", scope: !3670, file: !334, line: 3282, baseType: !7, size: 1, offset: 1754, flags: DIFlagBitField, extraData: i64 1728)
!3930 = !DIDerivedType(tag: DW_TAG_member, name: "pure_flag", scope: !3670, file: !334, line: 3283, baseType: !7, size: 1, offset: 1755, flags: DIFlagBitField, extraData: i64 1728)
!3931 = !DIDerivedType(tag: DW_TAG_member, name: "looping_const_or_pure_flag", scope: !3670, file: !334, line: 3284, baseType: !7, size: 1, offset: 1756, flags: DIFlagBitField, extraData: i64 1728)
!3932 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !3247, file: !334, line: 3394, baseType: !3933, size: 1344)
!3933 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_type", file: !334, line: 2279, size: 1344, elements: !3934)
!3934 = !{!3935, !3936, !3937, !3938, !3939, !3940, !3941, !3942, !3943, !3944, !3945, !3946, !3947, !3948, !3949, !3950, !3951, !3952, !3953, !3954, !3955, !3956, !3957, !3958, !3959, !3960, !3968, !3969, !3970, !3971, !3972, !3973, !3974, !3975, !3976}
!3935 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3933, file: !334, line: 2280, baseType: !3283, size: 192)
!3936 = !DIDerivedType(tag: DW_TAG_member, name: "values", scope: !3933, file: !334, line: 2281, baseType: !3245, size: 64, offset: 192)
!3937 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !3933, file: !334, line: 2282, baseType: !3245, size: 64, offset: 256)
!3938 = !DIDerivedType(tag: DW_TAG_member, name: "size_unit", scope: !3933, file: !334, line: 2283, baseType: !3245, size: 64, offset: 320)
!3939 = !DIDerivedType(tag: DW_TAG_member, name: "attributes", scope: !3933, file: !334, line: 2284, baseType: !3245, size: 64, offset: 384)
!3940 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !3933, file: !334, line: 2285, baseType: !7, size: 32, offset: 448)
!3941 = !DIDerivedType(tag: DW_TAG_member, name: "precision", scope: !3933, file: !334, line: 2287, baseType: !7, size: 10, offset: 480, flags: DIFlagBitField, extraData: i64 480)
!3942 = !DIDerivedType(tag: DW_TAG_member, name: "no_force_blk_flag", scope: !3933, file: !334, line: 2288, baseType: !7, size: 1, offset: 490, flags: DIFlagBitField, extraData: i64 480)
!3943 = !DIDerivedType(tag: DW_TAG_member, name: "needs_constructing_flag", scope: !3933, file: !334, line: 2289, baseType: !7, size: 1, offset: 491, flags: DIFlagBitField, extraData: i64 480)
!3944 = !DIDerivedType(tag: DW_TAG_member, name: "transparent_aggr_flag", scope: !3933, file: !334, line: 2290, baseType: !7, size: 1, offset: 492, flags: DIFlagBitField, extraData: i64 480)
!3945 = !DIDerivedType(tag: DW_TAG_member, name: "restrict_flag", scope: !3933, file: !334, line: 2291, baseType: !7, size: 1, offset: 493, flags: DIFlagBitField, extraData: i64 480)
!3946 = !DIDerivedType(tag: DW_TAG_member, name: "contains_placeholder_bits", scope: !3933, file: !334, line: 2292, baseType: !7, size: 2, offset: 494, flags: DIFlagBitField, extraData: i64 480)
!3947 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !3933, file: !334, line: 2294, baseType: !7, size: 8, offset: 496, flags: DIFlagBitField, extraData: i64 480)
!3948 = !DIDerivedType(tag: DW_TAG_member, name: "string_flag", scope: !3933, file: !334, line: 2296, baseType: !7, size: 1, offset: 504, flags: DIFlagBitField, extraData: i64 480)
!3949 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !3933, file: !334, line: 2297, baseType: !7, size: 1, offset: 505, flags: DIFlagBitField, extraData: i64 480)
!3950 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !3933, file: !334, line: 2298, baseType: !7, size: 1, offset: 506, flags: DIFlagBitField, extraData: i64 480)
!3951 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !3933, file: !334, line: 2299, baseType: !7, size: 1, offset: 507, flags: DIFlagBitField, extraData: i64 480)
!3952 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !3933, file: !334, line: 2300, baseType: !7, size: 1, offset: 508, flags: DIFlagBitField, extraData: i64 480)
!3953 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !3933, file: !334, line: 2301, baseType: !7, size: 1, offset: 509, flags: DIFlagBitField, extraData: i64 480)
!3954 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !3933, file: !334, line: 2302, baseType: !7, size: 1, offset: 510, flags: DIFlagBitField, extraData: i64 480)
!3955 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !3933, file: !334, line: 2303, baseType: !7, size: 1, offset: 511, flags: DIFlagBitField, extraData: i64 480)
!3956 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !3933, file: !334, line: 2305, baseType: !7, size: 32, offset: 512)
!3957 = !DIDerivedType(tag: DW_TAG_member, name: "alias_set", scope: !3933, file: !334, line: 2306, baseType: !3543, size: 32, offset: 544)
!3958 = !DIDerivedType(tag: DW_TAG_member, name: "pointer_to", scope: !3933, file: !334, line: 2307, baseType: !3245, size: 64, offset: 576)
!3959 = !DIDerivedType(tag: DW_TAG_member, name: "reference_to", scope: !3933, file: !334, line: 2308, baseType: !3245, size: 64, offset: 640)
!3960 = !DIDerivedType(tag: DW_TAG_member, name: "symtab", scope: !3933, file: !334, line: 2314, baseType: !3961, size: 64, offset: 704)
!3961 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "tree_type_symtab", file: !334, line: 2309, size: 64, elements: !3962)
!3962 = !{!3963, !3964, !3965}
!3963 = !DIDerivedType(tag: DW_TAG_member, name: "address", scope: !3961, file: !334, line: 2310, baseType: !3341, size: 32)
!3964 = !DIDerivedType(tag: DW_TAG_member, name: "pointer", scope: !3961, file: !334, line: 2311, baseType: !3444, size: 64)
!3965 = !DIDerivedType(tag: DW_TAG_member, name: "die", scope: !3961, file: !334, line: 2312, baseType: !3966, size: 64)
!3966 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3967, size: 64)
!3967 = !DICompositeType(tag: DW_TAG_structure_type, name: "die_struct", file: !334, line: 2277, flags: DIFlagFwdDecl)
!3968 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !3933, file: !334, line: 2315, baseType: !3245, size: 64, offset: 768)
!3969 = !DIDerivedType(tag: DW_TAG_member, name: "minval", scope: !3933, file: !334, line: 2316, baseType: !3245, size: 64, offset: 832)
!3970 = !DIDerivedType(tag: DW_TAG_member, name: "maxval", scope: !3933, file: !334, line: 2317, baseType: !3245, size: 64, offset: 896)
!3971 = !DIDerivedType(tag: DW_TAG_member, name: "next_variant", scope: !3933, file: !334, line: 2318, baseType: !3245, size: 64, offset: 960)
!3972 = !DIDerivedType(tag: DW_TAG_member, name: "main_variant", scope: !3933, file: !334, line: 2319, baseType: !3245, size: 64, offset: 1024)
!3973 = !DIDerivedType(tag: DW_TAG_member, name: "binfo", scope: !3933, file: !334, line: 2320, baseType: !3245, size: 64, offset: 1088)
!3974 = !DIDerivedType(tag: DW_TAG_member, name: "context", scope: !3933, file: !334, line: 2321, baseType: !3245, size: 64, offset: 1152)
!3975 = !DIDerivedType(tag: DW_TAG_member, name: "canonical", scope: !3933, file: !334, line: 2322, baseType: !3245, size: 64, offset: 1216)
!3976 = !DIDerivedType(tag: DW_TAG_member, name: "lang_specific", scope: !3933, file: !334, line: 2324, baseType: !3977, size: 64, offset: 1280)
!3977 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3978, size: 64)
!3978 = !DICompositeType(tag: DW_TAG_structure_type, name: "lang_type", file: !334, line: 2324, flags: DIFlagFwdDecl)
!3979 = !DIDerivedType(tag: DW_TAG_member, name: "list", scope: !3247, file: !334, line: 3395, baseType: !3980, size: 320)
!3980 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_list", file: !334, line: 1469, size: 320, elements: !3981)
!3981 = !{!3982, !3983, !3984}
!3982 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3980, file: !334, line: 1470, baseType: !3283, size: 192)
!3983 = !DIDerivedType(tag: DW_TAG_member, name: "purpose", scope: !3980, file: !334, line: 1471, baseType: !3245, size: 64, offset: 192)
!3984 = !DIDerivedType(tag: DW_TAG_member, name: "value", scope: !3980, file: !334, line: 1472, baseType: !3245, size: 64, offset: 256)
!3985 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !3247, file: !334, line: 3396, baseType: !3986, size: 320)
!3986 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_vec", file: !334, line: 1482, size: 320, elements: !3987)
!3987 = !{!3988, !3989, !3990}
!3988 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3986, file: !334, line: 1483, baseType: !3283, size: 192)
!3989 = !DIDerivedType(tag: DW_TAG_member, name: "length", scope: !3986, file: !334, line: 1484, baseType: !3341, size: 32, offset: 192)
!3990 = !DIDerivedType(tag: DW_TAG_member, name: "a", scope: !3986, file: !334, line: 1485, baseType: !3793, size: 64, offset: 256)
!3991 = !DIDerivedType(tag: DW_TAG_member, name: "exp", scope: !3247, file: !334, line: 3397, baseType: !3992, size: 384)
!3992 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_exp", file: !334, line: 1829, size: 384, elements: !3993)
!3993 = !{!3994, !3995, !3996, !3997}
!3994 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3992, file: !334, line: 1830, baseType: !3283, size: 192)
!3995 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !3992, file: !334, line: 1831, baseType: !3238, size: 32, offset: 192)
!3996 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !3992, file: !334, line: 1832, baseType: !3245, size: 64, offset: 256)
!3997 = !DIDerivedType(tag: DW_TAG_member, name: "operands", scope: !3992, file: !334, line: 1835, baseType: !3793, size: 64, offset: 320)
!3998 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_name", scope: !3247, file: !334, line: 3398, baseType: !3999, size: 704)
!3999 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_ssa_name", file: !334, line: 1898, size: 704, elements: !4000)
!4000 = !{!4001, !4002, !4003, !4004, !4005, !4010}
!4001 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3999, file: !334, line: 1899, baseType: !3283, size: 192)
!4002 = !DIDerivedType(tag: DW_TAG_member, name: "var", scope: !3999, file: !334, line: 1902, baseType: !3245, size: 64, offset: 192)
!4003 = !DIDerivedType(tag: DW_TAG_member, name: "def_stmt", scope: !3999, file: !334, line: 1905, baseType: !3220, size: 64, offset: 256)
!4004 = !DIDerivedType(tag: DW_TAG_member, name: "version", scope: !3999, file: !334, line: 1908, baseType: !7, size: 32, offset: 320)
!4005 = !DIDerivedType(tag: DW_TAG_member, name: "ptr_info", scope: !3999, file: !334, line: 1911, baseType: !4006, size: 64, offset: 384)
!4006 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4007, size: 64)
!4007 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ptr_info_def", file: !3626, line: 117, size: 128, elements: !4008)
!4008 = !{!4009}
!4009 = !DIDerivedType(tag: DW_TAG_member, name: "pt", scope: !4007, file: !3626, line: 120, baseType: !3796, size: 128)
!4010 = !DIDerivedType(tag: DW_TAG_member, name: "imm_uses", scope: !3999, file: !334, line: 1914, baseType: !3841, size: 256, offset: 448)
!4011 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !3247, file: !334, line: 3399, baseType: !4012, size: 704)
!4012 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_block", file: !334, line: 2008, size: 704, elements: !4013)
!4013 = !{!4014, !4015, !4016, !4017, !4018, !4019, !4020, !4021, !4022, !4023, !4024}
!4014 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !4012, file: !334, line: 2009, baseType: !3283, size: 192)
!4015 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_flag", scope: !4012, file: !334, line: 2011, baseType: !7, size: 1, offset: 192, flags: DIFlagBitField, extraData: i64 192)
!4016 = !DIDerivedType(tag: DW_TAG_member, name: "block_num", scope: !4012, file: !334, line: 2012, baseType: !7, size: 31, offset: 193, flags: DIFlagBitField, extraData: i64 192)
!4017 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !4012, file: !334, line: 2014, baseType: !3238, size: 32, offset: 224)
!4018 = !DIDerivedType(tag: DW_TAG_member, name: "vars", scope: !4012, file: !334, line: 2016, baseType: !3245, size: 64, offset: 256)
!4019 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocalized_vars", scope: !4012, file: !334, line: 2017, baseType: !3782, size: 64, offset: 320)
!4020 = !DIDerivedType(tag: DW_TAG_member, name: "subblocks", scope: !4012, file: !334, line: 2019, baseType: !3245, size: 64, offset: 384)
!4021 = !DIDerivedType(tag: DW_TAG_member, name: "supercontext", scope: !4012, file: !334, line: 2020, baseType: !3245, size: 64, offset: 448)
!4022 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_origin", scope: !4012, file: !334, line: 2021, baseType: !3245, size: 64, offset: 512)
!4023 = !DIDerivedType(tag: DW_TAG_member, name: "fragment_origin", scope: !4012, file: !334, line: 2022, baseType: !3245, size: 64, offset: 576)
!4024 = !DIDerivedType(tag: DW_TAG_member, name: "fragment_chain", scope: !4012, file: !334, line: 2023, baseType: !3245, size: 64, offset: 640)
!4025 = !DIDerivedType(tag: DW_TAG_member, name: "binfo", scope: !3247, file: !334, line: 3400, baseType: !4026, size: 832)
!4026 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_binfo", file: !334, line: 2430, size: 832, elements: !4027)
!4027 = !{!4028, !4029, !4030, !4031, !4032, !4033, !4034, !4035, !4036, !4037}
!4028 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !4026, file: !334, line: 2431, baseType: !3283, size: 192)
!4029 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !4026, file: !334, line: 2433, baseType: !3245, size: 64, offset: 192)
!4030 = !DIDerivedType(tag: DW_TAG_member, name: "vtable", scope: !4026, file: !334, line: 2434, baseType: !3245, size: 64, offset: 256)
!4031 = !DIDerivedType(tag: DW_TAG_member, name: "virtuals", scope: !4026, file: !334, line: 2435, baseType: !3245, size: 64, offset: 320)
!4032 = !DIDerivedType(tag: DW_TAG_member, name: "vptr_field", scope: !4026, file: !334, line: 2436, baseType: !3245, size: 64, offset: 384)
!4033 = !DIDerivedType(tag: DW_TAG_member, name: "base_accesses", scope: !4026, file: !334, line: 2437, baseType: !3782, size: 64, offset: 448)
!4034 = !DIDerivedType(tag: DW_TAG_member, name: "inheritance", scope: !4026, file: !334, line: 2438, baseType: !3245, size: 64, offset: 512)
!4035 = !DIDerivedType(tag: DW_TAG_member, name: "vtt_subvtt", scope: !4026, file: !334, line: 2440, baseType: !3245, size: 64, offset: 576)
!4036 = !DIDerivedType(tag: DW_TAG_member, name: "vtt_vptr", scope: !4026, file: !334, line: 2441, baseType: !3245, size: 64, offset: 640)
!4037 = !DIDerivedType(tag: DW_TAG_member, name: "base_binfos", scope: !4026, file: !334, line: 2443, baseType: !4038, size: 128, offset: 704)
!4038 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_none", file: !334, line: 182, baseType: !4039)
!4039 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_none", file: !334, line: 182, size: 128, elements: !4040)
!4040 = !{!4041}
!4041 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !4039, file: !334, line: 182, baseType: !3787, size: 128)
!4042 = !DIDerivedType(tag: DW_TAG_member, name: "stmt_list", scope: !3247, file: !334, line: 3401, baseType: !4043, size: 320)
!4043 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_statement_list", file: !334, line: 3327, size: 320, elements: !4044)
!4044 = !{!4045, !4046, !4053}
!4045 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !4043, file: !334, line: 3329, baseType: !3283, size: 192)
!4046 = !DIDerivedType(tag: DW_TAG_member, name: "head", scope: !4043, file: !334, line: 3330, baseType: !4047, size: 64, offset: 192)
!4047 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4048, size: 64)
!4048 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_statement_list_node", file: !334, line: 3320, size: 192, elements: !4049)
!4049 = !{!4050, !4051, !4052}
!4050 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !4048, file: !334, line: 3322, baseType: !4047, size: 64)
!4051 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !4048, file: !334, line: 3323, baseType: !4047, size: 64, offset: 64)
!4052 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !4048, file: !334, line: 3324, baseType: !3245, size: 64, offset: 128)
!4053 = !DIDerivedType(tag: DW_TAG_member, name: "tail", scope: !4043, file: !334, line: 3331, baseType: !4047, size: 64, offset: 256)
!4054 = !DIDerivedType(tag: DW_TAG_member, name: "constructor", scope: !3247, file: !334, line: 3402, baseType: !4055, size: 256)
!4055 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_constructor", file: !334, line: 1540, size: 256, elements: !4056)
!4056 = !{!4057, !4058}
!4057 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !4055, file: !334, line: 1541, baseType: !3283, size: 192)
!4058 = !DIDerivedType(tag: DW_TAG_member, name: "elts", scope: !4055, file: !334, line: 1542, baseType: !4059, size: 64, offset: 192)
!4059 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4060, size: 64)
!4060 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_constructor_elt_gc", file: !334, line: 1538, baseType: !4061)
!4061 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_constructor_elt_gc", file: !334, line: 1538, size: 192, elements: !4062)
!4062 = !{!4063}
!4063 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !4061, file: !334, line: 1538, baseType: !4064, size: 192)
!4064 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_constructor_elt_base", file: !334, line: 1537, baseType: !4065)
!4065 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_constructor_elt_base", file: !334, line: 1537, size: 192, elements: !4066)
!4066 = !{!4067, !4068, !4069}
!4067 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !4065, file: !334, line: 1537, baseType: !7, size: 32)
!4068 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !4065, file: !334, line: 1537, baseType: !7, size: 32, offset: 32)
!4069 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !4065, file: !334, line: 1537, baseType: !4070, size: 128, offset: 64)
!4070 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4071, size: 128, elements: !3345)
!4071 = !DIDerivedType(tag: DW_TAG_typedef, name: "constructor_elt", file: !334, line: 1535, baseType: !4072)
!4072 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "constructor_elt_d", file: !334, line: 1532, size: 128, elements: !4073)
!4073 = !{!4074, !4075}
!4074 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !4072, file: !334, line: 1533, baseType: !3245, size: 64)
!4075 = !DIDerivedType(tag: DW_TAG_member, name: "value", scope: !4072, file: !334, line: 1534, baseType: !3245, size: 64, offset: 64)
!4076 = !DIDerivedType(tag: DW_TAG_member, name: "omp_clause", scope: !3247, file: !334, line: 3403, baseType: !4077, size: 512)
!4077 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_omp_clause", file: !334, line: 1938, size: 512, elements: !4078)
!4078 = !{!4079, !4080, !4081, !4082, !4088, !4089, !4090}
!4079 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !4077, file: !334, line: 1939, baseType: !3283, size: 192)
!4080 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !4077, file: !334, line: 1940, baseType: !3238, size: 32, offset: 192)
!4081 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !4077, file: !334, line: 1941, baseType: !333, size: 32, offset: 224)
!4082 = !DIDerivedType(tag: DW_TAG_member, name: "subcode", scope: !4077, file: !334, line: 1946, baseType: !4083, size: 32, offset: 256)
!4083 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "omp_clause_subcode", file: !334, line: 1942, size: 32, elements: !4084)
!4084 = !{!4085, !4086, !4087}
!4085 = !DIDerivedType(tag: DW_TAG_member, name: "default_kind", scope: !4083, file: !334, line: 1943, baseType: !352, size: 32)
!4086 = !DIDerivedType(tag: DW_TAG_member, name: "schedule_kind", scope: !4083, file: !334, line: 1944, baseType: !359, size: 32)
!4087 = !DIDerivedType(tag: DW_TAG_member, name: "reduction_code", scope: !4083, file: !334, line: 1945, baseType: !366, size: 32)
!4088 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reduction_init", scope: !4077, file: !334, line: 1950, baseType: !3210, size: 64, offset: 320)
!4089 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reduction_merge", scope: !4077, file: !334, line: 1951, baseType: !3210, size: 64, offset: 384)
!4090 = !DIDerivedType(tag: DW_TAG_member, name: "ops", scope: !4077, file: !334, line: 1953, baseType: !3793, size: 64, offset: 448)
!4091 = !DIDerivedType(tag: DW_TAG_member, name: "optimization", scope: !3247, file: !334, line: 3404, baseType: !4092, size: 1664)
!4092 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_optimization_option", file: !334, line: 3337, size: 1664, elements: !4093)
!4093 = !{!4094, !4095}
!4094 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !4092, file: !334, line: 3338, baseType: !3283, size: 192)
!4095 = !DIDerivedType(tag: DW_TAG_member, name: "opts", scope: !4092, file: !334, line: 3341, baseType: !4096, size: 1472, offset: 192)
!4096 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cl_optimization", file: !4097, line: 410, size: 1472, elements: !4098)
!4097 = !DIFile(filename: "./options.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!4098 = !{!4099, !4100, !4101, !4102, !4103, !4104, !4105, !4106, !4107, !4109, !4110, !4111, !4112, !4113, !4114, !4115, !4116, !4117, !4118, !4119, !4120, !4121, !4122, !4123, !4124, !4125, !4126, !4127, !4128, !4129, !4130, !4131, !4132, !4133, !4134, !4135, !4136, !4137, !4138, !4139, !4140, !4141, !4142, !4143, !4144, !4145, !4146, !4147, !4148, !4149, !4150, !4151, !4152, !4153, !4154, !4155, !4156, !4157, !4158, !4159, !4160, !4161, !4162, !4163, !4164, !4165, !4166, !4167, !4168, !4169, !4170, !4171, !4172, !4173, !4174, !4175, !4176, !4177, !4178, !4179, !4180, !4181, !4182, !4183, !4184, !4185, !4186, !4187, !4188, !4189, !4190, !4191, !4192, !4193, !4194, !4195, !4196, !4197, !4198, !4199, !4200, !4201, !4202, !4203, !4204, !4205, !4206, !4207, !4208, !4209, !4210, !4211, !4212, !4213, !4214, !4215, !4216, !4217, !4218, !4219, !4220, !4221, !4222, !4223, !4224, !4225, !4226, !4227, !4228, !4229, !4230, !4231, !4232, !4233, !4234, !4235, !4236, !4237, !4238, !4239, !4240, !4241, !4242, !4243, !4244, !4245, !4246, !4247, !4248, !4249, !4250, !4251, !4252, !4253, !4254, !4255, !4256, !4257, !4258, !4259, !4260, !4261, !4262}
!4099 = !DIDerivedType(tag: DW_TAG_member, name: "align_functions", scope: !4096, file: !4097, line: 412, baseType: !3341, size: 32)
!4100 = !DIDerivedType(tag: DW_TAG_member, name: "align_jumps", scope: !4096, file: !4097, line: 413, baseType: !3341, size: 32, offset: 32)
!4101 = !DIDerivedType(tag: DW_TAG_member, name: "align_labels", scope: !4096, file: !4097, line: 414, baseType: !3341, size: 32, offset: 64)
!4102 = !DIDerivedType(tag: DW_TAG_member, name: "align_loops", scope: !4096, file: !4097, line: 415, baseType: !3341, size: 32, offset: 96)
!4103 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_stalled_insns", scope: !4096, file: !4097, line: 416, baseType: !3341, size: 32, offset: 128)
!4104 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_stalled_insns_dep", scope: !4096, file: !4097, line: 417, baseType: !3341, size: 32, offset: 160)
!4105 = !DIDerivedType(tag: DW_TAG_member, name: "optimize", scope: !4096, file: !4097, line: 418, baseType: !3364, size: 8, offset: 192)
!4106 = !DIDerivedType(tag: DW_TAG_member, name: "optimize_size", scope: !4096, file: !4097, line: 419, baseType: !3364, size: 8, offset: 200)
!4107 = !DIDerivedType(tag: DW_TAG_member, name: "flag_argument_noalias", scope: !4096, file: !4097, line: 420, baseType: !4108, size: 8, offset: 208)
!4108 = !DIBasicType(name: "signed char", size: 8, encoding: DW_ATE_signed_char)
!4109 = !DIDerivedType(tag: DW_TAG_member, name: "flag_asynchronous_unwind_tables", scope: !4096, file: !4097, line: 421, baseType: !4108, size: 8, offset: 216)
!4110 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_on_count_reg", scope: !4096, file: !4097, line: 422, baseType: !4108, size: 8, offset: 224)
!4111 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_probabilities", scope: !4096, file: !4097, line: 423, baseType: !4108, size: 8, offset: 232)
!4112 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_target_load_optimize", scope: !4096, file: !4097, line: 424, baseType: !4108, size: 8, offset: 240)
!4113 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_target_load_optimize2", scope: !4096, file: !4097, line: 425, baseType: !4108, size: 8, offset: 248)
!4114 = !DIDerivedType(tag: DW_TAG_member, name: "flag_btr_bb_exclusive", scope: !4096, file: !4097, line: 426, baseType: !4108, size: 8, offset: 256)
!4115 = !DIDerivedType(tag: DW_TAG_member, name: "flag_caller_saves", scope: !4096, file: !4097, line: 427, baseType: !4108, size: 8, offset: 264)
!4116 = !DIDerivedType(tag: DW_TAG_member, name: "flag_no_common", scope: !4096, file: !4097, line: 428, baseType: !4108, size: 8, offset: 272)
!4117 = !DIDerivedType(tag: DW_TAG_member, name: "flag_conserve_stack", scope: !4096, file: !4097, line: 429, baseType: !4108, size: 8, offset: 280)
!4118 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cprop_registers", scope: !4096, file: !4097, line: 430, baseType: !4108, size: 8, offset: 288)
!4119 = !DIDerivedType(tag: DW_TAG_member, name: "flag_crossjumping", scope: !4096, file: !4097, line: 431, baseType: !4108, size: 8, offset: 296)
!4120 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cse_follow_jumps", scope: !4096, file: !4097, line: 432, baseType: !4108, size: 8, offset: 304)
!4121 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cx_fortran_rules", scope: !4096, file: !4097, line: 433, baseType: !4108, size: 8, offset: 312)
!4122 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cx_limited_range", scope: !4096, file: !4097, line: 434, baseType: !4108, size: 8, offset: 320)
!4123 = !DIDerivedType(tag: DW_TAG_member, name: "flag_data_sections", scope: !4096, file: !4097, line: 435, baseType: !4108, size: 8, offset: 328)
!4124 = !DIDerivedType(tag: DW_TAG_member, name: "flag_dce", scope: !4096, file: !4097, line: 436, baseType: !4108, size: 8, offset: 336)
!4125 = !DIDerivedType(tag: DW_TAG_member, name: "flag_defer_pop", scope: !4096, file: !4097, line: 437, baseType: !4108, size: 8, offset: 344)
!4126 = !DIDerivedType(tag: DW_TAG_member, name: "flag_delayed_branch", scope: !4096, file: !4097, line: 438, baseType: !4108, size: 8, offset: 352)
!4127 = !DIDerivedType(tag: DW_TAG_member, name: "flag_delete_null_pointer_checks", scope: !4096, file: !4097, line: 439, baseType: !4108, size: 8, offset: 360)
!4128 = !DIDerivedType(tag: DW_TAG_member, name: "flag_dse", scope: !4096, file: !4097, line: 440, baseType: !4108, size: 8, offset: 368)
!4129 = !DIDerivedType(tag: DW_TAG_member, name: "flag_early_inlining", scope: !4096, file: !4097, line: 441, baseType: !4108, size: 8, offset: 376)
!4130 = !DIDerivedType(tag: DW_TAG_member, name: "flag_exceptions", scope: !4096, file: !4097, line: 442, baseType: !4108, size: 8, offset: 384)
!4131 = !DIDerivedType(tag: DW_TAG_member, name: "flag_expensive_optimizations", scope: !4096, file: !4097, line: 443, baseType: !4108, size: 8, offset: 392)
!4132 = !DIDerivedType(tag: DW_TAG_member, name: "flag_finite_math_only", scope: !4096, file: !4097, line: 444, baseType: !4108, size: 8, offset: 400)
!4133 = !DIDerivedType(tag: DW_TAG_member, name: "flag_float_store", scope: !4096, file: !4097, line: 445, baseType: !4108, size: 8, offset: 408)
!4134 = !DIDerivedType(tag: DW_TAG_member, name: "flag_forward_propagate", scope: !4096, file: !4097, line: 446, baseType: !4108, size: 8, offset: 416)
!4135 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse", scope: !4096, file: !4097, line: 447, baseType: !4108, size: 8, offset: 424)
!4136 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_after_reload", scope: !4096, file: !4097, line: 448, baseType: !4108, size: 8, offset: 432)
!4137 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_las", scope: !4096, file: !4097, line: 449, baseType: !4108, size: 8, offset: 440)
!4138 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_lm", scope: !4096, file: !4097, line: 450, baseType: !4108, size: 8, offset: 448)
!4139 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_sm", scope: !4096, file: !4097, line: 451, baseType: !4108, size: 8, offset: 456)
!4140 = !DIDerivedType(tag: DW_TAG_member, name: "flag_graphite_identity", scope: !4096, file: !4097, line: 452, baseType: !4108, size: 8, offset: 464)
!4141 = !DIDerivedType(tag: DW_TAG_member, name: "flag_guess_branch_prob", scope: !4096, file: !4097, line: 453, baseType: !4108, size: 8, offset: 472)
!4142 = !DIDerivedType(tag: DW_TAG_member, name: "flag_if_conversion", scope: !4096, file: !4097, line: 454, baseType: !4108, size: 8, offset: 480)
!4143 = !DIDerivedType(tag: DW_TAG_member, name: "flag_if_conversion2", scope: !4096, file: !4097, line: 455, baseType: !4108, size: 8, offset: 488)
!4144 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_functions", scope: !4096, file: !4097, line: 456, baseType: !4108, size: 8, offset: 496)
!4145 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_functions_called_once", scope: !4096, file: !4097, line: 457, baseType: !4108, size: 8, offset: 504)
!4146 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_small_functions", scope: !4096, file: !4097, line: 458, baseType: !4108, size: 8, offset: 512)
!4147 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_cp", scope: !4096, file: !4097, line: 459, baseType: !4108, size: 8, offset: 520)
!4148 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_cp_clone", scope: !4096, file: !4097, line: 460, baseType: !4108, size: 8, offset: 528)
!4149 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_matrix_reorg", scope: !4096, file: !4097, line: 461, baseType: !4108, size: 8, offset: 536)
!4150 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_pta", scope: !4096, file: !4097, line: 462, baseType: !4108, size: 8, offset: 544)
!4151 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_pure_const", scope: !4096, file: !4097, line: 463, baseType: !4108, size: 8, offset: 552)
!4152 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_reference", scope: !4096, file: !4097, line: 464, baseType: !4108, size: 8, offset: 560)
!4153 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_sra", scope: !4096, file: !4097, line: 465, baseType: !4108, size: 8, offset: 568)
!4154 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_type_escape", scope: !4096, file: !4097, line: 466, baseType: !4108, size: 8, offset: 576)
!4155 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ivopts", scope: !4096, file: !4097, line: 467, baseType: !4108, size: 8, offset: 584)
!4156 = !DIDerivedType(tag: DW_TAG_member, name: "flag_jump_tables", scope: !4096, file: !4097, line: 468, baseType: !4108, size: 8, offset: 592)
!4157 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_block", scope: !4096, file: !4097, line: 469, baseType: !4108, size: 8, offset: 600)
!4158 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_interchange", scope: !4096, file: !4097, line: 470, baseType: !4108, size: 8, offset: 608)
!4159 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_parallelize_all", scope: !4096, file: !4097, line: 471, baseType: !4108, size: 8, offset: 616)
!4160 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_strip_mine", scope: !4096, file: !4097, line: 472, baseType: !4108, size: 8, offset: 624)
!4161 = !DIDerivedType(tag: DW_TAG_member, name: "flag_lto_report", scope: !4096, file: !4097, line: 473, baseType: !4108, size: 8, offset: 632)
!4162 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ltrans", scope: !4096, file: !4097, line: 474, baseType: !4108, size: 8, offset: 640)
!4163 = !DIDerivedType(tag: DW_TAG_member, name: "flag_errno_math", scope: !4096, file: !4097, line: 475, baseType: !4108, size: 8, offset: 648)
!4164 = !DIDerivedType(tag: DW_TAG_member, name: "flag_merge_constants", scope: !4096, file: !4097, line: 476, baseType: !4108, size: 8, offset: 656)
!4165 = !DIDerivedType(tag: DW_TAG_member, name: "flag_modulo_sched", scope: !4096, file: !4097, line: 477, baseType: !4108, size: 8, offset: 664)
!4166 = !DIDerivedType(tag: DW_TAG_member, name: "flag_move_loop_invariants", scope: !4096, file: !4097, line: 478, baseType: !4108, size: 8, offset: 672)
!4167 = !DIDerivedType(tag: DW_TAG_member, name: "flag_non_call_exceptions", scope: !4096, file: !4097, line: 479, baseType: !4108, size: 8, offset: 680)
!4168 = !DIDerivedType(tag: DW_TAG_member, name: "flag_omit_frame_pointer", scope: !4096, file: !4097, line: 480, baseType: !4108, size: 8, offset: 688)
!4169 = !DIDerivedType(tag: DW_TAG_member, name: "flag_regmove", scope: !4096, file: !4097, line: 481, baseType: !4108, size: 8, offset: 696)
!4170 = !DIDerivedType(tag: DW_TAG_member, name: "flag_optimize_sibling_calls", scope: !4096, file: !4097, line: 482, baseType: !4108, size: 8, offset: 704)
!4171 = !DIDerivedType(tag: DW_TAG_member, name: "flag_pack_struct", scope: !4096, file: !4097, line: 483, baseType: !4108, size: 8, offset: 712)
!4172 = !DIDerivedType(tag: DW_TAG_member, name: "flag_peel_loops", scope: !4096, file: !4097, line: 484, baseType: !4108, size: 8, offset: 720)
!4173 = !DIDerivedType(tag: DW_TAG_member, name: "flag_no_peephole", scope: !4096, file: !4097, line: 485, baseType: !4108, size: 8, offset: 728)
!4174 = !DIDerivedType(tag: DW_TAG_member, name: "flag_peephole2", scope: !4096, file: !4097, line: 486, baseType: !4108, size: 8, offset: 736)
!4175 = !DIDerivedType(tag: DW_TAG_member, name: "flag_predictive_commoning", scope: !4096, file: !4097, line: 487, baseType: !4108, size: 8, offset: 744)
!4176 = !DIDerivedType(tag: DW_TAG_member, name: "flag_prefetch_loop_arrays", scope: !4096, file: !4097, line: 488, baseType: !4108, size: 8, offset: 752)
!4177 = !DIDerivedType(tag: DW_TAG_member, name: "flag_pcc_struct_return", scope: !4096, file: !4097, line: 489, baseType: !4108, size: 8, offset: 760)
!4178 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rename_registers", scope: !4096, file: !4097, line: 490, baseType: !4108, size: 8, offset: 768)
!4179 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_blocks", scope: !4096, file: !4097, line: 491, baseType: !4108, size: 8, offset: 776)
!4180 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_blocks_and_partition", scope: !4096, file: !4097, line: 492, baseType: !4108, size: 8, offset: 784)
!4181 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_functions", scope: !4096, file: !4097, line: 493, baseType: !4108, size: 8, offset: 792)
!4182 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rerun_cse_after_loop", scope: !4096, file: !4097, line: 494, baseType: !4108, size: 8, offset: 800)
!4183 = !DIDerivedType(tag: DW_TAG_member, name: "flag_resched_modulo_sched", scope: !4096, file: !4097, line: 495, baseType: !4108, size: 8, offset: 808)
!4184 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rounding_math", scope: !4096, file: !4097, line: 496, baseType: !4108, size: 8, offset: 816)
!4185 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_critical_path_heuristic", scope: !4096, file: !4097, line: 497, baseType: !4108, size: 8, offset: 824)
!4186 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_dep_count_heuristic", scope: !4096, file: !4097, line: 498, baseType: !4108, size: 8, offset: 832)
!4187 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_group_heuristic", scope: !4096, file: !4097, line: 499, baseType: !4108, size: 8, offset: 840)
!4188 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_interblock", scope: !4096, file: !4097, line: 500, baseType: !4108, size: 8, offset: 848)
!4189 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_last_insn_heuristic", scope: !4096, file: !4097, line: 501, baseType: !4108, size: 8, offset: 856)
!4190 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_pressure", scope: !4096, file: !4097, line: 502, baseType: !4108, size: 8, offset: 864)
!4191 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_rank_heuristic", scope: !4096, file: !4097, line: 503, baseType: !4108, size: 8, offset: 872)
!4192 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative", scope: !4096, file: !4097, line: 504, baseType: !4108, size: 8, offset: 880)
!4193 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_spec_insn_heuristic", scope: !4096, file: !4097, line: 505, baseType: !4108, size: 8, offset: 888)
!4194 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative_load", scope: !4096, file: !4097, line: 506, baseType: !4108, size: 8, offset: 896)
!4195 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative_load_dangerous", scope: !4096, file: !4097, line: 507, baseType: !4108, size: 8, offset: 904)
!4196 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched2_use_superblocks", scope: !4096, file: !4097, line: 508, baseType: !4108, size: 8, offset: 912)
!4197 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_insns", scope: !4096, file: !4097, line: 509, baseType: !4108, size: 8, offset: 920)
!4198 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_insns_after_reload", scope: !4096, file: !4097, line: 510, baseType: !4108, size: 8, offset: 928)
!4199 = !DIDerivedType(tag: DW_TAG_member, name: "flag_section_anchors", scope: !4096, file: !4097, line: 511, baseType: !4108, size: 8, offset: 936)
!4200 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_pipelining", scope: !4096, file: !4097, line: 512, baseType: !4108, size: 8, offset: 944)
!4201 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_pipelining_outer_loops", scope: !4096, file: !4097, line: 513, baseType: !4108, size: 8, offset: 952)
!4202 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_reschedule_pipelined", scope: !4096, file: !4097, line: 514, baseType: !4108, size: 8, offset: 960)
!4203 = !DIDerivedType(tag: DW_TAG_member, name: "flag_selective_scheduling", scope: !4096, file: !4097, line: 515, baseType: !4108, size: 8, offset: 968)
!4204 = !DIDerivedType(tag: DW_TAG_member, name: "flag_selective_scheduling2", scope: !4096, file: !4097, line: 516, baseType: !4108, size: 8, offset: 976)
!4205 = !DIDerivedType(tag: DW_TAG_member, name: "flag_signaling_nans", scope: !4096, file: !4097, line: 517, baseType: !4108, size: 8, offset: 984)
!4206 = !DIDerivedType(tag: DW_TAG_member, name: "flag_signed_zeros", scope: !4096, file: !4097, line: 518, baseType: !4108, size: 8, offset: 992)
!4207 = !DIDerivedType(tag: DW_TAG_member, name: "flag_single_precision_constant", scope: !4096, file: !4097, line: 519, baseType: !4108, size: 8, offset: 1000)
!4208 = !DIDerivedType(tag: DW_TAG_member, name: "flag_split_ivs_in_unroller", scope: !4096, file: !4097, line: 520, baseType: !4108, size: 8, offset: 1008)
!4209 = !DIDerivedType(tag: DW_TAG_member, name: "flag_split_wide_types", scope: !4096, file: !4097, line: 521, baseType: !4108, size: 8, offset: 1016)
!4210 = !DIDerivedType(tag: DW_TAG_member, name: "flag_strict_aliasing", scope: !4096, file: !4097, line: 522, baseType: !4108, size: 8, offset: 1024)
!4211 = !DIDerivedType(tag: DW_TAG_member, name: "flag_thread_jumps", scope: !4096, file: !4097, line: 523, baseType: !4108, size: 8, offset: 1032)
!4212 = !DIDerivedType(tag: DW_TAG_member, name: "flag_toplevel_reorder", scope: !4096, file: !4097, line: 524, baseType: !4108, size: 8, offset: 1040)
!4213 = !DIDerivedType(tag: DW_TAG_member, name: "flag_trapping_math", scope: !4096, file: !4097, line: 525, baseType: !4108, size: 8, offset: 1048)
!4214 = !DIDerivedType(tag: DW_TAG_member, name: "flag_trapv", scope: !4096, file: !4097, line: 526, baseType: !4108, size: 8, offset: 1056)
!4215 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_builtin_call_dce", scope: !4096, file: !4097, line: 527, baseType: !4108, size: 8, offset: 1064)
!4216 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ccp", scope: !4096, file: !4097, line: 528, baseType: !4108, size: 8, offset: 1072)
!4217 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ch", scope: !4096, file: !4097, line: 529, baseType: !4108, size: 8, offset: 1080)
!4218 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_copy_prop", scope: !4096, file: !4097, line: 530, baseType: !4108, size: 8, offset: 1088)
!4219 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_copyrename", scope: !4096, file: !4097, line: 531, baseType: !4108, size: 8, offset: 1096)
!4220 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_cselim", scope: !4096, file: !4097, line: 532, baseType: !4108, size: 8, offset: 1104)
!4221 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dce", scope: !4096, file: !4097, line: 533, baseType: !4108, size: 8, offset: 1112)
!4222 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dom", scope: !4096, file: !4097, line: 534, baseType: !4108, size: 8, offset: 1120)
!4223 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dse", scope: !4096, file: !4097, line: 535, baseType: !4108, size: 8, offset: 1128)
!4224 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_forwprop", scope: !4096, file: !4097, line: 536, baseType: !4108, size: 8, offset: 1136)
!4225 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_fre", scope: !4096, file: !4097, line: 537, baseType: !4108, size: 8, offset: 1144)
!4226 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_distribution", scope: !4096, file: !4097, line: 538, baseType: !4108, size: 8, offset: 1152)
!4227 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_im", scope: !4096, file: !4097, line: 539, baseType: !4108, size: 8, offset: 1160)
!4228 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_ivcanon", scope: !4096, file: !4097, line: 540, baseType: !4108, size: 8, offset: 1168)
!4229 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_linear", scope: !4096, file: !4097, line: 541, baseType: !4108, size: 8, offset: 1176)
!4230 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_optimize", scope: !4096, file: !4097, line: 542, baseType: !4108, size: 8, offset: 1184)
!4231 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_live_range_split", scope: !4096, file: !4097, line: 543, baseType: !4108, size: 8, offset: 1192)
!4232 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_phiprop", scope: !4096, file: !4097, line: 544, baseType: !4108, size: 8, offset: 1200)
!4233 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_pre", scope: !4096, file: !4097, line: 545, baseType: !4108, size: 8, offset: 1208)
!4234 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_pta", scope: !4096, file: !4097, line: 546, baseType: !4108, size: 8, offset: 1216)
!4235 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_reassoc", scope: !4096, file: !4097, line: 547, baseType: !4108, size: 8, offset: 1224)
!4236 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_scev_cprop", scope: !4096, file: !4097, line: 548, baseType: !4108, size: 8, offset: 1232)
!4237 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_sink", scope: !4096, file: !4097, line: 549, baseType: !4108, size: 8, offset: 1240)
!4238 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_slp_vectorize", scope: !4096, file: !4097, line: 550, baseType: !4108, size: 8, offset: 1248)
!4239 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_sra", scope: !4096, file: !4097, line: 551, baseType: !4108, size: 8, offset: 1256)
!4240 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_switch_conversion", scope: !4096, file: !4097, line: 552, baseType: !4108, size: 8, offset: 1264)
!4241 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ter", scope: !4096, file: !4097, line: 553, baseType: !4108, size: 8, offset: 1272)
!4242 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vect_loop_version", scope: !4096, file: !4097, line: 554, baseType: !4108, size: 8, offset: 1280)
!4243 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vectorize", scope: !4096, file: !4097, line: 555, baseType: !4108, size: 8, offset: 1288)
!4244 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vrp", scope: !4096, file: !4097, line: 556, baseType: !4108, size: 8, offset: 1296)
!4245 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unit_at_a_time", scope: !4096, file: !4097, line: 557, baseType: !4108, size: 8, offset: 1304)
!4246 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unroll_all_loops", scope: !4096, file: !4097, line: 558, baseType: !4108, size: 8, offset: 1312)
!4247 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unroll_loops", scope: !4096, file: !4097, line: 559, baseType: !4108, size: 8, offset: 1320)
!4248 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unsafe_loop_optimizations", scope: !4096, file: !4097, line: 560, baseType: !4108, size: 8, offset: 1328)
!4249 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unsafe_math_optimizations", scope: !4096, file: !4097, line: 561, baseType: !4108, size: 8, offset: 1336)
!4250 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unswitch_loops", scope: !4096, file: !4097, line: 562, baseType: !4108, size: 8, offset: 1344)
!4251 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unwind_tables", scope: !4096, file: !4097, line: 563, baseType: !4108, size: 8, offset: 1352)
!4252 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking", scope: !4096, file: !4097, line: 564, baseType: !4108, size: 8, offset: 1360)
!4253 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_assignments", scope: !4096, file: !4097, line: 565, baseType: !4108, size: 8, offset: 1368)
!4254 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_assignments_toggle", scope: !4096, file: !4097, line: 566, baseType: !4108, size: 8, offset: 1376)
!4255 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_uninit", scope: !4096, file: !4097, line: 567, baseType: !4108, size: 8, offset: 1384)
!4256 = !DIDerivedType(tag: DW_TAG_member, name: "flag_variable_expansion_in_unroller", scope: !4096, file: !4097, line: 568, baseType: !4108, size: 8, offset: 1392)
!4257 = !DIDerivedType(tag: DW_TAG_member, name: "flag_vect_cost_model", scope: !4096, file: !4097, line: 569, baseType: !4108, size: 8, offset: 1400)
!4258 = !DIDerivedType(tag: DW_TAG_member, name: "flag_value_profile_transformations", scope: !4096, file: !4097, line: 570, baseType: !4108, size: 8, offset: 1408)
!4259 = !DIDerivedType(tag: DW_TAG_member, name: "flag_web", scope: !4096, file: !4097, line: 571, baseType: !4108, size: 8, offset: 1416)
!4260 = !DIDerivedType(tag: DW_TAG_member, name: "flag_whole_program", scope: !4096, file: !4097, line: 572, baseType: !4108, size: 8, offset: 1424)
!4261 = !DIDerivedType(tag: DW_TAG_member, name: "flag_wpa", scope: !4096, file: !4097, line: 573, baseType: !4108, size: 8, offset: 1432)
!4262 = !DIDerivedType(tag: DW_TAG_member, name: "flag_wrapv", scope: !4096, file: !4097, line: 574, baseType: !4108, size: 8, offset: 1440)
!4263 = !DIDerivedType(tag: DW_TAG_member, name: "target_option", scope: !3247, file: !334, line: 3405, baseType: !4264, size: 384)
!4264 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_target_option", file: !334, line: 3352, size: 384, elements: !4265)
!4265 = !{!4266, !4267}
!4266 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !4264, file: !334, line: 3353, baseType: !3283, size: 192)
!4267 = !DIDerivedType(tag: DW_TAG_member, name: "opts", scope: !4264, file: !334, line: 3356, baseType: !4268, size: 192, offset: 192)
!4268 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cl_target_option", file: !4097, line: 578, size: 192, elements: !4269)
!4269 = !{!4270, !4271, !4272, !4273, !4274, !4275, !4276, !4277, !4278, !4279, !4280}
!4270 = !DIDerivedType(tag: DW_TAG_member, name: "ix86_isa_flags_explicit", scope: !4268, file: !4097, line: 580, baseType: !3341, size: 32)
!4271 = !DIDerivedType(tag: DW_TAG_member, name: "target_flags_explicit", scope: !4268, file: !4097, line: 581, baseType: !3341, size: 32, offset: 32)
!4272 = !DIDerivedType(tag: DW_TAG_member, name: "target_flags", scope: !4268, file: !4097, line: 582, baseType: !3341, size: 32, offset: 64)
!4273 = !DIDerivedType(tag: DW_TAG_member, name: "ix86_isa_flags", scope: !4268, file: !4097, line: 583, baseType: !3341, size: 32, offset: 96)
!4274 = !DIDerivedType(tag: DW_TAG_member, name: "arch", scope: !4268, file: !4097, line: 584, baseType: !3364, size: 8, offset: 128)
!4275 = !DIDerivedType(tag: DW_TAG_member, name: "arch_specified", scope: !4268, file: !4097, line: 585, baseType: !3364, size: 8, offset: 136)
!4276 = !DIDerivedType(tag: DW_TAG_member, name: "branch_cost", scope: !4268, file: !4097, line: 586, baseType: !3364, size: 8, offset: 144)
!4277 = !DIDerivedType(tag: DW_TAG_member, name: "fpmath", scope: !4268, file: !4097, line: 587, baseType: !3364, size: 8, offset: 152)
!4278 = !DIDerivedType(tag: DW_TAG_member, name: "schedule", scope: !4268, file: !4097, line: 588, baseType: !3364, size: 8, offset: 160)
!4279 = !DIDerivedType(tag: DW_TAG_member, name: "tune", scope: !4268, file: !4097, line: 589, baseType: !3364, size: 8, offset: 168)
!4280 = !DIDerivedType(tag: DW_TAG_member, name: "tune_defaulted", scope: !4268, file: !4097, line: 590, baseType: !3364, size: 8, offset: 176)
!4281 = !DIDerivedType(tag: DW_TAG_member, name: "gsops", scope: !3222, file: !1291, line: 739, baseType: !4282, size: 448)
!4282 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_ops", file: !1291, line: 350, size: 448, elements: !4283)
!4283 = !{!4284, !4290}
!4284 = !DIDerivedType(tag: DW_TAG_member, name: "opbase", scope: !4282, file: !1291, line: 353, baseType: !4285, size: 384)
!4285 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_ops_base", file: !1291, line: 333, size: 384, elements: !4286)
!4286 = !{!4287, !4288, !4289}
!4287 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !4285, file: !1291, line: 336, baseType: !3225, size: 256)
!4288 = !DIDerivedType(tag: DW_TAG_member, name: "def_ops", scope: !4285, file: !1291, line: 343, baseType: !3829, size: 64, offset: 256)
!4289 = !DIDerivedType(tag: DW_TAG_member, name: "use_ops", scope: !4285, file: !1291, line: 344, baseType: !3836, size: 64, offset: 320)
!4290 = !DIDerivedType(tag: DW_TAG_member, name: "op", scope: !4282, file: !1291, line: 359, baseType: !3793, size: 64, offset: 384)
!4291 = !DIDerivedType(tag: DW_TAG_member, name: "gsmembase", scope: !3222, file: !1291, line: 740, baseType: !4292, size: 512)
!4292 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_memory_ops_base", file: !1291, line: 365, size: 512, elements: !4293)
!4293 = !{!4294, !4295, !4296}
!4294 = !DIDerivedType(tag: DW_TAG_member, name: "opbase", scope: !4292, file: !1291, line: 368, baseType: !4285, size: 384)
!4295 = !DIDerivedType(tag: DW_TAG_member, name: "vdef", scope: !4292, file: !1291, line: 373, baseType: !3245, size: 64, offset: 384)
!4296 = !DIDerivedType(tag: DW_TAG_member, name: "vuse", scope: !4292, file: !1291, line: 374, baseType: !3245, size: 64, offset: 448)
!4297 = !DIDerivedType(tag: DW_TAG_member, name: "gsmem", scope: !3222, file: !1291, line: 741, baseType: !4298, size: 576)
!4298 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_memory_ops", file: !1291, line: 380, size: 576, elements: !4299)
!4299 = !{!4300, !4301}
!4300 = !DIDerivedType(tag: DW_TAG_member, name: "membase", scope: !4298, file: !1291, line: 383, baseType: !4292, size: 512)
!4301 = !DIDerivedType(tag: DW_TAG_member, name: "op", scope: !4298, file: !1291, line: 389, baseType: !3793, size: 64, offset: 512)
!4302 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !3222, file: !1291, line: 742, baseType: !4303, size: 320)
!4303 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp", file: !1291, line: 395, size: 320, elements: !4304)
!4304 = !{!4305, !4306}
!4305 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !4303, file: !1291, line: 397, baseType: !3225, size: 256)
!4306 = !DIDerivedType(tag: DW_TAG_member, name: "body", scope: !4303, file: !1291, line: 400, baseType: !3210, size: 64, offset: 256)
!4307 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_bind", scope: !3222, file: !1291, line: 743, baseType: !4308, size: 448)
!4308 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_bind", file: !1291, line: 406, size: 448, elements: !4309)
!4309 = !{!4310, !4311, !4312, !4313}
!4310 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !4308, file: !1291, line: 408, baseType: !3225, size: 256)
!4311 = !DIDerivedType(tag: DW_TAG_member, name: "vars", scope: !4308, file: !1291, line: 412, baseType: !3245, size: 64, offset: 256)
!4312 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !4308, file: !1291, line: 420, baseType: !3245, size: 64, offset: 320)
!4313 = !DIDerivedType(tag: DW_TAG_member, name: "body", scope: !4308, file: !1291, line: 423, baseType: !3210, size: 64, offset: 384)
!4314 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_catch", scope: !3222, file: !1291, line: 744, baseType: !4315, size: 384)
!4315 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_catch", file: !1291, line: 429, size: 384, elements: !4316)
!4316 = !{!4317, !4318, !4319}
!4317 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !4315, file: !1291, line: 431, baseType: !3225, size: 256)
!4318 = !DIDerivedType(tag: DW_TAG_member, name: "types", scope: !4315, file: !1291, line: 434, baseType: !3245, size: 64, offset: 256)
!4319 = !DIDerivedType(tag: DW_TAG_member, name: "handler", scope: !4315, file: !1291, line: 437, baseType: !3210, size: 64, offset: 320)
!4320 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_eh_filter", scope: !3222, file: !1291, line: 745, baseType: !4321, size: 384)
!4321 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_eh_filter", file: !1291, line: 443, size: 384, elements: !4322)
!4322 = !{!4323, !4324, !4325}
!4323 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !4321, file: !1291, line: 445, baseType: !3225, size: 256)
!4324 = !DIDerivedType(tag: DW_TAG_member, name: "types", scope: !4321, file: !1291, line: 449, baseType: !3245, size: 64, offset: 256)
!4325 = !DIDerivedType(tag: DW_TAG_member, name: "failure", scope: !4321, file: !1291, line: 453, baseType: !3210, size: 64, offset: 320)
!4326 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_eh_mnt", scope: !3222, file: !1291, line: 746, baseType: !4327, size: 320)
!4327 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_eh_mnt", file: !1291, line: 459, size: 320, elements: !4328)
!4328 = !{!4329, !4330}
!4329 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !4327, file: !1291, line: 461, baseType: !3225, size: 256)
!4330 = !DIDerivedType(tag: DW_TAG_member, name: "fndecl", scope: !4327, file: !1291, line: 464, baseType: !3245, size: 64, offset: 256)
!4331 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_phi", scope: !3222, file: !1291, line: 747, baseType: !4332, size: 768)
!4332 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_phi", file: !1291, line: 469, size: 768, elements: !4333)
!4333 = !{!4334, !4335, !4336, !4337, !4338}
!4334 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !4332, file: !1291, line: 471, baseType: !3225, size: 256)
!4335 = !DIDerivedType(tag: DW_TAG_member, name: "capacity", scope: !4332, file: !1291, line: 474, baseType: !7, size: 32, offset: 256)
!4336 = !DIDerivedType(tag: DW_TAG_member, name: "nargs", scope: !4332, file: !1291, line: 475, baseType: !7, size: 32, offset: 288)
!4337 = !DIDerivedType(tag: DW_TAG_member, name: "result", scope: !4332, file: !1291, line: 478, baseType: !3245, size: 64, offset: 320)
!4338 = !DIDerivedType(tag: DW_TAG_member, name: "args", scope: !4332, file: !1291, line: 481, baseType: !4339, size: 384, offset: 384)
!4339 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4340, size: 384, elements: !3345)
!4340 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "phi_arg_d", file: !334, line: 1917, size: 384, elements: !4341)
!4341 = !{!4342, !4343, !4344}
!4342 = !DIDerivedType(tag: DW_TAG_member, name: "imm_use", scope: !4340, file: !334, line: 1920, baseType: !3841, size: 256)
!4343 = !DIDerivedType(tag: DW_TAG_member, name: "def", scope: !4340, file: !334, line: 1921, baseType: !3245, size: 64, offset: 256)
!4344 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !4340, file: !334, line: 1922, baseType: !3238, size: 32, offset: 320)
!4345 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_eh_ctrl", scope: !3222, file: !1291, line: 748, baseType: !4346, size: 320)
!4346 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_eh_ctrl", file: !1291, line: 487, size: 320, elements: !4347)
!4347 = !{!4348, !4349}
!4348 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !4346, file: !1291, line: 490, baseType: !3225, size: 256)
!4349 = !DIDerivedType(tag: DW_TAG_member, name: "region", scope: !4346, file: !1291, line: 494, baseType: !3341, size: 32, offset: 256)
!4350 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_try", scope: !3222, file: !1291, line: 749, baseType: !4351, size: 384)
!4351 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_try", file: !1291, line: 500, size: 384, elements: !4352)
!4352 = !{!4353, !4354, !4355}
!4353 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !4351, file: !1291, line: 502, baseType: !3225, size: 256)
!4354 = !DIDerivedType(tag: DW_TAG_member, name: "eval", scope: !4351, file: !1291, line: 506, baseType: !3210, size: 64, offset: 256)
!4355 = !DIDerivedType(tag: DW_TAG_member, name: "cleanup", scope: !4351, file: !1291, line: 510, baseType: !3210, size: 64, offset: 320)
!4356 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_wce", scope: !3222, file: !1291, line: 750, baseType: !4357, size: 320)
!4357 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_wce", file: !1291, line: 529, size: 320, elements: !4358)
!4358 = !{!4359, !4360}
!4359 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !4357, file: !1291, line: 531, baseType: !3225, size: 256)
!4360 = !DIDerivedType(tag: DW_TAG_member, name: "cleanup", scope: !4357, file: !1291, line: 540, baseType: !3210, size: 64, offset: 256)
!4361 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_asm", scope: !3222, file: !1291, line: 751, baseType: !4362, size: 704)
!4362 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_asm", file: !1291, line: 546, size: 704, elements: !4363)
!4363 = !{!4364, !4365, !4366, !4367, !4368, !4369, !4370}
!4364 = !DIDerivedType(tag: DW_TAG_member, name: "membase", scope: !4362, file: !1291, line: 549, baseType: !4292, size: 512)
!4365 = !DIDerivedType(tag: DW_TAG_member, name: "string", scope: !4362, file: !1291, line: 553, baseType: !3444, size: 64, offset: 512)
!4366 = !DIDerivedType(tag: DW_TAG_member, name: "ni", scope: !4362, file: !1291, line: 557, baseType: !3364, size: 8, offset: 576)
!4367 = !DIDerivedType(tag: DW_TAG_member, name: "no", scope: !4362, file: !1291, line: 558, baseType: !3364, size: 8, offset: 584)
!4368 = !DIDerivedType(tag: DW_TAG_member, name: "nc", scope: !4362, file: !1291, line: 559, baseType: !3364, size: 8, offset: 592)
!4369 = !DIDerivedType(tag: DW_TAG_member, name: "nl", scope: !4362, file: !1291, line: 560, baseType: !3364, size: 8, offset: 600)
!4370 = !DIDerivedType(tag: DW_TAG_member, name: "op", scope: !4362, file: !1291, line: 566, baseType: !3793, size: 64, offset: 640)
!4371 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_critical", scope: !3222, file: !1291, line: 752, baseType: !4372, size: 384)
!4372 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_critical", file: !1291, line: 571, size: 384, elements: !4373)
!4373 = !{!4374, !4375}
!4374 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !4372, file: !1291, line: 573, baseType: !4303, size: 320)
!4375 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !4372, file: !1291, line: 577, baseType: !3245, size: 64, offset: 320)
!4376 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_for", scope: !3222, file: !1291, line: 753, baseType: !4377, size: 576)
!4377 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_for", file: !1291, line: 600, size: 576, elements: !4378)
!4378 = !{!4379, !4380, !4381, !4382, !4391}
!4379 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !4377, file: !1291, line: 602, baseType: !4303, size: 320)
!4380 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !4377, file: !1291, line: 605, baseType: !3245, size: 64, offset: 320)
!4381 = !DIDerivedType(tag: DW_TAG_member, name: "collapse", scope: !4377, file: !1291, line: 609, baseType: !3743, size: 64, offset: 384)
!4382 = !DIDerivedType(tag: DW_TAG_member, name: "iter", scope: !4377, file: !1291, line: 612, baseType: !4383, size: 64, offset: 448)
!4383 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4384, size: 64)
!4384 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_omp_for_iter", file: !1291, line: 581, size: 320, elements: !4385)
!4385 = !{!4386, !4387, !4388, !4389, !4390}
!4386 = !DIDerivedType(tag: DW_TAG_member, name: "cond", scope: !4384, file: !1291, line: 583, baseType: !366, size: 32)
!4387 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !4384, file: !1291, line: 586, baseType: !3245, size: 64, offset: 64)
!4388 = !DIDerivedType(tag: DW_TAG_member, name: "initial", scope: !4384, file: !1291, line: 589, baseType: !3245, size: 64, offset: 128)
!4389 = !DIDerivedType(tag: DW_TAG_member, name: "final", scope: !4384, file: !1291, line: 592, baseType: !3245, size: 64, offset: 192)
!4390 = !DIDerivedType(tag: DW_TAG_member, name: "incr", scope: !4384, file: !1291, line: 595, baseType: !3245, size: 64, offset: 256)
!4391 = !DIDerivedType(tag: DW_TAG_member, name: "pre_body", scope: !4377, file: !1291, line: 616, baseType: !3210, size: 64, offset: 512)
!4392 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_parallel", scope: !3222, file: !1291, line: 754, baseType: !4393, size: 512)
!4393 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_parallel", file: !1291, line: 622, size: 512, elements: !4394)
!4394 = !{!4395, !4396, !4397, !4398}
!4395 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !4393, file: !1291, line: 624, baseType: !4303, size: 320)
!4396 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !4393, file: !1291, line: 628, baseType: !3245, size: 64, offset: 320)
!4397 = !DIDerivedType(tag: DW_TAG_member, name: "child_fn", scope: !4393, file: !1291, line: 632, baseType: !3245, size: 64, offset: 384)
!4398 = !DIDerivedType(tag: DW_TAG_member, name: "data_arg", scope: !4393, file: !1291, line: 636, baseType: !3245, size: 64, offset: 448)
!4399 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_task", scope: !3222, file: !1291, line: 755, baseType: !4400, size: 704)
!4400 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_task", file: !1291, line: 642, size: 704, elements: !4401)
!4401 = !{!4402, !4403, !4404, !4405}
!4402 = !DIDerivedType(tag: DW_TAG_member, name: "par", scope: !4400, file: !1291, line: 644, baseType: !4393, size: 512)
!4403 = !DIDerivedType(tag: DW_TAG_member, name: "copy_fn", scope: !4400, file: !1291, line: 648, baseType: !3245, size: 64, offset: 512)
!4404 = !DIDerivedType(tag: DW_TAG_member, name: "arg_size", scope: !4400, file: !1291, line: 652, baseType: !3245, size: 64, offset: 576)
!4405 = !DIDerivedType(tag: DW_TAG_member, name: "arg_align", scope: !4400, file: !1291, line: 653, baseType: !3245, size: 64, offset: 640)
!4406 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_sections", scope: !3222, file: !1291, line: 756, baseType: !4407, size: 448)
!4407 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_sections", file: !1291, line: 663, size: 448, elements: !4408)
!4408 = !{!4409, !4410, !4411}
!4409 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !4407, file: !1291, line: 665, baseType: !4303, size: 320)
!4410 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !4407, file: !1291, line: 668, baseType: !3245, size: 64, offset: 320)
!4411 = !DIDerivedType(tag: DW_TAG_member, name: "control", scope: !4407, file: !1291, line: 673, baseType: !3245, size: 64, offset: 384)
!4412 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_single", scope: !3222, file: !1291, line: 757, baseType: !4413, size: 384)
!4413 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_single", file: !1291, line: 694, size: 384, elements: !4414)
!4414 = !{!4415, !4416}
!4415 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !4413, file: !1291, line: 696, baseType: !4303, size: 320)
!4416 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !4413, file: !1291, line: 699, baseType: !3245, size: 64, offset: 320)
!4417 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_continue", scope: !3222, file: !1291, line: 758, baseType: !4418, size: 384)
!4418 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_continue", file: !1291, line: 681, size: 384, elements: !4419)
!4419 = !{!4420, !4421, !4422}
!4420 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !4418, file: !1291, line: 683, baseType: !3225, size: 256)
!4421 = !DIDerivedType(tag: DW_TAG_member, name: "control_def", scope: !4418, file: !1291, line: 686, baseType: !3245, size: 64, offset: 256)
!4422 = !DIDerivedType(tag: DW_TAG_member, name: "control_use", scope: !4418, file: !1291, line: 689, baseType: !3245, size: 64, offset: 320)
!4423 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_atomic_load", scope: !3222, file: !1291, line: 759, baseType: !4424, size: 384)
!4424 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_atomic_load", file: !1291, line: 707, size: 384, elements: !4425)
!4425 = !{!4426, !4427, !4428}
!4426 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !4424, file: !1291, line: 709, baseType: !3225, size: 256)
!4427 = !DIDerivedType(tag: DW_TAG_member, name: "rhs", scope: !4424, file: !1291, line: 712, baseType: !3245, size: 64, offset: 256)
!4428 = !DIDerivedType(tag: DW_TAG_member, name: "lhs", scope: !4424, file: !1291, line: 712, baseType: !3245, size: 64, offset: 320)
!4429 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_atomic_store", scope: !3222, file: !1291, line: 760, baseType: !4430, size: 320)
!4430 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_atomic_store", file: !1291, line: 718, size: 320, elements: !4431)
!4431 = !{!4432, !4433}
!4432 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !4430, file: !1291, line: 720, baseType: !3225, size: 256)
!4433 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !4430, file: !1291, line: 723, baseType: !3245, size: 64, offset: 256)
!4434 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !3217, file: !1291, line: 138, baseType: !3216, size: 64, offset: 64)
!4435 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !3217, file: !1291, line: 139, baseType: !3216, size: 64, offset: 128)
!4436 = !DIDerivedType(tag: DW_TAG_member, name: "last", scope: !3212, file: !1291, line: 146, baseType: !3215, size: 64, offset: 64)
!4437 = !DIDerivedType(tag: DW_TAG_member, name: "next_free", scope: !3212, file: !1291, line: 152, baseType: !3210, size: 64, offset: 128)
!4438 = !DIDerivedType(tag: DW_TAG_member, name: "r", scope: !3207, file: !318, line: 130, baseType: !3418, size: 64)
!4439 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !3202, file: !318, line: 134, baseType: !3177, size: 64, offset: 192)
!4440 = !DIDerivedType(tag: DW_TAG_member, name: "goto_block", scope: !3202, file: !318, line: 137, baseType: !3245, size: 64, offset: 256)
!4441 = !DIDerivedType(tag: DW_TAG_member, name: "goto_locus", scope: !3202, file: !318, line: 138, baseType: !3238, size: 32, offset: 320)
!4442 = !DIDerivedType(tag: DW_TAG_member, name: "dest_idx", scope: !3202, file: !318, line: 142, baseType: !7, size: 32, offset: 352)
!4443 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !3202, file: !318, line: 144, baseType: !3341, size: 32, offset: 384)
!4444 = !DIDerivedType(tag: DW_TAG_member, name: "probability", scope: !3202, file: !318, line: 145, baseType: !3341, size: 32, offset: 416)
!4445 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !3202, file: !318, line: 146, baseType: !4446, size: 64, offset: 448)
!4446 = !DIDerivedType(tag: DW_TAG_typedef, name: "gcov_type", file: !318, line: 119, baseType: !3300)
!4447 = !DIDerivedType(tag: DW_TAG_member, name: "succs", scope: !3185, file: !318, line: 220, baseType: !3188, size: 64, offset: 64)
!4448 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !3185, file: !318, line: 223, baseType: !3177, size: 64, offset: 128)
!4449 = !DIDerivedType(tag: DW_TAG_member, name: "loop_father", scope: !3185, file: !318, line: 226, baseType: !4450, size: 64, offset: 192)
!4450 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4451, size: 64)
!4451 = !DICompositeType(tag: DW_TAG_structure_type, name: "loop", file: !318, line: 185, flags: DIFlagFwdDecl)
!4452 = !DIDerivedType(tag: DW_TAG_member, name: "dom", scope: !3185, file: !318, line: 229, baseType: !4453, size: 128, offset: 256)
!4453 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4454, size: 128, elements: !3488)
!4454 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4455, size: 64)
!4455 = !DICompositeType(tag: DW_TAG_structure_type, name: "et_node", file: !318, line: 229, flags: DIFlagFwdDecl)
!4456 = !DIDerivedType(tag: DW_TAG_member, name: "prev_bb", scope: !3185, file: !318, line: 232, baseType: !3184, size: 64, offset: 384)
!4457 = !DIDerivedType(tag: DW_TAG_member, name: "next_bb", scope: !3185, file: !318, line: 233, baseType: !3184, size: 64, offset: 448)
!4458 = !DIDerivedType(tag: DW_TAG_member, name: "il", scope: !3185, file: !318, line: 238, baseType: !4459, size: 64, offset: 512)
!4459 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "basic_block_il_dependent", file: !318, line: 235, size: 64, elements: !4460)
!4460 = !{!4461, !4467}
!4461 = !DIDerivedType(tag: DW_TAG_member, name: "gimple", scope: !4459, file: !318, line: 236, baseType: !4462, size: 64)
!4462 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4463, size: 64)
!4463 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_bb_info", file: !318, line: 273, size: 128, elements: !4464)
!4464 = !{!4465, !4466}
!4465 = !DIDerivedType(tag: DW_TAG_member, name: "seq", scope: !4463, file: !318, line: 275, baseType: !3210, size: 64)
!4466 = !DIDerivedType(tag: DW_TAG_member, name: "phi_nodes", scope: !4463, file: !318, line: 278, baseType: !3210, size: 64, offset: 64)
!4467 = !DIDerivedType(tag: DW_TAG_member, name: "rtl", scope: !4459, file: !318, line: 237, baseType: !4468, size: 64)
!4468 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4469, size: 64)
!4469 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtl_bb_info", file: !318, line: 259, size: 320, elements: !4470)
!4470 = !{!4471, !4472, !4473, !4474, !4475}
!4471 = !DIDerivedType(tag: DW_TAG_member, name: "head_", scope: !4469, file: !318, line: 261, baseType: !3418, size: 64)
!4472 = !DIDerivedType(tag: DW_TAG_member, name: "end_", scope: !4469, file: !318, line: 262, baseType: !3418, size: 64, offset: 64)
!4473 = !DIDerivedType(tag: DW_TAG_member, name: "header", scope: !4469, file: !318, line: 266, baseType: !3418, size: 64, offset: 128)
!4474 = !DIDerivedType(tag: DW_TAG_member, name: "footer", scope: !4469, file: !318, line: 267, baseType: !3418, size: 64, offset: 192)
!4475 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !4469, file: !318, line: 270, baseType: !3341, size: 32, offset: 256)
!4476 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !3185, file: !318, line: 241, baseType: !4446, size: 64, offset: 576)
!4477 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !3185, file: !318, line: 244, baseType: !3341, size: 32, offset: 640)
!4478 = !DIDerivedType(tag: DW_TAG_member, name: "loop_depth", scope: !3185, file: !318, line: 247, baseType: !3341, size: 32, offset: 672)
!4479 = !DIDerivedType(tag: DW_TAG_member, name: "frequency", scope: !3185, file: !318, line: 250, baseType: !3341, size: 32, offset: 704)
!4480 = !DIDerivedType(tag: DW_TAG_member, name: "discriminator", scope: !3185, file: !318, line: 253, baseType: !3341, size: 32, offset: 736)
!4481 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !3185, file: !318, line: 256, baseType: !3341, size: 32, offset: 768)
!4482 = !DIDerivedType(tag: DW_TAG_member, name: "recip_def", scope: !3179, file: !3, line: 115, baseType: !3245, size: 64, offset: 64)
!4483 = !DIDerivedType(tag: DW_TAG_member, name: "recip_def_stmt", scope: !3179, file: !3, line: 119, baseType: !3220, size: 64, offset: 128)
!4484 = !DIDerivedType(tag: DW_TAG_member, name: "children", scope: !3179, file: !3, line: 123, baseType: !3178, size: 64, offset: 192)
!4485 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !3179, file: !3, line: 127, baseType: !3178, size: 64, offset: 256)
!4486 = !DIDerivedType(tag: DW_TAG_member, name: "num_divisions", scope: !3179, file: !3, line: 132, baseType: !3341, size: 32, offset: 320)
!4487 = !DIDerivedType(tag: DW_TAG_member, name: "bb_has_division", scope: !3179, file: !3, line: 137, baseType: !3364, size: 8, offset: 352)
!4488 = !DIDerivedType(tag: DW_TAG_typedef, name: "use_operand_p", file: !1349, line: 30, baseType: !4489)
!4489 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4490, size: 64)
!4490 = !DIDerivedType(tag: DW_TAG_typedef, name: "ssa_use_operand_t", file: !334, line: 1893, baseType: !3841)
!4491 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4492, size: 64)
!4492 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !3222)
!4493 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4494, size: 64)
!4494 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_gimple_heap", file: !1291, line: 34, baseType: !4495)
!4495 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_gimple_heap", file: !1291, line: 34, size: 128, elements: !4496)
!4496 = !{!4497}
!4497 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !4495, file: !1291, line: 34, baseType: !3774, size: 128)
!4498 = !{!0, !4499, !4527, !4529, !4552}
!4499 = !DIGlobalVariableExpression(var: !4500, expr: !DIExpression())
!4500 = distinct !DIGlobalVariable(name: "pass_cse_sincos", scope: !2, file: !3, line: 802, type: !4501, isLocal: false, isDefinition: true)
!4501 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_opt_pass", file: !6, line: 156, size: 640, elements: !4502)
!4502 = !{!4503}
!4503 = !DIDerivedType(tag: DW_TAG_member, name: "pass", scope: !4501, file: !6, line: 158, baseType: !4504, size: 640)
!4504 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "opt_pass", file: !6, line: 114, size: 640, elements: !4505)
!4505 = !{!4506, !4507, !4508, !4512, !4516, !4518, !4519, !4520, !4522, !4523, !4524, !4525, !4526}
!4506 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !4504, file: !6, line: 117, baseType: !5, size: 32)
!4507 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !4504, file: !6, line: 121, baseType: !3444, size: 64, offset: 64)
!4508 = !DIDerivedType(tag: DW_TAG_member, name: "gate", scope: !4504, file: !6, line: 125, baseType: !4509, size: 64, offset: 128)
!4509 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4510, size: 64)
!4510 = !DISubroutineType(types: !4511)
!4511 = !{!3364}
!4512 = !DIDerivedType(tag: DW_TAG_member, name: "execute", scope: !4504, file: !6, line: 130, baseType: !4513, size: 64, offset: 192)
!4513 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4514, size: 64)
!4514 = !DISubroutineType(types: !4515)
!4515 = !{!7}
!4516 = !DIDerivedType(tag: DW_TAG_member, name: "sub", scope: !4504, file: !6, line: 133, baseType: !4517, size: 64, offset: 256)
!4517 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4504, size: 64)
!4518 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !4504, file: !6, line: 136, baseType: !4517, size: 64, offset: 320)
!4519 = !DIDerivedType(tag: DW_TAG_member, name: "static_pass_number", scope: !4504, file: !6, line: 139, baseType: !3341, size: 32, offset: 384)
!4520 = !DIDerivedType(tag: DW_TAG_member, name: "tv_id", scope: !4504, file: !6, line: 143, baseType: !4521, size: 32, offset: 416)
!4521 = !DIDerivedType(tag: DW_TAG_typedef, name: "timevar_id_t", file: !14, line: 80, baseType: !13)
!4522 = !DIDerivedType(tag: DW_TAG_member, name: "properties_required", scope: !4504, file: !6, line: 146, baseType: !7, size: 32, offset: 448)
!4523 = !DIDerivedType(tag: DW_TAG_member, name: "properties_provided", scope: !4504, file: !6, line: 147, baseType: !7, size: 32, offset: 480)
!4524 = !DIDerivedType(tag: DW_TAG_member, name: "properties_destroyed", scope: !4504, file: !6, line: 148, baseType: !7, size: 32, offset: 512)
!4525 = !DIDerivedType(tag: DW_TAG_member, name: "todo_flags_start", scope: !4504, file: !6, line: 151, baseType: !7, size: 32, offset: 544)
!4526 = !DIDerivedType(tag: DW_TAG_member, name: "todo_flags_finish", scope: !4504, file: !6, line: 152, baseType: !7, size: 32, offset: 576)
!4527 = !DIGlobalVariableExpression(var: !4528, expr: !DIExpression())
!4528 = distinct !DIGlobalVariable(name: "pass_optimize_bswap", scope: !2, file: !3, line: 1245, type: !4501, isLocal: false, isDefinition: true)
!4529 = !DIGlobalVariableExpression(var: !4530, expr: !DIExpression())
!4530 = distinct !DIGlobalVariable(name: "occ_pool", scope: !2, file: !3, line: 146, type: !4531, isLocal: true, isDefinition: true)
!4531 = !DIDerivedType(tag: DW_TAG_typedef, name: "alloc_pool", file: !4532, line: 58, baseType: !4533)
!4532 = !DIFile(filename: "./alloc-pool.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!4533 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4534, size: 64)
!4534 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "alloc_pool_def", file: !4532, line: 32, size: 704, elements: !4535)
!4535 = !{!4536, !4537, !4538, !4544, !4545, !4546, !4547, !4548, !4549, !4550, !4551}
!4536 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !4534, file: !4532, line: 34, baseType: !3444, size: 64)
!4537 = !DIDerivedType(tag: DW_TAG_member, name: "elts_per_block", scope: !4534, file: !4532, line: 38, baseType: !3743, size: 64, offset: 64)
!4538 = !DIDerivedType(tag: DW_TAG_member, name: "returned_free_list", scope: !4534, file: !4532, line: 41, baseType: !4539, size: 64, offset: 128)
!4539 = !DIDerivedType(tag: DW_TAG_typedef, name: "alloc_pool_list", file: !4532, line: 30, baseType: !4540)
!4540 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4541, size: 64)
!4541 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "alloc_pool_list_def", file: !4532, line: 26, size: 64, elements: !4542)
!4542 = !{!4543}
!4543 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !4541, file: !4532, line: 28, baseType: !4540, size: 64)
!4544 = !DIDerivedType(tag: DW_TAG_member, name: "virgin_free_list", scope: !4534, file: !4532, line: 45, baseType: !3509, size: 64, offset: 192)
!4545 = !DIDerivedType(tag: DW_TAG_member, name: "virgin_elts_remaining", scope: !4534, file: !4532, line: 49, baseType: !3743, size: 64, offset: 256)
!4546 = !DIDerivedType(tag: DW_TAG_member, name: "elts_allocated", scope: !4534, file: !4532, line: 51, baseType: !3743, size: 64, offset: 320)
!4547 = !DIDerivedType(tag: DW_TAG_member, name: "elts_free", scope: !4534, file: !4532, line: 52, baseType: !3743, size: 64, offset: 384)
!4548 = !DIDerivedType(tag: DW_TAG_member, name: "blocks_allocated", scope: !4534, file: !4532, line: 53, baseType: !3743, size: 64, offset: 448)
!4549 = !DIDerivedType(tag: DW_TAG_member, name: "block_list", scope: !4534, file: !4532, line: 54, baseType: !4539, size: 64, offset: 512)
!4550 = !DIDerivedType(tag: DW_TAG_member, name: "block_size", scope: !4534, file: !4532, line: 55, baseType: !3743, size: 64, offset: 576)
!4551 = !DIDerivedType(tag: DW_TAG_member, name: "elt_size", scope: !4534, file: !4532, line: 56, baseType: !3743, size: 64, offset: 640)
!4552 = !DIGlobalVariableExpression(var: !4553, expr: !DIExpression())
!4553 = distinct !DIGlobalVariable(name: "occ_head", scope: !2, file: !3, line: 143, type: !3178, isLocal: true, isDefinition: true)
!4554 = !{i32 7, !"Dwarf Version", i32 4}
!4555 = !{i32 2, !"Debug Info Version", i32 3}
!4556 = !{i32 1, !"wchar_size", i32 4}
!4557 = !{!"clang version 10.0.1 (https://github.com/svkeerthy/IR2Vec-LoopOptimizationFramework.git 561ac470e63b728263a0ac06ef987886ac648486)"}
!4558 = distinct !DISubprogram(name: "gate_cse_reciprocals", scope: !3, file: !3, line: 451, type: !4510, scopeLine: 452, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4559)
!4559 = !{}
!4560 = !DILocation(line: 453, column: 10, scope: !4558)
!4561 = !DILocation(line: 453, column: 19, scope: !4558)
!4562 = !DILocation(line: 453, column: 22, scope: !4558)
!4563 = !DILocation(line: 0, scope: !4558)
!4564 = !DILocation(line: 453, column: 3, scope: !4558)
!4565 = distinct !DISubprogram(name: "execute_cse_reciprocals", scope: !3, file: !3, line: 459, type: !4514, scopeLine: 460, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4559)
!4566 = !DILocalVariable(name: "bb", scope: !4565, file: !3, line: 461, type: !3182)
!4567 = !DILocation(line: 461, column: 15, scope: !4565)
!4568 = !DILocalVariable(name: "arg", scope: !4565, file: !3, line: 462, type: !3245)
!4569 = !DILocation(line: 462, column: 8, scope: !4565)
!4570 = !DILocation(line: 466, column: 5, scope: !4565)
!4571 = !DILocation(line: 466, column: 20, scope: !4565)
!4572 = !DILocation(line: 466, column: 24, scope: !4565)
!4573 = !DILocation(line: 464, column: 14, scope: !4565)
!4574 = !DILocation(line: 464, column: 12, scope: !4565)
!4575 = !DILocation(line: 468, column: 3, scope: !4565)
!4576 = !DILocation(line: 469, column: 3, scope: !4565)
!4577 = !DILocation(line: 476, column: 14, scope: !4578)
!4578 = distinct !DILexicalBlock(scope: !4565, file: !3, line: 476, column: 3)
!4579 = !DILocation(line: 476, column: 12, scope: !4578)
!4580 = !DILocation(line: 476, column: 8, scope: !4578)
!4581 = !DILocation(line: 476, column: 43, scope: !4582)
!4582 = distinct !DILexicalBlock(scope: !4578, file: !3, line: 476, column: 3)
!4583 = !DILocation(line: 476, column: 3, scope: !4578)
!4584 = !DILocation(line: 477, column: 29, scope: !4585)
!4585 = distinct !DILexicalBlock(scope: !4582, file: !3, line: 477, column: 9)
!4586 = !DILocation(line: 477, column: 35, scope: !4585)
!4587 = !DILocation(line: 477, column: 9, scope: !4585)
!4588 = !DILocation(line: 478, column: 2, scope: !4585)
!4589 = !DILocation(line: 478, column: 5, scope: !4585)
!4590 = !DILocation(line: 479, column: 2, scope: !4585)
!4591 = !DILocation(line: 479, column: 20, scope: !4585)
!4592 = !DILocation(line: 479, column: 5, scope: !4585)
!4593 = !DILocation(line: 477, column: 9, scope: !4582)
!4594 = !DILocation(line: 480, column: 60, scope: !4585)
!4595 = !DILocation(line: 480, column: 66, scope: !4585)
!4596 = !DILocation(line: 480, column: 40, scope: !4585)
!4597 = !DILocation(line: 480, column: 7, scope: !4585)
!4598 = !DILocation(line: 479, column: 23, scope: !4585)
!4599 = !DILocation(line: 476, column: 54, scope: !4582)
!4600 = !DILocation(line: 476, column: 52, scope: !4582)
!4601 = !DILocation(line: 476, column: 3, scope: !4582)
!4602 = distinct !{!4602, !4583, !4603}
!4603 = !DILocation(line: 480, column: 70, scope: !4578)
!4604 = !DILocation(line: 482, column: 3, scope: !4605)
!4605 = distinct !DILexicalBlock(scope: !4565, file: !3, line: 482, column: 3)
!4606 = !DILocation(line: 482, column: 3, scope: !4607)
!4607 = distinct !DILexicalBlock(scope: !4605, file: !3, line: 482, column: 3)
!4608 = !DILocalVariable(name: "gsi", scope: !4609, file: !3, line: 484, type: !4610)
!4609 = distinct !DILexicalBlock(scope: !4607, file: !3, line: 483, column: 5)
!4610 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple_stmt_iterator", file: !1291, line: 265, baseType: !4611)
!4611 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !1291, line: 254, size: 192, elements: !4612)
!4612 = !{!4613, !4614, !4615}
!4613 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !4611, file: !1291, line: 257, baseType: !3215, size: 64)
!4614 = !DIDerivedType(tag: DW_TAG_member, name: "seq", scope: !4611, file: !1291, line: 263, baseType: !3210, size: 64, offset: 64)
!4615 = !DIDerivedType(tag: DW_TAG_member, name: "bb", scope: !4611, file: !1291, line: 264, baseType: !3182, size: 64, offset: 128)
!4616 = !DILocation(line: 484, column: 28, scope: !4609)
!4617 = !DILocalVariable(name: "phi", scope: !4609, file: !3, line: 485, type: !3220)
!4618 = !DILocation(line: 485, column: 14, scope: !4609)
!4619 = !DILocalVariable(name: "def", scope: !4609, file: !3, line: 486, type: !3245)
!4620 = !DILocation(line: 486, column: 12, scope: !4609)
!4621 = !DILocation(line: 488, column: 34, scope: !4622)
!4622 = distinct !DILexicalBlock(scope: !4609, file: !3, line: 488, column: 7)
!4623 = !DILocation(line: 488, column: 18, scope: !4622)
!4624 = !DILocation(line: 488, column: 12, scope: !4622)
!4625 = !DILocation(line: 488, column: 40, scope: !4626)
!4626 = distinct !DILexicalBlock(scope: !4622, file: !3, line: 488, column: 7)
!4627 = !DILocation(line: 488, column: 39, scope: !4626)
!4628 = !DILocation(line: 488, column: 7, scope: !4622)
!4629 = !DILocation(line: 490, column: 10, scope: !4630)
!4630 = distinct !DILexicalBlock(scope: !4626, file: !3, line: 489, column: 2)
!4631 = !DILocation(line: 490, column: 8, scope: !4630)
!4632 = !DILocation(line: 491, column: 10, scope: !4630)
!4633 = !DILocation(line: 491, column: 8, scope: !4630)
!4634 = !DILocation(line: 492, column: 8, scope: !4635)
!4635 = distinct !DILexicalBlock(scope: !4630, file: !3, line: 492, column: 8)
!4636 = !DILocation(line: 493, column: 8, scope: !4635)
!4637 = !DILocation(line: 493, column: 26, scope: !4635)
!4638 = !DILocation(line: 493, column: 11, scope: !4635)
!4639 = !DILocation(line: 492, column: 8, scope: !4630)
!4640 = !DILocation(line: 494, column: 39, scope: !4635)
!4641 = !DILocation(line: 494, column: 6, scope: !4635)
!4642 = !DILocation(line: 495, column: 2, scope: !4630)
!4643 = !DILocation(line: 488, column: 57, scope: !4626)
!4644 = !DILocation(line: 488, column: 7, scope: !4626)
!4645 = distinct !{!4645, !4628, !4646}
!4646 = !DILocation(line: 495, column: 2, scope: !4622)
!4647 = !DILocation(line: 497, column: 36, scope: !4648)
!4648 = distinct !DILexicalBlock(scope: !4609, file: !3, line: 497, column: 7)
!4649 = !DILocation(line: 497, column: 18, scope: !4648)
!4650 = !DILocation(line: 497, column: 12, scope: !4648)
!4651 = !DILocation(line: 497, column: 42, scope: !4652)
!4652 = distinct !DILexicalBlock(scope: !4648, file: !3, line: 497, column: 7)
!4653 = !DILocation(line: 497, column: 41, scope: !4652)
!4654 = !DILocation(line: 497, column: 7, scope: !4648)
!4655 = !DILocalVariable(name: "stmt", scope: !4656, file: !3, line: 499, type: !3220)
!4656 = distinct !DILexicalBlock(scope: !4652, file: !3, line: 498, column: 9)
!4657 = !DILocation(line: 499, column: 11, scope: !4656)
!4658 = !DILocation(line: 499, column: 18, scope: !4656)
!4659 = !DILocation(line: 501, column: 24, scope: !4660)
!4660 = distinct !DILexicalBlock(scope: !4656, file: !3, line: 501, column: 8)
!4661 = !DILocation(line: 501, column: 8, scope: !4660)
!4662 = !DILocation(line: 502, column: 8, scope: !4660)
!4663 = !DILocation(line: 502, column: 18, scope: !4660)
!4664 = !DILocation(line: 502, column: 16, scope: !4660)
!4665 = !DILocation(line: 502, column: 62, scope: !4660)
!4666 = !DILocation(line: 503, column: 8, scope: !4660)
!4667 = !DILocation(line: 503, column: 11, scope: !4660)
!4668 = !DILocation(line: 504, column: 8, scope: !4660)
!4669 = !DILocation(line: 504, column: 11, scope: !4660)
!4670 = !DILocation(line: 504, column: 27, scope: !4660)
!4671 = !DILocation(line: 501, column: 8, scope: !4656)
!4672 = !DILocation(line: 505, column: 39, scope: !4660)
!4673 = !DILocation(line: 505, column: 6, scope: !4660)
!4674 = !DILocation(line: 506, column: 2, scope: !4656)
!4675 = !DILocation(line: 497, column: 59, scope: !4652)
!4676 = !DILocation(line: 497, column: 7, scope: !4652)
!4677 = distinct !{!4677, !4654, !4678}
!4678 = !DILocation(line: 506, column: 2, scope: !4648)
!4679 = !DILocation(line: 508, column: 35, scope: !4680)
!4680 = distinct !DILexicalBlock(scope: !4609, file: !3, line: 508, column: 11)
!4681 = !DILocation(line: 508, column: 11, scope: !4680)
!4682 = !DILocation(line: 508, column: 11, scope: !4609)
!4683 = !DILocation(line: 509, column: 9, scope: !4680)
!4684 = !DILocation(line: 512, column: 36, scope: !4685)
!4685 = distinct !DILexicalBlock(scope: !4609, file: !3, line: 512, column: 7)
!4686 = !DILocation(line: 512, column: 18, scope: !4685)
!4687 = !DILocation(line: 512, column: 12, scope: !4685)
!4688 = !DILocation(line: 512, column: 42, scope: !4689)
!4689 = distinct !DILexicalBlock(scope: !4685, file: !3, line: 512, column: 7)
!4690 = !DILocation(line: 512, column: 41, scope: !4689)
!4691 = !DILocation(line: 512, column: 7, scope: !4685)
!4692 = !DILocalVariable(name: "stmt", scope: !4693, file: !3, line: 514, type: !3220)
!4693 = distinct !DILexicalBlock(scope: !4689, file: !3, line: 513, column: 9)
!4694 = !DILocation(line: 514, column: 11, scope: !4693)
!4695 = !DILocation(line: 514, column: 18, scope: !4693)
!4696 = !DILocalVariable(name: "fndecl", scope: !4693, file: !3, line: 515, type: !3245)
!4697 = !DILocation(line: 515, column: 9, scope: !4693)
!4698 = !DILocation(line: 517, column: 26, scope: !4699)
!4699 = distinct !DILexicalBlock(scope: !4693, file: !3, line: 517, column: 8)
!4700 = !DILocation(line: 517, column: 8, scope: !4699)
!4701 = !DILocation(line: 518, column: 8, scope: !4699)
!4702 = !DILocation(line: 518, column: 35, scope: !4699)
!4703 = !DILocation(line: 518, column: 11, scope: !4699)
!4704 = !DILocation(line: 518, column: 41, scope: !4699)
!4705 = !DILocation(line: 517, column: 8, scope: !4693)
!4706 = !DILocalVariable(name: "arg1", scope: !4707, file: !3, line: 520, type: !3245)
!4707 = distinct !DILexicalBlock(scope: !4699, file: !3, line: 519, column: 6)
!4708 = !DILocation(line: 520, column: 13, scope: !4707)
!4709 = !DILocation(line: 520, column: 40, scope: !4707)
!4710 = !DILocation(line: 520, column: 20, scope: !4707)
!4711 = !DILocalVariable(name: "stmt1", scope: !4707, file: !3, line: 521, type: !3220)
!4712 = !DILocation(line: 521, column: 15, scope: !4707)
!4713 = !DILocation(line: 523, column: 12, scope: !4714)
!4714 = distinct !DILexicalBlock(scope: !4707, file: !3, line: 523, column: 12)
!4715 = !DILocation(line: 523, column: 29, scope: !4714)
!4716 = !DILocation(line: 523, column: 12, scope: !4707)
!4717 = !DILocation(line: 524, column: 3, scope: !4714)
!4718 = !DILocation(line: 526, column: 16, scope: !4707)
!4719 = !DILocation(line: 526, column: 14, scope: !4707)
!4720 = !DILocation(line: 528, column: 28, scope: !4721)
!4721 = distinct !DILexicalBlock(scope: !4707, file: !3, line: 528, column: 12)
!4722 = !DILocation(line: 528, column: 12, scope: !4721)
!4723 = !DILocation(line: 529, column: 5, scope: !4721)
!4724 = !DILocation(line: 529, column: 25, scope: !4721)
!4725 = !DILocation(line: 529, column: 8, scope: !4721)
!4726 = !DILocation(line: 530, column: 5, scope: !4721)
!4727 = !DILocation(line: 530, column: 38, scope: !4721)
!4728 = !DILocation(line: 530, column: 18, scope: !4721)
!4729 = !DILocation(line: 530, column: 16, scope: !4721)
!4730 = !DILocation(line: 531, column: 5, scope: !4721)
!4731 = !DILocation(line: 531, column: 9, scope: !4721)
!4732 = !DILocation(line: 531, column: 38, scope: !4721)
!4733 = !DILocation(line: 532, column: 9, scope: !4721)
!4734 = !DILocation(line: 532, column: 12, scope: !4721)
!4735 = !DILocation(line: 532, column: 41, scope: !4721)
!4736 = !DILocation(line: 528, column: 12, scope: !4707)
!4737 = !DILocalVariable(name: "code", scope: !4738, file: !3, line: 534, type: !570)
!4738 = distinct !DILexicalBlock(scope: !4721, file: !3, line: 533, column: 3)
!4739 = !DILocation(line: 534, column: 28, scope: !4738)
!4740 = !DILocalVariable(name: "md_code", scope: !4738, file: !3, line: 535, type: !3364)
!4741 = !DILocation(line: 535, column: 10, scope: !4738)
!4742 = !DILocalVariable(name: "fail", scope: !4738, file: !3, line: 535, type: !3364)
!4743 = !DILocation(line: 535, column: 19, scope: !4738)
!4744 = !DILocalVariable(name: "ui", scope: !4738, file: !3, line: 536, type: !4745)
!4745 = !DIDerivedType(tag: DW_TAG_typedef, name: "imm_use_iterator", file: !3626, line: 249, baseType: !4746)
!4746 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "immediate_use_iterator_d", file: !3626, line: 238, size: 448, elements: !4747)
!4747 = !{!4748, !4749, !4750, !4751}
!4748 = !DIDerivedType(tag: DW_TAG_member, name: "imm_use", scope: !4746, file: !3626, line: 241, baseType: !4489, size: 64)
!4749 = !DIDerivedType(tag: DW_TAG_member, name: "end_p", scope: !4746, file: !3626, line: 243, baseType: !4489, size: 64, offset: 64)
!4750 = !DIDerivedType(tag: DW_TAG_member, name: "iter_node", scope: !4746, file: !3626, line: 245, baseType: !4490, size: 256, offset: 128)
!4751 = !DIDerivedType(tag: DW_TAG_member, name: "next_imm_name", scope: !4746, file: !3626, line: 248, baseType: !4489, size: 64, offset: 384)
!4752 = !DILocation(line: 536, column: 22, scope: !4738)
!4753 = !DILocalVariable(name: "use_p", scope: !4738, file: !3, line: 537, type: !4488)
!4754 = !DILocation(line: 537, column: 19, scope: !4738)
!4755 = !DILocation(line: 539, column: 12, scope: !4738)
!4756 = !DILocation(line: 539, column: 10, scope: !4738)
!4757 = !DILocation(line: 540, column: 15, scope: !4738)
!4758 = !DILocation(line: 540, column: 44, scope: !4738)
!4759 = !DILocation(line: 540, column: 13, scope: !4738)
!4760 = !DILocation(line: 542, column: 22, scope: !4738)
!4761 = !DILocation(line: 542, column: 42, scope: !4738)
!4762 = !DILocation(line: 542, column: 48, scope: !4738)
!4763 = !DILocation(line: 542, column: 14, scope: !4738)
!4764 = !DILocation(line: 542, column: 12, scope: !4738)
!4765 = !DILocation(line: 543, column: 10, scope: !4766)
!4766 = distinct !DILexicalBlock(scope: !4738, file: !3, line: 543, column: 9)
!4767 = !DILocation(line: 543, column: 9, scope: !4738)
!4768 = !DILocation(line: 544, column: 7, scope: !4766)
!4769 = !DILocation(line: 549, column: 10, scope: !4738)
!4770 = !DILocation(line: 550, column: 5, scope: !4771)
!4771 = distinct !DILexicalBlock(scope: !4738, file: !3, line: 550, column: 5)
!4772 = !DILocation(line: 550, column: 5, scope: !4773)
!4773 = distinct !DILexicalBlock(scope: !4771, file: !3, line: 550, column: 5)
!4774 = !DILocalVariable(name: "stmt2", scope: !4775, file: !3, line: 552, type: !3220)
!4775 = distinct !DILexicalBlock(scope: !4773, file: !3, line: 551, column: 7)
!4776 = !DILocation(line: 552, column: 16, scope: !4775)
!4777 = !DILocation(line: 552, column: 24, scope: !4775)
!4778 = !DILocation(line: 553, column: 30, scope: !4779)
!4779 = distinct !DILexicalBlock(scope: !4775, file: !3, line: 553, column: 13)
!4780 = !DILocation(line: 553, column: 13, scope: !4779)
!4781 = !DILocation(line: 553, column: 13, scope: !4775)
!4782 = !DILocation(line: 554, column: 4, scope: !4779)
!4783 = !DILocation(line: 555, column: 32, scope: !4784)
!4784 = distinct !DILexicalBlock(scope: !4775, file: !3, line: 555, column: 13)
!4785 = !DILocation(line: 555, column: 14, scope: !4784)
!4786 = !DILocation(line: 556, column: 6, scope: !4784)
!4787 = !DILocation(line: 556, column: 33, scope: !4784)
!4788 = !DILocation(line: 556, column: 9, scope: !4784)
!4789 = !DILocation(line: 556, column: 40, scope: !4784)
!4790 = !DILocation(line: 557, column: 6, scope: !4784)
!4791 = !DILocation(line: 557, column: 29, scope: !4784)
!4792 = !DILocation(line: 557, column: 9, scope: !4784)
!4793 = !DILocation(line: 557, column: 39, scope: !4784)
!4794 = !DILocation(line: 557, column: 36, scope: !4784)
!4795 = !DILocation(line: 558, column: 6, scope: !4784)
!4796 = !DILocation(line: 558, column: 29, scope: !4784)
!4797 = !DILocation(line: 558, column: 9, scope: !4784)
!4798 = !DILocation(line: 558, column: 39, scope: !4784)
!4799 = !DILocation(line: 558, column: 36, scope: !4784)
!4800 = !DILocation(line: 555, column: 13, scope: !4775)
!4801 = !DILocation(line: 560, column: 11, scope: !4802)
!4802 = distinct !DILexicalBlock(scope: !4784, file: !3, line: 559, column: 4)
!4803 = !DILocation(line: 561, column: 6, scope: !4802)
!4804 = !DILocation(line: 563, column: 7, scope: !4775)
!4805 = distinct !{!4805, !4770, !4806}
!4806 = !DILocation(line: 563, column: 7, scope: !4771)
!4807 = !DILocation(line: 564, column: 9, scope: !4808)
!4808 = distinct !DILexicalBlock(scope: !4738, file: !3, line: 564, column: 9)
!4809 = !DILocation(line: 564, column: 9, scope: !4738)
!4810 = !DILocation(line: 565, column: 7, scope: !4808)
!4811 = !DILocation(line: 567, column: 25, scope: !4738)
!4812 = !DILocation(line: 567, column: 32, scope: !4738)
!4813 = !DILocation(line: 567, column: 5, scope: !4738)
!4814 = !DILocation(line: 568, column: 29, scope: !4738)
!4815 = !DILocation(line: 568, column: 36, scope: !4738)
!4816 = !DILocation(line: 568, column: 5, scope: !4738)
!4817 = !DILocation(line: 569, column: 18, scope: !4738)
!4818 = !DILocation(line: 569, column: 5, scope: !4738)
!4819 = !DILocation(line: 571, column: 5, scope: !4820)
!4820 = distinct !DILexicalBlock(scope: !4738, file: !3, line: 571, column: 5)
!4821 = !DILocation(line: 571, column: 5, scope: !4822)
!4822 = distinct !DILexicalBlock(scope: !4820, file: !3, line: 571, column: 5)
!4823 = !DILocation(line: 573, column: 37, scope: !4824)
!4824 = distinct !DILexicalBlock(scope: !4822, file: !3, line: 572, column: 7)
!4825 = !DILocation(line: 573, column: 9, scope: !4824)
!4826 = !DILocation(line: 574, column: 28, scope: !4824)
!4827 = !DILocation(line: 574, column: 9, scope: !4824)
!4828 = !DILocation(line: 575, column: 22, scope: !4824)
!4829 = !DILocation(line: 575, column: 9, scope: !4824)
!4830 = !DILocation(line: 576, column: 7, scope: !4824)
!4831 = distinct !{!4831, !4819, !4832}
!4832 = !DILocation(line: 576, column: 7, scope: !4820)
!4833 = !DILocation(line: 577, column: 3, scope: !4738)
!4834 = !DILocation(line: 578, column: 6, scope: !4707)
!4835 = !DILocation(line: 579, column: 2, scope: !4693)
!4836 = !DILocation(line: 512, column: 59, scope: !4689)
!4837 = !DILocation(line: 512, column: 7, scope: !4689)
!4838 = distinct !{!4838, !4691, !4839}
!4839 = !DILocation(line: 579, column: 2, scope: !4685)
!4840 = !DILocation(line: 580, column: 5, scope: !4609)
!4841 = distinct !{!4841, !4604, !4842}
!4842 = !DILocation(line: 580, column: 5, scope: !4605)
!4843 = !DILocation(line: 582, column: 3, scope: !4565)
!4844 = !DILocation(line: 583, column: 3, scope: !4565)
!4845 = !DILocation(line: 584, column: 20, scope: !4565)
!4846 = !DILocation(line: 584, column: 3, scope: !4565)
!4847 = !DILocation(line: 585, column: 3, scope: !4565)
!4848 = distinct !DISubprogram(name: "gate_cse_sincos", scope: !3, file: !3, line: 794, type: !4510, scopeLine: 795, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4559)
!4849 = !DILocation(line: 797, column: 11, scope: !4848)
!4850 = !DILocation(line: 798, column: 4, scope: !4848)
!4851 = !DILocation(line: 798, column: 7, scope: !4848)
!4852 = !DILocation(line: 799, column: 3, scope: !4848)
!4853 = !DILocation(line: 799, column: 6, scope: !4848)
!4854 = !DILocation(line: 0, scope: !4848)
!4855 = !DILocation(line: 797, column: 10, scope: !4848)
!4856 = !DILocation(line: 797, column: 3, scope: !4848)
!4857 = distinct !DISubprogram(name: "execute_cse_sincos", scope: !3, file: !3, line: 751, type: !4514, scopeLine: 752, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4559)
!4858 = !DILocalVariable(name: "bb", scope: !4857, file: !3, line: 753, type: !3182)
!4859 = !DILocation(line: 753, column: 15, scope: !4857)
!4860 = !DILocation(line: 755, column: 3, scope: !4857)
!4861 = !DILocation(line: 757, column: 3, scope: !4862)
!4862 = distinct !DILexicalBlock(scope: !4857, file: !3, line: 757, column: 3)
!4863 = !DILocation(line: 757, column: 3, scope: !4864)
!4864 = distinct !DILexicalBlock(scope: !4862, file: !3, line: 757, column: 3)
!4865 = !DILocalVariable(name: "gsi", scope: !4866, file: !3, line: 759, type: !4610)
!4866 = distinct !DILexicalBlock(scope: !4864, file: !3, line: 758, column: 5)
!4867 = !DILocation(line: 759, column: 28, scope: !4866)
!4868 = !DILocation(line: 761, column: 36, scope: !4869)
!4869 = distinct !DILexicalBlock(scope: !4866, file: !3, line: 761, column: 7)
!4870 = !DILocation(line: 761, column: 18, scope: !4869)
!4871 = !DILocation(line: 761, column: 12, scope: !4869)
!4872 = !DILocation(line: 761, column: 42, scope: !4873)
!4873 = distinct !DILexicalBlock(scope: !4869, file: !3, line: 761, column: 7)
!4874 = !DILocation(line: 761, column: 41, scope: !4873)
!4875 = !DILocation(line: 761, column: 7, scope: !4869)
!4876 = !DILocalVariable(name: "stmt", scope: !4877, file: !3, line: 763, type: !3220)
!4877 = distinct !DILexicalBlock(scope: !4873, file: !3, line: 762, column: 9)
!4878 = !DILocation(line: 763, column: 11, scope: !4877)
!4879 = !DILocation(line: 763, column: 18, scope: !4877)
!4880 = !DILocalVariable(name: "fndecl", scope: !4877, file: !3, line: 764, type: !3245)
!4881 = !DILocation(line: 764, column: 9, scope: !4877)
!4882 = !DILocation(line: 766, column: 24, scope: !4883)
!4883 = distinct !DILexicalBlock(scope: !4877, file: !3, line: 766, column: 8)
!4884 = !DILocation(line: 766, column: 8, scope: !4883)
!4885 = !DILocation(line: 767, column: 8, scope: !4883)
!4886 = !DILocation(line: 767, column: 28, scope: !4883)
!4887 = !DILocation(line: 767, column: 11, scope: !4883)
!4888 = !DILocation(line: 768, column: 8, scope: !4883)
!4889 = !DILocation(line: 768, column: 41, scope: !4883)
!4890 = !DILocation(line: 768, column: 21, scope: !4883)
!4891 = !DILocation(line: 768, column: 19, scope: !4883)
!4892 = !DILocation(line: 769, column: 8, scope: !4883)
!4893 = !DILocation(line: 769, column: 11, scope: !4883)
!4894 = !DILocation(line: 769, column: 40, scope: !4883)
!4895 = !DILocation(line: 766, column: 8, scope: !4877)
!4896 = !DILocalVariable(name: "arg", scope: !4897, file: !3, line: 771, type: !3245)
!4897 = distinct !DILexicalBlock(scope: !4883, file: !3, line: 770, column: 6)
!4898 = !DILocation(line: 771, column: 13, scope: !4897)
!4899 = !DILocation(line: 773, column: 16, scope: !4897)
!4900 = !DILocation(line: 773, column: 8, scope: !4897)
!4901 = !DILocation(line: 778, column: 28, scope: !4902)
!4902 = distinct !DILexicalBlock(scope: !4897, file: !3, line: 774, column: 3)
!4903 = !DILocation(line: 778, column: 11, scope: !4902)
!4904 = !DILocation(line: 778, column: 9, scope: !4902)
!4905 = !DILocation(line: 779, column: 9, scope: !4906)
!4906 = distinct !DILexicalBlock(scope: !4902, file: !3, line: 779, column: 9)
!4907 = !DILocation(line: 779, column: 25, scope: !4906)
!4908 = !DILocation(line: 779, column: 9, scope: !4902)
!4909 = !DILocation(line: 780, column: 29, scope: !4906)
!4910 = !DILocation(line: 780, column: 7, scope: !4906)
!4911 = !DILocation(line: 781, column: 5, scope: !4902)
!4912 = !DILocation(line: 784, column: 3, scope: !4902)
!4913 = !DILocation(line: 785, column: 6, scope: !4897)
!4914 = !DILocation(line: 786, column: 2, scope: !4877)
!4915 = !DILocation(line: 761, column: 59, scope: !4873)
!4916 = !DILocation(line: 761, column: 7, scope: !4873)
!4917 = distinct !{!4917, !4875, !4918}
!4918 = !DILocation(line: 786, column: 2, scope: !4869)
!4919 = !DILocation(line: 787, column: 5, scope: !4866)
!4920 = distinct !{!4920, !4861, !4921}
!4921 = !DILocation(line: 787, column: 5, scope: !4862)
!4922 = !DILocation(line: 789, column: 3, scope: !4857)
!4923 = !DILocation(line: 790, column: 3, scope: !4857)
!4924 = distinct !DISubprogram(name: "gate_optimize_bswap", scope: !3, file: !3, line: 1240, type: !4510, scopeLine: 1241, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4559)
!4925 = !DILocation(line: 1242, column: 10, scope: !4924)
!4926 = !DILocation(line: 1242, column: 39, scope: !4924)
!4927 = !DILocation(line: 1242, column: 42, scope: !4924)
!4928 = !DILocation(line: 0, scope: !4924)
!4929 = !DILocation(line: 1242, column: 3, scope: !4924)
!4930 = distinct !DISubprogram(name: "execute_optimize_bswap", scope: !3, file: !3, line: 1101, type: !4514, scopeLine: 1102, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4559)
!4931 = !DILocalVariable(name: "bb", scope: !4930, file: !3, line: 1103, type: !3182)
!4932 = !DILocation(line: 1103, column: 15, scope: !4930)
!4933 = !DILocalVariable(name: "bswap32_p", scope: !4930, file: !3, line: 1104, type: !3364)
!4934 = !DILocation(line: 1104, column: 8, scope: !4930)
!4935 = !DILocalVariable(name: "bswap64_p", scope: !4930, file: !3, line: 1104, type: !3364)
!4936 = !DILocation(line: 1104, column: 19, scope: !4930)
!4937 = !DILocalVariable(name: "changed", scope: !4930, file: !3, line: 1105, type: !3364)
!4938 = !DILocation(line: 1105, column: 8, scope: !4930)
!4939 = !DILocalVariable(name: "bswap32_type", scope: !4930, file: !3, line: 1106, type: !3245)
!4940 = !DILocation(line: 1106, column: 8, scope: !4930)
!4941 = !DILocalVariable(name: "bswap64_type", scope: !4930, file: !3, line: 1106, type: !3245)
!4942 = !DILocation(line: 1106, column: 34, scope: !4930)
!4943 = !DILocation(line: 1114, column: 16, scope: !4930)
!4944 = !DILocation(line: 1115, column: 9, scope: !4930)
!4945 = !DILocation(line: 1115, column: 49, scope: !4930)
!4946 = !DILocation(line: 1115, column: 59, scope: !4930)
!4947 = !DILocation(line: 0, scope: !4930)
!4948 = !DILocation(line: 1114, column: 15, scope: !4930)
!4949 = !DILocation(line: 1114, column: 13, scope: !4930)
!4950 = !DILocation(line: 1117, column: 16, scope: !4930)
!4951 = !DILocation(line: 1118, column: 9, scope: !4930)
!4952 = !DILocation(line: 1118, column: 50, scope: !4930)
!4953 = !DILocation(line: 1118, column: 60, scope: !4930)
!4954 = !DILocation(line: 1120, column: 6, scope: !4930)
!4955 = !DILocation(line: 1120, column: 10, scope: !4930)
!4956 = !DILocation(line: 1120, column: 20, scope: !4930)
!4957 = !DILocation(line: 1120, column: 23, scope: !4930)
!4958 = !DILocation(line: 1120, column: 33, scope: !4930)
!4959 = !DILocation(line: 1117, column: 15, scope: !4930)
!4960 = !DILocation(line: 1117, column: 13, scope: !4930)
!4961 = !DILocation(line: 1122, column: 8, scope: !4962)
!4962 = distinct !DILexicalBlock(scope: !4930, file: !3, line: 1122, column: 7)
!4963 = !DILocation(line: 1122, column: 18, scope: !4962)
!4964 = !DILocation(line: 1122, column: 22, scope: !4962)
!4965 = !DILocation(line: 1122, column: 7, scope: !4930)
!4966 = !DILocation(line: 1123, column: 5, scope: !4962)
!4967 = !DILocation(line: 1127, column: 7, scope: !4968)
!4968 = distinct !DILexicalBlock(scope: !4930, file: !3, line: 1127, column: 7)
!4969 = !DILocation(line: 1127, column: 7, scope: !4930)
!4970 = !DILocalVariable(name: "fndecl", scope: !4971, file: !3, line: 1129, type: !3245)
!4971 = distinct !DILexicalBlock(scope: !4968, file: !3, line: 1128, column: 5)
!4972 = !DILocation(line: 1129, column: 12, scope: !4971)
!4973 = !DILocation(line: 1129, column: 21, scope: !4971)
!4974 = !DILocation(line: 1130, column: 22, scope: !4971)
!4975 = !DILocation(line: 1130, column: 20, scope: !4971)
!4976 = !DILocation(line: 1131, column: 5, scope: !4971)
!4977 = !DILocation(line: 1133, column: 7, scope: !4978)
!4978 = distinct !DILexicalBlock(scope: !4930, file: !3, line: 1133, column: 7)
!4979 = !DILocation(line: 1133, column: 7, scope: !4930)
!4980 = !DILocalVariable(name: "fndecl", scope: !4981, file: !3, line: 1135, type: !3245)
!4981 = distinct !DILexicalBlock(scope: !4978, file: !3, line: 1134, column: 5)
!4982 = !DILocation(line: 1135, column: 12, scope: !4981)
!4983 = !DILocation(line: 1135, column: 21, scope: !4981)
!4984 = !DILocation(line: 1136, column: 22, scope: !4981)
!4985 = !DILocation(line: 1136, column: 20, scope: !4981)
!4986 = !DILocation(line: 1137, column: 5, scope: !4981)
!4987 = !DILocation(line: 1139, column: 3, scope: !4988)
!4988 = distinct !DILexicalBlock(scope: !4930, file: !3, line: 1139, column: 3)
!4989 = !DILocation(line: 1139, column: 3, scope: !4990)
!4990 = distinct !DILexicalBlock(scope: !4988, file: !3, line: 1139, column: 3)
!4991 = !DILocalVariable(name: "gsi", scope: !4992, file: !3, line: 1141, type: !4610)
!4992 = distinct !DILexicalBlock(scope: !4990, file: !3, line: 1140, column: 5)
!4993 = !DILocation(line: 1141, column: 28, scope: !4992)
!4994 = !DILocation(line: 1143, column: 36, scope: !4995)
!4995 = distinct !DILexicalBlock(scope: !4992, file: !3, line: 1143, column: 7)
!4996 = !DILocation(line: 1143, column: 18, scope: !4995)
!4997 = !DILocation(line: 1143, column: 12, scope: !4995)
!4998 = !DILocation(line: 1143, column: 42, scope: !4999)
!4999 = distinct !DILexicalBlock(scope: !4995, file: !3, line: 1143, column: 7)
!5000 = !DILocation(line: 1143, column: 41, scope: !4999)
!5001 = !DILocation(line: 1143, column: 7, scope: !4995)
!5002 = !DILocalVariable(name: "stmt", scope: !5003, file: !3, line: 1145, type: !3220)
!5003 = distinct !DILexicalBlock(scope: !4999, file: !3, line: 1144, column: 9)
!5004 = !DILocation(line: 1145, column: 11, scope: !5003)
!5005 = !DILocation(line: 1145, column: 18, scope: !5003)
!5006 = !DILocalVariable(name: "bswap_src", scope: !5003, file: !3, line: 1146, type: !3245)
!5007 = !DILocation(line: 1146, column: 9, scope: !5003)
!5008 = !DILocalVariable(name: "bswap_type", scope: !5003, file: !3, line: 1146, type: !3245)
!5009 = !DILocation(line: 1146, column: 20, scope: !5003)
!5010 = !DILocalVariable(name: "bswap_tmp", scope: !5003, file: !3, line: 1147, type: !3245)
!5011 = !DILocation(line: 1147, column: 9, scope: !5003)
!5012 = !DILocalVariable(name: "fndecl", scope: !5003, file: !3, line: 1148, type: !3245)
!5013 = !DILocation(line: 1148, column: 9, scope: !5003)
!5014 = !DILocalVariable(name: "type_size", scope: !5003, file: !3, line: 1149, type: !3341)
!5015 = !DILocation(line: 1149, column: 8, scope: !5003)
!5016 = !DILocalVariable(name: "call", scope: !5003, file: !3, line: 1150, type: !3220)
!5017 = !DILocation(line: 1150, column: 11, scope: !5003)
!5018 = !DILocation(line: 1152, column: 27, scope: !5019)
!5019 = distinct !DILexicalBlock(scope: !5003, file: !3, line: 1152, column: 8)
!5020 = !DILocation(line: 1152, column: 9, scope: !5019)
!5021 = !DILocation(line: 1153, column: 8, scope: !5019)
!5022 = !DILocation(line: 1153, column: 35, scope: !5019)
!5023 = !DILocation(line: 1153, column: 11, scope: !5019)
!5024 = !DILocation(line: 1153, column: 41, scope: !5019)
!5025 = !DILocation(line: 1152, column: 8, scope: !5003)
!5026 = !DILocation(line: 1154, column: 6, scope: !5019)
!5027 = !DILocation(line: 1156, column: 16, scope: !5003)
!5028 = !DILocation(line: 1156, column: 14, scope: !5003)
!5029 = !DILocation(line: 1158, column: 12, scope: !5003)
!5030 = !DILocation(line: 1158, column: 4, scope: !5003)
!5031 = !DILocation(line: 1161, column: 12, scope: !5032)
!5032 = distinct !DILexicalBlock(scope: !5033, file: !3, line: 1161, column: 12)
!5033 = distinct !DILexicalBlock(scope: !5003, file: !3, line: 1159, column: 6)
!5034 = !DILocation(line: 1161, column: 12, scope: !5033)
!5035 = !DILocation(line: 1163, column: 14, scope: !5036)
!5036 = distinct !DILexicalBlock(scope: !5032, file: !3, line: 1162, column: 3)
!5037 = !DILocation(line: 1163, column: 12, scope: !5036)
!5038 = !DILocation(line: 1164, column: 18, scope: !5036)
!5039 = !DILocation(line: 1164, column: 16, scope: !5036)
!5040 = !DILocation(line: 1165, column: 3, scope: !5036)
!5041 = !DILocation(line: 1166, column: 8, scope: !5033)
!5042 = !DILocation(line: 1168, column: 12, scope: !5043)
!5043 = distinct !DILexicalBlock(scope: !5033, file: !3, line: 1168, column: 12)
!5044 = !DILocation(line: 1168, column: 12, scope: !5033)
!5045 = !DILocation(line: 1170, column: 14, scope: !5046)
!5046 = distinct !DILexicalBlock(scope: !5043, file: !3, line: 1169, column: 3)
!5047 = !DILocation(line: 1170, column: 12, scope: !5046)
!5048 = !DILocation(line: 1171, column: 18, scope: !5046)
!5049 = !DILocation(line: 1171, column: 16, scope: !5046)
!5050 = !DILocation(line: 1172, column: 3, scope: !5046)
!5051 = !DILocation(line: 1173, column: 8, scope: !5033)
!5052 = !DILocation(line: 1175, column: 8, scope: !5033)
!5053 = !DILocation(line: 1178, column: 9, scope: !5054)
!5054 = distinct !DILexicalBlock(scope: !5003, file: !3, line: 1178, column: 8)
!5055 = !DILocation(line: 1178, column: 8, scope: !5003)
!5056 = !DILocation(line: 1179, column: 6, scope: !5054)
!5057 = !DILocation(line: 1181, column: 28, scope: !5003)
!5058 = !DILocation(line: 1181, column: 16, scope: !5003)
!5059 = !DILocation(line: 1181, column: 14, scope: !5003)
!5060 = !DILocation(line: 1183, column: 9, scope: !5061)
!5061 = distinct !DILexicalBlock(scope: !5003, file: !3, line: 1183, column: 8)
!5062 = !DILocation(line: 1183, column: 8, scope: !5003)
!5063 = !DILocation(line: 1184, column: 6, scope: !5061)
!5064 = !DILocation(line: 1186, column: 12, scope: !5003)
!5065 = !DILocation(line: 1188, column: 16, scope: !5003)
!5066 = !DILocation(line: 1188, column: 14, scope: !5003)
!5067 = !DILocation(line: 1191, column: 36, scope: !5068)
!5068 = distinct !DILexicalBlock(scope: !5003, file: !3, line: 1191, column: 8)
!5069 = !DILocation(line: 1191, column: 59, scope: !5068)
!5070 = !DILocation(line: 1191, column: 9, scope: !5068)
!5071 = !DILocation(line: 1191, column: 8, scope: !5003)
!5072 = !DILocalVariable(name: "convert_stmt", scope: !5073, file: !3, line: 1193, type: !3220)
!5073 = distinct !DILexicalBlock(scope: !5068, file: !3, line: 1192, column: 6)
!5074 = !DILocation(line: 1193, column: 15, scope: !5073)
!5075 = !DILocation(line: 1195, column: 36, scope: !5073)
!5076 = !DILocation(line: 1195, column: 20, scope: !5073)
!5077 = !DILocation(line: 1195, column: 18, scope: !5073)
!5078 = !DILocation(line: 1196, column: 28, scope: !5073)
!5079 = !DILocation(line: 1196, column: 8, scope: !5073)
!5080 = !DILocation(line: 1197, column: 35, scope: !5073)
!5081 = !DILocation(line: 1197, column: 20, scope: !5073)
!5082 = !DILocation(line: 1197, column: 18, scope: !5073)
!5083 = !DILocation(line: 1199, column: 23, scope: !5073)
!5084 = !DILocation(line: 1199, column: 21, scope: !5073)
!5085 = !DILocation(line: 1201, column: 33, scope: !5073)
!5086 = !DILocation(line: 1201, column: 8, scope: !5073)
!5087 = !DILocation(line: 1202, column: 6, scope: !5073)
!5088 = !DILocation(line: 1204, column: 30, scope: !5003)
!5089 = !DILocation(line: 1204, column: 41, scope: !5003)
!5090 = !DILocation(line: 1204, column: 11, scope: !5003)
!5091 = !DILocation(line: 1204, column: 9, scope: !5003)
!5092 = !DILocation(line: 1206, column: 35, scope: !5003)
!5093 = !DILocation(line: 1206, column: 16, scope: !5003)
!5094 = !DILocation(line: 1206, column: 14, scope: !5003)
!5095 = !DILocation(line: 1209, column: 36, scope: !5096)
!5096 = distinct !DILexicalBlock(scope: !5003, file: !3, line: 1209, column: 8)
!5097 = !DILocation(line: 1209, column: 59, scope: !5096)
!5098 = !DILocation(line: 1209, column: 9, scope: !5096)
!5099 = !DILocation(line: 1209, column: 8, scope: !5003)
!5100 = !DILocalVariable(name: "convert_stmt", scope: !5101, file: !3, line: 1211, type: !3220)
!5101 = distinct !DILexicalBlock(scope: !5096, file: !3, line: 1210, column: 6)
!5102 = !DILocation(line: 1211, column: 15, scope: !5101)
!5103 = !DILocation(line: 1213, column: 36, scope: !5101)
!5104 = !DILocation(line: 1213, column: 20, scope: !5101)
!5105 = !DILocation(line: 1213, column: 18, scope: !5101)
!5106 = !DILocation(line: 1214, column: 28, scope: !5101)
!5107 = !DILocation(line: 1214, column: 8, scope: !5101)
!5108 = !DILocation(line: 1215, column: 35, scope: !5101)
!5109 = !DILocation(line: 1215, column: 20, scope: !5101)
!5110 = !DILocation(line: 1215, column: 18, scope: !5101)
!5111 = !DILocation(line: 1216, column: 23, scope: !5101)
!5112 = !DILocation(line: 1216, column: 21, scope: !5101)
!5113 = !DILocation(line: 1218, column: 32, scope: !5101)
!5114 = !DILocation(line: 1218, column: 8, scope: !5101)
!5115 = !DILocation(line: 1219, column: 6, scope: !5101)
!5116 = !DILocation(line: 1221, column: 25, scope: !5003)
!5117 = !DILocation(line: 1221, column: 31, scope: !5003)
!5118 = !DILocation(line: 1221, column: 4, scope: !5003)
!5119 = !DILocation(line: 1223, column: 8, scope: !5120)
!5120 = distinct !DILexicalBlock(scope: !5003, file: !3, line: 1223, column: 8)
!5121 = !DILocation(line: 1223, column: 8, scope: !5003)
!5122 = !DILocation(line: 1225, column: 17, scope: !5123)
!5123 = distinct !DILexicalBlock(scope: !5120, file: !3, line: 1224, column: 6)
!5124 = !DILocation(line: 1226, column: 15, scope: !5123)
!5125 = !DILocation(line: 1225, column: 8, scope: !5123)
!5126 = !DILocation(line: 1227, column: 27, scope: !5123)
!5127 = !DILocation(line: 1227, column: 38, scope: !5123)
!5128 = !DILocation(line: 1227, column: 8, scope: !5123)
!5129 = !DILocation(line: 1228, column: 6, scope: !5123)
!5130 = !DILocation(line: 1230, column: 28, scope: !5003)
!5131 = !DILocation(line: 1230, column: 4, scope: !5003)
!5132 = !DILocation(line: 1231, column: 4, scope: !5003)
!5133 = !DILocation(line: 1232, column: 2, scope: !5003)
!5134 = !DILocation(line: 1143, column: 59, scope: !4999)
!5135 = !DILocation(line: 1143, column: 7, scope: !4999)
!5136 = distinct !{!5136, !5001, !5137}
!5137 = !DILocation(line: 1232, column: 2, scope: !4995)
!5138 = !DILocation(line: 1233, column: 5, scope: !4992)
!5139 = distinct !{!5139, !4987, !5140}
!5140 = !DILocation(line: 1233, column: 5, scope: !4988)
!5141 = !DILocation(line: 1235, column: 11, scope: !4930)
!5142 = !DILocation(line: 1235, column: 3, scope: !4930)
!5143 = !DILocation(line: 1237, column: 1, scope: !4930)
!5144 = distinct !DISubprogram(name: "execute_cse_reciprocals_1", scope: !3, file: !3, line: 404, type: !5145, scopeLine: 405, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4559)
!5145 = !DISubroutineType(types: !5146)
!5146 = !{null, !5147, !3245}
!5147 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4610, size: 64)
!5148 = !DILocalVariable(name: "def_gsi", arg: 1, scope: !5144, file: !3, line: 404, type: !5147)
!5149 = !DILocation(line: 404, column: 50, scope: !5144)
!5150 = !DILocalVariable(name: "def", arg: 2, scope: !5144, file: !3, line: 404, type: !3245)
!5151 = !DILocation(line: 404, column: 64, scope: !5144)
!5152 = !DILocalVariable(name: "use_p", scope: !5144, file: !3, line: 406, type: !4488)
!5153 = !DILocation(line: 406, column: 17, scope: !5144)
!5154 = !DILocalVariable(name: "use_iter", scope: !5144, file: !3, line: 407, type: !4745)
!5155 = !DILocation(line: 407, column: 20, scope: !5144)
!5156 = !DILocalVariable(name: "occ", scope: !5144, file: !3, line: 408, type: !3178)
!5157 = !DILocation(line: 408, column: 22, scope: !5144)
!5158 = !DILocalVariable(name: "count", scope: !5144, file: !3, line: 409, type: !3341)
!5159 = !DILocation(line: 409, column: 7, scope: !5144)
!5160 = !DILocalVariable(name: "threshold", scope: !5144, file: !3, line: 409, type: !3341)
!5161 = !DILocation(line: 409, column: 18, scope: !5144)
!5162 = !DILocation(line: 411, column: 3, scope: !5144)
!5163 = !DILocation(line: 413, column: 3, scope: !5164)
!5164 = distinct !DILexicalBlock(scope: !5144, file: !3, line: 413, column: 3)
!5165 = !DILocation(line: 413, column: 3, scope: !5166)
!5166 = distinct !DILexicalBlock(scope: !5164, file: !3, line: 413, column: 3)
!5167 = !DILocalVariable(name: "use_stmt", scope: !5168, file: !3, line: 415, type: !3220)
!5168 = distinct !DILexicalBlock(scope: !5166, file: !3, line: 414, column: 5)
!5169 = !DILocation(line: 415, column: 14, scope: !5168)
!5170 = !DILocation(line: 415, column: 25, scope: !5168)
!5171 = !DILocation(line: 416, column: 27, scope: !5172)
!5172 = distinct !DILexicalBlock(scope: !5168, file: !3, line: 416, column: 11)
!5173 = !DILocation(line: 416, column: 37, scope: !5172)
!5174 = !DILocation(line: 416, column: 11, scope: !5172)
!5175 = !DILocation(line: 416, column: 11, scope: !5168)
!5176 = !DILocation(line: 418, column: 37, scope: !5177)
!5177 = distinct !DILexicalBlock(scope: !5172, file: !3, line: 417, column: 2)
!5178 = !DILocation(line: 418, column: 26, scope: !5177)
!5179 = !DILocation(line: 418, column: 4, scope: !5177)
!5180 = !DILocation(line: 419, column: 9, scope: !5177)
!5181 = !DILocation(line: 420, column: 2, scope: !5177)
!5182 = !DILocation(line: 421, column: 5, scope: !5168)
!5183 = distinct !{!5183, !5163, !5184}
!5184 = !DILocation(line: 421, column: 5, scope: !5164)
!5185 = !DILocation(line: 424, column: 23, scope: !5144)
!5186 = !DILocation(line: 424, column: 52, scope: !5144)
!5187 = !DILocation(line: 424, column: 15, scope: !5144)
!5188 = !DILocation(line: 424, column: 13, scope: !5144)
!5189 = !DILocation(line: 425, column: 7, scope: !5190)
!5190 = distinct !DILexicalBlock(scope: !5144, file: !3, line: 425, column: 7)
!5191 = !DILocation(line: 425, column: 16, scope: !5190)
!5192 = !DILocation(line: 425, column: 13, scope: !5190)
!5193 = !DILocation(line: 425, column: 7, scope: !5144)
!5194 = !DILocalVariable(name: "use_stmt", scope: !5195, file: !3, line: 427, type: !3220)
!5195 = distinct !DILexicalBlock(scope: !5190, file: !3, line: 426, column: 5)
!5196 = !DILocation(line: 427, column: 14, scope: !5195)
!5197 = !DILocation(line: 428, column: 18, scope: !5198)
!5198 = distinct !DILexicalBlock(scope: !5195, file: !3, line: 428, column: 7)
!5199 = !DILocation(line: 428, column: 16, scope: !5198)
!5200 = !DILocation(line: 428, column: 12, scope: !5198)
!5201 = !DILocation(line: 428, column: 28, scope: !5202)
!5202 = distinct !DILexicalBlock(scope: !5198, file: !3, line: 428, column: 7)
!5203 = !DILocation(line: 428, column: 7, scope: !5198)
!5204 = !DILocation(line: 430, column: 19, scope: !5205)
!5205 = distinct !DILexicalBlock(scope: !5202, file: !3, line: 429, column: 2)
!5206 = !DILocation(line: 430, column: 4, scope: !5205)
!5207 = !DILocation(line: 431, column: 24, scope: !5205)
!5208 = !DILocation(line: 431, column: 33, scope: !5205)
!5209 = !DILocation(line: 431, column: 38, scope: !5205)
!5210 = !DILocation(line: 431, column: 49, scope: !5205)
!5211 = !DILocation(line: 431, column: 4, scope: !5205)
!5212 = !DILocation(line: 432, column: 2, scope: !5205)
!5213 = !DILocation(line: 428, column: 39, scope: !5202)
!5214 = !DILocation(line: 428, column: 44, scope: !5202)
!5215 = !DILocation(line: 428, column: 37, scope: !5202)
!5216 = !DILocation(line: 428, column: 7, scope: !5202)
!5217 = distinct !{!5217, !5203, !5218}
!5218 = !DILocation(line: 432, column: 2, scope: !5198)
!5219 = !DILocation(line: 434, column: 7, scope: !5220)
!5220 = distinct !DILexicalBlock(scope: !5195, file: !3, line: 434, column: 7)
!5221 = !DILocation(line: 434, column: 7, scope: !5222)
!5222 = distinct !DILexicalBlock(scope: !5220, file: !3, line: 434, column: 7)
!5223 = !DILocation(line: 436, column: 24, scope: !5224)
!5224 = distinct !DILexicalBlock(scope: !5225, file: !3, line: 436, column: 8)
!5225 = distinct !DILexicalBlock(scope: !5222, file: !3, line: 435, column: 2)
!5226 = !DILocation(line: 436, column: 34, scope: !5224)
!5227 = !DILocation(line: 436, column: 8, scope: !5224)
!5228 = !DILocation(line: 436, column: 8, scope: !5225)
!5229 = !DILocation(line: 438, column: 8, scope: !5230)
!5230 = distinct !DILexicalBlock(scope: !5231, file: !3, line: 438, column: 8)
!5231 = distinct !DILexicalBlock(scope: !5224, file: !3, line: 437, column: 6)
!5232 = !DILocation(line: 438, column: 8, scope: !5233)
!5233 = distinct !DILexicalBlock(scope: !5230, file: !3, line: 438, column: 8)
!5234 = !DILocation(line: 439, column: 23, scope: !5233)
!5235 = !DILocation(line: 439, column: 3, scope: !5233)
!5236 = distinct !{!5236, !5229, !5237}
!5237 = !DILocation(line: 439, column: 28, scope: !5230)
!5238 = !DILocation(line: 440, column: 6, scope: !5231)
!5239 = !DILocation(line: 441, column: 2, scope: !5225)
!5240 = distinct !{!5240, !5219, !5241}
!5241 = !DILocation(line: 441, column: 2, scope: !5220)
!5242 = !DILocation(line: 442, column: 5, scope: !5195)
!5243 = !DILocation(line: 444, column: 14, scope: !5244)
!5244 = distinct !DILexicalBlock(scope: !5144, file: !3, line: 444, column: 3)
!5245 = !DILocation(line: 444, column: 12, scope: !5244)
!5246 = !DILocation(line: 444, column: 8, scope: !5244)
!5247 = !DILocation(line: 444, column: 24, scope: !5248)
!5248 = distinct !DILexicalBlock(scope: !5244, file: !3, line: 444, column: 3)
!5249 = !DILocation(line: 444, column: 3, scope: !5244)
!5250 = !DILocation(line: 445, column: 20, scope: !5248)
!5251 = !DILocation(line: 445, column: 11, scope: !5248)
!5252 = !DILocation(line: 445, column: 9, scope: !5248)
!5253 = !DILocation(line: 444, column: 3, scope: !5248)
!5254 = distinct !{!5254, !5249, !5255}
!5255 = !DILocation(line: 445, column: 23, scope: !5244)
!5256 = !DILocation(line: 447, column: 12, scope: !5144)
!5257 = !DILocation(line: 448, column: 1, scope: !5144)
!5258 = distinct !DISubprogram(name: "gsi_end_p", scope: !1291, file: !1291, line: 4467, type: !5259, scopeLine: 4468, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4559)
!5259 = !DISubroutineType(types: !5260)
!5260 = !{!3364, !4610}
!5261 = !DILocalVariable(name: "i", arg: 1, scope: !5258, file: !1291, line: 4467, type: !4610)
!5262 = !DILocation(line: 4467, column: 33, scope: !5258)
!5263 = !DILocation(line: 4469, column: 12, scope: !5258)
!5264 = !DILocation(line: 4469, column: 16, scope: !5258)
!5265 = !DILocation(line: 4469, column: 10, scope: !5258)
!5266 = !DILocation(line: 4469, column: 3, scope: !5258)
!5267 = distinct !DISubprogram(name: "gsi_stmt", scope: !1291, file: !1291, line: 4501, type: !5268, scopeLine: 4502, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4559)
!5268 = !DISubroutineType(types: !5269)
!5269 = !{!3220, !4610}
!5270 = !DILocalVariable(name: "i", arg: 1, scope: !5267, file: !1291, line: 4501, type: !4610)
!5271 = !DILocation(line: 4501, column: 32, scope: !5267)
!5272 = !DILocation(line: 4503, column: 12, scope: !5267)
!5273 = !DILocation(line: 4503, column: 17, scope: !5267)
!5274 = !DILocation(line: 4503, column: 3, scope: !5267)
!5275 = distinct !DISubprogram(name: "get_def_from_ptr", scope: !5276, file: !5276, line: 434, type: !5277, scopeLine: 435, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4559)
!5276 = !DIFile(filename: "./tree-flow-inline.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!5277 = !DISubroutineType(types: !5278)
!5278 = !{!3245, !5279}
!5279 = !DIDerivedType(tag: DW_TAG_typedef, name: "def_operand_p", file: !1349, line: 27, baseType: !3834)
!5280 = !DILocalVariable(name: "def", arg: 1, scope: !5275, file: !5276, line: 434, type: !5279)
!5281 = !DILocation(line: 434, column: 33, scope: !5275)
!5282 = !DILocation(line: 436, column: 11, scope: !5275)
!5283 = !DILocation(line: 436, column: 10, scope: !5275)
!5284 = !DILocation(line: 436, column: 3, scope: !5275)
!5285 = distinct !DISubprogram(name: "gimple_phi_result_ptr", scope: !1291, file: !1291, line: 3080, type: !5286, scopeLine: 3081, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4559)
!5286 = !DISubroutineType(types: !5287)
!5287 = !{!3834, !3220}
!5288 = !DILocalVariable(name: "gs", arg: 1, scope: !5285, file: !1291, line: 3080, type: !3220)
!5289 = !DILocation(line: 3080, column: 31, scope: !5285)
!5290 = !DILocation(line: 3083, column: 11, scope: !5285)
!5291 = !DILocation(line: 3083, column: 15, scope: !5285)
!5292 = !DILocation(line: 3083, column: 26, scope: !5285)
!5293 = !DILocation(line: 3083, column: 3, scope: !5285)
!5294 = distinct !DISubprogram(name: "gsi_next", scope: !1291, file: !1291, line: 4485, type: !5295, scopeLine: 4486, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4559)
!5295 = !DISubroutineType(types: !5296)
!5296 = !{null, !5147}
!5297 = !DILocalVariable(name: "i", arg: 1, scope: !5294, file: !1291, line: 4485, type: !5147)
!5298 = !DILocation(line: 4485, column: 33, scope: !5294)
!5299 = !DILocation(line: 4487, column: 12, scope: !5294)
!5300 = !DILocation(line: 4487, column: 15, scope: !5294)
!5301 = !DILocation(line: 4487, column: 20, scope: !5294)
!5302 = !DILocation(line: 4487, column: 3, scope: !5294)
!5303 = !DILocation(line: 4487, column: 6, scope: !5294)
!5304 = !DILocation(line: 4487, column: 10, scope: !5294)
!5305 = !DILocation(line: 4488, column: 1, scope: !5294)
!5306 = distinct !DISubprogram(name: "gsi_after_labels", scope: !1291, file: !1291, line: 4510, type: !5307, scopeLine: 4511, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4559)
!5307 = !DISubroutineType(types: !5308)
!5308 = !{!4610, !3182}
!5309 = !DILocalVariable(name: "bb", arg: 1, scope: !5306, file: !1291, line: 4510, type: !3182)
!5310 = !DILocation(line: 4510, column: 31, scope: !5306)
!5311 = !DILocalVariable(name: "gsi", scope: !5306, file: !1291, line: 4512, type: !4610)
!5312 = !DILocation(line: 4512, column: 24, scope: !5306)
!5313 = !DILocation(line: 4512, column: 44, scope: !5306)
!5314 = !DILocation(line: 4512, column: 30, scope: !5306)
!5315 = !DILocation(line: 4514, column: 3, scope: !5306)
!5316 = !DILocation(line: 4514, column: 11, scope: !5306)
!5317 = !DILocation(line: 4514, column: 27, scope: !5306)
!5318 = !DILocation(line: 4514, column: 43, scope: !5306)
!5319 = !DILocation(line: 4514, column: 30, scope: !5306)
!5320 = !DILocation(line: 4514, column: 59, scope: !5306)
!5321 = !DILocation(line: 0, scope: !5306)
!5322 = !DILocation(line: 4515, column: 5, scope: !5306)
!5323 = distinct !{!5323, !5315, !5324}
!5324 = !DILocation(line: 4515, column: 19, scope: !5306)
!5325 = !DILocation(line: 4517, column: 3, scope: !5306)
!5326 = distinct !DISubprogram(name: "gimple_has_lhs", scope: !1291, file: !1291, line: 2210, type: !5327, scopeLine: 2211, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4559)
!5327 = !DISubroutineType(types: !5328)
!5328 = !{!3364, !3220}
!5329 = !DILocalVariable(name: "stmt", arg: 1, scope: !5326, file: !1291, line: 2210, type: !3220)
!5330 = !DILocation(line: 2210, column: 24, scope: !5326)
!5331 = !DILocation(line: 2212, column: 29, scope: !5326)
!5332 = !DILocation(line: 2212, column: 11, scope: !5326)
!5333 = !DILocation(line: 2213, column: 4, scope: !5326)
!5334 = !DILocation(line: 2213, column: 24, scope: !5326)
!5335 = !DILocation(line: 2213, column: 8, scope: !5326)
!5336 = !DILocation(line: 2214, column: 8, scope: !5326)
!5337 = !DILocation(line: 2214, column: 28, scope: !5326)
!5338 = !DILocation(line: 2214, column: 11, scope: !5326)
!5339 = !DILocation(line: 2214, column: 34, scope: !5326)
!5340 = !DILocation(line: 0, scope: !5326)
!5341 = !DILocation(line: 2212, column: 10, scope: !5326)
!5342 = !DILocation(line: 2212, column: 3, scope: !5326)
!5343 = distinct !DISubprogram(name: "single_ssa_tree_operand", scope: !5276, file: !5276, line: 803, type: !5344, scopeLine: 804, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4559)
!5344 = !DISubroutineType(types: !5345)
!5345 = !{!3245, !3220, !3341}
!5346 = !DILocalVariable(name: "stmt", arg: 1, scope: !5343, file: !5276, line: 803, type: !3220)
!5347 = !DILocation(line: 803, column: 33, scope: !5343)
!5348 = !DILocalVariable(name: "flags", arg: 2, scope: !5343, file: !5276, line: 803, type: !3341)
!5349 = !DILocation(line: 803, column: 43, scope: !5343)
!5350 = !DILocalVariable(name: "var", scope: !5343, file: !5276, line: 805, type: !3245)
!5351 = !DILocation(line: 805, column: 8, scope: !5343)
!5352 = !DILocalVariable(name: "iter", scope: !5343, file: !5276, line: 806, type: !5353)
!5353 = !DIDerivedType(tag: DW_TAG_typedef, name: "ssa_op_iter", file: !1349, line: 140, baseType: !5354)
!5354 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_operand_iterator_d", file: !1349, line: 131, size: 320, elements: !5355)
!5355 = !{!5356, !5357, !5358, !5360, !5362, !5363, !5364}
!5356 = !DIDerivedType(tag: DW_TAG_member, name: "done", scope: !5354, file: !1349, line: 133, baseType: !3364, size: 8)
!5357 = !DIDerivedType(tag: DW_TAG_member, name: "iter_type", scope: !5354, file: !1349, line: 134, baseType: !1348, size: 32, offset: 32)
!5358 = !DIDerivedType(tag: DW_TAG_member, name: "defs", scope: !5354, file: !1349, line: 135, baseType: !5359, size: 64, offset: 64)
!5359 = !DIDerivedType(tag: DW_TAG_typedef, name: "def_optype_p", file: !1349, line: 42, baseType: !3829)
!5360 = !DIDerivedType(tag: DW_TAG_member, name: "uses", scope: !5354, file: !1349, line: 136, baseType: !5361, size: 64, offset: 128)
!5361 = !DIDerivedType(tag: DW_TAG_typedef, name: "use_optype_p", file: !1349, line: 50, baseType: !3836)
!5362 = !DIDerivedType(tag: DW_TAG_member, name: "phi_i", scope: !5354, file: !1349, line: 137, baseType: !3341, size: 32, offset: 192)
!5363 = !DIDerivedType(tag: DW_TAG_member, name: "num_phi", scope: !5354, file: !1349, line: 138, baseType: !3341, size: 32, offset: 224)
!5364 = !DIDerivedType(tag: DW_TAG_member, name: "phi_stmt", scope: !5354, file: !1349, line: 139, baseType: !3220, size: 64, offset: 256)
!5365 = !DILocation(line: 806, column: 15, scope: !5343)
!5366 = !DILocation(line: 808, column: 35, scope: !5343)
!5367 = !DILocation(line: 808, column: 41, scope: !5343)
!5368 = !DILocation(line: 808, column: 9, scope: !5343)
!5369 = !DILocation(line: 808, column: 7, scope: !5343)
!5370 = !DILocation(line: 809, column: 7, scope: !5371)
!5371 = distinct !DILexicalBlock(scope: !5343, file: !5276, line: 809, column: 7)
!5372 = !DILocation(line: 809, column: 7, scope: !5343)
!5373 = !DILocation(line: 810, column: 5, scope: !5371)
!5374 = !DILocation(line: 811, column: 3, scope: !5343)
!5375 = !DILocation(line: 812, column: 7, scope: !5376)
!5376 = distinct !DILexicalBlock(scope: !5343, file: !5276, line: 812, column: 7)
!5377 = !DILocation(line: 812, column: 7, scope: !5343)
!5378 = !DILocation(line: 813, column: 12, scope: !5376)
!5379 = !DILocation(line: 813, column: 5, scope: !5376)
!5380 = !DILocation(line: 814, column: 3, scope: !5343)
!5381 = !DILocation(line: 815, column: 1, scope: !5343)
!5382 = distinct !DISubprogram(name: "is_gimple_assign", scope: !1291, file: !1291, line: 1677, type: !5383, scopeLine: 1678, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4559)
!5383 = !DISubroutineType(types: !5384)
!5384 = !{!3364, !5385}
!5385 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_gimple", file: !3183, line: 60, baseType: !4491)
!5386 = !DILocalVariable(name: "gs", arg: 1, scope: !5382, file: !1291, line: 1677, type: !5385)
!5387 = !DILocation(line: 1677, column: 32, scope: !5382)
!5388 = !DILocation(line: 1679, column: 23, scope: !5382)
!5389 = !DILocation(line: 1679, column: 10, scope: !5382)
!5390 = !DILocation(line: 1679, column: 27, scope: !5382)
!5391 = !DILocation(line: 1679, column: 3, scope: !5382)
!5392 = distinct !DISubprogram(name: "gimple_assign_rhs_code", scope: !1291, file: !1291, line: 1815, type: !5393, scopeLine: 1816, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4559)
!5393 = !DISubroutineType(types: !5394)
!5394 = !{!366, !5385}
!5395 = !DILocalVariable(name: "gs", arg: 1, scope: !5392, file: !1291, line: 1815, type: !5385)
!5396 = !DILocation(line: 1815, column: 38, scope: !5392)
!5397 = !DILocalVariable(name: "code", scope: !5392, file: !1291, line: 1817, type: !366)
!5398 = !DILocation(line: 1817, column: 18, scope: !5392)
!5399 = !DILocation(line: 1820, column: 28, scope: !5392)
!5400 = !DILocation(line: 1820, column: 10, scope: !5392)
!5401 = !DILocation(line: 1820, column: 8, scope: !5392)
!5402 = !DILocation(line: 1821, column: 29, scope: !5403)
!5403 = distinct !DILexicalBlock(scope: !5392, file: !1291, line: 1821, column: 7)
!5404 = !DILocation(line: 1821, column: 7, scope: !5403)
!5405 = !DILocation(line: 1821, column: 35, scope: !5403)
!5406 = !DILocation(line: 1821, column: 7, scope: !5392)
!5407 = !DILocation(line: 1822, column: 12, scope: !5403)
!5408 = !DILocation(line: 1822, column: 10, scope: !5403)
!5409 = !DILocation(line: 1822, column: 5, scope: !5403)
!5410 = !DILocation(line: 1824, column: 10, scope: !5392)
!5411 = !DILocation(line: 1824, column: 3, scope: !5392)
!5412 = distinct !DISubprogram(name: "gimple_assign_rhs2", scope: !1291, file: !1291, line: 1759, type: !5413, scopeLine: 1760, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4559)
!5413 = !DISubroutineType(types: !5414)
!5414 = !{!3245, !5385}
!5415 = !DILocalVariable(name: "gs", arg: 1, scope: !5412, file: !1291, line: 1759, type: !5385)
!5416 = !DILocation(line: 1759, column: 34, scope: !5412)
!5417 = !DILocation(line: 1763, column: 23, scope: !5418)
!5418 = distinct !DILexicalBlock(scope: !5412, file: !1291, line: 1763, column: 7)
!5419 = !DILocation(line: 1763, column: 7, scope: !5418)
!5420 = !DILocation(line: 1763, column: 27, scope: !5418)
!5421 = !DILocation(line: 1763, column: 7, scope: !5412)
!5422 = !DILocation(line: 1764, column: 23, scope: !5418)
!5423 = !DILocation(line: 1764, column: 12, scope: !5418)
!5424 = !DILocation(line: 1764, column: 5, scope: !5418)
!5425 = !DILocation(line: 1766, column: 5, scope: !5418)
!5426 = !DILocation(line: 1767, column: 1, scope: !5412)
!5427 = distinct !DISubprogram(name: "is_gimple_call", scope: !1291, file: !1291, line: 1870, type: !5383, scopeLine: 1871, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4559)
!5428 = !DILocalVariable(name: "gs", arg: 1, scope: !5427, file: !1291, line: 1870, type: !5385)
!5429 = !DILocation(line: 1870, column: 30, scope: !5427)
!5430 = !DILocation(line: 1872, column: 23, scope: !5427)
!5431 = !DILocation(line: 1872, column: 10, scope: !5427)
!5432 = !DILocation(line: 1872, column: 27, scope: !5427)
!5433 = !DILocation(line: 1872, column: 3, scope: !5427)
!5434 = distinct !DISubprogram(name: "gimple_call_lhs", scope: !1291, file: !1291, line: 1878, type: !5413, scopeLine: 1879, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4559)
!5435 = !DILocalVariable(name: "gs", arg: 1, scope: !5434, file: !1291, line: 1878, type: !5385)
!5436 = !DILocation(line: 1878, column: 31, scope: !5434)
!5437 = !DILocation(line: 1881, column: 21, scope: !5434)
!5438 = !DILocation(line: 1881, column: 10, scope: !5434)
!5439 = !DILocation(line: 1881, column: 3, scope: !5434)
!5440 = distinct !DISubprogram(name: "gimple_call_fndecl", scope: !1291, file: !1291, line: 1954, type: !5413, scopeLine: 1955, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4559)
!5441 = !DILocalVariable(name: "gs", arg: 1, scope: !5440, file: !1291, line: 1954, type: !5385)
!5442 = !DILocation(line: 1954, column: 34, scope: !5440)
!5443 = !DILocalVariable(name: "addr", scope: !5440, file: !1291, line: 1956, type: !3245)
!5444 = !DILocation(line: 1956, column: 8, scope: !5440)
!5445 = !DILocation(line: 1956, column: 31, scope: !5440)
!5446 = !DILocation(line: 1956, column: 15, scope: !5440)
!5447 = !DILocation(line: 1957, column: 7, scope: !5448)
!5448 = distinct !DILexicalBlock(scope: !5440, file: !1291, line: 1957, column: 7)
!5449 = !DILocation(line: 1957, column: 24, scope: !5448)
!5450 = !DILocation(line: 1957, column: 7, scope: !5440)
!5451 = !DILocation(line: 1958, column: 12, scope: !5448)
!5452 = !DILocation(line: 1958, column: 5, scope: !5448)
!5453 = !DILocation(line: 1959, column: 3, scope: !5440)
!5454 = !DILocation(line: 1960, column: 1, scope: !5440)
!5455 = distinct !DISubprogram(name: "first_readonly_imm_use", scope: !5276, file: !5276, line: 292, type: !5456, scopeLine: 293, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4559)
!5456 = !DISubroutineType(types: !5457)
!5457 = !{!4488, !5458, !3245}
!5458 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4745, size: 64)
!5459 = !DILocalVariable(name: "imm", arg: 1, scope: !5455, file: !5276, line: 292, type: !5458)
!5460 = !DILocation(line: 292, column: 43, scope: !5455)
!5461 = !DILocalVariable(name: "var", arg: 2, scope: !5455, file: !5276, line: 292, type: !3245)
!5462 = !DILocation(line: 292, column: 53, scope: !5455)
!5463 = !DILocation(line: 294, column: 18, scope: !5455)
!5464 = !DILocation(line: 294, column: 3, scope: !5455)
!5465 = !DILocation(line: 294, column: 8, scope: !5455)
!5466 = !DILocation(line: 294, column: 14, scope: !5455)
!5467 = !DILocation(line: 295, column: 18, scope: !5455)
!5468 = !DILocation(line: 295, column: 23, scope: !5455)
!5469 = !DILocation(line: 295, column: 30, scope: !5455)
!5470 = !DILocation(line: 295, column: 3, scope: !5455)
!5471 = !DILocation(line: 295, column: 8, scope: !5455)
!5472 = !DILocation(line: 295, column: 16, scope: !5455)
!5473 = !DILocation(line: 299, column: 31, scope: !5474)
!5474 = distinct !DILexicalBlock(scope: !5455, file: !5276, line: 299, column: 7)
!5475 = !DILocation(line: 299, column: 7, scope: !5474)
!5476 = !DILocation(line: 299, column: 7, scope: !5455)
!5477 = !DILocation(line: 300, column: 5, scope: !5474)
!5478 = !DILocation(line: 301, column: 10, scope: !5455)
!5479 = !DILocation(line: 301, column: 15, scope: !5455)
!5480 = !DILocation(line: 301, column: 3, scope: !5455)
!5481 = !DILocation(line: 302, column: 1, scope: !5455)
!5482 = distinct !DISubprogram(name: "end_readonly_imm_use_p", scope: !5276, file: !5276, line: 285, type: !5483, scopeLine: 286, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4559)
!5483 = !DISubroutineType(types: !5484)
!5484 = !{!3364, !5485}
!5485 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5486, size: 64)
!5486 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !4745)
!5487 = !DILocalVariable(name: "imm", arg: 1, scope: !5482, file: !5276, line: 285, type: !5485)
!5488 = !DILocation(line: 285, column: 49, scope: !5482)
!5489 = !DILocation(line: 287, column: 11, scope: !5482)
!5490 = !DILocation(line: 287, column: 16, scope: !5482)
!5491 = !DILocation(line: 287, column: 27, scope: !5482)
!5492 = !DILocation(line: 287, column: 32, scope: !5482)
!5493 = !DILocation(line: 287, column: 24, scope: !5482)
!5494 = !DILocation(line: 287, column: 10, scope: !5482)
!5495 = !DILocation(line: 287, column: 3, scope: !5482)
!5496 = distinct !DISubprogram(name: "is_gimple_debug", scope: !1291, file: !1291, line: 3249, type: !5383, scopeLine: 3250, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4559)
!5497 = !DILocalVariable(name: "gs", arg: 1, scope: !5496, file: !1291, line: 3249, type: !5385)
!5498 = !DILocation(line: 3249, column: 31, scope: !5496)
!5499 = !DILocation(line: 3251, column: 23, scope: !5496)
!5500 = !DILocation(line: 3251, column: 10, scope: !5496)
!5501 = !DILocation(line: 3251, column: 27, scope: !5496)
!5502 = !DILocation(line: 3251, column: 3, scope: !5496)
!5503 = distinct !DISubprogram(name: "gimple_assign_rhs1", scope: !1291, file: !1291, line: 1727, type: !5413, scopeLine: 1728, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4559)
!5504 = !DILocalVariable(name: "gs", arg: 1, scope: !5503, file: !1291, line: 1727, type: !5385)
!5505 = !DILocation(line: 1727, column: 34, scope: !5503)
!5506 = !DILocation(line: 1730, column: 21, scope: !5503)
!5507 = !DILocation(line: 1730, column: 10, scope: !5503)
!5508 = !DILocation(line: 1730, column: 3, scope: !5503)
!5509 = distinct !DISubprogram(name: "next_readonly_imm_use", scope: !5276, file: !5276, line: 306, type: !5510, scopeLine: 307, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4559)
!5510 = !DISubroutineType(types: !5511)
!5511 = !{!4488, !5458}
!5512 = !DILocalVariable(name: "imm", arg: 1, scope: !5509, file: !5276, line: 306, type: !5458)
!5513 = !DILocation(line: 306, column: 42, scope: !5509)
!5514 = !DILocalVariable(name: "old", scope: !5509, file: !5276, line: 308, type: !4488)
!5515 = !DILocation(line: 308, column: 17, scope: !5509)
!5516 = !DILocation(line: 308, column: 23, scope: !5509)
!5517 = !DILocation(line: 308, column: 28, scope: !5509)
!5518 = !DILocation(line: 319, column: 18, scope: !5509)
!5519 = !DILocation(line: 319, column: 23, scope: !5509)
!5520 = !DILocation(line: 319, column: 3, scope: !5509)
!5521 = !DILocation(line: 319, column: 8, scope: !5509)
!5522 = !DILocation(line: 319, column: 16, scope: !5509)
!5523 = !DILocation(line: 320, column: 31, scope: !5524)
!5524 = distinct !DILexicalBlock(scope: !5509, file: !5276, line: 320, column: 7)
!5525 = !DILocation(line: 320, column: 7, scope: !5524)
!5526 = !DILocation(line: 320, column: 7, scope: !5509)
!5527 = !DILocation(line: 321, column: 5, scope: !5524)
!5528 = !DILocation(line: 322, column: 10, scope: !5509)
!5529 = !DILocation(line: 322, column: 15, scope: !5509)
!5530 = !DILocation(line: 322, column: 3, scope: !5509)
!5531 = !DILocation(line: 323, column: 1, scope: !5509)
!5532 = distinct !DISubprogram(name: "gimple_call_set_fndecl", scope: !1291, file: !1291, line: 1942, type: !5533, scopeLine: 1943, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4559)
!5533 = !DISubroutineType(types: !5534)
!5534 = !{null, !3220, !3245}
!5535 = !DILocalVariable(name: "gs", arg: 1, scope: !5532, file: !1291, line: 1942, type: !3220)
!5536 = !DILocation(line: 1942, column: 32, scope: !5532)
!5537 = !DILocalVariable(name: "decl", arg: 2, scope: !5532, file: !1291, line: 1942, type: !3245)
!5538 = !DILocation(line: 1942, column: 41, scope: !5532)
!5539 = !DILocation(line: 1945, column: 18, scope: !5532)
!5540 = !DILocation(line: 1945, column: 68, scope: !5532)
!5541 = !DILocation(line: 1945, column: 51, scope: !5532)
!5542 = !DILocation(line: 1945, column: 73, scope: !5532)
!5543 = !DILocation(line: 1945, column: 25, scope: !5532)
!5544 = !DILocation(line: 1945, column: 3, scope: !5532)
!5545 = !DILocation(line: 1946, column: 1, scope: !5532)
!5546 = distinct !DISubprogram(name: "update_stmt", scope: !1291, file: !1291, line: 1456, type: !5547, scopeLine: 1457, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4559)
!5547 = !DISubroutineType(types: !5548)
!5548 = !{null, !3220}
!5549 = !DILocalVariable(name: "s", arg: 1, scope: !5546, file: !1291, line: 1456, type: !3220)
!5550 = !DILocation(line: 1456, column: 21, scope: !5546)
!5551 = !DILocation(line: 1458, column: 23, scope: !5552)
!5552 = distinct !DILexicalBlock(scope: !5546, file: !1291, line: 1458, column: 7)
!5553 = !DILocation(line: 1458, column: 7, scope: !5552)
!5554 = !DILocation(line: 1458, column: 7, scope: !5546)
!5555 = !DILocation(line: 1460, column: 28, scope: !5556)
!5556 = distinct !DILexicalBlock(scope: !5552, file: !1291, line: 1459, column: 5)
!5557 = !DILocation(line: 1460, column: 7, scope: !5556)
!5558 = !DILocation(line: 1461, column: 29, scope: !5556)
!5559 = !DILocation(line: 1461, column: 7, scope: !5556)
!5560 = !DILocation(line: 1462, column: 5, scope: !5556)
!5561 = !DILocation(line: 1463, column: 1, scope: !5546)
!5562 = distinct !DISubprogram(name: "first_imm_use_stmt", scope: !5276, file: !5276, line: 1058, type: !5563, scopeLine: 1059, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4559)
!5563 = !DISubroutineType(types: !5564)
!5564 = !{!3220, !5458, !3245}
!5565 = !DILocalVariable(name: "imm", arg: 1, scope: !5562, file: !5276, line: 1058, type: !5458)
!5566 = !DILocation(line: 1058, column: 39, scope: !5562)
!5567 = !DILocalVariable(name: "var", arg: 2, scope: !5562, file: !5276, line: 1058, type: !3245)
!5568 = !DILocation(line: 1058, column: 49, scope: !5562)
!5569 = !DILocation(line: 1060, column: 18, scope: !5562)
!5570 = !DILocation(line: 1060, column: 3, scope: !5562)
!5571 = !DILocation(line: 1060, column: 8, scope: !5562)
!5572 = !DILocation(line: 1060, column: 14, scope: !5562)
!5573 = !DILocation(line: 1061, column: 18, scope: !5562)
!5574 = !DILocation(line: 1061, column: 23, scope: !5562)
!5575 = !DILocation(line: 1061, column: 30, scope: !5562)
!5576 = !DILocation(line: 1061, column: 3, scope: !5562)
!5577 = !DILocation(line: 1061, column: 8, scope: !5562)
!5578 = !DILocation(line: 1061, column: 16, scope: !5562)
!5579 = !DILocation(line: 1062, column: 3, scope: !5562)
!5580 = !DILocation(line: 1062, column: 8, scope: !5562)
!5581 = !DILocation(line: 1062, column: 22, scope: !5562)
!5582 = !DILocation(line: 1067, column: 3, scope: !5562)
!5583 = !DILocation(line: 1067, column: 8, scope: !5562)
!5584 = !DILocation(line: 1067, column: 18, scope: !5562)
!5585 = !DILocation(line: 1067, column: 23, scope: !5562)
!5586 = !DILocation(line: 1068, column: 3, scope: !5562)
!5587 = !DILocation(line: 1068, column: 8, scope: !5562)
!5588 = !DILocation(line: 1068, column: 18, scope: !5562)
!5589 = !DILocation(line: 1068, column: 23, scope: !5562)
!5590 = !DILocation(line: 1069, column: 3, scope: !5562)
!5591 = !DILocation(line: 1069, column: 8, scope: !5562)
!5592 = !DILocation(line: 1069, column: 18, scope: !5562)
!5593 = !DILocation(line: 1069, column: 22, scope: !5562)
!5594 = !DILocation(line: 1069, column: 27, scope: !5562)
!5595 = !DILocation(line: 1070, column: 3, scope: !5562)
!5596 = !DILocation(line: 1070, column: 8, scope: !5562)
!5597 = !DILocation(line: 1070, column: 18, scope: !5562)
!5598 = !DILocation(line: 1070, column: 22, scope: !5562)
!5599 = !DILocation(line: 1072, column: 27, scope: !5600)
!5600 = distinct !DILexicalBlock(scope: !5562, file: !5276, line: 1072, column: 7)
!5601 = !DILocation(line: 1072, column: 7, scope: !5600)
!5602 = !DILocation(line: 1072, column: 7, scope: !5562)
!5603 = !DILocation(line: 1073, column: 5, scope: !5600)
!5604 = !DILocation(line: 1075, column: 25, scope: !5562)
!5605 = !DILocation(line: 1075, column: 30, scope: !5562)
!5606 = !DILocation(line: 1075, column: 39, scope: !5562)
!5607 = !DILocation(line: 1075, column: 3, scope: !5562)
!5608 = !DILocation(line: 1077, column: 10, scope: !5562)
!5609 = !DILocation(line: 1077, column: 3, scope: !5562)
!5610 = !DILocation(line: 1078, column: 1, scope: !5562)
!5611 = distinct !DISubprogram(name: "end_imm_use_stmt_p", scope: !5276, file: !5276, line: 969, type: !5483, scopeLine: 970, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4559)
!5612 = !DILocalVariable(name: "imm", arg: 1, scope: !5611, file: !5276, line: 969, type: !5485)
!5613 = !DILocation(line: 969, column: 45, scope: !5611)
!5614 = !DILocation(line: 971, column: 11, scope: !5611)
!5615 = !DILocation(line: 971, column: 16, scope: !5611)
!5616 = !DILocation(line: 971, column: 27, scope: !5611)
!5617 = !DILocation(line: 971, column: 32, scope: !5611)
!5618 = !DILocation(line: 971, column: 24, scope: !5611)
!5619 = !DILocation(line: 971, column: 10, scope: !5611)
!5620 = !DILocation(line: 971, column: 3, scope: !5611)
!5621 = distinct !DISubprogram(name: "gimple_assign_set_rhs_code", scope: !1291, file: !1291, line: 1832, type: !5622, scopeLine: 1833, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4559)
!5622 = !DISubroutineType(types: !5623)
!5623 = !{null, !3220, !366}
!5624 = !DILocalVariable(name: "s", arg: 1, scope: !5621, file: !1291, line: 1832, type: !3220)
!5625 = !DILocation(line: 1832, column: 36, scope: !5621)
!5626 = !DILocalVariable(name: "code", arg: 2, scope: !5621, file: !1291, line: 1832, type: !366)
!5627 = !DILocation(line: 1832, column: 54, scope: !5621)
!5628 = !DILocation(line: 1835, column: 23, scope: !5621)
!5629 = !DILocation(line: 1835, column: 3, scope: !5621)
!5630 = !DILocation(line: 1835, column: 6, scope: !5621)
!5631 = !DILocation(line: 1835, column: 13, scope: !5621)
!5632 = !DILocation(line: 1835, column: 21, scope: !5621)
!5633 = !DILocation(line: 1836, column: 1, scope: !5621)
!5634 = distinct !DISubprogram(name: "next_imm_use_stmt", scope: !5276, file: !5276, line: 1083, type: !5635, scopeLine: 1084, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4559)
!5635 = !DISubroutineType(types: !5636)
!5636 = !{!3220, !5458}
!5637 = !DILocalVariable(name: "imm", arg: 1, scope: !5634, file: !5276, line: 1083, type: !5458)
!5638 = !DILocation(line: 1083, column: 38, scope: !5634)
!5639 = !DILocation(line: 1085, column: 18, scope: !5634)
!5640 = !DILocation(line: 1085, column: 23, scope: !5634)
!5641 = !DILocation(line: 1085, column: 33, scope: !5634)
!5642 = !DILocation(line: 1085, column: 3, scope: !5634)
!5643 = !DILocation(line: 1085, column: 8, scope: !5634)
!5644 = !DILocation(line: 1085, column: 16, scope: !5634)
!5645 = !DILocation(line: 1086, column: 27, scope: !5646)
!5646 = distinct !DILexicalBlock(scope: !5634, file: !5276, line: 1086, column: 7)
!5647 = !DILocation(line: 1086, column: 7, scope: !5646)
!5648 = !DILocation(line: 1086, column: 7, scope: !5634)
!5649 = !DILocation(line: 1088, column: 11, scope: !5650)
!5650 = distinct !DILexicalBlock(scope: !5651, file: !5276, line: 1088, column: 11)
!5651 = distinct !DILexicalBlock(scope: !5646, file: !5276, line: 1087, column: 5)
!5652 = !DILocation(line: 1088, column: 16, scope: !5650)
!5653 = !DILocation(line: 1088, column: 26, scope: !5650)
!5654 = !DILocation(line: 1088, column: 31, scope: !5650)
!5655 = !DILocation(line: 1088, column: 11, scope: !5651)
!5656 = !DILocation(line: 1089, column: 19, scope: !5650)
!5657 = !DILocation(line: 1089, column: 24, scope: !5650)
!5658 = !DILocation(line: 1089, column: 2, scope: !5650)
!5659 = !DILocation(line: 1090, column: 7, scope: !5651)
!5660 = !DILocation(line: 1093, column: 25, scope: !5634)
!5661 = !DILocation(line: 1093, column: 30, scope: !5634)
!5662 = !DILocation(line: 1093, column: 39, scope: !5634)
!5663 = !DILocation(line: 1093, column: 3, scope: !5634)
!5664 = !DILocation(line: 1094, column: 10, scope: !5634)
!5665 = !DILocation(line: 1094, column: 3, scope: !5634)
!5666 = !DILocation(line: 1095, column: 1, scope: !5634)
!5667 = distinct !DISubprogram(name: "is_division_by", scope: !3, file: !3, line: 278, type: !5668, scopeLine: 279, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4559)
!5668 = !DISubroutineType(types: !5669)
!5669 = !{!3364, !3220, !3245}
!5670 = !DILocalVariable(name: "use_stmt", arg: 1, scope: !5667, file: !3, line: 278, type: !3220)
!5671 = !DILocation(line: 278, column: 24, scope: !5667)
!5672 = !DILocalVariable(name: "def", arg: 2, scope: !5667, file: !3, line: 278, type: !3245)
!5673 = !DILocation(line: 278, column: 39, scope: !5667)
!5674 = !DILocation(line: 280, column: 28, scope: !5667)
!5675 = !DILocation(line: 280, column: 10, scope: !5667)
!5676 = !DILocation(line: 281, column: 3, scope: !5667)
!5677 = !DILocation(line: 281, column: 30, scope: !5667)
!5678 = !DILocation(line: 281, column: 6, scope: !5667)
!5679 = !DILocation(line: 281, column: 40, scope: !5667)
!5680 = !DILocation(line: 282, column: 3, scope: !5667)
!5681 = !DILocation(line: 282, column: 26, scope: !5667)
!5682 = !DILocation(line: 282, column: 6, scope: !5667)
!5683 = !DILocation(line: 282, column: 39, scope: !5667)
!5684 = !DILocation(line: 282, column: 36, scope: !5667)
!5685 = !DILocation(line: 286, column: 3, scope: !5667)
!5686 = !DILocation(line: 286, column: 26, scope: !5667)
!5687 = !DILocation(line: 286, column: 6, scope: !5667)
!5688 = !DILocation(line: 286, column: 39, scope: !5667)
!5689 = !DILocation(line: 286, column: 36, scope: !5667)
!5690 = !DILocation(line: 0, scope: !5667)
!5691 = !DILocation(line: 280, column: 3, scope: !5667)
!5692 = distinct !DISubprogram(name: "register_division_in", scope: !3, file: !3, line: 234, type: !5693, scopeLine: 235, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4559)
!5693 = !DISubroutineType(types: !5694)
!5694 = !{null, !3182}
!5695 = !DILocalVariable(name: "bb", arg: 1, scope: !5692, file: !3, line: 234, type: !3182)
!5696 = !DILocation(line: 234, column: 35, scope: !5692)
!5697 = !DILocalVariable(name: "occ", scope: !5692, file: !3, line: 236, type: !3178)
!5698 = !DILocation(line: 236, column: 22, scope: !5692)
!5699 = !DILocation(line: 238, column: 31, scope: !5692)
!5700 = !DILocation(line: 238, column: 35, scope: !5692)
!5701 = !DILocation(line: 238, column: 9, scope: !5692)
!5702 = !DILocation(line: 238, column: 7, scope: !5692)
!5703 = !DILocation(line: 239, column: 8, scope: !5704)
!5704 = distinct !DILexicalBlock(scope: !5692, file: !3, line: 239, column: 7)
!5705 = !DILocation(line: 239, column: 7, scope: !5692)
!5706 = !DILocation(line: 241, column: 22, scope: !5707)
!5707 = distinct !DILexicalBlock(scope: !5704, file: !3, line: 240, column: 5)
!5708 = !DILocation(line: 241, column: 13, scope: !5707)
!5709 = !DILocation(line: 241, column: 11, scope: !5707)
!5710 = !DILocation(line: 242, column: 18, scope: !5707)
!5711 = !DILocation(line: 242, column: 23, scope: !5707)
!5712 = !DILocation(line: 242, column: 7, scope: !5707)
!5713 = !DILocation(line: 243, column: 5, scope: !5707)
!5714 = !DILocation(line: 245, column: 3, scope: !5692)
!5715 = !DILocation(line: 245, column: 8, scope: !5692)
!5716 = !DILocation(line: 245, column: 24, scope: !5692)
!5717 = !DILocation(line: 246, column: 3, scope: !5692)
!5718 = !DILocation(line: 246, column: 8, scope: !5692)
!5719 = !DILocation(line: 246, column: 21, scope: !5692)
!5720 = !DILocation(line: 247, column: 1, scope: !5692)
!5721 = distinct !DISubprogram(name: "gimple_bb", scope: !1291, file: !1291, line: 1112, type: !5722, scopeLine: 1113, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4559)
!5722 = !DISubroutineType(types: !5723)
!5723 = !{!3184, !5385}
!5724 = !DILocalVariable(name: "g", arg: 1, scope: !5721, file: !1291, line: 1112, type: !5385)
!5725 = !DILocation(line: 1112, column: 25, scope: !5721)
!5726 = !DILocation(line: 1114, column: 10, scope: !5721)
!5727 = !DILocation(line: 1114, column: 13, scope: !5721)
!5728 = !DILocation(line: 1114, column: 20, scope: !5721)
!5729 = !DILocation(line: 1114, column: 3, scope: !5721)
!5730 = distinct !DISubprogram(name: "compute_merit", scope: !3, file: !3, line: 254, type: !5731, scopeLine: 255, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4559)
!5731 = !DISubroutineType(types: !5732)
!5732 = !{null, !3178}
!5733 = !DILocalVariable(name: "occ", arg: 1, scope: !5730, file: !3, line: 254, type: !3178)
!5734 = !DILocation(line: 254, column: 35, scope: !5730)
!5735 = !DILocalVariable(name: "occ_child", scope: !5730, file: !3, line: 256, type: !3178)
!5736 = !DILocation(line: 256, column: 22, scope: !5730)
!5737 = !DILocalVariable(name: "dom", scope: !5730, file: !3, line: 257, type: !3182)
!5738 = !DILocation(line: 257, column: 15, scope: !5730)
!5739 = !DILocation(line: 257, column: 21, scope: !5730)
!5740 = !DILocation(line: 257, column: 26, scope: !5730)
!5741 = !DILocation(line: 259, column: 20, scope: !5742)
!5742 = distinct !DILexicalBlock(scope: !5730, file: !3, line: 259, column: 3)
!5743 = !DILocation(line: 259, column: 25, scope: !5742)
!5744 = !DILocation(line: 259, column: 18, scope: !5742)
!5745 = !DILocation(line: 259, column: 8, scope: !5742)
!5746 = !DILocation(line: 259, column: 35, scope: !5747)
!5747 = distinct !DILexicalBlock(scope: !5742, file: !3, line: 259, column: 3)
!5748 = !DILocation(line: 259, column: 3, scope: !5742)
!5749 = !DILocalVariable(name: "bb", scope: !5750, file: !3, line: 261, type: !3182)
!5750 = distinct !DILexicalBlock(scope: !5747, file: !3, line: 260, column: 5)
!5751 = !DILocation(line: 261, column: 19, scope: !5750)
!5752 = !DILocation(line: 262, column: 11, scope: !5753)
!5753 = distinct !DILexicalBlock(scope: !5750, file: !3, line: 262, column: 11)
!5754 = !DILocation(line: 262, column: 22, scope: !5753)
!5755 = !DILocation(line: 262, column: 11, scope: !5750)
!5756 = !DILocation(line: 263, column: 24, scope: !5753)
!5757 = !DILocation(line: 263, column: 9, scope: !5753)
!5758 = !DILocation(line: 265, column: 11, scope: !5759)
!5759 = distinct !DILexicalBlock(scope: !5750, file: !3, line: 265, column: 11)
!5760 = !DILocation(line: 265, column: 11, scope: !5750)
!5761 = !DILocation(line: 266, column: 31, scope: !5759)
!5762 = !DILocation(line: 266, column: 7, scope: !5759)
!5763 = !DILocation(line: 266, column: 5, scope: !5759)
!5764 = !DILocation(line: 266, column: 2, scope: !5759)
!5765 = !DILocation(line: 268, column: 7, scope: !5759)
!5766 = !DILocation(line: 268, column: 5, scope: !5759)
!5767 = !DILocation(line: 270, column: 48, scope: !5768)
!5768 = distinct !DILexicalBlock(scope: !5750, file: !3, line: 270, column: 11)
!5769 = !DILocation(line: 270, column: 52, scope: !5768)
!5770 = !DILocation(line: 270, column: 63, scope: !5768)
!5771 = !DILocation(line: 270, column: 11, scope: !5768)
!5772 = !DILocation(line: 270, column: 11, scope: !5750)
!5773 = !DILocation(line: 271, column: 31, scope: !5768)
!5774 = !DILocation(line: 271, column: 42, scope: !5768)
!5775 = !DILocation(line: 271, column: 9, scope: !5768)
!5776 = !DILocation(line: 271, column: 14, scope: !5768)
!5777 = !DILocation(line: 271, column: 28, scope: !5768)
!5778 = !DILocation(line: 272, column: 5, scope: !5750)
!5779 = !DILocation(line: 259, column: 58, scope: !5747)
!5780 = !DILocation(line: 259, column: 69, scope: !5747)
!5781 = !DILocation(line: 259, column: 56, scope: !5747)
!5782 = !DILocation(line: 259, column: 3, scope: !5747)
!5783 = distinct !{!5783, !5748, !5784}
!5784 = !DILocation(line: 272, column: 5, scope: !5742)
!5785 = !DILocation(line: 273, column: 1, scope: !5730)
!5786 = distinct !DISubprogram(name: "insert_reciprocals", scope: !3, file: !3, line: 299, type: !5787, scopeLine: 301, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4559)
!5787 = !DISubroutineType(types: !5788)
!5788 = !{null, !5147, !3178, !3245, !3245, !3341}
!5789 = !DILocalVariable(name: "def_gsi", arg: 1, scope: !5786, file: !3, line: 299, type: !5147)
!5790 = !DILocation(line: 299, column: 43, scope: !5786)
!5791 = !DILocalVariable(name: "occ", arg: 2, scope: !5786, file: !3, line: 299, type: !3178)
!5792 = !DILocation(line: 299, column: 71, scope: !5786)
!5793 = !DILocalVariable(name: "def", arg: 3, scope: !5786, file: !3, line: 300, type: !3245)
!5794 = !DILocation(line: 300, column: 12, scope: !5786)
!5795 = !DILocalVariable(name: "recip_def", arg: 4, scope: !5786, file: !3, line: 300, type: !3245)
!5796 = !DILocation(line: 300, column: 22, scope: !5786)
!5797 = !DILocalVariable(name: "threshold", arg: 5, scope: !5786, file: !3, line: 300, type: !3341)
!5798 = !DILocation(line: 300, column: 37, scope: !5786)
!5799 = !DILocalVariable(name: "type", scope: !5786, file: !3, line: 302, type: !3245)
!5800 = !DILocation(line: 302, column: 8, scope: !5786)
!5801 = !DILocalVariable(name: "new_stmt", scope: !5786, file: !3, line: 303, type: !3220)
!5802 = !DILocation(line: 303, column: 10, scope: !5786)
!5803 = !DILocalVariable(name: "gsi", scope: !5786, file: !3, line: 304, type: !4610)
!5804 = !DILocation(line: 304, column: 24, scope: !5786)
!5805 = !DILocalVariable(name: "occ_child", scope: !5786, file: !3, line: 305, type: !3178)
!5806 = !DILocation(line: 305, column: 22, scope: !5786)
!5807 = !DILocation(line: 307, column: 8, scope: !5808)
!5808 = distinct !DILexicalBlock(scope: !5786, file: !3, line: 307, column: 7)
!5809 = !DILocation(line: 308, column: 7, scope: !5808)
!5810 = !DILocation(line: 308, column: 11, scope: !5808)
!5811 = !DILocation(line: 308, column: 16, scope: !5808)
!5812 = !DILocation(line: 308, column: 32, scope: !5808)
!5813 = !DILocation(line: 308, column: 36, scope: !5808)
!5814 = !DILocation(line: 309, column: 7, scope: !5808)
!5815 = !DILocation(line: 309, column: 10, scope: !5808)
!5816 = !DILocation(line: 309, column: 15, scope: !5808)
!5817 = !DILocation(line: 309, column: 32, scope: !5808)
!5818 = !DILocation(line: 309, column: 29, scope: !5808)
!5819 = !DILocation(line: 307, column: 7, scope: !5786)
!5820 = !DILocation(line: 312, column: 14, scope: !5821)
!5821 = distinct !DILexicalBlock(scope: !5808, file: !3, line: 310, column: 5)
!5822 = !DILocation(line: 312, column: 12, scope: !5821)
!5823 = !DILocation(line: 313, column: 37, scope: !5821)
!5824 = !DILocation(line: 313, column: 19, scope: !5821)
!5825 = !DILocation(line: 313, column: 17, scope: !5821)
!5826 = !DILocation(line: 314, column: 18, scope: !5821)
!5827 = !DILocation(line: 314, column: 16, scope: !5821)
!5828 = !DILocation(line: 317, column: 11, scope: !5829)
!5829 = distinct !DILexicalBlock(scope: !5821, file: !3, line: 317, column: 11)
!5830 = !DILocation(line: 317, column: 16, scope: !5829)
!5831 = !DILocation(line: 317, column: 11, scope: !5821)
!5832 = !DILocation(line: 320, column: 35, scope: !5833)
!5833 = distinct !DILexicalBlock(scope: !5829, file: !3, line: 318, column: 9)
!5834 = !DILocation(line: 320, column: 40, scope: !5833)
!5835 = !DILocation(line: 320, column: 17, scope: !5833)
!5836 = !DILocation(line: 321, column: 11, scope: !5833)
!5837 = !DILocation(line: 321, column: 19, scope: !5833)
!5838 = !DILocation(line: 321, column: 35, scope: !5833)
!5839 = !DILocation(line: 321, column: 55, scope: !5833)
!5840 = !DILocation(line: 321, column: 71, scope: !5833)
!5841 = !DILocation(line: 321, column: 39, scope: !5833)
!5842 = !DILocation(line: 321, column: 38, scope: !5833)
!5843 = !DILocation(line: 0, scope: !5833)
!5844 = !DILocation(line: 322, column: 6, scope: !5833)
!5845 = distinct !{!5845, !5836, !5846}
!5846 = !DILocation(line: 322, column: 20, scope: !5833)
!5847 = !DILocation(line: 324, column: 36, scope: !5833)
!5848 = !DILocation(line: 324, column: 11, scope: !5833)
!5849 = !DILocation(line: 325, column: 9, scope: !5833)
!5850 = !DILocation(line: 326, column: 16, scope: !5851)
!5851 = distinct !DILexicalBlock(scope: !5829, file: !3, line: 326, column: 16)
!5852 = !DILocation(line: 326, column: 24, scope: !5851)
!5853 = !DILocation(line: 326, column: 27, scope: !5851)
!5854 = !DILocation(line: 326, column: 32, scope: !5851)
!5855 = !DILocation(line: 326, column: 38, scope: !5851)
!5856 = !DILocation(line: 326, column: 47, scope: !5851)
!5857 = !DILocation(line: 326, column: 35, scope: !5851)
!5858 = !DILocation(line: 326, column: 16, scope: !5829)
!5859 = !DILocation(line: 332, column: 29, scope: !5860)
!5860 = distinct !DILexicalBlock(scope: !5851, file: !3, line: 327, column: 9)
!5861 = !DILocation(line: 332, column: 38, scope: !5860)
!5862 = !DILocation(line: 332, column: 11, scope: !5860)
!5863 = !DILocation(line: 333, column: 9, scope: !5860)
!5864 = !DILocation(line: 337, column: 35, scope: !5865)
!5865 = distinct !DILexicalBlock(scope: !5851, file: !3, line: 335, column: 9)
!5866 = !DILocation(line: 337, column: 40, scope: !5865)
!5867 = !DILocation(line: 337, column: 17, scope: !5865)
!5868 = !DILocation(line: 338, column: 36, scope: !5865)
!5869 = !DILocation(line: 338, column: 11, scope: !5865)
!5870 = !DILocation(line: 341, column: 29, scope: !5821)
!5871 = !DILocation(line: 341, column: 7, scope: !5821)
!5872 = !DILocation(line: 341, column: 12, scope: !5821)
!5873 = !DILocation(line: 341, column: 27, scope: !5821)
!5874 = !DILocation(line: 342, column: 5, scope: !5821)
!5875 = !DILocation(line: 344, column: 20, scope: !5786)
!5876 = !DILocation(line: 344, column: 3, scope: !5786)
!5877 = !DILocation(line: 344, column: 8, scope: !5786)
!5878 = !DILocation(line: 344, column: 18, scope: !5786)
!5879 = !DILocation(line: 345, column: 20, scope: !5880)
!5880 = distinct !DILexicalBlock(scope: !5786, file: !3, line: 345, column: 3)
!5881 = !DILocation(line: 345, column: 25, scope: !5880)
!5882 = !DILocation(line: 345, column: 18, scope: !5880)
!5883 = !DILocation(line: 345, column: 8, scope: !5880)
!5884 = !DILocation(line: 345, column: 35, scope: !5885)
!5885 = distinct !DILexicalBlock(scope: !5880, file: !3, line: 345, column: 3)
!5886 = !DILocation(line: 345, column: 3, scope: !5880)
!5887 = !DILocation(line: 346, column: 25, scope: !5885)
!5888 = !DILocation(line: 346, column: 34, scope: !5885)
!5889 = !DILocation(line: 346, column: 45, scope: !5885)
!5890 = !DILocation(line: 346, column: 50, scope: !5885)
!5891 = !DILocation(line: 346, column: 61, scope: !5885)
!5892 = !DILocation(line: 346, column: 5, scope: !5885)
!5893 = !DILocation(line: 345, column: 58, scope: !5885)
!5894 = !DILocation(line: 345, column: 69, scope: !5885)
!5895 = !DILocation(line: 345, column: 56, scope: !5885)
!5896 = !DILocation(line: 345, column: 3, scope: !5885)
!5897 = distinct !{!5897, !5886, !5898}
!5898 = !DILocation(line: 346, column: 70, scope: !5880)
!5899 = !DILocation(line: 347, column: 1, scope: !5786)
!5900 = distinct !DISubprogram(name: "first_imm_use_on_stmt", scope: !5276, file: !5276, line: 1101, type: !5510, scopeLine: 1102, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4559)
!5901 = !DILocalVariable(name: "imm", arg: 1, scope: !5900, file: !5276, line: 1101, type: !5458)
!5902 = !DILocation(line: 1101, column: 42, scope: !5900)
!5903 = !DILocation(line: 1103, column: 24, scope: !5900)
!5904 = !DILocation(line: 1103, column: 29, scope: !5900)
!5905 = !DILocation(line: 1103, column: 38, scope: !5900)
!5906 = !DILocation(line: 1103, column: 3, scope: !5900)
!5907 = !DILocation(line: 1103, column: 8, scope: !5900)
!5908 = !DILocation(line: 1103, column: 22, scope: !5900)
!5909 = !DILocation(line: 1104, column: 10, scope: !5900)
!5910 = !DILocation(line: 1104, column: 15, scope: !5900)
!5911 = !DILocation(line: 1104, column: 3, scope: !5900)
!5912 = distinct !DISubprogram(name: "end_imm_use_on_stmt_p", scope: !5276, file: !5276, line: 1110, type: !5483, scopeLine: 1111, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4559)
!5913 = !DILocalVariable(name: "imm", arg: 1, scope: !5912, file: !5276, line: 1110, type: !5485)
!5914 = !DILocation(line: 1110, column: 48, scope: !5912)
!5915 = !DILocation(line: 1112, column: 11, scope: !5912)
!5916 = !DILocation(line: 1112, column: 16, scope: !5912)
!5917 = !DILocation(line: 1112, column: 29, scope: !5912)
!5918 = !DILocation(line: 1112, column: 34, scope: !5912)
!5919 = !DILocation(line: 1112, column: 24, scope: !5912)
!5920 = !DILocation(line: 1112, column: 10, scope: !5912)
!5921 = !DILocation(line: 1112, column: 3, scope: !5912)
!5922 = distinct !DISubprogram(name: "replace_reciprocal", scope: !3, file: !3, line: 354, type: !5923, scopeLine: 355, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4559)
!5923 = !DISubroutineType(types: !5924)
!5924 = !{null, !4488}
!5925 = !DILocalVariable(name: "use_p", arg: 1, scope: !5922, file: !3, line: 354, type: !4488)
!5926 = !DILocation(line: 354, column: 35, scope: !5922)
!5927 = !DILocalVariable(name: "use_stmt", scope: !5922, file: !3, line: 356, type: !3220)
!5928 = !DILocation(line: 356, column: 10, scope: !5922)
!5929 = !DILocation(line: 356, column: 21, scope: !5922)
!5930 = !DILocalVariable(name: "bb", scope: !5922, file: !3, line: 357, type: !3182)
!5931 = !DILocation(line: 357, column: 15, scope: !5922)
!5932 = !DILocation(line: 357, column: 31, scope: !5922)
!5933 = !DILocation(line: 357, column: 20, scope: !5922)
!5934 = !DILocalVariable(name: "occ", scope: !5922, file: !3, line: 358, type: !3178)
!5935 = !DILocation(line: 358, column: 22, scope: !5922)
!5936 = !DILocation(line: 358, column: 50, scope: !5922)
!5937 = !DILocation(line: 358, column: 54, scope: !5922)
!5938 = !DILocation(line: 358, column: 28, scope: !5922)
!5939 = !DILocation(line: 360, column: 32, scope: !5940)
!5940 = distinct !DILexicalBlock(scope: !5922, file: !3, line: 360, column: 7)
!5941 = !DILocation(line: 360, column: 7, scope: !5940)
!5942 = !DILocation(line: 361, column: 7, scope: !5940)
!5943 = !DILocation(line: 361, column: 10, scope: !5940)
!5944 = !DILocation(line: 361, column: 15, scope: !5940)
!5945 = !DILocation(line: 361, column: 25, scope: !5940)
!5946 = !DILocation(line: 361, column: 28, scope: !5940)
!5947 = !DILocation(line: 361, column: 40, scope: !5940)
!5948 = !DILocation(line: 361, column: 45, scope: !5940)
!5949 = !DILocation(line: 361, column: 37, scope: !5940)
!5950 = !DILocation(line: 360, column: 7, scope: !5922)
!5951 = !DILocation(line: 363, column: 35, scope: !5952)
!5952 = distinct !DILexicalBlock(scope: !5940, file: !3, line: 362, column: 5)
!5953 = !DILocation(line: 363, column: 7, scope: !5952)
!5954 = !DILocation(line: 364, column: 7, scope: !5952)
!5955 = !DILocation(line: 365, column: 26, scope: !5952)
!5956 = !DILocation(line: 365, column: 7, scope: !5952)
!5957 = !DILocation(line: 366, column: 20, scope: !5952)
!5958 = !DILocation(line: 366, column: 7, scope: !5952)
!5959 = !DILocation(line: 367, column: 5, scope: !5952)
!5960 = !DILocation(line: 368, column: 1, scope: !5922)
!5961 = distinct !DISubprogram(name: "next_imm_use_on_stmt", scope: !5276, file: !5276, line: 1118, type: !5510, scopeLine: 1119, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4559)
!5962 = !DILocalVariable(name: "imm", arg: 1, scope: !5961, file: !5276, line: 1118, type: !5458)
!5963 = !DILocation(line: 1118, column: 41, scope: !5961)
!5964 = !DILocation(line: 1120, column: 18, scope: !5961)
!5965 = !DILocation(line: 1120, column: 23, scope: !5961)
!5966 = !DILocation(line: 1120, column: 3, scope: !5961)
!5967 = !DILocation(line: 1120, column: 8, scope: !5961)
!5968 = !DILocation(line: 1120, column: 16, scope: !5961)
!5969 = !DILocation(line: 1121, column: 30, scope: !5970)
!5970 = distinct !DILexicalBlock(scope: !5961, file: !5276, line: 1121, column: 7)
!5971 = !DILocation(line: 1121, column: 7, scope: !5970)
!5972 = !DILocation(line: 1121, column: 7, scope: !5961)
!5973 = !DILocation(line: 1122, column: 5, scope: !5970)
!5974 = !DILocation(line: 1125, column: 28, scope: !5975)
!5975 = distinct !DILexicalBlock(scope: !5970, file: !5276, line: 1124, column: 5)
!5976 = !DILocation(line: 1125, column: 33, scope: !5975)
!5977 = !DILocation(line: 1125, column: 42, scope: !5975)
!5978 = !DILocation(line: 1125, column: 7, scope: !5975)
!5979 = !DILocation(line: 1125, column: 12, scope: !5975)
!5980 = !DILocation(line: 1125, column: 26, scope: !5975)
!5981 = !DILocation(line: 1126, column: 14, scope: !5975)
!5982 = !DILocation(line: 1126, column: 19, scope: !5975)
!5983 = !DILocation(line: 1126, column: 7, scope: !5975)
!5984 = !DILocation(line: 1128, column: 1, scope: !5961)
!5985 = distinct !DISubprogram(name: "free_bb", scope: !3, file: !3, line: 374, type: !5986, scopeLine: 375, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4559)
!5986 = !DISubroutineType(types: !5987)
!5987 = !{!3178, !3178}
!5988 = !DILocalVariable(name: "occ", arg: 1, scope: !5985, file: !3, line: 374, type: !3178)
!5989 = !DILocation(line: 374, column: 29, scope: !5985)
!5990 = !DILocalVariable(name: "child", scope: !5985, file: !3, line: 376, type: !3178)
!5991 = !DILocation(line: 376, column: 22, scope: !5985)
!5992 = !DILocalVariable(name: "next", scope: !5985, file: !3, line: 376, type: !3178)
!5993 = !DILocation(line: 376, column: 30, scope: !5985)
!5994 = !DILocation(line: 379, column: 10, scope: !5985)
!5995 = !DILocation(line: 379, column: 15, scope: !5985)
!5996 = !DILocation(line: 379, column: 8, scope: !5985)
!5997 = !DILocation(line: 380, column: 11, scope: !5985)
!5998 = !DILocation(line: 380, column: 16, scope: !5985)
!5999 = !DILocation(line: 380, column: 9, scope: !5985)
!6000 = !DILocation(line: 381, column: 3, scope: !5985)
!6001 = !DILocation(line: 381, column: 8, scope: !5985)
!6002 = !DILocation(line: 381, column: 12, scope: !5985)
!6003 = !DILocation(line: 381, column: 16, scope: !5985)
!6004 = !DILocation(line: 382, column: 14, scope: !5985)
!6005 = !DILocation(line: 382, column: 24, scope: !5985)
!6006 = !DILocation(line: 382, column: 3, scope: !5985)
!6007 = !DILocation(line: 385, column: 8, scope: !6008)
!6008 = distinct !DILexicalBlock(scope: !5985, file: !3, line: 385, column: 7)
!6009 = !DILocation(line: 385, column: 7, scope: !5985)
!6010 = !DILocation(line: 386, column: 12, scope: !6008)
!6011 = !DILocation(line: 386, column: 5, scope: !6008)
!6012 = !DILocation(line: 389, column: 7, scope: !6013)
!6013 = distinct !DILexicalBlock(scope: !6008, file: !3, line: 388, column: 5)
!6014 = !DILocation(line: 389, column: 14, scope: !6013)
!6015 = !DILocation(line: 390, column: 18, scope: !6013)
!6016 = !DILocation(line: 390, column: 9, scope: !6013)
!6017 = !DILocation(line: 390, column: 7, scope: !6013)
!6018 = distinct !{!6018, !6012, !6019}
!6019 = !DILocation(line: 390, column: 22, scope: !6013)
!6020 = !DILocation(line: 392, column: 14, scope: !6013)
!6021 = !DILocation(line: 392, column: 7, scope: !6013)
!6022 = !DILocation(line: 394, column: 1, scope: !5985)
!6023 = distinct !DISubprogram(name: "occ_new", scope: !3, file: !3, line: 153, type: !6024, scopeLine: 154, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4559)
!6024 = !DISubroutineType(types: !6025)
!6025 = !{!3178, !3182, !3178}
!6026 = !DILocalVariable(name: "bb", arg: 1, scope: !6023, file: !3, line: 153, type: !3182)
!6027 = !DILocation(line: 153, column: 22, scope: !6023)
!6028 = !DILocalVariable(name: "children", arg: 2, scope: !6023, file: !3, line: 153, type: !3178)
!6029 = !DILocation(line: 153, column: 45, scope: !6023)
!6030 = !DILocalVariable(name: "occ", scope: !6023, file: !3, line: 155, type: !3178)
!6031 = !DILocation(line: 155, column: 22, scope: !6023)
!6032 = !DILocation(line: 157, column: 53, scope: !6023)
!6033 = !DILocation(line: 157, column: 41, scope: !6023)
!6034 = !DILocation(line: 157, column: 19, scope: !6023)
!6035 = !DILocation(line: 157, column: 17, scope: !6023)
!6036 = !DILocation(line: 157, column: 13, scope: !6023)
!6037 = !DILocation(line: 157, column: 3, scope: !6023)
!6038 = !DILocation(line: 157, column: 7, scope: !6023)
!6039 = !DILocation(line: 157, column: 11, scope: !6023)
!6040 = !DILocation(line: 158, column: 11, scope: !6023)
!6041 = !DILocation(line: 158, column: 3, scope: !6023)
!6042 = !DILocation(line: 160, column: 13, scope: !6023)
!6043 = !DILocation(line: 160, column: 3, scope: !6023)
!6044 = !DILocation(line: 160, column: 8, scope: !6023)
!6045 = !DILocation(line: 160, column: 11, scope: !6023)
!6046 = !DILocation(line: 161, column: 19, scope: !6023)
!6047 = !DILocation(line: 161, column: 3, scope: !6023)
!6048 = !DILocation(line: 161, column: 8, scope: !6023)
!6049 = !DILocation(line: 161, column: 17, scope: !6023)
!6050 = !DILocation(line: 162, column: 10, scope: !6023)
!6051 = !DILocation(line: 162, column: 3, scope: !6023)
!6052 = distinct !DISubprogram(name: "insert_bb", scope: !3, file: !3, line: 175, type: !6053, scopeLine: 177, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4559)
!6053 = !DISubroutineType(types: !6054)
!6054 = !{null, !3178, !3182, !6055}
!6055 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3178, size: 64)
!6056 = !DILocalVariable(name: "new_occ", arg: 1, scope: !6052, file: !3, line: 175, type: !3178)
!6057 = !DILocation(line: 175, column: 31, scope: !6052)
!6058 = !DILocalVariable(name: "idom", arg: 2, scope: !6052, file: !3, line: 175, type: !3182)
!6059 = !DILocation(line: 175, column: 52, scope: !6052)
!6060 = !DILocalVariable(name: "p_head", arg: 3, scope: !6052, file: !3, line: 176, type: !6055)
!6061 = !DILocation(line: 176, column: 25, scope: !6052)
!6062 = !DILocalVariable(name: "occ", scope: !6052, file: !3, line: 178, type: !3178)
!6063 = !DILocation(line: 178, column: 22, scope: !6052)
!6064 = !DILocalVariable(name: "p_occ", scope: !6052, file: !3, line: 178, type: !6055)
!6065 = !DILocation(line: 178, column: 29, scope: !6052)
!6066 = !DILocation(line: 180, column: 16, scope: !6067)
!6067 = distinct !DILexicalBlock(scope: !6052, file: !3, line: 180, column: 3)
!6068 = !DILocation(line: 180, column: 14, scope: !6067)
!6069 = !DILocation(line: 180, column: 8, scope: !6067)
!6070 = !DILocation(line: 180, column: 32, scope: !6071)
!6071 = distinct !DILexicalBlock(scope: !6067, file: !3, line: 180, column: 3)
!6072 = !DILocation(line: 180, column: 31, scope: !6071)
!6073 = !DILocation(line: 180, column: 29, scope: !6071)
!6074 = !DILocation(line: 180, column: 39, scope: !6071)
!6075 = !DILocation(line: 180, column: 3, scope: !6067)
!6076 = !DILocalVariable(name: "bb", scope: !6077, file: !3, line: 182, type: !3182)
!6077 = distinct !DILexicalBlock(scope: !6071, file: !3, line: 181, column: 5)
!6078 = !DILocation(line: 182, column: 19, scope: !6077)
!6079 = !DILocation(line: 182, column: 24, scope: !6077)
!6080 = !DILocation(line: 182, column: 33, scope: !6077)
!6081 = !DILocalVariable(name: "occ_bb", scope: !6077, file: !3, line: 182, type: !3182)
!6082 = !DILocation(line: 182, column: 37, scope: !6077)
!6083 = !DILocation(line: 182, column: 46, scope: !6077)
!6084 = !DILocation(line: 182, column: 51, scope: !6077)
!6085 = !DILocalVariable(name: "dom", scope: !6077, file: !3, line: 183, type: !3182)
!6086 = !DILocation(line: 183, column: 19, scope: !6077)
!6087 = !DILocation(line: 183, column: 67, scope: !6077)
!6088 = !DILocation(line: 183, column: 75, scope: !6077)
!6089 = !DILocation(line: 183, column: 25, scope: !6077)
!6090 = !DILocation(line: 184, column: 11, scope: !6091)
!6091 = distinct !DILexicalBlock(scope: !6077, file: !3, line: 184, column: 11)
!6092 = !DILocation(line: 184, column: 18, scope: !6091)
!6093 = !DILocation(line: 184, column: 15, scope: !6091)
!6094 = !DILocation(line: 184, column: 11, scope: !6077)
!6095 = !DILocation(line: 188, column: 13, scope: !6096)
!6096 = distinct !DILexicalBlock(scope: !6091, file: !3, line: 185, column: 2)
!6097 = !DILocation(line: 188, column: 18, scope: !6096)
!6098 = !DILocation(line: 188, column: 5, scope: !6096)
!6099 = !DILocation(line: 188, column: 11, scope: !6096)
!6100 = !DILocation(line: 189, column: 16, scope: !6096)
!6101 = !DILocation(line: 189, column: 25, scope: !6096)
!6102 = !DILocation(line: 189, column: 4, scope: !6096)
!6103 = !DILocation(line: 189, column: 9, scope: !6096)
!6104 = !DILocation(line: 189, column: 14, scope: !6096)
!6105 = !DILocation(line: 190, column: 24, scope: !6096)
!6106 = !DILocation(line: 190, column: 4, scope: !6096)
!6107 = !DILocation(line: 190, column: 13, scope: !6096)
!6108 = !DILocation(line: 190, column: 22, scope: !6096)
!6109 = !DILocation(line: 193, column: 2, scope: !6096)
!6110 = !DILocation(line: 195, column: 16, scope: !6111)
!6111 = distinct !DILexicalBlock(scope: !6091, file: !3, line: 195, column: 16)
!6112 = !DILocation(line: 195, column: 23, scope: !6111)
!6113 = !DILocation(line: 195, column: 20, scope: !6111)
!6114 = !DILocation(line: 195, column: 16, scope: !6091)
!6115 = !DILocation(line: 198, column: 15, scope: !6116)
!6116 = distinct !DILexicalBlock(scope: !6111, file: !3, line: 196, column: 2)
!6117 = !DILocation(line: 198, column: 24, scope: !6116)
!6118 = !DILocation(line: 198, column: 30, scope: !6116)
!6119 = !DILocation(line: 198, column: 35, scope: !6116)
!6120 = !DILocation(line: 198, column: 4, scope: !6116)
!6121 = !DILocation(line: 199, column: 4, scope: !6116)
!6122 = !DILocation(line: 202, column: 16, scope: !6123)
!6123 = distinct !DILexicalBlock(scope: !6111, file: !3, line: 202, column: 16)
!6124 = !DILocation(line: 202, column: 23, scope: !6123)
!6125 = !DILocation(line: 202, column: 20, scope: !6123)
!6126 = !DILocation(line: 202, column: 16, scope: !6111)
!6127 = !DILocation(line: 204, column: 4, scope: !6128)
!6128 = distinct !DILexicalBlock(scope: !6123, file: !3, line: 203, column: 2)
!6129 = !DILocation(line: 209, column: 13, scope: !6128)
!6130 = !DILocation(line: 209, column: 18, scope: !6128)
!6131 = !DILocation(line: 209, column: 5, scope: !6128)
!6132 = !DILocation(line: 209, column: 11, scope: !6128)
!6133 = !DILocation(line: 210, column: 20, scope: !6128)
!6134 = !DILocation(line: 210, column: 4, scope: !6128)
!6135 = !DILocation(line: 210, column: 13, scope: !6128)
!6136 = !DILocation(line: 210, column: 18, scope: !6128)
!6137 = !DILocation(line: 211, column: 4, scope: !6128)
!6138 = !DILocation(line: 211, column: 9, scope: !6128)
!6139 = !DILocation(line: 211, column: 14, scope: !6128)
!6140 = !DILocation(line: 216, column: 30, scope: !6128)
!6141 = !DILocation(line: 216, column: 35, scope: !6128)
!6142 = !DILocation(line: 216, column: 21, scope: !6128)
!6143 = !DILocation(line: 216, column: 19, scope: !6128)
!6144 = !DILocation(line: 217, column: 2, scope: !6128)
!6145 = !DILocation(line: 222, column: 13, scope: !6146)
!6146 = distinct !DILexicalBlock(scope: !6123, file: !3, line: 220, column: 2)
!6147 = !DILocation(line: 222, column: 18, scope: !6146)
!6148 = !DILocation(line: 222, column: 10, scope: !6146)
!6149 = !DILocation(line: 180, column: 3, scope: !6071)
!6150 = distinct !{!6150, !6075, !6151}
!6151 = !DILocation(line: 224, column: 5, scope: !6067)
!6152 = !DILocation(line: 227, column: 20, scope: !6052)
!6153 = !DILocation(line: 227, column: 19, scope: !6052)
!6154 = !DILocation(line: 227, column: 3, scope: !6052)
!6155 = !DILocation(line: 227, column: 12, scope: !6052)
!6156 = !DILocation(line: 227, column: 17, scope: !6052)
!6157 = !DILocation(line: 228, column: 13, scope: !6052)
!6158 = !DILocation(line: 228, column: 4, scope: !6052)
!6159 = !DILocation(line: 228, column: 11, scope: !6052)
!6160 = !DILocation(line: 229, column: 1, scope: !6052)
!6161 = distinct !DISubprogram(name: "set_ssa_use_from_ptr", scope: !5276, file: !5276, line: 233, type: !6162, scopeLine: 234, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4559)
!6162 = !DISubroutineType(types: !6163)
!6163 = !{null, !4488, !3245}
!6164 = !DILocalVariable(name: "use", arg: 1, scope: !6161, file: !5276, line: 233, type: !4488)
!6165 = !DILocation(line: 233, column: 37, scope: !6161)
!6166 = !DILocalVariable(name: "val", arg: 2, scope: !6161, file: !5276, line: 233, type: !3245)
!6167 = !DILocation(line: 233, column: 47, scope: !6161)
!6168 = !DILocation(line: 235, column: 19, scope: !6161)
!6169 = !DILocation(line: 235, column: 3, scope: !6161)
!6170 = !DILocation(line: 236, column: 17, scope: !6161)
!6171 = !DILocation(line: 236, column: 5, scope: !6161)
!6172 = !DILocation(line: 236, column: 10, scope: !6161)
!6173 = !DILocation(line: 236, column: 15, scope: !6161)
!6174 = !DILocation(line: 237, column: 17, scope: !6161)
!6175 = !DILocation(line: 237, column: 22, scope: !6161)
!6176 = !DILocation(line: 237, column: 3, scope: !6161)
!6177 = !DILocation(line: 238, column: 1, scope: !6161)
!6178 = distinct !DISubprogram(name: "delink_imm_use", scope: !5276, file: !5276, line: 188, type: !6179, scopeLine: 189, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4559)
!6179 = !DISubroutineType(types: !6180)
!6180 = !{null, !4489}
!6181 = !DILocalVariable(name: "linknode", arg: 1, scope: !6178, file: !5276, line: 188, type: !4489)
!6182 = !DILocation(line: 188, column: 36, scope: !6178)
!6183 = !DILocation(line: 191, column: 7, scope: !6184)
!6184 = distinct !DILexicalBlock(scope: !6178, file: !5276, line: 191, column: 7)
!6185 = !DILocation(line: 191, column: 17, scope: !6184)
!6186 = !DILocation(line: 191, column: 22, scope: !6184)
!6187 = !DILocation(line: 191, column: 7, scope: !6178)
!6188 = !DILocation(line: 192, column: 5, scope: !6184)
!6189 = !DILocation(line: 194, column: 26, scope: !6178)
!6190 = !DILocation(line: 194, column: 36, scope: !6178)
!6191 = !DILocation(line: 194, column: 3, scope: !6178)
!6192 = !DILocation(line: 194, column: 13, scope: !6178)
!6193 = !DILocation(line: 194, column: 19, scope: !6178)
!6194 = !DILocation(line: 194, column: 24, scope: !6178)
!6195 = !DILocation(line: 195, column: 26, scope: !6178)
!6196 = !DILocation(line: 195, column: 36, scope: !6178)
!6197 = !DILocation(line: 195, column: 3, scope: !6178)
!6198 = !DILocation(line: 195, column: 13, scope: !6178)
!6199 = !DILocation(line: 195, column: 19, scope: !6178)
!6200 = !DILocation(line: 195, column: 24, scope: !6178)
!6201 = !DILocation(line: 196, column: 3, scope: !6178)
!6202 = !DILocation(line: 196, column: 13, scope: !6178)
!6203 = !DILocation(line: 196, column: 18, scope: !6178)
!6204 = !DILocation(line: 197, column: 3, scope: !6178)
!6205 = !DILocation(line: 197, column: 13, scope: !6178)
!6206 = !DILocation(line: 197, column: 18, scope: !6178)
!6207 = !DILocation(line: 198, column: 1, scope: !6178)
!6208 = distinct !DISubprogram(name: "link_imm_use", scope: !5276, file: !5276, line: 214, type: !6209, scopeLine: 215, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4559)
!6209 = !DISubroutineType(types: !6210)
!6210 = !{null, !4489, !3245}
!6211 = !DILocalVariable(name: "linknode", arg: 1, scope: !6208, file: !5276, line: 214, type: !4489)
!6212 = !DILocation(line: 214, column: 34, scope: !6208)
!6213 = !DILocalVariable(name: "def", arg: 2, scope: !6208, file: !5276, line: 214, type: !3245)
!6214 = !DILocation(line: 214, column: 49, scope: !6208)
!6215 = !DILocalVariable(name: "root", scope: !6208, file: !5276, line: 216, type: !4489)
!6216 = !DILocation(line: 216, column: 22, scope: !6208)
!6217 = !DILocation(line: 218, column: 8, scope: !6218)
!6218 = distinct !DILexicalBlock(scope: !6208, file: !5276, line: 218, column: 7)
!6219 = !DILocation(line: 218, column: 12, scope: !6218)
!6220 = !DILocation(line: 218, column: 15, scope: !6218)
!6221 = !DILocation(line: 218, column: 31, scope: !6218)
!6222 = !DILocation(line: 218, column: 7, scope: !6208)
!6223 = !DILocation(line: 219, column: 5, scope: !6218)
!6224 = !DILocation(line: 219, column: 15, scope: !6218)
!6225 = !DILocation(line: 219, column: 20, scope: !6218)
!6226 = !DILocation(line: 222, column: 16, scope: !6227)
!6227 = distinct !DILexicalBlock(scope: !6218, file: !5276, line: 221, column: 5)
!6228 = !DILocation(line: 222, column: 12, scope: !6227)
!6229 = !DILocation(line: 227, column: 29, scope: !6227)
!6230 = !DILocation(line: 227, column: 39, scope: !6227)
!6231 = !DILocation(line: 227, column: 7, scope: !6227)
!6232 = !DILocation(line: 229, column: 1, scope: !6208)
!6233 = distinct !DISubprogram(name: "link_imm_use_to_list", scope: !5276, file: !5276, line: 202, type: !6234, scopeLine: 203, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4559)
!6234 = !DISubroutineType(types: !6235)
!6235 = !{null, !4489, !4489}
!6236 = !DILocalVariable(name: "linknode", arg: 1, scope: !6233, file: !5276, line: 202, type: !4489)
!6237 = !DILocation(line: 202, column: 42, scope: !6233)
!6238 = !DILocalVariable(name: "list", arg: 2, scope: !6233, file: !5276, line: 202, type: !4489)
!6239 = !DILocation(line: 202, column: 71, scope: !6233)
!6240 = !DILocation(line: 206, column: 20, scope: !6233)
!6241 = !DILocation(line: 206, column: 3, scope: !6233)
!6242 = !DILocation(line: 206, column: 13, scope: !6233)
!6243 = !DILocation(line: 206, column: 18, scope: !6233)
!6244 = !DILocation(line: 207, column: 20, scope: !6233)
!6245 = !DILocation(line: 207, column: 26, scope: !6233)
!6246 = !DILocation(line: 207, column: 3, scope: !6233)
!6247 = !DILocation(line: 207, column: 13, scope: !6233)
!6248 = !DILocation(line: 207, column: 18, scope: !6233)
!6249 = !DILocation(line: 208, column: 22, scope: !6233)
!6250 = !DILocation(line: 208, column: 3, scope: !6233)
!6251 = !DILocation(line: 208, column: 9, scope: !6233)
!6252 = !DILocation(line: 208, column: 15, scope: !6233)
!6253 = !DILocation(line: 208, column: 20, scope: !6233)
!6254 = !DILocation(line: 209, column: 16, scope: !6233)
!6255 = !DILocation(line: 209, column: 3, scope: !6233)
!6256 = !DILocation(line: 209, column: 9, scope: !6233)
!6257 = !DILocation(line: 209, column: 14, scope: !6233)
!6258 = !DILocation(line: 210, column: 1, scope: !6233)
!6259 = distinct !DISubprogram(name: "gsi_start_bb", scope: !1291, file: !1291, line: 4418, type: !5307, scopeLine: 4419, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4559)
!6260 = !DILocalVariable(name: "bb", arg: 1, scope: !6259, file: !1291, line: 4418, type: !3182)
!6261 = !DILocation(line: 4418, column: 27, scope: !6259)
!6262 = !DILocalVariable(name: "i", scope: !6259, file: !1291, line: 4420, type: !4610)
!6263 = !DILocation(line: 4420, column: 24, scope: !6259)
!6264 = !DILocalVariable(name: "seq", scope: !6259, file: !1291, line: 4421, type: !3210)
!6265 = !DILocation(line: 4421, column: 14, scope: !6259)
!6266 = !DILocation(line: 4423, column: 17, scope: !6259)
!6267 = !DILocation(line: 4423, column: 9, scope: !6259)
!6268 = !DILocation(line: 4423, column: 7, scope: !6259)
!6269 = !DILocation(line: 4424, column: 29, scope: !6259)
!6270 = !DILocation(line: 4424, column: 11, scope: !6259)
!6271 = !DILocation(line: 4424, column: 5, scope: !6259)
!6272 = !DILocation(line: 4424, column: 9, scope: !6259)
!6273 = !DILocation(line: 4425, column: 11, scope: !6259)
!6274 = !DILocation(line: 4425, column: 5, scope: !6259)
!6275 = !DILocation(line: 4425, column: 9, scope: !6259)
!6276 = !DILocation(line: 4426, column: 10, scope: !6259)
!6277 = !DILocation(line: 4426, column: 5, scope: !6259)
!6278 = !DILocation(line: 4426, column: 8, scope: !6259)
!6279 = !DILocation(line: 4428, column: 3, scope: !6259)
!6280 = distinct !DISubprogram(name: "gimple_code", scope: !1291, file: !1291, line: 1052, type: !6281, scopeLine: 1053, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4559)
!6281 = !DISubroutineType(types: !6282)
!6282 = !{!1296, !5385}
!6283 = !DILocalVariable(name: "g", arg: 1, scope: !6280, file: !1291, line: 1052, type: !5385)
!6284 = !DILocation(line: 1052, column: 27, scope: !6280)
!6285 = !DILocation(line: 1054, column: 10, scope: !6280)
!6286 = !DILocation(line: 1054, column: 13, scope: !6280)
!6287 = !DILocation(line: 1054, column: 20, scope: !6280)
!6288 = !DILocation(line: 1054, column: 3, scope: !6280)
!6289 = distinct !DISubprogram(name: "bb_seq", scope: !1291, file: !1291, line: 237, type: !6290, scopeLine: 238, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4559)
!6290 = !DISubroutineType(types: !6291)
!6291 = !{!3210, !6292}
!6292 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_basic_block", file: !3183, line: 112, baseType: !6293)
!6293 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6294, size: 64)
!6294 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !3185)
!6295 = !DILocalVariable(name: "bb", arg: 1, scope: !6289, file: !1291, line: 237, type: !6292)
!6296 = !DILocation(line: 237, column: 27, scope: !6289)
!6297 = !DILocation(line: 239, column: 13, scope: !6289)
!6298 = !DILocation(line: 239, column: 17, scope: !6289)
!6299 = !DILocation(line: 239, column: 23, scope: !6289)
!6300 = !DILocation(line: 239, column: 33, scope: !6289)
!6301 = !DILocation(line: 239, column: 36, scope: !6289)
!6302 = !DILocation(line: 239, column: 40, scope: !6289)
!6303 = !DILocation(line: 239, column: 43, scope: !6289)
!6304 = !DILocation(line: 239, column: 10, scope: !6289)
!6305 = !DILocation(line: 239, column: 53, scope: !6289)
!6306 = !DILocation(line: 239, column: 57, scope: !6289)
!6307 = !DILocation(line: 239, column: 60, scope: !6289)
!6308 = !DILocation(line: 239, column: 68, scope: !6289)
!6309 = !DILocation(line: 239, column: 3, scope: !6289)
!6310 = distinct !DISubprogram(name: "gimple_seq_first", scope: !1291, file: !1291, line: 159, type: !6311, scopeLine: 160, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4559)
!6311 = !DISubroutineType(types: !6312)
!6312 = !{!3215, !6313}
!6313 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_gimple_seq", file: !3183, line: 67, baseType: !6314)
!6314 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6315, size: 64)
!6315 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !3212)
!6316 = !DILocalVariable(name: "s", arg: 1, scope: !6310, file: !1291, line: 159, type: !6313)
!6317 = !DILocation(line: 159, column: 36, scope: !6310)
!6318 = !DILocation(line: 161, column: 10, scope: !6310)
!6319 = !DILocation(line: 161, column: 14, scope: !6310)
!6320 = !DILocation(line: 161, column: 17, scope: !6310)
!6321 = !DILocation(line: 161, column: 3, scope: !6310)
!6322 = distinct !DISubprogram(name: "op_iter_init_tree", scope: !5276, file: !5276, line: 792, type: !6323, scopeLine: 793, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4559)
!6323 = !DISubroutineType(types: !6324)
!6324 = !{!3245, !6325, !3220, !3341}
!6325 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5353, size: 64)
!6326 = !DILocalVariable(name: "ptr", arg: 1, scope: !6322, file: !5276, line: 792, type: !6325)
!6327 = !DILocation(line: 792, column: 33, scope: !6322)
!6328 = !DILocalVariable(name: "stmt", arg: 2, scope: !6322, file: !5276, line: 792, type: !3220)
!6329 = !DILocation(line: 792, column: 45, scope: !6322)
!6330 = !DILocalVariable(name: "flags", arg: 3, scope: !6322, file: !5276, line: 792, type: !3341)
!6331 = !DILocation(line: 792, column: 55, scope: !6322)
!6332 = !DILocation(line: 794, column: 17, scope: !6322)
!6333 = !DILocation(line: 794, column: 22, scope: !6322)
!6334 = !DILocation(line: 794, column: 28, scope: !6322)
!6335 = !DILocation(line: 794, column: 3, scope: !6322)
!6336 = !DILocation(line: 795, column: 3, scope: !6322)
!6337 = !DILocation(line: 795, column: 8, scope: !6322)
!6338 = !DILocation(line: 795, column: 18, scope: !6322)
!6339 = !DILocation(line: 796, column: 29, scope: !6322)
!6340 = !DILocation(line: 796, column: 10, scope: !6322)
!6341 = !DILocation(line: 796, column: 3, scope: !6322)
!6342 = distinct !DISubprogram(name: "op_iter_done", scope: !5276, file: !5276, line: 652, type: !6343, scopeLine: 653, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4559)
!6343 = !DISubroutineType(types: !6344)
!6344 = !{!3364, !6345}
!6345 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6346, size: 64)
!6346 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !5353)
!6347 = !DILocalVariable(name: "ptr", arg: 1, scope: !6342, file: !5276, line: 652, type: !6345)
!6348 = !DILocation(line: 652, column: 34, scope: !6342)
!6349 = !DILocation(line: 654, column: 10, scope: !6342)
!6350 = !DILocation(line: 654, column: 15, scope: !6342)
!6351 = !DILocation(line: 654, column: 3, scope: !6342)
!6352 = distinct !DISubprogram(name: "op_iter_next_tree", scope: !5276, file: !5276, line: 699, type: !6353, scopeLine: 700, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4559)
!6353 = !DISubroutineType(types: !6354)
!6354 = !{!3245, !6325}
!6355 = !DILocalVariable(name: "ptr", arg: 1, scope: !6352, file: !5276, line: 699, type: !6325)
!6356 = !DILocation(line: 699, column: 33, scope: !6352)
!6357 = !DILocalVariable(name: "val", scope: !6352, file: !5276, line: 701, type: !3245)
!6358 = !DILocation(line: 701, column: 8, scope: !6352)
!6359 = !DILocation(line: 705, column: 7, scope: !6360)
!6360 = distinct !DILexicalBlock(scope: !6352, file: !5276, line: 705, column: 7)
!6361 = !DILocation(line: 705, column: 12, scope: !6360)
!6362 = !DILocation(line: 705, column: 7, scope: !6352)
!6363 = !DILocation(line: 707, column: 13, scope: !6364)
!6364 = distinct !DILexicalBlock(scope: !6360, file: !5276, line: 706, column: 5)
!6365 = !DILocation(line: 707, column: 11, scope: !6364)
!6366 = !DILocation(line: 708, column: 19, scope: !6364)
!6367 = !DILocation(line: 708, column: 24, scope: !6364)
!6368 = !DILocation(line: 708, column: 30, scope: !6364)
!6369 = !DILocation(line: 708, column: 7, scope: !6364)
!6370 = !DILocation(line: 708, column: 12, scope: !6364)
!6371 = !DILocation(line: 708, column: 17, scope: !6364)
!6372 = !DILocation(line: 709, column: 14, scope: !6364)
!6373 = !DILocation(line: 709, column: 7, scope: !6364)
!6374 = !DILocation(line: 711, column: 7, scope: !6375)
!6375 = distinct !DILexicalBlock(scope: !6352, file: !5276, line: 711, column: 7)
!6376 = !DILocation(line: 711, column: 12, scope: !6375)
!6377 = !DILocation(line: 711, column: 7, scope: !6352)
!6378 = !DILocation(line: 713, column: 13, scope: !6379)
!6379 = distinct !DILexicalBlock(scope: !6375, file: !5276, line: 712, column: 5)
!6380 = !DILocation(line: 713, column: 11, scope: !6379)
!6381 = !DILocation(line: 714, column: 19, scope: !6379)
!6382 = !DILocation(line: 714, column: 24, scope: !6379)
!6383 = !DILocation(line: 714, column: 30, scope: !6379)
!6384 = !DILocation(line: 714, column: 7, scope: !6379)
!6385 = !DILocation(line: 714, column: 12, scope: !6379)
!6386 = !DILocation(line: 714, column: 17, scope: !6379)
!6387 = !DILocation(line: 715, column: 14, scope: !6379)
!6388 = !DILocation(line: 715, column: 7, scope: !6379)
!6389 = !DILocation(line: 718, column: 3, scope: !6352)
!6390 = !DILocation(line: 718, column: 8, scope: !6352)
!6391 = !DILocation(line: 718, column: 13, scope: !6352)
!6392 = !DILocation(line: 719, column: 3, scope: !6352)
!6393 = !DILocation(line: 721, column: 1, scope: !6352)
!6394 = distinct !DISubprogram(name: "op_iter_init", scope: !5276, file: !5276, line: 742, type: !6395, scopeLine: 743, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4559)
!6395 = !DISubroutineType(types: !6396)
!6396 = !{null, !6325, !3220, !3341}
!6397 = !DILocalVariable(name: "ptr", arg: 1, scope: !6394, file: !5276, line: 742, type: !6325)
!6398 = !DILocation(line: 742, column: 28, scope: !6394)
!6399 = !DILocalVariable(name: "stmt", arg: 2, scope: !6394, file: !5276, line: 742, type: !3220)
!6400 = !DILocation(line: 742, column: 40, scope: !6394)
!6401 = !DILocalVariable(name: "flags", arg: 3, scope: !6394, file: !5276, line: 742, type: !3341)
!6402 = !DILocation(line: 742, column: 50, scope: !6394)
!6403 = !DILocation(line: 746, column: 3, scope: !6394)
!6404 = !DILocation(line: 748, column: 16, scope: !6394)
!6405 = !DILocation(line: 748, column: 22, scope: !6394)
!6406 = !DILocation(line: 748, column: 15, scope: !6394)
!6407 = !DILocation(line: 748, column: 68, scope: !6394)
!6408 = !DILocation(line: 748, column: 52, scope: !6394)
!6409 = !DILocation(line: 748, column: 3, scope: !6394)
!6410 = !DILocation(line: 748, column: 8, scope: !6394)
!6411 = !DILocation(line: 748, column: 13, scope: !6394)
!6412 = !DILocation(line: 749, column: 9, scope: !6413)
!6413 = distinct !DILexicalBlock(scope: !6394, file: !5276, line: 749, column: 7)
!6414 = !DILocation(line: 749, column: 15, scope: !6413)
!6415 = !DILocation(line: 750, column: 7, scope: !6413)
!6416 = !DILocation(line: 750, column: 10, scope: !6413)
!6417 = !DILocation(line: 750, column: 15, scope: !6413)
!6418 = !DILocation(line: 751, column: 7, scope: !6413)
!6419 = !DILocation(line: 751, column: 23, scope: !6413)
!6420 = !DILocation(line: 751, column: 10, scope: !6413)
!6421 = !DILocation(line: 751, column: 29, scope: !6413)
!6422 = !DILocation(line: 749, column: 7, scope: !6394)
!6423 = !DILocation(line: 752, column: 17, scope: !6413)
!6424 = !DILocation(line: 752, column: 22, scope: !6413)
!6425 = !DILocation(line: 752, column: 28, scope: !6413)
!6426 = !DILocation(line: 752, column: 5, scope: !6413)
!6427 = !DILocation(line: 752, column: 10, scope: !6413)
!6428 = !DILocation(line: 752, column: 15, scope: !6413)
!6429 = !DILocation(line: 753, column: 16, scope: !6394)
!6430 = !DILocation(line: 753, column: 22, scope: !6394)
!6431 = !DILocation(line: 753, column: 15, scope: !6394)
!6432 = !DILocation(line: 753, column: 68, scope: !6394)
!6433 = !DILocation(line: 753, column: 52, scope: !6394)
!6434 = !DILocation(line: 753, column: 3, scope: !6394)
!6435 = !DILocation(line: 753, column: 8, scope: !6394)
!6436 = !DILocation(line: 753, column: 13, scope: !6394)
!6437 = !DILocation(line: 754, column: 9, scope: !6438)
!6438 = distinct !DILexicalBlock(scope: !6394, file: !5276, line: 754, column: 7)
!6439 = !DILocation(line: 754, column: 15, scope: !6438)
!6440 = !DILocation(line: 755, column: 7, scope: !6438)
!6441 = !DILocation(line: 755, column: 10, scope: !6438)
!6442 = !DILocation(line: 755, column: 15, scope: !6438)
!6443 = !DILocation(line: 756, column: 7, scope: !6438)
!6444 = !DILocation(line: 756, column: 23, scope: !6438)
!6445 = !DILocation(line: 756, column: 10, scope: !6438)
!6446 = !DILocation(line: 756, column: 29, scope: !6438)
!6447 = !DILocation(line: 754, column: 7, scope: !6394)
!6448 = !DILocation(line: 757, column: 17, scope: !6438)
!6449 = !DILocation(line: 757, column: 22, scope: !6438)
!6450 = !DILocation(line: 757, column: 28, scope: !6438)
!6451 = !DILocation(line: 757, column: 5, scope: !6438)
!6452 = !DILocation(line: 757, column: 10, scope: !6438)
!6453 = !DILocation(line: 757, column: 15, scope: !6438)
!6454 = !DILocation(line: 758, column: 3, scope: !6394)
!6455 = !DILocation(line: 758, column: 8, scope: !6394)
!6456 = !DILocation(line: 758, column: 13, scope: !6394)
!6457 = !DILocation(line: 760, column: 3, scope: !6394)
!6458 = !DILocation(line: 760, column: 8, scope: !6394)
!6459 = !DILocation(line: 760, column: 14, scope: !6394)
!6460 = !DILocation(line: 761, column: 3, scope: !6394)
!6461 = !DILocation(line: 761, column: 8, scope: !6394)
!6462 = !DILocation(line: 761, column: 16, scope: !6394)
!6463 = !DILocation(line: 762, column: 3, scope: !6394)
!6464 = !DILocation(line: 762, column: 8, scope: !6394)
!6465 = !DILocation(line: 762, column: 17, scope: !6394)
!6466 = !DILocation(line: 763, column: 1, scope: !6394)
!6467 = distinct !DISubprogram(name: "gimple_def_ops", scope: !1291, file: !1291, line: 1292, type: !6468, scopeLine: 1293, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4559)
!6468 = !DISubroutineType(types: !6469)
!6469 = !{!3829, !5385}
!6470 = !DILocalVariable(name: "g", arg: 1, scope: !6467, file: !1291, line: 1292, type: !5385)
!6471 = !DILocation(line: 1292, column: 30, scope: !6467)
!6472 = !DILocation(line: 1294, column: 24, scope: !6473)
!6473 = distinct !DILexicalBlock(scope: !6467, file: !1291, line: 1294, column: 7)
!6474 = !DILocation(line: 1294, column: 8, scope: !6473)
!6475 = !DILocation(line: 1294, column: 7, scope: !6467)
!6476 = !DILocation(line: 1295, column: 5, scope: !6473)
!6477 = !DILocation(line: 1296, column: 10, scope: !6467)
!6478 = !DILocation(line: 1296, column: 13, scope: !6467)
!6479 = !DILocation(line: 1296, column: 19, scope: !6467)
!6480 = !DILocation(line: 1296, column: 26, scope: !6467)
!6481 = !DILocation(line: 1296, column: 3, scope: !6467)
!6482 = !DILocation(line: 1297, column: 1, scope: !6467)
!6483 = distinct !DISubprogram(name: "gimple_vdef", scope: !1291, file: !1291, line: 1375, type: !5413, scopeLine: 1376, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4559)
!6484 = !DILocalVariable(name: "g", arg: 1, scope: !6483, file: !1291, line: 1375, type: !5385)
!6485 = !DILocation(line: 1375, column: 27, scope: !6483)
!6486 = !DILocation(line: 1377, column: 28, scope: !6487)
!6487 = distinct !DILexicalBlock(scope: !6483, file: !1291, line: 1377, column: 7)
!6488 = !DILocation(line: 1377, column: 8, scope: !6487)
!6489 = !DILocation(line: 1377, column: 7, scope: !6483)
!6490 = !DILocation(line: 1378, column: 5, scope: !6487)
!6491 = !DILocation(line: 1379, column: 10, scope: !6483)
!6492 = !DILocation(line: 1379, column: 13, scope: !6483)
!6493 = !DILocation(line: 1379, column: 23, scope: !6483)
!6494 = !DILocation(line: 1379, column: 3, scope: !6483)
!6495 = !DILocation(line: 1380, column: 1, scope: !6483)
!6496 = distinct !DISubprogram(name: "gimple_use_ops", scope: !1291, file: !1291, line: 1313, type: !6497, scopeLine: 1314, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4559)
!6497 = !DISubroutineType(types: !6498)
!6498 = !{!3836, !5385}
!6499 = !DILocalVariable(name: "g", arg: 1, scope: !6496, file: !1291, line: 1313, type: !5385)
!6500 = !DILocation(line: 1313, column: 30, scope: !6496)
!6501 = !DILocation(line: 1315, column: 24, scope: !6502)
!6502 = distinct !DILexicalBlock(scope: !6496, file: !1291, line: 1315, column: 7)
!6503 = !DILocation(line: 1315, column: 8, scope: !6502)
!6504 = !DILocation(line: 1315, column: 7, scope: !6496)
!6505 = !DILocation(line: 1316, column: 5, scope: !6502)
!6506 = !DILocation(line: 1317, column: 10, scope: !6496)
!6507 = !DILocation(line: 1317, column: 13, scope: !6496)
!6508 = !DILocation(line: 1317, column: 19, scope: !6496)
!6509 = !DILocation(line: 1317, column: 26, scope: !6496)
!6510 = !DILocation(line: 1317, column: 3, scope: !6496)
!6511 = !DILocation(line: 1318, column: 1, scope: !6496)
!6512 = distinct !DISubprogram(name: "gimple_vuse", scope: !1291, file: !1291, line: 1365, type: !5413, scopeLine: 1366, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4559)
!6513 = !DILocalVariable(name: "g", arg: 1, scope: !6512, file: !1291, line: 1365, type: !5385)
!6514 = !DILocation(line: 1365, column: 27, scope: !6512)
!6515 = !DILocation(line: 1367, column: 28, scope: !6516)
!6516 = distinct !DILexicalBlock(scope: !6512, file: !1291, line: 1367, column: 7)
!6517 = !DILocation(line: 1367, column: 8, scope: !6516)
!6518 = !DILocation(line: 1367, column: 7, scope: !6512)
!6519 = !DILocation(line: 1368, column: 5, scope: !6516)
!6520 = !DILocation(line: 1369, column: 10, scope: !6512)
!6521 = !DILocation(line: 1369, column: 13, scope: !6512)
!6522 = !DILocation(line: 1369, column: 23, scope: !6512)
!6523 = !DILocation(line: 1369, column: 3, scope: !6512)
!6524 = !DILocation(line: 1370, column: 1, scope: !6512)
!6525 = distinct !DISubprogram(name: "gimple_has_ops", scope: !1291, file: !1291, line: 1274, type: !5383, scopeLine: 1275, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4559)
!6526 = !DILocalVariable(name: "g", arg: 1, scope: !6525, file: !1291, line: 1274, type: !5385)
!6527 = !DILocation(line: 1274, column: 30, scope: !6525)
!6528 = !DILocation(line: 1276, column: 23, scope: !6525)
!6529 = !DILocation(line: 1276, column: 10, scope: !6525)
!6530 = !DILocation(line: 1276, column: 26, scope: !6525)
!6531 = !DILocation(line: 1276, column: 41, scope: !6525)
!6532 = !DILocation(line: 1276, column: 57, scope: !6525)
!6533 = !DILocation(line: 1276, column: 44, scope: !6525)
!6534 = !DILocation(line: 1276, column: 60, scope: !6525)
!6535 = !DILocation(line: 0, scope: !6525)
!6536 = !DILocation(line: 1276, column: 3, scope: !6525)
!6537 = distinct !DISubprogram(name: "gimple_has_mem_ops", scope: !1291, file: !1291, line: 1283, type: !5383, scopeLine: 1284, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4559)
!6538 = !DILocalVariable(name: "g", arg: 1, scope: !6537, file: !1291, line: 1283, type: !5385)
!6539 = !DILocation(line: 1283, column: 34, scope: !6537)
!6540 = !DILocation(line: 1285, column: 23, scope: !6537)
!6541 = !DILocation(line: 1285, column: 10, scope: !6537)
!6542 = !DILocation(line: 1285, column: 26, scope: !6537)
!6543 = !DILocation(line: 1285, column: 43, scope: !6537)
!6544 = !DILocation(line: 1285, column: 59, scope: !6537)
!6545 = !DILocation(line: 1285, column: 46, scope: !6537)
!6546 = !DILocation(line: 1285, column: 62, scope: !6537)
!6547 = !DILocation(line: 0, scope: !6537)
!6548 = !DILocation(line: 1285, column: 3, scope: !6537)
!6549 = distinct !DISubprogram(name: "get_use_from_ptr", scope: !5276, file: !5276, line: 427, type: !6550, scopeLine: 428, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4559)
!6550 = !DISubroutineType(types: !6551)
!6551 = !{!3245, !4488}
!6552 = !DILocalVariable(name: "use", arg: 1, scope: !6549, file: !5276, line: 427, type: !4488)
!6553 = !DILocation(line: 427, column: 33, scope: !6549)
!6554 = !DILocation(line: 429, column: 12, scope: !6549)
!6555 = !DILocation(line: 429, column: 17, scope: !6549)
!6556 = !DILocation(line: 429, column: 10, scope: !6549)
!6557 = !DILocation(line: 429, column: 3, scope: !6549)
!6558 = distinct !DISubprogram(name: "gimple_expr_code", scope: !1291, file: !1291, line: 1438, type: !5393, scopeLine: 1439, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4559)
!6559 = !DILocalVariable(name: "stmt", arg: 1, scope: !6558, file: !1291, line: 1438, type: !5385)
!6560 = !DILocation(line: 1438, column: 32, scope: !6558)
!6561 = !DILocalVariable(name: "code", scope: !6558, file: !1291, line: 1440, type: !1296)
!6562 = !DILocation(line: 1440, column: 20, scope: !6558)
!6563 = !DILocation(line: 1440, column: 40, scope: !6558)
!6564 = !DILocation(line: 1440, column: 27, scope: !6558)
!6565 = !DILocation(line: 1441, column: 7, scope: !6566)
!6566 = distinct !DILexicalBlock(scope: !6558, file: !1291, line: 1441, column: 7)
!6567 = !DILocation(line: 1441, column: 12, scope: !6566)
!6568 = !DILocation(line: 1441, column: 29, scope: !6566)
!6569 = !DILocation(line: 1441, column: 32, scope: !6566)
!6570 = !DILocation(line: 1441, column: 37, scope: !6566)
!6571 = !DILocation(line: 1441, column: 7, scope: !6558)
!6572 = !DILocation(line: 1442, column: 29, scope: !6566)
!6573 = !DILocation(line: 1442, column: 35, scope: !6566)
!6574 = !DILocation(line: 1442, column: 42, scope: !6566)
!6575 = !DILocation(line: 1442, column: 5, scope: !6566)
!6576 = !DILocation(line: 1443, column: 12, scope: !6577)
!6577 = distinct !DILexicalBlock(scope: !6566, file: !1291, line: 1443, column: 12)
!6578 = !DILocation(line: 1443, column: 17, scope: !6577)
!6579 = !DILocation(line: 1443, column: 12, scope: !6566)
!6580 = !DILocation(line: 1444, column: 5, scope: !6577)
!6581 = !DILocation(line: 1446, column: 5, scope: !6577)
!6582 = !DILocation(line: 1448, column: 5, scope: !6558)
!6583 = !DILocation(line: 1450, column: 1, scope: !6558)
!6584 = distinct !DISubprogram(name: "get_gimple_rhs_class", scope: !1291, file: !1291, line: 1686, type: !6585, scopeLine: 1687, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4559)
!6585 = !DISubroutineType(types: !6586)
!6586 = !{!1355, !366}
!6587 = !DILocalVariable(name: "code", arg: 1, scope: !6584, file: !1291, line: 1686, type: !366)
!6588 = !DILocation(line: 1686, column: 38, scope: !6584)
!6589 = !DILocation(line: 1688, column: 63, scope: !6584)
!6590 = !DILocation(line: 1688, column: 34, scope: !6584)
!6591 = !DILocation(line: 1688, column: 10, scope: !6584)
!6592 = !DILocation(line: 1688, column: 3, scope: !6584)
!6593 = distinct !DISubprogram(name: "gimple_num_ops", scope: !1291, file: !1291, line: 1596, type: !6594, scopeLine: 1597, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4559)
!6594 = !DISubroutineType(types: !6595)
!6595 = !{!7, !5385}
!6596 = !DILocalVariable(name: "gs", arg: 1, scope: !6593, file: !1291, line: 1596, type: !5385)
!6597 = !DILocation(line: 1596, column: 30, scope: !6593)
!6598 = !DILocation(line: 1598, column: 10, scope: !6593)
!6599 = !DILocation(line: 1598, column: 14, scope: !6593)
!6600 = !DILocation(line: 1598, column: 21, scope: !6593)
!6601 = !DILocation(line: 1598, column: 3, scope: !6593)
!6602 = distinct !DISubprogram(name: "gimple_op", scope: !1291, file: !1291, line: 1631, type: !6603, scopeLine: 1632, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4559)
!6603 = !DISubroutineType(types: !6604)
!6604 = !{!3245, !5385, !7}
!6605 = !DILocalVariable(name: "gs", arg: 1, scope: !6602, file: !1291, line: 1631, type: !5385)
!6606 = !DILocation(line: 1631, column: 25, scope: !6602)
!6607 = !DILocalVariable(name: "i", arg: 2, scope: !6602, file: !1291, line: 1631, type: !7)
!6608 = !DILocation(line: 1631, column: 38, scope: !6602)
!6609 = !DILocation(line: 1633, column: 23, scope: !6610)
!6610 = distinct !DILexicalBlock(scope: !6602, file: !1291, line: 1633, column: 7)
!6611 = !DILocation(line: 1633, column: 7, scope: !6610)
!6612 = !DILocation(line: 1633, column: 7, scope: !6602)
!6613 = !DILocation(line: 1638, column: 26, scope: !6614)
!6614 = distinct !DILexicalBlock(scope: !6610, file: !1291, line: 1634, column: 5)
!6615 = !DILocation(line: 1638, column: 14, scope: !6614)
!6616 = !DILocation(line: 1638, column: 50, scope: !6614)
!6617 = !DILocation(line: 1638, column: 7, scope: !6614)
!6618 = !DILocation(line: 1641, column: 5, scope: !6610)
!6619 = !DILocation(line: 1642, column: 1, scope: !6602)
!6620 = distinct !DISubprogram(name: "gimple_ops", scope: !1291, file: !1291, line: 1614, type: !5286, scopeLine: 1615, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4559)
!6621 = !DILocalVariable(name: "gs", arg: 1, scope: !6620, file: !1291, line: 1614, type: !3220)
!6622 = !DILocation(line: 1614, column: 20, scope: !6620)
!6623 = !DILocalVariable(name: "off", scope: !6620, file: !1291, line: 1616, type: !3743)
!6624 = !DILocation(line: 1616, column: 10, scope: !6620)
!6625 = !DILocation(line: 1621, column: 56, scope: !6620)
!6626 = !DILocation(line: 1621, column: 28, scope: !6620)
!6627 = !DILocation(line: 1621, column: 9, scope: !6620)
!6628 = !DILocation(line: 1621, column: 7, scope: !6620)
!6629 = !DILocation(line: 1622, column: 3, scope: !6620)
!6630 = !DILocation(line: 1624, column: 29, scope: !6620)
!6631 = !DILocation(line: 1624, column: 20, scope: !6620)
!6632 = !DILocation(line: 1624, column: 34, scope: !6620)
!6633 = !DILocation(line: 1624, column: 32, scope: !6620)
!6634 = !DILocation(line: 1624, column: 10, scope: !6620)
!6635 = !DILocation(line: 1624, column: 3, scope: !6620)
!6636 = distinct !DISubprogram(name: "gimple_statement_structure", scope: !1291, file: !1291, line: 1073, type: !6637, scopeLine: 1074, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4559)
!6637 = !DISubroutineType(types: !6638)
!6638 = !{!1361, !3220}
!6639 = !DILocalVariable(name: "gs", arg: 1, scope: !6636, file: !1291, line: 1073, type: !3220)
!6640 = !DILocation(line: 1073, column: 36, scope: !6636)
!6641 = !DILocation(line: 1075, column: 37, scope: !6636)
!6642 = !DILocation(line: 1075, column: 24, scope: !6636)
!6643 = !DILocation(line: 1075, column: 10, scope: !6636)
!6644 = !DILocation(line: 1075, column: 3, scope: !6636)
!6645 = distinct !DISubprogram(name: "gss_for_code", scope: !1291, file: !1291, line: 1061, type: !6646, scopeLine: 1062, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4559)
!6646 = !DISubroutineType(types: !6647)
!6647 = !{!1361, !1296}
!6648 = !DILocalVariable(name: "code", arg: 1, scope: !6645, file: !1291, line: 1061, type: !1296)
!6649 = !DILocation(line: 1061, column: 32, scope: !6645)
!6650 = !DILocation(line: 1066, column: 24, scope: !6645)
!6651 = !DILocation(line: 1066, column: 10, scope: !6645)
!6652 = !DILocation(line: 1066, column: 3, scope: !6645)
!6653 = distinct !DISubprogram(name: "gimple_call_fn", scope: !1291, file: !1291, line: 1911, type: !5413, scopeLine: 1912, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4559)
!6654 = !DILocalVariable(name: "gs", arg: 1, scope: !6653, file: !1291, line: 1911, type: !5385)
!6655 = !DILocation(line: 1911, column: 30, scope: !6653)
!6656 = !DILocation(line: 1914, column: 21, scope: !6653)
!6657 = !DILocation(line: 1914, column: 10, scope: !6653)
!6658 = !DILocation(line: 1914, column: 3, scope: !6653)
!6659 = distinct !DISubprogram(name: "gimple_set_op", scope: !1291, file: !1291, line: 1663, type: !6660, scopeLine: 1664, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4559)
!6660 = !DISubroutineType(types: !6661)
!6661 = !{null, !3220, !7, !3245}
!6662 = !DILocalVariable(name: "gs", arg: 1, scope: !6659, file: !1291, line: 1663, type: !3220)
!6663 = !DILocation(line: 1663, column: 23, scope: !6659)
!6664 = !DILocalVariable(name: "i", arg: 2, scope: !6659, file: !1291, line: 1663, type: !7)
!6665 = !DILocation(line: 1663, column: 36, scope: !6659)
!6666 = !DILocalVariable(name: "op", arg: 3, scope: !6659, file: !1291, line: 1663, type: !3245)
!6667 = !DILocation(line: 1663, column: 44, scope: !6659)
!6668 = !DILocation(line: 1665, column: 3, scope: !6659)
!6669 = !DILocation(line: 1671, column: 24, scope: !6659)
!6670 = !DILocation(line: 1671, column: 15, scope: !6659)
!6671 = !DILocation(line: 1671, column: 3, scope: !6659)
!6672 = !DILocation(line: 1671, column: 19, scope: !6659)
!6673 = !DILocation(line: 1671, column: 22, scope: !6659)
!6674 = !DILocation(line: 1672, column: 1, scope: !6659)
!6675 = distinct !DISubprogram(name: "gimple_location", scope: !1291, file: !1291, line: 1139, type: !6676, scopeLine: 1140, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4559)
!6676 = !DISubroutineType(types: !6677)
!6677 = !{!3238, !5385}
!6678 = !DILocalVariable(name: "g", arg: 1, scope: !6675, file: !1291, line: 1139, type: !5385)
!6679 = !DILocation(line: 1139, column: 31, scope: !6675)
!6680 = !DILocation(line: 1141, column: 10, scope: !6675)
!6681 = !DILocation(line: 1141, column: 13, scope: !6675)
!6682 = !DILocation(line: 1141, column: 20, scope: !6675)
!6683 = !DILocation(line: 1141, column: 3, scope: !6675)
!6684 = distinct !DISubprogram(name: "link_use_stmts_after", scope: !5276, file: !5276, line: 1018, type: !6685, scopeLine: 1019, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4559)
!6685 = !DISubroutineType(types: !6686)
!6686 = !{null, !4488, !5458}
!6687 = !DILocalVariable(name: "head", arg: 1, scope: !6684, file: !5276, line: 1018, type: !4488)
!6688 = !DILocation(line: 1018, column: 37, scope: !6684)
!6689 = !DILocalVariable(name: "imm", arg: 2, scope: !6684, file: !5276, line: 1018, type: !5458)
!6690 = !DILocation(line: 1018, column: 61, scope: !6684)
!6691 = !DILocalVariable(name: "use_p", scope: !6684, file: !5276, line: 1020, type: !4488)
!6692 = !DILocation(line: 1020, column: 17, scope: !6684)
!6693 = !DILocalVariable(name: "last_p", scope: !6684, file: !5276, line: 1021, type: !4488)
!6694 = !DILocation(line: 1021, column: 17, scope: !6684)
!6695 = !DILocation(line: 1021, column: 26, scope: !6684)
!6696 = !DILocalVariable(name: "head_stmt", scope: !6684, file: !5276, line: 1022, type: !3220)
!6697 = !DILocation(line: 1022, column: 10, scope: !6684)
!6698 = !DILocation(line: 1022, column: 22, scope: !6684)
!6699 = !DILocalVariable(name: "use", scope: !6684, file: !5276, line: 1023, type: !3245)
!6700 = !DILocation(line: 1023, column: 8, scope: !6684)
!6701 = !DILocation(line: 1023, column: 14, scope: !6684)
!6702 = !DILocalVariable(name: "op_iter", scope: !6684, file: !5276, line: 1024, type: !5353)
!6703 = !DILocation(line: 1024, column: 15, scope: !6684)
!6704 = !DILocalVariable(name: "flag", scope: !6684, file: !5276, line: 1025, type: !3341)
!6705 = !DILocation(line: 1025, column: 7, scope: !6684)
!6706 = !DILocation(line: 1028, column: 26, scope: !6684)
!6707 = !DILocation(line: 1028, column: 11, scope: !6684)
!6708 = !DILocation(line: 1028, column: 8, scope: !6684)
!6709 = !DILocation(line: 1030, column: 20, scope: !6710)
!6710 = distinct !DILexicalBlock(scope: !6684, file: !5276, line: 1030, column: 7)
!6711 = !DILocation(line: 1030, column: 7, scope: !6710)
!6712 = !DILocation(line: 1030, column: 31, scope: !6710)
!6713 = !DILocation(line: 1030, column: 7, scope: !6684)
!6714 = !DILocation(line: 1032, column: 7, scope: !6715)
!6715 = distinct !DILexicalBlock(scope: !6716, file: !5276, line: 1032, column: 7)
!6716 = distinct !DILexicalBlock(scope: !6710, file: !5276, line: 1031, column: 5)
!6717 = !DILocation(line: 1032, column: 7, scope: !6718)
!6718 = distinct !DILexicalBlock(scope: !6715, file: !5276, line: 1032, column: 7)
!6719 = !DILocation(line: 1033, column: 6, scope: !6720)
!6720 = distinct !DILexicalBlock(scope: !6718, file: !5276, line: 1033, column: 6)
!6721 = !DILocation(line: 1033, column: 30, scope: !6720)
!6722 = !DILocation(line: 1033, column: 27, scope: !6720)
!6723 = !DILocation(line: 1033, column: 6, scope: !6718)
!6724 = !DILocation(line: 1034, column: 34, scope: !6720)
!6725 = !DILocation(line: 1034, column: 41, scope: !6720)
!6726 = !DILocation(line: 1034, column: 47, scope: !6720)
!6727 = !DILocation(line: 1034, column: 13, scope: !6720)
!6728 = !DILocation(line: 1034, column: 11, scope: !6720)
!6729 = !DILocation(line: 1034, column: 4, scope: !6720)
!6730 = distinct !{!6730, !6714, !6731}
!6731 = !DILocation(line: 1034, column: 53, scope: !6715)
!6732 = !DILocation(line: 1035, column: 5, scope: !6716)
!6733 = !DILocation(line: 1038, column: 11, scope: !6734)
!6734 = distinct !DILexicalBlock(scope: !6735, file: !5276, line: 1038, column: 11)
!6735 = distinct !DILexicalBlock(scope: !6710, file: !5276, line: 1037, column: 5)
!6736 = !DILocation(line: 1038, column: 16, scope: !6734)
!6737 = !DILocation(line: 1038, column: 11, scope: !6735)
!6738 = !DILocation(line: 1040, column: 4, scope: !6739)
!6739 = distinct !DILexicalBlock(scope: !6740, file: !5276, line: 1040, column: 4)
!6740 = distinct !DILexicalBlock(scope: !6734, file: !5276, line: 1039, column: 2)
!6741 = !DILocation(line: 1040, column: 4, scope: !6742)
!6742 = distinct !DILexicalBlock(scope: !6739, file: !5276, line: 1040, column: 4)
!6743 = !DILocation(line: 1041, column: 10, scope: !6744)
!6744 = distinct !DILexicalBlock(scope: !6742, file: !5276, line: 1041, column: 10)
!6745 = !DILocation(line: 1041, column: 34, scope: !6744)
!6746 = !DILocation(line: 1041, column: 31, scope: !6744)
!6747 = !DILocation(line: 1041, column: 10, scope: !6742)
!6748 = !DILocation(line: 1042, column: 38, scope: !6744)
!6749 = !DILocation(line: 1042, column: 45, scope: !6744)
!6750 = !DILocation(line: 1042, column: 51, scope: !6744)
!6751 = !DILocation(line: 1042, column: 17, scope: !6744)
!6752 = !DILocation(line: 1042, column: 15, scope: !6744)
!6753 = !DILocation(line: 1042, column: 8, scope: !6744)
!6754 = distinct !{!6754, !6738, !6755}
!6755 = !DILocation(line: 1042, column: 57, scope: !6739)
!6756 = !DILocation(line: 1043, column: 2, scope: !6740)
!6757 = !DILocation(line: 1044, column: 41, scope: !6758)
!6758 = distinct !DILexicalBlock(scope: !6734, file: !5276, line: 1044, column: 16)
!6759 = !DILocation(line: 1044, column: 25, scope: !6758)
!6760 = !DILocation(line: 1044, column: 23, scope: !6758)
!6761 = !DILocation(line: 1044, column: 53, scope: !6758)
!6762 = !DILocation(line: 1044, column: 16, scope: !6734)
!6763 = !DILocation(line: 1046, column: 8, scope: !6764)
!6764 = distinct !DILexicalBlock(scope: !6765, file: !5276, line: 1046, column: 8)
!6765 = distinct !DILexicalBlock(scope: !6758, file: !5276, line: 1045, column: 2)
!6766 = !DILocation(line: 1046, column: 32, scope: !6764)
!6767 = !DILocation(line: 1046, column: 29, scope: !6764)
!6768 = !DILocation(line: 1046, column: 8, scope: !6765)
!6769 = !DILocation(line: 1047, column: 36, scope: !6764)
!6770 = !DILocation(line: 1047, column: 43, scope: !6764)
!6771 = !DILocation(line: 1047, column: 49, scope: !6764)
!6772 = !DILocation(line: 1047, column: 15, scope: !6764)
!6773 = !DILocation(line: 1047, column: 13, scope: !6764)
!6774 = !DILocation(line: 1047, column: 6, scope: !6764)
!6775 = !DILocation(line: 1048, column: 2, scope: !6765)
!6776 = !DILocation(line: 1051, column: 7, scope: !6777)
!6777 = distinct !DILexicalBlock(scope: !6684, file: !5276, line: 1051, column: 7)
!6778 = !DILocation(line: 1051, column: 12, scope: !6777)
!6779 = !DILocation(line: 1051, column: 22, scope: !6777)
!6780 = !DILocation(line: 1051, column: 27, scope: !6777)
!6781 = !DILocation(line: 1051, column: 7, scope: !6684)
!6782 = !DILocation(line: 1052, column: 22, scope: !6777)
!6783 = !DILocation(line: 1052, column: 27, scope: !6777)
!6784 = !DILocation(line: 1052, column: 5, scope: !6777)
!6785 = !DILocation(line: 1053, column: 27, scope: !6684)
!6786 = !DILocation(line: 1053, column: 32, scope: !6684)
!6787 = !DILocation(line: 1053, column: 44, scope: !6684)
!6788 = !DILocation(line: 1053, column: 3, scope: !6684)
!6789 = !DILocation(line: 1054, column: 1, scope: !6684)
!6790 = distinct !DISubprogram(name: "op_iter_init_phiuse", scope: !5276, file: !5276, line: 910, type: !6791, scopeLine: 911, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4559)
!6791 = !DISubroutineType(types: !6792)
!6792 = !{!4488, !6325, !3220, !3341}
!6793 = !DILocalVariable(name: "ptr", arg: 1, scope: !6790, file: !5276, line: 910, type: !6325)
!6794 = !DILocation(line: 910, column: 35, scope: !6790)
!6795 = !DILocalVariable(name: "phi", arg: 2, scope: !6790, file: !5276, line: 910, type: !3220)
!6796 = !DILocation(line: 910, column: 47, scope: !6790)
!6797 = !DILocalVariable(name: "flags", arg: 3, scope: !6790, file: !5276, line: 910, type: !3341)
!6798 = !DILocation(line: 910, column: 56, scope: !6790)
!6799 = !DILocalVariable(name: "phi_def", scope: !6790, file: !5276, line: 912, type: !3245)
!6800 = !DILocation(line: 912, column: 8, scope: !6790)
!6801 = !DILocation(line: 912, column: 37, scope: !6790)
!6802 = !DILocation(line: 912, column: 18, scope: !6790)
!6803 = !DILocalVariable(name: "comp", scope: !6790, file: !5276, line: 913, type: !3341)
!6804 = !DILocation(line: 913, column: 7, scope: !6790)
!6805 = !DILocation(line: 915, column: 28, scope: !6790)
!6806 = !DILocation(line: 915, column: 3, scope: !6790)
!6807 = !DILocation(line: 916, column: 3, scope: !6790)
!6808 = !DILocation(line: 916, column: 8, scope: !6790)
!6809 = !DILocation(line: 916, column: 13, scope: !6790)
!6810 = !DILocation(line: 918, column: 3, scope: !6790)
!6811 = !DILocation(line: 920, column: 26, scope: !6790)
!6812 = !DILocation(line: 920, column: 11, scope: !6790)
!6813 = !DILocation(line: 920, column: 8, scope: !6790)
!6814 = !DILocation(line: 923, column: 8, scope: !6815)
!6815 = distinct !DILexicalBlock(scope: !6790, file: !5276, line: 923, column: 7)
!6816 = !DILocation(line: 923, column: 16, scope: !6815)
!6817 = !DILocation(line: 923, column: 14, scope: !6815)
!6818 = !DILocation(line: 923, column: 22, scope: !6815)
!6819 = !DILocation(line: 923, column: 7, scope: !6790)
!6820 = !DILocation(line: 925, column: 7, scope: !6821)
!6821 = distinct !DILexicalBlock(scope: !6815, file: !5276, line: 924, column: 5)
!6822 = !DILocation(line: 925, column: 12, scope: !6821)
!6823 = !DILocation(line: 925, column: 17, scope: !6821)
!6824 = !DILocation(line: 926, column: 7, scope: !6821)
!6825 = !DILocation(line: 929, column: 19, scope: !6790)
!6826 = !DILocation(line: 929, column: 3, scope: !6790)
!6827 = !DILocation(line: 929, column: 8, scope: !6790)
!6828 = !DILocation(line: 929, column: 17, scope: !6790)
!6829 = !DILocation(line: 930, column: 39, scope: !6790)
!6830 = !DILocation(line: 930, column: 18, scope: !6790)
!6831 = !DILocation(line: 930, column: 3, scope: !6790)
!6832 = !DILocation(line: 930, column: 8, scope: !6790)
!6833 = !DILocation(line: 930, column: 16, scope: !6790)
!6834 = !DILocation(line: 931, column: 3, scope: !6790)
!6835 = !DILocation(line: 931, column: 8, scope: !6790)
!6836 = !DILocation(line: 931, column: 18, scope: !6790)
!6837 = !DILocation(line: 932, column: 28, scope: !6790)
!6838 = !DILocation(line: 932, column: 10, scope: !6790)
!6839 = !DILocation(line: 932, column: 3, scope: !6790)
!6840 = !DILocation(line: 933, column: 1, scope: !6790)
!6841 = distinct !DISubprogram(name: "move_use_after_head", scope: !5276, file: !5276, line: 990, type: !6842, scopeLine: 992, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4559)
!6842 = !DISubroutineType(types: !6843)
!6843 = !{!4488, !4488, !4488, !4488}
!6844 = !DILocalVariable(name: "use_p", arg: 1, scope: !6841, file: !5276, line: 990, type: !4488)
!6845 = !DILocation(line: 990, column: 36, scope: !6841)
!6846 = !DILocalVariable(name: "head", arg: 2, scope: !6841, file: !5276, line: 990, type: !4488)
!6847 = !DILocation(line: 990, column: 57, scope: !6841)
!6848 = !DILocalVariable(name: "last_p", arg: 3, scope: !6841, file: !5276, line: 991, type: !4488)
!6849 = !DILocation(line: 991, column: 23, scope: !6841)
!6850 = !DILocation(line: 997, column: 7, scope: !6851)
!6851 = distinct !DILexicalBlock(scope: !6841, file: !5276, line: 997, column: 7)
!6852 = !DILocation(line: 997, column: 16, scope: !6851)
!6853 = !DILocation(line: 997, column: 13, scope: !6851)
!6854 = !DILocation(line: 997, column: 7, scope: !6841)
!6855 = !DILocation(line: 1000, column: 11, scope: !6856)
!6856 = distinct !DILexicalBlock(scope: !6857, file: !5276, line: 1000, column: 11)
!6857 = distinct !DILexicalBlock(scope: !6851, file: !5276, line: 998, column: 5)
!6858 = !DILocation(line: 1000, column: 19, scope: !6856)
!6859 = !DILocation(line: 1000, column: 27, scope: !6856)
!6860 = !DILocation(line: 1000, column: 24, scope: !6856)
!6861 = !DILocation(line: 1000, column: 11, scope: !6857)
!6862 = !DILocation(line: 1001, column: 11, scope: !6856)
!6863 = !DILocation(line: 1001, column: 9, scope: !6856)
!6864 = !DILocation(line: 1001, column: 2, scope: !6856)
!6865 = !DILocation(line: 1005, column: 20, scope: !6866)
!6866 = distinct !DILexicalBlock(scope: !6856, file: !5276, line: 1003, column: 2)
!6867 = !DILocation(line: 1005, column: 4, scope: !6866)
!6868 = !DILocation(line: 1006, column: 26, scope: !6866)
!6869 = !DILocation(line: 1006, column: 33, scope: !6866)
!6870 = !DILocation(line: 1006, column: 4, scope: !6866)
!6871 = !DILocation(line: 1007, column: 13, scope: !6866)
!6872 = !DILocation(line: 1007, column: 11, scope: !6866)
!6873 = !DILocation(line: 1009, column: 5, scope: !6857)
!6874 = !DILocation(line: 1010, column: 10, scope: !6841)
!6875 = !DILocation(line: 1010, column: 3, scope: !6841)
!6876 = distinct !DISubprogram(name: "op_iter_next_use", scope: !5276, file: !5276, line: 659, type: !6877, scopeLine: 660, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4559)
!6877 = !DISubroutineType(types: !6878)
!6878 = !{!4488, !6325}
!6879 = !DILocalVariable(name: "ptr", arg: 1, scope: !6876, file: !5276, line: 659, type: !6325)
!6880 = !DILocation(line: 659, column: 32, scope: !6876)
!6881 = !DILocalVariable(name: "use_p", scope: !6876, file: !5276, line: 661, type: !4488)
!6882 = !DILocation(line: 661, column: 17, scope: !6876)
!6883 = !DILocation(line: 665, column: 7, scope: !6884)
!6884 = distinct !DILexicalBlock(scope: !6876, file: !5276, line: 665, column: 7)
!6885 = !DILocation(line: 665, column: 12, scope: !6884)
!6886 = !DILocation(line: 665, column: 7, scope: !6876)
!6887 = !DILocation(line: 667, column: 15, scope: !6888)
!6888 = distinct !DILexicalBlock(scope: !6884, file: !5276, line: 666, column: 5)
!6889 = !DILocation(line: 667, column: 13, scope: !6888)
!6890 = !DILocation(line: 668, column: 19, scope: !6888)
!6891 = !DILocation(line: 668, column: 24, scope: !6888)
!6892 = !DILocation(line: 668, column: 30, scope: !6888)
!6893 = !DILocation(line: 668, column: 7, scope: !6888)
!6894 = !DILocation(line: 668, column: 12, scope: !6888)
!6895 = !DILocation(line: 668, column: 17, scope: !6888)
!6896 = !DILocation(line: 669, column: 14, scope: !6888)
!6897 = !DILocation(line: 669, column: 7, scope: !6888)
!6898 = !DILocation(line: 671, column: 7, scope: !6899)
!6899 = distinct !DILexicalBlock(scope: !6876, file: !5276, line: 671, column: 7)
!6900 = !DILocation(line: 671, column: 12, scope: !6899)
!6901 = !DILocation(line: 671, column: 20, scope: !6899)
!6902 = !DILocation(line: 671, column: 25, scope: !6899)
!6903 = !DILocation(line: 671, column: 18, scope: !6899)
!6904 = !DILocation(line: 671, column: 7, scope: !6876)
!6905 = !DILocation(line: 673, column: 14, scope: !6906)
!6906 = distinct !DILexicalBlock(scope: !6899, file: !5276, line: 672, column: 5)
!6907 = !DILocation(line: 673, column: 7, scope: !6906)
!6908 = !DILocation(line: 675, column: 3, scope: !6876)
!6909 = !DILocation(line: 675, column: 8, scope: !6876)
!6910 = !DILocation(line: 675, column: 13, scope: !6876)
!6911 = !DILocation(line: 676, column: 3, scope: !6876)
!6912 = !DILocation(line: 677, column: 1, scope: !6876)
!6913 = distinct !DISubprogram(name: "op_iter_init_use", scope: !5276, file: !5276, line: 768, type: !6791, scopeLine: 769, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4559)
!6914 = !DILocalVariable(name: "ptr", arg: 1, scope: !6913, file: !5276, line: 768, type: !6325)
!6915 = !DILocation(line: 768, column: 32, scope: !6913)
!6916 = !DILocalVariable(name: "stmt", arg: 2, scope: !6913, file: !5276, line: 768, type: !3220)
!6917 = !DILocation(line: 768, column: 44, scope: !6913)
!6918 = !DILocalVariable(name: "flags", arg: 3, scope: !6913, file: !5276, line: 768, type: !3341)
!6919 = !DILocation(line: 768, column: 54, scope: !6913)
!6920 = !DILocation(line: 770, column: 3, scope: !6913)
!6921 = !DILocation(line: 772, column: 17, scope: !6913)
!6922 = !DILocation(line: 772, column: 22, scope: !6913)
!6923 = !DILocation(line: 772, column: 28, scope: !6913)
!6924 = !DILocation(line: 772, column: 3, scope: !6913)
!6925 = !DILocation(line: 773, column: 3, scope: !6913)
!6926 = !DILocation(line: 773, column: 8, scope: !6913)
!6927 = !DILocation(line: 773, column: 18, scope: !6913)
!6928 = !DILocation(line: 774, column: 28, scope: !6913)
!6929 = !DILocation(line: 774, column: 10, scope: !6913)
!6930 = !DILocation(line: 774, column: 3, scope: !6913)
!6931 = distinct !DISubprogram(name: "gimple_vuse_op", scope: !1291, file: !1291, line: 1334, type: !6932, scopeLine: 1335, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4559)
!6932 = !DISubroutineType(types: !6933)
!6933 = !{!4488, !5385}
!6934 = !DILocalVariable(name: "g", arg: 1, scope: !6931, file: !1291, line: 1334, type: !5385)
!6935 = !DILocation(line: 1334, column: 30, scope: !6931)
!6936 = !DILocalVariable(name: "ops", scope: !6931, file: !1291, line: 1336, type: !3836)
!6937 = !DILocation(line: 1336, column: 24, scope: !6931)
!6938 = !DILocation(line: 1337, column: 28, scope: !6939)
!6939 = distinct !DILexicalBlock(scope: !6931, file: !1291, line: 1337, column: 7)
!6940 = !DILocation(line: 1337, column: 8, scope: !6939)
!6941 = !DILocation(line: 1337, column: 7, scope: !6931)
!6942 = !DILocation(line: 1338, column: 5, scope: !6939)
!6943 = !DILocation(line: 1339, column: 9, scope: !6931)
!6944 = !DILocation(line: 1339, column: 12, scope: !6931)
!6945 = !DILocation(line: 1339, column: 18, scope: !6931)
!6946 = !DILocation(line: 1339, column: 25, scope: !6931)
!6947 = !DILocation(line: 1339, column: 7, scope: !6931)
!6948 = !DILocation(line: 1340, column: 7, scope: !6949)
!6949 = distinct !DILexicalBlock(scope: !6931, file: !1291, line: 1340, column: 7)
!6950 = !DILocation(line: 1341, column: 7, scope: !6949)
!6951 = !DILocation(line: 1341, column: 10, scope: !6949)
!6952 = !DILocation(line: 1341, column: 28, scope: !6949)
!6953 = !DILocation(line: 1341, column: 36, scope: !6949)
!6954 = !DILocation(line: 1341, column: 39, scope: !6949)
!6955 = !DILocation(line: 1341, column: 49, scope: !6949)
!6956 = !DILocation(line: 1341, column: 32, scope: !6949)
!6957 = !DILocation(line: 1340, column: 7, scope: !6931)
!6958 = !DILocation(line: 1342, column: 12, scope: !6949)
!6959 = !DILocation(line: 1342, column: 5, scope: !6949)
!6960 = !DILocation(line: 1343, column: 3, scope: !6931)
!6961 = !DILocation(line: 1344, column: 1, scope: !6931)
!6962 = distinct !DISubprogram(name: "gimple_phi_result", scope: !1291, file: !1291, line: 3071, type: !5413, scopeLine: 3072, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4559)
!6963 = !DILocalVariable(name: "gs", arg: 1, scope: !6962, file: !1291, line: 3071, type: !5385)
!6964 = !DILocation(line: 3071, column: 33, scope: !6962)
!6965 = !DILocation(line: 3074, column: 10, scope: !6962)
!6966 = !DILocation(line: 3074, column: 14, scope: !6962)
!6967 = !DILocation(line: 3074, column: 25, scope: !6962)
!6968 = !DILocation(line: 3074, column: 3, scope: !6962)
!6969 = distinct !DISubprogram(name: "clear_and_done_ssa_iter", scope: !5276, file: !5276, line: 729, type: !6970, scopeLine: 730, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4559)
!6970 = !DISubroutineType(types: !6971)
!6971 = !{null, !6325}
!6972 = !DILocalVariable(name: "ptr", arg: 1, scope: !6969, file: !5276, line: 729, type: !6325)
!6973 = !DILocation(line: 729, column: 39, scope: !6969)
!6974 = !DILocation(line: 731, column: 3, scope: !6969)
!6975 = !DILocation(line: 731, column: 8, scope: !6969)
!6976 = !DILocation(line: 731, column: 13, scope: !6969)
!6977 = !DILocation(line: 732, column: 3, scope: !6969)
!6978 = !DILocation(line: 732, column: 8, scope: !6969)
!6979 = !DILocation(line: 732, column: 13, scope: !6969)
!6980 = !DILocation(line: 733, column: 3, scope: !6969)
!6981 = !DILocation(line: 733, column: 8, scope: !6969)
!6982 = !DILocation(line: 733, column: 18, scope: !6969)
!6983 = !DILocation(line: 734, column: 3, scope: !6969)
!6984 = !DILocation(line: 734, column: 8, scope: !6969)
!6985 = !DILocation(line: 734, column: 14, scope: !6969)
!6986 = !DILocation(line: 735, column: 3, scope: !6969)
!6987 = !DILocation(line: 735, column: 8, scope: !6969)
!6988 = !DILocation(line: 735, column: 16, scope: !6969)
!6989 = !DILocation(line: 736, column: 3, scope: !6969)
!6990 = !DILocation(line: 736, column: 8, scope: !6969)
!6991 = !DILocation(line: 736, column: 17, scope: !6969)
!6992 = !DILocation(line: 737, column: 3, scope: !6969)
!6993 = !DILocation(line: 737, column: 8, scope: !6969)
!6994 = !DILocation(line: 737, column: 13, scope: !6969)
!6995 = !DILocation(line: 738, column: 1, scope: !6969)
!6996 = distinct !DISubprogram(name: "gimple_phi_num_args", scope: !1291, file: !1291, line: 3061, type: !6594, scopeLine: 3062, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4559)
!6997 = !DILocalVariable(name: "gs", arg: 1, scope: !6996, file: !1291, line: 3061, type: !5385)
!6998 = !DILocation(line: 3061, column: 35, scope: !6996)
!6999 = !DILocation(line: 3064, column: 10, scope: !6996)
!7000 = !DILocation(line: 3064, column: 14, scope: !6996)
!7001 = !DILocation(line: 3064, column: 25, scope: !6996)
!7002 = !DILocation(line: 3064, column: 3, scope: !6996)
!7003 = distinct !DISubprogram(name: "gimple_phi_arg_imm_use_ptr", scope: !5276, file: !5276, line: 442, type: !7004, scopeLine: 443, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4559)
!7004 = !DISubroutineType(types: !7005)
!7005 = !{!4488, !3220, !3341}
!7006 = !DILocalVariable(name: "gs", arg: 1, scope: !7003, file: !5276, line: 442, type: !3220)
!7007 = !DILocation(line: 442, column: 36, scope: !7003)
!7008 = !DILocalVariable(name: "i", arg: 2, scope: !7003, file: !5276, line: 442, type: !3341)
!7009 = !DILocation(line: 442, column: 44, scope: !7003)
!7010 = !DILocation(line: 444, column: 27, scope: !7003)
!7011 = !DILocation(line: 444, column: 31, scope: !7003)
!7012 = !DILocation(line: 444, column: 11, scope: !7003)
!7013 = !DILocation(line: 444, column: 35, scope: !7003)
!7014 = !DILocation(line: 444, column: 3, scope: !7003)
!7015 = distinct !DISubprogram(name: "gimple_phi_arg", scope: !1291, file: !1291, line: 3100, type: !7016, scopeLine: 3101, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4559)
!7016 = !DISubroutineType(types: !7017)
!7017 = !{!7018, !3220, !7}
!7018 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4340, size: 64)
!7019 = !DILocalVariable(name: "gs", arg: 1, scope: !7015, file: !1291, line: 3100, type: !3220)
!7020 = !DILocation(line: 3100, column: 24, scope: !7015)
!7021 = !DILocalVariable(name: "index", arg: 2, scope: !7015, file: !1291, line: 3100, type: !7)
!7022 = !DILocation(line: 3100, column: 37, scope: !7015)
!7023 = !DILocation(line: 3103, column: 3, scope: !7015)
!7024 = !DILocation(line: 3104, column: 12, scope: !7015)
!7025 = !DILocation(line: 3104, column: 16, scope: !7015)
!7026 = !DILocation(line: 3104, column: 27, scope: !7015)
!7027 = !DILocation(line: 3104, column: 32, scope: !7015)
!7028 = !DILocation(line: 3104, column: 3, scope: !7015)
!7029 = distinct !DISubprogram(name: "gimple_call_arg", scope: !1291, file: !1291, line: 2025, type: !6603, scopeLine: 2026, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4559)
!7030 = !DILocalVariable(name: "gs", arg: 1, scope: !7029, file: !1291, line: 2025, type: !5385)
!7031 = !DILocation(line: 2025, column: 31, scope: !7029)
!7032 = !DILocalVariable(name: "index", arg: 2, scope: !7029, file: !1291, line: 2025, type: !7)
!7033 = !DILocation(line: 2025, column: 44, scope: !7029)
!7034 = !DILocation(line: 2028, column: 21, scope: !7029)
!7035 = !DILocation(line: 2028, column: 25, scope: !7029)
!7036 = !DILocation(line: 2028, column: 31, scope: !7029)
!7037 = !DILocation(line: 2028, column: 10, scope: !7029)
!7038 = !DILocation(line: 2028, column: 3, scope: !7029)
!7039 = distinct !DISubprogram(name: "execute_cse_sincos_1", scope: !3, file: !3, line: 644, type: !7040, scopeLine: 645, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4559)
!7040 = !DISubroutineType(types: !7041)
!7041 = !{null, !3245}
!7042 = !DILocalVariable(name: "name", arg: 1, scope: !7039, file: !3, line: 644, type: !3245)
!7043 = !DILocation(line: 644, column: 28, scope: !7039)
!7044 = !DILocalVariable(name: "gsi", scope: !7039, file: !3, line: 646, type: !4610)
!7045 = !DILocation(line: 646, column: 24, scope: !7039)
!7046 = !DILocalVariable(name: "use_iter", scope: !7039, file: !3, line: 647, type: !4745)
!7047 = !DILocation(line: 647, column: 20, scope: !7039)
!7048 = !DILocalVariable(name: "fndecl", scope: !7039, file: !3, line: 648, type: !3245)
!7049 = !DILocation(line: 648, column: 8, scope: !7039)
!7050 = !DILocalVariable(name: "res", scope: !7039, file: !3, line: 648, type: !3245)
!7051 = !DILocation(line: 648, column: 16, scope: !7039)
!7052 = !DILocalVariable(name: "type", scope: !7039, file: !3, line: 648, type: !3245)
!7053 = !DILocation(line: 648, column: 21, scope: !7039)
!7054 = !DILocalVariable(name: "def_stmt", scope: !7039, file: !3, line: 649, type: !3220)
!7055 = !DILocation(line: 649, column: 10, scope: !7039)
!7056 = !DILocalVariable(name: "use_stmt", scope: !7039, file: !3, line: 649, type: !3220)
!7057 = !DILocation(line: 649, column: 20, scope: !7039)
!7058 = !DILocalVariable(name: "stmt", scope: !7039, file: !3, line: 649, type: !3220)
!7059 = !DILocation(line: 649, column: 30, scope: !7039)
!7060 = !DILocalVariable(name: "seen_cos", scope: !7039, file: !3, line: 650, type: !3341)
!7061 = !DILocation(line: 650, column: 7, scope: !7039)
!7062 = !DILocalVariable(name: "seen_sin", scope: !7039, file: !3, line: 650, type: !3341)
!7063 = !DILocation(line: 650, column: 21, scope: !7039)
!7064 = !DILocalVariable(name: "seen_cexpi", scope: !7039, file: !3, line: 650, type: !3341)
!7065 = !DILocation(line: 650, column: 35, scope: !7039)
!7066 = !DILocalVariable(name: "stmts", scope: !7039, file: !3, line: 651, type: !4493)
!7067 = !DILocation(line: 651, column: 22, scope: !7039)
!7068 = !DILocalVariable(name: "top_bb", scope: !7039, file: !3, line: 652, type: !3182)
!7069 = !DILocation(line: 652, column: 15, scope: !7039)
!7070 = !DILocalVariable(name: "i", scope: !7039, file: !3, line: 653, type: !3341)
!7071 = !DILocation(line: 653, column: 7, scope: !7039)
!7072 = !DILocation(line: 655, column: 10, scope: !7039)
!7073 = !DILocation(line: 655, column: 8, scope: !7039)
!7074 = !DILocation(line: 656, column: 3, scope: !7075)
!7075 = distinct !DILexicalBlock(scope: !7039, file: !3, line: 656, column: 3)
!7076 = !DILocation(line: 656, column: 3, scope: !7077)
!7077 = distinct !DILexicalBlock(scope: !7075, file: !3, line: 656, column: 3)
!7078 = !DILocation(line: 658, column: 24, scope: !7079)
!7079 = distinct !DILexicalBlock(scope: !7080, file: !3, line: 658, column: 11)
!7080 = distinct !DILexicalBlock(scope: !7077, file: !3, line: 657, column: 5)
!7081 = !DILocation(line: 658, column: 11, scope: !7079)
!7082 = !DILocation(line: 658, column: 34, scope: !7079)
!7083 = !DILocation(line: 659, column: 4, scope: !7079)
!7084 = !DILocation(line: 659, column: 25, scope: !7079)
!7085 = !DILocation(line: 659, column: 8, scope: !7079)
!7086 = !DILocation(line: 660, column: 4, scope: !7079)
!7087 = !DILocation(line: 660, column: 38, scope: !7079)
!7088 = !DILocation(line: 660, column: 18, scope: !7079)
!7089 = !DILocation(line: 660, column: 16, scope: !7079)
!7090 = !DILocation(line: 661, column: 4, scope: !7079)
!7091 = !DILocation(line: 661, column: 7, scope: !7079)
!7092 = !DILocation(line: 661, column: 36, scope: !7079)
!7093 = !DILocation(line: 658, column: 11, scope: !7080)
!7094 = !DILocation(line: 662, column: 2, scope: !7079)
!7095 = !DILocation(line: 664, column: 15, scope: !7080)
!7096 = !DILocation(line: 664, column: 7, scope: !7080)
!7097 = !DILocation(line: 667, column: 54, scope: !7098)
!7098 = distinct !DILexicalBlock(scope: !7080, file: !3, line: 665, column: 2)
!7099 = !DILocation(line: 667, column: 16, scope: !7098)
!7100 = !DILocation(line: 667, column: 13, scope: !7098)
!7101 = !DILocation(line: 668, column: 4, scope: !7098)
!7102 = !DILocation(line: 671, column: 54, scope: !7098)
!7103 = !DILocation(line: 671, column: 16, scope: !7098)
!7104 = !DILocation(line: 671, column: 13, scope: !7098)
!7105 = !DILocation(line: 672, column: 4, scope: !7098)
!7106 = !DILocation(line: 675, column: 56, scope: !7098)
!7107 = !DILocation(line: 675, column: 18, scope: !7098)
!7108 = !DILocation(line: 675, column: 15, scope: !7098)
!7109 = !DILocation(line: 676, column: 4, scope: !7098)
!7110 = !DILocation(line: 679, column: 2, scope: !7098)
!7111 = !DILocation(line: 680, column: 5, scope: !7080)
!7112 = distinct !{!7112, !7074, !7113}
!7113 = !DILocation(line: 680, column: 5, scope: !7075)
!7114 = !DILocation(line: 682, column: 7, scope: !7115)
!7115 = distinct !DILexicalBlock(scope: !7039, file: !3, line: 682, column: 7)
!7116 = !DILocation(line: 682, column: 18, scope: !7115)
!7117 = !DILocation(line: 682, column: 16, scope: !7115)
!7118 = !DILocation(line: 682, column: 29, scope: !7115)
!7119 = !DILocation(line: 682, column: 27, scope: !7115)
!7120 = !DILocation(line: 682, column: 40, scope: !7115)
!7121 = !DILocation(line: 682, column: 7, scope: !7039)
!7122 = !DILocation(line: 684, column: 7, scope: !7123)
!7123 = distinct !DILexicalBlock(scope: !7115, file: !3, line: 683, column: 5)
!7124 = !DILocation(line: 685, column: 7, scope: !7123)
!7125 = !DILocation(line: 690, column: 29, scope: !7039)
!7126 = !DILocation(line: 690, column: 12, scope: !7039)
!7127 = !DILocation(line: 690, column: 10, scope: !7039)
!7128 = !DILocation(line: 691, column: 8, scope: !7129)
!7129 = distinct !DILexicalBlock(scope: !7039, file: !3, line: 691, column: 7)
!7130 = !DILocation(line: 691, column: 7, scope: !7039)
!7131 = !DILocation(line: 692, column: 5, scope: !7129)
!7132 = !DILocation(line: 693, column: 27, scope: !7039)
!7133 = !DILocation(line: 693, column: 9, scope: !7039)
!7134 = !DILocation(line: 693, column: 7, scope: !7039)
!7135 = !DILocation(line: 694, column: 29, scope: !7039)
!7136 = !DILocation(line: 694, column: 40, scope: !7039)
!7137 = !DILocation(line: 694, column: 10, scope: !7039)
!7138 = !DILocation(line: 694, column: 8, scope: !7039)
!7139 = !DILocation(line: 695, column: 24, scope: !7039)
!7140 = !DILocation(line: 695, column: 30, scope: !7039)
!7141 = !DILocation(line: 695, column: 3, scope: !7039)
!7142 = !DILocation(line: 697, column: 14, scope: !7039)
!7143 = !DILocation(line: 697, column: 12, scope: !7039)
!7144 = !DILocation(line: 698, column: 8, scope: !7145)
!7145 = distinct !DILexicalBlock(scope: !7039, file: !3, line: 698, column: 7)
!7146 = !DILocation(line: 699, column: 7, scope: !7145)
!7147 = !DILocation(line: 699, column: 23, scope: !7145)
!7148 = !DILocation(line: 699, column: 10, scope: !7145)
!7149 = !DILocation(line: 699, column: 33, scope: !7145)
!7150 = !DILocation(line: 700, column: 7, scope: !7145)
!7151 = !DILocation(line: 700, column: 21, scope: !7145)
!7152 = !DILocation(line: 700, column: 10, scope: !7145)
!7153 = !DILocation(line: 700, column: 34, scope: !7145)
!7154 = !DILocation(line: 700, column: 31, scope: !7145)
!7155 = !DILocation(line: 698, column: 7, scope: !7039)
!7156 = !DILocation(line: 702, column: 27, scope: !7157)
!7157 = distinct !DILexicalBlock(scope: !7145, file: !3, line: 701, column: 5)
!7158 = !DILocation(line: 702, column: 13, scope: !7157)
!7159 = !DILocation(line: 703, column: 31, scope: !7157)
!7160 = !DILocation(line: 703, column: 7, scope: !7157)
!7161 = !DILocation(line: 704, column: 5, scope: !7157)
!7162 = !DILocation(line: 707, column: 31, scope: !7163)
!7163 = distinct !DILexicalBlock(scope: !7145, file: !3, line: 706, column: 5)
!7164 = !DILocation(line: 707, column: 13, scope: !7163)
!7165 = !DILocation(line: 708, column: 32, scope: !7163)
!7166 = !DILocation(line: 708, column: 7, scope: !7163)
!7167 = !DILocation(line: 710, column: 16, scope: !7039)
!7168 = !DILocation(line: 710, column: 3, scope: !7039)
!7169 = !DILocation(line: 713, column: 10, scope: !7170)
!7170 = distinct !DILexicalBlock(scope: !7039, file: !3, line: 713, column: 3)
!7171 = !DILocation(line: 713, column: 8, scope: !7170)
!7172 = !DILocation(line: 713, column: 15, scope: !7173)
!7173 = distinct !DILexicalBlock(scope: !7170, file: !3, line: 713, column: 3)
!7174 = !DILocation(line: 713, column: 3, scope: !7170)
!7175 = !DILocalVariable(name: "rhs", scope: !7176, file: !3, line: 715, type: !3245)
!7176 = distinct !DILexicalBlock(scope: !7173, file: !3, line: 714, column: 5)
!7177 = !DILocation(line: 715, column: 12, scope: !7176)
!7178 = !DILocation(line: 716, column: 36, scope: !7176)
!7179 = !DILocation(line: 716, column: 16, scope: !7176)
!7180 = !DILocation(line: 716, column: 14, scope: !7176)
!7181 = !DILocation(line: 718, column: 15, scope: !7176)
!7182 = !DILocation(line: 718, column: 7, scope: !7176)
!7183 = !DILocation(line: 721, column: 10, scope: !7184)
!7184 = distinct !DILexicalBlock(scope: !7176, file: !3, line: 719, column: 2)
!7185 = !DILocation(line: 721, column: 8, scope: !7184)
!7186 = !DILocation(line: 722, column: 4, scope: !7184)
!7187 = !DILocation(line: 725, column: 10, scope: !7184)
!7188 = !DILocation(line: 725, column: 8, scope: !7184)
!7189 = !DILocation(line: 726, column: 4, scope: !7184)
!7190 = !DILocation(line: 729, column: 10, scope: !7184)
!7191 = !DILocation(line: 729, column: 8, scope: !7184)
!7192 = !DILocation(line: 730, column: 4, scope: !7184)
!7193 = !DILocation(line: 733, column: 4, scope: !7184)
!7194 = !DILocation(line: 734, column: 2, scope: !7184)
!7195 = !DILocation(line: 737, column: 9, scope: !7176)
!7196 = !DILocation(line: 737, column: 7, scope: !7176)
!7197 = !DILocation(line: 739, column: 22, scope: !7176)
!7198 = !DILocation(line: 739, column: 8, scope: !7176)
!7199 = !DILocation(line: 740, column: 26, scope: !7176)
!7200 = !DILocation(line: 740, column: 2, scope: !7176)
!7201 = !DILocation(line: 741, column: 2, scope: !7176)
!7202 = !DILocation(line: 742, column: 5, scope: !7176)
!7203 = !DILocation(line: 713, column: 56, scope: !7173)
!7204 = !DILocation(line: 713, column: 3, scope: !7173)
!7205 = distinct !{!7205, !7174, !7206}
!7206 = !DILocation(line: 742, column: 5, scope: !7170)
!7207 = !DILocation(line: 744, column: 3, scope: !7039)
!7208 = !DILocation(line: 745, column: 1, scope: !7039)
!7209 = distinct !DISubprogram(name: "maybe_record_sincos", scope: !3, file: !3, line: 615, type: !7210, scopeLine: 617, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4559)
!7210 = !DISubroutineType(types: !7211)
!7211 = !{!3364, !7212, !7213, !3220}
!7212 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4493, size: 64)
!7213 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3182, size: 64)
!7214 = !DILocalVariable(name: "stmts", arg: 1, scope: !7209, file: !3, line: 615, type: !7212)
!7215 = !DILocation(line: 615, column: 42, scope: !7209)
!7216 = !DILocalVariable(name: "top_bb", arg: 2, scope: !7209, file: !3, line: 616, type: !7213)
!7217 = !DILocation(line: 616, column: 21, scope: !7209)
!7218 = !DILocalVariable(name: "use_stmt", arg: 3, scope: !7209, file: !3, line: 616, type: !3220)
!7219 = !DILocation(line: 616, column: 36, scope: !7209)
!7220 = !DILocalVariable(name: "use_bb", scope: !7209, file: !3, line: 618, type: !3182)
!7221 = !DILocation(line: 618, column: 15, scope: !7209)
!7222 = !DILocation(line: 618, column: 35, scope: !7209)
!7223 = !DILocation(line: 618, column: 24, scope: !7209)
!7224 = !DILocation(line: 619, column: 8, scope: !7225)
!7225 = distinct !DILexicalBlock(scope: !7209, file: !3, line: 619, column: 7)
!7226 = !DILocation(line: 619, column: 7, scope: !7225)
!7227 = !DILocation(line: 620, column: 7, scope: !7225)
!7228 = !DILocation(line: 620, column: 12, scope: !7225)
!7229 = !DILocation(line: 620, column: 11, scope: !7225)
!7230 = !DILocation(line: 620, column: 22, scope: !7225)
!7231 = !DILocation(line: 620, column: 19, scope: !7225)
!7232 = !DILocation(line: 621, column: 4, scope: !7225)
!7233 = !DILocation(line: 621, column: 39, scope: !7225)
!7234 = !DILocation(line: 621, column: 48, scope: !7225)
!7235 = !DILocation(line: 621, column: 47, scope: !7225)
!7236 = !DILocation(line: 621, column: 7, scope: !7225)
!7237 = !DILocation(line: 619, column: 7, scope: !7209)
!7238 = !DILocation(line: 622, column: 5, scope: !7225)
!7239 = !DILocation(line: 623, column: 14, scope: !7240)
!7240 = distinct !DILexicalBlock(scope: !7225, file: !3, line: 623, column: 12)
!7241 = !DILocation(line: 623, column: 13, scope: !7240)
!7242 = !DILocation(line: 624, column: 5, scope: !7240)
!7243 = !DILocation(line: 624, column: 41, scope: !7240)
!7244 = !DILocation(line: 624, column: 40, scope: !7240)
!7245 = !DILocation(line: 624, column: 49, scope: !7240)
!7246 = !DILocation(line: 624, column: 8, scope: !7240)
!7247 = !DILocation(line: 623, column: 12, scope: !7225)
!7248 = !DILocation(line: 626, column: 7, scope: !7249)
!7249 = distinct !DILexicalBlock(scope: !7240, file: !3, line: 625, column: 5)
!7250 = !DILocation(line: 627, column: 17, scope: !7249)
!7251 = !DILocation(line: 627, column: 8, scope: !7249)
!7252 = !DILocation(line: 627, column: 15, scope: !7249)
!7253 = !DILocation(line: 628, column: 5, scope: !7249)
!7254 = !DILocation(line: 630, column: 5, scope: !7240)
!7255 = !DILocation(line: 632, column: 3, scope: !7209)
!7256 = !DILocation(line: 633, column: 1, scope: !7209)
!7257 = distinct !DISubprogram(name: "VEC_gimple_heap_free", scope: !1291, file: !1291, line: 34, type: !7258, scopeLine: 34, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4559)
!7258 = !DISubroutineType(types: !7259)
!7259 = !{null, !7212}
!7260 = !DILocalVariable(name: "vec_", arg: 1, scope: !7257, file: !1291, line: 34, type: !7212)
!7261 = !DILocation(line: 34, column: 1, scope: !7257)
!7262 = !DILocation(line: 34, column: 1, scope: !7263)
!7263 = distinct !DILexicalBlock(scope: !7257, file: !1291, line: 34, column: 1)
!7264 = distinct !DISubprogram(name: "gimple_call_set_lhs", scope: !1291, file: !1291, line: 1898, type: !5533, scopeLine: 1899, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4559)
!7265 = !DILocalVariable(name: "gs", arg: 1, scope: !7264, file: !1291, line: 1898, type: !3220)
!7266 = !DILocation(line: 1898, column: 29, scope: !7264)
!7267 = !DILocalVariable(name: "lhs", arg: 2, scope: !7264, file: !1291, line: 1898, type: !3245)
!7268 = !DILocation(line: 1898, column: 38, scope: !7264)
!7269 = !DILocation(line: 1901, column: 18, scope: !7264)
!7270 = !DILocation(line: 1901, column: 25, scope: !7264)
!7271 = !DILocation(line: 1901, column: 3, scope: !7264)
!7272 = !DILocation(line: 1902, column: 7, scope: !7273)
!7273 = distinct !DILexicalBlock(scope: !7264, file: !1291, line: 1902, column: 7)
!7274 = !DILocation(line: 1902, column: 11, scope: !7273)
!7275 = !DILocation(line: 1902, column: 14, scope: !7273)
!7276 = !DILocation(line: 1902, column: 30, scope: !7273)
!7277 = !DILocation(line: 1902, column: 7, scope: !7264)
!7278 = !DILocation(line: 1903, column: 31, scope: !7273)
!7279 = !DILocation(line: 1903, column: 5, scope: !7273)
!7280 = !DILocation(line: 1903, column: 29, scope: !7273)
!7281 = !DILocation(line: 1904, column: 1, scope: !7264)
!7282 = distinct !DISubprogram(name: "VEC_gimple_base_iterate", scope: !1291, file: !1291, line: 33, type: !7283, scopeLine: 33, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4559)
!7283 = !DISubroutineType(types: !7284)
!7284 = !{!3341, !7285, !7, !7287}
!7285 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7286, size: 64)
!7286 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !3774)
!7287 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3220, size: 64)
!7288 = !DILocalVariable(name: "vec_", arg: 1, scope: !7282, file: !1291, line: 33, type: !7285)
!7289 = !DILocation(line: 33, column: 1, scope: !7282)
!7290 = !DILocalVariable(name: "ix_", arg: 2, scope: !7282, file: !1291, line: 33, type: !7)
!7291 = !DILocalVariable(name: "ptr", arg: 3, scope: !7282, file: !1291, line: 33, type: !7287)
!7292 = !DILocation(line: 33, column: 1, scope: !7293)
!7293 = distinct !DILexicalBlock(scope: !7282, file: !1291, line: 33, column: 1)
!7294 = !DILocation(line: 33, column: 1, scope: !7295)
!7295 = distinct !DILexicalBlock(scope: !7293, file: !1291, line: 33, column: 1)
!7296 = !DILocation(line: 33, column: 1, scope: !7297)
!7297 = distinct !DILexicalBlock(scope: !7293, file: !1291, line: 33, column: 1)
!7298 = distinct !DISubprogram(name: "VEC_gimple_heap_safe_push", scope: !1291, file: !1291, line: 34, type: !7299, scopeLine: 34, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4559)
!7299 = !DISubroutineType(types: !7300)
!7300 = !{!7287, !7212, !3220}
!7301 = !DILocalVariable(name: "vec_", arg: 1, scope: !7298, file: !1291, line: 34, type: !7212)
!7302 = !DILocation(line: 34, column: 1, scope: !7298)
!7303 = !DILocalVariable(name: "obj_", arg: 2, scope: !7298, file: !1291, line: 34, type: !3220)
!7304 = distinct !DISubprogram(name: "VEC_gimple_heap_reserve", scope: !1291, file: !1291, line: 34, type: !7305, scopeLine: 34, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4559)
!7305 = !DISubroutineType(types: !7306)
!7306 = !{!3341, !7212, !3341}
!7307 = !DILocalVariable(name: "vec_", arg: 1, scope: !7304, file: !1291, line: 34, type: !7212)
!7308 = !DILocation(line: 34, column: 1, scope: !7304)
!7309 = !DILocalVariable(name: "alloc_", arg: 2, scope: !7304, file: !1291, line: 34, type: !3341)
!7310 = !DILocalVariable(name: "extend", scope: !7304, file: !1291, line: 34, type: !3341)
!7311 = !DILocation(line: 34, column: 1, scope: !7312)
!7312 = distinct !DILexicalBlock(scope: !7304, file: !1291, line: 34, column: 1)
!7313 = distinct !DISubprogram(name: "VEC_gimple_base_quick_push", scope: !1291, file: !1291, line: 33, type: !7314, scopeLine: 33, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4559)
!7314 = !DISubroutineType(types: !7315)
!7315 = !{!7287, !7316, !3220}
!7316 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3774, size: 64)
!7317 = !DILocalVariable(name: "vec_", arg: 1, scope: !7313, file: !1291, line: 33, type: !7316)
!7318 = !DILocation(line: 33, column: 1, scope: !7313)
!7319 = !DILocalVariable(name: "obj_", arg: 2, scope: !7313, file: !1291, line: 33, type: !3220)
!7320 = !DILocalVariable(name: "slot_", scope: !7313, file: !1291, line: 33, type: !7287)
!7321 = distinct !DISubprogram(name: "VEC_gimple_base_space", scope: !1291, file: !1291, line: 33, type: !7322, scopeLine: 33, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4559)
!7322 = !DISubroutineType(types: !7323)
!7323 = !{!3341, !7316, !3341}
!7324 = !DILocalVariable(name: "vec_", arg: 1, scope: !7321, file: !1291, line: 33, type: !7316)
!7325 = !DILocation(line: 33, column: 1, scope: !7321)
!7326 = !DILocalVariable(name: "alloc_", arg: 2, scope: !7321, file: !1291, line: 33, type: !3341)
!7327 = distinct !DISubprogram(name: "gimple_expr_type", scope: !1291, file: !1291, line: 4366, type: !5413, scopeLine: 4367, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4559)
!7328 = !DILocalVariable(name: "stmt", arg: 1, scope: !7327, file: !1291, line: 4366, type: !5385)
!7329 = !DILocation(line: 4366, column: 32, scope: !7327)
!7330 = !DILocalVariable(name: "code", scope: !7327, file: !1291, line: 4368, type: !1296)
!7331 = !DILocation(line: 4368, column: 20, scope: !7327)
!7332 = !DILocation(line: 4368, column: 40, scope: !7327)
!7333 = !DILocation(line: 4368, column: 27, scope: !7327)
!7334 = !DILocation(line: 4370, column: 7, scope: !7335)
!7335 = distinct !DILexicalBlock(scope: !7327, file: !1291, line: 4370, column: 7)
!7336 = !DILocation(line: 4370, column: 12, scope: !7335)
!7337 = !DILocation(line: 4370, column: 29, scope: !7335)
!7338 = !DILocation(line: 4370, column: 32, scope: !7335)
!7339 = !DILocation(line: 4370, column: 37, scope: !7335)
!7340 = !DILocation(line: 4370, column: 7, scope: !7327)
!7341 = !DILocalVariable(name: "type", scope: !7342, file: !1291, line: 4372, type: !3245)
!7342 = distinct !DILexicalBlock(scope: !7335, file: !1291, line: 4371, column: 5)
!7343 = !DILocation(line: 4372, column: 12, scope: !7342)
!7344 = !DILocation(line: 4377, column: 11, scope: !7345)
!7345 = distinct !DILexicalBlock(scope: !7342, file: !1291, line: 4377, column: 11)
!7346 = !DILocation(line: 4377, column: 16, scope: !7345)
!7347 = !DILocation(line: 4377, column: 11, scope: !7342)
!7348 = !DILocation(line: 4378, column: 34, scope: !7345)
!7349 = !DILocation(line: 4378, column: 9, scope: !7345)
!7350 = !DILocation(line: 4378, column: 7, scope: !7345)
!7351 = !DILocation(line: 4378, column: 2, scope: !7345)
!7352 = !DILocation(line: 4380, column: 34, scope: !7345)
!7353 = !DILocation(line: 4380, column: 10, scope: !7345)
!7354 = !DILocation(line: 4380, column: 2, scope: !7345)
!7355 = !DILocation(line: 4383, column: 13, scope: !7356)
!7356 = distinct !DILexicalBlock(scope: !7345, file: !1291, line: 4381, column: 4)
!7357 = !DILocation(line: 4383, column: 11, scope: !7356)
!7358 = !DILocation(line: 4384, column: 6, scope: !7356)
!7359 = !DILocation(line: 4388, column: 13, scope: !7356)
!7360 = !DILocation(line: 4388, column: 11, scope: !7356)
!7361 = !DILocation(line: 4389, column: 6, scope: !7356)
!7362 = !DILocation(line: 4391, column: 14, scope: !7342)
!7363 = !DILocation(line: 4391, column: 7, scope: !7342)
!7364 = !DILocation(line: 4393, column: 12, scope: !7365)
!7365 = distinct !DILexicalBlock(scope: !7335, file: !1291, line: 4393, column: 12)
!7366 = !DILocation(line: 4393, column: 17, scope: !7365)
!7367 = !DILocation(line: 4393, column: 12, scope: !7335)
!7368 = !DILocation(line: 4394, column: 12, scope: !7365)
!7369 = !DILocation(line: 4394, column: 5, scope: !7365)
!7370 = !DILocation(line: 4396, column: 12, scope: !7365)
!7371 = !DILocation(line: 4396, column: 5, scope: !7365)
!7372 = !DILocation(line: 4397, column: 1, scope: !7327)
!7373 = distinct !DISubprogram(name: "find_bswap", scope: !3, file: !3, line: 1055, type: !7374, scopeLine: 1056, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4559)
!7374 = !DISubroutineType(types: !7375)
!7375 = !{!3245, !3220}
!7376 = !DILocalVariable(name: "stmt", arg: 1, scope: !7373, file: !3, line: 1055, type: !3220)
!7377 = !DILocation(line: 1055, column: 20, scope: !7373)
!7378 = !DILocalVariable(name: "cmp", scope: !7373, file: !3, line: 1060, type: !3298)
!7379 = !DILocation(line: 1060, column: 28, scope: !7373)
!7380 = !DILocalVariable(name: "n", scope: !7373, file: !3, line: 1064, type: !7381)
!7381 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "symbolic_number", file: !3, line: 830, size: 128, elements: !7382)
!7382 = !{!7383, !7384}
!7383 = !DIDerivedType(tag: DW_TAG_member, name: "n", scope: !7381, file: !3, line: 831, baseType: !3298, size: 64)
!7384 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !7381, file: !3, line: 832, baseType: !3341, size: 32, offset: 64)
!7385 = !DILocation(line: 1064, column: 26, scope: !7373)
!7386 = !DILocalVariable(name: "source_expr", scope: !7373, file: !3, line: 1065, type: !3245)
!7387 = !DILocation(line: 1065, column: 8, scope: !7373)
!7388 = !DILocation(line: 1072, column: 32, scope: !7373)
!7389 = !DILocation(line: 1073, column: 11, scope: !7373)
!7390 = !DILocation(line: 1074, column: 48, scope: !7373)
!7391 = !DILocation(line: 1072, column: 18, scope: !7373)
!7392 = !DILocation(line: 1072, column: 15, scope: !7373)
!7393 = !DILocation(line: 1076, column: 8, scope: !7394)
!7394 = distinct !DILexicalBlock(scope: !7373, file: !3, line: 1076, column: 7)
!7395 = !DILocation(line: 1076, column: 7, scope: !7373)
!7396 = !DILocation(line: 1077, column: 5, scope: !7394)
!7397 = !DILocation(line: 1080, column: 9, scope: !7398)
!7398 = distinct !DILexicalBlock(scope: !7373, file: !3, line: 1080, column: 7)
!7399 = !DILocation(line: 1080, column: 14, scope: !7398)
!7400 = !DILocation(line: 1080, column: 7, scope: !7373)
!7401 = !DILocalVariable(name: "mask", scope: !7402, file: !3, line: 1082, type: !3298)
!7402 = distinct !DILexicalBlock(scope: !7398, file: !3, line: 1081, column: 5)
!7403 = !DILocation(line: 1082, column: 32, scope: !7402)
!7404 = !DILocation(line: 1083, column: 37, scope: !7402)
!7405 = !DILocation(line: 1083, column: 42, scope: !7402)
!7406 = !DILocation(line: 1083, column: 31, scope: !7402)
!7407 = !DILocation(line: 1083, column: 60, scope: !7402)
!7408 = !DILocation(line: 1085, column: 14, scope: !7402)
!7409 = !DILocation(line: 1085, column: 9, scope: !7402)
!7410 = !DILocation(line: 1085, column: 11, scope: !7402)
!7411 = !DILocation(line: 1086, column: 45, scope: !7402)
!7412 = !DILocation(line: 1086, column: 43, scope: !7402)
!7413 = !DILocation(line: 1086, column: 41, scope: !7402)
!7414 = !DILocation(line: 1086, column: 51, scope: !7402)
!7415 = !DILocation(line: 1086, column: 11, scope: !7402)
!7416 = !DILocation(line: 1087, column: 5, scope: !7402)
!7417 = !DILocation(line: 1091, column: 7, scope: !7418)
!7418 = distinct !DILexicalBlock(scope: !7373, file: !3, line: 1091, column: 7)
!7419 = !DILocation(line: 1091, column: 16, scope: !7418)
!7420 = !DILocation(line: 1091, column: 11, scope: !7418)
!7421 = !DILocation(line: 1091, column: 7, scope: !7373)
!7422 = !DILocation(line: 1092, column: 5, scope: !7418)
!7423 = !DILocation(line: 1094, column: 10, scope: !7373)
!7424 = !DILocation(line: 1094, column: 3, scope: !7373)
!7425 = !DILocation(line: 1095, column: 1, scope: !7373)
!7426 = distinct !DISubprogram(name: "make_ssa_name", scope: !5276, file: !5276, line: 1245, type: !7427, scopeLine: 1246, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4559)
!7427 = !DISubroutineType(types: !7428)
!7428 = !{!3245, !3245, !3220}
!7429 = !DILocalVariable(name: "var", arg: 1, scope: !7426, file: !5276, line: 1245, type: !3245)
!7430 = !DILocation(line: 1245, column: 21, scope: !7426)
!7431 = !DILocalVariable(name: "stmt", arg: 2, scope: !7426, file: !5276, line: 1245, type: !3220)
!7432 = !DILocation(line: 1245, column: 33, scope: !7426)
!7433 = !DILocation(line: 1247, column: 28, scope: !7426)
!7434 = !DILocation(line: 1247, column: 34, scope: !7426)
!7435 = !DILocation(line: 1247, column: 39, scope: !7426)
!7436 = !DILocation(line: 1247, column: 10, scope: !7426)
!7437 = !DILocation(line: 1247, column: 3, scope: !7426)
!7438 = distinct !DISubprogram(name: "gimple_assign_lhs", scope: !1291, file: !1291, line: 1694, type: !5413, scopeLine: 1695, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4559)
!7439 = !DILocalVariable(name: "gs", arg: 1, scope: !7438, file: !1291, line: 1694, type: !5385)
!7440 = !DILocation(line: 1694, column: 33, scope: !7438)
!7441 = !DILocation(line: 1697, column: 21, scope: !7438)
!7442 = !DILocation(line: 1697, column: 10, scope: !7438)
!7443 = !DILocation(line: 1697, column: 3, scope: !7438)
!7444 = distinct !DISubprogram(name: "gimple_call_return_type", scope: !1291, file: !1291, line: 1966, type: !5413, scopeLine: 1967, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4559)
!7445 = !DILocalVariable(name: "gs", arg: 1, scope: !7444, file: !1291, line: 1966, type: !5385)
!7446 = !DILocation(line: 1966, column: 39, scope: !7444)
!7447 = !DILocalVariable(name: "fn", scope: !7444, file: !1291, line: 1968, type: !3245)
!7448 = !DILocation(line: 1968, column: 8, scope: !7444)
!7449 = !DILocation(line: 1968, column: 29, scope: !7444)
!7450 = !DILocation(line: 1968, column: 13, scope: !7444)
!7451 = !DILocalVariable(name: "type", scope: !7444, file: !1291, line: 1969, type: !3245)
!7452 = !DILocation(line: 1969, column: 8, scope: !7444)
!7453 = !DILocation(line: 1969, column: 15, scope: !7444)
!7454 = !DILocation(line: 1972, column: 10, scope: !7444)
!7455 = !DILocation(line: 1972, column: 8, scope: !7444)
!7456 = !DILocation(line: 1976, column: 10, scope: !7444)
!7457 = !DILocation(line: 1976, column: 3, scope: !7444)
!7458 = distinct !DISubprogram(name: "find_bswap_1", scope: !3, file: !3, line: 897, type: !7459, scopeLine: 898, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4559)
!7459 = !DISubroutineType(types: !7460)
!7460 = !{!3245, !3220, !7461, !3341}
!7461 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7381, size: 64)
!7462 = !DILocalVariable(name: "stmt", arg: 1, scope: !7458, file: !3, line: 897, type: !3220)
!7463 = !DILocation(line: 897, column: 22, scope: !7458)
!7464 = !DILocalVariable(name: "n", arg: 2, scope: !7458, file: !3, line: 897, type: !7461)
!7465 = !DILocation(line: 897, column: 52, scope: !7458)
!7466 = !DILocalVariable(name: "limit", arg: 3, scope: !7458, file: !3, line: 897, type: !3341)
!7467 = !DILocation(line: 897, column: 59, scope: !7458)
!7468 = !DILocalVariable(name: "code", scope: !7458, file: !3, line: 899, type: !366)
!7469 = !DILocation(line: 899, column: 18, scope: !7458)
!7470 = !DILocalVariable(name: "rhs1", scope: !7458, file: !3, line: 900, type: !3245)
!7471 = !DILocation(line: 900, column: 8, scope: !7458)
!7472 = !DILocalVariable(name: "rhs2", scope: !7458, file: !3, line: 900, type: !3245)
!7473 = !DILocation(line: 900, column: 14, scope: !7458)
!7474 = !DILocalVariable(name: "rhs1_stmt", scope: !7458, file: !3, line: 901, type: !3220)
!7475 = !DILocation(line: 901, column: 10, scope: !7458)
!7476 = !DILocalVariable(name: "rhs2_stmt", scope: !7458, file: !3, line: 901, type: !3220)
!7477 = !DILocation(line: 901, column: 21, scope: !7458)
!7478 = !DILocalVariable(name: "source_expr1", scope: !7458, file: !3, line: 902, type: !3245)
!7479 = !DILocation(line: 902, column: 8, scope: !7458)
!7480 = !DILocalVariable(name: "rhs_class", scope: !7458, file: !3, line: 903, type: !1355)
!7481 = !DILocation(line: 903, column: 25, scope: !7458)
!7482 = !DILocation(line: 905, column: 8, scope: !7483)
!7483 = distinct !DILexicalBlock(scope: !7458, file: !3, line: 905, column: 7)
!7484 = !DILocation(line: 905, column: 14, scope: !7483)
!7485 = !DILocation(line: 905, column: 36, scope: !7483)
!7486 = !DILocation(line: 905, column: 18, scope: !7483)
!7487 = !DILocation(line: 905, column: 7, scope: !7458)
!7488 = !DILocation(line: 906, column: 5, scope: !7483)
!7489 = !DILocation(line: 908, column: 30, scope: !7458)
!7490 = !DILocation(line: 908, column: 10, scope: !7458)
!7491 = !DILocation(line: 908, column: 8, scope: !7458)
!7492 = !DILocation(line: 910, column: 7, scope: !7493)
!7493 = distinct !DILexicalBlock(scope: !7458, file: !3, line: 910, column: 7)
!7494 = !DILocation(line: 910, column: 24, scope: !7493)
!7495 = !DILocation(line: 910, column: 7, scope: !7458)
!7496 = !DILocation(line: 911, column: 5, scope: !7493)
!7497 = !DILocation(line: 913, column: 34, scope: !7458)
!7498 = !DILocation(line: 913, column: 10, scope: !7458)
!7499 = !DILocation(line: 913, column: 8, scope: !7458)
!7500 = !DILocation(line: 914, column: 40, scope: !7458)
!7501 = !DILocation(line: 914, column: 15, scope: !7458)
!7502 = !DILocation(line: 914, column: 13, scope: !7458)
!7503 = !DILocation(line: 915, column: 15, scope: !7458)
!7504 = !DILocation(line: 915, column: 13, scope: !7458)
!7505 = !DILocation(line: 917, column: 7, scope: !7506)
!7506 = distinct !DILexicalBlock(scope: !7458, file: !3, line: 917, column: 7)
!7507 = !DILocation(line: 917, column: 17, scope: !7506)
!7508 = !DILocation(line: 917, column: 7, scope: !7458)
!7509 = !DILocation(line: 918, column: 32, scope: !7506)
!7510 = !DILocation(line: 918, column: 12, scope: !7506)
!7511 = !DILocation(line: 918, column: 10, scope: !7506)
!7512 = !DILocation(line: 918, column: 5, scope: !7506)
!7513 = !DILocation(line: 923, column: 7, scope: !7514)
!7514 = distinct !DILexicalBlock(scope: !7458, file: !3, line: 923, column: 7)
!7515 = !DILocation(line: 923, column: 17, scope: !7514)
!7516 = !DILocation(line: 924, column: 7, scope: !7514)
!7517 = !DILocation(line: 924, column: 11, scope: !7514)
!7518 = !DILocation(line: 924, column: 21, scope: !7514)
!7519 = !DILocation(line: 925, column: 4, scope: !7514)
!7520 = !DILocation(line: 925, column: 7, scope: !7514)
!7521 = !DILocation(line: 925, column: 24, scope: !7514)
!7522 = !DILocation(line: 923, column: 7, scope: !7458)
!7523 = !DILocation(line: 927, column: 11, scope: !7524)
!7524 = distinct !DILexicalBlock(scope: !7525, file: !3, line: 927, column: 11)
!7525 = distinct !DILexicalBlock(scope: !7514, file: !3, line: 926, column: 5)
!7526 = !DILocation(line: 927, column: 16, scope: !7524)
!7527 = !DILocation(line: 928, column: 4, scope: !7524)
!7528 = !DILocation(line: 928, column: 7, scope: !7524)
!7529 = !DILocation(line: 928, column: 12, scope: !7524)
!7530 = !DILocation(line: 929, column: 4, scope: !7524)
!7531 = !DILocation(line: 929, column: 7, scope: !7524)
!7532 = !DILocation(line: 929, column: 12, scope: !7524)
!7533 = !DILocation(line: 930, column: 4, scope: !7524)
!7534 = !DILocation(line: 930, column: 7, scope: !7524)
!7535 = !DILocation(line: 930, column: 12, scope: !7524)
!7536 = !DILocation(line: 931, column: 4, scope: !7524)
!7537 = !DILocation(line: 931, column: 7, scope: !7524)
!7538 = !DILocation(line: 931, column: 12, scope: !7524)
!7539 = !DILocation(line: 932, column: 4, scope: !7524)
!7540 = !DILocation(line: 932, column: 7, scope: !7524)
!7541 = !DILocation(line: 932, column: 12, scope: !7524)
!7542 = !DILocation(line: 933, column: 4, scope: !7524)
!7543 = !DILocation(line: 933, column: 7, scope: !7524)
!7544 = !DILocation(line: 933, column: 12, scope: !7524)
!7545 = !DILocation(line: 927, column: 11, scope: !7525)
!7546 = !DILocation(line: 934, column: 2, scope: !7524)
!7547 = !DILocation(line: 936, column: 36, scope: !7525)
!7548 = !DILocation(line: 936, column: 47, scope: !7525)
!7549 = !DILocation(line: 936, column: 50, scope: !7525)
!7550 = !DILocation(line: 936, column: 56, scope: !7525)
!7551 = !DILocation(line: 936, column: 22, scope: !7525)
!7552 = !DILocation(line: 936, column: 20, scope: !7525)
!7553 = !DILocation(line: 940, column: 12, scope: !7554)
!7554 = distinct !DILexicalBlock(scope: !7525, file: !3, line: 940, column: 11)
!7555 = !DILocation(line: 940, column: 11, scope: !7525)
!7556 = !DILocation(line: 946, column: 14, scope: !7557)
!7557 = distinct !DILexicalBlock(scope: !7554, file: !3, line: 941, column: 2)
!7558 = !DILocation(line: 946, column: 4, scope: !7557)
!7559 = !DILocation(line: 946, column: 7, scope: !7557)
!7560 = !DILocation(line: 946, column: 12, scope: !7557)
!7561 = !DILocation(line: 947, column: 8, scope: !7562)
!7562 = distinct !DILexicalBlock(scope: !7557, file: !3, line: 947, column: 8)
!7563 = !DILocation(line: 947, column: 11, scope: !7562)
!7564 = !DILocation(line: 947, column: 16, scope: !7562)
!7565 = !DILocation(line: 947, column: 32, scope: !7562)
!7566 = !DILocation(line: 947, column: 8, scope: !7557)
!7567 = !DILocation(line: 948, column: 6, scope: !7562)
!7568 = !DILocation(line: 949, column: 4, scope: !7557)
!7569 = !DILocation(line: 949, column: 7, scope: !7557)
!7570 = !DILocation(line: 949, column: 12, scope: !7557)
!7571 = !DILocation(line: 950, column: 4, scope: !7557)
!7572 = !DILocation(line: 950, column: 7, scope: !7557)
!7573 = !DILocation(line: 950, column: 9, scope: !7557)
!7574 = !DILocation(line: 953, column: 8, scope: !7575)
!7575 = distinct !DILexicalBlock(scope: !7557, file: !3, line: 953, column: 8)
!7576 = !DILocation(line: 953, column: 11, scope: !7575)
!7577 = !DILocation(line: 953, column: 16, scope: !7575)
!7578 = !DILocation(line: 953, column: 8, scope: !7557)
!7579 = !DILocation(line: 955, column: 9, scope: !7575)
!7580 = !DILocation(line: 955, column: 12, scope: !7575)
!7581 = !DILocation(line: 955, column: 17, scope: !7575)
!7582 = !DILocation(line: 954, column: 43, scope: !7575)
!7583 = !DILocation(line: 955, column: 35, scope: !7575)
!7584 = !DILocation(line: 954, column: 6, scope: !7575)
!7585 = !DILocation(line: 954, column: 9, scope: !7575)
!7586 = !DILocation(line: 954, column: 11, scope: !7575)
!7587 = !DILocation(line: 957, column: 19, scope: !7557)
!7588 = !DILocation(line: 957, column: 17, scope: !7557)
!7589 = !DILocation(line: 958, column: 2, scope: !7557)
!7590 = !DILocation(line: 960, column: 15, scope: !7525)
!7591 = !DILocation(line: 960, column: 7, scope: !7525)
!7592 = !DILocalVariable(name: "i", scope: !7593, file: !3, line: 964, type: !3341)
!7593 = distinct !DILexicalBlock(scope: !7594, file: !3, line: 963, column: 4)
!7594 = distinct !DILexicalBlock(scope: !7525, file: !3, line: 961, column: 2)
!7595 = !DILocation(line: 964, column: 10, scope: !7593)
!7596 = !DILocalVariable(name: "val", scope: !7593, file: !3, line: 965, type: !3298)
!7597 = !DILocation(line: 965, column: 31, scope: !7593)
!7598 = !DILocation(line: 965, column: 59, scope: !7593)
!7599 = !DILocation(line: 965, column: 37, scope: !7593)
!7600 = !DILocalVariable(name: "tmp", scope: !7593, file: !3, line: 966, type: !3298)
!7601 = !DILocation(line: 966, column: 31, scope: !7593)
!7602 = !DILocation(line: 966, column: 37, scope: !7593)
!7603 = !DILocation(line: 969, column: 13, scope: !7604)
!7604 = distinct !DILexicalBlock(scope: !7593, file: !3, line: 969, column: 6)
!7605 = !DILocation(line: 969, column: 11, scope: !7604)
!7606 = !DILocation(line: 969, column: 18, scope: !7607)
!7607 = distinct !DILexicalBlock(scope: !7604, file: !3, line: 969, column: 6)
!7608 = !DILocation(line: 969, column: 22, scope: !7607)
!7609 = !DILocation(line: 969, column: 25, scope: !7607)
!7610 = !DILocation(line: 969, column: 20, scope: !7607)
!7611 = !DILocation(line: 969, column: 6, scope: !7604)
!7612 = !DILocation(line: 970, column: 13, scope: !7613)
!7613 = distinct !DILexicalBlock(scope: !7607, file: !3, line: 970, column: 12)
!7614 = !DILocation(line: 970, column: 17, scope: !7613)
!7615 = !DILocation(line: 970, column: 25, scope: !7613)
!7616 = !DILocation(line: 970, column: 30, scope: !7613)
!7617 = !DILocation(line: 970, column: 34, scope: !7613)
!7618 = !DILocation(line: 970, column: 38, scope: !7613)
!7619 = !DILocation(line: 970, column: 46, scope: !7613)
!7620 = !DILocation(line: 970, column: 12, scope: !7607)
!7621 = !DILocation(line: 971, column: 3, scope: !7613)
!7622 = !DILocation(line: 970, column: 49, scope: !7613)
!7623 = !DILocation(line: 969, column: 32, scope: !7607)
!7624 = !DILocation(line: 969, column: 40, scope: !7607)
!7625 = !DILocation(line: 969, column: 6, scope: !7607)
!7626 = distinct !{!7626, !7611, !7627}
!7627 = !DILocation(line: 971, column: 10, scope: !7604)
!7628 = !DILocation(line: 973, column: 14, scope: !7593)
!7629 = !DILocation(line: 973, column: 6, scope: !7593)
!7630 = !DILocation(line: 973, column: 9, scope: !7593)
!7631 = !DILocation(line: 973, column: 11, scope: !7593)
!7632 = !DILocation(line: 975, column: 4, scope: !7594)
!7633 = !DILocation(line: 980, column: 26, scope: !7634)
!7634 = distinct !DILexicalBlock(scope: !7594, file: !3, line: 980, column: 8)
!7635 = !DILocation(line: 980, column: 32, scope: !7634)
!7636 = !DILocation(line: 980, column: 40, scope: !7634)
!7637 = !DILocation(line: 980, column: 35, scope: !7634)
!7638 = !DILocation(line: 980, column: 9, scope: !7634)
!7639 = !DILocation(line: 980, column: 8, scope: !7594)
!7640 = !DILocation(line: 981, column: 6, scope: !7634)
!7641 = !DILocation(line: 982, column: 4, scope: !7594)
!7642 = !DILocalVariable(name: "type_size", scope: !7643, file: !3, line: 985, type: !3341)
!7643 = distinct !DILexicalBlock(scope: !7594, file: !3, line: 984, column: 4)
!7644 = !DILocation(line: 985, column: 10, scope: !7643)
!7645 = !DILocation(line: 987, column: 18, scope: !7643)
!7646 = !DILocation(line: 987, column: 16, scope: !7643)
!7647 = !DILocation(line: 988, column: 10, scope: !7648)
!7648 = distinct !DILexicalBlock(scope: !7643, file: !3, line: 988, column: 10)
!7649 = !DILocation(line: 988, column: 20, scope: !7648)
!7650 = !DILocation(line: 988, column: 36, scope: !7648)
!7651 = !DILocation(line: 988, column: 10, scope: !7643)
!7652 = !DILocation(line: 989, column: 8, scope: !7648)
!7653 = !DILocation(line: 991, column: 10, scope: !7654)
!7654 = distinct !DILexicalBlock(scope: !7643, file: !3, line: 991, column: 10)
!7655 = !DILocation(line: 991, column: 20, scope: !7654)
!7656 = !DILocation(line: 991, column: 36, scope: !7654)
!7657 = !DILocation(line: 991, column: 10, scope: !7643)
!7658 = !DILocation(line: 995, column: 43, scope: !7659)
!7659 = distinct !DILexicalBlock(scope: !7654, file: !3, line: 992, column: 8)
!7660 = !DILocation(line: 995, column: 40, scope: !7659)
!7661 = !DILocation(line: 995, column: 54, scope: !7659)
!7662 = !DILocation(line: 995, column: 3, scope: !7659)
!7663 = !DILocation(line: 995, column: 6, scope: !7659)
!7664 = !DILocation(line: 995, column: 8, scope: !7659)
!7665 = !DILocation(line: 996, column: 8, scope: !7659)
!7666 = !DILocation(line: 997, column: 16, scope: !7643)
!7667 = !DILocation(line: 997, column: 26, scope: !7643)
!7668 = !DILocation(line: 997, column: 6, scope: !7643)
!7669 = !DILocation(line: 997, column: 9, scope: !7643)
!7670 = !DILocation(line: 997, column: 14, scope: !7643)
!7671 = !DILocation(line: 999, column: 4, scope: !7594)
!7672 = !DILocation(line: 1001, column: 4, scope: !7594)
!7673 = !DILocation(line: 1003, column: 40, scope: !7525)
!7674 = !DILocation(line: 1003, column: 43, scope: !7525)
!7675 = !DILocation(line: 1003, column: 14, scope: !7525)
!7676 = !DILocation(line: 1003, column: 51, scope: !7525)
!7677 = !DILocation(line: 1003, column: 7, scope: !7525)
!7678 = !DILocation(line: 1008, column: 7, scope: !7679)
!7679 = distinct !DILexicalBlock(scope: !7458, file: !3, line: 1008, column: 7)
!7680 = !DILocation(line: 1008, column: 17, scope: !7679)
!7681 = !DILocation(line: 1008, column: 7, scope: !7458)
!7682 = !DILocalVariable(name: "n1", scope: !7683, file: !3, line: 1010, type: !7381)
!7683 = distinct !DILexicalBlock(scope: !7679, file: !3, line: 1009, column: 5)
!7684 = !DILocation(line: 1010, column: 30, scope: !7683)
!7685 = !DILocalVariable(name: "n2", scope: !7683, file: !3, line: 1010, type: !7381)
!7686 = !DILocation(line: 1010, column: 34, scope: !7683)
!7687 = !DILocalVariable(name: "source_expr2", scope: !7683, file: !3, line: 1011, type: !3245)
!7688 = !DILocation(line: 1011, column: 12, scope: !7683)
!7689 = !DILocation(line: 1013, column: 11, scope: !7690)
!7690 = distinct !DILexicalBlock(scope: !7683, file: !3, line: 1013, column: 11)
!7691 = !DILocation(line: 1013, column: 16, scope: !7690)
!7692 = !DILocation(line: 1013, column: 11, scope: !7683)
!7693 = !DILocation(line: 1014, column: 2, scope: !7690)
!7694 = !DILocation(line: 1016, column: 11, scope: !7695)
!7695 = distinct !DILexicalBlock(scope: !7683, file: !3, line: 1016, column: 11)
!7696 = !DILocation(line: 1016, column: 28, scope: !7695)
!7697 = !DILocation(line: 1016, column: 11, scope: !7683)
!7698 = !DILocation(line: 1017, column: 2, scope: !7695)
!7699 = !DILocation(line: 1019, column: 19, scope: !7683)
!7700 = !DILocation(line: 1019, column: 17, scope: !7683)
!7701 = !DILocation(line: 1021, column: 15, scope: !7683)
!7702 = !DILocation(line: 1021, column: 7, scope: !7683)
!7703 = !DILocation(line: 1024, column: 33, scope: !7704)
!7704 = distinct !DILexicalBlock(scope: !7683, file: !3, line: 1022, column: 2)
!7705 = !DILocation(line: 1024, column: 49, scope: !7704)
!7706 = !DILocation(line: 1024, column: 55, scope: !7704)
!7707 = !DILocation(line: 1024, column: 19, scope: !7704)
!7708 = !DILocation(line: 1024, column: 17, scope: !7704)
!7709 = !DILocation(line: 1026, column: 9, scope: !7710)
!7710 = distinct !DILexicalBlock(scope: !7704, file: !3, line: 1026, column: 8)
!7711 = !DILocation(line: 1026, column: 8, scope: !7704)
!7712 = !DILocation(line: 1027, column: 6, scope: !7710)
!7713 = !DILocation(line: 1029, column: 33, scope: !7704)
!7714 = !DILocation(line: 1029, column: 49, scope: !7704)
!7715 = !DILocation(line: 1029, column: 55, scope: !7704)
!7716 = !DILocation(line: 1029, column: 19, scope: !7704)
!7717 = !DILocation(line: 1029, column: 17, scope: !7704)
!7718 = !DILocation(line: 1031, column: 8, scope: !7719)
!7719 = distinct !DILexicalBlock(scope: !7704, file: !3, line: 1031, column: 8)
!7720 = !DILocation(line: 1031, column: 24, scope: !7719)
!7721 = !DILocation(line: 1031, column: 21, scope: !7719)
!7722 = !DILocation(line: 1032, column: 8, scope: !7719)
!7723 = !DILocation(line: 1032, column: 14, scope: !7719)
!7724 = !DILocation(line: 1032, column: 25, scope: !7719)
!7725 = !DILocation(line: 1032, column: 19, scope: !7719)
!7726 = !DILocation(line: 1031, column: 8, scope: !7704)
!7727 = !DILocation(line: 1033, column: 6, scope: !7719)
!7728 = !DILocation(line: 1035, column: 17, scope: !7704)
!7729 = !DILocation(line: 1035, column: 4, scope: !7704)
!7730 = !DILocation(line: 1035, column: 7, scope: !7704)
!7731 = !DILocation(line: 1035, column: 12, scope: !7704)
!7732 = !DILocation(line: 1036, column: 14, scope: !7704)
!7733 = !DILocation(line: 1036, column: 21, scope: !7704)
!7734 = !DILocation(line: 1036, column: 16, scope: !7704)
!7735 = !DILocation(line: 1036, column: 4, scope: !7704)
!7736 = !DILocation(line: 1036, column: 7, scope: !7704)
!7737 = !DILocation(line: 1036, column: 9, scope: !7704)
!7738 = !DILocation(line: 1038, column: 35, scope: !7739)
!7739 = distinct !DILexicalBlock(scope: !7704, file: !3, line: 1038, column: 8)
!7740 = !DILocation(line: 1038, column: 38, scope: !7739)
!7741 = !DILocation(line: 1038, column: 9, scope: !7739)
!7742 = !DILocation(line: 1038, column: 8, scope: !7704)
!7743 = !DILocation(line: 1039, column: 6, scope: !7739)
!7744 = !DILocation(line: 1041, column: 4, scope: !7704)
!7745 = !DILocation(line: 1043, column: 4, scope: !7704)
!7746 = !DILocation(line: 1045, column: 14, scope: !7683)
!7747 = !DILocation(line: 1045, column: 7, scope: !7683)
!7748 = !DILocation(line: 1047, column: 3, scope: !7458)
!7749 = !DILocation(line: 1048, column: 1, scope: !7458)
!7750 = distinct !DISubprogram(name: "gimple_assign_rhs_class", scope: !1291, file: !1291, line: 1844, type: !7751, scopeLine: 1845, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4559)
!7751 = !DISubroutineType(types: !7752)
!7752 = !{!1355, !5385}
!7753 = !DILocalVariable(name: "gs", arg: 1, scope: !7750, file: !1291, line: 1844, type: !5385)
!7754 = !DILocation(line: 1844, column: 39, scope: !7750)
!7755 = !DILocation(line: 1846, column: 56, scope: !7750)
!7756 = !DILocation(line: 1846, column: 32, scope: !7750)
!7757 = !DILocation(line: 1846, column: 10, scope: !7750)
!7758 = !DILocation(line: 1846, column: 3, scope: !7750)
!7759 = distinct !DISubprogram(name: "do_shift_rotate", scope: !3, file: !3, line: 840, type: !7760, scopeLine: 843, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4559)
!7760 = !DISubroutineType(types: !7761)
!7761 = !{!3364, !366, !7461, !3341}
!7762 = !DILocalVariable(name: "code", arg: 1, scope: !7759, file: !3, line: 840, type: !366)
!7763 = !DILocation(line: 840, column: 33, scope: !7759)
!7764 = !DILocalVariable(name: "n", arg: 2, scope: !7759, file: !3, line: 841, type: !7461)
!7765 = !DILocation(line: 841, column: 28, scope: !7759)
!7766 = !DILocalVariable(name: "count", arg: 3, scope: !7759, file: !3, line: 842, type: !3341)
!7767 = !DILocation(line: 842, column: 8, scope: !7759)
!7768 = !DILocation(line: 844, column: 7, scope: !7769)
!7769 = distinct !DILexicalBlock(scope: !7759, file: !3, line: 844, column: 7)
!7770 = !DILocation(line: 844, column: 13, scope: !7769)
!7771 = !DILocation(line: 844, column: 17, scope: !7769)
!7772 = !DILocation(line: 844, column: 7, scope: !7759)
!7773 = !DILocation(line: 845, column: 5, scope: !7769)
!7774 = !DILocation(line: 849, column: 7, scope: !7775)
!7775 = distinct !DILexicalBlock(scope: !7759, file: !3, line: 849, column: 7)
!7776 = !DILocation(line: 849, column: 10, scope: !7775)
!7777 = !DILocation(line: 849, column: 15, scope: !7775)
!7778 = !DILocation(line: 849, column: 7, scope: !7759)
!7779 = !DILocation(line: 850, column: 46, scope: !7775)
!7780 = !DILocation(line: 850, column: 49, scope: !7775)
!7781 = !DILocation(line: 850, column: 54, scope: !7775)
!7782 = !DILocation(line: 850, column: 42, scope: !7775)
!7783 = !DILocation(line: 850, column: 72, scope: !7775)
!7784 = !DILocation(line: 850, column: 5, scope: !7775)
!7785 = !DILocation(line: 850, column: 8, scope: !7775)
!7786 = !DILocation(line: 850, column: 10, scope: !7775)
!7787 = !DILocation(line: 852, column: 11, scope: !7759)
!7788 = !DILocation(line: 852, column: 3, scope: !7759)
!7789 = !DILocation(line: 855, column: 16, scope: !7790)
!7790 = distinct !DILexicalBlock(scope: !7759, file: !3, line: 853, column: 5)
!7791 = !DILocation(line: 855, column: 7, scope: !7790)
!7792 = !DILocation(line: 855, column: 10, scope: !7790)
!7793 = !DILocation(line: 855, column: 12, scope: !7790)
!7794 = !DILocation(line: 856, column: 7, scope: !7790)
!7795 = !DILocation(line: 858, column: 16, scope: !7790)
!7796 = !DILocation(line: 858, column: 7, scope: !7790)
!7797 = !DILocation(line: 858, column: 10, scope: !7790)
!7798 = !DILocation(line: 858, column: 12, scope: !7790)
!7799 = !DILocation(line: 859, column: 7, scope: !7790)
!7800 = !DILocation(line: 861, column: 15, scope: !7790)
!7801 = !DILocation(line: 861, column: 18, scope: !7790)
!7802 = !DILocation(line: 861, column: 23, scope: !7790)
!7803 = !DILocation(line: 861, column: 20, scope: !7790)
!7804 = !DILocation(line: 861, column: 33, scope: !7790)
!7805 = !DILocation(line: 861, column: 36, scope: !7790)
!7806 = !DILocation(line: 861, column: 43, scope: !7790)
!7807 = !DILocation(line: 861, column: 46, scope: !7790)
!7808 = !DILocation(line: 861, column: 51, scope: !7790)
!7809 = !DILocation(line: 861, column: 70, scope: !7790)
!7810 = !DILocation(line: 861, column: 68, scope: !7790)
!7811 = !DILocation(line: 861, column: 38, scope: !7790)
!7812 = !DILocation(line: 861, column: 30, scope: !7790)
!7813 = !DILocation(line: 861, column: 7, scope: !7790)
!7814 = !DILocation(line: 861, column: 10, scope: !7790)
!7815 = !DILocation(line: 861, column: 12, scope: !7790)
!7816 = !DILocation(line: 862, column: 7, scope: !7790)
!7817 = !DILocation(line: 864, column: 15, scope: !7790)
!7818 = !DILocation(line: 864, column: 18, scope: !7790)
!7819 = !DILocation(line: 864, column: 23, scope: !7790)
!7820 = !DILocation(line: 864, column: 20, scope: !7790)
!7821 = !DILocation(line: 864, column: 33, scope: !7790)
!7822 = !DILocation(line: 864, column: 36, scope: !7790)
!7823 = !DILocation(line: 864, column: 43, scope: !7790)
!7824 = !DILocation(line: 864, column: 46, scope: !7790)
!7825 = !DILocation(line: 864, column: 51, scope: !7790)
!7826 = !DILocation(line: 864, column: 70, scope: !7790)
!7827 = !DILocation(line: 864, column: 68, scope: !7790)
!7828 = !DILocation(line: 864, column: 38, scope: !7790)
!7829 = !DILocation(line: 864, column: 30, scope: !7790)
!7830 = !DILocation(line: 864, column: 7, scope: !7790)
!7831 = !DILocation(line: 864, column: 10, scope: !7790)
!7832 = !DILocation(line: 864, column: 12, scope: !7790)
!7833 = !DILocation(line: 865, column: 7, scope: !7790)
!7834 = !DILocation(line: 867, column: 7, scope: !7790)
!7835 = !DILocation(line: 869, column: 3, scope: !7759)
!7836 = !DILocation(line: 870, column: 1, scope: !7759)
!7837 = distinct !DISubprogram(name: "verify_symbolic_number_p", scope: !3, file: !3, line: 876, type: !7838, scopeLine: 877, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4559)
!7838 = !DISubroutineType(types: !7839)
!7839 = !{!3364, !7461, !3220}
!7840 = !DILocalVariable(name: "n", arg: 1, scope: !7837, file: !3, line: 876, type: !7461)
!7841 = !DILocation(line: 876, column: 51, scope: !7837)
!7842 = !DILocalVariable(name: "stmt", arg: 2, scope: !7837, file: !3, line: 876, type: !3220)
!7843 = !DILocation(line: 876, column: 61, scope: !7837)
!7844 = !DILocalVariable(name: "lhs_type", scope: !7837, file: !3, line: 878, type: !3245)
!7845 = !DILocation(line: 878, column: 8, scope: !7837)
!7846 = !DILocation(line: 880, column: 32, scope: !7837)
!7847 = !DILocation(line: 880, column: 14, scope: !7837)
!7848 = !DILocation(line: 880, column: 12, scope: !7837)
!7849 = !DILocation(line: 882, column: 7, scope: !7850)
!7850 = distinct !DILexicalBlock(scope: !7837, file: !3, line: 882, column: 7)
!7851 = !DILocation(line: 882, column: 28, scope: !7850)
!7852 = !DILocation(line: 882, column: 7, scope: !7837)
!7853 = !DILocation(line: 883, column: 5, scope: !7850)
!7854 = !DILocation(line: 885, column: 7, scope: !7855)
!7855 = distinct !DILexicalBlock(scope: !7837, file: !3, line: 885, column: 7)
!7856 = !DILocation(line: 885, column: 36, scope: !7855)
!7857 = !DILocation(line: 885, column: 39, scope: !7855)
!7858 = !DILocation(line: 885, column: 44, scope: !7855)
!7859 = !DILocation(line: 885, column: 33, scope: !7855)
!7860 = !DILocation(line: 885, column: 7, scope: !7837)
!7861 = !DILocation(line: 886, column: 5, scope: !7855)
!7862 = !DILocation(line: 888, column: 3, scope: !7837)
!7863 = !DILocation(line: 889, column: 1, scope: !7837)
