; ModuleID = 'ipa-prop.c'
source_filename = "ipa-prop.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.cgraph_node = type { %union.tree_node*, %struct.cgraph_edge*, %struct.cgraph_edge*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.htab*, i8*, %struct.VEC_ipa_opt_pass_heap*, %struct.cgraph_local_info, %struct.cgraph_global_info, %struct.cgraph_rtl_info, %struct.cgraph_clone_info, %struct.cgraph_thunk_info, i64, i32, i32, i32, i16 }
%union.tree_node = type { %struct.tree_function_decl }
%struct.tree_function_decl = type { %struct.tree_decl_non_common, %struct.function*, %union.tree_node*, %union.tree_node*, %union.tree_node*, i32 }
%struct.tree_decl_non_common = type { %struct.tree_decl_with_vis, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node* }
%struct.tree_decl_with_vis = type { %struct.tree_decl_with_rtl, %union.tree_node*, %union.tree_node*, %union.tree_node*, i24 }
%struct.tree_decl_with_rtl = type { %struct.tree_decl_common, %struct.rtx_def* }
%struct.tree_decl_common = type { %struct.tree_decl_minimal, %union.tree_node*, i40, i32, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.lang_decl* }
%struct.tree_decl_minimal = type { %struct.tree_common, i32, i32, %union.tree_node*, %union.tree_node* }
%struct.tree_common = type { %struct.tree_base, %union.tree_node*, %union.tree_node* }
%struct.tree_base = type { i64 }
%struct.lang_decl = type opaque
%struct.rtx_def = type opaque
%struct.function = type { %struct.eh_status*, %struct.control_flow_graph*, %struct.gimple_seq_d*, %struct.gimple_df*, %struct.loops*, %struct.htab*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.machine_function*, %struct.language_function*, %struct.htab*, i32, i32, i32, i32, i32, i32, i8*, i32 }
%struct.eh_status = type opaque
%struct.control_flow_graph = type { %struct.basic_block_def*, %struct.basic_block_def*, %struct.VEC_basic_block_gc*, i32, i32, i32, %struct.VEC_basic_block_gc*, i32, [2 x i32], [2 x i32], i32, i32 }
%struct.basic_block_def = type { %struct.VEC_edge_gc*, %struct.VEC_edge_gc*, i8*, %struct.loop*, [2 x %struct.et_node*], %struct.basic_block_def*, %struct.basic_block_def*, %union.basic_block_il_dependent, i64, i32, i32, i32, i32, i32 }
%struct.VEC_edge_gc = type { %struct.VEC_edge_base }
%struct.VEC_edge_base = type { i32, i32, [1 x %struct.edge_def*] }
%struct.edge_def = type { %struct.basic_block_def*, %struct.basic_block_def*, %union.edge_def_insns, i8*, %union.tree_node*, i32, i32, i32, i32, i64 }
%union.edge_def_insns = type { %struct.gimple_seq_d* }
%struct.loop = type opaque
%struct.et_node = type opaque
%union.basic_block_il_dependent = type { %struct.gimple_bb_info* }
%struct.gimple_bb_info = type { %struct.gimple_seq_d*, %struct.gimple_seq_d* }
%struct.VEC_basic_block_gc = type { %struct.VEC_basic_block_base }
%struct.VEC_basic_block_base = type { i32, i32, [1 x %struct.basic_block_def*] }
%struct.gimple_seq_d = type { %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d*, %struct.gimple_seq_d* }
%struct.gimple_seq_node_d = type { %union.gimple_statement_d*, %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d* }
%union.gimple_statement_d = type { %struct.gimple_statement_phi }
%struct.gimple_statement_phi = type { %struct.gimple_statement_base, i32, i32, %union.tree_node*, [1 x %struct.phi_arg_d] }
%struct.gimple_statement_base = type { i32, i32, i32, i32, %struct.basic_block_def*, %union.tree_node* }
%struct.phi_arg_d = type { %struct.ssa_use_operand_d, %union.tree_node*, i32 }
%struct.ssa_use_operand_d = type { %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d*, %union.anon, %union.tree_node** }
%union.anon = type { %union.gimple_statement_d* }
%struct.gimple_df = type { %struct.htab*, %struct.VEC_gimple_gc*, %struct.VEC_tree_gc*, %union.tree_node*, %struct.pt_solution, %struct.pt_solution, %struct.pointer_map_t*, %union.tree_node*, %struct.htab*, %struct.bitmap_head_def*, i8, %struct.ssa_operands }
%struct.VEC_gimple_gc = type { %struct.VEC_gimple_base }
%struct.VEC_gimple_base = type { i32, i32, [1 x %union.gimple_statement_d*] }
%struct.VEC_tree_gc = type { %struct.VEC_tree_base }
%struct.VEC_tree_base = type { i32, i32, [1 x %union.tree_node*] }
%struct.pt_solution = type { i8, %struct.bitmap_head_def* }
%struct.pointer_map_t = type opaque
%struct.bitmap_head_def = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32, %struct.bitmap_obstack* }
%struct.bitmap_element_def = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32, [2 x i64] }
%struct.bitmap_obstack = type { %struct.bitmap_element_def*, %struct.bitmap_head_def*, %struct.obstack }
%struct.obstack = type { i64, %struct._obstack_chunk*, i8*, i8*, i8*, i64, i32, %struct._obstack_chunk* (i8*, i64)*, void (i8*, %struct._obstack_chunk*)*, i8*, i8 }
%struct._obstack_chunk = type { i8*, %struct._obstack_chunk*, [4 x i8] }
%struct.ssa_operands = type { %struct.ssa_operand_memory_d*, i32, i32, i8, %struct.def_optype_d*, %struct.use_optype_d* }
%struct.ssa_operand_memory_d = type { %struct.ssa_operand_memory_d*, [1 x i8] }
%struct.def_optype_d = type { %struct.def_optype_d*, %union.tree_node** }
%struct.use_optype_d = type { %struct.use_optype_d*, %struct.ssa_use_operand_d }
%struct.loops = type opaque
%struct.machine_function = type { %struct.stack_local_entry*, i8*, i32, i32, [4 x i32], i32, %struct.machine_cfa_state, i32, i8 }
%struct.stack_local_entry = type opaque
%struct.machine_cfa_state = type { %struct.rtx_def*, i64 }
%struct.language_function = type opaque
%struct.cgraph_edge = type { i64, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_edge*, %struct.cgraph_edge*, %struct.cgraph_edge*, %struct.cgraph_edge*, %union.gimple_statement_d*, i8*, i32, i32, i32, i32, i16, i8 }
%struct.htab = type { i32 (i8*)*, i32 (i8*, i8*)*, void (i8*)*, i8**, i64, i64, i64, i32, i32, i8* (i64, i64)*, void (i8*)*, i8*, i8* (i8*, i64, i64)*, void (i8*, i8*)*, i32 }
%struct.VEC_ipa_opt_pass_heap = type { %struct.VEC_ipa_opt_pass_base }
%struct.VEC_ipa_opt_pass_base = type { i32, i32, [1 x %struct.ipa_opt_pass_d*] }
%struct.ipa_opt_pass_d = type { %struct.opt_pass, void ()*, void (%struct.cgraph_node_set_def*)*, void ()*, void (%struct.cgraph_node*)*, void (%struct.cgraph_node*, %union.gimple_statement_d**)*, i32, i32 (%struct.cgraph_node*)*, void (%struct.varpool_node*)* }
%struct.opt_pass = type { i32, i8*, i8 ()*, i32 ()*, %struct.opt_pass*, %struct.opt_pass*, i32, i32, i32, i32, i32, i32, i32 }
%struct.cgraph_node_set_def = type { %struct.htab*, %struct.VEC_cgraph_node_ptr_gc*, i8* }
%struct.VEC_cgraph_node_ptr_gc = type { %struct.VEC_cgraph_node_ptr_base }
%struct.VEC_cgraph_node_ptr_base = type { i32, i32, [1 x %struct.cgraph_node*] }
%struct.varpool_node = type { %union.tree_node*, %struct.varpool_node*, %struct.varpool_node*, %struct.varpool_node*, i32, i8 }
%struct.cgraph_local_info = type { %struct.lto_file_decl_data*, %struct.inline_summary, i8 }
%struct.lto_file_decl_data = type { %struct.lto_in_decl_state*, %struct.lto_in_decl_state*, %struct.lto_cgraph_encoder_d*, %struct.htab*, i8*, i8, %struct.htab*, %struct.htab* }
%struct.lto_in_decl_state = type { [7 x %struct.lto_tree_ref_table], %union.tree_node* }
%struct.lto_tree_ref_table = type { %union.tree_node**, i32 }
%struct.lto_cgraph_encoder_d = type { %struct.pointer_map_t*, %struct.VEC_cgraph_node_ptr_heap* }
%struct.VEC_cgraph_node_ptr_heap = type { %struct.VEC_cgraph_node_ptr_base }
%struct.inline_summary = type { i64, i32, i32, i32, i32 }
%struct.cgraph_global_info = type { i64, i64, %struct.cgraph_node*, i32, i32, i32, i8 }
%struct.cgraph_rtl_info = type { i32 }
%struct.cgraph_clone_info = type { %struct.VEC_ipa_replace_map_p_gc*, %struct.bitmap_head_def*, %struct.bitmap_head_def* }
%struct.VEC_ipa_replace_map_p_gc = type { %struct.VEC_ipa_replace_map_p_base }
%struct.VEC_ipa_replace_map_p_base = type { i32, i32, [1 x %struct.ipa_replace_map*] }
%struct.ipa_replace_map = type { %union.tree_node*, %union.tree_node*, i8, i8 }
%struct.cgraph_thunk_info = type { i64, i64, %union.tree_node*, i8, i8, i8 }
%struct.VEC_ipa_node_params_t_heap = type { %struct.VEC_ipa_node_params_t_base }
%struct.VEC_ipa_node_params_t_base = type { i32, i32, [1 x %struct.ipa_node_params] }
%struct.ipa_node_params = type { i32, %struct.ipa_param_descriptor*, %struct.ipa_param_call_note*, %struct.cgraph_node*, i64, i8 }
%struct.ipa_param_descriptor = type { %struct.ipcp_lattice, %union.tree_node*, i8 }
%struct.ipcp_lattice = type { i32, %union.tree_node* }
%struct.ipa_param_call_note = type { i64, %struct.ipa_param_call_note*, %union.gimple_statement_d*, i32, i32, i32, i16, i8 }
%struct.VEC_ipa_edge_args_t_gc = type { %struct.VEC_ipa_edge_args_t_base }
%struct.VEC_ipa_edge_args_t_base = type { i32, i32, [1 x %struct.ipa_edge_args] }
%struct.ipa_edge_args = type { i32, %struct.ipa_jump_func* }
%struct.ipa_jump_func = type { i32, %union.jump_func_value }
%union.jump_func_value = type { %struct.ipa_ancestor_jf_data }
%struct.ipa_ancestor_jf_data = type { i64, %union.tree_node*, i32 }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%struct.cgraph_edge_hook_list = type opaque
%struct.cgraph_node_hook_list = type opaque
%struct.cgraph_2edge_hook_list = type opaque
%struct.cgraph_2node_hook_list = type opaque
%struct.lang_hooks = type { i8*, i64, void (%union.tree_node*)*, i64 (i32)*, i32 (i32, i8**)*, void (%struct.diagnostic_context*)*, i32 (i64, i8*, i32)*, i8 (i8*, i64)*, i8 (i8**)*, i8 ()*, void ()*, void (i32)*, i8 (%union.tree_node*)*, i32 (%union.tree_node*)*, void (%union.tree_node*)*, void (%union.tree_node*)*, void (%union.tree_node*)*, void ()*, void (%struct._IO_FILE*, %union.tree_node*, i32)*, void (%struct._IO_FILE*, %union.tree_node*, i32)*, void (%struct._IO_FILE*, %union.tree_node*, i32)*, void (%struct._IO_FILE*, %union.tree_node*, i32)*, i8* (%union.tree_node*, i32)*, i8* (%union.tree_node*, i32)*, i32 (%union.tree_node*, %union.tree_node*)*, void (%struct.diagnostic_context*, i8*, %struct.diagnostic_info*)*, i64 (i64)*, %struct.attribute_spec*, %struct.attribute_spec*, %struct.attribute_spec*, %struct.lang_hooks_for_tree_inlining, %struct.lang_hooks_for_callgraph, %struct.lang_hooks_for_tree_dump, %struct.lang_hooks_for_decls, %struct.lang_hooks_for_types, %struct.lang_hooks_for_lto, %union.tree_node* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, i8 (%union.tree_node*)*, i32 (%union.tree_node**, %struct.gimple_seq_d**, %struct.gimple_seq_d**)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, void ()*, %union.tree_node* (%union.tree_node*, i8*, i8*)*, %union.tree_node* ()*, %union.tree_node* (%union.tree_node*)*, i8 }
%struct.diagnostic_context = type { %struct.pretty_print_info*, [12 x i32], i8, i8, [870 x i32], i8, i8, void (%struct.diagnostic_context*, %struct.diagnostic_info*)*, void (%struct.diagnostic_context*, %struct.diagnostic_info*)*, void (i8*, [1 x %struct.__va_list_tag]*)*, %union.tree_node*, %struct.line_map*, i32, i8 }
%struct.pretty_print_info = type { %struct.output_buffer*, i8*, i32, i32, i32, %struct.pp_wrapping_mode_t, i8 (%struct.pretty_print_info*, %struct.text_info*, i8*, i32, i8, i8, i8)*, i8, i8, i8 }
%struct.output_buffer = type { %struct.obstack, %struct.obstack, %struct.obstack*, %struct.chunk_info*, %struct._IO_FILE*, i32, [128 x i8] }
%struct.chunk_info = type { %struct.chunk_info*, [60 x i8*] }
%struct.pp_wrapping_mode_t = type { i32, i32 }
%struct.text_info = type { i8*, [1 x %struct.__va_list_tag]*, i32, i32*, %union.tree_node** }
%struct.__va_list_tag = type { i32, i32, i8*, i8* }
%struct.diagnostic_info = type { %struct.text_info, i32, i32, %union.tree_node*, i32, i32 }
%struct.line_map = type { i8*, i32, i32, i32, i8, i8, i8 }
%struct.attribute_spec = type { i8*, i32, i32, i8, i8, i8, %union.tree_node* (%union.tree_node**, %union.tree_node*, %union.tree_node*, i32, i8*)* }
%struct.lang_hooks_for_tree_inlining = type { i8 (%union.tree_node*, %union.tree_node*)* }
%struct.lang_hooks_for_callgraph = type { %union.tree_node* (%union.tree_node**, i32*)* }
%struct.lang_hooks_for_tree_dump = type { i8 (i8*, %union.tree_node*)*, i32 (%union.tree_node*)* }
%struct.lang_hooks_for_decls = type { i32 ()*, %union.tree_node* (%union.tree_node*)*, %union.tree_node* ()*, i8 (%union.tree_node*)*, i8 (%union.tree_node*)*, i8 (%union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, i8 (%union.tree_node*)*, void ()*, i8 (%union.tree_node*)*, i8 (%union.tree_node*)*, i32 (%union.tree_node*)*, i8 (%union.tree_node*, i8)*, i8 (%union.tree_node*, i8)*, i8 (%union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, void (%union.tree_node*)* }
%struct.lang_hooks_for_types = type { %union.tree_node* (i32)*, i32 (%union.tree_node*)*, %union.tree_node* (i32, i32)*, %union.tree_node* (i32, i32)*, i8 (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, void (%union.tree_node*, i8*)*, void (%union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, void (%struct.gimplify_omp_ctx*, %union.tree_node*)*, i8 (%union.tree_node*, %union.tree_node*)*, i8 (%union.tree_node*, %struct.array_descr_info*)*, void (%union.tree_node*, %union.tree_node**, %union.tree_node**)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, i8 }
%struct.gimplify_omp_ctx = type opaque
%struct.array_descr_info = type opaque
%struct.lang_hooks_for_lto = type { void (i8*)*, void (i8*, i64, i8*)*, void ()* }
%struct.ipa_func_list = type { %struct.cgraph_node*, %struct.ipa_func_list* }
%struct.gimple_stmt_iterator = type { %struct.gimple_seq_node_d*, %struct.gimple_seq_d*, %struct.basic_block_def* }
%struct.ipa_member_ptr_cst = type { %union.tree_node*, %union.tree_node* }
%struct.ipa_pass_through_data = type { %union.tree_node*, i32, i32 }
%struct.tree_ssa_name = type { %struct.tree_common, %union.tree_node*, %union.gimple_statement_d*, i32, %struct.ptr_info_def*, %struct.ssa_use_operand_d }
%struct.ptr_info_def = type { %struct.pt_solution }
%struct.VEC_cgraph_edge_p_heap = type { %struct.VEC_cgraph_edge_p_base }
%struct.VEC_cgraph_edge_p_base = type { i32, i32, [1 x %struct.cgraph_edge*] }
%struct.VEC_tree_heap = type { %struct.VEC_tree_base }
%struct.VEC_ipa_parm_adjustment_t_heap = type { %struct.VEC_ipa_parm_adjustment_t_base }
%struct.VEC_ipa_parm_adjustment_t_base = type { i32, i32, [1 x %struct.ipa_parm_adjustment] }
%struct.ipa_parm_adjustment = type { %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, i64, i32, i8 }
%struct.tree_type = type { %struct.tree_common, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, i32, i32, i32, i32, %union.tree_node*, %union.tree_node*, %union.tree_type_symtab, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.lang_type* }
%union.tree_type_symtab = type { i8* }
%struct.lang_type = type opaque
%struct.tree_list = type { %struct.tree_common, %union.tree_node*, %union.tree_node* }
%struct.tree_exp = type { %struct.tree_common, i32, %union.tree_node*, [1 x %union.tree_node*] }
%struct.output_block = type { i32, %struct.lto_out_decl_state*, %struct.lto_output_stream*, %struct.lto_output_stream*, %struct.lto_output_stream*, %struct.htab*, %struct.cgraph_node*, i8*, i32, i32, i8, %struct.lto_streamer_cache_d* }
%struct.lto_out_decl_state = type { [7 x %struct.lto_tree_ref_encoder], %struct.lto_cgraph_encoder_d*, %union.tree_node* }
%struct.lto_tree_ref_encoder = type { %struct.htab*, i32, %struct.VEC_tree_heap* }
%struct.lto_output_stream = type { %struct.lto_char_ptr_base*, %struct.lto_char_ptr_base*, i8*, i32, i32, i32 }
%struct.lto_char_ptr_base = type { i8* }
%struct.lto_streamer_cache_d = type { %struct.htab*, i32, %struct.VEC_tree_gc*, %struct.VEC_unsigned_heap* }
%struct.VEC_unsigned_heap = type { %struct.VEC_unsigned_base }
%struct.VEC_unsigned_base = type { i32, i32, [1 x i32] }
%struct.cgraph_node_set_iterator = type { %struct.cgraph_node_set_def*, i32 }
%struct.bitpack_d = type { i64, i64, %struct.VEC_bitpack_word_t_heap* }
%struct.VEC_bitpack_word_t_heap = type { %struct.VEC_bitpack_word_t_base }
%struct.VEC_bitpack_word_t_base = type { i32, i32, [1 x i64] }
%struct.lto_function_header = type { %struct.lto_header, i32, i32, i32, i32, i32, i32, i32 }
%struct.lto_header = type { i16, i16, i32 }
%struct.data_in = type { %struct.lto_file_decl_data*, %union.tree_node**, i8*, i32, i32, i32, i8*, i32, i32, %struct.VEC_ld_plugin_symbol_resolution_t_heap*, %struct.lto_streamer_cache_d* }
%struct.VEC_ld_plugin_symbol_resolution_t_heap = type { %struct.VEC_ld_plugin_symbol_resolution_t_base }
%struct.VEC_ld_plugin_symbol_resolution_t_base = type { i32, i32, [1 x i32] }
%struct.lto_input_block = type { i8*, i32, i32 }

@cgraph_nodes = external dso_local global %struct.cgraph_node*, align 8
@ipa_node_params_vector = common dso_local global %struct.VEC_ipa_node_params_t_heap* null, align 8, !dbg !0
@.str = private unnamed_addr constant [11 x i8] c"ipa-prop.c\00", align 1
@.str.1 = private unnamed_addr constant [2 x i8] c"?\00", align 1
@ipa_edge_args_vector = common dso_local global %struct.VEC_ipa_edge_args_t_gc* null, align 8, !dbg !2345
@cgraph_edge_max_uid = external dso_local global i32, align 4
@.str.2 = private unnamed_addr constant [33 x i8] c"  Jump functions of caller  %s:\0A\00", align 1
@.str.3 = private unnamed_addr constant [18 x i8] c"    callsite  %s \00", align 1
@.str.4 = private unnamed_addr constant [11 x i8] c"-> %s :: \0A\00", align 1
@.str.5 = private unnamed_addr constant [18 x i8] c"       param %d: \00", align 1
@.str.6 = private unnamed_addr constant [9 x i8] c"UNKNOWN\0A\00", align 1
@.str.7 = private unnamed_addr constant [8 x i8] c"CONST: \00", align 1
@.str.8 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.9 = private unnamed_addr constant [19 x i8] c"CONST MEMBER PTR: \00", align 1
@.str.10 = private unnamed_addr constant [3 x i8] c", \00", align 1
@.str.11 = private unnamed_addr constant [15 x i8] c"PASS THROUGH: \00", align 1
@.str.12 = private unnamed_addr constant [11 x i8] c"%d, op %s \00", align 1
@tree_code_name = external dso_local constant [0 x i8*], align 8
@dump_file = external dso_local global %struct._IO_FILE*, align 8
@.str.13 = private unnamed_addr constant [11 x i8] c"ANCESTOR: \00", align 1
@.str.14 = private unnamed_addr constant [16 x i8] c"%d, offset %ld\0A\00", align 1
@.str.15 = private unnamed_addr constant [18 x i8] c"\0AJump functions:\0A\00", align 1
@flag_wpa = external dso_local global i32, align 4
@edge_removal_hook_holder = internal global %struct.cgraph_edge_hook_list* null, align 8, !dbg !2347
@node_removal_hook_holder = internal global %struct.cgraph_node_hook_list* null, align 8, !dbg !2351
@edge_duplication_hook_holder = internal global %struct.cgraph_2edge_hook_list* null, align 8, !dbg !2355
@node_duplication_hook_holder = internal global %struct.cgraph_2node_hook_list* null, align 8, !dbg !2359
@flag_indirect_inlining = external dso_local global i32, align 4
@.str.16 = private unnamed_addr constant [26 x i8] c"  function  %s Trees :: \0A\00", align 1
@.str.17 = private unnamed_addr constant [18 x i8] c"    param %d : %s\00", align 1
@lang_hooks = external dso_local global %struct.lang_hooks, align 8
@.str.18 = private unnamed_addr constant [10 x i8] c"(unnamed)\00", align 1
@.str.19 = private unnamed_addr constant [10 x i8] c" modified\00", align 1
@.str.20 = private unnamed_addr constant [23 x i8] c"\0AFunction parameters:\0A\00", align 1
@.str.21 = private unnamed_addr constant [6 x i8] c"SYNTH\00", align 1
@global_trees = external dso_local global [131 x %union.tree_node*], align 16
@dump_flags = external dso_local global i32, align 4
@.str.22 = private unnamed_addr constant [16 x i8] c"replacing stmt:\00", align 1
@.str.23 = private unnamed_addr constant [11 x i8] c"with stmt:\00", align 1
@.str.24 = private unnamed_addr constant [24 x i8] c"IPA param adjustments: \00", align 1
@.str.25 = private unnamed_addr constant [18 x i8] c"                 \00", align 1
@.str.26 = private unnamed_addr constant [22 x i8] c"%i. base_index: %i - \00", align 1
@.str.27 = private unnamed_addr constant [9 x i8] c", base: \00", align 1
@.str.28 = private unnamed_addr constant [14 x i8] c", reduction: \00", align 1
@.str.29 = private unnamed_addr constant [17 x i8] c", new_ssa_base: \00", align 1
@.str.30 = private unnamed_addr constant [13 x i8] c", copy_param\00", align 1
@.str.31 = private unnamed_addr constant [15 x i8] c", remove_param\00", align 1
@.str.32 = private unnamed_addr constant [13 x i8] c", offset %li\00", align 1
@.str.33 = private unnamed_addr constant [9 x i8] c", by_ref\00", align 1
@.str.34 = private unnamed_addr constant [9 x i8] c", type: \00", align 1
@tree_code_type = external dso_local constant [0 x i32], align 4
@gimple_ops_offset_ = external dso_local constant [0 x i64], align 8
@.str.35 = private unnamed_addr constant [11 x i8] c"./gimple.h\00", align 1
@gss_for_code_ = external dso_local constant [0 x i32], align 4
@gimple_rhs_class_table = external dso_local constant [0 x i8], align 1
@current_function_decl = external dso_local global %union.tree_node*, align 8
@.str.36 = private unnamed_addr constant [16 x i8] c"./basic-block.h\00", align 1
@.str.37 = private unnamed_addr constant [58 x i8] c"ipa-prop: Discovered an indirect call to a known target (\00", align 1
@.str.38 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.39 = private unnamed_addr constant [10 x i8] c") in %s: \00", align 1
@cgraph_max_uid = external dso_local global i32, align 4

; Function Attrs: noinline nounwind uwtable
define dso_local void @ipa_push_func_to_list_1(%struct.ipa_func_list** %wl, %struct.cgraph_node* %node, %struct.ipa_node_params* %info) #0 !dbg !2367 {
entry:
  %wl.addr = alloca %struct.ipa_func_list**, align 8
  %node.addr = alloca %struct.cgraph_node*, align 8
  %info.addr = alloca %struct.ipa_node_params*, align 8
  %temp = alloca %struct.ipa_func_list*, align 8
  store %struct.ipa_func_list** %wl, %struct.ipa_func_list*** %wl.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ipa_func_list*** %wl.addr, metadata !2372, metadata !DIExpression()), !dbg !2373
  store %struct.cgraph_node* %node, %struct.cgraph_node** %node.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %node.addr, metadata !2374, metadata !DIExpression()), !dbg !2375
  store %struct.ipa_node_params* %info, %struct.ipa_node_params** %info.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ipa_node_params** %info.addr, metadata !2376, metadata !DIExpression()), !dbg !2377
  call void @llvm.dbg.declare(metadata %struct.ipa_func_list** %temp, metadata !2378, metadata !DIExpression()), !dbg !2379
  %0 = load %struct.ipa_node_params*, %struct.ipa_node_params** %info.addr, align 8, !dbg !2380
  %node_enqueued = getelementptr inbounds %struct.ipa_node_params, %struct.ipa_node_params* %0, i32 0, i32 5, !dbg !2381
  %bf.load = load i8, i8* %node_enqueued, align 8, !dbg !2382
  %bf.clear = and i8 %bf.load, -9, !dbg !2382
  %bf.set = or i8 %bf.clear, 8, !dbg !2382
  store i8 %bf.set, i8* %node_enqueued, align 8, !dbg !2382
  %call = call i8* @xcalloc(i64 1, i64 16), !dbg !2383
  %1 = bitcast i8* %call to %struct.ipa_func_list*, !dbg !2383
  store %struct.ipa_func_list* %1, %struct.ipa_func_list** %temp, align 8, !dbg !2384
  %2 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !2385
  %3 = load %struct.ipa_func_list*, %struct.ipa_func_list** %temp, align 8, !dbg !2386
  %node1 = getelementptr inbounds %struct.ipa_func_list, %struct.ipa_func_list* %3, i32 0, i32 0, !dbg !2387
  store %struct.cgraph_node* %2, %struct.cgraph_node** %node1, align 8, !dbg !2388
  %4 = load %struct.ipa_func_list**, %struct.ipa_func_list*** %wl.addr, align 8, !dbg !2389
  %5 = load %struct.ipa_func_list*, %struct.ipa_func_list** %4, align 8, !dbg !2390
  %6 = load %struct.ipa_func_list*, %struct.ipa_func_list** %temp, align 8, !dbg !2391
  %next = getelementptr inbounds %struct.ipa_func_list, %struct.ipa_func_list* %6, i32 0, i32 1, !dbg !2392
  store %struct.ipa_func_list* %5, %struct.ipa_func_list** %next, align 8, !dbg !2393
  %7 = load %struct.ipa_func_list*, %struct.ipa_func_list** %temp, align 8, !dbg !2394
  %8 = load %struct.ipa_func_list**, %struct.ipa_func_list*** %wl.addr, align 8, !dbg !2395
  store %struct.ipa_func_list* %7, %struct.ipa_func_list** %8, align 8, !dbg !2396
  ret void, !dbg !2397
}

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare dso_local i8* @xcalloc(i64, i64) #2

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.ipa_func_list* @ipa_init_func_list() #0 !dbg !2398 {
entry:
  %node = alloca %struct.cgraph_node*, align 8
  %wl = alloca %struct.ipa_func_list*, align 8
  %info = alloca %struct.ipa_node_params*, align 8
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %node, metadata !2401, metadata !DIExpression()), !dbg !2402
  call void @llvm.dbg.declare(metadata %struct.ipa_func_list** %wl, metadata !2403, metadata !DIExpression()), !dbg !2404
  store %struct.ipa_func_list* null, %struct.ipa_func_list** %wl, align 8, !dbg !2405
  %0 = load %struct.cgraph_node*, %struct.cgraph_node** @cgraph_nodes, align 8, !dbg !2406
  store %struct.cgraph_node* %0, %struct.cgraph_node** %node, align 8, !dbg !2408
  br label %for.cond, !dbg !2409

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !2410
  %tobool = icmp ne %struct.cgraph_node* %1, null, !dbg !2412
  br i1 %tobool, label %for.body, label %for.end, !dbg !2412

for.body:                                         ; preds = %for.cond
  %2 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !2413
  %analyzed = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %2, i32 0, i32 27, !dbg !2415
  %bf.load = load i16, i16* %analyzed, align 4, !dbg !2415
  %bf.lshr = lshr i16 %bf.load, 5, !dbg !2415
  %bf.clear = and i16 %bf.lshr, 1, !dbg !2415
  %bf.cast = zext i16 %bf.clear to i32, !dbg !2415
  %tobool1 = icmp ne i32 %bf.cast, 0, !dbg !2413
  br i1 %tobool1, label %if.then, label %if.end, !dbg !2416

if.then:                                          ; preds = %for.body
  call void @llvm.dbg.declare(metadata %struct.ipa_node_params** %info, metadata !2417, metadata !DIExpression()), !dbg !2419
  %3 = load %struct.VEC_ipa_node_params_t_heap*, %struct.VEC_ipa_node_params_t_heap** @ipa_node_params_vector, align 8, !dbg !2420
  %tobool2 = icmp ne %struct.VEC_ipa_node_params_t_heap* %3, null, !dbg !2420
  br i1 %tobool2, label %cond.true, label %cond.false, !dbg !2420

cond.true:                                        ; preds = %if.then
  %4 = load %struct.VEC_ipa_node_params_t_heap*, %struct.VEC_ipa_node_params_t_heap** @ipa_node_params_vector, align 8, !dbg !2420
  %base = getelementptr inbounds %struct.VEC_ipa_node_params_t_heap, %struct.VEC_ipa_node_params_t_heap* %4, i32 0, i32 0, !dbg !2420
  br label %cond.end, !dbg !2420

cond.false:                                       ; preds = %if.then
  br label %cond.end, !dbg !2420

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_ipa_node_params_t_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !2420
  %5 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !2420
  %uid = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %5, i32 0, i32 24, !dbg !2420
  %6 = load i32, i32* %uid, align 8, !dbg !2420
  %call = call %struct.ipa_node_params* @VEC_ipa_node_params_t_base_index(%struct.VEC_ipa_node_params_t_base* %cond, i32 %6), !dbg !2420
  store %struct.ipa_node_params* %call, %struct.ipa_node_params** %info, align 8, !dbg !2419
  %7 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !2421
  %needed = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %7, i32 0, i32 27, !dbg !2421
  %bf.load3 = load i16, i16* %needed, align 4, !dbg !2421
  %bf.clear4 = and i16 %bf.load3, 1, !dbg !2421
  %bf.cast5 = zext i16 %bf.clear4 to i32, !dbg !2421
  %tobool6 = icmp ne i32 %bf.cast5, 0, !dbg !2421
  br i1 %tobool6, label %cond.false13, label %lor.lhs.false, !dbg !2421

lor.lhs.false:                                    ; preds = %cond.end
  %8 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !2421
  %reachable = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %8, i32 0, i32 27, !dbg !2421
  %bf.load7 = load i16, i16* %reachable, align 4, !dbg !2421
  %bf.lshr8 = lshr i16 %bf.load7, 3, !dbg !2421
  %bf.clear9 = and i16 %bf.lshr8, 1, !dbg !2421
  %bf.cast10 = zext i16 %bf.clear9 to i32, !dbg !2421
  %tobool11 = icmp ne i32 %bf.cast10, 0, !dbg !2421
  br i1 %tobool11, label %cond.false13, label %cond.true12, !dbg !2421

cond.true12:                                      ; preds = %lor.lhs.false
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i32 83, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !2421
  br label %cond.end14, !dbg !2421

cond.false13:                                     ; preds = %lor.lhs.false, %cond.end
  br label %cond.end14, !dbg !2421

cond.end14:                                       ; preds = %cond.false13, %cond.true12
  %cond15 = phi i32 [ 0, %cond.true12 ], [ 0, %cond.false13 ], !dbg !2421
  %9 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !2422
  %10 = load %struct.ipa_node_params*, %struct.ipa_node_params** %info, align 8, !dbg !2423
  call void @ipa_push_func_to_list_1(%struct.ipa_func_list** %wl, %struct.cgraph_node* %9, %struct.ipa_node_params* %10), !dbg !2424
  br label %if.end, !dbg !2425

if.end:                                           ; preds = %cond.end14, %for.body
  br label %for.inc, !dbg !2415

for.inc:                                          ; preds = %if.end
  %11 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !2426
  %next = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %11, i32 0, i32 3, !dbg !2427
  %12 = load %struct.cgraph_node*, %struct.cgraph_node** %next, align 8, !dbg !2427
  store %struct.cgraph_node* %12, %struct.cgraph_node** %node, align 8, !dbg !2428
  br label %for.cond, !dbg !2429, !llvm.loop !2430

for.end:                                          ; preds = %for.cond
  %13 = load %struct.ipa_func_list*, %struct.ipa_func_list** %wl, align 8, !dbg !2432
  ret %struct.ipa_func_list* %13, !dbg !2433
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ipa_node_params* @VEC_ipa_node_params_t_base_index(%struct.VEC_ipa_node_params_t_base* %vec_, i32 %ix_) #0 !dbg !2434 {
entry:
  %vec_.addr = alloca %struct.VEC_ipa_node_params_t_base*, align 8
  %ix_.addr = alloca i32, align 4
  store %struct.VEC_ipa_node_params_t_base* %vec_, %struct.VEC_ipa_node_params_t_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_ipa_node_params_t_base** %vec_.addr, metadata !2439, metadata !DIExpression()), !dbg !2440
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !2441, metadata !DIExpression()), !dbg !2440
  %0 = load %struct.VEC_ipa_node_params_t_base*, %struct.VEC_ipa_node_params_t_base** %vec_.addr, align 8, !dbg !2440
  %tobool = icmp ne %struct.VEC_ipa_node_params_t_base* %0, null, !dbg !2440
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !2440

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !2440
  %2 = load %struct.VEC_ipa_node_params_t_base*, %struct.VEC_ipa_node_params_t_base** %vec_.addr, align 8, !dbg !2440
  %num = getelementptr inbounds %struct.VEC_ipa_node_params_t_base, %struct.VEC_ipa_node_params_t_base* %2, i32 0, i32 0, !dbg !2440
  %3 = load i32, i32* %num, align 8, !dbg !2440
  %cmp = icmp ult i32 %1, %3, !dbg !2440
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !2442
  %land.ext = zext i1 %4 to i32, !dbg !2440
  %5 = load %struct.VEC_ipa_node_params_t_base*, %struct.VEC_ipa_node_params_t_base** %vec_.addr, align 8, !dbg !2440
  %vec = getelementptr inbounds %struct.VEC_ipa_node_params_t_base, %struct.VEC_ipa_node_params_t_base* %5, i32 0, i32 2, !dbg !2440
  %6 = load i32, i32* %ix_.addr, align 4, !dbg !2440
  %idxprom = zext i32 %6 to i64, !dbg !2440
  %arrayidx = getelementptr inbounds [1 x %struct.ipa_node_params], [1 x %struct.ipa_node_params]* %vec, i64 0, i64 %idxprom, !dbg !2440
  ret %struct.ipa_node_params* %arrayidx, !dbg !2440
}

declare dso_local void @fancy_abort(i8*, i32, i8*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.cgraph_node* @ipa_pop_func_from_list(%struct.ipa_func_list** %wl) #0 !dbg !2443 {
entry:
  %wl.addr = alloca %struct.ipa_func_list**, align 8
  %info = alloca %struct.ipa_node_params*, align 8
  %first = alloca %struct.ipa_func_list*, align 8
  %node = alloca %struct.cgraph_node*, align 8
  store %struct.ipa_func_list** %wl, %struct.ipa_func_list*** %wl.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ipa_func_list*** %wl.addr, metadata !2446, metadata !DIExpression()), !dbg !2447
  call void @llvm.dbg.declare(metadata %struct.ipa_node_params** %info, metadata !2448, metadata !DIExpression()), !dbg !2449
  call void @llvm.dbg.declare(metadata %struct.ipa_func_list** %first, metadata !2450, metadata !DIExpression()), !dbg !2451
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %node, metadata !2452, metadata !DIExpression()), !dbg !2453
  %0 = load %struct.ipa_func_list**, %struct.ipa_func_list*** %wl.addr, align 8, !dbg !2454
  %1 = load %struct.ipa_func_list*, %struct.ipa_func_list** %0, align 8, !dbg !2455
  store %struct.ipa_func_list* %1, %struct.ipa_func_list** %first, align 8, !dbg !2456
  %2 = load %struct.ipa_func_list**, %struct.ipa_func_list*** %wl.addr, align 8, !dbg !2457
  %3 = load %struct.ipa_func_list*, %struct.ipa_func_list** %2, align 8, !dbg !2458
  %next = getelementptr inbounds %struct.ipa_func_list, %struct.ipa_func_list* %3, i32 0, i32 1, !dbg !2459
  %4 = load %struct.ipa_func_list*, %struct.ipa_func_list** %next, align 8, !dbg !2459
  %5 = load %struct.ipa_func_list**, %struct.ipa_func_list*** %wl.addr, align 8, !dbg !2460
  store %struct.ipa_func_list* %4, %struct.ipa_func_list** %5, align 8, !dbg !2461
  %6 = load %struct.ipa_func_list*, %struct.ipa_func_list** %first, align 8, !dbg !2462
  %node1 = getelementptr inbounds %struct.ipa_func_list, %struct.ipa_func_list* %6, i32 0, i32 0, !dbg !2463
  %7 = load %struct.cgraph_node*, %struct.cgraph_node** %node1, align 8, !dbg !2463
  store %struct.cgraph_node* %7, %struct.cgraph_node** %node, align 8, !dbg !2464
  %8 = load %struct.ipa_func_list*, %struct.ipa_func_list** %first, align 8, !dbg !2465
  %9 = bitcast %struct.ipa_func_list* %8 to i8*, !dbg !2465
  call void @free(i8* %9), !dbg !2466
  %10 = load %struct.VEC_ipa_node_params_t_heap*, %struct.VEC_ipa_node_params_t_heap** @ipa_node_params_vector, align 8, !dbg !2467
  %tobool = icmp ne %struct.VEC_ipa_node_params_t_heap* %10, null, !dbg !2467
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !2467

cond.true:                                        ; preds = %entry
  %11 = load %struct.VEC_ipa_node_params_t_heap*, %struct.VEC_ipa_node_params_t_heap** @ipa_node_params_vector, align 8, !dbg !2467
  %base = getelementptr inbounds %struct.VEC_ipa_node_params_t_heap, %struct.VEC_ipa_node_params_t_heap* %11, i32 0, i32 0, !dbg !2467
  br label %cond.end, !dbg !2467

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !2467

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_ipa_node_params_t_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !2467
  %12 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !2467
  %uid = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %12, i32 0, i32 24, !dbg !2467
  %13 = load i32, i32* %uid, align 8, !dbg !2467
  %call = call %struct.ipa_node_params* @VEC_ipa_node_params_t_base_index(%struct.VEC_ipa_node_params_t_base* %cond, i32 %13), !dbg !2467
  store %struct.ipa_node_params* %call, %struct.ipa_node_params** %info, align 8, !dbg !2468
  %14 = load %struct.ipa_node_params*, %struct.ipa_node_params** %info, align 8, !dbg !2469
  %node_enqueued = getelementptr inbounds %struct.ipa_node_params, %struct.ipa_node_params* %14, i32 0, i32 5, !dbg !2470
  %bf.load = load i8, i8* %node_enqueued, align 8, !dbg !2471
  %bf.clear = and i8 %bf.load, -9, !dbg !2471
  store i8 %bf.clear, i8* %node_enqueued, align 8, !dbg !2471
  %15 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !2472
  ret %struct.cgraph_node* %15, !dbg !2473
}

declare dso_local void @free(i8*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @ipa_initialize_node_params(%struct.cgraph_node* %node) #0 !dbg !2474 {
entry:
  %node.addr = alloca %struct.cgraph_node*, align 8
  %info = alloca %struct.ipa_node_params*, align 8
  store %struct.cgraph_node* %node, %struct.cgraph_node** %node.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %node.addr, metadata !2475, metadata !DIExpression()), !dbg !2476
  call void @llvm.dbg.declare(metadata %struct.ipa_node_params** %info, metadata !2477, metadata !DIExpression()), !dbg !2478
  %0 = load %struct.VEC_ipa_node_params_t_heap*, %struct.VEC_ipa_node_params_t_heap** @ipa_node_params_vector, align 8, !dbg !2479
  %tobool = icmp ne %struct.VEC_ipa_node_params_t_heap* %0, null, !dbg !2479
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !2479

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_ipa_node_params_t_heap*, %struct.VEC_ipa_node_params_t_heap** @ipa_node_params_vector, align 8, !dbg !2479
  %base = getelementptr inbounds %struct.VEC_ipa_node_params_t_heap, %struct.VEC_ipa_node_params_t_heap* %1, i32 0, i32 0, !dbg !2479
  br label %cond.end, !dbg !2479

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !2479

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_ipa_node_params_t_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !2479
  %2 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !2479
  %uid = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %2, i32 0, i32 24, !dbg !2479
  %3 = load i32, i32* %uid, align 8, !dbg !2479
  %call = call %struct.ipa_node_params* @VEC_ipa_node_params_t_base_index(%struct.VEC_ipa_node_params_t_base* %cond, i32 %3), !dbg !2479
  store %struct.ipa_node_params* %call, %struct.ipa_node_params** %info, align 8, !dbg !2478
  %4 = load %struct.ipa_node_params*, %struct.ipa_node_params** %info, align 8, !dbg !2480
  %params = getelementptr inbounds %struct.ipa_node_params, %struct.ipa_node_params* %4, i32 0, i32 1, !dbg !2482
  %5 = load %struct.ipa_param_descriptor*, %struct.ipa_param_descriptor** %params, align 8, !dbg !2482
  %tobool1 = icmp ne %struct.ipa_param_descriptor* %5, null, !dbg !2480
  br i1 %tobool1, label %if.end, label %if.then, !dbg !2483

if.then:                                          ; preds = %cond.end
  %6 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !2484
  %7 = load %struct.ipa_node_params*, %struct.ipa_node_params** %info, align 8, !dbg !2486
  call void @ipa_count_formal_params(%struct.cgraph_node* %6, %struct.ipa_node_params* %7), !dbg !2487
  %8 = load %struct.ipa_node_params*, %struct.ipa_node_params** %info, align 8, !dbg !2488
  %call2 = call i32 @ipa_get_param_count(%struct.ipa_node_params* %8), !dbg !2488
  %conv = sext i32 %call2 to i64, !dbg !2488
  %call3 = call i8* @xcalloc(i64 %conv, i64 32), !dbg !2488
  %9 = bitcast i8* %call3 to %struct.ipa_param_descriptor*, !dbg !2488
  %10 = load %struct.ipa_node_params*, %struct.ipa_node_params** %info, align 8, !dbg !2489
  %params4 = getelementptr inbounds %struct.ipa_node_params, %struct.ipa_node_params* %10, i32 0, i32 1, !dbg !2490
  store %struct.ipa_param_descriptor* %9, %struct.ipa_param_descriptor** %params4, align 8, !dbg !2491
  %11 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !2492
  %12 = load %struct.ipa_node_params*, %struct.ipa_node_params** %info, align 8, !dbg !2493
  call void @ipa_populate_param_decls(%struct.cgraph_node* %11, %struct.ipa_node_params* %12), !dbg !2494
  br label %if.end, !dbg !2495

if.end:                                           ; preds = %if.then, %cond.end
  ret void, !dbg !2496
}

; Function Attrs: noinline nounwind uwtable
define internal void @ipa_count_formal_params(%struct.cgraph_node* %node, %struct.ipa_node_params* %info) #0 !dbg !2497 {
entry:
  %node.addr = alloca %struct.cgraph_node*, align 8
  %info.addr = alloca %struct.ipa_node_params*, align 8
  %param_num = alloca i32, align 4
  store %struct.cgraph_node* %node, %struct.cgraph_node** %node.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %node.addr, metadata !2500, metadata !DIExpression()), !dbg !2501
  store %struct.ipa_node_params* %info, %struct.ipa_node_params** %info.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ipa_node_params** %info.addr, metadata !2502, metadata !DIExpression()), !dbg !2503
  call void @llvm.dbg.declare(metadata i32* %param_num, metadata !2504, metadata !DIExpression()), !dbg !2505
  %0 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !2506
  %decl = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %0, i32 0, i32 0, !dbg !2507
  %1 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !2507
  %call = call i32 @count_formal_params_1(%union.tree_node* %1), !dbg !2508
  store i32 %call, i32* %param_num, align 4, !dbg !2509
  %2 = load %struct.ipa_node_params*, %struct.ipa_node_params** %info.addr, align 8, !dbg !2510
  %3 = load i32, i32* %param_num, align 4, !dbg !2511
  call void @ipa_set_param_count(%struct.ipa_node_params* %2, i32 %3), !dbg !2512
  ret void, !dbg !2513
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @ipa_get_param_count(%struct.ipa_node_params* %info) #0 !dbg !2514 {
entry:
  %info.addr = alloca %struct.ipa_node_params*, align 8
  store %struct.ipa_node_params* %info, %struct.ipa_node_params** %info.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ipa_node_params** %info.addr, metadata !2517, metadata !DIExpression()), !dbg !2518
  %0 = load %struct.ipa_node_params*, %struct.ipa_node_params** %info.addr, align 8, !dbg !2519
  %param_count = getelementptr inbounds %struct.ipa_node_params, %struct.ipa_node_params* %0, i32 0, i32 0, !dbg !2520
  %1 = load i32, i32* %param_count, align 8, !dbg !2520
  ret i32 %1, !dbg !2521
}

; Function Attrs: noinline nounwind uwtable
define internal void @ipa_populate_param_decls(%struct.cgraph_node* %node, %struct.ipa_node_params* %info) #0 !dbg !2522 {
entry:
  %node.addr = alloca %struct.cgraph_node*, align 8
  %info.addr = alloca %struct.ipa_node_params*, align 8
  %fndecl = alloca %union.tree_node*, align 8
  %fnargs = alloca %union.tree_node*, align 8
  %parm = alloca %union.tree_node*, align 8
  %param_num = alloca i32, align 4
  store %struct.cgraph_node* %node, %struct.cgraph_node** %node.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %node.addr, metadata !2523, metadata !DIExpression()), !dbg !2524
  store %struct.ipa_node_params* %info, %struct.ipa_node_params** %info.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ipa_node_params** %info.addr, metadata !2525, metadata !DIExpression()), !dbg !2526
  call void @llvm.dbg.declare(metadata %union.tree_node** %fndecl, metadata !2527, metadata !DIExpression()), !dbg !2528
  call void @llvm.dbg.declare(metadata %union.tree_node** %fnargs, metadata !2529, metadata !DIExpression()), !dbg !2530
  call void @llvm.dbg.declare(metadata %union.tree_node** %parm, metadata !2531, metadata !DIExpression()), !dbg !2532
  call void @llvm.dbg.declare(metadata i32* %param_num, metadata !2533, metadata !DIExpression()), !dbg !2534
  %0 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !2535
  %decl = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %0, i32 0, i32 0, !dbg !2536
  %1 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !2536
  store %union.tree_node* %1, %union.tree_node** %fndecl, align 8, !dbg !2537
  %2 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !2538
  %decl_non_common = bitcast %union.tree_node* %2 to %struct.tree_decl_non_common*, !dbg !2538
  %arguments = getelementptr inbounds %struct.tree_decl_non_common, %struct.tree_decl_non_common* %decl_non_common, i32 0, i32 2, !dbg !2538
  %3 = load %union.tree_node*, %union.tree_node** %arguments, align 8, !dbg !2538
  store %union.tree_node* %3, %union.tree_node** %fnargs, align 8, !dbg !2539
  store i32 0, i32* %param_num, align 4, !dbg !2540
  %4 = load %union.tree_node*, %union.tree_node** %fnargs, align 8, !dbg !2541
  store %union.tree_node* %4, %union.tree_node** %parm, align 8, !dbg !2543
  br label %for.cond, !dbg !2544

for.cond:                                         ; preds = %for.inc, %entry
  %5 = load %union.tree_node*, %union.tree_node** %parm, align 8, !dbg !2545
  %tobool = icmp ne %union.tree_node* %5, null, !dbg !2547
  br i1 %tobool, label %for.body, label %for.end, !dbg !2547

for.body:                                         ; preds = %for.cond
  %6 = load %union.tree_node*, %union.tree_node** %parm, align 8, !dbg !2548
  %7 = load %struct.ipa_node_params*, %struct.ipa_node_params** %info.addr, align 8, !dbg !2550
  %params = getelementptr inbounds %struct.ipa_node_params, %struct.ipa_node_params* %7, i32 0, i32 1, !dbg !2551
  %8 = load %struct.ipa_param_descriptor*, %struct.ipa_param_descriptor** %params, align 8, !dbg !2551
  %9 = load i32, i32* %param_num, align 4, !dbg !2552
  %idxprom = sext i32 %9 to i64, !dbg !2550
  %arrayidx = getelementptr inbounds %struct.ipa_param_descriptor, %struct.ipa_param_descriptor* %8, i64 %idxprom, !dbg !2550
  %decl1 = getelementptr inbounds %struct.ipa_param_descriptor, %struct.ipa_param_descriptor* %arrayidx, i32 0, i32 1, !dbg !2553
  store %union.tree_node* %6, %union.tree_node** %decl1, align 8, !dbg !2554
  %10 = load i32, i32* %param_num, align 4, !dbg !2555
  %inc = add nsw i32 %10, 1, !dbg !2555
  store i32 %inc, i32* %param_num, align 4, !dbg !2555
  br label %for.inc, !dbg !2556

for.inc:                                          ; preds = %for.body
  %11 = load %union.tree_node*, %union.tree_node** %parm, align 8, !dbg !2557
  %common = bitcast %union.tree_node* %11 to %struct.tree_common*, !dbg !2557
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 1, !dbg !2557
  %12 = load %union.tree_node*, %union.tree_node** %chain, align 8, !dbg !2557
  store %union.tree_node* %12, %union.tree_node** %parm, align 8, !dbg !2558
  br label %for.cond, !dbg !2559, !llvm.loop !2560

for.end:                                          ; preds = %for.cond
  ret void, !dbg !2562
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @ipa_detect_param_modifications(%struct.cgraph_node* %node) #0 !dbg !2563 {
entry:
  %node.addr = alloca %struct.cgraph_node*, align 8
  %decl = alloca %union.tree_node*, align 8
  %bb = alloca %struct.basic_block_def*, align 8
  %func = alloca %struct.function*, align 8
  %gsi = alloca %struct.gimple_stmt_iterator, align 8
  %info = alloca %struct.ipa_node_params*, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  store %struct.cgraph_node* %node, %struct.cgraph_node** %node.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %node.addr, metadata !2564, metadata !DIExpression()), !dbg !2565
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl, metadata !2566, metadata !DIExpression()), !dbg !2567
  %0 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !2568
  %decl1 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %0, i32 0, i32 0, !dbg !2569
  %1 = load %union.tree_node*, %union.tree_node** %decl1, align 8, !dbg !2569
  store %union.tree_node* %1, %union.tree_node** %decl, align 8, !dbg !2567
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !2570, metadata !DIExpression()), !dbg !2571
  call void @llvm.dbg.declare(metadata %struct.function** %func, metadata !2572, metadata !DIExpression()), !dbg !2573
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %gsi, metadata !2574, metadata !DIExpression()), !dbg !2581
  call void @llvm.dbg.declare(metadata %struct.ipa_node_params** %info, metadata !2582, metadata !DIExpression()), !dbg !2583
  %2 = load %struct.VEC_ipa_node_params_t_heap*, %struct.VEC_ipa_node_params_t_heap** @ipa_node_params_vector, align 8, !dbg !2584
  %tobool = icmp ne %struct.VEC_ipa_node_params_t_heap* %2, null, !dbg !2584
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !2584

cond.true:                                        ; preds = %entry
  %3 = load %struct.VEC_ipa_node_params_t_heap*, %struct.VEC_ipa_node_params_t_heap** @ipa_node_params_vector, align 8, !dbg !2584
  %base = getelementptr inbounds %struct.VEC_ipa_node_params_t_heap, %struct.VEC_ipa_node_params_t_heap* %3, i32 0, i32 0, !dbg !2584
  br label %cond.end, !dbg !2584

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !2584

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_ipa_node_params_t_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !2584
  %4 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !2584
  %uid = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %4, i32 0, i32 24, !dbg !2584
  %5 = load i32, i32* %uid, align 8, !dbg !2584
  %call = call %struct.ipa_node_params* @VEC_ipa_node_params_t_base_index(%struct.VEC_ipa_node_params_t_base* %cond, i32 %5), !dbg !2584
  store %struct.ipa_node_params* %call, %struct.ipa_node_params** %info, align 8, !dbg !2583
  %6 = load %struct.ipa_node_params*, %struct.ipa_node_params** %info, align 8, !dbg !2585
  %call2 = call i32 @ipa_get_param_count(%struct.ipa_node_params* %6), !dbg !2587
  %cmp = icmp eq i32 %call2, 0, !dbg !2588
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !2589

lor.lhs.false:                                    ; preds = %cond.end
  %7 = load %struct.ipa_node_params*, %struct.ipa_node_params** %info, align 8, !dbg !2590
  %modification_analysis_done = getelementptr inbounds %struct.ipa_node_params, %struct.ipa_node_params* %7, i32 0, i32 5, !dbg !2591
  %bf.load = load i8, i8* %modification_analysis_done, align 8, !dbg !2591
  %bf.lshr = lshr i8 %bf.load, 1, !dbg !2591
  %bf.clear = and i8 %bf.lshr, 1, !dbg !2591
  %bf.cast = zext i8 %bf.clear to i32, !dbg !2591
  %tobool3 = icmp ne i32 %bf.cast, 0, !dbg !2590
  br i1 %tobool3, label %if.then, label %if.end, !dbg !2592

if.then:                                          ; preds = %lor.lhs.false, %cond.end
  br label %return, !dbg !2593

if.end:                                           ; preds = %lor.lhs.false
  %8 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !2594
  %function_decl = bitcast %union.tree_node* %8 to %struct.tree_function_decl*, !dbg !2594
  %f = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl, i32 0, i32 1, !dbg !2594
  %9 = load %struct.function*, %struct.function** %f, align 8, !dbg !2594
  store %struct.function* %9, %struct.function** %func, align 8, !dbg !2595
  %10 = load %struct.function*, %struct.function** %func, align 8, !dbg !2596
  %cfg = getelementptr inbounds %struct.function, %struct.function* %10, i32 0, i32 1, !dbg !2596
  %11 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !2596
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %11, i32 0, i32 0, !dbg !2596
  %12 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !2596
  %next_bb = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %12, i32 0, i32 6, !dbg !2596
  %13 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb, align 8, !dbg !2596
  store %struct.basic_block_def* %13, %struct.basic_block_def** %bb, align 8, !dbg !2596
  br label %for.cond, !dbg !2596

for.cond:                                         ; preds = %for.inc12, %if.end
  %14 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !2598
  %15 = load %struct.function*, %struct.function** %func, align 8, !dbg !2598
  %cfg4 = getelementptr inbounds %struct.function, %struct.function* %15, i32 0, i32 1, !dbg !2598
  %16 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg4, align 8, !dbg !2598
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %16, i32 0, i32 1, !dbg !2598
  %17 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !2598
  %cmp5 = icmp ne %struct.basic_block_def* %14, %17, !dbg !2598
  br i1 %cmp5, label %for.body, label %for.end14, !dbg !2596

for.body:                                         ; preds = %for.cond
  %18 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !2600
  call void @gsi_start_bb(%struct.gimple_stmt_iterator* sret %tmp, %struct.basic_block_def* %18), !dbg !2602
  %19 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !2602
  %20 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !2602
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %19, i8* align 8 %20, i64 24, i1 false), !dbg !2602
  br label %for.cond6, !dbg !2603

for.cond6:                                        ; preds = %for.inc, %for.body
  %call7 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !2604
  %tobool8 = icmp ne i8 %call7, 0, !dbg !2606
  %lnot = xor i1 %tobool8, true, !dbg !2606
  br i1 %lnot, label %for.body9, label %for.end, !dbg !2607

for.body9:                                        ; preds = %for.cond6
  %call10 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !2608
  %21 = load %struct.ipa_node_params*, %struct.ipa_node_params** %info, align 8, !dbg !2609
  %22 = bitcast %struct.ipa_node_params* %21 to i8*, !dbg !2609
  %call11 = call zeroext i8 @walk_stmt_load_store_addr_ops(%union.gimple_statement_d* %call10, i8* %22, i8 (%union.gimple_statement_d*, %union.tree_node*, i8*)* null, i8 (%union.gimple_statement_d*, %union.tree_node*, i8*)* @visit_store_addr_for_mod_analysis, i8 (%union.gimple_statement_d*, %union.tree_node*, i8*)* @visit_store_addr_for_mod_analysis), !dbg !2610
  br label %for.inc, !dbg !2610

for.inc:                                          ; preds = %for.body9
  call void @gsi_next(%struct.gimple_stmt_iterator* %gsi), !dbg !2611
  br label %for.cond6, !dbg !2612, !llvm.loop !2613

for.end:                                          ; preds = %for.cond6
  br label %for.inc12, !dbg !2614

for.inc12:                                        ; preds = %for.end
  %23 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !2598
  %next_bb13 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %23, i32 0, i32 6, !dbg !2598
  %24 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb13, align 8, !dbg !2598
  store %struct.basic_block_def* %24, %struct.basic_block_def** %bb, align 8, !dbg !2598
  br label %for.cond, !dbg !2598, !llvm.loop !2615

for.end14:                                        ; preds = %for.cond
  %25 = load %struct.ipa_node_params*, %struct.ipa_node_params** %info, align 8, !dbg !2617
  %modification_analysis_done15 = getelementptr inbounds %struct.ipa_node_params, %struct.ipa_node_params* %25, i32 0, i32 5, !dbg !2618
  %bf.load16 = load i8, i8* %modification_analysis_done15, align 8, !dbg !2619
  %bf.clear17 = and i8 %bf.load16, -3, !dbg !2619
  %bf.set = or i8 %bf.clear17, 2, !dbg !2619
  store i8 %bf.set, i8* %modification_analysis_done15, align 8, !dbg !2619
  br label %return, !dbg !2620

return:                                           ; preds = %for.end14, %if.then
  ret void, !dbg !2620
}

; Function Attrs: noinline nounwind uwtable
define internal void @gsi_start_bb(%struct.gimple_stmt_iterator* noalias sret %agg.result, %struct.basic_block_def* %bb) #0 !dbg !2621 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %seq = alloca %struct.gimple_seq_d*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !2624, metadata !DIExpression()), !dbg !2625
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %agg.result, metadata !2626, metadata !DIExpression()), !dbg !2627
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %seq, metadata !2628, metadata !DIExpression()), !dbg !2629
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !2630
  %call = call %struct.gimple_seq_d* @bb_seq(%struct.basic_block_def* %0), !dbg !2631
  store %struct.gimple_seq_d* %call, %struct.gimple_seq_d** %seq, align 8, !dbg !2632
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq, align 8, !dbg !2633
  %call1 = call %struct.gimple_seq_node_d* @gimple_seq_first(%struct.gimple_seq_d* %1), !dbg !2634
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 0, !dbg !2635
  store %struct.gimple_seq_node_d* %call1, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !2636
  %2 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq, align 8, !dbg !2637
  %seq2 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 1, !dbg !2638
  store %struct.gimple_seq_d* %2, %struct.gimple_seq_d** %seq2, align 8, !dbg !2639
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !2640
  %bb3 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 2, !dbg !2641
  store %struct.basic_block_def* %3, %struct.basic_block_def** %bb3, align 8, !dbg !2642
  ret void, !dbg !2643
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #3

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %i) #0 !dbg !2644 {
entry:
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %i, metadata !2647, metadata !DIExpression()), !dbg !2648
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %i, i32 0, i32 0, !dbg !2649
  %0 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !2649
  %cmp = icmp eq %struct.gimple_seq_node_d* %0, null, !dbg !2650
  %conv = zext i1 %cmp to i32, !dbg !2650
  %conv1 = trunc i32 %conv to i8, !dbg !2651
  ret i8 %conv1, !dbg !2652
}

declare dso_local zeroext i8 @walk_stmt_load_store_addr_ops(%union.gimple_statement_d*, i8*, i8 (%union.gimple_statement_d*, %union.tree_node*, i8*)*, i8 (%union.gimple_statement_d*, %union.tree_node*, i8*)*, i8 (%union.gimple_statement_d*, %union.tree_node*, i8*)*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %i) #0 !dbg !2653 {
entry:
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %i, metadata !2656, metadata !DIExpression()), !dbg !2657
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %i, i32 0, i32 0, !dbg !2658
  %0 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !2658
  %stmt = getelementptr inbounds %struct.gimple_seq_node_d, %struct.gimple_seq_node_d* %0, i32 0, i32 0, !dbg !2659
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !2659
  ret %union.gimple_statement_d* %1, !dbg !2660
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @visit_store_addr_for_mod_analysis(%union.gimple_statement_d* %stmt, %union.tree_node* %op, i8* %data) #0 !dbg !2661 {
entry:
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %op.addr = alloca %union.tree_node*, align 8
  %data.addr = alloca i8*, align 8
  %info = alloca %struct.ipa_node_params*, align 8
  %index = alloca i32, align 4
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !2664, metadata !DIExpression()), !dbg !2665
  store %union.tree_node* %op, %union.tree_node** %op.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %op.addr, metadata !2666, metadata !DIExpression()), !dbg !2667
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !2668, metadata !DIExpression()), !dbg !2669
  call void @llvm.dbg.declare(metadata %struct.ipa_node_params** %info, metadata !2670, metadata !DIExpression()), !dbg !2671
  %0 = load i8*, i8** %data.addr, align 8, !dbg !2672
  %1 = bitcast i8* %0 to %struct.ipa_node_params*, !dbg !2673
  store %struct.ipa_node_params* %1, %struct.ipa_node_params** %info, align 8, !dbg !2671
  %2 = load %union.tree_node*, %union.tree_node** %op.addr, align 8, !dbg !2674
  %base = bitcast %union.tree_node* %2 to %struct.tree_base*, !dbg !2674
  %3 = bitcast %struct.tree_base* %base to i64*, !dbg !2674
  %bf.load = load i64, i64* %3, align 8, !dbg !2674
  %bf.clear = and i64 %bf.load, 65535, !dbg !2674
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !2674
  %cmp = icmp eq i32 %bf.cast, 34, !dbg !2676
  br i1 %cmp, label %if.then, label %if.end, !dbg !2677

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i32* %index, metadata !2678, metadata !DIExpression()), !dbg !2680
  %4 = load %struct.ipa_node_params*, %struct.ipa_node_params** %info, align 8, !dbg !2681
  %5 = load %union.tree_node*, %union.tree_node** %op.addr, align 8, !dbg !2682
  %call = call i32 @ipa_get_param_decl_index(%struct.ipa_node_params* %4, %union.tree_node* %5), !dbg !2683
  store i32 %call, i32* %index, align 4, !dbg !2680
  %6 = load i32, i32* %index, align 4, !dbg !2684
  %cmp1 = icmp sge i32 %6, 0, !dbg !2684
  br i1 %cmp1, label %cond.false, label %cond.true, !dbg !2684

cond.true:                                        ; preds = %if.then
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i32 205, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !2684
  br label %cond.end, !dbg !2684

cond.false:                                       ; preds = %if.then
  br label %cond.end, !dbg !2684

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !2684
  %7 = load %struct.ipa_node_params*, %struct.ipa_node_params** %info, align 8, !dbg !2685
  %params = getelementptr inbounds %struct.ipa_node_params, %struct.ipa_node_params* %7, i32 0, i32 1, !dbg !2686
  %8 = load %struct.ipa_param_descriptor*, %struct.ipa_param_descriptor** %params, align 8, !dbg !2686
  %9 = load i32, i32* %index, align 4, !dbg !2687
  %idxprom = sext i32 %9 to i64, !dbg !2685
  %arrayidx = getelementptr inbounds %struct.ipa_param_descriptor, %struct.ipa_param_descriptor* %8, i64 %idxprom, !dbg !2685
  %modified = getelementptr inbounds %struct.ipa_param_descriptor, %struct.ipa_param_descriptor* %arrayidx, i32 0, i32 2, !dbg !2688
  %bf.load2 = load i8, i8* %modified, align 8, !dbg !2689
  %bf.clear3 = and i8 %bf.load2, -2, !dbg !2689
  %bf.set = or i8 %bf.clear3, 1, !dbg !2689
  store i8 %bf.set, i8* %modified, align 8, !dbg !2689
  br label %if.end, !dbg !2690

if.end:                                           ; preds = %cond.end, %entry
  ret i8 0, !dbg !2691
}

; Function Attrs: noinline nounwind uwtable
define internal void @gsi_next(%struct.gimple_stmt_iterator* %i) #0 !dbg !2692 {
entry:
  %i.addr = alloca %struct.gimple_stmt_iterator*, align 8
  store %struct.gimple_stmt_iterator* %i, %struct.gimple_stmt_iterator** %i.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator** %i.addr, metadata !2696, metadata !DIExpression()), !dbg !2697
  %0 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %i.addr, align 8, !dbg !2698
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %0, i32 0, i32 0, !dbg !2699
  %1 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !2699
  %next = getelementptr inbounds %struct.gimple_seq_node_d, %struct.gimple_seq_node_d* %1, i32 0, i32 2, !dbg !2700
  %2 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %next, align 8, !dbg !2700
  %3 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %i.addr, align 8, !dbg !2701
  %ptr1 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %3, i32 0, i32 0, !dbg !2702
  store %struct.gimple_seq_node_d* %2, %struct.gimple_seq_node_d** %ptr1, align 8, !dbg !2703
  ret void, !dbg !2704
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @ipa_count_arguments(%struct.cgraph_edge* %cs) #0 !dbg !2705 {
entry:
  %cs.addr = alloca %struct.cgraph_edge*, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  %arg_num = alloca i32, align 4
  store %struct.cgraph_edge* %cs, %struct.cgraph_edge** %cs.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cgraph_edge** %cs.addr, metadata !2708, metadata !DIExpression()), !dbg !2709
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !2710, metadata !DIExpression()), !dbg !2711
  call void @llvm.dbg.declare(metadata i32* %arg_num, metadata !2712, metadata !DIExpression()), !dbg !2713
  %0 = load %struct.cgraph_edge*, %struct.cgraph_edge** %cs.addr, align 8, !dbg !2714
  %call_stmt = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %0, i32 0, i32 7, !dbg !2715
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %call_stmt, align 8, !dbg !2715
  store %union.gimple_statement_d* %1, %union.gimple_statement_d** %stmt, align 8, !dbg !2716
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !2717
  %call = call zeroext i8 @is_gimple_call(%union.gimple_statement_d* %2), !dbg !2717
  %tobool = icmp ne i8 %call, 0, !dbg !2717
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !2717

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i32 249, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !2717
  br label %cond.end, !dbg !2717

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !2717

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !2717
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !2718
  %call1 = call i32 @gimple_call_num_args(%union.gimple_statement_d* %3), !dbg !2719
  store i32 %call1, i32* %arg_num, align 4, !dbg !2720
  %4 = load %struct.VEC_ipa_edge_args_t_gc*, %struct.VEC_ipa_edge_args_t_gc** @ipa_edge_args_vector, align 8, !dbg !2721
  %tobool2 = icmp ne %struct.VEC_ipa_edge_args_t_gc* %4, null, !dbg !2721
  br i1 %tobool2, label %cond.true3, label %cond.false4, !dbg !2721

cond.true3:                                       ; preds = %cond.end
  %5 = load %struct.VEC_ipa_edge_args_t_gc*, %struct.VEC_ipa_edge_args_t_gc** @ipa_edge_args_vector, align 8, !dbg !2721
  %base = getelementptr inbounds %struct.VEC_ipa_edge_args_t_gc, %struct.VEC_ipa_edge_args_t_gc* %5, i32 0, i32 0, !dbg !2721
  br label %cond.end5, !dbg !2721

cond.false4:                                      ; preds = %cond.end
  br label %cond.end5, !dbg !2721

cond.end5:                                        ; preds = %cond.false4, %cond.true3
  %cond6 = phi %struct.VEC_ipa_edge_args_t_base* [ %base, %cond.true3 ], [ null, %cond.false4 ], !dbg !2721
  %call7 = call i32 @VEC_ipa_edge_args_t_base_length(%struct.VEC_ipa_edge_args_t_base* %cond6), !dbg !2721
  %6 = load i32, i32* @cgraph_edge_max_uid, align 4, !dbg !2723
  %cmp = icmp ule i32 %call7, %6, !dbg !2724
  br i1 %cmp, label %if.then, label %if.end, !dbg !2725

if.then:                                          ; preds = %cond.end5
  %7 = load i32, i32* @cgraph_edge_max_uid, align 4, !dbg !2726
  %add = add nsw i32 %7, 1, !dbg !2726
  call void @VEC_ipa_edge_args_t_gc_safe_grow_cleared(%struct.VEC_ipa_edge_args_t_gc** @ipa_edge_args_vector, i32 %add), !dbg !2726
  br label %if.end, !dbg !2726

if.end:                                           ; preds = %if.then, %cond.end5
  %8 = load %struct.VEC_ipa_edge_args_t_gc*, %struct.VEC_ipa_edge_args_t_gc** @ipa_edge_args_vector, align 8, !dbg !2727
  %tobool8 = icmp ne %struct.VEC_ipa_edge_args_t_gc* %8, null, !dbg !2727
  br i1 %tobool8, label %cond.true9, label %cond.false11, !dbg !2727

cond.true9:                                       ; preds = %if.end
  %9 = load %struct.VEC_ipa_edge_args_t_gc*, %struct.VEC_ipa_edge_args_t_gc** @ipa_edge_args_vector, align 8, !dbg !2727
  %base10 = getelementptr inbounds %struct.VEC_ipa_edge_args_t_gc, %struct.VEC_ipa_edge_args_t_gc* %9, i32 0, i32 0, !dbg !2727
  br label %cond.end12, !dbg !2727

cond.false11:                                     ; preds = %if.end
  br label %cond.end12, !dbg !2727

cond.end12:                                       ; preds = %cond.false11, %cond.true9
  %cond13 = phi %struct.VEC_ipa_edge_args_t_base* [ %base10, %cond.true9 ], [ null, %cond.false11 ], !dbg !2727
  %10 = load %struct.cgraph_edge*, %struct.cgraph_edge** %cs.addr, align 8, !dbg !2727
  %uid = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %10, i32 0, i32 12, !dbg !2727
  %11 = load i32, i32* %uid, align 4, !dbg !2727
  %call14 = call %struct.ipa_edge_args* @VEC_ipa_edge_args_t_base_index(%struct.VEC_ipa_edge_args_t_base* %cond13, i32 %11), !dbg !2727
  %12 = load i32, i32* %arg_num, align 4, !dbg !2728
  call void @ipa_set_cs_argument_count(%struct.ipa_edge_args* %call14, i32 %12), !dbg !2729
  ret void, !dbg !2730
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @is_gimple_call(%union.gimple_statement_d* %gs) #0 !dbg !2731 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !2735, metadata !DIExpression()), !dbg !2736
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !2737
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !2738
  %cmp = icmp eq i32 %call, 8, !dbg !2739
  %conv = zext i1 %cmp to i32, !dbg !2739
  %conv1 = trunc i32 %conv to i8, !dbg !2738
  ret i8 %conv1, !dbg !2740
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_call_num_args(%union.gimple_statement_d* %gs) #0 !dbg !2741 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %num_ops = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !2744, metadata !DIExpression()), !dbg !2745
  call void @llvm.dbg.declare(metadata i32* %num_ops, metadata !2746, metadata !DIExpression()), !dbg !2747
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !2748
  %call = call i32 @gimple_num_ops(%union.gimple_statement_d* %0), !dbg !2749
  store i32 %call, i32* %num_ops, align 4, !dbg !2750
  %1 = load i32, i32* %num_ops, align 4, !dbg !2751
  %sub = sub i32 %1, 3, !dbg !2752
  ret i32 %sub, !dbg !2753
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_ipa_edge_args_t_base_length(%struct.VEC_ipa_edge_args_t_base* %vec_) #0 !dbg !2754 {
entry:
  %vec_.addr = alloca %struct.VEC_ipa_edge_args_t_base*, align 8
  store %struct.VEC_ipa_edge_args_t_base* %vec_, %struct.VEC_ipa_edge_args_t_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_ipa_edge_args_t_base** %vec_.addr, metadata !2759, metadata !DIExpression()), !dbg !2760
  %0 = load %struct.VEC_ipa_edge_args_t_base*, %struct.VEC_ipa_edge_args_t_base** %vec_.addr, align 8, !dbg !2760
  %tobool = icmp ne %struct.VEC_ipa_edge_args_t_base* %0, null, !dbg !2760
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !2760

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_ipa_edge_args_t_base*, %struct.VEC_ipa_edge_args_t_base** %vec_.addr, align 8, !dbg !2760
  %num = getelementptr inbounds %struct.VEC_ipa_edge_args_t_base, %struct.VEC_ipa_edge_args_t_base* %1, i32 0, i32 0, !dbg !2760
  %2 = load i32, i32* %num, align 8, !dbg !2760
  br label %cond.end, !dbg !2760

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !2760

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !2760
  ret i32 %cond, !dbg !2760
}

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_ipa_edge_args_t_gc_safe_grow_cleared(%struct.VEC_ipa_edge_args_t_gc** %vec_, i32 %size_) #0 !dbg !2761 {
entry:
  %vec_.addr = alloca %struct.VEC_ipa_edge_args_t_gc**, align 8
  %size_.addr = alloca i32, align 4
  %oldsize = alloca i32, align 4
  store %struct.VEC_ipa_edge_args_t_gc** %vec_, %struct.VEC_ipa_edge_args_t_gc*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_ipa_edge_args_t_gc*** %vec_.addr, metadata !2765, metadata !DIExpression()), !dbg !2766
  store i32 %size_, i32* %size_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %size_.addr, metadata !2767, metadata !DIExpression()), !dbg !2766
  call void @llvm.dbg.declare(metadata i32* %oldsize, metadata !2768, metadata !DIExpression()), !dbg !2766
  %0 = load %struct.VEC_ipa_edge_args_t_gc**, %struct.VEC_ipa_edge_args_t_gc*** %vec_.addr, align 8, !dbg !2766
  %1 = load %struct.VEC_ipa_edge_args_t_gc*, %struct.VEC_ipa_edge_args_t_gc** %0, align 8, !dbg !2766
  %tobool = icmp ne %struct.VEC_ipa_edge_args_t_gc* %1, null, !dbg !2766
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !2766

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_ipa_edge_args_t_gc**, %struct.VEC_ipa_edge_args_t_gc*** %vec_.addr, align 8, !dbg !2766
  %3 = load %struct.VEC_ipa_edge_args_t_gc*, %struct.VEC_ipa_edge_args_t_gc** %2, align 8, !dbg !2766
  %base = getelementptr inbounds %struct.VEC_ipa_edge_args_t_gc, %struct.VEC_ipa_edge_args_t_gc* %3, i32 0, i32 0, !dbg !2766
  br label %cond.end, !dbg !2766

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !2766

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_ipa_edge_args_t_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !2766
  %call = call i32 @VEC_ipa_edge_args_t_base_length(%struct.VEC_ipa_edge_args_t_base* %cond), !dbg !2766
  store i32 %call, i32* %oldsize, align 4, !dbg !2766
  %4 = load %struct.VEC_ipa_edge_args_t_gc**, %struct.VEC_ipa_edge_args_t_gc*** %vec_.addr, align 8, !dbg !2766
  %5 = load i32, i32* %size_.addr, align 4, !dbg !2766
  call void @VEC_ipa_edge_args_t_gc_safe_grow(%struct.VEC_ipa_edge_args_t_gc** %4, i32 %5), !dbg !2766
  %6 = load %struct.VEC_ipa_edge_args_t_gc**, %struct.VEC_ipa_edge_args_t_gc*** %vec_.addr, align 8, !dbg !2766
  %7 = load %struct.VEC_ipa_edge_args_t_gc*, %struct.VEC_ipa_edge_args_t_gc** %6, align 8, !dbg !2766
  %tobool1 = icmp ne %struct.VEC_ipa_edge_args_t_gc* %7, null, !dbg !2766
  br i1 %tobool1, label %cond.true2, label %cond.false4, !dbg !2766

cond.true2:                                       ; preds = %cond.end
  %8 = load %struct.VEC_ipa_edge_args_t_gc**, %struct.VEC_ipa_edge_args_t_gc*** %vec_.addr, align 8, !dbg !2766
  %9 = load %struct.VEC_ipa_edge_args_t_gc*, %struct.VEC_ipa_edge_args_t_gc** %8, align 8, !dbg !2766
  %base3 = getelementptr inbounds %struct.VEC_ipa_edge_args_t_gc, %struct.VEC_ipa_edge_args_t_gc* %9, i32 0, i32 0, !dbg !2766
  br label %cond.end5, !dbg !2766

cond.false4:                                      ; preds = %cond.end
  br label %cond.end5, !dbg !2766

cond.end5:                                        ; preds = %cond.false4, %cond.true2
  %cond6 = phi %struct.VEC_ipa_edge_args_t_base* [ %base3, %cond.true2 ], [ null, %cond.false4 ], !dbg !2766
  %call7 = call %struct.ipa_edge_args* @VEC_ipa_edge_args_t_base_address(%struct.VEC_ipa_edge_args_t_base* %cond6), !dbg !2766
  %10 = load i32, i32* %oldsize, align 4, !dbg !2766
  %idxprom = sext i32 %10 to i64, !dbg !2766
  %arrayidx = getelementptr inbounds %struct.ipa_edge_args, %struct.ipa_edge_args* %call7, i64 %idxprom, !dbg !2766
  %11 = bitcast %struct.ipa_edge_args* %arrayidx to i8*, !dbg !2766
  %12 = load i32, i32* %size_.addr, align 4, !dbg !2766
  %13 = load i32, i32* %oldsize, align 4, !dbg !2766
  %sub = sub nsw i32 %12, %13, !dbg !2766
  %conv = sext i32 %sub to i64, !dbg !2766
  %mul = mul i64 16, %conv, !dbg !2766
  call void @llvm.memset.p0i8.i64(i8* align 8 %11, i8 0, i64 %mul, i1 false), !dbg !2766
  ret void, !dbg !2766
}

; Function Attrs: noinline nounwind uwtable
define internal void @ipa_set_cs_argument_count(%struct.ipa_edge_args* %args, i32 %count) #0 !dbg !2769 {
entry:
  %args.addr = alloca %struct.ipa_edge_args*, align 8
  %count.addr = alloca i32, align 4
  store %struct.ipa_edge_args* %args, %struct.ipa_edge_args** %args.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ipa_edge_args** %args.addr, metadata !2773, metadata !DIExpression()), !dbg !2774
  store i32 %count, i32* %count.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %count.addr, metadata !2775, metadata !DIExpression()), !dbg !2776
  %0 = load i32, i32* %count.addr, align 4, !dbg !2777
  %1 = load %struct.ipa_edge_args*, %struct.ipa_edge_args** %args.addr, align 8, !dbg !2778
  %argument_count = getelementptr inbounds %struct.ipa_edge_args, %struct.ipa_edge_args* %1, i32 0, i32 0, !dbg !2779
  store i32 %0, i32* %argument_count, align 8, !dbg !2780
  ret void, !dbg !2781
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ipa_edge_args* @VEC_ipa_edge_args_t_base_index(%struct.VEC_ipa_edge_args_t_base* %vec_, i32 %ix_) #0 !dbg !2782 {
entry:
  %vec_.addr = alloca %struct.VEC_ipa_edge_args_t_base*, align 8
  %ix_.addr = alloca i32, align 4
  store %struct.VEC_ipa_edge_args_t_base* %vec_, %struct.VEC_ipa_edge_args_t_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_ipa_edge_args_t_base** %vec_.addr, metadata !2787, metadata !DIExpression()), !dbg !2788
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !2789, metadata !DIExpression()), !dbg !2788
  %0 = load %struct.VEC_ipa_edge_args_t_base*, %struct.VEC_ipa_edge_args_t_base** %vec_.addr, align 8, !dbg !2788
  %tobool = icmp ne %struct.VEC_ipa_edge_args_t_base* %0, null, !dbg !2788
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !2788

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !2788
  %2 = load %struct.VEC_ipa_edge_args_t_base*, %struct.VEC_ipa_edge_args_t_base** %vec_.addr, align 8, !dbg !2788
  %num = getelementptr inbounds %struct.VEC_ipa_edge_args_t_base, %struct.VEC_ipa_edge_args_t_base* %2, i32 0, i32 0, !dbg !2788
  %3 = load i32, i32* %num, align 8, !dbg !2788
  %cmp = icmp ult i32 %1, %3, !dbg !2788
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !2790
  %land.ext = zext i1 %4 to i32, !dbg !2788
  %5 = load %struct.VEC_ipa_edge_args_t_base*, %struct.VEC_ipa_edge_args_t_base** %vec_.addr, align 8, !dbg !2788
  %vec = getelementptr inbounds %struct.VEC_ipa_edge_args_t_base, %struct.VEC_ipa_edge_args_t_base* %5, i32 0, i32 2, !dbg !2788
  %6 = load i32, i32* %ix_.addr, align 4, !dbg !2788
  %idxprom = zext i32 %6 to i64, !dbg !2788
  %arrayidx = getelementptr inbounds [1 x %struct.ipa_edge_args], [1 x %struct.ipa_edge_args]* %vec, i64 0, i64 %idxprom, !dbg !2788
  ret %struct.ipa_edge_args* %arrayidx, !dbg !2788
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @ipa_print_node_jump_functions(%struct._IO_FILE* %f, %struct.cgraph_node* %node) #0 !dbg !2791 {
entry:
  %f.addr = alloca %struct._IO_FILE*, align 8
  %node.addr = alloca %struct.cgraph_node*, align 8
  %i = alloca i32, align 4
  %count = alloca i32, align 4
  %cs = alloca %struct.cgraph_edge*, align 8
  %jump_func = alloca %struct.ipa_jump_func*, align 8
  %type = alloca i32, align 4
  %val = alloca %union.tree_node*, align 8
  store %struct._IO_FILE* %f, %struct._IO_FILE** %f.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %f.addr, metadata !2843, metadata !DIExpression()), !dbg !2844
  store %struct.cgraph_node* %node, %struct.cgraph_node** %node.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %node.addr, metadata !2845, metadata !DIExpression()), !dbg !2846
  call void @llvm.dbg.declare(metadata i32* %i, metadata !2847, metadata !DIExpression()), !dbg !2848
  call void @llvm.dbg.declare(metadata i32* %count, metadata !2849, metadata !DIExpression()), !dbg !2850
  call void @llvm.dbg.declare(metadata %struct.cgraph_edge** %cs, metadata !2851, metadata !DIExpression()), !dbg !2852
  call void @llvm.dbg.declare(metadata %struct.ipa_jump_func** %jump_func, metadata !2853, metadata !DIExpression()), !dbg !2854
  call void @llvm.dbg.declare(metadata i32* %type, metadata !2855, metadata !DIExpression()), !dbg !2856
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** %f.addr, align 8, !dbg !2857
  %1 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !2858
  %call = call i8* @cgraph_node_name(%struct.cgraph_node* %1), !dbg !2859
  %call1 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %0, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.2, i64 0, i64 0), i8* %call), !dbg !2860
  %2 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !2861
  %callees = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %2, i32 0, i32 1, !dbg !2863
  %3 = load %struct.cgraph_edge*, %struct.cgraph_edge** %callees, align 8, !dbg !2863
  store %struct.cgraph_edge* %3, %struct.cgraph_edge** %cs, align 8, !dbg !2864
  br label %for.cond, !dbg !2865

for.cond:                                         ; preds = %for.inc71, %entry
  %4 = load %struct.cgraph_edge*, %struct.cgraph_edge** %cs, align 8, !dbg !2866
  %tobool = icmp ne %struct.cgraph_edge* %4, null, !dbg !2868
  br i1 %tobool, label %for.body, label %for.end72, !dbg !2868

for.body:                                         ; preds = %for.cond
  %5 = load %struct.cgraph_edge*, %struct.cgraph_edge** %cs, align 8, !dbg !2869
  %call2 = call zeroext i8 @ipa_edge_args_info_available_for_edge_p(%struct.cgraph_edge* %5), !dbg !2872
  %tobool3 = icmp ne i8 %call2, 0, !dbg !2872
  br i1 %tobool3, label %if.end, label %if.then, !dbg !2873

if.then:                                          ; preds = %for.body
  br label %for.inc71, !dbg !2874

if.end:                                           ; preds = %for.body
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** %f.addr, align 8, !dbg !2875
  %7 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !2876
  %call4 = call i8* @cgraph_node_name(%struct.cgraph_node* %7), !dbg !2877
  %call5 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %6, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.3, i64 0, i64 0), i8* %call4), !dbg !2878
  %8 = load %struct._IO_FILE*, %struct._IO_FILE** %f.addr, align 8, !dbg !2879
  %9 = load %struct.cgraph_edge*, %struct.cgraph_edge** %cs, align 8, !dbg !2880
  %callee = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %9, i32 0, i32 2, !dbg !2881
  %10 = load %struct.cgraph_node*, %struct.cgraph_node** %callee, align 8, !dbg !2881
  %call6 = call i8* @cgraph_node_name(%struct.cgraph_node* %10), !dbg !2882
  %call7 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %8, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.4, i64 0, i64 0), i8* %call6), !dbg !2883
  %11 = load %struct.VEC_ipa_edge_args_t_gc*, %struct.VEC_ipa_edge_args_t_gc** @ipa_edge_args_vector, align 8, !dbg !2884
  %tobool8 = icmp ne %struct.VEC_ipa_edge_args_t_gc* %11, null, !dbg !2884
  br i1 %tobool8, label %cond.true, label %cond.false, !dbg !2884

cond.true:                                        ; preds = %if.end
  %12 = load %struct.VEC_ipa_edge_args_t_gc*, %struct.VEC_ipa_edge_args_t_gc** @ipa_edge_args_vector, align 8, !dbg !2884
  %base = getelementptr inbounds %struct.VEC_ipa_edge_args_t_gc, %struct.VEC_ipa_edge_args_t_gc* %12, i32 0, i32 0, !dbg !2884
  br label %cond.end, !dbg !2884

cond.false:                                       ; preds = %if.end
  br label %cond.end, !dbg !2884

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_ipa_edge_args_t_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !2884
  %13 = load %struct.cgraph_edge*, %struct.cgraph_edge** %cs, align 8, !dbg !2884
  %uid = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %13, i32 0, i32 12, !dbg !2884
  %14 = load i32, i32* %uid, align 4, !dbg !2884
  %call9 = call %struct.ipa_edge_args* @VEC_ipa_edge_args_t_base_index(%struct.VEC_ipa_edge_args_t_base* %cond, i32 %14), !dbg !2884
  %call10 = call i32 @ipa_get_cs_argument_count(%struct.ipa_edge_args* %call9), !dbg !2885
  store i32 %call10, i32* %count, align 4, !dbg !2886
  store i32 0, i32* %i, align 4, !dbg !2887
  br label %for.cond11, !dbg !2889

for.cond11:                                       ; preds = %for.inc, %cond.end
  %15 = load i32, i32* %i, align 4, !dbg !2890
  %16 = load i32, i32* %count, align 4, !dbg !2892
  %cmp = icmp slt i32 %15, %16, !dbg !2893
  br i1 %cmp, label %for.body12, label %for.end, !dbg !2894

for.body12:                                       ; preds = %for.cond11
  %17 = load %struct.VEC_ipa_edge_args_t_gc*, %struct.VEC_ipa_edge_args_t_gc** @ipa_edge_args_vector, align 8, !dbg !2895
  %tobool13 = icmp ne %struct.VEC_ipa_edge_args_t_gc* %17, null, !dbg !2895
  br i1 %tobool13, label %cond.true14, label %cond.false16, !dbg !2895

cond.true14:                                      ; preds = %for.body12
  %18 = load %struct.VEC_ipa_edge_args_t_gc*, %struct.VEC_ipa_edge_args_t_gc** @ipa_edge_args_vector, align 8, !dbg !2895
  %base15 = getelementptr inbounds %struct.VEC_ipa_edge_args_t_gc, %struct.VEC_ipa_edge_args_t_gc* %18, i32 0, i32 0, !dbg !2895
  br label %cond.end17, !dbg !2895

cond.false16:                                     ; preds = %for.body12
  br label %cond.end17, !dbg !2895

cond.end17:                                       ; preds = %cond.false16, %cond.true14
  %cond18 = phi %struct.VEC_ipa_edge_args_t_base* [ %base15, %cond.true14 ], [ null, %cond.false16 ], !dbg !2895
  %19 = load %struct.cgraph_edge*, %struct.cgraph_edge** %cs, align 8, !dbg !2895
  %uid19 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %19, i32 0, i32 12, !dbg !2895
  %20 = load i32, i32* %uid19, align 4, !dbg !2895
  %call20 = call %struct.ipa_edge_args* @VEC_ipa_edge_args_t_base_index(%struct.VEC_ipa_edge_args_t_base* %cond18, i32 %20), !dbg !2895
  %21 = load i32, i32* %i, align 4, !dbg !2897
  %call21 = call %struct.ipa_jump_func* @ipa_get_ith_jump_func(%struct.ipa_edge_args* %call20, i32 %21), !dbg !2898
  store %struct.ipa_jump_func* %call21, %struct.ipa_jump_func** %jump_func, align 8, !dbg !2899
  %22 = load %struct.ipa_jump_func*, %struct.ipa_jump_func** %jump_func, align 8, !dbg !2900
  %type22 = getelementptr inbounds %struct.ipa_jump_func, %struct.ipa_jump_func* %22, i32 0, i32 0, !dbg !2901
  %23 = load i32, i32* %type22, align 8, !dbg !2901
  store i32 %23, i32* %type, align 4, !dbg !2902
  %24 = load %struct._IO_FILE*, %struct._IO_FILE** %f.addr, align 8, !dbg !2903
  %25 = load i32, i32* %i, align 4, !dbg !2904
  %call23 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %24, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.5, i64 0, i64 0), i32 %25), !dbg !2905
  %26 = load i32, i32* %type, align 4, !dbg !2906
  %cmp24 = icmp eq i32 %26, 0, !dbg !2908
  br i1 %cmp24, label %if.then25, label %if.else, !dbg !2909

if.then25:                                        ; preds = %cond.end17
  %27 = load %struct._IO_FILE*, %struct._IO_FILE** %f.addr, align 8, !dbg !2910
  %call26 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %27, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.6, i64 0, i64 0)), !dbg !2911
  br label %if.end70, !dbg !2911

if.else:                                          ; preds = %cond.end17
  %28 = load i32, i32* %type, align 4, !dbg !2912
  %cmp27 = icmp eq i32 %28, 1, !dbg !2914
  br i1 %cmp27, label %if.then28, label %if.else31, !dbg !2915

if.then28:                                        ; preds = %if.else
  call void @llvm.dbg.declare(metadata %union.tree_node** %val, metadata !2916, metadata !DIExpression()), !dbg !2918
  %29 = load %struct.ipa_jump_func*, %struct.ipa_jump_func** %jump_func, align 8, !dbg !2919
  %value = getelementptr inbounds %struct.ipa_jump_func, %struct.ipa_jump_func* %29, i32 0, i32 1, !dbg !2920
  %constant = bitcast %union.jump_func_value* %value to %union.tree_node**, !dbg !2921
  %30 = load %union.tree_node*, %union.tree_node** %constant, align 8, !dbg !2921
  store %union.tree_node* %30, %union.tree_node** %val, align 8, !dbg !2918
  %31 = load %struct._IO_FILE*, %struct._IO_FILE** %f.addr, align 8, !dbg !2922
  %call29 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %31, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.7, i64 0, i64 0)), !dbg !2923
  %32 = load %struct._IO_FILE*, %struct._IO_FILE** %f.addr, align 8, !dbg !2924
  %33 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !2925
  call void @print_generic_expr(%struct._IO_FILE* %32, %union.tree_node* %33, i32 0), !dbg !2926
  %34 = load %struct._IO_FILE*, %struct._IO_FILE** %f.addr, align 8, !dbg !2927
  %call30 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %34, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8, i64 0, i64 0)), !dbg !2928
  br label %if.end69, !dbg !2929

if.else31:                                        ; preds = %if.else
  %35 = load i32, i32* %type, align 4, !dbg !2930
  %cmp32 = icmp eq i32 %35, 2, !dbg !2932
  br i1 %cmp32, label %if.then33, label %if.else40, !dbg !2933

if.then33:                                        ; preds = %if.else31
  %36 = load %struct._IO_FILE*, %struct._IO_FILE** %f.addr, align 8, !dbg !2934
  %call34 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %36, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.9, i64 0, i64 0)), !dbg !2936
  %37 = load %struct._IO_FILE*, %struct._IO_FILE** %f.addr, align 8, !dbg !2937
  %38 = load %struct.ipa_jump_func*, %struct.ipa_jump_func** %jump_func, align 8, !dbg !2938
  %value35 = getelementptr inbounds %struct.ipa_jump_func, %struct.ipa_jump_func* %38, i32 0, i32 1, !dbg !2939
  %member_cst = bitcast %union.jump_func_value* %value35 to %struct.ipa_member_ptr_cst*, !dbg !2940
  %pfn = getelementptr inbounds %struct.ipa_member_ptr_cst, %struct.ipa_member_ptr_cst* %member_cst, i32 0, i32 0, !dbg !2941
  %39 = load %union.tree_node*, %union.tree_node** %pfn, align 8, !dbg !2941
  call void @print_generic_expr(%struct._IO_FILE* %37, %union.tree_node* %39, i32 0), !dbg !2942
  %40 = load %struct._IO_FILE*, %struct._IO_FILE** %f.addr, align 8, !dbg !2943
  %call36 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %40, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.10, i64 0, i64 0)), !dbg !2944
  %41 = load %struct._IO_FILE*, %struct._IO_FILE** %f.addr, align 8, !dbg !2945
  %42 = load %struct.ipa_jump_func*, %struct.ipa_jump_func** %jump_func, align 8, !dbg !2946
  %value37 = getelementptr inbounds %struct.ipa_jump_func, %struct.ipa_jump_func* %42, i32 0, i32 1, !dbg !2947
  %member_cst38 = bitcast %union.jump_func_value* %value37 to %struct.ipa_member_ptr_cst*, !dbg !2948
  %delta = getelementptr inbounds %struct.ipa_member_ptr_cst, %struct.ipa_member_ptr_cst* %member_cst38, i32 0, i32 1, !dbg !2949
  %43 = load %union.tree_node*, %union.tree_node** %delta, align 8, !dbg !2949
  call void @print_generic_expr(%struct._IO_FILE* %41, %union.tree_node* %43, i32 0), !dbg !2950
  %44 = load %struct._IO_FILE*, %struct._IO_FILE** %f.addr, align 8, !dbg !2951
  %call39 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %44, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8, i64 0, i64 0)), !dbg !2952
  br label %if.end68, !dbg !2953

if.else40:                                        ; preds = %if.else31
  %45 = load i32, i32* %type, align 4, !dbg !2954
  %cmp41 = icmp eq i32 %45, 3, !dbg !2956
  br i1 %cmp41, label %if.then42, label %if.else57, !dbg !2957

if.then42:                                        ; preds = %if.else40
  %46 = load %struct._IO_FILE*, %struct._IO_FILE** %f.addr, align 8, !dbg !2958
  %call43 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %46, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.11, i64 0, i64 0)), !dbg !2960
  %47 = load %struct._IO_FILE*, %struct._IO_FILE** %f.addr, align 8, !dbg !2961
  %48 = load %struct.ipa_jump_func*, %struct.ipa_jump_func** %jump_func, align 8, !dbg !2962
  %value44 = getelementptr inbounds %struct.ipa_jump_func, %struct.ipa_jump_func* %48, i32 0, i32 1, !dbg !2963
  %pass_through = bitcast %union.jump_func_value* %value44 to %struct.ipa_pass_through_data*, !dbg !2964
  %formal_id = getelementptr inbounds %struct.ipa_pass_through_data, %struct.ipa_pass_through_data* %pass_through, i32 0, i32 1, !dbg !2965
  %49 = load i32, i32* %formal_id, align 8, !dbg !2965
  %50 = load %struct.ipa_jump_func*, %struct.ipa_jump_func** %jump_func, align 8, !dbg !2966
  %value45 = getelementptr inbounds %struct.ipa_jump_func, %struct.ipa_jump_func* %50, i32 0, i32 1, !dbg !2967
  %pass_through46 = bitcast %union.jump_func_value* %value45 to %struct.ipa_pass_through_data*, !dbg !2968
  %operation = getelementptr inbounds %struct.ipa_pass_through_data, %struct.ipa_pass_through_data* %pass_through46, i32 0, i32 2, !dbg !2969
  %51 = load i32, i32* %operation, align 4, !dbg !2969
  %idxprom = sext i32 %51 to i64, !dbg !2970
  %arrayidx = getelementptr inbounds [0 x i8*], [0 x i8*]* @tree_code_name, i64 0, i64 %idxprom, !dbg !2970
  %52 = load i8*, i8** %arrayidx, align 8, !dbg !2970
  %call47 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %47, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.12, i64 0, i64 0), i32 %49, i8* %52), !dbg !2971
  %53 = load %struct.ipa_jump_func*, %struct.ipa_jump_func** %jump_func, align 8, !dbg !2972
  %value48 = getelementptr inbounds %struct.ipa_jump_func, %struct.ipa_jump_func* %53, i32 0, i32 1, !dbg !2974
  %pass_through49 = bitcast %union.jump_func_value* %value48 to %struct.ipa_pass_through_data*, !dbg !2975
  %operation50 = getelementptr inbounds %struct.ipa_pass_through_data, %struct.ipa_pass_through_data* %pass_through49, i32 0, i32 2, !dbg !2976
  %54 = load i32, i32* %operation50, align 4, !dbg !2976
  %cmp51 = icmp ne i32 %54, 116, !dbg !2977
  br i1 %cmp51, label %if.then52, label %if.end55, !dbg !2978

if.then52:                                        ; preds = %if.then42
  %55 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !2979
  %56 = load %struct.ipa_jump_func*, %struct.ipa_jump_func** %jump_func, align 8, !dbg !2980
  %value53 = getelementptr inbounds %struct.ipa_jump_func, %struct.ipa_jump_func* %56, i32 0, i32 1, !dbg !2981
  %pass_through54 = bitcast %union.jump_func_value* %value53 to %struct.ipa_pass_through_data*, !dbg !2982
  %operand = getelementptr inbounds %struct.ipa_pass_through_data, %struct.ipa_pass_through_data* %pass_through54, i32 0, i32 0, !dbg !2983
  %57 = load %union.tree_node*, %union.tree_node** %operand, align 8, !dbg !2983
  call void @print_generic_expr(%struct._IO_FILE* %55, %union.tree_node* %57, i32 0), !dbg !2984
  br label %if.end55, !dbg !2984

if.end55:                                         ; preds = %if.then52, %if.then42
  %58 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !2985
  %call56 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %58, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8, i64 0, i64 0)), !dbg !2986
  br label %if.end67, !dbg !2987

if.else57:                                        ; preds = %if.else40
  %59 = load i32, i32* %type, align 4, !dbg !2988
  %cmp58 = icmp eq i32 %59, 4, !dbg !2990
  br i1 %cmp58, label %if.then59, label %if.end66, !dbg !2991

if.then59:                                        ; preds = %if.else57
  %60 = load %struct._IO_FILE*, %struct._IO_FILE** %f.addr, align 8, !dbg !2992
  %call60 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %60, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.13, i64 0, i64 0)), !dbg !2994
  %61 = load %struct._IO_FILE*, %struct._IO_FILE** %f.addr, align 8, !dbg !2995
  %62 = load %struct.ipa_jump_func*, %struct.ipa_jump_func** %jump_func, align 8, !dbg !2996
  %value61 = getelementptr inbounds %struct.ipa_jump_func, %struct.ipa_jump_func* %62, i32 0, i32 1, !dbg !2997
  %ancestor = bitcast %union.jump_func_value* %value61 to %struct.ipa_ancestor_jf_data*, !dbg !2998
  %formal_id62 = getelementptr inbounds %struct.ipa_ancestor_jf_data, %struct.ipa_ancestor_jf_data* %ancestor, i32 0, i32 2, !dbg !2999
  %63 = load i32, i32* %formal_id62, align 8, !dbg !2999
  %64 = load %struct.ipa_jump_func*, %struct.ipa_jump_func** %jump_func, align 8, !dbg !3000
  %value63 = getelementptr inbounds %struct.ipa_jump_func, %struct.ipa_jump_func* %64, i32 0, i32 1, !dbg !3001
  %ancestor64 = bitcast %union.jump_func_value* %value63 to %struct.ipa_ancestor_jf_data*, !dbg !3002
  %offset = getelementptr inbounds %struct.ipa_ancestor_jf_data, %struct.ipa_ancestor_jf_data* %ancestor64, i32 0, i32 0, !dbg !3003
  %65 = load i64, i64* %offset, align 8, !dbg !3003
  %call65 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %61, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.14, i64 0, i64 0), i32 %63, i64 %65), !dbg !3004
  br label %if.end66, !dbg !3005

if.end66:                                         ; preds = %if.then59, %if.else57
  br label %if.end67

if.end67:                                         ; preds = %if.end66, %if.end55
  br label %if.end68

if.end68:                                         ; preds = %if.end67, %if.then33
  br label %if.end69

if.end69:                                         ; preds = %if.end68, %if.then28
  br label %if.end70

if.end70:                                         ; preds = %if.end69, %if.then25
  br label %for.inc, !dbg !3006

for.inc:                                          ; preds = %if.end70
  %66 = load i32, i32* %i, align 4, !dbg !3007
  %inc = add nsw i32 %66, 1, !dbg !3007
  store i32 %inc, i32* %i, align 4, !dbg !3007
  br label %for.cond11, !dbg !3008, !llvm.loop !3009

for.end:                                          ; preds = %for.cond11
  br label %for.inc71, !dbg !3011

for.inc71:                                        ; preds = %for.end, %if.then
  %67 = load %struct.cgraph_edge*, %struct.cgraph_edge** %cs, align 8, !dbg !3012
  %next_callee = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %67, i32 0, i32 6, !dbg !3013
  %68 = load %struct.cgraph_edge*, %struct.cgraph_edge** %next_callee, align 8, !dbg !3013
  store %struct.cgraph_edge* %68, %struct.cgraph_edge** %cs, align 8, !dbg !3014
  br label %for.cond, !dbg !3015, !llvm.loop !3016

for.end72:                                        ; preds = %for.cond
  ret void, !dbg !3018
}

declare dso_local i32 @fprintf(%struct._IO_FILE*, i8*, ...) #2

declare dso_local i8* @cgraph_node_name(%struct.cgraph_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @ipa_edge_args_info_available_for_edge_p(%struct.cgraph_edge* %edge) #0 !dbg !3019 {
entry:
  %edge.addr = alloca %struct.cgraph_edge*, align 8
  store %struct.cgraph_edge* %edge, %struct.cgraph_edge** %edge.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cgraph_edge** %edge.addr, metadata !3022, metadata !DIExpression()), !dbg !3023
  %0 = load %struct.cgraph_edge*, %struct.cgraph_edge** %edge.addr, align 8, !dbg !3024
  %uid = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %0, i32 0, i32 12, !dbg !3025
  %1 = load i32, i32* %uid, align 4, !dbg !3025
  %2 = load %struct.VEC_ipa_edge_args_t_gc*, %struct.VEC_ipa_edge_args_t_gc** @ipa_edge_args_vector, align 8, !dbg !3026
  %tobool = icmp ne %struct.VEC_ipa_edge_args_t_gc* %2, null, !dbg !3026
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !3026

cond.true:                                        ; preds = %entry
  %3 = load %struct.VEC_ipa_edge_args_t_gc*, %struct.VEC_ipa_edge_args_t_gc** @ipa_edge_args_vector, align 8, !dbg !3026
  %base = getelementptr inbounds %struct.VEC_ipa_edge_args_t_gc, %struct.VEC_ipa_edge_args_t_gc* %3, i32 0, i32 0, !dbg !3026
  br label %cond.end, !dbg !3026

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !3026

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_ipa_edge_args_t_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !3026
  %call = call i32 @VEC_ipa_edge_args_t_base_length(%struct.VEC_ipa_edge_args_t_base* %cond), !dbg !3026
  %cmp = icmp ult i32 %1, %call, !dbg !3027
  %conv = zext i1 %cmp to i32, !dbg !3027
  %conv1 = trunc i32 %conv to i8, !dbg !3028
  ret i8 %conv1, !dbg !3029
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @ipa_get_cs_argument_count(%struct.ipa_edge_args* %args) #0 !dbg !3030 {
entry:
  %args.addr = alloca %struct.ipa_edge_args*, align 8
  store %struct.ipa_edge_args* %args, %struct.ipa_edge_args** %args.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ipa_edge_args** %args.addr, metadata !3033, metadata !DIExpression()), !dbg !3034
  %0 = load %struct.ipa_edge_args*, %struct.ipa_edge_args** %args.addr, align 8, !dbg !3035
  %argument_count = getelementptr inbounds %struct.ipa_edge_args, %struct.ipa_edge_args* %0, i32 0, i32 0, !dbg !3036
  %1 = load i32, i32* %argument_count, align 8, !dbg !3036
  ret i32 %1, !dbg !3037
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ipa_jump_func* @ipa_get_ith_jump_func(%struct.ipa_edge_args* %args, i32 %i) #0 !dbg !3038 {
entry:
  %args.addr = alloca %struct.ipa_edge_args*, align 8
  %i.addr = alloca i32, align 4
  store %struct.ipa_edge_args* %args, %struct.ipa_edge_args** %args.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ipa_edge_args** %args.addr, metadata !3041, metadata !DIExpression()), !dbg !3042
  store i32 %i, i32* %i.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %i.addr, metadata !3043, metadata !DIExpression()), !dbg !3044
  %0 = load %struct.ipa_edge_args*, %struct.ipa_edge_args** %args.addr, align 8, !dbg !3045
  %jump_functions = getelementptr inbounds %struct.ipa_edge_args, %struct.ipa_edge_args* %0, i32 0, i32 1, !dbg !3046
  %1 = load %struct.ipa_jump_func*, %struct.ipa_jump_func** %jump_functions, align 8, !dbg !3046
  %2 = load i32, i32* %i.addr, align 4, !dbg !3047
  %idxprom = sext i32 %2 to i64, !dbg !3045
  %arrayidx = getelementptr inbounds %struct.ipa_jump_func, %struct.ipa_jump_func* %1, i64 %idxprom, !dbg !3045
  ret %struct.ipa_jump_func* %arrayidx, !dbg !3048
}

declare dso_local void @print_generic_expr(%struct._IO_FILE*, %union.tree_node*, i32) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @ipa_print_all_jump_functions(%struct._IO_FILE* %f) #0 !dbg !3049 {
entry:
  %f.addr = alloca %struct._IO_FILE*, align 8
  %node = alloca %struct.cgraph_node*, align 8
  store %struct._IO_FILE* %f, %struct._IO_FILE** %f.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %f.addr, metadata !3052, metadata !DIExpression()), !dbg !3053
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %node, metadata !3054, metadata !DIExpression()), !dbg !3055
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** %f.addr, align 8, !dbg !3056
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %0, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.15, i64 0, i64 0)), !dbg !3057
  %1 = load %struct.cgraph_node*, %struct.cgraph_node** @cgraph_nodes, align 8, !dbg !3058
  store %struct.cgraph_node* %1, %struct.cgraph_node** %node, align 8, !dbg !3060
  br label %for.cond, !dbg !3061

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !3062
  %tobool = icmp ne %struct.cgraph_node* %2, null, !dbg !3064
  br i1 %tobool, label %for.body, label %for.end, !dbg !3064

for.body:                                         ; preds = %for.cond
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** %f.addr, align 8, !dbg !3065
  %4 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !3067
  call void @ipa_print_node_jump_functions(%struct._IO_FILE* %3, %struct.cgraph_node* %4), !dbg !3068
  br label %for.inc, !dbg !3069

for.inc:                                          ; preds = %for.body
  %5 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !3070
  %next = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %5, i32 0, i32 3, !dbg !3071
  %6 = load %struct.cgraph_node*, %struct.cgraph_node** %next, align 8, !dbg !3071
  store %struct.cgraph_node* %6, %struct.cgraph_node** %node, align 8, !dbg !3072
  br label %for.cond, !dbg !3073, !llvm.loop !3074

for.end:                                          ; preds = %for.cond
  ret void, !dbg !3076
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @ipa_compute_jump_functions(%struct.cgraph_edge* %cs) #0 !dbg !3077 {
entry:
  %cs.addr = alloca %struct.cgraph_edge*, align 8
  %info = alloca %struct.ipa_node_params*, align 8
  %arguments = alloca %struct.ipa_edge_args*, align 8
  %call9 = alloca %union.gimple_statement_d*, align 8
  store %struct.cgraph_edge* %cs, %struct.cgraph_edge** %cs.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cgraph_edge** %cs.addr, metadata !3078, metadata !DIExpression()), !dbg !3079
  call void @llvm.dbg.declare(metadata %struct.ipa_node_params** %info, metadata !3080, metadata !DIExpression()), !dbg !3081
  %0 = load %struct.VEC_ipa_node_params_t_heap*, %struct.VEC_ipa_node_params_t_heap** @ipa_node_params_vector, align 8, !dbg !3082
  %tobool = icmp ne %struct.VEC_ipa_node_params_t_heap* %0, null, !dbg !3082
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !3082

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_ipa_node_params_t_heap*, %struct.VEC_ipa_node_params_t_heap** @ipa_node_params_vector, align 8, !dbg !3082
  %base = getelementptr inbounds %struct.VEC_ipa_node_params_t_heap, %struct.VEC_ipa_node_params_t_heap* %1, i32 0, i32 0, !dbg !3082
  br label %cond.end, !dbg !3082

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !3082

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_ipa_node_params_t_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !3082
  %2 = load %struct.cgraph_edge*, %struct.cgraph_edge** %cs.addr, align 8, !dbg !3082
  %caller = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %2, i32 0, i32 1, !dbg !3082
  %3 = load %struct.cgraph_node*, %struct.cgraph_node** %caller, align 8, !dbg !3082
  %uid = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %3, i32 0, i32 24, !dbg !3082
  %4 = load i32, i32* %uid, align 8, !dbg !3082
  %call = call %struct.ipa_node_params* @VEC_ipa_node_params_t_base_index(%struct.VEC_ipa_node_params_t_base* %cond, i32 %4), !dbg !3082
  store %struct.ipa_node_params* %call, %struct.ipa_node_params** %info, align 8, !dbg !3081
  call void @llvm.dbg.declare(metadata %struct.ipa_edge_args** %arguments, metadata !3083, metadata !DIExpression()), !dbg !3084
  %5 = load %struct.VEC_ipa_edge_args_t_gc*, %struct.VEC_ipa_edge_args_t_gc** @ipa_edge_args_vector, align 8, !dbg !3085
  %tobool1 = icmp ne %struct.VEC_ipa_edge_args_t_gc* %5, null, !dbg !3085
  br i1 %tobool1, label %cond.true2, label %cond.false4, !dbg !3085

cond.true2:                                       ; preds = %cond.end
  %6 = load %struct.VEC_ipa_edge_args_t_gc*, %struct.VEC_ipa_edge_args_t_gc** @ipa_edge_args_vector, align 8, !dbg !3085
  %base3 = getelementptr inbounds %struct.VEC_ipa_edge_args_t_gc, %struct.VEC_ipa_edge_args_t_gc* %6, i32 0, i32 0, !dbg !3085
  br label %cond.end5, !dbg !3085

cond.false4:                                      ; preds = %cond.end
  br label %cond.end5, !dbg !3085

cond.end5:                                        ; preds = %cond.false4, %cond.true2
  %cond6 = phi %struct.VEC_ipa_edge_args_t_base* [ %base3, %cond.true2 ], [ null, %cond.false4 ], !dbg !3085
  %7 = load %struct.cgraph_edge*, %struct.cgraph_edge** %cs.addr, align 8, !dbg !3085
  %uid7 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %7, i32 0, i32 12, !dbg !3085
  %8 = load i32, i32* %uid7, align 4, !dbg !3085
  %call8 = call %struct.ipa_edge_args* @VEC_ipa_edge_args_t_base_index(%struct.VEC_ipa_edge_args_t_base* %cond6, i32 %8), !dbg !3085
  store %struct.ipa_edge_args* %call8, %struct.ipa_edge_args** %arguments, align 8, !dbg !3084
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %call9, metadata !3086, metadata !DIExpression()), !dbg !3087
  %9 = load %struct.ipa_edge_args*, %struct.ipa_edge_args** %arguments, align 8, !dbg !3088
  %call10 = call i32 @ipa_get_cs_argument_count(%struct.ipa_edge_args* %9), !dbg !3090
  %cmp = icmp eq i32 %call10, 0, !dbg !3091
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !3092

lor.lhs.false:                                    ; preds = %cond.end5
  %10 = load %struct.ipa_edge_args*, %struct.ipa_edge_args** %arguments, align 8, !dbg !3093
  %jump_functions = getelementptr inbounds %struct.ipa_edge_args, %struct.ipa_edge_args* %10, i32 0, i32 1, !dbg !3094
  %11 = load %struct.ipa_jump_func*, %struct.ipa_jump_func** %jump_functions, align 8, !dbg !3094
  %tobool11 = icmp ne %struct.ipa_jump_func* %11, null, !dbg !3093
  br i1 %tobool11, label %if.then, label %if.end, !dbg !3095

if.then:                                          ; preds = %lor.lhs.false, %cond.end5
  br label %return, !dbg !3096

if.end:                                           ; preds = %lor.lhs.false
  %12 = load %struct.ipa_edge_args*, %struct.ipa_edge_args** %arguments, align 8, !dbg !3097
  %call12 = call i32 @ipa_get_cs_argument_count(%struct.ipa_edge_args* %12), !dbg !3097
  %conv = sext i32 %call12 to i64, !dbg !3097
  %mul = mul i64 %conv, 32, !dbg !3097
  %call13 = call i8* @ggc_alloc_cleared_stat(i64 %mul), !dbg !3097
  %13 = bitcast i8* %call13 to %struct.ipa_jump_func*, !dbg !3097
  %14 = load %struct.ipa_edge_args*, %struct.ipa_edge_args** %arguments, align 8, !dbg !3098
  %jump_functions14 = getelementptr inbounds %struct.ipa_edge_args, %struct.ipa_edge_args* %14, i32 0, i32 1, !dbg !3099
  store %struct.ipa_jump_func* %13, %struct.ipa_jump_func** %jump_functions14, align 8, !dbg !3100
  %15 = load %struct.cgraph_edge*, %struct.cgraph_edge** %cs.addr, align 8, !dbg !3101
  %call_stmt = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %15, i32 0, i32 7, !dbg !3102
  %16 = load %union.gimple_statement_d*, %union.gimple_statement_d** %call_stmt, align 8, !dbg !3102
  store %union.gimple_statement_d* %16, %union.gimple_statement_d** %call9, align 8, !dbg !3103
  %17 = load %union.gimple_statement_d*, %union.gimple_statement_d** %call9, align 8, !dbg !3104
  %call15 = call zeroext i8 @is_gimple_call(%union.gimple_statement_d* %17), !dbg !3104
  %tobool16 = icmp ne i8 %call15, 0, !dbg !3104
  br i1 %tobool16, label %cond.false18, label %cond.true17, !dbg !3104

cond.true17:                                      ; preds = %if.end
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i32 670, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !3104
  br label %cond.end19, !dbg !3104

cond.false18:                                     ; preds = %if.end
  br label %cond.end19, !dbg !3104

cond.end19:                                       ; preds = %cond.false18, %cond.true17
  %cond20 = phi i32 [ 0, %cond.true17 ], [ 0, %cond.false18 ], !dbg !3104
  %18 = load %struct.ipa_node_params*, %struct.ipa_node_params** %info, align 8, !dbg !3105
  %19 = load %struct.ipa_edge_args*, %struct.ipa_edge_args** %arguments, align 8, !dbg !3106
  %jump_functions21 = getelementptr inbounds %struct.ipa_edge_args, %struct.ipa_edge_args* %19, i32 0, i32 1, !dbg !3107
  %20 = load %struct.ipa_jump_func*, %struct.ipa_jump_func** %jump_functions21, align 8, !dbg !3107
  %21 = load %union.gimple_statement_d*, %union.gimple_statement_d** %call9, align 8, !dbg !3108
  call void @compute_scalar_jump_functions(%struct.ipa_node_params* %18, %struct.ipa_jump_func* %20, %union.gimple_statement_d* %21), !dbg !3109
  %22 = load %struct.ipa_node_params*, %struct.ipa_node_params** %info, align 8, !dbg !3110
  %23 = load %struct.ipa_edge_args*, %struct.ipa_edge_args** %arguments, align 8, !dbg !3112
  %jump_functions22 = getelementptr inbounds %struct.ipa_edge_args, %struct.ipa_edge_args* %23, i32 0, i32 1, !dbg !3113
  %24 = load %struct.ipa_jump_func*, %struct.ipa_jump_func** %jump_functions22, align 8, !dbg !3113
  %25 = load %union.gimple_statement_d*, %union.gimple_statement_d** %call9, align 8, !dbg !3114
  %call23 = call zeroext i8 @compute_pass_through_member_ptrs(%struct.ipa_node_params* %22, %struct.ipa_jump_func* %24, %union.gimple_statement_d* %25), !dbg !3115
  %tobool24 = icmp ne i8 %call23, 0, !dbg !3115
  br i1 %tobool24, label %if.end26, label %if.then25, !dbg !3116

if.then25:                                        ; preds = %cond.end19
  br label %return, !dbg !3117

if.end26:                                         ; preds = %cond.end19
  %26 = load %struct.ipa_edge_args*, %struct.ipa_edge_args** %arguments, align 8, !dbg !3118
  %jump_functions27 = getelementptr inbounds %struct.ipa_edge_args, %struct.ipa_edge_args* %26, i32 0, i32 1, !dbg !3119
  %27 = load %struct.ipa_jump_func*, %struct.ipa_jump_func** %jump_functions27, align 8, !dbg !3119
  %28 = load %union.gimple_statement_d*, %union.gimple_statement_d** %call9, align 8, !dbg !3120
  call void @compute_cst_member_ptr_arguments(%struct.ipa_jump_func* %27, %union.gimple_statement_d* %28), !dbg !3121
  br label %return, !dbg !3122

return:                                           ; preds = %if.end26, %if.then25, %if.then
  ret void, !dbg !3122
}

declare dso_local i8* @ggc_alloc_cleared_stat(i64) #2

; Function Attrs: noinline nounwind uwtable
define internal void @compute_scalar_jump_functions(%struct.ipa_node_params* %info, %struct.ipa_jump_func* %functions, %union.gimple_statement_d* %call) #0 !dbg !3123 {
entry:
  %info.addr = alloca %struct.ipa_node_params*, align 8
  %functions.addr = alloca %struct.ipa_jump_func*, align 8
  %call.addr = alloca %union.gimple_statement_d*, align 8
  %arg = alloca %union.tree_node*, align 8
  %num = alloca i32, align 4
  %index = alloca i32, align 4
  store %struct.ipa_node_params* %info, %struct.ipa_node_params** %info.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ipa_node_params** %info.addr, metadata !3126, metadata !DIExpression()), !dbg !3127
  store %struct.ipa_jump_func* %functions, %struct.ipa_jump_func** %functions.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ipa_jump_func** %functions.addr, metadata !3128, metadata !DIExpression()), !dbg !3129
  store %union.gimple_statement_d* %call, %union.gimple_statement_d** %call.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %call.addr, metadata !3130, metadata !DIExpression()), !dbg !3131
  call void @llvm.dbg.declare(metadata %union.tree_node** %arg, metadata !3132, metadata !DIExpression()), !dbg !3133
  call void @llvm.dbg.declare(metadata i32* %num, metadata !3134, metadata !DIExpression()), !dbg !3135
  store i32 0, i32* %num, align 4, !dbg !3135
  store i32 0, i32* %num, align 4, !dbg !3136
  br label %for.cond, !dbg !3138

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %num, align 4, !dbg !3139
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %call.addr, align 8, !dbg !3141
  %call1 = call i32 @gimple_call_num_args(%union.gimple_statement_d* %1), !dbg !3142
  %cmp = icmp ult i32 %0, %call1, !dbg !3143
  br i1 %cmp, label %for.body, label %for.end, !dbg !3144

for.body:                                         ; preds = %for.cond
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %call.addr, align 8, !dbg !3145
  %3 = load i32, i32* %num, align 4, !dbg !3147
  %call2 = call %union.tree_node* @gimple_call_arg(%union.gimple_statement_d* %2, i32 %3), !dbg !3148
  store %union.tree_node* %call2, %union.tree_node** %arg, align 8, !dbg !3149
  %4 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !3150
  %call3 = call zeroext i8 @is_gimple_ip_invariant(%union.tree_node* %4), !dbg !3152
  %tobool = icmp ne i8 %call3, 0, !dbg !3152
  br i1 %tobool, label %if.then, label %if.else, !dbg !3153

if.then:                                          ; preds = %for.body
  %5 = load %struct.ipa_jump_func*, %struct.ipa_jump_func** %functions.addr, align 8, !dbg !3154
  %6 = load i32, i32* %num, align 4, !dbg !3156
  %idxprom = zext i32 %6 to i64, !dbg !3154
  %arrayidx = getelementptr inbounds %struct.ipa_jump_func, %struct.ipa_jump_func* %5, i64 %idxprom, !dbg !3154
  %type = getelementptr inbounds %struct.ipa_jump_func, %struct.ipa_jump_func* %arrayidx, i32 0, i32 0, !dbg !3157
  store i32 1, i32* %type, align 8, !dbg !3158
  %7 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !3159
  %8 = load %struct.ipa_jump_func*, %struct.ipa_jump_func** %functions.addr, align 8, !dbg !3160
  %9 = load i32, i32* %num, align 4, !dbg !3161
  %idxprom4 = zext i32 %9 to i64, !dbg !3160
  %arrayidx5 = getelementptr inbounds %struct.ipa_jump_func, %struct.ipa_jump_func* %8, i64 %idxprom4, !dbg !3160
  %value = getelementptr inbounds %struct.ipa_jump_func, %struct.ipa_jump_func* %arrayidx5, i32 0, i32 1, !dbg !3162
  %constant = bitcast %union.jump_func_value* %value to %union.tree_node**, !dbg !3163
  store %union.tree_node* %7, %union.tree_node** %constant, align 8, !dbg !3164
  br label %if.end32, !dbg !3165

if.else:                                          ; preds = %for.body
  %10 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !3166
  %base = bitcast %union.tree_node* %10 to %struct.tree_base*, !dbg !3166
  %11 = bitcast %struct.tree_base* %base to i64*, !dbg !3166
  %bf.load = load i64, i64* %11, align 8, !dbg !3166
  %bf.clear = and i64 %bf.load, 65535, !dbg !3166
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !3166
  %cmp6 = icmp eq i32 %bf.cast, 141, !dbg !3168
  br i1 %cmp6, label %if.then7, label %if.end31, !dbg !3169

if.then7:                                         ; preds = %if.else
  %12 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !3170
  %base8 = bitcast %union.tree_node* %12 to %struct.tree_base*, !dbg !3170
  %13 = bitcast %struct.tree_base* %base8 to i64*, !dbg !3170
  %bf.load9 = load i64, i64* %13, align 8, !dbg !3170
  %bf.lshr = lshr i64 %bf.load9, 32, !dbg !3170
  %bf.clear10 = and i64 %bf.lshr, 1, !dbg !3170
  %bf.cast11 = trunc i64 %bf.clear10 to i32, !dbg !3170
  %tobool12 = icmp ne i32 %bf.cast11, 0, !dbg !3170
  br i1 %tobool12, label %if.then13, label %if.else27, !dbg !3173

if.then13:                                        ; preds = %if.then7
  call void @llvm.dbg.declare(metadata i32* %index, metadata !3174, metadata !DIExpression()), !dbg !3176
  %14 = load %struct.ipa_node_params*, %struct.ipa_node_params** %info.addr, align 8, !dbg !3177
  %15 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !3178
  %ssa_name = bitcast %union.tree_node* %15 to %struct.tree_ssa_name*, !dbg !3178
  %var = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 1, !dbg !3178
  %16 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !3178
  %call14 = call i32 @ipa_get_param_decl_index(%struct.ipa_node_params* %14, %union.tree_node* %16), !dbg !3179
  store i32 %call14, i32* %index, align 4, !dbg !3176
  %17 = load i32, i32* %index, align 4, !dbg !3180
  %cmp15 = icmp sge i32 %17, 0, !dbg !3182
  br i1 %cmp15, label %if.then16, label %if.end, !dbg !3183

if.then16:                                        ; preds = %if.then13
  %18 = load %struct.ipa_jump_func*, %struct.ipa_jump_func** %functions.addr, align 8, !dbg !3184
  %19 = load i32, i32* %num, align 4, !dbg !3186
  %idxprom17 = zext i32 %19 to i64, !dbg !3184
  %arrayidx18 = getelementptr inbounds %struct.ipa_jump_func, %struct.ipa_jump_func* %18, i64 %idxprom17, !dbg !3184
  %type19 = getelementptr inbounds %struct.ipa_jump_func, %struct.ipa_jump_func* %arrayidx18, i32 0, i32 0, !dbg !3187
  store i32 3, i32* %type19, align 8, !dbg !3188
  %20 = load i32, i32* %index, align 4, !dbg !3189
  %21 = load %struct.ipa_jump_func*, %struct.ipa_jump_func** %functions.addr, align 8, !dbg !3190
  %22 = load i32, i32* %num, align 4, !dbg !3191
  %idxprom20 = zext i32 %22 to i64, !dbg !3190
  %arrayidx21 = getelementptr inbounds %struct.ipa_jump_func, %struct.ipa_jump_func* %21, i64 %idxprom20, !dbg !3190
  %value22 = getelementptr inbounds %struct.ipa_jump_func, %struct.ipa_jump_func* %arrayidx21, i32 0, i32 1, !dbg !3192
  %pass_through = bitcast %union.jump_func_value* %value22 to %struct.ipa_pass_through_data*, !dbg !3193
  %formal_id = getelementptr inbounds %struct.ipa_pass_through_data, %struct.ipa_pass_through_data* %pass_through, i32 0, i32 1, !dbg !3194
  store i32 %20, i32* %formal_id, align 8, !dbg !3195
  %23 = load %struct.ipa_jump_func*, %struct.ipa_jump_func** %functions.addr, align 8, !dbg !3196
  %24 = load i32, i32* %num, align 4, !dbg !3197
  %idxprom23 = zext i32 %24 to i64, !dbg !3196
  %arrayidx24 = getelementptr inbounds %struct.ipa_jump_func, %struct.ipa_jump_func* %23, i64 %idxprom23, !dbg !3196
  %value25 = getelementptr inbounds %struct.ipa_jump_func, %struct.ipa_jump_func* %arrayidx24, i32 0, i32 1, !dbg !3198
  %pass_through26 = bitcast %union.jump_func_value* %value25 to %struct.ipa_pass_through_data*, !dbg !3199
  %operation = getelementptr inbounds %struct.ipa_pass_through_data, %struct.ipa_pass_through_data* %pass_through26, i32 0, i32 2, !dbg !3200
  store i32 116, i32* %operation, align 4, !dbg !3201
  br label %if.end, !dbg !3202

if.end:                                           ; preds = %if.then16, %if.then13
  br label %if.end30, !dbg !3203

if.else27:                                        ; preds = %if.then7
  %25 = load %struct.ipa_node_params*, %struct.ipa_node_params** %info.addr, align 8, !dbg !3204
  %26 = load %struct.ipa_jump_func*, %struct.ipa_jump_func** %functions.addr, align 8, !dbg !3205
  %27 = load i32, i32* %num, align 4, !dbg !3206
  %idxprom28 = zext i32 %27 to i64, !dbg !3205
  %arrayidx29 = getelementptr inbounds %struct.ipa_jump_func, %struct.ipa_jump_func* %26, i64 %idxprom28, !dbg !3205
  %28 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !3207
  call void @compute_complex_pass_through(%struct.ipa_node_params* %25, %struct.ipa_jump_func* %arrayidx29, %union.tree_node* %28), !dbg !3208
  br label %if.end30

if.end30:                                         ; preds = %if.else27, %if.end
  br label %if.end31, !dbg !3209

if.end31:                                         ; preds = %if.end30, %if.else
  br label %if.end32

if.end32:                                         ; preds = %if.end31, %if.then
  br label %for.inc, !dbg !3210

for.inc:                                          ; preds = %if.end32
  %29 = load i32, i32* %num, align 4, !dbg !3211
  %inc = add i32 %29, 1, !dbg !3211
  store i32 %inc, i32* %num, align 4, !dbg !3211
  br label %for.cond, !dbg !3212, !llvm.loop !3213

for.end:                                          ; preds = %for.cond
  ret void, !dbg !3215
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @compute_pass_through_member_ptrs(%struct.ipa_node_params* %info, %struct.ipa_jump_func* %functions, %union.gimple_statement_d* %call) #0 !dbg !3216 {
entry:
  %info.addr = alloca %struct.ipa_node_params*, align 8
  %functions.addr = alloca %struct.ipa_jump_func*, align 8
  %call.addr = alloca %union.gimple_statement_d*, align 8
  %undecided_members = alloca i8, align 1
  %num = alloca i32, align 4
  %arg = alloca %union.tree_node*, align 8
  %index = alloca i32, align 4
  store %struct.ipa_node_params* %info, %struct.ipa_node_params** %info.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ipa_node_params** %info.addr, metadata !3219, metadata !DIExpression()), !dbg !3220
  store %struct.ipa_jump_func* %functions, %struct.ipa_jump_func** %functions.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ipa_jump_func** %functions.addr, metadata !3221, metadata !DIExpression()), !dbg !3222
  store %union.gimple_statement_d* %call, %union.gimple_statement_d** %call.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %call.addr, metadata !3223, metadata !DIExpression()), !dbg !3224
  call void @llvm.dbg.declare(metadata i8* %undecided_members, metadata !3225, metadata !DIExpression()), !dbg !3226
  store i8 0, i8* %undecided_members, align 1, !dbg !3226
  call void @llvm.dbg.declare(metadata i32* %num, metadata !3227, metadata !DIExpression()), !dbg !3228
  call void @llvm.dbg.declare(metadata %union.tree_node** %arg, metadata !3229, metadata !DIExpression()), !dbg !3230
  store i32 0, i32* %num, align 4, !dbg !3231
  br label %for.cond, !dbg !3233

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %num, align 4, !dbg !3234
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %call.addr, align 8, !dbg !3236
  %call1 = call i32 @gimple_call_num_args(%union.gimple_statement_d* %1), !dbg !3237
  %cmp = icmp ult i32 %0, %call1, !dbg !3238
  br i1 %cmp, label %for.body, label %for.end, !dbg !3239

for.body:                                         ; preds = %for.cond
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %call.addr, align 8, !dbg !3240
  %3 = load i32, i32* %num, align 4, !dbg !3242
  %call2 = call %union.tree_node* @gimple_call_arg(%union.gimple_statement_d* %2, i32 %3), !dbg !3243
  store %union.tree_node* %call2, %union.tree_node** %arg, align 8, !dbg !3244
  %4 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !3245
  %common = bitcast %union.tree_node* %4 to %struct.tree_common*, !dbg !3245
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !3245
  %5 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !3245
  %call3 = call zeroext i8 @type_like_member_ptr_p(%union.tree_node* %5, %union.tree_node** null, %union.tree_node** null), !dbg !3247
  %tobool = icmp ne i8 %call3, 0, !dbg !3247
  br i1 %tobool, label %if.then, label %if.end20, !dbg !3248

if.then:                                          ; preds = %for.body
  %6 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !3249
  %base = bitcast %union.tree_node* %6 to %struct.tree_base*, !dbg !3249
  %7 = bitcast %struct.tree_base* %base to i64*, !dbg !3249
  %bf.load = load i64, i64* %7, align 8, !dbg !3249
  %bf.clear = and i64 %bf.load, 65535, !dbg !3249
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !3249
  %cmp4 = icmp eq i32 %bf.cast, 34, !dbg !3252
  br i1 %cmp4, label %if.then5, label %if.else18, !dbg !3253

if.then5:                                         ; preds = %if.then
  call void @llvm.dbg.declare(metadata i32* %index, metadata !3254, metadata !DIExpression()), !dbg !3256
  %8 = load %struct.ipa_node_params*, %struct.ipa_node_params** %info.addr, align 8, !dbg !3257
  %9 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !3258
  %call6 = call i32 @ipa_get_param_decl_index(%struct.ipa_node_params* %8, %union.tree_node* %9), !dbg !3259
  store i32 %call6, i32* %index, align 4, !dbg !3256
  %10 = load i32, i32* %index, align 4, !dbg !3260
  %cmp7 = icmp sge i32 %10, 0, !dbg !3260
  br i1 %cmp7, label %cond.false, label %cond.true, !dbg !3260

cond.true:                                        ; preds = %if.then5
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i32 506, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !3260
  br label %cond.end, !dbg !3260

cond.false:                                       ; preds = %if.then5
  br label %cond.end, !dbg !3260

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !3260
  %11 = load %struct.ipa_node_params*, %struct.ipa_node_params** %info.addr, align 8, !dbg !3261
  %12 = load i32, i32* %index, align 4, !dbg !3263
  %call8 = call zeroext i8 @ipa_is_param_modified(%struct.ipa_node_params* %11, i32 %12), !dbg !3264
  %tobool9 = icmp ne i8 %call8, 0, !dbg !3264
  br i1 %tobool9, label %if.else, label %if.then10, !dbg !3265

if.then10:                                        ; preds = %cond.end
  %13 = load %struct.ipa_jump_func*, %struct.ipa_jump_func** %functions.addr, align 8, !dbg !3266
  %14 = load i32, i32* %num, align 4, !dbg !3268
  %idxprom = zext i32 %14 to i64, !dbg !3266
  %arrayidx = getelementptr inbounds %struct.ipa_jump_func, %struct.ipa_jump_func* %13, i64 %idxprom, !dbg !3266
  %type11 = getelementptr inbounds %struct.ipa_jump_func, %struct.ipa_jump_func* %arrayidx, i32 0, i32 0, !dbg !3269
  store i32 3, i32* %type11, align 8, !dbg !3270
  %15 = load i32, i32* %index, align 4, !dbg !3271
  %16 = load %struct.ipa_jump_func*, %struct.ipa_jump_func** %functions.addr, align 8, !dbg !3272
  %17 = load i32, i32* %num, align 4, !dbg !3273
  %idxprom12 = zext i32 %17 to i64, !dbg !3272
  %arrayidx13 = getelementptr inbounds %struct.ipa_jump_func, %struct.ipa_jump_func* %16, i64 %idxprom12, !dbg !3272
  %value = getelementptr inbounds %struct.ipa_jump_func, %struct.ipa_jump_func* %arrayidx13, i32 0, i32 1, !dbg !3274
  %pass_through = bitcast %union.jump_func_value* %value to %struct.ipa_pass_through_data*, !dbg !3275
  %formal_id = getelementptr inbounds %struct.ipa_pass_through_data, %struct.ipa_pass_through_data* %pass_through, i32 0, i32 1, !dbg !3276
  store i32 %15, i32* %formal_id, align 8, !dbg !3277
  %18 = load %struct.ipa_jump_func*, %struct.ipa_jump_func** %functions.addr, align 8, !dbg !3278
  %19 = load i32, i32* %num, align 4, !dbg !3279
  %idxprom14 = zext i32 %19 to i64, !dbg !3278
  %arrayidx15 = getelementptr inbounds %struct.ipa_jump_func, %struct.ipa_jump_func* %18, i64 %idxprom14, !dbg !3278
  %value16 = getelementptr inbounds %struct.ipa_jump_func, %struct.ipa_jump_func* %arrayidx15, i32 0, i32 1, !dbg !3280
  %pass_through17 = bitcast %union.jump_func_value* %value16 to %struct.ipa_pass_through_data*, !dbg !3281
  %operation = getelementptr inbounds %struct.ipa_pass_through_data, %struct.ipa_pass_through_data* %pass_through17, i32 0, i32 2, !dbg !3282
  store i32 116, i32* %operation, align 4, !dbg !3283
  br label %if.end, !dbg !3284

if.else:                                          ; preds = %cond.end
  store i8 1, i8* %undecided_members, align 1, !dbg !3285
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then10
  br label %if.end19, !dbg !3286

if.else18:                                        ; preds = %if.then
  store i8 1, i8* %undecided_members, align 1, !dbg !3287
  br label %if.end19

if.end19:                                         ; preds = %if.else18, %if.end
  br label %if.end20, !dbg !3288

if.end20:                                         ; preds = %if.end19, %for.body
  br label %for.inc, !dbg !3289

for.inc:                                          ; preds = %if.end20
  %20 = load i32, i32* %num, align 4, !dbg !3290
  %inc = add i32 %20, 1, !dbg !3290
  store i32 %inc, i32* %num, align 4, !dbg !3290
  br label %for.cond, !dbg !3291, !llvm.loop !3292

for.end:                                          ; preds = %for.cond
  %21 = load i8, i8* %undecided_members, align 1, !dbg !3294
  ret i8 %21, !dbg !3295
}

; Function Attrs: noinline nounwind uwtable
define internal void @compute_cst_member_ptr_arguments(%struct.ipa_jump_func* %functions, %union.gimple_statement_d* %call) #0 !dbg !3296 {
entry:
  %functions.addr = alloca %struct.ipa_jump_func*, align 8
  %call.addr = alloca %union.gimple_statement_d*, align 8
  %num = alloca i32, align 4
  %arg = alloca %union.tree_node*, align 8
  %method_field = alloca %union.tree_node*, align 8
  %delta_field = alloca %union.tree_node*, align 8
  store %struct.ipa_jump_func* %functions, %struct.ipa_jump_func** %functions.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ipa_jump_func** %functions.addr, metadata !3299, metadata !DIExpression()), !dbg !3300
  store %union.gimple_statement_d* %call, %union.gimple_statement_d** %call.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %call.addr, metadata !3301, metadata !DIExpression()), !dbg !3302
  call void @llvm.dbg.declare(metadata i32* %num, metadata !3303, metadata !DIExpression()), !dbg !3304
  call void @llvm.dbg.declare(metadata %union.tree_node** %arg, metadata !3305, metadata !DIExpression()), !dbg !3306
  call void @llvm.dbg.declare(metadata %union.tree_node** %method_field, metadata !3307, metadata !DIExpression()), !dbg !3308
  call void @llvm.dbg.declare(metadata %union.tree_node** %delta_field, metadata !3309, metadata !DIExpression()), !dbg !3310
  store i32 0, i32* %num, align 4, !dbg !3311
  br label %for.cond, !dbg !3313

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %num, align 4, !dbg !3314
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %call.addr, align 8, !dbg !3316
  %call1 = call i32 @gimple_call_num_args(%union.gimple_statement_d* %1), !dbg !3317
  %cmp = icmp ult i32 %0, %call1, !dbg !3318
  br i1 %cmp, label %for.body, label %for.end, !dbg !3319

for.body:                                         ; preds = %for.cond
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %call.addr, align 8, !dbg !3320
  %3 = load i32, i32* %num, align 4, !dbg !3322
  %call2 = call %union.tree_node* @gimple_call_arg(%union.gimple_statement_d* %2, i32 %3), !dbg !3323
  store %union.tree_node* %call2, %union.tree_node** %arg, align 8, !dbg !3324
  %4 = load %struct.ipa_jump_func*, %struct.ipa_jump_func** %functions.addr, align 8, !dbg !3325
  %5 = load i32, i32* %num, align 4, !dbg !3327
  %idxprom = zext i32 %5 to i64, !dbg !3325
  %arrayidx = getelementptr inbounds %struct.ipa_jump_func, %struct.ipa_jump_func* %4, i64 %idxprom, !dbg !3325
  %type = getelementptr inbounds %struct.ipa_jump_func, %struct.ipa_jump_func* %arrayidx, i32 0, i32 0, !dbg !3328
  %6 = load i32, i32* %type, align 8, !dbg !3328
  %cmp3 = icmp eq i32 %6, 0, !dbg !3329
  br i1 %cmp3, label %land.lhs.true, label %if.end, !dbg !3330

land.lhs.true:                                    ; preds = %for.body
  %7 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !3331
  %common = bitcast %union.tree_node* %7 to %struct.tree_common*, !dbg !3331
  %type4 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !3331
  %8 = load %union.tree_node*, %union.tree_node** %type4, align 8, !dbg !3331
  %call5 = call zeroext i8 @type_like_member_ptr_p(%union.tree_node* %8, %union.tree_node** %method_field, %union.tree_node** %delta_field), !dbg !3332
  %conv = zext i8 %call5 to i32, !dbg !3332
  %tobool = icmp ne i32 %conv, 0, !dbg !3332
  br i1 %tobool, label %if.then, label %if.end, !dbg !3333

if.then:                                          ; preds = %land.lhs.true
  %9 = load %union.gimple_statement_d*, %union.gimple_statement_d** %call.addr, align 8, !dbg !3334
  %10 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !3335
  %11 = load %union.tree_node*, %union.tree_node** %method_field, align 8, !dbg !3336
  %12 = load %union.tree_node*, %union.tree_node** %delta_field, align 8, !dbg !3337
  %13 = load %struct.ipa_jump_func*, %struct.ipa_jump_func** %functions.addr, align 8, !dbg !3338
  %14 = load i32, i32* %num, align 4, !dbg !3339
  %idxprom6 = zext i32 %14 to i64, !dbg !3338
  %arrayidx7 = getelementptr inbounds %struct.ipa_jump_func, %struct.ipa_jump_func* %13, i64 %idxprom6, !dbg !3338
  call void @determine_cst_member_ptr(%union.gimple_statement_d* %9, %union.tree_node* %10, %union.tree_node* %11, %union.tree_node* %12, %struct.ipa_jump_func* %arrayidx7), !dbg !3340
  br label %if.end, !dbg !3340

if.end:                                           ; preds = %if.then, %land.lhs.true, %for.body
  br label %for.inc, !dbg !3341

for.inc:                                          ; preds = %if.end
  %15 = load i32, i32* %num, align 4, !dbg !3342
  %inc = add i32 %15, 1, !dbg !3342
  store i32 %inc, i32* %num, align 4, !dbg !3342
  br label %for.cond, !dbg !3343, !llvm.loop !3344

for.end:                                          ; preds = %for.cond
  ret void, !dbg !3346
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @ipa_analyze_params_uses(%struct.cgraph_node* %node) #0 !dbg !3347 {
entry:
  %node.addr = alloca %struct.cgraph_node*, align 8
  %decl = alloca %union.tree_node*, align 8
  %bb = alloca %struct.basic_block_def*, align 8
  %func = alloca %struct.function*, align 8
  %gsi = alloca %struct.gimple_stmt_iterator, align 8
  %info = alloca %struct.ipa_node_params*, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  store %struct.cgraph_node* %node, %struct.cgraph_node** %node.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %node.addr, metadata !3348, metadata !DIExpression()), !dbg !3349
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl, metadata !3350, metadata !DIExpression()), !dbg !3351
  %0 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !3352
  %decl1 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %0, i32 0, i32 0, !dbg !3353
  %1 = load %union.tree_node*, %union.tree_node** %decl1, align 8, !dbg !3353
  store %union.tree_node* %1, %union.tree_node** %decl, align 8, !dbg !3351
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !3354, metadata !DIExpression()), !dbg !3355
  call void @llvm.dbg.declare(metadata %struct.function** %func, metadata !3356, metadata !DIExpression()), !dbg !3357
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %gsi, metadata !3358, metadata !DIExpression()), !dbg !3359
  call void @llvm.dbg.declare(metadata %struct.ipa_node_params** %info, metadata !3360, metadata !DIExpression()), !dbg !3361
  %2 = load %struct.VEC_ipa_node_params_t_heap*, %struct.VEC_ipa_node_params_t_heap** @ipa_node_params_vector, align 8, !dbg !3362
  %tobool = icmp ne %struct.VEC_ipa_node_params_t_heap* %2, null, !dbg !3362
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !3362

cond.true:                                        ; preds = %entry
  %3 = load %struct.VEC_ipa_node_params_t_heap*, %struct.VEC_ipa_node_params_t_heap** @ipa_node_params_vector, align 8, !dbg !3362
  %base = getelementptr inbounds %struct.VEC_ipa_node_params_t_heap, %struct.VEC_ipa_node_params_t_heap* %3, i32 0, i32 0, !dbg !3362
  br label %cond.end, !dbg !3362

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !3362

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_ipa_node_params_t_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !3362
  %4 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !3362
  %uid = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %4, i32 0, i32 24, !dbg !3362
  %5 = load i32, i32* %uid, align 8, !dbg !3362
  %call = call %struct.ipa_node_params* @VEC_ipa_node_params_t_base_index(%struct.VEC_ipa_node_params_t_base* %cond, i32 %5), !dbg !3362
  store %struct.ipa_node_params* %call, %struct.ipa_node_params** %info, align 8, !dbg !3361
  %6 = load %struct.ipa_node_params*, %struct.ipa_node_params** %info, align 8, !dbg !3363
  %call2 = call i32 @ipa_get_param_count(%struct.ipa_node_params* %6), !dbg !3365
  %cmp = icmp eq i32 %call2, 0, !dbg !3366
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !3367

lor.lhs.false:                                    ; preds = %cond.end
  %7 = load %struct.ipa_node_params*, %struct.ipa_node_params** %info, align 8, !dbg !3368
  %uses_analysis_done = getelementptr inbounds %struct.ipa_node_params, %struct.ipa_node_params* %7, i32 0, i32 5, !dbg !3369
  %bf.load = load i8, i8* %uses_analysis_done, align 8, !dbg !3369
  %bf.lshr = lshr i8 %bf.load, 2, !dbg !3369
  %bf.clear = and i8 %bf.lshr, 1, !dbg !3369
  %bf.cast = zext i8 %bf.clear to i32, !dbg !3369
  %tobool3 = icmp ne i32 %bf.cast, 0, !dbg !3368
  br i1 %tobool3, label %if.then, label %if.end, !dbg !3370

if.then:                                          ; preds = %lor.lhs.false, %cond.end
  br label %return, !dbg !3371

if.end:                                           ; preds = %lor.lhs.false
  %8 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !3372
  %function_decl = bitcast %union.tree_node* %8 to %struct.tree_function_decl*, !dbg !3372
  %f = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl, i32 0, i32 1, !dbg !3372
  %9 = load %struct.function*, %struct.function** %f, align 8, !dbg !3372
  store %struct.function* %9, %struct.function** %func, align 8, !dbg !3373
  %10 = load %struct.function*, %struct.function** %func, align 8, !dbg !3374
  %cfg = getelementptr inbounds %struct.function, %struct.function* %10, i32 0, i32 1, !dbg !3374
  %11 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !3374
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %11, i32 0, i32 0, !dbg !3374
  %12 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !3374
  %next_bb = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %12, i32 0, i32 6, !dbg !3374
  %13 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb, align 8, !dbg !3374
  store %struct.basic_block_def* %13, %struct.basic_block_def** %bb, align 8, !dbg !3374
  br label %for.cond, !dbg !3374

for.cond:                                         ; preds = %for.inc11, %if.end
  %14 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3376
  %15 = load %struct.function*, %struct.function** %func, align 8, !dbg !3376
  %cfg4 = getelementptr inbounds %struct.function, %struct.function* %15, i32 0, i32 1, !dbg !3376
  %16 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg4, align 8, !dbg !3376
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %16, i32 0, i32 1, !dbg !3376
  %17 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !3376
  %cmp5 = icmp ne %struct.basic_block_def* %14, %17, !dbg !3376
  br i1 %cmp5, label %for.body, label %for.end13, !dbg !3374

for.body:                                         ; preds = %for.cond
  %18 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3378
  call void @gsi_start_bb(%struct.gimple_stmt_iterator* sret %tmp, %struct.basic_block_def* %18), !dbg !3381
  %19 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !3381
  %20 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !3381
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %19, i8* align 8 %20, i64 24, i1 false), !dbg !3381
  br label %for.cond6, !dbg !3382

for.cond6:                                        ; preds = %for.inc, %for.body
  %call7 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !3383
  %tobool8 = icmp ne i8 %call7, 0, !dbg !3385
  %lnot = xor i1 %tobool8, true, !dbg !3385
  br i1 %lnot, label %for.body9, label %for.end, !dbg !3386

for.body9:                                        ; preds = %for.cond6
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !3387, metadata !DIExpression()), !dbg !3389
  %call10 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !3390
  store %union.gimple_statement_d* %call10, %union.gimple_statement_d** %stmt, align 8, !dbg !3389
  %21 = load %struct.ipa_node_params*, %struct.ipa_node_params** %info, align 8, !dbg !3391
  %22 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !3392
  call void @ipa_analyze_stmt_uses(%struct.ipa_node_params* %21, %union.gimple_statement_d* %22), !dbg !3393
  br label %for.inc, !dbg !3394

for.inc:                                          ; preds = %for.body9
  call void @gsi_next(%struct.gimple_stmt_iterator* %gsi), !dbg !3395
  br label %for.cond6, !dbg !3396, !llvm.loop !3397

for.end:                                          ; preds = %for.cond6
  br label %for.inc11, !dbg !3399

for.inc11:                                        ; preds = %for.end
  %23 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3376
  %next_bb12 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %23, i32 0, i32 6, !dbg !3376
  %24 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb12, align 8, !dbg !3376
  store %struct.basic_block_def* %24, %struct.basic_block_def** %bb, align 8, !dbg !3376
  br label %for.cond, !dbg !3376, !llvm.loop !3400

for.end13:                                        ; preds = %for.cond
  %25 = load %struct.ipa_node_params*, %struct.ipa_node_params** %info, align 8, !dbg !3402
  %uses_analysis_done14 = getelementptr inbounds %struct.ipa_node_params, %struct.ipa_node_params* %25, i32 0, i32 5, !dbg !3403
  %bf.load15 = load i8, i8* %uses_analysis_done14, align 8, !dbg !3404
  %bf.clear16 = and i8 %bf.load15, -5, !dbg !3404
  %bf.set = or i8 %bf.clear16, 4, !dbg !3404
  store i8 %bf.set, i8* %uses_analysis_done14, align 8, !dbg !3404
  br label %return, !dbg !3405

return:                                           ; preds = %for.end13, %if.then
  ret void, !dbg !3405
}

; Function Attrs: noinline nounwind uwtable
define internal void @ipa_analyze_stmt_uses(%struct.ipa_node_params* %info, %union.gimple_statement_d* %stmt) #0 !dbg !3406 {
entry:
  %info.addr = alloca %struct.ipa_node_params*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  store %struct.ipa_node_params* %info, %struct.ipa_node_params** %info.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ipa_node_params** %info.addr, metadata !3409, metadata !DIExpression()), !dbg !3410
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !3411, metadata !DIExpression()), !dbg !3412
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !3413
  %call = call zeroext i8 @is_gimple_call(%union.gimple_statement_d* %0), !dbg !3415
  %tobool = icmp ne i8 %call, 0, !dbg !3415
  br i1 %tobool, label %if.then, label %if.end, !dbg !3416

if.then:                                          ; preds = %entry
  %1 = load %struct.ipa_node_params*, %struct.ipa_node_params** %info.addr, align 8, !dbg !3417
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !3418
  call void @ipa_analyze_call_uses(%struct.ipa_node_params* %1, %union.gimple_statement_d* %2), !dbg !3419
  br label %if.end, !dbg !3419

if.end:                                           ; preds = %if.then, %entry
  ret void, !dbg !3420
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @ipa_propagate_indirect_call_infos(%struct.cgraph_edge* %cs, %struct.VEC_cgraph_edge_p_heap** %new_edges) #0 !dbg !3421 {
entry:
  %retval = alloca i8, align 1
  %cs.addr = alloca %struct.cgraph_edge*, align 8
  %new_edges.addr = alloca %struct.VEC_cgraph_edge_p_heap**, align 8
  store %struct.cgraph_edge* %cs, %struct.cgraph_edge** %cs.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cgraph_edge** %cs.addr, metadata !3425, metadata !DIExpression()), !dbg !3426
  store %struct.VEC_cgraph_edge_p_heap** %new_edges, %struct.VEC_cgraph_edge_p_heap*** %new_edges.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_cgraph_edge_p_heap*** %new_edges.addr, metadata !3427, metadata !DIExpression()), !dbg !3428
  %0 = load i32, i32* @flag_wpa, align 4, !dbg !3429
  %tobool = icmp ne i32 %0, 0, !dbg !3429
  br i1 %tobool, label %if.then, label %if.end, !dbg !3431

if.then:                                          ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !3432
  br label %return, !dbg !3432

if.end:                                           ; preds = %entry
  %1 = load %struct.VEC_ipa_node_params_t_heap*, %struct.VEC_ipa_node_params_t_heap** @ipa_node_params_vector, align 8, !dbg !3433
  %tobool1 = icmp ne %struct.VEC_ipa_node_params_t_heap* %1, null, !dbg !3433
  br i1 %tobool1, label %if.end3, label %if.then2, !dbg !3435

if.then2:                                         ; preds = %if.end
  store i8 0, i8* %retval, align 1, !dbg !3436
  br label %return, !dbg !3436

if.end3:                                          ; preds = %if.end
  %2 = load %struct.VEC_ipa_edge_args_t_gc*, %struct.VEC_ipa_edge_args_t_gc** @ipa_edge_args_vector, align 8, !dbg !3437
  %tobool4 = icmp ne %struct.VEC_ipa_edge_args_t_gc* %2, null, !dbg !3437
  br i1 %tobool4, label %cond.false, label %cond.true, !dbg !3437

cond.true:                                        ; preds = %if.end3
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i32 1167, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !3437
  br label %cond.end, !dbg !3437

cond.false:                                       ; preds = %if.end3
  br label %cond.end, !dbg !3437

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !3437
  %3 = load %struct.cgraph_edge*, %struct.cgraph_edge** %cs.addr, align 8, !dbg !3438
  %4 = load %struct.cgraph_edge*, %struct.cgraph_edge** %cs.addr, align 8, !dbg !3439
  %callee = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %4, i32 0, i32 2, !dbg !3440
  %5 = load %struct.cgraph_node*, %struct.cgraph_node** %callee, align 8, !dbg !3440
  %6 = load %struct.VEC_cgraph_edge_p_heap**, %struct.VEC_cgraph_edge_p_heap*** %new_edges.addr, align 8, !dbg !3441
  %call = call zeroext i8 @propagate_info_to_inlined_callees(%struct.cgraph_edge* %3, %struct.cgraph_node* %5, %struct.VEC_cgraph_edge_p_heap** %6), !dbg !3442
  store i8 %call, i8* %retval, align 1, !dbg !3443
  br label %return, !dbg !3443

return:                                           ; preds = %cond.end, %if.then2, %if.then
  %7 = load i8, i8* %retval, align 1, !dbg !3444
  ret i8 %7, !dbg !3444
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @propagate_info_to_inlined_callees(%struct.cgraph_edge* %cs, %struct.cgraph_node* %node, %struct.VEC_cgraph_edge_p_heap** %new_edges) #0 !dbg !3445 {
entry:
  %cs.addr = alloca %struct.cgraph_edge*, align 8
  %node.addr = alloca %struct.cgraph_node*, align 8
  %new_edges.addr = alloca %struct.VEC_cgraph_edge_p_heap**, align 8
  %e = alloca %struct.cgraph_edge*, align 8
  %res = alloca i8, align 1
  store %struct.cgraph_edge* %cs, %struct.cgraph_edge** %cs.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cgraph_edge** %cs.addr, metadata !3448, metadata !DIExpression()), !dbg !3449
  store %struct.cgraph_node* %node, %struct.cgraph_node** %node.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %node.addr, metadata !3450, metadata !DIExpression()), !dbg !3451
  store %struct.VEC_cgraph_edge_p_heap** %new_edges, %struct.VEC_cgraph_edge_p_heap*** %new_edges.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_cgraph_edge_p_heap*** %new_edges.addr, metadata !3452, metadata !DIExpression()), !dbg !3453
  call void @llvm.dbg.declare(metadata %struct.cgraph_edge** %e, metadata !3454, metadata !DIExpression()), !dbg !3455
  call void @llvm.dbg.declare(metadata i8* %res, metadata !3456, metadata !DIExpression()), !dbg !3457
  %0 = load %struct.cgraph_edge*, %struct.cgraph_edge** %cs.addr, align 8, !dbg !3458
  %1 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !3459
  %2 = load %struct.VEC_cgraph_edge_p_heap**, %struct.VEC_cgraph_edge_p_heap*** %new_edges.addr, align 8, !dbg !3460
  %call = call zeroext i8 @update_call_notes_after_inlining(%struct.cgraph_edge* %0, %struct.cgraph_node* %1, %struct.VEC_cgraph_edge_p_heap** %2), !dbg !3461
  store i8 %call, i8* %res, align 1, !dbg !3462
  %3 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !3463
  %callees = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %3, i32 0, i32 1, !dbg !3465
  %4 = load %struct.cgraph_edge*, %struct.cgraph_edge** %callees, align 8, !dbg !3465
  store %struct.cgraph_edge* %4, %struct.cgraph_edge** %e, align 8, !dbg !3466
  br label %for.cond, !dbg !3467

for.cond:                                         ; preds = %for.inc, %entry
  %5 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !3468
  %tobool = icmp ne %struct.cgraph_edge* %5, null, !dbg !3470
  br i1 %tobool, label %for.body, label %for.end, !dbg !3470

for.body:                                         ; preds = %for.cond
  %6 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !3471
  %inline_failed = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %6, i32 0, i32 9, !dbg !3473
  %7 = load i32, i32* %inline_failed, align 8, !dbg !3473
  %tobool1 = icmp ne i32 %7, 0, !dbg !3471
  br i1 %tobool1, label %if.else, label %if.then, !dbg !3474

if.then:                                          ; preds = %for.body
  %8 = load %struct.cgraph_edge*, %struct.cgraph_edge** %cs.addr, align 8, !dbg !3475
  %9 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !3476
  %callee = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %9, i32 0, i32 2, !dbg !3477
  %10 = load %struct.cgraph_node*, %struct.cgraph_node** %callee, align 8, !dbg !3477
  %11 = load %struct.VEC_cgraph_edge_p_heap**, %struct.VEC_cgraph_edge_p_heap*** %new_edges.addr, align 8, !dbg !3478
  %call2 = call zeroext i8 @propagate_info_to_inlined_callees(%struct.cgraph_edge* %8, %struct.cgraph_node* %10, %struct.VEC_cgraph_edge_p_heap** %11), !dbg !3479
  %conv = zext i8 %call2 to i32, !dbg !3479
  %12 = load i8, i8* %res, align 1, !dbg !3480
  %conv3 = zext i8 %12 to i32, !dbg !3480
  %or = or i32 %conv3, %conv, !dbg !3480
  %conv4 = trunc i32 %or to i8, !dbg !3480
  store i8 %conv4, i8* %res, align 1, !dbg !3480
  br label %if.end, !dbg !3481

if.else:                                          ; preds = %for.body
  %13 = load %struct.cgraph_edge*, %struct.cgraph_edge** %cs.addr, align 8, !dbg !3482
  %14 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !3483
  call void @update_jump_functions_after_inlining(%struct.cgraph_edge* %13, %struct.cgraph_edge* %14), !dbg !3484
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  br label %for.inc, !dbg !3473

for.inc:                                          ; preds = %if.end
  %15 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !3485
  %next_callee = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %15, i32 0, i32 6, !dbg !3486
  %16 = load %struct.cgraph_edge*, %struct.cgraph_edge** %next_callee, align 8, !dbg !3486
  store %struct.cgraph_edge* %16, %struct.cgraph_edge** %e, align 8, !dbg !3487
  br label %for.cond, !dbg !3488, !llvm.loop !3489

for.end:                                          ; preds = %for.cond
  %17 = load i8, i8* %res, align 1, !dbg !3491
  ret i8 %17, !dbg !3492
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @ipa_free_edge_args_substructures(%struct.ipa_edge_args* %args) #0 !dbg !3493 {
entry:
  %args.addr = alloca %struct.ipa_edge_args*, align 8
  store %struct.ipa_edge_args* %args, %struct.ipa_edge_args** %args.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ipa_edge_args** %args.addr, metadata !3496, metadata !DIExpression()), !dbg !3497
  %0 = load %struct.ipa_edge_args*, %struct.ipa_edge_args** %args.addr, align 8, !dbg !3498
  %jump_functions = getelementptr inbounds %struct.ipa_edge_args, %struct.ipa_edge_args* %0, i32 0, i32 1, !dbg !3500
  %1 = load %struct.ipa_jump_func*, %struct.ipa_jump_func** %jump_functions, align 8, !dbg !3500
  %tobool = icmp ne %struct.ipa_jump_func* %1, null, !dbg !3498
  br i1 %tobool, label %if.then, label %if.end, !dbg !3501

if.then:                                          ; preds = %entry
  %2 = load %struct.ipa_edge_args*, %struct.ipa_edge_args** %args.addr, align 8, !dbg !3502
  %jump_functions1 = getelementptr inbounds %struct.ipa_edge_args, %struct.ipa_edge_args* %2, i32 0, i32 1, !dbg !3503
  %3 = load %struct.ipa_jump_func*, %struct.ipa_jump_func** %jump_functions1, align 8, !dbg !3503
  %4 = bitcast %struct.ipa_jump_func* %3 to i8*, !dbg !3502
  call void @ggc_free(i8* %4), !dbg !3504
  br label %if.end, !dbg !3504

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.ipa_edge_args*, %struct.ipa_edge_args** %args.addr, align 8, !dbg !3505
  %6 = bitcast %struct.ipa_edge_args* %5 to i8*, !dbg !3506
  call void @llvm.memset.p0i8.i64(i8* align 8 %6, i8 0, i64 16, i1 false), !dbg !3506
  ret void, !dbg !3507
}

declare dso_local void @ggc_free(i8*) #2

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

; Function Attrs: noinline nounwind uwtable
define dso_local void @ipa_free_all_edge_args() #0 !dbg !3508 {
entry:
  %i = alloca i32, align 4
  %args = alloca %struct.ipa_edge_args*, align 8
  call void @llvm.dbg.declare(metadata i32* %i, metadata !3509, metadata !DIExpression()), !dbg !3510
  call void @llvm.dbg.declare(metadata %struct.ipa_edge_args** %args, metadata !3511, metadata !DIExpression()), !dbg !3512
  store i32 0, i32* %i, align 4, !dbg !3513
  br label %for.cond, !dbg !3515

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load %struct.VEC_ipa_edge_args_t_gc*, %struct.VEC_ipa_edge_args_t_gc** @ipa_edge_args_vector, align 8, !dbg !3516
  %tobool = icmp ne %struct.VEC_ipa_edge_args_t_gc* %0, null, !dbg !3516
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !3516

cond.true:                                        ; preds = %for.cond
  %1 = load %struct.VEC_ipa_edge_args_t_gc*, %struct.VEC_ipa_edge_args_t_gc** @ipa_edge_args_vector, align 8, !dbg !3516
  %base = getelementptr inbounds %struct.VEC_ipa_edge_args_t_gc, %struct.VEC_ipa_edge_args_t_gc* %1, i32 0, i32 0, !dbg !3516
  br label %cond.end, !dbg !3516

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !3516

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_ipa_edge_args_t_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !3516
  %2 = load i32, i32* %i, align 4, !dbg !3516
  %call = call i32 @VEC_ipa_edge_args_t_base_iterate(%struct.VEC_ipa_edge_args_t_base* %cond, i32 %2, %struct.ipa_edge_args** %args), !dbg !3516
  %tobool1 = icmp ne i32 %call, 0, !dbg !3518
  br i1 %tobool1, label %for.body, label %for.end, !dbg !3518

for.body:                                         ; preds = %cond.end
  %3 = load %struct.ipa_edge_args*, %struct.ipa_edge_args** %args, align 8, !dbg !3519
  call void @ipa_free_edge_args_substructures(%struct.ipa_edge_args* %3), !dbg !3520
  br label %for.inc, !dbg !3520

for.inc:                                          ; preds = %for.body
  %4 = load i32, i32* %i, align 4, !dbg !3521
  %inc = add nsw i32 %4, 1, !dbg !3521
  store i32 %inc, i32* %i, align 4, !dbg !3521
  br label %for.cond, !dbg !3522, !llvm.loop !3523

for.end:                                          ; preds = %cond.end
  call void @VEC_ipa_edge_args_t_gc_free(%struct.VEC_ipa_edge_args_t_gc** @ipa_edge_args_vector), !dbg !3525
  store %struct.VEC_ipa_edge_args_t_gc* null, %struct.VEC_ipa_edge_args_t_gc** @ipa_edge_args_vector, align 8, !dbg !3526
  ret void, !dbg !3527
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_ipa_edge_args_t_base_iterate(%struct.VEC_ipa_edge_args_t_base* %vec_, i32 %ix_, %struct.ipa_edge_args** %ptr) #0 !dbg !3528 {
entry:
  %retval = alloca i32, align 4
  %vec_.addr = alloca %struct.VEC_ipa_edge_args_t_base*, align 8
  %ix_.addr = alloca i32, align 4
  %ptr.addr = alloca %struct.ipa_edge_args**, align 8
  store %struct.VEC_ipa_edge_args_t_base* %vec_, %struct.VEC_ipa_edge_args_t_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_ipa_edge_args_t_base** %vec_.addr, metadata !3532, metadata !DIExpression()), !dbg !3533
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !3534, metadata !DIExpression()), !dbg !3533
  store %struct.ipa_edge_args** %ptr, %struct.ipa_edge_args*** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ipa_edge_args*** %ptr.addr, metadata !3535, metadata !DIExpression()), !dbg !3533
  %0 = load %struct.VEC_ipa_edge_args_t_base*, %struct.VEC_ipa_edge_args_t_base** %vec_.addr, align 8, !dbg !3536
  %tobool = icmp ne %struct.VEC_ipa_edge_args_t_base* %0, null, !dbg !3536
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !3536

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !3536
  %2 = load %struct.VEC_ipa_edge_args_t_base*, %struct.VEC_ipa_edge_args_t_base** %vec_.addr, align 8, !dbg !3536
  %num = getelementptr inbounds %struct.VEC_ipa_edge_args_t_base, %struct.VEC_ipa_edge_args_t_base* %2, i32 0, i32 0, !dbg !3536
  %3 = load i32, i32* %num, align 8, !dbg !3536
  %cmp = icmp ult i32 %1, %3, !dbg !3536
  br i1 %cmp, label %if.then, label %if.else, !dbg !3533

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct.VEC_ipa_edge_args_t_base*, %struct.VEC_ipa_edge_args_t_base** %vec_.addr, align 8, !dbg !3538
  %vec = getelementptr inbounds %struct.VEC_ipa_edge_args_t_base, %struct.VEC_ipa_edge_args_t_base* %4, i32 0, i32 2, !dbg !3538
  %5 = load i32, i32* %ix_.addr, align 4, !dbg !3538
  %idxprom = zext i32 %5 to i64, !dbg !3538
  %arrayidx = getelementptr inbounds [1 x %struct.ipa_edge_args], [1 x %struct.ipa_edge_args]* %vec, i64 0, i64 %idxprom, !dbg !3538
  %6 = load %struct.ipa_edge_args**, %struct.ipa_edge_args*** %ptr.addr, align 8, !dbg !3538
  store %struct.ipa_edge_args* %arrayidx, %struct.ipa_edge_args** %6, align 8, !dbg !3538
  store i32 1, i32* %retval, align 4, !dbg !3538
  br label %return, !dbg !3538

if.else:                                          ; preds = %land.lhs.true, %entry
  %7 = load %struct.ipa_edge_args**, %struct.ipa_edge_args*** %ptr.addr, align 8, !dbg !3540
  store %struct.ipa_edge_args* null, %struct.ipa_edge_args** %7, align 8, !dbg !3540
  store i32 0, i32* %retval, align 4, !dbg !3540
  br label %return, !dbg !3540

return:                                           ; preds = %if.else, %if.then
  %8 = load i32, i32* %retval, align 4, !dbg !3533
  ret i32 %8, !dbg !3533
}

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_ipa_edge_args_t_gc_free(%struct.VEC_ipa_edge_args_t_gc** %vec_) #0 !dbg !3542 {
entry:
  %vec_.addr = alloca %struct.VEC_ipa_edge_args_t_gc**, align 8
  store %struct.VEC_ipa_edge_args_t_gc** %vec_, %struct.VEC_ipa_edge_args_t_gc*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_ipa_edge_args_t_gc*** %vec_.addr, metadata !3545, metadata !DIExpression()), !dbg !3546
  %0 = load %struct.VEC_ipa_edge_args_t_gc**, %struct.VEC_ipa_edge_args_t_gc*** %vec_.addr, align 8, !dbg !3547
  %1 = load %struct.VEC_ipa_edge_args_t_gc*, %struct.VEC_ipa_edge_args_t_gc** %0, align 8, !dbg !3547
  %tobool = icmp ne %struct.VEC_ipa_edge_args_t_gc* %1, null, !dbg !3547
  br i1 %tobool, label %if.then, label %if.end, !dbg !3546

if.then:                                          ; preds = %entry
  %2 = load %struct.VEC_ipa_edge_args_t_gc**, %struct.VEC_ipa_edge_args_t_gc*** %vec_.addr, align 8, !dbg !3547
  %3 = load %struct.VEC_ipa_edge_args_t_gc*, %struct.VEC_ipa_edge_args_t_gc** %2, align 8, !dbg !3547
  %4 = bitcast %struct.VEC_ipa_edge_args_t_gc* %3 to i8*, !dbg !3547
  call void @ggc_free(i8* %4), !dbg !3547
  br label %if.end, !dbg !3547

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.VEC_ipa_edge_args_t_gc**, %struct.VEC_ipa_edge_args_t_gc*** %vec_.addr, align 8, !dbg !3546
  store %struct.VEC_ipa_edge_args_t_gc* null, %struct.VEC_ipa_edge_args_t_gc** %5, align 8, !dbg !3546
  ret void, !dbg !3546
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @ipa_free_node_params_substructures(%struct.ipa_node_params* %info) #0 !dbg !3549 {
entry:
  %info.addr = alloca %struct.ipa_node_params*, align 8
  %note = alloca %struct.ipa_param_call_note*, align 8
  store %struct.ipa_node_params* %info, %struct.ipa_node_params** %info.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ipa_node_params** %info.addr, metadata !3552, metadata !DIExpression()), !dbg !3553
  %0 = load %struct.ipa_node_params*, %struct.ipa_node_params** %info.addr, align 8, !dbg !3554
  %params = getelementptr inbounds %struct.ipa_node_params, %struct.ipa_node_params* %0, i32 0, i32 1, !dbg !3556
  %1 = load %struct.ipa_param_descriptor*, %struct.ipa_param_descriptor** %params, align 8, !dbg !3556
  %tobool = icmp ne %struct.ipa_param_descriptor* %1, null, !dbg !3554
  br i1 %tobool, label %if.then, label %if.end, !dbg !3557

if.then:                                          ; preds = %entry
  %2 = load %struct.ipa_node_params*, %struct.ipa_node_params** %info.addr, align 8, !dbg !3558
  %params1 = getelementptr inbounds %struct.ipa_node_params, %struct.ipa_node_params* %2, i32 0, i32 1, !dbg !3559
  %3 = load %struct.ipa_param_descriptor*, %struct.ipa_param_descriptor** %params1, align 8, !dbg !3559
  %4 = bitcast %struct.ipa_param_descriptor* %3 to i8*, !dbg !3558
  call void @free(i8* %4), !dbg !3560
  br label %if.end, !dbg !3560

if.end:                                           ; preds = %if.then, %entry
  br label %while.cond, !dbg !3561

while.cond:                                       ; preds = %while.body, %if.end
  %5 = load %struct.ipa_node_params*, %struct.ipa_node_params** %info.addr, align 8, !dbg !3562
  %param_calls = getelementptr inbounds %struct.ipa_node_params, %struct.ipa_node_params* %5, i32 0, i32 2, !dbg !3563
  %6 = load %struct.ipa_param_call_note*, %struct.ipa_param_call_note** %param_calls, align 8, !dbg !3563
  %tobool2 = icmp ne %struct.ipa_param_call_note* %6, null, !dbg !3561
  br i1 %tobool2, label %while.body, label %while.end, !dbg !3561

while.body:                                       ; preds = %while.cond
  call void @llvm.dbg.declare(metadata %struct.ipa_param_call_note** %note, metadata !3564, metadata !DIExpression()), !dbg !3566
  %7 = load %struct.ipa_node_params*, %struct.ipa_node_params** %info.addr, align 8, !dbg !3567
  %param_calls3 = getelementptr inbounds %struct.ipa_node_params, %struct.ipa_node_params* %7, i32 0, i32 2, !dbg !3568
  %8 = load %struct.ipa_param_call_note*, %struct.ipa_param_call_note** %param_calls3, align 8, !dbg !3568
  store %struct.ipa_param_call_note* %8, %struct.ipa_param_call_note** %note, align 8, !dbg !3566
  %9 = load %struct.ipa_param_call_note*, %struct.ipa_param_call_note** %note, align 8, !dbg !3569
  %next = getelementptr inbounds %struct.ipa_param_call_note, %struct.ipa_param_call_note* %9, i32 0, i32 1, !dbg !3570
  %10 = load %struct.ipa_param_call_note*, %struct.ipa_param_call_note** %next, align 8, !dbg !3570
  %11 = load %struct.ipa_node_params*, %struct.ipa_node_params** %info.addr, align 8, !dbg !3571
  %param_calls4 = getelementptr inbounds %struct.ipa_node_params, %struct.ipa_node_params* %11, i32 0, i32 2, !dbg !3572
  store %struct.ipa_param_call_note* %10, %struct.ipa_param_call_note** %param_calls4, align 8, !dbg !3573
  %12 = load %struct.ipa_param_call_note*, %struct.ipa_param_call_note** %note, align 8, !dbg !3574
  %13 = bitcast %struct.ipa_param_call_note* %12 to i8*, !dbg !3574
  call void @free(i8* %13), !dbg !3575
  br label %while.cond, !dbg !3561, !llvm.loop !3576

while.end:                                        ; preds = %while.cond
  %14 = load %struct.ipa_node_params*, %struct.ipa_node_params** %info.addr, align 8, !dbg !3578
  %15 = bitcast %struct.ipa_node_params* %14 to i8*, !dbg !3579
  call void @llvm.memset.p0i8.i64(i8* align 8 %15, i8 0, i64 48, i1 false), !dbg !3579
  ret void, !dbg !3580
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @ipa_free_all_node_params() #0 !dbg !3581 {
entry:
  %i = alloca i32, align 4
  %info = alloca %struct.ipa_node_params*, align 8
  call void @llvm.dbg.declare(metadata i32* %i, metadata !3582, metadata !DIExpression()), !dbg !3583
  call void @llvm.dbg.declare(metadata %struct.ipa_node_params** %info, metadata !3584, metadata !DIExpression()), !dbg !3585
  store i32 0, i32* %i, align 4, !dbg !3586
  br label %for.cond, !dbg !3588

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load %struct.VEC_ipa_node_params_t_heap*, %struct.VEC_ipa_node_params_t_heap** @ipa_node_params_vector, align 8, !dbg !3589
  %tobool = icmp ne %struct.VEC_ipa_node_params_t_heap* %0, null, !dbg !3589
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !3589

cond.true:                                        ; preds = %for.cond
  %1 = load %struct.VEC_ipa_node_params_t_heap*, %struct.VEC_ipa_node_params_t_heap** @ipa_node_params_vector, align 8, !dbg !3589
  %base = getelementptr inbounds %struct.VEC_ipa_node_params_t_heap, %struct.VEC_ipa_node_params_t_heap* %1, i32 0, i32 0, !dbg !3589
  br label %cond.end, !dbg !3589

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !3589

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_ipa_node_params_t_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !3589
  %2 = load i32, i32* %i, align 4, !dbg !3589
  %call = call i32 @VEC_ipa_node_params_t_base_iterate(%struct.VEC_ipa_node_params_t_base* %cond, i32 %2, %struct.ipa_node_params** %info), !dbg !3589
  %tobool1 = icmp ne i32 %call, 0, !dbg !3591
  br i1 %tobool1, label %for.body, label %for.end, !dbg !3591

for.body:                                         ; preds = %cond.end
  %3 = load %struct.ipa_node_params*, %struct.ipa_node_params** %info, align 8, !dbg !3592
  call void @ipa_free_node_params_substructures(%struct.ipa_node_params* %3), !dbg !3593
  br label %for.inc, !dbg !3593

for.inc:                                          ; preds = %for.body
  %4 = load i32, i32* %i, align 4, !dbg !3594
  %inc = add nsw i32 %4, 1, !dbg !3594
  store i32 %inc, i32* %i, align 4, !dbg !3594
  br label %for.cond, !dbg !3595, !llvm.loop !3596

for.end:                                          ; preds = %cond.end
  call void @VEC_ipa_node_params_t_heap_free(%struct.VEC_ipa_node_params_t_heap** @ipa_node_params_vector), !dbg !3598
  store %struct.VEC_ipa_node_params_t_heap* null, %struct.VEC_ipa_node_params_t_heap** @ipa_node_params_vector, align 8, !dbg !3599
  ret void, !dbg !3600
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_ipa_node_params_t_base_iterate(%struct.VEC_ipa_node_params_t_base* %vec_, i32 %ix_, %struct.ipa_node_params** %ptr) #0 !dbg !3601 {
entry:
  %retval = alloca i32, align 4
  %vec_.addr = alloca %struct.VEC_ipa_node_params_t_base*, align 8
  %ix_.addr = alloca i32, align 4
  %ptr.addr = alloca %struct.ipa_node_params**, align 8
  store %struct.VEC_ipa_node_params_t_base* %vec_, %struct.VEC_ipa_node_params_t_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_ipa_node_params_t_base** %vec_.addr, metadata !3605, metadata !DIExpression()), !dbg !3606
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !3607, metadata !DIExpression()), !dbg !3606
  store %struct.ipa_node_params** %ptr, %struct.ipa_node_params*** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ipa_node_params*** %ptr.addr, metadata !3608, metadata !DIExpression()), !dbg !3606
  %0 = load %struct.VEC_ipa_node_params_t_base*, %struct.VEC_ipa_node_params_t_base** %vec_.addr, align 8, !dbg !3609
  %tobool = icmp ne %struct.VEC_ipa_node_params_t_base* %0, null, !dbg !3609
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !3609

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !3609
  %2 = load %struct.VEC_ipa_node_params_t_base*, %struct.VEC_ipa_node_params_t_base** %vec_.addr, align 8, !dbg !3609
  %num = getelementptr inbounds %struct.VEC_ipa_node_params_t_base, %struct.VEC_ipa_node_params_t_base* %2, i32 0, i32 0, !dbg !3609
  %3 = load i32, i32* %num, align 8, !dbg !3609
  %cmp = icmp ult i32 %1, %3, !dbg !3609
  br i1 %cmp, label %if.then, label %if.else, !dbg !3606

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct.VEC_ipa_node_params_t_base*, %struct.VEC_ipa_node_params_t_base** %vec_.addr, align 8, !dbg !3611
  %vec = getelementptr inbounds %struct.VEC_ipa_node_params_t_base, %struct.VEC_ipa_node_params_t_base* %4, i32 0, i32 2, !dbg !3611
  %5 = load i32, i32* %ix_.addr, align 4, !dbg !3611
  %idxprom = zext i32 %5 to i64, !dbg !3611
  %arrayidx = getelementptr inbounds [1 x %struct.ipa_node_params], [1 x %struct.ipa_node_params]* %vec, i64 0, i64 %idxprom, !dbg !3611
  %6 = load %struct.ipa_node_params**, %struct.ipa_node_params*** %ptr.addr, align 8, !dbg !3611
  store %struct.ipa_node_params* %arrayidx, %struct.ipa_node_params** %6, align 8, !dbg !3611
  store i32 1, i32* %retval, align 4, !dbg !3611
  br label %return, !dbg !3611

if.else:                                          ; preds = %land.lhs.true, %entry
  %7 = load %struct.ipa_node_params**, %struct.ipa_node_params*** %ptr.addr, align 8, !dbg !3613
  store %struct.ipa_node_params* null, %struct.ipa_node_params** %7, align 8, !dbg !3613
  store i32 0, i32* %retval, align 4, !dbg !3613
  br label %return, !dbg !3613

return:                                           ; preds = %if.else, %if.then
  %8 = load i32, i32* %retval, align 4, !dbg !3606
  ret i32 %8, !dbg !3606
}

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_ipa_node_params_t_heap_free(%struct.VEC_ipa_node_params_t_heap** %vec_) #0 !dbg !3615 {
entry:
  %vec_.addr = alloca %struct.VEC_ipa_node_params_t_heap**, align 8
  store %struct.VEC_ipa_node_params_t_heap** %vec_, %struct.VEC_ipa_node_params_t_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_ipa_node_params_t_heap*** %vec_.addr, metadata !3619, metadata !DIExpression()), !dbg !3620
  %0 = load %struct.VEC_ipa_node_params_t_heap**, %struct.VEC_ipa_node_params_t_heap*** %vec_.addr, align 8, !dbg !3621
  %1 = load %struct.VEC_ipa_node_params_t_heap*, %struct.VEC_ipa_node_params_t_heap** %0, align 8, !dbg !3621
  %tobool = icmp ne %struct.VEC_ipa_node_params_t_heap* %1, null, !dbg !3621
  br i1 %tobool, label %if.then, label %if.end, !dbg !3620

if.then:                                          ; preds = %entry
  %2 = load %struct.VEC_ipa_node_params_t_heap**, %struct.VEC_ipa_node_params_t_heap*** %vec_.addr, align 8, !dbg !3621
  %3 = load %struct.VEC_ipa_node_params_t_heap*, %struct.VEC_ipa_node_params_t_heap** %2, align 8, !dbg !3621
  %4 = bitcast %struct.VEC_ipa_node_params_t_heap* %3 to i8*, !dbg !3621
  call void @free(i8* %4), !dbg !3621
  br label %if.end, !dbg !3621

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.VEC_ipa_node_params_t_heap**, %struct.VEC_ipa_node_params_t_heap*** %vec_.addr, align 8, !dbg !3620
  store %struct.VEC_ipa_node_params_t_heap* null, %struct.VEC_ipa_node_params_t_heap** %5, align 8, !dbg !3620
  ret void, !dbg !3620
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @ipa_register_cgraph_hooks() #0 !dbg !3623 {
entry:
  %0 = load %struct.cgraph_edge_hook_list*, %struct.cgraph_edge_hook_list** @edge_removal_hook_holder, align 8, !dbg !3624
  %tobool = icmp ne %struct.cgraph_edge_hook_list* %0, null, !dbg !3624
  br i1 %tobool, label %if.end, label %if.then, !dbg !3626

if.then:                                          ; preds = %entry
  %call = call %struct.cgraph_edge_hook_list* @cgraph_add_edge_removal_hook(void (%struct.cgraph_edge*, i8*)* @ipa_edge_removal_hook, i8* null), !dbg !3627
  store %struct.cgraph_edge_hook_list* %call, %struct.cgraph_edge_hook_list** @edge_removal_hook_holder, align 8, !dbg !3628
  br label %if.end, !dbg !3629

if.end:                                           ; preds = %if.then, %entry
  %1 = load %struct.cgraph_node_hook_list*, %struct.cgraph_node_hook_list** @node_removal_hook_holder, align 8, !dbg !3630
  %tobool1 = icmp ne %struct.cgraph_node_hook_list* %1, null, !dbg !3630
  br i1 %tobool1, label %if.end4, label %if.then2, !dbg !3632

if.then2:                                         ; preds = %if.end
  %call3 = call %struct.cgraph_node_hook_list* @cgraph_add_node_removal_hook(void (%struct.cgraph_node*, i8*)* @ipa_node_removal_hook, i8* null), !dbg !3633
  store %struct.cgraph_node_hook_list* %call3, %struct.cgraph_node_hook_list** @node_removal_hook_holder, align 8, !dbg !3634
  br label %if.end4, !dbg !3635

if.end4:                                          ; preds = %if.then2, %if.end
  %2 = load %struct.cgraph_2edge_hook_list*, %struct.cgraph_2edge_hook_list** @edge_duplication_hook_holder, align 8, !dbg !3636
  %tobool5 = icmp ne %struct.cgraph_2edge_hook_list* %2, null, !dbg !3636
  br i1 %tobool5, label %if.end8, label %if.then6, !dbg !3638

if.then6:                                         ; preds = %if.end4
  %call7 = call %struct.cgraph_2edge_hook_list* @cgraph_add_edge_duplication_hook(void (%struct.cgraph_edge*, %struct.cgraph_edge*, i8*)* @ipa_edge_duplication_hook, i8* null), !dbg !3639
  store %struct.cgraph_2edge_hook_list* %call7, %struct.cgraph_2edge_hook_list** @edge_duplication_hook_holder, align 8, !dbg !3640
  br label %if.end8, !dbg !3641

if.end8:                                          ; preds = %if.then6, %if.end4
  %3 = load %struct.cgraph_2node_hook_list*, %struct.cgraph_2node_hook_list** @node_duplication_hook_holder, align 8, !dbg !3642
  %tobool9 = icmp ne %struct.cgraph_2node_hook_list* %3, null, !dbg !3642
  br i1 %tobool9, label %if.end12, label %if.then10, !dbg !3644

if.then10:                                        ; preds = %if.end8
  %call11 = call %struct.cgraph_2node_hook_list* @cgraph_add_node_duplication_hook(void (%struct.cgraph_node*, %struct.cgraph_node*, i8*)* @ipa_node_duplication_hook, i8* null), !dbg !3645
  store %struct.cgraph_2node_hook_list* %call11, %struct.cgraph_2node_hook_list** @node_duplication_hook_holder, align 8, !dbg !3646
  br label %if.end12, !dbg !3647

if.end12:                                         ; preds = %if.then10, %if.end8
  ret void, !dbg !3648
}

declare dso_local %struct.cgraph_edge_hook_list* @cgraph_add_edge_removal_hook(void (%struct.cgraph_edge*, i8*)*, i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @ipa_edge_removal_hook(%struct.cgraph_edge* %cs, i8* %data) #0 !dbg !3649 {
entry:
  %cs.addr = alloca %struct.cgraph_edge*, align 8
  %data.addr = alloca i8*, align 8
  store %struct.cgraph_edge* %cs, %struct.cgraph_edge** %cs.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cgraph_edge** %cs.addr, metadata !3652, metadata !DIExpression()), !dbg !3653
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !3654, metadata !DIExpression()), !dbg !3655
  %0 = load %struct.VEC_ipa_edge_args_t_gc*, %struct.VEC_ipa_edge_args_t_gc** @ipa_edge_args_vector, align 8, !dbg !3656
  %tobool = icmp ne %struct.VEC_ipa_edge_args_t_gc* %0, null, !dbg !3656
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !3656

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_ipa_edge_args_t_gc*, %struct.VEC_ipa_edge_args_t_gc** @ipa_edge_args_vector, align 8, !dbg !3656
  %base = getelementptr inbounds %struct.VEC_ipa_edge_args_t_gc, %struct.VEC_ipa_edge_args_t_gc* %1, i32 0, i32 0, !dbg !3656
  br label %cond.end, !dbg !3656

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !3656

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_ipa_edge_args_t_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !3656
  %call = call i32 @VEC_ipa_edge_args_t_base_length(%struct.VEC_ipa_edge_args_t_base* %cond), !dbg !3656
  %2 = load %struct.cgraph_edge*, %struct.cgraph_edge** %cs.addr, align 8, !dbg !3658
  %uid = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %2, i32 0, i32 12, !dbg !3659
  %3 = load i32, i32* %uid, align 4, !dbg !3659
  %cmp = icmp ule i32 %call, %3, !dbg !3660
  br i1 %cmp, label %if.then, label %if.end, !dbg !3661

if.then:                                          ; preds = %cond.end
  br label %return, !dbg !3662

if.end:                                           ; preds = %cond.end
  %4 = load %struct.VEC_ipa_edge_args_t_gc*, %struct.VEC_ipa_edge_args_t_gc** @ipa_edge_args_vector, align 8, !dbg !3663
  %tobool1 = icmp ne %struct.VEC_ipa_edge_args_t_gc* %4, null, !dbg !3663
  br i1 %tobool1, label %cond.true2, label %cond.false4, !dbg !3663

cond.true2:                                       ; preds = %if.end
  %5 = load %struct.VEC_ipa_edge_args_t_gc*, %struct.VEC_ipa_edge_args_t_gc** @ipa_edge_args_vector, align 8, !dbg !3663
  %base3 = getelementptr inbounds %struct.VEC_ipa_edge_args_t_gc, %struct.VEC_ipa_edge_args_t_gc* %5, i32 0, i32 0, !dbg !3663
  br label %cond.end5, !dbg !3663

cond.false4:                                      ; preds = %if.end
  br label %cond.end5, !dbg !3663

cond.end5:                                        ; preds = %cond.false4, %cond.true2
  %cond6 = phi %struct.VEC_ipa_edge_args_t_base* [ %base3, %cond.true2 ], [ null, %cond.false4 ], !dbg !3663
  %6 = load %struct.cgraph_edge*, %struct.cgraph_edge** %cs.addr, align 8, !dbg !3663
  %uid7 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %6, i32 0, i32 12, !dbg !3663
  %7 = load i32, i32* %uid7, align 4, !dbg !3663
  %call8 = call %struct.ipa_edge_args* @VEC_ipa_edge_args_t_base_index(%struct.VEC_ipa_edge_args_t_base* %cond6, i32 %7), !dbg !3663
  call void @ipa_free_edge_args_substructures(%struct.ipa_edge_args* %call8), !dbg !3664
  br label %return, !dbg !3665

return:                                           ; preds = %cond.end5, %if.then
  ret void, !dbg !3665
}

declare dso_local %struct.cgraph_node_hook_list* @cgraph_add_node_removal_hook(void (%struct.cgraph_node*, i8*)*, i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @ipa_node_removal_hook(%struct.cgraph_node* %node, i8* %data) #0 !dbg !3666 {
entry:
  %node.addr = alloca %struct.cgraph_node*, align 8
  %data.addr = alloca i8*, align 8
  store %struct.cgraph_node* %node, %struct.cgraph_node** %node.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %node.addr, metadata !3669, metadata !DIExpression()), !dbg !3670
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !3671, metadata !DIExpression()), !dbg !3672
  %0 = load %struct.VEC_ipa_node_params_t_heap*, %struct.VEC_ipa_node_params_t_heap** @ipa_node_params_vector, align 8, !dbg !3673
  %tobool = icmp ne %struct.VEC_ipa_node_params_t_heap* %0, null, !dbg !3673
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !3673

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_ipa_node_params_t_heap*, %struct.VEC_ipa_node_params_t_heap** @ipa_node_params_vector, align 8, !dbg !3673
  %base = getelementptr inbounds %struct.VEC_ipa_node_params_t_heap, %struct.VEC_ipa_node_params_t_heap* %1, i32 0, i32 0, !dbg !3673
  br label %cond.end, !dbg !3673

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !3673

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_ipa_node_params_t_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !3673
  %2 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !3673
  %uid = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %2, i32 0, i32 24, !dbg !3673
  %3 = load i32, i32* %uid, align 8, !dbg !3673
  %call = call %struct.ipa_node_params* @VEC_ipa_node_params_t_base_index(%struct.VEC_ipa_node_params_t_base* %cond, i32 %3), !dbg !3673
  call void @ipa_free_node_params_substructures(%struct.ipa_node_params* %call), !dbg !3674
  ret void, !dbg !3675
}

declare dso_local %struct.cgraph_2edge_hook_list* @cgraph_add_edge_duplication_hook(void (%struct.cgraph_edge*, %struct.cgraph_edge*, i8*)*, i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @ipa_edge_duplication_hook(%struct.cgraph_edge* %src, %struct.cgraph_edge* %dst, i8* %data) #0 !dbg !3676 {
entry:
  %src.addr = alloca %struct.cgraph_edge*, align 8
  %dst.addr = alloca %struct.cgraph_edge*, align 8
  %data.addr = alloca i8*, align 8
  %old_args = alloca %struct.ipa_edge_args*, align 8
  %new_args = alloca %struct.ipa_edge_args*, align 8
  %arg_count = alloca i32, align 4
  store %struct.cgraph_edge* %src, %struct.cgraph_edge** %src.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cgraph_edge** %src.addr, metadata !3679, metadata !DIExpression()), !dbg !3680
  store %struct.cgraph_edge* %dst, %struct.cgraph_edge** %dst.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cgraph_edge** %dst.addr, metadata !3681, metadata !DIExpression()), !dbg !3682
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !3683, metadata !DIExpression()), !dbg !3684
  call void @llvm.dbg.declare(metadata %struct.ipa_edge_args** %old_args, metadata !3685, metadata !DIExpression()), !dbg !3686
  call void @llvm.dbg.declare(metadata %struct.ipa_edge_args** %new_args, metadata !3687, metadata !DIExpression()), !dbg !3688
  call void @llvm.dbg.declare(metadata i32* %arg_count, metadata !3689, metadata !DIExpression()), !dbg !3690
  call void @ipa_check_create_edge_args(), !dbg !3691
  %0 = load %struct.VEC_ipa_edge_args_t_gc*, %struct.VEC_ipa_edge_args_t_gc** @ipa_edge_args_vector, align 8, !dbg !3692
  %tobool = icmp ne %struct.VEC_ipa_edge_args_t_gc* %0, null, !dbg !3692
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !3692

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_ipa_edge_args_t_gc*, %struct.VEC_ipa_edge_args_t_gc** @ipa_edge_args_vector, align 8, !dbg !3692
  %base = getelementptr inbounds %struct.VEC_ipa_edge_args_t_gc, %struct.VEC_ipa_edge_args_t_gc* %1, i32 0, i32 0, !dbg !3692
  br label %cond.end, !dbg !3692

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !3692

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_ipa_edge_args_t_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !3692
  %2 = load %struct.cgraph_edge*, %struct.cgraph_edge** %src.addr, align 8, !dbg !3692
  %uid = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %2, i32 0, i32 12, !dbg !3692
  %3 = load i32, i32* %uid, align 4, !dbg !3692
  %call = call %struct.ipa_edge_args* @VEC_ipa_edge_args_t_base_index(%struct.VEC_ipa_edge_args_t_base* %cond, i32 %3), !dbg !3692
  store %struct.ipa_edge_args* %call, %struct.ipa_edge_args** %old_args, align 8, !dbg !3693
  %4 = load %struct.VEC_ipa_edge_args_t_gc*, %struct.VEC_ipa_edge_args_t_gc** @ipa_edge_args_vector, align 8, !dbg !3694
  %tobool1 = icmp ne %struct.VEC_ipa_edge_args_t_gc* %4, null, !dbg !3694
  br i1 %tobool1, label %cond.true2, label %cond.false4, !dbg !3694

cond.true2:                                       ; preds = %cond.end
  %5 = load %struct.VEC_ipa_edge_args_t_gc*, %struct.VEC_ipa_edge_args_t_gc** @ipa_edge_args_vector, align 8, !dbg !3694
  %base3 = getelementptr inbounds %struct.VEC_ipa_edge_args_t_gc, %struct.VEC_ipa_edge_args_t_gc* %5, i32 0, i32 0, !dbg !3694
  br label %cond.end5, !dbg !3694

cond.false4:                                      ; preds = %cond.end
  br label %cond.end5, !dbg !3694

cond.end5:                                        ; preds = %cond.false4, %cond.true2
  %cond6 = phi %struct.VEC_ipa_edge_args_t_base* [ %base3, %cond.true2 ], [ null, %cond.false4 ], !dbg !3694
  %6 = load %struct.cgraph_edge*, %struct.cgraph_edge** %dst.addr, align 8, !dbg !3694
  %uid7 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %6, i32 0, i32 12, !dbg !3694
  %7 = load i32, i32* %uid7, align 4, !dbg !3694
  %call8 = call %struct.ipa_edge_args* @VEC_ipa_edge_args_t_base_index(%struct.VEC_ipa_edge_args_t_base* %cond6, i32 %7), !dbg !3694
  store %struct.ipa_edge_args* %call8, %struct.ipa_edge_args** %new_args, align 8, !dbg !3695
  %8 = load %struct.ipa_edge_args*, %struct.ipa_edge_args** %old_args, align 8, !dbg !3696
  %call9 = call i32 @ipa_get_cs_argument_count(%struct.ipa_edge_args* %8), !dbg !3697
  store i32 %call9, i32* %arg_count, align 4, !dbg !3698
  %9 = load %struct.ipa_edge_args*, %struct.ipa_edge_args** %new_args, align 8, !dbg !3699
  %10 = load i32, i32* %arg_count, align 4, !dbg !3700
  call void @ipa_set_cs_argument_count(%struct.ipa_edge_args* %9, i32 %10), !dbg !3701
  %11 = load %struct.ipa_edge_args*, %struct.ipa_edge_args** %old_args, align 8, !dbg !3702
  %jump_functions = getelementptr inbounds %struct.ipa_edge_args, %struct.ipa_edge_args* %11, i32 0, i32 1, !dbg !3703
  %12 = load %struct.ipa_jump_func*, %struct.ipa_jump_func** %jump_functions, align 8, !dbg !3703
  %13 = bitcast %struct.ipa_jump_func* %12 to i8*, !dbg !3702
  %14 = load i32, i32* %arg_count, align 4, !dbg !3704
  %conv = sext i32 %14 to i64, !dbg !3704
  %mul = mul i64 32, %conv, !dbg !3705
  %call10 = call i8* @duplicate_ggc_array(i8* %13, i64 %mul), !dbg !3706
  %15 = bitcast i8* %call10 to %struct.ipa_jump_func*, !dbg !3707
  %16 = load %struct.ipa_edge_args*, %struct.ipa_edge_args** %new_args, align 8, !dbg !3708
  %jump_functions11 = getelementptr inbounds %struct.ipa_edge_args, %struct.ipa_edge_args* %16, i32 0, i32 1, !dbg !3709
  store %struct.ipa_jump_func* %15, %struct.ipa_jump_func** %jump_functions11, align 8, !dbg !3710
  ret void, !dbg !3711
}

declare dso_local %struct.cgraph_2node_hook_list* @cgraph_add_node_duplication_hook(void (%struct.cgraph_node*, %struct.cgraph_node*, i8*)*, i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @ipa_node_duplication_hook(%struct.cgraph_node* %src, %struct.cgraph_node* %dst, i8* %data) #0 !dbg !3712 {
entry:
  %src.addr = alloca %struct.cgraph_node*, align 8
  %dst.addr = alloca %struct.cgraph_node*, align 8
  %data.addr = alloca i8*, align 8
  %old_info = alloca %struct.ipa_node_params*, align 8
  %new_info = alloca %struct.ipa_node_params*, align 8
  %note = alloca %struct.ipa_param_call_note*, align 8
  %param_count = alloca i32, align 4
  %nn = alloca %struct.ipa_param_call_note*, align 8
  store %struct.cgraph_node* %src, %struct.cgraph_node** %src.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %src.addr, metadata !3715, metadata !DIExpression()), !dbg !3716
  store %struct.cgraph_node* %dst, %struct.cgraph_node** %dst.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %dst.addr, metadata !3717, metadata !DIExpression()), !dbg !3718
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !3719, metadata !DIExpression()), !dbg !3720
  call void @llvm.dbg.declare(metadata %struct.ipa_node_params** %old_info, metadata !3721, metadata !DIExpression()), !dbg !3722
  call void @llvm.dbg.declare(metadata %struct.ipa_node_params** %new_info, metadata !3723, metadata !DIExpression()), !dbg !3724
  call void @llvm.dbg.declare(metadata %struct.ipa_param_call_note** %note, metadata !3725, metadata !DIExpression()), !dbg !3726
  call void @llvm.dbg.declare(metadata i32* %param_count, metadata !3727, metadata !DIExpression()), !dbg !3728
  call void @ipa_check_create_node_params(), !dbg !3729
  %0 = load %struct.VEC_ipa_node_params_t_heap*, %struct.VEC_ipa_node_params_t_heap** @ipa_node_params_vector, align 8, !dbg !3730
  %tobool = icmp ne %struct.VEC_ipa_node_params_t_heap* %0, null, !dbg !3730
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !3730

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_ipa_node_params_t_heap*, %struct.VEC_ipa_node_params_t_heap** @ipa_node_params_vector, align 8, !dbg !3730
  %base = getelementptr inbounds %struct.VEC_ipa_node_params_t_heap, %struct.VEC_ipa_node_params_t_heap* %1, i32 0, i32 0, !dbg !3730
  br label %cond.end, !dbg !3730

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !3730

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_ipa_node_params_t_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !3730
  %2 = load %struct.cgraph_node*, %struct.cgraph_node** %src.addr, align 8, !dbg !3730
  %uid = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %2, i32 0, i32 24, !dbg !3730
  %3 = load i32, i32* %uid, align 8, !dbg !3730
  %call = call %struct.ipa_node_params* @VEC_ipa_node_params_t_base_index(%struct.VEC_ipa_node_params_t_base* %cond, i32 %3), !dbg !3730
  store %struct.ipa_node_params* %call, %struct.ipa_node_params** %old_info, align 8, !dbg !3731
  %4 = load %struct.VEC_ipa_node_params_t_heap*, %struct.VEC_ipa_node_params_t_heap** @ipa_node_params_vector, align 8, !dbg !3732
  %tobool1 = icmp ne %struct.VEC_ipa_node_params_t_heap* %4, null, !dbg !3732
  br i1 %tobool1, label %cond.true2, label %cond.false4, !dbg !3732

cond.true2:                                       ; preds = %cond.end
  %5 = load %struct.VEC_ipa_node_params_t_heap*, %struct.VEC_ipa_node_params_t_heap** @ipa_node_params_vector, align 8, !dbg !3732
  %base3 = getelementptr inbounds %struct.VEC_ipa_node_params_t_heap, %struct.VEC_ipa_node_params_t_heap* %5, i32 0, i32 0, !dbg !3732
  br label %cond.end5, !dbg !3732

cond.false4:                                      ; preds = %cond.end
  br label %cond.end5, !dbg !3732

cond.end5:                                        ; preds = %cond.false4, %cond.true2
  %cond6 = phi %struct.VEC_ipa_node_params_t_base* [ %base3, %cond.true2 ], [ null, %cond.false4 ], !dbg !3732
  %6 = load %struct.cgraph_node*, %struct.cgraph_node** %dst.addr, align 8, !dbg !3732
  %uid7 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %6, i32 0, i32 24, !dbg !3732
  %7 = load i32, i32* %uid7, align 8, !dbg !3732
  %call8 = call %struct.ipa_node_params* @VEC_ipa_node_params_t_base_index(%struct.VEC_ipa_node_params_t_base* %cond6, i32 %7), !dbg !3732
  store %struct.ipa_node_params* %call8, %struct.ipa_node_params** %new_info, align 8, !dbg !3733
  %8 = load %struct.ipa_node_params*, %struct.ipa_node_params** %old_info, align 8, !dbg !3734
  %call9 = call i32 @ipa_get_param_count(%struct.ipa_node_params* %8), !dbg !3735
  store i32 %call9, i32* %param_count, align 4, !dbg !3736
  %9 = load %struct.ipa_node_params*, %struct.ipa_node_params** %new_info, align 8, !dbg !3737
  %10 = load i32, i32* %param_count, align 4, !dbg !3738
  call void @ipa_set_param_count(%struct.ipa_node_params* %9, i32 %10), !dbg !3739
  %11 = load %struct.ipa_node_params*, %struct.ipa_node_params** %old_info, align 8, !dbg !3740
  %params = getelementptr inbounds %struct.ipa_node_params, %struct.ipa_node_params* %11, i32 0, i32 1, !dbg !3741
  %12 = load %struct.ipa_param_descriptor*, %struct.ipa_param_descriptor** %params, align 8, !dbg !3741
  %13 = bitcast %struct.ipa_param_descriptor* %12 to i8*, !dbg !3740
  %14 = load i32, i32* %param_count, align 4, !dbg !3742
  %conv = sext i32 %14 to i64, !dbg !3742
  %mul = mul i64 32, %conv, !dbg !3743
  %call10 = call i8* @duplicate_array(i8* %13, i64 %mul), !dbg !3744
  %15 = bitcast i8* %call10 to %struct.ipa_param_descriptor*, !dbg !3745
  %16 = load %struct.ipa_node_params*, %struct.ipa_node_params** %new_info, align 8, !dbg !3746
  %params11 = getelementptr inbounds %struct.ipa_node_params, %struct.ipa_node_params* %16, i32 0, i32 1, !dbg !3747
  store %struct.ipa_param_descriptor* %15, %struct.ipa_param_descriptor** %params11, align 8, !dbg !3748
  %17 = load %struct.ipa_node_params*, %struct.ipa_node_params** %old_info, align 8, !dbg !3749
  %ipcp_orig_node = getelementptr inbounds %struct.ipa_node_params, %struct.ipa_node_params* %17, i32 0, i32 3, !dbg !3750
  %18 = load %struct.cgraph_node*, %struct.cgraph_node** %ipcp_orig_node, align 8, !dbg !3750
  %19 = load %struct.ipa_node_params*, %struct.ipa_node_params** %new_info, align 8, !dbg !3751
  %ipcp_orig_node12 = getelementptr inbounds %struct.ipa_node_params, %struct.ipa_node_params* %19, i32 0, i32 3, !dbg !3752
  store %struct.cgraph_node* %18, %struct.cgraph_node** %ipcp_orig_node12, align 8, !dbg !3753
  %20 = load %struct.ipa_node_params*, %struct.ipa_node_params** %old_info, align 8, !dbg !3754
  %count_scale = getelementptr inbounds %struct.ipa_node_params, %struct.ipa_node_params* %20, i32 0, i32 4, !dbg !3755
  %21 = load i64, i64* %count_scale, align 8, !dbg !3755
  %22 = load %struct.ipa_node_params*, %struct.ipa_node_params** %new_info, align 8, !dbg !3756
  %count_scale13 = getelementptr inbounds %struct.ipa_node_params, %struct.ipa_node_params* %22, i32 0, i32 4, !dbg !3757
  store i64 %21, i64* %count_scale13, align 8, !dbg !3758
  %23 = load %struct.ipa_node_params*, %struct.ipa_node_params** %old_info, align 8, !dbg !3759
  %param_calls = getelementptr inbounds %struct.ipa_node_params, %struct.ipa_node_params* %23, i32 0, i32 2, !dbg !3761
  %24 = load %struct.ipa_param_call_note*, %struct.ipa_param_call_note** %param_calls, align 8, !dbg !3761
  store %struct.ipa_param_call_note* %24, %struct.ipa_param_call_note** %note, align 8, !dbg !3762
  br label %for.cond, !dbg !3763

for.cond:                                         ; preds = %for.inc, %cond.end5
  %25 = load %struct.ipa_param_call_note*, %struct.ipa_param_call_note** %note, align 8, !dbg !3764
  %tobool14 = icmp ne %struct.ipa_param_call_note* %25, null, !dbg !3766
  br i1 %tobool14, label %for.body, label %for.end, !dbg !3766

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.ipa_param_call_note** %nn, metadata !3767, metadata !DIExpression()), !dbg !3769
  %call15 = call i8* @xcalloc(i64 1, i64 40), !dbg !3770
  %26 = bitcast i8* %call15 to %struct.ipa_param_call_note*, !dbg !3771
  store %struct.ipa_param_call_note* %26, %struct.ipa_param_call_note** %nn, align 8, !dbg !3772
  %27 = load %struct.ipa_param_call_note*, %struct.ipa_param_call_note** %nn, align 8, !dbg !3773
  %28 = bitcast %struct.ipa_param_call_note* %27 to i8*, !dbg !3774
  %29 = load %struct.ipa_param_call_note*, %struct.ipa_param_call_note** %note, align 8, !dbg !3775
  %30 = bitcast %struct.ipa_param_call_note* %29 to i8*, !dbg !3774
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %28, i8* align 8 %30, i64 40, i1 false), !dbg !3774
  %31 = load %struct.ipa_node_params*, %struct.ipa_node_params** %new_info, align 8, !dbg !3776
  %param_calls16 = getelementptr inbounds %struct.ipa_node_params, %struct.ipa_node_params* %31, i32 0, i32 2, !dbg !3777
  %32 = load %struct.ipa_param_call_note*, %struct.ipa_param_call_note** %param_calls16, align 8, !dbg !3777
  %33 = load %struct.ipa_param_call_note*, %struct.ipa_param_call_note** %nn, align 8, !dbg !3778
  %next = getelementptr inbounds %struct.ipa_param_call_note, %struct.ipa_param_call_note* %33, i32 0, i32 1, !dbg !3779
  store %struct.ipa_param_call_note* %32, %struct.ipa_param_call_note** %next, align 8, !dbg !3780
  %34 = load %struct.ipa_param_call_note*, %struct.ipa_param_call_note** %nn, align 8, !dbg !3781
  %35 = load %struct.ipa_node_params*, %struct.ipa_node_params** %new_info, align 8, !dbg !3782
  %param_calls17 = getelementptr inbounds %struct.ipa_node_params, %struct.ipa_node_params* %35, i32 0, i32 2, !dbg !3783
  store %struct.ipa_param_call_note* %34, %struct.ipa_param_call_note** %param_calls17, align 8, !dbg !3784
  br label %for.inc, !dbg !3785

for.inc:                                          ; preds = %for.body
  %36 = load %struct.ipa_param_call_note*, %struct.ipa_param_call_note** %note, align 8, !dbg !3786
  %next18 = getelementptr inbounds %struct.ipa_param_call_note, %struct.ipa_param_call_note* %36, i32 0, i32 1, !dbg !3787
  %37 = load %struct.ipa_param_call_note*, %struct.ipa_param_call_note** %next18, align 8, !dbg !3787
  store %struct.ipa_param_call_note* %37, %struct.ipa_param_call_note** %note, align 8, !dbg !3788
  br label %for.cond, !dbg !3789, !llvm.loop !3790

for.end:                                          ; preds = %for.cond
  ret void, !dbg !3792
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @free_all_ipa_structures_after_ipa_cp() #0 !dbg !3793 {
entry:
  %0 = load i32, i32* @flag_indirect_inlining, align 4, !dbg !3794
  %tobool = icmp ne i32 %0, 0, !dbg !3794
  br i1 %tobool, label %if.end, label %if.then, !dbg !3796

if.then:                                          ; preds = %entry
  call void @ipa_free_all_edge_args(), !dbg !3797
  call void @ipa_free_all_node_params(), !dbg !3799
  call void @ipa_unregister_cgraph_hooks(), !dbg !3800
  br label %if.end, !dbg !3801

if.end:                                           ; preds = %if.then, %entry
  ret void, !dbg !3802
}

; Function Attrs: noinline nounwind uwtable
define internal void @ipa_unregister_cgraph_hooks() #0 !dbg !3803 {
entry:
  %0 = load %struct.cgraph_edge_hook_list*, %struct.cgraph_edge_hook_list** @edge_removal_hook_holder, align 8, !dbg !3804
  call void @cgraph_remove_edge_removal_hook(%struct.cgraph_edge_hook_list* %0), !dbg !3805
  store %struct.cgraph_edge_hook_list* null, %struct.cgraph_edge_hook_list** @edge_removal_hook_holder, align 8, !dbg !3806
  %1 = load %struct.cgraph_node_hook_list*, %struct.cgraph_node_hook_list** @node_removal_hook_holder, align 8, !dbg !3807
  call void @cgraph_remove_node_removal_hook(%struct.cgraph_node_hook_list* %1), !dbg !3808
  store %struct.cgraph_node_hook_list* null, %struct.cgraph_node_hook_list** @node_removal_hook_holder, align 8, !dbg !3809
  %2 = load %struct.cgraph_2edge_hook_list*, %struct.cgraph_2edge_hook_list** @edge_duplication_hook_holder, align 8, !dbg !3810
  call void @cgraph_remove_edge_duplication_hook(%struct.cgraph_2edge_hook_list* %2), !dbg !3811
  store %struct.cgraph_2edge_hook_list* null, %struct.cgraph_2edge_hook_list** @edge_duplication_hook_holder, align 8, !dbg !3812
  %3 = load %struct.cgraph_2node_hook_list*, %struct.cgraph_2node_hook_list** @node_duplication_hook_holder, align 8, !dbg !3813
  call void @cgraph_remove_node_duplication_hook(%struct.cgraph_2node_hook_list* %3), !dbg !3814
  store %struct.cgraph_2node_hook_list* null, %struct.cgraph_2node_hook_list** @node_duplication_hook_holder, align 8, !dbg !3815
  ret void, !dbg !3816
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @free_all_ipa_structures_after_iinln() #0 !dbg !3817 {
entry:
  call void @ipa_free_all_edge_args(), !dbg !3818
  call void @ipa_free_all_node_params(), !dbg !3819
  call void @ipa_unregister_cgraph_hooks(), !dbg !3820
  ret void, !dbg !3821
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @ipa_print_node_params(%struct._IO_FILE* %f, %struct.cgraph_node* %node) #0 !dbg !3822 {
entry:
  %f.addr = alloca %struct._IO_FILE*, align 8
  %node.addr = alloca %struct.cgraph_node*, align 8
  %i = alloca i32, align 4
  %count = alloca i32, align 4
  %temp = alloca %union.tree_node*, align 8
  %info = alloca %struct.ipa_node_params*, align 8
  store %struct._IO_FILE* %f, %struct._IO_FILE** %f.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %f.addr, metadata !3823, metadata !DIExpression()), !dbg !3824
  store %struct.cgraph_node* %node, %struct.cgraph_node** %node.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %node.addr, metadata !3825, metadata !DIExpression()), !dbg !3826
  call void @llvm.dbg.declare(metadata i32* %i, metadata !3827, metadata !DIExpression()), !dbg !3828
  call void @llvm.dbg.declare(metadata i32* %count, metadata !3829, metadata !DIExpression()), !dbg !3830
  call void @llvm.dbg.declare(metadata %union.tree_node** %temp, metadata !3831, metadata !DIExpression()), !dbg !3832
  call void @llvm.dbg.declare(metadata %struct.ipa_node_params** %info, metadata !3833, metadata !DIExpression()), !dbg !3834
  %0 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !3835
  %analyzed = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %0, i32 0, i32 27, !dbg !3837
  %bf.load = load i16, i16* %analyzed, align 4, !dbg !3837
  %bf.lshr = lshr i16 %bf.load, 5, !dbg !3837
  %bf.clear = and i16 %bf.lshr, 1, !dbg !3837
  %bf.cast = zext i16 %bf.clear to i32, !dbg !3837
  %tobool = icmp ne i32 %bf.cast, 0, !dbg !3835
  br i1 %tobool, label %if.end, label %if.then, !dbg !3838

if.then:                                          ; preds = %entry
  br label %for.end, !dbg !3839

if.end:                                           ; preds = %entry
  %1 = load %struct.VEC_ipa_node_params_t_heap*, %struct.VEC_ipa_node_params_t_heap** @ipa_node_params_vector, align 8, !dbg !3840
  %tobool1 = icmp ne %struct.VEC_ipa_node_params_t_heap* %1, null, !dbg !3840
  br i1 %tobool1, label %cond.true, label %cond.false, !dbg !3840

cond.true:                                        ; preds = %if.end
  %2 = load %struct.VEC_ipa_node_params_t_heap*, %struct.VEC_ipa_node_params_t_heap** @ipa_node_params_vector, align 8, !dbg !3840
  %base = getelementptr inbounds %struct.VEC_ipa_node_params_t_heap, %struct.VEC_ipa_node_params_t_heap* %2, i32 0, i32 0, !dbg !3840
  br label %cond.end, !dbg !3840

cond.false:                                       ; preds = %if.end
  br label %cond.end, !dbg !3840

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_ipa_node_params_t_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !3840
  %3 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !3840
  %uid = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %3, i32 0, i32 24, !dbg !3840
  %4 = load i32, i32* %uid, align 8, !dbg !3840
  %call = call %struct.ipa_node_params* @VEC_ipa_node_params_t_base_index(%struct.VEC_ipa_node_params_t_base* %cond, i32 %4), !dbg !3840
  store %struct.ipa_node_params* %call, %struct.ipa_node_params** %info, align 8, !dbg !3841
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** %f.addr, align 8, !dbg !3842
  %6 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !3843
  %call2 = call i8* @cgraph_node_name(%struct.cgraph_node* %6), !dbg !3844
  %call3 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %5, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.16, i64 0, i64 0), i8* %call2), !dbg !3845
  %7 = load %struct.ipa_node_params*, %struct.ipa_node_params** %info, align 8, !dbg !3846
  %call4 = call i32 @ipa_get_param_count(%struct.ipa_node_params* %7), !dbg !3847
  store i32 %call4, i32* %count, align 4, !dbg !3848
  store i32 0, i32* %i, align 4, !dbg !3849
  br label %for.cond, !dbg !3851

for.cond:                                         ; preds = %for.inc, %cond.end
  %8 = load i32, i32* %i, align 4, !dbg !3852
  %9 = load i32, i32* %count, align 4, !dbg !3854
  %cmp = icmp slt i32 %8, %9, !dbg !3855
  br i1 %cmp, label %for.body, label %for.end, !dbg !3856

for.body:                                         ; preds = %for.cond
  %10 = load %struct.ipa_node_params*, %struct.ipa_node_params** %info, align 8, !dbg !3857
  %11 = load i32, i32* %i, align 4, !dbg !3859
  %call5 = call %union.tree_node* @ipa_get_param(%struct.ipa_node_params* %10, i32 %11), !dbg !3860
  store %union.tree_node* %call5, %union.tree_node** %temp, align 8, !dbg !3861
  %12 = load %union.tree_node*, %union.tree_node** %temp, align 8, !dbg !3862
  %base6 = bitcast %union.tree_node* %12 to %struct.tree_base*, !dbg !3862
  %13 = bitcast %struct.tree_base* %base6 to i64*, !dbg !3862
  %bf.load7 = load i64, i64* %13, align 8, !dbg !3862
  %bf.clear8 = and i64 %bf.load7, 65535, !dbg !3862
  %bf.cast9 = trunc i64 %bf.clear8 to i32, !dbg !3862
  %cmp10 = icmp eq i32 %bf.cast9, 34, !dbg !3864
  br i1 %cmp10, label %if.then11, label %if.end19, !dbg !3865

if.then11:                                        ; preds = %for.body
  %14 = load %struct._IO_FILE*, %struct._IO_FILE** %f.addr, align 8, !dbg !3866
  %15 = load i32, i32* %i, align 4, !dbg !3867
  %16 = load %union.tree_node*, %union.tree_node** %temp, align 8, !dbg !3868
  %decl_minimal = bitcast %union.tree_node* %16 to %struct.tree_decl_minimal*, !dbg !3868
  %name = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal, i32 0, i32 3, !dbg !3868
  %17 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !3868
  %tobool12 = icmp ne %union.tree_node* %17, null, !dbg !3868
  br i1 %tobool12, label %cond.true13, label %cond.false15, !dbg !3868

cond.true13:                                      ; preds = %if.then11
  %18 = load i8* (%union.tree_node*, i32)*, i8* (%union.tree_node*, i32)** getelementptr inbounds (%struct.lang_hooks, %struct.lang_hooks* @lang_hooks, i32 0, i32 22), align 8, !dbg !3869
  %19 = load %union.tree_node*, %union.tree_node** %temp, align 8, !dbg !3870
  %call14 = call i8* %18(%union.tree_node* %19, i32 2), !dbg !3871
  br label %cond.end16, !dbg !3868

cond.false15:                                     ; preds = %if.then11
  br label %cond.end16, !dbg !3868

cond.end16:                                       ; preds = %cond.false15, %cond.true13
  %cond17 = phi i8* [ %call14, %cond.true13 ], [ getelementptr inbounds ([10 x i8], [10 x i8]* @.str.18, i64 0, i64 0), %cond.false15 ], !dbg !3868
  %call18 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %14, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.17, i64 0, i64 0), i32 %15, i8* %cond17), !dbg !3872
  br label %if.end19, !dbg !3872

if.end19:                                         ; preds = %cond.end16, %for.body
  %20 = load %struct.ipa_node_params*, %struct.ipa_node_params** %info, align 8, !dbg !3873
  %21 = load i32, i32* %i, align 4, !dbg !3875
  %call20 = call zeroext i8 @ipa_is_param_modified(%struct.ipa_node_params* %20, i32 %21), !dbg !3876
  %tobool21 = icmp ne i8 %call20, 0, !dbg !3876
  br i1 %tobool21, label %if.then22, label %if.end24, !dbg !3877

if.then22:                                        ; preds = %if.end19
  %22 = load %struct._IO_FILE*, %struct._IO_FILE** %f.addr, align 8, !dbg !3878
  %call23 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %22, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.19, i64 0, i64 0)), !dbg !3879
  br label %if.end24, !dbg !3879

if.end24:                                         ; preds = %if.then22, %if.end19
  %23 = load %struct._IO_FILE*, %struct._IO_FILE** %f.addr, align 8, !dbg !3880
  %call25 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %23, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8, i64 0, i64 0)), !dbg !3881
  br label %for.inc, !dbg !3882

for.inc:                                          ; preds = %if.end24
  %24 = load i32, i32* %i, align 4, !dbg !3883
  %inc = add nsw i32 %24, 1, !dbg !3883
  store i32 %inc, i32* %i, align 4, !dbg !3883
  br label %for.cond, !dbg !3884, !llvm.loop !3885

for.end:                                          ; preds = %if.then, %for.cond
  ret void, !dbg !3887
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @ipa_get_param(%struct.ipa_node_params* %info, i32 %i) #0 !dbg !3888 {
entry:
  %info.addr = alloca %struct.ipa_node_params*, align 8
  %i.addr = alloca i32, align 4
  store %struct.ipa_node_params* %info, %struct.ipa_node_params** %info.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ipa_node_params** %info.addr, metadata !3891, metadata !DIExpression()), !dbg !3892
  store i32 %i, i32* %i.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %i.addr, metadata !3893, metadata !DIExpression()), !dbg !3894
  %0 = load %struct.ipa_node_params*, %struct.ipa_node_params** %info.addr, align 8, !dbg !3895
  %params = getelementptr inbounds %struct.ipa_node_params, %struct.ipa_node_params* %0, i32 0, i32 1, !dbg !3896
  %1 = load %struct.ipa_param_descriptor*, %struct.ipa_param_descriptor** %params, align 8, !dbg !3896
  %2 = load i32, i32* %i.addr, align 4, !dbg !3897
  %idxprom = sext i32 %2 to i64, !dbg !3895
  %arrayidx = getelementptr inbounds %struct.ipa_param_descriptor, %struct.ipa_param_descriptor* %1, i64 %idxprom, !dbg !3895
  %decl = getelementptr inbounds %struct.ipa_param_descriptor, %struct.ipa_param_descriptor* %arrayidx, i32 0, i32 1, !dbg !3898
  %3 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !3898
  ret %union.tree_node* %3, !dbg !3899
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @ipa_is_param_modified(%struct.ipa_node_params* %info, i32 %i) #0 !dbg !3900 {
entry:
  %info.addr = alloca %struct.ipa_node_params*, align 8
  %i.addr = alloca i32, align 4
  store %struct.ipa_node_params* %info, %struct.ipa_node_params** %info.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ipa_node_params** %info.addr, metadata !3903, metadata !DIExpression()), !dbg !3904
  store i32 %i, i32* %i.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %i.addr, metadata !3905, metadata !DIExpression()), !dbg !3906
  %0 = load %struct.ipa_node_params*, %struct.ipa_node_params** %info.addr, align 8, !dbg !3907
  %params = getelementptr inbounds %struct.ipa_node_params, %struct.ipa_node_params* %0, i32 0, i32 1, !dbg !3908
  %1 = load %struct.ipa_param_descriptor*, %struct.ipa_param_descriptor** %params, align 8, !dbg !3908
  %2 = load i32, i32* %i.addr, align 4, !dbg !3909
  %idxprom = sext i32 %2 to i64, !dbg !3907
  %arrayidx = getelementptr inbounds %struct.ipa_param_descriptor, %struct.ipa_param_descriptor* %1, i64 %idxprom, !dbg !3907
  %modified = getelementptr inbounds %struct.ipa_param_descriptor, %struct.ipa_param_descriptor* %arrayidx, i32 0, i32 2, !dbg !3910
  %bf.load = load i8, i8* %modified, align 8, !dbg !3910
  %bf.clear = and i8 %bf.load, 1, !dbg !3910
  %bf.cast = zext i8 %bf.clear to i32, !dbg !3910
  %conv = trunc i32 %bf.cast to i8, !dbg !3907
  ret i8 %conv, !dbg !3911
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @ipa_print_all_params(%struct._IO_FILE* %f) #0 !dbg !3912 {
entry:
  %f.addr = alloca %struct._IO_FILE*, align 8
  %node = alloca %struct.cgraph_node*, align 8
  store %struct._IO_FILE* %f, %struct._IO_FILE** %f.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %f.addr, metadata !3913, metadata !DIExpression()), !dbg !3914
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %node, metadata !3915, metadata !DIExpression()), !dbg !3916
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** %f.addr, align 8, !dbg !3917
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.20, i64 0, i64 0)), !dbg !3918
  %1 = load %struct.cgraph_node*, %struct.cgraph_node** @cgraph_nodes, align 8, !dbg !3919
  store %struct.cgraph_node* %1, %struct.cgraph_node** %node, align 8, !dbg !3921
  br label %for.cond, !dbg !3922

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !3923
  %tobool = icmp ne %struct.cgraph_node* %2, null, !dbg !3925
  br i1 %tobool, label %for.body, label %for.end, !dbg !3925

for.body:                                         ; preds = %for.cond
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** %f.addr, align 8, !dbg !3926
  %4 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !3927
  call void @ipa_print_node_params(%struct._IO_FILE* %3, %struct.cgraph_node* %4), !dbg !3928
  br label %for.inc, !dbg !3928

for.inc:                                          ; preds = %for.body
  %5 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !3929
  %next = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %5, i32 0, i32 3, !dbg !3930
  %6 = load %struct.cgraph_node*, %struct.cgraph_node** %next, align 8, !dbg !3930
  store %struct.cgraph_node* %6, %struct.cgraph_node** %node, align 8, !dbg !3931
  br label %for.cond, !dbg !3932, !llvm.loop !3933

for.end:                                          ; preds = %for.cond
  ret void, !dbg !3935
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.VEC_tree_heap* @ipa_get_vector_of_formal_parms(%union.tree_node* %fndecl) #0 !dbg !3936 {
entry:
  %fndecl.addr = alloca %union.tree_node*, align 8
  %args = alloca %struct.VEC_tree_heap*, align 8
  %count = alloca i32, align 4
  %parm = alloca %union.tree_node*, align 8
  store %union.tree_node* %fndecl, %union.tree_node** %fndecl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %fndecl.addr, metadata !3939, metadata !DIExpression()), !dbg !3940
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_heap** %args, metadata !3941, metadata !DIExpression()), !dbg !3942
  call void @llvm.dbg.declare(metadata i32* %count, metadata !3943, metadata !DIExpression()), !dbg !3944
  call void @llvm.dbg.declare(metadata %union.tree_node** %parm, metadata !3945, metadata !DIExpression()), !dbg !3946
  %0 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !3947
  %call = call i32 @count_formal_params_1(%union.tree_node* %0), !dbg !3948
  store i32 %call, i32* %count, align 4, !dbg !3949
  %1 = load i32, i32* %count, align 4, !dbg !3950
  %call1 = call %struct.VEC_tree_heap* @VEC_tree_heap_alloc(i32 %1), !dbg !3950
  store %struct.VEC_tree_heap* %call1, %struct.VEC_tree_heap** %args, align 8, !dbg !3951
  %2 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !3952
  %decl_non_common = bitcast %union.tree_node* %2 to %struct.tree_decl_non_common*, !dbg !3952
  %arguments = getelementptr inbounds %struct.tree_decl_non_common, %struct.tree_decl_non_common* %decl_non_common, i32 0, i32 2, !dbg !3952
  %3 = load %union.tree_node*, %union.tree_node** %arguments, align 8, !dbg !3952
  store %union.tree_node* %3, %union.tree_node** %parm, align 8, !dbg !3954
  br label %for.cond, !dbg !3955

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load %union.tree_node*, %union.tree_node** %parm, align 8, !dbg !3956
  %tobool = icmp ne %union.tree_node* %4, null, !dbg !3958
  br i1 %tobool, label %for.body, label %for.end, !dbg !3958

for.body:                                         ; preds = %for.cond
  %5 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %args, align 8, !dbg !3959
  %tobool2 = icmp ne %struct.VEC_tree_heap* %5, null, !dbg !3959
  br i1 %tobool2, label %cond.true, label %cond.false, !dbg !3959

cond.true:                                        ; preds = %for.body
  %6 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %args, align 8, !dbg !3959
  %base = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %6, i32 0, i32 0, !dbg !3959
  br label %cond.end, !dbg !3959

cond.false:                                       ; preds = %for.body
  br label %cond.end, !dbg !3959

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !3959
  %7 = load %union.tree_node*, %union.tree_node** %parm, align 8, !dbg !3959
  %call3 = call %union.tree_node** @VEC_tree_base_quick_push(%struct.VEC_tree_base* %cond, %union.tree_node* %7), !dbg !3959
  br label %for.inc, !dbg !3959

for.inc:                                          ; preds = %cond.end
  %8 = load %union.tree_node*, %union.tree_node** %parm, align 8, !dbg !3960
  %common = bitcast %union.tree_node* %8 to %struct.tree_common*, !dbg !3960
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 1, !dbg !3960
  %9 = load %union.tree_node*, %union.tree_node** %chain, align 8, !dbg !3960
  store %union.tree_node* %9, %union.tree_node** %parm, align 8, !dbg !3961
  br label %for.cond, !dbg !3962, !llvm.loop !3963

for.end:                                          ; preds = %for.cond
  %10 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %args, align 8, !dbg !3965
  ret %struct.VEC_tree_heap* %10, !dbg !3966
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @count_formal_params_1(%union.tree_node* %fndecl) #0 !dbg !3967 {
entry:
  %fndecl.addr = alloca %union.tree_node*, align 8
  %parm = alloca %union.tree_node*, align 8
  %count = alloca i32, align 4
  store %union.tree_node* %fndecl, %union.tree_node** %fndecl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %fndecl.addr, metadata !3970, metadata !DIExpression()), !dbg !3971
  call void @llvm.dbg.declare(metadata %union.tree_node** %parm, metadata !3972, metadata !DIExpression()), !dbg !3973
  call void @llvm.dbg.declare(metadata i32* %count, metadata !3974, metadata !DIExpression()), !dbg !3975
  store i32 0, i32* %count, align 4, !dbg !3975
  %0 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !3976
  %decl_non_common = bitcast %union.tree_node* %0 to %struct.tree_decl_non_common*, !dbg !3976
  %arguments = getelementptr inbounds %struct.tree_decl_non_common, %struct.tree_decl_non_common* %decl_non_common, i32 0, i32 2, !dbg !3976
  %1 = load %union.tree_node*, %union.tree_node** %arguments, align 8, !dbg !3976
  store %union.tree_node* %1, %union.tree_node** %parm, align 8, !dbg !3978
  br label %for.cond, !dbg !3979

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load %union.tree_node*, %union.tree_node** %parm, align 8, !dbg !3980
  %tobool = icmp ne %union.tree_node* %2, null, !dbg !3982
  br i1 %tobool, label %for.body, label %for.end, !dbg !3982

for.body:                                         ; preds = %for.cond
  %3 = load i32, i32* %count, align 4, !dbg !3983
  %inc = add nsw i32 %3, 1, !dbg !3983
  store i32 %inc, i32* %count, align 4, !dbg !3983
  br label %for.inc, !dbg !3984

for.inc:                                          ; preds = %for.body
  %4 = load %union.tree_node*, %union.tree_node** %parm, align 8, !dbg !3985
  %common = bitcast %union.tree_node* %4 to %struct.tree_common*, !dbg !3985
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 1, !dbg !3985
  %5 = load %union.tree_node*, %union.tree_node** %chain, align 8, !dbg !3985
  store %union.tree_node* %5, %union.tree_node** %parm, align 8, !dbg !3986
  br label %for.cond, !dbg !3987, !llvm.loop !3988

for.end:                                          ; preds = %for.cond
  %6 = load i32, i32* %count, align 4, !dbg !3990
  ret i32 %6, !dbg !3991
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.VEC_tree_heap* @VEC_tree_heap_alloc(i32 %alloc_) #0 !dbg !3992 {
entry:
  %alloc_.addr = alloca i32, align 4
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !3995, metadata !DIExpression()), !dbg !3996
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !3996
  %call = call i8* @vec_heap_p_reserve_exact(i8* null, i32 %0), !dbg !3996
  %1 = bitcast i8* %call to %struct.VEC_tree_heap*, !dbg !3996
  ret %struct.VEC_tree_heap* %1, !dbg !3996
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @VEC_tree_base_quick_push(%struct.VEC_tree_base* %vec_, %union.tree_node* %obj_) #0 !dbg !3997 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_base*, align 8
  %obj_.addr = alloca %union.tree_node*, align 8
  %slot_ = alloca %union.tree_node**, align 8
  store %struct.VEC_tree_base* %vec_, %struct.VEC_tree_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_base** %vec_.addr, metadata !4001, metadata !DIExpression()), !dbg !4002
  store %union.tree_node* %obj_, %union.tree_node** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %obj_.addr, metadata !4003, metadata !DIExpression()), !dbg !4002
  call void @llvm.dbg.declare(metadata %union.tree_node*** %slot_, metadata !4004, metadata !DIExpression()), !dbg !4002
  %0 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !4002
  %num = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %0, i32 0, i32 0, !dbg !4002
  %1 = load i32, i32* %num, align 8, !dbg !4002
  %2 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !4002
  %alloc = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %2, i32 0, i32 1, !dbg !4002
  %3 = load i32, i32* %alloc, align 4, !dbg !4002
  %cmp = icmp ult i32 %1, %3, !dbg !4002
  %conv = zext i1 %cmp to i32, !dbg !4002
  %4 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !4002
  %vec = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %4, i32 0, i32 2, !dbg !4002
  %5 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !4002
  %num1 = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %5, i32 0, i32 0, !dbg !4002
  %6 = load i32, i32* %num1, align 8, !dbg !4002
  %inc = add i32 %6, 1, !dbg !4002
  store i32 %inc, i32* %num1, align 8, !dbg !4002
  %idxprom = zext i32 %6 to i64, !dbg !4002
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %vec, i64 0, i64 %idxprom, !dbg !4002
  store %union.tree_node** %arrayidx, %union.tree_node*** %slot_, align 8, !dbg !4002
  %7 = load %union.tree_node*, %union.tree_node** %obj_.addr, align 8, !dbg !4002
  %8 = load %union.tree_node**, %union.tree_node*** %slot_, align 8, !dbg !4002
  store %union.tree_node* %7, %union.tree_node** %8, align 8, !dbg !4002
  %9 = load %union.tree_node**, %union.tree_node*** %slot_, align 8, !dbg !4002
  ret %union.tree_node** %9, !dbg !4002
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @ipa_modify_formal_parameters(%union.tree_node* %fndecl, %struct.VEC_ipa_parm_adjustment_t_heap* %adjustments, i8* %synth_parm_prefix) #0 !dbg !4005 {
entry:
  %fndecl.addr = alloca %union.tree_node*, align 8
  %adjustments.addr = alloca %struct.VEC_ipa_parm_adjustment_t_heap*, align 8
  %synth_parm_prefix.addr = alloca i8*, align 8
  %oparms = alloca %struct.VEC_tree_heap*, align 8
  %otypes = alloca %struct.VEC_tree_heap*, align 8
  %orig_type = alloca %union.tree_node*, align 8
  %new_type = alloca %union.tree_node*, align 8
  %old_arg_types = alloca %union.tree_node*, align 8
  %t = alloca %union.tree_node*, align 8
  %new_arg_types = alloca %union.tree_node*, align 8
  %parm = alloca %union.tree_node*, align 8
  %link = alloca %union.tree_node**, align 8
  %i = alloca i32, align 4
  %len = alloca i32, align 4
  %new_reversed = alloca %union.tree_node*, align 8
  %care_for_types = alloca i8, align 1
  %last_parm_void = alloca i8, align 1
  %adj = alloca %struct.ipa_parm_adjustment*, align 8
  %new_parm = alloca %union.tree_node*, align 8
  %ptype = alloca %union.tree_node*, align 8
  store %union.tree_node* %fndecl, %union.tree_node** %fndecl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %fndecl.addr, metadata !4009, metadata !DIExpression()), !dbg !4010
  store %struct.VEC_ipa_parm_adjustment_t_heap* %adjustments, %struct.VEC_ipa_parm_adjustment_t_heap** %adjustments.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_ipa_parm_adjustment_t_heap** %adjustments.addr, metadata !4011, metadata !DIExpression()), !dbg !4012
  store i8* %synth_parm_prefix, i8** %synth_parm_prefix.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %synth_parm_prefix.addr, metadata !4013, metadata !DIExpression()), !dbg !4014
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_heap** %oparms, metadata !4015, metadata !DIExpression()), !dbg !4016
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_heap** %otypes, metadata !4017, metadata !DIExpression()), !dbg !4018
  call void @llvm.dbg.declare(metadata %union.tree_node** %orig_type, metadata !4019, metadata !DIExpression()), !dbg !4020
  call void @llvm.dbg.declare(metadata %union.tree_node** %new_type, metadata !4021, metadata !DIExpression()), !dbg !4022
  store %union.tree_node* null, %union.tree_node** %new_type, align 8, !dbg !4022
  call void @llvm.dbg.declare(metadata %union.tree_node** %old_arg_types, metadata !4023, metadata !DIExpression()), !dbg !4024
  call void @llvm.dbg.declare(metadata %union.tree_node** %t, metadata !4025, metadata !DIExpression()), !dbg !4026
  call void @llvm.dbg.declare(metadata %union.tree_node** %new_arg_types, metadata !4027, metadata !DIExpression()), !dbg !4028
  store %union.tree_node* null, %union.tree_node** %new_arg_types, align 8, !dbg !4028
  call void @llvm.dbg.declare(metadata %union.tree_node** %parm, metadata !4029, metadata !DIExpression()), !dbg !4030
  call void @llvm.dbg.declare(metadata %union.tree_node*** %link, metadata !4031, metadata !DIExpression()), !dbg !4032
  %0 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !4033
  %decl_non_common = bitcast %union.tree_node* %0 to %struct.tree_decl_non_common*, !dbg !4033
  %arguments = getelementptr inbounds %struct.tree_decl_non_common, %struct.tree_decl_non_common* %decl_non_common, i32 0, i32 2, !dbg !4033
  store %union.tree_node** %arguments, %union.tree_node*** %link, align 8, !dbg !4032
  call void @llvm.dbg.declare(metadata i32* %i, metadata !4034, metadata !DIExpression()), !dbg !4035
  call void @llvm.dbg.declare(metadata i32* %len, metadata !4036, metadata !DIExpression()), !dbg !4037
  %1 = load %struct.VEC_ipa_parm_adjustment_t_heap*, %struct.VEC_ipa_parm_adjustment_t_heap** %adjustments.addr, align 8, !dbg !4038
  %tobool = icmp ne %struct.VEC_ipa_parm_adjustment_t_heap* %1, null, !dbg !4038
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4038

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_ipa_parm_adjustment_t_heap*, %struct.VEC_ipa_parm_adjustment_t_heap** %adjustments.addr, align 8, !dbg !4038
  %base = getelementptr inbounds %struct.VEC_ipa_parm_adjustment_t_heap, %struct.VEC_ipa_parm_adjustment_t_heap* %2, i32 0, i32 0, !dbg !4038
  br label %cond.end, !dbg !4038

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4038

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_ipa_parm_adjustment_t_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !4038
  %call = call i32 @VEC_ipa_parm_adjustment_t_base_length(%struct.VEC_ipa_parm_adjustment_t_base* %cond), !dbg !4038
  store i32 %call, i32* %len, align 4, !dbg !4037
  call void @llvm.dbg.declare(metadata %union.tree_node** %new_reversed, metadata !4039, metadata !DIExpression()), !dbg !4040
  store %union.tree_node* null, %union.tree_node** %new_reversed, align 8, !dbg !4040
  call void @llvm.dbg.declare(metadata i8* %care_for_types, metadata !4041, metadata !DIExpression()), !dbg !4042
  call void @llvm.dbg.declare(metadata i8* %last_parm_void, metadata !4043, metadata !DIExpression()), !dbg !4044
  %3 = load i8*, i8** %synth_parm_prefix.addr, align 8, !dbg !4045
  %tobool1 = icmp ne i8* %3, null, !dbg !4045
  br i1 %tobool1, label %if.end, label %if.then, !dbg !4047

if.then:                                          ; preds = %cond.end
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.21, i64 0, i64 0), i8** %synth_parm_prefix.addr, align 8, !dbg !4048
  br label %if.end, !dbg !4049

if.end:                                           ; preds = %if.then, %cond.end
  %4 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !4050
  %call2 = call %struct.VEC_tree_heap* @ipa_get_vector_of_formal_parms(%union.tree_node* %4), !dbg !4051
  store %struct.VEC_tree_heap* %call2, %struct.VEC_tree_heap** %oparms, align 8, !dbg !4052
  %5 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !4053
  %common = bitcast %union.tree_node* %5 to %struct.tree_common*, !dbg !4053
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !4053
  %6 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !4053
  store %union.tree_node* %6, %union.tree_node** %orig_type, align 8, !dbg !4054
  %7 = load %union.tree_node*, %union.tree_node** %orig_type, align 8, !dbg !4055
  %type3 = bitcast %union.tree_node* %7 to %struct.tree_type*, !dbg !4055
  %values = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type3, i32 0, i32 1, !dbg !4055
  %8 = load %union.tree_node*, %union.tree_node** %values, align 8, !dbg !4055
  store %union.tree_node* %8, %union.tree_node** %old_arg_types, align 8, !dbg !4056
  %9 = load %union.tree_node*, %union.tree_node** %old_arg_types, align 8, !dbg !4057
  %cmp = icmp ne %union.tree_node* %9, null, !dbg !4058
  %conv = zext i1 %cmp to i32, !dbg !4058
  %conv4 = trunc i32 %conv to i8, !dbg !4059
  store i8 %conv4, i8* %care_for_types, align 1, !dbg !4060
  %10 = load i8, i8* %care_for_types, align 1, !dbg !4061
  %tobool5 = icmp ne i8 %10, 0, !dbg !4061
  br i1 %tobool5, label %if.then6, label %if.else55, !dbg !4063

if.then6:                                         ; preds = %if.end
  %11 = load %union.tree_node*, %union.tree_node** %old_arg_types, align 8, !dbg !4064
  %call7 = call %union.tree_node* @tree_last(%union.tree_node* %11), !dbg !4064
  %list = bitcast %union.tree_node* %call7 to %struct.tree_list*, !dbg !4064
  %value = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list, i32 0, i32 2, !dbg !4064
  %12 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !4064
  %13 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 38), align 16, !dbg !4066
  %cmp8 = icmp eq %union.tree_node* %12, %13, !dbg !4067
  %conv9 = zext i1 %cmp8 to i32, !dbg !4067
  %conv10 = trunc i32 %conv9 to i8, !dbg !4068
  store i8 %conv10, i8* %last_parm_void, align 1, !dbg !4069
  %14 = load %union.tree_node*, %union.tree_node** %orig_type, align 8, !dbg !4070
  %call11 = call %struct.VEC_tree_heap* @get_vector_of_formal_parm_types(%union.tree_node* %14), !dbg !4071
  store %struct.VEC_tree_heap* %call11, %struct.VEC_tree_heap** %otypes, align 8, !dbg !4072
  %15 = load i8, i8* %last_parm_void, align 1, !dbg !4073
  %tobool12 = icmp ne i8 %15, 0, !dbg !4073
  br i1 %tobool12, label %if.then13, label %if.else, !dbg !4075

if.then13:                                        ; preds = %if.then6
  %16 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %oparms, align 8, !dbg !4076
  %tobool14 = icmp ne %struct.VEC_tree_heap* %16, null, !dbg !4076
  br i1 %tobool14, label %cond.true15, label %cond.false17, !dbg !4076

cond.true15:                                      ; preds = %if.then13
  %17 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %oparms, align 8, !dbg !4076
  %base16 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %17, i32 0, i32 0, !dbg !4076
  br label %cond.end18, !dbg !4076

cond.false17:                                     ; preds = %if.then13
  br label %cond.end18, !dbg !4076

cond.end18:                                       ; preds = %cond.false17, %cond.true15
  %cond19 = phi %struct.VEC_tree_base* [ %base16, %cond.true15 ], [ null, %cond.false17 ], !dbg !4076
  %call20 = call i32 @VEC_tree_base_length(%struct.VEC_tree_base* %cond19), !dbg !4076
  %add = add i32 %call20, 1, !dbg !4076
  %18 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %otypes, align 8, !dbg !4076
  %tobool21 = icmp ne %struct.VEC_tree_heap* %18, null, !dbg !4076
  br i1 %tobool21, label %cond.true22, label %cond.false24, !dbg !4076

cond.true22:                                      ; preds = %cond.end18
  %19 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %otypes, align 8, !dbg !4076
  %base23 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %19, i32 0, i32 0, !dbg !4076
  br label %cond.end25, !dbg !4076

cond.false24:                                     ; preds = %cond.end18
  br label %cond.end25, !dbg !4076

cond.end25:                                       ; preds = %cond.false24, %cond.true22
  %cond26 = phi %struct.VEC_tree_base* [ %base23, %cond.true22 ], [ null, %cond.false24 ], !dbg !4076
  %call27 = call i32 @VEC_tree_base_length(%struct.VEC_tree_base* %cond26), !dbg !4076
  %cmp28 = icmp eq i32 %add, %call27, !dbg !4076
  br i1 %cmp28, label %cond.false31, label %cond.true30, !dbg !4076

cond.true30:                                      ; preds = %cond.end25
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i32 1514, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !4076
  br label %cond.end32, !dbg !4076

cond.false31:                                     ; preds = %cond.end25
  br label %cond.end32, !dbg !4076

cond.end32:                                       ; preds = %cond.false31, %cond.true30
  %cond33 = phi i32 [ 0, %cond.true30 ], [ 0, %cond.false31 ], !dbg !4076
  br label %if.end54, !dbg !4076

if.else:                                          ; preds = %if.then6
  %20 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %oparms, align 8, !dbg !4077
  %tobool34 = icmp ne %struct.VEC_tree_heap* %20, null, !dbg !4077
  br i1 %tobool34, label %cond.true35, label %cond.false37, !dbg !4077

cond.true35:                                      ; preds = %if.else
  %21 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %oparms, align 8, !dbg !4077
  %base36 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %21, i32 0, i32 0, !dbg !4077
  br label %cond.end38, !dbg !4077

cond.false37:                                     ; preds = %if.else
  br label %cond.end38, !dbg !4077

cond.end38:                                       ; preds = %cond.false37, %cond.true35
  %cond39 = phi %struct.VEC_tree_base* [ %base36, %cond.true35 ], [ null, %cond.false37 ], !dbg !4077
  %call40 = call i32 @VEC_tree_base_length(%struct.VEC_tree_base* %cond39), !dbg !4077
  %22 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %otypes, align 8, !dbg !4077
  %tobool41 = icmp ne %struct.VEC_tree_heap* %22, null, !dbg !4077
  br i1 %tobool41, label %cond.true42, label %cond.false44, !dbg !4077

cond.true42:                                      ; preds = %cond.end38
  %23 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %otypes, align 8, !dbg !4077
  %base43 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %23, i32 0, i32 0, !dbg !4077
  br label %cond.end45, !dbg !4077

cond.false44:                                     ; preds = %cond.end38
  br label %cond.end45, !dbg !4077

cond.end45:                                       ; preds = %cond.false44, %cond.true42
  %cond46 = phi %struct.VEC_tree_base* [ %base43, %cond.true42 ], [ null, %cond.false44 ], !dbg !4077
  %call47 = call i32 @VEC_tree_base_length(%struct.VEC_tree_base* %cond46), !dbg !4077
  %cmp48 = icmp eq i32 %call40, %call47, !dbg !4077
  br i1 %cmp48, label %cond.false51, label %cond.true50, !dbg !4077

cond.true50:                                      ; preds = %cond.end45
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i32 1516, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !4077
  br label %cond.end52, !dbg !4077

cond.false51:                                     ; preds = %cond.end45
  br label %cond.end52, !dbg !4077

cond.end52:                                       ; preds = %cond.false51, %cond.true50
  %cond53 = phi i32 [ 0, %cond.true50 ], [ 0, %cond.false51 ], !dbg !4077
  br label %if.end54

if.end54:                                         ; preds = %cond.end52, %cond.end32
  br label %if.end56, !dbg !4078

if.else55:                                        ; preds = %if.end
  store i8 0, i8* %last_parm_void, align 1, !dbg !4079
  store %struct.VEC_tree_heap* null, %struct.VEC_tree_heap** %otypes, align 8, !dbg !4081
  br label %if.end56

if.end56:                                         ; preds = %if.else55, %if.end54
  store i32 0, i32* %i, align 4, !dbg !4082
  br label %for.cond, !dbg !4084

for.cond:                                         ; preds = %for.inc, %if.end56
  %24 = load i32, i32* %i, align 4, !dbg !4085
  %25 = load i32, i32* %len, align 4, !dbg !4087
  %cmp57 = icmp slt i32 %24, %25, !dbg !4088
  br i1 %cmp57, label %for.body, label %for.end, !dbg !4089

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.ipa_parm_adjustment** %adj, metadata !4090, metadata !DIExpression()), !dbg !4093
  %26 = load %union.tree_node**, %union.tree_node*** %link, align 8, !dbg !4094
  %tobool59 = icmp ne %union.tree_node** %26, null, !dbg !4094
  br i1 %tobool59, label %cond.false61, label %cond.true60, !dbg !4094

cond.true60:                                      ; preds = %for.body
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i32 1527, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !4094
  br label %cond.end62, !dbg !4094

cond.false61:                                     ; preds = %for.body
  br label %cond.end62, !dbg !4094

cond.end62:                                       ; preds = %cond.false61, %cond.true60
  %cond63 = phi i32 [ 0, %cond.true60 ], [ 0, %cond.false61 ], !dbg !4094
  %27 = load %struct.VEC_ipa_parm_adjustment_t_heap*, %struct.VEC_ipa_parm_adjustment_t_heap** %adjustments.addr, align 8, !dbg !4095
  %tobool64 = icmp ne %struct.VEC_ipa_parm_adjustment_t_heap* %27, null, !dbg !4095
  br i1 %tobool64, label %cond.true65, label %cond.false67, !dbg !4095

cond.true65:                                      ; preds = %cond.end62
  %28 = load %struct.VEC_ipa_parm_adjustment_t_heap*, %struct.VEC_ipa_parm_adjustment_t_heap** %adjustments.addr, align 8, !dbg !4095
  %base66 = getelementptr inbounds %struct.VEC_ipa_parm_adjustment_t_heap, %struct.VEC_ipa_parm_adjustment_t_heap* %28, i32 0, i32 0, !dbg !4095
  br label %cond.end68, !dbg !4095

cond.false67:                                     ; preds = %cond.end62
  br label %cond.end68, !dbg !4095

cond.end68:                                       ; preds = %cond.false67, %cond.true65
  %cond69 = phi %struct.VEC_ipa_parm_adjustment_t_base* [ %base66, %cond.true65 ], [ null, %cond.false67 ], !dbg !4095
  %29 = load i32, i32* %i, align 4, !dbg !4095
  %call70 = call %struct.ipa_parm_adjustment* @VEC_ipa_parm_adjustment_t_base_index(%struct.VEC_ipa_parm_adjustment_t_base* %cond69, i32 %29), !dbg !4095
  store %struct.ipa_parm_adjustment* %call70, %struct.ipa_parm_adjustment** %adj, align 8, !dbg !4096
  %30 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %oparms, align 8, !dbg !4097
  %tobool71 = icmp ne %struct.VEC_tree_heap* %30, null, !dbg !4097
  br i1 %tobool71, label %cond.true72, label %cond.false74, !dbg !4097

cond.true72:                                      ; preds = %cond.end68
  %31 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %oparms, align 8, !dbg !4097
  %base73 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %31, i32 0, i32 0, !dbg !4097
  br label %cond.end75, !dbg !4097

cond.false74:                                     ; preds = %cond.end68
  br label %cond.end75, !dbg !4097

cond.end75:                                       ; preds = %cond.false74, %cond.true72
  %cond76 = phi %struct.VEC_tree_base* [ %base73, %cond.true72 ], [ null, %cond.false74 ], !dbg !4097
  %32 = load %struct.ipa_parm_adjustment*, %struct.ipa_parm_adjustment** %adj, align 8, !dbg !4097
  %base_index = getelementptr inbounds %struct.ipa_parm_adjustment, %struct.ipa_parm_adjustment* %32, i32 0, i32 6, !dbg !4097
  %33 = load i32, i32* %base_index, align 8, !dbg !4097
  %call77 = call %union.tree_node* @VEC_tree_base_index(%struct.VEC_tree_base* %cond76, i32 %33), !dbg !4097
  store %union.tree_node* %call77, %union.tree_node** %parm, align 8, !dbg !4098
  %34 = load %union.tree_node*, %union.tree_node** %parm, align 8, !dbg !4099
  %35 = load %struct.ipa_parm_adjustment*, %struct.ipa_parm_adjustment** %adj, align 8, !dbg !4100
  %base78 = getelementptr inbounds %struct.ipa_parm_adjustment, %struct.ipa_parm_adjustment* %35, i32 0, i32 0, !dbg !4101
  store %union.tree_node* %34, %union.tree_node** %base78, align 8, !dbg !4102
  %36 = load %struct.ipa_parm_adjustment*, %struct.ipa_parm_adjustment** %adj, align 8, !dbg !4103
  %copy_param = getelementptr inbounds %struct.ipa_parm_adjustment, %struct.ipa_parm_adjustment* %36, i32 0, i32 7, !dbg !4105
  %bf.load = load i8, i8* %copy_param, align 4, !dbg !4105
  %bf.clear = and i8 %bf.load, 1, !dbg !4105
  %bf.cast = zext i8 %bf.clear to i32, !dbg !4105
  %tobool79 = icmp ne i32 %bf.cast, 0, !dbg !4103
  br i1 %tobool79, label %if.then80, label %if.else94, !dbg !4106

if.then80:                                        ; preds = %cond.end75
  %37 = load i8, i8* %care_for_types, align 1, !dbg !4107
  %tobool81 = icmp ne i8 %37, 0, !dbg !4107
  br i1 %tobool81, label %if.then82, label %if.end92, !dbg !4110

if.then82:                                        ; preds = %if.then80
  %38 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %otypes, align 8, !dbg !4111
  %tobool83 = icmp ne %struct.VEC_tree_heap* %38, null, !dbg !4111
  br i1 %tobool83, label %cond.true84, label %cond.false86, !dbg !4111

cond.true84:                                      ; preds = %if.then82
  %39 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %otypes, align 8, !dbg !4111
  %base85 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %39, i32 0, i32 0, !dbg !4111
  br label %cond.end87, !dbg !4111

cond.false86:                                     ; preds = %if.then82
  br label %cond.end87, !dbg !4111

cond.end87:                                       ; preds = %cond.false86, %cond.true84
  %cond88 = phi %struct.VEC_tree_base* [ %base85, %cond.true84 ], [ null, %cond.false86 ], !dbg !4111
  %40 = load %struct.ipa_parm_adjustment*, %struct.ipa_parm_adjustment** %adj, align 8, !dbg !4111
  %base_index89 = getelementptr inbounds %struct.ipa_parm_adjustment, %struct.ipa_parm_adjustment* %40, i32 0, i32 6, !dbg !4111
  %41 = load i32, i32* %base_index89, align 8, !dbg !4111
  %call90 = call %union.tree_node* @VEC_tree_base_index(%struct.VEC_tree_base* %cond88, i32 %41), !dbg !4111
  %42 = load %union.tree_node*, %union.tree_node** %new_arg_types, align 8, !dbg !4111
  %call91 = call %union.tree_node* @tree_cons_stat(%union.tree_node* null, %union.tree_node* %call90, %union.tree_node* %42), !dbg !4111
  store %union.tree_node* %call91, %union.tree_node** %new_arg_types, align 8, !dbg !4112
  br label %if.end92, !dbg !4113

if.end92:                                         ; preds = %cond.end87, %if.then80
  %43 = load %union.tree_node*, %union.tree_node** %parm, align 8, !dbg !4114
  %44 = load %union.tree_node**, %union.tree_node*** %link, align 8, !dbg !4115
  store %union.tree_node* %43, %union.tree_node** %44, align 8, !dbg !4116
  %45 = load %union.tree_node*, %union.tree_node** %parm, align 8, !dbg !4117
  %common93 = bitcast %union.tree_node* %45 to %struct.tree_common*, !dbg !4117
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common93, i32 0, i32 1, !dbg !4117
  store %union.tree_node** %chain, %union.tree_node*** %link, align 8, !dbg !4118
  br label %if.end134, !dbg !4119

if.else94:                                        ; preds = %cond.end75
  %46 = load %struct.ipa_parm_adjustment*, %struct.ipa_parm_adjustment** %adj, align 8, !dbg !4120
  %remove_param = getelementptr inbounds %struct.ipa_parm_adjustment, %struct.ipa_parm_adjustment* %46, i32 0, i32 7, !dbg !4122
  %bf.load95 = load i8, i8* %remove_param, align 4, !dbg !4122
  %bf.lshr = lshr i8 %bf.load95, 1, !dbg !4122
  %bf.clear96 = and i8 %bf.lshr, 1, !dbg !4122
  %bf.cast97 = zext i8 %bf.clear96 to i32, !dbg !4122
  %tobool98 = icmp ne i32 %bf.cast97, 0, !dbg !4120
  br i1 %tobool98, label %if.end133, label %if.then99, !dbg !4123

if.then99:                                        ; preds = %if.else94
  call void @llvm.dbg.declare(metadata %union.tree_node** %new_parm, metadata !4124, metadata !DIExpression()), !dbg !4126
  call void @llvm.dbg.declare(metadata %union.tree_node** %ptype, metadata !4127, metadata !DIExpression()), !dbg !4128
  %47 = load %struct.ipa_parm_adjustment*, %struct.ipa_parm_adjustment** %adj, align 8, !dbg !4129
  %by_ref = getelementptr inbounds %struct.ipa_parm_adjustment, %struct.ipa_parm_adjustment* %47, i32 0, i32 7, !dbg !4131
  %bf.load100 = load i8, i8* %by_ref, align 4, !dbg !4131
  %bf.lshr101 = lshr i8 %bf.load100, 2, !dbg !4131
  %bf.clear102 = and i8 %bf.lshr101, 1, !dbg !4131
  %bf.cast103 = zext i8 %bf.clear102 to i32, !dbg !4131
  %tobool104 = icmp ne i32 %bf.cast103, 0, !dbg !4129
  br i1 %tobool104, label %if.then105, label %if.else108, !dbg !4132

if.then105:                                       ; preds = %if.then99
  %48 = load %struct.ipa_parm_adjustment*, %struct.ipa_parm_adjustment** %adj, align 8, !dbg !4133
  %type106 = getelementptr inbounds %struct.ipa_parm_adjustment, %struct.ipa_parm_adjustment* %48, i32 0, i32 1, !dbg !4134
  %49 = load %union.tree_node*, %union.tree_node** %type106, align 8, !dbg !4134
  %call107 = call %union.tree_node* @build_pointer_type(%union.tree_node* %49), !dbg !4135
  store %union.tree_node* %call107, %union.tree_node** %ptype, align 8, !dbg !4136
  br label %if.end110, !dbg !4137

if.else108:                                       ; preds = %if.then99
  %50 = load %struct.ipa_parm_adjustment*, %struct.ipa_parm_adjustment** %adj, align 8, !dbg !4138
  %type109 = getelementptr inbounds %struct.ipa_parm_adjustment, %struct.ipa_parm_adjustment* %50, i32 0, i32 1, !dbg !4139
  %51 = load %union.tree_node*, %union.tree_node** %type109, align 8, !dbg !4139
  store %union.tree_node* %51, %union.tree_node** %ptype, align 8, !dbg !4140
  br label %if.end110

if.end110:                                        ; preds = %if.else108, %if.then105
  %52 = load i8, i8* %care_for_types, align 1, !dbg !4141
  %tobool111 = icmp ne i8 %52, 0, !dbg !4141
  br i1 %tobool111, label %if.then112, label %if.end114, !dbg !4143

if.then112:                                       ; preds = %if.end110
  %53 = load %union.tree_node*, %union.tree_node** %ptype, align 8, !dbg !4144
  %54 = load %union.tree_node*, %union.tree_node** %new_arg_types, align 8, !dbg !4144
  %call113 = call %union.tree_node* @tree_cons_stat(%union.tree_node* null, %union.tree_node* %53, %union.tree_node* %54), !dbg !4144
  store %union.tree_node* %call113, %union.tree_node** %new_arg_types, align 8, !dbg !4145
  br label %if.end114, !dbg !4146

if.end114:                                        ; preds = %if.then112, %if.end110
  %55 = load %union.tree_node*, %union.tree_node** %ptype, align 8, !dbg !4147
  %call115 = call %union.tree_node* @build_decl_stat(i32 0, i32 34, %union.tree_node* null, %union.tree_node* %55), !dbg !4147
  store %union.tree_node* %call115, %union.tree_node** %new_parm, align 8, !dbg !4148
  %56 = load i8*, i8** %synth_parm_prefix.addr, align 8, !dbg !4149
  %call116 = call %union.tree_node* @create_tmp_var_name(i8* %56), !dbg !4150
  %57 = load %union.tree_node*, %union.tree_node** %new_parm, align 8, !dbg !4151
  %decl_minimal = bitcast %union.tree_node* %57 to %struct.tree_decl_minimal*, !dbg !4151
  %name = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal, i32 0, i32 3, !dbg !4151
  store %union.tree_node* %call116, %union.tree_node** %name, align 8, !dbg !4152
  %58 = load %union.tree_node*, %union.tree_node** %new_parm, align 8, !dbg !4153
  %decl_common = bitcast %union.tree_node* %58 to %struct.tree_decl_common*, !dbg !4153
  %artificial_flag = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 2, !dbg !4153
  %59 = bitcast i40* %artificial_flag to i64*, !dbg !4153
  %bf.load117 = load i64, i64* %59, align 8, !dbg !4154
  %bf.clear118 = and i64 %bf.load117, -4097, !dbg !4154
  %bf.set = or i64 %bf.clear118, 4096, !dbg !4154
  store i64 %bf.set, i64* %59, align 8, !dbg !4154
  %60 = load %union.tree_node*, %union.tree_node** %ptype, align 8, !dbg !4155
  %61 = load %union.tree_node*, %union.tree_node** %new_parm, align 8, !dbg !4156
  %decl_common119 = bitcast %union.tree_node* %61 to %struct.tree_decl_common*, !dbg !4156
  %initial = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common119, i32 0, i32 5, !dbg !4156
  store %union.tree_node* %60, %union.tree_node** %initial, align 8, !dbg !4157
  %62 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !4158
  %63 = load %union.tree_node*, %union.tree_node** %new_parm, align 8, !dbg !4159
  %decl_minimal120 = bitcast %union.tree_node* %63 to %struct.tree_decl_minimal*, !dbg !4159
  %context = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal120, i32 0, i32 4, !dbg !4159
  store %union.tree_node* %62, %union.tree_node** %context, align 8, !dbg !4160
  %64 = load %union.tree_node*, %union.tree_node** %new_parm, align 8, !dbg !4161
  %base121 = bitcast %union.tree_node* %64 to %struct.tree_base*, !dbg !4161
  %65 = bitcast %struct.tree_base* %base121 to i64*, !dbg !4161
  %bf.load122 = load i64, i64* %65, align 8, !dbg !4162
  %bf.clear123 = and i64 %bf.load122, -16777217, !dbg !4162
  %bf.set124 = or i64 %bf.clear123, 16777216, !dbg !4162
  store i64 %bf.set124, i64* %65, align 8, !dbg !4162
  %66 = load %union.tree_node*, %union.tree_node** %new_parm, align 8, !dbg !4163
  %decl_common125 = bitcast %union.tree_node* %66 to %struct.tree_decl_common*, !dbg !4163
  %ignored_flag = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common125, i32 0, i32 2, !dbg !4163
  %67 = bitcast i40* %ignored_flag to i64*, !dbg !4163
  %bf.load126 = load i64, i64* %67, align 8, !dbg !4164
  %bf.clear127 = and i64 %bf.load126, -1025, !dbg !4164
  %bf.set128 = or i64 %bf.clear127, 1024, !dbg !4164
  store i64 %bf.set128, i64* %67, align 8, !dbg !4164
  %68 = load %union.tree_node*, %union.tree_node** %new_parm, align 8, !dbg !4165
  call void @layout_decl(%union.tree_node* %68, i32 0), !dbg !4166
  %69 = load %union.tree_node*, %union.tree_node** %new_parm, align 8, !dbg !4167
  %call129 = call zeroext i8 @add_referenced_var(%union.tree_node* %69), !dbg !4168
  %70 = load %union.tree_node*, %union.tree_node** %new_parm, align 8, !dbg !4169
  call void @mark_sym_for_renaming(%union.tree_node* %70), !dbg !4170
  %71 = load %union.tree_node*, %union.tree_node** %parm, align 8, !dbg !4171
  %72 = load %struct.ipa_parm_adjustment*, %struct.ipa_parm_adjustment** %adj, align 8, !dbg !4172
  %base130 = getelementptr inbounds %struct.ipa_parm_adjustment, %struct.ipa_parm_adjustment* %72, i32 0, i32 0, !dbg !4173
  store %union.tree_node* %71, %union.tree_node** %base130, align 8, !dbg !4174
  %73 = load %union.tree_node*, %union.tree_node** %new_parm, align 8, !dbg !4175
  %74 = load %struct.ipa_parm_adjustment*, %struct.ipa_parm_adjustment** %adj, align 8, !dbg !4176
  %reduction = getelementptr inbounds %struct.ipa_parm_adjustment, %struct.ipa_parm_adjustment* %74, i32 0, i32 2, !dbg !4177
  store %union.tree_node* %73, %union.tree_node** %reduction, align 8, !dbg !4178
  %75 = load %union.tree_node*, %union.tree_node** %new_parm, align 8, !dbg !4179
  %76 = load %union.tree_node**, %union.tree_node*** %link, align 8, !dbg !4180
  store %union.tree_node* %75, %union.tree_node** %76, align 8, !dbg !4181
  %77 = load %union.tree_node*, %union.tree_node** %new_parm, align 8, !dbg !4182
  %common131 = bitcast %union.tree_node* %77 to %struct.tree_common*, !dbg !4182
  %chain132 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common131, i32 0, i32 1, !dbg !4182
  store %union.tree_node** %chain132, %union.tree_node*** %link, align 8, !dbg !4183
  br label %if.end133, !dbg !4184

if.end133:                                        ; preds = %if.end114, %if.else94
  br label %if.end134

if.end134:                                        ; preds = %if.end133, %if.end92
  br label %for.inc, !dbg !4185

for.inc:                                          ; preds = %if.end134
  %78 = load i32, i32* %i, align 4, !dbg !4186
  %inc = add nsw i32 %78, 1, !dbg !4186
  store i32 %inc, i32* %i, align 4, !dbg !4186
  br label %for.cond, !dbg !4187, !llvm.loop !4188

for.end:                                          ; preds = %for.cond
  %79 = load %union.tree_node**, %union.tree_node*** %link, align 8, !dbg !4190
  store %union.tree_node* null, %union.tree_node** %79, align 8, !dbg !4191
  %80 = load i8, i8* %care_for_types, align 1, !dbg !4192
  %tobool135 = icmp ne i8 %80, 0, !dbg !4192
  br i1 %tobool135, label %if.then136, label %if.end147, !dbg !4194

if.then136:                                       ; preds = %for.end
  %81 = load %union.tree_node*, %union.tree_node** %new_arg_types, align 8, !dbg !4195
  %call137 = call %union.tree_node* @nreverse(%union.tree_node* %81), !dbg !4197
  store %union.tree_node* %call137, %union.tree_node** %new_reversed, align 8, !dbg !4198
  %82 = load i8, i8* %last_parm_void, align 1, !dbg !4199
  %tobool138 = icmp ne i8 %82, 0, !dbg !4199
  br i1 %tobool138, label %if.then139, label %if.end146, !dbg !4201

if.then139:                                       ; preds = %if.then136
  %83 = load %union.tree_node*, %union.tree_node** %new_reversed, align 8, !dbg !4202
  %tobool140 = icmp ne %union.tree_node* %83, null, !dbg !4202
  br i1 %tobool140, label %if.then141, label %if.else144, !dbg !4205

if.then141:                                       ; preds = %if.then139
  %84 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 55), align 8, !dbg !4206
  %85 = load %union.tree_node*, %union.tree_node** %new_arg_types, align 8, !dbg !4207
  %common142 = bitcast %union.tree_node* %85 to %struct.tree_common*, !dbg !4207
  %chain143 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common142, i32 0, i32 1, !dbg !4207
  store %union.tree_node* %84, %union.tree_node** %chain143, align 8, !dbg !4208
  br label %if.end145, !dbg !4207

if.else144:                                       ; preds = %if.then139
  %86 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 55), align 8, !dbg !4209
  store %union.tree_node* %86, %union.tree_node** %new_reversed, align 8, !dbg !4210
  br label %if.end145

if.end145:                                        ; preds = %if.else144, %if.then141
  br label %if.end146, !dbg !4211

if.end146:                                        ; preds = %if.end145, %if.then136
  br label %if.end147, !dbg !4212

if.end147:                                        ; preds = %if.end146, %for.end
  %87 = load %union.tree_node*, %union.tree_node** %orig_type, align 8, !dbg !4213
  %base148 = bitcast %union.tree_node* %87 to %struct.tree_base*, !dbg !4213
  %88 = bitcast %struct.tree_base* %base148 to i64*, !dbg !4213
  %bf.load149 = load i64, i64* %88, align 8, !dbg !4213
  %bf.clear150 = and i64 %bf.load149, 65535, !dbg !4213
  %bf.cast151 = trunc i64 %bf.clear150 to i32, !dbg !4213
  %cmp152 = icmp ne i32 %bf.cast151, 21, !dbg !4215
  br i1 %cmp152, label %if.then176, label %lor.lhs.false, !dbg !4216

lor.lhs.false:                                    ; preds = %if.end147
  %89 = load %struct.VEC_ipa_parm_adjustment_t_heap*, %struct.VEC_ipa_parm_adjustment_t_heap** %adjustments.addr, align 8, !dbg !4217
  %tobool154 = icmp ne %struct.VEC_ipa_parm_adjustment_t_heap* %89, null, !dbg !4217
  br i1 %tobool154, label %cond.true155, label %cond.false157, !dbg !4217

cond.true155:                                     ; preds = %lor.lhs.false
  %90 = load %struct.VEC_ipa_parm_adjustment_t_heap*, %struct.VEC_ipa_parm_adjustment_t_heap** %adjustments.addr, align 8, !dbg !4217
  %base156 = getelementptr inbounds %struct.VEC_ipa_parm_adjustment_t_heap, %struct.VEC_ipa_parm_adjustment_t_heap* %90, i32 0, i32 0, !dbg !4217
  br label %cond.end158, !dbg !4217

cond.false157:                                    ; preds = %lor.lhs.false
  br label %cond.end158, !dbg !4217

cond.end158:                                      ; preds = %cond.false157, %cond.true155
  %cond159 = phi %struct.VEC_ipa_parm_adjustment_t_base* [ %base156, %cond.true155 ], [ null, %cond.false157 ], !dbg !4217
  %call160 = call %struct.ipa_parm_adjustment* @VEC_ipa_parm_adjustment_t_base_index(%struct.VEC_ipa_parm_adjustment_t_base* %cond159, i32 0), !dbg !4217
  %copy_param161 = getelementptr inbounds %struct.ipa_parm_adjustment, %struct.ipa_parm_adjustment* %call160, i32 0, i32 7, !dbg !4218
  %bf.load162 = load i8, i8* %copy_param161, align 4, !dbg !4218
  %bf.clear163 = and i8 %bf.load162, 1, !dbg !4218
  %bf.cast164 = zext i8 %bf.clear163 to i32, !dbg !4218
  %tobool165 = icmp ne i32 %bf.cast164, 0, !dbg !4217
  br i1 %tobool165, label %land.lhs.true, label %if.else180, !dbg !4219

land.lhs.true:                                    ; preds = %cond.end158
  %91 = load %struct.VEC_ipa_parm_adjustment_t_heap*, %struct.VEC_ipa_parm_adjustment_t_heap** %adjustments.addr, align 8, !dbg !4220
  %tobool166 = icmp ne %struct.VEC_ipa_parm_adjustment_t_heap* %91, null, !dbg !4220
  br i1 %tobool166, label %cond.true167, label %cond.false169, !dbg !4220

cond.true167:                                     ; preds = %land.lhs.true
  %92 = load %struct.VEC_ipa_parm_adjustment_t_heap*, %struct.VEC_ipa_parm_adjustment_t_heap** %adjustments.addr, align 8, !dbg !4220
  %base168 = getelementptr inbounds %struct.VEC_ipa_parm_adjustment_t_heap, %struct.VEC_ipa_parm_adjustment_t_heap* %92, i32 0, i32 0, !dbg !4220
  br label %cond.end170, !dbg !4220

cond.false169:                                    ; preds = %land.lhs.true
  br label %cond.end170, !dbg !4220

cond.end170:                                      ; preds = %cond.false169, %cond.true167
  %cond171 = phi %struct.VEC_ipa_parm_adjustment_t_base* [ %base168, %cond.true167 ], [ null, %cond.false169 ], !dbg !4220
  %call172 = call %struct.ipa_parm_adjustment* @VEC_ipa_parm_adjustment_t_base_index(%struct.VEC_ipa_parm_adjustment_t_base* %cond171, i32 0), !dbg !4220
  %base_index173 = getelementptr inbounds %struct.ipa_parm_adjustment, %struct.ipa_parm_adjustment* %call172, i32 0, i32 6, !dbg !4221
  %93 = load i32, i32* %base_index173, align 8, !dbg !4221
  %cmp174 = icmp eq i32 %93, 0, !dbg !4222
  br i1 %cmp174, label %if.then176, label %if.else180, !dbg !4223

if.then176:                                       ; preds = %cond.end170, %if.end147
  %94 = load %union.tree_node*, %union.tree_node** %orig_type, align 8, !dbg !4224
  %call177 = call %union.tree_node* @copy_node_stat(%union.tree_node* %94), !dbg !4224
  store %union.tree_node* %call177, %union.tree_node** %new_type, align 8, !dbg !4226
  %95 = load %union.tree_node*, %union.tree_node** %new_reversed, align 8, !dbg !4227
  %96 = load %union.tree_node*, %union.tree_node** %new_type, align 8, !dbg !4228
  %type178 = bitcast %union.tree_node* %96 to %struct.tree_type*, !dbg !4228
  %values179 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type178, i32 0, i32 1, !dbg !4228
  store %union.tree_node* %95, %union.tree_node** %values179, align 8, !dbg !4229
  br label %if.end190, !dbg !4230

if.else180:                                       ; preds = %cond.end170, %cond.end158
  %97 = load %union.tree_node*, %union.tree_node** %orig_type, align 8, !dbg !4231
  %common181 = bitcast %union.tree_node* %97 to %struct.tree_common*, !dbg !4231
  %type182 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common181, i32 0, i32 2, !dbg !4231
  %98 = load %union.tree_node*, %union.tree_node** %type182, align 8, !dbg !4231
  %99 = load %union.tree_node*, %union.tree_node** %new_reversed, align 8, !dbg !4233
  %call183 = call %union.tree_node* @build_function_type(%union.tree_node* %98, %union.tree_node* %99), !dbg !4234
  %call184 = call %union.tree_node* @build_distinct_type_copy(%union.tree_node* %call183), !dbg !4235
  store %union.tree_node* %call184, %union.tree_node** %new_type, align 8, !dbg !4236
  %100 = load %union.tree_node*, %union.tree_node** %orig_type, align 8, !dbg !4237
  %type185 = bitcast %union.tree_node* %100 to %struct.tree_type*, !dbg !4237
  %context186 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type185, i32 0, i32 18, !dbg !4237
  %101 = load %union.tree_node*, %union.tree_node** %context186, align 8, !dbg !4237
  %102 = load %union.tree_node*, %union.tree_node** %new_type, align 8, !dbg !4238
  %type187 = bitcast %union.tree_node* %102 to %struct.tree_type*, !dbg !4238
  %context188 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type187, i32 0, i32 18, !dbg !4238
  store %union.tree_node* %101, %union.tree_node** %context188, align 8, !dbg !4239
  %103 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !4240
  %decl_non_common189 = bitcast %union.tree_node* %103 to %struct.tree_decl_non_common*, !dbg !4240
  %vindex = getelementptr inbounds %struct.tree_decl_non_common, %struct.tree_decl_non_common* %decl_non_common189, i32 0, i32 4, !dbg !4240
  store %union.tree_node* null, %union.tree_node** %vindex, align 8, !dbg !4241
  br label %if.end190

if.end190:                                        ; preds = %if.else180, %if.then176
  %104 = load %union.tree_node*, %union.tree_node** %orig_type, align 8, !dbg !4242
  %type191 = bitcast %union.tree_node* %104 to %struct.tree_type*, !dbg !4242
  %main_variant = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type191, i32 0, i32 16, !dbg !4242
  %105 = load %union.tree_node*, %union.tree_node** %main_variant, align 8, !dbg !4242
  store %union.tree_node* %105, %union.tree_node** %t, align 8, !dbg !4243
  %106 = load %union.tree_node*, %union.tree_node** %orig_type, align 8, !dbg !4244
  %107 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !4246
  %cmp192 = icmp ne %union.tree_node* %106, %107, !dbg !4247
  br i1 %cmp192, label %if.then194, label %if.else202, !dbg !4248

if.then194:                                       ; preds = %if.end190
  %108 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !4249
  %109 = load %union.tree_node*, %union.tree_node** %new_type, align 8, !dbg !4251
  %type195 = bitcast %union.tree_node* %109 to %struct.tree_type*, !dbg !4251
  %main_variant196 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type195, i32 0, i32 16, !dbg !4251
  store %union.tree_node* %108, %union.tree_node** %main_variant196, align 8, !dbg !4252
  %110 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !4253
  %type197 = bitcast %union.tree_node* %110 to %struct.tree_type*, !dbg !4253
  %next_variant = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type197, i32 0, i32 15, !dbg !4253
  %111 = load %union.tree_node*, %union.tree_node** %next_variant, align 8, !dbg !4253
  %112 = load %union.tree_node*, %union.tree_node** %new_type, align 8, !dbg !4254
  %type198 = bitcast %union.tree_node* %112 to %struct.tree_type*, !dbg !4254
  %next_variant199 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type198, i32 0, i32 15, !dbg !4254
  store %union.tree_node* %111, %union.tree_node** %next_variant199, align 8, !dbg !4255
  %113 = load %union.tree_node*, %union.tree_node** %new_type, align 8, !dbg !4256
  %114 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !4257
  %type200 = bitcast %union.tree_node* %114 to %struct.tree_type*, !dbg !4257
  %next_variant201 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type200, i32 0, i32 15, !dbg !4257
  store %union.tree_node* %113, %union.tree_node** %next_variant201, align 8, !dbg !4258
  br label %if.end207, !dbg !4259

if.else202:                                       ; preds = %if.end190
  %115 = load %union.tree_node*, %union.tree_node** %new_type, align 8, !dbg !4260
  %116 = load %union.tree_node*, %union.tree_node** %new_type, align 8, !dbg !4262
  %type203 = bitcast %union.tree_node* %116 to %struct.tree_type*, !dbg !4262
  %main_variant204 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type203, i32 0, i32 16, !dbg !4262
  store %union.tree_node* %115, %union.tree_node** %main_variant204, align 8, !dbg !4263
  %117 = load %union.tree_node*, %union.tree_node** %new_type, align 8, !dbg !4264
  %type205 = bitcast %union.tree_node* %117 to %struct.tree_type*, !dbg !4264
  %next_variant206 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type205, i32 0, i32 15, !dbg !4264
  store %union.tree_node* null, %union.tree_node** %next_variant206, align 8, !dbg !4265
  br label %if.end207

if.end207:                                        ; preds = %if.else202, %if.then194
  %118 = load %union.tree_node*, %union.tree_node** %new_type, align 8, !dbg !4266
  %119 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !4267
  %common208 = bitcast %union.tree_node* %119 to %struct.tree_common*, !dbg !4267
  %type209 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common208, i32 0, i32 2, !dbg !4267
  store %union.tree_node* %118, %union.tree_node** %type209, align 8, !dbg !4268
  %120 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %otypes, align 8, !dbg !4269
  %tobool210 = icmp ne %struct.VEC_tree_heap* %120, null, !dbg !4269
  br i1 %tobool210, label %if.then211, label %if.end212, !dbg !4271

if.then211:                                       ; preds = %if.end207
  call void @VEC_tree_heap_free(%struct.VEC_tree_heap** %otypes), !dbg !4272
  br label %if.end212, !dbg !4272

if.end212:                                        ; preds = %if.then211, %if.end207
  call void @VEC_tree_heap_free(%struct.VEC_tree_heap** %oparms), !dbg !4273
  ret void, !dbg !4274
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_ipa_parm_adjustment_t_base_length(%struct.VEC_ipa_parm_adjustment_t_base* %vec_) #0 !dbg !4275 {
entry:
  %vec_.addr = alloca %struct.VEC_ipa_parm_adjustment_t_base*, align 8
  store %struct.VEC_ipa_parm_adjustment_t_base* %vec_, %struct.VEC_ipa_parm_adjustment_t_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_ipa_parm_adjustment_t_base** %vec_.addr, metadata !4280, metadata !DIExpression()), !dbg !4281
  %0 = load %struct.VEC_ipa_parm_adjustment_t_base*, %struct.VEC_ipa_parm_adjustment_t_base** %vec_.addr, align 8, !dbg !4281
  %tobool = icmp ne %struct.VEC_ipa_parm_adjustment_t_base* %0, null, !dbg !4281
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4281

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_ipa_parm_adjustment_t_base*, %struct.VEC_ipa_parm_adjustment_t_base** %vec_.addr, align 8, !dbg !4281
  %num = getelementptr inbounds %struct.VEC_ipa_parm_adjustment_t_base, %struct.VEC_ipa_parm_adjustment_t_base* %1, i32 0, i32 0, !dbg !4281
  %2 = load i32, i32* %num, align 8, !dbg !4281
  br label %cond.end, !dbg !4281

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4281

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !4281
  ret i32 %cond, !dbg !4281
}

declare dso_local %union.tree_node* @tree_last(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.VEC_tree_heap* @get_vector_of_formal_parm_types(%union.tree_node* %fntype) #0 !dbg !4282 {
entry:
  %fntype.addr = alloca %union.tree_node*, align 8
  %types = alloca %struct.VEC_tree_heap*, align 8
  %count = alloca i32, align 4
  %t = alloca %union.tree_node*, align 8
  store %union.tree_node* %fntype, %union.tree_node** %fntype.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %fntype.addr, metadata !4283, metadata !DIExpression()), !dbg !4284
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_heap** %types, metadata !4285, metadata !DIExpression()), !dbg !4286
  call void @llvm.dbg.declare(metadata i32* %count, metadata !4287, metadata !DIExpression()), !dbg !4288
  store i32 0, i32* %count, align 4, !dbg !4288
  call void @llvm.dbg.declare(metadata %union.tree_node** %t, metadata !4289, metadata !DIExpression()), !dbg !4290
  %0 = load %union.tree_node*, %union.tree_node** %fntype.addr, align 8, !dbg !4291
  %type = bitcast %union.tree_node* %0 to %struct.tree_type*, !dbg !4291
  %values = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type, i32 0, i32 1, !dbg !4291
  %1 = load %union.tree_node*, %union.tree_node** %values, align 8, !dbg !4291
  store %union.tree_node* %1, %union.tree_node** %t, align 8, !dbg !4293
  br label %for.cond, !dbg !4294

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !4295
  %tobool = icmp ne %union.tree_node* %2, null, !dbg !4297
  br i1 %tobool, label %for.body, label %for.end, !dbg !4297

for.body:                                         ; preds = %for.cond
  %3 = load i32, i32* %count, align 4, !dbg !4298
  %inc = add nsw i32 %3, 1, !dbg !4298
  store i32 %inc, i32* %count, align 4, !dbg !4298
  br label %for.inc, !dbg !4299

for.inc:                                          ; preds = %for.body
  %4 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !4300
  %common = bitcast %union.tree_node* %4 to %struct.tree_common*, !dbg !4300
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 1, !dbg !4300
  %5 = load %union.tree_node*, %union.tree_node** %chain, align 8, !dbg !4300
  store %union.tree_node* %5, %union.tree_node** %t, align 8, !dbg !4301
  br label %for.cond, !dbg !4302, !llvm.loop !4303

for.end:                                          ; preds = %for.cond
  %6 = load i32, i32* %count, align 4, !dbg !4305
  %call = call %struct.VEC_tree_heap* @VEC_tree_heap_alloc(i32 %6), !dbg !4305
  store %struct.VEC_tree_heap* %call, %struct.VEC_tree_heap** %types, align 8, !dbg !4306
  %7 = load %union.tree_node*, %union.tree_node** %fntype.addr, align 8, !dbg !4307
  %type1 = bitcast %union.tree_node* %7 to %struct.tree_type*, !dbg !4307
  %values2 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1, i32 0, i32 1, !dbg !4307
  %8 = load %union.tree_node*, %union.tree_node** %values2, align 8, !dbg !4307
  store %union.tree_node* %8, %union.tree_node** %t, align 8, !dbg !4309
  br label %for.cond3, !dbg !4310

for.cond3:                                        ; preds = %for.inc8, %for.end
  %9 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !4311
  %tobool4 = icmp ne %union.tree_node* %9, null, !dbg !4313
  br i1 %tobool4, label %for.body5, label %for.end11, !dbg !4313

for.body5:                                        ; preds = %for.cond3
  %10 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %types, align 8, !dbg !4314
  %tobool6 = icmp ne %struct.VEC_tree_heap* %10, null, !dbg !4314
  br i1 %tobool6, label %cond.true, label %cond.false, !dbg !4314

cond.true:                                        ; preds = %for.body5
  %11 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %types, align 8, !dbg !4314
  %base = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %11, i32 0, i32 0, !dbg !4314
  br label %cond.end, !dbg !4314

cond.false:                                       ; preds = %for.body5
  br label %cond.end, !dbg !4314

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !4314
  %12 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !4314
  %list = bitcast %union.tree_node* %12 to %struct.tree_list*, !dbg !4314
  %value = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list, i32 0, i32 2, !dbg !4314
  %13 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !4314
  %call7 = call %union.tree_node** @VEC_tree_base_quick_push(%struct.VEC_tree_base* %cond, %union.tree_node* %13), !dbg !4314
  br label %for.inc8, !dbg !4314

for.inc8:                                         ; preds = %cond.end
  %14 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !4315
  %common9 = bitcast %union.tree_node* %14 to %struct.tree_common*, !dbg !4315
  %chain10 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common9, i32 0, i32 1, !dbg !4315
  %15 = load %union.tree_node*, %union.tree_node** %chain10, align 8, !dbg !4315
  store %union.tree_node* %15, %union.tree_node** %t, align 8, !dbg !4316
  br label %for.cond3, !dbg !4317, !llvm.loop !4318

for.end11:                                        ; preds = %for.cond3
  %16 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %types, align 8, !dbg !4320
  ret %struct.VEC_tree_heap* %16, !dbg !4321
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_tree_base_length(%struct.VEC_tree_base* %vec_) #0 !dbg !4322 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_base*, align 8
  store %struct.VEC_tree_base* %vec_, %struct.VEC_tree_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_base** %vec_.addr, metadata !4327, metadata !DIExpression()), !dbg !4328
  %0 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !4328
  %tobool = icmp ne %struct.VEC_tree_base* %0, null, !dbg !4328
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4328

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !4328
  %num = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %1, i32 0, i32 0, !dbg !4328
  %2 = load i32, i32* %num, align 8, !dbg !4328
  br label %cond.end, !dbg !4328

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4328

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !4328
  ret i32 %cond, !dbg !4328
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ipa_parm_adjustment* @VEC_ipa_parm_adjustment_t_base_index(%struct.VEC_ipa_parm_adjustment_t_base* %vec_, i32 %ix_) #0 !dbg !4329 {
entry:
  %vec_.addr = alloca %struct.VEC_ipa_parm_adjustment_t_base*, align 8
  %ix_.addr = alloca i32, align 4
  store %struct.VEC_ipa_parm_adjustment_t_base* %vec_, %struct.VEC_ipa_parm_adjustment_t_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_ipa_parm_adjustment_t_base** %vec_.addr, metadata !4334, metadata !DIExpression()), !dbg !4335
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !4336, metadata !DIExpression()), !dbg !4335
  %0 = load %struct.VEC_ipa_parm_adjustment_t_base*, %struct.VEC_ipa_parm_adjustment_t_base** %vec_.addr, align 8, !dbg !4335
  %tobool = icmp ne %struct.VEC_ipa_parm_adjustment_t_base* %0, null, !dbg !4335
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !4335

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !4335
  %2 = load %struct.VEC_ipa_parm_adjustment_t_base*, %struct.VEC_ipa_parm_adjustment_t_base** %vec_.addr, align 8, !dbg !4335
  %num = getelementptr inbounds %struct.VEC_ipa_parm_adjustment_t_base, %struct.VEC_ipa_parm_adjustment_t_base* %2, i32 0, i32 0, !dbg !4335
  %3 = load i32, i32* %num, align 8, !dbg !4335
  %cmp = icmp ult i32 %1, %3, !dbg !4335
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !4337
  %land.ext = zext i1 %4 to i32, !dbg !4335
  %5 = load %struct.VEC_ipa_parm_adjustment_t_base*, %struct.VEC_ipa_parm_adjustment_t_base** %vec_.addr, align 8, !dbg !4335
  %vec = getelementptr inbounds %struct.VEC_ipa_parm_adjustment_t_base, %struct.VEC_ipa_parm_adjustment_t_base* %5, i32 0, i32 2, !dbg !4335
  %6 = load i32, i32* %ix_.addr, align 4, !dbg !4335
  %idxprom = zext i32 %6 to i64, !dbg !4335
  %arrayidx = getelementptr inbounds [1 x %struct.ipa_parm_adjustment], [1 x %struct.ipa_parm_adjustment]* %vec, i64 0, i64 %idxprom, !dbg !4335
  ret %struct.ipa_parm_adjustment* %arrayidx, !dbg !4335
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @VEC_tree_base_index(%struct.VEC_tree_base* %vec_, i32 %ix_) #0 !dbg !4338 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_base*, align 8
  %ix_.addr = alloca i32, align 4
  store %struct.VEC_tree_base* %vec_, %struct.VEC_tree_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_base** %vec_.addr, metadata !4341, metadata !DIExpression()), !dbg !4342
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !4343, metadata !DIExpression()), !dbg !4342
  %0 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !4342
  %tobool = icmp ne %struct.VEC_tree_base* %0, null, !dbg !4342
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !4342

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !4342
  %2 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !4342
  %num = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %2, i32 0, i32 0, !dbg !4342
  %3 = load i32, i32* %num, align 8, !dbg !4342
  %cmp = icmp ult i32 %1, %3, !dbg !4342
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !4344
  %land.ext = zext i1 %4 to i32, !dbg !4342
  %5 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !4342
  %vec = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %5, i32 0, i32 2, !dbg !4342
  %6 = load i32, i32* %ix_.addr, align 4, !dbg !4342
  %idxprom = zext i32 %6 to i64, !dbg !4342
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %vec, i64 0, i64 %idxprom, !dbg !4342
  %7 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !4342
  ret %union.tree_node* %7, !dbg !4342
}

declare dso_local %union.tree_node* @tree_cons_stat(%union.tree_node*, %union.tree_node*, %union.tree_node*) #2

declare dso_local %union.tree_node* @build_pointer_type(%union.tree_node*) #2

declare dso_local %union.tree_node* @build_decl_stat(i32, i32, %union.tree_node*, %union.tree_node*) #2

declare dso_local %union.tree_node* @create_tmp_var_name(i8*) #2

declare dso_local void @layout_decl(%union.tree_node*, i32) #2

declare dso_local zeroext i8 @add_referenced_var(%union.tree_node*) #2

declare dso_local void @mark_sym_for_renaming(%union.tree_node*) #2

declare dso_local %union.tree_node* @nreverse(%union.tree_node*) #2

declare dso_local %union.tree_node* @copy_node_stat(%union.tree_node*) #2

declare dso_local %union.tree_node* @build_distinct_type_copy(%union.tree_node*) #2

declare dso_local %union.tree_node* @build_function_type(%union.tree_node*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_tree_heap_free(%struct.VEC_tree_heap** %vec_) #0 !dbg !4345 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_heap**, align 8
  store %struct.VEC_tree_heap** %vec_, %struct.VEC_tree_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_heap*** %vec_.addr, metadata !4349, metadata !DIExpression()), !dbg !4350
  %0 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_.addr, align 8, !dbg !4351
  %1 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %0, align 8, !dbg !4351
  %tobool = icmp ne %struct.VEC_tree_heap* %1, null, !dbg !4351
  br i1 %tobool, label %if.then, label %if.end, !dbg !4350

if.then:                                          ; preds = %entry
  %2 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_.addr, align 8, !dbg !4351
  %3 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %2, align 8, !dbg !4351
  %4 = bitcast %struct.VEC_tree_heap* %3 to i8*, !dbg !4351
  call void @free(i8* %4), !dbg !4351
  br label %if.end, !dbg !4351

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_.addr, align 8, !dbg !4350
  store %struct.VEC_tree_heap* null, %struct.VEC_tree_heap** %5, align 8, !dbg !4350
  ret void, !dbg !4350
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @ipa_modify_call_arguments(%struct.cgraph_edge* %cs, %union.gimple_statement_d* %stmt, %struct.VEC_ipa_parm_adjustment_t_heap* %adjustments) #0 !dbg !4353 {
entry:
  %cs.addr = alloca %struct.cgraph_edge*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %adjustments.addr = alloca %struct.VEC_ipa_parm_adjustment_t_heap*, align 8
  %vargs = alloca %struct.VEC_tree_heap*, align 8
  %new_stmt = alloca %union.gimple_statement_d*, align 8
  %gsi = alloca %struct.gimple_stmt_iterator, align 8
  %callee_decl = alloca %union.tree_node*, align 8
  %i = alloca i32, align 4
  %len = alloca i32, align 4
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  %adj = alloca %struct.ipa_parm_adjustment*, align 8
  %arg = alloca %union.tree_node*, align 8
  %expr = alloca %union.tree_node*, align 8
  %orig_expr = alloca %union.tree_node*, align 8
  %allow_ptr = alloca i8, align 1
  %repl_found = alloca i8, align 1
  %ptrtype = alloca %union.tree_node*, align 8
  store %struct.cgraph_edge* %cs, %struct.cgraph_edge** %cs.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cgraph_edge** %cs.addr, metadata !4356, metadata !DIExpression()), !dbg !4357
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !4358, metadata !DIExpression()), !dbg !4359
  store %struct.VEC_ipa_parm_adjustment_t_heap* %adjustments, %struct.VEC_ipa_parm_adjustment_t_heap** %adjustments.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_ipa_parm_adjustment_t_heap** %adjustments.addr, metadata !4360, metadata !DIExpression()), !dbg !4361
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_heap** %vargs, metadata !4362, metadata !DIExpression()), !dbg !4363
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %new_stmt, metadata !4364, metadata !DIExpression()), !dbg !4365
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %gsi, metadata !4366, metadata !DIExpression()), !dbg !4367
  call void @llvm.dbg.declare(metadata %union.tree_node** %callee_decl, metadata !4368, metadata !DIExpression()), !dbg !4369
  call void @llvm.dbg.declare(metadata i32* %i, metadata !4370, metadata !DIExpression()), !dbg !4371
  call void @llvm.dbg.declare(metadata i32* %len, metadata !4372, metadata !DIExpression()), !dbg !4373
  %0 = load %struct.VEC_ipa_parm_adjustment_t_heap*, %struct.VEC_ipa_parm_adjustment_t_heap** %adjustments.addr, align 8, !dbg !4374
  %tobool = icmp ne %struct.VEC_ipa_parm_adjustment_t_heap* %0, null, !dbg !4374
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4374

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_ipa_parm_adjustment_t_heap*, %struct.VEC_ipa_parm_adjustment_t_heap** %adjustments.addr, align 8, !dbg !4374
  %base = getelementptr inbounds %struct.VEC_ipa_parm_adjustment_t_heap, %struct.VEC_ipa_parm_adjustment_t_heap* %1, i32 0, i32 0, !dbg !4374
  br label %cond.end, !dbg !4374

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4374

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_ipa_parm_adjustment_t_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !4374
  %call = call i32 @VEC_ipa_parm_adjustment_t_base_length(%struct.VEC_ipa_parm_adjustment_t_base* %cond), !dbg !4374
  store i32 %call, i32* %len, align 4, !dbg !4375
  %2 = load i32, i32* %len, align 4, !dbg !4376
  %call1 = call %struct.VEC_tree_heap* @VEC_tree_heap_alloc(i32 %2), !dbg !4376
  store %struct.VEC_tree_heap* %call1, %struct.VEC_tree_heap** %vargs, align 8, !dbg !4377
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4378
  call void @gsi_for_stmt(%struct.gimple_stmt_iterator* sret %tmp, %union.gimple_statement_d* %3), !dbg !4379
  %4 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !4379
  %5 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !4379
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %4, i8* align 8 %5, i64 24, i1 false), !dbg !4379
  store i32 0, i32* %i, align 4, !dbg !4380
  br label %for.cond, !dbg !4382

for.cond:                                         ; preds = %for.inc, %cond.end
  %6 = load i32, i32* %i, align 4, !dbg !4383
  %7 = load i32, i32* %len, align 4, !dbg !4385
  %cmp = icmp slt i32 %6, %7, !dbg !4386
  br i1 %cmp, label %for.body, label %for.end, !dbg !4387

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.ipa_parm_adjustment** %adj, metadata !4388, metadata !DIExpression()), !dbg !4390
  %8 = load %struct.VEC_ipa_parm_adjustment_t_heap*, %struct.VEC_ipa_parm_adjustment_t_heap** %adjustments.addr, align 8, !dbg !4391
  %tobool2 = icmp ne %struct.VEC_ipa_parm_adjustment_t_heap* %8, null, !dbg !4391
  br i1 %tobool2, label %cond.true3, label %cond.false5, !dbg !4391

cond.true3:                                       ; preds = %for.body
  %9 = load %struct.VEC_ipa_parm_adjustment_t_heap*, %struct.VEC_ipa_parm_adjustment_t_heap** %adjustments.addr, align 8, !dbg !4391
  %base4 = getelementptr inbounds %struct.VEC_ipa_parm_adjustment_t_heap, %struct.VEC_ipa_parm_adjustment_t_heap* %9, i32 0, i32 0, !dbg !4391
  br label %cond.end6, !dbg !4391

cond.false5:                                      ; preds = %for.body
  br label %cond.end6, !dbg !4391

cond.end6:                                        ; preds = %cond.false5, %cond.true3
  %cond7 = phi %struct.VEC_ipa_parm_adjustment_t_base* [ %base4, %cond.true3 ], [ null, %cond.false5 ], !dbg !4391
  %10 = load i32, i32* %i, align 4, !dbg !4391
  %call8 = call %struct.ipa_parm_adjustment* @VEC_ipa_parm_adjustment_t_base_index(%struct.VEC_ipa_parm_adjustment_t_base* %cond7, i32 %10), !dbg !4391
  store %struct.ipa_parm_adjustment* %call8, %struct.ipa_parm_adjustment** %adj, align 8, !dbg !4392
  %11 = load %struct.ipa_parm_adjustment*, %struct.ipa_parm_adjustment** %adj, align 8, !dbg !4393
  %copy_param = getelementptr inbounds %struct.ipa_parm_adjustment, %struct.ipa_parm_adjustment* %11, i32 0, i32 7, !dbg !4395
  %bf.load = load i8, i8* %copy_param, align 4, !dbg !4395
  %bf.clear = and i8 %bf.load, 1, !dbg !4395
  %bf.cast = zext i8 %bf.clear to i32, !dbg !4395
  %tobool9 = icmp ne i32 %bf.cast, 0, !dbg !4393
  br i1 %tobool9, label %if.then, label %if.else, !dbg !4396

if.then:                                          ; preds = %cond.end6
  call void @llvm.dbg.declare(metadata %union.tree_node** %arg, metadata !4397, metadata !DIExpression()), !dbg !4399
  %12 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4400
  %13 = load %struct.ipa_parm_adjustment*, %struct.ipa_parm_adjustment** %adj, align 8, !dbg !4401
  %base_index = getelementptr inbounds %struct.ipa_parm_adjustment, %struct.ipa_parm_adjustment* %13, i32 0, i32 6, !dbg !4402
  %14 = load i32, i32* %base_index, align 8, !dbg !4402
  %call10 = call %union.tree_node* @gimple_call_arg(%union.gimple_statement_d* %12, i32 %14), !dbg !4403
  store %union.tree_node* %call10, %union.tree_node** %arg, align 8, !dbg !4399
  %15 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %vargs, align 8, !dbg !4404
  %tobool11 = icmp ne %struct.VEC_tree_heap* %15, null, !dbg !4404
  br i1 %tobool11, label %cond.true12, label %cond.false14, !dbg !4404

cond.true12:                                      ; preds = %if.then
  %16 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %vargs, align 8, !dbg !4404
  %base13 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %16, i32 0, i32 0, !dbg !4404
  br label %cond.end15, !dbg !4404

cond.false14:                                     ; preds = %if.then
  br label %cond.end15, !dbg !4404

cond.end15:                                       ; preds = %cond.false14, %cond.true12
  %cond16 = phi %struct.VEC_tree_base* [ %base13, %cond.true12 ], [ null, %cond.false14 ], !dbg !4404
  %17 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !4404
  %call17 = call %union.tree_node** @VEC_tree_base_quick_push(%struct.VEC_tree_base* %cond16, %union.tree_node* %17), !dbg !4404
  br label %if.end104, !dbg !4405

if.else:                                          ; preds = %cond.end6
  %18 = load %struct.ipa_parm_adjustment*, %struct.ipa_parm_adjustment** %adj, align 8, !dbg !4406
  %remove_param = getelementptr inbounds %struct.ipa_parm_adjustment, %struct.ipa_parm_adjustment* %18, i32 0, i32 7, !dbg !4408
  %bf.load18 = load i8, i8* %remove_param, align 4, !dbg !4408
  %bf.lshr = lshr i8 %bf.load18, 1, !dbg !4408
  %bf.clear19 = and i8 %bf.lshr, 1, !dbg !4408
  %bf.cast20 = zext i8 %bf.clear19 to i32, !dbg !4408
  %tobool21 = icmp ne i32 %bf.cast20, 0, !dbg !4406
  br i1 %tobool21, label %if.end103, label %if.then22, !dbg !4409

if.then22:                                        ; preds = %if.else
  call void @llvm.dbg.declare(metadata %union.tree_node** %expr, metadata !4410, metadata !DIExpression()), !dbg !4412
  call void @llvm.dbg.declare(metadata %union.tree_node** %orig_expr, metadata !4413, metadata !DIExpression()), !dbg !4414
  call void @llvm.dbg.declare(metadata i8* %allow_ptr, metadata !4415, metadata !DIExpression()), !dbg !4416
  call void @llvm.dbg.declare(metadata i8* %repl_found, metadata !4417, metadata !DIExpression()), !dbg !4418
  %19 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4419
  %20 = load %struct.ipa_parm_adjustment*, %struct.ipa_parm_adjustment** %adj, align 8, !dbg !4420
  %base_index23 = getelementptr inbounds %struct.ipa_parm_adjustment, %struct.ipa_parm_adjustment* %20, i32 0, i32 6, !dbg !4421
  %21 = load i32, i32* %base_index23, align 8, !dbg !4421
  %call24 = call %union.tree_node* @gimple_call_arg(%union.gimple_statement_d* %19, i32 %21), !dbg !4422
  store %union.tree_node* %call24, %union.tree_node** %expr, align 8, !dbg !4423
  store %union.tree_node* %call24, %union.tree_node** %orig_expr, align 8, !dbg !4424
  %22 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !4425
  %base25 = bitcast %union.tree_node* %22 to %struct.tree_base*, !dbg !4425
  %23 = bitcast %struct.tree_base* %base25 to i64*, !dbg !4425
  %bf.load26 = load i64, i64* %23, align 8, !dbg !4425
  %bf.clear27 = and i64 %bf.load26, 65535, !dbg !4425
  %bf.cast28 = trunc i64 %bf.clear27 to i32, !dbg !4425
  %cmp29 = icmp eq i32 %bf.cast28, 121, !dbg !4427
  br i1 %cmp29, label %if.then30, label %if.else31, !dbg !4428

if.then30:                                        ; preds = %if.then22
  store i8 0, i8* %allow_ptr, align 1, !dbg !4429
  %24 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !4431
  %exp = bitcast %union.tree_node* %24 to %struct.tree_exp*, !dbg !4431
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !4431
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !4431
  %25 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !4431
  store %union.tree_node* %25, %union.tree_node** %expr, align 8, !dbg !4432
  br label %if.end, !dbg !4433

if.else31:                                        ; preds = %if.then22
  store i8 1, i8* %allow_ptr, align 1, !dbg !4434
  br label %if.end

if.end:                                           ; preds = %if.else31, %if.then30
  %26 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !4435
  %common = bitcast %union.tree_node* %26 to %struct.tree_common*, !dbg !4435
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !4435
  %27 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !4435
  %28 = load %struct.ipa_parm_adjustment*, %struct.ipa_parm_adjustment** %adj, align 8, !dbg !4436
  %offset = getelementptr inbounds %struct.ipa_parm_adjustment, %struct.ipa_parm_adjustment* %28, i32 0, i32 5, !dbg !4437
  %29 = load i64, i64* %offset, align 8, !dbg !4437
  %30 = load %struct.ipa_parm_adjustment*, %struct.ipa_parm_adjustment** %adj, align 8, !dbg !4438
  %type32 = getelementptr inbounds %struct.ipa_parm_adjustment, %struct.ipa_parm_adjustment* %30, i32 0, i32 1, !dbg !4439
  %31 = load %union.tree_node*, %union.tree_node** %type32, align 8, !dbg !4439
  %32 = load i8, i8* %allow_ptr, align 1, !dbg !4440
  %call33 = call zeroext i8 @build_ref_for_offset(%union.tree_node** %expr, %union.tree_node* %27, i64 %29, %union.tree_node* %31, i8 zeroext %32), !dbg !4441
  store i8 %call33, i8* %repl_found, align 1, !dbg !4442
  %33 = load i8, i8* %repl_found, align 1, !dbg !4443
  %tobool34 = icmp ne i8 %33, 0, !dbg !4443
  br i1 %tobool34, label %if.then35, label %if.else44, !dbg !4445

if.then35:                                        ; preds = %if.end
  %34 = load %struct.ipa_parm_adjustment*, %struct.ipa_parm_adjustment** %adj, align 8, !dbg !4446
  %by_ref = getelementptr inbounds %struct.ipa_parm_adjustment, %struct.ipa_parm_adjustment* %34, i32 0, i32 7, !dbg !4449
  %bf.load36 = load i8, i8* %by_ref, align 4, !dbg !4449
  %bf.lshr37 = lshr i8 %bf.load36, 2, !dbg !4449
  %bf.clear38 = and i8 %bf.lshr37, 1, !dbg !4449
  %bf.cast39 = zext i8 %bf.clear38 to i32, !dbg !4449
  %tobool40 = icmp ne i32 %bf.cast39, 0, !dbg !4446
  br i1 %tobool40, label %if.then41, label %if.end43, !dbg !4450

if.then41:                                        ; preds = %if.then35
  %35 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !4451
  %call42 = call %union.tree_node* @build_fold_addr_expr_loc(i32 0, %union.tree_node* %35), !dbg !4451
  store %union.tree_node* %call42, %union.tree_node** %expr, align 8, !dbg !4452
  br label %if.end43, !dbg !4453

if.end43:                                         ; preds = %if.then41, %if.then35
  br label %if.end84, !dbg !4454

if.else44:                                        ; preds = %if.end
  call void @llvm.dbg.declare(metadata %union.tree_node** %ptrtype, metadata !4455, metadata !DIExpression()), !dbg !4457
  %36 = load %struct.ipa_parm_adjustment*, %struct.ipa_parm_adjustment** %adj, align 8, !dbg !4458
  %type45 = getelementptr inbounds %struct.ipa_parm_adjustment, %struct.ipa_parm_adjustment* %36, i32 0, i32 1, !dbg !4459
  %37 = load %union.tree_node*, %union.tree_node** %type45, align 8, !dbg !4459
  %call46 = call %union.tree_node* @build_pointer_type(%union.tree_node* %37), !dbg !4460
  store %union.tree_node* %call46, %union.tree_node** %ptrtype, align 8, !dbg !4457
  %38 = load %union.tree_node*, %union.tree_node** %orig_expr, align 8, !dbg !4461
  store %union.tree_node* %38, %union.tree_node** %expr, align 8, !dbg !4462
  %39 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !4463
  %common47 = bitcast %union.tree_node* %39 to %struct.tree_common*, !dbg !4463
  %type48 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common47, i32 0, i32 2, !dbg !4463
  %40 = load %union.tree_node*, %union.tree_node** %type48, align 8, !dbg !4463
  %base49 = bitcast %union.tree_node* %40 to %struct.tree_base*, !dbg !4463
  %41 = bitcast %struct.tree_base* %base49 to i64*, !dbg !4463
  %bf.load50 = load i64, i64* %41, align 8, !dbg !4463
  %bf.clear51 = and i64 %bf.load50, 65535, !dbg !4463
  %bf.cast52 = trunc i64 %bf.clear51 to i32, !dbg !4463
  %cmp53 = icmp eq i32 %bf.cast52, 10, !dbg !4463
  br i1 %cmp53, label %if.end63, label %lor.lhs.false, !dbg !4463

lor.lhs.false:                                    ; preds = %if.else44
  %42 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !4463
  %common54 = bitcast %union.tree_node* %42 to %struct.tree_common*, !dbg !4463
  %type55 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common54, i32 0, i32 2, !dbg !4463
  %43 = load %union.tree_node*, %union.tree_node** %type55, align 8, !dbg !4463
  %base56 = bitcast %union.tree_node* %43 to %struct.tree_base*, !dbg !4463
  %44 = bitcast %struct.tree_base* %base56 to i64*, !dbg !4463
  %bf.load57 = load i64, i64* %44, align 8, !dbg !4463
  %bf.clear58 = and i64 %bf.load57, 65535, !dbg !4463
  %bf.cast59 = trunc i64 %bf.clear58 to i32, !dbg !4463
  %cmp60 = icmp eq i32 %bf.cast59, 12, !dbg !4463
  br i1 %cmp60, label %if.end63, label %if.then61, !dbg !4465

if.then61:                                        ; preds = %lor.lhs.false
  %45 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !4466
  %call62 = call %union.tree_node* @build_fold_addr_expr_loc(i32 0, %union.tree_node* %45), !dbg !4466
  store %union.tree_node* %call62, %union.tree_node** %expr, align 8, !dbg !4467
  br label %if.end63, !dbg !4468

if.end63:                                         ; preds = %if.then61, %lor.lhs.false, %if.else44
  %46 = load %union.tree_node*, %union.tree_node** %ptrtype, align 8, !dbg !4469
  %47 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !4471
  %common64 = bitcast %union.tree_node* %47 to %struct.tree_common*, !dbg !4471
  %type65 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common64, i32 0, i32 2, !dbg !4471
  %48 = load %union.tree_node*, %union.tree_node** %type65, align 8, !dbg !4471
  %call66 = call zeroext i8 @useless_type_conversion_p(%union.tree_node* %46, %union.tree_node* %48), !dbg !4472
  %tobool67 = icmp ne i8 %call66, 0, !dbg !4472
  br i1 %tobool67, label %if.end70, label %if.then68, !dbg !4473

if.then68:                                        ; preds = %if.end63
  %49 = load %union.tree_node*, %union.tree_node** %ptrtype, align 8, !dbg !4474
  %50 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !4474
  %call69 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %49, %union.tree_node* %50), !dbg !4474
  store %union.tree_node* %call69, %union.tree_node** %expr, align 8, !dbg !4475
  br label %if.end70, !dbg !4476

if.end70:                                         ; preds = %if.then68, %if.end63
  %51 = load %union.tree_node*, %union.tree_node** %ptrtype, align 8, !dbg !4477
  %52 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !4477
  %53 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 41), align 8, !dbg !4477
  %54 = load %struct.ipa_parm_adjustment*, %struct.ipa_parm_adjustment** %adj, align 8, !dbg !4477
  %offset71 = getelementptr inbounds %struct.ipa_parm_adjustment, %struct.ipa_parm_adjustment* %54, i32 0, i32 5, !dbg !4477
  %55 = load i64, i64* %offset71, align 8, !dbg !4477
  %div = sdiv i64 %55, 8, !dbg !4477
  %call72 = call %union.tree_node* @build_int_cst(%union.tree_node* %53, i64 %div), !dbg !4477
  %call73 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 66, %union.tree_node* %51, %union.tree_node* %52, %union.tree_node* %call72), !dbg !4477
  store %union.tree_node* %call73, %union.tree_node** %expr, align 8, !dbg !4478
  %56 = load %struct.ipa_parm_adjustment*, %struct.ipa_parm_adjustment** %adj, align 8, !dbg !4479
  %by_ref74 = getelementptr inbounds %struct.ipa_parm_adjustment, %struct.ipa_parm_adjustment* %56, i32 0, i32 7, !dbg !4481
  %bf.load75 = load i8, i8* %by_ref74, align 4, !dbg !4481
  %bf.lshr76 = lshr i8 %bf.load75, 2, !dbg !4481
  %bf.clear77 = and i8 %bf.lshr76, 1, !dbg !4481
  %bf.cast78 = zext i8 %bf.clear77 to i32, !dbg !4481
  %tobool79 = icmp ne i32 %bf.cast78, 0, !dbg !4479
  br i1 %tobool79, label %if.end83, label %if.then80, !dbg !4482

if.then80:                                        ; preds = %if.end70
  %57 = load %struct.ipa_parm_adjustment*, %struct.ipa_parm_adjustment** %adj, align 8, !dbg !4483
  %type81 = getelementptr inbounds %struct.ipa_parm_adjustment, %struct.ipa_parm_adjustment* %57, i32 0, i32 1, !dbg !4483
  %58 = load %union.tree_node*, %union.tree_node** %type81, align 8, !dbg !4483
  %59 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !4483
  %call82 = call %union.tree_node* @fold_build1_stat_loc(i32 0, i32 47, %union.tree_node* %58, %union.tree_node* %59), !dbg !4483
  store %union.tree_node* %call82, %union.tree_node** %expr, align 8, !dbg !4484
  br label %if.end83, !dbg !4485

if.end83:                                         ; preds = %if.then80, %if.end70
  br label %if.end84

if.end84:                                         ; preds = %if.end83, %if.end43
  %60 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !4486
  %61 = load %struct.ipa_parm_adjustment*, %struct.ipa_parm_adjustment** %adj, align 8, !dbg !4487
  %by_ref85 = getelementptr inbounds %struct.ipa_parm_adjustment, %struct.ipa_parm_adjustment* %61, i32 0, i32 7, !dbg !4488
  %bf.load86 = load i8, i8* %by_ref85, align 4, !dbg !4488
  %bf.lshr87 = lshr i8 %bf.load86, 2, !dbg !4488
  %bf.clear88 = and i8 %bf.lshr87, 1, !dbg !4488
  %bf.cast89 = zext i8 %bf.clear88 to i32, !dbg !4488
  %tobool90 = icmp ne i32 %bf.cast89, 0, !dbg !4487
  br i1 %tobool90, label %lor.end, label %lor.rhs, !dbg !4489

lor.rhs:                                          ; preds = %if.end84
  %62 = load %struct.ipa_parm_adjustment*, %struct.ipa_parm_adjustment** %adj, align 8, !dbg !4490
  %type91 = getelementptr inbounds %struct.ipa_parm_adjustment, %struct.ipa_parm_adjustment* %62, i32 0, i32 1, !dbg !4491
  %63 = load %union.tree_node*, %union.tree_node** %type91, align 8, !dbg !4491
  %call92 = call zeroext i8 @is_gimple_reg_type(%union.tree_node* %63), !dbg !4492
  %conv = zext i8 %call92 to i32, !dbg !4492
  %tobool93 = icmp ne i32 %conv, 0, !dbg !4489
  br label %lor.end, !dbg !4489

lor.end:                                          ; preds = %lor.rhs, %if.end84
  %64 = phi i1 [ true, %if.end84 ], [ %tobool93, %lor.rhs ]
  %lor.ext = zext i1 %64 to i32, !dbg !4489
  %conv94 = trunc i32 %lor.ext to i8, !dbg !4487
  %call95 = call %union.tree_node* @force_gimple_operand_gsi(%struct.gimple_stmt_iterator* %gsi, %union.tree_node* %60, i8 zeroext %conv94, %union.tree_node* null, i8 zeroext 1, i32 1), !dbg !4493
  store %union.tree_node* %call95, %union.tree_node** %expr, align 8, !dbg !4494
  %65 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %vargs, align 8, !dbg !4495
  %tobool96 = icmp ne %struct.VEC_tree_heap* %65, null, !dbg !4495
  br i1 %tobool96, label %cond.true97, label %cond.false99, !dbg !4495

cond.true97:                                      ; preds = %lor.end
  %66 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %vargs, align 8, !dbg !4495
  %base98 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %66, i32 0, i32 0, !dbg !4495
  br label %cond.end100, !dbg !4495

cond.false99:                                     ; preds = %lor.end
  br label %cond.end100, !dbg !4495

cond.end100:                                      ; preds = %cond.false99, %cond.true97
  %cond101 = phi %struct.VEC_tree_base* [ %base98, %cond.true97 ], [ null, %cond.false99 ], !dbg !4495
  %67 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !4495
  %call102 = call %union.tree_node** @VEC_tree_base_quick_push(%struct.VEC_tree_base* %cond101, %union.tree_node* %67), !dbg !4495
  br label %if.end103, !dbg !4496

if.end103:                                        ; preds = %cond.end100, %if.else
  br label %if.end104

if.end104:                                        ; preds = %if.end103, %cond.end15
  br label %for.inc, !dbg !4497

for.inc:                                          ; preds = %if.end104
  %68 = load i32, i32* %i, align 4, !dbg !4498
  %inc = add nsw i32 %68, 1, !dbg !4498
  store i32 %inc, i32* %i, align 4, !dbg !4498
  br label %for.cond, !dbg !4499, !llvm.loop !4500

for.end:                                          ; preds = %for.cond
  %69 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4502
  %tobool105 = icmp ne %struct._IO_FILE* %69, null, !dbg !4502
  br i1 %tobool105, label %land.lhs.true, label %if.end110, !dbg !4504

land.lhs.true:                                    ; preds = %for.end
  %70 = load i32, i32* @dump_flags, align 4, !dbg !4505
  %and = and i32 %70, 8, !dbg !4506
  %tobool106 = icmp ne i32 %and, 0, !dbg !4506
  br i1 %tobool106, label %if.then107, label %if.end110, !dbg !4507

if.then107:                                       ; preds = %land.lhs.true
  %71 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4508
  %call108 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %71, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.22, i64 0, i64 0)), !dbg !4510
  %72 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4511
  %call109 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !4512
  call void @print_gimple_stmt(%struct._IO_FILE* %72, %union.gimple_statement_d* %call109, i32 0, i32 0), !dbg !4513
  br label %if.end110, !dbg !4514

if.end110:                                        ; preds = %if.then107, %land.lhs.true, %for.end
  %73 = load %struct.cgraph_edge*, %struct.cgraph_edge** %cs.addr, align 8, !dbg !4515
  %tobool111 = icmp ne %struct.cgraph_edge* %73, null, !dbg !4515
  br i1 %tobool111, label %cond.false114, label %cond.true112, !dbg !4516

cond.true112:                                     ; preds = %if.end110
  %74 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4517
  %call113 = call %union.tree_node* @gimple_call_fndecl(%union.gimple_statement_d* %74), !dbg !4518
  br label %cond.end115, !dbg !4516

cond.false114:                                    ; preds = %if.end110
  %75 = load %struct.cgraph_edge*, %struct.cgraph_edge** %cs.addr, align 8, !dbg !4519
  %callee = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %75, i32 0, i32 2, !dbg !4520
  %76 = load %struct.cgraph_node*, %struct.cgraph_node** %callee, align 8, !dbg !4520
  %decl = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %76, i32 0, i32 0, !dbg !4521
  %77 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !4521
  br label %cond.end115, !dbg !4516

cond.end115:                                      ; preds = %cond.false114, %cond.true112
  %cond116 = phi %union.tree_node* [ %call113, %cond.true112 ], [ %77, %cond.false114 ], !dbg !4516
  store %union.tree_node* %cond116, %union.tree_node** %callee_decl, align 8, !dbg !4522
  %78 = load %union.tree_node*, %union.tree_node** %callee_decl, align 8, !dbg !4523
  %79 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %vargs, align 8, !dbg !4524
  %call117 = call %union.gimple_statement_d* @gimple_build_call_vec(%union.tree_node* %78, %struct.VEC_tree_heap* %79), !dbg !4525
  store %union.gimple_statement_d* %call117, %union.gimple_statement_d** %new_stmt, align 8, !dbg !4526
  call void @VEC_tree_heap_free(%struct.VEC_tree_heap** %vargs), !dbg !4527
  %80 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4528
  %call118 = call %union.tree_node* @gimple_call_lhs(%union.gimple_statement_d* %80), !dbg !4530
  %tobool119 = icmp ne %union.tree_node* %call118, null, !dbg !4530
  br i1 %tobool119, label %if.then120, label %if.end122, !dbg !4531

if.then120:                                       ; preds = %cond.end115
  %81 = load %union.gimple_statement_d*, %union.gimple_statement_d** %new_stmt, align 8, !dbg !4532
  %82 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4533
  %call121 = call %union.tree_node* @gimple_call_lhs(%union.gimple_statement_d* %82), !dbg !4534
  call void @gimple_call_set_lhs(%union.gimple_statement_d* %81, %union.tree_node* %call121), !dbg !4535
  br label %if.end122, !dbg !4535

if.end122:                                        ; preds = %if.then120, %cond.end115
  %83 = load %union.gimple_statement_d*, %union.gimple_statement_d** %new_stmt, align 8, !dbg !4536
  %84 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4537
  %call123 = call %union.tree_node* @gimple_block(%union.gimple_statement_d* %84), !dbg !4538
  call void @gimple_set_block(%union.gimple_statement_d* %83, %union.tree_node* %call123), !dbg !4539
  %85 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4540
  %call124 = call zeroext i8 @gimple_has_location(%union.gimple_statement_d* %85), !dbg !4542
  %tobool125 = icmp ne i8 %call124, 0, !dbg !4542
  br i1 %tobool125, label %if.then126, label %if.end128, !dbg !4543

if.then126:                                       ; preds = %if.end122
  %86 = load %union.gimple_statement_d*, %union.gimple_statement_d** %new_stmt, align 8, !dbg !4544
  %87 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4545
  %call127 = call i32 @gimple_location(%union.gimple_statement_d* %87), !dbg !4546
  call void @gimple_set_location(%union.gimple_statement_d* %86, i32 %call127), !dbg !4547
  br label %if.end128, !dbg !4547

if.end128:                                        ; preds = %if.then126, %if.end122
  %88 = load %union.gimple_statement_d*, %union.gimple_statement_d** %new_stmt, align 8, !dbg !4548
  %89 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4549
  call void @gimple_call_copy_flags(%union.gimple_statement_d* %88, %union.gimple_statement_d* %89), !dbg !4550
  %90 = load %union.gimple_statement_d*, %union.gimple_statement_d** %new_stmt, align 8, !dbg !4551
  %91 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4552
  %call129 = call %union.tree_node* @gimple_call_chain(%union.gimple_statement_d* %91), !dbg !4553
  call void @gimple_call_set_chain(%union.gimple_statement_d* %90, %union.tree_node* %call129), !dbg !4554
  %92 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4555
  %tobool130 = icmp ne %struct._IO_FILE* %92, null, !dbg !4555
  br i1 %tobool130, label %land.lhs.true131, label %if.end137, !dbg !4557

land.lhs.true131:                                 ; preds = %if.end128
  %93 = load i32, i32* @dump_flags, align 4, !dbg !4558
  %and132 = and i32 %93, 8, !dbg !4559
  %tobool133 = icmp ne i32 %and132, 0, !dbg !4559
  br i1 %tobool133, label %if.then134, label %if.end137, !dbg !4560

if.then134:                                       ; preds = %land.lhs.true131
  %94 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4561
  %call135 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %94, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.23, i64 0, i64 0)), !dbg !4563
  %95 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4564
  %96 = load %union.gimple_statement_d*, %union.gimple_statement_d** %new_stmt, align 8, !dbg !4565
  call void @print_gimple_stmt(%struct._IO_FILE* %95, %union.gimple_statement_d* %96, i32 0, i32 0), !dbg !4566
  %97 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4567
  %call136 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %97, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8, i64 0, i64 0)), !dbg !4568
  br label %if.end137, !dbg !4569

if.end137:                                        ; preds = %if.then134, %land.lhs.true131, %if.end128
  %98 = load %union.gimple_statement_d*, %union.gimple_statement_d** %new_stmt, align 8, !dbg !4570
  call void @gsi_replace(%struct.gimple_stmt_iterator* %gsi, %union.gimple_statement_d* %98, i8 zeroext 1), !dbg !4571
  %99 = load %struct.cgraph_edge*, %struct.cgraph_edge** %cs.addr, align 8, !dbg !4572
  %tobool138 = icmp ne %struct.cgraph_edge* %99, null, !dbg !4572
  br i1 %tobool138, label %if.then139, label %if.end140, !dbg !4574

if.then139:                                       ; preds = %if.end137
  %100 = load %struct.cgraph_edge*, %struct.cgraph_edge** %cs.addr, align 8, !dbg !4575
  %101 = load %union.gimple_statement_d*, %union.gimple_statement_d** %new_stmt, align 8, !dbg !4576
  call void @cgraph_set_call_stmt(%struct.cgraph_edge* %100, %union.gimple_statement_d* %101), !dbg !4577
  br label %if.end140, !dbg !4577

if.end140:                                        ; preds = %if.then139, %if.end137
  call void @update_ssa(i32 2048), !dbg !4578
  call void @free_dominance_info(i32 1), !dbg !4579
  ret void, !dbg !4580
}

declare dso_local void @gsi_for_stmt(%struct.gimple_stmt_iterator* sret, %union.gimple_statement_d*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_call_arg(%union.gimple_statement_d* %gs, i32 %index) #0 !dbg !4581 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %index.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !4584, metadata !DIExpression()), !dbg !4585
  store i32 %index, i32* %index.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %index.addr, metadata !4586, metadata !DIExpression()), !dbg !4587
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !4588
  %1 = load i32, i32* %index.addr, align 4, !dbg !4589
  %add = add i32 %1, 3, !dbg !4590
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 %add), !dbg !4591
  ret %union.tree_node* %call, !dbg !4592
}

declare dso_local zeroext i8 @build_ref_for_offset(%union.tree_node**, %union.tree_node*, i64, %union.tree_node*, i8 zeroext) #2

declare dso_local %union.tree_node* @build_fold_addr_expr_loc(i32, %union.tree_node*) #2

declare dso_local zeroext i8 @useless_type_conversion_p(%union.tree_node*, %union.tree_node*) #2

declare dso_local %union.tree_node* @fold_convert_loc(i32, %union.tree_node*, %union.tree_node*) #2

declare dso_local %union.tree_node* @fold_build2_stat_loc(i32, i32, %union.tree_node*, %union.tree_node*, %union.tree_node*) #2

declare dso_local %union.tree_node* @build_int_cst(%union.tree_node*, i64) #2

declare dso_local %union.tree_node* @fold_build1_stat_loc(i32, i32, %union.tree_node*, %union.tree_node*) #2

declare dso_local %union.tree_node* @force_gimple_operand_gsi(%struct.gimple_stmt_iterator*, %union.tree_node*, i8 zeroext, %union.tree_node*, i8 zeroext, i32) #2

declare dso_local zeroext i8 @is_gimple_reg_type(%union.tree_node*) #2

declare dso_local void @print_gimple_stmt(%struct._IO_FILE*, %union.gimple_statement_d*, i32, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_call_fndecl(%union.gimple_statement_d* %gs) #0 !dbg !4593 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !4596, metadata !DIExpression()), !dbg !4597
  call void @llvm.dbg.declare(metadata %union.tree_node** %addr, metadata !4598, metadata !DIExpression()), !dbg !4599
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !4600
  %call = call %union.tree_node* @gimple_call_fn(%union.gimple_statement_d* %0), !dbg !4601
  store %union.tree_node* %call, %union.tree_node** %addr, align 8, !dbg !4599
  %1 = load %union.tree_node*, %union.tree_node** %addr, align 8, !dbg !4602
  %base = bitcast %union.tree_node* %1 to %struct.tree_base*, !dbg !4602
  %2 = bitcast %struct.tree_base* %base to i64*, !dbg !4602
  %bf.load = load i64, i64* %2, align 8, !dbg !4602
  %bf.clear = and i64 %bf.load, 65535, !dbg !4602
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !4602
  %cmp = icmp eq i32 %bf.cast, 121, !dbg !4604
  br i1 %cmp, label %if.then, label %if.end, !dbg !4605

if.then:                                          ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %addr, align 8, !dbg !4606
  %exp = bitcast %union.tree_node* %3 to %struct.tree_exp*, !dbg !4606
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !4606
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !4606
  %4 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !4606
  store %union.tree_node* %4, %union.tree_node** %retval, align 8, !dbg !4607
  br label %return, !dbg !4607

if.end:                                           ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !4608
  br label %return, !dbg !4608

return:                                           ; preds = %if.end, %if.then
  %5 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !4609
  ret %union.tree_node* %5, !dbg !4609
}

declare dso_local %union.gimple_statement_d* @gimple_build_call_vec(%union.tree_node*, %struct.VEC_tree_heap*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_call_lhs(%union.gimple_statement_d* %gs) #0 !dbg !4610 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !4611, metadata !DIExpression()), !dbg !4612
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !4613
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 0), !dbg !4614
  ret %union.tree_node* %call, !dbg !4615
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_call_set_lhs(%union.gimple_statement_d* %gs, %union.tree_node* %lhs) #0 !dbg !4616 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %lhs.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !4619, metadata !DIExpression()), !dbg !4620
  store %union.tree_node* %lhs, %union.tree_node** %lhs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %lhs.addr, metadata !4621, metadata !DIExpression()), !dbg !4622
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !4623
  %1 = load %union.tree_node*, %union.tree_node** %lhs.addr, align 8, !dbg !4624
  call void @gimple_set_op(%union.gimple_statement_d* %0, i32 0, %union.tree_node* %1), !dbg !4625
  %2 = load %union.tree_node*, %union.tree_node** %lhs.addr, align 8, !dbg !4626
  %tobool = icmp ne %union.tree_node* %2, null, !dbg !4626
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !4628

land.lhs.true:                                    ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %lhs.addr, align 8, !dbg !4629
  %base = bitcast %union.tree_node* %3 to %struct.tree_base*, !dbg !4629
  %4 = bitcast %struct.tree_base* %base to i64*, !dbg !4629
  %bf.load = load i64, i64* %4, align 8, !dbg !4629
  %bf.clear = and i64 %bf.load, 65535, !dbg !4629
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !4629
  %cmp = icmp eq i32 %bf.cast, 141, !dbg !4630
  br i1 %cmp, label %if.then, label %if.end, !dbg !4631

if.then:                                          ; preds = %land.lhs.true
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !4632
  %6 = load %union.tree_node*, %union.tree_node** %lhs.addr, align 8, !dbg !4633
  %ssa_name = bitcast %union.tree_node* %6 to %struct.tree_ssa_name*, !dbg !4633
  %def_stmt = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 2, !dbg !4633
  store %union.gimple_statement_d* %5, %union.gimple_statement_d** %def_stmt, align 8, !dbg !4634
  br label %if.end, !dbg !4633

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  ret void, !dbg !4635
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_set_block(%union.gimple_statement_d* %g, %union.tree_node* %block) #0 !dbg !4636 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  %block.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !4637, metadata !DIExpression()), !dbg !4638
  store %union.tree_node* %block, %union.tree_node** %block.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %block.addr, metadata !4639, metadata !DIExpression()), !dbg !4640
  %0 = load %union.tree_node*, %union.tree_node** %block.addr, align 8, !dbg !4641
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !4642
  %gsbase = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_base*, !dbg !4643
  %block1 = getelementptr inbounds %struct.gimple_statement_base, %struct.gimple_statement_base* %gsbase, i32 0, i32 5, !dbg !4644
  store %union.tree_node* %0, %union.tree_node** %block1, align 8, !dbg !4645
  ret void, !dbg !4646
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_block(%union.gimple_statement_d* %g) #0 !dbg !4647 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !4648, metadata !DIExpression()), !dbg !4649
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !4650
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !4651
  %block = getelementptr inbounds %struct.gimple_statement_base, %struct.gimple_statement_base* %gsbase, i32 0, i32 5, !dbg !4652
  %1 = load %union.tree_node*, %union.tree_node** %block, align 8, !dbg !4652
  ret %union.tree_node* %1, !dbg !4653
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_has_location(%union.gimple_statement_d* %g) #0 !dbg !4654 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !4655, metadata !DIExpression()), !dbg !4656
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !4657
  %call = call i32 @gimple_location(%union.gimple_statement_d* %0), !dbg !4658
  %cmp = icmp ne i32 %call, 0, !dbg !4659
  %conv = zext i1 %cmp to i32, !dbg !4659
  %conv1 = trunc i32 %conv to i8, !dbg !4658
  ret i8 %conv1, !dbg !4660
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_set_location(%union.gimple_statement_d* %g, i32 %location) #0 !dbg !4661 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  %location.addr = alloca i32, align 4
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !4664, metadata !DIExpression()), !dbg !4665
  store i32 %location, i32* %location.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %location.addr, metadata !4666, metadata !DIExpression()), !dbg !4667
  %0 = load i32, i32* %location.addr, align 4, !dbg !4668
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !4669
  %gsbase = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_base*, !dbg !4670
  %location1 = getelementptr inbounds %struct.gimple_statement_base, %struct.gimple_statement_base* %gsbase, i32 0, i32 2, !dbg !4671
  store i32 %0, i32* %location1, align 8, !dbg !4672
  ret void, !dbg !4673
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_location(%union.gimple_statement_d* %g) #0 !dbg !4674 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !4677, metadata !DIExpression()), !dbg !4678
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !4679
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !4680
  %location = getelementptr inbounds %struct.gimple_statement_base, %struct.gimple_statement_base* %gsbase, i32 0, i32 2, !dbg !4681
  %1 = load i32, i32* %location, align 8, !dbg !4681
  ret i32 %1, !dbg !4682
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_call_copy_flags(%union.gimple_statement_d* %dest_call, %union.gimple_statement_d* %orig_call) #0 !dbg !4683 {
entry:
  %dest_call.addr = alloca %union.gimple_statement_d*, align 8
  %orig_call.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %dest_call, %union.gimple_statement_d** %dest_call.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %dest_call.addr, metadata !4686, metadata !DIExpression()), !dbg !4687
  store %union.gimple_statement_d* %orig_call, %union.gimple_statement_d** %orig_call.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %orig_call.addr, metadata !4688, metadata !DIExpression()), !dbg !4689
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %orig_call.addr, align 8, !dbg !4690
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !4691
  %1 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !4692
  %bf.load = load i32, i32* %1, align 8, !dbg !4692
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !4692
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %dest_call.addr, align 8, !dbg !4693
  %gsbase1 = bitcast %union.gimple_statement_d* %2 to %struct.gimple_statement_base*, !dbg !4694
  %3 = bitcast %struct.gimple_statement_base* %gsbase1 to i32*, !dbg !4695
  %bf.load2 = load i32, i32* %3, align 8, !dbg !4696
  %bf.value = and i32 %bf.lshr, 65535, !dbg !4696
  %bf.shl = shl i32 %bf.value, 16, !dbg !4696
  %bf.clear = and i32 %bf.load2, 65535, !dbg !4696
  %bf.set = or i32 %bf.clear, %bf.shl, !dbg !4696
  store i32 %bf.set, i32* %3, align 8, !dbg !4696
  ret void, !dbg !4697
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_call_set_chain(%union.gimple_statement_d* %gs, %union.tree_node* %chain) #0 !dbg !4698 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %chain.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !4699, metadata !DIExpression()), !dbg !4700
  store %union.tree_node* %chain, %union.tree_node** %chain.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %chain.addr, metadata !4701, metadata !DIExpression()), !dbg !4702
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !4703
  %1 = load %union.tree_node*, %union.tree_node** %chain.addr, align 8, !dbg !4704
  call void @gimple_set_op(%union.gimple_statement_d* %0, i32 2, %union.tree_node* %1), !dbg !4705
  ret void, !dbg !4706
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_call_chain(%union.gimple_statement_d* %gs) #0 !dbg !4707 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !4708, metadata !DIExpression()), !dbg !4709
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !4710
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 2), !dbg !4711
  ret %union.tree_node* %call, !dbg !4712
}

declare dso_local void @gsi_replace(%struct.gimple_stmt_iterator*, %union.gimple_statement_d*, i8 zeroext) #2

declare dso_local void @cgraph_set_call_stmt(%struct.cgraph_edge*, %union.gimple_statement_d*) #2

declare dso_local void @update_ssa(i32) #2

declare dso_local void @free_dominance_info(i32) #2

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.VEC_ipa_parm_adjustment_t_heap* @ipa_combine_adjustments(%struct.VEC_ipa_parm_adjustment_t_heap* %inner, %struct.VEC_ipa_parm_adjustment_t_heap* %outer) #0 !dbg !4713 {
entry:
  %inner.addr = alloca %struct.VEC_ipa_parm_adjustment_t_heap*, align 8
  %outer.addr = alloca %struct.VEC_ipa_parm_adjustment_t_heap*, align 8
  %i = alloca i32, align 4
  %outlen = alloca i32, align 4
  %inlen = alloca i32, align 4
  %removals = alloca i32, align 4
  %adjustments = alloca %struct.VEC_ipa_parm_adjustment_t_heap*, align 8
  %tmp = alloca %struct.VEC_ipa_parm_adjustment_t_heap*, align 8
  %n = alloca %struct.ipa_parm_adjustment*, align 8
  %r = alloca %struct.ipa_parm_adjustment*, align 8
  %out = alloca %struct.ipa_parm_adjustment*, align 8
  %in = alloca %struct.ipa_parm_adjustment*, align 8
  %n131 = alloca %struct.ipa_parm_adjustment*, align 8
  store %struct.VEC_ipa_parm_adjustment_t_heap* %inner, %struct.VEC_ipa_parm_adjustment_t_heap** %inner.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_ipa_parm_adjustment_t_heap** %inner.addr, metadata !4716, metadata !DIExpression()), !dbg !4717
  store %struct.VEC_ipa_parm_adjustment_t_heap* %outer, %struct.VEC_ipa_parm_adjustment_t_heap** %outer.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_ipa_parm_adjustment_t_heap** %outer.addr, metadata !4718, metadata !DIExpression()), !dbg !4719
  call void @llvm.dbg.declare(metadata i32* %i, metadata !4720, metadata !DIExpression()), !dbg !4721
  call void @llvm.dbg.declare(metadata i32* %outlen, metadata !4722, metadata !DIExpression()), !dbg !4723
  %0 = load %struct.VEC_ipa_parm_adjustment_t_heap*, %struct.VEC_ipa_parm_adjustment_t_heap** %outer.addr, align 8, !dbg !4724
  %tobool = icmp ne %struct.VEC_ipa_parm_adjustment_t_heap* %0, null, !dbg !4724
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4724

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_ipa_parm_adjustment_t_heap*, %struct.VEC_ipa_parm_adjustment_t_heap** %outer.addr, align 8, !dbg !4724
  %base = getelementptr inbounds %struct.VEC_ipa_parm_adjustment_t_heap, %struct.VEC_ipa_parm_adjustment_t_heap* %1, i32 0, i32 0, !dbg !4724
  br label %cond.end, !dbg !4724

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4724

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_ipa_parm_adjustment_t_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !4724
  %call = call i32 @VEC_ipa_parm_adjustment_t_base_length(%struct.VEC_ipa_parm_adjustment_t_base* %cond), !dbg !4724
  store i32 %call, i32* %outlen, align 4, !dbg !4723
  call void @llvm.dbg.declare(metadata i32* %inlen, metadata !4725, metadata !DIExpression()), !dbg !4726
  %2 = load %struct.VEC_ipa_parm_adjustment_t_heap*, %struct.VEC_ipa_parm_adjustment_t_heap** %inner.addr, align 8, !dbg !4727
  %tobool1 = icmp ne %struct.VEC_ipa_parm_adjustment_t_heap* %2, null, !dbg !4727
  br i1 %tobool1, label %cond.true2, label %cond.false4, !dbg !4727

cond.true2:                                       ; preds = %cond.end
  %3 = load %struct.VEC_ipa_parm_adjustment_t_heap*, %struct.VEC_ipa_parm_adjustment_t_heap** %inner.addr, align 8, !dbg !4727
  %base3 = getelementptr inbounds %struct.VEC_ipa_parm_adjustment_t_heap, %struct.VEC_ipa_parm_adjustment_t_heap* %3, i32 0, i32 0, !dbg !4727
  br label %cond.end5, !dbg !4727

cond.false4:                                      ; preds = %cond.end
  br label %cond.end5, !dbg !4727

cond.end5:                                        ; preds = %cond.false4, %cond.true2
  %cond6 = phi %struct.VEC_ipa_parm_adjustment_t_base* [ %base3, %cond.true2 ], [ null, %cond.false4 ], !dbg !4727
  %call7 = call i32 @VEC_ipa_parm_adjustment_t_base_length(%struct.VEC_ipa_parm_adjustment_t_base* %cond6), !dbg !4727
  store i32 %call7, i32* %inlen, align 4, !dbg !4726
  call void @llvm.dbg.declare(metadata i32* %removals, metadata !4728, metadata !DIExpression()), !dbg !4729
  store i32 0, i32* %removals, align 4, !dbg !4729
  call void @llvm.dbg.declare(metadata %struct.VEC_ipa_parm_adjustment_t_heap** %adjustments, metadata !4730, metadata !DIExpression()), !dbg !4731
  call void @llvm.dbg.declare(metadata %struct.VEC_ipa_parm_adjustment_t_heap** %tmp, metadata !4732, metadata !DIExpression()), !dbg !4733
  %4 = load i32, i32* %inlen, align 4, !dbg !4734
  %call8 = call %struct.VEC_ipa_parm_adjustment_t_heap* @VEC_ipa_parm_adjustment_t_heap_alloc(i32 %4), !dbg !4734
  store %struct.VEC_ipa_parm_adjustment_t_heap* %call8, %struct.VEC_ipa_parm_adjustment_t_heap** %tmp, align 8, !dbg !4735
  store i32 0, i32* %i, align 4, !dbg !4736
  br label %for.cond, !dbg !4738

for.cond:                                         ; preds = %for.inc, %cond.end5
  %5 = load i32, i32* %i, align 4, !dbg !4739
  %6 = load i32, i32* %inlen, align 4, !dbg !4741
  %cmp = icmp slt i32 %5, %6, !dbg !4742
  br i1 %cmp, label %for.body, label %for.end, !dbg !4743

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.ipa_parm_adjustment** %n, metadata !4744, metadata !DIExpression()), !dbg !4746
  %7 = load %struct.VEC_ipa_parm_adjustment_t_heap*, %struct.VEC_ipa_parm_adjustment_t_heap** %inner.addr, align 8, !dbg !4747
  %tobool9 = icmp ne %struct.VEC_ipa_parm_adjustment_t_heap* %7, null, !dbg !4747
  br i1 %tobool9, label %cond.true10, label %cond.false12, !dbg !4747

cond.true10:                                      ; preds = %for.body
  %8 = load %struct.VEC_ipa_parm_adjustment_t_heap*, %struct.VEC_ipa_parm_adjustment_t_heap** %inner.addr, align 8, !dbg !4747
  %base11 = getelementptr inbounds %struct.VEC_ipa_parm_adjustment_t_heap, %struct.VEC_ipa_parm_adjustment_t_heap* %8, i32 0, i32 0, !dbg !4747
  br label %cond.end13, !dbg !4747

cond.false12:                                     ; preds = %for.body
  br label %cond.end13, !dbg !4747

cond.end13:                                       ; preds = %cond.false12, %cond.true10
  %cond14 = phi %struct.VEC_ipa_parm_adjustment_t_base* [ %base11, %cond.true10 ], [ null, %cond.false12 ], !dbg !4747
  %9 = load i32, i32* %i, align 4, !dbg !4747
  %call15 = call %struct.ipa_parm_adjustment* @VEC_ipa_parm_adjustment_t_base_index(%struct.VEC_ipa_parm_adjustment_t_base* %cond14, i32 %9), !dbg !4747
  store %struct.ipa_parm_adjustment* %call15, %struct.ipa_parm_adjustment** %n, align 8, !dbg !4748
  %10 = load %struct.ipa_parm_adjustment*, %struct.ipa_parm_adjustment** %n, align 8, !dbg !4749
  %remove_param = getelementptr inbounds %struct.ipa_parm_adjustment, %struct.ipa_parm_adjustment* %10, i32 0, i32 7, !dbg !4751
  %bf.load = load i8, i8* %remove_param, align 4, !dbg !4751
  %bf.lshr = lshr i8 %bf.load, 1, !dbg !4751
  %bf.clear = and i8 %bf.lshr, 1, !dbg !4751
  %bf.cast = zext i8 %bf.clear to i32, !dbg !4751
  %tobool16 = icmp ne i32 %bf.cast, 0, !dbg !4749
  br i1 %tobool16, label %if.then, label %if.else, !dbg !4752

if.then:                                          ; preds = %cond.end13
  %11 = load i32, i32* %removals, align 4, !dbg !4753
  %inc = add nsw i32 %11, 1, !dbg !4753
  store i32 %inc, i32* %removals, align 4, !dbg !4753
  br label %if.end, !dbg !4754

if.else:                                          ; preds = %cond.end13
  %12 = load %struct.VEC_ipa_parm_adjustment_t_heap*, %struct.VEC_ipa_parm_adjustment_t_heap** %tmp, align 8, !dbg !4755
  %tobool17 = icmp ne %struct.VEC_ipa_parm_adjustment_t_heap* %12, null, !dbg !4755
  br i1 %tobool17, label %cond.true18, label %cond.false20, !dbg !4755

cond.true18:                                      ; preds = %if.else
  %13 = load %struct.VEC_ipa_parm_adjustment_t_heap*, %struct.VEC_ipa_parm_adjustment_t_heap** %tmp, align 8, !dbg !4755
  %base19 = getelementptr inbounds %struct.VEC_ipa_parm_adjustment_t_heap, %struct.VEC_ipa_parm_adjustment_t_heap* %13, i32 0, i32 0, !dbg !4755
  br label %cond.end21, !dbg !4755

cond.false20:                                     ; preds = %if.else
  br label %cond.end21, !dbg !4755

cond.end21:                                       ; preds = %cond.false20, %cond.true18
  %cond22 = phi %struct.VEC_ipa_parm_adjustment_t_base* [ %base19, %cond.true18 ], [ null, %cond.false20 ], !dbg !4755
  %14 = load %struct.ipa_parm_adjustment*, %struct.ipa_parm_adjustment** %n, align 8, !dbg !4755
  %call23 = call %struct.ipa_parm_adjustment* @VEC_ipa_parm_adjustment_t_base_quick_push(%struct.VEC_ipa_parm_adjustment_t_base* %cond22, %struct.ipa_parm_adjustment* %14), !dbg !4755
  br label %if.end

if.end:                                           ; preds = %cond.end21, %if.then
  br label %for.inc, !dbg !4756

for.inc:                                          ; preds = %if.end
  %15 = load i32, i32* %i, align 4, !dbg !4757
  %inc24 = add nsw i32 %15, 1, !dbg !4757
  store i32 %inc24, i32* %i, align 4, !dbg !4757
  br label %for.cond, !dbg !4758, !llvm.loop !4759

for.end:                                          ; preds = %for.cond
  %16 = load i32, i32* %outlen, align 4, !dbg !4761
  %17 = load i32, i32* %removals, align 4, !dbg !4761
  %add = add nsw i32 %16, %17, !dbg !4761
  %call25 = call %struct.VEC_ipa_parm_adjustment_t_heap* @VEC_ipa_parm_adjustment_t_heap_alloc(i32 %add), !dbg !4761
  store %struct.VEC_ipa_parm_adjustment_t_heap* %call25, %struct.VEC_ipa_parm_adjustment_t_heap** %adjustments, align 8, !dbg !4762
  store i32 0, i32* %i, align 4, !dbg !4763
  br label %for.cond26, !dbg !4765

for.cond26:                                       ; preds = %for.inc125, %for.end
  %18 = load i32, i32* %i, align 4, !dbg !4766
  %19 = load i32, i32* %outlen, align 4, !dbg !4768
  %cmp27 = icmp slt i32 %18, %19, !dbg !4769
  br i1 %cmp27, label %for.body28, label %for.end127, !dbg !4770

for.body28:                                       ; preds = %for.cond26
  call void @llvm.dbg.declare(metadata %struct.ipa_parm_adjustment** %r, metadata !4771, metadata !DIExpression()), !dbg !4773
  call void @llvm.dbg.declare(metadata %struct.ipa_parm_adjustment** %out, metadata !4774, metadata !DIExpression()), !dbg !4775
  %20 = load %struct.VEC_ipa_parm_adjustment_t_heap*, %struct.VEC_ipa_parm_adjustment_t_heap** %outer.addr, align 8, !dbg !4776
  %tobool29 = icmp ne %struct.VEC_ipa_parm_adjustment_t_heap* %20, null, !dbg !4776
  br i1 %tobool29, label %cond.true30, label %cond.false32, !dbg !4776

cond.true30:                                      ; preds = %for.body28
  %21 = load %struct.VEC_ipa_parm_adjustment_t_heap*, %struct.VEC_ipa_parm_adjustment_t_heap** %outer.addr, align 8, !dbg !4776
  %base31 = getelementptr inbounds %struct.VEC_ipa_parm_adjustment_t_heap, %struct.VEC_ipa_parm_adjustment_t_heap* %21, i32 0, i32 0, !dbg !4776
  br label %cond.end33, !dbg !4776

cond.false32:                                     ; preds = %for.body28
  br label %cond.end33, !dbg !4776

cond.end33:                                       ; preds = %cond.false32, %cond.true30
  %cond34 = phi %struct.VEC_ipa_parm_adjustment_t_base* [ %base31, %cond.true30 ], [ null, %cond.false32 ], !dbg !4776
  %22 = load i32, i32* %i, align 4, !dbg !4776
  %call35 = call %struct.ipa_parm_adjustment* @VEC_ipa_parm_adjustment_t_base_index(%struct.VEC_ipa_parm_adjustment_t_base* %cond34, i32 %22), !dbg !4776
  store %struct.ipa_parm_adjustment* %call35, %struct.ipa_parm_adjustment** %out, align 8, !dbg !4775
  call void @llvm.dbg.declare(metadata %struct.ipa_parm_adjustment** %in, metadata !4777, metadata !DIExpression()), !dbg !4778
  %23 = load %struct.VEC_ipa_parm_adjustment_t_heap*, %struct.VEC_ipa_parm_adjustment_t_heap** %tmp, align 8, !dbg !4779
  %tobool36 = icmp ne %struct.VEC_ipa_parm_adjustment_t_heap* %23, null, !dbg !4779
  br i1 %tobool36, label %cond.true37, label %cond.false39, !dbg !4779

cond.true37:                                      ; preds = %cond.end33
  %24 = load %struct.VEC_ipa_parm_adjustment_t_heap*, %struct.VEC_ipa_parm_adjustment_t_heap** %tmp, align 8, !dbg !4779
  %base38 = getelementptr inbounds %struct.VEC_ipa_parm_adjustment_t_heap, %struct.VEC_ipa_parm_adjustment_t_heap* %24, i32 0, i32 0, !dbg !4779
  br label %cond.end40, !dbg !4779

cond.false39:                                     ; preds = %cond.end33
  br label %cond.end40, !dbg !4779

cond.end40:                                       ; preds = %cond.false39, %cond.true37
  %cond41 = phi %struct.VEC_ipa_parm_adjustment_t_base* [ %base38, %cond.true37 ], [ null, %cond.false39 ], !dbg !4779
  %25 = load %struct.ipa_parm_adjustment*, %struct.ipa_parm_adjustment** %out, align 8, !dbg !4779
  %base_index = getelementptr inbounds %struct.ipa_parm_adjustment, %struct.ipa_parm_adjustment* %25, i32 0, i32 6, !dbg !4779
  %26 = load i32, i32* %base_index, align 8, !dbg !4779
  %call42 = call %struct.ipa_parm_adjustment* @VEC_ipa_parm_adjustment_t_base_index(%struct.VEC_ipa_parm_adjustment_t_base* %cond41, i32 %26), !dbg !4779
  store %struct.ipa_parm_adjustment* %call42, %struct.ipa_parm_adjustment** %in, align 8, !dbg !4778
  %27 = load %struct.ipa_parm_adjustment*, %struct.ipa_parm_adjustment** %in, align 8, !dbg !4780
  %remove_param43 = getelementptr inbounds %struct.ipa_parm_adjustment, %struct.ipa_parm_adjustment* %27, i32 0, i32 7, !dbg !4780
  %bf.load44 = load i8, i8* %remove_param43, align 4, !dbg !4780
  %bf.lshr45 = lshr i8 %bf.load44, 1, !dbg !4780
  %bf.clear46 = and i8 %bf.lshr45, 1, !dbg !4780
  %bf.cast47 = zext i8 %bf.clear46 to i32, !dbg !4780
  %tobool48 = icmp ne i32 %bf.cast47, 0, !dbg !4780
  br i1 %tobool48, label %cond.true49, label %cond.false50, !dbg !4780

cond.true49:                                      ; preds = %cond.end40
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i32 1798, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !4780
  br label %cond.end51, !dbg !4780

cond.false50:                                     ; preds = %cond.end40
  br label %cond.end51, !dbg !4780

cond.end51:                                       ; preds = %cond.false50, %cond.true49
  %cond52 = phi i32 [ 0, %cond.true49 ], [ 0, %cond.false50 ], !dbg !4780
  %28 = load %struct.ipa_parm_adjustment*, %struct.ipa_parm_adjustment** %out, align 8, !dbg !4781
  %remove_param53 = getelementptr inbounds %struct.ipa_parm_adjustment, %struct.ipa_parm_adjustment* %28, i32 0, i32 7, !dbg !4783
  %bf.load54 = load i8, i8* %remove_param53, align 4, !dbg !4783
  %bf.lshr55 = lshr i8 %bf.load54, 1, !dbg !4783
  %bf.clear56 = and i8 %bf.lshr55, 1, !dbg !4783
  %bf.cast57 = zext i8 %bf.clear56 to i32, !dbg !4783
  %tobool58 = icmp ne i32 %bf.cast57, 0, !dbg !4781
  br i1 %tobool58, label %if.then59, label %if.end75, !dbg !4784

if.then59:                                        ; preds = %cond.end51
  %29 = load %struct.ipa_parm_adjustment*, %struct.ipa_parm_adjustment** %in, align 8, !dbg !4785
  %base_index60 = getelementptr inbounds %struct.ipa_parm_adjustment, %struct.ipa_parm_adjustment* %29, i32 0, i32 6, !dbg !4788
  %30 = load i32, i32* %base_index60, align 8, !dbg !4788
  %31 = load %struct.VEC_ipa_parm_adjustment_t_heap*, %struct.VEC_ipa_parm_adjustment_t_heap** %tmp, align 8, !dbg !4789
  %call61 = call zeroext i8 @index_in_adjustments_multiple_times_p(i32 %30, %struct.VEC_ipa_parm_adjustment_t_heap* %31), !dbg !4790
  %tobool62 = icmp ne i8 %call61, 0, !dbg !4790
  br i1 %tobool62, label %if.end74, label %if.then63, !dbg !4791

if.then63:                                        ; preds = %if.then59
  %32 = load %struct.VEC_ipa_parm_adjustment_t_heap*, %struct.VEC_ipa_parm_adjustment_t_heap** %adjustments, align 8, !dbg !4792
  %tobool64 = icmp ne %struct.VEC_ipa_parm_adjustment_t_heap* %32, null, !dbg !4792
  br i1 %tobool64, label %cond.true65, label %cond.false67, !dbg !4792

cond.true65:                                      ; preds = %if.then63
  %33 = load %struct.VEC_ipa_parm_adjustment_t_heap*, %struct.VEC_ipa_parm_adjustment_t_heap** %adjustments, align 8, !dbg !4792
  %base66 = getelementptr inbounds %struct.VEC_ipa_parm_adjustment_t_heap, %struct.VEC_ipa_parm_adjustment_t_heap* %33, i32 0, i32 0, !dbg !4792
  br label %cond.end68, !dbg !4792

cond.false67:                                     ; preds = %if.then63
  br label %cond.end68, !dbg !4792

cond.end68:                                       ; preds = %cond.false67, %cond.true65
  %cond69 = phi %struct.VEC_ipa_parm_adjustment_t_base* [ %base66, %cond.true65 ], [ null, %cond.false67 ], !dbg !4792
  %call70 = call %struct.ipa_parm_adjustment* @VEC_ipa_parm_adjustment_t_base_quick_push(%struct.VEC_ipa_parm_adjustment_t_base* %cond69, %struct.ipa_parm_adjustment* null), !dbg !4792
  store %struct.ipa_parm_adjustment* %call70, %struct.ipa_parm_adjustment** %r, align 8, !dbg !4794
  %34 = load %struct.ipa_parm_adjustment*, %struct.ipa_parm_adjustment** %r, align 8, !dbg !4795
  %35 = bitcast %struct.ipa_parm_adjustment* %34 to i8*, !dbg !4796
  call void @llvm.memset.p0i8.i64(i8* align 8 %35, i8 0, i64 56, i1 false), !dbg !4796
  %36 = load %struct.ipa_parm_adjustment*, %struct.ipa_parm_adjustment** %r, align 8, !dbg !4797
  %remove_param71 = getelementptr inbounds %struct.ipa_parm_adjustment, %struct.ipa_parm_adjustment* %36, i32 0, i32 7, !dbg !4798
  %bf.load72 = load i8, i8* %remove_param71, align 4, !dbg !4799
  %bf.clear73 = and i8 %bf.load72, -3, !dbg !4799
  %bf.set = or i8 %bf.clear73, 2, !dbg !4799
  store i8 %bf.set, i8* %remove_param71, align 4, !dbg !4799
  br label %if.end74, !dbg !4800

if.end74:                                         ; preds = %cond.end68, %if.then59
  br label %for.inc125, !dbg !4801

if.end75:                                         ; preds = %cond.end51
  %37 = load %struct.VEC_ipa_parm_adjustment_t_heap*, %struct.VEC_ipa_parm_adjustment_t_heap** %adjustments, align 8, !dbg !4802
  %tobool76 = icmp ne %struct.VEC_ipa_parm_adjustment_t_heap* %37, null, !dbg !4802
  br i1 %tobool76, label %cond.true77, label %cond.false79, !dbg !4802

cond.true77:                                      ; preds = %if.end75
  %38 = load %struct.VEC_ipa_parm_adjustment_t_heap*, %struct.VEC_ipa_parm_adjustment_t_heap** %adjustments, align 8, !dbg !4802
  %base78 = getelementptr inbounds %struct.VEC_ipa_parm_adjustment_t_heap, %struct.VEC_ipa_parm_adjustment_t_heap* %38, i32 0, i32 0, !dbg !4802
  br label %cond.end80, !dbg !4802

cond.false79:                                     ; preds = %if.end75
  br label %cond.end80, !dbg !4802

cond.end80:                                       ; preds = %cond.false79, %cond.true77
  %cond81 = phi %struct.VEC_ipa_parm_adjustment_t_base* [ %base78, %cond.true77 ], [ null, %cond.false79 ], !dbg !4802
  %call82 = call %struct.ipa_parm_adjustment* @VEC_ipa_parm_adjustment_t_base_quick_push(%struct.VEC_ipa_parm_adjustment_t_base* %cond81, %struct.ipa_parm_adjustment* null), !dbg !4802
  store %struct.ipa_parm_adjustment* %call82, %struct.ipa_parm_adjustment** %r, align 8, !dbg !4803
  %39 = load %struct.ipa_parm_adjustment*, %struct.ipa_parm_adjustment** %r, align 8, !dbg !4804
  %40 = bitcast %struct.ipa_parm_adjustment* %39 to i8*, !dbg !4805
  call void @llvm.memset.p0i8.i64(i8* align 8 %40, i8 0, i64 56, i1 false), !dbg !4805
  %41 = load %struct.ipa_parm_adjustment*, %struct.ipa_parm_adjustment** %in, align 8, !dbg !4806
  %base_index83 = getelementptr inbounds %struct.ipa_parm_adjustment, %struct.ipa_parm_adjustment* %41, i32 0, i32 6, !dbg !4807
  %42 = load i32, i32* %base_index83, align 8, !dbg !4807
  %43 = load %struct.ipa_parm_adjustment*, %struct.ipa_parm_adjustment** %r, align 8, !dbg !4808
  %base_index84 = getelementptr inbounds %struct.ipa_parm_adjustment, %struct.ipa_parm_adjustment* %43, i32 0, i32 6, !dbg !4809
  store i32 %42, i32* %base_index84, align 8, !dbg !4810
  %44 = load %struct.ipa_parm_adjustment*, %struct.ipa_parm_adjustment** %out, align 8, !dbg !4811
  %type = getelementptr inbounds %struct.ipa_parm_adjustment, %struct.ipa_parm_adjustment* %44, i32 0, i32 1, !dbg !4812
  %45 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !4812
  %46 = load %struct.ipa_parm_adjustment*, %struct.ipa_parm_adjustment** %r, align 8, !dbg !4813
  %type85 = getelementptr inbounds %struct.ipa_parm_adjustment, %struct.ipa_parm_adjustment* %46, i32 0, i32 1, !dbg !4814
  store %union.tree_node* %45, %union.tree_node** %type85, align 8, !dbg !4815
  %47 = load %struct.ipa_parm_adjustment*, %struct.ipa_parm_adjustment** %in, align 8, !dbg !4816
  %copy_param = getelementptr inbounds %struct.ipa_parm_adjustment, %struct.ipa_parm_adjustment* %47, i32 0, i32 7, !dbg !4818
  %bf.load86 = load i8, i8* %copy_param, align 4, !dbg !4818
  %bf.clear87 = and i8 %bf.load86, 1, !dbg !4818
  %bf.cast88 = zext i8 %bf.clear87 to i32, !dbg !4818
  %tobool89 = icmp ne i32 %bf.cast88, 0, !dbg !4816
  br i1 %tobool89, label %land.lhs.true, label %if.else100, !dbg !4819

land.lhs.true:                                    ; preds = %cond.end80
  %48 = load %struct.ipa_parm_adjustment*, %struct.ipa_parm_adjustment** %out, align 8, !dbg !4820
  %copy_param90 = getelementptr inbounds %struct.ipa_parm_adjustment, %struct.ipa_parm_adjustment* %48, i32 0, i32 7, !dbg !4821
  %bf.load91 = load i8, i8* %copy_param90, align 4, !dbg !4821
  %bf.clear92 = and i8 %bf.load91, 1, !dbg !4821
  %bf.cast93 = zext i8 %bf.clear92 to i32, !dbg !4821
  %tobool94 = icmp ne i32 %bf.cast93, 0, !dbg !4820
  br i1 %tobool94, label %if.then95, label %if.else100, !dbg !4822

if.then95:                                        ; preds = %land.lhs.true
  %49 = load %struct.ipa_parm_adjustment*, %struct.ipa_parm_adjustment** %r, align 8, !dbg !4823
  %copy_param96 = getelementptr inbounds %struct.ipa_parm_adjustment, %struct.ipa_parm_adjustment* %49, i32 0, i32 7, !dbg !4824
  %bf.load97 = load i8, i8* %copy_param96, align 4, !dbg !4825
  %bf.clear98 = and i8 %bf.load97, -2, !dbg !4825
  %bf.set99 = or i8 %bf.clear98, 1, !dbg !4825
  store i8 %bf.set99, i8* %copy_param96, align 4, !dbg !4825
  br label %if.end124, !dbg !4823

if.else100:                                       ; preds = %land.lhs.true, %cond.end80
  %50 = load %struct.ipa_parm_adjustment*, %struct.ipa_parm_adjustment** %in, align 8, !dbg !4826
  %copy_param101 = getelementptr inbounds %struct.ipa_parm_adjustment, %struct.ipa_parm_adjustment* %50, i32 0, i32 7, !dbg !4828
  %bf.load102 = load i8, i8* %copy_param101, align 4, !dbg !4828
  %bf.clear103 = and i8 %bf.load102, 1, !dbg !4828
  %bf.cast104 = zext i8 %bf.clear103 to i32, !dbg !4828
  %tobool105 = icmp ne i32 %bf.cast104, 0, !dbg !4826
  br i1 %tobool105, label %if.then106, label %if.else108, !dbg !4829

if.then106:                                       ; preds = %if.else100
  %51 = load %struct.ipa_parm_adjustment*, %struct.ipa_parm_adjustment** %out, align 8, !dbg !4830
  %offset = getelementptr inbounds %struct.ipa_parm_adjustment, %struct.ipa_parm_adjustment* %51, i32 0, i32 5, !dbg !4831
  %52 = load i64, i64* %offset, align 8, !dbg !4831
  %53 = load %struct.ipa_parm_adjustment*, %struct.ipa_parm_adjustment** %r, align 8, !dbg !4832
  %offset107 = getelementptr inbounds %struct.ipa_parm_adjustment, %struct.ipa_parm_adjustment* %53, i32 0, i32 5, !dbg !4833
  store i64 %52, i64* %offset107, align 8, !dbg !4834
  br label %if.end123, !dbg !4832

if.else108:                                       ; preds = %if.else100
  %54 = load %struct.ipa_parm_adjustment*, %struct.ipa_parm_adjustment** %out, align 8, !dbg !4835
  %copy_param109 = getelementptr inbounds %struct.ipa_parm_adjustment, %struct.ipa_parm_adjustment* %54, i32 0, i32 7, !dbg !4837
  %bf.load110 = load i8, i8* %copy_param109, align 4, !dbg !4837
  %bf.clear111 = and i8 %bf.load110, 1, !dbg !4837
  %bf.cast112 = zext i8 %bf.clear111 to i32, !dbg !4837
  %tobool113 = icmp ne i32 %bf.cast112, 0, !dbg !4835
  br i1 %tobool113, label %if.then114, label %if.else117, !dbg !4838

if.then114:                                       ; preds = %if.else108
  %55 = load %struct.ipa_parm_adjustment*, %struct.ipa_parm_adjustment** %in, align 8, !dbg !4839
  %offset115 = getelementptr inbounds %struct.ipa_parm_adjustment, %struct.ipa_parm_adjustment* %55, i32 0, i32 5, !dbg !4840
  %56 = load i64, i64* %offset115, align 8, !dbg !4840
  %57 = load %struct.ipa_parm_adjustment*, %struct.ipa_parm_adjustment** %r, align 8, !dbg !4841
  %offset116 = getelementptr inbounds %struct.ipa_parm_adjustment, %struct.ipa_parm_adjustment* %57, i32 0, i32 5, !dbg !4842
  store i64 %56, i64* %offset116, align 8, !dbg !4843
  br label %if.end122, !dbg !4841

if.else117:                                       ; preds = %if.else108
  %58 = load %struct.ipa_parm_adjustment*, %struct.ipa_parm_adjustment** %in, align 8, !dbg !4844
  %offset118 = getelementptr inbounds %struct.ipa_parm_adjustment, %struct.ipa_parm_adjustment* %58, i32 0, i32 5, !dbg !4845
  %59 = load i64, i64* %offset118, align 8, !dbg !4845
  %60 = load %struct.ipa_parm_adjustment*, %struct.ipa_parm_adjustment** %out, align 8, !dbg !4846
  %offset119 = getelementptr inbounds %struct.ipa_parm_adjustment, %struct.ipa_parm_adjustment* %60, i32 0, i32 5, !dbg !4847
  %61 = load i64, i64* %offset119, align 8, !dbg !4847
  %add120 = add nsw i64 %59, %61, !dbg !4848
  %62 = load %struct.ipa_parm_adjustment*, %struct.ipa_parm_adjustment** %r, align 8, !dbg !4849
  %offset121 = getelementptr inbounds %struct.ipa_parm_adjustment, %struct.ipa_parm_adjustment* %62, i32 0, i32 5, !dbg !4850
  store i64 %add120, i64* %offset121, align 8, !dbg !4851
  br label %if.end122

if.end122:                                        ; preds = %if.else117, %if.then114
  br label %if.end123

if.end123:                                        ; preds = %if.end122, %if.then106
  br label %if.end124

if.end124:                                        ; preds = %if.end123, %if.then95
  br label %for.inc125, !dbg !4852

for.inc125:                                       ; preds = %if.end124, %if.end74
  %63 = load i32, i32* %i, align 4, !dbg !4853
  %inc126 = add nsw i32 %63, 1, !dbg !4853
  store i32 %inc126, i32* %i, align 4, !dbg !4853
  br label %for.cond26, !dbg !4854, !llvm.loop !4855

for.end127:                                       ; preds = %for.cond26
  store i32 0, i32* %i, align 4, !dbg !4857
  br label %for.cond128, !dbg !4859

for.cond128:                                      ; preds = %for.inc154, %for.end127
  %64 = load i32, i32* %i, align 4, !dbg !4860
  %65 = load i32, i32* %inlen, align 4, !dbg !4862
  %cmp129 = icmp slt i32 %64, %65, !dbg !4863
  br i1 %cmp129, label %for.body130, label %for.end156, !dbg !4864

for.body130:                                      ; preds = %for.cond128
  call void @llvm.dbg.declare(metadata %struct.ipa_parm_adjustment** %n131, metadata !4865, metadata !DIExpression()), !dbg !4867
  %66 = load %struct.VEC_ipa_parm_adjustment_t_heap*, %struct.VEC_ipa_parm_adjustment_t_heap** %inner.addr, align 8, !dbg !4868
  %tobool132 = icmp ne %struct.VEC_ipa_parm_adjustment_t_heap* %66, null, !dbg !4868
  br i1 %tobool132, label %cond.true133, label %cond.false135, !dbg !4868

cond.true133:                                     ; preds = %for.body130
  %67 = load %struct.VEC_ipa_parm_adjustment_t_heap*, %struct.VEC_ipa_parm_adjustment_t_heap** %inner.addr, align 8, !dbg !4868
  %base134 = getelementptr inbounds %struct.VEC_ipa_parm_adjustment_t_heap, %struct.VEC_ipa_parm_adjustment_t_heap* %67, i32 0, i32 0, !dbg !4868
  br label %cond.end136, !dbg !4868

cond.false135:                                    ; preds = %for.body130
  br label %cond.end136, !dbg !4868

cond.end136:                                      ; preds = %cond.false135, %cond.true133
  %cond137 = phi %struct.VEC_ipa_parm_adjustment_t_base* [ %base134, %cond.true133 ], [ null, %cond.false135 ], !dbg !4868
  %68 = load i32, i32* %i, align 4, !dbg !4868
  %call138 = call %struct.ipa_parm_adjustment* @VEC_ipa_parm_adjustment_t_base_index(%struct.VEC_ipa_parm_adjustment_t_base* %cond137, i32 %68), !dbg !4868
  store %struct.ipa_parm_adjustment* %call138, %struct.ipa_parm_adjustment** %n131, align 8, !dbg !4867
  %69 = load %struct.ipa_parm_adjustment*, %struct.ipa_parm_adjustment** %n131, align 8, !dbg !4869
  %remove_param139 = getelementptr inbounds %struct.ipa_parm_adjustment, %struct.ipa_parm_adjustment* %69, i32 0, i32 7, !dbg !4871
  %bf.load140 = load i8, i8* %remove_param139, align 4, !dbg !4871
  %bf.lshr141 = lshr i8 %bf.load140, 1, !dbg !4871
  %bf.clear142 = and i8 %bf.lshr141, 1, !dbg !4871
  %bf.cast143 = zext i8 %bf.clear142 to i32, !dbg !4871
  %tobool144 = icmp ne i32 %bf.cast143, 0, !dbg !4869
  br i1 %tobool144, label %if.then145, label %if.end153, !dbg !4872

if.then145:                                       ; preds = %cond.end136
  %70 = load %struct.VEC_ipa_parm_adjustment_t_heap*, %struct.VEC_ipa_parm_adjustment_t_heap** %adjustments, align 8, !dbg !4873
  %tobool146 = icmp ne %struct.VEC_ipa_parm_adjustment_t_heap* %70, null, !dbg !4873
  br i1 %tobool146, label %cond.true147, label %cond.false149, !dbg !4873

cond.true147:                                     ; preds = %if.then145
  %71 = load %struct.VEC_ipa_parm_adjustment_t_heap*, %struct.VEC_ipa_parm_adjustment_t_heap** %adjustments, align 8, !dbg !4873
  %base148 = getelementptr inbounds %struct.VEC_ipa_parm_adjustment_t_heap, %struct.VEC_ipa_parm_adjustment_t_heap* %71, i32 0, i32 0, !dbg !4873
  br label %cond.end150, !dbg !4873

cond.false149:                                    ; preds = %if.then145
  br label %cond.end150, !dbg !4873

cond.end150:                                      ; preds = %cond.false149, %cond.true147
  %cond151 = phi %struct.VEC_ipa_parm_adjustment_t_base* [ %base148, %cond.true147 ], [ null, %cond.false149 ], !dbg !4873
  %72 = load %struct.ipa_parm_adjustment*, %struct.ipa_parm_adjustment** %n131, align 8, !dbg !4873
  %call152 = call %struct.ipa_parm_adjustment* @VEC_ipa_parm_adjustment_t_base_quick_push(%struct.VEC_ipa_parm_adjustment_t_base* %cond151, %struct.ipa_parm_adjustment* %72), !dbg !4873
  br label %if.end153, !dbg !4873

if.end153:                                        ; preds = %cond.end150, %cond.end136
  br label %for.inc154, !dbg !4874

for.inc154:                                       ; preds = %if.end153
  %73 = load i32, i32* %i, align 4, !dbg !4875
  %inc155 = add nsw i32 %73, 1, !dbg !4875
  store i32 %inc155, i32* %i, align 4, !dbg !4875
  br label %for.cond128, !dbg !4876, !llvm.loop !4877

for.end156:                                       ; preds = %for.cond128
  call void @VEC_ipa_parm_adjustment_t_heap_free(%struct.VEC_ipa_parm_adjustment_t_heap** %tmp), !dbg !4879
  %74 = load %struct.VEC_ipa_parm_adjustment_t_heap*, %struct.VEC_ipa_parm_adjustment_t_heap** %adjustments, align 8, !dbg !4880
  ret %struct.VEC_ipa_parm_adjustment_t_heap* %74, !dbg !4881
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.VEC_ipa_parm_adjustment_t_heap* @VEC_ipa_parm_adjustment_t_heap_alloc(i32 %alloc_) #0 !dbg !4882 {
entry:
  %alloc_.addr = alloca i32, align 4
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !4885, metadata !DIExpression()), !dbg !4886
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !4886
  %call = call i8* @vec_heap_o_reserve_exact(i8* null, i32 %0, i64 8, i64 56), !dbg !4886
  %1 = bitcast i8* %call to %struct.VEC_ipa_parm_adjustment_t_heap*, !dbg !4886
  ret %struct.VEC_ipa_parm_adjustment_t_heap* %1, !dbg !4886
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ipa_parm_adjustment* @VEC_ipa_parm_adjustment_t_base_quick_push(%struct.VEC_ipa_parm_adjustment_t_base* %vec_, %struct.ipa_parm_adjustment* %obj_) #0 !dbg !4887 {
entry:
  %vec_.addr = alloca %struct.VEC_ipa_parm_adjustment_t_base*, align 8
  %obj_.addr = alloca %struct.ipa_parm_adjustment*, align 8
  %slot_ = alloca %struct.ipa_parm_adjustment*, align 8
  store %struct.VEC_ipa_parm_adjustment_t_base* %vec_, %struct.VEC_ipa_parm_adjustment_t_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_ipa_parm_adjustment_t_base** %vec_.addr, metadata !4892, metadata !DIExpression()), !dbg !4893
  store %struct.ipa_parm_adjustment* %obj_, %struct.ipa_parm_adjustment** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ipa_parm_adjustment** %obj_.addr, metadata !4894, metadata !DIExpression()), !dbg !4893
  call void @llvm.dbg.declare(metadata %struct.ipa_parm_adjustment** %slot_, metadata !4895, metadata !DIExpression()), !dbg !4893
  %0 = load %struct.VEC_ipa_parm_adjustment_t_base*, %struct.VEC_ipa_parm_adjustment_t_base** %vec_.addr, align 8, !dbg !4893
  %num = getelementptr inbounds %struct.VEC_ipa_parm_adjustment_t_base, %struct.VEC_ipa_parm_adjustment_t_base* %0, i32 0, i32 0, !dbg !4893
  %1 = load i32, i32* %num, align 8, !dbg !4893
  %2 = load %struct.VEC_ipa_parm_adjustment_t_base*, %struct.VEC_ipa_parm_adjustment_t_base** %vec_.addr, align 8, !dbg !4893
  %alloc = getelementptr inbounds %struct.VEC_ipa_parm_adjustment_t_base, %struct.VEC_ipa_parm_adjustment_t_base* %2, i32 0, i32 1, !dbg !4893
  %3 = load i32, i32* %alloc, align 4, !dbg !4893
  %cmp = icmp ult i32 %1, %3, !dbg !4893
  %conv = zext i1 %cmp to i32, !dbg !4893
  %4 = load %struct.VEC_ipa_parm_adjustment_t_base*, %struct.VEC_ipa_parm_adjustment_t_base** %vec_.addr, align 8, !dbg !4893
  %vec = getelementptr inbounds %struct.VEC_ipa_parm_adjustment_t_base, %struct.VEC_ipa_parm_adjustment_t_base* %4, i32 0, i32 2, !dbg !4893
  %5 = load %struct.VEC_ipa_parm_adjustment_t_base*, %struct.VEC_ipa_parm_adjustment_t_base** %vec_.addr, align 8, !dbg !4893
  %num1 = getelementptr inbounds %struct.VEC_ipa_parm_adjustment_t_base, %struct.VEC_ipa_parm_adjustment_t_base* %5, i32 0, i32 0, !dbg !4893
  %6 = load i32, i32* %num1, align 8, !dbg !4893
  %inc = add i32 %6, 1, !dbg !4893
  store i32 %inc, i32* %num1, align 8, !dbg !4893
  %idxprom = zext i32 %6 to i64, !dbg !4893
  %arrayidx = getelementptr inbounds [1 x %struct.ipa_parm_adjustment], [1 x %struct.ipa_parm_adjustment]* %vec, i64 0, i64 %idxprom, !dbg !4893
  store %struct.ipa_parm_adjustment* %arrayidx, %struct.ipa_parm_adjustment** %slot_, align 8, !dbg !4893
  %7 = load %struct.ipa_parm_adjustment*, %struct.ipa_parm_adjustment** %obj_.addr, align 8, !dbg !4896
  %tobool = icmp ne %struct.ipa_parm_adjustment* %7, null, !dbg !4896
  br i1 %tobool, label %if.then, label %if.end, !dbg !4893

if.then:                                          ; preds = %entry
  %8 = load %struct.ipa_parm_adjustment*, %struct.ipa_parm_adjustment** %slot_, align 8, !dbg !4896
  %9 = load %struct.ipa_parm_adjustment*, %struct.ipa_parm_adjustment** %obj_.addr, align 8, !dbg !4896
  %10 = bitcast %struct.ipa_parm_adjustment* %8 to i8*, !dbg !4896
  %11 = bitcast %struct.ipa_parm_adjustment* %9 to i8*, !dbg !4896
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %10, i8* align 8 %11, i64 56, i1 false), !dbg !4896
  br label %if.end, !dbg !4896

if.end:                                           ; preds = %if.then, %entry
  %12 = load %struct.ipa_parm_adjustment*, %struct.ipa_parm_adjustment** %slot_, align 8, !dbg !4893
  ret %struct.ipa_parm_adjustment* %12, !dbg !4893
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @index_in_adjustments_multiple_times_p(i32 %base_index, %struct.VEC_ipa_parm_adjustment_t_heap* %adjustments) #0 !dbg !4898 {
entry:
  %retval = alloca i8, align 1
  %base_index.addr = alloca i32, align 4
  %adjustments.addr = alloca %struct.VEC_ipa_parm_adjustment_t_heap*, align 8
  %i = alloca i32, align 4
  %len = alloca i32, align 4
  %one = alloca i8, align 1
  %adj = alloca %struct.ipa_parm_adjustment*, align 8
  store i32 %base_index, i32* %base_index.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %base_index.addr, metadata !4901, metadata !DIExpression()), !dbg !4902
  store %struct.VEC_ipa_parm_adjustment_t_heap* %adjustments, %struct.VEC_ipa_parm_adjustment_t_heap** %adjustments.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_ipa_parm_adjustment_t_heap** %adjustments.addr, metadata !4903, metadata !DIExpression()), !dbg !4904
  call void @llvm.dbg.declare(metadata i32* %i, metadata !4905, metadata !DIExpression()), !dbg !4906
  call void @llvm.dbg.declare(metadata i32* %len, metadata !4907, metadata !DIExpression()), !dbg !4908
  %0 = load %struct.VEC_ipa_parm_adjustment_t_heap*, %struct.VEC_ipa_parm_adjustment_t_heap** %adjustments.addr, align 8, !dbg !4909
  %tobool = icmp ne %struct.VEC_ipa_parm_adjustment_t_heap* %0, null, !dbg !4909
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4909

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_ipa_parm_adjustment_t_heap*, %struct.VEC_ipa_parm_adjustment_t_heap** %adjustments.addr, align 8, !dbg !4909
  %base = getelementptr inbounds %struct.VEC_ipa_parm_adjustment_t_heap, %struct.VEC_ipa_parm_adjustment_t_heap* %1, i32 0, i32 0, !dbg !4909
  br label %cond.end, !dbg !4909

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4909

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_ipa_parm_adjustment_t_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !4909
  %call = call i32 @VEC_ipa_parm_adjustment_t_base_length(%struct.VEC_ipa_parm_adjustment_t_base* %cond), !dbg !4909
  store i32 %call, i32* %len, align 4, !dbg !4908
  call void @llvm.dbg.declare(metadata i8* %one, metadata !4910, metadata !DIExpression()), !dbg !4911
  store i8 0, i8* %one, align 1, !dbg !4911
  store i32 0, i32* %i, align 4, !dbg !4912
  br label %for.cond, !dbg !4914

for.cond:                                         ; preds = %for.inc, %cond.end
  %2 = load i32, i32* %i, align 4, !dbg !4915
  %3 = load i32, i32* %len, align 4, !dbg !4917
  %cmp = icmp slt i32 %2, %3, !dbg !4918
  br i1 %cmp, label %for.body, label %for.end, !dbg !4919

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.ipa_parm_adjustment** %adj, metadata !4920, metadata !DIExpression()), !dbg !4922
  %4 = load %struct.VEC_ipa_parm_adjustment_t_heap*, %struct.VEC_ipa_parm_adjustment_t_heap** %adjustments.addr, align 8, !dbg !4923
  %tobool1 = icmp ne %struct.VEC_ipa_parm_adjustment_t_heap* %4, null, !dbg !4923
  br i1 %tobool1, label %cond.true2, label %cond.false4, !dbg !4923

cond.true2:                                       ; preds = %for.body
  %5 = load %struct.VEC_ipa_parm_adjustment_t_heap*, %struct.VEC_ipa_parm_adjustment_t_heap** %adjustments.addr, align 8, !dbg !4923
  %base3 = getelementptr inbounds %struct.VEC_ipa_parm_adjustment_t_heap, %struct.VEC_ipa_parm_adjustment_t_heap* %5, i32 0, i32 0, !dbg !4923
  br label %cond.end5, !dbg !4923

cond.false4:                                      ; preds = %for.body
  br label %cond.end5, !dbg !4923

cond.end5:                                        ; preds = %cond.false4, %cond.true2
  %cond6 = phi %struct.VEC_ipa_parm_adjustment_t_base* [ %base3, %cond.true2 ], [ null, %cond.false4 ], !dbg !4923
  %6 = load i32, i32* %i, align 4, !dbg !4923
  %call7 = call %struct.ipa_parm_adjustment* @VEC_ipa_parm_adjustment_t_base_index(%struct.VEC_ipa_parm_adjustment_t_base* %cond6, i32 %6), !dbg !4923
  store %struct.ipa_parm_adjustment* %call7, %struct.ipa_parm_adjustment** %adj, align 8, !dbg !4924
  %7 = load %struct.ipa_parm_adjustment*, %struct.ipa_parm_adjustment** %adj, align 8, !dbg !4925
  %base_index8 = getelementptr inbounds %struct.ipa_parm_adjustment, %struct.ipa_parm_adjustment* %7, i32 0, i32 6, !dbg !4927
  %8 = load i32, i32* %base_index8, align 8, !dbg !4927
  %9 = load i32, i32* %base_index.addr, align 4, !dbg !4928
  %cmp9 = icmp eq i32 %8, %9, !dbg !4929
  br i1 %cmp9, label %if.then, label %if.end12, !dbg !4930

if.then:                                          ; preds = %cond.end5
  %10 = load i8, i8* %one, align 1, !dbg !4931
  %tobool10 = icmp ne i8 %10, 0, !dbg !4931
  br i1 %tobool10, label %if.then11, label %if.else, !dbg !4934

if.then11:                                        ; preds = %if.then
  store i8 1, i8* %retval, align 1, !dbg !4935
  br label %return, !dbg !4935

if.else:                                          ; preds = %if.then
  store i8 1, i8* %one, align 1, !dbg !4936
  br label %if.end

if.end:                                           ; preds = %if.else
  br label %if.end12, !dbg !4937

if.end12:                                         ; preds = %if.end, %cond.end5
  br label %for.inc, !dbg !4938

for.inc:                                          ; preds = %if.end12
  %11 = load i32, i32* %i, align 4, !dbg !4939
  %inc = add nsw i32 %11, 1, !dbg !4939
  store i32 %inc, i32* %i, align 4, !dbg !4939
  br label %for.cond, !dbg !4940, !llvm.loop !4941

for.end:                                          ; preds = %for.cond
  store i8 0, i8* %retval, align 1, !dbg !4943
  br label %return, !dbg !4943

return:                                           ; preds = %for.end, %if.then11
  %12 = load i8, i8* %retval, align 1, !dbg !4944
  ret i8 %12, !dbg !4944
}

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_ipa_parm_adjustment_t_heap_free(%struct.VEC_ipa_parm_adjustment_t_heap** %vec_) #0 !dbg !4945 {
entry:
  %vec_.addr = alloca %struct.VEC_ipa_parm_adjustment_t_heap**, align 8
  store %struct.VEC_ipa_parm_adjustment_t_heap** %vec_, %struct.VEC_ipa_parm_adjustment_t_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_ipa_parm_adjustment_t_heap*** %vec_.addr, metadata !4949, metadata !DIExpression()), !dbg !4950
  %0 = load %struct.VEC_ipa_parm_adjustment_t_heap**, %struct.VEC_ipa_parm_adjustment_t_heap*** %vec_.addr, align 8, !dbg !4951
  %1 = load %struct.VEC_ipa_parm_adjustment_t_heap*, %struct.VEC_ipa_parm_adjustment_t_heap** %0, align 8, !dbg !4951
  %tobool = icmp ne %struct.VEC_ipa_parm_adjustment_t_heap* %1, null, !dbg !4951
  br i1 %tobool, label %if.then, label %if.end, !dbg !4950

if.then:                                          ; preds = %entry
  %2 = load %struct.VEC_ipa_parm_adjustment_t_heap**, %struct.VEC_ipa_parm_adjustment_t_heap*** %vec_.addr, align 8, !dbg !4951
  %3 = load %struct.VEC_ipa_parm_adjustment_t_heap*, %struct.VEC_ipa_parm_adjustment_t_heap** %2, align 8, !dbg !4951
  %4 = bitcast %struct.VEC_ipa_parm_adjustment_t_heap* %3 to i8*, !dbg !4951
  call void @free(i8* %4), !dbg !4951
  br label %if.end, !dbg !4951

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.VEC_ipa_parm_adjustment_t_heap**, %struct.VEC_ipa_parm_adjustment_t_heap*** %vec_.addr, align 8, !dbg !4950
  store %struct.VEC_ipa_parm_adjustment_t_heap* null, %struct.VEC_ipa_parm_adjustment_t_heap** %5, align 8, !dbg !4950
  ret void, !dbg !4950
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @ipa_dump_param_adjustments(%struct._IO_FILE* %file, %struct.VEC_ipa_parm_adjustment_t_heap* %adjustments, %union.tree_node* %fndecl) #0 !dbg !4953 {
entry:
  %file.addr = alloca %struct._IO_FILE*, align 8
  %adjustments.addr = alloca %struct.VEC_ipa_parm_adjustment_t_heap*, align 8
  %fndecl.addr = alloca %union.tree_node*, align 8
  %i = alloca i32, align 4
  %len = alloca i32, align 4
  %first = alloca i8, align 1
  %parms = alloca %struct.VEC_tree_heap*, align 8
  %adj = alloca %struct.ipa_parm_adjustment*, align 8
  store %struct._IO_FILE* %file, %struct._IO_FILE** %file.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %file.addr, metadata !4956, metadata !DIExpression()), !dbg !4957
  store %struct.VEC_ipa_parm_adjustment_t_heap* %adjustments, %struct.VEC_ipa_parm_adjustment_t_heap** %adjustments.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_ipa_parm_adjustment_t_heap** %adjustments.addr, metadata !4958, metadata !DIExpression()), !dbg !4959
  store %union.tree_node* %fndecl, %union.tree_node** %fndecl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %fndecl.addr, metadata !4960, metadata !DIExpression()), !dbg !4961
  call void @llvm.dbg.declare(metadata i32* %i, metadata !4962, metadata !DIExpression()), !dbg !4963
  call void @llvm.dbg.declare(metadata i32* %len, metadata !4964, metadata !DIExpression()), !dbg !4965
  %0 = load %struct.VEC_ipa_parm_adjustment_t_heap*, %struct.VEC_ipa_parm_adjustment_t_heap** %adjustments.addr, align 8, !dbg !4966
  %tobool = icmp ne %struct.VEC_ipa_parm_adjustment_t_heap* %0, null, !dbg !4966
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4966

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_ipa_parm_adjustment_t_heap*, %struct.VEC_ipa_parm_adjustment_t_heap** %adjustments.addr, align 8, !dbg !4966
  %base = getelementptr inbounds %struct.VEC_ipa_parm_adjustment_t_heap, %struct.VEC_ipa_parm_adjustment_t_heap* %1, i32 0, i32 0, !dbg !4966
  br label %cond.end, !dbg !4966

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4966

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_ipa_parm_adjustment_t_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !4966
  %call = call i32 @VEC_ipa_parm_adjustment_t_base_length(%struct.VEC_ipa_parm_adjustment_t_base* %cond), !dbg !4966
  store i32 %call, i32* %len, align 4, !dbg !4965
  call void @llvm.dbg.declare(metadata i8* %first, metadata !4967, metadata !DIExpression()), !dbg !4968
  store i8 1, i8* %first, align 1, !dbg !4968
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_heap** %parms, metadata !4969, metadata !DIExpression()), !dbg !4970
  %2 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !4971
  %call1 = call %struct.VEC_tree_heap* @ipa_get_vector_of_formal_parms(%union.tree_node* %2), !dbg !4972
  store %struct.VEC_tree_heap* %call1, %struct.VEC_tree_heap** %parms, align 8, !dbg !4970
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !4973
  %call2 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %3, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.24, i64 0, i64 0)), !dbg !4974
  store i32 0, i32* %i, align 4, !dbg !4975
  br label %for.cond, !dbg !4977

for.cond:                                         ; preds = %for.inc, %cond.end
  %4 = load i32, i32* %i, align 4, !dbg !4978
  %5 = load i32, i32* %len, align 4, !dbg !4980
  %cmp = icmp slt i32 %4, %5, !dbg !4981
  br i1 %cmp, label %for.body, label %for.end, !dbg !4982

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.ipa_parm_adjustment** %adj, metadata !4983, metadata !DIExpression()), !dbg !4985
  %6 = load %struct.VEC_ipa_parm_adjustment_t_heap*, %struct.VEC_ipa_parm_adjustment_t_heap** %adjustments.addr, align 8, !dbg !4986
  %tobool3 = icmp ne %struct.VEC_ipa_parm_adjustment_t_heap* %6, null, !dbg !4986
  br i1 %tobool3, label %cond.true4, label %cond.false6, !dbg !4986

cond.true4:                                       ; preds = %for.body
  %7 = load %struct.VEC_ipa_parm_adjustment_t_heap*, %struct.VEC_ipa_parm_adjustment_t_heap** %adjustments.addr, align 8, !dbg !4986
  %base5 = getelementptr inbounds %struct.VEC_ipa_parm_adjustment_t_heap, %struct.VEC_ipa_parm_adjustment_t_heap* %7, i32 0, i32 0, !dbg !4986
  br label %cond.end7, !dbg !4986

cond.false6:                                      ; preds = %for.body
  br label %cond.end7, !dbg !4986

cond.end7:                                        ; preds = %cond.false6, %cond.true4
  %cond8 = phi %struct.VEC_ipa_parm_adjustment_t_base* [ %base5, %cond.true4 ], [ null, %cond.false6 ], !dbg !4986
  %8 = load i32, i32* %i, align 4, !dbg !4986
  %call9 = call %struct.ipa_parm_adjustment* @VEC_ipa_parm_adjustment_t_base_index(%struct.VEC_ipa_parm_adjustment_t_base* %cond8, i32 %8), !dbg !4986
  store %struct.ipa_parm_adjustment* %call9, %struct.ipa_parm_adjustment** %adj, align 8, !dbg !4987
  %9 = load i8, i8* %first, align 1, !dbg !4988
  %tobool10 = icmp ne i8 %9, 0, !dbg !4988
  br i1 %tobool10, label %if.else, label %if.then, !dbg !4990

if.then:                                          ; preds = %cond.end7
  %10 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !4991
  %call11 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %10, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.25, i64 0, i64 0)), !dbg !4992
  br label %if.end, !dbg !4992

if.else:                                          ; preds = %cond.end7
  store i8 0, i8* %first, align 1, !dbg !4993
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %11 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !4994
  %12 = load i32, i32* %i, align 4, !dbg !4995
  %13 = load %struct.ipa_parm_adjustment*, %struct.ipa_parm_adjustment** %adj, align 8, !dbg !4996
  %base_index = getelementptr inbounds %struct.ipa_parm_adjustment, %struct.ipa_parm_adjustment* %13, i32 0, i32 6, !dbg !4997
  %14 = load i32, i32* %base_index, align 8, !dbg !4997
  %call12 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %11, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.26, i64 0, i64 0), i32 %12, i32 %14), !dbg !4998
  %15 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !4999
  %16 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %parms, align 8, !dbg !5000
  %tobool13 = icmp ne %struct.VEC_tree_heap* %16, null, !dbg !5000
  br i1 %tobool13, label %cond.true14, label %cond.false16, !dbg !5000

cond.true14:                                      ; preds = %if.end
  %17 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %parms, align 8, !dbg !5000
  %base15 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %17, i32 0, i32 0, !dbg !5000
  br label %cond.end17, !dbg !5000

cond.false16:                                     ; preds = %if.end
  br label %cond.end17, !dbg !5000

cond.end17:                                       ; preds = %cond.false16, %cond.true14
  %cond18 = phi %struct.VEC_tree_base* [ %base15, %cond.true14 ], [ null, %cond.false16 ], !dbg !5000
  %18 = load %struct.ipa_parm_adjustment*, %struct.ipa_parm_adjustment** %adj, align 8, !dbg !5000
  %base_index19 = getelementptr inbounds %struct.ipa_parm_adjustment, %struct.ipa_parm_adjustment* %18, i32 0, i32 6, !dbg !5000
  %19 = load i32, i32* %base_index19, align 8, !dbg !5000
  %call20 = call %union.tree_node* @VEC_tree_base_index(%struct.VEC_tree_base* %cond18, i32 %19), !dbg !5000
  call void @print_generic_expr(%struct._IO_FILE* %15, %union.tree_node* %call20, i32 0), !dbg !5001
  %20 = load %struct.ipa_parm_adjustment*, %struct.ipa_parm_adjustment** %adj, align 8, !dbg !5002
  %base21 = getelementptr inbounds %struct.ipa_parm_adjustment, %struct.ipa_parm_adjustment* %20, i32 0, i32 0, !dbg !5004
  %21 = load %union.tree_node*, %union.tree_node** %base21, align 8, !dbg !5004
  %tobool22 = icmp ne %union.tree_node* %21, null, !dbg !5002
  br i1 %tobool22, label %if.then23, label %if.end26, !dbg !5005

if.then23:                                        ; preds = %cond.end17
  %22 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !5006
  %call24 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %22, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.27, i64 0, i64 0)), !dbg !5008
  %23 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !5009
  %24 = load %struct.ipa_parm_adjustment*, %struct.ipa_parm_adjustment** %adj, align 8, !dbg !5010
  %base25 = getelementptr inbounds %struct.ipa_parm_adjustment, %struct.ipa_parm_adjustment* %24, i32 0, i32 0, !dbg !5011
  %25 = load %union.tree_node*, %union.tree_node** %base25, align 8, !dbg !5011
  call void @print_generic_expr(%struct._IO_FILE* %23, %union.tree_node* %25, i32 0), !dbg !5012
  br label %if.end26, !dbg !5013

if.end26:                                         ; preds = %if.then23, %cond.end17
  %26 = load %struct.ipa_parm_adjustment*, %struct.ipa_parm_adjustment** %adj, align 8, !dbg !5014
  %reduction = getelementptr inbounds %struct.ipa_parm_adjustment, %struct.ipa_parm_adjustment* %26, i32 0, i32 2, !dbg !5016
  %27 = load %union.tree_node*, %union.tree_node** %reduction, align 8, !dbg !5016
  %tobool27 = icmp ne %union.tree_node* %27, null, !dbg !5014
  br i1 %tobool27, label %if.then28, label %if.end31, !dbg !5017

if.then28:                                        ; preds = %if.end26
  %28 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !5018
  %call29 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %28, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.28, i64 0, i64 0)), !dbg !5020
  %29 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !5021
  %30 = load %struct.ipa_parm_adjustment*, %struct.ipa_parm_adjustment** %adj, align 8, !dbg !5022
  %reduction30 = getelementptr inbounds %struct.ipa_parm_adjustment, %struct.ipa_parm_adjustment* %30, i32 0, i32 2, !dbg !5023
  %31 = load %union.tree_node*, %union.tree_node** %reduction30, align 8, !dbg !5023
  call void @print_generic_expr(%struct._IO_FILE* %29, %union.tree_node* %31, i32 0), !dbg !5024
  br label %if.end31, !dbg !5025

if.end31:                                         ; preds = %if.then28, %if.end26
  %32 = load %struct.ipa_parm_adjustment*, %struct.ipa_parm_adjustment** %adj, align 8, !dbg !5026
  %new_ssa_base = getelementptr inbounds %struct.ipa_parm_adjustment, %struct.ipa_parm_adjustment* %32, i32 0, i32 3, !dbg !5028
  %33 = load %union.tree_node*, %union.tree_node** %new_ssa_base, align 8, !dbg !5028
  %tobool32 = icmp ne %union.tree_node* %33, null, !dbg !5026
  br i1 %tobool32, label %if.then33, label %if.end36, !dbg !5029

if.then33:                                        ; preds = %if.end31
  %34 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !5030
  %call34 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %34, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.29, i64 0, i64 0)), !dbg !5032
  %35 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !5033
  %36 = load %struct.ipa_parm_adjustment*, %struct.ipa_parm_adjustment** %adj, align 8, !dbg !5034
  %new_ssa_base35 = getelementptr inbounds %struct.ipa_parm_adjustment, %struct.ipa_parm_adjustment* %36, i32 0, i32 3, !dbg !5035
  %37 = load %union.tree_node*, %union.tree_node** %new_ssa_base35, align 8, !dbg !5035
  call void @print_generic_expr(%struct._IO_FILE* %35, %union.tree_node* %37, i32 0), !dbg !5036
  br label %if.end36, !dbg !5037

if.end36:                                         ; preds = %if.then33, %if.end31
  %38 = load %struct.ipa_parm_adjustment*, %struct.ipa_parm_adjustment** %adj, align 8, !dbg !5038
  %copy_param = getelementptr inbounds %struct.ipa_parm_adjustment, %struct.ipa_parm_adjustment* %38, i32 0, i32 7, !dbg !5040
  %bf.load = load i8, i8* %copy_param, align 4, !dbg !5040
  %bf.clear = and i8 %bf.load, 1, !dbg !5040
  %bf.cast = zext i8 %bf.clear to i32, !dbg !5040
  %tobool37 = icmp ne i32 %bf.cast, 0, !dbg !5038
  br i1 %tobool37, label %if.then38, label %if.else40, !dbg !5041

if.then38:                                        ; preds = %if.end36
  %39 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !5042
  %call39 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %39, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.30, i64 0, i64 0)), !dbg !5043
  br label %if.end50, !dbg !5043

if.else40:                                        ; preds = %if.end36
  %40 = load %struct.ipa_parm_adjustment*, %struct.ipa_parm_adjustment** %adj, align 8, !dbg !5044
  %remove_param = getelementptr inbounds %struct.ipa_parm_adjustment, %struct.ipa_parm_adjustment* %40, i32 0, i32 7, !dbg !5046
  %bf.load41 = load i8, i8* %remove_param, align 4, !dbg !5046
  %bf.lshr = lshr i8 %bf.load41, 1, !dbg !5046
  %bf.clear42 = and i8 %bf.lshr, 1, !dbg !5046
  %bf.cast43 = zext i8 %bf.clear42 to i32, !dbg !5046
  %tobool44 = icmp ne i32 %bf.cast43, 0, !dbg !5044
  br i1 %tobool44, label %if.then45, label %if.else47, !dbg !5047

if.then45:                                        ; preds = %if.else40
  %41 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !5048
  %call46 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %41, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.31, i64 0, i64 0)), !dbg !5049
  br label %if.end49, !dbg !5049

if.else47:                                        ; preds = %if.else40
  %42 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !5050
  %43 = load %struct.ipa_parm_adjustment*, %struct.ipa_parm_adjustment** %adj, align 8, !dbg !5051
  %offset = getelementptr inbounds %struct.ipa_parm_adjustment, %struct.ipa_parm_adjustment* %43, i32 0, i32 5, !dbg !5052
  %44 = load i64, i64* %offset, align 8, !dbg !5052
  %call48 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %42, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.32, i64 0, i64 0), i64 %44), !dbg !5053
  br label %if.end49

if.end49:                                         ; preds = %if.else47, %if.then45
  br label %if.end50

if.end50:                                         ; preds = %if.end49, %if.then38
  %45 = load %struct.ipa_parm_adjustment*, %struct.ipa_parm_adjustment** %adj, align 8, !dbg !5054
  %by_ref = getelementptr inbounds %struct.ipa_parm_adjustment, %struct.ipa_parm_adjustment* %45, i32 0, i32 7, !dbg !5056
  %bf.load51 = load i8, i8* %by_ref, align 4, !dbg !5056
  %bf.lshr52 = lshr i8 %bf.load51, 2, !dbg !5056
  %bf.clear53 = and i8 %bf.lshr52, 1, !dbg !5056
  %bf.cast54 = zext i8 %bf.clear53 to i32, !dbg !5056
  %tobool55 = icmp ne i32 %bf.cast54, 0, !dbg !5054
  br i1 %tobool55, label %if.then56, label %if.end58, !dbg !5057

if.then56:                                        ; preds = %if.end50
  %46 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !5058
  %call57 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %46, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.33, i64 0, i64 0)), !dbg !5059
  br label %if.end58, !dbg !5059

if.end58:                                         ; preds = %if.then56, %if.end50
  %47 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !5060
  %48 = load %struct.ipa_parm_adjustment*, %struct.ipa_parm_adjustment** %adj, align 8, !dbg !5061
  %type = getelementptr inbounds %struct.ipa_parm_adjustment, %struct.ipa_parm_adjustment* %48, i32 0, i32 1, !dbg !5062
  %49 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5062
  call void @print_node_brief(%struct._IO_FILE* %47, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.34, i64 0, i64 0), %union.tree_node* %49, i32 0), !dbg !5063
  %50 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !5064
  %call59 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %50, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8, i64 0, i64 0)), !dbg !5065
  br label %for.inc, !dbg !5066

for.inc:                                          ; preds = %if.end58
  %51 = load i32, i32* %i, align 4, !dbg !5067
  %inc = add nsw i32 %51, 1, !dbg !5067
  store i32 %inc, i32* %i, align 4, !dbg !5067
  br label %for.cond, !dbg !5068, !llvm.loop !5069

for.end:                                          ; preds = %for.cond
  call void @VEC_tree_heap_free(%struct.VEC_tree_heap** %parms), !dbg !5071
  ret void, !dbg !5072
}

declare dso_local void @print_node_brief(%struct._IO_FILE*, i8*, %union.tree_node*, i32) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @ipa_prop_write_jump_functions(%struct.cgraph_node_set_def* %set) #0 !dbg !5073 {
entry:
  %set.addr = alloca %struct.cgraph_node_set_def*, align 8
  %node = alloca %struct.cgraph_node*, align 8
  %ob = alloca %struct.output_block*, align 8
  %count = alloca i32, align 4
  %csi = alloca %struct.cgraph_node_set_iterator, align 8
  %tmp = alloca %struct.cgraph_node_set_iterator, align 8
  %tmp7 = alloca %struct.cgraph_node_set_iterator, align 8
  store %struct.cgraph_node_set_def* %set, %struct.cgraph_node_set_def** %set.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cgraph_node_set_def** %set.addr, metadata !5077, metadata !DIExpression()), !dbg !5078
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %node, metadata !5079, metadata !DIExpression()), !dbg !5080
  call void @llvm.dbg.declare(metadata %struct.output_block** %ob, metadata !5081, metadata !DIExpression()), !dbg !5142
  %call = call %struct.output_block* @create_output_block(i32 4), !dbg !5143
  store %struct.output_block* %call, %struct.output_block** %ob, align 8, !dbg !5142
  call void @llvm.dbg.declare(metadata i32* %count, metadata !5144, metadata !DIExpression()), !dbg !5145
  store i32 0, i32* %count, align 4, !dbg !5145
  call void @llvm.dbg.declare(metadata %struct.cgraph_node_set_iterator* %csi, metadata !5146, metadata !DIExpression()), !dbg !5152
  %0 = load %struct.output_block*, %struct.output_block** %ob, align 8, !dbg !5153
  %cgraph_node = getelementptr inbounds %struct.output_block, %struct.output_block* %0, i32 0, i32 6, !dbg !5154
  store %struct.cgraph_node* null, %struct.cgraph_node** %cgraph_node, align 8, !dbg !5155
  %1 = load %struct.cgraph_node_set_def*, %struct.cgraph_node_set_def** %set.addr, align 8, !dbg !5156
  %call1 = call { %struct.cgraph_node_set_def*, i32 } @csi_start(%struct.cgraph_node_set_def* %1), !dbg !5158
  %2 = bitcast %struct.cgraph_node_set_iterator* %tmp to { %struct.cgraph_node_set_def*, i32 }*, !dbg !5158
  %3 = getelementptr inbounds { %struct.cgraph_node_set_def*, i32 }, { %struct.cgraph_node_set_def*, i32 }* %2, i32 0, i32 0, !dbg !5158
  %4 = extractvalue { %struct.cgraph_node_set_def*, i32 } %call1, 0, !dbg !5158
  store %struct.cgraph_node_set_def* %4, %struct.cgraph_node_set_def** %3, align 8, !dbg !5158
  %5 = getelementptr inbounds { %struct.cgraph_node_set_def*, i32 }, { %struct.cgraph_node_set_def*, i32 }* %2, i32 0, i32 1, !dbg !5158
  %6 = extractvalue { %struct.cgraph_node_set_def*, i32 } %call1, 1, !dbg !5158
  store i32 %6, i32* %5, align 8, !dbg !5158
  %7 = bitcast %struct.cgraph_node_set_iterator* %csi to i8*, !dbg !5158
  %8 = bitcast %struct.cgraph_node_set_iterator* %tmp to i8*, !dbg !5158
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %7, i8* align 8 %8, i64 16, i1 false), !dbg !5158
  br label %for.cond, !dbg !5159

for.cond:                                         ; preds = %for.inc, %entry
  %9 = bitcast %struct.cgraph_node_set_iterator* %csi to { %struct.cgraph_node_set_def*, i32 }*, !dbg !5160
  %10 = getelementptr inbounds { %struct.cgraph_node_set_def*, i32 }, { %struct.cgraph_node_set_def*, i32 }* %9, i32 0, i32 0, !dbg !5160
  %11 = load %struct.cgraph_node_set_def*, %struct.cgraph_node_set_def** %10, align 8, !dbg !5160
  %12 = getelementptr inbounds { %struct.cgraph_node_set_def*, i32 }, { %struct.cgraph_node_set_def*, i32 }* %9, i32 0, i32 1, !dbg !5160
  %13 = load i32, i32* %12, align 8, !dbg !5160
  %call2 = call zeroext i8 @csi_end_p(%struct.cgraph_node_set_def* %11, i32 %13), !dbg !5160
  %tobool = icmp ne i8 %call2, 0, !dbg !5162
  %lnot = xor i1 %tobool, true, !dbg !5162
  br i1 %lnot, label %for.body, label %for.end, !dbg !5163

for.body:                                         ; preds = %for.cond
  %14 = bitcast %struct.cgraph_node_set_iterator* %csi to { %struct.cgraph_node_set_def*, i32 }*, !dbg !5164
  %15 = getelementptr inbounds { %struct.cgraph_node_set_def*, i32 }, { %struct.cgraph_node_set_def*, i32 }* %14, i32 0, i32 0, !dbg !5164
  %16 = load %struct.cgraph_node_set_def*, %struct.cgraph_node_set_def** %15, align 8, !dbg !5164
  %17 = getelementptr inbounds { %struct.cgraph_node_set_def*, i32 }, { %struct.cgraph_node_set_def*, i32 }* %14, i32 0, i32 1, !dbg !5164
  %18 = load i32, i32* %17, align 8, !dbg !5164
  %call3 = call %struct.cgraph_node* @csi_node(%struct.cgraph_node_set_def* %16, i32 %18), !dbg !5164
  store %struct.cgraph_node* %call3, %struct.cgraph_node** %node, align 8, !dbg !5166
  %19 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !5167
  %analyzed = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %19, i32 0, i32 27, !dbg !5169
  %bf.load = load i16, i16* %analyzed, align 4, !dbg !5169
  %bf.lshr = lshr i16 %bf.load, 5, !dbg !5169
  %bf.clear = and i16 %bf.lshr, 1, !dbg !5169
  %bf.cast = zext i16 %bf.clear to i32, !dbg !5169
  %tobool4 = icmp ne i32 %bf.cast, 0, !dbg !5167
  br i1 %tobool4, label %land.lhs.true, label %if.end, !dbg !5170

land.lhs.true:                                    ; preds = %for.body
  %20 = load %struct.VEC_ipa_node_params_t_heap*, %struct.VEC_ipa_node_params_t_heap** @ipa_node_params_vector, align 8, !dbg !5171
  %tobool5 = icmp ne %struct.VEC_ipa_node_params_t_heap* %20, null, !dbg !5171
  br i1 %tobool5, label %cond.true, label %cond.false, !dbg !5171

cond.true:                                        ; preds = %land.lhs.true
  %21 = load %struct.VEC_ipa_node_params_t_heap*, %struct.VEC_ipa_node_params_t_heap** @ipa_node_params_vector, align 8, !dbg !5171
  %base = getelementptr inbounds %struct.VEC_ipa_node_params_t_heap, %struct.VEC_ipa_node_params_t_heap* %21, i32 0, i32 0, !dbg !5171
  br label %cond.end, !dbg !5171

cond.false:                                       ; preds = %land.lhs.true
  br label %cond.end, !dbg !5171

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_ipa_node_params_t_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5171
  %22 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !5171
  %uid = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %22, i32 0, i32 24, !dbg !5171
  %23 = load i32, i32* %uid, align 8, !dbg !5171
  %call6 = call %struct.ipa_node_params* @VEC_ipa_node_params_t_base_index(%struct.VEC_ipa_node_params_t_base* %cond, i32 %23), !dbg !5171
  %cmp = icmp ne %struct.ipa_node_params* %call6, null, !dbg !5172
  br i1 %cmp, label %if.then, label %if.end, !dbg !5173

if.then:                                          ; preds = %cond.end
  %24 = load i32, i32* %count, align 4, !dbg !5174
  %inc = add i32 %24, 1, !dbg !5174
  store i32 %inc, i32* %count, align 4, !dbg !5174
  br label %if.end, !dbg !5175

if.end:                                           ; preds = %if.then, %cond.end, %for.body
  br label %for.inc, !dbg !5176

for.inc:                                          ; preds = %if.end
  call void @csi_next(%struct.cgraph_node_set_iterator* %csi), !dbg !5177
  br label %for.cond, !dbg !5178, !llvm.loop !5179

for.end:                                          ; preds = %for.cond
  %25 = load %struct.output_block*, %struct.output_block** %ob, align 8, !dbg !5181
  %main_stream = getelementptr inbounds %struct.output_block, %struct.output_block* %25, i32 0, i32 2, !dbg !5182
  %26 = load %struct.lto_output_stream*, %struct.lto_output_stream** %main_stream, align 8, !dbg !5182
  %27 = load i32, i32* %count, align 4, !dbg !5183
  %conv = zext i32 %27 to i64, !dbg !5183
  call void @lto_output_uleb128_stream(%struct.lto_output_stream* %26, i64 %conv), !dbg !5184
  %28 = load %struct.cgraph_node_set_def*, %struct.cgraph_node_set_def** %set.addr, align 8, !dbg !5185
  %call8 = call { %struct.cgraph_node_set_def*, i32 } @csi_start(%struct.cgraph_node_set_def* %28), !dbg !5187
  %29 = bitcast %struct.cgraph_node_set_iterator* %tmp7 to { %struct.cgraph_node_set_def*, i32 }*, !dbg !5187
  %30 = getelementptr inbounds { %struct.cgraph_node_set_def*, i32 }, { %struct.cgraph_node_set_def*, i32 }* %29, i32 0, i32 0, !dbg !5187
  %31 = extractvalue { %struct.cgraph_node_set_def*, i32 } %call8, 0, !dbg !5187
  store %struct.cgraph_node_set_def* %31, %struct.cgraph_node_set_def** %30, align 8, !dbg !5187
  %32 = getelementptr inbounds { %struct.cgraph_node_set_def*, i32 }, { %struct.cgraph_node_set_def*, i32 }* %29, i32 0, i32 1, !dbg !5187
  %33 = extractvalue { %struct.cgraph_node_set_def*, i32 } %call8, 1, !dbg !5187
  store i32 %33, i32* %32, align 8, !dbg !5187
  %34 = bitcast %struct.cgraph_node_set_iterator* %csi to i8*, !dbg !5187
  %35 = bitcast %struct.cgraph_node_set_iterator* %tmp7 to i8*, !dbg !5187
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %34, i8* align 8 %35, i64 16, i1 false), !dbg !5187
  br label %for.cond9, !dbg !5188

for.cond9:                                        ; preds = %for.inc34, %for.end
  %36 = bitcast %struct.cgraph_node_set_iterator* %csi to { %struct.cgraph_node_set_def*, i32 }*, !dbg !5189
  %37 = getelementptr inbounds { %struct.cgraph_node_set_def*, i32 }, { %struct.cgraph_node_set_def*, i32 }* %36, i32 0, i32 0, !dbg !5189
  %38 = load %struct.cgraph_node_set_def*, %struct.cgraph_node_set_def** %37, align 8, !dbg !5189
  %39 = getelementptr inbounds { %struct.cgraph_node_set_def*, i32 }, { %struct.cgraph_node_set_def*, i32 }* %36, i32 0, i32 1, !dbg !5189
  %40 = load i32, i32* %39, align 8, !dbg !5189
  %call10 = call zeroext i8 @csi_end_p(%struct.cgraph_node_set_def* %38, i32 %40), !dbg !5189
  %tobool11 = icmp ne i8 %call10, 0, !dbg !5191
  %lnot12 = xor i1 %tobool11, true, !dbg !5191
  br i1 %lnot12, label %for.body13, label %for.end35, !dbg !5192

for.body13:                                       ; preds = %for.cond9
  %41 = bitcast %struct.cgraph_node_set_iterator* %csi to { %struct.cgraph_node_set_def*, i32 }*, !dbg !5193
  %42 = getelementptr inbounds { %struct.cgraph_node_set_def*, i32 }, { %struct.cgraph_node_set_def*, i32 }* %41, i32 0, i32 0, !dbg !5193
  %43 = load %struct.cgraph_node_set_def*, %struct.cgraph_node_set_def** %42, align 8, !dbg !5193
  %44 = getelementptr inbounds { %struct.cgraph_node_set_def*, i32 }, { %struct.cgraph_node_set_def*, i32 }* %41, i32 0, i32 1, !dbg !5193
  %45 = load i32, i32* %44, align 8, !dbg !5193
  %call14 = call %struct.cgraph_node* @csi_node(%struct.cgraph_node_set_def* %43, i32 %45), !dbg !5193
  store %struct.cgraph_node* %call14, %struct.cgraph_node** %node, align 8, !dbg !5195
  %46 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !5196
  %analyzed15 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %46, i32 0, i32 27, !dbg !5198
  %bf.load16 = load i16, i16* %analyzed15, align 4, !dbg !5198
  %bf.lshr17 = lshr i16 %bf.load16, 5, !dbg !5198
  %bf.clear18 = and i16 %bf.lshr17, 1, !dbg !5198
  %bf.cast19 = zext i16 %bf.clear18 to i32, !dbg !5198
  %tobool20 = icmp ne i32 %bf.cast19, 0, !dbg !5196
  br i1 %tobool20, label %land.lhs.true21, label %if.end33, !dbg !5199

land.lhs.true21:                                  ; preds = %for.body13
  %47 = load %struct.VEC_ipa_node_params_t_heap*, %struct.VEC_ipa_node_params_t_heap** @ipa_node_params_vector, align 8, !dbg !5200
  %tobool22 = icmp ne %struct.VEC_ipa_node_params_t_heap* %47, null, !dbg !5200
  br i1 %tobool22, label %cond.true23, label %cond.false25, !dbg !5200

cond.true23:                                      ; preds = %land.lhs.true21
  %48 = load %struct.VEC_ipa_node_params_t_heap*, %struct.VEC_ipa_node_params_t_heap** @ipa_node_params_vector, align 8, !dbg !5200
  %base24 = getelementptr inbounds %struct.VEC_ipa_node_params_t_heap, %struct.VEC_ipa_node_params_t_heap* %48, i32 0, i32 0, !dbg !5200
  br label %cond.end26, !dbg !5200

cond.false25:                                     ; preds = %land.lhs.true21
  br label %cond.end26, !dbg !5200

cond.end26:                                       ; preds = %cond.false25, %cond.true23
  %cond27 = phi %struct.VEC_ipa_node_params_t_base* [ %base24, %cond.true23 ], [ null, %cond.false25 ], !dbg !5200
  %49 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !5200
  %uid28 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %49, i32 0, i32 24, !dbg !5200
  %50 = load i32, i32* %uid28, align 8, !dbg !5200
  %call29 = call %struct.ipa_node_params* @VEC_ipa_node_params_t_base_index(%struct.VEC_ipa_node_params_t_base* %cond27, i32 %50), !dbg !5200
  %cmp30 = icmp ne %struct.ipa_node_params* %call29, null, !dbg !5201
  br i1 %cmp30, label %if.then32, label %if.end33, !dbg !5202

if.then32:                                        ; preds = %cond.end26
  %51 = load %struct.output_block*, %struct.output_block** %ob, align 8, !dbg !5203
  %52 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !5204
  call void @ipa_write_node_info(%struct.output_block* %51, %struct.cgraph_node* %52), !dbg !5205
  br label %if.end33, !dbg !5205

if.end33:                                         ; preds = %if.then32, %cond.end26, %for.body13
  br label %for.inc34, !dbg !5206

for.inc34:                                        ; preds = %if.end33
  call void @csi_next(%struct.cgraph_node_set_iterator* %csi), !dbg !5207
  br label %for.cond9, !dbg !5208, !llvm.loop !5209

for.end35:                                        ; preds = %for.cond9
  %53 = load %struct.output_block*, %struct.output_block** %ob, align 8, !dbg !5211
  %main_stream36 = getelementptr inbounds %struct.output_block, %struct.output_block* %53, i32 0, i32 2, !dbg !5212
  %54 = load %struct.lto_output_stream*, %struct.lto_output_stream** %main_stream36, align 8, !dbg !5212
  call void @lto_output_1_stream(%struct.lto_output_stream* %54, i8 signext 0), !dbg !5213
  %55 = load %struct.output_block*, %struct.output_block** %ob, align 8, !dbg !5214
  call void @produce_asm(%struct.output_block* %55, %union.tree_node* null), !dbg !5215
  %56 = load %struct.output_block*, %struct.output_block** %ob, align 8, !dbg !5216
  call void @destroy_output_block(%struct.output_block* %56), !dbg !5217
  ret void, !dbg !5218
}

declare dso_local %struct.output_block* @create_output_block(i32) #2

; Function Attrs: noinline nounwind uwtable
define internal { %struct.cgraph_node_set_def*, i32 } @csi_start(%struct.cgraph_node_set_def* %set) #0 !dbg !5219 {
entry:
  %retval = alloca %struct.cgraph_node_set_iterator, align 8
  %set.addr = alloca %struct.cgraph_node_set_def*, align 8
  store %struct.cgraph_node_set_def* %set, %struct.cgraph_node_set_def** %set.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cgraph_node_set_def** %set.addr, metadata !5222, metadata !DIExpression()), !dbg !5223
  call void @llvm.dbg.declare(metadata %struct.cgraph_node_set_iterator* %retval, metadata !5224, metadata !DIExpression()), !dbg !5225
  %0 = load %struct.cgraph_node_set_def*, %struct.cgraph_node_set_def** %set.addr, align 8, !dbg !5226
  %set1 = getelementptr inbounds %struct.cgraph_node_set_iterator, %struct.cgraph_node_set_iterator* %retval, i32 0, i32 0, !dbg !5227
  store %struct.cgraph_node_set_def* %0, %struct.cgraph_node_set_def** %set1, align 8, !dbg !5228
  %index = getelementptr inbounds %struct.cgraph_node_set_iterator, %struct.cgraph_node_set_iterator* %retval, i32 0, i32 1, !dbg !5229
  store i32 0, i32* %index, align 8, !dbg !5230
  %1 = bitcast %struct.cgraph_node_set_iterator* %retval to { %struct.cgraph_node_set_def*, i32 }*, !dbg !5231
  %2 = load { %struct.cgraph_node_set_def*, i32 }, { %struct.cgraph_node_set_def*, i32 }* %1, align 8, !dbg !5231
  ret { %struct.cgraph_node_set_def*, i32 } %2, !dbg !5231
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @csi_end_p(%struct.cgraph_node_set_def* %csi.coerce0, i32 %csi.coerce1) #0 !dbg !5232 {
entry:
  %csi = alloca %struct.cgraph_node_set_iterator, align 8
  %0 = bitcast %struct.cgraph_node_set_iterator* %csi to { %struct.cgraph_node_set_def*, i32 }*
  %1 = getelementptr inbounds { %struct.cgraph_node_set_def*, i32 }, { %struct.cgraph_node_set_def*, i32 }* %0, i32 0, i32 0
  store %struct.cgraph_node_set_def* %csi.coerce0, %struct.cgraph_node_set_def** %1, align 8
  %2 = getelementptr inbounds { %struct.cgraph_node_set_def*, i32 }, { %struct.cgraph_node_set_def*, i32 }* %0, i32 0, i32 1
  store i32 %csi.coerce1, i32* %2, align 8
  call void @llvm.dbg.declare(metadata %struct.cgraph_node_set_iterator* %csi, metadata !5235, metadata !DIExpression()), !dbg !5236
  %index = getelementptr inbounds %struct.cgraph_node_set_iterator, %struct.cgraph_node_set_iterator* %csi, i32 0, i32 1, !dbg !5237
  %3 = load i32, i32* %index, align 8, !dbg !5237
  %set = getelementptr inbounds %struct.cgraph_node_set_iterator, %struct.cgraph_node_set_iterator* %csi, i32 0, i32 0, !dbg !5238
  %4 = load %struct.cgraph_node_set_def*, %struct.cgraph_node_set_def** %set, align 8, !dbg !5238
  %nodes = getelementptr inbounds %struct.cgraph_node_set_def, %struct.cgraph_node_set_def* %4, i32 0, i32 1, !dbg !5238
  %5 = load %struct.VEC_cgraph_node_ptr_gc*, %struct.VEC_cgraph_node_ptr_gc** %nodes, align 8, !dbg !5238
  %tobool = icmp ne %struct.VEC_cgraph_node_ptr_gc* %5, null, !dbg !5238
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5238

cond.true:                                        ; preds = %entry
  %set1 = getelementptr inbounds %struct.cgraph_node_set_iterator, %struct.cgraph_node_set_iterator* %csi, i32 0, i32 0, !dbg !5238
  %6 = load %struct.cgraph_node_set_def*, %struct.cgraph_node_set_def** %set1, align 8, !dbg !5238
  %nodes2 = getelementptr inbounds %struct.cgraph_node_set_def, %struct.cgraph_node_set_def* %6, i32 0, i32 1, !dbg !5238
  %7 = load %struct.VEC_cgraph_node_ptr_gc*, %struct.VEC_cgraph_node_ptr_gc** %nodes2, align 8, !dbg !5238
  %base = getelementptr inbounds %struct.VEC_cgraph_node_ptr_gc, %struct.VEC_cgraph_node_ptr_gc* %7, i32 0, i32 0, !dbg !5238
  br label %cond.end, !dbg !5238

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5238

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_cgraph_node_ptr_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5238
  %call = call i32 @VEC_cgraph_node_ptr_base_length(%struct.VEC_cgraph_node_ptr_base* %cond), !dbg !5238
  %cmp = icmp uge i32 %3, %call, !dbg !5239
  %conv = zext i1 %cmp to i32, !dbg !5239
  %conv3 = trunc i32 %conv to i8, !dbg !5240
  ret i8 %conv3, !dbg !5241
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.cgraph_node* @csi_node(%struct.cgraph_node_set_def* %csi.coerce0, i32 %csi.coerce1) #0 !dbg !5242 {
entry:
  %csi = alloca %struct.cgraph_node_set_iterator, align 8
  %0 = bitcast %struct.cgraph_node_set_iterator* %csi to { %struct.cgraph_node_set_def*, i32 }*
  %1 = getelementptr inbounds { %struct.cgraph_node_set_def*, i32 }, { %struct.cgraph_node_set_def*, i32 }* %0, i32 0, i32 0
  store %struct.cgraph_node_set_def* %csi.coerce0, %struct.cgraph_node_set_def** %1, align 8
  %2 = getelementptr inbounds { %struct.cgraph_node_set_def*, i32 }, { %struct.cgraph_node_set_def*, i32 }* %0, i32 0, i32 1
  store i32 %csi.coerce1, i32* %2, align 8
  call void @llvm.dbg.declare(metadata %struct.cgraph_node_set_iterator* %csi, metadata !5245, metadata !DIExpression()), !dbg !5246
  %set = getelementptr inbounds %struct.cgraph_node_set_iterator, %struct.cgraph_node_set_iterator* %csi, i32 0, i32 0, !dbg !5247
  %3 = load %struct.cgraph_node_set_def*, %struct.cgraph_node_set_def** %set, align 8, !dbg !5247
  %nodes = getelementptr inbounds %struct.cgraph_node_set_def, %struct.cgraph_node_set_def* %3, i32 0, i32 1, !dbg !5247
  %4 = load %struct.VEC_cgraph_node_ptr_gc*, %struct.VEC_cgraph_node_ptr_gc** %nodes, align 8, !dbg !5247
  %tobool = icmp ne %struct.VEC_cgraph_node_ptr_gc* %4, null, !dbg !5247
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5247

cond.true:                                        ; preds = %entry
  %set1 = getelementptr inbounds %struct.cgraph_node_set_iterator, %struct.cgraph_node_set_iterator* %csi, i32 0, i32 0, !dbg !5247
  %5 = load %struct.cgraph_node_set_def*, %struct.cgraph_node_set_def** %set1, align 8, !dbg !5247
  %nodes2 = getelementptr inbounds %struct.cgraph_node_set_def, %struct.cgraph_node_set_def* %5, i32 0, i32 1, !dbg !5247
  %6 = load %struct.VEC_cgraph_node_ptr_gc*, %struct.VEC_cgraph_node_ptr_gc** %nodes2, align 8, !dbg !5247
  %base = getelementptr inbounds %struct.VEC_cgraph_node_ptr_gc, %struct.VEC_cgraph_node_ptr_gc* %6, i32 0, i32 0, !dbg !5247
  br label %cond.end, !dbg !5247

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5247

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_cgraph_node_ptr_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5247
  %index = getelementptr inbounds %struct.cgraph_node_set_iterator, %struct.cgraph_node_set_iterator* %csi, i32 0, i32 1, !dbg !5247
  %7 = load i32, i32* %index, align 8, !dbg !5247
  %call = call %struct.cgraph_node* @VEC_cgraph_node_ptr_base_index(%struct.VEC_cgraph_node_ptr_base* %cond, i32 %7), !dbg !5247
  ret %struct.cgraph_node* %call, !dbg !5248
}

; Function Attrs: noinline nounwind uwtable
define internal void @csi_next(%struct.cgraph_node_set_iterator* %csi) #0 !dbg !5249 {
entry:
  %csi.addr = alloca %struct.cgraph_node_set_iterator*, align 8
  store %struct.cgraph_node_set_iterator* %csi, %struct.cgraph_node_set_iterator** %csi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cgraph_node_set_iterator** %csi.addr, metadata !5253, metadata !DIExpression()), !dbg !5254
  %0 = load %struct.cgraph_node_set_iterator*, %struct.cgraph_node_set_iterator** %csi.addr, align 8, !dbg !5255
  %index = getelementptr inbounds %struct.cgraph_node_set_iterator, %struct.cgraph_node_set_iterator* %0, i32 0, i32 1, !dbg !5256
  %1 = load i32, i32* %index, align 8, !dbg !5257
  %inc = add i32 %1, 1, !dbg !5257
  store i32 %inc, i32* %index, align 8, !dbg !5257
  ret void, !dbg !5258
}

declare dso_local void @lto_output_uleb128_stream(%struct.lto_output_stream*, i64) #2

; Function Attrs: noinline nounwind uwtable
define internal void @ipa_write_node_info(%struct.output_block* %ob, %struct.cgraph_node* %node) #0 !dbg !5259 {
entry:
  %ob.addr = alloca %struct.output_block*, align 8
  %node.addr = alloca %struct.cgraph_node*, align 8
  %node_ref = alloca i32, align 4
  %encoder = alloca %struct.lto_cgraph_encoder_d*, align 8
  %info = alloca %struct.ipa_node_params*, align 8
  %j = alloca i32, align 4
  %e = alloca %struct.cgraph_edge*, align 8
  %bp = alloca %struct.bitpack_d*, align 8
  %note_count = alloca i32, align 4
  %note = alloca %struct.ipa_param_call_note*, align 8
  %args = alloca %struct.ipa_edge_args*, align 8
  store %struct.output_block* %ob, %struct.output_block** %ob.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.output_block** %ob.addr, metadata !5262, metadata !DIExpression()), !dbg !5263
  store %struct.cgraph_node* %node, %struct.cgraph_node** %node.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %node.addr, metadata !5264, metadata !DIExpression()), !dbg !5265
  call void @llvm.dbg.declare(metadata i32* %node_ref, metadata !5266, metadata !DIExpression()), !dbg !5267
  call void @llvm.dbg.declare(metadata %struct.lto_cgraph_encoder_d** %encoder, metadata !5268, metadata !DIExpression()), !dbg !5269
  call void @llvm.dbg.declare(metadata %struct.ipa_node_params** %info, metadata !5270, metadata !DIExpression()), !dbg !5271
  %0 = load %struct.VEC_ipa_node_params_t_heap*, %struct.VEC_ipa_node_params_t_heap** @ipa_node_params_vector, align 8, !dbg !5272
  %tobool = icmp ne %struct.VEC_ipa_node_params_t_heap* %0, null, !dbg !5272
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5272

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_ipa_node_params_t_heap*, %struct.VEC_ipa_node_params_t_heap** @ipa_node_params_vector, align 8, !dbg !5272
  %base = getelementptr inbounds %struct.VEC_ipa_node_params_t_heap, %struct.VEC_ipa_node_params_t_heap* %1, i32 0, i32 0, !dbg !5272
  br label %cond.end, !dbg !5272

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5272

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_ipa_node_params_t_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5272
  %2 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !5272
  %uid = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %2, i32 0, i32 24, !dbg !5272
  %3 = load i32, i32* %uid, align 8, !dbg !5272
  %call = call %struct.ipa_node_params* @VEC_ipa_node_params_t_base_index(%struct.VEC_ipa_node_params_t_base* %cond, i32 %3), !dbg !5272
  store %struct.ipa_node_params* %call, %struct.ipa_node_params** %info, align 8, !dbg !5271
  call void @llvm.dbg.declare(metadata i32* %j, metadata !5273, metadata !DIExpression()), !dbg !5274
  call void @llvm.dbg.declare(metadata %struct.cgraph_edge** %e, metadata !5275, metadata !DIExpression()), !dbg !5276
  call void @llvm.dbg.declare(metadata %struct.bitpack_d** %bp, metadata !5277, metadata !DIExpression()), !dbg !5297
  call void @llvm.dbg.declare(metadata i32* %note_count, metadata !5298, metadata !DIExpression()), !dbg !5299
  store i32 0, i32* %note_count, align 4, !dbg !5299
  call void @llvm.dbg.declare(metadata %struct.ipa_param_call_note** %note, metadata !5300, metadata !DIExpression()), !dbg !5301
  %4 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !5302
  %decl_state = getelementptr inbounds %struct.output_block, %struct.output_block* %4, i32 0, i32 1, !dbg !5303
  %5 = load %struct.lto_out_decl_state*, %struct.lto_out_decl_state** %decl_state, align 8, !dbg !5303
  %cgraph_node_encoder = getelementptr inbounds %struct.lto_out_decl_state, %struct.lto_out_decl_state* %5, i32 0, i32 1, !dbg !5304
  %6 = load %struct.lto_cgraph_encoder_d*, %struct.lto_cgraph_encoder_d** %cgraph_node_encoder, align 8, !dbg !5304
  store %struct.lto_cgraph_encoder_d* %6, %struct.lto_cgraph_encoder_d** %encoder, align 8, !dbg !5305
  %7 = load %struct.lto_cgraph_encoder_d*, %struct.lto_cgraph_encoder_d** %encoder, align 8, !dbg !5306
  %8 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !5307
  %call1 = call i32 @lto_cgraph_encoder_encode(%struct.lto_cgraph_encoder_d* %7, %struct.cgraph_node* %8), !dbg !5308
  store i32 %call1, i32* %node_ref, align 4, !dbg !5309
  %9 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !5310
  %main_stream = getelementptr inbounds %struct.output_block, %struct.output_block* %9, i32 0, i32 2, !dbg !5311
  %10 = load %struct.lto_output_stream*, %struct.lto_output_stream** %main_stream, align 8, !dbg !5311
  %11 = load i32, i32* %node_ref, align 4, !dbg !5312
  %conv = sext i32 %11 to i64, !dbg !5312
  call void @lto_output_uleb128_stream(%struct.lto_output_stream* %10, i64 %conv), !dbg !5313
  %call2 = call %struct.bitpack_d* @bitpack_create(), !dbg !5314
  store %struct.bitpack_d* %call2, %struct.bitpack_d** %bp, align 8, !dbg !5315
  %12 = load %struct.bitpack_d*, %struct.bitpack_d** %bp, align 8, !dbg !5316
  %13 = load %struct.ipa_node_params*, %struct.ipa_node_params** %info, align 8, !dbg !5317
  %called_with_var_arguments = getelementptr inbounds %struct.ipa_node_params, %struct.ipa_node_params* %13, i32 0, i32 5, !dbg !5318
  %bf.load = load i8, i8* %called_with_var_arguments, align 8, !dbg !5318
  %bf.clear = and i8 %bf.load, 1, !dbg !5318
  %bf.cast = zext i8 %bf.clear to i32, !dbg !5318
  %conv3 = zext i32 %bf.cast to i64, !dbg !5317
  call void @bp_pack_value(%struct.bitpack_d* %12, i64 %conv3, i32 1), !dbg !5319
  %14 = load %struct.bitpack_d*, %struct.bitpack_d** %bp, align 8, !dbg !5320
  %15 = load %struct.ipa_node_params*, %struct.ipa_node_params** %info, align 8, !dbg !5321
  %uses_analysis_done = getelementptr inbounds %struct.ipa_node_params, %struct.ipa_node_params* %15, i32 0, i32 5, !dbg !5322
  %bf.load4 = load i8, i8* %uses_analysis_done, align 8, !dbg !5322
  %bf.lshr = lshr i8 %bf.load4, 2, !dbg !5322
  %bf.clear5 = and i8 %bf.lshr, 1, !dbg !5322
  %bf.cast6 = zext i8 %bf.clear5 to i32, !dbg !5322
  %conv7 = zext i32 %bf.cast6 to i64, !dbg !5321
  call void @bp_pack_value(%struct.bitpack_d* %14, i64 %conv7, i32 1), !dbg !5323
  %16 = load %struct.ipa_node_params*, %struct.ipa_node_params** %info, align 8, !dbg !5324
  %modification_analysis_done = getelementptr inbounds %struct.ipa_node_params, %struct.ipa_node_params* %16, i32 0, i32 5, !dbg !5324
  %bf.load8 = load i8, i8* %modification_analysis_done, align 8, !dbg !5324
  %bf.lshr9 = lshr i8 %bf.load8, 1, !dbg !5324
  %bf.clear10 = and i8 %bf.lshr9, 1, !dbg !5324
  %bf.cast11 = zext i8 %bf.clear10 to i32, !dbg !5324
  %tobool12 = icmp ne i32 %bf.cast11, 0, !dbg !5324
  br i1 %tobool12, label %cond.false16, label %lor.lhs.false, !dbg !5324

lor.lhs.false:                                    ; preds = %cond.end
  %17 = load %struct.ipa_node_params*, %struct.ipa_node_params** %info, align 8, !dbg !5324
  %call13 = call i32 @ipa_get_param_count(%struct.ipa_node_params* %17), !dbg !5324
  %cmp = icmp eq i32 %call13, 0, !dbg !5324
  br i1 %cmp, label %cond.false16, label %cond.true15, !dbg !5324

cond.true15:                                      ; preds = %lor.lhs.false
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i32 2020, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !5324
  br label %cond.end17, !dbg !5324

cond.false16:                                     ; preds = %lor.lhs.false, %cond.end
  br label %cond.end17, !dbg !5324

cond.end17:                                       ; preds = %cond.false16, %cond.true15
  %cond18 = phi i32 [ 0, %cond.true15 ], [ 0, %cond.false16 ], !dbg !5324
  %18 = load %struct.ipa_node_params*, %struct.ipa_node_params** %info, align 8, !dbg !5325
  %node_enqueued = getelementptr inbounds %struct.ipa_node_params, %struct.ipa_node_params* %18, i32 0, i32 5, !dbg !5325
  %bf.load19 = load i8, i8* %node_enqueued, align 8, !dbg !5325
  %bf.lshr20 = lshr i8 %bf.load19, 3, !dbg !5325
  %bf.clear21 = and i8 %bf.lshr20, 1, !dbg !5325
  %bf.cast22 = zext i8 %bf.clear21 to i32, !dbg !5325
  %tobool23 = icmp ne i32 %bf.cast22, 0, !dbg !5325
  br i1 %tobool23, label %cond.true24, label %cond.false25, !dbg !5325

cond.true24:                                      ; preds = %cond.end17
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i32 2021, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !5325
  br label %cond.end26, !dbg !5325

cond.false25:                                     ; preds = %cond.end17
  br label %cond.end26, !dbg !5325

cond.end26:                                       ; preds = %cond.false25, %cond.true24
  %cond27 = phi i32 [ 0, %cond.true24 ], [ 0, %cond.false25 ], !dbg !5325
  %19 = load %struct.ipa_node_params*, %struct.ipa_node_params** %info, align 8, !dbg !5326
  %ipcp_orig_node = getelementptr inbounds %struct.ipa_node_params, %struct.ipa_node_params* %19, i32 0, i32 3, !dbg !5326
  %20 = load %struct.cgraph_node*, %struct.cgraph_node** %ipcp_orig_node, align 8, !dbg !5326
  %tobool28 = icmp ne %struct.cgraph_node* %20, null, !dbg !5326
  br i1 %tobool28, label %cond.true29, label %cond.false30, !dbg !5326

cond.true29:                                      ; preds = %cond.end26
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i32 2022, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !5326
  br label %cond.end31, !dbg !5326

cond.false30:                                     ; preds = %cond.end26
  br label %cond.end31, !dbg !5326

cond.end31:                                       ; preds = %cond.false30, %cond.true29
  %cond32 = phi i32 [ 0, %cond.true29 ], [ 0, %cond.false30 ], !dbg !5326
  store i32 0, i32* %j, align 4, !dbg !5327
  br label %for.cond, !dbg !5329

for.cond:                                         ; preds = %for.inc, %cond.end31
  %21 = load i32, i32* %j, align 4, !dbg !5330
  %22 = load %struct.ipa_node_params*, %struct.ipa_node_params** %info, align 8, !dbg !5332
  %call33 = call i32 @ipa_get_param_count(%struct.ipa_node_params* %22), !dbg !5333
  %cmp34 = icmp slt i32 %21, %call33, !dbg !5334
  br i1 %cmp34, label %for.body, label %for.end, !dbg !5335

for.body:                                         ; preds = %for.cond
  %23 = load %struct.bitpack_d*, %struct.bitpack_d** %bp, align 8, !dbg !5336
  %24 = load %struct.ipa_node_params*, %struct.ipa_node_params** %info, align 8, !dbg !5337
  %params = getelementptr inbounds %struct.ipa_node_params, %struct.ipa_node_params* %24, i32 0, i32 1, !dbg !5338
  %25 = load %struct.ipa_param_descriptor*, %struct.ipa_param_descriptor** %params, align 8, !dbg !5338
  %26 = load i32, i32* %j, align 4, !dbg !5339
  %idxprom = sext i32 %26 to i64, !dbg !5337
  %arrayidx = getelementptr inbounds %struct.ipa_param_descriptor, %struct.ipa_param_descriptor* %25, i64 %idxprom, !dbg !5337
  %modified = getelementptr inbounds %struct.ipa_param_descriptor, %struct.ipa_param_descriptor* %arrayidx, i32 0, i32 2, !dbg !5340
  %bf.load36 = load i8, i8* %modified, align 8, !dbg !5340
  %bf.clear37 = and i8 %bf.load36, 1, !dbg !5340
  %bf.cast38 = zext i8 %bf.clear37 to i32, !dbg !5340
  %conv39 = zext i32 %bf.cast38 to i64, !dbg !5337
  call void @bp_pack_value(%struct.bitpack_d* %23, i64 %conv39, i32 1), !dbg !5341
  br label %for.inc, !dbg !5341

for.inc:                                          ; preds = %for.body
  %27 = load i32, i32* %j, align 4, !dbg !5342
  %inc = add nsw i32 %27, 1, !dbg !5342
  store i32 %inc, i32* %j, align 4, !dbg !5342
  br label %for.cond, !dbg !5343, !llvm.loop !5344

for.end:                                          ; preds = %for.cond
  %28 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !5346
  %main_stream40 = getelementptr inbounds %struct.output_block, %struct.output_block* %28, i32 0, i32 2, !dbg !5347
  %29 = load %struct.lto_output_stream*, %struct.lto_output_stream** %main_stream40, align 8, !dbg !5347
  %30 = load %struct.bitpack_d*, %struct.bitpack_d** %bp, align 8, !dbg !5348
  call void @lto_output_bitpack(%struct.lto_output_stream* %29, %struct.bitpack_d* %30), !dbg !5349
  %31 = load %struct.bitpack_d*, %struct.bitpack_d** %bp, align 8, !dbg !5350
  call void @bitpack_delete(%struct.bitpack_d* %31), !dbg !5351
  %32 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !5352
  %callees = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %32, i32 0, i32 1, !dbg !5354
  %33 = load %struct.cgraph_edge*, %struct.cgraph_edge** %callees, align 8, !dbg !5354
  store %struct.cgraph_edge* %33, %struct.cgraph_edge** %e, align 8, !dbg !5355
  br label %for.cond41, !dbg !5356

for.cond41:                                       ; preds = %for.inc64, %for.end
  %34 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !5357
  %tobool42 = icmp ne %struct.cgraph_edge* %34, null, !dbg !5359
  br i1 %tobool42, label %for.body43, label %for.end65, !dbg !5359

for.body43:                                       ; preds = %for.cond41
  call void @llvm.dbg.declare(metadata %struct.ipa_edge_args** %args, metadata !5360, metadata !DIExpression()), !dbg !5362
  %35 = load %struct.VEC_ipa_edge_args_t_gc*, %struct.VEC_ipa_edge_args_t_gc** @ipa_edge_args_vector, align 8, !dbg !5363
  %tobool44 = icmp ne %struct.VEC_ipa_edge_args_t_gc* %35, null, !dbg !5363
  br i1 %tobool44, label %cond.true45, label %cond.false47, !dbg !5363

cond.true45:                                      ; preds = %for.body43
  %36 = load %struct.VEC_ipa_edge_args_t_gc*, %struct.VEC_ipa_edge_args_t_gc** @ipa_edge_args_vector, align 8, !dbg !5363
  %base46 = getelementptr inbounds %struct.VEC_ipa_edge_args_t_gc, %struct.VEC_ipa_edge_args_t_gc* %36, i32 0, i32 0, !dbg !5363
  br label %cond.end48, !dbg !5363

cond.false47:                                     ; preds = %for.body43
  br label %cond.end48, !dbg !5363

cond.end48:                                       ; preds = %cond.false47, %cond.true45
  %cond49 = phi %struct.VEC_ipa_edge_args_t_base* [ %base46, %cond.true45 ], [ null, %cond.false47 ], !dbg !5363
  %37 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !5363
  %uid50 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %37, i32 0, i32 12, !dbg !5363
  %38 = load i32, i32* %uid50, align 4, !dbg !5363
  %call51 = call %struct.ipa_edge_args* @VEC_ipa_edge_args_t_base_index(%struct.VEC_ipa_edge_args_t_base* %cond49, i32 %38), !dbg !5363
  store %struct.ipa_edge_args* %call51, %struct.ipa_edge_args** %args, align 8, !dbg !5362
  %39 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !5364
  %main_stream52 = getelementptr inbounds %struct.output_block, %struct.output_block* %39, i32 0, i32 2, !dbg !5365
  %40 = load %struct.lto_output_stream*, %struct.lto_output_stream** %main_stream52, align 8, !dbg !5365
  %41 = load %struct.ipa_edge_args*, %struct.ipa_edge_args** %args, align 8, !dbg !5366
  %call53 = call i32 @ipa_get_cs_argument_count(%struct.ipa_edge_args* %41), !dbg !5367
  %conv54 = sext i32 %call53 to i64, !dbg !5367
  call void @lto_output_uleb128_stream(%struct.lto_output_stream* %40, i64 %conv54), !dbg !5368
  store i32 0, i32* %j, align 4, !dbg !5369
  br label %for.cond55, !dbg !5371

for.cond55:                                       ; preds = %for.inc61, %cond.end48
  %42 = load i32, i32* %j, align 4, !dbg !5372
  %43 = load %struct.ipa_edge_args*, %struct.ipa_edge_args** %args, align 8, !dbg !5374
  %call56 = call i32 @ipa_get_cs_argument_count(%struct.ipa_edge_args* %43), !dbg !5375
  %cmp57 = icmp slt i32 %42, %call56, !dbg !5376
  br i1 %cmp57, label %for.body59, label %for.end63, !dbg !5377

for.body59:                                       ; preds = %for.cond55
  %44 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !5378
  %45 = load %struct.ipa_edge_args*, %struct.ipa_edge_args** %args, align 8, !dbg !5379
  %46 = load i32, i32* %j, align 4, !dbg !5380
  %call60 = call %struct.ipa_jump_func* @ipa_get_ith_jump_func(%struct.ipa_edge_args* %45, i32 %46), !dbg !5381
  call void @ipa_write_jump_function(%struct.output_block* %44, %struct.ipa_jump_func* %call60), !dbg !5382
  br label %for.inc61, !dbg !5382

for.inc61:                                        ; preds = %for.body59
  %47 = load i32, i32* %j, align 4, !dbg !5383
  %inc62 = add nsw i32 %47, 1, !dbg !5383
  store i32 %inc62, i32* %j, align 4, !dbg !5383
  br label %for.cond55, !dbg !5384, !llvm.loop !5385

for.end63:                                        ; preds = %for.cond55
  br label %for.inc64, !dbg !5387

for.inc64:                                        ; preds = %for.end63
  %48 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !5388
  %next_callee = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %48, i32 0, i32 6, !dbg !5389
  %49 = load %struct.cgraph_edge*, %struct.cgraph_edge** %next_callee, align 8, !dbg !5389
  store %struct.cgraph_edge* %49, %struct.cgraph_edge** %e, align 8, !dbg !5390
  br label %for.cond41, !dbg !5391, !llvm.loop !5392

for.end65:                                        ; preds = %for.cond41
  %50 = load %struct.ipa_node_params*, %struct.ipa_node_params** %info, align 8, !dbg !5394
  %param_calls = getelementptr inbounds %struct.ipa_node_params, %struct.ipa_node_params* %50, i32 0, i32 2, !dbg !5396
  %51 = load %struct.ipa_param_call_note*, %struct.ipa_param_call_note** %param_calls, align 8, !dbg !5396
  store %struct.ipa_param_call_note* %51, %struct.ipa_param_call_note** %note, align 8, !dbg !5397
  br label %for.cond66, !dbg !5398

for.cond66:                                       ; preds = %for.inc70, %for.end65
  %52 = load %struct.ipa_param_call_note*, %struct.ipa_param_call_note** %note, align 8, !dbg !5399
  %tobool67 = icmp ne %struct.ipa_param_call_note* %52, null, !dbg !5401
  br i1 %tobool67, label %for.body68, label %for.end71, !dbg !5401

for.body68:                                       ; preds = %for.cond66
  %53 = load i32, i32* %note_count, align 4, !dbg !5402
  %inc69 = add nsw i32 %53, 1, !dbg !5402
  store i32 %inc69, i32* %note_count, align 4, !dbg !5402
  br label %for.inc70, !dbg !5403

for.inc70:                                        ; preds = %for.body68
  %54 = load %struct.ipa_param_call_note*, %struct.ipa_param_call_note** %note, align 8, !dbg !5404
  %next = getelementptr inbounds %struct.ipa_param_call_note, %struct.ipa_param_call_note* %54, i32 0, i32 1, !dbg !5405
  %55 = load %struct.ipa_param_call_note*, %struct.ipa_param_call_note** %next, align 8, !dbg !5405
  store %struct.ipa_param_call_note* %55, %struct.ipa_param_call_note** %note, align 8, !dbg !5406
  br label %for.cond66, !dbg !5407, !llvm.loop !5408

for.end71:                                        ; preds = %for.cond66
  %56 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !5410
  %main_stream72 = getelementptr inbounds %struct.output_block, %struct.output_block* %56, i32 0, i32 2, !dbg !5411
  %57 = load %struct.lto_output_stream*, %struct.lto_output_stream** %main_stream72, align 8, !dbg !5411
  %58 = load i32, i32* %note_count, align 4, !dbg !5412
  %conv73 = sext i32 %58 to i64, !dbg !5412
  call void @lto_output_uleb128_stream(%struct.lto_output_stream* %57, i64 %conv73), !dbg !5413
  %59 = load %struct.ipa_node_params*, %struct.ipa_node_params** %info, align 8, !dbg !5414
  %param_calls74 = getelementptr inbounds %struct.ipa_node_params, %struct.ipa_node_params* %59, i32 0, i32 2, !dbg !5416
  %60 = load %struct.ipa_param_call_note*, %struct.ipa_param_call_note** %param_calls74, align 8, !dbg !5416
  store %struct.ipa_param_call_note* %60, %struct.ipa_param_call_note** %note, align 8, !dbg !5417
  br label %for.cond75, !dbg !5418

for.cond75:                                       ; preds = %for.inc78, %for.end71
  %61 = load %struct.ipa_param_call_note*, %struct.ipa_param_call_note** %note, align 8, !dbg !5419
  %tobool76 = icmp ne %struct.ipa_param_call_note* %61, null, !dbg !5421
  br i1 %tobool76, label %for.body77, label %for.end80, !dbg !5421

for.body77:                                       ; preds = %for.cond75
  %62 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !5422
  %63 = load %struct.ipa_param_call_note*, %struct.ipa_param_call_note** %note, align 8, !dbg !5423
  call void @ipa_write_param_call_note(%struct.output_block* %62, %struct.ipa_param_call_note* %63), !dbg !5424
  br label %for.inc78, !dbg !5424

for.inc78:                                        ; preds = %for.body77
  %64 = load %struct.ipa_param_call_note*, %struct.ipa_param_call_note** %note, align 8, !dbg !5425
  %next79 = getelementptr inbounds %struct.ipa_param_call_note, %struct.ipa_param_call_note* %64, i32 0, i32 1, !dbg !5426
  %65 = load %struct.ipa_param_call_note*, %struct.ipa_param_call_note** %next79, align 8, !dbg !5426
  store %struct.ipa_param_call_note* %65, %struct.ipa_param_call_note** %note, align 8, !dbg !5427
  br label %for.cond75, !dbg !5428, !llvm.loop !5429

for.end80:                                        ; preds = %for.cond75
  ret void, !dbg !5431
}

declare dso_local void @lto_output_1_stream(%struct.lto_output_stream*, i8 signext) #2

declare dso_local void @produce_asm(%struct.output_block*, %union.tree_node*) #2

declare dso_local void @destroy_output_block(%struct.output_block*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @ipa_prop_read_jump_functions() #0 !dbg !5432 {
entry:
  %file_data_vec = alloca %struct.lto_file_decl_data**, align 8
  %file_data = alloca %struct.lto_file_decl_data*, align 8
  %j = alloca i32, align 4
  %len = alloca i64, align 8
  %data = alloca i8*, align 8
  call void @llvm.dbg.declare(metadata %struct.lto_file_decl_data*** %file_data_vec, metadata !5433, metadata !DIExpression()), !dbg !5435
  %call = call %struct.lto_file_decl_data** @lto_get_file_decl_data(), !dbg !5436
  store %struct.lto_file_decl_data** %call, %struct.lto_file_decl_data*** %file_data_vec, align 8, !dbg !5435
  call void @llvm.dbg.declare(metadata %struct.lto_file_decl_data** %file_data, metadata !5437, metadata !DIExpression()), !dbg !5438
  call void @llvm.dbg.declare(metadata i32* %j, metadata !5439, metadata !DIExpression()), !dbg !5440
  store i32 0, i32* %j, align 4, !dbg !5440
  call void @ipa_check_create_node_params(), !dbg !5441
  call void @ipa_check_create_edge_args(), !dbg !5442
  call void @ipa_register_cgraph_hooks(), !dbg !5443
  br label %while.cond, !dbg !5444

while.cond:                                       ; preds = %if.end, %entry
  %0 = load %struct.lto_file_decl_data**, %struct.lto_file_decl_data*** %file_data_vec, align 8, !dbg !5445
  %1 = load i32, i32* %j, align 4, !dbg !5446
  %inc = add i32 %1, 1, !dbg !5446
  store i32 %inc, i32* %j, align 4, !dbg !5446
  %idxprom = zext i32 %1 to i64, !dbg !5445
  %arrayidx = getelementptr inbounds %struct.lto_file_decl_data*, %struct.lto_file_decl_data** %0, i64 %idxprom, !dbg !5445
  %2 = load %struct.lto_file_decl_data*, %struct.lto_file_decl_data** %arrayidx, align 8, !dbg !5445
  store %struct.lto_file_decl_data* %2, %struct.lto_file_decl_data** %file_data, align 8, !dbg !5447
  %tobool = icmp ne %struct.lto_file_decl_data* %2, null, !dbg !5444
  br i1 %tobool, label %while.body, label %while.end, !dbg !5444

while.body:                                       ; preds = %while.cond
  call void @llvm.dbg.declare(metadata i64* %len, metadata !5448, metadata !DIExpression()), !dbg !5450
  call void @llvm.dbg.declare(metadata i8** %data, metadata !5451, metadata !DIExpression()), !dbg !5452
  %3 = load %struct.lto_file_decl_data*, %struct.lto_file_decl_data** %file_data, align 8, !dbg !5453
  %call1 = call i8* @lto_get_section_data(%struct.lto_file_decl_data* %3, i32 4, i8* null, i64* %len), !dbg !5454
  store i8* %call1, i8** %data, align 8, !dbg !5452
  %4 = load i8*, i8** %data, align 8, !dbg !5455
  %tobool2 = icmp ne i8* %4, null, !dbg !5455
  br i1 %tobool2, label %if.then, label %if.end, !dbg !5457

if.then:                                          ; preds = %while.body
  %5 = load %struct.lto_file_decl_data*, %struct.lto_file_decl_data** %file_data, align 8, !dbg !5458
  %6 = load i8*, i8** %data, align 8, !dbg !5459
  %7 = load i64, i64* %len, align 8, !dbg !5460
  call void @ipa_prop_read_section(%struct.lto_file_decl_data* %5, i8* %6, i64 %7), !dbg !5461
  br label %if.end, !dbg !5461

if.end:                                           ; preds = %if.then, %while.body
  br label %while.cond, !dbg !5444, !llvm.loop !5462

while.end:                                        ; preds = %while.cond
  ret void, !dbg !5464
}

declare dso_local %struct.lto_file_decl_data** @lto_get_file_decl_data() #2

; Function Attrs: noinline nounwind uwtable
define internal void @ipa_check_create_node_params() #0 !dbg !5465 {
entry:
  %0 = load %struct.VEC_ipa_node_params_t_heap*, %struct.VEC_ipa_node_params_t_heap** @ipa_node_params_vector, align 8, !dbg !5466
  %tobool = icmp ne %struct.VEC_ipa_node_params_t_heap* %0, null, !dbg !5466
  br i1 %tobool, label %if.end, label %if.then, !dbg !5468

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @cgraph_max_uid, align 4, !dbg !5469
  %call = call %struct.VEC_ipa_node_params_t_heap* @VEC_ipa_node_params_t_heap_alloc(i32 %1), !dbg !5469
  store %struct.VEC_ipa_node_params_t_heap* %call, %struct.VEC_ipa_node_params_t_heap** @ipa_node_params_vector, align 8, !dbg !5470
  br label %if.end, !dbg !5471

if.end:                                           ; preds = %if.then, %entry
  %2 = load %struct.VEC_ipa_node_params_t_heap*, %struct.VEC_ipa_node_params_t_heap** @ipa_node_params_vector, align 8, !dbg !5472
  %tobool1 = icmp ne %struct.VEC_ipa_node_params_t_heap* %2, null, !dbg !5472
  br i1 %tobool1, label %cond.true, label %cond.false, !dbg !5472

cond.true:                                        ; preds = %if.end
  %3 = load %struct.VEC_ipa_node_params_t_heap*, %struct.VEC_ipa_node_params_t_heap** @ipa_node_params_vector, align 8, !dbg !5472
  %base = getelementptr inbounds %struct.VEC_ipa_node_params_t_heap, %struct.VEC_ipa_node_params_t_heap* %3, i32 0, i32 0, !dbg !5472
  br label %cond.end, !dbg !5472

cond.false:                                       ; preds = %if.end
  br label %cond.end, !dbg !5472

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_ipa_node_params_t_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5472
  %call2 = call i32 @VEC_ipa_node_params_t_base_length(%struct.VEC_ipa_node_params_t_base* %cond), !dbg !5472
  %4 = load i32, i32* @cgraph_max_uid, align 4, !dbg !5474
  %cmp = icmp ule i32 %call2, %4, !dbg !5475
  br i1 %cmp, label %if.then3, label %if.end4, !dbg !5476

if.then3:                                         ; preds = %cond.end
  %5 = load i32, i32* @cgraph_max_uid, align 4, !dbg !5477
  %add = add nsw i32 %5, 1, !dbg !5477
  call void @VEC_ipa_node_params_t_heap_safe_grow_cleared(%struct.VEC_ipa_node_params_t_heap** @ipa_node_params_vector, i32 %add), !dbg !5477
  br label %if.end4, !dbg !5477

if.end4:                                          ; preds = %if.then3, %cond.end
  ret void, !dbg !5478
}

; Function Attrs: noinline nounwind uwtable
define internal void @ipa_check_create_edge_args() #0 !dbg !5479 {
entry:
  %0 = load %struct.VEC_ipa_edge_args_t_gc*, %struct.VEC_ipa_edge_args_t_gc** @ipa_edge_args_vector, align 8, !dbg !5480
  %tobool = icmp ne %struct.VEC_ipa_edge_args_t_gc* %0, null, !dbg !5480
  br i1 %tobool, label %if.end, label %if.then, !dbg !5482

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @cgraph_edge_max_uid, align 4, !dbg !5483
  %call = call %struct.VEC_ipa_edge_args_t_gc* @VEC_ipa_edge_args_t_gc_alloc(i32 %1), !dbg !5483
  store %struct.VEC_ipa_edge_args_t_gc* %call, %struct.VEC_ipa_edge_args_t_gc** @ipa_edge_args_vector, align 8, !dbg !5484
  br label %if.end, !dbg !5485

if.end:                                           ; preds = %if.then, %entry
  %2 = load %struct.VEC_ipa_edge_args_t_gc*, %struct.VEC_ipa_edge_args_t_gc** @ipa_edge_args_vector, align 8, !dbg !5486
  %tobool1 = icmp ne %struct.VEC_ipa_edge_args_t_gc* %2, null, !dbg !5486
  br i1 %tobool1, label %cond.true, label %cond.false, !dbg !5486

cond.true:                                        ; preds = %if.end
  %3 = load %struct.VEC_ipa_edge_args_t_gc*, %struct.VEC_ipa_edge_args_t_gc** @ipa_edge_args_vector, align 8, !dbg !5486
  %base = getelementptr inbounds %struct.VEC_ipa_edge_args_t_gc, %struct.VEC_ipa_edge_args_t_gc* %3, i32 0, i32 0, !dbg !5486
  br label %cond.end, !dbg !5486

cond.false:                                       ; preds = %if.end
  br label %cond.end, !dbg !5486

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_ipa_edge_args_t_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5486
  %call2 = call i32 @VEC_ipa_edge_args_t_base_length(%struct.VEC_ipa_edge_args_t_base* %cond), !dbg !5486
  %4 = load i32, i32* @cgraph_edge_max_uid, align 4, !dbg !5488
  %cmp = icmp ule i32 %call2, %4, !dbg !5489
  br i1 %cmp, label %if.then3, label %if.end4, !dbg !5490

if.then3:                                         ; preds = %cond.end
  %5 = load i32, i32* @cgraph_edge_max_uid, align 4, !dbg !5491
  %add = add nsw i32 %5, 1, !dbg !5491
  call void @VEC_ipa_edge_args_t_gc_safe_grow_cleared(%struct.VEC_ipa_edge_args_t_gc** @ipa_edge_args_vector, i32 %add), !dbg !5491
  br label %if.end4, !dbg !5491

if.end4:                                          ; preds = %if.then3, %cond.end
  ret void, !dbg !5492
}

declare dso_local i8* @lto_get_section_data(%struct.lto_file_decl_data*, i32, i8*, i64*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @ipa_prop_read_section(%struct.lto_file_decl_data* %file_data, i8* %data, i64 %len) #0 !dbg !5493 {
entry:
  %file_data.addr = alloca %struct.lto_file_decl_data*, align 8
  %data.addr = alloca i8*, align 8
  %len.addr = alloca i64, align 8
  %header = alloca %struct.lto_function_header*, align 8
  %cfg_offset = alloca i32, align 4
  %main_offset = alloca i32, align 4
  %string_offset = alloca i32, align 4
  %data_in = alloca %struct.data_in*, align 8
  %ib_main = alloca %struct.lto_input_block, align 8
  %i = alloca i32, align 4
  %count = alloca i32, align 4
  %index = alloca i32, align 4
  %node = alloca %struct.cgraph_node*, align 8
  %encoder = alloca %struct.lto_cgraph_encoder_d*, align 8
  store %struct.lto_file_decl_data* %file_data, %struct.lto_file_decl_data** %file_data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.lto_file_decl_data** %file_data.addr, metadata !5496, metadata !DIExpression()), !dbg !5497
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !5498, metadata !DIExpression()), !dbg !5499
  store i64 %len, i64* %len.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %len.addr, metadata !5500, metadata !DIExpression()), !dbg !5501
  call void @llvm.dbg.declare(metadata %struct.lto_function_header** %header, metadata !5502, metadata !DIExpression()), !dbg !5503
  %0 = load i8*, i8** %data.addr, align 8, !dbg !5504
  %1 = bitcast i8* %0 to %struct.lto_function_header*, !dbg !5505
  store %struct.lto_function_header* %1, %struct.lto_function_header** %header, align 8, !dbg !5503
  call void @llvm.dbg.declare(metadata i32* %cfg_offset, metadata !5506, metadata !DIExpression()), !dbg !5508
  store i32 36, i32* %cfg_offset, align 4, !dbg !5508
  call void @llvm.dbg.declare(metadata i32* %main_offset, metadata !5509, metadata !DIExpression()), !dbg !5510
  %2 = load %struct.lto_function_header*, %struct.lto_function_header** %header, align 8, !dbg !5511
  %cfg_size = getelementptr inbounds %struct.lto_function_header, %struct.lto_function_header* %2, i32 0, i32 5, !dbg !5512
  %3 = load i32, i32* %cfg_size, align 4, !dbg !5512
  %add = add nsw i32 36, %3, !dbg !5513
  store i32 %add, i32* %main_offset, align 4, !dbg !5510
  call void @llvm.dbg.declare(metadata i32* %string_offset, metadata !5514, metadata !DIExpression()), !dbg !5515
  %4 = load i32, i32* %main_offset, align 4, !dbg !5516
  %5 = load %struct.lto_function_header*, %struct.lto_function_header** %header, align 8, !dbg !5517
  %main_size = getelementptr inbounds %struct.lto_function_header, %struct.lto_function_header* %5, i32 0, i32 6, !dbg !5518
  %6 = load i32, i32* %main_size, align 4, !dbg !5518
  %add1 = add nsw i32 %4, %6, !dbg !5519
  store i32 %add1, i32* %string_offset, align 4, !dbg !5515
  call void @llvm.dbg.declare(metadata %struct.data_in** %data_in, metadata !5520, metadata !DIExpression()), !dbg !5548
  call void @llvm.dbg.declare(metadata %struct.lto_input_block* %ib_main, metadata !5549, metadata !DIExpression()), !dbg !5555
  call void @llvm.dbg.declare(metadata i32* %i, metadata !5556, metadata !DIExpression()), !dbg !5557
  call void @llvm.dbg.declare(metadata i32* %count, metadata !5558, metadata !DIExpression()), !dbg !5559
  br label %do.body, !dbg !5560

do.body:                                          ; preds = %entry
  %7 = load i8*, i8** %data.addr, align 8, !dbg !5561
  %8 = load i32, i32* %main_offset, align 4, !dbg !5561
  %idx.ext = sext i32 %8 to i64, !dbg !5561
  %add.ptr = getelementptr inbounds i8, i8* %7, i64 %idx.ext, !dbg !5561
  %data2 = getelementptr inbounds %struct.lto_input_block, %struct.lto_input_block* %ib_main, i32 0, i32 0, !dbg !5561
  store i8* %add.ptr, i8** %data2, align 8, !dbg !5561
  %p = getelementptr inbounds %struct.lto_input_block, %struct.lto_input_block* %ib_main, i32 0, i32 1, !dbg !5561
  store i32 0, i32* %p, align 8, !dbg !5561
  %9 = load %struct.lto_function_header*, %struct.lto_function_header** %header, align 8, !dbg !5561
  %main_size3 = getelementptr inbounds %struct.lto_function_header, %struct.lto_function_header* %9, i32 0, i32 6, !dbg !5561
  %10 = load i32, i32* %main_size3, align 4, !dbg !5561
  %len4 = getelementptr inbounds %struct.lto_input_block, %struct.lto_input_block* %ib_main, i32 0, i32 2, !dbg !5561
  store i32 %10, i32* %len4, align 4, !dbg !5561
  br label %do.end, !dbg !5561

do.end:                                           ; preds = %do.body
  %11 = load %struct.lto_file_decl_data*, %struct.lto_file_decl_data** %file_data.addr, align 8, !dbg !5563
  %12 = load i8*, i8** %data.addr, align 8, !dbg !5564
  %13 = load i32, i32* %string_offset, align 4, !dbg !5565
  %idx.ext5 = sext i32 %13 to i64, !dbg !5566
  %add.ptr6 = getelementptr inbounds i8, i8* %12, i64 %idx.ext5, !dbg !5566
  %14 = load %struct.lto_function_header*, %struct.lto_function_header** %header, align 8, !dbg !5567
  %string_size = getelementptr inbounds %struct.lto_function_header, %struct.lto_function_header* %14, i32 0, i32 7, !dbg !5568
  %15 = load i32, i32* %string_size, align 4, !dbg !5568
  %call = call %struct.data_in* @lto_data_in_create(%struct.lto_file_decl_data* %11, i8* %add.ptr6, i32 %15, %struct.VEC_ld_plugin_symbol_resolution_t_heap* null), !dbg !5569
  store %struct.data_in* %call, %struct.data_in** %data_in, align 8, !dbg !5570
  %call7 = call i64 @lto_input_uleb128(%struct.lto_input_block* %ib_main), !dbg !5571
  %conv = trunc i64 %call7 to i32, !dbg !5571
  store i32 %conv, i32* %count, align 4, !dbg !5572
  store i32 0, i32* %i, align 4, !dbg !5573
  br label %for.cond, !dbg !5575

for.cond:                                         ; preds = %for.inc, %do.end
  %16 = load i32, i32* %i, align 4, !dbg !5576
  %17 = load i32, i32* %count, align 4, !dbg !5578
  %cmp = icmp ult i32 %16, %17, !dbg !5579
  br i1 %cmp, label %for.body, label %for.end, !dbg !5580

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata i32* %index, metadata !5581, metadata !DIExpression()), !dbg !5583
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %node, metadata !5584, metadata !DIExpression()), !dbg !5585
  call void @llvm.dbg.declare(metadata %struct.lto_cgraph_encoder_d** %encoder, metadata !5586, metadata !DIExpression()), !dbg !5587
  %call9 = call i64 @lto_input_uleb128(%struct.lto_input_block* %ib_main), !dbg !5588
  %conv10 = trunc i64 %call9 to i32, !dbg !5588
  store i32 %conv10, i32* %index, align 4, !dbg !5589
  %18 = load %struct.lto_file_decl_data*, %struct.lto_file_decl_data** %file_data.addr, align 8, !dbg !5590
  %cgraph_node_encoder = getelementptr inbounds %struct.lto_file_decl_data, %struct.lto_file_decl_data* %18, i32 0, i32 2, !dbg !5591
  %19 = load %struct.lto_cgraph_encoder_d*, %struct.lto_cgraph_encoder_d** %cgraph_node_encoder, align 8, !dbg !5591
  store %struct.lto_cgraph_encoder_d* %19, %struct.lto_cgraph_encoder_d** %encoder, align 8, !dbg !5592
  %20 = load %struct.lto_cgraph_encoder_d*, %struct.lto_cgraph_encoder_d** %encoder, align 8, !dbg !5593
  %21 = load i32, i32* %index, align 4, !dbg !5594
  %call11 = call %struct.cgraph_node* @lto_cgraph_encoder_deref(%struct.lto_cgraph_encoder_d* %20, i32 %21), !dbg !5595
  store %struct.cgraph_node* %call11, %struct.cgraph_node** %node, align 8, !dbg !5596
  %22 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !5597
  %23 = load %struct.data_in*, %struct.data_in** %data_in, align 8, !dbg !5598
  call void @ipa_read_node_info(%struct.lto_input_block* %ib_main, %struct.cgraph_node* %22, %struct.data_in* %23), !dbg !5599
  br label %for.inc, !dbg !5600

for.inc:                                          ; preds = %for.body
  %24 = load i32, i32* %i, align 4, !dbg !5601
  %inc = add i32 %24, 1, !dbg !5601
  store i32 %inc, i32* %i, align 4, !dbg !5601
  br label %for.cond, !dbg !5602, !llvm.loop !5603

for.end:                                          ; preds = %for.cond
  %25 = load %struct.lto_file_decl_data*, %struct.lto_file_decl_data** %file_data.addr, align 8, !dbg !5605
  %26 = load i8*, i8** %data.addr, align 8, !dbg !5606
  %27 = load i64, i64* %len.addr, align 8, !dbg !5607
  call void @lto_free_section_data(%struct.lto_file_decl_data* %25, i32 4, i8* null, i8* %26, i64 %27), !dbg !5608
  %28 = load %struct.data_in*, %struct.data_in** %data_in, align 8, !dbg !5609
  call void @lto_data_in_delete(%struct.data_in* %28), !dbg !5610
  ret void, !dbg !5611
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @ipa_update_after_lto_read() #0 !dbg !5612 {
entry:
  %node = alloca %struct.cgraph_node*, align 8
  %cs = alloca %struct.cgraph_edge*, align 8
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %node, metadata !5613, metadata !DIExpression()), !dbg !5614
  call void @llvm.dbg.declare(metadata %struct.cgraph_edge** %cs, metadata !5615, metadata !DIExpression()), !dbg !5616
  call void @ipa_check_create_node_params(), !dbg !5617
  call void @ipa_check_create_edge_args(), !dbg !5618
  %0 = load %struct.cgraph_node*, %struct.cgraph_node** @cgraph_nodes, align 8, !dbg !5619
  store %struct.cgraph_node* %0, %struct.cgraph_node** %node, align 8, !dbg !5621
  br label %for.cond, !dbg !5622

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !5623
  %tobool = icmp ne %struct.cgraph_node* %1, null, !dbg !5625
  br i1 %tobool, label %for.body, label %for.end, !dbg !5625

for.body:                                         ; preds = %for.cond
  %2 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !5626
  %analyzed = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %2, i32 0, i32 27, !dbg !5628
  %bf.load = load i16, i16* %analyzed, align 4, !dbg !5628
  %bf.lshr = lshr i16 %bf.load, 5, !dbg !5628
  %bf.clear = and i16 %bf.lshr, 1, !dbg !5628
  %bf.cast = zext i16 %bf.clear to i32, !dbg !5628
  %tobool1 = icmp ne i32 %bf.cast, 0, !dbg !5626
  br i1 %tobool1, label %if.then, label %if.end, !dbg !5629

if.then:                                          ; preds = %for.body
  %3 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !5630
  call void @ipa_initialize_node_params(%struct.cgraph_node* %3), !dbg !5631
  br label %if.end, !dbg !5631

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc, !dbg !5628

for.inc:                                          ; preds = %if.end
  %4 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !5632
  %next = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %4, i32 0, i32 3, !dbg !5633
  %5 = load %struct.cgraph_node*, %struct.cgraph_node** %next, align 8, !dbg !5633
  store %struct.cgraph_node* %5, %struct.cgraph_node** %node, align 8, !dbg !5634
  br label %for.cond, !dbg !5635, !llvm.loop !5636

for.end:                                          ; preds = %for.cond
  %6 = load %struct.cgraph_node*, %struct.cgraph_node** @cgraph_nodes, align 8, !dbg !5638
  store %struct.cgraph_node* %6, %struct.cgraph_node** %node, align 8, !dbg !5640
  br label %for.cond2, !dbg !5641

for.cond2:                                        ; preds = %for.inc40, %for.end
  %7 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !5642
  %tobool3 = icmp ne %struct.cgraph_node* %7, null, !dbg !5644
  br i1 %tobool3, label %for.body4, label %for.end42, !dbg !5644

for.body4:                                        ; preds = %for.cond2
  %8 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !5645
  %analyzed5 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %8, i32 0, i32 27, !dbg !5647
  %bf.load6 = load i16, i16* %analyzed5, align 4, !dbg !5647
  %bf.lshr7 = lshr i16 %bf.load6, 5, !dbg !5647
  %bf.clear8 = and i16 %bf.lshr7, 1, !dbg !5647
  %bf.cast9 = zext i16 %bf.clear8 to i32, !dbg !5647
  %tobool10 = icmp ne i32 %bf.cast9, 0, !dbg !5645
  br i1 %tobool10, label %if.then11, label %if.end39, !dbg !5648

if.then11:                                        ; preds = %for.body4
  %9 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !5649
  %callees = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %9, i32 0, i32 1, !dbg !5651
  %10 = load %struct.cgraph_edge*, %struct.cgraph_edge** %callees, align 8, !dbg !5651
  store %struct.cgraph_edge* %10, %struct.cgraph_edge** %cs, align 8, !dbg !5652
  br label %for.cond12, !dbg !5653

for.cond12:                                       ; preds = %for.inc37, %if.then11
  %11 = load %struct.cgraph_edge*, %struct.cgraph_edge** %cs, align 8, !dbg !5654
  %tobool13 = icmp ne %struct.cgraph_edge* %11, null, !dbg !5656
  br i1 %tobool13, label %for.body14, label %for.end38, !dbg !5656

for.body14:                                       ; preds = %for.cond12
  %12 = load %struct.VEC_ipa_edge_args_t_gc*, %struct.VEC_ipa_edge_args_t_gc** @ipa_edge_args_vector, align 8, !dbg !5657
  %tobool15 = icmp ne %struct.VEC_ipa_edge_args_t_gc* %12, null, !dbg !5657
  br i1 %tobool15, label %cond.true, label %cond.false, !dbg !5657

cond.true:                                        ; preds = %for.body14
  %13 = load %struct.VEC_ipa_edge_args_t_gc*, %struct.VEC_ipa_edge_args_t_gc** @ipa_edge_args_vector, align 8, !dbg !5657
  %base = getelementptr inbounds %struct.VEC_ipa_edge_args_t_gc, %struct.VEC_ipa_edge_args_t_gc* %13, i32 0, i32 0, !dbg !5657
  br label %cond.end, !dbg !5657

cond.false:                                       ; preds = %for.body14
  br label %cond.end, !dbg !5657

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_ipa_edge_args_t_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5657
  %14 = load %struct.cgraph_edge*, %struct.cgraph_edge** %cs, align 8, !dbg !5657
  %uid = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %14, i32 0, i32 12, !dbg !5657
  %15 = load i32, i32* %uid, align 4, !dbg !5657
  %call = call %struct.ipa_edge_args* @VEC_ipa_edge_args_t_base_index(%struct.VEC_ipa_edge_args_t_base* %cond, i32 %15), !dbg !5657
  %call16 = call i32 @ipa_get_cs_argument_count(%struct.ipa_edge_args* %call), !dbg !5660
  %16 = load %struct.VEC_ipa_node_params_t_heap*, %struct.VEC_ipa_node_params_t_heap** @ipa_node_params_vector, align 8, !dbg !5661
  %tobool17 = icmp ne %struct.VEC_ipa_node_params_t_heap* %16, null, !dbg !5661
  br i1 %tobool17, label %cond.true18, label %cond.false20, !dbg !5661

cond.true18:                                      ; preds = %cond.end
  %17 = load %struct.VEC_ipa_node_params_t_heap*, %struct.VEC_ipa_node_params_t_heap** @ipa_node_params_vector, align 8, !dbg !5661
  %base19 = getelementptr inbounds %struct.VEC_ipa_node_params_t_heap, %struct.VEC_ipa_node_params_t_heap* %17, i32 0, i32 0, !dbg !5661
  br label %cond.end21, !dbg !5661

cond.false20:                                     ; preds = %cond.end
  br label %cond.end21, !dbg !5661

cond.end21:                                       ; preds = %cond.false20, %cond.true18
  %cond22 = phi %struct.VEC_ipa_node_params_t_base* [ %base19, %cond.true18 ], [ null, %cond.false20 ], !dbg !5661
  %18 = load %struct.cgraph_edge*, %struct.cgraph_edge** %cs, align 8, !dbg !5661
  %callee = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %18, i32 0, i32 2, !dbg !5661
  %19 = load %struct.cgraph_node*, %struct.cgraph_node** %callee, align 8, !dbg !5661
  %uid23 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %19, i32 0, i32 24, !dbg !5661
  %20 = load i32, i32* %uid23, align 8, !dbg !5661
  %call24 = call %struct.ipa_node_params* @VEC_ipa_node_params_t_base_index(%struct.VEC_ipa_node_params_t_base* %cond22, i32 %20), !dbg !5661
  %call25 = call i32 @ipa_get_param_count(%struct.ipa_node_params* %call24), !dbg !5662
  %cmp = icmp ne i32 %call16, %call25, !dbg !5663
  br i1 %cmp, label %if.then26, label %if.end36, !dbg !5664

if.then26:                                        ; preds = %cond.end21
  %21 = load %struct.VEC_ipa_node_params_t_heap*, %struct.VEC_ipa_node_params_t_heap** @ipa_node_params_vector, align 8, !dbg !5665
  %tobool27 = icmp ne %struct.VEC_ipa_node_params_t_heap* %21, null, !dbg !5665
  br i1 %tobool27, label %cond.true28, label %cond.false30, !dbg !5665

cond.true28:                                      ; preds = %if.then26
  %22 = load %struct.VEC_ipa_node_params_t_heap*, %struct.VEC_ipa_node_params_t_heap** @ipa_node_params_vector, align 8, !dbg !5665
  %base29 = getelementptr inbounds %struct.VEC_ipa_node_params_t_heap, %struct.VEC_ipa_node_params_t_heap* %22, i32 0, i32 0, !dbg !5665
  br label %cond.end31, !dbg !5665

cond.false30:                                     ; preds = %if.then26
  br label %cond.end31, !dbg !5665

cond.end31:                                       ; preds = %cond.false30, %cond.true28
  %cond32 = phi %struct.VEC_ipa_node_params_t_base* [ %base29, %cond.true28 ], [ null, %cond.false30 ], !dbg !5665
  %23 = load %struct.cgraph_edge*, %struct.cgraph_edge** %cs, align 8, !dbg !5665
  %callee33 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %23, i32 0, i32 2, !dbg !5665
  %24 = load %struct.cgraph_node*, %struct.cgraph_node** %callee33, align 8, !dbg !5665
  %uid34 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %24, i32 0, i32 24, !dbg !5665
  %25 = load i32, i32* %uid34, align 8, !dbg !5665
  %call35 = call %struct.ipa_node_params* @VEC_ipa_node_params_t_base_index(%struct.VEC_ipa_node_params_t_base* %cond32, i32 %25), !dbg !5665
  call void @ipa_set_called_with_variable_arg(%struct.ipa_node_params* %call35), !dbg !5666
  br label %if.end36, !dbg !5666

if.end36:                                         ; preds = %cond.end31, %cond.end21
  br label %for.inc37, !dbg !5667

for.inc37:                                        ; preds = %if.end36
  %26 = load %struct.cgraph_edge*, %struct.cgraph_edge** %cs, align 8, !dbg !5668
  %next_callee = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %26, i32 0, i32 6, !dbg !5669
  %27 = load %struct.cgraph_edge*, %struct.cgraph_edge** %next_callee, align 8, !dbg !5669
  store %struct.cgraph_edge* %27, %struct.cgraph_edge** %cs, align 8, !dbg !5670
  br label %for.cond12, !dbg !5671, !llvm.loop !5672

for.end38:                                        ; preds = %for.cond12
  br label %if.end39, !dbg !5673

if.end39:                                         ; preds = %for.end38, %for.body4
  br label %for.inc40, !dbg !5647

for.inc40:                                        ; preds = %if.end39
  %28 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !5674
  %next41 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %28, i32 0, i32 3, !dbg !5675
  %29 = load %struct.cgraph_node*, %struct.cgraph_node** %next41, align 8, !dbg !5675
  store %struct.cgraph_node* %29, %struct.cgraph_node** %node, align 8, !dbg !5676
  br label %for.cond2, !dbg !5677, !llvm.loop !5678

for.end42:                                        ; preds = %for.cond2
  ret void, !dbg !5680
}

; Function Attrs: noinline nounwind uwtable
define internal void @ipa_set_called_with_variable_arg(%struct.ipa_node_params* %info) #0 !dbg !5681 {
entry:
  %info.addr = alloca %struct.ipa_node_params*, align 8
  store %struct.ipa_node_params* %info, %struct.ipa_node_params** %info.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ipa_node_params** %info.addr, metadata !5682, metadata !DIExpression()), !dbg !5683
  %0 = load %struct.ipa_node_params*, %struct.ipa_node_params** %info.addr, align 8, !dbg !5684
  %called_with_var_arguments = getelementptr inbounds %struct.ipa_node_params, %struct.ipa_node_params* %0, i32 0, i32 5, !dbg !5685
  %bf.load = load i8, i8* %called_with_var_arguments, align 8, !dbg !5686
  %bf.clear = and i8 %bf.load, -2, !dbg !5686
  %bf.set = or i8 %bf.clear, 1, !dbg !5686
  store i8 %bf.set, i8* %called_with_var_arguments, align 8, !dbg !5686
  ret void, !dbg !5687
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @lto_ipa_fixup_call_notes(%struct.cgraph_node* %node, %union.gimple_statement_d** %stmts) #0 !dbg !5688 {
entry:
  %node.addr = alloca %struct.cgraph_node*, align 8
  %stmts.addr = alloca %union.gimple_statement_d**, align 8
  %info = alloca %struct.ipa_node_params*, align 8
  %note = alloca %struct.ipa_param_call_note*, align 8
  store %struct.cgraph_node* %node, %struct.cgraph_node** %node.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %node.addr, metadata !5689, metadata !DIExpression()), !dbg !5690
  store %union.gimple_statement_d** %stmts, %union.gimple_statement_d*** %stmts.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d*** %stmts.addr, metadata !5691, metadata !DIExpression()), !dbg !5692
  call void @llvm.dbg.declare(metadata %struct.ipa_node_params** %info, metadata !5693, metadata !DIExpression()), !dbg !5694
  call void @llvm.dbg.declare(metadata %struct.ipa_param_call_note** %note, metadata !5695, metadata !DIExpression()), !dbg !5696
  call void @ipa_check_create_node_params(), !dbg !5697
  %0 = load %struct.VEC_ipa_node_params_t_heap*, %struct.VEC_ipa_node_params_t_heap** @ipa_node_params_vector, align 8, !dbg !5698
  %tobool = icmp ne %struct.VEC_ipa_node_params_t_heap* %0, null, !dbg !5698
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5698

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_ipa_node_params_t_heap*, %struct.VEC_ipa_node_params_t_heap** @ipa_node_params_vector, align 8, !dbg !5698
  %base = getelementptr inbounds %struct.VEC_ipa_node_params_t_heap, %struct.VEC_ipa_node_params_t_heap* %1, i32 0, i32 0, !dbg !5698
  br label %cond.end, !dbg !5698

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5698

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_ipa_node_params_t_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5698
  %2 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !5698
  %uid = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %2, i32 0, i32 24, !dbg !5698
  %3 = load i32, i32* %uid, align 8, !dbg !5698
  %call = call %struct.ipa_node_params* @VEC_ipa_node_params_t_base_index(%struct.VEC_ipa_node_params_t_base* %cond, i32 %3), !dbg !5698
  store %struct.ipa_node_params* %call, %struct.ipa_node_params** %info, align 8, !dbg !5699
  %4 = load %struct.ipa_node_params*, %struct.ipa_node_params** %info, align 8, !dbg !5700
  %param_calls = getelementptr inbounds %struct.ipa_node_params, %struct.ipa_node_params* %4, i32 0, i32 2, !dbg !5701
  %5 = load %struct.ipa_param_call_note*, %struct.ipa_param_call_note** %param_calls, align 8, !dbg !5701
  store %struct.ipa_param_call_note* %5, %struct.ipa_param_call_note** %note, align 8, !dbg !5702
  %6 = load %struct.ipa_param_call_note*, %struct.ipa_param_call_note** %note, align 8, !dbg !5703
  %tobool1 = icmp ne %struct.ipa_param_call_note* %6, null, !dbg !5703
  br i1 %tobool1, label %lor.lhs.false, label %if.then, !dbg !5705

lor.lhs.false:                                    ; preds = %cond.end
  %7 = load %struct.ipa_param_call_note*, %struct.ipa_param_call_note** %note, align 8, !dbg !5706
  %stmt = getelementptr inbounds %struct.ipa_param_call_note, %struct.ipa_param_call_note* %7, i32 0, i32 2, !dbg !5707
  %8 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5707
  %tobool2 = icmp ne %union.gimple_statement_d* %8, null, !dbg !5706
  br i1 %tobool2, label %if.then, label %if.end, !dbg !5708

if.then:                                          ; preds = %lor.lhs.false, %cond.end
  br label %do.end, !dbg !5709

if.end:                                           ; preds = %lor.lhs.false
  br label %do.body, !dbg !5710

do.body:                                          ; preds = %do.cond, %if.end
  %9 = load %union.gimple_statement_d**, %union.gimple_statement_d*** %stmts.addr, align 8, !dbg !5711
  %10 = load %struct.ipa_param_call_note*, %struct.ipa_param_call_note** %note, align 8, !dbg !5713
  %lto_stmt_uid = getelementptr inbounds %struct.ipa_param_call_note, %struct.ipa_param_call_note* %10, i32 0, i32 3, !dbg !5714
  %11 = load i32, i32* %lto_stmt_uid, align 8, !dbg !5714
  %idxprom = zext i32 %11 to i64, !dbg !5711
  %arrayidx = getelementptr inbounds %union.gimple_statement_d*, %union.gimple_statement_d** %9, i64 %idxprom, !dbg !5711
  %12 = load %union.gimple_statement_d*, %union.gimple_statement_d** %arrayidx, align 8, !dbg !5711
  %13 = load %struct.ipa_param_call_note*, %struct.ipa_param_call_note** %note, align 8, !dbg !5715
  %stmt3 = getelementptr inbounds %struct.ipa_param_call_note, %struct.ipa_param_call_note* %13, i32 0, i32 2, !dbg !5716
  store %union.gimple_statement_d* %12, %union.gimple_statement_d** %stmt3, align 8, !dbg !5717
  %14 = load %struct.ipa_param_call_note*, %struct.ipa_param_call_note** %note, align 8, !dbg !5718
  %next = getelementptr inbounds %struct.ipa_param_call_note, %struct.ipa_param_call_note* %14, i32 0, i32 1, !dbg !5719
  %15 = load %struct.ipa_param_call_note*, %struct.ipa_param_call_note** %next, align 8, !dbg !5719
  store %struct.ipa_param_call_note* %15, %struct.ipa_param_call_note** %note, align 8, !dbg !5720
  br label %do.cond, !dbg !5721

do.cond:                                          ; preds = %do.body
  %16 = load %struct.ipa_param_call_note*, %struct.ipa_param_call_note** %note, align 8, !dbg !5722
  %tobool4 = icmp ne %struct.ipa_param_call_note* %16, null, !dbg !5721
  br i1 %tobool4, label %do.body, label %do.end, !dbg !5721, !llvm.loop !5723

do.end:                                           ; preds = %if.then, %do.cond
  ret void, !dbg !5725
}

; Function Attrs: noinline nounwind uwtable
define internal void @ipa_set_param_count(%struct.ipa_node_params* %info, i32 %count) #0 !dbg !5726 {
entry:
  %info.addr = alloca %struct.ipa_node_params*, align 8
  %count.addr = alloca i32, align 4
  store %struct.ipa_node_params* %info, %struct.ipa_node_params** %info.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ipa_node_params** %info.addr, metadata !5729, metadata !DIExpression()), !dbg !5730
  store i32 %count, i32* %count.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %count.addr, metadata !5731, metadata !DIExpression()), !dbg !5732
  %0 = load i32, i32* %count.addr, align 4, !dbg !5733
  %1 = load %struct.ipa_node_params*, %struct.ipa_node_params** %info.addr, align 8, !dbg !5734
  %param_count = getelementptr inbounds %struct.ipa_node_params, %struct.ipa_node_params* %1, i32 0, i32 0, !dbg !5735
  store i32 %0, i32* %param_count, align 8, !dbg !5736
  ret void, !dbg !5737
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.gimple_seq_d* @bb_seq(%struct.basic_block_def* %bb) #0 !dbg !5738 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !5744, metadata !DIExpression()), !dbg !5745
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5746
  %flags = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 13, !dbg !5747
  %1 = load i32, i32* %flags, align 8, !dbg !5747
  %and = and i32 %1, 512, !dbg !5748
  %tobool = icmp ne i32 %and, 0, !dbg !5748
  br i1 %tobool, label %cond.false, label %land.lhs.true, !dbg !5749

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5750
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 7, !dbg !5751
  %gimple = bitcast %union.basic_block_il_dependent* %il to %struct.gimple_bb_info**, !dbg !5752
  %3 = load %struct.gimple_bb_info*, %struct.gimple_bb_info** %gimple, align 8, !dbg !5752
  %tobool1 = icmp ne %struct.gimple_bb_info* %3, null, !dbg !5750
  br i1 %tobool1, label %cond.true, label %cond.false, !dbg !5753

cond.true:                                        ; preds = %land.lhs.true
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5754
  %il2 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %4, i32 0, i32 7, !dbg !5755
  %gimple3 = bitcast %union.basic_block_il_dependent* %il2 to %struct.gimple_bb_info**, !dbg !5756
  %5 = load %struct.gimple_bb_info*, %struct.gimple_bb_info** %gimple3, align 8, !dbg !5756
  %seq = getelementptr inbounds %struct.gimple_bb_info, %struct.gimple_bb_info* %5, i32 0, i32 0, !dbg !5757
  %6 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq, align 8, !dbg !5757
  br label %cond.end, !dbg !5753

cond.false:                                       ; preds = %land.lhs.true, %entry
  br label %cond.end, !dbg !5753

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.gimple_seq_d* [ %6, %cond.true ], [ null, %cond.false ], !dbg !5753
  ret %struct.gimple_seq_d* %cond, !dbg !5758
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.gimple_seq_node_d* @gimple_seq_first(%struct.gimple_seq_d* %s) #0 !dbg !5759 {
entry:
  %s.addr = alloca %struct.gimple_seq_d*, align 8
  store %struct.gimple_seq_d* %s, %struct.gimple_seq_d** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %s.addr, metadata !5765, metadata !DIExpression()), !dbg !5766
  %0 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %s.addr, align 8, !dbg !5767
  %tobool = icmp ne %struct.gimple_seq_d* %0, null, !dbg !5767
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5767

cond.true:                                        ; preds = %entry
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %s.addr, align 8, !dbg !5768
  %first = getelementptr inbounds %struct.gimple_seq_d, %struct.gimple_seq_d* %1, i32 0, i32 0, !dbg !5769
  %2 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %first, align 8, !dbg !5769
  br label %cond.end, !dbg !5767

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5767

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.gimple_seq_node_d* [ %2, %cond.true ], [ null, %cond.false ], !dbg !5767
  ret %struct.gimple_seq_node_d* %cond, !dbg !5770
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @ipa_get_param_decl_index(%struct.ipa_node_params* %info, %union.tree_node* %ptree) #0 !dbg !5771 {
entry:
  %retval = alloca i32, align 4
  %info.addr = alloca %struct.ipa_node_params*, align 8
  %ptree.addr = alloca %union.tree_node*, align 8
  %i = alloca i32, align 4
  %count = alloca i32, align 4
  store %struct.ipa_node_params* %info, %struct.ipa_node_params** %info.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ipa_node_params** %info.addr, metadata !5774, metadata !DIExpression()), !dbg !5775
  store %union.tree_node* %ptree, %union.tree_node** %ptree.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %ptree.addr, metadata !5776, metadata !DIExpression()), !dbg !5777
  call void @llvm.dbg.declare(metadata i32* %i, metadata !5778, metadata !DIExpression()), !dbg !5779
  call void @llvm.dbg.declare(metadata i32* %count, metadata !5780, metadata !DIExpression()), !dbg !5781
  %0 = load %struct.ipa_node_params*, %struct.ipa_node_params** %info.addr, align 8, !dbg !5782
  %call = call i32 @ipa_get_param_count(%struct.ipa_node_params* %0), !dbg !5783
  store i32 %call, i32* %count, align 4, !dbg !5784
  store i32 0, i32* %i, align 4, !dbg !5785
  br label %for.cond, !dbg !5787

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %i, align 4, !dbg !5788
  %2 = load i32, i32* %count, align 4, !dbg !5790
  %cmp = icmp slt i32 %1, %2, !dbg !5791
  br i1 %cmp, label %for.body, label %for.end, !dbg !5792

for.body:                                         ; preds = %for.cond
  %3 = load %struct.ipa_node_params*, %struct.ipa_node_params** %info.addr, align 8, !dbg !5793
  %4 = load i32, i32* %i, align 4, !dbg !5795
  %call1 = call %union.tree_node* @ipa_get_param(%struct.ipa_node_params* %3, i32 %4), !dbg !5796
  %5 = load %union.tree_node*, %union.tree_node** %ptree.addr, align 8, !dbg !5797
  %cmp2 = icmp eq %union.tree_node* %call1, %5, !dbg !5798
  br i1 %cmp2, label %if.then, label %if.end, !dbg !5799

if.then:                                          ; preds = %for.body
  %6 = load i32, i32* %i, align 4, !dbg !5800
  store i32 %6, i32* %retval, align 4, !dbg !5801
  br label %return, !dbg !5801

if.end:                                           ; preds = %for.body
  br label %for.inc, !dbg !5797

for.inc:                                          ; preds = %if.end
  %7 = load i32, i32* %i, align 4, !dbg !5802
  %inc = add nsw i32 %7, 1, !dbg !5802
  store i32 %inc, i32* %i, align 4, !dbg !5802
  br label %for.cond, !dbg !5803, !llvm.loop !5804

for.end:                                          ; preds = %for.cond
  store i32 -1, i32* %retval, align 4, !dbg !5806
  br label %return, !dbg !5806

return:                                           ; preds = %for.end, %if.then
  %8 = load i32, i32* %retval, align 4, !dbg !5807
  ret i32 %8, !dbg !5807
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_code(%union.gimple_statement_d* %g) #0 !dbg !5808 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !5811, metadata !DIExpression()), !dbg !5812
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !5813
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !5814
  %1 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !5815
  %bf.load = load i32, i32* %1, align 8, !dbg !5815
  %bf.clear = and i32 %bf.load, 255, !dbg !5815
  ret i32 %bf.clear, !dbg !5816
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_num_ops(%union.gimple_statement_d* %gs) #0 !dbg !5817 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5818, metadata !DIExpression()), !dbg !5819
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5820
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !5821
  %num_ops = getelementptr inbounds %struct.gimple_statement_base, %struct.gimple_statement_base* %gsbase, i32 0, i32 3, !dbg !5822
  %1 = load i32, i32* %num_ops, align 4, !dbg !5822
  ret i32 %1, !dbg !5823
}

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_ipa_edge_args_t_gc_safe_grow(%struct.VEC_ipa_edge_args_t_gc** %vec_, i32 %size_) #0 !dbg !5824 {
entry:
  %vec_.addr = alloca %struct.VEC_ipa_edge_args_t_gc**, align 8
  %size_.addr = alloca i32, align 4
  store %struct.VEC_ipa_edge_args_t_gc** %vec_, %struct.VEC_ipa_edge_args_t_gc*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_ipa_edge_args_t_gc*** %vec_.addr, metadata !5825, metadata !DIExpression()), !dbg !5826
  store i32 %size_, i32* %size_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %size_.addr, metadata !5827, metadata !DIExpression()), !dbg !5826
  %0 = load i32, i32* %size_.addr, align 4, !dbg !5826
  %cmp = icmp sge i32 %0, 0, !dbg !5826
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !5826

land.rhs:                                         ; preds = %entry
  %1 = load %struct.VEC_ipa_edge_args_t_gc**, %struct.VEC_ipa_edge_args_t_gc*** %vec_.addr, align 8, !dbg !5826
  %2 = load %struct.VEC_ipa_edge_args_t_gc*, %struct.VEC_ipa_edge_args_t_gc** %1, align 8, !dbg !5826
  %tobool = icmp ne %struct.VEC_ipa_edge_args_t_gc* %2, null, !dbg !5826
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5826

cond.true:                                        ; preds = %land.rhs
  %3 = load %struct.VEC_ipa_edge_args_t_gc**, %struct.VEC_ipa_edge_args_t_gc*** %vec_.addr, align 8, !dbg !5826
  %4 = load %struct.VEC_ipa_edge_args_t_gc*, %struct.VEC_ipa_edge_args_t_gc** %3, align 8, !dbg !5826
  %base = getelementptr inbounds %struct.VEC_ipa_edge_args_t_gc, %struct.VEC_ipa_edge_args_t_gc* %4, i32 0, i32 0, !dbg !5826
  br label %cond.end, !dbg !5826

cond.false:                                       ; preds = %land.rhs
  br label %cond.end, !dbg !5826

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_ipa_edge_args_t_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5826
  %call = call i32 @VEC_ipa_edge_args_t_base_length(%struct.VEC_ipa_edge_args_t_base* %cond), !dbg !5826
  %5 = load i32, i32* %size_.addr, align 4, !dbg !5826
  %cmp1 = icmp ule i32 %call, %5, !dbg !5826
  br label %land.end

land.end:                                         ; preds = %cond.end, %entry
  %6 = phi i1 [ false, %entry ], [ %cmp1, %cond.end ], !dbg !5828
  %land.ext = zext i1 %6 to i32, !dbg !5826
  %7 = load %struct.VEC_ipa_edge_args_t_gc**, %struct.VEC_ipa_edge_args_t_gc*** %vec_.addr, align 8, !dbg !5826
  %8 = load i32, i32* %size_.addr, align 4, !dbg !5826
  %9 = load %struct.VEC_ipa_edge_args_t_gc**, %struct.VEC_ipa_edge_args_t_gc*** %vec_.addr, align 8, !dbg !5826
  %10 = load %struct.VEC_ipa_edge_args_t_gc*, %struct.VEC_ipa_edge_args_t_gc** %9, align 8, !dbg !5826
  %tobool2 = icmp ne %struct.VEC_ipa_edge_args_t_gc* %10, null, !dbg !5826
  br i1 %tobool2, label %cond.true3, label %cond.false10, !dbg !5826

cond.true3:                                       ; preds = %land.end
  %11 = load %struct.VEC_ipa_edge_args_t_gc**, %struct.VEC_ipa_edge_args_t_gc*** %vec_.addr, align 8, !dbg !5826
  %12 = load %struct.VEC_ipa_edge_args_t_gc*, %struct.VEC_ipa_edge_args_t_gc** %11, align 8, !dbg !5826
  %tobool4 = icmp ne %struct.VEC_ipa_edge_args_t_gc* %12, null, !dbg !5826
  br i1 %tobool4, label %cond.true5, label %cond.false7, !dbg !5826

cond.true5:                                       ; preds = %cond.true3
  %13 = load %struct.VEC_ipa_edge_args_t_gc**, %struct.VEC_ipa_edge_args_t_gc*** %vec_.addr, align 8, !dbg !5826
  %14 = load %struct.VEC_ipa_edge_args_t_gc*, %struct.VEC_ipa_edge_args_t_gc** %13, align 8, !dbg !5826
  %base6 = getelementptr inbounds %struct.VEC_ipa_edge_args_t_gc, %struct.VEC_ipa_edge_args_t_gc* %14, i32 0, i32 0, !dbg !5826
  br label %cond.end8, !dbg !5826

cond.false7:                                      ; preds = %cond.true3
  br label %cond.end8, !dbg !5826

cond.end8:                                        ; preds = %cond.false7, %cond.true5
  %cond9 = phi %struct.VEC_ipa_edge_args_t_base* [ %base6, %cond.true5 ], [ null, %cond.false7 ], !dbg !5826
  %num = getelementptr inbounds %struct.VEC_ipa_edge_args_t_base, %struct.VEC_ipa_edge_args_t_base* %cond9, i32 0, i32 0, !dbg !5826
  %15 = load i32, i32* %num, align 8, !dbg !5826
  br label %cond.end11, !dbg !5826

cond.false10:                                     ; preds = %land.end
  br label %cond.end11, !dbg !5826

cond.end11:                                       ; preds = %cond.false10, %cond.end8
  %cond12 = phi i32 [ %15, %cond.end8 ], [ 0, %cond.false10 ], !dbg !5826
  %sub = sub nsw i32 %8, %cond12, !dbg !5826
  %call13 = call i32 @VEC_ipa_edge_args_t_gc_reserve_exact(%struct.VEC_ipa_edge_args_t_gc** %7, i32 %sub), !dbg !5826
  %16 = load i32, i32* %size_.addr, align 4, !dbg !5826
  %17 = load %struct.VEC_ipa_edge_args_t_gc**, %struct.VEC_ipa_edge_args_t_gc*** %vec_.addr, align 8, !dbg !5826
  %18 = load %struct.VEC_ipa_edge_args_t_gc*, %struct.VEC_ipa_edge_args_t_gc** %17, align 8, !dbg !5826
  %tobool14 = icmp ne %struct.VEC_ipa_edge_args_t_gc* %18, null, !dbg !5826
  br i1 %tobool14, label %cond.true15, label %cond.false17, !dbg !5826

cond.true15:                                      ; preds = %cond.end11
  %19 = load %struct.VEC_ipa_edge_args_t_gc**, %struct.VEC_ipa_edge_args_t_gc*** %vec_.addr, align 8, !dbg !5826
  %20 = load %struct.VEC_ipa_edge_args_t_gc*, %struct.VEC_ipa_edge_args_t_gc** %19, align 8, !dbg !5826
  %base16 = getelementptr inbounds %struct.VEC_ipa_edge_args_t_gc, %struct.VEC_ipa_edge_args_t_gc* %20, i32 0, i32 0, !dbg !5826
  br label %cond.end18, !dbg !5826

cond.false17:                                     ; preds = %cond.end11
  br label %cond.end18, !dbg !5826

cond.end18:                                       ; preds = %cond.false17, %cond.true15
  %cond19 = phi %struct.VEC_ipa_edge_args_t_base* [ %base16, %cond.true15 ], [ null, %cond.false17 ], !dbg !5826
  %num20 = getelementptr inbounds %struct.VEC_ipa_edge_args_t_base, %struct.VEC_ipa_edge_args_t_base* %cond19, i32 0, i32 0, !dbg !5826
  store i32 %16, i32* %num20, align 8, !dbg !5826
  ret void, !dbg !5826
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ipa_edge_args* @VEC_ipa_edge_args_t_base_address(%struct.VEC_ipa_edge_args_t_base* %vec_) #0 !dbg !5829 {
entry:
  %vec_.addr = alloca %struct.VEC_ipa_edge_args_t_base*, align 8
  store %struct.VEC_ipa_edge_args_t_base* %vec_, %struct.VEC_ipa_edge_args_t_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_ipa_edge_args_t_base** %vec_.addr, metadata !5832, metadata !DIExpression()), !dbg !5833
  %0 = load %struct.VEC_ipa_edge_args_t_base*, %struct.VEC_ipa_edge_args_t_base** %vec_.addr, align 8, !dbg !5833
  %tobool = icmp ne %struct.VEC_ipa_edge_args_t_base* %0, null, !dbg !5833
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5833

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_ipa_edge_args_t_base*, %struct.VEC_ipa_edge_args_t_base** %vec_.addr, align 8, !dbg !5833
  %vec = getelementptr inbounds %struct.VEC_ipa_edge_args_t_base, %struct.VEC_ipa_edge_args_t_base* %1, i32 0, i32 2, !dbg !5833
  %arraydecay = getelementptr inbounds [1 x %struct.ipa_edge_args], [1 x %struct.ipa_edge_args]* %vec, i64 0, i64 0, !dbg !5833
  br label %cond.end, !dbg !5833

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5833

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.ipa_edge_args* [ %arraydecay, %cond.true ], [ null, %cond.false ], !dbg !5833
  ret %struct.ipa_edge_args* %cond, !dbg !5833
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_ipa_edge_args_t_gc_reserve_exact(%struct.VEC_ipa_edge_args_t_gc** %vec_, i32 %alloc_) #0 !dbg !5834 {
entry:
  %vec_.addr = alloca %struct.VEC_ipa_edge_args_t_gc**, align 8
  %alloc_.addr = alloca i32, align 4
  %extend = alloca i32, align 4
  store %struct.VEC_ipa_edge_args_t_gc** %vec_, %struct.VEC_ipa_edge_args_t_gc*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_ipa_edge_args_t_gc*** %vec_.addr, metadata !5837, metadata !DIExpression()), !dbg !5838
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !5839, metadata !DIExpression()), !dbg !5838
  call void @llvm.dbg.declare(metadata i32* %extend, metadata !5840, metadata !DIExpression()), !dbg !5838
  %0 = load %struct.VEC_ipa_edge_args_t_gc**, %struct.VEC_ipa_edge_args_t_gc*** %vec_.addr, align 8, !dbg !5838
  %1 = load %struct.VEC_ipa_edge_args_t_gc*, %struct.VEC_ipa_edge_args_t_gc** %0, align 8, !dbg !5838
  %tobool = icmp ne %struct.VEC_ipa_edge_args_t_gc* %1, null, !dbg !5838
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5838

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_ipa_edge_args_t_gc**, %struct.VEC_ipa_edge_args_t_gc*** %vec_.addr, align 8, !dbg !5838
  %3 = load %struct.VEC_ipa_edge_args_t_gc*, %struct.VEC_ipa_edge_args_t_gc** %2, align 8, !dbg !5838
  %base = getelementptr inbounds %struct.VEC_ipa_edge_args_t_gc, %struct.VEC_ipa_edge_args_t_gc* %3, i32 0, i32 0, !dbg !5838
  br label %cond.end, !dbg !5838

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5838

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_ipa_edge_args_t_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5838
  %4 = load i32, i32* %alloc_.addr, align 4, !dbg !5838
  %call = call i32 @VEC_ipa_edge_args_t_base_space(%struct.VEC_ipa_edge_args_t_base* %cond, i32 %4), !dbg !5838
  %tobool1 = icmp ne i32 %call, 0, !dbg !5838
  %lnot = xor i1 %tobool1, true, !dbg !5838
  %lnot.ext = zext i1 %lnot to i32, !dbg !5838
  store i32 %lnot.ext, i32* %extend, align 4, !dbg !5838
  %5 = load i32, i32* %extend, align 4, !dbg !5841
  %tobool2 = icmp ne i32 %5, 0, !dbg !5841
  br i1 %tobool2, label %if.then, label %if.end, !dbg !5838

if.then:                                          ; preds = %cond.end
  %6 = load %struct.VEC_ipa_edge_args_t_gc**, %struct.VEC_ipa_edge_args_t_gc*** %vec_.addr, align 8, !dbg !5841
  %7 = load %struct.VEC_ipa_edge_args_t_gc*, %struct.VEC_ipa_edge_args_t_gc** %6, align 8, !dbg !5841
  %8 = bitcast %struct.VEC_ipa_edge_args_t_gc* %7 to i8*, !dbg !5841
  %9 = load i32, i32* %alloc_.addr, align 4, !dbg !5841
  %call3 = call i8* @vec_gc_o_reserve_exact(i8* %8, i32 %9, i64 8, i64 16), !dbg !5841
  %10 = bitcast i8* %call3 to %struct.VEC_ipa_edge_args_t_gc*, !dbg !5841
  %11 = load %struct.VEC_ipa_edge_args_t_gc**, %struct.VEC_ipa_edge_args_t_gc*** %vec_.addr, align 8, !dbg !5841
  store %struct.VEC_ipa_edge_args_t_gc* %10, %struct.VEC_ipa_edge_args_t_gc** %11, align 8, !dbg !5841
  br label %if.end, !dbg !5841

if.end:                                           ; preds = %if.then, %cond.end
  %12 = load i32, i32* %extend, align 4, !dbg !5838
  ret i32 %12, !dbg !5838
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_ipa_edge_args_t_base_space(%struct.VEC_ipa_edge_args_t_base* %vec_, i32 %alloc_) #0 !dbg !5843 {
entry:
  %vec_.addr = alloca %struct.VEC_ipa_edge_args_t_base*, align 8
  %alloc_.addr = alloca i32, align 4
  store %struct.VEC_ipa_edge_args_t_base* %vec_, %struct.VEC_ipa_edge_args_t_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_ipa_edge_args_t_base** %vec_.addr, metadata !5846, metadata !DIExpression()), !dbg !5847
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !5848, metadata !DIExpression()), !dbg !5847
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !5847
  %cmp = icmp sge i32 %0, 0, !dbg !5847
  %conv = zext i1 %cmp to i32, !dbg !5847
  %1 = load %struct.VEC_ipa_edge_args_t_base*, %struct.VEC_ipa_edge_args_t_base** %vec_.addr, align 8, !dbg !5847
  %tobool = icmp ne %struct.VEC_ipa_edge_args_t_base* %1, null, !dbg !5847
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5847

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_ipa_edge_args_t_base*, %struct.VEC_ipa_edge_args_t_base** %vec_.addr, align 8, !dbg !5847
  %alloc = getelementptr inbounds %struct.VEC_ipa_edge_args_t_base, %struct.VEC_ipa_edge_args_t_base* %2, i32 0, i32 1, !dbg !5847
  %3 = load i32, i32* %alloc, align 4, !dbg !5847
  %4 = load %struct.VEC_ipa_edge_args_t_base*, %struct.VEC_ipa_edge_args_t_base** %vec_.addr, align 8, !dbg !5847
  %num = getelementptr inbounds %struct.VEC_ipa_edge_args_t_base, %struct.VEC_ipa_edge_args_t_base* %4, i32 0, i32 0, !dbg !5847
  %5 = load i32, i32* %num, align 8, !dbg !5847
  %sub = sub i32 %3, %5, !dbg !5847
  %6 = load i32, i32* %alloc_.addr, align 4, !dbg !5847
  %cmp1 = icmp uge i32 %sub, %6, !dbg !5847
  %conv2 = zext i1 %cmp1 to i32, !dbg !5847
  br label %cond.end, !dbg !5847

cond.false:                                       ; preds = %entry
  %7 = load i32, i32* %alloc_.addr, align 4, !dbg !5847
  %tobool3 = icmp ne i32 %7, 0, !dbg !5847
  %lnot = xor i1 %tobool3, true, !dbg !5847
  %lnot.ext = zext i1 %lnot to i32, !dbg !5847
  br label %cond.end, !dbg !5847

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv2, %cond.true ], [ %lnot.ext, %cond.false ], !dbg !5847
  ret i32 %cond, !dbg !5847
}

declare dso_local i8* @vec_gc_o_reserve_exact(i8*, i32, i64, i64) #2

declare dso_local zeroext i8 @is_gimple_ip_invariant(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @compute_complex_pass_through(%struct.ipa_node_params* %info, %struct.ipa_jump_func* %jfunc, %union.tree_node* %name) #0 !dbg !5849 {
entry:
  %info.addr = alloca %struct.ipa_node_params*, align 8
  %jfunc.addr = alloca %struct.ipa_jump_func*, align 8
  %name.addr = alloca %union.tree_node*, align 8
  %offset = alloca i64, align 8
  %size = alloca i64, align 8
  %max_size = alloca i64, align 8
  %op1 = alloca %union.tree_node*, align 8
  %op2 = alloca %union.tree_node*, align 8
  %type = alloca %union.tree_node*, align 8
  %index = alloca i32, align 4
  %stmt = alloca %union.gimple_statement_d*, align 8
  store %struct.ipa_node_params* %info, %struct.ipa_node_params** %info.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ipa_node_params** %info.addr, metadata !5852, metadata !DIExpression()), !dbg !5853
  store %struct.ipa_jump_func* %jfunc, %struct.ipa_jump_func** %jfunc.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ipa_jump_func** %jfunc.addr, metadata !5854, metadata !DIExpression()), !dbg !5855
  store %union.tree_node* %name, %union.tree_node** %name.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %name.addr, metadata !5856, metadata !DIExpression()), !dbg !5857
  call void @llvm.dbg.declare(metadata i64* %offset, metadata !5858, metadata !DIExpression()), !dbg !5859
  call void @llvm.dbg.declare(metadata i64* %size, metadata !5860, metadata !DIExpression()), !dbg !5861
  call void @llvm.dbg.declare(metadata i64* %max_size, metadata !5862, metadata !DIExpression()), !dbg !5863
  call void @llvm.dbg.declare(metadata %union.tree_node** %op1, metadata !5864, metadata !DIExpression()), !dbg !5865
  call void @llvm.dbg.declare(metadata %union.tree_node** %op2, metadata !5866, metadata !DIExpression()), !dbg !5867
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !5868, metadata !DIExpression()), !dbg !5869
  call void @llvm.dbg.declare(metadata i32* %index, metadata !5870, metadata !DIExpression()), !dbg !5871
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !5872, metadata !DIExpression()), !dbg !5873
  %0 = load %union.tree_node*, %union.tree_node** %name.addr, align 8, !dbg !5874
  %ssa_name = bitcast %union.tree_node* %0 to %struct.tree_ssa_name*, !dbg !5874
  %def_stmt = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 2, !dbg !5874
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !5874
  store %union.gimple_statement_d* %1, %union.gimple_statement_d** %stmt, align 8, !dbg !5873
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5875
  %call = call zeroext i8 @is_gimple_assign(%union.gimple_statement_d* %2), !dbg !5877
  %tobool = icmp ne i8 %call, 0, !dbg !5877
  br i1 %tobool, label %if.end, label %if.then, !dbg !5878

if.then:                                          ; preds = %entry
  br label %if.end88, !dbg !5879

if.end:                                           ; preds = %entry
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5880
  %call1 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %3), !dbg !5881
  store %union.tree_node* %call1, %union.tree_node** %op1, align 8, !dbg !5882
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5883
  %call2 = call %union.tree_node* @gimple_assign_rhs2(%union.gimple_statement_d* %4), !dbg !5884
  store %union.tree_node* %call2, %union.tree_node** %op2, align 8, !dbg !5885
  %5 = load %union.tree_node*, %union.tree_node** %op2, align 8, !dbg !5886
  %tobool3 = icmp ne %union.tree_node* %5, null, !dbg !5886
  br i1 %tobool3, label %if.then4, label %if.end34, !dbg !5888

if.then4:                                         ; preds = %if.end
  %6 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !5889
  %base = bitcast %union.tree_node* %6 to %struct.tree_base*, !dbg !5889
  %7 = bitcast %struct.tree_base* %base to i64*, !dbg !5889
  %bf.load = load i64, i64* %7, align 8, !dbg !5889
  %bf.clear = and i64 %bf.load, 65535, !dbg !5889
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !5889
  %cmp = icmp ne i32 %bf.cast, 141, !dbg !5892
  br i1 %cmp, label %if.then21, label %lor.lhs.false, !dbg !5893

lor.lhs.false:                                    ; preds = %if.then4
  %8 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !5894
  %base5 = bitcast %union.tree_node* %8 to %struct.tree_base*, !dbg !5894
  %9 = bitcast %struct.tree_base* %base5 to i64*, !dbg !5894
  %bf.load6 = load i64, i64* %9, align 8, !dbg !5894
  %bf.lshr = lshr i64 %bf.load6, 32, !dbg !5894
  %bf.clear7 = and i64 %bf.lshr, 1, !dbg !5894
  %bf.cast8 = trunc i64 %bf.clear7 to i32, !dbg !5894
  %tobool9 = icmp ne i32 %bf.cast8, 0, !dbg !5894
  br i1 %tobool9, label %lor.lhs.false10, label %if.then21, !dbg !5895

lor.lhs.false10:                                  ; preds = %lor.lhs.false
  %10 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5896
  %call11 = call i32 @gimple_expr_code(%union.gimple_statement_d* %10), !dbg !5896
  %idxprom = sext i32 %call11 to i64, !dbg !5896
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !5896
  %11 = load i32, i32* %arrayidx, align 4, !dbg !5896
  %cmp12 = icmp ne i32 %11, 5, !dbg !5897
  br i1 %cmp12, label %land.lhs.true, label %lor.lhs.false18, !dbg !5898

land.lhs.true:                                    ; preds = %lor.lhs.false10
  %12 = load %union.tree_node*, %union.tree_node** %name.addr, align 8, !dbg !5899
  %common = bitcast %union.tree_node* %12 to %struct.tree_common*, !dbg !5899
  %type13 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !5899
  %13 = load %union.tree_node*, %union.tree_node** %type13, align 8, !dbg !5899
  %14 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !5900
  %common14 = bitcast %union.tree_node* %14 to %struct.tree_common*, !dbg !5900
  %type15 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common14, i32 0, i32 2, !dbg !5900
  %15 = load %union.tree_node*, %union.tree_node** %type15, align 8, !dbg !5900
  %call16 = call zeroext i8 @useless_type_conversion_p(%union.tree_node* %13, %union.tree_node* %15), !dbg !5901
  %tobool17 = icmp ne i8 %call16, 0, !dbg !5901
  br i1 %tobool17, label %lor.lhs.false18, label %if.then21, !dbg !5902

lor.lhs.false18:                                  ; preds = %land.lhs.true, %lor.lhs.false10
  %16 = load %union.tree_node*, %union.tree_node** %op2, align 8, !dbg !5903
  %call19 = call zeroext i8 @is_gimple_ip_invariant(%union.tree_node* %16), !dbg !5904
  %tobool20 = icmp ne i8 %call19, 0, !dbg !5904
  br i1 %tobool20, label %if.end22, label %if.then21, !dbg !5905

if.then21:                                        ; preds = %lor.lhs.false18, %land.lhs.true, %lor.lhs.false, %if.then4
  br label %if.end88, !dbg !5906

if.end22:                                         ; preds = %lor.lhs.false18
  %17 = load %struct.ipa_node_params*, %struct.ipa_node_params** %info.addr, align 8, !dbg !5907
  %18 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !5908
  %ssa_name23 = bitcast %union.tree_node* %18 to %struct.tree_ssa_name*, !dbg !5908
  %var = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name23, i32 0, i32 1, !dbg !5908
  %19 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !5908
  %call24 = call i32 @ipa_get_param_decl_index(%struct.ipa_node_params* %17, %union.tree_node* %19), !dbg !5909
  store i32 %call24, i32* %index, align 4, !dbg !5910
  %20 = load i32, i32* %index, align 4, !dbg !5911
  %cmp25 = icmp sge i32 %20, 0, !dbg !5913
  br i1 %cmp25, label %if.then26, label %if.end33, !dbg !5914

if.then26:                                        ; preds = %if.end22
  %21 = load %struct.ipa_jump_func*, %struct.ipa_jump_func** %jfunc.addr, align 8, !dbg !5915
  %type27 = getelementptr inbounds %struct.ipa_jump_func, %struct.ipa_jump_func* %21, i32 0, i32 0, !dbg !5917
  store i32 3, i32* %type27, align 8, !dbg !5918
  %22 = load i32, i32* %index, align 4, !dbg !5919
  %23 = load %struct.ipa_jump_func*, %struct.ipa_jump_func** %jfunc.addr, align 8, !dbg !5920
  %value = getelementptr inbounds %struct.ipa_jump_func, %struct.ipa_jump_func* %23, i32 0, i32 1, !dbg !5921
  %pass_through = bitcast %union.jump_func_value* %value to %struct.ipa_pass_through_data*, !dbg !5922
  %formal_id = getelementptr inbounds %struct.ipa_pass_through_data, %struct.ipa_pass_through_data* %pass_through, i32 0, i32 1, !dbg !5923
  store i32 %22, i32* %formal_id, align 8, !dbg !5924
  %24 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5925
  %call28 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %24), !dbg !5926
  %25 = load %struct.ipa_jump_func*, %struct.ipa_jump_func** %jfunc.addr, align 8, !dbg !5927
  %value29 = getelementptr inbounds %struct.ipa_jump_func, %struct.ipa_jump_func* %25, i32 0, i32 1, !dbg !5928
  %pass_through30 = bitcast %union.jump_func_value* %value29 to %struct.ipa_pass_through_data*, !dbg !5929
  %operation = getelementptr inbounds %struct.ipa_pass_through_data, %struct.ipa_pass_through_data* %pass_through30, i32 0, i32 2, !dbg !5930
  store i32 %call28, i32* %operation, align 4, !dbg !5931
  %26 = load %union.tree_node*, %union.tree_node** %op2, align 8, !dbg !5932
  %27 = load %struct.ipa_jump_func*, %struct.ipa_jump_func** %jfunc.addr, align 8, !dbg !5933
  %value31 = getelementptr inbounds %struct.ipa_jump_func, %struct.ipa_jump_func* %27, i32 0, i32 1, !dbg !5934
  %pass_through32 = bitcast %union.jump_func_value* %value31 to %struct.ipa_pass_through_data*, !dbg !5935
  %operand = getelementptr inbounds %struct.ipa_pass_through_data, %struct.ipa_pass_through_data* %pass_through32, i32 0, i32 0, !dbg !5936
  store %union.tree_node* %26, %union.tree_node** %operand, align 8, !dbg !5937
  br label %if.end33, !dbg !5938

if.end33:                                         ; preds = %if.then26, %if.end22
  br label %if.end88, !dbg !5939

if.end34:                                         ; preds = %if.end
  %28 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !5940
  %base35 = bitcast %union.tree_node* %28 to %struct.tree_base*, !dbg !5940
  %29 = bitcast %struct.tree_base* %base35 to i64*, !dbg !5940
  %bf.load36 = load i64, i64* %29, align 8, !dbg !5940
  %bf.clear37 = and i64 %bf.load36, 65535, !dbg !5940
  %bf.cast38 = trunc i64 %bf.clear37 to i32, !dbg !5940
  %cmp39 = icmp ne i32 %bf.cast38, 121, !dbg !5942
  br i1 %cmp39, label %if.then40, label %if.end41, !dbg !5943

if.then40:                                        ; preds = %if.end34
  br label %if.end88, !dbg !5944

if.end41:                                         ; preds = %if.end34
  %30 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !5945
  %exp = bitcast %union.tree_node* %30 to %struct.tree_exp*, !dbg !5945
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !5945
  %arrayidx42 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !5945
  %31 = load %union.tree_node*, %union.tree_node** %arrayidx42, align 8, !dbg !5945
  store %union.tree_node* %31, %union.tree_node** %op1, align 8, !dbg !5946
  %32 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !5947
  %common43 = bitcast %union.tree_node* %32 to %struct.tree_common*, !dbg !5947
  %type44 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common43, i32 0, i32 2, !dbg !5947
  %33 = load %union.tree_node*, %union.tree_node** %type44, align 8, !dbg !5947
  store %union.tree_node* %33, %union.tree_node** %type, align 8, !dbg !5948
  %34 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !5949
  %call45 = call %union.tree_node* @get_ref_base_and_extent(%union.tree_node* %34, i64* %offset, i64* %size, i64* %max_size), !dbg !5950
  store %union.tree_node* %call45, %union.tree_node** %op1, align 8, !dbg !5951
  %35 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !5952
  %base46 = bitcast %union.tree_node* %35 to %struct.tree_base*, !dbg !5952
  %36 = bitcast %struct.tree_base* %base46 to i64*, !dbg !5952
  %bf.load47 = load i64, i64* %36, align 8, !dbg !5952
  %bf.clear48 = and i64 %bf.load47, 65535, !dbg !5952
  %bf.cast49 = trunc i64 %bf.clear48 to i32, !dbg !5952
  %cmp50 = icmp ne i32 %bf.cast49, 47, !dbg !5954
  br i1 %cmp50, label %if.then55, label %lor.lhs.false51, !dbg !5955

lor.lhs.false51:                                  ; preds = %if.end41
  %37 = load i64, i64* %max_size, align 8, !dbg !5956
  %cmp52 = icmp eq i64 %37, -1, !dbg !5957
  br i1 %cmp52, label %if.then55, label %lor.lhs.false53, !dbg !5958

lor.lhs.false53:                                  ; preds = %lor.lhs.false51
  %38 = load i64, i64* %max_size, align 8, !dbg !5959
  %39 = load i64, i64* %size, align 8, !dbg !5960
  %cmp54 = icmp ne i64 %38, %39, !dbg !5961
  br i1 %cmp54, label %if.then55, label %if.end56, !dbg !5962

if.then55:                                        ; preds = %lor.lhs.false53, %lor.lhs.false51, %if.end41
  br label %if.end88, !dbg !5963

if.end56:                                         ; preds = %lor.lhs.false53
  %40 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !5964
  %exp57 = bitcast %union.tree_node* %40 to %struct.tree_exp*, !dbg !5964
  %operands58 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp57, i32 0, i32 3, !dbg !5964
  %arrayidx59 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands58, i64 0, i64 0, !dbg !5964
  %41 = load %union.tree_node*, %union.tree_node** %arrayidx59, align 8, !dbg !5964
  store %union.tree_node* %41, %union.tree_node** %op1, align 8, !dbg !5965
  %42 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !5966
  %base60 = bitcast %union.tree_node* %42 to %struct.tree_base*, !dbg !5966
  %43 = bitcast %struct.tree_base* %base60 to i64*, !dbg !5966
  %bf.load61 = load i64, i64* %43, align 8, !dbg !5966
  %bf.clear62 = and i64 %bf.load61, 65535, !dbg !5966
  %bf.cast63 = trunc i64 %bf.clear62 to i32, !dbg !5966
  %cmp64 = icmp ne i32 %bf.cast63, 141, !dbg !5968
  br i1 %cmp64, label %if.then72, label %lor.lhs.false65, !dbg !5969

lor.lhs.false65:                                  ; preds = %if.end56
  %44 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !5970
  %base66 = bitcast %union.tree_node* %44 to %struct.tree_base*, !dbg !5970
  %45 = bitcast %struct.tree_base* %base66 to i64*, !dbg !5970
  %bf.load67 = load i64, i64* %45, align 8, !dbg !5970
  %bf.lshr68 = lshr i64 %bf.load67, 32, !dbg !5970
  %bf.clear69 = and i64 %bf.lshr68, 1, !dbg !5970
  %bf.cast70 = trunc i64 %bf.clear69 to i32, !dbg !5970
  %tobool71 = icmp ne i32 %bf.cast70, 0, !dbg !5970
  br i1 %tobool71, label %if.end73, label %if.then72, !dbg !5971

if.then72:                                        ; preds = %lor.lhs.false65, %if.end56
  br label %if.end88, !dbg !5972

if.end73:                                         ; preds = %lor.lhs.false65
  %46 = load %struct.ipa_node_params*, %struct.ipa_node_params** %info.addr, align 8, !dbg !5973
  %47 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !5974
  %ssa_name74 = bitcast %union.tree_node* %47 to %struct.tree_ssa_name*, !dbg !5974
  %var75 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name74, i32 0, i32 1, !dbg !5974
  %48 = load %union.tree_node*, %union.tree_node** %var75, align 8, !dbg !5974
  %call76 = call i32 @ipa_get_param_decl_index(%struct.ipa_node_params* %46, %union.tree_node* %48), !dbg !5975
  store i32 %call76, i32* %index, align 4, !dbg !5976
  %49 = load i32, i32* %index, align 4, !dbg !5977
  %cmp77 = icmp sge i32 %49, 0, !dbg !5979
  br i1 %cmp77, label %if.then78, label %if.end88, !dbg !5980

if.then78:                                        ; preds = %if.end73
  %50 = load %struct.ipa_jump_func*, %struct.ipa_jump_func** %jfunc.addr, align 8, !dbg !5981
  %type79 = getelementptr inbounds %struct.ipa_jump_func, %struct.ipa_jump_func* %50, i32 0, i32 0, !dbg !5983
  store i32 4, i32* %type79, align 8, !dbg !5984
  %51 = load i32, i32* %index, align 4, !dbg !5985
  %52 = load %struct.ipa_jump_func*, %struct.ipa_jump_func** %jfunc.addr, align 8, !dbg !5986
  %value80 = getelementptr inbounds %struct.ipa_jump_func, %struct.ipa_jump_func* %52, i32 0, i32 1, !dbg !5987
  %ancestor = bitcast %union.jump_func_value* %value80 to %struct.ipa_ancestor_jf_data*, !dbg !5988
  %formal_id81 = getelementptr inbounds %struct.ipa_ancestor_jf_data, %struct.ipa_ancestor_jf_data* %ancestor, i32 0, i32 2, !dbg !5989
  store i32 %51, i32* %formal_id81, align 8, !dbg !5990
  %53 = load i64, i64* %offset, align 8, !dbg !5991
  %54 = load %struct.ipa_jump_func*, %struct.ipa_jump_func** %jfunc.addr, align 8, !dbg !5992
  %value82 = getelementptr inbounds %struct.ipa_jump_func, %struct.ipa_jump_func* %54, i32 0, i32 1, !dbg !5993
  %ancestor83 = bitcast %union.jump_func_value* %value82 to %struct.ipa_ancestor_jf_data*, !dbg !5994
  %offset84 = getelementptr inbounds %struct.ipa_ancestor_jf_data, %struct.ipa_ancestor_jf_data* %ancestor83, i32 0, i32 0, !dbg !5995
  store i64 %53, i64* %offset84, align 8, !dbg !5996
  %55 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5997
  %56 = load %struct.ipa_jump_func*, %struct.ipa_jump_func** %jfunc.addr, align 8, !dbg !5998
  %value85 = getelementptr inbounds %struct.ipa_jump_func, %struct.ipa_jump_func* %56, i32 0, i32 1, !dbg !5999
  %ancestor86 = bitcast %union.jump_func_value* %value85 to %struct.ipa_ancestor_jf_data*, !dbg !6000
  %type87 = getelementptr inbounds %struct.ipa_ancestor_jf_data, %struct.ipa_ancestor_jf_data* %ancestor86, i32 0, i32 1, !dbg !6001
  store %union.tree_node* %55, %union.tree_node** %type87, align 8, !dbg !6002
  br label %if.end88, !dbg !6003

if.end88:                                         ; preds = %if.then, %if.then21, %if.end33, %if.then40, %if.then55, %if.then72, %if.then78, %if.end73
  ret void, !dbg !6004
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @is_gimple_assign(%union.gimple_statement_d* %gs) #0 !dbg !6005 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6006, metadata !DIExpression()), !dbg !6007
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6008
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !6009
  %cmp = icmp eq i32 %call, 6, !dbg !6010
  %conv = zext i1 %cmp to i32, !dbg !6010
  %conv1 = trunc i32 %conv to i8, !dbg !6009
  ret i8 %conv1, !dbg !6011
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %gs) #0 !dbg !6012 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6013, metadata !DIExpression()), !dbg !6014
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6015
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 1), !dbg !6016
  ret %union.tree_node* %call, !dbg !6017
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_assign_rhs2(%union.gimple_statement_d* %gs) #0 !dbg !6018 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6019, metadata !DIExpression()), !dbg !6020
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6021
  %call = call i32 @gimple_num_ops(%union.gimple_statement_d* %0), !dbg !6023
  %cmp = icmp uge i32 %call, 3, !dbg !6024
  br i1 %cmp, label %if.then, label %if.else, !dbg !6025

if.then:                                          ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6026
  %call1 = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %1, i32 2), !dbg !6027
  store %union.tree_node* %call1, %union.tree_node** %retval, align 8, !dbg !6028
  br label %return, !dbg !6028

if.else:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !6029
  br label %return, !dbg !6029

return:                                           ; preds = %if.else, %if.then
  %2 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !6030
  ret %union.tree_node* %2, !dbg !6030
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_expr_code(%union.gimple_statement_d* %stmt) #0 !dbg !6031 {
entry:
  %retval = alloca i32, align 4
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %code = alloca i32, align 4
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !6034, metadata !DIExpression()), !dbg !6035
  call void @llvm.dbg.declare(metadata i32* %code, metadata !6036, metadata !DIExpression()), !dbg !6037
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6038
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !6039
  store i32 %call, i32* %code, align 4, !dbg !6037
  %1 = load i32, i32* %code, align 4, !dbg !6040
  %cmp = icmp eq i32 %1, 6, !dbg !6042
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !6043

lor.lhs.false:                                    ; preds = %entry
  %2 = load i32, i32* %code, align 4, !dbg !6044
  %cmp1 = icmp eq i32 %2, 1, !dbg !6045
  br i1 %cmp1, label %if.then, label %if.else, !dbg !6046

if.then:                                          ; preds = %lor.lhs.false, %entry
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6047
  %gsbase = bitcast %union.gimple_statement_d* %3 to %struct.gimple_statement_base*, !dbg !6048
  %4 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !6049
  %bf.load = load i32, i32* %4, align 8, !dbg !6049
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !6049
  store i32 %bf.lshr, i32* %retval, align 4, !dbg !6050
  br label %return, !dbg !6050

if.else:                                          ; preds = %lor.lhs.false
  %5 = load i32, i32* %code, align 4, !dbg !6051
  %cmp2 = icmp eq i32 %5, 8, !dbg !6053
  br i1 %cmp2, label %if.then3, label %if.else4, !dbg !6054

if.then3:                                         ; preds = %if.else
  store i32 59, i32* %retval, align 4, !dbg !6055
  br label %return, !dbg !6055

if.else4:                                         ; preds = %if.else
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.35, i64 0, i64 0), i32 1446, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !6056
  br label %if.end

if.end:                                           ; preds = %if.else4
  br label %if.end5

if.end5:                                          ; preds = %if.end
  store i32 0, i32* %retval, align 4, !dbg !6057
  br label %return, !dbg !6057

return:                                           ; preds = %if.end5, %if.then3, %if.then
  %6 = load i32, i32* %retval, align 4, !dbg !6058
  ret i32 %6, !dbg !6058
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %gs) #0 !dbg !6059 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %code = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6060, metadata !DIExpression()), !dbg !6061
  call void @llvm.dbg.declare(metadata i32* %code, metadata !6062, metadata !DIExpression()), !dbg !6063
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6064
  %call = call i32 @gimple_expr_code(%union.gimple_statement_d* %0), !dbg !6065
  store i32 %call, i32* %code, align 4, !dbg !6066
  %1 = load i32, i32* %code, align 4, !dbg !6067
  %call1 = call i32 @get_gimple_rhs_class(i32 %1), !dbg !6069
  %cmp = icmp eq i32 %call1, 3, !dbg !6070
  br i1 %cmp, label %if.then, label %if.end, !dbg !6071

if.then:                                          ; preds = %entry
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6072
  %call2 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %2), !dbg !6072
  %base = bitcast %union.tree_node* %call2 to %struct.tree_base*, !dbg !6072
  %3 = bitcast %struct.tree_base* %base to i64*, !dbg !6072
  %bf.load = load i64, i64* %3, align 8, !dbg !6072
  %bf.clear = and i64 %bf.load, 65535, !dbg !6072
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !6072
  store i32 %bf.cast, i32* %code, align 4, !dbg !6073
  br label %if.end, !dbg !6074

if.end:                                           ; preds = %if.then, %entry
  %4 = load i32, i32* %code, align 4, !dbg !6075
  ret i32 %4, !dbg !6076
}

declare dso_local %union.tree_node* @get_ref_base_and_extent(%union.tree_node*, i64*, i64*, i64*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_op(%union.gimple_statement_d* %gs, i32 %i) #0 !dbg !6077 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %i.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6078, metadata !DIExpression()), !dbg !6079
  store i32 %i, i32* %i.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %i.addr, metadata !6080, metadata !DIExpression()), !dbg !6081
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6082
  %call = call zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %0), !dbg !6084
  %tobool = icmp ne i8 %call, 0, !dbg !6084
  br i1 %tobool, label %if.then, label %if.else, !dbg !6085

if.then:                                          ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6086
  %call1 = call %union.tree_node** @gimple_ops(%union.gimple_statement_d* %1), !dbg !6088
  %2 = load i32, i32* %i.addr, align 4, !dbg !6089
  %idxprom = zext i32 %2 to i64, !dbg !6088
  %arrayidx = getelementptr inbounds %union.tree_node*, %union.tree_node** %call1, i64 %idxprom, !dbg !6088
  %3 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !6088
  store %union.tree_node* %3, %union.tree_node** %retval, align 8, !dbg !6090
  br label %return, !dbg !6090

if.else:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !6091
  br label %return, !dbg !6091

return:                                           ; preds = %if.else, %if.then
  %4 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !6092
  ret %union.tree_node* %4, !dbg !6092
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %g) #0 !dbg !6093 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !6094, metadata !DIExpression()), !dbg !6095
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !6096
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !6097
  %cmp = icmp uge i32 %call, 1, !dbg !6098
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !6099

land.rhs:                                         ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !6100
  %call1 = call i32 @gimple_code(%union.gimple_statement_d* %1), !dbg !6101
  %cmp2 = icmp ule i32 %call1, 9, !dbg !6102
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %2 = phi i1 [ false, %entry ], [ %cmp2, %land.rhs ], !dbg !6103
  %land.ext = zext i1 %2 to i32, !dbg !6099
  %conv = trunc i32 %land.ext to i8, !dbg !6097
  ret i8 %conv, !dbg !6104
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @gimple_ops(%union.gimple_statement_d* %gs) #0 !dbg !6105 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %off = alloca i64, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6108, metadata !DIExpression()), !dbg !6109
  call void @llvm.dbg.declare(metadata i64* %off, metadata !6110, metadata !DIExpression()), !dbg !6111
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6112
  %call = call i32 @gimple_statement_structure(%union.gimple_statement_d* %0), !dbg !6113
  %idxprom = zext i32 %call to i64, !dbg !6114
  %arrayidx = getelementptr inbounds [0 x i64], [0 x i64]* @gimple_ops_offset_, i64 0, i64 %idxprom, !dbg !6114
  %1 = load i64, i64* %arrayidx, align 8, !dbg !6114
  store i64 %1, i64* %off, align 8, !dbg !6115
  %2 = load i64, i64* %off, align 8, !dbg !6116
  %cmp = icmp ne i64 %2, 0, !dbg !6116
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !6116

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.35, i64 0, i64 0), i32 1622, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !6116
  br label %cond.end, !dbg !6116

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6116

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6116
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6117
  %4 = bitcast %union.gimple_statement_d* %3 to i8*, !dbg !6118
  %5 = load i64, i64* %off, align 8, !dbg !6119
  %add.ptr = getelementptr inbounds i8, i8* %4, i64 %5, !dbg !6120
  %6 = bitcast i8* %add.ptr to %union.tree_node**, !dbg !6121
  ret %union.tree_node** %6, !dbg !6122
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_statement_structure(%union.gimple_statement_d* %gs) #0 !dbg !6123 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6126, metadata !DIExpression()), !dbg !6127
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6128
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !6129
  %call1 = call i32 @gss_for_code(i32 %call), !dbg !6130
  ret i32 %call1, !dbg !6131
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gss_for_code(i32 %code) #0 !dbg !6132 {
entry:
  %code.addr = alloca i32, align 4
  store i32 %code, i32* %code.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %code.addr, metadata !6135, metadata !DIExpression()), !dbg !6136
  %0 = load i32, i32* %code.addr, align 4, !dbg !6137
  %idxprom = zext i32 %0 to i64, !dbg !6138
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @gss_for_code_, i64 0, i64 %idxprom, !dbg !6138
  %1 = load i32, i32* %arrayidx, align 4, !dbg !6138
  ret i32 %1, !dbg !6139
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @get_gimple_rhs_class(i32 %code) #0 !dbg !6140 {
entry:
  %code.addr = alloca i32, align 4
  store i32 %code, i32* %code.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %code.addr, metadata !6143, metadata !DIExpression()), !dbg !6144
  %0 = load i32, i32* %code.addr, align 4, !dbg !6145
  %idxprom = sext i32 %0 to i64, !dbg !6146
  %arrayidx = getelementptr inbounds [0 x i8], [0 x i8]* @gimple_rhs_class_table, i64 0, i64 %idxprom, !dbg !6146
  %1 = load i8, i8* %arrayidx, align 1, !dbg !6146
  %conv = zext i8 %1 to i32, !dbg !6147
  ret i32 %conv, !dbg !6148
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @type_like_member_ptr_p(%union.tree_node* %type, %union.tree_node** %method_ptr, %union.tree_node** %delta) #0 !dbg !6149 {
entry:
  %retval = alloca i8, align 1
  %type.addr = alloca %union.tree_node*, align 8
  %method_ptr.addr = alloca %union.tree_node**, align 8
  %delta.addr = alloca %union.tree_node**, align 8
  %fld = alloca %union.tree_node*, align 8
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %type.addr, metadata !6152, metadata !DIExpression()), !dbg !6153
  store %union.tree_node** %method_ptr, %union.tree_node*** %method_ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %method_ptr.addr, metadata !6154, metadata !DIExpression()), !dbg !6155
  store %union.tree_node** %delta, %union.tree_node*** %delta.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %delta.addr, metadata !6156, metadata !DIExpression()), !dbg !6157
  call void @llvm.dbg.declare(metadata %union.tree_node** %fld, metadata !6158, metadata !DIExpression()), !dbg !6159
  %0 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !6160
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !6160
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !6160
  %bf.load = load i64, i64* %1, align 8, !dbg !6160
  %bf.clear = and i64 %bf.load, 65535, !dbg !6160
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !6160
  %cmp = icmp ne i32 %bf.cast, 16, !dbg !6162
  br i1 %cmp, label %if.then, label %if.end, !dbg !6163

if.then:                                          ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !6164
  br label %return, !dbg !6164

if.end:                                           ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !6165
  %type1 = bitcast %union.tree_node* %2 to %struct.tree_type*, !dbg !6165
  %values = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1, i32 0, i32 1, !dbg !6165
  %3 = load %union.tree_node*, %union.tree_node** %values, align 8, !dbg !6165
  store %union.tree_node* %3, %union.tree_node** %fld, align 8, !dbg !6166
  %4 = load %union.tree_node*, %union.tree_node** %fld, align 8, !dbg !6167
  %tobool = icmp ne %union.tree_node* %4, null, !dbg !6167
  br i1 %tobool, label %lor.lhs.false, label %if.then26, !dbg !6169

lor.lhs.false:                                    ; preds = %if.end
  %5 = load %union.tree_node*, %union.tree_node** %fld, align 8, !dbg !6170
  %common = bitcast %union.tree_node* %5 to %struct.tree_common*, !dbg !6170
  %type2 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !6170
  %6 = load %union.tree_node*, %union.tree_node** %type2, align 8, !dbg !6170
  %base3 = bitcast %union.tree_node* %6 to %struct.tree_base*, !dbg !6170
  %7 = bitcast %struct.tree_base* %base3 to i64*, !dbg !6170
  %bf.load4 = load i64, i64* %7, align 8, !dbg !6170
  %bf.clear5 = and i64 %bf.load4, 65535, !dbg !6170
  %bf.cast6 = trunc i64 %bf.clear5 to i32, !dbg !6170
  %cmp7 = icmp eq i32 %bf.cast6, 10, !dbg !6170
  br i1 %cmp7, label %lor.lhs.false16, label %lor.lhs.false8, !dbg !6170

lor.lhs.false8:                                   ; preds = %lor.lhs.false
  %8 = load %union.tree_node*, %union.tree_node** %fld, align 8, !dbg !6170
  %common9 = bitcast %union.tree_node* %8 to %struct.tree_common*, !dbg !6170
  %type10 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common9, i32 0, i32 2, !dbg !6170
  %9 = load %union.tree_node*, %union.tree_node** %type10, align 8, !dbg !6170
  %base11 = bitcast %union.tree_node* %9 to %struct.tree_base*, !dbg !6170
  %10 = bitcast %struct.tree_base* %base11 to i64*, !dbg !6170
  %bf.load12 = load i64, i64* %10, align 8, !dbg !6170
  %bf.clear13 = and i64 %bf.load12, 65535, !dbg !6170
  %bf.cast14 = trunc i64 %bf.clear13 to i32, !dbg !6170
  %cmp15 = icmp eq i32 %bf.cast14, 12, !dbg !6170
  br i1 %cmp15, label %lor.lhs.false16, label %if.then26, !dbg !6171

lor.lhs.false16:                                  ; preds = %lor.lhs.false8, %lor.lhs.false
  %11 = load %union.tree_node*, %union.tree_node** %fld, align 8, !dbg !6172
  %common17 = bitcast %union.tree_node* %11 to %struct.tree_common*, !dbg !6172
  %type18 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common17, i32 0, i32 2, !dbg !6172
  %12 = load %union.tree_node*, %union.tree_node** %type18, align 8, !dbg !6172
  %common19 = bitcast %union.tree_node* %12 to %struct.tree_common*, !dbg !6172
  %type20 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common19, i32 0, i32 2, !dbg !6172
  %13 = load %union.tree_node*, %union.tree_node** %type20, align 8, !dbg !6172
  %base21 = bitcast %union.tree_node* %13 to %struct.tree_base*, !dbg !6172
  %14 = bitcast %struct.tree_base* %base21 to i64*, !dbg !6172
  %bf.load22 = load i64, i64* %14, align 8, !dbg !6172
  %bf.clear23 = and i64 %bf.load22, 65535, !dbg !6172
  %bf.cast24 = trunc i64 %bf.clear23 to i32, !dbg !6172
  %cmp25 = icmp ne i32 %bf.cast24, 21, !dbg !6173
  br i1 %cmp25, label %if.then26, label %if.end27, !dbg !6174

if.then26:                                        ; preds = %lor.lhs.false16, %lor.lhs.false8, %if.end
  store i8 0, i8* %retval, align 1, !dbg !6175
  br label %return, !dbg !6175

if.end27:                                         ; preds = %lor.lhs.false16
  %15 = load %union.tree_node**, %union.tree_node*** %method_ptr.addr, align 8, !dbg !6176
  %tobool28 = icmp ne %union.tree_node** %15, null, !dbg !6176
  br i1 %tobool28, label %if.then29, label %if.end30, !dbg !6178

if.then29:                                        ; preds = %if.end27
  %16 = load %union.tree_node*, %union.tree_node** %fld, align 8, !dbg !6179
  %17 = load %union.tree_node**, %union.tree_node*** %method_ptr.addr, align 8, !dbg !6180
  store %union.tree_node* %16, %union.tree_node** %17, align 8, !dbg !6181
  br label %if.end30, !dbg !6182

if.end30:                                         ; preds = %if.then29, %if.end27
  %18 = load %union.tree_node*, %union.tree_node** %fld, align 8, !dbg !6183
  %common31 = bitcast %union.tree_node* %18 to %struct.tree_common*, !dbg !6183
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common31, i32 0, i32 1, !dbg !6183
  %19 = load %union.tree_node*, %union.tree_node** %chain, align 8, !dbg !6183
  store %union.tree_node* %19, %union.tree_node** %fld, align 8, !dbg !6184
  %20 = load %union.tree_node*, %union.tree_node** %fld, align 8, !dbg !6185
  %tobool32 = icmp ne %union.tree_node* %20, null, !dbg !6185
  br i1 %tobool32, label %lor.lhs.false33, label %if.then51, !dbg !6187

lor.lhs.false33:                                  ; preds = %if.end30
  %21 = load %union.tree_node*, %union.tree_node** %fld, align 8, !dbg !6188
  %base34 = bitcast %union.tree_node* %21 to %struct.tree_base*, !dbg !6188
  %22 = bitcast %struct.tree_base* %base34 to i64*, !dbg !6188
  %bf.load35 = load i64, i64* %22, align 8, !dbg !6188
  %bf.clear36 = and i64 %bf.load35, 65535, !dbg !6188
  %bf.cast37 = trunc i64 %bf.clear36 to i32, !dbg !6188
  %cmp38 = icmp eq i32 %bf.cast37, 6, !dbg !6188
  br i1 %cmp38, label %if.then51, label %lor.lhs.false39, !dbg !6188

lor.lhs.false39:                                  ; preds = %lor.lhs.false33
  %23 = load %union.tree_node*, %union.tree_node** %fld, align 8, !dbg !6188
  %base40 = bitcast %union.tree_node* %23 to %struct.tree_base*, !dbg !6188
  %24 = bitcast %struct.tree_base* %base40 to i64*, !dbg !6188
  %bf.load41 = load i64, i64* %24, align 8, !dbg !6188
  %bf.clear42 = and i64 %bf.load41, 65535, !dbg !6188
  %bf.cast43 = trunc i64 %bf.clear42 to i32, !dbg !6188
  %cmp44 = icmp eq i32 %bf.cast43, 7, !dbg !6188
  br i1 %cmp44, label %if.then51, label %lor.lhs.false45, !dbg !6188

lor.lhs.false45:                                  ; preds = %lor.lhs.false39
  %25 = load %union.tree_node*, %union.tree_node** %fld, align 8, !dbg !6188
  %base46 = bitcast %union.tree_node* %25 to %struct.tree_base*, !dbg !6188
  %26 = bitcast %struct.tree_base* %base46 to i64*, !dbg !6188
  %bf.load47 = load i64, i64* %26, align 8, !dbg !6188
  %bf.clear48 = and i64 %bf.load47, 65535, !dbg !6188
  %bf.cast49 = trunc i64 %bf.clear48 to i32, !dbg !6188
  %cmp50 = icmp eq i32 %bf.cast49, 8, !dbg !6188
  br i1 %cmp50, label %if.then51, label %if.end52, !dbg !6189

if.then51:                                        ; preds = %lor.lhs.false45, %lor.lhs.false39, %lor.lhs.false33, %if.end30
  store i8 0, i8* %retval, align 1, !dbg !6190
  br label %return, !dbg !6190

if.end52:                                         ; preds = %lor.lhs.false45
  %27 = load %union.tree_node**, %union.tree_node*** %delta.addr, align 8, !dbg !6191
  %tobool53 = icmp ne %union.tree_node** %27, null, !dbg !6191
  br i1 %tobool53, label %if.then54, label %if.end55, !dbg !6193

if.then54:                                        ; preds = %if.end52
  %28 = load %union.tree_node*, %union.tree_node** %fld, align 8, !dbg !6194
  %29 = load %union.tree_node**, %union.tree_node*** %delta.addr, align 8, !dbg !6195
  store %union.tree_node* %28, %union.tree_node** %29, align 8, !dbg !6196
  br label %if.end55, !dbg !6197

if.end55:                                         ; preds = %if.then54, %if.end52
  %30 = load %union.tree_node*, %union.tree_node** %fld, align 8, !dbg !6198
  %common56 = bitcast %union.tree_node* %30 to %struct.tree_common*, !dbg !6198
  %chain57 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common56, i32 0, i32 1, !dbg !6198
  %31 = load %union.tree_node*, %union.tree_node** %chain57, align 8, !dbg !6198
  %tobool58 = icmp ne %union.tree_node* %31, null, !dbg !6198
  br i1 %tobool58, label %if.then59, label %if.end60, !dbg !6200

if.then59:                                        ; preds = %if.end55
  store i8 0, i8* %retval, align 1, !dbg !6201
  br label %return, !dbg !6201

if.end60:                                         ; preds = %if.end55
  store i8 1, i8* %retval, align 1, !dbg !6202
  br label %return, !dbg !6202

return:                                           ; preds = %if.end60, %if.then59, %if.then51, %if.then26, %if.then
  %32 = load i8, i8* %retval, align 1, !dbg !6203
  ret i8 %32, !dbg !6203
}

; Function Attrs: noinline nounwind uwtable
define internal void @determine_cst_member_ptr(%union.gimple_statement_d* %call, %union.tree_node* %arg, %union.tree_node* %method_field, %union.tree_node* %delta_field, %struct.ipa_jump_func* %jfunc) #0 !dbg !6204 {
entry:
  %call.addr = alloca %union.gimple_statement_d*, align 8
  %arg.addr = alloca %union.tree_node*, align 8
  %method_field.addr = alloca %union.tree_node*, align 8
  %delta_field.addr = alloca %union.tree_node*, align 8
  %jfunc.addr = alloca %struct.ipa_jump_func*, align 8
  %gsi = alloca %struct.gimple_stmt_iterator, align 8
  %method = alloca %union.tree_node*, align 8
  %delta = alloca %union.tree_node*, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  %lhs = alloca %union.tree_node*, align 8
  %rhs = alloca %union.tree_node*, align 8
  %fld = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %call, %union.gimple_statement_d** %call.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %call.addr, metadata !6207, metadata !DIExpression()), !dbg !6208
  store %union.tree_node* %arg, %union.tree_node** %arg.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %arg.addr, metadata !6209, metadata !DIExpression()), !dbg !6210
  store %union.tree_node* %method_field, %union.tree_node** %method_field.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %method_field.addr, metadata !6211, metadata !DIExpression()), !dbg !6212
  store %union.tree_node* %delta_field, %union.tree_node** %delta_field.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %delta_field.addr, metadata !6213, metadata !DIExpression()), !dbg !6214
  store %struct.ipa_jump_func* %jfunc, %struct.ipa_jump_func** %jfunc.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ipa_jump_func** %jfunc.addr, metadata !6215, metadata !DIExpression()), !dbg !6216
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %gsi, metadata !6217, metadata !DIExpression()), !dbg !6218
  call void @llvm.dbg.declare(metadata %union.tree_node** %method, metadata !6219, metadata !DIExpression()), !dbg !6220
  store %union.tree_node* null, %union.tree_node** %method, align 8, !dbg !6220
  call void @llvm.dbg.declare(metadata %union.tree_node** %delta, metadata !6221, metadata !DIExpression()), !dbg !6222
  store %union.tree_node* null, %union.tree_node** %delta, align 8, !dbg !6222
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %call.addr, align 8, !dbg !6223
  call void @gsi_for_stmt(%struct.gimple_stmt_iterator* sret %tmp, %union.gimple_statement_d* %0), !dbg !6224
  %1 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !6224
  %2 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !6224
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %1, i8* align 8 %2, i64 24, i1 false), !dbg !6224
  call void @gsi_prev(%struct.gimple_stmt_iterator* %gsi), !dbg !6225
  br label %for.cond, !dbg !6226

for.cond:                                         ; preds = %for.inc, %entry
  %call1 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !6227
  %tobool = icmp ne i8 %call1, 0, !dbg !6230
  %lnot = xor i1 %tobool, true, !dbg !6230
  br i1 %lnot, label %for.body, label %for.end, !dbg !6231

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !6232, metadata !DIExpression()), !dbg !6234
  %call2 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !6235
  store %union.gimple_statement_d* %call2, %union.gimple_statement_d** %stmt, align 8, !dbg !6234
  call void @llvm.dbg.declare(metadata %union.tree_node** %lhs, metadata !6236, metadata !DIExpression()), !dbg !6237
  call void @llvm.dbg.declare(metadata %union.tree_node** %rhs, metadata !6238, metadata !DIExpression()), !dbg !6239
  call void @llvm.dbg.declare(metadata %union.tree_node** %fld, metadata !6240, metadata !DIExpression()), !dbg !6241
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6242
  %call3 = call zeroext i8 @gimple_assign_single_p(%union.gimple_statement_d* %3), !dbg !6244
  %tobool4 = icmp ne i8 %call3, 0, !dbg !6244
  br i1 %tobool4, label %if.end, label %if.then, !dbg !6245

if.then:                                          ; preds = %for.body
  br label %return, !dbg !6246

if.end:                                           ; preds = %for.body
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6247
  %call5 = call %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %4), !dbg !6248
  store %union.tree_node* %call5, %union.tree_node** %lhs, align 8, !dbg !6249
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6250
  %call6 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %5), !dbg !6251
  store %union.tree_node* %call6, %union.tree_node** %rhs, align 8, !dbg !6252
  %6 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !6253
  %base = bitcast %union.tree_node* %6 to %struct.tree_base*, !dbg !6253
  %7 = bitcast %struct.tree_base* %base to i64*, !dbg !6253
  %bf.load = load i64, i64* %7, align 8, !dbg !6253
  %bf.clear = and i64 %bf.load, 65535, !dbg !6253
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !6253
  %cmp = icmp ne i32 %bf.cast, 41, !dbg !6255
  br i1 %cmp, label %if.then8, label %lor.lhs.false, !dbg !6256

lor.lhs.false:                                    ; preds = %if.end
  %8 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !6257
  %exp = bitcast %union.tree_node* %8 to %struct.tree_exp*, !dbg !6257
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !6257
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !6257
  %9 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !6257
  %10 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !6258
  %cmp7 = icmp ne %union.tree_node* %9, %10, !dbg !6259
  br i1 %cmp7, label %if.then8, label %if.end9, !dbg !6260

if.then8:                                         ; preds = %lor.lhs.false, %if.end
  br label %for.inc, !dbg !6261

if.end9:                                          ; preds = %lor.lhs.false
  %11 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !6262
  %exp10 = bitcast %union.tree_node* %11 to %struct.tree_exp*, !dbg !6262
  %operands11 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp10, i32 0, i32 3, !dbg !6262
  %arrayidx12 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands11, i64 0, i64 1, !dbg !6262
  %12 = load %union.tree_node*, %union.tree_node** %arrayidx12, align 8, !dbg !6262
  store %union.tree_node* %12, %union.tree_node** %fld, align 8, !dbg !6263
  %13 = load %union.tree_node*, %union.tree_node** %method, align 8, !dbg !6264
  %tobool13 = icmp ne %union.tree_node* %13, null, !dbg !6264
  br i1 %tobool13, label %if.end48, label %land.lhs.true, !dbg !6266

land.lhs.true:                                    ; preds = %if.end9
  %14 = load %union.tree_node*, %union.tree_node** %fld, align 8, !dbg !6267
  %15 = load %union.tree_node*, %union.tree_node** %method_field.addr, align 8, !dbg !6268
  %cmp14 = icmp eq %union.tree_node* %14, %15, !dbg !6269
  br i1 %cmp14, label %if.then15, label %if.end48, !dbg !6270

if.then15:                                        ; preds = %land.lhs.true
  %16 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !6271
  %call16 = call %union.tree_node* @get_ssa_def_if_simple_copy(%union.tree_node* %16), !dbg !6273
  store %union.tree_node* %call16, %union.tree_node** %rhs, align 8, !dbg !6274
  %17 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !6275
  %base17 = bitcast %union.tree_node* %17 to %struct.tree_base*, !dbg !6275
  %18 = bitcast %struct.tree_base* %base17 to i64*, !dbg !6275
  %bf.load18 = load i64, i64* %18, align 8, !dbg !6275
  %bf.clear19 = and i64 %bf.load18, 65535, !dbg !6275
  %bf.cast20 = trunc i64 %bf.clear19 to i32, !dbg !6275
  %cmp21 = icmp eq i32 %bf.cast20, 121, !dbg !6277
  br i1 %cmp21, label %land.lhs.true22, label %if.else, !dbg !6278

land.lhs.true22:                                  ; preds = %if.then15
  %19 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !6279
  %exp23 = bitcast %union.tree_node* %19 to %struct.tree_exp*, !dbg !6279
  %operands24 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp23, i32 0, i32 3, !dbg !6279
  %arrayidx25 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands24, i64 0, i64 0, !dbg !6279
  %20 = load %union.tree_node*, %union.tree_node** %arrayidx25, align 8, !dbg !6279
  %base26 = bitcast %union.tree_node* %20 to %struct.tree_base*, !dbg !6279
  %21 = bitcast %struct.tree_base* %base26 to i64*, !dbg !6279
  %bf.load27 = load i64, i64* %21, align 8, !dbg !6279
  %bf.clear28 = and i64 %bf.load27, 65535, !dbg !6279
  %bf.cast29 = trunc i64 %bf.clear28 to i32, !dbg !6279
  %cmp30 = icmp eq i32 %bf.cast29, 29, !dbg !6280
  br i1 %cmp30, label %land.lhs.true31, label %if.else, !dbg !6281

land.lhs.true31:                                  ; preds = %land.lhs.true22
  %22 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !6282
  %exp32 = bitcast %union.tree_node* %22 to %struct.tree_exp*, !dbg !6282
  %operands33 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp32, i32 0, i32 3, !dbg !6282
  %arrayidx34 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands33, i64 0, i64 0, !dbg !6282
  %23 = load %union.tree_node*, %union.tree_node** %arrayidx34, align 8, !dbg !6282
  %common = bitcast %union.tree_node* %23 to %struct.tree_common*, !dbg !6282
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !6282
  %24 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6282
  %base35 = bitcast %union.tree_node* %24 to %struct.tree_base*, !dbg !6282
  %25 = bitcast %struct.tree_base* %base35 to i64*, !dbg !6282
  %bf.load36 = load i64, i64* %25, align 8, !dbg !6282
  %bf.clear37 = and i64 %bf.load36, 65535, !dbg !6282
  %bf.cast38 = trunc i64 %bf.clear37 to i32, !dbg !6282
  %cmp39 = icmp eq i32 %bf.cast38, 21, !dbg !6283
  br i1 %cmp39, label %if.then40, label %if.else, !dbg !6284

if.then40:                                        ; preds = %land.lhs.true31
  %26 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !6285
  %exp41 = bitcast %union.tree_node* %26 to %struct.tree_exp*, !dbg !6285
  %operands42 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp41, i32 0, i32 3, !dbg !6285
  %arrayidx43 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands42, i64 0, i64 0, !dbg !6285
  %27 = load %union.tree_node*, %union.tree_node** %arrayidx43, align 8, !dbg !6285
  store %union.tree_node* %27, %union.tree_node** %method, align 8, !dbg !6287
  %28 = load %union.tree_node*, %union.tree_node** %delta, align 8, !dbg !6288
  %tobool44 = icmp ne %union.tree_node* %28, null, !dbg !6288
  br i1 %tobool44, label %if.then45, label %if.end46, !dbg !6290

if.then45:                                        ; preds = %if.then40
  %29 = load %struct.ipa_jump_func*, %struct.ipa_jump_func** %jfunc.addr, align 8, !dbg !6291
  %30 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !6293
  %31 = load %union.tree_node*, %union.tree_node** %delta, align 8, !dbg !6294
  call void @fill_member_ptr_cst_jump_function(%struct.ipa_jump_func* %29, %union.tree_node* %30, %union.tree_node* %31), !dbg !6295
  br label %return, !dbg !6296

if.end46:                                         ; preds = %if.then40
  br label %if.end47, !dbg !6297

if.else:                                          ; preds = %land.lhs.true31, %land.lhs.true22, %if.then15
  br label %return, !dbg !6298

if.end47:                                         ; preds = %if.end46
  br label %if.end48, !dbg !6299

if.end48:                                         ; preds = %if.end47, %land.lhs.true, %if.end9
  %32 = load %union.tree_node*, %union.tree_node** %delta, align 8, !dbg !6300
  %tobool49 = icmp ne %union.tree_node* %32, null, !dbg !6300
  br i1 %tobool49, label %if.end65, label %land.lhs.true50, !dbg !6302

land.lhs.true50:                                  ; preds = %if.end48
  %33 = load %union.tree_node*, %union.tree_node** %fld, align 8, !dbg !6303
  %34 = load %union.tree_node*, %union.tree_node** %delta_field.addr, align 8, !dbg !6304
  %cmp51 = icmp eq %union.tree_node* %33, %34, !dbg !6305
  br i1 %cmp51, label %if.then52, label %if.end65, !dbg !6306

if.then52:                                        ; preds = %land.lhs.true50
  %35 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !6307
  %call53 = call %union.tree_node* @get_ssa_def_if_simple_copy(%union.tree_node* %35), !dbg !6309
  store %union.tree_node* %call53, %union.tree_node** %rhs, align 8, !dbg !6310
  %36 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !6311
  %base54 = bitcast %union.tree_node* %36 to %struct.tree_base*, !dbg !6311
  %37 = bitcast %struct.tree_base* %base54 to i64*, !dbg !6311
  %bf.load55 = load i64, i64* %37, align 8, !dbg !6311
  %bf.clear56 = and i64 %bf.load55, 65535, !dbg !6311
  %bf.cast57 = trunc i64 %bf.clear56 to i32, !dbg !6311
  %cmp58 = icmp eq i32 %bf.cast57, 23, !dbg !6313
  br i1 %cmp58, label %if.then59, label %if.else63, !dbg !6314

if.then59:                                        ; preds = %if.then52
  %38 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !6315
  store %union.tree_node* %38, %union.tree_node** %delta, align 8, !dbg !6317
  %39 = load %union.tree_node*, %union.tree_node** %method, align 8, !dbg !6318
  %tobool60 = icmp ne %union.tree_node* %39, null, !dbg !6318
  br i1 %tobool60, label %if.then61, label %if.end62, !dbg !6320

if.then61:                                        ; preds = %if.then59
  %40 = load %struct.ipa_jump_func*, %struct.ipa_jump_func** %jfunc.addr, align 8, !dbg !6321
  %41 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !6323
  %42 = load %union.tree_node*, %union.tree_node** %delta, align 8, !dbg !6324
  call void @fill_member_ptr_cst_jump_function(%struct.ipa_jump_func* %40, %union.tree_node* %41, %union.tree_node* %42), !dbg !6325
  br label %return, !dbg !6326

if.end62:                                         ; preds = %if.then59
  br label %if.end64, !dbg !6327

if.else63:                                        ; preds = %if.then52
  br label %return, !dbg !6328

if.end64:                                         ; preds = %if.end62
  br label %if.end65, !dbg !6329

if.end65:                                         ; preds = %if.end64, %land.lhs.true50, %if.end48
  br label %for.inc, !dbg !6330

for.inc:                                          ; preds = %if.end65, %if.then8
  call void @gsi_prev(%struct.gimple_stmt_iterator* %gsi), !dbg !6331
  br label %for.cond, !dbg !6332, !llvm.loop !6333

for.end:                                          ; preds = %for.cond
  br label %return, !dbg !6335

return:                                           ; preds = %for.end, %if.else63, %if.then61, %if.else, %if.then45, %if.then
  ret void, !dbg !6336
}

; Function Attrs: noinline nounwind uwtable
define internal void @gsi_prev(%struct.gimple_stmt_iterator* %i) #0 !dbg !6337 {
entry:
  %i.addr = alloca %struct.gimple_stmt_iterator*, align 8
  store %struct.gimple_stmt_iterator* %i, %struct.gimple_stmt_iterator** %i.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator** %i.addr, metadata !6338, metadata !DIExpression()), !dbg !6339
  %0 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %i.addr, align 8, !dbg !6340
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %0, i32 0, i32 0, !dbg !6341
  %1 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !6341
  %prev = getelementptr inbounds %struct.gimple_seq_node_d, %struct.gimple_seq_node_d* %1, i32 0, i32 1, !dbg !6342
  %2 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %prev, align 8, !dbg !6342
  %3 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %i.addr, align 8, !dbg !6343
  %ptr1 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %3, i32 0, i32 0, !dbg !6344
  store %struct.gimple_seq_node_d* %2, %struct.gimple_seq_node_d** %ptr1, align 8, !dbg !6345
  ret void, !dbg !6346
}

declare dso_local zeroext i8 @gimple_assign_single_p(%union.gimple_statement_d*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %gs) #0 !dbg !6347 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6348, metadata !DIExpression()), !dbg !6349
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6350
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 0), !dbg !6351
  ret %union.tree_node* %call, !dbg !6352
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @get_ssa_def_if_simple_copy(%union.tree_node* %rhs) #0 !dbg !6353 {
entry:
  %rhs.addr = alloca %union.tree_node*, align 8
  %def_stmt = alloca %union.gimple_statement_d*, align 8
  store %union.tree_node* %rhs, %union.tree_node** %rhs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %rhs.addr, metadata !6356, metadata !DIExpression()), !dbg !6357
  br label %while.cond, !dbg !6358

while.cond:                                       ; preds = %if.end, %entry
  %0 = load %union.tree_node*, %union.tree_node** %rhs.addr, align 8, !dbg !6359
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !6359
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !6359
  %bf.load = load i64, i64* %1, align 8, !dbg !6359
  %bf.clear = and i64 %bf.load, 65535, !dbg !6359
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !6359
  %cmp = icmp eq i32 %bf.cast, 141, !dbg !6360
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !6361

land.rhs:                                         ; preds = %while.cond
  %2 = load %union.tree_node*, %union.tree_node** %rhs.addr, align 8, !dbg !6362
  %base1 = bitcast %union.tree_node* %2 to %struct.tree_base*, !dbg !6362
  %3 = bitcast %struct.tree_base* %base1 to i64*, !dbg !6362
  %bf.load2 = load i64, i64* %3, align 8, !dbg !6362
  %bf.lshr = lshr i64 %bf.load2, 32, !dbg !6362
  %bf.clear3 = and i64 %bf.lshr, 1, !dbg !6362
  %bf.cast4 = trunc i64 %bf.clear3 to i32, !dbg !6362
  %tobool = icmp ne i32 %bf.cast4, 0, !dbg !6363
  %lnot = xor i1 %tobool, true, !dbg !6363
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %4 = phi i1 [ false, %while.cond ], [ %lnot, %land.rhs ], !dbg !6364
  br i1 %4, label %while.body, label %while.end, !dbg !6358

while.body:                                       ; preds = %land.end
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %def_stmt, metadata !6365, metadata !DIExpression()), !dbg !6367
  %5 = load %union.tree_node*, %union.tree_node** %rhs.addr, align 8, !dbg !6368
  %ssa_name = bitcast %union.tree_node* %5 to %struct.tree_ssa_name*, !dbg !6368
  %def_stmt5 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 2, !dbg !6368
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt5, align 8, !dbg !6368
  store %union.gimple_statement_d* %6, %union.gimple_statement_d** %def_stmt, align 8, !dbg !6367
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !6369
  %call = call zeroext i8 @gimple_assign_single_p(%union.gimple_statement_d* %7), !dbg !6371
  %tobool6 = icmp ne i8 %call, 0, !dbg !6371
  br i1 %tobool6, label %if.then, label %if.else, !dbg !6372

if.then:                                          ; preds = %while.body
  %8 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !6373
  %call7 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %8), !dbg !6374
  store %union.tree_node* %call7, %union.tree_node** %rhs.addr, align 8, !dbg !6375
  br label %if.end, !dbg !6376

if.else:                                          ; preds = %while.body
  br label %while.end, !dbg !6377

if.end:                                           ; preds = %if.then
  br label %while.cond, !dbg !6358, !llvm.loop !6378

while.end:                                        ; preds = %if.else, %land.end
  %9 = load %union.tree_node*, %union.tree_node** %rhs.addr, align 8, !dbg !6380
  ret %union.tree_node* %9, !dbg !6381
}

; Function Attrs: noinline nounwind uwtable
define internal void @fill_member_ptr_cst_jump_function(%struct.ipa_jump_func* %jfunc, %union.tree_node* %pfn, %union.tree_node* %delta) #0 !dbg !6382 {
entry:
  %jfunc.addr = alloca %struct.ipa_jump_func*, align 8
  %pfn.addr = alloca %union.tree_node*, align 8
  %delta.addr = alloca %union.tree_node*, align 8
  store %struct.ipa_jump_func* %jfunc, %struct.ipa_jump_func** %jfunc.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ipa_jump_func** %jfunc.addr, metadata !6385, metadata !DIExpression()), !dbg !6386
  store %union.tree_node* %pfn, %union.tree_node** %pfn.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %pfn.addr, metadata !6387, metadata !DIExpression()), !dbg !6388
  store %union.tree_node* %delta, %union.tree_node** %delta.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %delta.addr, metadata !6389, metadata !DIExpression()), !dbg !6390
  %0 = load %struct.ipa_jump_func*, %struct.ipa_jump_func** %jfunc.addr, align 8, !dbg !6391
  %type = getelementptr inbounds %struct.ipa_jump_func, %struct.ipa_jump_func* %0, i32 0, i32 0, !dbg !6392
  store i32 2, i32* %type, align 8, !dbg !6393
  %1 = load %union.tree_node*, %union.tree_node** %pfn.addr, align 8, !dbg !6394
  %2 = load %struct.ipa_jump_func*, %struct.ipa_jump_func** %jfunc.addr, align 8, !dbg !6395
  %value = getelementptr inbounds %struct.ipa_jump_func, %struct.ipa_jump_func* %2, i32 0, i32 1, !dbg !6396
  %member_cst = bitcast %union.jump_func_value* %value to %struct.ipa_member_ptr_cst*, !dbg !6397
  %pfn1 = getelementptr inbounds %struct.ipa_member_ptr_cst, %struct.ipa_member_ptr_cst* %member_cst, i32 0, i32 0, !dbg !6398
  store %union.tree_node* %1, %union.tree_node** %pfn1, align 8, !dbg !6399
  %3 = load %union.tree_node*, %union.tree_node** %delta.addr, align 8, !dbg !6400
  %4 = load %struct.ipa_jump_func*, %struct.ipa_jump_func** %jfunc.addr, align 8, !dbg !6401
  %value2 = getelementptr inbounds %struct.ipa_jump_func, %struct.ipa_jump_func* %4, i32 0, i32 1, !dbg !6402
  %member_cst3 = bitcast %union.jump_func_value* %value2 to %struct.ipa_member_ptr_cst*, !dbg !6403
  %delta4 = getelementptr inbounds %struct.ipa_member_ptr_cst, %struct.ipa_member_ptr_cst* %member_cst3, i32 0, i32 1, !dbg !6404
  store %union.tree_node* %3, %union.tree_node** %delta4, align 8, !dbg !6405
  ret void, !dbg !6406
}

; Function Attrs: noinline nounwind uwtable
define internal void @ipa_analyze_call_uses(%struct.ipa_node_params* %info, %union.gimple_statement_d* %call) #0 !dbg !6407 {
entry:
  %info.addr = alloca %struct.ipa_node_params*, align 8
  %call.addr = alloca %union.gimple_statement_d*, align 8
  %target = alloca %union.tree_node*, align 8
  %def = alloca %union.gimple_statement_d*, align 8
  %var = alloca %union.tree_node*, align 8
  %n1 = alloca %union.tree_node*, align 8
  %n2 = alloca %union.tree_node*, align 8
  %d1 = alloca %union.gimple_statement_d*, align 8
  %d2 = alloca %union.gimple_statement_d*, align 8
  %rec = alloca %union.tree_node*, align 8
  %rec2 = alloca %union.tree_node*, align 8
  %cond = alloca %union.tree_node*, align 8
  %branch = alloca %union.gimple_statement_d*, align 8
  %index = alloca i32, align 4
  %bb = alloca %struct.basic_block_def*, align 8
  %virt_bb = alloca %struct.basic_block_def*, align 8
  %join = alloca %struct.basic_block_def*, align 8
  store %struct.ipa_node_params* %info, %struct.ipa_node_params** %info.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ipa_node_params** %info.addr, metadata !6408, metadata !DIExpression()), !dbg !6409
  store %union.gimple_statement_d* %call, %union.gimple_statement_d** %call.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %call.addr, metadata !6410, metadata !DIExpression()), !dbg !6411
  call void @llvm.dbg.declare(metadata %union.tree_node** %target, metadata !6412, metadata !DIExpression()), !dbg !6413
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %call.addr, align 8, !dbg !6414
  %call1 = call %union.tree_node* @gimple_call_fn(%union.gimple_statement_d* %0), !dbg !6415
  store %union.tree_node* %call1, %union.tree_node** %target, align 8, !dbg !6413
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %def, metadata !6416, metadata !DIExpression()), !dbg !6417
  call void @llvm.dbg.declare(metadata %union.tree_node** %var, metadata !6418, metadata !DIExpression()), !dbg !6419
  call void @llvm.dbg.declare(metadata %union.tree_node** %n1, metadata !6420, metadata !DIExpression()), !dbg !6421
  call void @llvm.dbg.declare(metadata %union.tree_node** %n2, metadata !6422, metadata !DIExpression()), !dbg !6423
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %d1, metadata !6424, metadata !DIExpression()), !dbg !6425
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %d2, metadata !6426, metadata !DIExpression()), !dbg !6427
  call void @llvm.dbg.declare(metadata %union.tree_node** %rec, metadata !6428, metadata !DIExpression()), !dbg !6429
  call void @llvm.dbg.declare(metadata %union.tree_node** %rec2, metadata !6430, metadata !DIExpression()), !dbg !6431
  call void @llvm.dbg.declare(metadata %union.tree_node** %cond, metadata !6432, metadata !DIExpression()), !dbg !6433
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %branch, metadata !6434, metadata !DIExpression()), !dbg !6435
  call void @llvm.dbg.declare(metadata i32* %index, metadata !6436, metadata !DIExpression()), !dbg !6437
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !6438, metadata !DIExpression()), !dbg !6439
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %virt_bb, metadata !6440, metadata !DIExpression()), !dbg !6441
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %join, metadata !6442, metadata !DIExpression()), !dbg !6443
  %1 = load %union.tree_node*, %union.tree_node** %target, align 8, !dbg !6444
  %base = bitcast %union.tree_node* %1 to %struct.tree_base*, !dbg !6444
  %2 = bitcast %struct.tree_base* %base to i64*, !dbg !6444
  %bf.load = load i64, i64* %2, align 8, !dbg !6444
  %bf.clear = and i64 %bf.load, 65535, !dbg !6444
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !6444
  %cmp = icmp ne i32 %bf.cast, 141, !dbg !6446
  br i1 %cmp, label %if.then, label %if.end, !dbg !6447

if.then:                                          ; preds = %entry
  br label %return, !dbg !6448

if.end:                                           ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %target, align 8, !dbg !6449
  %ssa_name = bitcast %union.tree_node* %3 to %struct.tree_ssa_name*, !dbg !6449
  %var2 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 1, !dbg !6449
  %4 = load %union.tree_node*, %union.tree_node** %var2, align 8, !dbg !6449
  store %union.tree_node* %4, %union.tree_node** %var, align 8, !dbg !6450
  %5 = load %union.tree_node*, %union.tree_node** %target, align 8, !dbg !6451
  %base3 = bitcast %union.tree_node* %5 to %struct.tree_base*, !dbg !6451
  %6 = bitcast %struct.tree_base* %base3 to i64*, !dbg !6451
  %bf.load4 = load i64, i64* %6, align 8, !dbg !6451
  %bf.lshr = lshr i64 %bf.load4, 32, !dbg !6451
  %bf.clear5 = and i64 %bf.lshr, 1, !dbg !6451
  %bf.cast6 = trunc i64 %bf.clear5 to i32, !dbg !6451
  %tobool = icmp ne i32 %bf.cast6, 0, !dbg !6451
  br i1 %tobool, label %if.then7, label %if.end12, !dbg !6453

if.then7:                                         ; preds = %if.end
  %7 = load %struct.ipa_node_params*, %struct.ipa_node_params** %info.addr, align 8, !dbg !6454
  %8 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !6456
  %call8 = call i32 @ipa_get_param_decl_index(%struct.ipa_node_params* %7, %union.tree_node* %8), !dbg !6457
  store i32 %call8, i32* %index, align 4, !dbg !6458
  %9 = load i32, i32* %index, align 4, !dbg !6459
  %cmp9 = icmp sge i32 %9, 0, !dbg !6461
  br i1 %cmp9, label %if.then10, label %if.end11, !dbg !6462

if.then10:                                        ; preds = %if.then7
  %10 = load %struct.ipa_node_params*, %struct.ipa_node_params** %info.addr, align 8, !dbg !6463
  %11 = load i32, i32* %index, align 4, !dbg !6464
  %12 = load %union.gimple_statement_d*, %union.gimple_statement_d** %call.addr, align 8, !dbg !6465
  call void @ipa_note_param_call(%struct.ipa_node_params* %10, i32 %11, %union.gimple_statement_d* %12), !dbg !6466
  br label %if.end11, !dbg !6466

if.end11:                                         ; preds = %if.then10, %if.then7
  br label %return, !dbg !6467

if.end12:                                         ; preds = %if.end
  %13 = load %union.tree_node*, %union.tree_node** %target, align 8, !dbg !6468
  %common = bitcast %union.tree_node* %13 to %struct.tree_common*, !dbg !6468
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !6468
  %14 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6468
  %base13 = bitcast %union.tree_node* %14 to %struct.tree_base*, !dbg !6468
  %15 = bitcast %struct.tree_base* %base13 to i64*, !dbg !6468
  %bf.load14 = load i64, i64* %15, align 8, !dbg !6468
  %bf.clear15 = and i64 %bf.load14, 65535, !dbg !6468
  %bf.cast16 = trunc i64 %bf.clear15 to i32, !dbg !6468
  %cmp17 = icmp eq i32 %bf.cast16, 10, !dbg !6468
  br i1 %cmp17, label %lor.lhs.false25, label %lor.lhs.false, !dbg !6468

lor.lhs.false:                                    ; preds = %if.end12
  %16 = load %union.tree_node*, %union.tree_node** %target, align 8, !dbg !6468
  %common18 = bitcast %union.tree_node* %16 to %struct.tree_common*, !dbg !6468
  %type19 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common18, i32 0, i32 2, !dbg !6468
  %17 = load %union.tree_node*, %union.tree_node** %type19, align 8, !dbg !6468
  %base20 = bitcast %union.tree_node* %17 to %struct.tree_base*, !dbg !6468
  %18 = bitcast %struct.tree_base* %base20 to i64*, !dbg !6468
  %bf.load21 = load i64, i64* %18, align 8, !dbg !6468
  %bf.clear22 = and i64 %bf.load21, 65535, !dbg !6468
  %bf.cast23 = trunc i64 %bf.clear22 to i32, !dbg !6468
  %cmp24 = icmp eq i32 %bf.cast23, 12, !dbg !6468
  br i1 %cmp24, label %lor.lhs.false25, label %if.then35, !dbg !6470

lor.lhs.false25:                                  ; preds = %lor.lhs.false, %if.end12
  %19 = load %union.tree_node*, %union.tree_node** %target, align 8, !dbg !6471
  %common26 = bitcast %union.tree_node* %19 to %struct.tree_common*, !dbg !6471
  %type27 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common26, i32 0, i32 2, !dbg !6471
  %20 = load %union.tree_node*, %union.tree_node** %type27, align 8, !dbg !6471
  %common28 = bitcast %union.tree_node* %20 to %struct.tree_common*, !dbg !6471
  %type29 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common28, i32 0, i32 2, !dbg !6471
  %21 = load %union.tree_node*, %union.tree_node** %type29, align 8, !dbg !6471
  %base30 = bitcast %union.tree_node* %21 to %struct.tree_base*, !dbg !6471
  %22 = bitcast %struct.tree_base* %base30 to i64*, !dbg !6471
  %bf.load31 = load i64, i64* %22, align 8, !dbg !6471
  %bf.clear32 = and i64 %bf.load31, 65535, !dbg !6471
  %bf.cast33 = trunc i64 %bf.clear32 to i32, !dbg !6471
  %cmp34 = icmp ne i32 %bf.cast33, 21, !dbg !6472
  br i1 %cmp34, label %if.then35, label %if.end36, !dbg !6473

if.then35:                                        ; preds = %lor.lhs.false25, %lor.lhs.false
  br label %return, !dbg !6474

if.end36:                                         ; preds = %lor.lhs.false25
  %23 = load %union.tree_node*, %union.tree_node** %target, align 8, !dbg !6475
  %ssa_name37 = bitcast %union.tree_node* %23 to %struct.tree_ssa_name*, !dbg !6475
  %def_stmt = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name37, i32 0, i32 2, !dbg !6475
  %24 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !6475
  store %union.gimple_statement_d* %24, %union.gimple_statement_d** %def, align 8, !dbg !6476
  %25 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def, align 8, !dbg !6477
  %call38 = call i32 @gimple_code(%union.gimple_statement_d* %25), !dbg !6479
  %cmp39 = icmp ne i32 %call38, 16, !dbg !6480
  br i1 %cmp39, label %if.then40, label %if.end41, !dbg !6481

if.then40:                                        ; preds = %if.end36
  br label %return, !dbg !6482

if.end41:                                         ; preds = %if.end36
  %26 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def, align 8, !dbg !6483
  %call42 = call i32 @gimple_phi_num_args(%union.gimple_statement_d* %26), !dbg !6485
  %cmp43 = icmp ne i32 %call42, 2, !dbg !6486
  br i1 %cmp43, label %if.then44, label %if.end45, !dbg !6487

if.then44:                                        ; preds = %if.end41
  br label %return, !dbg !6488

if.end45:                                         ; preds = %if.end41
  %27 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def, align 8, !dbg !6489
  %call46 = call %struct.ssa_use_operand_d* @gimple_phi_arg_imm_use_ptr(%union.gimple_statement_d* %27, i32 0), !dbg !6489
  %call47 = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %call46), !dbg !6489
  store %union.tree_node* %call47, %union.tree_node** %n1, align 8, !dbg !6490
  %28 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def, align 8, !dbg !6491
  %call48 = call %struct.ssa_use_operand_d* @gimple_phi_arg_imm_use_ptr(%union.gimple_statement_d* %28, i32 1), !dbg !6491
  %call49 = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %call48), !dbg !6491
  store %union.tree_node* %call49, %union.tree_node** %n2, align 8, !dbg !6492
  %29 = load %union.tree_node*, %union.tree_node** %n1, align 8, !dbg !6493
  %call50 = call zeroext i8 @ipa_is_ssa_with_stmt_def(%union.tree_node* %29), !dbg !6495
  %tobool51 = icmp ne i8 %call50, 0, !dbg !6495
  br i1 %tobool51, label %lor.lhs.false52, label %if.then55, !dbg !6496

lor.lhs.false52:                                  ; preds = %if.end45
  %30 = load %union.tree_node*, %union.tree_node** %n2, align 8, !dbg !6497
  %call53 = call zeroext i8 @ipa_is_ssa_with_stmt_def(%union.tree_node* %30), !dbg !6498
  %tobool54 = icmp ne i8 %call53, 0, !dbg !6498
  br i1 %tobool54, label %if.end56, label %if.then55, !dbg !6499

if.then55:                                        ; preds = %lor.lhs.false52, %if.end45
  br label %return, !dbg !6500

if.end56:                                         ; preds = %lor.lhs.false52
  %31 = load %union.tree_node*, %union.tree_node** %n1, align 8, !dbg !6501
  %ssa_name57 = bitcast %union.tree_node* %31 to %struct.tree_ssa_name*, !dbg !6501
  %def_stmt58 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name57, i32 0, i32 2, !dbg !6501
  %32 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt58, align 8, !dbg !6501
  store %union.gimple_statement_d* %32, %union.gimple_statement_d** %d1, align 8, !dbg !6502
  %33 = load %union.tree_node*, %union.tree_node** %n2, align 8, !dbg !6503
  %ssa_name59 = bitcast %union.tree_node* %33 to %struct.tree_ssa_name*, !dbg !6503
  %def_stmt60 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name59, i32 0, i32 2, !dbg !6503
  %34 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt60, align 8, !dbg !6503
  store %union.gimple_statement_d* %34, %union.gimple_statement_d** %d2, align 8, !dbg !6504
  %35 = load %union.gimple_statement_d*, %union.gimple_statement_d** %d1, align 8, !dbg !6505
  %call61 = call %union.tree_node* @ipa_get_stmt_member_ptr_load_param(%union.gimple_statement_d* %35, i8 zeroext 0), !dbg !6507
  store %union.tree_node* %call61, %union.tree_node** %rec, align 8, !dbg !6508
  %tobool62 = icmp ne %union.tree_node* %call61, null, !dbg !6508
  br i1 %tobool62, label %if.then63, label %if.else, !dbg !6509

if.then63:                                        ; preds = %if.end56
  %36 = load %union.gimple_statement_d*, %union.gimple_statement_d** %d2, align 8, !dbg !6510
  %call64 = call %union.tree_node* @ipa_get_stmt_member_ptr_load_param(%union.gimple_statement_d* %36, i8 zeroext 0), !dbg !6513
  %tobool65 = icmp ne %union.tree_node* %call64, null, !dbg !6513
  br i1 %tobool65, label %if.then66, label %if.end67, !dbg !6514

if.then66:                                        ; preds = %if.then63
  br label %return, !dbg !6515

if.end67:                                         ; preds = %if.then63
  %37 = load %union.gimple_statement_d*, %union.gimple_statement_d** %d1, align 8, !dbg !6516
  %call68 = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %37), !dbg !6517
  store %struct.basic_block_def* %call68, %struct.basic_block_def** %bb, align 8, !dbg !6518
  %38 = load %union.gimple_statement_d*, %union.gimple_statement_d** %d2, align 8, !dbg !6519
  %call69 = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %38), !dbg !6520
  store %struct.basic_block_def* %call69, %struct.basic_block_def** %virt_bb, align 8, !dbg !6521
  br label %if.end77, !dbg !6522

if.else:                                          ; preds = %if.end56
  %39 = load %union.gimple_statement_d*, %union.gimple_statement_d** %d2, align 8, !dbg !6523
  %call70 = call %union.tree_node* @ipa_get_stmt_member_ptr_load_param(%union.gimple_statement_d* %39, i8 zeroext 0), !dbg !6525
  store %union.tree_node* %call70, %union.tree_node** %rec, align 8, !dbg !6526
  %tobool71 = icmp ne %union.tree_node* %call70, null, !dbg !6526
  br i1 %tobool71, label %if.then72, label %if.else75, !dbg !6527

if.then72:                                        ; preds = %if.else
  %40 = load %union.gimple_statement_d*, %union.gimple_statement_d** %d2, align 8, !dbg !6528
  %call73 = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %40), !dbg !6530
  store %struct.basic_block_def* %call73, %struct.basic_block_def** %bb, align 8, !dbg !6531
  %41 = load %union.gimple_statement_d*, %union.gimple_statement_d** %d1, align 8, !dbg !6532
  %call74 = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %41), !dbg !6533
  store %struct.basic_block_def* %call74, %struct.basic_block_def** %virt_bb, align 8, !dbg !6534
  br label %if.end76, !dbg !6535

if.else75:                                        ; preds = %if.else
  br label %return, !dbg !6536

if.end76:                                         ; preds = %if.then72
  br label %if.end77

if.end77:                                         ; preds = %if.end76, %if.end67
  %42 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def, align 8, !dbg !6537
  %call78 = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %42), !dbg !6538
  store %struct.basic_block_def* %call78, %struct.basic_block_def** %join, align 8, !dbg !6539
  %43 = load %struct.basic_block_def*, %struct.basic_block_def** %virt_bb, align 8, !dbg !6540
  %call79 = call zeroext i8 @single_pred_p(%struct.basic_block_def* %43), !dbg !6542
  %tobool80 = icmp ne i8 %call79, 0, !dbg !6542
  br i1 %tobool80, label %lor.lhs.false81, label %if.then90, !dbg !6543

lor.lhs.false81:                                  ; preds = %if.end77
  %44 = load %struct.basic_block_def*, %struct.basic_block_def** %virt_bb, align 8, !dbg !6544
  %call82 = call zeroext i8 @single_succ_p(%struct.basic_block_def* %44), !dbg !6545
  %tobool83 = icmp ne i8 %call82, 0, !dbg !6545
  br i1 %tobool83, label %lor.lhs.false84, label %if.then90, !dbg !6546

lor.lhs.false84:                                  ; preds = %lor.lhs.false81
  %45 = load %struct.basic_block_def*, %struct.basic_block_def** %virt_bb, align 8, !dbg !6547
  %call85 = call %struct.basic_block_def* @single_pred(%struct.basic_block_def* %45), !dbg !6548
  %46 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6549
  %cmp86 = icmp ne %struct.basic_block_def* %call85, %46, !dbg !6550
  br i1 %cmp86, label %if.then90, label %lor.lhs.false87, !dbg !6551

lor.lhs.false87:                                  ; preds = %lor.lhs.false84
  %47 = load %struct.basic_block_def*, %struct.basic_block_def** %virt_bb, align 8, !dbg !6552
  %call88 = call %struct.basic_block_def* @single_succ(%struct.basic_block_def* %47), !dbg !6553
  %48 = load %struct.basic_block_def*, %struct.basic_block_def** %join, align 8, !dbg !6554
  %cmp89 = icmp ne %struct.basic_block_def* %call88, %48, !dbg !6555
  br i1 %cmp89, label %if.then90, label %if.end91, !dbg !6556

if.then90:                                        ; preds = %lor.lhs.false87, %lor.lhs.false84, %lor.lhs.false81, %if.end77
  br label %return, !dbg !6557

if.end91:                                         ; preds = %lor.lhs.false87
  %49 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6558
  %call92 = call %union.gimple_statement_d* @last_stmt(%struct.basic_block_def* %49), !dbg !6559
  store %union.gimple_statement_d* %call92, %union.gimple_statement_d** %branch, align 8, !dbg !6560
  %50 = load %union.gimple_statement_d*, %union.gimple_statement_d** %branch, align 8, !dbg !6561
  %call93 = call i32 @gimple_code(%union.gimple_statement_d* %50), !dbg !6563
  %cmp94 = icmp ne i32 %call93, 1, !dbg !6564
  br i1 %cmp94, label %if.then95, label %if.end96, !dbg !6565

if.then95:                                        ; preds = %if.end91
  br label %return, !dbg !6566

if.end96:                                         ; preds = %if.end91
  %51 = load %union.gimple_statement_d*, %union.gimple_statement_d** %branch, align 8, !dbg !6567
  %call97 = call i32 @gimple_cond_code(%union.gimple_statement_d* %51), !dbg !6569
  %cmp98 = icmp ne i32 %call97, 102, !dbg !6570
  br i1 %cmp98, label %if.then103, label %lor.lhs.false99, !dbg !6571

lor.lhs.false99:                                  ; preds = %if.end96
  %52 = load %union.gimple_statement_d*, %union.gimple_statement_d** %branch, align 8, !dbg !6572
  %call100 = call %union.tree_node* @gimple_cond_rhs(%union.gimple_statement_d* %52), !dbg !6573
  %call101 = call i32 @integer_zerop(%union.tree_node* %call100), !dbg !6574
  %tobool102 = icmp ne i32 %call101, 0, !dbg !6574
  br i1 %tobool102, label %if.end104, label %if.then103, !dbg !6575

if.then103:                                       ; preds = %lor.lhs.false99, %if.end96
  br label %return, !dbg !6576

if.end104:                                        ; preds = %lor.lhs.false99
  %53 = load %union.gimple_statement_d*, %union.gimple_statement_d** %branch, align 8, !dbg !6577
  %call105 = call %union.tree_node* @gimple_cond_lhs(%union.gimple_statement_d* %53), !dbg !6578
  store %union.tree_node* %call105, %union.tree_node** %cond, align 8, !dbg !6579
  %54 = load %union.tree_node*, %union.tree_node** %cond, align 8, !dbg !6580
  %call106 = call zeroext i8 @ipa_is_ssa_with_stmt_def(%union.tree_node* %54), !dbg !6582
  %tobool107 = icmp ne i8 %call106, 0, !dbg !6582
  br i1 %tobool107, label %if.end109, label %if.then108, !dbg !6583

if.then108:                                       ; preds = %if.end104
  br label %return, !dbg !6584

if.end109:                                        ; preds = %if.end104
  %55 = load %union.tree_node*, %union.tree_node** %cond, align 8, !dbg !6585
  %ssa_name110 = bitcast %union.tree_node* %55 to %struct.tree_ssa_name*, !dbg !6585
  %def_stmt111 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name110, i32 0, i32 2, !dbg !6585
  %56 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt111, align 8, !dbg !6585
  store %union.gimple_statement_d* %56, %union.gimple_statement_d** %def, align 8, !dbg !6586
  %57 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def, align 8, !dbg !6587
  %call112 = call zeroext i8 @is_gimple_assign(%union.gimple_statement_d* %57), !dbg !6589
  %tobool113 = icmp ne i8 %call112, 0, !dbg !6589
  br i1 %tobool113, label %lor.lhs.false114, label %if.then121, !dbg !6590

lor.lhs.false114:                                 ; preds = %if.end109
  %58 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def, align 8, !dbg !6591
  %call115 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %58), !dbg !6592
  %cmp116 = icmp ne i32 %call115, 89, !dbg !6593
  br i1 %cmp116, label %if.then121, label %lor.lhs.false117, !dbg !6594

lor.lhs.false117:                                 ; preds = %lor.lhs.false114
  %59 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def, align 8, !dbg !6595
  %call118 = call %union.tree_node* @gimple_assign_rhs2(%union.gimple_statement_d* %59), !dbg !6596
  %call119 = call i32 @integer_onep(%union.tree_node* %call118), !dbg !6597
  %tobool120 = icmp ne i32 %call119, 0, !dbg !6597
  br i1 %tobool120, label %if.end122, label %if.then121, !dbg !6598

if.then121:                                       ; preds = %lor.lhs.false117, %lor.lhs.false114, %if.end109
  br label %return, !dbg !6599

if.end122:                                        ; preds = %lor.lhs.false117
  %60 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def, align 8, !dbg !6600
  %call123 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %60), !dbg !6601
  store %union.tree_node* %call123, %union.tree_node** %cond, align 8, !dbg !6602
  %61 = load %union.tree_node*, %union.tree_node** %cond, align 8, !dbg !6603
  %call124 = call zeroext i8 @ipa_is_ssa_with_stmt_def(%union.tree_node* %61), !dbg !6605
  %tobool125 = icmp ne i8 %call124, 0, !dbg !6605
  br i1 %tobool125, label %if.end127, label %if.then126, !dbg !6606

if.then126:                                       ; preds = %if.end122
  br label %return, !dbg !6607

if.end127:                                        ; preds = %if.end122
  %62 = load %union.tree_node*, %union.tree_node** %cond, align 8, !dbg !6608
  %ssa_name128 = bitcast %union.tree_node* %62 to %struct.tree_ssa_name*, !dbg !6608
  %def_stmt129 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name128, i32 0, i32 2, !dbg !6608
  %63 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt129, align 8, !dbg !6608
  store %union.gimple_statement_d* %63, %union.gimple_statement_d** %def, align 8, !dbg !6609
  %64 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def, align 8, !dbg !6610
  %call130 = call zeroext i8 @is_gimple_assign(%union.gimple_statement_d* %64), !dbg !6612
  %conv = zext i8 %call130 to i32, !dbg !6612
  %tobool131 = icmp ne i32 %conv, 0, !dbg !6612
  br i1 %tobool131, label %land.lhs.true, label %if.end147, !dbg !6613

land.lhs.true:                                    ; preds = %if.end127
  %65 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def, align 8, !dbg !6614
  %call132 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %65), !dbg !6614
  %cmp133 = icmp eq i32 %call132, 116, !dbg !6614
  br i1 %cmp133, label %if.then139, label %lor.lhs.false135, !dbg !6614

lor.lhs.false135:                                 ; preds = %land.lhs.true
  %66 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def, align 8, !dbg !6614
  %call136 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %66), !dbg !6614
  %cmp137 = icmp eq i32 %call136, 113, !dbg !6614
  br i1 %cmp137, label %if.then139, label %if.end147, !dbg !6615

if.then139:                                       ; preds = %lor.lhs.false135, %land.lhs.true
  %67 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def, align 8, !dbg !6616
  %call140 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %67), !dbg !6618
  store %union.tree_node* %call140, %union.tree_node** %cond, align 8, !dbg !6619
  %68 = load %union.tree_node*, %union.tree_node** %cond, align 8, !dbg !6620
  %call141 = call zeroext i8 @ipa_is_ssa_with_stmt_def(%union.tree_node* %68), !dbg !6622
  %tobool142 = icmp ne i8 %call141, 0, !dbg !6622
  br i1 %tobool142, label %if.end144, label %if.then143, !dbg !6623

if.then143:                                       ; preds = %if.then139
  br label %return, !dbg !6624

if.end144:                                        ; preds = %if.then139
  %69 = load %union.tree_node*, %union.tree_node** %cond, align 8, !dbg !6625
  %ssa_name145 = bitcast %union.tree_node* %69 to %struct.tree_ssa_name*, !dbg !6625
  %def_stmt146 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name145, i32 0, i32 2, !dbg !6625
  %70 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt146, align 8, !dbg !6625
  store %union.gimple_statement_d* %70, %union.gimple_statement_d** %def, align 8, !dbg !6626
  br label %if.end147, !dbg !6627

if.end147:                                        ; preds = %if.end144, %lor.lhs.false135, %if.end127
  %71 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def, align 8, !dbg !6628
  %call148 = call %union.tree_node* @ipa_get_stmt_member_ptr_load_param(%union.gimple_statement_d* %71, i8 zeroext 0), !dbg !6629
  store %union.tree_node* %call148, %union.tree_node** %rec2, align 8, !dbg !6630
  %72 = load %union.tree_node*, %union.tree_node** %rec, align 8, !dbg !6631
  %73 = load %union.tree_node*, %union.tree_node** %rec2, align 8, !dbg !6633
  %cmp149 = icmp ne %union.tree_node* %72, %73, !dbg !6634
  br i1 %cmp149, label %if.then151, label %if.end152, !dbg !6635

if.then151:                                       ; preds = %if.end147
  br label %return, !dbg !6636

if.end152:                                        ; preds = %if.end147
  %74 = load %struct.ipa_node_params*, %struct.ipa_node_params** %info.addr, align 8, !dbg !6637
  %75 = load %union.tree_node*, %union.tree_node** %rec, align 8, !dbg !6638
  %call153 = call i32 @ipa_get_param_decl_index(%struct.ipa_node_params* %74, %union.tree_node* %75), !dbg !6639
  store i32 %call153, i32* %index, align 4, !dbg !6640
  %76 = load i32, i32* %index, align 4, !dbg !6641
  %cmp154 = icmp sge i32 %76, 0, !dbg !6643
  br i1 %cmp154, label %land.lhs.true156, label %if.end160, !dbg !6644

land.lhs.true156:                                 ; preds = %if.end152
  %77 = load %struct.ipa_node_params*, %struct.ipa_node_params** %info.addr, align 8, !dbg !6645
  %78 = load i32, i32* %index, align 4, !dbg !6646
  %call157 = call zeroext i8 @ipa_is_param_modified(%struct.ipa_node_params* %77, i32 %78), !dbg !6647
  %tobool158 = icmp ne i8 %call157, 0, !dbg !6647
  br i1 %tobool158, label %if.end160, label %if.then159, !dbg !6648

if.then159:                                       ; preds = %land.lhs.true156
  %79 = load %struct.ipa_node_params*, %struct.ipa_node_params** %info.addr, align 8, !dbg !6649
  %80 = load i32, i32* %index, align 4, !dbg !6650
  %81 = load %union.gimple_statement_d*, %union.gimple_statement_d** %call.addr, align 8, !dbg !6651
  call void @ipa_note_param_call(%struct.ipa_node_params* %79, i32 %80, %union.gimple_statement_d* %81), !dbg !6652
  br label %if.end160, !dbg !6652

if.end160:                                        ; preds = %if.then159, %land.lhs.true156, %if.end152
  br label %return, !dbg !6653

return:                                           ; preds = %if.end160, %if.then151, %if.then143, %if.then126, %if.then121, %if.then108, %if.then103, %if.then95, %if.then90, %if.else75, %if.then66, %if.then55, %if.then44, %if.then40, %if.then35, %if.end11, %if.then
  ret void, !dbg !6654
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_call_fn(%union.gimple_statement_d* %gs) #0 !dbg !6655 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6656, metadata !DIExpression()), !dbg !6657
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6658
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 1), !dbg !6659
  ret %union.tree_node* %call, !dbg !6660
}

; Function Attrs: noinline nounwind uwtable
define internal void @ipa_note_param_call(%struct.ipa_node_params* %info, i32 %formal_id, %union.gimple_statement_d* %stmt) #0 !dbg !6661 {
entry:
  %info.addr = alloca %struct.ipa_node_params*, align 8
  %formal_id.addr = alloca i32, align 4
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %note = alloca %struct.ipa_param_call_note*, align 8
  %bb = alloca %struct.basic_block_def*, align 8
  store %struct.ipa_node_params* %info, %struct.ipa_node_params** %info.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ipa_node_params** %info.addr, metadata !6664, metadata !DIExpression()), !dbg !6665
  store i32 %formal_id, i32* %formal_id.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %formal_id.addr, metadata !6666, metadata !DIExpression()), !dbg !6667
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !6668, metadata !DIExpression()), !dbg !6669
  call void @llvm.dbg.declare(metadata %struct.ipa_param_call_note** %note, metadata !6670, metadata !DIExpression()), !dbg !6671
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !6672, metadata !DIExpression()), !dbg !6673
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6674
  %call = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %0), !dbg !6675
  store %struct.basic_block_def* %call, %struct.basic_block_def** %bb, align 8, !dbg !6673
  %call1 = call i8* @xcalloc(i64 1, i64 40), !dbg !6676
  %1 = bitcast i8* %call1 to %struct.ipa_param_call_note*, !dbg !6676
  store %struct.ipa_param_call_note* %1, %struct.ipa_param_call_note** %note, align 8, !dbg !6677
  %2 = load i32, i32* %formal_id.addr, align 4, !dbg !6678
  %3 = load %struct.ipa_param_call_note*, %struct.ipa_param_call_note** %note, align 8, !dbg !6679
  %formal_id2 = getelementptr inbounds %struct.ipa_param_call_note, %struct.ipa_param_call_note* %3, i32 0, i32 4, !dbg !6680
  store i32 %2, i32* %formal_id2, align 4, !dbg !6681
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6682
  %5 = load %struct.ipa_param_call_note*, %struct.ipa_param_call_note** %note, align 8, !dbg !6683
  %stmt3 = getelementptr inbounds %struct.ipa_param_call_note, %struct.ipa_param_call_note* %5, i32 0, i32 2, !dbg !6684
  store %union.gimple_statement_d* %4, %union.gimple_statement_d** %stmt3, align 8, !dbg !6685
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6686
  %call4 = call i32 @gimple_uid(%union.gimple_statement_d* %6), !dbg !6687
  %7 = load %struct.ipa_param_call_note*, %struct.ipa_param_call_note** %note, align 8, !dbg !6688
  %lto_stmt_uid = getelementptr inbounds %struct.ipa_param_call_note, %struct.ipa_param_call_note* %7, i32 0, i32 3, !dbg !6689
  store i32 %call4, i32* %lto_stmt_uid, align 8, !dbg !6690
  %8 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6691
  %count = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %8, i32 0, i32 8, !dbg !6692
  %9 = load i64, i64* %count, align 8, !dbg !6692
  %10 = load %struct.ipa_param_call_note*, %struct.ipa_param_call_note** %note, align 8, !dbg !6693
  %count5 = getelementptr inbounds %struct.ipa_param_call_note, %struct.ipa_param_call_note* %10, i32 0, i32 0, !dbg !6694
  store i64 %9, i64* %count5, align 8, !dbg !6695
  %11 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8, !dbg !6696
  %12 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6697
  %call6 = call i32 @compute_call_stmt_bb_frequency(%union.tree_node* %11, %struct.basic_block_def* %12), !dbg !6698
  %13 = load %struct.ipa_param_call_note*, %struct.ipa_param_call_note** %note, align 8, !dbg !6699
  %frequency = getelementptr inbounds %struct.ipa_param_call_note, %struct.ipa_param_call_note* %13, i32 0, i32 5, !dbg !6700
  store i32 %call6, i32* %frequency, align 8, !dbg !6701
  %14 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6702
  %loop_depth = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %14, i32 0, i32 10, !dbg !6703
  %15 = load i32, i32* %loop_depth, align 4, !dbg !6703
  %conv = trunc i32 %15 to i16, !dbg !6702
  %16 = load %struct.ipa_param_call_note*, %struct.ipa_param_call_note** %note, align 8, !dbg !6704
  %loop_nest = getelementptr inbounds %struct.ipa_param_call_note, %struct.ipa_param_call_note* %16, i32 0, i32 6, !dbg !6705
  store i16 %conv, i16* %loop_nest, align 4, !dbg !6706
  %17 = load %struct.ipa_node_params*, %struct.ipa_node_params** %info.addr, align 8, !dbg !6707
  %param_calls = getelementptr inbounds %struct.ipa_node_params, %struct.ipa_node_params* %17, i32 0, i32 2, !dbg !6708
  %18 = load %struct.ipa_param_call_note*, %struct.ipa_param_call_note** %param_calls, align 8, !dbg !6708
  %19 = load %struct.ipa_param_call_note*, %struct.ipa_param_call_note** %note, align 8, !dbg !6709
  %next = getelementptr inbounds %struct.ipa_param_call_note, %struct.ipa_param_call_note* %19, i32 0, i32 1, !dbg !6710
  store %struct.ipa_param_call_note* %18, %struct.ipa_param_call_note** %next, align 8, !dbg !6711
  %20 = load %struct.ipa_param_call_note*, %struct.ipa_param_call_note** %note, align 8, !dbg !6712
  %21 = load %struct.ipa_node_params*, %struct.ipa_node_params** %info.addr, align 8, !dbg !6713
  %param_calls7 = getelementptr inbounds %struct.ipa_node_params, %struct.ipa_node_params* %21, i32 0, i32 2, !dbg !6714
  store %struct.ipa_param_call_note* %20, %struct.ipa_param_call_note** %param_calls7, align 8, !dbg !6715
  ret void, !dbg !6716
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_phi_num_args(%union.gimple_statement_d* %gs) #0 !dbg !6717 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6718, metadata !DIExpression()), !dbg !6719
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6720
  %gimple_phi = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_phi*, !dbg !6721
  %nargs = getelementptr inbounds %struct.gimple_statement_phi, %struct.gimple_statement_phi* %gimple_phi, i32 0, i32 2, !dbg !6722
  %1 = load i32, i32* %nargs, align 4, !dbg !6722
  ret i32 %1, !dbg !6723
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %use) #0 !dbg !6724 {
entry:
  %use.addr = alloca %struct.ssa_use_operand_d*, align 8
  store %struct.ssa_use_operand_d* %use, %struct.ssa_use_operand_d** %use.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %use.addr, metadata !6731, metadata !DIExpression()), !dbg !6732
  %0 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use.addr, align 8, !dbg !6733
  %use1 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %0, i32 0, i32 3, !dbg !6734
  %1 = load %union.tree_node**, %union.tree_node*** %use1, align 8, !dbg !6734
  %2 = load %union.tree_node*, %union.tree_node** %1, align 8, !dbg !6735
  ret %union.tree_node* %2, !dbg !6736
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ssa_use_operand_d* @gimple_phi_arg_imm_use_ptr(%union.gimple_statement_d* %gs, i32 %i) #0 !dbg !6737 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %i.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6740, metadata !DIExpression()), !dbg !6741
  store i32 %i, i32* %i.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %i.addr, metadata !6742, metadata !DIExpression()), !dbg !6743
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6744
  %1 = load i32, i32* %i.addr, align 4, !dbg !6745
  %call = call %struct.phi_arg_d* @gimple_phi_arg(%union.gimple_statement_d* %0, i32 %1), !dbg !6746
  %imm_use = getelementptr inbounds %struct.phi_arg_d, %struct.phi_arg_d* %call, i32 0, i32 0, !dbg !6747
  ret %struct.ssa_use_operand_d* %imm_use, !dbg !6748
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @ipa_is_ssa_with_stmt_def(%union.tree_node* %t) #0 !dbg !6749 {
entry:
  %retval = alloca i8, align 1
  %t.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %t, %union.tree_node** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %t.addr, metadata !6752, metadata !DIExpression()), !dbg !6753
  %0 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !6754
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !6754
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !6754
  %bf.load = load i64, i64* %1, align 8, !dbg !6754
  %bf.clear = and i64 %bf.load, 65535, !dbg !6754
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !6754
  %cmp = icmp eq i32 %bf.cast, 141, !dbg !6756
  br i1 %cmp, label %land.lhs.true, label %if.else, !dbg !6757

land.lhs.true:                                    ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !6758
  %base1 = bitcast %union.tree_node* %2 to %struct.tree_base*, !dbg !6758
  %3 = bitcast %struct.tree_base* %base1 to i64*, !dbg !6758
  %bf.load2 = load i64, i64* %3, align 8, !dbg !6758
  %bf.lshr = lshr i64 %bf.load2, 32, !dbg !6758
  %bf.clear3 = and i64 %bf.lshr, 1, !dbg !6758
  %bf.cast4 = trunc i64 %bf.clear3 to i32, !dbg !6758
  %tobool = icmp ne i32 %bf.cast4, 0, !dbg !6758
  br i1 %tobool, label %if.else, label %if.then, !dbg !6759

if.then:                                          ; preds = %land.lhs.true
  store i8 1, i8* %retval, align 1, !dbg !6760
  br label %return, !dbg !6760

if.else:                                          ; preds = %land.lhs.true, %entry
  store i8 0, i8* %retval, align 1, !dbg !6761
  br label %return, !dbg !6761

return:                                           ; preds = %if.else, %if.then
  %4 = load i8, i8* %retval, align 1, !dbg !6762
  ret i8 %4, !dbg !6762
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @ipa_get_stmt_member_ptr_load_param(%union.gimple_statement_d* %stmt, i8 zeroext %use_delta) #0 !dbg !6763 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %use_delta.addr = alloca i8, align 1
  %rhs = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !6766, metadata !DIExpression()), !dbg !6767
  store i8 %use_delta, i8* %use_delta.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %use_delta.addr, metadata !6768, metadata !DIExpression()), !dbg !6769
  call void @llvm.dbg.declare(metadata %union.tree_node** %rhs, metadata !6770, metadata !DIExpression()), !dbg !6771
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6772
  %call = call zeroext i8 @gimple_assign_single_p(%union.gimple_statement_d* %0), !dbg !6774
  %tobool = icmp ne i8 %call, 0, !dbg !6774
  br i1 %tobool, label %if.end, label %if.then, !dbg !6775

if.then:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !6776
  br label %return, !dbg !6776

if.end:                                           ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6777
  %call1 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %1), !dbg !6778
  store %union.tree_node* %call1, %union.tree_node** %rhs, align 8, !dbg !6779
  %2 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !6780
  %3 = load i8, i8* %use_delta.addr, align 1, !dbg !6781
  %call2 = call %union.tree_node* @ipa_get_member_ptr_load_param(%union.tree_node* %2, i8 zeroext %3), !dbg !6782
  store %union.tree_node* %call2, %union.tree_node** %retval, align 8, !dbg !6783
  br label %return, !dbg !6783

return:                                           ; preds = %if.end, %if.then
  %4 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !6784
  ret %union.tree_node* %4, !dbg !6784
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %g) #0 !dbg !6785 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !6788, metadata !DIExpression()), !dbg !6789
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !6790
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !6791
  %bb = getelementptr inbounds %struct.gimple_statement_base, %struct.gimple_statement_base* %gsbase, i32 0, i32 4, !dbg !6792
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6792
  ret %struct.basic_block_def* %1, !dbg !6793
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @single_pred_p(%struct.basic_block_def* %bb) #0 !dbg !6794 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !6797, metadata !DIExpression()), !dbg !6798
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6799
  %preds = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 0, !dbg !6799
  %1 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds, align 8, !dbg !6799
  %tobool = icmp ne %struct.VEC_edge_gc* %1, null, !dbg !6799
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6799

cond.true:                                        ; preds = %entry
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6799
  %preds1 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 0, !dbg !6799
  %3 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds1, align 8, !dbg !6799
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %3, i32 0, i32 0, !dbg !6799
  br label %cond.end, !dbg !6799

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6799

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !6799
  %call = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond), !dbg !6799
  %cmp = icmp eq i32 %call, 1, !dbg !6800
  %conv = zext i1 %cmp to i32, !dbg !6800
  %conv2 = trunc i32 %conv to i8, !dbg !6799
  ret i8 %conv2, !dbg !6801
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @single_succ_p(%struct.basic_block_def* %bb) #0 !dbg !6802 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !6803, metadata !DIExpression()), !dbg !6804
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6805
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 1, !dbg !6805
  %1 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs, align 8, !dbg !6805
  %tobool = icmp ne %struct.VEC_edge_gc* %1, null, !dbg !6805
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6805

cond.true:                                        ; preds = %entry
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6805
  %succs1 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 1, !dbg !6805
  %3 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs1, align 8, !dbg !6805
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %3, i32 0, i32 0, !dbg !6805
  br label %cond.end, !dbg !6805

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6805

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !6805
  %call = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond), !dbg !6805
  %cmp = icmp eq i32 %call, 1, !dbg !6806
  %conv = zext i1 %cmp to i32, !dbg !6806
  %conv2 = trunc i32 %conv to i8, !dbg !6805
  ret i8 %conv2, !dbg !6807
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.basic_block_def* @single_pred(%struct.basic_block_def* %bb) #0 !dbg !6808 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !6811, metadata !DIExpression()), !dbg !6812
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6813
  %call = call %struct.edge_def* @single_pred_edge(%struct.basic_block_def* %0), !dbg !6814
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call, i32 0, i32 0, !dbg !6815
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !6815
  ret %struct.basic_block_def* %1, !dbg !6816
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.basic_block_def* @single_succ(%struct.basic_block_def* %bb) #0 !dbg !6817 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !6818, metadata !DIExpression()), !dbg !6819
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6820
  %call = call %struct.edge_def* @single_succ_edge(%struct.basic_block_def* %0), !dbg !6821
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call, i32 0, i32 1, !dbg !6822
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !6822
  ret %struct.basic_block_def* %1, !dbg !6823
}

declare dso_local %union.gimple_statement_d* @last_stmt(%struct.basic_block_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_cond_code(%union.gimple_statement_d* %gs) #0 !dbg !6824 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6825, metadata !DIExpression()), !dbg !6826
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6827
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !6828
  %1 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !6829
  %bf.load = load i32, i32* %1, align 8, !dbg !6829
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !6829
  ret i32 %bf.lshr, !dbg !6830
}

declare dso_local i32 @integer_zerop(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_cond_rhs(%union.gimple_statement_d* %gs) #0 !dbg !6831 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6832, metadata !DIExpression()), !dbg !6833
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6834
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 1), !dbg !6835
  ret %union.tree_node* %call, !dbg !6836
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_cond_lhs(%union.gimple_statement_d* %gs) #0 !dbg !6837 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6838, metadata !DIExpression()), !dbg !6839
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6840
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 0), !dbg !6841
  ret %union.tree_node* %call, !dbg !6842
}

declare dso_local i32 @integer_onep(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_uid(%union.gimple_statement_d* %g) #0 !dbg !6843 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !6844, metadata !DIExpression()), !dbg !6845
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !6846
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !6847
  %uid = getelementptr inbounds %struct.gimple_statement_base, %struct.gimple_statement_base* %gsbase, i32 0, i32 1, !dbg !6848
  %1 = load i32, i32* %uid, align 4, !dbg !6848
  ret i32 %1, !dbg !6849
}

declare dso_local i32 @compute_call_stmt_bb_frequency(%union.tree_node*, %struct.basic_block_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.phi_arg_d* @gimple_phi_arg(%union.gimple_statement_d* %gs, i32 %index) #0 !dbg !6850 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %index.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6854, metadata !DIExpression()), !dbg !6855
  store i32 %index, i32* %index.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %index.addr, metadata !6856, metadata !DIExpression()), !dbg !6857
  %0 = load i32, i32* %index.addr, align 4, !dbg !6858
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6858
  %gimple_phi = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_phi*, !dbg !6858
  %capacity = getelementptr inbounds %struct.gimple_statement_phi, %struct.gimple_statement_phi* %gimple_phi, i32 0, i32 1, !dbg !6858
  %2 = load i32, i32* %capacity, align 8, !dbg !6858
  %cmp = icmp ule i32 %0, %2, !dbg !6858
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !6858

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.35, i64 0, i64 0), i32 3103, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !6858
  br label %cond.end, !dbg !6858

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6858

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6858
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6859
  %gimple_phi1 = bitcast %union.gimple_statement_d* %3 to %struct.gimple_statement_phi*, !dbg !6860
  %args = getelementptr inbounds %struct.gimple_statement_phi, %struct.gimple_statement_phi* %gimple_phi1, i32 0, i32 4, !dbg !6861
  %4 = load i32, i32* %index.addr, align 4, !dbg !6862
  %idxprom = zext i32 %4 to i64, !dbg !6859
  %arrayidx = getelementptr inbounds [1 x %struct.phi_arg_d], [1 x %struct.phi_arg_d]* %args, i64 0, i64 %idxprom, !dbg !6859
  ret %struct.phi_arg_d* %arrayidx, !dbg !6863
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @ipa_get_member_ptr_load_param(%union.tree_node* %rhs, i8 zeroext %use_delta) #0 !dbg !6864 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %rhs.addr = alloca %union.tree_node*, align 8
  %use_delta.addr = alloca i8, align 1
  %rec = alloca %union.tree_node*, align 8
  %fld = alloca %union.tree_node*, align 8
  %ptr_field = alloca %union.tree_node*, align 8
  %delta_field = alloca %union.tree_node*, align 8
  store %union.tree_node* %rhs, %union.tree_node** %rhs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %rhs.addr, metadata !6867, metadata !DIExpression()), !dbg !6868
  store i8 %use_delta, i8* %use_delta.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %use_delta.addr, metadata !6869, metadata !DIExpression()), !dbg !6870
  call void @llvm.dbg.declare(metadata %union.tree_node** %rec, metadata !6871, metadata !DIExpression()), !dbg !6872
  call void @llvm.dbg.declare(metadata %union.tree_node** %fld, metadata !6873, metadata !DIExpression()), !dbg !6874
  call void @llvm.dbg.declare(metadata %union.tree_node** %ptr_field, metadata !6875, metadata !DIExpression()), !dbg !6876
  call void @llvm.dbg.declare(metadata %union.tree_node** %delta_field, metadata !6877, metadata !DIExpression()), !dbg !6878
  %0 = load %union.tree_node*, %union.tree_node** %rhs.addr, align 8, !dbg !6879
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !6879
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !6879
  %bf.load = load i64, i64* %1, align 8, !dbg !6879
  %bf.clear = and i64 %bf.load, 65535, !dbg !6879
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !6879
  %cmp = icmp ne i32 %bf.cast, 41, !dbg !6881
  br i1 %cmp, label %if.then, label %if.end, !dbg !6882

if.then:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !6883
  br label %return, !dbg !6883

if.end:                                           ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %rhs.addr, align 8, !dbg !6884
  %exp = bitcast %union.tree_node* %2 to %struct.tree_exp*, !dbg !6884
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !6884
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !6884
  %3 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !6884
  store %union.tree_node* %3, %union.tree_node** %rec, align 8, !dbg !6885
  %4 = load %union.tree_node*, %union.tree_node** %rec, align 8, !dbg !6886
  %base1 = bitcast %union.tree_node* %4 to %struct.tree_base*, !dbg !6886
  %5 = bitcast %struct.tree_base* %base1 to i64*, !dbg !6886
  %bf.load2 = load i64, i64* %5, align 8, !dbg !6886
  %bf.clear3 = and i64 %bf.load2, 65535, !dbg !6886
  %bf.cast4 = trunc i64 %bf.clear3 to i32, !dbg !6886
  %cmp5 = icmp ne i32 %bf.cast4, 34, !dbg !6888
  br i1 %cmp5, label %if.then6, label %lor.lhs.false, !dbg !6889

lor.lhs.false:                                    ; preds = %if.end
  %6 = load %union.tree_node*, %union.tree_node** %rec, align 8, !dbg !6890
  %common = bitcast %union.tree_node* %6 to %struct.tree_common*, !dbg !6890
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !6890
  %7 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6890
  %call = call zeroext i8 @type_like_member_ptr_p(%union.tree_node* %7, %union.tree_node** %ptr_field, %union.tree_node** %delta_field), !dbg !6891
  %tobool = icmp ne i8 %call, 0, !dbg !6891
  br i1 %tobool, label %if.end7, label %if.then6, !dbg !6892

if.then6:                                         ; preds = %lor.lhs.false, %if.end
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !6893
  br label %return, !dbg !6893

if.end7:                                          ; preds = %lor.lhs.false
  %8 = load %union.tree_node*, %union.tree_node** %rhs.addr, align 8, !dbg !6894
  %exp8 = bitcast %union.tree_node* %8 to %struct.tree_exp*, !dbg !6894
  %operands9 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp8, i32 0, i32 3, !dbg !6894
  %arrayidx10 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands9, i64 0, i64 1, !dbg !6894
  %9 = load %union.tree_node*, %union.tree_node** %arrayidx10, align 8, !dbg !6894
  store %union.tree_node* %9, %union.tree_node** %fld, align 8, !dbg !6895
  %10 = load i8, i8* %use_delta.addr, align 1, !dbg !6896
  %conv = zext i8 %10 to i32, !dbg !6896
  %tobool11 = icmp ne i32 %conv, 0, !dbg !6896
  br i1 %tobool11, label %cond.true, label %cond.false, !dbg !6898

cond.true:                                        ; preds = %if.end7
  %11 = load %union.tree_node*, %union.tree_node** %fld, align 8, !dbg !6899
  %12 = load %union.tree_node*, %union.tree_node** %delta_field, align 8, !dbg !6900
  %cmp12 = icmp eq %union.tree_node* %11, %12, !dbg !6901
  br i1 %cmp12, label %if.then16, label %if.else, !dbg !6896

cond.false:                                       ; preds = %if.end7
  %13 = load %union.tree_node*, %union.tree_node** %fld, align 8, !dbg !6902
  %14 = load %union.tree_node*, %union.tree_node** %ptr_field, align 8, !dbg !6903
  %cmp14 = icmp eq %union.tree_node* %13, %14, !dbg !6904
  br i1 %cmp14, label %if.then16, label %if.else, !dbg !6898

if.then16:                                        ; preds = %cond.false, %cond.true
  %15 = load %union.tree_node*, %union.tree_node** %rec, align 8, !dbg !6905
  store %union.tree_node* %15, %union.tree_node** %retval, align 8, !dbg !6906
  br label %return, !dbg !6906

if.else:                                          ; preds = %cond.false, %cond.true
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !6907
  br label %return, !dbg !6907

return:                                           ; preds = %if.else, %if.then16, %if.then6, %if.then
  %16 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !6908
  ret %union.tree_node* %16, !dbg !6908
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_edge_base_length(%struct.VEC_edge_base* %vec_) #0 !dbg !6909 {
entry:
  %vec_.addr = alloca %struct.VEC_edge_base*, align 8
  store %struct.VEC_edge_base* %vec_, %struct.VEC_edge_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_base** %vec_.addr, metadata !6914, metadata !DIExpression()), !dbg !6915
  %0 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !6915
  %tobool = icmp ne %struct.VEC_edge_base* %0, null, !dbg !6915
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6915

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !6915
  %num = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %1, i32 0, i32 0, !dbg !6915
  %2 = load i32, i32* %num, align 8, !dbg !6915
  br label %cond.end, !dbg !6915

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6915

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !6915
  ret i32 %cond, !dbg !6915
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.edge_def* @single_pred_edge(%struct.basic_block_def* %bb) #0 !dbg !6916 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !6919, metadata !DIExpression()), !dbg !6920
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6921
  %call = call zeroext i8 @single_pred_p(%struct.basic_block_def* %0), !dbg !6921
  %tobool = icmp ne i8 %call, 0, !dbg !6921
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !6921

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.36, i64 0, i64 0), i32 655, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !6921
  br label %cond.end, !dbg !6921

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6921

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6921
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6922
  %preds = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %1, i32 0, i32 0, !dbg !6922
  %2 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds, align 8, !dbg !6922
  %tobool1 = icmp ne %struct.VEC_edge_gc* %2, null, !dbg !6922
  br i1 %tobool1, label %cond.true2, label %cond.false4, !dbg !6922

cond.true2:                                       ; preds = %cond.end
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6922
  %preds3 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %3, i32 0, i32 0, !dbg !6922
  %4 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds3, align 8, !dbg !6922
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %4, i32 0, i32 0, !dbg !6922
  br label %cond.end5, !dbg !6922

cond.false4:                                      ; preds = %cond.end
  br label %cond.end5, !dbg !6922

cond.end5:                                        ; preds = %cond.false4, %cond.true2
  %cond6 = phi %struct.VEC_edge_base* [ %base, %cond.true2 ], [ null, %cond.false4 ], !dbg !6922
  %call7 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond6, i32 0), !dbg !6922
  ret %struct.edge_def* %call7, !dbg !6923
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %vec_, i32 %ix_) #0 !dbg !6924 {
entry:
  %vec_.addr = alloca %struct.VEC_edge_base*, align 8
  %ix_.addr = alloca i32, align 4
  store %struct.VEC_edge_base* %vec_, %struct.VEC_edge_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_base** %vec_.addr, metadata !6927, metadata !DIExpression()), !dbg !6928
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !6929, metadata !DIExpression()), !dbg !6928
  %0 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !6928
  %tobool = icmp ne %struct.VEC_edge_base* %0, null, !dbg !6928
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !6928

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !6928
  %2 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !6928
  %num = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %2, i32 0, i32 0, !dbg !6928
  %3 = load i32, i32* %num, align 8, !dbg !6928
  %cmp = icmp ult i32 %1, %3, !dbg !6928
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !6930
  %land.ext = zext i1 %4 to i32, !dbg !6928
  %5 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !6928
  %vec = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %5, i32 0, i32 2, !dbg !6928
  %6 = load i32, i32* %ix_.addr, align 4, !dbg !6928
  %idxprom = zext i32 %6 to i64, !dbg !6928
  %arrayidx = getelementptr inbounds [1 x %struct.edge_def*], [1 x %struct.edge_def*]* %vec, i64 0, i64 %idxprom, !dbg !6928
  %7 = load %struct.edge_def*, %struct.edge_def** %arrayidx, align 8, !dbg !6928
  ret %struct.edge_def* %7, !dbg !6928
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.edge_def* @single_succ_edge(%struct.basic_block_def* %bb) #0 !dbg !6931 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !6932, metadata !DIExpression()), !dbg !6933
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6934
  %call = call zeroext i8 @single_succ_p(%struct.basic_block_def* %0), !dbg !6934
  %tobool = icmp ne i8 %call, 0, !dbg !6934
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !6934

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.36, i64 0, i64 0), i32 645, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !6934
  br label %cond.end, !dbg !6934

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6934

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6934
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6935
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %1, i32 0, i32 1, !dbg !6935
  %2 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs, align 8, !dbg !6935
  %tobool1 = icmp ne %struct.VEC_edge_gc* %2, null, !dbg !6935
  br i1 %tobool1, label %cond.true2, label %cond.false4, !dbg !6935

cond.true2:                                       ; preds = %cond.end
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6935
  %succs3 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %3, i32 0, i32 1, !dbg !6935
  %4 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs3, align 8, !dbg !6935
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %4, i32 0, i32 0, !dbg !6935
  br label %cond.end5, !dbg !6935

cond.false4:                                      ; preds = %cond.end
  br label %cond.end5, !dbg !6935

cond.end5:                                        ; preds = %cond.false4, %cond.true2
  %cond6 = phi %struct.VEC_edge_base* [ %base, %cond.true2 ], [ null, %cond.false4 ], !dbg !6935
  %call7 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond6, i32 0), !dbg !6935
  ret %struct.edge_def* %call7, !dbg !6936
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @update_call_notes_after_inlining(%struct.cgraph_edge* %cs, %struct.cgraph_node* %node, %struct.VEC_cgraph_edge_p_heap** %new_edges) #0 !dbg !6937 {
entry:
  %cs.addr = alloca %struct.cgraph_edge*, align 8
  %node.addr = alloca %struct.cgraph_node*, align 8
  %new_edges.addr = alloca %struct.VEC_cgraph_edge_p_heap**, align 8
  %info = alloca %struct.ipa_node_params*, align 8
  %top = alloca %struct.ipa_edge_args*, align 8
  %nt = alloca %struct.ipa_param_call_note*, align 8
  %res = alloca i8, align 1
  %jfunc = alloca %struct.ipa_jump_func*, align 8
  %callee = alloca %struct.cgraph_node*, align 8
  %new_indirect_edge = alloca %struct.cgraph_edge*, align 8
  %decl = alloca %union.tree_node*, align 8
  store %struct.cgraph_edge* %cs, %struct.cgraph_edge** %cs.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cgraph_edge** %cs.addr, metadata !6938, metadata !DIExpression()), !dbg !6939
  store %struct.cgraph_node* %node, %struct.cgraph_node** %node.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %node.addr, metadata !6940, metadata !DIExpression()), !dbg !6941
  store %struct.VEC_cgraph_edge_p_heap** %new_edges, %struct.VEC_cgraph_edge_p_heap*** %new_edges.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_cgraph_edge_p_heap*** %new_edges.addr, metadata !6942, metadata !DIExpression()), !dbg !6943
  call void @llvm.dbg.declare(metadata %struct.ipa_node_params** %info, metadata !6944, metadata !DIExpression()), !dbg !6945
  %0 = load %struct.VEC_ipa_node_params_t_heap*, %struct.VEC_ipa_node_params_t_heap** @ipa_node_params_vector, align 8, !dbg !6946
  %tobool = icmp ne %struct.VEC_ipa_node_params_t_heap* %0, null, !dbg !6946
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6946

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_ipa_node_params_t_heap*, %struct.VEC_ipa_node_params_t_heap** @ipa_node_params_vector, align 8, !dbg !6946
  %base = getelementptr inbounds %struct.VEC_ipa_node_params_t_heap, %struct.VEC_ipa_node_params_t_heap* %1, i32 0, i32 0, !dbg !6946
  br label %cond.end, !dbg !6946

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6946

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_ipa_node_params_t_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !6946
  %2 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !6946
  %uid = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %2, i32 0, i32 24, !dbg !6946
  %3 = load i32, i32* %uid, align 8, !dbg !6946
  %call = call %struct.ipa_node_params* @VEC_ipa_node_params_t_base_index(%struct.VEC_ipa_node_params_t_base* %cond, i32 %3), !dbg !6946
  store %struct.ipa_node_params* %call, %struct.ipa_node_params** %info, align 8, !dbg !6945
  call void @llvm.dbg.declare(metadata %struct.ipa_edge_args** %top, metadata !6947, metadata !DIExpression()), !dbg !6948
  %4 = load %struct.VEC_ipa_edge_args_t_gc*, %struct.VEC_ipa_edge_args_t_gc** @ipa_edge_args_vector, align 8, !dbg !6949
  %tobool1 = icmp ne %struct.VEC_ipa_edge_args_t_gc* %4, null, !dbg !6949
  br i1 %tobool1, label %cond.true2, label %cond.false4, !dbg !6949

cond.true2:                                       ; preds = %cond.end
  %5 = load %struct.VEC_ipa_edge_args_t_gc*, %struct.VEC_ipa_edge_args_t_gc** @ipa_edge_args_vector, align 8, !dbg !6949
  %base3 = getelementptr inbounds %struct.VEC_ipa_edge_args_t_gc, %struct.VEC_ipa_edge_args_t_gc* %5, i32 0, i32 0, !dbg !6949
  br label %cond.end5, !dbg !6949

cond.false4:                                      ; preds = %cond.end
  br label %cond.end5, !dbg !6949

cond.end5:                                        ; preds = %cond.false4, %cond.true2
  %cond6 = phi %struct.VEC_ipa_edge_args_t_base* [ %base3, %cond.true2 ], [ null, %cond.false4 ], !dbg !6949
  %6 = load %struct.cgraph_edge*, %struct.cgraph_edge** %cs.addr, align 8, !dbg !6949
  %uid7 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %6, i32 0, i32 12, !dbg !6949
  %7 = load i32, i32* %uid7, align 4, !dbg !6949
  %call8 = call %struct.ipa_edge_args* @VEC_ipa_edge_args_t_base_index(%struct.VEC_ipa_edge_args_t_base* %cond6, i32 %7), !dbg !6949
  store %struct.ipa_edge_args* %call8, %struct.ipa_edge_args** %top, align 8, !dbg !6948
  call void @llvm.dbg.declare(metadata %struct.ipa_param_call_note** %nt, metadata !6950, metadata !DIExpression()), !dbg !6951
  call void @llvm.dbg.declare(metadata i8* %res, metadata !6952, metadata !DIExpression()), !dbg !6953
  store i8 0, i8* %res, align 1, !dbg !6953
  %8 = load %struct.ipa_node_params*, %struct.ipa_node_params** %info, align 8, !dbg !6954
  %param_calls = getelementptr inbounds %struct.ipa_node_params, %struct.ipa_node_params* %8, i32 0, i32 2, !dbg !6956
  %9 = load %struct.ipa_param_call_note*, %struct.ipa_param_call_note** %param_calls, align 8, !dbg !6956
  store %struct.ipa_param_call_note* %9, %struct.ipa_param_call_note** %nt, align 8, !dbg !6957
  br label %for.cond, !dbg !6958

for.cond:                                         ; preds = %for.inc, %cond.end5
  %10 = load %struct.ipa_param_call_note*, %struct.ipa_param_call_note** %nt, align 8, !dbg !6959
  %tobool9 = icmp ne %struct.ipa_param_call_note* %10, null, !dbg !6961
  br i1 %tobool9, label %for.body, label %for.end, !dbg !6961

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.ipa_jump_func** %jfunc, metadata !6962, metadata !DIExpression()), !dbg !6964
  %11 = load %struct.ipa_param_call_note*, %struct.ipa_param_call_note** %nt, align 8, !dbg !6965
  %processed = getelementptr inbounds %struct.ipa_param_call_note, %struct.ipa_param_call_note* %11, i32 0, i32 7, !dbg !6967
  %12 = load i8, i8* %processed, align 2, !dbg !6967
  %tobool10 = icmp ne i8 %12, 0, !dbg !6965
  br i1 %tobool10, label %if.then, label %if.end, !dbg !6968

if.then:                                          ; preds = %for.body
  br label %for.inc, !dbg !6969

if.end:                                           ; preds = %for.body
  %13 = load %struct.ipa_param_call_note*, %struct.ipa_param_call_note** %nt, align 8, !dbg !6970
  %formal_id = getelementptr inbounds %struct.ipa_param_call_note, %struct.ipa_param_call_note* %13, i32 0, i32 4, !dbg !6972
  %14 = load i32, i32* %formal_id, align 4, !dbg !6972
  %15 = load %struct.ipa_edge_args*, %struct.ipa_edge_args** %top, align 8, !dbg !6973
  %call11 = call i32 @ipa_get_cs_argument_count(%struct.ipa_edge_args* %15), !dbg !6974
  %cmp = icmp sge i32 %14, %call11, !dbg !6975
  br i1 %cmp, label %if.then12, label %if.end14, !dbg !6976

if.then12:                                        ; preds = %if.end
  %16 = load %struct.ipa_param_call_note*, %struct.ipa_param_call_note** %nt, align 8, !dbg !6977
  %processed13 = getelementptr inbounds %struct.ipa_param_call_note, %struct.ipa_param_call_note* %16, i32 0, i32 7, !dbg !6979
  store i8 1, i8* %processed13, align 2, !dbg !6980
  br label %for.inc, !dbg !6981

if.end14:                                         ; preds = %if.end
  %17 = load %struct.ipa_edge_args*, %struct.ipa_edge_args** %top, align 8, !dbg !6982
  %18 = load %struct.ipa_param_call_note*, %struct.ipa_param_call_note** %nt, align 8, !dbg !6983
  %formal_id15 = getelementptr inbounds %struct.ipa_param_call_note, %struct.ipa_param_call_note* %18, i32 0, i32 4, !dbg !6984
  %19 = load i32, i32* %formal_id15, align 4, !dbg !6984
  %call16 = call %struct.ipa_jump_func* @ipa_get_ith_jump_func(%struct.ipa_edge_args* %17, i32 %19), !dbg !6985
  store %struct.ipa_jump_func* %call16, %struct.ipa_jump_func** %jfunc, align 8, !dbg !6986
  %20 = load %struct.ipa_jump_func*, %struct.ipa_jump_func** %jfunc, align 8, !dbg !6987
  %type = getelementptr inbounds %struct.ipa_jump_func, %struct.ipa_jump_func* %20, i32 0, i32 0, !dbg !6989
  %21 = load i32, i32* %type, align 8, !dbg !6989
  %cmp17 = icmp eq i32 %21, 3, !dbg !6990
  br i1 %cmp17, label %land.lhs.true, label %if.else, !dbg !6991

land.lhs.true:                                    ; preds = %if.end14
  %22 = load %struct.ipa_jump_func*, %struct.ipa_jump_func** %jfunc, align 8, !dbg !6992
  %value = getelementptr inbounds %struct.ipa_jump_func, %struct.ipa_jump_func* %22, i32 0, i32 1, !dbg !6993
  %pass_through = bitcast %union.jump_func_value* %value to %struct.ipa_pass_through_data*, !dbg !6994
  %operation = getelementptr inbounds %struct.ipa_pass_through_data, %struct.ipa_pass_through_data* %pass_through, i32 0, i32 2, !dbg !6995
  %23 = load i32, i32* %operation, align 4, !dbg !6995
  %cmp18 = icmp eq i32 %23, 116, !dbg !6996
  br i1 %cmp18, label %if.then19, label %if.else, !dbg !6997

if.then19:                                        ; preds = %land.lhs.true
  %24 = load %struct.ipa_jump_func*, %struct.ipa_jump_func** %jfunc, align 8, !dbg !6998
  %value20 = getelementptr inbounds %struct.ipa_jump_func, %struct.ipa_jump_func* %24, i32 0, i32 1, !dbg !6999
  %pass_through21 = bitcast %union.jump_func_value* %value20 to %struct.ipa_pass_through_data*, !dbg !7000
  %formal_id22 = getelementptr inbounds %struct.ipa_pass_through_data, %struct.ipa_pass_through_data* %pass_through21, i32 0, i32 1, !dbg !7001
  %25 = load i32, i32* %formal_id22, align 8, !dbg !7001
  %26 = load %struct.ipa_param_call_note*, %struct.ipa_param_call_note** %nt, align 8, !dbg !7002
  %formal_id23 = getelementptr inbounds %struct.ipa_param_call_note, %struct.ipa_param_call_note* %26, i32 0, i32 4, !dbg !7003
  store i32 %25, i32* %formal_id23, align 4, !dbg !7004
  br label %if.end86, !dbg !7002

if.else:                                          ; preds = %land.lhs.true, %if.end14
  %27 = load %struct.ipa_jump_func*, %struct.ipa_jump_func** %jfunc, align 8, !dbg !7005
  %type24 = getelementptr inbounds %struct.ipa_jump_func, %struct.ipa_jump_func* %27, i32 0, i32 0, !dbg !7007
  %28 = load i32, i32* %type24, align 8, !dbg !7007
  %cmp25 = icmp eq i32 %28, 1, !dbg !7008
  br i1 %cmp25, label %if.then28, label %lor.lhs.false, !dbg !7009

lor.lhs.false:                                    ; preds = %if.else
  %29 = load %struct.ipa_jump_func*, %struct.ipa_jump_func** %jfunc, align 8, !dbg !7010
  %type26 = getelementptr inbounds %struct.ipa_jump_func, %struct.ipa_jump_func* %29, i32 0, i32 0, !dbg !7011
  %30 = load i32, i32* %type26, align 8, !dbg !7011
  %cmp27 = icmp eq i32 %30, 2, !dbg !7012
  br i1 %cmp27, label %if.then28, label %if.else76, !dbg !7013

if.then28:                                        ; preds = %lor.lhs.false, %if.else
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %callee, metadata !7014, metadata !DIExpression()), !dbg !7016
  call void @llvm.dbg.declare(metadata %struct.cgraph_edge** %new_indirect_edge, metadata !7017, metadata !DIExpression()), !dbg !7018
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl, metadata !7019, metadata !DIExpression()), !dbg !7020
  %31 = load %struct.ipa_param_call_note*, %struct.ipa_param_call_note** %nt, align 8, !dbg !7021
  %processed29 = getelementptr inbounds %struct.ipa_param_call_note, %struct.ipa_param_call_note* %31, i32 0, i32 7, !dbg !7022
  store i8 1, i8* %processed29, align 2, !dbg !7023
  %32 = load %struct.ipa_jump_func*, %struct.ipa_jump_func** %jfunc, align 8, !dbg !7024
  %type30 = getelementptr inbounds %struct.ipa_jump_func, %struct.ipa_jump_func* %32, i32 0, i32 0, !dbg !7026
  %33 = load i32, i32* %type30, align 8, !dbg !7026
  %cmp31 = icmp eq i32 %33, 2, !dbg !7027
  br i1 %cmp31, label %if.then32, label %if.else34, !dbg !7028

if.then32:                                        ; preds = %if.then28
  %34 = load %struct.ipa_jump_func*, %struct.ipa_jump_func** %jfunc, align 8, !dbg !7029
  %value33 = getelementptr inbounds %struct.ipa_jump_func, %struct.ipa_jump_func* %34, i32 0, i32 1, !dbg !7030
  %member_cst = bitcast %union.jump_func_value* %value33 to %struct.ipa_member_ptr_cst*, !dbg !7031
  %pfn = getelementptr inbounds %struct.ipa_member_ptr_cst, %struct.ipa_member_ptr_cst* %member_cst, i32 0, i32 0, !dbg !7032
  %35 = load %union.tree_node*, %union.tree_node** %pfn, align 8, !dbg !7032
  store %union.tree_node* %35, %union.tree_node** %decl, align 8, !dbg !7033
  br label %if.end36, !dbg !7034

if.else34:                                        ; preds = %if.then28
  %36 = load %struct.ipa_jump_func*, %struct.ipa_jump_func** %jfunc, align 8, !dbg !7035
  %value35 = getelementptr inbounds %struct.ipa_jump_func, %struct.ipa_jump_func* %36, i32 0, i32 1, !dbg !7036
  %constant = bitcast %union.jump_func_value* %value35 to %union.tree_node**, !dbg !7037
  %37 = load %union.tree_node*, %union.tree_node** %constant, align 8, !dbg !7037
  store %union.tree_node* %37, %union.tree_node** %decl, align 8, !dbg !7038
  br label %if.end36

if.end36:                                         ; preds = %if.else34, %if.then32
  %38 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !7039
  %base37 = bitcast %union.tree_node* %38 to %struct.tree_base*, !dbg !7039
  %39 = bitcast %struct.tree_base* %base37 to i64*, !dbg !7039
  %bf.load = load i64, i64* %39, align 8, !dbg !7039
  %bf.clear = and i64 %bf.load, 65535, !dbg !7039
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !7039
  %cmp38 = icmp ne i32 %bf.cast, 121, !dbg !7041
  br i1 %cmp38, label %if.then39, label %if.end40, !dbg !7042

if.then39:                                        ; preds = %if.end36
  br label %for.inc, !dbg !7043

if.end40:                                         ; preds = %if.end36
  %40 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !7044
  %exp = bitcast %union.tree_node* %40 to %struct.tree_exp*, !dbg !7044
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !7044
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !7044
  %41 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !7044
  store %union.tree_node* %41, %union.tree_node** %decl, align 8, !dbg !7045
  %42 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !7046
  %base41 = bitcast %union.tree_node* %42 to %struct.tree_base*, !dbg !7046
  %43 = bitcast %struct.tree_base* %base41 to i64*, !dbg !7046
  %bf.load42 = load i64, i64* %43, align 8, !dbg !7046
  %bf.clear43 = and i64 %bf.load42, 65535, !dbg !7046
  %bf.cast44 = trunc i64 %bf.clear43 to i32, !dbg !7046
  %cmp45 = icmp ne i32 %bf.cast44, 29, !dbg !7048
  br i1 %cmp45, label %if.then46, label %if.end47, !dbg !7049

if.then46:                                        ; preds = %if.end40
  br label %for.inc, !dbg !7050

if.end47:                                         ; preds = %if.end40
  %44 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !7051
  %call48 = call %struct.cgraph_node* @cgraph_node(%union.tree_node* %44), !dbg !7052
  store %struct.cgraph_node* %call48, %struct.cgraph_node** %callee, align 8, !dbg !7053
  %45 = load %struct.cgraph_node*, %struct.cgraph_node** %callee, align 8, !dbg !7054
  %tobool49 = icmp ne %struct.cgraph_node* %45, null, !dbg !7054
  br i1 %tobool49, label %lor.lhs.false50, label %if.then55, !dbg !7056

lor.lhs.false50:                                  ; preds = %if.end47
  %46 = load %struct.cgraph_node*, %struct.cgraph_node** %callee, align 8, !dbg !7057
  %local = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %46, i32 0, i32 18, !dbg !7058
  %inlinable = getelementptr inbounds %struct.cgraph_local_info, %struct.cgraph_local_info* %local, i32 0, i32 2, !dbg !7059
  %bf.load51 = load i8, i8* %inlinable, align 8, !dbg !7059
  %bf.lshr = lshr i8 %bf.load51, 3, !dbg !7059
  %bf.clear52 = and i8 %bf.lshr, 1, !dbg !7059
  %bf.cast53 = zext i8 %bf.clear52 to i32, !dbg !7059
  %tobool54 = icmp ne i32 %bf.cast53, 0, !dbg !7057
  br i1 %tobool54, label %if.end56, label %if.then55, !dbg !7060

if.then55:                                        ; preds = %lor.lhs.false50, %if.end47
  br label %for.inc, !dbg !7061

if.end56:                                         ; preds = %lor.lhs.false50
  store i8 1, i8* %res, align 1, !dbg !7062
  %47 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !7063
  %tobool57 = icmp ne %struct._IO_FILE* %47, null, !dbg !7063
  br i1 %tobool57, label %if.then58, label %if.end59, !dbg !7065

if.then58:                                        ; preds = %if.end56
  %48 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !7066
  %49 = load %struct.ipa_param_call_note*, %struct.ipa_param_call_note** %nt, align 8, !dbg !7067
  %50 = load %struct.ipa_jump_func*, %struct.ipa_jump_func** %jfunc, align 8, !dbg !7068
  %51 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !7069
  call void @print_edge_addition_message(%struct._IO_FILE* %48, %struct.ipa_param_call_note* %49, %struct.ipa_jump_func* %50, %struct.cgraph_node* %51), !dbg !7070
  br label %if.end59, !dbg !7070

if.end59:                                         ; preds = %if.then58, %if.end56
  %52 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !7071
  %53 = load %struct.cgraph_node*, %struct.cgraph_node** %callee, align 8, !dbg !7072
  %54 = load %struct.ipa_param_call_note*, %struct.ipa_param_call_note** %nt, align 8, !dbg !7073
  %stmt = getelementptr inbounds %struct.ipa_param_call_note, %struct.ipa_param_call_note* %54, i32 0, i32 2, !dbg !7074
  %55 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !7074
  %56 = load %struct.ipa_param_call_note*, %struct.ipa_param_call_note** %nt, align 8, !dbg !7075
  %count = getelementptr inbounds %struct.ipa_param_call_note, %struct.ipa_param_call_note* %56, i32 0, i32 0, !dbg !7076
  %57 = load i64, i64* %count, align 8, !dbg !7076
  %58 = load %struct.ipa_param_call_note*, %struct.ipa_param_call_note** %nt, align 8, !dbg !7077
  %frequency = getelementptr inbounds %struct.ipa_param_call_note, %struct.ipa_param_call_note* %58, i32 0, i32 5, !dbg !7078
  %59 = load i32, i32* %frequency, align 8, !dbg !7078
  %60 = load %struct.ipa_param_call_note*, %struct.ipa_param_call_note** %nt, align 8, !dbg !7079
  %loop_nest = getelementptr inbounds %struct.ipa_param_call_note, %struct.ipa_param_call_note* %60, i32 0, i32 6, !dbg !7080
  %61 = load i16, i16* %loop_nest, align 4, !dbg !7080
  %conv = zext i16 %61 to i32, !dbg !7079
  %call60 = call %struct.cgraph_edge* @cgraph_create_edge(%struct.cgraph_node* %52, %struct.cgraph_node* %53, %union.gimple_statement_d* %55, i64 %57, i32 %59, i32 %conv), !dbg !7081
  store %struct.cgraph_edge* %call60, %struct.cgraph_edge** %new_indirect_edge, align 8, !dbg !7082
  %62 = load %struct.ipa_param_call_note*, %struct.ipa_param_call_note** %nt, align 8, !dbg !7083
  %lto_stmt_uid = getelementptr inbounds %struct.ipa_param_call_note, %struct.ipa_param_call_note* %62, i32 0, i32 3, !dbg !7084
  %63 = load i32, i32* %lto_stmt_uid, align 8, !dbg !7084
  %64 = load %struct.cgraph_edge*, %struct.cgraph_edge** %new_indirect_edge, align 8, !dbg !7085
  %lto_stmt_uid61 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %64, i32 0, i32 10, !dbg !7086
  store i32 %63, i32* %lto_stmt_uid61, align 4, !dbg !7087
  %65 = load %struct.cgraph_edge*, %struct.cgraph_edge** %new_indirect_edge, align 8, !dbg !7088
  %indirect_call = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %65, i32 0, i32 14, !dbg !7089
  %bf.load62 = load i8, i8* %indirect_call, align 2, !dbg !7090
  %bf.clear63 = and i8 %bf.load62, -2, !dbg !7090
  %bf.set = or i8 %bf.clear63, 1, !dbg !7090
  store i8 %bf.set, i8* %indirect_call, align 2, !dbg !7090
  call void @ipa_check_create_edge_args(), !dbg !7091
  %66 = load %struct.VEC_cgraph_edge_p_heap**, %struct.VEC_cgraph_edge_p_heap*** %new_edges.addr, align 8, !dbg !7092
  %tobool64 = icmp ne %struct.VEC_cgraph_edge_p_heap** %66, null, !dbg !7092
  br i1 %tobool64, label %if.then65, label %if.end67, !dbg !7094

if.then65:                                        ; preds = %if.end59
  %67 = load %struct.VEC_cgraph_edge_p_heap**, %struct.VEC_cgraph_edge_p_heap*** %new_edges.addr, align 8, !dbg !7095
  %68 = load %struct.cgraph_edge*, %struct.cgraph_edge** %new_indirect_edge, align 8, !dbg !7095
  %call66 = call %struct.cgraph_edge** @VEC_cgraph_edge_p_heap_safe_push(%struct.VEC_cgraph_edge_p_heap** %67, %struct.cgraph_edge* %68), !dbg !7095
  br label %if.end67, !dbg !7095

if.end67:                                         ; preds = %if.then65, %if.end59
  %69 = load %struct.VEC_ipa_edge_args_t_gc*, %struct.VEC_ipa_edge_args_t_gc** @ipa_edge_args_vector, align 8, !dbg !7096
  %tobool68 = icmp ne %struct.VEC_ipa_edge_args_t_gc* %69, null, !dbg !7096
  br i1 %tobool68, label %cond.true69, label %cond.false71, !dbg !7096

cond.true69:                                      ; preds = %if.end67
  %70 = load %struct.VEC_ipa_edge_args_t_gc*, %struct.VEC_ipa_edge_args_t_gc** @ipa_edge_args_vector, align 8, !dbg !7096
  %base70 = getelementptr inbounds %struct.VEC_ipa_edge_args_t_gc, %struct.VEC_ipa_edge_args_t_gc* %70, i32 0, i32 0, !dbg !7096
  br label %cond.end72, !dbg !7096

cond.false71:                                     ; preds = %if.end67
  br label %cond.end72, !dbg !7096

cond.end72:                                       ; preds = %cond.false71, %cond.true69
  %cond73 = phi %struct.VEC_ipa_edge_args_t_base* [ %base70, %cond.true69 ], [ null, %cond.false71 ], !dbg !7096
  %71 = load %struct.cgraph_edge*, %struct.cgraph_edge** %cs.addr, align 8, !dbg !7096
  %uid74 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %71, i32 0, i32 12, !dbg !7096
  %72 = load i32, i32* %uid74, align 4, !dbg !7096
  %call75 = call %struct.ipa_edge_args* @VEC_ipa_edge_args_t_base_index(%struct.VEC_ipa_edge_args_t_base* %cond73, i32 %72), !dbg !7096
  store %struct.ipa_edge_args* %call75, %struct.ipa_edge_args** %top, align 8, !dbg !7097
  br label %if.end85, !dbg !7098

if.else76:                                        ; preds = %lor.lhs.false
  %73 = load %struct.ipa_jump_func*, %struct.ipa_jump_func** %jfunc, align 8, !dbg !7099
  %type77 = getelementptr inbounds %struct.ipa_jump_func, %struct.ipa_jump_func* %73, i32 0, i32 0, !dbg !7099
  %74 = load i32, i32* %type77, align 8, !dbg !7099
  %cmp78 = icmp eq i32 %74, 0, !dbg !7099
  br i1 %cmp78, label %cond.false81, label %cond.true80, !dbg !7099

cond.true80:                                      ; preds = %if.else76
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i32 1115, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !7099
  br label %cond.end82, !dbg !7099

cond.false81:                                     ; preds = %if.else76
  br label %cond.end82, !dbg !7099

cond.end82:                                       ; preds = %cond.false81, %cond.true80
  %cond83 = phi i32 [ 0, %cond.true80 ], [ 0, %cond.false81 ], !dbg !7099
  %75 = load %struct.ipa_param_call_note*, %struct.ipa_param_call_note** %nt, align 8, !dbg !7101
  %processed84 = getelementptr inbounds %struct.ipa_param_call_note, %struct.ipa_param_call_note* %75, i32 0, i32 7, !dbg !7102
  store i8 1, i8* %processed84, align 2, !dbg !7103
  br label %if.end85

if.end85:                                         ; preds = %cond.end82, %cond.end72
  br label %if.end86

if.end86:                                         ; preds = %if.end85, %if.then19
  br label %for.inc, !dbg !7104

for.inc:                                          ; preds = %if.end86, %if.then55, %if.then46, %if.then39, %if.then12, %if.then
  %76 = load %struct.ipa_param_call_note*, %struct.ipa_param_call_note** %nt, align 8, !dbg !7105
  %next = getelementptr inbounds %struct.ipa_param_call_note, %struct.ipa_param_call_note* %76, i32 0, i32 1, !dbg !7106
  %77 = load %struct.ipa_param_call_note*, %struct.ipa_param_call_note** %next, align 8, !dbg !7106
  store %struct.ipa_param_call_note* %77, %struct.ipa_param_call_note** %nt, align 8, !dbg !7107
  br label %for.cond, !dbg !7108, !llvm.loop !7109

for.end:                                          ; preds = %for.cond
  %78 = load i8, i8* %res, align 1, !dbg !7111
  ret i8 %78, !dbg !7112
}

; Function Attrs: noinline nounwind uwtable
define internal void @update_jump_functions_after_inlining(%struct.cgraph_edge* %cs, %struct.cgraph_edge* %e) #0 !dbg !7113 {
entry:
  %cs.addr = alloca %struct.cgraph_edge*, align 8
  %e.addr = alloca %struct.cgraph_edge*, align 8
  %top = alloca %struct.ipa_edge_args*, align 8
  %args = alloca %struct.ipa_edge_args*, align 8
  %count = alloca i32, align 4
  %i = alloca i32, align 4
  %src = alloca %struct.ipa_jump_func*, align 8
  %dst = alloca %struct.ipa_jump_func*, align 8
  store %struct.cgraph_edge* %cs, %struct.cgraph_edge** %cs.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cgraph_edge** %cs.addr, metadata !7116, metadata !DIExpression()), !dbg !7117
  store %struct.cgraph_edge* %e, %struct.cgraph_edge** %e.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cgraph_edge** %e.addr, metadata !7118, metadata !DIExpression()), !dbg !7119
  call void @llvm.dbg.declare(metadata %struct.ipa_edge_args** %top, metadata !7120, metadata !DIExpression()), !dbg !7121
  %0 = load %struct.VEC_ipa_edge_args_t_gc*, %struct.VEC_ipa_edge_args_t_gc** @ipa_edge_args_vector, align 8, !dbg !7122
  %tobool = icmp ne %struct.VEC_ipa_edge_args_t_gc* %0, null, !dbg !7122
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7122

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_ipa_edge_args_t_gc*, %struct.VEC_ipa_edge_args_t_gc** @ipa_edge_args_vector, align 8, !dbg !7122
  %base = getelementptr inbounds %struct.VEC_ipa_edge_args_t_gc, %struct.VEC_ipa_edge_args_t_gc* %1, i32 0, i32 0, !dbg !7122
  br label %cond.end, !dbg !7122

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7122

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_ipa_edge_args_t_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !7122
  %2 = load %struct.cgraph_edge*, %struct.cgraph_edge** %cs.addr, align 8, !dbg !7122
  %uid = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %2, i32 0, i32 12, !dbg !7122
  %3 = load i32, i32* %uid, align 4, !dbg !7122
  %call = call %struct.ipa_edge_args* @VEC_ipa_edge_args_t_base_index(%struct.VEC_ipa_edge_args_t_base* %cond, i32 %3), !dbg !7122
  store %struct.ipa_edge_args* %call, %struct.ipa_edge_args** %top, align 8, !dbg !7121
  call void @llvm.dbg.declare(metadata %struct.ipa_edge_args** %args, metadata !7123, metadata !DIExpression()), !dbg !7124
  %4 = load %struct.VEC_ipa_edge_args_t_gc*, %struct.VEC_ipa_edge_args_t_gc** @ipa_edge_args_vector, align 8, !dbg !7125
  %tobool1 = icmp ne %struct.VEC_ipa_edge_args_t_gc* %4, null, !dbg !7125
  br i1 %tobool1, label %cond.true2, label %cond.false4, !dbg !7125

cond.true2:                                       ; preds = %cond.end
  %5 = load %struct.VEC_ipa_edge_args_t_gc*, %struct.VEC_ipa_edge_args_t_gc** @ipa_edge_args_vector, align 8, !dbg !7125
  %base3 = getelementptr inbounds %struct.VEC_ipa_edge_args_t_gc, %struct.VEC_ipa_edge_args_t_gc* %5, i32 0, i32 0, !dbg !7125
  br label %cond.end5, !dbg !7125

cond.false4:                                      ; preds = %cond.end
  br label %cond.end5, !dbg !7125

cond.end5:                                        ; preds = %cond.false4, %cond.true2
  %cond6 = phi %struct.VEC_ipa_edge_args_t_base* [ %base3, %cond.true2 ], [ null, %cond.false4 ], !dbg !7125
  %6 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e.addr, align 8, !dbg !7125
  %uid7 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %6, i32 0, i32 12, !dbg !7125
  %7 = load i32, i32* %uid7, align 4, !dbg !7125
  %call8 = call %struct.ipa_edge_args* @VEC_ipa_edge_args_t_base_index(%struct.VEC_ipa_edge_args_t_base* %cond6, i32 %7), !dbg !7125
  store %struct.ipa_edge_args* %call8, %struct.ipa_edge_args** %args, align 8, !dbg !7124
  call void @llvm.dbg.declare(metadata i32* %count, metadata !7126, metadata !DIExpression()), !dbg !7127
  %8 = load %struct.ipa_edge_args*, %struct.ipa_edge_args** %args, align 8, !dbg !7128
  %call9 = call i32 @ipa_get_cs_argument_count(%struct.ipa_edge_args* %8), !dbg !7129
  store i32 %call9, i32* %count, align 4, !dbg !7127
  call void @llvm.dbg.declare(metadata i32* %i, metadata !7130, metadata !DIExpression()), !dbg !7131
  store i32 0, i32* %i, align 4, !dbg !7132
  br label %for.cond, !dbg !7134

for.cond:                                         ; preds = %for.inc, %cond.end5
  %9 = load i32, i32* %i, align 4, !dbg !7135
  %10 = load i32, i32* %count, align 4, !dbg !7137
  %cmp = icmp slt i32 %9, %10, !dbg !7138
  br i1 %cmp, label %for.body, label %for.end, !dbg !7139

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.ipa_jump_func** %src, metadata !7140, metadata !DIExpression()), !dbg !7142
  call void @llvm.dbg.declare(metadata %struct.ipa_jump_func** %dst, metadata !7143, metadata !DIExpression()), !dbg !7144
  %11 = load %struct.ipa_edge_args*, %struct.ipa_edge_args** %args, align 8, !dbg !7145
  %12 = load i32, i32* %i, align 4, !dbg !7146
  %call10 = call %struct.ipa_jump_func* @ipa_get_ith_jump_func(%struct.ipa_edge_args* %11, i32 %12), !dbg !7147
  store %struct.ipa_jump_func* %call10, %struct.ipa_jump_func** %dst, align 8, !dbg !7144
  %13 = load %struct.ipa_jump_func*, %struct.ipa_jump_func** %dst, align 8, !dbg !7148
  %type = getelementptr inbounds %struct.ipa_jump_func, %struct.ipa_jump_func* %13, i32 0, i32 0, !dbg !7150
  %14 = load i32, i32* %type, align 8, !dbg !7150
  %cmp11 = icmp eq i32 %14, 4, !dbg !7151
  br i1 %cmp11, label %if.then, label %if.end, !dbg !7152

if.then:                                          ; preds = %for.body
  %15 = load %struct.ipa_jump_func*, %struct.ipa_jump_func** %dst, align 8, !dbg !7153
  %type12 = getelementptr inbounds %struct.ipa_jump_func, %struct.ipa_jump_func* %15, i32 0, i32 0, !dbg !7155
  store i32 0, i32* %type12, align 8, !dbg !7156
  br label %for.inc, !dbg !7157

if.end:                                           ; preds = %for.body
  %16 = load %struct.ipa_jump_func*, %struct.ipa_jump_func** %dst, align 8, !dbg !7158
  %type13 = getelementptr inbounds %struct.ipa_jump_func, %struct.ipa_jump_func* %16, i32 0, i32 0, !dbg !7160
  %17 = load i32, i32* %type13, align 8, !dbg !7160
  %cmp14 = icmp ne i32 %17, 3, !dbg !7161
  br i1 %cmp14, label %if.then15, label %if.end16, !dbg !7162

if.then15:                                        ; preds = %if.end
  br label %for.inc, !dbg !7163

if.end16:                                         ; preds = %if.end
  %18 = load %struct.ipa_jump_func*, %struct.ipa_jump_func** %dst, align 8, !dbg !7164
  %value = getelementptr inbounds %struct.ipa_jump_func, %struct.ipa_jump_func* %18, i32 0, i32 1, !dbg !7166
  %pass_through = bitcast %union.jump_func_value* %value to %struct.ipa_pass_through_data*, !dbg !7167
  %operation = getelementptr inbounds %struct.ipa_pass_through_data, %struct.ipa_pass_through_data* %pass_through, i32 0, i32 2, !dbg !7168
  %19 = load i32, i32* %operation, align 4, !dbg !7168
  %cmp17 = icmp ne i32 %19, 116, !dbg !7169
  br i1 %cmp17, label %if.then22, label %lor.lhs.false, !dbg !7170

lor.lhs.false:                                    ; preds = %if.end16
  %20 = load %struct.ipa_jump_func*, %struct.ipa_jump_func** %dst, align 8, !dbg !7171
  %value18 = getelementptr inbounds %struct.ipa_jump_func, %struct.ipa_jump_func* %20, i32 0, i32 1, !dbg !7172
  %pass_through19 = bitcast %union.jump_func_value* %value18 to %struct.ipa_pass_through_data*, !dbg !7173
  %formal_id = getelementptr inbounds %struct.ipa_pass_through_data, %struct.ipa_pass_through_data* %pass_through19, i32 0, i32 1, !dbg !7174
  %21 = load i32, i32* %formal_id, align 8, !dbg !7174
  %22 = load %struct.ipa_edge_args*, %struct.ipa_edge_args** %top, align 8, !dbg !7175
  %call20 = call i32 @ipa_get_cs_argument_count(%struct.ipa_edge_args* %22), !dbg !7176
  %cmp21 = icmp sge i32 %21, %call20, !dbg !7177
  br i1 %cmp21, label %if.then22, label %if.end24, !dbg !7178

if.then22:                                        ; preds = %lor.lhs.false, %if.end16
  %23 = load %struct.ipa_jump_func*, %struct.ipa_jump_func** %dst, align 8, !dbg !7179
  %type23 = getelementptr inbounds %struct.ipa_jump_func, %struct.ipa_jump_func* %23, i32 0, i32 0, !dbg !7181
  store i32 0, i32* %type23, align 8, !dbg !7182
  br label %for.inc, !dbg !7183

if.end24:                                         ; preds = %lor.lhs.false
  %24 = load %struct.ipa_edge_args*, %struct.ipa_edge_args** %top, align 8, !dbg !7184
  %25 = load %struct.ipa_jump_func*, %struct.ipa_jump_func** %dst, align 8, !dbg !7185
  %value25 = getelementptr inbounds %struct.ipa_jump_func, %struct.ipa_jump_func* %25, i32 0, i32 1, !dbg !7186
  %pass_through26 = bitcast %union.jump_func_value* %value25 to %struct.ipa_pass_through_data*, !dbg !7187
  %formal_id27 = getelementptr inbounds %struct.ipa_pass_through_data, %struct.ipa_pass_through_data* %pass_through26, i32 0, i32 1, !dbg !7188
  %26 = load i32, i32* %formal_id27, align 8, !dbg !7188
  %call28 = call %struct.ipa_jump_func* @ipa_get_ith_jump_func(%struct.ipa_edge_args* %24, i32 %26), !dbg !7189
  store %struct.ipa_jump_func* %call28, %struct.ipa_jump_func** %src, align 8, !dbg !7190
  %27 = load %struct.ipa_jump_func*, %struct.ipa_jump_func** %dst, align 8, !dbg !7191
  %28 = load %struct.ipa_jump_func*, %struct.ipa_jump_func** %src, align 8, !dbg !7192
  %29 = bitcast %struct.ipa_jump_func* %27 to i8*, !dbg !7193
  %30 = bitcast %struct.ipa_jump_func* %28 to i8*, !dbg !7193
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %29, i8* align 8 %30, i64 32, i1 false), !dbg !7193
  br label %for.inc, !dbg !7194

for.inc:                                          ; preds = %if.end24, %if.then22, %if.then15, %if.then
  %31 = load i32, i32* %i, align 4, !dbg !7195
  %inc = add nsw i32 %31, 1, !dbg !7195
  store i32 %inc, i32* %i, align 4, !dbg !7195
  br label %for.cond, !dbg !7196, !llvm.loop !7197

for.end:                                          ; preds = %for.cond
  ret void, !dbg !7199
}

declare dso_local %struct.cgraph_node* @cgraph_node(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @print_edge_addition_message(%struct._IO_FILE* %f, %struct.ipa_param_call_note* %nt, %struct.ipa_jump_func* %jfunc, %struct.cgraph_node* %node) #0 !dbg !7200 {
entry:
  %f.addr = alloca %struct._IO_FILE*, align 8
  %nt.addr = alloca %struct.ipa_param_call_note*, align 8
  %jfunc.addr = alloca %struct.ipa_jump_func*, align 8
  %node.addr = alloca %struct.cgraph_node*, align 8
  store %struct._IO_FILE* %f, %struct._IO_FILE** %f.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %f.addr, metadata !7203, metadata !DIExpression()), !dbg !7204
  store %struct.ipa_param_call_note* %nt, %struct.ipa_param_call_note** %nt.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ipa_param_call_note** %nt.addr, metadata !7205, metadata !DIExpression()), !dbg !7206
  store %struct.ipa_jump_func* %jfunc, %struct.ipa_jump_func** %jfunc.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ipa_jump_func** %jfunc.addr, metadata !7207, metadata !DIExpression()), !dbg !7208
  store %struct.cgraph_node* %node, %struct.cgraph_node** %node.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %node.addr, metadata !7209, metadata !DIExpression()), !dbg !7210
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** %f.addr, align 8, !dbg !7211
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %0, i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.37, i64 0, i64 0)), !dbg !7212
  %1 = load %struct.ipa_jump_func*, %struct.ipa_jump_func** %jfunc.addr, align 8, !dbg !7213
  %type = getelementptr inbounds %struct.ipa_jump_func, %struct.ipa_jump_func* %1, i32 0, i32 0, !dbg !7215
  %2 = load i32, i32* %type, align 8, !dbg !7215
  %cmp = icmp eq i32 %2, 2, !dbg !7216
  br i1 %cmp, label %if.then, label %if.else, !dbg !7217

if.then:                                          ; preds = %entry
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** %f.addr, align 8, !dbg !7218
  %4 = load %struct.ipa_jump_func*, %struct.ipa_jump_func** %jfunc.addr, align 8, !dbg !7220
  %value = getelementptr inbounds %struct.ipa_jump_func, %struct.ipa_jump_func* %4, i32 0, i32 1, !dbg !7221
  %member_cst = bitcast %union.jump_func_value* %value to %struct.ipa_member_ptr_cst*, !dbg !7222
  %pfn = getelementptr inbounds %struct.ipa_member_ptr_cst, %struct.ipa_member_ptr_cst* %member_cst, i32 0, i32 0, !dbg !7223
  %5 = load %union.tree_node*, %union.tree_node** %pfn, align 8, !dbg !7223
  call void @print_node_brief(%struct._IO_FILE* %3, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.38, i64 0, i64 0), %union.tree_node* %5, i32 0), !dbg !7224
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** %f.addr, align 8, !dbg !7225
  %7 = load %struct.ipa_jump_func*, %struct.ipa_jump_func** %jfunc.addr, align 8, !dbg !7226
  %value1 = getelementptr inbounds %struct.ipa_jump_func, %struct.ipa_jump_func* %7, i32 0, i32 1, !dbg !7227
  %member_cst2 = bitcast %union.jump_func_value* %value1 to %struct.ipa_member_ptr_cst*, !dbg !7228
  %delta = getelementptr inbounds %struct.ipa_member_ptr_cst, %struct.ipa_member_ptr_cst* %member_cst2, i32 0, i32 1, !dbg !7229
  %8 = load %union.tree_node*, %union.tree_node** %delta, align 8, !dbg !7229
  call void @print_node_brief(%struct._IO_FILE* %6, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.10, i64 0, i64 0), %union.tree_node* %8, i32 0), !dbg !7230
  br label %if.end, !dbg !7231

if.else:                                          ; preds = %entry
  %9 = load %struct._IO_FILE*, %struct._IO_FILE** %f.addr, align 8, !dbg !7232
  %10 = load %struct.ipa_jump_func*, %struct.ipa_jump_func** %jfunc.addr, align 8, !dbg !7233
  %value3 = getelementptr inbounds %struct.ipa_jump_func, %struct.ipa_jump_func* %10, i32 0, i32 1, !dbg !7234
  %constant = bitcast %union.jump_func_value* %value3 to %union.tree_node**, !dbg !7235
  %11 = load %union.tree_node*, %union.tree_node** %constant, align 8, !dbg !7235
  call void @print_node_brief(%struct._IO_FILE* %9, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.38, i64 0, i64 0), %union.tree_node* %11, i32 0), !dbg !7236
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %12 = load %struct._IO_FILE*, %struct._IO_FILE** %f.addr, align 8, !dbg !7237
  %13 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !7238
  %call4 = call i8* @cgraph_node_name(%struct.cgraph_node* %13), !dbg !7239
  %call5 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %12, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.39, i64 0, i64 0), i8* %call4), !dbg !7240
  %14 = load %struct._IO_FILE*, %struct._IO_FILE** %f.addr, align 8, !dbg !7241
  %15 = load %struct.ipa_param_call_note*, %struct.ipa_param_call_note** %nt.addr, align 8, !dbg !7242
  %stmt = getelementptr inbounds %struct.ipa_param_call_note, %struct.ipa_param_call_note* %15, i32 0, i32 2, !dbg !7243
  %16 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !7243
  call void @print_gimple_stmt(%struct._IO_FILE* %14, %union.gimple_statement_d* %16, i32 2, i32 2), !dbg !7244
  ret void, !dbg !7245
}

declare dso_local %struct.cgraph_edge* @cgraph_create_edge(%struct.cgraph_node*, %struct.cgraph_node*, %union.gimple_statement_d*, i64, i32, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.cgraph_edge** @VEC_cgraph_edge_p_heap_safe_push(%struct.VEC_cgraph_edge_p_heap** %vec_, %struct.cgraph_edge* %obj_) #0 !dbg !7246 {
entry:
  %vec_.addr = alloca %struct.VEC_cgraph_edge_p_heap**, align 8
  %obj_.addr = alloca %struct.cgraph_edge*, align 8
  store %struct.VEC_cgraph_edge_p_heap** %vec_, %struct.VEC_cgraph_edge_p_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_cgraph_edge_p_heap*** %vec_.addr, metadata !7250, metadata !DIExpression()), !dbg !7251
  store %struct.cgraph_edge* %obj_, %struct.cgraph_edge** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cgraph_edge** %obj_.addr, metadata !7252, metadata !DIExpression()), !dbg !7251
  %0 = load %struct.VEC_cgraph_edge_p_heap**, %struct.VEC_cgraph_edge_p_heap*** %vec_.addr, align 8, !dbg !7251
  %call = call i32 @VEC_cgraph_edge_p_heap_reserve(%struct.VEC_cgraph_edge_p_heap** %0, i32 1), !dbg !7251
  %1 = load %struct.VEC_cgraph_edge_p_heap**, %struct.VEC_cgraph_edge_p_heap*** %vec_.addr, align 8, !dbg !7251
  %2 = load %struct.VEC_cgraph_edge_p_heap*, %struct.VEC_cgraph_edge_p_heap** %1, align 8, !dbg !7251
  %tobool = icmp ne %struct.VEC_cgraph_edge_p_heap* %2, null, !dbg !7251
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7251

cond.true:                                        ; preds = %entry
  %3 = load %struct.VEC_cgraph_edge_p_heap**, %struct.VEC_cgraph_edge_p_heap*** %vec_.addr, align 8, !dbg !7251
  %4 = load %struct.VEC_cgraph_edge_p_heap*, %struct.VEC_cgraph_edge_p_heap** %3, align 8, !dbg !7251
  %base = getelementptr inbounds %struct.VEC_cgraph_edge_p_heap, %struct.VEC_cgraph_edge_p_heap* %4, i32 0, i32 0, !dbg !7251
  br label %cond.end, !dbg !7251

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7251

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_cgraph_edge_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !7251
  %5 = load %struct.cgraph_edge*, %struct.cgraph_edge** %obj_.addr, align 8, !dbg !7251
  %call1 = call %struct.cgraph_edge** @VEC_cgraph_edge_p_base_quick_push(%struct.VEC_cgraph_edge_p_base* %cond, %struct.cgraph_edge* %5), !dbg !7251
  ret %struct.cgraph_edge** %call1, !dbg !7251
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_cgraph_edge_p_heap_reserve(%struct.VEC_cgraph_edge_p_heap** %vec_, i32 %alloc_) #0 !dbg !7253 {
entry:
  %vec_.addr = alloca %struct.VEC_cgraph_edge_p_heap**, align 8
  %alloc_.addr = alloca i32, align 4
  %extend = alloca i32, align 4
  store %struct.VEC_cgraph_edge_p_heap** %vec_, %struct.VEC_cgraph_edge_p_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_cgraph_edge_p_heap*** %vec_.addr, metadata !7256, metadata !DIExpression()), !dbg !7257
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !7258, metadata !DIExpression()), !dbg !7257
  call void @llvm.dbg.declare(metadata i32* %extend, metadata !7259, metadata !DIExpression()), !dbg !7257
  %0 = load %struct.VEC_cgraph_edge_p_heap**, %struct.VEC_cgraph_edge_p_heap*** %vec_.addr, align 8, !dbg !7257
  %1 = load %struct.VEC_cgraph_edge_p_heap*, %struct.VEC_cgraph_edge_p_heap** %0, align 8, !dbg !7257
  %tobool = icmp ne %struct.VEC_cgraph_edge_p_heap* %1, null, !dbg !7257
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7257

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_cgraph_edge_p_heap**, %struct.VEC_cgraph_edge_p_heap*** %vec_.addr, align 8, !dbg !7257
  %3 = load %struct.VEC_cgraph_edge_p_heap*, %struct.VEC_cgraph_edge_p_heap** %2, align 8, !dbg !7257
  %base = getelementptr inbounds %struct.VEC_cgraph_edge_p_heap, %struct.VEC_cgraph_edge_p_heap* %3, i32 0, i32 0, !dbg !7257
  br label %cond.end, !dbg !7257

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7257

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_cgraph_edge_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !7257
  %4 = load i32, i32* %alloc_.addr, align 4, !dbg !7257
  %call = call i32 @VEC_cgraph_edge_p_base_space(%struct.VEC_cgraph_edge_p_base* %cond, i32 %4), !dbg !7257
  %tobool1 = icmp ne i32 %call, 0, !dbg !7257
  %lnot = xor i1 %tobool1, true, !dbg !7257
  %lnot.ext = zext i1 %lnot to i32, !dbg !7257
  store i32 %lnot.ext, i32* %extend, align 4, !dbg !7257
  %5 = load i32, i32* %extend, align 4, !dbg !7260
  %tobool2 = icmp ne i32 %5, 0, !dbg !7260
  br i1 %tobool2, label %if.then, label %if.end, !dbg !7257

if.then:                                          ; preds = %cond.end
  %6 = load %struct.VEC_cgraph_edge_p_heap**, %struct.VEC_cgraph_edge_p_heap*** %vec_.addr, align 8, !dbg !7260
  %7 = load %struct.VEC_cgraph_edge_p_heap*, %struct.VEC_cgraph_edge_p_heap** %6, align 8, !dbg !7260
  %8 = bitcast %struct.VEC_cgraph_edge_p_heap* %7 to i8*, !dbg !7260
  %9 = load i32, i32* %alloc_.addr, align 4, !dbg !7260
  %call3 = call i8* @vec_heap_p_reserve(i8* %8, i32 %9), !dbg !7260
  %10 = bitcast i8* %call3 to %struct.VEC_cgraph_edge_p_heap*, !dbg !7260
  %11 = load %struct.VEC_cgraph_edge_p_heap**, %struct.VEC_cgraph_edge_p_heap*** %vec_.addr, align 8, !dbg !7260
  store %struct.VEC_cgraph_edge_p_heap* %10, %struct.VEC_cgraph_edge_p_heap** %11, align 8, !dbg !7260
  br label %if.end, !dbg !7260

if.end:                                           ; preds = %if.then, %cond.end
  %12 = load i32, i32* %extend, align 4, !dbg !7257
  ret i32 %12, !dbg !7257
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.cgraph_edge** @VEC_cgraph_edge_p_base_quick_push(%struct.VEC_cgraph_edge_p_base* %vec_, %struct.cgraph_edge* %obj_) #0 !dbg !7262 {
entry:
  %vec_.addr = alloca %struct.VEC_cgraph_edge_p_base*, align 8
  %obj_.addr = alloca %struct.cgraph_edge*, align 8
  %slot_ = alloca %struct.cgraph_edge**, align 8
  store %struct.VEC_cgraph_edge_p_base* %vec_, %struct.VEC_cgraph_edge_p_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_cgraph_edge_p_base** %vec_.addr, metadata !7266, metadata !DIExpression()), !dbg !7267
  store %struct.cgraph_edge* %obj_, %struct.cgraph_edge** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cgraph_edge** %obj_.addr, metadata !7268, metadata !DIExpression()), !dbg !7267
  call void @llvm.dbg.declare(metadata %struct.cgraph_edge*** %slot_, metadata !7269, metadata !DIExpression()), !dbg !7267
  %0 = load %struct.VEC_cgraph_edge_p_base*, %struct.VEC_cgraph_edge_p_base** %vec_.addr, align 8, !dbg !7267
  %num = getelementptr inbounds %struct.VEC_cgraph_edge_p_base, %struct.VEC_cgraph_edge_p_base* %0, i32 0, i32 0, !dbg !7267
  %1 = load i32, i32* %num, align 8, !dbg !7267
  %2 = load %struct.VEC_cgraph_edge_p_base*, %struct.VEC_cgraph_edge_p_base** %vec_.addr, align 8, !dbg !7267
  %alloc = getelementptr inbounds %struct.VEC_cgraph_edge_p_base, %struct.VEC_cgraph_edge_p_base* %2, i32 0, i32 1, !dbg !7267
  %3 = load i32, i32* %alloc, align 4, !dbg !7267
  %cmp = icmp ult i32 %1, %3, !dbg !7267
  %conv = zext i1 %cmp to i32, !dbg !7267
  %4 = load %struct.VEC_cgraph_edge_p_base*, %struct.VEC_cgraph_edge_p_base** %vec_.addr, align 8, !dbg !7267
  %vec = getelementptr inbounds %struct.VEC_cgraph_edge_p_base, %struct.VEC_cgraph_edge_p_base* %4, i32 0, i32 2, !dbg !7267
  %5 = load %struct.VEC_cgraph_edge_p_base*, %struct.VEC_cgraph_edge_p_base** %vec_.addr, align 8, !dbg !7267
  %num1 = getelementptr inbounds %struct.VEC_cgraph_edge_p_base, %struct.VEC_cgraph_edge_p_base* %5, i32 0, i32 0, !dbg !7267
  %6 = load i32, i32* %num1, align 8, !dbg !7267
  %inc = add i32 %6, 1, !dbg !7267
  store i32 %inc, i32* %num1, align 8, !dbg !7267
  %idxprom = zext i32 %6 to i64, !dbg !7267
  %arrayidx = getelementptr inbounds [1 x %struct.cgraph_edge*], [1 x %struct.cgraph_edge*]* %vec, i64 0, i64 %idxprom, !dbg !7267
  store %struct.cgraph_edge** %arrayidx, %struct.cgraph_edge*** %slot_, align 8, !dbg !7267
  %7 = load %struct.cgraph_edge*, %struct.cgraph_edge** %obj_.addr, align 8, !dbg !7267
  %8 = load %struct.cgraph_edge**, %struct.cgraph_edge*** %slot_, align 8, !dbg !7267
  store %struct.cgraph_edge* %7, %struct.cgraph_edge** %8, align 8, !dbg !7267
  %9 = load %struct.cgraph_edge**, %struct.cgraph_edge*** %slot_, align 8, !dbg !7267
  ret %struct.cgraph_edge** %9, !dbg !7267
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_cgraph_edge_p_base_space(%struct.VEC_cgraph_edge_p_base* %vec_, i32 %alloc_) #0 !dbg !7270 {
entry:
  %vec_.addr = alloca %struct.VEC_cgraph_edge_p_base*, align 8
  %alloc_.addr = alloca i32, align 4
  store %struct.VEC_cgraph_edge_p_base* %vec_, %struct.VEC_cgraph_edge_p_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_cgraph_edge_p_base** %vec_.addr, metadata !7273, metadata !DIExpression()), !dbg !7274
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !7275, metadata !DIExpression()), !dbg !7274
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !7274
  %cmp = icmp sge i32 %0, 0, !dbg !7274
  %conv = zext i1 %cmp to i32, !dbg !7274
  %1 = load %struct.VEC_cgraph_edge_p_base*, %struct.VEC_cgraph_edge_p_base** %vec_.addr, align 8, !dbg !7274
  %tobool = icmp ne %struct.VEC_cgraph_edge_p_base* %1, null, !dbg !7274
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7274

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_cgraph_edge_p_base*, %struct.VEC_cgraph_edge_p_base** %vec_.addr, align 8, !dbg !7274
  %alloc = getelementptr inbounds %struct.VEC_cgraph_edge_p_base, %struct.VEC_cgraph_edge_p_base* %2, i32 0, i32 1, !dbg !7274
  %3 = load i32, i32* %alloc, align 4, !dbg !7274
  %4 = load %struct.VEC_cgraph_edge_p_base*, %struct.VEC_cgraph_edge_p_base** %vec_.addr, align 8, !dbg !7274
  %num = getelementptr inbounds %struct.VEC_cgraph_edge_p_base, %struct.VEC_cgraph_edge_p_base* %4, i32 0, i32 0, !dbg !7274
  %5 = load i32, i32* %num, align 8, !dbg !7274
  %sub = sub i32 %3, %5, !dbg !7274
  %6 = load i32, i32* %alloc_.addr, align 4, !dbg !7274
  %cmp1 = icmp uge i32 %sub, %6, !dbg !7274
  %conv2 = zext i1 %cmp1 to i32, !dbg !7274
  br label %cond.end, !dbg !7274

cond.false:                                       ; preds = %entry
  %7 = load i32, i32* %alloc_.addr, align 4, !dbg !7274
  %tobool3 = icmp ne i32 %7, 0, !dbg !7274
  %lnot = xor i1 %tobool3, true, !dbg !7274
  %lnot.ext = zext i1 %lnot to i32, !dbg !7274
  br label %cond.end, !dbg !7274

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv2, %cond.true ], [ %lnot.ext, %cond.false ], !dbg !7274
  ret i32 %cond, !dbg !7274
}

declare dso_local i8* @vec_heap_p_reserve(i8*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal i8* @duplicate_ggc_array(i8* %src, i64 %n) #0 !dbg !7276 {
entry:
  %retval = alloca i8*, align 8
  %src.addr = alloca i8*, align 8
  %n.addr = alloca i64, align 8
  %p = alloca i8*, align 8
  store i8* %src, i8** %src.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %src.addr, metadata !7279, metadata !DIExpression()), !dbg !7280
  store i64 %n, i64* %n.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %n.addr, metadata !7281, metadata !DIExpression()), !dbg !7282
  call void @llvm.dbg.declare(metadata i8** %p, metadata !7283, metadata !DIExpression()), !dbg !7284
  %0 = load i8*, i8** %src.addr, align 8, !dbg !7285
  %tobool = icmp ne i8* %0, null, !dbg !7285
  br i1 %tobool, label %if.end, label %if.then, !dbg !7287

if.then:                                          ; preds = %entry
  store i8* null, i8** %retval, align 8, !dbg !7288
  br label %return, !dbg !7288

if.end:                                           ; preds = %entry
  %1 = load i64, i64* %n.addr, align 8, !dbg !7289
  %call = call i8* @ggc_alloc_stat(i64 %1), !dbg !7289
  store i8* %call, i8** %p, align 8, !dbg !7290
  %2 = load i8*, i8** %p, align 8, !dbg !7291
  %3 = load i8*, i8** %src.addr, align 8, !dbg !7292
  %4 = load i64, i64* %n.addr, align 8, !dbg !7293
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %2, i8* align 1 %3, i64 %4, i1 false), !dbg !7294
  %5 = load i8*, i8** %p, align 8, !dbg !7295
  store i8* %5, i8** %retval, align 8, !dbg !7296
  br label %return, !dbg !7296

return:                                           ; preds = %if.end, %if.then
  %6 = load i8*, i8** %retval, align 8, !dbg !7297
  ret i8* %6, !dbg !7297
}

declare dso_local i8* @ggc_alloc_stat(i64) #2

; Function Attrs: noinline nounwind uwtable
define internal i8* @duplicate_array(i8* %src, i64 %n) #0 !dbg !7298 {
entry:
  %retval = alloca i8*, align 8
  %src.addr = alloca i8*, align 8
  %n.addr = alloca i64, align 8
  %p = alloca i8*, align 8
  store i8* %src, i8** %src.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %src.addr, metadata !7299, metadata !DIExpression()), !dbg !7300
  store i64 %n, i64* %n.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %n.addr, metadata !7301, metadata !DIExpression()), !dbg !7302
  call void @llvm.dbg.declare(metadata i8** %p, metadata !7303, metadata !DIExpression()), !dbg !7304
  %0 = load i8*, i8** %src.addr, align 8, !dbg !7305
  %tobool = icmp ne i8* %0, null, !dbg !7305
  br i1 %tobool, label %if.end, label %if.then, !dbg !7307

if.then:                                          ; preds = %entry
  store i8* null, i8** %retval, align 8, !dbg !7308
  br label %return, !dbg !7308

if.end:                                           ; preds = %entry
  %1 = load i64, i64* %n.addr, align 8, !dbg !7309
  %call = call i8* @xmalloc(i64 %1), !dbg !7310
  store i8* %call, i8** %p, align 8, !dbg !7311
  %2 = load i8*, i8** %p, align 8, !dbg !7312
  %3 = load i8*, i8** %src.addr, align 8, !dbg !7313
  %4 = load i64, i64* %n.addr, align 8, !dbg !7314
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %2, i8* align 1 %3, i64 %4, i1 false), !dbg !7315
  %5 = load i8*, i8** %p, align 8, !dbg !7316
  store i8* %5, i8** %retval, align 8, !dbg !7317
  br label %return, !dbg !7317

return:                                           ; preds = %if.end, %if.then
  %6 = load i8*, i8** %retval, align 8, !dbg !7318
  ret i8* %6, !dbg !7318
}

declare dso_local i8* @xmalloc(i64) #2

declare dso_local void @cgraph_remove_edge_removal_hook(%struct.cgraph_edge_hook_list*) #2

declare dso_local void @cgraph_remove_node_removal_hook(%struct.cgraph_node_hook_list*) #2

declare dso_local void @cgraph_remove_edge_duplication_hook(%struct.cgraph_2edge_hook_list*) #2

declare dso_local void @cgraph_remove_node_duplication_hook(%struct.cgraph_2node_hook_list*) #2

declare dso_local i8* @vec_heap_p_reserve_exact(i8*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_set_op(%union.gimple_statement_d* %gs, i32 %i, %union.tree_node* %op) #0 !dbg !7319 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %i.addr = alloca i32, align 4
  %op.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !7322, metadata !DIExpression()), !dbg !7323
  store i32 %i, i32* %i.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %i.addr, metadata !7324, metadata !DIExpression()), !dbg !7325
  store %union.tree_node* %op, %union.tree_node** %op.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %op.addr, metadata !7326, metadata !DIExpression()), !dbg !7327
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7328
  %call = call zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %0), !dbg !7328
  %conv = zext i8 %call to i32, !dbg !7328
  %tobool = icmp ne i32 %conv, 0, !dbg !7328
  br i1 %tobool, label %land.lhs.true, label %cond.true, !dbg !7328

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %i.addr, align 4, !dbg !7328
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7328
  %call1 = call i32 @gimple_num_ops(%union.gimple_statement_d* %2), !dbg !7328
  %cmp = icmp ult i32 %1, %call1, !dbg !7328
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !7328

cond.true:                                        ; preds = %land.lhs.true, %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.35, i64 0, i64 0), i32 1665, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !7328
  br label %cond.end, !dbg !7328

cond.false:                                       ; preds = %land.lhs.true
  br label %cond.end, !dbg !7328

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !7328
  %3 = load %union.tree_node*, %union.tree_node** %op.addr, align 8, !dbg !7329
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7330
  %call3 = call %union.tree_node** @gimple_ops(%union.gimple_statement_d* %4), !dbg !7331
  %5 = load i32, i32* %i.addr, align 4, !dbg !7332
  %idxprom = zext i32 %5 to i64, !dbg !7331
  %arrayidx = getelementptr inbounds %union.tree_node*, %union.tree_node** %call3, i64 %idxprom, !dbg !7331
  store %union.tree_node* %3, %union.tree_node** %arrayidx, align 8, !dbg !7333
  ret void, !dbg !7334
}

declare dso_local i8* @vec_heap_o_reserve_exact(i8*, i32, i64, i64) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_cgraph_node_ptr_base_length(%struct.VEC_cgraph_node_ptr_base* %vec_) #0 !dbg !7335 {
entry:
  %vec_.addr = alloca %struct.VEC_cgraph_node_ptr_base*, align 8
  store %struct.VEC_cgraph_node_ptr_base* %vec_, %struct.VEC_cgraph_node_ptr_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_cgraph_node_ptr_base** %vec_.addr, metadata !7340, metadata !DIExpression()), !dbg !7341
  %0 = load %struct.VEC_cgraph_node_ptr_base*, %struct.VEC_cgraph_node_ptr_base** %vec_.addr, align 8, !dbg !7341
  %tobool = icmp ne %struct.VEC_cgraph_node_ptr_base* %0, null, !dbg !7341
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7341

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_cgraph_node_ptr_base*, %struct.VEC_cgraph_node_ptr_base** %vec_.addr, align 8, !dbg !7341
  %num = getelementptr inbounds %struct.VEC_cgraph_node_ptr_base, %struct.VEC_cgraph_node_ptr_base* %1, i32 0, i32 0, !dbg !7341
  %2 = load i32, i32* %num, align 8, !dbg !7341
  br label %cond.end, !dbg !7341

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7341

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !7341
  ret i32 %cond, !dbg !7341
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.cgraph_node* @VEC_cgraph_node_ptr_base_index(%struct.VEC_cgraph_node_ptr_base* %vec_, i32 %ix_) #0 !dbg !7342 {
entry:
  %vec_.addr = alloca %struct.VEC_cgraph_node_ptr_base*, align 8
  %ix_.addr = alloca i32, align 4
  store %struct.VEC_cgraph_node_ptr_base* %vec_, %struct.VEC_cgraph_node_ptr_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_cgraph_node_ptr_base** %vec_.addr, metadata !7345, metadata !DIExpression()), !dbg !7346
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !7347, metadata !DIExpression()), !dbg !7346
  %0 = load %struct.VEC_cgraph_node_ptr_base*, %struct.VEC_cgraph_node_ptr_base** %vec_.addr, align 8, !dbg !7346
  %tobool = icmp ne %struct.VEC_cgraph_node_ptr_base* %0, null, !dbg !7346
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !7346

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !7346
  %2 = load %struct.VEC_cgraph_node_ptr_base*, %struct.VEC_cgraph_node_ptr_base** %vec_.addr, align 8, !dbg !7346
  %num = getelementptr inbounds %struct.VEC_cgraph_node_ptr_base, %struct.VEC_cgraph_node_ptr_base* %2, i32 0, i32 0, !dbg !7346
  %3 = load i32, i32* %num, align 8, !dbg !7346
  %cmp = icmp ult i32 %1, %3, !dbg !7346
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !7348
  %land.ext = zext i1 %4 to i32, !dbg !7346
  %5 = load %struct.VEC_cgraph_node_ptr_base*, %struct.VEC_cgraph_node_ptr_base** %vec_.addr, align 8, !dbg !7346
  %vec = getelementptr inbounds %struct.VEC_cgraph_node_ptr_base, %struct.VEC_cgraph_node_ptr_base* %5, i32 0, i32 2, !dbg !7346
  %6 = load i32, i32* %ix_.addr, align 4, !dbg !7346
  %idxprom = zext i32 %6 to i64, !dbg !7346
  %arrayidx = getelementptr inbounds [1 x %struct.cgraph_node*], [1 x %struct.cgraph_node*]* %vec, i64 0, i64 %idxprom, !dbg !7346
  %7 = load %struct.cgraph_node*, %struct.cgraph_node** %arrayidx, align 8, !dbg !7346
  ret %struct.cgraph_node* %7, !dbg !7346
}

declare dso_local i32 @lto_cgraph_encoder_encode(%struct.lto_cgraph_encoder_d*, %struct.cgraph_node*) #2

declare dso_local %struct.bitpack_d* @bitpack_create() #2

declare dso_local void @bp_pack_value(%struct.bitpack_d*, i64, i32) #2

declare dso_local void @lto_output_bitpack(%struct.lto_output_stream*, %struct.bitpack_d*) #2

declare dso_local void @bitpack_delete(%struct.bitpack_d*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @ipa_write_jump_function(%struct.output_block* %ob, %struct.ipa_jump_func* %jump_func) #0 !dbg !7349 {
entry:
  %ob.addr = alloca %struct.output_block*, align 8
  %jump_func.addr = alloca %struct.ipa_jump_func*, align 8
  store %struct.output_block* %ob, %struct.output_block** %ob.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.output_block** %ob.addr, metadata !7352, metadata !DIExpression()), !dbg !7353
  store %struct.ipa_jump_func* %jump_func, %struct.ipa_jump_func** %jump_func.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ipa_jump_func** %jump_func.addr, metadata !7354, metadata !DIExpression()), !dbg !7355
  %0 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !7356
  %main_stream = getelementptr inbounds %struct.output_block, %struct.output_block* %0, i32 0, i32 2, !dbg !7357
  %1 = load %struct.lto_output_stream*, %struct.lto_output_stream** %main_stream, align 8, !dbg !7357
  %2 = load %struct.ipa_jump_func*, %struct.ipa_jump_func** %jump_func.addr, align 8, !dbg !7358
  %type = getelementptr inbounds %struct.ipa_jump_func, %struct.ipa_jump_func* %2, i32 0, i32 0, !dbg !7359
  %3 = load i32, i32* %type, align 8, !dbg !7359
  %conv = zext i32 %3 to i64, !dbg !7358
  call void @lto_output_uleb128_stream(%struct.lto_output_stream* %1, i64 %conv), !dbg !7360
  %4 = load %struct.ipa_jump_func*, %struct.ipa_jump_func** %jump_func.addr, align 8, !dbg !7361
  %type1 = getelementptr inbounds %struct.ipa_jump_func, %struct.ipa_jump_func* %4, i32 0, i32 0, !dbg !7362
  %5 = load i32, i32* %type1, align 8, !dbg !7362
  switch i32 %5, label %sw.epilog [
    i32 0, label %sw.bb
    i32 1, label %sw.bb2
    i32 3, label %sw.bb3
    i32 4, label %sw.bb13
    i32 2, label %sw.bb24
  ], !dbg !7363

sw.bb:                                            ; preds = %entry
  br label %sw.epilog, !dbg !7364

sw.bb2:                                           ; preds = %entry
  %6 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !7366
  %7 = load %struct.ipa_jump_func*, %struct.ipa_jump_func** %jump_func.addr, align 8, !dbg !7367
  %value = getelementptr inbounds %struct.ipa_jump_func, %struct.ipa_jump_func* %7, i32 0, i32 1, !dbg !7368
  %constant = bitcast %union.jump_func_value* %value to %union.tree_node**, !dbg !7369
  %8 = load %union.tree_node*, %union.tree_node** %constant, align 8, !dbg !7369
  call void @lto_output_tree(%struct.output_block* %6, %union.tree_node* %8, i8 zeroext 1), !dbg !7370
  br label %sw.epilog, !dbg !7371

sw.bb3:                                           ; preds = %entry
  %9 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !7372
  %10 = load %struct.ipa_jump_func*, %struct.ipa_jump_func** %jump_func.addr, align 8, !dbg !7373
  %value4 = getelementptr inbounds %struct.ipa_jump_func, %struct.ipa_jump_func* %10, i32 0, i32 1, !dbg !7374
  %pass_through = bitcast %union.jump_func_value* %value4 to %struct.ipa_pass_through_data*, !dbg !7375
  %operand = getelementptr inbounds %struct.ipa_pass_through_data, %struct.ipa_pass_through_data* %pass_through, i32 0, i32 0, !dbg !7376
  %11 = load %union.tree_node*, %union.tree_node** %operand, align 8, !dbg !7376
  call void @lto_output_tree(%struct.output_block* %9, %union.tree_node* %11, i8 zeroext 1), !dbg !7377
  %12 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !7378
  %main_stream5 = getelementptr inbounds %struct.output_block, %struct.output_block* %12, i32 0, i32 2, !dbg !7379
  %13 = load %struct.lto_output_stream*, %struct.lto_output_stream** %main_stream5, align 8, !dbg !7379
  %14 = load %struct.ipa_jump_func*, %struct.ipa_jump_func** %jump_func.addr, align 8, !dbg !7380
  %value6 = getelementptr inbounds %struct.ipa_jump_func, %struct.ipa_jump_func* %14, i32 0, i32 1, !dbg !7381
  %pass_through7 = bitcast %union.jump_func_value* %value6 to %struct.ipa_pass_through_data*, !dbg !7382
  %formal_id = getelementptr inbounds %struct.ipa_pass_through_data, %struct.ipa_pass_through_data* %pass_through7, i32 0, i32 1, !dbg !7383
  %15 = load i32, i32* %formal_id, align 8, !dbg !7383
  %conv8 = sext i32 %15 to i64, !dbg !7380
  call void @lto_output_uleb128_stream(%struct.lto_output_stream* %13, i64 %conv8), !dbg !7384
  %16 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !7385
  %main_stream9 = getelementptr inbounds %struct.output_block, %struct.output_block* %16, i32 0, i32 2, !dbg !7386
  %17 = load %struct.lto_output_stream*, %struct.lto_output_stream** %main_stream9, align 8, !dbg !7386
  %18 = load %struct.ipa_jump_func*, %struct.ipa_jump_func** %jump_func.addr, align 8, !dbg !7387
  %value10 = getelementptr inbounds %struct.ipa_jump_func, %struct.ipa_jump_func* %18, i32 0, i32 1, !dbg !7388
  %pass_through11 = bitcast %union.jump_func_value* %value10 to %struct.ipa_pass_through_data*, !dbg !7389
  %operation = getelementptr inbounds %struct.ipa_pass_through_data, %struct.ipa_pass_through_data* %pass_through11, i32 0, i32 2, !dbg !7390
  %19 = load i32, i32* %operation, align 4, !dbg !7390
  %conv12 = zext i32 %19 to i64, !dbg !7387
  call void @lto_output_uleb128_stream(%struct.lto_output_stream* %17, i64 %conv12), !dbg !7391
  br label %sw.epilog, !dbg !7392

sw.bb13:                                          ; preds = %entry
  %20 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !7393
  %main_stream14 = getelementptr inbounds %struct.output_block, %struct.output_block* %20, i32 0, i32 2, !dbg !7394
  %21 = load %struct.lto_output_stream*, %struct.lto_output_stream** %main_stream14, align 8, !dbg !7394
  %22 = load %struct.ipa_jump_func*, %struct.ipa_jump_func** %jump_func.addr, align 8, !dbg !7395
  %value15 = getelementptr inbounds %struct.ipa_jump_func, %struct.ipa_jump_func* %22, i32 0, i32 1, !dbg !7396
  %ancestor = bitcast %union.jump_func_value* %value15 to %struct.ipa_ancestor_jf_data*, !dbg !7397
  %offset = getelementptr inbounds %struct.ipa_ancestor_jf_data, %struct.ipa_ancestor_jf_data* %ancestor, i32 0, i32 0, !dbg !7398
  %23 = load i64, i64* %offset, align 8, !dbg !7398
  call void @lto_output_uleb128_stream(%struct.lto_output_stream* %21, i64 %23), !dbg !7399
  %24 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !7400
  %25 = load %struct.ipa_jump_func*, %struct.ipa_jump_func** %jump_func.addr, align 8, !dbg !7401
  %value16 = getelementptr inbounds %struct.ipa_jump_func, %struct.ipa_jump_func* %25, i32 0, i32 1, !dbg !7402
  %ancestor17 = bitcast %union.jump_func_value* %value16 to %struct.ipa_ancestor_jf_data*, !dbg !7403
  %type18 = getelementptr inbounds %struct.ipa_ancestor_jf_data, %struct.ipa_ancestor_jf_data* %ancestor17, i32 0, i32 1, !dbg !7404
  %26 = load %union.tree_node*, %union.tree_node** %type18, align 8, !dbg !7404
  call void @lto_output_tree(%struct.output_block* %24, %union.tree_node* %26, i8 zeroext 1), !dbg !7405
  %27 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !7406
  %main_stream19 = getelementptr inbounds %struct.output_block, %struct.output_block* %27, i32 0, i32 2, !dbg !7407
  %28 = load %struct.lto_output_stream*, %struct.lto_output_stream** %main_stream19, align 8, !dbg !7407
  %29 = load %struct.ipa_jump_func*, %struct.ipa_jump_func** %jump_func.addr, align 8, !dbg !7408
  %value20 = getelementptr inbounds %struct.ipa_jump_func, %struct.ipa_jump_func* %29, i32 0, i32 1, !dbg !7409
  %ancestor21 = bitcast %union.jump_func_value* %value20 to %struct.ipa_ancestor_jf_data*, !dbg !7410
  %formal_id22 = getelementptr inbounds %struct.ipa_ancestor_jf_data, %struct.ipa_ancestor_jf_data* %ancestor21, i32 0, i32 2, !dbg !7411
  %30 = load i32, i32* %formal_id22, align 8, !dbg !7411
  %conv23 = sext i32 %30 to i64, !dbg !7408
  call void @lto_output_uleb128_stream(%struct.lto_output_stream* %28, i64 %conv23), !dbg !7412
  br label %sw.epilog, !dbg !7413

sw.bb24:                                          ; preds = %entry
  %31 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !7414
  %32 = load %struct.ipa_jump_func*, %struct.ipa_jump_func** %jump_func.addr, align 8, !dbg !7415
  %value25 = getelementptr inbounds %struct.ipa_jump_func, %struct.ipa_jump_func* %32, i32 0, i32 1, !dbg !7416
  %member_cst = bitcast %union.jump_func_value* %value25 to %struct.ipa_member_ptr_cst*, !dbg !7417
  %pfn = getelementptr inbounds %struct.ipa_member_ptr_cst, %struct.ipa_member_ptr_cst* %member_cst, i32 0, i32 0, !dbg !7418
  %33 = load %union.tree_node*, %union.tree_node** %pfn, align 8, !dbg !7418
  call void @lto_output_tree(%struct.output_block* %31, %union.tree_node* %33, i8 zeroext 1), !dbg !7419
  %34 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !7420
  %35 = load %struct.ipa_jump_func*, %struct.ipa_jump_func** %jump_func.addr, align 8, !dbg !7421
  %value26 = getelementptr inbounds %struct.ipa_jump_func, %struct.ipa_jump_func* %35, i32 0, i32 1, !dbg !7422
  %member_cst27 = bitcast %union.jump_func_value* %value26 to %struct.ipa_member_ptr_cst*, !dbg !7423
  %delta = getelementptr inbounds %struct.ipa_member_ptr_cst, %struct.ipa_member_ptr_cst* %member_cst27, i32 0, i32 1, !dbg !7424
  %36 = load %union.tree_node*, %union.tree_node** %delta, align 8, !dbg !7424
  call void @lto_output_tree(%struct.output_block* %34, %union.tree_node* %36, i8 zeroext 0), !dbg !7425
  br label %sw.epilog, !dbg !7426

sw.epilog:                                        ; preds = %entry, %sw.bb24, %sw.bb13, %sw.bb3, %sw.bb2, %sw.bb
  ret void, !dbg !7427
}

; Function Attrs: noinline nounwind uwtable
define internal void @ipa_write_param_call_note(%struct.output_block* %ob, %struct.ipa_param_call_note* %note) #0 !dbg !7428 {
entry:
  %ob.addr = alloca %struct.output_block*, align 8
  %note.addr = alloca %struct.ipa_param_call_note*, align 8
  store %struct.output_block* %ob, %struct.output_block** %ob.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.output_block** %ob.addr, metadata !7431, metadata !DIExpression()), !dbg !7432
  store %struct.ipa_param_call_note* %note, %struct.ipa_param_call_note** %note.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ipa_param_call_note** %note.addr, metadata !7433, metadata !DIExpression()), !dbg !7434
  %0 = load %struct.ipa_param_call_note*, %struct.ipa_param_call_note** %note.addr, align 8, !dbg !7435
  %processed = getelementptr inbounds %struct.ipa_param_call_note, %struct.ipa_param_call_note* %0, i32 0, i32 7, !dbg !7435
  %1 = load i8, i8* %processed, align 2, !dbg !7435
  %tobool = icmp ne i8 %1, 0, !dbg !7435
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7435

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i32 1970, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !7435
  br label %cond.end, !dbg !7435

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7435

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !7435
  %2 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !7436
  %main_stream = getelementptr inbounds %struct.output_block, %struct.output_block* %2, i32 0, i32 2, !dbg !7437
  %3 = load %struct.lto_output_stream*, %struct.lto_output_stream** %main_stream, align 8, !dbg !7437
  %4 = load %struct.ipa_param_call_note*, %struct.ipa_param_call_note** %note.addr, align 8, !dbg !7438
  %stmt = getelementptr inbounds %struct.ipa_param_call_note, %struct.ipa_param_call_note* %4, i32 0, i32 2, !dbg !7439
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !7439
  %call = call i32 @gimple_uid(%union.gimple_statement_d* %5), !dbg !7440
  %conv = zext i32 %call to i64, !dbg !7440
  call void @lto_output_uleb128_stream(%struct.lto_output_stream* %3, i64 %conv), !dbg !7441
  %6 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !7442
  %main_stream1 = getelementptr inbounds %struct.output_block, %struct.output_block* %6, i32 0, i32 2, !dbg !7443
  %7 = load %struct.lto_output_stream*, %struct.lto_output_stream** %main_stream1, align 8, !dbg !7443
  %8 = load %struct.ipa_param_call_note*, %struct.ipa_param_call_note** %note.addr, align 8, !dbg !7444
  %formal_id = getelementptr inbounds %struct.ipa_param_call_note, %struct.ipa_param_call_note* %8, i32 0, i32 4, !dbg !7445
  %9 = load i32, i32* %formal_id, align 4, !dbg !7445
  %conv2 = sext i32 %9 to i64, !dbg !7444
  call void @lto_output_sleb128_stream(%struct.lto_output_stream* %7, i64 %conv2), !dbg !7446
  %10 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !7447
  %main_stream3 = getelementptr inbounds %struct.output_block, %struct.output_block* %10, i32 0, i32 2, !dbg !7448
  %11 = load %struct.lto_output_stream*, %struct.lto_output_stream** %main_stream3, align 8, !dbg !7448
  %12 = load %struct.ipa_param_call_note*, %struct.ipa_param_call_note** %note.addr, align 8, !dbg !7449
  %count = getelementptr inbounds %struct.ipa_param_call_note, %struct.ipa_param_call_note* %12, i32 0, i32 0, !dbg !7450
  %13 = load i64, i64* %count, align 8, !dbg !7450
  call void @lto_output_sleb128_stream(%struct.lto_output_stream* %11, i64 %13), !dbg !7451
  %14 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !7452
  %main_stream4 = getelementptr inbounds %struct.output_block, %struct.output_block* %14, i32 0, i32 2, !dbg !7453
  %15 = load %struct.lto_output_stream*, %struct.lto_output_stream** %main_stream4, align 8, !dbg !7453
  %16 = load %struct.ipa_param_call_note*, %struct.ipa_param_call_note** %note.addr, align 8, !dbg !7454
  %frequency = getelementptr inbounds %struct.ipa_param_call_note, %struct.ipa_param_call_note* %16, i32 0, i32 5, !dbg !7455
  %17 = load i32, i32* %frequency, align 8, !dbg !7455
  %conv5 = sext i32 %17 to i64, !dbg !7454
  call void @lto_output_sleb128_stream(%struct.lto_output_stream* %15, i64 %conv5), !dbg !7456
  %18 = load %struct.output_block*, %struct.output_block** %ob.addr, align 8, !dbg !7457
  %main_stream6 = getelementptr inbounds %struct.output_block, %struct.output_block* %18, i32 0, i32 2, !dbg !7458
  %19 = load %struct.lto_output_stream*, %struct.lto_output_stream** %main_stream6, align 8, !dbg !7458
  %20 = load %struct.ipa_param_call_note*, %struct.ipa_param_call_note** %note.addr, align 8, !dbg !7459
  %loop_nest = getelementptr inbounds %struct.ipa_param_call_note, %struct.ipa_param_call_note* %20, i32 0, i32 6, !dbg !7460
  %21 = load i16, i16* %loop_nest, align 4, !dbg !7460
  %conv7 = zext i16 %21 to i64, !dbg !7459
  call void @lto_output_sleb128_stream(%struct.lto_output_stream* %19, i64 %conv7), !dbg !7461
  ret void, !dbg !7462
}

declare dso_local void @lto_output_tree(%struct.output_block*, %union.tree_node*, i8 zeroext) #2

declare dso_local void @lto_output_sleb128_stream(%struct.lto_output_stream*, i64) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.VEC_ipa_node_params_t_heap* @VEC_ipa_node_params_t_heap_alloc(i32 %alloc_) #0 !dbg !7463 {
entry:
  %alloc_.addr = alloca i32, align 4
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !7466, metadata !DIExpression()), !dbg !7467
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !7467
  %call = call i8* @vec_heap_o_reserve_exact(i8* null, i32 %0, i64 8, i64 48), !dbg !7467
  %1 = bitcast i8* %call to %struct.VEC_ipa_node_params_t_heap*, !dbg !7467
  ret %struct.VEC_ipa_node_params_t_heap* %1, !dbg !7467
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_ipa_node_params_t_base_length(%struct.VEC_ipa_node_params_t_base* %vec_) #0 !dbg !7468 {
entry:
  %vec_.addr = alloca %struct.VEC_ipa_node_params_t_base*, align 8
  store %struct.VEC_ipa_node_params_t_base* %vec_, %struct.VEC_ipa_node_params_t_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_ipa_node_params_t_base** %vec_.addr, metadata !7473, metadata !DIExpression()), !dbg !7474
  %0 = load %struct.VEC_ipa_node_params_t_base*, %struct.VEC_ipa_node_params_t_base** %vec_.addr, align 8, !dbg !7474
  %tobool = icmp ne %struct.VEC_ipa_node_params_t_base* %0, null, !dbg !7474
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7474

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_ipa_node_params_t_base*, %struct.VEC_ipa_node_params_t_base** %vec_.addr, align 8, !dbg !7474
  %num = getelementptr inbounds %struct.VEC_ipa_node_params_t_base, %struct.VEC_ipa_node_params_t_base* %1, i32 0, i32 0, !dbg !7474
  %2 = load i32, i32* %num, align 8, !dbg !7474
  br label %cond.end, !dbg !7474

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7474

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !7474
  ret i32 %cond, !dbg !7474
}

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_ipa_node_params_t_heap_safe_grow_cleared(%struct.VEC_ipa_node_params_t_heap** %vec_, i32 %size_) #0 !dbg !7475 {
entry:
  %vec_.addr = alloca %struct.VEC_ipa_node_params_t_heap**, align 8
  %size_.addr = alloca i32, align 4
  %oldsize = alloca i32, align 4
  store %struct.VEC_ipa_node_params_t_heap** %vec_, %struct.VEC_ipa_node_params_t_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_ipa_node_params_t_heap*** %vec_.addr, metadata !7478, metadata !DIExpression()), !dbg !7479
  store i32 %size_, i32* %size_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %size_.addr, metadata !7480, metadata !DIExpression()), !dbg !7479
  call void @llvm.dbg.declare(metadata i32* %oldsize, metadata !7481, metadata !DIExpression()), !dbg !7479
  %0 = load %struct.VEC_ipa_node_params_t_heap**, %struct.VEC_ipa_node_params_t_heap*** %vec_.addr, align 8, !dbg !7479
  %1 = load %struct.VEC_ipa_node_params_t_heap*, %struct.VEC_ipa_node_params_t_heap** %0, align 8, !dbg !7479
  %tobool = icmp ne %struct.VEC_ipa_node_params_t_heap* %1, null, !dbg !7479
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7479

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_ipa_node_params_t_heap**, %struct.VEC_ipa_node_params_t_heap*** %vec_.addr, align 8, !dbg !7479
  %3 = load %struct.VEC_ipa_node_params_t_heap*, %struct.VEC_ipa_node_params_t_heap** %2, align 8, !dbg !7479
  %base = getelementptr inbounds %struct.VEC_ipa_node_params_t_heap, %struct.VEC_ipa_node_params_t_heap* %3, i32 0, i32 0, !dbg !7479
  br label %cond.end, !dbg !7479

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7479

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_ipa_node_params_t_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !7479
  %call = call i32 @VEC_ipa_node_params_t_base_length(%struct.VEC_ipa_node_params_t_base* %cond), !dbg !7479
  store i32 %call, i32* %oldsize, align 4, !dbg !7479
  %4 = load %struct.VEC_ipa_node_params_t_heap**, %struct.VEC_ipa_node_params_t_heap*** %vec_.addr, align 8, !dbg !7479
  %5 = load i32, i32* %size_.addr, align 4, !dbg !7479
  call void @VEC_ipa_node_params_t_heap_safe_grow(%struct.VEC_ipa_node_params_t_heap** %4, i32 %5), !dbg !7479
  %6 = load %struct.VEC_ipa_node_params_t_heap**, %struct.VEC_ipa_node_params_t_heap*** %vec_.addr, align 8, !dbg !7479
  %7 = load %struct.VEC_ipa_node_params_t_heap*, %struct.VEC_ipa_node_params_t_heap** %6, align 8, !dbg !7479
  %tobool1 = icmp ne %struct.VEC_ipa_node_params_t_heap* %7, null, !dbg !7479
  br i1 %tobool1, label %cond.true2, label %cond.false4, !dbg !7479

cond.true2:                                       ; preds = %cond.end
  %8 = load %struct.VEC_ipa_node_params_t_heap**, %struct.VEC_ipa_node_params_t_heap*** %vec_.addr, align 8, !dbg !7479
  %9 = load %struct.VEC_ipa_node_params_t_heap*, %struct.VEC_ipa_node_params_t_heap** %8, align 8, !dbg !7479
  %base3 = getelementptr inbounds %struct.VEC_ipa_node_params_t_heap, %struct.VEC_ipa_node_params_t_heap* %9, i32 0, i32 0, !dbg !7479
  br label %cond.end5, !dbg !7479

cond.false4:                                      ; preds = %cond.end
  br label %cond.end5, !dbg !7479

cond.end5:                                        ; preds = %cond.false4, %cond.true2
  %cond6 = phi %struct.VEC_ipa_node_params_t_base* [ %base3, %cond.true2 ], [ null, %cond.false4 ], !dbg !7479
  %call7 = call %struct.ipa_node_params* @VEC_ipa_node_params_t_base_address(%struct.VEC_ipa_node_params_t_base* %cond6), !dbg !7479
  %10 = load i32, i32* %oldsize, align 4, !dbg !7479
  %idxprom = sext i32 %10 to i64, !dbg !7479
  %arrayidx = getelementptr inbounds %struct.ipa_node_params, %struct.ipa_node_params* %call7, i64 %idxprom, !dbg !7479
  %11 = bitcast %struct.ipa_node_params* %arrayidx to i8*, !dbg !7479
  %12 = load i32, i32* %size_.addr, align 4, !dbg !7479
  %13 = load i32, i32* %oldsize, align 4, !dbg !7479
  %sub = sub nsw i32 %12, %13, !dbg !7479
  %conv = sext i32 %sub to i64, !dbg !7479
  %mul = mul i64 48, %conv, !dbg !7479
  call void @llvm.memset.p0i8.i64(i8* align 8 %11, i8 0, i64 %mul, i1 false), !dbg !7479
  ret void, !dbg !7479
}

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_ipa_node_params_t_heap_safe_grow(%struct.VEC_ipa_node_params_t_heap** %vec_, i32 %size_) #0 !dbg !7482 {
entry:
  %vec_.addr = alloca %struct.VEC_ipa_node_params_t_heap**, align 8
  %size_.addr = alloca i32, align 4
  store %struct.VEC_ipa_node_params_t_heap** %vec_, %struct.VEC_ipa_node_params_t_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_ipa_node_params_t_heap*** %vec_.addr, metadata !7483, metadata !DIExpression()), !dbg !7484
  store i32 %size_, i32* %size_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %size_.addr, metadata !7485, metadata !DIExpression()), !dbg !7484
  %0 = load i32, i32* %size_.addr, align 4, !dbg !7484
  %cmp = icmp sge i32 %0, 0, !dbg !7484
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !7484

land.rhs:                                         ; preds = %entry
  %1 = load %struct.VEC_ipa_node_params_t_heap**, %struct.VEC_ipa_node_params_t_heap*** %vec_.addr, align 8, !dbg !7484
  %2 = load %struct.VEC_ipa_node_params_t_heap*, %struct.VEC_ipa_node_params_t_heap** %1, align 8, !dbg !7484
  %tobool = icmp ne %struct.VEC_ipa_node_params_t_heap* %2, null, !dbg !7484
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7484

cond.true:                                        ; preds = %land.rhs
  %3 = load %struct.VEC_ipa_node_params_t_heap**, %struct.VEC_ipa_node_params_t_heap*** %vec_.addr, align 8, !dbg !7484
  %4 = load %struct.VEC_ipa_node_params_t_heap*, %struct.VEC_ipa_node_params_t_heap** %3, align 8, !dbg !7484
  %base = getelementptr inbounds %struct.VEC_ipa_node_params_t_heap, %struct.VEC_ipa_node_params_t_heap* %4, i32 0, i32 0, !dbg !7484
  br label %cond.end, !dbg !7484

cond.false:                                       ; preds = %land.rhs
  br label %cond.end, !dbg !7484

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_ipa_node_params_t_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !7484
  %call = call i32 @VEC_ipa_node_params_t_base_length(%struct.VEC_ipa_node_params_t_base* %cond), !dbg !7484
  %5 = load i32, i32* %size_.addr, align 4, !dbg !7484
  %cmp1 = icmp ule i32 %call, %5, !dbg !7484
  br label %land.end

land.end:                                         ; preds = %cond.end, %entry
  %6 = phi i1 [ false, %entry ], [ %cmp1, %cond.end ], !dbg !7486
  %land.ext = zext i1 %6 to i32, !dbg !7484
  %7 = load %struct.VEC_ipa_node_params_t_heap**, %struct.VEC_ipa_node_params_t_heap*** %vec_.addr, align 8, !dbg !7484
  %8 = load i32, i32* %size_.addr, align 4, !dbg !7484
  %9 = load %struct.VEC_ipa_node_params_t_heap**, %struct.VEC_ipa_node_params_t_heap*** %vec_.addr, align 8, !dbg !7484
  %10 = load %struct.VEC_ipa_node_params_t_heap*, %struct.VEC_ipa_node_params_t_heap** %9, align 8, !dbg !7484
  %tobool2 = icmp ne %struct.VEC_ipa_node_params_t_heap* %10, null, !dbg !7484
  br i1 %tobool2, label %cond.true3, label %cond.false10, !dbg !7484

cond.true3:                                       ; preds = %land.end
  %11 = load %struct.VEC_ipa_node_params_t_heap**, %struct.VEC_ipa_node_params_t_heap*** %vec_.addr, align 8, !dbg !7484
  %12 = load %struct.VEC_ipa_node_params_t_heap*, %struct.VEC_ipa_node_params_t_heap** %11, align 8, !dbg !7484
  %tobool4 = icmp ne %struct.VEC_ipa_node_params_t_heap* %12, null, !dbg !7484
  br i1 %tobool4, label %cond.true5, label %cond.false7, !dbg !7484

cond.true5:                                       ; preds = %cond.true3
  %13 = load %struct.VEC_ipa_node_params_t_heap**, %struct.VEC_ipa_node_params_t_heap*** %vec_.addr, align 8, !dbg !7484
  %14 = load %struct.VEC_ipa_node_params_t_heap*, %struct.VEC_ipa_node_params_t_heap** %13, align 8, !dbg !7484
  %base6 = getelementptr inbounds %struct.VEC_ipa_node_params_t_heap, %struct.VEC_ipa_node_params_t_heap* %14, i32 0, i32 0, !dbg !7484
  br label %cond.end8, !dbg !7484

cond.false7:                                      ; preds = %cond.true3
  br label %cond.end8, !dbg !7484

cond.end8:                                        ; preds = %cond.false7, %cond.true5
  %cond9 = phi %struct.VEC_ipa_node_params_t_base* [ %base6, %cond.true5 ], [ null, %cond.false7 ], !dbg !7484
  %num = getelementptr inbounds %struct.VEC_ipa_node_params_t_base, %struct.VEC_ipa_node_params_t_base* %cond9, i32 0, i32 0, !dbg !7484
  %15 = load i32, i32* %num, align 8, !dbg !7484
  br label %cond.end11, !dbg !7484

cond.false10:                                     ; preds = %land.end
  br label %cond.end11, !dbg !7484

cond.end11:                                       ; preds = %cond.false10, %cond.end8
  %cond12 = phi i32 [ %15, %cond.end8 ], [ 0, %cond.false10 ], !dbg !7484
  %sub = sub nsw i32 %8, %cond12, !dbg !7484
  %call13 = call i32 @VEC_ipa_node_params_t_heap_reserve_exact(%struct.VEC_ipa_node_params_t_heap** %7, i32 %sub), !dbg !7484
  %16 = load i32, i32* %size_.addr, align 4, !dbg !7484
  %17 = load %struct.VEC_ipa_node_params_t_heap**, %struct.VEC_ipa_node_params_t_heap*** %vec_.addr, align 8, !dbg !7484
  %18 = load %struct.VEC_ipa_node_params_t_heap*, %struct.VEC_ipa_node_params_t_heap** %17, align 8, !dbg !7484
  %tobool14 = icmp ne %struct.VEC_ipa_node_params_t_heap* %18, null, !dbg !7484
  br i1 %tobool14, label %cond.true15, label %cond.false17, !dbg !7484

cond.true15:                                      ; preds = %cond.end11
  %19 = load %struct.VEC_ipa_node_params_t_heap**, %struct.VEC_ipa_node_params_t_heap*** %vec_.addr, align 8, !dbg !7484
  %20 = load %struct.VEC_ipa_node_params_t_heap*, %struct.VEC_ipa_node_params_t_heap** %19, align 8, !dbg !7484
  %base16 = getelementptr inbounds %struct.VEC_ipa_node_params_t_heap, %struct.VEC_ipa_node_params_t_heap* %20, i32 0, i32 0, !dbg !7484
  br label %cond.end18, !dbg !7484

cond.false17:                                     ; preds = %cond.end11
  br label %cond.end18, !dbg !7484

cond.end18:                                       ; preds = %cond.false17, %cond.true15
  %cond19 = phi %struct.VEC_ipa_node_params_t_base* [ %base16, %cond.true15 ], [ null, %cond.false17 ], !dbg !7484
  %num20 = getelementptr inbounds %struct.VEC_ipa_node_params_t_base, %struct.VEC_ipa_node_params_t_base* %cond19, i32 0, i32 0, !dbg !7484
  store i32 %16, i32* %num20, align 8, !dbg !7484
  ret void, !dbg !7484
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ipa_node_params* @VEC_ipa_node_params_t_base_address(%struct.VEC_ipa_node_params_t_base* %vec_) #0 !dbg !7487 {
entry:
  %vec_.addr = alloca %struct.VEC_ipa_node_params_t_base*, align 8
  store %struct.VEC_ipa_node_params_t_base* %vec_, %struct.VEC_ipa_node_params_t_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_ipa_node_params_t_base** %vec_.addr, metadata !7490, metadata !DIExpression()), !dbg !7491
  %0 = load %struct.VEC_ipa_node_params_t_base*, %struct.VEC_ipa_node_params_t_base** %vec_.addr, align 8, !dbg !7491
  %tobool = icmp ne %struct.VEC_ipa_node_params_t_base* %0, null, !dbg !7491
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7491

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_ipa_node_params_t_base*, %struct.VEC_ipa_node_params_t_base** %vec_.addr, align 8, !dbg !7491
  %vec = getelementptr inbounds %struct.VEC_ipa_node_params_t_base, %struct.VEC_ipa_node_params_t_base* %1, i32 0, i32 2, !dbg !7491
  %arraydecay = getelementptr inbounds [1 x %struct.ipa_node_params], [1 x %struct.ipa_node_params]* %vec, i64 0, i64 0, !dbg !7491
  br label %cond.end, !dbg !7491

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7491

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.ipa_node_params* [ %arraydecay, %cond.true ], [ null, %cond.false ], !dbg !7491
  ret %struct.ipa_node_params* %cond, !dbg !7491
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_ipa_node_params_t_heap_reserve_exact(%struct.VEC_ipa_node_params_t_heap** %vec_, i32 %alloc_) #0 !dbg !7492 {
entry:
  %vec_.addr = alloca %struct.VEC_ipa_node_params_t_heap**, align 8
  %alloc_.addr = alloca i32, align 4
  %extend = alloca i32, align 4
  store %struct.VEC_ipa_node_params_t_heap** %vec_, %struct.VEC_ipa_node_params_t_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_ipa_node_params_t_heap*** %vec_.addr, metadata !7495, metadata !DIExpression()), !dbg !7496
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !7497, metadata !DIExpression()), !dbg !7496
  call void @llvm.dbg.declare(metadata i32* %extend, metadata !7498, metadata !DIExpression()), !dbg !7496
  %0 = load %struct.VEC_ipa_node_params_t_heap**, %struct.VEC_ipa_node_params_t_heap*** %vec_.addr, align 8, !dbg !7496
  %1 = load %struct.VEC_ipa_node_params_t_heap*, %struct.VEC_ipa_node_params_t_heap** %0, align 8, !dbg !7496
  %tobool = icmp ne %struct.VEC_ipa_node_params_t_heap* %1, null, !dbg !7496
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7496

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_ipa_node_params_t_heap**, %struct.VEC_ipa_node_params_t_heap*** %vec_.addr, align 8, !dbg !7496
  %3 = load %struct.VEC_ipa_node_params_t_heap*, %struct.VEC_ipa_node_params_t_heap** %2, align 8, !dbg !7496
  %base = getelementptr inbounds %struct.VEC_ipa_node_params_t_heap, %struct.VEC_ipa_node_params_t_heap* %3, i32 0, i32 0, !dbg !7496
  br label %cond.end, !dbg !7496

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7496

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_ipa_node_params_t_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !7496
  %4 = load i32, i32* %alloc_.addr, align 4, !dbg !7496
  %call = call i32 @VEC_ipa_node_params_t_base_space(%struct.VEC_ipa_node_params_t_base* %cond, i32 %4), !dbg !7496
  %tobool1 = icmp ne i32 %call, 0, !dbg !7496
  %lnot = xor i1 %tobool1, true, !dbg !7496
  %lnot.ext = zext i1 %lnot to i32, !dbg !7496
  store i32 %lnot.ext, i32* %extend, align 4, !dbg !7496
  %5 = load i32, i32* %extend, align 4, !dbg !7499
  %tobool2 = icmp ne i32 %5, 0, !dbg !7499
  br i1 %tobool2, label %if.then, label %if.end, !dbg !7496

if.then:                                          ; preds = %cond.end
  %6 = load %struct.VEC_ipa_node_params_t_heap**, %struct.VEC_ipa_node_params_t_heap*** %vec_.addr, align 8, !dbg !7499
  %7 = load %struct.VEC_ipa_node_params_t_heap*, %struct.VEC_ipa_node_params_t_heap** %6, align 8, !dbg !7499
  %8 = bitcast %struct.VEC_ipa_node_params_t_heap* %7 to i8*, !dbg !7499
  %9 = load i32, i32* %alloc_.addr, align 4, !dbg !7499
  %call3 = call i8* @vec_heap_o_reserve_exact(i8* %8, i32 %9, i64 8, i64 48), !dbg !7499
  %10 = bitcast i8* %call3 to %struct.VEC_ipa_node_params_t_heap*, !dbg !7499
  %11 = load %struct.VEC_ipa_node_params_t_heap**, %struct.VEC_ipa_node_params_t_heap*** %vec_.addr, align 8, !dbg !7499
  store %struct.VEC_ipa_node_params_t_heap* %10, %struct.VEC_ipa_node_params_t_heap** %11, align 8, !dbg !7499
  br label %if.end, !dbg !7499

if.end:                                           ; preds = %if.then, %cond.end
  %12 = load i32, i32* %extend, align 4, !dbg !7496
  ret i32 %12, !dbg !7496
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_ipa_node_params_t_base_space(%struct.VEC_ipa_node_params_t_base* %vec_, i32 %alloc_) #0 !dbg !7501 {
entry:
  %vec_.addr = alloca %struct.VEC_ipa_node_params_t_base*, align 8
  %alloc_.addr = alloca i32, align 4
  store %struct.VEC_ipa_node_params_t_base* %vec_, %struct.VEC_ipa_node_params_t_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_ipa_node_params_t_base** %vec_.addr, metadata !7504, metadata !DIExpression()), !dbg !7505
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !7506, metadata !DIExpression()), !dbg !7505
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !7505
  %cmp = icmp sge i32 %0, 0, !dbg !7505
  %conv = zext i1 %cmp to i32, !dbg !7505
  %1 = load %struct.VEC_ipa_node_params_t_base*, %struct.VEC_ipa_node_params_t_base** %vec_.addr, align 8, !dbg !7505
  %tobool = icmp ne %struct.VEC_ipa_node_params_t_base* %1, null, !dbg !7505
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7505

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_ipa_node_params_t_base*, %struct.VEC_ipa_node_params_t_base** %vec_.addr, align 8, !dbg !7505
  %alloc = getelementptr inbounds %struct.VEC_ipa_node_params_t_base, %struct.VEC_ipa_node_params_t_base* %2, i32 0, i32 1, !dbg !7505
  %3 = load i32, i32* %alloc, align 4, !dbg !7505
  %4 = load %struct.VEC_ipa_node_params_t_base*, %struct.VEC_ipa_node_params_t_base** %vec_.addr, align 8, !dbg !7505
  %num = getelementptr inbounds %struct.VEC_ipa_node_params_t_base, %struct.VEC_ipa_node_params_t_base* %4, i32 0, i32 0, !dbg !7505
  %5 = load i32, i32* %num, align 8, !dbg !7505
  %sub = sub i32 %3, %5, !dbg !7505
  %6 = load i32, i32* %alloc_.addr, align 4, !dbg !7505
  %cmp1 = icmp uge i32 %sub, %6, !dbg !7505
  %conv2 = zext i1 %cmp1 to i32, !dbg !7505
  br label %cond.end, !dbg !7505

cond.false:                                       ; preds = %entry
  %7 = load i32, i32* %alloc_.addr, align 4, !dbg !7505
  %tobool3 = icmp ne i32 %7, 0, !dbg !7505
  %lnot = xor i1 %tobool3, true, !dbg !7505
  %lnot.ext = zext i1 %lnot to i32, !dbg !7505
  br label %cond.end, !dbg !7505

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv2, %cond.true ], [ %lnot.ext, %cond.false ], !dbg !7505
  ret i32 %cond, !dbg !7505
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.VEC_ipa_edge_args_t_gc* @VEC_ipa_edge_args_t_gc_alloc(i32 %alloc_) #0 !dbg !7507 {
entry:
  %alloc_.addr = alloca i32, align 4
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !7510, metadata !DIExpression()), !dbg !7511
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !7511
  %call = call i8* @vec_gc_o_reserve_exact(i8* null, i32 %0, i64 8, i64 16), !dbg !7511
  %1 = bitcast i8* %call to %struct.VEC_ipa_edge_args_t_gc*, !dbg !7511
  ret %struct.VEC_ipa_edge_args_t_gc* %1, !dbg !7511
}

declare dso_local %struct.data_in* @lto_data_in_create(%struct.lto_file_decl_data*, i8*, i32, %struct.VEC_ld_plugin_symbol_resolution_t_heap*) #2

declare dso_local i64 @lto_input_uleb128(%struct.lto_input_block*) #2

declare dso_local %struct.cgraph_node* @lto_cgraph_encoder_deref(%struct.lto_cgraph_encoder_d*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal void @ipa_read_node_info(%struct.lto_input_block* %ib, %struct.cgraph_node* %node, %struct.data_in* %data_in) #0 !dbg !7512 {
entry:
  %ib.addr = alloca %struct.lto_input_block*, align 8
  %node.addr = alloca %struct.cgraph_node*, align 8
  %data_in.addr = alloca %struct.data_in*, align 8
  %info = alloca %struct.ipa_node_params*, align 8
  %k = alloca i32, align 4
  %e = alloca %struct.cgraph_edge*, align 8
  %bp = alloca %struct.bitpack_d*, align 8
  %i = alloca i32, align 4
  %note_count = alloca i32, align 4
  %args = alloca %struct.ipa_edge_args*, align 8
  %count = alloca i32, align 4
  store %struct.lto_input_block* %ib, %struct.lto_input_block** %ib.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.lto_input_block** %ib.addr, metadata !7516, metadata !DIExpression()), !dbg !7517
  store %struct.cgraph_node* %node, %struct.cgraph_node** %node.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %node.addr, metadata !7518, metadata !DIExpression()), !dbg !7519
  store %struct.data_in* %data_in, %struct.data_in** %data_in.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.data_in** %data_in.addr, metadata !7520, metadata !DIExpression()), !dbg !7521
  call void @llvm.dbg.declare(metadata %struct.ipa_node_params** %info, metadata !7522, metadata !DIExpression()), !dbg !7523
  %0 = load %struct.VEC_ipa_node_params_t_heap*, %struct.VEC_ipa_node_params_t_heap** @ipa_node_params_vector, align 8, !dbg !7524
  %tobool = icmp ne %struct.VEC_ipa_node_params_t_heap* %0, null, !dbg !7524
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7524

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_ipa_node_params_t_heap*, %struct.VEC_ipa_node_params_t_heap** @ipa_node_params_vector, align 8, !dbg !7524
  %base = getelementptr inbounds %struct.VEC_ipa_node_params_t_heap, %struct.VEC_ipa_node_params_t_heap* %1, i32 0, i32 0, !dbg !7524
  br label %cond.end, !dbg !7524

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7524

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_ipa_node_params_t_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !7524
  %2 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !7524
  %uid = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %2, i32 0, i32 24, !dbg !7524
  %3 = load i32, i32* %uid, align 8, !dbg !7524
  %call = call %struct.ipa_node_params* @VEC_ipa_node_params_t_base_index(%struct.VEC_ipa_node_params_t_base* %cond, i32 %3), !dbg !7524
  store %struct.ipa_node_params* %call, %struct.ipa_node_params** %info, align 8, !dbg !7523
  call void @llvm.dbg.declare(metadata i32* %k, metadata !7525, metadata !DIExpression()), !dbg !7526
  call void @llvm.dbg.declare(metadata %struct.cgraph_edge** %e, metadata !7527, metadata !DIExpression()), !dbg !7528
  call void @llvm.dbg.declare(metadata %struct.bitpack_d** %bp, metadata !7529, metadata !DIExpression()), !dbg !7530
  call void @llvm.dbg.declare(metadata i32* %i, metadata !7531, metadata !DIExpression()), !dbg !7532
  call void @llvm.dbg.declare(metadata i32* %note_count, metadata !7533, metadata !DIExpression()), !dbg !7534
  %4 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !7535
  call void @ipa_initialize_node_params(%struct.cgraph_node* %4), !dbg !7536
  %5 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !7537
  %call1 = call %struct.bitpack_d* @lto_input_bitpack(%struct.lto_input_block* %5), !dbg !7538
  store %struct.bitpack_d* %call1, %struct.bitpack_d** %bp, align 8, !dbg !7539
  %6 = load %struct.bitpack_d*, %struct.bitpack_d** %bp, align 8, !dbg !7540
  %call2 = call i64 @bp_unpack_value(%struct.bitpack_d* %6, i32 1), !dbg !7541
  %conv = trunc i64 %call2 to i32, !dbg !7541
  %7 = load %struct.ipa_node_params*, %struct.ipa_node_params** %info, align 8, !dbg !7542
  %called_with_var_arguments = getelementptr inbounds %struct.ipa_node_params, %struct.ipa_node_params* %7, i32 0, i32 5, !dbg !7543
  %8 = trunc i32 %conv to i8, !dbg !7544
  %bf.load = load i8, i8* %called_with_var_arguments, align 8, !dbg !7544
  %bf.value = and i8 %8, 1, !dbg !7544
  %bf.clear = and i8 %bf.load, -2, !dbg !7544
  %bf.set = or i8 %bf.clear, %bf.value, !dbg !7544
  store i8 %bf.set, i8* %called_with_var_arguments, align 8, !dbg !7544
  %bf.result.cast = zext i8 %bf.value to i32, !dbg !7544
  %9 = load %struct.bitpack_d*, %struct.bitpack_d** %bp, align 8, !dbg !7545
  %call3 = call i64 @bp_unpack_value(%struct.bitpack_d* %9, i32 1), !dbg !7546
  %conv4 = trunc i64 %call3 to i32, !dbg !7546
  %10 = load %struct.ipa_node_params*, %struct.ipa_node_params** %info, align 8, !dbg !7547
  %uses_analysis_done = getelementptr inbounds %struct.ipa_node_params, %struct.ipa_node_params* %10, i32 0, i32 5, !dbg !7548
  %11 = trunc i32 %conv4 to i8, !dbg !7549
  %bf.load5 = load i8, i8* %uses_analysis_done, align 8, !dbg !7549
  %bf.value6 = and i8 %11, 1, !dbg !7549
  %bf.shl = shl i8 %bf.value6, 2, !dbg !7549
  %bf.clear7 = and i8 %bf.load5, -5, !dbg !7549
  %bf.set8 = or i8 %bf.clear7, %bf.shl, !dbg !7549
  store i8 %bf.set8, i8* %uses_analysis_done, align 8, !dbg !7549
  %bf.result.cast9 = zext i8 %bf.value6 to i32, !dbg !7549
  %12 = load %struct.ipa_node_params*, %struct.ipa_node_params** %info, align 8, !dbg !7550
  %call10 = call i32 @ipa_get_param_count(%struct.ipa_node_params* %12), !dbg !7552
  %cmp = icmp ne i32 %call10, 0, !dbg !7553
  br i1 %cmp, label %if.then, label %if.end, !dbg !7554

if.then:                                          ; preds = %cond.end
  %13 = load %struct.ipa_node_params*, %struct.ipa_node_params** %info, align 8, !dbg !7555
  %modification_analysis_done = getelementptr inbounds %struct.ipa_node_params, %struct.ipa_node_params* %13, i32 0, i32 5, !dbg !7557
  %bf.load12 = load i8, i8* %modification_analysis_done, align 8, !dbg !7558
  %bf.clear13 = and i8 %bf.load12, -3, !dbg !7558
  %bf.set14 = or i8 %bf.clear13, 2, !dbg !7558
  store i8 %bf.set14, i8* %modification_analysis_done, align 8, !dbg !7558
  %14 = load %struct.ipa_node_params*, %struct.ipa_node_params** %info, align 8, !dbg !7559
  %uses_analysis_done15 = getelementptr inbounds %struct.ipa_node_params, %struct.ipa_node_params* %14, i32 0, i32 5, !dbg !7560
  %bf.load16 = load i8, i8* %uses_analysis_done15, align 8, !dbg !7561
  %bf.clear17 = and i8 %bf.load16, -5, !dbg !7561
  %bf.set18 = or i8 %bf.clear17, 4, !dbg !7561
  store i8 %bf.set18, i8* %uses_analysis_done15, align 8, !dbg !7561
  br label %if.end, !dbg !7562

if.end:                                           ; preds = %if.then, %cond.end
  %15 = load %struct.ipa_node_params*, %struct.ipa_node_params** %info, align 8, !dbg !7563
  %node_enqueued = getelementptr inbounds %struct.ipa_node_params, %struct.ipa_node_params* %15, i32 0, i32 5, !dbg !7564
  %bf.load19 = load i8, i8* %node_enqueued, align 8, !dbg !7565
  %bf.clear20 = and i8 %bf.load19, -9, !dbg !7565
  store i8 %bf.clear20, i8* %node_enqueued, align 8, !dbg !7565
  store i32 0, i32* %k, align 4, !dbg !7566
  br label %for.cond, !dbg !7568

for.cond:                                         ; preds = %for.inc, %if.end
  %16 = load i32, i32* %k, align 4, !dbg !7569
  %17 = load %struct.ipa_node_params*, %struct.ipa_node_params** %info, align 8, !dbg !7571
  %call21 = call i32 @ipa_get_param_count(%struct.ipa_node_params* %17), !dbg !7572
  %cmp22 = icmp slt i32 %16, %call21, !dbg !7573
  br i1 %cmp22, label %for.body, label %for.end, !dbg !7574

for.body:                                         ; preds = %for.cond
  %18 = load %struct.bitpack_d*, %struct.bitpack_d** %bp, align 8, !dbg !7575
  %call24 = call i64 @bp_unpack_value(%struct.bitpack_d* %18, i32 1), !dbg !7576
  %conv25 = trunc i64 %call24 to i32, !dbg !7576
  %19 = load %struct.ipa_node_params*, %struct.ipa_node_params** %info, align 8, !dbg !7577
  %params = getelementptr inbounds %struct.ipa_node_params, %struct.ipa_node_params* %19, i32 0, i32 1, !dbg !7578
  %20 = load %struct.ipa_param_descriptor*, %struct.ipa_param_descriptor** %params, align 8, !dbg !7578
  %21 = load i32, i32* %k, align 4, !dbg !7579
  %idxprom = sext i32 %21 to i64, !dbg !7577
  %arrayidx = getelementptr inbounds %struct.ipa_param_descriptor, %struct.ipa_param_descriptor* %20, i64 %idxprom, !dbg !7577
  %modified = getelementptr inbounds %struct.ipa_param_descriptor, %struct.ipa_param_descriptor* %arrayidx, i32 0, i32 2, !dbg !7580
  %22 = trunc i32 %conv25 to i8, !dbg !7581
  %bf.load26 = load i8, i8* %modified, align 8, !dbg !7581
  %bf.value27 = and i8 %22, 1, !dbg !7581
  %bf.clear28 = and i8 %bf.load26, -2, !dbg !7581
  %bf.set29 = or i8 %bf.clear28, %bf.value27, !dbg !7581
  store i8 %bf.set29, i8* %modified, align 8, !dbg !7581
  %bf.result.cast30 = zext i8 %bf.value27 to i32, !dbg !7581
  br label %for.inc, !dbg !7577

for.inc:                                          ; preds = %for.body
  %23 = load i32, i32* %k, align 4, !dbg !7582
  %inc = add nsw i32 %23, 1, !dbg !7582
  store i32 %inc, i32* %k, align 4, !dbg !7582
  br label %for.cond, !dbg !7583, !llvm.loop !7584

for.end:                                          ; preds = %for.cond
  %24 = load %struct.bitpack_d*, %struct.bitpack_d** %bp, align 8, !dbg !7586
  call void @bitpack_delete(%struct.bitpack_d* %24), !dbg !7587
  %25 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !7588
  %callees = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %25, i32 0, i32 1, !dbg !7590
  %26 = load %struct.cgraph_edge*, %struct.cgraph_edge** %callees, align 8, !dbg !7590
  store %struct.cgraph_edge* %26, %struct.cgraph_edge** %e, align 8, !dbg !7591
  br label %for.cond31, !dbg !7592

for.cond31:                                       ; preds = %for.inc59, %for.end
  %27 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !7593
  %tobool32 = icmp ne %struct.cgraph_edge* %27, null, !dbg !7595
  br i1 %tobool32, label %for.body33, label %for.end60, !dbg !7595

for.body33:                                       ; preds = %for.cond31
  call void @llvm.dbg.declare(metadata %struct.ipa_edge_args** %args, metadata !7596, metadata !DIExpression()), !dbg !7598
  %28 = load %struct.VEC_ipa_edge_args_t_gc*, %struct.VEC_ipa_edge_args_t_gc** @ipa_edge_args_vector, align 8, !dbg !7599
  %tobool34 = icmp ne %struct.VEC_ipa_edge_args_t_gc* %28, null, !dbg !7599
  br i1 %tobool34, label %cond.true35, label %cond.false37, !dbg !7599

cond.true35:                                      ; preds = %for.body33
  %29 = load %struct.VEC_ipa_edge_args_t_gc*, %struct.VEC_ipa_edge_args_t_gc** @ipa_edge_args_vector, align 8, !dbg !7599
  %base36 = getelementptr inbounds %struct.VEC_ipa_edge_args_t_gc, %struct.VEC_ipa_edge_args_t_gc* %29, i32 0, i32 0, !dbg !7599
  br label %cond.end38, !dbg !7599

cond.false37:                                     ; preds = %for.body33
  br label %cond.end38, !dbg !7599

cond.end38:                                       ; preds = %cond.false37, %cond.true35
  %cond39 = phi %struct.VEC_ipa_edge_args_t_base* [ %base36, %cond.true35 ], [ null, %cond.false37 ], !dbg !7599
  %30 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !7599
  %uid40 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %30, i32 0, i32 12, !dbg !7599
  %31 = load i32, i32* %uid40, align 4, !dbg !7599
  %call41 = call %struct.ipa_edge_args* @VEC_ipa_edge_args_t_base_index(%struct.VEC_ipa_edge_args_t_base* %cond39, i32 %31), !dbg !7599
  store %struct.ipa_edge_args* %call41, %struct.ipa_edge_args** %args, align 8, !dbg !7598
  call void @llvm.dbg.declare(metadata i32* %count, metadata !7600, metadata !DIExpression()), !dbg !7601
  %32 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !7602
  %call42 = call i64 @lto_input_uleb128(%struct.lto_input_block* %32), !dbg !7603
  %conv43 = trunc i64 %call42 to i32, !dbg !7603
  store i32 %conv43, i32* %count, align 4, !dbg !7601
  %33 = load %struct.ipa_edge_args*, %struct.ipa_edge_args** %args, align 8, !dbg !7604
  %34 = load i32, i32* %count, align 4, !dbg !7605
  call void @ipa_set_cs_argument_count(%struct.ipa_edge_args* %33, i32 %34), !dbg !7606
  %35 = load i32, i32* %count, align 4, !dbg !7607
  %tobool44 = icmp ne i32 %35, 0, !dbg !7607
  br i1 %tobool44, label %if.end46, label %if.then45, !dbg !7609

if.then45:                                        ; preds = %cond.end38
  br label %for.inc59, !dbg !7610

if.end46:                                         ; preds = %cond.end38
  %36 = load %struct.ipa_edge_args*, %struct.ipa_edge_args** %args, align 8, !dbg !7611
  %call47 = call i32 @ipa_get_cs_argument_count(%struct.ipa_edge_args* %36), !dbg !7611
  %conv48 = sext i32 %call47 to i64, !dbg !7611
  %mul = mul i64 %conv48, 32, !dbg !7611
  %call49 = call i8* @ggc_alloc_cleared_stat(i64 %mul), !dbg !7611
  %37 = bitcast i8* %call49 to %struct.ipa_jump_func*, !dbg !7611
  %38 = load %struct.ipa_edge_args*, %struct.ipa_edge_args** %args, align 8, !dbg !7612
  %jump_functions = getelementptr inbounds %struct.ipa_edge_args, %struct.ipa_edge_args* %38, i32 0, i32 1, !dbg !7613
  store %struct.ipa_jump_func* %37, %struct.ipa_jump_func** %jump_functions, align 8, !dbg !7614
  store i32 0, i32* %k, align 4, !dbg !7615
  br label %for.cond50, !dbg !7617

for.cond50:                                       ; preds = %for.inc56, %if.end46
  %39 = load i32, i32* %k, align 4, !dbg !7618
  %40 = load %struct.ipa_edge_args*, %struct.ipa_edge_args** %args, align 8, !dbg !7620
  %call51 = call i32 @ipa_get_cs_argument_count(%struct.ipa_edge_args* %40), !dbg !7621
  %cmp52 = icmp slt i32 %39, %call51, !dbg !7622
  br i1 %cmp52, label %for.body54, label %for.end58, !dbg !7623

for.body54:                                       ; preds = %for.cond50
  %41 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !7624
  %42 = load %struct.ipa_edge_args*, %struct.ipa_edge_args** %args, align 8, !dbg !7625
  %43 = load i32, i32* %k, align 4, !dbg !7626
  %call55 = call %struct.ipa_jump_func* @ipa_get_ith_jump_func(%struct.ipa_edge_args* %42, i32 %43), !dbg !7627
  %44 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !7628
  call void @ipa_read_jump_function(%struct.lto_input_block* %41, %struct.ipa_jump_func* %call55, %struct.data_in* %44), !dbg !7629
  br label %for.inc56, !dbg !7629

for.inc56:                                        ; preds = %for.body54
  %45 = load i32, i32* %k, align 4, !dbg !7630
  %inc57 = add nsw i32 %45, 1, !dbg !7630
  store i32 %inc57, i32* %k, align 4, !dbg !7630
  br label %for.cond50, !dbg !7631, !llvm.loop !7632

for.end58:                                        ; preds = %for.cond50
  br label %for.inc59, !dbg !7634

for.inc59:                                        ; preds = %for.end58, %if.then45
  %46 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !7635
  %next_callee = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %46, i32 0, i32 6, !dbg !7636
  %47 = load %struct.cgraph_edge*, %struct.cgraph_edge** %next_callee, align 8, !dbg !7636
  store %struct.cgraph_edge* %47, %struct.cgraph_edge** %e, align 8, !dbg !7637
  br label %for.cond31, !dbg !7638, !llvm.loop !7639

for.end60:                                        ; preds = %for.cond31
  %48 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !7641
  %call61 = call i64 @lto_input_uleb128(%struct.lto_input_block* %48), !dbg !7642
  %conv62 = trunc i64 %call61 to i32, !dbg !7642
  store i32 %conv62, i32* %note_count, align 4, !dbg !7643
  store i32 0, i32* %i, align 4, !dbg !7644
  br label %for.cond63, !dbg !7646

for.cond63:                                       ; preds = %for.inc67, %for.end60
  %49 = load i32, i32* %i, align 4, !dbg !7647
  %50 = load i32, i32* %note_count, align 4, !dbg !7649
  %cmp64 = icmp slt i32 %49, %50, !dbg !7650
  br i1 %cmp64, label %for.body66, label %for.end69, !dbg !7651

for.body66:                                       ; preds = %for.cond63
  %51 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !7652
  %52 = load %struct.ipa_node_params*, %struct.ipa_node_params** %info, align 8, !dbg !7653
  call void @ipa_read_param_call_note(%struct.lto_input_block* %51, %struct.ipa_node_params* %52), !dbg !7654
  br label %for.inc67, !dbg !7654

for.inc67:                                        ; preds = %for.body66
  %53 = load i32, i32* %i, align 4, !dbg !7655
  %inc68 = add nsw i32 %53, 1, !dbg !7655
  store i32 %inc68, i32* %i, align 4, !dbg !7655
  br label %for.cond63, !dbg !7656, !llvm.loop !7657

for.end69:                                        ; preds = %for.cond63
  ret void, !dbg !7659
}

declare dso_local void @lto_free_section_data(%struct.lto_file_decl_data*, i32, i8*, i8*, i64) #2

declare dso_local void @lto_data_in_delete(%struct.data_in*) #2

declare dso_local %struct.bitpack_d* @lto_input_bitpack(%struct.lto_input_block*) #2

declare dso_local i64 @bp_unpack_value(%struct.bitpack_d*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal void @ipa_read_jump_function(%struct.lto_input_block* %ib, %struct.ipa_jump_func* %jump_func, %struct.data_in* %data_in) #0 !dbg !7660 {
entry:
  %ib.addr = alloca %struct.lto_input_block*, align 8
  %jump_func.addr = alloca %struct.ipa_jump_func*, align 8
  %data_in.addr = alloca %struct.data_in*, align 8
  store %struct.lto_input_block* %ib, %struct.lto_input_block** %ib.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.lto_input_block** %ib.addr, metadata !7663, metadata !DIExpression()), !dbg !7664
  store %struct.ipa_jump_func* %jump_func, %struct.ipa_jump_func** %jump_func.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ipa_jump_func** %jump_func.addr, metadata !7665, metadata !DIExpression()), !dbg !7666
  store %struct.data_in* %data_in, %struct.data_in** %data_in.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.data_in** %data_in.addr, metadata !7667, metadata !DIExpression()), !dbg !7668
  %0 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !7669
  %call = call i64 @lto_input_uleb128(%struct.lto_input_block* %0), !dbg !7670
  %conv = trunc i64 %call to i32, !dbg !7671
  %1 = load %struct.ipa_jump_func*, %struct.ipa_jump_func** %jump_func.addr, align 8, !dbg !7672
  %type = getelementptr inbounds %struct.ipa_jump_func, %struct.ipa_jump_func* %1, i32 0, i32 0, !dbg !7673
  store i32 %conv, i32* %type, align 8, !dbg !7674
  %2 = load %struct.ipa_jump_func*, %struct.ipa_jump_func** %jump_func.addr, align 8, !dbg !7675
  %type1 = getelementptr inbounds %struct.ipa_jump_func, %struct.ipa_jump_func* %2, i32 0, i32 0, !dbg !7676
  %3 = load i32, i32* %type1, align 8, !dbg !7676
  switch i32 %3, label %sw.epilog [
    i32 0, label %sw.bb
    i32 1, label %sw.bb2
    i32 3, label %sw.bb4
    i32 4, label %sw.bb15
    i32 2, label %sw.bb27
  ], !dbg !7677

sw.bb:                                            ; preds = %entry
  br label %sw.epilog, !dbg !7678

sw.bb2:                                           ; preds = %entry
  %4 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !7680
  %5 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !7681
  %call3 = call %union.tree_node* @lto_input_tree(%struct.lto_input_block* %4, %struct.data_in* %5), !dbg !7682
  %6 = load %struct.ipa_jump_func*, %struct.ipa_jump_func** %jump_func.addr, align 8, !dbg !7683
  %value = getelementptr inbounds %struct.ipa_jump_func, %struct.ipa_jump_func* %6, i32 0, i32 1, !dbg !7684
  %constant = bitcast %union.jump_func_value* %value to %union.tree_node**, !dbg !7685
  store %union.tree_node* %call3, %union.tree_node** %constant, align 8, !dbg !7686
  br label %sw.epilog, !dbg !7687

sw.bb4:                                           ; preds = %entry
  %7 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !7688
  %8 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !7689
  %call5 = call %union.tree_node* @lto_input_tree(%struct.lto_input_block* %7, %struct.data_in* %8), !dbg !7690
  %9 = load %struct.ipa_jump_func*, %struct.ipa_jump_func** %jump_func.addr, align 8, !dbg !7691
  %value6 = getelementptr inbounds %struct.ipa_jump_func, %struct.ipa_jump_func* %9, i32 0, i32 1, !dbg !7692
  %pass_through = bitcast %union.jump_func_value* %value6 to %struct.ipa_pass_through_data*, !dbg !7693
  %operand = getelementptr inbounds %struct.ipa_pass_through_data, %struct.ipa_pass_through_data* %pass_through, i32 0, i32 0, !dbg !7694
  store %union.tree_node* %call5, %union.tree_node** %operand, align 8, !dbg !7695
  %10 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !7696
  %call7 = call i64 @lto_input_uleb128(%struct.lto_input_block* %10), !dbg !7697
  %conv8 = trunc i64 %call7 to i32, !dbg !7697
  %11 = load %struct.ipa_jump_func*, %struct.ipa_jump_func** %jump_func.addr, align 8, !dbg !7698
  %value9 = getelementptr inbounds %struct.ipa_jump_func, %struct.ipa_jump_func* %11, i32 0, i32 1, !dbg !7699
  %pass_through10 = bitcast %union.jump_func_value* %value9 to %struct.ipa_pass_through_data*, !dbg !7700
  %formal_id = getelementptr inbounds %struct.ipa_pass_through_data, %struct.ipa_pass_through_data* %pass_through10, i32 0, i32 1, !dbg !7701
  store i32 %conv8, i32* %formal_id, align 8, !dbg !7702
  %12 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !7703
  %call11 = call i64 @lto_input_uleb128(%struct.lto_input_block* %12), !dbg !7704
  %conv12 = trunc i64 %call11 to i32, !dbg !7705
  %13 = load %struct.ipa_jump_func*, %struct.ipa_jump_func** %jump_func.addr, align 8, !dbg !7706
  %value13 = getelementptr inbounds %struct.ipa_jump_func, %struct.ipa_jump_func* %13, i32 0, i32 1, !dbg !7707
  %pass_through14 = bitcast %union.jump_func_value* %value13 to %struct.ipa_pass_through_data*, !dbg !7708
  %operation = getelementptr inbounds %struct.ipa_pass_through_data, %struct.ipa_pass_through_data* %pass_through14, i32 0, i32 2, !dbg !7709
  store i32 %conv12, i32* %operation, align 4, !dbg !7710
  br label %sw.epilog, !dbg !7711

sw.bb15:                                          ; preds = %entry
  %14 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !7712
  %call16 = call i64 @lto_input_uleb128(%struct.lto_input_block* %14), !dbg !7713
  %15 = load %struct.ipa_jump_func*, %struct.ipa_jump_func** %jump_func.addr, align 8, !dbg !7714
  %value17 = getelementptr inbounds %struct.ipa_jump_func, %struct.ipa_jump_func* %15, i32 0, i32 1, !dbg !7715
  %ancestor = bitcast %union.jump_func_value* %value17 to %struct.ipa_ancestor_jf_data*, !dbg !7716
  %offset = getelementptr inbounds %struct.ipa_ancestor_jf_data, %struct.ipa_ancestor_jf_data* %ancestor, i32 0, i32 0, !dbg !7717
  store i64 %call16, i64* %offset, align 8, !dbg !7718
  %16 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !7719
  %17 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !7720
  %call18 = call %union.tree_node* @lto_input_tree(%struct.lto_input_block* %16, %struct.data_in* %17), !dbg !7721
  %18 = load %struct.ipa_jump_func*, %struct.ipa_jump_func** %jump_func.addr, align 8, !dbg !7722
  %value19 = getelementptr inbounds %struct.ipa_jump_func, %struct.ipa_jump_func* %18, i32 0, i32 1, !dbg !7723
  %ancestor20 = bitcast %union.jump_func_value* %value19 to %struct.ipa_ancestor_jf_data*, !dbg !7724
  %type21 = getelementptr inbounds %struct.ipa_ancestor_jf_data, %struct.ipa_ancestor_jf_data* %ancestor20, i32 0, i32 1, !dbg !7725
  store %union.tree_node* %call18, %union.tree_node** %type21, align 8, !dbg !7726
  %19 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !7727
  %call22 = call i64 @lto_input_uleb128(%struct.lto_input_block* %19), !dbg !7728
  %conv23 = trunc i64 %call22 to i32, !dbg !7728
  %20 = load %struct.ipa_jump_func*, %struct.ipa_jump_func** %jump_func.addr, align 8, !dbg !7729
  %value24 = getelementptr inbounds %struct.ipa_jump_func, %struct.ipa_jump_func* %20, i32 0, i32 1, !dbg !7730
  %ancestor25 = bitcast %union.jump_func_value* %value24 to %struct.ipa_ancestor_jf_data*, !dbg !7731
  %formal_id26 = getelementptr inbounds %struct.ipa_ancestor_jf_data, %struct.ipa_ancestor_jf_data* %ancestor25, i32 0, i32 2, !dbg !7732
  store i32 %conv23, i32* %formal_id26, align 8, !dbg !7733
  br label %sw.epilog, !dbg !7734

sw.bb27:                                          ; preds = %entry
  %21 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !7735
  %22 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !7736
  %call28 = call %union.tree_node* @lto_input_tree(%struct.lto_input_block* %21, %struct.data_in* %22), !dbg !7737
  %23 = load %struct.ipa_jump_func*, %struct.ipa_jump_func** %jump_func.addr, align 8, !dbg !7738
  %value29 = getelementptr inbounds %struct.ipa_jump_func, %struct.ipa_jump_func* %23, i32 0, i32 1, !dbg !7739
  %member_cst = bitcast %union.jump_func_value* %value29 to %struct.ipa_member_ptr_cst*, !dbg !7740
  %pfn = getelementptr inbounds %struct.ipa_member_ptr_cst, %struct.ipa_member_ptr_cst* %member_cst, i32 0, i32 0, !dbg !7741
  store %union.tree_node* %call28, %union.tree_node** %pfn, align 8, !dbg !7742
  %24 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !7743
  %25 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !7744
  %call30 = call %union.tree_node* @lto_input_tree(%struct.lto_input_block* %24, %struct.data_in* %25), !dbg !7745
  %26 = load %struct.ipa_jump_func*, %struct.ipa_jump_func** %jump_func.addr, align 8, !dbg !7746
  %value31 = getelementptr inbounds %struct.ipa_jump_func, %struct.ipa_jump_func* %26, i32 0, i32 1, !dbg !7747
  %member_cst32 = bitcast %union.jump_func_value* %value31 to %struct.ipa_member_ptr_cst*, !dbg !7748
  %delta = getelementptr inbounds %struct.ipa_member_ptr_cst, %struct.ipa_member_ptr_cst* %member_cst32, i32 0, i32 1, !dbg !7749
  store %union.tree_node* %call30, %union.tree_node** %delta, align 8, !dbg !7750
  br label %sw.epilog, !dbg !7751

sw.epilog:                                        ; preds = %entry, %sw.bb27, %sw.bb15, %sw.bb4, %sw.bb2, %sw.bb
  ret void, !dbg !7752
}

; Function Attrs: noinline nounwind uwtable
define internal void @ipa_read_param_call_note(%struct.lto_input_block* %ib, %struct.ipa_node_params* %info) #0 !dbg !7753 {
entry:
  %ib.addr = alloca %struct.lto_input_block*, align 8
  %info.addr = alloca %struct.ipa_node_params*, align 8
  %note = alloca %struct.ipa_param_call_note*, align 8
  store %struct.lto_input_block* %ib, %struct.lto_input_block** %ib.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.lto_input_block** %ib.addr, metadata !7756, metadata !DIExpression()), !dbg !7757
  store %struct.ipa_node_params* %info, %struct.ipa_node_params** %info.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ipa_node_params** %info.addr, metadata !7758, metadata !DIExpression()), !dbg !7759
  call void @llvm.dbg.declare(metadata %struct.ipa_param_call_note** %note, metadata !7760, metadata !DIExpression()), !dbg !7761
  %call = call i8* @xcalloc(i64 1, i64 40), !dbg !7762
  %0 = bitcast i8* %call to %struct.ipa_param_call_note*, !dbg !7762
  store %struct.ipa_param_call_note* %0, %struct.ipa_param_call_note** %note, align 8, !dbg !7761
  %1 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !7763
  %call1 = call i64 @lto_input_uleb128(%struct.lto_input_block* %1), !dbg !7764
  %conv = trunc i64 %call1 to i32, !dbg !7765
  %2 = load %struct.ipa_param_call_note*, %struct.ipa_param_call_note** %note, align 8, !dbg !7766
  %lto_stmt_uid = getelementptr inbounds %struct.ipa_param_call_note, %struct.ipa_param_call_note* %2, i32 0, i32 3, !dbg !7767
  store i32 %conv, i32* %lto_stmt_uid, align 8, !dbg !7768
  %3 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !7769
  %call2 = call i64 @lto_input_sleb128(%struct.lto_input_block* %3), !dbg !7770
  %conv3 = trunc i64 %call2 to i32, !dbg !7771
  %4 = load %struct.ipa_param_call_note*, %struct.ipa_param_call_note** %note, align 8, !dbg !7772
  %formal_id = getelementptr inbounds %struct.ipa_param_call_note, %struct.ipa_param_call_note* %4, i32 0, i32 4, !dbg !7773
  store i32 %conv3, i32* %formal_id, align 4, !dbg !7774
  %5 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !7775
  %call4 = call i64 @lto_input_sleb128(%struct.lto_input_block* %5), !dbg !7776
  %6 = load %struct.ipa_param_call_note*, %struct.ipa_param_call_note** %note, align 8, !dbg !7777
  %count = getelementptr inbounds %struct.ipa_param_call_note, %struct.ipa_param_call_note* %6, i32 0, i32 0, !dbg !7778
  store i64 %call4, i64* %count, align 8, !dbg !7779
  %7 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !7780
  %call5 = call i64 @lto_input_sleb128(%struct.lto_input_block* %7), !dbg !7781
  %conv6 = trunc i64 %call5 to i32, !dbg !7782
  %8 = load %struct.ipa_param_call_note*, %struct.ipa_param_call_note** %note, align 8, !dbg !7783
  %frequency = getelementptr inbounds %struct.ipa_param_call_note, %struct.ipa_param_call_note* %8, i32 0, i32 5, !dbg !7784
  store i32 %conv6, i32* %frequency, align 8, !dbg !7785
  %9 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !7786
  %call7 = call i64 @lto_input_sleb128(%struct.lto_input_block* %9), !dbg !7787
  %conv8 = trunc i64 %call7 to i32, !dbg !7788
  %conv9 = trunc i32 %conv8 to i16, !dbg !7788
  %10 = load %struct.ipa_param_call_note*, %struct.ipa_param_call_note** %note, align 8, !dbg !7789
  %loop_nest = getelementptr inbounds %struct.ipa_param_call_note, %struct.ipa_param_call_note* %10, i32 0, i32 6, !dbg !7790
  store i16 %conv9, i16* %loop_nest, align 4, !dbg !7791
  %11 = load %struct.ipa_node_params*, %struct.ipa_node_params** %info.addr, align 8, !dbg !7792
  %param_calls = getelementptr inbounds %struct.ipa_node_params, %struct.ipa_node_params* %11, i32 0, i32 2, !dbg !7793
  %12 = load %struct.ipa_param_call_note*, %struct.ipa_param_call_note** %param_calls, align 8, !dbg !7793
  %13 = load %struct.ipa_param_call_note*, %struct.ipa_param_call_note** %note, align 8, !dbg !7794
  %next = getelementptr inbounds %struct.ipa_param_call_note, %struct.ipa_param_call_note* %13, i32 0, i32 1, !dbg !7795
  store %struct.ipa_param_call_note* %12, %struct.ipa_param_call_note** %next, align 8, !dbg !7796
  %14 = load %struct.ipa_param_call_note*, %struct.ipa_param_call_note** %note, align 8, !dbg !7797
  %15 = load %struct.ipa_node_params*, %struct.ipa_node_params** %info.addr, align 8, !dbg !7798
  %param_calls10 = getelementptr inbounds %struct.ipa_node_params, %struct.ipa_node_params* %15, i32 0, i32 2, !dbg !7799
  store %struct.ipa_param_call_note* %14, %struct.ipa_param_call_note** %param_calls10, align 8, !dbg !7800
  ret void, !dbg !7801
}

declare dso_local %union.tree_node* @lto_input_tree(%struct.lto_input_block*, %struct.data_in*) #2

declare dso_local i64 @lto_input_sleb128(%struct.lto_input_block*) #2

attributes #0 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }

!llvm.dbg.cu = !{!2}
!llvm.module.flags = !{!2363, !2364, !2365}
!llvm.ident = !{!2366}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "ipa_node_params_vector", scope: !2, file: !3, line: 40, type: !2307, isLocal: false, isDefinition: true)
!2 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 10.0.1 (https://github.com/svkeerthy/IR2Vec-LoopOptimizationFramework.git 561ac470e63b728263a0ac06ef987886ac648486)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !739, globals: !2344, splitDebugInlining: false, nameTableKind: None)
!3 = !DIFile(filename: "ipa-prop.c", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!4 = !{!5, !201, !207, !212, !217, !235, !242, !249, !272, !279, !455, !461, !468, !602, !608, !612, !626, !640, !678, !691, !717, !723, !727}
!5 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_code", file: !6, line: 39, baseType: !7, size: 32, elements: !8)
!6 = !DIFile(filename: "./tree.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!7 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!8 = !{!9, !10, !11, !12, !13, !14, !15, !16, !17, !18, !19, !20, !21, !22, !23, !24, !25, !26, !27, !28, !29, !30, !31, !32, !33, !34, !35, !36, !37, !38, !39, !40, !41, !42, !43, !44, !45, !46, !47, !48, !49, !50, !51, !52, !53, !54, !55, !56, !57, !58, !59, !60, !61, !62, !63, !64, !65, !66, !67, !68, !69, !70, !71, !72, !73, !74, !75, !76, !77, !78, !79, !80, !81, !82, !83, !84, !85, !86, !87, !88, !89, !90, !91, !92, !93, !94, !95, !96, !97, !98, !99, !100, !101, !102, !103, !104, !105, !106, !107, !108, !109, !110, !111, !112, !113, !114, !115, !116, !117, !118, !119, !120, !121, !122, !123, !124, !125, !126, !127, !128, !129, !130, !131, !132, !133, !134, !135, !136, !137, !138, !139, !140, !141, !142, !143, !144, !145, !146, !147, !148, !149, !150, !151, !152, !153, !154, !155, !156, !157, !158, !159, !160, !161, !162, !163, !164, !165, !166, !167, !168, !169, !170, !171, !172, !173, !174, !175, !176, !177, !178, !179, !180, !181, !182, !183, !184, !185, !186, !187, !188, !189, !190, !191, !192, !193, !194, !195, !196, !197, !198, !199, !200}
!9 = !DIEnumerator(name: "ERROR_MARK", value: 0, isUnsigned: true)
!10 = !DIEnumerator(name: "IDENTIFIER_NODE", value: 1, isUnsigned: true)
!11 = !DIEnumerator(name: "TREE_LIST", value: 2, isUnsigned: true)
!12 = !DIEnumerator(name: "TREE_VEC", value: 3, isUnsigned: true)
!13 = !DIEnumerator(name: "BLOCK", value: 4, isUnsigned: true)
!14 = !DIEnumerator(name: "OFFSET_TYPE", value: 5, isUnsigned: true)
!15 = !DIEnumerator(name: "ENUMERAL_TYPE", value: 6, isUnsigned: true)
!16 = !DIEnumerator(name: "BOOLEAN_TYPE", value: 7, isUnsigned: true)
!17 = !DIEnumerator(name: "INTEGER_TYPE", value: 8, isUnsigned: true)
!18 = !DIEnumerator(name: "REAL_TYPE", value: 9, isUnsigned: true)
!19 = !DIEnumerator(name: "POINTER_TYPE", value: 10, isUnsigned: true)
!20 = !DIEnumerator(name: "FIXED_POINT_TYPE", value: 11, isUnsigned: true)
!21 = !DIEnumerator(name: "REFERENCE_TYPE", value: 12, isUnsigned: true)
!22 = !DIEnumerator(name: "COMPLEX_TYPE", value: 13, isUnsigned: true)
!23 = !DIEnumerator(name: "VECTOR_TYPE", value: 14, isUnsigned: true)
!24 = !DIEnumerator(name: "ARRAY_TYPE", value: 15, isUnsigned: true)
!25 = !DIEnumerator(name: "RECORD_TYPE", value: 16, isUnsigned: true)
!26 = !DIEnumerator(name: "UNION_TYPE", value: 17, isUnsigned: true)
!27 = !DIEnumerator(name: "QUAL_UNION_TYPE", value: 18, isUnsigned: true)
!28 = !DIEnumerator(name: "VOID_TYPE", value: 19, isUnsigned: true)
!29 = !DIEnumerator(name: "FUNCTION_TYPE", value: 20, isUnsigned: true)
!30 = !DIEnumerator(name: "METHOD_TYPE", value: 21, isUnsigned: true)
!31 = !DIEnumerator(name: "LANG_TYPE", value: 22, isUnsigned: true)
!32 = !DIEnumerator(name: "INTEGER_CST", value: 23, isUnsigned: true)
!33 = !DIEnumerator(name: "REAL_CST", value: 24, isUnsigned: true)
!34 = !DIEnumerator(name: "FIXED_CST", value: 25, isUnsigned: true)
!35 = !DIEnumerator(name: "COMPLEX_CST", value: 26, isUnsigned: true)
!36 = !DIEnumerator(name: "VECTOR_CST", value: 27, isUnsigned: true)
!37 = !DIEnumerator(name: "STRING_CST", value: 28, isUnsigned: true)
!38 = !DIEnumerator(name: "FUNCTION_DECL", value: 29, isUnsigned: true)
!39 = !DIEnumerator(name: "LABEL_DECL", value: 30, isUnsigned: true)
!40 = !DIEnumerator(name: "FIELD_DECL", value: 31, isUnsigned: true)
!41 = !DIEnumerator(name: "VAR_DECL", value: 32, isUnsigned: true)
!42 = !DIEnumerator(name: "CONST_DECL", value: 33, isUnsigned: true)
!43 = !DIEnumerator(name: "PARM_DECL", value: 34, isUnsigned: true)
!44 = !DIEnumerator(name: "TYPE_DECL", value: 35, isUnsigned: true)
!45 = !DIEnumerator(name: "RESULT_DECL", value: 36, isUnsigned: true)
!46 = !DIEnumerator(name: "DEBUG_EXPR_DECL", value: 37, isUnsigned: true)
!47 = !DIEnumerator(name: "NAMESPACE_DECL", value: 38, isUnsigned: true)
!48 = !DIEnumerator(name: "IMPORTED_DECL", value: 39, isUnsigned: true)
!49 = !DIEnumerator(name: "TRANSLATION_UNIT_DECL", value: 40, isUnsigned: true)
!50 = !DIEnumerator(name: "COMPONENT_REF", value: 41, isUnsigned: true)
!51 = !DIEnumerator(name: "BIT_FIELD_REF", value: 42, isUnsigned: true)
!52 = !DIEnumerator(name: "REALPART_EXPR", value: 43, isUnsigned: true)
!53 = !DIEnumerator(name: "IMAGPART_EXPR", value: 44, isUnsigned: true)
!54 = !DIEnumerator(name: "ARRAY_REF", value: 45, isUnsigned: true)
!55 = !DIEnumerator(name: "ARRAY_RANGE_REF", value: 46, isUnsigned: true)
!56 = !DIEnumerator(name: "INDIRECT_REF", value: 47, isUnsigned: true)
!57 = !DIEnumerator(name: "ALIGN_INDIRECT_REF", value: 48, isUnsigned: true)
!58 = !DIEnumerator(name: "MISALIGNED_INDIRECT_REF", value: 49, isUnsigned: true)
!59 = !DIEnumerator(name: "OBJ_TYPE_REF", value: 50, isUnsigned: true)
!60 = !DIEnumerator(name: "CONSTRUCTOR", value: 51, isUnsigned: true)
!61 = !DIEnumerator(name: "COMPOUND_EXPR", value: 52, isUnsigned: true)
!62 = !DIEnumerator(name: "MODIFY_EXPR", value: 53, isUnsigned: true)
!63 = !DIEnumerator(name: "INIT_EXPR", value: 54, isUnsigned: true)
!64 = !DIEnumerator(name: "TARGET_EXPR", value: 55, isUnsigned: true)
!65 = !DIEnumerator(name: "COND_EXPR", value: 56, isUnsigned: true)
!66 = !DIEnumerator(name: "VEC_COND_EXPR", value: 57, isUnsigned: true)
!67 = !DIEnumerator(name: "BIND_EXPR", value: 58, isUnsigned: true)
!68 = !DIEnumerator(name: "CALL_EXPR", value: 59, isUnsigned: true)
!69 = !DIEnumerator(name: "WITH_CLEANUP_EXPR", value: 60, isUnsigned: true)
!70 = !DIEnumerator(name: "CLEANUP_POINT_EXPR", value: 61, isUnsigned: true)
!71 = !DIEnumerator(name: "PLACEHOLDER_EXPR", value: 62, isUnsigned: true)
!72 = !DIEnumerator(name: "PLUS_EXPR", value: 63, isUnsigned: true)
!73 = !DIEnumerator(name: "MINUS_EXPR", value: 64, isUnsigned: true)
!74 = !DIEnumerator(name: "MULT_EXPR", value: 65, isUnsigned: true)
!75 = !DIEnumerator(name: "POINTER_PLUS_EXPR", value: 66, isUnsigned: true)
!76 = !DIEnumerator(name: "TRUNC_DIV_EXPR", value: 67, isUnsigned: true)
!77 = !DIEnumerator(name: "CEIL_DIV_EXPR", value: 68, isUnsigned: true)
!78 = !DIEnumerator(name: "FLOOR_DIV_EXPR", value: 69, isUnsigned: true)
!79 = !DIEnumerator(name: "ROUND_DIV_EXPR", value: 70, isUnsigned: true)
!80 = !DIEnumerator(name: "TRUNC_MOD_EXPR", value: 71, isUnsigned: true)
!81 = !DIEnumerator(name: "CEIL_MOD_EXPR", value: 72, isUnsigned: true)
!82 = !DIEnumerator(name: "FLOOR_MOD_EXPR", value: 73, isUnsigned: true)
!83 = !DIEnumerator(name: "ROUND_MOD_EXPR", value: 74, isUnsigned: true)
!84 = !DIEnumerator(name: "RDIV_EXPR", value: 75, isUnsigned: true)
!85 = !DIEnumerator(name: "EXACT_DIV_EXPR", value: 76, isUnsigned: true)
!86 = !DIEnumerator(name: "FIX_TRUNC_EXPR", value: 77, isUnsigned: true)
!87 = !DIEnumerator(name: "FLOAT_EXPR", value: 78, isUnsigned: true)
!88 = !DIEnumerator(name: "NEGATE_EXPR", value: 79, isUnsigned: true)
!89 = !DIEnumerator(name: "MIN_EXPR", value: 80, isUnsigned: true)
!90 = !DIEnumerator(name: "MAX_EXPR", value: 81, isUnsigned: true)
!91 = !DIEnumerator(name: "ABS_EXPR", value: 82, isUnsigned: true)
!92 = !DIEnumerator(name: "LSHIFT_EXPR", value: 83, isUnsigned: true)
!93 = !DIEnumerator(name: "RSHIFT_EXPR", value: 84, isUnsigned: true)
!94 = !DIEnumerator(name: "LROTATE_EXPR", value: 85, isUnsigned: true)
!95 = !DIEnumerator(name: "RROTATE_EXPR", value: 86, isUnsigned: true)
!96 = !DIEnumerator(name: "BIT_IOR_EXPR", value: 87, isUnsigned: true)
!97 = !DIEnumerator(name: "BIT_XOR_EXPR", value: 88, isUnsigned: true)
!98 = !DIEnumerator(name: "BIT_AND_EXPR", value: 89, isUnsigned: true)
!99 = !DIEnumerator(name: "BIT_NOT_EXPR", value: 90, isUnsigned: true)
!100 = !DIEnumerator(name: "TRUTH_ANDIF_EXPR", value: 91, isUnsigned: true)
!101 = !DIEnumerator(name: "TRUTH_ORIF_EXPR", value: 92, isUnsigned: true)
!102 = !DIEnumerator(name: "TRUTH_AND_EXPR", value: 93, isUnsigned: true)
!103 = !DIEnumerator(name: "TRUTH_OR_EXPR", value: 94, isUnsigned: true)
!104 = !DIEnumerator(name: "TRUTH_XOR_EXPR", value: 95, isUnsigned: true)
!105 = !DIEnumerator(name: "TRUTH_NOT_EXPR", value: 96, isUnsigned: true)
!106 = !DIEnumerator(name: "LT_EXPR", value: 97, isUnsigned: true)
!107 = !DIEnumerator(name: "LE_EXPR", value: 98, isUnsigned: true)
!108 = !DIEnumerator(name: "GT_EXPR", value: 99, isUnsigned: true)
!109 = !DIEnumerator(name: "GE_EXPR", value: 100, isUnsigned: true)
!110 = !DIEnumerator(name: "EQ_EXPR", value: 101, isUnsigned: true)
!111 = !DIEnumerator(name: "NE_EXPR", value: 102, isUnsigned: true)
!112 = !DIEnumerator(name: "UNORDERED_EXPR", value: 103, isUnsigned: true)
!113 = !DIEnumerator(name: "ORDERED_EXPR", value: 104, isUnsigned: true)
!114 = !DIEnumerator(name: "UNLT_EXPR", value: 105, isUnsigned: true)
!115 = !DIEnumerator(name: "UNLE_EXPR", value: 106, isUnsigned: true)
!116 = !DIEnumerator(name: "UNGT_EXPR", value: 107, isUnsigned: true)
!117 = !DIEnumerator(name: "UNGE_EXPR", value: 108, isUnsigned: true)
!118 = !DIEnumerator(name: "UNEQ_EXPR", value: 109, isUnsigned: true)
!119 = !DIEnumerator(name: "LTGT_EXPR", value: 110, isUnsigned: true)
!120 = !DIEnumerator(name: "RANGE_EXPR", value: 111, isUnsigned: true)
!121 = !DIEnumerator(name: "PAREN_EXPR", value: 112, isUnsigned: true)
!122 = !DIEnumerator(name: "CONVERT_EXPR", value: 113, isUnsigned: true)
!123 = !DIEnumerator(name: "ADDR_SPACE_CONVERT_EXPR", value: 114, isUnsigned: true)
!124 = !DIEnumerator(name: "FIXED_CONVERT_EXPR", value: 115, isUnsigned: true)
!125 = !DIEnumerator(name: "NOP_EXPR", value: 116, isUnsigned: true)
!126 = !DIEnumerator(name: "NON_LVALUE_EXPR", value: 117, isUnsigned: true)
!127 = !DIEnumerator(name: "VIEW_CONVERT_EXPR", value: 118, isUnsigned: true)
!128 = !DIEnumerator(name: "COMPOUND_LITERAL_EXPR", value: 119, isUnsigned: true)
!129 = !DIEnumerator(name: "SAVE_EXPR", value: 120, isUnsigned: true)
!130 = !DIEnumerator(name: "ADDR_EXPR", value: 121, isUnsigned: true)
!131 = !DIEnumerator(name: "FDESC_EXPR", value: 122, isUnsigned: true)
!132 = !DIEnumerator(name: "COMPLEX_EXPR", value: 123, isUnsigned: true)
!133 = !DIEnumerator(name: "CONJ_EXPR", value: 124, isUnsigned: true)
!134 = !DIEnumerator(name: "PREDECREMENT_EXPR", value: 125, isUnsigned: true)
!135 = !DIEnumerator(name: "PREINCREMENT_EXPR", value: 126, isUnsigned: true)
!136 = !DIEnumerator(name: "POSTDECREMENT_EXPR", value: 127, isUnsigned: true)
!137 = !DIEnumerator(name: "POSTINCREMENT_EXPR", value: 128, isUnsigned: true)
!138 = !DIEnumerator(name: "VA_ARG_EXPR", value: 129, isUnsigned: true)
!139 = !DIEnumerator(name: "TRY_CATCH_EXPR", value: 130, isUnsigned: true)
!140 = !DIEnumerator(name: "TRY_FINALLY_EXPR", value: 131, isUnsigned: true)
!141 = !DIEnumerator(name: "DECL_EXPR", value: 132, isUnsigned: true)
!142 = !DIEnumerator(name: "LABEL_EXPR", value: 133, isUnsigned: true)
!143 = !DIEnumerator(name: "GOTO_EXPR", value: 134, isUnsigned: true)
!144 = !DIEnumerator(name: "RETURN_EXPR", value: 135, isUnsigned: true)
!145 = !DIEnumerator(name: "EXIT_EXPR", value: 136, isUnsigned: true)
!146 = !DIEnumerator(name: "LOOP_EXPR", value: 137, isUnsigned: true)
!147 = !DIEnumerator(name: "SWITCH_EXPR", value: 138, isUnsigned: true)
!148 = !DIEnumerator(name: "CASE_LABEL_EXPR", value: 139, isUnsigned: true)
!149 = !DIEnumerator(name: "ASM_EXPR", value: 140, isUnsigned: true)
!150 = !DIEnumerator(name: "SSA_NAME", value: 141, isUnsigned: true)
!151 = !DIEnumerator(name: "CATCH_EXPR", value: 142, isUnsigned: true)
!152 = !DIEnumerator(name: "EH_FILTER_EXPR", value: 143, isUnsigned: true)
!153 = !DIEnumerator(name: "SCEV_KNOWN", value: 144, isUnsigned: true)
!154 = !DIEnumerator(name: "SCEV_NOT_KNOWN", value: 145, isUnsigned: true)
!155 = !DIEnumerator(name: "POLYNOMIAL_CHREC", value: 146, isUnsigned: true)
!156 = !DIEnumerator(name: "STATEMENT_LIST", value: 147, isUnsigned: true)
!157 = !DIEnumerator(name: "ASSERT_EXPR", value: 148, isUnsigned: true)
!158 = !DIEnumerator(name: "TREE_BINFO", value: 149, isUnsigned: true)
!159 = !DIEnumerator(name: "WITH_SIZE_EXPR", value: 150, isUnsigned: true)
!160 = !DIEnumerator(name: "REALIGN_LOAD_EXPR", value: 151, isUnsigned: true)
!161 = !DIEnumerator(name: "TARGET_MEM_REF", value: 152, isUnsigned: true)
!162 = !DIEnumerator(name: "OMP_PARALLEL", value: 153, isUnsigned: true)
!163 = !DIEnumerator(name: "OMP_TASK", value: 154, isUnsigned: true)
!164 = !DIEnumerator(name: "OMP_FOR", value: 155, isUnsigned: true)
!165 = !DIEnumerator(name: "OMP_SECTIONS", value: 156, isUnsigned: true)
!166 = !DIEnumerator(name: "OMP_SINGLE", value: 157, isUnsigned: true)
!167 = !DIEnumerator(name: "OMP_SECTION", value: 158, isUnsigned: true)
!168 = !DIEnumerator(name: "OMP_MASTER", value: 159, isUnsigned: true)
!169 = !DIEnumerator(name: "OMP_ORDERED", value: 160, isUnsigned: true)
!170 = !DIEnumerator(name: "OMP_CRITICAL", value: 161, isUnsigned: true)
!171 = !DIEnumerator(name: "OMP_ATOMIC", value: 162, isUnsigned: true)
!172 = !DIEnumerator(name: "OMP_CLAUSE", value: 163, isUnsigned: true)
!173 = !DIEnumerator(name: "REDUC_MAX_EXPR", value: 164, isUnsigned: true)
!174 = !DIEnumerator(name: "REDUC_MIN_EXPR", value: 165, isUnsigned: true)
!175 = !DIEnumerator(name: "REDUC_PLUS_EXPR", value: 166, isUnsigned: true)
!176 = !DIEnumerator(name: "DOT_PROD_EXPR", value: 167, isUnsigned: true)
!177 = !DIEnumerator(name: "WIDEN_SUM_EXPR", value: 168, isUnsigned: true)
!178 = !DIEnumerator(name: "WIDEN_MULT_EXPR", value: 169, isUnsigned: true)
!179 = !DIEnumerator(name: "VEC_LSHIFT_EXPR", value: 170, isUnsigned: true)
!180 = !DIEnumerator(name: "VEC_RSHIFT_EXPR", value: 171, isUnsigned: true)
!181 = !DIEnumerator(name: "VEC_WIDEN_MULT_HI_EXPR", value: 172, isUnsigned: true)
!182 = !DIEnumerator(name: "VEC_WIDEN_MULT_LO_EXPR", value: 173, isUnsigned: true)
!183 = !DIEnumerator(name: "VEC_UNPACK_HI_EXPR", value: 174, isUnsigned: true)
!184 = !DIEnumerator(name: "VEC_UNPACK_LO_EXPR", value: 175, isUnsigned: true)
!185 = !DIEnumerator(name: "VEC_UNPACK_FLOAT_HI_EXPR", value: 176, isUnsigned: true)
!186 = !DIEnumerator(name: "VEC_UNPACK_FLOAT_LO_EXPR", value: 177, isUnsigned: true)
!187 = !DIEnumerator(name: "VEC_PACK_TRUNC_EXPR", value: 178, isUnsigned: true)
!188 = !DIEnumerator(name: "VEC_PACK_SAT_EXPR", value: 179, isUnsigned: true)
!189 = !DIEnumerator(name: "VEC_PACK_FIX_TRUNC_EXPR", value: 180, isUnsigned: true)
!190 = !DIEnumerator(name: "VEC_EXTRACT_EVEN_EXPR", value: 181, isUnsigned: true)
!191 = !DIEnumerator(name: "VEC_EXTRACT_ODD_EXPR", value: 182, isUnsigned: true)
!192 = !DIEnumerator(name: "VEC_INTERLEAVE_HIGH_EXPR", value: 183, isUnsigned: true)
!193 = !DIEnumerator(name: "VEC_INTERLEAVE_LOW_EXPR", value: 184, isUnsigned: true)
!194 = !DIEnumerator(name: "PREDICT_EXPR", value: 185, isUnsigned: true)
!195 = !DIEnumerator(name: "OPTIMIZATION_NODE", value: 186, isUnsigned: true)
!196 = !DIEnumerator(name: "TARGET_OPTION_NODE", value: 187, isUnsigned: true)
!197 = !DIEnumerator(name: "LAST_AND_UNUSED_TREE_CODE", value: 188, isUnsigned: true)
!198 = !DIEnumerator(name: "C_MAYBE_CONST_EXPR", value: 189, isUnsigned: true)
!199 = !DIEnumerator(name: "EXCESS_PRECISION_EXPR", value: 190, isUnsigned: true)
!200 = !DIEnumerator(name: "MAX_TREE_CODES", value: 191, isUnsigned: true)
!201 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "profile_status_d", file: !202, line: 363, baseType: !7, size: 32, elements: !203)
!202 = !DIFile(filename: "./basic-block.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!203 = !{!204, !205, !206}
!204 = !DIEnumerator(name: "PROFILE_ABSENT", value: 0, isUnsigned: true)
!205 = !DIEnumerator(name: "PROFILE_GUESSED", value: 1, isUnsigned: true)
!206 = !DIEnumerator(name: "PROFILE_READ", value: 2, isUnsigned: true)
!207 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "dom_state", file: !202, line: 355, baseType: !7, size: 32, elements: !208)
!208 = !{!209, !210, !211}
!209 = !DIEnumerator(name: "DOM_NONE", value: 0, isUnsigned: true)
!210 = !DIEnumerator(name: "DOM_NO_FAST_QUERY", value: 1, isUnsigned: true)
!211 = !DIEnumerator(name: "DOM_OK", value: 2, isUnsigned: true)
!212 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "calling_abi", file: !213, line: 474, baseType: !7, size: 32, elements: !214)
!213 = !DIFile(filename: "./config/i386/i386.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!214 = !{!215, !216}
!215 = !DIEnumerator(name: "SYSV_ABI", value: 0, isUnsigned: true)
!216 = !DIEnumerator(name: "MS_ABI", value: 1, isUnsigned: true)
!217 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_code", file: !6, line: 280, baseType: !7, size: 32, elements: !218)
!218 = !{!219, !220, !221, !222, !223, !224, !225, !226, !227, !228, !229, !230, !231, !232, !233, !234}
!219 = !DIEnumerator(name: "OMP_CLAUSE_ERROR", value: 0, isUnsigned: true)
!220 = !DIEnumerator(name: "OMP_CLAUSE_PRIVATE", value: 1, isUnsigned: true)
!221 = !DIEnumerator(name: "OMP_CLAUSE_SHARED", value: 2, isUnsigned: true)
!222 = !DIEnumerator(name: "OMP_CLAUSE_FIRSTPRIVATE", value: 3, isUnsigned: true)
!223 = !DIEnumerator(name: "OMP_CLAUSE_LASTPRIVATE", value: 4, isUnsigned: true)
!224 = !DIEnumerator(name: "OMP_CLAUSE_REDUCTION", value: 5, isUnsigned: true)
!225 = !DIEnumerator(name: "OMP_CLAUSE_COPYIN", value: 6, isUnsigned: true)
!226 = !DIEnumerator(name: "OMP_CLAUSE_COPYPRIVATE", value: 7, isUnsigned: true)
!227 = !DIEnumerator(name: "OMP_CLAUSE_IF", value: 8, isUnsigned: true)
!228 = !DIEnumerator(name: "OMP_CLAUSE_NUM_THREADS", value: 9, isUnsigned: true)
!229 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE", value: 10, isUnsigned: true)
!230 = !DIEnumerator(name: "OMP_CLAUSE_NOWAIT", value: 11, isUnsigned: true)
!231 = !DIEnumerator(name: "OMP_CLAUSE_ORDERED", value: 12, isUnsigned: true)
!232 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT", value: 13, isUnsigned: true)
!233 = !DIEnumerator(name: "OMP_CLAUSE_COLLAPSE", value: 14, isUnsigned: true)
!234 = !DIEnumerator(name: "OMP_CLAUSE_UNTIED", value: 15, isUnsigned: true)
!235 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_default_kind", file: !6, line: 1817, baseType: !7, size: 32, elements: !236)
!236 = !{!237, !238, !239, !240, !241}
!237 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_UNSPECIFIED", value: 0, isUnsigned: true)
!238 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_SHARED", value: 1, isUnsigned: true)
!239 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_NONE", value: 2, isUnsigned: true)
!240 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_PRIVATE", value: 3, isUnsigned: true)
!241 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_FIRSTPRIVATE", value: 4, isUnsigned: true)
!242 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_schedule_kind", file: !6, line: 1805, baseType: !7, size: 32, elements: !243)
!243 = !{!244, !245, !246, !247, !248}
!244 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_STATIC", value: 0, isUnsigned: true)
!245 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_DYNAMIC", value: 1, isUnsigned: true)
!246 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_GUIDED", value: 2, isUnsigned: true)
!247 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_AUTO", value: 3, isUnsigned: true)
!248 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_RUNTIME", value: 4, isUnsigned: true)
!249 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !250, line: 309, baseType: !7, size: 32, elements: !251)
!250 = !DIFile(filename: "./cgraph.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!251 = !{!252, !253, !254, !255, !256, !257, !258, !259, !260, !261, !262, !263, !264, !265, !266, !267, !268, !269, !270, !271}
!252 = !DIEnumerator(name: "CIF_OK", value: 0, isUnsigned: true)
!253 = !DIEnumerator(name: "CIF_UNSPECIFIED", value: 1, isUnsigned: true)
!254 = !DIEnumerator(name: "CIF_FUNCTION_NOT_CONSIDERED", value: 2, isUnsigned: true)
!255 = !DIEnumerator(name: "CIF_BODY_NOT_AVAILABLE", value: 3, isUnsigned: true)
!256 = !DIEnumerator(name: "CIF_REDEFINED_EXTERN_INLINE", value: 4, isUnsigned: true)
!257 = !DIEnumerator(name: "CIF_FUNCTION_NOT_INLINABLE", value: 5, isUnsigned: true)
!258 = !DIEnumerator(name: "CIF_FUNCTION_NOT_INLINE_CANDIDATE", value: 6, isUnsigned: true)
!259 = !DIEnumerator(name: "CIF_LARGE_FUNCTION_GROWTH_LIMIT", value: 7, isUnsigned: true)
!260 = !DIEnumerator(name: "CIF_LARGE_STACK_FRAME_GROWTH_LIMIT", value: 8, isUnsigned: true)
!261 = !DIEnumerator(name: "CIF_MAX_INLINE_INSNS_SINGLE_LIMIT", value: 9, isUnsigned: true)
!262 = !DIEnumerator(name: "CIF_MAX_INLINE_INSNS_AUTO_LIMIT", value: 10, isUnsigned: true)
!263 = !DIEnumerator(name: "CIF_INLINE_UNIT_GROWTH_LIMIT", value: 11, isUnsigned: true)
!264 = !DIEnumerator(name: "CIF_RECURSIVE_INLINING", value: 12, isUnsigned: true)
!265 = !DIEnumerator(name: "CIF_UNLIKELY_CALL", value: 13, isUnsigned: true)
!266 = !DIEnumerator(name: "CIF_NOT_DECLARED_INLINED", value: 14, isUnsigned: true)
!267 = !DIEnumerator(name: "CIF_OPTIMIZING_FOR_SIZE", value: 15, isUnsigned: true)
!268 = !DIEnumerator(name: "CIF_TARGET_OPTION_MISMATCH", value: 16, isUnsigned: true)
!269 = !DIEnumerator(name: "CIF_MISMATCHED_ARGUMENTS", value: 17, isUnsigned: true)
!270 = !DIEnumerator(name: "CIF_ORIGINALLY_INDIRECT_CALL", value: 18, isUnsigned: true)
!271 = !DIEnumerator(name: "CIF_N_REASONS", value: 19, isUnsigned: true)
!272 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "opt_pass_type", file: !273, line: 104, baseType: !7, size: 32, elements: !274)
!273 = !DIFile(filename: "./tree-pass.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!274 = !{!275, !276, !277, !278}
!275 = !DIEnumerator(name: "GIMPLE_PASS", value: 0, isUnsigned: true)
!276 = !DIEnumerator(name: "RTL_PASS", value: 1, isUnsigned: true)
!277 = !DIEnumerator(name: "SIMPLE_IPA_PASS", value: 2, isUnsigned: true)
!278 = !DIEnumerator(name: "IPA_PASS", value: 3, isUnsigned: true)
!279 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !280, line: 74, baseType: !7, size: 32, elements: !281)
!280 = !DIFile(filename: "./timevar.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!281 = !{!282, !283, !284, !285, !286, !287, !288, !289, !290, !291, !292, !293, !294, !295, !296, !297, !298, !299, !300, !301, !302, !303, !304, !305, !306, !307, !308, !309, !310, !311, !312, !313, !314, !315, !316, !317, !318, !319, !320, !321, !322, !323, !324, !325, !326, !327, !328, !329, !330, !331, !332, !333, !334, !335, !336, !337, !338, !339, !340, !341, !342, !343, !344, !345, !346, !347, !348, !349, !350, !351, !352, !353, !354, !355, !356, !357, !358, !359, !360, !361, !362, !363, !364, !365, !366, !367, !368, !369, !370, !371, !372, !373, !374, !375, !376, !377, !378, !379, !380, !381, !382, !383, !384, !385, !386, !387, !388, !389, !390, !391, !392, !393, !394, !395, !396, !397, !398, !399, !400, !401, !402, !403, !404, !405, !406, !407, !408, !409, !410, !411, !412, !413, !414, !415, !416, !417, !418, !419, !420, !421, !422, !423, !424, !425, !426, !427, !428, !429, !430, !431, !432, !433, !434, !435, !436, !437, !438, !439, !440, !441, !442, !443, !444, !445, !446, !447, !448, !449, !450, !451, !452, !453, !454}
!282 = !DIEnumerator(name: "TV_NONE", value: 0, isUnsigned: true)
!283 = !DIEnumerator(name: "TV_TOTAL", value: 1, isUnsigned: true)
!284 = !DIEnumerator(name: "TV_GC", value: 2, isUnsigned: true)
!285 = !DIEnumerator(name: "TV_DUMP", value: 3, isUnsigned: true)
!286 = !DIEnumerator(name: "TV_CGRAPH", value: 4, isUnsigned: true)
!287 = !DIEnumerator(name: "TV_CGRAPHOPT", value: 5, isUnsigned: true)
!288 = !DIEnumerator(name: "TV_IPA_CONSTANT_PROP", value: 6, isUnsigned: true)
!289 = !DIEnumerator(name: "TV_IPA_LTO_GIMPLE_IO", value: 7, isUnsigned: true)
!290 = !DIEnumerator(name: "TV_IPA_LTO_DECL_IO", value: 8, isUnsigned: true)
!291 = !DIEnumerator(name: "TV_IPA_LTO_CGRAPH_IO", value: 9, isUnsigned: true)
!292 = !DIEnumerator(name: "TV_LTO", value: 10, isUnsigned: true)
!293 = !DIEnumerator(name: "TV_WHOPR_WPA", value: 11, isUnsigned: true)
!294 = !DIEnumerator(name: "TV_WHOPR_WPA_IO", value: 12, isUnsigned: true)
!295 = !DIEnumerator(name: "TV_WHOPR_LTRANS", value: 13, isUnsigned: true)
!296 = !DIEnumerator(name: "TV_WHOPR_WPA_FIXUP", value: 14, isUnsigned: true)
!297 = !DIEnumerator(name: "TV_WHOPR_WPA_LTRANS_EXEC", value: 15, isUnsigned: true)
!298 = !DIEnumerator(name: "TV_IPA_REFERENCE", value: 16, isUnsigned: true)
!299 = !DIEnumerator(name: "TV_IPA_PURE_CONST", value: 17, isUnsigned: true)
!300 = !DIEnumerator(name: "TV_IPA_TYPE_ESCAPE", value: 18, isUnsigned: true)
!301 = !DIEnumerator(name: "TV_IPA_PTA", value: 19, isUnsigned: true)
!302 = !DIEnumerator(name: "TV_IPA_SRA", value: 20, isUnsigned: true)
!303 = !DIEnumerator(name: "TV_IPA_FREE_LANG_DATA", value: 21, isUnsigned: true)
!304 = !DIEnumerator(name: "TV_CFG", value: 22, isUnsigned: true)
!305 = !DIEnumerator(name: "TV_CLEANUP_CFG", value: 23, isUnsigned: true)
!306 = !DIEnumerator(name: "TV_CFG_VERIFY", value: 24, isUnsigned: true)
!307 = !DIEnumerator(name: "TV_DELETE_TRIVIALLY_DEAD", value: 25, isUnsigned: true)
!308 = !DIEnumerator(name: "TV_LIFE", value: 26, isUnsigned: true)
!309 = !DIEnumerator(name: "TV_LIFE_UPDATE", value: 27, isUnsigned: true)
!310 = !DIEnumerator(name: "TV_DF_SCAN", value: 28, isUnsigned: true)
!311 = !DIEnumerator(name: "TV_DF_MD", value: 29, isUnsigned: true)
!312 = !DIEnumerator(name: "TV_DF_RD", value: 30, isUnsigned: true)
!313 = !DIEnumerator(name: "TV_DF_LR", value: 31, isUnsigned: true)
!314 = !DIEnumerator(name: "TV_DF_LIVE", value: 32, isUnsigned: true)
!315 = !DIEnumerator(name: "TV_DF_UREC", value: 33, isUnsigned: true)
!316 = !DIEnumerator(name: "TV_DF_CHAIN", value: 34, isUnsigned: true)
!317 = !DIEnumerator(name: "TV_DF_BYTE_LR", value: 35, isUnsigned: true)
!318 = !DIEnumerator(name: "TV_DF_NOTE", value: 36, isUnsigned: true)
!319 = !DIEnumerator(name: "TV_REG_STATS", value: 37, isUnsigned: true)
!320 = !DIEnumerator(name: "TV_ALIAS_ANALYSIS", value: 38, isUnsigned: true)
!321 = !DIEnumerator(name: "TV_ALIAS_STMT_WALK", value: 39, isUnsigned: true)
!322 = !DIEnumerator(name: "TV_REG_SCAN", value: 40, isUnsigned: true)
!323 = !DIEnumerator(name: "TV_REBUILD_JUMP", value: 41, isUnsigned: true)
!324 = !DIEnumerator(name: "TV_CPP", value: 42, isUnsigned: true)
!325 = !DIEnumerator(name: "TV_LEX", value: 43, isUnsigned: true)
!326 = !DIEnumerator(name: "TV_PARSE", value: 44, isUnsigned: true)
!327 = !DIEnumerator(name: "TV_NAME_LOOKUP", value: 45, isUnsigned: true)
!328 = !DIEnumerator(name: "TV_INLINE_HEURISTICS", value: 46, isUnsigned: true)
!329 = !DIEnumerator(name: "TV_INTEGRATION", value: 47, isUnsigned: true)
!330 = !DIEnumerator(name: "TV_TREE_GIMPLIFY", value: 48, isUnsigned: true)
!331 = !DIEnumerator(name: "TV_TREE_EH", value: 49, isUnsigned: true)
!332 = !DIEnumerator(name: "TV_TREE_CFG", value: 50, isUnsigned: true)
!333 = !DIEnumerator(name: "TV_TREE_CLEANUP_CFG", value: 51, isUnsigned: true)
!334 = !DIEnumerator(name: "TV_TREE_VRP", value: 52, isUnsigned: true)
!335 = !DIEnumerator(name: "TV_TREE_COPY_PROP", value: 53, isUnsigned: true)
!336 = !DIEnumerator(name: "TV_TREE_STORE_COPY_PROP", value: 54, isUnsigned: true)
!337 = !DIEnumerator(name: "TV_FIND_REFERENCED_VARS", value: 55, isUnsigned: true)
!338 = !DIEnumerator(name: "TV_TREE_PTA", value: 56, isUnsigned: true)
!339 = !DIEnumerator(name: "TV_TREE_INSERT_PHI_NODES", value: 57, isUnsigned: true)
!340 = !DIEnumerator(name: "TV_TREE_SSA_REWRITE_BLOCKS", value: 58, isUnsigned: true)
!341 = !DIEnumerator(name: "TV_TREE_SSA_OTHER", value: 59, isUnsigned: true)
!342 = !DIEnumerator(name: "TV_TREE_SSA_INCREMENTAL", value: 60, isUnsigned: true)
!343 = !DIEnumerator(name: "TV_TREE_OPS", value: 61, isUnsigned: true)
!344 = !DIEnumerator(name: "TV_TREE_SSA_DOMINATOR_OPTS", value: 62, isUnsigned: true)
!345 = !DIEnumerator(name: "TV_TREE_SRA", value: 63, isUnsigned: true)
!346 = !DIEnumerator(name: "TV_TREE_STORE_CCP", value: 64, isUnsigned: true)
!347 = !DIEnumerator(name: "TV_TREE_CCP", value: 65, isUnsigned: true)
!348 = !DIEnumerator(name: "TV_TREE_PHI_CPROP", value: 66, isUnsigned: true)
!349 = !DIEnumerator(name: "TV_TREE_SPLIT_EDGES", value: 67, isUnsigned: true)
!350 = !DIEnumerator(name: "TV_TREE_REASSOC", value: 68, isUnsigned: true)
!351 = !DIEnumerator(name: "TV_TREE_PRE", value: 69, isUnsigned: true)
!352 = !DIEnumerator(name: "TV_TREE_REDPHI", value: 70, isUnsigned: true)
!353 = !DIEnumerator(name: "TV_TREE_FRE", value: 71, isUnsigned: true)
!354 = !DIEnumerator(name: "TV_TREE_SINK", value: 72, isUnsigned: true)
!355 = !DIEnumerator(name: "TV_TREE_PHIOPT", value: 73, isUnsigned: true)
!356 = !DIEnumerator(name: "TV_TREE_FORWPROP", value: 74, isUnsigned: true)
!357 = !DIEnumerator(name: "TV_TREE_PHIPROP", value: 75, isUnsigned: true)
!358 = !DIEnumerator(name: "TV_TREE_DCE", value: 76, isUnsigned: true)
!359 = !DIEnumerator(name: "TV_TREE_CD_DCE", value: 77, isUnsigned: true)
!360 = !DIEnumerator(name: "TV_TREE_CALL_CDCE", value: 78, isUnsigned: true)
!361 = !DIEnumerator(name: "TV_TREE_DSE", value: 79, isUnsigned: true)
!362 = !DIEnumerator(name: "TV_TREE_MERGE_PHI", value: 80, isUnsigned: true)
!363 = !DIEnumerator(name: "TV_TREE_LOOP", value: 81, isUnsigned: true)
!364 = !DIEnumerator(name: "TV_TREE_LOOP_BOUNDS", value: 82, isUnsigned: true)
!365 = !DIEnumerator(name: "TV_LIM", value: 83, isUnsigned: true)
!366 = !DIEnumerator(name: "TV_TREE_LOOP_IVCANON", value: 84, isUnsigned: true)
!367 = !DIEnumerator(name: "TV_SCEV_CONST", value: 85, isUnsigned: true)
!368 = !DIEnumerator(name: "TV_TREE_LOOP_UNSWITCH", value: 86, isUnsigned: true)
!369 = !DIEnumerator(name: "TV_COMPLETE_UNROLL", value: 87, isUnsigned: true)
!370 = !DIEnumerator(name: "TV_TREE_PARALLELIZE_LOOPS", value: 88, isUnsigned: true)
!371 = !DIEnumerator(name: "TV_TREE_VECTORIZATION", value: 89, isUnsigned: true)
!372 = !DIEnumerator(name: "TV_TREE_SLP_VECTORIZATION", value: 90, isUnsigned: true)
!373 = !DIEnumerator(name: "TV_GRAPHITE_TRANSFORMS", value: 91, isUnsigned: true)
!374 = !DIEnumerator(name: "TV_GRAPHITE_DATA_DEPS", value: 92, isUnsigned: true)
!375 = !DIEnumerator(name: "TV_GRAPHITE_CODE_GEN", value: 93, isUnsigned: true)
!376 = !DIEnumerator(name: "TV_TREE_LINEAR_TRANSFORM", value: 94, isUnsigned: true)
!377 = !DIEnumerator(name: "TV_TREE_LOOP_DISTRIBUTION", value: 95, isUnsigned: true)
!378 = !DIEnumerator(name: "TV_CHECK_DATA_DEPS", value: 96, isUnsigned: true)
!379 = !DIEnumerator(name: "TV_TREE_PREFETCH", value: 97, isUnsigned: true)
!380 = !DIEnumerator(name: "TV_TREE_LOOP_IVOPTS", value: 98, isUnsigned: true)
!381 = !DIEnumerator(name: "TV_PREDCOM", value: 99, isUnsigned: true)
!382 = !DIEnumerator(name: "TV_TREE_LOOP_INIT", value: 100, isUnsigned: true)
!383 = !DIEnumerator(name: "TV_TREE_LOOP_FINI", value: 101, isUnsigned: true)
!384 = !DIEnumerator(name: "TV_TREE_CH", value: 102, isUnsigned: true)
!385 = !DIEnumerator(name: "TV_TREE_SSA_UNCPROP", value: 103, isUnsigned: true)
!386 = !DIEnumerator(name: "TV_TREE_SSA_TO_NORMAL", value: 104, isUnsigned: true)
!387 = !DIEnumerator(name: "TV_TREE_NRV", value: 105, isUnsigned: true)
!388 = !DIEnumerator(name: "TV_TREE_COPY_RENAME", value: 106, isUnsigned: true)
!389 = !DIEnumerator(name: "TV_TREE_SSA_VERIFY", value: 107, isUnsigned: true)
!390 = !DIEnumerator(name: "TV_TREE_STMT_VERIFY", value: 108, isUnsigned: true)
!391 = !DIEnumerator(name: "TV_TREE_SWITCH_CONVERSION", value: 109, isUnsigned: true)
!392 = !DIEnumerator(name: "TV_CGRAPH_VERIFY", value: 110, isUnsigned: true)
!393 = !DIEnumerator(name: "TV_DOM_FRONTIERS", value: 111, isUnsigned: true)
!394 = !DIEnumerator(name: "TV_DOMINANCE", value: 112, isUnsigned: true)
!395 = !DIEnumerator(name: "TV_CONTROL_DEPENDENCES", value: 113, isUnsigned: true)
!396 = !DIEnumerator(name: "TV_OVERLOAD", value: 114, isUnsigned: true)
!397 = !DIEnumerator(name: "TV_TEMPLATE_INSTANTIATION", value: 115, isUnsigned: true)
!398 = !DIEnumerator(name: "TV_EXPAND", value: 116, isUnsigned: true)
!399 = !DIEnumerator(name: "TV_VARCONST", value: 117, isUnsigned: true)
!400 = !DIEnumerator(name: "TV_LOWER_SUBREG", value: 118, isUnsigned: true)
!401 = !DIEnumerator(name: "TV_JUMP", value: 119, isUnsigned: true)
!402 = !DIEnumerator(name: "TV_FWPROP", value: 120, isUnsigned: true)
!403 = !DIEnumerator(name: "TV_CSE", value: 121, isUnsigned: true)
!404 = !DIEnumerator(name: "TV_DCE", value: 122, isUnsigned: true)
!405 = !DIEnumerator(name: "TV_DSE1", value: 123, isUnsigned: true)
!406 = !DIEnumerator(name: "TV_DSE2", value: 124, isUnsigned: true)
!407 = !DIEnumerator(name: "TV_LOOP", value: 125, isUnsigned: true)
!408 = !DIEnumerator(name: "TV_LOOP_MOVE_INVARIANTS", value: 126, isUnsigned: true)
!409 = !DIEnumerator(name: "TV_LOOP_UNSWITCH", value: 127, isUnsigned: true)
!410 = !DIEnumerator(name: "TV_LOOP_UNROLL", value: 128, isUnsigned: true)
!411 = !DIEnumerator(name: "TV_LOOP_DOLOOP", value: 129, isUnsigned: true)
!412 = !DIEnumerator(name: "TV_CPROP", value: 130, isUnsigned: true)
!413 = !DIEnumerator(name: "TV_PRE", value: 131, isUnsigned: true)
!414 = !DIEnumerator(name: "TV_HOIST", value: 132, isUnsigned: true)
!415 = !DIEnumerator(name: "TV_LSM", value: 133, isUnsigned: true)
!416 = !DIEnumerator(name: "TV_TRACER", value: 134, isUnsigned: true)
!417 = !DIEnumerator(name: "TV_WEB", value: 135, isUnsigned: true)
!418 = !DIEnumerator(name: "TV_AUTO_INC_DEC", value: 136, isUnsigned: true)
!419 = !DIEnumerator(name: "TV_CSE2", value: 137, isUnsigned: true)
!420 = !DIEnumerator(name: "TV_BRANCH_PROB", value: 138, isUnsigned: true)
!421 = !DIEnumerator(name: "TV_VPT", value: 139, isUnsigned: true)
!422 = !DIEnumerator(name: "TV_COMBINE", value: 140, isUnsigned: true)
!423 = !DIEnumerator(name: "TV_IFCVT", value: 141, isUnsigned: true)
!424 = !DIEnumerator(name: "TV_REGMOVE", value: 142, isUnsigned: true)
!425 = !DIEnumerator(name: "TV_MODE_SWITCH", value: 143, isUnsigned: true)
!426 = !DIEnumerator(name: "TV_SMS", value: 144, isUnsigned: true)
!427 = !DIEnumerator(name: "TV_SCHED", value: 145, isUnsigned: true)
!428 = !DIEnumerator(name: "TV_LOCAL_ALLOC", value: 146, isUnsigned: true)
!429 = !DIEnumerator(name: "TV_GLOBAL_ALLOC", value: 147, isUnsigned: true)
!430 = !DIEnumerator(name: "TV_IRA", value: 148, isUnsigned: true)
!431 = !DIEnumerator(name: "TV_RELOAD", value: 149, isUnsigned: true)
!432 = !DIEnumerator(name: "TV_RELOAD_CSE_REGS", value: 150, isUnsigned: true)
!433 = !DIEnumerator(name: "TV_SEQABSTR", value: 151, isUnsigned: true)
!434 = !DIEnumerator(name: "TV_GCSE_AFTER_RELOAD", value: 152, isUnsigned: true)
!435 = !DIEnumerator(name: "TV_THREAD_PROLOGUE_AND_EPILOGUE", value: 153, isUnsigned: true)
!436 = !DIEnumerator(name: "TV_IFCVT2", value: 154, isUnsigned: true)
!437 = !DIEnumerator(name: "TV_COMBINE_STACK_ADJUST", value: 155, isUnsigned: true)
!438 = !DIEnumerator(name: "TV_PEEPHOLE2", value: 156, isUnsigned: true)
!439 = !DIEnumerator(name: "TV_RENAME_REGISTERS", value: 157, isUnsigned: true)
!440 = !DIEnumerator(name: "TV_CPROP_REGISTERS", value: 158, isUnsigned: true)
!441 = !DIEnumerator(name: "TV_SCHED2", value: 159, isUnsigned: true)
!442 = !DIEnumerator(name: "TV_MACH_DEP", value: 160, isUnsigned: true)
!443 = !DIEnumerator(name: "TV_DBR_SCHED", value: 161, isUnsigned: true)
!444 = !DIEnumerator(name: "TV_REORDER_BLOCKS", value: 162, isUnsigned: true)
!445 = !DIEnumerator(name: "TV_SHORTEN_BRANCH", value: 163, isUnsigned: true)
!446 = !DIEnumerator(name: "TV_REG_STACK", value: 164, isUnsigned: true)
!447 = !DIEnumerator(name: "TV_FINAL", value: 165, isUnsigned: true)
!448 = !DIEnumerator(name: "TV_SYMOUT", value: 166, isUnsigned: true)
!449 = !DIEnumerator(name: "TV_VAR_TRACKING", value: 167, isUnsigned: true)
!450 = !DIEnumerator(name: "TV_TREE_IFCOMBINE", value: 168, isUnsigned: true)
!451 = !DIEnumerator(name: "TV_PLUGIN_INIT", value: 169, isUnsigned: true)
!452 = !DIEnumerator(name: "TV_PLUGIN_RUN", value: 170, isUnsigned: true)
!453 = !DIEnumerator(name: "TV_REST_OF_COMPILATION", value: 171, isUnsigned: true)
!454 = !DIEnumerator(name: "TIMEVAR_LAST", value: 172, isUnsigned: true)
!455 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "ipa_lattice_type", file: !456, line: 66, baseType: !7, size: 32, elements: !457)
!456 = !DIFile(filename: "./ipa-prop.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!457 = !{!458, !459, !460}
!458 = !DIEnumerator(name: "IPA_BOTTOM", value: 0, isUnsigned: true)
!459 = !DIEnumerator(name: "IPA_CONST_VALUE", value: 1, isUnsigned: true)
!460 = !DIEnumerator(name: "IPA_TOP", value: 2, isUnsigned: true)
!461 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "jump_func_type", file: !456, line: 48, baseType: !7, size: 32, elements: !462)
!462 = !{!463, !464, !465, !466, !467}
!463 = !DIEnumerator(name: "IPA_JF_UNKNOWN", value: 0, isUnsigned: true)
!464 = !DIEnumerator(name: "IPA_JF_CONST", value: 1, isUnsigned: true)
!465 = !DIEnumerator(name: "IPA_JF_CONST_MEMBER_PTR", value: 2, isUnsigned: true)
!466 = !DIEnumerator(name: "IPA_JF_PASS_THROUGH", value: 3, isUnsigned: true)
!467 = !DIEnumerator(name: "IPA_JF_ANCESTOR", value: 4, isUnsigned: true)
!468 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_index", file: !6, line: 3410, baseType: !7, size: 32, elements: !469)
!469 = !{!470, !471, !472, !473, !474, !475, !476, !477, !478, !479, !480, !481, !482, !483, !484, !485, !486, !487, !488, !489, !490, !491, !492, !493, !494, !495, !496, !497, !498, !499, !500, !501, !502, !503, !504, !505, !506, !507, !508, !509, !510, !511, !512, !513, !514, !515, !516, !517, !518, !519, !520, !521, !522, !523, !524, !525, !526, !527, !528, !529, !530, !531, !532, !533, !534, !535, !536, !537, !538, !539, !540, !541, !542, !543, !544, !545, !546, !547, !548, !549, !550, !551, !552, !553, !554, !555, !556, !557, !558, !559, !560, !561, !562, !563, !564, !565, !566, !567, !568, !569, !570, !571, !572, !573, !574, !575, !576, !577, !578, !579, !580, !581, !582, !583, !584, !585, !586, !587, !588, !589, !590, !591, !592, !593, !594, !595, !596, !597, !598, !599, !600, !601}
!470 = !DIEnumerator(name: "TI_ERROR_MARK", value: 0, isUnsigned: true)
!471 = !DIEnumerator(name: "TI_INTQI_TYPE", value: 1, isUnsigned: true)
!472 = !DIEnumerator(name: "TI_INTHI_TYPE", value: 2, isUnsigned: true)
!473 = !DIEnumerator(name: "TI_INTSI_TYPE", value: 3, isUnsigned: true)
!474 = !DIEnumerator(name: "TI_INTDI_TYPE", value: 4, isUnsigned: true)
!475 = !DIEnumerator(name: "TI_INTTI_TYPE", value: 5, isUnsigned: true)
!476 = !DIEnumerator(name: "TI_UINTQI_TYPE", value: 6, isUnsigned: true)
!477 = !DIEnumerator(name: "TI_UINTHI_TYPE", value: 7, isUnsigned: true)
!478 = !DIEnumerator(name: "TI_UINTSI_TYPE", value: 8, isUnsigned: true)
!479 = !DIEnumerator(name: "TI_UINTDI_TYPE", value: 9, isUnsigned: true)
!480 = !DIEnumerator(name: "TI_UINTTI_TYPE", value: 10, isUnsigned: true)
!481 = !DIEnumerator(name: "TI_UINT32_TYPE", value: 11, isUnsigned: true)
!482 = !DIEnumerator(name: "TI_UINT64_TYPE", value: 12, isUnsigned: true)
!483 = !DIEnumerator(name: "TI_INTEGER_ZERO", value: 13, isUnsigned: true)
!484 = !DIEnumerator(name: "TI_INTEGER_ONE", value: 14, isUnsigned: true)
!485 = !DIEnumerator(name: "TI_INTEGER_MINUS_ONE", value: 15, isUnsigned: true)
!486 = !DIEnumerator(name: "TI_NULL_POINTER", value: 16, isUnsigned: true)
!487 = !DIEnumerator(name: "TI_SIZE_ZERO", value: 17, isUnsigned: true)
!488 = !DIEnumerator(name: "TI_SIZE_ONE", value: 18, isUnsigned: true)
!489 = !DIEnumerator(name: "TI_BITSIZE_ZERO", value: 19, isUnsigned: true)
!490 = !DIEnumerator(name: "TI_BITSIZE_ONE", value: 20, isUnsigned: true)
!491 = !DIEnumerator(name: "TI_BITSIZE_UNIT", value: 21, isUnsigned: true)
!492 = !DIEnumerator(name: "TI_PUBLIC", value: 22, isUnsigned: true)
!493 = !DIEnumerator(name: "TI_PROTECTED", value: 23, isUnsigned: true)
!494 = !DIEnumerator(name: "TI_PRIVATE", value: 24, isUnsigned: true)
!495 = !DIEnumerator(name: "TI_BOOLEAN_FALSE", value: 25, isUnsigned: true)
!496 = !DIEnumerator(name: "TI_BOOLEAN_TRUE", value: 26, isUnsigned: true)
!497 = !DIEnumerator(name: "TI_COMPLEX_INTEGER_TYPE", value: 27, isUnsigned: true)
!498 = !DIEnumerator(name: "TI_COMPLEX_FLOAT_TYPE", value: 28, isUnsigned: true)
!499 = !DIEnumerator(name: "TI_COMPLEX_DOUBLE_TYPE", value: 29, isUnsigned: true)
!500 = !DIEnumerator(name: "TI_COMPLEX_LONG_DOUBLE_TYPE", value: 30, isUnsigned: true)
!501 = !DIEnumerator(name: "TI_FLOAT_TYPE", value: 31, isUnsigned: true)
!502 = !DIEnumerator(name: "TI_DOUBLE_TYPE", value: 32, isUnsigned: true)
!503 = !DIEnumerator(name: "TI_LONG_DOUBLE_TYPE", value: 33, isUnsigned: true)
!504 = !DIEnumerator(name: "TI_FLOAT_PTR_TYPE", value: 34, isUnsigned: true)
!505 = !DIEnumerator(name: "TI_DOUBLE_PTR_TYPE", value: 35, isUnsigned: true)
!506 = !DIEnumerator(name: "TI_LONG_DOUBLE_PTR_TYPE", value: 36, isUnsigned: true)
!507 = !DIEnumerator(name: "TI_INTEGER_PTR_TYPE", value: 37, isUnsigned: true)
!508 = !DIEnumerator(name: "TI_VOID_TYPE", value: 38, isUnsigned: true)
!509 = !DIEnumerator(name: "TI_PTR_TYPE", value: 39, isUnsigned: true)
!510 = !DIEnumerator(name: "TI_CONST_PTR_TYPE", value: 40, isUnsigned: true)
!511 = !DIEnumerator(name: "TI_SIZE_TYPE", value: 41, isUnsigned: true)
!512 = !DIEnumerator(name: "TI_PID_TYPE", value: 42, isUnsigned: true)
!513 = !DIEnumerator(name: "TI_PTRDIFF_TYPE", value: 43, isUnsigned: true)
!514 = !DIEnumerator(name: "TI_VA_LIST_TYPE", value: 44, isUnsigned: true)
!515 = !DIEnumerator(name: "TI_VA_LIST_GPR_COUNTER_FIELD", value: 45, isUnsigned: true)
!516 = !DIEnumerator(name: "TI_VA_LIST_FPR_COUNTER_FIELD", value: 46, isUnsigned: true)
!517 = !DIEnumerator(name: "TI_BOOLEAN_TYPE", value: 47, isUnsigned: true)
!518 = !DIEnumerator(name: "TI_FILEPTR_TYPE", value: 48, isUnsigned: true)
!519 = !DIEnumerator(name: "TI_DFLOAT32_TYPE", value: 49, isUnsigned: true)
!520 = !DIEnumerator(name: "TI_DFLOAT64_TYPE", value: 50, isUnsigned: true)
!521 = !DIEnumerator(name: "TI_DFLOAT128_TYPE", value: 51, isUnsigned: true)
!522 = !DIEnumerator(name: "TI_DFLOAT32_PTR_TYPE", value: 52, isUnsigned: true)
!523 = !DIEnumerator(name: "TI_DFLOAT64_PTR_TYPE", value: 53, isUnsigned: true)
!524 = !DIEnumerator(name: "TI_DFLOAT128_PTR_TYPE", value: 54, isUnsigned: true)
!525 = !DIEnumerator(name: "TI_VOID_LIST_NODE", value: 55, isUnsigned: true)
!526 = !DIEnumerator(name: "TI_MAIN_IDENTIFIER", value: 56, isUnsigned: true)
!527 = !DIEnumerator(name: "TI_SAT_SFRACT_TYPE", value: 57, isUnsigned: true)
!528 = !DIEnumerator(name: "TI_SAT_FRACT_TYPE", value: 58, isUnsigned: true)
!529 = !DIEnumerator(name: "TI_SAT_LFRACT_TYPE", value: 59, isUnsigned: true)
!530 = !DIEnumerator(name: "TI_SAT_LLFRACT_TYPE", value: 60, isUnsigned: true)
!531 = !DIEnumerator(name: "TI_SAT_USFRACT_TYPE", value: 61, isUnsigned: true)
!532 = !DIEnumerator(name: "TI_SAT_UFRACT_TYPE", value: 62, isUnsigned: true)
!533 = !DIEnumerator(name: "TI_SAT_ULFRACT_TYPE", value: 63, isUnsigned: true)
!534 = !DIEnumerator(name: "TI_SAT_ULLFRACT_TYPE", value: 64, isUnsigned: true)
!535 = !DIEnumerator(name: "TI_SFRACT_TYPE", value: 65, isUnsigned: true)
!536 = !DIEnumerator(name: "TI_FRACT_TYPE", value: 66, isUnsigned: true)
!537 = !DIEnumerator(name: "TI_LFRACT_TYPE", value: 67, isUnsigned: true)
!538 = !DIEnumerator(name: "TI_LLFRACT_TYPE", value: 68, isUnsigned: true)
!539 = !DIEnumerator(name: "TI_USFRACT_TYPE", value: 69, isUnsigned: true)
!540 = !DIEnumerator(name: "TI_UFRACT_TYPE", value: 70, isUnsigned: true)
!541 = !DIEnumerator(name: "TI_ULFRACT_TYPE", value: 71, isUnsigned: true)
!542 = !DIEnumerator(name: "TI_ULLFRACT_TYPE", value: 72, isUnsigned: true)
!543 = !DIEnumerator(name: "TI_SAT_SACCUM_TYPE", value: 73, isUnsigned: true)
!544 = !DIEnumerator(name: "TI_SAT_ACCUM_TYPE", value: 74, isUnsigned: true)
!545 = !DIEnumerator(name: "TI_SAT_LACCUM_TYPE", value: 75, isUnsigned: true)
!546 = !DIEnumerator(name: "TI_SAT_LLACCUM_TYPE", value: 76, isUnsigned: true)
!547 = !DIEnumerator(name: "TI_SAT_USACCUM_TYPE", value: 77, isUnsigned: true)
!548 = !DIEnumerator(name: "TI_SAT_UACCUM_TYPE", value: 78, isUnsigned: true)
!549 = !DIEnumerator(name: "TI_SAT_ULACCUM_TYPE", value: 79, isUnsigned: true)
!550 = !DIEnumerator(name: "TI_SAT_ULLACCUM_TYPE", value: 80, isUnsigned: true)
!551 = !DIEnumerator(name: "TI_SACCUM_TYPE", value: 81, isUnsigned: true)
!552 = !DIEnumerator(name: "TI_ACCUM_TYPE", value: 82, isUnsigned: true)
!553 = !DIEnumerator(name: "TI_LACCUM_TYPE", value: 83, isUnsigned: true)
!554 = !DIEnumerator(name: "TI_LLACCUM_TYPE", value: 84, isUnsigned: true)
!555 = !DIEnumerator(name: "TI_USACCUM_TYPE", value: 85, isUnsigned: true)
!556 = !DIEnumerator(name: "TI_UACCUM_TYPE", value: 86, isUnsigned: true)
!557 = !DIEnumerator(name: "TI_ULACCUM_TYPE", value: 87, isUnsigned: true)
!558 = !DIEnumerator(name: "TI_ULLACCUM_TYPE", value: 88, isUnsigned: true)
!559 = !DIEnumerator(name: "TI_QQ_TYPE", value: 89, isUnsigned: true)
!560 = !DIEnumerator(name: "TI_HQ_TYPE", value: 90, isUnsigned: true)
!561 = !DIEnumerator(name: "TI_SQ_TYPE", value: 91, isUnsigned: true)
!562 = !DIEnumerator(name: "TI_DQ_TYPE", value: 92, isUnsigned: true)
!563 = !DIEnumerator(name: "TI_TQ_TYPE", value: 93, isUnsigned: true)
!564 = !DIEnumerator(name: "TI_UQQ_TYPE", value: 94, isUnsigned: true)
!565 = !DIEnumerator(name: "TI_UHQ_TYPE", value: 95, isUnsigned: true)
!566 = !DIEnumerator(name: "TI_USQ_TYPE", value: 96, isUnsigned: true)
!567 = !DIEnumerator(name: "TI_UDQ_TYPE", value: 97, isUnsigned: true)
!568 = !DIEnumerator(name: "TI_UTQ_TYPE", value: 98, isUnsigned: true)
!569 = !DIEnumerator(name: "TI_SAT_QQ_TYPE", value: 99, isUnsigned: true)
!570 = !DIEnumerator(name: "TI_SAT_HQ_TYPE", value: 100, isUnsigned: true)
!571 = !DIEnumerator(name: "TI_SAT_SQ_TYPE", value: 101, isUnsigned: true)
!572 = !DIEnumerator(name: "TI_SAT_DQ_TYPE", value: 102, isUnsigned: true)
!573 = !DIEnumerator(name: "TI_SAT_TQ_TYPE", value: 103, isUnsigned: true)
!574 = !DIEnumerator(name: "TI_SAT_UQQ_TYPE", value: 104, isUnsigned: true)
!575 = !DIEnumerator(name: "TI_SAT_UHQ_TYPE", value: 105, isUnsigned: true)
!576 = !DIEnumerator(name: "TI_SAT_USQ_TYPE", value: 106, isUnsigned: true)
!577 = !DIEnumerator(name: "TI_SAT_UDQ_TYPE", value: 107, isUnsigned: true)
!578 = !DIEnumerator(name: "TI_SAT_UTQ_TYPE", value: 108, isUnsigned: true)
!579 = !DIEnumerator(name: "TI_HA_TYPE", value: 109, isUnsigned: true)
!580 = !DIEnumerator(name: "TI_SA_TYPE", value: 110, isUnsigned: true)
!581 = !DIEnumerator(name: "TI_DA_TYPE", value: 111, isUnsigned: true)
!582 = !DIEnumerator(name: "TI_TA_TYPE", value: 112, isUnsigned: true)
!583 = !DIEnumerator(name: "TI_UHA_TYPE", value: 113, isUnsigned: true)
!584 = !DIEnumerator(name: "TI_USA_TYPE", value: 114, isUnsigned: true)
!585 = !DIEnumerator(name: "TI_UDA_TYPE", value: 115, isUnsigned: true)
!586 = !DIEnumerator(name: "TI_UTA_TYPE", value: 116, isUnsigned: true)
!587 = !DIEnumerator(name: "TI_SAT_HA_TYPE", value: 117, isUnsigned: true)
!588 = !DIEnumerator(name: "TI_SAT_SA_TYPE", value: 118, isUnsigned: true)
!589 = !DIEnumerator(name: "TI_SAT_DA_TYPE", value: 119, isUnsigned: true)
!590 = !DIEnumerator(name: "TI_SAT_TA_TYPE", value: 120, isUnsigned: true)
!591 = !DIEnumerator(name: "TI_SAT_UHA_TYPE", value: 121, isUnsigned: true)
!592 = !DIEnumerator(name: "TI_SAT_USA_TYPE", value: 122, isUnsigned: true)
!593 = !DIEnumerator(name: "TI_SAT_UDA_TYPE", value: 123, isUnsigned: true)
!594 = !DIEnumerator(name: "TI_SAT_UTA_TYPE", value: 124, isUnsigned: true)
!595 = !DIEnumerator(name: "TI_OPTIMIZATION_DEFAULT", value: 125, isUnsigned: true)
!596 = !DIEnumerator(name: "TI_OPTIMIZATION_CURRENT", value: 126, isUnsigned: true)
!597 = !DIEnumerator(name: "TI_TARGET_OPTION_DEFAULT", value: 127, isUnsigned: true)
!598 = !DIEnumerator(name: "TI_TARGET_OPTION_CURRENT", value: 128, isUnsigned: true)
!599 = !DIEnumerator(name: "TI_CURRENT_TARGET_PRAGMA", value: 129, isUnsigned: true)
!600 = !DIEnumerator(name: "TI_CURRENT_OPTIMIZE_PRAGMA", value: 130, isUnsigned: true)
!601 = !DIEnumerator(name: "TI_MAX", value: 131, isUnsigned: true)
!602 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gsi_iterator_update", file: !603, line: 4603, baseType: !7, size: 32, elements: !604)
!603 = !DIFile(filename: "./gimple.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!604 = !{!605, !606, !607}
!605 = !DIEnumerator(name: "GSI_NEW_STMT", value: 0, isUnsigned: true)
!606 = !DIEnumerator(name: "GSI_SAME_STMT", value: 1, isUnsigned: true)
!607 = !DIEnumerator(name: "GSI_CONTINUE_LINKING", value: 2, isUnsigned: true)
!608 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "cdi_direction", file: !202, line: 912, baseType: !7, size: 32, elements: !609)
!609 = !{!610, !611}
!610 = !DIEnumerator(name: "CDI_DOMINATORS", value: 1, isUnsigned: true)
!611 = !DIEnumerator(name: "CDI_POST_DOMINATORS", value: 2, isUnsigned: true)
!612 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "lto_section_type", file: !613, line: 256, baseType: !7, size: 32, elements: !614)
!613 = !DIFile(filename: "./lto-streamer.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!614 = !{!615, !616, !617, !618, !619, !620, !621, !622, !623, !624, !625}
!615 = !DIEnumerator(name: "LTO_section_decls", value: 0, isUnsigned: true)
!616 = !DIEnumerator(name: "LTO_section_function_body", value: 1, isUnsigned: true)
!617 = !DIEnumerator(name: "LTO_section_static_initializer", value: 2, isUnsigned: true)
!618 = !DIEnumerator(name: "LTO_section_cgraph", value: 3, isUnsigned: true)
!619 = !DIEnumerator(name: "LTO_section_jump_functions", value: 4, isUnsigned: true)
!620 = !DIEnumerator(name: "LTO_section_ipa_pure_const", value: 5, isUnsigned: true)
!621 = !DIEnumerator(name: "LTO_section_ipa_reference", value: 6, isUnsigned: true)
!622 = !DIEnumerator(name: "LTO_section_symtab", value: 7, isUnsigned: true)
!623 = !DIEnumerator(name: "LTO_section_wpa_fixup", value: 8, isUnsigned: true)
!624 = !DIEnumerator(name: "LTO_section_opts", value: 9, isUnsigned: true)
!625 = !DIEnumerator(name: "LTO_N_SECTION_TYPES", value: 10, isUnsigned: true)
!626 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "bb_flags", file: !202, line: 295, baseType: !7, size: 32, elements: !627)
!627 = !{!628, !629, !630, !631, !632, !633, !634, !635, !636, !637, !638, !639}
!628 = !DIEnumerator(name: "BB_NEW", value: 1, isUnsigned: true)
!629 = !DIEnumerator(name: "BB_REACHABLE", value: 2, isUnsigned: true)
!630 = !DIEnumerator(name: "BB_IRREDUCIBLE_LOOP", value: 4, isUnsigned: true)
!631 = !DIEnumerator(name: "BB_SUPERBLOCK", value: 8, isUnsigned: true)
!632 = !DIEnumerator(name: "BB_DISABLE_SCHEDULE", value: 16, isUnsigned: true)
!633 = !DIEnumerator(name: "BB_HOT_PARTITION", value: 32, isUnsigned: true)
!634 = !DIEnumerator(name: "BB_COLD_PARTITION", value: 64, isUnsigned: true)
!635 = !DIEnumerator(name: "BB_DUPLICATED", value: 128, isUnsigned: true)
!636 = !DIEnumerator(name: "BB_NON_LOCAL_GOTO_TARGET", value: 256, isUnsigned: true)
!637 = !DIEnumerator(name: "BB_RTL", value: 512, isUnsigned: true)
!638 = !DIEnumerator(name: "BB_FORWARDER_BLOCK", value: 1024, isUnsigned: true)
!639 = !DIEnumerator(name: "BB_NONTHREADABLE_BLOCK", value: 2048, isUnsigned: true)
!640 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gimple_code", file: !603, line: 51, baseType: !7, size: 32, elements: !641)
!641 = !{!642, !643, !644, !645, !646, !647, !648, !649, !650, !651, !652, !653, !654, !655, !656, !657, !658, !659, !660, !661, !662, !663, !664, !665, !666, !667, !668, !669, !670, !671, !672, !673, !674, !675, !676, !677}
!642 = !DIEnumerator(name: "GIMPLE_ERROR_MARK", value: 0, isUnsigned: true)
!643 = !DIEnumerator(name: "GIMPLE_COND", value: 1, isUnsigned: true)
!644 = !DIEnumerator(name: "GIMPLE_DEBUG", value: 2, isUnsigned: true)
!645 = !DIEnumerator(name: "GIMPLE_GOTO", value: 3, isUnsigned: true)
!646 = !DIEnumerator(name: "GIMPLE_LABEL", value: 4, isUnsigned: true)
!647 = !DIEnumerator(name: "GIMPLE_SWITCH", value: 5, isUnsigned: true)
!648 = !DIEnumerator(name: "GIMPLE_ASSIGN", value: 6, isUnsigned: true)
!649 = !DIEnumerator(name: "GIMPLE_ASM", value: 7, isUnsigned: true)
!650 = !DIEnumerator(name: "GIMPLE_CALL", value: 8, isUnsigned: true)
!651 = !DIEnumerator(name: "GIMPLE_RETURN", value: 9, isUnsigned: true)
!652 = !DIEnumerator(name: "GIMPLE_BIND", value: 10, isUnsigned: true)
!653 = !DIEnumerator(name: "GIMPLE_CATCH", value: 11, isUnsigned: true)
!654 = !DIEnumerator(name: "GIMPLE_EH_FILTER", value: 12, isUnsigned: true)
!655 = !DIEnumerator(name: "GIMPLE_EH_MUST_NOT_THROW", value: 13, isUnsigned: true)
!656 = !DIEnumerator(name: "GIMPLE_RESX", value: 14, isUnsigned: true)
!657 = !DIEnumerator(name: "GIMPLE_EH_DISPATCH", value: 15, isUnsigned: true)
!658 = !DIEnumerator(name: "GIMPLE_PHI", value: 16, isUnsigned: true)
!659 = !DIEnumerator(name: "GIMPLE_TRY", value: 17, isUnsigned: true)
!660 = !DIEnumerator(name: "GIMPLE_NOP", value: 18, isUnsigned: true)
!661 = !DIEnumerator(name: "GIMPLE_OMP_ATOMIC_LOAD", value: 19, isUnsigned: true)
!662 = !DIEnumerator(name: "GIMPLE_OMP_ATOMIC_STORE", value: 20, isUnsigned: true)
!663 = !DIEnumerator(name: "GIMPLE_OMP_CONTINUE", value: 21, isUnsigned: true)
!664 = !DIEnumerator(name: "GIMPLE_OMP_CRITICAL", value: 22, isUnsigned: true)
!665 = !DIEnumerator(name: "GIMPLE_OMP_FOR", value: 23, isUnsigned: true)
!666 = !DIEnumerator(name: "GIMPLE_OMP_MASTER", value: 24, isUnsigned: true)
!667 = !DIEnumerator(name: "GIMPLE_OMP_ORDERED", value: 25, isUnsigned: true)
!668 = !DIEnumerator(name: "GIMPLE_OMP_PARALLEL", value: 26, isUnsigned: true)
!669 = !DIEnumerator(name: "GIMPLE_OMP_TASK", value: 27, isUnsigned: true)
!670 = !DIEnumerator(name: "GIMPLE_OMP_RETURN", value: 28, isUnsigned: true)
!671 = !DIEnumerator(name: "GIMPLE_OMP_SECTION", value: 29, isUnsigned: true)
!672 = !DIEnumerator(name: "GIMPLE_OMP_SECTIONS", value: 30, isUnsigned: true)
!673 = !DIEnumerator(name: "GIMPLE_OMP_SECTIONS_SWITCH", value: 31, isUnsigned: true)
!674 = !DIEnumerator(name: "GIMPLE_OMP_SINGLE", value: 32, isUnsigned: true)
!675 = !DIEnumerator(name: "GIMPLE_PREDICT", value: 33, isUnsigned: true)
!676 = !DIEnumerator(name: "GIMPLE_WITH_CLEANUP_EXPR", value: 34, isUnsigned: true)
!677 = !DIEnumerator(name: "LAST_AND_UNUSED_GIMPLE_CODE", value: 35, isUnsigned: true)
!678 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_code_class", file: !6, line: 58, baseType: !7, size: 32, elements: !679)
!679 = !{!680, !681, !682, !683, !684, !685, !686, !687, !688, !689, !690}
!680 = !DIEnumerator(name: "tcc_exceptional", value: 0, isUnsigned: true)
!681 = !DIEnumerator(name: "tcc_constant", value: 1, isUnsigned: true)
!682 = !DIEnumerator(name: "tcc_type", value: 2, isUnsigned: true)
!683 = !DIEnumerator(name: "tcc_declaration", value: 3, isUnsigned: true)
!684 = !DIEnumerator(name: "tcc_reference", value: 4, isUnsigned: true)
!685 = !DIEnumerator(name: "tcc_comparison", value: 5, isUnsigned: true)
!686 = !DIEnumerator(name: "tcc_unary", value: 6, isUnsigned: true)
!687 = !DIEnumerator(name: "tcc_binary", value: 7, isUnsigned: true)
!688 = !DIEnumerator(name: "tcc_statement", value: 8, isUnsigned: true)
!689 = !DIEnumerator(name: "tcc_vl_exp", value: 9, isUnsigned: true)
!690 = !DIEnumerator(name: "tcc_expression", value: 10, isUnsigned: true)
!691 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gimple_statement_structure_enum", file: !603, line: 727, baseType: !7, size: 32, elements: !692)
!692 = !{!693, !694, !695, !696, !697, !698, !699, !700, !701, !702, !703, !704, !705, !706, !707, !708, !709, !710, !711, !712, !713, !714, !715, !716}
!693 = !DIEnumerator(name: "GSS_BASE", value: 0, isUnsigned: true)
!694 = !DIEnumerator(name: "GSS_WITH_OPS", value: 1, isUnsigned: true)
!695 = !DIEnumerator(name: "GSS_WITH_MEM_OPS_BASE", value: 2, isUnsigned: true)
!696 = !DIEnumerator(name: "GSS_WITH_MEM_OPS", value: 3, isUnsigned: true)
!697 = !DIEnumerator(name: "GSS_ASM", value: 4, isUnsigned: true)
!698 = !DIEnumerator(name: "GSS_BIND", value: 5, isUnsigned: true)
!699 = !DIEnumerator(name: "GSS_PHI", value: 6, isUnsigned: true)
!700 = !DIEnumerator(name: "GSS_TRY", value: 7, isUnsigned: true)
!701 = !DIEnumerator(name: "GSS_CATCH", value: 8, isUnsigned: true)
!702 = !DIEnumerator(name: "GSS_EH_FILTER", value: 9, isUnsigned: true)
!703 = !DIEnumerator(name: "GSS_EH_MNT", value: 10, isUnsigned: true)
!704 = !DIEnumerator(name: "GSS_EH_CTRL", value: 11, isUnsigned: true)
!705 = !DIEnumerator(name: "GSS_WCE", value: 12, isUnsigned: true)
!706 = !DIEnumerator(name: "GSS_OMP", value: 13, isUnsigned: true)
!707 = !DIEnumerator(name: "GSS_OMP_CRITICAL", value: 14, isUnsigned: true)
!708 = !DIEnumerator(name: "GSS_OMP_FOR", value: 15, isUnsigned: true)
!709 = !DIEnumerator(name: "GSS_OMP_PARALLEL", value: 16, isUnsigned: true)
!710 = !DIEnumerator(name: "GSS_OMP_TASK", value: 17, isUnsigned: true)
!711 = !DIEnumerator(name: "GSS_OMP_SECTIONS", value: 18, isUnsigned: true)
!712 = !DIEnumerator(name: "GSS_OMP_SINGLE", value: 19, isUnsigned: true)
!713 = !DIEnumerator(name: "GSS_OMP_CONTINUE", value: 20, isUnsigned: true)
!714 = !DIEnumerator(name: "GSS_OMP_ATOMIC_LOAD", value: 21, isUnsigned: true)
!715 = !DIEnumerator(name: "GSS_OMP_ATOMIC_STORE", value: 22, isUnsigned: true)
!716 = !DIEnumerator(name: "LAST_GSS_ENUM", value: 23, isUnsigned: true)
!717 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gimple_rhs_class", file: !603, line: 80, baseType: !7, size: 32, elements: !718)
!718 = !{!719, !720, !721, !722}
!719 = !DIEnumerator(name: "GIMPLE_INVALID_RHS", value: 0, isUnsigned: true)
!720 = !DIEnumerator(name: "GIMPLE_BINARY_RHS", value: 1, isUnsigned: true)
!721 = !DIEnumerator(name: "GIMPLE_UNARY_RHS", value: 2, isUnsigned: true)
!722 = !DIEnumerator(name: "GIMPLE_SINGLE_RHS", value: 3, isUnsigned: true)
!723 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "ptrmemfunc_vbit_where_t", file: !6, line: 3805, baseType: !7, size: 32, elements: !724)
!724 = !{!725, !726}
!725 = !DIEnumerator(name: "ptrmemfunc_vbit_in_pfn", value: 0, isUnsigned: true)
!726 = !DIEnumerator(name: "ptrmemfunc_vbit_in_delta", value: 1, isUnsigned: true)
!727 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "ld_plugin_symbol_resolution", file: !728, line: 123, baseType: !7, size: 32, elements: !729)
!728 = !DIFile(filename: "./include/plugin-api.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!729 = !{!730, !731, !732, !733, !734, !735, !736, !737, !738}
!730 = !DIEnumerator(name: "LDPR_UNKNOWN", value: 0, isUnsigned: true)
!731 = !DIEnumerator(name: "LDPR_UNDEF", value: 1, isUnsigned: true)
!732 = !DIEnumerator(name: "LDPR_PREVAILING_DEF", value: 2, isUnsigned: true)
!733 = !DIEnumerator(name: "LDPR_PREVAILING_DEF_IRONLY", value: 3, isUnsigned: true)
!734 = !DIEnumerator(name: "LDPR_PREEMPTED_REG", value: 4, isUnsigned: true)
!735 = !DIEnumerator(name: "LDPR_PREEMPTED_IR", value: 5, isUnsigned: true)
!736 = !DIEnumerator(name: "LDPR_RESOLVED_IR", value: 6, isUnsigned: true)
!737 = !DIEnumerator(name: "LDPR_RESOLVED_EXEC", value: 7, isUnsigned: true)
!738 = !DIEnumerator(name: "LDPR_RESOLVED_DYN", value: 8, isUnsigned: true)
!739 = !{!740, !2187, !7, !829, !2197, !1254, !5, !748, !862, !804, !2222, !2245, !1047, !2262, !1081, !1452, !717, !2228, !2264, !2277, !2282, !2307, !2320, !1176, !461, !1261}
!740 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !741, size: 64)
!741 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ipa_func_list", file: !456, line: 390, size: 128, elements: !742)
!742 = !{!743, !2186}
!743 = !DIDerivedType(tag: DW_TAG_member, name: "node", scope: !741, file: !456, line: 392, baseType: !744, size: 64)
!744 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !745, size: 64)
!745 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cgraph_node", file: !250, line: 181, size: 2496, elements: !746)
!746 = !{!747, !1929, !1952, !1953, !1954, !1955, !1956, !1957, !1958, !1959, !1960, !1961, !1962, !1963, !1964, !1965, !1966, !1967, !2069, !2123, !2133, !2137, !2163, !2172, !2173, !2174, !2175, !2176, !2177, !2178, !2179, !2180, !2181, !2182, !2183, !2184, !2185}
!747 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !745, file: !250, line: 182, baseType: !748, size: 64)
!748 = !DIDerivedType(tag: DW_TAG_typedef, name: "tree", file: !749, line: 56, baseType: !750)
!749 = !DIFile(filename: "./coretypes.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!750 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !751, size: 64)
!751 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "tree_node", file: !6, line: 3371, size: 1792, elements: !752)
!752 = !{!753, !786, !792, !805, !812, !819, !824, !835, !841, !855, !867, !905, !913, !941, !958, !959, !964, !973, !979, !984, !988, !992, !1578, !1627, !1633, !1639, !1646, !1659, !1673, !1690, !1702, !1724, !1739, !1911}
!753 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !751, file: !6, line: 3372, baseType: !754, size: 64)
!754 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_base", file: !6, line: 360, size: 64, elements: !755)
!755 = !{!756, !757, !758, !759, !760, !761, !762, !763, !764, !765, !766, !767, !768, !769, !770, !771, !772, !773, !774, !775, !776, !777, !778, !779, !780, !781, !782, !783, !784, !785}
!756 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !754, file: !6, line: 361, baseType: !7, size: 16, flags: DIFlagBitField, extraData: i64 0)
!757 = !DIDerivedType(tag: DW_TAG_member, name: "side_effects_flag", scope: !754, file: !6, line: 363, baseType: !7, size: 1, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!758 = !DIDerivedType(tag: DW_TAG_member, name: "constant_flag", scope: !754, file: !6, line: 364, baseType: !7, size: 1, offset: 17, flags: DIFlagBitField, extraData: i64 0)
!759 = !DIDerivedType(tag: DW_TAG_member, name: "addressable_flag", scope: !754, file: !6, line: 365, baseType: !7, size: 1, offset: 18, flags: DIFlagBitField, extraData: i64 0)
!760 = !DIDerivedType(tag: DW_TAG_member, name: "volatile_flag", scope: !754, file: !6, line: 366, baseType: !7, size: 1, offset: 19, flags: DIFlagBitField, extraData: i64 0)
!761 = !DIDerivedType(tag: DW_TAG_member, name: "readonly_flag", scope: !754, file: !6, line: 367, baseType: !7, size: 1, offset: 20, flags: DIFlagBitField, extraData: i64 0)
!762 = !DIDerivedType(tag: DW_TAG_member, name: "unsigned_flag", scope: !754, file: !6, line: 368, baseType: !7, size: 1, offset: 21, flags: DIFlagBitField, extraData: i64 0)
!763 = !DIDerivedType(tag: DW_TAG_member, name: "asm_written_flag", scope: !754, file: !6, line: 369, baseType: !7, size: 1, offset: 22, flags: DIFlagBitField, extraData: i64 0)
!764 = !DIDerivedType(tag: DW_TAG_member, name: "nowarning_flag", scope: !754, file: !6, line: 370, baseType: !7, size: 1, offset: 23, flags: DIFlagBitField, extraData: i64 0)
!765 = !DIDerivedType(tag: DW_TAG_member, name: "used_flag", scope: !754, file: !6, line: 372, baseType: !7, size: 1, offset: 24, flags: DIFlagBitField, extraData: i64 0)
!766 = !DIDerivedType(tag: DW_TAG_member, name: "nothrow_flag", scope: !754, file: !6, line: 373, baseType: !7, size: 1, offset: 25, flags: DIFlagBitField, extraData: i64 0)
!767 = !DIDerivedType(tag: DW_TAG_member, name: "static_flag", scope: !754, file: !6, line: 374, baseType: !7, size: 1, offset: 26, flags: DIFlagBitField, extraData: i64 0)
!768 = !DIDerivedType(tag: DW_TAG_member, name: "public_flag", scope: !754, file: !6, line: 375, baseType: !7, size: 1, offset: 27, flags: DIFlagBitField, extraData: i64 0)
!769 = !DIDerivedType(tag: DW_TAG_member, name: "private_flag", scope: !754, file: !6, line: 376, baseType: !7, size: 1, offset: 28, flags: DIFlagBitField, extraData: i64 0)
!770 = !DIDerivedType(tag: DW_TAG_member, name: "protected_flag", scope: !754, file: !6, line: 377, baseType: !7, size: 1, offset: 29, flags: DIFlagBitField, extraData: i64 0)
!771 = !DIDerivedType(tag: DW_TAG_member, name: "deprecated_flag", scope: !754, file: !6, line: 378, baseType: !7, size: 1, offset: 30, flags: DIFlagBitField, extraData: i64 0)
!772 = !DIDerivedType(tag: DW_TAG_member, name: "saturating_flag", scope: !754, file: !6, line: 379, baseType: !7, size: 1, offset: 31, flags: DIFlagBitField, extraData: i64 0)
!773 = !DIDerivedType(tag: DW_TAG_member, name: "default_def_flag", scope: !754, file: !6, line: 381, baseType: !7, size: 1, offset: 32, flags: DIFlagBitField, extraData: i64 0)
!774 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !754, file: !6, line: 382, baseType: !7, size: 1, offset: 33, flags: DIFlagBitField, extraData: i64 0)
!775 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !754, file: !6, line: 383, baseType: !7, size: 1, offset: 34, flags: DIFlagBitField, extraData: i64 0)
!776 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !754, file: !6, line: 384, baseType: !7, size: 1, offset: 35, flags: DIFlagBitField, extraData: i64 0)
!777 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !754, file: !6, line: 385, baseType: !7, size: 1, offset: 36, flags: DIFlagBitField, extraData: i64 0)
!778 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !754, file: !6, line: 386, baseType: !7, size: 1, offset: 37, flags: DIFlagBitField, extraData: i64 0)
!779 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !754, file: !6, line: 387, baseType: !7, size: 1, offset: 38, flags: DIFlagBitField, extraData: i64 0)
!780 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !754, file: !6, line: 388, baseType: !7, size: 1, offset: 39, flags: DIFlagBitField, extraData: i64 0)
!781 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !754, file: !6, line: 390, baseType: !7, size: 1, offset: 40, flags: DIFlagBitField, extraData: i64 0)
!782 = !DIDerivedType(tag: DW_TAG_member, name: "packed_flag", scope: !754, file: !6, line: 391, baseType: !7, size: 1, offset: 41, flags: DIFlagBitField, extraData: i64 0)
!783 = !DIDerivedType(tag: DW_TAG_member, name: "user_align", scope: !754, file: !6, line: 392, baseType: !7, size: 1, offset: 42, flags: DIFlagBitField, extraData: i64 0)
!784 = !DIDerivedType(tag: DW_TAG_member, name: "spare", scope: !754, file: !6, line: 394, baseType: !7, size: 13, offset: 43, flags: DIFlagBitField, extraData: i64 0)
!785 = !DIDerivedType(tag: DW_TAG_member, name: "address_space", scope: !754, file: !6, line: 399, baseType: !7, size: 8, offset: 56, flags: DIFlagBitField, extraData: i64 0)
!786 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !751, file: !6, line: 3373, baseType: !787, size: 192)
!787 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_common", file: !6, line: 402, size: 192, elements: !788)
!788 = !{!789, !790, !791}
!789 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !787, file: !6, line: 403, baseType: !754, size: 64)
!790 = !DIDerivedType(tag: DW_TAG_member, name: "chain", scope: !787, file: !6, line: 404, baseType: !748, size: 64, offset: 64)
!791 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !787, file: !6, line: 405, baseType: !748, size: 64, offset: 128)
!792 = !DIDerivedType(tag: DW_TAG_member, name: "int_cst", scope: !751, file: !6, line: 3374, baseType: !793, size: 320)
!793 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_int_cst", file: !6, line: 1384, size: 320, elements: !794)
!794 = !{!795, !796}
!795 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !793, file: !6, line: 1385, baseType: !787, size: 192)
!796 = !DIDerivedType(tag: DW_TAG_member, name: "int_cst", scope: !793, file: !6, line: 1386, baseType: !797, size: 128, offset: 192)
!797 = !DIDerivedType(tag: DW_TAG_typedef, name: "double_int", file: !798, line: 58, baseType: !799)
!798 = !DIFile(filename: "./double-int.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!799 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !798, line: 54, size: 128, elements: !800)
!800 = !{!801, !803}
!801 = !DIDerivedType(tag: DW_TAG_member, name: "low", scope: !799, file: !798, line: 56, baseType: !802, size: 64)
!802 = !DIBasicType(name: "long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!803 = !DIDerivedType(tag: DW_TAG_member, name: "high", scope: !799, file: !798, line: 57, baseType: !804, size: 64, offset: 64)
!804 = !DIBasicType(name: "long int", size: 64, encoding: DW_ATE_signed)
!805 = !DIDerivedType(tag: DW_TAG_member, name: "real_cst", scope: !751, file: !6, line: 3375, baseType: !806, size: 256)
!806 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_real_cst", file: !6, line: 1397, size: 256, elements: !807)
!807 = !{!808, !809}
!808 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !806, file: !6, line: 1398, baseType: !787, size: 192)
!809 = !DIDerivedType(tag: DW_TAG_member, name: "real_cst_ptr", scope: !806, file: !6, line: 1399, baseType: !810, size: 64, offset: 192)
!810 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !811, size: 64)
!811 = !DICompositeType(tag: DW_TAG_structure_type, name: "real_value", file: !6, line: 1392, flags: DIFlagFwdDecl)
!812 = !DIDerivedType(tag: DW_TAG_member, name: "fixed_cst", scope: !751, file: !6, line: 3376, baseType: !813, size: 256)
!813 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_fixed_cst", file: !6, line: 1408, size: 256, elements: !814)
!814 = !{!815, !816}
!815 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !813, file: !6, line: 1409, baseType: !787, size: 192)
!816 = !DIDerivedType(tag: DW_TAG_member, name: "fixed_cst_ptr", scope: !813, file: !6, line: 1410, baseType: !817, size: 64, offset: 192)
!817 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !818, size: 64)
!818 = !DICompositeType(tag: DW_TAG_structure_type, name: "fixed_value", file: !6, line: 1403, flags: DIFlagFwdDecl)
!819 = !DIDerivedType(tag: DW_TAG_member, name: "vector", scope: !751, file: !6, line: 3377, baseType: !820, size: 256)
!820 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_vector", file: !6, line: 1437, size: 256, elements: !821)
!821 = !{!822, !823}
!822 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !820, file: !6, line: 1438, baseType: !787, size: 192)
!823 = !DIDerivedType(tag: DW_TAG_member, name: "elements", scope: !820, file: !6, line: 1439, baseType: !748, size: 64, offset: 192)
!824 = !DIDerivedType(tag: DW_TAG_member, name: "string", scope: !751, file: !6, line: 3378, baseType: !825, size: 256)
!825 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_string", file: !6, line: 1418, size: 256, elements: !826)
!826 = !{!827, !828, !830}
!827 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !825, file: !6, line: 1419, baseType: !787, size: 192)
!828 = !DIDerivedType(tag: DW_TAG_member, name: "length", scope: !825, file: !6, line: 1420, baseType: !829, size: 32, offset: 192)
!829 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!830 = !DIDerivedType(tag: DW_TAG_member, name: "str", scope: !825, file: !6, line: 1421, baseType: !831, size: 8, offset: 224)
!831 = !DICompositeType(tag: DW_TAG_array_type, baseType: !832, size: 8, elements: !833)
!832 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!833 = !{!834}
!834 = !DISubrange(count: 1)
!835 = !DIDerivedType(tag: DW_TAG_member, name: "complex", scope: !751, file: !6, line: 3379, baseType: !836, size: 320)
!836 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_complex", file: !6, line: 1428, size: 320, elements: !837)
!837 = !{!838, !839, !840}
!838 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !836, file: !6, line: 1429, baseType: !787, size: 192)
!839 = !DIDerivedType(tag: DW_TAG_member, name: "real", scope: !836, file: !6, line: 1430, baseType: !748, size: 64, offset: 192)
!840 = !DIDerivedType(tag: DW_TAG_member, name: "imag", scope: !836, file: !6, line: 1431, baseType: !748, size: 64, offset: 256)
!841 = !DIDerivedType(tag: DW_TAG_member, name: "identifier", scope: !751, file: !6, line: 3380, baseType: !842, size: 320)
!842 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_identifier", file: !6, line: 1460, size: 320, elements: !843)
!843 = !{!844, !845}
!844 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !842, file: !6, line: 1461, baseType: !787, size: 192)
!845 = !DIDerivedType(tag: DW_TAG_member, name: "id", scope: !842, file: !6, line: 1462, baseType: !846, size: 128, offset: 192)
!846 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ht_identifier", file: !847, line: 31, size: 128, elements: !848)
!847 = !DIFile(filename: "./symtab.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!848 = !{!849, !853, !854}
!849 = !DIDerivedType(tag: DW_TAG_member, name: "str", scope: !846, file: !847, line: 32, baseType: !850, size: 64)
!850 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !851, size: 64)
!851 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !852)
!852 = !DIBasicType(name: "unsigned char", size: 8, encoding: DW_ATE_unsigned_char)
!853 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !846, file: !847, line: 33, baseType: !7, size: 32, offset: 64)
!854 = !DIDerivedType(tag: DW_TAG_member, name: "hash_value", scope: !846, file: !847, line: 34, baseType: !7, size: 32, offset: 96)
!855 = !DIDerivedType(tag: DW_TAG_member, name: "decl_minimal", scope: !751, file: !6, line: 3381, baseType: !856, size: 384)
!856 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_minimal", file: !6, line: 2507, size: 384, elements: !857)
!857 = !{!858, !859, !864, !865, !866}
!858 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !856, file: !6, line: 2508, baseType: !787, size: 192)
!859 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !856, file: !6, line: 2509, baseType: !860, size: 32, offset: 192)
!860 = !DIDerivedType(tag: DW_TAG_typedef, name: "location_t", file: !861, line: 58, baseType: !862)
!861 = !DIFile(filename: "./input.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!862 = !DIDerivedType(tag: DW_TAG_typedef, name: "source_location", file: !863, line: 44, baseType: !7)
!863 = !DIFile(filename: "./line-map.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!864 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !856, file: !6, line: 2510, baseType: !7, size: 32, offset: 224)
!865 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !856, file: !6, line: 2511, baseType: !748, size: 64, offset: 256)
!866 = !DIDerivedType(tag: DW_TAG_member, name: "context", scope: !856, file: !6, line: 2512, baseType: !748, size: 64, offset: 320)
!867 = !DIDerivedType(tag: DW_TAG_member, name: "decl_common", scope: !751, file: !6, line: 3382, baseType: !868, size: 896)
!868 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_common", file: !6, line: 2652, size: 896, elements: !869)
!869 = !{!870, !871, !872, !873, !874, !875, !876, !877, !878, !879, !880, !881, !882, !883, !884, !885, !886, !887, !888, !889, !890, !891, !892, !893, !894, !895, !896, !897, !898, !899, !900, !901, !902}
!870 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !868, file: !6, line: 2653, baseType: !856, size: 384)
!871 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !868, file: !6, line: 2654, baseType: !748, size: 64, offset: 384)
!872 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !868, file: !6, line: 2656, baseType: !7, size: 8, offset: 448, flags: DIFlagBitField, extraData: i64 448)
!873 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal_flag", scope: !868, file: !6, line: 2658, baseType: !7, size: 1, offset: 456, flags: DIFlagBitField, extraData: i64 448)
!874 = !DIDerivedType(tag: DW_TAG_member, name: "virtual_flag", scope: !868, file: !6, line: 2659, baseType: !7, size: 1, offset: 457, flags: DIFlagBitField, extraData: i64 448)
!875 = !DIDerivedType(tag: DW_TAG_member, name: "ignored_flag", scope: !868, file: !6, line: 2660, baseType: !7, size: 1, offset: 458, flags: DIFlagBitField, extraData: i64 448)
!876 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_flag", scope: !868, file: !6, line: 2661, baseType: !7, size: 1, offset: 459, flags: DIFlagBitField, extraData: i64 448)
!877 = !DIDerivedType(tag: DW_TAG_member, name: "artificial_flag", scope: !868, file: !6, line: 2662, baseType: !7, size: 1, offset: 460, flags: DIFlagBitField, extraData: i64 448)
!878 = !DIDerivedType(tag: DW_TAG_member, name: "preserve_flag", scope: !868, file: !6, line: 2663, baseType: !7, size: 1, offset: 461, flags: DIFlagBitField, extraData: i64 448)
!879 = !DIDerivedType(tag: DW_TAG_member, name: "debug_expr_is_from", scope: !868, file: !6, line: 2664, baseType: !7, size: 1, offset: 462, flags: DIFlagBitField, extraData: i64 448)
!880 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !868, file: !6, line: 2666, baseType: !7, size: 1, offset: 463, flags: DIFlagBitField, extraData: i64 448)
!881 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !868, file: !6, line: 2667, baseType: !7, size: 1, offset: 464, flags: DIFlagBitField, extraData: i64 448)
!882 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !868, file: !6, line: 2668, baseType: !7, size: 1, offset: 465, flags: DIFlagBitField, extraData: i64 448)
!883 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !868, file: !6, line: 2669, baseType: !7, size: 1, offset: 466, flags: DIFlagBitField, extraData: i64 448)
!884 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !868, file: !6, line: 2670, baseType: !7, size: 1, offset: 467, flags: DIFlagBitField, extraData: i64 448)
!885 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !868, file: !6, line: 2671, baseType: !7, size: 1, offset: 468, flags: DIFlagBitField, extraData: i64 448)
!886 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !868, file: !6, line: 2672, baseType: !7, size: 1, offset: 469, flags: DIFlagBitField, extraData: i64 448)
!887 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_7", scope: !868, file: !6, line: 2673, baseType: !7, size: 1, offset: 470, flags: DIFlagBitField, extraData: i64 448)
!888 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_8", scope: !868, file: !6, line: 2674, baseType: !7, size: 1, offset: 471, flags: DIFlagBitField, extraData: i64 448)
!889 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_0", scope: !868, file: !6, line: 2678, baseType: !7, size: 1, offset: 472, flags: DIFlagBitField, extraData: i64 448)
!890 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_1", scope: !868, file: !6, line: 2682, baseType: !7, size: 1, offset: 473, flags: DIFlagBitField, extraData: i64 448)
!891 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_2", scope: !868, file: !6, line: 2685, baseType: !7, size: 1, offset: 474, flags: DIFlagBitField, extraData: i64 448)
!892 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reg_flag", scope: !868, file: !6, line: 2688, baseType: !7, size: 1, offset: 475, flags: DIFlagBitField, extraData: i64 448)
!893 = !DIDerivedType(tag: DW_TAG_member, name: "decl_by_reference_flag", scope: !868, file: !6, line: 2690, baseType: !7, size: 1, offset: 476, flags: DIFlagBitField, extraData: i64 448)
!894 = !DIDerivedType(tag: DW_TAG_member, name: "decl_restricted_flag", scope: !868, file: !6, line: 2692, baseType: !7, size: 1, offset: 477, flags: DIFlagBitField, extraData: i64 448)
!895 = !DIDerivedType(tag: DW_TAG_member, name: "decl_common_unused", scope: !868, file: !6, line: 2695, baseType: !7, size: 2, offset: 478, flags: DIFlagBitField, extraData: i64 448)
!896 = !DIDerivedType(tag: DW_TAG_member, name: "off_align", scope: !868, file: !6, line: 2698, baseType: !7, size: 8, offset: 480, flags: DIFlagBitField, extraData: i64 448)
!897 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !868, file: !6, line: 2703, baseType: !7, size: 32, offset: 512)
!898 = !DIDerivedType(tag: DW_TAG_member, name: "size_unit", scope: !868, file: !6, line: 2705, baseType: !748, size: 64, offset: 576)
!899 = !DIDerivedType(tag: DW_TAG_member, name: "initial", scope: !868, file: !6, line: 2706, baseType: !748, size: 64, offset: 640)
!900 = !DIDerivedType(tag: DW_TAG_member, name: "attributes", scope: !868, file: !6, line: 2707, baseType: !748, size: 64, offset: 704)
!901 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_origin", scope: !868, file: !6, line: 2708, baseType: !748, size: 64, offset: 768)
!902 = !DIDerivedType(tag: DW_TAG_member, name: "lang_specific", scope: !868, file: !6, line: 2711, baseType: !903, size: 64, offset: 832)
!903 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !904, size: 64)
!904 = !DICompositeType(tag: DW_TAG_structure_type, name: "lang_decl", file: !6, line: 2711, flags: DIFlagFwdDecl)
!905 = !DIDerivedType(tag: DW_TAG_member, name: "decl_with_rtl", scope: !751, file: !6, line: 3383, baseType: !906, size: 960)
!906 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_with_rtl", file: !6, line: 2756, size: 960, elements: !907)
!907 = !{!908, !909}
!908 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !906, file: !6, line: 2757, baseType: !868, size: 896)
!909 = !DIDerivedType(tag: DW_TAG_member, name: "rtl", scope: !906, file: !6, line: 2758, baseType: !910, size: 64, offset: 896)
!910 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtx", file: !749, line: 50, baseType: !911)
!911 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !912, size: 64)
!912 = !DICompositeType(tag: DW_TAG_structure_type, name: "rtx_def", file: !749, line: 49, flags: DIFlagFwdDecl)
!913 = !DIDerivedType(tag: DW_TAG_member, name: "decl_non_common", scope: !751, file: !6, line: 3384, baseType: !914, size: 1472)
!914 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_non_common", file: !6, line: 3114, size: 1472, elements: !915)
!915 = !{!916, !937, !938, !939, !940}
!916 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !914, file: !6, line: 3115, baseType: !917, size: 1216)
!917 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_with_vis", file: !6, line: 2984, size: 1216, elements: !918)
!918 = !{!919, !920, !921, !922, !923, !924, !925, !926, !927, !928, !929, !930, !931, !932, !933, !934, !935, !936}
!919 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !917, file: !6, line: 2985, baseType: !906, size: 960)
!920 = !DIDerivedType(tag: DW_TAG_member, name: "assembler_name", scope: !917, file: !6, line: 2986, baseType: !748, size: 64, offset: 960)
!921 = !DIDerivedType(tag: DW_TAG_member, name: "section_name", scope: !917, file: !6, line: 2987, baseType: !748, size: 64, offset: 1024)
!922 = !DIDerivedType(tag: DW_TAG_member, name: "comdat_group", scope: !917, file: !6, line: 2988, baseType: !748, size: 64, offset: 1088)
!923 = !DIDerivedType(tag: DW_TAG_member, name: "defer_output", scope: !917, file: !6, line: 2991, baseType: !7, size: 1, offset: 1152, flags: DIFlagBitField, extraData: i64 1152)
!924 = !DIDerivedType(tag: DW_TAG_member, name: "hard_register", scope: !917, file: !6, line: 2992, baseType: !7, size: 1, offset: 1153, flags: DIFlagBitField, extraData: i64 1152)
!925 = !DIDerivedType(tag: DW_TAG_member, name: "thread_local", scope: !917, file: !6, line: 2993, baseType: !7, size: 1, offset: 1154, flags: DIFlagBitField, extraData: i64 1152)
!926 = !DIDerivedType(tag: DW_TAG_member, name: "common_flag", scope: !917, file: !6, line: 2994, baseType: !7, size: 1, offset: 1155, flags: DIFlagBitField, extraData: i64 1152)
!927 = !DIDerivedType(tag: DW_TAG_member, name: "in_text_section", scope: !917, file: !6, line: 2995, baseType: !7, size: 1, offset: 1156, flags: DIFlagBitField, extraData: i64 1152)
!928 = !DIDerivedType(tag: DW_TAG_member, name: "dllimport_flag", scope: !917, file: !6, line: 2996, baseType: !7, size: 1, offset: 1157, flags: DIFlagBitField, extraData: i64 1152)
!929 = !DIDerivedType(tag: DW_TAG_member, name: "shadowed_for_var_p", scope: !917, file: !6, line: 2998, baseType: !7, size: 1, offset: 1158, flags: DIFlagBitField, extraData: i64 1152)
!930 = !DIDerivedType(tag: DW_TAG_member, name: "weak_flag", scope: !917, file: !6, line: 3000, baseType: !7, size: 1, offset: 1159, flags: DIFlagBitField, extraData: i64 1152)
!931 = !DIDerivedType(tag: DW_TAG_member, name: "seen_in_bind_expr", scope: !917, file: !6, line: 3002, baseType: !7, size: 1, offset: 1160, flags: DIFlagBitField, extraData: i64 1152)
!932 = !DIDerivedType(tag: DW_TAG_member, name: "comdat_flag", scope: !917, file: !6, line: 3003, baseType: !7, size: 1, offset: 1161, flags: DIFlagBitField, extraData: i64 1152)
!933 = !DIDerivedType(tag: DW_TAG_member, name: "visibility", scope: !917, file: !6, line: 3004, baseType: !7, size: 2, offset: 1162, flags: DIFlagBitField, extraData: i64 1152)
!934 = !DIDerivedType(tag: DW_TAG_member, name: "visibility_specified", scope: !917, file: !6, line: 3005, baseType: !7, size: 1, offset: 1164, flags: DIFlagBitField, extraData: i64 1152)
!935 = !DIDerivedType(tag: DW_TAG_member, name: "tls_model", scope: !917, file: !6, line: 3007, baseType: !7, size: 3, offset: 1165, flags: DIFlagBitField, extraData: i64 1152)
!936 = !DIDerivedType(tag: DW_TAG_member, name: "init_priority_p", scope: !917, file: !6, line: 3010, baseType: !7, size: 1, offset: 1168, flags: DIFlagBitField, extraData: i64 1152)
!937 = !DIDerivedType(tag: DW_TAG_member, name: "saved_tree", scope: !914, file: !6, line: 3117, baseType: !748, size: 64, offset: 1216)
!938 = !DIDerivedType(tag: DW_TAG_member, name: "arguments", scope: !914, file: !6, line: 3119, baseType: !748, size: 64, offset: 1280)
!939 = !DIDerivedType(tag: DW_TAG_member, name: "result", scope: !914, file: !6, line: 3121, baseType: !748, size: 64, offset: 1344)
!940 = !DIDerivedType(tag: DW_TAG_member, name: "vindex", scope: !914, file: !6, line: 3123, baseType: !748, size: 64, offset: 1408)
!941 = !DIDerivedType(tag: DW_TAG_member, name: "parm_decl", scope: !751, file: !6, line: 3385, baseType: !942, size: 1088)
!942 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_parm_decl", file: !6, line: 2874, size: 1088, elements: !943)
!943 = !{!944, !945, !946}
!944 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !942, file: !6, line: 2875, baseType: !906, size: 960)
!945 = !DIDerivedType(tag: DW_TAG_member, name: "incoming_rtl", scope: !942, file: !6, line: 2876, baseType: !910, size: 64, offset: 960)
!946 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !942, file: !6, line: 2877, baseType: !947, size: 64, offset: 1024)
!947 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !948, size: 64)
!948 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "var_ann_d", file: !949, line: 172, size: 128, elements: !950)
!949 = !DIFile(filename: "./tree-flow.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!950 = !{!951, !952, !953, !954, !955, !956, !957}
!951 = !DIDerivedType(tag: DW_TAG_member, name: "base_var_processed", scope: !948, file: !949, line: 174, baseType: !7, size: 1, flags: DIFlagBitField, extraData: i64 0)
!952 = !DIDerivedType(tag: DW_TAG_member, name: "used", scope: !948, file: !949, line: 178, baseType: !7, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!953 = !DIDerivedType(tag: DW_TAG_member, name: "need_phi_state", scope: !948, file: !949, line: 183, baseType: !7, size: 2, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!954 = !DIDerivedType(tag: DW_TAG_member, name: "is_heapvar", scope: !948, file: !949, line: 187, baseType: !7, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!955 = !DIDerivedType(tag: DW_TAG_member, name: "noalias_state", scope: !948, file: !949, line: 192, baseType: !7, size: 2, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!956 = !DIDerivedType(tag: DW_TAG_member, name: "base_index", scope: !948, file: !949, line: 195, baseType: !7, size: 32, offset: 32)
!957 = !DIDerivedType(tag: DW_TAG_member, name: "current_def", scope: !948, file: !949, line: 199, baseType: !748, size: 64, offset: 64)
!958 = !DIDerivedType(tag: DW_TAG_member, name: "decl_with_vis", scope: !751, file: !6, line: 3386, baseType: !917, size: 1216)
!959 = !DIDerivedType(tag: DW_TAG_member, name: "var_decl", scope: !751, file: !6, line: 3387, baseType: !960, size: 1280)
!960 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_var_decl", file: !6, line: 3093, size: 1280, elements: !961)
!961 = !{!962, !963}
!962 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !960, file: !6, line: 3094, baseType: !917, size: 1216)
!963 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !960, file: !6, line: 3095, baseType: !947, size: 64, offset: 1216)
!964 = !DIDerivedType(tag: DW_TAG_member, name: "field_decl", scope: !751, file: !6, line: 3388, baseType: !965, size: 1216)
!965 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_field_decl", file: !6, line: 2824, size: 1216, elements: !966)
!966 = !{!967, !968, !969, !970, !971, !972}
!967 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !965, file: !6, line: 2825, baseType: !868, size: 896)
!968 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !965, file: !6, line: 2827, baseType: !748, size: 64, offset: 896)
!969 = !DIDerivedType(tag: DW_TAG_member, name: "bit_field_type", scope: !965, file: !6, line: 2828, baseType: !748, size: 64, offset: 960)
!970 = !DIDerivedType(tag: DW_TAG_member, name: "qualifier", scope: !965, file: !6, line: 2829, baseType: !748, size: 64, offset: 1024)
!971 = !DIDerivedType(tag: DW_TAG_member, name: "bit_offset", scope: !965, file: !6, line: 2830, baseType: !748, size: 64, offset: 1088)
!972 = !DIDerivedType(tag: DW_TAG_member, name: "fcontext", scope: !965, file: !6, line: 2831, baseType: !748, size: 64, offset: 1152)
!973 = !DIDerivedType(tag: DW_TAG_member, name: "label_decl", scope: !751, file: !6, line: 3389, baseType: !974, size: 1024)
!974 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_label_decl", file: !6, line: 2850, size: 1024, elements: !975)
!975 = !{!976, !977, !978}
!976 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !974, file: !6, line: 2851, baseType: !906, size: 960)
!977 = !DIDerivedType(tag: DW_TAG_member, name: "label_decl_uid", scope: !974, file: !6, line: 2852, baseType: !829, size: 32, offset: 960)
!978 = !DIDerivedType(tag: DW_TAG_member, name: "eh_landing_pad_nr", scope: !974, file: !6, line: 2853, baseType: !829, size: 32, offset: 992)
!979 = !DIDerivedType(tag: DW_TAG_member, name: "result_decl", scope: !751, file: !6, line: 3390, baseType: !980, size: 1024)
!980 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_result_decl", file: !6, line: 2857, size: 1024, elements: !981)
!981 = !{!982, !983}
!982 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !980, file: !6, line: 2858, baseType: !906, size: 960)
!983 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !980, file: !6, line: 2859, baseType: !947, size: 64, offset: 960)
!984 = !DIDerivedType(tag: DW_TAG_member, name: "const_decl", scope: !751, file: !6, line: 3391, baseType: !985, size: 960)
!985 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_const_decl", file: !6, line: 2862, size: 960, elements: !986)
!986 = !{!987}
!987 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !985, file: !6, line: 2863, baseType: !906, size: 960)
!988 = !DIDerivedType(tag: DW_TAG_member, name: "type_decl", scope: !751, file: !6, line: 3392, baseType: !989, size: 1472)
!989 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_type_decl", file: !6, line: 3304, size: 1472, elements: !990)
!990 = !{!991}
!991 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !989, file: !6, line: 3305, baseType: !914, size: 1472)
!992 = !DIDerivedType(tag: DW_TAG_member, name: "function_decl", scope: !751, file: !6, line: 3393, baseType: !993, size: 1792)
!993 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_function_decl", file: !6, line: 3248, size: 1792, elements: !994)
!994 = !{!995, !996, !1557, !1558, !1559, !1560, !1561, !1562, !1563, !1564, !1565, !1566, !1567, !1568, !1569, !1570, !1571, !1572, !1573, !1574, !1575, !1576, !1577}
!995 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !993, file: !6, line: 3249, baseType: !914, size: 1472)
!996 = !DIDerivedType(tag: DW_TAG_member, name: "f", scope: !993, file: !6, line: 3251, baseType: !997, size: 64, offset: 1472)
!997 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !998, size: 64)
!998 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "function", file: !999, line: 463, size: 1152, elements: !1000)
!999 = !DIFile(filename: "./function.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1000 = !{!1001, !1004, !1324, !1325, !1498, !1501, !1502, !1503, !1504, !1505, !1506, !1530, !1533, !1534, !1535, !1536, !1537, !1538, !1539, !1540, !1541, !1542, !1543, !1544, !1545, !1546, !1547, !1548, !1549, !1550, !1551, !1552, !1553, !1554, !1555, !1556}
!1001 = !DIDerivedType(tag: DW_TAG_member, name: "eh", scope: !998, file: !999, line: 464, baseType: !1002, size: 64)
!1002 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1003, size: 64)
!1003 = !DICompositeType(tag: DW_TAG_structure_type, name: "eh_status", file: !999, line: 464, flags: DIFlagFwdDecl)
!1004 = !DIDerivedType(tag: DW_TAG_member, name: "cfg", scope: !998, file: !999, line: 467, baseType: !1005, size: 64, offset: 64)
!1005 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1006, size: 64)
!1006 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "control_flow_graph", file: !202, line: 374, size: 640, elements: !1007)
!1007 = !{!1008, !1299, !1300, !1313, !1314, !1315, !1316, !1317, !1318, !1320, !1322, !1323}
!1008 = !DIDerivedType(tag: DW_TAG_member, name: "x_entry_block_ptr", scope: !1006, file: !202, line: 377, baseType: !1009, size: 64)
!1009 = !DIDerivedType(tag: DW_TAG_typedef, name: "basic_block", file: !749, line: 111, baseType: !1010)
!1010 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1011, size: 64)
!1011 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "basic_block_def", file: !202, line: 217, size: 832, elements: !1012)
!1012 = !{!1013, !1262, !1263, !1264, !1267, !1273, !1274, !1275, !1293, !1294, !1295, !1296, !1297, !1298}
!1013 = !DIDerivedType(tag: DW_TAG_member, name: "preds", scope: !1011, file: !202, line: 219, baseType: !1014, size: 64)
!1014 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1015, size: 64)
!1015 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_edge_gc", file: !202, line: 151, baseType: !1016)
!1016 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_edge_gc", file: !202, line: 151, size: 128, elements: !1017)
!1017 = !{!1018}
!1018 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1016, file: !202, line: 151, baseType: !1019, size: 128)
!1019 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_edge_base", file: !202, line: 150, baseType: !1020)
!1020 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_edge_base", file: !202, line: 150, size: 128, elements: !1021)
!1021 = !{!1022, !1023, !1024}
!1022 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1020, file: !202, line: 150, baseType: !7, size: 32)
!1023 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1020, file: !202, line: 150, baseType: !7, size: 32, offset: 32)
!1024 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1020, file: !202, line: 150, baseType: !1025, size: 64, offset: 64)
!1025 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1026, size: 64, elements: !833)
!1026 = !DIDerivedType(tag: DW_TAG_typedef, name: "edge", file: !749, line: 108, baseType: !1027)
!1027 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1028, size: 64)
!1028 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "edge_def", file: !202, line: 122, size: 512, elements: !1029)
!1029 = !{!1030, !1031, !1032, !1253, !1255, !1256, !1257, !1258, !1259, !1260}
!1030 = !DIDerivedType(tag: DW_TAG_member, name: "src", scope: !1028, file: !202, line: 124, baseType: !1010, size: 64)
!1031 = !DIDerivedType(tag: DW_TAG_member, name: "dest", scope: !1028, file: !202, line: 125, baseType: !1010, size: 64, offset: 64)
!1032 = !DIDerivedType(tag: DW_TAG_member, name: "insns", scope: !1028, file: !202, line: 131, baseType: !1033, size: 64, offset: 128)
!1033 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "edge_def_insns", file: !202, line: 128, size: 64, elements: !1034)
!1034 = !{!1035, !1252}
!1035 = !DIDerivedType(tag: DW_TAG_member, name: "g", scope: !1033, file: !202, line: 129, baseType: !1036, size: 64)
!1036 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple_seq", file: !749, line: 66, baseType: !1037)
!1037 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1038, size: 64)
!1038 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_seq_d", file: !603, line: 143, size: 192, elements: !1039)
!1039 = !{!1040, !1250, !1251}
!1040 = !DIDerivedType(tag: DW_TAG_member, name: "first", scope: !1038, file: !603, line: 145, baseType: !1041, size: 64)
!1041 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple_seq_node", file: !749, line: 69, baseType: !1042)
!1042 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1043, size: 64)
!1043 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_seq_node_d", file: !603, line: 136, size: 192, elements: !1044)
!1044 = !{!1045, !1248, !1249}
!1045 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !1043, file: !603, line: 137, baseType: !1046, size: 64)
!1046 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple", file: !749, line: 58, baseType: !1047)
!1047 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1048, size: 64)
!1048 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "gimple_statement_d", file: !603, line: 737, size: 768, elements: !1049)
!1049 = !{!1050, !1067, !1101, !1107, !1112, !1117, !1124, !1130, !1136, !1141, !1155, !1160, !1166, !1171, !1183, !1188, !1206, !1213, !1220, !1226, !1231, !1237, !1243}
!1050 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1048, file: !603, line: 738, baseType: !1051, size: 256)
!1051 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_base", file: !603, line: 271, size: 256, elements: !1052)
!1052 = !{!1053, !1054, !1055, !1056, !1057, !1058, !1059, !1060, !1061, !1062, !1063, !1064, !1065, !1066}
!1053 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !1051, file: !603, line: 274, baseType: !7, size: 8, flags: DIFlagBitField, extraData: i64 0)
!1054 = !DIDerivedType(tag: DW_TAG_member, name: "no_warning", scope: !1051, file: !603, line: 277, baseType: !7, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1055 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !1051, file: !603, line: 281, baseType: !7, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1056 = !DIDerivedType(tag: DW_TAG_member, name: "nontemporal_move", scope: !1051, file: !603, line: 284, baseType: !7, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1057 = !DIDerivedType(tag: DW_TAG_member, name: "plf", scope: !1051, file: !603, line: 291, baseType: !7, size: 2, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!1058 = !DIDerivedType(tag: DW_TAG_member, name: "modified", scope: !1051, file: !603, line: 295, baseType: !7, size: 1, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!1059 = !DIDerivedType(tag: DW_TAG_member, name: "has_volatile_ops", scope: !1051, file: !603, line: 298, baseType: !7, size: 1, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!1060 = !DIDerivedType(tag: DW_TAG_member, name: "pad", scope: !1051, file: !603, line: 301, baseType: !7, size: 1, offset: 15, flags: DIFlagBitField, extraData: i64 0)
!1061 = !DIDerivedType(tag: DW_TAG_member, name: "subcode", scope: !1051, file: !603, line: 307, baseType: !7, size: 16, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1062 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !1051, file: !603, line: 312, baseType: !7, size: 32, offset: 32)
!1063 = !DIDerivedType(tag: DW_TAG_member, name: "location", scope: !1051, file: !603, line: 316, baseType: !860, size: 32, offset: 64)
!1064 = !DIDerivedType(tag: DW_TAG_member, name: "num_ops", scope: !1051, file: !603, line: 319, baseType: !7, size: 32, offset: 96)
!1065 = !DIDerivedType(tag: DW_TAG_member, name: "bb", scope: !1051, file: !603, line: 323, baseType: !1010, size: 64, offset: 128)
!1066 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !1051, file: !603, line: 327, baseType: !748, size: 64, offset: 192)
!1067 = !DIDerivedType(tag: DW_TAG_member, name: "gsops", scope: !1048, file: !603, line: 739, baseType: !1068, size: 448)
!1068 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_ops", file: !603, line: 350, size: 448, elements: !1069)
!1069 = !{!1070, !1099}
!1070 = !DIDerivedType(tag: DW_TAG_member, name: "opbase", scope: !1068, file: !603, line: 353, baseType: !1071, size: 384)
!1071 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_ops_base", file: !603, line: 333, size: 384, elements: !1072)
!1072 = !{!1073, !1074, !1082}
!1073 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1071, file: !603, line: 336, baseType: !1051, size: 256)
!1074 = !DIDerivedType(tag: DW_TAG_member, name: "def_ops", scope: !1071, file: !603, line: 343, baseType: !1075, size: 64, offset: 256)
!1075 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1076, size: 64)
!1076 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "def_optype_d", file: !1077, line: 37, size: 128, elements: !1078)
!1077 = !DIFile(filename: "./tree-ssa-operands.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1078 = !{!1079, !1080}
!1079 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1076, file: !1077, line: 39, baseType: !1075, size: 64)
!1080 = !DIDerivedType(tag: DW_TAG_member, name: "def_ptr", scope: !1076, file: !1077, line: 40, baseType: !1081, size: 64, offset: 64)
!1081 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !748, size: 64)
!1082 = !DIDerivedType(tag: DW_TAG_member, name: "use_ops", scope: !1071, file: !603, line: 344, baseType: !1083, size: 64, offset: 320)
!1083 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1084, size: 64)
!1084 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "use_optype_d", file: !1077, line: 45, size: 320, elements: !1085)
!1085 = !{!1086, !1087}
!1086 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1084, file: !1077, line: 47, baseType: !1083, size: 64)
!1087 = !DIDerivedType(tag: DW_TAG_member, name: "use_ptr", scope: !1084, file: !1077, line: 48, baseType: !1088, size: 256, offset: 64)
!1088 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_use_operand_d", file: !6, line: 1883, size: 256, elements: !1089)
!1089 = !{!1090, !1092, !1093, !1098}
!1090 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1088, file: !6, line: 1884, baseType: !1091, size: 64)
!1091 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1088, size: 64)
!1092 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1088, file: !6, line: 1885, baseType: !1091, size: 64, offset: 64)
!1093 = !DIDerivedType(tag: DW_TAG_member, name: "loc", scope: !1088, file: !6, line: 1891, baseType: !1094, size: 64, offset: 128)
!1094 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1088, file: !6, line: 1891, size: 64, elements: !1095)
!1095 = !{!1096, !1097}
!1096 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !1094, file: !6, line: 1891, baseType: !1046, size: 64)
!1097 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_name", scope: !1094, file: !6, line: 1891, baseType: !748, size: 64)
!1098 = !DIDerivedType(tag: DW_TAG_member, name: "use", scope: !1088, file: !6, line: 1892, baseType: !1081, size: 64, offset: 192)
!1099 = !DIDerivedType(tag: DW_TAG_member, name: "op", scope: !1068, file: !603, line: 359, baseType: !1100, size: 64, offset: 384)
!1100 = !DICompositeType(tag: DW_TAG_array_type, baseType: !748, size: 64, elements: !833)
!1101 = !DIDerivedType(tag: DW_TAG_member, name: "gsmembase", scope: !1048, file: !603, line: 740, baseType: !1102, size: 512)
!1102 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_memory_ops_base", file: !603, line: 365, size: 512, elements: !1103)
!1103 = !{!1104, !1105, !1106}
!1104 = !DIDerivedType(tag: DW_TAG_member, name: "opbase", scope: !1102, file: !603, line: 368, baseType: !1071, size: 384)
!1105 = !DIDerivedType(tag: DW_TAG_member, name: "vdef", scope: !1102, file: !603, line: 373, baseType: !748, size: 64, offset: 384)
!1106 = !DIDerivedType(tag: DW_TAG_member, name: "vuse", scope: !1102, file: !603, line: 374, baseType: !748, size: 64, offset: 448)
!1107 = !DIDerivedType(tag: DW_TAG_member, name: "gsmem", scope: !1048, file: !603, line: 741, baseType: !1108, size: 576)
!1108 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_memory_ops", file: !603, line: 380, size: 576, elements: !1109)
!1109 = !{!1110, !1111}
!1110 = !DIDerivedType(tag: DW_TAG_member, name: "membase", scope: !1108, file: !603, line: 383, baseType: !1102, size: 512)
!1111 = !DIDerivedType(tag: DW_TAG_member, name: "op", scope: !1108, file: !603, line: 389, baseType: !1100, size: 64, offset: 512)
!1112 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !1048, file: !603, line: 742, baseType: !1113, size: 320)
!1113 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp", file: !603, line: 395, size: 320, elements: !1114)
!1114 = !{!1115, !1116}
!1115 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1113, file: !603, line: 397, baseType: !1051, size: 256)
!1116 = !DIDerivedType(tag: DW_TAG_member, name: "body", scope: !1113, file: !603, line: 400, baseType: !1036, size: 64, offset: 256)
!1117 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_bind", scope: !1048, file: !603, line: 743, baseType: !1118, size: 448)
!1118 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_bind", file: !603, line: 406, size: 448, elements: !1119)
!1119 = !{!1120, !1121, !1122, !1123}
!1120 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1118, file: !603, line: 408, baseType: !1051, size: 256)
!1121 = !DIDerivedType(tag: DW_TAG_member, name: "vars", scope: !1118, file: !603, line: 412, baseType: !748, size: 64, offset: 256)
!1122 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !1118, file: !603, line: 420, baseType: !748, size: 64, offset: 320)
!1123 = !DIDerivedType(tag: DW_TAG_member, name: "body", scope: !1118, file: !603, line: 423, baseType: !1036, size: 64, offset: 384)
!1124 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_catch", scope: !1048, file: !603, line: 744, baseType: !1125, size: 384)
!1125 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_catch", file: !603, line: 429, size: 384, elements: !1126)
!1126 = !{!1127, !1128, !1129}
!1127 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1125, file: !603, line: 431, baseType: !1051, size: 256)
!1128 = !DIDerivedType(tag: DW_TAG_member, name: "types", scope: !1125, file: !603, line: 434, baseType: !748, size: 64, offset: 256)
!1129 = !DIDerivedType(tag: DW_TAG_member, name: "handler", scope: !1125, file: !603, line: 437, baseType: !1036, size: 64, offset: 320)
!1130 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_eh_filter", scope: !1048, file: !603, line: 745, baseType: !1131, size: 384)
!1131 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_eh_filter", file: !603, line: 443, size: 384, elements: !1132)
!1132 = !{!1133, !1134, !1135}
!1133 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1131, file: !603, line: 445, baseType: !1051, size: 256)
!1134 = !DIDerivedType(tag: DW_TAG_member, name: "types", scope: !1131, file: !603, line: 449, baseType: !748, size: 64, offset: 256)
!1135 = !DIDerivedType(tag: DW_TAG_member, name: "failure", scope: !1131, file: !603, line: 453, baseType: !1036, size: 64, offset: 320)
!1136 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_eh_mnt", scope: !1048, file: !603, line: 746, baseType: !1137, size: 320)
!1137 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_eh_mnt", file: !603, line: 459, size: 320, elements: !1138)
!1138 = !{!1139, !1140}
!1139 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1137, file: !603, line: 461, baseType: !1051, size: 256)
!1140 = !DIDerivedType(tag: DW_TAG_member, name: "fndecl", scope: !1137, file: !603, line: 464, baseType: !748, size: 64, offset: 256)
!1141 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_phi", scope: !1048, file: !603, line: 747, baseType: !1142, size: 768)
!1142 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_phi", file: !603, line: 469, size: 768, elements: !1143)
!1143 = !{!1144, !1145, !1146, !1147, !1148}
!1144 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1142, file: !603, line: 471, baseType: !1051, size: 256)
!1145 = !DIDerivedType(tag: DW_TAG_member, name: "capacity", scope: !1142, file: !603, line: 474, baseType: !7, size: 32, offset: 256)
!1146 = !DIDerivedType(tag: DW_TAG_member, name: "nargs", scope: !1142, file: !603, line: 475, baseType: !7, size: 32, offset: 288)
!1147 = !DIDerivedType(tag: DW_TAG_member, name: "result", scope: !1142, file: !603, line: 478, baseType: !748, size: 64, offset: 320)
!1148 = !DIDerivedType(tag: DW_TAG_member, name: "args", scope: !1142, file: !603, line: 481, baseType: !1149, size: 384, offset: 384)
!1149 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1150, size: 384, elements: !833)
!1150 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "phi_arg_d", file: !6, line: 1917, size: 384, elements: !1151)
!1151 = !{!1152, !1153, !1154}
!1152 = !DIDerivedType(tag: DW_TAG_member, name: "imm_use", scope: !1150, file: !6, line: 1920, baseType: !1088, size: 256)
!1153 = !DIDerivedType(tag: DW_TAG_member, name: "def", scope: !1150, file: !6, line: 1921, baseType: !748, size: 64, offset: 256)
!1154 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !1150, file: !6, line: 1922, baseType: !860, size: 32, offset: 320)
!1155 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_eh_ctrl", scope: !1048, file: !603, line: 748, baseType: !1156, size: 320)
!1156 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_eh_ctrl", file: !603, line: 487, size: 320, elements: !1157)
!1157 = !{!1158, !1159}
!1158 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1156, file: !603, line: 490, baseType: !1051, size: 256)
!1159 = !DIDerivedType(tag: DW_TAG_member, name: "region", scope: !1156, file: !603, line: 494, baseType: !829, size: 32, offset: 256)
!1160 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_try", scope: !1048, file: !603, line: 749, baseType: !1161, size: 384)
!1161 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_try", file: !603, line: 500, size: 384, elements: !1162)
!1162 = !{!1163, !1164, !1165}
!1163 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1161, file: !603, line: 502, baseType: !1051, size: 256)
!1164 = !DIDerivedType(tag: DW_TAG_member, name: "eval", scope: !1161, file: !603, line: 506, baseType: !1036, size: 64, offset: 256)
!1165 = !DIDerivedType(tag: DW_TAG_member, name: "cleanup", scope: !1161, file: !603, line: 510, baseType: !1036, size: 64, offset: 320)
!1166 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_wce", scope: !1048, file: !603, line: 750, baseType: !1167, size: 320)
!1167 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_wce", file: !603, line: 529, size: 320, elements: !1168)
!1168 = !{!1169, !1170}
!1169 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1167, file: !603, line: 531, baseType: !1051, size: 256)
!1170 = !DIDerivedType(tag: DW_TAG_member, name: "cleanup", scope: !1167, file: !603, line: 540, baseType: !1036, size: 64, offset: 256)
!1171 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_asm", scope: !1048, file: !603, line: 751, baseType: !1172, size: 704)
!1172 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_asm", file: !603, line: 546, size: 704, elements: !1173)
!1173 = !{!1174, !1175, !1178, !1179, !1180, !1181, !1182}
!1174 = !DIDerivedType(tag: DW_TAG_member, name: "membase", scope: !1172, file: !603, line: 549, baseType: !1102, size: 512)
!1175 = !DIDerivedType(tag: DW_TAG_member, name: "string", scope: !1172, file: !603, line: 553, baseType: !1176, size: 64, offset: 512)
!1176 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1177, size: 64)
!1177 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !832)
!1178 = !DIDerivedType(tag: DW_TAG_member, name: "ni", scope: !1172, file: !603, line: 557, baseType: !852, size: 8, offset: 576)
!1179 = !DIDerivedType(tag: DW_TAG_member, name: "no", scope: !1172, file: !603, line: 558, baseType: !852, size: 8, offset: 584)
!1180 = !DIDerivedType(tag: DW_TAG_member, name: "nc", scope: !1172, file: !603, line: 559, baseType: !852, size: 8, offset: 592)
!1181 = !DIDerivedType(tag: DW_TAG_member, name: "nl", scope: !1172, file: !603, line: 560, baseType: !852, size: 8, offset: 600)
!1182 = !DIDerivedType(tag: DW_TAG_member, name: "op", scope: !1172, file: !603, line: 566, baseType: !1100, size: 64, offset: 640)
!1183 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_critical", scope: !1048, file: !603, line: 752, baseType: !1184, size: 384)
!1184 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_critical", file: !603, line: 571, size: 384, elements: !1185)
!1185 = !{!1186, !1187}
!1186 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !1184, file: !603, line: 573, baseType: !1113, size: 320)
!1187 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1184, file: !603, line: 577, baseType: !748, size: 64, offset: 320)
!1188 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_for", scope: !1048, file: !603, line: 753, baseType: !1189, size: 576)
!1189 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_for", file: !603, line: 600, size: 576, elements: !1190)
!1190 = !{!1191, !1192, !1193, !1196, !1205}
!1191 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !1189, file: !603, line: 602, baseType: !1113, size: 320)
!1192 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !1189, file: !603, line: 605, baseType: !748, size: 64, offset: 320)
!1193 = !DIDerivedType(tag: DW_TAG_member, name: "collapse", scope: !1189, file: !603, line: 609, baseType: !1194, size: 64, offset: 384)
!1194 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !1195, line: 46, baseType: !802)
!1195 = !DIFile(filename: "Rohit/IR2Vec-LoopOptimizationFramework/build_REL_AsrtON/lib/clang/10.0.1/include/stddef.h", directory: "/home/venkat/IF-DV")
!1196 = !DIDerivedType(tag: DW_TAG_member, name: "iter", scope: !1189, file: !603, line: 612, baseType: !1197, size: 64, offset: 448)
!1197 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1198, size: 64)
!1198 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_omp_for_iter", file: !603, line: 581, size: 320, elements: !1199)
!1199 = !{!1200, !1201, !1202, !1203, !1204}
!1200 = !DIDerivedType(tag: DW_TAG_member, name: "cond", scope: !1198, file: !603, line: 583, baseType: !5, size: 32)
!1201 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !1198, file: !603, line: 586, baseType: !748, size: 64, offset: 64)
!1202 = !DIDerivedType(tag: DW_TAG_member, name: "initial", scope: !1198, file: !603, line: 589, baseType: !748, size: 64, offset: 128)
!1203 = !DIDerivedType(tag: DW_TAG_member, name: "final", scope: !1198, file: !603, line: 592, baseType: !748, size: 64, offset: 192)
!1204 = !DIDerivedType(tag: DW_TAG_member, name: "incr", scope: !1198, file: !603, line: 595, baseType: !748, size: 64, offset: 256)
!1205 = !DIDerivedType(tag: DW_TAG_member, name: "pre_body", scope: !1189, file: !603, line: 616, baseType: !1036, size: 64, offset: 512)
!1206 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_parallel", scope: !1048, file: !603, line: 754, baseType: !1207, size: 512)
!1207 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_parallel", file: !603, line: 622, size: 512, elements: !1208)
!1208 = !{!1209, !1210, !1211, !1212}
!1209 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !1207, file: !603, line: 624, baseType: !1113, size: 320)
!1210 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !1207, file: !603, line: 628, baseType: !748, size: 64, offset: 320)
!1211 = !DIDerivedType(tag: DW_TAG_member, name: "child_fn", scope: !1207, file: !603, line: 632, baseType: !748, size: 64, offset: 384)
!1212 = !DIDerivedType(tag: DW_TAG_member, name: "data_arg", scope: !1207, file: !603, line: 636, baseType: !748, size: 64, offset: 448)
!1213 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_task", scope: !1048, file: !603, line: 755, baseType: !1214, size: 704)
!1214 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_task", file: !603, line: 642, size: 704, elements: !1215)
!1215 = !{!1216, !1217, !1218, !1219}
!1216 = !DIDerivedType(tag: DW_TAG_member, name: "par", scope: !1214, file: !603, line: 644, baseType: !1207, size: 512)
!1217 = !DIDerivedType(tag: DW_TAG_member, name: "copy_fn", scope: !1214, file: !603, line: 648, baseType: !748, size: 64, offset: 512)
!1218 = !DIDerivedType(tag: DW_TAG_member, name: "arg_size", scope: !1214, file: !603, line: 652, baseType: !748, size: 64, offset: 576)
!1219 = !DIDerivedType(tag: DW_TAG_member, name: "arg_align", scope: !1214, file: !603, line: 653, baseType: !748, size: 64, offset: 640)
!1220 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_sections", scope: !1048, file: !603, line: 756, baseType: !1221, size: 448)
!1221 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_sections", file: !603, line: 663, size: 448, elements: !1222)
!1222 = !{!1223, !1224, !1225}
!1223 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !1221, file: !603, line: 665, baseType: !1113, size: 320)
!1224 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !1221, file: !603, line: 668, baseType: !748, size: 64, offset: 320)
!1225 = !DIDerivedType(tag: DW_TAG_member, name: "control", scope: !1221, file: !603, line: 673, baseType: !748, size: 64, offset: 384)
!1226 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_single", scope: !1048, file: !603, line: 757, baseType: !1227, size: 384)
!1227 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_single", file: !603, line: 694, size: 384, elements: !1228)
!1228 = !{!1229, !1230}
!1229 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !1227, file: !603, line: 696, baseType: !1113, size: 320)
!1230 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !1227, file: !603, line: 699, baseType: !748, size: 64, offset: 320)
!1231 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_continue", scope: !1048, file: !603, line: 758, baseType: !1232, size: 384)
!1232 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_continue", file: !603, line: 681, size: 384, elements: !1233)
!1233 = !{!1234, !1235, !1236}
!1234 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1232, file: !603, line: 683, baseType: !1051, size: 256)
!1235 = !DIDerivedType(tag: DW_TAG_member, name: "control_def", scope: !1232, file: !603, line: 686, baseType: !748, size: 64, offset: 256)
!1236 = !DIDerivedType(tag: DW_TAG_member, name: "control_use", scope: !1232, file: !603, line: 689, baseType: !748, size: 64, offset: 320)
!1237 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_atomic_load", scope: !1048, file: !603, line: 759, baseType: !1238, size: 384)
!1238 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_atomic_load", file: !603, line: 707, size: 384, elements: !1239)
!1239 = !{!1240, !1241, !1242}
!1240 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1238, file: !603, line: 709, baseType: !1051, size: 256)
!1241 = !DIDerivedType(tag: DW_TAG_member, name: "rhs", scope: !1238, file: !603, line: 712, baseType: !748, size: 64, offset: 256)
!1242 = !DIDerivedType(tag: DW_TAG_member, name: "lhs", scope: !1238, file: !603, line: 712, baseType: !748, size: 64, offset: 320)
!1243 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_atomic_store", scope: !1048, file: !603, line: 760, baseType: !1244, size: 320)
!1244 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_atomic_store", file: !603, line: 718, size: 320, elements: !1245)
!1245 = !{!1246, !1247}
!1246 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1244, file: !603, line: 720, baseType: !1051, size: 256)
!1247 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1244, file: !603, line: 723, baseType: !748, size: 64, offset: 256)
!1248 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1043, file: !603, line: 138, baseType: !1042, size: 64, offset: 64)
!1249 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1043, file: !603, line: 139, baseType: !1042, size: 64, offset: 128)
!1250 = !DIDerivedType(tag: DW_TAG_member, name: "last", scope: !1038, file: !603, line: 146, baseType: !1041, size: 64, offset: 64)
!1251 = !DIDerivedType(tag: DW_TAG_member, name: "next_free", scope: !1038, file: !603, line: 152, baseType: !1036, size: 64, offset: 128)
!1252 = !DIDerivedType(tag: DW_TAG_member, name: "r", scope: !1033, file: !202, line: 130, baseType: !910, size: 64)
!1253 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !1028, file: !202, line: 134, baseType: !1254, size: 64, offset: 192)
!1254 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!1255 = !DIDerivedType(tag: DW_TAG_member, name: "goto_block", scope: !1028, file: !202, line: 137, baseType: !748, size: 64, offset: 256)
!1256 = !DIDerivedType(tag: DW_TAG_member, name: "goto_locus", scope: !1028, file: !202, line: 138, baseType: !860, size: 32, offset: 320)
!1257 = !DIDerivedType(tag: DW_TAG_member, name: "dest_idx", scope: !1028, file: !202, line: 142, baseType: !7, size: 32, offset: 352)
!1258 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1028, file: !202, line: 144, baseType: !829, size: 32, offset: 384)
!1259 = !DIDerivedType(tag: DW_TAG_member, name: "probability", scope: !1028, file: !202, line: 145, baseType: !829, size: 32, offset: 416)
!1260 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !1028, file: !202, line: 146, baseType: !1261, size: 64, offset: 448)
!1261 = !DIDerivedType(tag: DW_TAG_typedef, name: "gcov_type", file: !202, line: 119, baseType: !804)
!1262 = !DIDerivedType(tag: DW_TAG_member, name: "succs", scope: !1011, file: !202, line: 220, baseType: !1014, size: 64, offset: 64)
!1263 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !1011, file: !202, line: 223, baseType: !1254, size: 64, offset: 128)
!1264 = !DIDerivedType(tag: DW_TAG_member, name: "loop_father", scope: !1011, file: !202, line: 226, baseType: !1265, size: 64, offset: 192)
!1265 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1266, size: 64)
!1266 = !DICompositeType(tag: DW_TAG_structure_type, name: "loop", file: !202, line: 185, flags: DIFlagFwdDecl)
!1267 = !DIDerivedType(tag: DW_TAG_member, name: "dom", scope: !1011, file: !202, line: 229, baseType: !1268, size: 128, offset: 256)
!1268 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1269, size: 128, elements: !1271)
!1269 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1270, size: 64)
!1270 = !DICompositeType(tag: DW_TAG_structure_type, name: "et_node", file: !202, line: 229, flags: DIFlagFwdDecl)
!1271 = !{!1272}
!1272 = !DISubrange(count: 2)
!1273 = !DIDerivedType(tag: DW_TAG_member, name: "prev_bb", scope: !1011, file: !202, line: 232, baseType: !1010, size: 64, offset: 384)
!1274 = !DIDerivedType(tag: DW_TAG_member, name: "next_bb", scope: !1011, file: !202, line: 233, baseType: !1010, size: 64, offset: 448)
!1275 = !DIDerivedType(tag: DW_TAG_member, name: "il", scope: !1011, file: !202, line: 238, baseType: !1276, size: 64, offset: 512)
!1276 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "basic_block_il_dependent", file: !202, line: 235, size: 64, elements: !1277)
!1277 = !{!1278, !1284}
!1278 = !DIDerivedType(tag: DW_TAG_member, name: "gimple", scope: !1276, file: !202, line: 236, baseType: !1279, size: 64)
!1279 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1280, size: 64)
!1280 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_bb_info", file: !202, line: 273, size: 128, elements: !1281)
!1281 = !{!1282, !1283}
!1282 = !DIDerivedType(tag: DW_TAG_member, name: "seq", scope: !1280, file: !202, line: 275, baseType: !1036, size: 64)
!1283 = !DIDerivedType(tag: DW_TAG_member, name: "phi_nodes", scope: !1280, file: !202, line: 278, baseType: !1036, size: 64, offset: 64)
!1284 = !DIDerivedType(tag: DW_TAG_member, name: "rtl", scope: !1276, file: !202, line: 237, baseType: !1285, size: 64)
!1285 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1286, size: 64)
!1286 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtl_bb_info", file: !202, line: 259, size: 320, elements: !1287)
!1287 = !{!1288, !1289, !1290, !1291, !1292}
!1288 = !DIDerivedType(tag: DW_TAG_member, name: "head_", scope: !1286, file: !202, line: 261, baseType: !910, size: 64)
!1289 = !DIDerivedType(tag: DW_TAG_member, name: "end_", scope: !1286, file: !202, line: 262, baseType: !910, size: 64, offset: 64)
!1290 = !DIDerivedType(tag: DW_TAG_member, name: "header", scope: !1286, file: !202, line: 266, baseType: !910, size: 64, offset: 128)
!1291 = !DIDerivedType(tag: DW_TAG_member, name: "footer", scope: !1286, file: !202, line: 267, baseType: !910, size: 64, offset: 192)
!1292 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !1286, file: !202, line: 270, baseType: !829, size: 32, offset: 256)
!1293 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !1011, file: !202, line: 241, baseType: !1261, size: 64, offset: 576)
!1294 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !1011, file: !202, line: 244, baseType: !829, size: 32, offset: 640)
!1295 = !DIDerivedType(tag: DW_TAG_member, name: "loop_depth", scope: !1011, file: !202, line: 247, baseType: !829, size: 32, offset: 672)
!1296 = !DIDerivedType(tag: DW_TAG_member, name: "frequency", scope: !1011, file: !202, line: 250, baseType: !829, size: 32, offset: 704)
!1297 = !DIDerivedType(tag: DW_TAG_member, name: "discriminator", scope: !1011, file: !202, line: 253, baseType: !829, size: 32, offset: 736)
!1298 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1011, file: !202, line: 256, baseType: !829, size: 32, offset: 768)
!1299 = !DIDerivedType(tag: DW_TAG_member, name: "x_exit_block_ptr", scope: !1006, file: !202, line: 378, baseType: !1009, size: 64, offset: 64)
!1300 = !DIDerivedType(tag: DW_TAG_member, name: "x_basic_block_info", scope: !1006, file: !202, line: 381, baseType: !1301, size: 64, offset: 128)
!1301 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1302, size: 64)
!1302 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_basic_block_gc", file: !202, line: 282, baseType: !1303)
!1303 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_basic_block_gc", file: !202, line: 282, size: 128, elements: !1304)
!1304 = !{!1305}
!1305 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1303, file: !202, line: 282, baseType: !1306, size: 128)
!1306 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_basic_block_base", file: !202, line: 281, baseType: !1307)
!1307 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_basic_block_base", file: !202, line: 281, size: 128, elements: !1308)
!1308 = !{!1309, !1310, !1311}
!1309 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1307, file: !202, line: 281, baseType: !7, size: 32)
!1310 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1307, file: !202, line: 281, baseType: !7, size: 32, offset: 32)
!1311 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1307, file: !202, line: 281, baseType: !1312, size: 64, offset: 64)
!1312 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1009, size: 64, elements: !833)
!1313 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_basic_blocks", scope: !1006, file: !202, line: 384, baseType: !829, size: 32, offset: 192)
!1314 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_edges", scope: !1006, file: !202, line: 387, baseType: !829, size: 32, offset: 224)
!1315 = !DIDerivedType(tag: DW_TAG_member, name: "x_last_basic_block", scope: !1006, file: !202, line: 390, baseType: !829, size: 32, offset: 256)
!1316 = !DIDerivedType(tag: DW_TAG_member, name: "x_label_to_block_map", scope: !1006, file: !202, line: 394, baseType: !1301, size: 64, offset: 320)
!1317 = !DIDerivedType(tag: DW_TAG_member, name: "x_profile_status", scope: !1006, file: !202, line: 396, baseType: !201, size: 32, offset: 384)
!1318 = !DIDerivedType(tag: DW_TAG_member, name: "x_dom_computed", scope: !1006, file: !202, line: 399, baseType: !1319, size: 64, offset: 416)
!1319 = !DICompositeType(tag: DW_TAG_array_type, baseType: !207, size: 64, elements: !1271)
!1320 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_bbs_in_dom_tree", scope: !1006, file: !202, line: 402, baseType: !1321, size: 64, offset: 480)
!1321 = !DICompositeType(tag: DW_TAG_array_type, baseType: !7, size: 64, elements: !1271)
!1322 = !DIDerivedType(tag: DW_TAG_member, name: "max_jumptable_ents", scope: !1006, file: !202, line: 406, baseType: !829, size: 32, offset: 544)
!1323 = !DIDerivedType(tag: DW_TAG_member, name: "last_label_uid", scope: !1006, file: !202, line: 409, baseType: !829, size: 32, offset: 576)
!1324 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_body", scope: !998, file: !999, line: 470, baseType: !1037, size: 64, offset: 128)
!1325 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_df", scope: !998, file: !999, line: 473, baseType: !1326, size: 64, offset: 192)
!1326 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1327, size: 64)
!1327 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_df", file: !949, line: 39, size: 1152, elements: !1328)
!1328 = !{!1329, !1379, !1392, !1404, !1405, !1475, !1476, !1480, !1481, !1482, !1483, !1484}
!1329 = !DIDerivedType(tag: DW_TAG_member, name: "referenced_vars", scope: !1327, file: !949, line: 41, baseType: !1330, size: 64)
!1330 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_t", file: !1331, line: 144, baseType: !1332)
!1331 = !DIFile(filename: "./include/hashtab.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1332 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1333, size: 64)
!1333 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "htab", file: !1331, line: 100, size: 896, elements: !1334)
!1334 = !{!1335, !1343, !1348, !1353, !1355, !1356, !1357, !1358, !1359, !1360, !1365, !1367, !1368, !1373, !1378}
!1335 = !DIDerivedType(tag: DW_TAG_member, name: "hash_f", scope: !1333, file: !1331, line: 102, baseType: !1336, size: 64)
!1336 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_hash", file: !1331, line: 52, baseType: !1337)
!1337 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1338, size: 64)
!1338 = !DISubroutineType(types: !1339)
!1339 = !{!1340, !1341}
!1340 = !DIDerivedType(tag: DW_TAG_typedef, name: "hashval_t", file: !1331, line: 47, baseType: !7)
!1341 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1342, size: 64)
!1342 = !DIDerivedType(tag: DW_TAG_const_type, baseType: null)
!1343 = !DIDerivedType(tag: DW_TAG_member, name: "eq_f", scope: !1333, file: !1331, line: 105, baseType: !1344, size: 64, offset: 64)
!1344 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_eq", file: !1331, line: 59, baseType: !1345)
!1345 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1346, size: 64)
!1346 = !DISubroutineType(types: !1347)
!1347 = !{!829, !1341, !1341}
!1348 = !DIDerivedType(tag: DW_TAG_member, name: "del_f", scope: !1333, file: !1331, line: 108, baseType: !1349, size: 64, offset: 128)
!1349 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_del", file: !1331, line: 63, baseType: !1350)
!1350 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1351, size: 64)
!1351 = !DISubroutineType(types: !1352)
!1352 = !{null, !1254}
!1353 = !DIDerivedType(tag: DW_TAG_member, name: "entries", scope: !1333, file: !1331, line: 111, baseType: !1354, size: 64, offset: 192)
!1354 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1254, size: 64)
!1355 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1333, file: !1331, line: 114, baseType: !1194, size: 64, offset: 256)
!1356 = !DIDerivedType(tag: DW_TAG_member, name: "n_elements", scope: !1333, file: !1331, line: 117, baseType: !1194, size: 64, offset: 320)
!1357 = !DIDerivedType(tag: DW_TAG_member, name: "n_deleted", scope: !1333, file: !1331, line: 120, baseType: !1194, size: 64, offset: 384)
!1358 = !DIDerivedType(tag: DW_TAG_member, name: "searches", scope: !1333, file: !1331, line: 124, baseType: !7, size: 32, offset: 448)
!1359 = !DIDerivedType(tag: DW_TAG_member, name: "collisions", scope: !1333, file: !1331, line: 128, baseType: !7, size: 32, offset: 480)
!1360 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_f", scope: !1333, file: !1331, line: 131, baseType: !1361, size: 64, offset: 512)
!1361 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_alloc", file: !1331, line: 75, baseType: !1362)
!1362 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1363, size: 64)
!1363 = !DISubroutineType(types: !1364)
!1364 = !{!1254, !1194, !1194}
!1365 = !DIDerivedType(tag: DW_TAG_member, name: "free_f", scope: !1333, file: !1331, line: 132, baseType: !1366, size: 64, offset: 576)
!1366 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_free", file: !1331, line: 78, baseType: !1350)
!1367 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_arg", scope: !1333, file: !1331, line: 135, baseType: !1254, size: 64, offset: 640)
!1368 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_with_arg_f", scope: !1333, file: !1331, line: 136, baseType: !1369, size: 64, offset: 704)
!1369 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_alloc_with_arg", file: !1331, line: 82, baseType: !1370)
!1370 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1371, size: 64)
!1371 = !DISubroutineType(types: !1372)
!1372 = !{!1254, !1254, !1194, !1194}
!1373 = !DIDerivedType(tag: DW_TAG_member, name: "free_with_arg_f", scope: !1333, file: !1331, line: 137, baseType: !1374, size: 64, offset: 768)
!1374 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_free_with_arg", file: !1331, line: 83, baseType: !1375)
!1375 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1376, size: 64)
!1376 = !DISubroutineType(types: !1377)
!1377 = !{null, !1254, !1254}
!1378 = !DIDerivedType(tag: DW_TAG_member, name: "size_prime_index", scope: !1333, file: !1331, line: 141, baseType: !7, size: 32, offset: 832)
!1379 = !DIDerivedType(tag: DW_TAG_member, name: "modified_noreturn_calls", scope: !1327, file: !949, line: 48, baseType: !1380, size: 64, offset: 64)
!1380 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1381, size: 64)
!1381 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_gimple_gc", file: !603, line: 35, baseType: !1382)
!1382 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_gimple_gc", file: !603, line: 35, size: 128, elements: !1383)
!1383 = !{!1384}
!1384 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1382, file: !603, line: 35, baseType: !1385, size: 128)
!1385 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_gimple_base", file: !603, line: 33, baseType: !1386)
!1386 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_gimple_base", file: !603, line: 33, size: 128, elements: !1387)
!1387 = !{!1388, !1389, !1390}
!1388 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1386, file: !603, line: 33, baseType: !7, size: 32)
!1389 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1386, file: !603, line: 33, baseType: !7, size: 32, offset: 32)
!1390 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1386, file: !603, line: 33, baseType: !1391, size: 64, offset: 64)
!1391 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1046, size: 64, elements: !833)
!1392 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_names", scope: !1327, file: !949, line: 51, baseType: !1393, size: 64, offset: 128)
!1393 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1394, size: 64)
!1394 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_gc", file: !6, line: 183, baseType: !1395)
!1395 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_gc", file: !6, line: 183, size: 128, elements: !1396)
!1396 = !{!1397}
!1397 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1395, file: !6, line: 183, baseType: !1398, size: 128)
!1398 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_base", file: !6, line: 182, baseType: !1399)
!1399 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_base", file: !6, line: 182, size: 128, elements: !1400)
!1400 = !{!1401, !1402, !1403}
!1401 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1399, file: !6, line: 182, baseType: !7, size: 32)
!1402 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1399, file: !6, line: 182, baseType: !7, size: 32, offset: 32)
!1403 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1399, file: !6, line: 182, baseType: !1100, size: 64, offset: 64)
!1404 = !DIDerivedType(tag: DW_TAG_member, name: "vop", scope: !1327, file: !949, line: 54, baseType: !748, size: 64, offset: 192)
!1405 = !DIDerivedType(tag: DW_TAG_member, name: "escaped", scope: !1327, file: !949, line: 57, baseType: !1406, size: 128, offset: 256)
!1406 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "pt_solution", file: !1407, line: 31, size: 128, elements: !1408)
!1407 = !DIFile(filename: "./tree-ssa-alias.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1408 = !{!1409, !1410, !1411, !1412, !1413, !1414, !1415}
!1409 = !DIDerivedType(tag: DW_TAG_member, name: "anything", scope: !1406, file: !1407, line: 35, baseType: !7, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1410 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal", scope: !1406, file: !1407, line: 39, baseType: !7, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1411 = !DIDerivedType(tag: DW_TAG_member, name: "escaped", scope: !1406, file: !1407, line: 42, baseType: !7, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1412 = !DIDerivedType(tag: DW_TAG_member, name: "null", scope: !1406, file: !1407, line: 46, baseType: !7, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1413 = !DIDerivedType(tag: DW_TAG_member, name: "vars_contains_global", scope: !1406, file: !1407, line: 50, baseType: !7, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1414 = !DIDerivedType(tag: DW_TAG_member, name: "vars_contains_restrict", scope: !1406, file: !1407, line: 53, baseType: !7, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1415 = !DIDerivedType(tag: DW_TAG_member, name: "vars", scope: !1406, file: !1407, line: 56, baseType: !1416, size: 64, offset: 64)
!1416 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap", file: !749, line: 47, baseType: !1417)
!1417 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1418, size: 64)
!1418 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_head_def", file: !1419, line: 75, size: 256, elements: !1420)
!1419 = !DIFile(filename: "./bitmap.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1420 = !{!1421, !1433, !1434, !1435}
!1421 = !DIDerivedType(tag: DW_TAG_member, name: "first", scope: !1418, file: !1419, line: 76, baseType: !1422, size: 64)
!1422 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1423, size: 64)
!1423 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap_element", file: !1419, line: 68, baseType: !1424)
!1424 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_element_def", file: !1419, line: 63, size: 320, elements: !1425)
!1425 = !{!1426, !1428, !1429, !1430}
!1426 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1424, file: !1419, line: 64, baseType: !1427, size: 64)
!1427 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1424, size: 64)
!1428 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1424, file: !1419, line: 65, baseType: !1427, size: 64, offset: 64)
!1429 = !DIDerivedType(tag: DW_TAG_member, name: "indx", scope: !1424, file: !1419, line: 66, baseType: !7, size: 32, offset: 128)
!1430 = !DIDerivedType(tag: DW_TAG_member, name: "bits", scope: !1424, file: !1419, line: 67, baseType: !1431, size: 128, offset: 192)
!1431 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1432, size: 128, elements: !1271)
!1432 = !DIDerivedType(tag: DW_TAG_typedef, name: "BITMAP_WORD", file: !1419, line: 29, baseType: !802)
!1433 = !DIDerivedType(tag: DW_TAG_member, name: "current", scope: !1418, file: !1419, line: 77, baseType: !1422, size: 64, offset: 64)
!1434 = !DIDerivedType(tag: DW_TAG_member, name: "indx", scope: !1418, file: !1419, line: 78, baseType: !7, size: 32, offset: 128)
!1435 = !DIDerivedType(tag: DW_TAG_member, name: "obstack", scope: !1418, file: !1419, line: 79, baseType: !1436, size: 64, offset: 192)
!1436 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1437, size: 64)
!1437 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap_obstack", file: !1419, line: 49, baseType: !1438)
!1438 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_obstack", file: !1419, line: 45, size: 832, elements: !1439)
!1439 = !{!1440, !1441, !1442}
!1440 = !DIDerivedType(tag: DW_TAG_member, name: "elements", scope: !1438, file: !1419, line: 46, baseType: !1427, size: 64)
!1441 = !DIDerivedType(tag: DW_TAG_member, name: "heads", scope: !1438, file: !1419, line: 47, baseType: !1417, size: 64, offset: 64)
!1442 = !DIDerivedType(tag: DW_TAG_member, name: "obstack", scope: !1438, file: !1419, line: 48, baseType: !1443, size: 704, offset: 128)
!1443 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "obstack", file: !1444, line: 164, size: 704, elements: !1445)
!1444 = !DIFile(filename: "./include/obstack.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1445 = !{!1446, !1447, !1458, !1459, !1460, !1461, !1462, !1463, !1467, !1471, !1472, !1473, !1474}
!1446 = !DIDerivedType(tag: DW_TAG_member, name: "chunk_size", scope: !1443, file: !1444, line: 166, baseType: !804, size: 64)
!1447 = !DIDerivedType(tag: DW_TAG_member, name: "chunk", scope: !1443, file: !1444, line: 167, baseType: !1448, size: 64, offset: 64)
!1448 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1449, size: 64)
!1449 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_obstack_chunk", file: !1444, line: 157, size: 192, elements: !1450)
!1450 = !{!1451, !1453, !1454}
!1451 = !DIDerivedType(tag: DW_TAG_member, name: "limit", scope: !1449, file: !1444, line: 159, baseType: !1452, size: 64)
!1452 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !832, size: 64)
!1453 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1449, file: !1444, line: 160, baseType: !1448, size: 64, offset: 64)
!1454 = !DIDerivedType(tag: DW_TAG_member, name: "contents", scope: !1449, file: !1444, line: 161, baseType: !1455, size: 32, offset: 128)
!1455 = !DICompositeType(tag: DW_TAG_array_type, baseType: !832, size: 32, elements: !1456)
!1456 = !{!1457}
!1457 = !DISubrange(count: 4)
!1458 = !DIDerivedType(tag: DW_TAG_member, name: "object_base", scope: !1443, file: !1444, line: 168, baseType: !1452, size: 64, offset: 128)
!1459 = !DIDerivedType(tag: DW_TAG_member, name: "next_free", scope: !1443, file: !1444, line: 169, baseType: !1452, size: 64, offset: 192)
!1460 = !DIDerivedType(tag: DW_TAG_member, name: "chunk_limit", scope: !1443, file: !1444, line: 170, baseType: !1452, size: 64, offset: 256)
!1461 = !DIDerivedType(tag: DW_TAG_member, name: "temp", scope: !1443, file: !1444, line: 171, baseType: !804, size: 64, offset: 320)
!1462 = !DIDerivedType(tag: DW_TAG_member, name: "alignment_mask", scope: !1443, file: !1444, line: 172, baseType: !829, size: 32, offset: 384)
!1463 = !DIDerivedType(tag: DW_TAG_member, name: "chunkfun", scope: !1443, file: !1444, line: 176, baseType: !1464, size: 64, offset: 448)
!1464 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1465, size: 64)
!1465 = !DISubroutineType(types: !1466)
!1466 = !{!1448, !1254, !804}
!1467 = !DIDerivedType(tag: DW_TAG_member, name: "freefun", scope: !1443, file: !1444, line: 177, baseType: !1468, size: 64, offset: 512)
!1468 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1469, size: 64)
!1469 = !DISubroutineType(types: !1470)
!1470 = !{null, !1254, !1448}
!1471 = !DIDerivedType(tag: DW_TAG_member, name: "extra_arg", scope: !1443, file: !1444, line: 178, baseType: !1254, size: 64, offset: 576)
!1472 = !DIDerivedType(tag: DW_TAG_member, name: "use_extra_arg", scope: !1443, file: !1444, line: 179, baseType: !7, size: 1, offset: 640, flags: DIFlagBitField, extraData: i64 640)
!1473 = !DIDerivedType(tag: DW_TAG_member, name: "maybe_empty_object", scope: !1443, file: !1444, line: 180, baseType: !7, size: 1, offset: 641, flags: DIFlagBitField, extraData: i64 640)
!1474 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_failed", scope: !1443, file: !1444, line: 184, baseType: !7, size: 1, offset: 642, flags: DIFlagBitField, extraData: i64 640)
!1475 = !DIDerivedType(tag: DW_TAG_member, name: "callused", scope: !1327, file: !949, line: 60, baseType: !1406, size: 128, offset: 384)
!1476 = !DIDerivedType(tag: DW_TAG_member, name: "decls_to_pointers", scope: !1327, file: !949, line: 64, baseType: !1477, size: 64, offset: 512)
!1477 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1478, size: 64)
!1478 = !DICompositeType(tag: DW_TAG_structure_type, name: "pointer_map_t", file: !1479, line: 33, flags: DIFlagFwdDecl)
!1479 = !DIFile(filename: "./pointer-set.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1480 = !DIDerivedType(tag: DW_TAG_member, name: "free_ssanames", scope: !1327, file: !949, line: 67, baseType: !748, size: 64, offset: 576)
!1481 = !DIDerivedType(tag: DW_TAG_member, name: "default_defs", scope: !1327, file: !949, line: 73, baseType: !1330, size: 64, offset: 640)
!1482 = !DIDerivedType(tag: DW_TAG_member, name: "syms_to_rename", scope: !1327, file: !949, line: 77, baseType: !1416, size: 64, offset: 704)
!1483 = !DIDerivedType(tag: DW_TAG_member, name: "in_ssa_p", scope: !1327, file: !949, line: 80, baseType: !7, size: 1, offset: 768, flags: DIFlagBitField, extraData: i64 768)
!1484 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_operands", scope: !1327, file: !949, line: 82, baseType: !1485, size: 320, offset: 832)
!1485 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_operands", file: !1077, line: 62, size: 320, elements: !1486)
!1486 = !{!1487, !1493, !1494, !1495, !1496, !1497}
!1487 = !DIDerivedType(tag: DW_TAG_member, name: "operand_memory", scope: !1485, file: !1077, line: 63, baseType: !1488, size: 64)
!1488 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1489, size: 64)
!1489 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_operand_memory_d", file: !1077, line: 56, size: 128, elements: !1490)
!1490 = !{!1491, !1492}
!1491 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1489, file: !1077, line: 57, baseType: !1488, size: 64)
!1492 = !DIDerivedType(tag: DW_TAG_member, name: "mem", scope: !1489, file: !1077, line: 58, baseType: !831, size: 8, offset: 64)
!1493 = !DIDerivedType(tag: DW_TAG_member, name: "operand_memory_index", scope: !1485, file: !1077, line: 64, baseType: !7, size: 32, offset: 64)
!1494 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_operand_mem_size", scope: !1485, file: !1077, line: 66, baseType: !7, size: 32, offset: 96)
!1495 = !DIDerivedType(tag: DW_TAG_member, name: "ops_active", scope: !1485, file: !1077, line: 68, baseType: !852, size: 8, offset: 128)
!1496 = !DIDerivedType(tag: DW_TAG_member, name: "free_defs", scope: !1485, file: !1077, line: 70, baseType: !1075, size: 64, offset: 192)
!1497 = !DIDerivedType(tag: DW_TAG_member, name: "free_uses", scope: !1485, file: !1077, line: 71, baseType: !1083, size: 64, offset: 256)
!1498 = !DIDerivedType(tag: DW_TAG_member, name: "x_current_loops", scope: !998, file: !999, line: 476, baseType: !1499, size: 64, offset: 256)
!1499 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1500, size: 64)
!1500 = !DICompositeType(tag: DW_TAG_structure_type, name: "loops", file: !999, line: 476, flags: DIFlagFwdDecl)
!1501 = !DIDerivedType(tag: DW_TAG_member, name: "value_histograms", scope: !998, file: !999, line: 479, baseType: !1330, size: 64, offset: 320)
!1502 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !998, file: !999, line: 484, baseType: !748, size: 64, offset: 384)
!1503 = !DIDerivedType(tag: DW_TAG_member, name: "static_chain_decl", scope: !998, file: !999, line: 488, baseType: !748, size: 64, offset: 448)
!1504 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal_goto_save_area", scope: !998, file: !999, line: 493, baseType: !748, size: 64, offset: 512)
!1505 = !DIDerivedType(tag: DW_TAG_member, name: "local_decls", scope: !998, file: !999, line: 496, baseType: !748, size: 64, offset: 576)
!1506 = !DIDerivedType(tag: DW_TAG_member, name: "machine", scope: !998, file: !999, line: 501, baseType: !1507, size: 64, offset: 640)
!1507 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1508, size: 64)
!1508 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "machine_function", file: !213, line: 2355, size: 576, elements: !1509)
!1509 = !{!1510, !1513, !1514, !1515, !1516, !1518, !1519, !1524, !1525, !1526, !1527, !1528, !1529}
!1510 = !DIDerivedType(tag: DW_TAG_member, name: "stack_locals", scope: !1508, file: !213, line: 2356, baseType: !1511, size: 64)
!1511 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1512, size: 64)
!1512 = !DICompositeType(tag: DW_TAG_structure_type, name: "stack_local_entry", file: !213, line: 2356, flags: DIFlagFwdDecl)
!1513 = !DIDerivedType(tag: DW_TAG_member, name: "some_ld_name", scope: !1508, file: !213, line: 2357, baseType: !1176, size: 64, offset: 64)
!1514 = !DIDerivedType(tag: DW_TAG_member, name: "varargs_gpr_size", scope: !1508, file: !213, line: 2358, baseType: !829, size: 32, offset: 128)
!1515 = !DIDerivedType(tag: DW_TAG_member, name: "varargs_fpr_size", scope: !1508, file: !213, line: 2359, baseType: !829, size: 32, offset: 160)
!1516 = !DIDerivedType(tag: DW_TAG_member, name: "optimize_mode_switching", scope: !1508, file: !213, line: 2360, baseType: !1517, size: 128, offset: 192)
!1517 = !DICompositeType(tag: DW_TAG_array_type, baseType: !829, size: 128, elements: !1456)
!1518 = !DIDerivedType(tag: DW_TAG_member, name: "use_fast_prologue_epilogue_nregs", scope: !1508, file: !213, line: 2364, baseType: !829, size: 32, offset: 320)
!1519 = !DIDerivedType(tag: DW_TAG_member, name: "cfa", scope: !1508, file: !213, line: 2367, baseType: !1520, size: 128, offset: 384)
!1520 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "machine_cfa_state", file: !213, line: 2349, size: 128, elements: !1521)
!1521 = !{!1522, !1523}
!1522 = !DIDerivedType(tag: DW_TAG_member, name: "reg", scope: !1520, file: !213, line: 2351, baseType: !910, size: 64)
!1523 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1520, file: !213, line: 2352, baseType: !804, size: 64, offset: 64)
!1524 = !DIDerivedType(tag: DW_TAG_member, name: "call_abi", scope: !1508, file: !213, line: 2371, baseType: !212, size: 32, offset: 512)
!1525 = !DIDerivedType(tag: DW_TAG_member, name: "accesses_prev_frame", scope: !1508, file: !213, line: 2374, baseType: !7, size: 1, offset: 544, flags: DIFlagBitField, extraData: i64 544)
!1526 = !DIDerivedType(tag: DW_TAG_member, name: "needs_cld", scope: !1508, file: !213, line: 2377, baseType: !7, size: 1, offset: 545, flags: DIFlagBitField, extraData: i64 544)
!1527 = !DIDerivedType(tag: DW_TAG_member, name: "use_fast_prologue_epilogue", scope: !1508, file: !213, line: 2381, baseType: !7, size: 1, offset: 546, flags: DIFlagBitField, extraData: i64 544)
!1528 = !DIDerivedType(tag: DW_TAG_member, name: "tls_descriptor_call_expanded_p", scope: !1508, file: !213, line: 2392, baseType: !7, size: 1, offset: 547, flags: DIFlagBitField, extraData: i64 544)
!1529 = !DIDerivedType(tag: DW_TAG_member, name: "static_chain_on_stack", scope: !1508, file: !213, line: 2396, baseType: !7, size: 1, offset: 548, flags: DIFlagBitField, extraData: i64 544)
!1530 = !DIDerivedType(tag: DW_TAG_member, name: "language", scope: !998, file: !999, line: 504, baseType: !1531, size: 64, offset: 704)
!1531 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1532, size: 64)
!1532 = !DICompositeType(tag: DW_TAG_structure_type, name: "language_function", file: !999, line: 504, flags: DIFlagFwdDecl)
!1533 = !DIDerivedType(tag: DW_TAG_member, name: "used_types_hash", scope: !998, file: !999, line: 507, baseType: !1330, size: 64, offset: 768)
!1534 = !DIDerivedType(tag: DW_TAG_member, name: "last_stmt_uid", scope: !998, file: !999, line: 510, baseType: !829, size: 32, offset: 832)
!1535 = !DIDerivedType(tag: DW_TAG_member, name: "funcdef_no", scope: !998, file: !999, line: 513, baseType: !829, size: 32, offset: 864)
!1536 = !DIDerivedType(tag: DW_TAG_member, name: "function_start_locus", scope: !998, file: !999, line: 516, baseType: !860, size: 32, offset: 896)
!1537 = !DIDerivedType(tag: DW_TAG_member, name: "function_end_locus", scope: !998, file: !999, line: 519, baseType: !860, size: 32, offset: 928)
!1538 = !DIDerivedType(tag: DW_TAG_member, name: "curr_properties", scope: !998, file: !999, line: 522, baseType: !7, size: 32, offset: 960)
!1539 = !DIDerivedType(tag: DW_TAG_member, name: "last_verified", scope: !998, file: !999, line: 523, baseType: !7, size: 32, offset: 992)
!1540 = !DIDerivedType(tag: DW_TAG_member, name: "cannot_be_copied_reason", scope: !998, file: !999, line: 528, baseType: !1176, size: 64, offset: 1024)
!1541 = !DIDerivedType(tag: DW_TAG_member, name: "va_list_gpr_size", scope: !998, file: !999, line: 535, baseType: !7, size: 8, offset: 1088, flags: DIFlagBitField, extraData: i64 1088)
!1542 = !DIDerivedType(tag: DW_TAG_member, name: "va_list_fpr_size", scope: !998, file: !999, line: 539, baseType: !7, size: 8, offset: 1096, flags: DIFlagBitField, extraData: i64 1088)
!1543 = !DIDerivedType(tag: DW_TAG_member, name: "function_frequency", scope: !998, file: !999, line: 543, baseType: !7, size: 2, offset: 1104, flags: DIFlagBitField, extraData: i64 1088)
!1544 = !DIDerivedType(tag: DW_TAG_member, name: "calls_setjmp", scope: !998, file: !999, line: 546, baseType: !7, size: 1, offset: 1106, flags: DIFlagBitField, extraData: i64 1088)
!1545 = !DIDerivedType(tag: DW_TAG_member, name: "calls_alloca", scope: !998, file: !999, line: 550, baseType: !7, size: 1, offset: 1107, flags: DIFlagBitField, extraData: i64 1088)
!1546 = !DIDerivedType(tag: DW_TAG_member, name: "has_nonlocal_label", scope: !998, file: !999, line: 554, baseType: !7, size: 1, offset: 1108, flags: DIFlagBitField, extraData: i64 1088)
!1547 = !DIDerivedType(tag: DW_TAG_member, name: "cannot_be_copied_set", scope: !998, file: !999, line: 559, baseType: !7, size: 1, offset: 1109, flags: DIFlagBitField, extraData: i64 1088)
!1548 = !DIDerivedType(tag: DW_TAG_member, name: "stdarg", scope: !998, file: !999, line: 562, baseType: !7, size: 1, offset: 1110, flags: DIFlagBitField, extraData: i64 1088)
!1549 = !DIDerivedType(tag: DW_TAG_member, name: "dont_save_pending_sizes_p", scope: !998, file: !999, line: 571, baseType: !7, size: 1, offset: 1111, flags: DIFlagBitField, extraData: i64 1088)
!1550 = !DIDerivedType(tag: DW_TAG_member, name: "after_inlining", scope: !998, file: !999, line: 573, baseType: !7, size: 1, offset: 1112, flags: DIFlagBitField, extraData: i64 1088)
!1551 = !DIDerivedType(tag: DW_TAG_member, name: "always_inline_functions_inlined", scope: !998, file: !999, line: 574, baseType: !7, size: 1, offset: 1113, flags: DIFlagBitField, extraData: i64 1088)
!1552 = !DIDerivedType(tag: DW_TAG_member, name: "returns_struct", scope: !998, file: !999, line: 581, baseType: !7, size: 1, offset: 1114, flags: DIFlagBitField, extraData: i64 1088)
!1553 = !DIDerivedType(tag: DW_TAG_member, name: "returns_pcc_struct", scope: !998, file: !999, line: 585, baseType: !7, size: 1, offset: 1115, flags: DIFlagBitField, extraData: i64 1088)
!1554 = !DIDerivedType(tag: DW_TAG_member, name: "after_tree_profile", scope: !998, file: !999, line: 588, baseType: !7, size: 1, offset: 1116, flags: DIFlagBitField, extraData: i64 1088)
!1555 = !DIDerivedType(tag: DW_TAG_member, name: "has_local_explicit_reg_vars", scope: !998, file: !999, line: 592, baseType: !7, size: 1, offset: 1117, flags: DIFlagBitField, extraData: i64 1088)
!1556 = !DIDerivedType(tag: DW_TAG_member, name: "is_thunk", scope: !998, file: !999, line: 598, baseType: !7, size: 1, offset: 1118, flags: DIFlagBitField, extraData: i64 1088)
!1557 = !DIDerivedType(tag: DW_TAG_member, name: "personality", scope: !993, file: !6, line: 3254, baseType: !748, size: 64, offset: 1536)
!1558 = !DIDerivedType(tag: DW_TAG_member, name: "function_specific_target", scope: !993, file: !6, line: 3257, baseType: !748, size: 64, offset: 1600)
!1559 = !DIDerivedType(tag: DW_TAG_member, name: "function_specific_optimization", scope: !993, file: !6, line: 3258, baseType: !748, size: 64, offset: 1664)
!1560 = !DIDerivedType(tag: DW_TAG_member, name: "function_code", scope: !993, file: !6, line: 3264, baseType: !7, size: 11, offset: 1728, flags: DIFlagBitField, extraData: i64 1728)
!1561 = !DIDerivedType(tag: DW_TAG_member, name: "built_in_class", scope: !993, file: !6, line: 3265, baseType: !7, size: 2, offset: 1739, flags: DIFlagBitField, extraData: i64 1728)
!1562 = !DIDerivedType(tag: DW_TAG_member, name: "static_ctor_flag", scope: !993, file: !6, line: 3267, baseType: !7, size: 1, offset: 1741, flags: DIFlagBitField, extraData: i64 1728)
!1563 = !DIDerivedType(tag: DW_TAG_member, name: "static_dtor_flag", scope: !993, file: !6, line: 3268, baseType: !7, size: 1, offset: 1742, flags: DIFlagBitField, extraData: i64 1728)
!1564 = !DIDerivedType(tag: DW_TAG_member, name: "uninlinable", scope: !993, file: !6, line: 3269, baseType: !7, size: 1, offset: 1743, flags: DIFlagBitField, extraData: i64 1728)
!1565 = !DIDerivedType(tag: DW_TAG_member, name: "possibly_inlined", scope: !993, file: !6, line: 3271, baseType: !7, size: 1, offset: 1744, flags: DIFlagBitField, extraData: i64 1728)
!1566 = !DIDerivedType(tag: DW_TAG_member, name: "novops_flag", scope: !993, file: !6, line: 3272, baseType: !7, size: 1, offset: 1745, flags: DIFlagBitField, extraData: i64 1728)
!1567 = !DIDerivedType(tag: DW_TAG_member, name: "returns_twice_flag", scope: !993, file: !6, line: 3273, baseType: !7, size: 1, offset: 1746, flags: DIFlagBitField, extraData: i64 1728)
!1568 = !DIDerivedType(tag: DW_TAG_member, name: "malloc_flag", scope: !993, file: !6, line: 3274, baseType: !7, size: 1, offset: 1747, flags: DIFlagBitField, extraData: i64 1728)
!1569 = !DIDerivedType(tag: DW_TAG_member, name: "operator_new_flag", scope: !993, file: !6, line: 3275, baseType: !7, size: 1, offset: 1748, flags: DIFlagBitField, extraData: i64 1728)
!1570 = !DIDerivedType(tag: DW_TAG_member, name: "declared_inline_flag", scope: !993, file: !6, line: 3276, baseType: !7, size: 1, offset: 1749, flags: DIFlagBitField, extraData: i64 1728)
!1571 = !DIDerivedType(tag: DW_TAG_member, name: "regdecl_flag", scope: !993, file: !6, line: 3277, baseType: !7, size: 1, offset: 1750, flags: DIFlagBitField, extraData: i64 1728)
!1572 = !DIDerivedType(tag: DW_TAG_member, name: "no_inline_warning_flag", scope: !993, file: !6, line: 3279, baseType: !7, size: 1, offset: 1751, flags: DIFlagBitField, extraData: i64 1728)
!1573 = !DIDerivedType(tag: DW_TAG_member, name: "no_instrument_function_entry_exit", scope: !993, file: !6, line: 3280, baseType: !7, size: 1, offset: 1752, flags: DIFlagBitField, extraData: i64 1728)
!1574 = !DIDerivedType(tag: DW_TAG_member, name: "no_limit_stack", scope: !993, file: !6, line: 3281, baseType: !7, size: 1, offset: 1753, flags: DIFlagBitField, extraData: i64 1728)
!1575 = !DIDerivedType(tag: DW_TAG_member, name: "disregard_inline_limits", scope: !993, file: !6, line: 3282, baseType: !7, size: 1, offset: 1754, flags: DIFlagBitField, extraData: i64 1728)
!1576 = !DIDerivedType(tag: DW_TAG_member, name: "pure_flag", scope: !993, file: !6, line: 3283, baseType: !7, size: 1, offset: 1755, flags: DIFlagBitField, extraData: i64 1728)
!1577 = !DIDerivedType(tag: DW_TAG_member, name: "looping_const_or_pure_flag", scope: !993, file: !6, line: 3284, baseType: !7, size: 1, offset: 1756, flags: DIFlagBitField, extraData: i64 1728)
!1578 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !751, file: !6, line: 3394, baseType: !1579, size: 1344)
!1579 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_type", file: !6, line: 2279, size: 1344, elements: !1580)
!1580 = !{!1581, !1582, !1583, !1584, !1585, !1586, !1587, !1588, !1589, !1590, !1591, !1592, !1593, !1594, !1595, !1596, !1597, !1598, !1599, !1600, !1601, !1602, !1603, !1606, !1607, !1608, !1616, !1617, !1618, !1619, !1620, !1621, !1622, !1623, !1624}
!1581 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1579, file: !6, line: 2280, baseType: !787, size: 192)
!1582 = !DIDerivedType(tag: DW_TAG_member, name: "values", scope: !1579, file: !6, line: 2281, baseType: !748, size: 64, offset: 192)
!1583 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1579, file: !6, line: 2282, baseType: !748, size: 64, offset: 256)
!1584 = !DIDerivedType(tag: DW_TAG_member, name: "size_unit", scope: !1579, file: !6, line: 2283, baseType: !748, size: 64, offset: 320)
!1585 = !DIDerivedType(tag: DW_TAG_member, name: "attributes", scope: !1579, file: !6, line: 2284, baseType: !748, size: 64, offset: 384)
!1586 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !1579, file: !6, line: 2285, baseType: !7, size: 32, offset: 448)
!1587 = !DIDerivedType(tag: DW_TAG_member, name: "precision", scope: !1579, file: !6, line: 2287, baseType: !7, size: 10, offset: 480, flags: DIFlagBitField, extraData: i64 480)
!1588 = !DIDerivedType(tag: DW_TAG_member, name: "no_force_blk_flag", scope: !1579, file: !6, line: 2288, baseType: !7, size: 1, offset: 490, flags: DIFlagBitField, extraData: i64 480)
!1589 = !DIDerivedType(tag: DW_TAG_member, name: "needs_constructing_flag", scope: !1579, file: !6, line: 2289, baseType: !7, size: 1, offset: 491, flags: DIFlagBitField, extraData: i64 480)
!1590 = !DIDerivedType(tag: DW_TAG_member, name: "transparent_aggr_flag", scope: !1579, file: !6, line: 2290, baseType: !7, size: 1, offset: 492, flags: DIFlagBitField, extraData: i64 480)
!1591 = !DIDerivedType(tag: DW_TAG_member, name: "restrict_flag", scope: !1579, file: !6, line: 2291, baseType: !7, size: 1, offset: 493, flags: DIFlagBitField, extraData: i64 480)
!1592 = !DIDerivedType(tag: DW_TAG_member, name: "contains_placeholder_bits", scope: !1579, file: !6, line: 2292, baseType: !7, size: 2, offset: 494, flags: DIFlagBitField, extraData: i64 480)
!1593 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !1579, file: !6, line: 2294, baseType: !7, size: 8, offset: 496, flags: DIFlagBitField, extraData: i64 480)
!1594 = !DIDerivedType(tag: DW_TAG_member, name: "string_flag", scope: !1579, file: !6, line: 2296, baseType: !7, size: 1, offset: 504, flags: DIFlagBitField, extraData: i64 480)
!1595 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !1579, file: !6, line: 2297, baseType: !7, size: 1, offset: 505, flags: DIFlagBitField, extraData: i64 480)
!1596 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !1579, file: !6, line: 2298, baseType: !7, size: 1, offset: 506, flags: DIFlagBitField, extraData: i64 480)
!1597 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !1579, file: !6, line: 2299, baseType: !7, size: 1, offset: 507, flags: DIFlagBitField, extraData: i64 480)
!1598 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !1579, file: !6, line: 2300, baseType: !7, size: 1, offset: 508, flags: DIFlagBitField, extraData: i64 480)
!1599 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !1579, file: !6, line: 2301, baseType: !7, size: 1, offset: 509, flags: DIFlagBitField, extraData: i64 480)
!1600 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !1579, file: !6, line: 2302, baseType: !7, size: 1, offset: 510, flags: DIFlagBitField, extraData: i64 480)
!1601 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !1579, file: !6, line: 2303, baseType: !7, size: 1, offset: 511, flags: DIFlagBitField, extraData: i64 480)
!1602 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !1579, file: !6, line: 2305, baseType: !7, size: 32, offset: 512)
!1603 = !DIDerivedType(tag: DW_TAG_member, name: "alias_set", scope: !1579, file: !6, line: 2306, baseType: !1604, size: 32, offset: 544)
!1604 = !DIDerivedType(tag: DW_TAG_typedef, name: "alias_set_type", file: !1605, line: 31, baseType: !829)
!1605 = !DIFile(filename: "./alias.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1606 = !DIDerivedType(tag: DW_TAG_member, name: "pointer_to", scope: !1579, file: !6, line: 2307, baseType: !748, size: 64, offset: 576)
!1607 = !DIDerivedType(tag: DW_TAG_member, name: "reference_to", scope: !1579, file: !6, line: 2308, baseType: !748, size: 64, offset: 640)
!1608 = !DIDerivedType(tag: DW_TAG_member, name: "symtab", scope: !1579, file: !6, line: 2314, baseType: !1609, size: 64, offset: 704)
!1609 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "tree_type_symtab", file: !6, line: 2309, size: 64, elements: !1610)
!1610 = !{!1611, !1612, !1613}
!1611 = !DIDerivedType(tag: DW_TAG_member, name: "address", scope: !1609, file: !6, line: 2310, baseType: !829, size: 32)
!1612 = !DIDerivedType(tag: DW_TAG_member, name: "pointer", scope: !1609, file: !6, line: 2311, baseType: !1176, size: 64)
!1613 = !DIDerivedType(tag: DW_TAG_member, name: "die", scope: !1609, file: !6, line: 2312, baseType: !1614, size: 64)
!1614 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1615, size: 64)
!1615 = !DICompositeType(tag: DW_TAG_structure_type, name: "die_struct", file: !6, line: 2277, flags: DIFlagFwdDecl)
!1616 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1579, file: !6, line: 2315, baseType: !748, size: 64, offset: 768)
!1617 = !DIDerivedType(tag: DW_TAG_member, name: "minval", scope: !1579, file: !6, line: 2316, baseType: !748, size: 64, offset: 832)
!1618 = !DIDerivedType(tag: DW_TAG_member, name: "maxval", scope: !1579, file: !6, line: 2317, baseType: !748, size: 64, offset: 896)
!1619 = !DIDerivedType(tag: DW_TAG_member, name: "next_variant", scope: !1579, file: !6, line: 2318, baseType: !748, size: 64, offset: 960)
!1620 = !DIDerivedType(tag: DW_TAG_member, name: "main_variant", scope: !1579, file: !6, line: 2319, baseType: !748, size: 64, offset: 1024)
!1621 = !DIDerivedType(tag: DW_TAG_member, name: "binfo", scope: !1579, file: !6, line: 2320, baseType: !748, size: 64, offset: 1088)
!1622 = !DIDerivedType(tag: DW_TAG_member, name: "context", scope: !1579, file: !6, line: 2321, baseType: !748, size: 64, offset: 1152)
!1623 = !DIDerivedType(tag: DW_TAG_member, name: "canonical", scope: !1579, file: !6, line: 2322, baseType: !748, size: 64, offset: 1216)
!1624 = !DIDerivedType(tag: DW_TAG_member, name: "lang_specific", scope: !1579, file: !6, line: 2324, baseType: !1625, size: 64, offset: 1280)
!1625 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1626, size: 64)
!1626 = !DICompositeType(tag: DW_TAG_structure_type, name: "lang_type", file: !6, line: 2324, flags: DIFlagFwdDecl)
!1627 = !DIDerivedType(tag: DW_TAG_member, name: "list", scope: !751, file: !6, line: 3395, baseType: !1628, size: 320)
!1628 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_list", file: !6, line: 1469, size: 320, elements: !1629)
!1629 = !{!1630, !1631, !1632}
!1630 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1628, file: !6, line: 1470, baseType: !787, size: 192)
!1631 = !DIDerivedType(tag: DW_TAG_member, name: "purpose", scope: !1628, file: !6, line: 1471, baseType: !748, size: 64, offset: 192)
!1632 = !DIDerivedType(tag: DW_TAG_member, name: "value", scope: !1628, file: !6, line: 1472, baseType: !748, size: 64, offset: 256)
!1633 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !751, file: !6, line: 3396, baseType: !1634, size: 320)
!1634 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_vec", file: !6, line: 1482, size: 320, elements: !1635)
!1635 = !{!1636, !1637, !1638}
!1636 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1634, file: !6, line: 1483, baseType: !787, size: 192)
!1637 = !DIDerivedType(tag: DW_TAG_member, name: "length", scope: !1634, file: !6, line: 1484, baseType: !829, size: 32, offset: 192)
!1638 = !DIDerivedType(tag: DW_TAG_member, name: "a", scope: !1634, file: !6, line: 1485, baseType: !1100, size: 64, offset: 256)
!1639 = !DIDerivedType(tag: DW_TAG_member, name: "exp", scope: !751, file: !6, line: 3397, baseType: !1640, size: 384)
!1640 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_exp", file: !6, line: 1829, size: 384, elements: !1641)
!1641 = !{!1642, !1643, !1644, !1645}
!1642 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1640, file: !6, line: 1830, baseType: !787, size: 192)
!1643 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !1640, file: !6, line: 1831, baseType: !860, size: 32, offset: 192)
!1644 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !1640, file: !6, line: 1832, baseType: !748, size: 64, offset: 256)
!1645 = !DIDerivedType(tag: DW_TAG_member, name: "operands", scope: !1640, file: !6, line: 1835, baseType: !1100, size: 64, offset: 320)
!1646 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_name", scope: !751, file: !6, line: 3398, baseType: !1647, size: 704)
!1647 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_ssa_name", file: !6, line: 1898, size: 704, elements: !1648)
!1648 = !{!1649, !1650, !1651, !1652, !1653, !1658}
!1649 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1647, file: !6, line: 1899, baseType: !787, size: 192)
!1650 = !DIDerivedType(tag: DW_TAG_member, name: "var", scope: !1647, file: !6, line: 1902, baseType: !748, size: 64, offset: 192)
!1651 = !DIDerivedType(tag: DW_TAG_member, name: "def_stmt", scope: !1647, file: !6, line: 1905, baseType: !1046, size: 64, offset: 256)
!1652 = !DIDerivedType(tag: DW_TAG_member, name: "version", scope: !1647, file: !6, line: 1908, baseType: !7, size: 32, offset: 320)
!1653 = !DIDerivedType(tag: DW_TAG_member, name: "ptr_info", scope: !1647, file: !6, line: 1911, baseType: !1654, size: 64, offset: 384)
!1654 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1655, size: 64)
!1655 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ptr_info_def", file: !949, line: 117, size: 128, elements: !1656)
!1656 = !{!1657}
!1657 = !DIDerivedType(tag: DW_TAG_member, name: "pt", scope: !1655, file: !949, line: 120, baseType: !1406, size: 128)
!1658 = !DIDerivedType(tag: DW_TAG_member, name: "imm_uses", scope: !1647, file: !6, line: 1914, baseType: !1088, size: 256, offset: 448)
!1659 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !751, file: !6, line: 3399, baseType: !1660, size: 704)
!1660 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_block", file: !6, line: 2008, size: 704, elements: !1661)
!1661 = !{!1662, !1663, !1664, !1665, !1666, !1667, !1668, !1669, !1670, !1671, !1672}
!1662 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1660, file: !6, line: 2009, baseType: !787, size: 192)
!1663 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_flag", scope: !1660, file: !6, line: 2011, baseType: !7, size: 1, offset: 192, flags: DIFlagBitField, extraData: i64 192)
!1664 = !DIDerivedType(tag: DW_TAG_member, name: "block_num", scope: !1660, file: !6, line: 2012, baseType: !7, size: 31, offset: 193, flags: DIFlagBitField, extraData: i64 192)
!1665 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !1660, file: !6, line: 2014, baseType: !860, size: 32, offset: 224)
!1666 = !DIDerivedType(tag: DW_TAG_member, name: "vars", scope: !1660, file: !6, line: 2016, baseType: !748, size: 64, offset: 256)
!1667 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocalized_vars", scope: !1660, file: !6, line: 2017, baseType: !1393, size: 64, offset: 320)
!1668 = !DIDerivedType(tag: DW_TAG_member, name: "subblocks", scope: !1660, file: !6, line: 2019, baseType: !748, size: 64, offset: 384)
!1669 = !DIDerivedType(tag: DW_TAG_member, name: "supercontext", scope: !1660, file: !6, line: 2020, baseType: !748, size: 64, offset: 448)
!1670 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_origin", scope: !1660, file: !6, line: 2021, baseType: !748, size: 64, offset: 512)
!1671 = !DIDerivedType(tag: DW_TAG_member, name: "fragment_origin", scope: !1660, file: !6, line: 2022, baseType: !748, size: 64, offset: 576)
!1672 = !DIDerivedType(tag: DW_TAG_member, name: "fragment_chain", scope: !1660, file: !6, line: 2023, baseType: !748, size: 64, offset: 640)
!1673 = !DIDerivedType(tag: DW_TAG_member, name: "binfo", scope: !751, file: !6, line: 3400, baseType: !1674, size: 832)
!1674 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_binfo", file: !6, line: 2430, size: 832, elements: !1675)
!1675 = !{!1676, !1677, !1678, !1679, !1680, !1681, !1682, !1683, !1684, !1685}
!1676 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1674, file: !6, line: 2431, baseType: !787, size: 192)
!1677 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1674, file: !6, line: 2433, baseType: !748, size: 64, offset: 192)
!1678 = !DIDerivedType(tag: DW_TAG_member, name: "vtable", scope: !1674, file: !6, line: 2434, baseType: !748, size: 64, offset: 256)
!1679 = !DIDerivedType(tag: DW_TAG_member, name: "virtuals", scope: !1674, file: !6, line: 2435, baseType: !748, size: 64, offset: 320)
!1680 = !DIDerivedType(tag: DW_TAG_member, name: "vptr_field", scope: !1674, file: !6, line: 2436, baseType: !748, size: 64, offset: 384)
!1681 = !DIDerivedType(tag: DW_TAG_member, name: "base_accesses", scope: !1674, file: !6, line: 2437, baseType: !1393, size: 64, offset: 448)
!1682 = !DIDerivedType(tag: DW_TAG_member, name: "inheritance", scope: !1674, file: !6, line: 2438, baseType: !748, size: 64, offset: 512)
!1683 = !DIDerivedType(tag: DW_TAG_member, name: "vtt_subvtt", scope: !1674, file: !6, line: 2440, baseType: !748, size: 64, offset: 576)
!1684 = !DIDerivedType(tag: DW_TAG_member, name: "vtt_vptr", scope: !1674, file: !6, line: 2441, baseType: !748, size: 64, offset: 640)
!1685 = !DIDerivedType(tag: DW_TAG_member, name: "base_binfos", scope: !1674, file: !6, line: 2443, baseType: !1686, size: 128, offset: 704)
!1686 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_none", file: !6, line: 182, baseType: !1687)
!1687 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_none", file: !6, line: 182, size: 128, elements: !1688)
!1688 = !{!1689}
!1689 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1687, file: !6, line: 182, baseType: !1398, size: 128)
!1690 = !DIDerivedType(tag: DW_TAG_member, name: "stmt_list", scope: !751, file: !6, line: 3401, baseType: !1691, size: 320)
!1691 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_statement_list", file: !6, line: 3327, size: 320, elements: !1692)
!1692 = !{!1693, !1694, !1701}
!1693 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1691, file: !6, line: 3329, baseType: !787, size: 192)
!1694 = !DIDerivedType(tag: DW_TAG_member, name: "head", scope: !1691, file: !6, line: 3330, baseType: !1695, size: 64, offset: 192)
!1695 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1696, size: 64)
!1696 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_statement_list_node", file: !6, line: 3320, size: 192, elements: !1697)
!1697 = !{!1698, !1699, !1700}
!1698 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1696, file: !6, line: 3322, baseType: !1695, size: 64)
!1699 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1696, file: !6, line: 3323, baseType: !1695, size: 64, offset: 64)
!1700 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !1696, file: !6, line: 3324, baseType: !748, size: 64, offset: 128)
!1701 = !DIDerivedType(tag: DW_TAG_member, name: "tail", scope: !1691, file: !6, line: 3331, baseType: !1695, size: 64, offset: 256)
!1702 = !DIDerivedType(tag: DW_TAG_member, name: "constructor", scope: !751, file: !6, line: 3402, baseType: !1703, size: 256)
!1703 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_constructor", file: !6, line: 1540, size: 256, elements: !1704)
!1704 = !{!1705, !1706}
!1705 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1703, file: !6, line: 1541, baseType: !787, size: 192)
!1706 = !DIDerivedType(tag: DW_TAG_member, name: "elts", scope: !1703, file: !6, line: 1542, baseType: !1707, size: 64, offset: 192)
!1707 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1708, size: 64)
!1708 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_constructor_elt_gc", file: !6, line: 1538, baseType: !1709)
!1709 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_constructor_elt_gc", file: !6, line: 1538, size: 192, elements: !1710)
!1710 = !{!1711}
!1711 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1709, file: !6, line: 1538, baseType: !1712, size: 192)
!1712 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_constructor_elt_base", file: !6, line: 1537, baseType: !1713)
!1713 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_constructor_elt_base", file: !6, line: 1537, size: 192, elements: !1714)
!1714 = !{!1715, !1716, !1717}
!1715 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1713, file: !6, line: 1537, baseType: !7, size: 32)
!1716 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1713, file: !6, line: 1537, baseType: !7, size: 32, offset: 32)
!1717 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1713, file: !6, line: 1537, baseType: !1718, size: 128, offset: 64)
!1718 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1719, size: 128, elements: !833)
!1719 = !DIDerivedType(tag: DW_TAG_typedef, name: "constructor_elt", file: !6, line: 1535, baseType: !1720)
!1720 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "constructor_elt_d", file: !6, line: 1532, size: 128, elements: !1721)
!1721 = !{!1722, !1723}
!1722 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !1720, file: !6, line: 1533, baseType: !748, size: 64)
!1723 = !DIDerivedType(tag: DW_TAG_member, name: "value", scope: !1720, file: !6, line: 1534, baseType: !748, size: 64, offset: 64)
!1724 = !DIDerivedType(tag: DW_TAG_member, name: "omp_clause", scope: !751, file: !6, line: 3403, baseType: !1725, size: 512)
!1725 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_omp_clause", file: !6, line: 1938, size: 512, elements: !1726)
!1726 = !{!1727, !1728, !1729, !1730, !1736, !1737, !1738}
!1727 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1725, file: !6, line: 1939, baseType: !787, size: 192)
!1728 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !1725, file: !6, line: 1940, baseType: !860, size: 32, offset: 192)
!1729 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !1725, file: !6, line: 1941, baseType: !217, size: 32, offset: 224)
!1730 = !DIDerivedType(tag: DW_TAG_member, name: "subcode", scope: !1725, file: !6, line: 1946, baseType: !1731, size: 32, offset: 256)
!1731 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "omp_clause_subcode", file: !6, line: 1942, size: 32, elements: !1732)
!1732 = !{!1733, !1734, !1735}
!1733 = !DIDerivedType(tag: DW_TAG_member, name: "default_kind", scope: !1731, file: !6, line: 1943, baseType: !235, size: 32)
!1734 = !DIDerivedType(tag: DW_TAG_member, name: "schedule_kind", scope: !1731, file: !6, line: 1944, baseType: !242, size: 32)
!1735 = !DIDerivedType(tag: DW_TAG_member, name: "reduction_code", scope: !1731, file: !6, line: 1945, baseType: !5, size: 32)
!1736 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reduction_init", scope: !1725, file: !6, line: 1950, baseType: !1036, size: 64, offset: 320)
!1737 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reduction_merge", scope: !1725, file: !6, line: 1951, baseType: !1036, size: 64, offset: 384)
!1738 = !DIDerivedType(tag: DW_TAG_member, name: "ops", scope: !1725, file: !6, line: 1953, baseType: !1100, size: 64, offset: 448)
!1739 = !DIDerivedType(tag: DW_TAG_member, name: "optimization", scope: !751, file: !6, line: 3404, baseType: !1740, size: 1664)
!1740 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_optimization_option", file: !6, line: 3337, size: 1664, elements: !1741)
!1741 = !{!1742, !1743}
!1742 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1740, file: !6, line: 3338, baseType: !787, size: 192)
!1743 = !DIDerivedType(tag: DW_TAG_member, name: "opts", scope: !1740, file: !6, line: 3341, baseType: !1744, size: 1472, offset: 192)
!1744 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cl_optimization", file: !1745, line: 410, size: 1472, elements: !1746)
!1745 = !DIFile(filename: "./options.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1746 = !{!1747, !1748, !1749, !1750, !1751, !1752, !1753, !1754, !1755, !1757, !1758, !1759, !1760, !1761, !1762, !1763, !1764, !1765, !1766, !1767, !1768, !1769, !1770, !1771, !1772, !1773, !1774, !1775, !1776, !1777, !1778, !1779, !1780, !1781, !1782, !1783, !1784, !1785, !1786, !1787, !1788, !1789, !1790, !1791, !1792, !1793, !1794, !1795, !1796, !1797, !1798, !1799, !1800, !1801, !1802, !1803, !1804, !1805, !1806, !1807, !1808, !1809, !1810, !1811, !1812, !1813, !1814, !1815, !1816, !1817, !1818, !1819, !1820, !1821, !1822, !1823, !1824, !1825, !1826, !1827, !1828, !1829, !1830, !1831, !1832, !1833, !1834, !1835, !1836, !1837, !1838, !1839, !1840, !1841, !1842, !1843, !1844, !1845, !1846, !1847, !1848, !1849, !1850, !1851, !1852, !1853, !1854, !1855, !1856, !1857, !1858, !1859, !1860, !1861, !1862, !1863, !1864, !1865, !1866, !1867, !1868, !1869, !1870, !1871, !1872, !1873, !1874, !1875, !1876, !1877, !1878, !1879, !1880, !1881, !1882, !1883, !1884, !1885, !1886, !1887, !1888, !1889, !1890, !1891, !1892, !1893, !1894, !1895, !1896, !1897, !1898, !1899, !1900, !1901, !1902, !1903, !1904, !1905, !1906, !1907, !1908, !1909, !1910}
!1747 = !DIDerivedType(tag: DW_TAG_member, name: "align_functions", scope: !1744, file: !1745, line: 412, baseType: !829, size: 32)
!1748 = !DIDerivedType(tag: DW_TAG_member, name: "align_jumps", scope: !1744, file: !1745, line: 413, baseType: !829, size: 32, offset: 32)
!1749 = !DIDerivedType(tag: DW_TAG_member, name: "align_labels", scope: !1744, file: !1745, line: 414, baseType: !829, size: 32, offset: 64)
!1750 = !DIDerivedType(tag: DW_TAG_member, name: "align_loops", scope: !1744, file: !1745, line: 415, baseType: !829, size: 32, offset: 96)
!1751 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_stalled_insns", scope: !1744, file: !1745, line: 416, baseType: !829, size: 32, offset: 128)
!1752 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_stalled_insns_dep", scope: !1744, file: !1745, line: 417, baseType: !829, size: 32, offset: 160)
!1753 = !DIDerivedType(tag: DW_TAG_member, name: "optimize", scope: !1744, file: !1745, line: 418, baseType: !852, size: 8, offset: 192)
!1754 = !DIDerivedType(tag: DW_TAG_member, name: "optimize_size", scope: !1744, file: !1745, line: 419, baseType: !852, size: 8, offset: 200)
!1755 = !DIDerivedType(tag: DW_TAG_member, name: "flag_argument_noalias", scope: !1744, file: !1745, line: 420, baseType: !1756, size: 8, offset: 208)
!1756 = !DIBasicType(name: "signed char", size: 8, encoding: DW_ATE_signed_char)
!1757 = !DIDerivedType(tag: DW_TAG_member, name: "flag_asynchronous_unwind_tables", scope: !1744, file: !1745, line: 421, baseType: !1756, size: 8, offset: 216)
!1758 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_on_count_reg", scope: !1744, file: !1745, line: 422, baseType: !1756, size: 8, offset: 224)
!1759 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_probabilities", scope: !1744, file: !1745, line: 423, baseType: !1756, size: 8, offset: 232)
!1760 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_target_load_optimize", scope: !1744, file: !1745, line: 424, baseType: !1756, size: 8, offset: 240)
!1761 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_target_load_optimize2", scope: !1744, file: !1745, line: 425, baseType: !1756, size: 8, offset: 248)
!1762 = !DIDerivedType(tag: DW_TAG_member, name: "flag_btr_bb_exclusive", scope: !1744, file: !1745, line: 426, baseType: !1756, size: 8, offset: 256)
!1763 = !DIDerivedType(tag: DW_TAG_member, name: "flag_caller_saves", scope: !1744, file: !1745, line: 427, baseType: !1756, size: 8, offset: 264)
!1764 = !DIDerivedType(tag: DW_TAG_member, name: "flag_no_common", scope: !1744, file: !1745, line: 428, baseType: !1756, size: 8, offset: 272)
!1765 = !DIDerivedType(tag: DW_TAG_member, name: "flag_conserve_stack", scope: !1744, file: !1745, line: 429, baseType: !1756, size: 8, offset: 280)
!1766 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cprop_registers", scope: !1744, file: !1745, line: 430, baseType: !1756, size: 8, offset: 288)
!1767 = !DIDerivedType(tag: DW_TAG_member, name: "flag_crossjumping", scope: !1744, file: !1745, line: 431, baseType: !1756, size: 8, offset: 296)
!1768 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cse_follow_jumps", scope: !1744, file: !1745, line: 432, baseType: !1756, size: 8, offset: 304)
!1769 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cx_fortran_rules", scope: !1744, file: !1745, line: 433, baseType: !1756, size: 8, offset: 312)
!1770 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cx_limited_range", scope: !1744, file: !1745, line: 434, baseType: !1756, size: 8, offset: 320)
!1771 = !DIDerivedType(tag: DW_TAG_member, name: "flag_data_sections", scope: !1744, file: !1745, line: 435, baseType: !1756, size: 8, offset: 328)
!1772 = !DIDerivedType(tag: DW_TAG_member, name: "flag_dce", scope: !1744, file: !1745, line: 436, baseType: !1756, size: 8, offset: 336)
!1773 = !DIDerivedType(tag: DW_TAG_member, name: "flag_defer_pop", scope: !1744, file: !1745, line: 437, baseType: !1756, size: 8, offset: 344)
!1774 = !DIDerivedType(tag: DW_TAG_member, name: "flag_delayed_branch", scope: !1744, file: !1745, line: 438, baseType: !1756, size: 8, offset: 352)
!1775 = !DIDerivedType(tag: DW_TAG_member, name: "flag_delete_null_pointer_checks", scope: !1744, file: !1745, line: 439, baseType: !1756, size: 8, offset: 360)
!1776 = !DIDerivedType(tag: DW_TAG_member, name: "flag_dse", scope: !1744, file: !1745, line: 440, baseType: !1756, size: 8, offset: 368)
!1777 = !DIDerivedType(tag: DW_TAG_member, name: "flag_early_inlining", scope: !1744, file: !1745, line: 441, baseType: !1756, size: 8, offset: 376)
!1778 = !DIDerivedType(tag: DW_TAG_member, name: "flag_exceptions", scope: !1744, file: !1745, line: 442, baseType: !1756, size: 8, offset: 384)
!1779 = !DIDerivedType(tag: DW_TAG_member, name: "flag_expensive_optimizations", scope: !1744, file: !1745, line: 443, baseType: !1756, size: 8, offset: 392)
!1780 = !DIDerivedType(tag: DW_TAG_member, name: "flag_finite_math_only", scope: !1744, file: !1745, line: 444, baseType: !1756, size: 8, offset: 400)
!1781 = !DIDerivedType(tag: DW_TAG_member, name: "flag_float_store", scope: !1744, file: !1745, line: 445, baseType: !1756, size: 8, offset: 408)
!1782 = !DIDerivedType(tag: DW_TAG_member, name: "flag_forward_propagate", scope: !1744, file: !1745, line: 446, baseType: !1756, size: 8, offset: 416)
!1783 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse", scope: !1744, file: !1745, line: 447, baseType: !1756, size: 8, offset: 424)
!1784 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_after_reload", scope: !1744, file: !1745, line: 448, baseType: !1756, size: 8, offset: 432)
!1785 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_las", scope: !1744, file: !1745, line: 449, baseType: !1756, size: 8, offset: 440)
!1786 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_lm", scope: !1744, file: !1745, line: 450, baseType: !1756, size: 8, offset: 448)
!1787 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_sm", scope: !1744, file: !1745, line: 451, baseType: !1756, size: 8, offset: 456)
!1788 = !DIDerivedType(tag: DW_TAG_member, name: "flag_graphite_identity", scope: !1744, file: !1745, line: 452, baseType: !1756, size: 8, offset: 464)
!1789 = !DIDerivedType(tag: DW_TAG_member, name: "flag_guess_branch_prob", scope: !1744, file: !1745, line: 453, baseType: !1756, size: 8, offset: 472)
!1790 = !DIDerivedType(tag: DW_TAG_member, name: "flag_if_conversion", scope: !1744, file: !1745, line: 454, baseType: !1756, size: 8, offset: 480)
!1791 = !DIDerivedType(tag: DW_TAG_member, name: "flag_if_conversion2", scope: !1744, file: !1745, line: 455, baseType: !1756, size: 8, offset: 488)
!1792 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_functions", scope: !1744, file: !1745, line: 456, baseType: !1756, size: 8, offset: 496)
!1793 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_functions_called_once", scope: !1744, file: !1745, line: 457, baseType: !1756, size: 8, offset: 504)
!1794 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_small_functions", scope: !1744, file: !1745, line: 458, baseType: !1756, size: 8, offset: 512)
!1795 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_cp", scope: !1744, file: !1745, line: 459, baseType: !1756, size: 8, offset: 520)
!1796 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_cp_clone", scope: !1744, file: !1745, line: 460, baseType: !1756, size: 8, offset: 528)
!1797 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_matrix_reorg", scope: !1744, file: !1745, line: 461, baseType: !1756, size: 8, offset: 536)
!1798 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_pta", scope: !1744, file: !1745, line: 462, baseType: !1756, size: 8, offset: 544)
!1799 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_pure_const", scope: !1744, file: !1745, line: 463, baseType: !1756, size: 8, offset: 552)
!1800 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_reference", scope: !1744, file: !1745, line: 464, baseType: !1756, size: 8, offset: 560)
!1801 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_sra", scope: !1744, file: !1745, line: 465, baseType: !1756, size: 8, offset: 568)
!1802 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_type_escape", scope: !1744, file: !1745, line: 466, baseType: !1756, size: 8, offset: 576)
!1803 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ivopts", scope: !1744, file: !1745, line: 467, baseType: !1756, size: 8, offset: 584)
!1804 = !DIDerivedType(tag: DW_TAG_member, name: "flag_jump_tables", scope: !1744, file: !1745, line: 468, baseType: !1756, size: 8, offset: 592)
!1805 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_block", scope: !1744, file: !1745, line: 469, baseType: !1756, size: 8, offset: 600)
!1806 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_interchange", scope: !1744, file: !1745, line: 470, baseType: !1756, size: 8, offset: 608)
!1807 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_parallelize_all", scope: !1744, file: !1745, line: 471, baseType: !1756, size: 8, offset: 616)
!1808 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_strip_mine", scope: !1744, file: !1745, line: 472, baseType: !1756, size: 8, offset: 624)
!1809 = !DIDerivedType(tag: DW_TAG_member, name: "flag_lto_report", scope: !1744, file: !1745, line: 473, baseType: !1756, size: 8, offset: 632)
!1810 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ltrans", scope: !1744, file: !1745, line: 474, baseType: !1756, size: 8, offset: 640)
!1811 = !DIDerivedType(tag: DW_TAG_member, name: "flag_errno_math", scope: !1744, file: !1745, line: 475, baseType: !1756, size: 8, offset: 648)
!1812 = !DIDerivedType(tag: DW_TAG_member, name: "flag_merge_constants", scope: !1744, file: !1745, line: 476, baseType: !1756, size: 8, offset: 656)
!1813 = !DIDerivedType(tag: DW_TAG_member, name: "flag_modulo_sched", scope: !1744, file: !1745, line: 477, baseType: !1756, size: 8, offset: 664)
!1814 = !DIDerivedType(tag: DW_TAG_member, name: "flag_move_loop_invariants", scope: !1744, file: !1745, line: 478, baseType: !1756, size: 8, offset: 672)
!1815 = !DIDerivedType(tag: DW_TAG_member, name: "flag_non_call_exceptions", scope: !1744, file: !1745, line: 479, baseType: !1756, size: 8, offset: 680)
!1816 = !DIDerivedType(tag: DW_TAG_member, name: "flag_omit_frame_pointer", scope: !1744, file: !1745, line: 480, baseType: !1756, size: 8, offset: 688)
!1817 = !DIDerivedType(tag: DW_TAG_member, name: "flag_regmove", scope: !1744, file: !1745, line: 481, baseType: !1756, size: 8, offset: 696)
!1818 = !DIDerivedType(tag: DW_TAG_member, name: "flag_optimize_sibling_calls", scope: !1744, file: !1745, line: 482, baseType: !1756, size: 8, offset: 704)
!1819 = !DIDerivedType(tag: DW_TAG_member, name: "flag_pack_struct", scope: !1744, file: !1745, line: 483, baseType: !1756, size: 8, offset: 712)
!1820 = !DIDerivedType(tag: DW_TAG_member, name: "flag_peel_loops", scope: !1744, file: !1745, line: 484, baseType: !1756, size: 8, offset: 720)
!1821 = !DIDerivedType(tag: DW_TAG_member, name: "flag_no_peephole", scope: !1744, file: !1745, line: 485, baseType: !1756, size: 8, offset: 728)
!1822 = !DIDerivedType(tag: DW_TAG_member, name: "flag_peephole2", scope: !1744, file: !1745, line: 486, baseType: !1756, size: 8, offset: 736)
!1823 = !DIDerivedType(tag: DW_TAG_member, name: "flag_predictive_commoning", scope: !1744, file: !1745, line: 487, baseType: !1756, size: 8, offset: 744)
!1824 = !DIDerivedType(tag: DW_TAG_member, name: "flag_prefetch_loop_arrays", scope: !1744, file: !1745, line: 488, baseType: !1756, size: 8, offset: 752)
!1825 = !DIDerivedType(tag: DW_TAG_member, name: "flag_pcc_struct_return", scope: !1744, file: !1745, line: 489, baseType: !1756, size: 8, offset: 760)
!1826 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rename_registers", scope: !1744, file: !1745, line: 490, baseType: !1756, size: 8, offset: 768)
!1827 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_blocks", scope: !1744, file: !1745, line: 491, baseType: !1756, size: 8, offset: 776)
!1828 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_blocks_and_partition", scope: !1744, file: !1745, line: 492, baseType: !1756, size: 8, offset: 784)
!1829 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_functions", scope: !1744, file: !1745, line: 493, baseType: !1756, size: 8, offset: 792)
!1830 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rerun_cse_after_loop", scope: !1744, file: !1745, line: 494, baseType: !1756, size: 8, offset: 800)
!1831 = !DIDerivedType(tag: DW_TAG_member, name: "flag_resched_modulo_sched", scope: !1744, file: !1745, line: 495, baseType: !1756, size: 8, offset: 808)
!1832 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rounding_math", scope: !1744, file: !1745, line: 496, baseType: !1756, size: 8, offset: 816)
!1833 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_critical_path_heuristic", scope: !1744, file: !1745, line: 497, baseType: !1756, size: 8, offset: 824)
!1834 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_dep_count_heuristic", scope: !1744, file: !1745, line: 498, baseType: !1756, size: 8, offset: 832)
!1835 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_group_heuristic", scope: !1744, file: !1745, line: 499, baseType: !1756, size: 8, offset: 840)
!1836 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_interblock", scope: !1744, file: !1745, line: 500, baseType: !1756, size: 8, offset: 848)
!1837 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_last_insn_heuristic", scope: !1744, file: !1745, line: 501, baseType: !1756, size: 8, offset: 856)
!1838 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_pressure", scope: !1744, file: !1745, line: 502, baseType: !1756, size: 8, offset: 864)
!1839 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_rank_heuristic", scope: !1744, file: !1745, line: 503, baseType: !1756, size: 8, offset: 872)
!1840 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative", scope: !1744, file: !1745, line: 504, baseType: !1756, size: 8, offset: 880)
!1841 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_spec_insn_heuristic", scope: !1744, file: !1745, line: 505, baseType: !1756, size: 8, offset: 888)
!1842 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative_load", scope: !1744, file: !1745, line: 506, baseType: !1756, size: 8, offset: 896)
!1843 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative_load_dangerous", scope: !1744, file: !1745, line: 507, baseType: !1756, size: 8, offset: 904)
!1844 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched2_use_superblocks", scope: !1744, file: !1745, line: 508, baseType: !1756, size: 8, offset: 912)
!1845 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_insns", scope: !1744, file: !1745, line: 509, baseType: !1756, size: 8, offset: 920)
!1846 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_insns_after_reload", scope: !1744, file: !1745, line: 510, baseType: !1756, size: 8, offset: 928)
!1847 = !DIDerivedType(tag: DW_TAG_member, name: "flag_section_anchors", scope: !1744, file: !1745, line: 511, baseType: !1756, size: 8, offset: 936)
!1848 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_pipelining", scope: !1744, file: !1745, line: 512, baseType: !1756, size: 8, offset: 944)
!1849 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_pipelining_outer_loops", scope: !1744, file: !1745, line: 513, baseType: !1756, size: 8, offset: 952)
!1850 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_reschedule_pipelined", scope: !1744, file: !1745, line: 514, baseType: !1756, size: 8, offset: 960)
!1851 = !DIDerivedType(tag: DW_TAG_member, name: "flag_selective_scheduling", scope: !1744, file: !1745, line: 515, baseType: !1756, size: 8, offset: 968)
!1852 = !DIDerivedType(tag: DW_TAG_member, name: "flag_selective_scheduling2", scope: !1744, file: !1745, line: 516, baseType: !1756, size: 8, offset: 976)
!1853 = !DIDerivedType(tag: DW_TAG_member, name: "flag_signaling_nans", scope: !1744, file: !1745, line: 517, baseType: !1756, size: 8, offset: 984)
!1854 = !DIDerivedType(tag: DW_TAG_member, name: "flag_signed_zeros", scope: !1744, file: !1745, line: 518, baseType: !1756, size: 8, offset: 992)
!1855 = !DIDerivedType(tag: DW_TAG_member, name: "flag_single_precision_constant", scope: !1744, file: !1745, line: 519, baseType: !1756, size: 8, offset: 1000)
!1856 = !DIDerivedType(tag: DW_TAG_member, name: "flag_split_ivs_in_unroller", scope: !1744, file: !1745, line: 520, baseType: !1756, size: 8, offset: 1008)
!1857 = !DIDerivedType(tag: DW_TAG_member, name: "flag_split_wide_types", scope: !1744, file: !1745, line: 521, baseType: !1756, size: 8, offset: 1016)
!1858 = !DIDerivedType(tag: DW_TAG_member, name: "flag_strict_aliasing", scope: !1744, file: !1745, line: 522, baseType: !1756, size: 8, offset: 1024)
!1859 = !DIDerivedType(tag: DW_TAG_member, name: "flag_thread_jumps", scope: !1744, file: !1745, line: 523, baseType: !1756, size: 8, offset: 1032)
!1860 = !DIDerivedType(tag: DW_TAG_member, name: "flag_toplevel_reorder", scope: !1744, file: !1745, line: 524, baseType: !1756, size: 8, offset: 1040)
!1861 = !DIDerivedType(tag: DW_TAG_member, name: "flag_trapping_math", scope: !1744, file: !1745, line: 525, baseType: !1756, size: 8, offset: 1048)
!1862 = !DIDerivedType(tag: DW_TAG_member, name: "flag_trapv", scope: !1744, file: !1745, line: 526, baseType: !1756, size: 8, offset: 1056)
!1863 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_builtin_call_dce", scope: !1744, file: !1745, line: 527, baseType: !1756, size: 8, offset: 1064)
!1864 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ccp", scope: !1744, file: !1745, line: 528, baseType: !1756, size: 8, offset: 1072)
!1865 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ch", scope: !1744, file: !1745, line: 529, baseType: !1756, size: 8, offset: 1080)
!1866 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_copy_prop", scope: !1744, file: !1745, line: 530, baseType: !1756, size: 8, offset: 1088)
!1867 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_copyrename", scope: !1744, file: !1745, line: 531, baseType: !1756, size: 8, offset: 1096)
!1868 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_cselim", scope: !1744, file: !1745, line: 532, baseType: !1756, size: 8, offset: 1104)
!1869 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dce", scope: !1744, file: !1745, line: 533, baseType: !1756, size: 8, offset: 1112)
!1870 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dom", scope: !1744, file: !1745, line: 534, baseType: !1756, size: 8, offset: 1120)
!1871 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dse", scope: !1744, file: !1745, line: 535, baseType: !1756, size: 8, offset: 1128)
!1872 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_forwprop", scope: !1744, file: !1745, line: 536, baseType: !1756, size: 8, offset: 1136)
!1873 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_fre", scope: !1744, file: !1745, line: 537, baseType: !1756, size: 8, offset: 1144)
!1874 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_distribution", scope: !1744, file: !1745, line: 538, baseType: !1756, size: 8, offset: 1152)
!1875 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_im", scope: !1744, file: !1745, line: 539, baseType: !1756, size: 8, offset: 1160)
!1876 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_ivcanon", scope: !1744, file: !1745, line: 540, baseType: !1756, size: 8, offset: 1168)
!1877 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_linear", scope: !1744, file: !1745, line: 541, baseType: !1756, size: 8, offset: 1176)
!1878 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_optimize", scope: !1744, file: !1745, line: 542, baseType: !1756, size: 8, offset: 1184)
!1879 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_live_range_split", scope: !1744, file: !1745, line: 543, baseType: !1756, size: 8, offset: 1192)
!1880 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_phiprop", scope: !1744, file: !1745, line: 544, baseType: !1756, size: 8, offset: 1200)
!1881 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_pre", scope: !1744, file: !1745, line: 545, baseType: !1756, size: 8, offset: 1208)
!1882 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_pta", scope: !1744, file: !1745, line: 546, baseType: !1756, size: 8, offset: 1216)
!1883 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_reassoc", scope: !1744, file: !1745, line: 547, baseType: !1756, size: 8, offset: 1224)
!1884 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_scev_cprop", scope: !1744, file: !1745, line: 548, baseType: !1756, size: 8, offset: 1232)
!1885 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_sink", scope: !1744, file: !1745, line: 549, baseType: !1756, size: 8, offset: 1240)
!1886 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_slp_vectorize", scope: !1744, file: !1745, line: 550, baseType: !1756, size: 8, offset: 1248)
!1887 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_sra", scope: !1744, file: !1745, line: 551, baseType: !1756, size: 8, offset: 1256)
!1888 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_switch_conversion", scope: !1744, file: !1745, line: 552, baseType: !1756, size: 8, offset: 1264)
!1889 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ter", scope: !1744, file: !1745, line: 553, baseType: !1756, size: 8, offset: 1272)
!1890 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vect_loop_version", scope: !1744, file: !1745, line: 554, baseType: !1756, size: 8, offset: 1280)
!1891 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vectorize", scope: !1744, file: !1745, line: 555, baseType: !1756, size: 8, offset: 1288)
!1892 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vrp", scope: !1744, file: !1745, line: 556, baseType: !1756, size: 8, offset: 1296)
!1893 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unit_at_a_time", scope: !1744, file: !1745, line: 557, baseType: !1756, size: 8, offset: 1304)
!1894 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unroll_all_loops", scope: !1744, file: !1745, line: 558, baseType: !1756, size: 8, offset: 1312)
!1895 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unroll_loops", scope: !1744, file: !1745, line: 559, baseType: !1756, size: 8, offset: 1320)
!1896 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unsafe_loop_optimizations", scope: !1744, file: !1745, line: 560, baseType: !1756, size: 8, offset: 1328)
!1897 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unsafe_math_optimizations", scope: !1744, file: !1745, line: 561, baseType: !1756, size: 8, offset: 1336)
!1898 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unswitch_loops", scope: !1744, file: !1745, line: 562, baseType: !1756, size: 8, offset: 1344)
!1899 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unwind_tables", scope: !1744, file: !1745, line: 563, baseType: !1756, size: 8, offset: 1352)
!1900 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking", scope: !1744, file: !1745, line: 564, baseType: !1756, size: 8, offset: 1360)
!1901 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_assignments", scope: !1744, file: !1745, line: 565, baseType: !1756, size: 8, offset: 1368)
!1902 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_assignments_toggle", scope: !1744, file: !1745, line: 566, baseType: !1756, size: 8, offset: 1376)
!1903 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_uninit", scope: !1744, file: !1745, line: 567, baseType: !1756, size: 8, offset: 1384)
!1904 = !DIDerivedType(tag: DW_TAG_member, name: "flag_variable_expansion_in_unroller", scope: !1744, file: !1745, line: 568, baseType: !1756, size: 8, offset: 1392)
!1905 = !DIDerivedType(tag: DW_TAG_member, name: "flag_vect_cost_model", scope: !1744, file: !1745, line: 569, baseType: !1756, size: 8, offset: 1400)
!1906 = !DIDerivedType(tag: DW_TAG_member, name: "flag_value_profile_transformations", scope: !1744, file: !1745, line: 570, baseType: !1756, size: 8, offset: 1408)
!1907 = !DIDerivedType(tag: DW_TAG_member, name: "flag_web", scope: !1744, file: !1745, line: 571, baseType: !1756, size: 8, offset: 1416)
!1908 = !DIDerivedType(tag: DW_TAG_member, name: "flag_whole_program", scope: !1744, file: !1745, line: 572, baseType: !1756, size: 8, offset: 1424)
!1909 = !DIDerivedType(tag: DW_TAG_member, name: "flag_wpa", scope: !1744, file: !1745, line: 573, baseType: !1756, size: 8, offset: 1432)
!1910 = !DIDerivedType(tag: DW_TAG_member, name: "flag_wrapv", scope: !1744, file: !1745, line: 574, baseType: !1756, size: 8, offset: 1440)
!1911 = !DIDerivedType(tag: DW_TAG_member, name: "target_option", scope: !751, file: !6, line: 3405, baseType: !1912, size: 384)
!1912 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_target_option", file: !6, line: 3352, size: 384, elements: !1913)
!1913 = !{!1914, !1915}
!1914 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1912, file: !6, line: 3353, baseType: !787, size: 192)
!1915 = !DIDerivedType(tag: DW_TAG_member, name: "opts", scope: !1912, file: !6, line: 3356, baseType: !1916, size: 192, offset: 192)
!1916 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cl_target_option", file: !1745, line: 578, size: 192, elements: !1917)
!1917 = !{!1918, !1919, !1920, !1921, !1922, !1923, !1924, !1925, !1926, !1927, !1928}
!1918 = !DIDerivedType(tag: DW_TAG_member, name: "ix86_isa_flags_explicit", scope: !1916, file: !1745, line: 580, baseType: !829, size: 32)
!1919 = !DIDerivedType(tag: DW_TAG_member, name: "target_flags_explicit", scope: !1916, file: !1745, line: 581, baseType: !829, size: 32, offset: 32)
!1920 = !DIDerivedType(tag: DW_TAG_member, name: "target_flags", scope: !1916, file: !1745, line: 582, baseType: !829, size: 32, offset: 64)
!1921 = !DIDerivedType(tag: DW_TAG_member, name: "ix86_isa_flags", scope: !1916, file: !1745, line: 583, baseType: !829, size: 32, offset: 96)
!1922 = !DIDerivedType(tag: DW_TAG_member, name: "arch", scope: !1916, file: !1745, line: 584, baseType: !852, size: 8, offset: 128)
!1923 = !DIDerivedType(tag: DW_TAG_member, name: "arch_specified", scope: !1916, file: !1745, line: 585, baseType: !852, size: 8, offset: 136)
!1924 = !DIDerivedType(tag: DW_TAG_member, name: "branch_cost", scope: !1916, file: !1745, line: 586, baseType: !852, size: 8, offset: 144)
!1925 = !DIDerivedType(tag: DW_TAG_member, name: "fpmath", scope: !1916, file: !1745, line: 587, baseType: !852, size: 8, offset: 152)
!1926 = !DIDerivedType(tag: DW_TAG_member, name: "schedule", scope: !1916, file: !1745, line: 588, baseType: !852, size: 8, offset: 160)
!1927 = !DIDerivedType(tag: DW_TAG_member, name: "tune", scope: !1916, file: !1745, line: 589, baseType: !852, size: 8, offset: 168)
!1928 = !DIDerivedType(tag: DW_TAG_member, name: "tune_defaulted", scope: !1916, file: !1745, line: 590, baseType: !852, size: 8, offset: 176)
!1929 = !DIDerivedType(tag: DW_TAG_member, name: "callees", scope: !745, file: !250, line: 183, baseType: !1930, size: 64, offset: 64)
!1930 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1931, size: 64)
!1931 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cgraph_edge", file: !250, line: 314, size: 768, elements: !1932)
!1932 = !{!1933, !1934, !1935, !1936, !1937, !1938, !1939, !1940, !1941, !1942, !1944, !1945, !1946, !1947, !1949, !1950, !1951}
!1933 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !1931, file: !250, line: 316, baseType: !1261, size: 64)
!1934 = !DIDerivedType(tag: DW_TAG_member, name: "caller", scope: !1931, file: !250, line: 317, baseType: !744, size: 64, offset: 64)
!1935 = !DIDerivedType(tag: DW_TAG_member, name: "callee", scope: !1931, file: !250, line: 318, baseType: !744, size: 64, offset: 128)
!1936 = !DIDerivedType(tag: DW_TAG_member, name: "prev_caller", scope: !1931, file: !250, line: 319, baseType: !1930, size: 64, offset: 192)
!1937 = !DIDerivedType(tag: DW_TAG_member, name: "next_caller", scope: !1931, file: !250, line: 320, baseType: !1930, size: 64, offset: 256)
!1938 = !DIDerivedType(tag: DW_TAG_member, name: "prev_callee", scope: !1931, file: !250, line: 321, baseType: !1930, size: 64, offset: 320)
!1939 = !DIDerivedType(tag: DW_TAG_member, name: "next_callee", scope: !1931, file: !250, line: 322, baseType: !1930, size: 64, offset: 384)
!1940 = !DIDerivedType(tag: DW_TAG_member, name: "call_stmt", scope: !1931, file: !250, line: 323, baseType: !1046, size: 64, offset: 448)
!1941 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !1931, file: !250, line: 324, baseType: !1254, size: 64, offset: 512)
!1942 = !DIDerivedType(tag: DW_TAG_member, name: "inline_failed", scope: !1931, file: !250, line: 327, baseType: !1943, size: 32, offset: 576)
!1943 = !DIDerivedType(tag: DW_TAG_typedef, name: "cgraph_inline_failed_t", file: !250, line: 312, baseType: !249)
!1944 = !DIDerivedType(tag: DW_TAG_member, name: "lto_stmt_uid", scope: !1931, file: !250, line: 330, baseType: !7, size: 32, offset: 608)
!1945 = !DIDerivedType(tag: DW_TAG_member, name: "frequency", scope: !1931, file: !250, line: 334, baseType: !829, size: 32, offset: 640)
!1946 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !1931, file: !250, line: 336, baseType: !829, size: 32, offset: 672)
!1947 = !DIDerivedType(tag: DW_TAG_member, name: "loop_nest", scope: !1931, file: !250, line: 338, baseType: !1948, size: 16, offset: 704)
!1948 = !DIBasicType(name: "unsigned short", size: 16, encoding: DW_ATE_unsigned)
!1949 = !DIDerivedType(tag: DW_TAG_member, name: "indirect_call", scope: !1931, file: !250, line: 340, baseType: !7, size: 1, offset: 720, flags: DIFlagBitField, extraData: i64 720)
!1950 = !DIDerivedType(tag: DW_TAG_member, name: "call_stmt_cannot_inline_p", scope: !1931, file: !250, line: 342, baseType: !7, size: 1, offset: 721, flags: DIFlagBitField, extraData: i64 720)
!1951 = !DIDerivedType(tag: DW_TAG_member, name: "can_throw_external", scope: !1931, file: !250, line: 344, baseType: !7, size: 1, offset: 722, flags: DIFlagBitField, extraData: i64 720)
!1952 = !DIDerivedType(tag: DW_TAG_member, name: "callers", scope: !745, file: !250, line: 184, baseType: !1930, size: 64, offset: 128)
!1953 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !745, file: !250, line: 185, baseType: !744, size: 64, offset: 192)
!1954 = !DIDerivedType(tag: DW_TAG_member, name: "previous", scope: !745, file: !250, line: 186, baseType: !744, size: 64, offset: 256)
!1955 = !DIDerivedType(tag: DW_TAG_member, name: "origin", scope: !745, file: !250, line: 188, baseType: !744, size: 64, offset: 320)
!1956 = !DIDerivedType(tag: DW_TAG_member, name: "nested", scope: !745, file: !250, line: 190, baseType: !744, size: 64, offset: 384)
!1957 = !DIDerivedType(tag: DW_TAG_member, name: "next_nested", scope: !745, file: !250, line: 192, baseType: !744, size: 64, offset: 448)
!1958 = !DIDerivedType(tag: DW_TAG_member, name: "next_needed", scope: !745, file: !250, line: 194, baseType: !744, size: 64, offset: 512)
!1959 = !DIDerivedType(tag: DW_TAG_member, name: "next_sibling_clone", scope: !745, file: !250, line: 196, baseType: !744, size: 64, offset: 576)
!1960 = !DIDerivedType(tag: DW_TAG_member, name: "prev_sibling_clone", scope: !745, file: !250, line: 197, baseType: !744, size: 64, offset: 640)
!1961 = !DIDerivedType(tag: DW_TAG_member, name: "clones", scope: !745, file: !250, line: 198, baseType: !744, size: 64, offset: 704)
!1962 = !DIDerivedType(tag: DW_TAG_member, name: "clone_of", scope: !745, file: !250, line: 199, baseType: !744, size: 64, offset: 768)
!1963 = !DIDerivedType(tag: DW_TAG_member, name: "same_body", scope: !745, file: !250, line: 202, baseType: !744, size: 64, offset: 832)
!1964 = !DIDerivedType(tag: DW_TAG_member, name: "same_comdat_group", scope: !745, file: !250, line: 204, baseType: !744, size: 64, offset: 896)
!1965 = !DIDerivedType(tag: DW_TAG_member, name: "call_site_hash", scope: !745, file: !250, line: 207, baseType: !1330, size: 64, offset: 960)
!1966 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !745, file: !250, line: 209, baseType: !1254, size: 64, offset: 1024)
!1967 = !DIDerivedType(tag: DW_TAG_member, name: "ipa_transforms_to_apply", scope: !745, file: !250, line: 214, baseType: !1968, size: 64, offset: 1088)
!1968 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1969, size: 64)
!1969 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_ipa_opt_pass_heap", file: !999, line: 177, baseType: !1970)
!1970 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_ipa_opt_pass_heap", file: !999, line: 177, size: 128, elements: !1971)
!1971 = !{!1972}
!1972 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1970, file: !999, line: 177, baseType: !1973, size: 128)
!1973 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_ipa_opt_pass_base", file: !999, line: 176, baseType: !1974)
!1974 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_ipa_opt_pass_base", file: !999, line: 176, size: 128, elements: !1975)
!1975 = !{!1976, !1977, !1978}
!1976 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1974, file: !999, line: 176, baseType: !7, size: 32)
!1977 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1974, file: !999, line: 176, baseType: !7, size: 32, offset: 32)
!1978 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1974, file: !999, line: 176, baseType: !1979, size: 64, offset: 64)
!1979 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1980, size: 64, elements: !833)
!1980 = !DIDerivedType(tag: DW_TAG_typedef, name: "ipa_opt_pass", file: !999, line: 174, baseType: !1981)
!1981 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1982, size: 64)
!1982 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ipa_opt_pass_d", file: !273, line: 173, size: 1152, elements: !1983)
!1983 = !{!1984, !2008, !2012, !2035, !2036, !2040, !2045, !2046, !2050}
!1984 = !DIDerivedType(tag: DW_TAG_member, name: "pass", scope: !1982, file: !273, line: 175, baseType: !1985, size: 640)
!1985 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "opt_pass", file: !273, line: 114, size: 640, elements: !1986)
!1986 = !{!1987, !1988, !1989, !1993, !1997, !1999, !2000, !2001, !2003, !2004, !2005, !2006, !2007}
!1987 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !1985, file: !273, line: 117, baseType: !272, size: 32)
!1988 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1985, file: !273, line: 121, baseType: !1176, size: 64, offset: 64)
!1989 = !DIDerivedType(tag: DW_TAG_member, name: "gate", scope: !1985, file: !273, line: 125, baseType: !1990, size: 64, offset: 128)
!1990 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1991, size: 64)
!1991 = !DISubroutineType(types: !1992)
!1992 = !{!852}
!1993 = !DIDerivedType(tag: DW_TAG_member, name: "execute", scope: !1985, file: !273, line: 130, baseType: !1994, size: 64, offset: 192)
!1994 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1995, size: 64)
!1995 = !DISubroutineType(types: !1996)
!1996 = !{!7}
!1997 = !DIDerivedType(tag: DW_TAG_member, name: "sub", scope: !1985, file: !273, line: 133, baseType: !1998, size: 64, offset: 256)
!1998 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1985, size: 64)
!1999 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1985, file: !273, line: 136, baseType: !1998, size: 64, offset: 320)
!2000 = !DIDerivedType(tag: DW_TAG_member, name: "static_pass_number", scope: !1985, file: !273, line: 139, baseType: !829, size: 32, offset: 384)
!2001 = !DIDerivedType(tag: DW_TAG_member, name: "tv_id", scope: !1985, file: !273, line: 143, baseType: !2002, size: 32, offset: 416)
!2002 = !DIDerivedType(tag: DW_TAG_typedef, name: "timevar_id_t", file: !280, line: 80, baseType: !279)
!2003 = !DIDerivedType(tag: DW_TAG_member, name: "properties_required", scope: !1985, file: !273, line: 146, baseType: !7, size: 32, offset: 448)
!2004 = !DIDerivedType(tag: DW_TAG_member, name: "properties_provided", scope: !1985, file: !273, line: 147, baseType: !7, size: 32, offset: 480)
!2005 = !DIDerivedType(tag: DW_TAG_member, name: "properties_destroyed", scope: !1985, file: !273, line: 148, baseType: !7, size: 32, offset: 512)
!2006 = !DIDerivedType(tag: DW_TAG_member, name: "todo_flags_start", scope: !1985, file: !273, line: 151, baseType: !7, size: 32, offset: 544)
!2007 = !DIDerivedType(tag: DW_TAG_member, name: "todo_flags_finish", scope: !1985, file: !273, line: 152, baseType: !7, size: 32, offset: 576)
!2008 = !DIDerivedType(tag: DW_TAG_member, name: "generate_summary", scope: !1982, file: !273, line: 179, baseType: !2009, size: 64, offset: 640)
!2009 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2010, size: 64)
!2010 = !DISubroutineType(types: !2011)
!2011 = !{null}
!2012 = !DIDerivedType(tag: DW_TAG_member, name: "write_summary", scope: !1982, file: !273, line: 182, baseType: !2013, size: 64, offset: 704)
!2013 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2014, size: 64)
!2014 = !DISubroutineType(types: !2015)
!2015 = !{null, !2016}
!2016 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2017, size: 64)
!2017 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cgraph_node_set_def", file: !250, line: 276, size: 192, elements: !2018)
!2018 = !{!2019, !2020, !2034}
!2019 = !DIDerivedType(tag: DW_TAG_member, name: "hashtab", scope: !2017, file: !250, line: 278, baseType: !1330, size: 64)
!2020 = !DIDerivedType(tag: DW_TAG_member, name: "nodes", scope: !2017, file: !250, line: 279, baseType: !2021, size: 64, offset: 64)
!2021 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2022, size: 64)
!2022 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_cgraph_node_ptr_gc", file: !250, line: 272, baseType: !2023)
!2023 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_cgraph_node_ptr_gc", file: !250, line: 272, size: 128, elements: !2024)
!2024 = !{!2025}
!2025 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2023, file: !250, line: 272, baseType: !2026, size: 128)
!2026 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_cgraph_node_ptr_base", file: !250, line: 270, baseType: !2027)
!2027 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_cgraph_node_ptr_base", file: !250, line: 270, size: 128, elements: !2028)
!2028 = !{!2029, !2030, !2031}
!2029 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2027, file: !250, line: 270, baseType: !7, size: 32)
!2030 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2027, file: !250, line: 270, baseType: !7, size: 32, offset: 32)
!2031 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2027, file: !250, line: 270, baseType: !2032, size: 64, offset: 64)
!2032 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2033, size: 64, elements: !833)
!2033 = !DIDerivedType(tag: DW_TAG_typedef, name: "cgraph_node_ptr", file: !250, line: 268, baseType: !744)
!2034 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !2017, file: !250, line: 280, baseType: !1254, size: 64, offset: 128)
!2035 = !DIDerivedType(tag: DW_TAG_member, name: "read_summary", scope: !1982, file: !273, line: 187, baseType: !2009, size: 64, offset: 768)
!2036 = !DIDerivedType(tag: DW_TAG_member, name: "function_read_summary", scope: !1982, file: !273, line: 188, baseType: !2037, size: 64, offset: 832)
!2037 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2038, size: 64)
!2038 = !DISubroutineType(types: !2039)
!2039 = !{null, !744}
!2040 = !DIDerivedType(tag: DW_TAG_member, name: "stmt_fixup", scope: !1982, file: !273, line: 191, baseType: !2041, size: 64, offset: 896)
!2041 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2042, size: 64)
!2042 = !DISubroutineType(types: !2043)
!2043 = !{null, !744, !2044}
!2044 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1046, size: 64)
!2045 = !DIDerivedType(tag: DW_TAG_member, name: "function_transform_todo_flags_start", scope: !1982, file: !273, line: 195, baseType: !7, size: 32, offset: 960)
!2046 = !DIDerivedType(tag: DW_TAG_member, name: "function_transform", scope: !1982, file: !273, line: 196, baseType: !2047, size: 64, offset: 1024)
!2047 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2048, size: 64)
!2048 = !DISubroutineType(types: !2049)
!2049 = !{!7, !744}
!2050 = !DIDerivedType(tag: DW_TAG_member, name: "variable_transform", scope: !1982, file: !273, line: 197, baseType: !2051, size: 64, offset: 1088)
!2051 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2052, size: 64)
!2052 = !DISubroutineType(types: !2053)
!2053 = !{null, !2054}
!2054 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2055, size: 64)
!2055 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "varpool_node", file: !250, line: 358, size: 320, elements: !2056)
!2056 = !{!2057, !2058, !2059, !2060, !2061, !2062, !2063, !2064, !2065, !2066, !2067, !2068}
!2057 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !2055, file: !250, line: 359, baseType: !748, size: 64)
!2058 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2055, file: !250, line: 361, baseType: !2054, size: 64, offset: 64)
!2059 = !DIDerivedType(tag: DW_TAG_member, name: "next_needed", scope: !2055, file: !250, line: 363, baseType: !2054, size: 64, offset: 128)
!2060 = !DIDerivedType(tag: DW_TAG_member, name: "extra_name", scope: !2055, file: !250, line: 366, baseType: !2054, size: 64, offset: 192)
!2061 = !DIDerivedType(tag: DW_TAG_member, name: "order", scope: !2055, file: !250, line: 368, baseType: !829, size: 32, offset: 256)
!2062 = !DIDerivedType(tag: DW_TAG_member, name: "needed", scope: !2055, file: !250, line: 372, baseType: !7, size: 1, offset: 288, flags: DIFlagBitField, extraData: i64 288)
!2063 = !DIDerivedType(tag: DW_TAG_member, name: "force_output", scope: !2055, file: !250, line: 375, baseType: !7, size: 1, offset: 289, flags: DIFlagBitField, extraData: i64 288)
!2064 = !DIDerivedType(tag: DW_TAG_member, name: "analyzed", scope: !2055, file: !250, line: 378, baseType: !7, size: 1, offset: 290, flags: DIFlagBitField, extraData: i64 288)
!2065 = !DIDerivedType(tag: DW_TAG_member, name: "finalized", scope: !2055, file: !250, line: 380, baseType: !7, size: 1, offset: 291, flags: DIFlagBitField, extraData: i64 288)
!2066 = !DIDerivedType(tag: DW_TAG_member, name: "output", scope: !2055, file: !250, line: 382, baseType: !7, size: 1, offset: 292, flags: DIFlagBitField, extraData: i64 288)
!2067 = !DIDerivedType(tag: DW_TAG_member, name: "externally_visible", scope: !2055, file: !250, line: 384, baseType: !7, size: 1, offset: 293, flags: DIFlagBitField, extraData: i64 288)
!2068 = !DIDerivedType(tag: DW_TAG_member, name: "alias", scope: !2055, file: !250, line: 387, baseType: !7, size: 1, offset: 294, flags: DIFlagBitField, extraData: i64 288)
!2069 = !DIDerivedType(tag: DW_TAG_member, name: "local", scope: !745, file: !250, line: 216, baseType: !2070, size: 320, offset: 1152)
!2070 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cgraph_local_info", file: !250, line: 88, size: 320, elements: !2071)
!2071 = !{!2072, !2107, !2115, !2116, !2117, !2118, !2119, !2120, !2121, !2122}
!2072 = !DIDerivedType(tag: DW_TAG_member, name: "lto_file_data", scope: !2070, file: !250, line: 90, baseType: !2073, size: 64)
!2073 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2074, size: 64)
!2074 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "lto_file_decl_data", file: !613, line: 540, size: 512, elements: !2075)
!2075 = !{!2076, !2089, !2090, !2102, !2103, !2104, !2105, !2106}
!2076 = !DIDerivedType(tag: DW_TAG_member, name: "current_decl_state", scope: !2074, file: !613, line: 543, baseType: !2077, size: 64)
!2077 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2078, size: 64)
!2078 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "lto_in_decl_state", file: !613, line: 502, size: 960, elements: !2079)
!2079 = !{!2080, !2088}
!2080 = !DIDerivedType(tag: DW_TAG_member, name: "streams", scope: !2078, file: !613, line: 505, baseType: !2081, size: 896)
!2081 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2082, size: 896, elements: !2086)
!2082 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "lto_tree_ref_table", file: !613, line: 473, size: 128, elements: !2083)
!2083 = !{!2084, !2085}
!2084 = !DIDerivedType(tag: DW_TAG_member, name: "trees", scope: !2082, file: !613, line: 476, baseType: !1081, size: 64)
!2085 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2082, file: !613, line: 479, baseType: !7, size: 32, offset: 64)
!2086 = !{!2087}
!2087 = !DISubrange(count: 7)
!2088 = !DIDerivedType(tag: DW_TAG_member, name: "fn_decl", scope: !2078, file: !613, line: 509, baseType: !748, size: 64, offset: 896)
!2089 = !DIDerivedType(tag: DW_TAG_member, name: "global_decl_state", scope: !2074, file: !613, line: 547, baseType: !2077, size: 64, offset: 64)
!2090 = !DIDerivedType(tag: DW_TAG_member, name: "cgraph_node_encoder", scope: !2074, file: !613, line: 550, baseType: !2091, size: 64, offset: 128)
!2091 = !DIDerivedType(tag: DW_TAG_typedef, name: "lto_cgraph_encoder_t", file: !613, line: 470, baseType: !2092)
!2092 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2093, size: 64)
!2093 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "lto_cgraph_encoder_d", file: !613, line: 461, size: 128, elements: !2094)
!2094 = !{!2095, !2096}
!2095 = !DIDerivedType(tag: DW_TAG_member, name: "map", scope: !2093, file: !613, line: 464, baseType: !1477, size: 64)
!2096 = !DIDerivedType(tag: DW_TAG_member, name: "nodes", scope: !2093, file: !613, line: 467, baseType: !2097, size: 64, offset: 64)
!2097 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2098, size: 64)
!2098 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_cgraph_node_ptr_heap", file: !250, line: 271, baseType: !2099)
!2099 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_cgraph_node_ptr_heap", file: !250, line: 271, size: 128, elements: !2100)
!2100 = !{!2101}
!2101 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2099, file: !250, line: 271, baseType: !2026, size: 128)
!2102 = !DIDerivedType(tag: DW_TAG_member, name: "function_decl_states", scope: !2074, file: !613, line: 553, baseType: !1330, size: 64, offset: 192)
!2103 = !DIDerivedType(tag: DW_TAG_member, name: "file_name", scope: !2074, file: !613, line: 556, baseType: !1176, size: 64, offset: 256)
!2104 = !DIDerivedType(tag: DW_TAG_member, name: "needs_ltrans_p", scope: !2074, file: !613, line: 559, baseType: !7, size: 1, offset: 320, flags: DIFlagBitField, extraData: i64 320)
!2105 = !DIDerivedType(tag: DW_TAG_member, name: "section_hash_table", scope: !2074, file: !613, line: 562, baseType: !1330, size: 64, offset: 384)
!2106 = !DIDerivedType(tag: DW_TAG_member, name: "renaming_hash_table", scope: !2074, file: !613, line: 565, baseType: !1330, size: 64, offset: 448)
!2107 = !DIDerivedType(tag: DW_TAG_member, name: "inline_summary", scope: !2070, file: !250, line: 92, baseType: !2108, size: 192, offset: 64)
!2108 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "inline_summary", file: !250, line: 57, size: 192, elements: !2109)
!2109 = !{!2110, !2111, !2112, !2113, !2114}
!2110 = !DIDerivedType(tag: DW_TAG_member, name: "estimated_self_stack_size", scope: !2108, file: !250, line: 60, baseType: !804, size: 64)
!2111 = !DIDerivedType(tag: DW_TAG_member, name: "self_size", scope: !2108, file: !250, line: 63, baseType: !829, size: 32, offset: 64)
!2112 = !DIDerivedType(tag: DW_TAG_member, name: "size_inlining_benefit", scope: !2108, file: !250, line: 65, baseType: !829, size: 32, offset: 96)
!2113 = !DIDerivedType(tag: DW_TAG_member, name: "self_time", scope: !2108, file: !250, line: 67, baseType: !829, size: 32, offset: 128)
!2114 = !DIDerivedType(tag: DW_TAG_member, name: "time_inlining_benefit", scope: !2108, file: !250, line: 69, baseType: !829, size: 32, offset: 160)
!2115 = !DIDerivedType(tag: DW_TAG_member, name: "local", scope: !2070, file: !250, line: 96, baseType: !7, size: 1, offset: 256, flags: DIFlagBitField, extraData: i64 256)
!2116 = !DIDerivedType(tag: DW_TAG_member, name: "externally_visible", scope: !2070, file: !250, line: 99, baseType: !7, size: 1, offset: 257, flags: DIFlagBitField, extraData: i64 256)
!2117 = !DIDerivedType(tag: DW_TAG_member, name: "finalized", scope: !2070, file: !250, line: 102, baseType: !7, size: 1, offset: 258, flags: DIFlagBitField, extraData: i64 256)
!2118 = !DIDerivedType(tag: DW_TAG_member, name: "inlinable", scope: !2070, file: !250, line: 105, baseType: !7, size: 1, offset: 259, flags: DIFlagBitField, extraData: i64 256)
!2119 = !DIDerivedType(tag: DW_TAG_member, name: "disregard_inline_limits", scope: !2070, file: !250, line: 108, baseType: !7, size: 1, offset: 260, flags: DIFlagBitField, extraData: i64 256)
!2120 = !DIDerivedType(tag: DW_TAG_member, name: "redefined_extern_inline", scope: !2070, file: !250, line: 112, baseType: !7, size: 1, offset: 261, flags: DIFlagBitField, extraData: i64 256)
!2121 = !DIDerivedType(tag: DW_TAG_member, name: "for_functions_valid", scope: !2070, file: !250, line: 116, baseType: !7, size: 1, offset: 262, flags: DIFlagBitField, extraData: i64 256)
!2122 = !DIDerivedType(tag: DW_TAG_member, name: "vtable_method", scope: !2070, file: !250, line: 120, baseType: !7, size: 1, offset: 263, flags: DIFlagBitField, extraData: i64 256)
!2123 = !DIDerivedType(tag: DW_TAG_member, name: "global", scope: !745, file: !250, line: 217, baseType: !2124, size: 320, offset: 1472)
!2124 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cgraph_global_info", file: !250, line: 126, size: 320, elements: !2125)
!2125 = !{!2126, !2127, !2128, !2129, !2130, !2131, !2132}
!2126 = !DIDerivedType(tag: DW_TAG_member, name: "estimated_stack_size", scope: !2124, file: !250, line: 128, baseType: !804, size: 64)
!2127 = !DIDerivedType(tag: DW_TAG_member, name: "stack_frame_offset", scope: !2124, file: !250, line: 130, baseType: !804, size: 64, offset: 64)
!2128 = !DIDerivedType(tag: DW_TAG_member, name: "inlined_to", scope: !2124, file: !250, line: 134, baseType: !744, size: 64, offset: 128)
!2129 = !DIDerivedType(tag: DW_TAG_member, name: "time", scope: !2124, file: !250, line: 137, baseType: !829, size: 32, offset: 192)
!2130 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2124, file: !250, line: 138, baseType: !829, size: 32, offset: 224)
!2131 = !DIDerivedType(tag: DW_TAG_member, name: "estimated_growth", scope: !2124, file: !250, line: 141, baseType: !829, size: 32, offset: 256)
!2132 = !DIDerivedType(tag: DW_TAG_member, name: "inlined", scope: !2124, file: !250, line: 144, baseType: !852, size: 8, offset: 288)
!2133 = !DIDerivedType(tag: DW_TAG_member, name: "rtl", scope: !745, file: !250, line: 218, baseType: !2134, size: 32, offset: 1792)
!2134 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cgraph_rtl_info", file: !250, line: 150, size: 32, elements: !2135)
!2135 = !{!2136}
!2136 = !DIDerivedType(tag: DW_TAG_member, name: "preferred_incoming_stack_boundary", scope: !2134, file: !250, line: 151, baseType: !7, size: 32)
!2137 = !DIDerivedType(tag: DW_TAG_member, name: "clone", scope: !745, file: !250, line: 219, baseType: !2138, size: 192, offset: 1856)
!2138 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cgraph_clone_info", file: !250, line: 171, size: 192, elements: !2139)
!2139 = !{!2140, !2161, !2162}
!2140 = !DIDerivedType(tag: DW_TAG_member, name: "tree_map", scope: !2138, file: !250, line: 173, baseType: !2141, size: 64)
!2141 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2142, size: 64)
!2142 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_ipa_replace_map_p_gc", file: !250, line: 169, baseType: !2143)
!2143 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_ipa_replace_map_p_gc", file: !250, line: 169, size: 128, elements: !2144)
!2144 = !{!2145}
!2145 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2143, file: !250, line: 169, baseType: !2146, size: 128)
!2146 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_ipa_replace_map_p_base", file: !250, line: 168, baseType: !2147)
!2147 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_ipa_replace_map_p_base", file: !250, line: 168, size: 128, elements: !2148)
!2148 = !{!2149, !2150, !2151}
!2149 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2147, file: !250, line: 168, baseType: !7, size: 32)
!2150 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2147, file: !250, line: 168, baseType: !7, size: 32, offset: 32)
!2151 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2147, file: !250, line: 168, baseType: !2152, size: 64, offset: 64)
!2152 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2153, size: 64, elements: !833)
!2153 = !DIDerivedType(tag: DW_TAG_typedef, name: "ipa_replace_map_p", file: !250, line: 167, baseType: !2154)
!2154 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2155, size: 64)
!2155 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ipa_replace_map", file: !250, line: 156, size: 192, elements: !2156)
!2156 = !{!2157, !2158, !2159, !2160}
!2157 = !DIDerivedType(tag: DW_TAG_member, name: "old_tree", scope: !2155, file: !250, line: 159, baseType: !748, size: 64)
!2158 = !DIDerivedType(tag: DW_TAG_member, name: "new_tree", scope: !2155, file: !250, line: 161, baseType: !748, size: 64, offset: 64)
!2159 = !DIDerivedType(tag: DW_TAG_member, name: "replace_p", scope: !2155, file: !250, line: 163, baseType: !852, size: 8, offset: 128)
!2160 = !DIDerivedType(tag: DW_TAG_member, name: "ref_p", scope: !2155, file: !250, line: 165, baseType: !852, size: 8, offset: 136)
!2161 = !DIDerivedType(tag: DW_TAG_member, name: "args_to_skip", scope: !2138, file: !250, line: 174, baseType: !1416, size: 64, offset: 64)
!2162 = !DIDerivedType(tag: DW_TAG_member, name: "combined_args_to_skip", scope: !2138, file: !250, line: 175, baseType: !1416, size: 64, offset: 128)
!2163 = !DIDerivedType(tag: DW_TAG_member, name: "thunk", scope: !745, file: !250, line: 220, baseType: !2164, size: 256, offset: 2048)
!2164 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cgraph_thunk_info", file: !250, line: 74, size: 256, elements: !2165)
!2165 = !{!2166, !2167, !2168, !2169, !2170, !2171}
!2166 = !DIDerivedType(tag: DW_TAG_member, name: "fixed_offset", scope: !2164, file: !250, line: 76, baseType: !804, size: 64)
!2167 = !DIDerivedType(tag: DW_TAG_member, name: "virtual_value", scope: !2164, file: !250, line: 77, baseType: !804, size: 64, offset: 64)
!2168 = !DIDerivedType(tag: DW_TAG_member, name: "alias", scope: !2164, file: !250, line: 78, baseType: !748, size: 64, offset: 128)
!2169 = !DIDerivedType(tag: DW_TAG_member, name: "this_adjusting", scope: !2164, file: !250, line: 79, baseType: !852, size: 8, offset: 192)
!2170 = !DIDerivedType(tag: DW_TAG_member, name: "virtual_offset_p", scope: !2164, file: !250, line: 80, baseType: !852, size: 8, offset: 200)
!2171 = !DIDerivedType(tag: DW_TAG_member, name: "thunk_p", scope: !2164, file: !250, line: 82, baseType: !852, size: 8, offset: 208)
!2172 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !745, file: !250, line: 223, baseType: !1261, size: 64, offset: 2304)
!2173 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !745, file: !250, line: 225, baseType: !829, size: 32, offset: 2368)
!2174 = !DIDerivedType(tag: DW_TAG_member, name: "order", scope: !745, file: !250, line: 227, baseType: !829, size: 32, offset: 2400)
!2175 = !DIDerivedType(tag: DW_TAG_member, name: "pid", scope: !745, file: !250, line: 231, baseType: !829, size: 32, offset: 2432)
!2176 = !DIDerivedType(tag: DW_TAG_member, name: "needed", scope: !745, file: !250, line: 238, baseType: !7, size: 1, offset: 2464, flags: DIFlagBitField, extraData: i64 2464)
!2177 = !DIDerivedType(tag: DW_TAG_member, name: "address_taken", scope: !745, file: !250, line: 241, baseType: !7, size: 1, offset: 2465, flags: DIFlagBitField, extraData: i64 2464)
!2178 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_and_needed", scope: !745, file: !250, line: 244, baseType: !7, size: 1, offset: 2466, flags: DIFlagBitField, extraData: i64 2464)
!2179 = !DIDerivedType(tag: DW_TAG_member, name: "reachable", scope: !745, file: !250, line: 251, baseType: !7, size: 1, offset: 2467, flags: DIFlagBitField, extraData: i64 2464)
!2180 = !DIDerivedType(tag: DW_TAG_member, name: "lowered", scope: !745, file: !250, line: 253, baseType: !7, size: 1, offset: 2468, flags: DIFlagBitField, extraData: i64 2464)
!2181 = !DIDerivedType(tag: DW_TAG_member, name: "analyzed", scope: !745, file: !250, line: 256, baseType: !7, size: 1, offset: 2469, flags: DIFlagBitField, extraData: i64 2464)
!2182 = !DIDerivedType(tag: DW_TAG_member, name: "process", scope: !745, file: !250, line: 258, baseType: !7, size: 1, offset: 2470, flags: DIFlagBitField, extraData: i64 2464)
!2183 = !DIDerivedType(tag: DW_TAG_member, name: "alias", scope: !745, file: !250, line: 260, baseType: !7, size: 1, offset: 2471, flags: DIFlagBitField, extraData: i64 2464)
!2184 = !DIDerivedType(tag: DW_TAG_member, name: "finalized_by_frontend", scope: !745, file: !250, line: 262, baseType: !7, size: 1, offset: 2472, flags: DIFlagBitField, extraData: i64 2464)
!2185 = !DIDerivedType(tag: DW_TAG_member, name: "same_body_alias", scope: !745, file: !250, line: 265, baseType: !7, size: 1, offset: 2473, flags: DIFlagBitField, extraData: i64 2464)
!2186 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !741, file: !456, line: 393, baseType: !740, size: 64, offset: 64)
!2187 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2188, size: 64)
!2188 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ipa_param_descriptor", file: !456, line: 165, size: 256, elements: !2189)
!2189 = !{!2190, !2195, !2196}
!2190 = !DIDerivedType(tag: DW_TAG_member, name: "ipcp_lattice", scope: !2188, file: !456, line: 168, baseType: !2191, size: 128)
!2191 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ipcp_lattice", file: !456, line: 132, size: 128, elements: !2192)
!2192 = !{!2193, !2194}
!2193 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !2191, file: !456, line: 134, baseType: !455, size: 32)
!2194 = !DIDerivedType(tag: DW_TAG_member, name: "constant", scope: !2191, file: !456, line: 135, baseType: !748, size: 64, offset: 64)
!2195 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !2188, file: !456, line: 170, baseType: !748, size: 64, offset: 128)
!2196 = !DIDerivedType(tag: DW_TAG_member, name: "modified", scope: !2188, file: !456, line: 172, baseType: !7, size: 1, offset: 192, flags: DIFlagBitField, extraData: i64 192)
!2197 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2198, size: 64)
!2198 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ipa_jump_func", file: !456, line: 114, size: 256, elements: !2199)
!2199 = !{!2200, !2201}
!2200 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !2198, file: !456, line: 116, baseType: !461, size: 32)
!2201 = !DIDerivedType(tag: DW_TAG_member, name: "value", scope: !2198, file: !456, line: 126, baseType: !2202, size: 192, offset: 64)
!2202 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "jump_func_value", file: !456, line: 120, size: 192, elements: !2203)
!2203 = !{!2204, !2205, !2211, !2217}
!2204 = !DIDerivedType(tag: DW_TAG_member, name: "constant", scope: !2202, file: !456, line: 122, baseType: !748, size: 64)
!2205 = !DIDerivedType(tag: DW_TAG_member, name: "pass_through", scope: !2202, file: !456, line: 123, baseType: !2206, size: 128)
!2206 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ipa_pass_through_data", file: !456, line: 76, size: 128, elements: !2207)
!2207 = !{!2208, !2209, !2210}
!2208 = !DIDerivedType(tag: DW_TAG_member, name: "operand", scope: !2206, file: !456, line: 80, baseType: !748, size: 64)
!2209 = !DIDerivedType(tag: DW_TAG_member, name: "formal_id", scope: !2206, file: !456, line: 82, baseType: !829, size: 32, offset: 64)
!2210 = !DIDerivedType(tag: DW_TAG_member, name: "operation", scope: !2206, file: !456, line: 87, baseType: !5, size: 32, offset: 96)
!2211 = !DIDerivedType(tag: DW_TAG_member, name: "ancestor", scope: !2202, file: !456, line: 124, baseType: !2212, size: 192)
!2212 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ipa_ancestor_jf_data", file: !456, line: 93, size: 192, elements: !2213)
!2213 = !{!2214, !2215, !2216}
!2214 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2212, file: !456, line: 96, baseType: !804, size: 64)
!2215 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !2212, file: !456, line: 98, baseType: !748, size: 64, offset: 64)
!2216 = !DIDerivedType(tag: DW_TAG_member, name: "formal_id", scope: !2212, file: !456, line: 100, baseType: !829, size: 32, offset: 128)
!2217 = !DIDerivedType(tag: DW_TAG_member, name: "member_cst", scope: !2202, file: !456, line: 125, baseType: !2218, size: 128)
!2218 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ipa_member_ptr_cst", file: !456, line: 105, size: 128, elements: !2219)
!2219 = !{!2220, !2221}
!2220 = !DIDerivedType(tag: DW_TAG_member, name: "pfn", scope: !2218, file: !456, line: 107, baseType: !748, size: 64)
!2221 = !DIDerivedType(tag: DW_TAG_member, name: "delta", scope: !2218, file: !456, line: 108, baseType: !748, size: 64, offset: 64)
!2222 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2223, size: 64)
!2223 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ipa_node_params", file: !456, line: 178, size: 384, elements: !2224)
!2224 = !{!2225, !2226, !2227, !2239, !2240, !2241, !2242, !2243, !2244}
!2225 = !DIDerivedType(tag: DW_TAG_member, name: "param_count", scope: !2223, file: !456, line: 183, baseType: !829, size: 32)
!2226 = !DIDerivedType(tag: DW_TAG_member, name: "params", scope: !2223, file: !456, line: 186, baseType: !2187, size: 64, offset: 64)
!2227 = !DIDerivedType(tag: DW_TAG_member, name: "param_calls", scope: !2223, file: !456, line: 188, baseType: !2228, size: 64, offset: 128)
!2228 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2229, size: 64)
!2229 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ipa_param_call_note", file: !456, line: 141, size: 320, elements: !2230)
!2230 = !{!2231, !2232, !2233, !2234, !2235, !2236, !2237, !2238}
!2231 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !2229, file: !456, line: 144, baseType: !1261, size: 64)
!2232 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2229, file: !456, line: 146, baseType: !2228, size: 64, offset: 64)
!2233 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !2229, file: !456, line: 148, baseType: !1046, size: 64, offset: 128)
!2234 = !DIDerivedType(tag: DW_TAG_member, name: "lto_stmt_uid", scope: !2229, file: !456, line: 150, baseType: !7, size: 32, offset: 192)
!2235 = !DIDerivedType(tag: DW_TAG_member, name: "formal_id", scope: !2229, file: !456, line: 152, baseType: !829, size: 32, offset: 224)
!2236 = !DIDerivedType(tag: DW_TAG_member, name: "frequency", scope: !2229, file: !456, line: 155, baseType: !829, size: 32, offset: 256)
!2237 = !DIDerivedType(tag: DW_TAG_member, name: "loop_nest", scope: !2229, file: !456, line: 157, baseType: !1948, size: 16, offset: 288)
!2238 = !DIDerivedType(tag: DW_TAG_member, name: "processed", scope: !2229, file: !456, line: 161, baseType: !852, size: 8, offset: 304)
!2239 = !DIDerivedType(tag: DW_TAG_member, name: "ipcp_orig_node", scope: !2223, file: !456, line: 191, baseType: !744, size: 64, offset: 192)
!2240 = !DIDerivedType(tag: DW_TAG_member, name: "count_scale", scope: !2223, file: !456, line: 197, baseType: !1261, size: 64, offset: 256)
!2241 = !DIDerivedType(tag: DW_TAG_member, name: "called_with_var_arguments", scope: !2223, file: !456, line: 201, baseType: !7, size: 1, offset: 320, flags: DIFlagBitField, extraData: i64 320)
!2242 = !DIDerivedType(tag: DW_TAG_member, name: "modification_analysis_done", scope: !2223, file: !456, line: 203, baseType: !7, size: 1, offset: 321, flags: DIFlagBitField, extraData: i64 320)
!2243 = !DIDerivedType(tag: DW_TAG_member, name: "uses_analysis_done", scope: !2223, file: !456, line: 205, baseType: !7, size: 1, offset: 322, flags: DIFlagBitField, extraData: i64 320)
!2244 = !DIDerivedType(tag: DW_TAG_member, name: "node_enqueued", scope: !2223, file: !456, line: 207, baseType: !7, size: 1, offset: 323, flags: DIFlagBitField, extraData: i64 320)
!2245 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2246, size: 64)
!2246 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_ipa_edge_args_t_gc", file: !456, line: 317, baseType: !2247)
!2247 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_ipa_edge_args_t_gc", file: !456, line: 317, size: 192, elements: !2248)
!2248 = !{!2249}
!2249 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2247, file: !456, line: 317, baseType: !2250, size: 192)
!2250 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_ipa_edge_args_t_base", file: !456, line: 316, baseType: !2251)
!2251 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_ipa_edge_args_t_base", file: !456, line: 316, size: 192, elements: !2252)
!2252 = !{!2253, !2254, !2255}
!2253 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2251, file: !456, line: 316, baseType: !7, size: 32)
!2254 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2251, file: !456, line: 316, baseType: !7, size: 32, offset: 32)
!2255 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2251, file: !456, line: 316, baseType: !2256, size: 128, offset: 64)
!2256 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2257, size: 128, elements: !833)
!2257 = !DIDerivedType(tag: DW_TAG_typedef, name: "ipa_edge_args_t", file: !456, line: 279, baseType: !2258)
!2258 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ipa_edge_args", file: !456, line: 271, size: 128, elements: !2259)
!2259 = !{!2260, !2261}
!2260 = !DIDerivedType(tag: DW_TAG_member, name: "argument_count", scope: !2258, file: !456, line: 276, baseType: !829, size: 32)
!2261 = !DIDerivedType(tag: DW_TAG_member, name: "jump_functions", scope: !2258, file: !456, line: 278, baseType: !2197, size: 64, offset: 64)
!2262 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2263, size: 64)
!2263 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1048)
!2264 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2265, size: 64)
!2265 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_cgraph_edge_p_heap", file: !250, line: 353, baseType: !2266)
!2266 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_cgraph_edge_p_heap", file: !250, line: 353, size: 128, elements: !2267)
!2267 = !{!2268}
!2268 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2266, file: !250, line: 353, baseType: !2269, size: 128)
!2269 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_cgraph_edge_p_base", file: !250, line: 352, baseType: !2270)
!2270 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_cgraph_edge_p_base", file: !250, line: 352, size: 128, elements: !2271)
!2271 = !{!2272, !2273, !2274}
!2272 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2270, file: !250, line: 352, baseType: !7, size: 32)
!2273 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2270, file: !250, line: 352, baseType: !7, size: 32, offset: 32)
!2274 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2270, file: !250, line: 352, baseType: !2275, size: 64, offset: 64)
!2275 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2276, size: 64, elements: !833)
!2276 = !DIDerivedType(tag: DW_TAG_typedef, name: "cgraph_edge_p", file: !250, line: 350, baseType: !1930)
!2277 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2278, size: 64)
!2278 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_heap", file: !6, line: 184, baseType: !2279)
!2279 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_heap", file: !6, line: 184, size: 128, elements: !2280)
!2280 = !{!2281}
!2281 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2279, file: !6, line: 184, baseType: !1398, size: 128)
!2282 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2283, size: 64)
!2283 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_ipa_parm_adjustment_t_heap", file: !456, line: 485, baseType: !2284)
!2284 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_ipa_parm_adjustment_t_heap", file: !456, line: 485, size: 512, elements: !2285)
!2285 = !{!2286}
!2286 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2284, file: !456, line: 485, baseType: !2287, size: 512)
!2287 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_ipa_parm_adjustment_t_base", file: !456, line: 484, baseType: !2288)
!2288 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_ipa_parm_adjustment_t_base", file: !456, line: 484, size: 512, elements: !2289)
!2289 = !{!2290, !2291, !2292}
!2290 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2288, file: !456, line: 484, baseType: !7, size: 32)
!2291 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2288, file: !456, line: 484, baseType: !7, size: 32, offset: 32)
!2292 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2288, file: !456, line: 484, baseType: !2293, size: 448, offset: 64)
!2293 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2294, size: 448, elements: !833)
!2294 = !DIDerivedType(tag: DW_TAG_typedef, name: "ipa_parm_adjustment_t", file: !456, line: 483, baseType: !2295)
!2295 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ipa_parm_adjustment", file: !456, line: 436, size: 448, elements: !2296)
!2296 = !{!2297, !2298, !2299, !2300, !2301, !2302, !2303, !2304, !2305, !2306}
!2297 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2295, file: !456, line: 443, baseType: !748, size: 64)
!2298 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !2295, file: !456, line: 447, baseType: !748, size: 64, offset: 64)
!2299 = !DIDerivedType(tag: DW_TAG_member, name: "reduction", scope: !2295, file: !456, line: 452, baseType: !748, size: 64, offset: 128)
!2300 = !DIDerivedType(tag: DW_TAG_member, name: "new_ssa_base", scope: !2295, file: !456, line: 456, baseType: !748, size: 64, offset: 192)
!2301 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal_value", scope: !2295, file: !456, line: 460, baseType: !748, size: 64, offset: 256)
!2302 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2295, file: !456, line: 464, baseType: !804, size: 64, offset: 320)
!2303 = !DIDerivedType(tag: DW_TAG_member, name: "base_index", scope: !2295, file: !456, line: 469, baseType: !829, size: 32, offset: 384)
!2304 = !DIDerivedType(tag: DW_TAG_member, name: "copy_param", scope: !2295, file: !456, line: 472, baseType: !7, size: 1, offset: 416, flags: DIFlagBitField, extraData: i64 416)
!2305 = !DIDerivedType(tag: DW_TAG_member, name: "remove_param", scope: !2295, file: !456, line: 477, baseType: !7, size: 1, offset: 417, flags: DIFlagBitField, extraData: i64 416)
!2306 = !DIDerivedType(tag: DW_TAG_member, name: "by_ref", scope: !2295, file: !456, line: 480, baseType: !7, size: 1, offset: 418, flags: DIFlagBitField, extraData: i64 416)
!2307 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2308, size: 64)
!2308 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_ipa_node_params_t_heap", file: !456, line: 315, baseType: !2309)
!2309 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_ipa_node_params_t_heap", file: !456, line: 315, size: 448, elements: !2310)
!2310 = !{!2311}
!2311 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2309, file: !456, line: 315, baseType: !2312, size: 448)
!2312 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_ipa_node_params_t_base", file: !456, line: 314, baseType: !2313)
!2313 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_ipa_node_params_t_base", file: !456, line: 314, size: 448, elements: !2314)
!2314 = !{!2315, !2316, !2317}
!2315 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2313, file: !456, line: 314, baseType: !7, size: 32)
!2316 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2313, file: !456, line: 314, baseType: !7, size: 32, offset: 32)
!2317 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2313, file: !456, line: 314, baseType: !2318, size: 384, offset: 64)
!2318 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2319, size: 384, elements: !833)
!2319 = !DIDerivedType(tag: DW_TAG_typedef, name: "ipa_node_params_t", file: !456, line: 311, baseType: !2223)
!2320 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2321, size: 64)
!2321 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2322)
!2322 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "lto_function_header", file: !613, line: 395, size: 288, elements: !2323)
!2323 = !{!2324, !2335, !2338, !2339, !2340, !2341, !2342, !2343}
!2324 = !DIDerivedType(tag: DW_TAG_member, name: "lto_header", scope: !2322, file: !613, line: 398, baseType: !2325, size: 64)
!2325 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "lto_header", file: !613, line: 387, size: 64, elements: !2326)
!2326 = !{!2327, !2333, !2334}
!2327 = !DIDerivedType(tag: DW_TAG_member, name: "major_version", scope: !2325, file: !613, line: 389, baseType: !2328, size: 16)
!2328 = !DIDerivedType(tag: DW_TAG_typedef, name: "int16_t", file: !2329, line: 25, baseType: !2330)
!2329 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/stdint-intn.h", directory: "")
!2330 = !DIDerivedType(tag: DW_TAG_typedef, name: "__int16_t", file: !2331, line: 39, baseType: !2332)
!2331 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types.h", directory: "")
!2332 = !DIBasicType(name: "short", size: 16, encoding: DW_ATE_signed)
!2333 = !DIDerivedType(tag: DW_TAG_member, name: "minor_version", scope: !2325, file: !613, line: 390, baseType: !2328, size: 16, offset: 16)
!2334 = !DIDerivedType(tag: DW_TAG_member, name: "section_type", scope: !2325, file: !613, line: 391, baseType: !612, size: 32, offset: 32)
!2335 = !DIDerivedType(tag: DW_TAG_member, name: "num_named_labels", scope: !2322, file: !613, line: 401, baseType: !2336, size: 32, offset: 64)
!2336 = !DIDerivedType(tag: DW_TAG_typedef, name: "int32_t", file: !2329, line: 26, baseType: !2337)
!2337 = !DIDerivedType(tag: DW_TAG_typedef, name: "__int32_t", file: !2331, line: 41, baseType: !829)
!2338 = !DIDerivedType(tag: DW_TAG_member, name: "num_unnamed_labels", scope: !2322, file: !613, line: 404, baseType: !2336, size: 32, offset: 96)
!2339 = !DIDerivedType(tag: DW_TAG_member, name: "compressed_size", scope: !2322, file: !613, line: 407, baseType: !2336, size: 32, offset: 128)
!2340 = !DIDerivedType(tag: DW_TAG_member, name: "named_label_size", scope: !2322, file: !613, line: 410, baseType: !2336, size: 32, offset: 160)
!2341 = !DIDerivedType(tag: DW_TAG_member, name: "cfg_size", scope: !2322, file: !613, line: 413, baseType: !2336, size: 32, offset: 192)
!2342 = !DIDerivedType(tag: DW_TAG_member, name: "main_size", scope: !2322, file: !613, line: 416, baseType: !2336, size: 32, offset: 224)
!2343 = !DIDerivedType(tag: DW_TAG_member, name: "string_size", scope: !2322, file: !613, line: 419, baseType: !2336, size: 32, offset: 256)
!2344 = !{!0, !2345, !2347, !2351, !2355, !2359}
!2345 = !DIGlobalVariableExpression(var: !2346, expr: !DIExpression())
!2346 = distinct !DIGlobalVariable(name: "ipa_edge_args_vector", scope: !2, file: !3, line: 42, type: !2245, isLocal: false, isDefinition: true)
!2347 = !DIGlobalVariableExpression(var: !2348, expr: !DIExpression())
!2348 = distinct !DIGlobalVariable(name: "edge_removal_hook_holder", scope: !2, file: !3, line: 45, type: !2349, isLocal: true, isDefinition: true)
!2349 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2350, size: 64)
!2350 = !DICompositeType(tag: DW_TAG_structure_type, name: "cgraph_edge_hook_list", file: !250, line: 519, flags: DIFlagFwdDecl)
!2351 = !DIGlobalVariableExpression(var: !2352, expr: !DIExpression())
!2352 = distinct !DIGlobalVariable(name: "node_removal_hook_holder", scope: !2, file: !3, line: 46, type: !2353, isLocal: true, isDefinition: true)
!2353 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2354, size: 64)
!2354 = !DICompositeType(tag: DW_TAG_structure_type, name: "cgraph_node_hook_list", file: !250, line: 520, flags: DIFlagFwdDecl)
!2355 = !DIGlobalVariableExpression(var: !2356, expr: !DIExpression())
!2356 = distinct !DIGlobalVariable(name: "edge_duplication_hook_holder", scope: !2, file: !3, line: 47, type: !2357, isLocal: true, isDefinition: true)
!2357 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2358, size: 64)
!2358 = !DICompositeType(tag: DW_TAG_structure_type, name: "cgraph_2edge_hook_list", file: !250, line: 521, flags: DIFlagFwdDecl)
!2359 = !DIGlobalVariableExpression(var: !2360, expr: !DIExpression())
!2360 = distinct !DIGlobalVariable(name: "node_duplication_hook_holder", scope: !2, file: !3, line: 48, type: !2361, isLocal: true, isDefinition: true)
!2361 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2362, size: 64)
!2362 = !DICompositeType(tag: DW_TAG_structure_type, name: "cgraph_2node_hook_list", file: !250, line: 522, flags: DIFlagFwdDecl)
!2363 = !{i32 7, !"Dwarf Version", i32 4}
!2364 = !{i32 2, !"Debug Info Version", i32 3}
!2365 = !{i32 1, !"wchar_size", i32 4}
!2366 = !{!"clang version 10.0.1 (https://github.com/svkeerthy/IR2Vec-LoopOptimizationFramework.git 561ac470e63b728263a0ac06ef987886ac648486)"}
!2367 = distinct !DISubprogram(name: "ipa_push_func_to_list_1", scope: !3, file: !3, line: 55, type: !2368, scopeLine: 58, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2371)
!2368 = !DISubroutineType(types: !2369)
!2369 = !{null, !2370, !744, !2222}
!2370 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !740, size: 64)
!2371 = !{}
!2372 = !DILocalVariable(name: "wl", arg: 1, scope: !2367, file: !3, line: 55, type: !2370)
!2373 = !DILocation(line: 55, column: 49, scope: !2367)
!2374 = !DILocalVariable(name: "node", arg: 2, scope: !2367, file: !3, line: 56, type: !744)
!2375 = !DILocation(line: 56, column: 25, scope: !2367)
!2376 = !DILocalVariable(name: "info", arg: 3, scope: !2367, file: !3, line: 57, type: !2222)
!2377 = !DILocation(line: 57, column: 29, scope: !2367)
!2378 = !DILocalVariable(name: "temp", scope: !2367, file: !3, line: 59, type: !740)
!2379 = !DILocation(line: 59, column: 25, scope: !2367)
!2380 = !DILocation(line: 61, column: 3, scope: !2367)
!2381 = !DILocation(line: 61, column: 9, scope: !2367)
!2382 = !DILocation(line: 61, column: 23, scope: !2367)
!2383 = !DILocation(line: 62, column: 10, scope: !2367)
!2384 = !DILocation(line: 62, column: 8, scope: !2367)
!2385 = !DILocation(line: 63, column: 16, scope: !2367)
!2386 = !DILocation(line: 63, column: 3, scope: !2367)
!2387 = !DILocation(line: 63, column: 9, scope: !2367)
!2388 = !DILocation(line: 63, column: 14, scope: !2367)
!2389 = !DILocation(line: 64, column: 17, scope: !2367)
!2390 = !DILocation(line: 64, column: 16, scope: !2367)
!2391 = !DILocation(line: 64, column: 3, scope: !2367)
!2392 = !DILocation(line: 64, column: 9, scope: !2367)
!2393 = !DILocation(line: 64, column: 14, scope: !2367)
!2394 = !DILocation(line: 65, column: 9, scope: !2367)
!2395 = !DILocation(line: 65, column: 4, scope: !2367)
!2396 = !DILocation(line: 65, column: 7, scope: !2367)
!2397 = !DILocation(line: 66, column: 1, scope: !2367)
!2398 = distinct !DISubprogram(name: "ipa_init_func_list", scope: !3, file: !3, line: 71, type: !2399, scopeLine: 72, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2371)
!2399 = !DISubroutineType(types: !2400)
!2400 = !{!740}
!2401 = !DILocalVariable(name: "node", scope: !2398, file: !3, line: 73, type: !744)
!2402 = !DILocation(line: 73, column: 23, scope: !2398)
!2403 = !DILocalVariable(name: "wl", scope: !2398, file: !3, line: 74, type: !740)
!2404 = !DILocation(line: 74, column: 26, scope: !2398)
!2405 = !DILocation(line: 76, column: 6, scope: !2398)
!2406 = !DILocation(line: 77, column: 15, scope: !2407)
!2407 = distinct !DILexicalBlock(scope: !2398, file: !3, line: 77, column: 3)
!2408 = !DILocation(line: 77, column: 13, scope: !2407)
!2409 = !DILocation(line: 77, column: 8, scope: !2407)
!2410 = !DILocation(line: 77, column: 29, scope: !2411)
!2411 = distinct !DILexicalBlock(scope: !2407, file: !3, line: 77, column: 3)
!2412 = !DILocation(line: 77, column: 3, scope: !2407)
!2413 = !DILocation(line: 78, column: 9, scope: !2414)
!2414 = distinct !DILexicalBlock(scope: !2411, file: !3, line: 78, column: 9)
!2415 = !DILocation(line: 78, column: 15, scope: !2414)
!2416 = !DILocation(line: 78, column: 9, scope: !2411)
!2417 = !DILocalVariable(name: "info", scope: !2418, file: !3, line: 80, type: !2222)
!2418 = distinct !DILexicalBlock(scope: !2414, file: !3, line: 79, column: 7)
!2419 = !DILocation(line: 80, column: 26, scope: !2418)
!2420 = !DILocation(line: 80, column: 33, scope: !2418)
!2421 = !DILocation(line: 83, column: 2, scope: !2418)
!2422 = !DILocation(line: 84, column: 32, scope: !2418)
!2423 = !DILocation(line: 84, column: 38, scope: !2418)
!2424 = !DILocation(line: 84, column: 2, scope: !2418)
!2425 = !DILocation(line: 85, column: 7, scope: !2418)
!2426 = !DILocation(line: 77, column: 42, scope: !2411)
!2427 = !DILocation(line: 77, column: 48, scope: !2411)
!2428 = !DILocation(line: 77, column: 40, scope: !2411)
!2429 = !DILocation(line: 77, column: 3, scope: !2411)
!2430 = distinct !{!2430, !2412, !2431}
!2431 = !DILocation(line: 85, column: 7, scope: !2407)
!2432 = !DILocation(line: 87, column: 10, scope: !2398)
!2433 = !DILocation(line: 87, column: 3, scope: !2398)
!2434 = distinct !DISubprogram(name: "VEC_ipa_node_params_t_base_index", scope: !456, file: !456, line: 314, type: !2435, scopeLine: 314, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2371)
!2435 = !DISubroutineType(types: !2436)
!2436 = !{!2437, !2438, !7}
!2437 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2319, size: 64)
!2438 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2312, size: 64)
!2439 = !DILocalVariable(name: "vec_", arg: 1, scope: !2434, file: !456, line: 314, type: !2438)
!2440 = !DILocation(line: 314, column: 1, scope: !2434)
!2441 = !DILocalVariable(name: "ix_", arg: 2, scope: !2434, file: !456, line: 314, type: !7)
!2442 = !DILocation(line: 0, scope: !2434)
!2443 = distinct !DISubprogram(name: "ipa_pop_func_from_list", scope: !3, file: !3, line: 93, type: !2444, scopeLine: 94, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2371)
!2444 = !DISubroutineType(types: !2445)
!2445 = !{!744, !2370}
!2446 = !DILocalVariable(name: "wl", arg: 1, scope: !2443, file: !3, line: 93, type: !2370)
!2447 = !DILocation(line: 93, column: 48, scope: !2443)
!2448 = !DILocalVariable(name: "info", scope: !2443, file: !3, line: 95, type: !2222)
!2449 = !DILocation(line: 95, column: 27, scope: !2443)
!2450 = !DILocalVariable(name: "first", scope: !2443, file: !3, line: 96, type: !740)
!2451 = !DILocation(line: 96, column: 25, scope: !2443)
!2452 = !DILocalVariable(name: "node", scope: !2443, file: !3, line: 97, type: !744)
!2453 = !DILocation(line: 97, column: 23, scope: !2443)
!2454 = !DILocation(line: 99, column: 12, scope: !2443)
!2455 = !DILocation(line: 99, column: 11, scope: !2443)
!2456 = !DILocation(line: 99, column: 9, scope: !2443)
!2457 = !DILocation(line: 100, column: 11, scope: !2443)
!2458 = !DILocation(line: 100, column: 10, scope: !2443)
!2459 = !DILocation(line: 100, column: 16, scope: !2443)
!2460 = !DILocation(line: 100, column: 4, scope: !2443)
!2461 = !DILocation(line: 100, column: 7, scope: !2443)
!2462 = !DILocation(line: 101, column: 10, scope: !2443)
!2463 = !DILocation(line: 101, column: 17, scope: !2443)
!2464 = !DILocation(line: 101, column: 8, scope: !2443)
!2465 = !DILocation(line: 102, column: 9, scope: !2443)
!2466 = !DILocation(line: 102, column: 3, scope: !2443)
!2467 = !DILocation(line: 104, column: 10, scope: !2443)
!2468 = !DILocation(line: 104, column: 8, scope: !2443)
!2469 = !DILocation(line: 105, column: 3, scope: !2443)
!2470 = !DILocation(line: 105, column: 9, scope: !2443)
!2471 = !DILocation(line: 105, column: 23, scope: !2443)
!2472 = !DILocation(line: 106, column: 10, scope: !2443)
!2473 = !DILocation(line: 106, column: 3, scope: !2443)
!2474 = distinct !DISubprogram(name: "ipa_initialize_node_params", scope: !3, file: !3, line: 179, type: !2038, scopeLine: 180, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2371)
!2475 = !DILocalVariable(name: "node", arg: 1, scope: !2474, file: !3, line: 179, type: !744)
!2476 = !DILocation(line: 179, column: 49, scope: !2474)
!2477 = !DILocalVariable(name: "info", scope: !2474, file: !3, line: 181, type: !2222)
!2478 = !DILocation(line: 181, column: 27, scope: !2474)
!2479 = !DILocation(line: 181, column: 34, scope: !2474)
!2480 = !DILocation(line: 183, column: 8, scope: !2481)
!2481 = distinct !DILexicalBlock(scope: !2474, file: !3, line: 183, column: 7)
!2482 = !DILocation(line: 183, column: 14, scope: !2481)
!2483 = !DILocation(line: 183, column: 7, scope: !2474)
!2484 = !DILocation(line: 185, column: 32, scope: !2485)
!2485 = distinct !DILexicalBlock(scope: !2481, file: !3, line: 184, column: 5)
!2486 = !DILocation(line: 185, column: 38, scope: !2485)
!2487 = !DILocation(line: 185, column: 7, scope: !2485)
!2488 = !DILocation(line: 186, column: 22, scope: !2485)
!2489 = !DILocation(line: 186, column: 7, scope: !2485)
!2490 = !DILocation(line: 186, column: 13, scope: !2485)
!2491 = !DILocation(line: 186, column: 20, scope: !2485)
!2492 = !DILocation(line: 188, column: 33, scope: !2485)
!2493 = !DILocation(line: 188, column: 39, scope: !2485)
!2494 = !DILocation(line: 188, column: 7, scope: !2485)
!2495 = !DILocation(line: 189, column: 5, scope: !2485)
!2496 = !DILocation(line: 190, column: 1, scope: !2474)
!2497 = distinct !DISubprogram(name: "ipa_count_formal_params", scope: !3, file: !3, line: 165, type: !2498, scopeLine: 167, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2371)
!2498 = !DISubroutineType(types: !2499)
!2499 = !{null, !744, !2222}
!2500 = !DILocalVariable(name: "node", arg: 1, scope: !2497, file: !3, line: 165, type: !744)
!2501 = !DILocation(line: 165, column: 46, scope: !2497)
!2502 = !DILocalVariable(name: "info", arg: 2, scope: !2497, file: !3, line: 166, type: !2222)
!2503 = !DILocation(line: 166, column: 29, scope: !2497)
!2504 = !DILocalVariable(name: "param_num", scope: !2497, file: !3, line: 168, type: !829)
!2505 = !DILocation(line: 168, column: 7, scope: !2497)
!2506 = !DILocation(line: 170, column: 38, scope: !2497)
!2507 = !DILocation(line: 170, column: 44, scope: !2497)
!2508 = !DILocation(line: 170, column: 15, scope: !2497)
!2509 = !DILocation(line: 170, column: 13, scope: !2497)
!2510 = !DILocation(line: 171, column: 24, scope: !2497)
!2511 = !DILocation(line: 171, column: 30, scope: !2497)
!2512 = !DILocation(line: 171, column: 3, scope: !2497)
!2513 = !DILocation(line: 172, column: 1, scope: !2497)
!2514 = distinct !DISubprogram(name: "ipa_get_param_count", scope: !456, file: !456, line: 224, type: !2515, scopeLine: 225, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2371)
!2515 = !DISubroutineType(types: !2516)
!2516 = !{!829, !2222}
!2517 = !DILocalVariable(name: "info", arg: 1, scope: !2514, file: !456, line: 224, type: !2222)
!2518 = !DILocation(line: 224, column: 46, scope: !2514)
!2519 = !DILocation(line: 226, column: 10, scope: !2514)
!2520 = !DILocation(line: 226, column: 16, scope: !2514)
!2521 = !DILocation(line: 226, column: 3, scope: !2514)
!2522 = distinct !DISubprogram(name: "ipa_populate_param_decls", scope: !3, file: !3, line: 129, type: !2498, scopeLine: 131, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2371)
!2523 = !DILocalVariable(name: "node", arg: 1, scope: !2522, file: !3, line: 129, type: !744)
!2524 = !DILocation(line: 129, column: 47, scope: !2522)
!2525 = !DILocalVariable(name: "info", arg: 2, scope: !2522, file: !3, line: 130, type: !2222)
!2526 = !DILocation(line: 130, column: 30, scope: !2522)
!2527 = !DILocalVariable(name: "fndecl", scope: !2522, file: !3, line: 132, type: !748)
!2528 = !DILocation(line: 132, column: 8, scope: !2522)
!2529 = !DILocalVariable(name: "fnargs", scope: !2522, file: !3, line: 133, type: !748)
!2530 = !DILocation(line: 133, column: 8, scope: !2522)
!2531 = !DILocalVariable(name: "parm", scope: !2522, file: !3, line: 134, type: !748)
!2532 = !DILocation(line: 134, column: 8, scope: !2522)
!2533 = !DILocalVariable(name: "param_num", scope: !2522, file: !3, line: 135, type: !829)
!2534 = !DILocation(line: 135, column: 7, scope: !2522)
!2535 = !DILocation(line: 137, column: 12, scope: !2522)
!2536 = !DILocation(line: 137, column: 18, scope: !2522)
!2537 = !DILocation(line: 137, column: 10, scope: !2522)
!2538 = !DILocation(line: 138, column: 12, scope: !2522)
!2539 = !DILocation(line: 138, column: 10, scope: !2522)
!2540 = !DILocation(line: 139, column: 13, scope: !2522)
!2541 = !DILocation(line: 140, column: 15, scope: !2542)
!2542 = distinct !DILexicalBlock(scope: !2522, file: !3, line: 140, column: 3)
!2543 = !DILocation(line: 140, column: 13, scope: !2542)
!2544 = !DILocation(line: 140, column: 8, scope: !2542)
!2545 = !DILocation(line: 140, column: 23, scope: !2546)
!2546 = distinct !DILexicalBlock(scope: !2542, file: !3, line: 140, column: 3)
!2547 = !DILocation(line: 140, column: 3, scope: !2542)
!2548 = !DILocation(line: 142, column: 38, scope: !2549)
!2549 = distinct !DILexicalBlock(scope: !2546, file: !3, line: 141, column: 5)
!2550 = !DILocation(line: 142, column: 7, scope: !2549)
!2551 = !DILocation(line: 142, column: 13, scope: !2549)
!2552 = !DILocation(line: 142, column: 20, scope: !2549)
!2553 = !DILocation(line: 142, column: 31, scope: !2549)
!2554 = !DILocation(line: 142, column: 36, scope: !2549)
!2555 = !DILocation(line: 143, column: 16, scope: !2549)
!2556 = !DILocation(line: 144, column: 5, scope: !2549)
!2557 = !DILocation(line: 140, column: 36, scope: !2546)
!2558 = !DILocation(line: 140, column: 34, scope: !2546)
!2559 = !DILocation(line: 140, column: 3, scope: !2546)
!2560 = distinct !{!2560, !2547, !2561}
!2561 = !DILocation(line: 144, column: 5, scope: !2542)
!2562 = !DILocation(line: 145, column: 1, scope: !2522)
!2563 = distinct !DISubprogram(name: "ipa_detect_param_modifications", scope: !3, file: !3, line: 218, type: !2038, scopeLine: 219, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2371)
!2564 = !DILocalVariable(name: "node", arg: 1, scope: !2563, file: !3, line: 218, type: !744)
!2565 = !DILocation(line: 218, column: 53, scope: !2563)
!2566 = !DILocalVariable(name: "decl", scope: !2563, file: !3, line: 220, type: !748)
!2567 = !DILocation(line: 220, column: 8, scope: !2563)
!2568 = !DILocation(line: 220, column: 15, scope: !2563)
!2569 = !DILocation(line: 220, column: 21, scope: !2563)
!2570 = !DILocalVariable(name: "bb", scope: !2563, file: !3, line: 221, type: !1009)
!2571 = !DILocation(line: 221, column: 15, scope: !2563)
!2572 = !DILocalVariable(name: "func", scope: !2563, file: !3, line: 222, type: !997)
!2573 = !DILocation(line: 222, column: 20, scope: !2563)
!2574 = !DILocalVariable(name: "gsi", scope: !2563, file: !3, line: 223, type: !2575)
!2575 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple_stmt_iterator", file: !603, line: 265, baseType: !2576)
!2576 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !603, line: 254, size: 192, elements: !2577)
!2577 = !{!2578, !2579, !2580}
!2578 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !2576, file: !603, line: 257, baseType: !1041, size: 64)
!2579 = !DIDerivedType(tag: DW_TAG_member, name: "seq", scope: !2576, file: !603, line: 263, baseType: !1036, size: 64, offset: 64)
!2580 = !DIDerivedType(tag: DW_TAG_member, name: "bb", scope: !2576, file: !603, line: 264, baseType: !1009, size: 64, offset: 128)
!2581 = !DILocation(line: 223, column: 24, scope: !2563)
!2582 = !DILocalVariable(name: "info", scope: !2563, file: !3, line: 224, type: !2222)
!2583 = !DILocation(line: 224, column: 27, scope: !2563)
!2584 = !DILocation(line: 224, column: 34, scope: !2563)
!2585 = !DILocation(line: 226, column: 28, scope: !2586)
!2586 = distinct !DILexicalBlock(scope: !2563, file: !3, line: 226, column: 7)
!2587 = !DILocation(line: 226, column: 7, scope: !2586)
!2588 = !DILocation(line: 226, column: 34, scope: !2586)
!2589 = !DILocation(line: 226, column: 39, scope: !2586)
!2590 = !DILocation(line: 226, column: 42, scope: !2586)
!2591 = !DILocation(line: 226, column: 48, scope: !2586)
!2592 = !DILocation(line: 226, column: 7, scope: !2563)
!2593 = !DILocation(line: 227, column: 5, scope: !2586)
!2594 = !DILocation(line: 229, column: 10, scope: !2563)
!2595 = !DILocation(line: 229, column: 8, scope: !2563)
!2596 = !DILocation(line: 230, column: 3, scope: !2597)
!2597 = distinct !DILexicalBlock(scope: !2563, file: !3, line: 230, column: 3)
!2598 = !DILocation(line: 230, column: 3, scope: !2599)
!2599 = distinct !DILexicalBlock(scope: !2597, file: !3, line: 230, column: 3)
!2600 = !DILocation(line: 231, column: 30, scope: !2601)
!2601 = distinct !DILexicalBlock(scope: !2599, file: !3, line: 231, column: 5)
!2602 = !DILocation(line: 231, column: 16, scope: !2601)
!2603 = !DILocation(line: 231, column: 10, scope: !2601)
!2604 = !DILocation(line: 231, column: 36, scope: !2605)
!2605 = distinct !DILexicalBlock(scope: !2601, file: !3, line: 231, column: 5)
!2606 = !DILocation(line: 231, column: 35, scope: !2605)
!2607 = !DILocation(line: 231, column: 5, scope: !2601)
!2608 = !DILocation(line: 232, column: 38, scope: !2605)
!2609 = !DILocation(line: 232, column: 54, scope: !2605)
!2610 = !DILocation(line: 232, column: 7, scope: !2605)
!2611 = !DILocation(line: 231, column: 53, scope: !2605)
!2612 = !DILocation(line: 231, column: 5, scope: !2605)
!2613 = distinct !{!2613, !2607, !2614}
!2614 = !DILocation(line: 234, column: 43, scope: !2601)
!2615 = distinct !{!2615, !2596, !2616}
!2616 = !DILocation(line: 234, column: 43, scope: !2597)
!2617 = !DILocation(line: 236, column: 3, scope: !2563)
!2618 = !DILocation(line: 236, column: 9, scope: !2563)
!2619 = !DILocation(line: 236, column: 36, scope: !2563)
!2620 = !DILocation(line: 237, column: 1, scope: !2563)
!2621 = distinct !DISubprogram(name: "gsi_start_bb", scope: !603, file: !603, line: 4418, type: !2622, scopeLine: 4419, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2371)
!2622 = !DISubroutineType(types: !2623)
!2623 = !{!2575, !1009}
!2624 = !DILocalVariable(name: "bb", arg: 1, scope: !2621, file: !603, line: 4418, type: !1009)
!2625 = !DILocation(line: 4418, column: 27, scope: !2621)
!2626 = !DILocalVariable(name: "i", scope: !2621, file: !603, line: 4420, type: !2575)
!2627 = !DILocation(line: 4420, column: 24, scope: !2621)
!2628 = !DILocalVariable(name: "seq", scope: !2621, file: !603, line: 4421, type: !1036)
!2629 = !DILocation(line: 4421, column: 14, scope: !2621)
!2630 = !DILocation(line: 4423, column: 17, scope: !2621)
!2631 = !DILocation(line: 4423, column: 9, scope: !2621)
!2632 = !DILocation(line: 4423, column: 7, scope: !2621)
!2633 = !DILocation(line: 4424, column: 29, scope: !2621)
!2634 = !DILocation(line: 4424, column: 11, scope: !2621)
!2635 = !DILocation(line: 4424, column: 5, scope: !2621)
!2636 = !DILocation(line: 4424, column: 9, scope: !2621)
!2637 = !DILocation(line: 4425, column: 11, scope: !2621)
!2638 = !DILocation(line: 4425, column: 5, scope: !2621)
!2639 = !DILocation(line: 4425, column: 9, scope: !2621)
!2640 = !DILocation(line: 4426, column: 10, scope: !2621)
!2641 = !DILocation(line: 4426, column: 5, scope: !2621)
!2642 = !DILocation(line: 4426, column: 8, scope: !2621)
!2643 = !DILocation(line: 4428, column: 3, scope: !2621)
!2644 = distinct !DISubprogram(name: "gsi_end_p", scope: !603, file: !603, line: 4467, type: !2645, scopeLine: 4468, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2371)
!2645 = !DISubroutineType(types: !2646)
!2646 = !{!852, !2575}
!2647 = !DILocalVariable(name: "i", arg: 1, scope: !2644, file: !603, line: 4467, type: !2575)
!2648 = !DILocation(line: 4467, column: 33, scope: !2644)
!2649 = !DILocation(line: 4469, column: 12, scope: !2644)
!2650 = !DILocation(line: 4469, column: 16, scope: !2644)
!2651 = !DILocation(line: 4469, column: 10, scope: !2644)
!2652 = !DILocation(line: 4469, column: 3, scope: !2644)
!2653 = distinct !DISubprogram(name: "gsi_stmt", scope: !603, file: !603, line: 4501, type: !2654, scopeLine: 4502, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2371)
!2654 = !DISubroutineType(types: !2655)
!2655 = !{!1046, !2575}
!2656 = !DILocalVariable(name: "i", arg: 1, scope: !2653, file: !603, line: 4501, type: !2575)
!2657 = !DILocation(line: 4501, column: 32, scope: !2653)
!2658 = !DILocation(line: 4503, column: 12, scope: !2653)
!2659 = !DILocation(line: 4503, column: 17, scope: !2653)
!2660 = !DILocation(line: 4503, column: 3, scope: !2653)
!2661 = distinct !DISubprogram(name: "visit_store_addr_for_mod_analysis", scope: !3, file: !3, line: 197, type: !2662, scopeLine: 199, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2371)
!2662 = !DISubroutineType(types: !2663)
!2663 = !{!852, !1046, !748, !1254}
!2664 = !DILocalVariable(name: "stmt", arg: 1, scope: !2661, file: !3, line: 197, type: !1046)
!2665 = !DILocation(line: 197, column: 43, scope: !2661)
!2666 = !DILocalVariable(name: "op", arg: 2, scope: !2661, file: !3, line: 198, type: !748)
!2667 = !DILocation(line: 198, column: 13, scope: !2661)
!2668 = !DILocalVariable(name: "data", arg: 3, scope: !2661, file: !3, line: 198, type: !1254)
!2669 = !DILocation(line: 198, column: 23, scope: !2661)
!2670 = !DILocalVariable(name: "info", scope: !2661, file: !3, line: 200, type: !2222)
!2671 = !DILocation(line: 200, column: 27, scope: !2661)
!2672 = !DILocation(line: 200, column: 61, scope: !2661)
!2673 = !DILocation(line: 200, column: 34, scope: !2661)
!2674 = !DILocation(line: 202, column: 7, scope: !2675)
!2675 = distinct !DILexicalBlock(scope: !2661, file: !3, line: 202, column: 7)
!2676 = !DILocation(line: 202, column: 22, scope: !2675)
!2677 = !DILocation(line: 202, column: 7, scope: !2661)
!2678 = !DILocalVariable(name: "index", scope: !2679, file: !3, line: 204, type: !829)
!2679 = distinct !DILexicalBlock(scope: !2675, file: !3, line: 203, column: 5)
!2680 = !DILocation(line: 204, column: 11, scope: !2679)
!2681 = !DILocation(line: 204, column: 45, scope: !2679)
!2682 = !DILocation(line: 204, column: 51, scope: !2679)
!2683 = !DILocation(line: 204, column: 19, scope: !2679)
!2684 = !DILocation(line: 205, column: 7, scope: !2679)
!2685 = !DILocation(line: 206, column: 7, scope: !2679)
!2686 = !DILocation(line: 206, column: 13, scope: !2679)
!2687 = !DILocation(line: 206, column: 20, scope: !2679)
!2688 = !DILocation(line: 206, column: 27, scope: !2679)
!2689 = !DILocation(line: 206, column: 36, scope: !2679)
!2690 = !DILocation(line: 207, column: 5, scope: !2679)
!2691 = !DILocation(line: 209, column: 3, scope: !2661)
!2692 = distinct !DISubprogram(name: "gsi_next", scope: !603, file: !603, line: 4485, type: !2693, scopeLine: 4486, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2371)
!2693 = !DISubroutineType(types: !2694)
!2694 = !{null, !2695}
!2695 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2575, size: 64)
!2696 = !DILocalVariable(name: "i", arg: 1, scope: !2692, file: !603, line: 4485, type: !2695)
!2697 = !DILocation(line: 4485, column: 33, scope: !2692)
!2698 = !DILocation(line: 4487, column: 12, scope: !2692)
!2699 = !DILocation(line: 4487, column: 15, scope: !2692)
!2700 = !DILocation(line: 4487, column: 20, scope: !2692)
!2701 = !DILocation(line: 4487, column: 3, scope: !2692)
!2702 = !DILocation(line: 4487, column: 6, scope: !2692)
!2703 = !DILocation(line: 4487, column: 10, scope: !2692)
!2704 = !DILocation(line: 4488, column: 1, scope: !2692)
!2705 = distinct !DISubprogram(name: "ipa_count_arguments", scope: !3, file: !3, line: 243, type: !2706, scopeLine: 244, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2371)
!2706 = !DISubroutineType(types: !2707)
!2707 = !{null, !1930}
!2708 = !DILocalVariable(name: "cs", arg: 1, scope: !2705, file: !3, line: 243, type: !1930)
!2709 = !DILocation(line: 243, column: 42, scope: !2705)
!2710 = !DILocalVariable(name: "stmt", scope: !2705, file: !3, line: 245, type: !1046)
!2711 = !DILocation(line: 245, column: 10, scope: !2705)
!2712 = !DILocalVariable(name: "arg_num", scope: !2705, file: !3, line: 246, type: !829)
!2713 = !DILocation(line: 246, column: 7, scope: !2705)
!2714 = !DILocation(line: 248, column: 10, scope: !2705)
!2715 = !DILocation(line: 248, column: 14, scope: !2705)
!2716 = !DILocation(line: 248, column: 8, scope: !2705)
!2717 = !DILocation(line: 249, column: 3, scope: !2705)
!2718 = !DILocation(line: 250, column: 35, scope: !2705)
!2719 = !DILocation(line: 250, column: 13, scope: !2705)
!2720 = !DILocation(line: 250, column: 11, scope: !2705)
!2721 = !DILocation(line: 251, column: 7, scope: !2722)
!2722 = distinct !DILexicalBlock(scope: !2705, file: !3, line: 251, column: 7)
!2723 = !DILocation(line: 252, column: 21, scope: !2722)
!2724 = !DILocation(line: 252, column: 7, scope: !2722)
!2725 = !DILocation(line: 251, column: 7, scope: !2705)
!2726 = !DILocation(line: 253, column: 5, scope: !2722)
!2727 = !DILocation(line: 255, column: 30, scope: !2705)
!2728 = !DILocation(line: 255, column: 49, scope: !2705)
!2729 = !DILocation(line: 255, column: 3, scope: !2705)
!2730 = !DILocation(line: 256, column: 1, scope: !2705)
!2731 = distinct !DISubprogram(name: "is_gimple_call", scope: !603, file: !603, line: 1870, type: !2732, scopeLine: 1871, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2371)
!2732 = !DISubroutineType(types: !2733)
!2733 = !{!852, !2734}
!2734 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_gimple", file: !749, line: 60, baseType: !2262)
!2735 = !DILocalVariable(name: "gs", arg: 1, scope: !2731, file: !603, line: 1870, type: !2734)
!2736 = !DILocation(line: 1870, column: 30, scope: !2731)
!2737 = !DILocation(line: 1872, column: 23, scope: !2731)
!2738 = !DILocation(line: 1872, column: 10, scope: !2731)
!2739 = !DILocation(line: 1872, column: 27, scope: !2731)
!2740 = !DILocation(line: 1872, column: 3, scope: !2731)
!2741 = distinct !DISubprogram(name: "gimple_call_num_args", scope: !603, file: !603, line: 2013, type: !2742, scopeLine: 2014, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2371)
!2742 = !DISubroutineType(types: !2743)
!2743 = !{!7, !2734}
!2744 = !DILocalVariable(name: "gs", arg: 1, scope: !2741, file: !603, line: 2013, type: !2734)
!2745 = !DILocation(line: 2013, column: 36, scope: !2741)
!2746 = !DILocalVariable(name: "num_ops", scope: !2741, file: !603, line: 2015, type: !7)
!2747 = !DILocation(line: 2015, column: 12, scope: !2741)
!2748 = !DILocation(line: 2017, column: 29, scope: !2741)
!2749 = !DILocation(line: 2017, column: 13, scope: !2741)
!2750 = !DILocation(line: 2017, column: 11, scope: !2741)
!2751 = !DILocation(line: 2018, column: 10, scope: !2741)
!2752 = !DILocation(line: 2018, column: 18, scope: !2741)
!2753 = !DILocation(line: 2018, column: 3, scope: !2741)
!2754 = distinct !DISubprogram(name: "VEC_ipa_edge_args_t_base_length", scope: !456, file: !456, line: 316, type: !2755, scopeLine: 316, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2371)
!2755 = !DISubroutineType(types: !2756)
!2756 = !{!7, !2757}
!2757 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2758, size: 64)
!2758 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2250)
!2759 = !DILocalVariable(name: "vec_", arg: 1, scope: !2754, file: !456, line: 316, type: !2757)
!2760 = !DILocation(line: 316, column: 1, scope: !2754)
!2761 = distinct !DISubprogram(name: "VEC_ipa_edge_args_t_gc_safe_grow_cleared", scope: !456, file: !456, line: 317, type: !2762, scopeLine: 317, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2371)
!2762 = !DISubroutineType(types: !2763)
!2763 = !{null, !2764, !829}
!2764 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2245, size: 64)
!2765 = !DILocalVariable(name: "vec_", arg: 1, scope: !2761, file: !456, line: 317, type: !2764)
!2766 = !DILocation(line: 317, column: 1, scope: !2761)
!2767 = !DILocalVariable(name: "size_", arg: 2, scope: !2761, file: !456, line: 317, type: !829)
!2768 = !DILocalVariable(name: "oldsize", scope: !2761, file: !456, line: 317, type: !829)
!2769 = distinct !DISubprogram(name: "ipa_set_cs_argument_count", scope: !456, file: !456, line: 287, type: !2770, scopeLine: 288, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2371)
!2770 = !DISubroutineType(types: !2771)
!2771 = !{null, !2772, !829}
!2772 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2258, size: 64)
!2773 = !DILocalVariable(name: "args", arg: 1, scope: !2769, file: !456, line: 287, type: !2772)
!2774 = !DILocation(line: 287, column: 50, scope: !2769)
!2775 = !DILocalVariable(name: "count", arg: 2, scope: !2769, file: !456, line: 287, type: !829)
!2776 = !DILocation(line: 287, column: 60, scope: !2769)
!2777 = !DILocation(line: 289, column: 26, scope: !2769)
!2778 = !DILocation(line: 289, column: 3, scope: !2769)
!2779 = !DILocation(line: 289, column: 9, scope: !2769)
!2780 = !DILocation(line: 289, column: 24, scope: !2769)
!2781 = !DILocation(line: 290, column: 1, scope: !2769)
!2782 = distinct !DISubprogram(name: "VEC_ipa_edge_args_t_base_index", scope: !456, file: !456, line: 316, type: !2783, scopeLine: 316, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2371)
!2783 = !DISubroutineType(types: !2784)
!2784 = !{!2785, !2786, !7}
!2785 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2257, size: 64)
!2786 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2250, size: 64)
!2787 = !DILocalVariable(name: "vec_", arg: 1, scope: !2782, file: !456, line: 316, type: !2786)
!2788 = !DILocation(line: 316, column: 1, scope: !2782)
!2789 = !DILocalVariable(name: "ix_", arg: 2, scope: !2782, file: !456, line: 316, type: !7)
!2790 = !DILocation(line: 0, scope: !2782)
!2791 = distinct !DISubprogram(name: "ipa_print_node_jump_functions", scope: !3, file: !3, line: 262, type: !2792, scopeLine: 263, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2371)
!2792 = !DISubroutineType(types: !2793)
!2793 = !{null, !2794, !744}
!2794 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2795, size: 64)
!2795 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !2796, line: 7, baseType: !2797)
!2796 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/FILE.h", directory: "")
!2797 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !2798, line: 49, size: 1728, elements: !2799)
!2798 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h", directory: "")
!2799 = !{!2800, !2801, !2802, !2803, !2804, !2805, !2806, !2807, !2808, !2809, !2810, !2811, !2812, !2815, !2817, !2818, !2819, !2821, !2822, !2823, !2824, !2827, !2829, !2832, !2835, !2836, !2837, !2838, !2839}
!2800 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !2797, file: !2798, line: 51, baseType: !829, size: 32)
!2801 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !2797, file: !2798, line: 54, baseType: !1452, size: 64, offset: 64)
!2802 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !2797, file: !2798, line: 55, baseType: !1452, size: 64, offset: 128)
!2803 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !2797, file: !2798, line: 56, baseType: !1452, size: 64, offset: 192)
!2804 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !2797, file: !2798, line: 57, baseType: !1452, size: 64, offset: 256)
!2805 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !2797, file: !2798, line: 58, baseType: !1452, size: 64, offset: 320)
!2806 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !2797, file: !2798, line: 59, baseType: !1452, size: 64, offset: 384)
!2807 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !2797, file: !2798, line: 60, baseType: !1452, size: 64, offset: 448)
!2808 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !2797, file: !2798, line: 61, baseType: !1452, size: 64, offset: 512)
!2809 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !2797, file: !2798, line: 64, baseType: !1452, size: 64, offset: 576)
!2810 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !2797, file: !2798, line: 65, baseType: !1452, size: 64, offset: 640)
!2811 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !2797, file: !2798, line: 66, baseType: !1452, size: 64, offset: 704)
!2812 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !2797, file: !2798, line: 68, baseType: !2813, size: 64, offset: 768)
!2813 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2814, size: 64)
!2814 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_marker", file: !2798, line: 36, flags: DIFlagFwdDecl)
!2815 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !2797, file: !2798, line: 70, baseType: !2816, size: 64, offset: 832)
!2816 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2797, size: 64)
!2817 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !2797, file: !2798, line: 72, baseType: !829, size: 32, offset: 896)
!2818 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !2797, file: !2798, line: 73, baseType: !829, size: 32, offset: 928)
!2819 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !2797, file: !2798, line: 74, baseType: !2820, size: 64, offset: 960)
!2820 = !DIDerivedType(tag: DW_TAG_typedef, name: "__off_t", file: !2331, line: 152, baseType: !804)
!2821 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !2797, file: !2798, line: 77, baseType: !1948, size: 16, offset: 1024)
!2822 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !2797, file: !2798, line: 78, baseType: !1756, size: 8, offset: 1040)
!2823 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !2797, file: !2798, line: 79, baseType: !831, size: 8, offset: 1048)
!2824 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !2797, file: !2798, line: 81, baseType: !2825, size: 64, offset: 1088)
!2825 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2826, size: 64)
!2826 = !DIDerivedType(tag: DW_TAG_typedef, name: "_IO_lock_t", file: !2798, line: 43, baseType: null)
!2827 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !2797, file: !2798, line: 89, baseType: !2828, size: 64, offset: 1152)
!2828 = !DIDerivedType(tag: DW_TAG_typedef, name: "__off64_t", file: !2331, line: 153, baseType: !804)
!2829 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !2797, file: !2798, line: 91, baseType: !2830, size: 64, offset: 1216)
!2830 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2831, size: 64)
!2831 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_codecvt", file: !2798, line: 37, flags: DIFlagFwdDecl)
!2832 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !2797, file: !2798, line: 92, baseType: !2833, size: 64, offset: 1280)
!2833 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2834, size: 64)
!2834 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_wide_data", file: !2798, line: 38, flags: DIFlagFwdDecl)
!2835 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !2797, file: !2798, line: 93, baseType: !2816, size: 64, offset: 1344)
!2836 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !2797, file: !2798, line: 94, baseType: !1254, size: 64, offset: 1408)
!2837 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !2797, file: !2798, line: 95, baseType: !1194, size: 64, offset: 1472)
!2838 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !2797, file: !2798, line: 96, baseType: !829, size: 32, offset: 1536)
!2839 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !2797, file: !2798, line: 98, baseType: !2840, size: 160, offset: 1568)
!2840 = !DICompositeType(tag: DW_TAG_array_type, baseType: !832, size: 160, elements: !2841)
!2841 = !{!2842}
!2842 = !DISubrange(count: 20)
!2843 = !DILocalVariable(name: "f", arg: 1, scope: !2791, file: !3, line: 262, type: !2794)
!2844 = !DILocation(line: 262, column: 38, scope: !2791)
!2845 = !DILocalVariable(name: "node", arg: 2, scope: !2791, file: !3, line: 262, type: !744)
!2846 = !DILocation(line: 262, column: 61, scope: !2791)
!2847 = !DILocalVariable(name: "i", scope: !2791, file: !3, line: 264, type: !829)
!2848 = !DILocation(line: 264, column: 7, scope: !2791)
!2849 = !DILocalVariable(name: "count", scope: !2791, file: !3, line: 264, type: !829)
!2850 = !DILocation(line: 264, column: 10, scope: !2791)
!2851 = !DILocalVariable(name: "cs", scope: !2791, file: !3, line: 265, type: !1930)
!2852 = !DILocation(line: 265, column: 23, scope: !2791)
!2853 = !DILocalVariable(name: "jump_func", scope: !2791, file: !3, line: 266, type: !2197)
!2854 = !DILocation(line: 266, column: 25, scope: !2791)
!2855 = !DILocalVariable(name: "type", scope: !2791, file: !3, line: 267, type: !461)
!2856 = !DILocation(line: 267, column: 23, scope: !2791)
!2857 = !DILocation(line: 269, column: 12, scope: !2791)
!2858 = !DILocation(line: 269, column: 70, scope: !2791)
!2859 = !DILocation(line: 269, column: 52, scope: !2791)
!2860 = !DILocation(line: 269, column: 3, scope: !2791)
!2861 = !DILocation(line: 270, column: 13, scope: !2862)
!2862 = distinct !DILexicalBlock(scope: !2791, file: !3, line: 270, column: 3)
!2863 = !DILocation(line: 270, column: 19, scope: !2862)
!2864 = !DILocation(line: 270, column: 11, scope: !2862)
!2865 = !DILocation(line: 270, column: 8, scope: !2862)
!2866 = !DILocation(line: 270, column: 28, scope: !2867)
!2867 = distinct !DILexicalBlock(scope: !2862, file: !3, line: 270, column: 3)
!2868 = !DILocation(line: 270, column: 3, scope: !2862)
!2869 = !DILocation(line: 272, column: 53, scope: !2870)
!2870 = distinct !DILexicalBlock(scope: !2871, file: !3, line: 272, column: 11)
!2871 = distinct !DILexicalBlock(scope: !2867, file: !3, line: 271, column: 5)
!2872 = !DILocation(line: 272, column: 12, scope: !2870)
!2873 = !DILocation(line: 272, column: 11, scope: !2871)
!2874 = !DILocation(line: 273, column: 2, scope: !2870)
!2875 = !DILocation(line: 275, column: 16, scope: !2871)
!2876 = !DILocation(line: 275, column: 58, scope: !2871)
!2877 = !DILocation(line: 275, column: 40, scope: !2871)
!2878 = !DILocation(line: 275, column: 7, scope: !2871)
!2879 = !DILocation(line: 276, column: 16, scope: !2871)
!2880 = !DILocation(line: 276, column: 52, scope: !2871)
!2881 = !DILocation(line: 276, column: 56, scope: !2871)
!2882 = !DILocation(line: 276, column: 34, scope: !2871)
!2883 = !DILocation(line: 276, column: 7, scope: !2871)
!2884 = !DILocation(line: 278, column: 42, scope: !2871)
!2885 = !DILocation(line: 278, column: 15, scope: !2871)
!2886 = !DILocation(line: 278, column: 13, scope: !2871)
!2887 = !DILocation(line: 279, column: 14, scope: !2888)
!2888 = distinct !DILexicalBlock(scope: !2871, file: !3, line: 279, column: 7)
!2889 = !DILocation(line: 279, column: 12, scope: !2888)
!2890 = !DILocation(line: 279, column: 19, scope: !2891)
!2891 = distinct !DILexicalBlock(scope: !2888, file: !3, line: 279, column: 7)
!2892 = !DILocation(line: 279, column: 23, scope: !2891)
!2893 = !DILocation(line: 279, column: 21, scope: !2891)
!2894 = !DILocation(line: 279, column: 7, scope: !2888)
!2895 = !DILocation(line: 281, column: 39, scope: !2896)
!2896 = distinct !DILexicalBlock(scope: !2891, file: !3, line: 280, column: 2)
!2897 = !DILocation(line: 281, column: 58, scope: !2896)
!2898 = !DILocation(line: 281, column: 16, scope: !2896)
!2899 = !DILocation(line: 281, column: 14, scope: !2896)
!2900 = !DILocation(line: 282, column: 11, scope: !2896)
!2901 = !DILocation(line: 282, column: 22, scope: !2896)
!2902 = !DILocation(line: 282, column: 9, scope: !2896)
!2903 = !DILocation(line: 284, column: 13, scope: !2896)
!2904 = !DILocation(line: 284, column: 37, scope: !2896)
!2905 = !DILocation(line: 284, column: 4, scope: !2896)
!2906 = !DILocation(line: 285, column: 8, scope: !2907)
!2907 = distinct !DILexicalBlock(scope: !2896, file: !3, line: 285, column: 8)
!2908 = !DILocation(line: 285, column: 13, scope: !2907)
!2909 = !DILocation(line: 285, column: 8, scope: !2896)
!2910 = !DILocation(line: 286, column: 15, scope: !2907)
!2911 = !DILocation(line: 286, column: 6, scope: !2907)
!2912 = !DILocation(line: 287, column: 13, scope: !2913)
!2913 = distinct !DILexicalBlock(scope: !2907, file: !3, line: 287, column: 13)
!2914 = !DILocation(line: 287, column: 18, scope: !2913)
!2915 = !DILocation(line: 287, column: 13, scope: !2907)
!2916 = !DILocalVariable(name: "val", scope: !2917, file: !3, line: 289, type: !748)
!2917 = distinct !DILexicalBlock(scope: !2913, file: !3, line: 288, column: 7)
!2918 = !DILocation(line: 289, column: 13, scope: !2917)
!2919 = !DILocation(line: 289, column: 19, scope: !2917)
!2920 = !DILocation(line: 289, column: 30, scope: !2917)
!2921 = !DILocation(line: 289, column: 36, scope: !2917)
!2922 = !DILocation(line: 290, column: 17, scope: !2917)
!2923 = !DILocation(line: 290, column: 8, scope: !2917)
!2924 = !DILocation(line: 291, column: 28, scope: !2917)
!2925 = !DILocation(line: 291, column: 31, scope: !2917)
!2926 = !DILocation(line: 291, column: 8, scope: !2917)
!2927 = !DILocation(line: 292, column: 17, scope: !2917)
!2928 = !DILocation(line: 292, column: 8, scope: !2917)
!2929 = !DILocation(line: 293, column: 6, scope: !2917)
!2930 = !DILocation(line: 294, column: 13, scope: !2931)
!2931 = distinct !DILexicalBlock(scope: !2913, file: !3, line: 294, column: 13)
!2932 = !DILocation(line: 294, column: 18, scope: !2931)
!2933 = !DILocation(line: 294, column: 13, scope: !2913)
!2934 = !DILocation(line: 296, column: 17, scope: !2935)
!2935 = distinct !DILexicalBlock(scope: !2931, file: !3, line: 295, column: 6)
!2936 = !DILocation(line: 296, column: 8, scope: !2935)
!2937 = !DILocation(line: 297, column: 28, scope: !2935)
!2938 = !DILocation(line: 297, column: 31, scope: !2935)
!2939 = !DILocation(line: 297, column: 42, scope: !2935)
!2940 = !DILocation(line: 297, column: 48, scope: !2935)
!2941 = !DILocation(line: 297, column: 59, scope: !2935)
!2942 = !DILocation(line: 297, column: 8, scope: !2935)
!2943 = !DILocation(line: 298, column: 17, scope: !2935)
!2944 = !DILocation(line: 298, column: 8, scope: !2935)
!2945 = !DILocation(line: 299, column: 28, scope: !2935)
!2946 = !DILocation(line: 299, column: 31, scope: !2935)
!2947 = !DILocation(line: 299, column: 42, scope: !2935)
!2948 = !DILocation(line: 299, column: 48, scope: !2935)
!2949 = !DILocation(line: 299, column: 59, scope: !2935)
!2950 = !DILocation(line: 299, column: 8, scope: !2935)
!2951 = !DILocation(line: 300, column: 17, scope: !2935)
!2952 = !DILocation(line: 300, column: 8, scope: !2935)
!2953 = !DILocation(line: 301, column: 6, scope: !2935)
!2954 = !DILocation(line: 302, column: 13, scope: !2955)
!2955 = distinct !DILexicalBlock(scope: !2931, file: !3, line: 302, column: 13)
!2956 = !DILocation(line: 302, column: 18, scope: !2955)
!2957 = !DILocation(line: 302, column: 13, scope: !2931)
!2958 = !DILocation(line: 304, column: 17, scope: !2959)
!2959 = distinct !DILexicalBlock(scope: !2955, file: !3, line: 303, column: 7)
!2960 = !DILocation(line: 304, column: 8, scope: !2959)
!2961 = !DILocation(line: 305, column: 17, scope: !2959)
!2962 = !DILocation(line: 306, column: 10, scope: !2959)
!2963 = !DILocation(line: 306, column: 21, scope: !2959)
!2964 = !DILocation(line: 306, column: 27, scope: !2959)
!2965 = !DILocation(line: 306, column: 40, scope: !2959)
!2966 = !DILocation(line: 308, column: 11, scope: !2959)
!2967 = !DILocation(line: 308, column: 22, scope: !2959)
!2968 = !DILocation(line: 308, column: 28, scope: !2959)
!2969 = !DILocation(line: 308, column: 41, scope: !2959)
!2970 = !DILocation(line: 307, column: 10, scope: !2959)
!2971 = !DILocation(line: 305, column: 8, scope: !2959)
!2972 = !DILocation(line: 309, column: 12, scope: !2973)
!2973 = distinct !DILexicalBlock(scope: !2959, file: !3, line: 309, column: 12)
!2974 = !DILocation(line: 309, column: 23, scope: !2973)
!2975 = !DILocation(line: 309, column: 29, scope: !2973)
!2976 = !DILocation(line: 309, column: 42, scope: !2973)
!2977 = !DILocation(line: 309, column: 52, scope: !2973)
!2978 = !DILocation(line: 309, column: 12, scope: !2959)
!2979 = !DILocation(line: 310, column: 23, scope: !2973)
!2980 = !DILocation(line: 311, column: 9, scope: !2973)
!2981 = !DILocation(line: 311, column: 20, scope: !2973)
!2982 = !DILocation(line: 311, column: 26, scope: !2973)
!2983 = !DILocation(line: 311, column: 39, scope: !2973)
!2984 = !DILocation(line: 310, column: 3, scope: !2973)
!2985 = !DILocation(line: 312, column: 17, scope: !2959)
!2986 = !DILocation(line: 312, column: 8, scope: !2959)
!2987 = !DILocation(line: 313, column: 7, scope: !2959)
!2988 = !DILocation(line: 314, column: 13, scope: !2989)
!2989 = distinct !DILexicalBlock(scope: !2955, file: !3, line: 314, column: 13)
!2990 = !DILocation(line: 314, column: 18, scope: !2989)
!2991 = !DILocation(line: 314, column: 13, scope: !2955)
!2992 = !DILocation(line: 316, column: 17, scope: !2993)
!2993 = distinct !DILexicalBlock(scope: !2989, file: !3, line: 315, column: 6)
!2994 = !DILocation(line: 316, column: 8, scope: !2993)
!2995 = !DILocation(line: 317, column: 17, scope: !2993)
!2996 = !DILocation(line: 318, column: 10, scope: !2993)
!2997 = !DILocation(line: 318, column: 21, scope: !2993)
!2998 = !DILocation(line: 318, column: 27, scope: !2993)
!2999 = !DILocation(line: 318, column: 36, scope: !2993)
!3000 = !DILocation(line: 319, column: 10, scope: !2993)
!3001 = !DILocation(line: 319, column: 21, scope: !2993)
!3002 = !DILocation(line: 319, column: 27, scope: !2993)
!3003 = !DILocation(line: 319, column: 36, scope: !2993)
!3004 = !DILocation(line: 317, column: 8, scope: !2993)
!3005 = !DILocation(line: 320, column: 6, scope: !2993)
!3006 = !DILocation(line: 321, column: 2, scope: !2896)
!3007 = !DILocation(line: 279, column: 31, scope: !2891)
!3008 = !DILocation(line: 279, column: 7, scope: !2891)
!3009 = distinct !{!3009, !2894, !3010}
!3010 = !DILocation(line: 321, column: 2, scope: !2888)
!3011 = !DILocation(line: 322, column: 5, scope: !2871)
!3012 = !DILocation(line: 270, column: 37, scope: !2867)
!3013 = !DILocation(line: 270, column: 41, scope: !2867)
!3014 = !DILocation(line: 270, column: 35, scope: !2867)
!3015 = !DILocation(line: 270, column: 3, scope: !2867)
!3016 = distinct !{!3016, !2868, !3017}
!3017 = !DILocation(line: 322, column: 5, scope: !2862)
!3018 = !DILocation(line: 323, column: 1, scope: !2791)
!3019 = distinct !DISubprogram(name: "ipa_edge_args_info_available_for_edge_p", scope: !456, file: !456, line: 382, type: !3020, scopeLine: 383, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2371)
!3020 = !DISubroutineType(types: !3021)
!3021 = !{!852, !1930}
!3022 = !DILocalVariable(name: "edge", arg: 1, scope: !3019, file: !456, line: 382, type: !1930)
!3023 = !DILocation(line: 382, column: 62, scope: !3019)
!3024 = !DILocation(line: 384, column: 22, scope: !3019)
!3025 = !DILocation(line: 384, column: 28, scope: !3019)
!3026 = !DILocation(line: 384, column: 34, scope: !3019)
!3027 = !DILocation(line: 384, column: 32, scope: !3019)
!3028 = !DILocation(line: 384, column: 10, scope: !3019)
!3029 = !DILocation(line: 384, column: 3, scope: !3019)
!3030 = distinct !DISubprogram(name: "ipa_get_cs_argument_count", scope: !456, file: !456, line: 295, type: !3031, scopeLine: 296, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2371)
!3031 = !DISubroutineType(types: !3032)
!3032 = !{!829, !2772}
!3033 = !DILocalVariable(name: "args", arg: 1, scope: !3030, file: !456, line: 295, type: !2772)
!3034 = !DILocation(line: 295, column: 50, scope: !3030)
!3035 = !DILocation(line: 297, column: 10, scope: !3030)
!3036 = !DILocation(line: 297, column: 16, scope: !3030)
!3037 = !DILocation(line: 297, column: 3, scope: !3030)
!3038 = distinct !DISubprogram(name: "ipa_get_ith_jump_func", scope: !456, file: !456, line: 305, type: !3039, scopeLine: 306, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2371)
!3039 = !DISubroutineType(types: !3040)
!3040 = !{!2197, !2772, !829}
!3041 = !DILocalVariable(name: "args", arg: 1, scope: !3038, file: !456, line: 305, type: !2772)
!3042 = !DILocation(line: 305, column: 46, scope: !3038)
!3043 = !DILocalVariable(name: "i", arg: 2, scope: !3038, file: !456, line: 305, type: !829)
!3044 = !DILocation(line: 305, column: 56, scope: !3038)
!3045 = !DILocation(line: 307, column: 11, scope: !3038)
!3046 = !DILocation(line: 307, column: 17, scope: !3038)
!3047 = !DILocation(line: 307, column: 32, scope: !3038)
!3048 = !DILocation(line: 307, column: 3, scope: !3038)
!3049 = distinct !DISubprogram(name: "ipa_print_all_jump_functions", scope: !3, file: !3, line: 328, type: !3050, scopeLine: 329, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2371)
!3050 = !DISubroutineType(types: !3051)
!3051 = !{null, !2794}
!3052 = !DILocalVariable(name: "f", arg: 1, scope: !3049, file: !3, line: 328, type: !2794)
!3053 = !DILocation(line: 328, column: 37, scope: !3049)
!3054 = !DILocalVariable(name: "node", scope: !3049, file: !3, line: 330, type: !744)
!3055 = !DILocation(line: 330, column: 23, scope: !3049)
!3056 = !DILocation(line: 332, column: 12, scope: !3049)
!3057 = !DILocation(line: 332, column: 3, scope: !3049)
!3058 = !DILocation(line: 333, column: 15, scope: !3059)
!3059 = distinct !DILexicalBlock(scope: !3049, file: !3, line: 333, column: 3)
!3060 = !DILocation(line: 333, column: 13, scope: !3059)
!3061 = !DILocation(line: 333, column: 8, scope: !3059)
!3062 = !DILocation(line: 333, column: 29, scope: !3063)
!3063 = distinct !DILexicalBlock(scope: !3059, file: !3, line: 333, column: 3)
!3064 = !DILocation(line: 333, column: 3, scope: !3059)
!3065 = !DILocation(line: 335, column: 38, scope: !3066)
!3066 = distinct !DILexicalBlock(scope: !3063, file: !3, line: 334, column: 5)
!3067 = !DILocation(line: 335, column: 41, scope: !3066)
!3068 = !DILocation(line: 335, column: 7, scope: !3066)
!3069 = !DILocation(line: 336, column: 5, scope: !3066)
!3070 = !DILocation(line: 333, column: 42, scope: !3063)
!3071 = !DILocation(line: 333, column: 48, scope: !3063)
!3072 = !DILocation(line: 333, column: 40, scope: !3063)
!3073 = !DILocation(line: 333, column: 3, scope: !3063)
!3074 = distinct !{!3074, !3064, !3075}
!3075 = !DILocation(line: 336, column: 5, scope: !3059)
!3076 = !DILocation(line: 337, column: 1, scope: !3049)
!3077 = distinct !DISubprogram(name: "ipa_compute_jump_functions", scope: !3, file: !3, line: 658, type: !2706, scopeLine: 659, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2371)
!3078 = !DILocalVariable(name: "cs", arg: 1, scope: !3077, file: !3, line: 658, type: !1930)
!3079 = !DILocation(line: 658, column: 49, scope: !3077)
!3080 = !DILocalVariable(name: "info", scope: !3077, file: !3, line: 660, type: !2222)
!3081 = !DILocation(line: 660, column: 27, scope: !3077)
!3082 = !DILocation(line: 660, column: 34, scope: !3077)
!3083 = !DILocalVariable(name: "arguments", scope: !3077, file: !3, line: 661, type: !2772)
!3084 = !DILocation(line: 661, column: 25, scope: !3077)
!3085 = !DILocation(line: 661, column: 37, scope: !3077)
!3086 = !DILocalVariable(name: "call", scope: !3077, file: !3, line: 662, type: !1046)
!3087 = !DILocation(line: 662, column: 10, scope: !3077)
!3088 = !DILocation(line: 664, column: 34, scope: !3089)
!3089 = distinct !DILexicalBlock(scope: !3077, file: !3, line: 664, column: 7)
!3090 = !DILocation(line: 664, column: 7, scope: !3089)
!3091 = !DILocation(line: 664, column: 45, scope: !3089)
!3092 = !DILocation(line: 664, column: 50, scope: !3089)
!3093 = !DILocation(line: 664, column: 53, scope: !3089)
!3094 = !DILocation(line: 664, column: 64, scope: !3089)
!3095 = !DILocation(line: 664, column: 7, scope: !3077)
!3096 = !DILocation(line: 665, column: 5, scope: !3089)
!3097 = !DILocation(line: 666, column: 31, scope: !3077)
!3098 = !DILocation(line: 666, column: 3, scope: !3077)
!3099 = !DILocation(line: 666, column: 14, scope: !3077)
!3100 = !DILocation(line: 666, column: 29, scope: !3077)
!3101 = !DILocation(line: 669, column: 10, scope: !3077)
!3102 = !DILocation(line: 669, column: 14, scope: !3077)
!3103 = !DILocation(line: 669, column: 8, scope: !3077)
!3104 = !DILocation(line: 670, column: 3, scope: !3077)
!3105 = !DILocation(line: 673, column: 34, scope: !3077)
!3106 = !DILocation(line: 673, column: 40, scope: !3077)
!3107 = !DILocation(line: 673, column: 51, scope: !3077)
!3108 = !DILocation(line: 673, column: 67, scope: !3077)
!3109 = !DILocation(line: 673, column: 3, scope: !3077)
!3110 = !DILocation(line: 677, column: 42, scope: !3111)
!3111 = distinct !DILexicalBlock(scope: !3077, file: !3, line: 677, column: 7)
!3112 = !DILocation(line: 677, column: 48, scope: !3111)
!3113 = !DILocation(line: 677, column: 59, scope: !3111)
!3114 = !DILocation(line: 677, column: 75, scope: !3111)
!3115 = !DILocation(line: 677, column: 8, scope: !3111)
!3116 = !DILocation(line: 677, column: 7, scope: !3077)
!3117 = !DILocation(line: 678, column: 5, scope: !3111)
!3118 = !DILocation(line: 682, column: 37, scope: !3077)
!3119 = !DILocation(line: 682, column: 48, scope: !3077)
!3120 = !DILocation(line: 682, column: 64, scope: !3077)
!3121 = !DILocation(line: 682, column: 3, scope: !3077)
!3122 = !DILocation(line: 683, column: 1, scope: !3077)
!3123 = distinct !DISubprogram(name: "compute_scalar_jump_functions", scope: !3, file: !3, line: 413, type: !3124, scopeLine: 416, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2371)
!3124 = !DISubroutineType(types: !3125)
!3125 = !{null, !2222, !2197, !1046}
!3126 = !DILocalVariable(name: "info", arg: 1, scope: !3123, file: !3, line: 413, type: !2222)
!3127 = !DILocation(line: 413, column: 56, scope: !3123)
!3128 = !DILocalVariable(name: "functions", arg: 2, scope: !3123, file: !3, line: 414, type: !2197)
!3129 = !DILocation(line: 414, column: 33, scope: !3123)
!3130 = !DILocalVariable(name: "call", arg: 3, scope: !3123, file: !3, line: 415, type: !1046)
!3131 = !DILocation(line: 415, column: 18, scope: !3123)
!3132 = !DILocalVariable(name: "arg", scope: !3123, file: !3, line: 417, type: !748)
!3133 = !DILocation(line: 417, column: 8, scope: !3123)
!3134 = !DILocalVariable(name: "num", scope: !3123, file: !3, line: 418, type: !7)
!3135 = !DILocation(line: 418, column: 12, scope: !3123)
!3136 = !DILocation(line: 420, column: 12, scope: !3137)
!3137 = distinct !DILexicalBlock(scope: !3123, file: !3, line: 420, column: 3)
!3138 = !DILocation(line: 420, column: 8, scope: !3137)
!3139 = !DILocation(line: 420, column: 17, scope: !3140)
!3140 = distinct !DILexicalBlock(scope: !3137, file: !3, line: 420, column: 3)
!3141 = !DILocation(line: 420, column: 45, scope: !3140)
!3142 = !DILocation(line: 420, column: 23, scope: !3140)
!3143 = !DILocation(line: 420, column: 21, scope: !3140)
!3144 = !DILocation(line: 420, column: 3, scope: !3137)
!3145 = !DILocation(line: 422, column: 30, scope: !3146)
!3146 = distinct !DILexicalBlock(scope: !3140, file: !3, line: 421, column: 5)
!3147 = !DILocation(line: 422, column: 36, scope: !3146)
!3148 = !DILocation(line: 422, column: 13, scope: !3146)
!3149 = !DILocation(line: 422, column: 11, scope: !3146)
!3150 = !DILocation(line: 424, column: 35, scope: !3151)
!3151 = distinct !DILexicalBlock(scope: !3146, file: !3, line: 424, column: 11)
!3152 = !DILocation(line: 424, column: 11, scope: !3151)
!3153 = !DILocation(line: 424, column: 11, scope: !3146)
!3154 = !DILocation(line: 426, column: 4, scope: !3155)
!3155 = distinct !DILexicalBlock(scope: !3151, file: !3, line: 425, column: 2)
!3156 = !DILocation(line: 426, column: 14, scope: !3155)
!3157 = !DILocation(line: 426, column: 19, scope: !3155)
!3158 = !DILocation(line: 426, column: 24, scope: !3155)
!3159 = !DILocation(line: 427, column: 36, scope: !3155)
!3160 = !DILocation(line: 427, column: 4, scope: !3155)
!3161 = !DILocation(line: 427, column: 14, scope: !3155)
!3162 = !DILocation(line: 427, column: 19, scope: !3155)
!3163 = !DILocation(line: 427, column: 25, scope: !3155)
!3164 = !DILocation(line: 427, column: 34, scope: !3155)
!3165 = !DILocation(line: 428, column: 2, scope: !3155)
!3166 = !DILocation(line: 429, column: 16, scope: !3167)
!3167 = distinct !DILexicalBlock(scope: !3151, file: !3, line: 429, column: 16)
!3168 = !DILocation(line: 429, column: 32, scope: !3167)
!3169 = !DILocation(line: 429, column: 16, scope: !3151)
!3170 = !DILocation(line: 431, column: 8, scope: !3171)
!3171 = distinct !DILexicalBlock(scope: !3172, file: !3, line: 431, column: 8)
!3172 = distinct !DILexicalBlock(scope: !3167, file: !3, line: 430, column: 2)
!3173 = !DILocation(line: 431, column: 8, scope: !3172)
!3174 = !DILocalVariable(name: "index", scope: !3175, file: !3, line: 433, type: !829)
!3175 = distinct !DILexicalBlock(scope: !3171, file: !3, line: 432, column: 6)
!3176 = !DILocation(line: 433, column: 12, scope: !3175)
!3177 = !DILocation(line: 433, column: 46, scope: !3175)
!3178 = !DILocation(line: 433, column: 52, scope: !3175)
!3179 = !DILocation(line: 433, column: 20, scope: !3175)
!3180 = !DILocation(line: 435, column: 12, scope: !3181)
!3181 = distinct !DILexicalBlock(scope: !3175, file: !3, line: 435, column: 12)
!3182 = !DILocation(line: 435, column: 18, scope: !3181)
!3183 = !DILocation(line: 435, column: 12, scope: !3175)
!3184 = !DILocation(line: 437, column: 5, scope: !3185)
!3185 = distinct !DILexicalBlock(scope: !3181, file: !3, line: 436, column: 3)
!3186 = !DILocation(line: 437, column: 15, scope: !3185)
!3187 = !DILocation(line: 437, column: 20, scope: !3185)
!3188 = !DILocation(line: 437, column: 25, scope: !3185)
!3189 = !DILocation(line: 438, column: 51, scope: !3185)
!3190 = !DILocation(line: 438, column: 5, scope: !3185)
!3191 = !DILocation(line: 438, column: 15, scope: !3185)
!3192 = !DILocation(line: 438, column: 20, scope: !3185)
!3193 = !DILocation(line: 438, column: 26, scope: !3185)
!3194 = !DILocation(line: 438, column: 39, scope: !3185)
!3195 = !DILocation(line: 438, column: 49, scope: !3185)
!3196 = !DILocation(line: 439, column: 5, scope: !3185)
!3197 = !DILocation(line: 439, column: 15, scope: !3185)
!3198 = !DILocation(line: 439, column: 20, scope: !3185)
!3199 = !DILocation(line: 439, column: 26, scope: !3185)
!3200 = !DILocation(line: 439, column: 39, scope: !3185)
!3201 = !DILocation(line: 439, column: 49, scope: !3185)
!3202 = !DILocation(line: 440, column: 3, scope: !3185)
!3203 = !DILocation(line: 441, column: 6, scope: !3175)
!3204 = !DILocation(line: 443, column: 36, scope: !3171)
!3205 = !DILocation(line: 443, column: 43, scope: !3171)
!3206 = !DILocation(line: 443, column: 53, scope: !3171)
!3207 = !DILocation(line: 443, column: 59, scope: !3171)
!3208 = !DILocation(line: 443, column: 6, scope: !3171)
!3209 = !DILocation(line: 444, column: 2, scope: !3172)
!3210 = !DILocation(line: 445, column: 5, scope: !3146)
!3211 = !DILocation(line: 420, column: 55, scope: !3140)
!3212 = !DILocation(line: 420, column: 3, scope: !3140)
!3213 = distinct !{!3213, !3144, !3214}
!3214 = !DILocation(line: 445, column: 5, scope: !3137)
!3215 = !DILocation(line: 446, column: 1, scope: !3123)
!3216 = distinct !DISubprogram(name: "compute_pass_through_member_ptrs", scope: !3, file: !3, line: 488, type: !3217, scopeLine: 491, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2371)
!3217 = !DISubroutineType(types: !3218)
!3218 = !{!852, !2222, !2197, !1046}
!3219 = !DILocalVariable(name: "info", arg: 1, scope: !3216, file: !3, line: 488, type: !2222)
!3220 = !DILocation(line: 488, column: 59, scope: !3216)
!3221 = !DILocalVariable(name: "functions", arg: 2, scope: !3216, file: !3, line: 489, type: !2197)
!3222 = !DILocation(line: 489, column: 29, scope: !3216)
!3223 = !DILocalVariable(name: "call", arg: 3, scope: !3216, file: !3, line: 490, type: !1046)
!3224 = !DILocation(line: 490, column: 14, scope: !3216)
!3225 = !DILocalVariable(name: "undecided_members", scope: !3216, file: !3, line: 492, type: !852)
!3226 = !DILocation(line: 492, column: 8, scope: !3216)
!3227 = !DILocalVariable(name: "num", scope: !3216, file: !3, line: 493, type: !7)
!3228 = !DILocation(line: 493, column: 12, scope: !3216)
!3229 = !DILocalVariable(name: "arg", scope: !3216, file: !3, line: 494, type: !748)
!3230 = !DILocation(line: 494, column: 8, scope: !3216)
!3231 = !DILocation(line: 496, column: 12, scope: !3232)
!3232 = distinct !DILexicalBlock(scope: !3216, file: !3, line: 496, column: 3)
!3233 = !DILocation(line: 496, column: 8, scope: !3232)
!3234 = !DILocation(line: 496, column: 17, scope: !3235)
!3235 = distinct !DILexicalBlock(scope: !3232, file: !3, line: 496, column: 3)
!3236 = !DILocation(line: 496, column: 45, scope: !3235)
!3237 = !DILocation(line: 496, column: 23, scope: !3235)
!3238 = !DILocation(line: 496, column: 21, scope: !3235)
!3239 = !DILocation(line: 496, column: 3, scope: !3232)
!3240 = !DILocation(line: 498, column: 30, scope: !3241)
!3241 = distinct !DILexicalBlock(scope: !3235, file: !3, line: 497, column: 5)
!3242 = !DILocation(line: 498, column: 36, scope: !3241)
!3243 = !DILocation(line: 498, column: 13, scope: !3241)
!3244 = !DILocation(line: 498, column: 11, scope: !3241)
!3245 = !DILocation(line: 500, column: 35, scope: !3246)
!3246 = distinct !DILexicalBlock(scope: !3241, file: !3, line: 500, column: 11)
!3247 = !DILocation(line: 500, column: 11, scope: !3246)
!3248 = !DILocation(line: 500, column: 11, scope: !3241)
!3249 = !DILocation(line: 502, column: 8, scope: !3250)
!3250 = distinct !DILexicalBlock(scope: !3251, file: !3, line: 502, column: 8)
!3251 = distinct !DILexicalBlock(scope: !3246, file: !3, line: 501, column: 2)
!3252 = !DILocation(line: 502, column: 24, scope: !3250)
!3253 = !DILocation(line: 502, column: 8, scope: !3251)
!3254 = !DILocalVariable(name: "index", scope: !3255, file: !3, line: 504, type: !829)
!3255 = distinct !DILexicalBlock(scope: !3250, file: !3, line: 503, column: 6)
!3256 = !DILocation(line: 504, column: 12, scope: !3255)
!3257 = !DILocation(line: 504, column: 46, scope: !3255)
!3258 = !DILocation(line: 504, column: 52, scope: !3255)
!3259 = !DILocation(line: 504, column: 20, scope: !3255)
!3260 = !DILocation(line: 506, column: 8, scope: !3255)
!3261 = !DILocation(line: 507, column: 36, scope: !3262)
!3262 = distinct !DILexicalBlock(scope: !3255, file: !3, line: 507, column: 12)
!3263 = !DILocation(line: 507, column: 42, scope: !3262)
!3264 = !DILocation(line: 507, column: 13, scope: !3262)
!3265 = !DILocation(line: 507, column: 12, scope: !3255)
!3266 = !DILocation(line: 509, column: 5, scope: !3267)
!3267 = distinct !DILexicalBlock(scope: !3262, file: !3, line: 508, column: 3)
!3268 = !DILocation(line: 509, column: 15, scope: !3267)
!3269 = !DILocation(line: 509, column: 20, scope: !3267)
!3270 = !DILocation(line: 509, column: 25, scope: !3267)
!3271 = !DILocation(line: 510, column: 51, scope: !3267)
!3272 = !DILocation(line: 510, column: 5, scope: !3267)
!3273 = !DILocation(line: 510, column: 15, scope: !3267)
!3274 = !DILocation(line: 510, column: 20, scope: !3267)
!3275 = !DILocation(line: 510, column: 26, scope: !3267)
!3276 = !DILocation(line: 510, column: 39, scope: !3267)
!3277 = !DILocation(line: 510, column: 49, scope: !3267)
!3278 = !DILocation(line: 511, column: 5, scope: !3267)
!3279 = !DILocation(line: 511, column: 15, scope: !3267)
!3280 = !DILocation(line: 511, column: 20, scope: !3267)
!3281 = !DILocation(line: 511, column: 26, scope: !3267)
!3282 = !DILocation(line: 511, column: 39, scope: !3267)
!3283 = !DILocation(line: 511, column: 49, scope: !3267)
!3284 = !DILocation(line: 512, column: 3, scope: !3267)
!3285 = !DILocation(line: 514, column: 21, scope: !3262)
!3286 = !DILocation(line: 515, column: 6, scope: !3255)
!3287 = !DILocation(line: 517, column: 24, scope: !3250)
!3288 = !DILocation(line: 518, column: 2, scope: !3251)
!3289 = !DILocation(line: 519, column: 5, scope: !3241)
!3290 = !DILocation(line: 496, column: 55, scope: !3235)
!3291 = !DILocation(line: 496, column: 3, scope: !3235)
!3292 = distinct !{!3292, !3239, !3293}
!3293 = !DILocation(line: 519, column: 5, scope: !3232)
!3294 = !DILocation(line: 521, column: 10, scope: !3216)
!3295 = !DILocation(line: 521, column: 3, scope: !3216)
!3296 = distinct !DISubprogram(name: "compute_cst_member_ptr_arguments", scope: !3, file: !3, line: 635, type: !3297, scopeLine: 637, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2371)
!3297 = !DISubroutineType(types: !3298)
!3298 = !{null, !2197, !1046}
!3299 = !DILocalVariable(name: "functions", arg: 1, scope: !3296, file: !3, line: 635, type: !2197)
!3300 = !DILocation(line: 635, column: 57, scope: !3296)
!3301 = !DILocalVariable(name: "call", arg: 2, scope: !3296, file: !3, line: 636, type: !1046)
!3302 = !DILocation(line: 636, column: 14, scope: !3296)
!3303 = !DILocalVariable(name: "num", scope: !3296, file: !3, line: 638, type: !7)
!3304 = !DILocation(line: 638, column: 12, scope: !3296)
!3305 = !DILocalVariable(name: "arg", scope: !3296, file: !3, line: 639, type: !748)
!3306 = !DILocation(line: 639, column: 8, scope: !3296)
!3307 = !DILocalVariable(name: "method_field", scope: !3296, file: !3, line: 639, type: !748)
!3308 = !DILocation(line: 639, column: 13, scope: !3296)
!3309 = !DILocalVariable(name: "delta_field", scope: !3296, file: !3, line: 639, type: !748)
!3310 = !DILocation(line: 639, column: 27, scope: !3296)
!3311 = !DILocation(line: 641, column: 12, scope: !3312)
!3312 = distinct !DILexicalBlock(scope: !3296, file: !3, line: 641, column: 3)
!3313 = !DILocation(line: 641, column: 8, scope: !3312)
!3314 = !DILocation(line: 641, column: 17, scope: !3315)
!3315 = distinct !DILexicalBlock(scope: !3312, file: !3, line: 641, column: 3)
!3316 = !DILocation(line: 641, column: 45, scope: !3315)
!3317 = !DILocation(line: 641, column: 23, scope: !3315)
!3318 = !DILocation(line: 641, column: 21, scope: !3315)
!3319 = !DILocation(line: 641, column: 3, scope: !3312)
!3320 = !DILocation(line: 643, column: 30, scope: !3321)
!3321 = distinct !DILexicalBlock(scope: !3315, file: !3, line: 642, column: 5)
!3322 = !DILocation(line: 643, column: 36, scope: !3321)
!3323 = !DILocation(line: 643, column: 13, scope: !3321)
!3324 = !DILocation(line: 643, column: 11, scope: !3321)
!3325 = !DILocation(line: 645, column: 11, scope: !3326)
!3326 = distinct !DILexicalBlock(scope: !3321, file: !3, line: 645, column: 11)
!3327 = !DILocation(line: 645, column: 21, scope: !3326)
!3328 = !DILocation(line: 645, column: 26, scope: !3326)
!3329 = !DILocation(line: 645, column: 31, scope: !3326)
!3330 = !DILocation(line: 646, column: 4, scope: !3326)
!3331 = !DILocation(line: 646, column: 31, scope: !3326)
!3332 = !DILocation(line: 646, column: 7, scope: !3326)
!3333 = !DILocation(line: 645, column: 11, scope: !3321)
!3334 = !DILocation(line: 648, column: 28, scope: !3326)
!3335 = !DILocation(line: 648, column: 34, scope: !3326)
!3336 = !DILocation(line: 648, column: 39, scope: !3326)
!3337 = !DILocation(line: 648, column: 53, scope: !3326)
!3338 = !DILocation(line: 649, column: 8, scope: !3326)
!3339 = !DILocation(line: 649, column: 18, scope: !3326)
!3340 = !DILocation(line: 648, column: 2, scope: !3326)
!3341 = !DILocation(line: 650, column: 5, scope: !3321)
!3342 = !DILocation(line: 641, column: 55, scope: !3315)
!3343 = !DILocation(line: 641, column: 3, scope: !3315)
!3344 = distinct !{!3344, !3319, !3345}
!3345 = !DILocation(line: 650, column: 5, scope: !3312)
!3346 = !DILocation(line: 651, column: 1, scope: !3296)
!3347 = distinct !DISubprogram(name: "ipa_analyze_params_uses", scope: !3, file: !3, line: 950, type: !2038, scopeLine: 951, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2371)
!3348 = !DILocalVariable(name: "node", arg: 1, scope: !3347, file: !3, line: 950, type: !744)
!3349 = !DILocation(line: 950, column: 46, scope: !3347)
!3350 = !DILocalVariable(name: "decl", scope: !3347, file: !3, line: 952, type: !748)
!3351 = !DILocation(line: 952, column: 8, scope: !3347)
!3352 = !DILocation(line: 952, column: 15, scope: !3347)
!3353 = !DILocation(line: 952, column: 21, scope: !3347)
!3354 = !DILocalVariable(name: "bb", scope: !3347, file: !3, line: 953, type: !1009)
!3355 = !DILocation(line: 953, column: 15, scope: !3347)
!3356 = !DILocalVariable(name: "func", scope: !3347, file: !3, line: 954, type: !997)
!3357 = !DILocation(line: 954, column: 20, scope: !3347)
!3358 = !DILocalVariable(name: "gsi", scope: !3347, file: !3, line: 955, type: !2575)
!3359 = !DILocation(line: 955, column: 24, scope: !3347)
!3360 = !DILocalVariable(name: "info", scope: !3347, file: !3, line: 956, type: !2222)
!3361 = !DILocation(line: 956, column: 27, scope: !3347)
!3362 = !DILocation(line: 956, column: 34, scope: !3347)
!3363 = !DILocation(line: 958, column: 28, scope: !3364)
!3364 = distinct !DILexicalBlock(scope: !3347, file: !3, line: 958, column: 7)
!3365 = !DILocation(line: 958, column: 7, scope: !3364)
!3366 = !DILocation(line: 958, column: 34, scope: !3364)
!3367 = !DILocation(line: 958, column: 39, scope: !3364)
!3368 = !DILocation(line: 958, column: 42, scope: !3364)
!3369 = !DILocation(line: 958, column: 48, scope: !3364)
!3370 = !DILocation(line: 958, column: 7, scope: !3347)
!3371 = !DILocation(line: 959, column: 5, scope: !3364)
!3372 = !DILocation(line: 961, column: 10, scope: !3347)
!3373 = !DILocation(line: 961, column: 8, scope: !3347)
!3374 = !DILocation(line: 962, column: 3, scope: !3375)
!3375 = distinct !DILexicalBlock(scope: !3347, file: !3, line: 962, column: 3)
!3376 = !DILocation(line: 962, column: 3, scope: !3377)
!3377 = distinct !DILexicalBlock(scope: !3375, file: !3, line: 962, column: 3)
!3378 = !DILocation(line: 964, column: 32, scope: !3379)
!3379 = distinct !DILexicalBlock(scope: !3380, file: !3, line: 964, column: 7)
!3380 = distinct !DILexicalBlock(scope: !3377, file: !3, line: 963, column: 5)
!3381 = !DILocation(line: 964, column: 18, scope: !3379)
!3382 = !DILocation(line: 964, column: 12, scope: !3379)
!3383 = !DILocation(line: 964, column: 38, scope: !3384)
!3384 = distinct !DILexicalBlock(scope: !3379, file: !3, line: 964, column: 7)
!3385 = !DILocation(line: 964, column: 37, scope: !3384)
!3386 = !DILocation(line: 964, column: 7, scope: !3379)
!3387 = !DILocalVariable(name: "stmt", scope: !3388, file: !3, line: 966, type: !1046)
!3388 = distinct !DILexicalBlock(scope: !3384, file: !3, line: 965, column: 2)
!3389 = !DILocation(line: 966, column: 11, scope: !3388)
!3390 = !DILocation(line: 966, column: 18, scope: !3388)
!3391 = !DILocation(line: 967, column: 27, scope: !3388)
!3392 = !DILocation(line: 967, column: 33, scope: !3388)
!3393 = !DILocation(line: 967, column: 4, scope: !3388)
!3394 = !DILocation(line: 968, column: 2, scope: !3388)
!3395 = !DILocation(line: 964, column: 55, scope: !3384)
!3396 = !DILocation(line: 964, column: 7, scope: !3384)
!3397 = distinct !{!3397, !3386, !3398}
!3398 = !DILocation(line: 968, column: 2, scope: !3379)
!3399 = !DILocation(line: 969, column: 5, scope: !3380)
!3400 = distinct !{!3400, !3374, !3401}
!3401 = !DILocation(line: 969, column: 5, scope: !3375)
!3402 = !DILocation(line: 971, column: 3, scope: !3347)
!3403 = !DILocation(line: 971, column: 9, scope: !3347)
!3404 = !DILocation(line: 971, column: 28, scope: !3347)
!3405 = !DILocation(line: 972, column: 1, scope: !3347)
!3406 = distinct !DISubprogram(name: "ipa_analyze_stmt_uses", scope: !3, file: !3, line: 939, type: !3407, scopeLine: 940, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2371)
!3407 = !DISubroutineType(types: !3408)
!3408 = !{null, !2222, !1046}
!3409 = !DILocalVariable(name: "info", arg: 1, scope: !3406, file: !3, line: 939, type: !2222)
!3410 = !DILocation(line: 939, column: 48, scope: !3406)
!3411 = !DILocalVariable(name: "stmt", arg: 2, scope: !3406, file: !3, line: 939, type: !1046)
!3412 = !DILocation(line: 939, column: 61, scope: !3406)
!3413 = !DILocation(line: 941, column: 23, scope: !3414)
!3414 = distinct !DILexicalBlock(scope: !3406, file: !3, line: 941, column: 7)
!3415 = !DILocation(line: 941, column: 7, scope: !3414)
!3416 = !DILocation(line: 941, column: 7, scope: !3406)
!3417 = !DILocation(line: 942, column: 28, scope: !3414)
!3418 = !DILocation(line: 942, column: 34, scope: !3414)
!3419 = !DILocation(line: 942, column: 5, scope: !3414)
!3420 = !DILocation(line: 943, column: 1, scope: !3406)
!3421 = distinct !DISubprogram(name: "ipa_propagate_indirect_call_infos", scope: !3, file: !3, line: 1156, type: !3422, scopeLine: 1158, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2371)
!3422 = !DISubroutineType(types: !3423)
!3423 = !{!852, !1930, !3424}
!3424 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2264, size: 64)
!3425 = !DILocalVariable(name: "cs", arg: 1, scope: !3421, file: !3, line: 1156, type: !1930)
!3426 = !DILocation(line: 1156, column: 56, scope: !3421)
!3427 = !DILocalVariable(name: "new_edges", arg: 2, scope: !3421, file: !3, line: 1157, type: !3424)
!3428 = !DILocation(line: 1157, column: 36, scope: !3421)
!3429 = !DILocation(line: 1160, column: 7, scope: !3430)
!3430 = distinct !DILexicalBlock(scope: !3421, file: !3, line: 1160, column: 7)
!3431 = !DILocation(line: 1160, column: 7, scope: !3421)
!3432 = !DILocation(line: 1161, column: 5, scope: !3430)
!3433 = !DILocation(line: 1165, column: 8, scope: !3434)
!3434 = distinct !DILexicalBlock(scope: !3421, file: !3, line: 1165, column: 7)
!3435 = !DILocation(line: 1165, column: 7, scope: !3421)
!3436 = !DILocation(line: 1166, column: 5, scope: !3434)
!3437 = !DILocation(line: 1167, column: 3, scope: !3421)
!3438 = !DILocation(line: 1169, column: 45, scope: !3421)
!3439 = !DILocation(line: 1169, column: 49, scope: !3421)
!3440 = !DILocation(line: 1169, column: 53, scope: !3421)
!3441 = !DILocation(line: 1169, column: 61, scope: !3421)
!3442 = !DILocation(line: 1169, column: 10, scope: !3421)
!3443 = !DILocation(line: 1169, column: 3, scope: !3421)
!3444 = !DILocation(line: 1170, column: 1, scope: !3421)
!3445 = distinct !DISubprogram(name: "propagate_info_to_inlined_callees", scope: !3, file: !3, line: 1131, type: !3446, scopeLine: 1134, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2371)
!3446 = !DISubroutineType(types: !3447)
!3447 = !{!852, !1930, !744, !3424}
!3448 = !DILocalVariable(name: "cs", arg: 1, scope: !3445, file: !3, line: 1131, type: !1930)
!3449 = !DILocation(line: 1131, column: 56, scope: !3445)
!3450 = !DILocalVariable(name: "node", arg: 2, scope: !3445, file: !3, line: 1132, type: !744)
!3451 = !DILocation(line: 1132, column: 28, scope: !3445)
!3452 = !DILocalVariable(name: "new_edges", arg: 3, scope: !3445, file: !3, line: 1133, type: !3424)
!3453 = !DILocation(line: 1133, column: 36, scope: !3445)
!3454 = !DILocalVariable(name: "e", scope: !3445, file: !3, line: 1135, type: !1930)
!3455 = !DILocation(line: 1135, column: 23, scope: !3445)
!3456 = !DILocalVariable(name: "res", scope: !3445, file: !3, line: 1136, type: !852)
!3457 = !DILocation(line: 1136, column: 8, scope: !3445)
!3458 = !DILocation(line: 1138, column: 43, scope: !3445)
!3459 = !DILocation(line: 1138, column: 47, scope: !3445)
!3460 = !DILocation(line: 1138, column: 53, scope: !3445)
!3461 = !DILocation(line: 1138, column: 9, scope: !3445)
!3462 = !DILocation(line: 1138, column: 7, scope: !3445)
!3463 = !DILocation(line: 1140, column: 12, scope: !3464)
!3464 = distinct !DILexicalBlock(scope: !3445, file: !3, line: 1140, column: 3)
!3465 = !DILocation(line: 1140, column: 18, scope: !3464)
!3466 = !DILocation(line: 1140, column: 10, scope: !3464)
!3467 = !DILocation(line: 1140, column: 8, scope: !3464)
!3468 = !DILocation(line: 1140, column: 27, scope: !3469)
!3469 = distinct !DILexicalBlock(scope: !3464, file: !3, line: 1140, column: 3)
!3470 = !DILocation(line: 1140, column: 3, scope: !3464)
!3471 = !DILocation(line: 1141, column: 10, scope: !3472)
!3472 = distinct !DILexicalBlock(scope: !3469, file: !3, line: 1141, column: 9)
!3473 = !DILocation(line: 1141, column: 13, scope: !3472)
!3474 = !DILocation(line: 1141, column: 9, scope: !3469)
!3475 = !DILocation(line: 1142, column: 49, scope: !3472)
!3476 = !DILocation(line: 1142, column: 53, scope: !3472)
!3477 = !DILocation(line: 1142, column: 56, scope: !3472)
!3478 = !DILocation(line: 1142, column: 64, scope: !3472)
!3479 = !DILocation(line: 1142, column: 14, scope: !3472)
!3480 = !DILocation(line: 1142, column: 11, scope: !3472)
!3481 = !DILocation(line: 1142, column: 7, scope: !3472)
!3482 = !DILocation(line: 1144, column: 45, scope: !3472)
!3483 = !DILocation(line: 1144, column: 49, scope: !3472)
!3484 = !DILocation(line: 1144, column: 7, scope: !3472)
!3485 = !DILocation(line: 1140, column: 34, scope: !3469)
!3486 = !DILocation(line: 1140, column: 37, scope: !3469)
!3487 = !DILocation(line: 1140, column: 32, scope: !3469)
!3488 = !DILocation(line: 1140, column: 3, scope: !3469)
!3489 = distinct !{!3489, !3470, !3490}
!3490 = !DILocation(line: 1144, column: 50, scope: !3464)
!3491 = !DILocation(line: 1146, column: 10, scope: !3445)
!3492 = !DILocation(line: 1146, column: 3, scope: !3445)
!3493 = distinct !DISubprogram(name: "ipa_free_edge_args_substructures", scope: !3, file: !3, line: 1176, type: !3494, scopeLine: 1177, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2371)
!3494 = !DISubroutineType(types: !3495)
!3495 = !{null, !2772}
!3496 = !DILocalVariable(name: "args", arg: 1, scope: !3493, file: !3, line: 1176, type: !2772)
!3497 = !DILocation(line: 1176, column: 57, scope: !3493)
!3498 = !DILocation(line: 1178, column: 7, scope: !3499)
!3499 = distinct !DILexicalBlock(scope: !3493, file: !3, line: 1178, column: 7)
!3500 = !DILocation(line: 1178, column: 13, scope: !3499)
!3501 = !DILocation(line: 1178, column: 7, scope: !3493)
!3502 = !DILocation(line: 1179, column: 15, scope: !3499)
!3503 = !DILocation(line: 1179, column: 21, scope: !3499)
!3504 = !DILocation(line: 1179, column: 5, scope: !3499)
!3505 = !DILocation(line: 1181, column: 11, scope: !3493)
!3506 = !DILocation(line: 1181, column: 3, scope: !3493)
!3507 = !DILocation(line: 1182, column: 1, scope: !3493)
!3508 = distinct !DISubprogram(name: "ipa_free_all_edge_args", scope: !3, file: !3, line: 1187, type: !2010, scopeLine: 1188, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2371)
!3509 = !DILocalVariable(name: "i", scope: !3508, file: !3, line: 1189, type: !829)
!3510 = !DILocation(line: 1189, column: 7, scope: !3508)
!3511 = !DILocalVariable(name: "args", scope: !3508, file: !3, line: 1190, type: !2772)
!3512 = !DILocation(line: 1190, column: 25, scope: !3508)
!3513 = !DILocation(line: 1192, column: 10, scope: !3514)
!3514 = distinct !DILexicalBlock(scope: !3508, file: !3, line: 1192, column: 3)
!3515 = !DILocation(line: 1192, column: 8, scope: !3514)
!3516 = !DILocation(line: 1193, column: 8, scope: !3517)
!3517 = distinct !DILexicalBlock(scope: !3514, file: !3, line: 1192, column: 3)
!3518 = !DILocation(line: 1192, column: 3, scope: !3514)
!3519 = !DILocation(line: 1195, column: 39, scope: !3517)
!3520 = !DILocation(line: 1195, column: 5, scope: !3517)
!3521 = !DILocation(line: 1194, column: 9, scope: !3517)
!3522 = !DILocation(line: 1192, column: 3, scope: !3517)
!3523 = distinct !{!3523, !3518, !3524}
!3524 = !DILocation(line: 1195, column: 43, scope: !3514)
!3525 = !DILocation(line: 1197, column: 3, scope: !3508)
!3526 = !DILocation(line: 1198, column: 24, scope: !3508)
!3527 = !DILocation(line: 1199, column: 1, scope: !3508)
!3528 = distinct !DISubprogram(name: "VEC_ipa_edge_args_t_base_iterate", scope: !456, file: !456, line: 316, type: !3529, scopeLine: 316, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2371)
!3529 = !DISubroutineType(types: !3530)
!3530 = !{!829, !2786, !7, !3531}
!3531 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2785, size: 64)
!3532 = !DILocalVariable(name: "vec_", arg: 1, scope: !3528, file: !456, line: 316, type: !2786)
!3533 = !DILocation(line: 316, column: 1, scope: !3528)
!3534 = !DILocalVariable(name: "ix_", arg: 2, scope: !3528, file: !456, line: 316, type: !7)
!3535 = !DILocalVariable(name: "ptr", arg: 3, scope: !3528, file: !456, line: 316, type: !3531)
!3536 = !DILocation(line: 316, column: 1, scope: !3537)
!3537 = distinct !DILexicalBlock(scope: !3528, file: !456, line: 316, column: 1)
!3538 = !DILocation(line: 316, column: 1, scope: !3539)
!3539 = distinct !DILexicalBlock(scope: !3537, file: !456, line: 316, column: 1)
!3540 = !DILocation(line: 316, column: 1, scope: !3541)
!3541 = distinct !DILexicalBlock(scope: !3537, file: !456, line: 316, column: 1)
!3542 = distinct !DISubprogram(name: "VEC_ipa_edge_args_t_gc_free", scope: !456, file: !456, line: 317, type: !3543, scopeLine: 317, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2371)
!3543 = !DISubroutineType(types: !3544)
!3544 = !{null, !2764}
!3545 = !DILocalVariable(name: "vec_", arg: 1, scope: !3542, file: !456, line: 317, type: !2764)
!3546 = !DILocation(line: 317, column: 1, scope: !3542)
!3547 = !DILocation(line: 317, column: 1, scope: !3548)
!3548 = distinct !DILexicalBlock(scope: !3542, file: !456, line: 317, column: 1)
!3549 = distinct !DISubprogram(name: "ipa_free_node_params_substructures", scope: !3, file: !3, line: 1205, type: !3550, scopeLine: 1206, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2371)
!3550 = !DISubroutineType(types: !3551)
!3551 = !{null, !2222}
!3552 = !DILocalVariable(name: "info", arg: 1, scope: !3549, file: !3, line: 1205, type: !2222)
!3553 = !DILocation(line: 1205, column: 61, scope: !3549)
!3554 = !DILocation(line: 1207, column: 7, scope: !3555)
!3555 = distinct !DILexicalBlock(scope: !3549, file: !3, line: 1207, column: 7)
!3556 = !DILocation(line: 1207, column: 13, scope: !3555)
!3557 = !DILocation(line: 1207, column: 7, scope: !3549)
!3558 = !DILocation(line: 1208, column: 11, scope: !3555)
!3559 = !DILocation(line: 1208, column: 17, scope: !3555)
!3560 = !DILocation(line: 1208, column: 5, scope: !3555)
!3561 = !DILocation(line: 1210, column: 3, scope: !3549)
!3562 = !DILocation(line: 1210, column: 10, scope: !3549)
!3563 = !DILocation(line: 1210, column: 16, scope: !3549)
!3564 = !DILocalVariable(name: "note", scope: !3565, file: !3, line: 1212, type: !2228)
!3565 = distinct !DILexicalBlock(scope: !3549, file: !3, line: 1211, column: 5)
!3566 = !DILocation(line: 1212, column: 35, scope: !3565)
!3567 = !DILocation(line: 1212, column: 42, scope: !3565)
!3568 = !DILocation(line: 1212, column: 48, scope: !3565)
!3569 = !DILocation(line: 1213, column: 27, scope: !3565)
!3570 = !DILocation(line: 1213, column: 33, scope: !3565)
!3571 = !DILocation(line: 1213, column: 7, scope: !3565)
!3572 = !DILocation(line: 1213, column: 13, scope: !3565)
!3573 = !DILocation(line: 1213, column: 25, scope: !3565)
!3574 = !DILocation(line: 1214, column: 13, scope: !3565)
!3575 = !DILocation(line: 1214, column: 7, scope: !3565)
!3576 = distinct !{!3576, !3561, !3577}
!3577 = !DILocation(line: 1215, column: 5, scope: !3549)
!3578 = !DILocation(line: 1217, column: 11, scope: !3549)
!3579 = !DILocation(line: 1217, column: 3, scope: !3549)
!3580 = !DILocation(line: 1218, column: 1, scope: !3549)
!3581 = distinct !DISubprogram(name: "ipa_free_all_node_params", scope: !3, file: !3, line: 1223, type: !2010, scopeLine: 1224, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2371)
!3582 = !DILocalVariable(name: "i", scope: !3581, file: !3, line: 1225, type: !829)
!3583 = !DILocation(line: 1225, column: 7, scope: !3581)
!3584 = !DILocalVariable(name: "info", scope: !3581, file: !3, line: 1226, type: !2222)
!3585 = !DILocation(line: 1226, column: 27, scope: !3581)
!3586 = !DILocation(line: 1228, column: 10, scope: !3587)
!3587 = distinct !DILexicalBlock(scope: !3581, file: !3, line: 1228, column: 3)
!3588 = !DILocation(line: 1228, column: 8, scope: !3587)
!3589 = !DILocation(line: 1229, column: 8, scope: !3590)
!3590 = distinct !DILexicalBlock(scope: !3587, file: !3, line: 1228, column: 3)
!3591 = !DILocation(line: 1228, column: 3, scope: !3587)
!3592 = !DILocation(line: 1231, column: 41, scope: !3590)
!3593 = !DILocation(line: 1231, column: 5, scope: !3590)
!3594 = !DILocation(line: 1230, column: 9, scope: !3590)
!3595 = !DILocation(line: 1228, column: 3, scope: !3590)
!3596 = distinct !{!3596, !3591, !3597}
!3597 = !DILocation(line: 1231, column: 45, scope: !3587)
!3598 = !DILocation(line: 1233, column: 3, scope: !3581)
!3599 = !DILocation(line: 1234, column: 26, scope: !3581)
!3600 = !DILocation(line: 1235, column: 1, scope: !3581)
!3601 = distinct !DISubprogram(name: "VEC_ipa_node_params_t_base_iterate", scope: !456, file: !456, line: 314, type: !3602, scopeLine: 314, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2371)
!3602 = !DISubroutineType(types: !3603)
!3603 = !{!829, !2438, !7, !3604}
!3604 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2437, size: 64)
!3605 = !DILocalVariable(name: "vec_", arg: 1, scope: !3601, file: !456, line: 314, type: !2438)
!3606 = !DILocation(line: 314, column: 1, scope: !3601)
!3607 = !DILocalVariable(name: "ix_", arg: 2, scope: !3601, file: !456, line: 314, type: !7)
!3608 = !DILocalVariable(name: "ptr", arg: 3, scope: !3601, file: !456, line: 314, type: !3604)
!3609 = !DILocation(line: 314, column: 1, scope: !3610)
!3610 = distinct !DILexicalBlock(scope: !3601, file: !456, line: 314, column: 1)
!3611 = !DILocation(line: 314, column: 1, scope: !3612)
!3612 = distinct !DILexicalBlock(scope: !3610, file: !456, line: 314, column: 1)
!3613 = !DILocation(line: 314, column: 1, scope: !3614)
!3614 = distinct !DILexicalBlock(scope: !3610, file: !456, line: 314, column: 1)
!3615 = distinct !DISubprogram(name: "VEC_ipa_node_params_t_heap_free", scope: !456, file: !456, line: 315, type: !3616, scopeLine: 315, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2371)
!3616 = !DISubroutineType(types: !3617)
!3617 = !{null, !3618}
!3618 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2307, size: 64)
!3619 = !DILocalVariable(name: "vec_", arg: 1, scope: !3615, file: !456, line: 315, type: !3618)
!3620 = !DILocation(line: 315, column: 1, scope: !3615)
!3621 = !DILocation(line: 315, column: 1, scope: !3622)
!3622 = distinct !DILexicalBlock(scope: !3615, file: !456, line: 315, column: 1)
!3623 = distinct !DISubprogram(name: "ipa_register_cgraph_hooks", scope: !3, file: !3, line: 1346, type: !2010, scopeLine: 1347, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2371)
!3624 = !DILocation(line: 1348, column: 8, scope: !3625)
!3625 = distinct !DILexicalBlock(scope: !3623, file: !3, line: 1348, column: 7)
!3626 = !DILocation(line: 1348, column: 7, scope: !3623)
!3627 = !DILocation(line: 1350, column: 7, scope: !3625)
!3628 = !DILocation(line: 1349, column: 30, scope: !3625)
!3629 = !DILocation(line: 1349, column: 5, scope: !3625)
!3630 = !DILocation(line: 1351, column: 8, scope: !3631)
!3631 = distinct !DILexicalBlock(scope: !3623, file: !3, line: 1351, column: 7)
!3632 = !DILocation(line: 1351, column: 7, scope: !3623)
!3633 = !DILocation(line: 1353, column: 7, scope: !3631)
!3634 = !DILocation(line: 1352, column: 30, scope: !3631)
!3635 = !DILocation(line: 1352, column: 5, scope: !3631)
!3636 = !DILocation(line: 1354, column: 8, scope: !3637)
!3637 = distinct !DILexicalBlock(scope: !3623, file: !3, line: 1354, column: 7)
!3638 = !DILocation(line: 1354, column: 7, scope: !3623)
!3639 = !DILocation(line: 1356, column: 7, scope: !3637)
!3640 = !DILocation(line: 1355, column: 34, scope: !3637)
!3641 = !DILocation(line: 1355, column: 5, scope: !3637)
!3642 = !DILocation(line: 1357, column: 8, scope: !3643)
!3643 = distinct !DILexicalBlock(scope: !3623, file: !3, line: 1357, column: 7)
!3644 = !DILocation(line: 1357, column: 7, scope: !3623)
!3645 = !DILocation(line: 1359, column: 7, scope: !3643)
!3646 = !DILocation(line: 1358, column: 34, scope: !3643)
!3647 = !DILocation(line: 1358, column: 5, scope: !3643)
!3648 = !DILocation(line: 1360, column: 1, scope: !3623)
!3649 = distinct !DISubprogram(name: "ipa_edge_removal_hook", scope: !3, file: !3, line: 1240, type: !3650, scopeLine: 1241, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2371)
!3650 = !DISubroutineType(types: !3651)
!3651 = !{null, !1930, !1254}
!3652 = !DILocalVariable(name: "cs", arg: 1, scope: !3649, file: !3, line: 1240, type: !1930)
!3653 = !DILocation(line: 1240, column: 44, scope: !3649)
!3654 = !DILocalVariable(name: "data", arg: 2, scope: !3649, file: !3, line: 1240, type: !1254)
!3655 = !DILocation(line: 1240, column: 54, scope: !3649)
!3656 = !DILocation(line: 1243, column: 7, scope: !3657)
!3657 = distinct !DILexicalBlock(scope: !3649, file: !3, line: 1243, column: 7)
!3658 = !DILocation(line: 1244, column: 20, scope: !3657)
!3659 = !DILocation(line: 1244, column: 24, scope: !3657)
!3660 = !DILocation(line: 1244, column: 7, scope: !3657)
!3661 = !DILocation(line: 1243, column: 7, scope: !3649)
!3662 = !DILocation(line: 1245, column: 5, scope: !3657)
!3663 = !DILocation(line: 1246, column: 37, scope: !3649)
!3664 = !DILocation(line: 1246, column: 3, scope: !3649)
!3665 = !DILocation(line: 1247, column: 1, scope: !3649)
!3666 = distinct !DISubprogram(name: "ipa_node_removal_hook", scope: !3, file: !3, line: 1252, type: !3667, scopeLine: 1253, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2371)
!3667 = !DISubroutineType(types: !3668)
!3668 = !{null, !744, !1254}
!3669 = !DILocalVariable(name: "node", arg: 1, scope: !3666, file: !3, line: 1252, type: !744)
!3670 = !DILocation(line: 1252, column: 44, scope: !3666)
!3671 = !DILocalVariable(name: "data", arg: 2, scope: !3666, file: !3, line: 1252, type: !1254)
!3672 = !DILocation(line: 1252, column: 56, scope: !3666)
!3673 = !DILocation(line: 1254, column: 39, scope: !3666)
!3674 = !DILocation(line: 1254, column: 3, scope: !3666)
!3675 = !DILocation(line: 1255, column: 1, scope: !3666)
!3676 = distinct !DISubprogram(name: "ipa_edge_duplication_hook", scope: !3, file: !3, line: 1291, type: !3677, scopeLine: 1293, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2371)
!3677 = !DISubroutineType(types: !3678)
!3678 = !{null, !1930, !1930, !1254}
!3679 = !DILocalVariable(name: "src", arg: 1, scope: !3676, file: !3, line: 1291, type: !1930)
!3680 = !DILocation(line: 1291, column: 48, scope: !3676)
!3681 = !DILocalVariable(name: "dst", arg: 2, scope: !3676, file: !3, line: 1291, type: !1930)
!3682 = !DILocation(line: 1291, column: 73, scope: !3676)
!3683 = !DILocalVariable(name: "data", arg: 3, scope: !3676, file: !3, line: 1292, type: !1254)
!3684 = !DILocation(line: 1292, column: 37, scope: !3676)
!3685 = !DILocalVariable(name: "old_args", scope: !3676, file: !3, line: 1294, type: !2772)
!3686 = !DILocation(line: 1294, column: 25, scope: !3676)
!3687 = !DILocalVariable(name: "new_args", scope: !3676, file: !3, line: 1294, type: !2772)
!3688 = !DILocation(line: 1294, column: 36, scope: !3676)
!3689 = !DILocalVariable(name: "arg_count", scope: !3676, file: !3, line: 1295, type: !829)
!3690 = !DILocation(line: 1295, column: 7, scope: !3676)
!3691 = !DILocation(line: 1297, column: 3, scope: !3676)
!3692 = !DILocation(line: 1299, column: 14, scope: !3676)
!3693 = !DILocation(line: 1299, column: 12, scope: !3676)
!3694 = !DILocation(line: 1300, column: 14, scope: !3676)
!3695 = !DILocation(line: 1300, column: 12, scope: !3676)
!3696 = !DILocation(line: 1302, column: 42, scope: !3676)
!3697 = !DILocation(line: 1302, column: 15, scope: !3676)
!3698 = !DILocation(line: 1302, column: 13, scope: !3676)
!3699 = !DILocation(line: 1303, column: 30, scope: !3676)
!3700 = !DILocation(line: 1303, column: 40, scope: !3676)
!3701 = !DILocation(line: 1303, column: 3, scope: !3676)
!3702 = !DILocation(line: 1305, column: 26, scope: !3676)
!3703 = !DILocation(line: 1305, column: 36, scope: !3676)
!3704 = !DILocation(line: 1306, column: 44, scope: !3676)
!3705 = !DILocation(line: 1306, column: 42, scope: !3676)
!3706 = !DILocation(line: 1305, column: 5, scope: !3676)
!3707 = !DILocation(line: 1304, column: 30, scope: !3676)
!3708 = !DILocation(line: 1304, column: 3, scope: !3676)
!3709 = !DILocation(line: 1304, column: 13, scope: !3676)
!3710 = !DILocation(line: 1304, column: 28, scope: !3676)
!3711 = !DILocation(line: 1307, column: 1, scope: !3676)
!3712 = distinct !DISubprogram(name: "ipa_node_duplication_hook", scope: !3, file: !3, line: 1312, type: !3713, scopeLine: 1314, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2371)
!3713 = !DISubroutineType(types: !3714)
!3714 = !{null, !744, !744, !1254}
!3715 = !DILocalVariable(name: "src", arg: 1, scope: !3712, file: !3, line: 1312, type: !744)
!3716 = !DILocation(line: 1312, column: 48, scope: !3712)
!3717 = !DILocalVariable(name: "dst", arg: 2, scope: !3712, file: !3, line: 1312, type: !744)
!3718 = !DILocation(line: 1312, column: 73, scope: !3712)
!3719 = !DILocalVariable(name: "data", arg: 3, scope: !3712, file: !3, line: 1313, type: !1254)
!3720 = !DILocation(line: 1313, column: 37, scope: !3712)
!3721 = !DILocalVariable(name: "old_info", scope: !3712, file: !3, line: 1315, type: !2222)
!3722 = !DILocation(line: 1315, column: 27, scope: !3712)
!3723 = !DILocalVariable(name: "new_info", scope: !3712, file: !3, line: 1315, type: !2222)
!3724 = !DILocation(line: 1315, column: 38, scope: !3712)
!3725 = !DILocalVariable(name: "note", scope: !3712, file: !3, line: 1316, type: !2228)
!3726 = !DILocation(line: 1316, column: 31, scope: !3712)
!3727 = !DILocalVariable(name: "param_count", scope: !3712, file: !3, line: 1317, type: !829)
!3728 = !DILocation(line: 1317, column: 7, scope: !3712)
!3729 = !DILocation(line: 1319, column: 3, scope: !3712)
!3730 = !DILocation(line: 1320, column: 14, scope: !3712)
!3731 = !DILocation(line: 1320, column: 12, scope: !3712)
!3732 = !DILocation(line: 1321, column: 14, scope: !3712)
!3733 = !DILocation(line: 1321, column: 12, scope: !3712)
!3734 = !DILocation(line: 1322, column: 38, scope: !3712)
!3735 = !DILocation(line: 1322, column: 17, scope: !3712)
!3736 = !DILocation(line: 1322, column: 15, scope: !3712)
!3737 = !DILocation(line: 1324, column: 24, scope: !3712)
!3738 = !DILocation(line: 1324, column: 34, scope: !3712)
!3739 = !DILocation(line: 1324, column: 3, scope: !3712)
!3740 = !DILocation(line: 1326, column: 22, scope: !3712)
!3741 = !DILocation(line: 1326, column: 32, scope: !3712)
!3742 = !DILocation(line: 1327, column: 47, scope: !3712)
!3743 = !DILocation(line: 1327, column: 45, scope: !3712)
!3744 = !DILocation(line: 1326, column: 5, scope: !3712)
!3745 = !DILocation(line: 1325, column: 22, scope: !3712)
!3746 = !DILocation(line: 1325, column: 3, scope: !3712)
!3747 = !DILocation(line: 1325, column: 13, scope: !3712)
!3748 = !DILocation(line: 1325, column: 20, scope: !3712)
!3749 = !DILocation(line: 1328, column: 30, scope: !3712)
!3750 = !DILocation(line: 1328, column: 40, scope: !3712)
!3751 = !DILocation(line: 1328, column: 3, scope: !3712)
!3752 = !DILocation(line: 1328, column: 13, scope: !3712)
!3753 = !DILocation(line: 1328, column: 28, scope: !3712)
!3754 = !DILocation(line: 1329, column: 27, scope: !3712)
!3755 = !DILocation(line: 1329, column: 37, scope: !3712)
!3756 = !DILocation(line: 1329, column: 3, scope: !3712)
!3757 = !DILocation(line: 1329, column: 13, scope: !3712)
!3758 = !DILocation(line: 1329, column: 25, scope: !3712)
!3759 = !DILocation(line: 1331, column: 15, scope: !3760)
!3760 = distinct !DILexicalBlock(scope: !3712, file: !3, line: 1331, column: 3)
!3761 = !DILocation(line: 1331, column: 25, scope: !3760)
!3762 = !DILocation(line: 1331, column: 13, scope: !3760)
!3763 = !DILocation(line: 1331, column: 8, scope: !3760)
!3764 = !DILocation(line: 1331, column: 38, scope: !3765)
!3765 = distinct !DILexicalBlock(scope: !3760, file: !3, line: 1331, column: 3)
!3766 = !DILocation(line: 1331, column: 3, scope: !3760)
!3767 = !DILocalVariable(name: "nn", scope: !3768, file: !3, line: 1333, type: !2228)
!3768 = distinct !DILexicalBlock(scope: !3765, file: !3, line: 1332, column: 5)
!3769 = !DILocation(line: 1333, column: 35, scope: !3768)
!3770 = !DILocation(line: 1336, column: 2, scope: !3768)
!3771 = !DILocation(line: 1335, column: 12, scope: !3768)
!3772 = !DILocation(line: 1335, column: 10, scope: !3768)
!3773 = !DILocation(line: 1337, column: 15, scope: !3768)
!3774 = !DILocation(line: 1337, column: 7, scope: !3768)
!3775 = !DILocation(line: 1337, column: 19, scope: !3768)
!3776 = !DILocation(line: 1338, column: 18, scope: !3768)
!3777 = !DILocation(line: 1338, column: 28, scope: !3768)
!3778 = !DILocation(line: 1338, column: 7, scope: !3768)
!3779 = !DILocation(line: 1338, column: 11, scope: !3768)
!3780 = !DILocation(line: 1338, column: 16, scope: !3768)
!3781 = !DILocation(line: 1339, column: 31, scope: !3768)
!3782 = !DILocation(line: 1339, column: 7, scope: !3768)
!3783 = !DILocation(line: 1339, column: 17, scope: !3768)
!3784 = !DILocation(line: 1339, column: 29, scope: !3768)
!3785 = !DILocation(line: 1340, column: 5, scope: !3768)
!3786 = !DILocation(line: 1331, column: 51, scope: !3765)
!3787 = !DILocation(line: 1331, column: 57, scope: !3765)
!3788 = !DILocation(line: 1331, column: 49, scope: !3765)
!3789 = !DILocation(line: 1331, column: 3, scope: !3765)
!3790 = distinct !{!3790, !3766, !3791}
!3791 = !DILocation(line: 1340, column: 5, scope: !3760)
!3792 = !DILocation(line: 1341, column: 1, scope: !3712)
!3793 = distinct !DISubprogram(name: "free_all_ipa_structures_after_ipa_cp", scope: !3, file: !3, line: 1381, type: !2010, scopeLine: 1382, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2371)
!3794 = !DILocation(line: 1383, column: 8, scope: !3795)
!3795 = distinct !DILexicalBlock(scope: !3793, file: !3, line: 1383, column: 7)
!3796 = !DILocation(line: 1383, column: 7, scope: !3793)
!3797 = !DILocation(line: 1385, column: 7, scope: !3798)
!3798 = distinct !DILexicalBlock(scope: !3795, file: !3, line: 1384, column: 5)
!3799 = !DILocation(line: 1386, column: 7, scope: !3798)
!3800 = !DILocation(line: 1387, column: 7, scope: !3798)
!3801 = !DILocation(line: 1388, column: 5, scope: !3798)
!3802 = !DILocation(line: 1389, column: 1, scope: !3793)
!3803 = distinct !DISubprogram(name: "ipa_unregister_cgraph_hooks", scope: !3, file: !3, line: 1365, type: !2010, scopeLine: 1366, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2371)
!3804 = !DILocation(line: 1367, column: 36, scope: !3803)
!3805 = !DILocation(line: 1367, column: 3, scope: !3803)
!3806 = !DILocation(line: 1368, column: 28, scope: !3803)
!3807 = !DILocation(line: 1369, column: 36, scope: !3803)
!3808 = !DILocation(line: 1369, column: 3, scope: !3803)
!3809 = !DILocation(line: 1370, column: 28, scope: !3803)
!3810 = !DILocation(line: 1371, column: 40, scope: !3803)
!3811 = !DILocation(line: 1371, column: 3, scope: !3803)
!3812 = !DILocation(line: 1372, column: 32, scope: !3803)
!3813 = !DILocation(line: 1373, column: 40, scope: !3803)
!3814 = !DILocation(line: 1373, column: 3, scope: !3803)
!3815 = !DILocation(line: 1374, column: 32, scope: !3803)
!3816 = !DILocation(line: 1375, column: 1, scope: !3803)
!3817 = distinct !DISubprogram(name: "free_all_ipa_structures_after_iinln", scope: !3, file: !3, line: 1395, type: !2010, scopeLine: 1396, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2371)
!3818 = !DILocation(line: 1397, column: 3, scope: !3817)
!3819 = !DILocation(line: 1398, column: 3, scope: !3817)
!3820 = !DILocation(line: 1399, column: 3, scope: !3817)
!3821 = !DILocation(line: 1400, column: 1, scope: !3817)
!3822 = distinct !DISubprogram(name: "ipa_print_node_params", scope: !3, file: !3, line: 1406, type: !2792, scopeLine: 1407, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2371)
!3823 = !DILocalVariable(name: "f", arg: 1, scope: !3822, file: !3, line: 1406, type: !2794)
!3824 = !DILocation(line: 1406, column: 31, scope: !3822)
!3825 = !DILocalVariable(name: "node", arg: 2, scope: !3822, file: !3, line: 1406, type: !744)
!3826 = !DILocation(line: 1406, column: 54, scope: !3822)
!3827 = !DILocalVariable(name: "i", scope: !3822, file: !3, line: 1408, type: !829)
!3828 = !DILocation(line: 1408, column: 7, scope: !3822)
!3829 = !DILocalVariable(name: "count", scope: !3822, file: !3, line: 1408, type: !829)
!3830 = !DILocation(line: 1408, column: 10, scope: !3822)
!3831 = !DILocalVariable(name: "temp", scope: !3822, file: !3, line: 1409, type: !748)
!3832 = !DILocation(line: 1409, column: 8, scope: !3822)
!3833 = !DILocalVariable(name: "info", scope: !3822, file: !3, line: 1410, type: !2222)
!3834 = !DILocation(line: 1410, column: 27, scope: !3822)
!3835 = !DILocation(line: 1412, column: 8, scope: !3836)
!3836 = distinct !DILexicalBlock(scope: !3822, file: !3, line: 1412, column: 7)
!3837 = !DILocation(line: 1412, column: 14, scope: !3836)
!3838 = !DILocation(line: 1412, column: 7, scope: !3822)
!3839 = !DILocation(line: 1413, column: 5, scope: !3836)
!3840 = !DILocation(line: 1414, column: 10, scope: !3822)
!3841 = !DILocation(line: 1414, column: 8, scope: !3822)
!3842 = !DILocation(line: 1415, column: 12, scope: !3822)
!3843 = !DILocation(line: 1415, column: 63, scope: !3822)
!3844 = !DILocation(line: 1415, column: 45, scope: !3822)
!3845 = !DILocation(line: 1415, column: 3, scope: !3822)
!3846 = !DILocation(line: 1416, column: 32, scope: !3822)
!3847 = !DILocation(line: 1416, column: 11, scope: !3822)
!3848 = !DILocation(line: 1416, column: 9, scope: !3822)
!3849 = !DILocation(line: 1417, column: 10, scope: !3850)
!3850 = distinct !DILexicalBlock(scope: !3822, file: !3, line: 1417, column: 3)
!3851 = !DILocation(line: 1417, column: 8, scope: !3850)
!3852 = !DILocation(line: 1417, column: 15, scope: !3853)
!3853 = distinct !DILexicalBlock(scope: !3850, file: !3, line: 1417, column: 3)
!3854 = !DILocation(line: 1417, column: 19, scope: !3853)
!3855 = !DILocation(line: 1417, column: 17, scope: !3853)
!3856 = !DILocation(line: 1417, column: 3, scope: !3850)
!3857 = !DILocation(line: 1419, column: 29, scope: !3858)
!3858 = distinct !DILexicalBlock(scope: !3853, file: !3, line: 1418, column: 5)
!3859 = !DILocation(line: 1419, column: 35, scope: !3858)
!3860 = !DILocation(line: 1419, column: 14, scope: !3858)
!3861 = !DILocation(line: 1419, column: 12, scope: !3858)
!3862 = !DILocation(line: 1420, column: 11, scope: !3863)
!3863 = distinct !DILexicalBlock(scope: !3858, file: !3, line: 1420, column: 11)
!3864 = !DILocation(line: 1420, column: 28, scope: !3863)
!3865 = !DILocation(line: 1420, column: 11, scope: !3858)
!3866 = !DILocation(line: 1421, column: 11, scope: !3863)
!3867 = !DILocation(line: 1421, column: 35, scope: !3863)
!3868 = !DILocation(line: 1422, column: 19, scope: !3863)
!3869 = !DILocation(line: 1423, column: 34, scope: !3863)
!3870 = !DILocation(line: 1423, column: 56, scope: !3863)
!3871 = !DILocation(line: 1423, column: 21, scope: !3863)
!3872 = !DILocation(line: 1421, column: 2, scope: !3863)
!3873 = !DILocation(line: 1425, column: 34, scope: !3874)
!3874 = distinct !DILexicalBlock(scope: !3858, file: !3, line: 1425, column: 11)
!3875 = !DILocation(line: 1425, column: 40, scope: !3874)
!3876 = !DILocation(line: 1425, column: 11, scope: !3874)
!3877 = !DILocation(line: 1425, column: 11, scope: !3858)
!3878 = !DILocation(line: 1426, column: 11, scope: !3874)
!3879 = !DILocation(line: 1426, column: 2, scope: !3874)
!3880 = !DILocation(line: 1427, column: 16, scope: !3858)
!3881 = !DILocation(line: 1427, column: 7, scope: !3858)
!3882 = !DILocation(line: 1428, column: 5, scope: !3858)
!3883 = !DILocation(line: 1417, column: 27, scope: !3853)
!3884 = !DILocation(line: 1417, column: 3, scope: !3853)
!3885 = distinct !{!3885, !3856, !3886}
!3886 = !DILocation(line: 1428, column: 5, scope: !3850)
!3887 = !DILocation(line: 1429, column: 1, scope: !3822)
!3888 = distinct !DISubprogram(name: "ipa_get_param", scope: !456, file: !456, line: 234, type: !3889, scopeLine: 235, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2371)
!3889 = !DISubroutineType(types: !3890)
!3890 = !{!748, !2222, !829}
!3891 = !DILocalVariable(name: "info", arg: 1, scope: !3888, file: !456, line: 234, type: !2222)
!3892 = !DILocation(line: 234, column: 40, scope: !3888)
!3893 = !DILocalVariable(name: "i", arg: 2, scope: !3888, file: !456, line: 234, type: !829)
!3894 = !DILocation(line: 234, column: 50, scope: !3888)
!3895 = !DILocation(line: 236, column: 10, scope: !3888)
!3896 = !DILocation(line: 236, column: 16, scope: !3888)
!3897 = !DILocation(line: 236, column: 23, scope: !3888)
!3898 = !DILocation(line: 236, column: 26, scope: !3888)
!3899 = !DILocation(line: 236, column: 3, scope: !3888)
!3900 = distinct !DISubprogram(name: "ipa_is_param_modified", scope: !456, file: !456, line: 245, type: !3901, scopeLine: 246, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2371)
!3901 = !DISubroutineType(types: !3902)
!3902 = !{!852, !2222, !829}
!3903 = !DILocalVariable(name: "info", arg: 1, scope: !3900, file: !456, line: 245, type: !2222)
!3904 = !DILocation(line: 245, column: 48, scope: !3900)
!3905 = !DILocalVariable(name: "i", arg: 2, scope: !3900, file: !456, line: 245, type: !829)
!3906 = !DILocation(line: 245, column: 58, scope: !3900)
!3907 = !DILocation(line: 247, column: 10, scope: !3900)
!3908 = !DILocation(line: 247, column: 16, scope: !3900)
!3909 = !DILocation(line: 247, column: 23, scope: !3900)
!3910 = !DILocation(line: 247, column: 26, scope: !3900)
!3911 = !DILocation(line: 247, column: 3, scope: !3900)
!3912 = distinct !DISubprogram(name: "ipa_print_all_params", scope: !3, file: !3, line: 1435, type: !3050, scopeLine: 1436, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2371)
!3913 = !DILocalVariable(name: "f", arg: 1, scope: !3912, file: !3, line: 1435, type: !2794)
!3914 = !DILocation(line: 1435, column: 30, scope: !3912)
!3915 = !DILocalVariable(name: "node", scope: !3912, file: !3, line: 1437, type: !744)
!3916 = !DILocation(line: 1437, column: 23, scope: !3912)
!3917 = !DILocation(line: 1439, column: 12, scope: !3912)
!3918 = !DILocation(line: 1439, column: 3, scope: !3912)
!3919 = !DILocation(line: 1440, column: 15, scope: !3920)
!3920 = distinct !DILexicalBlock(scope: !3912, file: !3, line: 1440, column: 3)
!3921 = !DILocation(line: 1440, column: 13, scope: !3920)
!3922 = !DILocation(line: 1440, column: 8, scope: !3920)
!3923 = !DILocation(line: 1440, column: 29, scope: !3924)
!3924 = distinct !DILexicalBlock(scope: !3920, file: !3, line: 1440, column: 3)
!3925 = !DILocation(line: 1440, column: 3, scope: !3920)
!3926 = !DILocation(line: 1441, column: 28, scope: !3924)
!3927 = !DILocation(line: 1441, column: 31, scope: !3924)
!3928 = !DILocation(line: 1441, column: 5, scope: !3924)
!3929 = !DILocation(line: 1440, column: 42, scope: !3924)
!3930 = !DILocation(line: 1440, column: 48, scope: !3924)
!3931 = !DILocation(line: 1440, column: 40, scope: !3924)
!3932 = !DILocation(line: 1440, column: 3, scope: !3924)
!3933 = distinct !{!3933, !3925, !3934}
!3934 = !DILocation(line: 1441, column: 35, scope: !3920)
!3935 = !DILocation(line: 1442, column: 1, scope: !3912)
!3936 = distinct !DISubprogram(name: "ipa_get_vector_of_formal_parms", scope: !3, file: !3, line: 1447, type: !3937, scopeLine: 1448, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2371)
!3937 = !DISubroutineType(types: !3938)
!3938 = !{!2277, !748}
!3939 = !DILocalVariable(name: "fndecl", arg: 1, scope: !3936, file: !3, line: 1447, type: !748)
!3940 = !DILocation(line: 1447, column: 38, scope: !3936)
!3941 = !DILocalVariable(name: "args", scope: !3936, file: !3, line: 1449, type: !2277)
!3942 = !DILocation(line: 1449, column: 20, scope: !3936)
!3943 = !DILocalVariable(name: "count", scope: !3936, file: !3, line: 1450, type: !829)
!3944 = !DILocation(line: 1450, column: 7, scope: !3936)
!3945 = !DILocalVariable(name: "parm", scope: !3936, file: !3, line: 1451, type: !748)
!3946 = !DILocation(line: 1451, column: 8, scope: !3936)
!3947 = !DILocation(line: 1453, column: 34, scope: !3936)
!3948 = !DILocation(line: 1453, column: 11, scope: !3936)
!3949 = !DILocation(line: 1453, column: 9, scope: !3936)
!3950 = !DILocation(line: 1454, column: 10, scope: !3936)
!3951 = !DILocation(line: 1454, column: 8, scope: !3936)
!3952 = !DILocation(line: 1455, column: 15, scope: !3953)
!3953 = distinct !DILexicalBlock(scope: !3936, file: !3, line: 1455, column: 3)
!3954 = !DILocation(line: 1455, column: 13, scope: !3953)
!3955 = !DILocation(line: 1455, column: 8, scope: !3953)
!3956 = !DILocation(line: 1455, column: 40, scope: !3957)
!3957 = distinct !DILexicalBlock(scope: !3953, file: !3, line: 1455, column: 3)
!3958 = !DILocation(line: 1455, column: 3, scope: !3953)
!3959 = !DILocation(line: 1456, column: 5, scope: !3957)
!3960 = !DILocation(line: 1455, column: 53, scope: !3957)
!3961 = !DILocation(line: 1455, column: 51, scope: !3957)
!3962 = !DILocation(line: 1455, column: 3, scope: !3957)
!3963 = distinct !{!3963, !3958, !3964}
!3964 = !DILocation(line: 1456, column: 5, scope: !3953)
!3965 = !DILocation(line: 1458, column: 10, scope: !3936)
!3966 = !DILocation(line: 1458, column: 3, scope: !3936)
!3967 = distinct !DISubprogram(name: "count_formal_params_1", scope: !3, file: !3, line: 150, type: !3968, scopeLine: 151, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2371)
!3968 = !DISubroutineType(types: !3969)
!3969 = !{!829, !748}
!3970 = !DILocalVariable(name: "fndecl", arg: 1, scope: !3967, file: !3, line: 150, type: !748)
!3971 = !DILocation(line: 150, column: 29, scope: !3967)
!3972 = !DILocalVariable(name: "parm", scope: !3967, file: !3, line: 152, type: !748)
!3973 = !DILocation(line: 152, column: 8, scope: !3967)
!3974 = !DILocalVariable(name: "count", scope: !3967, file: !3, line: 153, type: !829)
!3975 = !DILocation(line: 153, column: 7, scope: !3967)
!3976 = !DILocation(line: 155, column: 15, scope: !3977)
!3977 = distinct !DILexicalBlock(scope: !3967, file: !3, line: 155, column: 3)
!3978 = !DILocation(line: 155, column: 13, scope: !3977)
!3979 = !DILocation(line: 155, column: 8, scope: !3977)
!3980 = !DILocation(line: 155, column: 40, scope: !3981)
!3981 = distinct !DILexicalBlock(scope: !3977, file: !3, line: 155, column: 3)
!3982 = !DILocation(line: 155, column: 3, scope: !3977)
!3983 = !DILocation(line: 156, column: 10, scope: !3981)
!3984 = !DILocation(line: 156, column: 5, scope: !3981)
!3985 = !DILocation(line: 155, column: 53, scope: !3981)
!3986 = !DILocation(line: 155, column: 51, scope: !3981)
!3987 = !DILocation(line: 155, column: 3, scope: !3981)
!3988 = distinct !{!3988, !3982, !3989}
!3989 = !DILocation(line: 156, column: 10, scope: !3977)
!3990 = !DILocation(line: 158, column: 10, scope: !3967)
!3991 = !DILocation(line: 158, column: 3, scope: !3967)
!3992 = distinct !DISubprogram(name: "VEC_tree_heap_alloc", scope: !6, file: !6, line: 184, type: !3993, scopeLine: 184, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2371)
!3993 = !DISubroutineType(types: !3994)
!3994 = !{!2277, !829}
!3995 = !DILocalVariable(name: "alloc_", arg: 1, scope: !3992, file: !6, line: 184, type: !829)
!3996 = !DILocation(line: 184, column: 1, scope: !3992)
!3997 = distinct !DISubprogram(name: "VEC_tree_base_quick_push", scope: !6, file: !6, line: 182, type: !3998, scopeLine: 182, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2371)
!3998 = !DISubroutineType(types: !3999)
!3999 = !{!1081, !4000, !748}
!4000 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1398, size: 64)
!4001 = !DILocalVariable(name: "vec_", arg: 1, scope: !3997, file: !6, line: 182, type: !4000)
!4002 = !DILocation(line: 182, column: 1, scope: !3997)
!4003 = !DILocalVariable(name: "obj_", arg: 2, scope: !3997, file: !6, line: 182, type: !748)
!4004 = !DILocalVariable(name: "slot_", scope: !3997, file: !6, line: 182, type: !1081)
!4005 = distinct !DISubprogram(name: "ipa_modify_formal_parameters", scope: !3, file: !3, line: 1487, type: !4006, scopeLine: 1489, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2371)
!4006 = !DISubroutineType(types: !4007)
!4007 = !{null, !748, !4008, !1176}
!4008 = !DIDerivedType(tag: DW_TAG_typedef, name: "ipa_parm_adjustment_vec", file: !456, line: 487, baseType: !2282)
!4009 = !DILocalVariable(name: "fndecl", arg: 1, scope: !4005, file: !3, line: 1487, type: !748)
!4010 = !DILocation(line: 1487, column: 36, scope: !4005)
!4011 = !DILocalVariable(name: "adjustments", arg: 2, scope: !4005, file: !3, line: 1487, type: !4008)
!4012 = !DILocation(line: 1487, column: 68, scope: !4005)
!4013 = !DILocalVariable(name: "synth_parm_prefix", arg: 3, scope: !4005, file: !3, line: 1488, type: !1176)
!4014 = !DILocation(line: 1488, column: 22, scope: !4005)
!4015 = !DILocalVariable(name: "oparms", scope: !4005, file: !3, line: 1490, type: !2277)
!4016 = !DILocation(line: 1490, column: 20, scope: !4005)
!4017 = !DILocalVariable(name: "otypes", scope: !4005, file: !3, line: 1490, type: !2277)
!4018 = !DILocation(line: 1490, column: 29, scope: !4005)
!4019 = !DILocalVariable(name: "orig_type", scope: !4005, file: !3, line: 1491, type: !748)
!4020 = !DILocation(line: 1491, column: 8, scope: !4005)
!4021 = !DILocalVariable(name: "new_type", scope: !4005, file: !3, line: 1491, type: !748)
!4022 = !DILocation(line: 1491, column: 19, scope: !4005)
!4023 = !DILocalVariable(name: "old_arg_types", scope: !4005, file: !3, line: 1492, type: !748)
!4024 = !DILocation(line: 1492, column: 8, scope: !4005)
!4025 = !DILocalVariable(name: "t", scope: !4005, file: !3, line: 1492, type: !748)
!4026 = !DILocation(line: 1492, column: 23, scope: !4005)
!4027 = !DILocalVariable(name: "new_arg_types", scope: !4005, file: !3, line: 1492, type: !748)
!4028 = !DILocation(line: 1492, column: 26, scope: !4005)
!4029 = !DILocalVariable(name: "parm", scope: !4005, file: !3, line: 1493, type: !748)
!4030 = !DILocation(line: 1493, column: 8, scope: !4005)
!4031 = !DILocalVariable(name: "link", scope: !4005, file: !3, line: 1493, type: !1081)
!4032 = !DILocation(line: 1493, column: 15, scope: !4005)
!4033 = !DILocation(line: 1493, column: 23, scope: !4005)
!4034 = !DILocalVariable(name: "i", scope: !4005, file: !3, line: 1494, type: !829)
!4035 = !DILocation(line: 1494, column: 7, scope: !4005)
!4036 = !DILocalVariable(name: "len", scope: !4005, file: !3, line: 1494, type: !829)
!4037 = !DILocation(line: 1494, column: 10, scope: !4005)
!4038 = !DILocation(line: 1494, column: 16, scope: !4005)
!4039 = !DILocalVariable(name: "new_reversed", scope: !4005, file: !3, line: 1495, type: !748)
!4040 = !DILocation(line: 1495, column: 8, scope: !4005)
!4041 = !DILocalVariable(name: "care_for_types", scope: !4005, file: !3, line: 1496, type: !852)
!4042 = !DILocation(line: 1496, column: 8, scope: !4005)
!4043 = !DILocalVariable(name: "last_parm_void", scope: !4005, file: !3, line: 1496, type: !852)
!4044 = !DILocation(line: 1496, column: 24, scope: !4005)
!4045 = !DILocation(line: 1498, column: 8, scope: !4046)
!4046 = distinct !DILexicalBlock(scope: !4005, file: !3, line: 1498, column: 7)
!4047 = !DILocation(line: 1498, column: 7, scope: !4005)
!4048 = !DILocation(line: 1499, column: 23, scope: !4046)
!4049 = !DILocation(line: 1499, column: 5, scope: !4046)
!4050 = !DILocation(line: 1501, column: 44, scope: !4005)
!4051 = !DILocation(line: 1501, column: 12, scope: !4005)
!4052 = !DILocation(line: 1501, column: 10, scope: !4005)
!4053 = !DILocation(line: 1502, column: 15, scope: !4005)
!4054 = !DILocation(line: 1502, column: 13, scope: !4005)
!4055 = !DILocation(line: 1503, column: 19, scope: !4005)
!4056 = !DILocation(line: 1503, column: 17, scope: !4005)
!4057 = !DILocation(line: 1507, column: 21, scope: !4005)
!4058 = !DILocation(line: 1507, column: 35, scope: !4005)
!4059 = !DILocation(line: 1507, column: 20, scope: !4005)
!4060 = !DILocation(line: 1507, column: 18, scope: !4005)
!4061 = !DILocation(line: 1508, column: 7, scope: !4062)
!4062 = distinct !DILexicalBlock(scope: !4005, file: !3, line: 1508, column: 7)
!4063 = !DILocation(line: 1508, column: 7, scope: !4005)
!4064 = !DILocation(line: 1510, column: 25, scope: !4065)
!4065 = distinct !DILexicalBlock(scope: !4062, file: !3, line: 1509, column: 5)
!4066 = !DILocation(line: 1511, column: 7, scope: !4065)
!4067 = !DILocation(line: 1511, column: 4, scope: !4065)
!4068 = !DILocation(line: 1510, column: 24, scope: !4065)
!4069 = !DILocation(line: 1510, column: 22, scope: !4065)
!4070 = !DILocation(line: 1512, column: 49, scope: !4065)
!4071 = !DILocation(line: 1512, column: 16, scope: !4065)
!4072 = !DILocation(line: 1512, column: 14, scope: !4065)
!4073 = !DILocation(line: 1513, column: 11, scope: !4074)
!4074 = distinct !DILexicalBlock(scope: !4065, file: !3, line: 1513, column: 11)
!4075 = !DILocation(line: 1513, column: 11, scope: !4065)
!4076 = !DILocation(line: 1514, column: 2, scope: !4074)
!4077 = !DILocation(line: 1516, column: 2, scope: !4074)
!4078 = !DILocation(line: 1517, column: 5, scope: !4065)
!4079 = !DILocation(line: 1520, column: 22, scope: !4080)
!4080 = distinct !DILexicalBlock(scope: !4062, file: !3, line: 1519, column: 5)
!4081 = !DILocation(line: 1521, column: 14, scope: !4080)
!4082 = !DILocation(line: 1524, column: 10, scope: !4083)
!4083 = distinct !DILexicalBlock(scope: !4005, file: !3, line: 1524, column: 3)
!4084 = !DILocation(line: 1524, column: 8, scope: !4083)
!4085 = !DILocation(line: 1524, column: 15, scope: !4086)
!4086 = distinct !DILexicalBlock(scope: !4083, file: !3, line: 1524, column: 3)
!4087 = !DILocation(line: 1524, column: 19, scope: !4086)
!4088 = !DILocation(line: 1524, column: 17, scope: !4086)
!4089 = !DILocation(line: 1524, column: 3, scope: !4083)
!4090 = !DILocalVariable(name: "adj", scope: !4091, file: !3, line: 1526, type: !4092)
!4091 = distinct !DILexicalBlock(scope: !4086, file: !3, line: 1525, column: 5)
!4092 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2295, size: 64)
!4093 = !DILocation(line: 1526, column: 35, scope: !4091)
!4094 = !DILocation(line: 1527, column: 7, scope: !4091)
!4095 = !DILocation(line: 1529, column: 13, scope: !4091)
!4096 = !DILocation(line: 1529, column: 11, scope: !4091)
!4097 = !DILocation(line: 1530, column: 14, scope: !4091)
!4098 = !DILocation(line: 1530, column: 12, scope: !4091)
!4099 = !DILocation(line: 1531, column: 19, scope: !4091)
!4100 = !DILocation(line: 1531, column: 7, scope: !4091)
!4101 = !DILocation(line: 1531, column: 12, scope: !4091)
!4102 = !DILocation(line: 1531, column: 17, scope: !4091)
!4103 = !DILocation(line: 1533, column: 11, scope: !4104)
!4104 = distinct !DILexicalBlock(scope: !4091, file: !3, line: 1533, column: 11)
!4105 = !DILocation(line: 1533, column: 16, scope: !4104)
!4106 = !DILocation(line: 1533, column: 11, scope: !4091)
!4107 = !DILocation(line: 1535, column: 8, scope: !4108)
!4108 = distinct !DILexicalBlock(scope: !4109, file: !3, line: 1535, column: 8)
!4109 = distinct !DILexicalBlock(scope: !4104, file: !3, line: 1534, column: 2)
!4110 = !DILocation(line: 1535, column: 8, scope: !4109)
!4111 = !DILocation(line: 1536, column: 22, scope: !4108)
!4112 = !DILocation(line: 1536, column: 20, scope: !4108)
!4113 = !DILocation(line: 1536, column: 6, scope: !4108)
!4114 = !DILocation(line: 1539, column: 12, scope: !4109)
!4115 = !DILocation(line: 1539, column: 5, scope: !4109)
!4116 = !DILocation(line: 1539, column: 10, scope: !4109)
!4117 = !DILocation(line: 1540, column: 12, scope: !4109)
!4118 = !DILocation(line: 1540, column: 9, scope: !4109)
!4119 = !DILocation(line: 1541, column: 2, scope: !4109)
!4120 = !DILocation(line: 1542, column: 17, scope: !4121)
!4121 = distinct !DILexicalBlock(scope: !4104, file: !3, line: 1542, column: 16)
!4122 = !DILocation(line: 1542, column: 22, scope: !4121)
!4123 = !DILocation(line: 1542, column: 16, scope: !4104)
!4124 = !DILocalVariable(name: "new_parm", scope: !4125, file: !3, line: 1544, type: !748)
!4125 = distinct !DILexicalBlock(scope: !4121, file: !3, line: 1543, column: 2)
!4126 = !DILocation(line: 1544, column: 9, scope: !4125)
!4127 = !DILocalVariable(name: "ptype", scope: !4125, file: !3, line: 1545, type: !748)
!4128 = !DILocation(line: 1545, column: 9, scope: !4125)
!4129 = !DILocation(line: 1547, column: 8, scope: !4130)
!4130 = distinct !DILexicalBlock(scope: !4125, file: !3, line: 1547, column: 8)
!4131 = !DILocation(line: 1547, column: 13, scope: !4130)
!4132 = !DILocation(line: 1547, column: 8, scope: !4125)
!4133 = !DILocation(line: 1548, column: 34, scope: !4130)
!4134 = !DILocation(line: 1548, column: 39, scope: !4130)
!4135 = !DILocation(line: 1548, column: 14, scope: !4130)
!4136 = !DILocation(line: 1548, column: 12, scope: !4130)
!4137 = !DILocation(line: 1548, column: 6, scope: !4130)
!4138 = !DILocation(line: 1550, column: 14, scope: !4130)
!4139 = !DILocation(line: 1550, column: 19, scope: !4130)
!4140 = !DILocation(line: 1550, column: 12, scope: !4130)
!4141 = !DILocation(line: 1552, column: 8, scope: !4142)
!4142 = distinct !DILexicalBlock(scope: !4125, file: !3, line: 1552, column: 8)
!4143 = !DILocation(line: 1552, column: 8, scope: !4125)
!4144 = !DILocation(line: 1553, column: 22, scope: !4142)
!4145 = !DILocation(line: 1553, column: 20, scope: !4142)
!4146 = !DILocation(line: 1553, column: 6, scope: !4142)
!4147 = !DILocation(line: 1555, column: 15, scope: !4125)
!4148 = !DILocation(line: 1555, column: 13, scope: !4125)
!4149 = !DILocation(line: 1557, column: 48, scope: !4125)
!4150 = !DILocation(line: 1557, column: 27, scope: !4125)
!4151 = !DILocation(line: 1557, column: 4, scope: !4125)
!4152 = !DILocation(line: 1557, column: 25, scope: !4125)
!4153 = !DILocation(line: 1559, column: 4, scope: !4125)
!4154 = !DILocation(line: 1559, column: 31, scope: !4125)
!4155 = !DILocation(line: 1560, column: 31, scope: !4125)
!4156 = !DILocation(line: 1560, column: 4, scope: !4125)
!4157 = !DILocation(line: 1560, column: 29, scope: !4125)
!4158 = !DILocation(line: 1561, column: 30, scope: !4125)
!4159 = !DILocation(line: 1561, column: 4, scope: !4125)
!4160 = !DILocation(line: 1561, column: 28, scope: !4125)
!4161 = !DILocation(line: 1562, column: 4, scope: !4125)
!4162 = !DILocation(line: 1562, column: 25, scope: !4125)
!4163 = !DILocation(line: 1563, column: 4, scope: !4125)
!4164 = !DILocation(line: 1563, column: 30, scope: !4125)
!4165 = !DILocation(line: 1564, column: 17, scope: !4125)
!4166 = !DILocation(line: 1564, column: 4, scope: !4125)
!4167 = !DILocation(line: 1566, column: 24, scope: !4125)
!4168 = !DILocation(line: 1566, column: 4, scope: !4125)
!4169 = !DILocation(line: 1567, column: 27, scope: !4125)
!4170 = !DILocation(line: 1567, column: 4, scope: !4125)
!4171 = !DILocation(line: 1568, column: 16, scope: !4125)
!4172 = !DILocation(line: 1568, column: 4, scope: !4125)
!4173 = !DILocation(line: 1568, column: 9, scope: !4125)
!4174 = !DILocation(line: 1568, column: 14, scope: !4125)
!4175 = !DILocation(line: 1569, column: 21, scope: !4125)
!4176 = !DILocation(line: 1569, column: 4, scope: !4125)
!4177 = !DILocation(line: 1569, column: 9, scope: !4125)
!4178 = !DILocation(line: 1569, column: 19, scope: !4125)
!4179 = !DILocation(line: 1571, column: 12, scope: !4125)
!4180 = !DILocation(line: 1571, column: 5, scope: !4125)
!4181 = !DILocation(line: 1571, column: 10, scope: !4125)
!4182 = !DILocation(line: 1573, column: 12, scope: !4125)
!4183 = !DILocation(line: 1573, column: 9, scope: !4125)
!4184 = !DILocation(line: 1574, column: 2, scope: !4125)
!4185 = !DILocation(line: 1575, column: 5, scope: !4091)
!4186 = !DILocation(line: 1524, column: 25, scope: !4086)
!4187 = !DILocation(line: 1524, column: 3, scope: !4086)
!4188 = distinct !{!4188, !4089, !4189}
!4189 = !DILocation(line: 1575, column: 5, scope: !4083)
!4190 = !DILocation(line: 1577, column: 4, scope: !4005)
!4191 = !DILocation(line: 1577, column: 9, scope: !4005)
!4192 = !DILocation(line: 1579, column: 7, scope: !4193)
!4193 = distinct !DILexicalBlock(scope: !4005, file: !3, line: 1579, column: 7)
!4194 = !DILocation(line: 1579, column: 7, scope: !4005)
!4195 = !DILocation(line: 1581, column: 32, scope: !4196)
!4196 = distinct !DILexicalBlock(scope: !4193, file: !3, line: 1580, column: 5)
!4197 = !DILocation(line: 1581, column: 22, scope: !4196)
!4198 = !DILocation(line: 1581, column: 20, scope: !4196)
!4199 = !DILocation(line: 1582, column: 11, scope: !4200)
!4200 = distinct !DILexicalBlock(scope: !4196, file: !3, line: 1582, column: 11)
!4201 = !DILocation(line: 1582, column: 11, scope: !4196)
!4202 = !DILocation(line: 1584, column: 8, scope: !4203)
!4203 = distinct !DILexicalBlock(scope: !4204, file: !3, line: 1584, column: 8)
!4204 = distinct !DILexicalBlock(scope: !4200, file: !3, line: 1583, column: 2)
!4205 = !DILocation(line: 1584, column: 8, scope: !4204)
!4206 = !DILocation(line: 1585, column: 35, scope: !4203)
!4207 = !DILocation(line: 1585, column: 6, scope: !4203)
!4208 = !DILocation(line: 1585, column: 33, scope: !4203)
!4209 = !DILocation(line: 1587, column: 21, scope: !4203)
!4210 = !DILocation(line: 1587, column: 19, scope: !4203)
!4211 = !DILocation(line: 1588, column: 2, scope: !4204)
!4212 = !DILocation(line: 1589, column: 5, scope: !4196)
!4213 = !DILocation(line: 1596, column: 7, scope: !4214)
!4214 = distinct !DILexicalBlock(scope: !4005, file: !3, line: 1596, column: 7)
!4215 = !DILocation(line: 1596, column: 29, scope: !4214)
!4216 = !DILocation(line: 1597, column: 8, scope: !4214)
!4217 = !DILocation(line: 1597, column: 12, scope: !4214)
!4218 = !DILocation(line: 1597, column: 63, scope: !4214)
!4219 = !DILocation(line: 1598, column: 3, scope: !4214)
!4220 = !DILocation(line: 1598, column: 6, scope: !4214)
!4221 = !DILocation(line: 1598, column: 57, scope: !4214)
!4222 = !DILocation(line: 1598, column: 68, scope: !4214)
!4223 = !DILocation(line: 1596, column: 7, scope: !4005)
!4224 = !DILocation(line: 1600, column: 18, scope: !4225)
!4225 = distinct !DILexicalBlock(scope: !4214, file: !3, line: 1599, column: 5)
!4226 = !DILocation(line: 1600, column: 16, scope: !4225)
!4227 = !DILocation(line: 1601, column: 35, scope: !4225)
!4228 = !DILocation(line: 1601, column: 7, scope: !4225)
!4229 = !DILocation(line: 1601, column: 33, scope: !4225)
!4230 = !DILocation(line: 1602, column: 5, scope: !4225)
!4231 = !DILocation(line: 1606, column: 58, scope: !4232)
!4232 = distinct !DILexicalBlock(scope: !4214, file: !3, line: 1604, column: 5)
!4233 = !DILocation(line: 1607, column: 9, scope: !4232)
!4234 = !DILocation(line: 1606, column: 37, scope: !4232)
!4235 = !DILocation(line: 1606, column: 11, scope: !4232)
!4236 = !DILocation(line: 1606, column: 9, scope: !4232)
!4237 = !DILocation(line: 1608, column: 33, scope: !4232)
!4238 = !DILocation(line: 1608, column: 7, scope: !4232)
!4239 = !DILocation(line: 1608, column: 31, scope: !4232)
!4240 = !DILocation(line: 1609, column: 7, scope: !4232)
!4241 = !DILocation(line: 1609, column: 28, scope: !4232)
!4242 = !DILocation(line: 1614, column: 7, scope: !4005)
!4243 = !DILocation(line: 1614, column: 5, scope: !4005)
!4244 = !DILocation(line: 1615, column: 7, scope: !4245)
!4245 = distinct !DILexicalBlock(scope: !4005, file: !3, line: 1615, column: 7)
!4246 = !DILocation(line: 1615, column: 20, scope: !4245)
!4247 = !DILocation(line: 1615, column: 17, scope: !4245)
!4248 = !DILocation(line: 1615, column: 7, scope: !4005)
!4249 = !DILocation(line: 1617, column: 38, scope: !4250)
!4250 = distinct !DILexicalBlock(scope: !4245, file: !3, line: 1616, column: 5)
!4251 = !DILocation(line: 1617, column: 7, scope: !4250)
!4252 = !DILocation(line: 1617, column: 36, scope: !4250)
!4253 = !DILocation(line: 1618, column: 38, scope: !4250)
!4254 = !DILocation(line: 1618, column: 7, scope: !4250)
!4255 = !DILocation(line: 1618, column: 36, scope: !4250)
!4256 = !DILocation(line: 1619, column: 31, scope: !4250)
!4257 = !DILocation(line: 1619, column: 7, scope: !4250)
!4258 = !DILocation(line: 1619, column: 29, scope: !4250)
!4259 = !DILocation(line: 1620, column: 5, scope: !4250)
!4260 = !DILocation(line: 1623, column: 38, scope: !4261)
!4261 = distinct !DILexicalBlock(scope: !4245, file: !3, line: 1622, column: 5)
!4262 = !DILocation(line: 1623, column: 7, scope: !4261)
!4263 = !DILocation(line: 1623, column: 36, scope: !4261)
!4264 = !DILocation(line: 1624, column: 7, scope: !4261)
!4265 = !DILocation(line: 1624, column: 36, scope: !4261)
!4266 = !DILocation(line: 1627, column: 24, scope: !4005)
!4267 = !DILocation(line: 1627, column: 3, scope: !4005)
!4268 = !DILocation(line: 1627, column: 22, scope: !4005)
!4269 = !DILocation(line: 1628, column: 7, scope: !4270)
!4270 = distinct !DILexicalBlock(scope: !4005, file: !3, line: 1628, column: 7)
!4271 = !DILocation(line: 1628, column: 7, scope: !4005)
!4272 = !DILocation(line: 1629, column: 5, scope: !4270)
!4273 = !DILocation(line: 1630, column: 3, scope: !4005)
!4274 = !DILocation(line: 1631, column: 1, scope: !4005)
!4275 = distinct !DISubprogram(name: "VEC_ipa_parm_adjustment_t_base_length", scope: !456, file: !456, line: 484, type: !4276, scopeLine: 484, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2371)
!4276 = !DISubroutineType(types: !4277)
!4277 = !{!7, !4278}
!4278 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4279, size: 64)
!4279 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2287)
!4280 = !DILocalVariable(name: "vec_", arg: 1, scope: !4275, file: !456, line: 484, type: !4278)
!4281 = !DILocation(line: 484, column: 1, scope: !4275)
!4282 = distinct !DISubprogram(name: "get_vector_of_formal_parm_types", scope: !3, file: !3, line: 1465, type: !3937, scopeLine: 1466, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2371)
!4283 = !DILocalVariable(name: "fntype", arg: 1, scope: !4282, file: !3, line: 1465, type: !748)
!4284 = !DILocation(line: 1465, column: 39, scope: !4282)
!4285 = !DILocalVariable(name: "types", scope: !4282, file: !3, line: 1467, type: !2277)
!4286 = !DILocation(line: 1467, column: 20, scope: !4282)
!4287 = !DILocalVariable(name: "count", scope: !4282, file: !3, line: 1468, type: !829)
!4288 = !DILocation(line: 1468, column: 7, scope: !4282)
!4289 = !DILocalVariable(name: "t", scope: !4282, file: !3, line: 1469, type: !748)
!4290 = !DILocation(line: 1469, column: 8, scope: !4282)
!4291 = !DILocation(line: 1471, column: 12, scope: !4292)
!4292 = distinct !DILexicalBlock(scope: !4282, file: !3, line: 1471, column: 3)
!4293 = !DILocation(line: 1471, column: 10, scope: !4292)
!4294 = !DILocation(line: 1471, column: 8, scope: !4292)
!4295 = !DILocation(line: 1471, column: 37, scope: !4296)
!4296 = distinct !DILexicalBlock(scope: !4292, file: !3, line: 1471, column: 3)
!4297 = !DILocation(line: 1471, column: 3, scope: !4292)
!4298 = !DILocation(line: 1472, column: 10, scope: !4296)
!4299 = !DILocation(line: 1472, column: 5, scope: !4296)
!4300 = !DILocation(line: 1471, column: 44, scope: !4296)
!4301 = !DILocation(line: 1471, column: 42, scope: !4296)
!4302 = !DILocation(line: 1471, column: 3, scope: !4296)
!4303 = distinct !{!4303, !4297, !4304}
!4304 = !DILocation(line: 1472, column: 10, scope: !4292)
!4305 = !DILocation(line: 1474, column: 11, scope: !4282)
!4306 = !DILocation(line: 1474, column: 9, scope: !4282)
!4307 = !DILocation(line: 1475, column: 12, scope: !4308)
!4308 = distinct !DILexicalBlock(scope: !4282, file: !3, line: 1475, column: 3)
!4309 = !DILocation(line: 1475, column: 10, scope: !4308)
!4310 = !DILocation(line: 1475, column: 8, scope: !4308)
!4311 = !DILocation(line: 1475, column: 37, scope: !4312)
!4312 = distinct !DILexicalBlock(scope: !4308, file: !3, line: 1475, column: 3)
!4313 = !DILocation(line: 1475, column: 3, scope: !4308)
!4314 = !DILocation(line: 1476, column: 5, scope: !4312)
!4315 = !DILocation(line: 1475, column: 44, scope: !4312)
!4316 = !DILocation(line: 1475, column: 42, scope: !4312)
!4317 = !DILocation(line: 1475, column: 3, scope: !4312)
!4318 = distinct !{!4318, !4313, !4319}
!4319 = !DILocation(line: 1476, column: 5, scope: !4308)
!4320 = !DILocation(line: 1478, column: 10, scope: !4282)
!4321 = !DILocation(line: 1478, column: 3, scope: !4282)
!4322 = distinct !DISubprogram(name: "VEC_tree_base_length", scope: !6, file: !6, line: 182, type: !4323, scopeLine: 182, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2371)
!4323 = !DISubroutineType(types: !4324)
!4324 = !{!7, !4325}
!4325 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4326, size: 64)
!4326 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1398)
!4327 = !DILocalVariable(name: "vec_", arg: 1, scope: !4322, file: !6, line: 182, type: !4325)
!4328 = !DILocation(line: 182, column: 1, scope: !4322)
!4329 = distinct !DISubprogram(name: "VEC_ipa_parm_adjustment_t_base_index", scope: !456, file: !456, line: 484, type: !4330, scopeLine: 484, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2371)
!4330 = !DISubroutineType(types: !4331)
!4331 = !{!4332, !4333, !7}
!4332 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2294, size: 64)
!4333 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2287, size: 64)
!4334 = !DILocalVariable(name: "vec_", arg: 1, scope: !4329, file: !456, line: 484, type: !4333)
!4335 = !DILocation(line: 484, column: 1, scope: !4329)
!4336 = !DILocalVariable(name: "ix_", arg: 2, scope: !4329, file: !456, line: 484, type: !7)
!4337 = !DILocation(line: 0, scope: !4329)
!4338 = distinct !DISubprogram(name: "VEC_tree_base_index", scope: !6, file: !6, line: 182, type: !4339, scopeLine: 182, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2371)
!4339 = !DISubroutineType(types: !4340)
!4340 = !{!748, !4325, !7}
!4341 = !DILocalVariable(name: "vec_", arg: 1, scope: !4338, file: !6, line: 182, type: !4325)
!4342 = !DILocation(line: 182, column: 1, scope: !4338)
!4343 = !DILocalVariable(name: "ix_", arg: 2, scope: !4338, file: !6, line: 182, type: !7)
!4344 = !DILocation(line: 0, scope: !4338)
!4345 = distinct !DISubprogram(name: "VEC_tree_heap_free", scope: !6, file: !6, line: 184, type: !4346, scopeLine: 184, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2371)
!4346 = !DISubroutineType(types: !4347)
!4347 = !{null, !4348}
!4348 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2277, size: 64)
!4349 = !DILocalVariable(name: "vec_", arg: 1, scope: !4345, file: !6, line: 184, type: !4348)
!4350 = !DILocation(line: 184, column: 1, scope: !4345)
!4351 = !DILocation(line: 184, column: 1, scope: !4352)
!4352 = distinct !DILexicalBlock(scope: !4345, file: !6, line: 184, column: 1)
!4353 = distinct !DISubprogram(name: "ipa_modify_call_arguments", scope: !3, file: !3, line: 1638, type: !4354, scopeLine: 1640, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2371)
!4354 = !DISubroutineType(types: !4355)
!4355 = !{null, !1930, !1046, !4008}
!4356 = !DILocalVariable(name: "cs", arg: 1, scope: !4353, file: !3, line: 1638, type: !1930)
!4357 = !DILocation(line: 1638, column: 48, scope: !4353)
!4358 = !DILocalVariable(name: "stmt", arg: 2, scope: !4353, file: !3, line: 1638, type: !1046)
!4359 = !DILocation(line: 1638, column: 59, scope: !4353)
!4360 = !DILocalVariable(name: "adjustments", arg: 3, scope: !4353, file: !3, line: 1639, type: !4008)
!4361 = !DILocation(line: 1639, column: 31, scope: !4353)
!4362 = !DILocalVariable(name: "vargs", scope: !4353, file: !3, line: 1641, type: !2277)
!4363 = !DILocation(line: 1641, column: 20, scope: !4353)
!4364 = !DILocalVariable(name: "new_stmt", scope: !4353, file: !3, line: 1642, type: !1046)
!4365 = !DILocation(line: 1642, column: 10, scope: !4353)
!4366 = !DILocalVariable(name: "gsi", scope: !4353, file: !3, line: 1643, type: !2575)
!4367 = !DILocation(line: 1643, column: 24, scope: !4353)
!4368 = !DILocalVariable(name: "callee_decl", scope: !4353, file: !3, line: 1644, type: !748)
!4369 = !DILocation(line: 1644, column: 8, scope: !4353)
!4370 = !DILocalVariable(name: "i", scope: !4353, file: !3, line: 1645, type: !829)
!4371 = !DILocation(line: 1645, column: 7, scope: !4353)
!4372 = !DILocalVariable(name: "len", scope: !4353, file: !3, line: 1645, type: !829)
!4373 = !DILocation(line: 1645, column: 10, scope: !4353)
!4374 = !DILocation(line: 1647, column: 9, scope: !4353)
!4375 = !DILocation(line: 1647, column: 7, scope: !4353)
!4376 = !DILocation(line: 1648, column: 11, scope: !4353)
!4377 = !DILocation(line: 1648, column: 9, scope: !4353)
!4378 = !DILocation(line: 1650, column: 23, scope: !4353)
!4379 = !DILocation(line: 1650, column: 9, scope: !4353)
!4380 = !DILocation(line: 1651, column: 10, scope: !4381)
!4381 = distinct !DILexicalBlock(scope: !4353, file: !3, line: 1651, column: 3)
!4382 = !DILocation(line: 1651, column: 8, scope: !4381)
!4383 = !DILocation(line: 1651, column: 15, scope: !4384)
!4384 = distinct !DILexicalBlock(scope: !4381, file: !3, line: 1651, column: 3)
!4385 = !DILocation(line: 1651, column: 19, scope: !4384)
!4386 = !DILocation(line: 1651, column: 17, scope: !4384)
!4387 = !DILocation(line: 1651, column: 3, scope: !4381)
!4388 = !DILocalVariable(name: "adj", scope: !4389, file: !3, line: 1653, type: !4092)
!4389 = distinct !DILexicalBlock(scope: !4384, file: !3, line: 1652, column: 5)
!4390 = !DILocation(line: 1653, column: 35, scope: !4389)
!4391 = !DILocation(line: 1655, column: 13, scope: !4389)
!4392 = !DILocation(line: 1655, column: 11, scope: !4389)
!4393 = !DILocation(line: 1657, column: 11, scope: !4394)
!4394 = distinct !DILexicalBlock(scope: !4389, file: !3, line: 1657, column: 11)
!4395 = !DILocation(line: 1657, column: 16, scope: !4394)
!4396 = !DILocation(line: 1657, column: 11, scope: !4389)
!4397 = !DILocalVariable(name: "arg", scope: !4398, file: !3, line: 1659, type: !748)
!4398 = distinct !DILexicalBlock(scope: !4394, file: !3, line: 1658, column: 2)
!4399 = !DILocation(line: 1659, column: 9, scope: !4398)
!4400 = !DILocation(line: 1659, column: 32, scope: !4398)
!4401 = !DILocation(line: 1659, column: 38, scope: !4398)
!4402 = !DILocation(line: 1659, column: 43, scope: !4398)
!4403 = !DILocation(line: 1659, column: 15, scope: !4398)
!4404 = !DILocation(line: 1661, column: 4, scope: !4398)
!4405 = !DILocation(line: 1662, column: 2, scope: !4398)
!4406 = !DILocation(line: 1663, column: 17, scope: !4407)
!4407 = distinct !DILexicalBlock(scope: !4394, file: !3, line: 1663, column: 16)
!4408 = !DILocation(line: 1663, column: 22, scope: !4407)
!4409 = !DILocation(line: 1663, column: 16, scope: !4394)
!4410 = !DILocalVariable(name: "expr", scope: !4411, file: !3, line: 1665, type: !748)
!4411 = distinct !DILexicalBlock(scope: !4407, file: !3, line: 1664, column: 2)
!4412 = !DILocation(line: 1665, column: 9, scope: !4411)
!4413 = !DILocalVariable(name: "orig_expr", scope: !4411, file: !3, line: 1665, type: !748)
!4414 = !DILocation(line: 1665, column: 15, scope: !4411)
!4415 = !DILocalVariable(name: "allow_ptr", scope: !4411, file: !3, line: 1666, type: !852)
!4416 = !DILocation(line: 1666, column: 9, scope: !4411)
!4417 = !DILocalVariable(name: "repl_found", scope: !4411, file: !3, line: 1666, type: !852)
!4418 = !DILocation(line: 1666, column: 20, scope: !4411)
!4419 = !DILocation(line: 1668, column: 40, scope: !4411)
!4420 = !DILocation(line: 1668, column: 46, scope: !4411)
!4421 = !DILocation(line: 1668, column: 51, scope: !4411)
!4422 = !DILocation(line: 1668, column: 23, scope: !4411)
!4423 = !DILocation(line: 1668, column: 21, scope: !4411)
!4424 = !DILocation(line: 1668, column: 14, scope: !4411)
!4425 = !DILocation(line: 1669, column: 8, scope: !4426)
!4426 = distinct !DILexicalBlock(scope: !4411, file: !3, line: 1669, column: 8)
!4427 = !DILocation(line: 1669, column: 25, scope: !4426)
!4428 = !DILocation(line: 1669, column: 8, scope: !4411)
!4429 = !DILocation(line: 1671, column: 18, scope: !4430)
!4430 = distinct !DILexicalBlock(scope: !4426, file: !3, line: 1670, column: 6)
!4431 = !DILocation(line: 1672, column: 15, scope: !4430)
!4432 = !DILocation(line: 1672, column: 13, scope: !4430)
!4433 = !DILocation(line: 1673, column: 6, scope: !4430)
!4434 = !DILocation(line: 1675, column: 16, scope: !4426)
!4435 = !DILocation(line: 1677, column: 46, scope: !4411)
!4436 = !DILocation(line: 1678, column: 11, scope: !4411)
!4437 = !DILocation(line: 1678, column: 16, scope: !4411)
!4438 = !DILocation(line: 1678, column: 24, scope: !4411)
!4439 = !DILocation(line: 1678, column: 29, scope: !4411)
!4440 = !DILocation(line: 1679, column: 11, scope: !4411)
!4441 = !DILocation(line: 1677, column: 17, scope: !4411)
!4442 = !DILocation(line: 1677, column: 15, scope: !4411)
!4443 = !DILocation(line: 1680, column: 8, scope: !4444)
!4444 = distinct !DILexicalBlock(scope: !4411, file: !3, line: 1680, column: 8)
!4445 = !DILocation(line: 1680, column: 8, scope: !4411)
!4446 = !DILocation(line: 1682, column: 12, scope: !4447)
!4447 = distinct !DILexicalBlock(scope: !4448, file: !3, line: 1682, column: 12)
!4448 = distinct !DILexicalBlock(scope: !4444, file: !3, line: 1681, column: 6)
!4449 = !DILocation(line: 1682, column: 17, scope: !4447)
!4450 = !DILocation(line: 1682, column: 12, scope: !4448)
!4451 = !DILocation(line: 1683, column: 10, scope: !4447)
!4452 = !DILocation(line: 1683, column: 8, scope: !4447)
!4453 = !DILocation(line: 1683, column: 3, scope: !4447)
!4454 = !DILocation(line: 1684, column: 6, scope: !4448)
!4455 = !DILocalVariable(name: "ptrtype", scope: !4456, file: !3, line: 1687, type: !748)
!4456 = distinct !DILexicalBlock(scope: !4444, file: !3, line: 1686, column: 6)
!4457 = !DILocation(line: 1687, column: 13, scope: !4456)
!4458 = !DILocation(line: 1687, column: 43, scope: !4456)
!4459 = !DILocation(line: 1687, column: 48, scope: !4456)
!4460 = !DILocation(line: 1687, column: 23, scope: !4456)
!4461 = !DILocation(line: 1688, column: 15, scope: !4456)
!4462 = !DILocation(line: 1688, column: 13, scope: !4456)
!4463 = !DILocation(line: 1689, column: 13, scope: !4464)
!4464 = distinct !DILexicalBlock(scope: !4456, file: !3, line: 1689, column: 12)
!4465 = !DILocation(line: 1689, column: 12, scope: !4456)
!4466 = !DILocation(line: 1690, column: 10, scope: !4464)
!4467 = !DILocation(line: 1690, column: 8, scope: !4464)
!4468 = !DILocation(line: 1690, column: 3, scope: !4464)
!4469 = !DILocation(line: 1691, column: 40, scope: !4470)
!4470 = distinct !DILexicalBlock(scope: !4456, file: !3, line: 1691, column: 12)
!4471 = !DILocation(line: 1691, column: 49, scope: !4470)
!4472 = !DILocation(line: 1691, column: 13, scope: !4470)
!4473 = !DILocation(line: 1691, column: 12, scope: !4456)
!4474 = !DILocation(line: 1692, column: 10, scope: !4470)
!4475 = !DILocation(line: 1692, column: 8, scope: !4470)
!4476 = !DILocation(line: 1692, column: 3, scope: !4470)
!4477 = !DILocation(line: 1693, column: 15, scope: !4456)
!4478 = !DILocation(line: 1693, column: 13, scope: !4456)
!4479 = !DILocation(line: 1696, column: 13, scope: !4480)
!4480 = distinct !DILexicalBlock(scope: !4456, file: !3, line: 1696, column: 12)
!4481 = !DILocation(line: 1696, column: 18, scope: !4480)
!4482 = !DILocation(line: 1696, column: 12, scope: !4456)
!4483 = !DILocation(line: 1697, column: 10, scope: !4480)
!4484 = !DILocation(line: 1697, column: 8, scope: !4480)
!4485 = !DILocation(line: 1697, column: 3, scope: !4480)
!4486 = !DILocation(line: 1699, column: 43, scope: !4411)
!4487 = !DILocation(line: 1700, column: 9, scope: !4411)
!4488 = !DILocation(line: 1700, column: 14, scope: !4411)
!4489 = !DILocation(line: 1701, column: 9, scope: !4411)
!4490 = !DILocation(line: 1701, column: 32, scope: !4411)
!4491 = !DILocation(line: 1701, column: 37, scope: !4411)
!4492 = !DILocation(line: 1701, column: 12, scope: !4411)
!4493 = !DILocation(line: 1699, column: 11, scope: !4411)
!4494 = !DILocation(line: 1699, column: 9, scope: !4411)
!4495 = !DILocation(line: 1703, column: 4, scope: !4411)
!4496 = !DILocation(line: 1704, column: 2, scope: !4411)
!4497 = !DILocation(line: 1705, column: 5, scope: !4389)
!4498 = !DILocation(line: 1651, column: 25, scope: !4384)
!4499 = !DILocation(line: 1651, column: 3, scope: !4384)
!4500 = distinct !{!4500, !4387, !4501}
!4501 = !DILocation(line: 1705, column: 5, scope: !4381)
!4502 = !DILocation(line: 1707, column: 7, scope: !4503)
!4503 = distinct !DILexicalBlock(scope: !4353, file: !3, line: 1707, column: 7)
!4504 = !DILocation(line: 1707, column: 17, scope: !4503)
!4505 = !DILocation(line: 1707, column: 21, scope: !4503)
!4506 = !DILocation(line: 1707, column: 32, scope: !4503)
!4507 = !DILocation(line: 1707, column: 7, scope: !4353)
!4508 = !DILocation(line: 1709, column: 16, scope: !4509)
!4509 = distinct !DILexicalBlock(scope: !4503, file: !3, line: 1708, column: 5)
!4510 = !DILocation(line: 1709, column: 7, scope: !4509)
!4511 = !DILocation(line: 1710, column: 26, scope: !4509)
!4512 = !DILocation(line: 1710, column: 37, scope: !4509)
!4513 = !DILocation(line: 1710, column: 7, scope: !4509)
!4514 = !DILocation(line: 1711, column: 5, scope: !4509)
!4515 = !DILocation(line: 1713, column: 18, scope: !4353)
!4516 = !DILocation(line: 1713, column: 17, scope: !4353)
!4517 = !DILocation(line: 1713, column: 43, scope: !4353)
!4518 = !DILocation(line: 1713, column: 23, scope: !4353)
!4519 = !DILocation(line: 1713, column: 51, scope: !4353)
!4520 = !DILocation(line: 1713, column: 55, scope: !4353)
!4521 = !DILocation(line: 1713, column: 63, scope: !4353)
!4522 = !DILocation(line: 1713, column: 15, scope: !4353)
!4523 = !DILocation(line: 1714, column: 37, scope: !4353)
!4524 = !DILocation(line: 1714, column: 50, scope: !4353)
!4525 = !DILocation(line: 1714, column: 14, scope: !4353)
!4526 = !DILocation(line: 1714, column: 12, scope: !4353)
!4527 = !DILocation(line: 1715, column: 3, scope: !4353)
!4528 = !DILocation(line: 1716, column: 24, scope: !4529)
!4529 = distinct !DILexicalBlock(scope: !4353, file: !3, line: 1716, column: 7)
!4530 = !DILocation(line: 1716, column: 7, scope: !4529)
!4531 = !DILocation(line: 1716, column: 7, scope: !4353)
!4532 = !DILocation(line: 1717, column: 26, scope: !4529)
!4533 = !DILocation(line: 1717, column: 53, scope: !4529)
!4534 = !DILocation(line: 1717, column: 36, scope: !4529)
!4535 = !DILocation(line: 1717, column: 5, scope: !4529)
!4536 = !DILocation(line: 1719, column: 21, scope: !4353)
!4537 = !DILocation(line: 1719, column: 45, scope: !4353)
!4538 = !DILocation(line: 1719, column: 31, scope: !4353)
!4539 = !DILocation(line: 1719, column: 3, scope: !4353)
!4540 = !DILocation(line: 1720, column: 28, scope: !4541)
!4541 = distinct !DILexicalBlock(scope: !4353, file: !3, line: 1720, column: 7)
!4542 = !DILocation(line: 1720, column: 7, scope: !4541)
!4543 = !DILocation(line: 1720, column: 7, scope: !4353)
!4544 = !DILocation(line: 1721, column: 26, scope: !4541)
!4545 = !DILocation(line: 1721, column: 53, scope: !4541)
!4546 = !DILocation(line: 1721, column: 36, scope: !4541)
!4547 = !DILocation(line: 1721, column: 5, scope: !4541)
!4548 = !DILocation(line: 1722, column: 27, scope: !4353)
!4549 = !DILocation(line: 1722, column: 37, scope: !4353)
!4550 = !DILocation(line: 1722, column: 3, scope: !4353)
!4551 = !DILocation(line: 1723, column: 26, scope: !4353)
!4552 = !DILocation(line: 1723, column: 55, scope: !4353)
!4553 = !DILocation(line: 1723, column: 36, scope: !4353)
!4554 = !DILocation(line: 1723, column: 3, scope: !4353)
!4555 = !DILocation(line: 1725, column: 7, scope: !4556)
!4556 = distinct !DILexicalBlock(scope: !4353, file: !3, line: 1725, column: 7)
!4557 = !DILocation(line: 1725, column: 17, scope: !4556)
!4558 = !DILocation(line: 1725, column: 21, scope: !4556)
!4559 = !DILocation(line: 1725, column: 32, scope: !4556)
!4560 = !DILocation(line: 1725, column: 7, scope: !4353)
!4561 = !DILocation(line: 1727, column: 16, scope: !4562)
!4562 = distinct !DILexicalBlock(scope: !4556, file: !3, line: 1726, column: 5)
!4563 = !DILocation(line: 1727, column: 7, scope: !4562)
!4564 = !DILocation(line: 1728, column: 26, scope: !4562)
!4565 = !DILocation(line: 1728, column: 37, scope: !4562)
!4566 = !DILocation(line: 1728, column: 7, scope: !4562)
!4567 = !DILocation(line: 1729, column: 16, scope: !4562)
!4568 = !DILocation(line: 1729, column: 7, scope: !4562)
!4569 = !DILocation(line: 1730, column: 5, scope: !4562)
!4570 = !DILocation(line: 1731, column: 22, scope: !4353)
!4571 = !DILocation(line: 1731, column: 3, scope: !4353)
!4572 = !DILocation(line: 1732, column: 7, scope: !4573)
!4573 = distinct !DILexicalBlock(scope: !4353, file: !3, line: 1732, column: 7)
!4574 = !DILocation(line: 1732, column: 7, scope: !4353)
!4575 = !DILocation(line: 1733, column: 27, scope: !4573)
!4576 = !DILocation(line: 1733, column: 31, scope: !4573)
!4577 = !DILocation(line: 1733, column: 5, scope: !4573)
!4578 = !DILocation(line: 1734, column: 3, scope: !4353)
!4579 = !DILocation(line: 1735, column: 3, scope: !4353)
!4580 = !DILocation(line: 1736, column: 1, scope: !4353)
!4581 = distinct !DISubprogram(name: "gimple_call_arg", scope: !603, file: !603, line: 2025, type: !4582, scopeLine: 2026, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2371)
!4582 = !DISubroutineType(types: !4583)
!4583 = !{!748, !2734, !7}
!4584 = !DILocalVariable(name: "gs", arg: 1, scope: !4581, file: !603, line: 2025, type: !2734)
!4585 = !DILocation(line: 2025, column: 31, scope: !4581)
!4586 = !DILocalVariable(name: "index", arg: 2, scope: !4581, file: !603, line: 2025, type: !7)
!4587 = !DILocation(line: 2025, column: 44, scope: !4581)
!4588 = !DILocation(line: 2028, column: 21, scope: !4581)
!4589 = !DILocation(line: 2028, column: 25, scope: !4581)
!4590 = !DILocation(line: 2028, column: 31, scope: !4581)
!4591 = !DILocation(line: 2028, column: 10, scope: !4581)
!4592 = !DILocation(line: 2028, column: 3, scope: !4581)
!4593 = distinct !DISubprogram(name: "gimple_call_fndecl", scope: !603, file: !603, line: 1954, type: !4594, scopeLine: 1955, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2371)
!4594 = !DISubroutineType(types: !4595)
!4595 = !{!748, !2734}
!4596 = !DILocalVariable(name: "gs", arg: 1, scope: !4593, file: !603, line: 1954, type: !2734)
!4597 = !DILocation(line: 1954, column: 34, scope: !4593)
!4598 = !DILocalVariable(name: "addr", scope: !4593, file: !603, line: 1956, type: !748)
!4599 = !DILocation(line: 1956, column: 8, scope: !4593)
!4600 = !DILocation(line: 1956, column: 31, scope: !4593)
!4601 = !DILocation(line: 1956, column: 15, scope: !4593)
!4602 = !DILocation(line: 1957, column: 7, scope: !4603)
!4603 = distinct !DILexicalBlock(scope: !4593, file: !603, line: 1957, column: 7)
!4604 = !DILocation(line: 1957, column: 24, scope: !4603)
!4605 = !DILocation(line: 1957, column: 7, scope: !4593)
!4606 = !DILocation(line: 1958, column: 12, scope: !4603)
!4607 = !DILocation(line: 1958, column: 5, scope: !4603)
!4608 = !DILocation(line: 1959, column: 3, scope: !4593)
!4609 = !DILocation(line: 1960, column: 1, scope: !4593)
!4610 = distinct !DISubprogram(name: "gimple_call_lhs", scope: !603, file: !603, line: 1878, type: !4594, scopeLine: 1879, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2371)
!4611 = !DILocalVariable(name: "gs", arg: 1, scope: !4610, file: !603, line: 1878, type: !2734)
!4612 = !DILocation(line: 1878, column: 31, scope: !4610)
!4613 = !DILocation(line: 1881, column: 21, scope: !4610)
!4614 = !DILocation(line: 1881, column: 10, scope: !4610)
!4615 = !DILocation(line: 1881, column: 3, scope: !4610)
!4616 = distinct !DISubprogram(name: "gimple_call_set_lhs", scope: !603, file: !603, line: 1898, type: !4617, scopeLine: 1899, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2371)
!4617 = !DISubroutineType(types: !4618)
!4618 = !{null, !1046, !748}
!4619 = !DILocalVariable(name: "gs", arg: 1, scope: !4616, file: !603, line: 1898, type: !1046)
!4620 = !DILocation(line: 1898, column: 29, scope: !4616)
!4621 = !DILocalVariable(name: "lhs", arg: 2, scope: !4616, file: !603, line: 1898, type: !748)
!4622 = !DILocation(line: 1898, column: 38, scope: !4616)
!4623 = !DILocation(line: 1901, column: 18, scope: !4616)
!4624 = !DILocation(line: 1901, column: 25, scope: !4616)
!4625 = !DILocation(line: 1901, column: 3, scope: !4616)
!4626 = !DILocation(line: 1902, column: 7, scope: !4627)
!4627 = distinct !DILexicalBlock(scope: !4616, file: !603, line: 1902, column: 7)
!4628 = !DILocation(line: 1902, column: 11, scope: !4627)
!4629 = !DILocation(line: 1902, column: 14, scope: !4627)
!4630 = !DILocation(line: 1902, column: 30, scope: !4627)
!4631 = !DILocation(line: 1902, column: 7, scope: !4616)
!4632 = !DILocation(line: 1903, column: 31, scope: !4627)
!4633 = !DILocation(line: 1903, column: 5, scope: !4627)
!4634 = !DILocation(line: 1903, column: 29, scope: !4627)
!4635 = !DILocation(line: 1904, column: 1, scope: !4616)
!4636 = distinct !DISubprogram(name: "gimple_set_block", scope: !603, file: !603, line: 1130, type: !4617, scopeLine: 1131, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2371)
!4637 = !DILocalVariable(name: "g", arg: 1, scope: !4636, file: !603, line: 1130, type: !1046)
!4638 = !DILocation(line: 1130, column: 26, scope: !4636)
!4639 = !DILocalVariable(name: "block", arg: 2, scope: !4636, file: !603, line: 1130, type: !748)
!4640 = !DILocation(line: 1130, column: 34, scope: !4636)
!4641 = !DILocation(line: 1132, column: 21, scope: !4636)
!4642 = !DILocation(line: 1132, column: 3, scope: !4636)
!4643 = !DILocation(line: 1132, column: 6, scope: !4636)
!4644 = !DILocation(line: 1132, column: 13, scope: !4636)
!4645 = !DILocation(line: 1132, column: 19, scope: !4636)
!4646 = !DILocation(line: 1133, column: 1, scope: !4636)
!4647 = distinct !DISubprogram(name: "gimple_block", scope: !603, file: !603, line: 1121, type: !4594, scopeLine: 1122, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2371)
!4648 = !DILocalVariable(name: "g", arg: 1, scope: !4647, file: !603, line: 1121, type: !2734)
!4649 = !DILocation(line: 1121, column: 28, scope: !4647)
!4650 = !DILocation(line: 1123, column: 10, scope: !4647)
!4651 = !DILocation(line: 1123, column: 13, scope: !4647)
!4652 = !DILocation(line: 1123, column: 20, scope: !4647)
!4653 = !DILocation(line: 1123, column: 3, scope: !4647)
!4654 = distinct !DISubprogram(name: "gimple_has_location", scope: !603, file: !603, line: 1165, type: !2732, scopeLine: 1166, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2371)
!4655 = !DILocalVariable(name: "g", arg: 1, scope: !4654, file: !603, line: 1165, type: !2734)
!4656 = !DILocation(line: 1165, column: 35, scope: !4654)
!4657 = !DILocation(line: 1167, column: 27, scope: !4654)
!4658 = !DILocation(line: 1167, column: 10, scope: !4654)
!4659 = !DILocation(line: 1167, column: 30, scope: !4654)
!4660 = !DILocation(line: 1167, column: 3, scope: !4654)
!4661 = distinct !DISubprogram(name: "gimple_set_location", scope: !603, file: !603, line: 1156, type: !4662, scopeLine: 1157, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2371)
!4662 = !DISubroutineType(types: !4663)
!4663 = !{null, !1046, !860}
!4664 = !DILocalVariable(name: "g", arg: 1, scope: !4661, file: !603, line: 1156, type: !1046)
!4665 = !DILocation(line: 1156, column: 29, scope: !4661)
!4666 = !DILocalVariable(name: "location", arg: 2, scope: !4661, file: !603, line: 1156, type: !860)
!4667 = !DILocation(line: 1156, column: 43, scope: !4661)
!4668 = !DILocation(line: 1158, column: 24, scope: !4661)
!4669 = !DILocation(line: 1158, column: 3, scope: !4661)
!4670 = !DILocation(line: 1158, column: 6, scope: !4661)
!4671 = !DILocation(line: 1158, column: 13, scope: !4661)
!4672 = !DILocation(line: 1158, column: 22, scope: !4661)
!4673 = !DILocation(line: 1159, column: 1, scope: !4661)
!4674 = distinct !DISubprogram(name: "gimple_location", scope: !603, file: !603, line: 1139, type: !4675, scopeLine: 1140, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2371)
!4675 = !DISubroutineType(types: !4676)
!4676 = !{!860, !2734}
!4677 = !DILocalVariable(name: "g", arg: 1, scope: !4674, file: !603, line: 1139, type: !2734)
!4678 = !DILocation(line: 1139, column: 31, scope: !4674)
!4679 = !DILocation(line: 1141, column: 10, scope: !4674)
!4680 = !DILocation(line: 1141, column: 13, scope: !4674)
!4681 = !DILocation(line: 1141, column: 20, scope: !4674)
!4682 = !DILocation(line: 1141, column: 3, scope: !4674)
!4683 = distinct !DISubprogram(name: "gimple_call_copy_flags", scope: !603, file: !603, line: 2198, type: !4684, scopeLine: 2199, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2371)
!4684 = !DISubroutineType(types: !4685)
!4685 = !{null, !1046, !1046}
!4686 = !DILocalVariable(name: "dest_call", arg: 1, scope: !4683, file: !603, line: 2198, type: !1046)
!4687 = !DILocation(line: 2198, column: 32, scope: !4683)
!4688 = !DILocalVariable(name: "orig_call", arg: 2, scope: !4683, file: !603, line: 2198, type: !1046)
!4689 = !DILocation(line: 2198, column: 50, scope: !4683)
!4690 = !DILocation(line: 2202, column: 31, scope: !4683)
!4691 = !DILocation(line: 2202, column: 42, scope: !4683)
!4692 = !DILocation(line: 2202, column: 49, scope: !4683)
!4693 = !DILocation(line: 2202, column: 3, scope: !4683)
!4694 = !DILocation(line: 2202, column: 14, scope: !4683)
!4695 = !DILocation(line: 2202, column: 21, scope: !4683)
!4696 = !DILocation(line: 2202, column: 29, scope: !4683)
!4697 = !DILocation(line: 2203, column: 1, scope: !4683)
!4698 = distinct !DISubprogram(name: "gimple_call_set_chain", scope: !603, file: !603, line: 2002, type: !4617, scopeLine: 2003, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2371)
!4699 = !DILocalVariable(name: "gs", arg: 1, scope: !4698, file: !603, line: 2002, type: !1046)
!4700 = !DILocation(line: 2002, column: 31, scope: !4698)
!4701 = !DILocalVariable(name: "chain", arg: 2, scope: !4698, file: !603, line: 2002, type: !748)
!4702 = !DILocation(line: 2002, column: 40, scope: !4698)
!4703 = !DILocation(line: 2006, column: 18, scope: !4698)
!4704 = !DILocation(line: 2006, column: 25, scope: !4698)
!4705 = !DILocation(line: 2006, column: 3, scope: !4698)
!4706 = !DILocation(line: 2007, column: 1, scope: !4698)
!4707 = distinct !DISubprogram(name: "gimple_call_chain", scope: !603, file: !603, line: 1983, type: !4594, scopeLine: 1984, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2371)
!4708 = !DILocalVariable(name: "gs", arg: 1, scope: !4707, file: !603, line: 1983, type: !2734)
!4709 = !DILocation(line: 1983, column: 33, scope: !4707)
!4710 = !DILocation(line: 1986, column: 21, scope: !4707)
!4711 = !DILocation(line: 1986, column: 10, scope: !4707)
!4712 = !DILocation(line: 1986, column: 3, scope: !4707)
!4713 = distinct !DISubprogram(name: "ipa_combine_adjustments", scope: !3, file: !3, line: 1769, type: !4714, scopeLine: 1771, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2371)
!4714 = !DISubroutineType(types: !4715)
!4715 = !{!4008, !4008, !4008}
!4716 = !DILocalVariable(name: "inner", arg: 1, scope: !4713, file: !3, line: 1769, type: !4008)
!4717 = !DILocation(line: 1769, column: 50, scope: !4713)
!4718 = !DILocalVariable(name: "outer", arg: 2, scope: !4713, file: !3, line: 1770, type: !4008)
!4719 = !DILocation(line: 1770, column: 29, scope: !4713)
!4720 = !DILocalVariable(name: "i", scope: !4713, file: !3, line: 1772, type: !829)
!4721 = !DILocation(line: 1772, column: 7, scope: !4713)
!4722 = !DILocalVariable(name: "outlen", scope: !4713, file: !3, line: 1772, type: !829)
!4723 = !DILocation(line: 1772, column: 10, scope: !4713)
!4724 = !DILocation(line: 1772, column: 19, scope: !4713)
!4725 = !DILocalVariable(name: "inlen", scope: !4713, file: !3, line: 1773, type: !829)
!4726 = !DILocation(line: 1773, column: 7, scope: !4713)
!4727 = !DILocation(line: 1773, column: 15, scope: !4713)
!4728 = !DILocalVariable(name: "removals", scope: !4713, file: !3, line: 1774, type: !829)
!4729 = !DILocation(line: 1774, column: 7, scope: !4713)
!4730 = !DILocalVariable(name: "adjustments", scope: !4713, file: !3, line: 1775, type: !4008)
!4731 = !DILocation(line: 1775, column: 27, scope: !4713)
!4732 = !DILocalVariable(name: "tmp", scope: !4713, file: !3, line: 1775, type: !4008)
!4733 = !DILocation(line: 1775, column: 40, scope: !4713)
!4734 = !DILocation(line: 1777, column: 9, scope: !4713)
!4735 = !DILocation(line: 1777, column: 7, scope: !4713)
!4736 = !DILocation(line: 1778, column: 10, scope: !4737)
!4737 = distinct !DILexicalBlock(scope: !4713, file: !3, line: 1778, column: 3)
!4738 = !DILocation(line: 1778, column: 8, scope: !4737)
!4739 = !DILocation(line: 1778, column: 15, scope: !4740)
!4740 = distinct !DILexicalBlock(scope: !4737, file: !3, line: 1778, column: 3)
!4741 = !DILocation(line: 1778, column: 19, scope: !4740)
!4742 = !DILocation(line: 1778, column: 17, scope: !4740)
!4743 = !DILocation(line: 1778, column: 3, scope: !4737)
!4744 = !DILocalVariable(name: "n", scope: !4745, file: !3, line: 1780, type: !4092)
!4745 = distinct !DILexicalBlock(scope: !4740, file: !3, line: 1779, column: 5)
!4746 = !DILocation(line: 1780, column: 35, scope: !4745)
!4747 = !DILocation(line: 1781, column: 11, scope: !4745)
!4748 = !DILocation(line: 1781, column: 9, scope: !4745)
!4749 = !DILocation(line: 1783, column: 11, scope: !4750)
!4750 = distinct !DILexicalBlock(scope: !4745, file: !3, line: 1783, column: 11)
!4751 = !DILocation(line: 1783, column: 14, scope: !4750)
!4752 = !DILocation(line: 1783, column: 11, scope: !4745)
!4753 = !DILocation(line: 1784, column: 10, scope: !4750)
!4754 = !DILocation(line: 1784, column: 2, scope: !4750)
!4755 = !DILocation(line: 1786, column: 2, scope: !4750)
!4756 = !DILocation(line: 1787, column: 5, scope: !4745)
!4757 = !DILocation(line: 1778, column: 27, scope: !4740)
!4758 = !DILocation(line: 1778, column: 3, scope: !4740)
!4759 = distinct !{!4759, !4743, !4760}
!4760 = !DILocation(line: 1787, column: 5, scope: !4737)
!4761 = !DILocation(line: 1789, column: 17, scope: !4713)
!4762 = !DILocation(line: 1789, column: 15, scope: !4713)
!4763 = !DILocation(line: 1790, column: 10, scope: !4764)
!4764 = distinct !DILexicalBlock(scope: !4713, file: !3, line: 1790, column: 3)
!4765 = !DILocation(line: 1790, column: 8, scope: !4764)
!4766 = !DILocation(line: 1790, column: 15, scope: !4767)
!4767 = distinct !DILexicalBlock(scope: !4764, file: !3, line: 1790, column: 3)
!4768 = !DILocation(line: 1790, column: 19, scope: !4767)
!4769 = !DILocation(line: 1790, column: 17, scope: !4767)
!4770 = !DILocation(line: 1790, column: 3, scope: !4764)
!4771 = !DILocalVariable(name: "r", scope: !4772, file: !3, line: 1792, type: !4092)
!4772 = distinct !DILexicalBlock(scope: !4767, file: !3, line: 1791, column: 5)
!4773 = !DILocation(line: 1792, column: 35, scope: !4772)
!4774 = !DILocalVariable(name: "out", scope: !4772, file: !3, line: 1793, type: !4092)
!4775 = !DILocation(line: 1793, column: 35, scope: !4772)
!4776 = !DILocation(line: 1793, column: 41, scope: !4772)
!4777 = !DILocalVariable(name: "in", scope: !4772, file: !3, line: 1795, type: !4092)
!4778 = !DILocation(line: 1795, column: 35, scope: !4772)
!4779 = !DILocation(line: 1795, column: 40, scope: !4772)
!4780 = !DILocation(line: 1798, column: 7, scope: !4772)
!4781 = !DILocation(line: 1799, column: 11, scope: !4782)
!4782 = distinct !DILexicalBlock(scope: !4772, file: !3, line: 1799, column: 11)
!4783 = !DILocation(line: 1799, column: 16, scope: !4782)
!4784 = !DILocation(line: 1799, column: 11, scope: !4772)
!4785 = !DILocation(line: 1801, column: 48, scope: !4786)
!4786 = distinct !DILexicalBlock(scope: !4787, file: !3, line: 1801, column: 8)
!4787 = distinct !DILexicalBlock(scope: !4782, file: !3, line: 1800, column: 2)
!4788 = !DILocation(line: 1801, column: 52, scope: !4786)
!4789 = !DILocation(line: 1801, column: 64, scope: !4786)
!4790 = !DILocation(line: 1801, column: 9, scope: !4786)
!4791 = !DILocation(line: 1801, column: 8, scope: !4787)
!4792 = !DILocation(line: 1803, column: 12, scope: !4793)
!4793 = distinct !DILexicalBlock(scope: !4786, file: !3, line: 1802, column: 6)
!4794 = !DILocation(line: 1803, column: 10, scope: !4793)
!4795 = !DILocation(line: 1804, column: 16, scope: !4793)
!4796 = !DILocation(line: 1804, column: 8, scope: !4793)
!4797 = !DILocation(line: 1805, column: 8, scope: !4793)
!4798 = !DILocation(line: 1805, column: 11, scope: !4793)
!4799 = !DILocation(line: 1805, column: 24, scope: !4793)
!4800 = !DILocation(line: 1806, column: 6, scope: !4793)
!4801 = !DILocation(line: 1807, column: 4, scope: !4787)
!4802 = !DILocation(line: 1810, column: 11, scope: !4772)
!4803 = !DILocation(line: 1810, column: 9, scope: !4772)
!4804 = !DILocation(line: 1811, column: 15, scope: !4772)
!4805 = !DILocation(line: 1811, column: 7, scope: !4772)
!4806 = !DILocation(line: 1812, column: 23, scope: !4772)
!4807 = !DILocation(line: 1812, column: 27, scope: !4772)
!4808 = !DILocation(line: 1812, column: 7, scope: !4772)
!4809 = !DILocation(line: 1812, column: 10, scope: !4772)
!4810 = !DILocation(line: 1812, column: 21, scope: !4772)
!4811 = !DILocation(line: 1813, column: 17, scope: !4772)
!4812 = !DILocation(line: 1813, column: 22, scope: !4772)
!4813 = !DILocation(line: 1813, column: 7, scope: !4772)
!4814 = !DILocation(line: 1813, column: 10, scope: !4772)
!4815 = !DILocation(line: 1813, column: 15, scope: !4772)
!4816 = !DILocation(line: 1817, column: 11, scope: !4817)
!4817 = distinct !DILexicalBlock(scope: !4772, file: !3, line: 1817, column: 11)
!4818 = !DILocation(line: 1817, column: 15, scope: !4817)
!4819 = !DILocation(line: 1817, column: 26, scope: !4817)
!4820 = !DILocation(line: 1817, column: 29, scope: !4817)
!4821 = !DILocation(line: 1817, column: 34, scope: !4817)
!4822 = !DILocation(line: 1817, column: 11, scope: !4772)
!4823 = !DILocation(line: 1818, column: 2, scope: !4817)
!4824 = !DILocation(line: 1818, column: 5, scope: !4817)
!4825 = !DILocation(line: 1818, column: 16, scope: !4817)
!4826 = !DILocation(line: 1819, column: 16, scope: !4827)
!4827 = distinct !DILexicalBlock(scope: !4817, file: !3, line: 1819, column: 16)
!4828 = !DILocation(line: 1819, column: 20, scope: !4827)
!4829 = !DILocation(line: 1819, column: 16, scope: !4817)
!4830 = !DILocation(line: 1820, column: 14, scope: !4827)
!4831 = !DILocation(line: 1820, column: 19, scope: !4827)
!4832 = !DILocation(line: 1820, column: 2, scope: !4827)
!4833 = !DILocation(line: 1820, column: 5, scope: !4827)
!4834 = !DILocation(line: 1820, column: 12, scope: !4827)
!4835 = !DILocation(line: 1821, column: 16, scope: !4836)
!4836 = distinct !DILexicalBlock(scope: !4827, file: !3, line: 1821, column: 16)
!4837 = !DILocation(line: 1821, column: 21, scope: !4836)
!4838 = !DILocation(line: 1821, column: 16, scope: !4827)
!4839 = !DILocation(line: 1822, column: 14, scope: !4836)
!4840 = !DILocation(line: 1822, column: 18, scope: !4836)
!4841 = !DILocation(line: 1822, column: 2, scope: !4836)
!4842 = !DILocation(line: 1822, column: 5, scope: !4836)
!4843 = !DILocation(line: 1822, column: 12, scope: !4836)
!4844 = !DILocation(line: 1824, column: 14, scope: !4836)
!4845 = !DILocation(line: 1824, column: 18, scope: !4836)
!4846 = !DILocation(line: 1824, column: 27, scope: !4836)
!4847 = !DILocation(line: 1824, column: 32, scope: !4836)
!4848 = !DILocation(line: 1824, column: 25, scope: !4836)
!4849 = !DILocation(line: 1824, column: 2, scope: !4836)
!4850 = !DILocation(line: 1824, column: 5, scope: !4836)
!4851 = !DILocation(line: 1824, column: 12, scope: !4836)
!4852 = !DILocation(line: 1825, column: 5, scope: !4772)
!4853 = !DILocation(line: 1790, column: 28, scope: !4767)
!4854 = !DILocation(line: 1790, column: 3, scope: !4767)
!4855 = distinct !{!4855, !4770, !4856}
!4856 = !DILocation(line: 1825, column: 5, scope: !4764)
!4857 = !DILocation(line: 1827, column: 10, scope: !4858)
!4858 = distinct !DILexicalBlock(scope: !4713, file: !3, line: 1827, column: 3)
!4859 = !DILocation(line: 1827, column: 8, scope: !4858)
!4860 = !DILocation(line: 1827, column: 15, scope: !4861)
!4861 = distinct !DILexicalBlock(scope: !4858, file: !3, line: 1827, column: 3)
!4862 = !DILocation(line: 1827, column: 19, scope: !4861)
!4863 = !DILocation(line: 1827, column: 17, scope: !4861)
!4864 = !DILocation(line: 1827, column: 3, scope: !4858)
!4865 = !DILocalVariable(name: "n", scope: !4866, file: !3, line: 1829, type: !4092)
!4866 = distinct !DILexicalBlock(scope: !4861, file: !3, line: 1828, column: 5)
!4867 = !DILocation(line: 1829, column: 35, scope: !4866)
!4868 = !DILocation(line: 1829, column: 39, scope: !4866)
!4869 = !DILocation(line: 1832, column: 11, scope: !4870)
!4870 = distinct !DILexicalBlock(scope: !4866, file: !3, line: 1832, column: 11)
!4871 = !DILocation(line: 1832, column: 14, scope: !4870)
!4872 = !DILocation(line: 1832, column: 11, scope: !4866)
!4873 = !DILocation(line: 1833, column: 2, scope: !4870)
!4874 = !DILocation(line: 1834, column: 5, scope: !4866)
!4875 = !DILocation(line: 1827, column: 27, scope: !4861)
!4876 = !DILocation(line: 1827, column: 3, scope: !4861)
!4877 = distinct !{!4877, !4864, !4878}
!4878 = !DILocation(line: 1834, column: 5, scope: !4858)
!4879 = !DILocation(line: 1836, column: 3, scope: !4713)
!4880 = !DILocation(line: 1837, column: 10, scope: !4713)
!4881 = !DILocation(line: 1837, column: 3, scope: !4713)
!4882 = distinct !DISubprogram(name: "VEC_ipa_parm_adjustment_t_heap_alloc", scope: !456, file: !456, line: 485, type: !4883, scopeLine: 485, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2371)
!4883 = !DISubroutineType(types: !4884)
!4884 = !{!2282, !829}
!4885 = !DILocalVariable(name: "alloc_", arg: 1, scope: !4882, file: !456, line: 485, type: !829)
!4886 = !DILocation(line: 485, column: 1, scope: !4882)
!4887 = distinct !DISubprogram(name: "VEC_ipa_parm_adjustment_t_base_quick_push", scope: !456, file: !456, line: 484, type: !4888, scopeLine: 484, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2371)
!4888 = !DISubroutineType(types: !4889)
!4889 = !{!4332, !4333, !4890}
!4890 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4891, size: 64)
!4891 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2294)
!4892 = !DILocalVariable(name: "vec_", arg: 1, scope: !4887, file: !456, line: 484, type: !4333)
!4893 = !DILocation(line: 484, column: 1, scope: !4887)
!4894 = !DILocalVariable(name: "obj_", arg: 2, scope: !4887, file: !456, line: 484, type: !4890)
!4895 = !DILocalVariable(name: "slot_", scope: !4887, file: !456, line: 484, type: !4332)
!4896 = !DILocation(line: 484, column: 1, scope: !4897)
!4897 = distinct !DILexicalBlock(scope: !4887, file: !456, line: 484, column: 1)
!4898 = distinct !DISubprogram(name: "index_in_adjustments_multiple_times_p", scope: !3, file: !3, line: 1741, type: !4899, scopeLine: 1743, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2371)
!4899 = !DISubroutineType(types: !4900)
!4900 = !{!852, !829, !4008}
!4901 = !DILocalVariable(name: "base_index", arg: 1, scope: !4898, file: !3, line: 1741, type: !829)
!4902 = !DILocation(line: 1741, column: 44, scope: !4898)
!4903 = !DILocalVariable(name: "adjustments", arg: 2, scope: !4898, file: !3, line: 1742, type: !4008)
!4904 = !DILocation(line: 1742, column: 36, scope: !4898)
!4905 = !DILocalVariable(name: "i", scope: !4898, file: !3, line: 1744, type: !829)
!4906 = !DILocation(line: 1744, column: 7, scope: !4898)
!4907 = !DILocalVariable(name: "len", scope: !4898, file: !3, line: 1744, type: !829)
!4908 = !DILocation(line: 1744, column: 10, scope: !4898)
!4909 = !DILocation(line: 1744, column: 16, scope: !4898)
!4910 = !DILocalVariable(name: "one", scope: !4898, file: !3, line: 1745, type: !852)
!4911 = !DILocation(line: 1745, column: 8, scope: !4898)
!4912 = !DILocation(line: 1747, column: 10, scope: !4913)
!4913 = distinct !DILexicalBlock(scope: !4898, file: !3, line: 1747, column: 3)
!4914 = !DILocation(line: 1747, column: 8, scope: !4913)
!4915 = !DILocation(line: 1747, column: 15, scope: !4916)
!4916 = distinct !DILexicalBlock(scope: !4913, file: !3, line: 1747, column: 3)
!4917 = !DILocation(line: 1747, column: 19, scope: !4916)
!4918 = !DILocation(line: 1747, column: 17, scope: !4916)
!4919 = !DILocation(line: 1747, column: 3, scope: !4913)
!4920 = !DILocalVariable(name: "adj", scope: !4921, file: !3, line: 1749, type: !4092)
!4921 = distinct !DILexicalBlock(scope: !4916, file: !3, line: 1748, column: 5)
!4922 = !DILocation(line: 1749, column: 35, scope: !4921)
!4923 = !DILocation(line: 1750, column: 13, scope: !4921)
!4924 = !DILocation(line: 1750, column: 11, scope: !4921)
!4925 = !DILocation(line: 1752, column: 11, scope: !4926)
!4926 = distinct !DILexicalBlock(scope: !4921, file: !3, line: 1752, column: 11)
!4927 = !DILocation(line: 1752, column: 16, scope: !4926)
!4928 = !DILocation(line: 1752, column: 30, scope: !4926)
!4929 = !DILocation(line: 1752, column: 27, scope: !4926)
!4930 = !DILocation(line: 1752, column: 11, scope: !4921)
!4931 = !DILocation(line: 1754, column: 8, scope: !4932)
!4932 = distinct !DILexicalBlock(scope: !4933, file: !3, line: 1754, column: 8)
!4933 = distinct !DILexicalBlock(scope: !4926, file: !3, line: 1753, column: 2)
!4934 = !DILocation(line: 1754, column: 8, scope: !4933)
!4935 = !DILocation(line: 1755, column: 6, scope: !4932)
!4936 = !DILocation(line: 1757, column: 10, scope: !4932)
!4937 = !DILocation(line: 1758, column: 2, scope: !4933)
!4938 = !DILocation(line: 1759, column: 5, scope: !4921)
!4939 = !DILocation(line: 1747, column: 25, scope: !4916)
!4940 = !DILocation(line: 1747, column: 3, scope: !4916)
!4941 = distinct !{!4941, !4919, !4942}
!4942 = !DILocation(line: 1759, column: 5, scope: !4913)
!4943 = !DILocation(line: 1760, column: 3, scope: !4898)
!4944 = !DILocation(line: 1761, column: 1, scope: !4898)
!4945 = distinct !DISubprogram(name: "VEC_ipa_parm_adjustment_t_heap_free", scope: !456, file: !456, line: 485, type: !4946, scopeLine: 485, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2371)
!4946 = !DISubroutineType(types: !4947)
!4947 = !{null, !4948}
!4948 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2282, size: 64)
!4949 = !DILocalVariable(name: "vec_", arg: 1, scope: !4945, file: !456, line: 485, type: !4948)
!4950 = !DILocation(line: 485, column: 1, scope: !4945)
!4951 = !DILocation(line: 485, column: 1, scope: !4952)
!4952 = distinct !DILexicalBlock(scope: !4945, file: !456, line: 485, column: 1)
!4953 = distinct !DISubprogram(name: "ipa_dump_param_adjustments", scope: !3, file: !3, line: 1844, type: !4954, scopeLine: 1846, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2371)
!4954 = !DISubroutineType(types: !4955)
!4955 = !{null, !2794, !4008, !748}
!4956 = !DILocalVariable(name: "file", arg: 1, scope: !4953, file: !3, line: 1844, type: !2794)
!4957 = !DILocation(line: 1844, column: 35, scope: !4953)
!4958 = !DILocalVariable(name: "adjustments", arg: 2, scope: !4953, file: !3, line: 1844, type: !4008)
!4959 = !DILocation(line: 1844, column: 65, scope: !4953)
!4960 = !DILocalVariable(name: "fndecl", arg: 3, scope: !4953, file: !3, line: 1845, type: !748)
!4961 = !DILocation(line: 1845, column: 13, scope: !4953)
!4962 = !DILocalVariable(name: "i", scope: !4953, file: !3, line: 1847, type: !829)
!4963 = !DILocation(line: 1847, column: 7, scope: !4953)
!4964 = !DILocalVariable(name: "len", scope: !4953, file: !3, line: 1847, type: !829)
!4965 = !DILocation(line: 1847, column: 10, scope: !4953)
!4966 = !DILocation(line: 1847, column: 16, scope: !4953)
!4967 = !DILocalVariable(name: "first", scope: !4953, file: !3, line: 1848, type: !852)
!4968 = !DILocation(line: 1848, column: 8, scope: !4953)
!4969 = !DILocalVariable(name: "parms", scope: !4953, file: !3, line: 1849, type: !2277)
!4970 = !DILocation(line: 1849, column: 20, scope: !4953)
!4971 = !DILocation(line: 1849, column: 60, scope: !4953)
!4972 = !DILocation(line: 1849, column: 28, scope: !4953)
!4973 = !DILocation(line: 1851, column: 12, scope: !4953)
!4974 = !DILocation(line: 1851, column: 3, scope: !4953)
!4975 = !DILocation(line: 1852, column: 10, scope: !4976)
!4976 = distinct !DILexicalBlock(scope: !4953, file: !3, line: 1852, column: 3)
!4977 = !DILocation(line: 1852, column: 8, scope: !4976)
!4978 = !DILocation(line: 1852, column: 15, scope: !4979)
!4979 = distinct !DILexicalBlock(scope: !4976, file: !3, line: 1852, column: 3)
!4980 = !DILocation(line: 1852, column: 19, scope: !4979)
!4981 = !DILocation(line: 1852, column: 17, scope: !4979)
!4982 = !DILocation(line: 1852, column: 3, scope: !4976)
!4983 = !DILocalVariable(name: "adj", scope: !4984, file: !3, line: 1854, type: !4092)
!4984 = distinct !DILexicalBlock(scope: !4979, file: !3, line: 1853, column: 5)
!4985 = !DILocation(line: 1854, column: 35, scope: !4984)
!4986 = !DILocation(line: 1855, column: 13, scope: !4984)
!4987 = !DILocation(line: 1855, column: 11, scope: !4984)
!4988 = !DILocation(line: 1857, column: 12, scope: !4989)
!4989 = distinct !DILexicalBlock(scope: !4984, file: !3, line: 1857, column: 11)
!4990 = !DILocation(line: 1857, column: 11, scope: !4984)
!4991 = !DILocation(line: 1858, column: 11, scope: !4989)
!4992 = !DILocation(line: 1858, column: 2, scope: !4989)
!4993 = !DILocation(line: 1860, column: 8, scope: !4989)
!4994 = !DILocation(line: 1862, column: 16, scope: !4984)
!4995 = !DILocation(line: 1862, column: 47, scope: !4984)
!4996 = !DILocation(line: 1862, column: 50, scope: !4984)
!4997 = !DILocation(line: 1862, column: 55, scope: !4984)
!4998 = !DILocation(line: 1862, column: 7, scope: !4984)
!4999 = !DILocation(line: 1863, column: 27, scope: !4984)
!5000 = !DILocation(line: 1863, column: 33, scope: !4984)
!5001 = !DILocation(line: 1863, column: 7, scope: !4984)
!5002 = !DILocation(line: 1864, column: 11, scope: !5003)
!5003 = distinct !DILexicalBlock(scope: !4984, file: !3, line: 1864, column: 11)
!5004 = !DILocation(line: 1864, column: 16, scope: !5003)
!5005 = !DILocation(line: 1864, column: 11, scope: !4984)
!5006 = !DILocation(line: 1866, column: 13, scope: !5007)
!5007 = distinct !DILexicalBlock(scope: !5003, file: !3, line: 1865, column: 2)
!5008 = !DILocation(line: 1866, column: 4, scope: !5007)
!5009 = !DILocation(line: 1867, column: 24, scope: !5007)
!5010 = !DILocation(line: 1867, column: 30, scope: !5007)
!5011 = !DILocation(line: 1867, column: 35, scope: !5007)
!5012 = !DILocation(line: 1867, column: 4, scope: !5007)
!5013 = !DILocation(line: 1868, column: 2, scope: !5007)
!5014 = !DILocation(line: 1869, column: 11, scope: !5015)
!5015 = distinct !DILexicalBlock(scope: !4984, file: !3, line: 1869, column: 11)
!5016 = !DILocation(line: 1869, column: 16, scope: !5015)
!5017 = !DILocation(line: 1869, column: 11, scope: !4984)
!5018 = !DILocation(line: 1871, column: 13, scope: !5019)
!5019 = distinct !DILexicalBlock(scope: !5015, file: !3, line: 1870, column: 2)
!5020 = !DILocation(line: 1871, column: 4, scope: !5019)
!5021 = !DILocation(line: 1872, column: 24, scope: !5019)
!5022 = !DILocation(line: 1872, column: 30, scope: !5019)
!5023 = !DILocation(line: 1872, column: 35, scope: !5019)
!5024 = !DILocation(line: 1872, column: 4, scope: !5019)
!5025 = !DILocation(line: 1873, column: 2, scope: !5019)
!5026 = !DILocation(line: 1874, column: 11, scope: !5027)
!5027 = distinct !DILexicalBlock(scope: !4984, file: !3, line: 1874, column: 11)
!5028 = !DILocation(line: 1874, column: 16, scope: !5027)
!5029 = !DILocation(line: 1874, column: 11, scope: !4984)
!5030 = !DILocation(line: 1876, column: 13, scope: !5031)
!5031 = distinct !DILexicalBlock(scope: !5027, file: !3, line: 1875, column: 2)
!5032 = !DILocation(line: 1876, column: 4, scope: !5031)
!5033 = !DILocation(line: 1877, column: 24, scope: !5031)
!5034 = !DILocation(line: 1877, column: 30, scope: !5031)
!5035 = !DILocation(line: 1877, column: 35, scope: !5031)
!5036 = !DILocation(line: 1877, column: 4, scope: !5031)
!5037 = !DILocation(line: 1878, column: 2, scope: !5031)
!5038 = !DILocation(line: 1880, column: 11, scope: !5039)
!5039 = distinct !DILexicalBlock(scope: !4984, file: !3, line: 1880, column: 11)
!5040 = !DILocation(line: 1880, column: 16, scope: !5039)
!5041 = !DILocation(line: 1880, column: 11, scope: !4984)
!5042 = !DILocation(line: 1881, column: 11, scope: !5039)
!5043 = !DILocation(line: 1881, column: 2, scope: !5039)
!5044 = !DILocation(line: 1882, column: 16, scope: !5045)
!5045 = distinct !DILexicalBlock(scope: !5039, file: !3, line: 1882, column: 16)
!5046 = !DILocation(line: 1882, column: 21, scope: !5045)
!5047 = !DILocation(line: 1882, column: 16, scope: !5039)
!5048 = !DILocation(line: 1883, column: 11, scope: !5045)
!5049 = !DILocation(line: 1883, column: 2, scope: !5045)
!5050 = !DILocation(line: 1885, column: 11, scope: !5045)
!5051 = !DILocation(line: 1885, column: 40, scope: !5045)
!5052 = !DILocation(line: 1885, column: 45, scope: !5045)
!5053 = !DILocation(line: 1885, column: 2, scope: !5045)
!5054 = !DILocation(line: 1886, column: 11, scope: !5055)
!5055 = distinct !DILexicalBlock(scope: !4984, file: !3, line: 1886, column: 11)
!5056 = !DILocation(line: 1886, column: 16, scope: !5055)
!5057 = !DILocation(line: 1886, column: 11, scope: !4984)
!5058 = !DILocation(line: 1887, column: 11, scope: !5055)
!5059 = !DILocation(line: 1887, column: 2, scope: !5055)
!5060 = !DILocation(line: 1888, column: 25, scope: !4984)
!5061 = !DILocation(line: 1888, column: 43, scope: !4984)
!5062 = !DILocation(line: 1888, column: 48, scope: !4984)
!5063 = !DILocation(line: 1888, column: 7, scope: !4984)
!5064 = !DILocation(line: 1889, column: 16, scope: !4984)
!5065 = !DILocation(line: 1889, column: 7, scope: !4984)
!5066 = !DILocation(line: 1890, column: 5, scope: !4984)
!5067 = !DILocation(line: 1852, column: 25, scope: !4979)
!5068 = !DILocation(line: 1852, column: 3, scope: !4979)
!5069 = distinct !{!5069, !4982, !5070}
!5070 = !DILocation(line: 1890, column: 5, scope: !4976)
!5071 = !DILocation(line: 1891, column: 3, scope: !4953)
!5072 = !DILocation(line: 1892, column: 1, scope: !4953)
!5073 = distinct !DISubprogram(name: "ipa_prop_write_jump_functions", scope: !3, file: !3, line: 2093, type: !5074, scopeLine: 2094, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2371)
!5074 = !DISubroutineType(types: !5075)
!5075 = !{null, !5076}
!5076 = !DIDerivedType(tag: DW_TAG_typedef, name: "cgraph_node_set", file: !250, line: 283, baseType: !2016)
!5077 = !DILocalVariable(name: "set", arg: 1, scope: !5073, file: !3, line: 2093, type: !5076)
!5078 = !DILocation(line: 2093, column: 48, scope: !5073)
!5079 = !DILocalVariable(name: "node", scope: !5073, file: !3, line: 2095, type: !744)
!5080 = !DILocation(line: 2095, column: 23, scope: !5073)
!5081 = !DILocalVariable(name: "ob", scope: !5073, file: !3, line: 2096, type: !5082)
!5082 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5083, size: 64)
!5083 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "output_block", file: !613, line: 625, size: 704, elements: !5084)
!5084 = !{!5085, !5086, !5099, !5113, !5114, !5115, !5116, !5117, !5118, !5119, !5120, !5121}
!5085 = !DIDerivedType(tag: DW_TAG_member, name: "section_type", scope: !5083, file: !613, line: 627, baseType: !612, size: 32)
!5086 = !DIDerivedType(tag: DW_TAG_member, name: "decl_state", scope: !5083, file: !613, line: 628, baseType: !5087, size: 64, offset: 64)
!5087 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5088, size: 64)
!5088 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "lto_out_decl_state", file: !613, line: 517, size: 1472, elements: !5089)
!5089 = !{!5090, !5097, !5098}
!5090 = !DIDerivedType(tag: DW_TAG_member, name: "streams", scope: !5088, file: !613, line: 521, baseType: !5091, size: 1344)
!5091 = !DICompositeType(tag: DW_TAG_array_type, baseType: !5092, size: 1344, elements: !2086)
!5092 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "lto_tree_ref_encoder", file: !613, line: 493, size: 192, elements: !5093)
!5093 = !{!5094, !5095, !5096}
!5094 = !DIDerivedType(tag: DW_TAG_member, name: "tree_hash_table", scope: !5092, file: !613, line: 495, baseType: !1330, size: 64)
!5095 = !DIDerivedType(tag: DW_TAG_member, name: "next_index", scope: !5092, file: !613, line: 496, baseType: !7, size: 32, offset: 64)
!5096 = !DIDerivedType(tag: DW_TAG_member, name: "trees", scope: !5092, file: !613, line: 497, baseType: !2277, size: 64, offset: 128)
!5097 = !DIDerivedType(tag: DW_TAG_member, name: "cgraph_node_encoder", scope: !5088, file: !613, line: 524, baseType: !2091, size: 64, offset: 1344)
!5098 = !DIDerivedType(tag: DW_TAG_member, name: "fn_decl", scope: !5088, file: !613, line: 528, baseType: !748, size: 64, offset: 1408)
!5099 = !DIDerivedType(tag: DW_TAG_member, name: "main_stream", scope: !5083, file: !613, line: 631, baseType: !5100, size: 64, offset: 128)
!5100 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5101, size: 64)
!5101 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "lto_output_stream", file: !613, line: 577, size: 320, elements: !5102)
!5102 = !{!5103, !5108, !5109, !5110, !5111, !5112}
!5103 = !DIDerivedType(tag: DW_TAG_member, name: "first_block", scope: !5101, file: !613, line: 580, baseType: !5104, size: 64)
!5104 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5105, size: 64)
!5105 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "lto_char_ptr_base", file: !613, line: 568, size: 64, elements: !5106)
!5106 = !{!5107}
!5107 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !5105, file: !613, line: 570, baseType: !1452, size: 64)
!5108 = !DIDerivedType(tag: DW_TAG_member, name: "current_block", scope: !5101, file: !613, line: 583, baseType: !5104, size: 64, offset: 64)
!5109 = !DIDerivedType(tag: DW_TAG_member, name: "current_pointer", scope: !5101, file: !613, line: 586, baseType: !1452, size: 64, offset: 128)
!5110 = !DIDerivedType(tag: DW_TAG_member, name: "left_in_block", scope: !5101, file: !613, line: 589, baseType: !7, size: 32, offset: 192)
!5111 = !DIDerivedType(tag: DW_TAG_member, name: "block_size", scope: !5101, file: !613, line: 592, baseType: !7, size: 32, offset: 224)
!5112 = !DIDerivedType(tag: DW_TAG_member, name: "total_size", scope: !5101, file: !613, line: 595, baseType: !7, size: 32, offset: 256)
!5113 = !DIDerivedType(tag: DW_TAG_member, name: "string_stream", scope: !5083, file: !613, line: 634, baseType: !5100, size: 64, offset: 192)
!5114 = !DIDerivedType(tag: DW_TAG_member, name: "cfg_stream", scope: !5083, file: !613, line: 637, baseType: !5100, size: 64, offset: 256)
!5115 = !DIDerivedType(tag: DW_TAG_member, name: "string_hash_table", scope: !5083, file: !613, line: 641, baseType: !1330, size: 64, offset: 320)
!5116 = !DIDerivedType(tag: DW_TAG_member, name: "cgraph_node", scope: !5083, file: !613, line: 645, baseType: !744, size: 64, offset: 384)
!5117 = !DIDerivedType(tag: DW_TAG_member, name: "current_file", scope: !5083, file: !613, line: 650, baseType: !1176, size: 64, offset: 448)
!5118 = !DIDerivedType(tag: DW_TAG_member, name: "current_line", scope: !5083, file: !613, line: 651, baseType: !829, size: 32, offset: 512)
!5119 = !DIDerivedType(tag: DW_TAG_member, name: "current_col", scope: !5083, file: !613, line: 652, baseType: !829, size: 32, offset: 544)
!5120 = !DIDerivedType(tag: DW_TAG_member, name: "global", scope: !5083, file: !613, line: 655, baseType: !852, size: 8, offset: 576)
!5121 = !DIDerivedType(tag: DW_TAG_member, name: "writer_cache", scope: !5083, file: !613, line: 658, baseType: !5122, size: 64, offset: 640)
!5122 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5123, size: 64)
!5123 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "lto_streamer_cache_d", file: !613, line: 346, size: 256, elements: !5124)
!5124 = !{!5125, !5126, !5127, !5128}
!5125 = !DIDerivedType(tag: DW_TAG_member, name: "node_map", scope: !5123, file: !613, line: 349, baseType: !1330, size: 64)
!5126 = !DIDerivedType(tag: DW_TAG_member, name: "next_slot", scope: !5123, file: !613, line: 352, baseType: !7, size: 32, offset: 64)
!5127 = !DIDerivedType(tag: DW_TAG_member, name: "nodes", scope: !5123, file: !613, line: 355, baseType: !1393, size: 64, offset: 128)
!5128 = !DIDerivedType(tag: DW_TAG_member, name: "offsets", scope: !5123, file: !613, line: 358, baseType: !5129, size: 64, offset: 192)
!5129 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5130, size: 64)
!5130 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_unsigned_heap", file: !5131, line: 35, baseType: !5132)
!5131 = !DIFile(filename: "./vecprim.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!5132 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_unsigned_heap", file: !5131, line: 35, size: 96, elements: !5133)
!5133 = !{!5134}
!5134 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !5132, file: !5131, line: 35, baseType: !5135, size: 96)
!5135 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_unsigned_base", file: !5131, line: 34, baseType: !5136)
!5136 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_unsigned_base", file: !5131, line: 34, size: 96, elements: !5137)
!5137 = !{!5138, !5139, !5140}
!5138 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !5136, file: !5131, line: 34, baseType: !7, size: 32)
!5139 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !5136, file: !5131, line: 34, baseType: !7, size: 32, offset: 32)
!5140 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !5136, file: !5131, line: 34, baseType: !5141, size: 32, offset: 64)
!5141 = !DICompositeType(tag: DW_TAG_array_type, baseType: !7, size: 32, elements: !833)
!5142 = !DILocation(line: 2096, column: 24, scope: !5073)
!5143 = !DILocation(line: 2096, column: 29, scope: !5073)
!5144 = !DILocalVariable(name: "count", scope: !5073, file: !3, line: 2097, type: !7)
!5145 = !DILocation(line: 2097, column: 16, scope: !5073)
!5146 = !DILocalVariable(name: "csi", scope: !5073, file: !3, line: 2098, type: !5147)
!5147 = !DIDerivedType(tag: DW_TAG_typedef, name: "cgraph_node_set_iterator", file: !250, line: 305, baseType: !5148)
!5148 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !250, line: 301, size: 128, elements: !5149)
!5149 = !{!5150, !5151}
!5150 = !DIDerivedType(tag: DW_TAG_member, name: "set", scope: !5148, file: !250, line: 303, baseType: !5076, size: 64)
!5151 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !5148, file: !250, line: 304, baseType: !7, size: 32, offset: 64)
!5152 = !DILocation(line: 2098, column: 28, scope: !5073)
!5153 = !DILocation(line: 2100, column: 3, scope: !5073)
!5154 = !DILocation(line: 2100, column: 7, scope: !5073)
!5155 = !DILocation(line: 2100, column: 19, scope: !5073)
!5156 = !DILocation(line: 2102, column: 25, scope: !5157)
!5157 = distinct !DILexicalBlock(scope: !5073, file: !3, line: 2102, column: 3)
!5158 = !DILocation(line: 2102, column: 14, scope: !5157)
!5159 = !DILocation(line: 2102, column: 8, scope: !5157)
!5160 = !DILocation(line: 2102, column: 32, scope: !5161)
!5161 = distinct !DILexicalBlock(scope: !5157, file: !3, line: 2102, column: 3)
!5162 = !DILocation(line: 2102, column: 31, scope: !5161)
!5163 = !DILocation(line: 2102, column: 3, scope: !5157)
!5164 = !DILocation(line: 2104, column: 14, scope: !5165)
!5165 = distinct !DILexicalBlock(scope: !5161, file: !3, line: 2103, column: 5)
!5166 = !DILocation(line: 2104, column: 12, scope: !5165)
!5167 = !DILocation(line: 2105, column: 11, scope: !5168)
!5168 = distinct !DILexicalBlock(scope: !5165, file: !3, line: 2105, column: 11)
!5169 = !DILocation(line: 2105, column: 17, scope: !5168)
!5170 = !DILocation(line: 2105, column: 26, scope: !5168)
!5171 = !DILocation(line: 2105, column: 29, scope: !5168)
!5172 = !DILocation(line: 2105, column: 49, scope: !5168)
!5173 = !DILocation(line: 2105, column: 11, scope: !5165)
!5174 = !DILocation(line: 2106, column: 7, scope: !5168)
!5175 = !DILocation(line: 2106, column: 2, scope: !5168)
!5176 = !DILocation(line: 2107, column: 5, scope: !5165)
!5177 = !DILocation(line: 2102, column: 49, scope: !5161)
!5178 = !DILocation(line: 2102, column: 3, scope: !5161)
!5179 = distinct !{!5179, !5163, !5180}
!5180 = !DILocation(line: 2107, column: 5, scope: !5157)
!5181 = !DILocation(line: 2109, column: 30, scope: !5073)
!5182 = !DILocation(line: 2109, column: 34, scope: !5073)
!5183 = !DILocation(line: 2109, column: 47, scope: !5073)
!5184 = !DILocation(line: 2109, column: 3, scope: !5073)
!5185 = !DILocation(line: 2112, column: 25, scope: !5186)
!5186 = distinct !DILexicalBlock(scope: !5073, file: !3, line: 2112, column: 3)
!5187 = !DILocation(line: 2112, column: 14, scope: !5186)
!5188 = !DILocation(line: 2112, column: 8, scope: !5186)
!5189 = !DILocation(line: 2112, column: 32, scope: !5190)
!5190 = distinct !DILexicalBlock(scope: !5186, file: !3, line: 2112, column: 3)
!5191 = !DILocation(line: 2112, column: 31, scope: !5190)
!5192 = !DILocation(line: 2112, column: 3, scope: !5186)
!5193 = !DILocation(line: 2114, column: 14, scope: !5194)
!5194 = distinct !DILexicalBlock(scope: !5190, file: !3, line: 2113, column: 5)
!5195 = !DILocation(line: 2114, column: 12, scope: !5194)
!5196 = !DILocation(line: 2115, column: 11, scope: !5197)
!5197 = distinct !DILexicalBlock(scope: !5194, file: !3, line: 2115, column: 11)
!5198 = !DILocation(line: 2115, column: 17, scope: !5197)
!5199 = !DILocation(line: 2115, column: 26, scope: !5197)
!5200 = !DILocation(line: 2115, column: 29, scope: !5197)
!5201 = !DILocation(line: 2115, column: 49, scope: !5197)
!5202 = !DILocation(line: 2115, column: 11, scope: !5194)
!5203 = !DILocation(line: 2116, column: 30, scope: !5197)
!5204 = !DILocation(line: 2116, column: 34, scope: !5197)
!5205 = !DILocation(line: 2116, column: 9, scope: !5197)
!5206 = !DILocation(line: 2117, column: 5, scope: !5194)
!5207 = !DILocation(line: 2112, column: 49, scope: !5190)
!5208 = !DILocation(line: 2112, column: 3, scope: !5190)
!5209 = distinct !{!5209, !5192, !5210}
!5210 = !DILocation(line: 2117, column: 5, scope: !5186)
!5211 = !DILocation(line: 2118, column: 24, scope: !5073)
!5212 = !DILocation(line: 2118, column: 28, scope: !5073)
!5213 = !DILocation(line: 2118, column: 3, scope: !5073)
!5214 = !DILocation(line: 2119, column: 16, scope: !5073)
!5215 = !DILocation(line: 2119, column: 3, scope: !5073)
!5216 = !DILocation(line: 2120, column: 25, scope: !5073)
!5217 = !DILocation(line: 2120, column: 3, scope: !5073)
!5218 = !DILocation(line: 2121, column: 1, scope: !5073)
!5219 = distinct !DISubprogram(name: "csi_start", scope: !250, file: !250, line: 668, type: !5220, scopeLine: 669, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2371)
!5220 = !DISubroutineType(types: !5221)
!5221 = !{!5147, !5076}
!5222 = !DILocalVariable(name: "set", arg: 1, scope: !5219, file: !250, line: 668, type: !5076)
!5223 = !DILocation(line: 668, column: 28, scope: !5219)
!5224 = !DILocalVariable(name: "csi", scope: !5219, file: !250, line: 670, type: !5147)
!5225 = !DILocation(line: 670, column: 28, scope: !5219)
!5226 = !DILocation(line: 672, column: 13, scope: !5219)
!5227 = !DILocation(line: 672, column: 7, scope: !5219)
!5228 = !DILocation(line: 672, column: 11, scope: !5219)
!5229 = !DILocation(line: 673, column: 7, scope: !5219)
!5230 = !DILocation(line: 673, column: 13, scope: !5219)
!5231 = !DILocation(line: 674, column: 3, scope: !5219)
!5232 = distinct !DISubprogram(name: "csi_end_p", scope: !250, file: !250, line: 647, type: !5233, scopeLine: 648, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2371)
!5233 = !DISubroutineType(types: !5234)
!5234 = !{!852, !5147}
!5235 = !DILocalVariable(name: "csi", arg: 1, scope: !5232, file: !250, line: 647, type: !5147)
!5236 = !DILocation(line: 647, column: 37, scope: !5232)
!5237 = !DILocation(line: 649, column: 14, scope: !5232)
!5238 = !DILocation(line: 649, column: 23, scope: !5232)
!5239 = !DILocation(line: 649, column: 20, scope: !5232)
!5240 = !DILocation(line: 649, column: 10, scope: !5232)
!5241 = !DILocation(line: 649, column: 3, scope: !5232)
!5242 = distinct !DISubprogram(name: "csi_node", scope: !250, file: !250, line: 661, type: !5243, scopeLine: 662, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2371)
!5243 = !DISubroutineType(types: !5244)
!5244 = !{!744, !5147}
!5245 = !DILocalVariable(name: "csi", arg: 1, scope: !5242, file: !250, line: 661, type: !5147)
!5246 = !DILocation(line: 661, column: 36, scope: !5242)
!5247 = !DILocation(line: 663, column: 10, scope: !5242)
!5248 = !DILocation(line: 663, column: 3, scope: !5242)
!5249 = distinct !DISubprogram(name: "csi_next", scope: !250, file: !250, line: 654, type: !5250, scopeLine: 655, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2371)
!5250 = !DISubroutineType(types: !5251)
!5251 = !{null, !5252}
!5252 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5147, size: 64)
!5253 = !DILocalVariable(name: "csi", arg: 1, scope: !5249, file: !250, line: 654, type: !5252)
!5254 = !DILocation(line: 654, column: 37, scope: !5249)
!5255 = !DILocation(line: 656, column: 3, scope: !5249)
!5256 = !DILocation(line: 656, column: 8, scope: !5249)
!5257 = !DILocation(line: 656, column: 13, scope: !5249)
!5258 = !DILocation(line: 657, column: 1, scope: !5249)
!5259 = distinct !DISubprogram(name: "ipa_write_node_info", scope: !3, file: !3, line: 2001, type: !5260, scopeLine: 2002, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2371)
!5260 = !DISubroutineType(types: !5261)
!5261 = !{null, !5082, !744}
!5262 = !DILocalVariable(name: "ob", arg: 1, scope: !5259, file: !3, line: 2001, type: !5082)
!5263 = !DILocation(line: 2001, column: 43, scope: !5259)
!5264 = !DILocalVariable(name: "node", arg: 2, scope: !5259, file: !3, line: 2001, type: !744)
!5265 = !DILocation(line: 2001, column: 67, scope: !5259)
!5266 = !DILocalVariable(name: "node_ref", scope: !5259, file: !3, line: 2003, type: !829)
!5267 = !DILocation(line: 2003, column: 7, scope: !5259)
!5268 = !DILocalVariable(name: "encoder", scope: !5259, file: !3, line: 2004, type: !2091)
!5269 = !DILocation(line: 2004, column: 24, scope: !5259)
!5270 = !DILocalVariable(name: "info", scope: !5259, file: !3, line: 2005, type: !2222)
!5271 = !DILocation(line: 2005, column: 27, scope: !5259)
!5272 = !DILocation(line: 2005, column: 34, scope: !5259)
!5273 = !DILocalVariable(name: "j", scope: !5259, file: !3, line: 2006, type: !829)
!5274 = !DILocation(line: 2006, column: 7, scope: !5259)
!5275 = !DILocalVariable(name: "e", scope: !5259, file: !3, line: 2007, type: !1930)
!5276 = !DILocation(line: 2007, column: 23, scope: !5259)
!5277 = !DILocalVariable(name: "bp", scope: !5259, file: !3, line: 2008, type: !5278)
!5278 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5279, size: 64)
!5279 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitpack_d", file: !613, line: 156, size: 192, elements: !5280)
!5280 = !{!5281, !5282, !5283}
!5281 = !DIDerivedType(tag: DW_TAG_member, name: "num_bits", scope: !5279, file: !613, line: 159, baseType: !1194, size: 64)
!5282 = !DIDerivedType(tag: DW_TAG_member, name: "first_unused_bit", scope: !5279, file: !613, line: 165, baseType: !1194, size: 64, offset: 64)
!5283 = !DIDerivedType(tag: DW_TAG_member, name: "values", scope: !5279, file: !613, line: 168, baseType: !5284, size: 64, offset: 128)
!5284 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5285, size: 64)
!5285 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_bitpack_word_t_heap", file: !613, line: 154, baseType: !5286)
!5286 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_bitpack_word_t_heap", file: !613, line: 154, size: 128, elements: !5287)
!5287 = !{!5288}
!5288 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !5286, file: !613, line: 154, baseType: !5289, size: 128)
!5289 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_bitpack_word_t_base", file: !613, line: 153, baseType: !5290)
!5290 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_bitpack_word_t_base", file: !613, line: 153, size: 128, elements: !5291)
!5291 = !{!5292, !5293, !5294}
!5292 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !5290, file: !613, line: 153, baseType: !7, size: 32)
!5293 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !5290, file: !613, line: 153, baseType: !7, size: 32, offset: 32)
!5294 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !5290, file: !613, line: 153, baseType: !5295, size: 64, offset: 64)
!5295 = !DICompositeType(tag: DW_TAG_array_type, baseType: !5296, size: 64, elements: !833)
!5296 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitpack_word_t", file: !613, line: 152, baseType: !802)
!5297 = !DILocation(line: 2008, column: 21, scope: !5259)
!5298 = !DILocalVariable(name: "note_count", scope: !5259, file: !3, line: 2009, type: !829)
!5299 = !DILocation(line: 2009, column: 7, scope: !5259)
!5300 = !DILocalVariable(name: "note", scope: !5259, file: !3, line: 2010, type: !2228)
!5301 = !DILocation(line: 2010, column: 31, scope: !5259)
!5302 = !DILocation(line: 2012, column: 13, scope: !5259)
!5303 = !DILocation(line: 2012, column: 17, scope: !5259)
!5304 = !DILocation(line: 2012, column: 29, scope: !5259)
!5305 = !DILocation(line: 2012, column: 11, scope: !5259)
!5306 = !DILocation(line: 2013, column: 41, scope: !5259)
!5307 = !DILocation(line: 2013, column: 50, scope: !5259)
!5308 = !DILocation(line: 2013, column: 14, scope: !5259)
!5309 = !DILocation(line: 2013, column: 12, scope: !5259)
!5310 = !DILocation(line: 2014, column: 30, scope: !5259)
!5311 = !DILocation(line: 2014, column: 34, scope: !5259)
!5312 = !DILocation(line: 2014, column: 47, scope: !5259)
!5313 = !DILocation(line: 2014, column: 3, scope: !5259)
!5314 = !DILocation(line: 2016, column: 8, scope: !5259)
!5315 = !DILocation(line: 2016, column: 6, scope: !5259)
!5316 = !DILocation(line: 2017, column: 18, scope: !5259)
!5317 = !DILocation(line: 2017, column: 22, scope: !5259)
!5318 = !DILocation(line: 2017, column: 28, scope: !5259)
!5319 = !DILocation(line: 2017, column: 3, scope: !5259)
!5320 = !DILocation(line: 2018, column: 18, scope: !5259)
!5321 = !DILocation(line: 2018, column: 22, scope: !5259)
!5322 = !DILocation(line: 2018, column: 28, scope: !5259)
!5323 = !DILocation(line: 2018, column: 3, scope: !5259)
!5324 = !DILocation(line: 2019, column: 3, scope: !5259)
!5325 = !DILocation(line: 2021, column: 3, scope: !5259)
!5326 = !DILocation(line: 2022, column: 3, scope: !5259)
!5327 = !DILocation(line: 2023, column: 10, scope: !5328)
!5328 = distinct !DILexicalBlock(scope: !5259, file: !3, line: 2023, column: 3)
!5329 = !DILocation(line: 2023, column: 8, scope: !5328)
!5330 = !DILocation(line: 2023, column: 15, scope: !5331)
!5331 = distinct !DILexicalBlock(scope: !5328, file: !3, line: 2023, column: 3)
!5332 = !DILocation(line: 2023, column: 40, scope: !5331)
!5333 = !DILocation(line: 2023, column: 19, scope: !5331)
!5334 = !DILocation(line: 2023, column: 17, scope: !5331)
!5335 = !DILocation(line: 2023, column: 3, scope: !5328)
!5336 = !DILocation(line: 2024, column: 20, scope: !5331)
!5337 = !DILocation(line: 2024, column: 24, scope: !5331)
!5338 = !DILocation(line: 2024, column: 30, scope: !5331)
!5339 = !DILocation(line: 2024, column: 37, scope: !5331)
!5340 = !DILocation(line: 2024, column: 40, scope: !5331)
!5341 = !DILocation(line: 2024, column: 5, scope: !5331)
!5342 = !DILocation(line: 2023, column: 48, scope: !5331)
!5343 = !DILocation(line: 2023, column: 3, scope: !5331)
!5344 = distinct !{!5344, !5335, !5345}
!5345 = !DILocation(line: 2024, column: 51, scope: !5328)
!5346 = !DILocation(line: 2025, column: 23, scope: !5259)
!5347 = !DILocation(line: 2025, column: 27, scope: !5259)
!5348 = !DILocation(line: 2025, column: 40, scope: !5259)
!5349 = !DILocation(line: 2025, column: 3, scope: !5259)
!5350 = !DILocation(line: 2026, column: 19, scope: !5259)
!5351 = !DILocation(line: 2026, column: 3, scope: !5259)
!5352 = !DILocation(line: 2027, column: 12, scope: !5353)
!5353 = distinct !DILexicalBlock(scope: !5259, file: !3, line: 2027, column: 3)
!5354 = !DILocation(line: 2027, column: 18, scope: !5353)
!5355 = !DILocation(line: 2027, column: 10, scope: !5353)
!5356 = !DILocation(line: 2027, column: 8, scope: !5353)
!5357 = !DILocation(line: 2027, column: 27, scope: !5358)
!5358 = distinct !DILexicalBlock(scope: !5353, file: !3, line: 2027, column: 3)
!5359 = !DILocation(line: 2027, column: 3, scope: !5353)
!5360 = !DILocalVariable(name: "args", scope: !5361, file: !3, line: 2029, type: !2772)
!5361 = distinct !DILexicalBlock(scope: !5358, file: !3, line: 2028, column: 5)
!5362 = !DILocation(line: 2029, column: 29, scope: !5361)
!5363 = !DILocation(line: 2029, column: 36, scope: !5361)
!5364 = !DILocation(line: 2031, column: 34, scope: !5361)
!5365 = !DILocation(line: 2031, column: 38, scope: !5361)
!5366 = !DILocation(line: 2032, column: 33, scope: !5361)
!5367 = !DILocation(line: 2032, column: 6, scope: !5361)
!5368 = !DILocation(line: 2031, column: 7, scope: !5361)
!5369 = !DILocation(line: 2033, column: 14, scope: !5370)
!5370 = distinct !DILexicalBlock(scope: !5361, file: !3, line: 2033, column: 7)
!5371 = !DILocation(line: 2033, column: 12, scope: !5370)
!5372 = !DILocation(line: 2033, column: 19, scope: !5373)
!5373 = distinct !DILexicalBlock(scope: !5370, file: !3, line: 2033, column: 7)
!5374 = !DILocation(line: 2033, column: 50, scope: !5373)
!5375 = !DILocation(line: 2033, column: 23, scope: !5373)
!5376 = !DILocation(line: 2033, column: 21, scope: !5373)
!5377 = !DILocation(line: 2033, column: 7, scope: !5370)
!5378 = !DILocation(line: 2034, column: 27, scope: !5373)
!5379 = !DILocation(line: 2034, column: 54, scope: !5373)
!5380 = !DILocation(line: 2034, column: 60, scope: !5373)
!5381 = !DILocation(line: 2034, column: 31, scope: !5373)
!5382 = !DILocation(line: 2034, column: 2, scope: !5373)
!5383 = !DILocation(line: 2033, column: 58, scope: !5373)
!5384 = !DILocation(line: 2033, column: 7, scope: !5373)
!5385 = distinct !{!5385, !5377, !5386}
!5386 = !DILocation(line: 2034, column: 62, scope: !5370)
!5387 = !DILocation(line: 2035, column: 5, scope: !5361)
!5388 = !DILocation(line: 2027, column: 34, scope: !5358)
!5389 = !DILocation(line: 2027, column: 37, scope: !5358)
!5390 = !DILocation(line: 2027, column: 32, scope: !5358)
!5391 = !DILocation(line: 2027, column: 3, scope: !5358)
!5392 = distinct !{!5392, !5359, !5393}
!5393 = !DILocation(line: 2035, column: 5, scope: !5353)
!5394 = !DILocation(line: 2037, column: 15, scope: !5395)
!5395 = distinct !DILexicalBlock(scope: !5259, file: !3, line: 2037, column: 3)
!5396 = !DILocation(line: 2037, column: 21, scope: !5395)
!5397 = !DILocation(line: 2037, column: 13, scope: !5395)
!5398 = !DILocation(line: 2037, column: 8, scope: !5395)
!5399 = !DILocation(line: 2037, column: 34, scope: !5400)
!5400 = distinct !DILexicalBlock(scope: !5395, file: !3, line: 2037, column: 3)
!5401 = !DILocation(line: 2037, column: 3, scope: !5395)
!5402 = !DILocation(line: 2038, column: 15, scope: !5400)
!5403 = !DILocation(line: 2038, column: 5, scope: !5400)
!5404 = !DILocation(line: 2037, column: 47, scope: !5400)
!5405 = !DILocation(line: 2037, column: 53, scope: !5400)
!5406 = !DILocation(line: 2037, column: 45, scope: !5400)
!5407 = !DILocation(line: 2037, column: 3, scope: !5400)
!5408 = distinct !{!5408, !5401, !5409}
!5409 = !DILocation(line: 2038, column: 15, scope: !5395)
!5410 = !DILocation(line: 2039, column: 30, scope: !5259)
!5411 = !DILocation(line: 2039, column: 34, scope: !5259)
!5412 = !DILocation(line: 2039, column: 47, scope: !5259)
!5413 = !DILocation(line: 2039, column: 3, scope: !5259)
!5414 = !DILocation(line: 2040, column: 15, scope: !5415)
!5415 = distinct !DILexicalBlock(scope: !5259, file: !3, line: 2040, column: 3)
!5416 = !DILocation(line: 2040, column: 21, scope: !5415)
!5417 = !DILocation(line: 2040, column: 13, scope: !5415)
!5418 = !DILocation(line: 2040, column: 8, scope: !5415)
!5419 = !DILocation(line: 2040, column: 34, scope: !5420)
!5420 = distinct !DILexicalBlock(scope: !5415, file: !3, line: 2040, column: 3)
!5421 = !DILocation(line: 2040, column: 3, scope: !5415)
!5422 = !DILocation(line: 2041, column: 32, scope: !5420)
!5423 = !DILocation(line: 2041, column: 36, scope: !5420)
!5424 = !DILocation(line: 2041, column: 5, scope: !5420)
!5425 = !DILocation(line: 2040, column: 47, scope: !5420)
!5426 = !DILocation(line: 2040, column: 53, scope: !5420)
!5427 = !DILocation(line: 2040, column: 45, scope: !5420)
!5428 = !DILocation(line: 2040, column: 3, scope: !5420)
!5429 = distinct !{!5429, !5421, !5430}
!5430 = !DILocation(line: 2041, column: 40, scope: !5415)
!5431 = !DILocation(line: 2042, column: 1, scope: !5259)
!5432 = distinct !DISubprogram(name: "ipa_prop_read_jump_functions", scope: !3, file: !3, line: 2166, type: !2010, scopeLine: 2167, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2371)
!5433 = !DILocalVariable(name: "file_data_vec", scope: !5432, file: !3, line: 2168, type: !5434)
!5434 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2073, size: 64)
!5435 = !DILocation(line: 2168, column: 31, scope: !5432)
!5436 = !DILocation(line: 2168, column: 47, scope: !5432)
!5437 = !DILocalVariable(name: "file_data", scope: !5432, file: !3, line: 2169, type: !2073)
!5438 = !DILocation(line: 2169, column: 30, scope: !5432)
!5439 = !DILocalVariable(name: "j", scope: !5432, file: !3, line: 2170, type: !7)
!5440 = !DILocation(line: 2170, column: 16, scope: !5432)
!5441 = !DILocation(line: 2172, column: 3, scope: !5432)
!5442 = !DILocation(line: 2173, column: 3, scope: !5432)
!5443 = !DILocation(line: 2174, column: 3, scope: !5432)
!5444 = !DILocation(line: 2176, column: 3, scope: !5432)
!5445 = !DILocation(line: 2176, column: 23, scope: !5432)
!5446 = !DILocation(line: 2176, column: 38, scope: !5432)
!5447 = !DILocation(line: 2176, column: 21, scope: !5432)
!5448 = !DILocalVariable(name: "len", scope: !5449, file: !3, line: 2178, type: !1194)
!5449 = distinct !DILexicalBlock(scope: !5432, file: !3, line: 2177, column: 5)
!5450 = !DILocation(line: 2178, column: 14, scope: !5449)
!5451 = !DILocalVariable(name: "data", scope: !5449, file: !3, line: 2179, type: !1176)
!5452 = !DILocation(line: 2179, column: 19, scope: !5449)
!5453 = !DILocation(line: 2179, column: 48, scope: !5449)
!5454 = !DILocation(line: 2179, column: 26, scope: !5449)
!5455 = !DILocation(line: 2181, column: 11, scope: !5456)
!5456 = distinct !DILexicalBlock(scope: !5449, file: !3, line: 2181, column: 11)
!5457 = !DILocation(line: 2181, column: 11, scope: !5449)
!5458 = !DILocation(line: 2182, column: 32, scope: !5456)
!5459 = !DILocation(line: 2182, column: 43, scope: !5456)
!5460 = !DILocation(line: 2182, column: 49, scope: !5456)
!5461 = !DILocation(line: 2182, column: 9, scope: !5456)
!5462 = distinct !{!5462, !5444, !5463}
!5463 = !DILocation(line: 2183, column: 5, scope: !5432)
!5464 = !DILocation(line: 2184, column: 1, scope: !5432)
!5465 = distinct !DISubprogram(name: "ipa_check_create_node_params", scope: !456, file: !456, line: 349, type: !2010, scopeLine: 350, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2371)
!5466 = !DILocation(line: 351, column: 8, scope: !5467)
!5467 = distinct !DILexicalBlock(scope: !5465, file: !456, line: 351, column: 7)
!5468 = !DILocation(line: 351, column: 7, scope: !5465)
!5469 = !DILocation(line: 352, column: 30, scope: !5467)
!5470 = !DILocation(line: 352, column: 28, scope: !5467)
!5471 = !DILocation(line: 352, column: 5, scope: !5467)
!5472 = !DILocation(line: 355, column: 7, scope: !5473)
!5473 = distinct !DILexicalBlock(scope: !5465, file: !456, line: 355, column: 7)
!5474 = !DILocation(line: 356, column: 21, scope: !5473)
!5475 = !DILocation(line: 356, column: 7, scope: !5473)
!5476 = !DILocation(line: 355, column: 7, scope: !5465)
!5477 = !DILocation(line: 357, column: 5, scope: !5473)
!5478 = !DILocation(line: 359, column: 1, scope: !5465)
!5479 = distinct !DISubprogram(name: "ipa_check_create_edge_args", scope: !456, file: !456, line: 365, type: !2010, scopeLine: 366, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2371)
!5480 = !DILocation(line: 367, column: 8, scope: !5481)
!5481 = distinct !DILexicalBlock(scope: !5479, file: !456, line: 367, column: 7)
!5482 = !DILocation(line: 367, column: 7, scope: !5479)
!5483 = !DILocation(line: 368, column: 28, scope: !5481)
!5484 = !DILocation(line: 368, column: 26, scope: !5481)
!5485 = !DILocation(line: 368, column: 5, scope: !5481)
!5486 = !DILocation(line: 371, column: 7, scope: !5487)
!5487 = distinct !DILexicalBlock(scope: !5479, file: !456, line: 371, column: 7)
!5488 = !DILocation(line: 372, column: 22, scope: !5487)
!5489 = !DILocation(line: 372, column: 7, scope: !5487)
!5490 = !DILocation(line: 371, column: 7, scope: !5479)
!5491 = !DILocation(line: 373, column: 5, scope: !5487)
!5492 = !DILocation(line: 375, column: 1, scope: !5479)
!5493 = distinct !DISubprogram(name: "ipa_prop_read_section", scope: !3, file: !3, line: 2126, type: !5494, scopeLine: 2128, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2371)
!5494 = !DISubroutineType(types: !5495)
!5495 = !{null, !2073, !1176, !1194}
!5496 = !DILocalVariable(name: "file_data", arg: 1, scope: !5493, file: !3, line: 2126, type: !2073)
!5497 = !DILocation(line: 2126, column: 51, scope: !5493)
!5498 = !DILocalVariable(name: "data", arg: 2, scope: !5493, file: !3, line: 2126, type: !1176)
!5499 = !DILocation(line: 2126, column: 74, scope: !5493)
!5500 = !DILocalVariable(name: "len", arg: 3, scope: !5493, file: !3, line: 2127, type: !1194)
!5501 = !DILocation(line: 2127, column: 17, scope: !5493)
!5502 = !DILocalVariable(name: "header", scope: !5493, file: !3, line: 2129, type: !2320)
!5503 = !DILocation(line: 2129, column: 37, scope: !5493)
!5504 = !DILocation(line: 2130, column: 42, scope: !5493)
!5505 = !DILocation(line: 2130, column: 5, scope: !5493)
!5506 = !DILocalVariable(name: "cfg_offset", scope: !5493, file: !3, line: 2131, type: !5507)
!5507 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2336)
!5508 = !DILocation(line: 2131, column: 17, scope: !5493)
!5509 = !DILocalVariable(name: "main_offset", scope: !5493, file: !3, line: 2132, type: !5507)
!5510 = !DILocation(line: 2132, column: 17, scope: !5493)
!5511 = !DILocation(line: 2132, column: 44, scope: !5493)
!5512 = !DILocation(line: 2132, column: 52, scope: !5493)
!5513 = !DILocation(line: 2132, column: 42, scope: !5493)
!5514 = !DILocalVariable(name: "string_offset", scope: !5493, file: !3, line: 2133, type: !5507)
!5515 = !DILocation(line: 2133, column: 17, scope: !5493)
!5516 = !DILocation(line: 2133, column: 33, scope: !5493)
!5517 = !DILocation(line: 2133, column: 47, scope: !5493)
!5518 = !DILocation(line: 2133, column: 55, scope: !5493)
!5519 = !DILocation(line: 2133, column: 45, scope: !5493)
!5520 = !DILocalVariable(name: "data_in", scope: !5493, file: !3, line: 2134, type: !5521)
!5521 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5522, size: 64)
!5522 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "data_in", file: !613, line: 663, size: 576, elements: !5523)
!5523 = !{!5524, !5525, !5526, !5527, !5528, !5529, !5530, !5531, !5532, !5533, !5547}
!5524 = !DIDerivedType(tag: DW_TAG_member, name: "file_data", scope: !5522, file: !613, line: 666, baseType: !2073, size: 64)
!5525 = !DIDerivedType(tag: DW_TAG_member, name: "labels", scope: !5522, file: !613, line: 669, baseType: !1081, size: 64, offset: 64)
!5526 = !DIDerivedType(tag: DW_TAG_member, name: "strings", scope: !5522, file: !613, line: 672, baseType: !1176, size: 64, offset: 128)
!5527 = !DIDerivedType(tag: DW_TAG_member, name: "strings_len", scope: !5522, file: !613, line: 675, baseType: !7, size: 32, offset: 192)
!5528 = !DIDerivedType(tag: DW_TAG_member, name: "num_named_labels", scope: !5522, file: !613, line: 679, baseType: !7, size: 32, offset: 224)
!5529 = !DIDerivedType(tag: DW_TAG_member, name: "num_unnamed_labels", scope: !5522, file: !613, line: 682, baseType: !7, size: 32, offset: 256)
!5530 = !DIDerivedType(tag: DW_TAG_member, name: "current_file", scope: !5522, file: !613, line: 684, baseType: !1176, size: 64, offset: 320)
!5531 = !DIDerivedType(tag: DW_TAG_member, name: "current_line", scope: !5522, file: !613, line: 685, baseType: !829, size: 32, offset: 384)
!5532 = !DIDerivedType(tag: DW_TAG_member, name: "current_col", scope: !5522, file: !613, line: 686, baseType: !829, size: 32, offset: 416)
!5533 = !DIDerivedType(tag: DW_TAG_member, name: "globals_resolution", scope: !5522, file: !613, line: 689, baseType: !5534, size: 64, offset: 448)
!5534 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5535, size: 64)
!5535 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_ld_plugin_symbol_resolution_t_heap", file: !613, line: 286, baseType: !5536)
!5536 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_ld_plugin_symbol_resolution_t_heap", file: !613, line: 286, size: 96, elements: !5537)
!5537 = !{!5538}
!5538 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !5536, file: !613, line: 286, baseType: !5539, size: 96)
!5539 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_ld_plugin_symbol_resolution_t_base", file: !613, line: 285, baseType: !5540)
!5540 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_ld_plugin_symbol_resolution_t_base", file: !613, line: 285, size: 96, elements: !5541)
!5541 = !{!5542, !5543, !5544}
!5542 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !5540, file: !613, line: 285, baseType: !7, size: 32)
!5543 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !5540, file: !613, line: 285, baseType: !7, size: 32, offset: 32)
!5544 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !5540, file: !613, line: 285, baseType: !5545, size: 32, offset: 64)
!5545 = !DICompositeType(tag: DW_TAG_array_type, baseType: !5546, size: 32, elements: !833)
!5546 = !DIDerivedType(tag: DW_TAG_typedef, name: "ld_plugin_symbol_resolution_t", file: !613, line: 284, baseType: !727)
!5547 = !DIDerivedType(tag: DW_TAG_member, name: "reader_cache", scope: !5522, file: !613, line: 692, baseType: !5122, size: 64, offset: 512)
!5548 = !DILocation(line: 2134, column: 19, scope: !5493)
!5549 = !DILocalVariable(name: "ib_main", scope: !5493, file: !3, line: 2135, type: !5550)
!5550 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "lto_input_block", file: !613, line: 363, size: 128, elements: !5551)
!5551 = !{!5552, !5553, !5554}
!5552 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !5550, file: !613, line: 365, baseType: !1176, size: 64)
!5553 = !DIDerivedType(tag: DW_TAG_member, name: "p", scope: !5550, file: !613, line: 366, baseType: !7, size: 32, offset: 64)
!5554 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !5550, file: !613, line: 367, baseType: !7, size: 32, offset: 96)
!5555 = !DILocation(line: 2135, column: 26, scope: !5493)
!5556 = !DILocalVariable(name: "i", scope: !5493, file: !3, line: 2136, type: !7)
!5557 = !DILocation(line: 2136, column: 16, scope: !5493)
!5558 = !DILocalVariable(name: "count", scope: !5493, file: !3, line: 2137, type: !7)
!5559 = !DILocation(line: 2137, column: 16, scope: !5493)
!5560 = !DILocation(line: 2139, column: 3, scope: !5493)
!5561 = !DILocation(line: 2139, column: 3, scope: !5562)
!5562 = distinct !DILexicalBlock(scope: !5493, file: !3, line: 2139, column: 3)
!5563 = !DILocation(line: 2143, column: 25, scope: !5493)
!5564 = !DILocation(line: 2143, column: 51, scope: !5493)
!5565 = !DILocation(line: 2143, column: 58, scope: !5493)
!5566 = !DILocation(line: 2143, column: 56, scope: !5493)
!5567 = !DILocation(line: 2144, column: 4, scope: !5493)
!5568 = !DILocation(line: 2144, column: 12, scope: !5493)
!5569 = !DILocation(line: 2143, column: 5, scope: !5493)
!5570 = !DILocation(line: 2142, column: 11, scope: !5493)
!5571 = !DILocation(line: 2145, column: 11, scope: !5493)
!5572 = !DILocation(line: 2145, column: 9, scope: !5493)
!5573 = !DILocation(line: 2147, column: 10, scope: !5574)
!5574 = distinct !DILexicalBlock(scope: !5493, file: !3, line: 2147, column: 3)
!5575 = !DILocation(line: 2147, column: 8, scope: !5574)
!5576 = !DILocation(line: 2147, column: 15, scope: !5577)
!5577 = distinct !DILexicalBlock(scope: !5574, file: !3, line: 2147, column: 3)
!5578 = !DILocation(line: 2147, column: 19, scope: !5577)
!5579 = !DILocation(line: 2147, column: 17, scope: !5577)
!5580 = !DILocation(line: 2147, column: 3, scope: !5574)
!5581 = !DILocalVariable(name: "index", scope: !5582, file: !3, line: 2149, type: !7)
!5582 = distinct !DILexicalBlock(scope: !5577, file: !3, line: 2148, column: 5)
!5583 = !DILocation(line: 2149, column: 20, scope: !5582)
!5584 = !DILocalVariable(name: "node", scope: !5582, file: !3, line: 2150, type: !744)
!5585 = !DILocation(line: 2150, column: 27, scope: !5582)
!5586 = !DILocalVariable(name: "encoder", scope: !5582, file: !3, line: 2151, type: !2091)
!5587 = !DILocation(line: 2151, column: 28, scope: !5582)
!5588 = !DILocation(line: 2153, column: 15, scope: !5582)
!5589 = !DILocation(line: 2153, column: 13, scope: !5582)
!5590 = !DILocation(line: 2154, column: 17, scope: !5582)
!5591 = !DILocation(line: 2154, column: 28, scope: !5582)
!5592 = !DILocation(line: 2154, column: 15, scope: !5582)
!5593 = !DILocation(line: 2155, column: 40, scope: !5582)
!5594 = !DILocation(line: 2155, column: 49, scope: !5582)
!5595 = !DILocation(line: 2155, column: 14, scope: !5582)
!5596 = !DILocation(line: 2155, column: 12, scope: !5582)
!5597 = !DILocation(line: 2156, column: 37, scope: !5582)
!5598 = !DILocation(line: 2156, column: 43, scope: !5582)
!5599 = !DILocation(line: 2156, column: 7, scope: !5582)
!5600 = !DILocation(line: 2157, column: 5, scope: !5582)
!5601 = !DILocation(line: 2147, column: 27, scope: !5577)
!5602 = !DILocation(line: 2147, column: 3, scope: !5577)
!5603 = distinct !{!5603, !5580, !5604}
!5604 = !DILocation(line: 2157, column: 5, scope: !5574)
!5605 = !DILocation(line: 2158, column: 26, scope: !5493)
!5606 = !DILocation(line: 2158, column: 71, scope: !5493)
!5607 = !DILocation(line: 2159, column: 5, scope: !5493)
!5608 = !DILocation(line: 2158, column: 3, scope: !5493)
!5609 = !DILocation(line: 2160, column: 23, scope: !5493)
!5610 = !DILocation(line: 2160, column: 3, scope: !5493)
!5611 = !DILocation(line: 2161, column: 1, scope: !5493)
!5612 = distinct !DISubprogram(name: "ipa_update_after_lto_read", scope: !3, file: !3, line: 2191, type: !2010, scopeLine: 2192, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2371)
!5613 = !DILocalVariable(name: "node", scope: !5612, file: !3, line: 2193, type: !744)
!5614 = !DILocation(line: 2193, column: 23, scope: !5612)
!5615 = !DILocalVariable(name: "cs", scope: !5612, file: !3, line: 2194, type: !1930)
!5616 = !DILocation(line: 2194, column: 23, scope: !5612)
!5617 = !DILocation(line: 2196, column: 3, scope: !5612)
!5618 = !DILocation(line: 2197, column: 3, scope: !5612)
!5619 = !DILocation(line: 2199, column: 15, scope: !5620)
!5620 = distinct !DILexicalBlock(scope: !5612, file: !3, line: 2199, column: 3)
!5621 = !DILocation(line: 2199, column: 13, scope: !5620)
!5622 = !DILocation(line: 2199, column: 8, scope: !5620)
!5623 = !DILocation(line: 2199, column: 29, scope: !5624)
!5624 = distinct !DILexicalBlock(scope: !5620, file: !3, line: 2199, column: 3)
!5625 = !DILocation(line: 2199, column: 3, scope: !5620)
!5626 = !DILocation(line: 2200, column: 9, scope: !5627)
!5627 = distinct !DILexicalBlock(scope: !5624, file: !3, line: 2200, column: 9)
!5628 = !DILocation(line: 2200, column: 15, scope: !5627)
!5629 = !DILocation(line: 2200, column: 9, scope: !5624)
!5630 = !DILocation(line: 2201, column: 35, scope: !5627)
!5631 = !DILocation(line: 2201, column: 7, scope: !5627)
!5632 = !DILocation(line: 2199, column: 42, scope: !5624)
!5633 = !DILocation(line: 2199, column: 48, scope: !5624)
!5634 = !DILocation(line: 2199, column: 40, scope: !5624)
!5635 = !DILocation(line: 2199, column: 3, scope: !5624)
!5636 = distinct !{!5636, !5625, !5637}
!5637 = !DILocation(line: 2201, column: 39, scope: !5620)
!5638 = !DILocation(line: 2203, column: 15, scope: !5639)
!5639 = distinct !DILexicalBlock(scope: !5612, file: !3, line: 2203, column: 3)
!5640 = !DILocation(line: 2203, column: 13, scope: !5639)
!5641 = !DILocation(line: 2203, column: 8, scope: !5639)
!5642 = !DILocation(line: 2203, column: 29, scope: !5643)
!5643 = distinct !DILexicalBlock(scope: !5639, file: !3, line: 2203, column: 3)
!5644 = !DILocation(line: 2203, column: 3, scope: !5639)
!5645 = !DILocation(line: 2204, column: 9, scope: !5646)
!5646 = distinct !DILexicalBlock(scope: !5643, file: !3, line: 2204, column: 9)
!5647 = !DILocation(line: 2204, column: 15, scope: !5646)
!5648 = !DILocation(line: 2204, column: 9, scope: !5643)
!5649 = !DILocation(line: 2205, column: 17, scope: !5650)
!5650 = distinct !DILexicalBlock(scope: !5646, file: !3, line: 2205, column: 7)
!5651 = !DILocation(line: 2205, column: 23, scope: !5650)
!5652 = !DILocation(line: 2205, column: 15, scope: !5650)
!5653 = !DILocation(line: 2205, column: 12, scope: !5650)
!5654 = !DILocation(line: 2205, column: 32, scope: !5655)
!5655 = distinct !DILexicalBlock(scope: !5650, file: !3, line: 2205, column: 7)
!5656 = !DILocation(line: 2205, column: 7, scope: !5650)
!5657 = !DILocation(line: 2207, column: 35, scope: !5658)
!5658 = distinct !DILexicalBlock(scope: !5659, file: !3, line: 2207, column: 8)
!5659 = distinct !DILexicalBlock(scope: !5655, file: !3, line: 2206, column: 2)
!5660 = !DILocation(line: 2207, column: 8, scope: !5658)
!5661 = !DILocation(line: 2208, column: 32, scope: !5658)
!5662 = !DILocation(line: 2208, column: 11, scope: !5658)
!5663 = !DILocation(line: 2208, column: 8, scope: !5658)
!5664 = !DILocation(line: 2207, column: 8, scope: !5659)
!5665 = !DILocation(line: 2209, column: 40, scope: !5658)
!5666 = !DILocation(line: 2209, column: 6, scope: !5658)
!5667 = !DILocation(line: 2210, column: 2, scope: !5659)
!5668 = !DILocation(line: 2205, column: 41, scope: !5655)
!5669 = !DILocation(line: 2205, column: 45, scope: !5655)
!5670 = !DILocation(line: 2205, column: 39, scope: !5655)
!5671 = !DILocation(line: 2205, column: 7, scope: !5655)
!5672 = distinct !{!5672, !5656, !5673}
!5673 = !DILocation(line: 2210, column: 2, scope: !5650)
!5674 = !DILocation(line: 2203, column: 42, scope: !5643)
!5675 = !DILocation(line: 2203, column: 48, scope: !5643)
!5676 = !DILocation(line: 2203, column: 40, scope: !5643)
!5677 = !DILocation(line: 2203, column: 3, scope: !5643)
!5678 = distinct !{!5678, !5644, !5679}
!5679 = !DILocation(line: 2210, column: 2, scope: !5639)
!5680 = !DILocation(line: 2211, column: 1, scope: !5612)
!5681 = distinct !DISubprogram(name: "ipa_set_called_with_variable_arg", scope: !456, file: !456, line: 253, type: !3550, scopeLine: 254, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2371)
!5682 = !DILocalVariable(name: "info", arg: 1, scope: !5681, file: !456, line: 253, type: !2222)
!5683 = !DILocation(line: 253, column: 59, scope: !5681)
!5684 = !DILocation(line: 255, column: 3, scope: !5681)
!5685 = !DILocation(line: 255, column: 9, scope: !5681)
!5686 = !DILocation(line: 255, column: 35, scope: !5681)
!5687 = !DILocation(line: 256, column: 1, scope: !5681)
!5688 = distinct !DISubprogram(name: "lto_ipa_fixup_call_notes", scope: !3, file: !3, line: 2218, type: !2042, scopeLine: 2219, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2371)
!5689 = !DILocalVariable(name: "node", arg: 1, scope: !5688, file: !3, line: 2218, type: !744)
!5690 = !DILocation(line: 2218, column: 47, scope: !5688)
!5691 = !DILocalVariable(name: "stmts", arg: 2, scope: !5688, file: !3, line: 2218, type: !2044)
!5692 = !DILocation(line: 2218, column: 61, scope: !5688)
!5693 = !DILocalVariable(name: "info", scope: !5688, file: !3, line: 2220, type: !2222)
!5694 = !DILocation(line: 2220, column: 27, scope: !5688)
!5695 = !DILocalVariable(name: "note", scope: !5688, file: !3, line: 2221, type: !2228)
!5696 = !DILocation(line: 2221, column: 31, scope: !5688)
!5697 = !DILocation(line: 2223, column: 3, scope: !5688)
!5698 = !DILocation(line: 2224, column: 10, scope: !5688)
!5699 = !DILocation(line: 2224, column: 8, scope: !5688)
!5700 = !DILocation(line: 2225, column: 10, scope: !5688)
!5701 = !DILocation(line: 2225, column: 16, scope: !5688)
!5702 = !DILocation(line: 2225, column: 8, scope: !5688)
!5703 = !DILocation(line: 2228, column: 8, scope: !5704)
!5704 = distinct !DILexicalBlock(scope: !5688, file: !3, line: 2228, column: 7)
!5705 = !DILocation(line: 2228, column: 13, scope: !5704)
!5706 = !DILocation(line: 2228, column: 16, scope: !5704)
!5707 = !DILocation(line: 2228, column: 22, scope: !5704)
!5708 = !DILocation(line: 2228, column: 7, scope: !5688)
!5709 = !DILocation(line: 2229, column: 5, scope: !5704)
!5710 = !DILocation(line: 2231, column: 3, scope: !5688)
!5711 = !DILocation(line: 2233, column: 20, scope: !5712)
!5712 = distinct !DILexicalBlock(scope: !5688, file: !3, line: 2232, column: 5)
!5713 = !DILocation(line: 2233, column: 26, scope: !5712)
!5714 = !DILocation(line: 2233, column: 32, scope: !5712)
!5715 = !DILocation(line: 2233, column: 7, scope: !5712)
!5716 = !DILocation(line: 2233, column: 13, scope: !5712)
!5717 = !DILocation(line: 2233, column: 18, scope: !5712)
!5718 = !DILocation(line: 2234, column: 14, scope: !5712)
!5719 = !DILocation(line: 2234, column: 20, scope: !5712)
!5720 = !DILocation(line: 2234, column: 12, scope: !5712)
!5721 = !DILocation(line: 2235, column: 5, scope: !5712)
!5722 = !DILocation(line: 2236, column: 10, scope: !5688)
!5723 = distinct !{!5723, !5710, !5724}
!5724 = !DILocation(line: 2236, column: 14, scope: !5688)
!5725 = !DILocation(line: 2237, column: 1, scope: !5688)
!5726 = distinct !DISubprogram(name: "ipa_set_param_count", scope: !456, file: !456, line: 216, type: !5727, scopeLine: 217, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2371)
!5727 = !DISubroutineType(types: !5728)
!5728 = !{null, !2222, !829}
!5729 = !DILocalVariable(name: "info", arg: 1, scope: !5726, file: !456, line: 216, type: !2222)
!5730 = !DILocation(line: 216, column: 46, scope: !5726)
!5731 = !DILocalVariable(name: "count", arg: 2, scope: !5726, file: !456, line: 216, type: !829)
!5732 = !DILocation(line: 216, column: 56, scope: !5726)
!5733 = !DILocation(line: 218, column: 23, scope: !5726)
!5734 = !DILocation(line: 218, column: 3, scope: !5726)
!5735 = !DILocation(line: 218, column: 9, scope: !5726)
!5736 = !DILocation(line: 218, column: 21, scope: !5726)
!5737 = !DILocation(line: 219, column: 1, scope: !5726)
!5738 = distinct !DISubprogram(name: "bb_seq", scope: !603, file: !603, line: 237, type: !5739, scopeLine: 238, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2371)
!5739 = !DISubroutineType(types: !5740)
!5740 = !{!1036, !5741}
!5741 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_basic_block", file: !749, line: 112, baseType: !5742)
!5742 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5743, size: 64)
!5743 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1011)
!5744 = !DILocalVariable(name: "bb", arg: 1, scope: !5738, file: !603, line: 237, type: !5741)
!5745 = !DILocation(line: 237, column: 27, scope: !5738)
!5746 = !DILocation(line: 239, column: 13, scope: !5738)
!5747 = !DILocation(line: 239, column: 17, scope: !5738)
!5748 = !DILocation(line: 239, column: 23, scope: !5738)
!5749 = !DILocation(line: 239, column: 33, scope: !5738)
!5750 = !DILocation(line: 239, column: 36, scope: !5738)
!5751 = !DILocation(line: 239, column: 40, scope: !5738)
!5752 = !DILocation(line: 239, column: 43, scope: !5738)
!5753 = !DILocation(line: 239, column: 10, scope: !5738)
!5754 = !DILocation(line: 239, column: 53, scope: !5738)
!5755 = !DILocation(line: 239, column: 57, scope: !5738)
!5756 = !DILocation(line: 239, column: 60, scope: !5738)
!5757 = !DILocation(line: 239, column: 68, scope: !5738)
!5758 = !DILocation(line: 239, column: 3, scope: !5738)
!5759 = distinct !DISubprogram(name: "gimple_seq_first", scope: !603, file: !603, line: 159, type: !5760, scopeLine: 160, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2371)
!5760 = !DISubroutineType(types: !5761)
!5761 = !{!1041, !5762}
!5762 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_gimple_seq", file: !749, line: 67, baseType: !5763)
!5763 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5764, size: 64)
!5764 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1038)
!5765 = !DILocalVariable(name: "s", arg: 1, scope: !5759, file: !603, line: 159, type: !5762)
!5766 = !DILocation(line: 159, column: 36, scope: !5759)
!5767 = !DILocation(line: 161, column: 10, scope: !5759)
!5768 = !DILocation(line: 161, column: 14, scope: !5759)
!5769 = !DILocation(line: 161, column: 17, scope: !5759)
!5770 = !DILocation(line: 161, column: 3, scope: !5759)
!5771 = distinct !DISubprogram(name: "ipa_get_param_decl_index", scope: !3, file: !3, line: 113, type: !5772, scopeLine: 114, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2371)
!5772 = !DISubroutineType(types: !5773)
!5773 = !{!829, !2222, !748}
!5774 = !DILocalVariable(name: "info", arg: 1, scope: !5771, file: !3, line: 113, type: !2222)
!5775 = !DILocation(line: 113, column: 51, scope: !5771)
!5776 = !DILocalVariable(name: "ptree", arg: 2, scope: !5771, file: !3, line: 113, type: !748)
!5777 = !DILocation(line: 113, column: 62, scope: !5771)
!5778 = !DILocalVariable(name: "i", scope: !5771, file: !3, line: 115, type: !829)
!5779 = !DILocation(line: 115, column: 7, scope: !5771)
!5780 = !DILocalVariable(name: "count", scope: !5771, file: !3, line: 115, type: !829)
!5781 = !DILocation(line: 115, column: 10, scope: !5771)
!5782 = !DILocation(line: 117, column: 32, scope: !5771)
!5783 = !DILocation(line: 117, column: 11, scope: !5771)
!5784 = !DILocation(line: 117, column: 9, scope: !5771)
!5785 = !DILocation(line: 118, column: 10, scope: !5786)
!5786 = distinct !DILexicalBlock(scope: !5771, file: !3, line: 118, column: 3)
!5787 = !DILocation(line: 118, column: 8, scope: !5786)
!5788 = !DILocation(line: 118, column: 15, scope: !5789)
!5789 = distinct !DILexicalBlock(scope: !5786, file: !3, line: 118, column: 3)
!5790 = !DILocation(line: 118, column: 19, scope: !5789)
!5791 = !DILocation(line: 118, column: 17, scope: !5789)
!5792 = !DILocation(line: 118, column: 3, scope: !5786)
!5793 = !DILocation(line: 119, column: 23, scope: !5794)
!5794 = distinct !DILexicalBlock(scope: !5789, file: !3, line: 119, column: 9)
!5795 = !DILocation(line: 119, column: 29, scope: !5794)
!5796 = !DILocation(line: 119, column: 9, scope: !5794)
!5797 = !DILocation(line: 119, column: 35, scope: !5794)
!5798 = !DILocation(line: 119, column: 32, scope: !5794)
!5799 = !DILocation(line: 119, column: 9, scope: !5789)
!5800 = !DILocation(line: 120, column: 14, scope: !5794)
!5801 = !DILocation(line: 120, column: 7, scope: !5794)
!5802 = !DILocation(line: 118, column: 27, scope: !5789)
!5803 = !DILocation(line: 118, column: 3, scope: !5789)
!5804 = distinct !{!5804, !5792, !5805}
!5805 = !DILocation(line: 120, column: 14, scope: !5786)
!5806 = !DILocation(line: 122, column: 3, scope: !5771)
!5807 = !DILocation(line: 123, column: 1, scope: !5771)
!5808 = distinct !DISubprogram(name: "gimple_code", scope: !603, file: !603, line: 1052, type: !5809, scopeLine: 1053, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2371)
!5809 = !DISubroutineType(types: !5810)
!5810 = !{!640, !2734}
!5811 = !DILocalVariable(name: "g", arg: 1, scope: !5808, file: !603, line: 1052, type: !2734)
!5812 = !DILocation(line: 1052, column: 27, scope: !5808)
!5813 = !DILocation(line: 1054, column: 10, scope: !5808)
!5814 = !DILocation(line: 1054, column: 13, scope: !5808)
!5815 = !DILocation(line: 1054, column: 20, scope: !5808)
!5816 = !DILocation(line: 1054, column: 3, scope: !5808)
!5817 = distinct !DISubprogram(name: "gimple_num_ops", scope: !603, file: !603, line: 1596, type: !2742, scopeLine: 1597, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2371)
!5818 = !DILocalVariable(name: "gs", arg: 1, scope: !5817, file: !603, line: 1596, type: !2734)
!5819 = !DILocation(line: 1596, column: 30, scope: !5817)
!5820 = !DILocation(line: 1598, column: 10, scope: !5817)
!5821 = !DILocation(line: 1598, column: 14, scope: !5817)
!5822 = !DILocation(line: 1598, column: 21, scope: !5817)
!5823 = !DILocation(line: 1598, column: 3, scope: !5817)
!5824 = distinct !DISubprogram(name: "VEC_ipa_edge_args_t_gc_safe_grow", scope: !456, file: !456, line: 317, type: !2762, scopeLine: 317, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2371)
!5825 = !DILocalVariable(name: "vec_", arg: 1, scope: !5824, file: !456, line: 317, type: !2764)
!5826 = !DILocation(line: 317, column: 1, scope: !5824)
!5827 = !DILocalVariable(name: "size_", arg: 2, scope: !5824, file: !456, line: 317, type: !829)
!5828 = !DILocation(line: 0, scope: !5824)
!5829 = distinct !DISubprogram(name: "VEC_ipa_edge_args_t_base_address", scope: !456, file: !456, line: 316, type: !5830, scopeLine: 316, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2371)
!5830 = !DISubroutineType(types: !5831)
!5831 = !{!2785, !2786}
!5832 = !DILocalVariable(name: "vec_", arg: 1, scope: !5829, file: !456, line: 316, type: !2786)
!5833 = !DILocation(line: 316, column: 1, scope: !5829)
!5834 = distinct !DISubprogram(name: "VEC_ipa_edge_args_t_gc_reserve_exact", scope: !456, file: !456, line: 317, type: !5835, scopeLine: 317, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2371)
!5835 = !DISubroutineType(types: !5836)
!5836 = !{!829, !2764, !829}
!5837 = !DILocalVariable(name: "vec_", arg: 1, scope: !5834, file: !456, line: 317, type: !2764)
!5838 = !DILocation(line: 317, column: 1, scope: !5834)
!5839 = !DILocalVariable(name: "alloc_", arg: 2, scope: !5834, file: !456, line: 317, type: !829)
!5840 = !DILocalVariable(name: "extend", scope: !5834, file: !456, line: 317, type: !829)
!5841 = !DILocation(line: 317, column: 1, scope: !5842)
!5842 = distinct !DILexicalBlock(scope: !5834, file: !456, line: 317, column: 1)
!5843 = distinct !DISubprogram(name: "VEC_ipa_edge_args_t_base_space", scope: !456, file: !456, line: 316, type: !5844, scopeLine: 316, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2371)
!5844 = !DISubroutineType(types: !5845)
!5845 = !{!829, !2786, !829}
!5846 = !DILocalVariable(name: "vec_", arg: 1, scope: !5843, file: !456, line: 316, type: !2786)
!5847 = !DILocation(line: 316, column: 1, scope: !5843)
!5848 = !DILocalVariable(name: "alloc_", arg: 2, scope: !5843, file: !456, line: 316, type: !829)
!5849 = distinct !DISubprogram(name: "compute_complex_pass_through", scope: !3, file: !3, line: 344, type: !5850, scopeLine: 347, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2371)
!5850 = !DISubroutineType(types: !5851)
!5851 = !{null, !2222, !2197, !748}
!5852 = !DILocalVariable(name: "info", arg: 1, scope: !5849, file: !3, line: 344, type: !2222)
!5853 = !DILocation(line: 344, column: 55, scope: !5849)
!5854 = !DILocalVariable(name: "jfunc", arg: 2, scope: !5849, file: !3, line: 345, type: !2197)
!5855 = !DILocation(line: 345, column: 32, scope: !5849)
!5856 = !DILocalVariable(name: "name", arg: 3, scope: !5849, file: !3, line: 346, type: !748)
!5857 = !DILocation(line: 346, column: 15, scope: !5849)
!5858 = !DILocalVariable(name: "offset", scope: !5849, file: !3, line: 348, type: !804)
!5859 = !DILocation(line: 348, column: 17, scope: !5849)
!5860 = !DILocalVariable(name: "size", scope: !5849, file: !3, line: 348, type: !804)
!5861 = !DILocation(line: 348, column: 25, scope: !5849)
!5862 = !DILocalVariable(name: "max_size", scope: !5849, file: !3, line: 348, type: !804)
!5863 = !DILocation(line: 348, column: 31, scope: !5849)
!5864 = !DILocalVariable(name: "op1", scope: !5849, file: !3, line: 349, type: !748)
!5865 = !DILocation(line: 349, column: 8, scope: !5849)
!5866 = !DILocalVariable(name: "op2", scope: !5849, file: !3, line: 349, type: !748)
!5867 = !DILocation(line: 349, column: 13, scope: !5849)
!5868 = !DILocalVariable(name: "type", scope: !5849, file: !3, line: 349, type: !748)
!5869 = !DILocation(line: 349, column: 18, scope: !5849)
!5870 = !DILocalVariable(name: "index", scope: !5849, file: !3, line: 350, type: !829)
!5871 = !DILocation(line: 350, column: 7, scope: !5849)
!5872 = !DILocalVariable(name: "stmt", scope: !5849, file: !3, line: 351, type: !1046)
!5873 = !DILocation(line: 351, column: 10, scope: !5849)
!5874 = !DILocation(line: 351, column: 17, scope: !5849)
!5875 = !DILocation(line: 353, column: 26, scope: !5876)
!5876 = distinct !DILexicalBlock(scope: !5849, file: !3, line: 353, column: 7)
!5877 = !DILocation(line: 353, column: 8, scope: !5876)
!5878 = !DILocation(line: 353, column: 7, scope: !5849)
!5879 = !DILocation(line: 354, column: 5, scope: !5876)
!5880 = !DILocation(line: 355, column: 29, scope: !5849)
!5881 = !DILocation(line: 355, column: 9, scope: !5849)
!5882 = !DILocation(line: 355, column: 7, scope: !5849)
!5883 = !DILocation(line: 356, column: 29, scope: !5849)
!5884 = !DILocation(line: 356, column: 9, scope: !5849)
!5885 = !DILocation(line: 356, column: 7, scope: !5849)
!5886 = !DILocation(line: 358, column: 7, scope: !5887)
!5887 = distinct !DILexicalBlock(scope: !5849, file: !3, line: 358, column: 7)
!5888 = !DILocation(line: 358, column: 7, scope: !5849)
!5889 = !DILocation(line: 360, column: 11, scope: !5890)
!5890 = distinct !DILexicalBlock(scope: !5891, file: !3, line: 360, column: 11)
!5891 = distinct !DILexicalBlock(scope: !5887, file: !3, line: 359, column: 5)
!5892 = !DILocation(line: 360, column: 27, scope: !5890)
!5893 = !DILocation(line: 361, column: 4, scope: !5890)
!5894 = !DILocation(line: 361, column: 8, scope: !5890)
!5895 = !DILocation(line: 362, column: 4, scope: !5890)
!5896 = !DILocation(line: 362, column: 8, scope: !5890)
!5897 = !DILocation(line: 362, column: 50, scope: !5890)
!5898 = !DILocation(line: 363, column: 8, scope: !5890)
!5899 = !DILocation(line: 363, column: 39, scope: !5890)
!5900 = !DILocation(line: 364, column: 11, scope: !5890)
!5901 = !DILocation(line: 363, column: 12, scope: !5890)
!5902 = !DILocation(line: 365, column: 4, scope: !5890)
!5903 = !DILocation(line: 365, column: 32, scope: !5890)
!5904 = !DILocation(line: 365, column: 8, scope: !5890)
!5905 = !DILocation(line: 360, column: 11, scope: !5891)
!5906 = !DILocation(line: 366, column: 2, scope: !5890)
!5907 = !DILocation(line: 368, column: 41, scope: !5891)
!5908 = !DILocation(line: 368, column: 47, scope: !5891)
!5909 = !DILocation(line: 368, column: 15, scope: !5891)
!5910 = !DILocation(line: 368, column: 13, scope: !5891)
!5911 = !DILocation(line: 369, column: 11, scope: !5912)
!5912 = distinct !DILexicalBlock(scope: !5891, file: !3, line: 369, column: 11)
!5913 = !DILocation(line: 369, column: 17, scope: !5912)
!5914 = !DILocation(line: 369, column: 11, scope: !5891)
!5915 = !DILocation(line: 371, column: 4, scope: !5916)
!5916 = distinct !DILexicalBlock(scope: !5912, file: !3, line: 370, column: 2)
!5917 = !DILocation(line: 371, column: 11, scope: !5916)
!5918 = !DILocation(line: 371, column: 16, scope: !5916)
!5919 = !DILocation(line: 372, column: 42, scope: !5916)
!5920 = !DILocation(line: 372, column: 4, scope: !5916)
!5921 = !DILocation(line: 372, column: 11, scope: !5916)
!5922 = !DILocation(line: 372, column: 17, scope: !5916)
!5923 = !DILocation(line: 372, column: 30, scope: !5916)
!5924 = !DILocation(line: 372, column: 40, scope: !5916)
!5925 = !DILocation(line: 373, column: 66, scope: !5916)
!5926 = !DILocation(line: 373, column: 42, scope: !5916)
!5927 = !DILocation(line: 373, column: 4, scope: !5916)
!5928 = !DILocation(line: 373, column: 11, scope: !5916)
!5929 = !DILocation(line: 373, column: 17, scope: !5916)
!5930 = !DILocation(line: 373, column: 30, scope: !5916)
!5931 = !DILocation(line: 373, column: 40, scope: !5916)
!5932 = !DILocation(line: 374, column: 40, scope: !5916)
!5933 = !DILocation(line: 374, column: 4, scope: !5916)
!5934 = !DILocation(line: 374, column: 11, scope: !5916)
!5935 = !DILocation(line: 374, column: 17, scope: !5916)
!5936 = !DILocation(line: 374, column: 30, scope: !5916)
!5937 = !DILocation(line: 374, column: 38, scope: !5916)
!5938 = !DILocation(line: 375, column: 2, scope: !5916)
!5939 = !DILocation(line: 376, column: 7, scope: !5891)
!5940 = !DILocation(line: 379, column: 7, scope: !5941)
!5941 = distinct !DILexicalBlock(scope: !5849, file: !3, line: 379, column: 7)
!5942 = !DILocation(line: 379, column: 23, scope: !5941)
!5943 = !DILocation(line: 379, column: 7, scope: !5849)
!5944 = !DILocation(line: 380, column: 5, scope: !5941)
!5945 = !DILocation(line: 381, column: 9, scope: !5849)
!5946 = !DILocation(line: 381, column: 7, scope: !5849)
!5947 = !DILocation(line: 382, column: 10, scope: !5849)
!5948 = !DILocation(line: 382, column: 8, scope: !5849)
!5949 = !DILocation(line: 384, column: 34, scope: !5849)
!5950 = !DILocation(line: 384, column: 9, scope: !5849)
!5951 = !DILocation(line: 384, column: 7, scope: !5849)
!5952 = !DILocation(line: 385, column: 7, scope: !5953)
!5953 = distinct !DILexicalBlock(scope: !5849, file: !3, line: 385, column: 7)
!5954 = !DILocation(line: 385, column: 23, scope: !5953)
!5955 = !DILocation(line: 387, column: 7, scope: !5953)
!5956 = !DILocation(line: 387, column: 10, scope: !5953)
!5957 = !DILocation(line: 387, column: 19, scope: !5953)
!5958 = !DILocation(line: 388, column: 7, scope: !5953)
!5959 = !DILocation(line: 388, column: 10, scope: !5953)
!5960 = !DILocation(line: 388, column: 22, scope: !5953)
!5961 = !DILocation(line: 388, column: 19, scope: !5953)
!5962 = !DILocation(line: 385, column: 7, scope: !5849)
!5963 = !DILocation(line: 389, column: 5, scope: !5953)
!5964 = !DILocation(line: 390, column: 9, scope: !5849)
!5965 = !DILocation(line: 390, column: 7, scope: !5849)
!5966 = !DILocation(line: 391, column: 7, scope: !5967)
!5967 = distinct !DILexicalBlock(scope: !5849, file: !3, line: 391, column: 7)
!5968 = !DILocation(line: 391, column: 23, scope: !5967)
!5969 = !DILocation(line: 392, column: 7, scope: !5967)
!5970 = !DILocation(line: 392, column: 11, scope: !5967)
!5971 = !DILocation(line: 391, column: 7, scope: !5849)
!5972 = !DILocation(line: 393, column: 5, scope: !5967)
!5973 = !DILocation(line: 395, column: 37, scope: !5849)
!5974 = !DILocation(line: 395, column: 43, scope: !5849)
!5975 = !DILocation(line: 395, column: 11, scope: !5849)
!5976 = !DILocation(line: 395, column: 9, scope: !5849)
!5977 = !DILocation(line: 396, column: 7, scope: !5978)
!5978 = distinct !DILexicalBlock(scope: !5849, file: !3, line: 396, column: 7)
!5979 = !DILocation(line: 396, column: 13, scope: !5978)
!5980 = !DILocation(line: 396, column: 7, scope: !5849)
!5981 = !DILocation(line: 398, column: 7, scope: !5982)
!5982 = distinct !DILexicalBlock(scope: !5978, file: !3, line: 397, column: 5)
!5983 = !DILocation(line: 398, column: 14, scope: !5982)
!5984 = !DILocation(line: 398, column: 19, scope: !5982)
!5985 = !DILocation(line: 399, column: 41, scope: !5982)
!5986 = !DILocation(line: 399, column: 7, scope: !5982)
!5987 = !DILocation(line: 399, column: 14, scope: !5982)
!5988 = !DILocation(line: 399, column: 20, scope: !5982)
!5989 = !DILocation(line: 399, column: 29, scope: !5982)
!5990 = !DILocation(line: 399, column: 39, scope: !5982)
!5991 = !DILocation(line: 400, column: 38, scope: !5982)
!5992 = !DILocation(line: 400, column: 7, scope: !5982)
!5993 = !DILocation(line: 400, column: 14, scope: !5982)
!5994 = !DILocation(line: 400, column: 20, scope: !5982)
!5995 = !DILocation(line: 400, column: 29, scope: !5982)
!5996 = !DILocation(line: 400, column: 36, scope: !5982)
!5997 = !DILocation(line: 401, column: 36, scope: !5982)
!5998 = !DILocation(line: 401, column: 7, scope: !5982)
!5999 = !DILocation(line: 401, column: 14, scope: !5982)
!6000 = !DILocation(line: 401, column: 20, scope: !5982)
!6001 = !DILocation(line: 401, column: 29, scope: !5982)
!6002 = !DILocation(line: 401, column: 34, scope: !5982)
!6003 = !DILocation(line: 402, column: 5, scope: !5982)
!6004 = !DILocation(line: 403, column: 1, scope: !5849)
!6005 = distinct !DISubprogram(name: "is_gimple_assign", scope: !603, file: !603, line: 1677, type: !2732, scopeLine: 1678, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2371)
!6006 = !DILocalVariable(name: "gs", arg: 1, scope: !6005, file: !603, line: 1677, type: !2734)
!6007 = !DILocation(line: 1677, column: 32, scope: !6005)
!6008 = !DILocation(line: 1679, column: 23, scope: !6005)
!6009 = !DILocation(line: 1679, column: 10, scope: !6005)
!6010 = !DILocation(line: 1679, column: 27, scope: !6005)
!6011 = !DILocation(line: 1679, column: 3, scope: !6005)
!6012 = distinct !DISubprogram(name: "gimple_assign_rhs1", scope: !603, file: !603, line: 1727, type: !4594, scopeLine: 1728, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2371)
!6013 = !DILocalVariable(name: "gs", arg: 1, scope: !6012, file: !603, line: 1727, type: !2734)
!6014 = !DILocation(line: 1727, column: 34, scope: !6012)
!6015 = !DILocation(line: 1730, column: 21, scope: !6012)
!6016 = !DILocation(line: 1730, column: 10, scope: !6012)
!6017 = !DILocation(line: 1730, column: 3, scope: !6012)
!6018 = distinct !DISubprogram(name: "gimple_assign_rhs2", scope: !603, file: !603, line: 1759, type: !4594, scopeLine: 1760, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2371)
!6019 = !DILocalVariable(name: "gs", arg: 1, scope: !6018, file: !603, line: 1759, type: !2734)
!6020 = !DILocation(line: 1759, column: 34, scope: !6018)
!6021 = !DILocation(line: 1763, column: 23, scope: !6022)
!6022 = distinct !DILexicalBlock(scope: !6018, file: !603, line: 1763, column: 7)
!6023 = !DILocation(line: 1763, column: 7, scope: !6022)
!6024 = !DILocation(line: 1763, column: 27, scope: !6022)
!6025 = !DILocation(line: 1763, column: 7, scope: !6018)
!6026 = !DILocation(line: 1764, column: 23, scope: !6022)
!6027 = !DILocation(line: 1764, column: 12, scope: !6022)
!6028 = !DILocation(line: 1764, column: 5, scope: !6022)
!6029 = !DILocation(line: 1766, column: 5, scope: !6022)
!6030 = !DILocation(line: 1767, column: 1, scope: !6018)
!6031 = distinct !DISubprogram(name: "gimple_expr_code", scope: !603, file: !603, line: 1438, type: !6032, scopeLine: 1439, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2371)
!6032 = !DISubroutineType(types: !6033)
!6033 = !{!5, !2734}
!6034 = !DILocalVariable(name: "stmt", arg: 1, scope: !6031, file: !603, line: 1438, type: !2734)
!6035 = !DILocation(line: 1438, column: 32, scope: !6031)
!6036 = !DILocalVariable(name: "code", scope: !6031, file: !603, line: 1440, type: !640)
!6037 = !DILocation(line: 1440, column: 20, scope: !6031)
!6038 = !DILocation(line: 1440, column: 40, scope: !6031)
!6039 = !DILocation(line: 1440, column: 27, scope: !6031)
!6040 = !DILocation(line: 1441, column: 7, scope: !6041)
!6041 = distinct !DILexicalBlock(scope: !6031, file: !603, line: 1441, column: 7)
!6042 = !DILocation(line: 1441, column: 12, scope: !6041)
!6043 = !DILocation(line: 1441, column: 29, scope: !6041)
!6044 = !DILocation(line: 1441, column: 32, scope: !6041)
!6045 = !DILocation(line: 1441, column: 37, scope: !6041)
!6046 = !DILocation(line: 1441, column: 7, scope: !6031)
!6047 = !DILocation(line: 1442, column: 29, scope: !6041)
!6048 = !DILocation(line: 1442, column: 35, scope: !6041)
!6049 = !DILocation(line: 1442, column: 42, scope: !6041)
!6050 = !DILocation(line: 1442, column: 5, scope: !6041)
!6051 = !DILocation(line: 1443, column: 12, scope: !6052)
!6052 = distinct !DILexicalBlock(scope: !6041, file: !603, line: 1443, column: 12)
!6053 = !DILocation(line: 1443, column: 17, scope: !6052)
!6054 = !DILocation(line: 1443, column: 12, scope: !6041)
!6055 = !DILocation(line: 1444, column: 5, scope: !6052)
!6056 = !DILocation(line: 1446, column: 5, scope: !6052)
!6057 = !DILocation(line: 1448, column: 5, scope: !6031)
!6058 = !DILocation(line: 1450, column: 1, scope: !6031)
!6059 = distinct !DISubprogram(name: "gimple_assign_rhs_code", scope: !603, file: !603, line: 1815, type: !6032, scopeLine: 1816, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2371)
!6060 = !DILocalVariable(name: "gs", arg: 1, scope: !6059, file: !603, line: 1815, type: !2734)
!6061 = !DILocation(line: 1815, column: 38, scope: !6059)
!6062 = !DILocalVariable(name: "code", scope: !6059, file: !603, line: 1817, type: !5)
!6063 = !DILocation(line: 1817, column: 18, scope: !6059)
!6064 = !DILocation(line: 1820, column: 28, scope: !6059)
!6065 = !DILocation(line: 1820, column: 10, scope: !6059)
!6066 = !DILocation(line: 1820, column: 8, scope: !6059)
!6067 = !DILocation(line: 1821, column: 29, scope: !6068)
!6068 = distinct !DILexicalBlock(scope: !6059, file: !603, line: 1821, column: 7)
!6069 = !DILocation(line: 1821, column: 7, scope: !6068)
!6070 = !DILocation(line: 1821, column: 35, scope: !6068)
!6071 = !DILocation(line: 1821, column: 7, scope: !6059)
!6072 = !DILocation(line: 1822, column: 12, scope: !6068)
!6073 = !DILocation(line: 1822, column: 10, scope: !6068)
!6074 = !DILocation(line: 1822, column: 5, scope: !6068)
!6075 = !DILocation(line: 1824, column: 10, scope: !6059)
!6076 = !DILocation(line: 1824, column: 3, scope: !6059)
!6077 = distinct !DISubprogram(name: "gimple_op", scope: !603, file: !603, line: 1631, type: !4582, scopeLine: 1632, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2371)
!6078 = !DILocalVariable(name: "gs", arg: 1, scope: !6077, file: !603, line: 1631, type: !2734)
!6079 = !DILocation(line: 1631, column: 25, scope: !6077)
!6080 = !DILocalVariable(name: "i", arg: 2, scope: !6077, file: !603, line: 1631, type: !7)
!6081 = !DILocation(line: 1631, column: 38, scope: !6077)
!6082 = !DILocation(line: 1633, column: 23, scope: !6083)
!6083 = distinct !DILexicalBlock(scope: !6077, file: !603, line: 1633, column: 7)
!6084 = !DILocation(line: 1633, column: 7, scope: !6083)
!6085 = !DILocation(line: 1633, column: 7, scope: !6077)
!6086 = !DILocation(line: 1638, column: 26, scope: !6087)
!6087 = distinct !DILexicalBlock(scope: !6083, file: !603, line: 1634, column: 5)
!6088 = !DILocation(line: 1638, column: 14, scope: !6087)
!6089 = !DILocation(line: 1638, column: 50, scope: !6087)
!6090 = !DILocation(line: 1638, column: 7, scope: !6087)
!6091 = !DILocation(line: 1641, column: 5, scope: !6083)
!6092 = !DILocation(line: 1642, column: 1, scope: !6077)
!6093 = distinct !DISubprogram(name: "gimple_has_ops", scope: !603, file: !603, line: 1274, type: !2732, scopeLine: 1275, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2371)
!6094 = !DILocalVariable(name: "g", arg: 1, scope: !6093, file: !603, line: 1274, type: !2734)
!6095 = !DILocation(line: 1274, column: 30, scope: !6093)
!6096 = !DILocation(line: 1276, column: 23, scope: !6093)
!6097 = !DILocation(line: 1276, column: 10, scope: !6093)
!6098 = !DILocation(line: 1276, column: 26, scope: !6093)
!6099 = !DILocation(line: 1276, column: 41, scope: !6093)
!6100 = !DILocation(line: 1276, column: 57, scope: !6093)
!6101 = !DILocation(line: 1276, column: 44, scope: !6093)
!6102 = !DILocation(line: 1276, column: 60, scope: !6093)
!6103 = !DILocation(line: 0, scope: !6093)
!6104 = !DILocation(line: 1276, column: 3, scope: !6093)
!6105 = distinct !DISubprogram(name: "gimple_ops", scope: !603, file: !603, line: 1614, type: !6106, scopeLine: 1615, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2371)
!6106 = !DISubroutineType(types: !6107)
!6107 = !{!1081, !1046}
!6108 = !DILocalVariable(name: "gs", arg: 1, scope: !6105, file: !603, line: 1614, type: !1046)
!6109 = !DILocation(line: 1614, column: 20, scope: !6105)
!6110 = !DILocalVariable(name: "off", scope: !6105, file: !603, line: 1616, type: !1194)
!6111 = !DILocation(line: 1616, column: 10, scope: !6105)
!6112 = !DILocation(line: 1621, column: 56, scope: !6105)
!6113 = !DILocation(line: 1621, column: 28, scope: !6105)
!6114 = !DILocation(line: 1621, column: 9, scope: !6105)
!6115 = !DILocation(line: 1621, column: 7, scope: !6105)
!6116 = !DILocation(line: 1622, column: 3, scope: !6105)
!6117 = !DILocation(line: 1624, column: 29, scope: !6105)
!6118 = !DILocation(line: 1624, column: 20, scope: !6105)
!6119 = !DILocation(line: 1624, column: 34, scope: !6105)
!6120 = !DILocation(line: 1624, column: 32, scope: !6105)
!6121 = !DILocation(line: 1624, column: 10, scope: !6105)
!6122 = !DILocation(line: 1624, column: 3, scope: !6105)
!6123 = distinct !DISubprogram(name: "gimple_statement_structure", scope: !603, file: !603, line: 1073, type: !6124, scopeLine: 1074, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2371)
!6124 = !DISubroutineType(types: !6125)
!6125 = !{!691, !1046}
!6126 = !DILocalVariable(name: "gs", arg: 1, scope: !6123, file: !603, line: 1073, type: !1046)
!6127 = !DILocation(line: 1073, column: 36, scope: !6123)
!6128 = !DILocation(line: 1075, column: 37, scope: !6123)
!6129 = !DILocation(line: 1075, column: 24, scope: !6123)
!6130 = !DILocation(line: 1075, column: 10, scope: !6123)
!6131 = !DILocation(line: 1075, column: 3, scope: !6123)
!6132 = distinct !DISubprogram(name: "gss_for_code", scope: !603, file: !603, line: 1061, type: !6133, scopeLine: 1062, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2371)
!6133 = !DISubroutineType(types: !6134)
!6134 = !{!691, !640}
!6135 = !DILocalVariable(name: "code", arg: 1, scope: !6132, file: !603, line: 1061, type: !640)
!6136 = !DILocation(line: 1061, column: 32, scope: !6132)
!6137 = !DILocation(line: 1066, column: 24, scope: !6132)
!6138 = !DILocation(line: 1066, column: 10, scope: !6132)
!6139 = !DILocation(line: 1066, column: 3, scope: !6132)
!6140 = distinct !DISubprogram(name: "get_gimple_rhs_class", scope: !603, file: !603, line: 1686, type: !6141, scopeLine: 1687, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2371)
!6141 = !DISubroutineType(types: !6142)
!6142 = !{!717, !5}
!6143 = !DILocalVariable(name: "code", arg: 1, scope: !6140, file: !603, line: 1686, type: !5)
!6144 = !DILocation(line: 1686, column: 38, scope: !6140)
!6145 = !DILocation(line: 1688, column: 63, scope: !6140)
!6146 = !DILocation(line: 1688, column: 34, scope: !6140)
!6147 = !DILocation(line: 1688, column: 10, scope: !6140)
!6148 = !DILocation(line: 1688, column: 3, scope: !6140)
!6149 = distinct !DISubprogram(name: "type_like_member_ptr_p", scope: !3, file: !3, line: 454, type: !6150, scopeLine: 455, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2371)
!6150 = !DISubroutineType(types: !6151)
!6151 = !{!852, !748, !1081, !1081}
!6152 = !DILocalVariable(name: "type", arg: 1, scope: !6149, file: !3, line: 454, type: !748)
!6153 = !DILocation(line: 454, column: 30, scope: !6149)
!6154 = !DILocalVariable(name: "method_ptr", arg: 2, scope: !6149, file: !3, line: 454, type: !1081)
!6155 = !DILocation(line: 454, column: 42, scope: !6149)
!6156 = !DILocalVariable(name: "delta", arg: 3, scope: !6149, file: !3, line: 454, type: !1081)
!6157 = !DILocation(line: 454, column: 60, scope: !6149)
!6158 = !DILocalVariable(name: "fld", scope: !6149, file: !3, line: 456, type: !748)
!6159 = !DILocation(line: 456, column: 8, scope: !6149)
!6160 = !DILocation(line: 458, column: 7, scope: !6161)
!6161 = distinct !DILexicalBlock(scope: !6149, file: !3, line: 458, column: 7)
!6162 = !DILocation(line: 458, column: 24, scope: !6161)
!6163 = !DILocation(line: 458, column: 7, scope: !6149)
!6164 = !DILocation(line: 459, column: 5, scope: !6161)
!6165 = !DILocation(line: 461, column: 9, scope: !6149)
!6166 = !DILocation(line: 461, column: 7, scope: !6149)
!6167 = !DILocation(line: 462, column: 8, scope: !6168)
!6168 = distinct !DILexicalBlock(scope: !6149, file: !3, line: 462, column: 7)
!6169 = !DILocation(line: 462, column: 12, scope: !6168)
!6170 = !DILocation(line: 462, column: 16, scope: !6168)
!6171 = !DILocation(line: 463, column: 7, scope: !6168)
!6172 = !DILocation(line: 463, column: 10, scope: !6168)
!6173 = !DILocation(line: 463, column: 50, scope: !6168)
!6174 = !DILocation(line: 462, column: 7, scope: !6149)
!6175 = !DILocation(line: 464, column: 5, scope: !6168)
!6176 = !DILocation(line: 466, column: 7, scope: !6177)
!6177 = distinct !DILexicalBlock(scope: !6149, file: !3, line: 466, column: 7)
!6178 = !DILocation(line: 466, column: 7, scope: !6149)
!6179 = !DILocation(line: 467, column: 19, scope: !6177)
!6180 = !DILocation(line: 467, column: 6, scope: !6177)
!6181 = !DILocation(line: 467, column: 17, scope: !6177)
!6182 = !DILocation(line: 467, column: 5, scope: !6177)
!6183 = !DILocation(line: 469, column: 9, scope: !6149)
!6184 = !DILocation(line: 469, column: 7, scope: !6149)
!6185 = !DILocation(line: 470, column: 8, scope: !6186)
!6186 = distinct !DILexicalBlock(scope: !6149, file: !3, line: 470, column: 7)
!6187 = !DILocation(line: 470, column: 12, scope: !6186)
!6188 = !DILocation(line: 470, column: 15, scope: !6186)
!6189 = !DILocation(line: 470, column: 7, scope: !6149)
!6190 = !DILocation(line: 471, column: 5, scope: !6186)
!6191 = !DILocation(line: 472, column: 7, scope: !6192)
!6192 = distinct !DILexicalBlock(scope: !6149, file: !3, line: 472, column: 7)
!6193 = !DILocation(line: 472, column: 7, scope: !6149)
!6194 = !DILocation(line: 473, column: 14, scope: !6192)
!6195 = !DILocation(line: 473, column: 6, scope: !6192)
!6196 = !DILocation(line: 473, column: 12, scope: !6192)
!6197 = !DILocation(line: 473, column: 5, scope: !6192)
!6198 = !DILocation(line: 475, column: 7, scope: !6199)
!6199 = distinct !DILexicalBlock(scope: !6149, file: !3, line: 475, column: 7)
!6200 = !DILocation(line: 475, column: 7, scope: !6149)
!6201 = !DILocation(line: 476, column: 5, scope: !6199)
!6202 = !DILocation(line: 478, column: 3, scope: !6149)
!6203 = !DILocation(line: 479, column: 1, scope: !6149)
!6204 = distinct !DISubprogram(name: "determine_cst_member_ptr", scope: !3, file: !3, line: 565, type: !6205, scopeLine: 567, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2371)
!6205 = !DISubroutineType(types: !6206)
!6206 = !{null, !1046, !748, !748, !748, !2197}
!6207 = !DILocalVariable(name: "call", arg: 1, scope: !6204, file: !3, line: 565, type: !1046)
!6208 = !DILocation(line: 565, column: 34, scope: !6204)
!6209 = !DILocalVariable(name: "arg", arg: 2, scope: !6204, file: !3, line: 565, type: !748)
!6210 = !DILocation(line: 565, column: 45, scope: !6204)
!6211 = !DILocalVariable(name: "method_field", arg: 3, scope: !6204, file: !3, line: 565, type: !748)
!6212 = !DILocation(line: 565, column: 55, scope: !6204)
!6213 = !DILocalVariable(name: "delta_field", arg: 4, scope: !6204, file: !3, line: 566, type: !748)
!6214 = !DILocation(line: 566, column: 11, scope: !6204)
!6215 = !DILocalVariable(name: "jfunc", arg: 5, scope: !6204, file: !3, line: 566, type: !2197)
!6216 = !DILocation(line: 566, column: 46, scope: !6204)
!6217 = !DILocalVariable(name: "gsi", scope: !6204, file: !3, line: 568, type: !2575)
!6218 = !DILocation(line: 568, column: 24, scope: !6204)
!6219 = !DILocalVariable(name: "method", scope: !6204, file: !3, line: 569, type: !748)
!6220 = !DILocation(line: 569, column: 8, scope: !6204)
!6221 = !DILocalVariable(name: "delta", scope: !6204, file: !3, line: 570, type: !748)
!6222 = !DILocation(line: 570, column: 8, scope: !6204)
!6223 = !DILocation(line: 572, column: 23, scope: !6204)
!6224 = !DILocation(line: 572, column: 9, scope: !6204)
!6225 = !DILocation(line: 574, column: 3, scope: !6204)
!6226 = !DILocation(line: 575, column: 3, scope: !6204)
!6227 = !DILocation(line: 575, column: 11, scope: !6228)
!6228 = distinct !DILexicalBlock(scope: !6229, file: !3, line: 575, column: 3)
!6229 = distinct !DILexicalBlock(scope: !6204, file: !3, line: 575, column: 3)
!6230 = !DILocation(line: 575, column: 10, scope: !6228)
!6231 = !DILocation(line: 575, column: 3, scope: !6229)
!6232 = !DILocalVariable(name: "stmt", scope: !6233, file: !3, line: 577, type: !1046)
!6233 = distinct !DILexicalBlock(scope: !6228, file: !3, line: 576, column: 5)
!6234 = !DILocation(line: 577, column: 14, scope: !6233)
!6235 = !DILocation(line: 577, column: 21, scope: !6233)
!6236 = !DILocalVariable(name: "lhs", scope: !6233, file: !3, line: 578, type: !748)
!6237 = !DILocation(line: 578, column: 12, scope: !6233)
!6238 = !DILocalVariable(name: "rhs", scope: !6233, file: !3, line: 578, type: !748)
!6239 = !DILocation(line: 578, column: 17, scope: !6233)
!6240 = !DILocalVariable(name: "fld", scope: !6233, file: !3, line: 578, type: !748)
!6241 = !DILocation(line: 578, column: 22, scope: !6233)
!6242 = !DILocation(line: 580, column: 36, scope: !6243)
!6243 = distinct !DILexicalBlock(scope: !6233, file: !3, line: 580, column: 11)
!6244 = !DILocation(line: 580, column: 12, scope: !6243)
!6245 = !DILocation(line: 580, column: 11, scope: !6233)
!6246 = !DILocation(line: 581, column: 2, scope: !6243)
!6247 = !DILocation(line: 583, column: 32, scope: !6233)
!6248 = !DILocation(line: 583, column: 13, scope: !6233)
!6249 = !DILocation(line: 583, column: 11, scope: !6233)
!6250 = !DILocation(line: 584, column: 33, scope: !6233)
!6251 = !DILocation(line: 584, column: 13, scope: !6233)
!6252 = !DILocation(line: 584, column: 11, scope: !6233)
!6253 = !DILocation(line: 586, column: 11, scope: !6254)
!6254 = distinct !DILexicalBlock(scope: !6233, file: !3, line: 586, column: 11)
!6255 = !DILocation(line: 586, column: 27, scope: !6254)
!6256 = !DILocation(line: 587, column: 4, scope: !6254)
!6257 = !DILocation(line: 587, column: 7, scope: !6254)
!6258 = !DILocation(line: 587, column: 32, scope: !6254)
!6259 = !DILocation(line: 587, column: 29, scope: !6254)
!6260 = !DILocation(line: 586, column: 11, scope: !6233)
!6261 = !DILocation(line: 588, column: 2, scope: !6254)
!6262 = !DILocation(line: 590, column: 13, scope: !6233)
!6263 = !DILocation(line: 590, column: 11, scope: !6233)
!6264 = !DILocation(line: 591, column: 12, scope: !6265)
!6265 = distinct !DILexicalBlock(scope: !6233, file: !3, line: 591, column: 11)
!6266 = !DILocation(line: 591, column: 19, scope: !6265)
!6267 = !DILocation(line: 591, column: 22, scope: !6265)
!6268 = !DILocation(line: 591, column: 29, scope: !6265)
!6269 = !DILocation(line: 591, column: 26, scope: !6265)
!6270 = !DILocation(line: 591, column: 11, scope: !6233)
!6271 = !DILocation(line: 593, column: 38, scope: !6272)
!6272 = distinct !DILexicalBlock(scope: !6265, file: !3, line: 592, column: 2)
!6273 = !DILocation(line: 593, column: 10, scope: !6272)
!6274 = !DILocation(line: 593, column: 8, scope: !6272)
!6275 = !DILocation(line: 594, column: 8, scope: !6276)
!6276 = distinct !DILexicalBlock(scope: !6272, file: !3, line: 594, column: 8)
!6277 = !DILocation(line: 594, column: 24, scope: !6276)
!6278 = !DILocation(line: 595, column: 8, scope: !6276)
!6279 = !DILocation(line: 595, column: 11, scope: !6276)
!6280 = !DILocation(line: 595, column: 45, scope: !6276)
!6281 = !DILocation(line: 596, column: 8, scope: !6276)
!6282 = !DILocation(line: 596, column: 11, scope: !6276)
!6283 = !DILocation(line: 596, column: 57, scope: !6276)
!6284 = !DILocation(line: 594, column: 8, scope: !6272)
!6285 = !DILocation(line: 598, column: 17, scope: !6286)
!6286 = distinct !DILexicalBlock(scope: !6276, file: !3, line: 597, column: 6)
!6287 = !DILocation(line: 598, column: 15, scope: !6286)
!6288 = !DILocation(line: 599, column: 12, scope: !6289)
!6289 = distinct !DILexicalBlock(scope: !6286, file: !3, line: 599, column: 12)
!6290 = !DILocation(line: 599, column: 12, scope: !6286)
!6291 = !DILocation(line: 601, column: 40, scope: !6292)
!6292 = distinct !DILexicalBlock(scope: !6289, file: !3, line: 600, column: 3)
!6293 = !DILocation(line: 601, column: 47, scope: !6292)
!6294 = !DILocation(line: 601, column: 52, scope: !6292)
!6295 = !DILocation(line: 601, column: 5, scope: !6292)
!6296 = !DILocation(line: 602, column: 5, scope: !6292)
!6297 = !DILocation(line: 604, column: 6, scope: !6286)
!6298 = !DILocation(line: 606, column: 6, scope: !6276)
!6299 = !DILocation(line: 607, column: 2, scope: !6272)
!6300 = !DILocation(line: 609, column: 12, scope: !6301)
!6301 = distinct !DILexicalBlock(scope: !6233, file: !3, line: 609, column: 11)
!6302 = !DILocation(line: 609, column: 18, scope: !6301)
!6303 = !DILocation(line: 609, column: 21, scope: !6301)
!6304 = !DILocation(line: 609, column: 28, scope: !6301)
!6305 = !DILocation(line: 609, column: 25, scope: !6301)
!6306 = !DILocation(line: 609, column: 11, scope: !6233)
!6307 = !DILocation(line: 611, column: 38, scope: !6308)
!6308 = distinct !DILexicalBlock(scope: !6301, file: !3, line: 610, column: 2)
!6309 = !DILocation(line: 611, column: 10, scope: !6308)
!6310 = !DILocation(line: 611, column: 8, scope: !6308)
!6311 = !DILocation(line: 612, column: 8, scope: !6312)
!6312 = distinct !DILexicalBlock(scope: !6308, file: !3, line: 612, column: 8)
!6313 = !DILocation(line: 612, column: 24, scope: !6312)
!6314 = !DILocation(line: 612, column: 8, scope: !6308)
!6315 = !DILocation(line: 614, column: 16, scope: !6316)
!6316 = distinct !DILexicalBlock(scope: !6312, file: !3, line: 613, column: 6)
!6317 = !DILocation(line: 614, column: 14, scope: !6316)
!6318 = !DILocation(line: 615, column: 12, scope: !6319)
!6319 = distinct !DILexicalBlock(scope: !6316, file: !3, line: 615, column: 12)
!6320 = !DILocation(line: 615, column: 12, scope: !6316)
!6321 = !DILocation(line: 617, column: 40, scope: !6322)
!6322 = distinct !DILexicalBlock(scope: !6319, file: !3, line: 616, column: 3)
!6323 = !DILocation(line: 617, column: 47, scope: !6322)
!6324 = !DILocation(line: 617, column: 52, scope: !6322)
!6325 = !DILocation(line: 617, column: 5, scope: !6322)
!6326 = !DILocation(line: 618, column: 5, scope: !6322)
!6327 = !DILocation(line: 620, column: 6, scope: !6316)
!6328 = !DILocation(line: 622, column: 6, scope: !6312)
!6329 = !DILocation(line: 623, column: 2, scope: !6308)
!6330 = !DILocation(line: 624, column: 5, scope: !6233)
!6331 = !DILocation(line: 575, column: 28, scope: !6228)
!6332 = !DILocation(line: 575, column: 3, scope: !6228)
!6333 = distinct !{!6333, !6231, !6334}
!6334 = !DILocation(line: 624, column: 5, scope: !6229)
!6335 = !DILocation(line: 626, column: 3, scope: !6204)
!6336 = !DILocation(line: 627, column: 1, scope: !6204)
!6337 = distinct !DISubprogram(name: "gsi_prev", scope: !603, file: !603, line: 4493, type: !2693, scopeLine: 4494, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2371)
!6338 = !DILocalVariable(name: "i", arg: 1, scope: !6337, file: !603, line: 4493, type: !2695)
!6339 = !DILocation(line: 4493, column: 33, scope: !6337)
!6340 = !DILocation(line: 4495, column: 12, scope: !6337)
!6341 = !DILocation(line: 4495, column: 15, scope: !6337)
!6342 = !DILocation(line: 4495, column: 20, scope: !6337)
!6343 = !DILocation(line: 4495, column: 3, scope: !6337)
!6344 = !DILocation(line: 4495, column: 6, scope: !6337)
!6345 = !DILocation(line: 4495, column: 10, scope: !6337)
!6346 = !DILocation(line: 4496, column: 1, scope: !6337)
!6347 = distinct !DISubprogram(name: "gimple_assign_lhs", scope: !603, file: !603, line: 1694, type: !4594, scopeLine: 1695, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2371)
!6348 = !DILocalVariable(name: "gs", arg: 1, scope: !6347, file: !603, line: 1694, type: !2734)
!6349 = !DILocation(line: 1694, column: 33, scope: !6347)
!6350 = !DILocation(line: 1697, column: 21, scope: !6347)
!6351 = !DILocation(line: 1697, column: 10, scope: !6347)
!6352 = !DILocation(line: 1697, column: 3, scope: !6347)
!6353 = distinct !DISubprogram(name: "get_ssa_def_if_simple_copy", scope: !3, file: !3, line: 540, type: !6354, scopeLine: 541, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2371)
!6354 = !DISubroutineType(types: !6355)
!6355 = !{!748, !748}
!6356 = !DILocalVariable(name: "rhs", arg: 1, scope: !6353, file: !3, line: 540, type: !748)
!6357 = !DILocation(line: 540, column: 34, scope: !6353)
!6358 = !DILocation(line: 542, column: 3, scope: !6353)
!6359 = !DILocation(line: 542, column: 10, scope: !6353)
!6360 = !DILocation(line: 542, column: 26, scope: !6353)
!6361 = !DILocation(line: 542, column: 38, scope: !6353)
!6362 = !DILocation(line: 542, column: 42, scope: !6353)
!6363 = !DILocation(line: 542, column: 41, scope: !6353)
!6364 = !DILocation(line: 0, scope: !6353)
!6365 = !DILocalVariable(name: "def_stmt", scope: !6366, file: !3, line: 544, type: !1046)
!6366 = distinct !DILexicalBlock(scope: !6353, file: !3, line: 543, column: 5)
!6367 = !DILocation(line: 544, column: 14, scope: !6366)
!6368 = !DILocation(line: 544, column: 25, scope: !6366)
!6369 = !DILocation(line: 546, column: 35, scope: !6370)
!6370 = distinct !DILexicalBlock(scope: !6366, file: !3, line: 546, column: 11)
!6371 = !DILocation(line: 546, column: 11, scope: !6370)
!6372 = !DILocation(line: 546, column: 11, scope: !6366)
!6373 = !DILocation(line: 547, column: 28, scope: !6370)
!6374 = !DILocation(line: 547, column: 8, scope: !6370)
!6375 = !DILocation(line: 547, column: 6, scope: !6370)
!6376 = !DILocation(line: 547, column: 2, scope: !6370)
!6377 = !DILocation(line: 549, column: 2, scope: !6370)
!6378 = distinct !{!6378, !6358, !6379}
!6379 = !DILocation(line: 550, column: 5, scope: !6353)
!6380 = !DILocation(line: 551, column: 10, scope: !6353)
!6381 = !DILocation(line: 551, column: 3, scope: !6353)
!6382 = distinct !DISubprogram(name: "fill_member_ptr_cst_jump_function", scope: !3, file: !3, line: 528, type: !6383, scopeLine: 530, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2371)
!6383 = !DISubroutineType(types: !6384)
!6384 = !{null, !2197, !748, !748}
!6385 = !DILocalVariable(name: "jfunc", arg: 1, scope: !6382, file: !3, line: 528, type: !2197)
!6386 = !DILocation(line: 528, column: 58, scope: !6382)
!6387 = !DILocalVariable(name: "pfn", arg: 2, scope: !6382, file: !3, line: 529, type: !748)
!6388 = !DILocation(line: 529, column: 13, scope: !6382)
!6389 = !DILocalVariable(name: "delta", arg: 3, scope: !6382, file: !3, line: 529, type: !748)
!6390 = !DILocation(line: 529, column: 23, scope: !6382)
!6391 = !DILocation(line: 531, column: 3, scope: !6382)
!6392 = !DILocation(line: 531, column: 10, scope: !6382)
!6393 = !DILocation(line: 531, column: 15, scope: !6382)
!6394 = !DILocation(line: 532, column: 33, scope: !6382)
!6395 = !DILocation(line: 532, column: 3, scope: !6382)
!6396 = !DILocation(line: 532, column: 10, scope: !6382)
!6397 = !DILocation(line: 532, column: 16, scope: !6382)
!6398 = !DILocation(line: 532, column: 27, scope: !6382)
!6399 = !DILocation(line: 532, column: 31, scope: !6382)
!6400 = !DILocation(line: 533, column: 35, scope: !6382)
!6401 = !DILocation(line: 533, column: 3, scope: !6382)
!6402 = !DILocation(line: 533, column: 10, scope: !6382)
!6403 = !DILocation(line: 533, column: 16, scope: !6382)
!6404 = !DILocation(line: 533, column: 27, scope: !6382)
!6405 = !DILocation(line: 533, column: 33, scope: !6382)
!6406 = !DILocation(line: 534, column: 1, scope: !6382)
!6407 = distinct !DISubprogram(name: "ipa_analyze_call_uses", scope: !3, file: !3, line: 811, type: !3407, scopeLine: 812, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2371)
!6408 = !DILocalVariable(name: "info", arg: 1, scope: !6407, file: !3, line: 811, type: !2222)
!6409 = !DILocation(line: 811, column: 48, scope: !6407)
!6410 = !DILocalVariable(name: "call", arg: 2, scope: !6407, file: !3, line: 811, type: !1046)
!6411 = !DILocation(line: 811, column: 61, scope: !6407)
!6412 = !DILocalVariable(name: "target", scope: !6407, file: !3, line: 813, type: !748)
!6413 = !DILocation(line: 813, column: 8, scope: !6407)
!6414 = !DILocation(line: 813, column: 33, scope: !6407)
!6415 = !DILocation(line: 813, column: 17, scope: !6407)
!6416 = !DILocalVariable(name: "def", scope: !6407, file: !3, line: 814, type: !1046)
!6417 = !DILocation(line: 814, column: 10, scope: !6407)
!6418 = !DILocalVariable(name: "var", scope: !6407, file: !3, line: 815, type: !748)
!6419 = !DILocation(line: 815, column: 8, scope: !6407)
!6420 = !DILocalVariable(name: "n1", scope: !6407, file: !3, line: 816, type: !748)
!6421 = !DILocation(line: 816, column: 8, scope: !6407)
!6422 = !DILocalVariable(name: "n2", scope: !6407, file: !3, line: 816, type: !748)
!6423 = !DILocation(line: 816, column: 12, scope: !6407)
!6424 = !DILocalVariable(name: "d1", scope: !6407, file: !3, line: 817, type: !1046)
!6425 = !DILocation(line: 817, column: 10, scope: !6407)
!6426 = !DILocalVariable(name: "d2", scope: !6407, file: !3, line: 817, type: !1046)
!6427 = !DILocation(line: 817, column: 14, scope: !6407)
!6428 = !DILocalVariable(name: "rec", scope: !6407, file: !3, line: 818, type: !748)
!6429 = !DILocation(line: 818, column: 8, scope: !6407)
!6430 = !DILocalVariable(name: "rec2", scope: !6407, file: !3, line: 818, type: !748)
!6431 = !DILocation(line: 818, column: 13, scope: !6407)
!6432 = !DILocalVariable(name: "cond", scope: !6407, file: !3, line: 818, type: !748)
!6433 = !DILocation(line: 818, column: 19, scope: !6407)
!6434 = !DILocalVariable(name: "branch", scope: !6407, file: !3, line: 819, type: !1046)
!6435 = !DILocation(line: 819, column: 10, scope: !6407)
!6436 = !DILocalVariable(name: "index", scope: !6407, file: !3, line: 820, type: !829)
!6437 = !DILocation(line: 820, column: 7, scope: !6407)
!6438 = !DILocalVariable(name: "bb", scope: !6407, file: !3, line: 821, type: !1009)
!6439 = !DILocation(line: 821, column: 15, scope: !6407)
!6440 = !DILocalVariable(name: "virt_bb", scope: !6407, file: !3, line: 821, type: !1009)
!6441 = !DILocation(line: 821, column: 19, scope: !6407)
!6442 = !DILocalVariable(name: "join", scope: !6407, file: !3, line: 821, type: !1009)
!6443 = !DILocation(line: 821, column: 28, scope: !6407)
!6444 = !DILocation(line: 823, column: 7, scope: !6445)
!6445 = distinct !DILexicalBlock(scope: !6407, file: !3, line: 823, column: 7)
!6446 = !DILocation(line: 823, column: 26, scope: !6445)
!6447 = !DILocation(line: 823, column: 7, scope: !6407)
!6448 = !DILocation(line: 824, column: 5, scope: !6445)
!6449 = !DILocation(line: 826, column: 9, scope: !6407)
!6450 = !DILocation(line: 826, column: 7, scope: !6407)
!6451 = !DILocation(line: 827, column: 7, scope: !6452)
!6452 = distinct !DILexicalBlock(scope: !6407, file: !3, line: 827, column: 7)
!6453 = !DILocation(line: 827, column: 7, scope: !6407)
!6454 = !DILocation(line: 830, column: 41, scope: !6455)
!6455 = distinct !DILexicalBlock(scope: !6452, file: !3, line: 828, column: 5)
!6456 = !DILocation(line: 830, column: 47, scope: !6455)
!6457 = !DILocation(line: 830, column: 15, scope: !6455)
!6458 = !DILocation(line: 830, column: 13, scope: !6455)
!6459 = !DILocation(line: 831, column: 11, scope: !6460)
!6460 = distinct !DILexicalBlock(scope: !6455, file: !3, line: 831, column: 11)
!6461 = !DILocation(line: 831, column: 17, scope: !6460)
!6462 = !DILocation(line: 831, column: 11, scope: !6455)
!6463 = !DILocation(line: 832, column: 23, scope: !6460)
!6464 = !DILocation(line: 832, column: 29, scope: !6460)
!6465 = !DILocation(line: 832, column: 36, scope: !6460)
!6466 = !DILocation(line: 832, column: 2, scope: !6460)
!6467 = !DILocation(line: 833, column: 7, scope: !6455)
!6468 = !DILocation(line: 839, column: 8, scope: !6469)
!6469 = distinct !DILexicalBlock(scope: !6407, file: !3, line: 839, column: 7)
!6470 = !DILocation(line: 840, column: 7, scope: !6469)
!6471 = !DILocation(line: 840, column: 10, scope: !6469)
!6472 = !DILocation(line: 840, column: 53, scope: !6469)
!6473 = !DILocation(line: 839, column: 7, scope: !6407)
!6474 = !DILocation(line: 841, column: 5, scope: !6469)
!6475 = !DILocation(line: 843, column: 9, scope: !6407)
!6476 = !DILocation(line: 843, column: 7, scope: !6407)
!6477 = !DILocation(line: 844, column: 20, scope: !6478)
!6478 = distinct !DILexicalBlock(scope: !6407, file: !3, line: 844, column: 7)
!6479 = !DILocation(line: 844, column: 7, scope: !6478)
!6480 = !DILocation(line: 844, column: 25, scope: !6478)
!6481 = !DILocation(line: 844, column: 7, scope: !6407)
!6482 = !DILocation(line: 845, column: 5, scope: !6478)
!6483 = !DILocation(line: 847, column: 28, scope: !6484)
!6484 = distinct !DILexicalBlock(scope: !6407, file: !3, line: 847, column: 7)
!6485 = !DILocation(line: 847, column: 7, scope: !6484)
!6486 = !DILocation(line: 847, column: 33, scope: !6484)
!6487 = !DILocation(line: 847, column: 7, scope: !6407)
!6488 = !DILocation(line: 848, column: 5, scope: !6484)
!6489 = !DILocation(line: 852, column: 8, scope: !6407)
!6490 = !DILocation(line: 852, column: 6, scope: !6407)
!6491 = !DILocation(line: 853, column: 8, scope: !6407)
!6492 = !DILocation(line: 853, column: 6, scope: !6407)
!6493 = !DILocation(line: 854, column: 34, scope: !6494)
!6494 = distinct !DILexicalBlock(scope: !6407, file: !3, line: 854, column: 7)
!6495 = !DILocation(line: 854, column: 8, scope: !6494)
!6496 = !DILocation(line: 854, column: 38, scope: !6494)
!6497 = !DILocation(line: 854, column: 68, scope: !6494)
!6498 = !DILocation(line: 854, column: 42, scope: !6494)
!6499 = !DILocation(line: 854, column: 7, scope: !6407)
!6500 = !DILocation(line: 855, column: 5, scope: !6494)
!6501 = !DILocation(line: 856, column: 8, scope: !6407)
!6502 = !DILocation(line: 856, column: 6, scope: !6407)
!6503 = !DILocation(line: 857, column: 8, scope: !6407)
!6504 = !DILocation(line: 857, column: 6, scope: !6407)
!6505 = !DILocation(line: 859, column: 50, scope: !6506)
!6506 = distinct !DILexicalBlock(scope: !6407, file: !3, line: 859, column: 7)
!6507 = !DILocation(line: 859, column: 14, scope: !6506)
!6508 = !DILocation(line: 859, column: 12, scope: !6506)
!6509 = !DILocation(line: 859, column: 7, scope: !6407)
!6510 = !DILocation(line: 861, column: 47, scope: !6511)
!6511 = distinct !DILexicalBlock(scope: !6512, file: !3, line: 861, column: 11)
!6512 = distinct !DILexicalBlock(scope: !6506, file: !3, line: 860, column: 5)
!6513 = !DILocation(line: 861, column: 11, scope: !6511)
!6514 = !DILocation(line: 861, column: 11, scope: !6512)
!6515 = !DILocation(line: 862, column: 2, scope: !6511)
!6516 = !DILocation(line: 864, column: 23, scope: !6512)
!6517 = !DILocation(line: 864, column: 12, scope: !6512)
!6518 = !DILocation(line: 864, column: 10, scope: !6512)
!6519 = !DILocation(line: 865, column: 28, scope: !6512)
!6520 = !DILocation(line: 865, column: 17, scope: !6512)
!6521 = !DILocation(line: 865, column: 15, scope: !6512)
!6522 = !DILocation(line: 866, column: 5, scope: !6512)
!6523 = !DILocation(line: 867, column: 55, scope: !6524)
!6524 = distinct !DILexicalBlock(scope: !6506, file: !3, line: 867, column: 12)
!6525 = !DILocation(line: 867, column: 19, scope: !6524)
!6526 = !DILocation(line: 867, column: 17, scope: !6524)
!6527 = !DILocation(line: 867, column: 12, scope: !6506)
!6528 = !DILocation(line: 869, column: 23, scope: !6529)
!6529 = distinct !DILexicalBlock(scope: !6524, file: !3, line: 868, column: 5)
!6530 = !DILocation(line: 869, column: 12, scope: !6529)
!6531 = !DILocation(line: 869, column: 10, scope: !6529)
!6532 = !DILocation(line: 870, column: 28, scope: !6529)
!6533 = !DILocation(line: 870, column: 17, scope: !6529)
!6534 = !DILocation(line: 870, column: 15, scope: !6529)
!6535 = !DILocation(line: 871, column: 5, scope: !6529)
!6536 = !DILocation(line: 873, column: 5, scope: !6524)
!6537 = !DILocation(line: 878, column: 21, scope: !6407)
!6538 = !DILocation(line: 878, column: 10, scope: !6407)
!6539 = !DILocation(line: 878, column: 8, scope: !6407)
!6540 = !DILocation(line: 879, column: 23, scope: !6541)
!6541 = distinct !DILexicalBlock(scope: !6407, file: !3, line: 879, column: 7)
!6542 = !DILocation(line: 879, column: 8, scope: !6541)
!6543 = !DILocation(line: 879, column: 32, scope: !6541)
!6544 = !DILocation(line: 879, column: 51, scope: !6541)
!6545 = !DILocation(line: 879, column: 36, scope: !6541)
!6546 = !DILocation(line: 880, column: 7, scope: !6541)
!6547 = !DILocation(line: 880, column: 23, scope: !6541)
!6548 = !DILocation(line: 880, column: 10, scope: !6541)
!6549 = !DILocation(line: 880, column: 35, scope: !6541)
!6550 = !DILocation(line: 880, column: 32, scope: !6541)
!6551 = !DILocation(line: 881, column: 7, scope: !6541)
!6552 = !DILocation(line: 881, column: 23, scope: !6541)
!6553 = !DILocation(line: 881, column: 10, scope: !6541)
!6554 = !DILocation(line: 881, column: 35, scope: !6541)
!6555 = !DILocation(line: 881, column: 32, scope: !6541)
!6556 = !DILocation(line: 879, column: 7, scope: !6407)
!6557 = !DILocation(line: 882, column: 5, scope: !6541)
!6558 = !DILocation(line: 887, column: 23, scope: !6407)
!6559 = !DILocation(line: 887, column: 12, scope: !6407)
!6560 = !DILocation(line: 887, column: 10, scope: !6407)
!6561 = !DILocation(line: 888, column: 20, scope: !6562)
!6562 = distinct !DILexicalBlock(scope: !6407, file: !3, line: 888, column: 7)
!6563 = !DILocation(line: 888, column: 7, scope: !6562)
!6564 = !DILocation(line: 888, column: 28, scope: !6562)
!6565 = !DILocation(line: 888, column: 7, scope: !6407)
!6566 = !DILocation(line: 889, column: 5, scope: !6562)
!6567 = !DILocation(line: 891, column: 25, scope: !6568)
!6568 = distinct !DILexicalBlock(scope: !6407, file: !3, line: 891, column: 7)
!6569 = !DILocation(line: 891, column: 7, scope: !6568)
!6570 = !DILocation(line: 891, column: 33, scope: !6568)
!6571 = !DILocation(line: 892, column: 7, scope: !6568)
!6572 = !DILocation(line: 892, column: 43, scope: !6568)
!6573 = !DILocation(line: 892, column: 26, scope: !6568)
!6574 = !DILocation(line: 892, column: 11, scope: !6568)
!6575 = !DILocation(line: 891, column: 7, scope: !6407)
!6576 = !DILocation(line: 893, column: 5, scope: !6568)
!6577 = !DILocation(line: 895, column: 27, scope: !6407)
!6578 = !DILocation(line: 895, column: 10, scope: !6407)
!6579 = !DILocation(line: 895, column: 8, scope: !6407)
!6580 = !DILocation(line: 896, column: 34, scope: !6581)
!6581 = distinct !DILexicalBlock(scope: !6407, file: !3, line: 896, column: 7)
!6582 = !DILocation(line: 896, column: 8, scope: !6581)
!6583 = !DILocation(line: 896, column: 7, scope: !6407)
!6584 = !DILocation(line: 897, column: 5, scope: !6581)
!6585 = !DILocation(line: 899, column: 9, scope: !6407)
!6586 = !DILocation(line: 899, column: 7, scope: !6407)
!6587 = !DILocation(line: 900, column: 26, scope: !6588)
!6588 = distinct !DILexicalBlock(scope: !6407, file: !3, line: 900, column: 7)
!6589 = !DILocation(line: 900, column: 8, scope: !6588)
!6590 = !DILocation(line: 901, column: 7, scope: !6588)
!6591 = !DILocation(line: 901, column: 34, scope: !6588)
!6592 = !DILocation(line: 901, column: 10, scope: !6588)
!6593 = !DILocation(line: 901, column: 39, scope: !6588)
!6594 = !DILocation(line: 902, column: 7, scope: !6588)
!6595 = !DILocation(line: 902, column: 45, scope: !6588)
!6596 = !DILocation(line: 902, column: 25, scope: !6588)
!6597 = !DILocation(line: 902, column: 11, scope: !6588)
!6598 = !DILocation(line: 900, column: 7, scope: !6407)
!6599 = !DILocation(line: 903, column: 5, scope: !6588)
!6600 = !DILocation(line: 905, column: 30, scope: !6407)
!6601 = !DILocation(line: 905, column: 10, scope: !6407)
!6602 = !DILocation(line: 905, column: 8, scope: !6407)
!6603 = !DILocation(line: 906, column: 34, scope: !6604)
!6604 = distinct !DILexicalBlock(scope: !6407, file: !3, line: 906, column: 7)
!6605 = !DILocation(line: 906, column: 8, scope: !6604)
!6606 = !DILocation(line: 906, column: 7, scope: !6407)
!6607 = !DILocation(line: 907, column: 5, scope: !6604)
!6608 = !DILocation(line: 909, column: 9, scope: !6407)
!6609 = !DILocation(line: 909, column: 7, scope: !6407)
!6610 = !DILocation(line: 911, column: 25, scope: !6611)
!6611 = distinct !DILexicalBlock(scope: !6407, file: !3, line: 911, column: 7)
!6612 = !DILocation(line: 911, column: 7, scope: !6611)
!6613 = !DILocation(line: 912, column: 7, scope: !6611)
!6614 = !DILocation(line: 912, column: 10, scope: !6611)
!6615 = !DILocation(line: 911, column: 7, scope: !6407)
!6616 = !DILocation(line: 914, column: 34, scope: !6617)
!6617 = distinct !DILexicalBlock(scope: !6611, file: !3, line: 913, column: 5)
!6618 = !DILocation(line: 914, column: 14, scope: !6617)
!6619 = !DILocation(line: 914, column: 12, scope: !6617)
!6620 = !DILocation(line: 915, column: 38, scope: !6621)
!6621 = distinct !DILexicalBlock(scope: !6617, file: !3, line: 915, column: 11)
!6622 = !DILocation(line: 915, column: 12, scope: !6621)
!6623 = !DILocation(line: 915, column: 11, scope: !6617)
!6624 = !DILocation(line: 916, column: 2, scope: !6621)
!6625 = !DILocation(line: 917, column: 13, scope: !6617)
!6626 = !DILocation(line: 917, column: 11, scope: !6617)
!6627 = !DILocation(line: 918, column: 5, scope: !6617)
!6628 = !DILocation(line: 920, column: 46, scope: !6407)
!6629 = !DILocation(line: 920, column: 10, scope: !6407)
!6630 = !DILocation(line: 920, column: 8, scope: !6407)
!6631 = !DILocation(line: 924, column: 7, scope: !6632)
!6632 = distinct !DILexicalBlock(scope: !6407, file: !3, line: 924, column: 7)
!6633 = !DILocation(line: 924, column: 14, scope: !6632)
!6634 = !DILocation(line: 924, column: 11, scope: !6632)
!6635 = !DILocation(line: 924, column: 7, scope: !6407)
!6636 = !DILocation(line: 925, column: 5, scope: !6632)
!6637 = !DILocation(line: 927, column: 37, scope: !6407)
!6638 = !DILocation(line: 927, column: 43, scope: !6407)
!6639 = !DILocation(line: 927, column: 11, scope: !6407)
!6640 = !DILocation(line: 927, column: 9, scope: !6407)
!6641 = !DILocation(line: 928, column: 7, scope: !6642)
!6642 = distinct !DILexicalBlock(scope: !6407, file: !3, line: 928, column: 7)
!6643 = !DILocation(line: 928, column: 13, scope: !6642)
!6644 = !DILocation(line: 928, column: 18, scope: !6642)
!6645 = !DILocation(line: 928, column: 45, scope: !6642)
!6646 = !DILocation(line: 928, column: 51, scope: !6642)
!6647 = !DILocation(line: 928, column: 22, scope: !6642)
!6648 = !DILocation(line: 928, column: 7, scope: !6407)
!6649 = !DILocation(line: 929, column: 26, scope: !6642)
!6650 = !DILocation(line: 929, column: 32, scope: !6642)
!6651 = !DILocation(line: 929, column: 39, scope: !6642)
!6652 = !DILocation(line: 929, column: 5, scope: !6642)
!6653 = !DILocation(line: 931, column: 3, scope: !6407)
!6654 = !DILocation(line: 932, column: 1, scope: !6407)
!6655 = distinct !DISubprogram(name: "gimple_call_fn", scope: !603, file: !603, line: 1911, type: !4594, scopeLine: 1912, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2371)
!6656 = !DILocalVariable(name: "gs", arg: 1, scope: !6655, file: !603, line: 1911, type: !2734)
!6657 = !DILocation(line: 1911, column: 30, scope: !6655)
!6658 = !DILocation(line: 1914, column: 21, scope: !6655)
!6659 = !DILocation(line: 1914, column: 10, scope: !6655)
!6660 = !DILocation(line: 1914, column: 3, scope: !6655)
!6661 = distinct !DISubprogram(name: "ipa_note_param_call", scope: !3, file: !3, line: 744, type: !6662, scopeLine: 746, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2371)
!6662 = !DISubroutineType(types: !6663)
!6663 = !{null, !2222, !829, !1046}
!6664 = !DILocalVariable(name: "info", arg: 1, scope: !6661, file: !3, line: 744, type: !2222)
!6665 = !DILocation(line: 744, column: 46, scope: !6661)
!6666 = !DILocalVariable(name: "formal_id", arg: 2, scope: !6661, file: !3, line: 744, type: !829)
!6667 = !DILocation(line: 744, column: 56, scope: !6661)
!6668 = !DILocalVariable(name: "stmt", arg: 3, scope: !6661, file: !3, line: 745, type: !1046)
!6669 = !DILocation(line: 745, column: 15, scope: !6661)
!6670 = !DILocalVariable(name: "note", scope: !6661, file: !3, line: 747, type: !2228)
!6671 = !DILocation(line: 747, column: 31, scope: !6661)
!6672 = !DILocalVariable(name: "bb", scope: !6661, file: !3, line: 748, type: !1009)
!6673 = !DILocation(line: 748, column: 15, scope: !6661)
!6674 = !DILocation(line: 748, column: 31, scope: !6661)
!6675 = !DILocation(line: 748, column: 20, scope: !6661)
!6676 = !DILocation(line: 750, column: 10, scope: !6661)
!6677 = !DILocation(line: 750, column: 8, scope: !6661)
!6678 = !DILocation(line: 751, column: 21, scope: !6661)
!6679 = !DILocation(line: 751, column: 3, scope: !6661)
!6680 = !DILocation(line: 751, column: 9, scope: !6661)
!6681 = !DILocation(line: 751, column: 19, scope: !6661)
!6682 = !DILocation(line: 752, column: 16, scope: !6661)
!6683 = !DILocation(line: 752, column: 3, scope: !6661)
!6684 = !DILocation(line: 752, column: 9, scope: !6661)
!6685 = !DILocation(line: 752, column: 14, scope: !6661)
!6686 = !DILocation(line: 753, column: 36, scope: !6661)
!6687 = !DILocation(line: 753, column: 24, scope: !6661)
!6688 = !DILocation(line: 753, column: 3, scope: !6661)
!6689 = !DILocation(line: 753, column: 9, scope: !6661)
!6690 = !DILocation(line: 753, column: 22, scope: !6661)
!6691 = !DILocation(line: 754, column: 17, scope: !6661)
!6692 = !DILocation(line: 754, column: 21, scope: !6661)
!6693 = !DILocation(line: 754, column: 3, scope: !6661)
!6694 = !DILocation(line: 754, column: 9, scope: !6661)
!6695 = !DILocation(line: 754, column: 15, scope: !6661)
!6696 = !DILocation(line: 755, column: 53, scope: !6661)
!6697 = !DILocation(line: 755, column: 76, scope: !6661)
!6698 = !DILocation(line: 755, column: 21, scope: !6661)
!6699 = !DILocation(line: 755, column: 3, scope: !6661)
!6700 = !DILocation(line: 755, column: 9, scope: !6661)
!6701 = !DILocation(line: 755, column: 19, scope: !6661)
!6702 = !DILocation(line: 756, column: 21, scope: !6661)
!6703 = !DILocation(line: 756, column: 25, scope: !6661)
!6704 = !DILocation(line: 756, column: 3, scope: !6661)
!6705 = !DILocation(line: 756, column: 9, scope: !6661)
!6706 = !DILocation(line: 756, column: 19, scope: !6661)
!6707 = !DILocation(line: 758, column: 16, scope: !6661)
!6708 = !DILocation(line: 758, column: 22, scope: !6661)
!6709 = !DILocation(line: 758, column: 3, scope: !6661)
!6710 = !DILocation(line: 758, column: 9, scope: !6661)
!6711 = !DILocation(line: 758, column: 14, scope: !6661)
!6712 = !DILocation(line: 759, column: 23, scope: !6661)
!6713 = !DILocation(line: 759, column: 3, scope: !6661)
!6714 = !DILocation(line: 759, column: 9, scope: !6661)
!6715 = !DILocation(line: 759, column: 21, scope: !6661)
!6716 = !DILocation(line: 761, column: 3, scope: !6661)
!6717 = distinct !DISubprogram(name: "gimple_phi_num_args", scope: !603, file: !603, line: 3061, type: !2742, scopeLine: 3062, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2371)
!6718 = !DILocalVariable(name: "gs", arg: 1, scope: !6717, file: !603, line: 3061, type: !2734)
!6719 = !DILocation(line: 3061, column: 35, scope: !6717)
!6720 = !DILocation(line: 3064, column: 10, scope: !6717)
!6721 = !DILocation(line: 3064, column: 14, scope: !6717)
!6722 = !DILocation(line: 3064, column: 25, scope: !6717)
!6723 = !DILocation(line: 3064, column: 3, scope: !6717)
!6724 = distinct !DISubprogram(name: "get_use_from_ptr", scope: !6725, file: !6725, line: 427, type: !6726, scopeLine: 428, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2371)
!6725 = !DIFile(filename: "./tree-flow-inline.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!6726 = !DISubroutineType(types: !6727)
!6727 = !{!748, !6728}
!6728 = !DIDerivedType(tag: DW_TAG_typedef, name: "use_operand_p", file: !1077, line: 30, baseType: !6729)
!6729 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6730, size: 64)
!6730 = !DIDerivedType(tag: DW_TAG_typedef, name: "ssa_use_operand_t", file: !6, line: 1893, baseType: !1088)
!6731 = !DILocalVariable(name: "use", arg: 1, scope: !6724, file: !6725, line: 427, type: !6728)
!6732 = !DILocation(line: 427, column: 33, scope: !6724)
!6733 = !DILocation(line: 429, column: 12, scope: !6724)
!6734 = !DILocation(line: 429, column: 17, scope: !6724)
!6735 = !DILocation(line: 429, column: 10, scope: !6724)
!6736 = !DILocation(line: 429, column: 3, scope: !6724)
!6737 = distinct !DISubprogram(name: "gimple_phi_arg_imm_use_ptr", scope: !6725, file: !6725, line: 442, type: !6738, scopeLine: 443, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2371)
!6738 = !DISubroutineType(types: !6739)
!6739 = !{!6728, !1046, !829}
!6740 = !DILocalVariable(name: "gs", arg: 1, scope: !6737, file: !6725, line: 442, type: !1046)
!6741 = !DILocation(line: 442, column: 36, scope: !6737)
!6742 = !DILocalVariable(name: "i", arg: 2, scope: !6737, file: !6725, line: 442, type: !829)
!6743 = !DILocation(line: 442, column: 44, scope: !6737)
!6744 = !DILocation(line: 444, column: 27, scope: !6737)
!6745 = !DILocation(line: 444, column: 31, scope: !6737)
!6746 = !DILocation(line: 444, column: 11, scope: !6737)
!6747 = !DILocation(line: 444, column: 35, scope: !6737)
!6748 = !DILocation(line: 444, column: 3, scope: !6737)
!6749 = distinct !DISubprogram(name: "ipa_is_ssa_with_stmt_def", scope: !3, file: !3, line: 730, type: !6750, scopeLine: 731, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2371)
!6750 = !DISubroutineType(types: !6751)
!6751 = !{!852, !748}
!6752 = !DILocalVariable(name: "t", arg: 1, scope: !6749, file: !3, line: 730, type: !748)
!6753 = !DILocation(line: 730, column: 32, scope: !6749)
!6754 = !DILocation(line: 732, column: 7, scope: !6755)
!6755 = distinct !DILexicalBlock(scope: !6749, file: !3, line: 732, column: 7)
!6756 = !DILocation(line: 732, column: 21, scope: !6755)
!6757 = !DILocation(line: 733, column: 7, scope: !6755)
!6758 = !DILocation(line: 733, column: 11, scope: !6755)
!6759 = !DILocation(line: 732, column: 7, scope: !6749)
!6760 = !DILocation(line: 734, column: 5, scope: !6755)
!6761 = !DILocation(line: 736, column: 5, scope: !6755)
!6762 = !DILocation(line: 737, column: 1, scope: !6749)
!6763 = distinct !DISubprogram(name: "ipa_get_stmt_member_ptr_load_param", scope: !3, file: !3, line: 716, type: !6764, scopeLine: 717, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2371)
!6764 = !DISubroutineType(types: !6765)
!6765 = !{!748, !1046, !852}
!6766 = !DILocalVariable(name: "stmt", arg: 1, scope: !6763, file: !3, line: 716, type: !1046)
!6767 = !DILocation(line: 716, column: 44, scope: !6763)
!6768 = !DILocalVariable(name: "use_delta", arg: 2, scope: !6763, file: !3, line: 716, type: !852)
!6769 = !DILocation(line: 716, column: 55, scope: !6763)
!6770 = !DILocalVariable(name: "rhs", scope: !6763, file: !3, line: 718, type: !748)
!6771 = !DILocation(line: 718, column: 8, scope: !6763)
!6772 = !DILocation(line: 720, column: 32, scope: !6773)
!6773 = distinct !DILexicalBlock(scope: !6763, file: !3, line: 720, column: 7)
!6774 = !DILocation(line: 720, column: 8, scope: !6773)
!6775 = !DILocation(line: 720, column: 7, scope: !6763)
!6776 = !DILocation(line: 721, column: 5, scope: !6773)
!6777 = !DILocation(line: 723, column: 29, scope: !6763)
!6778 = !DILocation(line: 723, column: 9, scope: !6763)
!6779 = !DILocation(line: 723, column: 7, scope: !6763)
!6780 = !DILocation(line: 724, column: 41, scope: !6763)
!6781 = !DILocation(line: 724, column: 46, scope: !6763)
!6782 = !DILocation(line: 724, column: 10, scope: !6763)
!6783 = !DILocation(line: 724, column: 3, scope: !6763)
!6784 = !DILocation(line: 725, column: 1, scope: !6763)
!6785 = distinct !DISubprogram(name: "gimple_bb", scope: !603, file: !603, line: 1112, type: !6786, scopeLine: 1113, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2371)
!6786 = !DISubroutineType(types: !6787)
!6787 = !{!1010, !2734}
!6788 = !DILocalVariable(name: "g", arg: 1, scope: !6785, file: !603, line: 1112, type: !2734)
!6789 = !DILocation(line: 1112, column: 25, scope: !6785)
!6790 = !DILocation(line: 1114, column: 10, scope: !6785)
!6791 = !DILocation(line: 1114, column: 13, scope: !6785)
!6792 = !DILocation(line: 1114, column: 20, scope: !6785)
!6793 = !DILocation(line: 1114, column: 3, scope: !6785)
!6794 = distinct !DISubprogram(name: "single_pred_p", scope: !202, file: !202, line: 634, type: !6795, scopeLine: 635, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2371)
!6795 = !DISubroutineType(types: !6796)
!6796 = !{!852, !5741}
!6797 = !DILocalVariable(name: "bb", arg: 1, scope: !6794, file: !202, line: 634, type: !5741)
!6798 = !DILocation(line: 634, column: 34, scope: !6794)
!6799 = !DILocation(line: 636, column: 10, scope: !6794)
!6800 = !DILocation(line: 636, column: 33, scope: !6794)
!6801 = !DILocation(line: 636, column: 3, scope: !6794)
!6802 = distinct !DISubprogram(name: "single_succ_p", scope: !202, file: !202, line: 626, type: !6795, scopeLine: 627, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2371)
!6803 = !DILocalVariable(name: "bb", arg: 1, scope: !6802, file: !202, line: 626, type: !5741)
!6804 = !DILocation(line: 626, column: 34, scope: !6802)
!6805 = !DILocation(line: 628, column: 10, scope: !6802)
!6806 = !DILocation(line: 628, column: 33, scope: !6802)
!6807 = !DILocation(line: 628, column: 3, scope: !6802)
!6808 = distinct !DISubprogram(name: "single_pred", scope: !202, file: !202, line: 672, type: !6809, scopeLine: 673, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2371)
!6809 = !DISubroutineType(types: !6810)
!6810 = !{!1009, !5741}
!6811 = !DILocalVariable(name: "bb", arg: 1, scope: !6808, file: !202, line: 672, type: !5741)
!6812 = !DILocation(line: 672, column: 32, scope: !6808)
!6813 = !DILocation(line: 674, column: 28, scope: !6808)
!6814 = !DILocation(line: 674, column: 10, scope: !6808)
!6815 = !DILocation(line: 674, column: 33, scope: !6808)
!6816 = !DILocation(line: 674, column: 3, scope: !6808)
!6817 = distinct !DISubprogram(name: "single_succ", scope: !202, file: !202, line: 663, type: !6809, scopeLine: 664, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2371)
!6818 = !DILocalVariable(name: "bb", arg: 1, scope: !6817, file: !202, line: 663, type: !5741)
!6819 = !DILocation(line: 663, column: 32, scope: !6817)
!6820 = !DILocation(line: 665, column: 28, scope: !6817)
!6821 = !DILocation(line: 665, column: 10, scope: !6817)
!6822 = !DILocation(line: 665, column: 33, scope: !6817)
!6823 = !DILocation(line: 665, column: 3, scope: !6817)
!6824 = distinct !DISubprogram(name: "gimple_cond_code", scope: !603, file: !603, line: 2221, type: !6032, scopeLine: 2222, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2371)
!6825 = !DILocalVariable(name: "gs", arg: 1, scope: !6824, file: !603, line: 2221, type: !2734)
!6826 = !DILocation(line: 2221, column: 32, scope: !6824)
!6827 = !DILocation(line: 2224, column: 27, scope: !6824)
!6828 = !DILocation(line: 2224, column: 31, scope: !6824)
!6829 = !DILocation(line: 2224, column: 38, scope: !6824)
!6830 = !DILocation(line: 2224, column: 3, scope: !6824)
!6831 = distinct !DISubprogram(name: "gimple_cond_rhs", scope: !603, file: !603, line: 2271, type: !4594, scopeLine: 2272, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2371)
!6832 = !DILocalVariable(name: "gs", arg: 1, scope: !6831, file: !603, line: 2271, type: !2734)
!6833 = !DILocation(line: 2271, column: 31, scope: !6831)
!6834 = !DILocation(line: 2274, column: 21, scope: !6831)
!6835 = !DILocation(line: 2274, column: 10, scope: !6831)
!6836 = !DILocation(line: 2274, column: 3, scope: !6831)
!6837 = distinct !DISubprogram(name: "gimple_cond_lhs", scope: !603, file: !603, line: 2241, type: !4594, scopeLine: 2242, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2371)
!6838 = !DILocalVariable(name: "gs", arg: 1, scope: !6837, file: !603, line: 2241, type: !2734)
!6839 = !DILocation(line: 2241, column: 31, scope: !6837)
!6840 = !DILocation(line: 2244, column: 21, scope: !6837)
!6841 = !DILocation(line: 2244, column: 10, scope: !6837)
!6842 = !DILocation(line: 2244, column: 3, scope: !6837)
!6843 = distinct !DISubprogram(name: "gimple_uid", scope: !603, file: !603, line: 1265, type: !2742, scopeLine: 1266, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2371)
!6844 = !DILocalVariable(name: "g", arg: 1, scope: !6843, file: !603, line: 1265, type: !2734)
!6845 = !DILocation(line: 1265, column: 26, scope: !6843)
!6846 = !DILocation(line: 1267, column: 10, scope: !6843)
!6847 = !DILocation(line: 1267, column: 13, scope: !6843)
!6848 = !DILocation(line: 1267, column: 20, scope: !6843)
!6849 = !DILocation(line: 1267, column: 3, scope: !6843)
!6850 = distinct !DISubprogram(name: "gimple_phi_arg", scope: !603, file: !603, line: 3100, type: !6851, scopeLine: 3101, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2371)
!6851 = !DISubroutineType(types: !6852)
!6852 = !{!6853, !1046, !7}
!6853 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1150, size: 64)
!6854 = !DILocalVariable(name: "gs", arg: 1, scope: !6850, file: !603, line: 3100, type: !1046)
!6855 = !DILocation(line: 3100, column: 24, scope: !6850)
!6856 = !DILocalVariable(name: "index", arg: 2, scope: !6850, file: !603, line: 3100, type: !7)
!6857 = !DILocation(line: 3100, column: 37, scope: !6850)
!6858 = !DILocation(line: 3103, column: 3, scope: !6850)
!6859 = !DILocation(line: 3104, column: 12, scope: !6850)
!6860 = !DILocation(line: 3104, column: 16, scope: !6850)
!6861 = !DILocation(line: 3104, column: 27, scope: !6850)
!6862 = !DILocation(line: 3104, column: 32, scope: !6850)
!6863 = !DILocation(line: 3104, column: 3, scope: !6850)
!6864 = distinct !DISubprogram(name: "ipa_get_member_ptr_load_param", scope: !3, file: !3, line: 691, type: !6865, scopeLine: 692, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2371)
!6865 = !DISubroutineType(types: !6866)
!6866 = !{!748, !748, !852}
!6867 = !DILocalVariable(name: "rhs", arg: 1, scope: !6864, file: !3, line: 691, type: !748)
!6868 = !DILocation(line: 691, column: 37, scope: !6864)
!6869 = !DILocalVariable(name: "use_delta", arg: 2, scope: !6864, file: !3, line: 691, type: !852)
!6870 = !DILocation(line: 691, column: 47, scope: !6864)
!6871 = !DILocalVariable(name: "rec", scope: !6864, file: !3, line: 693, type: !748)
!6872 = !DILocation(line: 693, column: 8, scope: !6864)
!6873 = !DILocalVariable(name: "fld", scope: !6864, file: !3, line: 693, type: !748)
!6874 = !DILocation(line: 693, column: 13, scope: !6864)
!6875 = !DILocalVariable(name: "ptr_field", scope: !6864, file: !3, line: 694, type: !748)
!6876 = !DILocation(line: 694, column: 8, scope: !6864)
!6877 = !DILocalVariable(name: "delta_field", scope: !6864, file: !3, line: 695, type: !748)
!6878 = !DILocation(line: 695, column: 8, scope: !6864)
!6879 = !DILocation(line: 697, column: 7, scope: !6880)
!6880 = distinct !DILexicalBlock(scope: !6864, file: !3, line: 697, column: 7)
!6881 = !DILocation(line: 697, column: 23, scope: !6880)
!6882 = !DILocation(line: 697, column: 7, scope: !6864)
!6883 = !DILocation(line: 698, column: 5, scope: !6880)
!6884 = !DILocation(line: 700, column: 9, scope: !6864)
!6885 = !DILocation(line: 700, column: 7, scope: !6864)
!6886 = !DILocation(line: 701, column: 7, scope: !6887)
!6887 = distinct !DILexicalBlock(scope: !6864, file: !3, line: 701, column: 7)
!6888 = !DILocation(line: 701, column: 23, scope: !6887)
!6889 = !DILocation(line: 702, column: 7, scope: !6887)
!6890 = !DILocation(line: 702, column: 35, scope: !6887)
!6891 = !DILocation(line: 702, column: 11, scope: !6887)
!6892 = !DILocation(line: 701, column: 7, scope: !6864)
!6893 = !DILocation(line: 703, column: 5, scope: !6887)
!6894 = !DILocation(line: 705, column: 9, scope: !6864)
!6895 = !DILocation(line: 705, column: 7, scope: !6864)
!6896 = !DILocation(line: 706, column: 7, scope: !6897)
!6897 = distinct !DILexicalBlock(scope: !6864, file: !3, line: 706, column: 7)
!6898 = !DILocation(line: 706, column: 7, scope: !6864)
!6899 = !DILocation(line: 706, column: 20, scope: !6897)
!6900 = !DILocation(line: 706, column: 27, scope: !6897)
!6901 = !DILocation(line: 706, column: 24, scope: !6897)
!6902 = !DILocation(line: 706, column: 43, scope: !6897)
!6903 = !DILocation(line: 706, column: 50, scope: !6897)
!6904 = !DILocation(line: 706, column: 47, scope: !6897)
!6905 = !DILocation(line: 707, column: 12, scope: !6897)
!6906 = !DILocation(line: 707, column: 5, scope: !6897)
!6907 = !DILocation(line: 709, column: 5, scope: !6897)
!6908 = !DILocation(line: 710, column: 1, scope: !6864)
!6909 = distinct !DISubprogram(name: "VEC_edge_base_length", scope: !202, file: !202, line: 150, type: !6910, scopeLine: 150, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2371)
!6910 = !DISubroutineType(types: !6911)
!6911 = !{!7, !6912}
!6912 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6913, size: 64)
!6913 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1019)
!6914 = !DILocalVariable(name: "vec_", arg: 1, scope: !6909, file: !202, line: 150, type: !6912)
!6915 = !DILocation(line: 150, column: 1, scope: !6909)
!6916 = distinct !DISubprogram(name: "single_pred_edge", scope: !202, file: !202, line: 653, type: !6917, scopeLine: 654, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2371)
!6917 = !DISubroutineType(types: !6918)
!6918 = !{!1026, !5741}
!6919 = !DILocalVariable(name: "bb", arg: 1, scope: !6916, file: !202, line: 653, type: !5741)
!6920 = !DILocation(line: 653, column: 37, scope: !6916)
!6921 = !DILocation(line: 655, column: 3, scope: !6916)
!6922 = !DILocation(line: 656, column: 10, scope: !6916)
!6923 = !DILocation(line: 656, column: 3, scope: !6916)
!6924 = distinct !DISubprogram(name: "VEC_edge_base_index", scope: !202, file: !202, line: 150, type: !6925, scopeLine: 150, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2371)
!6925 = !DISubroutineType(types: !6926)
!6926 = !{!1026, !6912, !7}
!6927 = !DILocalVariable(name: "vec_", arg: 1, scope: !6924, file: !202, line: 150, type: !6912)
!6928 = !DILocation(line: 150, column: 1, scope: !6924)
!6929 = !DILocalVariable(name: "ix_", arg: 2, scope: !6924, file: !202, line: 150, type: !7)
!6930 = !DILocation(line: 0, scope: !6924)
!6931 = distinct !DISubprogram(name: "single_succ_edge", scope: !202, file: !202, line: 643, type: !6917, scopeLine: 644, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2371)
!6932 = !DILocalVariable(name: "bb", arg: 1, scope: !6931, file: !202, line: 643, type: !5741)
!6933 = !DILocation(line: 643, column: 37, scope: !6931)
!6934 = !DILocation(line: 645, column: 3, scope: !6931)
!6935 = !DILocation(line: 646, column: 10, scope: !6931)
!6936 = !DILocation(line: 646, column: 3, scope: !6931)
!6937 = distinct !DISubprogram(name: "update_call_notes_after_inlining", scope: !3, file: !3, line: 1047, type: !3446, scopeLine: 1050, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2371)
!6938 = !DILocalVariable(name: "cs", arg: 1, scope: !6937, file: !3, line: 1047, type: !1930)
!6939 = !DILocation(line: 1047, column: 55, scope: !6937)
!6940 = !DILocalVariable(name: "node", arg: 2, scope: !6937, file: !3, line: 1048, type: !744)
!6941 = !DILocation(line: 1048, column: 27, scope: !6937)
!6942 = !DILocalVariable(name: "new_edges", arg: 3, scope: !6937, file: !3, line: 1049, type: !3424)
!6943 = !DILocation(line: 1049, column: 35, scope: !6937)
!6944 = !DILocalVariable(name: "info", scope: !6937, file: !3, line: 1051, type: !2222)
!6945 = !DILocation(line: 1051, column: 27, scope: !6937)
!6946 = !DILocation(line: 1051, column: 34, scope: !6937)
!6947 = !DILocalVariable(name: "top", scope: !6937, file: !3, line: 1052, type: !2772)
!6948 = !DILocation(line: 1052, column: 25, scope: !6937)
!6949 = !DILocation(line: 1052, column: 31, scope: !6937)
!6950 = !DILocalVariable(name: "nt", scope: !6937, file: !3, line: 1053, type: !2228)
!6951 = !DILocation(line: 1053, column: 31, scope: !6937)
!6952 = !DILocalVariable(name: "res", scope: !6937, file: !3, line: 1054, type: !852)
!6953 = !DILocation(line: 1054, column: 8, scope: !6937)
!6954 = !DILocation(line: 1056, column: 13, scope: !6955)
!6955 = distinct !DILexicalBlock(scope: !6937, file: !3, line: 1056, column: 3)
!6956 = !DILocation(line: 1056, column: 19, scope: !6955)
!6957 = !DILocation(line: 1056, column: 11, scope: !6955)
!6958 = !DILocation(line: 1056, column: 8, scope: !6955)
!6959 = !DILocation(line: 1056, column: 32, scope: !6960)
!6960 = distinct !DILexicalBlock(scope: !6955, file: !3, line: 1056, column: 3)
!6961 = !DILocation(line: 1056, column: 3, scope: !6955)
!6962 = !DILocalVariable(name: "jfunc", scope: !6963, file: !3, line: 1058, type: !2197)
!6963 = distinct !DILexicalBlock(scope: !6960, file: !3, line: 1057, column: 5)
!6964 = !DILocation(line: 1058, column: 29, scope: !6963)
!6965 = !DILocation(line: 1060, column: 11, scope: !6966)
!6966 = distinct !DILexicalBlock(scope: !6963, file: !3, line: 1060, column: 11)
!6967 = !DILocation(line: 1060, column: 15, scope: !6966)
!6968 = !DILocation(line: 1060, column: 11, scope: !6963)
!6969 = !DILocation(line: 1061, column: 2, scope: !6966)
!6970 = !DILocation(line: 1064, column: 11, scope: !6971)
!6971 = distinct !DILexicalBlock(scope: !6963, file: !3, line: 1064, column: 11)
!6972 = !DILocation(line: 1064, column: 15, scope: !6971)
!6973 = !DILocation(line: 1064, column: 55, scope: !6971)
!6974 = !DILocation(line: 1064, column: 28, scope: !6971)
!6975 = !DILocation(line: 1064, column: 25, scope: !6971)
!6976 = !DILocation(line: 1064, column: 11, scope: !6963)
!6977 = !DILocation(line: 1066, column: 4, scope: !6978)
!6978 = distinct !DILexicalBlock(scope: !6971, file: !3, line: 1065, column: 2)
!6979 = !DILocation(line: 1066, column: 8, scope: !6978)
!6980 = !DILocation(line: 1066, column: 18, scope: !6978)
!6981 = !DILocation(line: 1067, column: 4, scope: !6978)
!6982 = !DILocation(line: 1070, column: 38, scope: !6963)
!6983 = !DILocation(line: 1070, column: 43, scope: !6963)
!6984 = !DILocation(line: 1070, column: 47, scope: !6963)
!6985 = !DILocation(line: 1070, column: 15, scope: !6963)
!6986 = !DILocation(line: 1070, column: 13, scope: !6963)
!6987 = !DILocation(line: 1071, column: 11, scope: !6988)
!6988 = distinct !DILexicalBlock(scope: !6963, file: !3, line: 1071, column: 11)
!6989 = !DILocation(line: 1071, column: 18, scope: !6988)
!6990 = !DILocation(line: 1071, column: 23, scope: !6988)
!6991 = !DILocation(line: 1072, column: 4, scope: !6988)
!6992 = !DILocation(line: 1072, column: 7, scope: !6988)
!6993 = !DILocation(line: 1072, column: 14, scope: !6988)
!6994 = !DILocation(line: 1072, column: 20, scope: !6988)
!6995 = !DILocation(line: 1072, column: 33, scope: !6988)
!6996 = !DILocation(line: 1072, column: 43, scope: !6988)
!6997 = !DILocation(line: 1071, column: 11, scope: !6963)
!6998 = !DILocation(line: 1073, column: 18, scope: !6988)
!6999 = !DILocation(line: 1073, column: 25, scope: !6988)
!7000 = !DILocation(line: 1073, column: 31, scope: !6988)
!7001 = !DILocation(line: 1073, column: 44, scope: !6988)
!7002 = !DILocation(line: 1073, column: 2, scope: !6988)
!7003 = !DILocation(line: 1073, column: 6, scope: !6988)
!7004 = !DILocation(line: 1073, column: 16, scope: !6988)
!7005 = !DILocation(line: 1074, column: 16, scope: !7006)
!7006 = distinct !DILexicalBlock(scope: !6988, file: !3, line: 1074, column: 16)
!7007 = !DILocation(line: 1074, column: 23, scope: !7006)
!7008 = !DILocation(line: 1074, column: 28, scope: !7006)
!7009 = !DILocation(line: 1075, column: 9, scope: !7006)
!7010 = !DILocation(line: 1075, column: 12, scope: !7006)
!7011 = !DILocation(line: 1075, column: 19, scope: !7006)
!7012 = !DILocation(line: 1075, column: 24, scope: !7006)
!7013 = !DILocation(line: 1074, column: 16, scope: !6988)
!7014 = !DILocalVariable(name: "callee", scope: !7015, file: !3, line: 1077, type: !744)
!7015 = distinct !DILexicalBlock(scope: !7006, file: !3, line: 1076, column: 2)
!7016 = !DILocation(line: 1077, column: 24, scope: !7015)
!7017 = !DILocalVariable(name: "new_indirect_edge", scope: !7015, file: !3, line: 1078, type: !1930)
!7018 = !DILocation(line: 1078, column: 24, scope: !7015)
!7019 = !DILocalVariable(name: "decl", scope: !7015, file: !3, line: 1079, type: !748)
!7020 = !DILocation(line: 1079, column: 9, scope: !7015)
!7021 = !DILocation(line: 1081, column: 4, scope: !7015)
!7022 = !DILocation(line: 1081, column: 8, scope: !7015)
!7023 = !DILocation(line: 1081, column: 18, scope: !7015)
!7024 = !DILocation(line: 1082, column: 8, scope: !7025)
!7025 = distinct !DILexicalBlock(scope: !7015, file: !3, line: 1082, column: 8)
!7026 = !DILocation(line: 1082, column: 15, scope: !7025)
!7027 = !DILocation(line: 1082, column: 20, scope: !7025)
!7028 = !DILocation(line: 1082, column: 8, scope: !7015)
!7029 = !DILocation(line: 1083, column: 13, scope: !7025)
!7030 = !DILocation(line: 1083, column: 20, scope: !7025)
!7031 = !DILocation(line: 1083, column: 26, scope: !7025)
!7032 = !DILocation(line: 1083, column: 37, scope: !7025)
!7033 = !DILocation(line: 1083, column: 11, scope: !7025)
!7034 = !DILocation(line: 1083, column: 6, scope: !7025)
!7035 = !DILocation(line: 1085, column: 13, scope: !7025)
!7036 = !DILocation(line: 1085, column: 20, scope: !7025)
!7037 = !DILocation(line: 1085, column: 26, scope: !7025)
!7038 = !DILocation(line: 1085, column: 11, scope: !7025)
!7039 = !DILocation(line: 1087, column: 8, scope: !7040)
!7040 = distinct !DILexicalBlock(scope: !7015, file: !3, line: 1087, column: 8)
!7041 = !DILocation(line: 1087, column: 25, scope: !7040)
!7042 = !DILocation(line: 1087, column: 8, scope: !7015)
!7043 = !DILocation(line: 1088, column: 6, scope: !7040)
!7044 = !DILocation(line: 1089, column: 11, scope: !7015)
!7045 = !DILocation(line: 1089, column: 9, scope: !7015)
!7046 = !DILocation(line: 1091, column: 8, scope: !7047)
!7047 = distinct !DILexicalBlock(scope: !7015, file: !3, line: 1091, column: 8)
!7048 = !DILocation(line: 1091, column: 25, scope: !7047)
!7049 = !DILocation(line: 1091, column: 8, scope: !7015)
!7050 = !DILocation(line: 1092, column: 6, scope: !7047)
!7051 = !DILocation(line: 1093, column: 26, scope: !7015)
!7052 = !DILocation(line: 1093, column: 13, scope: !7015)
!7053 = !DILocation(line: 1093, column: 11, scope: !7015)
!7054 = !DILocation(line: 1094, column: 9, scope: !7055)
!7055 = distinct !DILexicalBlock(scope: !7015, file: !3, line: 1094, column: 8)
!7056 = !DILocation(line: 1094, column: 16, scope: !7055)
!7057 = !DILocation(line: 1094, column: 20, scope: !7055)
!7058 = !DILocation(line: 1094, column: 28, scope: !7055)
!7059 = !DILocation(line: 1094, column: 34, scope: !7055)
!7060 = !DILocation(line: 1094, column: 8, scope: !7015)
!7061 = !DILocation(line: 1095, column: 6, scope: !7055)
!7062 = !DILocation(line: 1097, column: 8, scope: !7015)
!7063 = !DILocation(line: 1098, column: 8, scope: !7064)
!7064 = distinct !DILexicalBlock(scope: !7015, file: !3, line: 1098, column: 8)
!7065 = !DILocation(line: 1098, column: 8, scope: !7015)
!7066 = !DILocation(line: 1099, column: 35, scope: !7064)
!7067 = !DILocation(line: 1099, column: 46, scope: !7064)
!7068 = !DILocation(line: 1099, column: 50, scope: !7064)
!7069 = !DILocation(line: 1099, column: 57, scope: !7064)
!7070 = !DILocation(line: 1099, column: 6, scope: !7064)
!7071 = !DILocation(line: 1101, column: 44, scope: !7015)
!7072 = !DILocation(line: 1101, column: 50, scope: !7015)
!7073 = !DILocation(line: 1101, column: 58, scope: !7015)
!7074 = !DILocation(line: 1101, column: 62, scope: !7015)
!7075 = !DILocation(line: 1102, column: 9, scope: !7015)
!7076 = !DILocation(line: 1102, column: 13, scope: !7015)
!7077 = !DILocation(line: 1102, column: 20, scope: !7015)
!7078 = !DILocation(line: 1102, column: 24, scope: !7015)
!7079 = !DILocation(line: 1103, column: 9, scope: !7015)
!7080 = !DILocation(line: 1103, column: 13, scope: !7015)
!7081 = !DILocation(line: 1101, column: 24, scope: !7015)
!7082 = !DILocation(line: 1101, column: 22, scope: !7015)
!7083 = !DILocation(line: 1104, column: 38, scope: !7015)
!7084 = !DILocation(line: 1104, column: 42, scope: !7015)
!7085 = !DILocation(line: 1104, column: 4, scope: !7015)
!7086 = !DILocation(line: 1104, column: 23, scope: !7015)
!7087 = !DILocation(line: 1104, column: 36, scope: !7015)
!7088 = !DILocation(line: 1105, column: 4, scope: !7015)
!7089 = !DILocation(line: 1105, column: 23, scope: !7015)
!7090 = !DILocation(line: 1105, column: 37, scope: !7015)
!7091 = !DILocation(line: 1106, column: 4, scope: !7015)
!7092 = !DILocation(line: 1107, column: 8, scope: !7093)
!7093 = distinct !DILexicalBlock(scope: !7015, file: !3, line: 1107, column: 8)
!7094 = !DILocation(line: 1107, column: 8, scope: !7015)
!7095 = !DILocation(line: 1108, column: 6, scope: !7093)
!7096 = !DILocation(line: 1109, column: 10, scope: !7015)
!7097 = !DILocation(line: 1109, column: 8, scope: !7015)
!7098 = !DILocation(line: 1110, column: 2, scope: !7015)
!7099 = !DILocation(line: 1115, column: 4, scope: !7100)
!7100 = distinct !DILexicalBlock(scope: !7006, file: !3, line: 1112, column: 2)
!7101 = !DILocation(line: 1116, column: 4, scope: !7100)
!7102 = !DILocation(line: 1116, column: 8, scope: !7100)
!7103 = !DILocation(line: 1116, column: 18, scope: !7100)
!7104 = !DILocation(line: 1118, column: 5, scope: !6963)
!7105 = !DILocation(line: 1056, column: 41, scope: !6960)
!7106 = !DILocation(line: 1056, column: 45, scope: !6960)
!7107 = !DILocation(line: 1056, column: 39, scope: !6960)
!7108 = !DILocation(line: 1056, column: 3, scope: !6960)
!7109 = distinct !{!7109, !6961, !7110}
!7110 = !DILocation(line: 1118, column: 5, scope: !6955)
!7111 = !DILocation(line: 1119, column: 10, scope: !6937)
!7112 = !DILocation(line: 1119, column: 3, scope: !6937)
!7113 = distinct !DISubprogram(name: "update_jump_functions_after_inlining", scope: !3, file: !3, line: 982, type: !7114, scopeLine: 984, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2371)
!7114 = !DISubroutineType(types: !7115)
!7115 = !{null, !1930, !1930}
!7116 = !DILocalVariable(name: "cs", arg: 1, scope: !7113, file: !3, line: 982, type: !1930)
!7117 = !DILocation(line: 982, column: 59, scope: !7113)
!7118 = !DILocalVariable(name: "e", arg: 2, scope: !7113, file: !3, line: 983, type: !1930)
!7119 = !DILocation(line: 983, column: 31, scope: !7113)
!7120 = !DILocalVariable(name: "top", scope: !7113, file: !3, line: 985, type: !2772)
!7121 = !DILocation(line: 985, column: 25, scope: !7113)
!7122 = !DILocation(line: 985, column: 31, scope: !7113)
!7123 = !DILocalVariable(name: "args", scope: !7113, file: !3, line: 986, type: !2772)
!7124 = !DILocation(line: 986, column: 25, scope: !7113)
!7125 = !DILocation(line: 986, column: 32, scope: !7113)
!7126 = !DILocalVariable(name: "count", scope: !7113, file: !3, line: 987, type: !829)
!7127 = !DILocation(line: 987, column: 7, scope: !7113)
!7128 = !DILocation(line: 987, column: 42, scope: !7113)
!7129 = !DILocation(line: 987, column: 15, scope: !7113)
!7130 = !DILocalVariable(name: "i", scope: !7113, file: !3, line: 988, type: !829)
!7131 = !DILocation(line: 988, column: 7, scope: !7113)
!7132 = !DILocation(line: 990, column: 10, scope: !7133)
!7133 = distinct !DILexicalBlock(scope: !7113, file: !3, line: 990, column: 3)
!7134 = !DILocation(line: 990, column: 8, scope: !7133)
!7135 = !DILocation(line: 990, column: 15, scope: !7136)
!7136 = distinct !DILexicalBlock(scope: !7133, file: !3, line: 990, column: 3)
!7137 = !DILocation(line: 990, column: 19, scope: !7136)
!7138 = !DILocation(line: 990, column: 17, scope: !7136)
!7139 = !DILocation(line: 990, column: 3, scope: !7133)
!7140 = !DILocalVariable(name: "src", scope: !7141, file: !3, line: 992, type: !2197)
!7141 = distinct !DILexicalBlock(scope: !7136, file: !3, line: 991, column: 5)
!7142 = !DILocation(line: 992, column: 29, scope: !7141)
!7143 = !DILocalVariable(name: "dst", scope: !7141, file: !3, line: 992, type: !2197)
!7144 = !DILocation(line: 992, column: 35, scope: !7141)
!7145 = !DILocation(line: 992, column: 64, scope: !7141)
!7146 = !DILocation(line: 992, column: 70, scope: !7141)
!7147 = !DILocation(line: 992, column: 41, scope: !7141)
!7148 = !DILocation(line: 994, column: 11, scope: !7149)
!7149 = distinct !DILexicalBlock(scope: !7141, file: !3, line: 994, column: 11)
!7150 = !DILocation(line: 994, column: 16, scope: !7149)
!7151 = !DILocation(line: 994, column: 21, scope: !7149)
!7152 = !DILocation(line: 994, column: 11, scope: !7141)
!7153 = !DILocation(line: 996, column: 4, scope: !7154)
!7154 = distinct !DILexicalBlock(scope: !7149, file: !3, line: 995, column: 2)
!7155 = !DILocation(line: 996, column: 9, scope: !7154)
!7156 = !DILocation(line: 996, column: 14, scope: !7154)
!7157 = !DILocation(line: 997, column: 4, scope: !7154)
!7158 = !DILocation(line: 1000, column: 11, scope: !7159)
!7159 = distinct !DILexicalBlock(scope: !7141, file: !3, line: 1000, column: 11)
!7160 = !DILocation(line: 1000, column: 16, scope: !7159)
!7161 = !DILocation(line: 1000, column: 21, scope: !7159)
!7162 = !DILocation(line: 1000, column: 11, scope: !7141)
!7163 = !DILocation(line: 1001, column: 2, scope: !7159)
!7164 = !DILocation(line: 1005, column: 11, scope: !7165)
!7165 = distinct !DILexicalBlock(scope: !7141, file: !3, line: 1005, column: 11)
!7166 = !DILocation(line: 1005, column: 16, scope: !7165)
!7167 = !DILocation(line: 1005, column: 22, scope: !7165)
!7168 = !DILocation(line: 1005, column: 35, scope: !7165)
!7169 = !DILocation(line: 1005, column: 45, scope: !7165)
!7170 = !DILocation(line: 1006, column: 4, scope: !7165)
!7171 = !DILocation(line: 1006, column: 8, scope: !7165)
!7172 = !DILocation(line: 1006, column: 13, scope: !7165)
!7173 = !DILocation(line: 1006, column: 19, scope: !7165)
!7174 = !DILocation(line: 1006, column: 32, scope: !7165)
!7175 = !DILocation(line: 1007, column: 38, scope: !7165)
!7176 = !DILocation(line: 1007, column: 11, scope: !7165)
!7177 = !DILocation(line: 1007, column: 8, scope: !7165)
!7178 = !DILocation(line: 1005, column: 11, scope: !7141)
!7179 = !DILocation(line: 1009, column: 4, scope: !7180)
!7180 = distinct !DILexicalBlock(scope: !7165, file: !3, line: 1008, column: 2)
!7181 = !DILocation(line: 1009, column: 9, scope: !7180)
!7182 = !DILocation(line: 1009, column: 14, scope: !7180)
!7183 = !DILocation(line: 1010, column: 4, scope: !7180)
!7184 = !DILocation(line: 1013, column: 36, scope: !7141)
!7185 = !DILocation(line: 1013, column: 41, scope: !7141)
!7186 = !DILocation(line: 1013, column: 46, scope: !7141)
!7187 = !DILocation(line: 1013, column: 52, scope: !7141)
!7188 = !DILocation(line: 1013, column: 65, scope: !7141)
!7189 = !DILocation(line: 1013, column: 13, scope: !7141)
!7190 = !DILocation(line: 1013, column: 11, scope: !7141)
!7191 = !DILocation(line: 1014, column: 8, scope: !7141)
!7192 = !DILocation(line: 1014, column: 15, scope: !7141)
!7193 = !DILocation(line: 1014, column: 14, scope: !7141)
!7194 = !DILocation(line: 1015, column: 5, scope: !7141)
!7195 = !DILocation(line: 990, column: 27, scope: !7136)
!7196 = !DILocation(line: 990, column: 3, scope: !7136)
!7197 = distinct !{!7197, !7139, !7198}
!7198 = !DILocation(line: 1015, column: 5, scope: !7133)
!7199 = !DILocation(line: 1016, column: 1, scope: !7113)
!7200 = distinct !DISubprogram(name: "print_edge_addition_message", scope: !3, file: !3, line: 1023, type: !7201, scopeLine: 1026, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2371)
!7201 = !DISubroutineType(types: !7202)
!7202 = !{null, !2794, !2228, !2197, !744}
!7203 = !DILocalVariable(name: "f", arg: 1, scope: !7200, file: !3, line: 1023, type: !2794)
!7204 = !DILocation(line: 1023, column: 36, scope: !7200)
!7205 = !DILocalVariable(name: "nt", arg: 2, scope: !7200, file: !3, line: 1023, type: !2228)
!7206 = !DILocation(line: 1023, column: 67, scope: !7200)
!7207 = !DILocalVariable(name: "jfunc", arg: 3, scope: !7200, file: !3, line: 1024, type: !2197)
!7208 = !DILocation(line: 1024, column: 31, scope: !7200)
!7209 = !DILocalVariable(name: "node", arg: 4, scope: !7200, file: !3, line: 1025, type: !744)
!7210 = !DILocation(line: 1025, column: 29, scope: !7200)
!7211 = !DILocation(line: 1027, column: 12, scope: !7200)
!7212 = !DILocation(line: 1027, column: 3, scope: !7200)
!7213 = !DILocation(line: 1028, column: 7, scope: !7214)
!7214 = distinct !DILexicalBlock(scope: !7200, file: !3, line: 1028, column: 7)
!7215 = !DILocation(line: 1028, column: 14, scope: !7214)
!7216 = !DILocation(line: 1028, column: 19, scope: !7214)
!7217 = !DILocation(line: 1028, column: 7, scope: !7200)
!7218 = !DILocation(line: 1030, column: 25, scope: !7219)
!7219 = distinct !DILexicalBlock(scope: !7214, file: !3, line: 1029, column: 5)
!7220 = !DILocation(line: 1030, column: 32, scope: !7219)
!7221 = !DILocation(line: 1030, column: 39, scope: !7219)
!7222 = !DILocation(line: 1030, column: 45, scope: !7219)
!7223 = !DILocation(line: 1030, column: 56, scope: !7219)
!7224 = !DILocation(line: 1030, column: 7, scope: !7219)
!7225 = !DILocation(line: 1031, column: 25, scope: !7219)
!7226 = !DILocation(line: 1031, column: 34, scope: !7219)
!7227 = !DILocation(line: 1031, column: 41, scope: !7219)
!7228 = !DILocation(line: 1031, column: 47, scope: !7219)
!7229 = !DILocation(line: 1031, column: 58, scope: !7219)
!7230 = !DILocation(line: 1031, column: 7, scope: !7219)
!7231 = !DILocation(line: 1032, column: 5, scope: !7219)
!7232 = !DILocation(line: 1034, column: 22, scope: !7214)
!7233 = !DILocation(line: 1034, column: 29, scope: !7214)
!7234 = !DILocation(line: 1034, column: 36, scope: !7214)
!7235 = !DILocation(line: 1034, column: 42, scope: !7214)
!7236 = !DILocation(line: 1034, column: 5, scope: !7214)
!7237 = !DILocation(line: 1036, column: 12, scope: !7200)
!7238 = !DILocation(line: 1036, column: 46, scope: !7200)
!7239 = !DILocation(line: 1036, column: 28, scope: !7200)
!7240 = !DILocation(line: 1036, column: 3, scope: !7200)
!7241 = !DILocation(line: 1037, column: 22, scope: !7200)
!7242 = !DILocation(line: 1037, column: 25, scope: !7200)
!7243 = !DILocation(line: 1037, column: 29, scope: !7200)
!7244 = !DILocation(line: 1037, column: 3, scope: !7200)
!7245 = !DILocation(line: 1038, column: 1, scope: !7200)
!7246 = distinct !DISubprogram(name: "VEC_cgraph_edge_p_heap_safe_push", scope: !250, file: !250, line: 353, type: !7247, scopeLine: 353, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2371)
!7247 = !DISubroutineType(types: !7248)
!7248 = !{!7249, !3424, !2276}
!7249 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2276, size: 64)
!7250 = !DILocalVariable(name: "vec_", arg: 1, scope: !7246, file: !250, line: 353, type: !3424)
!7251 = !DILocation(line: 353, column: 1, scope: !7246)
!7252 = !DILocalVariable(name: "obj_", arg: 2, scope: !7246, file: !250, line: 353, type: !2276)
!7253 = distinct !DISubprogram(name: "VEC_cgraph_edge_p_heap_reserve", scope: !250, file: !250, line: 353, type: !7254, scopeLine: 353, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2371)
!7254 = !DISubroutineType(types: !7255)
!7255 = !{!829, !3424, !829}
!7256 = !DILocalVariable(name: "vec_", arg: 1, scope: !7253, file: !250, line: 353, type: !3424)
!7257 = !DILocation(line: 353, column: 1, scope: !7253)
!7258 = !DILocalVariable(name: "alloc_", arg: 2, scope: !7253, file: !250, line: 353, type: !829)
!7259 = !DILocalVariable(name: "extend", scope: !7253, file: !250, line: 353, type: !829)
!7260 = !DILocation(line: 353, column: 1, scope: !7261)
!7261 = distinct !DILexicalBlock(scope: !7253, file: !250, line: 353, column: 1)
!7262 = distinct !DISubprogram(name: "VEC_cgraph_edge_p_base_quick_push", scope: !250, file: !250, line: 352, type: !7263, scopeLine: 352, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2371)
!7263 = !DISubroutineType(types: !7264)
!7264 = !{!7249, !7265, !2276}
!7265 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2269, size: 64)
!7266 = !DILocalVariable(name: "vec_", arg: 1, scope: !7262, file: !250, line: 352, type: !7265)
!7267 = !DILocation(line: 352, column: 1, scope: !7262)
!7268 = !DILocalVariable(name: "obj_", arg: 2, scope: !7262, file: !250, line: 352, type: !2276)
!7269 = !DILocalVariable(name: "slot_", scope: !7262, file: !250, line: 352, type: !7249)
!7270 = distinct !DISubprogram(name: "VEC_cgraph_edge_p_base_space", scope: !250, file: !250, line: 352, type: !7271, scopeLine: 352, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2371)
!7271 = !DISubroutineType(types: !7272)
!7272 = !{!829, !7265, !829}
!7273 = !DILocalVariable(name: "vec_", arg: 1, scope: !7270, file: !250, line: 352, type: !7265)
!7274 = !DILocation(line: 352, column: 1, scope: !7270)
!7275 = !DILocalVariable(name: "alloc_", arg: 2, scope: !7270, file: !250, line: 352, type: !829)
!7276 = distinct !DISubprogram(name: "duplicate_ggc_array", scope: !3, file: !3, line: 1276, type: !7277, scopeLine: 1277, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2371)
!7277 = !DISubroutineType(types: !7278)
!7278 = !{!1254, !1254, !1194}
!7279 = !DILocalVariable(name: "src", arg: 1, scope: !7276, file: !3, line: 1276, type: !1254)
!7280 = !DILocation(line: 1276, column: 28, scope: !7276)
!7281 = !DILocalVariable(name: "n", arg: 2, scope: !7276, file: !3, line: 1276, type: !1194)
!7282 = !DILocation(line: 1276, column: 40, scope: !7276)
!7283 = !DILocalVariable(name: "p", scope: !7276, file: !3, line: 1278, type: !1254)
!7284 = !DILocation(line: 1278, column: 9, scope: !7276)
!7285 = !DILocation(line: 1280, column: 8, scope: !7286)
!7286 = distinct !DILexicalBlock(scope: !7276, file: !3, line: 1280, column: 7)
!7287 = !DILocation(line: 1280, column: 7, scope: !7276)
!7288 = !DILocation(line: 1281, column: 5, scope: !7286)
!7289 = !DILocation(line: 1283, column: 7, scope: !7276)
!7290 = !DILocation(line: 1283, column: 5, scope: !7276)
!7291 = !DILocation(line: 1284, column: 11, scope: !7276)
!7292 = !DILocation(line: 1284, column: 14, scope: !7276)
!7293 = !DILocation(line: 1284, column: 19, scope: !7276)
!7294 = !DILocation(line: 1284, column: 3, scope: !7276)
!7295 = !DILocation(line: 1285, column: 10, scope: !7276)
!7296 = !DILocation(line: 1285, column: 3, scope: !7276)
!7297 = !DILocation(line: 1286, column: 1, scope: !7276)
!7298 = distinct !DISubprogram(name: "duplicate_array", scope: !3, file: !3, line: 1261, type: !7277, scopeLine: 1262, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2371)
!7299 = !DILocalVariable(name: "src", arg: 1, scope: !7298, file: !3, line: 1261, type: !1254)
!7300 = !DILocation(line: 1261, column: 24, scope: !7298)
!7301 = !DILocalVariable(name: "n", arg: 2, scope: !7298, file: !3, line: 1261, type: !1194)
!7302 = !DILocation(line: 1261, column: 36, scope: !7298)
!7303 = !DILocalVariable(name: "p", scope: !7298, file: !3, line: 1263, type: !1254)
!7304 = !DILocation(line: 1263, column: 9, scope: !7298)
!7305 = !DILocation(line: 1265, column: 8, scope: !7306)
!7306 = distinct !DILexicalBlock(scope: !7298, file: !3, line: 1265, column: 7)
!7307 = !DILocation(line: 1265, column: 7, scope: !7298)
!7308 = !DILocation(line: 1266, column: 5, scope: !7306)
!7309 = !DILocation(line: 1268, column: 16, scope: !7298)
!7310 = !DILocation(line: 1268, column: 7, scope: !7298)
!7311 = !DILocation(line: 1268, column: 5, scope: !7298)
!7312 = !DILocation(line: 1269, column: 11, scope: !7298)
!7313 = !DILocation(line: 1269, column: 14, scope: !7298)
!7314 = !DILocation(line: 1269, column: 19, scope: !7298)
!7315 = !DILocation(line: 1269, column: 3, scope: !7298)
!7316 = !DILocation(line: 1270, column: 10, scope: !7298)
!7317 = !DILocation(line: 1270, column: 3, scope: !7298)
!7318 = !DILocation(line: 1271, column: 1, scope: !7298)
!7319 = distinct !DISubprogram(name: "gimple_set_op", scope: !603, file: !603, line: 1663, type: !7320, scopeLine: 1664, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2371)
!7320 = !DISubroutineType(types: !7321)
!7321 = !{null, !1046, !7, !748}
!7322 = !DILocalVariable(name: "gs", arg: 1, scope: !7319, file: !603, line: 1663, type: !1046)
!7323 = !DILocation(line: 1663, column: 23, scope: !7319)
!7324 = !DILocalVariable(name: "i", arg: 2, scope: !7319, file: !603, line: 1663, type: !7)
!7325 = !DILocation(line: 1663, column: 36, scope: !7319)
!7326 = !DILocalVariable(name: "op", arg: 3, scope: !7319, file: !603, line: 1663, type: !748)
!7327 = !DILocation(line: 1663, column: 44, scope: !7319)
!7328 = !DILocation(line: 1665, column: 3, scope: !7319)
!7329 = !DILocation(line: 1671, column: 24, scope: !7319)
!7330 = !DILocation(line: 1671, column: 15, scope: !7319)
!7331 = !DILocation(line: 1671, column: 3, scope: !7319)
!7332 = !DILocation(line: 1671, column: 19, scope: !7319)
!7333 = !DILocation(line: 1671, column: 22, scope: !7319)
!7334 = !DILocation(line: 1672, column: 1, scope: !7319)
!7335 = distinct !DISubprogram(name: "VEC_cgraph_node_ptr_base_length", scope: !250, file: !250, line: 270, type: !7336, scopeLine: 270, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2371)
!7336 = !DISubroutineType(types: !7337)
!7337 = !{!7, !7338}
!7338 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7339, size: 64)
!7339 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2026)
!7340 = !DILocalVariable(name: "vec_", arg: 1, scope: !7335, file: !250, line: 270, type: !7338)
!7341 = !DILocation(line: 270, column: 1, scope: !7335)
!7342 = distinct !DISubprogram(name: "VEC_cgraph_node_ptr_base_index", scope: !250, file: !250, line: 270, type: !7343, scopeLine: 270, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2371)
!7343 = !DISubroutineType(types: !7344)
!7344 = !{!2033, !7338, !7}
!7345 = !DILocalVariable(name: "vec_", arg: 1, scope: !7342, file: !250, line: 270, type: !7338)
!7346 = !DILocation(line: 270, column: 1, scope: !7342)
!7347 = !DILocalVariable(name: "ix_", arg: 2, scope: !7342, file: !250, line: 270, type: !7)
!7348 = !DILocation(line: 0, scope: !7342)
!7349 = distinct !DISubprogram(name: "ipa_write_jump_function", scope: !3, file: !3, line: 1897, type: !7350, scopeLine: 1899, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2371)
!7350 = !DISubroutineType(types: !7351)
!7351 = !{null, !5082, !2197}
!7352 = !DILocalVariable(name: "ob", arg: 1, scope: !7349, file: !3, line: 1897, type: !5082)
!7353 = !DILocation(line: 1897, column: 47, scope: !7349)
!7354 = !DILocalVariable(name: "jump_func", arg: 2, scope: !7349, file: !3, line: 1898, type: !2197)
!7355 = !DILocation(line: 1898, column: 27, scope: !7349)
!7356 = !DILocation(line: 1900, column: 30, scope: !7349)
!7357 = !DILocation(line: 1900, column: 34, scope: !7349)
!7358 = !DILocation(line: 1901, column: 9, scope: !7349)
!7359 = !DILocation(line: 1901, column: 20, scope: !7349)
!7360 = !DILocation(line: 1900, column: 3, scope: !7349)
!7361 = !DILocation(line: 1903, column: 11, scope: !7349)
!7362 = !DILocation(line: 1903, column: 22, scope: !7349)
!7363 = !DILocation(line: 1903, column: 3, scope: !7349)
!7364 = !DILocation(line: 1906, column: 7, scope: !7365)
!7365 = distinct !DILexicalBlock(scope: !7349, file: !3, line: 1904, column: 5)
!7366 = !DILocation(line: 1908, column: 24, scope: !7365)
!7367 = !DILocation(line: 1908, column: 28, scope: !7365)
!7368 = !DILocation(line: 1908, column: 39, scope: !7365)
!7369 = !DILocation(line: 1908, column: 45, scope: !7365)
!7370 = !DILocation(line: 1908, column: 7, scope: !7365)
!7371 = !DILocation(line: 1909, column: 7, scope: !7365)
!7372 = !DILocation(line: 1911, column: 24, scope: !7365)
!7373 = !DILocation(line: 1911, column: 28, scope: !7365)
!7374 = !DILocation(line: 1911, column: 39, scope: !7365)
!7375 = !DILocation(line: 1911, column: 45, scope: !7365)
!7376 = !DILocation(line: 1911, column: 58, scope: !7365)
!7377 = !DILocation(line: 1911, column: 7, scope: !7365)
!7378 = !DILocation(line: 1912, column: 34, scope: !7365)
!7379 = !DILocation(line: 1912, column: 38, scope: !7365)
!7380 = !DILocation(line: 1913, column: 6, scope: !7365)
!7381 = !DILocation(line: 1913, column: 17, scope: !7365)
!7382 = !DILocation(line: 1913, column: 23, scope: !7365)
!7383 = !DILocation(line: 1913, column: 36, scope: !7365)
!7384 = !DILocation(line: 1912, column: 7, scope: !7365)
!7385 = !DILocation(line: 1914, column: 34, scope: !7365)
!7386 = !DILocation(line: 1914, column: 38, scope: !7365)
!7387 = !DILocation(line: 1915, column: 6, scope: !7365)
!7388 = !DILocation(line: 1915, column: 17, scope: !7365)
!7389 = !DILocation(line: 1915, column: 23, scope: !7365)
!7390 = !DILocation(line: 1915, column: 36, scope: !7365)
!7391 = !DILocation(line: 1914, column: 7, scope: !7365)
!7392 = !DILocation(line: 1916, column: 7, scope: !7365)
!7393 = !DILocation(line: 1918, column: 34, scope: !7365)
!7394 = !DILocation(line: 1918, column: 38, scope: !7365)
!7395 = !DILocation(line: 1919, column: 6, scope: !7365)
!7396 = !DILocation(line: 1919, column: 17, scope: !7365)
!7397 = !DILocation(line: 1919, column: 23, scope: !7365)
!7398 = !DILocation(line: 1919, column: 32, scope: !7365)
!7399 = !DILocation(line: 1918, column: 7, scope: !7365)
!7400 = !DILocation(line: 1920, column: 24, scope: !7365)
!7401 = !DILocation(line: 1920, column: 28, scope: !7365)
!7402 = !DILocation(line: 1920, column: 39, scope: !7365)
!7403 = !DILocation(line: 1920, column: 45, scope: !7365)
!7404 = !DILocation(line: 1920, column: 54, scope: !7365)
!7405 = !DILocation(line: 1920, column: 7, scope: !7365)
!7406 = !DILocation(line: 1921, column: 34, scope: !7365)
!7407 = !DILocation(line: 1921, column: 38, scope: !7365)
!7408 = !DILocation(line: 1922, column: 6, scope: !7365)
!7409 = !DILocation(line: 1922, column: 17, scope: !7365)
!7410 = !DILocation(line: 1922, column: 23, scope: !7365)
!7411 = !DILocation(line: 1922, column: 32, scope: !7365)
!7412 = !DILocation(line: 1921, column: 7, scope: !7365)
!7413 = !DILocation(line: 1923, column: 7, scope: !7365)
!7414 = !DILocation(line: 1925, column: 24, scope: !7365)
!7415 = !DILocation(line: 1925, column: 28, scope: !7365)
!7416 = !DILocation(line: 1925, column: 39, scope: !7365)
!7417 = !DILocation(line: 1925, column: 45, scope: !7365)
!7418 = !DILocation(line: 1925, column: 56, scope: !7365)
!7419 = !DILocation(line: 1925, column: 7, scope: !7365)
!7420 = !DILocation(line: 1926, column: 24, scope: !7365)
!7421 = !DILocation(line: 1926, column: 28, scope: !7365)
!7422 = !DILocation(line: 1926, column: 39, scope: !7365)
!7423 = !DILocation(line: 1926, column: 45, scope: !7365)
!7424 = !DILocation(line: 1926, column: 56, scope: !7365)
!7425 = !DILocation(line: 1926, column: 7, scope: !7365)
!7426 = !DILocation(line: 1927, column: 7, scope: !7365)
!7427 = !DILocation(line: 1929, column: 1, scope: !7349)
!7428 = distinct !DISubprogram(name: "ipa_write_param_call_note", scope: !3, file: !3, line: 1967, type: !7429, scopeLine: 1969, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2371)
!7429 = !DISubroutineType(types: !7430)
!7430 = !{null, !5082, !2228}
!7431 = !DILocalVariable(name: "ob", arg: 1, scope: !7428, file: !3, line: 1967, type: !5082)
!7432 = !DILocation(line: 1967, column: 49, scope: !7428)
!7433 = !DILocalVariable(name: "note", arg: 2, scope: !7428, file: !3, line: 1968, type: !2228)
!7434 = !DILocation(line: 1968, column: 35, scope: !7428)
!7435 = !DILocation(line: 1970, column: 3, scope: !7428)
!7436 = !DILocation(line: 1971, column: 30, scope: !7428)
!7437 = !DILocation(line: 1971, column: 34, scope: !7428)
!7438 = !DILocation(line: 1971, column: 59, scope: !7428)
!7439 = !DILocation(line: 1971, column: 65, scope: !7428)
!7440 = !DILocation(line: 1971, column: 47, scope: !7428)
!7441 = !DILocation(line: 1971, column: 3, scope: !7428)
!7442 = !DILocation(line: 1972, column: 30, scope: !7428)
!7443 = !DILocation(line: 1972, column: 34, scope: !7428)
!7444 = !DILocation(line: 1972, column: 47, scope: !7428)
!7445 = !DILocation(line: 1972, column: 53, scope: !7428)
!7446 = !DILocation(line: 1972, column: 3, scope: !7428)
!7447 = !DILocation(line: 1973, column: 30, scope: !7428)
!7448 = !DILocation(line: 1973, column: 34, scope: !7428)
!7449 = !DILocation(line: 1973, column: 47, scope: !7428)
!7450 = !DILocation(line: 1973, column: 53, scope: !7428)
!7451 = !DILocation(line: 1973, column: 3, scope: !7428)
!7452 = !DILocation(line: 1974, column: 30, scope: !7428)
!7453 = !DILocation(line: 1974, column: 34, scope: !7428)
!7454 = !DILocation(line: 1974, column: 47, scope: !7428)
!7455 = !DILocation(line: 1974, column: 53, scope: !7428)
!7456 = !DILocation(line: 1974, column: 3, scope: !7428)
!7457 = !DILocation(line: 1975, column: 30, scope: !7428)
!7458 = !DILocation(line: 1975, column: 34, scope: !7428)
!7459 = !DILocation(line: 1975, column: 47, scope: !7428)
!7460 = !DILocation(line: 1975, column: 53, scope: !7428)
!7461 = !DILocation(line: 1975, column: 3, scope: !7428)
!7462 = !DILocation(line: 1976, column: 1, scope: !7428)
!7463 = distinct !DISubprogram(name: "VEC_ipa_node_params_t_heap_alloc", scope: !456, file: !456, line: 315, type: !7464, scopeLine: 315, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2371)
!7464 = !DISubroutineType(types: !7465)
!7465 = !{!2307, !829}
!7466 = !DILocalVariable(name: "alloc_", arg: 1, scope: !7463, file: !456, line: 315, type: !829)
!7467 = !DILocation(line: 315, column: 1, scope: !7463)
!7468 = distinct !DISubprogram(name: "VEC_ipa_node_params_t_base_length", scope: !456, file: !456, line: 314, type: !7469, scopeLine: 314, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2371)
!7469 = !DISubroutineType(types: !7470)
!7470 = !{!7, !7471}
!7471 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7472, size: 64)
!7472 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2312)
!7473 = !DILocalVariable(name: "vec_", arg: 1, scope: !7468, file: !456, line: 314, type: !7471)
!7474 = !DILocation(line: 314, column: 1, scope: !7468)
!7475 = distinct !DISubprogram(name: "VEC_ipa_node_params_t_heap_safe_grow_cleared", scope: !456, file: !456, line: 315, type: !7476, scopeLine: 315, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2371)
!7476 = !DISubroutineType(types: !7477)
!7477 = !{null, !3618, !829}
!7478 = !DILocalVariable(name: "vec_", arg: 1, scope: !7475, file: !456, line: 315, type: !3618)
!7479 = !DILocation(line: 315, column: 1, scope: !7475)
!7480 = !DILocalVariable(name: "size_", arg: 2, scope: !7475, file: !456, line: 315, type: !829)
!7481 = !DILocalVariable(name: "oldsize", scope: !7475, file: !456, line: 315, type: !829)
!7482 = distinct !DISubprogram(name: "VEC_ipa_node_params_t_heap_safe_grow", scope: !456, file: !456, line: 315, type: !7476, scopeLine: 315, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2371)
!7483 = !DILocalVariable(name: "vec_", arg: 1, scope: !7482, file: !456, line: 315, type: !3618)
!7484 = !DILocation(line: 315, column: 1, scope: !7482)
!7485 = !DILocalVariable(name: "size_", arg: 2, scope: !7482, file: !456, line: 315, type: !829)
!7486 = !DILocation(line: 0, scope: !7482)
!7487 = distinct !DISubprogram(name: "VEC_ipa_node_params_t_base_address", scope: !456, file: !456, line: 314, type: !7488, scopeLine: 314, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2371)
!7488 = !DISubroutineType(types: !7489)
!7489 = !{!2437, !2438}
!7490 = !DILocalVariable(name: "vec_", arg: 1, scope: !7487, file: !456, line: 314, type: !2438)
!7491 = !DILocation(line: 314, column: 1, scope: !7487)
!7492 = distinct !DISubprogram(name: "VEC_ipa_node_params_t_heap_reserve_exact", scope: !456, file: !456, line: 315, type: !7493, scopeLine: 315, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2371)
!7493 = !DISubroutineType(types: !7494)
!7494 = !{!829, !3618, !829}
!7495 = !DILocalVariable(name: "vec_", arg: 1, scope: !7492, file: !456, line: 315, type: !3618)
!7496 = !DILocation(line: 315, column: 1, scope: !7492)
!7497 = !DILocalVariable(name: "alloc_", arg: 2, scope: !7492, file: !456, line: 315, type: !829)
!7498 = !DILocalVariable(name: "extend", scope: !7492, file: !456, line: 315, type: !829)
!7499 = !DILocation(line: 315, column: 1, scope: !7500)
!7500 = distinct !DILexicalBlock(scope: !7492, file: !456, line: 315, column: 1)
!7501 = distinct !DISubprogram(name: "VEC_ipa_node_params_t_base_space", scope: !456, file: !456, line: 314, type: !7502, scopeLine: 314, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2371)
!7502 = !DISubroutineType(types: !7503)
!7503 = !{!829, !2438, !829}
!7504 = !DILocalVariable(name: "vec_", arg: 1, scope: !7501, file: !456, line: 314, type: !2438)
!7505 = !DILocation(line: 314, column: 1, scope: !7501)
!7506 = !DILocalVariable(name: "alloc_", arg: 2, scope: !7501, file: !456, line: 314, type: !829)
!7507 = distinct !DISubprogram(name: "VEC_ipa_edge_args_t_gc_alloc", scope: !456, file: !456, line: 317, type: !7508, scopeLine: 317, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2371)
!7508 = !DISubroutineType(types: !7509)
!7509 = !{!2245, !829}
!7510 = !DILocalVariable(name: "alloc_", arg: 1, scope: !7507, file: !456, line: 317, type: !829)
!7511 = !DILocation(line: 317, column: 1, scope: !7507)
!7512 = distinct !DISubprogram(name: "ipa_read_node_info", scope: !3, file: !3, line: 2047, type: !7513, scopeLine: 2049, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2371)
!7513 = !DISubroutineType(types: !7514)
!7514 = !{null, !7515, !744, !5521}
!7515 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5550, size: 64)
!7516 = !DILocalVariable(name: "ib", arg: 1, scope: !7512, file: !3, line: 2047, type: !7515)
!7517 = !DILocation(line: 2047, column: 45, scope: !7512)
!7518 = !DILocalVariable(name: "node", arg: 2, scope: !7512, file: !3, line: 2047, type: !744)
!7519 = !DILocation(line: 2047, column: 69, scope: !7512)
!7520 = !DILocalVariable(name: "data_in", arg: 3, scope: !7512, file: !3, line: 2048, type: !5521)
!7521 = !DILocation(line: 2048, column: 23, scope: !7512)
!7522 = !DILocalVariable(name: "info", scope: !7512, file: !3, line: 2050, type: !2222)
!7523 = !DILocation(line: 2050, column: 27, scope: !7512)
!7524 = !DILocation(line: 2050, column: 34, scope: !7512)
!7525 = !DILocalVariable(name: "k", scope: !7512, file: !3, line: 2051, type: !829)
!7526 = !DILocation(line: 2051, column: 7, scope: !7512)
!7527 = !DILocalVariable(name: "e", scope: !7512, file: !3, line: 2052, type: !1930)
!7528 = !DILocation(line: 2052, column: 23, scope: !7512)
!7529 = !DILocalVariable(name: "bp", scope: !7512, file: !3, line: 2053, type: !5278)
!7530 = !DILocation(line: 2053, column: 21, scope: !7512)
!7531 = !DILocalVariable(name: "i", scope: !7512, file: !3, line: 2054, type: !829)
!7532 = !DILocation(line: 2054, column: 7, scope: !7512)
!7533 = !DILocalVariable(name: "note_count", scope: !7512, file: !3, line: 2054, type: !829)
!7534 = !DILocation(line: 2054, column: 10, scope: !7512)
!7535 = !DILocation(line: 2056, column: 31, scope: !7512)
!7536 = !DILocation(line: 2056, column: 3, scope: !7512)
!7537 = !DILocation(line: 2058, column: 27, scope: !7512)
!7538 = !DILocation(line: 2058, column: 8, scope: !7512)
!7539 = !DILocation(line: 2058, column: 6, scope: !7512)
!7540 = !DILocation(line: 2059, column: 54, scope: !7512)
!7541 = !DILocation(line: 2059, column: 37, scope: !7512)
!7542 = !DILocation(line: 2059, column: 3, scope: !7512)
!7543 = !DILocation(line: 2059, column: 9, scope: !7512)
!7544 = !DILocation(line: 2059, column: 35, scope: !7512)
!7545 = !DILocation(line: 2060, column: 47, scope: !7512)
!7546 = !DILocation(line: 2060, column: 30, scope: !7512)
!7547 = !DILocation(line: 2060, column: 3, scope: !7512)
!7548 = !DILocation(line: 2060, column: 9, scope: !7512)
!7549 = !DILocation(line: 2060, column: 28, scope: !7512)
!7550 = !DILocation(line: 2061, column: 28, scope: !7551)
!7551 = distinct !DILexicalBlock(scope: !7512, file: !3, line: 2061, column: 7)
!7552 = !DILocation(line: 2061, column: 7, scope: !7551)
!7553 = !DILocation(line: 2061, column: 34, scope: !7551)
!7554 = !DILocation(line: 2061, column: 7, scope: !7512)
!7555 = !DILocation(line: 2063, column: 7, scope: !7556)
!7556 = distinct !DILexicalBlock(scope: !7551, file: !3, line: 2062, column: 5)
!7557 = !DILocation(line: 2063, column: 13, scope: !7556)
!7558 = !DILocation(line: 2063, column: 40, scope: !7556)
!7559 = !DILocation(line: 2064, column: 7, scope: !7556)
!7560 = !DILocation(line: 2064, column: 13, scope: !7556)
!7561 = !DILocation(line: 2064, column: 32, scope: !7556)
!7562 = !DILocation(line: 2065, column: 5, scope: !7556)
!7563 = !DILocation(line: 2066, column: 3, scope: !7512)
!7564 = !DILocation(line: 2066, column: 9, scope: !7512)
!7565 = !DILocation(line: 2066, column: 23, scope: !7512)
!7566 = !DILocation(line: 2067, column: 10, scope: !7567)
!7567 = distinct !DILexicalBlock(scope: !7512, file: !3, line: 2067, column: 3)
!7568 = !DILocation(line: 2067, column: 8, scope: !7567)
!7569 = !DILocation(line: 2067, column: 15, scope: !7570)
!7570 = distinct !DILexicalBlock(scope: !7567, file: !3, line: 2067, column: 3)
!7571 = !DILocation(line: 2067, column: 40, scope: !7570)
!7572 = !DILocation(line: 2067, column: 19, scope: !7570)
!7573 = !DILocation(line: 2067, column: 17, scope: !7570)
!7574 = !DILocation(line: 2067, column: 3, scope: !7567)
!7575 = !DILocation(line: 2068, column: 49, scope: !7570)
!7576 = !DILocation(line: 2068, column: 32, scope: !7570)
!7577 = !DILocation(line: 2068, column: 5, scope: !7570)
!7578 = !DILocation(line: 2068, column: 11, scope: !7570)
!7579 = !DILocation(line: 2068, column: 18, scope: !7570)
!7580 = !DILocation(line: 2068, column: 21, scope: !7570)
!7581 = !DILocation(line: 2068, column: 30, scope: !7570)
!7582 = !DILocation(line: 2067, column: 48, scope: !7570)
!7583 = !DILocation(line: 2067, column: 3, scope: !7570)
!7584 = distinct !{!7584, !7574, !7585}
!7585 = !DILocation(line: 2068, column: 54, scope: !7567)
!7586 = !DILocation(line: 2069, column: 19, scope: !7512)
!7587 = !DILocation(line: 2069, column: 3, scope: !7512)
!7588 = !DILocation(line: 2070, column: 12, scope: !7589)
!7589 = distinct !DILexicalBlock(scope: !7512, file: !3, line: 2070, column: 3)
!7590 = !DILocation(line: 2070, column: 18, scope: !7589)
!7591 = !DILocation(line: 2070, column: 10, scope: !7589)
!7592 = !DILocation(line: 2070, column: 8, scope: !7589)
!7593 = !DILocation(line: 2070, column: 27, scope: !7594)
!7594 = distinct !DILexicalBlock(scope: !7589, file: !3, line: 2070, column: 3)
!7595 = !DILocation(line: 2070, column: 3, scope: !7589)
!7596 = !DILocalVariable(name: "args", scope: !7597, file: !3, line: 2072, type: !2772)
!7597 = distinct !DILexicalBlock(scope: !7594, file: !3, line: 2071, column: 5)
!7598 = !DILocation(line: 2072, column: 29, scope: !7597)
!7599 = !DILocation(line: 2072, column: 36, scope: !7597)
!7600 = !DILocalVariable(name: "count", scope: !7597, file: !3, line: 2073, type: !829)
!7601 = !DILocation(line: 2073, column: 11, scope: !7597)
!7602 = !DILocation(line: 2073, column: 38, scope: !7597)
!7603 = !DILocation(line: 2073, column: 19, scope: !7597)
!7604 = !DILocation(line: 2075, column: 34, scope: !7597)
!7605 = !DILocation(line: 2075, column: 40, scope: !7597)
!7606 = !DILocation(line: 2075, column: 7, scope: !7597)
!7607 = !DILocation(line: 2076, column: 12, scope: !7608)
!7608 = distinct !DILexicalBlock(scope: !7597, file: !3, line: 2076, column: 11)
!7609 = !DILocation(line: 2076, column: 11, scope: !7597)
!7610 = !DILocation(line: 2077, column: 2, scope: !7608)
!7611 = !DILocation(line: 2079, column: 30, scope: !7597)
!7612 = !DILocation(line: 2079, column: 7, scope: !7597)
!7613 = !DILocation(line: 2079, column: 13, scope: !7597)
!7614 = !DILocation(line: 2079, column: 28, scope: !7597)
!7615 = !DILocation(line: 2081, column: 14, scope: !7616)
!7616 = distinct !DILexicalBlock(scope: !7597, file: !3, line: 2081, column: 7)
!7617 = !DILocation(line: 2081, column: 12, scope: !7616)
!7618 = !DILocation(line: 2081, column: 19, scope: !7619)
!7619 = distinct !DILexicalBlock(scope: !7616, file: !3, line: 2081, column: 7)
!7620 = !DILocation(line: 2081, column: 50, scope: !7619)
!7621 = !DILocation(line: 2081, column: 23, scope: !7619)
!7622 = !DILocation(line: 2081, column: 21, scope: !7619)
!7623 = !DILocation(line: 2081, column: 7, scope: !7616)
!7624 = !DILocation(line: 2082, column: 26, scope: !7619)
!7625 = !DILocation(line: 2082, column: 53, scope: !7619)
!7626 = !DILocation(line: 2082, column: 59, scope: !7619)
!7627 = !DILocation(line: 2082, column: 30, scope: !7619)
!7628 = !DILocation(line: 2082, column: 63, scope: !7619)
!7629 = !DILocation(line: 2082, column: 2, scope: !7619)
!7630 = !DILocation(line: 2081, column: 58, scope: !7619)
!7631 = !DILocation(line: 2081, column: 7, scope: !7619)
!7632 = distinct !{!7632, !7623, !7633}
!7633 = !DILocation(line: 2082, column: 70, scope: !7616)
!7634 = !DILocation(line: 2083, column: 5, scope: !7597)
!7635 = !DILocation(line: 2070, column: 34, scope: !7594)
!7636 = !DILocation(line: 2070, column: 37, scope: !7594)
!7637 = !DILocation(line: 2070, column: 32, scope: !7594)
!7638 = !DILocation(line: 2070, column: 3, scope: !7594)
!7639 = distinct !{!7639, !7595, !7640}
!7640 = !DILocation(line: 2083, column: 5, scope: !7589)
!7641 = !DILocation(line: 2085, column: 35, scope: !7512)
!7642 = !DILocation(line: 2085, column: 16, scope: !7512)
!7643 = !DILocation(line: 2085, column: 14, scope: !7512)
!7644 = !DILocation(line: 2086, column: 10, scope: !7645)
!7645 = distinct !DILexicalBlock(scope: !7512, file: !3, line: 2086, column: 3)
!7646 = !DILocation(line: 2086, column: 8, scope: !7645)
!7647 = !DILocation(line: 2086, column: 15, scope: !7648)
!7648 = distinct !DILexicalBlock(scope: !7645, file: !3, line: 2086, column: 3)
!7649 = !DILocation(line: 2086, column: 19, scope: !7648)
!7650 = !DILocation(line: 2086, column: 17, scope: !7648)
!7651 = !DILocation(line: 2086, column: 3, scope: !7645)
!7652 = !DILocation(line: 2087, column: 31, scope: !7648)
!7653 = !DILocation(line: 2087, column: 35, scope: !7648)
!7654 = !DILocation(line: 2087, column: 5, scope: !7648)
!7655 = !DILocation(line: 2086, column: 32, scope: !7648)
!7656 = !DILocation(line: 2086, column: 3, scope: !7648)
!7657 = distinct !{!7657, !7651, !7658}
!7658 = !DILocation(line: 2087, column: 39, scope: !7645)
!7659 = !DILocation(line: 2088, column: 1, scope: !7512)
!7660 = distinct !DISubprogram(name: "ipa_read_jump_function", scope: !3, file: !3, line: 1934, type: !7661, scopeLine: 1937, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2371)
!7661 = !DISubroutineType(types: !7662)
!7662 = !{null, !7515, !2197, !5521}
!7663 = !DILocalVariable(name: "ib", arg: 1, scope: !7660, file: !3, line: 1934, type: !7515)
!7664 = !DILocation(line: 1934, column: 49, scope: !7660)
!7665 = !DILocalVariable(name: "jump_func", arg: 2, scope: !7660, file: !3, line: 1935, type: !2197)
!7666 = !DILocation(line: 1935, column: 26, scope: !7660)
!7667 = !DILocalVariable(name: "data_in", arg: 3, scope: !7660, file: !3, line: 1936, type: !5521)
!7668 = !DILocation(line: 1936, column: 20, scope: !7660)
!7669 = !DILocation(line: 1938, column: 62, scope: !7660)
!7670 = !DILocation(line: 1938, column: 43, scope: !7660)
!7671 = !DILocation(line: 1938, column: 21, scope: !7660)
!7672 = !DILocation(line: 1938, column: 3, scope: !7660)
!7673 = !DILocation(line: 1938, column: 14, scope: !7660)
!7674 = !DILocation(line: 1938, column: 19, scope: !7660)
!7675 = !DILocation(line: 1940, column: 11, scope: !7660)
!7676 = !DILocation(line: 1940, column: 22, scope: !7660)
!7677 = !DILocation(line: 1940, column: 3, scope: !7660)
!7678 = !DILocation(line: 1943, column: 7, scope: !7679)
!7679 = distinct !DILexicalBlock(scope: !7660, file: !3, line: 1941, column: 5)
!7680 = !DILocation(line: 1945, column: 51, scope: !7679)
!7681 = !DILocation(line: 1945, column: 55, scope: !7679)
!7682 = !DILocation(line: 1945, column: 35, scope: !7679)
!7683 = !DILocation(line: 1945, column: 7, scope: !7679)
!7684 = !DILocation(line: 1945, column: 18, scope: !7679)
!7685 = !DILocation(line: 1945, column: 24, scope: !7679)
!7686 = !DILocation(line: 1945, column: 33, scope: !7679)
!7687 = !DILocation(line: 1946, column: 7, scope: !7679)
!7688 = !DILocation(line: 1948, column: 63, scope: !7679)
!7689 = !DILocation(line: 1948, column: 67, scope: !7679)
!7690 = !DILocation(line: 1948, column: 47, scope: !7679)
!7691 = !DILocation(line: 1948, column: 7, scope: !7679)
!7692 = !DILocation(line: 1948, column: 18, scope: !7679)
!7693 = !DILocation(line: 1948, column: 24, scope: !7679)
!7694 = !DILocation(line: 1948, column: 37, scope: !7679)
!7695 = !DILocation(line: 1948, column: 45, scope: !7679)
!7696 = !DILocation(line: 1949, column: 68, scope: !7679)
!7697 = !DILocation(line: 1949, column: 49, scope: !7679)
!7698 = !DILocation(line: 1949, column: 7, scope: !7679)
!7699 = !DILocation(line: 1949, column: 18, scope: !7679)
!7700 = !DILocation(line: 1949, column: 24, scope: !7679)
!7701 = !DILocation(line: 1949, column: 37, scope: !7679)
!7702 = !DILocation(line: 1949, column: 47, scope: !7679)
!7703 = !DILocation(line: 1950, column: 85, scope: !7679)
!7704 = !DILocation(line: 1950, column: 66, scope: !7679)
!7705 = !DILocation(line: 1950, column: 49, scope: !7679)
!7706 = !DILocation(line: 1950, column: 7, scope: !7679)
!7707 = !DILocation(line: 1950, column: 18, scope: !7679)
!7708 = !DILocation(line: 1950, column: 24, scope: !7679)
!7709 = !DILocation(line: 1950, column: 37, scope: !7679)
!7710 = !DILocation(line: 1950, column: 47, scope: !7679)
!7711 = !DILocation(line: 1951, column: 7, scope: !7679)
!7712 = !DILocation(line: 1953, column: 61, scope: !7679)
!7713 = !DILocation(line: 1953, column: 42, scope: !7679)
!7714 = !DILocation(line: 1953, column: 7, scope: !7679)
!7715 = !DILocation(line: 1953, column: 18, scope: !7679)
!7716 = !DILocation(line: 1953, column: 24, scope: !7679)
!7717 = !DILocation(line: 1953, column: 33, scope: !7679)
!7718 = !DILocation(line: 1953, column: 40, scope: !7679)
!7719 = !DILocation(line: 1954, column: 56, scope: !7679)
!7720 = !DILocation(line: 1954, column: 60, scope: !7679)
!7721 = !DILocation(line: 1954, column: 40, scope: !7679)
!7722 = !DILocation(line: 1954, column: 7, scope: !7679)
!7723 = !DILocation(line: 1954, column: 18, scope: !7679)
!7724 = !DILocation(line: 1954, column: 24, scope: !7679)
!7725 = !DILocation(line: 1954, column: 33, scope: !7679)
!7726 = !DILocation(line: 1954, column: 38, scope: !7679)
!7727 = !DILocation(line: 1955, column: 64, scope: !7679)
!7728 = !DILocation(line: 1955, column: 45, scope: !7679)
!7729 = !DILocation(line: 1955, column: 7, scope: !7679)
!7730 = !DILocation(line: 1955, column: 18, scope: !7679)
!7731 = !DILocation(line: 1955, column: 24, scope: !7679)
!7732 = !DILocation(line: 1955, column: 33, scope: !7679)
!7733 = !DILocation(line: 1955, column: 43, scope: !7679)
!7734 = !DILocation(line: 1956, column: 7, scope: !7679)
!7735 = !DILocation(line: 1958, column: 57, scope: !7679)
!7736 = !DILocation(line: 1958, column: 61, scope: !7679)
!7737 = !DILocation(line: 1958, column: 41, scope: !7679)
!7738 = !DILocation(line: 1958, column: 7, scope: !7679)
!7739 = !DILocation(line: 1958, column: 18, scope: !7679)
!7740 = !DILocation(line: 1958, column: 24, scope: !7679)
!7741 = !DILocation(line: 1958, column: 35, scope: !7679)
!7742 = !DILocation(line: 1958, column: 39, scope: !7679)
!7743 = !DILocation(line: 1959, column: 59, scope: !7679)
!7744 = !DILocation(line: 1959, column: 63, scope: !7679)
!7745 = !DILocation(line: 1959, column: 43, scope: !7679)
!7746 = !DILocation(line: 1959, column: 7, scope: !7679)
!7747 = !DILocation(line: 1959, column: 18, scope: !7679)
!7748 = !DILocation(line: 1959, column: 24, scope: !7679)
!7749 = !DILocation(line: 1959, column: 35, scope: !7679)
!7750 = !DILocation(line: 1959, column: 41, scope: !7679)
!7751 = !DILocation(line: 1960, column: 7, scope: !7679)
!7752 = !DILocation(line: 1962, column: 1, scope: !7660)
!7753 = distinct !DISubprogram(name: "ipa_read_param_call_note", scope: !3, file: !3, line: 1981, type: !7754, scopeLine: 1984, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2371)
!7754 = !DISubroutineType(types: !7755)
!7755 = !{null, !7515, !2222}
!7756 = !DILocalVariable(name: "ib", arg: 1, scope: !7753, file: !3, line: 1981, type: !7515)
!7757 = !DILocation(line: 1981, column: 51, scope: !7753)
!7758 = !DILocalVariable(name: "info", arg: 2, scope: !7753, file: !3, line: 1982, type: !2222)
!7759 = !DILocation(line: 1982, column: 30, scope: !7753)
!7760 = !DILocalVariable(name: "note", scope: !7753, file: !3, line: 1985, type: !2228)
!7761 = !DILocation(line: 1985, column: 31, scope: !7753)
!7762 = !DILocation(line: 1985, column: 38, scope: !7753)
!7763 = !DILocation(line: 1987, column: 58, scope: !7753)
!7764 = !DILocation(line: 1987, column: 39, scope: !7753)
!7765 = !DILocation(line: 1987, column: 24, scope: !7753)
!7766 = !DILocation(line: 1987, column: 3, scope: !7753)
!7767 = !DILocation(line: 1987, column: 9, scope: !7753)
!7768 = !DILocation(line: 1987, column: 22, scope: !7753)
!7769 = !DILocation(line: 1988, column: 46, scope: !7753)
!7770 = !DILocation(line: 1988, column: 27, scope: !7753)
!7771 = !DILocation(line: 1988, column: 21, scope: !7753)
!7772 = !DILocation(line: 1988, column: 3, scope: !7753)
!7773 = !DILocation(line: 1988, column: 9, scope: !7753)
!7774 = !DILocation(line: 1988, column: 19, scope: !7753)
!7775 = !DILocation(line: 1989, column: 48, scope: !7753)
!7776 = !DILocation(line: 1989, column: 29, scope: !7753)
!7777 = !DILocation(line: 1989, column: 3, scope: !7753)
!7778 = !DILocation(line: 1989, column: 9, scope: !7753)
!7779 = !DILocation(line: 1989, column: 15, scope: !7753)
!7780 = !DILocation(line: 1990, column: 46, scope: !7753)
!7781 = !DILocation(line: 1990, column: 27, scope: !7753)
!7782 = !DILocation(line: 1990, column: 21, scope: !7753)
!7783 = !DILocation(line: 1990, column: 3, scope: !7753)
!7784 = !DILocation(line: 1990, column: 9, scope: !7753)
!7785 = !DILocation(line: 1990, column: 19, scope: !7753)
!7786 = !DILocation(line: 1991, column: 46, scope: !7753)
!7787 = !DILocation(line: 1991, column: 27, scope: !7753)
!7788 = !DILocation(line: 1991, column: 21, scope: !7753)
!7789 = !DILocation(line: 1991, column: 3, scope: !7753)
!7790 = !DILocation(line: 1991, column: 9, scope: !7753)
!7791 = !DILocation(line: 1991, column: 19, scope: !7753)
!7792 = !DILocation(line: 1993, column: 16, scope: !7753)
!7793 = !DILocation(line: 1993, column: 22, scope: !7753)
!7794 = !DILocation(line: 1993, column: 3, scope: !7753)
!7795 = !DILocation(line: 1993, column: 9, scope: !7753)
!7796 = !DILocation(line: 1993, column: 14, scope: !7753)
!7797 = !DILocation(line: 1994, column: 23, scope: !7753)
!7798 = !DILocation(line: 1994, column: 3, scope: !7753)
!7799 = !DILocation(line: 1994, column: 9, scope: !7753)
!7800 = !DILocation(line: 1994, column: 21, scope: !7753)
!7801 = !DILocation(line: 1995, column: 1, scope: !7753)
