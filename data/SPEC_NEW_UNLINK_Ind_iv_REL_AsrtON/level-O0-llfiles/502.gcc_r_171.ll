; ModuleID = 'ipa-type-escape.c'
source_filename = "ipa-type-escape.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.bitmap_head_def = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32, %struct.bitmap_obstack* }
%struct.bitmap_element_def = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32, [2 x i64] }
%struct.bitmap_obstack = type { %struct.bitmap_element_def*, %struct.bitmap_head_def*, %struct.obstack }
%struct.obstack = type { i64, %struct._obstack_chunk*, i8*, i8*, i8*, i64, i32, %struct._obstack_chunk* (i8*, i64)*, void (i8*, %struct._obstack_chunk*)*, i8*, i8 }
%struct._obstack_chunk = type { i8*, %struct._obstack_chunk*, [4 x i8] }
%struct.splay_tree_s = type { %struct.splay_tree_node_s*, i32 (i64, i64)*, void (i64)*, void (i64)*, i8* (i32, i8*)*, void (i8*, i8*)*, i8* }
%struct.splay_tree_node_s = type { i64, i64, %struct.splay_tree_node_s*, %struct.splay_tree_node_s* }
%struct.pointer_set_t = type opaque
%struct.simple_ipa_opt_pass = type { %struct.opt_pass }
%struct.opt_pass = type { i32, i8*, i8 ()*, i32 ()*, %struct.opt_pass*, %struct.opt_pass*, i32, i32, i32, i32, i32, i32, i32 }
%struct.diagnostic_context = type { %struct.pretty_print_info*, [12 x i32], i8, i8, [870 x i32], i8, i8, void (%struct.diagnostic_context*, %struct.diagnostic_info*)*, void (%struct.diagnostic_context*, %struct.diagnostic_info*)*, void (i8*, [1 x %struct.__va_list_tag]*)*, %union.tree_node*, %struct.line_map*, i32, i8 }
%struct.pretty_print_info = type { %struct.output_buffer*, i8*, i32, i32, i32, %struct.pp_wrapping_mode_t, i8 (%struct.pretty_print_info*, %struct.text_info*, i8*, i32, i8, i8, i8)*, i8, i8, i8 }
%struct.output_buffer = type { %struct.obstack, %struct.obstack, %struct.obstack*, %struct.chunk_info*, %struct._IO_FILE*, i32, [128 x i8] }
%struct.chunk_info = type { %struct.chunk_info*, [60 x i8*] }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%struct.pp_wrapping_mode_t = type { i32, i32 }
%struct.text_info = type { i8*, [1 x %struct.__va_list_tag]*, i32, i32*, %union.tree_node** }
%struct.__va_list_tag = type { i32, i32, i8*, i8* }
%struct.diagnostic_info = type { %struct.text_info, i32, i32, %union.tree_node*, i32, i32 }
%union.tree_node = type { %struct.tree_function_decl }
%struct.tree_function_decl = type { %struct.tree_decl_non_common, %struct.function*, %union.tree_node*, %union.tree_node*, %union.tree_node*, i32 }
%struct.tree_decl_non_common = type { %struct.tree_decl_with_vis, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node* }
%struct.tree_decl_with_vis = type { %struct.tree_decl_with_rtl, %union.tree_node*, %union.tree_node*, %union.tree_node*, i24 }
%struct.tree_decl_with_rtl = type { %struct.tree_decl_common, %struct.rtx_def* }
%struct.tree_decl_common = type { %struct.tree_decl_minimal, %union.tree_node*, i40, i32, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.lang_decl* }
%struct.tree_decl_minimal = type { %struct.tree_common, i32, i32, %union.tree_node*, %union.tree_node* }
%struct.tree_common = type { %struct.tree_base, %union.tree_node*, %union.tree_node* }
%struct.tree_base = type { i64 }
%struct.lang_decl = type opaque
%struct.rtx_def = type opaque
%struct.function = type { %struct.eh_status*, %struct.control_flow_graph*, %struct.gimple_seq_d*, %struct.gimple_df*, %struct.loops*, %struct.htab*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.machine_function*, %struct.language_function*, %struct.htab*, i32, i32, i32, i32, i32, i32, i8*, i32 }
%struct.eh_status = type opaque
%struct.control_flow_graph = type { %struct.basic_block_def*, %struct.basic_block_def*, %struct.VEC_basic_block_gc*, i32, i32, i32, %struct.VEC_basic_block_gc*, i32, [2 x i32], [2 x i32], i32, i32 }
%struct.basic_block_def = type { %struct.VEC_edge_gc*, %struct.VEC_edge_gc*, i8*, %struct.loop*, [2 x %struct.et_node*], %struct.basic_block_def*, %struct.basic_block_def*, %union.basic_block_il_dependent, i64, i32, i32, i32, i32, i32 }
%struct.VEC_edge_gc = type { %struct.VEC_edge_base }
%struct.VEC_edge_base = type { i32, i32, [1 x %struct.edge_def*] }
%struct.edge_def = type { %struct.basic_block_def*, %struct.basic_block_def*, %union.edge_def_insns, i8*, %union.tree_node*, i32, i32, i32, i32, i64 }
%union.edge_def_insns = type { %struct.gimple_seq_d* }
%struct.loop = type opaque
%struct.et_node = type opaque
%union.basic_block_il_dependent = type { %struct.gimple_bb_info* }
%struct.gimple_bb_info = type { %struct.gimple_seq_d*, %struct.gimple_seq_d* }
%struct.VEC_basic_block_gc = type { %struct.VEC_basic_block_base }
%struct.VEC_basic_block_base = type { i32, i32, [1 x %struct.basic_block_def*] }
%struct.gimple_seq_d = type { %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d*, %struct.gimple_seq_d* }
%struct.gimple_seq_node_d = type { %union.gimple_statement_d*, %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d* }
%union.gimple_statement_d = type { %struct.gimple_statement_phi }
%struct.gimple_statement_phi = type { %struct.gimple_statement_base, i32, i32, %union.tree_node*, [1 x %struct.phi_arg_d] }
%struct.gimple_statement_base = type { i32, i32, i32, i32, %struct.basic_block_def*, %union.tree_node* }
%struct.phi_arg_d = type { %struct.ssa_use_operand_d, %union.tree_node*, i32 }
%struct.ssa_use_operand_d = type { %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d*, %union.anon, %union.tree_node** }
%union.anon = type { %union.gimple_statement_d* }
%struct.gimple_df = type { %struct.htab*, %struct.VEC_gimple_gc*, %struct.VEC_tree_gc*, %union.tree_node*, %struct.pt_solution, %struct.pt_solution, %struct.pointer_map_t*, %union.tree_node*, %struct.htab*, %struct.bitmap_head_def*, i8, %struct.ssa_operands }
%struct.VEC_gimple_gc = type { %struct.VEC_gimple_base }
%struct.VEC_gimple_base = type { i32, i32, [1 x %union.gimple_statement_d*] }
%struct.VEC_tree_gc = type { %struct.VEC_tree_base }
%struct.VEC_tree_base = type { i32, i32, [1 x %union.tree_node*] }
%struct.pt_solution = type { i8, %struct.bitmap_head_def* }
%struct.pointer_map_t = type opaque
%struct.ssa_operands = type { %struct.ssa_operand_memory_d*, i32, i32, i8, %struct.def_optype_d*, %struct.use_optype_d* }
%struct.ssa_operand_memory_d = type { %struct.ssa_operand_memory_d*, [1 x i8] }
%struct.def_optype_d = type { %struct.def_optype_d*, %union.tree_node** }
%struct.use_optype_d = type { %struct.use_optype_d*, %struct.ssa_use_operand_d }
%struct.loops = type opaque
%struct.machine_function = type { %struct.stack_local_entry*, i8*, i32, i32, [4 x i32], i32, %struct.machine_cfa_state, i32, i8 }
%struct.stack_local_entry = type opaque
%struct.machine_cfa_state = type { %struct.rtx_def*, i64 }
%struct.language_function = type opaque
%struct.htab = type { i32 (i8*)*, i32 (i8*, i8*)*, void (i8*)*, i8**, i64, i64, i64, i32, i32, i8* (i64, i64)*, void (i8*)*, i8*, i8* (i8*, i64, i64)*, void (i8*, i8*)*, i32 }
%struct.line_map = type { i8*, i32, i32, i32, i8, i8, i8 }
%struct.varpool_node = type { %union.tree_node*, %struct.varpool_node*, %struct.varpool_node*, %struct.varpool_node*, i32, i8 }
%struct.cgraph_node = type { %union.tree_node*, %struct.cgraph_edge*, %struct.cgraph_edge*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.htab*, i8*, %struct.VEC_ipa_opt_pass_heap*, %struct.cgraph_local_info, %struct.cgraph_global_info, %struct.cgraph_rtl_info, %struct.cgraph_clone_info, %struct.cgraph_thunk_info, i64, i32, i32, i32, i16 }
%struct.cgraph_edge = type { i64, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_edge*, %struct.cgraph_edge*, %struct.cgraph_edge*, %struct.cgraph_edge*, %union.gimple_statement_d*, i8*, i32, i32, i32, i32, i16, i8 }
%struct.VEC_ipa_opt_pass_heap = type { %struct.VEC_ipa_opt_pass_base }
%struct.VEC_ipa_opt_pass_base = type { i32, i32, [1 x %struct.ipa_opt_pass_d*] }
%struct.ipa_opt_pass_d = type { %struct.opt_pass, void ()*, void (%struct.cgraph_node_set_def*)*, void ()*, void (%struct.cgraph_node*)*, void (%struct.cgraph_node*, %union.gimple_statement_d**)*, i32, i32 (%struct.cgraph_node*)*, void (%struct.varpool_node*)* }
%struct.cgraph_node_set_def = type { %struct.htab*, %struct.VEC_cgraph_node_ptr_gc*, i8* }
%struct.VEC_cgraph_node_ptr_gc = type { %struct.VEC_cgraph_node_ptr_base }
%struct.VEC_cgraph_node_ptr_base = type { i32, i32, [1 x %struct.cgraph_node*] }
%struct.cgraph_local_info = type { %struct.lto_file_decl_data*, %struct.inline_summary, i8 }
%struct.lto_file_decl_data = type opaque
%struct.inline_summary = type { i64, i32, i32, i32, i32 }
%struct.cgraph_global_info = type { i64, i64, %struct.cgraph_node*, i32, i32, i32, i8 }
%struct.cgraph_rtl_info = type { i32 }
%struct.cgraph_clone_info = type { %struct.VEC_ipa_replace_map_p_gc*, %struct.bitmap_head_def*, %struct.bitmap_head_def* }
%struct.VEC_ipa_replace_map_p_gc = type { %struct.VEC_ipa_replace_map_p_base }
%struct.VEC_ipa_replace_map_p_base = type { i32, i32, [1 x %struct.ipa_replace_map*] }
%struct.ipa_replace_map = type { %union.tree_node*, %union.tree_node*, i8, i8 }
%struct.cgraph_thunk_info = type { i64, i64, %union.tree_node*, i8, i8, i8 }
%struct.tree_type = type { %struct.tree_common, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, i32, i32, i32, i32, %union.tree_node*, %union.tree_node*, %union.tree_type_symtab, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.lang_type* }
%union.tree_type_symtab = type { i8* }
%struct.lang_type = type opaque
%struct.cast = type { i32, %union.gimple_statement_d* }
%struct.tree_ssa_name = type { %struct.tree_common, %union.tree_node*, %union.gimple_statement_d*, i32, %struct.ptr_info_def*, %struct.ssa_use_operand_d }
%struct.ptr_info_def = type { %struct.pt_solution }
%struct.ssa_operand_iterator_d = type { i8, i32, %struct.def_optype_d*, %struct.use_optype_d*, i32, i32, %union.gimple_statement_d* }
%struct.bitmap_iterator = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32, i64 }
%struct.type_brand_s = type { i8*, i32 }
%struct.tree_identifier = type { %struct.tree_common, %struct.ht_identifier }
%struct.ht_identifier = type { i8*, i32, i32 }
%struct.tree_exp = type { %struct.tree_common, i32, %union.tree_node*, [1 x %union.tree_node*] }
%struct.tree_binfo = type { %struct.tree_common, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.VEC_tree_gc*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.VEC_tree_none }
%struct.VEC_tree_none = type { %struct.VEC_tree_base }
%struct.gimple_statement_with_ops = type { %struct.gimple_statement_with_ops_base, [1 x %union.tree_node*] }
%struct.gimple_statement_with_ops_base = type { %struct.gimple_statement_base, %struct.def_optype_d*, %struct.use_optype_d* }
%struct.gimple_statement_with_memory_ops_base = type { %struct.gimple_statement_with_ops_base, %union.tree_node*, %union.tree_node* }
%struct.gimple_stmt_iterator = type { %struct.gimple_seq_node_d*, %struct.gimple_seq_d*, %struct.basic_block_def* }
%struct.tree_list = type { %struct.tree_common, %union.tree_node*, %union.tree_node* }
%struct.gimple_statement_asm = type { %struct.gimple_statement_with_memory_ops_base, i8*, i8, i8, i8, i8, [1 x %union.tree_node*] }

@initialized = internal global i8 0, align 1, !dbg !0
@global_types_full_escape = internal global %struct.bitmap_head_def* null, align 8, !dbg !1962
@uid_to_addressof_down_map = internal global %struct.splay_tree_s* null, align 8, !dbg !1964
@visited_stmts = internal global %struct.pointer_set_t* null, align 8, !dbg !2002
@tree_code_type = external dso_local constant [0 x i32], align 4
@.str = private unnamed_addr constant [16 x i8] c"type-escape-var\00", align 1
@pass_ipa_type_escape = dso_local global %struct.simple_ipa_opt_pass { %struct.opt_pass { i32 2, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str, i32 0, i32 0), i8 ()* @gate_type_escape_vars, i32 ()* @type_escape_execute, %struct.opt_pass* null, %struct.opt_pass* null, i32 0, i32 18, i32 0, i32 0, i32 0, i32 0, i32 0 } }, align 8, !dbg !1934
@type_to_canon_type = internal global %struct.splay_tree_s* null, align 8, !dbg !2006
@all_canon_types = internal global %struct.splay_tree_s* null, align 8, !dbg !2008
@uid_to_canon_type = internal global %struct.splay_tree_s* null, align 8, !dbg !2010
@global_types_seen = internal global %struct.bitmap_head_def* null, align 8, !dbg !2012
@.str.1 = private unnamed_addr constant [10 x i8] c"<UNNAMED>\00", align 1
@.str.2 = private unnamed_addr constant [18 x i8] c"ipa-type-escape.c\00", align 1
@.str.3 = private unnamed_addr constant [2 x i8] c"?\00", align 1
@global_types_exposed_parameter = internal global %struct.bitmap_head_def* null, align 8, !dbg !2014
@gimple_ops_offset_ = external dso_local constant [0 x i64], align 8
@.str.4 = private unnamed_addr constant [11 x i8] c"./gimple.h\00", align 1
@gss_for_code_ = external dso_local constant [0 x i32], align 4
@.str.5 = private unnamed_addr constant [21 x i8] c"./tree-flow-inline.h\00", align 1
@gimple_rhs_class_table = external dso_local constant [0 x i8], align 1
@flag_ipa_type_escape = external dso_local global i32, align 4
@global_dc = external dso_local global %struct.diagnostic_context*, align 8
@varpool_nodes_queue = external dso_local global %struct.varpool_node*, align 8
@cgraph_nodes = external dso_local global %struct.cgraph_node*, align 8
@visited_nodes = internal global %struct.pointer_set_t* null, align 8, !dbg !2016
@ipa_obstack = internal global %struct.bitmap_obstack zeroinitializer, align 8, !dbg !2018
@been_there_done_that = internal global %struct.bitmap_head_def* null, align 8, !dbg !2020
@bitmap_tmp = internal global %struct.bitmap_head_def* null, align 8, !dbg !2022
@dump_file = external dso_local global %struct._IO_FILE*, align 8
@.str.6 = private unnamed_addr constant [9 x i8] c"type %d \00", align 1
@.str.7 = private unnamed_addr constant [10 x i8] c" escaped\0A\00", align 1
@.str.8 = private unnamed_addr constant [12 x i8] c" contained\0A\00", align 1
@uid_to_addressof_up_map = internal global %struct.splay_tree_s* null, align 8, !dbg !2024
@uid_to_subtype_map = internal global %struct.splay_tree_s* null, align 8, !dbg !2026
@global_trees = external dso_local global [131 x %union.tree_node*], align 16
@.str.9 = private unnamed_addr constant [23 x i8] c"\0A local analysis of %s\00", align 1
@bitmap_zero_bits = external dso_local global %struct.bitmap_element_def, align 8

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @ipa_type_escape_star_count_of_interesting_type(%union.tree_node* %type) #0 !dbg !2032 {
entry:
  %retval = alloca i32, align 4
  %type.addr = alloca %union.tree_node*, align 8
  %count = alloca i32, align 4
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %type.addr, metadata !2036, metadata !DIExpression()), !dbg !2037
  call void @llvm.dbg.declare(metadata i32* %count, metadata !2038, metadata !DIExpression()), !dbg !2039
  store i32 0, i32* %count, align 4, !dbg !2039
  %0 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !2040
  %tobool = icmp ne %union.tree_node* %0, null, !dbg !2040
  br i1 %tobool, label %if.end, label %if.then, !dbg !2042

if.then:                                          ; preds = %entry
  store i32 -1, i32* %retval, align 4, !dbg !2043
  br label %return, !dbg !2043

if.end:                                           ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !2044
  %type1 = bitcast %union.tree_node* %1 to %struct.tree_type*, !dbg !2044
  %main_variant = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1, i32 0, i32 16, !dbg !2044
  %2 = load %union.tree_node*, %union.tree_node** %main_variant, align 8, !dbg !2044
  store %union.tree_node* %2, %union.tree_node** %type.addr, align 8, !dbg !2045
  br label %while.cond, !dbg !2046

while.cond:                                       ; preds = %while.body, %if.end
  %3 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !2047
  %base = bitcast %union.tree_node* %3 to %struct.tree_base*, !dbg !2047
  %4 = bitcast %struct.tree_base* %base to i64*, !dbg !2047
  %bf.load = load i64, i64* %4, align 8, !dbg !2047
  %bf.clear = and i64 %bf.load, 65535, !dbg !2047
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !2047
  %cmp = icmp eq i32 %bf.cast, 10, !dbg !2047
  br i1 %cmp, label %lor.end, label %lor.rhs, !dbg !2047

lor.rhs:                                          ; preds = %while.cond
  %5 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !2047
  %base2 = bitcast %union.tree_node* %5 to %struct.tree_base*, !dbg !2047
  %6 = bitcast %struct.tree_base* %base2 to i64*, !dbg !2047
  %bf.load3 = load i64, i64* %6, align 8, !dbg !2047
  %bf.clear4 = and i64 %bf.load3, 65535, !dbg !2047
  %bf.cast5 = trunc i64 %bf.clear4 to i32, !dbg !2047
  %cmp6 = icmp eq i32 %bf.cast5, 12, !dbg !2047
  br label %lor.end, !dbg !2047

lor.end:                                          ; preds = %lor.rhs, %while.cond
  %7 = phi i1 [ true, %while.cond ], [ %cmp6, %lor.rhs ]
  br i1 %7, label %while.body, label %while.end, !dbg !2046

while.body:                                       ; preds = %lor.end
  %8 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !2048
  %common = bitcast %union.tree_node* %8 to %struct.tree_common*, !dbg !2048
  %type7 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !2048
  %9 = load %union.tree_node*, %union.tree_node** %type7, align 8, !dbg !2048
  %type8 = bitcast %union.tree_node* %9 to %struct.tree_type*, !dbg !2048
  %main_variant9 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type8, i32 0, i32 16, !dbg !2048
  %10 = load %union.tree_node*, %union.tree_node** %main_variant9, align 8, !dbg !2048
  store %union.tree_node* %10, %union.tree_node** %type.addr, align 8, !dbg !2050
  %11 = load i32, i32* %count, align 4, !dbg !2051
  %inc = add nsw i32 %11, 1, !dbg !2051
  store i32 %inc, i32* %count, align 4, !dbg !2051
  br label %while.cond, !dbg !2046, !llvm.loop !2052

while.end:                                        ; preds = %lor.end
  %12 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !2054
  %base10 = bitcast %union.tree_node* %12 to %struct.tree_base*, !dbg !2054
  %13 = bitcast %struct.tree_base* %base10 to i64*, !dbg !2054
  %bf.load11 = load i64, i64* %13, align 8, !dbg !2054
  %bf.clear12 = and i64 %bf.load11, 65535, !dbg !2054
  %bf.cast13 = trunc i64 %bf.clear12 to i32, !dbg !2054
  %cmp14 = icmp eq i32 %bf.cast13, 16, !dbg !2056
  br i1 %cmp14, label %if.then26, label %lor.lhs.false, !dbg !2057

lor.lhs.false:                                    ; preds = %while.end
  %14 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !2058
  %base15 = bitcast %union.tree_node* %14 to %struct.tree_base*, !dbg !2058
  %15 = bitcast %struct.tree_base* %base15 to i64*, !dbg !2058
  %bf.load16 = load i64, i64* %15, align 8, !dbg !2058
  %bf.clear17 = and i64 %bf.load16, 65535, !dbg !2058
  %bf.cast18 = trunc i64 %bf.clear17 to i32, !dbg !2058
  %cmp19 = icmp eq i32 %bf.cast18, 18, !dbg !2059
  br i1 %cmp19, label %if.then26, label %lor.lhs.false20, !dbg !2060

lor.lhs.false20:                                  ; preds = %lor.lhs.false
  %16 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !2061
  %base21 = bitcast %union.tree_node* %16 to %struct.tree_base*, !dbg !2061
  %17 = bitcast %struct.tree_base* %base21 to i64*, !dbg !2061
  %bf.load22 = load i64, i64* %17, align 8, !dbg !2061
  %bf.clear23 = and i64 %bf.load22, 65535, !dbg !2061
  %bf.cast24 = trunc i64 %bf.clear23 to i32, !dbg !2061
  %cmp25 = icmp eq i32 %bf.cast24, 17, !dbg !2062
  br i1 %cmp25, label %if.then26, label %if.else, !dbg !2063

if.then26:                                        ; preds = %lor.lhs.false20, %lor.lhs.false, %while.end
  %18 = load i32, i32* %count, align 4, !dbg !2064
  store i32 %18, i32* %retval, align 4, !dbg !2065
  br label %return, !dbg !2065

if.else:                                          ; preds = %lor.lhs.false20
  store i32 -1, i32* %retval, align 4, !dbg !2066
  br label %return, !dbg !2066

return:                                           ; preds = %if.else, %if.then26, %if.then
  %19 = load i32, i32* %retval, align 4, !dbg !2067
  ret i32 %19, !dbg !2067
}

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @ipa_type_escape_star_count_of_interesting_or_array_type(%union.tree_node* %type) #0 !dbg !2068 {
entry:
  %retval = alloca i32, align 4
  %type.addr = alloca %union.tree_node*, align 8
  %count = alloca i32, align 4
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %type.addr, metadata !2069, metadata !DIExpression()), !dbg !2070
  call void @llvm.dbg.declare(metadata i32* %count, metadata !2071, metadata !DIExpression()), !dbg !2072
  store i32 0, i32* %count, align 4, !dbg !2072
  %0 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !2073
  %tobool = icmp ne %union.tree_node* %0, null, !dbg !2073
  br i1 %tobool, label %if.end, label %if.then, !dbg !2075

if.then:                                          ; preds = %entry
  store i32 -1, i32* %retval, align 4, !dbg !2076
  br label %return, !dbg !2076

if.end:                                           ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !2077
  %type1 = bitcast %union.tree_node* %1 to %struct.tree_type*, !dbg !2077
  %main_variant = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1, i32 0, i32 16, !dbg !2077
  %2 = load %union.tree_node*, %union.tree_node** %main_variant, align 8, !dbg !2077
  store %union.tree_node* %2, %union.tree_node** %type.addr, align 8, !dbg !2078
  br label %while.cond, !dbg !2079

while.cond:                                       ; preds = %while.body, %if.end
  %3 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !2080
  %base = bitcast %union.tree_node* %3 to %struct.tree_base*, !dbg !2080
  %4 = bitcast %struct.tree_base* %base to i64*, !dbg !2080
  %bf.load = load i64, i64* %4, align 8, !dbg !2080
  %bf.clear = and i64 %bf.load, 65535, !dbg !2080
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !2080
  %cmp = icmp eq i32 %bf.cast, 10, !dbg !2080
  br i1 %cmp, label %lor.end, label %lor.lhs.false, !dbg !2080

lor.lhs.false:                                    ; preds = %while.cond
  %5 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !2080
  %base2 = bitcast %union.tree_node* %5 to %struct.tree_base*, !dbg !2080
  %6 = bitcast %struct.tree_base* %base2 to i64*, !dbg !2080
  %bf.load3 = load i64, i64* %6, align 8, !dbg !2080
  %bf.clear4 = and i64 %bf.load3, 65535, !dbg !2080
  %bf.cast5 = trunc i64 %bf.clear4 to i32, !dbg !2080
  %cmp6 = icmp eq i32 %bf.cast5, 12, !dbg !2080
  br i1 %cmp6, label %lor.end, label %lor.rhs, !dbg !2081

lor.rhs:                                          ; preds = %lor.lhs.false
  %7 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !2082
  %base7 = bitcast %union.tree_node* %7 to %struct.tree_base*, !dbg !2082
  %8 = bitcast %struct.tree_base* %base7 to i64*, !dbg !2082
  %bf.load8 = load i64, i64* %8, align 8, !dbg !2082
  %bf.clear9 = and i64 %bf.load8, 65535, !dbg !2082
  %bf.cast10 = trunc i64 %bf.clear9 to i32, !dbg !2082
  %cmp11 = icmp eq i32 %bf.cast10, 15, !dbg !2083
  br label %lor.end, !dbg !2081

lor.end:                                          ; preds = %lor.rhs, %lor.lhs.false, %while.cond
  %9 = phi i1 [ true, %lor.lhs.false ], [ true, %while.cond ], [ %cmp11, %lor.rhs ]
  br i1 %9, label %while.body, label %while.end, !dbg !2079

while.body:                                       ; preds = %lor.end
  %10 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !2084
  %common = bitcast %union.tree_node* %10 to %struct.tree_common*, !dbg !2084
  %type12 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !2084
  %11 = load %union.tree_node*, %union.tree_node** %type12, align 8, !dbg !2084
  %type13 = bitcast %union.tree_node* %11 to %struct.tree_type*, !dbg !2084
  %main_variant14 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type13, i32 0, i32 16, !dbg !2084
  %12 = load %union.tree_node*, %union.tree_node** %main_variant14, align 8, !dbg !2084
  store %union.tree_node* %12, %union.tree_node** %type.addr, align 8, !dbg !2086
  %13 = load i32, i32* %count, align 4, !dbg !2087
  %inc = add nsw i32 %13, 1, !dbg !2087
  store i32 %inc, i32* %count, align 4, !dbg !2087
  br label %while.cond, !dbg !2079, !llvm.loop !2088

while.end:                                        ; preds = %lor.end
  %14 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !2090
  %base15 = bitcast %union.tree_node* %14 to %struct.tree_base*, !dbg !2090
  %15 = bitcast %struct.tree_base* %base15 to i64*, !dbg !2090
  %bf.load16 = load i64, i64* %15, align 8, !dbg !2090
  %bf.clear17 = and i64 %bf.load16, 65535, !dbg !2090
  %bf.cast18 = trunc i64 %bf.clear17 to i32, !dbg !2090
  %cmp19 = icmp eq i32 %bf.cast18, 16, !dbg !2092
  br i1 %cmp19, label %if.then32, label %lor.lhs.false20, !dbg !2093

lor.lhs.false20:                                  ; preds = %while.end
  %16 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !2094
  %base21 = bitcast %union.tree_node* %16 to %struct.tree_base*, !dbg !2094
  %17 = bitcast %struct.tree_base* %base21 to i64*, !dbg !2094
  %bf.load22 = load i64, i64* %17, align 8, !dbg !2094
  %bf.clear23 = and i64 %bf.load22, 65535, !dbg !2094
  %bf.cast24 = trunc i64 %bf.clear23 to i32, !dbg !2094
  %cmp25 = icmp eq i32 %bf.cast24, 18, !dbg !2095
  br i1 %cmp25, label %if.then32, label %lor.lhs.false26, !dbg !2096

lor.lhs.false26:                                  ; preds = %lor.lhs.false20
  %18 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !2097
  %base27 = bitcast %union.tree_node* %18 to %struct.tree_base*, !dbg !2097
  %19 = bitcast %struct.tree_base* %base27 to i64*, !dbg !2097
  %bf.load28 = load i64, i64* %19, align 8, !dbg !2097
  %bf.clear29 = and i64 %bf.load28, 65535, !dbg !2097
  %bf.cast30 = trunc i64 %bf.clear29 to i32, !dbg !2097
  %cmp31 = icmp eq i32 %bf.cast30, 17, !dbg !2098
  br i1 %cmp31, label %if.then32, label %if.else, !dbg !2099

if.then32:                                        ; preds = %lor.lhs.false26, %lor.lhs.false20, %while.end
  %20 = load i32, i32* %count, align 4, !dbg !2100
  store i32 %20, i32* %retval, align 4, !dbg !2101
  br label %return, !dbg !2101

if.else:                                          ; preds = %lor.lhs.false26
  store i32 -1, i32* %retval, align 4, !dbg !2102
  br label %return, !dbg !2102

return:                                           ; preds = %if.else, %if.then32, %if.then
  %21 = load i32, i32* %retval, align 4, !dbg !2103
  ret i32 %21, !dbg !2103
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @ipa_type_escape_type_contained_p(%union.tree_node* %type) #0 !dbg !2104 {
entry:
  %retval = alloca i8, align 1
  %type.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %type.addr, metadata !2107, metadata !DIExpression()), !dbg !2108
  %0 = load i8, i8* @initialized, align 1, !dbg !2109
  %tobool = icmp ne i8 %0, 0, !dbg !2109
  br i1 %tobool, label %if.end, label %if.then, !dbg !2111

if.then:                                          ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !2112
  br label %return, !dbg !2112

if.end:                                           ; preds = %entry
  %1 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @global_types_full_escape, align 8, !dbg !2113
  %2 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !2114
  %call = call i32 @get_canon_type_uid(%union.tree_node* %2, i8 zeroext 1, i8 zeroext 0), !dbg !2115
  %call1 = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %1, i32 %call), !dbg !2116
  %tobool2 = icmp ne i32 %call1, 0, !dbg !2117
  %lnot = xor i1 %tobool2, true, !dbg !2117
  %lnot.ext = zext i1 %lnot to i32, !dbg !2117
  %conv = trunc i32 %lnot.ext to i8, !dbg !2117
  store i8 %conv, i8* %retval, align 1, !dbg !2118
  br label %return, !dbg !2118

return:                                           ; preds = %if.end, %if.then
  %3 = load i8, i8* %retval, align 1, !dbg !2119
  ret i8 %3, !dbg !2119
}

declare dso_local i32 @bitmap_bit_p(%struct.bitmap_head_def*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @get_canon_type_uid(%union.tree_node* %type, i8 zeroext %see_thru_ptrs, i8 zeroext %see_thru_arrays) #0 !dbg !2120 {
entry:
  %retval = alloca i32, align 4
  %type.addr = alloca %union.tree_node*, align 8
  %see_thru_ptrs.addr = alloca i8, align 1
  %see_thru_arrays.addr = alloca i8, align 1
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %type.addr, metadata !2123, metadata !DIExpression()), !dbg !2124
  store i8 %see_thru_ptrs, i8* %see_thru_ptrs.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %see_thru_ptrs.addr, metadata !2125, metadata !DIExpression()), !dbg !2126
  store i8 %see_thru_arrays, i8* %see_thru_arrays.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %see_thru_arrays.addr, metadata !2127, metadata !DIExpression()), !dbg !2128
  %0 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !2129
  %1 = load i8, i8* %see_thru_ptrs.addr, align 1, !dbg !2130
  %2 = load i8, i8* %see_thru_arrays.addr, align 1, !dbg !2131
  %call = call %union.tree_node* @get_canon_type(%union.tree_node* %0, i8 zeroext %1, i8 zeroext %2), !dbg !2132
  store %union.tree_node* %call, %union.tree_node** %type.addr, align 8, !dbg !2133
  %3 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !2134
  %tobool = icmp ne %union.tree_node* %3, null, !dbg !2134
  br i1 %tobool, label %if.then, label %if.else, !dbg !2136

if.then:                                          ; preds = %entry
  %4 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !2137
  %type1 = bitcast %union.tree_node* %4 to %struct.tree_type*, !dbg !2137
  %uid = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1, i32 0, i32 5, !dbg !2137
  %5 = load i32, i32* %uid, align 8, !dbg !2137
  store i32 %5, i32* %retval, align 4, !dbg !2138
  br label %return, !dbg !2138

if.else:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4, !dbg !2139
  br label %return, !dbg !2139

return:                                           ; preds = %if.else, %if.then
  %6 = load i32, i32* %retval, align 4, !dbg !2140
  ret i32 %6, !dbg !2140
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @ipa_type_escape_field_does_not_clobber_p(%union.tree_node* %record_type, %union.tree_node* %field_type) #0 !dbg !2141 {
entry:
  %retval = alloca i8, align 1
  %record_type.addr = alloca %union.tree_node*, align 8
  %field_type.addr = alloca %union.tree_node*, align 8
  %result = alloca %struct.splay_tree_node_s*, align 8
  %uid = alloca i32, align 4
  %field_type_map = alloca %struct.bitmap_head_def*, align 8
  store %union.tree_node* %record_type, %union.tree_node** %record_type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %record_type.addr, metadata !2144, metadata !DIExpression()), !dbg !2145
  store %union.tree_node* %field_type, %union.tree_node** %field_type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %field_type.addr, metadata !2146, metadata !DIExpression()), !dbg !2147
  call void @llvm.dbg.declare(metadata %struct.splay_tree_node_s** %result, metadata !2148, metadata !DIExpression()), !dbg !2149
  call void @llvm.dbg.declare(metadata i32* %uid, metadata !2150, metadata !DIExpression()), !dbg !2151
  %0 = load i8, i8* @initialized, align 1, !dbg !2152
  %tobool = icmp ne i8 %0, 0, !dbg !2152
  br i1 %tobool, label %if.end, label %if.then, !dbg !2154

if.then:                                          ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !2155
  br label %return, !dbg !2155

if.end:                                           ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %record_type.addr, align 8, !dbg !2156
  %type = bitcast %union.tree_node* %1 to %struct.tree_type*, !dbg !2156
  %main_variant = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type, i32 0, i32 16, !dbg !2156
  %2 = load %union.tree_node*, %union.tree_node** %main_variant, align 8, !dbg !2156
  store %union.tree_node* %2, %union.tree_node** %record_type.addr, align 8, !dbg !2157
  %3 = load %union.tree_node*, %union.tree_node** %field_type.addr, align 8, !dbg !2158
  %type1 = bitcast %union.tree_node* %3 to %struct.tree_type*, !dbg !2158
  %main_variant2 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1, i32 0, i32 16, !dbg !2158
  %4 = load %union.tree_node*, %union.tree_node** %main_variant2, align 8, !dbg !2158
  store %union.tree_node* %4, %union.tree_node** %field_type.addr, align 8, !dbg !2159
  br label %while.cond, !dbg !2160

while.cond:                                       ; preds = %if.end57, %if.end
  %5 = load %union.tree_node*, %union.tree_node** %record_type.addr, align 8, !dbg !2161
  %base = bitcast %union.tree_node* %5 to %struct.tree_base*, !dbg !2161
  %6 = bitcast %struct.tree_base* %base to i64*, !dbg !2161
  %bf.load = load i64, i64* %6, align 8, !dbg !2161
  %bf.clear = and i64 %bf.load, 65535, !dbg !2161
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !2161
  %cmp = icmp eq i32 %bf.cast, 10, !dbg !2161
  br i1 %cmp, label %lor.end, label %lor.rhs, !dbg !2161

lor.rhs:                                          ; preds = %while.cond
  %7 = load %union.tree_node*, %union.tree_node** %record_type.addr, align 8, !dbg !2161
  %base3 = bitcast %union.tree_node* %7 to %struct.tree_base*, !dbg !2161
  %8 = bitcast %struct.tree_base* %base3 to i64*, !dbg !2161
  %bf.load4 = load i64, i64* %8, align 8, !dbg !2161
  %bf.clear5 = and i64 %bf.load4, 65535, !dbg !2161
  %bf.cast6 = trunc i64 %bf.clear5 to i32, !dbg !2161
  %cmp7 = icmp eq i32 %bf.cast6, 12, !dbg !2161
  br label %lor.end, !dbg !2161

lor.end:                                          ; preds = %lor.rhs, %while.cond
  %9 = phi i1 [ true, %while.cond ], [ %cmp7, %lor.rhs ]
  br i1 %9, label %while.body, label %while.end58, !dbg !2160

while.body:                                       ; preds = %lor.end
  %10 = load %union.tree_node*, %union.tree_node** %record_type.addr, align 8, !dbg !2162
  %common = bitcast %union.tree_node* %10 to %struct.tree_common*, !dbg !2162
  %type8 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !2162
  %11 = load %union.tree_node*, %union.tree_node** %type8, align 8, !dbg !2162
  %type9 = bitcast %union.tree_node* %11 to %struct.tree_type*, !dbg !2162
  %main_variant10 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type9, i32 0, i32 16, !dbg !2162
  %12 = load %union.tree_node*, %union.tree_node** %main_variant10, align 8, !dbg !2162
  store %union.tree_node* %12, %union.tree_node** %record_type.addr, align 8, !dbg !2164
  %13 = load %union.tree_node*, %union.tree_node** %field_type.addr, align 8, !dbg !2165
  %base11 = bitcast %union.tree_node* %13 to %struct.tree_base*, !dbg !2165
  %14 = bitcast %struct.tree_base* %base11 to i64*, !dbg !2165
  %bf.load12 = load i64, i64* %14, align 8, !dbg !2165
  %bf.clear13 = and i64 %bf.load12, 65535, !dbg !2165
  %bf.cast14 = trunc i64 %bf.clear13 to i32, !dbg !2165
  %cmp15 = icmp eq i32 %bf.cast14, 10, !dbg !2165
  br i1 %cmp15, label %if.then21, label %lor.lhs.false, !dbg !2165

lor.lhs.false:                                    ; preds = %while.body
  %15 = load %union.tree_node*, %union.tree_node** %field_type.addr, align 8, !dbg !2165
  %base16 = bitcast %union.tree_node* %15 to %struct.tree_base*, !dbg !2165
  %16 = bitcast %struct.tree_base* %base16 to i64*, !dbg !2165
  %bf.load17 = load i64, i64* %16, align 8, !dbg !2165
  %bf.clear18 = and i64 %bf.load17, 65535, !dbg !2165
  %bf.cast19 = trunc i64 %bf.clear18 to i32, !dbg !2165
  %cmp20 = icmp eq i32 %bf.cast19, 12, !dbg !2165
  br i1 %cmp20, label %if.then21, label %if.else, !dbg !2167

if.then21:                                        ; preds = %lor.lhs.false, %while.body
  %17 = load %union.tree_node*, %union.tree_node** %field_type.addr, align 8, !dbg !2168
  %common22 = bitcast %union.tree_node* %17 to %struct.tree_common*, !dbg !2168
  %type23 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common22, i32 0, i32 2, !dbg !2168
  %18 = load %union.tree_node*, %union.tree_node** %type23, align 8, !dbg !2168
  %type24 = bitcast %union.tree_node* %18 to %struct.tree_type*, !dbg !2168
  %main_variant25 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type24, i32 0, i32 16, !dbg !2168
  %19 = load %union.tree_node*, %union.tree_node** %main_variant25, align 8, !dbg !2168
  store %union.tree_node* %19, %union.tree_node** %field_type.addr, align 8, !dbg !2169
  br label %if.end57, !dbg !2170

if.else:                                          ; preds = %lor.lhs.false
  %20 = load %union.tree_node*, %union.tree_node** %field_type.addr, align 8, !dbg !2171
  %base26 = bitcast %union.tree_node* %20 to %struct.tree_base*, !dbg !2171
  %21 = bitcast %struct.tree_base* %base26 to i64*, !dbg !2171
  %bf.load27 = load i64, i64* %21, align 8, !dbg !2171
  %bf.clear28 = and i64 %bf.load27, 65535, !dbg !2171
  %bf.cast29 = trunc i64 %bf.clear28 to i32, !dbg !2171
  %cmp30 = icmp eq i32 %bf.cast29, 18, !dbg !2173
  br i1 %cmp30, label %if.then37, label %lor.lhs.false31, !dbg !2174

lor.lhs.false31:                                  ; preds = %if.else
  %22 = load %union.tree_node*, %union.tree_node** %field_type.addr, align 8, !dbg !2175
  %base32 = bitcast %union.tree_node* %22 to %struct.tree_base*, !dbg !2175
  %23 = bitcast %struct.tree_base* %base32 to i64*, !dbg !2175
  %bf.load33 = load i64, i64* %23, align 8, !dbg !2175
  %bf.clear34 = and i64 %bf.load33, 65535, !dbg !2175
  %bf.cast35 = trunc i64 %bf.clear34 to i32, !dbg !2175
  %cmp36 = icmp eq i32 %bf.cast35, 17, !dbg !2176
  br i1 %cmp36, label %if.then37, label %if.else56, !dbg !2177

if.then37:                                        ; preds = %lor.lhs.false31, %if.else
  br label %while.cond38, !dbg !2178

while.cond38:                                     ; preds = %while.body51, %if.then37
  %24 = load %union.tree_node*, %union.tree_node** %record_type.addr, align 8, !dbg !2180
  %base39 = bitcast %union.tree_node* %24 to %struct.tree_base*, !dbg !2180
  %25 = bitcast %struct.tree_base* %base39 to i64*, !dbg !2180
  %bf.load40 = load i64, i64* %25, align 8, !dbg !2180
  %bf.clear41 = and i64 %bf.load40, 65535, !dbg !2180
  %bf.cast42 = trunc i64 %bf.clear41 to i32, !dbg !2180
  %cmp43 = icmp eq i32 %bf.cast42, 10, !dbg !2180
  br i1 %cmp43, label %lor.end50, label %lor.rhs44, !dbg !2180

lor.rhs44:                                        ; preds = %while.cond38
  %26 = load %union.tree_node*, %union.tree_node** %record_type.addr, align 8, !dbg !2180
  %base45 = bitcast %union.tree_node* %26 to %struct.tree_base*, !dbg !2180
  %27 = bitcast %struct.tree_base* %base45 to i64*, !dbg !2180
  %bf.load46 = load i64, i64* %27, align 8, !dbg !2180
  %bf.clear47 = and i64 %bf.load46, 65535, !dbg !2180
  %bf.cast48 = trunc i64 %bf.clear47 to i32, !dbg !2180
  %cmp49 = icmp eq i32 %bf.cast48, 12, !dbg !2180
  br label %lor.end50, !dbg !2180

lor.end50:                                        ; preds = %lor.rhs44, %while.cond38
  %28 = phi i1 [ true, %while.cond38 ], [ %cmp49, %lor.rhs44 ]
  br i1 %28, label %while.body51, label %while.end, !dbg !2178

while.body51:                                     ; preds = %lor.end50
  %29 = load %union.tree_node*, %union.tree_node** %record_type.addr, align 8, !dbg !2181
  %common52 = bitcast %union.tree_node* %29 to %struct.tree_common*, !dbg !2181
  %type53 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common52, i32 0, i32 2, !dbg !2181
  %30 = load %union.tree_node*, %union.tree_node** %type53, align 8, !dbg !2181
  %type54 = bitcast %union.tree_node* %30 to %struct.tree_type*, !dbg !2181
  %main_variant55 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type54, i32 0, i32 16, !dbg !2181
  %31 = load %union.tree_node*, %union.tree_node** %main_variant55, align 8, !dbg !2181
  store %union.tree_node* %31, %union.tree_node** %record_type.addr, align 8, !dbg !2182
  br label %while.cond38, !dbg !2178, !llvm.loop !2183

while.end:                                        ; preds = %lor.end50
  br label %while.end58, !dbg !2184

if.else56:                                        ; preds = %lor.lhs.false31
  store i8 1, i8* %retval, align 1, !dbg !2185
  br label %return, !dbg !2185

if.end57:                                         ; preds = %if.then21
  br label %while.cond, !dbg !2160, !llvm.loop !2186

while.end58:                                      ; preds = %while.end, %lor.end
  %32 = load %union.tree_node*, %union.tree_node** %record_type.addr, align 8, !dbg !2188
  %call = call %union.tree_node* @get_canon_type(%union.tree_node* %32, i8 zeroext 1, i8 zeroext 1), !dbg !2189
  store %union.tree_node* %call, %union.tree_node** %record_type.addr, align 8, !dbg !2190
  %33 = load %union.tree_node*, %union.tree_node** %record_type.addr, align 8, !dbg !2191
  %call59 = call zeroext i8 @ipa_type_escape_type_contained_p(%union.tree_node* %33), !dbg !2193
  %tobool60 = icmp ne i8 %call59, 0, !dbg !2193
  br i1 %tobool60, label %if.end62, label %if.then61, !dbg !2194

if.then61:                                        ; preds = %while.end58
  store i8 0, i8* %retval, align 1, !dbg !2195
  br label %return, !dbg !2195

if.end62:                                         ; preds = %while.end58
  %34 = load %union.tree_node*, %union.tree_node** %record_type.addr, align 8, !dbg !2196
  %type63 = bitcast %union.tree_node* %34 to %struct.tree_type*, !dbg !2196
  %uid64 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type63, i32 0, i32 5, !dbg !2196
  %35 = load i32, i32* %uid64, align 8, !dbg !2196
  store i32 %35, i32* %uid, align 4, !dbg !2197
  %36 = load %struct.splay_tree_s*, %struct.splay_tree_s** @uid_to_addressof_down_map, align 8, !dbg !2198
  %37 = load i32, i32* %uid, align 4, !dbg !2199
  %conv = sext i32 %37 to i64, !dbg !2200
  %call65 = call %struct.splay_tree_node_s* @splay_tree_lookup(%struct.splay_tree_s* %36, i64 %conv), !dbg !2201
  store %struct.splay_tree_node_s* %call65, %struct.splay_tree_node_s** %result, align 8, !dbg !2202
  %38 = load %struct.splay_tree_node_s*, %struct.splay_tree_node_s** %result, align 8, !dbg !2203
  %tobool66 = icmp ne %struct.splay_tree_node_s* %38, null, !dbg !2203
  br i1 %tobool66, label %if.then67, label %if.else72, !dbg !2205

if.then67:                                        ; preds = %if.end62
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %field_type_map, metadata !2206, metadata !DIExpression()), !dbg !2208
  %39 = load %struct.splay_tree_node_s*, %struct.splay_tree_node_s** %result, align 8, !dbg !2209
  %value = getelementptr inbounds %struct.splay_tree_node_s, %struct.splay_tree_node_s* %39, i32 0, i32 1, !dbg !2210
  %40 = load i64, i64* %value, align 8, !dbg !2210
  %41 = inttoptr i64 %40 to %struct.bitmap_head_def*, !dbg !2211
  store %struct.bitmap_head_def* %41, %struct.bitmap_head_def** %field_type_map, align 8, !dbg !2208
  %42 = load %union.tree_node*, %union.tree_node** %field_type.addr, align 8, !dbg !2212
  %call68 = call i32 @get_canon_type_uid(%union.tree_node* %42, i8 zeroext 1, i8 zeroext 1), !dbg !2213
  store i32 %call68, i32* %uid, align 4, !dbg !2214
  %43 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %field_type_map, align 8, !dbg !2215
  %44 = load i32, i32* %uid, align 4, !dbg !2216
  %call69 = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %43, i32 %44), !dbg !2217
  %tobool70 = icmp ne i32 %call69, 0, !dbg !2218
  %lnot = xor i1 %tobool70, true, !dbg !2218
  %lnot.ext = zext i1 %lnot to i32, !dbg !2218
  %conv71 = trunc i32 %lnot.ext to i8, !dbg !2218
  store i8 %conv71, i8* %retval, align 1, !dbg !2219
  br label %return, !dbg !2219

if.else72:                                        ; preds = %if.end62
  store i8 1, i8* %retval, align 1, !dbg !2220
  br label %return, !dbg !2220

return:                                           ; preds = %if.else72, %if.then67, %if.then61, %if.else56, %if.then
  %45 = load i8, i8* %retval, align 1, !dbg !2221
  ret i8 %45, !dbg !2221
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @get_canon_type(%union.tree_node* %type, i8 zeroext %see_thru_ptrs, i8 zeroext %see_thru_arrays) #0 !dbg !2222 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %type.addr = alloca %union.tree_node*, align 8
  %see_thru_ptrs.addr = alloca i8, align 1
  %see_thru_arrays.addr = alloca i8, align 1
  %result = alloca %struct.splay_tree_node_s*, align 8
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %type.addr, metadata !2225, metadata !DIExpression()), !dbg !2226
  store i8 %see_thru_ptrs, i8* %see_thru_ptrs.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %see_thru_ptrs.addr, metadata !2227, metadata !DIExpression()), !dbg !2228
  store i8 %see_thru_arrays, i8* %see_thru_arrays.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %see_thru_arrays.addr, metadata !2229, metadata !DIExpression()), !dbg !2230
  call void @llvm.dbg.declare(metadata %struct.splay_tree_node_s** %result, metadata !2231, metadata !DIExpression()), !dbg !2232
  %0 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !2233
  %tobool = icmp ne %union.tree_node* %0, null, !dbg !2233
  br i1 %tobool, label %lor.lhs.false, label %if.then, !dbg !2235

lor.lhs.false:                                    ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !2236
  %call = call zeroext i8 @type_to_consider(%union.tree_node* %1), !dbg !2237
  %tobool1 = icmp ne i8 %call, 0, !dbg !2237
  br i1 %tobool1, label %if.end, label %if.then, !dbg !2238

if.then:                                          ; preds = %lor.lhs.false, %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !2239
  br label %return, !dbg !2239

if.end:                                           ; preds = %lor.lhs.false
  %2 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !2240
  %type2 = bitcast %union.tree_node* %2 to %struct.tree_type*, !dbg !2240
  %main_variant = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type2, i32 0, i32 16, !dbg !2240
  %3 = load %union.tree_node*, %union.tree_node** %main_variant, align 8, !dbg !2240
  store %union.tree_node* %3, %union.tree_node** %type.addr, align 8, !dbg !2241
  %4 = load i8, i8* %see_thru_arrays.addr, align 1, !dbg !2242
  %tobool3 = icmp ne i8 %4, 0, !dbg !2242
  br i1 %tobool3, label %if.then4, label %if.else, !dbg !2244

if.then4:                                         ; preds = %if.end
  br label %while.cond, !dbg !2245

while.cond:                                       ; preds = %while.body, %if.then4
  %5 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !2246
  %base = bitcast %union.tree_node* %5 to %struct.tree_base*, !dbg !2246
  %6 = bitcast %struct.tree_base* %base to i64*, !dbg !2246
  %bf.load = load i64, i64* %6, align 8, !dbg !2246
  %bf.clear = and i64 %bf.load, 65535, !dbg !2246
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !2246
  %cmp = icmp eq i32 %bf.cast, 10, !dbg !2246
  br i1 %cmp, label %lor.end, label %lor.lhs.false5, !dbg !2246

lor.lhs.false5:                                   ; preds = %while.cond
  %7 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !2246
  %base6 = bitcast %union.tree_node* %7 to %struct.tree_base*, !dbg !2246
  %8 = bitcast %struct.tree_base* %base6 to i64*, !dbg !2246
  %bf.load7 = load i64, i64* %8, align 8, !dbg !2246
  %bf.clear8 = and i64 %bf.load7, 65535, !dbg !2246
  %bf.cast9 = trunc i64 %bf.clear8 to i32, !dbg !2246
  %cmp10 = icmp eq i32 %bf.cast9, 12, !dbg !2246
  br i1 %cmp10, label %lor.end, label %lor.rhs, !dbg !2247

lor.rhs:                                          ; preds = %lor.lhs.false5
  %9 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !2248
  %base11 = bitcast %union.tree_node* %9 to %struct.tree_base*, !dbg !2248
  %10 = bitcast %struct.tree_base* %base11 to i64*, !dbg !2248
  %bf.load12 = load i64, i64* %10, align 8, !dbg !2248
  %bf.clear13 = and i64 %bf.load12, 65535, !dbg !2248
  %bf.cast14 = trunc i64 %bf.clear13 to i32, !dbg !2248
  %cmp15 = icmp eq i32 %bf.cast14, 15, !dbg !2249
  br label %lor.end, !dbg !2247

lor.end:                                          ; preds = %lor.rhs, %lor.lhs.false5, %while.cond
  %11 = phi i1 [ true, %lor.lhs.false5 ], [ true, %while.cond ], [ %cmp15, %lor.rhs ]
  br i1 %11, label %while.body, label %while.end, !dbg !2245

while.body:                                       ; preds = %lor.end
  %12 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !2250
  %common = bitcast %union.tree_node* %12 to %struct.tree_common*, !dbg !2250
  %type16 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !2250
  %13 = load %union.tree_node*, %union.tree_node** %type16, align 8, !dbg !2250
  %type17 = bitcast %union.tree_node* %13 to %struct.tree_type*, !dbg !2250
  %main_variant18 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type17, i32 0, i32 16, !dbg !2250
  %14 = load %union.tree_node*, %union.tree_node** %main_variant18, align 8, !dbg !2250
  store %union.tree_node* %14, %union.tree_node** %type.addr, align 8, !dbg !2251
  br label %while.cond, !dbg !2245, !llvm.loop !2252

while.end:                                        ; preds = %lor.end
  br label %if.end41, !dbg !2245

if.else:                                          ; preds = %if.end
  %15 = load i8, i8* %see_thru_ptrs.addr, align 1, !dbg !2253
  %tobool19 = icmp ne i8 %15, 0, !dbg !2253
  br i1 %tobool19, label %if.then20, label %if.end40, !dbg !2255

if.then20:                                        ; preds = %if.else
  br label %while.cond21, !dbg !2256

while.cond21:                                     ; preds = %while.body34, %if.then20
  %16 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !2257
  %base22 = bitcast %union.tree_node* %16 to %struct.tree_base*, !dbg !2257
  %17 = bitcast %struct.tree_base* %base22 to i64*, !dbg !2257
  %bf.load23 = load i64, i64* %17, align 8, !dbg !2257
  %bf.clear24 = and i64 %bf.load23, 65535, !dbg !2257
  %bf.cast25 = trunc i64 %bf.clear24 to i32, !dbg !2257
  %cmp26 = icmp eq i32 %bf.cast25, 10, !dbg !2257
  br i1 %cmp26, label %lor.end33, label %lor.rhs27, !dbg !2257

lor.rhs27:                                        ; preds = %while.cond21
  %18 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !2257
  %base28 = bitcast %union.tree_node* %18 to %struct.tree_base*, !dbg !2257
  %19 = bitcast %struct.tree_base* %base28 to i64*, !dbg !2257
  %bf.load29 = load i64, i64* %19, align 8, !dbg !2257
  %bf.clear30 = and i64 %bf.load29, 65535, !dbg !2257
  %bf.cast31 = trunc i64 %bf.clear30 to i32, !dbg !2257
  %cmp32 = icmp eq i32 %bf.cast31, 12, !dbg !2257
  br label %lor.end33, !dbg !2257

lor.end33:                                        ; preds = %lor.rhs27, %while.cond21
  %20 = phi i1 [ true, %while.cond21 ], [ %cmp32, %lor.rhs27 ]
  br i1 %20, label %while.body34, label %while.end39, !dbg !2256

while.body34:                                     ; preds = %lor.end33
  %21 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !2258
  %common35 = bitcast %union.tree_node* %21 to %struct.tree_common*, !dbg !2258
  %type36 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common35, i32 0, i32 2, !dbg !2258
  %22 = load %union.tree_node*, %union.tree_node** %type36, align 8, !dbg !2258
  %type37 = bitcast %union.tree_node* %22 to %struct.tree_type*, !dbg !2258
  %main_variant38 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type37, i32 0, i32 16, !dbg !2258
  %23 = load %union.tree_node*, %union.tree_node** %main_variant38, align 8, !dbg !2258
  store %union.tree_node* %23, %union.tree_node** %type.addr, align 8, !dbg !2259
  br label %while.cond21, !dbg !2256, !llvm.loop !2260

while.end39:                                      ; preds = %lor.end33
  br label %if.end40, !dbg !2256

if.end40:                                         ; preds = %while.end39, %if.else
  br label %if.end41

if.end41:                                         ; preds = %if.end40, %while.end
  %24 = load %struct.splay_tree_s*, %struct.splay_tree_s** @type_to_canon_type, align 8, !dbg !2261
  %25 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !2262
  %26 = ptrtoint %union.tree_node* %25 to i64, !dbg !2263
  %call42 = call %struct.splay_tree_node_s* @splay_tree_lookup(%struct.splay_tree_s* %24, i64 %26), !dbg !2264
  store %struct.splay_tree_node_s* %call42, %struct.splay_tree_node_s** %result, align 8, !dbg !2265
  %27 = load %struct.splay_tree_node_s*, %struct.splay_tree_node_s** %result, align 8, !dbg !2266
  %cmp43 = icmp eq %struct.splay_tree_node_s* %27, null, !dbg !2268
  br i1 %cmp43, label %if.then44, label %if.else46, !dbg !2269

if.then44:                                        ; preds = %if.end41
  %28 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !2270
  %call45 = call %union.tree_node* @discover_unique_type(%union.tree_node* %28), !dbg !2271
  store %union.tree_node* %call45, %union.tree_node** %retval, align 8, !dbg !2272
  br label %return, !dbg !2272

if.else46:                                        ; preds = %if.end41
  %29 = load %struct.splay_tree_node_s*, %struct.splay_tree_node_s** %result, align 8, !dbg !2273
  %value = getelementptr inbounds %struct.splay_tree_node_s, %struct.splay_tree_node_s* %29, i32 0, i32 1, !dbg !2274
  %30 = load i64, i64* %value, align 8, !dbg !2274
  %31 = inttoptr i64 %30 to %union.tree_node*, !dbg !2275
  store %union.tree_node* %31, %union.tree_node** %retval, align 8, !dbg !2276
  br label %return, !dbg !2276

return:                                           ; preds = %if.else46, %if.then44, %if.then
  %32 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !2277
  ret %union.tree_node* %32, !dbg !2277
}

declare dso_local %struct.splay_tree_node_s* @splay_tree_lookup(%struct.splay_tree_s*, i64) #2

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @is_array_access_through_pointer_and_index(i32 %code, %union.tree_node* %op0, %union.tree_node* %op1, %union.tree_node** %base, %union.tree_node** %offset, %union.gimple_statement_d** %offset_cast_stmt) #0 !dbg !2278 {
entry:
  %retval = alloca i8, align 1
  %code.addr = alloca i32, align 4
  %op0.addr = alloca %union.tree_node*, align 8
  %op1.addr = alloca %union.tree_node*, align 8
  %base.addr = alloca %union.tree_node**, align 8
  %offset.addr = alloca %union.tree_node**, align 8
  %offset_cast_stmt.addr = alloca %union.gimple_statement_d**, align 8
  %before_cast = alloca %union.tree_node*, align 8
  %before_cast_def_stmt = alloca %union.gimple_statement_d*, align 8
  %op0_cast = alloca %struct.cast, align 8
  %op1_cast = alloca %struct.cast, align 8
  %op0type = alloca %union.tree_node*, align 8
  %op1type = alloca %union.tree_node*, align 8
  %arg0 = alloca %union.tree_node*, align 8
  %arg1 = alloca %union.tree_node*, align 8
  %unit_size = alloca %union.tree_node*, align 8
  store i32 %code, i32* %code.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %code.addr, metadata !2282, metadata !DIExpression()), !dbg !2283
  store %union.tree_node* %op0, %union.tree_node** %op0.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %op0.addr, metadata !2284, metadata !DIExpression()), !dbg !2285
  store %union.tree_node* %op1, %union.tree_node** %op1.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %op1.addr, metadata !2286, metadata !DIExpression()), !dbg !2287
  store %union.tree_node** %base, %union.tree_node*** %base.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %base.addr, metadata !2288, metadata !DIExpression()), !dbg !2289
  store %union.tree_node** %offset, %union.tree_node*** %offset.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %offset.addr, metadata !2290, metadata !DIExpression()), !dbg !2291
  store %union.gimple_statement_d** %offset_cast_stmt, %union.gimple_statement_d*** %offset_cast_stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d*** %offset_cast_stmt.addr, metadata !2292, metadata !DIExpression()), !dbg !2293
  call void @llvm.dbg.declare(metadata %union.tree_node** %before_cast, metadata !2294, metadata !DIExpression()), !dbg !2295
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %before_cast_def_stmt, metadata !2296, metadata !DIExpression()), !dbg !2297
  call void @llvm.dbg.declare(metadata %struct.cast* %op0_cast, metadata !2298, metadata !DIExpression()), !dbg !2299
  call void @llvm.dbg.declare(metadata %struct.cast* %op1_cast, metadata !2300, metadata !DIExpression()), !dbg !2301
  %0 = load %union.tree_node**, %union.tree_node*** %base.addr, align 8, !dbg !2302
  store %union.tree_node* null, %union.tree_node** %0, align 8, !dbg !2303
  %1 = load %union.tree_node**, %union.tree_node*** %offset.addr, align 8, !dbg !2304
  store %union.tree_node* null, %union.tree_node** %1, align 8, !dbg !2305
  %2 = load %union.gimple_statement_d**, %union.gimple_statement_d*** %offset_cast_stmt.addr, align 8, !dbg !2306
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %2, align 8, !dbg !2307
  %3 = load i32, i32* %code.addr, align 4, !dbg !2308
  %cmp = icmp eq i32 %3, 66, !dbg !2310
  br i1 %cmp, label %if.then, label %if.else30, !dbg !2311

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata %union.tree_node** %op0type, metadata !2312, metadata !DIExpression()), !dbg !2314
  %4 = load %union.tree_node*, %union.tree_node** %op0.addr, align 8, !dbg !2315
  %common = bitcast %union.tree_node* %4 to %struct.tree_common*, !dbg !2315
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !2315
  %5 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !2315
  %type1 = bitcast %union.tree_node* %5 to %struct.tree_type*, !dbg !2315
  %main_variant = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1, i32 0, i32 16, !dbg !2315
  %6 = load %union.tree_node*, %union.tree_node** %main_variant, align 8, !dbg !2315
  store %union.tree_node* %6, %union.tree_node** %op0type, align 8, !dbg !2314
  call void @llvm.dbg.declare(metadata %union.tree_node** %op1type, metadata !2316, metadata !DIExpression()), !dbg !2317
  %7 = load %union.tree_node*, %union.tree_node** %op1.addr, align 8, !dbg !2318
  %common2 = bitcast %union.tree_node* %7 to %struct.tree_common*, !dbg !2318
  %type3 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common2, i32 0, i32 2, !dbg !2318
  %8 = load %union.tree_node*, %union.tree_node** %type3, align 8, !dbg !2318
  %type4 = bitcast %union.tree_node* %8 to %struct.tree_type*, !dbg !2318
  %main_variant5 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type4, i32 0, i32 16, !dbg !2318
  %9 = load %union.tree_node*, %union.tree_node** %main_variant5, align 8, !dbg !2318
  store %union.tree_node* %9, %union.tree_node** %op1type, align 8, !dbg !2317
  %10 = load %union.tree_node*, %union.tree_node** %op0type, align 8, !dbg !2319
  %base6 = bitcast %union.tree_node* %10 to %struct.tree_base*, !dbg !2319
  %11 = bitcast %struct.tree_base* %base6 to i64*, !dbg !2319
  %bf.load = load i64, i64* %11, align 8, !dbg !2319
  %bf.clear = and i64 %bf.load, 65535, !dbg !2319
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !2319
  %cmp7 = icmp eq i32 %bf.cast, 10, !dbg !2319
  br i1 %cmp7, label %land.lhs.true, label %lor.lhs.false, !dbg !2319

lor.lhs.false:                                    ; preds = %if.then
  %12 = load %union.tree_node*, %union.tree_node** %op0type, align 8, !dbg !2319
  %base8 = bitcast %union.tree_node* %12 to %struct.tree_base*, !dbg !2319
  %13 = bitcast %struct.tree_base* %base8 to i64*, !dbg !2319
  %bf.load9 = load i64, i64* %13, align 8, !dbg !2319
  %bf.clear10 = and i64 %bf.load9, 65535, !dbg !2319
  %bf.cast11 = trunc i64 %bf.clear10 to i32, !dbg !2319
  %cmp12 = icmp eq i32 %bf.cast11, 12, !dbg !2319
  br i1 %cmp12, label %land.lhs.true, label %if.else, !dbg !2321

land.lhs.true:                                    ; preds = %lor.lhs.false, %if.then
  %14 = load %union.tree_node*, %union.tree_node** %op1type, align 8, !dbg !2322
  %tobool = icmp ne %union.tree_node* %14, null, !dbg !2322
  br i1 %tobool, label %if.then13, label %if.else, !dbg !2323

if.then13:                                        ; preds = %land.lhs.true
  %15 = load %union.tree_node*, %union.tree_node** %op0.addr, align 8, !dbg !2324
  %16 = load %union.tree_node**, %union.tree_node*** %base.addr, align 8, !dbg !2326
  store %union.tree_node* %15, %union.tree_node** %16, align 8, !dbg !2327
  %17 = load %union.tree_node*, %union.tree_node** %op1.addr, align 8, !dbg !2328
  %18 = load %union.tree_node**, %union.tree_node*** %offset.addr, align 8, !dbg !2329
  store %union.tree_node* %17, %union.tree_node** %18, align 8, !dbg !2330
  br label %if.end29, !dbg !2331

if.else:                                          ; preds = %land.lhs.true, %lor.lhs.false
  %19 = load %union.tree_node*, %union.tree_node** %op1type, align 8, !dbg !2332
  %base14 = bitcast %union.tree_node* %19 to %struct.tree_base*, !dbg !2332
  %20 = bitcast %struct.tree_base* %base14 to i64*, !dbg !2332
  %bf.load15 = load i64, i64* %20, align 8, !dbg !2332
  %bf.clear16 = and i64 %bf.load15, 65535, !dbg !2332
  %bf.cast17 = trunc i64 %bf.clear16 to i32, !dbg !2332
  %cmp18 = icmp eq i32 %bf.cast17, 10, !dbg !2332
  br i1 %cmp18, label %land.lhs.true25, label %lor.lhs.false19, !dbg !2332

lor.lhs.false19:                                  ; preds = %if.else
  %21 = load %union.tree_node*, %union.tree_node** %op1type, align 8, !dbg !2332
  %base20 = bitcast %union.tree_node* %21 to %struct.tree_base*, !dbg !2332
  %22 = bitcast %struct.tree_base* %base20 to i64*, !dbg !2332
  %bf.load21 = load i64, i64* %22, align 8, !dbg !2332
  %bf.clear22 = and i64 %bf.load21, 65535, !dbg !2332
  %bf.cast23 = trunc i64 %bf.clear22 to i32, !dbg !2332
  %cmp24 = icmp eq i32 %bf.cast23, 12, !dbg !2332
  br i1 %cmp24, label %land.lhs.true25, label %if.else28, !dbg !2334

land.lhs.true25:                                  ; preds = %lor.lhs.false19, %if.else
  %23 = load %union.tree_node*, %union.tree_node** %op0type, align 8, !dbg !2335
  %tobool26 = icmp ne %union.tree_node* %23, null, !dbg !2335
  br i1 %tobool26, label %if.then27, label %if.else28, !dbg !2336

if.then27:                                        ; preds = %land.lhs.true25
  %24 = load %union.tree_node*, %union.tree_node** %op1.addr, align 8, !dbg !2337
  %25 = load %union.tree_node**, %union.tree_node*** %base.addr, align 8, !dbg !2339
  store %union.tree_node* %24, %union.tree_node** %25, align 8, !dbg !2340
  %26 = load %union.tree_node*, %union.tree_node** %op0.addr, align 8, !dbg !2341
  %27 = load %union.tree_node**, %union.tree_node*** %offset.addr, align 8, !dbg !2342
  store %union.tree_node* %26, %union.tree_node** %27, align 8, !dbg !2343
  br label %if.end, !dbg !2344

if.else28:                                        ; preds = %land.lhs.true25, %lor.lhs.false19
  store i8 0, i8* %retval, align 1, !dbg !2345
  br label %return, !dbg !2345

if.end:                                           ; preds = %if.then27
  br label %if.end29

if.end29:                                         ; preds = %if.end, %if.then13
  br label %if.end53, !dbg !2346

if.else30:                                        ; preds = %entry
  %type31 = getelementptr inbounds %struct.cast, %struct.cast* %op1_cast, i32 0, i32 0, !dbg !2347
  store i32 0, i32* %type31, align 8, !dbg !2349
  %type32 = getelementptr inbounds %struct.cast, %struct.cast* %op0_cast, i32 0, i32 0, !dbg !2350
  store i32 0, i32* %type32, align 8, !dbg !2351
  %stmt = getelementptr inbounds %struct.cast, %struct.cast* %op1_cast, i32 0, i32 1, !dbg !2352
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %stmt, align 8, !dbg !2353
  %stmt33 = getelementptr inbounds %struct.cast, %struct.cast* %op0_cast, i32 0, i32 1, !dbg !2354
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %stmt33, align 8, !dbg !2355
  %call = call %struct.pointer_set_t* @pointer_set_create(), !dbg !2356
  store %struct.pointer_set_t* %call, %struct.pointer_set_t** @visited_stmts, align 8, !dbg !2357
  %28 = load %union.tree_node*, %union.tree_node** %op0.addr, align 8, !dbg !2358
  %29 = bitcast %struct.cast* %op0_cast to i8*, !dbg !2359
  call void @walk_use_def_chains(%union.tree_node* %28, i8 (%union.tree_node*, %union.gimple_statement_d*, i8*)* @is_cast_from_non_pointer, i8* %29, i8 zeroext 0), !dbg !2360
  %30 = load %struct.pointer_set_t*, %struct.pointer_set_t** @visited_stmts, align 8, !dbg !2361
  call void @pointer_set_destroy(%struct.pointer_set_t* %30), !dbg !2362
  %call34 = call %struct.pointer_set_t* @pointer_set_create(), !dbg !2363
  store %struct.pointer_set_t* %call34, %struct.pointer_set_t** @visited_stmts, align 8, !dbg !2364
  %31 = load %union.tree_node*, %union.tree_node** %op1.addr, align 8, !dbg !2365
  %32 = bitcast %struct.cast* %op1_cast to i8*, !dbg !2366
  call void @walk_use_def_chains(%union.tree_node* %31, i8 (%union.tree_node*, %union.gimple_statement_d*, i8*)* @is_cast_from_non_pointer, i8* %32, i8 zeroext 0), !dbg !2367
  %33 = load %struct.pointer_set_t*, %struct.pointer_set_t** @visited_stmts, align 8, !dbg !2368
  call void @pointer_set_destroy(%struct.pointer_set_t* %33), !dbg !2369
  %type35 = getelementptr inbounds %struct.cast, %struct.cast* %op0_cast, i32 0, i32 0, !dbg !2370
  %34 = load i32, i32* %type35, align 8, !dbg !2370
  %cmp36 = icmp eq i32 %34, 1, !dbg !2372
  br i1 %cmp36, label %land.lhs.true37, label %if.else42, !dbg !2373

land.lhs.true37:                                  ; preds = %if.else30
  %type38 = getelementptr inbounds %struct.cast, %struct.cast* %op1_cast, i32 0, i32 0, !dbg !2374
  %35 = load i32, i32* %type38, align 8, !dbg !2374
  %cmp39 = icmp eq i32 %35, 0, !dbg !2375
  br i1 %cmp39, label %if.then40, label %if.else42, !dbg !2376

if.then40:                                        ; preds = %land.lhs.true37
  %36 = load %union.tree_node*, %union.tree_node** %op1.addr, align 8, !dbg !2377
  %37 = load %union.tree_node**, %union.tree_node*** %base.addr, align 8, !dbg !2379
  store %union.tree_node* %36, %union.tree_node** %37, align 8, !dbg !2380
  %38 = load %union.tree_node*, %union.tree_node** %op0.addr, align 8, !dbg !2381
  %39 = load %union.tree_node**, %union.tree_node*** %offset.addr, align 8, !dbg !2382
  store %union.tree_node* %38, %union.tree_node** %39, align 8, !dbg !2383
  %stmt41 = getelementptr inbounds %struct.cast, %struct.cast* %op0_cast, i32 0, i32 1, !dbg !2384
  %40 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt41, align 8, !dbg !2384
  %41 = load %union.gimple_statement_d**, %union.gimple_statement_d*** %offset_cast_stmt.addr, align 8, !dbg !2385
  store %union.gimple_statement_d* %40, %union.gimple_statement_d** %41, align 8, !dbg !2386
  br label %if.end52, !dbg !2387

if.else42:                                        ; preds = %land.lhs.true37, %if.else30
  %type43 = getelementptr inbounds %struct.cast, %struct.cast* %op0_cast, i32 0, i32 0, !dbg !2388
  %42 = load i32, i32* %type43, align 8, !dbg !2388
  %cmp44 = icmp eq i32 %42, 0, !dbg !2390
  br i1 %cmp44, label %land.lhs.true45, label %if.else50, !dbg !2391

land.lhs.true45:                                  ; preds = %if.else42
  %type46 = getelementptr inbounds %struct.cast, %struct.cast* %op1_cast, i32 0, i32 0, !dbg !2392
  %43 = load i32, i32* %type46, align 8, !dbg !2392
  %cmp47 = icmp eq i32 %43, 1, !dbg !2393
  br i1 %cmp47, label %if.then48, label %if.else50, !dbg !2394

if.then48:                                        ; preds = %land.lhs.true45
  %44 = load %union.tree_node*, %union.tree_node** %op0.addr, align 8, !dbg !2395
  %45 = load %union.tree_node**, %union.tree_node*** %base.addr, align 8, !dbg !2397
  store %union.tree_node* %44, %union.tree_node** %45, align 8, !dbg !2398
  %46 = load %union.tree_node*, %union.tree_node** %op1.addr, align 8, !dbg !2399
  %47 = load %union.tree_node**, %union.tree_node*** %offset.addr, align 8, !dbg !2400
  store %union.tree_node* %46, %union.tree_node** %47, align 8, !dbg !2401
  %stmt49 = getelementptr inbounds %struct.cast, %struct.cast* %op1_cast, i32 0, i32 1, !dbg !2402
  %48 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt49, align 8, !dbg !2402
  %49 = load %union.gimple_statement_d**, %union.gimple_statement_d*** %offset_cast_stmt.addr, align 8, !dbg !2403
  store %union.gimple_statement_d* %48, %union.gimple_statement_d** %49, align 8, !dbg !2404
  br label %if.end51, !dbg !2405

if.else50:                                        ; preds = %land.lhs.true45, %if.else42
  store i8 0, i8* %retval, align 1, !dbg !2406
  br label %return, !dbg !2406

if.end51:                                         ; preds = %if.then48
  br label %if.end52

if.end52:                                         ; preds = %if.end51, %if.then40
  br label %if.end53

if.end53:                                         ; preds = %if.end52, %if.end29
  %50 = load %union.gimple_statement_d**, %union.gimple_statement_d*** %offset_cast_stmt.addr, align 8, !dbg !2407
  %51 = load %union.gimple_statement_d*, %union.gimple_statement_d** %50, align 8, !dbg !2409
  %tobool54 = icmp ne %union.gimple_statement_d* %51, null, !dbg !2409
  br i1 %tobool54, label %if.then55, label %if.else70, !dbg !2410

if.then55:                                        ; preds = %if.end53
  %52 = load %union.gimple_statement_d**, %union.gimple_statement_d*** %offset_cast_stmt.addr, align 8, !dbg !2411
  %53 = load %union.gimple_statement_d*, %union.gimple_statement_d** %52, align 8, !dbg !2411
  %call56 = call %union.tree_node* @single_ssa_tree_operand(%union.gimple_statement_d* %53, i32 1), !dbg !2411
  store %union.tree_node* %call56, %union.tree_node** %before_cast, align 8, !dbg !2413
  %54 = load %union.tree_node*, %union.tree_node** %before_cast, align 8, !dbg !2414
  %tobool57 = icmp ne %union.tree_node* %54, null, !dbg !2414
  br i1 %tobool57, label %if.end59, label %if.then58, !dbg !2416

if.then58:                                        ; preds = %if.then55
  store i8 0, i8* %retval, align 1, !dbg !2417
  br label %return, !dbg !2417

if.end59:                                         ; preds = %if.then55
  %55 = load %union.tree_node*, %union.tree_node** %before_cast, align 8, !dbg !2418
  %base60 = bitcast %union.tree_node* %55 to %struct.tree_base*, !dbg !2418
  %56 = bitcast %struct.tree_base* %base60 to i64*, !dbg !2418
  %bf.load61 = load i64, i64* %56, align 8, !dbg !2418
  %bf.lshr = lshr i64 %bf.load61, 32, !dbg !2418
  %bf.clear62 = and i64 %bf.lshr, 1, !dbg !2418
  %bf.cast63 = trunc i64 %bf.clear62 to i32, !dbg !2418
  %tobool64 = icmp ne i32 %bf.cast63, 0, !dbg !2418
  br i1 %tobool64, label %if.then65, label %if.end66, !dbg !2420

if.then65:                                        ; preds = %if.end59
  store i8 0, i8* %retval, align 1, !dbg !2421
  br label %return, !dbg !2421

if.end66:                                         ; preds = %if.end59
  %57 = load %union.tree_node*, %union.tree_node** %before_cast, align 8, !dbg !2422
  %ssa_name = bitcast %union.tree_node* %57 to %struct.tree_ssa_name*, !dbg !2422
  %def_stmt = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 2, !dbg !2422
  %58 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !2422
  store %union.gimple_statement_d* %58, %union.gimple_statement_d** %before_cast_def_stmt, align 8, !dbg !2423
  %59 = load %union.gimple_statement_d*, %union.gimple_statement_d** %before_cast_def_stmt, align 8, !dbg !2424
  %tobool67 = icmp ne %union.gimple_statement_d* %59, null, !dbg !2424
  br i1 %tobool67, label %if.end69, label %if.then68, !dbg !2426

if.then68:                                        ; preds = %if.end66
  store i8 0, i8* %retval, align 1, !dbg !2427
  br label %return, !dbg !2427

if.end69:                                         ; preds = %if.end66
  br label %if.end73, !dbg !2428

if.else70:                                        ; preds = %if.end53
  %60 = load %union.tree_node**, %union.tree_node*** %offset.addr, align 8, !dbg !2429
  %61 = load %union.tree_node*, %union.tree_node** %60, align 8, !dbg !2429
  %ssa_name71 = bitcast %union.tree_node* %61 to %struct.tree_ssa_name*, !dbg !2429
  %def_stmt72 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name71, i32 0, i32 2, !dbg !2429
  %62 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt72, align 8, !dbg !2429
  store %union.gimple_statement_d* %62, %union.gimple_statement_d** %before_cast_def_stmt, align 8, !dbg !2430
  br label %if.end73

if.end73:                                         ; preds = %if.else70, %if.end69
  %63 = load %union.gimple_statement_d*, %union.gimple_statement_d** %before_cast_def_stmt, align 8, !dbg !2431
  %call74 = call zeroext i8 @is_gimple_assign(%union.gimple_statement_d* %63), !dbg !2433
  %tobool75 = icmp ne i8 %call74, 0, !dbg !2433
  br i1 %tobool75, label %if.then76, label %if.else117, !dbg !2434

if.then76:                                        ; preds = %if.end73
  %64 = load %union.gimple_statement_d*, %union.gimple_statement_d** %before_cast_def_stmt, align 8, !dbg !2435
  %call77 = call %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %64), !dbg !2438
  %call78 = call zeroext i8 @is_gimple_reg(%union.tree_node* %call77), !dbg !2439
  %tobool79 = icmp ne i8 %call78, 0, !dbg !2439
  br i1 %tobool79, label %if.end81, label %if.then80, !dbg !2440

if.then80:                                        ; preds = %if.then76
  store i8 0, i8* %retval, align 1, !dbg !2441
  br label %return, !dbg !2441

if.end81:                                         ; preds = %if.then76
  %65 = load %union.gimple_statement_d*, %union.gimple_statement_d** %before_cast_def_stmt, align 8, !dbg !2442
  %call82 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %65), !dbg !2444
  %cmp83 = icmp eq i32 %call82, 65, !dbg !2445
  br i1 %cmp83, label %if.then84, label %if.else115, !dbg !2446

if.then84:                                        ; preds = %if.end81
  call void @llvm.dbg.declare(metadata %union.tree_node** %arg0, metadata !2447, metadata !DIExpression()), !dbg !2449
  %66 = load %union.gimple_statement_d*, %union.gimple_statement_d** %before_cast_def_stmt, align 8, !dbg !2450
  %call85 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %66), !dbg !2451
  store %union.tree_node* %call85, %union.tree_node** %arg0, align 8, !dbg !2449
  call void @llvm.dbg.declare(metadata %union.tree_node** %arg1, metadata !2452, metadata !DIExpression()), !dbg !2453
  %67 = load %union.gimple_statement_d*, %union.gimple_statement_d** %before_cast_def_stmt, align 8, !dbg !2454
  %call86 = call %union.tree_node* @gimple_assign_rhs2(%union.gimple_statement_d* %67), !dbg !2455
  store %union.tree_node* %call86, %union.tree_node** %arg1, align 8, !dbg !2453
  call void @llvm.dbg.declare(metadata %union.tree_node** %unit_size, metadata !2456, metadata !DIExpression()), !dbg !2457
  %68 = load %union.tree_node*, %union.tree_node** %op0.addr, align 8, !dbg !2458
  %common87 = bitcast %union.tree_node* %68 to %struct.tree_common*, !dbg !2458
  %type88 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common87, i32 0, i32 2, !dbg !2458
  %69 = load %union.tree_node*, %union.tree_node** %type88, align 8, !dbg !2458
  %type89 = bitcast %union.tree_node* %69 to %struct.tree_type*, !dbg !2458
  %main_variant90 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type89, i32 0, i32 16, !dbg !2458
  %70 = load %union.tree_node*, %union.tree_node** %main_variant90, align 8, !dbg !2458
  %common91 = bitcast %union.tree_node* %70 to %struct.tree_common*, !dbg !2458
  %type92 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common91, i32 0, i32 2, !dbg !2458
  %71 = load %union.tree_node*, %union.tree_node** %type92, align 8, !dbg !2458
  %type93 = bitcast %union.tree_node* %71 to %struct.tree_type*, !dbg !2458
  %size_unit = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type93, i32 0, i32 3, !dbg !2458
  %72 = load %union.tree_node*, %union.tree_node** %size_unit, align 8, !dbg !2458
  store %union.tree_node* %72, %union.tree_node** %unit_size, align 8, !dbg !2457
  %73 = load %union.tree_node*, %union.tree_node** %arg0, align 8, !dbg !2459
  %base94 = bitcast %union.tree_node* %73 to %struct.tree_base*, !dbg !2459
  %74 = bitcast %struct.tree_base* %base94 to i64*, !dbg !2459
  %bf.load95 = load i64, i64* %74, align 8, !dbg !2459
  %bf.clear96 = and i64 %bf.load95, 65535, !dbg !2459
  %bf.cast97 = trunc i64 %bf.clear96 to i32, !dbg !2459
  %idxprom = sext i32 %bf.cast97 to i64, !dbg !2459
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !2459
  %75 = load i32, i32* %arrayidx, align 4, !dbg !2459
  %cmp98 = icmp eq i32 %75, 1, !dbg !2459
  br i1 %cmp98, label %land.lhs.true99, label %land.lhs.true102, !dbg !2461

land.lhs.true99:                                  ; preds = %if.then84
  %76 = load %union.tree_node*, %union.tree_node** %arg0, align 8, !dbg !2462
  %77 = load %union.tree_node*, %union.tree_node** %unit_size, align 8, !dbg !2463
  %call100 = call i32 @simple_cst_equal(%union.tree_node* %76, %union.tree_node* %77), !dbg !2464
  %tobool101 = icmp ne i32 %call100, 0, !dbg !2464
  br i1 %tobool101, label %if.end114, label %land.lhs.true102, !dbg !2465

land.lhs.true102:                                 ; preds = %land.lhs.true99, %if.then84
  %78 = load %union.tree_node*, %union.tree_node** %arg1, align 8, !dbg !2466
  %base103 = bitcast %union.tree_node* %78 to %struct.tree_base*, !dbg !2466
  %79 = bitcast %struct.tree_base* %base103 to i64*, !dbg !2466
  %bf.load104 = load i64, i64* %79, align 8, !dbg !2466
  %bf.clear105 = and i64 %bf.load104, 65535, !dbg !2466
  %bf.cast106 = trunc i64 %bf.clear105 to i32, !dbg !2466
  %idxprom107 = sext i32 %bf.cast106 to i64, !dbg !2466
  %arrayidx108 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom107, !dbg !2466
  %80 = load i32, i32* %arrayidx108, align 4, !dbg !2466
  %cmp109 = icmp eq i32 %80, 1, !dbg !2466
  br i1 %cmp109, label %land.lhs.true110, label %if.then113, !dbg !2467

land.lhs.true110:                                 ; preds = %land.lhs.true102
  %81 = load %union.tree_node*, %union.tree_node** %arg1, align 8, !dbg !2468
  %82 = load %union.tree_node*, %union.tree_node** %unit_size, align 8, !dbg !2469
  %call111 = call i32 @simple_cst_equal(%union.tree_node* %81, %union.tree_node* %82), !dbg !2470
  %tobool112 = icmp ne i32 %call111, 0, !dbg !2470
  br i1 %tobool112, label %if.end114, label %if.then113, !dbg !2471

if.then113:                                       ; preds = %land.lhs.true110, %land.lhs.true102
  store i8 0, i8* %retval, align 1, !dbg !2472
  br label %return, !dbg !2472

if.end114:                                        ; preds = %land.lhs.true110, %land.lhs.true99
  br label %if.end116, !dbg !2473

if.else115:                                       ; preds = %if.end81
  store i8 0, i8* %retval, align 1, !dbg !2474
  br label %return, !dbg !2474

if.end116:                                        ; preds = %if.end114
  br label %if.end118, !dbg !2475

if.else117:                                       ; preds = %if.end73
  store i8 0, i8* %retval, align 1, !dbg !2476
  br label %return, !dbg !2476

if.end118:                                        ; preds = %if.end116
  store i8 1, i8* %retval, align 1, !dbg !2477
  br label %return, !dbg !2477

return:                                           ; preds = %if.end118, %if.else117, %if.else115, %if.then113, %if.then80, %if.then68, %if.then65, %if.then58, %if.else50, %if.else28
  %83 = load i8, i8* %retval, align 1, !dbg !2478
  ret i8 %83, !dbg !2478
}

declare dso_local %struct.pointer_set_t* @pointer_set_create() #2

declare dso_local void @walk_use_def_chains(%union.tree_node*, i8 (%union.tree_node*, %union.gimple_statement_d*, i8*)*, i8*, i8 zeroext) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @is_cast_from_non_pointer(%union.tree_node* %var, %union.gimple_statement_d* %def_stmt, i8* %data) #0 !dbg !2479 {
entry:
  %retval = alloca i8, align 1
  %var.addr = alloca %union.tree_node*, align 8
  %def_stmt.addr = alloca %union.gimple_statement_d*, align 8
  %data.addr = alloca i8*, align 8
  %use_p = alloca %struct.ssa_use_operand_d*, align 8
  %iter = alloca %struct.ssa_operand_iterator_d, align 8
  %cast = alloca i32, align 4
  store %union.tree_node* %var, %union.tree_node** %var.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %var.addr, metadata !2482, metadata !DIExpression()), !dbg !2483
  store %union.gimple_statement_d* %def_stmt, %union.gimple_statement_d** %def_stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %def_stmt.addr, metadata !2484, metadata !DIExpression()), !dbg !2485
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !2486, metadata !DIExpression()), !dbg !2487
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt.addr, align 8, !dbg !2488
  %tobool = icmp ne %union.gimple_statement_d* %0, null, !dbg !2488
  br i1 %tobool, label %lor.lhs.false, label %if.then, !dbg !2490

lor.lhs.false:                                    ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !2491
  %tobool1 = icmp ne %union.tree_node* %1, null, !dbg !2491
  br i1 %tobool1, label %if.end, label %if.then, !dbg !2492

if.then:                                          ; preds = %lor.lhs.false, %entry
  store i8 0, i8* %retval, align 1, !dbg !2493
  br label %return, !dbg !2493

if.end:                                           ; preds = %lor.lhs.false
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt.addr, align 8, !dbg !2494
  %call = call i32 @gimple_code(%union.gimple_statement_d* %2), !dbg !2496
  %cmp = icmp eq i32 %call, 16, !dbg !2497
  br i1 %cmp, label %if.then2, label %if.end3, !dbg !2498

if.then2:                                         ; preds = %if.end
  store i8 0, i8* %retval, align 1, !dbg !2499
  br label %return, !dbg !2499

if.end3:                                          ; preds = %if.end
  %3 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !2500
  %base = bitcast %union.tree_node* %3 to %struct.tree_base*, !dbg !2500
  %4 = bitcast %struct.tree_base* %base to i64*, !dbg !2500
  %bf.load = load i64, i64* %4, align 8, !dbg !2500
  %bf.lshr = lshr i64 %bf.load, 32, !dbg !2500
  %bf.clear = and i64 %bf.lshr, 1, !dbg !2500
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !2500
  %tobool4 = icmp ne i32 %bf.cast, 0, !dbg !2500
  br i1 %tobool4, label %if.then5, label %if.end6, !dbg !2502

if.then5:                                         ; preds = %if.end3
  store i8 0, i8* %retval, align 1, !dbg !2503
  br label %return, !dbg !2503

if.end6:                                          ; preds = %if.end3
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt.addr, align 8, !dbg !2504
  %call7 = call zeroext i8 @is_gimple_assign(%union.gimple_statement_d* %5), !dbg !2506
  %tobool8 = icmp ne i8 %call7, 0, !dbg !2506
  br i1 %tobool8, label %if.then9, label %if.end57, !dbg !2507

if.then9:                                         ; preds = %if.end6
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %use_p, metadata !2508, metadata !DIExpression()), !dbg !2510
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d* %iter, metadata !2511, metadata !DIExpression()), !dbg !2524
  call void @llvm.dbg.declare(metadata i32* %cast, metadata !2525, metadata !DIExpression()), !dbg !2526
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt.addr, align 8, !dbg !2527
  %call10 = call i32 @look_for_casts_stmt(%union.gimple_statement_d* %6), !dbg !2528
  store i32 %call10, i32* %cast, align 4, !dbg !2526
  %7 = load i32, i32* %cast, align 4, !dbg !2529
  %and = and i32 %7, 32, !dbg !2531
  %cmp11 = icmp eq i32 %and, 32, !dbg !2532
  br i1 %cmp11, label %land.lhs.true, label %if.else, !dbg !2533

land.lhs.true:                                    ; preds = %if.then9
  %8 = load i32, i32* %cast, align 4, !dbg !2534
  %and12 = and i32 %8, -33, !dbg !2535
  %cmp13 = icmp eq i32 %and12, 0, !dbg !2536
  br i1 %cmp13, label %if.then14, label %if.else, !dbg !2537

if.then14:                                        ; preds = %land.lhs.true
  %9 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt.addr, align 8, !dbg !2538
  %10 = load i8*, i8** %data.addr, align 8, !dbg !2540
  %11 = bitcast i8* %10 to %struct.cast*, !dbg !2541
  %stmt = getelementptr inbounds %struct.cast, %struct.cast* %11, i32 0, i32 1, !dbg !2542
  store %union.gimple_statement_d* %9, %union.gimple_statement_d** %stmt, align 8, !dbg !2543
  %12 = load i8*, i8** %data.addr, align 8, !dbg !2544
  %13 = bitcast i8* %12 to %struct.cast*, !dbg !2545
  %type = getelementptr inbounds %struct.cast, %struct.cast* %13, i32 0, i32 0, !dbg !2546
  %14 = load i32, i32* %type, align 8, !dbg !2547
  %inc = add nsw i32 %14, 1, !dbg !2547
  store i32 %inc, i32* %type, align 8, !dbg !2547
  %15 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt.addr, align 8, !dbg !2548
  %call15 = call %struct.ssa_use_operand_d* @op_iter_init_use(%struct.ssa_operand_iterator_d* %iter, %union.gimple_statement_d* %15, i32 5), !dbg !2548
  store %struct.ssa_use_operand_d* %call15, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !2548
  br label %for.cond, !dbg !2548

for.cond:                                         ; preds = %for.inc, %if.then14
  %call16 = call zeroext i8 @op_iter_done(%struct.ssa_operand_iterator_d* %iter), !dbg !2550
  %tobool17 = icmp ne i8 %call16, 0, !dbg !2550
  %lnot = xor i1 %tobool17, true, !dbg !2550
  br i1 %lnot, label %for.body, label %for.end, !dbg !2548

for.body:                                         ; preds = %for.cond
  %16 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !2552
  %call18 = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %16), !dbg !2552
  %17 = load i8*, i8** %data.addr, align 8, !dbg !2554
  call void @walk_use_def_chains(%union.tree_node* %call18, i8 (%union.tree_node*, %union.gimple_statement_d*, i8*)* @is_cast_from_non_pointer, i8* %17, i8 zeroext 0), !dbg !2555
  %18 = load i8*, i8** %data.addr, align 8, !dbg !2556
  %19 = bitcast i8* %18 to %struct.cast*, !dbg !2558
  %type19 = getelementptr inbounds %struct.cast, %struct.cast* %19, i32 0, i32 0, !dbg !2559
  %20 = load i32, i32* %type19, align 8, !dbg !2559
  %cmp20 = icmp eq i32 %20, -1, !dbg !2560
  br i1 %cmp20, label %if.then21, label %if.end22, !dbg !2561

if.then21:                                        ; preds = %for.body
  br label %for.end, !dbg !2562

if.end22:                                         ; preds = %for.body
  br label %for.inc, !dbg !2563

for.inc:                                          ; preds = %if.end22
  %call23 = call %struct.ssa_use_operand_d* @op_iter_next_use(%struct.ssa_operand_iterator_d* %iter), !dbg !2550
  store %struct.ssa_use_operand_d* %call23, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !2550
  br label %for.cond, !dbg !2550, !llvm.loop !2564

for.end:                                          ; preds = %if.then21, %for.cond
  br label %if.end56, !dbg !2566

if.else:                                          ; preds = %land.lhs.true, %if.then9
  %21 = load i32, i32* %cast, align 4, !dbg !2567
  %and24 = and i32 %21, 256, !dbg !2569
  %cmp25 = icmp eq i32 %and24, 256, !dbg !2570
  br i1 %cmp25, label %if.then38, label %lor.lhs.false26, !dbg !2571

lor.lhs.false26:                                  ; preds = %if.else
  %22 = load i32, i32* %cast, align 4, !dbg !2572
  %and27 = and i32 %22, 2, !dbg !2573
  %cmp28 = icmp eq i32 %and27, 2, !dbg !2574
  br i1 %cmp28, label %if.then38, label %lor.lhs.false29, !dbg !2575

lor.lhs.false29:                                  ; preds = %lor.lhs.false26
  %23 = load i32, i32* %cast, align 4, !dbg !2576
  %and30 = and i32 %23, 1, !dbg !2577
  %cmp31 = icmp eq i32 %and30, 1, !dbg !2578
  br i1 %cmp31, label %if.then38, label %lor.lhs.false32, !dbg !2579

lor.lhs.false32:                                  ; preds = %lor.lhs.false29
  %24 = load i32, i32* %cast, align 4, !dbg !2580
  %and33 = and i32 %24, 8, !dbg !2581
  %cmp34 = icmp eq i32 %and33, 8, !dbg !2582
  br i1 %cmp34, label %if.then38, label %lor.lhs.false35, !dbg !2583

lor.lhs.false35:                                  ; preds = %lor.lhs.false32
  %25 = load i32, i32* %cast, align 4, !dbg !2584
  %and36 = and i32 %25, 128, !dbg !2585
  %cmp37 = icmp eq i32 %and36, 128, !dbg !2586
  br i1 %cmp37, label %if.then38, label %if.else53, !dbg !2587

if.then38:                                        ; preds = %lor.lhs.false35, %lor.lhs.false32, %lor.lhs.false29, %lor.lhs.false26, %if.else
  %26 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt.addr, align 8, !dbg !2588
  %call39 = call %struct.ssa_use_operand_d* @op_iter_init_use(%struct.ssa_operand_iterator_d* %iter, %union.gimple_statement_d* %26, i32 5), !dbg !2588
  store %struct.ssa_use_operand_d* %call39, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !2588
  br label %for.cond40, !dbg !2588

for.cond40:                                       ; preds = %for.inc50, %if.then38
  %call41 = call zeroext i8 @op_iter_done(%struct.ssa_operand_iterator_d* %iter), !dbg !2591
  %tobool42 = icmp ne i8 %call41, 0, !dbg !2591
  %lnot43 = xor i1 %tobool42, true, !dbg !2591
  br i1 %lnot43, label %for.body44, label %for.end52, !dbg !2588

for.body44:                                       ; preds = %for.cond40
  %27 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !2593
  %call45 = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %27), !dbg !2593
  %28 = load i8*, i8** %data.addr, align 8, !dbg !2595
  call void @walk_use_def_chains(%union.tree_node* %call45, i8 (%union.tree_node*, %union.gimple_statement_d*, i8*)* @is_cast_from_non_pointer, i8* %28, i8 zeroext 0), !dbg !2596
  %29 = load i8*, i8** %data.addr, align 8, !dbg !2597
  %30 = bitcast i8* %29 to %struct.cast*, !dbg !2599
  %type46 = getelementptr inbounds %struct.cast, %struct.cast* %30, i32 0, i32 0, !dbg !2600
  %31 = load i32, i32* %type46, align 8, !dbg !2600
  %cmp47 = icmp eq i32 %31, -1, !dbg !2601
  br i1 %cmp47, label %if.then48, label %if.end49, !dbg !2602

if.then48:                                        ; preds = %for.body44
  br label %for.end52, !dbg !2603

if.end49:                                         ; preds = %for.body44
  br label %for.inc50, !dbg !2604

for.inc50:                                        ; preds = %if.end49
  %call51 = call %struct.ssa_use_operand_d* @op_iter_next_use(%struct.ssa_operand_iterator_d* %iter), !dbg !2591
  store %struct.ssa_use_operand_d* %call51, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !2591
  br label %for.cond40, !dbg !2591, !llvm.loop !2605

for.end52:                                        ; preds = %if.then48, %for.cond40
  br label %if.end55, !dbg !2607

if.else53:                                        ; preds = %lor.lhs.false35
  %32 = load i8*, i8** %data.addr, align 8, !dbg !2608
  %33 = bitcast i8* %32 to %struct.cast*, !dbg !2609
  %type54 = getelementptr inbounds %struct.cast, %struct.cast* %33, i32 0, i32 0, !dbg !2610
  store i32 -1, i32* %type54, align 8, !dbg !2611
  br label %if.end55

if.end55:                                         ; preds = %if.else53, %for.end52
  br label %if.end56

if.end56:                                         ; preds = %if.end55, %for.end
  br label %if.end57, !dbg !2612

if.end57:                                         ; preds = %if.end56, %if.end6
  %34 = load i8*, i8** %data.addr, align 8, !dbg !2613
  %35 = bitcast i8* %34 to %struct.cast*, !dbg !2615
  %type58 = getelementptr inbounds %struct.cast, %struct.cast* %35, i32 0, i32 0, !dbg !2616
  %36 = load i32, i32* %type58, align 8, !dbg !2616
  %cmp59 = icmp eq i32 %36, -1, !dbg !2617
  br i1 %cmp59, label %if.then60, label %if.end61, !dbg !2618

if.then60:                                        ; preds = %if.end57
  store i8 1, i8* %retval, align 1, !dbg !2619
  br label %return, !dbg !2619

if.end61:                                         ; preds = %if.end57
  store i8 0, i8* %retval, align 1, !dbg !2620
  br label %return, !dbg !2620

return:                                           ; preds = %if.end61, %if.then60, %if.then5, %if.then2, %if.then
  %37 = load i8, i8* %retval, align 1, !dbg !2621
  ret i8 %37, !dbg !2621
}

declare dso_local void @pointer_set_destroy(%struct.pointer_set_t*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @single_ssa_tree_operand(%union.gimple_statement_d* %stmt, i32 %flags) #0 !dbg !2622 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %flags.addr = alloca i32, align 4
  %var = alloca %union.tree_node*, align 8
  %iter = alloca %struct.ssa_operand_iterator_d, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !2626, metadata !DIExpression()), !dbg !2627
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !2628, metadata !DIExpression()), !dbg !2629
  call void @llvm.dbg.declare(metadata %union.tree_node** %var, metadata !2630, metadata !DIExpression()), !dbg !2631
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d* %iter, metadata !2632, metadata !DIExpression()), !dbg !2633
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !2634
  %1 = load i32, i32* %flags.addr, align 4, !dbg !2635
  %call = call %union.tree_node* @op_iter_init_tree(%struct.ssa_operand_iterator_d* %iter, %union.gimple_statement_d* %0, i32 %1), !dbg !2636
  store %union.tree_node* %call, %union.tree_node** %var, align 8, !dbg !2637
  %call1 = call zeroext i8 @op_iter_done(%struct.ssa_operand_iterator_d* %iter), !dbg !2638
  %tobool = icmp ne i8 %call1, 0, !dbg !2638
  br i1 %tobool, label %if.then, label %if.end, !dbg !2640

if.then:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !2641
  br label %return, !dbg !2641

if.end:                                           ; preds = %entry
  %call2 = call %union.tree_node* @op_iter_next_tree(%struct.ssa_operand_iterator_d* %iter), !dbg !2642
  %call3 = call zeroext i8 @op_iter_done(%struct.ssa_operand_iterator_d* %iter), !dbg !2643
  %tobool4 = icmp ne i8 %call3, 0, !dbg !2643
  br i1 %tobool4, label %if.then5, label %if.end6, !dbg !2645

if.then5:                                         ; preds = %if.end
  %2 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !2646
  store %union.tree_node* %2, %union.tree_node** %retval, align 8, !dbg !2647
  br label %return, !dbg !2647

if.end6:                                          ; preds = %if.end
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !2648
  br label %return, !dbg !2648

return:                                           ; preds = %if.end6, %if.then5, %if.then
  %3 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !2649
  ret %union.tree_node* %3, !dbg !2649
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @is_gimple_assign(%union.gimple_statement_d* %gs) #0 !dbg !2650 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !2654, metadata !DIExpression()), !dbg !2655
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !2656
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !2657
  %cmp = icmp eq i32 %call, 6, !dbg !2658
  %conv = zext i1 %cmp to i32, !dbg !2658
  %conv1 = trunc i32 %conv to i8, !dbg !2657
  ret i8 %conv1, !dbg !2659
}

declare dso_local zeroext i8 @is_gimple_reg(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %gs) #0 !dbg !2660 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !2663, metadata !DIExpression()), !dbg !2664
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !2665
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 0), !dbg !2666
  ret %union.tree_node* %call, !dbg !2667
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %gs) #0 !dbg !2668 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %code = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !2671, metadata !DIExpression()), !dbg !2672
  call void @llvm.dbg.declare(metadata i32* %code, metadata !2673, metadata !DIExpression()), !dbg !2674
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !2675
  %call = call i32 @gimple_expr_code(%union.gimple_statement_d* %0), !dbg !2676
  store i32 %call, i32* %code, align 4, !dbg !2677
  %1 = load i32, i32* %code, align 4, !dbg !2678
  %call1 = call i32 @get_gimple_rhs_class(i32 %1), !dbg !2680
  %cmp = icmp eq i32 %call1, 3, !dbg !2681
  br i1 %cmp, label %if.then, label %if.end, !dbg !2682

if.then:                                          ; preds = %entry
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !2683
  %call2 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %2), !dbg !2683
  %base = bitcast %union.tree_node* %call2 to %struct.tree_base*, !dbg !2683
  %3 = bitcast %struct.tree_base* %base to i64*, !dbg !2683
  %bf.load = load i64, i64* %3, align 8, !dbg !2683
  %bf.clear = and i64 %bf.load, 65535, !dbg !2683
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !2683
  store i32 %bf.cast, i32* %code, align 4, !dbg !2684
  br label %if.end, !dbg !2685

if.end:                                           ; preds = %if.then, %entry
  %4 = load i32, i32* %code, align 4, !dbg !2686
  ret i32 %4, !dbg !2687
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %gs) #0 !dbg !2688 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !2689, metadata !DIExpression()), !dbg !2690
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !2691
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 1), !dbg !2692
  ret %union.tree_node* %call, !dbg !2693
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_assign_rhs2(%union.gimple_statement_d* %gs) #0 !dbg !2694 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !2695, metadata !DIExpression()), !dbg !2696
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !2697
  %call = call i32 @gimple_num_ops(%union.gimple_statement_d* %0), !dbg !2699
  %cmp = icmp uge i32 %call, 3, !dbg !2700
  br i1 %cmp, label %if.then, label %if.else, !dbg !2701

if.then:                                          ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !2702
  %call1 = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %1, i32 2), !dbg !2703
  store %union.tree_node* %call1, %union.tree_node** %retval, align 8, !dbg !2704
  br label %return, !dbg !2704

if.else:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !2705
  br label %return, !dbg !2705

return:                                           ; preds = %if.else, %if.then
  %2 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !2706
  ret %union.tree_node* %2, !dbg !2706
}

declare dso_local i32 @simple_cst_equal(%union.tree_node*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gate_type_escape_vars() #0 !dbg !2707 {
entry:
  %0 = load i32, i32* @flag_ipa_type_escape, align 4, !dbg !2708
  %tobool = icmp ne i32 %0, 0, !dbg !2708
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !2709

land.rhs:                                         ; preds = %entry
  %1 = load %struct.diagnostic_context*, %struct.diagnostic_context** @global_dc, align 8, !dbg !2710
  %diagnostic_count = getelementptr inbounds %struct.diagnostic_context, %struct.diagnostic_context* %1, i32 0, i32 1, !dbg !2710
  %arrayidx = getelementptr inbounds [12 x i32], [12 x i32]* %diagnostic_count, i64 0, i64 4, !dbg !2710
  %2 = load i32, i32* %arrayidx, align 8, !dbg !2710
  %tobool1 = icmp ne i32 %2, 0, !dbg !2710
  br i1 %tobool1, label %lor.end, label %lor.rhs, !dbg !2711

lor.rhs:                                          ; preds = %land.rhs
  %3 = load %struct.diagnostic_context*, %struct.diagnostic_context** @global_dc, align 8, !dbg !2712
  %diagnostic_count2 = getelementptr inbounds %struct.diagnostic_context, %struct.diagnostic_context* %3, i32 0, i32 1, !dbg !2712
  %arrayidx3 = getelementptr inbounds [12 x i32], [12 x i32]* %diagnostic_count2, i64 0, i64 5, !dbg !2712
  %4 = load i32, i32* %arrayidx3, align 4, !dbg !2712
  %tobool4 = icmp ne i32 %4, 0, !dbg !2711
  br label %lor.end, !dbg !2711

lor.end:                                          ; preds = %lor.rhs, %land.rhs
  %5 = phi i1 [ true, %land.rhs ], [ %tobool4, %lor.rhs ]
  %lnot = xor i1 %5, true, !dbg !2713
  br label %land.end

land.end:                                         ; preds = %lor.end, %entry
  %6 = phi i1 [ false, %entry ], [ %lnot, %lor.end ], !dbg !2714
  %land.ext = zext i1 %6 to i32, !dbg !2709
  %conv = trunc i32 %land.ext to i8, !dbg !2715
  ret i8 %conv, !dbg !2716
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @type_escape_execute() #0 !dbg !2717 {
entry:
  %node = alloca %struct.cgraph_node*, align 8
  %vnode = alloca %struct.varpool_node*, align 8
  %i = alloca i32, align 4
  %bi = alloca %struct.bitmap_iterator, align 8
  %result = alloca %struct.splay_tree_node_s*, align 8
  %type = alloca %union.tree_node*, align 8
  %uid = alloca i32, align 4
  %type42 = alloca %union.tree_node*, align 8
  %key43 = alloca %union.tree_node*, align 8
  %type80 = alloca %union.tree_node*, align 8
  %uid96 = alloca i32, align 4
  %bm = alloca %struct.bitmap_head_def*, align 8
  %b = alloca %struct.bitmap_head_def*, align 8
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %node, metadata !2718, metadata !DIExpression()), !dbg !2924
  call void @llvm.dbg.declare(metadata %struct.varpool_node** %vnode, metadata !2925, metadata !DIExpression()), !dbg !2926
  call void @llvm.dbg.declare(metadata i32* %i, metadata !2927, metadata !DIExpression()), !dbg !2928
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator* %bi, metadata !2929, metadata !DIExpression()), !dbg !2937
  call void @llvm.dbg.declare(metadata %struct.splay_tree_node_s** %result, metadata !2938, metadata !DIExpression()), !dbg !2939
  call void @ipa_init(), !dbg !2940
  %0 = load %struct.varpool_node*, %struct.varpool_node** @varpool_nodes_queue, align 8, !dbg !2941
  store %struct.varpool_node* %0, %struct.varpool_node** %vnode, align 8, !dbg !2941
  br label %for.cond, !dbg !2941

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load %struct.varpool_node*, %struct.varpool_node** %vnode, align 8, !dbg !2943
  %tobool = icmp ne %struct.varpool_node* %1, null, !dbg !2941
  br i1 %tobool, label %for.body, label %for.end, !dbg !2941

for.body:                                         ; preds = %for.cond
  %2 = load %struct.varpool_node*, %struct.varpool_node** %vnode, align 8, !dbg !2945
  call void @analyze_variable(%struct.varpool_node* %2), !dbg !2946
  br label %for.inc, !dbg !2946

for.inc:                                          ; preds = %for.body
  %3 = load %struct.varpool_node*, %struct.varpool_node** %vnode, align 8, !dbg !2943
  %next_needed = getelementptr inbounds %struct.varpool_node, %struct.varpool_node* %3, i32 0, i32 2, !dbg !2943
  %4 = load %struct.varpool_node*, %struct.varpool_node** %next_needed, align 8, !dbg !2943
  store %struct.varpool_node* %4, %struct.varpool_node** %vnode, align 8, !dbg !2943
  br label %for.cond, !dbg !2943, !llvm.loop !2947

for.end:                                          ; preds = %for.cond
  %5 = load %struct.cgraph_node*, %struct.cgraph_node** @cgraph_nodes, align 8, !dbg !2949
  store %struct.cgraph_node* %5, %struct.cgraph_node** %node, align 8, !dbg !2951
  br label %for.cond1, !dbg !2952

for.cond1:                                        ; preds = %for.inc6, %for.end
  %6 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !2953
  %tobool2 = icmp ne %struct.cgraph_node* %6, null, !dbg !2955
  br i1 %tobool2, label %for.body3, label %for.end7, !dbg !2955

for.body3:                                        ; preds = %for.cond1
  %7 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !2956
  %analyzed = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %7, i32 0, i32 27, !dbg !2958
  %bf.load = load i16, i16* %analyzed, align 4, !dbg !2958
  %bf.lshr = lshr i16 %bf.load, 5, !dbg !2958
  %bf.clear = and i16 %bf.lshr, 1, !dbg !2958
  %bf.cast = zext i16 %bf.clear to i32, !dbg !2958
  %tobool4 = icmp ne i32 %bf.cast, 0, !dbg !2956
  br i1 %tobool4, label %land.lhs.true, label %if.end, !dbg !2959

land.lhs.true:                                    ; preds = %for.body3
  %8 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !2960
  %clone_of = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %8, i32 0, i32 12, !dbg !2961
  %9 = load %struct.cgraph_node*, %struct.cgraph_node** %clone_of, align 8, !dbg !2961
  %tobool5 = icmp ne %struct.cgraph_node* %9, null, !dbg !2960
  br i1 %tobool5, label %if.end, label %if.then, !dbg !2962

if.then:                                          ; preds = %land.lhs.true
  %10 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !2963
  call void @analyze_function(%struct.cgraph_node* %10), !dbg !2964
  br label %if.end, !dbg !2964

if.end:                                           ; preds = %if.then, %land.lhs.true, %for.body3
  br label %for.inc6, !dbg !2961

for.inc6:                                         ; preds = %if.end
  %11 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !2965
  %next = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %11, i32 0, i32 3, !dbg !2966
  %12 = load %struct.cgraph_node*, %struct.cgraph_node** %next, align 8, !dbg !2966
  store %struct.cgraph_node* %12, %struct.cgraph_node** %node, align 8, !dbg !2967
  br label %for.cond1, !dbg !2968, !llvm.loop !2969

for.end7:                                         ; preds = %for.cond1
  %13 = load %struct.pointer_set_t*, %struct.pointer_set_t** @visited_nodes, align 8, !dbg !2971
  call void @pointer_set_destroy(%struct.pointer_set_t* %13), !dbg !2972
  store %struct.pointer_set_t* null, %struct.pointer_set_t** @visited_nodes, align 8, !dbg !2973
  %call = call %struct.bitmap_head_def* @bitmap_obstack_alloc_stat(%struct.bitmap_obstack* @ipa_obstack), !dbg !2974
  store %struct.bitmap_head_def* %call, %struct.bitmap_head_def** @been_there_done_that, align 8, !dbg !2975
  %call8 = call %struct.bitmap_head_def* @bitmap_obstack_alloc_stat(%struct.bitmap_obstack* @ipa_obstack), !dbg !2976
  store %struct.bitmap_head_def* %call8, %struct.bitmap_head_def** @bitmap_tmp, align 8, !dbg !2977
  %14 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @bitmap_tmp, align 8, !dbg !2978
  %15 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @global_types_seen, align 8, !dbg !2979
  call void @bitmap_copy(%struct.bitmap_head_def* %14, %struct.bitmap_head_def* %15), !dbg !2980
  %16 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @bitmap_tmp, align 8, !dbg !2981
  call void @bmp_iter_set_init(%struct.bitmap_iterator* %bi, %struct.bitmap_head_def* %16, i32 0, i32* %i), !dbg !2981
  br label %for.cond9, !dbg !2981

for.cond9:                                        ; preds = %for.inc17, %for.end7
  %call10 = call zeroext i8 @bmp_iter_set(%struct.bitmap_iterator* %bi, i32* %i), !dbg !2983
  %tobool11 = icmp ne i8 %call10, 0, !dbg !2981
  br i1 %tobool11, label %for.body12, label %for.end18, !dbg !2981

for.body12:                                       ; preds = %for.cond9
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !2985, metadata !DIExpression()), !dbg !2987
  %17 = load i32, i32* %i, align 4, !dbg !2988
  %call13 = call %union.tree_node* @type_for_uid(i32 %17), !dbg !2989
  store %union.tree_node* %call13, %union.tree_node** %type, align 8, !dbg !2987
  %18 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !2990
  %call14 = call i32 @ipa_type_escape_star_count_of_interesting_or_array_type(%union.tree_node* %18), !dbg !2992
  %cmp = icmp sge i32 %call14, 0, !dbg !2993
  br i1 %cmp, label %if.then15, label %if.end16, !dbg !2994

if.then15:                                        ; preds = %for.body12
  %19 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !2995
  call void @close_type_seen(%union.tree_node* %19), !dbg !2996
  br label %if.end16, !dbg !2996

if.end16:                                         ; preds = %if.then15, %for.body12
  br label %for.inc17, !dbg !2997

for.inc17:                                        ; preds = %if.end16
  call void @bmp_iter_next(%struct.bitmap_iterator* %bi, i32* %i), !dbg !2983
  br label %for.cond9, !dbg !2983, !llvm.loop !2998

for.end18:                                        ; preds = %for.cond9
  %20 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @been_there_done_that, align 8, !dbg !3000
  call void @bitmap_clear(%struct.bitmap_head_def* %20), !dbg !3001
  %21 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @bitmap_tmp, align 8, !dbg !3002
  %22 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @global_types_exposed_parameter, align 8, !dbg !3003
  call void @bitmap_copy(%struct.bitmap_head_def* %21, %struct.bitmap_head_def* %22), !dbg !3004
  %23 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @bitmap_tmp, align 8, !dbg !3005
  call void @bmp_iter_set_init(%struct.bitmap_iterator* %bi, %struct.bitmap_head_def* %23, i32 0, i32* %i), !dbg !3005
  br label %for.cond19, !dbg !3005

for.cond19:                                       ; preds = %for.inc24, %for.end18
  %call20 = call zeroext i8 @bmp_iter_set(%struct.bitmap_iterator* %bi, i32* %i), !dbg !3007
  %tobool21 = icmp ne i8 %call20, 0, !dbg !3005
  br i1 %tobool21, label %for.body22, label %for.end25, !dbg !3005

for.body22:                                       ; preds = %for.cond19
  %24 = load i32, i32* %i, align 4, !dbg !3009
  %call23 = call %union.tree_node* @type_for_uid(i32 %24), !dbg !3011
  call void @close_type_exposed_parameter(%union.tree_node* %call23), !dbg !3012
  br label %for.inc24, !dbg !3013

for.inc24:                                        ; preds = %for.body22
  call void @bmp_iter_next(%struct.bitmap_iterator* %bi, i32* %i), !dbg !3007
  br label %for.cond19, !dbg !3007, !llvm.loop !3014

for.end25:                                        ; preds = %for.cond19
  %25 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @been_there_done_that, align 8, !dbg !3016
  call void @bitmap_clear(%struct.bitmap_head_def* %25), !dbg !3017
  %26 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @bitmap_tmp, align 8, !dbg !3018
  %27 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @global_types_full_escape, align 8, !dbg !3019
  call void @bitmap_copy(%struct.bitmap_head_def* %26, %struct.bitmap_head_def* %27), !dbg !3020
  %28 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @bitmap_tmp, align 8, !dbg !3021
  call void @bmp_iter_set_init(%struct.bitmap_iterator* %bi, %struct.bitmap_head_def* %28, i32 0, i32* %i), !dbg !3021
  br label %for.cond26, !dbg !3021

for.cond26:                                       ; preds = %for.inc31, %for.end25
  %call27 = call zeroext i8 @bmp_iter_set(%struct.bitmap_iterator* %bi, i32* %i), !dbg !3023
  %tobool28 = icmp ne i8 %call27, 0, !dbg !3021
  br i1 %tobool28, label %for.body29, label %for.end32, !dbg !3021

for.body29:                                       ; preds = %for.cond26
  %29 = load i32, i32* %i, align 4, !dbg !3025
  %call30 = call %union.tree_node* @type_for_uid(i32 %29), !dbg !3027
  call void @close_type_full_escape(%union.tree_node* %call30), !dbg !3028
  br label %for.inc31, !dbg !3029

for.inc31:                                        ; preds = %for.body29
  call void @bmp_iter_next(%struct.bitmap_iterator* %bi, i32* %i), !dbg !3023
  br label %for.cond26, !dbg !3023, !llvm.loop !3030

for.end32:                                        ; preds = %for.cond26
  %30 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @been_there_done_that, align 8, !dbg !3032
  call void @bitmap_clear(%struct.bitmap_head_def* %30), !dbg !3033
  %31 = load %struct.splay_tree_s*, %struct.splay_tree_s** @uid_to_addressof_down_map, align 8, !dbg !3034
  %call33 = call %struct.splay_tree_node_s* @splay_tree_min(%struct.splay_tree_s* %31), !dbg !3035
  store %struct.splay_tree_node_s* %call33, %struct.splay_tree_node_s** %result, align 8, !dbg !3036
  br label %while.cond, !dbg !3037

while.cond:                                       ; preds = %while.body, %for.end32
  %32 = load %struct.splay_tree_node_s*, %struct.splay_tree_node_s** %result, align 8, !dbg !3038
  %tobool34 = icmp ne %struct.splay_tree_node_s* %32, null, !dbg !3037
  br i1 %tobool34, label %while.body, label %while.end, !dbg !3037

while.body:                                       ; preds = %while.cond
  call void @llvm.dbg.declare(metadata i32* %uid, metadata !3039, metadata !DIExpression()), !dbg !3041
  %33 = load %struct.splay_tree_node_s*, %struct.splay_tree_node_s** %result, align 8, !dbg !3042
  %key = getelementptr inbounds %struct.splay_tree_node_s, %struct.splay_tree_node_s* %33, i32 0, i32 0, !dbg !3043
  %34 = load i64, i64* %key, align 8, !dbg !3043
  %conv = trunc i64 %34 to i32, !dbg !3042
  store i32 %conv, i32* %uid, align 4, !dbg !3041
  %35 = load i32, i32* %uid, align 4, !dbg !3044
  %call35 = call %struct.bitmap_head_def* @close_addressof_down(i32 %35), !dbg !3045
  %36 = load %struct.splay_tree_s*, %struct.splay_tree_s** @uid_to_addressof_down_map, align 8, !dbg !3046
  %37 = load i32, i32* %uid, align 4, !dbg !3047
  %conv36 = sext i32 %37 to i64, !dbg !3047
  %call37 = call %struct.splay_tree_node_s* @splay_tree_successor(%struct.splay_tree_s* %36, i64 %conv36), !dbg !3048
  store %struct.splay_tree_node_s* %call37, %struct.splay_tree_node_s** %result, align 8, !dbg !3049
  br label %while.cond, !dbg !3037, !llvm.loop !3050

while.end:                                        ; preds = %while.cond
  %38 = load %struct.splay_tree_s*, %struct.splay_tree_s** @all_canon_types, align 8, !dbg !3052
  %call38 = call %struct.splay_tree_node_s* @splay_tree_min(%struct.splay_tree_s* %38), !dbg !3053
  store %struct.splay_tree_node_s* %call38, %struct.splay_tree_node_s** %result, align 8, !dbg !3054
  br label %while.cond39, !dbg !3055

while.cond39:                                     ; preds = %if.end71, %while.end
  %39 = load %struct.splay_tree_node_s*, %struct.splay_tree_node_s** %result, align 8, !dbg !3056
  %tobool40 = icmp ne %struct.splay_tree_node_s* %39, null, !dbg !3055
  br i1 %tobool40, label %while.body41, label %while.end73, !dbg !3055

while.body41:                                     ; preds = %while.cond39
  call void @llvm.dbg.declare(metadata %union.tree_node** %type42, metadata !3057, metadata !DIExpression()), !dbg !3059
  %40 = load %struct.splay_tree_node_s*, %struct.splay_tree_node_s** %result, align 8, !dbg !3060
  %value = getelementptr inbounds %struct.splay_tree_node_s, %struct.splay_tree_node_s* %40, i32 0, i32 1, !dbg !3061
  %41 = load i64, i64* %value, align 8, !dbg !3061
  %42 = inttoptr i64 %41 to %union.tree_node*, !dbg !3062
  store %union.tree_node* %42, %union.tree_node** %type42, align 8, !dbg !3059
  call void @llvm.dbg.declare(metadata %union.tree_node** %key43, metadata !3063, metadata !DIExpression()), !dbg !3064
  %43 = load %struct.splay_tree_node_s*, %struct.splay_tree_node_s** %result, align 8, !dbg !3065
  %key44 = getelementptr inbounds %struct.splay_tree_node_s, %struct.splay_tree_node_s* %43, i32 0, i32 0, !dbg !3066
  %44 = load i64, i64* %key44, align 8, !dbg !3066
  %45 = inttoptr i64 %44 to %union.tree_node*, !dbg !3067
  store %union.tree_node* %45, %union.tree_node** %key43, align 8, !dbg !3064
  %46 = load %union.tree_node*, %union.tree_node** %type42, align 8, !dbg !3068
  %base = bitcast %union.tree_node* %46 to %struct.tree_base*, !dbg !3068
  %47 = bitcast %struct.tree_base* %base to i64*, !dbg !3068
  %bf.load45 = load i64, i64* %47, align 8, !dbg !3068
  %bf.clear46 = and i64 %bf.load45, 65535, !dbg !3068
  %bf.cast47 = trunc i64 %bf.clear46 to i32, !dbg !3068
  %cmp48 = icmp eq i32 %bf.cast47, 10, !dbg !3068
  br i1 %cmp48, label %if.then63, label %lor.lhs.false, !dbg !3068

lor.lhs.false:                                    ; preds = %while.body41
  %48 = load %union.tree_node*, %union.tree_node** %type42, align 8, !dbg !3068
  %base50 = bitcast %union.tree_node* %48 to %struct.tree_base*, !dbg !3068
  %49 = bitcast %struct.tree_base* %base50 to i64*, !dbg !3068
  %bf.load51 = load i64, i64* %49, align 8, !dbg !3068
  %bf.clear52 = and i64 %bf.load51, 65535, !dbg !3068
  %bf.cast53 = trunc i64 %bf.clear52 to i32, !dbg !3068
  %cmp54 = icmp eq i32 %bf.cast53, 12, !dbg !3068
  br i1 %cmp54, label %if.then63, label %lor.lhs.false56, !dbg !3070

lor.lhs.false56:                                  ; preds = %lor.lhs.false
  %50 = load %union.tree_node*, %union.tree_node** %type42, align 8, !dbg !3071
  %base57 = bitcast %union.tree_node* %50 to %struct.tree_base*, !dbg !3071
  %51 = bitcast %struct.tree_base* %base57 to i64*, !dbg !3071
  %bf.load58 = load i64, i64* %51, align 8, !dbg !3071
  %bf.clear59 = and i64 %bf.load58, 65535, !dbg !3071
  %bf.cast60 = trunc i64 %bf.clear59 to i32, !dbg !3071
  %cmp61 = icmp eq i32 %bf.cast60, 15, !dbg !3072
  br i1 %cmp61, label %if.then63, label %if.end71, !dbg !3073

if.then63:                                        ; preds = %lor.lhs.false56, %lor.lhs.false, %while.body41
  %52 = load %struct.splay_tree_s*, %struct.splay_tree_s** @all_canon_types, align 8, !dbg !3074
  %53 = load %struct.splay_tree_node_s*, %struct.splay_tree_node_s** %result, align 8, !dbg !3076
  %key64 = getelementptr inbounds %struct.splay_tree_node_s, %struct.splay_tree_node_s* %53, i32 0, i32 0, !dbg !3077
  %54 = load i64, i64* %key64, align 8, !dbg !3077
  call void @splay_tree_remove(%struct.splay_tree_s* %52, i64 %54), !dbg !3078
  %55 = load %struct.splay_tree_s*, %struct.splay_tree_s** @type_to_canon_type, align 8, !dbg !3079
  %56 = load %union.tree_node*, %union.tree_node** %type42, align 8, !dbg !3080
  %57 = ptrtoint %union.tree_node* %56 to i64, !dbg !3081
  call void @splay_tree_remove(%struct.splay_tree_s* %55, i64 %57), !dbg !3082
  %58 = load %struct.splay_tree_s*, %struct.splay_tree_s** @uid_to_canon_type, align 8, !dbg !3083
  %59 = load %union.tree_node*, %union.tree_node** %type42, align 8, !dbg !3084
  %type65 = bitcast %union.tree_node* %59 to %struct.tree_type*, !dbg !3084
  %uid66 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type65, i32 0, i32 5, !dbg !3084
  %60 = load i32, i32* %uid66, align 8, !dbg !3084
  %conv67 = zext i32 %60 to i64, !dbg !3085
  call void @splay_tree_remove(%struct.splay_tree_s* %58, i64 %conv67), !dbg !3086
  %61 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @global_types_seen, align 8, !dbg !3087
  %62 = load %union.tree_node*, %union.tree_node** %type42, align 8, !dbg !3088
  %type68 = bitcast %union.tree_node* %62 to %struct.tree_type*, !dbg !3088
  %uid69 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type68, i32 0, i32 5, !dbg !3088
  %63 = load i32, i32* %uid69, align 8, !dbg !3088
  %call70 = call zeroext i8 @bitmap_clear_bit(%struct.bitmap_head_def* %61, i32 %63), !dbg !3089
  br label %if.end71, !dbg !3090

if.end71:                                         ; preds = %if.then63, %lor.lhs.false56
  %64 = load %struct.splay_tree_s*, %struct.splay_tree_s** @all_canon_types, align 8, !dbg !3091
  %65 = load %union.tree_node*, %union.tree_node** %key43, align 8, !dbg !3092
  %66 = ptrtoint %union.tree_node* %65 to i64, !dbg !3093
  %call72 = call %struct.splay_tree_node_s* @splay_tree_successor(%struct.splay_tree_s* %64, i64 %66), !dbg !3094
  store %struct.splay_tree_node_s* %call72, %struct.splay_tree_node_s** %result, align 8, !dbg !3095
  br label %while.cond39, !dbg !3055, !llvm.loop !3096

while.end73:                                      ; preds = %while.cond39
  %67 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3098
  %tobool74 = icmp ne %struct._IO_FILE* %67, null, !dbg !3098
  br i1 %tobool74, label %if.then75, label %if.end91, !dbg !3100

if.then75:                                        ; preds = %while.end73
  %68 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @global_types_seen, align 8, !dbg !3101
  call void @bmp_iter_set_init(%struct.bitmap_iterator* %bi, %struct.bitmap_head_def* %68, i32 0, i32* %i), !dbg !3101
  br label %for.cond76, !dbg !3101

for.cond76:                                       ; preds = %for.inc89, %if.then75
  %call77 = call zeroext i8 @bmp_iter_set(%struct.bitmap_iterator* %bi, i32* %i), !dbg !3104
  %tobool78 = icmp ne i8 %call77, 0, !dbg !3101
  br i1 %tobool78, label %for.body79, label %for.end90, !dbg !3101

for.body79:                                       ; preds = %for.cond76
  call void @llvm.dbg.declare(metadata %union.tree_node** %type80, metadata !3106, metadata !DIExpression()), !dbg !3108
  %69 = load i32, i32* %i, align 4, !dbg !3109
  %call81 = call %union.tree_node* @type_for_uid(i32 %69), !dbg !3110
  store %union.tree_node* %call81, %union.tree_node** %type80, align 8, !dbg !3108
  %70 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3111
  %71 = load i32, i32* %i, align 4, !dbg !3112
  %call82 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %70, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.6, i64 0, i64 0), i32 %71), !dbg !3113
  %72 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3114
  %73 = load %union.tree_node*, %union.tree_node** %type80, align 8, !dbg !3115
  call void @print_generic_expr(%struct._IO_FILE* %72, %union.tree_node* %73, i32 0), !dbg !3116
  %74 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @global_types_full_escape, align 8, !dbg !3117
  %75 = load i32, i32* %i, align 4, !dbg !3119
  %call83 = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %74, i32 %75), !dbg !3120
  %tobool84 = icmp ne i32 %call83, 0, !dbg !3120
  br i1 %tobool84, label %if.then85, label %if.else, !dbg !3121

if.then85:                                        ; preds = %for.body79
  %76 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3122
  %call86 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %76, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.7, i64 0, i64 0)), !dbg !3123
  br label %if.end88, !dbg !3123

if.else:                                          ; preds = %for.body79
  %77 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3124
  %call87 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %77, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.8, i64 0, i64 0)), !dbg !3125
  br label %if.end88

if.end88:                                         ; preds = %if.else, %if.then85
  br label %for.inc89, !dbg !3126

for.inc89:                                        ; preds = %if.end88
  call void @bmp_iter_next(%struct.bitmap_iterator* %bi, i32* %i), !dbg !3104
  br label %for.cond76, !dbg !3104, !llvm.loop !3127

for.end90:                                        ; preds = %for.cond76
  br label %if.end91, !dbg !3129

if.end91:                                         ; preds = %for.end90, %while.end73
  %78 = load %struct.splay_tree_s*, %struct.splay_tree_s** @uid_to_addressof_up_map, align 8, !dbg !3130
  %call92 = call %struct.splay_tree_node_s* @splay_tree_min(%struct.splay_tree_s* %78), !dbg !3131
  store %struct.splay_tree_node_s* %call92, %struct.splay_tree_node_s** %result, align 8, !dbg !3132
  br label %while.cond93, !dbg !3133

while.cond93:                                     ; preds = %while.body95, %if.end91
  %79 = load %struct.splay_tree_node_s*, %struct.splay_tree_node_s** %result, align 8, !dbg !3134
  %tobool94 = icmp ne %struct.splay_tree_node_s* %79, null, !dbg !3133
  br i1 %tobool94, label %while.body95, label %while.end103, !dbg !3133

while.body95:                                     ; preds = %while.cond93
  call void @llvm.dbg.declare(metadata i32* %uid96, metadata !3135, metadata !DIExpression()), !dbg !3137
  %80 = load %struct.splay_tree_node_s*, %struct.splay_tree_node_s** %result, align 8, !dbg !3138
  %key97 = getelementptr inbounds %struct.splay_tree_node_s, %struct.splay_tree_node_s* %80, i32 0, i32 0, !dbg !3139
  %81 = load i64, i64* %key97, align 8, !dbg !3139
  %conv98 = trunc i64 %81 to i32, !dbg !3140
  store i32 %conv98, i32* %uid96, align 4, !dbg !3137
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %bm, metadata !3141, metadata !DIExpression()), !dbg !3142
  %82 = load %struct.splay_tree_node_s*, %struct.splay_tree_node_s** %result, align 8, !dbg !3143
  %value99 = getelementptr inbounds %struct.splay_tree_node_s, %struct.splay_tree_node_s* %82, i32 0, i32 1, !dbg !3144
  %83 = load i64, i64* %value99, align 8, !dbg !3144
  %84 = inttoptr i64 %83 to %struct.bitmap_head_def*, !dbg !3145
  store %struct.bitmap_head_def* %84, %struct.bitmap_head_def** %bm, align 8, !dbg !3142
  %85 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %bm, align 8, !dbg !3146
  call void @bitmap_obstack_free(%struct.bitmap_head_def* %85), !dbg !3146
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** %bm, align 8, !dbg !3146
  %86 = load %struct.splay_tree_s*, %struct.splay_tree_s** @uid_to_addressof_up_map, align 8, !dbg !3147
  %87 = load i32, i32* %uid96, align 4, !dbg !3148
  %conv100 = sext i32 %87 to i64, !dbg !3149
  call void @splay_tree_remove(%struct.splay_tree_s* %86, i64 %conv100), !dbg !3150
  %88 = load %struct.splay_tree_s*, %struct.splay_tree_s** @uid_to_addressof_up_map, align 8, !dbg !3151
  %89 = load i32, i32* %uid96, align 4, !dbg !3152
  %conv101 = sext i32 %89 to i64, !dbg !3152
  %call102 = call %struct.splay_tree_node_s* @splay_tree_successor(%struct.splay_tree_s* %88, i64 %conv101), !dbg !3153
  store %struct.splay_tree_node_s* %call102, %struct.splay_tree_node_s** %result, align 8, !dbg !3154
  br label %while.cond93, !dbg !3133, !llvm.loop !3155

while.end103:                                     ; preds = %while.cond93
  %90 = load %struct.splay_tree_s*, %struct.splay_tree_s** @uid_to_subtype_map, align 8, !dbg !3157
  %call104 = call %struct.splay_tree_node_s* @splay_tree_min(%struct.splay_tree_s* %90), !dbg !3158
  store %struct.splay_tree_node_s* %call104, %struct.splay_tree_node_s** %result, align 8, !dbg !3159
  br label %while.cond105, !dbg !3160

while.cond105:                                    ; preds = %while.body107, %while.end103
  %91 = load %struct.splay_tree_node_s*, %struct.splay_tree_node_s** %result, align 8, !dbg !3161
  %tobool106 = icmp ne %struct.splay_tree_node_s* %91, null, !dbg !3160
  br i1 %tobool106, label %while.body107, label %while.end111, !dbg !3160

while.body107:                                    ; preds = %while.cond105
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %b, metadata !3162, metadata !DIExpression()), !dbg !3164
  %92 = load %struct.splay_tree_node_s*, %struct.splay_tree_node_s** %result, align 8, !dbg !3165
  %value108 = getelementptr inbounds %struct.splay_tree_node_s, %struct.splay_tree_node_s* %92, i32 0, i32 1, !dbg !3166
  %93 = load i64, i64* %value108, align 8, !dbg !3166
  %94 = inttoptr i64 %93 to %struct.bitmap_head_def*, !dbg !3167
  store %struct.bitmap_head_def* %94, %struct.bitmap_head_def** %b, align 8, !dbg !3164
  %95 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %b, align 8, !dbg !3168
  call void @bitmap_obstack_free(%struct.bitmap_head_def* %95), !dbg !3168
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** %b, align 8, !dbg !3168
  %96 = load %struct.splay_tree_s*, %struct.splay_tree_s** @uid_to_subtype_map, align 8, !dbg !3169
  %97 = load %struct.splay_tree_node_s*, %struct.splay_tree_node_s** %result, align 8, !dbg !3170
  %key109 = getelementptr inbounds %struct.splay_tree_node_s, %struct.splay_tree_node_s* %97, i32 0, i32 0, !dbg !3171
  %98 = load i64, i64* %key109, align 8, !dbg !3171
  call void @splay_tree_remove(%struct.splay_tree_s* %96, i64 %98), !dbg !3172
  %99 = load %struct.splay_tree_s*, %struct.splay_tree_s** @uid_to_subtype_map, align 8, !dbg !3173
  %call110 = call %struct.splay_tree_node_s* @splay_tree_min(%struct.splay_tree_s* %99), !dbg !3174
  store %struct.splay_tree_node_s* %call110, %struct.splay_tree_node_s** %result, align 8, !dbg !3175
  br label %while.cond105, !dbg !3160, !llvm.loop !3176

while.end111:                                     ; preds = %while.cond105
  %100 = load %struct.splay_tree_s*, %struct.splay_tree_s** @uid_to_subtype_map, align 8, !dbg !3178
  call void @splay_tree_delete(%struct.splay_tree_s* %100), !dbg !3179
  store %struct.splay_tree_s* null, %struct.splay_tree_s** @uid_to_subtype_map, align 8, !dbg !3180
  %101 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @global_types_exposed_parameter, align 8, !dbg !3181
  call void @bitmap_obstack_free(%struct.bitmap_head_def* %101), !dbg !3181
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** @global_types_exposed_parameter, align 8, !dbg !3181
  %102 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @been_there_done_that, align 8, !dbg !3182
  call void @bitmap_obstack_free(%struct.bitmap_head_def* %102), !dbg !3182
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** @been_there_done_that, align 8, !dbg !3182
  %103 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @bitmap_tmp, align 8, !dbg !3183
  call void @bitmap_obstack_free(%struct.bitmap_head_def* %103), !dbg !3183
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** @bitmap_tmp, align 8, !dbg !3183
  ret i32 0, !dbg !3184
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @type_to_consider(%union.tree_node* %type) #0 !dbg !3185 {
entry:
  %retval = alloca i8, align 1
  %type.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %type.addr, metadata !3186, metadata !DIExpression()), !dbg !3187
  %0 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3188
  %type1 = bitcast %union.tree_node* %0 to %struct.tree_type*, !dbg !3188
  %main_variant = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1, i32 0, i32 16, !dbg !3188
  %1 = load %union.tree_node*, %union.tree_node** %main_variant, align 8, !dbg !3188
  store %union.tree_node* %1, %union.tree_node** %type.addr, align 8, !dbg !3189
  br label %while.cond, !dbg !3190

while.cond:                                       ; preds = %while.body, %entry
  %2 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3191
  %base = bitcast %union.tree_node* %2 to %struct.tree_base*, !dbg !3191
  %3 = bitcast %struct.tree_base* %base to i64*, !dbg !3191
  %bf.load = load i64, i64* %3, align 8, !dbg !3191
  %bf.clear = and i64 %bf.load, 65535, !dbg !3191
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !3191
  %cmp = icmp eq i32 %bf.cast, 10, !dbg !3191
  br i1 %cmp, label %lor.end, label %lor.lhs.false, !dbg !3191

lor.lhs.false:                                    ; preds = %while.cond
  %4 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3191
  %base2 = bitcast %union.tree_node* %4 to %struct.tree_base*, !dbg !3191
  %5 = bitcast %struct.tree_base* %base2 to i64*, !dbg !3191
  %bf.load3 = load i64, i64* %5, align 8, !dbg !3191
  %bf.clear4 = and i64 %bf.load3, 65535, !dbg !3191
  %bf.cast5 = trunc i64 %bf.clear4 to i32, !dbg !3191
  %cmp6 = icmp eq i32 %bf.cast5, 12, !dbg !3191
  br i1 %cmp6, label %lor.end, label %lor.rhs, !dbg !3192

lor.rhs:                                          ; preds = %lor.lhs.false
  %6 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3193
  %base7 = bitcast %union.tree_node* %6 to %struct.tree_base*, !dbg !3193
  %7 = bitcast %struct.tree_base* %base7 to i64*, !dbg !3193
  %bf.load8 = load i64, i64* %7, align 8, !dbg !3193
  %bf.clear9 = and i64 %bf.load8, 65535, !dbg !3193
  %bf.cast10 = trunc i64 %bf.clear9 to i32, !dbg !3193
  %cmp11 = icmp eq i32 %bf.cast10, 15, !dbg !3194
  br label %lor.end, !dbg !3192

lor.end:                                          ; preds = %lor.rhs, %lor.lhs.false, %while.cond
  %8 = phi i1 [ true, %lor.lhs.false ], [ true, %while.cond ], [ %cmp11, %lor.rhs ]
  br i1 %8, label %while.body, label %while.end, !dbg !3190

while.body:                                       ; preds = %lor.end
  %9 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3195
  %common = bitcast %union.tree_node* %9 to %struct.tree_common*, !dbg !3195
  %type12 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !3195
  %10 = load %union.tree_node*, %union.tree_node** %type12, align 8, !dbg !3195
  %type13 = bitcast %union.tree_node* %10 to %struct.tree_type*, !dbg !3195
  %main_variant14 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type13, i32 0, i32 16, !dbg !3195
  %11 = load %union.tree_node*, %union.tree_node** %main_variant14, align 8, !dbg !3195
  store %union.tree_node* %11, %union.tree_node** %type.addr, align 8, !dbg !3196
  br label %while.cond, !dbg !3190, !llvm.loop !3197

while.end:                                        ; preds = %lor.end
  %12 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3198
  %base15 = bitcast %union.tree_node* %12 to %struct.tree_base*, !dbg !3198
  %13 = bitcast %struct.tree_base* %base15 to i64*, !dbg !3198
  %bf.load16 = load i64, i64* %13, align 8, !dbg !3198
  %bf.clear17 = and i64 %bf.load16, 65535, !dbg !3198
  %bf.cast18 = trunc i64 %bf.clear17 to i32, !dbg !3198
  switch i32 %bf.cast18, label %sw.default [
    i32 7, label %sw.bb
    i32 13, label %sw.bb
    i32 6, label %sw.bb
    i32 8, label %sw.bb
    i32 18, label %sw.bb
    i32 9, label %sw.bb
    i32 11, label %sw.bb
    i32 16, label %sw.bb
    i32 17, label %sw.bb
    i32 14, label %sw.bb
    i32 19, label %sw.bb
  ], !dbg !3199

sw.bb:                                            ; preds = %while.end, %while.end, %while.end, %while.end, %while.end, %while.end, %while.end, %while.end, %while.end, %while.end, %while.end
  store i8 1, i8* %retval, align 1, !dbg !3200
  br label %return, !dbg !3200

sw.default:                                       ; preds = %while.end
  store i8 0, i8* %retval, align 1, !dbg !3202
  br label %return, !dbg !3202

return:                                           ; preds = %sw.default, %sw.bb
  %14 = load i8, i8* %retval, align 1, !dbg !3203
  ret i8 %14, !dbg !3203
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @discover_unique_type(%union.tree_node* %type) #0 !dbg !3204 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %type.addr = alloca %union.tree_node*, align 8
  %brand = alloca %struct.type_brand_s*, align 8
  %i = alloca i32, align 4
  %result = alloca %struct.splay_tree_node_s*, align 8
  %other_type = alloca %union.tree_node*, align 8
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %type.addr, metadata !3207, metadata !DIExpression()), !dbg !3208
  call void @llvm.dbg.declare(metadata %struct.type_brand_s** %brand, metadata !3209, metadata !DIExpression()), !dbg !3210
  %call = call i8* @xmalloc(i64 16), !dbg !3211
  %0 = bitcast i8* %call to %struct.type_brand_s*, !dbg !3211
  store %struct.type_brand_s* %0, %struct.type_brand_s** %brand, align 8, !dbg !3210
  call void @llvm.dbg.declare(metadata i32* %i, metadata !3212, metadata !DIExpression()), !dbg !3213
  store i32 0, i32* %i, align 4, !dbg !3213
  call void @llvm.dbg.declare(metadata %struct.splay_tree_node_s** %result, metadata !3214, metadata !DIExpression()), !dbg !3215
  %1 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3216
  %call1 = call i8* @get_name_of_type(%union.tree_node* %1), !dbg !3217
  %2 = load %struct.type_brand_s*, %struct.type_brand_s** %brand, align 8, !dbg !3218
  %name = getelementptr inbounds %struct.type_brand_s, %struct.type_brand_s* %2, i32 0, i32 0, !dbg !3219
  store i8* %call1, i8** %name, align 8, !dbg !3220
  br label %while.body, !dbg !3221

while.body:                                       ; preds = %entry, %if.end16
  %3 = load i32, i32* %i, align 4, !dbg !3222
  %inc = add nsw i32 %3, 1, !dbg !3222
  store i32 %inc, i32* %i, align 4, !dbg !3222
  %4 = load %struct.type_brand_s*, %struct.type_brand_s** %brand, align 8, !dbg !3224
  %seq = getelementptr inbounds %struct.type_brand_s, %struct.type_brand_s* %4, i32 0, i32 1, !dbg !3225
  store i32 %3, i32* %seq, align 8, !dbg !3226
  %5 = load %struct.splay_tree_s*, %struct.splay_tree_s** @all_canon_types, align 8, !dbg !3227
  %6 = load %struct.type_brand_s*, %struct.type_brand_s** %brand, align 8, !dbg !3228
  %7 = ptrtoint %struct.type_brand_s* %6 to i64, !dbg !3229
  %call2 = call %struct.splay_tree_node_s* @splay_tree_lookup(%struct.splay_tree_s* %5, i64 %7), !dbg !3230
  store %struct.splay_tree_node_s* %call2, %struct.splay_tree_node_s** %result, align 8, !dbg !3231
  %8 = load %struct.splay_tree_node_s*, %struct.splay_tree_node_s** %result, align 8, !dbg !3232
  %tobool = icmp ne %struct.splay_tree_node_s* %8, null, !dbg !3232
  br i1 %tobool, label %if.then, label %if.else, !dbg !3234

if.then:                                          ; preds = %while.body
  call void @llvm.dbg.declare(metadata %union.tree_node** %other_type, metadata !3235, metadata !DIExpression()), !dbg !3237
  %9 = load %struct.splay_tree_node_s*, %struct.splay_tree_node_s** %result, align 8, !dbg !3238
  %value = getelementptr inbounds %struct.splay_tree_node_s, %struct.splay_tree_node_s* %9, i32 0, i32 1, !dbg !3239
  %10 = load i64, i64* %value, align 8, !dbg !3239
  %11 = inttoptr i64 %10 to %union.tree_node*, !dbg !3240
  store %union.tree_node* %11, %union.tree_node** %other_type, align 8, !dbg !3237
  %12 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3241
  %13 = load %union.tree_node*, %union.tree_node** %other_type, align 8, !dbg !3243
  %call3 = call zeroext i8 @types_compatible_p(%union.tree_node* %12, %union.tree_node* %13), !dbg !3244
  %tobool4 = icmp ne i8 %call3, 0, !dbg !3244
  br i1 %tobool4, label %if.then5, label %if.end, !dbg !3245

if.then5:                                         ; preds = %if.then
  %14 = load %struct.type_brand_s*, %struct.type_brand_s** %brand, align 8, !dbg !3246
  %15 = bitcast %struct.type_brand_s* %14 to i8*, !dbg !3246
  call void @free(i8* %15), !dbg !3248
  %16 = load %struct.splay_tree_s*, %struct.splay_tree_s** @type_to_canon_type, align 8, !dbg !3249
  %17 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3250
  %18 = ptrtoint %union.tree_node* %17 to i64, !dbg !3251
  %19 = load %union.tree_node*, %union.tree_node** %other_type, align 8, !dbg !3252
  %20 = ptrtoint %union.tree_node* %19 to i64, !dbg !3253
  %call6 = call %struct.splay_tree_node_s* @splay_tree_insert(%struct.splay_tree_s* %16, i64 %18, i64 %20), !dbg !3254
  %21 = load %union.tree_node*, %union.tree_node** %other_type, align 8, !dbg !3255
  store %union.tree_node* %21, %union.tree_node** %retval, align 8, !dbg !3256
  br label %return, !dbg !3256

if.end:                                           ; preds = %if.then
  br label %if.end16, !dbg !3257

if.else:                                          ; preds = %while.body
  %22 = load i32, i32* %i, align 4, !dbg !3258
  %inc7 = add nsw i32 %22, 1, !dbg !3258
  store i32 %inc7, i32* %i, align 4, !dbg !3258
  %23 = load %struct.type_brand_s*, %struct.type_brand_s** %brand, align 8, !dbg !3260
  %seq8 = getelementptr inbounds %struct.type_brand_s, %struct.type_brand_s* %23, i32 0, i32 1, !dbg !3261
  store i32 %22, i32* %seq8, align 8, !dbg !3262
  %24 = load %struct.splay_tree_s*, %struct.splay_tree_s** @all_canon_types, align 8, !dbg !3263
  %25 = load %struct.type_brand_s*, %struct.type_brand_s** %brand, align 8, !dbg !3264
  %26 = ptrtoint %struct.type_brand_s* %25 to i64, !dbg !3265
  %27 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3266
  %28 = ptrtoint %union.tree_node* %27 to i64, !dbg !3267
  %call9 = call %struct.splay_tree_node_s* @splay_tree_insert(%struct.splay_tree_s* %24, i64 %26, i64 %28), !dbg !3268
  %29 = load %struct.splay_tree_s*, %struct.splay_tree_s** @type_to_canon_type, align 8, !dbg !3269
  %30 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3270
  %31 = ptrtoint %union.tree_node* %30 to i64, !dbg !3271
  %32 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3272
  %33 = ptrtoint %union.tree_node* %32 to i64, !dbg !3273
  %call10 = call %struct.splay_tree_node_s* @splay_tree_insert(%struct.splay_tree_s* %29, i64 %31, i64 %33), !dbg !3274
  %34 = load %struct.splay_tree_s*, %struct.splay_tree_s** @uid_to_canon_type, align 8, !dbg !3275
  %35 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3276
  %type11 = bitcast %union.tree_node* %35 to %struct.tree_type*, !dbg !3276
  %uid = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type11, i32 0, i32 5, !dbg !3276
  %36 = load i32, i32* %uid, align 8, !dbg !3276
  %conv = zext i32 %36 to i64, !dbg !3277
  %37 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3278
  %38 = ptrtoint %union.tree_node* %37 to i64, !dbg !3279
  %call12 = call %struct.splay_tree_node_s* @splay_tree_insert(%struct.splay_tree_s* %34, i64 %conv, i64 %38), !dbg !3280
  %39 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @global_types_seen, align 8, !dbg !3281
  %40 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3282
  %type13 = bitcast %union.tree_node* %40 to %struct.tree_type*, !dbg !3282
  %uid14 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type13, i32 0, i32 5, !dbg !3282
  %41 = load i32, i32* %uid14, align 8, !dbg !3282
  %call15 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %39, i32 %41), !dbg !3283
  %42 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3284
  store %union.tree_node* %42, %union.tree_node** %retval, align 8, !dbg !3285
  br label %return, !dbg !3285

if.end16:                                         ; preds = %if.end
  br label %while.body, !dbg !3221, !llvm.loop !3286

return:                                           ; preds = %if.else, %if.then5
  %43 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !3288
  ret %union.tree_node* %43, !dbg !3288
}

declare dso_local i8* @xmalloc(i64) #2

; Function Attrs: noinline nounwind uwtable
define internal i8* @get_name_of_type(%union.tree_node* %type) #0 !dbg !3289 {
entry:
  %retval = alloca i8*, align 8
  %type.addr = alloca %union.tree_node*, align 8
  %name = alloca %union.tree_node*, align 8
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %type.addr, metadata !3292, metadata !DIExpression()), !dbg !3293
  call void @llvm.dbg.declare(metadata %union.tree_node** %name, metadata !3294, metadata !DIExpression()), !dbg !3295
  %0 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3296
  %type1 = bitcast %union.tree_node* %0 to %struct.tree_type*, !dbg !3296
  %name2 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1, i32 0, i32 12, !dbg !3296
  %1 = load %union.tree_node*, %union.tree_node** %name2, align 8, !dbg !3296
  store %union.tree_node* %1, %union.tree_node** %name, align 8, !dbg !3295
  %2 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !3297
  %tobool = icmp ne %union.tree_node* %2, null, !dbg !3297
  br i1 %tobool, label %if.end, label %if.then, !dbg !3299

if.then:                                          ; preds = %entry
  store i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i64 0, i64 0), i8** %retval, align 8, !dbg !3300
  br label %return, !dbg !3300

if.end:                                           ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !3301
  %base = bitcast %union.tree_node* %3 to %struct.tree_base*, !dbg !3301
  %4 = bitcast %struct.tree_base* %base to i64*, !dbg !3301
  %bf.load = load i64, i64* %4, align 8, !dbg !3301
  %bf.clear = and i64 %bf.load, 65535, !dbg !3301
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !3301
  %cmp = icmp eq i32 %bf.cast, 35, !dbg !3303
  br i1 %cmp, label %if.then3, label %if.else9, !dbg !3304

if.then3:                                         ; preds = %if.end
  %5 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !3305
  %decl_minimal = bitcast %union.tree_node* %5 to %struct.tree_decl_minimal*, !dbg !3305
  %name4 = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal, i32 0, i32 3, !dbg !3305
  %6 = load %union.tree_node*, %union.tree_node** %name4, align 8, !dbg !3305
  %tobool5 = icmp ne %union.tree_node* %6, null, !dbg !3305
  br i1 %tobool5, label %if.then6, label %if.else, !dbg !3308

if.then6:                                         ; preds = %if.then3
  %7 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !3309
  %decl_minimal7 = bitcast %union.tree_node* %7 to %struct.tree_decl_minimal*, !dbg !3309
  %name8 = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal7, i32 0, i32 3, !dbg !3309
  %8 = load %union.tree_node*, %union.tree_node** %name8, align 8, !dbg !3309
  %identifier = bitcast %union.tree_node* %8 to %struct.tree_identifier*, !dbg !3309
  %id = getelementptr inbounds %struct.tree_identifier, %struct.tree_identifier* %identifier, i32 0, i32 1, !dbg !3309
  %str = getelementptr inbounds %struct.ht_identifier, %struct.ht_identifier* %id, i32 0, i32 0, !dbg !3309
  %9 = load i8*, i8** %str, align 8, !dbg !3309
  store i8* %9, i8** %retval, align 8, !dbg !3310
  br label %return, !dbg !3310

if.else:                                          ; preds = %if.then3
  store i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i64 0, i64 0), i8** %retval, align 8, !dbg !3311
  br label %return, !dbg !3311

if.else9:                                         ; preds = %if.end
  %10 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !3312
  %base10 = bitcast %union.tree_node* %10 to %struct.tree_base*, !dbg !3312
  %11 = bitcast %struct.tree_base* %base10 to i64*, !dbg !3312
  %bf.load11 = load i64, i64* %11, align 8, !dbg !3312
  %bf.clear12 = and i64 %bf.load11, 65535, !dbg !3312
  %bf.cast13 = trunc i64 %bf.clear12 to i32, !dbg !3312
  %cmp14 = icmp eq i32 %bf.cast13, 1, !dbg !3314
  br i1 %cmp14, label %if.then15, label %if.else19, !dbg !3315

if.then15:                                        ; preds = %if.else9
  %12 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !3316
  %identifier16 = bitcast %union.tree_node* %12 to %struct.tree_identifier*, !dbg !3316
  %id17 = getelementptr inbounds %struct.tree_identifier, %struct.tree_identifier* %identifier16, i32 0, i32 1, !dbg !3316
  %str18 = getelementptr inbounds %struct.ht_identifier, %struct.ht_identifier* %id17, i32 0, i32 0, !dbg !3316
  %13 = load i8*, i8** %str18, align 8, !dbg !3316
  store i8* %13, i8** %retval, align 8, !dbg !3317
  br label %return, !dbg !3317

if.else19:                                        ; preds = %if.else9
  store i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i64 0, i64 0), i8** %retval, align 8, !dbg !3318
  br label %return, !dbg !3318

return:                                           ; preds = %if.else19, %if.then15, %if.else, %if.then6, %if.then
  %14 = load i8*, i8** %retval, align 8, !dbg !3319
  ret i8* %14, !dbg !3319
}

declare dso_local zeroext i8 @types_compatible_p(%union.tree_node*, %union.tree_node*) #2

declare dso_local void @free(i8*) #2

declare dso_local %struct.splay_tree_node_s* @splay_tree_insert(%struct.splay_tree_s*, i64, i64) #2

declare dso_local zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_code(%union.gimple_statement_d* %g) #0 !dbg !3320 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !3323, metadata !DIExpression()), !dbg !3324
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !3325
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !3326
  %1 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !3327
  %bf.load = load i32, i32* %1, align 8, !dbg !3327
  %bf.clear = and i32 %bf.load, 255, !dbg !3327
  ret i32 %bf.clear, !dbg !3328
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @look_for_casts_stmt(%union.gimple_statement_d* %s) #0 !dbg !3329 {
entry:
  %s.addr = alloca %union.gimple_statement_d*, align 8
  %cast = alloca i32, align 4
  %castfromvar = alloca %union.tree_node*, align 8
  %i = alloca i64, align 8
  store %union.gimple_statement_d* %s, %union.gimple_statement_d** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %s.addr, metadata !3332, metadata !DIExpression()), !dbg !3333
  call void @llvm.dbg.declare(metadata i32* %cast, metadata !3334, metadata !DIExpression()), !dbg !3335
  store i32 0, i32* %cast, align 4, !dbg !3335
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !3336
  %call = call zeroext i8 @is_gimple_assign(%union.gimple_statement_d* %0), !dbg !3336
  %tobool = icmp ne i8 %call, 0, !dbg !3336
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !3336

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.2, i64 0, i64 0), i32 771, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !3336
  br label %cond.end, !dbg !3336

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !3336

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !3336
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !3337
  %call1 = call zeroext i8 @gimple_assign_cast_p(%union.gimple_statement_d* %1), !dbg !3339
  %tobool2 = icmp ne i8 %call1, 0, !dbg !3339
  br i1 %tobool2, label %if.then, label %if.else, !dbg !3340

if.then:                                          ; preds = %cond.end
  call void @llvm.dbg.declare(metadata %union.tree_node** %castfromvar, metadata !3341, metadata !DIExpression()), !dbg !3343
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !3344
  %call3 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %2), !dbg !3345
  store %union.tree_node* %call3, %union.tree_node** %castfromvar, align 8, !dbg !3343
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !3346
  %call4 = call %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %3), !dbg !3346
  %common = bitcast %union.tree_node* %call4 to %struct.tree_common*, !dbg !3346
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !3346
  %4 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !3346
  %5 = load %union.tree_node*, %union.tree_node** %castfromvar, align 8, !dbg !3347
  %call5 = call i32 @check_cast(%union.tree_node* %4, %union.tree_node* %5), !dbg !3348
  %6 = load i32, i32* %cast, align 4, !dbg !3349
  %or = or i32 %6, %call5, !dbg !3349
  store i32 %or, i32* %cast, align 4, !dbg !3349
  br label %if.end, !dbg !3350

if.else:                                          ; preds = %cond.end
  call void @llvm.dbg.declare(metadata i64* %i, metadata !3351, metadata !DIExpression()), !dbg !3353
  store i64 0, i64* %i, align 8, !dbg !3354
  br label %for.cond, !dbg !3356

for.cond:                                         ; preds = %for.inc, %if.else
  %7 = load i64, i64* %i, align 8, !dbg !3357
  %8 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !3359
  %call6 = call i32 @gimple_num_ops(%union.gimple_statement_d* %8), !dbg !3360
  %conv = zext i32 %call6 to i64, !dbg !3360
  %cmp = icmp ult i64 %7, %conv, !dbg !3361
  br i1 %cmp, label %for.body, label %for.end, !dbg !3362

for.body:                                         ; preds = %for.cond
  %9 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !3363
  %10 = load i64, i64* %i, align 8, !dbg !3364
  %conv8 = trunc i64 %10 to i32, !dbg !3364
  %call9 = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %9, i32 %conv8), !dbg !3365
  %call10 = call i32 @look_for_casts(%union.tree_node* %call9), !dbg !3366
  %11 = load i32, i32* %cast, align 4, !dbg !3367
  %or11 = or i32 %11, %call10, !dbg !3367
  store i32 %or11, i32* %cast, align 4, !dbg !3367
  br label %for.inc, !dbg !3368

for.inc:                                          ; preds = %for.body
  %12 = load i64, i64* %i, align 8, !dbg !3369
  %inc = add i64 %12, 1, !dbg !3369
  store i64 %inc, i64* %i, align 8, !dbg !3369
  br label %for.cond, !dbg !3370, !llvm.loop !3371

for.end:                                          ; preds = %for.cond
  br label %if.end

if.end:                                           ; preds = %for.end, %if.then
  %13 = load i32, i32* %cast, align 4, !dbg !3373
  %tobool12 = icmp ne i32 %13, 0, !dbg !3373
  br i1 %tobool12, label %if.end14, label %if.then13, !dbg !3375

if.then13:                                        ; preds = %if.end
  store i32 256, i32* %cast, align 4, !dbg !3376
  br label %if.end14, !dbg !3377

if.end14:                                         ; preds = %if.then13, %if.end
  %14 = load i32, i32* %cast, align 4, !dbg !3378
  ret i32 %14, !dbg !3379
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ssa_use_operand_d* @op_iter_init_use(%struct.ssa_operand_iterator_d* %ptr, %union.gimple_statement_d* %stmt, i32 %flags) #0 !dbg !3380 {
entry:
  %ptr.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %flags.addr = alloca i32, align 4
  store %struct.ssa_operand_iterator_d* %ptr, %struct.ssa_operand_iterator_d** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %ptr.addr, metadata !3384, metadata !DIExpression()), !dbg !3385
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !3386, metadata !DIExpression()), !dbg !3387
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !3388, metadata !DIExpression()), !dbg !3389
  %0 = load i32, i32* %flags.addr, align 4, !dbg !3390
  %and = and i32 %0, 10, !dbg !3390
  %cmp = icmp eq i32 %and, 0, !dbg !3390
  br i1 %cmp, label %land.lhs.true, label %cond.true, !dbg !3390

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %flags.addr, align 4, !dbg !3390
  %and1 = and i32 %1, 1, !dbg !3390
  %tobool = icmp ne i32 %and1, 0, !dbg !3390
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !3390

cond.true:                                        ; preds = %land.lhs.true, %entry
  call void @fancy_abort(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.5, i64 0, i64 0), i32 771, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !3390
  br label %cond.end, !dbg !3390

cond.false:                                       ; preds = %land.lhs.true
  br label %cond.end, !dbg !3390

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !3390
  %2 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !3391
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !3392
  %4 = load i32, i32* %flags.addr, align 4, !dbg !3393
  call void @op_iter_init(%struct.ssa_operand_iterator_d* %2, %union.gimple_statement_d* %3, i32 %4), !dbg !3394
  %5 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !3395
  %iter_type = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %5, i32 0, i32 1, !dbg !3396
  store i32 2, i32* %iter_type, align 4, !dbg !3397
  %6 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !3398
  %call = call %struct.ssa_use_operand_d* @op_iter_next_use(%struct.ssa_operand_iterator_d* %6), !dbg !3399
  ret %struct.ssa_use_operand_d* %call, !dbg !3400
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @op_iter_done(%struct.ssa_operand_iterator_d* %ptr) #0 !dbg !3401 {
entry:
  %ptr.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  store %struct.ssa_operand_iterator_d* %ptr, %struct.ssa_operand_iterator_d** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %ptr.addr, metadata !3406, metadata !DIExpression()), !dbg !3407
  %0 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !3408
  %done = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %0, i32 0, i32 0, !dbg !3409
  %1 = load i8, i8* %done, align 8, !dbg !3409
  ret i8 %1, !dbg !3410
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %use) #0 !dbg !3411 {
entry:
  %use.addr = alloca %struct.ssa_use_operand_d*, align 8
  store %struct.ssa_use_operand_d* %use, %struct.ssa_use_operand_d** %use.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %use.addr, metadata !3414, metadata !DIExpression()), !dbg !3415
  %0 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use.addr, align 8, !dbg !3416
  %use1 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %0, i32 0, i32 3, !dbg !3417
  %1 = load %union.tree_node**, %union.tree_node*** %use1, align 8, !dbg !3417
  %2 = load %union.tree_node*, %union.tree_node** %1, align 8, !dbg !3418
  ret %union.tree_node* %2, !dbg !3419
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ssa_use_operand_d* @op_iter_next_use(%struct.ssa_operand_iterator_d* %ptr) #0 !dbg !3420 {
entry:
  %retval = alloca %struct.ssa_use_operand_d*, align 8
  %ptr.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  %use_p = alloca %struct.ssa_use_operand_d*, align 8
  store %struct.ssa_operand_iterator_d* %ptr, %struct.ssa_operand_iterator_d** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %ptr.addr, metadata !3423, metadata !DIExpression()), !dbg !3424
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %use_p, metadata !3425, metadata !DIExpression()), !dbg !3426
  %0 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !3427
  %uses = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %0, i32 0, i32 3, !dbg !3429
  %1 = load %struct.use_optype_d*, %struct.use_optype_d** %uses, align 8, !dbg !3429
  %tobool = icmp ne %struct.use_optype_d* %1, null, !dbg !3427
  br i1 %tobool, label %if.then, label %if.end, !dbg !3430

if.then:                                          ; preds = %entry
  %2 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !3431
  %uses1 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %2, i32 0, i32 3, !dbg !3431
  %3 = load %struct.use_optype_d*, %struct.use_optype_d** %uses1, align 8, !dbg !3431
  %use_ptr = getelementptr inbounds %struct.use_optype_d, %struct.use_optype_d* %3, i32 0, i32 1, !dbg !3431
  store %struct.ssa_use_operand_d* %use_ptr, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !3433
  %4 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !3434
  %uses2 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %4, i32 0, i32 3, !dbg !3435
  %5 = load %struct.use_optype_d*, %struct.use_optype_d** %uses2, align 8, !dbg !3435
  %next = getelementptr inbounds %struct.use_optype_d, %struct.use_optype_d* %5, i32 0, i32 0, !dbg !3436
  %6 = load %struct.use_optype_d*, %struct.use_optype_d** %next, align 8, !dbg !3436
  %7 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !3437
  %uses3 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %7, i32 0, i32 3, !dbg !3438
  store %struct.use_optype_d* %6, %struct.use_optype_d** %uses3, align 8, !dbg !3439
  %8 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !3440
  store %struct.ssa_use_operand_d* %8, %struct.ssa_use_operand_d** %retval, align 8, !dbg !3441
  br label %return, !dbg !3441

if.end:                                           ; preds = %entry
  %9 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !3442
  %phi_i = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %9, i32 0, i32 4, !dbg !3444
  %10 = load i32, i32* %phi_i, align 8, !dbg !3444
  %11 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !3445
  %num_phi = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %11, i32 0, i32 5, !dbg !3446
  %12 = load i32, i32* %num_phi, align 4, !dbg !3446
  %cmp = icmp slt i32 %10, %12, !dbg !3447
  br i1 %cmp, label %if.then4, label %if.end6, !dbg !3448

if.then4:                                         ; preds = %if.end
  %13 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !3449
  %phi_stmt = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %13, i32 0, i32 6, !dbg !3449
  %14 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi_stmt, align 8, !dbg !3449
  %15 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !3449
  %phi_i5 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %15, i32 0, i32 4, !dbg !3449
  %16 = load i32, i32* %phi_i5, align 8, !dbg !3449
  %inc = add nsw i32 %16, 1, !dbg !3449
  store i32 %inc, i32* %phi_i5, align 8, !dbg !3449
  %call = call %struct.ssa_use_operand_d* @gimple_phi_arg_imm_use_ptr(%union.gimple_statement_d* %14, i32 %16), !dbg !3449
  store %struct.ssa_use_operand_d* %call, %struct.ssa_use_operand_d** %retval, align 8, !dbg !3451
  br label %return, !dbg !3451

if.end6:                                          ; preds = %if.end
  %17 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !3452
  %done = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %17, i32 0, i32 0, !dbg !3453
  store i8 1, i8* %done, align 8, !dbg !3454
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %retval, align 8, !dbg !3455
  br label %return, !dbg !3455

return:                                           ; preds = %if.end6, %if.then4, %if.then
  %18 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %retval, align 8, !dbg !3456
  ret %struct.ssa_use_operand_d* %18, !dbg !3456
}

declare dso_local void @fancy_abort(i8*, i32, i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_assign_cast_p(%union.gimple_statement_d* %s) #0 !dbg !3457 {
entry:
  %retval = alloca i8, align 1
  %s.addr = alloca %union.gimple_statement_d*, align 8
  %sc = alloca i32, align 4
  store %union.gimple_statement_d* %s, %union.gimple_statement_d** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %s.addr, metadata !3460, metadata !DIExpression()), !dbg !3461
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !3462
  %call = call zeroext i8 @is_gimple_assign(%union.gimple_statement_d* %0), !dbg !3464
  %tobool = icmp ne i8 %call, 0, !dbg !3464
  br i1 %tobool, label %if.then, label %if.end, !dbg !3465

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i32* %sc, metadata !3466, metadata !DIExpression()), !dbg !3468
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !3469
  %call1 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %1), !dbg !3470
  store i32 %call1, i32* %sc, align 4, !dbg !3468
  %2 = load i32, i32* %sc, align 4, !dbg !3471
  %cmp = icmp eq i32 %2, 116, !dbg !3471
  br i1 %cmp, label %lor.end, label %lor.lhs.false, !dbg !3471

lor.lhs.false:                                    ; preds = %if.then
  %3 = load i32, i32* %sc, align 4, !dbg !3471
  %cmp2 = icmp eq i32 %3, 113, !dbg !3471
  br i1 %cmp2, label %lor.end, label %lor.lhs.false3, !dbg !3472

lor.lhs.false3:                                   ; preds = %lor.lhs.false
  %4 = load i32, i32* %sc, align 4, !dbg !3473
  %cmp4 = icmp eq i32 %4, 118, !dbg !3474
  br i1 %cmp4, label %lor.end, label %lor.rhs, !dbg !3475

lor.rhs:                                          ; preds = %lor.lhs.false3
  %5 = load i32, i32* %sc, align 4, !dbg !3476
  %cmp5 = icmp eq i32 %5, 77, !dbg !3477
  br label %lor.end, !dbg !3475

lor.end:                                          ; preds = %lor.rhs, %lor.lhs.false3, %lor.lhs.false, %if.then
  %6 = phi i1 [ true, %lor.lhs.false3 ], [ true, %lor.lhs.false ], [ true, %if.then ], [ %cmp5, %lor.rhs ]
  %lor.ext = zext i1 %6 to i32, !dbg !3475
  %conv = trunc i32 %lor.ext to i8, !dbg !3471
  store i8 %conv, i8* %retval, align 1, !dbg !3478
  br label %return, !dbg !3478

if.end:                                           ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !3479
  br label %return, !dbg !3479

return:                                           ; preds = %if.end, %lor.end
  %7 = load i8, i8* %retval, align 1, !dbg !3480
  ret i8 %7, !dbg !3480
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @check_cast(%union.tree_node* %to_type, %union.tree_node* %from) #0 !dbg !3481 {
entry:
  %retval = alloca i32, align 4
  %to_type.addr = alloca %union.tree_node*, align 8
  %from.addr = alloca %union.tree_node*, align 8
  %from_type = alloca %union.tree_node*, align 8
  %to_interesting_type = alloca i8, align 1
  %from_interesting_type = alloca i8, align 1
  %cast = alloca i32, align 4
  store %union.tree_node* %to_type, %union.tree_node** %to_type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %to_type.addr, metadata !3484, metadata !DIExpression()), !dbg !3485
  store %union.tree_node* %from, %union.tree_node** %from.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %from.addr, metadata !3486, metadata !DIExpression()), !dbg !3487
  call void @llvm.dbg.declare(metadata %union.tree_node** %from_type, metadata !3488, metadata !DIExpression()), !dbg !3489
  %0 = load %union.tree_node*, %union.tree_node** %from.addr, align 8, !dbg !3490
  %common = bitcast %union.tree_node* %0 to %struct.tree_common*, !dbg !3490
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !3490
  %1 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !3490
  %call = call %union.tree_node* @get_canon_type(%union.tree_node* %1, i8 zeroext 0, i8 zeroext 0), !dbg !3491
  store %union.tree_node* %call, %union.tree_node** %from_type, align 8, !dbg !3489
  call void @llvm.dbg.declare(metadata i8* %to_interesting_type, metadata !3492, metadata !DIExpression()), !dbg !3493
  call void @llvm.dbg.declare(metadata i8* %from_interesting_type, metadata !3494, metadata !DIExpression()), !dbg !3495
  call void @llvm.dbg.declare(metadata i32* %cast, metadata !3496, metadata !DIExpression()), !dbg !3497
  store i32 256, i32* %cast, align 4, !dbg !3497
  %2 = load %union.tree_node*, %union.tree_node** %to_type.addr, align 8, !dbg !3498
  %call1 = call %union.tree_node* @get_canon_type(%union.tree_node* %2, i8 zeroext 0, i8 zeroext 0), !dbg !3499
  store %union.tree_node* %call1, %union.tree_node** %to_type.addr, align 8, !dbg !3500
  %3 = load %union.tree_node*, %union.tree_node** %from_type, align 8, !dbg !3501
  %tobool = icmp ne %union.tree_node* %3, null, !dbg !3501
  br i1 %tobool, label %lor.lhs.false, label %if.then, !dbg !3503

lor.lhs.false:                                    ; preds = %entry
  %4 = load %union.tree_node*, %union.tree_node** %to_type.addr, align 8, !dbg !3504
  %tobool2 = icmp ne %union.tree_node* %4, null, !dbg !3504
  br i1 %tobool2, label %lor.lhs.false3, label %if.then, !dbg !3505

lor.lhs.false3:                                   ; preds = %lor.lhs.false
  %5 = load %union.tree_node*, %union.tree_node** %from_type, align 8, !dbg !3506
  %6 = load %union.tree_node*, %union.tree_node** %to_type.addr, align 8, !dbg !3507
  %cmp = icmp eq %union.tree_node* %5, %6, !dbg !3508
  br i1 %cmp, label %if.then, label %if.end, !dbg !3509

if.then:                                          ; preds = %lor.lhs.false3, %lor.lhs.false, %entry
  %7 = load i32, i32* %cast, align 4, !dbg !3510
  store i32 %7, i32* %retval, align 4, !dbg !3511
  br label %return, !dbg !3511

if.end:                                           ; preds = %lor.lhs.false3
  %8 = load %union.tree_node*, %union.tree_node** %to_type.addr, align 8, !dbg !3512
  %call4 = call i32 @ipa_type_escape_star_count_of_interesting_type(%union.tree_node* %8), !dbg !3513
  %cmp5 = icmp sge i32 %call4, 0, !dbg !3514
  %conv = zext i1 %cmp5 to i32, !dbg !3514
  %conv6 = trunc i32 %conv to i8, !dbg !3513
  store i8 %conv6, i8* %to_interesting_type, align 1, !dbg !3515
  %9 = load %union.tree_node*, %union.tree_node** %from_type, align 8, !dbg !3516
  %call7 = call i32 @ipa_type_escape_star_count_of_interesting_type(%union.tree_node* %9), !dbg !3517
  %cmp8 = icmp sge i32 %call7, 0, !dbg !3518
  %conv9 = zext i1 %cmp8 to i32, !dbg !3518
  %conv10 = trunc i32 %conv9 to i8, !dbg !3517
  store i8 %conv10, i8* %from_interesting_type, align 1, !dbg !3519
  %10 = load i8, i8* %to_interesting_type, align 1, !dbg !3520
  %tobool11 = icmp ne i8 %10, 0, !dbg !3520
  br i1 %tobool11, label %if.then12, label %if.else59, !dbg !3522

if.then12:                                        ; preds = %if.end
  %11 = load i8, i8* %from_interesting_type, align 1, !dbg !3523
  %tobool13 = icmp ne i8 %11, 0, !dbg !3523
  br i1 %tobool13, label %if.then14, label %if.else, !dbg !3525

if.then14:                                        ; preds = %if.then12
  %12 = load %union.tree_node*, %union.tree_node** %to_type.addr, align 8, !dbg !3526
  %13 = load %union.tree_node*, %union.tree_node** %from_type, align 8, !dbg !3528
  %call15 = call i32 @check_cast_type(%union.tree_node* %12, %union.tree_node* %13), !dbg !3529
  store i32 %call15, i32* %cast, align 4, !dbg !3530
  %14 = load i32, i32* %cast, align 4, !dbg !3531
  switch i32 %14, label %sw.default [
    i32 1, label %sw.bb
    i32 8, label %sw.bb
    i32 2, label %sw.bb
    i32 4, label %sw.bb16
  ], !dbg !3532

sw.bb:                                            ; preds = %if.then14, %if.then14, %if.then14
  br label %sw.epilog, !dbg !3533

sw.bb16:                                          ; preds = %if.then14
  %15 = load %union.tree_node*, %union.tree_node** %to_type.addr, align 8, !dbg !3535
  %call17 = call %union.tree_node* @mark_type(%union.tree_node* %15, i32 1), !dbg !3536
  %16 = load %union.tree_node*, %union.tree_node** %from_type, align 8, !dbg !3537
  %call18 = call %union.tree_node* @mark_type(%union.tree_node* %16, i32 1), !dbg !3538
  br label %sw.epilog, !dbg !3539

sw.default:                                       ; preds = %if.then14
  br label %sw.epilog, !dbg !3540

sw.epilog:                                        ; preds = %sw.default, %sw.bb16, %sw.bb
  br label %if.end58, !dbg !3541

if.else:                                          ; preds = %if.then12
  %17 = load %union.tree_node*, %union.tree_node** %to_type.addr, align 8, !dbg !3542
  %base = bitcast %union.tree_node* %17 to %struct.tree_base*, !dbg !3542
  %18 = bitcast %struct.tree_base* %base to i64*, !dbg !3542
  %bf.load = load i64, i64* %18, align 8, !dbg !3542
  %bf.clear = and i64 %bf.load, 65535, !dbg !3542
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !3542
  %cmp19 = icmp eq i32 %bf.cast, 10, !dbg !3542
  br i1 %cmp19, label %land.lhs.true, label %lor.lhs.false21, !dbg !3542

lor.lhs.false21:                                  ; preds = %if.else
  %19 = load %union.tree_node*, %union.tree_node** %to_type.addr, align 8, !dbg !3542
  %base22 = bitcast %union.tree_node* %19 to %struct.tree_base*, !dbg !3542
  %20 = bitcast %struct.tree_base* %base22 to i64*, !dbg !3542
  %bf.load23 = load i64, i64* %20, align 8, !dbg !3542
  %bf.clear24 = and i64 %bf.load23, 65535, !dbg !3542
  %bf.cast25 = trunc i64 %bf.clear24 to i32, !dbg !3542
  %cmp26 = icmp eq i32 %bf.cast25, 12, !dbg !3542
  br i1 %cmp26, label %land.lhs.true, label %if.else42, !dbg !3545

land.lhs.true:                                    ; preds = %lor.lhs.false21, %if.else
  %21 = load %union.tree_node*, %union.tree_node** %from_type, align 8, !dbg !3546
  %base28 = bitcast %union.tree_node* %21 to %struct.tree_base*, !dbg !3546
  %22 = bitcast %struct.tree_base* %base28 to i64*, !dbg !3546
  %bf.load29 = load i64, i64* %22, align 8, !dbg !3546
  %bf.clear30 = and i64 %bf.load29, 65535, !dbg !3546
  %bf.cast31 = trunc i64 %bf.clear30 to i32, !dbg !3546
  %cmp32 = icmp eq i32 %bf.cast31, 10, !dbg !3546
  br i1 %cmp32, label %if.else42, label %lor.lhs.false34, !dbg !3546

lor.lhs.false34:                                  ; preds = %land.lhs.true
  %23 = load %union.tree_node*, %union.tree_node** %from_type, align 8, !dbg !3546
  %base35 = bitcast %union.tree_node* %23 to %struct.tree_base*, !dbg !3546
  %24 = bitcast %struct.tree_base* %base35 to i64*, !dbg !3546
  %bf.load36 = load i64, i64* %24, align 8, !dbg !3546
  %bf.clear37 = and i64 %bf.load36, 65535, !dbg !3546
  %bf.cast38 = trunc i64 %bf.clear37 to i32, !dbg !3546
  %cmp39 = icmp eq i32 %bf.cast38, 12, !dbg !3546
  br i1 %cmp39, label %if.else42, label %if.then41, !dbg !3547

if.then41:                                        ; preds = %lor.lhs.false34
  store i32 32, i32* %cast, align 4, !dbg !3548
  br label %if.end57, !dbg !3549

if.else42:                                        ; preds = %lor.lhs.false34, %land.lhs.true, %lor.lhs.false21
  %25 = load %union.tree_node*, %union.tree_node** %from.addr, align 8, !dbg !3550
  %base43 = bitcast %union.tree_node* %25 to %struct.tree_base*, !dbg !3550
  %26 = bitcast %struct.tree_base* %base43 to i64*, !dbg !3550
  %bf.load44 = load i64, i64* %26, align 8, !dbg !3550
  %bf.clear45 = and i64 %bf.load44, 65535, !dbg !3550
  %bf.cast46 = trunc i64 %bf.clear45 to i32, !dbg !3550
  %cmp47 = icmp eq i32 %bf.cast46, 141, !dbg !3552
  br i1 %cmp47, label %land.lhs.true49, label %if.else54, !dbg !3553

land.lhs.true49:                                  ; preds = %if.else42
  %27 = load %union.tree_node*, %union.tree_node** %from.addr, align 8, !dbg !3554
  %call50 = call zeroext i8 @is_malloc_result(%union.tree_node* %27), !dbg !3555
  %conv51 = zext i8 %call50 to i32, !dbg !3555
  %tobool52 = icmp ne i32 %conv51, 0, !dbg !3555
  br i1 %tobool52, label %if.then53, label %if.else54, !dbg !3556

if.then53:                                        ; preds = %land.lhs.true49
  store i32 128, i32* %cast, align 4, !dbg !3557
  br label %if.end56, !dbg !3558

if.else54:                                        ; preds = %land.lhs.true49, %if.else42
  store i32 16, i32* %cast, align 4, !dbg !3559
  %28 = load %union.tree_node*, %union.tree_node** %to_type.addr, align 8, !dbg !3561
  %call55 = call %union.tree_node* @mark_type(%union.tree_node* %28, i32 1), !dbg !3562
  br label %if.end56

if.end56:                                         ; preds = %if.else54, %if.then53
  br label %if.end57

if.end57:                                         ; preds = %if.end56, %if.then41
  br label %if.end58

if.end58:                                         ; preds = %if.end57, %sw.epilog
  br label %if.end64, !dbg !3523

if.else59:                                        ; preds = %if.end
  %29 = load i8, i8* %from_interesting_type, align 1, !dbg !3563
  %tobool60 = icmp ne i8 %29, 0, !dbg !3563
  br i1 %tobool60, label %if.then61, label %if.end63, !dbg !3565

if.then61:                                        ; preds = %if.else59
  %30 = load %union.tree_node*, %union.tree_node** %from_type, align 8, !dbg !3566
  %call62 = call %union.tree_node* @mark_type(%union.tree_node* %30, i32 1), !dbg !3568
  store i32 64, i32* %cast, align 4, !dbg !3569
  br label %if.end63, !dbg !3570

if.end63:                                         ; preds = %if.then61, %if.else59
  br label %if.end64

if.end64:                                         ; preds = %if.end63, %if.end58
  %31 = load i32, i32* %cast, align 4, !dbg !3571
  store i32 %31, i32* %retval, align 4, !dbg !3572
  br label %return, !dbg !3572

return:                                           ; preds = %if.end64, %if.then
  %32 = load i32, i32* %retval, align 4, !dbg !3573
  ret i32 %32, !dbg !3573
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_num_ops(%union.gimple_statement_d* %gs) #0 !dbg !3574 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !3577, metadata !DIExpression()), !dbg !3578
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !3579
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !3580
  %num_ops = getelementptr inbounds %struct.gimple_statement_base, %struct.gimple_statement_base* %gsbase, i32 0, i32 3, !dbg !3581
  %1 = load i32, i32* %num_ops, align 4, !dbg !3581
  ret i32 %1, !dbg !3582
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @look_for_casts(%union.tree_node* %t) #0 !dbg !3583 {
entry:
  %t.addr = alloca %union.tree_node*, align 8
  %cast = alloca i32, align 4
  %castfromvar = alloca %union.tree_node*, align 8
  %castfromref = alloca %union.tree_node*, align 8
  store %union.tree_node* %t, %union.tree_node** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %t.addr, metadata !3586, metadata !DIExpression()), !dbg !3587
  call void @llvm.dbg.declare(metadata i32* %cast, metadata !3588, metadata !DIExpression()), !dbg !3589
  store i32 0, i32* %cast, align 4, !dbg !3589
  %0 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !3590
  %call = call zeroext i8 @is_gimple_cast(%union.tree_node* %0), !dbg !3592
  %conv = zext i8 %call to i32, !dbg !3592
  %tobool = icmp ne i32 %conv, 0, !dbg !3592
  br i1 %tobool, label %if.then, label %lor.lhs.false, !dbg !3593

lor.lhs.false:                                    ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !3594
  %base = bitcast %union.tree_node* %1 to %struct.tree_base*, !dbg !3594
  %2 = bitcast %struct.tree_base* %base to i64*, !dbg !3594
  %bf.load = load i64, i64* %2, align 8, !dbg !3594
  %bf.clear = and i64 %bf.load, 65535, !dbg !3594
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !3594
  %cmp = icmp eq i32 %bf.cast, 118, !dbg !3595
  br i1 %cmp, label %if.then, label %if.else, !dbg !3596

if.then:                                          ; preds = %lor.lhs.false, %entry
  call void @llvm.dbg.declare(metadata %union.tree_node** %castfromvar, metadata !3597, metadata !DIExpression()), !dbg !3599
  %3 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !3600
  %exp = bitcast %union.tree_node* %3 to %struct.tree_exp*, !dbg !3600
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !3600
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !3600
  %4 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !3600
  store %union.tree_node* %4, %union.tree_node** %castfromvar, align 8, !dbg !3599
  %5 = load i32, i32* %cast, align 4, !dbg !3601
  %6 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !3602
  %common = bitcast %union.tree_node* %6 to %struct.tree_common*, !dbg !3602
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !3602
  %7 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !3602
  %8 = load %union.tree_node*, %union.tree_node** %castfromvar, align 8, !dbg !3603
  %call2 = call i32 @check_cast(%union.tree_node* %7, %union.tree_node* %8), !dbg !3604
  %or = or i32 %5, %call2, !dbg !3605
  store i32 %or, i32* %cast, align 4, !dbg !3606
  br label %if.end37, !dbg !3607

if.else:                                          ; preds = %lor.lhs.false
  br label %while.cond, !dbg !3608

while.cond:                                       ; preds = %if.end36, %if.else
  %9 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !3609
  %call3 = call zeroext i8 @handled_component_p(%union.tree_node* %9), !dbg !3610
  %tobool4 = icmp ne i8 %call3, 0, !dbg !3608
  br i1 %tobool4, label %while.body, label %while.end, !dbg !3608

while.body:                                       ; preds = %while.cond
  %10 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !3611
  %exp5 = bitcast %union.tree_node* %10 to %struct.tree_exp*, !dbg !3611
  %operands6 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp5, i32 0, i32 3, !dbg !3611
  %arrayidx7 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands6, i64 0, i64 0, !dbg !3611
  %11 = load %union.tree_node*, %union.tree_node** %arrayidx7, align 8, !dbg !3611
  store %union.tree_node* %11, %union.tree_node** %t.addr, align 8, !dbg !3613
  %12 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !3614
  %base8 = bitcast %union.tree_node* %12 to %struct.tree_base*, !dbg !3614
  %13 = bitcast %struct.tree_base* %base8 to i64*, !dbg !3614
  %bf.load9 = load i64, i64* %13, align 8, !dbg !3614
  %bf.clear10 = and i64 %bf.load9, 65535, !dbg !3614
  %bf.cast11 = trunc i64 %bf.clear10 to i32, !dbg !3614
  %cmp12 = icmp eq i32 %bf.cast11, 118, !dbg !3616
  br i1 %cmp12, label %if.then14, label %if.else22, !dbg !3617

if.then14:                                        ; preds = %while.body
  call void @llvm.dbg.declare(metadata %union.tree_node** %castfromref, metadata !3618, metadata !DIExpression()), !dbg !3620
  %14 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !3621
  %exp15 = bitcast %union.tree_node* %14 to %struct.tree_exp*, !dbg !3621
  %operands16 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp15, i32 0, i32 3, !dbg !3621
  %arrayidx17 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands16, i64 0, i64 0, !dbg !3621
  %15 = load %union.tree_node*, %union.tree_node** %arrayidx17, align 8, !dbg !3621
  store %union.tree_node* %15, %union.tree_node** %castfromref, align 8, !dbg !3620
  %16 = load i32, i32* %cast, align 4, !dbg !3622
  %17 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !3623
  %common18 = bitcast %union.tree_node* %17 to %struct.tree_common*, !dbg !3623
  %type19 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common18, i32 0, i32 2, !dbg !3623
  %18 = load %union.tree_node*, %union.tree_node** %type19, align 8, !dbg !3623
  %19 = load %union.tree_node*, %union.tree_node** %castfromref, align 8, !dbg !3624
  %call20 = call i32 @check_cast(%union.tree_node* %18, %union.tree_node* %19), !dbg !3625
  %or21 = or i32 %16, %call20, !dbg !3626
  store i32 %or21, i32* %cast, align 4, !dbg !3627
  br label %if.end36, !dbg !3628

if.else22:                                        ; preds = %while.body
  %20 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !3629
  %base23 = bitcast %union.tree_node* %20 to %struct.tree_base*, !dbg !3629
  %21 = bitcast %struct.tree_base* %base23 to i64*, !dbg !3629
  %bf.load24 = load i64, i64* %21, align 8, !dbg !3629
  %bf.clear25 = and i64 %bf.load24, 65535, !dbg !3629
  %bf.cast26 = trunc i64 %bf.clear25 to i32, !dbg !3629
  %cmp27 = icmp eq i32 %bf.cast26, 41, !dbg !3631
  br i1 %cmp27, label %if.then29, label %if.end, !dbg !3632

if.then29:                                        ; preds = %if.else22
  %22 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !3633
  %exp30 = bitcast %union.tree_node* %22 to %struct.tree_exp*, !dbg !3633
  %operands31 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp30, i32 0, i32 3, !dbg !3633
  %arrayidx32 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands31, i64 0, i64 1, !dbg !3633
  %23 = load %union.tree_node*, %union.tree_node** %arrayidx32, align 8, !dbg !3633
  %common33 = bitcast %union.tree_node* %23 to %struct.tree_common*, !dbg !3633
  %type34 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common33, i32 0, i32 2, !dbg !3633
  %24 = load %union.tree_node*, %union.tree_node** %type34, align 8, !dbg !3633
  %call35 = call %union.tree_node* @get_canon_type(%union.tree_node* %24, i8 zeroext 0, i8 zeroext 0), !dbg !3634
  br label %if.end, !dbg !3634

if.end:                                           ; preds = %if.then29, %if.else22
  br label %if.end36

if.end36:                                         ; preds = %if.end, %if.then14
  br label %while.cond, !dbg !3608, !llvm.loop !3635

while.end:                                        ; preds = %while.cond
  br label %if.end37

if.end37:                                         ; preds = %while.end, %if.then
  %25 = load i32, i32* %cast, align 4, !dbg !3637
  %tobool38 = icmp ne i32 %25, 0, !dbg !3637
  br i1 %tobool38, label %if.end40, label %if.then39, !dbg !3639

if.then39:                                        ; preds = %if.end37
  store i32 256, i32* %cast, align 4, !dbg !3640
  br label %if.end40, !dbg !3641

if.end40:                                         ; preds = %if.then39, %if.end37
  %26 = load i32, i32* %cast, align 4, !dbg !3642
  ret i32 %26, !dbg !3643
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_op(%union.gimple_statement_d* %gs, i32 %i) #0 !dbg !3644 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %i.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !3647, metadata !DIExpression()), !dbg !3648
  store i32 %i, i32* %i.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %i.addr, metadata !3649, metadata !DIExpression()), !dbg !3650
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !3651
  %call = call zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %0), !dbg !3653
  %tobool = icmp ne i8 %call, 0, !dbg !3653
  br i1 %tobool, label %if.then, label %if.else, !dbg !3654

if.then:                                          ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !3655
  %call1 = call %union.tree_node** @gimple_ops(%union.gimple_statement_d* %1), !dbg !3657
  %2 = load i32, i32* %i.addr, align 4, !dbg !3658
  %idxprom = zext i32 %2 to i64, !dbg !3657
  %arrayidx = getelementptr inbounds %union.tree_node*, %union.tree_node** %call1, i64 %idxprom, !dbg !3657
  %3 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !3657
  store %union.tree_node* %3, %union.tree_node** %retval, align 8, !dbg !3659
  br label %return, !dbg !3659

if.else:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !3660
  br label %return, !dbg !3660

return:                                           ; preds = %if.else, %if.then
  %4 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !3661
  ret %union.tree_node* %4, !dbg !3661
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @check_cast_type(%union.tree_node* %to_type, %union.tree_node* %from_type) #0 !dbg !3662 {
entry:
  %retval = alloca i32, align 4
  %to_type.addr = alloca %union.tree_node*, align 8
  %from_type.addr = alloca %union.tree_node*, align 8
  %to_stars = alloca i32, align 4
  %from_stars = alloca i32, align 4
  store %union.tree_node* %to_type, %union.tree_node** %to_type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %to_type.addr, metadata !3663, metadata !DIExpression()), !dbg !3664
  store %union.tree_node* %from_type, %union.tree_node** %from_type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %from_type.addr, metadata !3665, metadata !DIExpression()), !dbg !3666
  call void @llvm.dbg.declare(metadata i32* %to_stars, metadata !3667, metadata !DIExpression()), !dbg !3668
  %call = call i32 @count_stars(%union.tree_node** %to_type.addr), !dbg !3669
  store i32 %call, i32* %to_stars, align 4, !dbg !3668
  call void @llvm.dbg.declare(metadata i32* %from_stars, metadata !3670, metadata !DIExpression()), !dbg !3671
  %call1 = call i32 @count_stars(%union.tree_node** %from_type.addr), !dbg !3672
  store i32 %call1, i32* %from_stars, align 4, !dbg !3671
  %0 = load i32, i32* %to_stars, align 4, !dbg !3673
  %1 = load i32, i32* %from_stars, align 4, !dbg !3675
  %cmp = icmp ne i32 %0, %1, !dbg !3676
  br i1 %cmp, label %if.then, label %if.end, !dbg !3677

if.then:                                          ; preds = %entry
  store i32 4, i32* %retval, align 4, !dbg !3678
  br label %return, !dbg !3678

if.end:                                           ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %to_type.addr, align 8, !dbg !3679
  %3 = load %union.tree_node*, %union.tree_node** %from_type.addr, align 8, !dbg !3681
  %cmp2 = icmp eq %union.tree_node* %2, %3, !dbg !3682
  br i1 %cmp2, label %if.then3, label %if.end4, !dbg !3683

if.then3:                                         ; preds = %if.end
  store i32 8, i32* %retval, align 4, !dbg !3684
  br label %return, !dbg !3684

if.end4:                                          ; preds = %if.end
  %4 = load %union.tree_node*, %union.tree_node** %to_type.addr, align 8, !dbg !3685
  %5 = load %union.tree_node*, %union.tree_node** %from_type.addr, align 8, !dbg !3687
  %call5 = call zeroext i8 @parent_type_p(%union.tree_node* %4, %union.tree_node* %5), !dbg !3688
  %tobool = icmp ne i8 %call5, 0, !dbg !3688
  br i1 %tobool, label %if.then6, label %if.end7, !dbg !3689

if.then6:                                         ; preds = %if.end4
  store i32 1, i32* %retval, align 4, !dbg !3690
  br label %return, !dbg !3690

if.end7:                                          ; preds = %if.end4
  %6 = load %union.tree_node*, %union.tree_node** %from_type.addr, align 8, !dbg !3691
  %7 = load %union.tree_node*, %union.tree_node** %to_type.addr, align 8, !dbg !3693
  %call8 = call zeroext i8 @parent_type_p(%union.tree_node* %6, %union.tree_node* %7), !dbg !3694
  %tobool9 = icmp ne i8 %call8, 0, !dbg !3694
  br i1 %tobool9, label %if.then10, label %if.end11, !dbg !3695

if.then10:                                        ; preds = %if.end7
  store i32 2, i32* %retval, align 4, !dbg !3696
  br label %return, !dbg !3696

if.end11:                                         ; preds = %if.end7
  store i32 4, i32* %retval, align 4, !dbg !3697
  br label %return, !dbg !3697

return:                                           ; preds = %if.end11, %if.then10, %if.then6, %if.then3, %if.then
  %8 = load i32, i32* %retval, align 4, !dbg !3698
  ret i32 %8, !dbg !3698
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @mark_type(%union.tree_node* %type, i32 %escape_status) #0 !dbg !3699 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %type.addr = alloca %union.tree_node*, align 8
  %escape_status.addr = alloca i32, align 4
  %map = alloca %struct.bitmap_head_def*, align 8
  %uid = alloca i32, align 4
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %type.addr, metadata !3702, metadata !DIExpression()), !dbg !3703
  store i32 %escape_status, i32* %escape_status.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %escape_status.addr, metadata !3704, metadata !DIExpression()), !dbg !3705
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %map, metadata !3706, metadata !DIExpression()), !dbg !3707
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** %map, align 8, !dbg !3707
  call void @llvm.dbg.declare(metadata i32* %uid, metadata !3708, metadata !DIExpression()), !dbg !3709
  %0 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3710
  %call = call %union.tree_node* @get_canon_type(%union.tree_node* %0, i8 zeroext 1, i8 zeroext 1), !dbg !3711
  store %union.tree_node* %call, %union.tree_node** %type.addr, align 8, !dbg !3712
  %1 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3713
  %tobool = icmp ne %union.tree_node* %1, null, !dbg !3713
  br i1 %tobool, label %if.end, label %if.then, !dbg !3715

if.then:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !3716
  br label %return, !dbg !3716

if.end:                                           ; preds = %entry
  %2 = load i32, i32* %escape_status.addr, align 4, !dbg !3717
  switch i32 %2, label %sw.epilog [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !3718

sw.bb:                                            ; preds = %if.end
  %3 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @global_types_exposed_parameter, align 8, !dbg !3719
  store %struct.bitmap_head_def* %3, %struct.bitmap_head_def** %map, align 8, !dbg !3721
  br label %sw.epilog, !dbg !3722

sw.bb1:                                           ; preds = %if.end
  %4 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @global_types_full_escape, align 8, !dbg !3723
  store %struct.bitmap_head_def* %4, %struct.bitmap_head_def** %map, align 8, !dbg !3724
  br label %sw.epilog, !dbg !3725

sw.epilog:                                        ; preds = %if.end, %sw.bb1, %sw.bb
  %5 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3726
  %type2 = bitcast %union.tree_node* %5 to %struct.tree_type*, !dbg !3726
  %uid3 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type2, i32 0, i32 5, !dbg !3726
  %6 = load i32, i32* %uid3, align 8, !dbg !3726
  store i32 %6, i32* %uid, align 4, !dbg !3727
  %7 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %map, align 8, !dbg !3728
  %8 = load i32, i32* %uid, align 4, !dbg !3730
  %call4 = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %7, i32 %8), !dbg !3731
  %tobool5 = icmp ne i32 %call4, 0, !dbg !3731
  br i1 %tobool5, label %if.then6, label %if.else, !dbg !3732

if.then6:                                         ; preds = %sw.epilog
  %9 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3733
  store %union.tree_node* %9, %union.tree_node** %retval, align 8, !dbg !3734
  br label %return, !dbg !3734

if.else:                                          ; preds = %sw.epilog
  %10 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %map, align 8, !dbg !3735
  %11 = load i32, i32* %uid, align 4, !dbg !3737
  %call7 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %10, i32 %11), !dbg !3738
  %12 = load i32, i32* %escape_status.addr, align 4, !dbg !3739
  %cmp = icmp eq i32 %12, 1, !dbg !3741
  br i1 %cmp, label %if.then8, label %if.end10, !dbg !3742

if.then8:                                         ; preds = %if.else
  %13 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @global_types_exposed_parameter, align 8, !dbg !3743
  %14 = load i32, i32* %uid, align 4, !dbg !3745
  %call9 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %13, i32 %14), !dbg !3746
  br label %if.end10, !dbg !3747

if.end10:                                         ; preds = %if.then8, %if.else
  br label %if.end11

if.end11:                                         ; preds = %if.end10
  %15 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3748
  store %union.tree_node* %15, %union.tree_node** %retval, align 8, !dbg !3749
  br label %return, !dbg !3749

return:                                           ; preds = %if.end11, %if.then6, %if.then
  %16 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !3750
  ret %union.tree_node* %16, !dbg !3750
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @is_malloc_result(%union.tree_node* %var) #0 !dbg !3751 {
entry:
  %retval = alloca i8, align 1
  %var.addr = alloca %union.tree_node*, align 8
  %def_stmt = alloca %union.gimple_statement_d*, align 8
  store %union.tree_node* %var, %union.tree_node** %var.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %var.addr, metadata !3752, metadata !DIExpression()), !dbg !3753
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %def_stmt, metadata !3754, metadata !DIExpression()), !dbg !3755
  %0 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !3756
  %tobool = icmp ne %union.tree_node* %0, null, !dbg !3756
  br i1 %tobool, label %if.end, label %if.then, !dbg !3758

if.then:                                          ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !3759
  br label %return, !dbg !3759

if.end:                                           ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !3760
  %base = bitcast %union.tree_node* %1 to %struct.tree_base*, !dbg !3760
  %2 = bitcast %struct.tree_base* %base to i64*, !dbg !3760
  %bf.load = load i64, i64* %2, align 8, !dbg !3760
  %bf.lshr = lshr i64 %bf.load, 32, !dbg !3760
  %bf.clear = and i64 %bf.lshr, 1, !dbg !3760
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !3760
  %tobool1 = icmp ne i32 %bf.cast, 0, !dbg !3760
  br i1 %tobool1, label %if.then2, label %if.end3, !dbg !3762

if.then2:                                         ; preds = %if.end
  store i8 0, i8* %retval, align 1, !dbg !3763
  br label %return, !dbg !3763

if.end3:                                          ; preds = %if.end
  %3 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !3764
  %ssa_name = bitcast %union.tree_node* %3 to %struct.tree_ssa_name*, !dbg !3764
  %def_stmt4 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 2, !dbg !3764
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt4, align 8, !dbg !3764
  store %union.gimple_statement_d* %4, %union.gimple_statement_d** %def_stmt, align 8, !dbg !3765
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !3766
  %call = call zeroext i8 @is_gimple_call(%union.gimple_statement_d* %5), !dbg !3768
  %tobool5 = icmp ne i8 %call, 0, !dbg !3768
  br i1 %tobool5, label %if.end7, label %if.then6, !dbg !3769

if.then6:                                         ; preds = %if.end3
  store i8 0, i8* %retval, align 1, !dbg !3770
  br label %return, !dbg !3770

if.end7:                                          ; preds = %if.end3
  %6 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !3771
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !3773
  %call8 = call %union.tree_node* @gimple_call_lhs(%union.gimple_statement_d* %7), !dbg !3774
  %cmp = icmp ne %union.tree_node* %6, %call8, !dbg !3775
  br i1 %cmp, label %if.then9, label %if.end10, !dbg !3776

if.then9:                                         ; preds = %if.end7
  store i8 0, i8* %retval, align 1, !dbg !3777
  br label %return, !dbg !3777

if.end10:                                         ; preds = %if.end7
  %8 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !3778
  %call11 = call i32 @gimple_call_flags(%union.gimple_statement_d* %8), !dbg !3779
  %and = and i32 %call11, 16, !dbg !3780
  %cmp12 = icmp ne i32 %and, 0, !dbg !3781
  %conv = zext i1 %cmp12 to i32, !dbg !3781
  %conv13 = trunc i32 %conv to i8, !dbg !3782
  store i8 %conv13, i8* %retval, align 1, !dbg !3783
  br label %return, !dbg !3783

return:                                           ; preds = %if.end10, %if.then9, %if.then6, %if.then2, %if.then
  %9 = load i8, i8* %retval, align 1, !dbg !3784
  ret i8 %9, !dbg !3784
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @count_stars(%union.tree_node** %type_ptr) #0 !dbg !3785 {
entry:
  %type_ptr.addr = alloca %union.tree_node**, align 8
  %type = alloca %union.tree_node*, align 8
  %i = alloca i32, align 4
  store %union.tree_node** %type_ptr, %union.tree_node*** %type_ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %type_ptr.addr, metadata !3788, metadata !DIExpression()), !dbg !3789
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !3790, metadata !DIExpression()), !dbg !3791
  %0 = load %union.tree_node**, %union.tree_node*** %type_ptr.addr, align 8, !dbg !3792
  %1 = load %union.tree_node*, %union.tree_node** %0, align 8, !dbg !3793
  store %union.tree_node* %1, %union.tree_node** %type, align 8, !dbg !3791
  call void @llvm.dbg.declare(metadata i32* %i, metadata !3794, metadata !DIExpression()), !dbg !3795
  store i32 0, i32* %i, align 4, !dbg !3795
  %2 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !3796
  %type1 = bitcast %union.tree_node* %2 to %struct.tree_type*, !dbg !3796
  %main_variant = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1, i32 0, i32 16, !dbg !3796
  %3 = load %union.tree_node*, %union.tree_node** %main_variant, align 8, !dbg !3796
  store %union.tree_node* %3, %union.tree_node** %type, align 8, !dbg !3797
  br label %while.cond, !dbg !3798

while.cond:                                       ; preds = %while.body, %entry
  %4 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !3799
  %base = bitcast %union.tree_node* %4 to %struct.tree_base*, !dbg !3799
  %5 = bitcast %struct.tree_base* %base to i64*, !dbg !3799
  %bf.load = load i64, i64* %5, align 8, !dbg !3799
  %bf.clear = and i64 %bf.load, 65535, !dbg !3799
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !3799
  %cmp = icmp eq i32 %bf.cast, 10, !dbg !3799
  br i1 %cmp, label %lor.end, label %lor.rhs, !dbg !3799

lor.rhs:                                          ; preds = %while.cond
  %6 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !3799
  %base2 = bitcast %union.tree_node* %6 to %struct.tree_base*, !dbg !3799
  %7 = bitcast %struct.tree_base* %base2 to i64*, !dbg !3799
  %bf.load3 = load i64, i64* %7, align 8, !dbg !3799
  %bf.clear4 = and i64 %bf.load3, 65535, !dbg !3799
  %bf.cast5 = trunc i64 %bf.clear4 to i32, !dbg !3799
  %cmp6 = icmp eq i32 %bf.cast5, 12, !dbg !3799
  br label %lor.end, !dbg !3799

lor.end:                                          ; preds = %lor.rhs, %while.cond
  %8 = phi i1 [ true, %while.cond ], [ %cmp6, %lor.rhs ]
  br i1 %8, label %while.body, label %while.end, !dbg !3798

while.body:                                       ; preds = %lor.end
  %9 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !3800
  %common = bitcast %union.tree_node* %9 to %struct.tree_common*, !dbg !3800
  %type7 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !3800
  %10 = load %union.tree_node*, %union.tree_node** %type7, align 8, !dbg !3800
  %type8 = bitcast %union.tree_node* %10 to %struct.tree_type*, !dbg !3800
  %main_variant9 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type8, i32 0, i32 16, !dbg !3800
  %11 = load %union.tree_node*, %union.tree_node** %main_variant9, align 8, !dbg !3800
  store %union.tree_node* %11, %union.tree_node** %type, align 8, !dbg !3802
  %12 = load i32, i32* %i, align 4, !dbg !3803
  %inc = add nsw i32 %12, 1, !dbg !3803
  store i32 %inc, i32* %i, align 4, !dbg !3803
  br label %while.cond, !dbg !3798, !llvm.loop !3804

while.end:                                        ; preds = %lor.end
  %13 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !3806
  %14 = load %union.tree_node**, %union.tree_node*** %type_ptr.addr, align 8, !dbg !3807
  store %union.tree_node* %13, %union.tree_node** %14, align 8, !dbg !3808
  %15 = load i32, i32* %i, align 4, !dbg !3809
  ret i32 %15, !dbg !3810
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @parent_type_p(%union.tree_node* %parent, %union.tree_node* %child) #0 !dbg !3811 {
entry:
  %retval = alloca i8, align 1
  %parent.addr = alloca %union.tree_node*, align 8
  %child.addr = alloca %union.tree_node*, align 8
  %i = alloca i32, align 4
  %binfo = alloca %union.tree_node*, align 8
  %base_binfo = alloca %union.tree_node*, align 8
  %binfotype = alloca %union.tree_node*, align 8
  %field = alloca %union.tree_node*, align 8
  %field_type = alloca %union.tree_node*, align 8
  %field_type48 = alloca %union.tree_node*, align 8
  %field92 = alloca %union.tree_node*, align 8
  %field_type98 = alloca %union.tree_node*, align 8
  store %union.tree_node* %parent, %union.tree_node** %parent.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %parent.addr, metadata !3812, metadata !DIExpression()), !dbg !3813
  store %union.tree_node* %child, %union.tree_node** %child.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %child.addr, metadata !3814, metadata !DIExpression()), !dbg !3815
  call void @llvm.dbg.declare(metadata i32* %i, metadata !3816, metadata !DIExpression()), !dbg !3817
  call void @llvm.dbg.declare(metadata %union.tree_node** %binfo, metadata !3818, metadata !DIExpression()), !dbg !3819
  call void @llvm.dbg.declare(metadata %union.tree_node** %base_binfo, metadata !3820, metadata !DIExpression()), !dbg !3821
  %0 = load %union.tree_node*, %union.tree_node** %parent.addr, align 8, !dbg !3822
  %type = bitcast %union.tree_node* %0 to %struct.tree_type*, !dbg !3822
  %binfo1 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type, i32 0, i32 17, !dbg !3822
  %1 = load %union.tree_node*, %union.tree_node** %binfo1, align 8, !dbg !3822
  %tobool = icmp ne %union.tree_node* %1, null, !dbg !3822
  br i1 %tobool, label %if.then, label %if.end15, !dbg !3824

if.then:                                          ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %parent.addr, align 8, !dbg !3825
  %type2 = bitcast %union.tree_node* %2 to %struct.tree_type*, !dbg !3825
  %binfo3 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type2, i32 0, i32 17, !dbg !3825
  %3 = load %union.tree_node*, %union.tree_node** %binfo3, align 8, !dbg !3825
  store %union.tree_node* %3, %union.tree_node** %binfo, align 8, !dbg !3827
  store i32 0, i32* %i, align 4, !dbg !3828
  br label %for.cond, !dbg !3829

for.cond:                                         ; preds = %for.inc, %if.then
  %4 = load %union.tree_node*, %union.tree_node** %binfo, align 8, !dbg !3830
  %binfo4 = bitcast %union.tree_node* %4 to %struct.tree_binfo*, !dbg !3830
  %base_binfos = getelementptr inbounds %struct.tree_binfo, %struct.tree_binfo* %binfo4, i32 0, i32 9, !dbg !3830
  %tobool5 = icmp ne %struct.VEC_tree_none* %base_binfos, null, !dbg !3830
  br i1 %tobool5, label %cond.true, label %cond.false, !dbg !3830

cond.true:                                        ; preds = %for.cond
  %5 = load %union.tree_node*, %union.tree_node** %binfo, align 8, !dbg !3830
  %binfo6 = bitcast %union.tree_node* %5 to %struct.tree_binfo*, !dbg !3830
  %base_binfos7 = getelementptr inbounds %struct.tree_binfo, %struct.tree_binfo* %binfo6, i32 0, i32 9, !dbg !3830
  %base = getelementptr inbounds %struct.VEC_tree_none, %struct.VEC_tree_none* %base_binfos7, i32 0, i32 0, !dbg !3830
  br label %cond.end, !dbg !3830

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !3830

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !3830
  %6 = load i32, i32* %i, align 4, !dbg !3830
  %call = call i32 @VEC_tree_base_iterate(%struct.VEC_tree_base* %cond, i32 %6, %union.tree_node** %base_binfo), !dbg !3830
  %tobool8 = icmp ne i32 %call, 0, !dbg !3832
  br i1 %tobool8, label %for.body, label %for.end, !dbg !3832

for.body:                                         ; preds = %cond.end
  call void @llvm.dbg.declare(metadata %union.tree_node** %binfotype, metadata !3833, metadata !DIExpression()), !dbg !3835
  %7 = load %union.tree_node*, %union.tree_node** %base_binfo, align 8, !dbg !3836
  %common = bitcast %union.tree_node* %7 to %struct.tree_common*, !dbg !3836
  %type9 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !3836
  %8 = load %union.tree_node*, %union.tree_node** %type9, align 8, !dbg !3836
  store %union.tree_node* %8, %union.tree_node** %binfotype, align 8, !dbg !3835
  %9 = load %union.tree_node*, %union.tree_node** %binfotype, align 8, !dbg !3837
  %10 = load %union.tree_node*, %union.tree_node** %child.addr, align 8, !dbg !3839
  %cmp = icmp eq %union.tree_node* %9, %10, !dbg !3840
  br i1 %cmp, label %if.then10, label %if.else, !dbg !3841

if.then10:                                        ; preds = %for.body
  store i8 1, i8* %retval, align 1, !dbg !3842
  br label %return, !dbg !3842

if.else:                                          ; preds = %for.body
  %11 = load %union.tree_node*, %union.tree_node** %binfotype, align 8, !dbg !3843
  %12 = load %union.tree_node*, %union.tree_node** %child.addr, align 8, !dbg !3845
  %call11 = call zeroext i8 @parent_type_p(%union.tree_node* %11, %union.tree_node* %12), !dbg !3846
  %tobool12 = icmp ne i8 %call11, 0, !dbg !3846
  br i1 %tobool12, label %if.then13, label %if.end, !dbg !3847

if.then13:                                        ; preds = %if.else
  store i8 1, i8* %retval, align 1, !dbg !3848
  br label %return, !dbg !3848

if.end:                                           ; preds = %if.else
  br label %if.end14

if.end14:                                         ; preds = %if.end
  br label %for.inc, !dbg !3849

for.inc:                                          ; preds = %if.end14
  %13 = load i32, i32* %i, align 4, !dbg !3850
  %inc = add nsw i32 %13, 1, !dbg !3850
  store i32 %inc, i32* %i, align 4, !dbg !3850
  br label %for.cond, !dbg !3851, !llvm.loop !3852

for.end:                                          ; preds = %cond.end
  br label %if.end15, !dbg !3853

if.end15:                                         ; preds = %for.end, %entry
  %14 = load %union.tree_node*, %union.tree_node** %parent.addr, align 8, !dbg !3854
  %base16 = bitcast %union.tree_node* %14 to %struct.tree_base*, !dbg !3854
  %15 = bitcast %struct.tree_base* %base16 to i64*, !dbg !3854
  %bf.load = load i64, i64* %15, align 8, !dbg !3854
  %bf.clear = and i64 %bf.load, 65535, !dbg !3854
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !3854
  %cmp17 = icmp eq i32 %bf.cast, 17, !dbg !3856
  br i1 %cmp17, label %if.then23, label %lor.lhs.false, !dbg !3857

lor.lhs.false:                                    ; preds = %if.end15
  %16 = load %union.tree_node*, %union.tree_node** %parent.addr, align 8, !dbg !3858
  %base18 = bitcast %union.tree_node* %16 to %struct.tree_base*, !dbg !3858
  %17 = bitcast %struct.tree_base* %base18 to i64*, !dbg !3858
  %bf.load19 = load i64, i64* %17, align 8, !dbg !3858
  %bf.clear20 = and i64 %bf.load19, 65535, !dbg !3858
  %bf.cast21 = trunc i64 %bf.clear20 to i32, !dbg !3858
  %cmp22 = icmp eq i32 %bf.cast21, 18, !dbg !3859
  br i1 %cmp22, label %if.then23, label %if.end85, !dbg !3860

if.then23:                                        ; preds = %lor.lhs.false, %if.end15
  call void @llvm.dbg.declare(metadata %union.tree_node** %field, metadata !3861, metadata !DIExpression()), !dbg !3863
  %18 = load %union.tree_node*, %union.tree_node** %parent.addr, align 8, !dbg !3864
  %type24 = bitcast %union.tree_node* %18 to %struct.tree_type*, !dbg !3864
  %values = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type24, i32 0, i32 1, !dbg !3864
  %19 = load %union.tree_node*, %union.tree_node** %values, align 8, !dbg !3864
  store %union.tree_node* %19, %union.tree_node** %field, align 8, !dbg !3866
  br label %for.cond25, !dbg !3867

for.cond25:                                       ; preds = %for.inc40, %if.then23
  %20 = load %union.tree_node*, %union.tree_node** %field, align 8, !dbg !3868
  %tobool26 = icmp ne %union.tree_node* %20, null, !dbg !3870
  br i1 %tobool26, label %for.body27, label %for.end42, !dbg !3870

for.body27:                                       ; preds = %for.cond25
  call void @llvm.dbg.declare(metadata %union.tree_node** %field_type, metadata !3871, metadata !DIExpression()), !dbg !3873
  %21 = load %union.tree_node*, %union.tree_node** %field, align 8, !dbg !3874
  %base28 = bitcast %union.tree_node* %21 to %struct.tree_base*, !dbg !3874
  %22 = bitcast %struct.tree_base* %base28 to i64*, !dbg !3874
  %bf.load29 = load i64, i64* %22, align 8, !dbg !3874
  %bf.clear30 = and i64 %bf.load29, 65535, !dbg !3874
  %bf.cast31 = trunc i64 %bf.clear30 to i32, !dbg !3874
  %cmp32 = icmp ne i32 %bf.cast31, 31, !dbg !3876
  br i1 %cmp32, label %if.then33, label %if.end34, !dbg !3877

if.then33:                                        ; preds = %for.body27
  br label %for.inc40, !dbg !3878

if.end34:                                         ; preds = %for.body27
  %23 = load %union.tree_node*, %union.tree_node** %field, align 8, !dbg !3879
  %common35 = bitcast %union.tree_node* %23 to %struct.tree_common*, !dbg !3879
  %type36 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common35, i32 0, i32 2, !dbg !3879
  %24 = load %union.tree_node*, %union.tree_node** %type36, align 8, !dbg !3879
  store %union.tree_node* %24, %union.tree_node** %field_type, align 8, !dbg !3880
  %25 = load %union.tree_node*, %union.tree_node** %field_type, align 8, !dbg !3881
  %26 = load %union.tree_node*, %union.tree_node** %child.addr, align 8, !dbg !3883
  %cmp37 = icmp eq %union.tree_node* %25, %26, !dbg !3884
  br i1 %cmp37, label %if.then38, label %if.end39, !dbg !3885

if.then38:                                        ; preds = %if.end34
  store i8 1, i8* %retval, align 1, !dbg !3886
  br label %return, !dbg !3886

if.end39:                                         ; preds = %if.end34
  br label %for.inc40, !dbg !3887

for.inc40:                                        ; preds = %if.end39, %if.then33
  %27 = load %union.tree_node*, %union.tree_node** %field, align 8, !dbg !3888
  %common41 = bitcast %union.tree_node* %27 to %struct.tree_common*, !dbg !3888
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common41, i32 0, i32 1, !dbg !3888
  %28 = load %union.tree_node*, %union.tree_node** %chain, align 8, !dbg !3888
  store %union.tree_node* %28, %union.tree_node** %field, align 8, !dbg !3889
  br label %for.cond25, !dbg !3890, !llvm.loop !3891

for.end42:                                        ; preds = %for.cond25
  %29 = load %union.tree_node*, %union.tree_node** %parent.addr, align 8, !dbg !3893
  %type43 = bitcast %union.tree_node* %29 to %struct.tree_type*, !dbg !3893
  %values44 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type43, i32 0, i32 1, !dbg !3893
  %30 = load %union.tree_node*, %union.tree_node** %values44, align 8, !dbg !3893
  store %union.tree_node* %30, %union.tree_node** %field, align 8, !dbg !3895
  br label %for.cond45, !dbg !3896

for.cond45:                                       ; preds = %for.inc81, %for.end42
  %31 = load %union.tree_node*, %union.tree_node** %field, align 8, !dbg !3897
  %tobool46 = icmp ne %union.tree_node* %31, null, !dbg !3899
  br i1 %tobool46, label %for.body47, label %for.end84, !dbg !3899

for.body47:                                       ; preds = %for.cond45
  call void @llvm.dbg.declare(metadata %union.tree_node** %field_type48, metadata !3900, metadata !DIExpression()), !dbg !3902
  %32 = load %union.tree_node*, %union.tree_node** %field, align 8, !dbg !3903
  %base49 = bitcast %union.tree_node* %32 to %struct.tree_base*, !dbg !3903
  %33 = bitcast %struct.tree_base* %base49 to i64*, !dbg !3903
  %bf.load50 = load i64, i64* %33, align 8, !dbg !3903
  %bf.clear51 = and i64 %bf.load50, 65535, !dbg !3903
  %bf.cast52 = trunc i64 %bf.clear51 to i32, !dbg !3903
  %cmp53 = icmp ne i32 %bf.cast52, 31, !dbg !3905
  br i1 %cmp53, label %if.then54, label %if.end55, !dbg !3906

if.then54:                                        ; preds = %for.body47
  br label %for.inc81, !dbg !3907

if.end55:                                         ; preds = %for.body47
  %34 = load %union.tree_node*, %union.tree_node** %field, align 8, !dbg !3908
  %common56 = bitcast %union.tree_node* %34 to %struct.tree_common*, !dbg !3908
  %type57 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common56, i32 0, i32 2, !dbg !3908
  %35 = load %union.tree_node*, %union.tree_node** %type57, align 8, !dbg !3908
  store %union.tree_node* %35, %union.tree_node** %field_type48, align 8, !dbg !3909
  %36 = load %union.tree_node*, %union.tree_node** %field_type48, align 8, !dbg !3910
  %base58 = bitcast %union.tree_node* %36 to %struct.tree_base*, !dbg !3910
  %37 = bitcast %struct.tree_base* %base58 to i64*, !dbg !3910
  %bf.load59 = load i64, i64* %37, align 8, !dbg !3910
  %bf.clear60 = and i64 %bf.load59, 65535, !dbg !3910
  %bf.cast61 = trunc i64 %bf.clear60 to i32, !dbg !3910
  %cmp62 = icmp eq i32 %bf.cast61, 16, !dbg !3912
  br i1 %cmp62, label %if.then75, label %lor.lhs.false63, !dbg !3913

lor.lhs.false63:                                  ; preds = %if.end55
  %38 = load %union.tree_node*, %union.tree_node** %field_type48, align 8, !dbg !3914
  %base64 = bitcast %union.tree_node* %38 to %struct.tree_base*, !dbg !3914
  %39 = bitcast %struct.tree_base* %base64 to i64*, !dbg !3914
  %bf.load65 = load i64, i64* %39, align 8, !dbg !3914
  %bf.clear66 = and i64 %bf.load65, 65535, !dbg !3914
  %bf.cast67 = trunc i64 %bf.clear66 to i32, !dbg !3914
  %cmp68 = icmp eq i32 %bf.cast67, 18, !dbg !3915
  br i1 %cmp68, label %if.then75, label %lor.lhs.false69, !dbg !3916

lor.lhs.false69:                                  ; preds = %lor.lhs.false63
  %40 = load %union.tree_node*, %union.tree_node** %field_type48, align 8, !dbg !3917
  %base70 = bitcast %union.tree_node* %40 to %struct.tree_base*, !dbg !3917
  %41 = bitcast %struct.tree_base* %base70 to i64*, !dbg !3917
  %bf.load71 = load i64, i64* %41, align 8, !dbg !3917
  %bf.clear72 = and i64 %bf.load71, 65535, !dbg !3917
  %bf.cast73 = trunc i64 %bf.clear72 to i32, !dbg !3917
  %cmp74 = icmp eq i32 %bf.cast73, 17, !dbg !3918
  br i1 %cmp74, label %if.then75, label %if.end80, !dbg !3919

if.then75:                                        ; preds = %lor.lhs.false69, %lor.lhs.false63, %if.end55
  %42 = load %union.tree_node*, %union.tree_node** %field_type48, align 8, !dbg !3920
  %43 = load %union.tree_node*, %union.tree_node** %child.addr, align 8, !dbg !3922
  %call76 = call zeroext i8 @parent_type_p(%union.tree_node* %42, %union.tree_node* %43), !dbg !3923
  %tobool77 = icmp ne i8 %call76, 0, !dbg !3923
  br i1 %tobool77, label %if.then78, label %if.end79, !dbg !3924

if.then78:                                        ; preds = %if.then75
  store i8 1, i8* %retval, align 1, !dbg !3925
  br label %return, !dbg !3925

if.end79:                                         ; preds = %if.then75
  br label %if.end80, !dbg !3926

if.end80:                                         ; preds = %if.end79, %lor.lhs.false69
  br label %for.inc81, !dbg !3927

for.inc81:                                        ; preds = %if.end80, %if.then54
  %44 = load %union.tree_node*, %union.tree_node** %field, align 8, !dbg !3928
  %common82 = bitcast %union.tree_node* %44 to %struct.tree_common*, !dbg !3928
  %chain83 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common82, i32 0, i32 1, !dbg !3928
  %45 = load %union.tree_node*, %union.tree_node** %chain83, align 8, !dbg !3928
  store %union.tree_node* %45, %union.tree_node** %field, align 8, !dbg !3929
  br label %for.cond45, !dbg !3930, !llvm.loop !3931

for.end84:                                        ; preds = %for.cond45
  br label %if.end85, !dbg !3933

if.end85:                                         ; preds = %for.end84, %lor.lhs.false
  %46 = load %union.tree_node*, %union.tree_node** %parent.addr, align 8, !dbg !3934
  %base86 = bitcast %union.tree_node* %46 to %struct.tree_base*, !dbg !3934
  %47 = bitcast %struct.tree_base* %base86 to i64*, !dbg !3934
  %bf.load87 = load i64, i64* %47, align 8, !dbg !3934
  %bf.clear88 = and i64 %bf.load87, 65535, !dbg !3934
  %bf.cast89 = trunc i64 %bf.clear88 to i32, !dbg !3934
  %cmp90 = icmp eq i32 %bf.cast89, 16, !dbg !3936
  br i1 %cmp90, label %if.then91, label %if.end138, !dbg !3937

if.then91:                                        ; preds = %if.end85
  call void @llvm.dbg.declare(metadata %union.tree_node** %field92, metadata !3938, metadata !DIExpression()), !dbg !3940
  %48 = load %union.tree_node*, %union.tree_node** %parent.addr, align 8, !dbg !3941
  %type93 = bitcast %union.tree_node* %48 to %struct.tree_type*, !dbg !3941
  %values94 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type93, i32 0, i32 1, !dbg !3941
  %49 = load %union.tree_node*, %union.tree_node** %values94, align 8, !dbg !3941
  store %union.tree_node* %49, %union.tree_node** %field92, align 8, !dbg !3943
  br label %for.cond95, !dbg !3944

for.cond95:                                       ; preds = %for.inc134, %if.then91
  %50 = load %union.tree_node*, %union.tree_node** %field92, align 8, !dbg !3945
  %tobool96 = icmp ne %union.tree_node* %50, null, !dbg !3947
  br i1 %tobool96, label %for.body97, label %for.end137, !dbg !3947

for.body97:                                       ; preds = %for.cond95
  call void @llvm.dbg.declare(metadata %union.tree_node** %field_type98, metadata !3948, metadata !DIExpression()), !dbg !3950
  %51 = load %union.tree_node*, %union.tree_node** %field92, align 8, !dbg !3951
  %base99 = bitcast %union.tree_node* %51 to %struct.tree_base*, !dbg !3951
  %52 = bitcast %struct.tree_base* %base99 to i64*, !dbg !3951
  %bf.load100 = load i64, i64* %52, align 8, !dbg !3951
  %bf.clear101 = and i64 %bf.load100, 65535, !dbg !3951
  %bf.cast102 = trunc i64 %bf.clear101 to i32, !dbg !3951
  %cmp103 = icmp ne i32 %bf.cast102, 31, !dbg !3953
  br i1 %cmp103, label %if.then104, label %if.end105, !dbg !3954

if.then104:                                       ; preds = %for.body97
  br label %for.inc134, !dbg !3955

if.end105:                                        ; preds = %for.body97
  %53 = load %union.tree_node*, %union.tree_node** %field92, align 8, !dbg !3956
  %common106 = bitcast %union.tree_node* %53 to %struct.tree_common*, !dbg !3956
  %type107 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common106, i32 0, i32 2, !dbg !3956
  %54 = load %union.tree_node*, %union.tree_node** %type107, align 8, !dbg !3956
  store %union.tree_node* %54, %union.tree_node** %field_type98, align 8, !dbg !3957
  %55 = load %union.tree_node*, %union.tree_node** %field_type98, align 8, !dbg !3958
  %56 = load %union.tree_node*, %union.tree_node** %child.addr, align 8, !dbg !3960
  %cmp108 = icmp eq %union.tree_node* %55, %56, !dbg !3961
  br i1 %cmp108, label %if.then109, label %if.end110, !dbg !3962

if.then109:                                       ; preds = %if.end105
  store i8 1, i8* %retval, align 1, !dbg !3963
  br label %return, !dbg !3963

if.end110:                                        ; preds = %if.end105
  %57 = load %union.tree_node*, %union.tree_node** %field_type98, align 8, !dbg !3964
  %base111 = bitcast %union.tree_node* %57 to %struct.tree_base*, !dbg !3964
  %58 = bitcast %struct.tree_base* %base111 to i64*, !dbg !3964
  %bf.load112 = load i64, i64* %58, align 8, !dbg !3964
  %bf.clear113 = and i64 %bf.load112, 65535, !dbg !3964
  %bf.cast114 = trunc i64 %bf.clear113 to i32, !dbg !3964
  %cmp115 = icmp eq i32 %bf.cast114, 16, !dbg !3966
  br i1 %cmp115, label %if.then128, label %lor.lhs.false116, !dbg !3967

lor.lhs.false116:                                 ; preds = %if.end110
  %59 = load %union.tree_node*, %union.tree_node** %field_type98, align 8, !dbg !3968
  %base117 = bitcast %union.tree_node* %59 to %struct.tree_base*, !dbg !3968
  %60 = bitcast %struct.tree_base* %base117 to i64*, !dbg !3968
  %bf.load118 = load i64, i64* %60, align 8, !dbg !3968
  %bf.clear119 = and i64 %bf.load118, 65535, !dbg !3968
  %bf.cast120 = trunc i64 %bf.clear119 to i32, !dbg !3968
  %cmp121 = icmp eq i32 %bf.cast120, 18, !dbg !3969
  br i1 %cmp121, label %if.then128, label %lor.lhs.false122, !dbg !3970

lor.lhs.false122:                                 ; preds = %lor.lhs.false116
  %61 = load %union.tree_node*, %union.tree_node** %field_type98, align 8, !dbg !3971
  %base123 = bitcast %union.tree_node* %61 to %struct.tree_base*, !dbg !3971
  %62 = bitcast %struct.tree_base* %base123 to i64*, !dbg !3971
  %bf.load124 = load i64, i64* %62, align 8, !dbg !3971
  %bf.clear125 = and i64 %bf.load124, 65535, !dbg !3971
  %bf.cast126 = trunc i64 %bf.clear125 to i32, !dbg !3971
  %cmp127 = icmp eq i32 %bf.cast126, 17, !dbg !3972
  br i1 %cmp127, label %if.then128, label %if.end133, !dbg !3973

if.then128:                                       ; preds = %lor.lhs.false122, %lor.lhs.false116, %if.end110
  %63 = load %union.tree_node*, %union.tree_node** %field_type98, align 8, !dbg !3974
  %64 = load %union.tree_node*, %union.tree_node** %child.addr, align 8, !dbg !3977
  %call129 = call zeroext i8 @parent_type_p(%union.tree_node* %63, %union.tree_node* %64), !dbg !3978
  %tobool130 = icmp ne i8 %call129, 0, !dbg !3978
  br i1 %tobool130, label %if.then131, label %if.else132, !dbg !3979

if.then131:                                       ; preds = %if.then128
  store i8 1, i8* %retval, align 1, !dbg !3980
  br label %return, !dbg !3980

if.else132:                                       ; preds = %if.then128
  br label %for.end137, !dbg !3981

if.end133:                                        ; preds = %lor.lhs.false122
  br label %for.inc134, !dbg !3982

for.inc134:                                       ; preds = %if.end133, %if.then104
  %65 = load %union.tree_node*, %union.tree_node** %field92, align 8, !dbg !3983
  %common135 = bitcast %union.tree_node* %65 to %struct.tree_common*, !dbg !3983
  %chain136 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common135, i32 0, i32 1, !dbg !3983
  %66 = load %union.tree_node*, %union.tree_node** %chain136, align 8, !dbg !3983
  store %union.tree_node* %66, %union.tree_node** %field92, align 8, !dbg !3984
  br label %for.cond95, !dbg !3985, !llvm.loop !3986

for.end137:                                       ; preds = %if.else132, %for.cond95
  br label %if.end138, !dbg !3988

if.end138:                                        ; preds = %for.end137, %if.end85
  store i8 0, i8* %retval, align 1, !dbg !3989
  br label %return, !dbg !3989

return:                                           ; preds = %if.end138, %if.then131, %if.then109, %if.then78, %if.then38, %if.then13, %if.then10
  %67 = load i8, i8* %retval, align 1, !dbg !3990
  ret i8 %67, !dbg !3990
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_tree_base_iterate(%struct.VEC_tree_base* %vec_, i32 %ix_, %union.tree_node** %ptr) #0 !dbg !3991 {
entry:
  %retval = alloca i32, align 4
  %vec_.addr = alloca %struct.VEC_tree_base*, align 8
  %ix_.addr = alloca i32, align 4
  %ptr.addr = alloca %union.tree_node**, align 8
  store %struct.VEC_tree_base* %vec_, %struct.VEC_tree_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_base** %vec_.addr, metadata !3996, metadata !DIExpression()), !dbg !3997
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !3998, metadata !DIExpression()), !dbg !3997
  store %union.tree_node** %ptr, %union.tree_node*** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %ptr.addr, metadata !3999, metadata !DIExpression()), !dbg !3997
  %0 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !4000
  %tobool = icmp ne %struct.VEC_tree_base* %0, null, !dbg !4000
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !4000

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !4000
  %2 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !4000
  %num = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %2, i32 0, i32 0, !dbg !4000
  %3 = load i32, i32* %num, align 8, !dbg !4000
  %cmp = icmp ult i32 %1, %3, !dbg !4000
  br i1 %cmp, label %if.then, label %if.else, !dbg !3997

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !4002
  %vec = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %4, i32 0, i32 2, !dbg !4002
  %5 = load i32, i32* %ix_.addr, align 4, !dbg !4002
  %idxprom = zext i32 %5 to i64, !dbg !4002
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %vec, i64 0, i64 %idxprom, !dbg !4002
  %6 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !4002
  %7 = load %union.tree_node**, %union.tree_node*** %ptr.addr, align 8, !dbg !4002
  store %union.tree_node* %6, %union.tree_node** %7, align 8, !dbg !4002
  store i32 1, i32* %retval, align 4, !dbg !4002
  br label %return, !dbg !4002

if.else:                                          ; preds = %land.lhs.true, %entry
  %8 = load %union.tree_node**, %union.tree_node*** %ptr.addr, align 8, !dbg !4004
  store %union.tree_node* null, %union.tree_node** %8, align 8, !dbg !4004
  store i32 0, i32* %retval, align 4, !dbg !4004
  br label %return, !dbg !4004

return:                                           ; preds = %if.else, %if.then
  %9 = load i32, i32* %retval, align 4, !dbg !3997
  ret i32 %9, !dbg !3997
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @is_gimple_call(%union.gimple_statement_d* %gs) #0 !dbg !4006 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !4007, metadata !DIExpression()), !dbg !4008
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !4009
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !4010
  %cmp = icmp eq i32 %call, 8, !dbg !4011
  %conv = zext i1 %cmp to i32, !dbg !4011
  %conv1 = trunc i32 %conv to i8, !dbg !4010
  ret i8 %conv1, !dbg !4012
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_call_lhs(%union.gimple_statement_d* %gs) #0 !dbg !4013 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !4014, metadata !DIExpression()), !dbg !4015
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !4016
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 0), !dbg !4017
  ret %union.tree_node* %call, !dbg !4018
}

declare dso_local i32 @gimple_call_flags(%union.gimple_statement_d*) #2

declare dso_local zeroext i8 @is_gimple_cast(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @handled_component_p(%union.tree_node* %t) #0 !dbg !4019 {
entry:
  %retval = alloca i8, align 1
  %t.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %t, %union.tree_node** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %t.addr, metadata !4025, metadata !DIExpression()), !dbg !4026
  %0 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !4027
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !4027
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !4027
  %bf.load = load i64, i64* %1, align 8, !dbg !4027
  %bf.clear = and i64 %bf.load, 65535, !dbg !4027
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !4027
  switch i32 %bf.cast, label %sw.default [
    i32 42, label %sw.bb
    i32 41, label %sw.bb
    i32 45, label %sw.bb
    i32 46, label %sw.bb
    i32 118, label %sw.bb
    i32 43, label %sw.bb
    i32 44, label %sw.bb
  ], !dbg !4028

sw.bb:                                            ; preds = %entry, %entry, %entry, %entry, %entry, %entry, %entry
  store i8 1, i8* %retval, align 1, !dbg !4029
  br label %return, !dbg !4029

sw.default:                                       ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !4031
  br label %return, !dbg !4031

return:                                           ; preds = %sw.default, %sw.bb
  %2 = load i8, i8* %retval, align 1, !dbg !4032
  ret i8 %2, !dbg !4032
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %g) #0 !dbg !4033 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !4034, metadata !DIExpression()), !dbg !4035
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !4036
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !4037
  %cmp = icmp uge i32 %call, 1, !dbg !4038
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !4039

land.rhs:                                         ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !4040
  %call1 = call i32 @gimple_code(%union.gimple_statement_d* %1), !dbg !4041
  %cmp2 = icmp ule i32 %call1, 9, !dbg !4042
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %2 = phi i1 [ false, %entry ], [ %cmp2, %land.rhs ], !dbg !4043
  %land.ext = zext i1 %2 to i32, !dbg !4039
  %conv = trunc i32 %land.ext to i8, !dbg !4037
  ret i8 %conv, !dbg !4044
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @gimple_ops(%union.gimple_statement_d* %gs) #0 !dbg !4045 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %off = alloca i64, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !4048, metadata !DIExpression()), !dbg !4049
  call void @llvm.dbg.declare(metadata i64* %off, metadata !4050, metadata !DIExpression()), !dbg !4051
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !4052
  %call = call i32 @gimple_statement_structure(%union.gimple_statement_d* %0), !dbg !4053
  %idxprom = zext i32 %call to i64, !dbg !4054
  %arrayidx = getelementptr inbounds [0 x i64], [0 x i64]* @gimple_ops_offset_, i64 0, i64 %idxprom, !dbg !4054
  %1 = load i64, i64* %arrayidx, align 8, !dbg !4054
  store i64 %1, i64* %off, align 8, !dbg !4055
  %2 = load i64, i64* %off, align 8, !dbg !4056
  %cmp = icmp ne i64 %2, 0, !dbg !4056
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !4056

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.4, i64 0, i64 0), i32 1622, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !4056
  br label %cond.end, !dbg !4056

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4056

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !4056
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !4057
  %4 = bitcast %union.gimple_statement_d* %3 to i8*, !dbg !4058
  %5 = load i64, i64* %off, align 8, !dbg !4059
  %add.ptr = getelementptr inbounds i8, i8* %4, i64 %5, !dbg !4060
  %6 = bitcast i8* %add.ptr to %union.tree_node**, !dbg !4061
  ret %union.tree_node** %6, !dbg !4062
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_statement_structure(%union.gimple_statement_d* %gs) #0 !dbg !4063 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !4066, metadata !DIExpression()), !dbg !4067
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !4068
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !4069
  %call1 = call i32 @gss_for_code(i32 %call), !dbg !4070
  ret i32 %call1, !dbg !4071
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gss_for_code(i32 %code) #0 !dbg !4072 {
entry:
  %code.addr = alloca i32, align 4
  store i32 %code, i32* %code.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %code.addr, metadata !4075, metadata !DIExpression()), !dbg !4076
  %0 = load i32, i32* %code.addr, align 4, !dbg !4077
  %idxprom = zext i32 %0 to i64, !dbg !4078
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @gss_for_code_, i64 0, i64 %idxprom, !dbg !4078
  %1 = load i32, i32* %arrayidx, align 4, !dbg !4078
  ret i32 %1, !dbg !4079
}

; Function Attrs: noinline nounwind uwtable
define internal void @op_iter_init(%struct.ssa_operand_iterator_d* %ptr, %union.gimple_statement_d* %stmt, i32 %flags) #0 !dbg !4080 {
entry:
  %ptr.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %flags.addr = alloca i32, align 4
  store %struct.ssa_operand_iterator_d* %ptr, %struct.ssa_operand_iterator_d** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %ptr.addr, metadata !4083, metadata !DIExpression()), !dbg !4084
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !4085, metadata !DIExpression()), !dbg !4086
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !4087, metadata !DIExpression()), !dbg !4088
  %0 = load i32, i32* %flags.addr, align 4, !dbg !4089
  %and = and i32 %0, 8, !dbg !4089
  %tobool = icmp ne i32 %and, 0, !dbg !4089
  br i1 %tobool, label %lor.lhs.false, label %land.lhs.true, !dbg !4089

lor.lhs.false:                                    ; preds = %entry
  %1 = load i32, i32* %flags.addr, align 4, !dbg !4089
  %and1 = and i32 %1, 2, !dbg !4089
  %tobool2 = icmp ne i32 %and1, 0, !dbg !4089
  br i1 %tobool2, label %land.lhs.true, label %cond.true, !dbg !4089

land.lhs.true:                                    ; preds = %lor.lhs.false, %entry
  %2 = load i32, i32* %flags.addr, align 4, !dbg !4089
  %and3 = and i32 %2, 4, !dbg !4089
  %tobool4 = icmp ne i32 %and3, 0, !dbg !4089
  br i1 %tobool4, label %lor.lhs.false5, label %cond.false, !dbg !4089

lor.lhs.false5:                                   ; preds = %land.lhs.true
  %3 = load i32, i32* %flags.addr, align 4, !dbg !4089
  %and6 = and i32 %3, 1, !dbg !4089
  %tobool7 = icmp ne i32 %and6, 0, !dbg !4089
  br i1 %tobool7, label %cond.false, label %cond.true, !dbg !4089

cond.true:                                        ; preds = %lor.lhs.false5, %lor.lhs.false
  call void @fancy_abort(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.5, i64 0, i64 0), i32 747, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !4089
  br label %cond.end, !dbg !4089

cond.false:                                       ; preds = %lor.lhs.false5, %land.lhs.true
  br label %cond.end, !dbg !4089

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !4089
  %4 = load i32, i32* %flags.addr, align 4, !dbg !4090
  %and8 = and i32 %4, 10, !dbg !4091
  %tobool9 = icmp ne i32 %and8, 0, !dbg !4091
  br i1 %tobool9, label %cond.true10, label %cond.false11, !dbg !4092

cond.true10:                                      ; preds = %cond.end
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4093
  %call = call %struct.def_optype_d* @gimple_def_ops(%union.gimple_statement_d* %5), !dbg !4094
  br label %cond.end12, !dbg !4092

cond.false11:                                     ; preds = %cond.end
  br label %cond.end12, !dbg !4092

cond.end12:                                       ; preds = %cond.false11, %cond.true10
  %cond13 = phi %struct.def_optype_d* [ %call, %cond.true10 ], [ null, %cond.false11 ], !dbg !4092
  %6 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !4095
  %defs = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %6, i32 0, i32 2, !dbg !4096
  store %struct.def_optype_d* %cond13, %struct.def_optype_d** %defs, align 8, !dbg !4097
  %7 = load i32, i32* %flags.addr, align 4, !dbg !4098
  %and14 = and i32 %7, 8, !dbg !4100
  %tobool15 = icmp ne i32 %and14, 0, !dbg !4100
  br i1 %tobool15, label %if.end, label %land.lhs.true16, !dbg !4101

land.lhs.true16:                                  ; preds = %cond.end12
  %8 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !4102
  %defs17 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %8, i32 0, i32 2, !dbg !4103
  %9 = load %struct.def_optype_d*, %struct.def_optype_d** %defs17, align 8, !dbg !4103
  %tobool18 = icmp ne %struct.def_optype_d* %9, null, !dbg !4102
  br i1 %tobool18, label %land.lhs.true19, label %if.end, !dbg !4104

land.lhs.true19:                                  ; preds = %land.lhs.true16
  %10 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4105
  %call20 = call %union.tree_node* @gimple_vdef(%union.gimple_statement_d* %10), !dbg !4106
  %cmp = icmp ne %union.tree_node* %call20, null, !dbg !4107
  br i1 %cmp, label %if.then, label %if.end, !dbg !4108

if.then:                                          ; preds = %land.lhs.true19
  %11 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !4109
  %defs21 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %11, i32 0, i32 2, !dbg !4110
  %12 = load %struct.def_optype_d*, %struct.def_optype_d** %defs21, align 8, !dbg !4110
  %next = getelementptr inbounds %struct.def_optype_d, %struct.def_optype_d* %12, i32 0, i32 0, !dbg !4111
  %13 = load %struct.def_optype_d*, %struct.def_optype_d** %next, align 8, !dbg !4111
  %14 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !4112
  %defs22 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %14, i32 0, i32 2, !dbg !4113
  store %struct.def_optype_d* %13, %struct.def_optype_d** %defs22, align 8, !dbg !4114
  br label %if.end, !dbg !4112

if.end:                                           ; preds = %if.then, %land.lhs.true19, %land.lhs.true16, %cond.end12
  %15 = load i32, i32* %flags.addr, align 4, !dbg !4115
  %and23 = and i32 %15, 5, !dbg !4116
  %tobool24 = icmp ne i32 %and23, 0, !dbg !4116
  br i1 %tobool24, label %cond.true25, label %cond.false27, !dbg !4117

cond.true25:                                      ; preds = %if.end
  %16 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4118
  %call26 = call %struct.use_optype_d* @gimple_use_ops(%union.gimple_statement_d* %16), !dbg !4119
  br label %cond.end28, !dbg !4117

cond.false27:                                     ; preds = %if.end
  br label %cond.end28, !dbg !4117

cond.end28:                                       ; preds = %cond.false27, %cond.true25
  %cond29 = phi %struct.use_optype_d* [ %call26, %cond.true25 ], [ null, %cond.false27 ], !dbg !4117
  %17 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !4120
  %uses = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %17, i32 0, i32 3, !dbg !4121
  store %struct.use_optype_d* %cond29, %struct.use_optype_d** %uses, align 8, !dbg !4122
  %18 = load i32, i32* %flags.addr, align 4, !dbg !4123
  %and30 = and i32 %18, 4, !dbg !4125
  %tobool31 = icmp ne i32 %and30, 0, !dbg !4125
  br i1 %tobool31, label %if.end42, label %land.lhs.true32, !dbg !4126

land.lhs.true32:                                  ; preds = %cond.end28
  %19 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !4127
  %uses33 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %19, i32 0, i32 3, !dbg !4128
  %20 = load %struct.use_optype_d*, %struct.use_optype_d** %uses33, align 8, !dbg !4128
  %tobool34 = icmp ne %struct.use_optype_d* %20, null, !dbg !4127
  br i1 %tobool34, label %land.lhs.true35, label %if.end42, !dbg !4129

land.lhs.true35:                                  ; preds = %land.lhs.true32
  %21 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4130
  %call36 = call %union.tree_node* @gimple_vuse(%union.gimple_statement_d* %21), !dbg !4131
  %cmp37 = icmp ne %union.tree_node* %call36, null, !dbg !4132
  br i1 %cmp37, label %if.then38, label %if.end42, !dbg !4133

if.then38:                                        ; preds = %land.lhs.true35
  %22 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !4134
  %uses39 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %22, i32 0, i32 3, !dbg !4135
  %23 = load %struct.use_optype_d*, %struct.use_optype_d** %uses39, align 8, !dbg !4135
  %next40 = getelementptr inbounds %struct.use_optype_d, %struct.use_optype_d* %23, i32 0, i32 0, !dbg !4136
  %24 = load %struct.use_optype_d*, %struct.use_optype_d** %next40, align 8, !dbg !4136
  %25 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !4137
  %uses41 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %25, i32 0, i32 3, !dbg !4138
  store %struct.use_optype_d* %24, %struct.use_optype_d** %uses41, align 8, !dbg !4139
  br label %if.end42, !dbg !4137

if.end42:                                         ; preds = %if.then38, %land.lhs.true35, %land.lhs.true32, %cond.end28
  %26 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !4140
  %done = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %26, i32 0, i32 0, !dbg !4141
  store i8 0, i8* %done, align 8, !dbg !4142
  %27 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !4143
  %phi_i = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %27, i32 0, i32 4, !dbg !4144
  store i32 0, i32* %phi_i, align 8, !dbg !4145
  %28 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !4146
  %num_phi = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %28, i32 0, i32 5, !dbg !4147
  store i32 0, i32* %num_phi, align 4, !dbg !4148
  %29 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !4149
  %phi_stmt = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %29, i32 0, i32 6, !dbg !4150
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %phi_stmt, align 8, !dbg !4151
  ret void, !dbg !4152
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.def_optype_d* @gimple_def_ops(%union.gimple_statement_d* %g) #0 !dbg !4153 {
entry:
  %retval = alloca %struct.def_optype_d*, align 8
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !4156, metadata !DIExpression()), !dbg !4157
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !4158
  %call = call zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %0), !dbg !4160
  %tobool = icmp ne i8 %call, 0, !dbg !4160
  br i1 %tobool, label %if.end, label %if.then, !dbg !4161

if.then:                                          ; preds = %entry
  store %struct.def_optype_d* null, %struct.def_optype_d** %retval, align 8, !dbg !4162
  br label %return, !dbg !4162

if.end:                                           ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !4163
  %gsops = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_with_ops*, !dbg !4164
  %opbase = getelementptr inbounds %struct.gimple_statement_with_ops, %struct.gimple_statement_with_ops* %gsops, i32 0, i32 0, !dbg !4165
  %def_ops = getelementptr inbounds %struct.gimple_statement_with_ops_base, %struct.gimple_statement_with_ops_base* %opbase, i32 0, i32 1, !dbg !4166
  %2 = load %struct.def_optype_d*, %struct.def_optype_d** %def_ops, align 8, !dbg !4166
  store %struct.def_optype_d* %2, %struct.def_optype_d** %retval, align 8, !dbg !4167
  br label %return, !dbg !4167

return:                                           ; preds = %if.end, %if.then
  %3 = load %struct.def_optype_d*, %struct.def_optype_d** %retval, align 8, !dbg !4168
  ret %struct.def_optype_d* %3, !dbg !4168
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_vdef(%union.gimple_statement_d* %g) #0 !dbg !4169 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !4170, metadata !DIExpression()), !dbg !4171
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !4172
  %call = call zeroext i8 @gimple_has_mem_ops(%union.gimple_statement_d* %0), !dbg !4174
  %tobool = icmp ne i8 %call, 0, !dbg !4174
  br i1 %tobool, label %if.end, label %if.then, !dbg !4175

if.then:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !4176
  br label %return, !dbg !4176

if.end:                                           ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !4177
  %gsmembase = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_with_memory_ops_base*, !dbg !4178
  %vdef = getelementptr inbounds %struct.gimple_statement_with_memory_ops_base, %struct.gimple_statement_with_memory_ops_base* %gsmembase, i32 0, i32 1, !dbg !4179
  %2 = load %union.tree_node*, %union.tree_node** %vdef, align 8, !dbg !4179
  store %union.tree_node* %2, %union.tree_node** %retval, align 8, !dbg !4180
  br label %return, !dbg !4180

return:                                           ; preds = %if.end, %if.then
  %3 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !4181
  ret %union.tree_node* %3, !dbg !4181
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.use_optype_d* @gimple_use_ops(%union.gimple_statement_d* %g) #0 !dbg !4182 {
entry:
  %retval = alloca %struct.use_optype_d*, align 8
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !4185, metadata !DIExpression()), !dbg !4186
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !4187
  %call = call zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %0), !dbg !4189
  %tobool = icmp ne i8 %call, 0, !dbg !4189
  br i1 %tobool, label %if.end, label %if.then, !dbg !4190

if.then:                                          ; preds = %entry
  store %struct.use_optype_d* null, %struct.use_optype_d** %retval, align 8, !dbg !4191
  br label %return, !dbg !4191

if.end:                                           ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !4192
  %gsops = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_with_ops*, !dbg !4193
  %opbase = getelementptr inbounds %struct.gimple_statement_with_ops, %struct.gimple_statement_with_ops* %gsops, i32 0, i32 0, !dbg !4194
  %use_ops = getelementptr inbounds %struct.gimple_statement_with_ops_base, %struct.gimple_statement_with_ops_base* %opbase, i32 0, i32 2, !dbg !4195
  %2 = load %struct.use_optype_d*, %struct.use_optype_d** %use_ops, align 8, !dbg !4195
  store %struct.use_optype_d* %2, %struct.use_optype_d** %retval, align 8, !dbg !4196
  br label %return, !dbg !4196

return:                                           ; preds = %if.end, %if.then
  %3 = load %struct.use_optype_d*, %struct.use_optype_d** %retval, align 8, !dbg !4197
  ret %struct.use_optype_d* %3, !dbg !4197
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_vuse(%union.gimple_statement_d* %g) #0 !dbg !4198 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !4199, metadata !DIExpression()), !dbg !4200
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !4201
  %call = call zeroext i8 @gimple_has_mem_ops(%union.gimple_statement_d* %0), !dbg !4203
  %tobool = icmp ne i8 %call, 0, !dbg !4203
  br i1 %tobool, label %if.end, label %if.then, !dbg !4204

if.then:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !4205
  br label %return, !dbg !4205

if.end:                                           ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !4206
  %gsmembase = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_with_memory_ops_base*, !dbg !4207
  %vuse = getelementptr inbounds %struct.gimple_statement_with_memory_ops_base, %struct.gimple_statement_with_memory_ops_base* %gsmembase, i32 0, i32 2, !dbg !4208
  %2 = load %union.tree_node*, %union.tree_node** %vuse, align 8, !dbg !4208
  store %union.tree_node* %2, %union.tree_node** %retval, align 8, !dbg !4209
  br label %return, !dbg !4209

return:                                           ; preds = %if.end, %if.then
  %3 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !4210
  ret %union.tree_node* %3, !dbg !4210
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_has_mem_ops(%union.gimple_statement_d* %g) #0 !dbg !4211 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !4212, metadata !DIExpression()), !dbg !4213
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !4214
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !4215
  %cmp = icmp uge i32 %call, 6, !dbg !4216
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !4217

land.rhs:                                         ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !4218
  %call1 = call i32 @gimple_code(%union.gimple_statement_d* %1), !dbg !4219
  %cmp2 = icmp ule i32 %call1, 9, !dbg !4220
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %2 = phi i1 [ false, %entry ], [ %cmp2, %land.rhs ], !dbg !4221
  %land.ext = zext i1 %2 to i32, !dbg !4217
  %conv = trunc i32 %land.ext to i8, !dbg !4215
  ret i8 %conv, !dbg !4222
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ssa_use_operand_d* @gimple_phi_arg_imm_use_ptr(%union.gimple_statement_d* %gs, i32 %i) #0 !dbg !4223 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %i.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !4226, metadata !DIExpression()), !dbg !4227
  store i32 %i, i32* %i.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %i.addr, metadata !4228, metadata !DIExpression()), !dbg !4229
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !4230
  %1 = load i32, i32* %i.addr, align 4, !dbg !4231
  %call = call %struct.phi_arg_d* @gimple_phi_arg(%union.gimple_statement_d* %0, i32 %1), !dbg !4232
  %imm_use = getelementptr inbounds %struct.phi_arg_d, %struct.phi_arg_d* %call, i32 0, i32 0, !dbg !4233
  ret %struct.ssa_use_operand_d* %imm_use, !dbg !4234
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.phi_arg_d* @gimple_phi_arg(%union.gimple_statement_d* %gs, i32 %index) #0 !dbg !4235 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %index.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !4239, metadata !DIExpression()), !dbg !4240
  store i32 %index, i32* %index.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %index.addr, metadata !4241, metadata !DIExpression()), !dbg !4242
  %0 = load i32, i32* %index.addr, align 4, !dbg !4243
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !4243
  %gimple_phi = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_phi*, !dbg !4243
  %capacity = getelementptr inbounds %struct.gimple_statement_phi, %struct.gimple_statement_phi* %gimple_phi, i32 0, i32 1, !dbg !4243
  %2 = load i32, i32* %capacity, align 8, !dbg !4243
  %cmp = icmp ule i32 %0, %2, !dbg !4243
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !4243

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.4, i64 0, i64 0), i32 3103, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !4243
  br label %cond.end, !dbg !4243

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4243

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !4243
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !4244
  %gimple_phi1 = bitcast %union.gimple_statement_d* %3 to %struct.gimple_statement_phi*, !dbg !4245
  %args = getelementptr inbounds %struct.gimple_statement_phi, %struct.gimple_statement_phi* %gimple_phi1, i32 0, i32 4, !dbg !4246
  %4 = load i32, i32* %index.addr, align 4, !dbg !4247
  %idxprom = zext i32 %4 to i64, !dbg !4244
  %arrayidx = getelementptr inbounds [1 x %struct.phi_arg_d], [1 x %struct.phi_arg_d]* %args, i64 0, i64 %idxprom, !dbg !4244
  ret %struct.phi_arg_d* %arrayidx, !dbg !4248
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @op_iter_init_tree(%struct.ssa_operand_iterator_d* %ptr, %union.gimple_statement_d* %stmt, i32 %flags) #0 !dbg !4249 {
entry:
  %ptr.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %flags.addr = alloca i32, align 4
  store %struct.ssa_operand_iterator_d* %ptr, %struct.ssa_operand_iterator_d** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %ptr.addr, metadata !4252, metadata !DIExpression()), !dbg !4253
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !4254, metadata !DIExpression()), !dbg !4255
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !4256, metadata !DIExpression()), !dbg !4257
  %0 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !4258
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4259
  %2 = load i32, i32* %flags.addr, align 4, !dbg !4260
  call void @op_iter_init(%struct.ssa_operand_iterator_d* %0, %union.gimple_statement_d* %1, i32 %2), !dbg !4261
  %3 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !4262
  %iter_type = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %3, i32 0, i32 1, !dbg !4263
  store i32 1, i32* %iter_type, align 4, !dbg !4264
  %4 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !4265
  %call = call %union.tree_node* @op_iter_next_tree(%struct.ssa_operand_iterator_d* %4), !dbg !4266
  ret %union.tree_node* %call, !dbg !4267
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @op_iter_next_tree(%struct.ssa_operand_iterator_d* %ptr) #0 !dbg !4268 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %ptr.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  %val = alloca %union.tree_node*, align 8
  store %struct.ssa_operand_iterator_d* %ptr, %struct.ssa_operand_iterator_d** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %ptr.addr, metadata !4271, metadata !DIExpression()), !dbg !4272
  call void @llvm.dbg.declare(metadata %union.tree_node** %val, metadata !4273, metadata !DIExpression()), !dbg !4274
  %0 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !4275
  %uses = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %0, i32 0, i32 3, !dbg !4277
  %1 = load %struct.use_optype_d*, %struct.use_optype_d** %uses, align 8, !dbg !4277
  %tobool = icmp ne %struct.use_optype_d* %1, null, !dbg !4275
  br i1 %tobool, label %if.then, label %if.end, !dbg !4278

if.then:                                          ; preds = %entry
  %2 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !4279
  %uses1 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %2, i32 0, i32 3, !dbg !4279
  %3 = load %struct.use_optype_d*, %struct.use_optype_d** %uses1, align 8, !dbg !4279
  %use_ptr = getelementptr inbounds %struct.use_optype_d, %struct.use_optype_d* %3, i32 0, i32 1, !dbg !4279
  %call = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %use_ptr), !dbg !4279
  store %union.tree_node* %call, %union.tree_node** %val, align 8, !dbg !4281
  %4 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !4282
  %uses2 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %4, i32 0, i32 3, !dbg !4283
  %5 = load %struct.use_optype_d*, %struct.use_optype_d** %uses2, align 8, !dbg !4283
  %next = getelementptr inbounds %struct.use_optype_d, %struct.use_optype_d* %5, i32 0, i32 0, !dbg !4284
  %6 = load %struct.use_optype_d*, %struct.use_optype_d** %next, align 8, !dbg !4284
  %7 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !4285
  %uses3 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %7, i32 0, i32 3, !dbg !4286
  store %struct.use_optype_d* %6, %struct.use_optype_d** %uses3, align 8, !dbg !4287
  %8 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !4288
  store %union.tree_node* %8, %union.tree_node** %retval, align 8, !dbg !4289
  br label %return, !dbg !4289

if.end:                                           ; preds = %entry
  %9 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !4290
  %defs = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %9, i32 0, i32 2, !dbg !4292
  %10 = load %struct.def_optype_d*, %struct.def_optype_d** %defs, align 8, !dbg !4292
  %tobool4 = icmp ne %struct.def_optype_d* %10, null, !dbg !4290
  br i1 %tobool4, label %if.then5, label %if.end11, !dbg !4293

if.then5:                                         ; preds = %if.end
  %11 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !4294
  %defs6 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %11, i32 0, i32 2, !dbg !4294
  %12 = load %struct.def_optype_d*, %struct.def_optype_d** %defs6, align 8, !dbg !4294
  %def_ptr = getelementptr inbounds %struct.def_optype_d, %struct.def_optype_d* %12, i32 0, i32 1, !dbg !4294
  %13 = load %union.tree_node**, %union.tree_node*** %def_ptr, align 8, !dbg !4294
  %call7 = call %union.tree_node* @get_def_from_ptr(%union.tree_node** %13), !dbg !4294
  store %union.tree_node* %call7, %union.tree_node** %val, align 8, !dbg !4296
  %14 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !4297
  %defs8 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %14, i32 0, i32 2, !dbg !4298
  %15 = load %struct.def_optype_d*, %struct.def_optype_d** %defs8, align 8, !dbg !4298
  %next9 = getelementptr inbounds %struct.def_optype_d, %struct.def_optype_d* %15, i32 0, i32 0, !dbg !4299
  %16 = load %struct.def_optype_d*, %struct.def_optype_d** %next9, align 8, !dbg !4299
  %17 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !4300
  %defs10 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %17, i32 0, i32 2, !dbg !4301
  store %struct.def_optype_d* %16, %struct.def_optype_d** %defs10, align 8, !dbg !4302
  %18 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !4303
  store %union.tree_node* %18, %union.tree_node** %retval, align 8, !dbg !4304
  br label %return, !dbg !4304

if.end11:                                         ; preds = %if.end
  %19 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !4305
  %done = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %19, i32 0, i32 0, !dbg !4306
  store i8 1, i8* %done, align 8, !dbg !4307
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !4308
  br label %return, !dbg !4308

return:                                           ; preds = %if.end11, %if.then5, %if.then
  %20 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !4309
  ret %union.tree_node* %20, !dbg !4309
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @get_def_from_ptr(%union.tree_node** %def) #0 !dbg !4310 {
entry:
  %def.addr = alloca %union.tree_node**, align 8
  store %union.tree_node** %def, %union.tree_node*** %def.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %def.addr, metadata !4314, metadata !DIExpression()), !dbg !4315
  %0 = load %union.tree_node**, %union.tree_node*** %def.addr, align 8, !dbg !4316
  %1 = load %union.tree_node*, %union.tree_node** %0, align 8, !dbg !4317
  ret %union.tree_node* %1, !dbg !4318
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_expr_code(%union.gimple_statement_d* %stmt) #0 !dbg !4319 {
entry:
  %retval = alloca i32, align 4
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %code = alloca i32, align 4
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !4320, metadata !DIExpression()), !dbg !4321
  call void @llvm.dbg.declare(metadata i32* %code, metadata !4322, metadata !DIExpression()), !dbg !4323
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4324
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !4325
  store i32 %call, i32* %code, align 4, !dbg !4323
  %1 = load i32, i32* %code, align 4, !dbg !4326
  %cmp = icmp eq i32 %1, 6, !dbg !4328
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !4329

lor.lhs.false:                                    ; preds = %entry
  %2 = load i32, i32* %code, align 4, !dbg !4330
  %cmp1 = icmp eq i32 %2, 1, !dbg !4331
  br i1 %cmp1, label %if.then, label %if.else, !dbg !4332

if.then:                                          ; preds = %lor.lhs.false, %entry
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4333
  %gsbase = bitcast %union.gimple_statement_d* %3 to %struct.gimple_statement_base*, !dbg !4334
  %4 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !4335
  %bf.load = load i32, i32* %4, align 8, !dbg !4335
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !4335
  store i32 %bf.lshr, i32* %retval, align 4, !dbg !4336
  br label %return, !dbg !4336

if.else:                                          ; preds = %lor.lhs.false
  %5 = load i32, i32* %code, align 4, !dbg !4337
  %cmp2 = icmp eq i32 %5, 8, !dbg !4339
  br i1 %cmp2, label %if.then3, label %if.else4, !dbg !4340

if.then3:                                         ; preds = %if.else
  store i32 59, i32* %retval, align 4, !dbg !4341
  br label %return, !dbg !4341

if.else4:                                         ; preds = %if.else
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.4, i64 0, i64 0), i32 1446, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !4342
  br label %if.end

if.end:                                           ; preds = %if.else4
  br label %if.end5

if.end5:                                          ; preds = %if.end
  store i32 0, i32* %retval, align 4, !dbg !4343
  br label %return, !dbg !4343

return:                                           ; preds = %if.end5, %if.then3, %if.then
  %6 = load i32, i32* %retval, align 4, !dbg !4344
  ret i32 %6, !dbg !4344
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @get_gimple_rhs_class(i32 %code) #0 !dbg !4345 {
entry:
  %code.addr = alloca i32, align 4
  store i32 %code, i32* %code.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %code.addr, metadata !4348, metadata !DIExpression()), !dbg !4349
  %0 = load i32, i32* %code.addr, align 4, !dbg !4350
  %idxprom = sext i32 %0 to i64, !dbg !4351
  %arrayidx = getelementptr inbounds [0 x i8], [0 x i8]* @gimple_rhs_class_table, i64 0, i64 %idxprom, !dbg !4351
  %1 = load i8, i8* %arrayidx, align 1, !dbg !4351
  %conv = zext i8 %1 to i32, !dbg !4352
  ret i32 %conv, !dbg !4353
}

; Function Attrs: noinline nounwind uwtable
define internal void @ipa_init() #0 !dbg !4354 {
entry:
  call void @bitmap_obstack_initialize(%struct.bitmap_obstack* @ipa_obstack), !dbg !4355
  %call = call %struct.bitmap_head_def* @bitmap_obstack_alloc_stat(%struct.bitmap_obstack* @ipa_obstack), !dbg !4356
  store %struct.bitmap_head_def* %call, %struct.bitmap_head_def** @global_types_exposed_parameter, align 8, !dbg !4357
  %call1 = call %struct.bitmap_head_def* @bitmap_obstack_alloc_stat(%struct.bitmap_obstack* @ipa_obstack), !dbg !4358
  store %struct.bitmap_head_def* %call1, %struct.bitmap_head_def** @global_types_full_escape, align 8, !dbg !4359
  %call2 = call %struct.bitmap_head_def* @bitmap_obstack_alloc_stat(%struct.bitmap_obstack* @ipa_obstack), !dbg !4360
  store %struct.bitmap_head_def* %call2, %struct.bitmap_head_def** @global_types_seen, align 8, !dbg !4361
  %call3 = call %struct.splay_tree_s* @splay_tree_new(i32 (i64, i64)* @splay_tree_compare_ints, void (i64)* null, void (i64)* null), !dbg !4362
  store %struct.splay_tree_s* %call3, %struct.splay_tree_s** @uid_to_canon_type, align 8, !dbg !4363
  %call4 = call %struct.splay_tree_s* @splay_tree_new(i32 (i64, i64)* @compare_type_brand, void (i64)* null, void (i64)* null), !dbg !4364
  store %struct.splay_tree_s* %call4, %struct.splay_tree_s** @all_canon_types, align 8, !dbg !4365
  %call5 = call %struct.splay_tree_s* @splay_tree_new(i32 (i64, i64)* @splay_tree_compare_pointers, void (i64)* null, void (i64)* null), !dbg !4366
  store %struct.splay_tree_s* %call5, %struct.splay_tree_s** @type_to_canon_type, align 8, !dbg !4367
  %call6 = call %struct.splay_tree_s* @splay_tree_new(i32 (i64, i64)* @splay_tree_compare_ints, void (i64)* null, void (i64)* null), !dbg !4368
  store %struct.splay_tree_s* %call6, %struct.splay_tree_s** @uid_to_subtype_map, align 8, !dbg !4369
  %call7 = call %struct.splay_tree_s* @splay_tree_new(i32 (i64, i64)* @splay_tree_compare_ints, void (i64)* null, void (i64)* null), !dbg !4370
  store %struct.splay_tree_s* %call7, %struct.splay_tree_s** @uid_to_addressof_down_map, align 8, !dbg !4371
  %call8 = call %struct.splay_tree_s* @splay_tree_new(i32 (i64, i64)* @splay_tree_compare_ints, void (i64)* null, void (i64)* null), !dbg !4372
  store %struct.splay_tree_s* %call8, %struct.splay_tree_s** @uid_to_addressof_up_map, align 8, !dbg !4373
  %call9 = call %struct.pointer_set_t* @pointer_set_create(), !dbg !4374
  store %struct.pointer_set_t* %call9, %struct.pointer_set_t** @visited_nodes, align 8, !dbg !4375
  store i8 1, i8* @initialized, align 1, !dbg !4376
  ret void, !dbg !4377
}

; Function Attrs: noinline nounwind uwtable
define internal void @analyze_variable(%struct.varpool_node* %vnode) #0 !dbg !4378 {
entry:
  %vnode.addr = alloca %struct.varpool_node*, align 8
  %global = alloca %union.tree_node*, align 8
  %type = alloca %union.tree_node*, align 8
  store %struct.varpool_node* %vnode, %struct.varpool_node** %vnode.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.varpool_node** %vnode.addr, metadata !4379, metadata !DIExpression()), !dbg !4380
  call void @llvm.dbg.declare(metadata %union.tree_node** %global, metadata !4381, metadata !DIExpression()), !dbg !4382
  %0 = load %struct.varpool_node*, %struct.varpool_node** %vnode.addr, align 8, !dbg !4383
  %decl = getelementptr inbounds %struct.varpool_node, %struct.varpool_node* %0, i32 0, i32 0, !dbg !4384
  %1 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !4384
  store %union.tree_node* %1, %union.tree_node** %global, align 8, !dbg !4382
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !4385, metadata !DIExpression()), !dbg !4386
  %2 = load %union.tree_node*, %union.tree_node** %global, align 8, !dbg !4387
  %common = bitcast %union.tree_node* %2 to %struct.tree_common*, !dbg !4387
  %type1 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !4387
  %3 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !4387
  %call = call %union.tree_node* @get_canon_type(%union.tree_node* %3, i8 zeroext 0, i8 zeroext 0), !dbg !4388
  store %union.tree_node* %call, %union.tree_node** %type, align 8, !dbg !4386
  %4 = load %struct.varpool_node*, %struct.varpool_node** %vnode.addr, align 8, !dbg !4389
  %externally_visible = getelementptr inbounds %struct.varpool_node, %struct.varpool_node* %4, i32 0, i32 5, !dbg !4391
  %bf.load = load i8, i8* %externally_visible, align 4, !dbg !4391
  %bf.lshr = lshr i8 %bf.load, 5, !dbg !4391
  %bf.clear = and i8 %bf.lshr, 1, !dbg !4391
  %bf.cast = zext i8 %bf.clear to i32, !dbg !4391
  %tobool = icmp ne i32 %bf.cast, 0, !dbg !4389
  br i1 %tobool, label %if.then, label %if.end, !dbg !4392

if.then:                                          ; preds = %entry
  %5 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !4393
  call void @mark_interesting_type(%union.tree_node* %5, i32 1), !dbg !4394
  br label %if.end, !dbg !4394

if.end:                                           ; preds = %if.then, %entry
  %6 = load %union.tree_node*, %union.tree_node** %global, align 8, !dbg !4395
  %base = bitcast %union.tree_node* %6 to %struct.tree_base*, !dbg !4395
  %7 = bitcast %struct.tree_base* %base to i64*, !dbg !4395
  %bf.load2 = load i64, i64* %7, align 8, !dbg !4395
  %bf.clear3 = and i64 %bf.load2, 65535, !dbg !4395
  %bf.cast4 = trunc i64 %bf.clear3 to i32, !dbg !4395
  %cmp = icmp eq i32 %bf.cast4, 32, !dbg !4395
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !4395

cond.true:                                        ; preds = %if.end
  call void @fancy_abort(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.2, i64 0, i64 0), i32 1645, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !4395
  br label %cond.end, !dbg !4395

cond.false:                                       ; preds = %if.end
  br label %cond.end, !dbg !4395

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !4395
  %8 = load %union.tree_node*, %union.tree_node** %global, align 8, !dbg !4396
  %decl_common = bitcast %union.tree_node* %8 to %struct.tree_decl_common*, !dbg !4396
  %initial = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 5, !dbg !4396
  %9 = load %union.tree_node*, %union.tree_node** %initial, align 8, !dbg !4396
  %tobool5 = icmp ne %union.tree_node* %9, null, !dbg !4396
  br i1 %tobool5, label %if.then6, label %if.end9, !dbg !4398

if.then6:                                         ; preds = %cond.end
  %10 = load %union.tree_node*, %union.tree_node** %global, align 8, !dbg !4399
  %decl_common7 = bitcast %union.tree_node* %10 to %struct.tree_decl_common*, !dbg !4399
  %initial8 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common7, i32 0, i32 5, !dbg !4399
  %11 = load %union.tree_node*, %union.tree_node** %initial8, align 8, !dbg !4399
  call void @check_tree(%union.tree_node* %11), !dbg !4400
  br label %if.end9, !dbg !4400

if.end9:                                          ; preds = %if.then6, %cond.end
  ret void, !dbg !4401
}

; Function Attrs: noinline nounwind uwtable
define internal void @analyze_function(%struct.cgraph_node* %fn) #0 !dbg !4402 {
entry:
  %fn.addr = alloca %struct.cgraph_node*, align 8
  %decl = alloca %union.tree_node*, align 8
  %this_cfun = alloca %struct.function*, align 8
  %this_block = alloca %struct.basic_block_def*, align 8
  %gsi = alloca %struct.gimple_stmt_iterator, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  %step = alloca %union.tree_node*, align 8
  %var = alloca %union.tree_node*, align 8
  store %struct.cgraph_node* %fn, %struct.cgraph_node** %fn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %fn.addr, metadata !4403, metadata !DIExpression()), !dbg !4404
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl, metadata !4405, metadata !DIExpression()), !dbg !4406
  %0 = load %struct.cgraph_node*, %struct.cgraph_node** %fn.addr, align 8, !dbg !4407
  %decl1 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %0, i32 0, i32 0, !dbg !4408
  %1 = load %union.tree_node*, %union.tree_node** %decl1, align 8, !dbg !4408
  store %union.tree_node* %1, %union.tree_node** %decl, align 8, !dbg !4406
  %2 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !4409
  %3 = load %struct.cgraph_node*, %struct.cgraph_node** %fn.addr, align 8, !dbg !4410
  %local = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %3, i32 0, i32 18, !dbg !4411
  %externally_visible = getelementptr inbounds %struct.cgraph_local_info, %struct.cgraph_local_info* %local, i32 0, i32 2, !dbg !4412
  %bf.load = load i8, i8* %externally_visible, align 8, !dbg !4412
  %bf.lshr = lshr i8 %bf.load, 1, !dbg !4412
  %bf.clear = and i8 %bf.lshr, 1, !dbg !4412
  %bf.cast = zext i8 %bf.clear to i32, !dbg !4412
  %conv = trunc i32 %bf.cast to i8, !dbg !4410
  call void @check_function_parameter_and_return_types(%union.tree_node* %2, i8 zeroext %conv), !dbg !4413
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4414
  %tobool = icmp ne %struct._IO_FILE* %4, null, !dbg !4414
  br i1 %tobool, label %if.then, label %if.end, !dbg !4416

if.then:                                          ; preds = %entry
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4417
  %6 = load %struct.cgraph_node*, %struct.cgraph_node** %fn.addr, align 8, !dbg !4418
  %call = call i8* @cgraph_node_name(%struct.cgraph_node* %6), !dbg !4419
  %call2 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %5, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.9, i64 0, i64 0), i8* %call), !dbg !4420
  br label %if.end, !dbg !4420

if.end:                                           ; preds = %if.then, %entry
  call void @llvm.dbg.declare(metadata %struct.function** %this_cfun, metadata !4421, metadata !DIExpression()), !dbg !4423
  %7 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !4424
  %function_decl = bitcast %union.tree_node* %7 to %struct.tree_function_decl*, !dbg !4424
  %f = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl, i32 0, i32 1, !dbg !4424
  %8 = load %struct.function*, %struct.function** %f, align 8, !dbg !4424
  store %struct.function* %8, %struct.function** %this_cfun, align 8, !dbg !4423
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %this_block, metadata !4425, metadata !DIExpression()), !dbg !4426
  %9 = load %struct.function*, %struct.function** %this_cfun, align 8, !dbg !4427
  %cfg = getelementptr inbounds %struct.function, %struct.function* %9, i32 0, i32 1, !dbg !4427
  %10 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !4427
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %10, i32 0, i32 0, !dbg !4427
  %11 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !4427
  %next_bb = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %11, i32 0, i32 6, !dbg !4427
  %12 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb, align 8, !dbg !4427
  store %struct.basic_block_def* %12, %struct.basic_block_def** %this_block, align 8, !dbg !4427
  br label %for.cond, !dbg !4427

for.cond:                                         ; preds = %for.inc10, %if.end
  %13 = load %struct.basic_block_def*, %struct.basic_block_def** %this_block, align 8, !dbg !4429
  %14 = load %struct.function*, %struct.function** %this_cfun, align 8, !dbg !4429
  %cfg3 = getelementptr inbounds %struct.function, %struct.function* %14, i32 0, i32 1, !dbg !4429
  %15 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg3, align 8, !dbg !4429
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %15, i32 0, i32 1, !dbg !4429
  %16 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !4429
  %cmp = icmp ne %struct.basic_block_def* %13, %16, !dbg !4429
  br i1 %cmp, label %for.body, label %for.end12, !dbg !4427

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %gsi, metadata !4431, metadata !DIExpression()), !dbg !4439
  %17 = load %struct.basic_block_def*, %struct.basic_block_def** %this_block, align 8, !dbg !4440
  call void @gsi_start_bb(%struct.gimple_stmt_iterator* sret %tmp, %struct.basic_block_def* %17), !dbg !4442
  %18 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !4442
  %19 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !4442
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %18, i8* align 8 %19, i64 24, i1 false), !dbg !4442
  br label %for.cond5, !dbg !4443

for.cond5:                                        ; preds = %for.inc, %for.body
  %call6 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !4444
  %tobool7 = icmp ne i8 %call6, 0, !dbg !4446
  %lnot = xor i1 %tobool7, true, !dbg !4446
  br i1 %lnot, label %for.body8, label %for.end, !dbg !4447

for.body8:                                        ; preds = %for.cond5
  %call9 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !4448
  call void @scan_for_refs(%union.gimple_statement_d* %call9), !dbg !4449
  br label %for.inc, !dbg !4449

for.inc:                                          ; preds = %for.body8
  call void @gsi_next(%struct.gimple_stmt_iterator* %gsi), !dbg !4450
  br label %for.cond5, !dbg !4451, !llvm.loop !4452

for.end:                                          ; preds = %for.cond5
  br label %for.inc10, !dbg !4454

for.inc10:                                        ; preds = %for.end
  %20 = load %struct.basic_block_def*, %struct.basic_block_def** %this_block, align 8, !dbg !4429
  %next_bb11 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %20, i32 0, i32 6, !dbg !4429
  %21 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb11, align 8, !dbg !4429
  store %struct.basic_block_def* %21, %struct.basic_block_def** %this_block, align 8, !dbg !4429
  br label %for.cond, !dbg !4429, !llvm.loop !4455

for.end12:                                        ; preds = %for.cond
  %22 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !4457
  %function_decl13 = bitcast %union.tree_node* %22 to %struct.tree_function_decl*, !dbg !4457
  %f14 = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl13, i32 0, i32 1, !dbg !4457
  %23 = load %struct.function*, %struct.function** %f14, align 8, !dbg !4457
  %tobool15 = icmp ne %struct.function* %23, null, !dbg !4457
  br i1 %tobool15, label %if.then16, label %if.end43, !dbg !4459

if.then16:                                        ; preds = %for.end12
  call void @llvm.dbg.declare(metadata %union.tree_node** %step, metadata !4460, metadata !DIExpression()), !dbg !4462
  %24 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !4463
  %function_decl17 = bitcast %union.tree_node* %24 to %struct.tree_function_decl*, !dbg !4463
  %f18 = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl17, i32 0, i32 1, !dbg !4463
  %25 = load %struct.function*, %struct.function** %f18, align 8, !dbg !4463
  %local_decls = getelementptr inbounds %struct.function, %struct.function* %25, i32 0, i32 9, !dbg !4465
  %26 = load %union.tree_node*, %union.tree_node** %local_decls, align 8, !dbg !4465
  store %union.tree_node* %26, %union.tree_node** %step, align 8, !dbg !4466
  br label %for.cond19, !dbg !4467

for.cond19:                                       ; preds = %for.inc40, %if.then16
  %27 = load %union.tree_node*, %union.tree_node** %step, align 8, !dbg !4468
  %tobool20 = icmp ne %union.tree_node* %27, null, !dbg !4470
  br i1 %tobool20, label %for.body21, label %for.end42, !dbg !4470

for.body21:                                       ; preds = %for.cond19
  call void @llvm.dbg.declare(metadata %union.tree_node** %var, metadata !4471, metadata !DIExpression()), !dbg !4473
  %28 = load %union.tree_node*, %union.tree_node** %step, align 8, !dbg !4474
  %list = bitcast %union.tree_node* %28 to %struct.tree_list*, !dbg !4474
  %value = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list, i32 0, i32 2, !dbg !4474
  %29 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !4474
  store %union.tree_node* %29, %union.tree_node** %var, align 8, !dbg !4473
  %30 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !4475
  %base = bitcast %union.tree_node* %30 to %struct.tree_base*, !dbg !4475
  %31 = bitcast %struct.tree_base* %base to i64*, !dbg !4475
  %bf.load22 = load i64, i64* %31, align 8, !dbg !4475
  %bf.clear23 = and i64 %bf.load22, 65535, !dbg !4475
  %bf.cast24 = trunc i64 %bf.clear23 to i32, !dbg !4475
  %cmp25 = icmp eq i32 %bf.cast24, 32, !dbg !4477
  br i1 %cmp25, label %land.lhs.true, label %if.end38, !dbg !4478

land.lhs.true:                                    ; preds = %for.body21
  %32 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !4479
  %decl_common = bitcast %union.tree_node* %32 to %struct.tree_decl_common*, !dbg !4479
  %initial = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 5, !dbg !4479
  %33 = load %union.tree_node*, %union.tree_node** %initial, align 8, !dbg !4479
  %tobool27 = icmp ne %union.tree_node* %33, null, !dbg !4479
  br i1 %tobool27, label %land.lhs.true28, label %if.end38, !dbg !4480

land.lhs.true28:                                  ; preds = %land.lhs.true
  %34 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !4481
  %base29 = bitcast %union.tree_node* %34 to %struct.tree_base*, !dbg !4481
  %35 = bitcast %struct.tree_base* %base29 to i64*, !dbg !4481
  %bf.load30 = load i64, i64* %35, align 8, !dbg !4481
  %bf.lshr31 = lshr i64 %bf.load30, 26, !dbg !4481
  %bf.clear32 = and i64 %bf.lshr31, 1, !dbg !4481
  %bf.cast33 = trunc i64 %bf.clear32 to i32, !dbg !4481
  %tobool34 = icmp ne i32 %bf.cast33, 0, !dbg !4481
  br i1 %tobool34, label %if.end38, label %if.then35, !dbg !4482

if.then35:                                        ; preds = %land.lhs.true28
  %36 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !4483
  %decl_common36 = bitcast %union.tree_node* %36 to %struct.tree_decl_common*, !dbg !4483
  %initial37 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common36, i32 0, i32 5, !dbg !4483
  %37 = load %union.tree_node*, %union.tree_node** %initial37, align 8, !dbg !4483
  call void @check_tree(%union.tree_node* %37), !dbg !4484
  br label %if.end38, !dbg !4484

if.end38:                                         ; preds = %if.then35, %land.lhs.true28, %land.lhs.true, %for.body21
  %38 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !4485
  %common = bitcast %union.tree_node* %38 to %struct.tree_common*, !dbg !4485
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !4485
  %39 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !4485
  %call39 = call %union.tree_node* @get_canon_type(%union.tree_node* %39, i8 zeroext 0, i8 zeroext 0), !dbg !4486
  br label %for.inc40, !dbg !4487

for.inc40:                                        ; preds = %if.end38
  %40 = load %union.tree_node*, %union.tree_node** %step, align 8, !dbg !4488
  %common41 = bitcast %union.tree_node* %40 to %struct.tree_common*, !dbg !4488
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common41, i32 0, i32 1, !dbg !4488
  %41 = load %union.tree_node*, %union.tree_node** %chain, align 8, !dbg !4488
  store %union.tree_node* %41, %union.tree_node** %step, align 8, !dbg !4489
  br label %for.cond19, !dbg !4490, !llvm.loop !4491

for.end42:                                        ; preds = %for.cond19
  br label %if.end43, !dbg !4493

if.end43:                                         ; preds = %for.end42, %for.end12
  ret void, !dbg !4494
}

declare dso_local %struct.bitmap_head_def* @bitmap_obstack_alloc_stat(%struct.bitmap_obstack*) #2

declare dso_local void @bitmap_copy(%struct.bitmap_head_def*, %struct.bitmap_head_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @bmp_iter_set_init(%struct.bitmap_iterator* %bi, %struct.bitmap_head_def* %map, i32 %start_bit, i32* %bit_no) #0 !dbg !4495 {
entry:
  %bi.addr = alloca %struct.bitmap_iterator*, align 8
  %map.addr = alloca %struct.bitmap_head_def*, align 8
  %start_bit.addr = alloca i32, align 4
  %bit_no.addr = alloca i32*, align 8
  store %struct.bitmap_iterator* %bi, %struct.bitmap_iterator** %bi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator** %bi.addr, metadata !4503, metadata !DIExpression()), !dbg !4504
  store %struct.bitmap_head_def* %map, %struct.bitmap_head_def** %map.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %map.addr, metadata !4505, metadata !DIExpression()), !dbg !4506
  store i32 %start_bit, i32* %start_bit.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %start_bit.addr, metadata !4507, metadata !DIExpression()), !dbg !4508
  store i32* %bit_no, i32** %bit_no.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %bit_no.addr, metadata !4509, metadata !DIExpression()), !dbg !4510
  %0 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %map.addr, align 8, !dbg !4511
  %first = getelementptr inbounds %struct.bitmap_head_def, %struct.bitmap_head_def* %0, i32 0, i32 0, !dbg !4512
  %1 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %first, align 8, !dbg !4512
  %2 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !4513
  %elt1 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %2, i32 0, i32 0, !dbg !4514
  store %struct.bitmap_element_def* %1, %struct.bitmap_element_def** %elt1, align 8, !dbg !4515
  %3 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !4516
  %elt2 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %3, i32 0, i32 1, !dbg !4517
  store %struct.bitmap_element_def* null, %struct.bitmap_element_def** %elt2, align 8, !dbg !4518
  br label %while.body, !dbg !4519

while.body:                                       ; preds = %entry, %if.end5
  %4 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !4520
  %elt11 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %4, i32 0, i32 0, !dbg !4523
  %5 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt11, align 8, !dbg !4523
  %tobool = icmp ne %struct.bitmap_element_def* %5, null, !dbg !4520
  br i1 %tobool, label %if.end, label %if.then, !dbg !4524

if.then:                                          ; preds = %while.body
  %6 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !4525
  %elt12 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %6, i32 0, i32 0, !dbg !4527
  store %struct.bitmap_element_def* @bitmap_zero_bits, %struct.bitmap_element_def** %elt12, align 8, !dbg !4528
  br label %while.end, !dbg !4529

if.end:                                           ; preds = %while.body
  %7 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !4530
  %elt13 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %7, i32 0, i32 0, !dbg !4532
  %8 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt13, align 8, !dbg !4532
  %indx = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %8, i32 0, i32 2, !dbg !4533
  %9 = load i32, i32* %indx, align 8, !dbg !4533
  %10 = load i32, i32* %start_bit.addr, align 4, !dbg !4534
  %div = udiv i32 %10, 128, !dbg !4535
  %cmp = icmp uge i32 %9, %div, !dbg !4536
  br i1 %cmp, label %if.then4, label %if.end5, !dbg !4537

if.then4:                                         ; preds = %if.end
  br label %while.end, !dbg !4538

if.end5:                                          ; preds = %if.end
  %11 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !4539
  %elt16 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %11, i32 0, i32 0, !dbg !4540
  %12 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt16, align 8, !dbg !4540
  %next = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %12, i32 0, i32 0, !dbg !4541
  %13 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %next, align 8, !dbg !4541
  %14 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !4542
  %elt17 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %14, i32 0, i32 0, !dbg !4543
  store %struct.bitmap_element_def* %13, %struct.bitmap_element_def** %elt17, align 8, !dbg !4544
  br label %while.body, !dbg !4519, !llvm.loop !4545

while.end:                                        ; preds = %if.then4, %if.then
  %15 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !4547
  %elt18 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %15, i32 0, i32 0, !dbg !4549
  %16 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt18, align 8, !dbg !4549
  %indx9 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %16, i32 0, i32 2, !dbg !4550
  %17 = load i32, i32* %indx9, align 8, !dbg !4550
  %18 = load i32, i32* %start_bit.addr, align 4, !dbg !4551
  %div10 = udiv i32 %18, 128, !dbg !4552
  %cmp11 = icmp ne i32 %17, %div10, !dbg !4553
  br i1 %cmp11, label %if.then12, label %if.end15, !dbg !4554

if.then12:                                        ; preds = %while.end
  %19 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !4555
  %elt113 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %19, i32 0, i32 0, !dbg !4556
  %20 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt113, align 8, !dbg !4556
  %indx14 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %20, i32 0, i32 2, !dbg !4557
  %21 = load i32, i32* %indx14, align 8, !dbg !4557
  %mul = mul i32 %21, 128, !dbg !4558
  store i32 %mul, i32* %start_bit.addr, align 4, !dbg !4559
  br label %if.end15, !dbg !4560

if.end15:                                         ; preds = %if.then12, %while.end
  %22 = load i32, i32* %start_bit.addr, align 4, !dbg !4561
  %div16 = udiv i32 %22, 64, !dbg !4562
  %rem = urem i32 %div16, 2, !dbg !4563
  %23 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !4564
  %word_no = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %23, i32 0, i32 2, !dbg !4565
  store i32 %rem, i32* %word_no, align 8, !dbg !4566
  %24 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !4567
  %elt117 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %24, i32 0, i32 0, !dbg !4568
  %25 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt117, align 8, !dbg !4568
  %bits = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %25, i32 0, i32 3, !dbg !4569
  %26 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !4570
  %word_no18 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %26, i32 0, i32 2, !dbg !4571
  %27 = load i32, i32* %word_no18, align 8, !dbg !4571
  %idxprom = zext i32 %27 to i64, !dbg !4567
  %arrayidx = getelementptr inbounds [2 x i64], [2 x i64]* %bits, i64 0, i64 %idxprom, !dbg !4567
  %28 = load i64, i64* %arrayidx, align 8, !dbg !4567
  %29 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !4572
  %bits19 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %29, i32 0, i32 3, !dbg !4573
  store i64 %28, i64* %bits19, align 8, !dbg !4574
  %30 = load i32, i32* %start_bit.addr, align 4, !dbg !4575
  %rem20 = urem i32 %30, 64, !dbg !4576
  %31 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !4577
  %bits21 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %31, i32 0, i32 3, !dbg !4578
  %32 = load i64, i64* %bits21, align 8, !dbg !4579
  %sh_prom = zext i32 %rem20 to i64, !dbg !4579
  %shr = lshr i64 %32, %sh_prom, !dbg !4579
  store i64 %shr, i64* %bits21, align 8, !dbg !4579
  %33 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !4580
  %bits22 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %33, i32 0, i32 3, !dbg !4581
  %34 = load i64, i64* %bits22, align 8, !dbg !4581
  %tobool23 = icmp ne i64 %34, 0, !dbg !4582
  %lnot = xor i1 %tobool23, true, !dbg !4582
  %lnot.ext = zext i1 %lnot to i32, !dbg !4582
  %35 = load i32, i32* %start_bit.addr, align 4, !dbg !4583
  %add = add i32 %35, %lnot.ext, !dbg !4583
  store i32 %add, i32* %start_bit.addr, align 4, !dbg !4583
  %36 = load i32, i32* %start_bit.addr, align 4, !dbg !4584
  %37 = load i32*, i32** %bit_no.addr, align 8, !dbg !4585
  store i32 %36, i32* %37, align 4, !dbg !4586
  ret void, !dbg !4587
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @bmp_iter_set(%struct.bitmap_iterator* %bi, i32* %bit_no) #0 !dbg !4588 {
entry:
  %retval = alloca i8, align 1
  %bi.addr = alloca %struct.bitmap_iterator*, align 8
  %bit_no.addr = alloca i32*, align 8
  store %struct.bitmap_iterator* %bi, %struct.bitmap_iterator** %bi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator** %bi.addr, metadata !4591, metadata !DIExpression()), !dbg !4592
  store i32* %bit_no, i32** %bit_no.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %bit_no.addr, metadata !4593, metadata !DIExpression()), !dbg !4594
  %0 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !4595
  %bits = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %0, i32 0, i32 3, !dbg !4597
  %1 = load i64, i64* %bits, align 8, !dbg !4597
  %tobool = icmp ne i64 %1, 0, !dbg !4595
  br i1 %tobool, label %if.then, label %if.end, !dbg !4598

if.then:                                          ; preds = %entry
  br label %next_bit, !dbg !4599

next_bit:                                         ; preds = %if.then15, %if.then
  call void @llvm.dbg.label(metadata !4600), !dbg !4602
  br label %while.cond, !dbg !4603

while.cond:                                       ; preds = %while.body, %next_bit
  %2 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !4604
  %bits1 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %2, i32 0, i32 3, !dbg !4605
  %3 = load i64, i64* %bits1, align 8, !dbg !4605
  %and = and i64 %3, 1, !dbg !4606
  %tobool2 = icmp ne i64 %and, 0, !dbg !4607
  %lnot = xor i1 %tobool2, true, !dbg !4607
  br i1 %lnot, label %while.body, label %while.end, !dbg !4603

while.body:                                       ; preds = %while.cond
  %4 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !4608
  %bits3 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %4, i32 0, i32 3, !dbg !4610
  %5 = load i64, i64* %bits3, align 8, !dbg !4611
  %shr = lshr i64 %5, 1, !dbg !4611
  store i64 %shr, i64* %bits3, align 8, !dbg !4611
  %6 = load i32*, i32** %bit_no.addr, align 8, !dbg !4612
  %7 = load i32, i32* %6, align 4, !dbg !4613
  %add = add i32 %7, 1, !dbg !4613
  store i32 %add, i32* %6, align 4, !dbg !4613
  br label %while.cond, !dbg !4603, !llvm.loop !4614

while.end:                                        ; preds = %while.cond
  store i8 1, i8* %retval, align 1, !dbg !4616
  br label %return, !dbg !4616

if.end:                                           ; preds = %entry
  %8 = load i32*, i32** %bit_no.addr, align 8, !dbg !4617
  %9 = load i32, i32* %8, align 4, !dbg !4618
  %add4 = add i32 %9, 64, !dbg !4619
  %sub = sub i32 %add4, 1, !dbg !4620
  %div = udiv i32 %sub, 64, !dbg !4621
  %mul = mul i32 %div, 64, !dbg !4622
  %10 = load i32*, i32** %bit_no.addr, align 8, !dbg !4623
  store i32 %mul, i32* %10, align 4, !dbg !4624
  %11 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !4625
  %word_no = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %11, i32 0, i32 2, !dbg !4626
  %12 = load i32, i32* %word_no, align 8, !dbg !4627
  %inc = add i32 %12, 1, !dbg !4627
  store i32 %inc, i32* %word_no, align 8, !dbg !4627
  br label %while.body6, !dbg !4628

while.body6:                                      ; preds = %if.end, %if.end26
  br label %while.cond7, !dbg !4629

while.cond7:                                      ; preds = %if.end16, %while.body6
  %13 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !4631
  %word_no8 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %13, i32 0, i32 2, !dbg !4632
  %14 = load i32, i32* %word_no8, align 8, !dbg !4632
  %cmp = icmp ne i32 %14, 2, !dbg !4633
  br i1 %cmp, label %while.body9, label %while.end20, !dbg !4629

while.body9:                                      ; preds = %while.cond7
  %15 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !4634
  %elt1 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %15, i32 0, i32 0, !dbg !4636
  %16 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt1, align 8, !dbg !4636
  %bits10 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %16, i32 0, i32 3, !dbg !4637
  %17 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !4638
  %word_no11 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %17, i32 0, i32 2, !dbg !4639
  %18 = load i32, i32* %word_no11, align 8, !dbg !4639
  %idxprom = zext i32 %18 to i64, !dbg !4634
  %arrayidx = getelementptr inbounds [2 x i64], [2 x i64]* %bits10, i64 0, i64 %idxprom, !dbg !4634
  %19 = load i64, i64* %arrayidx, align 8, !dbg !4634
  %20 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !4640
  %bits12 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %20, i32 0, i32 3, !dbg !4641
  store i64 %19, i64* %bits12, align 8, !dbg !4642
  %21 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !4643
  %bits13 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %21, i32 0, i32 3, !dbg !4645
  %22 = load i64, i64* %bits13, align 8, !dbg !4645
  %tobool14 = icmp ne i64 %22, 0, !dbg !4643
  br i1 %tobool14, label %if.then15, label %if.end16, !dbg !4646

if.then15:                                        ; preds = %while.body9
  br label %next_bit, !dbg !4647

if.end16:                                         ; preds = %while.body9
  %23 = load i32*, i32** %bit_no.addr, align 8, !dbg !4648
  %24 = load i32, i32* %23, align 4, !dbg !4649
  %add17 = add i32 %24, 64, !dbg !4649
  store i32 %add17, i32* %23, align 4, !dbg !4649
  %25 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !4650
  %word_no18 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %25, i32 0, i32 2, !dbg !4651
  %26 = load i32, i32* %word_no18, align 8, !dbg !4652
  %inc19 = add i32 %26, 1, !dbg !4652
  store i32 %inc19, i32* %word_no18, align 8, !dbg !4652
  br label %while.cond7, !dbg !4629, !llvm.loop !4653

while.end20:                                      ; preds = %while.cond7
  %27 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !4655
  %elt121 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %27, i32 0, i32 0, !dbg !4656
  %28 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt121, align 8, !dbg !4656
  %next = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %28, i32 0, i32 0, !dbg !4657
  %29 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %next, align 8, !dbg !4657
  %30 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !4658
  %elt122 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %30, i32 0, i32 0, !dbg !4659
  store %struct.bitmap_element_def* %29, %struct.bitmap_element_def** %elt122, align 8, !dbg !4660
  %31 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !4661
  %elt123 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %31, i32 0, i32 0, !dbg !4663
  %32 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt123, align 8, !dbg !4663
  %tobool24 = icmp ne %struct.bitmap_element_def* %32, null, !dbg !4661
  br i1 %tobool24, label %if.end26, label %if.then25, !dbg !4664

if.then25:                                        ; preds = %while.end20
  store i8 0, i8* %retval, align 1, !dbg !4665
  br label %return, !dbg !4665

if.end26:                                         ; preds = %while.end20
  %33 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !4666
  %elt127 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %33, i32 0, i32 0, !dbg !4667
  %34 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt127, align 8, !dbg !4667
  %indx = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %34, i32 0, i32 2, !dbg !4668
  %35 = load i32, i32* %indx, align 8, !dbg !4668
  %mul28 = mul i32 %35, 128, !dbg !4669
  %36 = load i32*, i32** %bit_no.addr, align 8, !dbg !4670
  store i32 %mul28, i32* %36, align 4, !dbg !4671
  %37 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !4672
  %word_no29 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %37, i32 0, i32 2, !dbg !4673
  store i32 0, i32* %word_no29, align 8, !dbg !4674
  br label %while.body6, !dbg !4628, !llvm.loop !4675

return:                                           ; preds = %if.then25, %while.end
  %38 = load i8, i8* %retval, align 1, !dbg !4677
  ret i8 %38, !dbg !4677
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @type_for_uid(i32 %uid) #0 !dbg !4678 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %uid.addr = alloca i32, align 4
  %result = alloca %struct.splay_tree_node_s*, align 8
  store i32 %uid, i32* %uid.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %uid.addr, metadata !4681, metadata !DIExpression()), !dbg !4682
  call void @llvm.dbg.declare(metadata %struct.splay_tree_node_s** %result, metadata !4683, metadata !DIExpression()), !dbg !4684
  %0 = load %struct.splay_tree_s*, %struct.splay_tree_s** @uid_to_canon_type, align 8, !dbg !4685
  %1 = load i32, i32* %uid.addr, align 4, !dbg !4686
  %conv = sext i32 %1 to i64, !dbg !4687
  %call = call %struct.splay_tree_node_s* @splay_tree_lookup(%struct.splay_tree_s* %0, i64 %conv), !dbg !4688
  store %struct.splay_tree_node_s* %call, %struct.splay_tree_node_s** %result, align 8, !dbg !4684
  %2 = load %struct.splay_tree_node_s*, %struct.splay_tree_node_s** %result, align 8, !dbg !4689
  %tobool = icmp ne %struct.splay_tree_node_s* %2, null, !dbg !4689
  br i1 %tobool, label %if.then, label %if.else, !dbg !4691

if.then:                                          ; preds = %entry
  %3 = load %struct.splay_tree_node_s*, %struct.splay_tree_node_s** %result, align 8, !dbg !4692
  %value = getelementptr inbounds %struct.splay_tree_node_s, %struct.splay_tree_node_s* %3, i32 0, i32 1, !dbg !4693
  %4 = load i64, i64* %value, align 8, !dbg !4693
  %5 = inttoptr i64 %4 to %union.tree_node*, !dbg !4694
  store %union.tree_node* %5, %union.tree_node** %retval, align 8, !dbg !4695
  br label %return, !dbg !4695

if.else:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !4696
  br label %return, !dbg !4696

return:                                           ; preds = %if.else, %if.then
  %6 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !4697
  ret %union.tree_node* %6, !dbg !4697
}

; Function Attrs: noinline nounwind uwtable
define internal void @close_type_seen(%union.tree_node* %type) #0 !dbg !4698 {
entry:
  %type.addr = alloca %union.tree_node*, align 8
  %field = alloca %union.tree_node*, align 8
  %i = alloca i32, align 4
  %uid = alloca i32, align 4
  %binfo = alloca %union.tree_node*, align 8
  %base_binfo = alloca %union.tree_node*, align 8
  %binfo_type = alloca %union.tree_node*, align 8
  %subtype_map = alloca %struct.bitmap_head_def*, align 8
  %field_type = alloca %union.tree_node*, align 8
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %type.addr, metadata !4701, metadata !DIExpression()), !dbg !4702
  call void @llvm.dbg.declare(metadata %union.tree_node** %field, metadata !4703, metadata !DIExpression()), !dbg !4704
  call void @llvm.dbg.declare(metadata i32* %i, metadata !4705, metadata !DIExpression()), !dbg !4706
  call void @llvm.dbg.declare(metadata i32* %uid, metadata !4707, metadata !DIExpression()), !dbg !4708
  call void @llvm.dbg.declare(metadata %union.tree_node** %binfo, metadata !4709, metadata !DIExpression()), !dbg !4710
  call void @llvm.dbg.declare(metadata %union.tree_node** %base_binfo, metadata !4711, metadata !DIExpression()), !dbg !4712
  %0 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4713
  %call = call %union.tree_node* @get_canon_type(%union.tree_node* %0, i8 zeroext 1, i8 zeroext 1), !dbg !4714
  store %union.tree_node* %call, %union.tree_node** %type.addr, align 8, !dbg !4715
  %1 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4716
  %tobool = icmp ne %union.tree_node* %1, null, !dbg !4716
  br i1 %tobool, label %if.end, label %if.then, !dbg !4718

if.then:                                          ; preds = %entry
  br label %for.end44, !dbg !4719

if.end:                                           ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4720
  %type1 = bitcast %union.tree_node* %2 to %struct.tree_type*, !dbg !4720
  %uid2 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1, i32 0, i32 5, !dbg !4720
  %3 = load i32, i32* %uid2, align 8, !dbg !4720
  store i32 %3, i32* %uid, align 4, !dbg !4721
  %4 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @been_there_done_that, align 8, !dbg !4722
  %5 = load i32, i32* %uid, align 4, !dbg !4724
  %call3 = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %4, i32 %5), !dbg !4725
  %tobool4 = icmp ne i32 %call3, 0, !dbg !4725
  br i1 %tobool4, label %if.then5, label %if.end6, !dbg !4726

if.then5:                                         ; preds = %if.end
  br label %for.end44, !dbg !4727

if.end6:                                          ; preds = %if.end
  %6 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @been_there_done_that, align 8, !dbg !4728
  %7 = load i32, i32* %uid, align 4, !dbg !4729
  %call7 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %6, i32 %7), !dbg !4730
  %8 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4731
  %type8 = bitcast %union.tree_node* %8 to %struct.tree_type*, !dbg !4731
  %binfo9 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type8, i32 0, i32 17, !dbg !4731
  %9 = load %union.tree_node*, %union.tree_node** %binfo9, align 8, !dbg !4731
  %tobool10 = icmp ne %union.tree_node* %9, null, !dbg !4731
  br i1 %tobool10, label %if.then11, label %if.end27, !dbg !4733

if.then11:                                        ; preds = %if.end6
  %10 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4734
  %type12 = bitcast %union.tree_node* %10 to %struct.tree_type*, !dbg !4734
  %binfo13 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type12, i32 0, i32 17, !dbg !4734
  %11 = load %union.tree_node*, %union.tree_node** %binfo13, align 8, !dbg !4734
  store %union.tree_node* %11, %union.tree_node** %binfo, align 8, !dbg !4736
  store i32 0, i32* %i, align 4, !dbg !4737
  br label %for.cond, !dbg !4738

for.cond:                                         ; preds = %for.inc, %if.then11
  %12 = load %union.tree_node*, %union.tree_node** %binfo, align 8, !dbg !4739
  %binfo14 = bitcast %union.tree_node* %12 to %struct.tree_binfo*, !dbg !4739
  %base_binfos = getelementptr inbounds %struct.tree_binfo, %struct.tree_binfo* %binfo14, i32 0, i32 9, !dbg !4739
  %tobool15 = icmp ne %struct.VEC_tree_none* %base_binfos, null, !dbg !4739
  br i1 %tobool15, label %cond.true, label %cond.false, !dbg !4739

cond.true:                                        ; preds = %for.cond
  %13 = load %union.tree_node*, %union.tree_node** %binfo, align 8, !dbg !4739
  %binfo16 = bitcast %union.tree_node* %13 to %struct.tree_binfo*, !dbg !4739
  %base_binfos17 = getelementptr inbounds %struct.tree_binfo, %struct.tree_binfo* %binfo16, i32 0, i32 9, !dbg !4739
  %base = getelementptr inbounds %struct.VEC_tree_none, %struct.VEC_tree_none* %base_binfos17, i32 0, i32 0, !dbg !4739
  br label %cond.end, !dbg !4739

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !4739

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !4739
  %14 = load i32, i32* %i, align 4, !dbg !4739
  %call18 = call i32 @VEC_tree_base_iterate(%struct.VEC_tree_base* %cond, i32 %14, %union.tree_node** %base_binfo), !dbg !4739
  %tobool19 = icmp ne i32 %call18, 0, !dbg !4741
  br i1 %tobool19, label %for.body, label %for.end, !dbg !4741

for.body:                                         ; preds = %cond.end
  call void @llvm.dbg.declare(metadata %union.tree_node** %binfo_type, metadata !4742, metadata !DIExpression()), !dbg !4744
  %15 = load %union.tree_node*, %union.tree_node** %base_binfo, align 8, !dbg !4745
  %common = bitcast %union.tree_node* %15 to %struct.tree_common*, !dbg !4745
  %type20 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !4745
  %16 = load %union.tree_node*, %union.tree_node** %type20, align 8, !dbg !4745
  store %union.tree_node* %16, %union.tree_node** %binfo_type, align 8, !dbg !4744
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %subtype_map, metadata !4746, metadata !DIExpression()), !dbg !4747
  %17 = load %union.tree_node*, %union.tree_node** %binfo_type, align 8, !dbg !4748
  %type21 = bitcast %union.tree_node* %17 to %struct.tree_type*, !dbg !4748
  %main_variant = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type21, i32 0, i32 16, !dbg !4748
  %18 = load %union.tree_node*, %union.tree_node** %main_variant, align 8, !dbg !4748
  %type22 = bitcast %union.tree_node* %18 to %struct.tree_type*, !dbg !4748
  %uid23 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type22, i32 0, i32 5, !dbg !4748
  %19 = load i32, i32* %uid23, align 8, !dbg !4748
  %call24 = call %struct.bitmap_head_def* @subtype_map_for_uid(i32 %19, i8 zeroext 1), !dbg !4749
  store %struct.bitmap_head_def* %call24, %struct.bitmap_head_def** %subtype_map, align 8, !dbg !4747
  %20 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %subtype_map, align 8, !dbg !4750
  %21 = load i32, i32* %uid, align 4, !dbg !4751
  %call25 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %20, i32 %21), !dbg !4752
  %22 = load %union.tree_node*, %union.tree_node** %binfo_type, align 8, !dbg !4753
  %call26 = call %union.tree_node* @get_canon_type(%union.tree_node* %22, i8 zeroext 1, i8 zeroext 1), !dbg !4754
  call void @close_type_seen(%union.tree_node* %call26), !dbg !4755
  br label %for.inc, !dbg !4756

for.inc:                                          ; preds = %for.body
  %23 = load i32, i32* %i, align 4, !dbg !4757
  %inc = add nsw i32 %23, 1, !dbg !4757
  store i32 %inc, i32* %i, align 4, !dbg !4757
  br label %for.cond, !dbg !4758, !llvm.loop !4759

for.end:                                          ; preds = %cond.end
  br label %if.end27, !dbg !4760

if.end27:                                         ; preds = %for.end, %if.end6
  %24 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4761
  %type28 = bitcast %union.tree_node* %24 to %struct.tree_type*, !dbg !4761
  %values = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type28, i32 0, i32 1, !dbg !4761
  %25 = load %union.tree_node*, %union.tree_node** %values, align 8, !dbg !4761
  store %union.tree_node* %25, %union.tree_node** %field, align 8, !dbg !4763
  br label %for.cond29, !dbg !4764

for.cond29:                                       ; preds = %for.inc42, %if.end27
  %26 = load %union.tree_node*, %union.tree_node** %field, align 8, !dbg !4765
  %tobool30 = icmp ne %union.tree_node* %26, null, !dbg !4767
  br i1 %tobool30, label %for.body31, label %for.end44, !dbg !4767

for.body31:                                       ; preds = %for.cond29
  call void @llvm.dbg.declare(metadata %union.tree_node** %field_type, metadata !4768, metadata !DIExpression()), !dbg !4770
  %27 = load %union.tree_node*, %union.tree_node** %field, align 8, !dbg !4771
  %base32 = bitcast %union.tree_node* %27 to %struct.tree_base*, !dbg !4771
  %28 = bitcast %struct.tree_base* %base32 to i64*, !dbg !4771
  %bf.load = load i64, i64* %28, align 8, !dbg !4771
  %bf.clear = and i64 %bf.load, 65535, !dbg !4771
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !4771
  %cmp = icmp ne i32 %bf.cast, 31, !dbg !4773
  br i1 %cmp, label %if.then33, label %if.end34, !dbg !4774

if.then33:                                        ; preds = %for.body31
  br label %for.inc42, !dbg !4775

if.end34:                                         ; preds = %for.body31
  %29 = load %union.tree_node*, %union.tree_node** %field, align 8, !dbg !4776
  %common35 = bitcast %union.tree_node* %29 to %struct.tree_common*, !dbg !4776
  %type36 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common35, i32 0, i32 2, !dbg !4776
  %30 = load %union.tree_node*, %union.tree_node** %type36, align 8, !dbg !4776
  store %union.tree_node* %30, %union.tree_node** %field_type, align 8, !dbg !4777
  %31 = load %union.tree_node*, %union.tree_node** %field_type, align 8, !dbg !4778
  %call37 = call i32 @ipa_type_escape_star_count_of_interesting_or_array_type(%union.tree_node* %31), !dbg !4780
  %cmp38 = icmp sge i32 %call37, 0, !dbg !4781
  br i1 %cmp38, label %if.then39, label %if.end41, !dbg !4782

if.then39:                                        ; preds = %if.end34
  %32 = load %union.tree_node*, %union.tree_node** %field_type, align 8, !dbg !4783
  %call40 = call %union.tree_node* @get_canon_type(%union.tree_node* %32, i8 zeroext 1, i8 zeroext 1), !dbg !4784
  call void @close_type_seen(%union.tree_node* %call40), !dbg !4785
  br label %if.end41, !dbg !4785

if.end41:                                         ; preds = %if.then39, %if.end34
  br label %for.inc42, !dbg !4786

for.inc42:                                        ; preds = %if.end41, %if.then33
  %33 = load %union.tree_node*, %union.tree_node** %field, align 8, !dbg !4787
  %common43 = bitcast %union.tree_node* %33 to %struct.tree_common*, !dbg !4787
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common43, i32 0, i32 1, !dbg !4787
  %34 = load %union.tree_node*, %union.tree_node** %chain, align 8, !dbg !4787
  store %union.tree_node* %34, %union.tree_node** %field, align 8, !dbg !4788
  br label %for.cond29, !dbg !4789, !llvm.loop !4790

for.end44:                                        ; preds = %if.then, %if.then5, %for.cond29
  ret void, !dbg !4792
}

; Function Attrs: noinline nounwind uwtable
define internal void @bmp_iter_next(%struct.bitmap_iterator* %bi, i32* %bit_no) #0 !dbg !4793 {
entry:
  %bi.addr = alloca %struct.bitmap_iterator*, align 8
  %bit_no.addr = alloca i32*, align 8
  store %struct.bitmap_iterator* %bi, %struct.bitmap_iterator** %bi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator** %bi.addr, metadata !4796, metadata !DIExpression()), !dbg !4797
  store i32* %bit_no, i32** %bit_no.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %bit_no.addr, metadata !4798, metadata !DIExpression()), !dbg !4799
  %0 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !4800
  %bits = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %0, i32 0, i32 3, !dbg !4801
  %1 = load i64, i64* %bits, align 8, !dbg !4802
  %shr = lshr i64 %1, 1, !dbg !4802
  store i64 %shr, i64* %bits, align 8, !dbg !4802
  %2 = load i32*, i32** %bit_no.addr, align 8, !dbg !4803
  %3 = load i32, i32* %2, align 4, !dbg !4804
  %add = add i32 %3, 1, !dbg !4804
  store i32 %add, i32* %2, align 4, !dbg !4804
  ret void, !dbg !4805
}

declare dso_local void @bitmap_clear(%struct.bitmap_head_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @close_type_exposed_parameter(%union.tree_node* %type) #0 !dbg !4806 {
entry:
  %type.addr = alloca %union.tree_node*, align 8
  %field = alloca %union.tree_node*, align 8
  %uid = alloca i32, align 4
  %field_type = alloca %union.tree_node*, align 8
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %type.addr, metadata !4807, metadata !DIExpression()), !dbg !4808
  call void @llvm.dbg.declare(metadata %union.tree_node** %field, metadata !4809, metadata !DIExpression()), !dbg !4810
  call void @llvm.dbg.declare(metadata i32* %uid, metadata !4811, metadata !DIExpression()), !dbg !4812
  %0 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4813
  %call = call %union.tree_node* @get_canon_type(%union.tree_node* %0, i8 zeroext 0, i8 zeroext 0), !dbg !4814
  store %union.tree_node* %call, %union.tree_node** %type.addr, align 8, !dbg !4815
  %1 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4816
  %tobool = icmp ne %union.tree_node* %1, null, !dbg !4816
  br i1 %tobool, label %if.end, label %if.then, !dbg !4818

if.then:                                          ; preds = %entry
  br label %for.end, !dbg !4819

if.end:                                           ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4820
  %type1 = bitcast %union.tree_node* %2 to %struct.tree_type*, !dbg !4820
  %uid2 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1, i32 0, i32 5, !dbg !4820
  %3 = load i32, i32* %uid2, align 8, !dbg !4820
  store i32 %3, i32* %uid, align 4, !dbg !4821
  %4 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4822
  %base = bitcast %union.tree_node* %4 to %struct.tree_base*, !dbg !4822
  %5 = bitcast %struct.tree_base* %base to i64*, !dbg !4822
  %bf.load = load i64, i64* %5, align 8, !dbg !4822
  %bf.clear = and i64 %bf.load, 65535, !dbg !4822
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !4822
  %cmp = icmp eq i32 %bf.cast, 10, !dbg !4822
  br i1 %cmp, label %cond.true, label %lor.lhs.false, !dbg !4822

lor.lhs.false:                                    ; preds = %if.end
  %6 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4822
  %base3 = bitcast %union.tree_node* %6 to %struct.tree_base*, !dbg !4822
  %7 = bitcast %struct.tree_base* %base3 to i64*, !dbg !4822
  %bf.load4 = load i64, i64* %7, align 8, !dbg !4822
  %bf.clear5 = and i64 %bf.load4, 65535, !dbg !4822
  %bf.cast6 = trunc i64 %bf.clear5 to i32, !dbg !4822
  %cmp7 = icmp eq i32 %bf.cast6, 12, !dbg !4822
  br i1 %cmp7, label %cond.true, label %cond.false, !dbg !4822

cond.true:                                        ; preds = %lor.lhs.false, %if.end
  call void @fancy_abort(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.2, i64 0, i64 0), i32 1797, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !4822
  br label %cond.end, !dbg !4822

cond.false:                                       ; preds = %lor.lhs.false
  br label %cond.end, !dbg !4822

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !4822
  %8 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @been_there_done_that, align 8, !dbg !4823
  %9 = load i32, i32* %uid, align 4, !dbg !4825
  %call8 = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %8, i32 %9), !dbg !4826
  %tobool9 = icmp ne i32 %call8, 0, !dbg !4826
  br i1 %tobool9, label %if.then10, label %if.end11, !dbg !4827

if.then10:                                        ; preds = %cond.end
  br label %for.end, !dbg !4828

if.end11:                                         ; preds = %cond.end
  %10 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @been_there_done_that, align 8, !dbg !4829
  %11 = load i32, i32* %uid, align 4, !dbg !4830
  %call12 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %10, i32 %11), !dbg !4831
  %12 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4832
  %type13 = bitcast %union.tree_node* %12 to %struct.tree_type*, !dbg !4832
  %values = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type13, i32 0, i32 1, !dbg !4832
  %13 = load %union.tree_node*, %union.tree_node** %values, align 8, !dbg !4832
  store %union.tree_node* %13, %union.tree_node** %field, align 8, !dbg !4834
  br label %for.cond, !dbg !4835

for.cond:                                         ; preds = %for.inc, %if.end11
  %14 = load %union.tree_node*, %union.tree_node** %field, align 8, !dbg !4836
  %tobool14 = icmp ne %union.tree_node* %14, null, !dbg !4838
  br i1 %tobool14, label %for.body, label %for.end, !dbg !4838

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %union.tree_node** %field_type, metadata !4839, metadata !DIExpression()), !dbg !4841
  %15 = load %union.tree_node*, %union.tree_node** %field, align 8, !dbg !4842
  %base15 = bitcast %union.tree_node* %15 to %struct.tree_base*, !dbg !4842
  %16 = bitcast %struct.tree_base* %base15 to i64*, !dbg !4842
  %bf.load16 = load i64, i64* %16, align 8, !dbg !4842
  %bf.clear17 = and i64 %bf.load16, 65535, !dbg !4842
  %bf.cast18 = trunc i64 %bf.clear17 to i32, !dbg !4842
  %cmp19 = icmp ne i32 %bf.cast18, 31, !dbg !4844
  br i1 %cmp19, label %if.then20, label %if.end21, !dbg !4845

if.then20:                                        ; preds = %for.body
  br label %for.inc, !dbg !4846

if.end21:                                         ; preds = %for.body
  %17 = load %union.tree_node*, %union.tree_node** %field, align 8, !dbg !4847
  %common = bitcast %union.tree_node* %17 to %struct.tree_common*, !dbg !4847
  %type22 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !4847
  %18 = load %union.tree_node*, %union.tree_node** %type22, align 8, !dbg !4847
  %call23 = call %union.tree_node* @get_canon_type(%union.tree_node* %18, i8 zeroext 0, i8 zeroext 0), !dbg !4848
  store %union.tree_node* %call23, %union.tree_node** %field_type, align 8, !dbg !4849
  %19 = load %union.tree_node*, %union.tree_node** %field_type, align 8, !dbg !4850
  call void @mark_interesting_type(%union.tree_node* %19, i32 0), !dbg !4851
  %20 = load %union.tree_node*, %union.tree_node** %field_type, align 8, !dbg !4852
  %call24 = call i32 @ipa_type_escape_star_count_of_interesting_type(%union.tree_node* %20), !dbg !4854
  %cmp25 = icmp eq i32 %call24, 0, !dbg !4855
  br i1 %cmp25, label %if.then26, label %if.end27, !dbg !4856

if.then26:                                        ; preds = %if.end21
  %21 = load %union.tree_node*, %union.tree_node** %field_type, align 8, !dbg !4857
  call void @close_type_exposed_parameter(%union.tree_node* %21), !dbg !4858
  br label %if.end27, !dbg !4858

if.end27:                                         ; preds = %if.then26, %if.end21
  br label %for.inc, !dbg !4859

for.inc:                                          ; preds = %if.end27, %if.then20
  %22 = load %union.tree_node*, %union.tree_node** %field, align 8, !dbg !4860
  %common28 = bitcast %union.tree_node* %22 to %struct.tree_common*, !dbg !4860
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common28, i32 0, i32 1, !dbg !4860
  %23 = load %union.tree_node*, %union.tree_node** %chain, align 8, !dbg !4860
  store %union.tree_node* %23, %union.tree_node** %field, align 8, !dbg !4861
  br label %for.cond, !dbg !4862, !llvm.loop !4863

for.end:                                          ; preds = %if.then, %if.then10, %for.cond
  ret void, !dbg !4865
}

; Function Attrs: noinline nounwind uwtable
define internal void @close_type_full_escape(%union.tree_node* %type) #0 !dbg !4866 {
entry:
  %type.addr = alloca %union.tree_node*, align 8
  %field = alloca %union.tree_node*, align 8
  %i = alloca i32, align 4
  %uid = alloca i32, align 4
  %binfo = alloca %union.tree_node*, align 8
  %base_binfo = alloca %union.tree_node*, align 8
  %bi = alloca %struct.bitmap_iterator, align 8
  %subtype_map = alloca %struct.bitmap_head_def*, align 8
  %address_result = alloca %struct.splay_tree_node_s*, align 8
  %binfotype = alloca %union.tree_node*, align 8
  %subtype = alloca %union.tree_node*, align 8
  %field_type = alloca %union.tree_node*, align 8
  %containing_classes = alloca %struct.bitmap_head_def*, align 8
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %type.addr, metadata !4867, metadata !DIExpression()), !dbg !4868
  call void @llvm.dbg.declare(metadata %union.tree_node** %field, metadata !4869, metadata !DIExpression()), !dbg !4870
  call void @llvm.dbg.declare(metadata i32* %i, metadata !4871, metadata !DIExpression()), !dbg !4872
  call void @llvm.dbg.declare(metadata i32* %uid, metadata !4873, metadata !DIExpression()), !dbg !4874
  call void @llvm.dbg.declare(metadata %union.tree_node** %binfo, metadata !4875, metadata !DIExpression()), !dbg !4876
  call void @llvm.dbg.declare(metadata %union.tree_node** %base_binfo, metadata !4877, metadata !DIExpression()), !dbg !4878
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator* %bi, metadata !4879, metadata !DIExpression()), !dbg !4880
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %subtype_map, metadata !4881, metadata !DIExpression()), !dbg !4882
  call void @llvm.dbg.declare(metadata %struct.splay_tree_node_s** %address_result, metadata !4883, metadata !DIExpression()), !dbg !4884
  %0 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4885
  %call = call %union.tree_node* @get_canon_type(%union.tree_node* %0, i8 zeroext 1, i8 zeroext 1), !dbg !4886
  store %union.tree_node* %call, %union.tree_node** %type.addr, align 8, !dbg !4887
  %1 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4888
  %tobool = icmp ne %union.tree_node* %1, null, !dbg !4888
  br i1 %tobool, label %if.end, label %if.then, !dbg !4890

if.then:                                          ; preds = %entry
  br label %if.end62, !dbg !4891

if.end:                                           ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4892
  %type1 = bitcast %union.tree_node* %2 to %struct.tree_type*, !dbg !4892
  %uid2 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1, i32 0, i32 5, !dbg !4892
  %3 = load i32, i32* %uid2, align 8, !dbg !4892
  store i32 %3, i32* %uid, align 4, !dbg !4893
  %4 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @been_there_done_that, align 8, !dbg !4894
  %5 = load i32, i32* %uid, align 4, !dbg !4896
  %call3 = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %4, i32 %5), !dbg !4897
  %tobool4 = icmp ne i32 %call3, 0, !dbg !4897
  br i1 %tobool4, label %if.then5, label %if.end6, !dbg !4898

if.then5:                                         ; preds = %if.end
  br label %if.end62, !dbg !4899

if.end6:                                          ; preds = %if.end
  %6 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @been_there_done_that, align 8, !dbg !4900
  %7 = load i32, i32* %uid, align 4, !dbg !4901
  %call7 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %6, i32 %7), !dbg !4902
  %8 = load i32, i32* %uid, align 4, !dbg !4903
  %call8 = call %struct.bitmap_head_def* @subtype_map_for_uid(i32 %8, i8 zeroext 0), !dbg !4904
  store %struct.bitmap_head_def* %call8, %struct.bitmap_head_def** %subtype_map, align 8, !dbg !4905
  %9 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4906
  %type9 = bitcast %union.tree_node* %9 to %struct.tree_type*, !dbg !4906
  %binfo10 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type9, i32 0, i32 17, !dbg !4906
  %10 = load %union.tree_node*, %union.tree_node** %binfo10, align 8, !dbg !4906
  %tobool11 = icmp ne %union.tree_node* %10, null, !dbg !4906
  br i1 %tobool11, label %if.then12, label %if.end23, !dbg !4908

if.then12:                                        ; preds = %if.end6
  %11 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4909
  %type13 = bitcast %union.tree_node* %11 to %struct.tree_type*, !dbg !4909
  %binfo14 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type13, i32 0, i32 17, !dbg !4909
  %12 = load %union.tree_node*, %union.tree_node** %binfo14, align 8, !dbg !4909
  store %union.tree_node* %12, %union.tree_node** %binfo, align 8, !dbg !4911
  store i32 0, i32* %i, align 4, !dbg !4912
  br label %for.cond, !dbg !4913

for.cond:                                         ; preds = %for.inc, %if.then12
  %13 = load %union.tree_node*, %union.tree_node** %binfo, align 8, !dbg !4914
  %binfo15 = bitcast %union.tree_node* %13 to %struct.tree_binfo*, !dbg !4914
  %base_binfos = getelementptr inbounds %struct.tree_binfo, %struct.tree_binfo* %binfo15, i32 0, i32 9, !dbg !4914
  %tobool16 = icmp ne %struct.VEC_tree_none* %base_binfos, null, !dbg !4914
  br i1 %tobool16, label %cond.true, label %cond.false, !dbg !4914

cond.true:                                        ; preds = %for.cond
  %14 = load %union.tree_node*, %union.tree_node** %binfo, align 8, !dbg !4914
  %binfo17 = bitcast %union.tree_node* %14 to %struct.tree_binfo*, !dbg !4914
  %base_binfos18 = getelementptr inbounds %struct.tree_binfo, %struct.tree_binfo* %binfo17, i32 0, i32 9, !dbg !4914
  %base = getelementptr inbounds %struct.VEC_tree_none, %struct.VEC_tree_none* %base_binfos18, i32 0, i32 0, !dbg !4914
  br label %cond.end, !dbg !4914

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !4914

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !4914
  %15 = load i32, i32* %i, align 4, !dbg !4914
  %call19 = call i32 @VEC_tree_base_iterate(%struct.VEC_tree_base* %cond, i32 %15, %union.tree_node** %base_binfo), !dbg !4914
  %tobool20 = icmp ne i32 %call19, 0, !dbg !4916
  br i1 %tobool20, label %for.body, label %for.end, !dbg !4916

for.body:                                         ; preds = %cond.end
  call void @llvm.dbg.declare(metadata %union.tree_node** %binfotype, metadata !4917, metadata !DIExpression()), !dbg !4919
  %16 = load %union.tree_node*, %union.tree_node** %base_binfo, align 8, !dbg !4920
  %common = bitcast %union.tree_node* %16 to %struct.tree_common*, !dbg !4920
  %type21 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !4920
  %17 = load %union.tree_node*, %union.tree_node** %type21, align 8, !dbg !4920
  store %union.tree_node* %17, %union.tree_node** %binfotype, align 8, !dbg !4919
  %18 = load %union.tree_node*, %union.tree_node** %binfotype, align 8, !dbg !4921
  %call22 = call %union.tree_node* @mark_type(%union.tree_node* %18, i32 1), !dbg !4922
  store %union.tree_node* %call22, %union.tree_node** %binfotype, align 8, !dbg !4923
  %19 = load %union.tree_node*, %union.tree_node** %binfotype, align 8, !dbg !4924
  call void @close_type_full_escape(%union.tree_node* %19), !dbg !4925
  br label %for.inc, !dbg !4926

for.inc:                                          ; preds = %for.body
  %20 = load i32, i32* %i, align 4, !dbg !4927
  %inc = add i32 %20, 1, !dbg !4927
  store i32 %inc, i32* %i, align 4, !dbg !4927
  br label %for.cond, !dbg !4928, !llvm.loop !4929

for.end:                                          ; preds = %cond.end
  br label %if.end23, !dbg !4930

if.end23:                                         ; preds = %for.end, %if.end6
  %21 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %subtype_map, align 8, !dbg !4931
  %tobool24 = icmp ne %struct.bitmap_head_def* %21, null, !dbg !4931
  br i1 %tobool24, label %if.then25, label %if.end34, !dbg !4933

if.then25:                                        ; preds = %if.end23
  %22 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %subtype_map, align 8, !dbg !4934
  call void @bmp_iter_set_init(%struct.bitmap_iterator* %bi, %struct.bitmap_head_def* %22, i32 0, i32* %i), !dbg !4934
  br label %for.cond26, !dbg !4934

for.cond26:                                       ; preds = %for.inc32, %if.then25
  %call27 = call zeroext i8 @bmp_iter_set(%struct.bitmap_iterator* %bi, i32* %i), !dbg !4936
  %tobool28 = icmp ne i8 %call27, 0, !dbg !4934
  br i1 %tobool28, label %for.body29, label %for.end33, !dbg !4934

for.body29:                                       ; preds = %for.cond26
  call void @llvm.dbg.declare(metadata %union.tree_node** %subtype, metadata !4938, metadata !DIExpression()), !dbg !4940
  %23 = load i32, i32* %i, align 4, !dbg !4941
  %call30 = call %union.tree_node* @type_for_uid(i32 %23), !dbg !4942
  store %union.tree_node* %call30, %union.tree_node** %subtype, align 8, !dbg !4940
  %24 = load %union.tree_node*, %union.tree_node** %subtype, align 8, !dbg !4943
  %call31 = call %union.tree_node* @mark_type(%union.tree_node* %24, i32 1), !dbg !4944
  store %union.tree_node* %call31, %union.tree_node** %subtype, align 8, !dbg !4945
  %25 = load %union.tree_node*, %union.tree_node** %subtype, align 8, !dbg !4946
  call void @close_type_full_escape(%union.tree_node* %25), !dbg !4947
  br label %for.inc32, !dbg !4948

for.inc32:                                        ; preds = %for.body29
  call void @bmp_iter_next(%struct.bitmap_iterator* %bi, i32* %i), !dbg !4936
  br label %for.cond26, !dbg !4936, !llvm.loop !4949

for.end33:                                        ; preds = %for.cond26
  br label %if.end34, !dbg !4950

if.end34:                                         ; preds = %for.end33, %if.end23
  %26 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4951
  %type35 = bitcast %union.tree_node* %26 to %struct.tree_type*, !dbg !4951
  %values = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type35, i32 0, i32 1, !dbg !4951
  %27 = load %union.tree_node*, %union.tree_node** %values, align 8, !dbg !4951
  store %union.tree_node* %27, %union.tree_node** %field, align 8, !dbg !4953
  br label %for.cond36, !dbg !4954

for.cond36:                                       ; preds = %for.inc49, %if.end34
  %28 = load %union.tree_node*, %union.tree_node** %field, align 8, !dbg !4955
  %tobool37 = icmp ne %union.tree_node* %28, null, !dbg !4957
  br i1 %tobool37, label %for.body38, label %for.end51, !dbg !4957

for.body38:                                       ; preds = %for.cond36
  call void @llvm.dbg.declare(metadata %union.tree_node** %field_type, metadata !4958, metadata !DIExpression()), !dbg !4960
  %29 = load %union.tree_node*, %union.tree_node** %field, align 8, !dbg !4961
  %base39 = bitcast %union.tree_node* %29 to %struct.tree_base*, !dbg !4961
  %30 = bitcast %struct.tree_base* %base39 to i64*, !dbg !4961
  %bf.load = load i64, i64* %30, align 8, !dbg !4961
  %bf.clear = and i64 %bf.load, 65535, !dbg !4961
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !4961
  %cmp = icmp ne i32 %bf.cast, 31, !dbg !4963
  br i1 %cmp, label %if.then40, label %if.end41, !dbg !4964

if.then40:                                        ; preds = %for.body38
  br label %for.inc49, !dbg !4965

if.end41:                                         ; preds = %for.body38
  %31 = load %union.tree_node*, %union.tree_node** %field, align 8, !dbg !4966
  %common42 = bitcast %union.tree_node* %31 to %struct.tree_common*, !dbg !4966
  %type43 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common42, i32 0, i32 2, !dbg !4966
  %32 = load %union.tree_node*, %union.tree_node** %type43, align 8, !dbg !4966
  store %union.tree_node* %32, %union.tree_node** %field_type, align 8, !dbg !4967
  %33 = load %union.tree_node*, %union.tree_node** %field_type, align 8, !dbg !4968
  %call44 = call i32 @ipa_type_escape_star_count_of_interesting_or_array_type(%union.tree_node* %33), !dbg !4970
  %cmp45 = icmp sge i32 %call44, 0, !dbg !4971
  br i1 %cmp45, label %if.then46, label %if.end48, !dbg !4972

if.then46:                                        ; preds = %if.end41
  %34 = load %union.tree_node*, %union.tree_node** %field_type, align 8, !dbg !4973
  %call47 = call %union.tree_node* @mark_type(%union.tree_node* %34, i32 1), !dbg !4975
  store %union.tree_node* %call47, %union.tree_node** %field_type, align 8, !dbg !4976
  %35 = load %union.tree_node*, %union.tree_node** %field_type, align 8, !dbg !4977
  call void @close_type_full_escape(%union.tree_node* %35), !dbg !4978
  br label %if.end48, !dbg !4979

if.end48:                                         ; preds = %if.then46, %if.end41
  br label %for.inc49, !dbg !4980

for.inc49:                                        ; preds = %if.end48, %if.then40
  %36 = load %union.tree_node*, %union.tree_node** %field, align 8, !dbg !4981
  %common50 = bitcast %union.tree_node* %36 to %struct.tree_common*, !dbg !4981
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common50, i32 0, i32 1, !dbg !4981
  %37 = load %union.tree_node*, %union.tree_node** %chain, align 8, !dbg !4981
  store %union.tree_node* %37, %union.tree_node** %field, align 8, !dbg !4982
  br label %for.cond36, !dbg !4983, !llvm.loop !4984

for.end51:                                        ; preds = %for.cond36
  %38 = load %struct.splay_tree_s*, %struct.splay_tree_s** @uid_to_addressof_up_map, align 8, !dbg !4986
  %39 = load i32, i32* %uid, align 4, !dbg !4987
  %conv = sext i32 %39 to i64, !dbg !4988
  %call52 = call %struct.splay_tree_node_s* @splay_tree_lookup(%struct.splay_tree_s* %38, i64 %conv), !dbg !4989
  store %struct.splay_tree_node_s* %call52, %struct.splay_tree_node_s** %address_result, align 8, !dbg !4990
  %40 = load %struct.splay_tree_node_s*, %struct.splay_tree_node_s** %address_result, align 8, !dbg !4991
  %tobool53 = icmp ne %struct.splay_tree_node_s* %40, null, !dbg !4991
  br i1 %tobool53, label %if.then54, label %if.end62, !dbg !4993

if.then54:                                        ; preds = %for.end51
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %containing_classes, metadata !4994, metadata !DIExpression()), !dbg !4996
  %41 = load %struct.splay_tree_node_s*, %struct.splay_tree_node_s** %address_result, align 8, !dbg !4997
  %value = getelementptr inbounds %struct.splay_tree_node_s, %struct.splay_tree_node_s* %41, i32 0, i32 1, !dbg !4998
  %42 = load i64, i64* %value, align 8, !dbg !4998
  %43 = inttoptr i64 %42 to %struct.bitmap_head_def*, !dbg !4999
  store %struct.bitmap_head_def* %43, %struct.bitmap_head_def** %containing_classes, align 8, !dbg !4996
  %44 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %containing_classes, align 8, !dbg !5000
  call void @bmp_iter_set_init(%struct.bitmap_iterator* %bi, %struct.bitmap_head_def* %44, i32 0, i32* %i), !dbg !5000
  br label %for.cond55, !dbg !5000

for.cond55:                                       ; preds = %for.inc60, %if.then54
  %call56 = call zeroext i8 @bmp_iter_set(%struct.bitmap_iterator* %bi, i32* %i), !dbg !5002
  %tobool57 = icmp ne i8 %call56, 0, !dbg !5000
  br i1 %tobool57, label %for.body58, label %for.end61, !dbg !5000

for.body58:                                       ; preds = %for.cond55
  %45 = load i32, i32* %i, align 4, !dbg !5004
  %call59 = call %union.tree_node* @type_for_uid(i32 %45), !dbg !5006
  call void @close_type_full_escape(%union.tree_node* %call59), !dbg !5007
  br label %for.inc60, !dbg !5008

for.inc60:                                        ; preds = %for.body58
  call void @bmp_iter_next(%struct.bitmap_iterator* %bi, i32* %i), !dbg !5002
  br label %for.cond55, !dbg !5002, !llvm.loop !5009

for.end61:                                        ; preds = %for.cond55
  br label %if.end62, !dbg !5011

if.end62:                                         ; preds = %if.then, %if.then5, %for.end61, %for.end51
  ret void, !dbg !5012
}

declare dso_local %struct.splay_tree_node_s* @splay_tree_min(%struct.splay_tree_s*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.bitmap_head_def* @close_addressof_down(i32 %uid) #0 !dbg !5013 {
entry:
  %retval = alloca %struct.bitmap_head_def*, align 8
  %uid.addr = alloca i32, align 4
  %bi = alloca %struct.bitmap_iterator, align 8
  %result = alloca %struct.splay_tree_node_s*, align 8
  %map = alloca %struct.bitmap_head_def*, align 8
  %new_map = alloca %struct.bitmap_head_def*, align 8
  %i = alloca i32, align 4
  %submap = alloca %struct.bitmap_head_def*, align 8
  store i32 %uid, i32* %uid.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %uid.addr, metadata !5016, metadata !DIExpression()), !dbg !5017
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator* %bi, metadata !5018, metadata !DIExpression()), !dbg !5019
  call void @llvm.dbg.declare(metadata %struct.splay_tree_node_s** %result, metadata !5020, metadata !DIExpression()), !dbg !5021
  %0 = load %struct.splay_tree_s*, %struct.splay_tree_s** @uid_to_addressof_down_map, align 8, !dbg !5022
  %1 = load i32, i32* %uid.addr, align 4, !dbg !5023
  %conv = sext i32 %1 to i64, !dbg !5024
  %call = call %struct.splay_tree_node_s* @splay_tree_lookup(%struct.splay_tree_s* %0, i64 %conv), !dbg !5025
  store %struct.splay_tree_node_s* %call, %struct.splay_tree_node_s** %result, align 8, !dbg !5021
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %map, metadata !5026, metadata !DIExpression()), !dbg !5027
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** %map, align 8, !dbg !5027
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %new_map, metadata !5028, metadata !DIExpression()), !dbg !5029
  call void @llvm.dbg.declare(metadata i32* %i, metadata !5030, metadata !DIExpression()), !dbg !5031
  %2 = load %struct.splay_tree_node_s*, %struct.splay_tree_node_s** %result, align 8, !dbg !5032
  %tobool = icmp ne %struct.splay_tree_node_s* %2, null, !dbg !5032
  br i1 %tobool, label %if.then, label %if.else, !dbg !5034

if.then:                                          ; preds = %entry
  %3 = load %struct.splay_tree_node_s*, %struct.splay_tree_node_s** %result, align 8, !dbg !5035
  %value = getelementptr inbounds %struct.splay_tree_node_s, %struct.splay_tree_node_s* %3, i32 0, i32 1, !dbg !5036
  %4 = load i64, i64* %value, align 8, !dbg !5036
  %5 = inttoptr i64 %4 to %struct.bitmap_head_def*, !dbg !5037
  store %struct.bitmap_head_def* %5, %struct.bitmap_head_def** %map, align 8, !dbg !5038
  br label %if.end, !dbg !5039

if.else:                                          ; preds = %entry
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** %retval, align 8, !dbg !5040
  br label %return, !dbg !5040

if.end:                                           ; preds = %if.then
  %6 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @been_there_done_that, align 8, !dbg !5041
  %7 = load i32, i32* %uid.addr, align 4, !dbg !5043
  %call1 = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %6, i32 %7), !dbg !5044
  %tobool2 = icmp ne i32 %call1, 0, !dbg !5044
  br i1 %tobool2, label %if.then3, label %if.end4, !dbg !5045

if.then3:                                         ; preds = %if.end
  %8 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %map, align 8, !dbg !5046
  store %struct.bitmap_head_def* %8, %struct.bitmap_head_def** %retval, align 8, !dbg !5047
  br label %return, !dbg !5047

if.end4:                                          ; preds = %if.end
  %9 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @been_there_done_that, align 8, !dbg !5048
  %10 = load i32, i32* %uid.addr, align 4, !dbg !5049
  %call5 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %9, i32 %10), !dbg !5050
  %11 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @global_types_full_escape, align 8, !dbg !5051
  %12 = load i32, i32* %uid.addr, align 4, !dbg !5053
  %call6 = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %11, i32 %12), !dbg !5054
  %tobool7 = icmp ne i32 %call6, 0, !dbg !5054
  br i1 %tobool7, label %if.then8, label %if.end10, !dbg !5055

if.then8:                                         ; preds = %if.end4
  %13 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %map, align 8, !dbg !5056
  call void @bitmap_obstack_free(%struct.bitmap_head_def* %13), !dbg !5056
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** %map, align 8, !dbg !5056
  %14 = load %struct.splay_tree_s*, %struct.splay_tree_s** @uid_to_addressof_down_map, align 8, !dbg !5058
  %15 = load i32, i32* %uid.addr, align 4, !dbg !5059
  %conv9 = sext i32 %15 to i64, !dbg !5060
  call void @splay_tree_remove(%struct.splay_tree_s* %14, i64 %conv9), !dbg !5061
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** %retval, align 8, !dbg !5062
  br label %return, !dbg !5062

if.end10:                                         ; preds = %if.end4
  %call11 = call %struct.bitmap_head_def* @bitmap_obstack_alloc_stat(%struct.bitmap_obstack* @ipa_obstack), !dbg !5063
  store %struct.bitmap_head_def* %call11, %struct.bitmap_head_def** %new_map, align 8, !dbg !5064
  %16 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %map, align 8, !dbg !5065
  call void @bmp_iter_set_init(%struct.bitmap_iterator* %bi, %struct.bitmap_head_def* %16, i32 0, i32* %i), !dbg !5065
  br label %for.cond, !dbg !5065

for.cond:                                         ; preds = %for.inc, %if.end10
  %call12 = call zeroext i8 @bmp_iter_set(%struct.bitmap_iterator* %bi, i32* %i), !dbg !5067
  %tobool13 = icmp ne i8 %call12, 0, !dbg !5065
  br i1 %tobool13, label %for.body, label %for.end, !dbg !5065

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %submap, metadata !5069, metadata !DIExpression()), !dbg !5071
  %17 = load i32, i32* %i, align 4, !dbg !5072
  %call14 = call %struct.bitmap_head_def* @close_addressof_down(i32 %17), !dbg !5073
  store %struct.bitmap_head_def* %call14, %struct.bitmap_head_def** %submap, align 8, !dbg !5071
  %18 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %new_map, align 8, !dbg !5074
  %19 = load i32, i32* %i, align 4, !dbg !5075
  %call15 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %18, i32 %19), !dbg !5076
  %20 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %submap, align 8, !dbg !5077
  %tobool16 = icmp ne %struct.bitmap_head_def* %20, null, !dbg !5077
  br i1 %tobool16, label %if.then17, label %if.end19, !dbg !5079

if.then17:                                        ; preds = %for.body
  %21 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %new_map, align 8, !dbg !5080
  %22 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %submap, align 8, !dbg !5081
  %call18 = call zeroext i8 @bitmap_ior_into(%struct.bitmap_head_def* %21, %struct.bitmap_head_def* %22), !dbg !5082
  br label %if.end19, !dbg !5082

if.end19:                                         ; preds = %if.then17, %for.body
  br label %for.inc, !dbg !5083

for.inc:                                          ; preds = %if.end19
  call void @bmp_iter_next(%struct.bitmap_iterator* %bi, i32* %i), !dbg !5067
  br label %for.cond, !dbg !5067, !llvm.loop !5084

for.end:                                          ; preds = %for.cond
  %23 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %new_map, align 8, !dbg !5086
  %24 = ptrtoint %struct.bitmap_head_def* %23 to i64, !dbg !5087
  %25 = load %struct.splay_tree_node_s*, %struct.splay_tree_node_s** %result, align 8, !dbg !5088
  %value20 = getelementptr inbounds %struct.splay_tree_node_s, %struct.splay_tree_node_s* %25, i32 0, i32 1, !dbg !5089
  store i64 %24, i64* %value20, align 8, !dbg !5090
  %26 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %map, align 8, !dbg !5091
  call void @bitmap_obstack_free(%struct.bitmap_head_def* %26), !dbg !5091
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** %map, align 8, !dbg !5091
  %27 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %new_map, align 8, !dbg !5092
  store %struct.bitmap_head_def* %27, %struct.bitmap_head_def** %retval, align 8, !dbg !5093
  br label %return, !dbg !5093

return:                                           ; preds = %for.end, %if.then8, %if.then3, %if.else
  %28 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %retval, align 8, !dbg !5094
  ret %struct.bitmap_head_def* %28, !dbg !5094
}

declare dso_local %struct.splay_tree_node_s* @splay_tree_successor(%struct.splay_tree_s*, i64) #2

declare dso_local void @splay_tree_remove(%struct.splay_tree_s*, i64) #2

declare dso_local zeroext i8 @bitmap_clear_bit(%struct.bitmap_head_def*, i32) #2

declare dso_local i32 @fprintf(%struct._IO_FILE*, i8*, ...) #2

declare dso_local void @print_generic_expr(%struct._IO_FILE*, %union.tree_node*, i32) #2

declare dso_local void @bitmap_obstack_free(%struct.bitmap_head_def*) #2

declare dso_local void @splay_tree_delete(%struct.splay_tree_s*) #2

declare dso_local void @bitmap_obstack_initialize(%struct.bitmap_obstack*) #2

declare dso_local %struct.splay_tree_s* @splay_tree_new(i32 (i64, i64)*, void (i64)*, void (i64)*) #2

declare dso_local i32 @splay_tree_compare_ints(i64, i64) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @compare_type_brand(i64 %sk1, i64 %sk2) #0 !dbg !5095 {
entry:
  %retval = alloca i32, align 4
  %sk1.addr = alloca i64, align 8
  %sk2.addr = alloca i64, align 8
  %k1 = alloca %struct.type_brand_s*, align 8
  %k2 = alloca %struct.type_brand_s*, align 8
  %value = alloca i32, align 4
  store i64 %sk1, i64* %sk1.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %sk1.addr, metadata !5096, metadata !DIExpression()), !dbg !5097
  store i64 %sk2, i64* %sk2.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %sk2.addr, metadata !5098, metadata !DIExpression()), !dbg !5099
  call void @llvm.dbg.declare(metadata %struct.type_brand_s** %k1, metadata !5100, metadata !DIExpression()), !dbg !5101
  %0 = load i64, i64* %sk1.addr, align 8, !dbg !5102
  %1 = inttoptr i64 %0 to %struct.type_brand_s*, !dbg !5103
  store %struct.type_brand_s* %1, %struct.type_brand_s** %k1, align 8, !dbg !5101
  call void @llvm.dbg.declare(metadata %struct.type_brand_s** %k2, metadata !5104, metadata !DIExpression()), !dbg !5105
  %2 = load i64, i64* %sk2.addr, align 8, !dbg !5106
  %3 = inttoptr i64 %2 to %struct.type_brand_s*, !dbg !5107
  store %struct.type_brand_s* %3, %struct.type_brand_s** %k2, align 8, !dbg !5105
  call void @llvm.dbg.declare(metadata i32* %value, metadata !5108, metadata !DIExpression()), !dbg !5109
  %4 = load %struct.type_brand_s*, %struct.type_brand_s** %k1, align 8, !dbg !5110
  %name = getelementptr inbounds %struct.type_brand_s, %struct.type_brand_s* %4, i32 0, i32 0, !dbg !5111
  %5 = load i8*, i8** %name, align 8, !dbg !5111
  %6 = load %struct.type_brand_s*, %struct.type_brand_s** %k2, align 8, !dbg !5112
  %name1 = getelementptr inbounds %struct.type_brand_s, %struct.type_brand_s* %6, i32 0, i32 0, !dbg !5113
  %7 = load i8*, i8** %name1, align 8, !dbg !5113
  %call = call i32 @strcmp(i8* %5, i8* %7), !dbg !5114
  store i32 %call, i32* %value, align 4, !dbg !5109
  %8 = load i32, i32* %value, align 4, !dbg !5115
  %cmp = icmp eq i32 %8, 0, !dbg !5117
  br i1 %cmp, label %if.then, label %if.else, !dbg !5118

if.then:                                          ; preds = %entry
  %9 = load %struct.type_brand_s*, %struct.type_brand_s** %k2, align 8, !dbg !5119
  %seq = getelementptr inbounds %struct.type_brand_s, %struct.type_brand_s* %9, i32 0, i32 1, !dbg !5120
  %10 = load i32, i32* %seq, align 8, !dbg !5120
  %11 = load %struct.type_brand_s*, %struct.type_brand_s** %k1, align 8, !dbg !5121
  %seq2 = getelementptr inbounds %struct.type_brand_s, %struct.type_brand_s* %11, i32 0, i32 1, !dbg !5122
  %12 = load i32, i32* %seq2, align 8, !dbg !5122
  %sub = sub nsw i32 %10, %12, !dbg !5123
  store i32 %sub, i32* %retval, align 4, !dbg !5124
  br label %return, !dbg !5124

if.else:                                          ; preds = %entry
  %13 = load i32, i32* %value, align 4, !dbg !5125
  store i32 %13, i32* %retval, align 4, !dbg !5126
  br label %return, !dbg !5126

return:                                           ; preds = %if.else, %if.then
  %14 = load i32, i32* %retval, align 4, !dbg !5127
  ret i32 %14, !dbg !5127
}

declare dso_local i32 @splay_tree_compare_pointers(i64, i64) #2

declare dso_local i32 @strcmp(i8*, i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @mark_interesting_type(%union.tree_node* %type, i32 %escape_status) #0 !dbg !5128 {
entry:
  %type.addr = alloca %union.tree_node*, align 8
  %escape_status.addr = alloca i32, align 4
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %type.addr, metadata !5131, metadata !DIExpression()), !dbg !5132
  store i32 %escape_status, i32* %escape_status.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %escape_status.addr, metadata !5133, metadata !DIExpression()), !dbg !5134
  %0 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5135
  %tobool = icmp ne %union.tree_node* %0, null, !dbg !5135
  br i1 %tobool, label %if.end, label %if.then, !dbg !5137

if.then:                                          ; preds = %entry
  br label %if.end13, !dbg !5138

if.end:                                           ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5139
  %call = call i32 @ipa_type_escape_star_count_of_interesting_type(%union.tree_node* %1), !dbg !5141
  %cmp = icmp sge i32 %call, 0, !dbg !5142
  br i1 %cmp, label %if.then1, label %if.end13, !dbg !5143

if.then1:                                         ; preds = %if.end
  %2 = load i32, i32* %escape_status.addr, align 4, !dbg !5144
  %cmp2 = icmp eq i32 %2, 0, !dbg !5147
  br i1 %cmp2, label %land.lhs.true, label %if.else, !dbg !5148

land.lhs.true:                                    ; preds = %if.then1
  %3 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5149
  %base = bitcast %union.tree_node* %3 to %struct.tree_base*, !dbg !5149
  %4 = bitcast %struct.tree_base* %base to i64*, !dbg !5149
  %bf.load = load i64, i64* %4, align 8, !dbg !5149
  %bf.clear = and i64 %bf.load, 65535, !dbg !5149
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !5149
  %cmp3 = icmp eq i32 %bf.cast, 10, !dbg !5149
  br i1 %cmp3, label %if.then9, label %lor.lhs.false, !dbg !5149

lor.lhs.false:                                    ; preds = %land.lhs.true
  %5 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5149
  %base4 = bitcast %union.tree_node* %5 to %struct.tree_base*, !dbg !5149
  %6 = bitcast %struct.tree_base* %base4 to i64*, !dbg !5149
  %bf.load5 = load i64, i64* %6, align 8, !dbg !5149
  %bf.clear6 = and i64 %bf.load5, 65535, !dbg !5149
  %bf.cast7 = trunc i64 %bf.clear6 to i32, !dbg !5149
  %cmp8 = icmp eq i32 %bf.cast7, 12, !dbg !5149
  br i1 %cmp8, label %if.then9, label %if.else, !dbg !5150

if.then9:                                         ; preds = %lor.lhs.false, %land.lhs.true
  %7 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5151
  %call10 = call %union.tree_node* @mark_type(%union.tree_node* %7, i32 1), !dbg !5152
  br label %if.end12, !dbg !5152

if.else:                                          ; preds = %lor.lhs.false, %if.then1
  %8 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5153
  %9 = load i32, i32* %escape_status.addr, align 4, !dbg !5154
  %call11 = call %union.tree_node* @mark_type(%union.tree_node* %8, i32 %9), !dbg !5155
  br label %if.end12

if.end12:                                         ; preds = %if.else, %if.then9
  br label %if.end13, !dbg !5156

if.end13:                                         ; preds = %if.then, %if.end12, %if.end
  ret void, !dbg !5157
}

; Function Attrs: noinline nounwind uwtable
define internal void @check_tree(%union.tree_node* %t) #0 !dbg !5158 {
entry:
  %t.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %t, %union.tree_node** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %t.addr, metadata !5159, metadata !DIExpression()), !dbg !5160
  br label %while.cond, !dbg !5161

while.cond:                                       ; preds = %if.end, %entry
  %0 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !5162
  %call = call zeroext i8 @handled_component_p(%union.tree_node* %0), !dbg !5163
  %tobool = icmp ne i8 %call, 0, !dbg !5161
  br i1 %tobool, label %while.body, label %while.end, !dbg !5161

while.body:                                       ; preds = %while.cond
  %1 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !5164
  %base = bitcast %union.tree_node* %1 to %struct.tree_base*, !dbg !5164
  %2 = bitcast %struct.tree_base* %base to i64*, !dbg !5164
  %bf.load = load i64, i64* %2, align 8, !dbg !5164
  %bf.clear = and i64 %bf.load, 65535, !dbg !5164
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !5164
  %cmp = icmp eq i32 %bf.cast, 45, !dbg !5167
  br i1 %cmp, label %if.then, label %if.end, !dbg !5168

if.then:                                          ; preds = %while.body
  %3 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !5169
  %exp = bitcast %union.tree_node* %3 to %struct.tree_exp*, !dbg !5169
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !5169
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 1, !dbg !5169
  %4 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !5169
  call void @check_operand(%union.tree_node* %4), !dbg !5170
  br label %if.end, !dbg !5170

if.end:                                           ; preds = %if.then, %while.body
  %5 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !5171
  %exp1 = bitcast %union.tree_node* %5 to %struct.tree_exp*, !dbg !5171
  %operands2 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp1, i32 0, i32 3, !dbg !5171
  %arrayidx3 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands2, i64 0, i64 0, !dbg !5171
  %6 = load %union.tree_node*, %union.tree_node** %arrayidx3, align 8, !dbg !5171
  store %union.tree_node* %6, %union.tree_node** %t.addr, align 8, !dbg !5172
  br label %while.cond, !dbg !5161, !llvm.loop !5173

while.end:                                        ; preds = %while.cond
  %7 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !5175
  %base4 = bitcast %union.tree_node* %7 to %struct.tree_base*, !dbg !5175
  %8 = bitcast %struct.tree_base* %base4 to i64*, !dbg !5175
  %bf.load5 = load i64, i64* %8, align 8, !dbg !5175
  %bf.clear6 = and i64 %bf.load5, 65535, !dbg !5175
  %bf.cast7 = trunc i64 %bf.clear6 to i32, !dbg !5175
  %cmp8 = icmp eq i32 %bf.cast7, 47, !dbg !5175
  br i1 %cmp8, label %if.then20, label %lor.lhs.false, !dbg !5175

lor.lhs.false:                                    ; preds = %while.end
  %9 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !5175
  %base9 = bitcast %union.tree_node* %9 to %struct.tree_base*, !dbg !5175
  %10 = bitcast %struct.tree_base* %base9 to i64*, !dbg !5175
  %bf.load10 = load i64, i64* %10, align 8, !dbg !5175
  %bf.clear11 = and i64 %bf.load10, 65535, !dbg !5175
  %bf.cast12 = trunc i64 %bf.clear11 to i32, !dbg !5175
  %cmp13 = icmp eq i32 %bf.cast12, 48, !dbg !5175
  br i1 %cmp13, label %if.then20, label %lor.lhs.false14, !dbg !5175

lor.lhs.false14:                                  ; preds = %lor.lhs.false
  %11 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !5175
  %base15 = bitcast %union.tree_node* %11 to %struct.tree_base*, !dbg !5175
  %12 = bitcast %struct.tree_base* %base15 to i64*, !dbg !5175
  %bf.load16 = load i64, i64* %12, align 8, !dbg !5175
  %bf.clear17 = and i64 %bf.load16, 65535, !dbg !5175
  %bf.cast18 = trunc i64 %bf.clear17 to i32, !dbg !5175
  %cmp19 = icmp eq i32 %bf.cast18, 49, !dbg !5175
  br i1 %cmp19, label %if.then20, label %if.end24, !dbg !5177

if.then20:                                        ; preds = %lor.lhs.false14, %lor.lhs.false, %while.end
  %13 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !5178
  %exp21 = bitcast %union.tree_node* %13 to %struct.tree_exp*, !dbg !5178
  %operands22 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp21, i32 0, i32 3, !dbg !5178
  %arrayidx23 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands22, i64 0, i64 0, !dbg !5178
  %14 = load %union.tree_node*, %union.tree_node** %arrayidx23, align 8, !dbg !5178
  call void @check_tree(%union.tree_node* %14), !dbg !5179
  br label %if.end24, !dbg !5179

if.end24:                                         ; preds = %if.then20, %lor.lhs.false14
  %15 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !5180
  %base25 = bitcast %union.tree_node* %15 to %struct.tree_base*, !dbg !5180
  %16 = bitcast %struct.tree_base* %base25 to i64*, !dbg !5180
  %bf.load26 = load i64, i64* %16, align 8, !dbg !5180
  %bf.clear27 = and i64 %bf.load26, 65535, !dbg !5180
  %bf.cast28 = trunc i64 %bf.clear27 to i32, !dbg !5180
  %cmp29 = icmp eq i32 %bf.cast28, 32, !dbg !5180
  br i1 %cmp29, label %if.then75, label %lor.lhs.false30, !dbg !5180

lor.lhs.false30:                                  ; preds = %if.end24
  %17 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !5180
  %base31 = bitcast %union.tree_node* %17 to %struct.tree_base*, !dbg !5180
  %18 = bitcast %struct.tree_base* %base31 to i64*, !dbg !5180
  %bf.load32 = load i64, i64* %18, align 8, !dbg !5180
  %bf.clear33 = and i64 %bf.load32, 65535, !dbg !5180
  %bf.cast34 = trunc i64 %bf.clear33 to i32, !dbg !5180
  %cmp35 = icmp eq i32 %bf.cast34, 34, !dbg !5180
  br i1 %cmp35, label %if.then75, label %lor.lhs.false36, !dbg !5180

lor.lhs.false36:                                  ; preds = %lor.lhs.false30
  %19 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !5180
  %base37 = bitcast %union.tree_node* %19 to %struct.tree_base*, !dbg !5180
  %20 = bitcast %struct.tree_base* %base37 to i64*, !dbg !5180
  %bf.load38 = load i64, i64* %20, align 8, !dbg !5180
  %bf.clear39 = and i64 %bf.load38, 65535, !dbg !5180
  %bf.cast40 = trunc i64 %bf.clear39 to i32, !dbg !5180
  %cmp41 = icmp eq i32 %bf.cast40, 36, !dbg !5180
  br i1 %cmp41, label %if.then75, label %lor.lhs.false42, !dbg !5180

lor.lhs.false42:                                  ; preds = %lor.lhs.false36
  %21 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !5180
  %base43 = bitcast %union.tree_node* %21 to %struct.tree_base*, !dbg !5180
  %22 = bitcast %struct.tree_base* %base43 to i64*, !dbg !5180
  %bf.load44 = load i64, i64* %22, align 8, !dbg !5180
  %bf.clear45 = and i64 %bf.load44, 65535, !dbg !5180
  %bf.cast46 = trunc i64 %bf.clear45 to i32, !dbg !5180
  %cmp47 = icmp eq i32 %bf.cast46, 141, !dbg !5180
  br i1 %cmp47, label %land.lhs.true, label %lor.lhs.false69, !dbg !5180

land.lhs.true:                                    ; preds = %lor.lhs.false42
  %23 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !5180
  %ssa_name = bitcast %union.tree_node* %23 to %struct.tree_ssa_name*, !dbg !5180
  %var = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 1, !dbg !5180
  %24 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !5180
  %base48 = bitcast %union.tree_node* %24 to %struct.tree_base*, !dbg !5180
  %25 = bitcast %struct.tree_base* %base48 to i64*, !dbg !5180
  %bf.load49 = load i64, i64* %25, align 8, !dbg !5180
  %bf.clear50 = and i64 %bf.load49, 65535, !dbg !5180
  %bf.cast51 = trunc i64 %bf.clear50 to i32, !dbg !5180
  %cmp52 = icmp eq i32 %bf.cast51, 32, !dbg !5180
  br i1 %cmp52, label %if.then75, label %lor.lhs.false53, !dbg !5180

lor.lhs.false53:                                  ; preds = %land.lhs.true
  %26 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !5180
  %ssa_name54 = bitcast %union.tree_node* %26 to %struct.tree_ssa_name*, !dbg !5180
  %var55 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name54, i32 0, i32 1, !dbg !5180
  %27 = load %union.tree_node*, %union.tree_node** %var55, align 8, !dbg !5180
  %base56 = bitcast %union.tree_node* %27 to %struct.tree_base*, !dbg !5180
  %28 = bitcast %struct.tree_base* %base56 to i64*, !dbg !5180
  %bf.load57 = load i64, i64* %28, align 8, !dbg !5180
  %bf.clear58 = and i64 %bf.load57, 65535, !dbg !5180
  %bf.cast59 = trunc i64 %bf.clear58 to i32, !dbg !5180
  %cmp60 = icmp eq i32 %bf.cast59, 34, !dbg !5180
  br i1 %cmp60, label %if.then75, label %lor.lhs.false61, !dbg !5180

lor.lhs.false61:                                  ; preds = %lor.lhs.false53
  %29 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !5180
  %ssa_name62 = bitcast %union.tree_node* %29 to %struct.tree_ssa_name*, !dbg !5180
  %var63 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name62, i32 0, i32 1, !dbg !5180
  %30 = load %union.tree_node*, %union.tree_node** %var63, align 8, !dbg !5180
  %base64 = bitcast %union.tree_node* %30 to %struct.tree_base*, !dbg !5180
  %31 = bitcast %struct.tree_base* %base64 to i64*, !dbg !5180
  %bf.load65 = load i64, i64* %31, align 8, !dbg !5180
  %bf.clear66 = and i64 %bf.load65, 65535, !dbg !5180
  %bf.cast67 = trunc i64 %bf.clear66 to i32, !dbg !5180
  %cmp68 = icmp eq i32 %bf.cast67, 36, !dbg !5180
  br i1 %cmp68, label %if.then75, label %lor.lhs.false69, !dbg !5182

lor.lhs.false69:                                  ; preds = %lor.lhs.false61, %lor.lhs.false42
  %32 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !5183
  %base70 = bitcast %union.tree_node* %32 to %struct.tree_base*, !dbg !5183
  %33 = bitcast %struct.tree_base* %base70 to i64*, !dbg !5183
  %bf.load71 = load i64, i64* %33, align 8, !dbg !5183
  %bf.clear72 = and i64 %bf.load71, 65535, !dbg !5183
  %bf.cast73 = trunc i64 %bf.clear72 to i32, !dbg !5183
  %cmp74 = icmp eq i32 %bf.cast73, 29, !dbg !5184
  br i1 %cmp74, label %if.then75, label %if.end88, !dbg !5185

if.then75:                                        ; preds = %lor.lhs.false69, %lor.lhs.false61, %lor.lhs.false53, %land.lhs.true, %lor.lhs.false36, %lor.lhs.false30, %if.end24
  %34 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !5186
  call void @check_operand(%union.tree_node* %34), !dbg !5188
  %35 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !5189
  %base76 = bitcast %union.tree_node* %35 to %struct.tree_base*, !dbg !5189
  %36 = bitcast %struct.tree_base* %base76 to i64*, !dbg !5189
  %bf.load77 = load i64, i64* %36, align 8, !dbg !5189
  %bf.clear78 = and i64 %bf.load77, 65535, !dbg !5189
  %bf.cast79 = trunc i64 %bf.clear78 to i32, !dbg !5189
  %idxprom = sext i32 %bf.cast79 to i64, !dbg !5189
  %arrayidx80 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !5189
  %37 = load i32, i32* %arrayidx80, align 4, !dbg !5189
  %cmp81 = icmp eq i32 %37, 3, !dbg !5189
  br i1 %cmp81, label %land.lhs.true82, label %if.end87, !dbg !5191

land.lhs.true82:                                  ; preds = %if.then75
  %38 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !5192
  %decl_common = bitcast %union.tree_node* %38 to %struct.tree_decl_common*, !dbg !5192
  %initial = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 5, !dbg !5192
  %39 = load %union.tree_node*, %union.tree_node** %initial, align 8, !dbg !5192
  %tobool83 = icmp ne %union.tree_node* %39, null, !dbg !5192
  br i1 %tobool83, label %if.then84, label %if.end87, !dbg !5193

if.then84:                                        ; preds = %land.lhs.true82
  %40 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !5194
  %decl_common85 = bitcast %union.tree_node* %40 to %struct.tree_decl_common*, !dbg !5194
  %initial86 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common85, i32 0, i32 5, !dbg !5194
  %41 = load %union.tree_node*, %union.tree_node** %initial86, align 8, !dbg !5194
  call void @check_tree(%union.tree_node* %41), !dbg !5195
  br label %if.end87, !dbg !5195

if.end87:                                         ; preds = %if.then84, %land.lhs.true82, %if.then75
  br label %if.end88, !dbg !5196

if.end88:                                         ; preds = %if.end87, %lor.lhs.false69
  ret void, !dbg !5197
}

; Function Attrs: noinline nounwind uwtable
define internal void @check_operand(%union.tree_node* %t) #0 !dbg !5198 {
entry:
  %t.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %t, %union.tree_node** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %t.addr, metadata !5199, metadata !DIExpression()), !dbg !5200
  %0 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !5201
  %tobool = icmp ne %union.tree_node* %0, null, !dbg !5201
  br i1 %tobool, label %if.end, label %if.then, !dbg !5203

if.then:                                          ; preds = %entry
  br label %if.end9, !dbg !5204

if.end:                                           ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !5205
  %base = bitcast %union.tree_node* %1 to %struct.tree_base*, !dbg !5205
  %2 = bitcast %struct.tree_base* %base to i64*, !dbg !5205
  %bf.load = load i64, i64* %2, align 8, !dbg !5205
  %bf.clear = and i64 %bf.load, 65535, !dbg !5205
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !5205
  %cmp = icmp eq i32 %bf.cast, 29, !dbg !5207
  br i1 %cmp, label %if.then1, label %if.else, !dbg !5208

if.then1:                                         ; preds = %if.end
  %3 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !5209
  call void @check_function_parameter_and_return_types(%union.tree_node* %3, i8 zeroext 1), !dbg !5210
  br label %if.end9, !dbg !5210

if.else:                                          ; preds = %if.end
  %4 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !5211
  %base2 = bitcast %union.tree_node* %4 to %struct.tree_base*, !dbg !5211
  %5 = bitcast %struct.tree_base* %base2 to i64*, !dbg !5211
  %bf.load3 = load i64, i64* %5, align 8, !dbg !5211
  %bf.clear4 = and i64 %bf.load3, 65535, !dbg !5211
  %bf.cast5 = trunc i64 %bf.clear4 to i32, !dbg !5211
  %cmp6 = icmp eq i32 %bf.cast5, 32, !dbg !5213
  br i1 %cmp6, label %if.then7, label %if.end8, !dbg !5214

if.then7:                                         ; preds = %if.else
  %6 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !5215
  call void @has_proper_scope_for_analysis(%union.tree_node* %6), !dbg !5216
  br label %if.end8, !dbg !5216

if.end8:                                          ; preds = %if.then7, %if.else
  br label %if.end9

if.end9:                                          ; preds = %if.then, %if.end8, %if.then1
  ret void, !dbg !5217
}

; Function Attrs: noinline nounwind uwtable
define internal void @check_function_parameter_and_return_types(%union.tree_node* %fn, i8 zeroext %escapes) #0 !dbg !5218 {
entry:
  %fn.addr = alloca %union.tree_node*, align 8
  %escapes.addr = alloca i8, align 1
  %arg = alloca %union.tree_node*, align 8
  %type7 = alloca %union.tree_node*, align 8
  %type16 = alloca %union.tree_node*, align 8
  %type30 = alloca %union.tree_node*, align 8
  store %union.tree_node* %fn, %union.tree_node** %fn.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %fn.addr, metadata !5221, metadata !DIExpression()), !dbg !5222
  store i8 %escapes, i8* %escapes.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %escapes.addr, metadata !5223, metadata !DIExpression()), !dbg !5224
  call void @llvm.dbg.declare(metadata %union.tree_node** %arg, metadata !5225, metadata !DIExpression()), !dbg !5226
  %0 = load %union.tree_node*, %union.tree_node** %fn.addr, align 8, !dbg !5227
  %common = bitcast %union.tree_node* %0 to %struct.tree_common*, !dbg !5227
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !5227
  %1 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5227
  %type1 = bitcast %union.tree_node* %1 to %struct.tree_type*, !dbg !5227
  %values = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1, i32 0, i32 1, !dbg !5227
  %2 = load %union.tree_node*, %union.tree_node** %values, align 8, !dbg !5227
  %tobool = icmp ne %union.tree_node* %2, null, !dbg !5227
  br i1 %tobool, label %if.then, label %if.else, !dbg !5229

if.then:                                          ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %fn.addr, align 8, !dbg !5230
  %common2 = bitcast %union.tree_node* %3 to %struct.tree_common*, !dbg !5230
  %type3 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common2, i32 0, i32 2, !dbg !5230
  %4 = load %union.tree_node*, %union.tree_node** %type3, align 8, !dbg !5230
  %type4 = bitcast %union.tree_node* %4 to %struct.tree_type*, !dbg !5230
  %values5 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type4, i32 0, i32 1, !dbg !5230
  %5 = load %union.tree_node*, %union.tree_node** %values5, align 8, !dbg !5230
  store %union.tree_node* %5, %union.tree_node** %arg, align 8, !dbg !5233
  br label %for.cond, !dbg !5234

for.cond:                                         ; preds = %for.inc, %if.then
  %6 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !5235
  %tobool6 = icmp ne %union.tree_node* %6, null, !dbg !5235
  br i1 %tobool6, label %land.rhs, label %land.end, !dbg !5237

land.rhs:                                         ; preds = %for.cond
  %7 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !5238
  %list = bitcast %union.tree_node* %7 to %struct.tree_list*, !dbg !5238
  %value = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list, i32 0, i32 2, !dbg !5238
  %8 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !5238
  %9 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 38), align 16, !dbg !5239
  %cmp = icmp ne %union.tree_node* %8, %9, !dbg !5240
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %10 = phi i1 [ false, %for.cond ], [ %cmp, %land.rhs ], !dbg !5241
  br i1 %10, label %for.body, label %for.end, !dbg !5242

for.body:                                         ; preds = %land.end
  call void @llvm.dbg.declare(metadata %union.tree_node** %type7, metadata !5243, metadata !DIExpression()), !dbg !5245
  %11 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !5246
  %list8 = bitcast %union.tree_node* %11 to %struct.tree_list*, !dbg !5246
  %value9 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list8, i32 0, i32 2, !dbg !5246
  %12 = load %union.tree_node*, %union.tree_node** %value9, align 8, !dbg !5246
  %call = call %union.tree_node* @get_canon_type(%union.tree_node* %12, i8 zeroext 0, i8 zeroext 0), !dbg !5247
  store %union.tree_node* %call, %union.tree_node** %type7, align 8, !dbg !5245
  %13 = load i8, i8* %escapes.addr, align 1, !dbg !5248
  %tobool10 = icmp ne i8 %13, 0, !dbg !5248
  br i1 %tobool10, label %if.then11, label %if.end, !dbg !5250

if.then11:                                        ; preds = %for.body
  %14 = load %union.tree_node*, %union.tree_node** %type7, align 8, !dbg !5251
  call void @mark_interesting_type(%union.tree_node* %14, i32 0), !dbg !5252
  br label %if.end, !dbg !5252

if.end:                                           ; preds = %if.then11, %for.body
  br label %for.inc, !dbg !5253

for.inc:                                          ; preds = %if.end
  %15 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !5254
  %common12 = bitcast %union.tree_node* %15 to %struct.tree_common*, !dbg !5254
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common12, i32 0, i32 1, !dbg !5254
  %16 = load %union.tree_node*, %union.tree_node** %chain, align 8, !dbg !5254
  store %union.tree_node* %16, %union.tree_node** %arg, align 8, !dbg !5255
  br label %for.cond, !dbg !5256, !llvm.loop !5257

for.end:                                          ; preds = %land.end
  br label %if.end27, !dbg !5259

if.else:                                          ; preds = %entry
  %17 = load %union.tree_node*, %union.tree_node** %fn.addr, align 8, !dbg !5260
  %decl_non_common = bitcast %union.tree_node* %17 to %struct.tree_decl_non_common*, !dbg !5260
  %arguments = getelementptr inbounds %struct.tree_decl_non_common, %struct.tree_decl_non_common* %decl_non_common, i32 0, i32 2, !dbg !5260
  %18 = load %union.tree_node*, %union.tree_node** %arguments, align 8, !dbg !5260
  store %union.tree_node* %18, %union.tree_node** %arg, align 8, !dbg !5263
  br label %for.cond13, !dbg !5264

for.cond13:                                       ; preds = %for.inc23, %if.else
  %19 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !5265
  %tobool14 = icmp ne %union.tree_node* %19, null, !dbg !5267
  br i1 %tobool14, label %for.body15, label %for.end26, !dbg !5267

for.body15:                                       ; preds = %for.cond13
  call void @llvm.dbg.declare(metadata %union.tree_node** %type16, metadata !5268, metadata !DIExpression()), !dbg !5270
  %20 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !5271
  %common17 = bitcast %union.tree_node* %20 to %struct.tree_common*, !dbg !5271
  %type18 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common17, i32 0, i32 2, !dbg !5271
  %21 = load %union.tree_node*, %union.tree_node** %type18, align 8, !dbg !5271
  %call19 = call %union.tree_node* @get_canon_type(%union.tree_node* %21, i8 zeroext 0, i8 zeroext 0), !dbg !5272
  store %union.tree_node* %call19, %union.tree_node** %type16, align 8, !dbg !5270
  %22 = load i8, i8* %escapes.addr, align 1, !dbg !5273
  %tobool20 = icmp ne i8 %22, 0, !dbg !5273
  br i1 %tobool20, label %if.then21, label %if.end22, !dbg !5275

if.then21:                                        ; preds = %for.body15
  %23 = load %union.tree_node*, %union.tree_node** %type16, align 8, !dbg !5276
  call void @mark_interesting_type(%union.tree_node* %23, i32 0), !dbg !5277
  br label %if.end22, !dbg !5277

if.end22:                                         ; preds = %if.then21, %for.body15
  br label %for.inc23, !dbg !5278

for.inc23:                                        ; preds = %if.end22
  %24 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !5279
  %common24 = bitcast %union.tree_node* %24 to %struct.tree_common*, !dbg !5279
  %chain25 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common24, i32 0, i32 1, !dbg !5279
  %25 = load %union.tree_node*, %union.tree_node** %chain25, align 8, !dbg !5279
  store %union.tree_node* %25, %union.tree_node** %arg, align 8, !dbg !5280
  br label %for.cond13, !dbg !5281, !llvm.loop !5282

for.end26:                                        ; preds = %for.cond13
  br label %if.end27

if.end27:                                         ; preds = %for.end26, %for.end
  %26 = load i8, i8* %escapes.addr, align 1, !dbg !5284
  %tobool28 = icmp ne i8 %26, 0, !dbg !5284
  br i1 %tobool28, label %if.then29, label %if.end36, !dbg !5286

if.then29:                                        ; preds = %if.end27
  call void @llvm.dbg.declare(metadata %union.tree_node** %type30, metadata !5287, metadata !DIExpression()), !dbg !5289
  %27 = load %union.tree_node*, %union.tree_node** %fn.addr, align 8, !dbg !5290
  %common31 = bitcast %union.tree_node* %27 to %struct.tree_common*, !dbg !5290
  %type32 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common31, i32 0, i32 2, !dbg !5290
  %28 = load %union.tree_node*, %union.tree_node** %type32, align 8, !dbg !5290
  %common33 = bitcast %union.tree_node* %28 to %struct.tree_common*, !dbg !5290
  %type34 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common33, i32 0, i32 2, !dbg !5290
  %29 = load %union.tree_node*, %union.tree_node** %type34, align 8, !dbg !5290
  %call35 = call %union.tree_node* @get_canon_type(%union.tree_node* %29, i8 zeroext 0, i8 zeroext 0), !dbg !5291
  store %union.tree_node* %call35, %union.tree_node** %type30, align 8, !dbg !5289
  %30 = load %union.tree_node*, %union.tree_node** %type30, align 8, !dbg !5292
  call void @mark_interesting_type(%union.tree_node* %30, i32 0), !dbg !5293
  br label %if.end36, !dbg !5294

if.end36:                                         ; preds = %if.then29, %if.end27
  ret void, !dbg !5295
}

; Function Attrs: noinline nounwind uwtable
define internal void @has_proper_scope_for_analysis(%union.tree_node* %t) #0 !dbg !5296 {
entry:
  %t.addr = alloca %union.tree_node*, align 8
  %type = alloca %union.tree_node*, align 8
  store %union.tree_node* %t, %union.tree_node** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %t.addr, metadata !5297, metadata !DIExpression()), !dbg !5298
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !5299, metadata !DIExpression()), !dbg !5300
  %0 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !5301
  %common = bitcast %union.tree_node* %0 to %struct.tree_common*, !dbg !5301
  %type1 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !5301
  %1 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !5301
  %call = call %union.tree_node* @get_canon_type(%union.tree_node* %1, i8 zeroext 0, i8 zeroext 0), !dbg !5302
  store %union.tree_node* %call, %union.tree_node** %type, align 8, !dbg !5300
  %2 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5303
  %tobool = icmp ne %union.tree_node* %2, null, !dbg !5303
  br i1 %tobool, label %if.end, label %if.then, !dbg !5305

if.then:                                          ; preds = %entry
  br label %if.end56, !dbg !5306

if.end:                                           ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !5307
  %decl_common = bitcast %union.tree_node* %3 to %struct.tree_decl_common*, !dbg !5307
  %preserve_flag = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 2, !dbg !5307
  %4 = bitcast i40* %preserve_flag to i64*, !dbg !5307
  %bf.load = load i64, i64* %4, align 8, !dbg !5307
  %bf.lshr = lshr i64 %bf.load, 13, !dbg !5307
  %bf.clear = and i64 %bf.lshr, 1, !dbg !5307
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !5307
  %tobool2 = icmp ne i32 %bf.cast, 0, !dbg !5307
  br i1 %tobool2, label %if.then3, label %if.end4, !dbg !5309

if.then3:                                         ; preds = %if.end
  %5 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5310
  call void @mark_interesting_type(%union.tree_node* %5, i32 1), !dbg !5312
  br label %if.end56, !dbg !5313

if.end4:                                          ; preds = %if.end
  %6 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !5314
  %base = bitcast %union.tree_node* %6 to %struct.tree_base*, !dbg !5314
  %7 = bitcast %struct.tree_base* %base to i64*, !dbg !5314
  %bf.load5 = load i64, i64* %7, align 8, !dbg !5314
  %bf.lshr6 = lshr i64 %bf.load5, 19, !dbg !5314
  %bf.clear7 = and i64 %bf.lshr6, 1, !dbg !5314
  %bf.cast8 = trunc i64 %bf.clear7 to i32, !dbg !5314
  %tobool9 = icmp ne i32 %bf.cast8, 0, !dbg !5314
  br i1 %tobool9, label %if.then10, label %if.end11, !dbg !5316

if.then10:                                        ; preds = %if.end4
  br label %if.end56, !dbg !5317

if.end11:                                         ; preds = %if.end4
  %8 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !5318
  %base12 = bitcast %union.tree_node* %8 to %struct.tree_base*, !dbg !5318
  %9 = bitcast %struct.tree_base* %base12 to i64*, !dbg !5318
  %bf.load13 = load i64, i64* %9, align 8, !dbg !5318
  %bf.lshr14 = lshr i64 %bf.load13, 26, !dbg !5318
  %bf.clear15 = and i64 %bf.lshr14, 1, !dbg !5318
  %bf.cast16 = trunc i64 %bf.clear15 to i32, !dbg !5318
  %tobool17 = icmp ne i32 %bf.cast16, 0, !dbg !5318
  br i1 %tobool17, label %if.end25, label %land.lhs.true, !dbg !5320

land.lhs.true:                                    ; preds = %if.end11
  %10 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !5321
  %decl_common18 = bitcast %union.tree_node* %10 to %struct.tree_decl_common*, !dbg !5321
  %decl_flag_1 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common18, i32 0, i32 2, !dbg !5321
  %11 = bitcast i40* %decl_flag_1 to i64*, !dbg !5321
  %bf.load19 = load i64, i64* %11, align 8, !dbg !5321
  %bf.lshr20 = lshr i64 %bf.load19, 25, !dbg !5321
  %bf.clear21 = and i64 %bf.lshr20, 1, !dbg !5321
  %bf.cast22 = trunc i64 %bf.clear21 to i32, !dbg !5321
  %tobool23 = icmp ne i32 %bf.cast22, 0, !dbg !5321
  br i1 %tobool23, label %if.end25, label %if.then24, !dbg !5322

if.then24:                                        ; preds = %land.lhs.true
  br label %if.end56, !dbg !5323

if.end25:                                         ; preds = %land.lhs.true, %if.end11
  %12 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !5324
  %decl_common26 = bitcast %union.tree_node* %12 to %struct.tree_decl_common*, !dbg !5324
  %decl_flag_127 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common26, i32 0, i32 2, !dbg !5324
  %13 = bitcast i40* %decl_flag_127 to i64*, !dbg !5324
  %bf.load28 = load i64, i64* %13, align 8, !dbg !5324
  %bf.lshr29 = lshr i64 %bf.load28, 25, !dbg !5324
  %bf.clear30 = and i64 %bf.lshr29, 1, !dbg !5324
  %bf.cast31 = trunc i64 %bf.clear30 to i32, !dbg !5324
  %tobool32 = icmp ne i32 %bf.cast31, 0, !dbg !5324
  br i1 %tobool32, label %if.then39, label %lor.lhs.false, !dbg !5326

lor.lhs.false:                                    ; preds = %if.end25
  %14 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !5327
  %base33 = bitcast %union.tree_node* %14 to %struct.tree_base*, !dbg !5327
  %15 = bitcast %struct.tree_base* %base33 to i64*, !dbg !5327
  %bf.load34 = load i64, i64* %15, align 8, !dbg !5327
  %bf.lshr35 = lshr i64 %bf.load34, 27, !dbg !5327
  %bf.clear36 = and i64 %bf.lshr35, 1, !dbg !5327
  %bf.cast37 = trunc i64 %bf.clear36 to i32, !dbg !5327
  %tobool38 = icmp ne i32 %bf.cast37, 0, !dbg !5327
  br i1 %tobool38, label %if.then39, label %if.end56, !dbg !5328

if.then39:                                        ; preds = %lor.lhs.false, %if.end25
  %16 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !5329
  %base40 = bitcast %union.tree_node* %16 to %struct.tree_base*, !dbg !5329
  %17 = bitcast %struct.tree_base* %base40 to i64*, !dbg !5329
  %bf.load41 = load i64, i64* %17, align 8, !dbg !5329
  %bf.lshr42 = lshr i64 %bf.load41, 20, !dbg !5329
  %bf.clear43 = and i64 %bf.lshr42, 1, !dbg !5329
  %bf.cast44 = trunc i64 %bf.clear43 to i32, !dbg !5329
  %tobool45 = icmp ne i32 %bf.cast44, 0, !dbg !5329
  br i1 %tobool45, label %land.lhs.true46, label %if.else, !dbg !5332

land.lhs.true46:                                  ; preds = %if.then39
  %18 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !5333
  %decl_common47 = bitcast %union.tree_node* %18 to %struct.tree_decl_common*, !dbg !5333
  %initial = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common47, i32 0, i32 5, !dbg !5333
  %19 = load %union.tree_node*, %union.tree_node** %initial, align 8, !dbg !5333
  %tobool48 = icmp ne %union.tree_node* %19, null, !dbg !5333
  br i1 %tobool48, label %land.lhs.true49, label %if.else, !dbg !5334

land.lhs.true49:                                  ; preds = %land.lhs.true46
  %20 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !5335
  %decl_common50 = bitcast %union.tree_node* %20 to %struct.tree_decl_common*, !dbg !5335
  %initial51 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common50, i32 0, i32 5, !dbg !5335
  %21 = load %union.tree_node*, %union.tree_node** %initial51, align 8, !dbg !5335
  %call52 = call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %21), !dbg !5336
  %conv = zext i8 %call52 to i32, !dbg !5336
  %tobool53 = icmp ne i32 %conv, 0, !dbg !5336
  br i1 %tobool53, label %if.then54, label %if.else, !dbg !5337

if.then54:                                        ; preds = %land.lhs.true49
  br label %if.end55, !dbg !5337

if.else:                                          ; preds = %land.lhs.true49, %land.lhs.true46, %if.then39
  %22 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5338
  call void @mark_interesting_type(%union.tree_node* %22, i32 1), !dbg !5340
  br label %if.end55

if.end55:                                         ; preds = %if.else, %if.then54
  br label %if.end56, !dbg !5341

if.end56:                                         ; preds = %if.then, %if.then3, %if.then10, %if.then24, %if.end55, %lor.lhs.false
  ret void, !dbg !5342
}

declare dso_local zeroext i8 @is_gimple_min_invariant(%union.tree_node*) #2

declare dso_local i8* @cgraph_node_name(%struct.cgraph_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @gsi_start_bb(%struct.gimple_stmt_iterator* noalias sret %agg.result, %struct.basic_block_def* %bb) #0 !dbg !5343 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %seq = alloca %struct.gimple_seq_d*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !5346, metadata !DIExpression()), !dbg !5347
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %agg.result, metadata !5348, metadata !DIExpression()), !dbg !5349
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %seq, metadata !5350, metadata !DIExpression()), !dbg !5351
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5352
  %call = call %struct.gimple_seq_d* @bb_seq(%struct.basic_block_def* %0), !dbg !5353
  store %struct.gimple_seq_d* %call, %struct.gimple_seq_d** %seq, align 8, !dbg !5354
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq, align 8, !dbg !5355
  %call1 = call %struct.gimple_seq_node_d* @gimple_seq_first(%struct.gimple_seq_d* %1), !dbg !5356
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 0, !dbg !5357
  store %struct.gimple_seq_node_d* %call1, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !5358
  %2 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq, align 8, !dbg !5359
  %seq2 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 1, !dbg !5360
  store %struct.gimple_seq_d* %2, %struct.gimple_seq_d** %seq2, align 8, !dbg !5361
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5362
  %bb3 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 2, !dbg !5363
  store %struct.basic_block_def* %3, %struct.basic_block_def** %bb3, align 8, !dbg !5364
  ret void, !dbg !5365
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #3

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %i) #0 !dbg !5366 {
entry:
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %i, metadata !5369, metadata !DIExpression()), !dbg !5370
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %i, i32 0, i32 0, !dbg !5371
  %0 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !5371
  %cmp = icmp eq %struct.gimple_seq_node_d* %0, null, !dbg !5372
  %conv = zext i1 %cmp to i32, !dbg !5372
  %conv1 = trunc i32 %conv to i8, !dbg !5373
  ret i8 %conv1, !dbg !5374
}

; Function Attrs: noinline nounwind uwtable
define internal void @scan_for_refs(%union.gimple_statement_d* %t) #0 !dbg !5375 {
entry:
  %t.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %t, %union.gimple_statement_d** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %t.addr, metadata !5378, metadata !DIExpression()), !dbg !5379
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %t.addr, align 8, !dbg !5380
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !5381
  switch i32 %call, label %sw.default [
    i32 6, label %sw.bb
    i32 8, label %sw.bb1
    i32 7, label %sw.bb2
  ], !dbg !5382

sw.bb:                                            ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %t.addr, align 8, !dbg !5383
  call void @check_assign(%union.gimple_statement_d* %1), !dbg !5385
  br label %sw.epilog, !dbg !5386

sw.bb1:                                           ; preds = %entry
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %t.addr, align 8, !dbg !5387
  call void @check_call(%union.gimple_statement_d* %2), !dbg !5388
  br label %sw.epilog, !dbg !5389

sw.bb2:                                           ; preds = %entry
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %t.addr, align 8, !dbg !5390
  call void @check_asm(%union.gimple_statement_d* %3), !dbg !5391
  br label %sw.epilog, !dbg !5392

sw.default:                                       ; preds = %entry
  br label %sw.epilog, !dbg !5393

sw.epilog:                                        ; preds = %sw.default, %sw.bb2, %sw.bb1, %sw.bb
  ret void, !dbg !5394
}

; Function Attrs: noinline nounwind uwtable
define internal %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %i) #0 !dbg !5395 {
entry:
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %i, metadata !5398, metadata !DIExpression()), !dbg !5399
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %i, i32 0, i32 0, !dbg !5400
  %0 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !5400
  %stmt = getelementptr inbounds %struct.gimple_seq_node_d, %struct.gimple_seq_node_d* %0, i32 0, i32 0, !dbg !5401
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5401
  ret %union.gimple_statement_d* %1, !dbg !5402
}

; Function Attrs: noinline nounwind uwtable
define internal void @gsi_next(%struct.gimple_stmt_iterator* %i) #0 !dbg !5403 {
entry:
  %i.addr = alloca %struct.gimple_stmt_iterator*, align 8
  store %struct.gimple_stmt_iterator* %i, %struct.gimple_stmt_iterator** %i.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator** %i.addr, metadata !5407, metadata !DIExpression()), !dbg !5408
  %0 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %i.addr, align 8, !dbg !5409
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %0, i32 0, i32 0, !dbg !5410
  %1 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !5410
  %next = getelementptr inbounds %struct.gimple_seq_node_d, %struct.gimple_seq_node_d* %1, i32 0, i32 2, !dbg !5411
  %2 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %next, align 8, !dbg !5411
  %3 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %i.addr, align 8, !dbg !5412
  %ptr1 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %3, i32 0, i32 0, !dbg !5413
  store %struct.gimple_seq_node_d* %2, %struct.gimple_seq_node_d** %ptr1, align 8, !dbg !5414
  ret void, !dbg !5415
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.gimple_seq_d* @bb_seq(%struct.basic_block_def* %bb) #0 !dbg !5416 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !5422, metadata !DIExpression()), !dbg !5423
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5424
  %flags = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 13, !dbg !5425
  %1 = load i32, i32* %flags, align 8, !dbg !5425
  %and = and i32 %1, 512, !dbg !5426
  %tobool = icmp ne i32 %and, 0, !dbg !5426
  br i1 %tobool, label %cond.false, label %land.lhs.true, !dbg !5427

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5428
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 7, !dbg !5429
  %gimple = bitcast %union.basic_block_il_dependent* %il to %struct.gimple_bb_info**, !dbg !5430
  %3 = load %struct.gimple_bb_info*, %struct.gimple_bb_info** %gimple, align 8, !dbg !5430
  %tobool1 = icmp ne %struct.gimple_bb_info* %3, null, !dbg !5428
  br i1 %tobool1, label %cond.true, label %cond.false, !dbg !5431

cond.true:                                        ; preds = %land.lhs.true
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5432
  %il2 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %4, i32 0, i32 7, !dbg !5433
  %gimple3 = bitcast %union.basic_block_il_dependent* %il2 to %struct.gimple_bb_info**, !dbg !5434
  %5 = load %struct.gimple_bb_info*, %struct.gimple_bb_info** %gimple3, align 8, !dbg !5434
  %seq = getelementptr inbounds %struct.gimple_bb_info, %struct.gimple_bb_info* %5, i32 0, i32 0, !dbg !5435
  %6 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq, align 8, !dbg !5435
  br label %cond.end, !dbg !5431

cond.false:                                       ; preds = %land.lhs.true, %entry
  br label %cond.end, !dbg !5431

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.gimple_seq_d* [ %6, %cond.true ], [ null, %cond.false ], !dbg !5431
  ret %struct.gimple_seq_d* %cond, !dbg !5436
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.gimple_seq_node_d* @gimple_seq_first(%struct.gimple_seq_d* %s) #0 !dbg !5437 {
entry:
  %s.addr = alloca %struct.gimple_seq_d*, align 8
  store %struct.gimple_seq_d* %s, %struct.gimple_seq_d** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %s.addr, metadata !5443, metadata !DIExpression()), !dbg !5444
  %0 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %s.addr, align 8, !dbg !5445
  %tobool = icmp ne %struct.gimple_seq_d* %0, null, !dbg !5445
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5445

cond.true:                                        ; preds = %entry
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %s.addr, align 8, !dbg !5446
  %first = getelementptr inbounds %struct.gimple_seq_d, %struct.gimple_seq_d* %1, i32 0, i32 0, !dbg !5447
  %2 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %first, align 8, !dbg !5447
  br label %cond.end, !dbg !5445

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5445

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.gimple_seq_node_d* [ %2, %cond.true ], [ null, %cond.false ], !dbg !5445
  ret %struct.gimple_seq_node_d* %cond, !dbg !5448
}

; Function Attrs: noinline nounwind uwtable
define internal void @check_assign(%union.gimple_statement_d* %t) #0 !dbg !5449 {
entry:
  %t.addr = alloca %union.gimple_statement_d*, align 8
  %op0 = alloca %union.tree_node*, align 8
  %type0 = alloca %union.tree_node*, align 8
  %op1 = alloca %union.tree_node*, align 8
  %type1 = alloca %union.tree_node*, align 8
  %op039 = alloca %union.tree_node*, align 8
  %type041 = alloca %union.tree_node*, align 8
  %rhs = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %t, %union.gimple_statement_d** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %t.addr, metadata !5450, metadata !DIExpression()), !dbg !5451
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %t.addr, align 8, !dbg !5452
  %call = call %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %0), !dbg !5453
  call void @check_lhs_var(%union.tree_node* %call), !dbg !5454
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %t.addr, align 8, !dbg !5455
  %call1 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %1), !dbg !5455
  %idxprom = sext i32 %call1 to i64, !dbg !5455
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !5455
  %2 = load i32, i32* %arrayidx, align 4, !dbg !5455
  switch i32 %2, label %sw.default [
    i32 7, label %sw.bb
    i32 6, label %sw.bb38
    i32 4, label %sw.bb73
    i32 3, label %sw.bb77
    i32 10, label %sw.bb79
  ], !dbg !5456

sw.bb:                                            ; preds = %entry
  call void @llvm.dbg.declare(metadata %union.tree_node** %op0, metadata !5457, metadata !DIExpression()), !dbg !5460
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %t.addr, align 8, !dbg !5461
  %call2 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %3), !dbg !5462
  store %union.tree_node* %call2, %union.tree_node** %op0, align 8, !dbg !5460
  call void @llvm.dbg.declare(metadata %union.tree_node** %type0, metadata !5463, metadata !DIExpression()), !dbg !5464
  %4 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !5465
  %common = bitcast %union.tree_node* %4 to %struct.tree_common*, !dbg !5465
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !5465
  %5 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5465
  %call3 = call %union.tree_node* @get_canon_type(%union.tree_node* %5, i8 zeroext 0, i8 zeroext 0), !dbg !5466
  store %union.tree_node* %call3, %union.tree_node** %type0, align 8, !dbg !5464
  call void @llvm.dbg.declare(metadata %union.tree_node** %op1, metadata !5467, metadata !DIExpression()), !dbg !5468
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %t.addr, align 8, !dbg !5469
  %call4 = call %union.tree_node* @gimple_assign_rhs2(%union.gimple_statement_d* %6), !dbg !5470
  store %union.tree_node* %call4, %union.tree_node** %op1, align 8, !dbg !5468
  call void @llvm.dbg.declare(metadata %union.tree_node** %type1, metadata !5471, metadata !DIExpression()), !dbg !5472
  %7 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !5473
  %common5 = bitcast %union.tree_node* %7 to %struct.tree_common*, !dbg !5473
  %type6 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common5, i32 0, i32 2, !dbg !5473
  %8 = load %union.tree_node*, %union.tree_node** %type6, align 8, !dbg !5473
  %call7 = call %union.tree_node* @get_canon_type(%union.tree_node* %8, i8 zeroext 0, i8 zeroext 0), !dbg !5474
  store %union.tree_node* %call7, %union.tree_node** %type1, align 8, !dbg !5472
  %9 = load %union.tree_node*, %union.tree_node** %type0, align 8, !dbg !5475
  %tobool = icmp ne %union.tree_node* %9, null, !dbg !5475
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !5477

land.lhs.true:                                    ; preds = %sw.bb
  %10 = load %union.tree_node*, %union.tree_node** %type0, align 8, !dbg !5478
  %base = bitcast %union.tree_node* %10 to %struct.tree_base*, !dbg !5478
  %11 = bitcast %struct.tree_base* %base to i64*, !dbg !5478
  %bf.load = load i64, i64* %11, align 8, !dbg !5478
  %bf.clear = and i64 %bf.load, 65535, !dbg !5478
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !5478
  %cmp = icmp eq i32 %bf.cast, 10, !dbg !5478
  br i1 %cmp, label %land.lhs.true13, label %lor.lhs.false, !dbg !5478

lor.lhs.false:                                    ; preds = %land.lhs.true
  %12 = load %union.tree_node*, %union.tree_node** %type0, align 8, !dbg !5478
  %base8 = bitcast %union.tree_node* %12 to %struct.tree_base*, !dbg !5478
  %13 = bitcast %struct.tree_base* %base8 to i64*, !dbg !5478
  %bf.load9 = load i64, i64* %13, align 8, !dbg !5478
  %bf.clear10 = and i64 %bf.load9, 65535, !dbg !5478
  %bf.cast11 = trunc i64 %bf.clear10 to i32, !dbg !5478
  %cmp12 = icmp eq i32 %bf.cast11, 12, !dbg !5478
  br i1 %cmp12, label %land.lhs.true13, label %if.end, !dbg !5479

land.lhs.true13:                                  ; preds = %lor.lhs.false, %land.lhs.true
  %14 = load %union.gimple_statement_d*, %union.gimple_statement_d** %t.addr, align 8, !dbg !5480
  %call14 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %14), !dbg !5481
  %15 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !5482
  %16 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !5483
  %call15 = call zeroext i8 @okay_pointer_operation(i32 %call14, %union.tree_node* %15, %union.tree_node* %16), !dbg !5484
  %tobool16 = icmp ne i8 %call15, 0, !dbg !5484
  br i1 %tobool16, label %if.end, label %if.then, !dbg !5485

if.then:                                          ; preds = %land.lhs.true13
  %17 = load %union.tree_node*, %union.tree_node** %type0, align 8, !dbg !5486
  call void @mark_interesting_type(%union.tree_node* %17, i32 1), !dbg !5487
  br label %if.end, !dbg !5487

if.end:                                           ; preds = %if.then, %land.lhs.true13, %lor.lhs.false, %sw.bb
  %18 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !5488
  %tobool17 = icmp ne %union.tree_node* %18, null, !dbg !5488
  br i1 %tobool17, label %land.lhs.true18, label %if.end35, !dbg !5490

land.lhs.true18:                                  ; preds = %if.end
  %19 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !5491
  %base19 = bitcast %union.tree_node* %19 to %struct.tree_base*, !dbg !5491
  %20 = bitcast %struct.tree_base* %base19 to i64*, !dbg !5491
  %bf.load20 = load i64, i64* %20, align 8, !dbg !5491
  %bf.clear21 = and i64 %bf.load20, 65535, !dbg !5491
  %bf.cast22 = trunc i64 %bf.clear21 to i32, !dbg !5491
  %cmp23 = icmp eq i32 %bf.cast22, 10, !dbg !5491
  br i1 %cmp23, label %land.lhs.true30, label %lor.lhs.false24, !dbg !5491

lor.lhs.false24:                                  ; preds = %land.lhs.true18
  %21 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !5491
  %base25 = bitcast %union.tree_node* %21 to %struct.tree_base*, !dbg !5491
  %22 = bitcast %struct.tree_base* %base25 to i64*, !dbg !5491
  %bf.load26 = load i64, i64* %22, align 8, !dbg !5491
  %bf.clear27 = and i64 %bf.load26, 65535, !dbg !5491
  %bf.cast28 = trunc i64 %bf.clear27 to i32, !dbg !5491
  %cmp29 = icmp eq i32 %bf.cast28, 12, !dbg !5491
  br i1 %cmp29, label %land.lhs.true30, label %if.end35, !dbg !5492

land.lhs.true30:                                  ; preds = %lor.lhs.false24, %land.lhs.true18
  %23 = load %union.gimple_statement_d*, %union.gimple_statement_d** %t.addr, align 8, !dbg !5493
  %call31 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %23), !dbg !5494
  %24 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !5495
  %25 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !5496
  %call32 = call zeroext i8 @okay_pointer_operation(i32 %call31, %union.tree_node* %24, %union.tree_node* %25), !dbg !5497
  %tobool33 = icmp ne i8 %call32, 0, !dbg !5497
  br i1 %tobool33, label %if.end35, label %if.then34, !dbg !5498

if.then34:                                        ; preds = %land.lhs.true30
  %26 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !5499
  call void @mark_interesting_type(%union.tree_node* %26, i32 1), !dbg !5500
  br label %if.end35, !dbg !5500

if.end35:                                         ; preds = %if.then34, %land.lhs.true30, %lor.lhs.false24, %if.end
  %27 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !5501
  %call36 = call i32 @look_for_casts(%union.tree_node* %27), !dbg !5502
  %28 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !5503
  %call37 = call i32 @look_for_casts(%union.tree_node* %28), !dbg !5504
  %29 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !5505
  call void @check_rhs_var(%union.tree_node* %29), !dbg !5506
  %30 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !5507
  call void @check_rhs_var(%union.tree_node* %30), !dbg !5508
  br label %sw.epilog, !dbg !5509

sw.bb38:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata %union.tree_node** %op039, metadata !5510, metadata !DIExpression()), !dbg !5512
  %31 = load %union.gimple_statement_d*, %union.gimple_statement_d** %t.addr, align 8, !dbg !5513
  %call40 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %31), !dbg !5514
  store %union.tree_node* %call40, %union.tree_node** %op039, align 8, !dbg !5512
  call void @llvm.dbg.declare(metadata %union.tree_node** %type041, metadata !5515, metadata !DIExpression()), !dbg !5516
  %32 = load %union.tree_node*, %union.tree_node** %op039, align 8, !dbg !5517
  %common42 = bitcast %union.tree_node* %32 to %struct.tree_common*, !dbg !5517
  %type43 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common42, i32 0, i32 2, !dbg !5517
  %33 = load %union.tree_node*, %union.tree_node** %type43, align 8, !dbg !5517
  %call44 = call %union.tree_node* @get_canon_type(%union.tree_node* %33, i8 zeroext 0, i8 zeroext 0), !dbg !5518
  store %union.tree_node* %call44, %union.tree_node** %type041, align 8, !dbg !5516
  %34 = load %union.tree_node*, %union.tree_node** %type041, align 8, !dbg !5519
  %tobool45 = icmp ne %union.tree_node* %34, null, !dbg !5519
  br i1 %tobool45, label %land.lhs.true46, label %if.end71, !dbg !5521

land.lhs.true46:                                  ; preds = %sw.bb38
  %35 = load %union.tree_node*, %union.tree_node** %type041, align 8, !dbg !5522
  %base47 = bitcast %union.tree_node* %35 to %struct.tree_base*, !dbg !5522
  %36 = bitcast %struct.tree_base* %base47 to i64*, !dbg !5522
  %bf.load48 = load i64, i64* %36, align 8, !dbg !5522
  %bf.clear49 = and i64 %bf.load48, 65535, !dbg !5522
  %bf.cast50 = trunc i64 %bf.clear49 to i32, !dbg !5522
  %cmp51 = icmp eq i32 %bf.cast50, 10, !dbg !5522
  br i1 %cmp51, label %land.lhs.true58, label %lor.lhs.false52, !dbg !5522

lor.lhs.false52:                                  ; preds = %land.lhs.true46
  %37 = load %union.tree_node*, %union.tree_node** %type041, align 8, !dbg !5522
  %base53 = bitcast %union.tree_node* %37 to %struct.tree_base*, !dbg !5522
  %38 = bitcast %struct.tree_base* %base53 to i64*, !dbg !5522
  %bf.load54 = load i64, i64* %38, align 8, !dbg !5522
  %bf.clear55 = and i64 %bf.load54, 65535, !dbg !5522
  %bf.cast56 = trunc i64 %bf.clear55 to i32, !dbg !5522
  %cmp57 = icmp eq i32 %bf.cast56, 12, !dbg !5522
  br i1 %cmp57, label %land.lhs.true58, label %if.end71, !dbg !5523

land.lhs.true58:                                  ; preds = %lor.lhs.false52, %land.lhs.true46
  %39 = load %union.tree_node*, %union.tree_node** %op039, align 8, !dbg !5524
  %base59 = bitcast %union.tree_node* %39 to %struct.tree_base*, !dbg !5524
  %40 = bitcast %struct.tree_base* %base59 to i64*, !dbg !5524
  %bf.load60 = load i64, i64* %40, align 8, !dbg !5524
  %bf.clear61 = and i64 %bf.load60, 65535, !dbg !5524
  %bf.cast62 = trunc i64 %bf.clear61 to i32, !dbg !5524
  %cmp63 = icmp eq i32 %bf.cast62, 79, !dbg !5525
  br i1 %cmp63, label %if.then70, label %lor.lhs.false64, !dbg !5526

lor.lhs.false64:                                  ; preds = %land.lhs.true58
  %41 = load %union.tree_node*, %union.tree_node** %op039, align 8, !dbg !5527
  %base65 = bitcast %union.tree_node* %41 to %struct.tree_base*, !dbg !5527
  %42 = bitcast %struct.tree_base* %base65 to i64*, !dbg !5527
  %bf.load66 = load i64, i64* %42, align 8, !dbg !5527
  %bf.clear67 = and i64 %bf.load66, 65535, !dbg !5527
  %bf.cast68 = trunc i64 %bf.clear67 to i32, !dbg !5527
  %cmp69 = icmp eq i32 %bf.cast68, 82, !dbg !5528
  br i1 %cmp69, label %if.then70, label %if.end71, !dbg !5529

if.then70:                                        ; preds = %lor.lhs.false64, %land.lhs.true58
  %43 = load %union.tree_node*, %union.tree_node** %type041, align 8, !dbg !5530
  call void @mark_interesting_type(%union.tree_node* %43, i32 1), !dbg !5531
  br label %if.end71, !dbg !5531

if.end71:                                         ; preds = %if.then70, %lor.lhs.false64, %lor.lhs.false52, %sw.bb38
  %44 = load %union.tree_node*, %union.tree_node** %op039, align 8, !dbg !5532
  call void @check_rhs_var(%union.tree_node* %44), !dbg !5533
  %45 = load %union.tree_node*, %union.tree_node** %op039, align 8, !dbg !5534
  %call72 = call i32 @look_for_casts(%union.tree_node* %45), !dbg !5535
  br label %sw.epilog, !dbg !5536

sw.bb73:                                          ; preds = %entry
  %46 = load %union.gimple_statement_d*, %union.gimple_statement_d** %t.addr, align 8, !dbg !5537
  %call74 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %46), !dbg !5538
  %call75 = call i32 @look_for_casts(%union.tree_node* %call74), !dbg !5539
  %47 = load %union.gimple_statement_d*, %union.gimple_statement_d** %t.addr, align 8, !dbg !5540
  %call76 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %47), !dbg !5541
  call void @check_rhs_var(%union.tree_node* %call76), !dbg !5542
  br label %sw.epilog, !dbg !5543

sw.bb77:                                          ; preds = %entry
  %48 = load %union.gimple_statement_d*, %union.gimple_statement_d** %t.addr, align 8, !dbg !5544
  %call78 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %48), !dbg !5545
  call void @check_rhs_var(%union.tree_node* %call78), !dbg !5546
  br label %sw.epilog, !dbg !5547

sw.bb79:                                          ; preds = %entry
  %49 = load %union.gimple_statement_d*, %union.gimple_statement_d** %t.addr, align 8, !dbg !5548
  %call80 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %49), !dbg !5550
  %cmp81 = icmp eq i32 %call80, 121, !dbg !5551
  br i1 %cmp81, label %if.then82, label %if.end86, !dbg !5552

if.then82:                                        ; preds = %sw.bb79
  call void @llvm.dbg.declare(metadata %union.tree_node** %rhs, metadata !5553, metadata !DIExpression()), !dbg !5555
  %50 = load %union.gimple_statement_d*, %union.gimple_statement_d** %t.addr, align 8, !dbg !5556
  %call83 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %50), !dbg !5557
  store %union.tree_node* %call83, %union.tree_node** %rhs, align 8, !dbg !5555
  %51 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !5558
  %exp = bitcast %union.tree_node* %51 to %struct.tree_exp*, !dbg !5558
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !5558
  %arrayidx84 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !5558
  %52 = load %union.tree_node*, %union.tree_node** %arrayidx84, align 8, !dbg !5558
  %call85 = call i32 @look_for_casts(%union.tree_node* %52), !dbg !5559
  %53 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !5560
  call void @check_rhs_var(%union.tree_node* %53), !dbg !5561
  br label %if.end86, !dbg !5562

if.end86:                                         ; preds = %if.then82, %sw.bb79
  br label %sw.epilog, !dbg !5563

sw.default:                                       ; preds = %entry
  br label %sw.epilog, !dbg !5564

sw.epilog:                                        ; preds = %sw.default, %if.end86, %sw.bb77, %sw.bb73, %if.end71, %if.end35
  ret void, !dbg !5565
}

; Function Attrs: noinline nounwind uwtable
define internal void @check_call(%union.gimple_statement_d* %call) #0 !dbg !5566 {
entry:
  %call.addr = alloca %union.gimple_statement_d*, align 8
  %callee_t = alloca %union.tree_node*, align 8
  %callee = alloca %struct.cgraph_node*, align 8
  %avail = alloca i32, align 4
  %i = alloca i64, align 8
  %arg_type = alloca %union.tree_node*, align 8
  %last_arg_type = alloca %union.tree_node*, align 8
  %operand = alloca %union.tree_node*, align 8
  %operand45 = alloca %union.tree_node*, align 8
  %operand67 = alloca %union.tree_node*, align 8
  %type74 = alloca %union.tree_node*, align 8
  %operand94 = alloca %union.tree_node*, align 8
  %type97 = alloca %union.tree_node*, align 8
  %type106 = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %call, %union.gimple_statement_d** %call.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %call.addr, metadata !5567, metadata !DIExpression()), !dbg !5568
  call void @llvm.dbg.declare(metadata %union.tree_node** %callee_t, metadata !5569, metadata !DIExpression()), !dbg !5570
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %call.addr, align 8, !dbg !5571
  %call1 = call %union.tree_node* @gimple_call_fndecl(%union.gimple_statement_d* %0), !dbg !5572
  store %union.tree_node* %call1, %union.tree_node** %callee_t, align 8, !dbg !5570
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %callee, metadata !5573, metadata !DIExpression()), !dbg !5574
  call void @llvm.dbg.declare(metadata i32* %avail, metadata !5575, metadata !DIExpression()), !dbg !5576
  store i32 1, i32* %avail, align 4, !dbg !5576
  call void @llvm.dbg.declare(metadata i64* %i, metadata !5577, metadata !DIExpression()), !dbg !5578
  store i64 0, i64* %i, align 8, !dbg !5579
  br label %for.cond, !dbg !5581

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i64, i64* %i, align 8, !dbg !5582
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %call.addr, align 8, !dbg !5584
  %call2 = call i32 @gimple_call_num_args(%union.gimple_statement_d* %2), !dbg !5585
  %conv = zext i32 %call2 to i64, !dbg !5585
  %cmp = icmp ult i64 %1, %conv, !dbg !5586
  br i1 %cmp, label %for.body, label %for.end, !dbg !5587

for.body:                                         ; preds = %for.cond
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %call.addr, align 8, !dbg !5588
  %4 = load i64, i64* %i, align 8, !dbg !5589
  %conv4 = trunc i64 %4 to i32, !dbg !5589
  %call5 = call %union.tree_node* @gimple_call_arg(%union.gimple_statement_d* %3, i32 %conv4), !dbg !5590
  call void @check_rhs_var(%union.tree_node* %call5), !dbg !5591
  br label %for.inc, !dbg !5591

for.inc:                                          ; preds = %for.body
  %5 = load i64, i64* %i, align 8, !dbg !5592
  %inc = add i64 %5, 1, !dbg !5592
  store i64 %inc, i64* %i, align 8, !dbg !5592
  br label %for.cond, !dbg !5593, !llvm.loop !5594

for.end:                                          ; preds = %for.cond
  %6 = load %union.tree_node*, %union.tree_node** %callee_t, align 8, !dbg !5596
  %tobool = icmp ne %union.tree_node* %6, null, !dbg !5596
  br i1 %tobool, label %if.then, label %if.end82, !dbg !5598

if.then:                                          ; preds = %for.end
  call void @llvm.dbg.declare(metadata %union.tree_node** %arg_type, metadata !5599, metadata !DIExpression()), !dbg !5601
  call void @llvm.dbg.declare(metadata %union.tree_node** %last_arg_type, metadata !5602, metadata !DIExpression()), !dbg !5603
  store %union.tree_node* null, %union.tree_node** %last_arg_type, align 8, !dbg !5603
  %7 = load %union.tree_node*, %union.tree_node** %callee_t, align 8, !dbg !5604
  %call6 = call %struct.cgraph_node* @cgraph_node(%union.tree_node* %7), !dbg !5605
  store %struct.cgraph_node* %call6, %struct.cgraph_node** %callee, align 8, !dbg !5606
  %8 = load %struct.cgraph_node*, %struct.cgraph_node** %callee, align 8, !dbg !5607
  %call7 = call i32 @cgraph_function_body_availability(%struct.cgraph_node* %8), !dbg !5608
  store i32 %call7, i32* %avail, align 4, !dbg !5609
  %9 = load %union.tree_node*, %union.tree_node** %callee_t, align 8, !dbg !5610
  %common = bitcast %union.tree_node* %9 to %struct.tree_common*, !dbg !5610
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !5610
  %10 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5610
  %type8 = bitcast %union.tree_node* %10 to %struct.tree_type*, !dbg !5610
  %values = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type8, i32 0, i32 1, !dbg !5610
  %11 = load %union.tree_node*, %union.tree_node** %values, align 8, !dbg !5610
  %tobool9 = icmp ne %union.tree_node* %11, null, !dbg !5610
  br i1 %tobool9, label %if.then10, label %if.else35, !dbg !5612

if.then10:                                        ; preds = %if.then
  %12 = load %union.tree_node*, %union.tree_node** %callee_t, align 8, !dbg !5613
  %common11 = bitcast %union.tree_node* %12 to %struct.tree_common*, !dbg !5613
  %type12 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common11, i32 0, i32 2, !dbg !5613
  %13 = load %union.tree_node*, %union.tree_node** %type12, align 8, !dbg !5613
  %type13 = bitcast %union.tree_node* %13 to %struct.tree_type*, !dbg !5613
  %values14 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type13, i32 0, i32 1, !dbg !5613
  %14 = load %union.tree_node*, %union.tree_node** %values14, align 8, !dbg !5613
  store %union.tree_node* %14, %union.tree_node** %arg_type, align 8, !dbg !5616
  store i64 0, i64* %i, align 8, !dbg !5617
  br label %for.cond15, !dbg !5618

for.cond15:                                       ; preds = %for.inc31, %if.then10
  %15 = load %union.tree_node*, %union.tree_node** %arg_type, align 8, !dbg !5619
  %tobool16 = icmp ne %union.tree_node* %15, null, !dbg !5619
  br i1 %tobool16, label %land.lhs.true, label %land.end, !dbg !5621

land.lhs.true:                                    ; preds = %for.cond15
  %16 = load %union.tree_node*, %union.tree_node** %arg_type, align 8, !dbg !5622
  %list = bitcast %union.tree_node* %16 to %struct.tree_list*, !dbg !5622
  %value = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list, i32 0, i32 2, !dbg !5622
  %17 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !5622
  %18 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 38), align 16, !dbg !5623
  %cmp17 = icmp ne %union.tree_node* %17, %18, !dbg !5624
  br i1 %cmp17, label %land.rhs, label %land.end, !dbg !5625

land.rhs:                                         ; preds = %land.lhs.true
  %19 = load i64, i64* %i, align 8, !dbg !5626
  %20 = load %union.gimple_statement_d*, %union.gimple_statement_d** %call.addr, align 8, !dbg !5627
  %call19 = call i32 @gimple_call_num_args(%union.gimple_statement_d* %20), !dbg !5628
  %conv20 = zext i32 %call19 to i64, !dbg !5628
  %cmp21 = icmp ult i64 %19, %conv20, !dbg !5629
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true, %for.cond15
  %21 = phi i1 [ false, %land.lhs.true ], [ false, %for.cond15 ], [ %cmp21, %land.rhs ], !dbg !5630
  br i1 %21, label %for.body23, label %for.end34, !dbg !5631

for.body23:                                       ; preds = %land.end
  call void @llvm.dbg.declare(metadata %union.tree_node** %operand, metadata !5632, metadata !DIExpression()), !dbg !5634
  %22 = load %union.gimple_statement_d*, %union.gimple_statement_d** %call.addr, align 8, !dbg !5635
  %23 = load i64, i64* %i, align 8, !dbg !5636
  %conv24 = trunc i64 %23 to i32, !dbg !5636
  %call25 = call %union.tree_node* @gimple_call_arg(%union.gimple_statement_d* %22, i32 %conv24), !dbg !5637
  store %union.tree_node* %call25, %union.tree_node** %operand, align 8, !dbg !5634
  %24 = load %union.tree_node*, %union.tree_node** %operand, align 8, !dbg !5638
  %tobool26 = icmp ne %union.tree_node* %24, null, !dbg !5638
  br i1 %tobool26, label %if.then27, label %if.else, !dbg !5640

if.then27:                                        ; preds = %for.body23
  %25 = load %union.tree_node*, %union.tree_node** %arg_type, align 8, !dbg !5641
  %list28 = bitcast %union.tree_node* %25 to %struct.tree_list*, !dbg !5641
  %value29 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list28, i32 0, i32 2, !dbg !5641
  %26 = load %union.tree_node*, %union.tree_node** %value29, align 8, !dbg !5641
  store %union.tree_node* %26, %union.tree_node** %last_arg_type, align 8, !dbg !5643
  %27 = load %union.tree_node*, %union.tree_node** %last_arg_type, align 8, !dbg !5644
  %28 = load %union.tree_node*, %union.tree_node** %operand, align 8, !dbg !5645
  %call30 = call i32 @check_cast(%union.tree_node* %27, %union.tree_node* %28), !dbg !5646
  br label %if.end, !dbg !5647

if.else:                                          ; preds = %for.body23
  br label %for.end34, !dbg !5648

if.end:                                           ; preds = %if.then27
  br label %for.inc31, !dbg !5649

for.inc31:                                        ; preds = %if.end
  %29 = load %union.tree_node*, %union.tree_node** %arg_type, align 8, !dbg !5650
  %common32 = bitcast %union.tree_node* %29 to %struct.tree_common*, !dbg !5650
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common32, i32 0, i32 1, !dbg !5650
  %30 = load %union.tree_node*, %union.tree_node** %chain, align 8, !dbg !5650
  store %union.tree_node* %30, %union.tree_node** %arg_type, align 8, !dbg !5651
  %31 = load i64, i64* %i, align 8, !dbg !5652
  %inc33 = add i64 %31, 1, !dbg !5652
  store i64 %inc33, i64* %i, align 8, !dbg !5652
  br label %for.cond15, !dbg !5653, !llvm.loop !5654

for.end34:                                        ; preds = %if.else, %land.end
  br label %if.end60, !dbg !5656

if.else35:                                        ; preds = %if.then
  %32 = load %union.tree_node*, %union.tree_node** %callee_t, align 8, !dbg !5657
  %decl_non_common = bitcast %union.tree_node* %32 to %struct.tree_decl_non_common*, !dbg !5657
  %arguments = getelementptr inbounds %struct.tree_decl_non_common, %struct.tree_decl_non_common* %decl_non_common, i32 0, i32 2, !dbg !5657
  %33 = load %union.tree_node*, %union.tree_node** %arguments, align 8, !dbg !5657
  store %union.tree_node* %33, %union.tree_node** %arg_type, align 8, !dbg !5660
  store i64 0, i64* %i, align 8, !dbg !5661
  br label %for.cond36, !dbg !5662

for.cond36:                                       ; preds = %for.inc55, %if.else35
  %34 = load %union.tree_node*, %union.tree_node** %arg_type, align 8, !dbg !5663
  %tobool37 = icmp ne %union.tree_node* %34, null, !dbg !5663
  br i1 %tobool37, label %land.rhs38, label %land.end43, !dbg !5665

land.rhs38:                                       ; preds = %for.cond36
  %35 = load i64, i64* %i, align 8, !dbg !5666
  %36 = load %union.gimple_statement_d*, %union.gimple_statement_d** %call.addr, align 8, !dbg !5667
  %call39 = call i32 @gimple_call_num_args(%union.gimple_statement_d* %36), !dbg !5668
  %conv40 = zext i32 %call39 to i64, !dbg !5668
  %cmp41 = icmp ult i64 %35, %conv40, !dbg !5669
  br label %land.end43

land.end43:                                       ; preds = %land.rhs38, %for.cond36
  %37 = phi i1 [ false, %for.cond36 ], [ %cmp41, %land.rhs38 ], !dbg !5670
  br i1 %37, label %for.body44, label %for.end59, !dbg !5671

for.body44:                                       ; preds = %land.end43
  call void @llvm.dbg.declare(metadata %union.tree_node** %operand45, metadata !5672, metadata !DIExpression()), !dbg !5674
  %38 = load %union.gimple_statement_d*, %union.gimple_statement_d** %call.addr, align 8, !dbg !5675
  %39 = load i64, i64* %i, align 8, !dbg !5676
  %conv46 = trunc i64 %39 to i32, !dbg !5676
  %call47 = call %union.tree_node* @gimple_call_arg(%union.gimple_statement_d* %38, i32 %conv46), !dbg !5677
  store %union.tree_node* %call47, %union.tree_node** %operand45, align 8, !dbg !5674
  %40 = load %union.tree_node*, %union.tree_node** %operand45, align 8, !dbg !5678
  %tobool48 = icmp ne %union.tree_node* %40, null, !dbg !5678
  br i1 %tobool48, label %if.then49, label %if.else53, !dbg !5680

if.then49:                                        ; preds = %for.body44
  %41 = load %union.tree_node*, %union.tree_node** %arg_type, align 8, !dbg !5681
  %common50 = bitcast %union.tree_node* %41 to %struct.tree_common*, !dbg !5681
  %type51 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common50, i32 0, i32 2, !dbg !5681
  %42 = load %union.tree_node*, %union.tree_node** %type51, align 8, !dbg !5681
  store %union.tree_node* %42, %union.tree_node** %last_arg_type, align 8, !dbg !5683
  %43 = load %union.tree_node*, %union.tree_node** %last_arg_type, align 8, !dbg !5684
  %44 = load %union.tree_node*, %union.tree_node** %operand45, align 8, !dbg !5685
  %call52 = call i32 @check_cast(%union.tree_node* %43, %union.tree_node* %44), !dbg !5686
  br label %if.end54, !dbg !5687

if.else53:                                        ; preds = %for.body44
  br label %for.end59, !dbg !5688

if.end54:                                         ; preds = %if.then49
  br label %for.inc55, !dbg !5689

for.inc55:                                        ; preds = %if.end54
  %45 = load %union.tree_node*, %union.tree_node** %arg_type, align 8, !dbg !5690
  %common56 = bitcast %union.tree_node* %45 to %struct.tree_common*, !dbg !5690
  %chain57 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common56, i32 0, i32 1, !dbg !5690
  %46 = load %union.tree_node*, %union.tree_node** %chain57, align 8, !dbg !5690
  store %union.tree_node* %46, %union.tree_node** %arg_type, align 8, !dbg !5691
  %47 = load i64, i64* %i, align 8, !dbg !5692
  %inc58 = add i64 %47, 1, !dbg !5692
  store i64 %inc58, i64* %i, align 8, !dbg !5692
  br label %for.cond36, !dbg !5693, !llvm.loop !5694

for.end59:                                        ; preds = %if.else53, %land.end43
  br label %if.end60

if.end60:                                         ; preds = %for.end59, %for.end34
  %48 = load %union.tree_node*, %union.tree_node** %last_arg_type, align 8, !dbg !5696
  store %union.tree_node* %48, %union.tree_node** %arg_type, align 8, !dbg !5697
  br label %for.cond61, !dbg !5698

for.cond61:                                       ; preds = %for.inc79, %if.end60
  %49 = load i64, i64* %i, align 8, !dbg !5699
  %50 = load %union.gimple_statement_d*, %union.gimple_statement_d** %call.addr, align 8, !dbg !5702
  %call62 = call i32 @gimple_call_num_args(%union.gimple_statement_d* %50), !dbg !5703
  %conv63 = zext i32 %call62 to i64, !dbg !5703
  %cmp64 = icmp ult i64 %49, %conv63, !dbg !5704
  br i1 %cmp64, label %for.body66, label %for.end81, !dbg !5705

for.body66:                                       ; preds = %for.cond61
  call void @llvm.dbg.declare(metadata %union.tree_node** %operand67, metadata !5706, metadata !DIExpression()), !dbg !5708
  %51 = load %union.gimple_statement_d*, %union.gimple_statement_d** %call.addr, align 8, !dbg !5709
  %52 = load i64, i64* %i, align 8, !dbg !5710
  %conv68 = trunc i64 %52 to i32, !dbg !5710
  %call69 = call %union.tree_node* @gimple_call_arg(%union.gimple_statement_d* %51, i32 %conv68), !dbg !5711
  store %union.tree_node* %call69, %union.tree_node** %operand67, align 8, !dbg !5708
  %53 = load %union.tree_node*, %union.tree_node** %arg_type, align 8, !dbg !5712
  %tobool70 = icmp ne %union.tree_node* %53, null, !dbg !5712
  br i1 %tobool70, label %if.then71, label %if.else73, !dbg !5714

if.then71:                                        ; preds = %for.body66
  %54 = load %union.tree_node*, %union.tree_node** %arg_type, align 8, !dbg !5715
  %55 = load %union.tree_node*, %union.tree_node** %operand67, align 8, !dbg !5716
  %call72 = call i32 @check_cast(%union.tree_node* %54, %union.tree_node* %55), !dbg !5717
  br label %if.end78, !dbg !5717

if.else73:                                        ; preds = %for.body66
  call void @llvm.dbg.declare(metadata %union.tree_node** %type74, metadata !5718, metadata !DIExpression()), !dbg !5720
  %56 = load %union.tree_node*, %union.tree_node** %operand67, align 8, !dbg !5721
  %common75 = bitcast %union.tree_node* %56 to %struct.tree_common*, !dbg !5721
  %type76 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common75, i32 0, i32 2, !dbg !5721
  %57 = load %union.tree_node*, %union.tree_node** %type76, align 8, !dbg !5721
  %call77 = call %union.tree_node* @get_canon_type(%union.tree_node* %57, i8 zeroext 0, i8 zeroext 0), !dbg !5722
  store %union.tree_node* %call77, %union.tree_node** %type74, align 8, !dbg !5720
  %58 = load %union.tree_node*, %union.tree_node** %type74, align 8, !dbg !5723
  call void @mark_interesting_type(%union.tree_node* %58, i32 1), !dbg !5724
  br label %if.end78

if.end78:                                         ; preds = %if.else73, %if.then71
  br label %for.inc79, !dbg !5725

for.inc79:                                        ; preds = %if.end78
  %59 = load i64, i64* %i, align 8, !dbg !5726
  %inc80 = add i64 %59, 1, !dbg !5726
  store i64 %inc80, i64* %i, align 8, !dbg !5726
  br label %for.cond61, !dbg !5727, !llvm.loop !5728

for.end81:                                        ; preds = %for.cond61
  br label %if.end82, !dbg !5730

if.end82:                                         ; preds = %for.end81, %for.end
  %60 = load i32, i32* %avail, align 4, !dbg !5731
  %cmp83 = icmp eq i32 %60, 1, !dbg !5733
  br i1 %cmp83, label %if.then87, label %lor.lhs.false, !dbg !5734

lor.lhs.false:                                    ; preds = %if.end82
  %61 = load i32, i32* %avail, align 4, !dbg !5735
  %cmp85 = icmp eq i32 %61, 2, !dbg !5736
  br i1 %cmp85, label %if.then87, label %if.end113, !dbg !5737

if.then87:                                        ; preds = %lor.lhs.false, %if.end82
  store i64 0, i64* %i, align 8, !dbg !5738
  br label %for.cond88, !dbg !5741

for.cond88:                                       ; preds = %for.inc101, %if.then87
  %62 = load i64, i64* %i, align 8, !dbg !5742
  %63 = load %union.gimple_statement_d*, %union.gimple_statement_d** %call.addr, align 8, !dbg !5744
  %call89 = call i32 @gimple_call_num_args(%union.gimple_statement_d* %63), !dbg !5745
  %conv90 = zext i32 %call89 to i64, !dbg !5745
  %cmp91 = icmp ult i64 %62, %conv90, !dbg !5746
  br i1 %cmp91, label %for.body93, label %for.end103, !dbg !5747

for.body93:                                       ; preds = %for.cond88
  call void @llvm.dbg.declare(metadata %union.tree_node** %operand94, metadata !5748, metadata !DIExpression()), !dbg !5750
  %64 = load %union.gimple_statement_d*, %union.gimple_statement_d** %call.addr, align 8, !dbg !5751
  %65 = load i64, i64* %i, align 8, !dbg !5752
  %conv95 = trunc i64 %65 to i32, !dbg !5752
  %call96 = call %union.tree_node* @gimple_call_arg(%union.gimple_statement_d* %64, i32 %conv95), !dbg !5753
  store %union.tree_node* %call96, %union.tree_node** %operand94, align 8, !dbg !5750
  call void @llvm.dbg.declare(metadata %union.tree_node** %type97, metadata !5754, metadata !DIExpression()), !dbg !5755
  %66 = load %union.tree_node*, %union.tree_node** %operand94, align 8, !dbg !5756
  %common98 = bitcast %union.tree_node* %66 to %struct.tree_common*, !dbg !5756
  %type99 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common98, i32 0, i32 2, !dbg !5756
  %67 = load %union.tree_node*, %union.tree_node** %type99, align 8, !dbg !5756
  %call100 = call %union.tree_node* @get_canon_type(%union.tree_node* %67, i8 zeroext 0, i8 zeroext 0), !dbg !5757
  store %union.tree_node* %call100, %union.tree_node** %type97, align 8, !dbg !5755
  %68 = load %union.tree_node*, %union.tree_node** %type97, align 8, !dbg !5758
  call void @mark_interesting_type(%union.tree_node* %68, i32 0), !dbg !5759
  br label %for.inc101, !dbg !5760

for.inc101:                                       ; preds = %for.body93
  %69 = load i64, i64* %i, align 8, !dbg !5761
  %inc102 = add i64 %69, 1, !dbg !5761
  store i64 %inc102, i64* %i, align 8, !dbg !5761
  br label %for.cond88, !dbg !5762, !llvm.loop !5763

for.end103:                                       ; preds = %for.cond88
  %70 = load %union.tree_node*, %union.tree_node** %callee_t, align 8, !dbg !5765
  %tobool104 = icmp ne %union.tree_node* %70, null, !dbg !5765
  br i1 %tobool104, label %if.then105, label %if.end112, !dbg !5767

if.then105:                                       ; preds = %for.end103
  call void @llvm.dbg.declare(metadata %union.tree_node** %type106, metadata !5768, metadata !DIExpression()), !dbg !5770
  %71 = load %union.tree_node*, %union.tree_node** %callee_t, align 8, !dbg !5771
  %common107 = bitcast %union.tree_node* %71 to %struct.tree_common*, !dbg !5771
  %type108 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common107, i32 0, i32 2, !dbg !5771
  %72 = load %union.tree_node*, %union.tree_node** %type108, align 8, !dbg !5771
  %common109 = bitcast %union.tree_node* %72 to %struct.tree_common*, !dbg !5771
  %type110 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common109, i32 0, i32 2, !dbg !5771
  %73 = load %union.tree_node*, %union.tree_node** %type110, align 8, !dbg !5771
  %call111 = call %union.tree_node* @get_canon_type(%union.tree_node* %73, i8 zeroext 0, i8 zeroext 0), !dbg !5772
  store %union.tree_node* %call111, %union.tree_node** %type106, align 8, !dbg !5770
  %74 = load %union.tree_node*, %union.tree_node** %type106, align 8, !dbg !5773
  call void @mark_interesting_type(%union.tree_node* %74, i32 0), !dbg !5774
  br label %if.end112, !dbg !5775

if.end112:                                        ; preds = %if.then105, %for.end103
  br label %if.end113, !dbg !5776

if.end113:                                        ; preds = %if.end112, %lor.lhs.false
  ret void, !dbg !5777
}

; Function Attrs: noinline nounwind uwtable
define internal void @check_asm(%union.gimple_statement_d* %stmt) #0 !dbg !5778 {
entry:
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %i = alloca i64, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !5779, metadata !DIExpression()), !dbg !5780
  call void @llvm.dbg.declare(metadata i64* %i, metadata !5781, metadata !DIExpression()), !dbg !5782
  store i64 0, i64* %i, align 8, !dbg !5783
  br label %for.cond, !dbg !5785

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i64, i64* %i, align 8, !dbg !5786
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5788
  %call = call i32 @gimple_asm_noutputs(%union.gimple_statement_d* %1), !dbg !5789
  %conv = zext i32 %call to i64, !dbg !5789
  %cmp = icmp ult i64 %0, %conv, !dbg !5790
  br i1 %cmp, label %for.body, label %for.end, !dbg !5791

for.body:                                         ; preds = %for.cond
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5792
  %3 = load i64, i64* %i, align 8, !dbg !5793
  %conv2 = trunc i64 %3 to i32, !dbg !5793
  %call3 = call %union.tree_node* @gimple_asm_output_op(%union.gimple_statement_d* %2, i32 %conv2), !dbg !5794
  call void @check_lhs_var(%union.tree_node* %call3), !dbg !5795
  br label %for.inc, !dbg !5795

for.inc:                                          ; preds = %for.body
  %4 = load i64, i64* %i, align 8, !dbg !5796
  %inc = add i64 %4, 1, !dbg !5796
  store i64 %inc, i64* %i, align 8, !dbg !5796
  br label %for.cond, !dbg !5797, !llvm.loop !5798

for.end:                                          ; preds = %for.cond
  store i64 0, i64* %i, align 8, !dbg !5800
  br label %for.cond4, !dbg !5802

for.cond4:                                        ; preds = %for.inc12, %for.end
  %5 = load i64, i64* %i, align 8, !dbg !5803
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5805
  %call5 = call i32 @gimple_asm_ninputs(%union.gimple_statement_d* %6), !dbg !5806
  %conv6 = zext i32 %call5 to i64, !dbg !5806
  %cmp7 = icmp ult i64 %5, %conv6, !dbg !5807
  br i1 %cmp7, label %for.body9, label %for.end14, !dbg !5808

for.body9:                                        ; preds = %for.cond4
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5809
  %8 = load i64, i64* %i, align 8, !dbg !5810
  %conv10 = trunc i64 %8 to i32, !dbg !5810
  %call11 = call %union.tree_node* @gimple_asm_input_op(%union.gimple_statement_d* %7, i32 %conv10), !dbg !5811
  call void @check_rhs_var(%union.tree_node* %call11), !dbg !5812
  br label %for.inc12, !dbg !5812

for.inc12:                                        ; preds = %for.body9
  %9 = load i64, i64* %i, align 8, !dbg !5813
  %inc13 = add i64 %9, 1, !dbg !5813
  store i64 %inc13, i64* %i, align 8, !dbg !5813
  br label %for.cond4, !dbg !5814, !llvm.loop !5815

for.end14:                                        ; preds = %for.cond4
  ret void, !dbg !5817
}

; Function Attrs: noinline nounwind uwtable
define internal void @check_lhs_var(%union.tree_node* %t) #0 !dbg !5818 {
entry:
  %t.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %t, %union.tree_node** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %t.addr, metadata !5819, metadata !DIExpression()), !dbg !5820
  %0 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !5821
  call void @check_tree(%union.tree_node* %0), !dbg !5822
  ret void, !dbg !5823
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @okay_pointer_operation(i32 %code, %union.tree_node* %op0, %union.tree_node* %op1) #0 !dbg !5824 {
entry:
  %retval = alloca i8, align 1
  %code.addr = alloca i32, align 4
  %op0.addr = alloca %union.tree_node*, align 8
  %op1.addr = alloca %union.tree_node*, align 8
  %op0type = alloca %union.tree_node*, align 8
  %base = alloca %union.tree_node*, align 8
  %offset = alloca %union.tree_node*, align 8
  %offset_cast_stmt = alloca %union.gimple_statement_d*, align 8
  %size_of_op0_points_to = alloca %union.tree_node*, align 8
  store i32 %code, i32* %code.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %code.addr, metadata !5827, metadata !DIExpression()), !dbg !5828
  store %union.tree_node* %op0, %union.tree_node** %op0.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %op0.addr, metadata !5829, metadata !DIExpression()), !dbg !5830
  store %union.tree_node* %op1, %union.tree_node** %op1.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %op1.addr, metadata !5831, metadata !DIExpression()), !dbg !5832
  call void @llvm.dbg.declare(metadata %union.tree_node** %op0type, metadata !5833, metadata !DIExpression()), !dbg !5834
  %0 = load %union.tree_node*, %union.tree_node** %op0.addr, align 8, !dbg !5835
  %common = bitcast %union.tree_node* %0 to %struct.tree_common*, !dbg !5835
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !5835
  %1 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5835
  %type1 = bitcast %union.tree_node* %1 to %struct.tree_type*, !dbg !5835
  %main_variant = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1, i32 0, i32 16, !dbg !5835
  %2 = load %union.tree_node*, %union.tree_node** %main_variant, align 8, !dbg !5835
  store %union.tree_node* %2, %union.tree_node** %op0type, align 8, !dbg !5834
  %3 = load i32, i32* %code.addr, align 4, !dbg !5836
  switch i32 %3, label %sw.default [
    i32 65, label %sw.bb
    i32 64, label %sw.bb2
    i32 63, label %sw.bb2
    i32 66, label %sw.bb2
  ], !dbg !5837

sw.bb:                                            ; preds = %entry
  store i8 1, i8* %retval, align 1, !dbg !5838
  br label %return, !dbg !5838

sw.bb2:                                           ; preds = %entry, %entry, %entry
  call void @llvm.dbg.declare(metadata %union.tree_node** %base, metadata !5840, metadata !DIExpression()), !dbg !5842
  call void @llvm.dbg.declare(metadata %union.tree_node** %offset, metadata !5843, metadata !DIExpression()), !dbg !5844
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %offset_cast_stmt, metadata !5845, metadata !DIExpression()), !dbg !5846
  %4 = load %union.tree_node*, %union.tree_node** %op0type, align 8, !dbg !5847
  %base3 = bitcast %union.tree_node* %4 to %struct.tree_base*, !dbg !5847
  %5 = bitcast %struct.tree_base* %base3 to i64*, !dbg !5847
  %bf.load = load i64, i64* %5, align 8, !dbg !5847
  %bf.clear = and i64 %bf.load, 65535, !dbg !5847
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !5847
  %cmp = icmp eq i32 %bf.cast, 10, !dbg !5847
  br i1 %cmp, label %land.lhs.true, label %lor.lhs.false, !dbg !5847

lor.lhs.false:                                    ; preds = %sw.bb2
  %6 = load %union.tree_node*, %union.tree_node** %op0type, align 8, !dbg !5847
  %base4 = bitcast %union.tree_node* %6 to %struct.tree_base*, !dbg !5847
  %7 = bitcast %struct.tree_base* %base4 to i64*, !dbg !5847
  %bf.load5 = load i64, i64* %7, align 8, !dbg !5847
  %bf.clear6 = and i64 %bf.load5, 65535, !dbg !5847
  %bf.cast7 = trunc i64 %bf.clear6 to i32, !dbg !5847
  %cmp8 = icmp eq i32 %bf.cast7, 12, !dbg !5847
  br i1 %cmp8, label %land.lhs.true, label %if.else, !dbg !5849

land.lhs.true:                                    ; preds = %lor.lhs.false, %sw.bb2
  %8 = load %union.tree_node*, %union.tree_node** %op0.addr, align 8, !dbg !5850
  %base9 = bitcast %union.tree_node* %8 to %struct.tree_base*, !dbg !5850
  %9 = bitcast %struct.tree_base* %base9 to i64*, !dbg !5850
  %bf.load10 = load i64, i64* %9, align 8, !dbg !5850
  %bf.clear11 = and i64 %bf.load10, 65535, !dbg !5850
  %bf.cast12 = trunc i64 %bf.clear11 to i32, !dbg !5850
  %cmp13 = icmp eq i32 %bf.cast12, 141, !dbg !5851
  br i1 %cmp13, label %land.lhs.true14, label %if.else, !dbg !5852

land.lhs.true14:                                  ; preds = %land.lhs.true
  %10 = load %union.tree_node*, %union.tree_node** %op1.addr, align 8, !dbg !5853
  %base15 = bitcast %union.tree_node* %10 to %struct.tree_base*, !dbg !5853
  %11 = bitcast %struct.tree_base* %base15 to i64*, !dbg !5853
  %bf.load16 = load i64, i64* %11, align 8, !dbg !5853
  %bf.clear17 = and i64 %bf.load16, 65535, !dbg !5853
  %bf.cast18 = trunc i64 %bf.clear17 to i32, !dbg !5853
  %cmp19 = icmp eq i32 %bf.cast18, 141, !dbg !5854
  br i1 %cmp19, label %land.lhs.true20, label %if.else, !dbg !5855

land.lhs.true20:                                  ; preds = %land.lhs.true14
  %12 = load i32, i32* %code.addr, align 4, !dbg !5856
  %13 = load %union.tree_node*, %union.tree_node** %op0.addr, align 8, !dbg !5857
  %14 = load %union.tree_node*, %union.tree_node** %op1.addr, align 8, !dbg !5858
  %call = call zeroext i8 @is_array_access_through_pointer_and_index(i32 %12, %union.tree_node* %13, %union.tree_node* %14, %union.tree_node** %base, %union.tree_node** %offset, %union.gimple_statement_d** %offset_cast_stmt), !dbg !5859
  %conv = zext i8 %call to i32, !dbg !5859
  %tobool = icmp ne i32 %conv, 0, !dbg !5859
  br i1 %tobool, label %if.then, label %if.else, !dbg !5860

if.then:                                          ; preds = %land.lhs.true20
  store i8 1, i8* %retval, align 1, !dbg !5861
  br label %return, !dbg !5861

if.else:                                          ; preds = %land.lhs.true20, %land.lhs.true14, %land.lhs.true, %lor.lhs.false
  call void @llvm.dbg.declare(metadata %union.tree_node** %size_of_op0_points_to, metadata !5862, metadata !DIExpression()), !dbg !5864
  %15 = load %union.tree_node*, %union.tree_node** %op0type, align 8, !dbg !5865
  %common21 = bitcast %union.tree_node* %15 to %struct.tree_common*, !dbg !5865
  %type22 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common21, i32 0, i32 2, !dbg !5865
  %16 = load %union.tree_node*, %union.tree_node** %type22, align 8, !dbg !5865
  %type23 = bitcast %union.tree_node* %16 to %struct.tree_type*, !dbg !5865
  %size_unit = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type23, i32 0, i32 3, !dbg !5865
  %17 = load %union.tree_node*, %union.tree_node** %size_unit, align 8, !dbg !5865
  store %union.tree_node* %17, %union.tree_node** %size_of_op0_points_to, align 8, !dbg !5864
  %18 = load %union.tree_node*, %union.tree_node** %op1.addr, align 8, !dbg !5866
  %base24 = bitcast %union.tree_node* %18 to %struct.tree_base*, !dbg !5866
  %19 = bitcast %struct.tree_base* %base24 to i64*, !dbg !5866
  %bf.load25 = load i64, i64* %19, align 8, !dbg !5866
  %bf.clear26 = and i64 %bf.load25, 65535, !dbg !5866
  %bf.cast27 = trunc i64 %bf.clear26 to i32, !dbg !5866
  %idxprom = sext i32 %bf.cast27 to i64, !dbg !5866
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !5866
  %20 = load i32, i32* %arrayidx, align 4, !dbg !5866
  %cmp28 = icmp eq i32 %20, 1, !dbg !5866
  br i1 %cmp28, label %land.lhs.true30, label %if.end, !dbg !5868

land.lhs.true30:                                  ; preds = %if.else
  %21 = load %union.tree_node*, %union.tree_node** %size_of_op0_points_to, align 8, !dbg !5869
  %tobool31 = icmp ne %union.tree_node* %21, null, !dbg !5869
  br i1 %tobool31, label %land.lhs.true32, label %if.end, !dbg !5870

land.lhs.true32:                                  ; preds = %land.lhs.true30
  %22 = load %union.tree_node*, %union.tree_node** %size_of_op0_points_to, align 8, !dbg !5871
  %common33 = bitcast %union.tree_node* %22 to %struct.tree_common*, !dbg !5871
  %type34 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common33, i32 0, i32 2, !dbg !5871
  %23 = load %union.tree_node*, %union.tree_node** %type34, align 8, !dbg !5871
  %24 = load %union.tree_node*, %union.tree_node** %op1.addr, align 8, !dbg !5872
  %25 = load %union.tree_node*, %union.tree_node** %size_of_op0_points_to, align 8, !dbg !5873
  %call35 = call i32 @multiple_of_p(%union.tree_node* %23, %union.tree_node* %24, %union.tree_node* %25), !dbg !5874
  %tobool36 = icmp ne i32 %call35, 0, !dbg !5874
  br i1 %tobool36, label %if.then37, label %if.end, !dbg !5875

if.then37:                                        ; preds = %land.lhs.true32
  store i8 1, i8* %retval, align 1, !dbg !5876
  br label %return, !dbg !5876

if.end:                                           ; preds = %land.lhs.true32, %land.lhs.true30, %if.else
  %26 = load %union.tree_node*, %union.tree_node** %op0.addr, align 8, !dbg !5877
  %base38 = bitcast %union.tree_node* %26 to %struct.tree_base*, !dbg !5877
  %27 = bitcast %struct.tree_base* %base38 to i64*, !dbg !5877
  %bf.load39 = load i64, i64* %27, align 8, !dbg !5877
  %bf.clear40 = and i64 %bf.load39, 65535, !dbg !5877
  %bf.cast41 = trunc i64 %bf.clear40 to i32, !dbg !5877
  %idxprom42 = sext i32 %bf.cast41 to i64, !dbg !5877
  %arrayidx43 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom42, !dbg !5877
  %28 = load i32, i32* %arrayidx43, align 4, !dbg !5877
  %cmp44 = icmp eq i32 %28, 1, !dbg !5877
  br i1 %cmp44, label %land.lhs.true46, label %if.end54, !dbg !5879

land.lhs.true46:                                  ; preds = %if.end
  %29 = load %union.tree_node*, %union.tree_node** %size_of_op0_points_to, align 8, !dbg !5880
  %tobool47 = icmp ne %union.tree_node* %29, null, !dbg !5880
  br i1 %tobool47, label %land.lhs.true48, label %if.end54, !dbg !5881

land.lhs.true48:                                  ; preds = %land.lhs.true46
  %30 = load %union.tree_node*, %union.tree_node** %size_of_op0_points_to, align 8, !dbg !5882
  %common49 = bitcast %union.tree_node* %30 to %struct.tree_common*, !dbg !5882
  %type50 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common49, i32 0, i32 2, !dbg !5882
  %31 = load %union.tree_node*, %union.tree_node** %type50, align 8, !dbg !5882
  %32 = load %union.tree_node*, %union.tree_node** %op0.addr, align 8, !dbg !5883
  %33 = load %union.tree_node*, %union.tree_node** %size_of_op0_points_to, align 8, !dbg !5884
  %call51 = call i32 @multiple_of_p(%union.tree_node* %31, %union.tree_node* %32, %union.tree_node* %33), !dbg !5885
  %tobool52 = icmp ne i32 %call51, 0, !dbg !5885
  br i1 %tobool52, label %if.then53, label %if.end54, !dbg !5886

if.then53:                                        ; preds = %land.lhs.true48
  store i8 1, i8* %retval, align 1, !dbg !5887
  br label %return, !dbg !5887

if.end54:                                         ; preds = %land.lhs.true48, %land.lhs.true46, %if.end
  br label %if.end55

if.end55:                                         ; preds = %if.end54
  br label %sw.epilog, !dbg !5888

sw.default:                                       ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !5889
  br label %return, !dbg !5889

sw.epilog:                                        ; preds = %if.end55
  store i8 0, i8* %retval, align 1, !dbg !5890
  br label %return, !dbg !5890

return:                                           ; preds = %sw.epilog, %sw.default, %if.then53, %if.then37, %if.then, %sw.bb
  %34 = load i8, i8* %retval, align 1, !dbg !5891
  ret i8 %34, !dbg !5891
}

; Function Attrs: noinline nounwind uwtable
define internal void @check_rhs_var(%union.tree_node* %t) #0 !dbg !5892 {
entry:
  %t.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %t, %union.tree_node** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %t.addr, metadata !5893, metadata !DIExpression()), !dbg !5894
  %0 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !5895
  call void @look_for_address_of(%union.tree_node* %0), !dbg !5896
  %1 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !5897
  call void @check_tree(%union.tree_node* %1), !dbg !5898
  ret void, !dbg !5899
}

declare dso_local i32 @multiple_of_p(%union.tree_node*, %union.tree_node*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @look_for_address_of(%union.tree_node* %t) #0 !dbg !5900 {
entry:
  %t.addr = alloca %union.tree_node*, align 8
  %x = alloca %union.tree_node*, align 8
  %cref = alloca %union.tree_node*, align 8
  %fielddecl = alloca %union.tree_node*, align 8
  store %union.tree_node* %t, %union.tree_node** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %t.addr, metadata !5901, metadata !DIExpression()), !dbg !5902
  %0 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !5903
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !5903
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !5903
  %bf.load = load i64, i64* %1, align 8, !dbg !5903
  %bf.clear = and i64 %bf.load, 65535, !dbg !5903
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !5903
  %cmp = icmp eq i32 %bf.cast, 121, !dbg !5905
  br i1 %cmp, label %if.then, label %if.end31, !dbg !5906

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata %union.tree_node** %x, metadata !5907, metadata !DIExpression()), !dbg !5909
  %2 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !5910
  %call = call %union.tree_node* @get_base_var(%union.tree_node* %2), !dbg !5911
  store %union.tree_node* %call, %union.tree_node** %x, align 8, !dbg !5909
  call void @llvm.dbg.declare(metadata %union.tree_node** %cref, metadata !5912, metadata !DIExpression()), !dbg !5913
  %3 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !5914
  %exp = bitcast %union.tree_node* %3 to %struct.tree_exp*, !dbg !5914
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !5914
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !5914
  %4 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !5914
  store %union.tree_node* %4, %union.tree_node** %cref, align 8, !dbg !5913
  call void @llvm.dbg.declare(metadata %union.tree_node** %fielddecl, metadata !5915, metadata !DIExpression()), !dbg !5916
  store %union.tree_node* null, %union.tree_node** %fielddecl, align 8, !dbg !5916
  br label %while.cond, !dbg !5917

while.cond:                                       ; preds = %if.end20, %if.then
  %5 = load %union.tree_node*, %union.tree_node** %cref, align 8, !dbg !5918
  %6 = load %union.tree_node*, %union.tree_node** %x, align 8, !dbg !5919
  %cmp1 = icmp ne %union.tree_node* %5, %6, !dbg !5920
  br i1 %cmp1, label %while.body, label %while.end, !dbg !5917

while.body:                                       ; preds = %while.cond
  %7 = load %union.tree_node*, %union.tree_node** %cref, align 8, !dbg !5921
  %base2 = bitcast %union.tree_node* %7 to %struct.tree_base*, !dbg !5921
  %8 = bitcast %struct.tree_base* %base2 to i64*, !dbg !5921
  %bf.load3 = load i64, i64* %8, align 8, !dbg !5921
  %bf.clear4 = and i64 %bf.load3, 65535, !dbg !5921
  %bf.cast5 = trunc i64 %bf.clear4 to i32, !dbg !5921
  %cmp6 = icmp eq i32 %bf.cast5, 41, !dbg !5924
  br i1 %cmp6, label %if.then7, label %if.else, !dbg !5925

if.then7:                                         ; preds = %while.body
  %9 = load %union.tree_node*, %union.tree_node** %cref, align 8, !dbg !5926
  %exp8 = bitcast %union.tree_node* %9 to %struct.tree_exp*, !dbg !5926
  %operands9 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp8, i32 0, i32 3, !dbg !5926
  %arrayidx10 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands9, i64 0, i64 1, !dbg !5926
  %10 = load %union.tree_node*, %union.tree_node** %arrayidx10, align 8, !dbg !5926
  store %union.tree_node* %10, %union.tree_node** %fielddecl, align 8, !dbg !5928
  %11 = load %union.tree_node*, %union.tree_node** %fielddecl, align 8, !dbg !5929
  %common = bitcast %union.tree_node* %11 to %struct.tree_common*, !dbg !5929
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !5929
  %12 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5929
  %13 = load %union.tree_node*, %union.tree_node** %fielddecl, align 8, !dbg !5930
  %decl_minimal = bitcast %union.tree_node* %13 to %struct.tree_decl_minimal*, !dbg !5930
  %context = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal, i32 0, i32 4, !dbg !5930
  %14 = load %union.tree_node*, %union.tree_node** %context, align 8, !dbg !5930
  call void @mark_interesting_addressof(%union.tree_node* %12, %union.tree_node* %14), !dbg !5931
  br label %if.end20, !dbg !5932

if.else:                                          ; preds = %while.body
  %15 = load %union.tree_node*, %union.tree_node** %cref, align 8, !dbg !5933
  %base11 = bitcast %union.tree_node* %15 to %struct.tree_base*, !dbg !5933
  %16 = bitcast %struct.tree_base* %base11 to i64*, !dbg !5933
  %bf.load12 = load i64, i64* %16, align 8, !dbg !5933
  %bf.clear13 = and i64 %bf.load12, 65535, !dbg !5933
  %bf.cast14 = trunc i64 %bf.clear13 to i32, !dbg !5933
  %cmp15 = icmp eq i32 %bf.cast14, 45, !dbg !5935
  br i1 %cmp15, label %if.then16, label %if.end, !dbg !5936

if.then16:                                        ; preds = %if.else
  %17 = load %union.tree_node*, %union.tree_node** %cref, align 8, !dbg !5937
  %common17 = bitcast %union.tree_node* %17 to %struct.tree_common*, !dbg !5937
  %type18 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common17, i32 0, i32 2, !dbg !5937
  %18 = load %union.tree_node*, %union.tree_node** %type18, align 8, !dbg !5937
  %call19 = call %union.tree_node* @get_canon_type(%union.tree_node* %18, i8 zeroext 0, i8 zeroext 0), !dbg !5938
  br label %if.end, !dbg !5938

if.end:                                           ; preds = %if.then16, %if.else
  br label %if.end20

if.end20:                                         ; preds = %if.end, %if.then7
  %19 = load %union.tree_node*, %union.tree_node** %cref, align 8, !dbg !5939
  %exp21 = bitcast %union.tree_node* %19 to %struct.tree_exp*, !dbg !5939
  %operands22 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp21, i32 0, i32 3, !dbg !5939
  %arrayidx23 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands22, i64 0, i64 0, !dbg !5939
  %20 = load %union.tree_node*, %union.tree_node** %arrayidx23, align 8, !dbg !5939
  store %union.tree_node* %20, %union.tree_node** %cref, align 8, !dbg !5940
  br label %while.cond, !dbg !5917, !llvm.loop !5941

while.end:                                        ; preds = %while.cond
  %21 = load %union.tree_node*, %union.tree_node** %x, align 8, !dbg !5943
  %base24 = bitcast %union.tree_node* %21 to %struct.tree_base*, !dbg !5943
  %22 = bitcast %struct.tree_base* %base24 to i64*, !dbg !5943
  %bf.load25 = load i64, i64* %22, align 8, !dbg !5943
  %bf.clear26 = and i64 %bf.load25, 65535, !dbg !5943
  %bf.cast27 = trunc i64 %bf.clear26 to i32, !dbg !5943
  %cmp28 = icmp eq i32 %bf.cast27, 32, !dbg !5945
  br i1 %cmp28, label %if.then29, label %if.end30, !dbg !5946

if.then29:                                        ; preds = %while.end
  %23 = load %union.tree_node*, %union.tree_node** %x, align 8, !dbg !5947
  call void @has_proper_scope_for_analysis(%union.tree_node* %23), !dbg !5948
  br label %if.end30, !dbg !5948

if.end30:                                         ; preds = %if.then29, %while.end
  br label %if.end31, !dbg !5949

if.end31:                                         ; preds = %if.end30, %entry
  ret void, !dbg !5950
}

declare dso_local %union.tree_node* @get_base_var(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @mark_interesting_addressof(%union.tree_node* %to_type, %union.tree_node* %from_type) #0 !dbg !5951 {
entry:
  %to_type.addr = alloca %union.tree_node*, align 8
  %from_type.addr = alloca %union.tree_node*, align 8
  %from_uid = alloca i32, align 4
  %to_uid = alloca i32, align 4
  %type_map = alloca %struct.bitmap_head_def*, align 8
  %result = alloca %struct.splay_tree_node_s*, align 8
  store %union.tree_node* %to_type, %union.tree_node** %to_type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %to_type.addr, metadata !5954, metadata !DIExpression()), !dbg !5955
  store %union.tree_node* %from_type, %union.tree_node** %from_type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %from_type.addr, metadata !5956, metadata !DIExpression()), !dbg !5957
  call void @llvm.dbg.declare(metadata i32* %from_uid, metadata !5958, metadata !DIExpression()), !dbg !5959
  call void @llvm.dbg.declare(metadata i32* %to_uid, metadata !5960, metadata !DIExpression()), !dbg !5961
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %type_map, metadata !5962, metadata !DIExpression()), !dbg !5963
  call void @llvm.dbg.declare(metadata %struct.splay_tree_node_s** %result, metadata !5964, metadata !DIExpression()), !dbg !5965
  %0 = load %union.tree_node*, %union.tree_node** %from_type.addr, align 8, !dbg !5966
  %call = call %union.tree_node* @get_canon_type(%union.tree_node* %0, i8 zeroext 0, i8 zeroext 0), !dbg !5967
  store %union.tree_node* %call, %union.tree_node** %from_type.addr, align 8, !dbg !5968
  %1 = load %union.tree_node*, %union.tree_node** %to_type.addr, align 8, !dbg !5969
  %call1 = call %union.tree_node* @get_canon_type(%union.tree_node* %1, i8 zeroext 0, i8 zeroext 0), !dbg !5970
  store %union.tree_node* %call1, %union.tree_node** %to_type.addr, align 8, !dbg !5971
  %2 = load %union.tree_node*, %union.tree_node** %from_type.addr, align 8, !dbg !5972
  %tobool = icmp ne %union.tree_node* %2, null, !dbg !5972
  br i1 %tobool, label %lor.lhs.false, label %if.then, !dbg !5974

lor.lhs.false:                                    ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %to_type.addr, align 8, !dbg !5975
  %tobool2 = icmp ne %union.tree_node* %3, null, !dbg !5975
  br i1 %tobool2, label %if.end, label %if.then, !dbg !5976

if.then:                                          ; preds = %lor.lhs.false, %entry
  br label %return, !dbg !5977

if.end:                                           ; preds = %lor.lhs.false
  %4 = load %union.tree_node*, %union.tree_node** %from_type.addr, align 8, !dbg !5978
  %type = bitcast %union.tree_node* %4 to %struct.tree_type*, !dbg !5978
  %uid = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type, i32 0, i32 5, !dbg !5978
  %5 = load i32, i32* %uid, align 8, !dbg !5978
  store i32 %5, i32* %from_uid, align 4, !dbg !5979
  %6 = load %union.tree_node*, %union.tree_node** %to_type.addr, align 8, !dbg !5980
  %type3 = bitcast %union.tree_node* %6 to %struct.tree_type*, !dbg !5980
  %uid4 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type3, i32 0, i32 5, !dbg !5980
  %7 = load i32, i32* %uid4, align 8, !dbg !5980
  store i32 %7, i32* %to_uid, align 4, !dbg !5981
  %8 = load %union.tree_node*, %union.tree_node** %from_type.addr, align 8, !dbg !5982
  %call5 = call i32 @ipa_type_escape_star_count_of_interesting_type(%union.tree_node* %8), !dbg !5982
  %cmp = icmp eq i32 %call5, 0, !dbg !5982
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !5982

cond.true:                                        ; preds = %if.end
  call void @fancy_abort(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.2, i64 0, i64 0), i32 1170, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !5982
  br label %cond.end, !dbg !5982

cond.false:                                       ; preds = %if.end
  br label %cond.end, !dbg !5982

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !5982
  %9 = load %struct.splay_tree_s*, %struct.splay_tree_s** @uid_to_addressof_down_map, align 8, !dbg !5983
  %10 = load i32, i32* %from_uid, align 4, !dbg !5984
  %conv = sext i32 %10 to i64, !dbg !5985
  %call6 = call %struct.splay_tree_node_s* @splay_tree_lookup(%struct.splay_tree_s* %9, i64 %conv), !dbg !5986
  store %struct.splay_tree_node_s* %call6, %struct.splay_tree_node_s** %result, align 8, !dbg !5987
  %11 = load %struct.splay_tree_node_s*, %struct.splay_tree_node_s** %result, align 8, !dbg !5988
  %tobool7 = icmp ne %struct.splay_tree_node_s* %11, null, !dbg !5988
  br i1 %tobool7, label %if.then8, label %if.else, !dbg !5990

if.then8:                                         ; preds = %cond.end
  %12 = load %struct.splay_tree_node_s*, %struct.splay_tree_node_s** %result, align 8, !dbg !5991
  %value = getelementptr inbounds %struct.splay_tree_node_s, %struct.splay_tree_node_s* %12, i32 0, i32 1, !dbg !5992
  %13 = load i64, i64* %value, align 8, !dbg !5992
  %14 = inttoptr i64 %13 to %struct.bitmap_head_def*, !dbg !5993
  store %struct.bitmap_head_def* %14, %struct.bitmap_head_def** %type_map, align 8, !dbg !5994
  br label %if.end12, !dbg !5995

if.else:                                          ; preds = %cond.end
  %call9 = call %struct.bitmap_head_def* @bitmap_obstack_alloc_stat(%struct.bitmap_obstack* @ipa_obstack), !dbg !5996
  store %struct.bitmap_head_def* %call9, %struct.bitmap_head_def** %type_map, align 8, !dbg !5998
  %15 = load %struct.splay_tree_s*, %struct.splay_tree_s** @uid_to_addressof_down_map, align 8, !dbg !5999
  %16 = load i32, i32* %from_uid, align 4, !dbg !6000
  %conv10 = sext i32 %16 to i64, !dbg !6000
  %17 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %type_map, align 8, !dbg !6001
  %18 = ptrtoint %struct.bitmap_head_def* %17 to i64, !dbg !6002
  %call11 = call %struct.splay_tree_node_s* @splay_tree_insert(%struct.splay_tree_s* %15, i64 %conv10, i64 %18), !dbg !6003
  br label %if.end12

if.end12:                                         ; preds = %if.else, %if.then8
  %19 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %type_map, align 8, !dbg !6004
  %20 = load %union.tree_node*, %union.tree_node** %to_type.addr, align 8, !dbg !6005
  %type13 = bitcast %union.tree_node* %20 to %struct.tree_type*, !dbg !6005
  %uid14 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type13, i32 0, i32 5, !dbg !6005
  %21 = load i32, i32* %uid14, align 8, !dbg !6005
  %call15 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %19, i32 %21), !dbg !6006
  %22 = load %struct.splay_tree_s*, %struct.splay_tree_s** @uid_to_addressof_up_map, align 8, !dbg !6007
  %23 = load i32, i32* %to_uid, align 4, !dbg !6008
  %conv16 = sext i32 %23 to i64, !dbg !6009
  %call17 = call %struct.splay_tree_node_s* @splay_tree_lookup(%struct.splay_tree_s* %22, i64 %conv16), !dbg !6010
  store %struct.splay_tree_node_s* %call17, %struct.splay_tree_node_s** %result, align 8, !dbg !6011
  %24 = load %struct.splay_tree_node_s*, %struct.splay_tree_node_s** %result, align 8, !dbg !6012
  %tobool18 = icmp ne %struct.splay_tree_node_s* %24, null, !dbg !6012
  br i1 %tobool18, label %if.then19, label %if.else21, !dbg !6014

if.then19:                                        ; preds = %if.end12
  %25 = load %struct.splay_tree_node_s*, %struct.splay_tree_node_s** %result, align 8, !dbg !6015
  %value20 = getelementptr inbounds %struct.splay_tree_node_s, %struct.splay_tree_node_s* %25, i32 0, i32 1, !dbg !6016
  %26 = load i64, i64* %value20, align 8, !dbg !6016
  %27 = inttoptr i64 %26 to %struct.bitmap_head_def*, !dbg !6017
  store %struct.bitmap_head_def* %27, %struct.bitmap_head_def** %type_map, align 8, !dbg !6018
  br label %if.end25, !dbg !6019

if.else21:                                        ; preds = %if.end12
  %call22 = call %struct.bitmap_head_def* @bitmap_obstack_alloc_stat(%struct.bitmap_obstack* @ipa_obstack), !dbg !6020
  store %struct.bitmap_head_def* %call22, %struct.bitmap_head_def** %type_map, align 8, !dbg !6022
  %28 = load %struct.splay_tree_s*, %struct.splay_tree_s** @uid_to_addressof_up_map, align 8, !dbg !6023
  %29 = load i32, i32* %to_uid, align 4, !dbg !6024
  %conv23 = sext i32 %29 to i64, !dbg !6024
  %30 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %type_map, align 8, !dbg !6025
  %31 = ptrtoint %struct.bitmap_head_def* %30 to i64, !dbg !6026
  %call24 = call %struct.splay_tree_node_s* @splay_tree_insert(%struct.splay_tree_s* %28, i64 %conv23, i64 %31), !dbg !6027
  br label %if.end25

if.end25:                                         ; preds = %if.else21, %if.then19
  %32 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %type_map, align 8, !dbg !6028
  %33 = load %union.tree_node*, %union.tree_node** %from_type.addr, align 8, !dbg !6029
  %type26 = bitcast %union.tree_node* %33 to %struct.tree_type*, !dbg !6029
  %uid27 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type26, i32 0, i32 5, !dbg !6029
  %34 = load i32, i32* %uid27, align 8, !dbg !6029
  %call28 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %32, i32 %34), !dbg !6030
  br label %return, !dbg !6031

return:                                           ; preds = %if.end25, %if.then
  ret void, !dbg !6031
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_call_fndecl(%union.gimple_statement_d* %gs) #0 !dbg !6032 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6033, metadata !DIExpression()), !dbg !6034
  call void @llvm.dbg.declare(metadata %union.tree_node** %addr, metadata !6035, metadata !DIExpression()), !dbg !6036
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6037
  %call = call %union.tree_node* @gimple_call_fn(%union.gimple_statement_d* %0), !dbg !6038
  store %union.tree_node* %call, %union.tree_node** %addr, align 8, !dbg !6036
  %1 = load %union.tree_node*, %union.tree_node** %addr, align 8, !dbg !6039
  %base = bitcast %union.tree_node* %1 to %struct.tree_base*, !dbg !6039
  %2 = bitcast %struct.tree_base* %base to i64*, !dbg !6039
  %bf.load = load i64, i64* %2, align 8, !dbg !6039
  %bf.clear = and i64 %bf.load, 65535, !dbg !6039
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !6039
  %cmp = icmp eq i32 %bf.cast, 121, !dbg !6041
  br i1 %cmp, label %if.then, label %if.end, !dbg !6042

if.then:                                          ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %addr, align 8, !dbg !6043
  %exp = bitcast %union.tree_node* %3 to %struct.tree_exp*, !dbg !6043
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !6043
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !6043
  %4 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !6043
  store %union.tree_node* %4, %union.tree_node** %retval, align 8, !dbg !6044
  br label %return, !dbg !6044

if.end:                                           ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !6045
  br label %return, !dbg !6045

return:                                           ; preds = %if.end, %if.then
  %5 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !6046
  ret %union.tree_node* %5, !dbg !6046
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_call_num_args(%union.gimple_statement_d* %gs) #0 !dbg !6047 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %num_ops = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6048, metadata !DIExpression()), !dbg !6049
  call void @llvm.dbg.declare(metadata i32* %num_ops, metadata !6050, metadata !DIExpression()), !dbg !6051
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6052
  %call = call i32 @gimple_num_ops(%union.gimple_statement_d* %0), !dbg !6053
  store i32 %call, i32* %num_ops, align 4, !dbg !6054
  %1 = load i32, i32* %num_ops, align 4, !dbg !6055
  %sub = sub i32 %1, 3, !dbg !6056
  ret i32 %sub, !dbg !6057
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_call_arg(%union.gimple_statement_d* %gs, i32 %index) #0 !dbg !6058 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %index.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6059, metadata !DIExpression()), !dbg !6060
  store i32 %index, i32* %index.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %index.addr, metadata !6061, metadata !DIExpression()), !dbg !6062
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6063
  %1 = load i32, i32* %index.addr, align 4, !dbg !6064
  %add = add i32 %1, 3, !dbg !6065
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 %add), !dbg !6066
  ret %union.tree_node* %call, !dbg !6067
}

declare dso_local %struct.cgraph_node* @cgraph_node(%union.tree_node*) #2

declare dso_local i32 @cgraph_function_body_availability(%struct.cgraph_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_call_fn(%union.gimple_statement_d* %gs) #0 !dbg !6068 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6069, metadata !DIExpression()), !dbg !6070
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6071
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 1), !dbg !6072
  ret %union.tree_node* %call, !dbg !6073
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_asm_noutputs(%union.gimple_statement_d* %gs) #0 !dbg !6074 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6075, metadata !DIExpression()), !dbg !6076
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6077
  %gimple_asm = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_asm*, !dbg !6078
  %no = getelementptr inbounds %struct.gimple_statement_asm, %struct.gimple_statement_asm* %gimple_asm, i32 0, i32 3, !dbg !6079
  %1 = load i8, i8* %no, align 1, !dbg !6079
  %conv = zext i8 %1 to i32, !dbg !6077
  ret i32 %conv, !dbg !6080
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_asm_output_op(%union.gimple_statement_d* %gs, i32 %index) #0 !dbg !6081 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %index.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6082, metadata !DIExpression()), !dbg !6083
  store i32 %index, i32* %index.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %index.addr, metadata !6084, metadata !DIExpression()), !dbg !6085
  %0 = load i32, i32* %index.addr, align 4, !dbg !6086
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6086
  %gimple_asm = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_asm*, !dbg !6086
  %no = getelementptr inbounds %struct.gimple_statement_asm, %struct.gimple_statement_asm* %gimple_asm, i32 0, i32 3, !dbg !6086
  %2 = load i8, i8* %no, align 1, !dbg !6086
  %conv = zext i8 %2 to i32, !dbg !6086
  %cmp = icmp ule i32 %0, %conv, !dbg !6086
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !6086

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.4, i64 0, i64 0), i32 2655, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !6086
  br label %cond.end, !dbg !6086

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6086

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6086
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6087
  %4 = load i32, i32* %index.addr, align 4, !dbg !6088
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6089
  %gimple_asm2 = bitcast %union.gimple_statement_d* %5 to %struct.gimple_statement_asm*, !dbg !6090
  %ni = getelementptr inbounds %struct.gimple_statement_asm, %struct.gimple_statement_asm* %gimple_asm2, i32 0, i32 2, !dbg !6091
  %6 = load i8, i8* %ni, align 8, !dbg !6091
  %conv3 = zext i8 %6 to i32, !dbg !6089
  %add = add i32 %4, %conv3, !dbg !6092
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %3, i32 %add), !dbg !6093
  ret %union.tree_node* %call, !dbg !6094
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_asm_ninputs(%union.gimple_statement_d* %gs) #0 !dbg !6095 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6096, metadata !DIExpression()), !dbg !6097
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6098
  %gimple_asm = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_asm*, !dbg !6099
  %ni = getelementptr inbounds %struct.gimple_statement_asm, %struct.gimple_statement_asm* %gimple_asm, i32 0, i32 2, !dbg !6100
  %1 = load i8, i8* %ni, align 8, !dbg !6100
  %conv = zext i8 %1 to i32, !dbg !6098
  ret i32 %conv, !dbg !6101
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_asm_input_op(%union.gimple_statement_d* %gs, i32 %index) #0 !dbg !6102 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %index.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6103, metadata !DIExpression()), !dbg !6104
  store i32 %index, i32* %index.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %index.addr, metadata !6105, metadata !DIExpression()), !dbg !6106
  %0 = load i32, i32* %index.addr, align 4, !dbg !6107
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6107
  %gimple_asm = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_asm*, !dbg !6107
  %ni = getelementptr inbounds %struct.gimple_statement_asm, %struct.gimple_statement_asm* %gimple_asm, i32 0, i32 2, !dbg !6107
  %2 = load i8, i8* %ni, align 8, !dbg !6107
  %conv = zext i8 %2 to i32, !dbg !6107
  %cmp = icmp ule i32 %0, %conv, !dbg !6107
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !6107

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.4, i64 0, i64 0), i32 2622, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !6107
  br label %cond.end, !dbg !6107

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6107

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6107
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6108
  %4 = load i32, i32* %index.addr, align 4, !dbg !6109
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %3, i32 %4), !dbg !6110
  ret %union.tree_node* %call, !dbg !6111
}

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.label(metadata) #1

; Function Attrs: noinline nounwind uwtable
define internal %struct.bitmap_head_def* @subtype_map_for_uid(i32 %uid, i8 zeroext %create) #0 !dbg !6112 {
entry:
  %retval = alloca %struct.bitmap_head_def*, align 8
  %uid.addr = alloca i32, align 4
  %create.addr = alloca i8, align 1
  %result = alloca %struct.splay_tree_node_s*, align 8
  %subtype_map = alloca %struct.bitmap_head_def*, align 8
  store i32 %uid, i32* %uid.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %uid.addr, metadata !6115, metadata !DIExpression()), !dbg !6116
  store i8 %create, i8* %create.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %create.addr, metadata !6117, metadata !DIExpression()), !dbg !6118
  call void @llvm.dbg.declare(metadata %struct.splay_tree_node_s** %result, metadata !6119, metadata !DIExpression()), !dbg !6120
  %0 = load %struct.splay_tree_s*, %struct.splay_tree_s** @uid_to_subtype_map, align 8, !dbg !6121
  %1 = load i32, i32* %uid.addr, align 4, !dbg !6122
  %conv = sext i32 %1 to i64, !dbg !6123
  %call = call %struct.splay_tree_node_s* @splay_tree_lookup(%struct.splay_tree_s* %0, i64 %conv), !dbg !6124
  store %struct.splay_tree_node_s* %call, %struct.splay_tree_node_s** %result, align 8, !dbg !6120
  %2 = load %struct.splay_tree_node_s*, %struct.splay_tree_node_s** %result, align 8, !dbg !6125
  %tobool = icmp ne %struct.splay_tree_node_s* %2, null, !dbg !6125
  br i1 %tobool, label %if.then, label %if.else, !dbg !6127

if.then:                                          ; preds = %entry
  %3 = load %struct.splay_tree_node_s*, %struct.splay_tree_node_s** %result, align 8, !dbg !6128
  %value = getelementptr inbounds %struct.splay_tree_node_s, %struct.splay_tree_node_s* %3, i32 0, i32 1, !dbg !6129
  %4 = load i64, i64* %value, align 8, !dbg !6129
  %5 = inttoptr i64 %4 to %struct.bitmap_head_def*, !dbg !6130
  store %struct.bitmap_head_def* %5, %struct.bitmap_head_def** %retval, align 8, !dbg !6131
  br label %return, !dbg !6131

if.else:                                          ; preds = %entry
  %6 = load i8, i8* %create.addr, align 1, !dbg !6132
  %tobool1 = icmp ne i8 %6, 0, !dbg !6132
  br i1 %tobool1, label %if.then2, label %if.else6, !dbg !6134

if.then2:                                         ; preds = %if.else
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %subtype_map, metadata !6135, metadata !DIExpression()), !dbg !6137
  %call3 = call %struct.bitmap_head_def* @bitmap_obstack_alloc_stat(%struct.bitmap_obstack* @ipa_obstack), !dbg !6138
  store %struct.bitmap_head_def* %call3, %struct.bitmap_head_def** %subtype_map, align 8, !dbg !6137
  %7 = load %struct.splay_tree_s*, %struct.splay_tree_s** @uid_to_subtype_map, align 8, !dbg !6139
  %8 = load i32, i32* %uid.addr, align 4, !dbg !6140
  %conv4 = sext i32 %8 to i64, !dbg !6140
  %9 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %subtype_map, align 8, !dbg !6141
  %10 = ptrtoint %struct.bitmap_head_def* %9 to i64, !dbg !6142
  %call5 = call %struct.splay_tree_node_s* @splay_tree_insert(%struct.splay_tree_s* %7, i64 %conv4, i64 %10), !dbg !6143
  %11 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %subtype_map, align 8, !dbg !6144
  store %struct.bitmap_head_def* %11, %struct.bitmap_head_def** %retval, align 8, !dbg !6145
  br label %return, !dbg !6145

if.else6:                                         ; preds = %if.else
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** %retval, align 8, !dbg !6146
  br label %return, !dbg !6146

return:                                           ; preds = %if.else6, %if.then2, %if.then
  %12 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %retval, align 8, !dbg !6147
  ret %struct.bitmap_head_def* %12, !dbg !6147
}

declare dso_local zeroext i8 @bitmap_ior_into(%struct.bitmap_head_def*, %struct.bitmap_head_def*) #2

attributes #0 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }

!llvm.dbg.cu = !{!2}
!llvm.module.flags = !{!2028, !2029, !2030}
!llvm.ident = !{!2031}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "initialized", scope: !2, file: !3, line: 61, type: !902, isLocal: true, isDefinition: true)
!2 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 10.0.1 (https://github.com/svkeerthy/IR2Vec-LoopOptimizationFramework.git 561ac470e63b728263a0ac06ef987886ac648486)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !732, globals: !1933, splitDebugInlining: false, nameTableKind: None)
!3 = !DIFile(filename: "ipa-type-escape.c", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!4 = !{!5, !201, !207, !212, !217, !235, !242, !249, !262, !269, !445, !484, !491, !502, !506, !532, !538, !554, !577, !711, !725}
!5 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_code", file: !6, line: 39, baseType: !7, size: 32, elements: !8)
!6 = !DIFile(filename: "./tree.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!7 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!8 = !{!9, !10, !11, !12, !13, !14, !15, !16, !17, !18, !19, !20, !21, !22, !23, !24, !25, !26, !27, !28, !29, !30, !31, !32, !33, !34, !35, !36, !37, !38, !39, !40, !41, !42, !43, !44, !45, !46, !47, !48, !49, !50, !51, !52, !53, !54, !55, !56, !57, !58, !59, !60, !61, !62, !63, !64, !65, !66, !67, !68, !69, !70, !71, !72, !73, !74, !75, !76, !77, !78, !79, !80, !81, !82, !83, !84, !85, !86, !87, !88, !89, !90, !91, !92, !93, !94, !95, !96, !97, !98, !99, !100, !101, !102, !103, !104, !105, !106, !107, !108, !109, !110, !111, !112, !113, !114, !115, !116, !117, !118, !119, !120, !121, !122, !123, !124, !125, !126, !127, !128, !129, !130, !131, !132, !133, !134, !135, !136, !137, !138, !139, !140, !141, !142, !143, !144, !145, !146, !147, !148, !149, !150, !151, !152, !153, !154, !155, !156, !157, !158, !159, !160, !161, !162, !163, !164, !165, !166, !167, !168, !169, !170, !171, !172, !173, !174, !175, !176, !177, !178, !179, !180, !181, !182, !183, !184, !185, !186, !187, !188, !189, !190, !191, !192, !193, !194, !195, !196, !197, !198, !199, !200}
!9 = !DIEnumerator(name: "ERROR_MARK", value: 0, isUnsigned: true)
!10 = !DIEnumerator(name: "IDENTIFIER_NODE", value: 1, isUnsigned: true)
!11 = !DIEnumerator(name: "TREE_LIST", value: 2, isUnsigned: true)
!12 = !DIEnumerator(name: "TREE_VEC", value: 3, isUnsigned: true)
!13 = !DIEnumerator(name: "BLOCK", value: 4, isUnsigned: true)
!14 = !DIEnumerator(name: "OFFSET_TYPE", value: 5, isUnsigned: true)
!15 = !DIEnumerator(name: "ENUMERAL_TYPE", value: 6, isUnsigned: true)
!16 = !DIEnumerator(name: "BOOLEAN_TYPE", value: 7, isUnsigned: true)
!17 = !DIEnumerator(name: "INTEGER_TYPE", value: 8, isUnsigned: true)
!18 = !DIEnumerator(name: "REAL_TYPE", value: 9, isUnsigned: true)
!19 = !DIEnumerator(name: "POINTER_TYPE", value: 10, isUnsigned: true)
!20 = !DIEnumerator(name: "FIXED_POINT_TYPE", value: 11, isUnsigned: true)
!21 = !DIEnumerator(name: "REFERENCE_TYPE", value: 12, isUnsigned: true)
!22 = !DIEnumerator(name: "COMPLEX_TYPE", value: 13, isUnsigned: true)
!23 = !DIEnumerator(name: "VECTOR_TYPE", value: 14, isUnsigned: true)
!24 = !DIEnumerator(name: "ARRAY_TYPE", value: 15, isUnsigned: true)
!25 = !DIEnumerator(name: "RECORD_TYPE", value: 16, isUnsigned: true)
!26 = !DIEnumerator(name: "UNION_TYPE", value: 17, isUnsigned: true)
!27 = !DIEnumerator(name: "QUAL_UNION_TYPE", value: 18, isUnsigned: true)
!28 = !DIEnumerator(name: "VOID_TYPE", value: 19, isUnsigned: true)
!29 = !DIEnumerator(name: "FUNCTION_TYPE", value: 20, isUnsigned: true)
!30 = !DIEnumerator(name: "METHOD_TYPE", value: 21, isUnsigned: true)
!31 = !DIEnumerator(name: "LANG_TYPE", value: 22, isUnsigned: true)
!32 = !DIEnumerator(name: "INTEGER_CST", value: 23, isUnsigned: true)
!33 = !DIEnumerator(name: "REAL_CST", value: 24, isUnsigned: true)
!34 = !DIEnumerator(name: "FIXED_CST", value: 25, isUnsigned: true)
!35 = !DIEnumerator(name: "COMPLEX_CST", value: 26, isUnsigned: true)
!36 = !DIEnumerator(name: "VECTOR_CST", value: 27, isUnsigned: true)
!37 = !DIEnumerator(name: "STRING_CST", value: 28, isUnsigned: true)
!38 = !DIEnumerator(name: "FUNCTION_DECL", value: 29, isUnsigned: true)
!39 = !DIEnumerator(name: "LABEL_DECL", value: 30, isUnsigned: true)
!40 = !DIEnumerator(name: "FIELD_DECL", value: 31, isUnsigned: true)
!41 = !DIEnumerator(name: "VAR_DECL", value: 32, isUnsigned: true)
!42 = !DIEnumerator(name: "CONST_DECL", value: 33, isUnsigned: true)
!43 = !DIEnumerator(name: "PARM_DECL", value: 34, isUnsigned: true)
!44 = !DIEnumerator(name: "TYPE_DECL", value: 35, isUnsigned: true)
!45 = !DIEnumerator(name: "RESULT_DECL", value: 36, isUnsigned: true)
!46 = !DIEnumerator(name: "DEBUG_EXPR_DECL", value: 37, isUnsigned: true)
!47 = !DIEnumerator(name: "NAMESPACE_DECL", value: 38, isUnsigned: true)
!48 = !DIEnumerator(name: "IMPORTED_DECL", value: 39, isUnsigned: true)
!49 = !DIEnumerator(name: "TRANSLATION_UNIT_DECL", value: 40, isUnsigned: true)
!50 = !DIEnumerator(name: "COMPONENT_REF", value: 41, isUnsigned: true)
!51 = !DIEnumerator(name: "BIT_FIELD_REF", value: 42, isUnsigned: true)
!52 = !DIEnumerator(name: "REALPART_EXPR", value: 43, isUnsigned: true)
!53 = !DIEnumerator(name: "IMAGPART_EXPR", value: 44, isUnsigned: true)
!54 = !DIEnumerator(name: "ARRAY_REF", value: 45, isUnsigned: true)
!55 = !DIEnumerator(name: "ARRAY_RANGE_REF", value: 46, isUnsigned: true)
!56 = !DIEnumerator(name: "INDIRECT_REF", value: 47, isUnsigned: true)
!57 = !DIEnumerator(name: "ALIGN_INDIRECT_REF", value: 48, isUnsigned: true)
!58 = !DIEnumerator(name: "MISALIGNED_INDIRECT_REF", value: 49, isUnsigned: true)
!59 = !DIEnumerator(name: "OBJ_TYPE_REF", value: 50, isUnsigned: true)
!60 = !DIEnumerator(name: "CONSTRUCTOR", value: 51, isUnsigned: true)
!61 = !DIEnumerator(name: "COMPOUND_EXPR", value: 52, isUnsigned: true)
!62 = !DIEnumerator(name: "MODIFY_EXPR", value: 53, isUnsigned: true)
!63 = !DIEnumerator(name: "INIT_EXPR", value: 54, isUnsigned: true)
!64 = !DIEnumerator(name: "TARGET_EXPR", value: 55, isUnsigned: true)
!65 = !DIEnumerator(name: "COND_EXPR", value: 56, isUnsigned: true)
!66 = !DIEnumerator(name: "VEC_COND_EXPR", value: 57, isUnsigned: true)
!67 = !DIEnumerator(name: "BIND_EXPR", value: 58, isUnsigned: true)
!68 = !DIEnumerator(name: "CALL_EXPR", value: 59, isUnsigned: true)
!69 = !DIEnumerator(name: "WITH_CLEANUP_EXPR", value: 60, isUnsigned: true)
!70 = !DIEnumerator(name: "CLEANUP_POINT_EXPR", value: 61, isUnsigned: true)
!71 = !DIEnumerator(name: "PLACEHOLDER_EXPR", value: 62, isUnsigned: true)
!72 = !DIEnumerator(name: "PLUS_EXPR", value: 63, isUnsigned: true)
!73 = !DIEnumerator(name: "MINUS_EXPR", value: 64, isUnsigned: true)
!74 = !DIEnumerator(name: "MULT_EXPR", value: 65, isUnsigned: true)
!75 = !DIEnumerator(name: "POINTER_PLUS_EXPR", value: 66, isUnsigned: true)
!76 = !DIEnumerator(name: "TRUNC_DIV_EXPR", value: 67, isUnsigned: true)
!77 = !DIEnumerator(name: "CEIL_DIV_EXPR", value: 68, isUnsigned: true)
!78 = !DIEnumerator(name: "FLOOR_DIV_EXPR", value: 69, isUnsigned: true)
!79 = !DIEnumerator(name: "ROUND_DIV_EXPR", value: 70, isUnsigned: true)
!80 = !DIEnumerator(name: "TRUNC_MOD_EXPR", value: 71, isUnsigned: true)
!81 = !DIEnumerator(name: "CEIL_MOD_EXPR", value: 72, isUnsigned: true)
!82 = !DIEnumerator(name: "FLOOR_MOD_EXPR", value: 73, isUnsigned: true)
!83 = !DIEnumerator(name: "ROUND_MOD_EXPR", value: 74, isUnsigned: true)
!84 = !DIEnumerator(name: "RDIV_EXPR", value: 75, isUnsigned: true)
!85 = !DIEnumerator(name: "EXACT_DIV_EXPR", value: 76, isUnsigned: true)
!86 = !DIEnumerator(name: "FIX_TRUNC_EXPR", value: 77, isUnsigned: true)
!87 = !DIEnumerator(name: "FLOAT_EXPR", value: 78, isUnsigned: true)
!88 = !DIEnumerator(name: "NEGATE_EXPR", value: 79, isUnsigned: true)
!89 = !DIEnumerator(name: "MIN_EXPR", value: 80, isUnsigned: true)
!90 = !DIEnumerator(name: "MAX_EXPR", value: 81, isUnsigned: true)
!91 = !DIEnumerator(name: "ABS_EXPR", value: 82, isUnsigned: true)
!92 = !DIEnumerator(name: "LSHIFT_EXPR", value: 83, isUnsigned: true)
!93 = !DIEnumerator(name: "RSHIFT_EXPR", value: 84, isUnsigned: true)
!94 = !DIEnumerator(name: "LROTATE_EXPR", value: 85, isUnsigned: true)
!95 = !DIEnumerator(name: "RROTATE_EXPR", value: 86, isUnsigned: true)
!96 = !DIEnumerator(name: "BIT_IOR_EXPR", value: 87, isUnsigned: true)
!97 = !DIEnumerator(name: "BIT_XOR_EXPR", value: 88, isUnsigned: true)
!98 = !DIEnumerator(name: "BIT_AND_EXPR", value: 89, isUnsigned: true)
!99 = !DIEnumerator(name: "BIT_NOT_EXPR", value: 90, isUnsigned: true)
!100 = !DIEnumerator(name: "TRUTH_ANDIF_EXPR", value: 91, isUnsigned: true)
!101 = !DIEnumerator(name: "TRUTH_ORIF_EXPR", value: 92, isUnsigned: true)
!102 = !DIEnumerator(name: "TRUTH_AND_EXPR", value: 93, isUnsigned: true)
!103 = !DIEnumerator(name: "TRUTH_OR_EXPR", value: 94, isUnsigned: true)
!104 = !DIEnumerator(name: "TRUTH_XOR_EXPR", value: 95, isUnsigned: true)
!105 = !DIEnumerator(name: "TRUTH_NOT_EXPR", value: 96, isUnsigned: true)
!106 = !DIEnumerator(name: "LT_EXPR", value: 97, isUnsigned: true)
!107 = !DIEnumerator(name: "LE_EXPR", value: 98, isUnsigned: true)
!108 = !DIEnumerator(name: "GT_EXPR", value: 99, isUnsigned: true)
!109 = !DIEnumerator(name: "GE_EXPR", value: 100, isUnsigned: true)
!110 = !DIEnumerator(name: "EQ_EXPR", value: 101, isUnsigned: true)
!111 = !DIEnumerator(name: "NE_EXPR", value: 102, isUnsigned: true)
!112 = !DIEnumerator(name: "UNORDERED_EXPR", value: 103, isUnsigned: true)
!113 = !DIEnumerator(name: "ORDERED_EXPR", value: 104, isUnsigned: true)
!114 = !DIEnumerator(name: "UNLT_EXPR", value: 105, isUnsigned: true)
!115 = !DIEnumerator(name: "UNLE_EXPR", value: 106, isUnsigned: true)
!116 = !DIEnumerator(name: "UNGT_EXPR", value: 107, isUnsigned: true)
!117 = !DIEnumerator(name: "UNGE_EXPR", value: 108, isUnsigned: true)
!118 = !DIEnumerator(name: "UNEQ_EXPR", value: 109, isUnsigned: true)
!119 = !DIEnumerator(name: "LTGT_EXPR", value: 110, isUnsigned: true)
!120 = !DIEnumerator(name: "RANGE_EXPR", value: 111, isUnsigned: true)
!121 = !DIEnumerator(name: "PAREN_EXPR", value: 112, isUnsigned: true)
!122 = !DIEnumerator(name: "CONVERT_EXPR", value: 113, isUnsigned: true)
!123 = !DIEnumerator(name: "ADDR_SPACE_CONVERT_EXPR", value: 114, isUnsigned: true)
!124 = !DIEnumerator(name: "FIXED_CONVERT_EXPR", value: 115, isUnsigned: true)
!125 = !DIEnumerator(name: "NOP_EXPR", value: 116, isUnsigned: true)
!126 = !DIEnumerator(name: "NON_LVALUE_EXPR", value: 117, isUnsigned: true)
!127 = !DIEnumerator(name: "VIEW_CONVERT_EXPR", value: 118, isUnsigned: true)
!128 = !DIEnumerator(name: "COMPOUND_LITERAL_EXPR", value: 119, isUnsigned: true)
!129 = !DIEnumerator(name: "SAVE_EXPR", value: 120, isUnsigned: true)
!130 = !DIEnumerator(name: "ADDR_EXPR", value: 121, isUnsigned: true)
!131 = !DIEnumerator(name: "FDESC_EXPR", value: 122, isUnsigned: true)
!132 = !DIEnumerator(name: "COMPLEX_EXPR", value: 123, isUnsigned: true)
!133 = !DIEnumerator(name: "CONJ_EXPR", value: 124, isUnsigned: true)
!134 = !DIEnumerator(name: "PREDECREMENT_EXPR", value: 125, isUnsigned: true)
!135 = !DIEnumerator(name: "PREINCREMENT_EXPR", value: 126, isUnsigned: true)
!136 = !DIEnumerator(name: "POSTDECREMENT_EXPR", value: 127, isUnsigned: true)
!137 = !DIEnumerator(name: "POSTINCREMENT_EXPR", value: 128, isUnsigned: true)
!138 = !DIEnumerator(name: "VA_ARG_EXPR", value: 129, isUnsigned: true)
!139 = !DIEnumerator(name: "TRY_CATCH_EXPR", value: 130, isUnsigned: true)
!140 = !DIEnumerator(name: "TRY_FINALLY_EXPR", value: 131, isUnsigned: true)
!141 = !DIEnumerator(name: "DECL_EXPR", value: 132, isUnsigned: true)
!142 = !DIEnumerator(name: "LABEL_EXPR", value: 133, isUnsigned: true)
!143 = !DIEnumerator(name: "GOTO_EXPR", value: 134, isUnsigned: true)
!144 = !DIEnumerator(name: "RETURN_EXPR", value: 135, isUnsigned: true)
!145 = !DIEnumerator(name: "EXIT_EXPR", value: 136, isUnsigned: true)
!146 = !DIEnumerator(name: "LOOP_EXPR", value: 137, isUnsigned: true)
!147 = !DIEnumerator(name: "SWITCH_EXPR", value: 138, isUnsigned: true)
!148 = !DIEnumerator(name: "CASE_LABEL_EXPR", value: 139, isUnsigned: true)
!149 = !DIEnumerator(name: "ASM_EXPR", value: 140, isUnsigned: true)
!150 = !DIEnumerator(name: "SSA_NAME", value: 141, isUnsigned: true)
!151 = !DIEnumerator(name: "CATCH_EXPR", value: 142, isUnsigned: true)
!152 = !DIEnumerator(name: "EH_FILTER_EXPR", value: 143, isUnsigned: true)
!153 = !DIEnumerator(name: "SCEV_KNOWN", value: 144, isUnsigned: true)
!154 = !DIEnumerator(name: "SCEV_NOT_KNOWN", value: 145, isUnsigned: true)
!155 = !DIEnumerator(name: "POLYNOMIAL_CHREC", value: 146, isUnsigned: true)
!156 = !DIEnumerator(name: "STATEMENT_LIST", value: 147, isUnsigned: true)
!157 = !DIEnumerator(name: "ASSERT_EXPR", value: 148, isUnsigned: true)
!158 = !DIEnumerator(name: "TREE_BINFO", value: 149, isUnsigned: true)
!159 = !DIEnumerator(name: "WITH_SIZE_EXPR", value: 150, isUnsigned: true)
!160 = !DIEnumerator(name: "REALIGN_LOAD_EXPR", value: 151, isUnsigned: true)
!161 = !DIEnumerator(name: "TARGET_MEM_REF", value: 152, isUnsigned: true)
!162 = !DIEnumerator(name: "OMP_PARALLEL", value: 153, isUnsigned: true)
!163 = !DIEnumerator(name: "OMP_TASK", value: 154, isUnsigned: true)
!164 = !DIEnumerator(name: "OMP_FOR", value: 155, isUnsigned: true)
!165 = !DIEnumerator(name: "OMP_SECTIONS", value: 156, isUnsigned: true)
!166 = !DIEnumerator(name: "OMP_SINGLE", value: 157, isUnsigned: true)
!167 = !DIEnumerator(name: "OMP_SECTION", value: 158, isUnsigned: true)
!168 = !DIEnumerator(name: "OMP_MASTER", value: 159, isUnsigned: true)
!169 = !DIEnumerator(name: "OMP_ORDERED", value: 160, isUnsigned: true)
!170 = !DIEnumerator(name: "OMP_CRITICAL", value: 161, isUnsigned: true)
!171 = !DIEnumerator(name: "OMP_ATOMIC", value: 162, isUnsigned: true)
!172 = !DIEnumerator(name: "OMP_CLAUSE", value: 163, isUnsigned: true)
!173 = !DIEnumerator(name: "REDUC_MAX_EXPR", value: 164, isUnsigned: true)
!174 = !DIEnumerator(name: "REDUC_MIN_EXPR", value: 165, isUnsigned: true)
!175 = !DIEnumerator(name: "REDUC_PLUS_EXPR", value: 166, isUnsigned: true)
!176 = !DIEnumerator(name: "DOT_PROD_EXPR", value: 167, isUnsigned: true)
!177 = !DIEnumerator(name: "WIDEN_SUM_EXPR", value: 168, isUnsigned: true)
!178 = !DIEnumerator(name: "WIDEN_MULT_EXPR", value: 169, isUnsigned: true)
!179 = !DIEnumerator(name: "VEC_LSHIFT_EXPR", value: 170, isUnsigned: true)
!180 = !DIEnumerator(name: "VEC_RSHIFT_EXPR", value: 171, isUnsigned: true)
!181 = !DIEnumerator(name: "VEC_WIDEN_MULT_HI_EXPR", value: 172, isUnsigned: true)
!182 = !DIEnumerator(name: "VEC_WIDEN_MULT_LO_EXPR", value: 173, isUnsigned: true)
!183 = !DIEnumerator(name: "VEC_UNPACK_HI_EXPR", value: 174, isUnsigned: true)
!184 = !DIEnumerator(name: "VEC_UNPACK_LO_EXPR", value: 175, isUnsigned: true)
!185 = !DIEnumerator(name: "VEC_UNPACK_FLOAT_HI_EXPR", value: 176, isUnsigned: true)
!186 = !DIEnumerator(name: "VEC_UNPACK_FLOAT_LO_EXPR", value: 177, isUnsigned: true)
!187 = !DIEnumerator(name: "VEC_PACK_TRUNC_EXPR", value: 178, isUnsigned: true)
!188 = !DIEnumerator(name: "VEC_PACK_SAT_EXPR", value: 179, isUnsigned: true)
!189 = !DIEnumerator(name: "VEC_PACK_FIX_TRUNC_EXPR", value: 180, isUnsigned: true)
!190 = !DIEnumerator(name: "VEC_EXTRACT_EVEN_EXPR", value: 181, isUnsigned: true)
!191 = !DIEnumerator(name: "VEC_EXTRACT_ODD_EXPR", value: 182, isUnsigned: true)
!192 = !DIEnumerator(name: "VEC_INTERLEAVE_HIGH_EXPR", value: 183, isUnsigned: true)
!193 = !DIEnumerator(name: "VEC_INTERLEAVE_LOW_EXPR", value: 184, isUnsigned: true)
!194 = !DIEnumerator(name: "PREDICT_EXPR", value: 185, isUnsigned: true)
!195 = !DIEnumerator(name: "OPTIMIZATION_NODE", value: 186, isUnsigned: true)
!196 = !DIEnumerator(name: "TARGET_OPTION_NODE", value: 187, isUnsigned: true)
!197 = !DIEnumerator(name: "LAST_AND_UNUSED_TREE_CODE", value: 188, isUnsigned: true)
!198 = !DIEnumerator(name: "C_MAYBE_CONST_EXPR", value: 189, isUnsigned: true)
!199 = !DIEnumerator(name: "EXCESS_PRECISION_EXPR", value: 190, isUnsigned: true)
!200 = !DIEnumerator(name: "MAX_TREE_CODES", value: 191, isUnsigned: true)
!201 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "profile_status_d", file: !202, line: 363, baseType: !7, size: 32, elements: !203)
!202 = !DIFile(filename: "./basic-block.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!203 = !{!204, !205, !206}
!204 = !DIEnumerator(name: "PROFILE_ABSENT", value: 0, isUnsigned: true)
!205 = !DIEnumerator(name: "PROFILE_GUESSED", value: 1, isUnsigned: true)
!206 = !DIEnumerator(name: "PROFILE_READ", value: 2, isUnsigned: true)
!207 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "dom_state", file: !202, line: 355, baseType: !7, size: 32, elements: !208)
!208 = !{!209, !210, !211}
!209 = !DIEnumerator(name: "DOM_NONE", value: 0, isUnsigned: true)
!210 = !DIEnumerator(name: "DOM_NO_FAST_QUERY", value: 1, isUnsigned: true)
!211 = !DIEnumerator(name: "DOM_OK", value: 2, isUnsigned: true)
!212 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "calling_abi", file: !213, line: 474, baseType: !7, size: 32, elements: !214)
!213 = !DIFile(filename: "./config/i386/i386.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!214 = !{!215, !216}
!215 = !DIEnumerator(name: "SYSV_ABI", value: 0, isUnsigned: true)
!216 = !DIEnumerator(name: "MS_ABI", value: 1, isUnsigned: true)
!217 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_code", file: !6, line: 280, baseType: !7, size: 32, elements: !218)
!218 = !{!219, !220, !221, !222, !223, !224, !225, !226, !227, !228, !229, !230, !231, !232, !233, !234}
!219 = !DIEnumerator(name: "OMP_CLAUSE_ERROR", value: 0, isUnsigned: true)
!220 = !DIEnumerator(name: "OMP_CLAUSE_PRIVATE", value: 1, isUnsigned: true)
!221 = !DIEnumerator(name: "OMP_CLAUSE_SHARED", value: 2, isUnsigned: true)
!222 = !DIEnumerator(name: "OMP_CLAUSE_FIRSTPRIVATE", value: 3, isUnsigned: true)
!223 = !DIEnumerator(name: "OMP_CLAUSE_LASTPRIVATE", value: 4, isUnsigned: true)
!224 = !DIEnumerator(name: "OMP_CLAUSE_REDUCTION", value: 5, isUnsigned: true)
!225 = !DIEnumerator(name: "OMP_CLAUSE_COPYIN", value: 6, isUnsigned: true)
!226 = !DIEnumerator(name: "OMP_CLAUSE_COPYPRIVATE", value: 7, isUnsigned: true)
!227 = !DIEnumerator(name: "OMP_CLAUSE_IF", value: 8, isUnsigned: true)
!228 = !DIEnumerator(name: "OMP_CLAUSE_NUM_THREADS", value: 9, isUnsigned: true)
!229 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE", value: 10, isUnsigned: true)
!230 = !DIEnumerator(name: "OMP_CLAUSE_NOWAIT", value: 11, isUnsigned: true)
!231 = !DIEnumerator(name: "OMP_CLAUSE_ORDERED", value: 12, isUnsigned: true)
!232 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT", value: 13, isUnsigned: true)
!233 = !DIEnumerator(name: "OMP_CLAUSE_COLLAPSE", value: 14, isUnsigned: true)
!234 = !DIEnumerator(name: "OMP_CLAUSE_UNTIED", value: 15, isUnsigned: true)
!235 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_default_kind", file: !6, line: 1817, baseType: !7, size: 32, elements: !236)
!236 = !{!237, !238, !239, !240, !241}
!237 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_UNSPECIFIED", value: 0, isUnsigned: true)
!238 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_SHARED", value: 1, isUnsigned: true)
!239 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_NONE", value: 2, isUnsigned: true)
!240 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_PRIVATE", value: 3, isUnsigned: true)
!241 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_FIRSTPRIVATE", value: 4, isUnsigned: true)
!242 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_schedule_kind", file: !6, line: 1805, baseType: !7, size: 32, elements: !243)
!243 = !{!244, !245, !246, !247, !248}
!244 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_STATIC", value: 0, isUnsigned: true)
!245 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_DYNAMIC", value: 1, isUnsigned: true)
!246 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_GUIDED", value: 2, isUnsigned: true)
!247 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_AUTO", value: 3, isUnsigned: true)
!248 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_RUNTIME", value: 4, isUnsigned: true)
!249 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_code_class", file: !6, line: 58, baseType: !7, size: 32, elements: !250)
!250 = !{!251, !252, !253, !254, !255, !256, !257, !258, !259, !260, !261}
!251 = !DIEnumerator(name: "tcc_exceptional", value: 0, isUnsigned: true)
!252 = !DIEnumerator(name: "tcc_constant", value: 1, isUnsigned: true)
!253 = !DIEnumerator(name: "tcc_type", value: 2, isUnsigned: true)
!254 = !DIEnumerator(name: "tcc_declaration", value: 3, isUnsigned: true)
!255 = !DIEnumerator(name: "tcc_reference", value: 4, isUnsigned: true)
!256 = !DIEnumerator(name: "tcc_comparison", value: 5, isUnsigned: true)
!257 = !DIEnumerator(name: "tcc_unary", value: 6, isUnsigned: true)
!258 = !DIEnumerator(name: "tcc_binary", value: 7, isUnsigned: true)
!259 = !DIEnumerator(name: "tcc_statement", value: 8, isUnsigned: true)
!260 = !DIEnumerator(name: "tcc_vl_exp", value: 9, isUnsigned: true)
!261 = !DIEnumerator(name: "tcc_expression", value: 10, isUnsigned: true)
!262 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "opt_pass_type", file: !263, line: 104, baseType: !7, size: 32, elements: !264)
!263 = !DIFile(filename: "./tree-pass.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!264 = !{!265, !266, !267, !268}
!265 = !DIEnumerator(name: "GIMPLE_PASS", value: 0, isUnsigned: true)
!266 = !DIEnumerator(name: "RTL_PASS", value: 1, isUnsigned: true)
!267 = !DIEnumerator(name: "SIMPLE_IPA_PASS", value: 2, isUnsigned: true)
!268 = !DIEnumerator(name: "IPA_PASS", value: 3, isUnsigned: true)
!269 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !270, line: 74, baseType: !7, size: 32, elements: !271)
!270 = !DIFile(filename: "./timevar.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!271 = !{!272, !273, !274, !275, !276, !277, !278, !279, !280, !281, !282, !283, !284, !285, !286, !287, !288, !289, !290, !291, !292, !293, !294, !295, !296, !297, !298, !299, !300, !301, !302, !303, !304, !305, !306, !307, !308, !309, !310, !311, !312, !313, !314, !315, !316, !317, !318, !319, !320, !321, !322, !323, !324, !325, !326, !327, !328, !329, !330, !331, !332, !333, !334, !335, !336, !337, !338, !339, !340, !341, !342, !343, !344, !345, !346, !347, !348, !349, !350, !351, !352, !353, !354, !355, !356, !357, !358, !359, !360, !361, !362, !363, !364, !365, !366, !367, !368, !369, !370, !371, !372, !373, !374, !375, !376, !377, !378, !379, !380, !381, !382, !383, !384, !385, !386, !387, !388, !389, !390, !391, !392, !393, !394, !395, !396, !397, !398, !399, !400, !401, !402, !403, !404, !405, !406, !407, !408, !409, !410, !411, !412, !413, !414, !415, !416, !417, !418, !419, !420, !421, !422, !423, !424, !425, !426, !427, !428, !429, !430, !431, !432, !433, !434, !435, !436, !437, !438, !439, !440, !441, !442, !443, !444}
!272 = !DIEnumerator(name: "TV_NONE", value: 0, isUnsigned: true)
!273 = !DIEnumerator(name: "TV_TOTAL", value: 1, isUnsigned: true)
!274 = !DIEnumerator(name: "TV_GC", value: 2, isUnsigned: true)
!275 = !DIEnumerator(name: "TV_DUMP", value: 3, isUnsigned: true)
!276 = !DIEnumerator(name: "TV_CGRAPH", value: 4, isUnsigned: true)
!277 = !DIEnumerator(name: "TV_CGRAPHOPT", value: 5, isUnsigned: true)
!278 = !DIEnumerator(name: "TV_IPA_CONSTANT_PROP", value: 6, isUnsigned: true)
!279 = !DIEnumerator(name: "TV_IPA_LTO_GIMPLE_IO", value: 7, isUnsigned: true)
!280 = !DIEnumerator(name: "TV_IPA_LTO_DECL_IO", value: 8, isUnsigned: true)
!281 = !DIEnumerator(name: "TV_IPA_LTO_CGRAPH_IO", value: 9, isUnsigned: true)
!282 = !DIEnumerator(name: "TV_LTO", value: 10, isUnsigned: true)
!283 = !DIEnumerator(name: "TV_WHOPR_WPA", value: 11, isUnsigned: true)
!284 = !DIEnumerator(name: "TV_WHOPR_WPA_IO", value: 12, isUnsigned: true)
!285 = !DIEnumerator(name: "TV_WHOPR_LTRANS", value: 13, isUnsigned: true)
!286 = !DIEnumerator(name: "TV_WHOPR_WPA_FIXUP", value: 14, isUnsigned: true)
!287 = !DIEnumerator(name: "TV_WHOPR_WPA_LTRANS_EXEC", value: 15, isUnsigned: true)
!288 = !DIEnumerator(name: "TV_IPA_REFERENCE", value: 16, isUnsigned: true)
!289 = !DIEnumerator(name: "TV_IPA_PURE_CONST", value: 17, isUnsigned: true)
!290 = !DIEnumerator(name: "TV_IPA_TYPE_ESCAPE", value: 18, isUnsigned: true)
!291 = !DIEnumerator(name: "TV_IPA_PTA", value: 19, isUnsigned: true)
!292 = !DIEnumerator(name: "TV_IPA_SRA", value: 20, isUnsigned: true)
!293 = !DIEnumerator(name: "TV_IPA_FREE_LANG_DATA", value: 21, isUnsigned: true)
!294 = !DIEnumerator(name: "TV_CFG", value: 22, isUnsigned: true)
!295 = !DIEnumerator(name: "TV_CLEANUP_CFG", value: 23, isUnsigned: true)
!296 = !DIEnumerator(name: "TV_CFG_VERIFY", value: 24, isUnsigned: true)
!297 = !DIEnumerator(name: "TV_DELETE_TRIVIALLY_DEAD", value: 25, isUnsigned: true)
!298 = !DIEnumerator(name: "TV_LIFE", value: 26, isUnsigned: true)
!299 = !DIEnumerator(name: "TV_LIFE_UPDATE", value: 27, isUnsigned: true)
!300 = !DIEnumerator(name: "TV_DF_SCAN", value: 28, isUnsigned: true)
!301 = !DIEnumerator(name: "TV_DF_MD", value: 29, isUnsigned: true)
!302 = !DIEnumerator(name: "TV_DF_RD", value: 30, isUnsigned: true)
!303 = !DIEnumerator(name: "TV_DF_LR", value: 31, isUnsigned: true)
!304 = !DIEnumerator(name: "TV_DF_LIVE", value: 32, isUnsigned: true)
!305 = !DIEnumerator(name: "TV_DF_UREC", value: 33, isUnsigned: true)
!306 = !DIEnumerator(name: "TV_DF_CHAIN", value: 34, isUnsigned: true)
!307 = !DIEnumerator(name: "TV_DF_BYTE_LR", value: 35, isUnsigned: true)
!308 = !DIEnumerator(name: "TV_DF_NOTE", value: 36, isUnsigned: true)
!309 = !DIEnumerator(name: "TV_REG_STATS", value: 37, isUnsigned: true)
!310 = !DIEnumerator(name: "TV_ALIAS_ANALYSIS", value: 38, isUnsigned: true)
!311 = !DIEnumerator(name: "TV_ALIAS_STMT_WALK", value: 39, isUnsigned: true)
!312 = !DIEnumerator(name: "TV_REG_SCAN", value: 40, isUnsigned: true)
!313 = !DIEnumerator(name: "TV_REBUILD_JUMP", value: 41, isUnsigned: true)
!314 = !DIEnumerator(name: "TV_CPP", value: 42, isUnsigned: true)
!315 = !DIEnumerator(name: "TV_LEX", value: 43, isUnsigned: true)
!316 = !DIEnumerator(name: "TV_PARSE", value: 44, isUnsigned: true)
!317 = !DIEnumerator(name: "TV_NAME_LOOKUP", value: 45, isUnsigned: true)
!318 = !DIEnumerator(name: "TV_INLINE_HEURISTICS", value: 46, isUnsigned: true)
!319 = !DIEnumerator(name: "TV_INTEGRATION", value: 47, isUnsigned: true)
!320 = !DIEnumerator(name: "TV_TREE_GIMPLIFY", value: 48, isUnsigned: true)
!321 = !DIEnumerator(name: "TV_TREE_EH", value: 49, isUnsigned: true)
!322 = !DIEnumerator(name: "TV_TREE_CFG", value: 50, isUnsigned: true)
!323 = !DIEnumerator(name: "TV_TREE_CLEANUP_CFG", value: 51, isUnsigned: true)
!324 = !DIEnumerator(name: "TV_TREE_VRP", value: 52, isUnsigned: true)
!325 = !DIEnumerator(name: "TV_TREE_COPY_PROP", value: 53, isUnsigned: true)
!326 = !DIEnumerator(name: "TV_TREE_STORE_COPY_PROP", value: 54, isUnsigned: true)
!327 = !DIEnumerator(name: "TV_FIND_REFERENCED_VARS", value: 55, isUnsigned: true)
!328 = !DIEnumerator(name: "TV_TREE_PTA", value: 56, isUnsigned: true)
!329 = !DIEnumerator(name: "TV_TREE_INSERT_PHI_NODES", value: 57, isUnsigned: true)
!330 = !DIEnumerator(name: "TV_TREE_SSA_REWRITE_BLOCKS", value: 58, isUnsigned: true)
!331 = !DIEnumerator(name: "TV_TREE_SSA_OTHER", value: 59, isUnsigned: true)
!332 = !DIEnumerator(name: "TV_TREE_SSA_INCREMENTAL", value: 60, isUnsigned: true)
!333 = !DIEnumerator(name: "TV_TREE_OPS", value: 61, isUnsigned: true)
!334 = !DIEnumerator(name: "TV_TREE_SSA_DOMINATOR_OPTS", value: 62, isUnsigned: true)
!335 = !DIEnumerator(name: "TV_TREE_SRA", value: 63, isUnsigned: true)
!336 = !DIEnumerator(name: "TV_TREE_STORE_CCP", value: 64, isUnsigned: true)
!337 = !DIEnumerator(name: "TV_TREE_CCP", value: 65, isUnsigned: true)
!338 = !DIEnumerator(name: "TV_TREE_PHI_CPROP", value: 66, isUnsigned: true)
!339 = !DIEnumerator(name: "TV_TREE_SPLIT_EDGES", value: 67, isUnsigned: true)
!340 = !DIEnumerator(name: "TV_TREE_REASSOC", value: 68, isUnsigned: true)
!341 = !DIEnumerator(name: "TV_TREE_PRE", value: 69, isUnsigned: true)
!342 = !DIEnumerator(name: "TV_TREE_REDPHI", value: 70, isUnsigned: true)
!343 = !DIEnumerator(name: "TV_TREE_FRE", value: 71, isUnsigned: true)
!344 = !DIEnumerator(name: "TV_TREE_SINK", value: 72, isUnsigned: true)
!345 = !DIEnumerator(name: "TV_TREE_PHIOPT", value: 73, isUnsigned: true)
!346 = !DIEnumerator(name: "TV_TREE_FORWPROP", value: 74, isUnsigned: true)
!347 = !DIEnumerator(name: "TV_TREE_PHIPROP", value: 75, isUnsigned: true)
!348 = !DIEnumerator(name: "TV_TREE_DCE", value: 76, isUnsigned: true)
!349 = !DIEnumerator(name: "TV_TREE_CD_DCE", value: 77, isUnsigned: true)
!350 = !DIEnumerator(name: "TV_TREE_CALL_CDCE", value: 78, isUnsigned: true)
!351 = !DIEnumerator(name: "TV_TREE_DSE", value: 79, isUnsigned: true)
!352 = !DIEnumerator(name: "TV_TREE_MERGE_PHI", value: 80, isUnsigned: true)
!353 = !DIEnumerator(name: "TV_TREE_LOOP", value: 81, isUnsigned: true)
!354 = !DIEnumerator(name: "TV_TREE_LOOP_BOUNDS", value: 82, isUnsigned: true)
!355 = !DIEnumerator(name: "TV_LIM", value: 83, isUnsigned: true)
!356 = !DIEnumerator(name: "TV_TREE_LOOP_IVCANON", value: 84, isUnsigned: true)
!357 = !DIEnumerator(name: "TV_SCEV_CONST", value: 85, isUnsigned: true)
!358 = !DIEnumerator(name: "TV_TREE_LOOP_UNSWITCH", value: 86, isUnsigned: true)
!359 = !DIEnumerator(name: "TV_COMPLETE_UNROLL", value: 87, isUnsigned: true)
!360 = !DIEnumerator(name: "TV_TREE_PARALLELIZE_LOOPS", value: 88, isUnsigned: true)
!361 = !DIEnumerator(name: "TV_TREE_VECTORIZATION", value: 89, isUnsigned: true)
!362 = !DIEnumerator(name: "TV_TREE_SLP_VECTORIZATION", value: 90, isUnsigned: true)
!363 = !DIEnumerator(name: "TV_GRAPHITE_TRANSFORMS", value: 91, isUnsigned: true)
!364 = !DIEnumerator(name: "TV_GRAPHITE_DATA_DEPS", value: 92, isUnsigned: true)
!365 = !DIEnumerator(name: "TV_GRAPHITE_CODE_GEN", value: 93, isUnsigned: true)
!366 = !DIEnumerator(name: "TV_TREE_LINEAR_TRANSFORM", value: 94, isUnsigned: true)
!367 = !DIEnumerator(name: "TV_TREE_LOOP_DISTRIBUTION", value: 95, isUnsigned: true)
!368 = !DIEnumerator(name: "TV_CHECK_DATA_DEPS", value: 96, isUnsigned: true)
!369 = !DIEnumerator(name: "TV_TREE_PREFETCH", value: 97, isUnsigned: true)
!370 = !DIEnumerator(name: "TV_TREE_LOOP_IVOPTS", value: 98, isUnsigned: true)
!371 = !DIEnumerator(name: "TV_PREDCOM", value: 99, isUnsigned: true)
!372 = !DIEnumerator(name: "TV_TREE_LOOP_INIT", value: 100, isUnsigned: true)
!373 = !DIEnumerator(name: "TV_TREE_LOOP_FINI", value: 101, isUnsigned: true)
!374 = !DIEnumerator(name: "TV_TREE_CH", value: 102, isUnsigned: true)
!375 = !DIEnumerator(name: "TV_TREE_SSA_UNCPROP", value: 103, isUnsigned: true)
!376 = !DIEnumerator(name: "TV_TREE_SSA_TO_NORMAL", value: 104, isUnsigned: true)
!377 = !DIEnumerator(name: "TV_TREE_NRV", value: 105, isUnsigned: true)
!378 = !DIEnumerator(name: "TV_TREE_COPY_RENAME", value: 106, isUnsigned: true)
!379 = !DIEnumerator(name: "TV_TREE_SSA_VERIFY", value: 107, isUnsigned: true)
!380 = !DIEnumerator(name: "TV_TREE_STMT_VERIFY", value: 108, isUnsigned: true)
!381 = !DIEnumerator(name: "TV_TREE_SWITCH_CONVERSION", value: 109, isUnsigned: true)
!382 = !DIEnumerator(name: "TV_CGRAPH_VERIFY", value: 110, isUnsigned: true)
!383 = !DIEnumerator(name: "TV_DOM_FRONTIERS", value: 111, isUnsigned: true)
!384 = !DIEnumerator(name: "TV_DOMINANCE", value: 112, isUnsigned: true)
!385 = !DIEnumerator(name: "TV_CONTROL_DEPENDENCES", value: 113, isUnsigned: true)
!386 = !DIEnumerator(name: "TV_OVERLOAD", value: 114, isUnsigned: true)
!387 = !DIEnumerator(name: "TV_TEMPLATE_INSTANTIATION", value: 115, isUnsigned: true)
!388 = !DIEnumerator(name: "TV_EXPAND", value: 116, isUnsigned: true)
!389 = !DIEnumerator(name: "TV_VARCONST", value: 117, isUnsigned: true)
!390 = !DIEnumerator(name: "TV_LOWER_SUBREG", value: 118, isUnsigned: true)
!391 = !DIEnumerator(name: "TV_JUMP", value: 119, isUnsigned: true)
!392 = !DIEnumerator(name: "TV_FWPROP", value: 120, isUnsigned: true)
!393 = !DIEnumerator(name: "TV_CSE", value: 121, isUnsigned: true)
!394 = !DIEnumerator(name: "TV_DCE", value: 122, isUnsigned: true)
!395 = !DIEnumerator(name: "TV_DSE1", value: 123, isUnsigned: true)
!396 = !DIEnumerator(name: "TV_DSE2", value: 124, isUnsigned: true)
!397 = !DIEnumerator(name: "TV_LOOP", value: 125, isUnsigned: true)
!398 = !DIEnumerator(name: "TV_LOOP_MOVE_INVARIANTS", value: 126, isUnsigned: true)
!399 = !DIEnumerator(name: "TV_LOOP_UNSWITCH", value: 127, isUnsigned: true)
!400 = !DIEnumerator(name: "TV_LOOP_UNROLL", value: 128, isUnsigned: true)
!401 = !DIEnumerator(name: "TV_LOOP_DOLOOP", value: 129, isUnsigned: true)
!402 = !DIEnumerator(name: "TV_CPROP", value: 130, isUnsigned: true)
!403 = !DIEnumerator(name: "TV_PRE", value: 131, isUnsigned: true)
!404 = !DIEnumerator(name: "TV_HOIST", value: 132, isUnsigned: true)
!405 = !DIEnumerator(name: "TV_LSM", value: 133, isUnsigned: true)
!406 = !DIEnumerator(name: "TV_TRACER", value: 134, isUnsigned: true)
!407 = !DIEnumerator(name: "TV_WEB", value: 135, isUnsigned: true)
!408 = !DIEnumerator(name: "TV_AUTO_INC_DEC", value: 136, isUnsigned: true)
!409 = !DIEnumerator(name: "TV_CSE2", value: 137, isUnsigned: true)
!410 = !DIEnumerator(name: "TV_BRANCH_PROB", value: 138, isUnsigned: true)
!411 = !DIEnumerator(name: "TV_VPT", value: 139, isUnsigned: true)
!412 = !DIEnumerator(name: "TV_COMBINE", value: 140, isUnsigned: true)
!413 = !DIEnumerator(name: "TV_IFCVT", value: 141, isUnsigned: true)
!414 = !DIEnumerator(name: "TV_REGMOVE", value: 142, isUnsigned: true)
!415 = !DIEnumerator(name: "TV_MODE_SWITCH", value: 143, isUnsigned: true)
!416 = !DIEnumerator(name: "TV_SMS", value: 144, isUnsigned: true)
!417 = !DIEnumerator(name: "TV_SCHED", value: 145, isUnsigned: true)
!418 = !DIEnumerator(name: "TV_LOCAL_ALLOC", value: 146, isUnsigned: true)
!419 = !DIEnumerator(name: "TV_GLOBAL_ALLOC", value: 147, isUnsigned: true)
!420 = !DIEnumerator(name: "TV_IRA", value: 148, isUnsigned: true)
!421 = !DIEnumerator(name: "TV_RELOAD", value: 149, isUnsigned: true)
!422 = !DIEnumerator(name: "TV_RELOAD_CSE_REGS", value: 150, isUnsigned: true)
!423 = !DIEnumerator(name: "TV_SEQABSTR", value: 151, isUnsigned: true)
!424 = !DIEnumerator(name: "TV_GCSE_AFTER_RELOAD", value: 152, isUnsigned: true)
!425 = !DIEnumerator(name: "TV_THREAD_PROLOGUE_AND_EPILOGUE", value: 153, isUnsigned: true)
!426 = !DIEnumerator(name: "TV_IFCVT2", value: 154, isUnsigned: true)
!427 = !DIEnumerator(name: "TV_COMBINE_STACK_ADJUST", value: 155, isUnsigned: true)
!428 = !DIEnumerator(name: "TV_PEEPHOLE2", value: 156, isUnsigned: true)
!429 = !DIEnumerator(name: "TV_RENAME_REGISTERS", value: 157, isUnsigned: true)
!430 = !DIEnumerator(name: "TV_CPROP_REGISTERS", value: 158, isUnsigned: true)
!431 = !DIEnumerator(name: "TV_SCHED2", value: 159, isUnsigned: true)
!432 = !DIEnumerator(name: "TV_MACH_DEP", value: 160, isUnsigned: true)
!433 = !DIEnumerator(name: "TV_DBR_SCHED", value: 161, isUnsigned: true)
!434 = !DIEnumerator(name: "TV_REORDER_BLOCKS", value: 162, isUnsigned: true)
!435 = !DIEnumerator(name: "TV_SHORTEN_BRANCH", value: 163, isUnsigned: true)
!436 = !DIEnumerator(name: "TV_REG_STACK", value: 164, isUnsigned: true)
!437 = !DIEnumerator(name: "TV_FINAL", value: 165, isUnsigned: true)
!438 = !DIEnumerator(name: "TV_SYMOUT", value: 166, isUnsigned: true)
!439 = !DIEnumerator(name: "TV_VAR_TRACKING", value: 167, isUnsigned: true)
!440 = !DIEnumerator(name: "TV_TREE_IFCOMBINE", value: 168, isUnsigned: true)
!441 = !DIEnumerator(name: "TV_PLUGIN_INIT", value: 169, isUnsigned: true)
!442 = !DIEnumerator(name: "TV_PLUGIN_RUN", value: 170, isUnsigned: true)
!443 = !DIEnumerator(name: "TV_REST_OF_COMPILATION", value: 171, isUnsigned: true)
!444 = !DIEnumerator(name: "TIMEVAR_LAST", value: 172, isUnsigned: true)
!445 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gimple_code", file: !446, line: 51, baseType: !7, size: 32, elements: !447)
!446 = !DIFile(filename: "./gimple.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!447 = !{!448, !449, !450, !451, !452, !453, !454, !455, !456, !457, !458, !459, !460, !461, !462, !463, !464, !465, !466, !467, !468, !469, !470, !471, !472, !473, !474, !475, !476, !477, !478, !479, !480, !481, !482, !483}
!448 = !DIEnumerator(name: "GIMPLE_ERROR_MARK", value: 0, isUnsigned: true)
!449 = !DIEnumerator(name: "GIMPLE_COND", value: 1, isUnsigned: true)
!450 = !DIEnumerator(name: "GIMPLE_DEBUG", value: 2, isUnsigned: true)
!451 = !DIEnumerator(name: "GIMPLE_GOTO", value: 3, isUnsigned: true)
!452 = !DIEnumerator(name: "GIMPLE_LABEL", value: 4, isUnsigned: true)
!453 = !DIEnumerator(name: "GIMPLE_SWITCH", value: 5, isUnsigned: true)
!454 = !DIEnumerator(name: "GIMPLE_ASSIGN", value: 6, isUnsigned: true)
!455 = !DIEnumerator(name: "GIMPLE_ASM", value: 7, isUnsigned: true)
!456 = !DIEnumerator(name: "GIMPLE_CALL", value: 8, isUnsigned: true)
!457 = !DIEnumerator(name: "GIMPLE_RETURN", value: 9, isUnsigned: true)
!458 = !DIEnumerator(name: "GIMPLE_BIND", value: 10, isUnsigned: true)
!459 = !DIEnumerator(name: "GIMPLE_CATCH", value: 11, isUnsigned: true)
!460 = !DIEnumerator(name: "GIMPLE_EH_FILTER", value: 12, isUnsigned: true)
!461 = !DIEnumerator(name: "GIMPLE_EH_MUST_NOT_THROW", value: 13, isUnsigned: true)
!462 = !DIEnumerator(name: "GIMPLE_RESX", value: 14, isUnsigned: true)
!463 = !DIEnumerator(name: "GIMPLE_EH_DISPATCH", value: 15, isUnsigned: true)
!464 = !DIEnumerator(name: "GIMPLE_PHI", value: 16, isUnsigned: true)
!465 = !DIEnumerator(name: "GIMPLE_TRY", value: 17, isUnsigned: true)
!466 = !DIEnumerator(name: "GIMPLE_NOP", value: 18, isUnsigned: true)
!467 = !DIEnumerator(name: "GIMPLE_OMP_ATOMIC_LOAD", value: 19, isUnsigned: true)
!468 = !DIEnumerator(name: "GIMPLE_OMP_ATOMIC_STORE", value: 20, isUnsigned: true)
!469 = !DIEnumerator(name: "GIMPLE_OMP_CONTINUE", value: 21, isUnsigned: true)
!470 = !DIEnumerator(name: "GIMPLE_OMP_CRITICAL", value: 22, isUnsigned: true)
!471 = !DIEnumerator(name: "GIMPLE_OMP_FOR", value: 23, isUnsigned: true)
!472 = !DIEnumerator(name: "GIMPLE_OMP_MASTER", value: 24, isUnsigned: true)
!473 = !DIEnumerator(name: "GIMPLE_OMP_ORDERED", value: 25, isUnsigned: true)
!474 = !DIEnumerator(name: "GIMPLE_OMP_PARALLEL", value: 26, isUnsigned: true)
!475 = !DIEnumerator(name: "GIMPLE_OMP_TASK", value: 27, isUnsigned: true)
!476 = !DIEnumerator(name: "GIMPLE_OMP_RETURN", value: 28, isUnsigned: true)
!477 = !DIEnumerator(name: "GIMPLE_OMP_SECTION", value: 29, isUnsigned: true)
!478 = !DIEnumerator(name: "GIMPLE_OMP_SECTIONS", value: 30, isUnsigned: true)
!479 = !DIEnumerator(name: "GIMPLE_OMP_SECTIONS_SWITCH", value: 31, isUnsigned: true)
!480 = !DIEnumerator(name: "GIMPLE_OMP_SINGLE", value: 32, isUnsigned: true)
!481 = !DIEnumerator(name: "GIMPLE_PREDICT", value: 33, isUnsigned: true)
!482 = !DIEnumerator(name: "GIMPLE_WITH_CLEANUP_EXPR", value: 34, isUnsigned: true)
!483 = !DIEnumerator(name: "LAST_AND_UNUSED_GIMPLE_CODE", value: 35, isUnsigned: true)
!484 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "ssa_op_iter_type", file: !485, line: 119, baseType: !7, size: 32, elements: !486)
!485 = !DIFile(filename: "./tree-ssa-operands.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!486 = !{!487, !488, !489, !490}
!487 = !DIEnumerator(name: "ssa_op_iter_none", value: 0, isUnsigned: true)
!488 = !DIEnumerator(name: "ssa_op_iter_tree", value: 1, isUnsigned: true)
!489 = !DIEnumerator(name: "ssa_op_iter_use", value: 2, isUnsigned: true)
!490 = !DIEnumerator(name: "ssa_op_iter_def", value: 3, isUnsigned: true)
!491 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "cast_type", file: !3, line: 628, baseType: !7, size: 32, elements: !492)
!492 = !{!493, !494, !495, !496, !497, !498, !499, !500, !501}
!493 = !DIEnumerator(name: "CT_UP", value: 1, isUnsigned: true)
!494 = !DIEnumerator(name: "CT_DOWN", value: 2, isUnsigned: true)
!495 = !DIEnumerator(name: "CT_SIDEWAYS", value: 4, isUnsigned: true)
!496 = !DIEnumerator(name: "CT_USELESS", value: 8, isUnsigned: true)
!497 = !DIEnumerator(name: "CT_FROM_P_BAD", value: 16, isUnsigned: true)
!498 = !DIEnumerator(name: "CT_FROM_NON_P", value: 32, isUnsigned: true)
!499 = !DIEnumerator(name: "CT_TO_NON_INTER", value: 64, isUnsigned: true)
!500 = !DIEnumerator(name: "CT_FROM_MALLOC", value: 128, isUnsigned: true)
!501 = !DIEnumerator(name: "CT_NO_CAST", value: 256, isUnsigned: true)
!502 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "escape_t", file: !3, line: 83, baseType: !7, size: 32, elements: !503)
!503 = !{!504, !505}
!504 = !DIEnumerator(name: "EXPOSED_PARAMETER", value: 0, isUnsigned: true)
!505 = !DIEnumerator(name: "FULL_ESCAPE", value: 1, isUnsigned: true)
!506 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gimple_statement_structure_enum", file: !446, line: 727, baseType: !7, size: 32, elements: !507)
!507 = !{!508, !509, !510, !511, !512, !513, !514, !515, !516, !517, !518, !519, !520, !521, !522, !523, !524, !525, !526, !527, !528, !529, !530, !531}
!508 = !DIEnumerator(name: "GSS_BASE", value: 0, isUnsigned: true)
!509 = !DIEnumerator(name: "GSS_WITH_OPS", value: 1, isUnsigned: true)
!510 = !DIEnumerator(name: "GSS_WITH_MEM_OPS_BASE", value: 2, isUnsigned: true)
!511 = !DIEnumerator(name: "GSS_WITH_MEM_OPS", value: 3, isUnsigned: true)
!512 = !DIEnumerator(name: "GSS_ASM", value: 4, isUnsigned: true)
!513 = !DIEnumerator(name: "GSS_BIND", value: 5, isUnsigned: true)
!514 = !DIEnumerator(name: "GSS_PHI", value: 6, isUnsigned: true)
!515 = !DIEnumerator(name: "GSS_TRY", value: 7, isUnsigned: true)
!516 = !DIEnumerator(name: "GSS_CATCH", value: 8, isUnsigned: true)
!517 = !DIEnumerator(name: "GSS_EH_FILTER", value: 9, isUnsigned: true)
!518 = !DIEnumerator(name: "GSS_EH_MNT", value: 10, isUnsigned: true)
!519 = !DIEnumerator(name: "GSS_EH_CTRL", value: 11, isUnsigned: true)
!520 = !DIEnumerator(name: "GSS_WCE", value: 12, isUnsigned: true)
!521 = !DIEnumerator(name: "GSS_OMP", value: 13, isUnsigned: true)
!522 = !DIEnumerator(name: "GSS_OMP_CRITICAL", value: 14, isUnsigned: true)
!523 = !DIEnumerator(name: "GSS_OMP_FOR", value: 15, isUnsigned: true)
!524 = !DIEnumerator(name: "GSS_OMP_PARALLEL", value: 16, isUnsigned: true)
!525 = !DIEnumerator(name: "GSS_OMP_TASK", value: 17, isUnsigned: true)
!526 = !DIEnumerator(name: "GSS_OMP_SECTIONS", value: 18, isUnsigned: true)
!527 = !DIEnumerator(name: "GSS_OMP_SINGLE", value: 19, isUnsigned: true)
!528 = !DIEnumerator(name: "GSS_OMP_CONTINUE", value: 20, isUnsigned: true)
!529 = !DIEnumerator(name: "GSS_OMP_ATOMIC_LOAD", value: 21, isUnsigned: true)
!530 = !DIEnumerator(name: "GSS_OMP_ATOMIC_STORE", value: 22, isUnsigned: true)
!531 = !DIEnumerator(name: "LAST_GSS_ENUM", value: 23, isUnsigned: true)
!532 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gimple_rhs_class", file: !446, line: 80, baseType: !7, size: 32, elements: !533)
!533 = !{!534, !535, !536, !537}
!534 = !DIEnumerator(name: "GIMPLE_INVALID_RHS", value: 0, isUnsigned: true)
!535 = !DIEnumerator(name: "GIMPLE_BINARY_RHS", value: 1, isUnsigned: true)
!536 = !DIEnumerator(name: "GIMPLE_UNARY_RHS", value: 2, isUnsigned: true)
!537 = !DIEnumerator(name: "GIMPLE_SINGLE_RHS", value: 3, isUnsigned: true)
!538 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !539, line: 29, baseType: !7, size: 32, elements: !540)
!539 = !DIFile(filename: "./diagnostic.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!540 = !{!541, !542, !543, !544, !545, !546, !547, !548, !549, !550, !551, !552, !553}
!541 = !DIEnumerator(name: "DK_UNSPECIFIED", value: 0, isUnsigned: true)
!542 = !DIEnumerator(name: "DK_IGNORED", value: 1, isUnsigned: true)
!543 = !DIEnumerator(name: "DK_FATAL", value: 2, isUnsigned: true)
!544 = !DIEnumerator(name: "DK_ICE", value: 3, isUnsigned: true)
!545 = !DIEnumerator(name: "DK_ERROR", value: 4, isUnsigned: true)
!546 = !DIEnumerator(name: "DK_SORRY", value: 5, isUnsigned: true)
!547 = !DIEnumerator(name: "DK_WARNING", value: 6, isUnsigned: true)
!548 = !DIEnumerator(name: "DK_ANACHRONISM", value: 7, isUnsigned: true)
!549 = !DIEnumerator(name: "DK_NOTE", value: 8, isUnsigned: true)
!550 = !DIEnumerator(name: "DK_DEBUG", value: 9, isUnsigned: true)
!551 = !DIEnumerator(name: "DK_PEDWARN", value: 10, isUnsigned: true)
!552 = !DIEnumerator(name: "DK_PERMERROR", value: 11, isUnsigned: true)
!553 = !DIEnumerator(name: "DK_LAST_DIAGNOSTIC_KIND", value: 12, isUnsigned: true)
!554 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !555, line: 309, baseType: !7, size: 32, elements: !556)
!555 = !DIFile(filename: "./cgraph.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!556 = !{!557, !558, !559, !560, !561, !562, !563, !564, !565, !566, !567, !568, !569, !570, !571, !572, !573, !574, !575, !576}
!557 = !DIEnumerator(name: "CIF_OK", value: 0, isUnsigned: true)
!558 = !DIEnumerator(name: "CIF_UNSPECIFIED", value: 1, isUnsigned: true)
!559 = !DIEnumerator(name: "CIF_FUNCTION_NOT_CONSIDERED", value: 2, isUnsigned: true)
!560 = !DIEnumerator(name: "CIF_BODY_NOT_AVAILABLE", value: 3, isUnsigned: true)
!561 = !DIEnumerator(name: "CIF_REDEFINED_EXTERN_INLINE", value: 4, isUnsigned: true)
!562 = !DIEnumerator(name: "CIF_FUNCTION_NOT_INLINABLE", value: 5, isUnsigned: true)
!563 = !DIEnumerator(name: "CIF_FUNCTION_NOT_INLINE_CANDIDATE", value: 6, isUnsigned: true)
!564 = !DIEnumerator(name: "CIF_LARGE_FUNCTION_GROWTH_LIMIT", value: 7, isUnsigned: true)
!565 = !DIEnumerator(name: "CIF_LARGE_STACK_FRAME_GROWTH_LIMIT", value: 8, isUnsigned: true)
!566 = !DIEnumerator(name: "CIF_MAX_INLINE_INSNS_SINGLE_LIMIT", value: 9, isUnsigned: true)
!567 = !DIEnumerator(name: "CIF_MAX_INLINE_INSNS_AUTO_LIMIT", value: 10, isUnsigned: true)
!568 = !DIEnumerator(name: "CIF_INLINE_UNIT_GROWTH_LIMIT", value: 11, isUnsigned: true)
!569 = !DIEnumerator(name: "CIF_RECURSIVE_INLINING", value: 12, isUnsigned: true)
!570 = !DIEnumerator(name: "CIF_UNLIKELY_CALL", value: 13, isUnsigned: true)
!571 = !DIEnumerator(name: "CIF_NOT_DECLARED_INLINED", value: 14, isUnsigned: true)
!572 = !DIEnumerator(name: "CIF_OPTIMIZING_FOR_SIZE", value: 15, isUnsigned: true)
!573 = !DIEnumerator(name: "CIF_TARGET_OPTION_MISMATCH", value: 16, isUnsigned: true)
!574 = !DIEnumerator(name: "CIF_MISMATCHED_ARGUMENTS", value: 17, isUnsigned: true)
!575 = !DIEnumerator(name: "CIF_ORIGINALLY_INDIRECT_CALL", value: 18, isUnsigned: true)
!576 = !DIEnumerator(name: "CIF_N_REASONS", value: 19, isUnsigned: true)
!577 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_index", file: !6, line: 3410, baseType: !7, size: 32, elements: !578)
!578 = !{!579, !580, !581, !582, !583, !584, !585, !586, !587, !588, !589, !590, !591, !592, !593, !594, !595, !596, !597, !598, !599, !600, !601, !602, !603, !604, !605, !606, !607, !608, !609, !610, !611, !612, !613, !614, !615, !616, !617, !618, !619, !620, !621, !622, !623, !624, !625, !626, !627, !628, !629, !630, !631, !632, !633, !634, !635, !636, !637, !638, !639, !640, !641, !642, !643, !644, !645, !646, !647, !648, !649, !650, !651, !652, !653, !654, !655, !656, !657, !658, !659, !660, !661, !662, !663, !664, !665, !666, !667, !668, !669, !670, !671, !672, !673, !674, !675, !676, !677, !678, !679, !680, !681, !682, !683, !684, !685, !686, !687, !688, !689, !690, !691, !692, !693, !694, !695, !696, !697, !698, !699, !700, !701, !702, !703, !704, !705, !706, !707, !708, !709, !710}
!579 = !DIEnumerator(name: "TI_ERROR_MARK", value: 0, isUnsigned: true)
!580 = !DIEnumerator(name: "TI_INTQI_TYPE", value: 1, isUnsigned: true)
!581 = !DIEnumerator(name: "TI_INTHI_TYPE", value: 2, isUnsigned: true)
!582 = !DIEnumerator(name: "TI_INTSI_TYPE", value: 3, isUnsigned: true)
!583 = !DIEnumerator(name: "TI_INTDI_TYPE", value: 4, isUnsigned: true)
!584 = !DIEnumerator(name: "TI_INTTI_TYPE", value: 5, isUnsigned: true)
!585 = !DIEnumerator(name: "TI_UINTQI_TYPE", value: 6, isUnsigned: true)
!586 = !DIEnumerator(name: "TI_UINTHI_TYPE", value: 7, isUnsigned: true)
!587 = !DIEnumerator(name: "TI_UINTSI_TYPE", value: 8, isUnsigned: true)
!588 = !DIEnumerator(name: "TI_UINTDI_TYPE", value: 9, isUnsigned: true)
!589 = !DIEnumerator(name: "TI_UINTTI_TYPE", value: 10, isUnsigned: true)
!590 = !DIEnumerator(name: "TI_UINT32_TYPE", value: 11, isUnsigned: true)
!591 = !DIEnumerator(name: "TI_UINT64_TYPE", value: 12, isUnsigned: true)
!592 = !DIEnumerator(name: "TI_INTEGER_ZERO", value: 13, isUnsigned: true)
!593 = !DIEnumerator(name: "TI_INTEGER_ONE", value: 14, isUnsigned: true)
!594 = !DIEnumerator(name: "TI_INTEGER_MINUS_ONE", value: 15, isUnsigned: true)
!595 = !DIEnumerator(name: "TI_NULL_POINTER", value: 16, isUnsigned: true)
!596 = !DIEnumerator(name: "TI_SIZE_ZERO", value: 17, isUnsigned: true)
!597 = !DIEnumerator(name: "TI_SIZE_ONE", value: 18, isUnsigned: true)
!598 = !DIEnumerator(name: "TI_BITSIZE_ZERO", value: 19, isUnsigned: true)
!599 = !DIEnumerator(name: "TI_BITSIZE_ONE", value: 20, isUnsigned: true)
!600 = !DIEnumerator(name: "TI_BITSIZE_UNIT", value: 21, isUnsigned: true)
!601 = !DIEnumerator(name: "TI_PUBLIC", value: 22, isUnsigned: true)
!602 = !DIEnumerator(name: "TI_PROTECTED", value: 23, isUnsigned: true)
!603 = !DIEnumerator(name: "TI_PRIVATE", value: 24, isUnsigned: true)
!604 = !DIEnumerator(name: "TI_BOOLEAN_FALSE", value: 25, isUnsigned: true)
!605 = !DIEnumerator(name: "TI_BOOLEAN_TRUE", value: 26, isUnsigned: true)
!606 = !DIEnumerator(name: "TI_COMPLEX_INTEGER_TYPE", value: 27, isUnsigned: true)
!607 = !DIEnumerator(name: "TI_COMPLEX_FLOAT_TYPE", value: 28, isUnsigned: true)
!608 = !DIEnumerator(name: "TI_COMPLEX_DOUBLE_TYPE", value: 29, isUnsigned: true)
!609 = !DIEnumerator(name: "TI_COMPLEX_LONG_DOUBLE_TYPE", value: 30, isUnsigned: true)
!610 = !DIEnumerator(name: "TI_FLOAT_TYPE", value: 31, isUnsigned: true)
!611 = !DIEnumerator(name: "TI_DOUBLE_TYPE", value: 32, isUnsigned: true)
!612 = !DIEnumerator(name: "TI_LONG_DOUBLE_TYPE", value: 33, isUnsigned: true)
!613 = !DIEnumerator(name: "TI_FLOAT_PTR_TYPE", value: 34, isUnsigned: true)
!614 = !DIEnumerator(name: "TI_DOUBLE_PTR_TYPE", value: 35, isUnsigned: true)
!615 = !DIEnumerator(name: "TI_LONG_DOUBLE_PTR_TYPE", value: 36, isUnsigned: true)
!616 = !DIEnumerator(name: "TI_INTEGER_PTR_TYPE", value: 37, isUnsigned: true)
!617 = !DIEnumerator(name: "TI_VOID_TYPE", value: 38, isUnsigned: true)
!618 = !DIEnumerator(name: "TI_PTR_TYPE", value: 39, isUnsigned: true)
!619 = !DIEnumerator(name: "TI_CONST_PTR_TYPE", value: 40, isUnsigned: true)
!620 = !DIEnumerator(name: "TI_SIZE_TYPE", value: 41, isUnsigned: true)
!621 = !DIEnumerator(name: "TI_PID_TYPE", value: 42, isUnsigned: true)
!622 = !DIEnumerator(name: "TI_PTRDIFF_TYPE", value: 43, isUnsigned: true)
!623 = !DIEnumerator(name: "TI_VA_LIST_TYPE", value: 44, isUnsigned: true)
!624 = !DIEnumerator(name: "TI_VA_LIST_GPR_COUNTER_FIELD", value: 45, isUnsigned: true)
!625 = !DIEnumerator(name: "TI_VA_LIST_FPR_COUNTER_FIELD", value: 46, isUnsigned: true)
!626 = !DIEnumerator(name: "TI_BOOLEAN_TYPE", value: 47, isUnsigned: true)
!627 = !DIEnumerator(name: "TI_FILEPTR_TYPE", value: 48, isUnsigned: true)
!628 = !DIEnumerator(name: "TI_DFLOAT32_TYPE", value: 49, isUnsigned: true)
!629 = !DIEnumerator(name: "TI_DFLOAT64_TYPE", value: 50, isUnsigned: true)
!630 = !DIEnumerator(name: "TI_DFLOAT128_TYPE", value: 51, isUnsigned: true)
!631 = !DIEnumerator(name: "TI_DFLOAT32_PTR_TYPE", value: 52, isUnsigned: true)
!632 = !DIEnumerator(name: "TI_DFLOAT64_PTR_TYPE", value: 53, isUnsigned: true)
!633 = !DIEnumerator(name: "TI_DFLOAT128_PTR_TYPE", value: 54, isUnsigned: true)
!634 = !DIEnumerator(name: "TI_VOID_LIST_NODE", value: 55, isUnsigned: true)
!635 = !DIEnumerator(name: "TI_MAIN_IDENTIFIER", value: 56, isUnsigned: true)
!636 = !DIEnumerator(name: "TI_SAT_SFRACT_TYPE", value: 57, isUnsigned: true)
!637 = !DIEnumerator(name: "TI_SAT_FRACT_TYPE", value: 58, isUnsigned: true)
!638 = !DIEnumerator(name: "TI_SAT_LFRACT_TYPE", value: 59, isUnsigned: true)
!639 = !DIEnumerator(name: "TI_SAT_LLFRACT_TYPE", value: 60, isUnsigned: true)
!640 = !DIEnumerator(name: "TI_SAT_USFRACT_TYPE", value: 61, isUnsigned: true)
!641 = !DIEnumerator(name: "TI_SAT_UFRACT_TYPE", value: 62, isUnsigned: true)
!642 = !DIEnumerator(name: "TI_SAT_ULFRACT_TYPE", value: 63, isUnsigned: true)
!643 = !DIEnumerator(name: "TI_SAT_ULLFRACT_TYPE", value: 64, isUnsigned: true)
!644 = !DIEnumerator(name: "TI_SFRACT_TYPE", value: 65, isUnsigned: true)
!645 = !DIEnumerator(name: "TI_FRACT_TYPE", value: 66, isUnsigned: true)
!646 = !DIEnumerator(name: "TI_LFRACT_TYPE", value: 67, isUnsigned: true)
!647 = !DIEnumerator(name: "TI_LLFRACT_TYPE", value: 68, isUnsigned: true)
!648 = !DIEnumerator(name: "TI_USFRACT_TYPE", value: 69, isUnsigned: true)
!649 = !DIEnumerator(name: "TI_UFRACT_TYPE", value: 70, isUnsigned: true)
!650 = !DIEnumerator(name: "TI_ULFRACT_TYPE", value: 71, isUnsigned: true)
!651 = !DIEnumerator(name: "TI_ULLFRACT_TYPE", value: 72, isUnsigned: true)
!652 = !DIEnumerator(name: "TI_SAT_SACCUM_TYPE", value: 73, isUnsigned: true)
!653 = !DIEnumerator(name: "TI_SAT_ACCUM_TYPE", value: 74, isUnsigned: true)
!654 = !DIEnumerator(name: "TI_SAT_LACCUM_TYPE", value: 75, isUnsigned: true)
!655 = !DIEnumerator(name: "TI_SAT_LLACCUM_TYPE", value: 76, isUnsigned: true)
!656 = !DIEnumerator(name: "TI_SAT_USACCUM_TYPE", value: 77, isUnsigned: true)
!657 = !DIEnumerator(name: "TI_SAT_UACCUM_TYPE", value: 78, isUnsigned: true)
!658 = !DIEnumerator(name: "TI_SAT_ULACCUM_TYPE", value: 79, isUnsigned: true)
!659 = !DIEnumerator(name: "TI_SAT_ULLACCUM_TYPE", value: 80, isUnsigned: true)
!660 = !DIEnumerator(name: "TI_SACCUM_TYPE", value: 81, isUnsigned: true)
!661 = !DIEnumerator(name: "TI_ACCUM_TYPE", value: 82, isUnsigned: true)
!662 = !DIEnumerator(name: "TI_LACCUM_TYPE", value: 83, isUnsigned: true)
!663 = !DIEnumerator(name: "TI_LLACCUM_TYPE", value: 84, isUnsigned: true)
!664 = !DIEnumerator(name: "TI_USACCUM_TYPE", value: 85, isUnsigned: true)
!665 = !DIEnumerator(name: "TI_UACCUM_TYPE", value: 86, isUnsigned: true)
!666 = !DIEnumerator(name: "TI_ULACCUM_TYPE", value: 87, isUnsigned: true)
!667 = !DIEnumerator(name: "TI_ULLACCUM_TYPE", value: 88, isUnsigned: true)
!668 = !DIEnumerator(name: "TI_QQ_TYPE", value: 89, isUnsigned: true)
!669 = !DIEnumerator(name: "TI_HQ_TYPE", value: 90, isUnsigned: true)
!670 = !DIEnumerator(name: "TI_SQ_TYPE", value: 91, isUnsigned: true)
!671 = !DIEnumerator(name: "TI_DQ_TYPE", value: 92, isUnsigned: true)
!672 = !DIEnumerator(name: "TI_TQ_TYPE", value: 93, isUnsigned: true)
!673 = !DIEnumerator(name: "TI_UQQ_TYPE", value: 94, isUnsigned: true)
!674 = !DIEnumerator(name: "TI_UHQ_TYPE", value: 95, isUnsigned: true)
!675 = !DIEnumerator(name: "TI_USQ_TYPE", value: 96, isUnsigned: true)
!676 = !DIEnumerator(name: "TI_UDQ_TYPE", value: 97, isUnsigned: true)
!677 = !DIEnumerator(name: "TI_UTQ_TYPE", value: 98, isUnsigned: true)
!678 = !DIEnumerator(name: "TI_SAT_QQ_TYPE", value: 99, isUnsigned: true)
!679 = !DIEnumerator(name: "TI_SAT_HQ_TYPE", value: 100, isUnsigned: true)
!680 = !DIEnumerator(name: "TI_SAT_SQ_TYPE", value: 101, isUnsigned: true)
!681 = !DIEnumerator(name: "TI_SAT_DQ_TYPE", value: 102, isUnsigned: true)
!682 = !DIEnumerator(name: "TI_SAT_TQ_TYPE", value: 103, isUnsigned: true)
!683 = !DIEnumerator(name: "TI_SAT_UQQ_TYPE", value: 104, isUnsigned: true)
!684 = !DIEnumerator(name: "TI_SAT_UHQ_TYPE", value: 105, isUnsigned: true)
!685 = !DIEnumerator(name: "TI_SAT_USQ_TYPE", value: 106, isUnsigned: true)
!686 = !DIEnumerator(name: "TI_SAT_UDQ_TYPE", value: 107, isUnsigned: true)
!687 = !DIEnumerator(name: "TI_SAT_UTQ_TYPE", value: 108, isUnsigned: true)
!688 = !DIEnumerator(name: "TI_HA_TYPE", value: 109, isUnsigned: true)
!689 = !DIEnumerator(name: "TI_SA_TYPE", value: 110, isUnsigned: true)
!690 = !DIEnumerator(name: "TI_DA_TYPE", value: 111, isUnsigned: true)
!691 = !DIEnumerator(name: "TI_TA_TYPE", value: 112, isUnsigned: true)
!692 = !DIEnumerator(name: "TI_UHA_TYPE", value: 113, isUnsigned: true)
!693 = !DIEnumerator(name: "TI_USA_TYPE", value: 114, isUnsigned: true)
!694 = !DIEnumerator(name: "TI_UDA_TYPE", value: 115, isUnsigned: true)
!695 = !DIEnumerator(name: "TI_UTA_TYPE", value: 116, isUnsigned: true)
!696 = !DIEnumerator(name: "TI_SAT_HA_TYPE", value: 117, isUnsigned: true)
!697 = !DIEnumerator(name: "TI_SAT_SA_TYPE", value: 118, isUnsigned: true)
!698 = !DIEnumerator(name: "TI_SAT_DA_TYPE", value: 119, isUnsigned: true)
!699 = !DIEnumerator(name: "TI_SAT_TA_TYPE", value: 120, isUnsigned: true)
!700 = !DIEnumerator(name: "TI_SAT_UHA_TYPE", value: 121, isUnsigned: true)
!701 = !DIEnumerator(name: "TI_SAT_USA_TYPE", value: 122, isUnsigned: true)
!702 = !DIEnumerator(name: "TI_SAT_UDA_TYPE", value: 123, isUnsigned: true)
!703 = !DIEnumerator(name: "TI_SAT_UTA_TYPE", value: 124, isUnsigned: true)
!704 = !DIEnumerator(name: "TI_OPTIMIZATION_DEFAULT", value: 125, isUnsigned: true)
!705 = !DIEnumerator(name: "TI_OPTIMIZATION_CURRENT", value: 126, isUnsigned: true)
!706 = !DIEnumerator(name: "TI_TARGET_OPTION_DEFAULT", value: 127, isUnsigned: true)
!707 = !DIEnumerator(name: "TI_TARGET_OPTION_CURRENT", value: 128, isUnsigned: true)
!708 = !DIEnumerator(name: "TI_CURRENT_TARGET_PRAGMA", value: 129, isUnsigned: true)
!709 = !DIEnumerator(name: "TI_CURRENT_OPTIMIZE_PRAGMA", value: 130, isUnsigned: true)
!710 = !DIEnumerator(name: "TI_MAX", value: 131, isUnsigned: true)
!711 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "bb_flags", file: !202, line: 295, baseType: !7, size: 32, elements: !712)
!712 = !{!713, !714, !715, !716, !717, !718, !719, !720, !721, !722, !723, !724}
!713 = !DIEnumerator(name: "BB_NEW", value: 1, isUnsigned: true)
!714 = !DIEnumerator(name: "BB_REACHABLE", value: 2, isUnsigned: true)
!715 = !DIEnumerator(name: "BB_IRREDUCIBLE_LOOP", value: 4, isUnsigned: true)
!716 = !DIEnumerator(name: "BB_SUPERBLOCK", value: 8, isUnsigned: true)
!717 = !DIEnumerator(name: "BB_DISABLE_SCHEDULE", value: 16, isUnsigned: true)
!718 = !DIEnumerator(name: "BB_HOT_PARTITION", value: 32, isUnsigned: true)
!719 = !DIEnumerator(name: "BB_COLD_PARTITION", value: 64, isUnsigned: true)
!720 = !DIEnumerator(name: "BB_DUPLICATED", value: 128, isUnsigned: true)
!721 = !DIEnumerator(name: "BB_NON_LOCAL_GOTO_TARGET", value: 256, isUnsigned: true)
!722 = !DIEnumerator(name: "BB_RTL", value: 512, isUnsigned: true)
!723 = !DIEnumerator(name: "BB_FORWARDER_BLOCK", value: 1024, isUnsigned: true)
!724 = !DIEnumerator(name: "BB_NONTHREADABLE_BLOCK", value: 2048, isUnsigned: true)
!725 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "availability", file: !555, line: 27, baseType: !7, size: 32, elements: !726)
!726 = !{!727, !728, !729, !730, !731}
!727 = !DIEnumerator(name: "AVAIL_UNSET", value: 0, isUnsigned: true)
!728 = !DIEnumerator(name: "AVAIL_NOT_AVAILABLE", value: 1, isUnsigned: true)
!729 = !DIEnumerator(name: "AVAIL_OVERWRITABLE", value: 2, isUnsigned: true)
!730 = !DIEnumerator(name: "AVAIL_AVAILABLE", value: 3, isUnsigned: true)
!731 = !DIEnumerator(name: "AVAIL_LOCAL", value: 4, isUnsigned: true)
!732 = !{!5, !733, !737, !794, !789, !803, !1916, !1921, !1225, !1922, !1097, !1928, !1130, !777, !1930, !532}
!733 = !DIDerivedType(tag: DW_TAG_typedef, name: "splay_tree_key", file: !734, line: 62, baseType: !735)
!734 = !DIFile(filename: "./include/splay-tree.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!735 = !DIDerivedType(tag: DW_TAG_typedef, name: "libi_uhostptr_t", file: !734, line: 41, baseType: !736)
!736 = !DIBasicType(name: "long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!737 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap", file: !738, line: 47, baseType: !739)
!738 = !DIFile(filename: "./coretypes.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!739 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !740, size: 64)
!740 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_head_def", file: !741, line: 75, size: 256, elements: !742)
!741 = !DIFile(filename: "./bitmap.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!742 = !{!743, !757, !758, !759}
!743 = !DIDerivedType(tag: DW_TAG_member, name: "first", scope: !740, file: !741, line: 76, baseType: !744, size: 64)
!744 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !745, size: 64)
!745 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap_element", file: !741, line: 68, baseType: !746)
!746 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_element_def", file: !741, line: 63, size: 320, elements: !747)
!747 = !{!748, !750, !751, !752}
!748 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !746, file: !741, line: 64, baseType: !749, size: 64)
!749 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !746, size: 64)
!750 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !746, file: !741, line: 65, baseType: !749, size: 64, offset: 64)
!751 = !DIDerivedType(tag: DW_TAG_member, name: "indx", scope: !746, file: !741, line: 66, baseType: !7, size: 32, offset: 128)
!752 = !DIDerivedType(tag: DW_TAG_member, name: "bits", scope: !746, file: !741, line: 67, baseType: !753, size: 128, offset: 192)
!753 = !DICompositeType(tag: DW_TAG_array_type, baseType: !754, size: 128, elements: !755)
!754 = !DIDerivedType(tag: DW_TAG_typedef, name: "BITMAP_WORD", file: !741, line: 29, baseType: !736)
!755 = !{!756}
!756 = !DISubrange(count: 2)
!757 = !DIDerivedType(tag: DW_TAG_member, name: "current", scope: !740, file: !741, line: 77, baseType: !744, size: 64, offset: 64)
!758 = !DIDerivedType(tag: DW_TAG_member, name: "indx", scope: !740, file: !741, line: 78, baseType: !7, size: 32, offset: 128)
!759 = !DIDerivedType(tag: DW_TAG_member, name: "obstack", scope: !740, file: !741, line: 79, baseType: !760, size: 64, offset: 192)
!760 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !761, size: 64)
!761 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap_obstack", file: !741, line: 49, baseType: !762)
!762 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_obstack", file: !741, line: 45, size: 832, elements: !763)
!763 = !{!764, !765, !766}
!764 = !DIDerivedType(tag: DW_TAG_member, name: "elements", scope: !762, file: !741, line: 46, baseType: !749, size: 64)
!765 = !DIDerivedType(tag: DW_TAG_member, name: "heads", scope: !762, file: !741, line: 47, baseType: !739, size: 64, offset: 64)
!766 = !DIDerivedType(tag: DW_TAG_member, name: "obstack", scope: !762, file: !741, line: 48, baseType: !767, size: 704, offset: 128)
!767 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "obstack", file: !768, line: 164, size: 704, elements: !769)
!768 = !DIFile(filename: "./include/obstack.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!769 = !{!770, !772, !784, !785, !786, !787, !788, !790, !795, !799, !800, !801, !802}
!770 = !DIDerivedType(tag: DW_TAG_member, name: "chunk_size", scope: !767, file: !768, line: 166, baseType: !771, size: 64)
!771 = !DIBasicType(name: "long int", size: 64, encoding: DW_ATE_signed)
!772 = !DIDerivedType(tag: DW_TAG_member, name: "chunk", scope: !767, file: !768, line: 167, baseType: !773, size: 64, offset: 64)
!773 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !774, size: 64)
!774 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_obstack_chunk", file: !768, line: 157, size: 192, elements: !775)
!775 = !{!776, !779, !780}
!776 = !DIDerivedType(tag: DW_TAG_member, name: "limit", scope: !774, file: !768, line: 159, baseType: !777, size: 64)
!777 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !778, size: 64)
!778 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!779 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !774, file: !768, line: 160, baseType: !773, size: 64, offset: 64)
!780 = !DIDerivedType(tag: DW_TAG_member, name: "contents", scope: !774, file: !768, line: 161, baseType: !781, size: 32, offset: 128)
!781 = !DICompositeType(tag: DW_TAG_array_type, baseType: !778, size: 32, elements: !782)
!782 = !{!783}
!783 = !DISubrange(count: 4)
!784 = !DIDerivedType(tag: DW_TAG_member, name: "object_base", scope: !767, file: !768, line: 168, baseType: !777, size: 64, offset: 128)
!785 = !DIDerivedType(tag: DW_TAG_member, name: "next_free", scope: !767, file: !768, line: 169, baseType: !777, size: 64, offset: 192)
!786 = !DIDerivedType(tag: DW_TAG_member, name: "chunk_limit", scope: !767, file: !768, line: 170, baseType: !777, size: 64, offset: 256)
!787 = !DIDerivedType(tag: DW_TAG_member, name: "temp", scope: !767, file: !768, line: 171, baseType: !771, size: 64, offset: 320)
!788 = !DIDerivedType(tag: DW_TAG_member, name: "alignment_mask", scope: !767, file: !768, line: 172, baseType: !789, size: 32, offset: 384)
!789 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!790 = !DIDerivedType(tag: DW_TAG_member, name: "chunkfun", scope: !767, file: !768, line: 176, baseType: !791, size: 64, offset: 448)
!791 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !792, size: 64)
!792 = !DISubroutineType(types: !793)
!793 = !{!773, !794, !771}
!794 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!795 = !DIDerivedType(tag: DW_TAG_member, name: "freefun", scope: !767, file: !768, line: 177, baseType: !796, size: 64, offset: 512)
!796 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !797, size: 64)
!797 = !DISubroutineType(types: !798)
!798 = !{null, !794, !773}
!799 = !DIDerivedType(tag: DW_TAG_member, name: "extra_arg", scope: !767, file: !768, line: 178, baseType: !794, size: 64, offset: 576)
!800 = !DIDerivedType(tag: DW_TAG_member, name: "use_extra_arg", scope: !767, file: !768, line: 179, baseType: !7, size: 1, offset: 640, flags: DIFlagBitField, extraData: i64 640)
!801 = !DIDerivedType(tag: DW_TAG_member, name: "maybe_empty_object", scope: !767, file: !768, line: 180, baseType: !7, size: 1, offset: 641, flags: DIFlagBitField, extraData: i64 640)
!802 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_failed", scope: !767, file: !768, line: 184, baseType: !7, size: 1, offset: 642, flags: DIFlagBitField, extraData: i64 640)
!803 = !DIDerivedType(tag: DW_TAG_typedef, name: "tree", file: !738, line: 56, baseType: !804)
!804 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !805, size: 64)
!805 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "tree_node", file: !6, line: 3371, size: 1792, elements: !806)
!806 = !{!807, !840, !846, !857, !864, !871, !876, !885, !891, !905, !917, !955, !963, !991, !1008, !1009, !1014, !1023, !1029, !1034, !1038, !1042, !1565, !1614, !1620, !1626, !1633, !1646, !1660, !1677, !1689, !1711, !1726, !1898}
!807 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !805, file: !6, line: 3372, baseType: !808, size: 64)
!808 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_base", file: !6, line: 360, size: 64, elements: !809)
!809 = !{!810, !811, !812, !813, !814, !815, !816, !817, !818, !819, !820, !821, !822, !823, !824, !825, !826, !827, !828, !829, !830, !831, !832, !833, !834, !835, !836, !837, !838, !839}
!810 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !808, file: !6, line: 361, baseType: !7, size: 16, flags: DIFlagBitField, extraData: i64 0)
!811 = !DIDerivedType(tag: DW_TAG_member, name: "side_effects_flag", scope: !808, file: !6, line: 363, baseType: !7, size: 1, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!812 = !DIDerivedType(tag: DW_TAG_member, name: "constant_flag", scope: !808, file: !6, line: 364, baseType: !7, size: 1, offset: 17, flags: DIFlagBitField, extraData: i64 0)
!813 = !DIDerivedType(tag: DW_TAG_member, name: "addressable_flag", scope: !808, file: !6, line: 365, baseType: !7, size: 1, offset: 18, flags: DIFlagBitField, extraData: i64 0)
!814 = !DIDerivedType(tag: DW_TAG_member, name: "volatile_flag", scope: !808, file: !6, line: 366, baseType: !7, size: 1, offset: 19, flags: DIFlagBitField, extraData: i64 0)
!815 = !DIDerivedType(tag: DW_TAG_member, name: "readonly_flag", scope: !808, file: !6, line: 367, baseType: !7, size: 1, offset: 20, flags: DIFlagBitField, extraData: i64 0)
!816 = !DIDerivedType(tag: DW_TAG_member, name: "unsigned_flag", scope: !808, file: !6, line: 368, baseType: !7, size: 1, offset: 21, flags: DIFlagBitField, extraData: i64 0)
!817 = !DIDerivedType(tag: DW_TAG_member, name: "asm_written_flag", scope: !808, file: !6, line: 369, baseType: !7, size: 1, offset: 22, flags: DIFlagBitField, extraData: i64 0)
!818 = !DIDerivedType(tag: DW_TAG_member, name: "nowarning_flag", scope: !808, file: !6, line: 370, baseType: !7, size: 1, offset: 23, flags: DIFlagBitField, extraData: i64 0)
!819 = !DIDerivedType(tag: DW_TAG_member, name: "used_flag", scope: !808, file: !6, line: 372, baseType: !7, size: 1, offset: 24, flags: DIFlagBitField, extraData: i64 0)
!820 = !DIDerivedType(tag: DW_TAG_member, name: "nothrow_flag", scope: !808, file: !6, line: 373, baseType: !7, size: 1, offset: 25, flags: DIFlagBitField, extraData: i64 0)
!821 = !DIDerivedType(tag: DW_TAG_member, name: "static_flag", scope: !808, file: !6, line: 374, baseType: !7, size: 1, offset: 26, flags: DIFlagBitField, extraData: i64 0)
!822 = !DIDerivedType(tag: DW_TAG_member, name: "public_flag", scope: !808, file: !6, line: 375, baseType: !7, size: 1, offset: 27, flags: DIFlagBitField, extraData: i64 0)
!823 = !DIDerivedType(tag: DW_TAG_member, name: "private_flag", scope: !808, file: !6, line: 376, baseType: !7, size: 1, offset: 28, flags: DIFlagBitField, extraData: i64 0)
!824 = !DIDerivedType(tag: DW_TAG_member, name: "protected_flag", scope: !808, file: !6, line: 377, baseType: !7, size: 1, offset: 29, flags: DIFlagBitField, extraData: i64 0)
!825 = !DIDerivedType(tag: DW_TAG_member, name: "deprecated_flag", scope: !808, file: !6, line: 378, baseType: !7, size: 1, offset: 30, flags: DIFlagBitField, extraData: i64 0)
!826 = !DIDerivedType(tag: DW_TAG_member, name: "saturating_flag", scope: !808, file: !6, line: 379, baseType: !7, size: 1, offset: 31, flags: DIFlagBitField, extraData: i64 0)
!827 = !DIDerivedType(tag: DW_TAG_member, name: "default_def_flag", scope: !808, file: !6, line: 381, baseType: !7, size: 1, offset: 32, flags: DIFlagBitField, extraData: i64 0)
!828 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !808, file: !6, line: 382, baseType: !7, size: 1, offset: 33, flags: DIFlagBitField, extraData: i64 0)
!829 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !808, file: !6, line: 383, baseType: !7, size: 1, offset: 34, flags: DIFlagBitField, extraData: i64 0)
!830 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !808, file: !6, line: 384, baseType: !7, size: 1, offset: 35, flags: DIFlagBitField, extraData: i64 0)
!831 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !808, file: !6, line: 385, baseType: !7, size: 1, offset: 36, flags: DIFlagBitField, extraData: i64 0)
!832 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !808, file: !6, line: 386, baseType: !7, size: 1, offset: 37, flags: DIFlagBitField, extraData: i64 0)
!833 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !808, file: !6, line: 387, baseType: !7, size: 1, offset: 38, flags: DIFlagBitField, extraData: i64 0)
!834 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !808, file: !6, line: 388, baseType: !7, size: 1, offset: 39, flags: DIFlagBitField, extraData: i64 0)
!835 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !808, file: !6, line: 390, baseType: !7, size: 1, offset: 40, flags: DIFlagBitField, extraData: i64 0)
!836 = !DIDerivedType(tag: DW_TAG_member, name: "packed_flag", scope: !808, file: !6, line: 391, baseType: !7, size: 1, offset: 41, flags: DIFlagBitField, extraData: i64 0)
!837 = !DIDerivedType(tag: DW_TAG_member, name: "user_align", scope: !808, file: !6, line: 392, baseType: !7, size: 1, offset: 42, flags: DIFlagBitField, extraData: i64 0)
!838 = !DIDerivedType(tag: DW_TAG_member, name: "spare", scope: !808, file: !6, line: 394, baseType: !7, size: 13, offset: 43, flags: DIFlagBitField, extraData: i64 0)
!839 = !DIDerivedType(tag: DW_TAG_member, name: "address_space", scope: !808, file: !6, line: 399, baseType: !7, size: 8, offset: 56, flags: DIFlagBitField, extraData: i64 0)
!840 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !805, file: !6, line: 3373, baseType: !841, size: 192)
!841 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_common", file: !6, line: 402, size: 192, elements: !842)
!842 = !{!843, !844, !845}
!843 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !841, file: !6, line: 403, baseType: !808, size: 64)
!844 = !DIDerivedType(tag: DW_TAG_member, name: "chain", scope: !841, file: !6, line: 404, baseType: !803, size: 64, offset: 64)
!845 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !841, file: !6, line: 405, baseType: !803, size: 64, offset: 128)
!846 = !DIDerivedType(tag: DW_TAG_member, name: "int_cst", scope: !805, file: !6, line: 3374, baseType: !847, size: 320)
!847 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_int_cst", file: !6, line: 1384, size: 320, elements: !848)
!848 = !{!849, !850}
!849 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !847, file: !6, line: 1385, baseType: !841, size: 192)
!850 = !DIDerivedType(tag: DW_TAG_member, name: "int_cst", scope: !847, file: !6, line: 1386, baseType: !851, size: 128, offset: 192)
!851 = !DIDerivedType(tag: DW_TAG_typedef, name: "double_int", file: !852, line: 58, baseType: !853)
!852 = !DIFile(filename: "./double-int.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!853 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !852, line: 54, size: 128, elements: !854)
!854 = !{!855, !856}
!855 = !DIDerivedType(tag: DW_TAG_member, name: "low", scope: !853, file: !852, line: 56, baseType: !736, size: 64)
!856 = !DIDerivedType(tag: DW_TAG_member, name: "high", scope: !853, file: !852, line: 57, baseType: !771, size: 64, offset: 64)
!857 = !DIDerivedType(tag: DW_TAG_member, name: "real_cst", scope: !805, file: !6, line: 3375, baseType: !858, size: 256)
!858 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_real_cst", file: !6, line: 1397, size: 256, elements: !859)
!859 = !{!860, !861}
!860 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !858, file: !6, line: 1398, baseType: !841, size: 192)
!861 = !DIDerivedType(tag: DW_TAG_member, name: "real_cst_ptr", scope: !858, file: !6, line: 1399, baseType: !862, size: 64, offset: 192)
!862 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !863, size: 64)
!863 = !DICompositeType(tag: DW_TAG_structure_type, name: "real_value", file: !6, line: 1392, flags: DIFlagFwdDecl)
!864 = !DIDerivedType(tag: DW_TAG_member, name: "fixed_cst", scope: !805, file: !6, line: 3376, baseType: !865, size: 256)
!865 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_fixed_cst", file: !6, line: 1408, size: 256, elements: !866)
!866 = !{!867, !868}
!867 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !865, file: !6, line: 1409, baseType: !841, size: 192)
!868 = !DIDerivedType(tag: DW_TAG_member, name: "fixed_cst_ptr", scope: !865, file: !6, line: 1410, baseType: !869, size: 64, offset: 192)
!869 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !870, size: 64)
!870 = !DICompositeType(tag: DW_TAG_structure_type, name: "fixed_value", file: !6, line: 1403, flags: DIFlagFwdDecl)
!871 = !DIDerivedType(tag: DW_TAG_member, name: "vector", scope: !805, file: !6, line: 3377, baseType: !872, size: 256)
!872 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_vector", file: !6, line: 1437, size: 256, elements: !873)
!873 = !{!874, !875}
!874 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !872, file: !6, line: 1438, baseType: !841, size: 192)
!875 = !DIDerivedType(tag: DW_TAG_member, name: "elements", scope: !872, file: !6, line: 1439, baseType: !803, size: 64, offset: 192)
!876 = !DIDerivedType(tag: DW_TAG_member, name: "string", scope: !805, file: !6, line: 3378, baseType: !877, size: 256)
!877 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_string", file: !6, line: 1418, size: 256, elements: !878)
!878 = !{!879, !880, !881}
!879 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !877, file: !6, line: 1419, baseType: !841, size: 192)
!880 = !DIDerivedType(tag: DW_TAG_member, name: "length", scope: !877, file: !6, line: 1420, baseType: !789, size: 32, offset: 192)
!881 = !DIDerivedType(tag: DW_TAG_member, name: "str", scope: !877, file: !6, line: 1421, baseType: !882, size: 8, offset: 224)
!882 = !DICompositeType(tag: DW_TAG_array_type, baseType: !778, size: 8, elements: !883)
!883 = !{!884}
!884 = !DISubrange(count: 1)
!885 = !DIDerivedType(tag: DW_TAG_member, name: "complex", scope: !805, file: !6, line: 3379, baseType: !886, size: 320)
!886 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_complex", file: !6, line: 1428, size: 320, elements: !887)
!887 = !{!888, !889, !890}
!888 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !886, file: !6, line: 1429, baseType: !841, size: 192)
!889 = !DIDerivedType(tag: DW_TAG_member, name: "real", scope: !886, file: !6, line: 1430, baseType: !803, size: 64, offset: 192)
!890 = !DIDerivedType(tag: DW_TAG_member, name: "imag", scope: !886, file: !6, line: 1431, baseType: !803, size: 64, offset: 256)
!891 = !DIDerivedType(tag: DW_TAG_member, name: "identifier", scope: !805, file: !6, line: 3380, baseType: !892, size: 320)
!892 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_identifier", file: !6, line: 1460, size: 320, elements: !893)
!893 = !{!894, !895}
!894 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !892, file: !6, line: 1461, baseType: !841, size: 192)
!895 = !DIDerivedType(tag: DW_TAG_member, name: "id", scope: !892, file: !6, line: 1462, baseType: !896, size: 128, offset: 192)
!896 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ht_identifier", file: !897, line: 31, size: 128, elements: !898)
!897 = !DIFile(filename: "./symtab.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!898 = !{!899, !903, !904}
!899 = !DIDerivedType(tag: DW_TAG_member, name: "str", scope: !896, file: !897, line: 32, baseType: !900, size: 64)
!900 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !901, size: 64)
!901 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !902)
!902 = !DIBasicType(name: "unsigned char", size: 8, encoding: DW_ATE_unsigned_char)
!903 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !896, file: !897, line: 33, baseType: !7, size: 32, offset: 64)
!904 = !DIDerivedType(tag: DW_TAG_member, name: "hash_value", scope: !896, file: !897, line: 34, baseType: !7, size: 32, offset: 96)
!905 = !DIDerivedType(tag: DW_TAG_member, name: "decl_minimal", scope: !805, file: !6, line: 3381, baseType: !906, size: 384)
!906 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_minimal", file: !6, line: 2507, size: 384, elements: !907)
!907 = !{!908, !909, !914, !915, !916}
!908 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !906, file: !6, line: 2508, baseType: !841, size: 192)
!909 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !906, file: !6, line: 2509, baseType: !910, size: 32, offset: 192)
!910 = !DIDerivedType(tag: DW_TAG_typedef, name: "location_t", file: !911, line: 58, baseType: !912)
!911 = !DIFile(filename: "./input.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!912 = !DIDerivedType(tag: DW_TAG_typedef, name: "source_location", file: !913, line: 44, baseType: !7)
!913 = !DIFile(filename: "./line-map.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!914 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !906, file: !6, line: 2510, baseType: !7, size: 32, offset: 224)
!915 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !906, file: !6, line: 2511, baseType: !803, size: 64, offset: 256)
!916 = !DIDerivedType(tag: DW_TAG_member, name: "context", scope: !906, file: !6, line: 2512, baseType: !803, size: 64, offset: 320)
!917 = !DIDerivedType(tag: DW_TAG_member, name: "decl_common", scope: !805, file: !6, line: 3382, baseType: !918, size: 896)
!918 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_common", file: !6, line: 2652, size: 896, elements: !919)
!919 = !{!920, !921, !922, !923, !924, !925, !926, !927, !928, !929, !930, !931, !932, !933, !934, !935, !936, !937, !938, !939, !940, !941, !942, !943, !944, !945, !946, !947, !948, !949, !950, !951, !952}
!920 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !918, file: !6, line: 2653, baseType: !906, size: 384)
!921 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !918, file: !6, line: 2654, baseType: !803, size: 64, offset: 384)
!922 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !918, file: !6, line: 2656, baseType: !7, size: 8, offset: 448, flags: DIFlagBitField, extraData: i64 448)
!923 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal_flag", scope: !918, file: !6, line: 2658, baseType: !7, size: 1, offset: 456, flags: DIFlagBitField, extraData: i64 448)
!924 = !DIDerivedType(tag: DW_TAG_member, name: "virtual_flag", scope: !918, file: !6, line: 2659, baseType: !7, size: 1, offset: 457, flags: DIFlagBitField, extraData: i64 448)
!925 = !DIDerivedType(tag: DW_TAG_member, name: "ignored_flag", scope: !918, file: !6, line: 2660, baseType: !7, size: 1, offset: 458, flags: DIFlagBitField, extraData: i64 448)
!926 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_flag", scope: !918, file: !6, line: 2661, baseType: !7, size: 1, offset: 459, flags: DIFlagBitField, extraData: i64 448)
!927 = !DIDerivedType(tag: DW_TAG_member, name: "artificial_flag", scope: !918, file: !6, line: 2662, baseType: !7, size: 1, offset: 460, flags: DIFlagBitField, extraData: i64 448)
!928 = !DIDerivedType(tag: DW_TAG_member, name: "preserve_flag", scope: !918, file: !6, line: 2663, baseType: !7, size: 1, offset: 461, flags: DIFlagBitField, extraData: i64 448)
!929 = !DIDerivedType(tag: DW_TAG_member, name: "debug_expr_is_from", scope: !918, file: !6, line: 2664, baseType: !7, size: 1, offset: 462, flags: DIFlagBitField, extraData: i64 448)
!930 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !918, file: !6, line: 2666, baseType: !7, size: 1, offset: 463, flags: DIFlagBitField, extraData: i64 448)
!931 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !918, file: !6, line: 2667, baseType: !7, size: 1, offset: 464, flags: DIFlagBitField, extraData: i64 448)
!932 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !918, file: !6, line: 2668, baseType: !7, size: 1, offset: 465, flags: DIFlagBitField, extraData: i64 448)
!933 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !918, file: !6, line: 2669, baseType: !7, size: 1, offset: 466, flags: DIFlagBitField, extraData: i64 448)
!934 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !918, file: !6, line: 2670, baseType: !7, size: 1, offset: 467, flags: DIFlagBitField, extraData: i64 448)
!935 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !918, file: !6, line: 2671, baseType: !7, size: 1, offset: 468, flags: DIFlagBitField, extraData: i64 448)
!936 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !918, file: !6, line: 2672, baseType: !7, size: 1, offset: 469, flags: DIFlagBitField, extraData: i64 448)
!937 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_7", scope: !918, file: !6, line: 2673, baseType: !7, size: 1, offset: 470, flags: DIFlagBitField, extraData: i64 448)
!938 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_8", scope: !918, file: !6, line: 2674, baseType: !7, size: 1, offset: 471, flags: DIFlagBitField, extraData: i64 448)
!939 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_0", scope: !918, file: !6, line: 2678, baseType: !7, size: 1, offset: 472, flags: DIFlagBitField, extraData: i64 448)
!940 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_1", scope: !918, file: !6, line: 2682, baseType: !7, size: 1, offset: 473, flags: DIFlagBitField, extraData: i64 448)
!941 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_2", scope: !918, file: !6, line: 2685, baseType: !7, size: 1, offset: 474, flags: DIFlagBitField, extraData: i64 448)
!942 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reg_flag", scope: !918, file: !6, line: 2688, baseType: !7, size: 1, offset: 475, flags: DIFlagBitField, extraData: i64 448)
!943 = !DIDerivedType(tag: DW_TAG_member, name: "decl_by_reference_flag", scope: !918, file: !6, line: 2690, baseType: !7, size: 1, offset: 476, flags: DIFlagBitField, extraData: i64 448)
!944 = !DIDerivedType(tag: DW_TAG_member, name: "decl_restricted_flag", scope: !918, file: !6, line: 2692, baseType: !7, size: 1, offset: 477, flags: DIFlagBitField, extraData: i64 448)
!945 = !DIDerivedType(tag: DW_TAG_member, name: "decl_common_unused", scope: !918, file: !6, line: 2695, baseType: !7, size: 2, offset: 478, flags: DIFlagBitField, extraData: i64 448)
!946 = !DIDerivedType(tag: DW_TAG_member, name: "off_align", scope: !918, file: !6, line: 2698, baseType: !7, size: 8, offset: 480, flags: DIFlagBitField, extraData: i64 448)
!947 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !918, file: !6, line: 2703, baseType: !7, size: 32, offset: 512)
!948 = !DIDerivedType(tag: DW_TAG_member, name: "size_unit", scope: !918, file: !6, line: 2705, baseType: !803, size: 64, offset: 576)
!949 = !DIDerivedType(tag: DW_TAG_member, name: "initial", scope: !918, file: !6, line: 2706, baseType: !803, size: 64, offset: 640)
!950 = !DIDerivedType(tag: DW_TAG_member, name: "attributes", scope: !918, file: !6, line: 2707, baseType: !803, size: 64, offset: 704)
!951 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_origin", scope: !918, file: !6, line: 2708, baseType: !803, size: 64, offset: 768)
!952 = !DIDerivedType(tag: DW_TAG_member, name: "lang_specific", scope: !918, file: !6, line: 2711, baseType: !953, size: 64, offset: 832)
!953 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !954, size: 64)
!954 = !DICompositeType(tag: DW_TAG_structure_type, name: "lang_decl", file: !6, line: 2711, flags: DIFlagFwdDecl)
!955 = !DIDerivedType(tag: DW_TAG_member, name: "decl_with_rtl", scope: !805, file: !6, line: 3383, baseType: !956, size: 960)
!956 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_with_rtl", file: !6, line: 2756, size: 960, elements: !957)
!957 = !{!958, !959}
!958 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !956, file: !6, line: 2757, baseType: !918, size: 896)
!959 = !DIDerivedType(tag: DW_TAG_member, name: "rtl", scope: !956, file: !6, line: 2758, baseType: !960, size: 64, offset: 896)
!960 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtx", file: !738, line: 50, baseType: !961)
!961 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !962, size: 64)
!962 = !DICompositeType(tag: DW_TAG_structure_type, name: "rtx_def", file: !738, line: 49, flags: DIFlagFwdDecl)
!963 = !DIDerivedType(tag: DW_TAG_member, name: "decl_non_common", scope: !805, file: !6, line: 3384, baseType: !964, size: 1472)
!964 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_non_common", file: !6, line: 3114, size: 1472, elements: !965)
!965 = !{!966, !987, !988, !989, !990}
!966 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !964, file: !6, line: 3115, baseType: !967, size: 1216)
!967 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_with_vis", file: !6, line: 2984, size: 1216, elements: !968)
!968 = !{!969, !970, !971, !972, !973, !974, !975, !976, !977, !978, !979, !980, !981, !982, !983, !984, !985, !986}
!969 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !967, file: !6, line: 2985, baseType: !956, size: 960)
!970 = !DIDerivedType(tag: DW_TAG_member, name: "assembler_name", scope: !967, file: !6, line: 2986, baseType: !803, size: 64, offset: 960)
!971 = !DIDerivedType(tag: DW_TAG_member, name: "section_name", scope: !967, file: !6, line: 2987, baseType: !803, size: 64, offset: 1024)
!972 = !DIDerivedType(tag: DW_TAG_member, name: "comdat_group", scope: !967, file: !6, line: 2988, baseType: !803, size: 64, offset: 1088)
!973 = !DIDerivedType(tag: DW_TAG_member, name: "defer_output", scope: !967, file: !6, line: 2991, baseType: !7, size: 1, offset: 1152, flags: DIFlagBitField, extraData: i64 1152)
!974 = !DIDerivedType(tag: DW_TAG_member, name: "hard_register", scope: !967, file: !6, line: 2992, baseType: !7, size: 1, offset: 1153, flags: DIFlagBitField, extraData: i64 1152)
!975 = !DIDerivedType(tag: DW_TAG_member, name: "thread_local", scope: !967, file: !6, line: 2993, baseType: !7, size: 1, offset: 1154, flags: DIFlagBitField, extraData: i64 1152)
!976 = !DIDerivedType(tag: DW_TAG_member, name: "common_flag", scope: !967, file: !6, line: 2994, baseType: !7, size: 1, offset: 1155, flags: DIFlagBitField, extraData: i64 1152)
!977 = !DIDerivedType(tag: DW_TAG_member, name: "in_text_section", scope: !967, file: !6, line: 2995, baseType: !7, size: 1, offset: 1156, flags: DIFlagBitField, extraData: i64 1152)
!978 = !DIDerivedType(tag: DW_TAG_member, name: "dllimport_flag", scope: !967, file: !6, line: 2996, baseType: !7, size: 1, offset: 1157, flags: DIFlagBitField, extraData: i64 1152)
!979 = !DIDerivedType(tag: DW_TAG_member, name: "shadowed_for_var_p", scope: !967, file: !6, line: 2998, baseType: !7, size: 1, offset: 1158, flags: DIFlagBitField, extraData: i64 1152)
!980 = !DIDerivedType(tag: DW_TAG_member, name: "weak_flag", scope: !967, file: !6, line: 3000, baseType: !7, size: 1, offset: 1159, flags: DIFlagBitField, extraData: i64 1152)
!981 = !DIDerivedType(tag: DW_TAG_member, name: "seen_in_bind_expr", scope: !967, file: !6, line: 3002, baseType: !7, size: 1, offset: 1160, flags: DIFlagBitField, extraData: i64 1152)
!982 = !DIDerivedType(tag: DW_TAG_member, name: "comdat_flag", scope: !967, file: !6, line: 3003, baseType: !7, size: 1, offset: 1161, flags: DIFlagBitField, extraData: i64 1152)
!983 = !DIDerivedType(tag: DW_TAG_member, name: "visibility", scope: !967, file: !6, line: 3004, baseType: !7, size: 2, offset: 1162, flags: DIFlagBitField, extraData: i64 1152)
!984 = !DIDerivedType(tag: DW_TAG_member, name: "visibility_specified", scope: !967, file: !6, line: 3005, baseType: !7, size: 1, offset: 1164, flags: DIFlagBitField, extraData: i64 1152)
!985 = !DIDerivedType(tag: DW_TAG_member, name: "tls_model", scope: !967, file: !6, line: 3007, baseType: !7, size: 3, offset: 1165, flags: DIFlagBitField, extraData: i64 1152)
!986 = !DIDerivedType(tag: DW_TAG_member, name: "init_priority_p", scope: !967, file: !6, line: 3010, baseType: !7, size: 1, offset: 1168, flags: DIFlagBitField, extraData: i64 1152)
!987 = !DIDerivedType(tag: DW_TAG_member, name: "saved_tree", scope: !964, file: !6, line: 3117, baseType: !803, size: 64, offset: 1216)
!988 = !DIDerivedType(tag: DW_TAG_member, name: "arguments", scope: !964, file: !6, line: 3119, baseType: !803, size: 64, offset: 1280)
!989 = !DIDerivedType(tag: DW_TAG_member, name: "result", scope: !964, file: !6, line: 3121, baseType: !803, size: 64, offset: 1344)
!990 = !DIDerivedType(tag: DW_TAG_member, name: "vindex", scope: !964, file: !6, line: 3123, baseType: !803, size: 64, offset: 1408)
!991 = !DIDerivedType(tag: DW_TAG_member, name: "parm_decl", scope: !805, file: !6, line: 3385, baseType: !992, size: 1088)
!992 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_parm_decl", file: !6, line: 2874, size: 1088, elements: !993)
!993 = !{!994, !995, !996}
!994 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !992, file: !6, line: 2875, baseType: !956, size: 960)
!995 = !DIDerivedType(tag: DW_TAG_member, name: "incoming_rtl", scope: !992, file: !6, line: 2876, baseType: !960, size: 64, offset: 960)
!996 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !992, file: !6, line: 2877, baseType: !997, size: 64, offset: 1024)
!997 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !998, size: 64)
!998 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "var_ann_d", file: !999, line: 172, size: 128, elements: !1000)
!999 = !DIFile(filename: "./tree-flow.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1000 = !{!1001, !1002, !1003, !1004, !1005, !1006, !1007}
!1001 = !DIDerivedType(tag: DW_TAG_member, name: "base_var_processed", scope: !998, file: !999, line: 174, baseType: !7, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1002 = !DIDerivedType(tag: DW_TAG_member, name: "used", scope: !998, file: !999, line: 178, baseType: !7, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1003 = !DIDerivedType(tag: DW_TAG_member, name: "need_phi_state", scope: !998, file: !999, line: 183, baseType: !7, size: 2, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1004 = !DIDerivedType(tag: DW_TAG_member, name: "is_heapvar", scope: !998, file: !999, line: 187, baseType: !7, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1005 = !DIDerivedType(tag: DW_TAG_member, name: "noalias_state", scope: !998, file: !999, line: 192, baseType: !7, size: 2, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1006 = !DIDerivedType(tag: DW_TAG_member, name: "base_index", scope: !998, file: !999, line: 195, baseType: !7, size: 32, offset: 32)
!1007 = !DIDerivedType(tag: DW_TAG_member, name: "current_def", scope: !998, file: !999, line: 199, baseType: !803, size: 64, offset: 64)
!1008 = !DIDerivedType(tag: DW_TAG_member, name: "decl_with_vis", scope: !805, file: !6, line: 3386, baseType: !967, size: 1216)
!1009 = !DIDerivedType(tag: DW_TAG_member, name: "var_decl", scope: !805, file: !6, line: 3387, baseType: !1010, size: 1280)
!1010 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_var_decl", file: !6, line: 3093, size: 1280, elements: !1011)
!1011 = !{!1012, !1013}
!1012 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1010, file: !6, line: 3094, baseType: !967, size: 1216)
!1013 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !1010, file: !6, line: 3095, baseType: !997, size: 64, offset: 1216)
!1014 = !DIDerivedType(tag: DW_TAG_member, name: "field_decl", scope: !805, file: !6, line: 3388, baseType: !1015, size: 1216)
!1015 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_field_decl", file: !6, line: 2824, size: 1216, elements: !1016)
!1016 = !{!1017, !1018, !1019, !1020, !1021, !1022}
!1017 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1015, file: !6, line: 2825, baseType: !918, size: 896)
!1018 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1015, file: !6, line: 2827, baseType: !803, size: 64, offset: 896)
!1019 = !DIDerivedType(tag: DW_TAG_member, name: "bit_field_type", scope: !1015, file: !6, line: 2828, baseType: !803, size: 64, offset: 960)
!1020 = !DIDerivedType(tag: DW_TAG_member, name: "qualifier", scope: !1015, file: !6, line: 2829, baseType: !803, size: 64, offset: 1024)
!1021 = !DIDerivedType(tag: DW_TAG_member, name: "bit_offset", scope: !1015, file: !6, line: 2830, baseType: !803, size: 64, offset: 1088)
!1022 = !DIDerivedType(tag: DW_TAG_member, name: "fcontext", scope: !1015, file: !6, line: 2831, baseType: !803, size: 64, offset: 1152)
!1023 = !DIDerivedType(tag: DW_TAG_member, name: "label_decl", scope: !805, file: !6, line: 3389, baseType: !1024, size: 1024)
!1024 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_label_decl", file: !6, line: 2850, size: 1024, elements: !1025)
!1025 = !{!1026, !1027, !1028}
!1026 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1024, file: !6, line: 2851, baseType: !956, size: 960)
!1027 = !DIDerivedType(tag: DW_TAG_member, name: "label_decl_uid", scope: !1024, file: !6, line: 2852, baseType: !789, size: 32, offset: 960)
!1028 = !DIDerivedType(tag: DW_TAG_member, name: "eh_landing_pad_nr", scope: !1024, file: !6, line: 2853, baseType: !789, size: 32, offset: 992)
!1029 = !DIDerivedType(tag: DW_TAG_member, name: "result_decl", scope: !805, file: !6, line: 3390, baseType: !1030, size: 1024)
!1030 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_result_decl", file: !6, line: 2857, size: 1024, elements: !1031)
!1031 = !{!1032, !1033}
!1032 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1030, file: !6, line: 2858, baseType: !956, size: 960)
!1033 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !1030, file: !6, line: 2859, baseType: !997, size: 64, offset: 960)
!1034 = !DIDerivedType(tag: DW_TAG_member, name: "const_decl", scope: !805, file: !6, line: 3391, baseType: !1035, size: 960)
!1035 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_const_decl", file: !6, line: 2862, size: 960, elements: !1036)
!1036 = !{!1037}
!1037 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1035, file: !6, line: 2863, baseType: !956, size: 960)
!1038 = !DIDerivedType(tag: DW_TAG_member, name: "type_decl", scope: !805, file: !6, line: 3392, baseType: !1039, size: 1472)
!1039 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_type_decl", file: !6, line: 3304, size: 1472, elements: !1040)
!1040 = !{!1041}
!1041 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1039, file: !6, line: 3305, baseType: !964, size: 1472)
!1042 = !DIDerivedType(tag: DW_TAG_member, name: "function_decl", scope: !805, file: !6, line: 3393, baseType: !1043, size: 1792)
!1043 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_function_decl", file: !6, line: 3248, size: 1792, elements: !1044)
!1044 = !{!1045, !1046, !1544, !1545, !1546, !1547, !1548, !1549, !1550, !1551, !1552, !1553, !1554, !1555, !1556, !1557, !1558, !1559, !1560, !1561, !1562, !1563, !1564}
!1045 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1043, file: !6, line: 3249, baseType: !964, size: 1472)
!1046 = !DIDerivedType(tag: DW_TAG_member, name: "f", scope: !1043, file: !6, line: 3251, baseType: !1047, size: 64, offset: 1472)
!1047 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1048, size: 64)
!1048 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "function", file: !1049, line: 463, size: 1152, elements: !1050)
!1049 = !DIFile(filename: "./function.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1050 = !{!1051, !1054, !1370, !1371, !1485, !1488, !1489, !1490, !1491, !1492, !1493, !1517, !1520, !1521, !1522, !1523, !1524, !1525, !1526, !1527, !1528, !1529, !1530, !1531, !1532, !1533, !1534, !1535, !1536, !1537, !1538, !1539, !1540, !1541, !1542, !1543}
!1051 = !DIDerivedType(tag: DW_TAG_member, name: "eh", scope: !1048, file: !1049, line: 464, baseType: !1052, size: 64)
!1052 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1053, size: 64)
!1053 = !DICompositeType(tag: DW_TAG_structure_type, name: "eh_status", file: !1049, line: 464, flags: DIFlagFwdDecl)
!1054 = !DIDerivedType(tag: DW_TAG_member, name: "cfg", scope: !1048, file: !1049, line: 467, baseType: !1055, size: 64, offset: 64)
!1055 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1056, size: 64)
!1056 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "control_flow_graph", file: !202, line: 374, size: 640, elements: !1057)
!1057 = !{!1058, !1345, !1346, !1359, !1360, !1361, !1362, !1363, !1364, !1366, !1368, !1369}
!1058 = !DIDerivedType(tag: DW_TAG_member, name: "x_entry_block_ptr", scope: !1056, file: !202, line: 377, baseType: !1059, size: 64)
!1059 = !DIDerivedType(tag: DW_TAG_typedef, name: "basic_block", file: !738, line: 111, baseType: !1060)
!1060 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1061, size: 64)
!1061 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "basic_block_def", file: !202, line: 217, size: 832, elements: !1062)
!1062 = !{!1063, !1310, !1311, !1312, !1315, !1319, !1320, !1321, !1339, !1340, !1341, !1342, !1343, !1344}
!1063 = !DIDerivedType(tag: DW_TAG_member, name: "preds", scope: !1061, file: !202, line: 219, baseType: !1064, size: 64)
!1064 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1065, size: 64)
!1065 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_edge_gc", file: !202, line: 151, baseType: !1066)
!1066 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_edge_gc", file: !202, line: 151, size: 128, elements: !1067)
!1067 = !{!1068}
!1068 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1066, file: !202, line: 151, baseType: !1069, size: 128)
!1069 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_edge_base", file: !202, line: 150, baseType: !1070)
!1070 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_edge_base", file: !202, line: 150, size: 128, elements: !1071)
!1071 = !{!1072, !1073, !1074}
!1072 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1070, file: !202, line: 150, baseType: !7, size: 32)
!1073 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1070, file: !202, line: 150, baseType: !7, size: 32, offset: 32)
!1074 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1070, file: !202, line: 150, baseType: !1075, size: 64, offset: 64)
!1075 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1076, size: 64, elements: !883)
!1076 = !DIDerivedType(tag: DW_TAG_typedef, name: "edge", file: !738, line: 108, baseType: !1077)
!1077 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1078, size: 64)
!1078 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "edge_def", file: !202, line: 122, size: 512, elements: !1079)
!1079 = !{!1080, !1081, !1082, !1302, !1303, !1304, !1305, !1306, !1307, !1308}
!1080 = !DIDerivedType(tag: DW_TAG_member, name: "src", scope: !1078, file: !202, line: 124, baseType: !1060, size: 64)
!1081 = !DIDerivedType(tag: DW_TAG_member, name: "dest", scope: !1078, file: !202, line: 125, baseType: !1060, size: 64, offset: 64)
!1082 = !DIDerivedType(tag: DW_TAG_member, name: "insns", scope: !1078, file: !202, line: 131, baseType: !1083, size: 64, offset: 128)
!1083 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "edge_def_insns", file: !202, line: 128, size: 64, elements: !1084)
!1084 = !{!1085, !1301}
!1085 = !DIDerivedType(tag: DW_TAG_member, name: "g", scope: !1083, file: !202, line: 129, baseType: !1086, size: 64)
!1086 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple_seq", file: !738, line: 66, baseType: !1087)
!1087 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1088, size: 64)
!1088 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_seq_d", file: !446, line: 143, size: 192, elements: !1089)
!1089 = !{!1090, !1299, !1300}
!1090 = !DIDerivedType(tag: DW_TAG_member, name: "first", scope: !1088, file: !446, line: 145, baseType: !1091, size: 64)
!1091 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple_seq_node", file: !738, line: 69, baseType: !1092)
!1092 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1093, size: 64)
!1093 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_seq_node_d", file: !446, line: 136, size: 192, elements: !1094)
!1094 = !{!1095, !1297, !1298}
!1095 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !1093, file: !446, line: 137, baseType: !1096, size: 64)
!1096 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple", file: !738, line: 58, baseType: !1097)
!1097 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1098, size: 64)
!1098 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "gimple_statement_d", file: !446, line: 737, size: 768, elements: !1099)
!1099 = !{!1100, !1117, !1150, !1156, !1161, !1166, !1173, !1179, !1185, !1190, !1204, !1209, !1215, !1220, !1232, !1237, !1255, !1262, !1269, !1275, !1280, !1286, !1292}
!1100 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1098, file: !446, line: 738, baseType: !1101, size: 256)
!1101 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_base", file: !446, line: 271, size: 256, elements: !1102)
!1102 = !{!1103, !1104, !1105, !1106, !1107, !1108, !1109, !1110, !1111, !1112, !1113, !1114, !1115, !1116}
!1103 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !1101, file: !446, line: 274, baseType: !7, size: 8, flags: DIFlagBitField, extraData: i64 0)
!1104 = !DIDerivedType(tag: DW_TAG_member, name: "no_warning", scope: !1101, file: !446, line: 277, baseType: !7, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1105 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !1101, file: !446, line: 281, baseType: !7, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1106 = !DIDerivedType(tag: DW_TAG_member, name: "nontemporal_move", scope: !1101, file: !446, line: 284, baseType: !7, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1107 = !DIDerivedType(tag: DW_TAG_member, name: "plf", scope: !1101, file: !446, line: 291, baseType: !7, size: 2, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!1108 = !DIDerivedType(tag: DW_TAG_member, name: "modified", scope: !1101, file: !446, line: 295, baseType: !7, size: 1, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!1109 = !DIDerivedType(tag: DW_TAG_member, name: "has_volatile_ops", scope: !1101, file: !446, line: 298, baseType: !7, size: 1, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!1110 = !DIDerivedType(tag: DW_TAG_member, name: "pad", scope: !1101, file: !446, line: 301, baseType: !7, size: 1, offset: 15, flags: DIFlagBitField, extraData: i64 0)
!1111 = !DIDerivedType(tag: DW_TAG_member, name: "subcode", scope: !1101, file: !446, line: 307, baseType: !7, size: 16, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1112 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !1101, file: !446, line: 312, baseType: !7, size: 32, offset: 32)
!1113 = !DIDerivedType(tag: DW_TAG_member, name: "location", scope: !1101, file: !446, line: 316, baseType: !910, size: 32, offset: 64)
!1114 = !DIDerivedType(tag: DW_TAG_member, name: "num_ops", scope: !1101, file: !446, line: 319, baseType: !7, size: 32, offset: 96)
!1115 = !DIDerivedType(tag: DW_TAG_member, name: "bb", scope: !1101, file: !446, line: 323, baseType: !1060, size: 64, offset: 128)
!1116 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !1101, file: !446, line: 327, baseType: !803, size: 64, offset: 192)
!1117 = !DIDerivedType(tag: DW_TAG_member, name: "gsops", scope: !1098, file: !446, line: 739, baseType: !1118, size: 448)
!1118 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_ops", file: !446, line: 350, size: 448, elements: !1119)
!1119 = !{!1120, !1148}
!1120 = !DIDerivedType(tag: DW_TAG_member, name: "opbase", scope: !1118, file: !446, line: 353, baseType: !1121, size: 384)
!1121 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_ops_base", file: !446, line: 333, size: 384, elements: !1122)
!1122 = !{!1123, !1124, !1131}
!1123 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1121, file: !446, line: 336, baseType: !1101, size: 256)
!1124 = !DIDerivedType(tag: DW_TAG_member, name: "def_ops", scope: !1121, file: !446, line: 343, baseType: !1125, size: 64, offset: 256)
!1125 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1126, size: 64)
!1126 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "def_optype_d", file: !485, line: 37, size: 128, elements: !1127)
!1127 = !{!1128, !1129}
!1128 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1126, file: !485, line: 39, baseType: !1125, size: 64)
!1129 = !DIDerivedType(tag: DW_TAG_member, name: "def_ptr", scope: !1126, file: !485, line: 40, baseType: !1130, size: 64, offset: 64)
!1130 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !803, size: 64)
!1131 = !DIDerivedType(tag: DW_TAG_member, name: "use_ops", scope: !1121, file: !446, line: 344, baseType: !1132, size: 64, offset: 320)
!1132 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1133, size: 64)
!1133 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "use_optype_d", file: !485, line: 45, size: 320, elements: !1134)
!1134 = !{!1135, !1136}
!1135 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1133, file: !485, line: 47, baseType: !1132, size: 64)
!1136 = !DIDerivedType(tag: DW_TAG_member, name: "use_ptr", scope: !1133, file: !485, line: 48, baseType: !1137, size: 256, offset: 64)
!1137 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_use_operand_d", file: !6, line: 1883, size: 256, elements: !1138)
!1138 = !{!1139, !1141, !1142, !1147}
!1139 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1137, file: !6, line: 1884, baseType: !1140, size: 64)
!1140 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1137, size: 64)
!1141 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1137, file: !6, line: 1885, baseType: !1140, size: 64, offset: 64)
!1142 = !DIDerivedType(tag: DW_TAG_member, name: "loc", scope: !1137, file: !6, line: 1891, baseType: !1143, size: 64, offset: 128)
!1143 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1137, file: !6, line: 1891, size: 64, elements: !1144)
!1144 = !{!1145, !1146}
!1145 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !1143, file: !6, line: 1891, baseType: !1096, size: 64)
!1146 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_name", scope: !1143, file: !6, line: 1891, baseType: !803, size: 64)
!1147 = !DIDerivedType(tag: DW_TAG_member, name: "use", scope: !1137, file: !6, line: 1892, baseType: !1130, size: 64, offset: 192)
!1148 = !DIDerivedType(tag: DW_TAG_member, name: "op", scope: !1118, file: !446, line: 359, baseType: !1149, size: 64, offset: 384)
!1149 = !DICompositeType(tag: DW_TAG_array_type, baseType: !803, size: 64, elements: !883)
!1150 = !DIDerivedType(tag: DW_TAG_member, name: "gsmembase", scope: !1098, file: !446, line: 740, baseType: !1151, size: 512)
!1151 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_memory_ops_base", file: !446, line: 365, size: 512, elements: !1152)
!1152 = !{!1153, !1154, !1155}
!1153 = !DIDerivedType(tag: DW_TAG_member, name: "opbase", scope: !1151, file: !446, line: 368, baseType: !1121, size: 384)
!1154 = !DIDerivedType(tag: DW_TAG_member, name: "vdef", scope: !1151, file: !446, line: 373, baseType: !803, size: 64, offset: 384)
!1155 = !DIDerivedType(tag: DW_TAG_member, name: "vuse", scope: !1151, file: !446, line: 374, baseType: !803, size: 64, offset: 448)
!1156 = !DIDerivedType(tag: DW_TAG_member, name: "gsmem", scope: !1098, file: !446, line: 741, baseType: !1157, size: 576)
!1157 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_memory_ops", file: !446, line: 380, size: 576, elements: !1158)
!1158 = !{!1159, !1160}
!1159 = !DIDerivedType(tag: DW_TAG_member, name: "membase", scope: !1157, file: !446, line: 383, baseType: !1151, size: 512)
!1160 = !DIDerivedType(tag: DW_TAG_member, name: "op", scope: !1157, file: !446, line: 389, baseType: !1149, size: 64, offset: 512)
!1161 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !1098, file: !446, line: 742, baseType: !1162, size: 320)
!1162 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp", file: !446, line: 395, size: 320, elements: !1163)
!1163 = !{!1164, !1165}
!1164 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1162, file: !446, line: 397, baseType: !1101, size: 256)
!1165 = !DIDerivedType(tag: DW_TAG_member, name: "body", scope: !1162, file: !446, line: 400, baseType: !1086, size: 64, offset: 256)
!1166 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_bind", scope: !1098, file: !446, line: 743, baseType: !1167, size: 448)
!1167 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_bind", file: !446, line: 406, size: 448, elements: !1168)
!1168 = !{!1169, !1170, !1171, !1172}
!1169 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1167, file: !446, line: 408, baseType: !1101, size: 256)
!1170 = !DIDerivedType(tag: DW_TAG_member, name: "vars", scope: !1167, file: !446, line: 412, baseType: !803, size: 64, offset: 256)
!1171 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !1167, file: !446, line: 420, baseType: !803, size: 64, offset: 320)
!1172 = !DIDerivedType(tag: DW_TAG_member, name: "body", scope: !1167, file: !446, line: 423, baseType: !1086, size: 64, offset: 384)
!1173 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_catch", scope: !1098, file: !446, line: 744, baseType: !1174, size: 384)
!1174 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_catch", file: !446, line: 429, size: 384, elements: !1175)
!1175 = !{!1176, !1177, !1178}
!1176 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1174, file: !446, line: 431, baseType: !1101, size: 256)
!1177 = !DIDerivedType(tag: DW_TAG_member, name: "types", scope: !1174, file: !446, line: 434, baseType: !803, size: 64, offset: 256)
!1178 = !DIDerivedType(tag: DW_TAG_member, name: "handler", scope: !1174, file: !446, line: 437, baseType: !1086, size: 64, offset: 320)
!1179 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_eh_filter", scope: !1098, file: !446, line: 745, baseType: !1180, size: 384)
!1180 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_eh_filter", file: !446, line: 443, size: 384, elements: !1181)
!1181 = !{!1182, !1183, !1184}
!1182 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1180, file: !446, line: 445, baseType: !1101, size: 256)
!1183 = !DIDerivedType(tag: DW_TAG_member, name: "types", scope: !1180, file: !446, line: 449, baseType: !803, size: 64, offset: 256)
!1184 = !DIDerivedType(tag: DW_TAG_member, name: "failure", scope: !1180, file: !446, line: 453, baseType: !1086, size: 64, offset: 320)
!1185 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_eh_mnt", scope: !1098, file: !446, line: 746, baseType: !1186, size: 320)
!1186 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_eh_mnt", file: !446, line: 459, size: 320, elements: !1187)
!1187 = !{!1188, !1189}
!1188 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1186, file: !446, line: 461, baseType: !1101, size: 256)
!1189 = !DIDerivedType(tag: DW_TAG_member, name: "fndecl", scope: !1186, file: !446, line: 464, baseType: !803, size: 64, offset: 256)
!1190 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_phi", scope: !1098, file: !446, line: 747, baseType: !1191, size: 768)
!1191 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_phi", file: !446, line: 469, size: 768, elements: !1192)
!1192 = !{!1193, !1194, !1195, !1196, !1197}
!1193 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1191, file: !446, line: 471, baseType: !1101, size: 256)
!1194 = !DIDerivedType(tag: DW_TAG_member, name: "capacity", scope: !1191, file: !446, line: 474, baseType: !7, size: 32, offset: 256)
!1195 = !DIDerivedType(tag: DW_TAG_member, name: "nargs", scope: !1191, file: !446, line: 475, baseType: !7, size: 32, offset: 288)
!1196 = !DIDerivedType(tag: DW_TAG_member, name: "result", scope: !1191, file: !446, line: 478, baseType: !803, size: 64, offset: 320)
!1197 = !DIDerivedType(tag: DW_TAG_member, name: "args", scope: !1191, file: !446, line: 481, baseType: !1198, size: 384, offset: 384)
!1198 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1199, size: 384, elements: !883)
!1199 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "phi_arg_d", file: !6, line: 1917, size: 384, elements: !1200)
!1200 = !{!1201, !1202, !1203}
!1201 = !DIDerivedType(tag: DW_TAG_member, name: "imm_use", scope: !1199, file: !6, line: 1920, baseType: !1137, size: 256)
!1202 = !DIDerivedType(tag: DW_TAG_member, name: "def", scope: !1199, file: !6, line: 1921, baseType: !803, size: 64, offset: 256)
!1203 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !1199, file: !6, line: 1922, baseType: !910, size: 32, offset: 320)
!1204 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_eh_ctrl", scope: !1098, file: !446, line: 748, baseType: !1205, size: 320)
!1205 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_eh_ctrl", file: !446, line: 487, size: 320, elements: !1206)
!1206 = !{!1207, !1208}
!1207 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1205, file: !446, line: 490, baseType: !1101, size: 256)
!1208 = !DIDerivedType(tag: DW_TAG_member, name: "region", scope: !1205, file: !446, line: 494, baseType: !789, size: 32, offset: 256)
!1209 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_try", scope: !1098, file: !446, line: 749, baseType: !1210, size: 384)
!1210 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_try", file: !446, line: 500, size: 384, elements: !1211)
!1211 = !{!1212, !1213, !1214}
!1212 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1210, file: !446, line: 502, baseType: !1101, size: 256)
!1213 = !DIDerivedType(tag: DW_TAG_member, name: "eval", scope: !1210, file: !446, line: 506, baseType: !1086, size: 64, offset: 256)
!1214 = !DIDerivedType(tag: DW_TAG_member, name: "cleanup", scope: !1210, file: !446, line: 510, baseType: !1086, size: 64, offset: 320)
!1215 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_wce", scope: !1098, file: !446, line: 750, baseType: !1216, size: 320)
!1216 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_wce", file: !446, line: 529, size: 320, elements: !1217)
!1217 = !{!1218, !1219}
!1218 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1216, file: !446, line: 531, baseType: !1101, size: 256)
!1219 = !DIDerivedType(tag: DW_TAG_member, name: "cleanup", scope: !1216, file: !446, line: 540, baseType: !1086, size: 64, offset: 256)
!1220 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_asm", scope: !1098, file: !446, line: 751, baseType: !1221, size: 704)
!1221 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_asm", file: !446, line: 546, size: 704, elements: !1222)
!1222 = !{!1223, !1224, !1227, !1228, !1229, !1230, !1231}
!1223 = !DIDerivedType(tag: DW_TAG_member, name: "membase", scope: !1221, file: !446, line: 549, baseType: !1151, size: 512)
!1224 = !DIDerivedType(tag: DW_TAG_member, name: "string", scope: !1221, file: !446, line: 553, baseType: !1225, size: 64, offset: 512)
!1225 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1226, size: 64)
!1226 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !778)
!1227 = !DIDerivedType(tag: DW_TAG_member, name: "ni", scope: !1221, file: !446, line: 557, baseType: !902, size: 8, offset: 576)
!1228 = !DIDerivedType(tag: DW_TAG_member, name: "no", scope: !1221, file: !446, line: 558, baseType: !902, size: 8, offset: 584)
!1229 = !DIDerivedType(tag: DW_TAG_member, name: "nc", scope: !1221, file: !446, line: 559, baseType: !902, size: 8, offset: 592)
!1230 = !DIDerivedType(tag: DW_TAG_member, name: "nl", scope: !1221, file: !446, line: 560, baseType: !902, size: 8, offset: 600)
!1231 = !DIDerivedType(tag: DW_TAG_member, name: "op", scope: !1221, file: !446, line: 566, baseType: !1149, size: 64, offset: 640)
!1232 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_critical", scope: !1098, file: !446, line: 752, baseType: !1233, size: 384)
!1233 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_critical", file: !446, line: 571, size: 384, elements: !1234)
!1234 = !{!1235, !1236}
!1235 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !1233, file: !446, line: 573, baseType: !1162, size: 320)
!1236 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1233, file: !446, line: 577, baseType: !803, size: 64, offset: 320)
!1237 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_for", scope: !1098, file: !446, line: 753, baseType: !1238, size: 576)
!1238 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_for", file: !446, line: 600, size: 576, elements: !1239)
!1239 = !{!1240, !1241, !1242, !1245, !1254}
!1240 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !1238, file: !446, line: 602, baseType: !1162, size: 320)
!1241 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !1238, file: !446, line: 605, baseType: !803, size: 64, offset: 320)
!1242 = !DIDerivedType(tag: DW_TAG_member, name: "collapse", scope: !1238, file: !446, line: 609, baseType: !1243, size: 64, offset: 384)
!1243 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !1244, line: 46, baseType: !736)
!1244 = !DIFile(filename: "Rohit/IR2Vec-LoopOptimizationFramework/build_REL_AsrtON/lib/clang/10.0.1/include/stddef.h", directory: "/home/venkat/IF-DV")
!1245 = !DIDerivedType(tag: DW_TAG_member, name: "iter", scope: !1238, file: !446, line: 612, baseType: !1246, size: 64, offset: 448)
!1246 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1247, size: 64)
!1247 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_omp_for_iter", file: !446, line: 581, size: 320, elements: !1248)
!1248 = !{!1249, !1250, !1251, !1252, !1253}
!1249 = !DIDerivedType(tag: DW_TAG_member, name: "cond", scope: !1247, file: !446, line: 583, baseType: !5, size: 32)
!1250 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !1247, file: !446, line: 586, baseType: !803, size: 64, offset: 64)
!1251 = !DIDerivedType(tag: DW_TAG_member, name: "initial", scope: !1247, file: !446, line: 589, baseType: !803, size: 64, offset: 128)
!1252 = !DIDerivedType(tag: DW_TAG_member, name: "final", scope: !1247, file: !446, line: 592, baseType: !803, size: 64, offset: 192)
!1253 = !DIDerivedType(tag: DW_TAG_member, name: "incr", scope: !1247, file: !446, line: 595, baseType: !803, size: 64, offset: 256)
!1254 = !DIDerivedType(tag: DW_TAG_member, name: "pre_body", scope: !1238, file: !446, line: 616, baseType: !1086, size: 64, offset: 512)
!1255 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_parallel", scope: !1098, file: !446, line: 754, baseType: !1256, size: 512)
!1256 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_parallel", file: !446, line: 622, size: 512, elements: !1257)
!1257 = !{!1258, !1259, !1260, !1261}
!1258 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !1256, file: !446, line: 624, baseType: !1162, size: 320)
!1259 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !1256, file: !446, line: 628, baseType: !803, size: 64, offset: 320)
!1260 = !DIDerivedType(tag: DW_TAG_member, name: "child_fn", scope: !1256, file: !446, line: 632, baseType: !803, size: 64, offset: 384)
!1261 = !DIDerivedType(tag: DW_TAG_member, name: "data_arg", scope: !1256, file: !446, line: 636, baseType: !803, size: 64, offset: 448)
!1262 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_task", scope: !1098, file: !446, line: 755, baseType: !1263, size: 704)
!1263 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_task", file: !446, line: 642, size: 704, elements: !1264)
!1264 = !{!1265, !1266, !1267, !1268}
!1265 = !DIDerivedType(tag: DW_TAG_member, name: "par", scope: !1263, file: !446, line: 644, baseType: !1256, size: 512)
!1266 = !DIDerivedType(tag: DW_TAG_member, name: "copy_fn", scope: !1263, file: !446, line: 648, baseType: !803, size: 64, offset: 512)
!1267 = !DIDerivedType(tag: DW_TAG_member, name: "arg_size", scope: !1263, file: !446, line: 652, baseType: !803, size: 64, offset: 576)
!1268 = !DIDerivedType(tag: DW_TAG_member, name: "arg_align", scope: !1263, file: !446, line: 653, baseType: !803, size: 64, offset: 640)
!1269 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_sections", scope: !1098, file: !446, line: 756, baseType: !1270, size: 448)
!1270 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_sections", file: !446, line: 663, size: 448, elements: !1271)
!1271 = !{!1272, !1273, !1274}
!1272 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !1270, file: !446, line: 665, baseType: !1162, size: 320)
!1273 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !1270, file: !446, line: 668, baseType: !803, size: 64, offset: 320)
!1274 = !DIDerivedType(tag: DW_TAG_member, name: "control", scope: !1270, file: !446, line: 673, baseType: !803, size: 64, offset: 384)
!1275 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_single", scope: !1098, file: !446, line: 757, baseType: !1276, size: 384)
!1276 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_single", file: !446, line: 694, size: 384, elements: !1277)
!1277 = !{!1278, !1279}
!1278 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !1276, file: !446, line: 696, baseType: !1162, size: 320)
!1279 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !1276, file: !446, line: 699, baseType: !803, size: 64, offset: 320)
!1280 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_continue", scope: !1098, file: !446, line: 758, baseType: !1281, size: 384)
!1281 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_continue", file: !446, line: 681, size: 384, elements: !1282)
!1282 = !{!1283, !1284, !1285}
!1283 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1281, file: !446, line: 683, baseType: !1101, size: 256)
!1284 = !DIDerivedType(tag: DW_TAG_member, name: "control_def", scope: !1281, file: !446, line: 686, baseType: !803, size: 64, offset: 256)
!1285 = !DIDerivedType(tag: DW_TAG_member, name: "control_use", scope: !1281, file: !446, line: 689, baseType: !803, size: 64, offset: 320)
!1286 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_atomic_load", scope: !1098, file: !446, line: 759, baseType: !1287, size: 384)
!1287 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_atomic_load", file: !446, line: 707, size: 384, elements: !1288)
!1288 = !{!1289, !1290, !1291}
!1289 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1287, file: !446, line: 709, baseType: !1101, size: 256)
!1290 = !DIDerivedType(tag: DW_TAG_member, name: "rhs", scope: !1287, file: !446, line: 712, baseType: !803, size: 64, offset: 256)
!1291 = !DIDerivedType(tag: DW_TAG_member, name: "lhs", scope: !1287, file: !446, line: 712, baseType: !803, size: 64, offset: 320)
!1292 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_atomic_store", scope: !1098, file: !446, line: 760, baseType: !1293, size: 320)
!1293 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_atomic_store", file: !446, line: 718, size: 320, elements: !1294)
!1294 = !{!1295, !1296}
!1295 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1293, file: !446, line: 720, baseType: !1101, size: 256)
!1296 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1293, file: !446, line: 723, baseType: !803, size: 64, offset: 256)
!1297 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1093, file: !446, line: 138, baseType: !1092, size: 64, offset: 64)
!1298 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1093, file: !446, line: 139, baseType: !1092, size: 64, offset: 128)
!1299 = !DIDerivedType(tag: DW_TAG_member, name: "last", scope: !1088, file: !446, line: 146, baseType: !1091, size: 64, offset: 64)
!1300 = !DIDerivedType(tag: DW_TAG_member, name: "next_free", scope: !1088, file: !446, line: 152, baseType: !1086, size: 64, offset: 128)
!1301 = !DIDerivedType(tag: DW_TAG_member, name: "r", scope: !1083, file: !202, line: 130, baseType: !960, size: 64)
!1302 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !1078, file: !202, line: 134, baseType: !794, size: 64, offset: 192)
!1303 = !DIDerivedType(tag: DW_TAG_member, name: "goto_block", scope: !1078, file: !202, line: 137, baseType: !803, size: 64, offset: 256)
!1304 = !DIDerivedType(tag: DW_TAG_member, name: "goto_locus", scope: !1078, file: !202, line: 138, baseType: !910, size: 32, offset: 320)
!1305 = !DIDerivedType(tag: DW_TAG_member, name: "dest_idx", scope: !1078, file: !202, line: 142, baseType: !7, size: 32, offset: 352)
!1306 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1078, file: !202, line: 144, baseType: !789, size: 32, offset: 384)
!1307 = !DIDerivedType(tag: DW_TAG_member, name: "probability", scope: !1078, file: !202, line: 145, baseType: !789, size: 32, offset: 416)
!1308 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !1078, file: !202, line: 146, baseType: !1309, size: 64, offset: 448)
!1309 = !DIDerivedType(tag: DW_TAG_typedef, name: "gcov_type", file: !202, line: 119, baseType: !771)
!1310 = !DIDerivedType(tag: DW_TAG_member, name: "succs", scope: !1061, file: !202, line: 220, baseType: !1064, size: 64, offset: 64)
!1311 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !1061, file: !202, line: 223, baseType: !794, size: 64, offset: 128)
!1312 = !DIDerivedType(tag: DW_TAG_member, name: "loop_father", scope: !1061, file: !202, line: 226, baseType: !1313, size: 64, offset: 192)
!1313 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1314, size: 64)
!1314 = !DICompositeType(tag: DW_TAG_structure_type, name: "loop", file: !202, line: 185, flags: DIFlagFwdDecl)
!1315 = !DIDerivedType(tag: DW_TAG_member, name: "dom", scope: !1061, file: !202, line: 229, baseType: !1316, size: 128, offset: 256)
!1316 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1317, size: 128, elements: !755)
!1317 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1318, size: 64)
!1318 = !DICompositeType(tag: DW_TAG_structure_type, name: "et_node", file: !202, line: 229, flags: DIFlagFwdDecl)
!1319 = !DIDerivedType(tag: DW_TAG_member, name: "prev_bb", scope: !1061, file: !202, line: 232, baseType: !1060, size: 64, offset: 384)
!1320 = !DIDerivedType(tag: DW_TAG_member, name: "next_bb", scope: !1061, file: !202, line: 233, baseType: !1060, size: 64, offset: 448)
!1321 = !DIDerivedType(tag: DW_TAG_member, name: "il", scope: !1061, file: !202, line: 238, baseType: !1322, size: 64, offset: 512)
!1322 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "basic_block_il_dependent", file: !202, line: 235, size: 64, elements: !1323)
!1323 = !{!1324, !1330}
!1324 = !DIDerivedType(tag: DW_TAG_member, name: "gimple", scope: !1322, file: !202, line: 236, baseType: !1325, size: 64)
!1325 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1326, size: 64)
!1326 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_bb_info", file: !202, line: 273, size: 128, elements: !1327)
!1327 = !{!1328, !1329}
!1328 = !DIDerivedType(tag: DW_TAG_member, name: "seq", scope: !1326, file: !202, line: 275, baseType: !1086, size: 64)
!1329 = !DIDerivedType(tag: DW_TAG_member, name: "phi_nodes", scope: !1326, file: !202, line: 278, baseType: !1086, size: 64, offset: 64)
!1330 = !DIDerivedType(tag: DW_TAG_member, name: "rtl", scope: !1322, file: !202, line: 237, baseType: !1331, size: 64)
!1331 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1332, size: 64)
!1332 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtl_bb_info", file: !202, line: 259, size: 320, elements: !1333)
!1333 = !{!1334, !1335, !1336, !1337, !1338}
!1334 = !DIDerivedType(tag: DW_TAG_member, name: "head_", scope: !1332, file: !202, line: 261, baseType: !960, size: 64)
!1335 = !DIDerivedType(tag: DW_TAG_member, name: "end_", scope: !1332, file: !202, line: 262, baseType: !960, size: 64, offset: 64)
!1336 = !DIDerivedType(tag: DW_TAG_member, name: "header", scope: !1332, file: !202, line: 266, baseType: !960, size: 64, offset: 128)
!1337 = !DIDerivedType(tag: DW_TAG_member, name: "footer", scope: !1332, file: !202, line: 267, baseType: !960, size: 64, offset: 192)
!1338 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !1332, file: !202, line: 270, baseType: !789, size: 32, offset: 256)
!1339 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !1061, file: !202, line: 241, baseType: !1309, size: 64, offset: 576)
!1340 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !1061, file: !202, line: 244, baseType: !789, size: 32, offset: 640)
!1341 = !DIDerivedType(tag: DW_TAG_member, name: "loop_depth", scope: !1061, file: !202, line: 247, baseType: !789, size: 32, offset: 672)
!1342 = !DIDerivedType(tag: DW_TAG_member, name: "frequency", scope: !1061, file: !202, line: 250, baseType: !789, size: 32, offset: 704)
!1343 = !DIDerivedType(tag: DW_TAG_member, name: "discriminator", scope: !1061, file: !202, line: 253, baseType: !789, size: 32, offset: 736)
!1344 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1061, file: !202, line: 256, baseType: !789, size: 32, offset: 768)
!1345 = !DIDerivedType(tag: DW_TAG_member, name: "x_exit_block_ptr", scope: !1056, file: !202, line: 378, baseType: !1059, size: 64, offset: 64)
!1346 = !DIDerivedType(tag: DW_TAG_member, name: "x_basic_block_info", scope: !1056, file: !202, line: 381, baseType: !1347, size: 64, offset: 128)
!1347 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1348, size: 64)
!1348 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_basic_block_gc", file: !202, line: 282, baseType: !1349)
!1349 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_basic_block_gc", file: !202, line: 282, size: 128, elements: !1350)
!1350 = !{!1351}
!1351 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1349, file: !202, line: 282, baseType: !1352, size: 128)
!1352 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_basic_block_base", file: !202, line: 281, baseType: !1353)
!1353 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_basic_block_base", file: !202, line: 281, size: 128, elements: !1354)
!1354 = !{!1355, !1356, !1357}
!1355 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1353, file: !202, line: 281, baseType: !7, size: 32)
!1356 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1353, file: !202, line: 281, baseType: !7, size: 32, offset: 32)
!1357 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1353, file: !202, line: 281, baseType: !1358, size: 64, offset: 64)
!1358 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1059, size: 64, elements: !883)
!1359 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_basic_blocks", scope: !1056, file: !202, line: 384, baseType: !789, size: 32, offset: 192)
!1360 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_edges", scope: !1056, file: !202, line: 387, baseType: !789, size: 32, offset: 224)
!1361 = !DIDerivedType(tag: DW_TAG_member, name: "x_last_basic_block", scope: !1056, file: !202, line: 390, baseType: !789, size: 32, offset: 256)
!1362 = !DIDerivedType(tag: DW_TAG_member, name: "x_label_to_block_map", scope: !1056, file: !202, line: 394, baseType: !1347, size: 64, offset: 320)
!1363 = !DIDerivedType(tag: DW_TAG_member, name: "x_profile_status", scope: !1056, file: !202, line: 396, baseType: !201, size: 32, offset: 384)
!1364 = !DIDerivedType(tag: DW_TAG_member, name: "x_dom_computed", scope: !1056, file: !202, line: 399, baseType: !1365, size: 64, offset: 416)
!1365 = !DICompositeType(tag: DW_TAG_array_type, baseType: !207, size: 64, elements: !755)
!1366 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_bbs_in_dom_tree", scope: !1056, file: !202, line: 402, baseType: !1367, size: 64, offset: 480)
!1367 = !DICompositeType(tag: DW_TAG_array_type, baseType: !7, size: 64, elements: !755)
!1368 = !DIDerivedType(tag: DW_TAG_member, name: "max_jumptable_ents", scope: !1056, file: !202, line: 406, baseType: !789, size: 32, offset: 544)
!1369 = !DIDerivedType(tag: DW_TAG_member, name: "last_label_uid", scope: !1056, file: !202, line: 409, baseType: !789, size: 32, offset: 576)
!1370 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_body", scope: !1048, file: !1049, line: 470, baseType: !1087, size: 64, offset: 128)
!1371 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_df", scope: !1048, file: !1049, line: 473, baseType: !1372, size: 64, offset: 192)
!1372 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1373, size: 64)
!1373 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_df", file: !999, line: 39, size: 1152, elements: !1374)
!1374 = !{!1375, !1425, !1438, !1450, !1451, !1462, !1463, !1467, !1468, !1469, !1470, !1471}
!1375 = !DIDerivedType(tag: DW_TAG_member, name: "referenced_vars", scope: !1373, file: !999, line: 41, baseType: !1376, size: 64)
!1376 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_t", file: !1377, line: 144, baseType: !1378)
!1377 = !DIFile(filename: "./include/hashtab.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1378 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1379, size: 64)
!1379 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "htab", file: !1377, line: 100, size: 896, elements: !1380)
!1380 = !{!1381, !1389, !1394, !1399, !1401, !1402, !1403, !1404, !1405, !1406, !1411, !1413, !1414, !1419, !1424}
!1381 = !DIDerivedType(tag: DW_TAG_member, name: "hash_f", scope: !1379, file: !1377, line: 102, baseType: !1382, size: 64)
!1382 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_hash", file: !1377, line: 52, baseType: !1383)
!1383 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1384, size: 64)
!1384 = !DISubroutineType(types: !1385)
!1385 = !{!1386, !1387}
!1386 = !DIDerivedType(tag: DW_TAG_typedef, name: "hashval_t", file: !1377, line: 47, baseType: !7)
!1387 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1388, size: 64)
!1388 = !DIDerivedType(tag: DW_TAG_const_type, baseType: null)
!1389 = !DIDerivedType(tag: DW_TAG_member, name: "eq_f", scope: !1379, file: !1377, line: 105, baseType: !1390, size: 64, offset: 64)
!1390 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_eq", file: !1377, line: 59, baseType: !1391)
!1391 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1392, size: 64)
!1392 = !DISubroutineType(types: !1393)
!1393 = !{!789, !1387, !1387}
!1394 = !DIDerivedType(tag: DW_TAG_member, name: "del_f", scope: !1379, file: !1377, line: 108, baseType: !1395, size: 64, offset: 128)
!1395 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_del", file: !1377, line: 63, baseType: !1396)
!1396 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1397, size: 64)
!1397 = !DISubroutineType(types: !1398)
!1398 = !{null, !794}
!1399 = !DIDerivedType(tag: DW_TAG_member, name: "entries", scope: !1379, file: !1377, line: 111, baseType: !1400, size: 64, offset: 192)
!1400 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !794, size: 64)
!1401 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1379, file: !1377, line: 114, baseType: !1243, size: 64, offset: 256)
!1402 = !DIDerivedType(tag: DW_TAG_member, name: "n_elements", scope: !1379, file: !1377, line: 117, baseType: !1243, size: 64, offset: 320)
!1403 = !DIDerivedType(tag: DW_TAG_member, name: "n_deleted", scope: !1379, file: !1377, line: 120, baseType: !1243, size: 64, offset: 384)
!1404 = !DIDerivedType(tag: DW_TAG_member, name: "searches", scope: !1379, file: !1377, line: 124, baseType: !7, size: 32, offset: 448)
!1405 = !DIDerivedType(tag: DW_TAG_member, name: "collisions", scope: !1379, file: !1377, line: 128, baseType: !7, size: 32, offset: 480)
!1406 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_f", scope: !1379, file: !1377, line: 131, baseType: !1407, size: 64, offset: 512)
!1407 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_alloc", file: !1377, line: 75, baseType: !1408)
!1408 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1409, size: 64)
!1409 = !DISubroutineType(types: !1410)
!1410 = !{!794, !1243, !1243}
!1411 = !DIDerivedType(tag: DW_TAG_member, name: "free_f", scope: !1379, file: !1377, line: 132, baseType: !1412, size: 64, offset: 576)
!1412 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_free", file: !1377, line: 78, baseType: !1396)
!1413 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_arg", scope: !1379, file: !1377, line: 135, baseType: !794, size: 64, offset: 640)
!1414 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_with_arg_f", scope: !1379, file: !1377, line: 136, baseType: !1415, size: 64, offset: 704)
!1415 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_alloc_with_arg", file: !1377, line: 82, baseType: !1416)
!1416 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1417, size: 64)
!1417 = !DISubroutineType(types: !1418)
!1418 = !{!794, !794, !1243, !1243}
!1419 = !DIDerivedType(tag: DW_TAG_member, name: "free_with_arg_f", scope: !1379, file: !1377, line: 137, baseType: !1420, size: 64, offset: 768)
!1420 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_free_with_arg", file: !1377, line: 83, baseType: !1421)
!1421 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1422, size: 64)
!1422 = !DISubroutineType(types: !1423)
!1423 = !{null, !794, !794}
!1424 = !DIDerivedType(tag: DW_TAG_member, name: "size_prime_index", scope: !1379, file: !1377, line: 141, baseType: !7, size: 32, offset: 832)
!1425 = !DIDerivedType(tag: DW_TAG_member, name: "modified_noreturn_calls", scope: !1373, file: !999, line: 48, baseType: !1426, size: 64, offset: 64)
!1426 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1427, size: 64)
!1427 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_gimple_gc", file: !446, line: 35, baseType: !1428)
!1428 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_gimple_gc", file: !446, line: 35, size: 128, elements: !1429)
!1429 = !{!1430}
!1430 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1428, file: !446, line: 35, baseType: !1431, size: 128)
!1431 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_gimple_base", file: !446, line: 33, baseType: !1432)
!1432 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_gimple_base", file: !446, line: 33, size: 128, elements: !1433)
!1433 = !{!1434, !1435, !1436}
!1434 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1432, file: !446, line: 33, baseType: !7, size: 32)
!1435 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1432, file: !446, line: 33, baseType: !7, size: 32, offset: 32)
!1436 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1432, file: !446, line: 33, baseType: !1437, size: 64, offset: 64)
!1437 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1096, size: 64, elements: !883)
!1438 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_names", scope: !1373, file: !999, line: 51, baseType: !1439, size: 64, offset: 128)
!1439 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1440, size: 64)
!1440 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_gc", file: !6, line: 183, baseType: !1441)
!1441 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_gc", file: !6, line: 183, size: 128, elements: !1442)
!1442 = !{!1443}
!1443 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1441, file: !6, line: 183, baseType: !1444, size: 128)
!1444 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_base", file: !6, line: 182, baseType: !1445)
!1445 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_base", file: !6, line: 182, size: 128, elements: !1446)
!1446 = !{!1447, !1448, !1449}
!1447 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1445, file: !6, line: 182, baseType: !7, size: 32)
!1448 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1445, file: !6, line: 182, baseType: !7, size: 32, offset: 32)
!1449 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1445, file: !6, line: 182, baseType: !1149, size: 64, offset: 64)
!1450 = !DIDerivedType(tag: DW_TAG_member, name: "vop", scope: !1373, file: !999, line: 54, baseType: !803, size: 64, offset: 192)
!1451 = !DIDerivedType(tag: DW_TAG_member, name: "escaped", scope: !1373, file: !999, line: 57, baseType: !1452, size: 128, offset: 256)
!1452 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "pt_solution", file: !1453, line: 31, size: 128, elements: !1454)
!1453 = !DIFile(filename: "./tree-ssa-alias.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1454 = !{!1455, !1456, !1457, !1458, !1459, !1460, !1461}
!1455 = !DIDerivedType(tag: DW_TAG_member, name: "anything", scope: !1452, file: !1453, line: 35, baseType: !7, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1456 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal", scope: !1452, file: !1453, line: 39, baseType: !7, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1457 = !DIDerivedType(tag: DW_TAG_member, name: "escaped", scope: !1452, file: !1453, line: 42, baseType: !7, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1458 = !DIDerivedType(tag: DW_TAG_member, name: "null", scope: !1452, file: !1453, line: 46, baseType: !7, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1459 = !DIDerivedType(tag: DW_TAG_member, name: "vars_contains_global", scope: !1452, file: !1453, line: 50, baseType: !7, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1460 = !DIDerivedType(tag: DW_TAG_member, name: "vars_contains_restrict", scope: !1452, file: !1453, line: 53, baseType: !7, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1461 = !DIDerivedType(tag: DW_TAG_member, name: "vars", scope: !1452, file: !1453, line: 56, baseType: !737, size: 64, offset: 64)
!1462 = !DIDerivedType(tag: DW_TAG_member, name: "callused", scope: !1373, file: !999, line: 60, baseType: !1452, size: 128, offset: 384)
!1463 = !DIDerivedType(tag: DW_TAG_member, name: "decls_to_pointers", scope: !1373, file: !999, line: 64, baseType: !1464, size: 64, offset: 512)
!1464 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1465, size: 64)
!1465 = !DICompositeType(tag: DW_TAG_structure_type, name: "pointer_map_t", file: !1466, line: 33, flags: DIFlagFwdDecl)
!1466 = !DIFile(filename: "./pointer-set.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1467 = !DIDerivedType(tag: DW_TAG_member, name: "free_ssanames", scope: !1373, file: !999, line: 67, baseType: !803, size: 64, offset: 576)
!1468 = !DIDerivedType(tag: DW_TAG_member, name: "default_defs", scope: !1373, file: !999, line: 73, baseType: !1376, size: 64, offset: 640)
!1469 = !DIDerivedType(tag: DW_TAG_member, name: "syms_to_rename", scope: !1373, file: !999, line: 77, baseType: !737, size: 64, offset: 704)
!1470 = !DIDerivedType(tag: DW_TAG_member, name: "in_ssa_p", scope: !1373, file: !999, line: 80, baseType: !7, size: 1, offset: 768, flags: DIFlagBitField, extraData: i64 768)
!1471 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_operands", scope: !1373, file: !999, line: 82, baseType: !1472, size: 320, offset: 832)
!1472 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_operands", file: !485, line: 62, size: 320, elements: !1473)
!1473 = !{!1474, !1480, !1481, !1482, !1483, !1484}
!1474 = !DIDerivedType(tag: DW_TAG_member, name: "operand_memory", scope: !1472, file: !485, line: 63, baseType: !1475, size: 64)
!1475 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1476, size: 64)
!1476 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_operand_memory_d", file: !485, line: 56, size: 128, elements: !1477)
!1477 = !{!1478, !1479}
!1478 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1476, file: !485, line: 57, baseType: !1475, size: 64)
!1479 = !DIDerivedType(tag: DW_TAG_member, name: "mem", scope: !1476, file: !485, line: 58, baseType: !882, size: 8, offset: 64)
!1480 = !DIDerivedType(tag: DW_TAG_member, name: "operand_memory_index", scope: !1472, file: !485, line: 64, baseType: !7, size: 32, offset: 64)
!1481 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_operand_mem_size", scope: !1472, file: !485, line: 66, baseType: !7, size: 32, offset: 96)
!1482 = !DIDerivedType(tag: DW_TAG_member, name: "ops_active", scope: !1472, file: !485, line: 68, baseType: !902, size: 8, offset: 128)
!1483 = !DIDerivedType(tag: DW_TAG_member, name: "free_defs", scope: !1472, file: !485, line: 70, baseType: !1125, size: 64, offset: 192)
!1484 = !DIDerivedType(tag: DW_TAG_member, name: "free_uses", scope: !1472, file: !485, line: 71, baseType: !1132, size: 64, offset: 256)
!1485 = !DIDerivedType(tag: DW_TAG_member, name: "x_current_loops", scope: !1048, file: !1049, line: 476, baseType: !1486, size: 64, offset: 256)
!1486 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1487, size: 64)
!1487 = !DICompositeType(tag: DW_TAG_structure_type, name: "loops", file: !1049, line: 476, flags: DIFlagFwdDecl)
!1488 = !DIDerivedType(tag: DW_TAG_member, name: "value_histograms", scope: !1048, file: !1049, line: 479, baseType: !1376, size: 64, offset: 320)
!1489 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !1048, file: !1049, line: 484, baseType: !803, size: 64, offset: 384)
!1490 = !DIDerivedType(tag: DW_TAG_member, name: "static_chain_decl", scope: !1048, file: !1049, line: 488, baseType: !803, size: 64, offset: 448)
!1491 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal_goto_save_area", scope: !1048, file: !1049, line: 493, baseType: !803, size: 64, offset: 512)
!1492 = !DIDerivedType(tag: DW_TAG_member, name: "local_decls", scope: !1048, file: !1049, line: 496, baseType: !803, size: 64, offset: 576)
!1493 = !DIDerivedType(tag: DW_TAG_member, name: "machine", scope: !1048, file: !1049, line: 501, baseType: !1494, size: 64, offset: 640)
!1494 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1495, size: 64)
!1495 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "machine_function", file: !213, line: 2355, size: 576, elements: !1496)
!1496 = !{!1497, !1500, !1501, !1502, !1503, !1505, !1506, !1511, !1512, !1513, !1514, !1515, !1516}
!1497 = !DIDerivedType(tag: DW_TAG_member, name: "stack_locals", scope: !1495, file: !213, line: 2356, baseType: !1498, size: 64)
!1498 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1499, size: 64)
!1499 = !DICompositeType(tag: DW_TAG_structure_type, name: "stack_local_entry", file: !213, line: 2356, flags: DIFlagFwdDecl)
!1500 = !DIDerivedType(tag: DW_TAG_member, name: "some_ld_name", scope: !1495, file: !213, line: 2357, baseType: !1225, size: 64, offset: 64)
!1501 = !DIDerivedType(tag: DW_TAG_member, name: "varargs_gpr_size", scope: !1495, file: !213, line: 2358, baseType: !789, size: 32, offset: 128)
!1502 = !DIDerivedType(tag: DW_TAG_member, name: "varargs_fpr_size", scope: !1495, file: !213, line: 2359, baseType: !789, size: 32, offset: 160)
!1503 = !DIDerivedType(tag: DW_TAG_member, name: "optimize_mode_switching", scope: !1495, file: !213, line: 2360, baseType: !1504, size: 128, offset: 192)
!1504 = !DICompositeType(tag: DW_TAG_array_type, baseType: !789, size: 128, elements: !782)
!1505 = !DIDerivedType(tag: DW_TAG_member, name: "use_fast_prologue_epilogue_nregs", scope: !1495, file: !213, line: 2364, baseType: !789, size: 32, offset: 320)
!1506 = !DIDerivedType(tag: DW_TAG_member, name: "cfa", scope: !1495, file: !213, line: 2367, baseType: !1507, size: 128, offset: 384)
!1507 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "machine_cfa_state", file: !213, line: 2349, size: 128, elements: !1508)
!1508 = !{!1509, !1510}
!1509 = !DIDerivedType(tag: DW_TAG_member, name: "reg", scope: !1507, file: !213, line: 2351, baseType: !960, size: 64)
!1510 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1507, file: !213, line: 2352, baseType: !771, size: 64, offset: 64)
!1511 = !DIDerivedType(tag: DW_TAG_member, name: "call_abi", scope: !1495, file: !213, line: 2371, baseType: !212, size: 32, offset: 512)
!1512 = !DIDerivedType(tag: DW_TAG_member, name: "accesses_prev_frame", scope: !1495, file: !213, line: 2374, baseType: !7, size: 1, offset: 544, flags: DIFlagBitField, extraData: i64 544)
!1513 = !DIDerivedType(tag: DW_TAG_member, name: "needs_cld", scope: !1495, file: !213, line: 2377, baseType: !7, size: 1, offset: 545, flags: DIFlagBitField, extraData: i64 544)
!1514 = !DIDerivedType(tag: DW_TAG_member, name: "use_fast_prologue_epilogue", scope: !1495, file: !213, line: 2381, baseType: !7, size: 1, offset: 546, flags: DIFlagBitField, extraData: i64 544)
!1515 = !DIDerivedType(tag: DW_TAG_member, name: "tls_descriptor_call_expanded_p", scope: !1495, file: !213, line: 2392, baseType: !7, size: 1, offset: 547, flags: DIFlagBitField, extraData: i64 544)
!1516 = !DIDerivedType(tag: DW_TAG_member, name: "static_chain_on_stack", scope: !1495, file: !213, line: 2396, baseType: !7, size: 1, offset: 548, flags: DIFlagBitField, extraData: i64 544)
!1517 = !DIDerivedType(tag: DW_TAG_member, name: "language", scope: !1048, file: !1049, line: 504, baseType: !1518, size: 64, offset: 704)
!1518 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1519, size: 64)
!1519 = !DICompositeType(tag: DW_TAG_structure_type, name: "language_function", file: !1049, line: 504, flags: DIFlagFwdDecl)
!1520 = !DIDerivedType(tag: DW_TAG_member, name: "used_types_hash", scope: !1048, file: !1049, line: 507, baseType: !1376, size: 64, offset: 768)
!1521 = !DIDerivedType(tag: DW_TAG_member, name: "last_stmt_uid", scope: !1048, file: !1049, line: 510, baseType: !789, size: 32, offset: 832)
!1522 = !DIDerivedType(tag: DW_TAG_member, name: "funcdef_no", scope: !1048, file: !1049, line: 513, baseType: !789, size: 32, offset: 864)
!1523 = !DIDerivedType(tag: DW_TAG_member, name: "function_start_locus", scope: !1048, file: !1049, line: 516, baseType: !910, size: 32, offset: 896)
!1524 = !DIDerivedType(tag: DW_TAG_member, name: "function_end_locus", scope: !1048, file: !1049, line: 519, baseType: !910, size: 32, offset: 928)
!1525 = !DIDerivedType(tag: DW_TAG_member, name: "curr_properties", scope: !1048, file: !1049, line: 522, baseType: !7, size: 32, offset: 960)
!1526 = !DIDerivedType(tag: DW_TAG_member, name: "last_verified", scope: !1048, file: !1049, line: 523, baseType: !7, size: 32, offset: 992)
!1527 = !DIDerivedType(tag: DW_TAG_member, name: "cannot_be_copied_reason", scope: !1048, file: !1049, line: 528, baseType: !1225, size: 64, offset: 1024)
!1528 = !DIDerivedType(tag: DW_TAG_member, name: "va_list_gpr_size", scope: !1048, file: !1049, line: 535, baseType: !7, size: 8, offset: 1088, flags: DIFlagBitField, extraData: i64 1088)
!1529 = !DIDerivedType(tag: DW_TAG_member, name: "va_list_fpr_size", scope: !1048, file: !1049, line: 539, baseType: !7, size: 8, offset: 1096, flags: DIFlagBitField, extraData: i64 1088)
!1530 = !DIDerivedType(tag: DW_TAG_member, name: "function_frequency", scope: !1048, file: !1049, line: 543, baseType: !7, size: 2, offset: 1104, flags: DIFlagBitField, extraData: i64 1088)
!1531 = !DIDerivedType(tag: DW_TAG_member, name: "calls_setjmp", scope: !1048, file: !1049, line: 546, baseType: !7, size: 1, offset: 1106, flags: DIFlagBitField, extraData: i64 1088)
!1532 = !DIDerivedType(tag: DW_TAG_member, name: "calls_alloca", scope: !1048, file: !1049, line: 550, baseType: !7, size: 1, offset: 1107, flags: DIFlagBitField, extraData: i64 1088)
!1533 = !DIDerivedType(tag: DW_TAG_member, name: "has_nonlocal_label", scope: !1048, file: !1049, line: 554, baseType: !7, size: 1, offset: 1108, flags: DIFlagBitField, extraData: i64 1088)
!1534 = !DIDerivedType(tag: DW_TAG_member, name: "cannot_be_copied_set", scope: !1048, file: !1049, line: 559, baseType: !7, size: 1, offset: 1109, flags: DIFlagBitField, extraData: i64 1088)
!1535 = !DIDerivedType(tag: DW_TAG_member, name: "stdarg", scope: !1048, file: !1049, line: 562, baseType: !7, size: 1, offset: 1110, flags: DIFlagBitField, extraData: i64 1088)
!1536 = !DIDerivedType(tag: DW_TAG_member, name: "dont_save_pending_sizes_p", scope: !1048, file: !1049, line: 571, baseType: !7, size: 1, offset: 1111, flags: DIFlagBitField, extraData: i64 1088)
!1537 = !DIDerivedType(tag: DW_TAG_member, name: "after_inlining", scope: !1048, file: !1049, line: 573, baseType: !7, size: 1, offset: 1112, flags: DIFlagBitField, extraData: i64 1088)
!1538 = !DIDerivedType(tag: DW_TAG_member, name: "always_inline_functions_inlined", scope: !1048, file: !1049, line: 574, baseType: !7, size: 1, offset: 1113, flags: DIFlagBitField, extraData: i64 1088)
!1539 = !DIDerivedType(tag: DW_TAG_member, name: "returns_struct", scope: !1048, file: !1049, line: 581, baseType: !7, size: 1, offset: 1114, flags: DIFlagBitField, extraData: i64 1088)
!1540 = !DIDerivedType(tag: DW_TAG_member, name: "returns_pcc_struct", scope: !1048, file: !1049, line: 585, baseType: !7, size: 1, offset: 1115, flags: DIFlagBitField, extraData: i64 1088)
!1541 = !DIDerivedType(tag: DW_TAG_member, name: "after_tree_profile", scope: !1048, file: !1049, line: 588, baseType: !7, size: 1, offset: 1116, flags: DIFlagBitField, extraData: i64 1088)
!1542 = !DIDerivedType(tag: DW_TAG_member, name: "has_local_explicit_reg_vars", scope: !1048, file: !1049, line: 592, baseType: !7, size: 1, offset: 1117, flags: DIFlagBitField, extraData: i64 1088)
!1543 = !DIDerivedType(tag: DW_TAG_member, name: "is_thunk", scope: !1048, file: !1049, line: 598, baseType: !7, size: 1, offset: 1118, flags: DIFlagBitField, extraData: i64 1088)
!1544 = !DIDerivedType(tag: DW_TAG_member, name: "personality", scope: !1043, file: !6, line: 3254, baseType: !803, size: 64, offset: 1536)
!1545 = !DIDerivedType(tag: DW_TAG_member, name: "function_specific_target", scope: !1043, file: !6, line: 3257, baseType: !803, size: 64, offset: 1600)
!1546 = !DIDerivedType(tag: DW_TAG_member, name: "function_specific_optimization", scope: !1043, file: !6, line: 3258, baseType: !803, size: 64, offset: 1664)
!1547 = !DIDerivedType(tag: DW_TAG_member, name: "function_code", scope: !1043, file: !6, line: 3264, baseType: !7, size: 11, offset: 1728, flags: DIFlagBitField, extraData: i64 1728)
!1548 = !DIDerivedType(tag: DW_TAG_member, name: "built_in_class", scope: !1043, file: !6, line: 3265, baseType: !7, size: 2, offset: 1739, flags: DIFlagBitField, extraData: i64 1728)
!1549 = !DIDerivedType(tag: DW_TAG_member, name: "static_ctor_flag", scope: !1043, file: !6, line: 3267, baseType: !7, size: 1, offset: 1741, flags: DIFlagBitField, extraData: i64 1728)
!1550 = !DIDerivedType(tag: DW_TAG_member, name: "static_dtor_flag", scope: !1043, file: !6, line: 3268, baseType: !7, size: 1, offset: 1742, flags: DIFlagBitField, extraData: i64 1728)
!1551 = !DIDerivedType(tag: DW_TAG_member, name: "uninlinable", scope: !1043, file: !6, line: 3269, baseType: !7, size: 1, offset: 1743, flags: DIFlagBitField, extraData: i64 1728)
!1552 = !DIDerivedType(tag: DW_TAG_member, name: "possibly_inlined", scope: !1043, file: !6, line: 3271, baseType: !7, size: 1, offset: 1744, flags: DIFlagBitField, extraData: i64 1728)
!1553 = !DIDerivedType(tag: DW_TAG_member, name: "novops_flag", scope: !1043, file: !6, line: 3272, baseType: !7, size: 1, offset: 1745, flags: DIFlagBitField, extraData: i64 1728)
!1554 = !DIDerivedType(tag: DW_TAG_member, name: "returns_twice_flag", scope: !1043, file: !6, line: 3273, baseType: !7, size: 1, offset: 1746, flags: DIFlagBitField, extraData: i64 1728)
!1555 = !DIDerivedType(tag: DW_TAG_member, name: "malloc_flag", scope: !1043, file: !6, line: 3274, baseType: !7, size: 1, offset: 1747, flags: DIFlagBitField, extraData: i64 1728)
!1556 = !DIDerivedType(tag: DW_TAG_member, name: "operator_new_flag", scope: !1043, file: !6, line: 3275, baseType: !7, size: 1, offset: 1748, flags: DIFlagBitField, extraData: i64 1728)
!1557 = !DIDerivedType(tag: DW_TAG_member, name: "declared_inline_flag", scope: !1043, file: !6, line: 3276, baseType: !7, size: 1, offset: 1749, flags: DIFlagBitField, extraData: i64 1728)
!1558 = !DIDerivedType(tag: DW_TAG_member, name: "regdecl_flag", scope: !1043, file: !6, line: 3277, baseType: !7, size: 1, offset: 1750, flags: DIFlagBitField, extraData: i64 1728)
!1559 = !DIDerivedType(tag: DW_TAG_member, name: "no_inline_warning_flag", scope: !1043, file: !6, line: 3279, baseType: !7, size: 1, offset: 1751, flags: DIFlagBitField, extraData: i64 1728)
!1560 = !DIDerivedType(tag: DW_TAG_member, name: "no_instrument_function_entry_exit", scope: !1043, file: !6, line: 3280, baseType: !7, size: 1, offset: 1752, flags: DIFlagBitField, extraData: i64 1728)
!1561 = !DIDerivedType(tag: DW_TAG_member, name: "no_limit_stack", scope: !1043, file: !6, line: 3281, baseType: !7, size: 1, offset: 1753, flags: DIFlagBitField, extraData: i64 1728)
!1562 = !DIDerivedType(tag: DW_TAG_member, name: "disregard_inline_limits", scope: !1043, file: !6, line: 3282, baseType: !7, size: 1, offset: 1754, flags: DIFlagBitField, extraData: i64 1728)
!1563 = !DIDerivedType(tag: DW_TAG_member, name: "pure_flag", scope: !1043, file: !6, line: 3283, baseType: !7, size: 1, offset: 1755, flags: DIFlagBitField, extraData: i64 1728)
!1564 = !DIDerivedType(tag: DW_TAG_member, name: "looping_const_or_pure_flag", scope: !1043, file: !6, line: 3284, baseType: !7, size: 1, offset: 1756, flags: DIFlagBitField, extraData: i64 1728)
!1565 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !805, file: !6, line: 3394, baseType: !1566, size: 1344)
!1566 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_type", file: !6, line: 2279, size: 1344, elements: !1567)
!1567 = !{!1568, !1569, !1570, !1571, !1572, !1573, !1574, !1575, !1576, !1577, !1578, !1579, !1580, !1581, !1582, !1583, !1584, !1585, !1586, !1587, !1588, !1589, !1590, !1593, !1594, !1595, !1603, !1604, !1605, !1606, !1607, !1608, !1609, !1610, !1611}
!1568 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1566, file: !6, line: 2280, baseType: !841, size: 192)
!1569 = !DIDerivedType(tag: DW_TAG_member, name: "values", scope: !1566, file: !6, line: 2281, baseType: !803, size: 64, offset: 192)
!1570 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1566, file: !6, line: 2282, baseType: !803, size: 64, offset: 256)
!1571 = !DIDerivedType(tag: DW_TAG_member, name: "size_unit", scope: !1566, file: !6, line: 2283, baseType: !803, size: 64, offset: 320)
!1572 = !DIDerivedType(tag: DW_TAG_member, name: "attributes", scope: !1566, file: !6, line: 2284, baseType: !803, size: 64, offset: 384)
!1573 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !1566, file: !6, line: 2285, baseType: !7, size: 32, offset: 448)
!1574 = !DIDerivedType(tag: DW_TAG_member, name: "precision", scope: !1566, file: !6, line: 2287, baseType: !7, size: 10, offset: 480, flags: DIFlagBitField, extraData: i64 480)
!1575 = !DIDerivedType(tag: DW_TAG_member, name: "no_force_blk_flag", scope: !1566, file: !6, line: 2288, baseType: !7, size: 1, offset: 490, flags: DIFlagBitField, extraData: i64 480)
!1576 = !DIDerivedType(tag: DW_TAG_member, name: "needs_constructing_flag", scope: !1566, file: !6, line: 2289, baseType: !7, size: 1, offset: 491, flags: DIFlagBitField, extraData: i64 480)
!1577 = !DIDerivedType(tag: DW_TAG_member, name: "transparent_aggr_flag", scope: !1566, file: !6, line: 2290, baseType: !7, size: 1, offset: 492, flags: DIFlagBitField, extraData: i64 480)
!1578 = !DIDerivedType(tag: DW_TAG_member, name: "restrict_flag", scope: !1566, file: !6, line: 2291, baseType: !7, size: 1, offset: 493, flags: DIFlagBitField, extraData: i64 480)
!1579 = !DIDerivedType(tag: DW_TAG_member, name: "contains_placeholder_bits", scope: !1566, file: !6, line: 2292, baseType: !7, size: 2, offset: 494, flags: DIFlagBitField, extraData: i64 480)
!1580 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !1566, file: !6, line: 2294, baseType: !7, size: 8, offset: 496, flags: DIFlagBitField, extraData: i64 480)
!1581 = !DIDerivedType(tag: DW_TAG_member, name: "string_flag", scope: !1566, file: !6, line: 2296, baseType: !7, size: 1, offset: 504, flags: DIFlagBitField, extraData: i64 480)
!1582 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !1566, file: !6, line: 2297, baseType: !7, size: 1, offset: 505, flags: DIFlagBitField, extraData: i64 480)
!1583 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !1566, file: !6, line: 2298, baseType: !7, size: 1, offset: 506, flags: DIFlagBitField, extraData: i64 480)
!1584 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !1566, file: !6, line: 2299, baseType: !7, size: 1, offset: 507, flags: DIFlagBitField, extraData: i64 480)
!1585 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !1566, file: !6, line: 2300, baseType: !7, size: 1, offset: 508, flags: DIFlagBitField, extraData: i64 480)
!1586 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !1566, file: !6, line: 2301, baseType: !7, size: 1, offset: 509, flags: DIFlagBitField, extraData: i64 480)
!1587 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !1566, file: !6, line: 2302, baseType: !7, size: 1, offset: 510, flags: DIFlagBitField, extraData: i64 480)
!1588 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !1566, file: !6, line: 2303, baseType: !7, size: 1, offset: 511, flags: DIFlagBitField, extraData: i64 480)
!1589 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !1566, file: !6, line: 2305, baseType: !7, size: 32, offset: 512)
!1590 = !DIDerivedType(tag: DW_TAG_member, name: "alias_set", scope: !1566, file: !6, line: 2306, baseType: !1591, size: 32, offset: 544)
!1591 = !DIDerivedType(tag: DW_TAG_typedef, name: "alias_set_type", file: !1592, line: 31, baseType: !789)
!1592 = !DIFile(filename: "./alias.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1593 = !DIDerivedType(tag: DW_TAG_member, name: "pointer_to", scope: !1566, file: !6, line: 2307, baseType: !803, size: 64, offset: 576)
!1594 = !DIDerivedType(tag: DW_TAG_member, name: "reference_to", scope: !1566, file: !6, line: 2308, baseType: !803, size: 64, offset: 640)
!1595 = !DIDerivedType(tag: DW_TAG_member, name: "symtab", scope: !1566, file: !6, line: 2314, baseType: !1596, size: 64, offset: 704)
!1596 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "tree_type_symtab", file: !6, line: 2309, size: 64, elements: !1597)
!1597 = !{!1598, !1599, !1600}
!1598 = !DIDerivedType(tag: DW_TAG_member, name: "address", scope: !1596, file: !6, line: 2310, baseType: !789, size: 32)
!1599 = !DIDerivedType(tag: DW_TAG_member, name: "pointer", scope: !1596, file: !6, line: 2311, baseType: !1225, size: 64)
!1600 = !DIDerivedType(tag: DW_TAG_member, name: "die", scope: !1596, file: !6, line: 2312, baseType: !1601, size: 64)
!1601 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1602, size: 64)
!1602 = !DICompositeType(tag: DW_TAG_structure_type, name: "die_struct", file: !6, line: 2277, flags: DIFlagFwdDecl)
!1603 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1566, file: !6, line: 2315, baseType: !803, size: 64, offset: 768)
!1604 = !DIDerivedType(tag: DW_TAG_member, name: "minval", scope: !1566, file: !6, line: 2316, baseType: !803, size: 64, offset: 832)
!1605 = !DIDerivedType(tag: DW_TAG_member, name: "maxval", scope: !1566, file: !6, line: 2317, baseType: !803, size: 64, offset: 896)
!1606 = !DIDerivedType(tag: DW_TAG_member, name: "next_variant", scope: !1566, file: !6, line: 2318, baseType: !803, size: 64, offset: 960)
!1607 = !DIDerivedType(tag: DW_TAG_member, name: "main_variant", scope: !1566, file: !6, line: 2319, baseType: !803, size: 64, offset: 1024)
!1608 = !DIDerivedType(tag: DW_TAG_member, name: "binfo", scope: !1566, file: !6, line: 2320, baseType: !803, size: 64, offset: 1088)
!1609 = !DIDerivedType(tag: DW_TAG_member, name: "context", scope: !1566, file: !6, line: 2321, baseType: !803, size: 64, offset: 1152)
!1610 = !DIDerivedType(tag: DW_TAG_member, name: "canonical", scope: !1566, file: !6, line: 2322, baseType: !803, size: 64, offset: 1216)
!1611 = !DIDerivedType(tag: DW_TAG_member, name: "lang_specific", scope: !1566, file: !6, line: 2324, baseType: !1612, size: 64, offset: 1280)
!1612 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1613, size: 64)
!1613 = !DICompositeType(tag: DW_TAG_structure_type, name: "lang_type", file: !6, line: 2324, flags: DIFlagFwdDecl)
!1614 = !DIDerivedType(tag: DW_TAG_member, name: "list", scope: !805, file: !6, line: 3395, baseType: !1615, size: 320)
!1615 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_list", file: !6, line: 1469, size: 320, elements: !1616)
!1616 = !{!1617, !1618, !1619}
!1617 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1615, file: !6, line: 1470, baseType: !841, size: 192)
!1618 = !DIDerivedType(tag: DW_TAG_member, name: "purpose", scope: !1615, file: !6, line: 1471, baseType: !803, size: 64, offset: 192)
!1619 = !DIDerivedType(tag: DW_TAG_member, name: "value", scope: !1615, file: !6, line: 1472, baseType: !803, size: 64, offset: 256)
!1620 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !805, file: !6, line: 3396, baseType: !1621, size: 320)
!1621 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_vec", file: !6, line: 1482, size: 320, elements: !1622)
!1622 = !{!1623, !1624, !1625}
!1623 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1621, file: !6, line: 1483, baseType: !841, size: 192)
!1624 = !DIDerivedType(tag: DW_TAG_member, name: "length", scope: !1621, file: !6, line: 1484, baseType: !789, size: 32, offset: 192)
!1625 = !DIDerivedType(tag: DW_TAG_member, name: "a", scope: !1621, file: !6, line: 1485, baseType: !1149, size: 64, offset: 256)
!1626 = !DIDerivedType(tag: DW_TAG_member, name: "exp", scope: !805, file: !6, line: 3397, baseType: !1627, size: 384)
!1627 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_exp", file: !6, line: 1829, size: 384, elements: !1628)
!1628 = !{!1629, !1630, !1631, !1632}
!1629 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1627, file: !6, line: 1830, baseType: !841, size: 192)
!1630 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !1627, file: !6, line: 1831, baseType: !910, size: 32, offset: 192)
!1631 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !1627, file: !6, line: 1832, baseType: !803, size: 64, offset: 256)
!1632 = !DIDerivedType(tag: DW_TAG_member, name: "operands", scope: !1627, file: !6, line: 1835, baseType: !1149, size: 64, offset: 320)
!1633 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_name", scope: !805, file: !6, line: 3398, baseType: !1634, size: 704)
!1634 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_ssa_name", file: !6, line: 1898, size: 704, elements: !1635)
!1635 = !{!1636, !1637, !1638, !1639, !1640, !1645}
!1636 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1634, file: !6, line: 1899, baseType: !841, size: 192)
!1637 = !DIDerivedType(tag: DW_TAG_member, name: "var", scope: !1634, file: !6, line: 1902, baseType: !803, size: 64, offset: 192)
!1638 = !DIDerivedType(tag: DW_TAG_member, name: "def_stmt", scope: !1634, file: !6, line: 1905, baseType: !1096, size: 64, offset: 256)
!1639 = !DIDerivedType(tag: DW_TAG_member, name: "version", scope: !1634, file: !6, line: 1908, baseType: !7, size: 32, offset: 320)
!1640 = !DIDerivedType(tag: DW_TAG_member, name: "ptr_info", scope: !1634, file: !6, line: 1911, baseType: !1641, size: 64, offset: 384)
!1641 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1642, size: 64)
!1642 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ptr_info_def", file: !999, line: 117, size: 128, elements: !1643)
!1643 = !{!1644}
!1644 = !DIDerivedType(tag: DW_TAG_member, name: "pt", scope: !1642, file: !999, line: 120, baseType: !1452, size: 128)
!1645 = !DIDerivedType(tag: DW_TAG_member, name: "imm_uses", scope: !1634, file: !6, line: 1914, baseType: !1137, size: 256, offset: 448)
!1646 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !805, file: !6, line: 3399, baseType: !1647, size: 704)
!1647 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_block", file: !6, line: 2008, size: 704, elements: !1648)
!1648 = !{!1649, !1650, !1651, !1652, !1653, !1654, !1655, !1656, !1657, !1658, !1659}
!1649 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1647, file: !6, line: 2009, baseType: !841, size: 192)
!1650 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_flag", scope: !1647, file: !6, line: 2011, baseType: !7, size: 1, offset: 192, flags: DIFlagBitField, extraData: i64 192)
!1651 = !DIDerivedType(tag: DW_TAG_member, name: "block_num", scope: !1647, file: !6, line: 2012, baseType: !7, size: 31, offset: 193, flags: DIFlagBitField, extraData: i64 192)
!1652 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !1647, file: !6, line: 2014, baseType: !910, size: 32, offset: 224)
!1653 = !DIDerivedType(tag: DW_TAG_member, name: "vars", scope: !1647, file: !6, line: 2016, baseType: !803, size: 64, offset: 256)
!1654 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocalized_vars", scope: !1647, file: !6, line: 2017, baseType: !1439, size: 64, offset: 320)
!1655 = !DIDerivedType(tag: DW_TAG_member, name: "subblocks", scope: !1647, file: !6, line: 2019, baseType: !803, size: 64, offset: 384)
!1656 = !DIDerivedType(tag: DW_TAG_member, name: "supercontext", scope: !1647, file: !6, line: 2020, baseType: !803, size: 64, offset: 448)
!1657 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_origin", scope: !1647, file: !6, line: 2021, baseType: !803, size: 64, offset: 512)
!1658 = !DIDerivedType(tag: DW_TAG_member, name: "fragment_origin", scope: !1647, file: !6, line: 2022, baseType: !803, size: 64, offset: 576)
!1659 = !DIDerivedType(tag: DW_TAG_member, name: "fragment_chain", scope: !1647, file: !6, line: 2023, baseType: !803, size: 64, offset: 640)
!1660 = !DIDerivedType(tag: DW_TAG_member, name: "binfo", scope: !805, file: !6, line: 3400, baseType: !1661, size: 832)
!1661 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_binfo", file: !6, line: 2430, size: 832, elements: !1662)
!1662 = !{!1663, !1664, !1665, !1666, !1667, !1668, !1669, !1670, !1671, !1672}
!1663 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1661, file: !6, line: 2431, baseType: !841, size: 192)
!1664 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1661, file: !6, line: 2433, baseType: !803, size: 64, offset: 192)
!1665 = !DIDerivedType(tag: DW_TAG_member, name: "vtable", scope: !1661, file: !6, line: 2434, baseType: !803, size: 64, offset: 256)
!1666 = !DIDerivedType(tag: DW_TAG_member, name: "virtuals", scope: !1661, file: !6, line: 2435, baseType: !803, size: 64, offset: 320)
!1667 = !DIDerivedType(tag: DW_TAG_member, name: "vptr_field", scope: !1661, file: !6, line: 2436, baseType: !803, size: 64, offset: 384)
!1668 = !DIDerivedType(tag: DW_TAG_member, name: "base_accesses", scope: !1661, file: !6, line: 2437, baseType: !1439, size: 64, offset: 448)
!1669 = !DIDerivedType(tag: DW_TAG_member, name: "inheritance", scope: !1661, file: !6, line: 2438, baseType: !803, size: 64, offset: 512)
!1670 = !DIDerivedType(tag: DW_TAG_member, name: "vtt_subvtt", scope: !1661, file: !6, line: 2440, baseType: !803, size: 64, offset: 576)
!1671 = !DIDerivedType(tag: DW_TAG_member, name: "vtt_vptr", scope: !1661, file: !6, line: 2441, baseType: !803, size: 64, offset: 640)
!1672 = !DIDerivedType(tag: DW_TAG_member, name: "base_binfos", scope: !1661, file: !6, line: 2443, baseType: !1673, size: 128, offset: 704)
!1673 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_none", file: !6, line: 182, baseType: !1674)
!1674 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_none", file: !6, line: 182, size: 128, elements: !1675)
!1675 = !{!1676}
!1676 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1674, file: !6, line: 182, baseType: !1444, size: 128)
!1677 = !DIDerivedType(tag: DW_TAG_member, name: "stmt_list", scope: !805, file: !6, line: 3401, baseType: !1678, size: 320)
!1678 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_statement_list", file: !6, line: 3327, size: 320, elements: !1679)
!1679 = !{!1680, !1681, !1688}
!1680 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1678, file: !6, line: 3329, baseType: !841, size: 192)
!1681 = !DIDerivedType(tag: DW_TAG_member, name: "head", scope: !1678, file: !6, line: 3330, baseType: !1682, size: 64, offset: 192)
!1682 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1683, size: 64)
!1683 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_statement_list_node", file: !6, line: 3320, size: 192, elements: !1684)
!1684 = !{!1685, !1686, !1687}
!1685 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1683, file: !6, line: 3322, baseType: !1682, size: 64)
!1686 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1683, file: !6, line: 3323, baseType: !1682, size: 64, offset: 64)
!1687 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !1683, file: !6, line: 3324, baseType: !803, size: 64, offset: 128)
!1688 = !DIDerivedType(tag: DW_TAG_member, name: "tail", scope: !1678, file: !6, line: 3331, baseType: !1682, size: 64, offset: 256)
!1689 = !DIDerivedType(tag: DW_TAG_member, name: "constructor", scope: !805, file: !6, line: 3402, baseType: !1690, size: 256)
!1690 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_constructor", file: !6, line: 1540, size: 256, elements: !1691)
!1691 = !{!1692, !1693}
!1692 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1690, file: !6, line: 1541, baseType: !841, size: 192)
!1693 = !DIDerivedType(tag: DW_TAG_member, name: "elts", scope: !1690, file: !6, line: 1542, baseType: !1694, size: 64, offset: 192)
!1694 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1695, size: 64)
!1695 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_constructor_elt_gc", file: !6, line: 1538, baseType: !1696)
!1696 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_constructor_elt_gc", file: !6, line: 1538, size: 192, elements: !1697)
!1697 = !{!1698}
!1698 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1696, file: !6, line: 1538, baseType: !1699, size: 192)
!1699 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_constructor_elt_base", file: !6, line: 1537, baseType: !1700)
!1700 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_constructor_elt_base", file: !6, line: 1537, size: 192, elements: !1701)
!1701 = !{!1702, !1703, !1704}
!1702 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1700, file: !6, line: 1537, baseType: !7, size: 32)
!1703 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1700, file: !6, line: 1537, baseType: !7, size: 32, offset: 32)
!1704 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1700, file: !6, line: 1537, baseType: !1705, size: 128, offset: 64)
!1705 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1706, size: 128, elements: !883)
!1706 = !DIDerivedType(tag: DW_TAG_typedef, name: "constructor_elt", file: !6, line: 1535, baseType: !1707)
!1707 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "constructor_elt_d", file: !6, line: 1532, size: 128, elements: !1708)
!1708 = !{!1709, !1710}
!1709 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !1707, file: !6, line: 1533, baseType: !803, size: 64)
!1710 = !DIDerivedType(tag: DW_TAG_member, name: "value", scope: !1707, file: !6, line: 1534, baseType: !803, size: 64, offset: 64)
!1711 = !DIDerivedType(tag: DW_TAG_member, name: "omp_clause", scope: !805, file: !6, line: 3403, baseType: !1712, size: 512)
!1712 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_omp_clause", file: !6, line: 1938, size: 512, elements: !1713)
!1713 = !{!1714, !1715, !1716, !1717, !1723, !1724, !1725}
!1714 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1712, file: !6, line: 1939, baseType: !841, size: 192)
!1715 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !1712, file: !6, line: 1940, baseType: !910, size: 32, offset: 192)
!1716 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !1712, file: !6, line: 1941, baseType: !217, size: 32, offset: 224)
!1717 = !DIDerivedType(tag: DW_TAG_member, name: "subcode", scope: !1712, file: !6, line: 1946, baseType: !1718, size: 32, offset: 256)
!1718 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "omp_clause_subcode", file: !6, line: 1942, size: 32, elements: !1719)
!1719 = !{!1720, !1721, !1722}
!1720 = !DIDerivedType(tag: DW_TAG_member, name: "default_kind", scope: !1718, file: !6, line: 1943, baseType: !235, size: 32)
!1721 = !DIDerivedType(tag: DW_TAG_member, name: "schedule_kind", scope: !1718, file: !6, line: 1944, baseType: !242, size: 32)
!1722 = !DIDerivedType(tag: DW_TAG_member, name: "reduction_code", scope: !1718, file: !6, line: 1945, baseType: !5, size: 32)
!1723 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reduction_init", scope: !1712, file: !6, line: 1950, baseType: !1086, size: 64, offset: 320)
!1724 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reduction_merge", scope: !1712, file: !6, line: 1951, baseType: !1086, size: 64, offset: 384)
!1725 = !DIDerivedType(tag: DW_TAG_member, name: "ops", scope: !1712, file: !6, line: 1953, baseType: !1149, size: 64, offset: 448)
!1726 = !DIDerivedType(tag: DW_TAG_member, name: "optimization", scope: !805, file: !6, line: 3404, baseType: !1727, size: 1664)
!1727 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_optimization_option", file: !6, line: 3337, size: 1664, elements: !1728)
!1728 = !{!1729, !1730}
!1729 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1727, file: !6, line: 3338, baseType: !841, size: 192)
!1730 = !DIDerivedType(tag: DW_TAG_member, name: "opts", scope: !1727, file: !6, line: 3341, baseType: !1731, size: 1472, offset: 192)
!1731 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cl_optimization", file: !1732, line: 410, size: 1472, elements: !1733)
!1732 = !DIFile(filename: "./options.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1733 = !{!1734, !1735, !1736, !1737, !1738, !1739, !1740, !1741, !1742, !1744, !1745, !1746, !1747, !1748, !1749, !1750, !1751, !1752, !1753, !1754, !1755, !1756, !1757, !1758, !1759, !1760, !1761, !1762, !1763, !1764, !1765, !1766, !1767, !1768, !1769, !1770, !1771, !1772, !1773, !1774, !1775, !1776, !1777, !1778, !1779, !1780, !1781, !1782, !1783, !1784, !1785, !1786, !1787, !1788, !1789, !1790, !1791, !1792, !1793, !1794, !1795, !1796, !1797, !1798, !1799, !1800, !1801, !1802, !1803, !1804, !1805, !1806, !1807, !1808, !1809, !1810, !1811, !1812, !1813, !1814, !1815, !1816, !1817, !1818, !1819, !1820, !1821, !1822, !1823, !1824, !1825, !1826, !1827, !1828, !1829, !1830, !1831, !1832, !1833, !1834, !1835, !1836, !1837, !1838, !1839, !1840, !1841, !1842, !1843, !1844, !1845, !1846, !1847, !1848, !1849, !1850, !1851, !1852, !1853, !1854, !1855, !1856, !1857, !1858, !1859, !1860, !1861, !1862, !1863, !1864, !1865, !1866, !1867, !1868, !1869, !1870, !1871, !1872, !1873, !1874, !1875, !1876, !1877, !1878, !1879, !1880, !1881, !1882, !1883, !1884, !1885, !1886, !1887, !1888, !1889, !1890, !1891, !1892, !1893, !1894, !1895, !1896, !1897}
!1734 = !DIDerivedType(tag: DW_TAG_member, name: "align_functions", scope: !1731, file: !1732, line: 412, baseType: !789, size: 32)
!1735 = !DIDerivedType(tag: DW_TAG_member, name: "align_jumps", scope: !1731, file: !1732, line: 413, baseType: !789, size: 32, offset: 32)
!1736 = !DIDerivedType(tag: DW_TAG_member, name: "align_labels", scope: !1731, file: !1732, line: 414, baseType: !789, size: 32, offset: 64)
!1737 = !DIDerivedType(tag: DW_TAG_member, name: "align_loops", scope: !1731, file: !1732, line: 415, baseType: !789, size: 32, offset: 96)
!1738 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_stalled_insns", scope: !1731, file: !1732, line: 416, baseType: !789, size: 32, offset: 128)
!1739 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_stalled_insns_dep", scope: !1731, file: !1732, line: 417, baseType: !789, size: 32, offset: 160)
!1740 = !DIDerivedType(tag: DW_TAG_member, name: "optimize", scope: !1731, file: !1732, line: 418, baseType: !902, size: 8, offset: 192)
!1741 = !DIDerivedType(tag: DW_TAG_member, name: "optimize_size", scope: !1731, file: !1732, line: 419, baseType: !902, size: 8, offset: 200)
!1742 = !DIDerivedType(tag: DW_TAG_member, name: "flag_argument_noalias", scope: !1731, file: !1732, line: 420, baseType: !1743, size: 8, offset: 208)
!1743 = !DIBasicType(name: "signed char", size: 8, encoding: DW_ATE_signed_char)
!1744 = !DIDerivedType(tag: DW_TAG_member, name: "flag_asynchronous_unwind_tables", scope: !1731, file: !1732, line: 421, baseType: !1743, size: 8, offset: 216)
!1745 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_on_count_reg", scope: !1731, file: !1732, line: 422, baseType: !1743, size: 8, offset: 224)
!1746 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_probabilities", scope: !1731, file: !1732, line: 423, baseType: !1743, size: 8, offset: 232)
!1747 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_target_load_optimize", scope: !1731, file: !1732, line: 424, baseType: !1743, size: 8, offset: 240)
!1748 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_target_load_optimize2", scope: !1731, file: !1732, line: 425, baseType: !1743, size: 8, offset: 248)
!1749 = !DIDerivedType(tag: DW_TAG_member, name: "flag_btr_bb_exclusive", scope: !1731, file: !1732, line: 426, baseType: !1743, size: 8, offset: 256)
!1750 = !DIDerivedType(tag: DW_TAG_member, name: "flag_caller_saves", scope: !1731, file: !1732, line: 427, baseType: !1743, size: 8, offset: 264)
!1751 = !DIDerivedType(tag: DW_TAG_member, name: "flag_no_common", scope: !1731, file: !1732, line: 428, baseType: !1743, size: 8, offset: 272)
!1752 = !DIDerivedType(tag: DW_TAG_member, name: "flag_conserve_stack", scope: !1731, file: !1732, line: 429, baseType: !1743, size: 8, offset: 280)
!1753 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cprop_registers", scope: !1731, file: !1732, line: 430, baseType: !1743, size: 8, offset: 288)
!1754 = !DIDerivedType(tag: DW_TAG_member, name: "flag_crossjumping", scope: !1731, file: !1732, line: 431, baseType: !1743, size: 8, offset: 296)
!1755 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cse_follow_jumps", scope: !1731, file: !1732, line: 432, baseType: !1743, size: 8, offset: 304)
!1756 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cx_fortran_rules", scope: !1731, file: !1732, line: 433, baseType: !1743, size: 8, offset: 312)
!1757 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cx_limited_range", scope: !1731, file: !1732, line: 434, baseType: !1743, size: 8, offset: 320)
!1758 = !DIDerivedType(tag: DW_TAG_member, name: "flag_data_sections", scope: !1731, file: !1732, line: 435, baseType: !1743, size: 8, offset: 328)
!1759 = !DIDerivedType(tag: DW_TAG_member, name: "flag_dce", scope: !1731, file: !1732, line: 436, baseType: !1743, size: 8, offset: 336)
!1760 = !DIDerivedType(tag: DW_TAG_member, name: "flag_defer_pop", scope: !1731, file: !1732, line: 437, baseType: !1743, size: 8, offset: 344)
!1761 = !DIDerivedType(tag: DW_TAG_member, name: "flag_delayed_branch", scope: !1731, file: !1732, line: 438, baseType: !1743, size: 8, offset: 352)
!1762 = !DIDerivedType(tag: DW_TAG_member, name: "flag_delete_null_pointer_checks", scope: !1731, file: !1732, line: 439, baseType: !1743, size: 8, offset: 360)
!1763 = !DIDerivedType(tag: DW_TAG_member, name: "flag_dse", scope: !1731, file: !1732, line: 440, baseType: !1743, size: 8, offset: 368)
!1764 = !DIDerivedType(tag: DW_TAG_member, name: "flag_early_inlining", scope: !1731, file: !1732, line: 441, baseType: !1743, size: 8, offset: 376)
!1765 = !DIDerivedType(tag: DW_TAG_member, name: "flag_exceptions", scope: !1731, file: !1732, line: 442, baseType: !1743, size: 8, offset: 384)
!1766 = !DIDerivedType(tag: DW_TAG_member, name: "flag_expensive_optimizations", scope: !1731, file: !1732, line: 443, baseType: !1743, size: 8, offset: 392)
!1767 = !DIDerivedType(tag: DW_TAG_member, name: "flag_finite_math_only", scope: !1731, file: !1732, line: 444, baseType: !1743, size: 8, offset: 400)
!1768 = !DIDerivedType(tag: DW_TAG_member, name: "flag_float_store", scope: !1731, file: !1732, line: 445, baseType: !1743, size: 8, offset: 408)
!1769 = !DIDerivedType(tag: DW_TAG_member, name: "flag_forward_propagate", scope: !1731, file: !1732, line: 446, baseType: !1743, size: 8, offset: 416)
!1770 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse", scope: !1731, file: !1732, line: 447, baseType: !1743, size: 8, offset: 424)
!1771 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_after_reload", scope: !1731, file: !1732, line: 448, baseType: !1743, size: 8, offset: 432)
!1772 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_las", scope: !1731, file: !1732, line: 449, baseType: !1743, size: 8, offset: 440)
!1773 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_lm", scope: !1731, file: !1732, line: 450, baseType: !1743, size: 8, offset: 448)
!1774 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_sm", scope: !1731, file: !1732, line: 451, baseType: !1743, size: 8, offset: 456)
!1775 = !DIDerivedType(tag: DW_TAG_member, name: "flag_graphite_identity", scope: !1731, file: !1732, line: 452, baseType: !1743, size: 8, offset: 464)
!1776 = !DIDerivedType(tag: DW_TAG_member, name: "flag_guess_branch_prob", scope: !1731, file: !1732, line: 453, baseType: !1743, size: 8, offset: 472)
!1777 = !DIDerivedType(tag: DW_TAG_member, name: "flag_if_conversion", scope: !1731, file: !1732, line: 454, baseType: !1743, size: 8, offset: 480)
!1778 = !DIDerivedType(tag: DW_TAG_member, name: "flag_if_conversion2", scope: !1731, file: !1732, line: 455, baseType: !1743, size: 8, offset: 488)
!1779 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_functions", scope: !1731, file: !1732, line: 456, baseType: !1743, size: 8, offset: 496)
!1780 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_functions_called_once", scope: !1731, file: !1732, line: 457, baseType: !1743, size: 8, offset: 504)
!1781 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_small_functions", scope: !1731, file: !1732, line: 458, baseType: !1743, size: 8, offset: 512)
!1782 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_cp", scope: !1731, file: !1732, line: 459, baseType: !1743, size: 8, offset: 520)
!1783 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_cp_clone", scope: !1731, file: !1732, line: 460, baseType: !1743, size: 8, offset: 528)
!1784 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_matrix_reorg", scope: !1731, file: !1732, line: 461, baseType: !1743, size: 8, offset: 536)
!1785 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_pta", scope: !1731, file: !1732, line: 462, baseType: !1743, size: 8, offset: 544)
!1786 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_pure_const", scope: !1731, file: !1732, line: 463, baseType: !1743, size: 8, offset: 552)
!1787 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_reference", scope: !1731, file: !1732, line: 464, baseType: !1743, size: 8, offset: 560)
!1788 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_sra", scope: !1731, file: !1732, line: 465, baseType: !1743, size: 8, offset: 568)
!1789 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_type_escape", scope: !1731, file: !1732, line: 466, baseType: !1743, size: 8, offset: 576)
!1790 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ivopts", scope: !1731, file: !1732, line: 467, baseType: !1743, size: 8, offset: 584)
!1791 = !DIDerivedType(tag: DW_TAG_member, name: "flag_jump_tables", scope: !1731, file: !1732, line: 468, baseType: !1743, size: 8, offset: 592)
!1792 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_block", scope: !1731, file: !1732, line: 469, baseType: !1743, size: 8, offset: 600)
!1793 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_interchange", scope: !1731, file: !1732, line: 470, baseType: !1743, size: 8, offset: 608)
!1794 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_parallelize_all", scope: !1731, file: !1732, line: 471, baseType: !1743, size: 8, offset: 616)
!1795 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_strip_mine", scope: !1731, file: !1732, line: 472, baseType: !1743, size: 8, offset: 624)
!1796 = !DIDerivedType(tag: DW_TAG_member, name: "flag_lto_report", scope: !1731, file: !1732, line: 473, baseType: !1743, size: 8, offset: 632)
!1797 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ltrans", scope: !1731, file: !1732, line: 474, baseType: !1743, size: 8, offset: 640)
!1798 = !DIDerivedType(tag: DW_TAG_member, name: "flag_errno_math", scope: !1731, file: !1732, line: 475, baseType: !1743, size: 8, offset: 648)
!1799 = !DIDerivedType(tag: DW_TAG_member, name: "flag_merge_constants", scope: !1731, file: !1732, line: 476, baseType: !1743, size: 8, offset: 656)
!1800 = !DIDerivedType(tag: DW_TAG_member, name: "flag_modulo_sched", scope: !1731, file: !1732, line: 477, baseType: !1743, size: 8, offset: 664)
!1801 = !DIDerivedType(tag: DW_TAG_member, name: "flag_move_loop_invariants", scope: !1731, file: !1732, line: 478, baseType: !1743, size: 8, offset: 672)
!1802 = !DIDerivedType(tag: DW_TAG_member, name: "flag_non_call_exceptions", scope: !1731, file: !1732, line: 479, baseType: !1743, size: 8, offset: 680)
!1803 = !DIDerivedType(tag: DW_TAG_member, name: "flag_omit_frame_pointer", scope: !1731, file: !1732, line: 480, baseType: !1743, size: 8, offset: 688)
!1804 = !DIDerivedType(tag: DW_TAG_member, name: "flag_regmove", scope: !1731, file: !1732, line: 481, baseType: !1743, size: 8, offset: 696)
!1805 = !DIDerivedType(tag: DW_TAG_member, name: "flag_optimize_sibling_calls", scope: !1731, file: !1732, line: 482, baseType: !1743, size: 8, offset: 704)
!1806 = !DIDerivedType(tag: DW_TAG_member, name: "flag_pack_struct", scope: !1731, file: !1732, line: 483, baseType: !1743, size: 8, offset: 712)
!1807 = !DIDerivedType(tag: DW_TAG_member, name: "flag_peel_loops", scope: !1731, file: !1732, line: 484, baseType: !1743, size: 8, offset: 720)
!1808 = !DIDerivedType(tag: DW_TAG_member, name: "flag_no_peephole", scope: !1731, file: !1732, line: 485, baseType: !1743, size: 8, offset: 728)
!1809 = !DIDerivedType(tag: DW_TAG_member, name: "flag_peephole2", scope: !1731, file: !1732, line: 486, baseType: !1743, size: 8, offset: 736)
!1810 = !DIDerivedType(tag: DW_TAG_member, name: "flag_predictive_commoning", scope: !1731, file: !1732, line: 487, baseType: !1743, size: 8, offset: 744)
!1811 = !DIDerivedType(tag: DW_TAG_member, name: "flag_prefetch_loop_arrays", scope: !1731, file: !1732, line: 488, baseType: !1743, size: 8, offset: 752)
!1812 = !DIDerivedType(tag: DW_TAG_member, name: "flag_pcc_struct_return", scope: !1731, file: !1732, line: 489, baseType: !1743, size: 8, offset: 760)
!1813 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rename_registers", scope: !1731, file: !1732, line: 490, baseType: !1743, size: 8, offset: 768)
!1814 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_blocks", scope: !1731, file: !1732, line: 491, baseType: !1743, size: 8, offset: 776)
!1815 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_blocks_and_partition", scope: !1731, file: !1732, line: 492, baseType: !1743, size: 8, offset: 784)
!1816 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_functions", scope: !1731, file: !1732, line: 493, baseType: !1743, size: 8, offset: 792)
!1817 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rerun_cse_after_loop", scope: !1731, file: !1732, line: 494, baseType: !1743, size: 8, offset: 800)
!1818 = !DIDerivedType(tag: DW_TAG_member, name: "flag_resched_modulo_sched", scope: !1731, file: !1732, line: 495, baseType: !1743, size: 8, offset: 808)
!1819 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rounding_math", scope: !1731, file: !1732, line: 496, baseType: !1743, size: 8, offset: 816)
!1820 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_critical_path_heuristic", scope: !1731, file: !1732, line: 497, baseType: !1743, size: 8, offset: 824)
!1821 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_dep_count_heuristic", scope: !1731, file: !1732, line: 498, baseType: !1743, size: 8, offset: 832)
!1822 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_group_heuristic", scope: !1731, file: !1732, line: 499, baseType: !1743, size: 8, offset: 840)
!1823 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_interblock", scope: !1731, file: !1732, line: 500, baseType: !1743, size: 8, offset: 848)
!1824 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_last_insn_heuristic", scope: !1731, file: !1732, line: 501, baseType: !1743, size: 8, offset: 856)
!1825 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_pressure", scope: !1731, file: !1732, line: 502, baseType: !1743, size: 8, offset: 864)
!1826 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_rank_heuristic", scope: !1731, file: !1732, line: 503, baseType: !1743, size: 8, offset: 872)
!1827 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative", scope: !1731, file: !1732, line: 504, baseType: !1743, size: 8, offset: 880)
!1828 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_spec_insn_heuristic", scope: !1731, file: !1732, line: 505, baseType: !1743, size: 8, offset: 888)
!1829 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative_load", scope: !1731, file: !1732, line: 506, baseType: !1743, size: 8, offset: 896)
!1830 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative_load_dangerous", scope: !1731, file: !1732, line: 507, baseType: !1743, size: 8, offset: 904)
!1831 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched2_use_superblocks", scope: !1731, file: !1732, line: 508, baseType: !1743, size: 8, offset: 912)
!1832 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_insns", scope: !1731, file: !1732, line: 509, baseType: !1743, size: 8, offset: 920)
!1833 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_insns_after_reload", scope: !1731, file: !1732, line: 510, baseType: !1743, size: 8, offset: 928)
!1834 = !DIDerivedType(tag: DW_TAG_member, name: "flag_section_anchors", scope: !1731, file: !1732, line: 511, baseType: !1743, size: 8, offset: 936)
!1835 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_pipelining", scope: !1731, file: !1732, line: 512, baseType: !1743, size: 8, offset: 944)
!1836 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_pipelining_outer_loops", scope: !1731, file: !1732, line: 513, baseType: !1743, size: 8, offset: 952)
!1837 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_reschedule_pipelined", scope: !1731, file: !1732, line: 514, baseType: !1743, size: 8, offset: 960)
!1838 = !DIDerivedType(tag: DW_TAG_member, name: "flag_selective_scheduling", scope: !1731, file: !1732, line: 515, baseType: !1743, size: 8, offset: 968)
!1839 = !DIDerivedType(tag: DW_TAG_member, name: "flag_selective_scheduling2", scope: !1731, file: !1732, line: 516, baseType: !1743, size: 8, offset: 976)
!1840 = !DIDerivedType(tag: DW_TAG_member, name: "flag_signaling_nans", scope: !1731, file: !1732, line: 517, baseType: !1743, size: 8, offset: 984)
!1841 = !DIDerivedType(tag: DW_TAG_member, name: "flag_signed_zeros", scope: !1731, file: !1732, line: 518, baseType: !1743, size: 8, offset: 992)
!1842 = !DIDerivedType(tag: DW_TAG_member, name: "flag_single_precision_constant", scope: !1731, file: !1732, line: 519, baseType: !1743, size: 8, offset: 1000)
!1843 = !DIDerivedType(tag: DW_TAG_member, name: "flag_split_ivs_in_unroller", scope: !1731, file: !1732, line: 520, baseType: !1743, size: 8, offset: 1008)
!1844 = !DIDerivedType(tag: DW_TAG_member, name: "flag_split_wide_types", scope: !1731, file: !1732, line: 521, baseType: !1743, size: 8, offset: 1016)
!1845 = !DIDerivedType(tag: DW_TAG_member, name: "flag_strict_aliasing", scope: !1731, file: !1732, line: 522, baseType: !1743, size: 8, offset: 1024)
!1846 = !DIDerivedType(tag: DW_TAG_member, name: "flag_thread_jumps", scope: !1731, file: !1732, line: 523, baseType: !1743, size: 8, offset: 1032)
!1847 = !DIDerivedType(tag: DW_TAG_member, name: "flag_toplevel_reorder", scope: !1731, file: !1732, line: 524, baseType: !1743, size: 8, offset: 1040)
!1848 = !DIDerivedType(tag: DW_TAG_member, name: "flag_trapping_math", scope: !1731, file: !1732, line: 525, baseType: !1743, size: 8, offset: 1048)
!1849 = !DIDerivedType(tag: DW_TAG_member, name: "flag_trapv", scope: !1731, file: !1732, line: 526, baseType: !1743, size: 8, offset: 1056)
!1850 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_builtin_call_dce", scope: !1731, file: !1732, line: 527, baseType: !1743, size: 8, offset: 1064)
!1851 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ccp", scope: !1731, file: !1732, line: 528, baseType: !1743, size: 8, offset: 1072)
!1852 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ch", scope: !1731, file: !1732, line: 529, baseType: !1743, size: 8, offset: 1080)
!1853 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_copy_prop", scope: !1731, file: !1732, line: 530, baseType: !1743, size: 8, offset: 1088)
!1854 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_copyrename", scope: !1731, file: !1732, line: 531, baseType: !1743, size: 8, offset: 1096)
!1855 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_cselim", scope: !1731, file: !1732, line: 532, baseType: !1743, size: 8, offset: 1104)
!1856 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dce", scope: !1731, file: !1732, line: 533, baseType: !1743, size: 8, offset: 1112)
!1857 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dom", scope: !1731, file: !1732, line: 534, baseType: !1743, size: 8, offset: 1120)
!1858 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dse", scope: !1731, file: !1732, line: 535, baseType: !1743, size: 8, offset: 1128)
!1859 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_forwprop", scope: !1731, file: !1732, line: 536, baseType: !1743, size: 8, offset: 1136)
!1860 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_fre", scope: !1731, file: !1732, line: 537, baseType: !1743, size: 8, offset: 1144)
!1861 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_distribution", scope: !1731, file: !1732, line: 538, baseType: !1743, size: 8, offset: 1152)
!1862 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_im", scope: !1731, file: !1732, line: 539, baseType: !1743, size: 8, offset: 1160)
!1863 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_ivcanon", scope: !1731, file: !1732, line: 540, baseType: !1743, size: 8, offset: 1168)
!1864 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_linear", scope: !1731, file: !1732, line: 541, baseType: !1743, size: 8, offset: 1176)
!1865 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_optimize", scope: !1731, file: !1732, line: 542, baseType: !1743, size: 8, offset: 1184)
!1866 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_live_range_split", scope: !1731, file: !1732, line: 543, baseType: !1743, size: 8, offset: 1192)
!1867 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_phiprop", scope: !1731, file: !1732, line: 544, baseType: !1743, size: 8, offset: 1200)
!1868 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_pre", scope: !1731, file: !1732, line: 545, baseType: !1743, size: 8, offset: 1208)
!1869 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_pta", scope: !1731, file: !1732, line: 546, baseType: !1743, size: 8, offset: 1216)
!1870 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_reassoc", scope: !1731, file: !1732, line: 547, baseType: !1743, size: 8, offset: 1224)
!1871 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_scev_cprop", scope: !1731, file: !1732, line: 548, baseType: !1743, size: 8, offset: 1232)
!1872 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_sink", scope: !1731, file: !1732, line: 549, baseType: !1743, size: 8, offset: 1240)
!1873 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_slp_vectorize", scope: !1731, file: !1732, line: 550, baseType: !1743, size: 8, offset: 1248)
!1874 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_sra", scope: !1731, file: !1732, line: 551, baseType: !1743, size: 8, offset: 1256)
!1875 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_switch_conversion", scope: !1731, file: !1732, line: 552, baseType: !1743, size: 8, offset: 1264)
!1876 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ter", scope: !1731, file: !1732, line: 553, baseType: !1743, size: 8, offset: 1272)
!1877 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vect_loop_version", scope: !1731, file: !1732, line: 554, baseType: !1743, size: 8, offset: 1280)
!1878 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vectorize", scope: !1731, file: !1732, line: 555, baseType: !1743, size: 8, offset: 1288)
!1879 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vrp", scope: !1731, file: !1732, line: 556, baseType: !1743, size: 8, offset: 1296)
!1880 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unit_at_a_time", scope: !1731, file: !1732, line: 557, baseType: !1743, size: 8, offset: 1304)
!1881 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unroll_all_loops", scope: !1731, file: !1732, line: 558, baseType: !1743, size: 8, offset: 1312)
!1882 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unroll_loops", scope: !1731, file: !1732, line: 559, baseType: !1743, size: 8, offset: 1320)
!1883 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unsafe_loop_optimizations", scope: !1731, file: !1732, line: 560, baseType: !1743, size: 8, offset: 1328)
!1884 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unsafe_math_optimizations", scope: !1731, file: !1732, line: 561, baseType: !1743, size: 8, offset: 1336)
!1885 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unswitch_loops", scope: !1731, file: !1732, line: 562, baseType: !1743, size: 8, offset: 1344)
!1886 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unwind_tables", scope: !1731, file: !1732, line: 563, baseType: !1743, size: 8, offset: 1352)
!1887 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking", scope: !1731, file: !1732, line: 564, baseType: !1743, size: 8, offset: 1360)
!1888 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_assignments", scope: !1731, file: !1732, line: 565, baseType: !1743, size: 8, offset: 1368)
!1889 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_assignments_toggle", scope: !1731, file: !1732, line: 566, baseType: !1743, size: 8, offset: 1376)
!1890 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_uninit", scope: !1731, file: !1732, line: 567, baseType: !1743, size: 8, offset: 1384)
!1891 = !DIDerivedType(tag: DW_TAG_member, name: "flag_variable_expansion_in_unroller", scope: !1731, file: !1732, line: 568, baseType: !1743, size: 8, offset: 1392)
!1892 = !DIDerivedType(tag: DW_TAG_member, name: "flag_vect_cost_model", scope: !1731, file: !1732, line: 569, baseType: !1743, size: 8, offset: 1400)
!1893 = !DIDerivedType(tag: DW_TAG_member, name: "flag_value_profile_transformations", scope: !1731, file: !1732, line: 570, baseType: !1743, size: 8, offset: 1408)
!1894 = !DIDerivedType(tag: DW_TAG_member, name: "flag_web", scope: !1731, file: !1732, line: 571, baseType: !1743, size: 8, offset: 1416)
!1895 = !DIDerivedType(tag: DW_TAG_member, name: "flag_whole_program", scope: !1731, file: !1732, line: 572, baseType: !1743, size: 8, offset: 1424)
!1896 = !DIDerivedType(tag: DW_TAG_member, name: "flag_wpa", scope: !1731, file: !1732, line: 573, baseType: !1743, size: 8, offset: 1432)
!1897 = !DIDerivedType(tag: DW_TAG_member, name: "flag_wrapv", scope: !1731, file: !1732, line: 574, baseType: !1743, size: 8, offset: 1440)
!1898 = !DIDerivedType(tag: DW_TAG_member, name: "target_option", scope: !805, file: !6, line: 3405, baseType: !1899, size: 384)
!1899 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_target_option", file: !6, line: 3352, size: 384, elements: !1900)
!1900 = !{!1901, !1902}
!1901 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1899, file: !6, line: 3353, baseType: !841, size: 192)
!1902 = !DIDerivedType(tag: DW_TAG_member, name: "opts", scope: !1899, file: !6, line: 3356, baseType: !1903, size: 192, offset: 192)
!1903 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cl_target_option", file: !1732, line: 578, size: 192, elements: !1904)
!1904 = !{!1905, !1906, !1907, !1908, !1909, !1910, !1911, !1912, !1913, !1914, !1915}
!1905 = !DIDerivedType(tag: DW_TAG_member, name: "ix86_isa_flags_explicit", scope: !1903, file: !1732, line: 580, baseType: !789, size: 32)
!1906 = !DIDerivedType(tag: DW_TAG_member, name: "target_flags_explicit", scope: !1903, file: !1732, line: 581, baseType: !789, size: 32, offset: 32)
!1907 = !DIDerivedType(tag: DW_TAG_member, name: "target_flags", scope: !1903, file: !1732, line: 582, baseType: !789, size: 32, offset: 64)
!1908 = !DIDerivedType(tag: DW_TAG_member, name: "ix86_isa_flags", scope: !1903, file: !1732, line: 583, baseType: !789, size: 32, offset: 96)
!1909 = !DIDerivedType(tag: DW_TAG_member, name: "arch", scope: !1903, file: !1732, line: 584, baseType: !902, size: 8, offset: 128)
!1910 = !DIDerivedType(tag: DW_TAG_member, name: "arch_specified", scope: !1903, file: !1732, line: 585, baseType: !902, size: 8, offset: 136)
!1911 = !DIDerivedType(tag: DW_TAG_member, name: "branch_cost", scope: !1903, file: !1732, line: 586, baseType: !902, size: 8, offset: 144)
!1912 = !DIDerivedType(tag: DW_TAG_member, name: "fpmath", scope: !1903, file: !1732, line: 587, baseType: !902, size: 8, offset: 152)
!1913 = !DIDerivedType(tag: DW_TAG_member, name: "schedule", scope: !1903, file: !1732, line: 588, baseType: !902, size: 8, offset: 160)
!1914 = !DIDerivedType(tag: DW_TAG_member, name: "tune", scope: !1903, file: !1732, line: 589, baseType: !902, size: 8, offset: 168)
!1915 = !DIDerivedType(tag: DW_TAG_member, name: "tune_defaulted", scope: !1903, file: !1732, line: 590, baseType: !902, size: 8, offset: 176)
!1916 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1917, size: 64)
!1917 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "type_brand_s", file: !3, line: 171, size: 128, elements: !1918)
!1918 = !{!1919, !1920}
!1919 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1917, file: !3, line: 173, baseType: !1225, size: 64)
!1920 = !DIDerivedType(tag: DW_TAG_member, name: "seq", scope: !1917, file: !3, line: 174, baseType: !789, size: 32, offset: 64)
!1921 = !DIDerivedType(tag: DW_TAG_typedef, name: "splay_tree_value", file: !734, line: 63, baseType: !735)
!1922 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1923, size: 64)
!1923 = !DIDerivedType(tag: DW_TAG_typedef, name: "cast_t", file: !3, line: 796, baseType: !1924)
!1924 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cast", file: !3, line: 792, size: 128, elements: !1925)
!1925 = !{!1926, !1927}
!1926 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !1924, file: !3, line: 794, baseType: !789, size: 32)
!1927 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !1924, file: !3, line: 795, baseType: !1096, size: 64, offset: 64)
!1928 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1929, size: 64)
!1929 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1098)
!1930 = !DIDerivedType(tag: DW_TAG_typedef, name: "use_operand_p", file: !485, line: 30, baseType: !1931)
!1931 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1932, size: 64)
!1932 = !DIDerivedType(tag: DW_TAG_typedef, name: "ssa_use_operand_t", file: !6, line: 1893, baseType: !1137)
!1933 = !{!1934, !1962, !1964, !2002, !0, !2006, !2008, !2010, !2012, !2014, !2016, !2018, !2020, !2022, !2024, !2026}
!1934 = !DIGlobalVariableExpression(var: !1935, expr: !DIExpression())
!1935 = distinct !DIGlobalVariable(name: "pass_ipa_type_escape", scope: !2, file: !3, line: 2120, type: !1936, isLocal: false, isDefinition: true)
!1936 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "simple_ipa_opt_pass", file: !263, line: 202, size: 640, elements: !1937)
!1937 = !{!1938}
!1938 = !DIDerivedType(tag: DW_TAG_member, name: "pass", scope: !1936, file: !263, line: 204, baseType: !1939, size: 640)
!1939 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "opt_pass", file: !263, line: 114, size: 640, elements: !1940)
!1940 = !{!1941, !1942, !1943, !1947, !1951, !1953, !1954, !1955, !1957, !1958, !1959, !1960, !1961}
!1941 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !1939, file: !263, line: 117, baseType: !262, size: 32)
!1942 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1939, file: !263, line: 121, baseType: !1225, size: 64, offset: 64)
!1943 = !DIDerivedType(tag: DW_TAG_member, name: "gate", scope: !1939, file: !263, line: 125, baseType: !1944, size: 64, offset: 128)
!1944 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1945, size: 64)
!1945 = !DISubroutineType(types: !1946)
!1946 = !{!902}
!1947 = !DIDerivedType(tag: DW_TAG_member, name: "execute", scope: !1939, file: !263, line: 130, baseType: !1948, size: 64, offset: 192)
!1948 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1949, size: 64)
!1949 = !DISubroutineType(types: !1950)
!1950 = !{!7}
!1951 = !DIDerivedType(tag: DW_TAG_member, name: "sub", scope: !1939, file: !263, line: 133, baseType: !1952, size: 64, offset: 256)
!1952 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1939, size: 64)
!1953 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1939, file: !263, line: 136, baseType: !1952, size: 64, offset: 320)
!1954 = !DIDerivedType(tag: DW_TAG_member, name: "static_pass_number", scope: !1939, file: !263, line: 139, baseType: !789, size: 32, offset: 384)
!1955 = !DIDerivedType(tag: DW_TAG_member, name: "tv_id", scope: !1939, file: !263, line: 143, baseType: !1956, size: 32, offset: 416)
!1956 = !DIDerivedType(tag: DW_TAG_typedef, name: "timevar_id_t", file: !270, line: 80, baseType: !269)
!1957 = !DIDerivedType(tag: DW_TAG_member, name: "properties_required", scope: !1939, file: !263, line: 146, baseType: !7, size: 32, offset: 448)
!1958 = !DIDerivedType(tag: DW_TAG_member, name: "properties_provided", scope: !1939, file: !263, line: 147, baseType: !7, size: 32, offset: 480)
!1959 = !DIDerivedType(tag: DW_TAG_member, name: "properties_destroyed", scope: !1939, file: !263, line: 148, baseType: !7, size: 32, offset: 512)
!1960 = !DIDerivedType(tag: DW_TAG_member, name: "todo_flags_start", scope: !1939, file: !263, line: 151, baseType: !7, size: 32, offset: 544)
!1961 = !DIDerivedType(tag: DW_TAG_member, name: "todo_flags_finish", scope: !1939, file: !263, line: 152, baseType: !7, size: 32, offset: 576)
!1962 = !DIGlobalVariableExpression(var: !1963, expr: !DIExpression())
!1963 = distinct !DIGlobalVariable(name: "global_types_full_escape", scope: !2, file: !3, line: 95, type: !737, isLocal: true, isDefinition: true)
!1964 = !DIGlobalVariableExpression(var: !1965, expr: !DIExpression())
!1965 = distinct !DIGlobalVariable(name: "uid_to_addressof_down_map", scope: !2, file: !3, line: 114, type: !1966, isLocal: true, isDefinition: true)
!1966 = !DIDerivedType(tag: DW_TAG_typedef, name: "splay_tree", file: !734, line: 128, baseType: !1967)
!1967 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1968, size: 64)
!1968 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "splay_tree_s", file: !734, line: 109, size: 448, elements: !1969)
!1969 = !{!1970, !1979, !1984, !1989, !1994, !1999, !2001}
!1970 = !DIDerivedType(tag: DW_TAG_member, name: "root", scope: !1968, file: !734, line: 111, baseType: !1971, size: 64)
!1971 = !DIDerivedType(tag: DW_TAG_typedef, name: "splay_tree_node", file: !734, line: 66, baseType: !1972)
!1972 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1973, size: 64)
!1973 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "splay_tree_node_s", file: !734, line: 96, size: 256, elements: !1974)
!1974 = !{!1975, !1976, !1977, !1978}
!1975 = !DIDerivedType(tag: DW_TAG_member, name: "key", scope: !1973, file: !734, line: 98, baseType: !733, size: 64)
!1976 = !DIDerivedType(tag: DW_TAG_member, name: "value", scope: !1973, file: !734, line: 101, baseType: !1921, size: 64, offset: 64)
!1977 = !DIDerivedType(tag: DW_TAG_member, name: "left", scope: !1973, file: !734, line: 104, baseType: !1971, size: 64, offset: 128)
!1978 = !DIDerivedType(tag: DW_TAG_member, name: "right", scope: !1973, file: !734, line: 105, baseType: !1971, size: 64, offset: 192)
!1979 = !DIDerivedType(tag: DW_TAG_member, name: "comp", scope: !1968, file: !734, line: 114, baseType: !1980, size: 64, offset: 64)
!1980 = !DIDerivedType(tag: DW_TAG_typedef, name: "splay_tree_compare_fn", file: !734, line: 70, baseType: !1981)
!1981 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1982, size: 64)
!1982 = !DISubroutineType(types: !1983)
!1983 = !{!789, !733, !733}
!1984 = !DIDerivedType(tag: DW_TAG_member, name: "delete_key", scope: !1968, file: !734, line: 117, baseType: !1985, size: 64, offset: 128)
!1985 = !DIDerivedType(tag: DW_TAG_typedef, name: "splay_tree_delete_key_fn", file: !734, line: 74, baseType: !1986)
!1986 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1987, size: 64)
!1987 = !DISubroutineType(types: !1988)
!1988 = !{null, !733}
!1989 = !DIDerivedType(tag: DW_TAG_member, name: "delete_value", scope: !1968, file: !734, line: 120, baseType: !1990, size: 64, offset: 192)
!1990 = !DIDerivedType(tag: DW_TAG_typedef, name: "splay_tree_delete_value_fn", file: !734, line: 78, baseType: !1991)
!1991 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1992, size: 64)
!1992 = !DISubroutineType(types: !1993)
!1993 = !{null, !1921}
!1994 = !DIDerivedType(tag: DW_TAG_member, name: "allocate", scope: !1968, file: !734, line: 123, baseType: !1995, size: 64, offset: 256)
!1995 = !DIDerivedType(tag: DW_TAG_typedef, name: "splay_tree_allocate_fn", file: !734, line: 87, baseType: !1996)
!1996 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1997, size: 64)
!1997 = !DISubroutineType(types: !1998)
!1998 = !{!794, !789, !794}
!1999 = !DIDerivedType(tag: DW_TAG_member, name: "deallocate", scope: !1968, file: !734, line: 124, baseType: !2000, size: 64, offset: 320)
!2000 = !DIDerivedType(tag: DW_TAG_typedef, name: "splay_tree_deallocate_fn", file: !734, line: 93, baseType: !1421)
!2001 = !DIDerivedType(tag: DW_TAG_member, name: "allocate_data", scope: !1968, file: !734, line: 125, baseType: !794, size: 64, offset: 384)
!2002 = !DIGlobalVariableExpression(var: !2003, expr: !DIExpression())
!2003 = distinct !DIGlobalVariable(name: "visited_stmts", scope: !2, file: !3, line: 133, type: !2004, isLocal: true, isDefinition: true)
!2004 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2005, size: 64)
!2005 = !DICompositeType(tag: DW_TAG_structure_type, name: "pointer_set_t", file: !6, line: 5199, flags: DIFlagFwdDecl)
!2006 = !DIGlobalVariableExpression(var: !2007, expr: !DIExpression())
!2007 = distinct !DIGlobalVariable(name: "type_to_canon_type", scope: !2, file: !3, line: 109, type: !1966, isLocal: true, isDefinition: true)
!2008 = !DIGlobalVariableExpression(var: !2009, expr: !DIExpression())
!2009 = distinct !DIGlobalVariable(name: "all_canon_types", scope: !2, file: !3, line: 106, type: !1966, isLocal: true, isDefinition: true)
!2010 = !DIGlobalVariableExpression(var: !2011, expr: !DIExpression())
!2011 = distinct !DIGlobalVariable(name: "uid_to_canon_type", scope: !2, file: !3, line: 102, type: !1966, isLocal: true, isDefinition: true)
!2012 = !DIGlobalVariableExpression(var: !2013, expr: !DIExpression())
!2013 = distinct !DIGlobalVariable(name: "global_types_seen", scope: !2, file: !3, line: 98, type: !737, isLocal: true, isDefinition: true)
!2014 = !DIGlobalVariableExpression(var: !2015, expr: !DIExpression())
!2015 = distinct !DIGlobalVariable(name: "global_types_exposed_parameter", scope: !2, file: !3, line: 94, type: !737, isLocal: true, isDefinition: true)
!2016 = !DIGlobalVariableExpression(var: !2017, expr: !DIExpression())
!2017 = distinct !DIGlobalVariable(name: "visited_nodes", scope: !2, file: !3, line: 129, type: !2004, isLocal: true, isDefinition: true)
!2018 = !DIGlobalVariableExpression(var: !2019, expr: !DIExpression())
!2019 = distinct !DIGlobalVariable(name: "ipa_obstack", scope: !2, file: !3, line: 135, type: !761, isLocal: true, isDefinition: true)
!2020 = !DIGlobalVariableExpression(var: !2021, expr: !DIExpression())
!2021 = distinct !DIGlobalVariable(name: "been_there_done_that", scope: !2, file: !3, line: 64, type: !737, isLocal: true, isDefinition: true)
!2022 = !DIGlobalVariableExpression(var: !2023, expr: !DIExpression())
!2023 = distinct !DIGlobalVariable(name: "bitmap_tmp", scope: !2, file: !3, line: 65, type: !737, isLocal: true, isDefinition: true)
!2024 = !DIGlobalVariableExpression(var: !2025, expr: !DIExpression())
!2025 = distinct !DIGlobalVariable(name: "uid_to_addressof_up_map", scope: !2, file: !3, line: 119, type: !1966, isLocal: true, isDefinition: true)
!2026 = !DIGlobalVariableExpression(var: !2027, expr: !DIExpression())
!2027 = distinct !DIGlobalVariable(name: "uid_to_subtype_map", scope: !2, file: !3, line: 123, type: !1966, isLocal: true, isDefinition: true)
!2028 = !{i32 7, !"Dwarf Version", i32 4}
!2029 = !{i32 2, !"Debug Info Version", i32 3}
!2030 = !{i32 1, !"wchar_size", i32 4}
!2031 = !{!"clang version 10.0.1 (https://github.com/svkeerthy/IR2Vec-LoopOptimizationFramework.git 561ac470e63b728263a0ac06ef987886ac648486)"}
!2032 = distinct !DISubprogram(name: "ipa_type_escape_star_count_of_interesting_type", scope: !3, file: !3, line: 336, type: !2033, scopeLine: 337, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2035)
!2033 = !DISubroutineType(types: !2034)
!2034 = !{!789, !803}
!2035 = !{}
!2036 = !DILocalVariable(name: "type", arg: 1, scope: !2032, file: !3, line: 336, type: !803)
!2037 = !DILocation(line: 336, column: 54, scope: !2032)
!2038 = !DILocalVariable(name: "count", scope: !2032, file: !3, line: 338, type: !789)
!2039 = !DILocation(line: 338, column: 7, scope: !2032)
!2040 = !DILocation(line: 340, column: 8, scope: !2041)
!2041 = distinct !DILexicalBlock(scope: !2032, file: !3, line: 340, column: 7)
!2042 = !DILocation(line: 340, column: 7, scope: !2032)
!2043 = !DILocation(line: 341, column: 5, scope: !2041)
!2044 = !DILocation(line: 342, column: 10, scope: !2032)
!2045 = !DILocation(line: 342, column: 8, scope: !2032)
!2046 = !DILocation(line: 343, column: 3, scope: !2032)
!2047 = !DILocation(line: 343, column: 10, scope: !2032)
!2048 = !DILocation(line: 345, column: 14, scope: !2049)
!2049 = distinct !DILexicalBlock(scope: !2032, file: !3, line: 344, column: 5)
!2050 = !DILocation(line: 345, column: 12, scope: !2049)
!2051 = !DILocation(line: 346, column: 12, scope: !2049)
!2052 = distinct !{!2052, !2046, !2053}
!2053 = !DILocation(line: 347, column: 5, scope: !2032)
!2054 = !DILocation(line: 350, column: 7, scope: !2055)
!2055 = distinct !DILexicalBlock(scope: !2032, file: !3, line: 350, column: 7)
!2056 = !DILocation(line: 350, column: 24, scope: !2055)
!2057 = !DILocation(line: 351, column: 7, scope: !2055)
!2058 = !DILocation(line: 351, column: 10, scope: !2055)
!2059 = !DILocation(line: 351, column: 27, scope: !2055)
!2060 = !DILocation(line: 352, column: 7, scope: !2055)
!2061 = !DILocation(line: 352, column: 10, scope: !2055)
!2062 = !DILocation(line: 352, column: 27, scope: !2055)
!2063 = !DILocation(line: 350, column: 7, scope: !2032)
!2064 = !DILocation(line: 353, column: 12, scope: !2055)
!2065 = !DILocation(line: 353, column: 5, scope: !2055)
!2066 = !DILocation(line: 355, column: 5, scope: !2055)
!2067 = !DILocation(line: 356, column: 1, scope: !2032)
!2068 = distinct !DISubprogram(name: "ipa_type_escape_star_count_of_interesting_or_array_type", scope: !3, file: !3, line: 365, type: !2033, scopeLine: 366, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2035)
!2069 = !DILocalVariable(name: "type", arg: 1, scope: !2068, file: !3, line: 365, type: !803)
!2070 = !DILocation(line: 365, column: 63, scope: !2068)
!2071 = !DILocalVariable(name: "count", scope: !2068, file: !3, line: 367, type: !789)
!2072 = !DILocation(line: 367, column: 7, scope: !2068)
!2073 = !DILocation(line: 369, column: 8, scope: !2074)
!2074 = distinct !DILexicalBlock(scope: !2068, file: !3, line: 369, column: 7)
!2075 = !DILocation(line: 369, column: 7, scope: !2068)
!2076 = !DILocation(line: 370, column: 5, scope: !2074)
!2077 = !DILocation(line: 371, column: 10, scope: !2068)
!2078 = !DILocation(line: 371, column: 8, scope: !2068)
!2079 = !DILocation(line: 372, column: 3, scope: !2068)
!2080 = !DILocation(line: 372, column: 10, scope: !2068)
!2081 = !DILocation(line: 372, column: 32, scope: !2068)
!2082 = !DILocation(line: 372, column: 35, scope: !2068)
!2083 = !DILocation(line: 372, column: 52, scope: !2068)
!2084 = !DILocation(line: 374, column: 14, scope: !2085)
!2085 = distinct !DILexicalBlock(scope: !2068, file: !3, line: 373, column: 5)
!2086 = !DILocation(line: 374, column: 12, scope: !2085)
!2087 = !DILocation(line: 375, column: 12, scope: !2085)
!2088 = distinct !{!2088, !2079, !2089}
!2089 = !DILocation(line: 376, column: 5, scope: !2068)
!2090 = !DILocation(line: 379, column: 7, scope: !2091)
!2091 = distinct !DILexicalBlock(scope: !2068, file: !3, line: 379, column: 7)
!2092 = !DILocation(line: 379, column: 24, scope: !2091)
!2093 = !DILocation(line: 380, column: 7, scope: !2091)
!2094 = !DILocation(line: 380, column: 10, scope: !2091)
!2095 = !DILocation(line: 380, column: 27, scope: !2091)
!2096 = !DILocation(line: 381, column: 7, scope: !2091)
!2097 = !DILocation(line: 381, column: 10, scope: !2091)
!2098 = !DILocation(line: 381, column: 27, scope: !2091)
!2099 = !DILocation(line: 379, column: 7, scope: !2068)
!2100 = !DILocation(line: 382, column: 12, scope: !2091)
!2101 = !DILocation(line: 382, column: 5, scope: !2091)
!2102 = !DILocation(line: 384, column: 5, scope: !2091)
!2103 = !DILocation(line: 385, column: 1, scope: !2068)
!2104 = distinct !DISubprogram(name: "ipa_type_escape_type_contained_p", scope: !3, file: !3, line: 393, type: !2105, scopeLine: 394, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2035)
!2105 = !DISubroutineType(types: !2106)
!2106 = !{!902, !803}
!2107 = !DILocalVariable(name: "type", arg: 1, scope: !2104, file: !3, line: 393, type: !803)
!2108 = !DILocation(line: 393, column: 40, scope: !2104)
!2109 = !DILocation(line: 395, column: 8, scope: !2110)
!2110 = distinct !DILexicalBlock(scope: !2104, file: !3, line: 395, column: 7)
!2111 = !DILocation(line: 395, column: 7, scope: !2104)
!2112 = !DILocation(line: 396, column: 5, scope: !2110)
!2113 = !DILocation(line: 397, column: 25, scope: !2104)
!2114 = !DILocation(line: 398, column: 24, scope: !2104)
!2115 = !DILocation(line: 398, column: 4, scope: !2104)
!2116 = !DILocation(line: 397, column: 11, scope: !2104)
!2117 = !DILocation(line: 397, column: 10, scope: !2104)
!2118 = !DILocation(line: 397, column: 3, scope: !2104)
!2119 = !DILocation(line: 399, column: 1, scope: !2104)
!2120 = distinct !DISubprogram(name: "get_canon_type_uid", scope: !3, file: !3, line: 322, type: !2121, scopeLine: 323, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2035)
!2121 = !DISubroutineType(types: !2122)
!2122 = !{!789, !803, !902, !902}
!2123 = !DILocalVariable(name: "type", arg: 1, scope: !2120, file: !3, line: 322, type: !803)
!2124 = !DILocation(line: 322, column: 26, scope: !2120)
!2125 = !DILocalVariable(name: "see_thru_ptrs", arg: 2, scope: !2120, file: !3, line: 322, type: !902)
!2126 = !DILocation(line: 322, column: 37, scope: !2120)
!2127 = !DILocalVariable(name: "see_thru_arrays", arg: 3, scope: !2120, file: !3, line: 322, type: !902)
!2128 = !DILocation(line: 322, column: 57, scope: !2120)
!2129 = !DILocation(line: 324, column: 26, scope: !2120)
!2130 = !DILocation(line: 324, column: 32, scope: !2120)
!2131 = !DILocation(line: 324, column: 47, scope: !2120)
!2132 = !DILocation(line: 324, column: 10, scope: !2120)
!2133 = !DILocation(line: 324, column: 8, scope: !2120)
!2134 = !DILocation(line: 325, column: 7, scope: !2135)
!2135 = distinct !DILexicalBlock(scope: !2120, file: !3, line: 325, column: 7)
!2136 = !DILocation(line: 325, column: 7, scope: !2120)
!2137 = !DILocation(line: 326, column: 12, scope: !2135)
!2138 = !DILocation(line: 326, column: 5, scope: !2135)
!2139 = !DILocation(line: 327, column: 8, scope: !2135)
!2140 = !DILocation(line: 328, column: 1, scope: !2120)
!2141 = distinct !DISubprogram(name: "ipa_type_escape_field_does_not_clobber_p", scope: !3, file: !3, line: 405, type: !2142, scopeLine: 406, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2035)
!2142 = !DISubroutineType(types: !2143)
!2143 = !{!902, !803, !803}
!2144 = !DILocalVariable(name: "record_type", arg: 1, scope: !2141, file: !3, line: 405, type: !803)
!2145 = !DILocation(line: 405, column: 48, scope: !2141)
!2146 = !DILocalVariable(name: "field_type", arg: 2, scope: !2141, file: !3, line: 405, type: !803)
!2147 = !DILocation(line: 405, column: 66, scope: !2141)
!2148 = !DILocalVariable(name: "result", scope: !2141, file: !3, line: 407, type: !1971)
!2149 = !DILocation(line: 407, column: 19, scope: !2141)
!2150 = !DILocalVariable(name: "uid", scope: !2141, file: !3, line: 408, type: !789)
!2151 = !DILocation(line: 408, column: 7, scope: !2141)
!2152 = !DILocation(line: 410, column: 8, scope: !2153)
!2153 = distinct !DILexicalBlock(scope: !2141, file: !3, line: 410, column: 7)
!2154 = !DILocation(line: 410, column: 7, scope: !2141)
!2155 = !DILocation(line: 411, column: 5, scope: !2153)
!2156 = !DILocation(line: 416, column: 17, scope: !2141)
!2157 = !DILocation(line: 416, column: 15, scope: !2141)
!2158 = !DILocation(line: 417, column: 16, scope: !2141)
!2159 = !DILocation(line: 417, column: 14, scope: !2141)
!2160 = !DILocation(line: 418, column: 3, scope: !2141)
!2161 = !DILocation(line: 418, column: 10, scope: !2141)
!2162 = !DILocation(line: 420, column: 21, scope: !2163)
!2163 = distinct !DILexicalBlock(scope: !2141, file: !3, line: 419, column: 5)
!2164 = !DILocation(line: 420, column: 19, scope: !2163)
!2165 = !DILocation(line: 421, column: 11, scope: !2166)
!2166 = distinct !DILexicalBlock(scope: !2163, file: !3, line: 421, column: 11)
!2167 = !DILocation(line: 421, column: 11, scope: !2163)
!2168 = !DILocation(line: 422, column: 15, scope: !2166)
!2169 = !DILocation(line: 422, column: 13, scope: !2166)
!2170 = !DILocation(line: 422, column: 2, scope: !2166)
!2171 = !DILocation(line: 429, column: 6, scope: !2172)
!2172 = distinct !DILexicalBlock(scope: !2166, file: !3, line: 429, column: 6)
!2173 = !DILocation(line: 429, column: 29, scope: !2172)
!2174 = !DILocation(line: 430, column: 6, scope: !2172)
!2175 = !DILocation(line: 430, column: 9, scope: !2172)
!2176 = !DILocation(line: 430, column: 32, scope: !2172)
!2177 = !DILocation(line: 429, column: 6, scope: !2166)
!2178 = !DILocation(line: 432, column: 6, scope: !2179)
!2179 = distinct !DILexicalBlock(scope: !2172, file: !3, line: 431, column: 4)
!2180 = !DILocation(line: 432, column: 13, scope: !2179)
!2181 = !DILocation(line: 433, column: 22, scope: !2179)
!2182 = !DILocation(line: 433, column: 20, scope: !2179)
!2183 = distinct !{!2183, !2178, !2181}
!2184 = !DILocation(line: 434, column: 6, scope: !2179)
!2185 = !DILocation(line: 437, column: 4, scope: !2172)
!2186 = distinct !{!2186, !2160, !2187}
!2187 = !DILocation(line: 438, column: 5, scope: !2141)
!2188 = !DILocation(line: 440, column: 33, scope: !2141)
!2189 = !DILocation(line: 440, column: 17, scope: !2141)
!2190 = !DILocation(line: 440, column: 15, scope: !2141)
!2191 = !DILocation(line: 443, column: 42, scope: !2192)
!2192 = distinct !DILexicalBlock(scope: !2141, file: !3, line: 443, column: 7)
!2193 = !DILocation(line: 443, column: 8, scope: !2192)
!2194 = !DILocation(line: 443, column: 7, scope: !2141)
!2195 = !DILocation(line: 444, column: 5, scope: !2192)
!2196 = !DILocation(line: 446, column: 9, scope: !2141)
!2197 = !DILocation(line: 446, column: 7, scope: !2141)
!2198 = !DILocation(line: 447, column: 31, scope: !2141)
!2199 = !DILocation(line: 447, column: 75, scope: !2141)
!2200 = !DILocation(line: 447, column: 58, scope: !2141)
!2201 = !DILocation(line: 447, column: 12, scope: !2141)
!2202 = !DILocation(line: 447, column: 10, scope: !2141)
!2203 = !DILocation(line: 449, column: 7, scope: !2204)
!2204 = distinct !DILexicalBlock(scope: !2141, file: !3, line: 449, column: 7)
!2205 = !DILocation(line: 449, column: 7, scope: !2141)
!2206 = !DILocalVariable(name: "field_type_map", scope: !2207, file: !3, line: 451, type: !737)
!2207 = distinct !DILexicalBlock(scope: !2204, file: !3, line: 450, column: 5)
!2208 = !DILocation(line: 451, column: 14, scope: !2207)
!2209 = !DILocation(line: 451, column: 40, scope: !2207)
!2210 = !DILocation(line: 451, column: 48, scope: !2207)
!2211 = !DILocation(line: 451, column: 31, scope: !2207)
!2212 = !DILocation(line: 452, column: 33, scope: !2207)
!2213 = !DILocation(line: 452, column: 13, scope: !2207)
!2214 = !DILocation(line: 452, column: 11, scope: !2207)
!2215 = !DILocation(line: 455, column: 29, scope: !2207)
!2216 = !DILocation(line: 455, column: 45, scope: !2207)
!2217 = !DILocation(line: 455, column: 15, scope: !2207)
!2218 = !DILocation(line: 455, column: 14, scope: !2207)
!2219 = !DILocation(line: 455, column: 7, scope: !2207)
!2220 = !DILocation(line: 459, column: 5, scope: !2204)
!2221 = !DILocation(line: 460, column: 1, scope: !2141)
!2222 = distinct !DISubprogram(name: "get_canon_type", scope: !3, file: !3, line: 295, type: !2223, scopeLine: 296, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2035)
!2223 = !DISubroutineType(types: !2224)
!2224 = !{!803, !803, !902, !902}
!2225 = !DILocalVariable(name: "type", arg: 1, scope: !2222, file: !3, line: 295, type: !803)
!2226 = !DILocation(line: 295, column: 22, scope: !2222)
!2227 = !DILocalVariable(name: "see_thru_ptrs", arg: 2, scope: !2222, file: !3, line: 295, type: !902)
!2228 = !DILocation(line: 295, column: 33, scope: !2222)
!2229 = !DILocalVariable(name: "see_thru_arrays", arg: 3, scope: !2222, file: !3, line: 295, type: !902)
!2230 = !DILocation(line: 295, column: 53, scope: !2222)
!2231 = !DILocalVariable(name: "result", scope: !2222, file: !3, line: 297, type: !1971)
!2232 = !DILocation(line: 297, column: 19, scope: !2222)
!2233 = !DILocation(line: 299, column: 8, scope: !2234)
!2234 = distinct !DILexicalBlock(scope: !2222, file: !3, line: 299, column: 7)
!2235 = !DILocation(line: 299, column: 13, scope: !2234)
!2236 = !DILocation(line: 299, column: 35, scope: !2234)
!2237 = !DILocation(line: 299, column: 17, scope: !2234)
!2238 = !DILocation(line: 299, column: 7, scope: !2222)
!2239 = !DILocation(line: 300, column: 5, scope: !2234)
!2240 = !DILocation(line: 302, column: 10, scope: !2222)
!2241 = !DILocation(line: 302, column: 8, scope: !2222)
!2242 = !DILocation(line: 303, column: 7, scope: !2243)
!2243 = distinct !DILexicalBlock(scope: !2222, file: !3, line: 303, column: 7)
!2244 = !DILocation(line: 303, column: 7, scope: !2222)
!2245 = !DILocation(line: 304, column: 5, scope: !2243)
!2246 = !DILocation(line: 304, column: 12, scope: !2243)
!2247 = !DILocation(line: 304, column: 34, scope: !2243)
!2248 = !DILocation(line: 304, column: 37, scope: !2243)
!2249 = !DILocation(line: 304, column: 54, scope: !2243)
!2250 = !DILocation(line: 305, column: 14, scope: !2243)
!2251 = !DILocation(line: 305, column: 12, scope: !2243)
!2252 = distinct !{!2252, !2245, !2250}
!2253 = !DILocation(line: 307, column: 12, scope: !2254)
!2254 = distinct !DILexicalBlock(scope: !2243, file: !3, line: 307, column: 12)
!2255 = !DILocation(line: 307, column: 12, scope: !2243)
!2256 = !DILocation(line: 308, column: 5, scope: !2254)
!2257 = !DILocation(line: 308, column: 12, scope: !2254)
!2258 = !DILocation(line: 309, column: 9, scope: !2254)
!2259 = !DILocation(line: 309, column: 7, scope: !2254)
!2260 = distinct !{!2260, !2256, !2258}
!2261 = !DILocation(line: 311, column: 31, scope: !2222)
!2262 = !DILocation(line: 311, column: 68, scope: !2222)
!2263 = !DILocation(line: 311, column: 51, scope: !2222)
!2264 = !DILocation(line: 311, column: 12, scope: !2222)
!2265 = !DILocation(line: 311, column: 10, scope: !2222)
!2266 = !DILocation(line: 313, column: 7, scope: !2267)
!2267 = distinct !DILexicalBlock(scope: !2222, file: !3, line: 313, column: 7)
!2268 = !DILocation(line: 313, column: 14, scope: !2267)
!2269 = !DILocation(line: 313, column: 7, scope: !2222)
!2270 = !DILocation(line: 314, column: 34, scope: !2267)
!2271 = !DILocation(line: 314, column: 12, scope: !2267)
!2272 = !DILocation(line: 314, column: 5, scope: !2267)
!2273 = !DILocation(line: 315, column: 22, scope: !2267)
!2274 = !DILocation(line: 315, column: 30, scope: !2267)
!2275 = !DILocation(line: 315, column: 15, scope: !2267)
!2276 = !DILocation(line: 315, column: 8, scope: !2267)
!2277 = !DILocation(line: 316, column: 1, scope: !2222)
!2278 = distinct !DISubprogram(name: "is_array_access_through_pointer_and_index", scope: !3, file: !3, line: 905, type: !2279, scopeLine: 908, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2035)
!2279 = !DISubroutineType(types: !2280)
!2280 = !{!902, !5, !803, !803, !1130, !1130, !2281}
!2281 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1096, size: 64)
!2282 = !DILocalVariable(name: "code", arg: 1, scope: !2278, file: !3, line: 905, type: !5)
!2283 = !DILocation(line: 905, column: 59, scope: !2278)
!2284 = !DILocalVariable(name: "op0", arg: 2, scope: !2278, file: !3, line: 905, type: !803)
!2285 = !DILocation(line: 905, column: 70, scope: !2278)
!2286 = !DILocalVariable(name: "op1", arg: 3, scope: !2278, file: !3, line: 906, type: !803)
!2287 = !DILocation(line: 906, column: 14, scope: !2278)
!2288 = !DILocalVariable(name: "base", arg: 4, scope: !2278, file: !3, line: 906, type: !1130)
!2289 = !DILocation(line: 906, column: 25, scope: !2278)
!2290 = !DILocalVariable(name: "offset", arg: 5, scope: !2278, file: !3, line: 906, type: !1130)
!2291 = !DILocation(line: 906, column: 37, scope: !2278)
!2292 = !DILocalVariable(name: "offset_cast_stmt", arg: 6, scope: !2278, file: !3, line: 907, type: !2281)
!2293 = !DILocation(line: 907, column: 17, scope: !2278)
!2294 = !DILocalVariable(name: "before_cast", scope: !2278, file: !3, line: 909, type: !803)
!2295 = !DILocation(line: 909, column: 8, scope: !2278)
!2296 = !DILocalVariable(name: "before_cast_def_stmt", scope: !2278, file: !3, line: 910, type: !1096)
!2297 = !DILocation(line: 910, column: 10, scope: !2278)
!2298 = !DILocalVariable(name: "op0_cast", scope: !2278, file: !3, line: 911, type: !1923)
!2299 = !DILocation(line: 911, column: 10, scope: !2278)
!2300 = !DILocalVariable(name: "op1_cast", scope: !2278, file: !3, line: 911, type: !1923)
!2301 = !DILocation(line: 911, column: 20, scope: !2278)
!2302 = !DILocation(line: 913, column: 4, scope: !2278)
!2303 = !DILocation(line: 913, column: 9, scope: !2278)
!2304 = !DILocation(line: 914, column: 4, scope: !2278)
!2305 = !DILocation(line: 914, column: 11, scope: !2278)
!2306 = !DILocation(line: 915, column: 4, scope: !2278)
!2307 = !DILocation(line: 915, column: 21, scope: !2278)
!2308 = !DILocation(line: 918, column: 7, scope: !2309)
!2309 = distinct !DILexicalBlock(scope: !2278, file: !3, line: 918, column: 7)
!2310 = !DILocation(line: 918, column: 12, scope: !2309)
!2311 = !DILocation(line: 918, column: 7, scope: !2278)
!2312 = !DILocalVariable(name: "op0type", scope: !2313, file: !3, line: 920, type: !803)
!2313 = distinct !DILexicalBlock(scope: !2309, file: !3, line: 919, column: 5)
!2314 = !DILocation(line: 920, column: 12, scope: !2313)
!2315 = !DILocation(line: 920, column: 22, scope: !2313)
!2316 = !DILocalVariable(name: "op1type", scope: !2313, file: !3, line: 921, type: !803)
!2317 = !DILocation(line: 921, column: 12, scope: !2313)
!2318 = !DILocation(line: 921, column: 22, scope: !2313)
!2319 = !DILocation(line: 924, column: 11, scope: !2320)
!2320 = distinct !DILexicalBlock(scope: !2313, file: !3, line: 924, column: 11)
!2321 = !DILocation(line: 924, column: 36, scope: !2320)
!2322 = !DILocation(line: 924, column: 39, scope: !2320)
!2323 = !DILocation(line: 924, column: 11, scope: !2313)
!2324 = !DILocation(line: 926, column: 12, scope: !2325)
!2325 = distinct !DILexicalBlock(scope: !2320, file: !3, line: 925, column: 2)
!2326 = !DILocation(line: 926, column: 5, scope: !2325)
!2327 = !DILocation(line: 926, column: 10, scope: !2325)
!2328 = !DILocation(line: 927, column: 14, scope: !2325)
!2329 = !DILocation(line: 927, column: 5, scope: !2325)
!2330 = !DILocation(line: 927, column: 12, scope: !2325)
!2331 = !DILocation(line: 928, column: 2, scope: !2325)
!2332 = !DILocation(line: 929, column: 16, scope: !2333)
!2333 = distinct !DILexicalBlock(scope: !2320, file: !3, line: 929, column: 16)
!2334 = !DILocation(line: 929, column: 41, scope: !2333)
!2335 = !DILocation(line: 929, column: 44, scope: !2333)
!2336 = !DILocation(line: 929, column: 16, scope: !2320)
!2337 = !DILocation(line: 931, column: 12, scope: !2338)
!2338 = distinct !DILexicalBlock(scope: !2333, file: !3, line: 930, column: 2)
!2339 = !DILocation(line: 931, column: 5, scope: !2338)
!2340 = !DILocation(line: 931, column: 10, scope: !2338)
!2341 = !DILocation(line: 932, column: 14, scope: !2338)
!2342 = !DILocation(line: 932, column: 5, scope: !2338)
!2343 = !DILocation(line: 932, column: 12, scope: !2338)
!2344 = !DILocation(line: 933, column: 2, scope: !2338)
!2345 = !DILocation(line: 935, column: 2, scope: !2333)
!2346 = !DILocation(line: 936, column: 5, scope: !2313)
!2347 = !DILocation(line: 940, column: 32, scope: !2348)
!2348 = distinct !DILexicalBlock(scope: !2309, file: !3, line: 938, column: 5)
!2349 = !DILocation(line: 940, column: 37, scope: !2348)
!2350 = !DILocation(line: 940, column: 16, scope: !2348)
!2351 = !DILocation(line: 940, column: 21, scope: !2348)
!2352 = !DILocation(line: 941, column: 32, scope: !2348)
!2353 = !DILocation(line: 941, column: 37, scope: !2348)
!2354 = !DILocation(line: 941, column: 16, scope: !2348)
!2355 = !DILocation(line: 941, column: 21, scope: !2348)
!2356 = !DILocation(line: 943, column: 23, scope: !2348)
!2357 = !DILocation(line: 943, column: 21, scope: !2348)
!2358 = !DILocation(line: 944, column: 28, scope: !2348)
!2359 = !DILocation(line: 944, column: 58, scope: !2348)
!2360 = !DILocation(line: 944, column: 7, scope: !2348)
!2361 = !DILocation(line: 946, column: 28, scope: !2348)
!2362 = !DILocation(line: 946, column: 7, scope: !2348)
!2363 = !DILocation(line: 948, column: 23, scope: !2348)
!2364 = !DILocation(line: 948, column: 21, scope: !2348)
!2365 = !DILocation(line: 949, column: 28, scope: !2348)
!2366 = !DILocation(line: 949, column: 58, scope: !2348)
!2367 = !DILocation(line: 949, column: 7, scope: !2348)
!2368 = !DILocation(line: 951, column: 28, scope: !2348)
!2369 = !DILocation(line: 951, column: 7, scope: !2348)
!2370 = !DILocation(line: 953, column: 20, scope: !2371)
!2371 = distinct !DILexicalBlock(scope: !2348, file: !3, line: 953, column: 11)
!2372 = !DILocation(line: 953, column: 25, scope: !2371)
!2373 = !DILocation(line: 953, column: 30, scope: !2371)
!2374 = !DILocation(line: 953, column: 42, scope: !2371)
!2375 = !DILocation(line: 953, column: 47, scope: !2371)
!2376 = !DILocation(line: 953, column: 11, scope: !2348)
!2377 = !DILocation(line: 955, column: 12, scope: !2378)
!2378 = distinct !DILexicalBlock(scope: !2371, file: !3, line: 954, column: 2)
!2379 = !DILocation(line: 955, column: 5, scope: !2378)
!2380 = !DILocation(line: 955, column: 10, scope: !2378)
!2381 = !DILocation(line: 956, column: 14, scope: !2378)
!2382 = !DILocation(line: 956, column: 5, scope: !2378)
!2383 = !DILocation(line: 956, column: 12, scope: !2378)
!2384 = !DILocation(line: 957, column: 33, scope: !2378)
!2385 = !DILocation(line: 957, column: 5, scope: !2378)
!2386 = !DILocation(line: 957, column: 22, scope: !2378)
!2387 = !DILocation(line: 958, column: 2, scope: !2378)
!2388 = !DILocation(line: 959, column: 25, scope: !2389)
!2389 = distinct !DILexicalBlock(scope: !2371, file: !3, line: 959, column: 16)
!2390 = !DILocation(line: 959, column: 30, scope: !2389)
!2391 = !DILocation(line: 959, column: 35, scope: !2389)
!2392 = !DILocation(line: 959, column: 47, scope: !2389)
!2393 = !DILocation(line: 959, column: 52, scope: !2389)
!2394 = !DILocation(line: 959, column: 16, scope: !2371)
!2395 = !DILocation(line: 961, column: 12, scope: !2396)
!2396 = distinct !DILexicalBlock(scope: !2389, file: !3, line: 960, column: 2)
!2397 = !DILocation(line: 961, column: 5, scope: !2396)
!2398 = !DILocation(line: 961, column: 10, scope: !2396)
!2399 = !DILocation(line: 962, column: 14, scope: !2396)
!2400 = !DILocation(line: 962, column: 5, scope: !2396)
!2401 = !DILocation(line: 962, column: 12, scope: !2396)
!2402 = !DILocation(line: 963, column: 33, scope: !2396)
!2403 = !DILocation(line: 963, column: 5, scope: !2396)
!2404 = !DILocation(line: 963, column: 22, scope: !2396)
!2405 = !DILocation(line: 964, column: 2, scope: !2396)
!2406 = !DILocation(line: 966, column: 2, scope: !2389)
!2407 = !DILocation(line: 973, column: 8, scope: !2408)
!2408 = distinct !DILexicalBlock(scope: !2278, file: !3, line: 973, column: 7)
!2409 = !DILocation(line: 973, column: 7, scope: !2408)
!2410 = !DILocation(line: 973, column: 7, scope: !2278)
!2411 = !DILocation(line: 975, column: 21, scope: !2412)
!2412 = distinct !DILexicalBlock(scope: !2408, file: !3, line: 974, column: 5)
!2413 = !DILocation(line: 975, column: 19, scope: !2412)
!2414 = !DILocation(line: 976, column: 12, scope: !2415)
!2415 = distinct !DILexicalBlock(scope: !2412, file: !3, line: 976, column: 11)
!2416 = !DILocation(line: 976, column: 11, scope: !2412)
!2417 = !DILocation(line: 977, column: 2, scope: !2415)
!2418 = !DILocation(line: 979, column: 11, scope: !2419)
!2419 = distinct !DILexicalBlock(scope: !2412, file: !3, line: 979, column: 11)
!2420 = !DILocation(line: 979, column: 11, scope: !2412)
!2421 = !DILocation(line: 980, column: 2, scope: !2419)
!2422 = !DILocation(line: 982, column: 30, scope: !2412)
!2423 = !DILocation(line: 982, column: 28, scope: !2412)
!2424 = !DILocation(line: 983, column: 12, scope: !2425)
!2425 = distinct !DILexicalBlock(scope: !2412, file: !3, line: 983, column: 11)
!2426 = !DILocation(line: 983, column: 11, scope: !2412)
!2427 = !DILocation(line: 984, column: 2, scope: !2425)
!2428 = !DILocation(line: 985, column: 5, scope: !2412)
!2429 = !DILocation(line: 987, column: 28, scope: !2408)
!2430 = !DILocation(line: 987, column: 26, scope: !2408)
!2431 = !DILocation(line: 992, column: 25, scope: !2432)
!2432 = distinct !DILexicalBlock(scope: !2278, file: !3, line: 992, column: 7)
!2433 = !DILocation(line: 992, column: 7, scope: !2432)
!2434 = !DILocation(line: 992, column: 7, scope: !2278)
!2435 = !DILocation(line: 995, column: 46, scope: !2436)
!2436 = distinct !DILexicalBlock(scope: !2437, file: !3, line: 995, column: 11)
!2437 = distinct !DILexicalBlock(scope: !2432, file: !3, line: 993, column: 5)
!2438 = !DILocation(line: 995, column: 27, scope: !2436)
!2439 = !DILocation(line: 995, column: 12, scope: !2436)
!2440 = !DILocation(line: 995, column: 11, scope: !2437)
!2441 = !DILocation(line: 996, column: 2, scope: !2436)
!2442 = !DILocation(line: 998, column: 35, scope: !2443)
!2443 = distinct !DILexicalBlock(scope: !2437, file: !3, line: 998, column: 11)
!2444 = !DILocation(line: 998, column: 11, scope: !2443)
!2445 = !DILocation(line: 998, column: 57, scope: !2443)
!2446 = !DILocation(line: 998, column: 11, scope: !2437)
!2447 = !DILocalVariable(name: "arg0", scope: !2448, file: !3, line: 1000, type: !803)
!2448 = distinct !DILexicalBlock(scope: !2443, file: !3, line: 999, column: 2)
!2449 = !DILocation(line: 1000, column: 9, scope: !2448)
!2450 = !DILocation(line: 1000, column: 36, scope: !2448)
!2451 = !DILocation(line: 1000, column: 16, scope: !2448)
!2452 = !DILocalVariable(name: "arg1", scope: !2448, file: !3, line: 1001, type: !803)
!2453 = !DILocation(line: 1001, column: 9, scope: !2448)
!2454 = !DILocation(line: 1001, column: 36, scope: !2448)
!2455 = !DILocation(line: 1001, column: 16, scope: !2448)
!2456 = !DILocalVariable(name: "unit_size", scope: !2448, file: !3, line: 1002, type: !803)
!2457 = !DILocation(line: 1002, column: 9, scope: !2448)
!2458 = !DILocation(line: 1003, column: 6, scope: !2448)
!2459 = !DILocation(line: 1005, column: 10, scope: !2460)
!2460 = distinct !DILexicalBlock(scope: !2448, file: !3, line: 1005, column: 8)
!2461 = !DILocation(line: 1006, column: 8, scope: !2460)
!2462 = !DILocation(line: 1006, column: 29, scope: !2460)
!2463 = !DILocation(line: 1006, column: 35, scope: !2460)
!2464 = !DILocation(line: 1006, column: 11, scope: !2460)
!2465 = !DILocation(line: 1007, column: 8, scope: !2460)
!2466 = !DILocation(line: 1007, column: 13, scope: !2460)
!2467 = !DILocation(line: 1008, column: 8, scope: !2460)
!2468 = !DILocation(line: 1008, column: 29, scope: !2460)
!2469 = !DILocation(line: 1008, column: 35, scope: !2460)
!2470 = !DILocation(line: 1008, column: 11, scope: !2460)
!2471 = !DILocation(line: 1005, column: 8, scope: !2448)
!2472 = !DILocation(line: 1009, column: 6, scope: !2460)
!2473 = !DILocation(line: 1010, column: 2, scope: !2448)
!2474 = !DILocation(line: 1012, column: 2, scope: !2443)
!2475 = !DILocation(line: 1013, column: 5, scope: !2437)
!2476 = !DILocation(line: 1015, column: 5, scope: !2432)
!2477 = !DILocation(line: 1021, column: 3, scope: !2278)
!2478 = !DILocation(line: 1022, column: 1, scope: !2278)
!2479 = distinct !DISubprogram(name: "is_cast_from_non_pointer", scope: !3, file: !3, line: 802, type: !2480, scopeLine: 803, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2035)
!2480 = !DISubroutineType(types: !2481)
!2481 = !{!902, !803, !1096, !794}
!2482 = !DILocalVariable(name: "var", arg: 1, scope: !2479, file: !3, line: 802, type: !803)
!2483 = !DILocation(line: 802, column: 32, scope: !2479)
!2484 = !DILocalVariable(name: "def_stmt", arg: 2, scope: !2479, file: !3, line: 802, type: !1096)
!2485 = !DILocation(line: 802, column: 44, scope: !2479)
!2486 = !DILocalVariable(name: "data", arg: 3, scope: !2479, file: !3, line: 802, type: !794)
!2487 = !DILocation(line: 802, column: 60, scope: !2479)
!2488 = !DILocation(line: 804, column: 8, scope: !2489)
!2489 = distinct !DILexicalBlock(scope: !2479, file: !3, line: 804, column: 7)
!2490 = !DILocation(line: 804, column: 17, scope: !2489)
!2491 = !DILocation(line: 804, column: 21, scope: !2489)
!2492 = !DILocation(line: 804, column: 7, scope: !2479)
!2493 = !DILocation(line: 805, column: 5, scope: !2489)
!2494 = !DILocation(line: 807, column: 20, scope: !2495)
!2495 = distinct !DILexicalBlock(scope: !2479, file: !3, line: 807, column: 7)
!2496 = !DILocation(line: 807, column: 7, scope: !2495)
!2497 = !DILocation(line: 807, column: 30, scope: !2495)
!2498 = !DILocation(line: 807, column: 7, scope: !2479)
!2499 = !DILocation(line: 808, column: 5, scope: !2495)
!2500 = !DILocation(line: 810, column: 7, scope: !2501)
!2501 = distinct !DILexicalBlock(scope: !2479, file: !3, line: 810, column: 7)
!2502 = !DILocation(line: 810, column: 7, scope: !2479)
!2503 = !DILocation(line: 811, column: 7, scope: !2501)
!2504 = !DILocation(line: 813, column: 25, scope: !2505)
!2505 = distinct !DILexicalBlock(scope: !2479, file: !3, line: 813, column: 7)
!2506 = !DILocation(line: 813, column: 7, scope: !2505)
!2507 = !DILocation(line: 813, column: 7, scope: !2479)
!2508 = !DILocalVariable(name: "use_p", scope: !2509, file: !3, line: 815, type: !1930)
!2509 = distinct !DILexicalBlock(scope: !2505, file: !3, line: 814, column: 5)
!2510 = !DILocation(line: 815, column: 21, scope: !2509)
!2511 = !DILocalVariable(name: "iter", scope: !2509, file: !3, line: 816, type: !2512)
!2512 = !DIDerivedType(tag: DW_TAG_typedef, name: "ssa_op_iter", file: !485, line: 140, baseType: !2513)
!2513 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_operand_iterator_d", file: !485, line: 131, size: 320, elements: !2514)
!2514 = !{!2515, !2516, !2517, !2519, !2521, !2522, !2523}
!2515 = !DIDerivedType(tag: DW_TAG_member, name: "done", scope: !2513, file: !485, line: 133, baseType: !902, size: 8)
!2516 = !DIDerivedType(tag: DW_TAG_member, name: "iter_type", scope: !2513, file: !485, line: 134, baseType: !484, size: 32, offset: 32)
!2517 = !DIDerivedType(tag: DW_TAG_member, name: "defs", scope: !2513, file: !485, line: 135, baseType: !2518, size: 64, offset: 64)
!2518 = !DIDerivedType(tag: DW_TAG_typedef, name: "def_optype_p", file: !485, line: 42, baseType: !1125)
!2519 = !DIDerivedType(tag: DW_TAG_member, name: "uses", scope: !2513, file: !485, line: 136, baseType: !2520, size: 64, offset: 128)
!2520 = !DIDerivedType(tag: DW_TAG_typedef, name: "use_optype_p", file: !485, line: 50, baseType: !1132)
!2521 = !DIDerivedType(tag: DW_TAG_member, name: "phi_i", scope: !2513, file: !485, line: 137, baseType: !789, size: 32, offset: 192)
!2522 = !DIDerivedType(tag: DW_TAG_member, name: "num_phi", scope: !2513, file: !485, line: 138, baseType: !789, size: 32, offset: 224)
!2523 = !DIDerivedType(tag: DW_TAG_member, name: "phi_stmt", scope: !2513, file: !485, line: 139, baseType: !1096, size: 64, offset: 256)
!2524 = !DILocation(line: 816, column: 19, scope: !2509)
!2525 = !DILocalVariable(name: "cast", scope: !2509, file: !3, line: 817, type: !7)
!2526 = !DILocation(line: 817, column: 20, scope: !2509)
!2527 = !DILocation(line: 817, column: 48, scope: !2509)
!2528 = !DILocation(line: 817, column: 27, scope: !2509)
!2529 = !DILocation(line: 821, column: 12, scope: !2530)
!2530 = distinct !DILexicalBlock(scope: !2509, file: !3, line: 821, column: 11)
!2531 = !DILocation(line: 821, column: 17, scope: !2530)
!2532 = !DILocation(line: 821, column: 34, scope: !2530)
!2533 = !DILocation(line: 822, column: 4, scope: !2530)
!2534 = !DILocation(line: 822, column: 8, scope: !2530)
!2535 = !DILocation(line: 822, column: 13, scope: !2530)
!2536 = !DILocation(line: 822, column: 33, scope: !2530)
!2537 = !DILocation(line: 821, column: 11, scope: !2509)
!2538 = !DILocation(line: 824, column: 29, scope: !2539)
!2539 = distinct !DILexicalBlock(scope: !2530, file: !3, line: 823, column: 2)
!2540 = !DILocation(line: 824, column: 15, scope: !2539)
!2541 = !DILocation(line: 824, column: 5, scope: !2539)
!2542 = !DILocation(line: 824, column: 22, scope: !2539)
!2543 = !DILocation(line: 824, column: 27, scope: !2539)
!2544 = !DILocation(line: 825, column: 15, scope: !2539)
!2545 = !DILocation(line: 825, column: 5, scope: !2539)
!2546 = !DILocation(line: 825, column: 22, scope: !2539)
!2547 = !DILocation(line: 825, column: 26, scope: !2539)
!2548 = !DILocation(line: 827, column: 4, scope: !2549)
!2549 = distinct !DILexicalBlock(scope: !2539, file: !3, line: 827, column: 4)
!2550 = !DILocation(line: 827, column: 4, scope: !2551)
!2551 = distinct !DILexicalBlock(scope: !2549, file: !3, line: 827, column: 4)
!2552 = !DILocation(line: 829, column: 29, scope: !2553)
!2553 = distinct !DILexicalBlock(scope: !2551, file: !3, line: 828, column: 6)
!2554 = !DILocation(line: 830, column: 34, scope: !2553)
!2555 = !DILocation(line: 829, column: 8, scope: !2553)
!2556 = !DILocation(line: 831, column: 22, scope: !2557)
!2557 = distinct !DILexicalBlock(scope: !2553, file: !3, line: 831, column: 12)
!2558 = !DILocation(line: 831, column: 13, scope: !2557)
!2559 = !DILocation(line: 831, column: 29, scope: !2557)
!2560 = !DILocation(line: 831, column: 34, scope: !2557)
!2561 = !DILocation(line: 831, column: 12, scope: !2553)
!2562 = !DILocation(line: 832, column: 3, scope: !2557)
!2563 = !DILocation(line: 833, column: 6, scope: !2553)
!2564 = distinct !{!2564, !2548, !2565}
!2565 = !DILocation(line: 833, column: 6, scope: !2549)
!2566 = !DILocation(line: 834, column: 2, scope: !2539)
!2567 = !DILocation(line: 836, column: 17, scope: !2568)
!2568 = distinct !DILexicalBlock(scope: !2530, file: !3, line: 836, column: 16)
!2569 = !DILocation(line: 836, column: 22, scope: !2568)
!2570 = !DILocation(line: 836, column: 36, scope: !2568)
!2571 = !DILocation(line: 837, column: 4, scope: !2568)
!2572 = !DILocation(line: 837, column: 8, scope: !2568)
!2573 = !DILocation(line: 837, column: 13, scope: !2568)
!2574 = !DILocation(line: 837, column: 24, scope: !2568)
!2575 = !DILocation(line: 838, column: 4, scope: !2568)
!2576 = !DILocation(line: 838, column: 8, scope: !2568)
!2577 = !DILocation(line: 838, column: 13, scope: !2568)
!2578 = !DILocation(line: 838, column: 22, scope: !2568)
!2579 = !DILocation(line: 839, column: 4, scope: !2568)
!2580 = !DILocation(line: 839, column: 8, scope: !2568)
!2581 = !DILocation(line: 839, column: 13, scope: !2568)
!2582 = !DILocation(line: 839, column: 27, scope: !2568)
!2583 = !DILocation(line: 840, column: 4, scope: !2568)
!2584 = !DILocation(line: 840, column: 8, scope: !2568)
!2585 = !DILocation(line: 840, column: 13, scope: !2568)
!2586 = !DILocation(line: 840, column: 31, scope: !2568)
!2587 = !DILocation(line: 836, column: 16, scope: !2530)
!2588 = !DILocation(line: 842, column: 4, scope: !2589)
!2589 = distinct !DILexicalBlock(scope: !2590, file: !3, line: 842, column: 4)
!2590 = distinct !DILexicalBlock(scope: !2568, file: !3, line: 841, column: 2)
!2591 = !DILocation(line: 842, column: 4, scope: !2592)
!2592 = distinct !DILexicalBlock(scope: !2589, file: !3, line: 842, column: 4)
!2593 = !DILocation(line: 844, column: 29, scope: !2594)
!2594 = distinct !DILexicalBlock(scope: !2592, file: !3, line: 843, column: 6)
!2595 = !DILocation(line: 845, column: 34, scope: !2594)
!2596 = !DILocation(line: 844, column: 8, scope: !2594)
!2597 = !DILocation(line: 846, column: 22, scope: !2598)
!2598 = distinct !DILexicalBlock(scope: !2594, file: !3, line: 846, column: 12)
!2599 = !DILocation(line: 846, column: 13, scope: !2598)
!2600 = !DILocation(line: 846, column: 29, scope: !2598)
!2601 = !DILocation(line: 846, column: 34, scope: !2598)
!2602 = !DILocation(line: 846, column: 12, scope: !2594)
!2603 = !DILocation(line: 847, column: 3, scope: !2598)
!2604 = !DILocation(line: 848, column: 6, scope: !2594)
!2605 = distinct !{!2605, !2588, !2606}
!2606 = !DILocation(line: 848, column: 6, scope: !2589)
!2607 = !DILocation(line: 849, column: 2, scope: !2590)
!2608 = !DILocation(line: 852, column: 15, scope: !2568)
!2609 = !DILocation(line: 852, column: 5, scope: !2568)
!2610 = !DILocation(line: 852, column: 22, scope: !2568)
!2611 = !DILocation(line: 852, column: 27, scope: !2568)
!2612 = !DILocation(line: 853, column: 5, scope: !2509)
!2613 = !DILocation(line: 855, column: 17, scope: !2614)
!2614 = distinct !DILexicalBlock(scope: !2479, file: !3, line: 855, column: 7)
!2615 = !DILocation(line: 855, column: 8, scope: !2614)
!2616 = !DILocation(line: 855, column: 24, scope: !2614)
!2617 = !DILocation(line: 855, column: 29, scope: !2614)
!2618 = !DILocation(line: 855, column: 7, scope: !2479)
!2619 = !DILocation(line: 856, column: 5, scope: !2614)
!2620 = !DILocation(line: 858, column: 3, scope: !2479)
!2621 = !DILocation(line: 859, column: 1, scope: !2479)
!2622 = distinct !DISubprogram(name: "single_ssa_tree_operand", scope: !2623, file: !2623, line: 803, type: !2624, scopeLine: 804, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2035)
!2623 = !DIFile(filename: "./tree-flow-inline.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2624 = !DISubroutineType(types: !2625)
!2625 = !{!803, !1096, !789}
!2626 = !DILocalVariable(name: "stmt", arg: 1, scope: !2622, file: !2623, line: 803, type: !1096)
!2627 = !DILocation(line: 803, column: 33, scope: !2622)
!2628 = !DILocalVariable(name: "flags", arg: 2, scope: !2622, file: !2623, line: 803, type: !789)
!2629 = !DILocation(line: 803, column: 43, scope: !2622)
!2630 = !DILocalVariable(name: "var", scope: !2622, file: !2623, line: 805, type: !803)
!2631 = !DILocation(line: 805, column: 8, scope: !2622)
!2632 = !DILocalVariable(name: "iter", scope: !2622, file: !2623, line: 806, type: !2512)
!2633 = !DILocation(line: 806, column: 15, scope: !2622)
!2634 = !DILocation(line: 808, column: 35, scope: !2622)
!2635 = !DILocation(line: 808, column: 41, scope: !2622)
!2636 = !DILocation(line: 808, column: 9, scope: !2622)
!2637 = !DILocation(line: 808, column: 7, scope: !2622)
!2638 = !DILocation(line: 809, column: 7, scope: !2639)
!2639 = distinct !DILexicalBlock(scope: !2622, file: !2623, line: 809, column: 7)
!2640 = !DILocation(line: 809, column: 7, scope: !2622)
!2641 = !DILocation(line: 810, column: 5, scope: !2639)
!2642 = !DILocation(line: 811, column: 3, scope: !2622)
!2643 = !DILocation(line: 812, column: 7, scope: !2644)
!2644 = distinct !DILexicalBlock(scope: !2622, file: !2623, line: 812, column: 7)
!2645 = !DILocation(line: 812, column: 7, scope: !2622)
!2646 = !DILocation(line: 813, column: 12, scope: !2644)
!2647 = !DILocation(line: 813, column: 5, scope: !2644)
!2648 = !DILocation(line: 814, column: 3, scope: !2622)
!2649 = !DILocation(line: 815, column: 1, scope: !2622)
!2650 = distinct !DISubprogram(name: "is_gimple_assign", scope: !446, file: !446, line: 1677, type: !2651, scopeLine: 1678, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2035)
!2651 = !DISubroutineType(types: !2652)
!2652 = !{!902, !2653}
!2653 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_gimple", file: !738, line: 60, baseType: !1928)
!2654 = !DILocalVariable(name: "gs", arg: 1, scope: !2650, file: !446, line: 1677, type: !2653)
!2655 = !DILocation(line: 1677, column: 32, scope: !2650)
!2656 = !DILocation(line: 1679, column: 23, scope: !2650)
!2657 = !DILocation(line: 1679, column: 10, scope: !2650)
!2658 = !DILocation(line: 1679, column: 27, scope: !2650)
!2659 = !DILocation(line: 1679, column: 3, scope: !2650)
!2660 = distinct !DISubprogram(name: "gimple_assign_lhs", scope: !446, file: !446, line: 1694, type: !2661, scopeLine: 1695, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2035)
!2661 = !DISubroutineType(types: !2662)
!2662 = !{!803, !2653}
!2663 = !DILocalVariable(name: "gs", arg: 1, scope: !2660, file: !446, line: 1694, type: !2653)
!2664 = !DILocation(line: 1694, column: 33, scope: !2660)
!2665 = !DILocation(line: 1697, column: 21, scope: !2660)
!2666 = !DILocation(line: 1697, column: 10, scope: !2660)
!2667 = !DILocation(line: 1697, column: 3, scope: !2660)
!2668 = distinct !DISubprogram(name: "gimple_assign_rhs_code", scope: !446, file: !446, line: 1815, type: !2669, scopeLine: 1816, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2035)
!2669 = !DISubroutineType(types: !2670)
!2670 = !{!5, !2653}
!2671 = !DILocalVariable(name: "gs", arg: 1, scope: !2668, file: !446, line: 1815, type: !2653)
!2672 = !DILocation(line: 1815, column: 38, scope: !2668)
!2673 = !DILocalVariable(name: "code", scope: !2668, file: !446, line: 1817, type: !5)
!2674 = !DILocation(line: 1817, column: 18, scope: !2668)
!2675 = !DILocation(line: 1820, column: 28, scope: !2668)
!2676 = !DILocation(line: 1820, column: 10, scope: !2668)
!2677 = !DILocation(line: 1820, column: 8, scope: !2668)
!2678 = !DILocation(line: 1821, column: 29, scope: !2679)
!2679 = distinct !DILexicalBlock(scope: !2668, file: !446, line: 1821, column: 7)
!2680 = !DILocation(line: 1821, column: 7, scope: !2679)
!2681 = !DILocation(line: 1821, column: 35, scope: !2679)
!2682 = !DILocation(line: 1821, column: 7, scope: !2668)
!2683 = !DILocation(line: 1822, column: 12, scope: !2679)
!2684 = !DILocation(line: 1822, column: 10, scope: !2679)
!2685 = !DILocation(line: 1822, column: 5, scope: !2679)
!2686 = !DILocation(line: 1824, column: 10, scope: !2668)
!2687 = !DILocation(line: 1824, column: 3, scope: !2668)
!2688 = distinct !DISubprogram(name: "gimple_assign_rhs1", scope: !446, file: !446, line: 1727, type: !2661, scopeLine: 1728, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2035)
!2689 = !DILocalVariable(name: "gs", arg: 1, scope: !2688, file: !446, line: 1727, type: !2653)
!2690 = !DILocation(line: 1727, column: 34, scope: !2688)
!2691 = !DILocation(line: 1730, column: 21, scope: !2688)
!2692 = !DILocation(line: 1730, column: 10, scope: !2688)
!2693 = !DILocation(line: 1730, column: 3, scope: !2688)
!2694 = distinct !DISubprogram(name: "gimple_assign_rhs2", scope: !446, file: !446, line: 1759, type: !2661, scopeLine: 1760, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2035)
!2695 = !DILocalVariable(name: "gs", arg: 1, scope: !2694, file: !446, line: 1759, type: !2653)
!2696 = !DILocation(line: 1759, column: 34, scope: !2694)
!2697 = !DILocation(line: 1763, column: 23, scope: !2698)
!2698 = distinct !DILexicalBlock(scope: !2694, file: !446, line: 1763, column: 7)
!2699 = !DILocation(line: 1763, column: 7, scope: !2698)
!2700 = !DILocation(line: 1763, column: 27, scope: !2698)
!2701 = !DILocation(line: 1763, column: 7, scope: !2694)
!2702 = !DILocation(line: 1764, column: 23, scope: !2698)
!2703 = !DILocation(line: 1764, column: 12, scope: !2698)
!2704 = !DILocation(line: 1764, column: 5, scope: !2698)
!2705 = !DILocation(line: 1766, column: 5, scope: !2698)
!2706 = !DILocation(line: 1767, column: 1, scope: !2694)
!2707 = distinct !DISubprogram(name: "gate_type_escape_vars", scope: !3, file: !3, line: 2113, type: !1945, scopeLine: 2114, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2035)
!2708 = !DILocation(line: 2115, column: 11, scope: !2707)
!2709 = !DILocation(line: 2117, column: 4, scope: !2707)
!2710 = !DILocation(line: 2117, column: 9, scope: !2707)
!2711 = !DILocation(line: 2117, column: 20, scope: !2707)
!2712 = !DILocation(line: 2117, column: 23, scope: !2707)
!2713 = !DILocation(line: 2117, column: 7, scope: !2707)
!2714 = !DILocation(line: 0, scope: !2707)
!2715 = !DILocation(line: 2115, column: 10, scope: !2707)
!2716 = !DILocation(line: 2115, column: 3, scope: !2707)
!2717 = distinct !DISubprogram(name: "type_escape_execute", scope: !3, file: !3, line: 1966, type: !1949, scopeLine: 1967, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2035)
!2718 = !DILocalVariable(name: "node", scope: !2717, file: !3, line: 1968, type: !2719)
!2719 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2720, size: 64)
!2720 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cgraph_node", file: !555, line: 181, size: 2496, elements: !2721)
!2721 = !{!2722, !2723, !2746, !2747, !2748, !2749, !2750, !2751, !2752, !2753, !2754, !2755, !2756, !2757, !2758, !2759, !2760, !2761, !2839, !2861, !2871, !2875, !2901, !2910, !2911, !2912, !2913, !2914, !2915, !2916, !2917, !2918, !2919, !2920, !2921, !2922, !2923}
!2722 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !2720, file: !555, line: 182, baseType: !803, size: 64)
!2723 = !DIDerivedType(tag: DW_TAG_member, name: "callees", scope: !2720, file: !555, line: 183, baseType: !2724, size: 64, offset: 64)
!2724 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2725, size: 64)
!2725 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cgraph_edge", file: !555, line: 314, size: 768, elements: !2726)
!2726 = !{!2727, !2728, !2729, !2730, !2731, !2732, !2733, !2734, !2735, !2736, !2738, !2739, !2740, !2741, !2743, !2744, !2745}
!2727 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !2725, file: !555, line: 316, baseType: !1309, size: 64)
!2728 = !DIDerivedType(tag: DW_TAG_member, name: "caller", scope: !2725, file: !555, line: 317, baseType: !2719, size: 64, offset: 64)
!2729 = !DIDerivedType(tag: DW_TAG_member, name: "callee", scope: !2725, file: !555, line: 318, baseType: !2719, size: 64, offset: 128)
!2730 = !DIDerivedType(tag: DW_TAG_member, name: "prev_caller", scope: !2725, file: !555, line: 319, baseType: !2724, size: 64, offset: 192)
!2731 = !DIDerivedType(tag: DW_TAG_member, name: "next_caller", scope: !2725, file: !555, line: 320, baseType: !2724, size: 64, offset: 256)
!2732 = !DIDerivedType(tag: DW_TAG_member, name: "prev_callee", scope: !2725, file: !555, line: 321, baseType: !2724, size: 64, offset: 320)
!2733 = !DIDerivedType(tag: DW_TAG_member, name: "next_callee", scope: !2725, file: !555, line: 322, baseType: !2724, size: 64, offset: 384)
!2734 = !DIDerivedType(tag: DW_TAG_member, name: "call_stmt", scope: !2725, file: !555, line: 323, baseType: !1096, size: 64, offset: 448)
!2735 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !2725, file: !555, line: 324, baseType: !794, size: 64, offset: 512)
!2736 = !DIDerivedType(tag: DW_TAG_member, name: "inline_failed", scope: !2725, file: !555, line: 327, baseType: !2737, size: 32, offset: 576)
!2737 = !DIDerivedType(tag: DW_TAG_typedef, name: "cgraph_inline_failed_t", file: !555, line: 312, baseType: !554)
!2738 = !DIDerivedType(tag: DW_TAG_member, name: "lto_stmt_uid", scope: !2725, file: !555, line: 330, baseType: !7, size: 32, offset: 608)
!2739 = !DIDerivedType(tag: DW_TAG_member, name: "frequency", scope: !2725, file: !555, line: 334, baseType: !789, size: 32, offset: 640)
!2740 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !2725, file: !555, line: 336, baseType: !789, size: 32, offset: 672)
!2741 = !DIDerivedType(tag: DW_TAG_member, name: "loop_nest", scope: !2725, file: !555, line: 338, baseType: !2742, size: 16, offset: 704)
!2742 = !DIBasicType(name: "unsigned short", size: 16, encoding: DW_ATE_unsigned)
!2743 = !DIDerivedType(tag: DW_TAG_member, name: "indirect_call", scope: !2725, file: !555, line: 340, baseType: !7, size: 1, offset: 720, flags: DIFlagBitField, extraData: i64 720)
!2744 = !DIDerivedType(tag: DW_TAG_member, name: "call_stmt_cannot_inline_p", scope: !2725, file: !555, line: 342, baseType: !7, size: 1, offset: 721, flags: DIFlagBitField, extraData: i64 720)
!2745 = !DIDerivedType(tag: DW_TAG_member, name: "can_throw_external", scope: !2725, file: !555, line: 344, baseType: !7, size: 1, offset: 722, flags: DIFlagBitField, extraData: i64 720)
!2746 = !DIDerivedType(tag: DW_TAG_member, name: "callers", scope: !2720, file: !555, line: 184, baseType: !2724, size: 64, offset: 128)
!2747 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2720, file: !555, line: 185, baseType: !2719, size: 64, offset: 192)
!2748 = !DIDerivedType(tag: DW_TAG_member, name: "previous", scope: !2720, file: !555, line: 186, baseType: !2719, size: 64, offset: 256)
!2749 = !DIDerivedType(tag: DW_TAG_member, name: "origin", scope: !2720, file: !555, line: 188, baseType: !2719, size: 64, offset: 320)
!2750 = !DIDerivedType(tag: DW_TAG_member, name: "nested", scope: !2720, file: !555, line: 190, baseType: !2719, size: 64, offset: 384)
!2751 = !DIDerivedType(tag: DW_TAG_member, name: "next_nested", scope: !2720, file: !555, line: 192, baseType: !2719, size: 64, offset: 448)
!2752 = !DIDerivedType(tag: DW_TAG_member, name: "next_needed", scope: !2720, file: !555, line: 194, baseType: !2719, size: 64, offset: 512)
!2753 = !DIDerivedType(tag: DW_TAG_member, name: "next_sibling_clone", scope: !2720, file: !555, line: 196, baseType: !2719, size: 64, offset: 576)
!2754 = !DIDerivedType(tag: DW_TAG_member, name: "prev_sibling_clone", scope: !2720, file: !555, line: 197, baseType: !2719, size: 64, offset: 640)
!2755 = !DIDerivedType(tag: DW_TAG_member, name: "clones", scope: !2720, file: !555, line: 198, baseType: !2719, size: 64, offset: 704)
!2756 = !DIDerivedType(tag: DW_TAG_member, name: "clone_of", scope: !2720, file: !555, line: 199, baseType: !2719, size: 64, offset: 768)
!2757 = !DIDerivedType(tag: DW_TAG_member, name: "same_body", scope: !2720, file: !555, line: 202, baseType: !2719, size: 64, offset: 832)
!2758 = !DIDerivedType(tag: DW_TAG_member, name: "same_comdat_group", scope: !2720, file: !555, line: 204, baseType: !2719, size: 64, offset: 896)
!2759 = !DIDerivedType(tag: DW_TAG_member, name: "call_site_hash", scope: !2720, file: !555, line: 207, baseType: !1376, size: 64, offset: 960)
!2760 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !2720, file: !555, line: 209, baseType: !794, size: 64, offset: 1024)
!2761 = !DIDerivedType(tag: DW_TAG_member, name: "ipa_transforms_to_apply", scope: !2720, file: !555, line: 214, baseType: !2762, size: 64, offset: 1088)
!2762 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2763, size: 64)
!2763 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_ipa_opt_pass_heap", file: !1049, line: 177, baseType: !2764)
!2764 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_ipa_opt_pass_heap", file: !1049, line: 177, size: 128, elements: !2765)
!2765 = !{!2766}
!2766 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2764, file: !1049, line: 177, baseType: !2767, size: 128)
!2767 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_ipa_opt_pass_base", file: !1049, line: 176, baseType: !2768)
!2768 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_ipa_opt_pass_base", file: !1049, line: 176, size: 128, elements: !2769)
!2769 = !{!2770, !2771, !2772}
!2770 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2768, file: !1049, line: 176, baseType: !7, size: 32)
!2771 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2768, file: !1049, line: 176, baseType: !7, size: 32, offset: 32)
!2772 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2768, file: !1049, line: 176, baseType: !2773, size: 64, offset: 64)
!2773 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2774, size: 64, elements: !883)
!2774 = !DIDerivedType(tag: DW_TAG_typedef, name: "ipa_opt_pass", file: !1049, line: 174, baseType: !2775)
!2775 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2776, size: 64)
!2776 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ipa_opt_pass_d", file: !263, line: 173, size: 1152, elements: !2777)
!2777 = !{!2778, !2779, !2783, !2806, !2807, !2811, !2815, !2816, !2820}
!2778 = !DIDerivedType(tag: DW_TAG_member, name: "pass", scope: !2776, file: !263, line: 175, baseType: !1939, size: 640)
!2779 = !DIDerivedType(tag: DW_TAG_member, name: "generate_summary", scope: !2776, file: !263, line: 179, baseType: !2780, size: 64, offset: 640)
!2780 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2781, size: 64)
!2781 = !DISubroutineType(types: !2782)
!2782 = !{null}
!2783 = !DIDerivedType(tag: DW_TAG_member, name: "write_summary", scope: !2776, file: !263, line: 182, baseType: !2784, size: 64, offset: 704)
!2784 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2785, size: 64)
!2785 = !DISubroutineType(types: !2786)
!2786 = !{null, !2787}
!2787 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2788, size: 64)
!2788 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cgraph_node_set_def", file: !555, line: 276, size: 192, elements: !2789)
!2789 = !{!2790, !2791, !2805}
!2790 = !DIDerivedType(tag: DW_TAG_member, name: "hashtab", scope: !2788, file: !555, line: 278, baseType: !1376, size: 64)
!2791 = !DIDerivedType(tag: DW_TAG_member, name: "nodes", scope: !2788, file: !555, line: 279, baseType: !2792, size: 64, offset: 64)
!2792 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2793, size: 64)
!2793 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_cgraph_node_ptr_gc", file: !555, line: 272, baseType: !2794)
!2794 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_cgraph_node_ptr_gc", file: !555, line: 272, size: 128, elements: !2795)
!2795 = !{!2796}
!2796 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2794, file: !555, line: 272, baseType: !2797, size: 128)
!2797 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_cgraph_node_ptr_base", file: !555, line: 270, baseType: !2798)
!2798 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_cgraph_node_ptr_base", file: !555, line: 270, size: 128, elements: !2799)
!2799 = !{!2800, !2801, !2802}
!2800 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2798, file: !555, line: 270, baseType: !7, size: 32)
!2801 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2798, file: !555, line: 270, baseType: !7, size: 32, offset: 32)
!2802 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2798, file: !555, line: 270, baseType: !2803, size: 64, offset: 64)
!2803 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2804, size: 64, elements: !883)
!2804 = !DIDerivedType(tag: DW_TAG_typedef, name: "cgraph_node_ptr", file: !555, line: 268, baseType: !2719)
!2805 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !2788, file: !555, line: 280, baseType: !794, size: 64, offset: 128)
!2806 = !DIDerivedType(tag: DW_TAG_member, name: "read_summary", scope: !2776, file: !263, line: 187, baseType: !2780, size: 64, offset: 768)
!2807 = !DIDerivedType(tag: DW_TAG_member, name: "function_read_summary", scope: !2776, file: !263, line: 188, baseType: !2808, size: 64, offset: 832)
!2808 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2809, size: 64)
!2809 = !DISubroutineType(types: !2810)
!2810 = !{null, !2719}
!2811 = !DIDerivedType(tag: DW_TAG_member, name: "stmt_fixup", scope: !2776, file: !263, line: 191, baseType: !2812, size: 64, offset: 896)
!2812 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2813, size: 64)
!2813 = !DISubroutineType(types: !2814)
!2814 = !{null, !2719, !2281}
!2815 = !DIDerivedType(tag: DW_TAG_member, name: "function_transform_todo_flags_start", scope: !2776, file: !263, line: 195, baseType: !7, size: 32, offset: 960)
!2816 = !DIDerivedType(tag: DW_TAG_member, name: "function_transform", scope: !2776, file: !263, line: 196, baseType: !2817, size: 64, offset: 1024)
!2817 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2818, size: 64)
!2818 = !DISubroutineType(types: !2819)
!2819 = !{!7, !2719}
!2820 = !DIDerivedType(tag: DW_TAG_member, name: "variable_transform", scope: !2776, file: !263, line: 197, baseType: !2821, size: 64, offset: 1088)
!2821 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2822, size: 64)
!2822 = !DISubroutineType(types: !2823)
!2823 = !{null, !2824}
!2824 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2825, size: 64)
!2825 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "varpool_node", file: !555, line: 358, size: 320, elements: !2826)
!2826 = !{!2827, !2828, !2829, !2830, !2831, !2832, !2833, !2834, !2835, !2836, !2837, !2838}
!2827 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !2825, file: !555, line: 359, baseType: !803, size: 64)
!2828 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2825, file: !555, line: 361, baseType: !2824, size: 64, offset: 64)
!2829 = !DIDerivedType(tag: DW_TAG_member, name: "next_needed", scope: !2825, file: !555, line: 363, baseType: !2824, size: 64, offset: 128)
!2830 = !DIDerivedType(tag: DW_TAG_member, name: "extra_name", scope: !2825, file: !555, line: 366, baseType: !2824, size: 64, offset: 192)
!2831 = !DIDerivedType(tag: DW_TAG_member, name: "order", scope: !2825, file: !555, line: 368, baseType: !789, size: 32, offset: 256)
!2832 = !DIDerivedType(tag: DW_TAG_member, name: "needed", scope: !2825, file: !555, line: 372, baseType: !7, size: 1, offset: 288, flags: DIFlagBitField, extraData: i64 288)
!2833 = !DIDerivedType(tag: DW_TAG_member, name: "force_output", scope: !2825, file: !555, line: 375, baseType: !7, size: 1, offset: 289, flags: DIFlagBitField, extraData: i64 288)
!2834 = !DIDerivedType(tag: DW_TAG_member, name: "analyzed", scope: !2825, file: !555, line: 378, baseType: !7, size: 1, offset: 290, flags: DIFlagBitField, extraData: i64 288)
!2835 = !DIDerivedType(tag: DW_TAG_member, name: "finalized", scope: !2825, file: !555, line: 380, baseType: !7, size: 1, offset: 291, flags: DIFlagBitField, extraData: i64 288)
!2836 = !DIDerivedType(tag: DW_TAG_member, name: "output", scope: !2825, file: !555, line: 382, baseType: !7, size: 1, offset: 292, flags: DIFlagBitField, extraData: i64 288)
!2837 = !DIDerivedType(tag: DW_TAG_member, name: "externally_visible", scope: !2825, file: !555, line: 384, baseType: !7, size: 1, offset: 293, flags: DIFlagBitField, extraData: i64 288)
!2838 = !DIDerivedType(tag: DW_TAG_member, name: "alias", scope: !2825, file: !555, line: 387, baseType: !7, size: 1, offset: 294, flags: DIFlagBitField, extraData: i64 288)
!2839 = !DIDerivedType(tag: DW_TAG_member, name: "local", scope: !2720, file: !555, line: 216, baseType: !2840, size: 320, offset: 1152)
!2840 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cgraph_local_info", file: !555, line: 88, size: 320, elements: !2841)
!2841 = !{!2842, !2845, !2853, !2854, !2855, !2856, !2857, !2858, !2859, !2860}
!2842 = !DIDerivedType(tag: DW_TAG_member, name: "lto_file_data", scope: !2840, file: !555, line: 90, baseType: !2843, size: 64)
!2843 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2844, size: 64)
!2844 = !DICompositeType(tag: DW_TAG_structure_type, name: "lto_file_decl_data", file: !555, line: 51, flags: DIFlagFwdDecl)
!2845 = !DIDerivedType(tag: DW_TAG_member, name: "inline_summary", scope: !2840, file: !555, line: 92, baseType: !2846, size: 192, offset: 64)
!2846 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "inline_summary", file: !555, line: 57, size: 192, elements: !2847)
!2847 = !{!2848, !2849, !2850, !2851, !2852}
!2848 = !DIDerivedType(tag: DW_TAG_member, name: "estimated_self_stack_size", scope: !2846, file: !555, line: 60, baseType: !771, size: 64)
!2849 = !DIDerivedType(tag: DW_TAG_member, name: "self_size", scope: !2846, file: !555, line: 63, baseType: !789, size: 32, offset: 64)
!2850 = !DIDerivedType(tag: DW_TAG_member, name: "size_inlining_benefit", scope: !2846, file: !555, line: 65, baseType: !789, size: 32, offset: 96)
!2851 = !DIDerivedType(tag: DW_TAG_member, name: "self_time", scope: !2846, file: !555, line: 67, baseType: !789, size: 32, offset: 128)
!2852 = !DIDerivedType(tag: DW_TAG_member, name: "time_inlining_benefit", scope: !2846, file: !555, line: 69, baseType: !789, size: 32, offset: 160)
!2853 = !DIDerivedType(tag: DW_TAG_member, name: "local", scope: !2840, file: !555, line: 96, baseType: !7, size: 1, offset: 256, flags: DIFlagBitField, extraData: i64 256)
!2854 = !DIDerivedType(tag: DW_TAG_member, name: "externally_visible", scope: !2840, file: !555, line: 99, baseType: !7, size: 1, offset: 257, flags: DIFlagBitField, extraData: i64 256)
!2855 = !DIDerivedType(tag: DW_TAG_member, name: "finalized", scope: !2840, file: !555, line: 102, baseType: !7, size: 1, offset: 258, flags: DIFlagBitField, extraData: i64 256)
!2856 = !DIDerivedType(tag: DW_TAG_member, name: "inlinable", scope: !2840, file: !555, line: 105, baseType: !7, size: 1, offset: 259, flags: DIFlagBitField, extraData: i64 256)
!2857 = !DIDerivedType(tag: DW_TAG_member, name: "disregard_inline_limits", scope: !2840, file: !555, line: 108, baseType: !7, size: 1, offset: 260, flags: DIFlagBitField, extraData: i64 256)
!2858 = !DIDerivedType(tag: DW_TAG_member, name: "redefined_extern_inline", scope: !2840, file: !555, line: 112, baseType: !7, size: 1, offset: 261, flags: DIFlagBitField, extraData: i64 256)
!2859 = !DIDerivedType(tag: DW_TAG_member, name: "for_functions_valid", scope: !2840, file: !555, line: 116, baseType: !7, size: 1, offset: 262, flags: DIFlagBitField, extraData: i64 256)
!2860 = !DIDerivedType(tag: DW_TAG_member, name: "vtable_method", scope: !2840, file: !555, line: 120, baseType: !7, size: 1, offset: 263, flags: DIFlagBitField, extraData: i64 256)
!2861 = !DIDerivedType(tag: DW_TAG_member, name: "global", scope: !2720, file: !555, line: 217, baseType: !2862, size: 320, offset: 1472)
!2862 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cgraph_global_info", file: !555, line: 126, size: 320, elements: !2863)
!2863 = !{!2864, !2865, !2866, !2867, !2868, !2869, !2870}
!2864 = !DIDerivedType(tag: DW_TAG_member, name: "estimated_stack_size", scope: !2862, file: !555, line: 128, baseType: !771, size: 64)
!2865 = !DIDerivedType(tag: DW_TAG_member, name: "stack_frame_offset", scope: !2862, file: !555, line: 130, baseType: !771, size: 64, offset: 64)
!2866 = !DIDerivedType(tag: DW_TAG_member, name: "inlined_to", scope: !2862, file: !555, line: 134, baseType: !2719, size: 64, offset: 128)
!2867 = !DIDerivedType(tag: DW_TAG_member, name: "time", scope: !2862, file: !555, line: 137, baseType: !789, size: 32, offset: 192)
!2868 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2862, file: !555, line: 138, baseType: !789, size: 32, offset: 224)
!2869 = !DIDerivedType(tag: DW_TAG_member, name: "estimated_growth", scope: !2862, file: !555, line: 141, baseType: !789, size: 32, offset: 256)
!2870 = !DIDerivedType(tag: DW_TAG_member, name: "inlined", scope: !2862, file: !555, line: 144, baseType: !902, size: 8, offset: 288)
!2871 = !DIDerivedType(tag: DW_TAG_member, name: "rtl", scope: !2720, file: !555, line: 218, baseType: !2872, size: 32, offset: 1792)
!2872 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cgraph_rtl_info", file: !555, line: 150, size: 32, elements: !2873)
!2873 = !{!2874}
!2874 = !DIDerivedType(tag: DW_TAG_member, name: "preferred_incoming_stack_boundary", scope: !2872, file: !555, line: 151, baseType: !7, size: 32)
!2875 = !DIDerivedType(tag: DW_TAG_member, name: "clone", scope: !2720, file: !555, line: 219, baseType: !2876, size: 192, offset: 1856)
!2876 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cgraph_clone_info", file: !555, line: 171, size: 192, elements: !2877)
!2877 = !{!2878, !2899, !2900}
!2878 = !DIDerivedType(tag: DW_TAG_member, name: "tree_map", scope: !2876, file: !555, line: 173, baseType: !2879, size: 64)
!2879 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2880, size: 64)
!2880 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_ipa_replace_map_p_gc", file: !555, line: 169, baseType: !2881)
!2881 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_ipa_replace_map_p_gc", file: !555, line: 169, size: 128, elements: !2882)
!2882 = !{!2883}
!2883 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2881, file: !555, line: 169, baseType: !2884, size: 128)
!2884 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_ipa_replace_map_p_base", file: !555, line: 168, baseType: !2885)
!2885 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_ipa_replace_map_p_base", file: !555, line: 168, size: 128, elements: !2886)
!2886 = !{!2887, !2888, !2889}
!2887 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2885, file: !555, line: 168, baseType: !7, size: 32)
!2888 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2885, file: !555, line: 168, baseType: !7, size: 32, offset: 32)
!2889 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2885, file: !555, line: 168, baseType: !2890, size: 64, offset: 64)
!2890 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2891, size: 64, elements: !883)
!2891 = !DIDerivedType(tag: DW_TAG_typedef, name: "ipa_replace_map_p", file: !555, line: 167, baseType: !2892)
!2892 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2893, size: 64)
!2893 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ipa_replace_map", file: !555, line: 156, size: 192, elements: !2894)
!2894 = !{!2895, !2896, !2897, !2898}
!2895 = !DIDerivedType(tag: DW_TAG_member, name: "old_tree", scope: !2893, file: !555, line: 159, baseType: !803, size: 64)
!2896 = !DIDerivedType(tag: DW_TAG_member, name: "new_tree", scope: !2893, file: !555, line: 161, baseType: !803, size: 64, offset: 64)
!2897 = !DIDerivedType(tag: DW_TAG_member, name: "replace_p", scope: !2893, file: !555, line: 163, baseType: !902, size: 8, offset: 128)
!2898 = !DIDerivedType(tag: DW_TAG_member, name: "ref_p", scope: !2893, file: !555, line: 165, baseType: !902, size: 8, offset: 136)
!2899 = !DIDerivedType(tag: DW_TAG_member, name: "args_to_skip", scope: !2876, file: !555, line: 174, baseType: !737, size: 64, offset: 64)
!2900 = !DIDerivedType(tag: DW_TAG_member, name: "combined_args_to_skip", scope: !2876, file: !555, line: 175, baseType: !737, size: 64, offset: 128)
!2901 = !DIDerivedType(tag: DW_TAG_member, name: "thunk", scope: !2720, file: !555, line: 220, baseType: !2902, size: 256, offset: 2048)
!2902 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cgraph_thunk_info", file: !555, line: 74, size: 256, elements: !2903)
!2903 = !{!2904, !2905, !2906, !2907, !2908, !2909}
!2904 = !DIDerivedType(tag: DW_TAG_member, name: "fixed_offset", scope: !2902, file: !555, line: 76, baseType: !771, size: 64)
!2905 = !DIDerivedType(tag: DW_TAG_member, name: "virtual_value", scope: !2902, file: !555, line: 77, baseType: !771, size: 64, offset: 64)
!2906 = !DIDerivedType(tag: DW_TAG_member, name: "alias", scope: !2902, file: !555, line: 78, baseType: !803, size: 64, offset: 128)
!2907 = !DIDerivedType(tag: DW_TAG_member, name: "this_adjusting", scope: !2902, file: !555, line: 79, baseType: !902, size: 8, offset: 192)
!2908 = !DIDerivedType(tag: DW_TAG_member, name: "virtual_offset_p", scope: !2902, file: !555, line: 80, baseType: !902, size: 8, offset: 200)
!2909 = !DIDerivedType(tag: DW_TAG_member, name: "thunk_p", scope: !2902, file: !555, line: 82, baseType: !902, size: 8, offset: 208)
!2910 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !2720, file: !555, line: 223, baseType: !1309, size: 64, offset: 2304)
!2911 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !2720, file: !555, line: 225, baseType: !789, size: 32, offset: 2368)
!2912 = !DIDerivedType(tag: DW_TAG_member, name: "order", scope: !2720, file: !555, line: 227, baseType: !789, size: 32, offset: 2400)
!2913 = !DIDerivedType(tag: DW_TAG_member, name: "pid", scope: !2720, file: !555, line: 231, baseType: !789, size: 32, offset: 2432)
!2914 = !DIDerivedType(tag: DW_TAG_member, name: "needed", scope: !2720, file: !555, line: 238, baseType: !7, size: 1, offset: 2464, flags: DIFlagBitField, extraData: i64 2464)
!2915 = !DIDerivedType(tag: DW_TAG_member, name: "address_taken", scope: !2720, file: !555, line: 241, baseType: !7, size: 1, offset: 2465, flags: DIFlagBitField, extraData: i64 2464)
!2916 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_and_needed", scope: !2720, file: !555, line: 244, baseType: !7, size: 1, offset: 2466, flags: DIFlagBitField, extraData: i64 2464)
!2917 = !DIDerivedType(tag: DW_TAG_member, name: "reachable", scope: !2720, file: !555, line: 251, baseType: !7, size: 1, offset: 2467, flags: DIFlagBitField, extraData: i64 2464)
!2918 = !DIDerivedType(tag: DW_TAG_member, name: "lowered", scope: !2720, file: !555, line: 253, baseType: !7, size: 1, offset: 2468, flags: DIFlagBitField, extraData: i64 2464)
!2919 = !DIDerivedType(tag: DW_TAG_member, name: "analyzed", scope: !2720, file: !555, line: 256, baseType: !7, size: 1, offset: 2469, flags: DIFlagBitField, extraData: i64 2464)
!2920 = !DIDerivedType(tag: DW_TAG_member, name: "process", scope: !2720, file: !555, line: 258, baseType: !7, size: 1, offset: 2470, flags: DIFlagBitField, extraData: i64 2464)
!2921 = !DIDerivedType(tag: DW_TAG_member, name: "alias", scope: !2720, file: !555, line: 260, baseType: !7, size: 1, offset: 2471, flags: DIFlagBitField, extraData: i64 2464)
!2922 = !DIDerivedType(tag: DW_TAG_member, name: "finalized_by_frontend", scope: !2720, file: !555, line: 262, baseType: !7, size: 1, offset: 2472, flags: DIFlagBitField, extraData: i64 2464)
!2923 = !DIDerivedType(tag: DW_TAG_member, name: "same_body_alias", scope: !2720, file: !555, line: 265, baseType: !7, size: 1, offset: 2473, flags: DIFlagBitField, extraData: i64 2464)
!2924 = !DILocation(line: 1968, column: 23, scope: !2717)
!2925 = !DILocalVariable(name: "vnode", scope: !2717, file: !3, line: 1969, type: !2824)
!2926 = !DILocation(line: 1969, column: 24, scope: !2717)
!2927 = !DILocalVariable(name: "i", scope: !2717, file: !3, line: 1970, type: !7)
!2928 = !DILocation(line: 1970, column: 16, scope: !2717)
!2929 = !DILocalVariable(name: "bi", scope: !2717, file: !3, line: 1971, type: !2930)
!2930 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap_iterator", file: !741, line: 218, baseType: !2931)
!2931 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !741, line: 203, size: 256, elements: !2932)
!2932 = !{!2933, !2934, !2935, !2936}
!2933 = !DIDerivedType(tag: DW_TAG_member, name: "elt1", scope: !2931, file: !741, line: 206, baseType: !744, size: 64)
!2934 = !DIDerivedType(tag: DW_TAG_member, name: "elt2", scope: !2931, file: !741, line: 209, baseType: !744, size: 64, offset: 64)
!2935 = !DIDerivedType(tag: DW_TAG_member, name: "word_no", scope: !2931, file: !741, line: 212, baseType: !7, size: 32, offset: 128)
!2936 = !DIDerivedType(tag: DW_TAG_member, name: "bits", scope: !2931, file: !741, line: 217, baseType: !754, size: 64, offset: 192)
!2937 = !DILocation(line: 1971, column: 19, scope: !2717)
!2938 = !DILocalVariable(name: "result", scope: !2717, file: !3, line: 1972, type: !1971)
!2939 = !DILocation(line: 1972, column: 19, scope: !2717)
!2940 = !DILocation(line: 1974, column: 3, scope: !2717)
!2941 = !DILocation(line: 1977, column: 3, scope: !2942)
!2942 = distinct !DILexicalBlock(scope: !2717, file: !3, line: 1977, column: 3)
!2943 = !DILocation(line: 1977, column: 3, scope: !2944)
!2944 = distinct !DILexicalBlock(scope: !2942, file: !3, line: 1977, column: 3)
!2945 = !DILocation(line: 1978, column: 23, scope: !2944)
!2946 = !DILocation(line: 1978, column: 5, scope: !2944)
!2947 = distinct !{!2947, !2941, !2948}
!2948 = !DILocation(line: 1978, column: 28, scope: !2942)
!2949 = !DILocation(line: 1987, column: 15, scope: !2950)
!2950 = distinct !DILexicalBlock(scope: !2717, file: !3, line: 1987, column: 3)
!2951 = !DILocation(line: 1987, column: 13, scope: !2950)
!2952 = !DILocation(line: 1987, column: 8, scope: !2950)
!2953 = !DILocation(line: 1987, column: 29, scope: !2954)
!2954 = distinct !DILexicalBlock(scope: !2950, file: !3, line: 1987, column: 3)
!2955 = !DILocation(line: 1987, column: 3, scope: !2950)
!2956 = !DILocation(line: 1988, column: 9, scope: !2957)
!2957 = distinct !DILexicalBlock(scope: !2954, file: !3, line: 1988, column: 9)
!2958 = !DILocation(line: 1988, column: 15, scope: !2957)
!2959 = !DILocation(line: 1988, column: 24, scope: !2957)
!2960 = !DILocation(line: 1988, column: 28, scope: !2957)
!2961 = !DILocation(line: 1988, column: 34, scope: !2957)
!2962 = !DILocation(line: 1988, column: 9, scope: !2954)
!2963 = !DILocation(line: 1989, column: 25, scope: !2957)
!2964 = !DILocation(line: 1989, column: 7, scope: !2957)
!2965 = !DILocation(line: 1987, column: 42, scope: !2954)
!2966 = !DILocation(line: 1987, column: 48, scope: !2954)
!2967 = !DILocation(line: 1987, column: 40, scope: !2954)
!2968 = !DILocation(line: 1987, column: 3, scope: !2954)
!2969 = distinct !{!2969, !2955, !2970}
!2970 = !DILocation(line: 1989, column: 29, scope: !2950)
!2971 = !DILocation(line: 1992, column: 24, scope: !2717)
!2972 = !DILocation(line: 1992, column: 3, scope: !2717)
!2973 = !DILocation(line: 1993, column: 17, scope: !2717)
!2974 = !DILocation(line: 1998, column: 26, scope: !2717)
!2975 = !DILocation(line: 1998, column: 24, scope: !2717)
!2976 = !DILocation(line: 1999, column: 16, scope: !2717)
!2977 = !DILocation(line: 1999, column: 14, scope: !2717)
!2978 = !DILocation(line: 2004, column: 16, scope: !2717)
!2979 = !DILocation(line: 2004, column: 28, scope: !2717)
!2980 = !DILocation(line: 2004, column: 3, scope: !2717)
!2981 = !DILocation(line: 2005, column: 3, scope: !2982)
!2982 = distinct !DILexicalBlock(scope: !2717, file: !3, line: 2005, column: 3)
!2983 = !DILocation(line: 2005, column: 3, scope: !2984)
!2984 = distinct !DILexicalBlock(scope: !2982, file: !3, line: 2005, column: 3)
!2985 = !DILocalVariable(name: "type", scope: !2986, file: !3, line: 2007, type: !803)
!2986 = distinct !DILexicalBlock(scope: !2984, file: !3, line: 2006, column: 5)
!2987 = !DILocation(line: 2007, column: 12, scope: !2986)
!2988 = !DILocation(line: 2007, column: 33, scope: !2986)
!2989 = !DILocation(line: 2007, column: 19, scope: !2986)
!2990 = !DILocation(line: 2009, column: 68, scope: !2991)
!2991 = distinct !DILexicalBlock(scope: !2986, file: !3, line: 2009, column: 11)
!2992 = !DILocation(line: 2009, column: 11, scope: !2991)
!2993 = !DILocation(line: 2009, column: 74, scope: !2991)
!2994 = !DILocation(line: 2009, column: 11, scope: !2986)
!2995 = !DILocation(line: 2010, column: 19, scope: !2991)
!2996 = !DILocation(line: 2010, column: 2, scope: !2991)
!2997 = !DILocation(line: 2011, column: 5, scope: !2986)
!2998 = distinct !{!2998, !2981, !2999}
!2999 = !DILocation(line: 2011, column: 5, scope: !2982)
!3000 = !DILocation(line: 2012, column: 17, scope: !2717)
!3001 = !DILocation(line: 2012, column: 3, scope: !2717)
!3002 = !DILocation(line: 2016, column: 16, scope: !2717)
!3003 = !DILocation(line: 2016, column: 28, scope: !2717)
!3004 = !DILocation(line: 2016, column: 3, scope: !2717)
!3005 = !DILocation(line: 2017, column: 3, scope: !3006)
!3006 = distinct !DILexicalBlock(scope: !2717, file: !3, line: 2017, column: 3)
!3007 = !DILocation(line: 2017, column: 3, scope: !3008)
!3008 = distinct !DILexicalBlock(scope: !3006, file: !3, line: 2017, column: 3)
!3009 = !DILocation(line: 2019, column: 51, scope: !3010)
!3010 = distinct !DILexicalBlock(scope: !3008, file: !3, line: 2018, column: 5)
!3011 = !DILocation(line: 2019, column: 37, scope: !3010)
!3012 = !DILocation(line: 2019, column: 7, scope: !3010)
!3013 = !DILocation(line: 2020, column: 5, scope: !3010)
!3014 = distinct !{!3014, !3005, !3015}
!3015 = !DILocation(line: 2020, column: 5, scope: !3006)
!3016 = !DILocation(line: 2021, column: 17, scope: !2717)
!3017 = !DILocation(line: 2021, column: 3, scope: !2717)
!3018 = !DILocation(line: 2025, column: 16, scope: !2717)
!3019 = !DILocation(line: 2025, column: 28, scope: !2717)
!3020 = !DILocation(line: 2025, column: 3, scope: !2717)
!3021 = !DILocation(line: 2026, column: 3, scope: !3022)
!3022 = distinct !DILexicalBlock(scope: !2717, file: !3, line: 2026, column: 3)
!3023 = !DILocation(line: 2026, column: 3, scope: !3024)
!3024 = distinct !DILexicalBlock(scope: !3022, file: !3, line: 2026, column: 3)
!3025 = !DILocation(line: 2028, column: 45, scope: !3026)
!3026 = distinct !DILexicalBlock(scope: !3024, file: !3, line: 2027, column: 5)
!3027 = !DILocation(line: 2028, column: 31, scope: !3026)
!3028 = !DILocation(line: 2028, column: 7, scope: !3026)
!3029 = !DILocation(line: 2029, column: 5, scope: !3026)
!3030 = distinct !{!3030, !3021, !3031}
!3031 = !DILocation(line: 2029, column: 5, scope: !3022)
!3032 = !DILocation(line: 2030, column: 17, scope: !2717)
!3033 = !DILocation(line: 2030, column: 3, scope: !2717)
!3034 = !DILocation(line: 2037, column: 28, scope: !2717)
!3035 = !DILocation(line: 2037, column: 12, scope: !2717)
!3036 = !DILocation(line: 2037, column: 10, scope: !2717)
!3037 = !DILocation(line: 2038, column: 3, scope: !2717)
!3038 = !DILocation(line: 2038, column: 10, scope: !2717)
!3039 = !DILocalVariable(name: "uid", scope: !3040, file: !3, line: 2040, type: !789)
!3040 = distinct !DILexicalBlock(scope: !2717, file: !3, line: 2039, column: 5)
!3041 = !DILocation(line: 2040, column: 11, scope: !3040)
!3042 = !DILocation(line: 2040, column: 17, scope: !3040)
!3043 = !DILocation(line: 2040, column: 25, scope: !3040)
!3044 = !DILocation(line: 2043, column: 29, scope: !3040)
!3045 = !DILocation(line: 2043, column: 7, scope: !3040)
!3046 = !DILocation(line: 2044, column: 38, scope: !3040)
!3047 = !DILocation(line: 2044, column: 65, scope: !3040)
!3048 = !DILocation(line: 2044, column: 16, scope: !3040)
!3049 = !DILocation(line: 2044, column: 14, scope: !3040)
!3050 = distinct !{!3050, !3037, !3051}
!3051 = !DILocation(line: 2045, column: 5, scope: !2717)
!3052 = !DILocation(line: 2049, column: 28, scope: !2717)
!3053 = !DILocation(line: 2049, column: 12, scope: !2717)
!3054 = !DILocation(line: 2049, column: 10, scope: !2717)
!3055 = !DILocation(line: 2050, column: 3, scope: !2717)
!3056 = !DILocation(line: 2050, column: 10, scope: !2717)
!3057 = !DILocalVariable(name: "type", scope: !3058, file: !3, line: 2052, type: !803)
!3058 = distinct !DILexicalBlock(scope: !2717, file: !3, line: 2051, column: 5)
!3059 = !DILocation(line: 2052, column: 12, scope: !3058)
!3060 = !DILocation(line: 2052, column: 26, scope: !3058)
!3061 = !DILocation(line: 2052, column: 34, scope: !3058)
!3062 = !DILocation(line: 2052, column: 19, scope: !3058)
!3063 = !DILocalVariable(name: "key", scope: !3058, file: !3, line: 2053, type: !803)
!3064 = !DILocation(line: 2053, column: 12, scope: !3058)
!3065 = !DILocation(line: 2053, column: 25, scope: !3058)
!3066 = !DILocation(line: 2053, column: 33, scope: !3058)
!3067 = !DILocation(line: 2053, column: 18, scope: !3058)
!3068 = !DILocation(line: 2054, column: 11, scope: !3069)
!3069 = distinct !DILexicalBlock(scope: !3058, file: !3, line: 2054, column: 11)
!3070 = !DILocation(line: 2055, column: 4, scope: !3069)
!3071 = !DILocation(line: 2055, column: 7, scope: !3069)
!3072 = !DILocation(line: 2055, column: 24, scope: !3069)
!3073 = !DILocation(line: 2054, column: 11, scope: !3058)
!3074 = !DILocation(line: 2057, column: 23, scope: !3075)
!3075 = distinct !DILexicalBlock(scope: !3069, file: !3, line: 2056, column: 2)
!3076 = !DILocation(line: 2057, column: 57, scope: !3075)
!3077 = !DILocation(line: 2057, column: 65, scope: !3075)
!3078 = !DILocation(line: 2057, column: 4, scope: !3075)
!3079 = !DILocation(line: 2058, column: 23, scope: !3075)
!3080 = !DILocation(line: 2058, column: 60, scope: !3075)
!3081 = !DILocation(line: 2058, column: 43, scope: !3075)
!3082 = !DILocation(line: 2058, column: 4, scope: !3075)
!3083 = !DILocation(line: 2059, column: 23, scope: !3075)
!3084 = !DILocation(line: 2059, column: 59, scope: !3075)
!3085 = !DILocation(line: 2059, column: 42, scope: !3075)
!3086 = !DILocation(line: 2059, column: 4, scope: !3075)
!3087 = !DILocation(line: 2060, column: 22, scope: !3075)
!3088 = !DILocation(line: 2060, column: 41, scope: !3075)
!3089 = !DILocation(line: 2060, column: 4, scope: !3075)
!3090 = !DILocation(line: 2061, column: 2, scope: !3075)
!3091 = !DILocation(line: 2062, column: 38, scope: !3058)
!3092 = !DILocation(line: 2062, column: 72, scope: !3058)
!3093 = !DILocation(line: 2062, column: 55, scope: !3058)
!3094 = !DILocation(line: 2062, column: 16, scope: !3058)
!3095 = !DILocation(line: 2062, column: 14, scope: !3058)
!3096 = distinct !{!3096, !3055, !3097}
!3097 = !DILocation(line: 2063, column: 5, scope: !2717)
!3098 = !DILocation(line: 2065, column: 7, scope: !3099)
!3099 = distinct !DILexicalBlock(scope: !2717, file: !3, line: 2065, column: 7)
!3100 = !DILocation(line: 2065, column: 7, scope: !2717)
!3101 = !DILocation(line: 2067, column: 7, scope: !3102)
!3102 = distinct !DILexicalBlock(scope: !3103, file: !3, line: 2067, column: 7)
!3103 = distinct !DILexicalBlock(scope: !3099, file: !3, line: 2066, column: 5)
!3104 = !DILocation(line: 2067, column: 7, scope: !3105)
!3105 = distinct !DILexicalBlock(scope: !3102, file: !3, line: 2067, column: 7)
!3106 = !DILocalVariable(name: "type", scope: !3107, file: !3, line: 2072, type: !803)
!3107 = distinct !DILexicalBlock(scope: !3105, file: !3, line: 2068, column: 2)
!3108 = !DILocation(line: 2072, column: 9, scope: !3107)
!3109 = !DILocation(line: 2072, column: 30, scope: !3107)
!3110 = !DILocation(line: 2072, column: 16, scope: !3107)
!3111 = !DILocation(line: 2073, column: 12, scope: !3107)
!3112 = !DILocation(line: 2073, column: 35, scope: !3107)
!3113 = !DILocation(line: 2073, column: 4, scope: !3107)
!3114 = !DILocation(line: 2074, column: 24, scope: !3107)
!3115 = !DILocation(line: 2074, column: 35, scope: !3107)
!3116 = !DILocation(line: 2074, column: 4, scope: !3107)
!3117 = !DILocation(line: 2075, column: 22, scope: !3118)
!3118 = distinct !DILexicalBlock(scope: !3107, file: !3, line: 2075, column: 8)
!3119 = !DILocation(line: 2075, column: 48, scope: !3118)
!3120 = !DILocation(line: 2075, column: 8, scope: !3118)
!3121 = !DILocation(line: 2075, column: 8, scope: !3107)
!3122 = !DILocation(line: 2076, column: 14, scope: !3118)
!3123 = !DILocation(line: 2076, column: 6, scope: !3118)
!3124 = !DILocation(line: 2078, column: 14, scope: !3118)
!3125 = !DILocation(line: 2078, column: 6, scope: !3118)
!3126 = !DILocation(line: 2079, column: 2, scope: !3107)
!3127 = distinct !{!3127, !3101, !3128}
!3128 = !DILocation(line: 2079, column: 2, scope: !3102)
!3129 = !DILocation(line: 2080, column: 5, scope: !3103)
!3130 = !DILocation(line: 2083, column: 28, scope: !2717)
!3131 = !DILocation(line: 2083, column: 12, scope: !2717)
!3132 = !DILocation(line: 2083, column: 10, scope: !2717)
!3133 = !DILocation(line: 2084, column: 3, scope: !2717)
!3134 = !DILocation(line: 2084, column: 10, scope: !2717)
!3135 = !DILocalVariable(name: "uid", scope: !3136, file: !3, line: 2086, type: !789)
!3136 = distinct !DILexicalBlock(scope: !2717, file: !3, line: 2085, column: 5)
!3137 = !DILocation(line: 2086, column: 11, scope: !3136)
!3138 = !DILocation(line: 2086, column: 22, scope: !3136)
!3139 = !DILocation(line: 2086, column: 30, scope: !3136)
!3140 = !DILocation(line: 2086, column: 17, scope: !3136)
!3141 = !DILocalVariable(name: "bm", scope: !3136, file: !3, line: 2087, type: !737)
!3142 = !DILocation(line: 2087, column: 14, scope: !3136)
!3143 = !DILocation(line: 2087, column: 27, scope: !3136)
!3144 = !DILocation(line: 2087, column: 35, scope: !3136)
!3145 = !DILocation(line: 2087, column: 19, scope: !3136)
!3146 = !DILocation(line: 2089, column: 7, scope: !3136)
!3147 = !DILocation(line: 2090, column: 26, scope: !3136)
!3148 = !DILocation(line: 2090, column: 68, scope: !3136)
!3149 = !DILocation(line: 2090, column: 51, scope: !3136)
!3150 = !DILocation(line: 2090, column: 7, scope: !3136)
!3151 = !DILocation(line: 2091, column: 38, scope: !3136)
!3152 = !DILocation(line: 2091, column: 63, scope: !3136)
!3153 = !DILocation(line: 2091, column: 16, scope: !3136)
!3154 = !DILocation(line: 2091, column: 14, scope: !3136)
!3155 = distinct !{!3155, !3133, !3156}
!3156 = !DILocation(line: 2092, column: 5, scope: !2717)
!3157 = !DILocation(line: 2095, column: 28, scope: !2717)
!3158 = !DILocation(line: 2095, column: 12, scope: !2717)
!3159 = !DILocation(line: 2095, column: 10, scope: !2717)
!3160 = !DILocation(line: 2096, column: 3, scope: !2717)
!3161 = !DILocation(line: 2096, column: 10, scope: !2717)
!3162 = !DILocalVariable(name: "b", scope: !3163, file: !3, line: 2098, type: !737)
!3163 = distinct !DILexicalBlock(scope: !2717, file: !3, line: 2097, column: 5)
!3164 = !DILocation(line: 2098, column: 14, scope: !3163)
!3165 = !DILocation(line: 2098, column: 26, scope: !3163)
!3166 = !DILocation(line: 2098, column: 34, scope: !3163)
!3167 = !DILocation(line: 2098, column: 18, scope: !3163)
!3168 = !DILocation(line: 2099, column: 7, scope: !3163)
!3169 = !DILocation(line: 2100, column: 26, scope: !3163)
!3170 = !DILocation(line: 2100, column: 46, scope: !3163)
!3171 = !DILocation(line: 2100, column: 54, scope: !3163)
!3172 = !DILocation(line: 2100, column: 7, scope: !3163)
!3173 = !DILocation(line: 2101, column: 32, scope: !3163)
!3174 = !DILocation(line: 2101, column: 16, scope: !3163)
!3175 = !DILocation(line: 2101, column: 14, scope: !3163)
!3176 = distinct !{!3176, !3160, !3177}
!3177 = !DILocation(line: 2102, column: 5, scope: !2717)
!3178 = !DILocation(line: 2103, column: 22, scope: !2717)
!3179 = !DILocation(line: 2103, column: 3, scope: !2717)
!3180 = !DILocation(line: 2104, column: 22, scope: !2717)
!3181 = !DILocation(line: 2106, column: 3, scope: !2717)
!3182 = !DILocation(line: 2107, column: 3, scope: !2717)
!3183 = !DILocation(line: 2108, column: 3, scope: !2717)
!3184 = !DILocation(line: 2109, column: 3, scope: !2717)
!3185 = distinct !DISubprogram(name: "type_to_consider", scope: !3, file: !3, line: 263, type: !2105, scopeLine: 264, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2035)
!3186 = !DILocalVariable(name: "type", arg: 1, scope: !3185, file: !3, line: 263, type: !803)
!3187 = !DILocation(line: 263, column: 24, scope: !3185)
!3188 = !DILocation(line: 266, column: 10, scope: !3185)
!3189 = !DILocation(line: 266, column: 8, scope: !3185)
!3190 = !DILocation(line: 267, column: 3, scope: !3185)
!3191 = !DILocation(line: 267, column: 10, scope: !3185)
!3192 = !DILocation(line: 267, column: 32, scope: !3185)
!3193 = !DILocation(line: 267, column: 35, scope: !3185)
!3194 = !DILocation(line: 267, column: 52, scope: !3185)
!3195 = !DILocation(line: 268, column: 12, scope: !3185)
!3196 = !DILocation(line: 268, column: 10, scope: !3185)
!3197 = distinct !{!3197, !3190, !3195}
!3198 = !DILocation(line: 270, column: 11, scope: !3185)
!3199 = !DILocation(line: 270, column: 3, scope: !3185)
!3200 = !DILocation(line: 283, column: 7, scope: !3201)
!3201 = distinct !DILexicalBlock(scope: !3185, file: !3, line: 271, column: 5)
!3202 = !DILocation(line: 286, column: 7, scope: !3201)
!3203 = !DILocation(line: 288, column: 1, scope: !3185)
!3204 = distinct !DISubprogram(name: "discover_unique_type", scope: !3, file: !3, line: 204, type: !3205, scopeLine: 205, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2035)
!3205 = !DISubroutineType(types: !3206)
!3206 = !{!803, !803}
!3207 = !DILocalVariable(name: "type", arg: 1, scope: !3204, file: !3, line: 204, type: !803)
!3208 = !DILocation(line: 204, column: 28, scope: !3204)
!3209 = !DILocalVariable(name: "brand", scope: !3204, file: !3, line: 206, type: !1916)
!3210 = !DILocation(line: 206, column: 25, scope: !3204)
!3211 = !DILocation(line: 206, column: 33, scope: !3204)
!3212 = !DILocalVariable(name: "i", scope: !3204, file: !3, line: 207, type: !789)
!3213 = !DILocation(line: 207, column: 7, scope: !3204)
!3214 = !DILocalVariable(name: "result", scope: !3204, file: !3, line: 208, type: !1971)
!3215 = !DILocation(line: 208, column: 19, scope: !3204)
!3216 = !DILocation(line: 210, column: 35, scope: !3204)
!3217 = !DILocation(line: 210, column: 17, scope: !3204)
!3218 = !DILocation(line: 210, column: 3, scope: !3204)
!3219 = !DILocation(line: 210, column: 10, scope: !3204)
!3220 = !DILocation(line: 210, column: 15, scope: !3204)
!3221 = !DILocation(line: 212, column: 3, scope: !3204)
!3222 = !DILocation(line: 214, column: 21, scope: !3223)
!3223 = distinct !DILexicalBlock(scope: !3204, file: !3, line: 213, column: 5)
!3224 = !DILocation(line: 214, column: 7, scope: !3223)
!3225 = !DILocation(line: 214, column: 14, scope: !3223)
!3226 = !DILocation(line: 214, column: 18, scope: !3223)
!3227 = !DILocation(line: 215, column: 35, scope: !3223)
!3228 = !DILocation(line: 215, column: 69, scope: !3223)
!3229 = !DILocation(line: 215, column: 52, scope: !3223)
!3230 = !DILocation(line: 215, column: 16, scope: !3223)
!3231 = !DILocation(line: 215, column: 14, scope: !3223)
!3232 = !DILocation(line: 217, column: 11, scope: !3233)
!3233 = distinct !DILexicalBlock(scope: !3223, file: !3, line: 217, column: 11)
!3234 = !DILocation(line: 217, column: 11, scope: !3223)
!3235 = !DILocalVariable(name: "other_type", scope: !3236, file: !3, line: 221, type: !803)
!3236 = distinct !DILexicalBlock(scope: !3233, file: !3, line: 218, column: 2)
!3237 = !DILocation(line: 221, column: 9, scope: !3236)
!3238 = !DILocation(line: 221, column: 29, scope: !3236)
!3239 = !DILocation(line: 221, column: 37, scope: !3236)
!3240 = !DILocation(line: 221, column: 22, scope: !3236)
!3241 = !DILocation(line: 222, column: 28, scope: !3242)
!3242 = distinct !DILexicalBlock(scope: !3236, file: !3, line: 222, column: 8)
!3243 = !DILocation(line: 222, column: 34, scope: !3242)
!3244 = !DILocation(line: 222, column: 8, scope: !3242)
!3245 = !DILocation(line: 222, column: 8, scope: !3236)
!3246 = !DILocation(line: 224, column: 14, scope: !3247)
!3247 = distinct !DILexicalBlock(scope: !3242, file: !3, line: 223, column: 6)
!3248 = !DILocation(line: 224, column: 8, scope: !3247)
!3249 = !DILocation(line: 226, column: 27, scope: !3247)
!3250 = !DILocation(line: 227, column: 23, scope: !3247)
!3251 = !DILocation(line: 227, column: 6, scope: !3247)
!3252 = !DILocation(line: 228, column: 25, scope: !3247)
!3253 = !DILocation(line: 228, column: 6, scope: !3247)
!3254 = !DILocation(line: 226, column: 8, scope: !3247)
!3255 = !DILocation(line: 229, column: 15, scope: !3247)
!3256 = !DILocation(line: 229, column: 8, scope: !3247)
!3257 = !DILocation(line: 232, column: 2, scope: !3236)
!3258 = !DILocation(line: 237, column: 18, scope: !3259)
!3259 = distinct !DILexicalBlock(scope: !3233, file: !3, line: 234, column: 2)
!3260 = !DILocation(line: 237, column: 4, scope: !3259)
!3261 = !DILocation(line: 237, column: 11, scope: !3259)
!3262 = !DILocation(line: 237, column: 15, scope: !3259)
!3263 = !DILocation(line: 239, column: 23, scope: !3259)
!3264 = !DILocation(line: 240, column: 26, scope: !3259)
!3265 = !DILocation(line: 240, column: 9, scope: !3259)
!3266 = !DILocation(line: 241, column: 28, scope: !3259)
!3267 = !DILocation(line: 241, column: 9, scope: !3259)
!3268 = !DILocation(line: 239, column: 4, scope: !3259)
!3269 = !DILocation(line: 244, column: 23, scope: !3259)
!3270 = !DILocation(line: 245, column: 26, scope: !3259)
!3271 = !DILocation(line: 245, column: 9, scope: !3259)
!3272 = !DILocation(line: 246, column: 28, scope: !3259)
!3273 = !DILocation(line: 246, column: 9, scope: !3259)
!3274 = !DILocation(line: 244, column: 4, scope: !3259)
!3275 = !DILocation(line: 249, column: 23, scope: !3259)
!3276 = !DILocation(line: 250, column: 26, scope: !3259)
!3277 = !DILocation(line: 250, column: 9, scope: !3259)
!3278 = !DILocation(line: 251, column: 28, scope: !3259)
!3279 = !DILocation(line: 251, column: 9, scope: !3259)
!3280 = !DILocation(line: 249, column: 4, scope: !3259)
!3281 = !DILocation(line: 253, column: 20, scope: !3259)
!3282 = !DILocation(line: 253, column: 39, scope: !3259)
!3283 = !DILocation(line: 253, column: 4, scope: !3259)
!3284 = !DILocation(line: 254, column: 11, scope: !3259)
!3285 = !DILocation(line: 254, column: 4, scope: !3259)
!3286 = distinct !{!3286, !3221, !3287}
!3287 = !DILocation(line: 256, column: 5, scope: !3204)
!3288 = !DILocation(line: 257, column: 1, scope: !3204)
!3289 = distinct !DISubprogram(name: "get_name_of_type", scope: !3, file: !3, line: 144, type: !3290, scopeLine: 145, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2035)
!3290 = !DISubroutineType(types: !3291)
!3291 = !{!1225, !803}
!3292 = !DILocalVariable(name: "type", arg: 1, scope: !3289, file: !3, line: 144, type: !803)
!3293 = !DILocation(line: 144, column: 24, scope: !3289)
!3294 = !DILocalVariable(name: "name", scope: !3289, file: !3, line: 146, type: !803)
!3295 = !DILocation(line: 146, column: 8, scope: !3289)
!3296 = !DILocation(line: 146, column: 15, scope: !3289)
!3297 = !DILocation(line: 148, column: 8, scope: !3298)
!3298 = distinct !DILexicalBlock(scope: !3289, file: !3, line: 148, column: 7)
!3299 = !DILocation(line: 148, column: 7, scope: !3289)
!3300 = !DILocation(line: 150, column: 5, scope: !3298)
!3301 = !DILocation(line: 154, column: 7, scope: !3302)
!3302 = distinct !DILexicalBlock(scope: !3289, file: !3, line: 154, column: 7)
!3303 = !DILocation(line: 154, column: 24, scope: !3302)
!3304 = !DILocation(line: 154, column: 7, scope: !3289)
!3305 = !DILocation(line: 159, column: 11, scope: !3306)
!3306 = distinct !DILexicalBlock(scope: !3307, file: !3, line: 159, column: 11)
!3307 = distinct !DILexicalBlock(scope: !3302, file: !3, line: 155, column: 5)
!3308 = !DILocation(line: 159, column: 11, scope: !3307)
!3309 = !DILocation(line: 160, column: 9, scope: !3306)
!3310 = !DILocation(line: 160, column: 2, scope: !3306)
!3311 = !DILocation(line: 163, column: 2, scope: !3306)
!3312 = !DILocation(line: 165, column: 12, scope: !3313)
!3313 = distinct !DILexicalBlock(scope: !3302, file: !3, line: 165, column: 12)
!3314 = !DILocation(line: 165, column: 29, scope: !3313)
!3315 = !DILocation(line: 165, column: 12, scope: !3302)
!3316 = !DILocation(line: 166, column: 12, scope: !3313)
!3317 = !DILocation(line: 166, column: 5, scope: !3313)
!3318 = !DILocation(line: 168, column: 5, scope: !3313)
!3319 = !DILocation(line: 169, column: 1, scope: !3289)
!3320 = distinct !DISubprogram(name: "gimple_code", scope: !446, file: !446, line: 1052, type: !3321, scopeLine: 1053, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2035)
!3321 = !DISubroutineType(types: !3322)
!3322 = !{!445, !2653}
!3323 = !DILocalVariable(name: "g", arg: 1, scope: !3320, file: !446, line: 1052, type: !2653)
!3324 = !DILocation(line: 1052, column: 27, scope: !3320)
!3325 = !DILocation(line: 1054, column: 10, scope: !3320)
!3326 = !DILocation(line: 1054, column: 13, scope: !3320)
!3327 = !DILocation(line: 1054, column: 20, scope: !3320)
!3328 = !DILocation(line: 1054, column: 3, scope: !3320)
!3329 = distinct !DISubprogram(name: "look_for_casts_stmt", scope: !3, file: !3, line: 767, type: !3330, scopeLine: 768, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2035)
!3330 = !DISubroutineType(types: !3331)
!3331 = !{!7, !1096}
!3332 = !DILocalVariable(name: "s", arg: 1, scope: !3329, file: !3, line: 767, type: !1096)
!3333 = !DILocation(line: 767, column: 29, scope: !3329)
!3334 = !DILocalVariable(name: "cast", scope: !3329, file: !3, line: 769, type: !7)
!3335 = !DILocation(line: 769, column: 16, scope: !3329)
!3336 = !DILocation(line: 771, column: 3, scope: !3329)
!3337 = !DILocation(line: 773, column: 29, scope: !3338)
!3338 = distinct !DILexicalBlock(scope: !3329, file: !3, line: 773, column: 7)
!3339 = !DILocation(line: 773, column: 7, scope: !3338)
!3340 = !DILocation(line: 773, column: 7, scope: !3329)
!3341 = !DILocalVariable(name: "castfromvar", scope: !3342, file: !3, line: 775, type: !803)
!3342 = distinct !DILexicalBlock(scope: !3338, file: !3, line: 774, column: 5)
!3343 = !DILocation(line: 775, column: 12, scope: !3342)
!3344 = !DILocation(line: 775, column: 46, scope: !3342)
!3345 = !DILocation(line: 775, column: 26, scope: !3342)
!3346 = !DILocation(line: 776, column: 27, scope: !3342)
!3347 = !DILocation(line: 776, column: 62, scope: !3342)
!3348 = !DILocation(line: 776, column: 15, scope: !3342)
!3349 = !DILocation(line: 776, column: 12, scope: !3342)
!3350 = !DILocation(line: 777, column: 5, scope: !3342)
!3351 = !DILocalVariable(name: "i", scope: !3352, file: !3, line: 780, type: !1243)
!3352 = distinct !DILexicalBlock(scope: !3338, file: !3, line: 779, column: 5)
!3353 = !DILocation(line: 780, column: 14, scope: !3352)
!3354 = !DILocation(line: 781, column: 14, scope: !3355)
!3355 = distinct !DILexicalBlock(scope: !3352, file: !3, line: 781, column: 7)
!3356 = !DILocation(line: 781, column: 12, scope: !3355)
!3357 = !DILocation(line: 781, column: 19, scope: !3358)
!3358 = distinct !DILexicalBlock(scope: !3355, file: !3, line: 781, column: 7)
!3359 = !DILocation(line: 781, column: 39, scope: !3358)
!3360 = !DILocation(line: 781, column: 23, scope: !3358)
!3361 = !DILocation(line: 781, column: 21, scope: !3358)
!3362 = !DILocation(line: 781, column: 7, scope: !3355)
!3363 = !DILocation(line: 782, column: 37, scope: !3358)
!3364 = !DILocation(line: 782, column: 40, scope: !3358)
!3365 = !DILocation(line: 782, column: 26, scope: !3358)
!3366 = !DILocation(line: 782, column: 10, scope: !3358)
!3367 = !DILocation(line: 782, column: 7, scope: !3358)
!3368 = !DILocation(line: 782, column: 2, scope: !3358)
!3369 = !DILocation(line: 781, column: 44, scope: !3358)
!3370 = !DILocation(line: 781, column: 7, scope: !3358)
!3371 = distinct !{!3371, !3362, !3372}
!3372 = !DILocation(line: 782, column: 42, scope: !3355)
!3373 = !DILocation(line: 785, column: 8, scope: !3374)
!3374 = distinct !DILexicalBlock(scope: !3329, file: !3, line: 785, column: 7)
!3375 = !DILocation(line: 785, column: 7, scope: !3329)
!3376 = !DILocation(line: 786, column: 10, scope: !3374)
!3377 = !DILocation(line: 786, column: 5, scope: !3374)
!3378 = !DILocation(line: 788, column: 10, scope: !3329)
!3379 = !DILocation(line: 788, column: 3, scope: !3329)
!3380 = distinct !DISubprogram(name: "op_iter_init_use", scope: !2623, file: !2623, line: 768, type: !3381, scopeLine: 769, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2035)
!3381 = !DISubroutineType(types: !3382)
!3382 = !{!1930, !3383, !1096, !789}
!3383 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2512, size: 64)
!3384 = !DILocalVariable(name: "ptr", arg: 1, scope: !3380, file: !2623, line: 768, type: !3383)
!3385 = !DILocation(line: 768, column: 32, scope: !3380)
!3386 = !DILocalVariable(name: "stmt", arg: 2, scope: !3380, file: !2623, line: 768, type: !1096)
!3387 = !DILocation(line: 768, column: 44, scope: !3380)
!3388 = !DILocalVariable(name: "flags", arg: 3, scope: !3380, file: !2623, line: 768, type: !789)
!3389 = !DILocation(line: 768, column: 54, scope: !3380)
!3390 = !DILocation(line: 770, column: 3, scope: !3380)
!3391 = !DILocation(line: 772, column: 17, scope: !3380)
!3392 = !DILocation(line: 772, column: 22, scope: !3380)
!3393 = !DILocation(line: 772, column: 28, scope: !3380)
!3394 = !DILocation(line: 772, column: 3, scope: !3380)
!3395 = !DILocation(line: 773, column: 3, scope: !3380)
!3396 = !DILocation(line: 773, column: 8, scope: !3380)
!3397 = !DILocation(line: 773, column: 18, scope: !3380)
!3398 = !DILocation(line: 774, column: 28, scope: !3380)
!3399 = !DILocation(line: 774, column: 10, scope: !3380)
!3400 = !DILocation(line: 774, column: 3, scope: !3380)
!3401 = distinct !DISubprogram(name: "op_iter_done", scope: !2623, file: !2623, line: 652, type: !3402, scopeLine: 653, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2035)
!3402 = !DISubroutineType(types: !3403)
!3403 = !{!902, !3404}
!3404 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3405, size: 64)
!3405 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2512)
!3406 = !DILocalVariable(name: "ptr", arg: 1, scope: !3401, file: !2623, line: 652, type: !3404)
!3407 = !DILocation(line: 652, column: 34, scope: !3401)
!3408 = !DILocation(line: 654, column: 10, scope: !3401)
!3409 = !DILocation(line: 654, column: 15, scope: !3401)
!3410 = !DILocation(line: 654, column: 3, scope: !3401)
!3411 = distinct !DISubprogram(name: "get_use_from_ptr", scope: !2623, file: !2623, line: 427, type: !3412, scopeLine: 428, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2035)
!3412 = !DISubroutineType(types: !3413)
!3413 = !{!803, !1930}
!3414 = !DILocalVariable(name: "use", arg: 1, scope: !3411, file: !2623, line: 427, type: !1930)
!3415 = !DILocation(line: 427, column: 33, scope: !3411)
!3416 = !DILocation(line: 429, column: 12, scope: !3411)
!3417 = !DILocation(line: 429, column: 17, scope: !3411)
!3418 = !DILocation(line: 429, column: 10, scope: !3411)
!3419 = !DILocation(line: 429, column: 3, scope: !3411)
!3420 = distinct !DISubprogram(name: "op_iter_next_use", scope: !2623, file: !2623, line: 659, type: !3421, scopeLine: 660, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2035)
!3421 = !DISubroutineType(types: !3422)
!3422 = !{!1930, !3383}
!3423 = !DILocalVariable(name: "ptr", arg: 1, scope: !3420, file: !2623, line: 659, type: !3383)
!3424 = !DILocation(line: 659, column: 32, scope: !3420)
!3425 = !DILocalVariable(name: "use_p", scope: !3420, file: !2623, line: 661, type: !1930)
!3426 = !DILocation(line: 661, column: 17, scope: !3420)
!3427 = !DILocation(line: 665, column: 7, scope: !3428)
!3428 = distinct !DILexicalBlock(scope: !3420, file: !2623, line: 665, column: 7)
!3429 = !DILocation(line: 665, column: 12, scope: !3428)
!3430 = !DILocation(line: 665, column: 7, scope: !3420)
!3431 = !DILocation(line: 667, column: 15, scope: !3432)
!3432 = distinct !DILexicalBlock(scope: !3428, file: !2623, line: 666, column: 5)
!3433 = !DILocation(line: 667, column: 13, scope: !3432)
!3434 = !DILocation(line: 668, column: 19, scope: !3432)
!3435 = !DILocation(line: 668, column: 24, scope: !3432)
!3436 = !DILocation(line: 668, column: 30, scope: !3432)
!3437 = !DILocation(line: 668, column: 7, scope: !3432)
!3438 = !DILocation(line: 668, column: 12, scope: !3432)
!3439 = !DILocation(line: 668, column: 17, scope: !3432)
!3440 = !DILocation(line: 669, column: 14, scope: !3432)
!3441 = !DILocation(line: 669, column: 7, scope: !3432)
!3442 = !DILocation(line: 671, column: 7, scope: !3443)
!3443 = distinct !DILexicalBlock(scope: !3420, file: !2623, line: 671, column: 7)
!3444 = !DILocation(line: 671, column: 12, scope: !3443)
!3445 = !DILocation(line: 671, column: 20, scope: !3443)
!3446 = !DILocation(line: 671, column: 25, scope: !3443)
!3447 = !DILocation(line: 671, column: 18, scope: !3443)
!3448 = !DILocation(line: 671, column: 7, scope: !3420)
!3449 = !DILocation(line: 673, column: 14, scope: !3450)
!3450 = distinct !DILexicalBlock(scope: !3443, file: !2623, line: 672, column: 5)
!3451 = !DILocation(line: 673, column: 7, scope: !3450)
!3452 = !DILocation(line: 675, column: 3, scope: !3420)
!3453 = !DILocation(line: 675, column: 8, scope: !3420)
!3454 = !DILocation(line: 675, column: 13, scope: !3420)
!3455 = !DILocation(line: 676, column: 3, scope: !3420)
!3456 = !DILocation(line: 677, column: 1, scope: !3420)
!3457 = distinct !DISubprogram(name: "gimple_assign_cast_p", scope: !446, file: !446, line: 1853, type: !3458, scopeLine: 1854, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2035)
!3458 = !DISubroutineType(types: !3459)
!3459 = !{!902, !1096}
!3460 = !DILocalVariable(name: "s", arg: 1, scope: !3457, file: !446, line: 1853, type: !1096)
!3461 = !DILocation(line: 1853, column: 30, scope: !3457)
!3462 = !DILocation(line: 1855, column: 25, scope: !3463)
!3463 = distinct !DILexicalBlock(scope: !3457, file: !446, line: 1855, column: 7)
!3464 = !DILocation(line: 1855, column: 7, scope: !3463)
!3465 = !DILocation(line: 1855, column: 7, scope: !3457)
!3466 = !DILocalVariable(name: "sc", scope: !3467, file: !446, line: 1857, type: !5)
!3467 = distinct !DILexicalBlock(scope: !3463, file: !446, line: 1856, column: 5)
!3468 = !DILocation(line: 1857, column: 22, scope: !3467)
!3469 = !DILocation(line: 1857, column: 51, scope: !3467)
!3470 = !DILocation(line: 1857, column: 27, scope: !3467)
!3471 = !DILocation(line: 1858, column: 14, scope: !3467)
!3472 = !DILocation(line: 1859, column: 7, scope: !3467)
!3473 = !DILocation(line: 1859, column: 10, scope: !3467)
!3474 = !DILocation(line: 1859, column: 13, scope: !3467)
!3475 = !DILocation(line: 1860, column: 7, scope: !3467)
!3476 = !DILocation(line: 1860, column: 10, scope: !3467)
!3477 = !DILocation(line: 1860, column: 13, scope: !3467)
!3478 = !DILocation(line: 1858, column: 7, scope: !3467)
!3479 = !DILocation(line: 1863, column: 3, scope: !3457)
!3480 = !DILocation(line: 1864, column: 1, scope: !3457)
!3481 = distinct !DISubprogram(name: "check_cast", scope: !3, file: !3, line: 690, type: !3482, scopeLine: 691, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2035)
!3482 = !DISubroutineType(types: !3483)
!3483 = !{!491, !803, !803}
!3484 = !DILocalVariable(name: "to_type", arg: 1, scope: !3481, file: !3, line: 690, type: !803)
!3485 = !DILocation(line: 690, column: 18, scope: !3481)
!3486 = !DILocalVariable(name: "from", arg: 2, scope: !3481, file: !3, line: 690, type: !803)
!3487 = !DILocation(line: 690, column: 32, scope: !3481)
!3488 = !DILocalVariable(name: "from_type", scope: !3481, file: !3, line: 692, type: !803)
!3489 = !DILocation(line: 692, column: 8, scope: !3481)
!3490 = !DILocation(line: 692, column: 36, scope: !3481)
!3491 = !DILocation(line: 692, column: 20, scope: !3481)
!3492 = !DILocalVariable(name: "to_interesting_type", scope: !3481, file: !3, line: 693, type: !902)
!3493 = !DILocation(line: 693, column: 8, scope: !3481)
!3494 = !DILocalVariable(name: "from_interesting_type", scope: !3481, file: !3, line: 693, type: !902)
!3495 = !DILocation(line: 693, column: 29, scope: !3481)
!3496 = !DILocalVariable(name: "cast", scope: !3481, file: !3, line: 694, type: !491)
!3497 = !DILocation(line: 694, column: 18, scope: !3481)
!3498 = !DILocation(line: 696, column: 29, scope: !3481)
!3499 = !DILocation(line: 696, column: 13, scope: !3481)
!3500 = !DILocation(line: 696, column: 11, scope: !3481)
!3501 = !DILocation(line: 697, column: 8, scope: !3502)
!3502 = distinct !DILexicalBlock(scope: !3481, file: !3, line: 697, column: 7)
!3503 = !DILocation(line: 697, column: 18, scope: !3502)
!3504 = !DILocation(line: 697, column: 22, scope: !3502)
!3505 = !DILocation(line: 697, column: 30, scope: !3502)
!3506 = !DILocation(line: 697, column: 33, scope: !3502)
!3507 = !DILocation(line: 697, column: 46, scope: !3502)
!3508 = !DILocation(line: 697, column: 43, scope: !3502)
!3509 = !DILocation(line: 697, column: 7, scope: !3481)
!3510 = !DILocation(line: 698, column: 12, scope: !3502)
!3511 = !DILocation(line: 698, column: 5, scope: !3502)
!3512 = !DILocation(line: 701, column: 53, scope: !3481)
!3513 = !DILocation(line: 701, column: 5, scope: !3481)
!3514 = !DILocation(line: 701, column: 62, scope: !3481)
!3515 = !DILocation(line: 700, column: 23, scope: !3481)
!3516 = !DILocation(line: 703, column: 53, scope: !3481)
!3517 = !DILocation(line: 703, column: 5, scope: !3481)
!3518 = !DILocation(line: 703, column: 64, scope: !3481)
!3519 = !DILocation(line: 702, column: 25, scope: !3481)
!3520 = !DILocation(line: 705, column: 7, scope: !3521)
!3521 = distinct !DILexicalBlock(scope: !3481, file: !3, line: 705, column: 7)
!3522 = !DILocation(line: 705, column: 7, scope: !3481)
!3523 = !DILocation(line: 706, column: 9, scope: !3524)
!3524 = distinct !DILexicalBlock(scope: !3521, file: !3, line: 706, column: 9)
!3525 = !DILocation(line: 706, column: 9, scope: !3521)
!3526 = !DILocation(line: 714, column: 26, scope: !3527)
!3527 = distinct !DILexicalBlock(scope: !3524, file: !3, line: 707, column: 7)
!3528 = !DILocation(line: 714, column: 35, scope: !3527)
!3529 = !DILocation(line: 714, column: 9, scope: !3527)
!3530 = !DILocation(line: 714, column: 7, scope: !3527)
!3531 = !DILocation(line: 715, column: 10, scope: !3527)
!3532 = !DILocation(line: 715, column: 2, scope: !3527)
!3533 = !DILocation(line: 720, column: 6, scope: !3534)
!3534 = distinct !DILexicalBlock(scope: !3527, file: !3, line: 716, column: 4)
!3535 = !DILocation(line: 723, column: 17, scope: !3534)
!3536 = !DILocation(line: 723, column: 6, scope: !3534)
!3537 = !DILocation(line: 724, column: 17, scope: !3534)
!3538 = !DILocation(line: 724, column: 6, scope: !3534)
!3539 = !DILocation(line: 725, column: 6, scope: !3534)
!3540 = !DILocation(line: 728, column: 6, scope: !3534)
!3541 = !DILocation(line: 730, column: 7, scope: !3527)
!3542 = !DILocation(line: 743, column: 6, scope: !3543)
!3543 = distinct !DILexicalBlock(scope: !3544, file: !3, line: 743, column: 6)
!3544 = distinct !DILexicalBlock(scope: !3524, file: !3, line: 732, column: 7)
!3545 = !DILocation(line: 743, column: 31, scope: !3543)
!3546 = !DILocation(line: 743, column: 35, scope: !3543)
!3547 = !DILocation(line: 743, column: 6, scope: !3544)
!3548 = !DILocation(line: 744, column: 9, scope: !3543)
!3549 = !DILocation(line: 744, column: 4, scope: !3543)
!3550 = !DILocation(line: 745, column: 11, scope: !3551)
!3551 = distinct !DILexicalBlock(scope: !3543, file: !3, line: 745, column: 11)
!3552 = !DILocation(line: 745, column: 28, scope: !3551)
!3553 = !DILocation(line: 746, column: 4, scope: !3551)
!3554 = !DILocation(line: 746, column: 25, scope: !3551)
!3555 = !DILocation(line: 746, column: 7, scope: !3551)
!3556 = !DILocation(line: 745, column: 11, scope: !3543)
!3557 = !DILocation(line: 747, column: 9, scope: !3551)
!3558 = !DILocation(line: 747, column: 4, scope: !3551)
!3559 = !DILocation(line: 750, column: 11, scope: !3560)
!3560 = distinct !DILexicalBlock(scope: !3551, file: !3, line: 749, column: 4)
!3561 = !DILocation(line: 751, column: 17, scope: !3560)
!3562 = !DILocation(line: 751, column: 6, scope: !3560)
!3563 = !DILocation(line: 754, column: 12, scope: !3564)
!3564 = distinct !DILexicalBlock(scope: !3521, file: !3, line: 754, column: 12)
!3565 = !DILocation(line: 754, column: 12, scope: !3521)
!3566 = !DILocation(line: 756, column: 18, scope: !3567)
!3567 = distinct !DILexicalBlock(scope: !3564, file: !3, line: 755, column: 5)
!3568 = !DILocation(line: 756, column: 7, scope: !3567)
!3569 = !DILocation(line: 757, column: 12, scope: !3567)
!3570 = !DILocation(line: 758, column: 5, scope: !3567)
!3571 = !DILocation(line: 760, column: 10, scope: !3481)
!3572 = !DILocation(line: 760, column: 3, scope: !3481)
!3573 = !DILocation(line: 761, column: 1, scope: !3481)
!3574 = distinct !DISubprogram(name: "gimple_num_ops", scope: !446, file: !446, line: 1596, type: !3575, scopeLine: 1597, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2035)
!3575 = !DISubroutineType(types: !3576)
!3576 = !{!7, !2653}
!3577 = !DILocalVariable(name: "gs", arg: 1, scope: !3574, file: !446, line: 1596, type: !2653)
!3578 = !DILocation(line: 1596, column: 30, scope: !3574)
!3579 = !DILocation(line: 1598, column: 10, scope: !3574)
!3580 = !DILocation(line: 1598, column: 14, scope: !3574)
!3581 = !DILocation(line: 1598, column: 21, scope: !3574)
!3582 = !DILocation(line: 1598, column: 3, scope: !3574)
!3583 = distinct !DISubprogram(name: "look_for_casts", scope: !3, file: !3, line: 1239, type: !3584, scopeLine: 1240, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2035)
!3584 = !DISubroutineType(types: !3585)
!3585 = !{!7, !803}
!3586 = !DILocalVariable(name: "t", arg: 1, scope: !3583, file: !3, line: 1239, type: !803)
!3587 = !DILocation(line: 1239, column: 22, scope: !3583)
!3588 = !DILocalVariable(name: "cast", scope: !3583, file: !3, line: 1241, type: !7)
!3589 = !DILocation(line: 1241, column: 16, scope: !3583)
!3590 = !DILocation(line: 1243, column: 23, scope: !3591)
!3591 = distinct !DILexicalBlock(scope: !3583, file: !3, line: 1243, column: 7)
!3592 = !DILocation(line: 1243, column: 7, scope: !3591)
!3593 = !DILocation(line: 1243, column: 26, scope: !3591)
!3594 = !DILocation(line: 1243, column: 29, scope: !3591)
!3595 = !DILocation(line: 1243, column: 43, scope: !3591)
!3596 = !DILocation(line: 1243, column: 7, scope: !3583)
!3597 = !DILocalVariable(name: "castfromvar", scope: !3598, file: !3, line: 1245, type: !803)
!3598 = distinct !DILexicalBlock(scope: !3591, file: !3, line: 1244, column: 5)
!3599 = !DILocation(line: 1245, column: 12, scope: !3598)
!3600 = !DILocation(line: 1245, column: 26, scope: !3598)
!3601 = !DILocation(line: 1246, column: 14, scope: !3598)
!3602 = !DILocation(line: 1246, column: 33, scope: !3598)
!3603 = !DILocation(line: 1246, column: 48, scope: !3598)
!3604 = !DILocation(line: 1246, column: 21, scope: !3598)
!3605 = !DILocation(line: 1246, column: 19, scope: !3598)
!3606 = !DILocation(line: 1246, column: 12, scope: !3598)
!3607 = !DILocation(line: 1247, column: 5, scope: !3598)
!3608 = !DILocation(line: 1249, column: 5, scope: !3591)
!3609 = !DILocation(line: 1249, column: 33, scope: !3591)
!3610 = !DILocation(line: 1249, column: 12, scope: !3591)
!3611 = !DILocation(line: 1251, column: 6, scope: !3612)
!3612 = distinct !DILexicalBlock(scope: !3591, file: !3, line: 1250, column: 7)
!3613 = !DILocation(line: 1251, column: 4, scope: !3612)
!3614 = !DILocation(line: 1252, column: 6, scope: !3615)
!3615 = distinct !DILexicalBlock(scope: !3612, file: !3, line: 1252, column: 6)
!3616 = !DILocation(line: 1252, column: 20, scope: !3615)
!3617 = !DILocation(line: 1252, column: 6, scope: !3612)
!3618 = !DILocalVariable(name: "castfromref", scope: !3619, file: !3, line: 1257, type: !803)
!3619 = distinct !DILexicalBlock(scope: !3615, file: !3, line: 1253, column: 4)
!3620 = !DILocation(line: 1257, column: 11, scope: !3619)
!3621 = !DILocation(line: 1257, column: 25, scope: !3619)
!3622 = !DILocation(line: 1258, column: 13, scope: !3619)
!3623 = !DILocation(line: 1258, column: 32, scope: !3619)
!3624 = !DILocation(line: 1258, column: 47, scope: !3619)
!3625 = !DILocation(line: 1258, column: 20, scope: !3619)
!3626 = !DILocation(line: 1258, column: 18, scope: !3619)
!3627 = !DILocation(line: 1258, column: 11, scope: !3619)
!3628 = !DILocation(line: 1259, column: 4, scope: !3619)
!3629 = !DILocation(line: 1260, column: 11, scope: !3630)
!3630 = distinct !DILexicalBlock(scope: !3615, file: !3, line: 1260, column: 11)
!3631 = !DILocation(line: 1260, column: 25, scope: !3630)
!3632 = !DILocation(line: 1260, column: 11, scope: !3615)
!3633 = !DILocation(line: 1261, column: 20, scope: !3630)
!3634 = !DILocation(line: 1261, column: 4, scope: !3630)
!3635 = distinct !{!3635, !3608, !3636}
!3636 = !DILocation(line: 1262, column: 7, scope: !3591)
!3637 = !DILocation(line: 1264, column: 8, scope: !3638)
!3638 = distinct !DILexicalBlock(scope: !3583, file: !3, line: 1264, column: 7)
!3639 = !DILocation(line: 1264, column: 7, scope: !3583)
!3640 = !DILocation(line: 1265, column: 10, scope: !3638)
!3641 = !DILocation(line: 1265, column: 5, scope: !3638)
!3642 = !DILocation(line: 1266, column: 10, scope: !3583)
!3643 = !DILocation(line: 1266, column: 3, scope: !3583)
!3644 = distinct !DISubprogram(name: "gimple_op", scope: !446, file: !446, line: 1631, type: !3645, scopeLine: 1632, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2035)
!3645 = !DISubroutineType(types: !3646)
!3646 = !{!803, !2653, !7}
!3647 = !DILocalVariable(name: "gs", arg: 1, scope: !3644, file: !446, line: 1631, type: !2653)
!3648 = !DILocation(line: 1631, column: 25, scope: !3644)
!3649 = !DILocalVariable(name: "i", arg: 2, scope: !3644, file: !446, line: 1631, type: !7)
!3650 = !DILocation(line: 1631, column: 38, scope: !3644)
!3651 = !DILocation(line: 1633, column: 23, scope: !3652)
!3652 = distinct !DILexicalBlock(scope: !3644, file: !446, line: 1633, column: 7)
!3653 = !DILocation(line: 1633, column: 7, scope: !3652)
!3654 = !DILocation(line: 1633, column: 7, scope: !3644)
!3655 = !DILocation(line: 1638, column: 26, scope: !3656)
!3656 = distinct !DILexicalBlock(scope: !3652, file: !446, line: 1634, column: 5)
!3657 = !DILocation(line: 1638, column: 14, scope: !3656)
!3658 = !DILocation(line: 1638, column: 50, scope: !3656)
!3659 = !DILocation(line: 1638, column: 7, scope: !3656)
!3660 = !DILocation(line: 1641, column: 5, scope: !3652)
!3661 = !DILocation(line: 1642, column: 1, scope: !3644)
!3662 = distinct !DISubprogram(name: "check_cast_type", scope: !3, file: !3, line: 645, type: !3482, scopeLine: 646, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2035)
!3663 = !DILocalVariable(name: "to_type", arg: 1, scope: !3662, file: !3, line: 645, type: !803)
!3664 = !DILocation(line: 645, column: 23, scope: !3662)
!3665 = !DILocalVariable(name: "from_type", arg: 2, scope: !3662, file: !3, line: 645, type: !803)
!3666 = !DILocation(line: 645, column: 37, scope: !3662)
!3667 = !DILocalVariable(name: "to_stars", scope: !3662, file: !3, line: 647, type: !789)
!3668 = !DILocation(line: 647, column: 7, scope: !3662)
!3669 = !DILocation(line: 647, column: 18, scope: !3662)
!3670 = !DILocalVariable(name: "from_stars", scope: !3662, file: !3, line: 648, type: !789)
!3671 = !DILocation(line: 648, column: 7, scope: !3662)
!3672 = !DILocation(line: 648, column: 20, scope: !3662)
!3673 = !DILocation(line: 649, column: 7, scope: !3674)
!3674 = distinct !DILexicalBlock(scope: !3662, file: !3, line: 649, column: 7)
!3675 = !DILocation(line: 649, column: 19, scope: !3674)
!3676 = !DILocation(line: 649, column: 16, scope: !3674)
!3677 = !DILocation(line: 649, column: 7, scope: !3662)
!3678 = !DILocation(line: 650, column: 5, scope: !3674)
!3679 = !DILocation(line: 652, column: 7, scope: !3680)
!3680 = distinct !DILexicalBlock(scope: !3662, file: !3, line: 652, column: 7)
!3681 = !DILocation(line: 652, column: 18, scope: !3680)
!3682 = !DILocation(line: 652, column: 15, scope: !3680)
!3683 = !DILocation(line: 652, column: 7, scope: !3662)
!3684 = !DILocation(line: 653, column: 5, scope: !3680)
!3685 = !DILocation(line: 655, column: 22, scope: !3686)
!3686 = distinct !DILexicalBlock(scope: !3662, file: !3, line: 655, column: 7)
!3687 = !DILocation(line: 655, column: 31, scope: !3686)
!3688 = !DILocation(line: 655, column: 7, scope: !3686)
!3689 = !DILocation(line: 655, column: 7, scope: !3662)
!3690 = !DILocation(line: 655, column: 43, scope: !3686)
!3691 = !DILocation(line: 656, column: 22, scope: !3692)
!3692 = distinct !DILexicalBlock(scope: !3662, file: !3, line: 656, column: 7)
!3693 = !DILocation(line: 656, column: 33, scope: !3692)
!3694 = !DILocation(line: 656, column: 7, scope: !3692)
!3695 = !DILocation(line: 656, column: 7, scope: !3662)
!3696 = !DILocation(line: 656, column: 43, scope: !3692)
!3697 = !DILocation(line: 657, column: 3, scope: !3662)
!3698 = !DILocation(line: 658, column: 1, scope: !3662)
!3699 = distinct !DISubprogram(name: "mark_type", scope: !3, file: !3, line: 467, type: !3700, scopeLine: 468, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2035)
!3700 = !DISubroutineType(types: !3701)
!3701 = !{!803, !803, !502}
!3702 = !DILocalVariable(name: "type", arg: 1, scope: !3699, file: !3, line: 467, type: !803)
!3703 = !DILocation(line: 467, column: 17, scope: !3699)
!3704 = !DILocalVariable(name: "escape_status", arg: 2, scope: !3699, file: !3, line: 467, type: !502)
!3705 = !DILocation(line: 467, column: 37, scope: !3699)
!3706 = !DILocalVariable(name: "map", scope: !3699, file: !3, line: 469, type: !737)
!3707 = !DILocation(line: 469, column: 10, scope: !3699)
!3708 = !DILocalVariable(name: "uid", scope: !3699, file: !3, line: 470, type: !789)
!3709 = !DILocation(line: 470, column: 7, scope: !3699)
!3710 = !DILocation(line: 472, column: 26, scope: !3699)
!3711 = !DILocation(line: 472, column: 10, scope: !3699)
!3712 = !DILocation(line: 472, column: 8, scope: !3699)
!3713 = !DILocation(line: 473, column: 8, scope: !3714)
!3714 = distinct !DILexicalBlock(scope: !3699, file: !3, line: 473, column: 7)
!3715 = !DILocation(line: 473, column: 7, scope: !3699)
!3716 = !DILocation(line: 474, column: 5, scope: !3714)
!3717 = !DILocation(line: 476, column: 11, scope: !3699)
!3718 = !DILocation(line: 476, column: 3, scope: !3699)
!3719 = !DILocation(line: 479, column: 13, scope: !3720)
!3720 = distinct !DILexicalBlock(scope: !3699, file: !3, line: 477, column: 5)
!3721 = !DILocation(line: 479, column: 11, scope: !3720)
!3722 = !DILocation(line: 480, column: 7, scope: !3720)
!3723 = !DILocation(line: 482, column: 13, scope: !3720)
!3724 = !DILocation(line: 482, column: 11, scope: !3720)
!3725 = !DILocation(line: 483, column: 7, scope: !3720)
!3726 = !DILocation(line: 486, column: 9, scope: !3699)
!3727 = !DILocation(line: 486, column: 7, scope: !3699)
!3728 = !DILocation(line: 487, column: 21, scope: !3729)
!3729 = distinct !DILexicalBlock(scope: !3699, file: !3, line: 487, column: 7)
!3730 = !DILocation(line: 487, column: 26, scope: !3729)
!3731 = !DILocation(line: 487, column: 7, scope: !3729)
!3732 = !DILocation(line: 487, column: 7, scope: !3699)
!3733 = !DILocation(line: 488, column: 12, scope: !3729)
!3734 = !DILocation(line: 488, column: 5, scope: !3729)
!3735 = !DILocation(line: 491, column: 23, scope: !3736)
!3736 = distinct !DILexicalBlock(scope: !3729, file: !3, line: 490, column: 5)
!3737 = !DILocation(line: 491, column: 28, scope: !3736)
!3738 = !DILocation(line: 491, column: 7, scope: !3736)
!3739 = !DILocation(line: 492, column: 11, scope: !3740)
!3740 = distinct !DILexicalBlock(scope: !3736, file: !3, line: 492, column: 11)
!3741 = !DILocation(line: 492, column: 25, scope: !3740)
!3742 = !DILocation(line: 492, column: 11, scope: !3736)
!3743 = !DILocation(line: 496, column: 20, scope: !3744)
!3744 = distinct !DILexicalBlock(scope: !3740, file: !3, line: 493, column: 2)
!3745 = !DILocation(line: 496, column: 52, scope: !3744)
!3746 = !DILocation(line: 496, column: 4, scope: !3744)
!3747 = !DILocation(line: 497, column: 2, scope: !3744)
!3748 = !DILocation(line: 499, column: 10, scope: !3699)
!3749 = !DILocation(line: 499, column: 3, scope: !3699)
!3750 = !DILocation(line: 500, column: 1, scope: !3699)
!3751 = distinct !DISubprogram(name: "is_malloc_result", scope: !3, file: !3, line: 664, type: !2105, scopeLine: 665, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2035)
!3752 = !DILocalVariable(name: "var", arg: 1, scope: !3751, file: !3, line: 664, type: !803)
!3753 = !DILocation(line: 664, column: 24, scope: !3751)
!3754 = !DILocalVariable(name: "def_stmt", scope: !3751, file: !3, line: 666, type: !1096)
!3755 = !DILocation(line: 666, column: 10, scope: !3751)
!3756 = !DILocation(line: 668, column: 8, scope: !3757)
!3757 = distinct !DILexicalBlock(scope: !3751, file: !3, line: 668, column: 7)
!3758 = !DILocation(line: 668, column: 7, scope: !3751)
!3759 = !DILocation(line: 669, column: 5, scope: !3757)
!3760 = !DILocation(line: 671, column: 7, scope: !3761)
!3761 = distinct !DILexicalBlock(scope: !3751, file: !3, line: 671, column: 7)
!3762 = !DILocation(line: 671, column: 7, scope: !3751)
!3763 = !DILocation(line: 672, column: 5, scope: !3761)
!3764 = !DILocation(line: 674, column: 14, scope: !3751)
!3765 = !DILocation(line: 674, column: 12, scope: !3751)
!3766 = !DILocation(line: 676, column: 24, scope: !3767)
!3767 = distinct !DILexicalBlock(scope: !3751, file: !3, line: 676, column: 7)
!3768 = !DILocation(line: 676, column: 8, scope: !3767)
!3769 = !DILocation(line: 676, column: 7, scope: !3751)
!3770 = !DILocation(line: 677, column: 5, scope: !3767)
!3771 = !DILocation(line: 679, column: 7, scope: !3772)
!3772 = distinct !DILexicalBlock(scope: !3751, file: !3, line: 679, column: 7)
!3773 = !DILocation(line: 679, column: 31, scope: !3772)
!3774 = !DILocation(line: 679, column: 14, scope: !3772)
!3775 = !DILocation(line: 679, column: 11, scope: !3772)
!3776 = !DILocation(line: 679, column: 7, scope: !3751)
!3777 = !DILocation(line: 680, column: 5, scope: !3772)
!3778 = !DILocation(line: 682, column: 31, scope: !3751)
!3779 = !DILocation(line: 682, column: 12, scope: !3751)
!3780 = !DILocation(line: 682, column: 41, scope: !3751)
!3781 = !DILocation(line: 682, column: 55, scope: !3751)
!3782 = !DILocation(line: 682, column: 10, scope: !3751)
!3783 = !DILocation(line: 682, column: 3, scope: !3751)
!3784 = !DILocation(line: 684, column: 1, scope: !3751)
!3785 = distinct !DISubprogram(name: "count_stars", scope: !3, file: !3, line: 613, type: !3786, scopeLine: 614, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2035)
!3786 = !DISubroutineType(types: !3787)
!3787 = !{!789, !1130}
!3788 = !DILocalVariable(name: "type_ptr", arg: 1, scope: !3785, file: !3, line: 613, type: !1130)
!3789 = !DILocation(line: 613, column: 20, scope: !3785)
!3790 = !DILocalVariable(name: "type", scope: !3785, file: !3, line: 615, type: !803)
!3791 = !DILocation(line: 615, column: 8, scope: !3785)
!3792 = !DILocation(line: 615, column: 16, scope: !3785)
!3793 = !DILocation(line: 615, column: 15, scope: !3785)
!3794 = !DILocalVariable(name: "i", scope: !3785, file: !3, line: 616, type: !789)
!3795 = !DILocation(line: 616, column: 7, scope: !3785)
!3796 = !DILocation(line: 617, column: 10, scope: !3785)
!3797 = !DILocation(line: 617, column: 8, scope: !3785)
!3798 = !DILocation(line: 618, column: 3, scope: !3785)
!3799 = !DILocation(line: 618, column: 10, scope: !3785)
!3800 = !DILocation(line: 620, column: 14, scope: !3801)
!3801 = distinct !DILexicalBlock(scope: !3785, file: !3, line: 619, column: 5)
!3802 = !DILocation(line: 620, column: 12, scope: !3801)
!3803 = !DILocation(line: 621, column: 8, scope: !3801)
!3804 = distinct !{!3804, !3798, !3805}
!3805 = !DILocation(line: 622, column: 5, scope: !3785)
!3806 = !DILocation(line: 624, column: 15, scope: !3785)
!3807 = !DILocation(line: 624, column: 4, scope: !3785)
!3808 = !DILocation(line: 624, column: 13, scope: !3785)
!3809 = !DILocation(line: 625, column: 10, scope: !3785)
!3810 = !DILocation(line: 625, column: 3, scope: !3785)
!3811 = distinct !DISubprogram(name: "parent_type_p", scope: !3, file: !3, line: 527, type: !2142, scopeLine: 528, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2035)
!3812 = !DILocalVariable(name: "parent", arg: 1, scope: !3811, file: !3, line: 527, type: !803)
!3813 = !DILocation(line: 527, column: 21, scope: !3811)
!3814 = !DILocalVariable(name: "child", arg: 2, scope: !3811, file: !3, line: 527, type: !803)
!3815 = !DILocation(line: 527, column: 34, scope: !3811)
!3816 = !DILocalVariable(name: "i", scope: !3811, file: !3, line: 529, type: !789)
!3817 = !DILocation(line: 529, column: 7, scope: !3811)
!3818 = !DILocalVariable(name: "binfo", scope: !3811, file: !3, line: 530, type: !803)
!3819 = !DILocation(line: 530, column: 8, scope: !3811)
!3820 = !DILocalVariable(name: "base_binfo", scope: !3811, file: !3, line: 530, type: !803)
!3821 = !DILocation(line: 530, column: 15, scope: !3811)
!3822 = !DILocation(line: 531, column: 7, scope: !3823)
!3823 = distinct !DILexicalBlock(scope: !3811, file: !3, line: 531, column: 7)
!3824 = !DILocation(line: 531, column: 7, scope: !3811)
!3825 = !DILocation(line: 532, column: 18, scope: !3826)
!3826 = distinct !DILexicalBlock(scope: !3823, file: !3, line: 532, column: 5)
!3827 = !DILocation(line: 532, column: 16, scope: !3826)
!3828 = !DILocation(line: 532, column: 41, scope: !3826)
!3829 = !DILocation(line: 532, column: 10, scope: !3826)
!3830 = !DILocation(line: 533, column: 3, scope: !3831)
!3831 = distinct !DILexicalBlock(scope: !3826, file: !3, line: 532, column: 5)
!3832 = !DILocation(line: 532, column: 5, scope: !3826)
!3833 = !DILocalVariable(name: "binfotype", scope: !3834, file: !3, line: 535, type: !803)
!3834 = distinct !DILexicalBlock(scope: !3831, file: !3, line: 534, column: 7)
!3835 = !DILocation(line: 535, column: 7, scope: !3834)
!3836 = !DILocation(line: 535, column: 19, scope: !3834)
!3837 = !DILocation(line: 536, column: 6, scope: !3838)
!3838 = distinct !DILexicalBlock(scope: !3834, file: !3, line: 536, column: 6)
!3839 = !DILocation(line: 536, column: 19, scope: !3838)
!3840 = !DILocation(line: 536, column: 16, scope: !3838)
!3841 = !DILocation(line: 536, column: 6, scope: !3834)
!3842 = !DILocation(line: 537, column: 4, scope: !3838)
!3843 = !DILocation(line: 538, column: 26, scope: !3844)
!3844 = distinct !DILexicalBlock(scope: !3838, file: !3, line: 538, column: 11)
!3845 = !DILocation(line: 538, column: 37, scope: !3844)
!3846 = !DILocation(line: 538, column: 11, scope: !3844)
!3847 = !DILocation(line: 538, column: 11, scope: !3838)
!3848 = !DILocation(line: 539, column: 4, scope: !3844)
!3849 = !DILocation(line: 540, column: 7, scope: !3834)
!3850 = !DILocation(line: 533, column: 47, scope: !3831)
!3851 = !DILocation(line: 532, column: 5, scope: !3831)
!3852 = distinct !{!3852, !3832, !3853}
!3853 = !DILocation(line: 540, column: 7, scope: !3826)
!3854 = !DILocation(line: 541, column: 7, scope: !3855)
!3855 = distinct !DILexicalBlock(scope: !3811, file: !3, line: 541, column: 7)
!3856 = !DILocation(line: 541, column: 26, scope: !3855)
!3857 = !DILocation(line: 542, column: 7, scope: !3855)
!3858 = !DILocation(line: 542, column: 10, scope: !3855)
!3859 = !DILocation(line: 542, column: 29, scope: !3855)
!3860 = !DILocation(line: 541, column: 7, scope: !3811)
!3861 = !DILocalVariable(name: "field", scope: !3862, file: !3, line: 544, type: !803)
!3862 = distinct !DILexicalBlock(scope: !3855, file: !3, line: 543, column: 5)
!3863 = !DILocation(line: 544, column: 12, scope: !3862)
!3864 = !DILocation(line: 547, column: 20, scope: !3865)
!3865 = distinct !DILexicalBlock(scope: !3862, file: !3, line: 547, column: 7)
!3866 = !DILocation(line: 547, column: 18, scope: !3865)
!3867 = !DILocation(line: 547, column: 12, scope: !3865)
!3868 = !DILocation(line: 548, column: 5, scope: !3869)
!3869 = distinct !DILexicalBlock(scope: !3865, file: !3, line: 547, column: 7)
!3870 = !DILocation(line: 547, column: 7, scope: !3865)
!3871 = !DILocalVariable(name: "field_type", scope: !3872, file: !3, line: 551, type: !803)
!3872 = distinct !DILexicalBlock(scope: !3869, file: !3, line: 550, column: 2)
!3873 = !DILocation(line: 551, column: 9, scope: !3872)
!3874 = !DILocation(line: 552, column: 8, scope: !3875)
!3875 = distinct !DILexicalBlock(scope: !3872, file: !3, line: 552, column: 8)
!3876 = !DILocation(line: 552, column: 26, scope: !3875)
!3877 = !DILocation(line: 552, column: 8, scope: !3872)
!3878 = !DILocation(line: 553, column: 6, scope: !3875)
!3879 = !DILocation(line: 555, column: 17, scope: !3872)
!3880 = !DILocation(line: 555, column: 15, scope: !3872)
!3881 = !DILocation(line: 556, column: 8, scope: !3882)
!3882 = distinct !DILexicalBlock(scope: !3872, file: !3, line: 556, column: 8)
!3883 = !DILocation(line: 556, column: 22, scope: !3882)
!3884 = !DILocation(line: 556, column: 19, scope: !3882)
!3885 = !DILocation(line: 556, column: 8, scope: !3872)
!3886 = !DILocation(line: 557, column: 6, scope: !3882)
!3887 = !DILocation(line: 558, column: 2, scope: !3872)
!3888 = !DILocation(line: 549, column: 13, scope: !3869)
!3889 = !DILocation(line: 549, column: 11, scope: !3869)
!3890 = !DILocation(line: 547, column: 7, scope: !3869)
!3891 = distinct !{!3891, !3870, !3892}
!3892 = !DILocation(line: 558, column: 2, scope: !3865)
!3893 = !DILocation(line: 562, column: 20, scope: !3894)
!3894 = distinct !DILexicalBlock(scope: !3862, file: !3, line: 562, column: 7)
!3895 = !DILocation(line: 562, column: 18, scope: !3894)
!3896 = !DILocation(line: 562, column: 12, scope: !3894)
!3897 = !DILocation(line: 563, column: 5, scope: !3898)
!3898 = distinct !DILexicalBlock(scope: !3894, file: !3, line: 562, column: 7)
!3899 = !DILocation(line: 562, column: 7, scope: !3894)
!3900 = !DILocalVariable(name: "field_type", scope: !3901, file: !3, line: 566, type: !803)
!3901 = distinct !DILexicalBlock(scope: !3898, file: !3, line: 565, column: 2)
!3902 = !DILocation(line: 566, column: 9, scope: !3901)
!3903 = !DILocation(line: 567, column: 8, scope: !3904)
!3904 = distinct !DILexicalBlock(scope: !3901, file: !3, line: 567, column: 8)
!3905 = !DILocation(line: 567, column: 26, scope: !3904)
!3906 = !DILocation(line: 567, column: 8, scope: !3901)
!3907 = !DILocation(line: 568, column: 6, scope: !3904)
!3908 = !DILocation(line: 570, column: 17, scope: !3901)
!3909 = !DILocation(line: 570, column: 15, scope: !3901)
!3910 = !DILocation(line: 571, column: 8, scope: !3911)
!3911 = distinct !DILexicalBlock(scope: !3901, file: !3, line: 571, column: 8)
!3912 = !DILocation(line: 571, column: 31, scope: !3911)
!3913 = !DILocation(line: 572, column: 8, scope: !3911)
!3914 = !DILocation(line: 572, column: 11, scope: !3911)
!3915 = !DILocation(line: 572, column: 34, scope: !3911)
!3916 = !DILocation(line: 573, column: 8, scope: !3911)
!3917 = !DILocation(line: 573, column: 11, scope: !3911)
!3918 = !DILocation(line: 573, column: 34, scope: !3911)
!3919 = !DILocation(line: 571, column: 8, scope: !3901)
!3920 = !DILocation(line: 574, column: 25, scope: !3921)
!3921 = distinct !DILexicalBlock(scope: !3911, file: !3, line: 574, column: 10)
!3922 = !DILocation(line: 574, column: 37, scope: !3921)
!3923 = !DILocation(line: 574, column: 10, scope: !3921)
!3924 = !DILocation(line: 574, column: 10, scope: !3911)
!3925 = !DILocation(line: 575, column: 8, scope: !3921)
!3926 = !DILocation(line: 574, column: 42, scope: !3921)
!3927 = !DILocation(line: 576, column: 2, scope: !3901)
!3928 = !DILocation(line: 564, column: 13, scope: !3898)
!3929 = !DILocation(line: 564, column: 11, scope: !3898)
!3930 = !DILocation(line: 562, column: 7, scope: !3898)
!3931 = distinct !{!3931, !3899, !3932}
!3932 = !DILocation(line: 576, column: 2, scope: !3894)
!3933 = !DILocation(line: 577, column: 5, scope: !3862)
!3934 = !DILocation(line: 579, column: 7, scope: !3935)
!3935 = distinct !DILexicalBlock(scope: !3811, file: !3, line: 579, column: 7)
!3936 = !DILocation(line: 579, column: 26, scope: !3935)
!3937 = !DILocation(line: 579, column: 7, scope: !3811)
!3938 = !DILocalVariable(name: "field", scope: !3939, file: !3, line: 581, type: !803)
!3939 = distinct !DILexicalBlock(scope: !3935, file: !3, line: 580, column: 5)
!3940 = !DILocation(line: 581, column: 12, scope: !3939)
!3941 = !DILocation(line: 582, column: 20, scope: !3942)
!3942 = distinct !DILexicalBlock(scope: !3939, file: !3, line: 582, column: 7)
!3943 = !DILocation(line: 582, column: 18, scope: !3942)
!3944 = !DILocation(line: 582, column: 12, scope: !3942)
!3945 = !DILocation(line: 583, column: 5, scope: !3946)
!3946 = distinct !DILexicalBlock(scope: !3942, file: !3, line: 582, column: 7)
!3947 = !DILocation(line: 582, column: 7, scope: !3942)
!3948 = !DILocalVariable(name: "field_type", scope: !3949, file: !3, line: 586, type: !803)
!3949 = distinct !DILexicalBlock(scope: !3946, file: !3, line: 585, column: 2)
!3950 = !DILocation(line: 586, column: 9, scope: !3949)
!3951 = !DILocation(line: 587, column: 8, scope: !3952)
!3952 = distinct !DILexicalBlock(scope: !3949, file: !3, line: 587, column: 8)
!3953 = !DILocation(line: 587, column: 26, scope: !3952)
!3954 = !DILocation(line: 587, column: 8, scope: !3949)
!3955 = !DILocation(line: 588, column: 6, scope: !3952)
!3956 = !DILocation(line: 590, column: 17, scope: !3949)
!3957 = !DILocation(line: 590, column: 15, scope: !3949)
!3958 = !DILocation(line: 591, column: 8, scope: !3959)
!3959 = distinct !DILexicalBlock(scope: !3949, file: !3, line: 591, column: 8)
!3960 = !DILocation(line: 591, column: 22, scope: !3959)
!3961 = !DILocation(line: 591, column: 19, scope: !3959)
!3962 = !DILocation(line: 591, column: 8, scope: !3949)
!3963 = !DILocation(line: 592, column: 6, scope: !3959)
!3964 = !DILocation(line: 595, column: 8, scope: !3965)
!3965 = distinct !DILexicalBlock(scope: !3949, file: !3, line: 595, column: 8)
!3966 = !DILocation(line: 595, column: 31, scope: !3965)
!3967 = !DILocation(line: 596, column: 8, scope: !3965)
!3968 = !DILocation(line: 596, column: 11, scope: !3965)
!3969 = !DILocation(line: 596, column: 34, scope: !3965)
!3970 = !DILocation(line: 597, column: 8, scope: !3965)
!3971 = !DILocation(line: 597, column: 11, scope: !3965)
!3972 = !DILocation(line: 597, column: 34, scope: !3965)
!3973 = !DILocation(line: 595, column: 8, scope: !3949)
!3974 = !DILocation(line: 599, column: 27, scope: !3975)
!3975 = distinct !DILexicalBlock(scope: !3976, file: !3, line: 599, column: 12)
!3976 = distinct !DILexicalBlock(scope: !3965, file: !3, line: 598, column: 6)
!3977 = !DILocation(line: 599, column: 39, scope: !3975)
!3978 = !DILocation(line: 599, column: 12, scope: !3975)
!3979 = !DILocation(line: 599, column: 12, scope: !3976)
!3980 = !DILocation(line: 600, column: 3, scope: !3975)
!3981 = !DILocation(line: 602, column: 3, scope: !3975)
!3982 = !DILocation(line: 604, column: 2, scope: !3949)
!3983 = !DILocation(line: 584, column: 13, scope: !3946)
!3984 = !DILocation(line: 584, column: 11, scope: !3946)
!3985 = !DILocation(line: 582, column: 7, scope: !3946)
!3986 = distinct !{!3986, !3947, !3987}
!3987 = !DILocation(line: 604, column: 2, scope: !3942)
!3988 = !DILocation(line: 605, column: 5, scope: !3939)
!3989 = !DILocation(line: 606, column: 3, scope: !3811)
!3990 = !DILocation(line: 607, column: 1, scope: !3811)
!3991 = distinct !DISubprogram(name: "VEC_tree_base_iterate", scope: !6, file: !6, line: 182, type: !3992, scopeLine: 182, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2035)
!3992 = !DISubroutineType(types: !3993)
!3993 = !{!789, !3994, !7, !1130}
!3994 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3995, size: 64)
!3995 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1444)
!3996 = !DILocalVariable(name: "vec_", arg: 1, scope: !3991, file: !6, line: 182, type: !3994)
!3997 = !DILocation(line: 182, column: 1, scope: !3991)
!3998 = !DILocalVariable(name: "ix_", arg: 2, scope: !3991, file: !6, line: 182, type: !7)
!3999 = !DILocalVariable(name: "ptr", arg: 3, scope: !3991, file: !6, line: 182, type: !1130)
!4000 = !DILocation(line: 182, column: 1, scope: !4001)
!4001 = distinct !DILexicalBlock(scope: !3991, file: !6, line: 182, column: 1)
!4002 = !DILocation(line: 182, column: 1, scope: !4003)
!4003 = distinct !DILexicalBlock(scope: !4001, file: !6, line: 182, column: 1)
!4004 = !DILocation(line: 182, column: 1, scope: !4005)
!4005 = distinct !DILexicalBlock(scope: !4001, file: !6, line: 182, column: 1)
!4006 = distinct !DISubprogram(name: "is_gimple_call", scope: !446, file: !446, line: 1870, type: !2651, scopeLine: 1871, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2035)
!4007 = !DILocalVariable(name: "gs", arg: 1, scope: !4006, file: !446, line: 1870, type: !2653)
!4008 = !DILocation(line: 1870, column: 30, scope: !4006)
!4009 = !DILocation(line: 1872, column: 23, scope: !4006)
!4010 = !DILocation(line: 1872, column: 10, scope: !4006)
!4011 = !DILocation(line: 1872, column: 27, scope: !4006)
!4012 = !DILocation(line: 1872, column: 3, scope: !4006)
!4013 = distinct !DISubprogram(name: "gimple_call_lhs", scope: !446, file: !446, line: 1878, type: !2661, scopeLine: 1879, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2035)
!4014 = !DILocalVariable(name: "gs", arg: 1, scope: !4013, file: !446, line: 1878, type: !2653)
!4015 = !DILocation(line: 1878, column: 31, scope: !4013)
!4016 = !DILocation(line: 1881, column: 21, scope: !4013)
!4017 = !DILocation(line: 1881, column: 10, scope: !4013)
!4018 = !DILocation(line: 1881, column: 3, scope: !4013)
!4019 = distinct !DISubprogram(name: "handled_component_p", scope: !6, file: !6, line: 4551, type: !4020, scopeLine: 4552, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2035)
!4020 = !DISubroutineType(types: !4021)
!4021 = !{!902, !4022}
!4022 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_tree", file: !738, line: 59, baseType: !4023)
!4023 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4024, size: 64)
!4024 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !805)
!4025 = !DILocalVariable(name: "t", arg: 1, scope: !4019, file: !6, line: 4551, type: !4022)
!4026 = !DILocation(line: 4551, column: 33, scope: !4019)
!4027 = !DILocation(line: 4553, column: 11, scope: !4019)
!4028 = !DILocation(line: 4553, column: 3, scope: !4019)
!4029 = !DILocation(line: 4562, column: 7, scope: !4030)
!4030 = distinct !DILexicalBlock(scope: !4019, file: !6, line: 4554, column: 5)
!4031 = !DILocation(line: 4565, column: 7, scope: !4030)
!4032 = !DILocation(line: 4567, column: 1, scope: !4019)
!4033 = distinct !DISubprogram(name: "gimple_has_ops", scope: !446, file: !446, line: 1274, type: !2651, scopeLine: 1275, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2035)
!4034 = !DILocalVariable(name: "g", arg: 1, scope: !4033, file: !446, line: 1274, type: !2653)
!4035 = !DILocation(line: 1274, column: 30, scope: !4033)
!4036 = !DILocation(line: 1276, column: 23, scope: !4033)
!4037 = !DILocation(line: 1276, column: 10, scope: !4033)
!4038 = !DILocation(line: 1276, column: 26, scope: !4033)
!4039 = !DILocation(line: 1276, column: 41, scope: !4033)
!4040 = !DILocation(line: 1276, column: 57, scope: !4033)
!4041 = !DILocation(line: 1276, column: 44, scope: !4033)
!4042 = !DILocation(line: 1276, column: 60, scope: !4033)
!4043 = !DILocation(line: 0, scope: !4033)
!4044 = !DILocation(line: 1276, column: 3, scope: !4033)
!4045 = distinct !DISubprogram(name: "gimple_ops", scope: !446, file: !446, line: 1614, type: !4046, scopeLine: 1615, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2035)
!4046 = !DISubroutineType(types: !4047)
!4047 = !{!1130, !1096}
!4048 = !DILocalVariable(name: "gs", arg: 1, scope: !4045, file: !446, line: 1614, type: !1096)
!4049 = !DILocation(line: 1614, column: 20, scope: !4045)
!4050 = !DILocalVariable(name: "off", scope: !4045, file: !446, line: 1616, type: !1243)
!4051 = !DILocation(line: 1616, column: 10, scope: !4045)
!4052 = !DILocation(line: 1621, column: 56, scope: !4045)
!4053 = !DILocation(line: 1621, column: 28, scope: !4045)
!4054 = !DILocation(line: 1621, column: 9, scope: !4045)
!4055 = !DILocation(line: 1621, column: 7, scope: !4045)
!4056 = !DILocation(line: 1622, column: 3, scope: !4045)
!4057 = !DILocation(line: 1624, column: 29, scope: !4045)
!4058 = !DILocation(line: 1624, column: 20, scope: !4045)
!4059 = !DILocation(line: 1624, column: 34, scope: !4045)
!4060 = !DILocation(line: 1624, column: 32, scope: !4045)
!4061 = !DILocation(line: 1624, column: 10, scope: !4045)
!4062 = !DILocation(line: 1624, column: 3, scope: !4045)
!4063 = distinct !DISubprogram(name: "gimple_statement_structure", scope: !446, file: !446, line: 1073, type: !4064, scopeLine: 1074, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2035)
!4064 = !DISubroutineType(types: !4065)
!4065 = !{!506, !1096}
!4066 = !DILocalVariable(name: "gs", arg: 1, scope: !4063, file: !446, line: 1073, type: !1096)
!4067 = !DILocation(line: 1073, column: 36, scope: !4063)
!4068 = !DILocation(line: 1075, column: 37, scope: !4063)
!4069 = !DILocation(line: 1075, column: 24, scope: !4063)
!4070 = !DILocation(line: 1075, column: 10, scope: !4063)
!4071 = !DILocation(line: 1075, column: 3, scope: !4063)
!4072 = distinct !DISubprogram(name: "gss_for_code", scope: !446, file: !446, line: 1061, type: !4073, scopeLine: 1062, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2035)
!4073 = !DISubroutineType(types: !4074)
!4074 = !{!506, !445}
!4075 = !DILocalVariable(name: "code", arg: 1, scope: !4072, file: !446, line: 1061, type: !445)
!4076 = !DILocation(line: 1061, column: 32, scope: !4072)
!4077 = !DILocation(line: 1066, column: 24, scope: !4072)
!4078 = !DILocation(line: 1066, column: 10, scope: !4072)
!4079 = !DILocation(line: 1066, column: 3, scope: !4072)
!4080 = distinct !DISubprogram(name: "op_iter_init", scope: !2623, file: !2623, line: 742, type: !4081, scopeLine: 743, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2035)
!4081 = !DISubroutineType(types: !4082)
!4082 = !{null, !3383, !1096, !789}
!4083 = !DILocalVariable(name: "ptr", arg: 1, scope: !4080, file: !2623, line: 742, type: !3383)
!4084 = !DILocation(line: 742, column: 28, scope: !4080)
!4085 = !DILocalVariable(name: "stmt", arg: 2, scope: !4080, file: !2623, line: 742, type: !1096)
!4086 = !DILocation(line: 742, column: 40, scope: !4080)
!4087 = !DILocalVariable(name: "flags", arg: 3, scope: !4080, file: !2623, line: 742, type: !789)
!4088 = !DILocation(line: 742, column: 50, scope: !4080)
!4089 = !DILocation(line: 746, column: 3, scope: !4080)
!4090 = !DILocation(line: 748, column: 16, scope: !4080)
!4091 = !DILocation(line: 748, column: 22, scope: !4080)
!4092 = !DILocation(line: 748, column: 15, scope: !4080)
!4093 = !DILocation(line: 748, column: 68, scope: !4080)
!4094 = !DILocation(line: 748, column: 52, scope: !4080)
!4095 = !DILocation(line: 748, column: 3, scope: !4080)
!4096 = !DILocation(line: 748, column: 8, scope: !4080)
!4097 = !DILocation(line: 748, column: 13, scope: !4080)
!4098 = !DILocation(line: 749, column: 9, scope: !4099)
!4099 = distinct !DILexicalBlock(scope: !4080, file: !2623, line: 749, column: 7)
!4100 = !DILocation(line: 749, column: 15, scope: !4099)
!4101 = !DILocation(line: 750, column: 7, scope: !4099)
!4102 = !DILocation(line: 750, column: 10, scope: !4099)
!4103 = !DILocation(line: 750, column: 15, scope: !4099)
!4104 = !DILocation(line: 751, column: 7, scope: !4099)
!4105 = !DILocation(line: 751, column: 23, scope: !4099)
!4106 = !DILocation(line: 751, column: 10, scope: !4099)
!4107 = !DILocation(line: 751, column: 29, scope: !4099)
!4108 = !DILocation(line: 749, column: 7, scope: !4080)
!4109 = !DILocation(line: 752, column: 17, scope: !4099)
!4110 = !DILocation(line: 752, column: 22, scope: !4099)
!4111 = !DILocation(line: 752, column: 28, scope: !4099)
!4112 = !DILocation(line: 752, column: 5, scope: !4099)
!4113 = !DILocation(line: 752, column: 10, scope: !4099)
!4114 = !DILocation(line: 752, column: 15, scope: !4099)
!4115 = !DILocation(line: 753, column: 16, scope: !4080)
!4116 = !DILocation(line: 753, column: 22, scope: !4080)
!4117 = !DILocation(line: 753, column: 15, scope: !4080)
!4118 = !DILocation(line: 753, column: 68, scope: !4080)
!4119 = !DILocation(line: 753, column: 52, scope: !4080)
!4120 = !DILocation(line: 753, column: 3, scope: !4080)
!4121 = !DILocation(line: 753, column: 8, scope: !4080)
!4122 = !DILocation(line: 753, column: 13, scope: !4080)
!4123 = !DILocation(line: 754, column: 9, scope: !4124)
!4124 = distinct !DILexicalBlock(scope: !4080, file: !2623, line: 754, column: 7)
!4125 = !DILocation(line: 754, column: 15, scope: !4124)
!4126 = !DILocation(line: 755, column: 7, scope: !4124)
!4127 = !DILocation(line: 755, column: 10, scope: !4124)
!4128 = !DILocation(line: 755, column: 15, scope: !4124)
!4129 = !DILocation(line: 756, column: 7, scope: !4124)
!4130 = !DILocation(line: 756, column: 23, scope: !4124)
!4131 = !DILocation(line: 756, column: 10, scope: !4124)
!4132 = !DILocation(line: 756, column: 29, scope: !4124)
!4133 = !DILocation(line: 754, column: 7, scope: !4080)
!4134 = !DILocation(line: 757, column: 17, scope: !4124)
!4135 = !DILocation(line: 757, column: 22, scope: !4124)
!4136 = !DILocation(line: 757, column: 28, scope: !4124)
!4137 = !DILocation(line: 757, column: 5, scope: !4124)
!4138 = !DILocation(line: 757, column: 10, scope: !4124)
!4139 = !DILocation(line: 757, column: 15, scope: !4124)
!4140 = !DILocation(line: 758, column: 3, scope: !4080)
!4141 = !DILocation(line: 758, column: 8, scope: !4080)
!4142 = !DILocation(line: 758, column: 13, scope: !4080)
!4143 = !DILocation(line: 760, column: 3, scope: !4080)
!4144 = !DILocation(line: 760, column: 8, scope: !4080)
!4145 = !DILocation(line: 760, column: 14, scope: !4080)
!4146 = !DILocation(line: 761, column: 3, scope: !4080)
!4147 = !DILocation(line: 761, column: 8, scope: !4080)
!4148 = !DILocation(line: 761, column: 16, scope: !4080)
!4149 = !DILocation(line: 762, column: 3, scope: !4080)
!4150 = !DILocation(line: 762, column: 8, scope: !4080)
!4151 = !DILocation(line: 762, column: 17, scope: !4080)
!4152 = !DILocation(line: 763, column: 1, scope: !4080)
!4153 = distinct !DISubprogram(name: "gimple_def_ops", scope: !446, file: !446, line: 1292, type: !4154, scopeLine: 1293, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2035)
!4154 = !DISubroutineType(types: !4155)
!4155 = !{!1125, !2653}
!4156 = !DILocalVariable(name: "g", arg: 1, scope: !4153, file: !446, line: 1292, type: !2653)
!4157 = !DILocation(line: 1292, column: 30, scope: !4153)
!4158 = !DILocation(line: 1294, column: 24, scope: !4159)
!4159 = distinct !DILexicalBlock(scope: !4153, file: !446, line: 1294, column: 7)
!4160 = !DILocation(line: 1294, column: 8, scope: !4159)
!4161 = !DILocation(line: 1294, column: 7, scope: !4153)
!4162 = !DILocation(line: 1295, column: 5, scope: !4159)
!4163 = !DILocation(line: 1296, column: 10, scope: !4153)
!4164 = !DILocation(line: 1296, column: 13, scope: !4153)
!4165 = !DILocation(line: 1296, column: 19, scope: !4153)
!4166 = !DILocation(line: 1296, column: 26, scope: !4153)
!4167 = !DILocation(line: 1296, column: 3, scope: !4153)
!4168 = !DILocation(line: 1297, column: 1, scope: !4153)
!4169 = distinct !DISubprogram(name: "gimple_vdef", scope: !446, file: !446, line: 1375, type: !2661, scopeLine: 1376, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2035)
!4170 = !DILocalVariable(name: "g", arg: 1, scope: !4169, file: !446, line: 1375, type: !2653)
!4171 = !DILocation(line: 1375, column: 27, scope: !4169)
!4172 = !DILocation(line: 1377, column: 28, scope: !4173)
!4173 = distinct !DILexicalBlock(scope: !4169, file: !446, line: 1377, column: 7)
!4174 = !DILocation(line: 1377, column: 8, scope: !4173)
!4175 = !DILocation(line: 1377, column: 7, scope: !4169)
!4176 = !DILocation(line: 1378, column: 5, scope: !4173)
!4177 = !DILocation(line: 1379, column: 10, scope: !4169)
!4178 = !DILocation(line: 1379, column: 13, scope: !4169)
!4179 = !DILocation(line: 1379, column: 23, scope: !4169)
!4180 = !DILocation(line: 1379, column: 3, scope: !4169)
!4181 = !DILocation(line: 1380, column: 1, scope: !4169)
!4182 = distinct !DISubprogram(name: "gimple_use_ops", scope: !446, file: !446, line: 1313, type: !4183, scopeLine: 1314, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2035)
!4183 = !DISubroutineType(types: !4184)
!4184 = !{!1132, !2653}
!4185 = !DILocalVariable(name: "g", arg: 1, scope: !4182, file: !446, line: 1313, type: !2653)
!4186 = !DILocation(line: 1313, column: 30, scope: !4182)
!4187 = !DILocation(line: 1315, column: 24, scope: !4188)
!4188 = distinct !DILexicalBlock(scope: !4182, file: !446, line: 1315, column: 7)
!4189 = !DILocation(line: 1315, column: 8, scope: !4188)
!4190 = !DILocation(line: 1315, column: 7, scope: !4182)
!4191 = !DILocation(line: 1316, column: 5, scope: !4188)
!4192 = !DILocation(line: 1317, column: 10, scope: !4182)
!4193 = !DILocation(line: 1317, column: 13, scope: !4182)
!4194 = !DILocation(line: 1317, column: 19, scope: !4182)
!4195 = !DILocation(line: 1317, column: 26, scope: !4182)
!4196 = !DILocation(line: 1317, column: 3, scope: !4182)
!4197 = !DILocation(line: 1318, column: 1, scope: !4182)
!4198 = distinct !DISubprogram(name: "gimple_vuse", scope: !446, file: !446, line: 1365, type: !2661, scopeLine: 1366, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2035)
!4199 = !DILocalVariable(name: "g", arg: 1, scope: !4198, file: !446, line: 1365, type: !2653)
!4200 = !DILocation(line: 1365, column: 27, scope: !4198)
!4201 = !DILocation(line: 1367, column: 28, scope: !4202)
!4202 = distinct !DILexicalBlock(scope: !4198, file: !446, line: 1367, column: 7)
!4203 = !DILocation(line: 1367, column: 8, scope: !4202)
!4204 = !DILocation(line: 1367, column: 7, scope: !4198)
!4205 = !DILocation(line: 1368, column: 5, scope: !4202)
!4206 = !DILocation(line: 1369, column: 10, scope: !4198)
!4207 = !DILocation(line: 1369, column: 13, scope: !4198)
!4208 = !DILocation(line: 1369, column: 23, scope: !4198)
!4209 = !DILocation(line: 1369, column: 3, scope: !4198)
!4210 = !DILocation(line: 1370, column: 1, scope: !4198)
!4211 = distinct !DISubprogram(name: "gimple_has_mem_ops", scope: !446, file: !446, line: 1283, type: !2651, scopeLine: 1284, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2035)
!4212 = !DILocalVariable(name: "g", arg: 1, scope: !4211, file: !446, line: 1283, type: !2653)
!4213 = !DILocation(line: 1283, column: 34, scope: !4211)
!4214 = !DILocation(line: 1285, column: 23, scope: !4211)
!4215 = !DILocation(line: 1285, column: 10, scope: !4211)
!4216 = !DILocation(line: 1285, column: 26, scope: !4211)
!4217 = !DILocation(line: 1285, column: 43, scope: !4211)
!4218 = !DILocation(line: 1285, column: 59, scope: !4211)
!4219 = !DILocation(line: 1285, column: 46, scope: !4211)
!4220 = !DILocation(line: 1285, column: 62, scope: !4211)
!4221 = !DILocation(line: 0, scope: !4211)
!4222 = !DILocation(line: 1285, column: 3, scope: !4211)
!4223 = distinct !DISubprogram(name: "gimple_phi_arg_imm_use_ptr", scope: !2623, file: !2623, line: 442, type: !4224, scopeLine: 443, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2035)
!4224 = !DISubroutineType(types: !4225)
!4225 = !{!1930, !1096, !789}
!4226 = !DILocalVariable(name: "gs", arg: 1, scope: !4223, file: !2623, line: 442, type: !1096)
!4227 = !DILocation(line: 442, column: 36, scope: !4223)
!4228 = !DILocalVariable(name: "i", arg: 2, scope: !4223, file: !2623, line: 442, type: !789)
!4229 = !DILocation(line: 442, column: 44, scope: !4223)
!4230 = !DILocation(line: 444, column: 27, scope: !4223)
!4231 = !DILocation(line: 444, column: 31, scope: !4223)
!4232 = !DILocation(line: 444, column: 11, scope: !4223)
!4233 = !DILocation(line: 444, column: 35, scope: !4223)
!4234 = !DILocation(line: 444, column: 3, scope: !4223)
!4235 = distinct !DISubprogram(name: "gimple_phi_arg", scope: !446, file: !446, line: 3100, type: !4236, scopeLine: 3101, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2035)
!4236 = !DISubroutineType(types: !4237)
!4237 = !{!4238, !1096, !7}
!4238 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1199, size: 64)
!4239 = !DILocalVariable(name: "gs", arg: 1, scope: !4235, file: !446, line: 3100, type: !1096)
!4240 = !DILocation(line: 3100, column: 24, scope: !4235)
!4241 = !DILocalVariable(name: "index", arg: 2, scope: !4235, file: !446, line: 3100, type: !7)
!4242 = !DILocation(line: 3100, column: 37, scope: !4235)
!4243 = !DILocation(line: 3103, column: 3, scope: !4235)
!4244 = !DILocation(line: 3104, column: 12, scope: !4235)
!4245 = !DILocation(line: 3104, column: 16, scope: !4235)
!4246 = !DILocation(line: 3104, column: 27, scope: !4235)
!4247 = !DILocation(line: 3104, column: 32, scope: !4235)
!4248 = !DILocation(line: 3104, column: 3, scope: !4235)
!4249 = distinct !DISubprogram(name: "op_iter_init_tree", scope: !2623, file: !2623, line: 792, type: !4250, scopeLine: 793, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2035)
!4250 = !DISubroutineType(types: !4251)
!4251 = !{!803, !3383, !1096, !789}
!4252 = !DILocalVariable(name: "ptr", arg: 1, scope: !4249, file: !2623, line: 792, type: !3383)
!4253 = !DILocation(line: 792, column: 33, scope: !4249)
!4254 = !DILocalVariable(name: "stmt", arg: 2, scope: !4249, file: !2623, line: 792, type: !1096)
!4255 = !DILocation(line: 792, column: 45, scope: !4249)
!4256 = !DILocalVariable(name: "flags", arg: 3, scope: !4249, file: !2623, line: 792, type: !789)
!4257 = !DILocation(line: 792, column: 55, scope: !4249)
!4258 = !DILocation(line: 794, column: 17, scope: !4249)
!4259 = !DILocation(line: 794, column: 22, scope: !4249)
!4260 = !DILocation(line: 794, column: 28, scope: !4249)
!4261 = !DILocation(line: 794, column: 3, scope: !4249)
!4262 = !DILocation(line: 795, column: 3, scope: !4249)
!4263 = !DILocation(line: 795, column: 8, scope: !4249)
!4264 = !DILocation(line: 795, column: 18, scope: !4249)
!4265 = !DILocation(line: 796, column: 29, scope: !4249)
!4266 = !DILocation(line: 796, column: 10, scope: !4249)
!4267 = !DILocation(line: 796, column: 3, scope: !4249)
!4268 = distinct !DISubprogram(name: "op_iter_next_tree", scope: !2623, file: !2623, line: 699, type: !4269, scopeLine: 700, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2035)
!4269 = !DISubroutineType(types: !4270)
!4270 = !{!803, !3383}
!4271 = !DILocalVariable(name: "ptr", arg: 1, scope: !4268, file: !2623, line: 699, type: !3383)
!4272 = !DILocation(line: 699, column: 33, scope: !4268)
!4273 = !DILocalVariable(name: "val", scope: !4268, file: !2623, line: 701, type: !803)
!4274 = !DILocation(line: 701, column: 8, scope: !4268)
!4275 = !DILocation(line: 705, column: 7, scope: !4276)
!4276 = distinct !DILexicalBlock(scope: !4268, file: !2623, line: 705, column: 7)
!4277 = !DILocation(line: 705, column: 12, scope: !4276)
!4278 = !DILocation(line: 705, column: 7, scope: !4268)
!4279 = !DILocation(line: 707, column: 13, scope: !4280)
!4280 = distinct !DILexicalBlock(scope: !4276, file: !2623, line: 706, column: 5)
!4281 = !DILocation(line: 707, column: 11, scope: !4280)
!4282 = !DILocation(line: 708, column: 19, scope: !4280)
!4283 = !DILocation(line: 708, column: 24, scope: !4280)
!4284 = !DILocation(line: 708, column: 30, scope: !4280)
!4285 = !DILocation(line: 708, column: 7, scope: !4280)
!4286 = !DILocation(line: 708, column: 12, scope: !4280)
!4287 = !DILocation(line: 708, column: 17, scope: !4280)
!4288 = !DILocation(line: 709, column: 14, scope: !4280)
!4289 = !DILocation(line: 709, column: 7, scope: !4280)
!4290 = !DILocation(line: 711, column: 7, scope: !4291)
!4291 = distinct !DILexicalBlock(scope: !4268, file: !2623, line: 711, column: 7)
!4292 = !DILocation(line: 711, column: 12, scope: !4291)
!4293 = !DILocation(line: 711, column: 7, scope: !4268)
!4294 = !DILocation(line: 713, column: 13, scope: !4295)
!4295 = distinct !DILexicalBlock(scope: !4291, file: !2623, line: 712, column: 5)
!4296 = !DILocation(line: 713, column: 11, scope: !4295)
!4297 = !DILocation(line: 714, column: 19, scope: !4295)
!4298 = !DILocation(line: 714, column: 24, scope: !4295)
!4299 = !DILocation(line: 714, column: 30, scope: !4295)
!4300 = !DILocation(line: 714, column: 7, scope: !4295)
!4301 = !DILocation(line: 714, column: 12, scope: !4295)
!4302 = !DILocation(line: 714, column: 17, scope: !4295)
!4303 = !DILocation(line: 715, column: 14, scope: !4295)
!4304 = !DILocation(line: 715, column: 7, scope: !4295)
!4305 = !DILocation(line: 718, column: 3, scope: !4268)
!4306 = !DILocation(line: 718, column: 8, scope: !4268)
!4307 = !DILocation(line: 718, column: 13, scope: !4268)
!4308 = !DILocation(line: 719, column: 3, scope: !4268)
!4309 = !DILocation(line: 721, column: 1, scope: !4268)
!4310 = distinct !DISubprogram(name: "get_def_from_ptr", scope: !2623, file: !2623, line: 434, type: !4311, scopeLine: 435, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2035)
!4311 = !DISubroutineType(types: !4312)
!4312 = !{!803, !4313}
!4313 = !DIDerivedType(tag: DW_TAG_typedef, name: "def_operand_p", file: !485, line: 27, baseType: !1130)
!4314 = !DILocalVariable(name: "def", arg: 1, scope: !4310, file: !2623, line: 434, type: !4313)
!4315 = !DILocation(line: 434, column: 33, scope: !4310)
!4316 = !DILocation(line: 436, column: 11, scope: !4310)
!4317 = !DILocation(line: 436, column: 10, scope: !4310)
!4318 = !DILocation(line: 436, column: 3, scope: !4310)
!4319 = distinct !DISubprogram(name: "gimple_expr_code", scope: !446, file: !446, line: 1438, type: !2669, scopeLine: 1439, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2035)
!4320 = !DILocalVariable(name: "stmt", arg: 1, scope: !4319, file: !446, line: 1438, type: !2653)
!4321 = !DILocation(line: 1438, column: 32, scope: !4319)
!4322 = !DILocalVariable(name: "code", scope: !4319, file: !446, line: 1440, type: !445)
!4323 = !DILocation(line: 1440, column: 20, scope: !4319)
!4324 = !DILocation(line: 1440, column: 40, scope: !4319)
!4325 = !DILocation(line: 1440, column: 27, scope: !4319)
!4326 = !DILocation(line: 1441, column: 7, scope: !4327)
!4327 = distinct !DILexicalBlock(scope: !4319, file: !446, line: 1441, column: 7)
!4328 = !DILocation(line: 1441, column: 12, scope: !4327)
!4329 = !DILocation(line: 1441, column: 29, scope: !4327)
!4330 = !DILocation(line: 1441, column: 32, scope: !4327)
!4331 = !DILocation(line: 1441, column: 37, scope: !4327)
!4332 = !DILocation(line: 1441, column: 7, scope: !4319)
!4333 = !DILocation(line: 1442, column: 29, scope: !4327)
!4334 = !DILocation(line: 1442, column: 35, scope: !4327)
!4335 = !DILocation(line: 1442, column: 42, scope: !4327)
!4336 = !DILocation(line: 1442, column: 5, scope: !4327)
!4337 = !DILocation(line: 1443, column: 12, scope: !4338)
!4338 = distinct !DILexicalBlock(scope: !4327, file: !446, line: 1443, column: 12)
!4339 = !DILocation(line: 1443, column: 17, scope: !4338)
!4340 = !DILocation(line: 1443, column: 12, scope: !4327)
!4341 = !DILocation(line: 1444, column: 5, scope: !4338)
!4342 = !DILocation(line: 1446, column: 5, scope: !4338)
!4343 = !DILocation(line: 1448, column: 5, scope: !4319)
!4344 = !DILocation(line: 1450, column: 1, scope: !4319)
!4345 = distinct !DISubprogram(name: "get_gimple_rhs_class", scope: !446, file: !446, line: 1686, type: !4346, scopeLine: 1687, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2035)
!4346 = !DISubroutineType(types: !4347)
!4347 = !{!532, !5}
!4348 = !DILocalVariable(name: "code", arg: 1, scope: !4345, file: !446, line: 1686, type: !5)
!4349 = !DILocation(line: 1686, column: 38, scope: !4345)
!4350 = !DILocation(line: 1688, column: 63, scope: !4345)
!4351 = !DILocation(line: 1688, column: 34, scope: !4345)
!4352 = !DILocation(line: 1688, column: 10, scope: !4345)
!4353 = !DILocation(line: 1688, column: 3, scope: !4345)
!4354 = distinct !DISubprogram(name: "ipa_init", scope: !3, file: !3, line: 1605, type: !2781, scopeLine: 1606, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2035)
!4355 = !DILocation(line: 1607, column: 3, scope: !4354)
!4356 = !DILocation(line: 1608, column: 36, scope: !4354)
!4357 = !DILocation(line: 1608, column: 34, scope: !4354)
!4358 = !DILocation(line: 1609, column: 30, scope: !4354)
!4359 = !DILocation(line: 1609, column: 28, scope: !4354)
!4360 = !DILocation(line: 1610, column: 23, scope: !4354)
!4361 = !DILocation(line: 1610, column: 21, scope: !4354)
!4362 = !DILocation(line: 1612, column: 23, scope: !4354)
!4363 = !DILocation(line: 1612, column: 21, scope: !4354)
!4364 = !DILocation(line: 1613, column: 21, scope: !4354)
!4365 = !DILocation(line: 1613, column: 19, scope: !4354)
!4366 = !DILocation(line: 1614, column: 24, scope: !4354)
!4367 = !DILocation(line: 1614, column: 22, scope: !4354)
!4368 = !DILocation(line: 1615, column: 24, scope: !4354)
!4369 = !DILocation(line: 1615, column: 22, scope: !4354)
!4370 = !DILocation(line: 1616, column: 31, scope: !4354)
!4371 = !DILocation(line: 1616, column: 29, scope: !4354)
!4372 = !DILocation(line: 1617, column: 29, scope: !4354)
!4373 = !DILocation(line: 1617, column: 27, scope: !4354)
!4374 = !DILocation(line: 1623, column: 19, scope: !4354)
!4375 = !DILocation(line: 1623, column: 17, scope: !4354)
!4376 = !DILocation(line: 1624, column: 15, scope: !4354)
!4377 = !DILocation(line: 1625, column: 1, scope: !4354)
!4378 = distinct !DISubprogram(name: "analyze_variable", scope: !3, file: !3, line: 1634, type: !2822, scopeLine: 1635, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2035)
!4379 = !DILocalVariable(name: "vnode", arg: 1, scope: !4378, file: !3, line: 1634, type: !2824)
!4380 = !DILocation(line: 1634, column: 40, scope: !4378)
!4381 = !DILocalVariable(name: "global", scope: !4378, file: !3, line: 1636, type: !803)
!4382 = !DILocation(line: 1636, column: 8, scope: !4378)
!4383 = !DILocation(line: 1636, column: 17, scope: !4378)
!4384 = !DILocation(line: 1636, column: 24, scope: !4378)
!4385 = !DILocalVariable(name: "type", scope: !4378, file: !3, line: 1637, type: !803)
!4386 = !DILocation(line: 1637, column: 8, scope: !4378)
!4387 = !DILocation(line: 1637, column: 31, scope: !4378)
!4388 = !DILocation(line: 1637, column: 15, scope: !4378)
!4389 = !DILocation(line: 1642, column: 7, scope: !4390)
!4390 = distinct !DILexicalBlock(scope: !4378, file: !3, line: 1642, column: 7)
!4391 = !DILocation(line: 1642, column: 14, scope: !4390)
!4392 = !DILocation(line: 1642, column: 7, scope: !4378)
!4393 = !DILocation(line: 1643, column: 28, scope: !4390)
!4394 = !DILocation(line: 1643, column: 5, scope: !4390)
!4395 = !DILocation(line: 1645, column: 3, scope: !4378)
!4396 = !DILocation(line: 1647, column: 7, scope: !4397)
!4397 = distinct !DILexicalBlock(scope: !4378, file: !3, line: 1647, column: 7)
!4398 = !DILocation(line: 1647, column: 7, scope: !4378)
!4399 = !DILocation(line: 1648, column: 17, scope: !4397)
!4400 = !DILocation(line: 1648, column: 5, scope: !4397)
!4401 = !DILocation(line: 1649, column: 1, scope: !4378)
!4402 = distinct !DISubprogram(name: "analyze_function", scope: !3, file: !3, line: 1655, type: !2809, scopeLine: 1656, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2035)
!4403 = !DILocalVariable(name: "fn", arg: 1, scope: !4402, file: !3, line: 1655, type: !2719)
!4404 = !DILocation(line: 1655, column: 39, scope: !4402)
!4405 = !DILocalVariable(name: "decl", scope: !4402, file: !3, line: 1657, type: !803)
!4406 = !DILocation(line: 1657, column: 8, scope: !4402)
!4407 = !DILocation(line: 1657, column: 15, scope: !4402)
!4408 = !DILocation(line: 1657, column: 19, scope: !4402)
!4409 = !DILocation(line: 1658, column: 46, scope: !4402)
!4410 = !DILocation(line: 1659, column: 11, scope: !4402)
!4411 = !DILocation(line: 1659, column: 15, scope: !4402)
!4412 = !DILocation(line: 1659, column: 21, scope: !4402)
!4413 = !DILocation(line: 1658, column: 3, scope: !4402)
!4414 = !DILocation(line: 1660, column: 7, scope: !4415)
!4415 = distinct !DILexicalBlock(scope: !4402, file: !3, line: 1660, column: 7)
!4416 = !DILocation(line: 1660, column: 7, scope: !4402)
!4417 = !DILocation(line: 1661, column: 14, scope: !4415)
!4418 = !DILocation(line: 1661, column: 70, scope: !4415)
!4419 = !DILocation(line: 1661, column: 52, scope: !4415)
!4420 = !DILocation(line: 1661, column: 5, scope: !4415)
!4421 = !DILocalVariable(name: "this_cfun", scope: !4422, file: !3, line: 1664, type: !1047)
!4422 = distinct !DILexicalBlock(scope: !4402, file: !3, line: 1663, column: 3)
!4423 = !DILocation(line: 1664, column: 22, scope: !4422)
!4424 = !DILocation(line: 1664, column: 34, scope: !4422)
!4425 = !DILocalVariable(name: "this_block", scope: !4422, file: !3, line: 1665, type: !1059)
!4426 = !DILocation(line: 1665, column: 17, scope: !4422)
!4427 = !DILocation(line: 1667, column: 5, scope: !4428)
!4428 = distinct !DILexicalBlock(scope: !4422, file: !3, line: 1667, column: 5)
!4429 = !DILocation(line: 1667, column: 5, scope: !4430)
!4430 = distinct !DILexicalBlock(scope: !4428, file: !3, line: 1667, column: 5)
!4431 = !DILocalVariable(name: "gsi", scope: !4432, file: !3, line: 1669, type: !4433)
!4432 = distinct !DILexicalBlock(scope: !4430, file: !3, line: 1668, column: 7)
!4433 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple_stmt_iterator", file: !446, line: 265, baseType: !4434)
!4434 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !446, line: 254, size: 192, elements: !4435)
!4435 = !{!4436, !4437, !4438}
!4436 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !4434, file: !446, line: 257, baseType: !1091, size: 64)
!4437 = !DIDerivedType(tag: DW_TAG_member, name: "seq", scope: !4434, file: !446, line: 263, baseType: !1086, size: 64, offset: 64)
!4438 = !DIDerivedType(tag: DW_TAG_member, name: "bb", scope: !4434, file: !446, line: 264, baseType: !1059, size: 64, offset: 128)
!4439 = !DILocation(line: 1669, column: 23, scope: !4432)
!4440 = !DILocation(line: 1670, column: 27, scope: !4441)
!4441 = distinct !DILexicalBlock(scope: !4432, file: !3, line: 1670, column: 2)
!4442 = !DILocation(line: 1670, column: 13, scope: !4441)
!4443 = !DILocation(line: 1670, column: 7, scope: !4441)
!4444 = !DILocation(line: 1670, column: 41, scope: !4445)
!4445 = distinct !DILexicalBlock(scope: !4441, file: !3, line: 1670, column: 2)
!4446 = !DILocation(line: 1670, column: 40, scope: !4445)
!4447 = !DILocation(line: 1670, column: 2, scope: !4441)
!4448 = !DILocation(line: 1671, column: 19, scope: !4445)
!4449 = !DILocation(line: 1671, column: 4, scope: !4445)
!4450 = !DILocation(line: 1670, column: 58, scope: !4445)
!4451 = !DILocation(line: 1670, column: 2, scope: !4445)
!4452 = distinct !{!4452, !4447, !4453}
!4453 = !DILocation(line: 1671, column: 33, scope: !4441)
!4454 = !DILocation(line: 1672, column: 7, scope: !4432)
!4455 = distinct !{!4455, !4427, !4456}
!4456 = !DILocation(line: 1672, column: 7, scope: !4428)
!4457 = !DILocation(line: 1676, column: 7, scope: !4458)
!4458 = distinct !DILexicalBlock(scope: !4402, file: !3, line: 1676, column: 7)
!4459 = !DILocation(line: 1676, column: 7, scope: !4402)
!4460 = !DILocalVariable(name: "step", scope: !4461, file: !3, line: 1678, type: !803)
!4461 = distinct !DILexicalBlock(scope: !4458, file: !3, line: 1677, column: 5)
!4462 = !DILocation(line: 1678, column: 12, scope: !4461)
!4463 = !DILocation(line: 1679, column: 19, scope: !4464)
!4464 = distinct !DILexicalBlock(scope: !4461, file: !3, line: 1679, column: 7)
!4465 = !DILocation(line: 1679, column: 48, scope: !4464)
!4466 = !DILocation(line: 1679, column: 17, scope: !4464)
!4467 = !DILocation(line: 1679, column: 12, scope: !4464)
!4468 = !DILocation(line: 1680, column: 5, scope: !4469)
!4469 = distinct !DILexicalBlock(scope: !4464, file: !3, line: 1679, column: 7)
!4470 = !DILocation(line: 1679, column: 7, scope: !4464)
!4471 = !DILocalVariable(name: "var", scope: !4472, file: !3, line: 1683, type: !803)
!4472 = distinct !DILexicalBlock(scope: !4469, file: !3, line: 1682, column: 2)
!4473 = !DILocation(line: 1683, column: 9, scope: !4472)
!4474 = !DILocation(line: 1683, column: 15, scope: !4472)
!4475 = !DILocation(line: 1684, column: 8, scope: !4476)
!4476 = distinct !DILexicalBlock(scope: !4472, file: !3, line: 1684, column: 8)
!4477 = !DILocation(line: 1684, column: 24, scope: !4476)
!4478 = !DILocation(line: 1685, column: 8, scope: !4476)
!4479 = !DILocation(line: 1685, column: 11, scope: !4476)
!4480 = !DILocation(line: 1686, column: 8, scope: !4476)
!4481 = !DILocation(line: 1686, column: 12, scope: !4476)
!4482 = !DILocation(line: 1684, column: 8, scope: !4472)
!4483 = !DILocation(line: 1687, column: 18, scope: !4476)
!4484 = !DILocation(line: 1687, column: 6, scope: !4476)
!4485 = !DILocation(line: 1688, column: 20, scope: !4472)
!4486 = !DILocation(line: 1688, column: 4, scope: !4472)
!4487 = !DILocation(line: 1689, column: 2, scope: !4472)
!4488 = !DILocation(line: 1681, column: 12, scope: !4469)
!4489 = !DILocation(line: 1681, column: 10, scope: !4469)
!4490 = !DILocation(line: 1679, column: 7, scope: !4469)
!4491 = distinct !{!4491, !4470, !4492}
!4492 = !DILocation(line: 1689, column: 2, scope: !4464)
!4493 = !DILocation(line: 1690, column: 5, scope: !4461)
!4494 = !DILocation(line: 1691, column: 1, scope: !4402)
!4495 = distinct !DISubprogram(name: "bmp_iter_set_init", scope: !741, file: !741, line: 224, type: !4496, scopeLine: 226, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2035)
!4496 = !DISubroutineType(types: !4497)
!4497 = !{null, !4498, !4499, !7, !4502}
!4498 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2930, size: 64)
!4499 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_bitmap", file: !738, line: 48, baseType: !4500)
!4500 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4501, size: 64)
!4501 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !740)
!4502 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7, size: 64)
!4503 = !DILocalVariable(name: "bi", arg: 1, scope: !4495, file: !741, line: 224, type: !4498)
!4504 = !DILocation(line: 224, column: 37, scope: !4495)
!4505 = !DILocalVariable(name: "map", arg: 2, scope: !4495, file: !741, line: 224, type: !4499)
!4506 = !DILocation(line: 224, column: 54, scope: !4495)
!4507 = !DILocalVariable(name: "start_bit", arg: 3, scope: !4495, file: !741, line: 225, type: !7)
!4508 = !DILocation(line: 225, column: 15, scope: !4495)
!4509 = !DILocalVariable(name: "bit_no", arg: 4, scope: !4495, file: !741, line: 225, type: !4502)
!4510 = !DILocation(line: 225, column: 36, scope: !4495)
!4511 = !DILocation(line: 227, column: 14, scope: !4495)
!4512 = !DILocation(line: 227, column: 19, scope: !4495)
!4513 = !DILocation(line: 227, column: 3, scope: !4495)
!4514 = !DILocation(line: 227, column: 7, scope: !4495)
!4515 = !DILocation(line: 227, column: 12, scope: !4495)
!4516 = !DILocation(line: 228, column: 3, scope: !4495)
!4517 = !DILocation(line: 228, column: 7, scope: !4495)
!4518 = !DILocation(line: 228, column: 12, scope: !4495)
!4519 = !DILocation(line: 231, column: 3, scope: !4495)
!4520 = !DILocation(line: 233, column: 12, scope: !4521)
!4521 = distinct !DILexicalBlock(scope: !4522, file: !741, line: 233, column: 11)
!4522 = distinct !DILexicalBlock(scope: !4495, file: !741, line: 232, column: 5)
!4523 = !DILocation(line: 233, column: 16, scope: !4521)
!4524 = !DILocation(line: 233, column: 11, scope: !4522)
!4525 = !DILocation(line: 235, column: 4, scope: !4526)
!4526 = distinct !DILexicalBlock(scope: !4521, file: !741, line: 234, column: 2)
!4527 = !DILocation(line: 235, column: 8, scope: !4526)
!4528 = !DILocation(line: 235, column: 13, scope: !4526)
!4529 = !DILocation(line: 236, column: 4, scope: !4526)
!4530 = !DILocation(line: 239, column: 11, scope: !4531)
!4531 = distinct !DILexicalBlock(scope: !4522, file: !741, line: 239, column: 11)
!4532 = !DILocation(line: 239, column: 15, scope: !4531)
!4533 = !DILocation(line: 239, column: 21, scope: !4531)
!4534 = !DILocation(line: 239, column: 29, scope: !4531)
!4535 = !DILocation(line: 239, column: 39, scope: !4531)
!4536 = !DILocation(line: 239, column: 26, scope: !4531)
!4537 = !DILocation(line: 239, column: 11, scope: !4522)
!4538 = !DILocation(line: 240, column: 2, scope: !4531)
!4539 = !DILocation(line: 241, column: 18, scope: !4522)
!4540 = !DILocation(line: 241, column: 22, scope: !4522)
!4541 = !DILocation(line: 241, column: 28, scope: !4522)
!4542 = !DILocation(line: 241, column: 7, scope: !4522)
!4543 = !DILocation(line: 241, column: 11, scope: !4522)
!4544 = !DILocation(line: 241, column: 16, scope: !4522)
!4545 = distinct !{!4545, !4519, !4546}
!4546 = !DILocation(line: 242, column: 5, scope: !4495)
!4547 = !DILocation(line: 245, column: 7, scope: !4548)
!4548 = distinct !DILexicalBlock(scope: !4495, file: !741, line: 245, column: 7)
!4549 = !DILocation(line: 245, column: 11, scope: !4548)
!4550 = !DILocation(line: 245, column: 17, scope: !4548)
!4551 = !DILocation(line: 245, column: 25, scope: !4548)
!4552 = !DILocation(line: 245, column: 35, scope: !4548)
!4553 = !DILocation(line: 245, column: 22, scope: !4548)
!4554 = !DILocation(line: 245, column: 7, scope: !4495)
!4555 = !DILocation(line: 246, column: 17, scope: !4548)
!4556 = !DILocation(line: 246, column: 21, scope: !4548)
!4557 = !DILocation(line: 246, column: 27, scope: !4548)
!4558 = !DILocation(line: 246, column: 32, scope: !4548)
!4559 = !DILocation(line: 246, column: 15, scope: !4548)
!4560 = !DILocation(line: 246, column: 5, scope: !4548)
!4561 = !DILocation(line: 249, column: 17, scope: !4495)
!4562 = !DILocation(line: 249, column: 27, scope: !4495)
!4563 = !DILocation(line: 249, column: 46, scope: !4495)
!4564 = !DILocation(line: 249, column: 3, scope: !4495)
!4565 = !DILocation(line: 249, column: 7, scope: !4495)
!4566 = !DILocation(line: 249, column: 15, scope: !4495)
!4567 = !DILocation(line: 250, column: 14, scope: !4495)
!4568 = !DILocation(line: 250, column: 18, scope: !4495)
!4569 = !DILocation(line: 250, column: 24, scope: !4495)
!4570 = !DILocation(line: 250, column: 29, scope: !4495)
!4571 = !DILocation(line: 250, column: 33, scope: !4495)
!4572 = !DILocation(line: 250, column: 3, scope: !4495)
!4573 = !DILocation(line: 250, column: 7, scope: !4495)
!4574 = !DILocation(line: 250, column: 12, scope: !4495)
!4575 = !DILocation(line: 251, column: 16, scope: !4495)
!4576 = !DILocation(line: 251, column: 26, scope: !4495)
!4577 = !DILocation(line: 251, column: 3, scope: !4495)
!4578 = !DILocation(line: 251, column: 7, scope: !4495)
!4579 = !DILocation(line: 251, column: 12, scope: !4495)
!4580 = !DILocation(line: 257, column: 17, scope: !4495)
!4581 = !DILocation(line: 257, column: 21, scope: !4495)
!4582 = !DILocation(line: 257, column: 16, scope: !4495)
!4583 = !DILocation(line: 257, column: 13, scope: !4495)
!4584 = !DILocation(line: 259, column: 13, scope: !4495)
!4585 = !DILocation(line: 259, column: 4, scope: !4495)
!4586 = !DILocation(line: 259, column: 11, scope: !4495)
!4587 = !DILocation(line: 260, column: 1, scope: !4495)
!4588 = distinct !DISubprogram(name: "bmp_iter_set", scope: !741, file: !741, line: 393, type: !4589, scopeLine: 394, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2035)
!4589 = !DISubroutineType(types: !4590)
!4590 = !{!902, !4498, !4502}
!4591 = !DILocalVariable(name: "bi", arg: 1, scope: !4588, file: !741, line: 393, type: !4498)
!4592 = !DILocation(line: 393, column: 32, scope: !4588)
!4593 = !DILocalVariable(name: "bit_no", arg: 2, scope: !4588, file: !741, line: 393, type: !4502)
!4594 = !DILocation(line: 393, column: 46, scope: !4588)
!4595 = !DILocation(line: 396, column: 7, scope: !4596)
!4596 = distinct !DILexicalBlock(scope: !4588, file: !741, line: 396, column: 7)
!4597 = !DILocation(line: 396, column: 11, scope: !4596)
!4598 = !DILocation(line: 396, column: 7, scope: !4588)
!4599 = !DILocation(line: 397, column: 5, scope: !4596)
!4600 = !DILabel(scope: !4601, name: "next_bit", file: !741, line: 398)
!4601 = distinct !DILexicalBlock(scope: !4596, file: !741, line: 397, column: 5)
!4602 = !DILocation(line: 398, column: 5, scope: !4601)
!4603 = !DILocation(line: 399, column: 7, scope: !4601)
!4604 = !DILocation(line: 399, column: 16, scope: !4601)
!4605 = !DILocation(line: 399, column: 20, scope: !4601)
!4606 = !DILocation(line: 399, column: 25, scope: !4601)
!4607 = !DILocation(line: 399, column: 14, scope: !4601)
!4608 = !DILocation(line: 401, column: 4, scope: !4609)
!4609 = distinct !DILexicalBlock(scope: !4601, file: !741, line: 400, column: 2)
!4610 = !DILocation(line: 401, column: 8, scope: !4609)
!4611 = !DILocation(line: 401, column: 13, scope: !4609)
!4612 = !DILocation(line: 402, column: 5, scope: !4609)
!4613 = !DILocation(line: 402, column: 12, scope: !4609)
!4614 = distinct !{!4614, !4603, !4615}
!4615 = !DILocation(line: 403, column: 2, scope: !4601)
!4616 = !DILocation(line: 404, column: 7, scope: !4601)
!4617 = !DILocation(line: 410, column: 16, scope: !4588)
!4618 = !DILocation(line: 410, column: 15, scope: !4588)
!4619 = !DILocation(line: 410, column: 23, scope: !4588)
!4620 = !DILocation(line: 410, column: 42, scope: !4588)
!4621 = !DILocation(line: 411, column: 7, scope: !4588)
!4622 = !DILocation(line: 411, column: 26, scope: !4588)
!4623 = !DILocation(line: 410, column: 4, scope: !4588)
!4624 = !DILocation(line: 410, column: 11, scope: !4588)
!4625 = !DILocation(line: 412, column: 3, scope: !4588)
!4626 = !DILocation(line: 412, column: 7, scope: !4588)
!4627 = !DILocation(line: 412, column: 14, scope: !4588)
!4628 = !DILocation(line: 414, column: 3, scope: !4588)
!4629 = !DILocation(line: 417, column: 7, scope: !4630)
!4630 = distinct !DILexicalBlock(scope: !4588, file: !741, line: 415, column: 5)
!4631 = !DILocation(line: 417, column: 14, scope: !4630)
!4632 = !DILocation(line: 417, column: 18, scope: !4630)
!4633 = !DILocation(line: 417, column: 26, scope: !4630)
!4634 = !DILocation(line: 419, column: 15, scope: !4635)
!4635 = distinct !DILexicalBlock(scope: !4630, file: !741, line: 418, column: 2)
!4636 = !DILocation(line: 419, column: 19, scope: !4635)
!4637 = !DILocation(line: 419, column: 25, scope: !4635)
!4638 = !DILocation(line: 419, column: 30, scope: !4635)
!4639 = !DILocation(line: 419, column: 34, scope: !4635)
!4640 = !DILocation(line: 419, column: 4, scope: !4635)
!4641 = !DILocation(line: 419, column: 8, scope: !4635)
!4642 = !DILocation(line: 419, column: 13, scope: !4635)
!4643 = !DILocation(line: 420, column: 8, scope: !4644)
!4644 = distinct !DILexicalBlock(scope: !4635, file: !741, line: 420, column: 8)
!4645 = !DILocation(line: 420, column: 12, scope: !4644)
!4646 = !DILocation(line: 420, column: 8, scope: !4635)
!4647 = !DILocation(line: 421, column: 6, scope: !4644)
!4648 = !DILocation(line: 422, column: 5, scope: !4635)
!4649 = !DILocation(line: 422, column: 12, scope: !4635)
!4650 = !DILocation(line: 423, column: 4, scope: !4635)
!4651 = !DILocation(line: 423, column: 8, scope: !4635)
!4652 = !DILocation(line: 423, column: 15, scope: !4635)
!4653 = distinct !{!4653, !4629, !4654}
!4654 = !DILocation(line: 424, column: 2, scope: !4630)
!4655 = !DILocation(line: 427, column: 18, scope: !4630)
!4656 = !DILocation(line: 427, column: 22, scope: !4630)
!4657 = !DILocation(line: 427, column: 28, scope: !4630)
!4658 = !DILocation(line: 427, column: 7, scope: !4630)
!4659 = !DILocation(line: 427, column: 11, scope: !4630)
!4660 = !DILocation(line: 427, column: 16, scope: !4630)
!4661 = !DILocation(line: 428, column: 12, scope: !4662)
!4662 = distinct !DILexicalBlock(scope: !4630, file: !741, line: 428, column: 11)
!4663 = !DILocation(line: 428, column: 16, scope: !4662)
!4664 = !DILocation(line: 428, column: 11, scope: !4630)
!4665 = !DILocation(line: 429, column: 2, scope: !4662)
!4666 = !DILocation(line: 430, column: 17, scope: !4630)
!4667 = !DILocation(line: 430, column: 21, scope: !4630)
!4668 = !DILocation(line: 430, column: 27, scope: !4630)
!4669 = !DILocation(line: 430, column: 32, scope: !4630)
!4670 = !DILocation(line: 430, column: 8, scope: !4630)
!4671 = !DILocation(line: 430, column: 15, scope: !4630)
!4672 = !DILocation(line: 431, column: 7, scope: !4630)
!4673 = !DILocation(line: 431, column: 11, scope: !4630)
!4674 = !DILocation(line: 431, column: 19, scope: !4630)
!4675 = distinct !{!4675, !4628, !4676}
!4676 = !DILocation(line: 432, column: 5, scope: !4588)
!4677 = !DILocation(line: 433, column: 1, scope: !4588)
!4678 = distinct !DISubprogram(name: "type_for_uid", scope: !3, file: !3, line: 1697, type: !4679, scopeLine: 1698, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2035)
!4679 = !DISubroutineType(types: !4680)
!4680 = !{!803, !789}
!4681 = !DILocalVariable(name: "uid", arg: 1, scope: !4678, file: !3, line: 1697, type: !789)
!4682 = !DILocation(line: 1697, column: 19, scope: !4678)
!4683 = !DILocalVariable(name: "result", scope: !4678, file: !3, line: 1699, type: !1971)
!4684 = !DILocation(line: 1699, column: 19, scope: !4678)
!4685 = !DILocation(line: 1700, column: 24, scope: !4678)
!4686 = !DILocation(line: 1700, column: 60, scope: !4678)
!4687 = !DILocation(line: 1700, column: 43, scope: !4678)
!4688 = !DILocation(line: 1700, column: 5, scope: !4678)
!4689 = !DILocation(line: 1702, column: 7, scope: !4690)
!4690 = distinct !DILexicalBlock(scope: !4678, file: !3, line: 1702, column: 7)
!4691 = !DILocation(line: 1702, column: 7, scope: !4678)
!4692 = !DILocation(line: 1703, column: 19, scope: !4690)
!4693 = !DILocation(line: 1703, column: 27, scope: !4690)
!4694 = !DILocation(line: 1703, column: 12, scope: !4690)
!4695 = !DILocation(line: 1703, column: 5, scope: !4690)
!4696 = !DILocation(line: 1704, column: 8, scope: !4690)
!4697 = !DILocation(line: 1705, column: 1, scope: !4678)
!4698 = distinct !DISubprogram(name: "close_type_seen", scope: !3, file: !3, line: 1736, type: !4699, scopeLine: 1737, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2035)
!4699 = !DISubroutineType(types: !4700)
!4700 = !{null, !803}
!4701 = !DILocalVariable(name: "type", arg: 1, scope: !4698, file: !3, line: 1736, type: !803)
!4702 = !DILocation(line: 1736, column: 23, scope: !4698)
!4703 = !DILocalVariable(name: "field", scope: !4698, file: !3, line: 1738, type: !803)
!4704 = !DILocation(line: 1738, column: 8, scope: !4698)
!4705 = !DILocalVariable(name: "i", scope: !4698, file: !3, line: 1739, type: !789)
!4706 = !DILocation(line: 1739, column: 7, scope: !4698)
!4707 = !DILocalVariable(name: "uid", scope: !4698, file: !3, line: 1739, type: !789)
!4708 = !DILocation(line: 1739, column: 10, scope: !4698)
!4709 = !DILocalVariable(name: "binfo", scope: !4698, file: !3, line: 1740, type: !803)
!4710 = !DILocation(line: 1740, column: 8, scope: !4698)
!4711 = !DILocalVariable(name: "base_binfo", scope: !4698, file: !3, line: 1740, type: !803)
!4712 = !DILocation(line: 1740, column: 15, scope: !4698)
!4713 = !DILocation(line: 1743, column: 26, scope: !4698)
!4714 = !DILocation(line: 1743, column: 10, scope: !4698)
!4715 = !DILocation(line: 1743, column: 8, scope: !4698)
!4716 = !DILocation(line: 1744, column: 8, scope: !4717)
!4717 = distinct !DILexicalBlock(scope: !4698, file: !3, line: 1744, column: 7)
!4718 = !DILocation(line: 1744, column: 7, scope: !4698)
!4719 = !DILocation(line: 1745, column: 5, scope: !4717)
!4720 = !DILocation(line: 1747, column: 9, scope: !4698)
!4721 = !DILocation(line: 1747, column: 7, scope: !4698)
!4722 = !DILocation(line: 1749, column: 21, scope: !4723)
!4723 = distinct !DILexicalBlock(scope: !4698, file: !3, line: 1749, column: 7)
!4724 = !DILocation(line: 1749, column: 43, scope: !4723)
!4725 = !DILocation(line: 1749, column: 7, scope: !4723)
!4726 = !DILocation(line: 1749, column: 7, scope: !4698)
!4727 = !DILocation(line: 1750, column: 5, scope: !4723)
!4728 = !DILocation(line: 1751, column: 19, scope: !4698)
!4729 = !DILocation(line: 1751, column: 41, scope: !4698)
!4730 = !DILocation(line: 1751, column: 3, scope: !4698)
!4731 = !DILocation(line: 1755, column: 7, scope: !4732)
!4732 = distinct !DILexicalBlock(scope: !4698, file: !3, line: 1755, column: 7)
!4733 = !DILocation(line: 1755, column: 7, scope: !4698)
!4734 = !DILocation(line: 1756, column: 18, scope: !4735)
!4735 = distinct !DILexicalBlock(scope: !4732, file: !3, line: 1756, column: 5)
!4736 = !DILocation(line: 1756, column: 16, scope: !4735)
!4737 = !DILocation(line: 1756, column: 39, scope: !4735)
!4738 = !DILocation(line: 1756, column: 10, scope: !4735)
!4739 = !DILocation(line: 1757, column: 3, scope: !4740)
!4740 = distinct !DILexicalBlock(scope: !4735, file: !3, line: 1756, column: 5)
!4741 = !DILocation(line: 1756, column: 5, scope: !4735)
!4742 = !DILocalVariable(name: "binfo_type", scope: !4743, file: !3, line: 1759, type: !803)
!4743 = distinct !DILexicalBlock(scope: !4740, file: !3, line: 1758, column: 7)
!4744 = !DILocation(line: 1759, column: 7, scope: !4743)
!4745 = !DILocation(line: 1759, column: 20, scope: !4743)
!4746 = !DILocalVariable(name: "subtype_map", scope: !4743, file: !3, line: 1760, type: !737)
!4747 = !DILocation(line: 1760, column: 9, scope: !4743)
!4748 = !DILocation(line: 1761, column: 5, scope: !4743)
!4749 = !DILocation(line: 1760, column: 23, scope: !4743)
!4750 = !DILocation(line: 1762, column: 18, scope: !4743)
!4751 = !DILocation(line: 1762, column: 31, scope: !4743)
!4752 = !DILocation(line: 1762, column: 2, scope: !4743)
!4753 = !DILocation(line: 1763, column: 35, scope: !4743)
!4754 = !DILocation(line: 1763, column: 19, scope: !4743)
!4755 = !DILocation(line: 1763, column: 2, scope: !4743)
!4756 = !DILocation(line: 1764, column: 7, scope: !4743)
!4757 = !DILocation(line: 1757, column: 47, scope: !4740)
!4758 = !DILocation(line: 1756, column: 5, scope: !4740)
!4759 = distinct !{!4759, !4741, !4760}
!4760 = !DILocation(line: 1764, column: 7, scope: !4735)
!4761 = !DILocation(line: 1768, column: 16, scope: !4762)
!4762 = distinct !DILexicalBlock(scope: !4698, file: !3, line: 1768, column: 3)
!4763 = !DILocation(line: 1768, column: 14, scope: !4762)
!4764 = !DILocation(line: 1768, column: 8, scope: !4762)
!4765 = !DILocation(line: 1769, column: 8, scope: !4766)
!4766 = distinct !DILexicalBlock(scope: !4762, file: !3, line: 1768, column: 3)
!4767 = !DILocation(line: 1768, column: 3, scope: !4762)
!4768 = !DILocalVariable(name: "field_type", scope: !4769, file: !3, line: 1772, type: !803)
!4769 = distinct !DILexicalBlock(scope: !4766, file: !3, line: 1771, column: 5)
!4770 = !DILocation(line: 1772, column: 12, scope: !4769)
!4771 = !DILocation(line: 1773, column: 11, scope: !4772)
!4772 = distinct !DILexicalBlock(scope: !4769, file: !3, line: 1773, column: 11)
!4773 = !DILocation(line: 1773, column: 29, scope: !4772)
!4774 = !DILocation(line: 1773, column: 11, scope: !4769)
!4775 = !DILocation(line: 1774, column: 2, scope: !4772)
!4776 = !DILocation(line: 1776, column: 20, scope: !4769)
!4777 = !DILocation(line: 1776, column: 18, scope: !4769)
!4778 = !DILocation(line: 1777, column: 68, scope: !4779)
!4779 = distinct !DILexicalBlock(scope: !4769, file: !3, line: 1777, column: 11)
!4780 = !DILocation(line: 1777, column: 11, scope: !4779)
!4781 = !DILocation(line: 1777, column: 80, scope: !4779)
!4782 = !DILocation(line: 1777, column: 11, scope: !4769)
!4783 = !DILocation(line: 1778, column: 35, scope: !4779)
!4784 = !DILocation(line: 1778, column: 19, scope: !4779)
!4785 = !DILocation(line: 1778, column: 2, scope: !4779)
!4786 = !DILocation(line: 1779, column: 5, scope: !4769)
!4787 = !DILocation(line: 1770, column: 16, scope: !4766)
!4788 = !DILocation(line: 1770, column: 14, scope: !4766)
!4789 = !DILocation(line: 1768, column: 3, scope: !4766)
!4790 = distinct !{!4790, !4767, !4791}
!4791 = !DILocation(line: 1779, column: 5, scope: !4762)
!4792 = !DILocation(line: 1780, column: 1, scope: !4698)
!4793 = distinct !DISubprogram(name: "bmp_iter_next", scope: !741, file: !741, line: 382, type: !4794, scopeLine: 383, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2035)
!4794 = !DISubroutineType(types: !4795)
!4795 = !{null, !4498, !4502}
!4796 = !DILocalVariable(name: "bi", arg: 1, scope: !4793, file: !741, line: 382, type: !4498)
!4797 = !DILocation(line: 382, column: 33, scope: !4793)
!4798 = !DILocalVariable(name: "bit_no", arg: 2, scope: !4793, file: !741, line: 382, type: !4502)
!4799 = !DILocation(line: 382, column: 47, scope: !4793)
!4800 = !DILocation(line: 384, column: 3, scope: !4793)
!4801 = !DILocation(line: 384, column: 7, scope: !4793)
!4802 = !DILocation(line: 384, column: 12, scope: !4793)
!4803 = !DILocation(line: 385, column: 4, scope: !4793)
!4804 = !DILocation(line: 385, column: 11, scope: !4793)
!4805 = !DILocation(line: 386, column: 1, scope: !4793)
!4806 = distinct !DISubprogram(name: "close_type_exposed_parameter", scope: !3, file: !3, line: 1788, type: !4699, scopeLine: 1789, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2035)
!4807 = !DILocalVariable(name: "type", arg: 1, scope: !4806, file: !3, line: 1788, type: !803)
!4808 = !DILocation(line: 1788, column: 36, scope: !4806)
!4809 = !DILocalVariable(name: "field", scope: !4806, file: !3, line: 1790, type: !803)
!4810 = !DILocation(line: 1790, column: 8, scope: !4806)
!4811 = !DILocalVariable(name: "uid", scope: !4806, file: !3, line: 1791, type: !789)
!4812 = !DILocation(line: 1791, column: 7, scope: !4806)
!4813 = !DILocation(line: 1793, column: 26, scope: !4806)
!4814 = !DILocation(line: 1793, column: 10, scope: !4806)
!4815 = !DILocation(line: 1793, column: 8, scope: !4806)
!4816 = !DILocation(line: 1794, column: 8, scope: !4817)
!4817 = distinct !DILexicalBlock(scope: !4806, file: !3, line: 1794, column: 7)
!4818 = !DILocation(line: 1794, column: 7, scope: !4806)
!4819 = !DILocation(line: 1795, column: 5, scope: !4817)
!4820 = !DILocation(line: 1796, column: 9, scope: !4806)
!4821 = !DILocation(line: 1796, column: 7, scope: !4806)
!4822 = !DILocation(line: 1797, column: 3, scope: !4806)
!4823 = !DILocation(line: 1799, column: 21, scope: !4824)
!4824 = distinct !DILexicalBlock(scope: !4806, file: !3, line: 1799, column: 7)
!4825 = !DILocation(line: 1799, column: 43, scope: !4824)
!4826 = !DILocation(line: 1799, column: 7, scope: !4824)
!4827 = !DILocation(line: 1799, column: 7, scope: !4806)
!4828 = !DILocation(line: 1800, column: 5, scope: !4824)
!4829 = !DILocation(line: 1801, column: 19, scope: !4806)
!4830 = !DILocation(line: 1801, column: 41, scope: !4806)
!4831 = !DILocation(line: 1801, column: 3, scope: !4806)
!4832 = !DILocation(line: 1805, column: 16, scope: !4833)
!4833 = distinct !DILexicalBlock(scope: !4806, file: !3, line: 1805, column: 3)
!4834 = !DILocation(line: 1805, column: 14, scope: !4833)
!4835 = !DILocation(line: 1805, column: 8, scope: !4833)
!4836 = !DILocation(line: 1806, column: 8, scope: !4837)
!4837 = distinct !DILexicalBlock(scope: !4833, file: !3, line: 1805, column: 3)
!4838 = !DILocation(line: 1805, column: 3, scope: !4833)
!4839 = !DILocalVariable(name: "field_type", scope: !4840, file: !3, line: 1809, type: !803)
!4840 = distinct !DILexicalBlock(scope: !4837, file: !3, line: 1808, column: 5)
!4841 = !DILocation(line: 1809, column: 12, scope: !4840)
!4842 = !DILocation(line: 1811, column: 11, scope: !4843)
!4843 = distinct !DILexicalBlock(scope: !4840, file: !3, line: 1811, column: 11)
!4844 = !DILocation(line: 1811, column: 29, scope: !4843)
!4845 = !DILocation(line: 1811, column: 11, scope: !4840)
!4846 = !DILocation(line: 1812, column: 2, scope: !4843)
!4847 = !DILocation(line: 1814, column: 36, scope: !4840)
!4848 = !DILocation(line: 1814, column: 20, scope: !4840)
!4849 = !DILocation(line: 1814, column: 18, scope: !4840)
!4850 = !DILocation(line: 1815, column: 30, scope: !4840)
!4851 = !DILocation(line: 1815, column: 7, scope: !4840)
!4852 = !DILocation(line: 1818, column: 59, scope: !4853)
!4853 = distinct !DILexicalBlock(scope: !4840, file: !3, line: 1818, column: 11)
!4854 = !DILocation(line: 1818, column: 11, scope: !4853)
!4855 = !DILocation(line: 1818, column: 71, scope: !4853)
!4856 = !DILocation(line: 1818, column: 11, scope: !4840)
!4857 = !DILocation(line: 1819, column: 32, scope: !4853)
!4858 = !DILocation(line: 1819, column: 2, scope: !4853)
!4859 = !DILocation(line: 1820, column: 5, scope: !4840)
!4860 = !DILocation(line: 1807, column: 16, scope: !4837)
!4861 = !DILocation(line: 1807, column: 14, scope: !4837)
!4862 = !DILocation(line: 1805, column: 3, scope: !4837)
!4863 = distinct !{!4863, !4838, !4864}
!4864 = !DILocation(line: 1820, column: 5, scope: !4833)
!4865 = !DILocation(line: 1821, column: 1, scope: !4806)
!4866 = distinct !DISubprogram(name: "close_type_full_escape", scope: !3, file: !3, line: 1838, type: !4699, scopeLine: 1839, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2035)
!4867 = !DILocalVariable(name: "type", arg: 1, scope: !4866, file: !3, line: 1838, type: !803)
!4868 = !DILocation(line: 1838, column: 30, scope: !4866)
!4869 = !DILocalVariable(name: "field", scope: !4866, file: !3, line: 1840, type: !803)
!4870 = !DILocation(line: 1840, column: 8, scope: !4866)
!4871 = !DILocalVariable(name: "i", scope: !4866, file: !3, line: 1841, type: !7)
!4872 = !DILocation(line: 1841, column: 16, scope: !4866)
!4873 = !DILocalVariable(name: "uid", scope: !4866, file: !3, line: 1842, type: !789)
!4874 = !DILocation(line: 1842, column: 7, scope: !4866)
!4875 = !DILocalVariable(name: "binfo", scope: !4866, file: !3, line: 1843, type: !803)
!4876 = !DILocation(line: 1843, column: 8, scope: !4866)
!4877 = !DILocalVariable(name: "base_binfo", scope: !4866, file: !3, line: 1843, type: !803)
!4878 = !DILocation(line: 1843, column: 15, scope: !4866)
!4879 = !DILocalVariable(name: "bi", scope: !4866, file: !3, line: 1844, type: !2930)
!4880 = !DILocation(line: 1844, column: 19, scope: !4866)
!4881 = !DILocalVariable(name: "subtype_map", scope: !4866, file: !3, line: 1845, type: !737)
!4882 = !DILocation(line: 1845, column: 10, scope: !4866)
!4883 = !DILocalVariable(name: "address_result", scope: !4866, file: !3, line: 1846, type: !1971)
!4884 = !DILocation(line: 1846, column: 19, scope: !4866)
!4885 = !DILocation(line: 1849, column: 26, scope: !4866)
!4886 = !DILocation(line: 1849, column: 10, scope: !4866)
!4887 = !DILocation(line: 1849, column: 8, scope: !4866)
!4888 = !DILocation(line: 1850, column: 8, scope: !4889)
!4889 = distinct !DILexicalBlock(scope: !4866, file: !3, line: 1850, column: 7)
!4890 = !DILocation(line: 1850, column: 7, scope: !4866)
!4891 = !DILocation(line: 1851, column: 5, scope: !4889)
!4892 = !DILocation(line: 1852, column: 9, scope: !4866)
!4893 = !DILocation(line: 1852, column: 7, scope: !4866)
!4894 = !DILocation(line: 1854, column: 21, scope: !4895)
!4895 = distinct !DILexicalBlock(scope: !4866, file: !3, line: 1854, column: 7)
!4896 = !DILocation(line: 1854, column: 43, scope: !4895)
!4897 = !DILocation(line: 1854, column: 7, scope: !4895)
!4898 = !DILocation(line: 1854, column: 7, scope: !4866)
!4899 = !DILocation(line: 1855, column: 5, scope: !4895)
!4900 = !DILocation(line: 1856, column: 19, scope: !4866)
!4901 = !DILocation(line: 1856, column: 41, scope: !4866)
!4902 = !DILocation(line: 1856, column: 3, scope: !4866)
!4903 = !DILocation(line: 1858, column: 38, scope: !4866)
!4904 = !DILocation(line: 1858, column: 17, scope: !4866)
!4905 = !DILocation(line: 1858, column: 15, scope: !4866)
!4906 = !DILocation(line: 1862, column: 7, scope: !4907)
!4907 = distinct !DILexicalBlock(scope: !4866, file: !3, line: 1862, column: 7)
!4908 = !DILocation(line: 1862, column: 7, scope: !4866)
!4909 = !DILocation(line: 1863, column: 18, scope: !4910)
!4910 = distinct !DILexicalBlock(scope: !4907, file: !3, line: 1863, column: 5)
!4911 = !DILocation(line: 1863, column: 16, scope: !4910)
!4912 = !DILocation(line: 1863, column: 39, scope: !4910)
!4913 = !DILocation(line: 1863, column: 10, scope: !4910)
!4914 = !DILocation(line: 1864, column: 3, scope: !4915)
!4915 = distinct !DILexicalBlock(scope: !4910, file: !3, line: 1863, column: 5)
!4916 = !DILocation(line: 1863, column: 5, scope: !4910)
!4917 = !DILocalVariable(name: "binfotype", scope: !4918, file: !3, line: 1866, type: !803)
!4918 = distinct !DILexicalBlock(scope: !4915, file: !3, line: 1865, column: 7)
!4919 = !DILocation(line: 1866, column: 7, scope: !4918)
!4920 = !DILocation(line: 1866, column: 19, scope: !4918)
!4921 = !DILocation(line: 1867, column: 25, scope: !4918)
!4922 = !DILocation(line: 1867, column: 14, scope: !4918)
!4923 = !DILocation(line: 1867, column: 12, scope: !4918)
!4924 = !DILocation(line: 1868, column: 26, scope: !4918)
!4925 = !DILocation(line: 1868, column: 2, scope: !4918)
!4926 = !DILocation(line: 1869, column: 7, scope: !4918)
!4927 = !DILocation(line: 1864, column: 47, scope: !4915)
!4928 = !DILocation(line: 1863, column: 5, scope: !4915)
!4929 = distinct !{!4929, !4916, !4930}
!4930 = !DILocation(line: 1869, column: 7, scope: !4910)
!4931 = !DILocation(line: 1873, column: 7, scope: !4932)
!4932 = distinct !DILexicalBlock(scope: !4866, file: !3, line: 1873, column: 7)
!4933 = !DILocation(line: 1873, column: 7, scope: !4866)
!4934 = !DILocation(line: 1874, column: 5, scope: !4935)
!4935 = distinct !DILexicalBlock(scope: !4932, file: !3, line: 1874, column: 5)
!4936 = !DILocation(line: 1874, column: 5, scope: !4937)
!4937 = distinct !DILexicalBlock(scope: !4935, file: !3, line: 1874, column: 5)
!4938 = !DILocalVariable(name: "subtype", scope: !4939, file: !3, line: 1876, type: !803)
!4939 = distinct !DILexicalBlock(scope: !4937, file: !3, line: 1875, column: 7)
!4940 = !DILocation(line: 1876, column: 7, scope: !4939)
!4941 = !DILocation(line: 1876, column: 31, scope: !4939)
!4942 = !DILocation(line: 1876, column: 17, scope: !4939)
!4943 = !DILocation(line: 1877, column: 23, scope: !4939)
!4944 = !DILocation(line: 1877, column: 12, scope: !4939)
!4945 = !DILocation(line: 1877, column: 10, scope: !4939)
!4946 = !DILocation(line: 1878, column: 26, scope: !4939)
!4947 = !DILocation(line: 1878, column: 2, scope: !4939)
!4948 = !DILocation(line: 1879, column: 7, scope: !4939)
!4949 = distinct !{!4949, !4934, !4950}
!4950 = !DILocation(line: 1879, column: 7, scope: !4935)
!4951 = !DILocation(line: 1883, column: 16, scope: !4952)
!4952 = distinct !DILexicalBlock(scope: !4866, file: !3, line: 1883, column: 3)
!4953 = !DILocation(line: 1883, column: 14, scope: !4952)
!4954 = !DILocation(line: 1883, column: 8, scope: !4952)
!4955 = !DILocation(line: 1884, column: 8, scope: !4956)
!4956 = distinct !DILexicalBlock(scope: !4952, file: !3, line: 1883, column: 3)
!4957 = !DILocation(line: 1883, column: 3, scope: !4952)
!4958 = !DILocalVariable(name: "field_type", scope: !4959, file: !3, line: 1887, type: !803)
!4959 = distinct !DILexicalBlock(scope: !4956, file: !3, line: 1886, column: 5)
!4960 = !DILocation(line: 1887, column: 12, scope: !4959)
!4961 = !DILocation(line: 1888, column: 11, scope: !4962)
!4962 = distinct !DILexicalBlock(scope: !4959, file: !3, line: 1888, column: 11)
!4963 = !DILocation(line: 1888, column: 29, scope: !4962)
!4964 = !DILocation(line: 1888, column: 11, scope: !4959)
!4965 = !DILocation(line: 1889, column: 2, scope: !4962)
!4966 = !DILocation(line: 1891, column: 20, scope: !4959)
!4967 = !DILocation(line: 1891, column: 18, scope: !4959)
!4968 = !DILocation(line: 1892, column: 68, scope: !4969)
!4969 = distinct !DILexicalBlock(scope: !4959, file: !3, line: 1892, column: 11)
!4970 = !DILocation(line: 1892, column: 11, scope: !4969)
!4971 = !DILocation(line: 1892, column: 80, scope: !4969)
!4972 = !DILocation(line: 1892, column: 11, scope: !4959)
!4973 = !DILocation(line: 1894, column: 28, scope: !4974)
!4974 = distinct !DILexicalBlock(scope: !4969, file: !3, line: 1893, column: 2)
!4975 = !DILocation(line: 1894, column: 17, scope: !4974)
!4976 = !DILocation(line: 1894, column: 15, scope: !4974)
!4977 = !DILocation(line: 1895, column: 28, scope: !4974)
!4978 = !DILocation(line: 1895, column: 4, scope: !4974)
!4979 = !DILocation(line: 1896, column: 2, scope: !4974)
!4980 = !DILocation(line: 1897, column: 5, scope: !4959)
!4981 = !DILocation(line: 1885, column: 16, scope: !4956)
!4982 = !DILocation(line: 1885, column: 14, scope: !4956)
!4983 = !DILocation(line: 1883, column: 3, scope: !4956)
!4984 = distinct !{!4984, !4957, !4985}
!4985 = !DILocation(line: 1897, column: 5, scope: !4952)
!4986 = !DILocation(line: 1901, column: 39, scope: !4866)
!4987 = !DILocation(line: 1902, column: 28, scope: !4866)
!4988 = !DILocation(line: 1902, column: 11, scope: !4866)
!4989 = !DILocation(line: 1901, column: 20, scope: !4866)
!4990 = !DILocation(line: 1901, column: 18, scope: !4866)
!4991 = !DILocation(line: 1903, column: 7, scope: !4992)
!4992 = distinct !DILexicalBlock(scope: !4866, file: !3, line: 1903, column: 7)
!4993 = !DILocation(line: 1903, column: 7, scope: !4866)
!4994 = !DILocalVariable(name: "containing_classes", scope: !4995, file: !3, line: 1905, type: !737)
!4995 = distinct !DILexicalBlock(scope: !4992, file: !3, line: 1904, column: 5)
!4996 = !DILocation(line: 1905, column: 14, scope: !4995)
!4997 = !DILocation(line: 1905, column: 44, scope: !4995)
!4998 = !DILocation(line: 1905, column: 60, scope: !4995)
!4999 = !DILocation(line: 1905, column: 35, scope: !4995)
!5000 = !DILocation(line: 1906, column: 7, scope: !5001)
!5001 = distinct !DILexicalBlock(scope: !4995, file: !3, line: 1906, column: 7)
!5002 = !DILocation(line: 1906, column: 7, scope: !5003)
!5003 = distinct !DILexicalBlock(scope: !5001, file: !3, line: 1906, column: 7)
!5004 = !DILocation(line: 1908, column: 42, scope: !5005)
!5005 = distinct !DILexicalBlock(scope: !5003, file: !3, line: 1907, column: 2)
!5006 = !DILocation(line: 1908, column: 28, scope: !5005)
!5007 = !DILocation(line: 1908, column: 4, scope: !5005)
!5008 = !DILocation(line: 1909, column: 2, scope: !5005)
!5009 = distinct !{!5009, !5000, !5010}
!5010 = !DILocation(line: 1909, column: 2, scope: !5001)
!5011 = !DILocation(line: 1910, column: 5, scope: !4995)
!5012 = !DILocation(line: 1911, column: 1, scope: !4866)
!5013 = distinct !DISubprogram(name: "close_addressof_down", scope: !3, file: !3, line: 1918, type: !5014, scopeLine: 1919, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2035)
!5014 = !DISubroutineType(types: !5015)
!5015 = !{!737, !789}
!5016 = !DILocalVariable(name: "uid", arg: 1, scope: !5013, file: !3, line: 1918, type: !789)
!5017 = !DILocation(line: 1918, column: 27, scope: !5013)
!5018 = !DILocalVariable(name: "bi", scope: !5013, file: !3, line: 1920, type: !2930)
!5019 = !DILocation(line: 1920, column: 19, scope: !5013)
!5020 = !DILocalVariable(name: "result", scope: !5013, file: !3, line: 1921, type: !1971)
!5021 = !DILocation(line: 1921, column: 19, scope: !5013)
!5022 = !DILocation(line: 1922, column: 24, scope: !5013)
!5023 = !DILocation(line: 1922, column: 68, scope: !5013)
!5024 = !DILocation(line: 1922, column: 51, scope: !5013)
!5025 = !DILocation(line: 1922, column: 5, scope: !5013)
!5026 = !DILocalVariable(name: "map", scope: !5013, file: !3, line: 1923, type: !737)
!5027 = !DILocation(line: 1923, column: 10, scope: !5013)
!5028 = !DILocalVariable(name: "new_map", scope: !5013, file: !3, line: 1924, type: !737)
!5029 = !DILocation(line: 1924, column: 10, scope: !5013)
!5030 = !DILocalVariable(name: "i", scope: !5013, file: !3, line: 1925, type: !7)
!5031 = !DILocation(line: 1925, column: 16, scope: !5013)
!5032 = !DILocation(line: 1927, column: 7, scope: !5033)
!5033 = distinct !DILexicalBlock(scope: !5013, file: !3, line: 1927, column: 7)
!5034 = !DILocation(line: 1927, column: 7, scope: !5013)
!5035 = !DILocation(line: 1928, column: 20, scope: !5033)
!5036 = !DILocation(line: 1928, column: 28, scope: !5033)
!5037 = !DILocation(line: 1928, column: 11, scope: !5033)
!5038 = !DILocation(line: 1928, column: 9, scope: !5033)
!5039 = !DILocation(line: 1928, column: 5, scope: !5033)
!5040 = !DILocation(line: 1930, column: 5, scope: !5033)
!5041 = !DILocation(line: 1932, column: 21, scope: !5042)
!5042 = distinct !DILexicalBlock(scope: !5013, file: !3, line: 1932, column: 7)
!5043 = !DILocation(line: 1932, column: 43, scope: !5042)
!5044 = !DILocation(line: 1932, column: 7, scope: !5042)
!5045 = !DILocation(line: 1932, column: 7, scope: !5013)
!5046 = !DILocation(line: 1933, column: 12, scope: !5042)
!5047 = !DILocation(line: 1933, column: 5, scope: !5042)
!5048 = !DILocation(line: 1934, column: 19, scope: !5013)
!5049 = !DILocation(line: 1934, column: 41, scope: !5013)
!5050 = !DILocation(line: 1934, column: 3, scope: !5013)
!5051 = !DILocation(line: 1938, column: 21, scope: !5052)
!5052 = distinct !DILexicalBlock(scope: !5013, file: !3, line: 1938, column: 7)
!5053 = !DILocation(line: 1938, column: 47, scope: !5052)
!5054 = !DILocation(line: 1938, column: 7, scope: !5052)
!5055 = !DILocation(line: 1938, column: 7, scope: !5013)
!5056 = !DILocation(line: 1940, column: 7, scope: !5057)
!5057 = distinct !DILexicalBlock(scope: !5052, file: !3, line: 1939, column: 5)
!5058 = !DILocation(line: 1941, column: 26, scope: !5057)
!5059 = !DILocation(line: 1941, column: 70, scope: !5057)
!5060 = !DILocation(line: 1941, column: 53, scope: !5057)
!5061 = !DILocation(line: 1941, column: 7, scope: !5057)
!5062 = !DILocation(line: 1942, column: 7, scope: !5057)
!5063 = !DILocation(line: 1947, column: 13, scope: !5013)
!5064 = !DILocation(line: 1947, column: 11, scope: !5013)
!5065 = !DILocation(line: 1949, column: 3, scope: !5066)
!5066 = distinct !DILexicalBlock(scope: !5013, file: !3, line: 1949, column: 3)
!5067 = !DILocation(line: 1949, column: 3, scope: !5068)
!5068 = distinct !DILexicalBlock(scope: !5066, file: !3, line: 1949, column: 3)
!5069 = !DILocalVariable(name: "submap", scope: !5070, file: !3, line: 1951, type: !737)
!5070 = distinct !DILexicalBlock(scope: !5068, file: !3, line: 1950, column: 5)
!5071 = !DILocation(line: 1951, column: 14, scope: !5070)
!5072 = !DILocation(line: 1951, column: 45, scope: !5070)
!5073 = !DILocation(line: 1951, column: 23, scope: !5070)
!5074 = !DILocation(line: 1952, column: 23, scope: !5070)
!5075 = !DILocation(line: 1952, column: 32, scope: !5070)
!5076 = !DILocation(line: 1952, column: 7, scope: !5070)
!5077 = !DILocation(line: 1953, column: 11, scope: !5078)
!5078 = distinct !DILexicalBlock(scope: !5070, file: !3, line: 1953, column: 11)
!5079 = !DILocation(line: 1953, column: 11, scope: !5070)
!5080 = !DILocation(line: 1954, column: 19, scope: !5078)
!5081 = !DILocation(line: 1954, column: 28, scope: !5078)
!5082 = !DILocation(line: 1954, column: 2, scope: !5078)
!5083 = !DILocation(line: 1955, column: 5, scope: !5070)
!5084 = distinct !{!5084, !5065, !5085}
!5085 = !DILocation(line: 1955, column: 5, scope: !5066)
!5086 = !DILocation(line: 1956, column: 38, scope: !5013)
!5087 = !DILocation(line: 1956, column: 19, scope: !5013)
!5088 = !DILocation(line: 1956, column: 3, scope: !5013)
!5089 = !DILocation(line: 1956, column: 11, scope: !5013)
!5090 = !DILocation(line: 1956, column: 17, scope: !5013)
!5091 = !DILocation(line: 1958, column: 3, scope: !5013)
!5092 = !DILocation(line: 1959, column: 10, scope: !5013)
!5093 = !DILocation(line: 1959, column: 3, scope: !5013)
!5094 = !DILocation(line: 1960, column: 1, scope: !5013)
!5095 = distinct !DISubprogram(name: "compare_type_brand", scope: !3, file: !3, line: 180, type: !1982, scopeLine: 181, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2035)
!5096 = !DILocalVariable(name: "sk1", arg: 1, scope: !5095, file: !3, line: 180, type: !733)
!5097 = !DILocation(line: 180, column: 36, scope: !5095)
!5098 = !DILocalVariable(name: "sk2", arg: 2, scope: !5095, file: !3, line: 180, type: !733)
!5099 = !DILocation(line: 180, column: 56, scope: !5095)
!5100 = !DILocalVariable(name: "k1", scope: !5095, file: !3, line: 182, type: !1916)
!5101 = !DILocation(line: 182, column: 25, scope: !5095)
!5102 = !DILocation(line: 182, column: 54, scope: !5095)
!5103 = !DILocation(line: 182, column: 30, scope: !5095)
!5104 = !DILocalVariable(name: "k2", scope: !5095, file: !3, line: 183, type: !1916)
!5105 = !DILocation(line: 183, column: 25, scope: !5095)
!5106 = !DILocation(line: 183, column: 54, scope: !5095)
!5107 = !DILocation(line: 183, column: 30, scope: !5095)
!5108 = !DILocalVariable(name: "value", scope: !5095, file: !3, line: 185, type: !789)
!5109 = !DILocation(line: 185, column: 7, scope: !5095)
!5110 = !DILocation(line: 185, column: 22, scope: !5095)
!5111 = !DILocation(line: 185, column: 26, scope: !5095)
!5112 = !DILocation(line: 185, column: 32, scope: !5095)
!5113 = !DILocation(line: 185, column: 36, scope: !5095)
!5114 = !DILocation(line: 185, column: 15, scope: !5095)
!5115 = !DILocation(line: 186, column: 7, scope: !5116)
!5116 = distinct !DILexicalBlock(scope: !5095, file: !3, line: 186, column: 7)
!5117 = !DILocation(line: 186, column: 13, scope: !5116)
!5118 = !DILocation(line: 186, column: 7, scope: !5095)
!5119 = !DILocation(line: 187, column: 12, scope: !5116)
!5120 = !DILocation(line: 187, column: 16, scope: !5116)
!5121 = !DILocation(line: 187, column: 22, scope: !5116)
!5122 = !DILocation(line: 187, column: 26, scope: !5116)
!5123 = !DILocation(line: 187, column: 20, scope: !5116)
!5124 = !DILocation(line: 187, column: 5, scope: !5116)
!5125 = !DILocation(line: 189, column: 12, scope: !5116)
!5126 = !DILocation(line: 189, column: 5, scope: !5116)
!5127 = !DILocation(line: 190, column: 1, scope: !5095)
!5128 = distinct !DISubprogram(name: "mark_interesting_type", scope: !3, file: !3, line: 507, type: !5129, scopeLine: 508, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2035)
!5129 = !DISubroutineType(types: !5130)
!5130 = !{null, !803, !502}
!5131 = !DILocalVariable(name: "type", arg: 1, scope: !5128, file: !3, line: 507, type: !803)
!5132 = !DILocation(line: 507, column: 29, scope: !5128)
!5133 = !DILocalVariable(name: "escape_status", arg: 2, scope: !5128, file: !3, line: 507, type: !502)
!5134 = !DILocation(line: 507, column: 49, scope: !5128)
!5135 = !DILocation(line: 509, column: 8, scope: !5136)
!5136 = distinct !DILexicalBlock(scope: !5128, file: !3, line: 509, column: 7)
!5137 = !DILocation(line: 509, column: 7, scope: !5128)
!5138 = !DILocation(line: 509, column: 14, scope: !5136)
!5139 = !DILocation(line: 510, column: 55, scope: !5140)
!5140 = distinct !DILexicalBlock(scope: !5128, file: !3, line: 510, column: 7)
!5141 = !DILocation(line: 510, column: 7, scope: !5140)
!5142 = !DILocation(line: 510, column: 61, scope: !5140)
!5143 = !DILocation(line: 510, column: 7, scope: !5128)
!5144 = !DILocation(line: 512, column: 12, scope: !5145)
!5145 = distinct !DILexicalBlock(scope: !5146, file: !3, line: 512, column: 11)
!5146 = distinct !DILexicalBlock(scope: !5140, file: !3, line: 511, column: 5)
!5147 = !DILocation(line: 512, column: 26, scope: !5145)
!5148 = !DILocation(line: 513, column: 4, scope: !5145)
!5149 = !DILocation(line: 513, column: 7, scope: !5145)
!5150 = !DILocation(line: 512, column: 11, scope: !5146)
!5151 = !DILocation(line: 517, column: 13, scope: !5145)
!5152 = !DILocation(line: 517, column: 2, scope: !5145)
!5153 = !DILocation(line: 519, column: 13, scope: !5145)
!5154 = !DILocation(line: 519, column: 19, scope: !5145)
!5155 = !DILocation(line: 519, column: 2, scope: !5145)
!5156 = !DILocation(line: 520, column: 5, scope: !5146)
!5157 = !DILocation(line: 521, column: 1, scope: !5128)
!5158 = distinct !DISubprogram(name: "check_tree", scope: !3, file: !3, line: 1129, type: !4699, scopeLine: 1130, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2035)
!5159 = !DILocalVariable(name: "t", arg: 1, scope: !5158, file: !3, line: 1129, type: !803)
!5160 = !DILocation(line: 1129, column: 18, scope: !5158)
!5161 = !DILocation(line: 1133, column: 3, scope: !5158)
!5162 = !DILocation(line: 1133, column: 31, scope: !5158)
!5163 = !DILocation(line: 1133, column: 10, scope: !5158)
!5164 = !DILocation(line: 1135, column: 11, scope: !5165)
!5165 = distinct !DILexicalBlock(scope: !5166, file: !3, line: 1135, column: 11)
!5166 = distinct !DILexicalBlock(scope: !5158, file: !3, line: 1134, column: 5)
!5167 = !DILocation(line: 1135, column: 25, scope: !5165)
!5168 = !DILocation(line: 1135, column: 11, scope: !5166)
!5169 = !DILocation(line: 1136, column: 17, scope: !5165)
!5170 = !DILocation(line: 1136, column: 2, scope: !5165)
!5171 = !DILocation(line: 1137, column: 11, scope: !5166)
!5172 = !DILocation(line: 1137, column: 9, scope: !5166)
!5173 = distinct !{!5173, !5161, !5174}
!5174 = !DILocation(line: 1138, column: 5, scope: !5158)
!5175 = !DILocation(line: 1140, column: 7, scope: !5176)
!5176 = distinct !DILexicalBlock(scope: !5158, file: !3, line: 1140, column: 7)
!5177 = !DILocation(line: 1140, column: 7, scope: !5158)
!5178 = !DILocation(line: 1142, column: 17, scope: !5176)
!5179 = !DILocation(line: 1142, column: 5, scope: !5176)
!5180 = !DILocation(line: 1144, column: 7, scope: !5181)
!5181 = distinct !DILexicalBlock(scope: !5158, file: !3, line: 1144, column: 7)
!5182 = !DILocation(line: 1144, column: 21, scope: !5181)
!5183 = !DILocation(line: 1144, column: 25, scope: !5181)
!5184 = !DILocation(line: 1144, column: 39, scope: !5181)
!5185 = !DILocation(line: 1144, column: 7, scope: !5158)
!5186 = !DILocation(line: 1146, column: 22, scope: !5187)
!5187 = distinct !DILexicalBlock(scope: !5181, file: !3, line: 1145, column: 5)
!5188 = !DILocation(line: 1146, column: 7, scope: !5187)
!5189 = !DILocation(line: 1147, column: 11, scope: !5190)
!5190 = distinct !DILexicalBlock(scope: !5187, file: !3, line: 1147, column: 11)
!5191 = !DILocation(line: 1147, column: 22, scope: !5190)
!5192 = !DILocation(line: 1147, column: 25, scope: !5190)
!5193 = !DILocation(line: 1147, column: 11, scope: !5187)
!5194 = !DILocation(line: 1148, column: 14, scope: !5190)
!5195 = !DILocation(line: 1148, column: 2, scope: !5190)
!5196 = !DILocation(line: 1149, column: 5, scope: !5187)
!5197 = !DILocation(line: 1150, column: 1, scope: !5158)
!5198 = distinct !DISubprogram(name: "check_operand", scope: !3, file: !3, line: 1113, type: !4699, scopeLine: 1114, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2035)
!5199 = !DILocalVariable(name: "t", arg: 1, scope: !5198, file: !3, line: 1113, type: !803)
!5200 = !DILocation(line: 1113, column: 21, scope: !5198)
!5201 = !DILocation(line: 1115, column: 8, scope: !5202)
!5202 = distinct !DILexicalBlock(scope: !5198, file: !3, line: 1115, column: 7)
!5203 = !DILocation(line: 1115, column: 7, scope: !5198)
!5204 = !DILocation(line: 1115, column: 11, scope: !5202)
!5205 = !DILocation(line: 1119, column: 7, scope: !5206)
!5206 = distinct !DILexicalBlock(scope: !5198, file: !3, line: 1119, column: 7)
!5207 = !DILocation(line: 1119, column: 21, scope: !5206)
!5208 = !DILocation(line: 1119, column: 7, scope: !5198)
!5209 = !DILocation(line: 1120, column: 48, scope: !5206)
!5210 = !DILocation(line: 1120, column: 5, scope: !5206)
!5211 = !DILocation(line: 1122, column: 12, scope: !5212)
!5212 = distinct !DILexicalBlock(scope: !5206, file: !3, line: 1122, column: 12)
!5213 = !DILocation(line: 1122, column: 26, scope: !5212)
!5214 = !DILocation(line: 1122, column: 12, scope: !5206)
!5215 = !DILocation(line: 1123, column: 36, scope: !5212)
!5216 = !DILocation(line: 1123, column: 5, scope: !5212)
!5217 = !DILocation(line: 1124, column: 1, scope: !5198)
!5218 = distinct !DISubprogram(name: "check_function_parameter_and_return_types", scope: !3, file: !3, line: 1028, type: !5219, scopeLine: 1029, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2035)
!5219 = !DISubroutineType(types: !5220)
!5220 = !{null, !803, !902}
!5221 = !DILocalVariable(name: "fn", arg: 1, scope: !5218, file: !3, line: 1028, type: !803)
!5222 = !DILocation(line: 1028, column: 49, scope: !5218)
!5223 = !DILocalVariable(name: "escapes", arg: 2, scope: !5218, file: !3, line: 1028, type: !902)
!5224 = !DILocation(line: 1028, column: 58, scope: !5218)
!5225 = !DILocalVariable(name: "arg", scope: !5218, file: !3, line: 1030, type: !803)
!5226 = !DILocation(line: 1030, column: 8, scope: !5218)
!5227 = !DILocation(line: 1032, column: 7, scope: !5228)
!5228 = distinct !DILexicalBlock(scope: !5218, file: !3, line: 1032, column: 7)
!5229 = !DILocation(line: 1032, column: 7, scope: !5218)
!5230 = !DILocation(line: 1034, column: 18, scope: !5231)
!5231 = distinct !DILexicalBlock(scope: !5232, file: !3, line: 1034, column: 7)
!5232 = distinct !DILexicalBlock(scope: !5228, file: !3, line: 1033, column: 5)
!5233 = !DILocation(line: 1034, column: 16, scope: !5231)
!5234 = !DILocation(line: 1034, column: 12, scope: !5231)
!5235 = !DILocation(line: 1035, column: 5, scope: !5236)
!5236 = distinct !DILexicalBlock(scope: !5231, file: !3, line: 1034, column: 7)
!5237 = !DILocation(line: 1035, column: 9, scope: !5236)
!5238 = !DILocation(line: 1035, column: 12, scope: !5236)
!5239 = !DILocation(line: 1035, column: 32, scope: !5236)
!5240 = !DILocation(line: 1035, column: 29, scope: !5236)
!5241 = !DILocation(line: 0, scope: !5236)
!5242 = !DILocation(line: 1034, column: 7, scope: !5231)
!5243 = !DILocalVariable(name: "type", scope: !5244, file: !3, line: 1038, type: !803)
!5244 = distinct !DILexicalBlock(scope: !5236, file: !3, line: 1037, column: 2)
!5245 = !DILocation(line: 1038, column: 9, scope: !5244)
!5246 = !DILocation(line: 1038, column: 32, scope: !5244)
!5247 = !DILocation(line: 1038, column: 16, scope: !5244)
!5248 = !DILocation(line: 1039, column: 8, scope: !5249)
!5249 = distinct !DILexicalBlock(scope: !5244, file: !3, line: 1039, column: 8)
!5250 = !DILocation(line: 1039, column: 8, scope: !5244)
!5251 = !DILocation(line: 1040, column: 29, scope: !5249)
!5252 = !DILocation(line: 1040, column: 6, scope: !5249)
!5253 = !DILocation(line: 1041, column: 2, scope: !5244)
!5254 = !DILocation(line: 1036, column: 11, scope: !5236)
!5255 = !DILocation(line: 1036, column: 9, scope: !5236)
!5256 = !DILocation(line: 1034, column: 7, scope: !5236)
!5257 = distinct !{!5257, !5242, !5258}
!5258 = !DILocation(line: 1041, column: 2, scope: !5231)
!5259 = !DILocation(line: 1042, column: 5, scope: !5232)
!5260 = !DILocation(line: 1050, column: 18, scope: !5261)
!5261 = distinct !DILexicalBlock(scope: !5262, file: !3, line: 1050, column: 7)
!5262 = distinct !DILexicalBlock(scope: !5228, file: !3, line: 1044, column: 5)
!5263 = !DILocation(line: 1050, column: 16, scope: !5261)
!5264 = !DILocation(line: 1050, column: 12, scope: !5261)
!5265 = !DILocation(line: 1050, column: 39, scope: !5266)
!5266 = distinct !DILexicalBlock(scope: !5261, file: !3, line: 1050, column: 7)
!5267 = !DILocation(line: 1050, column: 7, scope: !5261)
!5268 = !DILocalVariable(name: "type", scope: !5269, file: !3, line: 1052, type: !803)
!5269 = distinct !DILexicalBlock(scope: !5266, file: !3, line: 1051, column: 2)
!5270 = !DILocation(line: 1052, column: 9, scope: !5269)
!5271 = !DILocation(line: 1052, column: 32, scope: !5269)
!5272 = !DILocation(line: 1052, column: 16, scope: !5269)
!5273 = !DILocation(line: 1053, column: 8, scope: !5274)
!5274 = distinct !DILexicalBlock(scope: !5269, file: !3, line: 1053, column: 8)
!5275 = !DILocation(line: 1053, column: 8, scope: !5269)
!5276 = !DILocation(line: 1054, column: 29, scope: !5274)
!5277 = !DILocation(line: 1054, column: 6, scope: !5274)
!5278 = !DILocation(line: 1055, column: 2, scope: !5269)
!5279 = !DILocation(line: 1050, column: 50, scope: !5266)
!5280 = !DILocation(line: 1050, column: 48, scope: !5266)
!5281 = !DILocation(line: 1050, column: 7, scope: !5266)
!5282 = distinct !{!5282, !5267, !5283}
!5283 = !DILocation(line: 1055, column: 2, scope: !5261)
!5284 = !DILocation(line: 1057, column: 7, scope: !5285)
!5285 = distinct !DILexicalBlock(scope: !5218, file: !3, line: 1057, column: 7)
!5286 = !DILocation(line: 1057, column: 7, scope: !5218)
!5287 = !DILocalVariable(name: "type", scope: !5288, file: !3, line: 1059, type: !803)
!5288 = distinct !DILexicalBlock(scope: !5285, file: !3, line: 1058, column: 5)
!5289 = !DILocation(line: 1059, column: 12, scope: !5288)
!5290 = !DILocation(line: 1059, column: 35, scope: !5288)
!5291 = !DILocation(line: 1059, column: 19, scope: !5288)
!5292 = !DILocation(line: 1060, column: 30, scope: !5288)
!5293 = !DILocation(line: 1060, column: 7, scope: !5288)
!5294 = !DILocation(line: 1061, column: 5, scope: !5288)
!5295 = !DILocation(line: 1062, column: 1, scope: !5218)
!5296 = distinct !DISubprogram(name: "has_proper_scope_for_analysis", scope: !3, file: !3, line: 1068, type: !4699, scopeLine: 1069, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2035)
!5297 = !DILocalVariable(name: "t", arg: 1, scope: !5296, file: !3, line: 1068, type: !803)
!5298 = !DILocation(line: 1068, column: 37, scope: !5296)
!5299 = !DILocalVariable(name: "type", scope: !5296, file: !3, line: 1072, type: !803)
!5300 = !DILocation(line: 1072, column: 8, scope: !5296)
!5301 = !DILocation(line: 1072, column: 31, scope: !5296)
!5302 = !DILocation(line: 1072, column: 15, scope: !5296)
!5303 = !DILocation(line: 1073, column: 8, scope: !5304)
!5304 = distinct !DILexicalBlock(scope: !5296, file: !3, line: 1073, column: 7)
!5305 = !DILocation(line: 1073, column: 7, scope: !5296)
!5306 = !DILocation(line: 1073, column: 14, scope: !5304)
!5307 = !DILocation(line: 1075, column: 7, scope: !5308)
!5308 = distinct !DILexicalBlock(scope: !5296, file: !3, line: 1075, column: 7)
!5309 = !DILocation(line: 1075, column: 7, scope: !5296)
!5310 = !DILocation(line: 1077, column: 30, scope: !5311)
!5311 = distinct !DILexicalBlock(scope: !5308, file: !3, line: 1076, column: 5)
!5312 = !DILocation(line: 1077, column: 7, scope: !5311)
!5313 = !DILocation(line: 1078, column: 7, scope: !5311)
!5314 = !DILocation(line: 1083, column: 7, scope: !5315)
!5315 = distinct !DILexicalBlock(scope: !5296, file: !3, line: 1083, column: 7)
!5316 = !DILocation(line: 1083, column: 7, scope: !5296)
!5317 = !DILocation(line: 1084, column: 5, scope: !5315)
!5318 = !DILocation(line: 1087, column: 8, scope: !5319)
!5319 = distinct !DILexicalBlock(scope: !5296, file: !3, line: 1087, column: 7)
!5320 = !DILocation(line: 1087, column: 24, scope: !5319)
!5321 = !DILocation(line: 1087, column: 28, scope: !5319)
!5322 = !DILocation(line: 1087, column: 7, scope: !5296)
!5323 = !DILocation(line: 1088, column: 5, scope: !5319)
!5324 = !DILocation(line: 1090, column: 7, scope: !5325)
!5325 = distinct !DILexicalBlock(scope: !5296, file: !3, line: 1090, column: 7)
!5326 = !DILocation(line: 1090, column: 25, scope: !5325)
!5327 = !DILocation(line: 1090, column: 28, scope: !5325)
!5328 = !DILocation(line: 1090, column: 7, scope: !5296)
!5329 = !DILocation(line: 1097, column: 11, scope: !5330)
!5330 = distinct !DILexicalBlock(scope: !5331, file: !3, line: 1097, column: 11)
!5331 = distinct !DILexicalBlock(scope: !5325, file: !3, line: 1091, column: 5)
!5332 = !DILocation(line: 1098, column: 4, scope: !5330)
!5333 = !DILocation(line: 1098, column: 7, scope: !5330)
!5334 = !DILocation(line: 1099, column: 4, scope: !5330)
!5335 = !DILocation(line: 1099, column: 32, scope: !5330)
!5336 = !DILocation(line: 1099, column: 7, scope: !5330)
!5337 = !DILocation(line: 1097, column: 11, scope: !5331)
!5338 = !DILocation(line: 1104, column: 27, scope: !5339)
!5339 = distinct !DILexicalBlock(scope: !5330, file: !3, line: 1102, column: 2)
!5340 = !DILocation(line: 1104, column: 4, scope: !5339)
!5341 = !DILocation(line: 1106, column: 5, scope: !5331)
!5342 = !DILocation(line: 1107, column: 1, scope: !5296)
!5343 = distinct !DISubprogram(name: "gsi_start_bb", scope: !446, file: !446, line: 4418, type: !5344, scopeLine: 4419, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2035)
!5344 = !DISubroutineType(types: !5345)
!5345 = !{!4433, !1059}
!5346 = !DILocalVariable(name: "bb", arg: 1, scope: !5343, file: !446, line: 4418, type: !1059)
!5347 = !DILocation(line: 4418, column: 27, scope: !5343)
!5348 = !DILocalVariable(name: "i", scope: !5343, file: !446, line: 4420, type: !4433)
!5349 = !DILocation(line: 4420, column: 24, scope: !5343)
!5350 = !DILocalVariable(name: "seq", scope: !5343, file: !446, line: 4421, type: !1086)
!5351 = !DILocation(line: 4421, column: 14, scope: !5343)
!5352 = !DILocation(line: 4423, column: 17, scope: !5343)
!5353 = !DILocation(line: 4423, column: 9, scope: !5343)
!5354 = !DILocation(line: 4423, column: 7, scope: !5343)
!5355 = !DILocation(line: 4424, column: 29, scope: !5343)
!5356 = !DILocation(line: 4424, column: 11, scope: !5343)
!5357 = !DILocation(line: 4424, column: 5, scope: !5343)
!5358 = !DILocation(line: 4424, column: 9, scope: !5343)
!5359 = !DILocation(line: 4425, column: 11, scope: !5343)
!5360 = !DILocation(line: 4425, column: 5, scope: !5343)
!5361 = !DILocation(line: 4425, column: 9, scope: !5343)
!5362 = !DILocation(line: 4426, column: 10, scope: !5343)
!5363 = !DILocation(line: 4426, column: 5, scope: !5343)
!5364 = !DILocation(line: 4426, column: 8, scope: !5343)
!5365 = !DILocation(line: 4428, column: 3, scope: !5343)
!5366 = distinct !DISubprogram(name: "gsi_end_p", scope: !446, file: !446, line: 4467, type: !5367, scopeLine: 4468, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2035)
!5367 = !DISubroutineType(types: !5368)
!5368 = !{!902, !4433}
!5369 = !DILocalVariable(name: "i", arg: 1, scope: !5366, file: !446, line: 4467, type: !4433)
!5370 = !DILocation(line: 4467, column: 33, scope: !5366)
!5371 = !DILocation(line: 4469, column: 12, scope: !5366)
!5372 = !DILocation(line: 4469, column: 16, scope: !5366)
!5373 = !DILocation(line: 4469, column: 10, scope: !5366)
!5374 = !DILocation(line: 4469, column: 3, scope: !5366)
!5375 = distinct !DISubprogram(name: "scan_for_refs", scope: !3, file: !3, line: 1576, type: !5376, scopeLine: 1577, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2035)
!5376 = !DISubroutineType(types: !5377)
!5377 = !{null, !1096}
!5378 = !DILocalVariable(name: "t", arg: 1, scope: !5375, file: !3, line: 1576, type: !1096)
!5379 = !DILocation(line: 1576, column: 23, scope: !5375)
!5380 = !DILocation(line: 1578, column: 24, scope: !5375)
!5381 = !DILocation(line: 1578, column: 11, scope: !5375)
!5382 = !DILocation(line: 1578, column: 3, scope: !5375)
!5383 = !DILocation(line: 1581, column: 21, scope: !5384)
!5384 = distinct !DILexicalBlock(scope: !5375, file: !3, line: 1579, column: 5)
!5385 = !DILocation(line: 1581, column: 7, scope: !5384)
!5386 = !DILocation(line: 1582, column: 7, scope: !5384)
!5387 = !DILocation(line: 1587, column: 19, scope: !5384)
!5388 = !DILocation(line: 1587, column: 7, scope: !5384)
!5389 = !DILocation(line: 1588, column: 7, scope: !5384)
!5390 = !DILocation(line: 1591, column: 18, scope: !5384)
!5391 = !DILocation(line: 1591, column: 7, scope: !5384)
!5392 = !DILocation(line: 1592, column: 7, scope: !5384)
!5393 = !DILocation(line: 1595, column: 7, scope: !5384)
!5394 = !DILocation(line: 1598, column: 3, scope: !5375)
!5395 = distinct !DISubprogram(name: "gsi_stmt", scope: !446, file: !446, line: 4501, type: !5396, scopeLine: 4502, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2035)
!5396 = !DISubroutineType(types: !5397)
!5397 = !{!1096, !4433}
!5398 = !DILocalVariable(name: "i", arg: 1, scope: !5395, file: !446, line: 4501, type: !4433)
!5399 = !DILocation(line: 4501, column: 32, scope: !5395)
!5400 = !DILocation(line: 4503, column: 12, scope: !5395)
!5401 = !DILocation(line: 4503, column: 17, scope: !5395)
!5402 = !DILocation(line: 4503, column: 3, scope: !5395)
!5403 = distinct !DISubprogram(name: "gsi_next", scope: !446, file: !446, line: 4485, type: !5404, scopeLine: 4486, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2035)
!5404 = !DISubroutineType(types: !5405)
!5405 = !{null, !5406}
!5406 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4433, size: 64)
!5407 = !DILocalVariable(name: "i", arg: 1, scope: !5403, file: !446, line: 4485, type: !5406)
!5408 = !DILocation(line: 4485, column: 33, scope: !5403)
!5409 = !DILocation(line: 4487, column: 12, scope: !5403)
!5410 = !DILocation(line: 4487, column: 15, scope: !5403)
!5411 = !DILocation(line: 4487, column: 20, scope: !5403)
!5412 = !DILocation(line: 4487, column: 3, scope: !5403)
!5413 = !DILocation(line: 4487, column: 6, scope: !5403)
!5414 = !DILocation(line: 4487, column: 10, scope: !5403)
!5415 = !DILocation(line: 4488, column: 1, scope: !5403)
!5416 = distinct !DISubprogram(name: "bb_seq", scope: !446, file: !446, line: 237, type: !5417, scopeLine: 238, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2035)
!5417 = !DISubroutineType(types: !5418)
!5418 = !{!1086, !5419}
!5419 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_basic_block", file: !738, line: 112, baseType: !5420)
!5420 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5421, size: 64)
!5421 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1061)
!5422 = !DILocalVariable(name: "bb", arg: 1, scope: !5416, file: !446, line: 237, type: !5419)
!5423 = !DILocation(line: 237, column: 27, scope: !5416)
!5424 = !DILocation(line: 239, column: 13, scope: !5416)
!5425 = !DILocation(line: 239, column: 17, scope: !5416)
!5426 = !DILocation(line: 239, column: 23, scope: !5416)
!5427 = !DILocation(line: 239, column: 33, scope: !5416)
!5428 = !DILocation(line: 239, column: 36, scope: !5416)
!5429 = !DILocation(line: 239, column: 40, scope: !5416)
!5430 = !DILocation(line: 239, column: 43, scope: !5416)
!5431 = !DILocation(line: 239, column: 10, scope: !5416)
!5432 = !DILocation(line: 239, column: 53, scope: !5416)
!5433 = !DILocation(line: 239, column: 57, scope: !5416)
!5434 = !DILocation(line: 239, column: 60, scope: !5416)
!5435 = !DILocation(line: 239, column: 68, scope: !5416)
!5436 = !DILocation(line: 239, column: 3, scope: !5416)
!5437 = distinct !DISubprogram(name: "gimple_seq_first", scope: !446, file: !446, line: 159, type: !5438, scopeLine: 160, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2035)
!5438 = !DISubroutineType(types: !5439)
!5439 = !{!1091, !5440}
!5440 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_gimple_seq", file: !738, line: 67, baseType: !5441)
!5441 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5442, size: 64)
!5442 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1088)
!5443 = !DILocalVariable(name: "s", arg: 1, scope: !5437, file: !446, line: 159, type: !5440)
!5444 = !DILocation(line: 159, column: 36, scope: !5437)
!5445 = !DILocation(line: 161, column: 10, scope: !5437)
!5446 = !DILocation(line: 161, column: 14, scope: !5437)
!5447 = !DILocation(line: 161, column: 17, scope: !5437)
!5448 = !DILocation(line: 161, column: 3, scope: !5437)
!5449 = distinct !DISubprogram(name: "check_assign", scope: !3, file: !3, line: 1487, type: !5376, scopeLine: 1488, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2035)
!5450 = !DILocalVariable(name: "t", arg: 1, scope: !5449, file: !3, line: 1487, type: !1096)
!5451 = !DILocation(line: 1487, column: 22, scope: !5449)
!5452 = !DILocation(line: 1490, column: 37, scope: !5449)
!5453 = !DILocation(line: 1490, column: 18, scope: !5449)
!5454 = !DILocation(line: 1490, column: 3, scope: !5449)
!5455 = !DILocation(line: 1495, column: 11, scope: !5449)
!5456 = !DILocation(line: 1495, column: 3, scope: !5449)
!5457 = !DILocalVariable(name: "op0", scope: !5458, file: !3, line: 1499, type: !803)
!5458 = distinct !DILexicalBlock(scope: !5459, file: !3, line: 1498, column: 7)
!5459 = distinct !DILexicalBlock(scope: !5449, file: !3, line: 1496, column: 5)
!5460 = !DILocation(line: 1499, column: 7, scope: !5458)
!5461 = !DILocation(line: 1499, column: 33, scope: !5458)
!5462 = !DILocation(line: 1499, column: 13, scope: !5458)
!5463 = !DILocalVariable(name: "type0", scope: !5458, file: !3, line: 1500, type: !803)
!5464 = !DILocation(line: 1500, column: 7, scope: !5458)
!5465 = !DILocation(line: 1500, column: 31, scope: !5458)
!5466 = !DILocation(line: 1500, column: 15, scope: !5458)
!5467 = !DILocalVariable(name: "op1", scope: !5458, file: !3, line: 1501, type: !803)
!5468 = !DILocation(line: 1501, column: 7, scope: !5458)
!5469 = !DILocation(line: 1501, column: 33, scope: !5458)
!5470 = !DILocation(line: 1501, column: 13, scope: !5458)
!5471 = !DILocalVariable(name: "type1", scope: !5458, file: !3, line: 1502, type: !803)
!5472 = !DILocation(line: 1502, column: 7, scope: !5458)
!5473 = !DILocation(line: 1502, column: 31, scope: !5458)
!5474 = !DILocation(line: 1502, column: 15, scope: !5458)
!5475 = !DILocation(line: 1514, column: 6, scope: !5476)
!5476 = distinct !DILexicalBlock(scope: !5458, file: !3, line: 1514, column: 6)
!5477 = !DILocation(line: 1514, column: 12, scope: !5476)
!5478 = !DILocation(line: 1514, column: 15, scope: !5476)
!5479 = !DILocation(line: 1515, column: 6, scope: !5476)
!5480 = !DILocation(line: 1515, column: 58, scope: !5476)
!5481 = !DILocation(line: 1515, column: 34, scope: !5476)
!5482 = !DILocation(line: 1515, column: 62, scope: !5476)
!5483 = !DILocation(line: 1515, column: 67, scope: !5476)
!5484 = !DILocation(line: 1515, column: 10, scope: !5476)
!5485 = !DILocation(line: 1514, column: 6, scope: !5458)
!5486 = !DILocation(line: 1516, column: 27, scope: !5476)
!5487 = !DILocation(line: 1516, column: 4, scope: !5476)
!5488 = !DILocation(line: 1518, column: 6, scope: !5489)
!5489 = distinct !DILexicalBlock(scope: !5458, file: !3, line: 1518, column: 6)
!5490 = !DILocation(line: 1518, column: 12, scope: !5489)
!5491 = !DILocation(line: 1518, column: 15, scope: !5489)
!5492 = !DILocation(line: 1519, column: 6, scope: !5489)
!5493 = !DILocation(line: 1519, column: 58, scope: !5489)
!5494 = !DILocation(line: 1519, column: 34, scope: !5489)
!5495 = !DILocation(line: 1519, column: 62, scope: !5489)
!5496 = !DILocation(line: 1519, column: 67, scope: !5489)
!5497 = !DILocation(line: 1519, column: 10, scope: !5489)
!5498 = !DILocation(line: 1518, column: 6, scope: !5458)
!5499 = !DILocation(line: 1520, column: 27, scope: !5489)
!5500 = !DILocation(line: 1520, column: 4, scope: !5489)
!5501 = !DILocation(line: 1522, column: 18, scope: !5458)
!5502 = !DILocation(line: 1522, column: 2, scope: !5458)
!5503 = !DILocation(line: 1523, column: 18, scope: !5458)
!5504 = !DILocation(line: 1523, column: 2, scope: !5458)
!5505 = !DILocation(line: 1524, column: 17, scope: !5458)
!5506 = !DILocation(line: 1524, column: 2, scope: !5458)
!5507 = !DILocation(line: 1525, column: 17, scope: !5458)
!5508 = !DILocation(line: 1525, column: 2, scope: !5458)
!5509 = !DILocation(line: 1527, column: 7, scope: !5459)
!5510 = !DILocalVariable(name: "op0", scope: !5511, file: !3, line: 1531, type: !803)
!5511 = distinct !DILexicalBlock(scope: !5459, file: !3, line: 1530, column: 7)
!5512 = !DILocation(line: 1531, column: 7, scope: !5511)
!5513 = !DILocation(line: 1531, column: 33, scope: !5511)
!5514 = !DILocation(line: 1531, column: 13, scope: !5511)
!5515 = !DILocalVariable(name: "type0", scope: !5511, file: !3, line: 1532, type: !803)
!5516 = !DILocation(line: 1532, column: 7, scope: !5511)
!5517 = !DILocation(line: 1532, column: 31, scope: !5511)
!5518 = !DILocation(line: 1532, column: 15, scope: !5511)
!5519 = !DILocation(line: 1537, column: 6, scope: !5520)
!5520 = distinct !DILexicalBlock(scope: !5511, file: !3, line: 1537, column: 6)
!5521 = !DILocation(line: 1538, column: 6, scope: !5520)
!5522 = !DILocation(line: 1538, column: 9, scope: !5520)
!5523 = !DILocation(line: 1539, column: 6, scope: !5520)
!5524 = !DILocation(line: 1539, column: 10, scope: !5520)
!5525 = !DILocation(line: 1539, column: 26, scope: !5520)
!5526 = !DILocation(line: 1540, column: 8, scope: !5520)
!5527 = !DILocation(line: 1540, column: 11, scope: !5520)
!5528 = !DILocation(line: 1540, column: 27, scope: !5520)
!5529 = !DILocation(line: 1537, column: 6, scope: !5511)
!5530 = !DILocation(line: 1541, column: 27, scope: !5520)
!5531 = !DILocation(line: 1541, column: 4, scope: !5520)
!5532 = !DILocation(line: 1543, column: 17, scope: !5511)
!5533 = !DILocation(line: 1543, column: 2, scope: !5511)
!5534 = !DILocation(line: 1544, column: 18, scope: !5511)
!5535 = !DILocation(line: 1544, column: 2, scope: !5511)
!5536 = !DILocation(line: 1546, column: 7, scope: !5459)
!5537 = !DILocation(line: 1549, column: 43, scope: !5459)
!5538 = !DILocation(line: 1549, column: 23, scope: !5459)
!5539 = !DILocation(line: 1549, column: 7, scope: !5459)
!5540 = !DILocation(line: 1550, column: 42, scope: !5459)
!5541 = !DILocation(line: 1550, column: 22, scope: !5459)
!5542 = !DILocation(line: 1550, column: 7, scope: !5459)
!5543 = !DILocation(line: 1551, column: 7, scope: !5459)
!5544 = !DILocation(line: 1554, column: 42, scope: !5459)
!5545 = !DILocation(line: 1554, column: 22, scope: !5459)
!5546 = !DILocation(line: 1554, column: 7, scope: !5459)
!5547 = !DILocation(line: 1555, column: 7, scope: !5459)
!5548 = !DILocation(line: 1558, column: 35, scope: !5549)
!5549 = distinct !DILexicalBlock(scope: !5459, file: !3, line: 1558, column: 11)
!5550 = !DILocation(line: 1558, column: 11, scope: !5549)
!5551 = !DILocation(line: 1558, column: 38, scope: !5549)
!5552 = !DILocation(line: 1558, column: 11, scope: !5459)
!5553 = !DILocalVariable(name: "rhs", scope: !5554, file: !3, line: 1560, type: !803)
!5554 = distinct !DILexicalBlock(scope: !5549, file: !3, line: 1559, column: 2)
!5555 = !DILocation(line: 1560, column: 9, scope: !5554)
!5556 = !DILocation(line: 1560, column: 35, scope: !5554)
!5557 = !DILocation(line: 1560, column: 15, scope: !5554)
!5558 = !DILocation(line: 1561, column: 20, scope: !5554)
!5559 = !DILocation(line: 1561, column: 4, scope: !5554)
!5560 = !DILocation(line: 1562, column: 19, scope: !5554)
!5561 = !DILocation(line: 1562, column: 4, scope: !5554)
!5562 = !DILocation(line: 1563, column: 2, scope: !5554)
!5563 = !DILocation(line: 1564, column: 7, scope: !5459)
!5564 = !DILocation(line: 1567, column: 7, scope: !5459)
!5565 = !DILocation(line: 1569, column: 1, scope: !5449)
!5566 = distinct !DISubprogram(name: "check_call", scope: !3, file: !3, line: 1321, type: !5376, scopeLine: 1322, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2035)
!5567 = !DILocalVariable(name: "call", arg: 1, scope: !5566, file: !3, line: 1321, type: !1096)
!5568 = !DILocation(line: 1321, column: 20, scope: !5566)
!5569 = !DILocalVariable(name: "callee_t", scope: !5566, file: !3, line: 1323, type: !803)
!5570 = !DILocation(line: 1323, column: 8, scope: !5566)
!5571 = !DILocation(line: 1323, column: 39, scope: !5566)
!5572 = !DILocation(line: 1323, column: 19, scope: !5566)
!5573 = !DILocalVariable(name: "callee", scope: !5566, file: !3, line: 1324, type: !2719)
!5574 = !DILocation(line: 1324, column: 23, scope: !5566)
!5575 = !DILocalVariable(name: "avail", scope: !5566, file: !3, line: 1325, type: !725)
!5576 = !DILocation(line: 1325, column: 21, scope: !5566)
!5577 = !DILocalVariable(name: "i", scope: !5566, file: !3, line: 1326, type: !1243)
!5578 = !DILocation(line: 1326, column: 10, scope: !5566)
!5579 = !DILocation(line: 1328, column: 10, scope: !5580)
!5580 = distinct !DILexicalBlock(scope: !5566, file: !3, line: 1328, column: 3)
!5581 = !DILocation(line: 1328, column: 8, scope: !5580)
!5582 = !DILocation(line: 1328, column: 15, scope: !5583)
!5583 = distinct !DILexicalBlock(scope: !5580, file: !3, line: 1328, column: 3)
!5584 = !DILocation(line: 1328, column: 41, scope: !5583)
!5585 = !DILocation(line: 1328, column: 19, scope: !5583)
!5586 = !DILocation(line: 1328, column: 17, scope: !5583)
!5587 = !DILocation(line: 1328, column: 3, scope: !5580)
!5588 = !DILocation(line: 1329, column: 37, scope: !5583)
!5589 = !DILocation(line: 1329, column: 43, scope: !5583)
!5590 = !DILocation(line: 1329, column: 20, scope: !5583)
!5591 = !DILocation(line: 1329, column: 5, scope: !5583)
!5592 = !DILocation(line: 1328, column: 49, scope: !5583)
!5593 = !DILocation(line: 1328, column: 3, scope: !5583)
!5594 = distinct !{!5594, !5587, !5595}
!5595 = !DILocation(line: 1329, column: 45, scope: !5580)
!5596 = !DILocation(line: 1331, column: 7, scope: !5597)
!5597 = distinct !DILexicalBlock(scope: !5566, file: !3, line: 1331, column: 7)
!5598 = !DILocation(line: 1331, column: 7, scope: !5566)
!5599 = !DILocalVariable(name: "arg_type", scope: !5600, file: !3, line: 1333, type: !803)
!5600 = distinct !DILexicalBlock(scope: !5597, file: !3, line: 1332, column: 5)
!5601 = !DILocation(line: 1333, column: 12, scope: !5600)
!5602 = !DILocalVariable(name: "last_arg_type", scope: !5600, file: !3, line: 1334, type: !803)
!5603 = !DILocation(line: 1334, column: 12, scope: !5600)
!5604 = !DILocation(line: 1335, column: 28, scope: !5600)
!5605 = !DILocation(line: 1335, column: 16, scope: !5600)
!5606 = !DILocation(line: 1335, column: 14, scope: !5600)
!5607 = !DILocation(line: 1336, column: 50, scope: !5600)
!5608 = !DILocation(line: 1336, column: 15, scope: !5600)
!5609 = !DILocation(line: 1336, column: 13, scope: !5600)
!5610 = !DILocation(line: 1340, column: 11, scope: !5611)
!5611 = distinct !DILexicalBlock(scope: !5600, file: !3, line: 1340, column: 11)
!5612 = !DILocation(line: 1340, column: 11, scope: !5600)
!5613 = !DILocation(line: 1342, column: 20, scope: !5614)
!5614 = distinct !DILexicalBlock(scope: !5615, file: !3, line: 1342, column: 4)
!5615 = distinct !DILexicalBlock(scope: !5611, file: !3, line: 1341, column: 2)
!5616 = !DILocation(line: 1342, column: 18, scope: !5614)
!5617 = !DILocation(line: 1342, column: 61, scope: !5614)
!5618 = !DILocation(line: 1342, column: 9, scope: !5614)
!5619 = !DILocation(line: 1343, column: 9, scope: !5620)
!5620 = distinct !DILexicalBlock(scope: !5614, file: !3, line: 1342, column: 4)
!5621 = !DILocation(line: 1343, column: 18, scope: !5620)
!5622 = !DILocation(line: 1343, column: 21, scope: !5620)
!5623 = !DILocation(line: 1343, column: 46, scope: !5620)
!5624 = !DILocation(line: 1343, column: 43, scope: !5620)
!5625 = !DILocation(line: 1344, column: 9, scope: !5620)
!5626 = !DILocation(line: 1344, column: 12, scope: !5620)
!5627 = !DILocation(line: 1344, column: 38, scope: !5620)
!5628 = !DILocation(line: 1344, column: 16, scope: !5620)
!5629 = !DILocation(line: 1344, column: 14, scope: !5620)
!5630 = !DILocation(line: 0, scope: !5620)
!5631 = !DILocation(line: 1342, column: 4, scope: !5614)
!5632 = !DILocalVariable(name: "operand", scope: !5633, file: !3, line: 1347, type: !803)
!5633 = distinct !DILexicalBlock(scope: !5620, file: !3, line: 1346, column: 6)
!5634 = !DILocation(line: 1347, column: 13, scope: !5633)
!5635 = !DILocation(line: 1347, column: 40, scope: !5633)
!5636 = !DILocation(line: 1347, column: 46, scope: !5633)
!5637 = !DILocation(line: 1347, column: 23, scope: !5633)
!5638 = !DILocation(line: 1348, column: 12, scope: !5639)
!5639 = distinct !DILexicalBlock(scope: !5633, file: !3, line: 1348, column: 12)
!5640 = !DILocation(line: 1348, column: 12, scope: !5633)
!5641 = !DILocation(line: 1350, column: 21, scope: !5642)
!5642 = distinct !DILexicalBlock(scope: !5639, file: !3, line: 1349, column: 3)
!5643 = !DILocation(line: 1350, column: 19, scope: !5642)
!5644 = !DILocation(line: 1351, column: 17, scope: !5642)
!5645 = !DILocation(line: 1351, column: 32, scope: !5642)
!5646 = !DILocation(line: 1351, column: 5, scope: !5642)
!5647 = !DILocation(line: 1352, column: 3, scope: !5642)
!5648 = !DILocation(line: 1357, column: 3, scope: !5639)
!5649 = !DILocation(line: 1358, column: 6, scope: !5633)
!5650 = !DILocation(line: 1345, column: 20, scope: !5620)
!5651 = !DILocation(line: 1345, column: 18, scope: !5620)
!5652 = !DILocation(line: 1345, column: 44, scope: !5620)
!5653 = !DILocation(line: 1342, column: 4, scope: !5620)
!5654 = distinct !{!5654, !5631, !5655}
!5655 = !DILocation(line: 1358, column: 6, scope: !5614)
!5656 = !DILocation(line: 1359, column: 2, scope: !5615)
!5657 = !DILocation(line: 1365, column: 20, scope: !5658)
!5658 = distinct !DILexicalBlock(scope: !5659, file: !3, line: 1365, column: 4)
!5659 = distinct !DILexicalBlock(scope: !5611, file: !3, line: 1361, column: 2)
!5660 = !DILocation(line: 1365, column: 18, scope: !5658)
!5661 = !DILocation(line: 1365, column: 49, scope: !5658)
!5662 = !DILocation(line: 1365, column: 9, scope: !5658)
!5663 = !DILocation(line: 1366, column: 9, scope: !5664)
!5664 = distinct !DILexicalBlock(scope: !5658, file: !3, line: 1365, column: 4)
!5665 = !DILocation(line: 1366, column: 18, scope: !5664)
!5666 = !DILocation(line: 1366, column: 21, scope: !5664)
!5667 = !DILocation(line: 1366, column: 47, scope: !5664)
!5668 = !DILocation(line: 1366, column: 25, scope: !5664)
!5669 = !DILocation(line: 1366, column: 23, scope: !5664)
!5670 = !DILocation(line: 0, scope: !5664)
!5671 = !DILocation(line: 1365, column: 4, scope: !5658)
!5672 = !DILocalVariable(name: "operand", scope: !5673, file: !3, line: 1369, type: !803)
!5673 = distinct !DILexicalBlock(scope: !5664, file: !3, line: 1368, column: 6)
!5674 = !DILocation(line: 1369, column: 13, scope: !5673)
!5675 = !DILocation(line: 1369, column: 40, scope: !5673)
!5676 = !DILocation(line: 1369, column: 46, scope: !5673)
!5677 = !DILocation(line: 1369, column: 23, scope: !5673)
!5678 = !DILocation(line: 1370, column: 12, scope: !5679)
!5679 = distinct !DILexicalBlock(scope: !5673, file: !3, line: 1370, column: 12)
!5680 = !DILocation(line: 1370, column: 12, scope: !5673)
!5681 = !DILocation(line: 1372, column: 21, scope: !5682)
!5682 = distinct !DILexicalBlock(scope: !5679, file: !3, line: 1371, column: 3)
!5683 = !DILocation(line: 1372, column: 19, scope: !5682)
!5684 = !DILocation(line: 1373, column: 17, scope: !5682)
!5685 = !DILocation(line: 1373, column: 32, scope: !5682)
!5686 = !DILocation(line: 1373, column: 5, scope: !5682)
!5687 = !DILocation(line: 1374, column: 3, scope: !5682)
!5688 = !DILocation(line: 1379, column: 3, scope: !5679)
!5689 = !DILocation(line: 1380, column: 6, scope: !5673)
!5690 = !DILocation(line: 1367, column: 20, scope: !5664)
!5691 = !DILocation(line: 1367, column: 18, scope: !5664)
!5692 = !DILocation(line: 1367, column: 44, scope: !5664)
!5693 = !DILocation(line: 1365, column: 4, scope: !5664)
!5694 = distinct !{!5694, !5671, !5695}
!5695 = !DILocation(line: 1380, column: 6, scope: !5658)
!5696 = !DILocation(line: 1385, column: 18, scope: !5600)
!5697 = !DILocation(line: 1385, column: 16, scope: !5600)
!5698 = !DILocation(line: 1386, column: 7, scope: !5600)
!5699 = !DILocation(line: 1386, column: 15, scope: !5700)
!5700 = distinct !DILexicalBlock(scope: !5701, file: !3, line: 1386, column: 7)
!5701 = distinct !DILexicalBlock(scope: !5600, file: !3, line: 1386, column: 7)
!5702 = !DILocation(line: 1386, column: 41, scope: !5700)
!5703 = !DILocation(line: 1386, column: 19, scope: !5700)
!5704 = !DILocation(line: 1386, column: 17, scope: !5700)
!5705 = !DILocation(line: 1386, column: 7, scope: !5701)
!5706 = !DILocalVariable(name: "operand", scope: !5707, file: !3, line: 1388, type: !803)
!5707 = distinct !DILexicalBlock(scope: !5700, file: !3, line: 1387, column: 2)
!5708 = !DILocation(line: 1388, column: 9, scope: !5707)
!5709 = !DILocation(line: 1388, column: 36, scope: !5707)
!5710 = !DILocation(line: 1388, column: 42, scope: !5707)
!5711 = !DILocation(line: 1388, column: 19, scope: !5707)
!5712 = !DILocation(line: 1389, column: 8, scope: !5713)
!5713 = distinct !DILexicalBlock(scope: !5707, file: !3, line: 1389, column: 8)
!5714 = !DILocation(line: 1389, column: 8, scope: !5707)
!5715 = !DILocation(line: 1390, column: 18, scope: !5713)
!5716 = !DILocation(line: 1390, column: 28, scope: !5713)
!5717 = !DILocation(line: 1390, column: 6, scope: !5713)
!5718 = !DILocalVariable(name: "type", scope: !5719, file: !3, line: 1398, type: !803)
!5719 = distinct !DILexicalBlock(scope: !5713, file: !3, line: 1392, column: 6)
!5720 = !DILocation(line: 1398, column: 13, scope: !5719)
!5721 = !DILocation(line: 1398, column: 36, scope: !5719)
!5722 = !DILocation(line: 1398, column: 20, scope: !5719)
!5723 = !DILocation(line: 1399, column: 31, scope: !5719)
!5724 = !DILocation(line: 1399, column: 8, scope: !5719)
!5725 = !DILocation(line: 1401, column: 2, scope: !5707)
!5726 = !DILocation(line: 1386, column: 49, scope: !5700)
!5727 = !DILocation(line: 1386, column: 7, scope: !5700)
!5728 = distinct !{!5728, !5705, !5729}
!5729 = !DILocation(line: 1401, column: 2, scope: !5701)
!5730 = !DILocation(line: 1402, column: 5, scope: !5600)
!5731 = !DILocation(line: 1409, column: 7, scope: !5732)
!5732 = distinct !DILexicalBlock(scope: !5566, file: !3, line: 1409, column: 7)
!5733 = !DILocation(line: 1409, column: 13, scope: !5732)
!5734 = !DILocation(line: 1409, column: 36, scope: !5732)
!5735 = !DILocation(line: 1409, column: 39, scope: !5732)
!5736 = !DILocation(line: 1409, column: 45, scope: !5732)
!5737 = !DILocation(line: 1409, column: 7, scope: !5566)
!5738 = !DILocation(line: 1413, column: 14, scope: !5739)
!5739 = distinct !DILexicalBlock(scope: !5740, file: !3, line: 1413, column: 7)
!5740 = distinct !DILexicalBlock(scope: !5732, file: !3, line: 1410, column: 5)
!5741 = !DILocation(line: 1413, column: 12, scope: !5739)
!5742 = !DILocation(line: 1413, column: 19, scope: !5743)
!5743 = distinct !DILexicalBlock(scope: !5739, file: !3, line: 1413, column: 7)
!5744 = !DILocation(line: 1413, column: 45, scope: !5743)
!5745 = !DILocation(line: 1413, column: 23, scope: !5743)
!5746 = !DILocation(line: 1413, column: 21, scope: !5743)
!5747 = !DILocation(line: 1413, column: 7, scope: !5739)
!5748 = !DILocalVariable(name: "operand", scope: !5749, file: !3, line: 1415, type: !803)
!5749 = distinct !DILexicalBlock(scope: !5743, file: !3, line: 1414, column: 2)
!5750 = !DILocation(line: 1415, column: 9, scope: !5749)
!5751 = !DILocation(line: 1415, column: 36, scope: !5749)
!5752 = !DILocation(line: 1415, column: 42, scope: !5749)
!5753 = !DILocation(line: 1415, column: 19, scope: !5749)
!5754 = !DILocalVariable(name: "type", scope: !5749, file: !3, line: 1416, type: !803)
!5755 = !DILocation(line: 1416, column: 9, scope: !5749)
!5756 = !DILocation(line: 1416, column: 32, scope: !5749)
!5757 = !DILocation(line: 1416, column: 16, scope: !5749)
!5758 = !DILocation(line: 1417, column: 27, scope: !5749)
!5759 = !DILocation(line: 1417, column: 4, scope: !5749)
!5760 = !DILocation(line: 1418, column: 2, scope: !5749)
!5761 = !DILocation(line: 1413, column: 53, scope: !5743)
!5762 = !DILocation(line: 1413, column: 7, scope: !5743)
!5763 = distinct !{!5763, !5747, !5764}
!5764 = !DILocation(line: 1418, column: 2, scope: !5739)
!5765 = !DILocation(line: 1420, column: 11, scope: !5766)
!5766 = distinct !DILexicalBlock(scope: !5740, file: !3, line: 1420, column: 11)
!5767 = !DILocation(line: 1420, column: 11, scope: !5740)
!5768 = !DILocalVariable(name: "type", scope: !5769, file: !3, line: 1422, type: !803)
!5769 = distinct !DILexicalBlock(scope: !5766, file: !3, line: 1421, column: 2)
!5770 = !DILocation(line: 1422, column: 9, scope: !5769)
!5771 = !DILocation(line: 1423, column: 22, scope: !5769)
!5772 = !DILocation(line: 1423, column: 6, scope: !5769)
!5773 = !DILocation(line: 1424, column: 27, scope: !5769)
!5774 = !DILocation(line: 1424, column: 4, scope: !5769)
!5775 = !DILocation(line: 1425, column: 2, scope: !5769)
!5776 = !DILocation(line: 1426, column: 5, scope: !5740)
!5777 = !DILocation(line: 1427, column: 1, scope: !5566)
!5778 = distinct !DISubprogram(name: "check_asm", scope: !3, file: !3, line: 1296, type: !5376, scopeLine: 1297, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2035)
!5779 = !DILocalVariable(name: "stmt", arg: 1, scope: !5778, file: !3, line: 1296, type: !1096)
!5780 = !DILocation(line: 1296, column: 19, scope: !5778)
!5781 = !DILocalVariable(name: "i", scope: !5778, file: !3, line: 1298, type: !1243)
!5782 = !DILocation(line: 1298, column: 10, scope: !5778)
!5783 = !DILocation(line: 1300, column: 10, scope: !5784)
!5784 = distinct !DILexicalBlock(scope: !5778, file: !3, line: 1300, column: 3)
!5785 = !DILocation(line: 1300, column: 8, scope: !5784)
!5786 = !DILocation(line: 1300, column: 15, scope: !5787)
!5787 = distinct !DILexicalBlock(scope: !5784, file: !3, line: 1300, column: 3)
!5788 = !DILocation(line: 1300, column: 40, scope: !5787)
!5789 = !DILocation(line: 1300, column: 19, scope: !5787)
!5790 = !DILocation(line: 1300, column: 17, scope: !5787)
!5791 = !DILocation(line: 1300, column: 3, scope: !5784)
!5792 = !DILocation(line: 1301, column: 42, scope: !5787)
!5793 = !DILocation(line: 1301, column: 48, scope: !5787)
!5794 = !DILocation(line: 1301, column: 20, scope: !5787)
!5795 = !DILocation(line: 1301, column: 5, scope: !5787)
!5796 = !DILocation(line: 1300, column: 48, scope: !5787)
!5797 = !DILocation(line: 1300, column: 3, scope: !5787)
!5798 = distinct !{!5798, !5791, !5799}
!5799 = !DILocation(line: 1301, column: 50, scope: !5784)
!5800 = !DILocation(line: 1303, column: 10, scope: !5801)
!5801 = distinct !DILexicalBlock(scope: !5778, file: !3, line: 1303, column: 3)
!5802 = !DILocation(line: 1303, column: 8, scope: !5801)
!5803 = !DILocation(line: 1303, column: 15, scope: !5804)
!5804 = distinct !DILexicalBlock(scope: !5801, file: !3, line: 1303, column: 3)
!5805 = !DILocation(line: 1303, column: 39, scope: !5804)
!5806 = !DILocation(line: 1303, column: 19, scope: !5804)
!5807 = !DILocation(line: 1303, column: 17, scope: !5804)
!5808 = !DILocation(line: 1303, column: 3, scope: !5801)
!5809 = !DILocation(line: 1304, column: 41, scope: !5804)
!5810 = !DILocation(line: 1304, column: 47, scope: !5804)
!5811 = !DILocation(line: 1304, column: 20, scope: !5804)
!5812 = !DILocation(line: 1304, column: 5, scope: !5804)
!5813 = !DILocation(line: 1303, column: 47, scope: !5804)
!5814 = !DILocation(line: 1303, column: 3, scope: !5804)
!5815 = distinct !{!5815, !5808, !5816}
!5816 = !DILocation(line: 1304, column: 49, scope: !5801)
!5817 = !DILocation(line: 1312, column: 1, scope: !5778)
!5818 = distinct !DISubprogram(name: "check_lhs_var", scope: !3, file: !3, line: 1283, type: !4699, scopeLine: 1284, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2035)
!5819 = !DILocalVariable(name: "t", arg: 1, scope: !5818, file: !3, line: 1283, type: !803)
!5820 = !DILocation(line: 1283, column: 21, scope: !5818)
!5821 = !DILocation(line: 1285, column: 15, scope: !5818)
!5822 = !DILocation(line: 1285, column: 3, scope: !5818)
!5823 = !DILocation(line: 1286, column: 1, scope: !5818)
!5824 = distinct !DISubprogram(name: "okay_pointer_operation", scope: !3, file: !3, line: 1432, type: !5825, scopeLine: 1433, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2035)
!5825 = !DISubroutineType(types: !5826)
!5826 = !{!902, !5, !803, !803}
!5827 = !DILocalVariable(name: "code", arg: 1, scope: !5824, file: !3, line: 1432, type: !5)
!5828 = !DILocation(line: 1432, column: 40, scope: !5824)
!5829 = !DILocalVariable(name: "op0", arg: 2, scope: !5824, file: !3, line: 1432, type: !803)
!5830 = !DILocation(line: 1432, column: 51, scope: !5824)
!5831 = !DILocalVariable(name: "op1", arg: 3, scope: !5824, file: !3, line: 1432, type: !803)
!5832 = !DILocation(line: 1432, column: 61, scope: !5824)
!5833 = !DILocalVariable(name: "op0type", scope: !5824, file: !3, line: 1434, type: !803)
!5834 = !DILocation(line: 1434, column: 8, scope: !5824)
!5835 = !DILocation(line: 1434, column: 18, scope: !5824)
!5836 = !DILocation(line: 1436, column: 11, scope: !5824)
!5837 = !DILocation(line: 1436, column: 3, scope: !5824)
!5838 = !DILocation(line: 1440, column: 7, scope: !5839)
!5839 = distinct !DILexicalBlock(scope: !5824, file: !3, line: 1437, column: 5)
!5840 = !DILocalVariable(name: "base", scope: !5841, file: !3, line: 1446, type: !803)
!5841 = distinct !DILexicalBlock(scope: !5839, file: !3, line: 1445, column: 7)
!5842 = !DILocation(line: 1446, column: 7, scope: !5841)
!5843 = !DILocalVariable(name: "offset", scope: !5841, file: !3, line: 1446, type: !803)
!5844 = !DILocation(line: 1446, column: 13, scope: !5841)
!5845 = !DILocalVariable(name: "offset_cast_stmt", scope: !5841, file: !3, line: 1447, type: !1096)
!5846 = !DILocation(line: 1447, column: 9, scope: !5841)
!5847 = !DILocation(line: 1449, column: 6, scope: !5848)
!5848 = distinct !DILexicalBlock(scope: !5841, file: !3, line: 1449, column: 6)
!5849 = !DILocation(line: 1450, column: 6, scope: !5848)
!5850 = !DILocation(line: 1450, column: 9, scope: !5848)
!5851 = !DILocation(line: 1450, column: 25, scope: !5848)
!5852 = !DILocation(line: 1451, column: 6, scope: !5848)
!5853 = !DILocation(line: 1451, column: 9, scope: !5848)
!5854 = !DILocation(line: 1451, column: 25, scope: !5848)
!5855 = !DILocation(line: 1452, column: 6, scope: !5848)
!5856 = !DILocation(line: 1452, column: 52, scope: !5848)
!5857 = !DILocation(line: 1452, column: 58, scope: !5848)
!5858 = !DILocation(line: 1452, column: 63, scope: !5848)
!5859 = !DILocation(line: 1452, column: 9, scope: !5848)
!5860 = !DILocation(line: 1449, column: 6, scope: !5841)
!5861 = !DILocation(line: 1456, column: 4, scope: !5848)
!5862 = !DILocalVariable(name: "size_of_op0_points_to", scope: !5863, file: !3, line: 1459, type: !803)
!5863 = distinct !DILexicalBlock(scope: !5848, file: !3, line: 1458, column: 4)
!5864 = !DILocation(line: 1459, column: 11, scope: !5863)
!5865 = !DILocation(line: 1459, column: 35, scope: !5863)
!5866 = !DILocation(line: 1461, column: 10, scope: !5867)
!5867 = distinct !DILexicalBlock(scope: !5863, file: !3, line: 1461, column: 10)
!5868 = !DILocation(line: 1462, column: 3, scope: !5867)
!5869 = !DILocation(line: 1462, column: 6, scope: !5867)
!5870 = !DILocation(line: 1463, column: 3, scope: !5867)
!5871 = !DILocation(line: 1463, column: 21, scope: !5867)
!5872 = !DILocation(line: 1464, column: 7, scope: !5867)
!5873 = !DILocation(line: 1464, column: 12, scope: !5867)
!5874 = !DILocation(line: 1463, column: 6, scope: !5867)
!5875 = !DILocation(line: 1461, column: 10, scope: !5863)
!5876 = !DILocation(line: 1465, column: 8, scope: !5867)
!5877 = !DILocation(line: 1467, column: 10, scope: !5878)
!5878 = distinct !DILexicalBlock(scope: !5863, file: !3, line: 1467, column: 10)
!5879 = !DILocation(line: 1468, column: 3, scope: !5878)
!5880 = !DILocation(line: 1468, column: 6, scope: !5878)
!5881 = !DILocation(line: 1469, column: 3, scope: !5878)
!5882 = !DILocation(line: 1469, column: 21, scope: !5878)
!5883 = !DILocation(line: 1470, column: 7, scope: !5878)
!5884 = !DILocation(line: 1470, column: 12, scope: !5878)
!5885 = !DILocation(line: 1469, column: 6, scope: !5878)
!5886 = !DILocation(line: 1467, column: 10, scope: !5863)
!5887 = !DILocation(line: 1471, column: 8, scope: !5878)
!5888 = !DILocation(line: 1474, column: 7, scope: !5839)
!5889 = !DILocation(line: 1476, column: 7, scope: !5839)
!5890 = !DILocation(line: 1478, column: 3, scope: !5824)
!5891 = !DILocation(line: 1479, column: 1, scope: !5824)
!5892 = distinct !DISubprogram(name: "check_rhs_var", scope: !3, file: !3, line: 1273, type: !4699, scopeLine: 1274, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2035)
!5893 = !DILocalVariable(name: "t", arg: 1, scope: !5892, file: !3, line: 1273, type: !803)
!5894 = !DILocation(line: 1273, column: 21, scope: !5892)
!5895 = !DILocation(line: 1275, column: 24, scope: !5892)
!5896 = !DILocation(line: 1275, column: 3, scope: !5892)
!5897 = !DILocation(line: 1276, column: 15, scope: !5892)
!5898 = !DILocation(line: 1276, column: 3, scope: !5892)
!5899 = !DILocation(line: 1277, column: 1, scope: !5892)
!5900 = distinct !DISubprogram(name: "look_for_address_of", scope: !3, file: !3, line: 1206, type: !4699, scopeLine: 1207, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2035)
!5901 = !DILocalVariable(name: "t", arg: 1, scope: !5900, file: !3, line: 1206, type: !803)
!5902 = !DILocation(line: 1206, column: 27, scope: !5900)
!5903 = !DILocation(line: 1208, column: 7, scope: !5904)
!5904 = distinct !DILexicalBlock(scope: !5900, file: !3, line: 1208, column: 7)
!5905 = !DILocation(line: 1208, column: 21, scope: !5904)
!5906 = !DILocation(line: 1208, column: 7, scope: !5900)
!5907 = !DILocalVariable(name: "x", scope: !5908, file: !3, line: 1210, type: !803)
!5908 = distinct !DILexicalBlock(scope: !5904, file: !3, line: 1209, column: 5)
!5909 = !DILocation(line: 1210, column: 12, scope: !5908)
!5910 = !DILocation(line: 1210, column: 30, scope: !5908)
!5911 = !DILocation(line: 1210, column: 16, scope: !5908)
!5912 = !DILocalVariable(name: "cref", scope: !5908, file: !3, line: 1211, type: !803)
!5913 = !DILocation(line: 1211, column: 12, scope: !5908)
!5914 = !DILocation(line: 1211, column: 19, scope: !5908)
!5915 = !DILocalVariable(name: "fielddecl", scope: !5908, file: !3, line: 1215, type: !803)
!5916 = !DILocation(line: 1215, column: 12, scope: !5908)
!5917 = !DILocation(line: 1216, column: 7, scope: !5908)
!5918 = !DILocation(line: 1216, column: 14, scope: !5908)
!5919 = !DILocation(line: 1216, column: 21, scope: !5908)
!5920 = !DILocation(line: 1216, column: 18, scope: !5908)
!5921 = !DILocation(line: 1218, column: 8, scope: !5922)
!5922 = distinct !DILexicalBlock(scope: !5923, file: !3, line: 1218, column: 8)
!5923 = distinct !DILexicalBlock(scope: !5908, file: !3, line: 1217, column: 2)
!5924 = !DILocation(line: 1218, column: 25, scope: !5922)
!5925 = !DILocation(line: 1218, column: 8, scope: !5923)
!5926 = !DILocation(line: 1220, column: 21, scope: !5927)
!5927 = distinct !DILexicalBlock(scope: !5922, file: !3, line: 1219, column: 6)
!5928 = !DILocation(line: 1220, column: 18, scope: !5927)
!5929 = !DILocation(line: 1221, column: 36, scope: !5927)
!5930 = !DILocation(line: 1222, column: 8, scope: !5927)
!5931 = !DILocation(line: 1221, column: 8, scope: !5927)
!5932 = !DILocation(line: 1223, column: 6, scope: !5927)
!5933 = !DILocation(line: 1224, column: 13, scope: !5934)
!5934 = distinct !DILexicalBlock(scope: !5922, file: !3, line: 1224, column: 13)
!5935 = !DILocation(line: 1224, column: 30, scope: !5934)
!5936 = !DILocation(line: 1224, column: 13, scope: !5922)
!5937 = !DILocation(line: 1225, column: 22, scope: !5934)
!5938 = !DILocation(line: 1225, column: 6, scope: !5934)
!5939 = !DILocation(line: 1227, column: 11, scope: !5923)
!5940 = !DILocation(line: 1227, column: 9, scope: !5923)
!5941 = distinct !{!5941, !5917, !5942}
!5942 = !DILocation(line: 1228, column: 2, scope: !5908)
!5943 = !DILocation(line: 1230, column: 11, scope: !5944)
!5944 = distinct !DILexicalBlock(scope: !5908, file: !3, line: 1230, column: 11)
!5945 = !DILocation(line: 1230, column: 25, scope: !5944)
!5946 = !DILocation(line: 1230, column: 11, scope: !5908)
!5947 = !DILocation(line: 1231, column: 33, scope: !5944)
!5948 = !DILocation(line: 1231, column: 2, scope: !5944)
!5949 = !DILocation(line: 1232, column: 5, scope: !5908)
!5950 = !DILocation(line: 1233, column: 1, scope: !5900)
!5951 = distinct !DISubprogram(name: "mark_interesting_addressof", scope: !3, file: !3, line: 1154, type: !5952, scopeLine: 1155, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2035)
!5952 = !DISubroutineType(types: !5953)
!5953 = !{null, !803, !803}
!5954 = !DILocalVariable(name: "to_type", arg: 1, scope: !5951, file: !3, line: 1154, type: !803)
!5955 = !DILocation(line: 1154, column: 34, scope: !5951)
!5956 = !DILocalVariable(name: "from_type", arg: 2, scope: !5951, file: !3, line: 1154, type: !803)
!5957 = !DILocation(line: 1154, column: 48, scope: !5951)
!5958 = !DILocalVariable(name: "from_uid", scope: !5951, file: !3, line: 1156, type: !789)
!5959 = !DILocation(line: 1156, column: 7, scope: !5951)
!5960 = !DILocalVariable(name: "to_uid", scope: !5951, file: !3, line: 1157, type: !789)
!5961 = !DILocation(line: 1157, column: 7, scope: !5951)
!5962 = !DILocalVariable(name: "type_map", scope: !5951, file: !3, line: 1158, type: !737)
!5963 = !DILocation(line: 1158, column: 10, scope: !5951)
!5964 = !DILocalVariable(name: "result", scope: !5951, file: !3, line: 1159, type: !1971)
!5965 = !DILocation(line: 1159, column: 19, scope: !5951)
!5966 = !DILocation(line: 1161, column: 31, scope: !5951)
!5967 = !DILocation(line: 1161, column: 15, scope: !5951)
!5968 = !DILocation(line: 1161, column: 13, scope: !5951)
!5969 = !DILocation(line: 1162, column: 29, scope: !5951)
!5970 = !DILocation(line: 1162, column: 13, scope: !5951)
!5971 = !DILocation(line: 1162, column: 11, scope: !5951)
!5972 = !DILocation(line: 1164, column: 8, scope: !5973)
!5973 = distinct !DILexicalBlock(scope: !5951, file: !3, line: 1164, column: 7)
!5974 = !DILocation(line: 1164, column: 18, scope: !5973)
!5975 = !DILocation(line: 1164, column: 22, scope: !5973)
!5976 = !DILocation(line: 1164, column: 7, scope: !5951)
!5977 = !DILocation(line: 1165, column: 5, scope: !5973)
!5978 = !DILocation(line: 1167, column: 14, scope: !5951)
!5979 = !DILocation(line: 1167, column: 12, scope: !5951)
!5980 = !DILocation(line: 1168, column: 12, scope: !5951)
!5981 = !DILocation(line: 1168, column: 10, scope: !5951)
!5982 = !DILocation(line: 1170, column: 3, scope: !5951)
!5983 = !DILocation(line: 1173, column: 31, scope: !5951)
!5984 = !DILocation(line: 1174, column: 27, scope: !5951)
!5985 = !DILocation(line: 1174, column: 10, scope: !5951)
!5986 = !DILocation(line: 1173, column: 12, scope: !5951)
!5987 = !DILocation(line: 1173, column: 10, scope: !5951)
!5988 = !DILocation(line: 1176, column: 7, scope: !5989)
!5989 = distinct !DILexicalBlock(scope: !5951, file: !3, line: 1176, column: 7)
!5990 = !DILocation(line: 1176, column: 7, scope: !5951)
!5991 = !DILocation(line: 1177, column: 25, scope: !5989)
!5992 = !DILocation(line: 1177, column: 33, scope: !5989)
!5993 = !DILocation(line: 1177, column: 16, scope: !5989)
!5994 = !DILocation(line: 1177, column: 14, scope: !5989)
!5995 = !DILocation(line: 1177, column: 5, scope: !5989)
!5996 = !DILocation(line: 1180, column: 18, scope: !5997)
!5997 = distinct !DILexicalBlock(scope: !5989, file: !3, line: 1179, column: 5)
!5998 = !DILocation(line: 1180, column: 16, scope: !5997)
!5999 = !DILocation(line: 1181, column: 26, scope: !5997)
!6000 = !DILocation(line: 1182, column: 5, scope: !5997)
!6001 = !DILocation(line: 1183, column: 23, scope: !5997)
!6002 = !DILocation(line: 1183, column: 5, scope: !5997)
!6003 = !DILocation(line: 1181, column: 7, scope: !5997)
!6004 = !DILocation(line: 1185, column: 19, scope: !5951)
!6005 = !DILocation(line: 1185, column: 29, scope: !5951)
!6006 = !DILocation(line: 1185, column: 3, scope: !5951)
!6007 = !DILocation(line: 1189, column: 24, scope: !5951)
!6008 = !DILocation(line: 1189, column: 66, scope: !5951)
!6009 = !DILocation(line: 1189, column: 49, scope: !5951)
!6010 = !DILocation(line: 1189, column: 5, scope: !5951)
!6011 = !DILocation(line: 1188, column: 10, scope: !5951)
!6012 = !DILocation(line: 1191, column: 7, scope: !6013)
!6013 = distinct !DILexicalBlock(scope: !5951, file: !3, line: 1191, column: 7)
!6014 = !DILocation(line: 1191, column: 7, scope: !5951)
!6015 = !DILocation(line: 1192, column: 25, scope: !6013)
!6016 = !DILocation(line: 1192, column: 33, scope: !6013)
!6017 = !DILocation(line: 1192, column: 16, scope: !6013)
!6018 = !DILocation(line: 1192, column: 14, scope: !6013)
!6019 = !DILocation(line: 1192, column: 5, scope: !6013)
!6020 = !DILocation(line: 1195, column: 18, scope: !6021)
!6021 = distinct !DILexicalBlock(scope: !6013, file: !3, line: 1194, column: 5)
!6022 = !DILocation(line: 1195, column: 16, scope: !6021)
!6023 = !DILocation(line: 1196, column: 26, scope: !6021)
!6024 = !DILocation(line: 1197, column: 5, scope: !6021)
!6025 = !DILocation(line: 1198, column: 23, scope: !6021)
!6026 = !DILocation(line: 1198, column: 5, scope: !6021)
!6027 = !DILocation(line: 1196, column: 7, scope: !6021)
!6028 = !DILocation(line: 1200, column: 19, scope: !5951)
!6029 = !DILocation(line: 1200, column: 29, scope: !5951)
!6030 = !DILocation(line: 1200, column: 3, scope: !5951)
!6031 = !DILocation(line: 1201, column: 1, scope: !5951)
!6032 = distinct !DISubprogram(name: "gimple_call_fndecl", scope: !446, file: !446, line: 1954, type: !2661, scopeLine: 1955, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2035)
!6033 = !DILocalVariable(name: "gs", arg: 1, scope: !6032, file: !446, line: 1954, type: !2653)
!6034 = !DILocation(line: 1954, column: 34, scope: !6032)
!6035 = !DILocalVariable(name: "addr", scope: !6032, file: !446, line: 1956, type: !803)
!6036 = !DILocation(line: 1956, column: 8, scope: !6032)
!6037 = !DILocation(line: 1956, column: 31, scope: !6032)
!6038 = !DILocation(line: 1956, column: 15, scope: !6032)
!6039 = !DILocation(line: 1957, column: 7, scope: !6040)
!6040 = distinct !DILexicalBlock(scope: !6032, file: !446, line: 1957, column: 7)
!6041 = !DILocation(line: 1957, column: 24, scope: !6040)
!6042 = !DILocation(line: 1957, column: 7, scope: !6032)
!6043 = !DILocation(line: 1958, column: 12, scope: !6040)
!6044 = !DILocation(line: 1958, column: 5, scope: !6040)
!6045 = !DILocation(line: 1959, column: 3, scope: !6032)
!6046 = !DILocation(line: 1960, column: 1, scope: !6032)
!6047 = distinct !DISubprogram(name: "gimple_call_num_args", scope: !446, file: !446, line: 2013, type: !3575, scopeLine: 2014, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2035)
!6048 = !DILocalVariable(name: "gs", arg: 1, scope: !6047, file: !446, line: 2013, type: !2653)
!6049 = !DILocation(line: 2013, column: 36, scope: !6047)
!6050 = !DILocalVariable(name: "num_ops", scope: !6047, file: !446, line: 2015, type: !7)
!6051 = !DILocation(line: 2015, column: 12, scope: !6047)
!6052 = !DILocation(line: 2017, column: 29, scope: !6047)
!6053 = !DILocation(line: 2017, column: 13, scope: !6047)
!6054 = !DILocation(line: 2017, column: 11, scope: !6047)
!6055 = !DILocation(line: 2018, column: 10, scope: !6047)
!6056 = !DILocation(line: 2018, column: 18, scope: !6047)
!6057 = !DILocation(line: 2018, column: 3, scope: !6047)
!6058 = distinct !DISubprogram(name: "gimple_call_arg", scope: !446, file: !446, line: 2025, type: !3645, scopeLine: 2026, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2035)
!6059 = !DILocalVariable(name: "gs", arg: 1, scope: !6058, file: !446, line: 2025, type: !2653)
!6060 = !DILocation(line: 2025, column: 31, scope: !6058)
!6061 = !DILocalVariable(name: "index", arg: 2, scope: !6058, file: !446, line: 2025, type: !7)
!6062 = !DILocation(line: 2025, column: 44, scope: !6058)
!6063 = !DILocation(line: 2028, column: 21, scope: !6058)
!6064 = !DILocation(line: 2028, column: 25, scope: !6058)
!6065 = !DILocation(line: 2028, column: 31, scope: !6058)
!6066 = !DILocation(line: 2028, column: 10, scope: !6058)
!6067 = !DILocation(line: 2028, column: 3, scope: !6058)
!6068 = distinct !DISubprogram(name: "gimple_call_fn", scope: !446, file: !446, line: 1911, type: !2661, scopeLine: 1912, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2035)
!6069 = !DILocalVariable(name: "gs", arg: 1, scope: !6068, file: !446, line: 1911, type: !2653)
!6070 = !DILocation(line: 1911, column: 30, scope: !6068)
!6071 = !DILocation(line: 1914, column: 21, scope: !6068)
!6072 = !DILocation(line: 1914, column: 10, scope: !6068)
!6073 = !DILocation(line: 1914, column: 3, scope: !6068)
!6074 = distinct !DISubprogram(name: "gimple_asm_noutputs", scope: !446, file: !446, line: 2591, type: !3575, scopeLine: 2592, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2035)
!6075 = !DILocalVariable(name: "gs", arg: 1, scope: !6074, file: !446, line: 2591, type: !2653)
!6076 = !DILocation(line: 2591, column: 35, scope: !6074)
!6077 = !DILocation(line: 2594, column: 10, scope: !6074)
!6078 = !DILocation(line: 2594, column: 14, scope: !6074)
!6079 = !DILocation(line: 2594, column: 25, scope: !6074)
!6080 = !DILocation(line: 2594, column: 3, scope: !6074)
!6081 = distinct !DISubprogram(name: "gimple_asm_output_op", scope: !446, file: !446, line: 2652, type: !3645, scopeLine: 2653, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2035)
!6082 = !DILocalVariable(name: "gs", arg: 1, scope: !6081, file: !446, line: 2652, type: !2653)
!6083 = !DILocation(line: 2652, column: 36, scope: !6081)
!6084 = !DILocalVariable(name: "index", arg: 2, scope: !6081, file: !446, line: 2652, type: !7)
!6085 = !DILocation(line: 2652, column: 49, scope: !6081)
!6086 = !DILocation(line: 2655, column: 3, scope: !6081)
!6087 = !DILocation(line: 2656, column: 21, scope: !6081)
!6088 = !DILocation(line: 2656, column: 25, scope: !6081)
!6089 = !DILocation(line: 2656, column: 33, scope: !6081)
!6090 = !DILocation(line: 2656, column: 37, scope: !6081)
!6091 = !DILocation(line: 2656, column: 48, scope: !6081)
!6092 = !DILocation(line: 2656, column: 31, scope: !6081)
!6093 = !DILocation(line: 2656, column: 10, scope: !6081)
!6094 = !DILocation(line: 2656, column: 3, scope: !6081)
!6095 = distinct !DISubprogram(name: "gimple_asm_ninputs", scope: !446, file: !446, line: 2581, type: !3575, scopeLine: 2582, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2035)
!6096 = !DILocalVariable(name: "gs", arg: 1, scope: !6095, file: !446, line: 2581, type: !2653)
!6097 = !DILocation(line: 2581, column: 34, scope: !6095)
!6098 = !DILocation(line: 2584, column: 10, scope: !6095)
!6099 = !DILocation(line: 2584, column: 14, scope: !6095)
!6100 = !DILocation(line: 2584, column: 25, scope: !6095)
!6101 = !DILocation(line: 2584, column: 3, scope: !6095)
!6102 = distinct !DISubprogram(name: "gimple_asm_input_op", scope: !446, file: !446, line: 2619, type: !3645, scopeLine: 2620, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2035)
!6103 = !DILocalVariable(name: "gs", arg: 1, scope: !6102, file: !446, line: 2619, type: !2653)
!6104 = !DILocation(line: 2619, column: 35, scope: !6102)
!6105 = !DILocalVariable(name: "index", arg: 2, scope: !6102, file: !446, line: 2619, type: !7)
!6106 = !DILocation(line: 2619, column: 48, scope: !6102)
!6107 = !DILocation(line: 2622, column: 3, scope: !6102)
!6108 = !DILocation(line: 2623, column: 21, scope: !6102)
!6109 = !DILocation(line: 2623, column: 25, scope: !6102)
!6110 = !DILocation(line: 2623, column: 10, scope: !6102)
!6111 = !DILocation(line: 2623, column: 3, scope: !6102)
!6112 = distinct !DISubprogram(name: "subtype_map_for_uid", scope: !3, file: !3, line: 1712, type: !6113, scopeLine: 1713, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2035)
!6113 = !DISubroutineType(types: !6114)
!6114 = !{!737, !789, !902}
!6115 = !DILocalVariable(name: "uid", arg: 1, scope: !6112, file: !3, line: 1712, type: !789)
!6116 = !DILocation(line: 1712, column: 26, scope: !6112)
!6117 = !DILocalVariable(name: "create", arg: 2, scope: !6112, file: !3, line: 1712, type: !902)
!6118 = !DILocation(line: 1712, column: 36, scope: !6112)
!6119 = !DILocalVariable(name: "result", scope: !6112, file: !3, line: 1714, type: !1971)
!6120 = !DILocation(line: 1714, column: 19, scope: !6112)
!6121 = !DILocation(line: 1714, column: 47, scope: !6112)
!6122 = !DILocation(line: 1715, column: 27, scope: !6112)
!6123 = !DILocation(line: 1715, column: 10, scope: !6112)
!6124 = !DILocation(line: 1714, column: 28, scope: !6112)
!6125 = !DILocation(line: 1717, column: 7, scope: !6126)
!6126 = distinct !DILexicalBlock(scope: !6112, file: !3, line: 1717, column: 7)
!6127 = !DILocation(line: 1717, column: 7, scope: !6112)
!6128 = !DILocation(line: 1718, column: 21, scope: !6126)
!6129 = !DILocation(line: 1718, column: 29, scope: !6126)
!6130 = !DILocation(line: 1718, column: 12, scope: !6126)
!6131 = !DILocation(line: 1718, column: 5, scope: !6126)
!6132 = !DILocation(line: 1719, column: 12, scope: !6133)
!6133 = distinct !DILexicalBlock(scope: !6126, file: !3, line: 1719, column: 12)
!6134 = !DILocation(line: 1719, column: 12, scope: !6126)
!6135 = !DILocalVariable(name: "subtype_map", scope: !6136, file: !3, line: 1721, type: !737)
!6136 = distinct !DILexicalBlock(scope: !6133, file: !3, line: 1720, column: 5)
!6137 = !DILocation(line: 1721, column: 14, scope: !6136)
!6138 = !DILocation(line: 1721, column: 28, scope: !6136)
!6139 = !DILocation(line: 1722, column: 26, scope: !6136)
!6140 = !DILocation(line: 1723, column: 5, scope: !6136)
!6141 = !DILocation(line: 1724, column: 23, scope: !6136)
!6142 = !DILocation(line: 1724, column: 5, scope: !6136)
!6143 = !DILocation(line: 1722, column: 7, scope: !6136)
!6144 = !DILocation(line: 1725, column: 14, scope: !6136)
!6145 = !DILocation(line: 1725, column: 7, scope: !6136)
!6146 = !DILocation(line: 1727, column: 8, scope: !6133)
!6147 = !DILocation(line: 1728, column: 1, scope: !6112)
